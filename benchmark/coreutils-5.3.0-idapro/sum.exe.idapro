.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 750D7C46B63B2198CC907643DFB9B01973725550C61CD817413417920CA872BD
.text:00401000 ; Input MD5    : 6020A95F2D04FB72C7135ED7B2A2F3A6
.text:00401000 ; Input CRC32  : 92E0D5A8
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/sum.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A25E (Wed Apr 20 18:41:34 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00006F00 (  28416.)
.text:00401000 ; Section size in file          : 00007000 (  28672.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4015B0+68↓p
.text:00401040                                         ; .text:004073B0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_407350
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_408000
.text:004010A2                 mov     edx, dword_408060
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_408004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_408080, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_408080
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_407320
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_408000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_408004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4015B0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_407350
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aSysv           db 'sysv',0             ; DATA XREF: .text:off_4012A0↓o
.text:00401285 aHelp           db 'help',0             ; DATA XREF: .text:004012B0↓o
.text:0040128A aVersion        db 'version',0          ; DATA XREF: .text:004012C0↓o
.text:00401292                 align 10h
.text:004012A0 off_4012A0      dd offset aSysv         ; DATA XREF: sub_4015B0+88↓o
.text:004012A0                                         ; "sysv"
.text:004012A4                 dd 2 dup(0)
.text:004012AC                 dd 73h
.text:004012B0                 dd offset aHelp         ; "help"
.text:004012B4                 dd 2 dup(0)
.text:004012BC                 dd 0FFFFFF7Eh
.text:004012C0                 dd offset aVersion      ; "version"
.text:004012C4                 dd 2 dup(0)
.text:004012CC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004012E0 ; const char Locale
.text:004012E0 Locale          db 0                    ; DATA XREF: sub_4015B0+25↓o
.text:004012E1                 align 20h
.text:00401300 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401300                                         ; DATA XREF: sub_4015B0+3F↓o
.text:00401323 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4015B0+47↓o
.text:00401323                                         ; sub_4015B0+54↓o
.text:0040132D ; const char aRs[]
.text:0040132D aRs             db 'rs',0               ; DATA XREF: sub_4015B0+90↓o
.text:00401330                 align 20h
.text:00401340 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401340                                         ; DATA XREF: sub_4015B0:loc_401683↓o
.text:00401340                                         ; sub_4018A0+F↓o
.text:00401367 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_4015B0+120↓o
.text:00401377 aKayvanAghaiepo db 'Kayvan Aghaiepour',0
.text:00401377                                         ; DATA XREF: sub_4015B0+128↓o
.text:00401389 a530            db '5.3.0',0            ; DATA XREF: sub_4015B0+133↓o
.text:0040138F aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4015B0+13B↓o
.text:0040139D ; const FILE stru_40139D
.text:0040139D stru_40139D     FILE <6D7573h, 90909090h, 90909090h, 90909090h, 90909090h, 90909090h, \
.text:0040139D                                         ; DATA XREF: sub_4015B0+143↓o
.text:0040139D                       90909090h, 90909090h>
.text:004013BD                 db  90h
.text:004013BE                 db  90h
.text:004013BF                 db  90h
.text:004013C0 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.text:004013C0                                         ; DATA XREF: sub_4015B0:loc_40170C↓o
.text:004013C0                                         ; sub_4018A0:loc_4018E3↓o
.text:004013E1                 align 20h
.text:00401400 aPrintChecksumA db 'Print checksum and block counts for each FILE.',0Ah
.text:00401400                                         ; DATA XREF: sub_4015B0+17B↓o
.text:00401400                                         ; sub_4018A0+62↓o
.text:00401400                 db 0Ah
.text:00401400                 db '  -r              defeat -s, use BSD sum algorithm, use 1K blocks'
.text:00401400                 db 0Ah
.text:00401400                 db '  -s, --sysv      use System V sum algorithm, use 512 bytes block'
.text:00401400                 db 's',0Ah,0
.text:004014B6                 align 10h
.text:004014C0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004014C0                                         ; DATA XREF: sub_4015B0+19D↓o
.text:004014C0                                         ; sub_4018A0+84↓o
.text:004014ED                 align 20h
.text:00401500 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401500                                         ; DATA XREF: sub_4015B0+1BF↓o
.text:00401500                                         ; sub_4018A0+A6↓o
.text:00401536                 align 10h
.text:00401540 aWithNoFileOrWh db 0Ah                  ; DATA XREF: sub_4015B0+1E1↓o
.text:00401540                                         ; sub_4018A0+C8↓o
.text:00401540                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.text:00401578 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4015B0+203↓o
.text:00401578                                         ; sub_4018A0+EA↓o
.text:00401578                 db 'Report bugs to <%s>.',0Ah,0
.text:0040158F aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040158F                                         ; DATA XREF: sub_4015B0+210↓o
.text:0040158F                                         ; sub_4018A0+F7↓o
.text:004015A5 ; const char FileName[]
.text:004015A5 FileName        db '-',0                ; DATA XREF: sub_4015B0+271↓o
.text:004015A5                                         ; sub_4015B0+2D0↓o ...
.text:004015A7                 align 10h
.text:004015B0
.text:004015B0 ; =============== S U B R O U T I N E =======================================
.text:004015B0
.text:004015B0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004015B0
.text:004015B0 sub_4015B0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004015B0
.text:004015B0 Category        = dword ptr -38h
.text:004015B0 Locale          = dword ptr -34h
.text:004015B0 var_30          = dword ptr -30h
.text:004015B0 var_2C          = byte ptr -2Ch
.text:004015B0 var_28          = byte ptr -28h
.text:004015B0 var_24          = dword ptr -24h
.text:004015B0 var_20          = dword ptr -20h
.text:004015B0 var_15          = byte ptr -15h
.text:004015B0 var_14          = dword ptr -14h
.text:004015B0 var_D           = byte ptr -0Dh
.text:004015B0 arg_0           = dword ptr  8
.text:004015B0 arg_4           = dword ptr  0Ch
.text:004015B0
.text:004015B0                 push    ebp
.text:004015B1                 xor     eax, eax
.text:004015B3                 mov     ebp, esp
.text:004015B5                 push    edi
.text:004015B6                 mov     edi, offset sub_4019C0
.text:004015BB                 push    esi
.text:004015BC                 push    ebx
.text:004015BD                 sub     esp, 2Ch
.text:004015C0                 mov     ebx, [ebp+arg_4]
.text:004015C3                 and     esp, 0FFFFFFF0h
.text:004015C6                 mov     esi, [ebp+arg_0]
.text:004015C9                 call    __alloca
.text:004015CE                 call    sub_4073F0
.text:004015D3                 mov     edx, [ebx]
.text:004015D5                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:004015DD                 mov     [esp+38h+Category], 0 ; Category
.text:004015E4                 mov     ds:dword_4091A0, edx
.text:004015EA                 call    setlocale
.text:004015EF                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004015F7                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:004015FE                 call    ds:libintl_bindtextdomain
.text:00401604                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:0040160B                 call    ds:libintl_textdomain
.text:00401611                 mov     [esp+38h+Category], offset sub_403530 ; void (__cdecl *)()
.text:00401618                 call    sub_401040
.text:0040161D                 mov     ds:byte_409000, 0
.text:00401624                 lea     esi, [esi+0]
.text:0040162A                 lea     edi, [edi+0]
.text:00401630
.text:00401630 loc_401630:                             ; CODE XREF: sub_4015B0+C7↓j
.text:00401630                                         ; sub_4015B0+D1↓j
.text:00401630                 mov     dword ptr [esp+38h+var_28], 0 ; int
.text:00401638                 mov     dword ptr [esp+38h+var_2C], offset off_4012A0 ; char
.text:00401640                 mov     [esp+38h+var_30], offset aRs ; "rs"
.text:00401648                 mov     [esp+38h+Locale], ebx ; int
.text:0040164C                 mov     [esp+38h+Category], esi ; int
.text:0040164F                 call    sub_4033C0
.text:00401654                 cmp     eax, 0FFFFFFFFh
.text:00401657                 jz      loc_4017D5
.text:0040165D                 cmp     eax, 0FFFFFF7Eh
.text:00401662                 jz      loc_40170C
.text:00401668                 cmp     eax, 0FFFFFF7Eh
.text:0040166D                 jle     short loc_4016BB
.text:0040166F                 cmp     eax, 72h ; 'r'
.text:00401672                 mov     edi, offset sub_4019C0
.text:00401677                 jz      short loc_401630
.text:00401679                 cmp     eax, 73h ; 's'
.text:0040167C                 mov     edi, offset sub_401C30
.text:00401681                 jz      short loc_401630
.text:00401683
.text:00401683 loc_401683:                             ; CODE XREF: sub_4015B0+110↓j
.text:00401683                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:0040168A                 call    ds:libintl_gettext
.text:00401690                 mov     ebx, ds:_iob
.text:00401696                 mov     esi, ds:dword_4091A0
.text:0040169C                 add     ebx, 40h ; '@'
.text:0040169F                 mov     [esp+38h+var_30], esi
.text:004016A3                 mov     [esp+38h+Locale], eax ; Format
.text:004016A7                 mov     [esp+38h+Category], ebx ; Stream
.text:004016AA                 call    fprintf
.text:004016AF                 mov     [esp+38h+Category], 1 ; Code
.text:004016B6
.text:004016B6 loc_4016B6:                             ; CODE XREF: sub_4015B0+15A↓j
.text:004016B6                                         ; sub_4015B0+256↓j
.text:004016B6                 call    exit
.text:004016BB ; ---------------------------------------------------------------------------
.text:004016BB
.text:004016BB loc_4016BB:                             ; CODE XREF: sub_4015B0+BD↑j
.text:004016BB                 cmp     eax, 0FFFFFF7Dh
.text:004016C0                 jnz     short loc_401683
.text:004016C2                 mov     [esp+38h+var_20], 0
.text:004016CA                 mov     edx, ds:_iob
.text:004016D0                 mov     [esp+38h+var_24], offset aDavidMackenzie ; "David MacKenzie"
.text:004016D8                 mov     dword ptr [esp+38h+var_28], offset aKayvanAghaiepo ; "Kayvan Aghaiepour"
.text:004016E0                 add     edx, 20h ; ' '
.text:004016E3                 mov     dword ptr [esp+38h+var_2C], offset a530 ; "5.3.0"
.text:004016EB                 mov     [esp+38h+var_30], offset aGnuCoreutils ; "GNU coreutils"
.text:004016F3                 mov     [esp+38h+Locale], offset stru_40139D ; FILE *
.text:004016FB                 mov     [esp+38h+Category], edx ; FILE *
.text:004016FE                 call    sub_403380
.text:00401703
.text:00401703 loc_401703:                             ; CODE XREF: sub_4015B0+220↓j
.text:00401703                 mov     [esp+38h+Category], 0
.text:0040170A                 jmp     short loc_4016B6
.text:0040170C ; ---------------------------------------------------------------------------
.text:0040170C
.text:0040170C loc_40170C:                             ; CODE XREF: sub_4015B0+B2↑j
.text:0040170C                 mov     [esp+38h+Category], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:00401713                 call    ds:libintl_gettext
.text:00401719                 mov     ecx, ds:dword_4091A0
.text:0040171F                 mov     [esp+38h+Category], eax ; Format
.text:00401722                 mov     [esp+38h+Locale], ecx
.text:00401726                 call    printf
.text:0040172B                 mov     [esp+38h+Category], offset aPrintChecksumA ; "Print checksum and block counts for eac"...
.text:00401732                 call    ds:libintl_gettext
.text:00401738                 mov     edi, ds:_iob
.text:0040173E                 add     edi, 20h ; ' '
.text:00401741                 mov     [esp+38h+Locale], edi ; Stream
.text:00401745                 mov     [esp+38h+Category], eax ; Buffer
.text:00401748                 call    fputs
.text:0040174D                 mov     [esp+38h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401754                 call    ds:libintl_gettext
.text:0040175A                 mov     esi, ds:_iob
.text:00401760                 add     esi, 20h ; ' '
.text:00401763                 mov     [esp+38h+Locale], esi ; Stream
.text:00401767                 mov     [esp+38h+Category], eax ; Buffer
.text:0040176A                 call    fputs
.text:0040176F                 mov     [esp+38h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401776                 call    ds:libintl_gettext
.text:0040177C                 mov     ebx, ds:_iob
.text:00401782                 add     ebx, 20h ; ' '
.text:00401785                 mov     [esp+38h+Locale], ebx ; Stream
.text:00401789                 mov     [esp+38h+Category], eax ; Buffer
.text:0040178C                 call    fputs
.text:00401791                 mov     [esp+38h+Category], offset aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:00401798                 call    ds:libintl_gettext
.text:0040179E                 mov     ecx, ds:_iob
.text:004017A4                 add     ecx, 20h ; ' '
.text:004017A7                 mov     [esp+38h+Locale], ecx ; Stream
.text:004017AB                 mov     [esp+38h+Category], eax ; Buffer
.text:004017AE                 call    fputs
.text:004017B3                 mov     [esp+38h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004017BA                 call    ds:libintl_gettext
.text:004017C0                 mov     [esp+38h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004017C8                 mov     [esp+38h+Category], eax ; Format
.text:004017CB                 call    printf
.text:004017D0                 jmp     loc_401703
.text:004017D5 ; ---------------------------------------------------------------------------
.text:004017D5
.text:004017D5 loc_4017D5:                             ; CODE XREF: sub_4015B0+A7↑j
.text:004017D5                 mov     eax, dword_408010
.text:004017DA                 mov     edx, esi
.text:004017DC                 sub     edx, eax
.text:004017DE                 mov     [ebp+var_14], edx
.text:004017E1                 test    edx, edx
.text:004017E3                 jle     loc_40187C
.text:004017E9                 mov     [ebp+var_D], 1
.text:004017ED                 cmp     eax, esi
.text:004017EF                 jl      short loc_401840
.text:004017F1
.text:004017F1 loc_4017F1:                             ; CODE XREF: sub_4015B0+2C7↓j
.text:004017F1                                         ; sub_4015B0+2DC↓j
.text:004017F1                 cmp     ds:byte_409000, 0
.text:004017F8                 jnz     short loc_40180B
.text:004017FA
.text:004017FA loc_4017FA:                             ; CODE XREF: sub_4015B0+26A↓j
.text:004017FA                                         ; sub_4015B0+28B↓j
.text:004017FA                 xor     ecx, ecx
.text:004017FC                 cmp     [ebp+var_D], 0
.text:00401800                 setz    cl
.text:00401803                 mov     [esp+38h+Category], ecx
.text:00401806                 jmp     loc_4016B6
.text:0040180B ; ---------------------------------------------------------------------------
.text:0040180B
.text:0040180B loc_40180B:                             ; CODE XREF: sub_4015B0+248↑j
.text:0040180B                 mov     edi, ds:_iob
.text:00401811                 mov     [esp+38h+Category], edi ; Stream
.text:00401814                 call    fclose
.text:00401819                 inc     eax
.text:0040181A                 jnz     short loc_4017FA
.text:0040181C                 call    _errno
.text:00401821                 mov     [esp+38h+var_30], offset FileName ; "-"
.text:00401829                 mov     ebx, [eax]
.text:0040182B                 mov     [esp+38h+Category], 1 ; Code
.text:00401832                 mov     [esp+38h+Locale], ebx ; ErrorMessage
.text:00401836                 call    sub_407070
.text:0040183B                 jmp     short loc_4017FA
.text:0040183B ; ---------------------------------------------------------------------------
.text:0040183D                 align 10h
.text:00401840
.text:00401840 loc_401840:                             ; CODE XREF: sub_4015B0+23F↑j
.text:00401840                                         ; sub_4015B0+2C5↓j
.text:00401840                 mov     [ebp+var_15], 0
.text:00401844                 mov     ecx, [ebp+var_14]
.text:00401847                 mov     [esp+38h+Locale], ecx ; int
.text:0040184B                 mov     ecx, [ebx+eax*4]
.text:0040184E                 mov     [esp+38h+Category], ecx ; FileName
.text:00401851                 call    edi ; sub_4019C0
.text:00401853                 test    al, al
.text:00401855                 jz      short loc_401861
.text:00401857                 cmp     [ebp+var_D], 0
.text:0040185B                 jz      short loc_401861
.text:0040185D                 mov     [ebp+var_15], 1
.text:00401861
.text:00401861 loc_401861:                             ; CODE XREF: sub_4015B0+2A5↑j
.text:00401861                                         ; sub_4015B0+2AB↑j
.text:00401861                 movzx   edx, [ebp+var_15]
.text:00401865                 mov     eax, dword_408010
.text:0040186A                 inc     eax
.text:0040186B                 mov     [ebp+var_D], dl
.text:0040186E                 cmp     eax, esi
.text:00401870                 mov     dword_408010, eax
.text:00401875                 jl      short loc_401840
.text:00401877                 jmp     loc_4017F1
.text:0040187C ; ---------------------------------------------------------------------------
.text:0040187C
.text:0040187C loc_40187C:                             ; CODE XREF: sub_4015B0+233↑j
.text:0040187C                 mov     [esp+38h+Locale], edx ; int
.text:00401880                 mov     [esp+38h+Category], offset FileName ; "-"
.text:00401887                 call    edi ; sub_4019C0
.text:00401889                 mov     [ebp+var_D], al
.text:0040188C                 jmp     loc_4017F1
.text:0040188C sub_4015B0      endp
.text:0040188C
.text:00401891 ; ---------------------------------------------------------------------------
.text:00401891                 jmp     short sub_4018A0
.text:00401891 ; ---------------------------------------------------------------------------
.text:00401893                 align 10h
.text:004018A0
.text:004018A0 ; =============== S U B R O U T I N E =======================================
.text:004018A0
.text:004018A0 ; Attributes: noreturn
.text:004018A0
.text:004018A0 ; void __cdecl __noreturn sub_4018A0(int Code)
.text:004018A0 sub_4018A0      proc near               ; CODE XREF: .text:00401891↑j
.text:004018A0                                         ; sub_406C70+A↓p
.text:004018A0
.text:004018A0 Stream          = dword ptr -1Ch
.text:004018A0 Format          = dword ptr -18h
.text:004018A0 var_14          = dword ptr -14h
.text:004018A0 var_4           = dword ptr -4
.text:004018A0 Code            = dword ptr  4
.text:004018A0
.text:004018A0                 sub     esp, 1Ch
.text:004018A3                 mov     [esp+1Ch+var_4], ebx
.text:004018A7                 mov     ebx, [esp+1Ch+Code]
.text:004018AB                 test    ebx, ebx
.text:004018AD                 jz      short loc_4018E3
.text:004018AF                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004018B6                 call    ds:libintl_gettext
.text:004018BC                 mov     edx, ds:_iob
.text:004018C2                 mov     ecx, ds:dword_4091A0
.text:004018C8                 add     edx, 40h ; '@'
.text:004018CB                 mov     [esp+1Ch+var_14], ecx
.text:004018CF                 mov     [esp+1Ch+Format], eax ; Format
.text:004018D3                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004018D6                 call    fprintf
.text:004018DB
.text:004018DB loc_4018DB:                             ; CODE XREF: sub_4018A0+107↓j
.text:004018DB                 mov     [esp+1Ch+Stream], ebx ; Code
.text:004018DE                 call    exit
.text:004018E3 ; ---------------------------------------------------------------------------
.text:004018E3
.text:004018E3 loc_4018E3:                             ; CODE XREF: sub_4018A0+D↑j
.text:004018E3                 mov     [esp+1Ch+Stream], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:004018EA                 call    ds:libintl_gettext
.text:004018F0                 mov     ecx, ds:dword_4091A0
.text:004018F6                 mov     [esp+1Ch+Stream], eax ; Format
.text:004018F9                 mov     [esp+1Ch+Format], ecx
.text:004018FD                 call    printf
.text:00401902                 mov     [esp+1Ch+Stream], offset aPrintChecksumA ; "Print checksum and block counts for eac"...
.text:00401909                 call    ds:libintl_gettext
.text:0040190F                 mov     ecx, ds:_iob
.text:00401915                 add     ecx, 20h ; ' '
.text:00401918                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040191C                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040191F                 call    fputs
.text:00401924                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040192B                 call    ds:libintl_gettext
.text:00401931                 mov     ecx, ds:_iob
.text:00401937                 add     ecx, 20h ; ' '
.text:0040193A                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040193E                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401941                 call    fputs
.text:00401946                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:0040194D                 call    ds:libintl_gettext
.text:00401953                 mov     ecx, ds:_iob
.text:00401959                 add     ecx, 20h ; ' '
.text:0040195C                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401960                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401963                 call    fputs
.text:00401968                 mov     [esp+1Ch+Stream], offset aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0040196F                 call    ds:libintl_gettext
.text:00401975                 mov     ecx, ds:_iob
.text:0040197B                 add     ecx, 20h ; ' '
.text:0040197E                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401982                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401985                 call    fputs
.text:0040198A                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401991                 call    ds:libintl_gettext
.text:00401997                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040199F                 mov     [esp+1Ch+Stream], eax ; Format
.text:004019A2                 call    printf
.text:004019A7                 jmp     loc_4018DB
.text:004019A7 sub_4018A0      endp
.text:004019A7
.text:004019A7 ; ---------------------------------------------------------------------------
.text:004019AC ; const char Format[]
.text:004019AC Format          db '%05d %5s',0         ; DATA XREF: sub_4019C0+11A↓o
.text:004019B5 ; const char aS[]
.text:004019B5 aS              db ' %s',0              ; DATA XREF: sub_4019C0:loc_401B3B↓o
.text:004019B5                                         ; sub_401C30:loc_401E11↓o
.text:004019B9 ; const char aS_0[]
.text:004019B9 aS_0            db '%s',0               ; DATA XREF: sub_4019C0+199↓o
.text:004019B9                                         ; sub_4019C0+1C7↓o ...
.text:004019BC ; const char aR[]
.text:004019BC aR              db 'r',0                ; DATA XREF: sub_4019C0:loc_401BF7↓o
.text:004019BE                 align 10h
.text:004019C0
.text:004019C0 ; =============== S U B R O U T I N E =======================================
.text:004019C0
.text:004019C0
.text:004019C0 ; int __cdecl sub_4019C0(char *FileName, int)
.text:004019C0 sub_4019C0      proc near               ; CODE XREF: sub_4015B0+2A1↑p
.text:004019C0                                         ; sub_4015B0+2D7↑p
.text:004019C0                                         ; DATA XREF: ...
.text:004019C0
.text:004019C0 FileHandle      = dword ptr -0CCh
.text:004019C0 File            = dword ptr -0C8h
.text:004019C0 Buffer          = dword ptr -0C4h
.text:004019C0 var_C0          = byte ptr -0C0h
.text:004019C0 var_BC          = dword ptr -0BCh
.text:004019C0 var_B8          = dword ptr -0B8h
.text:004019C0 var_B4          = dword ptr -0B4h
.text:004019C0 var_B0          = dword ptr -0B0h
.text:004019C0 var_A4          = dword ptr -0A4h
.text:004019C0 var_A0          = dword ptr -0A0h
.text:004019C0 var_9C          = byte ptr -9Ch
.text:004019C0 FileName        = dword ptr  4
.text:004019C0 arg_4           = dword ptr  8
.text:004019C0
.text:004019C0                 push    ebp
.text:004019C1                 mov     ecx, 2
.text:004019C6                 xor     ebp, ebp
.text:004019C8                 push    edi
.text:004019C9                 mov     edi, offset FileName ; "-"
.text:004019CE                 push    esi
.text:004019CF                 push    ebx
.text:004019D0                 sub     esp, 0BCh
.text:004019D6                 mov     esi, [esp+0CCh+FileName]
.text:004019DD                 mov     [esp+0CCh+var_A4], 0
.text:004019E5                 mov     [esp+0CCh+var_A0], 0
.text:004019ED                 cld
.text:004019EE                 repe cmpsb
.text:004019F0                 jnz     loc_401BF7
.text:004019F6                 mov     ds:byte_409000, 1
.text:004019FD                 mov     ebx, ds:_iob
.text:00401A03
.text:00401A03 loc_401A03:                             ; CODE XREF: sub_4019C0+252↓j
.text:00401A03                 mov     edx, [ebx+10h]
.text:00401A06                 mov     [esp+0CCh+FileHandle], edx ; FileHandle
.text:00401A09                 call    _isatty
.text:00401A0E                 test    eax, eax
.text:00401A10                 jz      loc_401BDF
.text:00401A16                 lea     esi, [esi+0]
.text:00401A19                 lea     edi, [edi+0]
.text:00401A20
.text:00401A20 loc_401A20:                             ; CODE XREF: sub_4019C0+9D↓j
.text:00401A20                                         ; sub_4019C0+232↓j
.text:00401A20                 mov     edi, [ebx+4]
.text:00401A23                 dec     edi
.text:00401A24                 test    edi, edi
.text:00401A26                 mov     [ebx+4], edi
.text:00401A29                 js      loc_401BD0
.text:00401A2F                 mov     edx, [ebx]
.text:00401A31                 movzx   ecx, byte ptr [edx]
.text:00401A34                 inc     edx
.text:00401A35                 mov     [ebx], edx
.text:00401A37
.text:00401A37 loc_401A37:                             ; CODE XREF: sub_4019C0+21A↓j
.text:00401A37                 cmp     ecx, 0FFFFFFFFh
.text:00401A3A                 jz      short loc_401A5F
.text:00401A3C                 add     [esp+0CCh+var_A4], 1
.text:00401A41                 mov     esi, ebp
.text:00401A43                 mov     eax, ebp
.text:00401A45                 adc     [esp+0CCh+var_A0], 0
.text:00401A4A                 and     esi, 1
.text:00401A4D                 sar     eax, 1
.text:00401A4F                 shl     esi, 0Fh
.text:00401A52                 lea     ebp, [esi+eax]
.text:00401A55                 add     ebp, ecx
.text:00401A57                 and     ebp, 0FFFFh
.text:00401A5D                 jmp     short loc_401A20
.text:00401A5F ; ---------------------------------------------------------------------------
.text:00401A5F
.text:00401A5F loc_401A5F:                             ; CODE XREF: sub_4019C0+7A↑j
.text:00401A5F                 test    byte ptr [ebx+0Ch], 20h
.text:00401A63                 jnz     loc_401B82
.text:00401A69                 cld
.text:00401A6A                 mov     esi, [esp+0CCh+FileName]
.text:00401A71                 mov     ecx, 2
.text:00401A76                 mov     edi, offset FileName ; "-"
.text:00401A7B                 repe cmpsb
.text:00401A7D                 jz      short loc_401A8E
.text:00401A7F                 mov     [esp+0CCh+FileHandle], ebx ; Stream
.text:00401A82                 call    fclose
.text:00401A87                 inc     eax
.text:00401A88                 jz      loc_401B54
.text:00401A8E
.text:00401A8E loc_401A8E:                             ; CODE XREF: sub_4019C0+BD↑j
.text:00401A8E                 mov     [esp+0CCh+var_B4], 400h ; int
.text:00401A96                 mov     edx, [esp+0CCh+var_A4]
.text:00401A9A                 lea     ecx, [esp+0CCh+var_9C]
.text:00401A9E                 mov     [esp+0CCh+Buffer], ecx ; Buffer
.text:00401AA2                 mov     edi, [esp+0CCh+var_A0]
.text:00401AA6                 mov     [esp+0CCh+var_B0], 0 ; int
.text:00401AAE                 mov     [esp+0CCh+FileHandle], edx ; int
.text:00401AB1                 mov     [esp+0CCh+var_BC], 1 ; int
.text:00401AB9                 mov     [esp+0CCh+var_B8], 0 ; int
.text:00401AC1                 mov     dword ptr [esp+0CCh+var_C0], 0 ; int
.text:00401AC9                 mov     [esp+0CCh+File], edi ; int
.text:00401ACD                 call    sub_4036C0
.text:00401AD2                 mov     [esp+0CCh+Buffer], eax
.text:00401AD6                 mov     [esp+0CCh+File], ebp
.text:00401ADA                 mov     [esp+0CCh+FileHandle], offset Format ; "%05d %5s"
.text:00401AE1                 call    printf
.text:00401AE6                 cmp     [esp+0CCh+arg_4], 1
.text:00401AEE                 jg      short loc_401B3B
.text:00401AF0
.text:00401AF0 loc_401AF0:                             ; CODE XREF: sub_4019C0+192↓j
.text:00401AF0                 mov     ebx, ds:_iob
.text:00401AF6                 mov     ebp, [ebx+24h]
.text:00401AF9                 dec     ebp
.text:00401AFA                 mov     [ebx+24h], ebp
.text:00401AFD                 test    ebp, ebp
.text:00401AFF                 js      short loc_401B20
.text:00401B01                 mov     esi, ds:_iob
.text:00401B07                 mov     edi, [esi+20h]
.text:00401B0A                 mov     byte ptr [edi], 0Ah
.text:00401B0D                 inc     dword ptr [esi+20h]
.text:00401B10
.text:00401B10 loc_401B10:                             ; CODE XREF: sub_4019C0+179↓j
.text:00401B10                 mov     eax, 1
.text:00401B15
.text:00401B15 loc_401B15:                             ; CODE XREF: sub_4019C0+1C0↓j
.text:00401B15                 add     esp, 0BCh
.text:00401B1B                 pop     ebx
.text:00401B1C                 pop     esi
.text:00401B1D                 pop     edi
.text:00401B1E                 pop     ebp
.text:00401B1F                 retn
.text:00401B20 ; ---------------------------------------------------------------------------
.text:00401B20
.text:00401B20 loc_401B20:                             ; CODE XREF: sub_4019C0+13F↑j
.text:00401B20                 mov     [esp+0CCh+FileHandle], 0Ah ; Ch
.text:00401B27                 mov     edx, ds:_iob
.text:00401B2D                 add     edx, 20h ; ' '
.text:00401B30                 mov     [esp+0CCh+File], edx ; File
.text:00401B34                 call    _flsbuf
.text:00401B39                 jmp     short loc_401B10
.text:00401B3B ; ---------------------------------------------------------------------------
.text:00401B3B
.text:00401B3B loc_401B3B:                             ; CODE XREF: sub_4019C0+12E↑j
.text:00401B3B                 mov     [esp+0CCh+FileHandle], offset aS ; " %s"
.text:00401B42                 mov     eax, [esp+0CCh+FileName]
.text:00401B49                 mov     [esp+0CCh+File], eax
.text:00401B4D                 call    printf
.text:00401B52                 jmp     short loc_401AF0
.text:00401B54 ; ---------------------------------------------------------------------------
.text:00401B54
.text:00401B54 loc_401B54:                             ; CODE XREF: sub_4019C0+C8↑j
.text:00401B54                                         ; sub_4019C0+258↓j
.text:00401B54                 call    _errno
.text:00401B59                 mov     [esp+0CCh+Buffer], offset aS_0 ; "%s"
.text:00401B61                 mov     esi, [esp+0CCh+FileName]
.text:00401B68                 mov     dword ptr [esp+0CCh+var_C0], esi ; char
.text:00401B6C                 mov     ebx, [eax]
.text:00401B6E                 mov     [esp+0CCh+FileHandle], 0 ; Code
.text:00401B75                 mov     [esp+0CCh+File], ebx ; ErrorMessage
.text:00401B79                 call    sub_407070
.text:00401B7E
.text:00401B7E loc_401B7E:                             ; CODE XREF: sub_4019C0+200↓j
.text:00401B7E                                         ; sub_4019C0+20A↓j
.text:00401B7E                 xor     eax, eax
.text:00401B80                 jmp     short loc_401B15
.text:00401B82 ; ---------------------------------------------------------------------------
.text:00401B82
.text:00401B82 loc_401B82:                             ; CODE XREF: sub_4019C0+A3↑j
.text:00401B82                 call    _errno
.text:00401B87                 mov     [esp+0CCh+Buffer], offset aS_0 ; "%s"
.text:00401B8F                 mov     ecx, [esp+0CCh+FileName]
.text:00401B96                 mov     edi, offset FileName ; "-"
.text:00401B9B                 mov     dword ptr [esp+0CCh+var_C0], ecx ; char
.text:00401B9F                 mov     ebp, [eax]
.text:00401BA1                 mov     [esp+0CCh+FileHandle], 0 ; Code
.text:00401BA8                 mov     [esp+0CCh+File], ebp ; ErrorMessage
.text:00401BAC                 call    sub_407070
.text:00401BB1                 cld
.text:00401BB2                 mov     esi, [esp+0CCh+FileName]
.text:00401BB9                 mov     ecx, 2
.text:00401BBE                 repe cmpsb
.text:00401BC0                 jz      short loc_401B7E
.text:00401BC2                 mov     [esp+0CCh+FileHandle], ebx ; Stream
.text:00401BC5                 call    fclose
.text:00401BCA                 jmp     short loc_401B7E
.text:00401BCA ; ---------------------------------------------------------------------------
.text:00401BCC                 align 10h
.text:00401BD0
.text:00401BD0 loc_401BD0:                             ; CODE XREF: sub_4019C0+69↑j
.text:00401BD0                 mov     [esp+0CCh+FileHandle], ebx ; File
.text:00401BD3                 call    _filbuf
.text:00401BD8                 mov     ecx, eax
.text:00401BDA                 jmp     loc_401A37
.text:00401BDF ; ---------------------------------------------------------------------------
.text:00401BDF
.text:00401BDF loc_401BDF:                             ; CODE XREF: sub_4019C0+50↑j
.text:00401BDF                 mov     [esp+0CCh+File], 8000h ; Mode
.text:00401BE7                 mov     ecx, [ebx+10h]
.text:00401BEA                 mov     [esp+0CCh+FileHandle], ecx ; FileHandle
.text:00401BED                 call    _setmode
.text:00401BF2                 jmp     loc_401A20
.text:00401BF7 ; ---------------------------------------------------------------------------
.text:00401BF7
.text:00401BF7 loc_401BF7:                             ; CODE XREF: sub_4019C0+30↑j
.text:00401BF7                 mov     [esp+0CCh+File], offset aR ; "r"
.text:00401BFF                 mov     edx, [esp+0CCh+FileName]
.text:00401C06                 mov     [esp+0CCh+FileHandle], edx ; FileName
.text:00401C09                 call    fopen
.text:00401C0E                 test    eax, eax
.text:00401C10                 mov     ebx, eax
.text:00401C12                 jnz     loc_401A03
.text:00401C18                 jmp     loc_401B54
.text:00401C18 sub_4019C0      endp
.text:00401C18
.text:00401C18 ; ---------------------------------------------------------------------------
.text:00401C1D ; const char aDS[]
.text:00401C1D aDS             db '%d %s',0            ; DATA XREF: sub_401C30+185↓o
.text:00401C23                 align 10h
.text:00401C30
.text:00401C30 ; =============== S U B R O U T I N E =======================================
.text:00401C30
.text:00401C30
.text:00401C30 sub_401C30      proc near               ; DATA XREF: sub_4015B0+CC↑o
.text:00401C30
.text:00401C30 FileHandle      = dword ptr -20CCh
.text:00401C30 ErrorMessage    = dword ptr -20C8h
.text:00401C30 Buffer          = dword ptr -20C4h
.text:00401C30 var_20C0        = byte ptr -20C0h
.text:00401C30 var_20BC        = dword ptr -20BCh
.text:00401C30 var_20B8        = dword ptr -20B8h
.text:00401C30 var_20B4        = dword ptr -20B4h
.text:00401C30 var_20B0        = dword ptr -20B0h
.text:00401C30 var_20A4        = dword ptr -20A4h
.text:00401C30 var_20A0        = dword ptr -20A0h
.text:00401C30 var_209C        = byte ptr -209Ch
.text:00401C30 var_201C        = byte ptr -201Ch
.text:00401C30 FileName        = dword ptr  4
.text:00401C30 arg_4           = dword ptr  8
.text:00401C30
.text:00401C30                 push    ebp
.text:00401C31                 mov     eax, 20BCh
.text:00401C36                 push    edi
.text:00401C37                 push    esi
.text:00401C38                 push    ebx             ; Size
.text:00401C39                 call    __alloca
.text:00401C3E                 mov     [esp+20CCh+var_20A4], 0
.text:00401C46                 mov     esi, [esp+20CCh+FileName]
.text:00401C4D                 mov     edi, offset FileName ; "-"
.text:00401C52                 mov     [esp+20CCh+var_20A0], 0
.text:00401C5A                 mov     ecx, 2
.text:00401C5F                 xor     ebx, ebx
.text:00401C61                 cld
.text:00401C62                 repe cmpsb
.text:00401C64                 jnz     loc_401E75
.text:00401C6A                 mov     ds:byte_409000, 1
.text:00401C71                 xor     ebp, ebp
.text:00401C73
.text:00401C73 loc_401C73:                             ; CODE XREF: sub_401C30+261↓j
.text:00401C73                 mov     [esp+20CCh+FileHandle], ebp ; FileHandle
.text:00401C76                 lea     esi, [esp+20CCh+var_201C]
.text:00401C7D                 call    _isatty
.text:00401C82                 test    eax, eax
.text:00401C84                 jz      loc_401E59
.text:00401C8A                 lea     esi, [esi+0]
.text:00401C90
.text:00401C90 loc_401C90:                             ; CODE XREF: sub_401C30+AB↓j
.text:00401C90                                         ; sub_401C30+240↓j
.text:00401C90                 mov     [esp+20CCh+Buffer], 2000h
.text:00401C98                 mov     [esp+20CCh+ErrorMessage], esi
.text:00401C9C                 mov     [esp+20CCh+FileHandle], ebp
.text:00401C9F                 call    sub_403610
.text:00401CA4                 test    eax, eax
.text:00401CA6                 mov     ecx, eax
.text:00401CA8                 jz      loc_401D34
.text:00401CAE                 cmp     eax, 0FFFFFFFFh
.text:00401CB1                 jz      short loc_401CDD
.text:00401CB3                 xor     edx, edx
.text:00401CB5                 cmp     edx, eax
.text:00401CB7                 jnb     short loc_401CCF
.text:00401CB9                 lea     esi, [esi+0]
.text:00401CC0
.text:00401CC0 loc_401CC0:                             ; CODE XREF: sub_401C30+9D↓j
.text:00401CC0                 movzx   edi, [esp+edx+20CCh+var_201C]
.text:00401CC8                 inc     edx
.text:00401CC9                 add     ebx, edi
.text:00401CCB                 cmp     edx, ecx
.text:00401CCD                 jb      short loc_401CC0
.text:00401CCF
.text:00401CCF loc_401CCF:                             ; CODE XREF: sub_401C30+87↑j
.text:00401CCF                 mov     edx, ecx
.text:00401CD1                 xor     ecx, ecx
.text:00401CD3                 add     [esp+20CCh+var_20A4], edx
.text:00401CD7                 adc     [esp+20CCh+var_20A0], ecx
.text:00401CDB                 jmp     short loc_401C90
.text:00401CDD ; ---------------------------------------------------------------------------
.text:00401CDD
.text:00401CDD loc_401CDD:                             ; CODE XREF: sub_401C30+81↑j
.text:00401CDD                 call    _errno
.text:00401CE2                 mov     [esp+20CCh+Buffer], offset aS_0 ; "%s"
.text:00401CEA                 mov     ecx, [esp+20CCh+FileName]
.text:00401CF1                 mov     edi, offset FileName ; "-"
.text:00401CF6                 mov     dword ptr [esp+20CCh+var_20C0], ecx ; char
.text:00401CFA                 mov     edx, [eax]
.text:00401CFC                 mov     [esp+20CCh+FileHandle], 0 ; Code
.text:00401D03                 mov     [esp+20CCh+ErrorMessage], edx ; ErrorMessage
.text:00401D07                 call    sub_407070
.text:00401D0C                 cld
.text:00401D0D                 mov     esi, [esp+20CCh+FileName]
.text:00401D14                 mov     ecx, 2
.text:00401D19                 repe cmpsb
.text:00401D1B                 jnz     short loc_401D2A
.text:00401D1D
.text:00401D1D loc_401D1D:                             ; CODE XREF: sub_401C30+102↓j
.text:00401D1D                                         ; sub_401C30+224↓j
.text:00401D1D                 xor     eax, eax
.text:00401D1F
.text:00401D1F loc_401D1F:                             ; CODE XREF: sub_401C30+1C1↓j
.text:00401D1F                 add     esp, 20BCh
.text:00401D25                 pop     ebx
.text:00401D26                 pop     esi
.text:00401D27                 pop     edi
.text:00401D28                 pop     ebp
.text:00401D29                 retn
.text:00401D2A ; ---------------------------------------------------------------------------
.text:00401D2A
.text:00401D2A loc_401D2A:                             ; CODE XREF: sub_401C30+EB↑j
.text:00401D2A                 mov     [esp+20CCh+FileHandle], ebp ; FileHandle
.text:00401D2D                 call    _close
.text:00401D32                 jmp     short loc_401D1D
.text:00401D34 ; ---------------------------------------------------------------------------
.text:00401D34
.text:00401D34 loc_401D34:                             ; CODE XREF: sub_401C30+78↑j
.text:00401D34                 cld
.text:00401D35                 mov     esi, [esp+20CCh+FileName]
.text:00401D3C                 mov     ecx, 2
.text:00401D41                 mov     edi, offset FileName ; "-"
.text:00401D46                 repe cmpsb
.text:00401D48                 jz      short loc_401D59
.text:00401D4A                 mov     [esp+20CCh+FileHandle], ebp ; FileHandle
.text:00401D4D                 call    _close
.text:00401D52                 inc     eax
.text:00401D53                 jz      loc_401E2A
.text:00401D59
.text:00401D59 loc_401D59:                             ; CODE XREF: sub_401C30+118↑j
.text:00401D59                 mov     [esp+20CCh+var_20B4], 200h ; int
.text:00401D61                 movzx   ecx, bx
.text:00401D64                 mov     edx, [esp+20CCh+var_20A4]
.text:00401D68                 mov     [esp+20CCh+var_20B0], 0 ; int
.text:00401D70                 shr     ebx, 10h
.text:00401D73                 add     ecx, ebx
.text:00401D75                 mov     [esp+20CCh+FileHandle], edx ; int
.text:00401D78                 movzx   edi, cx
.text:00401D7B                 lea     ebx, [esp+20CCh+var_209C]
.text:00401D7F                 mov     [esp+20CCh+var_20BC], 1 ; int
.text:00401D87                 sar     ecx, 10h
.text:00401D8A                 add     edi, ecx
.text:00401D8C                 mov     [esp+20CCh+var_20B8], 0 ; int
.text:00401D94                 mov     ecx, [esp+20CCh+var_20A0]
.text:00401D98                 mov     dword ptr [esp+20CCh+var_20C0], 0 ; int
.text:00401DA0                 mov     [esp+20CCh+Buffer], ebx ; Buffer
.text:00401DA4                 mov     [esp+20CCh+ErrorMessage], ecx ; int
.text:00401DA8                 call    sub_4036C0
.text:00401DAD                 mov     [esp+20CCh+Buffer], eax
.text:00401DB1                 mov     [esp+20CCh+ErrorMessage], edi
.text:00401DB5                 mov     [esp+20CCh+FileHandle], offset aDS ; "%d %s"
.text:00401DBC                 call    printf
.text:00401DC1                 mov     ebp, [esp+20CCh+arg_4]
.text:00401DC8                 test    ebp, ebp
.text:00401DCA                 jnz     short loc_401E11
.text:00401DCC
.text:00401DCC loc_401DCC:                             ; CODE XREF: sub_401C30+1F8↓j
.text:00401DCC                 mov     ebp, ds:_iob
.text:00401DD2                 mov     esi, [ebp+24h]
.text:00401DD5                 dec     esi
.text:00401DD6                 mov     [ebp+24h], esi
.text:00401DD9                 test    esi, esi
.text:00401DDB                 js      short loc_401DF6
.text:00401DDD                 mov     edi, ds:_iob
.text:00401DE3                 mov     ebx, [edi+20h]
.text:00401DE6                 mov     byte ptr [ebx], 0Ah
.text:00401DE9                 inc     dword ptr [edi+20h]
.text:00401DEC
.text:00401DEC loc_401DEC:                             ; CODE XREF: sub_401C30+1DF↓j
.text:00401DEC                 mov     eax, 1
.text:00401DF1                 jmp     loc_401D1F
.text:00401DF6 ; ---------------------------------------------------------------------------
.text:00401DF6
.text:00401DF6 loc_401DF6:                             ; CODE XREF: sub_401C30+1AB↑j
.text:00401DF6                 mov     [esp+20CCh+FileHandle], 0Ah ; Ch
.text:00401DFD                 mov     edx, ds:_iob
.text:00401E03                 add     edx, 20h ; ' '
.text:00401E06                 mov     [esp+20CCh+ErrorMessage], edx ; File
.text:00401E0A                 call    _flsbuf
.text:00401E0F                 jmp     short loc_401DEC
.text:00401E11 ; ---------------------------------------------------------------------------
.text:00401E11
.text:00401E11 loc_401E11:                             ; CODE XREF: sub_401C30+19A↑j
.text:00401E11                 mov     [esp+20CCh+FileHandle], offset aS ; " %s"
.text:00401E18                 mov     eax, [esp+20CCh+FileName]
.text:00401E1F                 mov     [esp+20CCh+ErrorMessage], eax
.text:00401E23                 call    printf
.text:00401E28                 jmp     short loc_401DCC
.text:00401E2A ; ---------------------------------------------------------------------------
.text:00401E2A
.text:00401E2A loc_401E2A:                             ; CODE XREF: sub_401C30+123↑j
.text:00401E2A                                         ; sub_401C30+267↓j
.text:00401E2A                 call    _errno
.text:00401E2F                 mov     [esp+20CCh+Buffer], offset aS_0 ; "%s"
.text:00401E37                 mov     esi, [esp+20CCh+FileName]
.text:00401E3E                 mov     dword ptr [esp+20CCh+var_20C0], esi ; char
.text:00401E42                 mov     ebx, [eax]
.text:00401E44                 mov     [esp+20CCh+FileHandle], 0 ; Code
.text:00401E4B                 mov     [esp+20CCh+ErrorMessage], ebx ; ErrorMessage
.text:00401E4F                 call    sub_407070
.text:00401E54                 jmp     loc_401D1D
.text:00401E59 ; ---------------------------------------------------------------------------
.text:00401E59
.text:00401E59 loc_401E59:                             ; CODE XREF: sub_401C30+54↑j
.text:00401E59                 mov     [esp+20CCh+ErrorMessage], 8000h ; Mode
.text:00401E61                 lea     esi, [esp+20CCh+var_201C]
.text:00401E68                 mov     [esp+20CCh+FileHandle], ebp ; FileHandle
.text:00401E6B                 call    _setmode
.text:00401E70                 jmp     loc_401C90
.text:00401E75 ; ---------------------------------------------------------------------------
.text:00401E75
.text:00401E75 loc_401E75:                             ; CODE XREF: sub_401C30+34↑j
.text:00401E75                 mov     [esp+20CCh+ErrorMessage], 0 ; OpenFlag
.text:00401E7D                 mov     edx, [esp+20CCh+FileName]
.text:00401E84                 mov     [esp+20CCh+FileHandle], edx ; FileName
.text:00401E87                 call    _open
.text:00401E8C                 cmp     eax, 0FFFFFFFFh
.text:00401E8F                 mov     ebp, eax
.text:00401E91                 jnz     loc_401C73
.text:00401E97                 jmp     short loc_401E2A
.text:00401E97 sub_401C30      endp
.text:00401E97
.text:00401E97 ; ---------------------------------------------------------------------------
.text:00401E99                 align 10h
.text:00401EA0 dword_401EA0    dd 90002D2Dh, 7 dup(90909090h)
.text:00401EA0                                         ; DATA XREF: sub_4020F0+E4↓o
.text:00401EC0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401EC0                                         ; DATA XREF: sub_4020F0+2FC↓o
.text:00401EED                 align 20h
.text:00401F00 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401F00                                         ; DATA XREF: sub_4020F0:loc_402452↓o
.text:00401F2D                 align 20h
.text:00401F40 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401F40                                         ; DATA XREF: sub_4020F0:loc_4024F0↓o
.text:00401F40                                         ; sub_4020F0:loc_4028B7↓o
.text:00401F66                 align 20h
.text:00401F80 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00401F80                                         ; DATA XREF: sub_4020F0+48E↓o
.text:00401FA0 dword_401FA0    dd 90909000h, 7 dup(90909090h)
.text:00401FA0                                         ; DATA XREF: sub_4020F0:loc_4025C1↓o
.text:00401FC0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00401FC0                                         ; DATA XREF: sub_4020F0:loc_4025DA↓o
.text:00401FE0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00401FE0                                         ; DATA XREF: sub_4020F0:loc_4026BF↓o
.text:00401FE0                                         ; sub_4020F0:loc_4029EC↓o
.text:00402007                 align 20h
.text:00402020 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402020                                         ; DATA XREF: sub_4020F0:loc_402833↓o
.text:0040204E                 align 20h
.text:00402060 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00402060                                         ; DATA XREF: sub_4020F0:loc_40291F↓o
.text:00402081 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00402081                                         ; DATA XREF: sub_4020F0+93F↓o
.text:0040209B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040209B                                         ; DATA XREF: sub_4020F0:loc_402A67↓o
.text:004020B5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:004020B5                                         ; DATA XREF: sub_4020F0:loc_402A8E↓o
.text:004020D3 ; const char VarName[]
.text:004020D3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_4020F0:loc_402C40↓o
.text:004020E3                 align 10h
.text:004020F0
.text:004020F0 ; =============== S U B R O U T I N E =======================================
.text:004020F0
.text:004020F0
.text:004020F0 ; int __cdecl sub_4020F0(int, int, char *Str, int, int, int, int, int)
.text:004020F0 sub_4020F0      proc near               ; CODE XREF: sub_402C80+5A↓p
.text:004020F0                                         ; .text:00402D6A↓p ...
.text:004020F0
.text:004020F0 Str1            = dword ptr -5Ch
.text:004020F0 Str2            = dword ptr -58h
.text:004020F0 MaxCount        = dword ptr -54h
.text:004020F0 var_50          = dword ptr -50h
.text:004020F0 var_4C          = dword ptr -4Ch
.text:004020F0 var_3C          = dword ptr -3Ch
.text:004020F0 var_38          = dword ptr -38h
.text:004020F0 var_34          = dword ptr -34h
.text:004020F0 var_30          = dword ptr -30h
.text:004020F0 var_2C          = dword ptr -2Ch
.text:004020F0 var_28          = dword ptr -28h
.text:004020F0 var_24          = dword ptr -24h
.text:004020F0 var_20          = dword ptr -20h
.text:004020F0 var_1C          = dword ptr -1Ch
.text:004020F0 var_18          = dword ptr -18h
.text:004020F0 var_14          = dword ptr -14h
.text:004020F0 arg_0           = dword ptr  4
.text:004020F0 arg_4           = dword ptr  8
.text:004020F0 Str             = dword ptr  0Ch
.text:004020F0 arg_C           = dword ptr  10h
.text:004020F0 arg_10          = dword ptr  14h
.text:004020F0 arg_14          = dword ptr  18h
.text:004020F0 arg_18          = dword ptr  1Ch
.text:004020F0 arg_1C          = dword ptr  20h
.text:004020F0
.text:004020F0                 push    ebp
.text:004020F1                 mov     eax, 0FFFFFFFFh
.text:004020F6                 push    edi
.text:004020F7                 push    esi
.text:004020F8                 push    ebx
.text:004020F9                 sub     esp, 4Ch
.text:004020FC                 mov     esi, [esp+5Ch+Str]
.text:00402100                 mov     ebp, [esp+5Ch+arg_1C]
.text:00402104                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00402107                 mov     ebx, [ebp+4]
.text:0040210A                 setz    dl
.text:0040210D                 movzx   ecx, dl
.text:00402110                 dec     ecx
.text:00402111                 and     ecx, ebx
.text:00402113                 mov     [esp+5Ch+var_14], ecx
.text:00402117                 mov     ecx, [esp+5Ch+arg_0]
.text:0040211B                 test    ecx, ecx
.text:0040211D                 jle     loc_402247
.text:00402123                 mov     dword ptr [ebp+0Ch], 0
.text:0040212A                 mov     ebx, [ebp+0]
.text:0040212D                 test    ebx, ebx
.text:0040212F                 jz      loc_402C60
.text:00402135                 mov     edi, [ebp+10h]
.text:00402138                 test    edi, edi
.text:0040213A                 jnz     short loc_402193
.text:0040213C                 lea     esi, [esi+0]
.text:00402140
.text:00402140 loc_402140:                             ; CODE XREF: sub_4020F0+B7C↓j
.text:00402140                 mov     [ebp+24h], ebx
.text:00402143                 mov     esi, [esp+5Ch+Str]
.text:00402147                 mov     [ebp+20h], ebx
.text:0040214A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040214E                 xor     ebx, ebx
.text:00402150                 mov     dword ptr [ebp+14h], 0
.text:00402157                 test    ecx, ecx
.text:00402159                 jz      loc_402C40
.text:0040215F
.text:0040215F loc_40215F:                             ; CODE XREF: sub_4020F0+B64↓j
.text:0040215F                 mov     ebx, 1
.text:00402164
.text:00402164 loc_402164:                             ; CODE XREF: sub_4020F0+B5E↓j
.text:00402164                 mov     [ebp+1Ch], ebx
.text:00402167                 mov     ecx, [esp+5Ch+Str]
.text:0040216B                 movzx   eax, byte ptr [ecx]
.text:0040216E                 cmp     al, 2Dh ; '-'
.text:00402170                 jz      loc_402C30
.text:00402176                 cmp     al, 2Bh ; '+'
.text:00402178                 jz      loc_402C19
.text:0040217E                 xor     edx, edx
.text:00402180                 test    ebx, ebx
.text:00402182                 setz    dl
.text:00402185                 mov     [ebp+18h], edx
.text:00402188
.text:00402188 loc_402188:                             ; CODE XREF: sub_4020F0+B35↓j
.text:00402188                 mov     [esp+5Ch+Str], esi
.text:0040218C                 mov     dword ptr [ebp+10h], 1
.text:00402193
.text:00402193 loc_402193:                             ; CODE XREF: sub_4020F0+4A↑j
.text:00402193                 mov     eax, [ebp+14h]
.text:00402196                 test    eax, eax
.text:00402198                 jz      short loc_4021A3
.text:0040219A                 cmp     byte ptr [eax], 0
.text:0040219D                 jnz     loc_402280
.text:004021A3
.text:004021A3 loc_4021A3:                             ; CODE XREF: sub_4020F0+A8↑j
.text:004021A3                 mov     ebx, [ebp+0]
.text:004021A6                 cmp     [ebp+24h], ebx
.text:004021A9                 jle     short loc_4021AE
.text:004021AB                 mov     [ebp+24h], ebx
.text:004021AE
.text:004021AE loc_4021AE:                             ; CODE XREF: sub_4020F0+B9↑j
.text:004021AE                 cmp     [ebp+20h], ebx
.text:004021B1                 jle     short loc_4021B6
.text:004021B3                 mov     [ebp+20h], ebx
.text:004021B6
.text:004021B6 loc_4021B6:                             ; CODE XREF: sub_4020F0+C1↑j
.text:004021B6                 cmp     dword ptr [ebp+18h], 1
.text:004021BA                 jz      loc_402B90
.text:004021C0
.text:004021C0 loc_4021C0:                             ; CODE XREF: sub_4020F0+B13↓j
.text:004021C0                 cmp     ebx, [esp+5Ch+arg_0]
.text:004021C4                 jz      loc_402B74
.text:004021CA                 cld
.text:004021CB                 mov     ecx, [esp+5Ch+arg_4]
.text:004021CF                 mov     edx, 3
.text:004021D4                 mov     edi, offset dword_401EA0
.text:004021D9                 mov     esi, [ecx+ebx*4]
.text:004021DC                 mov     ecx, edx
.text:004021DE                 repe cmpsb
.text:004021E0                 jnz     short loc_40221C
.text:004021E2                 mov     edx, [ebp+24h]
.text:004021E5                 lea     eax, [ebx+1]
.text:004021E8                 cmp     [ebp+20h], edx
.text:004021EB                 mov     [ebp+0], eax
.text:004021EE                 jz      loc_402B88
.text:004021F4                 cmp     edx, eax
.text:004021F6                 jz      short loc_402210
.text:004021F8                 mov     [esp+5Ch+Str2], ebp
.text:004021FC                 mov     ebx, [esp+5Ch+arg_4]
.text:00402200                 mov     [esp+5Ch+Str1], ebx
.text:00402203                 call    sub_402DA0
.text:00402208                 nop
.text:00402209                 lea     esi, [esi+0]
.text:00402210
.text:00402210 loc_402210:                             ; CODE XREF: sub_4020F0+106↑j
.text:00402210                                         ; sub_4020F0+A9B↓j
.text:00402210                 mov     eax, [esp+5Ch+arg_0]
.text:00402214                 mov     ebx, eax
.text:00402216                 mov     [ebp+24h], eax
.text:00402219                 mov     [ebp+0], eax
.text:0040221C
.text:0040221C loc_40221C:                             ; CODE XREF: sub_4020F0+F0↑j
.text:0040221C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402220                 jz      loc_402B74
.text:00402226                 mov     esi, [esp+5Ch+arg_4]
.text:0040222A                 mov     eax, [esi+ebx*4]
.text:0040222D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402230                 jz      short loc_402257
.text:00402232
.text:00402232 loc_402232:                             ; CODE XREF: sub_4020F0+16D↓j
.text:00402232                 mov     edx, [ebp+18h]
.text:00402235                 test    edx, edx
.text:00402237                 jz      short loc_402250
.text:00402239                 mov     [ebp+0Ch], eax
.text:0040223C                 lea     edi, [ebx+1]
.text:0040223F                 mov     eax, 1
.text:00402244                 mov     [ebp+0], edi
.text:00402247
.text:00402247 loc_402247:                             ; CODE XREF: sub_4020F0+2D↑j
.text:00402247                                         ; sub_4020F0+165↓j ...
.text:00402247                 add     esp, 4Ch
.text:0040224A                 pop     ebx
.text:0040224B                 pop     esi
.text:0040224C                 pop     edi
.text:0040224D                 pop     ebp
.text:0040224E                 retn
.text:0040224E ; ---------------------------------------------------------------------------
.text:0040224F                 align 10h
.text:00402250
.text:00402250 loc_402250:                             ; CODE XREF: sub_4020F0+147↑j
.text:00402250                                         ; sub_4020F0+A8A↓j ...
.text:00402250                 mov     eax, 0FFFFFFFFh
.text:00402255                 jmp     short loc_402247
.text:00402257 ; ---------------------------------------------------------------------------
.text:00402257
.text:00402257 loc_402257:                             ; CODE XREF: sub_4020F0+140↑j
.text:00402257                 movzx   edx, byte ptr [eax+1]
.text:0040225B                 test    dl, dl
.text:0040225D                 jz      short loc_402232
.text:0040225F                 mov     ebx, [esp+5Ch+arg_C]
.text:00402263                 xor     ecx, ecx
.text:00402265                 test    ebx, ebx
.text:00402267                 jz      short loc_402272
.text:00402269                 cmp     dl, 2Dh ; '-'
.text:0040226C                 jz      loc_402B6A
.text:00402272
.text:00402272 loc_402272:                             ; CODE XREF: sub_4020F0+177↑j
.text:00402272                                         ; sub_4020F0+A7F↓j
.text:00402272                 lea     esi, [ecx+eax+1]
.text:00402276                 mov     [ebp+14h], esi
.text:00402279                 lea     esi, [esi+0]
.text:00402280
.text:00402280 loc_402280:                             ; CODE XREF: sub_4020F0+AD↑j
.text:00402280                 mov     ecx, [esp+5Ch+arg_C]
.text:00402284                 test    ecx, ecx
.text:00402286                 jz      loc_402610
.text:0040228C                 mov     edx, [ebp+0]
.text:0040228F                 mov     edi, [esp+5Ch+arg_4]
.text:00402293                 mov     eax, [edi+edx*4]
.text:00402296                 movzx   edx, byte ptr [eax+1]
.text:0040229A                 cmp     dl, 2Dh ; '-'
.text:0040229D                 jz      short loc_4022B5
.text:0040229F                 mov     ebx, [esp+5Ch+arg_14]
.text:004022A3                 test    ebx, ebx
.text:004022A5                 jz      loc_402610
.text:004022AB                 cmp     byte ptr [eax+2], 0
.text:004022AF                 jz      loc_402B4A
.text:004022B5
.text:004022B5 loc_4022B5:                             ; CODE XREF: sub_4020F0+1AD↑j
.text:004022B5                                         ; sub_4020F0+A75↓j
.text:004022B5                 mov     [esp+5Ch+var_18], 0
.text:004022BD                 mov     ecx, [ebp+14h]
.text:004022C0                 mov     [esp+5Ch+var_1C], 0
.text:004022C8                 mov     [esp+5Ch+var_20], 0
.text:004022D0                 mov     edi, ecx
.text:004022D2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:004022DA                 movzx   eax, byte ptr [ecx]
.text:004022DD                 test    al, al
.text:004022DF                 jz      short loc_4022FC
.text:004022E1                 cmp     al, 3Dh ; '='
.text:004022E3                 jz      short loc_4022FC
.text:004022E5                 lea     esi, [esi+0]
.text:004022E9                 lea     edi, [edi+0]
.text:004022F0
.text:004022F0 loc_4022F0:                             ; CODE XREF: sub_4020F0+20A↓j
.text:004022F0                 inc     edi
.text:004022F1                 movzx   eax, byte ptr [edi]
.text:004022F4                 test    al, al
.text:004022F6                 jz      short loc_4022FC
.text:004022F8                 cmp     al, 3Dh ; '='
.text:004022FA                 jnz     short loc_4022F0
.text:004022FC
.text:004022FC loc_4022FC:                             ; CODE XREF: sub_4020F0+1EF↑j
.text:004022FC                                         ; sub_4020F0+1F3↑j ...
.text:004022FC                 mov     [esp+5Ch+var_28], 0
.text:00402304                 mov     esi, [esp+5Ch+arg_C]
.text:00402308                 mov     ebx, [esi]
.text:0040230A                 test    ebx, ebx
.text:0040230C                 mov     edx, ebx
.text:0040230E                 jz      loc_402530
.text:00402314                 lea     esi, [esi+0]
.text:0040231A                 lea     edi, [edi+0]
.text:00402320
.text:00402320 loc_402320:                             ; CODE XREF: sub_4020F0+25E↓j
.text:00402320                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00402324                 mov     ebx, edi
.text:00402326                 sub     ebx, ecx
.text:00402328                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:0040232C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:0040232F                 call    strncmp
.text:00402334                 test    eax, eax
.text:00402336                 jz      loc_402AC6
.text:0040233C
.text:0040233C loc_40233C:                             ; CODE XREF: sub_4020F0+A0F↓j
.text:0040233C                                         ; sub_4020F0+A24↓j ...
.text:0040233C                 inc     [esp+5Ch+var_28]
.text:00402340                 add     esi, 10h
.text:00402343                 mov     ecx, [esi]
.text:00402345                 test    ecx, ecx
.text:00402347                 mov     edx, ecx
.text:00402349                 jz      short loc_402350
.text:0040234B                 mov     ecx, [ebp+14h]
.text:0040234E                 jmp     short loc_402320
.text:00402350 ; ---------------------------------------------------------------------------
.text:00402350
.text:00402350 loc_402350:                             ; CODE XREF: sub_4020F0+259↑j
.text:00402350                                         ; sub_4020F0+A55↓j
.text:00402350                 mov     esi, [esp+5Ch+var_20]
.text:00402354                 test    esi, esi
.text:00402356                 jz      short loc_402364
.text:00402358                 mov     edx, [esp+5Ch+var_1C]
.text:0040235C                 test    edx, edx
.text:0040235E                 jz      loc_402A70
.text:00402364
.text:00402364 loc_402364:                             ; CODE XREF: sub_4020F0+266↑j
.text:00402364                 mov     eax, [esp+5Ch+var_18]
.text:00402368                 test    eax, eax
.text:0040236A                 jz      loc_402530
.text:00402370                 mov     ecx, [ebp+0]
.text:00402373                 lea     eax, [ecx+1]
.text:00402376                 mov     [ebp+0], eax
.text:00402379                 cmp     byte ptr [edi], 0
.text:0040237C                 jz      loc_402490
.text:00402382                 mov     ecx, [esp+5Ch+var_18]
.text:00402386                 mov     esi, [ecx+4]
.text:00402389                 test    esi, esi
.text:0040238B                 jz      short loc_4023D6
.text:0040238D                 lea     ebx, [edi+1]
.text:00402390                 mov     [ebp+0Ch], ebx
.text:00402393
.text:00402393 loc_402393:                             ; CODE XREF: sub_4020F0+3A8↓j
.text:00402393                                         ; sub_4020F0+3C4↓j
.text:00402393                 mov     ebx, [ebp+14h]
.text:00402396                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00402399                 call    strlen
.text:0040239E                 add     [ebp+14h], eax
.text:004023A1                 mov     esi, [esp+5Ch+arg_10]
.text:004023A5                 test    esi, esi
.text:004023A7                 jz      short loc_4023B3
.text:004023A9                 mov     ebp, [esp+5Ch+var_24]
.text:004023AD                 mov     ecx, [esp+5Ch+arg_10]
.text:004023B1                 mov     [ecx], ebp
.text:004023B3
.text:004023B3 loc_4023B3:                             ; CODE XREF: sub_4020F0+2B7↑j
.text:004023B3                 mov     eax, [esp+5Ch+var_18]
.text:004023B7                 mov     ecx, [eax+8]
.text:004023BA                 test    ecx, ecx
.text:004023BC                 jnz     short loc_4023CA
.text:004023BE                 mov     ecx, [esp+5Ch+var_18]
.text:004023C2
.text:004023C2 loc_4023C2:                             ; CODE XREF: sub_4020F0+723↓j
.text:004023C2                 mov     eax, [ecx+0Ch]
.text:004023C5                 jmp     loc_402247
.text:004023CA ; ---------------------------------------------------------------------------
.text:004023CA
.text:004023CA loc_4023CA:                             ; CODE XREF: sub_4020F0+2CC↑j
.text:004023CA                                         ; sub_4020F0+719↓j
.text:004023CA                 mov     esi, [eax+0Ch]
.text:004023CD                 xor     eax, eax
.text:004023CF                 mov     [ecx], esi
.text:004023D1                 jmp     loc_402247
.text:004023D6 ; ---------------------------------------------------------------------------
.text:004023D6
.text:004023D6 loc_4023D6:                             ; CODE XREF: sub_4020F0+29B↑j
.text:004023D6                 mov     edi, [esp+5Ch+var_14]
.text:004023DA                 test    edi, edi
.text:004023DC                 jz      short loc_402430
.text:004023DE                 mov     esi, [esp+5Ch+arg_4]
.text:004023E2                 mov     edx, [esi+eax*4-4]
.text:004023E6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:004023EA                 jz      short loc_402452
.text:004023EC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:004023F3                 call    ds:libintl_gettext
.text:004023F9                 mov     edx, [esp+5Ch+var_18]
.text:004023FD                 mov     edi, [edx]
.text:004023FF                 mov     [esp+5Ch+var_4C], edi
.text:00402403                 mov     ebx, [ebp+0]
.text:00402406                 mov     edi, [esp+5Ch+arg_4]
.text:0040240A                 mov     ecx, [edi+ebx*4-4]
.text:0040240E                 movsx   esi, byte ptr [ecx]
.text:00402411                 mov     ecx, ds:_iob
.text:00402417                 add     ecx, 40h ; '@'
.text:0040241A                 mov     [esp+5Ch+var_50], esi
.text:0040241E                 mov     ebx, [edi]
.text:00402420                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402424                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402427                 mov     [esp+5Ch+MaxCount], ebx
.text:0040242B                 call    fprintf
.text:00402430
.text:00402430 loc_402430:                             ; CODE XREF: sub_4020F0+2EC↑j
.text:00402430                                         ; sub_4020F0+398↓j
.text:00402430                 mov     ecx, [ebp+14h]
.text:00402433                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402436                 call    strlen
.text:0040243B                 add     [ebp+14h], eax
.text:0040243E                 mov     eax, [esp+5Ch+var_18]
.text:00402442                 mov     esi, [eax+0Ch]
.text:00402445                 mov     [ebp+8], esi
.text:00402448
.text:00402448 loc_402448:                             ; CODE XREF: sub_4020F0+4E5↓j
.text:00402448                                         ; sub_4020F0+73E↓j ...
.text:00402448                 mov     eax, 3Fh ; '?'
.text:0040244D                 jmp     loc_402247
.text:00402452 ; ---------------------------------------------------------------------------
.text:00402452
.text:00402452 loc_402452:                             ; CODE XREF: sub_4020F0+2FA↑j
.text:00402452                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00402459                 call    ds:libintl_gettext
.text:0040245F                 mov     edx, [esp+5Ch+var_18]
.text:00402463                 mov     edi, [esp+5Ch+arg_4]
.text:00402467                 mov     ecx, ds:_iob
.text:0040246D                 mov     esi, [edx]
.text:0040246F                 add     ecx, 40h ; '@'
.text:00402472                 mov     [esp+5Ch+var_50], esi
.text:00402476                 mov     ebx, [edi]
.text:00402478                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040247C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040247F                 mov     [esp+5Ch+MaxCount], ebx
.text:00402483                 call    fprintf
.text:00402488                 jmp     short loc_402430
.text:00402488 ; ---------------------------------------------------------------------------
.text:0040248A                 align 10h
.text:00402490
.text:00402490 loc_402490:                             ; CODE XREF: sub_4020F0+28C↑j
.text:00402490                 mov     ebx, [esp+5Ch+var_18]
.text:00402494                 cmp     dword ptr [ebx+4], 1
.text:00402498                 jnz     loc_402393
.text:0040249E                 cmp     eax, [esp+5Ch+arg_0]
.text:004024A2                 jge     short loc_4024B9
.text:004024A4                 mov     ebx, [esp+5Ch+arg_4]
.text:004024A8                 lea     edi, [ecx+2]
.text:004024AB                 mov     [ebp+0], edi
.text:004024AE                 mov     esi, [ebx+eax*4]
.text:004024B1                 mov     [ebp+0Ch], esi
.text:004024B4                 jmp     loc_402393
.text:004024B9 ; ---------------------------------------------------------------------------
.text:004024B9
.text:004024B9 loc_4024B9:                             ; CODE XREF: sub_4020F0+3B2↑j
.text:004024B9                 mov     edx, [esp+5Ch+var_14]
.text:004024BD                 test    edx, edx
.text:004024BF                 jnz     short loc_4024F0
.text:004024C1
.text:004024C1 loc_4024C1:                             ; CODE XREF: sub_4020F0+437↓j
.text:004024C1                 mov     edx, [ebp+14h]
.text:004024C4                 mov     [esp+5Ch+Str1], edx ; Str
.text:004024C7                 call    strlen
.text:004024CC                 add     [ebp+14h], eax
.text:004024CF                 mov     eax, [esp+5Ch+var_18]
.text:004024D3                 mov     edi, [eax+0Ch]
.text:004024D6                 mov     [ebp+8], edi
.text:004024D9
.text:004024D9 loc_4024D9:                             ; CODE XREF: sub_4020F0+7C2↓j
.text:004024D9                 mov     ebp, [esp+5Ch+Str]
.text:004024DD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004024E1                 setnz   bl
.text:004024E4                 movzx   esi, bl
.text:004024E7                 lea     eax, [esi+esi*4+3Ah]
.text:004024EB                 jmp     loc_402247
.text:004024F0 ; ---------------------------------------------------------------------------
.text:004024F0
.text:004024F0 loc_4024F0:                             ; CODE XREF: sub_4020F0+3CF↑j
.text:004024F0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004024F7                 call    ds:libintl_gettext
.text:004024FD                 mov     ecx, [ebp+0]
.text:00402500                 mov     esi, [esp+5Ch+arg_4]
.text:00402504                 mov     ebx, [esi+ecx*4-4]
.text:00402508                 mov     ecx, ds:_iob
.text:0040250E                 mov     [esp+5Ch+var_50], ebx
.text:00402512                 mov     edi, [esi]
.text:00402514                 add     ecx, 40h ; '@'
.text:00402517                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040251B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040251E                 mov     [esp+5Ch+MaxCount], edi
.text:00402522                 call    fprintf
.text:00402527                 jmp     short loc_4024C1
.text:00402527 ; ---------------------------------------------------------------------------
.text:00402529                 align 10h
.text:00402530
.text:00402530 loc_402530:                             ; CODE XREF: sub_4020F0+21E↑j
.text:00402530                                         ; sub_4020F0+27A↑j
.text:00402530                 mov     eax, [esp+5Ch+arg_14]
.text:00402534                 test    eax, eax
.text:00402536                 jz      short loc_402566
.text:00402538                 mov     ebx, [ebp+0]
.text:0040253B                 mov     esi, [esp+5Ch+arg_4]
.text:0040253F                 mov     edi, [esi+ebx*4]
.text:00402542                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402546                 jz      short loc_402569
.text:00402548                 mov     ecx, [ebp+14h]
.text:0040254B                 mov     edx, [esp+5Ch+Str]
.text:0040254F                 movsx   ebx, byte ptr [ecx]
.text:00402552                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402555                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00402559                 call    strchr
.text:0040255E                 test    eax, eax
.text:00402560                 jnz     loc_402610
.text:00402566
.text:00402566 loc_402566:                             ; CODE XREF: sub_4020F0+446↑j
.text:00402566                 mov     ebx, [ebp+0]
.text:00402569
.text:00402569 loc_402569:                             ; CODE XREF: sub_4020F0+456↑j
.text:00402569                 mov     eax, [esp+5Ch+var_14]
.text:0040256D                 test    eax, eax
.text:0040256F                 jz      short loc_4025C1
.text:00402571                 mov     esi, [esp+5Ch+arg_4]
.text:00402575                 mov     edi, [esi+ebx*4]
.text:00402578                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040257C                 jz      short loc_4025DA
.text:0040257E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00402585                 call    ds:libintl_gettext
.text:0040258B                 mov     edi, [ebp+14h]
.text:0040258E                 mov     [esp+5Ch+var_4C], edi
.text:00402592                 mov     ebx, [ebp+0]
.text:00402595                 mov     edi, [esp+5Ch+arg_4]
.text:00402599                 mov     esi, [edi+ebx*4]
.text:0040259C                 movsx   ecx, byte ptr [esi]
.text:0040259F                 mov     esi, ds:_iob
.text:004025A5                 add     esi, 40h ; '@'
.text:004025A8                 mov     [esp+5Ch+var_50], ecx
.text:004025AC                 mov     ebx, [edi]
.text:004025AE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004025B2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:004025B5                 mov     [esp+5Ch+MaxCount], ebx
.text:004025B9                 call    fprintf
.text:004025BE
.text:004025BE loc_4025BE:                             ; CODE XREF: sub_4020F0+51D↓j
.text:004025BE                 mov     ebx, [ebp+0]
.text:004025C1
.text:004025C1 loc_4025C1:                             ; CODE XREF: sub_4020F0+47F↑j
.text:004025C1                 mov     dword ptr [ebp+14h], offset dword_401FA0
.text:004025C8                 lea     edx, [ebx+1]
.text:004025CB                 mov     [ebp+0], edx
.text:004025CE
.text:004025CE loc_4025CE:                             ; CODE XREF: sub_4020F0+999↓j
.text:004025CE                 mov     dword ptr [ebp+8], 0
.text:004025D5                 jmp     loc_402448
.text:004025DA ; ---------------------------------------------------------------------------
.text:004025DA
.text:004025DA loc_4025DA:                             ; CODE XREF: sub_4020F0+48C↑j
.text:004025DA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:004025E1                 call    ds:libintl_gettext
.text:004025E7                 mov     ecx, [ebp+14h]
.text:004025EA                 mov     edi, [esp+5Ch+arg_4]
.text:004025EE                 mov     edx, ds:_iob
.text:004025F4                 mov     [esp+5Ch+var_50], ecx
.text:004025F8                 mov     ebx, [edi]
.text:004025FA                 add     edx, 40h ; '@'
.text:004025FD                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402601                 mov     [esp+5Ch+MaxCount], ebx
.text:00402605                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402608                 call    fprintf
.text:0040260D                 jmp     short loc_4025BE
.text:0040260D ; ---------------------------------------------------------------------------
.text:0040260F                 align 10h
.text:00402610
.text:00402610 loc_402610:                             ; CODE XREF: sub_4020F0+196↑j
.text:00402610                                         ; sub_4020F0+1B5↑j ...
.text:00402610                 mov     esi, [ebp+14h]
.text:00402613                 movzx   ebx, byte ptr [esi]
.text:00402616                 inc     esi
.text:00402617                 mov     [ebp+14h], esi
.text:0040261A                 mov     ecx, [esp+5Ch+Str]
.text:0040261E                 movsx   esi, bl
.text:00402621                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402625                 mov     edi, esi
.text:00402627                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040262A                 call    strchr
.text:0040262F                 mov     ecx, [ebp+14h]
.text:00402632                 cmp     byte ptr [ecx], 0
.text:00402635                 jnz     short loc_40263A
.text:00402637                 inc     dword ptr [ebp+0]
.text:0040263A
.text:0040263A loc_40263A:                             ; CODE XREF: sub_4020F0+545↑j
.text:0040263A                 test    eax, eax
.text:0040263C                 jz      loc_402A20
.text:00402642                 cmp     bl, 3Ah ; ':'
.text:00402645                 jz      loc_402A20
.text:0040264B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040264E                 jz      loc_402706
.text:00402654                 movzx   edx, byte ptr [eax+1]
.text:00402658
.text:00402658 loc_402658:                             ; CODE XREF: sub_4020F0+61D↓j
.text:00402658                 cmp     dl, 3Ah ; ':'
.text:0040265B                 jz      short loc_402664
.text:0040265D
.text:0040265D loc_40265D:                             ; CODE XREF: sub_4020F0+590↓j
.text:0040265D                 mov     eax, esi
.text:0040265F                 jmp     loc_402247
.text:00402664 ; ---------------------------------------------------------------------------
.text:00402664
.text:00402664 loc_402664:                             ; CODE XREF: sub_4020F0+56B↑j
.text:00402664                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402668                 jz      loc_4026F1
.text:0040266E                 cmp     byte ptr [ecx], 0
.text:00402671                 jz      short loc_402682
.text:00402673
.text:00402673 loc_402673:                             ; CODE XREF: sub_4020F0+604↓j
.text:00402673                 inc     dword ptr [ebp+0]
.text:00402676                 mov     [ebp+0Ch], ecx
.text:00402679
.text:00402679 loc_402679:                             ; CODE XREF: sub_4020F0+5AB↓j
.text:00402679                                         ; sub_4020F0+5C6↓j ...
.text:00402679                 mov     dword ptr [ebp+14h], 0
.text:00402680                 jmp     short loc_40265D
.text:00402682 ; ---------------------------------------------------------------------------
.text:00402682
.text:00402682 loc_402682:                             ; CODE XREF: sub_4020F0+581↑j
.text:00402682                 mov     ecx, [ebp+0]
.text:00402685                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402689                 jz      short loc_40269D
.text:0040268B                 mov     eax, [esp+5Ch+arg_4]
.text:0040268F                 lea     edx, [ecx+1]
.text:00402692                 mov     [ebp+0], edx
.text:00402695                 mov     ebx, [eax+ecx*4]
.text:00402698                 mov     [ebp+0Ch], ebx
.text:0040269B                 jmp     short loc_402679
.text:0040269D ; ---------------------------------------------------------------------------
.text:0040269D
.text:0040269D loc_40269D:                             ; CODE XREF: sub_4020F0+599↑j
.text:0040269D                 mov     ecx, [esp+5Ch+var_14]
.text:004026A1                 test    ecx, ecx
.text:004026A3                 jnz     short loc_4026BF
.text:004026A5
.text:004026A5 loc_4026A5:                             ; CODE XREF: sub_4020F0+5FF↓j
.text:004026A5                 mov     [ebp+8], edi
.text:004026A8                 mov     edi, [esp+5Ch+Str]
.text:004026AC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:004026AF                 jz      short loc_4026B8
.text:004026B1                 mov     esi, 3Fh ; '?'
.text:004026B6                 jmp     short loc_402679
.text:004026B8 ; ---------------------------------------------------------------------------
.text:004026B8
.text:004026B8 loc_4026B8:                             ; CODE XREF: sub_4020F0+5BF↑j
.text:004026B8                 mov     esi, 3Ah ; ':'
.text:004026BD                 jmp     short loc_402679
.text:004026BF ; ---------------------------------------------------------------------------
.text:004026BF
.text:004026BF loc_4026BF:                             ; CODE XREF: sub_4020F0+5B3↑j
.text:004026BF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004026C6                 call    ds:libintl_gettext
.text:004026CC                 mov     [esp+5Ch+var_50], edi
.text:004026D0                 mov     ebx, [esp+5Ch+arg_4]
.text:004026D4                 mov     edx, ds:_iob
.text:004026DA                 mov     esi, [ebx]
.text:004026DC                 add     edx, 40h ; '@'
.text:004026DF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004026E3                 mov     [esp+5Ch+MaxCount], esi
.text:004026E7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004026EA                 call    fprintf
.text:004026EF                 jmp     short loc_4026A5
.text:004026F1 ; ---------------------------------------------------------------------------
.text:004026F1
.text:004026F1 loc_4026F1:                             ; CODE XREF: sub_4020F0+578↑j
.text:004026F1                 cmp     byte ptr [ecx], 0
.text:004026F4                 jnz     loc_402673
.text:004026FA                 mov     dword ptr [ebp+0Ch], 0
.text:00402701                 jmp     loc_402679
.text:00402706 ; ---------------------------------------------------------------------------
.text:00402706
.text:00402706 loc_402706:                             ; CODE XREF: sub_4020F0+55E↑j
.text:00402706                 movzx   edx, byte ptr [eax+1]
.text:0040270A                 cmp     dl, 3Bh ; ';'
.text:0040270D                 jnz     loc_402658
.text:00402713                 mov     [esp+5Ch+var_2C], 0
.text:0040271B                 mov     [esp+5Ch+var_30], 0
.text:00402723                 mov     [esp+5Ch+var_34], 0
.text:0040272B                 mov     [esp+5Ch+var_38], 0
.text:00402733                 cmp     byte ptr [ecx], 0
.text:00402736                 jz      loc_4029AB
.text:0040273C                 inc     dword ptr [ebp+0]
.text:0040273F                 mov     [ebp+0Ch], ecx
.text:00402742
.text:00402742 loc_402742:                             ; CODE XREF: sub_4020F0+8D4↓j
.text:00402742                 mov     edi, [ebp+0Ch]
.text:00402745                 mov     [ebp+14h], edi
.text:00402748                 movzx   eax, byte ptr [edi]
.text:0040274B                 test    al, al
.text:0040274D                 jz      short loc_40275F
.text:0040274F                 cmp     al, 3Dh ; '='
.text:00402751                 jz      short loc_40275F
.text:00402753
.text:00402753 loc_402753:                             ; CODE XREF: sub_4020F0+66D↓j
.text:00402753                 inc     edi
.text:00402754                 movzx   eax, byte ptr [edi]
.text:00402757                 test    al, al
.text:00402759                 jz      short loc_40275F
.text:0040275B                 cmp     al, 3Dh ; '='
.text:0040275D                 jnz     short loc_402753
.text:0040275F
.text:0040275F loc_40275F:                             ; CODE XREF: sub_4020F0+65D↑j
.text:0040275F                                         ; sub_4020F0+661↑j ...
.text:0040275F                 mov     [esp+5Ch+var_3C], 0
.text:00402767                 mov     esi, [esp+5Ch+arg_C]
.text:0040276B                 mov     eax, [esi]
.text:0040276D                 test    eax, eax
.text:0040276F                 jz      loc_4028F0
.text:00402775                 mov     ecx, eax
.text:00402777
.text:00402777 loc_402777:                             ; CODE XREF: sub_4020F0+6B3↓j
.text:00402777                 mov     ebx, [ebp+14h]
.text:0040277A                 mov     eax, edi
.text:0040277C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040277F                 sub     eax, ebx
.text:00402781                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402785                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402789                 call    strncmp
.text:0040278E                 test    eax, eax
.text:00402790                 jz      loc_402957
.text:00402796
.text:00402796 loc_402796:                             ; CODE XREF: sub_4020F0+88C↓j
.text:00402796                                         ; sub_4020F0+89D↓j
.text:00402796                 inc     [esp+5Ch+var_3C]
.text:0040279A                 add     esi, 10h
.text:0040279D                 mov     edx, [esi]
.text:0040279F                 test    edx, edx
.text:004027A1                 mov     ecx, edx
.text:004027A3                 jnz     short loc_402777
.text:004027A5
.text:004027A5 loc_4027A5:                             ; CODE XREF: sub_4020F0+8B6↓j
.text:004027A5                 mov     esi, [esp+5Ch+var_34]
.text:004027A9                 test    esi, esi
.text:004027AB                 jz      short loc_4027B9
.text:004027AD                 mov     ebx, [esp+5Ch+var_30]
.text:004027B1                 test    ebx, ebx
.text:004027B3                 jz      loc_402901
.text:004027B9
.text:004027B9 loc_4027B9:                             ; CODE XREF: sub_4020F0+6BB↑j
.text:004027B9                 mov     esi, [esp+5Ch+var_2C]
.text:004027BD                 test    esi, esi
.text:004027BF                 jz      loc_4028F0
.text:004027C5                 cmp     byte ptr [edi], 0
.text:004027C8                 jz      loc_402870
.text:004027CE                 mov     ecx, [esp+5Ch+var_2C]
.text:004027D2                 mov     ebx, [ecx+4]
.text:004027D5                 test    ebx, ebx
.text:004027D7                 jz      short loc_402818
.text:004027D9                 lea     edx, [edi+1]
.text:004027DC                 mov     [ebp+0Ch], edx
.text:004027DF
.text:004027DF loc_4027DF:                             ; CODE XREF: sub_4020F0+788↓j
.text:004027DF                                         ; sub_4020F0+7A7↓j
.text:004027DF                 mov     edi, [ebp+14h]
.text:004027E2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004027E5                 call    strlen
.text:004027EA                 add     [ebp+14h], eax
.text:004027ED                 mov     eax, [esp+5Ch+arg_10]
.text:004027F1                 test    eax, eax
.text:004027F3                 jz      short loc_402800
.text:004027F5                 mov     edx, [esp+5Ch+var_38]
.text:004027F9                 mov     ebp, [esp+5Ch+arg_10]
.text:004027FD                 mov     [ebp+0], edx
.text:00402800
.text:00402800 loc_402800:                             ; CODE XREF: sub_4020F0+703↑j
.text:00402800                 mov     eax, [esp+5Ch+var_2C]
.text:00402804                 mov     ecx, [eax+8]
.text:00402807                 test    ecx, ecx
.text:00402809                 jnz     loc_4023CA
.text:0040280F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402813                 jmp     loc_4023C2
.text:00402818 ; ---------------------------------------------------------------------------
.text:00402818
.text:00402818 loc_402818:                             ; CODE XREF: sub_4020F0+6E7↑j
.text:00402818                 mov     eax, [esp+5Ch+var_14]
.text:0040281C                 test    eax, eax
.text:0040281E                 jnz     short loc_402833
.text:00402820
.text:00402820 loc_402820:                             ; CODE XREF: sub_4020F0+779↓j
.text:00402820                 mov     ecx, [ebp+14h]
.text:00402823                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402826                 call    strlen
.text:0040282B                 add     [ebp+14h], eax
.text:0040282E                 jmp     loc_402448
.text:00402833 ; ---------------------------------------------------------------------------
.text:00402833
.text:00402833 loc_402833:                             ; CODE XREF: sub_4020F0+72E↑j
.text:00402833                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040283A                 call    ds:libintl_gettext
.text:00402840                 mov     edx, [esp+5Ch+var_2C]
.text:00402844                 mov     ebx, [esp+5Ch+arg_4]
.text:00402848                 mov     edi, [edx]
.text:0040284A                 mov     [esp+5Ch+var_50], edi
.text:0040284E                 mov     edi, ds:_iob
.text:00402854                 mov     esi, [ebx]
.text:00402856                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040285A                 add     edi, 40h ; '@'
.text:0040285D                 mov     [esp+5Ch+MaxCount], esi
.text:00402861                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402864                 call    fprintf
.text:00402869                 jmp     short loc_402820
.text:00402869 ; ---------------------------------------------------------------------------
.text:0040286B                 align 10h
.text:00402870
.text:00402870 loc_402870:                             ; CODE XREF: sub_4020F0+6D8↑j
.text:00402870                 mov     esi, [esp+5Ch+var_2C]
.text:00402874                 cmp     dword ptr [esi+4], 1
.text:00402878                 jnz     loc_4027DF
.text:0040287E                 mov     ecx, [ebp+0]
.text:00402881                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402885                 jge     short loc_40289C
.text:00402887                 mov     eax, [esp+5Ch+arg_4]
.text:0040288B                 lea     ebx, [ecx+1]
.text:0040288E                 mov     [ebp+0], ebx
.text:00402891                 mov     edi, [eax+ecx*4]
.text:00402894                 mov     [ebp+0Ch], edi
.text:00402897                 jmp     loc_4027DF
.text:0040289C ; ---------------------------------------------------------------------------
.text:0040289C
.text:0040289C loc_40289C:                             ; CODE XREF: sub_4020F0+795↑j
.text:0040289C                 mov     edx, [esp+5Ch+var_14]
.text:004028A0                 test    edx, edx
.text:004028A2                 jnz     short loc_4028B7
.text:004028A4
.text:004028A4 loc_4028A4:                             ; CODE XREF: sub_4020F0+7FE↓j
.text:004028A4                 mov     edx, [ebp+14h]
.text:004028A7                 mov     [esp+5Ch+Str1], edx ; Str
.text:004028AA                 call    strlen
.text:004028AF                 add     [ebp+14h], eax
.text:004028B2                 jmp     loc_4024D9
.text:004028B7 ; ---------------------------------------------------------------------------
.text:004028B7
.text:004028B7 loc_4028B7:                             ; CODE XREF: sub_4020F0+7B2↑j
.text:004028B7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004028BE                 call    ds:libintl_gettext
.text:004028C4                 mov     ecx, [ebp+0]
.text:004028C7                 mov     ebx, [esp+5Ch+arg_4]
.text:004028CB                 mov     edi, [ebx+ecx*4-4]
.text:004028CF                 mov     ecx, ds:_iob
.text:004028D5                 mov     [esp+5Ch+var_50], edi
.text:004028D9                 mov     esi, [ebx]
.text:004028DB                 add     ecx, 40h ; '@'
.text:004028DE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004028E2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004028E5                 mov     [esp+5Ch+MaxCount], esi
.text:004028E9                 call    fprintf
.text:004028EE                 jmp     short loc_4028A4
.text:004028F0 ; ---------------------------------------------------------------------------
.text:004028F0
.text:004028F0 loc_4028F0:                             ; CODE XREF: sub_4020F0+67F↑j
.text:004028F0                                         ; sub_4020F0+6CF↑j
.text:004028F0                 mov     dword ptr [ebp+14h], 0
.text:004028F7                 mov     eax, 57h ; 'W'
.text:004028FC                 jmp     loc_402247
.text:00402901 ; ---------------------------------------------------------------------------
.text:00402901
.text:00402901 loc_402901:                             ; CODE XREF: sub_4020F0+6C3↑j
.text:00402901                 mov     edi, [esp+5Ch+var_14]
.text:00402905                 test    edi, edi
.text:00402907                 jnz     short loc_40291F
.text:00402909
.text:00402909 loc_402909:                             ; CODE XREF: sub_4020F0+865↓j
.text:00402909                 mov     edx, [ebp+14h]
.text:0040290C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040290F                 call    strlen
.text:00402914                 add     [ebp+14h], eax
.text:00402917                 inc     dword ptr [ebp+0]
.text:0040291A                 jmp     loc_402448
.text:0040291F ; ---------------------------------------------------------------------------
.text:0040291F
.text:0040291F loc_40291F:                             ; CODE XREF: sub_4020F0+817↑j
.text:0040291F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402926                 call    ds:libintl_gettext
.text:0040292C                 mov     ecx, [ebp+0]
.text:0040292F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402933                 mov     edi, [ebx+ecx*4]
.text:00402936                 mov     ecx, ds:_iob
.text:0040293C                 mov     [esp+5Ch+var_50], edi
.text:00402940                 mov     esi, [ebx]
.text:00402942                 add     ecx, 40h ; '@'
.text:00402945                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402949                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040294C                 mov     [esp+5Ch+MaxCount], esi
.text:00402950                 call    fprintf
.text:00402955                 jmp     short loc_402909
.text:00402957 ; ---------------------------------------------------------------------------
.text:00402957
.text:00402957 loc_402957:                             ; CODE XREF: sub_4020F0+6A0↑j
.text:00402957                 mov     edx, [ebp+14h]
.text:0040295A                 mov     ebx, edi
.text:0040295C                 mov     ecx, [esi]
.text:0040295E                 sub     ebx, edx
.text:00402960                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402963                 call    strlen
.text:00402968                 cmp     ebx, eax
.text:0040296A                 jz      short loc_402992
.text:0040296C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402970                 test    ebx, ebx
.text:00402972                 jz      short loc_402981
.text:00402974                 mov     [esp+5Ch+var_34], 1
.text:0040297C                 jmp     loc_402796
.text:00402981 ; ---------------------------------------------------------------------------
.text:00402981
.text:00402981 loc_402981:                             ; CODE XREF: sub_4020F0+882↑j
.text:00402981                 mov     [esp+5Ch+var_2C], esi
.text:00402985                 mov     ecx, [esp+5Ch+var_3C]
.text:00402989                 mov     [esp+5Ch+var_38], ecx
.text:0040298D                 jmp     loc_402796
.text:00402992 ; ---------------------------------------------------------------------------
.text:00402992
.text:00402992 loc_402992:                             ; CODE XREF: sub_4020F0+87A↑j
.text:00402992                 mov     [esp+5Ch+var_2C], esi
.text:00402996                 mov     eax, [esp+5Ch+var_3C]
.text:0040299A                 mov     [esp+5Ch+var_30], 1
.text:004029A2                 mov     [esp+5Ch+var_38], eax
.text:004029A6                 jmp     loc_4027A5
.text:004029AB ; ---------------------------------------------------------------------------
.text:004029AB
.text:004029AB loc_4029AB:                             ; CODE XREF: sub_4020F0+646↑j
.text:004029AB                 mov     edx, [ebp+0]
.text:004029AE                 cmp     edx, [esp+5Ch+arg_0]
.text:004029B2                 jz      short loc_4029C9
.text:004029B4                 mov     ebx, [esp+5Ch+arg_4]
.text:004029B8                 lea     esi, [edx+1]
.text:004029BB                 mov     [ebp+0], esi
.text:004029BE                 mov     edi, [ebx+edx*4]
.text:004029C1                 mov     [ebp+0Ch], edi
.text:004029C4                 jmp     loc_402742
.text:004029C9 ; ---------------------------------------------------------------------------
.text:004029C9
.text:004029C9 loc_4029C9:                             ; CODE XREF: sub_4020F0+8C2↑j
.text:004029C9                 mov     edi, [esp+5Ch+var_14]
.text:004029CD                 test    edi, edi
.text:004029CF                 jnz     short loc_4029EC
.text:004029D1
.text:004029D1 loc_4029D1:                             ; CODE XREF: sub_4020F0+92C↓j
.text:004029D1                 mov     [ebp+8], esi
.text:004029D4                 mov     ebp, [esp+5Ch+Str]
.text:004029D8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004029DC                 jz      short loc_4029E8
.text:004029DE                 mov     bl, 3Fh ; '?'
.text:004029E0
.text:004029E0 loc_4029E0:                             ; CODE XREF: sub_4020F0+8FA↓j
.text:004029E0                 movsx   eax, bl
.text:004029E3                 jmp     loc_402247
.text:004029E8 ; ---------------------------------------------------------------------------
.text:004029E8
.text:004029E8 loc_4029E8:                             ; CODE XREF: sub_4020F0+8EC↑j
.text:004029E8                 mov     bl, 3Ah ; ':'
.text:004029EA                 jmp     short loc_4029E0
.text:004029EC ; ---------------------------------------------------------------------------
.text:004029EC
.text:004029EC loc_4029EC:                             ; CODE XREF: sub_4020F0+8DF↑j
.text:004029EC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004029F3                 call    ds:libintl_gettext
.text:004029F9                 mov     [esp+5Ch+var_50], esi
.text:004029FD                 mov     edx, [esp+5Ch+arg_4]
.text:00402A01                 mov     ecx, ds:_iob
.text:00402A07                 mov     ebx, [edx]
.text:00402A09                 add     ecx, 40h ; '@'
.text:00402A0C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402A10                 mov     [esp+5Ch+MaxCount], ebx
.text:00402A14                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402A17                 call    fprintf
.text:00402A1C                 jmp     short loc_4029D1
.text:00402A1C ; ---------------------------------------------------------------------------
.text:00402A1E                 align 10h
.text:00402A20
.text:00402A20 loc_402A20:                             ; CODE XREF: sub_4020F0+54C↑j
.text:00402A20                                         ; sub_4020F0+555↑j
.text:00402A20                 mov     eax, [esp+5Ch+var_14]
.text:00402A24                 test    eax, eax
.text:00402A26                 jz      short loc_402A5F
.text:00402A28                 mov     ebx, [ebp+1Ch]
.text:00402A2B                 test    ebx, ebx
.text:00402A2D                 jz      short loc_402A67
.text:00402A2F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402A36
.text:00402A36 loc_402A36:                             ; CODE XREF: sub_4020F0+97E↓j
.text:00402A36                 call    ds:libintl_gettext
.text:00402A3C                 mov     [esp+5Ch+var_50], esi
.text:00402A40                 mov     ebx, [esp+5Ch+arg_4]
.text:00402A44                 mov     edx, ds:_iob
.text:00402A4A                 mov     esi, [ebx]
.text:00402A4C                 add     edx, 40h ; '@'
.text:00402A4F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402A53                 mov     [esp+5Ch+MaxCount], esi
.text:00402A57                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402A5A                 call    fprintf
.text:00402A5F
.text:00402A5F loc_402A5F:                             ; CODE XREF: sub_4020F0+936↑j
.text:00402A5F                 mov     [ebp+8], edi
.text:00402A62                 jmp     loc_402448
.text:00402A67 ; ---------------------------------------------------------------------------
.text:00402A67
.text:00402A67 loc_402A67:                             ; CODE XREF: sub_4020F0+93D↑j
.text:00402A67                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00402A6E                 jmp     short loc_402A36
.text:00402A70 ; ---------------------------------------------------------------------------
.text:00402A70
.text:00402A70 loc_402A70:                             ; CODE XREF: sub_4020F0+26E↑j
.text:00402A70                 mov     edi, [esp+5Ch+var_14]
.text:00402A74                 test    edi, edi
.text:00402A76                 jnz     short loc_402A8E
.text:00402A78
.text:00402A78 loc_402A78:                             ; CODE XREF: sub_4020F0+9D4↓j
.text:00402A78                 mov     edx, [ebp+14h]
.text:00402A7B                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402A7E                 call    strlen
.text:00402A83                 add     [ebp+14h], eax
.text:00402A86                 inc     dword ptr [ebp+0]
.text:00402A89                 jmp     loc_4025CE
.text:00402A8E ; ---------------------------------------------------------------------------
.text:00402A8E
.text:00402A8E loc_402A8E:                             ; CODE XREF: sub_4020F0+986↑j
.text:00402A8E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402A95                 call    ds:libintl_gettext
.text:00402A9B                 mov     ebx, [ebp+0]
.text:00402A9E                 mov     edi, [esp+5Ch+arg_4]
.text:00402AA2                 mov     ecx, [edi+ebx*4]
.text:00402AA5                 mov     ebx, ds:_iob
.text:00402AAB                 mov     [esp+5Ch+var_50], ecx
.text:00402AAF                 mov     esi, [edi]
.text:00402AB1                 add     ebx, 40h ; '@'
.text:00402AB4                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402AB8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00402ABB                 mov     [esp+5Ch+MaxCount], esi
.text:00402ABF                 call    fprintf
.text:00402AC4                 jmp     short loc_402A78
.text:00402AC6 ; ---------------------------------------------------------------------------
.text:00402AC6
.text:00402AC6 loc_402AC6:                             ; CODE XREF: sub_4020F0+246↑j
.text:00402AC6                 mov     ecx, [ebp+14h]
.text:00402AC9                 mov     ebx, edi
.text:00402ACB                 mov     edx, [esi]
.text:00402ACD                 sub     ebx, ecx
.text:00402ACF                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402AD2                 call    strlen
.text:00402AD7                 cmp     ebx, eax
.text:00402AD9                 jz      short loc_402B31
.text:00402ADB                 mov     ebx, [esp+5Ch+var_18]
.text:00402ADF                 test    ebx, ebx
.text:00402AE1                 jz      short loc_402B20
.text:00402AE3                 mov     edx, [esp+5Ch+arg_14]
.text:00402AE7                 test    edx, edx
.text:00402AE9                 jnz     short loc_402AF7
.text:00402AEB                 mov     ecx, [esp+5Ch+var_18]
.text:00402AEF                 mov     ebx, [esi+4]
.text:00402AF2                 cmp     [ecx+4], ebx
.text:00402AF5                 jz      short loc_402B04
.text:00402AF7
.text:00402AF7 loc_402AF7:                             ; CODE XREF: sub_4020F0+9F9↑j
.text:00402AF7                                         ; sub_4020F0+A1A↓j ...
.text:00402AF7                 mov     [esp+5Ch+var_20], 1
.text:00402AFF                 jmp     loc_40233C
.text:00402B04 ; ---------------------------------------------------------------------------
.text:00402B04
.text:00402B04 loc_402B04:                             ; CODE XREF: sub_4020F0+A05↑j
.text:00402B04                 mov     edx, [esi+8]
.text:00402B07                 cmp     [ecx+8], edx
.text:00402B0A                 jnz     short loc_402AF7
.text:00402B0C                 mov     ebx, [esi+0Ch]
.text:00402B0F                 cmp     [ecx+0Ch], ebx
.text:00402B12                 jnz     short loc_402AF7
.text:00402B14                 jmp     loc_40233C
.text:00402B14 ; ---------------------------------------------------------------------------
.text:00402B19                 align 10h
.text:00402B20
.text:00402B20 loc_402B20:                             ; CODE XREF: sub_4020F0+9F1↑j
.text:00402B20                 mov     [esp+5Ch+var_18], esi
.text:00402B24                 mov     eax, [esp+5Ch+var_28]
.text:00402B28                 mov     [esp+5Ch+var_24], eax
.text:00402B2C                 jmp     loc_40233C
.text:00402B31 ; ---------------------------------------------------------------------------
.text:00402B31
.text:00402B31 loc_402B31:                             ; CODE XREF: sub_4020F0+9E9↑j
.text:00402B31                 mov     [esp+5Ch+var_18], esi
.text:00402B35                 mov     ecx, [esp+5Ch+var_28]
.text:00402B39                 mov     [esp+5Ch+var_1C], 1
.text:00402B41                 mov     [esp+5Ch+var_24], ecx
.text:00402B45                 jmp     loc_402350
.text:00402B4A ; ---------------------------------------------------------------------------
.text:00402B4A
.text:00402B4A loc_402B4A:                             ; CODE XREF: sub_4020F0+1BF↑j
.text:00402B4A                 mov     eax, [esp+5Ch+Str]
.text:00402B4E                 movsx   esi, dl
.text:00402B51                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402B55                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402B58                 call    strchr
.text:00402B5D                 test    eax, eax
.text:00402B5F                 jnz     loc_402610
.text:00402B65                 jmp     loc_4022B5
.text:00402B6A ; ---------------------------------------------------------------------------
.text:00402B6A
.text:00402B6A loc_402B6A:                             ; CODE XREF: sub_4020F0+17C↑j
.text:00402B6A                 mov     ecx, 1
.text:00402B6F                 jmp     loc_402272
.text:00402B74 ; ---------------------------------------------------------------------------
.text:00402B74
.text:00402B74 loc_402B74:                             ; CODE XREF: sub_4020F0+D4↑j
.text:00402B74                                         ; sub_4020F0+130↑j
.text:00402B74                 mov     eax, [ebp+20h]
.text:00402B77                 cmp     eax, [ebp+24h]
.text:00402B7A                 jz      loc_402250
.text:00402B80                 mov     [ebp+0], eax
.text:00402B83                 jmp     loc_402250
.text:00402B88 ; ---------------------------------------------------------------------------
.text:00402B88
.text:00402B88 loc_402B88:                             ; CODE XREF: sub_4020F0+FE↑j
.text:00402B88                 mov     [ebp+20h], eax
.text:00402B8B                 jmp     loc_402210
.text:00402B90 ; ---------------------------------------------------------------------------
.text:00402B90
.text:00402B90 loc_402B90:                             ; CODE XREF: sub_4020F0+CA↑j
.text:00402B90                 mov     edx, [ebp+20h]
.text:00402B93                 mov     eax, [ebp+24h]
.text:00402B96                 cmp     edx, eax
.text:00402B98                 jz      short loc_402C10
.text:00402B9A                 cmp     eax, ebx
.text:00402B9C                 jz      short loc_402BB1
.text:00402B9E                 mov     [esp+5Ch+Str2], ebp
.text:00402BA2                 mov     ebx, [esp+5Ch+arg_4]
.text:00402BA6                 mov     [esp+5Ch+Str1], ebx
.text:00402BA9                 call    sub_402DA0
.text:00402BAE                 mov     ebx, [ebp+0]
.text:00402BB1
.text:00402BB1 loc_402BB1:                             ; CODE XREF: sub_4020F0+AAC↑j
.text:00402BB1                                         ; sub_4020F0+B22↓j ...
.text:00402BB1                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402BB5                 jge     short loc_402C00
.text:00402BB7                 mov     esi, [esp+5Ch+arg_4]
.text:00402BBB                 mov     eax, [esi+ebx*4]
.text:00402BBE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402BC1                 jz      short loc_402C08
.text:00402BC3                 lea     esi, [esi+0]
.text:00402BC9                 lea     edi, [edi+0]
.text:00402BD0
.text:00402BD0 loc_402BD0:                             ; CODE XREF: sub_4020F0+AFC↓j
.text:00402BD0                                         ; sub_4020F0+B1C↓j
.text:00402BD0                 lea     eax, [ebx+1]
.text:00402BD3                 mov     ebx, eax
.text:00402BD5                 mov     [ebp+0], eax
.text:00402BD8                 cmp     eax, [esp+5Ch+arg_0]
.text:00402BDC                 jge     short loc_402C00
.text:00402BDE                 mov     edi, [esp+5Ch+arg_4]
.text:00402BE2                 mov     edx, [edi+eax*4]
.text:00402BE5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402BE8                 jz      short loc_402BF0
.text:00402BEA
.text:00402BEA loc_402BEA:                             ; CODE XREF: sub_4020F0+B04↓j
.text:00402BEA                 mov     ebx, eax
.text:00402BEC                 jmp     short loc_402BD0
.text:00402BEC ; ---------------------------------------------------------------------------
.text:00402BEE                 align 10h
.text:00402BF0
.text:00402BF0 loc_402BF0:                             ; CODE XREF: sub_4020F0+AF8↑j
.text:00402BF0                 cmp     byte ptr [edx+1], 0
.text:00402BF4                 jz      short loc_402BEA
.text:00402BF6                 lea     esi, [esi+0]
.text:00402BF9                 lea     edi, [edi+0]
.text:00402C00
.text:00402C00 loc_402C00:                             ; CODE XREF: sub_4020F0+AC5↑j
.text:00402C00                                         ; sub_4020F0+AEC↑j ...
.text:00402C00                 mov     [ebp+24h], ebx
.text:00402C03                 jmp     loc_4021C0
.text:00402C08 ; ---------------------------------------------------------------------------
.text:00402C08
.text:00402C08 loc_402C08:                             ; CODE XREF: sub_4020F0+AD1↑j
.text:00402C08                 cmp     byte ptr [eax+1], 0
.text:00402C0C                 jz      short loc_402BD0
.text:00402C0E                 jmp     short loc_402C00
.text:00402C10 ; ---------------------------------------------------------------------------
.text:00402C10
.text:00402C10 loc_402C10:                             ; CODE XREF: sub_4020F0+AA8↑j
.text:00402C10                 cmp     edx, ebx
.text:00402C12                 jz      short loc_402BB1
.text:00402C14                 mov     [ebp+20h], ebx
.text:00402C17                 jmp     short loc_402BB1
.text:00402C19 ; ---------------------------------------------------------------------------
.text:00402C19
.text:00402C19 loc_402C19:                             ; CODE XREF: sub_4020F0+88↑j
.text:00402C19                 mov     dword ptr [ebp+18h], 0
.text:00402C20                 mov     esi, [esp+5Ch+Str]
.text:00402C24
.text:00402C24 loc_402C24:                             ; CODE XREF: sub_4020F0+B49↓j
.text:00402C24                 inc     esi
.text:00402C25                 jmp     loc_402188
.text:00402C25 ; ---------------------------------------------------------------------------
.text:00402C2A                 align 10h
.text:00402C30
.text:00402C30 loc_402C30:                             ; CODE XREF: sub_4020F0+80↑j
.text:00402C30                 mov     dword ptr [ebp+18h], 2
.text:00402C37                 mov     esi, ecx
.text:00402C39                 jmp     short loc_402C24
.text:00402C39 ; ---------------------------------------------------------------------------
.text:00402C3B                 align 10h
.text:00402C40
.text:00402C40 loc_402C40:                             ; CODE XREF: sub_4020F0+69↑j
.text:00402C40                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402C47                 call    getenv
.text:00402C4C                 test    eax, eax
.text:00402C4E                 jz      loc_402164
.text:00402C54                 jmp     loc_40215F
.text:00402C54 ; ---------------------------------------------------------------------------
.text:00402C59                 align 10h
.text:00402C60
.text:00402C60 loc_402C60:                             ; CODE XREF: sub_4020F0+3F↑j
.text:00402C60                 mov     dword ptr [ebp+0], 1
.text:00402C67                 mov     ebx, 1
.text:00402C6C                 jmp     loc_402140
.text:00402C6C sub_4020F0      endp
.text:00402C6C
.text:00402C71 ; ---------------------------------------------------------------------------
.text:00402C71                 jmp     short sub_402C80
.text:00402C71 ; ---------------------------------------------------------------------------
.text:00402C73                 align 10h
.text:00402C80
.text:00402C80 ; =============== S U B R O U T I N E =======================================
.text:00402C80
.text:00402C80
.text:00402C80 ; int __cdecl sub_402C80(int, int, char *, int, int, int, int)
.text:00402C80 sub_402C80      proc near               ; CODE XREF: .text:00402C71↑j
.text:00402C80                                         ; sub_4033C0+3A↓p ...
.text:00402C80
.text:00402C80 var_2C          = dword ptr -2Ch
.text:00402C80 var_28          = dword ptr -28h
.text:00402C80 Str             = dword ptr -24h
.text:00402C80 var_20          = dword ptr -20h
.text:00402C80 var_1C          = dword ptr -1Ch
.text:00402C80 var_18          = dword ptr -18h
.text:00402C80 var_14          = dword ptr -14h
.text:00402C80 var_10          = dword ptr -10h
.text:00402C80 arg_0           = dword ptr  4
.text:00402C80 arg_4           = dword ptr  8
.text:00402C80 arg_8           = dword ptr  0Ch
.text:00402C80 arg_C           = dword ptr  10h
.text:00402C80 arg_10          = dword ptr  14h
.text:00402C80 arg_14          = dword ptr  18h
.text:00402C80 arg_18          = dword ptr  1Ch
.text:00402C80
.text:00402C80                 sub     esp, 2Ch
.text:00402C83                 mov     edx, dword_408010
.text:00402C89                 mov     [esp+2Ch+var_10], offset dword_409010 ; int
.text:00402C91                 mov     ecx, dword_408014
.text:00402C97                 mov     ds:dword_409010, edx
.text:00402C9D                 mov     edx, [esp+2Ch+arg_18]
.text:00402CA1                 mov     ds:dword_409014, ecx
.text:00402CA7                 mov     ecx, [esp+2Ch+arg_14]
.text:00402CAB                 mov     [esp+2Ch+var_14], edx ; int
.text:00402CAF                 mov     edx, [esp+2Ch+arg_10]
.text:00402CB3                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402CB7                 mov     ecx, [esp+2Ch+arg_C]
.text:00402CBB                 mov     [esp+2Ch+var_1C], edx ; int
.text:00402CBF                 mov     edx, [esp+2Ch+arg_8]
.text:00402CC3                 mov     [esp+2Ch+var_20], ecx ; int
.text:00402CC7                 mov     ecx, [esp+2Ch+arg_4]
.text:00402CCB                 mov     [esp+2Ch+Str], edx ; Str
.text:00402CCF                 mov     edx, [esp+2Ch+arg_0]
.text:00402CD3                 mov     [esp+2Ch+var_28], ecx ; int
.text:00402CD7                 mov     [esp+2Ch+var_2C], edx ; int
.text:00402CDA                 call    sub_4020F0
.text:00402CDF                 mov     ecx, ds:dword_409010
.text:00402CE5                 mov     dword_408010, ecx
.text:00402CEB                 mov     ecx, ds:dword_40901C
.text:00402CF1                 mov     ds:dword_4091C0, ecx
.text:00402CF7                 mov     ecx, ds:dword_409018
.text:00402CFD                 mov     dword_408018, ecx
.text:00402D03                 add     esp, 2Ch
.text:00402D06                 retn
.text:00402D06 sub_402C80      endp
.text:00402D06
.text:00402D06 ; ---------------------------------------------------------------------------
.text:00402D07                 align 10h
.text:00402D10                 sub     esp, 2Ch
.text:00402D13                 mov     edx, dword_408010
.text:00402D19                 mov     dword ptr [esp+1Ch], offset dword_409010
.text:00402D21                 mov     ecx, dword_408014
.text:00402D27                 mov     dword ptr [esp+18h], 1
.text:00402D2F                 mov     ds:dword_409010, edx
.text:00402D35                 mov     edx, [esp+38h]
.text:00402D39                 mov     ds:dword_409014, ecx
.text:00402D3F                 mov     ecx, [esp+34h]
.text:00402D43                 mov     [esp+8], edx
.text:00402D47                 mov     edx, [esp+30h]
.text:00402D4B                 mov     [esp+4], ecx
.text:00402D4F                 mov     dword ptr [esp+14h], 0
.text:00402D57                 mov     dword ptr [esp+10h], 0
.text:00402D5F                 mov     dword ptr [esp+0Ch], 0
.text:00402D67                 mov     [esp], edx
.text:00402D6A                 call    sub_4020F0
.text:00402D6F                 mov     ecx, ds:dword_409010
.text:00402D75                 mov     dword_408010, ecx
.text:00402D7B                 mov     ecx, ds:dword_40901C
.text:00402D81                 mov     ds:dword_4091C0, ecx
.text:00402D87                 mov     ecx, ds:dword_409018
.text:00402D8D                 mov     dword_408018, ecx
.text:00402D93                 add     esp, 2Ch
.text:00402D96                 retn
.text:00402D96 ; ---------------------------------------------------------------------------
.text:00402D97                 align 10h
.text:00402DA0
.text:00402DA0 ; =============== S U B R O U T I N E =======================================
.text:00402DA0
.text:00402DA0
.text:00402DA0 sub_402DA0      proc near               ; CODE XREF: sub_4020F0+113↑p
.text:00402DA0                                         ; sub_4020F0+AB9↑p
.text:00402DA0
.text:00402DA0 var_2C          = dword ptr -2Ch
.text:00402DA0 var_28          = dword ptr -28h
.text:00402DA0 var_24          = dword ptr -24h
.text:00402DA0 var_20          = dword ptr -20h
.text:00402DA0 var_1C          = dword ptr -1Ch
.text:00402DA0 var_18          = dword ptr -18h
.text:00402DA0 var_14          = dword ptr -14h
.text:00402DA0 arg_0           = dword ptr  4
.text:00402DA0 arg_4           = dword ptr  8
.text:00402DA0
.text:00402DA0                 push    ebp
.text:00402DA1                 push    edi
.text:00402DA2                 push    esi
.text:00402DA3                 push    ebx
.text:00402DA4                 sub     esp, 1Ch
.text:00402DA7                 mov     ecx, [esp+2Ch+arg_4]
.text:00402DAB                 mov     eax, [esp+2Ch+arg_4]
.text:00402DAF                 mov     ebx, [esp+2Ch+arg_4]
.text:00402DB3                 mov     edx, [ecx+20h]
.text:00402DB6                 mov     edi, [esp+2Ch+arg_0]
.text:00402DBA                 mov     ecx, [ebx]
.text:00402DBC                 mov     [esp+2Ch+var_2C], edx
.text:00402DBF                 mov     [esp+2Ch+var_14], edx
.text:00402DC3                 mov     edx, [eax+24h]
.text:00402DC6                 mov     [esp+2Ch+var_28], ecx
.text:00402DCA                 mov     [esp+2Ch+var_1C], ecx
.text:00402DCE                 cmp     ecx, edx
.text:00402DD0                 mov     [esp+2Ch+var_18], edx
.text:00402DD4                 jle     short loc_402E50
.text:00402DD6                 mov     esi, [esp+2Ch+var_2C]
.text:00402DD9                 cmp     edx, esi
.text:00402DDB                 jle     short loc_402E50
.text:00402DDD                 lea     esi, [esi+0]
.text:00402DE0
.text:00402DE0 loc_402DE0:                             ; CODE XREF: sub_402DA0+A1↓j
.text:00402DE0                 mov     ebx, [esp+2Ch+var_1C]
.text:00402DE4                 mov     edx, [esp+2Ch+var_18]
.text:00402DE8                 mov     ebp, [esp+2Ch+var_18]
.text:00402DEC                 mov     eax, [esp+2Ch+var_14]
.text:00402DF0                 sub     ebx, edx
.text:00402DF2                 mov     [esp+2Ch+var_20], ebx
.text:00402DF6                 sub     ebp, eax
.text:00402DF8                 cmp     ebx, ebp
.text:00402DFA                 jle     short loc_402E75
.text:00402DFC                 xor     esi, esi
.text:00402DFE                 cmp     esi, ebp
.text:00402E00                 jge     short loc_402E2D
.text:00402E02                 mov     ecx, [esp+2Ch+var_1C]
.text:00402E06                 sub     ecx, ebp
.text:00402E08                 mov     [esp+2Ch+var_24], ecx
.text:00402E0C                 lea     esi, [esi+0]
.text:00402E10
.text:00402E10 loc_402E10:                             ; CODE XREF: sub_402DA0+8B↓j
.text:00402E10                 mov     ecx, [esp+2Ch+var_14]
.text:00402E14                 mov     edx, [esp+2Ch+var_24]
.text:00402E18                 add     ecx, esi
.text:00402E1A                 add     edx, esi
.text:00402E1C                 mov     ebx, [edi+ecx*4]
.text:00402E1F                 mov     eax, [edi+edx*4]
.text:00402E22                 inc     esi
.text:00402E23                 cmp     esi, ebp
.text:00402E25                 mov     [edi+ecx*4], eax
.text:00402E28                 mov     [edi+edx*4], ebx
.text:00402E2B                 jl      short loc_402E10
.text:00402E2D
.text:00402E2D loc_402E2D:                             ; CODE XREF: sub_402DA0+60↑j
.text:00402E2D                 sub     [esp+2Ch+var_1C], ebp
.text:00402E31
.text:00402E31 loc_402E31:                             ; CODE XREF: sub_402DA0+107↓j
.text:00402E31                 mov     eax, [esp+2Ch+var_18]
.text:00402E35                 cmp     [esp+2Ch+var_1C], eax
.text:00402E39                 jle     short loc_402E50
.text:00402E3B                 mov     ebp, [esp+2Ch+var_14]
.text:00402E3F                 cmp     eax, ebp
.text:00402E41                 jg      short loc_402DE0
.text:00402E43                 lea     esi, [esi+0]
.text:00402E49                 lea     edi, [edi+0]
.text:00402E50
.text:00402E50 loc_402E50:                             ; CODE XREF: sub_402DA0+34↑j
.text:00402E50                                         ; sub_402DA0+3B↑j ...
.text:00402E50                 mov     esi, [esp+2Ch+var_28]
.text:00402E54                 mov     ecx, [esp+2Ch+var_18]
.text:00402E58                 mov     eax, [esp+2Ch+var_2C]
.text:00402E5B                 mov     edi, [esp+2Ch+arg_4]
.text:00402E5F                 mov     edx, [esp+2Ch+var_28]
.text:00402E63                 sub     esi, ecx
.text:00402E65                 add     esi, eax
.text:00402E67                 mov     [edi+20h], esi
.text:00402E6A                 mov     [edi+24h], edx
.text:00402E6D                 add     esp, 1Ch
.text:00402E70                 pop     ebx
.text:00402E71                 pop     esi
.text:00402E72                 pop     edi
.text:00402E73                 pop     ebp
.text:00402E74                 retn
.text:00402E75 ; ---------------------------------------------------------------------------
.text:00402E75
.text:00402E75 loc_402E75:                             ; CODE XREF: sub_402DA0+5A↑j
.text:00402E75                 xor     esi, esi
.text:00402E77                 cmp     esi, [esp+2Ch+var_20]
.text:00402E7B                 jge     short loc_402E9F
.text:00402E7D                 lea     esi, [esi+0]
.text:00402E80
.text:00402E80 loc_402E80:                             ; CODE XREF: sub_402DA0+FD↓j
.text:00402E80                 mov     ebx, [esp+2Ch+var_14]
.text:00402E84                 mov     ebp, [esp+2Ch+var_18]
.text:00402E88                 add     ebx, esi
.text:00402E8A                 add     ebp, esi
.text:00402E8C                 mov     edx, [edi+ebx*4]
.text:00402E8F                 inc     esi
.text:00402E90                 cmp     esi, [esp+2Ch+var_20]
.text:00402E94                 mov     ecx, [edi+ebp*4]
.text:00402E97                 mov     [edi+ebx*4], ecx
.text:00402E9A                 mov     [edi+ebp*4], edx
.text:00402E9D                 jl      short loc_402E80
.text:00402E9F
.text:00402E9F loc_402E9F:                             ; CODE XREF: sub_402DA0+DB↑j
.text:00402E9F                 mov     esi, [esp+2Ch+var_20]
.text:00402EA3                 add     [esp+2Ch+var_14], esi
.text:00402EA7                 jmp     short loc_402E31
.text:00402EA7 sub_402DA0      endp
.text:00402EA7
.text:00402EA7 ; ---------------------------------------------------------------------------
.text:00402EA9                 align 20h
.text:00402EC0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00402EC0                                         ; DATA XREF: .data:Buffer↓o
.text:00402EF2 ; const char aSSS[]
.text:00402EF2 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_4031B0+50↓o
.text:00402EFE aWrittenByS     db 'Written by %s.',0Ah,0
.text:00402EFE                                         ; DATA XREF: sub_4031B0:loc_403251↓o
.text:00402F0E                 align 20h
.text:00402F20 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00402F20                                         ; DATA XREF: sub_4031B0+100↓o
.text:00402F20                 db 'ere is NO',0Ah
.text:00402F20                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00402F20                 db 'R PURPOSE.',0Ah,0
.text:00402FB8 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00402FB8                                         ; DATA XREF: sub_4031B0:loc_4032F1↓o
.text:00402FCF aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00402FCF                                         ; DATA XREF: sub_4031B0:loc_4032FD↓o
.text:00402FEB                 align 20h
.text:00403000 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00403000                                         ; DATA XREF: sub_4031B0:loc_403309↓o
.text:00403000                 db 'and %s.',0Ah,0
.text:00403020 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00403020                                         ; DATA XREF: sub_4031B0:loc_403315↓o
.text:00403020                 db '%s, and %s.',0Ah,0
.text:00403044                 align 20h
.text:00403060 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00403060                                         ; DATA XREF: sub_4031B0:loc_403321↓o
.text:00403060                 db '%s, %s, and %s.',0Ah,0
.text:00403088                 align 20h
.text:004030A0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:004030A0                                         ; DATA XREF: sub_4031B0:loc_40332D↓o
.text:004030A0                 db '%s, %s, %s, and %s.',0Ah,0
.text:004030CC                 align 20h
.text:004030E0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:004030E0                                         ; DATA XREF: sub_4031B0:loc_403339↓o
.text:004030E0                 db '%s, %s, %s, %s,',0Ah
.text:004030E0                 db 'and %s.',0Ah,0
.text:00403110                 align 20h
.text:00403120 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00403120                                         ; DATA XREF: sub_4031B0:loc_403345↓o
.text:00403120                 db '%s, %s, %s, %s,',0Ah
.text:00403120                 db '%s, and %s.',0Ah,0
.text:00403154                 align 10h
.text:00403160 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00403160                                         ; DATA XREF: sub_4031B0:def_40321D↓o
.text:00403160                 db '%s, %s, %s, %s,',0Ah
.text:00403160                 db '%s, %s, and others.',0Ah,0
.text:0040319C ; const char aSS[]
.text:0040319C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_4031B0+1B5↓o
.text:004031A3                 align 10h
.text:004031B0
.text:004031B0 ; =============== S U B R O U T I N E =======================================
.text:004031B0
.text:004031B0
.text:004031B0 ; int __cdecl sub_4031B0(FILE *, FILE *, int, int, va_list)
.text:004031B0 sub_4031B0      proc near               ; CODE XREF: sub_403380+2A↓p
.text:004031B0
.text:004031B0 Stream          = dword ptr -2Ch
.text:004031B0 Format          = dword ptr -28h
.text:004031B0 ArgList         = dword ptr -24h
.text:004031B0 var_20          = dword ptr -20h
.text:004031B0 var_1C          = dword ptr -1Ch
.text:004031B0 var_14          = dword ptr -14h
.text:004031B0 arg_0           = dword ptr  4
.text:004031B0 arg_4           = dword ptr  8
.text:004031B0 arg_8           = dword ptr  0Ch
.text:004031B0 arg_C           = dword ptr  10h
.text:004031B0 arg_10          = dword ptr  14h
.text:004031B0
.text:004031B0                 push    ebp
.text:004031B1                 push    edi
.text:004031B2                 push    esi
.text:004031B3                 push    ebx
.text:004031B4                 sub     esp, 1Ch
.text:004031B7                 xor     ebx, ebx
.text:004031B9                 mov     edi, [esp+2Ch+arg_10]
.text:004031BD                 mov     edx, [esp+2Ch+arg_8]
.text:004031C1                 mov     esi, [esp+2Ch+arg_0]
.text:004031C5                 mov     eax, [edi]
.text:004031C7                 mov     ecx, [esp+2Ch+arg_4]
.text:004031CB                 mov     [esp+2Ch+var_14], edx
.text:004031CF                 mov     ebp, [esp+2Ch+arg_C]
.text:004031D3                 lea     edx, [edi+4]
.text:004031D6                 test    eax, eax
.text:004031D8                 jz      short loc_4031EC
.text:004031DA                 lea     esi, [esi+0]
.text:004031E0
.text:004031E0 loc_4031E0:                             ; CODE XREF: sub_4031B0+3A↓j
.text:004031E0                 mov     eax, edx
.text:004031E2                 inc     ebx
.text:004031E3                 mov     eax, [eax]
.text:004031E5                 add     edx, 4
.text:004031E8                 test    eax, eax
.text:004031EA                 jnz     short loc_4031E0
.text:004031EC
.text:004031EC loc_4031EC:                             ; CODE XREF: sub_4031B0+28↑j
.text:004031EC                 test    ecx, ecx
.text:004031EE                 jz      loc_40335D
.text:004031F4                 mov     [esp+2Ch+var_1C], ebp
.text:004031F8                 mov     edx, [esp+2Ch+var_14]
.text:004031FC                 mov     [esp+2Ch+ArgList], ecx
.text:00403200                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00403208                 mov     [esp+2Ch+var_20], edx
.text:0040320C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040320F                 call    fprintf
.text:00403214
.text:00403214 loc_403214:                             ; CODE XREF: sub_4031B0+1C9↓j
.text:00403214                 cmp     ebx, 9          ; switch 10 cases
.text:00403217                 ja      def_40321D      ; jumptable 0040321D default case
.text:0040321D                 jmp     ds:jpt_40321D[ebx*4] ; switch jump
.text:0040321D ; ---------------------------------------------------------------------------
.text:00403224 jpt_40321D      dd offset loc_40324C    ; DATA XREF: sub_4031B0+6D↑r
.text:00403224                 dd offset loc_403251    ; jump table for switch statement
.text:00403224                 dd offset loc_4032F1
.text:00403224                 dd offset loc_4032FD
.text:00403224                 dd offset loc_403309
.text:00403224                 dd offset loc_403315
.text:00403224                 dd offset loc_403321
.text:00403224                 dd offset loc_40332D
.text:00403224                 dd offset loc_403339
.text:00403224                 dd offset loc_403345
.text:0040324C ; ---------------------------------------------------------------------------
.text:0040324C
.text:0040324C loc_40324C:                             ; CODE XREF: sub_4031B0+6D↑j
.text:0040324C                                         ; DATA XREF: sub_4031B0:jpt_40321D↑o
.text:0040324C                 call    abort           ; jumptable 0040321D case 0
.text:00403251 ; ---------------------------------------------------------------------------
.text:00403251
.text:00403251 loc_403251:                             ; CODE XREF: sub_4031B0+6D↑j
.text:00403251                                         ; DATA XREF: sub_4031B0:jpt_40321D↑o
.text:00403251                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040321D case 1
.text:00403258                 nop
.text:00403259                 lea     esi, [esi+0]
.text:00403260
.text:00403260 loc_403260:                             ; CODE XREF: sub_4031B0+148↓j
.text:00403260                                         ; sub_4031B0+154↓j ...
.text:00403260                 call    ds:libintl_gettext
.text:00403266                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040326A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040326D                 mov     [esp+2Ch+Format], eax ; Format
.text:00403271                 call    vfprintf
.text:00403276                 mov     ebx, [esi+4]
.text:00403279                 dec     ebx
.text:0040327A                 test    ebx, ebx
.text:0040327C                 mov     [esi+4], ebx
.text:0040327F                 js      short loc_4032DF
.text:00403281                 mov     edi, [esi]
.text:00403283                 mov     byte ptr [edi], 0Ah
.text:00403286                 inc     dword ptr [esi]
.text:00403288
.text:00403288 loc_403288:                             ; CODE XREF: sub_4031B0+13F↓j
.text:00403288                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040328C                 mov     edx, Buffer
.text:00403292                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00403295                 call    fputs
.text:0040329A                 mov     ebp, [esi+4]
.text:0040329D                 dec     ebp
.text:0040329E                 test    ebp, ebp
.text:004032A0                 mov     [esi+4], ebp
.text:004032A3                 js      short loc_4032CD
.text:004032A5                 mov     ecx, [esi]
.text:004032A7                 mov     byte ptr [ecx], 0Ah
.text:004032AA                 inc     dword ptr [esi]
.text:004032AC
.text:004032AC loc_4032AC:                             ; CODE XREF: sub_4031B0+12D↓j
.text:004032AC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:004032B0                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:004032B7                 call    ds:libintl_gettext
.text:004032BD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:004032C1                 add     esp, 1Ch
.text:004032C4                 pop     ebx
.text:004032C5                 pop     esi
.text:004032C6                 pop     edi
.text:004032C7                 pop     ebp
.text:004032C8                 jmp     fputs
.text:004032CD ; ---------------------------------------------------------------------------
.text:004032CD
.text:004032CD loc_4032CD:                             ; CODE XREF: sub_4031B0+F3↑j
.text:004032CD                 mov     [esp+2Ch+Format], esi ; File
.text:004032D1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004032D8                 call    _flsbuf
.text:004032DD                 jmp     short loc_4032AC
.text:004032DF ; ---------------------------------------------------------------------------
.text:004032DF
.text:004032DF loc_4032DF:                             ; CODE XREF: sub_4031B0+CF↑j
.text:004032DF                 mov     [esp+2Ch+Format], esi ; File
.text:004032E3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004032EA                 call    _flsbuf
.text:004032EF                 jmp     short loc_403288
.text:004032F1 ; ---------------------------------------------------------------------------
.text:004032F1
.text:004032F1 loc_4032F1:                             ; CODE XREF: sub_4031B0+6D↑j
.text:004032F1                                         ; DATA XREF: sub_4031B0:jpt_40321D↑o
.text:004032F1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040321D case 2
.text:004032F8                 jmp     loc_403260
.text:004032FD ; ---------------------------------------------------------------------------
.text:004032FD
.text:004032FD loc_4032FD:                             ; CODE XREF: sub_4031B0+6D↑j
.text:004032FD                                         ; DATA XREF: sub_4031B0:jpt_40321D↑o
.text:004032FD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040321D case 3
.text:00403304                 jmp     loc_403260
.text:00403309 ; ---------------------------------------------------------------------------
.text:00403309
.text:00403309 loc_403309:                             ; CODE XREF: sub_4031B0+6D↑j
.text:00403309                                         ; DATA XREF: sub_4031B0:jpt_40321D↑o
.text:00403309                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040321D case 4
.text:00403310                 jmp     loc_403260
.text:00403315 ; ---------------------------------------------------------------------------
.text:00403315
.text:00403315 loc_403315:                             ; CODE XREF: sub_4031B0+6D↑j
.text:00403315                                         ; DATA XREF: sub_4031B0:jpt_40321D↑o
.text:00403315                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040321D case 5
.text:0040331C                 jmp     loc_403260
.text:00403321 ; ---------------------------------------------------------------------------
.text:00403321
.text:00403321 loc_403321:                             ; CODE XREF: sub_4031B0+6D↑j
.text:00403321                                         ; DATA XREF: sub_4031B0:jpt_40321D↑o
.text:00403321                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040321D case 6
.text:00403328                 jmp     loc_403260
.text:0040332D ; ---------------------------------------------------------------------------
.text:0040332D
.text:0040332D loc_40332D:                             ; CODE XREF: sub_4031B0+6D↑j
.text:0040332D                                         ; DATA XREF: sub_4031B0:jpt_40321D↑o
.text:0040332D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040321D case 7
.text:00403334                 jmp     loc_403260
.text:00403339 ; ---------------------------------------------------------------------------
.text:00403339
.text:00403339 loc_403339:                             ; CODE XREF: sub_4031B0+6D↑j
.text:00403339                                         ; DATA XREF: sub_4031B0:jpt_40321D↑o
.text:00403339                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040321D case 8
.text:00403340                 jmp     loc_403260
.text:00403345 ; ---------------------------------------------------------------------------
.text:00403345
.text:00403345 loc_403345:                             ; CODE XREF: sub_4031B0+6D↑j
.text:00403345                                         ; DATA XREF: sub_4031B0:jpt_40321D↑o
.text:00403345                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040321D case 9
.text:0040334C                 jmp     loc_403260
.text:00403351 ; ---------------------------------------------------------------------------
.text:00403351
.text:00403351 def_40321D:                             ; CODE XREF: sub_4031B0+67↑j
.text:00403351                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040321D default case
.text:00403358                 jmp     loc_403260
.text:0040335D ; ---------------------------------------------------------------------------
.text:0040335D
.text:0040335D loc_40335D:                             ; CODE XREF: sub_4031B0+3E↑j
.text:0040335D                 mov     [esp+2Ch+var_20], ebp
.text:00403361                 mov     ecx, [esp+2Ch+var_14]
.text:00403365                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040336D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403370                 mov     [esp+2Ch+ArgList], ecx
.text:00403374                 call    fprintf
.text:00403379                 jmp     loc_403214
.text:00403379 sub_4031B0      endp
.text:00403379
.text:00403379 ; ---------------------------------------------------------------------------
.text:0040337E                 align 10h
.text:00403380
.text:00403380 ; =============== S U B R O U T I N E =======================================
.text:00403380
.text:00403380
.text:00403380 ; int __cdecl sub_403380(FILE *, FILE *, int, int, char)
.text:00403380 sub_403380      proc near               ; CODE XREF: sub_4015B0+14E↑p
.text:00403380
.text:00403380 var_1C          = dword ptr -1Ch
.text:00403380 var_18          = dword ptr -18h
.text:00403380 var_14          = dword ptr -14h
.text:00403380 var_10          = dword ptr -10h
.text:00403380 var_C           = dword ptr -0Ch
.text:00403380 arg_0           = dword ptr  4
.text:00403380 arg_4           = dword ptr  8
.text:00403380 arg_8           = dword ptr  0Ch
.text:00403380 arg_C           = dword ptr  10h
.text:00403380 arg_10          = byte ptr  14h
.text:00403380
.text:00403380                 sub     esp, 1Ch
.text:00403383                 mov     edx, [esp+1Ch+arg_C]
.text:00403387                 lea     ecx, [esp+1Ch+arg_10]
.text:0040338B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040338F                 mov     ecx, [esp+1Ch+arg_8]
.text:00403393                 mov     [esp+1Ch+var_10], edx ; int
.text:00403397                 mov     edx, [esp+1Ch+arg_4]
.text:0040339B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040339F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:004033A3                 mov     edx, [esp+1Ch+arg_0]
.text:004033A7                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:004033AA                 call    sub_4031B0
.text:004033AF                 add     esp, 1Ch
.text:004033B2                 retn
.text:004033B2 sub_403380      endp
.text:004033B2
.text:004033B2 ; ---------------------------------------------------------------------------
.text:004033B3                 align 10h
.text:004033C0
.text:004033C0 ; =============== S U B R O U T I N E =======================================
.text:004033C0
.text:004033C0
.text:004033C0 ; int __cdecl sub_4033C0(int, int, char *, int, int)
.text:004033C0 sub_4033C0      proc near               ; CODE XREF: sub_4015B0+9F↑p
.text:004033C0
.text:004033C0 var_1C          = dword ptr -1Ch
.text:004033C0 var_18          = dword ptr -18h
.text:004033C0 var_14          = dword ptr -14h
.text:004033C0 var_10          = dword ptr -10h
.text:004033C0 var_C           = dword ptr -0Ch
.text:004033C0 var_8           = dword ptr -8
.text:004033C0 var_4           = dword ptr -4
.text:004033C0 arg_0           = dword ptr  4
.text:004033C0 arg_4           = dword ptr  8
.text:004033C0 arg_8           = dword ptr  0Ch
.text:004033C0 arg_C           = dword ptr  10h
.text:004033C0 arg_10          = dword ptr  14h
.text:004033C0
.text:004033C0                 sub     esp, 1Ch
.text:004033C3                 mov     edx, [esp+1Ch+arg_C]
.text:004033C7                 mov     [esp+1Ch+var_4], 0 ; int
.text:004033CF                 mov     ecx, [esp+1Ch+arg_10]
.text:004033D3                 mov     [esp+1Ch+var_8], 0 ; int
.text:004033DB                 mov     [esp+1Ch+var_10], edx ; int
.text:004033DF                 mov     edx, [esp+1Ch+arg_4]
.text:004033E3                 mov     [esp+1Ch+var_C], ecx ; int
.text:004033E7                 mov     ecx, [esp+1Ch+arg_8]
.text:004033EB                 mov     [esp+1Ch+var_18], edx ; int
.text:004033EF                 mov     edx, [esp+1Ch+arg_0]
.text:004033F3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:004033F7                 mov     [esp+1Ch+var_1C], edx ; int
.text:004033FA                 call    sub_402C80
.text:004033FF                 add     esp, 1Ch
.text:00403402                 retn
.text:00403402 sub_4033C0      endp
.text:00403402
.text:00403402 ; ---------------------------------------------------------------------------
.text:00403403                 align 10h
.text:00403410                 sub     esp, 2Ch
.text:00403413                 mov     edx, [esp+44h]
.text:00403417                 mov     dword ptr [esp+18h], 0
.text:0040341F                 mov     ecx, [esp+40h]
.text:00403423                 mov     dword ptr [esp+14h], 0
.text:0040342B                 mov     [esp+1Ch], edx
.text:0040342F                 mov     edx, [esp+3Ch]
.text:00403433                 mov     [esp+10h], ecx
.text:00403437                 mov     ecx, [esp+38h]
.text:0040343B                 mov     [esp+0Ch], edx
.text:0040343F                 mov     edx, [esp+34h]
.text:00403443                 mov     [esp+8], ecx
.text:00403447                 mov     [esp+4], edx
.text:0040344B                 mov     edx, [esp+30h]
.text:0040344F                 mov     [esp], edx
.text:00403452                 call    sub_4020F0
.text:00403457                 add     esp, 2Ch
.text:0040345A                 retn
.text:0040345A ; ---------------------------------------------------------------------------
.text:0040345B                 align 10h
.text:00403460                 sub     esp, 1Ch
.text:00403463                 mov     edx, [esp+2Ch]
.text:00403467                 mov     dword ptr [esp+18h], 0
.text:0040346F                 mov     ecx, [esp+30h]
.text:00403473                 mov     dword ptr [esp+14h], 1
.text:0040347B                 mov     [esp+0Ch], edx
.text:0040347F                 mov     edx, [esp+24h]
.text:00403483                 mov     [esp+10h], ecx
.text:00403487                 mov     ecx, [esp+28h]
.text:0040348B                 mov     [esp+4], edx
.text:0040348F                 mov     edx, [esp+20h]
.text:00403493                 mov     [esp+8], ecx
.text:00403497                 mov     [esp], edx
.text:0040349A                 call    sub_402C80
.text:0040349F                 add     esp, 1Ch
.text:004034A2                 retn
.text:004034A2 ; ---------------------------------------------------------------------------
.text:004034A3                 align 10h
.text:004034B0                 sub     esp, 2Ch
.text:004034B3                 mov     edx, [esp+44h]
.text:004034B7                 mov     dword ptr [esp+18h], 0
.text:004034BF                 mov     ecx, [esp+40h]
.text:004034C3                 mov     dword ptr [esp+14h], 1
.text:004034CB                 mov     [esp+1Ch], edx
.text:004034CF                 mov     edx, [esp+3Ch]
.text:004034D3                 mov     [esp+10h], ecx
.text:004034D7                 mov     ecx, [esp+38h]
.text:004034DB                 mov     [esp+0Ch], edx
.text:004034DF                 mov     edx, [esp+34h]
.text:004034E3                 mov     [esp+8], ecx
.text:004034E7                 mov     [esp+4], edx
.text:004034EB                 mov     edx, [esp+30h]
.text:004034EF                 mov     [esp], edx
.text:004034F2                 call    sub_4020F0
.text:004034F7                 add     esp, 2Ch
.text:004034FA                 retn
.text:004034FA ; ---------------------------------------------------------------------------
.text:004034FB                 align 10h
.text:00403500                 mov     edx, [esp+4]
.text:00403504                 mov     ds:dword_409040, edx
.text:0040350A                 retn
.text:0040350A ; ---------------------------------------------------------------------------
.text:0040350B aWriteError     db 'write error',0      ; DATA XREF: sub_403530:loc_403579↓o
.text:00403517 ; const char aSS_0[]
.text:00403517 aSS_0           db '%s: %s',0           ; DATA XREF: sub_403530+77↓o
.text:0040351E ; const char aS_3[]
.text:0040351E aS_3            db '%s',0               ; DATA XREF: sub_403530+A0↓o
.text:00403521 ; ---------------------------------------------------------------------------
.text:00403521                 jmp     short sub_403530
.text:00403521 ; ---------------------------------------------------------------------------
.text:00403523                 align 10h
.text:00403530
.text:00403530 ; =============== S U B R O U T I N E =======================================
.text:00403530
.text:00403530
.text:00403530 ; void __cdecl sub_403530()
.text:00403530 sub_403530      proc near               ; CODE XREF: .text:00403521↑j
.text:00403530                                         ; DATA XREF: sub_4015B0+61↑o
.text:00403530
.text:00403530 Stream          = dword ptr -2Ch
.text:00403530 ErrorMessage    = dword ptr -28h
.text:00403530 var_24          = dword ptr -24h
.text:00403530 var_20          = byte ptr -20h
.text:00403530 var_1C          = dword ptr -1Ch
.text:00403530 var_9           = byte ptr -9
.text:00403530
.text:00403530                 push    esi
.text:00403531                 push    ebx
.text:00403532                 sub     esp, 24h
.text:00403535                 mov     edx, ds:_iob
.text:0040353B                 mov     ecx, [edx+2Ch]
.text:0040353E                 lea     esi, [edx+20h]
.text:00403541                 shr     ecx, 5
.text:00403544                 mov     bl, cl
.text:00403546                 mov     ecx, [edx+20h]
.text:00403549                 and     bl, 1
.text:0040354C                 cmp     ecx, [esi+8]
.text:0040354F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403552                 setz    [esp+2Ch+var_9]
.text:00403557                 call    fclose
.text:0040355C                 test    eax, eax
.text:0040355E                 setnz   al
.text:00403561                 test    bl, bl
.text:00403563                 jnz     loc_4035F3
.text:00403569                 test    al, al
.text:0040356B                 jz      short loc_4035C0
.text:0040356D
.text:0040356D loc_40356D:                             ; CODE XREF: sub_403530+CD↓j
.text:0040356D                 call    _errno
.text:00403572                 mov     esi, [eax]
.text:00403574
.text:00403574 loc_403574:                             ; CODE XREF: sub_403530+C7↓j
.text:00403574                 cmp     esi, 9
.text:00403577                 jz      short loc_4035E6
.text:00403579
.text:00403579 loc_403579:                             ; CODE XREF: sub_403530+B8↓j
.text:00403579                                         ; sub_403530+C1↓j
.text:00403579                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00403580                 call    ds:libintl_gettext
.text:00403586                 mov     ebx, eax
.text:00403588                 mov     eax, ds:dword_409040
.text:0040358D                 test    eax, eax
.text:0040358F                 jz      short loc_4035C6
.text:00403591                 mov     [esp+2Ch+Stream], eax ; char *
.text:00403594                 call    sub_405770
.text:00403599                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040359D                 mov     edx, Code
.text:004035A3                 mov     [esp+2Ch+var_1C], ebx
.text:004035A7                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:004035AF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004035B3                 mov     [esp+2Ch+Stream], edx ; Code
.text:004035B6                 call    sub_407070
.text:004035BB                 nop
.text:004035BC                 lea     esi, [esi+0]
.text:004035C0
.text:004035C0 loc_4035C0:                             ; CODE XREF: sub_403530+3B↑j
.text:004035C0                                         ; sub_403530+B4↓j ...
.text:004035C0                 add     esp, 24h
.text:004035C3                 pop     ebx
.text:004035C4                 pop     esi
.text:004035C5                 retn
.text:004035C6 ; ---------------------------------------------------------------------------
.text:004035C6
.text:004035C6 loc_4035C6:                             ; CODE XREF: sub_403530+5F↑j
.text:004035C6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:004035CA                 mov     ebx, Code
.text:004035D0                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:004035D8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004035DC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:004035DF                 call    sub_407070
.text:004035E4                 jmp     short loc_4035C0
.text:004035E6 ; ---------------------------------------------------------------------------
.text:004035E6
.text:004035E6 loc_4035E6:                             ; CODE XREF: sub_403530+47↑j
.text:004035E6                 test    bl, bl
.text:004035E8                 jnz     short loc_403579
.text:004035EA                 cmp     [esp+2Ch+var_9], 0
.text:004035EF                 jnz     short loc_4035C0
.text:004035F1                 jmp     short loc_403579
.text:004035F3 ; ---------------------------------------------------------------------------
.text:004035F3
.text:004035F3 loc_4035F3:                             ; CODE XREF: sub_403530+33↑j
.text:004035F3                 xor     esi, esi
.text:004035F5                 test    al, al
.text:004035F7                 jz      loc_403574
.text:004035FD                 jmp     loc_40356D
.text:004035FD sub_403530      endp
.text:004035FD
.text:004035FD ; ---------------------------------------------------------------------------
.text:00403602                 align 10h
.text:00403610
.text:00403610 ; =============== S U B R O U T I N E =======================================
.text:00403610
.text:00403610
.text:00403610 sub_403610      proc near               ; CODE XREF: sub_401C30+6F↑p
.text:00403610
.text:00403610 FileHandle      = dword ptr -1Ch
.text:00403610 DstBuf          = dword ptr -18h
.text:00403610 MaxCharCount    = dword ptr -14h
.text:00403610 arg_0           = dword ptr  4
.text:00403610 arg_4           = dword ptr  8
.text:00403610 arg_8           = dword ptr  0Ch
.text:00403610
.text:00403610                 push    ebp
.text:00403611                 push    edi
.text:00403612                 push    esi
.text:00403613                 push    ebx
.text:00403614                 sub     esp, 0Ch
.text:00403617                 mov     ebp, [esp+1Ch+arg_0]
.text:0040361B                 mov     edi, [esp+1Ch+arg_4]
.text:0040361F                 mov     ebx, [esp+1Ch+arg_8]
.text:00403623                 lea     esi, [esi+0]
.text:00403629                 lea     edi, [edi+0]
.text:00403630
.text:00403630 loc_403630:                             ; CODE XREF: sub_403610+3E↓j
.text:00403630                                         ; sub_403610+57↓j
.text:00403630                 mov     [esp+1Ch+MaxCharCount], ebx ; MaxCharCount
.text:00403634                 mov     [esp+1Ch+DstBuf], edi ; DstBuf
.text:00403638                 mov     [esp+1Ch+FileHandle], ebp ; FileHandle
.text:0040363B                 call    _read
.text:00403640                 test    eax, eax
.text:00403642                 mov     esi, eax
.text:00403644                 jns     short loc_403669
.text:00403646                 call    _errno
.text:0040364B                 cmp     dword ptr [eax], 4
.text:0040364E                 jz      short loc_403630
.text:00403650                 call    _errno
.text:00403655                 cmp     dword ptr [eax], 16h
.text:00403658                 jnz     short loc_403669
.text:0040365A                 cmp     ebx, 7FFFE000h
.text:00403660                 jbe     short loc_403669
.text:00403662                 mov     ebx, 7FFFE000h
.text:00403667                 jmp     short loc_403630
.text:00403669 ; ---------------------------------------------------------------------------
.text:00403669
.text:00403669 loc_403669:                             ; CODE XREF: sub_403610+34↑j
.text:00403669                                         ; sub_403610+48↑j ...
.text:00403669                 add     esp, 0Ch
.text:0040366C                 mov     eax, esi
.text:0040366E                 pop     ebx
.text:0040366F                 pop     esi
.text:00403670                 pop     edi
.text:00403671                 pop     ebp
.text:00403672                 retn
.text:00403672 sub_403610      endp
.text:00403672
.text:00403672 ; ---------------------------------------------------------------------------
.text:00403673                 align 10h
.text:00403680 byte_403680     db 0                    ; DATA XREF: sub_4036C0+377↓r
.text:00403681 aKmgtpezy       db 'KMGTPEZY.',0        ; DATA XREF: sub_4036C0+37↓o
.text:0040368B                 db 0                    ; DATA XREF: sub_4036C0+8D↓o
.text:0040368C ; const char a0lf[]
.text:0040368C a0lf            db '%.0Lf',0            ; DATA XREF: sub_4036C0+2B6↓o
.text:00403692 ; const char a1lf[]
.text:00403692 a1lf            db '%.1Lf',0            ; DATA XREF: sub_4036C0+584↓o
.text:00403698 flt_403698      dd 1.8446744e19         ; DATA XREF: sub_4036C0:loc_403B60↓r
.text:00403698                                         ; sub_4036C0:loc_403B6B↓r ...
.text:0040369C                 align 10h
.text:004036A0 tbyte_4036A0    dt 1.8446744073709551615e19
.text:004036A0                                         ; DATA XREF: sub_4036C0+23E↓r
.text:004036A0                                         ; sub_4036C0+51A↓r ...
.text:004036AA                 align 10h
.text:004036B0 tbyte_4036B0    dt 10.0                 ; DATA XREF: sub_4036C0+5E4↓r
.text:004036B0                                         ; sub_4036C0:loc_403D10↓r
.text:004036BA                 align 10h
.text:004036C0
.text:004036C0 ; =============== S U B R O U T I N E =======================================
.text:004036C0
.text:004036C0
.text:004036C0 ; int __cdecl sub_4036C0(int, int, char *Buffer, int, int, int, int, int)
.text:004036C0 sub_4036C0      proc near               ; CODE XREF: sub_4019C0+10D↑p
.text:004036C0                                         ; sub_401C30+178↑p
.text:004036C0
.text:004036C0 var_C4          = qword ptr -0C4h
.text:004036C0 var_BC          = tbyte ptr -0BCh
.text:004036C0 var_B0          = dword ptr -0B0h
.text:004036C0 var_9C          = tbyte ptr -9Ch
.text:004036C0 var_8C          = dword ptr -8Ch
.text:004036C0 var_88          = dword ptr -88h
.text:004036C0 var_80          = dword ptr -80h
.text:004036C0 var_7C          = tbyte ptr -7Ch
.text:004036C0 var_64          = dword ptr -64h
.text:004036C0 var_60          = dword ptr -60h
.text:004036C0 var_5C          = dword ptr -5Ch
.text:004036C0 var_58          = dword ptr -58h
.text:004036C0 Size            = dword ptr -54h
.text:004036C0 Src             = dword ptr -50h
.text:004036C0 var_4C          = dword ptr -4Ch
.text:004036C0 var_48          = dword ptr -48h
.text:004036C0 var_44          = dword ptr -44h
.text:004036C0 var_40          = dword ptr -40h
.text:004036C0 var_3C          = dword ptr -3Ch
.text:004036C0 var_38          = dword ptr -38h
.text:004036C0 var_34          = dword ptr -34h
.text:004036C0 var_30          = dword ptr -30h
.text:004036C0 var_2C          = qword ptr -2Ch
.text:004036C0 var_24          = qword ptr -24h
.text:004036C0 arg_0           = dword ptr  4
.text:004036C0 arg_4           = dword ptr  8
.text:004036C0 Buffer          = dword ptr  0Ch
.text:004036C0 arg_C           = dword ptr  10h
.text:004036C0 arg_10          = dword ptr  14h
.text:004036C0 arg_14          = dword ptr  18h
.text:004036C0 arg_18          = dword ptr  1Ch
.text:004036C0 arg_1C          = dword ptr  20h
.text:004036C0
.text:004036C0                 push    ebp
.text:004036C1                 push    edi
.text:004036C2                 push    esi
.text:004036C3                 push    ebx
.text:004036C4                 sub     esp, 0ACh
.text:004036CA                 mov     ecx, [esp+0BCh+arg_18]
.text:004036D1                 mov     [esp+0BCh+var_44], 0FFFFFFFFh
.text:004036D9                 mov     eax, [esp+0BCh+arg_C]
.text:004036E0                 mov     edi, [esp+0BCh+arg_0]
.text:004036E7                 mov     dword ptr [esp+0BCh+var_2C], ecx
.text:004036EE                 mov     esi, [esp+0BCh+arg_4]
.text:004036F5                 xor     ecx, ecx
.text:004036F7                 mov     [esp+0BCh+Src], (offset aKmgtpezy+8) ; "."
.text:004036FF                 and     eax, 3
.text:00403702                 mov     ebx, [esp+0BCh+arg_1C]
.text:00403709                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00403711                 mov     dword ptr [esp+0BCh+var_24], edi
.text:00403718                 mov     ebp, [esp+0BCh+Buffer]
.text:0040371F                 mov     dword ptr [esp+0BCh+var_24+4], esi
.text:00403726                 mov     edi, [esp+0BCh+arg_14]
.text:0040372D                 mov     dword ptr [esp+0BCh+var_2C+4], ebx
.text:00403734                 mov     esi, [esp+0BCh+arg_10]
.text:0040373B                 setnz   cl
.text:0040373E                 mov     [esp+0BCh+var_30], eax
.text:00403745                 mov     [esp+0BCh+Size], 1
.text:0040374D                 mov     [esp+0BCh+var_5C], offset byte_40368B
.text:00403755                 dec     ecx
.text:00403756                 and     ecx, 0FFFFFFE8h
.text:00403759                 add     ecx, 400h
.text:0040375F                 mov     [esp+0BCh+var_34], ecx
.text:00403766                 call    localeconv
.text:0040376B                 mov     edx, [eax]
.text:0040376D                 mov     ebx, eax
.text:0040376F                 mov     dword ptr [esp+0BCh+var_BC], edx ; Str
.text:00403772                 call    strlen
.text:00403777                 lea     ecx, [eax-1]
.text:0040377A                 cmp     ecx, 1
.text:0040377D                 ja      short loc_403789
.text:0040377F                 mov     [esp+0BCh+Size], eax
.text:00403783                 mov     ecx, [ebx]
.text:00403785                 mov     [esp+0BCh+Src], ecx
.text:00403789
.text:00403789 loc_403789:                             ; CODE XREF: sub_4036C0+BD↑j
.text:00403789                 mov     eax, [ebx+8]
.text:0040378C                 mov     edx, [ebx+4]
.text:0040378F                 mov     [esp+0BCh+var_58], eax
.text:00403793                 mov     dword ptr [esp+0BCh+var_BC], edx ; Str
.text:00403796                 call    strlen
.text:0040379B                 cmp     eax, 2
.text:0040379E                 ja      short loc_4037A7
.text:004037A0                 mov     ecx, [ebx+4]
.text:004037A3                 mov     [esp+0BCh+var_5C], ecx
.text:004037A7
.text:004037A7 loc_4037A7:                             ; CODE XREF: sub_4036C0+DE↑j
.text:004037A7                 cmp     dword ptr [esp+0BCh+var_2C+4], edi
.text:004037AE                 lea     ebx, [ebp+74h]
.text:004037B1                 mov     [esp+0BCh+var_4C], ebx
.text:004037B5                 mov     [esp+0BCh+var_48], ebx
.text:004037B9                 ja      loc_4040F8
.text:004037BF                 jb      short loc_4037CE
.text:004037C1                 cmp     dword ptr [esp+0BCh+var_2C], esi
.text:004037C8                 ja      loc_4040F8
.text:004037CE
.text:004037CE loc_4037CE:                             ; CODE XREF: sub_4036C0+FF↑j
.text:004037CE                 mov     dword ptr [esp+0BCh+var_BC], esi
.text:004037D1                 mov     edx, dword ptr [esp+0BCh+var_2C]
.text:004037D8                 mov     ecx, dword ptr [esp+0BCh+var_2C+4]
.text:004037DF                 mov     dword ptr [esp+0BCh+var_BC+4], edi
.text:004037E3                 mov     dword ptr [esp+0BCh+var_BC+8], edx
.text:004037E7                 mov     [esp+0BCh+var_B0], ecx
.text:004037EB                 call    sub_407490
.text:004037F0                 mov     ebx, edx
.text:004037F2                 or      ebx, eax
.text:004037F4                 jnz     loc_4038A0
.text:004037FA                 mov     dword ptr [esp+0BCh+var_BC], esi
.text:004037FD                 mov     edx, dword ptr [esp+0BCh+var_2C]
.text:00403804                 mov     ebx, dword ptr [esp+0BCh+var_2C+4]
.text:0040380B                 mov     dword ptr [esp+0BCh+var_BC+4], edi
.text:0040380F                 mov     dword ptr [esp+0BCh+var_BC+8], edx
.text:00403813                 mov     [esp+0BCh+var_B0], ebx
.text:00403817                 call    sub_407610
.text:0040381C                 mov     [esp+0BCh+var_B0], edx
.text:00403820                 mov     ebx, dword ptr [esp+0BCh+var_24]
.text:00403827                 mov     ecx, [esp+0BCh+var_B0]
.text:0040382B                 mov     dword ptr [esp+0BCh+var_BC+8], eax
.text:0040382F                 mov     eax, dword ptr [esp+0BCh+var_24]
.text:00403836                 imul    ebx, ecx
.text:00403839                 mul     dword ptr [esp+0BCh+var_BC+8]
.text:0040383D                 mov     ecx, edx
.text:0040383F                 add     ecx, ebx
.text:00403841                 mov     [esp+0BCh+var_3C], eax
.text:00403848                 mov     edx, dword ptr [esp+0BCh+var_24+4]
.text:0040384F                 mov     ebx, dword ptr [esp+0BCh+var_BC+8]
.text:00403853                 imul    edx, ebx
.text:00403856                 mov     ebx, [esp+0BCh+var_3C]
.text:0040385D                 add     ecx, edx
.text:0040385F                 mov     [esp+0BCh+var_38], ecx
.text:00403866                 mov     eax, [esp+0BCh+var_38]
.text:0040386D                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:00403870                 mov     dword ptr [esp+0BCh+var_BC+4], eax
.text:00403874                 call    sub_407610
.text:00403879                 mov     ebx, dword ptr [esp+0BCh+var_24+4]
.text:00403880                 mov     ecx, dword ptr [esp+0BCh+var_24]
.text:00403887                 xor     ebx, edx
.text:00403889                 xor     eax, ecx
.text:0040388B                 or      ebx, eax
.text:0040388D                 jz      loc_403D68
.text:00403893                 lea     esi, [esi+0]
.text:00403899                 lea     edi, [edi+0]
.text:004038A0
.text:004038A0 loc_4038A0:                             ; CODE XREF: sub_4036C0+134↑j
.text:004038A0                                         ; sub_4036C0+A3C↓j ...
.text:004038A0                 fild    [esp+0BCh+var_2C]
.text:004038A7                 mov     edx, dword ptr [esp+0BCh+var_2C+4]
.text:004038AE                 test    edx, edx
.text:004038B0                 js      loc_403D5D
.text:004038B6
.text:004038B6 loc_4038B6:                             ; CODE XREF: sub_4036C0+6A3↓j
.text:004038B6                 fild    [esp+0BCh+var_24]
.text:004038BD                 mov     ecx, dword ptr [esp+0BCh+var_24+4]
.text:004038C4                 test    ecx, ecx
.text:004038C6                 js      loc_403D52
.text:004038CC
.text:004038CC loc_4038CC:                             ; CODE XREF: sub_4036C0+698↓j
.text:004038CC                 push    edi
.text:004038CD                 push    esi
.text:004038CE                 fild    [esp+0C4h+var_C4]
.text:004038D1                 add     esp, 8
.text:004038D4                 test    edi, edi
.text:004038D6                 js      loc_403D47
.text:004038DC
.text:004038DC loc_4038DC:                             ; CODE XREF: sub_4036C0+68D↓j
.text:004038DC                 test    byte ptr [esp+0BCh+arg_C], 10h
.text:004038E4                 fdivrp  st(2), st
.text:004038E6                 fmulp   st(1), st
.text:004038E8                 fld     st
.text:004038EA                 fstp    [esp+0BCh+var_7C]
.text:004038EE                 jnz     loc_403B76
.text:004038F4                 cmp     [esp+0BCh+var_30], 1
.text:004038FC                 jz      short loc_403970
.text:004038FE                 fld     ds:tbyte_4036A0
.text:00403904                 fucomp  st(1)
.text:00403906                 fnstsw  ax
.text:00403908                 sahf
.text:00403909                 jbe     short loc_403970
.text:0040390B                 fstp    [esp+0BCh+var_BC] ; _TBYTE
.text:0040390E                 xor     ebx, ebx
.text:00403910                 call    sub_407740
.text:00403915                 mov     edi, edx
.text:00403917                 xor     ecx, ecx
.text:00403919                 mov     edx, [esp+0BCh+var_30]
.text:00403920                 mov     esi, eax
.text:00403922                 test    edx, edx
.text:00403924                 jnz     short loc_40394C
.text:00403926                 push    edi
.text:00403927                 push    esi
.text:00403928                 fild    [esp+0C4h+var_C4]
.text:0040392B                 add     esp, 8
.text:0040392E                 test    edi, edi
.text:00403930                 js      loc_403B6B
.text:00403936
.text:00403936 loc_403936:                             ; CODE XREF: sub_4036C0+4B1↓j
.text:00403936                 fld     [esp+0BCh+var_7C]
.text:0040393A                 fxch    st(1)
.text:0040393C                 fucompp
.text:0040393E                 fnstsw  ax
.text:00403940                 sahf
.text:00403941                 jp      short loc_403945
.text:00403943                 jz      short loc_40394C
.text:00403945
.text:00403945 loc_403945:                             ; CODE XREF: sub_4036C0+281↑j
.text:00403945                 mov     ecx, 1
.text:0040394A                 xor     ebx, ebx
.text:0040394C
.text:0040394C loc_40394C:                             ; CODE XREF: sub_4036C0+264↑j
.text:0040394C                                         ; sub_4036C0+283↑j
.text:0040394C                 mov     edx, esi
.text:0040394E                 add     edx, ecx
.text:00403950                 mov     esi, edi
.text:00403952                 adc     esi, ebx
.text:00403954                 push    esi
.text:00403955                 push    edx
.text:00403956                 fild    [esp+0C4h+var_C4]
.text:00403959                 add     esp, 8
.text:0040395C                 test    esi, esi
.text:0040395E                 js      loc_403B60
.text:00403964                 lea     esi, [esi+0]
.text:0040396A                 lea     edi, [edi+0]
.text:00403970
.text:00403970 loc_403970:                             ; CODE XREF: sub_4036C0+23C↑j
.text:00403970                                         ; sub_4036C0+249↑j ...
.text:00403970                 fstp    [esp+0BCh+var_BC+8]
.text:00403974                 xor     esi, esi
.text:00403976                 mov     dword ptr [esp+0BCh+var_BC+4], offset a0lf ; "%.0Lf"
.text:0040397E                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Buffer
.text:00403981                 call    sprintf
.text:00403986                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Str
.text:00403989                 call    strlen
.text:0040398E                 mov     ebx, eax
.text:00403990
.text:00403990 loc_403990:                             ; CODE XREF: sub_4036C0+5C7↓j
.text:00403990                                         ; sub_4036C0+5D2↓j
.text:00403990                 mov     dword ptr [esp+0BCh+var_BC+8], ebx ; Size
.text:00403994                 mov     edi, [esp+0BCh+var_4C]
.text:00403998                 mov     dword ptr [esp+0BCh+var_BC+4], ebp ; Src
.text:0040399C                 sub     edi, ebx
.text:0040399E                 mov     [esp+0BCh+var_48], edi
.text:004039A2                 mov     dword ptr [esp+0BCh+var_BC], edi ; void *
.text:004039A5                 call    memmove
.text:004039AA                 mov     ebp, [esp+0BCh+var_48]
.text:004039AE                 add     ebx, ebp
.text:004039B0                 sub     ebx, esi
.text:004039B2
.text:004039B2 loc_4039B2:                             ; CODE XREF: sub_4036C0+97E↓j
.text:004039B2                 test    byte ptr [esp+0BCh+arg_C], 4
.text:004039BA                 jnz     loc_403B31
.text:004039C0
.text:004039C0 loc_4039C0:                             ; CODE XREF: sub_4036C0+49B↓j
.text:004039C0                 cmp     byte ptr [esp+0BCh+arg_C], 0
.text:004039C8                 jns     loc_403A80
.text:004039CE                 mov     esi, [esp+0BCh+var_44]
.text:004039D2                 test    esi, esi
.text:004039D4                 js      loc_403A96
.text:004039DA
.text:004039DA loc_4039DA:                             ; CODE XREF: sub_4036C0+419↓j
.text:004039DA                                         ; sub_4036C0+44B↓j ...
.text:004039DA                 mov     edi, [esp+0BCh+arg_C]
.text:004039E1                 and     edi, 100h
.text:004039E7                 or      edi, [esp+0BCh+var_44]
.text:004039EB                 jz      short loc_403A10
.text:004039ED                 test    byte ptr [esp+0BCh+arg_C], 40h
.text:004039F5                 jz      short loc_403A10
.text:004039F7                 mov     esi, [esp+0BCh+var_4C]
.text:004039FB                 mov     byte ptr [esi], 20h ; ' '
.text:004039FE                 inc     esi
.text:004039FF                 mov     [esp+0BCh+var_4C], esi
.text:00403A03                 lea     esi, [esi+0]
.text:00403A09                 lea     edi, [edi+0]
.text:00403A10
.text:00403A10 loc_403A10:                             ; CODE XREF: sub_4036C0+32B↑j
.text:00403A10                                         ; sub_4036C0+335↑j
.text:00403A10                 mov     ecx, [esp+0BCh+var_44]
.text:00403A14                 test    ecx, ecx
.text:00403A16                 jz      short loc_403A40
.text:00403A18                 mov     eax, [esp+0BCh+var_4C]
.text:00403A1C                 inc     [esp+0BCh+var_4C]
.text:00403A20                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00403A28                 jnz     short loc_403A33
.text:00403A2A                 cmp     [esp+0BCh+var_44], 1
.text:00403A2F                 mov     dl, 6Bh ; 'k'
.text:00403A31                 jz      short loc_403A3E
.text:00403A33
.text:00403A33 loc_403A33:                             ; CODE XREF: sub_4036C0+368↑j
.text:00403A33                 mov     ebx, [esp+0BCh+var_44]
.text:00403A37                 movzx   edx, ds:byte_403680[ebx]
.text:00403A3E
.text:00403A3E loc_403A3E:                             ; CODE XREF: sub_4036C0+371↑j
.text:00403A3E                 mov     [eax], dl
.text:00403A40
.text:00403A40 loc_403A40:                             ; CODE XREF: sub_4036C0+356↑j
.text:00403A40                 test    [esp+0BCh+arg_C], 100h
.text:00403A4B                 jz      short loc_403A80
.text:00403A4D                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00403A55                 jz      short loc_403A6C
.text:00403A57                 mov     edx, [esp+0BCh+var_44]
.text:00403A5B                 test    edx, edx
.text:00403A5D                 jz      short loc_403A6C
.text:00403A5F                 mov     ebp, [esp+0BCh+var_4C]
.text:00403A63                 mov     byte ptr [ebp+0], 69h ; 'i'
.text:00403A67                 inc     ebp
.text:00403A68                 mov     [esp+0BCh+var_4C], ebp
.text:00403A6C
.text:00403A6C loc_403A6C:                             ; CODE XREF: sub_4036C0+395↑j
.text:00403A6C                                         ; sub_4036C0+39D↑j
.text:00403A6C                 mov     eax, [esp+0BCh+var_4C]
.text:00403A70                 mov     byte ptr [eax], 42h ; 'B'
.text:00403A73                 inc     eax
.text:00403A74                 mov     [esp+0BCh+var_4C], eax
.text:00403A78                 nop
.text:00403A79                 lea     esi, [esi+0]
.text:00403A80
.text:00403A80 loc_403A80:                             ; CODE XREF: sub_4036C0+308↑j
.text:00403A80                                         ; sub_4036C0+38B↑j
.text:00403A80                 mov     edi, [esp+0BCh+var_4C]
.text:00403A84                 mov     byte ptr [edi], 0
.text:00403A87                 mov     eax, [esp+0BCh+var_48]
.text:00403A8B                 add     esp, 0ACh
.text:00403A91                 pop     ebx
.text:00403A92                 pop     esi
.text:00403A93                 pop     edi
.text:00403A94                 pop     ebp
.text:00403A95                 retn
.text:00403A96 ; ---------------------------------------------------------------------------
.text:00403A96
.text:00403A96 loc_403A96:                             ; CODE XREF: sub_4036C0+314↑j
.text:00403A96                 mov     [esp+0BCh+var_88], 0
.text:00403A9E                 mov     ebp, dword ptr [esp+0BCh+var_2C+4]
.text:00403AA5                 cmp     [esp+0BCh+var_88], ebp
.text:00403AA9                 mov     [esp+0BCh+var_44], 0
.text:00403AB1                 mov     [esp+0BCh+var_8C], 1
.text:00403AB9                 jnb     short loc_403B1F
.text:00403ABB
.text:00403ABB loc_403ABB:                             ; CODE XREF: sub_4036C0+46A↓j
.text:00403ABB                 mov     esi, [esp+0BCh+var_34]
.text:00403AC2                 xor     edi, edi
.text:00403AC4                 lea     esi, [esi+0]
.text:00403ACA                 lea     edi, [edi+0]
.text:00403AD0
.text:00403AD0 loc_403AD0:                             ; CODE XREF: sub_4036C0+449↓j
.text:00403AD0                                         ; sub_4036C0+458↓j
.text:00403AD0                 inc     [esp+0BCh+var_44]
.text:00403AD4                 cmp     [esp+0BCh+var_44], 8
.text:00403AD9                 jz      loc_4039DA
.text:00403ADF                 mov     eax, [esp+0BCh+var_8C]
.text:00403AE3                 mov     ebp, [esp+0BCh+var_8C]
.text:00403AE7                 mov     ebx, [esp+0BCh+var_88]
.text:00403AEB                 mul     esi
.text:00403AED                 imul    ebp, edi
.text:00403AF0                 imul    ebx, esi
.text:00403AF3                 mov     ecx, eax
.text:00403AF5                 add     edx, ebp
.text:00403AF7                 lea     ebp, [ebx+edx]
.text:00403AFA                 cmp     ebp, dword ptr [esp+0BCh+var_2C+4]
.text:00403B01                 mov     [esp+0BCh+var_8C], ecx
.text:00403B05                 mov     [esp+0BCh+var_88], ebp
.text:00403B09                 jb      short loc_403AD0
.text:00403B0B                 ja      loc_4039DA
.text:00403B11                 cmp     ecx, dword ptr [esp+0BCh+var_2C]
.text:00403B18                 jb      short loc_403AD0
.text:00403B1A                 jmp     loc_4039DA
.text:00403B1F ; ---------------------------------------------------------------------------
.text:00403B1F
.text:00403B1F loc_403B1F:                             ; CODE XREF: sub_4036C0+3F9↑j
.text:00403B1F                 mov     ecx, dword ptr [esp+0BCh+var_2C]
.text:00403B26                 cmp     [esp+0BCh+var_8C], ecx
.text:00403B2A                 jb      short loc_403ABB
.text:00403B2C                 jmp     loc_4039DA
.text:00403B31 ; ---------------------------------------------------------------------------
.text:00403B31
.text:00403B31 loc_403B31:                             ; CODE XREF: sub_4036C0+2FA↑j
.text:00403B31                 mov     eax, [esp+0BCh+var_48]
.text:00403B35                 mov     edx, [esp+0BCh+var_5C]
.text:00403B39                 mov     edi, [esp+0BCh+var_58]
.text:00403B3D                 sub     ebx, eax
.text:00403B3F                 mov     dword ptr [esp+0BCh+var_BC+4], ebx ; size_t
.text:00403B43                 mov     ebx, [esp+0BCh+var_48]
.text:00403B47                 mov     [esp+0BCh+var_B0], edx ; char *
.text:00403B4B                 mov     dword ptr [esp+0BCh+var_BC+8], edi ; int
.text:00403B4F                 mov     dword ptr [esp+0BCh+var_BC], ebx ; void *
.text:00403B52                 call    sub_404410
.text:00403B57                 mov     [esp+0BCh+var_48], eax
.text:00403B5B                 jmp     loc_4039C0
.text:00403B60 ; ---------------------------------------------------------------------------
.text:00403B60
.text:00403B60 loc_403B60:                             ; CODE XREF: sub_4036C0+29E↑j
.text:00403B60                 fadd    ds:flt_403698
.text:00403B66                 jmp     loc_403970
.text:00403B6B ; ---------------------------------------------------------------------------
.text:00403B6B
.text:00403B6B loc_403B6B:                             ; CODE XREF: sub_4036C0+270↑j
.text:00403B6B                 fadd    ds:flt_403698
.text:00403B71                 jmp     loc_403936
.text:00403B76 ; ---------------------------------------------------------------------------
.text:00403B76
.text:00403B76 loc_403B76:                             ; CODE XREF: sub_4036C0+22E↑j
.text:00403B76                 fstp    st
.text:00403B78                 mov     [esp+0BCh+var_44], 0
.text:00403B80                 mov     ebx, [esp+0BCh+var_34]
.text:00403B87                 xor     eax, eax
.text:00403B89                 push    eax
.text:00403B8A                 fld1
.text:00403B8C                 push    ebx
.text:00403B8D                 fild    [esp+0C4h+var_C4]
.text:00403B90                 add     esp, 8
.text:00403B93                 lea     esi, [esi+0]
.text:00403B99                 lea     edi, [edi+0]
.text:00403BA0
.text:00403BA0 loc_403BA0:                             ; CODE XREF: sub_4036C0+500↓j
.text:00403BA0                 fld     [esp+0BCh+var_7C]
.text:00403BA4                 fxch    st(2)
.text:00403BA6                 fmul    st, st(1)
.text:00403BA8                 inc     [esp+0BCh+var_44]
.text:00403BAC                 fld     st
.text:00403BAE                 fmul    st, st(2)
.text:00403BB0                 fxch    st(3)
.text:00403BB2                 fucomp  st(3)
.text:00403BB4                 fnstsw  ax
.text:00403BB6                 fstp    st(2)
.text:00403BB8                 sahf
.text:00403BB9                 jb      short loc_403BC2
.text:00403BBB                 cmp     [esp+0BCh+var_44], 8
.text:00403BC0                 jl      short loc_403BA0
.text:00403BC2
.text:00403BC2 loc_403BC2:                             ; CODE XREF: sub_4036C0+4F9↑j
.text:00403BC2                 fstp    st
.text:00403BC4                 fld     [esp+0BCh+var_7C]
.text:00403BC8                 cmp     [esp+0BCh+var_30], 1
.text:00403BD0                 fdivrp  st(1), st
.text:00403BD2                 fld     st
.text:00403BD4                 fstp    [esp+0BCh+var_7C]
.text:00403BD8                 jz      short loc_403C40
.text:00403BDA                 fld     ds:tbyte_4036A0
.text:00403BE0                 fucomp  st(1)
.text:00403BE2                 fnstsw  ax
.text:00403BE4                 sahf
.text:00403BE5                 jbe     short loc_403C40
.text:00403BE7                 fstp    [esp+0BCh+var_BC] ; _TBYTE
.text:00403BEA                 xor     ebx, ebx
.text:00403BEC                 call    sub_407740
.text:00403BF1                 mov     edi, edx
.text:00403BF3                 xor     ecx, ecx
.text:00403BF5                 mov     edx, [esp+0BCh+var_30]
.text:00403BFC                 mov     esi, eax
.text:00403BFE                 test    edx, edx
.text:00403C00                 jnz     short loc_403C28
.text:00403C02                 push    edi
.text:00403C03                 push    esi
.text:00403C04                 fild    [esp+0C4h+var_C4]
.text:00403C07                 add     esp, 8
.text:00403C0A                 test    edi, edi
.text:00403C0C                 js      loc_403D3C
.text:00403C12
.text:00403C12 loc_403C12:                             ; CODE XREF: sub_4036C0+682↓j
.text:00403C12                 fld     [esp+0BCh+var_7C]
.text:00403C16                 fxch    st(1)
.text:00403C18                 fucompp
.text:00403C1A                 fnstsw  ax
.text:00403C1C                 sahf
.text:00403C1D                 jp      short loc_403C21
.text:00403C1F                 jz      short loc_403C28
.text:00403C21
.text:00403C21 loc_403C21:                             ; CODE XREF: sub_4036C0+55D↑j
.text:00403C21                 mov     ecx, 1
.text:00403C26                 xor     ebx, ebx
.text:00403C28
.text:00403C28 loc_403C28:                             ; CODE XREF: sub_4036C0+540↑j
.text:00403C28                                         ; sub_4036C0+55F↑j
.text:00403C28                 mov     edx, esi
.text:00403C2A                 add     edx, ecx
.text:00403C2C                 mov     esi, edi
.text:00403C2E                 adc     esi, ebx
.text:00403C30                 push    esi
.text:00403C31                 push    edx
.text:00403C32                 fild    [esp+0C4h+var_C4]
.text:00403C35                 add     esp, 8
.text:00403C38                 test    esi, esi
.text:00403C3A                 js      loc_403D31
.text:00403C40
.text:00403C40 loc_403C40:                             ; CODE XREF: sub_4036C0+518↑j
.text:00403C40                                         ; sub_4036C0+525↑j ...
.text:00403C40                 fstp    [esp+0BCh+var_BC+8]
.text:00403C44                 mov     dword ptr [esp+0BCh+var_BC+4], offset a1lf ; "%.1Lf"
.text:00403C4C                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Buffer
.text:00403C4F                 call    sprintf
.text:00403C54                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Str
.text:00403C57                 call    strlen
.text:00403C5C                 mov     ebx, eax
.text:00403C5E                 mov     esi, [esp+0BCh+Size]
.text:00403C62                 mov     eax, [esp+0BCh+Size]
.text:00403C66                 inc     esi
.text:00403C67                 add     eax, 2
.text:00403C6A                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00403C72                 jnz     short loc_403C7B
.text:00403C74                 mov     eax, [esp+0BCh+Size]
.text:00403C78                 add     eax, 3
.text:00403C7B
.text:00403C7B loc_403C7B:                             ; CODE XREF: sub_4036C0+5B2↑j
.text:00403C7B                 cmp     eax, ebx
.text:00403C7D                 jb      short loc_403C98
.text:00403C7F                 test    byte ptr [esp+0BCh+arg_C], 8
.text:00403C87                 jz      loc_403990
.text:00403C8D                 cmp     byte ptr [ebx+ebp-1], 30h ; '0'
.text:00403C92                 jnz     loc_403990
.text:00403C98
.text:00403C98 loc_403C98:                             ; CODE XREF: sub_4036C0+5BD↑j
.text:00403C98                 cmp     [esp+0BCh+var_30], 1
.text:00403CA0                 fld     [esp+0BCh+var_7C]
.text:00403CA4                 fld     ds:tbyte_4036B0
.text:00403CAA                 fmulp   st(1), st
.text:00403CAC                 jz      short loc_403D10
.text:00403CAE                 fld     ds:tbyte_4036A0
.text:00403CB4                 fucomp  st(1)
.text:00403CB6                 fnstsw  ax
.text:00403CB8                 sahf
.text:00403CB9                 jbe     short loc_403D10
.text:00403CBB                 fld     st
.text:00403CBD                 fstp    [esp+0BCh+var_BC] ; _TBYTE
.text:00403CC0                 xor     ebx, ebx
.text:00403CC2                 fstp    [esp+0BCh+var_9C]
.text:00403CC6                 call    sub_407740
.text:00403CCB                 fld     [esp+0BCh+var_9C]
.text:00403CCF                 mov     edi, edx
.text:00403CD1                 xor     ecx, ecx
.text:00403CD3                 mov     edx, [esp+0BCh+var_30]
.text:00403CDA                 mov     esi, eax
.text:00403CDC                 test    edx, edx
.text:00403CDE                 jnz     short loc_403D2D
.text:00403CE0                 push    edi
.text:00403CE1                 push    esi
.text:00403CE2                 fild    [esp+0C4h+var_C4]
.text:00403CE5                 add     esp, 8
.text:00403CE8                 test    edi, edi
.text:00403CEA                 js      short loc_403D25
.text:00403CEC
.text:00403CEC loc_403CEC:                             ; CODE XREF: sub_4036C0+66B↓j
.text:00403CEC                 fucompp
.text:00403CEE                 fnstsw  ax
.text:00403CF0                 sahf
.text:00403CF1                 jp      short loc_403CF5
.text:00403CF3                 jz      short loc_403CFC
.text:00403CF5
.text:00403CF5 loc_403CF5:                             ; CODE XREF: sub_4036C0+631↑j
.text:00403CF5                 mov     ecx, 1
.text:00403CFA                 xor     ebx, ebx
.text:00403CFC
.text:00403CFC loc_403CFC:                             ; CODE XREF: sub_4036C0+633↑j
.text:00403CFC                                         ; sub_4036C0+66F↓j
.text:00403CFC                 mov     edx, esi
.text:00403CFE                 add     edx, ecx
.text:00403D00                 mov     esi, edi
.text:00403D02                 adc     esi, ebx
.text:00403D04                 push    esi
.text:00403D05                 push    edx
.text:00403D06                 fild    [esp+0C4h+var_C4]
.text:00403D09                 add     esp, 8
.text:00403D0C                 test    esi, esi
.text:00403D0E                 js      short loc_403D1D
.text:00403D10
.text:00403D10 loc_403D10:                             ; CODE XREF: sub_4036C0+5EC↑j
.text:00403D10                                         ; sub_4036C0+5F9↑j ...
.text:00403D10                 fld     ds:tbyte_4036B0
.text:00403D16                 fdivp   st(1), st
.text:00403D18                 jmp     loc_403970
.text:00403D1D ; ---------------------------------------------------------------------------
.text:00403D1D
.text:00403D1D loc_403D1D:                             ; CODE XREF: sub_4036C0+64E↑j
.text:00403D1D                 fadd    ds:flt_403698
.text:00403D23                 jmp     short loc_403D10
.text:00403D25 ; ---------------------------------------------------------------------------
.text:00403D25
.text:00403D25 loc_403D25:                             ; CODE XREF: sub_4036C0+62A↑j
.text:00403D25                 fadd    ds:flt_403698
.text:00403D2B                 jmp     short loc_403CEC
.text:00403D2D ; ---------------------------------------------------------------------------
.text:00403D2D
.text:00403D2D loc_403D2D:                             ; CODE XREF: sub_4036C0+61E↑j
.text:00403D2D                 fstp    st
.text:00403D2F                 jmp     short loc_403CFC
.text:00403D31 ; ---------------------------------------------------------------------------
.text:00403D31
.text:00403D31 loc_403D31:                             ; CODE XREF: sub_4036C0+57A↑j
.text:00403D31                 fadd    ds:flt_403698
.text:00403D37                 jmp     loc_403C40
.text:00403D3C ; ---------------------------------------------------------------------------
.text:00403D3C
.text:00403D3C loc_403D3C:                             ; CODE XREF: sub_4036C0+54C↑j
.text:00403D3C                 fadd    ds:flt_403698
.text:00403D42                 jmp     loc_403C12
.text:00403D47 ; ---------------------------------------------------------------------------
.text:00403D47
.text:00403D47 loc_403D47:                             ; CODE XREF: sub_4036C0+216↑j
.text:00403D47                 fadd    ds:flt_403698
.text:00403D4D                 jmp     loc_4038DC
.text:00403D52 ; ---------------------------------------------------------------------------
.text:00403D52
.text:00403D52 loc_403D52:                             ; CODE XREF: sub_4036C0+206↑j
.text:00403D52                 fadd    ds:flt_403698
.text:00403D58                 jmp     loc_4038CC
.text:00403D5D ; ---------------------------------------------------------------------------
.text:00403D5D
.text:00403D5D loc_403D5D:                             ; CODE XREF: sub_4036C0+1F0↑j
.text:00403D5D                 fadd    ds:flt_403698
.text:00403D63                 jmp     loc_4038B6
.text:00403D68 ; ---------------------------------------------------------------------------
.text:00403D68
.text:00403D68 loc_403D68:                             ; CODE XREF: sub_4036C0+1CD↑j
.text:00403D68                 mov     [esp+0BCh+var_40], 0
.text:00403D70
.text:00403D70 loc_403D70:                             ; CODE XREF: sub_4036C0+B5E↓j
.text:00403D70                 xor     ebp, ebp
.text:00403D72
.text:00403D72 loc_403D72:                             ; CODE XREF: sub_4036C0+B4D↓j
.text:00403D72                                         ; sub_4036C0+B58↓j ...
.text:00403D72                 test    byte ptr [esp+0BCh+arg_C], 10h
.text:00403D7A                 jz      loc_403F27
.text:00403D80                 mov     [esp+0BCh+var_44], 0
.text:00403D88                 xor     edx, edx
.text:00403D8A                 mov     eax, [esp+0BCh+var_34]
.text:00403D91                 cmp     edx, [esp+0BCh+var_38]
.text:00403D98                 ja      loc_403F27
.text:00403D9E                 jb      short loc_403DAD
.text:00403DA0                 cmp     eax, [esp+0BCh+var_3C]
.text:00403DA7                 ja      loc_403F27
.text:00403DAD
.text:00403DAD loc_403DAD:                             ; CODE XREF: sub_4036C0+6DE↑j
.text:00403DAD                 mov     esi, eax
.text:00403DAF                 mov     edi, edx
.text:00403DB1
.text:00403DB1 loc_403DB1:                             ; CODE XREF: sub_4036C0+7AC↓j
.text:00403DB1                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00403DB5                 mov     ecx, [esp+0BCh+var_3C]
.text:00403DBC                 mov     eax, [esp+0BCh+var_38]
.text:00403DC3                 mov     [esp+0BCh+var_B0], edi
.text:00403DC7                 mov     dword ptr [esp+0BCh+var_BC], ecx
.text:00403DCA                 mov     dword ptr [esp+0BCh+var_BC+4], eax
.text:00403DCE                 call    sub_407490
.text:00403DD3                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00403DD7                 mov     edx, eax
.text:00403DD9                 mov     ebx, [esp+0BCh+var_40]
.text:00403DDD                 mov     [esp+0BCh+var_B0], edi
.text:00403DE1                 shl     edx, 2
.text:00403DE4                 mov     ecx, ebp
.text:00403DE6                 add     edx, eax
.text:00403DE8                 lea     eax, [ebx+edx*2]
.text:00403DEB                 xor     edx, edx
.text:00403DED                 div     [esp+0BCh+var_34]
.text:00403DF4                 sar     ecx, 1
.text:00403DF6                 lea     ebx, [ecx+edx*2]
.text:00403DF9                 mov     [esp+0BCh+var_80], eax
.text:00403DFD                 mov     ecx, [esp+0BCh+var_38]
.text:00403E04                 mov     edx, [esp+0BCh+var_3C]
.text:00403E0B                 mov     dword ptr [esp+0BCh+var_BC+4], ecx
.text:00403E0F                 mov     dword ptr [esp+0BCh+var_BC], edx
.text:00403E12                 call    sub_407610
.text:00403E17                 cmp     ebx, [esp+0BCh+var_34]
.text:00403E1E                 mov     [esp+0BCh+var_3C], eax
.text:00403E25                 mov     ecx, [esp+0BCh+var_80]
.text:00403E29                 mov     [esp+0BCh+var_38], edx
.text:00403E30                 mov     [esp+0BCh+var_40], ecx
.text:00403E34                 jnb     loc_4040E1
.text:00403E3A                 lea     edx, [ebp+ebx+0]
.text:00403E3E                 test    edx, edx
.text:00403E40                 setnz   bl
.text:00403E43                 movzx   ebp, bl
.text:00403E46
.text:00403E46 loc_403E46:                             ; CODE XREF: sub_4036C0+A33↓j
.text:00403E46                 inc     [esp+0BCh+var_44]
.text:00403E4A                 xor     ebx, ebx
.text:00403E4C                 mov     eax, [esp+0BCh+var_34]
.text:00403E53                 cmp     ebx, [esp+0BCh+var_38]
.text:00403E5A                 ja      short loc_403E72
.text:00403E5C                 jb      short loc_403E67
.text:00403E5E                 cmp     eax, [esp+0BCh+var_3C]
.text:00403E65                 ja      short loc_403E72
.text:00403E67
.text:00403E67 loc_403E67:                             ; CODE XREF: sub_4036C0+79C↑j
.text:00403E67                 cmp     [esp+0BCh+var_44], 8
.text:00403E6C                 jl      loc_403DB1
.text:00403E72
.text:00403E72 loc_403E72:                             ; CODE XREF: sub_4036C0+79A↑j
.text:00403E72                                         ; sub_4036C0+7A5↑j
.text:00403E72                 cmp     [esp+0BCh+var_38], 0
.text:00403E7A                 ja      loc_403F27
.text:00403E80                 cmp     [esp+0BCh+var_3C], 9
.text:00403E88                 ja      loc_403F27
.text:00403E8E                 cmp     [esp+0BCh+var_30], 1
.text:00403E96                 jz      loc_4040C9
.text:00403E9C                 mov     eax, [esp+0BCh+var_30]
.text:00403EA3                 test    eax, eax
.text:00403EA5                 jnz     short loc_403EBF
.text:00403EA7                 test    ebp, ebp
.text:00403EA9                 jle     short loc_403EBF
.text:00403EAB
.text:00403EAB loc_403EAB:                             ; CODE XREF: sub_4036C0+A16↓j
.text:00403EAB                 mov     edx, [esp+0BCh+var_80]
.text:00403EAF                 xor     ebp, ebp
.text:00403EB1                 inc     edx
.text:00403EB2                 mov     [esp+0BCh+var_40], edx
.text:00403EB6                 cmp     edx, 0Ah
.text:00403EB9                 jz      loc_4040AC
.text:00403EBF
.text:00403EBF loc_403EBF:                             ; CODE XREF: sub_4036C0+7E5↑j
.text:00403EBF                                         ; sub_4036C0+7E9↑j ...
.text:00403EBF                 cmp     [esp+0BCh+var_38], 0
.text:00403EC7                 ja      short loc_403F27
.text:00403EC9                 cmp     [esp+0BCh+var_3C], 9
.text:00403ED1                 ja      short loc_403F27
.text:00403ED3                 mov     ecx, [esp+0BCh+var_40]
.text:00403ED7                 test    ecx, ecx
.text:00403ED9                 jnz     short loc_403EE5
.text:00403EDB                 test    byte ptr [esp+0BCh+arg_C], 8
.text:00403EE3                 jnz     short loc_403F27
.text:00403EE5
.text:00403EE5 loc_403EE5:                             ; CODE XREF: sub_4036C0+819↑j
.text:00403EE5                 movzx   edx, byte ptr [esp+0BCh+var_40]
.text:00403EEA                 mov     ecx, [esp+0BCh+var_4C]
.text:00403EEE                 mov     edi, [esp+0BCh+var_4C]
.text:00403EF2                 dec     ecx
.text:00403EF3                 add     dl, 30h ; '0'
.text:00403EF6                 mov     [esp+0BCh+var_48], ecx
.text:00403EFA                 mov     [edi-1], dl
.text:00403EFD                 mov     esi, [esp+0BCh+Size]
.text:00403F01                 mov     ebx, [esp+0BCh+Src]
.text:00403F05                 sub     [esp+0BCh+var_48], esi
.text:00403F09                 mov     dword ptr [esp+0BCh+var_BC+8], esi ; Size
.text:00403F0D                 mov     dword ptr [esp+0BCh+var_BC+4], ebx ; Src
.text:00403F11                 mov     ebp, [esp+0BCh+var_48]
.text:00403F15                 mov     dword ptr [esp+0BCh+var_BC], ebp ; void *
.text:00403F18                 xor     ebp, ebp
.text:00403F1A                 call    memcpy
.text:00403F1F                 mov     [esp+0BCh+var_40], 0
.text:00403F27
.text:00403F27 loc_403F27:                             ; CODE XREF: sub_4036C0+6BA↑j
.text:00403F27                                         ; sub_4036C0+6D8↑j ...
.text:00403F27                 cmp     [esp+0BCh+var_30], 1
.text:00403F2F                 jz      loc_404071
.text:00403F35                 mov     eax, [esp+0BCh+var_30]
.text:00403F3C                 test    eax, eax
.text:00403F3E                 jnz     short loc_403FB1
.text:00403F40                 mov     edx, [esp+0BCh+var_40]
.text:00403F44                 add     edx, ebp
.text:00403F46                 test    edx, edx
.text:00403F48                 jle     short loc_403FB1
.text:00403F4A
.text:00403F4A loc_403F4A:                             ; CODE XREF: sub_4036C0:loc_40409A↓j
.text:00403F4A                 add     [esp+0BCh+var_3C], 1
.text:00403F52                 adc     [esp+0BCh+var_38], 0
.text:00403F5A                 test    byte ptr [esp+0BCh+arg_C], 10h
.text:00403F62                 jz      short loc_403FB1
.text:00403F64                 mov     esi, [esp+0BCh+var_34]
.text:00403F6B                 xor     ebx, ebx
.text:00403F6D                 mov     ebp, [esp+0BCh+var_38]
.text:00403F74                 mov     ecx, [esp+0BCh+var_3C]
.text:00403F7B                 xor     ebp, ebx
.text:00403F7D                 xor     esi, ecx
.text:00403F7F                 or      ebp, esi
.text:00403F81                 jnz     short loc_403FB1
.text:00403F83                 cmp     [esp+0BCh+var_44], 8
.text:00403F88                 jge     short loc_403FB1
.text:00403F8A                 inc     [esp+0BCh+var_44]
.text:00403F8E                 test    byte ptr [esp+0BCh+arg_C], 8
.text:00403F96                 jz      loc_404043
.text:00403F9C
.text:00403F9C loc_403F9C:                             ; CODE XREF: sub_4036C0+9AC↓j
.text:00403F9C                 mov     ecx, 1
.text:00403FA1                 xor     esi, esi
.text:00403FA3                 mov     [esp+0BCh+var_3C], ecx
.text:00403FAA                 mov     [esp+0BCh+var_38], esi
.text:00403FB1
.text:00403FB1 loc_403FB1:                             ; CODE XREF: sub_4036C0+87E↑j
.text:00403FB1                                         ; sub_4036C0+888↑j ...
.text:00403FB1                 mov     ebx, [esp+0BCh+var_48]
.text:00403FB5                 lea     esi, [esi+0]
.text:00403FB9                 lea     edi, [edi+0]
.text:00403FC0
.text:00403FC0 loc_403FC0:                             ; CODE XREF: sub_4036C0+97C↓j
.text:00403FC0                 mov     dword ptr [esp+0BCh+var_BC+8], 0Ah
.text:00403FC8                 mov     ecx, [esp+0BCh+var_38]
.text:00403FCF                 mov     ebp, [esp+0BCh+var_3C]
.text:00403FD6                 mov     [esp+0BCh+var_B0], 0
.text:00403FDE                 mov     dword ptr [esp+0BCh+var_BC+4], ecx
.text:00403FE2                 mov     dword ptr [esp+0BCh+var_BC], ebp
.text:00403FE5                 call    sub_407490
.text:00403FEA                 dec     [esp+0BCh+var_48]
.text:00403FEE                 add     al, 30h ; '0'
.text:00403FF0                 mov     esi, [esp+0BCh+var_48]
.text:00403FF4                 mov     [esi], al
.text:00403FF6                 mov     edx, [esp+0BCh+var_3C]
.text:00403FFD                 mov     dword ptr [esp+0BCh+var_BC+8], 0Ah
.text:00404005                 mov     edi, [esp+0BCh+var_38]
.text:0040400C                 mov     [esp+0BCh+var_B0], 0
.text:00404014                 mov     dword ptr [esp+0BCh+var_BC], edx
.text:00404017                 mov     dword ptr [esp+0BCh+var_BC+4], edi
.text:0040401B                 call    sub_407610
.text:00404020                 mov     [esp+0BCh+var_38], edx
.text:00404027                 mov     ebp, [esp+0BCh+var_38]
.text:0040402E                 mov     [esp+0BCh+var_3C], eax
.text:00404035                 or      ebp, [esp+0BCh+var_3C]
.text:0040403C                 jnz     short loc_403FC0
.text:0040403E                 jmp     loc_4039B2
.text:00404043 ; ---------------------------------------------------------------------------
.text:00404043
.text:00404043 loc_404043:                             ; CODE XREF: sub_4036C0+8D6↑j
.text:00404043                 dec     [esp+0BCh+var_48]
.text:00404047                 mov     edi, [esp+0BCh+var_48]
.text:0040404B                 mov     byte ptr [edi], 30h ; '0'
.text:0040404E                 mov     edx, [esp+0BCh+Size]
.text:00404052                 mov     eax, [esp+0BCh+Src]
.text:00404056                 mov     dword ptr [esp+0BCh+var_BC+8], edx ; Size
.text:0040405A                 sub     edi, edx
.text:0040405C                 mov     [esp+0BCh+var_48], edi
.text:00404060                 mov     dword ptr [esp+0BCh+var_BC+4], eax ; Src
.text:00404064                 mov     dword ptr [esp+0BCh+var_BC], edi ; void *
.text:00404067                 call    memcpy
.text:0040406C                 jmp     loc_403F9C
.text:00404071 ; ---------------------------------------------------------------------------
.text:00404071
.text:00404071 loc_404071:                             ; CODE XREF: sub_4036C0+86F↑j
.text:00404071                 mov     ebx, [esp+0BCh+var_3C]
.text:00404078                 mov     ecx, ebp
.text:0040407A                 mov     esi, ebp
.text:0040407C                 sar     esi, 1Fh
.text:0040407F                 xor     ebp, ebp
.text:00404081                 and     ebx, 1
.text:00404084                 add     ecx, ebx
.text:00404086                 adc     esi, ebp
.text:00404088                 cmp     esi, 0
.text:0040408B                 ja      short loc_404092
.text:0040408D                 cmp     ecx, 0
.text:00404090                 jbe     short loc_4040A5
.text:00404092
.text:00404092 loc_404092:                             ; CODE XREF: sub_4036C0+9CB↑j
.text:00404092                 mov     edi, [esp+0BCh+var_40]
.text:00404096                 inc     edi
.text:00404097                 cmp     edi, 5
.text:0040409A
.text:0040409A loc_40409A:                             ; CODE XREF: sub_4036C0+9EA↓j
.text:0040409A                 jg      loc_403F4A
.text:004040A0                 jmp     loc_403FB1
.text:004040A5 ; ---------------------------------------------------------------------------
.text:004040A5
.text:004040A5 loc_4040A5:                             ; CODE XREF: sub_4036C0+9D0↑j
.text:004040A5                 cmp     [esp+0BCh+var_40], 5
.text:004040AA                 jmp     short loc_40409A
.text:004040AC ; ---------------------------------------------------------------------------
.text:004040AC
.text:004040AC loc_4040AC:                             ; CODE XREF: sub_4036C0+7F9↑j
.text:004040AC                 add     [esp+0BCh+var_3C], 1
.text:004040B4                 mov     [esp+0BCh+var_40], 0
.text:004040BC                 adc     [esp+0BCh+var_38], 0
.text:004040C4                 jmp     loc_403EBF
.text:004040C9 ; ---------------------------------------------------------------------------
.text:004040C9
.text:004040C9 loc_4040C9:                             ; CODE XREF: sub_4036C0+7D6↑j
.text:004040C9                 mov     edi, [esp+0BCh+var_80]
.text:004040CD                 and     edi, 1
.text:004040D0                 lea     esi, [edi+ebp]
.text:004040D3                 cmp     esi, 2
.text:004040D6                 jg      loc_403EAB
.text:004040DC                 jmp     loc_403EBF
.text:004040E1 ; ---------------------------------------------------------------------------
.text:004040E1
.text:004040E1 loc_4040E1:                             ; CODE XREF: sub_4036C0+774↑j
.text:004040E1                 lea     edx, [ebp+ebx+0]
.text:004040E5                 cmp     [esp+0BCh+var_34], edx
.text:004040EC                 sbb     ecx, ecx
.text:004040EE                 not     ecx
.text:004040F0                 lea     ebp, [ecx+3]
.text:004040F3                 jmp     loc_403E46
.text:004040F8 ; ---------------------------------------------------------------------------
.text:004040F8
.text:004040F8 loc_4040F8:                             ; CODE XREF: sub_4036C0+F9↑j
.text:004040F8                                         ; sub_4036C0+108↑j
.text:004040F8                 mov     eax, edi
.text:004040FA                 or      eax, esi
.text:004040FC                 jz      loc_4038A0
.text:00404102                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00404106                 mov     edx, dword ptr [esp+0BCh+var_2C]
.text:0040410D                 mov     ecx, dword ptr [esp+0BCh+var_2C+4]
.text:00404114                 mov     [esp+0BCh+var_B0], edi
.text:00404118                 mov     dword ptr [esp+0BCh+var_BC], edx
.text:0040411B                 mov     dword ptr [esp+0BCh+var_BC+4], ecx
.text:0040411F                 call    sub_407490
.text:00404124                 mov     ebx, edx
.text:00404126                 or      ebx, eax
.text:00404128                 jnz     loc_4038A0
.text:0040412E                 mov     [esp+0BCh+var_B0], edi
.text:00404132                 mov     ebp, dword ptr [esp+0BCh+var_2C+4]
.text:00404139                 mov     edi, dword ptr [esp+0BCh+var_2C]
.text:00404140                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00404144                 mov     dword ptr [esp+0BCh+var_BC+4], ebp
.text:00404148                 mov     dword ptr [esp+0BCh+var_BC], edi
.text:0040414B                 call    sub_407610
.text:00404150                 mov     dword ptr [esp+0BCh+var_BC+8], eax
.text:00404154                 mov     ebx, dword ptr [esp+0BCh+var_24]
.text:0040415B                 mov     ebp, edx
.text:0040415D                 mov     [esp+0BCh+var_B0], edx
.text:00404161                 mov     esi, dword ptr [esp+0BCh+var_24+4]
.text:00404168                 mov     edi, eax
.text:0040416A                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:0040416D                 mov     dword ptr [esp+0BCh+var_BC+4], esi
.text:00404171                 call    sub_407490
.text:00404176                 mov     dword ptr [esp+0BCh+var_BC+8], edi
.text:0040417A                 mov     ebx, eax
.text:0040417C                 mov     esi, edx
.text:0040417E                 shld    esi, eax, 2
.text:00404182                 mov     [esp+0BCh+var_B0], ebp
.text:00404186                 shl     ebx, 2
.text:00404189                 add     ebx, eax
.text:0040418B                 adc     esi, edx
.text:0040418D                 shld    esi, ebx, 1
.text:00404191                 add     ebx, ebx
.text:00404193                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:00404196                 mov     dword ptr [esp+0BCh+var_BC+4], esi
.text:0040419A                 call    sub_407490
.text:0040419F                 shld    edx, eax, 1
.text:004041A3                 mov     ecx, dword ptr [esp+0BCh+var_24]
.text:004041AA                 add     eax, eax
.text:004041AC                 mov     [esp+0BCh+var_64], eax
.text:004041B0                 mov     eax, dword ptr [esp+0BCh+var_24+4]
.text:004041B7                 mov     dword ptr [esp+0BCh+var_BC], ecx
.text:004041BA                 mov     [esp+0BCh+var_60], edx
.text:004041BE                 mov     dword ptr [esp+0BCh+var_BC+8], edi
.text:004041C2                 mov     [esp+0BCh+var_B0], ebp
.text:004041C6                 mov     dword ptr [esp+0BCh+var_BC+4], eax
.text:004041CA                 call    sub_407610
.text:004041CF                 mov     [esp+0BCh+var_3C], eax
.text:004041D6                 mov     [esp+0BCh+var_38], edx
.text:004041DD                 mov     dword ptr [esp+0BCh+var_BC+8], edi
.text:004041E1                 mov     [esp+0BCh+var_B0], ebp
.text:004041E5                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:004041E8                 mov     dword ptr [esp+0BCh+var_BC+4], esi
.text:004041EC                 call    sub_407610
.text:004041F1                 cmp     [esp+0BCh+var_60], ebp
.text:004041F5                 mov     [esp+0BCh+var_40], eax
.text:004041F9                 ja      short loc_404223
.text:004041FB                 jb      short loc_404203
.text:004041FD                 cmp     [esp+0BCh+var_64], edi
.text:00404201                 jnb     short loc_404223
.text:00404203
.text:00404203 loc_404203:                             ; CODE XREF: sub_4036C0+B3B↑j
.text:00404203                 cmp     [esp+0BCh+var_60], 0
.text:00404208                 mov     ebp, 1
.text:0040420D                 ja      loc_403D72
.text:00404213                 cmp     [esp+0BCh+var_64], 0
.text:00404218                 ja      loc_403D72
.text:0040421E                 jmp     loc_403D70
.text:00404223 ; ---------------------------------------------------------------------------
.text:00404223
.text:00404223 loc_404223:                             ; CODE XREF: sub_4036C0+B39↑j
.text:00404223                                         ; sub_4036C0+B41↑j
.text:00404223                 cmp     ebp, [esp+0BCh+var_60]
.text:00404227                 ja      short loc_40423B
.text:00404229                 jb      short loc_404231
.text:0040422B                 cmp     edi, [esp+0BCh+var_64]
.text:0040422F                 jnb     short loc_40423B
.text:00404231
.text:00404231 loc_404231:                             ; CODE XREF: sub_4036C0+B69↑j
.text:00404231                 mov     ebp, 3
.text:00404236                 jmp     loc_403D72
.text:0040423B ; ---------------------------------------------------------------------------
.text:0040423B
.text:0040423B loc_40423B:                             ; CODE XREF: sub_4036C0+B67↑j
.text:0040423B                                         ; sub_4036C0+B6F↑j
.text:0040423B                 mov     ebp, 2
.text:00404240                 jmp     loc_403D72
.text:00404240 sub_4036C0      endp
.text:00404240
.text:00404240 ; ---------------------------------------------------------------------------
.text:00404245 aHumanReadable  db 'human-readable',0   ; DATA XREF: .text:off_404258↓o
.text:00404254 aSi             db 'si',0               ; DATA XREF: .text:0040425C↓o
.text:00404257                 align 4
.text:00404258 off_404258      dd offset aHumanReadable
.text:00404258                                         ; DATA XREF: sub_4044E0+3A↓o
.text:00404258                                         ; "human-readable"
.text:0040425C                 dd offset aSi           ; "si"
.text:00404260                 dd 0
.text:00404264 unk_404264      db 0B0h ; °             ; DATA XREF: sub_4044E0+32↓o
.text:00404264                                         ; sub_4044E0+54↓r
.text:00404265                 align 4
.text:00404268                 db 90h
.text:00404269                 align 4
.text:0040426C aBlockSize      db 'block size',0       ; DATA XREF: .text:loc_404352↓o
.text:0040426C                                         ; .text:loc_4043A4↓o ...
.text:00404277 aSSTooLarge     db '%s `%s',27h,' too large',0
.text:00404277                                         ; DATA XREF: .text:00404363↓o
.text:00404289                 align 20h
.text:004042A0 aInvalidCharact db 'invalid character following %s in `%s',27h,0
.text:004042A0                                         ; DATA XREF: .text:004043B5↓o
.text:004042C7 aInvalidSS      db 'invalid %s `%s',27h,0
.text:004042C7                                         ; DATA XREF: .text:004043D6↓o
.text:004042D7 ; const char aPosixlyCorrect[]
.text:004042D7 aPosixlyCorrect db 'POSIXLY_CORRECT',0  ; DATA XREF: .text:loc_4043E0↓o
.text:004042D7                                         ; sub_4044E0+11A↓o
.text:004042E7                 align 10h
.text:004042F0                 sub     esp, 2Ch
.text:004042F3                 movzx   edx, byte ptr [esp+34h]
.text:004042F8                 mov     [esp+20h], ebx
.text:004042FC                 mov     ebx, [esp+38h]
.text:00404300                 mov     [esp+24h], esi
.text:00404304                 mov     esi, [esp+30h]
.text:00404308                 mov     [esp+1Bh], dl
.text:0040430C                 lea     edx, [esp+1Ch]
.text:00404310                 mov     [esp+28h], edi
.text:00404314                 mov     [esp+8], edx
.text:00404318                 mov     [esp+4], ebx
.text:0040431C                 mov     [esp], esi
.text:0040431F                 call    sub_4044E0
.text:00404324                 mov     edx, [ebx+4]
.text:00404327                 mov     ecx, eax
.text:00404329                 mov     eax, [ebx]
.text:0040432B                 mov     edi, edx
.text:0040432D                 or      edi, eax
.text:0040432F                 jz      loc_4043E0
.text:00404335
.text:00404335 loc_404335:                             ; CODE XREF: .text:00404408↓j
.text:00404335                 test    ecx, ecx
.text:00404337                 jz      short loc_404390
.text:00404339                 cmp     byte ptr [esp+1Bh], 0
.text:0040433E                 jz      short loc_404390
.text:00404340                 cmp     ecx, 3
.text:00404343                 ja      short loc_4043C0
.text:00404345                 cmp     ecx, 2
.text:00404348                 jnb     short loc_4043A4
.text:0040434A                 dec     ecx
.text:0040434B                 jz      short loc_404352
.text:0040434D
.text:0040434D loc_40434D:                             ; CODE XREF: .text:004043C3↓j
.text:0040434D                 call    abort
.text:00404352 ; ---------------------------------------------------------------------------
.text:00404352
.text:00404352 loc_404352:                             ; CODE XREF: .text:0040434B↑j
.text:00404352                 mov     dword ptr [esp], offset aBlockSize ; "block size"
.text:00404359                 call    ds:libintl_gettext
.text:0040435F                 mov     [esp+10h], esi
.text:00404363                 mov     dword ptr [esp+8], offset aSSTooLarge ; "%s `%s' too large"
.text:0040436B
.text:0040436B loc_40436B:                             ; CODE XREF: .text:004043BD↓j
.text:0040436B                                         ; .text:004043DE↓j
.text:0040436B                 mov     [esp+0Ch], eax
.text:0040436F                 mov     dword ptr [esp+4], 0
.text:00404377                 mov     ecx, Code
.text:0040437D                 mov     [esp], ecx
.text:00404380                 call    sub_407070
.text:00404385                 lea     esi, [esi+0]
.text:00404389                 lea     edi, [edi+0]
.text:00404390
.text:00404390 loc_404390:                             ; CODE XREF: .text:00404337↑j
.text:00404390                                         ; .text:0040433E↑j
.text:00404390                 mov     eax, [esp+1Ch]
.text:00404394                 mov     ebx, [esp+20h]
.text:00404398                 mov     esi, [esp+24h]
.text:0040439C                 mov     edi, [esp+28h]
.text:004043A0                 add     esp, 2Ch
.text:004043A3                 retn
.text:004043A4 ; ---------------------------------------------------------------------------
.text:004043A4
.text:004043A4 loc_4043A4:                             ; CODE XREF: .text:00404348↑j
.text:004043A4                 mov     dword ptr [esp], offset aBlockSize ; "block size"
.text:004043AB                 call    ds:libintl_gettext
.text:004043B1                 mov     [esp+10h], esi
.text:004043B5                 mov     dword ptr [esp+8], offset aInvalidCharact ; "invalid character following %s in `%s'"
.text:004043BD                 jmp     short loc_40436B
.text:004043BD ; ---------------------------------------------------------------------------
.text:004043BF                 align 10h
.text:004043C0
.text:004043C0 loc_4043C0:                             ; CODE XREF: .text:00404343↑j
.text:004043C0                 cmp     ecx, 4
.text:004043C3                 jnz     short loc_40434D
.text:004043C5                 mov     dword ptr [esp], offset aBlockSize ; "block size"
.text:004043CC                 call    ds:libintl_gettext
.text:004043D2                 mov     [esp+10h], esi
.text:004043D6                 mov     dword ptr [esp+8], offset aInvalidSS ; "invalid %s `%s'"
.text:004043DE                 jmp     short loc_40436B
.text:004043E0 ; ---------------------------------------------------------------------------
.text:004043E0
.text:004043E0 loc_4043E0:                             ; CODE XREF: .text:0040432F↑j
.text:004043E0                 mov     dword ptr [esp], offset aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:004043E7                 call    getenv
.text:004043EC                 xor     ecx, ecx
.text:004043EE                 mov     edx, 200h
.text:004043F3                 test    eax, eax
.text:004043F5                 jnz     short loc_4043FE
.text:004043F7                 mov     edx, 400h
.text:004043FC                 xor     ecx, ecx
.text:004043FE
.text:004043FE loc_4043FE:                             ; CODE XREF: .text:004043F5↑j
.text:004043FE                 mov     [ebx+4], ecx
.text:00404401                 mov     ecx, 4
.text:00404406                 mov     [ebx], edx
.text:00404408                 jmp     loc_404335
.text:00404408 ; ---------------------------------------------------------------------------
.text:0040440D                 align 10h
.text:00404410
.text:00404410 ; =============== S U B R O U T I N E =======================================
.text:00404410
.text:00404410
.text:00404410 ; int __cdecl sub_404410(void *, size_t, int, char *)
.text:00404410 sub_404410      proc near               ; CODE XREF: sub_4036C0+492↑p
.text:00404410
.text:00404410 Str             = dword ptr -6Ch
.text:00404410 Src             = dword ptr -68h
.text:00404410 Size            = dword ptr -64h
.text:00404410 var_50          = dword ptr -50h
.text:00404410 var_4C          = byte ptr -4Ch
.text:00404410 arg_0           = dword ptr  4
.text:00404410 arg_4           = dword ptr  8
.text:00404410 arg_8           = dword ptr  0Ch
.text:00404410 arg_C           = dword ptr  10h
.text:00404410
.text:00404410                 push    ebp
.text:00404411                 push    edi
.text:00404412                 mov     edi, 0FFFFFFFFh
.text:00404417                 push    esi
.text:00404418                 push    ebx
.text:00404419                 sub     esp, 5Ch
.text:0040441C                 mov     edx, [esp+6Ch+arg_C]
.text:00404420                 mov     ebx, [esp+6Ch+arg_0]
.text:00404424                 mov     ebp, [esp+6Ch+arg_8]
.text:00404428                 mov     [esp+6Ch+Str], edx ; Str
.text:0040442B                 call    strlen
.text:00404430                 mov     [esp+6Ch+var_50], eax
.text:00404434                 mov     esi, [esp+6Ch+arg_4]
.text:00404438                 lea     edx, [esp+6Ch+var_4C]
.text:0040443C                 mov     [esp+6Ch+Src], ebx ; Src
.text:00404440                 mov     [esp+6Ch+Str], edx ; void *
.text:00404443                 add     ebx, esi
.text:00404445                 mov     [esp+6Ch+Size], esi ; Size
.text:00404449                 lea     esi, [esi+0]
.text:00404450
.text:00404450 loc_404450:                             ; CODE XREF: sub_404410+94↓j
.text:00404450                 call    memcpy
.text:00404455                 movzx   eax, byte ptr [ebp+0]
.text:00404459                 test    al, al
.text:0040445B                 jz      short loc_404467
.text:0040445D                 cmp     al, 7Eh ; '~'
.text:0040445F                 mov     edi, esi
.text:00404461                 ja      short loc_404466
.text:00404463                 movzx   edi, al
.text:00404466
.text:00404466 loc_404466:                             ; CODE XREF: sub_404410+51↑j
.text:00404466                 inc     ebp
.text:00404467
.text:00404467 loc_404467:                             ; CODE XREF: sub_404410+4B↑j
.text:00404467                 cmp     esi, edi
.text:00404469                 jnb     short loc_40446D
.text:0040446B                 mov     edi, esi
.text:0040446D
.text:0040446D loc_40446D:                             ; CODE XREF: sub_404410+59↑j
.text:0040446D                 mov     [esp+6Ch+Size], edi ; Size
.text:00404471                 sub     esi, edi
.text:00404473                 lea     ecx, [esp+6Ch+var_4C]
.text:00404477                 add     ecx, esi
.text:00404479                 sub     ebx, edi
.text:0040447B                 mov     [esp+6Ch+Src], ecx ; Src
.text:0040447F                 mov     [esp+6Ch+Str], ebx ; void *
.text:00404482                 call    memcpy
.text:00404487                 test    esi, esi
.text:00404489                 jz      short loc_4044A6
.text:0040448B                 mov     edx, [esp+6Ch+var_50]
.text:0040448F                 mov     ecx, [esp+6Ch+var_50]
.text:00404493                 sub     ebx, edx
.text:00404495                 mov     [esp+6Ch+Size], ecx
.text:00404499                 mov     edx, [esp+6Ch+arg_C]
.text:0040449D                 mov     [esp+6Ch+Str], ebx
.text:004044A0                 mov     [esp+6Ch+Src], edx
.text:004044A4                 jmp     short loc_404450
.text:004044A6 ; ---------------------------------------------------------------------------
.text:004044A6
.text:004044A6 loc_4044A6:                             ; CODE XREF: sub_404410+79↑j
.text:004044A6                 add     esp, 5Ch
.text:004044A9                 mov     eax, ebx
.text:004044AB                 pop     ebx
.text:004044AC                 pop     esi
.text:004044AD                 pop     edi
.text:004044AE                 pop     ebp
.text:004044AF                 retn
.text:004044AF sub_404410      endp
.text:004044AF
.text:004044AF ; ---------------------------------------------------------------------------
.text:004044B0 ; const char Str[]
.text:004044B0 Str             db 'eEgGkKmMpPtTyYzZ0',0
.text:004044B0                                         ; DATA XREF: sub_4044E0:loc_404560↓o
.text:004044C2 ; const char aBlockSize_0[]
.text:004044C2 aBlockSize_0    db 'BLOCK_SIZE',0       ; DATA XREF: sub_4044E0:loc_4045CE↓o
.text:004044CD ; const char aBlocksize[]
.text:004044CD aBlocksize      db 'BLOCKSIZE',0        ; DATA XREF: sub_4044E0+104↓o
.text:004044D7                 align 10h
.text:004044E0
.text:004044E0 ; =============== S U B R O U T I N E =======================================
.text:004044E0
.text:004044E0
.text:004044E0 ; int __cdecl sub_4044E0(char *, int, int)
.text:004044E0 sub_4044E0      proc near               ; CODE XREF: .text:0040431F↑p
.text:004044E0
.text:004044E0 VarName         = dword ptr -2Ch
.text:004044E0 var_28          = dword ptr -28h
.text:004044E0 var_24          = dword ptr -24h
.text:004044E0 var_20          = dword ptr -20h
.text:004044E0 Str             = dword ptr -1Ch
.text:004044E0 var_10          = dword ptr -10h
.text:004044E0 var_C           = dword ptr -0Ch
.text:004044E0 var_8           = dword ptr -8
.text:004044E0 var_4           = dword ptr -4
.text:004044E0 arg_0           = dword ptr  4
.text:004044E0 arg_4           = dword ptr  8
.text:004044E0 arg_8           = dword ptr  0Ch
.text:004044E0
.text:004044E0                 sub     esp, 2Ch
.text:004044E3                 mov     [esp+2Ch+var_C], ebx
.text:004044E7                 mov     ebx, [esp+2Ch+arg_0]
.text:004044EB                 mov     [esp+2Ch+var_8], esi
.text:004044EF                 xor     esi, esi
.text:004044F1                 test    ebx, ebx
.text:004044F3                 mov     [esp+2Ch+var_4], edi
.text:004044F7                 mov     edi, [esp+2Ch+arg_4]
.text:004044FB                 jz      loc_4045CE
.text:00404501
.text:00404501 loc_404501:                             ; CODE XREF: sub_4044E0+FE↓j
.text:00404501                                         ; sub_4044E0+114↓j
.text:00404501                 cmp     byte ptr [ebx], 27h ; '''
.text:00404504                 jz      loc_4045C3
.text:0040450A
.text:0040450A loc_40450A:                             ; CODE XREF: sub_4044E0+E9↓j
.text:0040450A                 mov     [esp+2Ch+var_20], 4 ; int
.text:00404512                 mov     [esp+2Ch+var_24], offset unk_404264 ; int
.text:0040451A                 mov     [esp+2Ch+var_28], offset off_404258 ; int
.text:00404522                 mov     [esp+2Ch+VarName], ebx ; char *
.text:00404525                 call    sub_4066E0
.text:0040452A                 test    eax, eax
.text:0040452C                 js      short loc_404560
.text:0040452E                 mov     dword ptr [edi], 1
.text:00404534                 mov     ecx, dword ptr ds:unk_404264[eax*4]
.text:0040453B                 mov     dword ptr [edi+4], 0
.text:00404542                 or      esi, ecx
.text:00404544
.text:00404544 loc_404544:                             ; CODE XREF: sub_4044E0+B9↓j
.text:00404544                                         ; sub_4044E0+D3↓j ...
.text:00404544                 mov     ebx, [esp+2Ch+arg_8]
.text:00404548                 xor     eax, eax
.text:0040454A                 mov     [ebx], esi
.text:0040454C
.text:0040454C loc_40454C:                             ; CODE XREF: sub_4044E0+A6↓j
.text:0040454C                 mov     ebx, [esp+2Ch+var_C]
.text:00404550                 mov     esi, [esp+2Ch+var_8]
.text:00404554                 mov     edi, [esp+2Ch+var_4]
.text:00404558                 add     esp, 2Ch
.text:0040455B                 retn
.text:0040455B ; ---------------------------------------------------------------------------
.text:0040455C                 align 10h
.text:00404560
.text:00404560 loc_404560:                             ; CODE XREF: sub_4044E0+4C↑j
.text:00404560                 mov     [esp+2Ch+Str], offset Str ; "eEgGkKmMpPtTyYzZ0"
.text:00404568                 lea     edx, [esp+2Ch+var_10]
.text:0040456C                 mov     [esp+2Ch+var_20], edi ; int
.text:00404570                 mov     [esp+2Ch+var_24], 0 ; int
.text:00404578                 mov     [esp+2Ch+var_28], edx ; int
.text:0040457C                 mov     [esp+2Ch+VarName], ebx ; int
.text:0040457F                 call    sub_405A50
.text:00404584                 test    eax, eax
.text:00404586                 jnz     short loc_40454C
.text:00404588                 nop
.text:00404589                 lea     esi, [esi+0]
.text:00404590
.text:00404590 loc_404590:                             ; CODE XREF: sub_4044E0+C2↓j
.text:00404590                 movzx   ecx, byte ptr [ebx]
.text:00404593                 sub     cl, 30h ; '0'
.text:00404596                 cmp     cl, 9
.text:00404599                 jbe     short loc_404544
.text:0040459B                 cmp     ebx, [esp+2Ch+var_10]
.text:0040459F                 jz      short loc_4045A4
.text:004045A1                 inc     ebx
.text:004045A2                 jmp     short loc_404590
.text:004045A4 ; ---------------------------------------------------------------------------
.text:004045A4
.text:004045A4 loc_4045A4:                             ; CODE XREF: sub_4044E0+BF↑j
.text:004045A4                 or      esi, 80h
.text:004045AA                 cmp     byte ptr [ebx-1], 42h ; 'B'
.text:004045AE                 jz      short loc_4045B5
.text:004045B0
.text:004045B0 loc_4045B0:                             ; CODE XREF: sub_4044E0+E1↓j
.text:004045B0                 or      esi, 20h
.text:004045B3                 jmp     short loc_404544
.text:004045B5 ; ---------------------------------------------------------------------------
.text:004045B5
.text:004045B5 loc_4045B5:                             ; CODE XREF: sub_4044E0+CE↑j
.text:004045B5                 or      esi, 100h
.text:004045BB                 cmp     byte ptr [ebx-2], 69h ; 'i'
.text:004045BF                 jnz     short loc_404544
.text:004045C1                 jmp     short loc_4045B0
.text:004045C3 ; ---------------------------------------------------------------------------
.text:004045C3
.text:004045C3 loc_4045C3:                             ; CODE XREF: sub_4044E0+24↑j
.text:004045C3                 mov     esi, 4
.text:004045C8                 inc     ebx
.text:004045C9                 jmp     loc_40450A
.text:004045CE ; ---------------------------------------------------------------------------
.text:004045CE
.text:004045CE loc_4045CE:                             ; CODE XREF: sub_4044E0+1B↑j
.text:004045CE                 mov     [esp+2Ch+VarName], offset aBlockSize_0 ; "BLOCK_SIZE"
.text:004045D5                 call    getenv
.text:004045DA                 test    eax, eax
.text:004045DC                 mov     ebx, eax
.text:004045DE                 jnz     loc_404501
.text:004045E4                 mov     [esp+2Ch+VarName], offset aBlocksize ; "BLOCKSIZE"
.text:004045EB                 call    getenv
.text:004045F0                 test    eax, eax
.text:004045F2                 mov     ebx, eax
.text:004045F4                 jnz     loc_404501
.text:004045FA                 mov     [esp+2Ch+VarName], offset aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:00404601                 call    getenv
.text:00404606                 xor     ecx, ecx
.text:00404608                 mov     edx, 200h
.text:0040460D                 test    eax, eax
.text:0040460F                 jnz     short loc_404618
.text:00404611                 mov     edx, 400h
.text:00404616                 xor     ecx, ecx
.text:00404618
.text:00404618 loc_404618:                             ; CODE XREF: sub_4044E0+12F↑j
.text:00404618                 mov     [edi], edx
.text:0040461A                 mov     [edi+4], ecx
.text:0040461D                 jmp     loc_404544
.text:0040461D sub_4044E0      endp
.text:0040461D
.text:0040461D ; ---------------------------------------------------------------------------
.text:00404622                 align 20h
.text:00404640 aLiteral        db 'literal',0          ; DATA XREF: .text:00404680↓o
.text:00404648 aShell          db 'shell',0            ; DATA XREF: .text:00404684↓o
.text:0040464E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00404688↓o
.text:0040465B aC              db 'c',0                ; DATA XREF: .text:0040468C↓o
.text:0040465D aEscape         db 'escape',0           ; DATA XREF: .text:00404690↓o
.text:00404664 aLocale         db 'locale',0           ; DATA XREF: .text:00404694↓o
.text:0040466B aClocale        db 'clocale',0          ; DATA XREF: .text:00404698↓o
.text:00404673                 align 10h
.text:00404680                 dd offset aLiteral      ; "literal"
.text:00404684                 dd offset aShell        ; "shell"
.text:00404688                 dd offset aShellAlways  ; "shell-always"
.text:0040468C                 dd offset aC            ; "c"
.text:00404690                 dd offset aEscape       ; "escape"
.text:00404694                 dd offset aLocale       ; "locale"
.text:00404698                 dd offset aClocale      ; "clocale"
.text:0040469C                 dd 2 dup(0)
.text:004046A4                 dd 1, 2, 3, 4, 5, 6
.text:004046BC asc_4046BC:                             ; DATA XREF: sub_4046D0+7E↓o
.text:004046BC                                         ; sub_4046D0+A39↓o ...
.text:004046BC                 text "UTF-16LE", '"',27h,'`'
.text:004046C2                 align 10h
.text:004046D0
.text:004046D0 ; =============== S U B R O U T I N E =======================================
.text:004046D0
.text:004046D0
.text:004046D0 ; int __cdecl sub_4046D0(int, int, char *Str, int, int, int)
.text:004046D0 sub_4046D0      proc near               ; CODE XREF: sub_4046D0+43A↓p
.text:004046D0                                         ; .text:00405293↓p ...
.text:004046D0
.text:004046D0 C               = dword ptr -4Ch
.text:004046D0 Type            = dword ptr -48h
.text:004046D0 SizeInBytes     = dword ptr -44h
.text:004046D0 State           = dword ptr -40h
.text:004046D0 var_3C          = dword ptr -3Ch
.text:004046D0 var_38          = dword ptr -38h
.text:004046D0 var_34          = dword ptr -34h
.text:004046D0 var_30          = dword ptr -30h
.text:004046D0 var_29          = byte ptr -29h
.text:004046D0 var_28          = dword ptr -28h
.text:004046D0 var_22          = byte ptr -22h
.text:004046D0 var_21          = byte ptr -21h
.text:004046D0 var_20          = dword ptr -20h
.text:004046D0 var_1C          = dword ptr -1Ch
.text:004046D0 var_18          = mbstate_t ptr -18h
.text:004046D0 arg_0           = dword ptr  4
.text:004046D0 arg_4           = dword ptr  8
.text:004046D0 Str             = dword ptr  0Ch
.text:004046D0 arg_C           = dword ptr  10h
.text:004046D0 arg_10          = dword ptr  14h
.text:004046D0 arg_14          = dword ptr  18h
.text:004046D0
.text:004046D0                 push    ebp
.text:004046D1                 push    edi
.text:004046D2                 push    esi
.text:004046D3                 push    ebx
.text:004046D4                 sub     esp, 3Ch
.text:004046D7                 mov     edx, ds:__mb_cur_max
.text:004046DD                 mov     [esp+4Ch+var_34], 0
.text:004046E5                 mov     [esp+4Ch+var_1C], 0
.text:004046ED                 cmp     dword ptr [edx], 1
.text:004046F0                 mov     [esp+4Ch+var_20], 0
.text:004046F8                 mov     [esp+4Ch+var_21], 0
.text:004046FD                 setz    [esp+4Ch+var_22]
.text:00404702                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00404707                 ja      short def_40470D ; jumptable 0040470D default case, cases 0,1
.text:00404709                 mov     edx, [esp+4Ch+arg_10]
.text:0040470D                 jmp     ds:jpt_40470D[edx*4] ; switch jump
.text:0040470D ; ---------------------------------------------------------------------------
.text:00404714 jpt_40470D      dd offset def_40470D    ; DATA XREF: sub_4046D0+3D↑r
.text:00404714                 dd offset def_40470D    ; jump table for switch statement
.text:00404714                 dd offset loc_405055
.text:00404714                 dd offset loc_404730
.text:00404714                 dd offset loc_40507B
.text:00404714                 dd offset loc_405085
.text:00404714                 dd offset loc_405085
.text:00404730 ; ---------------------------------------------------------------------------
.text:00404730
.text:00404730 loc_404730:                             ; CODE XREF: sub_4046D0+3D↑j
.text:00404730                                         ; DATA XREF: sub_4046D0:jpt_40470D↑o
.text:00404730                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040470D case 3
.text:00404734                 cmp     [esp+4Ch+var_34], eax
.text:00404738                 jnb     short loc_404741
.text:0040473A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040473E                 mov     byte ptr [ebx], 22h ; '"'
.text:00404741
.text:00404741 loc_404741:                             ; CODE XREF: sub_4046D0+68↑j
.text:00404741                 mov     [esp+4Ch+var_34], 1
.text:00404749                 mov     [esp+4Ch+var_21], 1
.text:0040474E                 mov     [esp+4Ch+var_1C], offset asc_4046BC ; "\"'`"
.text:00404756
.text:00404756 loc_404756:                             ; CODE XREF: sub_4046D0+9A6↓j
.text:00404756                 mov     [esp+4Ch+var_20], 1
.text:0040475E
.text:0040475E def_40470D:                             ; CODE XREF: sub_4046D0+37↑j
.text:0040475E                                         ; sub_4046D0+3D↑j ...
.text:0040475E                 xor     ebp, ebp        ; jumptable 0040470D default case, cases 0,1
.text:00404760
.text:00404760 loc_404760:                             ; CODE XREF: sub_4046D0+3DB↓j
.text:00404760                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404765                 jz      loc_405047
.text:0040476B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040476F
.text:0040476F loc_40476F:                             ; CODE XREF: sub_4046D0+980↓j
.text:0040476F                 jz      loc_404FDE
.text:00404775                 cmp     [esp+4Ch+var_21], 0
.text:0040477A                 jz      short loc_4047C0
.text:0040477C                 mov     esi, [esp+4Ch+var_20]
.text:00404780                 test    esi, esi
.text:00404782                 jz      short loc_4047C0
.text:00404784                 mov     ecx, [esp+4Ch+var_20]
.text:00404788                 lea     edi, [ecx+ebp]
.text:0040478B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040478F                 ja      short loc_4047C0
.text:00404791                 cld
.text:00404792                 mov     ebx, [esp+4Ch+Str]
.text:00404796                 mov     edi, [esp+4Ch+var_1C]
.text:0040479A                 add     ebx, ebp
.text:0040479C                 mov     esi, ebx
.text:0040479E                 cmp     ecx, ecx
.text:004047A0                 repe cmpsb
.text:004047A2                 jnz     short loc_4047C0
.text:004047A4                 mov     edx, [esp+4Ch+arg_4]
.text:004047A8                 cmp     [esp+4Ch+var_34], edx
.text:004047AC                 jnb     short loc_4047BA
.text:004047AE                 mov     ecx, [esp+4Ch+arg_0]
.text:004047B2                 mov     eax, [esp+4Ch+var_34]
.text:004047B6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004047BA
.text:004047BA loc_4047BA:                             ; CODE XREF: sub_4046D0+DC↑j
.text:004047BA                 inc     [esp+4Ch+var_34]
.text:004047BE                 mov     esi, esi
.text:004047C0
.text:004047C0 loc_4047C0:                             ; CODE XREF: sub_4046D0+AA↑j
.text:004047C0                                         ; sub_4046D0+B2↑j ...
.text:004047C0                 mov     edi, [esp+4Ch+Str]
.text:004047C4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004047C9                 movzx   eax, bl
.text:004047CC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004047CF                 ja      def_4047D5      ; jumptable 004047D5 default case, cases 1-6,14-31,64
.text:004047D5                 jmp     ds:jpt_4047D5[eax*4] ; switch jump
.text:004047D5 ; ---------------------------------------------------------------------------
.text:004047DC jpt_4047D5      dd offset loc_4049D8, offset def_4047D5, offset def_4047D5
.text:004047DC                                         ; DATA XREF: sub_4046D0+105↑r
.text:004047DC                 dd offset def_4047D5, offset def_4047D5, offset def_4047D5 ; jump table for switch statement
.text:004047DC                 dd offset def_4047D5, offset loc_404AB0, offset loc_404ACE
.text:004047DC                 dd offset loc_404AD2, offset loc_404B17, offset loc_404B1B
.text:004047DC                 dd offset loc_404B1F, offset loc_404B23, offset def_4047D5
.text:004047DC                 dd offset def_4047D5, offset def_4047D5, offset def_4047D5
.text:004047DC                 dd offset def_4047D5, offset def_4047D5, offset def_4047D5
.text:004047DC                 dd offset def_4047D5, offset def_4047D5, offset def_4047D5
.text:004047DC                 dd offset def_4047D5, offset def_4047D5, offset def_4047D5
.text:004047DC                 dd offset def_4047D5, offset def_4047D5, offset def_4047D5
.text:004047DC                 dd offset def_4047D5, offset def_4047D5, offset loc_404FA8
.text:004047DC                 dd offset loc_404FA8, offset loc_404FA8, offset loc_404FCA
.text:004047DC                 dd offset loc_404FA8, offset def_404BD2, offset loc_404FA8
.text:004047DC                 dd offset loc_404B27, offset loc_404FA8, offset loc_404FA8
.text:004047DC                 dd offset loc_404FA8, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset loc_404FA8
.text:004047DC                 dd offset loc_404FA8, offset loc_404FA8, offset loc_404FA8
.text:004047DC                 dd offset loc_404B8C, offset def_4047D5, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset loc_404FA8, offset loc_404FA1
.text:004047DC                 dd offset def_404BD2, offset loc_404FA8, offset def_404BD2
.text:004047DC                 dd offset loc_404FA8, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset def_404BD2, offset def_404BD2, offset def_404BD2
.text:004047DC                 dd offset loc_404FB8, offset loc_404FA8, offset loc_404FB8
.text:004047DC                 dd offset loc_404FCA
.text:004049D8 ; ---------------------------------------------------------------------------
.text:004049D8
.text:004049D8 loc_4049D8:                             ; CODE XREF: sub_4046D0+105↑j
.text:004049D8                                         ; DATA XREF: sub_4046D0:jpt_4047D5↑o
.text:004049D8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004047D5 case 0
.text:004049DD                 lea     eax, [ebp+1]
.text:004049E0                 jz      loc_404A90
.text:004049E6                 mov     esi, [esp+4Ch+arg_4]
.text:004049EA                 cmp     [esp+4Ch+var_34], esi
.text:004049EE                 jnb     short loc_4049FC
.text:004049F0                 mov     eax, [esp+4Ch+arg_0]
.text:004049F4                 mov     ebx, [esp+4Ch+var_34]
.text:004049F8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004049FC
.text:004049FC loc_4049FC:                             ; CODE XREF: sub_4046D0+31E↑j
.text:004049FC                 inc     [esp+4Ch+var_34]
.text:00404A00                 mov     edx, [esp+4Ch+arg_4]
.text:00404A04                 cmp     [esp+4Ch+var_34], edx
.text:00404A08                 jnb     short loc_404A16
.text:00404A0A                 mov     edi, [esp+4Ch+arg_0]
.text:00404A0E                 mov     ecx, [esp+4Ch+var_34]
.text:00404A12                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00404A16
.text:00404A16 loc_404A16:                             ; CODE XREF: sub_4046D0+338↑j
.text:00404A16                 inc     [esp+4Ch+var_34]
.text:00404A1A                 mov     esi, [esp+4Ch+arg_4]
.text:00404A1E                 cmp     [esp+4Ch+var_34], esi
.text:00404A22                 jnb     short loc_404A30
.text:00404A24                 mov     ebx, [esp+4Ch+arg_0]
.text:00404A28                 mov     eax, [esp+4Ch+var_34]
.text:00404A2C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00404A30
.text:00404A30 loc_404A30:                             ; CODE XREF: sub_4046D0+352↑j
.text:00404A30                 inc     [esp+4Ch+var_34]
.text:00404A34                 mov     bl, 30h ; '0'
.text:00404A36                 lea     esi, [esi+0]
.text:00404A39                 lea     edi, [edi+0]
.text:00404A40
.text:00404A40 def_404BD2:                             ; CODE XREF: sub_4046D0+105↑j
.text:00404A40                                         ; sub_4046D0+463↓j ...
.text:00404A40                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004047D5 cases 37,43-58,65-90,93,95,97-122
.text:00404A40                                         ; jumptable 00404BD2 default case, cases 34-38,42-44,46,48-59
.text:00404A45                 lea     eax, [ebp+1]
.text:00404A48                 jz      short loc_404A90
.text:00404A4A                 mov     cl, bl
.text:00404A4C                 mov     edi, [esp+4Ch+arg_14]
.text:00404A50                 mov     esi, 1
.text:00404A55                 shr     cl, 5
.text:00404A58                 movzx   edx, cl
.text:00404A5B                 mov     ecx, ebx
.text:00404A5D                 and     ecx, 1Fh
.text:00404A60                 shl     esi, cl
.text:00404A62                 test    [edi+edx*4+4], esi
.text:00404A66                 jz      short loc_404A82
.text:00404A68
.text:00404A68 loc_404A68:                             ; CODE XREF: sub_4046D0+3FC↓j
.text:00404A68                 mov     edx, [esp+4Ch+arg_4]
.text:00404A6C                 cmp     [esp+4Ch+var_34], edx
.text:00404A70                 jnb     short loc_404A7E
.text:00404A72                 mov     edi, [esp+4Ch+arg_0]
.text:00404A76                 mov     esi, [esp+4Ch+var_34]
.text:00404A7A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00404A7E
.text:00404A7E loc_404A7E:                             ; CODE XREF: sub_4046D0+3A0↑j
.text:00404A7E                 inc     [esp+4Ch+var_34]
.text:00404A82
.text:00404A82 loc_404A82:                             ; CODE XREF: sub_4046D0+396↑j
.text:00404A82                 lea     eax, [ebp+1]
.text:00404A85                 lea     esi, [esi+0]
.text:00404A89                 lea     edi, [edi+0]
.text:00404A90
.text:00404A90 loc_404A90:                             ; CODE XREF: sub_4046D0+310↑j
.text:00404A90                                         ; sub_4046D0+378↑j ...
.text:00404A90                 mov     ebp, [esp+4Ch+arg_4]
.text:00404A94                 cmp     [esp+4Ch+var_34], ebp
.text:00404A98                 jnb     short loc_404AA5
.text:00404A9A                 mov     edx, [esp+4Ch+arg_0]
.text:00404A9E                 mov     ecx, [esp+4Ch+var_34]
.text:00404AA2                 mov     [ecx+edx], bl
.text:00404AA5
.text:00404AA5 loc_404AA5:                             ; CODE XREF: sub_4046D0+3C8↑j
.text:00404AA5                 inc     [esp+4Ch+var_34]
.text:00404AA9                 mov     ebp, eax
.text:00404AAB                 jmp     loc_404760
.text:00404AB0 ; ---------------------------------------------------------------------------
.text:00404AB0
.text:00404AB0 loc_404AB0:                             ; CODE XREF: sub_4046D0+105↑j
.text:00404AB0                                         ; DATA XREF: sub_4046D0:jpt_4047D5↑o
.text:00404AB0                 mov     dl, 61h ; 'a'   ; jumptable 004047D5 case 7
.text:00404AB2                 lea     esi, [esi+0]
.text:00404AB9                 lea     edi, [edi+0]
.text:00404AC0
.text:00404AC0 loc_404AC0:                             ; CODE XREF: sub_4046D0+400↓j
.text:00404AC0                                         ; sub_4046D0+409↓j ...
.text:00404AC0                 cmp     [esp+4Ch+var_21], 0
.text:00404AC5                 lea     eax, [ebp+1]
.text:00404AC8                 jz      short loc_404A90
.text:00404ACA                 mov     bl, dl
.text:00404ACC                 jmp     short loc_404A68
.text:00404ACE ; ---------------------------------------------------------------------------
.text:00404ACE
.text:00404ACE loc_404ACE:                             ; CODE XREF: sub_4046D0+105↑j
.text:00404ACE                                         ; DATA XREF: sub_4046D0:jpt_4047D5↑o
.text:00404ACE                 mov     dl, 62h ; 'b'   ; jumptable 004047D5 case 8
.text:00404AD0                 jmp     short loc_404AC0
.text:00404AD2 ; ---------------------------------------------------------------------------
.text:00404AD2
.text:00404AD2 loc_404AD2:                             ; CODE XREF: sub_4046D0+105↑j
.text:00404AD2                                         ; DATA XREF: sub_4046D0:jpt_4047D5↑o
.text:00404AD2                 mov     dl, 74h ; 't'   ; jumptable 004047D5 case 9
.text:00404AD4
.text:00404AD4 loc_404AD4:                             ; CODE XREF: sub_4046D0+449↓j
.text:00404AD4                                         ; sub_4046D0+455↓j ...
.text:00404AD4                 cmp     [esp+4Ch+arg_10], 1
.text:00404AD9                 jnz     short loc_404AC0
.text:00404ADB
.text:00404ADB loc_404ADB:                             ; CODE XREF: sub_4046D0+45C↓j
.text:00404ADB                                         ; sub_4046D0+4C1↓j ...
.text:00404ADB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404EA2 cases 91,92,94,96,124
.text:00404AE3                 mov     eax, [esp+4Ch+arg_14]
.text:00404AE7                 mov     edx, [esp+4Ch+arg_C]
.text:00404AEB                 mov     ecx, [esp+4Ch+Str]
.text:00404AEF                 mov     ebx, [esp+4Ch+arg_4]
.text:00404AF3                 mov     [esp+4Ch+var_38], eax ; int
.text:00404AF7                 mov     ebp, [esp+4Ch+arg_0]
.text:00404AFB                 mov     [esp+4Ch+State], edx ; int
.text:00404AFF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00404B03                 mov     [esp+4Ch+Type], ebx ; int
.text:00404B07                 mov     [esp+4Ch+C], ebp ; int
.text:00404B0A                 call    sub_4046D0
.text:00404B0F
.text:00404B0F loc_404B0F:                             ; CODE XREF: sub_4046D0+972↓j
.text:00404B0F                 add     esp, 3Ch
.text:00404B12                 pop     ebx
.text:00404B13                 pop     esi
.text:00404B14                 pop     edi
.text:00404B15                 pop     ebp
.text:00404B16                 retn
.text:00404B17 ; ---------------------------------------------------------------------------
.text:00404B17
.text:00404B17 loc_404B17:                             ; CODE XREF: sub_4046D0+105↑j
.text:00404B17                                         ; DATA XREF: sub_4046D0:jpt_4047D5↑o
.text:00404B17                 mov     dl, 6Eh ; 'n'   ; jumptable 004047D5 case 10
.text:00404B19                 jmp     short loc_404AD4
.text:00404B1B ; ---------------------------------------------------------------------------
.text:00404B1B
.text:00404B1B loc_404B1B:                             ; CODE XREF: sub_4046D0+105↑j
.text:00404B1B                                         ; DATA XREF: sub_4046D0:jpt_4047D5↑o
.text:00404B1B                 mov     dl, 76h ; 'v'   ; jumptable 004047D5 case 11
.text:00404B1D                 jmp     short loc_404AC0
.text:00404B1F ; ---------------------------------------------------------------------------
.text:00404B1F
.text:00404B1F loc_404B1F:                             ; CODE XREF: sub_4046D0+105↑j
.text:00404B1F                                         ; DATA XREF: sub_4046D0:jpt_4047D5↑o
.text:00404B1F                 mov     dl, 66h ; 'f'   ; jumptable 004047D5 case 12
.text:00404B21                 jmp     short loc_404AC0
.text:00404B23 ; ---------------------------------------------------------------------------
.text:00404B23
.text:00404B23 loc_404B23:                             ; CODE XREF: sub_4046D0+105↑j
.text:00404B23                                         ; DATA XREF: sub_4046D0:jpt_4047D5↑o
.text:00404B23                 mov     dl, 72h ; 'r'   ; jumptable 004047D5 case 13
.text:00404B25                 jmp     short loc_404AD4
.text:00404B27 ; ---------------------------------------------------------------------------
.text:00404B27
.text:00404B27 loc_404B27:                             ; CODE XREF: sub_4046D0+105↑j
.text:00404B27                                         ; DATA XREF: sub_4046D0:jpt_4047D5↑o
.text:00404B27                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004047D5 case 39
.text:00404B2C                 jz      short loc_404ADB ; jumptable 00404EA2 cases 91,92,94,96,124
.text:00404B2E                 cmp     [esp+4Ch+arg_10], 2
.text:00404B33                 jnz     def_404BD2      ; jumptable 004047D5 cases 37,43-58,65-90,93,95,97-122
.text:00404B33                                         ; jumptable 00404BD2 default case, cases 34-38,42-44,46,48-59
.text:00404B39                 mov     edx, [esp+4Ch+arg_4]
.text:00404B3D                 cmp     [esp+4Ch+var_34], edx
.text:00404B41                 jnb     short loc_404B4F
.text:00404B43                 mov     ecx, [esp+4Ch+arg_0]
.text:00404B47                 mov     edi, [esp+4Ch+var_34]
.text:00404B4B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00404B4F
.text:00404B4F loc_404B4F:                             ; CODE XREF: sub_4046D0+471↑j
.text:00404B4F                 inc     [esp+4Ch+var_34]
.text:00404B53                 mov     eax, [esp+4Ch+arg_4]
.text:00404B57                 cmp     [esp+4Ch+var_34], eax
.text:00404B5B                 jnb     short loc_404B69
.text:00404B5D                 mov     esi, [esp+4Ch+arg_0]
.text:00404B61                 mov     edx, [esp+4Ch+var_34]
.text:00404B65                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00404B69
.text:00404B69 loc_404B69:                             ; CODE XREF: sub_4046D0+48B↑j
.text:00404B69                 inc     [esp+4Ch+var_34]
.text:00404B6D                 mov     edi, [esp+4Ch+arg_4]
.text:00404B71                 cmp     [esp+4Ch+var_34], edi
.text:00404B75                 jnb     short loc_404B83
.text:00404B77                 mov     ecx, [esp+4Ch+arg_0]
.text:00404B7B                 mov     eax, [esp+4Ch+var_34]
.text:00404B7F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00404B83
.text:00404B83 loc_404B83:                             ; CODE XREF: sub_4046D0+4A5↑j
.text:00404B83                                         ; sub_4046D0+5C4↓j ...
.text:00404B83                 inc     [esp+4Ch+var_34]
.text:00404B87                 jmp     def_404BD2      ; jumptable 004047D5 cases 37,43-58,65-90,93,95,97-122
.text:00404B87                                         ; jumptable 00404BD2 default case, cases 34-38,42-44,46,48-59
.text:00404B8C ; ---------------------------------------------------------------------------
.text:00404B8C
.text:00404B8C loc_404B8C:                             ; CODE XREF: sub_4046D0+105↑j
.text:00404B8C                                         ; DATA XREF: sub_4046D0:jpt_4047D5↑o
.text:00404B8C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004047D5 case 63
.text:00404B91                 jz      loc_404ADB      ; jumptable 00404EA2 cases 91,92,94,96,124
.text:00404B97                 cmp     [esp+4Ch+arg_10], 3
.text:00404B9C                 jnz     def_404BD2      ; jumptable 004047D5 cases 37,43-58,65-90,93,95,97-122
.text:00404B9C                                         ; jumptable 00404BD2 default case, cases 34-38,42-44,46,48-59
.text:00404BA2                 lea     edx, [ebp+2]
.text:00404BA5                 cmp     edx, [esp+4Ch+arg_C]
.text:00404BA9                 jnb     def_404BD2      ; jumptable 004047D5 cases 37,43-58,65-90,93,95,97-122
.text:00404BA9                                         ; jumptable 00404BD2 default case, cases 34-38,42-44,46,48-59
.text:00404BAF                 mov     esi, [esp+4Ch+Str]
.text:00404BB3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00404BB8                 jnz     def_404BD2      ; jumptable 004047D5 cases 37,43-58,65-90,93,95,97-122
.text:00404BB8                                         ; jumptable 00404BD2 default case, cases 34-38,42-44,46,48-59
.text:00404BBE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00404BC3                 movsx   eax, cl
.text:00404BC6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00404BC9                 cmp     eax, 1Dh
.text:00404BCC                 ja      def_404BD2      ; jumptable 004047D5 cases 37,43-58,65-90,93,95,97-122
.text:00404BCC                                         ; jumptable 00404BD2 default case, cases 34-38,42-44,46,48-59
.text:00404BD2                 jmp     ds:jpt_404BD2[eax*4] ; switch jump
.text:00404BD2 ; ---------------------------------------------------------------------------
.text:00404BD9                 align 4
.text:00404BDC jpt_404BD2      dd offset loc_404C54    ; DATA XREF: sub_4046D0+502↑r
.text:00404BDC                 dd offset def_404BD2    ; jump table for switch statement
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset loc_404C54
.text:00404BDC                 dd offset loc_404C54
.text:00404BDC                 dd offset loc_404C54
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset loc_404C54
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset loc_404C54
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset def_404BD2
.text:00404BDC                 dd offset loc_404C54
.text:00404BDC                 dd offset loc_404C54
.text:00404BDC                 dd offset loc_404C54
.text:00404C54 ; ---------------------------------------------------------------------------
.text:00404C54
.text:00404C54 loc_404C54:                             ; CODE XREF: sub_4046D0+502↑j
.text:00404C54                                         ; DATA XREF: sub_4046D0:jpt_404BD2↑o
.text:00404C54                 mov     ebp, edx        ; jumptable 00404BD2 cases 33,39-41,45,47,60-62
.text:00404C56                 mov     bl, cl
.text:00404C58                 mov     edx, [esp+4Ch+arg_4]
.text:00404C5C                 cmp     [esp+4Ch+var_34], edx
.text:00404C60                 jnb     short loc_404C6E
.text:00404C62                 mov     ecx, [esp+4Ch+arg_0]
.text:00404C66                 mov     edi, [esp+4Ch+var_34]
.text:00404C6A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00404C6E
.text:00404C6E loc_404C6E:                             ; CODE XREF: sub_4046D0+590↑j
.text:00404C6E                 inc     [esp+4Ch+var_34]
.text:00404C72                 mov     eax, [esp+4Ch+arg_4]
.text:00404C76                 cmp     [esp+4Ch+var_34], eax
.text:00404C7A                 jnb     short loc_404C88
.text:00404C7C                 mov     edx, [esp+4Ch+arg_0]
.text:00404C80                 mov     esi, [esp+4Ch+var_34]
.text:00404C84                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00404C88
.text:00404C88 loc_404C88:                             ; CODE XREF: sub_4046D0+5AA↑j
.text:00404C88                 inc     [esp+4Ch+var_34]
.text:00404C8C                 mov     edi, [esp+4Ch+arg_4]
.text:00404C90                 cmp     [esp+4Ch+var_34], edi
.text:00404C94                 jnb     loc_404B83
.text:00404C9A                 mov     eax, [esp+4Ch+arg_0]
.text:00404C9E                 mov     ecx, [esp+4Ch+var_34]
.text:00404CA2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00404CA6                 jmp     loc_404B83
.text:00404CA6 ; ---------------------------------------------------------------------------
.text:00404CAB                 align 10h
.text:00404CB0
.text:00404CB0 def_4047D5:                             ; CODE XREF: sub_4046D0+FF↑j
.text:00404CB0                                         ; sub_4046D0+105↑j
.text:00404CB0                                         ; DATA XREF: ...
.text:00404CB0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004047D5 default case, cases 1-6,14-31,64
.text:00404CB5                 jz      loc_404DE0
.text:00404CBB                 mov     [esp+4Ch+var_28], 1
.text:00404CC3                 mov     esi, ds:__mb_cur_max
.text:00404CC9                 movzx   edx, bl
.text:00404CCC                 cmp     dword ptr [esi], 1
.text:00404CCF                 jz      loc_404DC4
.text:00404CD5                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404CDD                 mov     [esp+4Ch+C], edx ; C
.text:00404CE0                 call    _isctype
.text:00404CE5
.text:00404CE5 loc_404CE5:                             ; CODE XREF: sub_4046D0+705↓j
.text:00404CE5                 test    eax, eax
.text:00404CE7                 setnz   [esp+4Ch+var_29]
.text:00404CEC
.text:00404CEC loc_404CEC:                             ; CODE XREF: sub_4046D0+7A5↓j
.text:00404CEC                 cmp     [esp+4Ch+var_21], 0
.text:00404CF1                 lea     eax, [ebp+1]
.text:00404CF4                 jz      loc_404A90
.text:00404CFA                 cmp     [esp+4Ch+var_29], 0
.text:00404CFF                 jnz     def_404BD2      ; jumptable 004047D5 cases 37,43-58,65-90,93,95,97-122
.text:00404CFF                                         ; jumptable 00404BD2 default case, cases 34-38,42-44,46,48-59
.text:00404D05
.text:00404D05 loc_404D05:                             ; CODE XREF: sub_4046D0+7AB↓j
.text:00404D05                 mov     eax, [esp+4Ch+var_28]
.text:00404D09                 lea     edx, [eax+ebp]
.text:00404D0C                 lea     esi, [esi+0]
.text:00404D10
.text:00404D10 loc_404D10:                             ; CODE XREF: sub_4046D0+6EF↓j
.text:00404D10                 cmp     [esp+4Ch+var_21], 0
.text:00404D15                 jz      short loc_404D90
.text:00404D17                 cmp     [esp+4Ch+var_29], 0
.text:00404D1C                 jnz     short loc_404D90
.text:00404D1E                 mov     edi, [esp+4Ch+arg_4]
.text:00404D22                 cmp     [esp+4Ch+var_34], edi
.text:00404D26                 jnb     short loc_404D34
.text:00404D28                 mov     esi, [esp+4Ch+arg_0]
.text:00404D2C                 mov     eax, [esp+4Ch+var_34]
.text:00404D30                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00404D34
.text:00404D34 loc_404D34:                             ; CODE XREF: sub_4046D0+656↑j
.text:00404D34                 inc     [esp+4Ch+var_34]
.text:00404D38                 mov     ecx, [esp+4Ch+arg_4]
.text:00404D3C                 cmp     [esp+4Ch+var_34], ecx
.text:00404D40                 jnb     short loc_404D55
.text:00404D42                 mov     cl, bl
.text:00404D44                 mov     esi, [esp+4Ch+arg_0]
.text:00404D48                 mov     edi, [esp+4Ch+var_34]
.text:00404D4C                 shr     cl, 6
.text:00404D4F                 add     cl, 30h ; '0'
.text:00404D52                 mov     [edi+esi], cl
.text:00404D55
.text:00404D55 loc_404D55:                             ; CODE XREF: sub_4046D0+670↑j
.text:00404D55                 inc     [esp+4Ch+var_34]
.text:00404D59                 mov     edi, [esp+4Ch+arg_4]
.text:00404D5D                 cmp     [esp+4Ch+var_34], edi
.text:00404D61                 jnb     short loc_404D79
.text:00404D63                 mov     cl, bl
.text:00404D65                 mov     esi, [esp+4Ch+arg_0]
.text:00404D69                 shr     cl, 3
.text:00404D6C                 mov     edi, [esp+4Ch+var_34]
.text:00404D70                 and     cl, 7
.text:00404D73                 add     cl, 30h ; '0'
.text:00404D76                 mov     [edi+esi], cl
.text:00404D79
.text:00404D79 loc_404D79:                             ; CODE XREF: sub_4046D0+691↑j
.text:00404D79                 inc     [esp+4Ch+var_34]
.text:00404D7D                 and     bl, 7
.text:00404D80                 add     bl, 30h ; '0'
.text:00404D83                 lea     esi, [esi+0]
.text:00404D89                 lea     edi, [edi+0]
.text:00404D90
.text:00404D90 loc_404D90:                             ; CODE XREF: sub_4046D0+645↑j
.text:00404D90                                         ; sub_4046D0+64C↑j
.text:00404D90                 lea     eax, [ebp+1]
.text:00404D93                 cmp     edx, eax
.text:00404D95                 jbe     loc_404A90
.text:00404D9B                 mov     ebp, [esp+4Ch+arg_4]
.text:00404D9F                 cmp     [esp+4Ch+var_34], ebp
.text:00404DA3                 jnb     short loc_404DB0
.text:00404DA5                 mov     ecx, [esp+4Ch+arg_0]
.text:00404DA9                 mov     edi, [esp+4Ch+var_34]
.text:00404DAD                 mov     [edi+ecx], bl
.text:00404DB0
.text:00404DB0 loc_404DB0:                             ; CODE XREF: sub_4046D0+6D3↑j
.text:00404DB0                 inc     [esp+4Ch+var_34]
.text:00404DB4                 mov     ebp, eax
.text:00404DB6                 mov     eax, [esp+4Ch+Str]
.text:00404DBA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00404DBF                 jmp     loc_404D10
.text:00404DC4 ; ---------------------------------------------------------------------------
.text:00404DC4
.text:00404DC4 loc_404DC4:                             ; CODE XREF: sub_4046D0+5FF↑j
.text:00404DC4                 mov     ecx, ds:_pctype
.text:00404DCA                 mov     edi, [ecx]
.text:00404DCC                 movzx   eax, word ptr [edi+edx*2]
.text:00404DD0                 and     eax, 157h
.text:00404DD5                 jmp     loc_404CE5
.text:00404DD5 ; ---------------------------------------------------------------------------
.text:00404DDA                 align 10h
.text:00404DE0
.text:00404DE0 loc_404DE0:                             ; CODE XREF: sub_4046D0+5E5↑j
.text:00404DE0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404DE5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00404DED                 mov     [esp+4Ch+var_28], 0
.text:00404DF5                 mov     [esp+4Ch+var_29], 1
.text:00404DFA                 jz      loc_404F8C
.text:00404E00
.text:00404E00 loc_404E00:                             ; CODE XREF: sub_4046D0+8CC↓j
.text:00404E00                 mov     ecx, [esp+4Ch+arg_C]
.text:00404E04                 lea     edx, [esp+4Ch+var_18]
.text:00404E08                 mov     edi, [esp+4Ch+Str]
.text:00404E0C                 mov     [esp+4Ch+State], edx ; State
.text:00404E10                 lea     esi, [esp+4Ch+var_18._State]
.text:00404E14                 sub     ecx, ebp
.text:00404E16                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00404E1A                 add     edi, ebp
.text:00404E1C                 mov     [esp+4Ch+var_30], edi
.text:00404E20                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00404E24                 mov     [esp+4Ch+C], esi ; DstCh
.text:00404E27                 call    mbrtowc
.text:00404E2C                 test    eax, eax
.text:00404E2E                 mov     edi, eax
.text:00404E30                 jz      short loc_404E70
.text:00404E32                 cmp     eax, 0FFFFFFFFh
.text:00404E35                 jz      loc_404F82
.text:00404E3B                 cmp     eax, 0FFFFFFFEh
.text:00404E3E                 jz      loc_404F42
.text:00404E44                 cmp     [esp+4Ch+arg_10], 1
.text:00404E49                 jz      short loc_404E80
.text:00404E4B
.text:00404E4B loc_404E4B:                             ; CODE XREF: sub_4046D0+7B9↓j
.text:00404E4B                                         ; sub_4046D0+86D↓j
.text:00404E4B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00404E50                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404E58                 mov     [esp+4Ch+C], ecx ; C
.text:00404E5B                 call    iswctype
.text:00404E60                 test    eax, eax
.text:00404E62                 jnz     short loc_404E69
.text:00404E64                 mov     [esp+4Ch+var_29], 0
.text:00404E69
.text:00404E69 loc_404E69:                             ; CODE XREF: sub_4046D0+792↑j
.text:00404E69                 mov     [esp+4Ch+var_28], edi
.text:00404E6D                 lea     esi, [esi+0]
.text:00404E70
.text:00404E70 loc_404E70:                             ; CODE XREF: sub_4046D0+760↑j
.text:00404E70                                         ; sub_4046D0+87B↓j ...
.text:00404E70                 cmp     [esp+4Ch+var_28], 1
.text:00404E75                 jbe     loc_404CEC
.text:00404E7B                 jmp     loc_404D05
.text:00404E80 ; ---------------------------------------------------------------------------
.text:00404E80
.text:00404E80 loc_404E80:                             ; CODE XREF: sub_4046D0+779↑j
.text:00404E80                 cmp     [esp+4Ch+arg_10], eax
.text:00404E84                 mov     edx, 1
.text:00404E89                 jnb     short loc_404E4B
.text:00404E8B
.text:00404E8B loc_404E8B:                             ; CODE XREF: sub_4046D0+867↓j
.text:00404E8B                 mov     ecx, [esp+4Ch+Str]
.text:00404E8F                 lea     esi, [edx+ebp]
.text:00404E92                 movsx   eax, byte ptr [esi+ecx]
.text:00404E96                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00404E99                 cmp     eax, 21h
.text:00404E9C                 ja      def_404EA2      ; jumptable 00404EA2 default case, cases 93,95,97-123
.text:00404EA2                 jmp     ds:jpt_404EA2[eax*4] ; switch jump
.text:00404EA2 ; ---------------------------------------------------------------------------
.text:00404EA9                 align 4
.text:00404EAC jpt_404EA2      dd offset loc_404ADB    ; DATA XREF: sub_4046D0+7D2↑r
.text:00404EAC                 dd offset loc_404ADB    ; jump table for switch statement
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset loc_404ADB
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset loc_404ADB
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset def_404EA2
.text:00404EAC                 dd offset loc_404ADB
.text:00404F34 ; ---------------------------------------------------------------------------
.text:00404F34
.text:00404F34 def_404EA2:                             ; CODE XREF: sub_4046D0+7CC↑j
.text:00404F34                                         ; sub_4046D0+7D2↑j
.text:00404F34                                         ; DATA XREF: ...
.text:00404F34                 inc     edx             ; jumptable 00404EA2 default case, cases 93,95,97-123
.text:00404F35                 cmp     edx, edi
.text:00404F37                 jb      loc_404E8B
.text:00404F3D                 jmp     loc_404E4B
.text:00404F42 ; ---------------------------------------------------------------------------
.text:00404F42
.text:00404F42 loc_404F42:                             ; CODE XREF: sub_4046D0+76E↑j
.text:00404F42                 cmp     ebp, [esp+4Ch+arg_C]
.text:00404F46                 mov     [esp+4Ch+var_29], 0
.text:00404F4B                 jnb     loc_404E70
.text:00404F51                 mov     eax, [esp+4Ch+var_30]
.text:00404F55                 cmp     byte ptr [eax], 0
.text:00404F58                 jz      loc_404E70
.text:00404F5E
.text:00404F5E loc_404F5E:                             ; CODE XREF: sub_4046D0+8AB↓j
.text:00404F5E                 inc     [esp+4Ch+var_28]
.text:00404F62                 mov     esi, [esp+4Ch+var_28]
.text:00404F66                 lea     eax, [esi+ebp]
.text:00404F69                 cmp     eax, [esp+4Ch+arg_C]
.text:00404F6D                 jnb     loc_404E70
.text:00404F73                 mov     edi, [esp+4Ch+Str]
.text:00404F77                 cmp     byte ptr [eax+edi], 0
.text:00404F7B                 jnz     short loc_404F5E
.text:00404F7D                 jmp     loc_404E70
.text:00404F82 ; ---------------------------------------------------------------------------
.text:00404F82
.text:00404F82 loc_404F82:                             ; CODE XREF: sub_4046D0+765↑j
.text:00404F82                 mov     [esp+4Ch+var_29], 0
.text:00404F87                 jmp     loc_404E70
.text:00404F8C ; ---------------------------------------------------------------------------
.text:00404F8C
.text:00404F8C loc_404F8C:                             ; CODE XREF: sub_4046D0+72A↑j
.text:00404F8C                 mov     edx, [esp+4Ch+Str]
.text:00404F90                 mov     [esp+4Ch+C], edx ; Str
.text:00404F93                 call    strlen
.text:00404F98                 mov     [esp+4Ch+arg_C], eax
.text:00404F9C                 jmp     loc_404E00
.text:00404FA1 ; ---------------------------------------------------------------------------
.text:00404FA1
.text:00404FA1 loc_404FA1:                             ; CODE XREF: sub_4046D0+105↑j
.text:00404FA1                                         ; DATA XREF: sub_4046D0:jpt_4047D5↑o
.text:00404FA1                 mov     dl, bl          ; jumptable 004047D5 case 92
.text:00404FA3                 jmp     loc_404AD4
.text:00404FA8 ; ---------------------------------------------------------------------------
.text:00404FA8
.text:00404FA8 loc_404FA8:                             ; CODE XREF: sub_4046D0+105↑j
.text:00404FA8                                         ; sub_4046D0+902↓j
.text:00404FA8                                         ; DATA XREF: ...
.text:00404FA8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004047D5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404FAD                 jnz     def_404BD2      ; jumptable 004047D5 cases 37,43-58,65-90,93,95,97-122
.text:00404FAD                                         ; jumptable 00404BD2 default case, cases 34-38,42-44,46,48-59
.text:00404FB3                 jmp     loc_404ADB      ; jumptable 00404EA2 cases 91,92,94,96,124
.text:00404FB8 ; ---------------------------------------------------------------------------
.text:00404FB8
.text:00404FB8 loc_404FB8:                             ; CODE XREF: sub_4046D0+105↑j
.text:00404FB8                                         ; DATA XREF: sub_4046D0:jpt_4047D5↑o
.text:00404FB8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004047D5 cases 123,125
.text:00404FBD                 jz      short loc_404FD4
.text:00404FBF                 cmp     [esp+4Ch+arg_C], 1
.text:00404FC4
.text:00404FC4 loc_404FC4:                             ; CODE XREF: sub_4046D0+90C↓j
.text:00404FC4                 jnz     def_404BD2      ; jumptable 004047D5 cases 37,43-58,65-90,93,95,97-122
.text:00404FC4                                         ; jumptable 00404BD2 default case, cases 34-38,42-44,46,48-59
.text:00404FCA
.text:00404FCA loc_404FCA:                             ; CODE XREF: sub_4046D0+105↑j
.text:00404FCA                                         ; DATA XREF: sub_4046D0:jpt_4047D5↑o
.text:00404FCA                 test    ebp, ebp        ; jumptable 004047D5 cases 35,126
.text:00404FCC                 jnz     def_404BD2      ; jumptable 004047D5 cases 37,43-58,65-90,93,95,97-122
.text:00404FCC                                         ; jumptable 00404BD2 default case, cases 34-38,42-44,46,48-59
.text:00404FD2                 jmp     short loc_404FA8 ; jumptable 004047D5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404FD4 ; ---------------------------------------------------------------------------
.text:00404FD4
.text:00404FD4 loc_404FD4:                             ; CODE XREF: sub_4046D0+8ED↑j
.text:00404FD4                 mov     esi, [esp+4Ch+Str]
.text:00404FD8                 cmp     byte ptr [esi+1], 0
.text:00404FDC                 jmp     short loc_404FC4
.text:00404FDE ; ---------------------------------------------------------------------------
.text:00404FDE
.text:00404FDE loc_404FDE:                             ; CODE XREF: sub_4046D0:loc_40476F↑j
.text:00404FDE                 test    ebp, ebp
.text:00404FE0                 jnz     short loc_404FED
.text:00404FE2                 cmp     [esp+4Ch+arg_10], 1
.text:00404FE7                 jz      loc_404ADB      ; jumptable 00404EA2 cases 91,92,94,96,124
.text:00404FED
.text:00404FED loc_404FED:                             ; CODE XREF: sub_4046D0+910↑j
.text:00404FED                 mov     esi, [esp+4Ch+var_1C]
.text:00404FF1                 test    esi, esi
.text:00404FF3                 jz      short loc_405028
.text:00404FF5                 mov     edi, [esp+4Ch+var_1C]
.text:00404FF9                 movzx   eax, byte ptr [edi]
.text:00404FFC                 test    al, al
.text:00404FFE                 jz      short loc_405028
.text:00405000
.text:00405000 loc_405000:                             ; CODE XREF: sub_4046D0+956↓j
.text:00405000                 mov     ebp, [esp+4Ch+arg_4]
.text:00405004                 cmp     [esp+4Ch+var_34], ebp
.text:00405008                 jnb     short loc_405015
.text:0040500A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040500E                 mov     ebx, [esp+4Ch+var_34]
.text:00405012                 mov     [ebx+ecx], al
.text:00405015
.text:00405015 loc_405015:                             ; CODE XREF: sub_4046D0+938↑j
.text:00405015                 inc     [esp+4Ch+var_1C]
.text:00405019                 inc     [esp+4Ch+var_34]
.text:0040501D                 mov     edx, [esp+4Ch+var_1C]
.text:00405021                 movzx   eax, byte ptr [edx]
.text:00405024                 test    al, al
.text:00405026                 jnz     short loc_405000
.text:00405028
.text:00405028 loc_405028:                             ; CODE XREF: sub_4046D0+923↑j
.text:00405028                                         ; sub_4046D0+92E↑j
.text:00405028                 mov     eax, [esp+4Ch+arg_4]
.text:0040502C                 cmp     [esp+4Ch+var_34], eax
.text:00405030                 jnb     short loc_40503E
.text:00405032                 mov     edi, [esp+4Ch+arg_0]
.text:00405036                 mov     esi, [esp+4Ch+var_34]
.text:0040503A                 mov     byte ptr [esi+edi], 0
.text:0040503E
.text:0040503E loc_40503E:                             ; CODE XREF: sub_4046D0+960↑j
.text:0040503E                 mov     eax, [esp+4Ch+var_34]
.text:00405042                 jmp     loc_404B0F
.text:00405047 ; ---------------------------------------------------------------------------
.text:00405047
.text:00405047 loc_405047:                             ; CODE XREF: sub_4046D0+95↑j
.text:00405047                 mov     ebx, [esp+4Ch+Str]
.text:0040504B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00405050                 jmp     loc_40476F
.text:00405055 ; ---------------------------------------------------------------------------
.text:00405055
.text:00405055 loc_405055:                             ; CODE XREF: sub_4046D0+3D↑j
.text:00405055                                         ; DATA XREF: sub_4046D0:jpt_40470D↑o
.text:00405055                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040470D case 2
.text:00405059                 cmp     [esp+4Ch+var_34], edx
.text:0040505D                 jnb     short loc_405066
.text:0040505F                 mov     ecx, [esp+4Ch+arg_0]
.text:00405063                 mov     byte ptr [ecx], 27h ; '''
.text:00405066
.text:00405066 loc_405066:                             ; CODE XREF: sub_4046D0+98D↑j
.text:00405066                 mov     [esp+4Ch+var_34], 1
.text:0040506E                 mov     [esp+4Ch+var_1C], 4046BEh
.text:00405076                 jmp     loc_404756
.text:0040507B ; ---------------------------------------------------------------------------
.text:0040507B
.text:0040507B loc_40507B:                             ; CODE XREF: sub_4046D0+3D↑j
.text:0040507B                                         ; DATA XREF: sub_4046D0:jpt_40470D↑o
.text:0040507B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040470D case 4
.text:00405080                 jmp     def_40470D      ; jumptable 0040470D default case, cases 0,1
.text:00405085 ; ---------------------------------------------------------------------------
.text:00405085
.text:00405085 loc_405085:                             ; CODE XREF: sub_4046D0+3D↑j
.text:00405085                                         ; DATA XREF: sub_4046D0:jpt_40470D↑o
.text:00405085                 mov     [esp+4Ch+C], 4046C0h ; jumptable 0040470D cases 5,6
.text:0040508C                 call    ds:libintl_gettext
.text:00405092                 cmp     eax, 4046C0h
.text:00405097                 mov     edi, eax
.text:00405099                 jz      short loc_405110
.text:0040509B
.text:0040509B loc_40509B:                             ; CODE XREF: sub_4046D0+A45↓j
.text:0040509B                                         ; sub_4046D0+A4C↓j
.text:0040509B                 mov     [esp+4Ch+C], 4046BEh
.text:004050A2                 call    ds:libintl_gettext
.text:004050A8                 cmp     eax, 4046BEh
.text:004050AD                 mov     edx, eax
.text:004050AF                 jz      short loc_405102
.text:004050B1
.text:004050B1 loc_4050B1:                             ; CODE XREF: sub_4046D0+A37↓j
.text:004050B1                                         ; sub_4046D0+A3E↓j
.text:004050B1                 mov     [esp+4Ch+var_1C], edi
.text:004050B5                 cmp     byte ptr [edi], 0
.text:004050B8                 jz      short loc_4050E8
.text:004050BA
.text:004050BA loc_4050BA:                             ; CODE XREF: sub_4046D0+A16↓j
.text:004050BA                 mov     ecx, [esp+4Ch+arg_4]
.text:004050BE                 cmp     [esp+4Ch+var_34], ecx
.text:004050C2                 jnb     short loc_4050D7
.text:004050C4                 mov     ebp, [esp+4Ch+var_1C]
.text:004050C8                 mov     edi, [esp+4Ch+arg_0]
.text:004050CC                 mov     esi, [esp+4Ch+var_34]
.text:004050D0                 movzx   ebx, byte ptr [ebp+0]
.text:004050D4                 mov     [esi+edi], bl
.text:004050D7
.text:004050D7 loc_4050D7:                             ; CODE XREF: sub_4046D0+9F2↑j
.text:004050D7                 inc     [esp+4Ch+var_1C]
.text:004050DB                 inc     [esp+4Ch+var_34]
.text:004050DF                 mov     eax, [esp+4Ch+var_1C]
.text:004050E3                 cmp     byte ptr [eax], 0
.text:004050E6                 jnz     short loc_4050BA
.text:004050E8
.text:004050E8 loc_4050E8:                             ; CODE XREF: sub_4046D0+9E8↑j
.text:004050E8                 mov     [esp+4Ch+var_21], 1
.text:004050ED                 mov     [esp+4Ch+var_1C], edx
.text:004050F1                 mov     [esp+4Ch+C], edx ; Str
.text:004050F4                 call    strlen
.text:004050F9                 mov     [esp+4Ch+var_20], eax
.text:004050FD                 jmp     def_40470D      ; jumptable 0040470D default case, cases 0,1
.text:00405102 ; ---------------------------------------------------------------------------
.text:00405102
.text:00405102 loc_405102:                             ; CODE XREF: sub_4046D0+9DF↑j
.text:00405102                 cmp     [esp+4Ch+arg_10], 6
.text:00405107                 jnz     short loc_4050B1
.text:00405109                 mov     edx, offset asc_4046BC ; "\"'`"
.text:0040510E                 jmp     short loc_4050B1
.text:00405110 ; ---------------------------------------------------------------------------
.text:00405110
.text:00405110 loc_405110:                             ; CODE XREF: sub_4046D0+9C9↑j
.text:00405110                 cmp     [esp+4Ch+arg_10], 6
.text:00405115                 jnz     short loc_40509B
.text:00405117                 mov     edi, offset asc_4046BC ; "\"'`"
.text:0040511C                 jmp     loc_40509B
.text:0040511C sub_4046D0      endp
.text:0040511C
.text:00405121 ; ---------------------------------------------------------------------------
.text:00405121                 jmp     short loc_405130
.text:00405121 ; ---------------------------------------------------------------------------
.text:00405123                 align 10h
.text:00405130
.text:00405130 loc_405130:                             ; CODE XREF: .text:00405121↑j
.text:00405130                 sub     esp, 0Ch
.text:00405133                 mov     [esp+4], ebx
.text:00405137                 mov     [esp+8], esi
.text:0040513B                 call    _errno
.text:00405140                 mov     esi, [eax]
.text:00405142                 mov     dword ptr [esp], 24h ; '$'
.text:00405149                 call    sub_406CD0
.text:0040514E                 mov     edx, [esp+10h]
.text:00405152                 mov     ebx, eax
.text:00405154                 test    edx, edx
.text:00405156                 jz      short loc_4051A1
.text:00405158
.text:00405158 loc_405158:                             ; CODE XREF: .text:004051A6↓j
.text:00405158                 mov     ecx, [edx]
.text:0040515A                 mov     [ebx], ecx
.text:0040515C                 mov     ecx, [edx+4]
.text:0040515F                 mov     [ebx+4], ecx
.text:00405162                 mov     ecx, [edx+8]
.text:00405165                 mov     [ebx+8], ecx
.text:00405168                 mov     ecx, [edx+0Ch]
.text:0040516B                 mov     [ebx+0Ch], ecx
.text:0040516E                 mov     ecx, [edx+10h]
.text:00405171                 mov     [ebx+10h], ecx
.text:00405174                 mov     ecx, [edx+14h]
.text:00405177                 mov     [ebx+14h], ecx
.text:0040517A                 mov     ecx, [edx+18h]
.text:0040517D                 mov     [ebx+18h], ecx
.text:00405180                 mov     ecx, [edx+1Ch]
.text:00405183                 mov     [ebx+1Ch], ecx
.text:00405186                 mov     ecx, [edx+20h]
.text:00405189                 mov     [ebx+20h], ecx
.text:0040518C                 call    _errno
.text:00405191                 mov     [eax], esi
.text:00405193                 mov     esi, [esp+8]
.text:00405197                 mov     eax, ebx
.text:00405199                 mov     ebx, [esp+4]
.text:0040519D                 add     esp, 0Ch
.text:004051A0                 retn
.text:004051A1 ; ---------------------------------------------------------------------------
.text:004051A1
.text:004051A1 loc_4051A1:                             ; CODE XREF: .text:00405156↑j
.text:004051A1                 mov     edx, offset dword_409150
.text:004051A6                 jmp     short loc_405158
.text:004051A6 ; ---------------------------------------------------------------------------
.text:004051A8                 align 10h
.text:004051B0                 mov     eax, [esp+4]
.text:004051B4                 test    eax, eax
.text:004051B6                 jz      short loc_4051C0
.text:004051B8
.text:004051B8 loc_4051B8:                             ; CODE XREF: .text:004051C5↓j
.text:004051B8                 mov     eax, [eax]
.text:004051BA                 retn
.text:004051BA ; ---------------------------------------------------------------------------
.text:004051BB                 align 10h
.text:004051C0
.text:004051C0 loc_4051C0:                             ; CODE XREF: .text:004051B6↑j
.text:004051C0                 mov     eax, offset dword_409150
.text:004051C5                 jmp     short loc_4051B8
.text:004051C5 ; ---------------------------------------------------------------------------
.text:004051C7                 align 10h
.text:004051D0                 mov     edx, [esp+4]
.text:004051D4                 test    edx, edx
.text:004051D6                 jz      short loc_4051E0
.text:004051D8
.text:004051D8 loc_4051D8:                             ; CODE XREF: .text:004051E5↓j
.text:004051D8                 mov     ecx, [esp+8]
.text:004051DC                 mov     [edx], ecx
.text:004051DE                 retn
.text:004051DE ; ---------------------------------------------------------------------------
.text:004051DF                 align 10h
.text:004051E0
.text:004051E0 loc_4051E0:                             ; CODE XREF: .text:004051D6↑j
.text:004051E0                 mov     edx, offset dword_409150
.text:004051E5                 jmp     short loc_4051D8
.text:004051E5 ; ---------------------------------------------------------------------------
.text:004051E7                 align 10h
.text:004051F0                 sub     esp, 8
.text:004051F3                 mov     eax, [esp+0Ch]
.text:004051F7                 movzx   ecx, byte ptr [esp+10h]
.text:004051FC                 mov     [esp], ebx
.text:004051FF                 mov     ebx, [esp+14h]
.text:00405203                 mov     [esp+4], esi
.text:00405207                 mov     dl, cl
.text:00405209                 shr     dl, 5
.text:0040520C                 movzx   edx, dl
.text:0040520F                 shl     edx, 2
.text:00405212                 test    eax, eax
.text:00405214                 lea     esi, [edx+eax+4]
.text:00405218                 jz      short loc_405240
.text:0040521A
.text:0040521A loc_40521A:                             ; CODE XREF: .text:00405246↓j
.text:0040521A                 mov     edx, [esi]
.text:0040521C                 and     ecx, 1Fh
.text:0040521F                 and     ebx, 1
.text:00405222                 mov     eax, edx
.text:00405224                 shr     eax, cl
.text:00405226                 and     eax, 1
.text:00405229                 xor     ebx, eax
.text:0040522B                 shl     ebx, cl
.text:0040522D                 xor     edx, ebx
.text:0040522F                 mov     [esi], edx
.text:00405231                 mov     ebx, [esp]
.text:00405234                 mov     esi, [esp+4]
.text:00405238                 add     esp, 8
.text:0040523B                 retn
.text:0040523B ; ---------------------------------------------------------------------------
.text:0040523C                 align 10h
.text:00405240
.text:00405240 loc_405240:                             ; CODE XREF: .text:00405218↑j
.text:00405240                 lea     esi, dword_409154[edx]
.text:00405246                 jmp     short loc_40521A
.text:00405246 ; ---------------------------------------------------------------------------
.text:00405248                 align 10h
.text:00405250                 sub     esp, 2Ch
.text:00405253                 mov     [esp+24h], ebx
.text:00405257                 mov     ebx, [esp+40h]
.text:0040525B                 mov     [esp+28h], esi
.text:0040525F                 test    ebx, ebx
.text:00405261                 jz      short loc_4052B0
.text:00405263
.text:00405263 loc_405263:                             ; CODE XREF: .text:004052B5↓j
.text:00405263                 call    _errno
.text:00405268                 mov     esi, [eax]
.text:0040526A                 mov     [esp+14h], ebx
.text:0040526E                 mov     edx, [ebx]
.text:00405270                 mov     ecx, [esp+38h]
.text:00405274                 mov     ebx, [esp+3Ch]
.text:00405278                 mov     [esp+10h], edx
.text:0040527C                 mov     edx, [esp+34h]
.text:00405280                 mov     [esp+0Ch], ebx
.text:00405284                 mov     [esp+8], ecx
.text:00405288                 mov     [esp+4], edx
.text:0040528C                 mov     edx, [esp+30h]
.text:00405290                 mov     [esp], edx
.text:00405293                 call    sub_4046D0
.text:00405298                 mov     ebx, eax
.text:0040529A                 call    _errno
.text:0040529F                 mov     [eax], esi
.text:004052A1                 mov     esi, [esp+28h]
.text:004052A5                 mov     eax, ebx
.text:004052A7                 mov     ebx, [esp+24h]
.text:004052AB                 add     esp, 2Ch
.text:004052AE                 retn
.text:004052AE ; ---------------------------------------------------------------------------
.text:004052AF                 align 10h
.text:004052B0
.text:004052B0 loc_4052B0:                             ; CODE XREF: .text:00405261↑j
.text:004052B0                 mov     ebx, offset dword_409150
.text:004052B5                 jmp     short loc_405263
.text:004052B5 ; ---------------------------------------------------------------------------
.text:004052B7                 align 10h
.text:004052C0                 push    ebp
.text:004052C1                 push    edi
.text:004052C2                 push    esi
.text:004052C3                 push    ebx
.text:004052C4                 sub     esp, 2Ch
.text:004052C7                 mov     ebp, [esp+48h]
.text:004052CB                 call    _errno
.text:004052D0                 mov     edx, [eax]
.text:004052D2                 test    ebp, ebp
.text:004052D4                 mov     ebx, ebp
.text:004052D6                 mov     [esp+28h], edx
.text:004052DA                 jz      loc_405390
.text:004052E0
.text:004052E0 loc_4052E0:                             ; CODE XREF: .text:00405395↓j
.text:004052E0                 call    _errno
.text:004052E5                 mov     edi, [eax]
.text:004052E7                 mov     esi, ebp
.text:004052E9                 mov     [esp+14h], ebx
.text:004052ED                 mov     ecx, [ebx]
.text:004052EF                 mov     dword ptr [esp], 0
.text:004052F6                 mov     edx, [esp+44h]
.text:004052FA                 mov     dword ptr [esp+4], 0
.text:00405302                 mov     eax, [esp+40h]
.text:00405306                 mov     [esp+10h], ecx
.text:0040530A                 mov     [esp+0Ch], edx
.text:0040530E                 mov     [esp+8], eax
.text:00405312                 call    sub_4046D0
.text:00405317                 mov     ebx, eax
.text:00405319                 call    _errno
.text:0040531E                 mov     [eax], edi
.text:00405320                 lea     edi, [ebx+1]
.text:00405323                 mov     [esp], edi
.text:00405326                 call    sub_406CD0
.text:0040532B                 mov     [esp+24h], eax
.text:0040532F                 test    ebp, ebp
.text:00405331                 jz      short loc_405382
.text:00405333
.text:00405333 loc_405333:                             ; CODE XREF: .text:00405387↓j
.text:00405333                 call    _errno
.text:00405338                 mov     ebp, [eax]
.text:0040533A                 mov     [esp+14h], esi
.text:0040533E                 mov     ecx, [esi]
.text:00405340                 mov     [esp+4], edi
.text:00405344                 mov     edx, [esp+44h]
.text:00405348                 mov     esi, [esp+24h]
.text:0040534C                 mov     [esp+10h], ecx
.text:00405350                 mov     eax, [esp+40h]
.text:00405354                 mov     [esp+0Ch], edx
.text:00405358                 mov     [esp], esi
.text:0040535B                 mov     [esp+8], eax
.text:0040535F                 call    sub_4046D0
.text:00405364                 call    _errno
.text:00405369                 mov     [eax], ebp
.text:0040536B                 call    _errno
.text:00405370                 mov     ebx, [esp+28h]
.text:00405374                 mov     [eax], ebx
.text:00405376                 mov     eax, [esp+24h]
.text:0040537A                 add     esp, 2Ch
.text:0040537D                 pop     ebx
.text:0040537E                 pop     esi
.text:0040537F                 pop     edi
.text:00405380                 pop     ebp
.text:00405381                 retn
.text:00405382 ; ---------------------------------------------------------------------------
.text:00405382
.text:00405382 loc_405382:                             ; CODE XREF: .text:00405331↑j
.text:00405382                 mov     esi, offset dword_409150
.text:00405387                 jmp     short loc_405333
.text:00405387 ; ---------------------------------------------------------------------------
.text:00405389                 align 10h
.text:00405390
.text:00405390 loc_405390:                             ; CODE XREF: .text:004052DA↑j
.text:00405390                 mov     ebx, offset dword_409150
.text:00405395                 jmp     loc_4052E0
.text:00405395 ; ---------------------------------------------------------------------------
.text:0040539A                 align 10h
.text:004053A0                 sub     esp, 1Ch
.text:004053A3                 mov     edx, [esp+24h]
.text:004053A7                 mov     dword ptr [esp+0Ch], offset dword_409150
.text:004053AF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004053B7                 mov     [esp+4], edx
.text:004053BB                 mov     edx, [esp+20h]
.text:004053BF                 mov     [esp], edx
.text:004053C2                 call    sub_405810
.text:004053C7                 add     esp, 1Ch
.text:004053CA                 retn
.text:004053CA ; ---------------------------------------------------------------------------
.text:004053CB                 align 10h
.text:004053D0                 sub     esp, 1Ch
.text:004053D3                 mov     edx, [esp+20h]
.text:004053D7                 mov     dword ptr [esp+0Ch], offset dword_409150
.text:004053DF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004053E7                 mov     [esp+4], edx
.text:004053EB                 mov     dword ptr [esp], 0
.text:004053F2                 call    sub_405810
.text:004053F7                 add     esp, 1Ch
.text:004053FA                 retn
.text:004053FA ; ---------------------------------------------------------------------------
.text:004053FB                 align 10h
.text:00405400
.text:00405400 ; =============== S U B R O U T I N E =======================================
.text:00405400
.text:00405400
.text:00405400 ; int __cdecl sub_405400(int, int, char *)
.text:00405400 sub_405400      proc near               ; CODE XREF: .text:0040684E↓p
.text:00405400                                         ; .text:00406A96↓p ...
.text:00405400
.text:00405400 var_BC          = dword ptr -0BCh
.text:00405400 var_B8          = dword ptr -0B8h
.text:00405400 var_B4          = dword ptr -0B4h
.text:00405400 var_B0          = dword ptr -0B0h
.text:00405400 var_AC          = dword ptr -0ACh
.text:00405400 var_A8          = dword ptr -0A8h
.text:00405400 var_A4          = dword ptr -0A4h
.text:00405400 var_A0          = dword ptr -0A0h
.text:00405400 var_9C          = dword ptr -9Ch
.text:00405400 var_98          = dword ptr -98h
.text:00405400 var_94          = dword ptr -94h
.text:00405400 var_90          = dword ptr -90h
.text:00405400 var_8C          = dword ptr -8Ch
.text:00405400 var_7C          = dword ptr -7Ch
.text:00405400 var_78          = dword ptr -78h
.text:00405400 var_74          = dword ptr -74h
.text:00405400 var_70          = dword ptr -70h
.text:00405400 var_6C          = dword ptr -6Ch
.text:00405400 var_68          = dword ptr -68h
.text:00405400 var_64          = dword ptr -64h
.text:00405400 var_60          = dword ptr -60h
.text:00405400 var_5C          = dword ptr -5Ch
.text:00405400 var_4C          = dword ptr -4Ch
.text:00405400 var_48          = dword ptr -48h
.text:00405400 var_44          = dword ptr -44h
.text:00405400 var_40          = dword ptr -40h
.text:00405400 var_3C          = dword ptr -3Ch
.text:00405400 var_38          = dword ptr -38h
.text:00405400 var_34          = dword ptr -34h
.text:00405400 var_30          = dword ptr -30h
.text:00405400 var_2C          = dword ptr -2Ch
.text:00405400 arg_0           = dword ptr  4
.text:00405400 arg_4           = dword ptr  8
.text:00405400 arg_8           = dword ptr  0Ch
.text:00405400
.text:00405400                 push    ebp
.text:00405401                 xor     eax, eax
.text:00405403                 mov     ecx, 8
.text:00405408                 push    edi
.text:00405409                 push    esi
.text:0040540A                 push    ebx
.text:0040540B                 sub     esp, 0ACh
.text:00405411                 mov     ebp, [esp+0BCh+arg_4]
.text:00405418                 cld
.text:00405419                 lea     edi, [esp+0BCh+var_A8]
.text:0040541D                 mov     [esp+0BCh+var_AC], ebp
.text:00405421                 rep stosd
.text:00405423                 mov     eax, [esp+0BCh+var_8C]
.text:00405427                 mov     edi, [esp+0BCh+var_AC]
.text:0040542B                 mov     esi, [esp+0BCh+var_A8]
.text:0040542F                 mov     [esp+0BCh+var_5C], eax
.text:00405433                 mov     ebp, [esp+0BCh+var_A4]
.text:00405437                 mov     eax, [esp+0BCh+var_AC]
.text:0040543B                 mov     [esp+0BCh+var_7C], edi
.text:0040543F                 mov     ecx, [esp+0BCh+var_94]
.text:00405443                 mov     edi, [esp+0BCh+var_A0]
.text:00405447                 mov     [esp+0BCh+var_78], esi
.text:0040544B                 mov     edx, [esp+0BCh+var_90]
.text:0040544F                 mov     esi, [esp+0BCh+var_9C]
.text:00405453                 mov     [esp+0BCh+var_4C], eax
.text:00405457                 mov     ebx, [esp+0BCh+var_98]
.text:0040545B                 mov     eax, [esp+0BCh+var_A8]
.text:0040545F                 mov     [esp+0BCh+var_74], ebp
.text:00405463                 mov     [esp+0BCh+var_70], edi
.text:00405467                 mov     [esp+0BCh+var_6C], esi
.text:0040546B                 mov     [esp+0BCh+var_68], ebx
.text:0040546F                 mov     [esp+0BCh+var_64], ecx
.text:00405473                 mov     [esp+0BCh+var_60], edx
.text:00405477                 mov     [esp+0BCh+var_48], eax
.text:0040547B                 mov     [esp+0BCh+var_44], ebp
.text:0040547F                 mov     [esp+0BCh+var_40], edi
.text:00405483                 mov     [esp+0BCh+var_3C], esi
.text:0040548A                 mov     [esp+0BCh+var_38], ebx
.text:00405491                 mov     ebx, [esp+0BCh+var_8C]
.text:00405495                 mov     [esp+0BCh+var_30], edx
.text:0040549C                 mov     edx, [esp+0BCh+arg_8]
.text:004054A3                 mov     [esp+0BCh+var_34], ecx
.text:004054AA                 lea     ecx, [esp+0BCh+var_4C]
.text:004054AE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:004054B2                 mov     edx, [esp+0BCh+arg_0]
.text:004054B9                 mov     [esp+0BCh+var_2C], ebx
.text:004054C0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:004054C4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:004054CC                 mov     [esp+0BCh+var_BC], edx ; int
.text:004054CF                 call    sub_405810
.text:004054D4                 add     esp, 0ACh
.text:004054DA                 pop     ebx
.text:004054DB                 pop     esi
.text:004054DC                 pop     edi
.text:004054DD                 pop     ebp
.text:004054DE                 retn
.text:004054DE sub_405400      endp
.text:004054DE
.text:004054DE ; ---------------------------------------------------------------------------
.text:004054DF                 align 10h
.text:004054E0                 push    ebp
.text:004054E1                 xor     eax, eax
.text:004054E3                 mov     ecx, 8
.text:004054E8                 push    edi
.text:004054E9                 push    esi
.text:004054EA                 push    ebx
.text:004054EB                 sub     esp, 0ACh
.text:004054F1                 mov     edx, [esp+0C4h]
.text:004054F8                 cld
.text:004054F9                 lea     edi, [esp+14h]
.text:004054FD                 mov     [esp+10h], edx
.text:00405501                 rep stosd
.text:00405503                 mov     eax, [esp+30h]
.text:00405507                 mov     ebp, [esp+10h]
.text:0040550B                 mov     edi, [esp+14h]
.text:0040550F                 mov     [esp+60h], eax
.text:00405513                 mov     esi, [esp+20h]
.text:00405517                 mov     eax, [esp+10h]
.text:0040551B                 mov     [esp+40h], ebp
.text:0040551F                 mov     ecx, [esp+28h]
.text:00405523                 mov     ebp, [esp+18h]
.text:00405527                 mov     [esp+44h], edi
.text:0040552B                 mov     edx, [esp+2Ch]
.text:0040552F                 mov     edi, [esp+1Ch]
.text:00405533                 mov     [esp+70h], eax
.text:00405537                 mov     ebx, [esp+24h]
.text:0040553B                 mov     eax, [esp+14h]
.text:0040553F                 mov     [esp+48h], ebp
.text:00405543                 mov     [esp+4Ch], edi
.text:00405547                 mov     [esp+50h], esi
.text:0040554B                 mov     [esp+54h], ebx
.text:0040554F                 mov     [esp+58h], ecx
.text:00405553                 mov     [esp+5Ch], edx
.text:00405557                 mov     [esp+74h], eax
.text:0040555B                 mov     [esp+78h], ebp
.text:0040555F                 mov     [esp+7Ch], edi
.text:00405563                 mov     [esp+80h], esi
.text:0040556A                 mov     [esp+84h], ebx
.text:00405571                 mov     esi, [esp+30h]
.text:00405575                 lea     ebx, [esp+70h]
.text:00405579                 mov     [esp+8Ch], edx
.text:00405580                 mov     edx, [esp+0C8h]
.text:00405587                 mov     [esp+88h], ecx
.text:0040558E                 mov     ecx, [esp+0CCh]
.text:00405595                 mov     [esp+4], edx
.text:00405599                 mov     edx, [esp+0C0h]
.text:004055A0                 mov     [esp+90h], esi
.text:004055A7                 mov     [esp+0Ch], ebx
.text:004055AB                 mov     [esp+8], ecx
.text:004055AF                 mov     [esp], edx
.text:004055B2                 call    sub_405810
.text:004055B7                 add     esp, 0ACh
.text:004055BD                 pop     ebx
.text:004055BE                 pop     esi
.text:004055BF                 pop     edi
.text:004055C0                 pop     ebp
.text:004055C1                 retn
.text:004055C1 ; ---------------------------------------------------------------------------
.text:004055C2                 align 10h
.text:004055D0                 push    ebp
.text:004055D1                 xor     eax, eax
.text:004055D3                 mov     ecx, 8
.text:004055D8                 push    edi
.text:004055D9                 push    esi
.text:004055DA                 push    ebx
.text:004055DB                 sub     esp, 0ACh
.text:004055E1                 mov     edi, [esp+0C0h]
.text:004055E8                 cld
.text:004055E9                 mov     [esp+10h], edi
.text:004055ED                 lea     edi, [esp+14h]
.text:004055F1                 rep stosd
.text:004055F3                 mov     eax, [esp+30h]
.text:004055F7                 mov     esi, [esp+10h]
.text:004055FB                 mov     ebx, [esp+14h]
.text:004055FF                 mov     [esp+60h], eax
.text:00405603                 mov     ebp, [esp+18h]
.text:00405607                 mov     eax, [esp+10h]
.text:0040560B                 mov     [esp+40h], esi
.text:0040560F                 mov     edi, [esp+1Ch]
.text:00405613                 mov     esi, [esp+20h]
.text:00405617                 mov     [esp+44h], ebx
.text:0040561B                 mov     ecx, [esp+28h]
.text:0040561F                 mov     edx, [esp+2Ch]
.text:00405623                 mov     [esp+70h], eax
.text:00405627                 mov     ebx, [esp+24h]
.text:0040562B                 mov     eax, [esp+14h]
.text:0040562F                 mov     [esp+48h], ebp
.text:00405633                 mov     [esp+4Ch], edi
.text:00405637                 mov     [esp+50h], esi
.text:0040563B                 mov     [esp+54h], ebx
.text:0040563F                 mov     [esp+58h], ecx
.text:00405643                 mov     [esp+5Ch], edx
.text:00405647                 mov     [esp+74h], eax
.text:0040564B                 mov     [esp+78h], ebp
.text:0040564F                 mov     [esp+7Ch], edi
.text:00405653                 mov     [esp+80h], esi
.text:0040565A                 mov     [esp+84h], ebx
.text:00405661                 mov     [esp+8Ch], edx
.text:00405668                 lea     edx, [esp+70h]
.text:0040566C                 mov     [esp+88h], ecx
.text:00405673                 mov     ecx, [esp+30h]
.text:00405677                 mov     [esp+0Ch], edx
.text:0040567B                 mov     edx, [esp+0C4h]
.text:00405682                 mov     [esp+90h], ecx
.text:00405689                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405691                 mov     [esp+4], edx
.text:00405695                 mov     dword ptr [esp], 0
.text:0040569C                 call    sub_405810
.text:004056A1                 add     esp, 0ACh
.text:004056A7                 pop     ebx
.text:004056A8                 pop     esi
.text:004056A9                 pop     edi
.text:004056AA                 pop     ebp
.text:004056AB                 retn
.text:004056AB ; ---------------------------------------------------------------------------
.text:004056AC                 align 10h
.text:004056B0                 push    edi
.text:004056B1                 push    esi
.text:004056B2                 push    ebx
.text:004056B3                 sub     esp, 40h
.text:004056B6                 mov     edx, ds:dword_40915C
.text:004056BC                 mov     ebx, ds:dword_409150
.text:004056C2                 mov     esi, ds:dword_409158
.text:004056C8                 mov     edi, ds:dword_409154
.text:004056CE                 mov     [esp+1Ch], edx
.text:004056D2                 mov     ecx, ds:dword_409160
.text:004056D8                 mov     edx, ds:dword_409170
.text:004056DE                 mov     [esp+10h], ebx
.text:004056E2                 mov     ebx, ds:dword_409164
.text:004056E8                 mov     [esp+30h], edx
.text:004056EC                 movzx   edx, byte ptr [esp+54h]
.text:004056F1                 mov     [esp+18h], esi
.text:004056F5                 mov     esi, ds:dword_40916C
.text:004056FB                 mov     [esp+14h], edi
.text:004056FF                 mov     edi, ds:dword_409168
.text:00405705                 mov     [esp+20h], ecx
.text:00405709                 mov     cl, dl
.text:0040570B                 shr     cl, 5
.text:0040570E                 mov     [esp+24h], ebx
.text:00405712                 movzx   ebx, cl
.text:00405715                 mov     [esp+2Ch], esi
.text:00405719                 lea     esi, [esp+10h]
.text:0040571D                 mov     [esp+28h], edi
.text:00405721                 lea     edi, [esi+ebx*4]
.text:00405724                 mov     ebx, edx
.text:00405726                 mov     edx, [edi+4]
.text:00405729                 and     ebx, 1Fh
.text:0040572C                 mov     cl, bl
.text:0040572E                 mov     eax, edx
.text:00405730                 shr     eax, cl
.text:00405732                 and     eax, 1
.text:00405735                 xor     eax, 1
.text:00405738                 shl     eax, cl
.text:0040573A                 xor     edx, eax
.text:0040573C                 mov     [edi+4], edx
.text:0040573F                 mov     edx, [esp+50h]
.text:00405743                 mov     [esp+0Ch], esi
.text:00405747                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040574F                 mov     [esp+4], edx
.text:00405753                 mov     dword ptr [esp], 0
.text:0040575A                 call    sub_405810
.text:0040575F                 add     esp, 40h
.text:00405762                 pop     ebx
.text:00405763                 pop     esi
.text:00405764                 pop     edi
.text:00405765                 retn
.text:00405765 ; ---------------------------------------------------------------------------
.text:00405766                 align 10h
.text:00405770
.text:00405770 ; =============== S U B R O U T I N E =======================================
.text:00405770
.text:00405770
.text:00405770 ; int __cdecl sub_405770(char *)
.text:00405770 sub_405770      proc near               ; CODE XREF: sub_403530+64↑p
.text:00405770
.text:00405770 var_4C          = dword ptr -4Ch
.text:00405770 var_48          = dword ptr -48h
.text:00405770 var_44          = dword ptr -44h
.text:00405770 var_40          = dword ptr -40h
.text:00405770 var_3C          = dword ptr -3Ch
.text:00405770 var_38          = dword ptr -38h
.text:00405770 var_34          = dword ptr -34h
.text:00405770 var_30          = dword ptr -30h
.text:00405770 var_2C          = dword ptr -2Ch
.text:00405770 var_28          = dword ptr -28h
.text:00405770 var_24          = dword ptr -24h
.text:00405770 var_20          = dword ptr -20h
.text:00405770 var_1C          = dword ptr -1Ch
.text:00405770 arg_0           = dword ptr  4
.text:00405770
.text:00405770                 sub     esp, 4Ch
.text:00405773                 mov     ecx, ds:dword_409150
.text:00405779                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00405781                 mov     edx, ds:dword_409154
.text:00405787                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040578E                 mov     [esp+4Ch+var_3C], ecx
.text:00405792                 mov     ecx, ds:dword_40915C
.text:00405798                 mov     [esp+4Ch+var_38], edx
.text:0040579C                 mov     edx, ds:dword_409158
.text:004057A2                 mov     [esp+4Ch+var_30], ecx
.text:004057A6                 mov     ecx, ds:dword_409160
.text:004057AC                 mov     eax, edx
.text:004057AE                 shr     eax, 1Ah
.text:004057B1                 and     eax, 1
.text:004057B4                 xor     eax, 1
.text:004057B7                 mov     [esp+4Ch+var_2C], ecx
.text:004057BB                 shl     eax, 1Ah
.text:004057BE                 mov     ecx, ds:dword_409164
.text:004057C4                 xor     edx, eax
.text:004057C6                 mov     [esp+4Ch+var_34], edx
.text:004057CA                 mov     edx, [esp+4Ch+arg_0]
.text:004057CE                 mov     [esp+4Ch+var_28], ecx
.text:004057D2                 mov     ecx, ds:dword_409168
.text:004057D8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004057DC                 mov     [esp+4Ch+var_24], ecx
.text:004057E0                 mov     ecx, ds:dword_40916C
.text:004057E6                 mov     [esp+4Ch+var_20], ecx
.text:004057EA                 mov     ecx, ds:dword_409170
.text:004057F0                 mov     [esp+4Ch+var_1C], ecx
.text:004057F4                 lea     ecx, [esp+4Ch+var_3C]
.text:004057F8                 mov     [esp+4Ch+var_40], ecx ; int
.text:004057FC                 call    sub_405810
.text:00405801                 add     esp, 4Ch
.text:00405804                 retn
.text:00405804 sub_405770      endp
.text:00405804
.text:00405804 ; ---------------------------------------------------------------------------
.text:00405805                 align 10h
.text:00405810
.text:00405810 ; =============== S U B R O U T I N E =======================================
.text:00405810
.text:00405810
.text:00405810 ; int __cdecl sub_405810(int, char *, int, int)
.text:00405810 sub_405810      proc near               ; CODE XREF: .text:004053C2↑p
.text:00405810                                         ; .text:004053F2↑p ...
.text:00405810
.text:00405810 Block           = dword ptr -2Ch
.text:00405810 var_28          = dword ptr -28h
.text:00405810 Str             = dword ptr -24h
.text:00405810 var_20          = dword ptr -20h
.text:00405810 var_1C          = dword ptr -1Ch
.text:00405810 var_18          = dword ptr -18h
.text:00405810 var_14          = dword ptr -14h
.text:00405810 arg_0           = dword ptr  4
.text:00405810 arg_4           = dword ptr  8
.text:00405810 arg_8           = dword ptr  0Ch
.text:00405810 arg_C           = dword ptr  10h
.text:00405810
.text:00405810                 push    ebp
.text:00405811                 push    edi
.text:00405812                 push    esi
.text:00405813                 push    ebx
.text:00405814                 sub     esp, 1Ch
.text:00405817                 call    _errno
.text:0040581C                 mov     edx, [eax]
.text:0040581E                 mov     eax, [esp+2Ch+arg_0]
.text:00405822                 mov     [esp+2Ch+var_14], edx
.text:00405826                 test    eax, eax
.text:00405828                 js      loc_4059CA
.text:0040582E                 mov     eax, [esp+2Ch+arg_0]
.text:00405832                 cmp     dword_408040, eax
.text:00405838                 ja      short loc_4058B0
.text:0040583A                 mov     esi, eax
.text:0040583C                 inc     esi
.text:0040583D                 cmp     esi, 1FFFFFFFh
.text:00405843                 ja      loc_4059CF
.text:00405849                 mov     ebx, off_40804C
.text:0040584F                 cmp     ebx, offset dword_408044
.text:00405855                 jz      loc_4059A1
.text:0040585B
.text:0040585B loc_40585B:                             ; CODE XREF: sub_405810+1B5↓j
.text:0040585B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040585E                 lea     ecx, ds:0[esi*8]
.text:00405865                 mov     ebp, esi
.text:00405867                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040586B                 call    sub_406D60
.text:00405870                 mov     off_40804C, eax
.text:00405875                 mov     ebx, dword_408040
.text:0040587B                 sub     ebp, ebx
.text:0040587D                 lea     edi, [eax+ebx*8]
.text:00405880                 lea     eax, ds:0[ebp*8]
.text:00405887                 cmp     eax, 7
.text:0040588A                 jbe     short loc_4058A0
.text:0040588C                 test    edi, 4
.text:00405892                 jz      short loc_4058A0
.text:00405894                 mov     dword ptr [edi], 0
.text:0040589A                 sub     eax, 4
.text:0040589D                 add     edi, 4
.text:004058A0
.text:004058A0 loc_4058A0:                             ; CODE XREF: sub_405810+7A↑j
.text:004058A0                                         ; sub_405810+82↑j
.text:004058A0                 cld
.text:004058A1                 mov     ecx, eax
.text:004058A3                 shr     ecx, 2
.text:004058A6                 xor     eax, eax
.text:004058A8                 rep stosd
.text:004058AA                 mov     dword_408040, esi
.text:004058B0
.text:004058B0 loc_4058B0:                             ; CODE XREF: sub_405810+28↑j
.text:004058B0                 mov     esi, off_40804C
.text:004058B6                 mov     eax, [esp+2Ch+arg_0]
.text:004058BA                 mov     ebp, [esi+eax*8]
.text:004058BD                 mov     edi, [esi+eax*8+4]
.text:004058C1                 mov     esi, [esp+2Ch+arg_C]
.text:004058C5                 test    esi, esi
.text:004058C7                 jz      loc_405997
.text:004058CD
.text:004058CD loc_4058CD:                             ; CODE XREF: sub_405810+18C↓j
.text:004058CD                 call    _errno
.text:004058D2                 mov     ebx, [eax]
.text:004058D4                 mov     [esp+2Ch+var_18], esi ; int
.text:004058D8                 mov     ecx, [esi]
.text:004058DA                 mov     [esp+2Ch+Block], edi ; int
.text:004058DD                 mov     edx, [esp+2Ch+arg_8]
.text:004058E1                 mov     [esp+2Ch+var_28], ebp ; int
.text:004058E5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004058E9                 mov     ecx, [esp+2Ch+arg_4]
.text:004058ED                 mov     [esp+2Ch+var_20], edx ; int
.text:004058F1                 mov     [esp+2Ch+Str], ecx ; Str
.text:004058F5                 call    sub_4046D0
.text:004058FA                 mov     esi, eax
.text:004058FC                 call    _errno
.text:00405901                 mov     [eax], ebx
.text:00405903                 cmp     ebp, esi
.text:00405905                 ja      short loc_40597B
.text:00405907                 lea     ebp, [esi+1]
.text:0040590A                 mov     ebx, off_40804C
.text:00405910                 cmp     edi, offset unk_409050
.text:00405916                 mov     esi, [esp+2Ch+arg_0]
.text:0040591A                 mov     [ebx+esi*8], ebp
.text:0040591D                 jz      short loc_40592D
.text:0040591F                 mov     [esp+2Ch+Block], edi ; Block
.text:00405922                 call    free
.text:00405927                 mov     ebx, off_40804C
.text:0040592D
.text:0040592D loc_40592D:                             ; CODE XREF: sub_405810+10D↑j
.text:0040592D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00405930                 call    sub_406CD0
.text:00405935                 mov     esi, [esp+2Ch+arg_C]
.text:00405939                 mov     edi, eax
.text:0040593B                 mov     eax, [esp+2Ch+arg_0]
.text:0040593F                 test    esi, esi
.text:00405941                 mov     [ebx+eax*8+4], edi
.text:00405945                 jz      short loc_405990
.text:00405947
.text:00405947 loc_405947:                             ; CODE XREF: sub_405810+185↓j
.text:00405947                 call    _errno
.text:0040594C                 mov     ebx, [eax]
.text:0040594E                 mov     [esp+2Ch+var_18], esi ; int
.text:00405952                 mov     ecx, [esi]
.text:00405954                 mov     [esp+2Ch+Block], edi ; int
.text:00405957                 mov     edx, [esp+2Ch+arg_8]
.text:0040595B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040595F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405963                 mov     ecx, [esp+2Ch+arg_4]
.text:00405967                 mov     [esp+2Ch+var_20], edx ; int
.text:0040596B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040596F                 call    sub_4046D0
.text:00405974                 call    _errno
.text:00405979                 mov     [eax], ebx
.text:0040597B
.text:0040597B loc_40597B:                             ; CODE XREF: sub_405810+F5↑j
.text:0040597B                 call    _errno
.text:00405980                 mov     ebp, [esp+2Ch+var_14]
.text:00405984                 mov     [eax], ebp
.text:00405986                 add     esp, 1Ch
.text:00405989                 mov     eax, edi
.text:0040598B                 pop     ebx
.text:0040598C                 pop     esi
.text:0040598D                 pop     edi
.text:0040598E                 pop     ebp
.text:0040598F                 retn
.text:00405990 ; ---------------------------------------------------------------------------
.text:00405990
.text:00405990 loc_405990:                             ; CODE XREF: sub_405810+135↑j
.text:00405990                 mov     esi, offset dword_409150
.text:00405995                 jmp     short loc_405947
.text:00405997 ; ---------------------------------------------------------------------------
.text:00405997
.text:00405997 loc_405997:                             ; CODE XREF: sub_405810+B7↑j
.text:00405997                 mov     esi, offset dword_409150
.text:0040599C                 jmp     loc_4058CD
.text:004059A1 ; ---------------------------------------------------------------------------
.text:004059A1
.text:004059A1 loc_4059A1:                             ; CODE XREF: sub_405810+45↑j
.text:004059A1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004059A8                 call    sub_406CD0
.text:004059AD                 mov     off_40804C, eax
.text:004059B2                 mov     edi, dword_408044
.text:004059B8                 mov     ebx, eax
.text:004059BA                 mov     ecx, off_408048
.text:004059C0                 mov     [eax], edi
.text:004059C2                 mov     [eax+4], ecx
.text:004059C5                 jmp     loc_40585B
.text:004059CA ; ---------------------------------------------------------------------------
.text:004059CA
.text:004059CA loc_4059CA:                             ; CODE XREF: sub_405810+18↑j
.text:004059CA                 call    abort
.text:004059CF ; ---------------------------------------------------------------------------
.text:004059CF
.text:004059CF loc_4059CF:                             ; CODE XREF: sub_405810+33↑j
.text:004059CF                 call    sub_406F80
.text:004059CF sub_405810      endp
.text:004059CF
.text:004059CF ; ---------------------------------------------------------------------------
.text:004059D4                 align 10h
.text:004059E0 aCoreutils530Sr db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:004059E0                                         ; DATA XREF: sub_405A50+C79↓o
.text:00405A08                 align 20h
.text:00405A20 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:00405A20                                         ; DATA XREF: sub_405A50+C81↓o
.text:00405A46                 align 10h
.text:00405A50
.text:00405A50 ; =============== S U B R O U T I N E =======================================
.text:00405A50
.text:00405A50
.text:00405A50 ; int __cdecl sub_405A50(int, int, int, int, char *Str)
.text:00405A50 sub_405A50      proc near               ; CODE XREF: sub_4044E0+9F↑p
.text:00405A50
.text:00405A50 C               = dword ptr -13Ch
.text:00405A50 Type            = dword ptr -138h
.text:00405A50 Radix           = dword ptr -134h
.text:00405A50 var_130         = dword ptr -130h
.text:00405A50 var_124         = dword ptr -124h
.text:00405A50 var_120         = dword ptr -120h
.text:00405A50 var_11C         = dword ptr -11Ch
.text:00405A50 var_118         = dword ptr -118h
.text:00405A50 var_114         = dword ptr -114h
.text:00405A50 var_110         = dword ptr -110h
.text:00405A50 var_10C         = dword ptr -10Ch
.text:00405A50 var_108         = dword ptr -108h
.text:00405A50 var_104         = dword ptr -104h
.text:00405A50 var_100         = dword ptr -100h
.text:00405A50 var_F8          = dword ptr -0F8h
.text:00405A50 var_F4          = dword ptr -0F4h
.text:00405A50 var_F0          = dword ptr -0F0h
.text:00405A50 var_EC          = dword ptr -0ECh
.text:00405A50 var_E8          = dword ptr -0E8h
.text:00405A50 var_E4          = dword ptr -0E4h
.text:00405A50 var_E0          = dword ptr -0E0h
.text:00405A50 var_D8          = dword ptr -0D8h
.text:00405A50 var_D4          = dword ptr -0D4h
.text:00405A50 var_D0          = dword ptr -0D0h
.text:00405A50 var_CC          = dword ptr -0CCh
.text:00405A50 var_C8          = dword ptr -0C8h
.text:00405A50 var_C4          = dword ptr -0C4h
.text:00405A50 var_C0          = dword ptr -0C0h
.text:00405A50 var_B8          = dword ptr -0B8h
.text:00405A50 var_B4          = dword ptr -0B4h
.text:00405A50 var_B0          = dword ptr -0B0h
.text:00405A50 var_AC          = dword ptr -0ACh
.text:00405A50 var_A8          = dword ptr -0A8h
.text:00405A50 var_A4          = dword ptr -0A4h
.text:00405A50 var_A0          = dword ptr -0A0h
.text:00405A50 var_98          = dword ptr -98h
.text:00405A50 var_94          = dword ptr -94h
.text:00405A50 var_90          = dword ptr -90h
.text:00405A50 var_8C          = dword ptr -8Ch
.text:00405A50 var_88          = dword ptr -88h
.text:00405A50 var_84          = dword ptr -84h
.text:00405A50 var_80          = dword ptr -80h
.text:00405A50 var_78          = dword ptr -78h
.text:00405A50 var_74          = dword ptr -74h
.text:00405A50 var_70          = dword ptr -70h
.text:00405A50 var_6C          = dword ptr -6Ch
.text:00405A50 var_68          = dword ptr -68h
.text:00405A50 var_64          = dword ptr -64h
.text:00405A50 var_60          = dword ptr -60h
.text:00405A50 var_5C          = dword ptr -5Ch
.text:00405A50 var_58          = dword ptr -58h
.text:00405A50 var_50          = dword ptr -50h
.text:00405A50 var_4C          = dword ptr -4Ch
.text:00405A50 var_48          = dword ptr -48h
.text:00405A50 var_44          = dword ptr -44h
.text:00405A50 var_40          = dword ptr -40h
.text:00405A50 var_3C          = dword ptr -3Ch
.text:00405A50 var_38          = dword ptr -38h
.text:00405A50 var_34          = dword ptr -34h
.text:00405A50 var_30          = dword ptr -30h
.text:00405A50 var_29          = byte ptr -29h
.text:00405A50 var_28          = dword ptr -28h
.text:00405A50 var_24          = dword ptr -24h
.text:00405A50 var_20          = dword ptr -20h
.text:00405A50 var_18          = byte ptr -18h
.text:00405A50 arg_0           = dword ptr  4
.text:00405A50 arg_4           = dword ptr  8
.text:00405A50 arg_8           = dword ptr  0Ch
.text:00405A50 arg_C           = dword ptr  10h
.text:00405A50 Str             = dword ptr  14h
.text:00405A50
.text:00405A50                 push    ebp
.text:00405A51                 xor     eax, eax
.text:00405A53                 push    edi
.text:00405A54                 push    esi
.text:00405A55                 push    ebx
.text:00405A56                 sub     esp, 12Ch
.text:00405A5C                 mov     ebp, [esp+13Ch+arg_8]
.text:00405A63                 mov     [esp+13Ch+var_28], eax
.text:00405A6A                 mov     esi, [esp+13Ch+arg_0]
.text:00405A71                 cmp     ebp, 24h ; '$'
.text:00405A74                 ja      loc_4066C1
.text:00405A7A                 mov     edi, [esp+13Ch+arg_4]
.text:00405A81                 test    edi, edi
.text:00405A83                 jz      loc_4066B5
.text:00405A89
.text:00405A89 loc_405A89:                             ; CODE XREF: sub_405A50+C6C↓j
.text:00405A89                 movzx   edx, byte ptr [esi]
.text:00405A8C                 mov     ebx, esi
.text:00405A8E                 mov     [esp+13Ch+var_29], dl
.text:00405A95                 lea     esi, [esi+0]
.text:00405A99                 lea     edi, [edi+0]
.text:00405AA0
.text:00405AA0 loc_405AA0:                             ; CODE XREF: sub_405A50+86↓j
.text:00405AA0                 movzx   edx, [esp+13Ch+var_29]
.text:00405AA8                 mov     ecx, ds:__mb_cur_max
.text:00405AAE                 cmp     dword ptr [ecx], 1
.text:00405AB1                 jz      loc_4066A2
.text:00405AB7                 mov     [esp+13Ch+Type], 8 ; Type
.text:00405ABF                 mov     [esp+13Ch+C], edx ; C
.text:00405AC2                 call    _isctype
.text:00405AC7
.text:00405AC7 loc_405AC7:                             ; CODE XREF: sub_405A50+C60↓j
.text:00405AC7                 test    eax, eax
.text:00405AC9                 jz      short loc_405AD8
.text:00405ACB                 inc     ebx
.text:00405ACC                 movzx   eax, byte ptr [ebx]
.text:00405ACF                 mov     [esp+13Ch+var_29], al
.text:00405AD6                 jmp     short loc_405AA0
.text:00405AD8 ; ---------------------------------------------------------------------------
.text:00405AD8
.text:00405AD8 loc_405AD8:                             ; CODE XREF: sub_405A50+79↑j
.text:00405AD8                 cmp     [esp+13Ch+var_29], 2Dh ; '-'
.text:00405AE0                 mov     eax, 4
.text:00405AE5                 jz      short loc_405B62
.text:00405AE7                 call    _errno
.text:00405AEC                 mov     dword ptr [eax], 0
.text:00405AF2                 mov     [esp+13Ch+Radix], ebp ; Radix
.text:00405AF6                 mov     [esp+13Ch+Type], edi ; EndPtr
.text:00405AFA                 mov     [esp+13Ch+C], esi ; String
.text:00405AFD                 call    _strtoull
.text:00405B02                 mov     [esp+13Ch+var_24], eax
.text:00405B09                 mov     eax, [edi]
.text:00405B0B                 mov     [esp+13Ch+var_20], edx
.text:00405B12                 cmp     eax, esi
.text:00405B14                 jz      loc_40665C
.text:00405B1A                 call    _errno
.text:00405B1F                 mov     ebx, [eax]
.text:00405B21                 test    ebx, ebx
.text:00405B23                 jnz     loc_406637
.text:00405B29
.text:00405B29 loc_405B29:                             ; CODE XREF: sub_405A50+BFD↓j
.text:00405B29                                         ; sub_405A50+C4D↓j
.text:00405B29                 mov     ebp, [esp+13Ch+Str]
.text:00405B30                 test    ebp, ebp
.text:00405B32                 jz      loc_406618
.text:00405B38                 mov     ebx, [edi]
.text:00405B3A                 movzx   eax, byte ptr [ebx]
.text:00405B3D                 test    al, al
.text:00405B3F                 jnz     short loc_405B6D
.text:00405B41
.text:00405B41 loc_405B41:                             ; CODE XREF: sub_405A50+312↓j
.text:00405B41                                         ; sub_405A50+320↓j
.text:00405B41                 mov     edx, [esp+13Ch+var_24]
.text:00405B48                 mov     edi, [esp+13Ch+var_20]
.text:00405B4F                 mov     ebx, [esp+13Ch+arg_C]
.text:00405B56                 mov     [ebx], edx
.text:00405B58                 mov     [ebx+4], edi
.text:00405B5B
.text:00405B5B loc_405B5B:                             ; CODE XREF: sub_405A50+BE2↓j
.text:00405B5B                 mov     eax, [esp+13Ch+var_28]
.text:00405B62
.text:00405B62 loc_405B62:                             ; CODE XREF: sub_405A50+95↑j
.text:00405B62                                         ; sub_405A50+16C↓j ...
.text:00405B62                 add     esp, 12Ch
.text:00405B68                 pop     ebx
.text:00405B69                 pop     esi
.text:00405B6A                 pop     edi
.text:00405B6B                 pop     ebp
.text:00405B6C                 retn
.text:00405B6D ; ---------------------------------------------------------------------------
.text:00405B6D
.text:00405B6D loc_405B6D:                             ; CODE XREF: sub_405A50+EF↑j
.text:00405B6D                 mov     esi, [esp+13Ch+Str]
.text:00405B74                 mov     ecx, 1
.text:00405B79                 movsx   ebp, al
.text:00405B7C                 mov     [esp+13Ch+var_30], ecx
.text:00405B83                 mov     ebx, 400h
.text:00405B88                 mov     [esp+13Ch+Type], ebp ; Val
.text:00405B8C                 mov     [esp+13Ch+C], esi ; Str
.text:00405B8F                 call    strchr
.text:00405B94                 test    eax, eax
.text:00405B96                 jnz     short loc_405BBE
.text:00405B98
.text:00405B98 def_405C09:                             ; CODE XREF: sub_405A50+1B7↓j
.text:00405B98                                         ; sub_405A50+1B9↓j
.text:00405B98                                         ; DATA XREF: ...
.text:00405B98                 mov     eax, [esp+13Ch+var_28] ; jumptable 00405C09 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00405B9F                 mov     esi, [esp+13Ch+var_24]
.text:00405BA6                 mov     ebp, [esp+13Ch+var_20]
.text:00405BAD                 mov     edi, [esp+13Ch+arg_C]
.text:00405BB4                 or      eax, 2
.text:00405BB7                 mov     [edi], esi
.text:00405BB9                 mov     [edi+4], ebp
.text:00405BBC                 jmp     short loc_405B62
.text:00405BBE ; ---------------------------------------------------------------------------
.text:00405BBE
.text:00405BBE loc_405BBE:                             ; CODE XREF: sub_405A50+146↑j
.text:00405BBE                 mov     [esp+13Ch+Type], 30h ; '0' ; Val
.text:00405BC6                 mov     edx, [esp+13Ch+Str]
.text:00405BCD                 mov     [esp+13Ch+C], edx ; Str
.text:00405BD0                 call    strchr
.text:00405BD5                 test    eax, eax
.text:00405BD7                 jz      loc_406611
.text:00405BDD                 mov     edx, [edi]
.text:00405BDF                 movsx   eax, byte ptr [edx+1]
.text:00405BE3                 cmp     eax, 44h ; 'D'
.text:00405BE6                 jz      loc_4065D7
.text:00405BEC                 cmp     eax, 44h ; 'D'
.text:00405BEF                 jg      loc_4065ED
.text:00405BF5                 cmp     eax, 42h ; 'B'
.text:00405BF8                 jz      loc_4065D7
.text:00405BFE
.text:00405BFE loc_405BFE:                             ; CODE XREF: sub_405A50+B98↓j
.text:00405BFE                                         ; sub_405A50+BA0↓j ...
.text:00405BFE                 movsx   eax, byte ptr [edx]
.text:00405C01                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00405C04                 cmp     eax, 35h
.text:00405C07                 ja      short def_405C09 ; jumptable 00405C09 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00405C09                 jmp     ds:jpt_405C09[eax*4] ; switch jump
.text:00405C09 ; ---------------------------------------------------------------------------
.text:00405C10 jpt_405C09      dd offset loc_405D94, offset def_405C09, offset def_405C09
.text:00405C10                                         ; DATA XREF: sub_405A50+1B9↑r
.text:00405C10                 dd offset loc_405DEE, offset def_405C09, offset loc_4061B7 ; jump table for switch statement
.text:00405C10                 dd offset def_405C09, offset def_405C09, offset def_405C09
.text:00405C10                 dd offset loc_4062C6, offset def_405C09, offset loc_40638F
.text:00405C10                 dd offset def_405C09, offset def_405C09, offset loc_405EFD
.text:00405C10                 dd offset def_405C09, offset def_405C09, offset def_405C09
.text:00405C10                 dd offset loc_40649E, offset def_405C09, offset def_405C09
.text:00405C10                 dd offset def_405C09, offset def_405C09, offset loc_40600C
.text:00405C10                 dd offset loc_4060DE, offset def_405C09, offset def_405C09
.text:00405C10                 dd offset def_405C09, offset def_405C09, offset def_405C09
.text:00405C10                 dd offset def_405C09, offset def_405C09, offset loc_405CE8
.text:00405C10                 dd offset loc_4061B0, offset def_405C09, offset def_405C09
.text:00405C10                 dd offset def_405C09, offset loc_4061B7, offset def_405C09
.text:00405C10                 dd offset def_405C09, offset def_405C09, offset loc_4062C6
.text:00405C10                 dd offset def_405C09, offset loc_40638F, offset def_405C09
.text:00405C10                 dd offset def_405C09, offset def_405C09, offset def_405C09
.text:00405C10                 dd offset def_405C09, offset def_405C09, offset loc_40649E
.text:00405C10                 dd offset def_405C09, offset def_405C09, offset loc_406577
.text:00405CE8 ; ---------------------------------------------------------------------------
.text:00405CE8
.text:00405CE8 loc_405CE8:                             ; CODE XREF: sub_405A50+1B9↑j
.text:00405CE8                                         ; DATA XREF: sub_405A50:jpt_405C09↑o
.text:00405CE8                 mov     [esp+13Ch+Radix], 200h ; jumptable 00405C09 case 98
.text:00405CF0                 lea     ebp, [esp+13Ch+var_24]
.text:00405CF7                 mov     [esp+13Ch+var_130], 0
.text:00405CFF                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00405D06                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00405D0E                 call    sub_407610
.text:00405D13                 mov     esi, [esp+13Ch+var_20]
.text:00405D1A                 mov     ecx, [esp+13Ch+var_24]
.text:00405D21                 cmp     edx, esi
.text:00405D23                 ja      short loc_405D2B
.text:00405D25                 jb      short loc_405D75
.text:00405D27                 cmp     eax, ecx
.text:00405D29                 jb      short loc_405D75
.text:00405D2B
.text:00405D2B loc_405D2B:                             ; CODE XREF: sub_405A50+2D3↑j
.text:00405D2B                 mov     esi, [ebp+0]
.text:00405D2E                 mov     eax, 200h
.text:00405D33                 mov     ebx, [ebp+4]
.text:00405D36                 mul     esi
.text:00405D38                 mov     ecx, ebx
.text:00405D3A                 shl     ecx, 9
.text:00405D3D
.text:00405D3D loc_405D3D:                             ; CODE XREF: sub_405A50+399↓j
.text:00405D3D                 mov     esi, edx
.text:00405D3F                 lea     edx, [ecx+esi]
.text:00405D42
.text:00405D42 loc_405D42:                             ; CODE XREF: sub_405A50+B82↓j
.text:00405D42                 mov     [ebp+0], eax
.text:00405D45                 xor     eax, eax
.text:00405D47                 mov     [ebp+4], edx
.text:00405D4A
.text:00405D4A loc_405D4A:                             ; CODE XREF: sub_405A50+342↓j
.text:00405D4A                                         ; sub_405A50+459↓j ...
.text:00405D4A                 mov     edx, [edi]
.text:00405D4C
.text:00405D4C loc_405D4C:                             ; CODE XREF: sub_405A50+762↓j
.text:00405D4C                 or      [esp+13Ch+var_28], eax
.text:00405D53                 mov     eax, [esp+13Ch+var_30]
.text:00405D5A                 lea     ecx, [eax+edx]
.text:00405D5D                 mov     [edi], ecx
.text:00405D5F                 cmp     byte ptr [ecx], 0
.text:00405D62                 jz      loc_405B41
.text:00405D68                 or      [esp+13Ch+var_28], 2
.text:00405D70                 jmp     loc_405B41
.text:00405D75 ; ---------------------------------------------------------------------------
.text:00405D75
.text:00405D75 loc_405D75:                             ; CODE XREF: sub_405A50+2D5↑j
.text:00405D75                                         ; sub_405A50+2D9↑j ...
.text:00405D75                 mov     edx, 0FFFFFFFFh
.text:00405D7A                 mov     ebp, 0FFFFFFFFh
.text:00405D7F                 mov     eax, 1
.text:00405D84                 mov     [esp+13Ch+var_24], edx
.text:00405D8B                 mov     [esp+13Ch+var_20], ebp
.text:00405D92                 jmp     short loc_405D4A
.text:00405D94 ; ---------------------------------------------------------------------------
.text:00405D94
.text:00405D94 loc_405D94:                             ; CODE XREF: sub_405A50+1B9↑j
.text:00405D94                                         ; DATA XREF: sub_405A50:jpt_405C09↑o
.text:00405D94                 mov     [esp+13Ch+Radix], 400h ; jumptable 00405C09 case 66
.text:00405D9C                 lea     ebp, [esp+13Ch+var_24]
.text:00405DA3                 mov     [esp+13Ch+var_130], 0
.text:00405DAB                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00405DB2                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00405DBA                 call    sub_407610
.text:00405DBF                 mov     esi, [esp+13Ch+var_20]
.text:00405DC6                 mov     ecx, [esp+13Ch+var_24]
.text:00405DCD                 cmp     edx, esi
.text:00405DCF                 ja      short loc_405DD7
.text:00405DD1                 jb      short loc_405D75
.text:00405DD3                 cmp     eax, ecx
.text:00405DD5                 jb      short loc_405D75
.text:00405DD7
.text:00405DD7 loc_405DD7:                             ; CODE XREF: sub_405A50+37F↑j
.text:00405DD7                 mov     esi, [ebp+0]
.text:00405DDA                 mov     eax, 400h
.text:00405DDF                 mov     ebx, [ebp+4]
.text:00405DE2                 mul     esi
.text:00405DE4                 mov     ecx, ebx
.text:00405DE6                 shl     ecx, 0Ah
.text:00405DE9                 jmp     loc_405D3D
.text:00405DEE ; ---------------------------------------------------------------------------
.text:00405DEE
.text:00405DEE loc_405DEE:                             ; CODE XREF: sub_405A50+1B9↑j
.text:00405DEE                                         ; DATA XREF: sub_405A50:jpt_405C09↑o
.text:00405DEE                 mov     [esp+13Ch+var_3C], ebx ; jumptable 00405C09 case 69
.text:00405DF5                 mov     ecx, ebx
.text:00405DF7                 xor     ebp, ebp
.text:00405DF9                 mov     [esp+13Ch+var_34], ebp
.text:00405E00                 sar     ecx, 1Fh
.text:00405E03                 mov     ebx, [esp+13Ch+var_3C]
.text:00405E0A                 mov     [esp+13Ch+var_38], ecx
.text:00405E11                 lea     esi, [esp+13Ch+var_24]
.text:00405E18                 mov     ebp, 5
.text:00405E1D                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00405E24                 mov     edx, [esp+13Ch+var_38]
.text:00405E2B                 mov     [esp+13Ch+Radix], ebx
.text:00405E2F                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00405E37                 mov     [esp+13Ch+var_130], edx
.text:00405E3B                 call    sub_407610
.text:00405E40                 mov     [esp+13Ch+var_44], eax
.text:00405E47                 mov     [esp+13Ch+var_40], edx
.text:00405E4E
.text:00405E4E loc_405E4E:                             ; CODE XREF: sub_405A50+450↓j
.text:00405E4E                 mov     ebx, [esi+4]
.text:00405E51                 mov     eax, [esi]
.text:00405E53                 cmp     [esp+13Ch+var_40], ebx
.text:00405E5A                 mov     [esp+13Ch+var_48], ebx
.text:00405E61                 mov     [esp+13Ch+var_4C], eax
.text:00405E68                 ja      short loc_405EAE
.text:00405E6A                 mov     ecx, [esp+13Ch+var_48]
.text:00405E71                 cmp     [esp+13Ch+var_40], ecx
.text:00405E78                 jb      short loc_405E83
.text:00405E7A                 cmp     [esp+13Ch+var_44], eax
.text:00405E81                 jnb     short loc_405EAE
.text:00405E83
.text:00405E83 loc_405E83:                             ; CODE XREF: sub_405A50+428↑j
.text:00405E83                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00405E89                 mov     eax, 1
.text:00405E8E                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00405E95
.text:00405E95 loc_405E95:                             ; CODE XREF: sub_405A50+4AB↓j
.text:00405E95                 or      [esp+13Ch+var_34], eax
.text:00405E9C                 dec     ebp
.text:00405E9D                 cmp     ebp, 0FFFFFFFFh
.text:00405EA0                 jnz     short loc_405E4E
.text:00405EA2                 mov     eax, [esp+13Ch+var_34]
.text:00405EA9                 jmp     loc_405D4A
.text:00405EAE ; ---------------------------------------------------------------------------
.text:00405EAE
.text:00405EAE loc_405EAE:                             ; CODE XREF: sub_405A50+418↑j
.text:00405EAE                                         ; sub_405A50+431↑j
.text:00405EAE                 mov     ecx, [esp+13Ch+var_38]
.text:00405EB5                 mov     eax, [esp+13Ch+var_4C]
.text:00405EBC                 mov     ebx, [esp+13Ch+var_4C]
.text:00405EC3                 mul     [esp+13Ch+var_3C]
.text:00405ECA                 imul    ebx, ecx
.text:00405ECD                 mov     ecx, edx
.text:00405ECF                 mov     [esp+13Ch+var_124], eax
.text:00405ED3                 add     ecx, ebx
.text:00405ED5                 mov     edx, [esp+13Ch+var_3C]
.text:00405EDC                 mov     ebx, [esp+13Ch+var_48]
.text:00405EE3                 imul    edx, ebx
.text:00405EE6                 mov     ebx, [esp+13Ch+var_124]
.text:00405EEA                 mov     [esi], ebx
.text:00405EEC                 add     ecx, edx
.text:00405EEE                 mov     [esp+13Ch+var_120], ecx
.text:00405EF2                 mov     eax, [esp+13Ch+var_120]
.text:00405EF6                 mov     [esi+4], eax
.text:00405EF9                 xor     eax, eax
.text:00405EFB                 jmp     short loc_405E95
.text:00405EFD ; ---------------------------------------------------------------------------
.text:00405EFD
.text:00405EFD loc_405EFD:                             ; CODE XREF: sub_405A50+1B9↑j
.text:00405EFD                                         ; DATA XREF: sub_405A50:jpt_405C09↑o
.text:00405EFD                 mov     [esp+13Ch+var_A4], ebx ; jumptable 00405C09 case 80
.text:00405F04                 mov     eax, ebx
.text:00405F06                 xor     ebp, ebp
.text:00405F08                 mov     [esp+13Ch+var_98], ebp
.text:00405F0F                 sar     eax, 1Fh
.text:00405F12                 mov     edx, [esp+13Ch+var_A4]
.text:00405F19                 mov     [esp+13Ch+var_A0], eax
.text:00405F20                 lea     esi, [esp+13Ch+var_24]
.text:00405F27                 mov     ebp, 4
.text:00405F2C                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00405F33                 mov     ebx, [esp+13Ch+var_A0]
.text:00405F3A                 mov     [esp+13Ch+Radix], edx
.text:00405F3E                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00405F46                 mov     [esp+13Ch+var_130], ebx
.text:00405F4A                 call    sub_407610
.text:00405F4F                 mov     [esp+13Ch+var_AC], eax
.text:00405F56                 mov     [esp+13Ch+var_A8], edx
.text:00405F5D
.text:00405F5D loc_405F5D:                             ; CODE XREF: sub_405A50+55F↓j
.text:00405F5D                 mov     ebx, [esi+4]
.text:00405F60                 mov     edx, [esi]
.text:00405F62                 cmp     [esp+13Ch+var_A8], ebx
.text:00405F69                 mov     [esp+13Ch+var_B0], ebx
.text:00405F70                 mov     [esp+13Ch+var_B4], edx
.text:00405F77                 ja      short loc_405FBD
.text:00405F79                 mov     eax, [esp+13Ch+var_B0]
.text:00405F80                 cmp     [esp+13Ch+var_A8], eax
.text:00405F87                 jb      short loc_405F92
.text:00405F89                 cmp     [esp+13Ch+var_AC], edx
.text:00405F90                 jnb     short loc_405FBD
.text:00405F92
.text:00405F92 loc_405F92:                             ; CODE XREF: sub_405A50+537↑j
.text:00405F92                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00405F98                 mov     eax, 1
.text:00405F9D                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00405FA4
.text:00405FA4 loc_405FA4:                             ; CODE XREF: sub_405A50+5BA↓j
.text:00405FA4                 or      [esp+13Ch+var_98], eax
.text:00405FAB                 dec     ebp
.text:00405FAC                 cmp     ebp, 0FFFFFFFFh
.text:00405FAF                 jnz     short loc_405F5D
.text:00405FB1                 mov     eax, [esp+13Ch+var_98]
.text:00405FB8                 jmp     loc_405D4A
.text:00405FBD ; ---------------------------------------------------------------------------
.text:00405FBD
.text:00405FBD loc_405FBD:                             ; CODE XREF: sub_405A50+527↑j
.text:00405FBD                                         ; sub_405A50+540↑j
.text:00405FBD                 mov     ecx, [esp+13Ch+var_A0]
.text:00405FC4                 mov     eax, [esp+13Ch+var_B4]
.text:00405FCB                 mov     ebx, [esp+13Ch+var_B4]
.text:00405FD2                 mul     [esp+13Ch+var_A4]
.text:00405FD9                 imul    ebx, ecx
.text:00405FDC                 mov     ecx, edx
.text:00405FDE                 mov     [esp+13Ch+var_124], eax
.text:00405FE2                 add     ecx, ebx
.text:00405FE4                 mov     edx, [esp+13Ch+var_A4]
.text:00405FEB                 mov     ebx, [esp+13Ch+var_B0]
.text:00405FF2                 xor     eax, eax
.text:00405FF4                 imul    edx, ebx
.text:00405FF7                 add     ecx, edx
.text:00405FF9                 mov     [esp+13Ch+var_120], ecx
.text:00405FFD                 mov     ebx, [esp+13Ch+var_120]
.text:00406001                 mov     ecx, [esp+13Ch+var_124]
.text:00406005                 mov     [esi+4], ebx
.text:00406008                 mov     [esi], ecx
.text:0040600A                 jmp     short loc_405FA4
.text:0040600C ; ---------------------------------------------------------------------------
.text:0040600C
.text:0040600C loc_40600C:                             ; CODE XREF: sub_405A50+1B9↑j
.text:0040600C                                         ; DATA XREF: sub_405A50:jpt_405C09↑o
.text:0040600C                 mov     [esp+13Ch+var_E4], ebx ; jumptable 00405C09 case 89
.text:00406010                 mov     eax, ebx
.text:00406012                 lea     esi, [esp+13Ch+var_24]
.text:00406019                 mov     [esp+13Ch+var_D8], 0
.text:00406021                 sar     eax, 1Fh
.text:00406024                 mov     edx, [esp+13Ch+var_E4]
.text:00406028                 mov     [esp+13Ch+var_E0], eax
.text:0040602C                 mov     ebp, 7
.text:00406031                 mov     ebx, [esp+13Ch+var_E0]
.text:00406035                 mov     [esp+13Ch+Radix], edx
.text:00406039                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00406040                 mov     [esp+13Ch+var_130], ebx
.text:00406044                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040604C                 call    sub_407610
.text:00406051                 mov     [esp+13Ch+var_EC], eax
.text:00406055                 mov     [esp+13Ch+var_E8], edx
.text:00406059
.text:00406059 loc_406059:                             ; CODE XREF: sub_405A50+646↓j
.text:00406059                 mov     ebx, [esi+4]
.text:0040605C                 mov     edx, [esi]
.text:0040605E                 cmp     [esp+13Ch+var_E8], ebx
.text:00406062                 mov     [esp+13Ch+var_F0], ebx
.text:00406066                 mov     [esp+13Ch+var_F4], edx
.text:0040606A                 ja      short loc_4060A1
.text:0040606C                 mov     eax, [esp+13Ch+var_F0]
.text:00406070                 cmp     [esp+13Ch+var_E8], eax
.text:00406074                 jb      short loc_40607C
.text:00406076                 cmp     [esp+13Ch+var_EC], edx
.text:0040607A                 jnb     short loc_4060A1
.text:0040607C
.text:0040607C loc_40607C:                             ; CODE XREF: sub_405A50+624↑j
.text:0040607C                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00406082                 mov     eax, 1
.text:00406087                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040608E
.text:0040608E loc_40608E:                             ; CODE XREF: sub_405A50+68C↓j
.text:0040608E                 or      [esp+13Ch+var_D8], eax
.text:00406092                 dec     ebp
.text:00406093                 cmp     ebp, 0FFFFFFFFh
.text:00406096                 jnz     short loc_406059
.text:00406098                 mov     eax, [esp+13Ch+var_D8]
.text:0040609C                 jmp     loc_405D4A
.text:004060A1 ; ---------------------------------------------------------------------------
.text:004060A1
.text:004060A1 loc_4060A1:                             ; CODE XREF: sub_405A50+61A↑j
.text:004060A1                                         ; sub_405A50+62A↑j
.text:004060A1                 mov     ecx, [esp+13Ch+var_E0]
.text:004060A5                 mov     eax, [esp+13Ch+var_F4]
.text:004060A9                 mov     ebx, [esp+13Ch+var_F4]
.text:004060AD                 mul     [esp+13Ch+var_E4]
.text:004060B1                 imul    ebx, ecx
.text:004060B4                 mov     ecx, edx
.text:004060B6                 mov     [esp+13Ch+var_124], eax
.text:004060BA                 add     ecx, ebx
.text:004060BC                 mov     edx, [esp+13Ch+var_E4]
.text:004060C0                 mov     ebx, [esp+13Ch+var_F0]
.text:004060C4                 xor     eax, eax
.text:004060C6                 imul    edx, ebx
.text:004060C9                 add     ecx, edx
.text:004060CB                 mov     [esp+13Ch+var_120], ecx
.text:004060CF                 mov     ebx, [esp+13Ch+var_120]
.text:004060D3                 mov     ecx, [esp+13Ch+var_124]
.text:004060D7                 mov     [esi+4], ebx
.text:004060DA                 mov     [esi], ecx
.text:004060DC                 jmp     short loc_40608E
.text:004060DE ; ---------------------------------------------------------------------------
.text:004060DE
.text:004060DE loc_4060DE:                             ; CODE XREF: sub_405A50+1B9↑j
.text:004060DE                                         ; DATA XREF: sub_405A50:jpt_405C09↑o
.text:004060DE                 mov     [esp+13Ch+var_104], ebx ; jumptable 00405C09 case 90
.text:004060E2                 mov     eax, ebx
.text:004060E4                 lea     esi, [esp+13Ch+var_24]
.text:004060EB                 mov     [esp+13Ch+var_F8], 0
.text:004060F3                 sar     eax, 1Fh
.text:004060F6                 mov     edx, [esp+13Ch+var_104]
.text:004060FA                 mov     [esp+13Ch+var_100], eax
.text:004060FE                 mov     ebp, 6
.text:00406103                 mov     ebx, [esp+13Ch+var_100]
.text:00406107                 mov     [esp+13Ch+Radix], edx
.text:0040610B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00406112                 mov     [esp+13Ch+var_130], ebx
.text:00406116                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040611E                 call    sub_407610
.text:00406123                 mov     [esp+13Ch+var_10C], eax
.text:00406127                 mov     [esp+13Ch+var_108], edx
.text:0040612B
.text:0040612B loc_40612B:                             ; CODE XREF: sub_405A50+718↓j
.text:0040612B                 mov     ebx, [esi+4]
.text:0040612E                 mov     edx, [esi]
.text:00406130                 cmp     [esp+13Ch+var_108], ebx
.text:00406134                 mov     [esp+13Ch+var_110], ebx
.text:00406138                 mov     [esp+13Ch+var_114], edx
.text:0040613C                 ja      short loc_406173
.text:0040613E                 mov     eax, [esp+13Ch+var_110]
.text:00406142                 cmp     [esp+13Ch+var_108], eax
.text:00406146                 jb      short loc_40614E
.text:00406148                 cmp     [esp+13Ch+var_10C], edx
.text:0040614C                 jnb     short loc_406173
.text:0040614E
.text:0040614E loc_40614E:                             ; CODE XREF: sub_405A50+6F6↑j
.text:0040614E                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00406154                 mov     eax, 1
.text:00406159                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00406160
.text:00406160 loc_406160:                             ; CODE XREF: sub_405A50+75E↓j
.text:00406160                 or      [esp+13Ch+var_F8], eax
.text:00406164                 dec     ebp
.text:00406165                 cmp     ebp, 0FFFFFFFFh
.text:00406168                 jnz     short loc_40612B
.text:0040616A                 mov     eax, [esp+13Ch+var_F8]
.text:0040616E                 jmp     loc_405D4A
.text:00406173 ; ---------------------------------------------------------------------------
.text:00406173
.text:00406173 loc_406173:                             ; CODE XREF: sub_405A50+6EC↑j
.text:00406173                                         ; sub_405A50+6FC↑j
.text:00406173                 mov     eax, [esp+13Ch+var_114]
.text:00406177                 mov     ebx, [esp+13Ch+var_100]
.text:0040617B                 mul     [esp+13Ch+var_104]
.text:0040617F                 mov     ecx, edx
.text:00406181                 mov     edx, [esp+13Ch+var_104]
.text:00406185                 mov     [esp+13Ch+var_124], eax
.text:00406189                 mov     eax, [esp+13Ch+var_114]
.text:0040618D                 imul    eax, ebx
.text:00406190                 mov     ebx, [esp+13Ch+var_110]
.text:00406194                 imul    edx, ebx
.text:00406197                 add     ecx, eax
.text:00406199                 xor     eax, eax
.text:0040619B                 add     ecx, edx
.text:0040619D                 mov     [esp+13Ch+var_120], ecx
.text:004061A1                 mov     ebx, [esp+13Ch+var_120]
.text:004061A5                 mov     ecx, [esp+13Ch+var_124]
.text:004061A9                 mov     [esi+4], ebx
.text:004061AC                 mov     [esi], ecx
.text:004061AE                 jmp     short loc_406160
.text:004061B0 ; ---------------------------------------------------------------------------
.text:004061B0
.text:004061B0 loc_4061B0:                             ; CODE XREF: sub_405A50+1B9↑j
.text:004061B0                                         ; DATA XREF: sub_405A50:jpt_405C09↑o
.text:004061B0                 xor     eax, eax        ; jumptable 00405C09 case 99
.text:004061B2                 jmp     loc_405D4C
.text:004061B7 ; ---------------------------------------------------------------------------
.text:004061B7
.text:004061B7 loc_4061B7:                             ; CODE XREF: sub_405A50+1B9↑j
.text:004061B7                                         ; DATA XREF: sub_405A50:jpt_405C09↑o
.text:004061B7                 mov     [esp+13Ch+var_5C], ebx ; jumptable 00405C09 cases 71,103
.text:004061BE                 mov     eax, ebx
.text:004061C0                 xor     ebp, ebp
.text:004061C2                 mov     [esp+13Ch+var_50], ebp
.text:004061C9                 sar     eax, 1Fh
.text:004061CC                 mov     edx, [esp+13Ch+var_5C]
.text:004061D3                 mov     [esp+13Ch+var_58], eax
.text:004061DA                 lea     esi, [esp+13Ch+var_24]
.text:004061E1                 mov     ebp, 2
.text:004061E6                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004061ED                 mov     ebx, [esp+13Ch+var_58]
.text:004061F4                 mov     [esp+13Ch+Radix], edx
.text:004061F8                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00406200                 mov     [esp+13Ch+var_130], ebx
.text:00406204                 call    sub_407610
.text:00406209                 mov     [esp+13Ch+var_64], eax
.text:00406210                 mov     [esp+13Ch+var_60], edx
.text:00406217
.text:00406217 loc_406217:                             ; CODE XREF: sub_405A50+819↓j
.text:00406217                 mov     ebx, [esi+4]
.text:0040621A                 mov     edx, [esi]
.text:0040621C                 cmp     [esp+13Ch+var_60], ebx
.text:00406223                 mov     [esp+13Ch+var_68], ebx
.text:0040622A                 mov     [esp+13Ch+var_6C], edx
.text:00406231                 ja      short loc_406277
.text:00406233                 mov     eax, [esp+13Ch+var_68]
.text:0040623A                 cmp     [esp+13Ch+var_60], eax
.text:00406241                 jb      short loc_40624C
.text:00406243                 cmp     [esp+13Ch+var_64], edx
.text:0040624A                 jnb     short loc_406277
.text:0040624C
.text:0040624C loc_40624C:                             ; CODE XREF: sub_405A50+7F1↑j
.text:0040624C                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00406252                 mov     eax, 1
.text:00406257                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040625E
.text:0040625E loc_40625E:                             ; CODE XREF: sub_405A50+874↓j
.text:0040625E                 or      [esp+13Ch+var_50], eax
.text:00406265                 dec     ebp
.text:00406266                 cmp     ebp, 0FFFFFFFFh
.text:00406269                 jnz     short loc_406217
.text:0040626B                 mov     eax, [esp+13Ch+var_50]
.text:00406272                 jmp     loc_405D4A
.text:00406277 ; ---------------------------------------------------------------------------
.text:00406277
.text:00406277 loc_406277:                             ; CODE XREF: sub_405A50+7E1↑j
.text:00406277                                         ; sub_405A50+7FA↑j
.text:00406277                 mov     ecx, [esp+13Ch+var_58]
.text:0040627E                 mov     eax, [esp+13Ch+var_6C]
.text:00406285                 mov     ebx, [esp+13Ch+var_6C]
.text:0040628C                 mul     [esp+13Ch+var_5C]
.text:00406293                 imul    ebx, ecx
.text:00406296                 mov     ecx, edx
.text:00406298                 mov     [esp+13Ch+var_124], eax
.text:0040629C                 add     ecx, ebx
.text:0040629E                 mov     edx, [esp+13Ch+var_5C]
.text:004062A5                 mov     ebx, [esp+13Ch+var_68]
.text:004062AC                 xor     eax, eax
.text:004062AE                 imul    edx, ebx
.text:004062B1                 add     ecx, edx
.text:004062B3                 mov     [esp+13Ch+var_120], ecx
.text:004062B7                 mov     ebx, [esp+13Ch+var_120]
.text:004062BB                 mov     ecx, [esp+13Ch+var_124]
.text:004062BF                 mov     [esi+4], ebx
.text:004062C2                 mov     [esi], ecx
.text:004062C4                 jmp     short loc_40625E
.text:004062C6 ; ---------------------------------------------------------------------------
.text:004062C6
.text:004062C6 loc_4062C6:                             ; CODE XREF: sub_405A50+1B9↑j
.text:004062C6                                         ; DATA XREF: sub_405A50:jpt_405C09↑o
.text:004062C6                 mov     [esp+13Ch+var_74], ebx ; jumptable 00405C09 cases 75,107
.text:004062CD                 mov     eax, ebx
.text:004062CF                 lea     esi, [esp+13Ch+var_24]
.text:004062D6                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004062DD                 sar     eax, 1Fh
.text:004062E0                 mov     edx, [esp+13Ch+var_74]
.text:004062E7                 mov     [esp+13Ch+var_70], eax
.text:004062EE                 mov     ebx, [esp+13Ch+var_70]
.text:004062F5                 mov     [esp+13Ch+Radix], edx
.text:004062F9                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00406301                 mov     [esp+13Ch+var_130], ebx
.text:00406305                 call    sub_407610
.text:0040630A                 mov     ebp, [esp+13Ch+var_20]
.text:00406311                 mov     ecx, [esp+13Ch+var_24]
.text:00406318                 cmp     edx, ebp
.text:0040631A                 mov     [esp+13Ch+var_11C], ecx
.text:0040631E                 mov     [esp+13Ch+var_118], ebp
.text:00406322                 ja      short loc_406349
.text:00406324                 cmp     edx, [esp+13Ch+var_118]
.text:00406328                 jb      short loc_40632E
.text:0040632A                 cmp     eax, ecx
.text:0040632C                 jnb     short loc_406349
.text:0040632E
.text:0040632E loc_40632E:                             ; CODE XREF: sub_405A50+8D8↑j
.text:0040632E                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00406334                 mov     edx, 1
.text:00406339                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00406340
.text:00406340 loc_406340:                             ; CODE XREF: sub_405A50+93D↓j
.text:00406340                 xor     eax, eax
.text:00406342                 or      eax, edx
.text:00406344                 jmp     loc_405D4A
.text:00406349 ; ---------------------------------------------------------------------------
.text:00406349
.text:00406349 loc_406349:                             ; CODE XREF: sub_405A50+8D2↑j
.text:00406349                                         ; sub_405A50+8DC↑j
.text:00406349                 mov     eax, [esp+13Ch+var_11C]
.text:0040634D                 mov     ebp, [esp+13Ch+var_11C]
.text:00406351                 mov     ebx, [esp+13Ch+var_118]
.text:00406355                 mul     [esp+13Ch+var_74]
.text:0040635C                 mov     [esp+13Ch+var_124], eax
.text:00406360                 mov     eax, [esp+13Ch+var_70]
.text:00406367                 mov     ecx, [esp+13Ch+var_124]
.text:0040636B                 imul    ebp, eax
.text:0040636E                 mov     eax, edx
.text:00406370                 xor     edx, edx
.text:00406372                 mov     [esi], ecx
.text:00406374                 add     eax, ebp
.text:00406376                 mov     ebp, [esp+13Ch+var_74]
.text:0040637D                 imul    ebp, ebx
.text:00406380                 add     eax, ebp
.text:00406382                 mov     [esp+13Ch+var_120], eax
.text:00406386                 mov     ebp, [esp+13Ch+var_120]
.text:0040638A                 mov     [esi+4], ebp
.text:0040638D                 jmp     short loc_406340
.text:0040638F ; ---------------------------------------------------------------------------
.text:0040638F
.text:0040638F loc_40638F:                             ; CODE XREF: sub_405A50+1B9↑j
.text:0040638F                                         ; DATA XREF: sub_405A50:jpt_405C09↑o
.text:0040638F                 mov     [esp+13Ch+var_84], ebx ; jumptable 00405C09 cases 77,109
.text:00406396                 mov     eax, ebx
.text:00406398                 xor     ebp, ebp
.text:0040639A                 mov     [esp+13Ch+var_78], ebp
.text:004063A1                 sar     eax, 1Fh
.text:004063A4                 mov     edx, [esp+13Ch+var_84]
.text:004063AB                 mov     [esp+13Ch+var_80], eax
.text:004063B2                 lea     esi, [esp+13Ch+var_24]
.text:004063B9                 mov     ebp, 1
.text:004063BE                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004063C5                 mov     ecx, [esp+13Ch+var_80]
.text:004063CC                 mov     [esp+13Ch+Radix], edx
.text:004063D0                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004063D8                 mov     [esp+13Ch+var_130], ecx
.text:004063DC                 call    sub_407610
.text:004063E1                 mov     [esp+13Ch+var_8C], eax
.text:004063E8                 mov     [esp+13Ch+var_88], edx
.text:004063EF
.text:004063EF loc_4063EF:                             ; CODE XREF: sub_405A50+9F1↓j
.text:004063EF                 mov     ebx, [esi+4]
.text:004063F2                 mov     edx, [esi]
.text:004063F4                 cmp     [esp+13Ch+var_88], ebx
.text:004063FB                 mov     [esp+13Ch+var_90], ebx
.text:00406402                 mov     [esp+13Ch+var_94], edx
.text:00406409                 ja      short loc_40644F
.text:0040640B                 mov     eax, [esp+13Ch+var_90]
.text:00406412                 cmp     [esp+13Ch+var_88], eax
.text:00406419                 jb      short loc_406424
.text:0040641B                 cmp     [esp+13Ch+var_8C], edx
.text:00406422                 jnb     short loc_40644F
.text:00406424
.text:00406424 loc_406424:                             ; CODE XREF: sub_405A50+9C9↑j
.text:00406424                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040642A                 mov     eax, 1
.text:0040642F                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00406436
.text:00406436 loc_406436:                             ; CODE XREF: sub_405A50+A4C↓j
.text:00406436                 or      [esp+13Ch+var_78], eax
.text:0040643D                 dec     ebp
.text:0040643E                 cmp     ebp, 0FFFFFFFFh
.text:00406441                 jnz     short loc_4063EF
.text:00406443                 mov     eax, [esp+13Ch+var_78]
.text:0040644A                 jmp     loc_405D4A
.text:0040644F ; ---------------------------------------------------------------------------
.text:0040644F
.text:0040644F loc_40644F:                             ; CODE XREF: sub_405A50+9B9↑j
.text:0040644F                                         ; sub_405A50+9D2↑j
.text:0040644F                 mov     ecx, [esp+13Ch+var_80]
.text:00406456                 mov     eax, [esp+13Ch+var_94]
.text:0040645D                 mov     ebx, [esp+13Ch+var_94]
.text:00406464                 mul     [esp+13Ch+var_84]
.text:0040646B                 imul    ebx, ecx
.text:0040646E                 mov     ecx, edx
.text:00406470                 mov     [esp+13Ch+var_124], eax
.text:00406474                 add     ecx, ebx
.text:00406476                 mov     edx, [esp+13Ch+var_84]
.text:0040647D                 mov     ebx, [esp+13Ch+var_90]
.text:00406484                 xor     eax, eax
.text:00406486                 imul    edx, ebx
.text:00406489                 add     ecx, edx
.text:0040648B                 mov     [esp+13Ch+var_120], ecx
.text:0040648F                 mov     ebx, [esp+13Ch+var_120]
.text:00406493                 mov     ecx, [esp+13Ch+var_124]
.text:00406497                 mov     [esi+4], ebx
.text:0040649A                 mov     [esi], ecx
.text:0040649C                 jmp     short loc_406436
.text:0040649E ; ---------------------------------------------------------------------------
.text:0040649E
.text:0040649E loc_40649E:                             ; CODE XREF: sub_405A50+1B9↑j
.text:0040649E                                         ; DATA XREF: sub_405A50:jpt_405C09↑o
.text:0040649E                 mov     [esp+13Ch+var_C4], ebx ; jumptable 00405C09 cases 84,116
.text:004064A2                 mov     eax, ebx
.text:004064A4                 xor     ebp, ebp
.text:004064A6                 mov     [esp+13Ch+var_B8], ebp
.text:004064AD                 sar     eax, 1Fh
.text:004064B0                 mov     edx, [esp+13Ch+var_C4]
.text:004064B4                 mov     [esp+13Ch+var_C0], eax
.text:004064B8                 lea     esi, [esp+13Ch+var_24]
.text:004064BF                 mov     ebp, 3
.text:004064C4                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004064CB                 mov     ebx, [esp+13Ch+var_C0]
.text:004064CF                 mov     [esp+13Ch+Radix], edx
.text:004064D3                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004064DB                 mov     [esp+13Ch+var_130], ebx
.text:004064DF                 call    sub_407610
.text:004064E4                 mov     [esp+13Ch+var_CC], eax
.text:004064E8                 mov     [esp+13Ch+var_C8], edx
.text:004064EC
.text:004064EC loc_4064EC:                             ; CODE XREF: sub_405A50+ADC↓j
.text:004064EC                 mov     ebx, [esi+4]
.text:004064EF                 mov     edx, [esi]
.text:004064F1                 cmp     [esp+13Ch+var_C8], ebx
.text:004064F5                 mov     [esp+13Ch+var_D0], ebx
.text:004064F9                 mov     [esp+13Ch+var_D4], edx
.text:004064FD                 ja      short loc_40653A
.text:004064FF                 mov     eax, [esp+13Ch+var_D0]
.text:00406503                 cmp     [esp+13Ch+var_C8], eax
.text:00406507                 jb      short loc_40650F
.text:00406509                 cmp     [esp+13Ch+var_CC], edx
.text:0040650D                 jnb     short loc_40653A
.text:0040650F
.text:0040650F loc_40650F:                             ; CODE XREF: sub_405A50+AB7↑j
.text:0040650F                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00406515                 mov     eax, 1
.text:0040651A                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00406521
.text:00406521 loc_406521:                             ; CODE XREF: sub_405A50+B25↓j
.text:00406521                 or      [esp+13Ch+var_B8], eax
.text:00406528                 dec     ebp
.text:00406529                 cmp     ebp, 0FFFFFFFFh
.text:0040652C                 jnz     short loc_4064EC
.text:0040652E                 mov     eax, [esp+13Ch+var_B8]
.text:00406535                 jmp     loc_405D4A
.text:0040653A ; ---------------------------------------------------------------------------
.text:0040653A
.text:0040653A loc_40653A:                             ; CODE XREF: sub_405A50+AAD↑j
.text:0040653A                                         ; sub_405A50+ABD↑j
.text:0040653A                 mov     ecx, [esp+13Ch+var_C0]
.text:0040653E                 mov     eax, [esp+13Ch+var_D4]
.text:00406542                 mov     ebx, [esp+13Ch+var_D4]
.text:00406546                 mul     [esp+13Ch+var_C4]
.text:0040654A                 imul    ebx, ecx
.text:0040654D                 mov     ecx, edx
.text:0040654F                 mov     [esp+13Ch+var_124], eax
.text:00406553                 add     ecx, ebx
.text:00406555                 mov     edx, [esp+13Ch+var_C4]
.text:00406559                 mov     ebx, [esp+13Ch+var_D0]
.text:0040655D                 xor     eax, eax
.text:0040655F                 imul    edx, ebx
.text:00406562                 add     ecx, edx
.text:00406564                 mov     [esp+13Ch+var_120], ecx
.text:00406568                 mov     ebx, [esp+13Ch+var_120]
.text:0040656C                 mov     ecx, [esp+13Ch+var_124]
.text:00406570                 mov     [esi+4], ebx
.text:00406573                 mov     [esi], ecx
.text:00406575                 jmp     short loc_406521
.text:00406577 ; ---------------------------------------------------------------------------
.text:00406577
.text:00406577 loc_406577:                             ; CODE XREF: sub_405A50+1B9↑j
.text:00406577                                         ; DATA XREF: sub_405A50:jpt_405C09↑o
.text:00406577                 mov     [esp+13Ch+Radix], 2 ; jumptable 00405C09 case 119
.text:0040657F                 lea     ebp, [esp+13Ch+var_24]
.text:00406586                 mov     [esp+13Ch+var_130], 0
.text:0040658E                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00406595                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040659D                 call    sub_407610
.text:004065A2                 mov     esi, [esp+13Ch+var_20]
.text:004065A9                 mov     ecx, [esp+13Ch+var_24]
.text:004065B0                 cmp     edx, esi
.text:004065B2                 ja      short loc_4065C2
.text:004065B4                 jb      loc_405D75
.text:004065BA                 cmp     eax, ecx
.text:004065BC                 jb      loc_405D75
.text:004065C2
.text:004065C2 loc_4065C2:                             ; CODE XREF: sub_405A50+B62↑j
.text:004065C2                 mov     esi, [ebp+0]
.text:004065C5                 mov     eax, 2
.text:004065CA                 mov     ecx, [ebp+4]
.text:004065CD                 mul     esi
.text:004065CF                 lea     edx, [edx+ecx*2]
.text:004065D2                 jmp     loc_405D42
.text:004065D7 ; ---------------------------------------------------------------------------
.text:004065D7
.text:004065D7 loc_4065D7:                             ; CODE XREF: sub_405A50+196↑j
.text:004065D7                                         ; sub_405A50+1A8↑j
.text:004065D7                 mov     esi, 2
.text:004065DC                 mov     ebx, 3E8h
.text:004065E1                 mov     [esp+13Ch+var_30], esi
.text:004065E8                 jmp     loc_405BFE
.text:004065ED ; ---------------------------------------------------------------------------
.text:004065ED
.text:004065ED loc_4065ED:                             ; CODE XREF: sub_405A50+19F↑j
.text:004065ED                 cmp     eax, 69h ; 'i'
.text:004065F0                 jnz     loc_405BFE
.text:004065F6                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:004065FA                 jnz     loc_405BFE
.text:00406600                 mov     eax, 3
.text:00406605                 mov     [esp+13Ch+var_30], eax
.text:0040660C                 jmp     loc_405BFE
.text:00406611 ; ---------------------------------------------------------------------------
.text:00406611
.text:00406611 loc_406611:                             ; CODE XREF: sub_405A50+187↑j
.text:00406611                 mov     edx, [edi]
.text:00406613                 jmp     loc_405BFE
.text:00406618 ; ---------------------------------------------------------------------------
.text:00406618
.text:00406618 loc_406618:                             ; CODE XREF: sub_405A50+E2↑j
.text:00406618                 mov     edx, [esp+13Ch+var_24]
.text:0040661F                 mov     ecx, [esp+13Ch+var_20]
.text:00406626                 mov     edi, [esp+13Ch+arg_C]
.text:0040662D                 mov     [edi], edx
.text:0040662F                 mov     [edi+4], ecx
.text:00406632                 jmp     loc_405B5B
.text:00406637 ; ---------------------------------------------------------------------------
.text:00406637
.text:00406637 loc_406637:                             ; CODE XREF: sub_405A50+D3↑j
.text:00406637                 call    _errno
.text:0040663C                 cmp     dword ptr [eax], 22h ; '"'
.text:0040663F                 jnz     short loc_406652
.text:00406641                 mov     esi, 1
.text:00406646                 mov     [esp+13Ch+var_28], esi
.text:0040664D                 jmp     loc_405B29
.text:00406652 ; ---------------------------------------------------------------------------
.text:00406652
.text:00406652 loc_406652:                             ; CODE XREF: sub_405A50+BEF↑j
.text:00406652                                         ; sub_405A50+C15↓j ...
.text:00406652                 mov     eax, 4
.text:00406657                 jmp     loc_405B62
.text:0040665C ; ---------------------------------------------------------------------------
.text:0040665C
.text:0040665C loc_40665C:                             ; CODE XREF: sub_405A50+C4↑j
.text:0040665C                 mov     ebx, [esp+13Ch+Str]
.text:00406663                 test    ebx, ebx
.text:00406665                 jz      short loc_406652
.text:00406667                 movzx   eax, byte ptr [eax]
.text:0040666A                 test    al, al
.text:0040666C                 jz      short loc_406652
.text:0040666E                 mov     esi, [esp+13Ch+Str]
.text:00406675                 movsx   ebp, al
.text:00406678                 mov     [esp+13Ch+Type], ebp ; Val
.text:0040667C                 mov     [esp+13Ch+C], esi ; Str
.text:0040667F                 call    strchr
.text:00406684                 test    eax, eax
.text:00406686                 jz      short loc_406652
.text:00406688                 mov     ecx, 1
.text:0040668D                 xor     edx, edx
.text:0040668F                 mov     [esp+13Ch+var_24], ecx
.text:00406696                 mov     [esp+13Ch+var_20], edx
.text:0040669D                 jmp     loc_405B29
.text:004066A2 ; ---------------------------------------------------------------------------
.text:004066A2
.text:004066A2 loc_4066A2:                             ; CODE XREF: sub_405A50+61↑j
.text:004066A2                 mov     eax, ds:_pctype
.text:004066A7                 mov     ecx, [eax]
.text:004066A9                 movzx   eax, word ptr [ecx+edx*2]
.text:004066AD                 and     eax, 8
.text:004066B0                 jmp     loc_405AC7
.text:004066B5 ; ---------------------------------------------------------------------------
.text:004066B5
.text:004066B5 loc_4066B5:                             ; CODE XREF: sub_405A50+33↑j
.text:004066B5                 lea     edi, [esp+13Ch+var_18]
.text:004066BC                 jmp     loc_405A89
.text:004066C1 ; ---------------------------------------------------------------------------
.text:004066C1
.text:004066C1 loc_4066C1:                             ; CODE XREF: sub_405A50+24↑j
.text:004066C1                 mov     [esp+13Ch+Radix], 70h ; 'p'
.text:004066C9                 mov     [esp+13Ch+Type], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:004066D1                 mov     [esp+13Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:004066D8                 call    _assert
.text:004066D8 sub_405A50      endp
.text:004066D8
.text:004066D8 ; ---------------------------------------------------------------------------
.text:004066DD                 align 10h
.text:004066E0
.text:004066E0 ; =============== S U B R O U T I N E =======================================
.text:004066E0
.text:004066E0
.text:004066E0 ; int __cdecl sub_4066E0(char *, int, int, int)
.text:004066E0 sub_4066E0      proc near               ; CODE XREF: sub_4044E0+45↑p
.text:004066E0                                         ; .text:00406A32↓p
.text:004066E0
.text:004066E0 Str             = dword ptr -2Ch
.text:004066E0 Str2            = dword ptr -28h
.text:004066E0 MaxCount        = dword ptr -24h
.text:004066E0 var_20          = dword ptr -20h
.text:004066E0 var_19          = byte ptr -19h
.text:004066E0 var_18          = dword ptr -18h
.text:004066E0 var_14          = dword ptr -14h
.text:004066E0 arg_0           = dword ptr  4
.text:004066E0 arg_4           = dword ptr  8
.text:004066E0 arg_8           = dword ptr  0Ch
.text:004066E0 arg_C           = dword ptr  10h
.text:004066E0
.text:004066E0                 push    ebp
.text:004066E1                 push    edi
.text:004066E2                 push    esi
.text:004066E3                 push    ebx
.text:004066E4                 sub     esp, 1Ch
.text:004066E7                 xor     ebx, ebx
.text:004066E9                 mov     [esp+2Ch+var_18], 0FFFFFFFFh
.text:004066F1                 mov     edx, [esp+2Ch+arg_0]
.text:004066F5                 mov     ebp, [esp+2Ch+arg_C]
.text:004066F9                 mov     [esp+2Ch+var_19], 0
.text:004066FE                 mov     [esp+2Ch+Str], edx ; Str
.text:00406701                 call    strlen
.text:00406706                 mov     [esp+2Ch+var_14], eax
.text:0040670A                 mov     ecx, [esp+2Ch+arg_4]
.text:0040670E                 mov     eax, [ecx]
.text:00406710                 test    eax, eax
.text:00406712                 jz      short loc_406758
.text:00406714                 mov     [esp+2Ch+var_20], 0
.text:0040671C                 lea     esi, [esi+0]
.text:00406720
.text:00406720 loc_406720:                             ; CODE XREF: sub_4066E0+6A↓j
.text:00406720                 mov     [esp+2Ch+Str], eax ; Str1
.text:00406723                 mov     esi, [esp+2Ch+var_14]
.text:00406727                 mov     ecx, [esp+2Ch+arg_0]
.text:0040672B                 mov     [esp+2Ch+MaxCount], esi ; MaxCount
.text:0040672F                 mov     [esp+2Ch+Str2], ecx ; Str2
.text:00406733                 call    strncmp
.text:00406738                 test    eax, eax
.text:0040673A                 jz      short loc_406766
.text:0040673C
.text:0040673C loc_40673C:                             ; CODE XREF: sub_4066E0+CA↓j
.text:0040673C                                         ; sub_4066E0+D1↓j ...
.text:0040673C                 add     [esp+2Ch+var_20], ebp
.text:00406740                 inc     ebx
.text:00406741                 mov     esi, [esp+2Ch+arg_4]
.text:00406745                 mov     eax, [esi+ebx*4]
.text:00406748                 test    eax, eax
.text:0040674A                 jnz     short loc_406720
.text:0040674C                 cmp     [esp+2Ch+var_19], 0
.text:00406751                 mov     edx, 0FFFFFFFEh
.text:00406756                 jnz     short loc_40675C
.text:00406758
.text:00406758 loc_406758:                             ; CODE XREF: sub_4066E0+32↑j
.text:00406758                 mov     edx, [esp+2Ch+var_18]
.text:0040675C
.text:0040675C loc_40675C:                             ; CODE XREF: sub_4066E0+76↑j
.text:0040675C                                         ; sub_4066E0+9B↓j
.text:0040675C                 add     esp, 1Ch
.text:0040675F                 mov     eax, edx
.text:00406761                 pop     ebx
.text:00406762                 pop     esi
.text:00406763                 pop     edi
.text:00406764                 pop     ebp
.text:00406765                 retn
.text:00406766 ; ---------------------------------------------------------------------------
.text:00406766
.text:00406766 loc_406766:                             ; CODE XREF: sub_4066E0+5A↑j
.text:00406766                 mov     eax, [esp+2Ch+arg_4]
.text:0040676A                 mov     edi, [eax+ebx*4]
.text:0040676D                 mov     [esp+2Ch+Str], edi ; Str
.text:00406770                 call    strlen
.text:00406775                 cmp     eax, [esp+2Ch+var_14]
.text:00406779                 mov     edx, ebx
.text:0040677B                 jz      short loc_40675C
.text:0040677D                 cmp     [esp+2Ch+var_18], 0FFFFFFFFh
.text:00406782                 jz      short loc_4067B3
.text:00406784                 mov     ecx, [esp+2Ch+arg_8]
.text:00406788                 test    ecx, ecx
.text:0040678A                 jz      short loc_4067AC
.text:0040678C                 cld
.text:0040678D                 mov     edi, [esp+2Ch+var_18]
.text:00406791                 mov     ecx, ebp
.text:00406793                 mov     esi, [esp+2Ch+arg_8]
.text:00406797                 mov     edx, [esp+2Ch+var_20]
.text:0040679B                 imul    edi, ebp
.text:0040679E                 add     esi, edi
.text:004067A0                 mov     edi, [esp+2Ch+arg_8]
.text:004067A4                 add     edi, edx
.text:004067A6                 cmp     ebp, ebp
.text:004067A8                 repe cmpsb
.text:004067AA                 jz      short loc_40673C
.text:004067AC
.text:004067AC loc_4067AC:                             ; CODE XREF: sub_4066E0+AA↑j
.text:004067AC                 mov     [esp+2Ch+var_19], 1
.text:004067B1                 jmp     short loc_40673C
.text:004067B3 ; ---------------------------------------------------------------------------
.text:004067B3
.text:004067B3 loc_4067B3:                             ; CODE XREF: sub_4066E0+A2↑j
.text:004067B3                 mov     [esp+2Ch+var_18], ebx
.text:004067B7                 jmp     short loc_40673C
.text:004067B7 sub_4066E0      endp
.text:004067B7
.text:004067B7 ; ---------------------------------------------------------------------------
.text:004067B9 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.text:004067B9                                         ; DATA XREF: .text:00406812↓o
.text:004067B9                                         ; .text:00406A5A↓o
.text:004067D6 aInvalidArgumen db 'invalid argument %s for %s',0
.text:004067D6                                         ; DATA XREF: .text:loc_406880↓o
.text:004067D6                                         ; .text:loc_406BF6↓o
.text:004067F1 ; ---------------------------------------------------------------------------
.text:004067F1                 jmp     short loc_406800
.text:004067F1 ; ---------------------------------------------------------------------------
.text:004067F3                 align 10h
.text:00406800
.text:00406800 loc_406800:                             ; CODE XREF: .text:004067F1↑j
.text:00406800                 sub     esp, 1Ch
.text:00406803                 cmp     dword ptr [esp+28h], 0FFFFFFFFh
.text:00406808                 mov     [esp+14h], ebx
.text:0040680C                 mov     [esp+18h], esi
.text:00406810                 jz      short loc_406880
.text:00406812                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:00406819
.text:00406819 loc_406819:                             ; CODE XREF: .text:00406887↓j
.text:00406819                 call    ds:libintl_gettext
.text:0040681F                 mov     dword ptr [esp], 1
.text:00406826                 mov     edx, [esp+20h]
.text:0040682A                 mov     esi, eax
.text:0040682C                 mov     [esp+4], edx
.text:00406830                 call    sub_406FC0
.text:00406835                 mov     dword ptr [esp+4], 5
.text:0040683D                 mov     edx, [esp+24h]
.text:00406841                 mov     ebx, eax
.text:00406843                 mov     dword ptr [esp], 0
.text:0040684A                 mov     [esp+8], edx
.text:0040684E                 call    sub_405400
.text:00406853                 mov     [esp+0Ch], eax
.text:00406857                 mov     [esp+10h], ebx
.text:0040685B                 mov     [esp+8], esi
.text:0040685F                 mov     dword ptr [esp+4], 0
.text:00406867                 mov     dword ptr [esp], 0
.text:0040686E                 call    sub_407070
.text:00406873                 mov     ebx, [esp+14h]
.text:00406877                 mov     esi, [esp+18h]
.text:0040687B                 add     esp, 1Ch
.text:0040687E                 retn
.text:0040687E ; ---------------------------------------------------------------------------
.text:0040687F                 align 10h
.text:00406880
.text:00406880 loc_406880:                             ; CODE XREF: .text:00406810↑j
.text:00406880                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:00406887                 jmp     short loc_406819
.text:00406887 ; ---------------------------------------------------------------------------
.text:00406889 aValidArguments db 'Valid arguments are:',0
.text:00406889                                         ; DATA XREF: .text:004068D3↓o
.text:00406889                                         ; .text:00406ACB↓o
.text:0040689E ; ---------------------------------------------------------------------------
.text:0040689E
.text:0040689E loc_40689E:                             ; DATA XREF: .text:0040694D↓o
.text:0040689E                                         ; .text:loc_406B38↓o
.text:0040689E                 or      ah, [eax]
.text:004068A0                 and     ds:73256020h, ch
.text:004068A6                 daa
.text:004068A7                 add     [eax], ch
.text:004068AA                 pusha
.text:004068AB                 and     eax, 90002773h
.text:004068B0                 push    ebp
.text:004068B1                 push    edi
.text:004068B2                 push    esi
.text:004068B3                 push    ebx
.text:004068B4                 sub     esp, 2Ch
.text:004068B7                 mov     ecx, [esp+40h]
.text:004068BB                 mov     dword ptr [esp+1Ch], 0
.text:004068C3                 mov     eax, [esp+44h]
.text:004068C7                 mov     ebp, [esp+48h]
.text:004068CB                 mov     [esp+28h], ecx
.text:004068CF                 mov     [esp+24h], eax
.text:004068D3                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:004068DA                 call    ds:libintl_gettext
.text:004068E0                 mov     edx, ds:_iob
.text:004068E6                 add     edx, 40h ; '@'
.text:004068E9                 mov     [esp], edx
.text:004068EC                 mov     [esp+4], eax
.text:004068F0                 call    fprintf
.text:004068F5                 mov     dword ptr [esp+20h], 0
.text:004068FD                 mov     edx, [esp+28h]
.text:00406901                 mov     eax, [edx]
.text:00406903                 test    eax, eax
.text:00406905                 jz      short loc_406985
.text:00406907                 mov     dword ptr [esp+14h], 0
.text:0040690F                 mov     esi, [esp+24h]
.text:00406913                 mov     ebx, eax
.text:00406915                 mov     [esp+18h], esi
.text:00406919                 lea     esi, [esi+0]
.text:00406920
.text:00406920 loc_406920:                             ; CODE XREF: .text:00406983↓j
.text:00406920                 mov     edi, [esp+20h]
.text:00406924                 test    edi, edi
.text:00406926                 jz      short loc_406943
.text:00406928                 cld
.text:00406929                 mov     edi, [esp+24h]
.text:0040692D                 mov     ecx, ebp
.text:0040692F                 mov     edx, [esp+14h]
.text:00406933                 mov     esi, [esp+1Ch]
.text:00406937                 add     edi, edx
.text:00406939                 cmp     ebp, ebp
.text:0040693B                 repe cmpsb
.text:0040693D                 jz      loc_4069D0
.text:00406943
.text:00406943 loc_406943:                             ; CODE XREF: .text:00406926↑j
.text:00406943                 mov     [esp+8], ebx
.text:00406947                 mov     ecx, ds:_iob
.text:0040694D                 mov     dword ptr [esp+4], offset loc_40689E
.text:00406955                 add     ecx, 40h ; '@'
.text:00406958                 mov     [esp], ecx
.text:0040695B                 call    fprintf
.text:00406960                 mov     ebx, [esp+18h]
.text:00406964                 mov     [esp+1Ch], ebx
.text:00406968
.text:00406968 loc_406968:                             ; CODE XREF: .text:004069ED↓j
.text:00406968                 inc     dword ptr [esp+20h]
.text:0040696C                 mov     eax, [esp+28h]
.text:00406970                 add     [esp+14h], ebp
.text:00406974                 mov     edx, [esp+20h]
.text:00406978                 add     [esp+18h], ebp
.text:0040697C                 mov     edi, [eax+edx*4]
.text:0040697F                 test    edi, edi
.text:00406981                 mov     ebx, edi
.text:00406983                 jnz     short loc_406920
.text:00406985
.text:00406985 loc_406985:                             ; CODE XREF: .text:00406905↑j
.text:00406985                 mov     ebx, ds:_iob
.text:0040698B                 mov     ebp, [ebx+44h]
.text:0040698E                 dec     ebp
.text:0040698F                 mov     [ebx+44h], ebp
.text:00406992                 test    ebp, ebp
.text:00406994                 js      short loc_4069AD
.text:00406996                 mov     ecx, ds:_iob
.text:0040699C                 mov     esi, [ecx+40h]
.text:0040699F                 mov     byte ptr [esi], 0Ah
.text:004069A2                 inc     dword ptr [ecx+40h]
.text:004069A5                 add     esp, 2Ch
.text:004069A8                 pop     ebx
.text:004069A9                 pop     esi
.text:004069AA                 pop     edi
.text:004069AB                 pop     ebp
.text:004069AC                 retn
.text:004069AD ; ---------------------------------------------------------------------------
.text:004069AD
.text:004069AD loc_4069AD:                             ; CODE XREF: .text:00406994↑j
.text:004069AD                 mov     dword ptr [esp+40h], 0Ah
.text:004069B5                 mov     edi, ds:_iob
.text:004069BB                 add     edi, 40h ; '@'
.text:004069BE                 mov     [esp+44h], edi
.text:004069C2                 add     esp, 2Ch
.text:004069C5                 pop     ebx
.text:004069C6                 pop     esi
.text:004069C7                 pop     edi
.text:004069C8                 pop     ebp
.text:004069C9                 jmp     _flsbuf
.text:004069C9 ; ---------------------------------------------------------------------------
.text:004069CE                 align 10h
.text:004069D0
.text:004069D0 loc_4069D0:                             ; CODE XREF: .text:0040693D↑j
.text:004069D0                 mov     [esp+8], ebx
.text:004069D4                 mov     esi, ds:_iob
.text:004069DA                 mov     dword ptr [esp+4], 4068A8h
.text:004069E2                 add     esi, 40h ; '@'
.text:004069E5                 mov     [esp], esi
.text:004069E8                 call    fprintf
.text:004069ED                 jmp     loc_406968
.text:004069ED ; ---------------------------------------------------------------------------
.text:004069F2                 align 10h
.text:00406A00                 sub     esp, 4Ch
.text:00406A03                 mov     edx, [esp+60h]
.text:00406A07                 mov     [esp+3Ch], ebx
.text:00406A0B                 mov     ebx, [esp+5Ch]
.text:00406A0F                 mov     [esp+40h], esi
.text:00406A13                 mov     esi, [esp+54h]
.text:00406A17                 mov     [esp+48h], ebp
.text:00406A1B                 mov     ebp, [esp+58h]
.text:00406A1F                 mov     [esp+0Ch], edx
.text:00406A23                 mov     [esp+44h], edi
.text:00406A27                 mov     [esp+8], ebx
.text:00406A2B                 mov     [esp+4], ebp
.text:00406A2F                 mov     [esp], esi
.text:00406A32                 call    sub_4066E0
.text:00406A37                 test    eax, eax
.text:00406A39                 mov     edx, eax
.text:00406A3B                 js      short loc_406A53
.text:00406A3D
.text:00406A3D loc_406A3D:                             ; CODE XREF: .text:00406BAA↓j
.text:00406A3D                 mov     ebx, [esp+3Ch]
.text:00406A41                 mov     eax, edx
.text:00406A43                 mov     esi, [esp+40h]
.text:00406A47                 mov     edi, [esp+44h]
.text:00406A4B                 mov     ebp, [esp+48h]
.text:00406A4F                 add     esp, 4Ch
.text:00406A52                 retn
.text:00406A53 ; ---------------------------------------------------------------------------
.text:00406A53
.text:00406A53 loc_406A53:                             ; CODE XREF: .text:00406A3B↑j
.text:00406A53                 inc     eax
.text:00406A54                 jz      loc_406BF6
.text:00406A5A                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:00406A61
.text:00406A61 loc_406A61:                             ; CODE XREF: .text:00406BFD↓j
.text:00406A61                 call    ds:libintl_gettext
.text:00406A67                 mov     dword ptr [esp], 1
.text:00406A6E                 mov     edi, [esp+50h]
.text:00406A72                 mov     [esp+38h], eax
.text:00406A76                 mov     [esp+4], edi
.text:00406A7A                 call    sub_406FC0
.text:00406A7F                 mov     [esp+34h], eax
.text:00406A83                 mov     [esp+8], esi
.text:00406A87                 mov     dword ptr [esp+4], 5
.text:00406A8F                 mov     dword ptr [esp], 0
.text:00406A96                 call    sub_405400
.text:00406A9B                 mov     [esp+0Ch], eax
.text:00406A9F                 mov     ecx, [esp+34h]
.text:00406AA3                 mov     eax, [esp+38h]
.text:00406AA7                 mov     dword ptr [esp+4], 0
.text:00406AAF                 mov     [esp+10h], ecx
.text:00406AB3                 mov     [esp+8], eax
.text:00406AB7                 mov     dword ptr [esp], 0
.text:00406ABE                 call    sub_407070
.text:00406AC3                 mov     dword ptr [esp+2Ch], 0
.text:00406ACB                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:00406AD2                 call    ds:libintl_gettext
.text:00406AD8                 mov     edx, ds:_iob
.text:00406ADE                 add     edx, 40h ; '@'
.text:00406AE1                 mov     [esp+4], eax
.text:00406AE5                 mov     [esp], edx
.text:00406AE8                 call    fprintf
.text:00406AED                 mov     dword ptr [esp+30h], 0
.text:00406AF5                 mov     eax, [ebp+0]
.text:00406AF8                 test    eax, eax
.text:00406AFA                 jz      loc_406B81
.text:00406B00                 mov     [esp+28h], eax
.text:00406B04                 mov     [esp+24h], ebx
.text:00406B08                 mov     dword ptr [esp+20h], 0
.text:00406B10
.text:00406B10 loc_406B10:                             ; CODE XREF: .text:00406B7F↓j
.text:00406B10                 mov     esi, [esp+30h]
.text:00406B14                 test    esi, esi
.text:00406B16                 jz      short loc_406B38
.text:00406B18                 cld
.text:00406B19                 mov     eax, [esp+20h]
.text:00406B1D                 mov     edx, [esp+60h]
.text:00406B21                 mov     esi, [esp+2Ch]
.text:00406B25                 lea     ecx, [eax+ebx]
.text:00406B28                 mov     edi, ecx
.text:00406B2A                 mov     ecx, [esp+60h]
.text:00406B2E                 cmp     edx, edx
.text:00406B30                 repe cmpsb
.text:00406B32                 jz      loc_406BD0
.text:00406B38
.text:00406B38 loc_406B38:                             ; CODE XREF: .text:00406B16↑j
.text:00406B38                 mov     dword ptr [esp+4], offset loc_40689E
.text:00406B40                 mov     esi, ds:_iob
.text:00406B46                 mov     ecx, [esp+28h]
.text:00406B4A                 add     esi, 40h ; '@'
.text:00406B4D                 mov     [esp+8], ecx
.text:00406B51                 mov     [esp], esi
.text:00406B54                 call    fprintf
.text:00406B59                 mov     edi, [esp+24h]
.text:00406B5D                 mov     [esp+2Ch], edi
.text:00406B61
.text:00406B61 loc_406B61:                             ; CODE XREF: .text:00406BF1↓j
.text:00406B61                 inc     dword ptr [esp+30h]
.text:00406B65                 mov     ecx, [esp+60h]
.text:00406B69                 add     [esp+20h], ecx
.text:00406B6D                 mov     esi, [esp+30h]
.text:00406B71                 add     [esp+24h], ecx
.text:00406B75                 mov     edi, [ebp+esi*4+0]
.text:00406B79                 test    edi, edi
.text:00406B7B                 mov     [esp+28h], edi
.text:00406B7F                 jnz     short loc_406B10
.text:00406B81
.text:00406B81 loc_406B81:                             ; CODE XREF: .text:00406AFA↑j
.text:00406B81                 mov     ebp, ds:_iob
.text:00406B87                 mov     ebx, [ebp+44h]
.text:00406B8A                 dec     ebx
.text:00406B8B                 mov     [ebp+44h], ebx
.text:00406B8E                 test    ebx, ebx
.text:00406B90                 js      short loc_406BAF
.text:00406B92                 mov     edi, ds:_iob
.text:00406B98                 mov     eax, [edi+40h]
.text:00406B9B                 mov     byte ptr [eax], 0Ah
.text:00406B9E                 inc     dword ptr [edi+40h]
.text:00406BA1
.text:00406BA1 loc_406BA1:                             ; CODE XREF: .text:00406BC8↓j
.text:00406BA1                 call    dword ptr [esp+64h]
.text:00406BA5                 mov     edx, 0FFFFFFFFh
.text:00406BAA                 jmp     loc_406A3D
.text:00406BAF ; ---------------------------------------------------------------------------
.text:00406BAF
.text:00406BAF loc_406BAF:                             ; CODE XREF: .text:00406B90↑j
.text:00406BAF                 mov     dword ptr [esp], 0Ah
.text:00406BB6                 mov     edx, ds:_iob
.text:00406BBC                 add     edx, 40h ; '@'
.text:00406BBF                 mov     [esp+4], edx
.text:00406BC3                 call    _flsbuf
.text:00406BC8                 jmp     short loc_406BA1
.text:00406BC8 ; ---------------------------------------------------------------------------
.text:00406BCA                 align 10h
.text:00406BD0
.text:00406BD0 loc_406BD0:                             ; CODE XREF: .text:00406B32↑j
.text:00406BD0                 mov     dword ptr [esp+4], 4068A8h
.text:00406BD8                 mov     edx, ds:_iob
.text:00406BDE                 mov     eax, [esp+28h]
.text:00406BE2                 add     edx, 40h ; '@'
.text:00406BE5                 mov     [esp+8], eax
.text:00406BE9                 mov     [esp], edx
.text:00406BEC                 call    fprintf
.text:00406BF1                 jmp     loc_406B61
.text:00406BF6 ; ---------------------------------------------------------------------------
.text:00406BF6
.text:00406BF6 loc_406BF6:                             ; CODE XREF: .text:00406A54↑j
.text:00406BF6                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:00406BFD                 jmp     loc_406A61
.text:00406BFD ; ---------------------------------------------------------------------------
.text:00406C02                 align 10h
.text:00406C10                 push    ebp
.text:00406C11                 push    edi
.text:00406C12                 push    esi
.text:00406C13                 push    ebx
.text:00406C14                 sub     esp, 4
.text:00406C17                 mov     ecx, [esp+1Ch]
.text:00406C1B                 mov     dword ptr [esp], 0
.text:00406C22                 mov     ebx, [esp+24h]
.text:00406C26                 mov     edx, [ecx]
.text:00406C28                 test    edx, edx
.text:00406C2A                 jz      short loc_406C55
.text:00406C2C                 cld
.text:00406C2D                 xor     ebp, ebp
.text:00406C2F                 nop
.text:00406C30
.text:00406C30 loc_406C30:                             ; CODE XREF: .text:00406C53↓j
.text:00406C30                 mov     edi, [esp+20h]
.text:00406C34                 mov     ecx, ebx
.text:00406C36                 mov     esi, [esp+18h]
.text:00406C3A                 add     edi, ebp
.text:00406C3C                 cmp     ebx, ebx
.text:00406C3E                 repe cmpsb
.text:00406C40                 jz      short loc_406C5D
.text:00406C42                 inc     dword ptr [esp]
.text:00406C45                 add     ebp, ebx
.text:00406C47                 mov     eax, [esp+1Ch]
.text:00406C4B                 mov     ecx, [esp]
.text:00406C4E                 mov     edi, [eax+ecx*4]
.text:00406C51                 test    edi, edi
.text:00406C53                 jnz     short loc_406C30
.text:00406C55
.text:00406C55 loc_406C55:                             ; CODE XREF: .text:00406C2A↑j
.text:00406C55                 xor     eax, eax
.text:00406C57
.text:00406C57 loc_406C57:                             ; CODE XREF: .text:00406C67↓j
.text:00406C57                 pop     ebp
.text:00406C58                 pop     ebx
.text:00406C59                 pop     esi
.text:00406C5A                 pop     edi
.text:00406C5B                 pop     ebp
.text:00406C5C                 retn
.text:00406C5D ; ---------------------------------------------------------------------------
.text:00406C5D
.text:00406C5D loc_406C5D:                             ; CODE XREF: .text:00406C40↑j
.text:00406C5D                 mov     esi, [esp]
.text:00406C60                 mov     ebx, [esp+1Ch]
.text:00406C64                 mov     eax, [ebx+esi*4]
.text:00406C67                 jmp     short loc_406C57
.text:00406C67 ; ---------------------------------------------------------------------------
.text:00406C69                 align 10h
.text:00406C70
.text:00406C70 ; =============== S U B R O U T I N E =======================================
.text:00406C70
.text:00406C70 ; Attributes: noreturn
.text:00406C70
.text:00406C70 sub_406C70      proc near               ; DATA XREF: .data:00408050↓o
.text:00406C70
.text:00406C70 Code            = dword ptr -0Ch
.text:00406C70
.text:00406C70                 sub     esp, 0Ch
.text:00406C73                 mov     [esp+0Ch+Code], 1 ; Code
.text:00406C7A                 call    sub_4018A0
.text:00406C7A sub_406C70      endp
.text:00406C7A
.text:00406C7A ; ---------------------------------------------------------------------------
.text:00406C7F                 db  83h ; ƒ
.text:00406C80                 db 0C4h ; Ä
.text:00406C81                 db  0Ch
.text:00406C82                 db 0C3h ; Ã
.text:00406C83                 align 10h
.text:00406C90                 sub     esp, 0Ch
.text:00406C93                 xor     edx, edx
.text:00406C95                 mov     ecx, [esp+14h]
.text:00406C99                 mov     [esp+8], ebx
.text:00406C9D                 mov     eax, 0FFFFFFFFh
.text:00406CA2                 mov     ebx, [esp+10h]
.text:00406CA6                 div     ecx
.text:00406CA8                 cmp     eax, ebx
.text:00406CAA                 jb      short loc_406CC9
.text:00406CAC                 mov     edx, ebx
.text:00406CAE                 imul    edx, ecx
.text:00406CB1                 mov     [esp], edx
.text:00406CB4                 call    malloc
.text:00406CB9                 test    eax, eax
.text:00406CBB                 jz      short loc_406CC5
.text:00406CBD
.text:00406CBD loc_406CBD:                             ; CODE XREF: .text:00406CC7↓j
.text:00406CBD                 mov     ebx, [esp+8]
.text:00406CC1                 add     esp, 0Ch
.text:00406CC4                 retn
.text:00406CC5 ; ---------------------------------------------------------------------------
.text:00406CC5
.text:00406CC5 loc_406CC5:                             ; CODE XREF: .text:00406CBB↑j
.text:00406CC5                 test    ebx, ebx
.text:00406CC7                 jz      short loc_406CBD
.text:00406CC9
.text:00406CC9 loc_406CC9:                             ; CODE XREF: .text:00406CAA↑j
.text:00406CC9                 call    sub_406F80
.text:00406CC9 ; ---------------------------------------------------------------------------
.text:00406CCE                 align 10h
.text:00406CD0
.text:00406CD0 ; =============== S U B R O U T I N E =======================================
.text:00406CD0
.text:00406CD0
.text:00406CD0 ; int __cdecl sub_406CD0(size_t)
.text:00406CD0 sub_406CD0      proc near               ; CODE XREF: .text:00405149↑p
.text:00406CD0                                         ; .text:00405326↑p ...
.text:00406CD0
.text:00406CD0 Size            = dword ptr -0Ch
.text:00406CD0 var_4           = dword ptr -4
.text:00406CD0 arg_0           = dword ptr  4
.text:00406CD0
.text:00406CD0                 sub     esp, 0Ch
.text:00406CD3                 mov     [esp+0Ch+var_4], ebx
.text:00406CD7                 mov     ebx, [esp+0Ch+arg_0]
.text:00406CDB                 mov     [esp+0Ch+Size], ebx ; Size
.text:00406CDE                 call    malloc
.text:00406CE3                 test    eax, eax
.text:00406CE5                 jz      short loc_406CF0
.text:00406CE7
.text:00406CE7 loc_406CE7:                             ; CODE XREF: sub_406CD0+22↓j
.text:00406CE7                 mov     ebx, [esp+0Ch+var_4]
.text:00406CEB                 add     esp, 0Ch
.text:00406CEE                 retn
.text:00406CEE ; ---------------------------------------------------------------------------
.text:00406CEF                 align 10h
.text:00406CF0
.text:00406CF0 loc_406CF0:                             ; CODE XREF: sub_406CD0+15↑j
.text:00406CF0                 test    ebx, ebx
.text:00406CF2                 jz      short loc_406CE7
.text:00406CF4                 call    sub_406F80
.text:00406CF4 sub_406CD0      endp
.text:00406CF4
.text:00406CF4 ; ---------------------------------------------------------------------------
.text:00406CF9                 align 10h
.text:00406D00                 sub     esp, 1Ch
.text:00406D03                 xor     edx, edx
.text:00406D05                 mov     eax, 0FFFFFFFFh
.text:00406D0A                 mov     [esp+14h], ebx
.text:00406D0E                 mov     ecx, [esp+20h]
.text:00406D12                 mov     ebx, [esp+28h]
.text:00406D16                 mov     [esp+18h], esi
.text:00406D1A                 mov     esi, [esp+24h]
.text:00406D1E                 div     ebx
.text:00406D20                 cmp     eax, esi
.text:00406D22                 jb      short loc_406D54
.text:00406D24                 mov     [esp], ecx
.text:00406D27                 mov     edx, esi
.text:00406D29                 imul    edx, ebx
.text:00406D2C                 mov     [esp+4], edx
.text:00406D30                 call    realloc
.text:00406D35                 test    eax, eax
.text:00406D37                 mov     ecx, eax
.text:00406D39                 jz      short loc_406D50
.text:00406D3B
.text:00406D3B loc_406D3B:                             ; CODE XREF: .text:00406D52↓j
.text:00406D3B                 mov     ebx, [esp+14h]
.text:00406D3F                 mov     eax, ecx
.text:00406D41                 mov     esi, [esp+18h]
.text:00406D45                 add     esp, 1Ch
.text:00406D48                 retn
.text:00406D48 ; ---------------------------------------------------------------------------
.text:00406D49                 align 10h
.text:00406D50
.text:00406D50 loc_406D50:                             ; CODE XREF: .text:00406D39↑j
.text:00406D50                 test    esi, esi
.text:00406D52                 jz      short loc_406D3B
.text:00406D54
.text:00406D54 loc_406D54:                             ; CODE XREF: .text:00406D22↑j
.text:00406D54                 call    sub_406F80
.text:00406D54 ; ---------------------------------------------------------------------------
.text:00406D59                 align 10h
.text:00406D60
.text:00406D60 ; =============== S U B R O U T I N E =======================================
.text:00406D60
.text:00406D60
.text:00406D60 ; int __cdecl sub_406D60(void *, size_t)
.text:00406D60 sub_406D60      proc near               ; CODE XREF: sub_405810+5B↑p
.text:00406D60
.text:00406D60 Block           = dword ptr -0Ch
.text:00406D60 Size            = dword ptr -8
.text:00406D60 var_4           = dword ptr -4
.text:00406D60 arg_0           = dword ptr  4
.text:00406D60 arg_4           = dword ptr  8
.text:00406D60
.text:00406D60                 sub     esp, 0Ch
.text:00406D63                 mov     edx, [esp+0Ch+arg_0]
.text:00406D67                 mov     [esp+0Ch+var_4], ebx
.text:00406D6B                 mov     ebx, [esp+0Ch+arg_4]
.text:00406D6F                 mov     [esp+0Ch+Block], edx ; Block
.text:00406D72                 mov     [esp+0Ch+Size], ebx ; Size
.text:00406D76                 call    realloc
.text:00406D7B                 test    eax, eax
.text:00406D7D                 jz      short loc_406D87
.text:00406D7F
.text:00406D7F loc_406D7F:                             ; CODE XREF: sub_406D60+29↓j
.text:00406D7F                 mov     ebx, [esp+0Ch+var_4]
.text:00406D83                 add     esp, 0Ch
.text:00406D86                 retn
.text:00406D87 ; ---------------------------------------------------------------------------
.text:00406D87
.text:00406D87 loc_406D87:                             ; CODE XREF: sub_406D60+1D↑j
.text:00406D87                 test    ebx, ebx
.text:00406D89                 jz      short loc_406D7F
.text:00406D8B                 call    sub_406F80
.text:00406D8B sub_406D60      endp
.text:00406D8B
.text:00406D90 ; ---------------------------------------------------------------------------
.text:00406D90                 jmp     sub_406EE0
.text:00406D90 ; ---------------------------------------------------------------------------
.text:00406D95                 align 10h
.text:00406DA0                 sub     esp, 0Ch
.text:00406DA3                 mov     edx, [esp+14h]
.text:00406DA7                 mov     dword ptr [esp+8], 1
.text:00406DAF                 mov     [esp+4], edx
.text:00406DB3                 mov     edx, [esp+10h]
.text:00406DB7                 mov     [esp], edx
.text:00406DBA                 call    sub_406EE0
.text:00406DBF                 add     esp, 0Ch
.text:00406DC2                 retn
.text:00406DC2 ; ---------------------------------------------------------------------------
.text:00406DC3                 align 10h
.text:00406DD0                 sub     esp, 1Ch
.text:00406DD3                 mov     [esp+18h], ebx
.text:00406DD7                 mov     ebx, [esp+20h]
.text:00406DDB                 mov     [esp], ebx
.text:00406DDE                 call    malloc
.text:00406DE3                 test    eax, eax
.text:00406DE5                 jz      short loc_406E03
.text:00406DE7
.text:00406DE7 loc_406DE7:                             ; CODE XREF: .text:00406E05↓j
.text:00406DE7                 mov     [esp+8], ebx
.text:00406DEB                 mov     dword ptr [esp+4], 0
.text:00406DF3                 mov     [esp], eax
.text:00406DF6                 call    memset
.text:00406DFB                 mov     ebx, [esp+18h]
.text:00406DFF                 add     esp, 1Ch
.text:00406E02                 retn
.text:00406E03 ; ---------------------------------------------------------------------------
.text:00406E03
.text:00406E03 loc_406E03:                             ; CODE XREF: .text:00406DE5↑j
.text:00406E03                 test    ebx, ebx
.text:00406E05                 jz      short loc_406DE7
.text:00406E07                 call    sub_406F80
.text:00406E07 ; ---------------------------------------------------------------------------
.text:00406E0C                 align 10h
.text:00406E10                 sub     esp, 0Ch
.text:00406E13                 xor     edx, edx
.text:00406E15                 mov     ecx, [esp+14h]
.text:00406E19                 mov     [esp+8], ebx
.text:00406E1D                 mov     eax, 0FFFFFFFFh
.text:00406E22                 mov     ebx, [esp+10h]
.text:00406E26                 div     ecx
.text:00406E28                 cmp     eax, ebx
.text:00406E2A                 jb      short loc_406E48
.text:00406E2C                 mov     [esp+4], ecx
.text:00406E30                 mov     [esp], ebx
.text:00406E33                 call    calloc
.text:00406E38                 test    eax, eax
.text:00406E3A                 jz      short loc_406E44
.text:00406E3C
.text:00406E3C loc_406E3C:                             ; CODE XREF: .text:00406E46↓j
.text:00406E3C                 mov     ebx, [esp+8]
.text:00406E40                 add     esp, 0Ch
.text:00406E43                 retn
.text:00406E44 ; ---------------------------------------------------------------------------
.text:00406E44
.text:00406E44 loc_406E44:                             ; CODE XREF: .text:00406E3A↑j
.text:00406E44                 test    ebx, ebx
.text:00406E46                 jz      short loc_406E3C
.text:00406E48
.text:00406E48 loc_406E48:                             ; CODE XREF: .text:00406E2A↑j
.text:00406E48                 call    sub_406F80
.text:00406E48 ; ---------------------------------------------------------------------------
.text:00406E4D                 align 10h
.text:00406E50                 sub     esp, 1Ch
.text:00406E53                 mov     [esp+18h], ebx
.text:00406E57                 mov     ebx, [esp+24h]
.text:00406E5B                 mov     [esp], ebx
.text:00406E5E                 call    malloc
.text:00406E63                 test    eax, eax
.text:00406E65                 mov     edx, eax
.text:00406E67                 jz      short loc_406E85
.text:00406E69
.text:00406E69 loc_406E69:                             ; CODE XREF: .text:00406E87↓j
.text:00406E69                 mov     [esp+8], ebx
.text:00406E6D                 mov     ecx, [esp+20h]
.text:00406E71                 mov     [esp], edx
.text:00406E74                 mov     [esp+4], ecx
.text:00406E78                 call    memcpy
.text:00406E7D                 mov     ebx, [esp+18h]
.text:00406E81                 add     esp, 1Ch
.text:00406E84                 retn
.text:00406E85 ; ---------------------------------------------------------------------------
.text:00406E85
.text:00406E85 loc_406E85:                             ; CODE XREF: .text:00406E67↑j
.text:00406E85                 test    ebx, ebx
.text:00406E87                 jz      short loc_406E69
.text:00406E89                 call    sub_406F80
.text:00406E89 ; ---------------------------------------------------------------------------
.text:00406E8E                 align 10h
.text:00406E90                 sub     esp, 1Ch
.text:00406E93                 mov     [esp+18h], esi
.text:00406E97                 mov     esi, [esp+20h]
.text:00406E9B                 mov     [esp+14h], ebx
.text:00406E9F                 mov     [esp], esi
.text:00406EA2                 call    strlen
.text:00406EA7                 lea     ebx, [eax+1]
.text:00406EAA                 mov     [esp], ebx
.text:00406EAD                 call    malloc
.text:00406EB2                 test    eax, eax
.text:00406EB4                 jz      short loc_406ED2
.text:00406EB6
.text:00406EB6 loc_406EB6:                             ; CODE XREF: .text:00406ED4↓j
.text:00406EB6                 mov     [esp+8], ebx
.text:00406EBA                 mov     [esp+4], esi
.text:00406EBE                 mov     [esp], eax
.text:00406EC1                 call    memcpy
.text:00406EC6                 mov     ebx, [esp+14h]
.text:00406ECA                 mov     esi, [esp+18h]
.text:00406ECE                 add     esp, 1Ch
.text:00406ED1                 retn
.text:00406ED2 ; ---------------------------------------------------------------------------
.text:00406ED2
.text:00406ED2 loc_406ED2:                             ; CODE XREF: .text:00406EB4↑j
.text:00406ED2                 test    ebx, ebx
.text:00406ED4                 jz      short loc_406EB6
.text:00406ED6                 call    sub_406F80
.text:00406ED6 ; ---------------------------------------------------------------------------
.text:00406EDB                 align 10h
.text:00406EE0
.text:00406EE0 ; =============== S U B R O U T I N E =======================================
.text:00406EE0
.text:00406EE0
.text:00406EE0 ; int __cdecl sub_406EE0(void *, int, int)
.text:00406EE0 sub_406EE0      proc near               ; CODE XREF: .text:00406D90↑j
.text:00406EE0                                         ; .text:00406DBA↑p
.text:00406EE0
.text:00406EE0 Block           = dword ptr -1Ch
.text:00406EE0 Size            = dword ptr -18h
.text:00406EE0 var_C           = dword ptr -0Ch
.text:00406EE0 var_8           = dword ptr -8
.text:00406EE0 var_4           = dword ptr -4
.text:00406EE0 arg_0           = dword ptr  4
.text:00406EE0 arg_4           = dword ptr  8
.text:00406EE0 arg_8           = dword ptr  0Ch
.text:00406EE0
.text:00406EE0                 sub     esp, 1Ch
.text:00406EE3                 mov     [esp+1Ch+var_8], esi
.text:00406EE7                 mov     esi, [esp+1Ch+arg_0]
.text:00406EEB                 mov     [esp+1Ch+var_4], edi
.text:00406EEF                 mov     edi, [esp+1Ch+arg_4]
.text:00406EF3                 test    esi, esi
.text:00406EF5                 mov     [esp+1Ch+var_C], ebx
.text:00406EF9                 mov     ecx, [edi]
.text:00406EFB                 mov     ebx, [esp+1Ch+arg_8]
.text:00406EFF                 jz      short loc_406F40
.text:00406F01                 xor     edx, edx
.text:00406F03                 mov     eax, 7FFFFFFFh
.text:00406F08                 div     ebx
.text:00406F0A                 cmp     eax, ecx
.text:00406F0C                 jb      short loc_406F39
.text:00406F0E                 add     ecx, ecx
.text:00406F10
.text:00406F10 loc_406F10:                             ; CODE XREF: sub_406EE0+62↓j
.text:00406F10                                         ; sub_406EE0+71↓j ...
.text:00406F10                 mov     [edi], ecx
.text:00406F12                 imul    ebx, ecx
.text:00406F15                 mov     [esp+1Ch+Block], esi ; Block
.text:00406F18                 mov     [esp+1Ch+Size], ebx ; Size
.text:00406F1C                 call    realloc
.text:00406F21                 test    eax, eax
.text:00406F23                 jz      short loc_406F35
.text:00406F25
.text:00406F25 loc_406F25:                             ; CODE XREF: sub_406EE0+57↓j
.text:00406F25                 mov     ebx, [esp+1Ch+var_C]
.text:00406F29                 mov     esi, [esp+1Ch+var_8]
.text:00406F2D                 mov     edi, [esp+1Ch+var_4]
.text:00406F31                 add     esp, 1Ch
.text:00406F34                 retn
.text:00406F35 ; ---------------------------------------------------------------------------
.text:00406F35
.text:00406F35 loc_406F35:                             ; CODE XREF: sub_406EE0+43↑j
.text:00406F35                 test    ebx, ebx
.text:00406F37                 jz      short loc_406F25
.text:00406F39
.text:00406F39 loc_406F39:                             ; CODE XREF: sub_406EE0+2C↑j
.text:00406F39                 call    sub_406F80
.text:00406F39 ; ---------------------------------------------------------------------------
.text:00406F3E                 align 10h
.text:00406F40
.text:00406F40 loc_406F40:                             ; CODE XREF: sub_406EE0+1F↑j
.text:00406F40                 test    ecx, ecx
.text:00406F42                 jnz     short loc_406F10
.text:00406F44                 xor     edx, edx
.text:00406F46                 mov     eax, 40h ; '@'
.text:00406F4B                 div     ebx
.text:00406F4D                 test    eax, eax
.text:00406F4F                 mov     ecx, eax
.text:00406F51                 jnz     short loc_406F10
.text:00406F53                 mov     ecx, 1
.text:00406F58                 jmp     short loc_406F10
.text:00406F58 sub_406EE0      endp
.text:00406F58
.text:00406F58 ; ---------------------------------------------------------------------------
.text:00406F5A                 align 10h
.text:00406F60 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_406F80+3↓o
.text:00406F71 ; const char aS_4[]
.text:00406F71 aS_4            db '%s',0               ; DATA XREF: sub_406F80+10↓o
.text:00406F74                 align 10h
.text:00406F80
.text:00406F80 ; =============== S U B R O U T I N E =======================================
.text:00406F80
.text:00406F80 ; Attributes: noreturn
.text:00406F80
.text:00406F80 sub_406F80      proc near               ; CODE XREF: sub_405810:loc_4059CF↑p
.text:00406F80                                         ; .text:loc_406CC9↑p ...
.text:00406F80
.text:00406F80 Code            = dword ptr -1Ch
.text:00406F80 ErrorMessage    = dword ptr -18h
.text:00406F80 var_14          = dword ptr -14h
.text:00406F80 var_10          = byte ptr -10h
.text:00406F80
.text:00406F80                 sub     esp, 1Ch
.text:00406F83                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00406F8A                 call    ds:libintl_gettext
.text:00406F90                 mov     [esp+1Ch+var_14], offset aS_4 ; "%s"
.text:00406F98                 mov     edx, Code
.text:00406F9E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00406FA6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00406FAA                 mov     [esp+1Ch+Code], edx ; Code
.text:00406FAD                 call    sub_407070
.text:00406FB2                 call    abort
.text:00406FB2 sub_406F80      endp
.text:00406FB2
.text:00406FB2 ; ---------------------------------------------------------------------------
.text:00406FB7                 align 10h
.text:00406FC0
.text:00406FC0 ; =============== S U B R O U T I N E =======================================
.text:00406FC0
.text:00406FC0
.text:00406FC0 ; int __cdecl sub_406FC0(int, char *)
.text:00406FC0 sub_406FC0      proc near               ; CODE XREF: .text:00406830↑p
.text:00406FC0                                         ; .text:00406A7A↑p
.text:00406FC0
.text:00406FC0 var_C           = dword ptr -0Ch
.text:00406FC0 var_8           = dword ptr -8
.text:00406FC0 var_4           = dword ptr -4
.text:00406FC0 arg_0           = dword ptr  4
.text:00406FC0 arg_4           = dword ptr  8
.text:00406FC0
.text:00406FC0                 sub     esp, 0Ch
.text:00406FC3                 mov     edx, [esp+0Ch+arg_4]
.text:00406FC7                 mov     [esp+0Ch+var_8], 5 ; int
.text:00406FCF                 mov     [esp+0Ch+var_4], edx ; char *
.text:00406FD3                 mov     edx, [esp+0Ch+arg_0]
.text:00406FD7                 mov     [esp+0Ch+var_C], edx ; int
.text:00406FDA                 call    sub_405400
.text:00406FDF                 add     esp, 0Ch
.text:00406FE2                 retn
.text:00406FE2 sub_406FC0      endp
.text:00406FE2
.text:00406FE2 ; ---------------------------------------------------------------------------
.text:00406FE3                 align 10h
.text:00406FF0                 sub     esp, 0Ch
.text:00406FF3                 mov     edx, [esp+10h]
.text:00406FF7                 mov     dword ptr [esp+4], 5
.text:00406FFF                 mov     dword ptr [esp], 0
.text:00407006                 mov     [esp+8], edx
.text:0040700A                 call    sub_405400
.text:0040700F                 add     esp, 0Ch
.text:00407012                 retn
.text:00407012 ; ---------------------------------------------------------------------------
.text:00407013                 align 10h
.text:00407020                 jmp     ds:libintl_bindtextdomain
.text:00407020 ; ---------------------------------------------------------------------------
.text:00407026                 align 10h
.text:00407030                 jmp     ds:libintl_textdomain
.text:00407030 ; ---------------------------------------------------------------------------
.text:00407036                 align 10h
.text:00407040                 jmp     ds:libintl_gettext
.text:00407040 ; ---------------------------------------------------------------------------
.text:00407046                 align 10h
.text:00407050 ; const char aS_1[]
.text:00407050 aS_1            db ': %s',0             ; DATA XREF: sub_407070+B8↓o
.text:00407050                                         ; sub_407174+122↓o
.text:00407055 aUnknownSystemE db 'Unknown system error',0
.text:00407055                                         ; DATA XREF: sub_407070:loc_40713D↓o
.text:00407055                                         ; sub_407174:loc_4072AE↓o
.text:0040706A ; const char aS_2[]
.text:0040706A aS_2            db '%s: ',0             ; DATA XREF: sub_407070:loc_407144↓o
.text:0040706F                 align 10h
.text:00407070
.text:00407070 ; =============== S U B R O U T I N E =======================================
.text:00407070
.text:00407070
.text:00407070 ; int __cdecl sub_407070(int Code, int ErrorMessage, char *, char)
.text:00407070 sub_407070      proc near               ; CODE XREF: sub_4015B0+286↑p
.text:00407070                                         ; sub_4019C0+1B9↑p ...
.text:00407070
.text:00407070 Stream          = dword ptr -1Ch
.text:00407070 Format          = dword ptr -18h
.text:00407070 ArgList         = dword ptr -14h
.text:00407070 Code            = dword ptr  4
.text:00407070 ErrorMessage    = dword ptr  8
.text:00407070 arg_8           = dword ptr  0Ch
.text:00407070 arg_C           = byte ptr  10h
.text:00407070
.text:00407070                 push    esi
.text:00407071                 push    ebx
.text:00407072                 sub     esp, 14h
.text:00407075                 mov     edx, ds:_iob
.text:0040707B                 mov     esi, [esp+1Ch+Code]
.text:0040707F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00407083                 add     edx, 20h ; ' '
.text:00407086                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00407089                 call    fflush
.text:0040708E                 mov     eax, ds:dword_4091D0
.text:00407093                 test    eax, eax
.text:00407095                 jz      loc_407144
.text:0040709B                 call    eax ; dword_4091D0
.text:0040709D
.text:0040709D loc_40709D:                             ; CODE XREF: sub_407070+F7↓j
.text:0040709D                 lea     edx, [esp+1Ch+arg_C]
.text:004070A1                 mov     ecx, [esp+1Ch+arg_8]
.text:004070A5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:004070A9                 mov     edx, ds:_iob
.text:004070AF                 mov     [esp+1Ch+Format], ecx ; Format
.text:004070B3                 add     edx, 40h ; '@'
.text:004070B6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004070B9                 call    vfprintf
.text:004070BE                 inc     ds:dword_4091E0
.text:004070C4                 test    ebx, ebx
.text:004070C6                 jnz     short loc_407112
.text:004070C8
.text:004070C8 loc_4070C8:                             ; CODE XREF: sub_407070+CB↓j
.text:004070C8                 mov     edx, ds:_iob
.text:004070CE                 lea     ecx, [edx+40h]
.text:004070D1                 mov     ebx, [ecx+4]
.text:004070D4                 dec     ebx
.text:004070D5                 test    ebx, ebx
.text:004070D7                 mov     [ecx+4], ebx
.text:004070DA                 js      short loc_407100
.text:004070DC                 mov     ecx, [edx+40h]
.text:004070DF                 mov     byte ptr [ecx], 0Ah
.text:004070E2                 inc     dword ptr [edx+40h]
.text:004070E5
.text:004070E5 loc_4070E5:                             ; CODE XREF: sub_407070+A0↓j
.text:004070E5                 mov     edx, ds:_iob
.text:004070EB                 add     edx, 40h ; '@'
.text:004070EE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004070F1                 call    fflush
.text:004070F6                 test    esi, esi
.text:004070F8                 jnz     short loc_40716C
.text:004070FA                 add     esp, 14h
.text:004070FD                 pop     ebx
.text:004070FE                 pop     esi
.text:004070FF                 retn
.text:00407100 ; ---------------------------------------------------------------------------
.text:00407100
.text:00407100 loc_407100:                             ; CODE XREF: sub_407070+6A↑j
.text:00407100                 mov     [esp+1Ch+Format], ecx ; File
.text:00407104                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040710B                 call    _flsbuf
.text:00407110                 jmp     short loc_4070E5
.text:00407112 ; ---------------------------------------------------------------------------
.text:00407112
.text:00407112 loc_407112:                             ; CODE XREF: sub_407070+56↑j
.text:00407112                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00407115                 call    strerror
.text:0040711A                 test    eax, eax
.text:0040711C                 jz      short loc_40713D
.text:0040711E
.text:0040711E loc_40711E:                             ; CODE XREF: sub_407070+D2↓j
.text:0040711E                 mov     [esp+1Ch+ArgList], eax
.text:00407122                 mov     ebx, ds:_iob
.text:00407128                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:00407130                 add     ebx, 40h ; '@'
.text:00407133                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00407136                 call    fprintf
.text:0040713B                 jmp     short loc_4070C8
.text:0040713D ; ---------------------------------------------------------------------------
.text:0040713D
.text:0040713D loc_40713D:                             ; CODE XREF: sub_407070+AC↑j
.text:0040713D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00407142                 jmp     short loc_40711E
.text:00407144 ; ---------------------------------------------------------------------------
.text:00407144
.text:00407144 loc_407144:                             ; CODE XREF: sub_407070+25↑j
.text:00407144                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:0040714C                 mov     edx, ds:_iob
.text:00407152                 mov     ecx, ds:dword_4091A0
.text:00407158                 add     edx, 40h ; '@'
.text:0040715B                 mov     [esp+1Ch+ArgList], ecx
.text:0040715F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00407162                 call    fprintf
.text:00407167                 jmp     loc_40709D
.text:0040716C ; ---------------------------------------------------------------------------
.text:0040716C
.text:0040716C loc_40716C:                             ; CODE XREF: sub_407070+88↑j
.text:0040716C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040716F                 call    exit
.text:0040716F sub_407070      endp
.text:0040716F
.text:00407174
.text:00407174 ; =============== S U B R O U T I N E =======================================
.text:00407174
.text:00407174
.text:00407174 ; int __cdecl sub_407174(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00407174 sub_407174      proc near               ; DATA XREF: sub_407174+77↓o
.text:00407174
.text:00407174 Stream          = dword ptr -28h
.text:00407174 Format          = dword ptr -24h
.text:00407174 ArgList         = dword ptr -20h
.text:00407174 var_1C          = dword ptr -1Ch
.text:00407174 Code            = dword ptr  8
.text:00407174 ErrorMessage    = dword ptr  0Ch
.text:00407174 Str2            = dword ptr  10h
.text:00407174 arg_10          = dword ptr  14h
.text:00407174 arg_14          = dword ptr  18h
.text:00407174 arg_18          = byte ptr  1Ch
.text:00407174
.text:00407174                 and     eax, 64253A73h
.text:00407179                 cmp     ah, [eax]
.text:0040717B
.text:0040717B loc_40717B:                             ; DATA XREF: sub_407174:loc_4072B5↓o
.text:0040717B                 add     ds:55003A73h, ah
.text:00407181                 push    edi
.text:00407182                 push    esi
.text:00407183                 push    ebx
.text:00407184                 sub     esp, 1Ch
.text:00407187                 mov     edx, ds:dword_409210
.text:0040718D                 mov     ebp, [esp+28h+Code]
.text:00407191                 mov     edi, [esp+28h+ErrorMessage]
.text:00407195                 test    edx, edx
.text:00407197                 mov     ebx, [esp+28h+Str2]
.text:0040719B                 mov     esi, [esp+28h+arg_10]
.text:0040719F                 jz      short loc_4071B9
.text:004071A1                 cmp     ds:dword_409190, esi
.text:004071A7                 jz      loc_4072E0
.text:004071AD
.text:004071AD loc_4071AD:                             ; CODE XREF: sub_407174+18D↓j
.text:004071AD                 mov     ds:Str1, ebx
.text:004071B3                 mov     ds:dword_409190, esi
.text:004071B9
.text:004071B9 loc_4071B9:                             ; CODE XREF: sub_407174+2B↑j
.text:004071B9                 mov     edx, ds:_iob
.text:004071BF                 add     edx, 20h ; ' '
.text:004071C2                 mov     [esp+28h+Stream], edx ; Stream
.text:004071C5                 call    fflush
.text:004071CA                 mov     eax, ds:dword_4091D0
.text:004071CF                 test    eax, eax
.text:004071D1                 jz      loc_4072B5
.text:004071D7                 call    eax ; dword_4091D0
.text:004071D9
.text:004071D9 loc_4071D9:                             ; CODE XREF: sub_407174+164↓j
.text:004071D9                 test    ebx, ebx
.text:004071DB                 jz      short loc_4071FE
.text:004071DD                 mov     [esp+28h+ArgList], ebx
.text:004071E1                 mov     ebx, ds:_iob
.text:004071E7                 mov     [esp+28h+var_1C], esi
.text:004071EB                 mov     [esp+28h+Format], offset sub_407174 ; Format
.text:004071F3                 add     ebx, 40h ; '@'
.text:004071F6                 mov     [esp+28h+Stream], ebx ; Stream
.text:004071F9                 call    fprintf
.text:004071FE
.text:004071FE loc_4071FE:                             ; CODE XREF: sub_407174+67↑j
.text:004071FE                 mov     esi, ds:_iob
.text:00407204                 lea     edx, [esp+28h+arg_18]
.text:00407208                 mov     ecx, [esp+28h+arg_14]
.text:0040720C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00407210                 add     esi, 40h ; '@'
.text:00407213                 mov     [esp+28h+Format], ecx ; Format
.text:00407217                 mov     [esp+28h+Stream], esi ; Stream
.text:0040721A                 call    vfprintf
.text:0040721F                 inc     ds:dword_4091E0
.text:00407225                 test    edi, edi
.text:00407227                 jnz     short loc_407280
.text:00407229
.text:00407229 loc_407229:                             ; CODE XREF: sub_407174+135↓j
.text:00407229                 mov     edx, ds:_iob
.text:0040722F                 lea     ecx, [edx+40h]
.text:00407232                 mov     ebx, [ecx+4]
.text:00407235                 dec     ebx
.text:00407236                 test    ebx, ebx
.text:00407238                 mov     [ecx+4], ebx
.text:0040723B                 js      short loc_407267
.text:0040723D                 mov     esi, [edx+40h]
.text:00407240                 mov     byte ptr [esi], 0Ah
.text:00407243                 inc     dword ptr [edx+40h]
.text:00407246
.text:00407246 loc_407246:                             ; CODE XREF: sub_407174+103↓j
.text:00407246                 mov     ecx, ds:_iob
.text:0040724C                 add     ecx, 40h ; '@'
.text:0040724F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00407252                 call    fflush
.text:00407257                 test    ebp, ebp
.text:00407259                 jnz     loc_407306
.text:0040725F
.text:0040725F loc_40725F:                             ; CODE XREF: sub_407174+173↓j
.text:0040725F                                         ; sub_407174+187↓j
.text:0040725F                 add     esp, 1Ch
.text:00407262                 pop     ebx
.text:00407263                 pop     esi
.text:00407264                 pop     edi
.text:00407265                 pop     ebp
.text:00407266                 retn
.text:00407267 ; ---------------------------------------------------------------------------
.text:00407267
.text:00407267 loc_407267:                             ; CODE XREF: sub_407174+C7↑j
.text:00407267                 mov     [esp+28h+Format], ecx ; File
.text:0040726B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00407272                 call    _flsbuf
.text:00407277                 jmp     short loc_407246
.text:00407277 ; ---------------------------------------------------------------------------
.text:00407279                 align 10h
.text:00407280
.text:00407280 loc_407280:                             ; CODE XREF: sub_407174+B3↑j
.text:00407280                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00407283                 call    strerror
.text:00407288                 test    eax, eax
.text:0040728A                 jz      short loc_4072AE
.text:0040728C
.text:0040728C loc_40728C:                             ; CODE XREF: sub_407174+13F↓j
.text:0040728C                 mov     [esp+28h+ArgList], eax
.text:00407290                 mov     edi, ds:_iob
.text:00407296                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:0040729E                 add     edi, 40h ; '@'
.text:004072A1                 mov     [esp+28h+Stream], edi ; Stream
.text:004072A4                 call    fprintf
.text:004072A9                 jmp     loc_407229
.text:004072AE ; ---------------------------------------------------------------------------
.text:004072AE
.text:004072AE loc_4072AE:                             ; CODE XREF: sub_407174+116↑j
.text:004072AE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004072B3                 jmp     short loc_40728C
.text:004072B5 ; ---------------------------------------------------------------------------
.text:004072B5
.text:004072B5 loc_4072B5:                             ; CODE XREF: sub_407174+5D↑j
.text:004072B5                 mov     [esp+28h+Format], (offset loc_40717B+1) ; Format
.text:004072BD                 mov     ecx, ds:_iob
.text:004072C3                 mov     edx, ds:dword_4091A0
.text:004072C9                 add     ecx, 40h ; '@'
.text:004072CC                 mov     [esp+28h+ArgList], edx
.text:004072D0                 mov     [esp+28h+Stream], ecx ; Stream
.text:004072D3                 call    fprintf
.text:004072D8                 jmp     loc_4071D9
.text:004072D8 ; ---------------------------------------------------------------------------
.text:004072DD                 align 10h
.text:004072E0
.text:004072E0 loc_4072E0:                             ; CODE XREF: sub_407174+33↑j
.text:004072E0                 mov     eax, ds:Str1
.text:004072E5                 cmp     ebx, eax
.text:004072E7                 jz      loc_40725F
.text:004072ED                 mov     [esp+28h+Format], ebx ; Str2
.text:004072F1                 mov     [esp+28h+Stream], eax ; Str1
.text:004072F4                 call    strcmp
.text:004072F9                 test    eax, eax
.text:004072FB                 jz      loc_40725F
.text:00407301                 jmp     loc_4071AD
.text:00407306 ; ---------------------------------------------------------------------------
.text:00407306
.text:00407306 loc_407306:                             ; CODE XREF: sub_407174+E5↑j
.text:00407306                 mov     [esp+28h+Stream], ebp ; Code
.text:00407309                 call    exit
.text:00407309 sub_407174      endp ; sp-analysis failed
.text:00407309
.text:00407309 ; ---------------------------------------------------------------------------
.text:0040730E                 align 10h
.text:00407310
.text:00407310 ; =============== S U B R O U T I N E =======================================
.text:00407310
.text:00407310 ; Attributes: thunk
.text:00407310
.text:00407310 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00407310 mbrtowc         proc near               ; CODE XREF: sub_4046D0+757↑p
.text:00407310                 jmp     ds:__imp_mbrtowc
.text:00407310 mbrtowc         endp
.text:00407310
.text:00407310 ; ---------------------------------------------------------------------------
.text:00407316                 align 10h
.text:00407320
.text:00407320 ; =============== S U B R O U T I N E =======================================
.text:00407320
.text:00407320 ; Attributes: bp-based frame
.text:00407320
.text:00407320 sub_407320      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00407320                 push    ebp
.text:00407321                 mov     ecx, offset byte_409000
.text:00407326                 cmp     ecx, offset byte_409000
.text:0040732C                 mov     ebp, esp
.text:0040732E                 jnb     short loc_407346
.text:00407330
.text:00407330 loc_407330:                             ; CODE XREF: sub_407320+24↓j
.text:00407330                 mov     edx, [ecx+4]
.text:00407333                 mov     eax, [ecx]
.text:00407335                 add     ecx, 8
.text:00407338                 add     [edx+400000h], eax
.text:0040733E                 cmp     ecx, offset byte_409000
.text:00407344                 jb      short loc_407330
.text:00407346
.text:00407346 loc_407346:                             ; CODE XREF: sub_407320+E↑j
.text:00407346                 pop     ebp
.text:00407347                 retn
.text:00407347 sub_407320      endp
.text:00407347
.text:00407347 ; ---------------------------------------------------------------------------
.text:00407348                 align 10h
.text:00407350
.text:00407350 ; =============== S U B R O U T I N E =======================================
.text:00407350
.text:00407350 ; Attributes: bp-based frame
.text:00407350
.text:00407350 sub_407350      proc near               ; CODE XREF: sub_401080+16↑p
.text:00407350                                         ; TopLevelExceptionFilter+D7↑p
.text:00407350                 push    ebp
.text:00407351                 mov     ebp, esp
.text:00407353                 fninit
.text:00407355                 pop     ebp
.text:00407356                 retn
.text:00407356 sub_407350      endp
.text:00407356
.text:00407356 ; ---------------------------------------------------------------------------
.text:00407357                 align 10h
.text:00407360
.text:00407360 ; =============== S U B R O U T I N E =======================================
.text:00407360
.text:00407360 ; Attributes: bp-based frame
.text:00407360
.text:00407360 ; void __cdecl sub_407360()
.text:00407360 sub_407360      proc near               ; DATA XREF: .text:loc_4073A9↓o
.text:00407360                                         ; sub_4073F0:loc_40741E↓o
.text:00407360                 push    ebp
.text:00407361                 mov     ebp, esp
.text:00407363                 sub     esp, 8
.text:00407366                 mov     eax, off_408094
.text:0040736B                 mov     edx, [eax]
.text:0040736D                 test    edx, edx
.text:0040736F                 jnz     short loc_407375
.text:00407371
.text:00407371 loc_407371:                             ; CODE XREF: sub_407360+2C↓j
.text:00407371                 mov     esp, ebp
.text:00407373                 pop     ebp
.text:00407374                 retn
.text:00407375 ; ---------------------------------------------------------------------------
.text:00407375
.text:00407375 loc_407375:                             ; CODE XREF: sub_407360+F↑j
.text:00407375                                         ; sub_407360+2A↓j
.text:00407375                 call    dword ptr [eax]
.text:00407377                 mov     edx, off_408094
.text:0040737D                 mov     ecx, [edx+4]
.text:00407380                 lea     eax, [edx+4]
.text:00407383                 mov     off_408094, eax
.text:00407388                 test    ecx, ecx
.text:0040738A                 jnz     short loc_407375
.text:0040738C                 jmp     short loc_407371
.text:0040738C sub_407360      endp
.text:0040738C
.text:0040738C ; ---------------------------------------------------------------------------
.text:0040738E                 align 10h
.text:00407390                 push    ebp
.text:00407391                 mov     ebp, esp
.text:00407393                 sub     esp, 8
.text:00407396                 mov     [ebp-4], ebx
.text:00407399                 mov     eax, ds:dword_407EF0
.text:0040739E                 cmp     eax, 0FFFFFFFFh
.text:004073A1                 jz      short loc_4073CC
.text:004073A3
.text:004073A3 loc_4073A3:                             ; CODE XREF: .text:004073D6↓j
.text:004073A3                                         ; .text:004073E9↓j
.text:004073A3                 test    eax, eax
.text:004073A5                 mov     ebx, eax
.text:004073A7                 jnz     short loc_4073C0
.text:004073A9
.text:004073A9 loc_4073A9:                             ; CODE XREF: .text:004073CA↓j
.text:004073A9                 mov     dword ptr [esp], offset sub_407360
.text:004073B0                 call    sub_401040
.text:004073B5                 mov     ebx, [ebp-4]
.text:004073B8                 mov     esp, ebp
.text:004073BA                 pop     ebp
.text:004073BB                 retn
.text:004073BB ; ---------------------------------------------------------------------------
.text:004073BC                 align 10h
.text:004073C0
.text:004073C0 loc_4073C0:                             ; CODE XREF: .text:004073A7↑j
.text:004073C0                                         ; .text:004073C8↓j
.text:004073C0                 call    ds:dword_407EF0[ebx*4]
.text:004073C7                 dec     ebx
.text:004073C8                 jnz     short loc_4073C0
.text:004073CA                 jmp     short loc_4073A9
.text:004073CC ; ---------------------------------------------------------------------------
.text:004073CC
.text:004073CC loc_4073CC:                             ; CODE XREF: .text:004073A1↑j
.text:004073CC                 mov     ecx, ds:dword_407EF4
.text:004073D2                 xor     eax, eax
.text:004073D4                 test    ecx, ecx
.text:004073D6                 jz      short loc_4073A3
.text:004073D8                 mov     edx, offset dword_407EF0
.text:004073DD                 lea     esi, [esi+0]
.text:004073E0
.text:004073E0 loc_4073E0:                             ; CODE XREF: .text:004073E7↓j
.text:004073E0                 inc     eax
.text:004073E1                 mov     ecx, [edx+eax*4+4]
.text:004073E5                 test    ecx, ecx
.text:004073E7                 jnz     short loc_4073E0
.text:004073E9                 jmp     short loc_4073A3
.text:004073E9 ; ---------------------------------------------------------------------------
.text:004073EB                 align 10h
.text:004073F0
.text:004073F0 ; =============== S U B R O U T I N E =======================================
.text:004073F0
.text:004073F0 ; Attributes: bp-based frame
.text:004073F0
.text:004073F0 sub_4073F0      proc near               ; CODE XREF: sub_4015B0+1E↑p
.text:004073F0
.text:004073F0 var_8           = dword ptr -8
.text:004073F0 var_4           = dword ptr -4
.text:004073F0
.text:004073F0                 push    ebp
.text:004073F1                 mov     ebp, esp
.text:004073F3                 sub     esp, 8
.text:004073F6                 mov     [ebp+var_4], ebx
.text:004073F9                 mov     edx, dword_408090
.text:004073FF                 test    edx, edx
.text:00407401                 jnz     short loc_40742A
.text:00407403                 mov     eax, ds:dword_407EF0
.text:00407408                 mov     edx, 1
.text:0040740D                 mov     dword_408090, edx
.text:00407413                 cmp     eax, 0FFFFFFFFh
.text:00407416                 jz      short loc_40743D
.text:00407418
.text:00407418 loc_407418:                             ; CODE XREF: sub_4073F0+57↓j
.text:00407418                                         ; sub_4073F0+69↓j
.text:00407418                 test    eax, eax
.text:0040741A                 mov     ebx, eax
.text:0040741C                 jnz     short loc_407431
.text:0040741E
.text:0040741E loc_40741E:                             ; CODE XREF: sub_4073F0+4B↓j
.text:0040741E                 mov     [esp+8+var_8], offset sub_407360 ; void (__cdecl *)()
.text:00407425                 call    sub_401040
.text:0040742A
.text:0040742A loc_40742A:                             ; CODE XREF: sub_4073F0+11↑j
.text:0040742A                 mov     ebx, [ebp+var_4]
.text:0040742D                 mov     esp, ebp
.text:0040742F                 pop     ebp
.text:00407430                 retn
.text:00407431 ; ---------------------------------------------------------------------------
.text:00407431
.text:00407431 loc_407431:                             ; CODE XREF: sub_4073F0+2C↑j
.text:00407431                                         ; sub_4073F0+49↓j
.text:00407431                 call    ds:dword_407EF0[ebx*4]
.text:00407438                 dec     ebx
.text:00407439                 jnz     short loc_407431
.text:0040743B                 jmp     short loc_40741E
.text:0040743D ; ---------------------------------------------------------------------------
.text:0040743D
.text:0040743D loc_40743D:                             ; CODE XREF: sub_4073F0+26↑j
.text:0040743D                 mov     ecx, ds:dword_407EF4
.text:00407443                 xor     eax, eax
.text:00407445                 test    ecx, ecx
.text:00407447                 jz      short loc_407418
.text:00407449                 mov     edx, offset dword_407EF0
.text:0040744E                 mov     esi, esi
.text:00407450
.text:00407450 loc_407450:                             ; CODE XREF: sub_4073F0+67↓j
.text:00407450                 inc     eax
.text:00407451                 mov     ebx, [edx+eax*4+4]
.text:00407455                 test    ebx, ebx
.text:00407457                 jnz     short loc_407450
.text:00407459                 jmp     short loc_407418
.text:00407459 sub_4073F0      endp
.text:00407459
.text:00407459 ; ---------------------------------------------------------------------------
.text:0040745B                 align 10h
.text:00407460
.text:00407460 ; =============== S U B R O U T I N E =======================================
.text:00407460
.text:00407460 ; Attributes: info_from_lumina
.text:00407460
.text:00407460 ; void *__cdecl _alloca(size_t Size)
.text:00407460 __alloca        proc near               ; CODE XREF: sub_4015B0+19↑p
.text:00407460                                         ; sub_401C30+9↑p
.text:00407460                 push    ecx
.text:00407461                 mov     ecx, esp
.text:00407463                 add     ecx, 8
.text:00407466
.text:00407466 loc_407466:                             ; CODE XREF: __alloca+1B↓j
.text:00407466                 cmp     eax, 1000h
.text:0040746B                 jb      short loc_40747D
.text:0040746D                 sub     ecx, 1000h
.text:00407473                 or      dword ptr [ecx], 0
.text:00407476                 sub     eax, 1000h
.text:0040747B                 jmp     short loc_407466
.text:0040747D ; ---------------------------------------------------------------------------
.text:0040747D
.text:0040747D loc_40747D:                             ; CODE XREF: __alloca+B↑j
.text:0040747D                 sub     ecx, eax
.text:0040747F                 or      dword ptr [ecx], 0
.text:00407482                 mov     eax, esp
.text:00407484                 mov     esp, ecx
.text:00407486                 mov     ecx, [eax]
.text:00407488                 mov     eax, [eax+4]
.text:0040748B                 jmp     eax
.text:0040748B __alloca        endp
.text:0040748B
.text:0040748B ; ---------------------------------------------------------------------------
.text:0040748D                 align 10h
.text:00407490
.text:00407490 ; =============== S U B R O U T I N E =======================================
.text:00407490
.text:00407490 ; Attributes: bp-based frame
.text:00407490
.text:00407490 sub_407490      proc near               ; CODE XREF: sub_4036C0+12B↑p
.text:00407490                                         ; sub_4036C0+70E↑p ...
.text:00407490
.text:00407490 var_34          = dword ptr -34h
.text:00407490 var_2C          = dword ptr -2Ch
.text:00407490 var_28          = dword ptr -28h
.text:00407490 var_24          = dword ptr -24h
.text:00407490 var_20          = dword ptr -20h
.text:00407490 var_1C          = dword ptr -1Ch
.text:00407490 var_18          = dword ptr -18h
.text:00407490 var_14          = dword ptr -14h
.text:00407490 arg_0           = dword ptr  8
.text:00407490 arg_4           = dword ptr  0Ch
.text:00407490 arg_8           = dword ptr  10h
.text:00407490 arg_C           = dword ptr  14h
.text:00407490
.text:00407490                 push    ebp
.text:00407491                 mov     ebp, esp
.text:00407493                 push    edi
.text:00407494                 push    esi
.text:00407495                 push    ebx
.text:00407496                 sub     esp, 2Ch
.text:00407499                 mov     edx, [ebp+arg_C]
.text:0040749C                 mov     [ebp+var_20], 0
.text:004074A3                 mov     ecx, [ebp+arg_0]
.text:004074A6                 mov     ebx, [ebp+arg_4]
.text:004074A9                 mov     [ebp+var_1C], 0
.text:004074B0                 mov     eax, [ebp+arg_8]
.text:004074B3                 test    edx, edx
.text:004074B5                 mov     [ebp+var_24], edx
.text:004074B8                 mov     edi, ebx
.text:004074BA                 mov     esi, eax
.text:004074BC                 mov     [ebp+var_28], ecx
.text:004074BF                 jnz     short loc_407520
.text:004074C1                 cmp     eax, ebx
.text:004074C3                 jbe     short loc_407500
.text:004074C5                 mov     eax, ecx
.text:004074C7                 mov     edx, ebx
.text:004074C9                 div     esi
.text:004074CB
.text:004074CB loc_4074CB:                             ; CODE XREF: sub_407490+8B↓j
.text:004074CB                 mov     [ebp+var_28], edx
.text:004074CE                 lea     ecx, [ebp+var_18]
.text:004074D1                 test    ecx, ecx
.text:004074D3                 jz      short loc_4074EE
.text:004074D5                 mov     [ebp+var_1C], 0
.text:004074DC
.text:004074DC loc_4074DC:                             ; CODE XREF: sub_407490+DA↓j
.text:004074DC                 mov     eax, [ebp+var_28]
.text:004074DF                 mov     [ebp+var_20], eax
.text:004074E2                 mov     edx, [ebp+var_20]
.text:004074E5                 mov     ecx, [ebp+var_1C]
.text:004074E8                 mov     [ebp+var_18], edx
.text:004074EB                 mov     [ebp+var_14], ecx
.text:004074EE
.text:004074EE loc_4074EE:                             ; CODE XREF: sub_407490+43↑j
.text:004074EE                                         ; sub_407490+A7↓j ...
.text:004074EE                 mov     eax, [ebp+var_18]
.text:004074F1                 mov     edx, [ebp+var_14]
.text:004074F4                 add     esp, 2Ch
.text:004074F7                 pop     ebx
.text:004074F8                 pop     esi
.text:004074F9                 pop     edi
.text:004074FA                 pop     ebp
.text:004074FB                 retn
.text:004074FB ; ---------------------------------------------------------------------------
.text:004074FC                 align 10h
.text:00407500
.text:00407500 loc_407500:                             ; CODE XREF: sub_407490+33↑j
.text:00407500                 test    eax, eax
.text:00407502                 jnz     short loc_40750F
.text:00407504                 mov     eax, 1
.text:00407509                 xor     edx, edx
.text:0040750B                 div     esi
.text:0040750D                 mov     esi, eax
.text:0040750F
.text:0040750F loc_40750F:                             ; CODE XREF: sub_407490+72↑j
.text:0040750F                 mov     eax, edi
.text:00407511                 mov     edx, [ebp+var_24]
.text:00407514                 div     esi
.text:00407516                 mov     eax, [ebp+var_28]
.text:00407519                 div     esi
.text:0040751B                 jmp     short loc_4074CB
.text:0040751B ; ---------------------------------------------------------------------------
.text:0040751D                 align 10h
.text:00407520
.text:00407520 loc_407520:                             ; CODE XREF: sub_407490+2F↑j
.text:00407520                 cmp     [ebp+var_24], ebx
.text:00407523                 jbe     short loc_407540
.text:00407525                 mov     [ebp+var_20], ecx
.text:00407528
.text:00407528 loc_407528:                             ; CODE XREF: sub_407490+15B↓j
.text:00407528                 mov     [ebp+var_1C], edi
.text:0040752B                 mov     eax, [ebp+var_20]
.text:0040752E                 mov     edx, [ebp+var_1C]
.text:00407531                 mov     [ebp+var_18], eax
.text:00407534                 mov     [ebp+var_14], edx
.text:00407537                 jmp     short loc_4074EE
.text:00407537 ; ---------------------------------------------------------------------------
.text:00407539                 align 10h
.text:00407540
.text:00407540 loc_407540:                             ; CODE XREF: sub_407490+93↑j
.text:00407540                 bsr     eax, [ebp+var_24]
.text:00407544                 mov     ebx, eax
.text:00407546                 xor     ebx, 1Fh
.text:00407549                 jnz     short loc_407570
.text:0040754B                 cmp     edi, [ebp+var_24]
.text:0040754E                 ja      short loc_407555
.text:00407550                 cmp     [ebp+var_28], esi
.text:00407553                 jb      short loc_407560
.text:00407555
.text:00407555 loc_407555:                             ; CODE XREF: sub_407490+BE↑j
.text:00407555                 mov     edx, [ebp+var_28]
.text:00407558                 sub     edx, esi
.text:0040755A                 sbb     edi, [ebp+var_24]
.text:0040755D                 mov     [ebp+var_28], edx
.text:00407560
.text:00407560 loc_407560:                             ; CODE XREF: sub_407490+C3↑j
.text:00407560                 lea     ecx, [ebp+var_18]
.text:00407563                 test    ecx, ecx
.text:00407565                 jz      short loc_4074EE
.text:00407567                 mov     [ebp+var_1C], edi
.text:0040756A                 jmp     loc_4074DC
.text:0040756A ; ---------------------------------------------------------------------------
.text:0040756F                 align 10h
.text:00407570
.text:00407570 loc_407570:                             ; CODE XREF: sub_407490+B9↑j
.text:00407570                 mov     edx, [ebp+var_24]
.text:00407573                 mov     eax, 20h ; ' '
.text:00407578                 mov     cl, bl
.text:0040757A                 sub     eax, ebx
.text:0040757C                 mov     [ebp+var_2C], eax
.text:0040757F                 shl     edx, cl
.text:00407581                 mov     eax, esi
.text:00407583                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00407587                 shr     eax, cl
.text:00407589                 mov     cl, bl
.text:0040758B                 shl     esi, cl
.text:0040758D                 or      edx, eax
.text:0040758F                 mov     eax, [ebp+var_28]
.text:00407592                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00407596                 mov     [ebp+var_24], edx
.text:00407599                 mov     edx, edi
.text:0040759B                 shr     edx, cl
.text:0040759D                 mov     cl, bl
.text:0040759F                 shl     edi, cl
.text:004075A1                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004075A5                 shr     eax, cl
.text:004075A7                 or      edi, eax
.text:004075A9                 mov     eax, edi
.text:004075AB                 mov     cl, bl
.text:004075AD                 div     [ebp+var_24]
.text:004075B0                 shl     [ebp+var_28], cl
.text:004075B3                 mov     edi, edx
.text:004075B5                 mul     esi
.text:004075B7                 mov     [ebp+var_34], eax
.text:004075BA                 cmp     edx, edi
.text:004075BC                 ja      short loc_4075F8
.text:004075BE                 cmp     edx, edi
.text:004075C0                 jz      short loc_4075F0
.text:004075C2
.text:004075C2 loc_4075C2:                             ; CODE XREF: sub_407490+166↓j
.text:004075C2                                         ; sub_407490+173↓j
.text:004075C2                 lea     eax, [ebp+var_18]
.text:004075C5                 test    eax, eax
.text:004075C7                 jz      loc_4074EE
.text:004075CD                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004075D1                 mov     eax, [ebp+var_28]
.text:004075D4                 sub     eax, [ebp+var_34]
.text:004075D7                 sbb     edi, edx
.text:004075D9                 mov     [ebp+var_28], eax
.text:004075DC                 mov     edx, edi
.text:004075DE                 shl     edx, cl
.text:004075E0                 mov     cl, bl
.text:004075E2                 shr     eax, cl
.text:004075E4                 or      edx, eax
.text:004075E6                 mov     [ebp+var_20], edx
.text:004075E9                 shr     edi, cl
.text:004075EB                 jmp     loc_407528
.text:004075F0 ; ---------------------------------------------------------------------------
.text:004075F0
.text:004075F0 loc_4075F0:                             ; CODE XREF: sub_407490+130↑j
.text:004075F0                 mov     eax, [ebp+var_28]
.text:004075F3                 cmp     [ebp+var_34], eax
.text:004075F6                 jbe     short loc_4075C2
.text:004075F8
.text:004075F8 loc_4075F8:                             ; CODE XREF: sub_407490+12C↑j
.text:004075F8                 mov     ecx, [ebp+var_34]
.text:004075FB                 sub     ecx, esi
.text:004075FD                 sbb     edx, [ebp+var_24]
.text:00407600                 mov     [ebp+var_34], ecx
.text:00407603                 jmp     short loc_4075C2
.text:00407603 sub_407490      endp
.text:00407603
.text:00407603 ; ---------------------------------------------------------------------------
.text:00407605                 align 10h
.text:00407610
.text:00407610 ; =============== S U B R O U T I N E =======================================
.text:00407610
.text:00407610 ; Attributes: bp-based frame
.text:00407610
.text:00407610 sub_407610      proc near               ; CODE XREF: sub_4036C0+157↑p
.text:00407610                                         ; sub_4036C0+1B4↑p ...
.text:00407610
.text:00407610 var_24          = dword ptr -24h
.text:00407610 var_20          = dword ptr -20h
.text:00407610 var_1C          = dword ptr -1Ch
.text:00407610 var_18          = dword ptr -18h
.text:00407610 var_14          = dword ptr -14h
.text:00407610 var_C           = dword ptr -0Ch
.text:00407610 var_8           = dword ptr -8
.text:00407610 var_4           = dword ptr -4
.text:00407610 arg_0           = dword ptr  8
.text:00407610 arg_4           = dword ptr  0Ch
.text:00407610 arg_8           = dword ptr  10h
.text:00407610 arg_C           = dword ptr  14h
.text:00407610
.text:00407610                 push    ebp
.text:00407611                 mov     ebp, esp
.text:00407613                 sub     esp, 28h
.text:00407616                 mov     [ebp+var_C], ebx
.text:00407619                 mov     edx, [ebp+arg_C]
.text:0040761C                 mov     ecx, [ebp+arg_0]
.text:0040761F                 mov     [ebp+var_8], esi
.text:00407622                 mov     eax, [ebp+arg_8]
.text:00407625                 test    edx, edx
.text:00407627                 mov     [ebp+var_4], edi
.text:0040762A                 mov     ebx, [ebp+arg_4]
.text:0040762D                 mov     esi, eax
.text:0040762F                 mov     [ebp+var_18], 0
.text:00407636                 mov     [ebp+var_14], 0
.text:0040763D                 mov     [ebp+var_1C], ecx
.text:00407640                 jnz     short loc_407692
.text:00407642                 cmp     eax, ebx
.text:00407644                 jbe     short loc_407670
.text:00407646                 mov     eax, ecx
.text:00407648                 mov     edx, ebx
.text:0040764A                 div     esi
.text:0040764C                 mov     edi, eax
.text:0040764E                 mov     esi, esi
.text:00407650
.text:00407650 loc_407650:                             ; CODE XREF: sub_407610+88↓j
.text:00407650                                         ; sub_407610+A4↓j ...
.text:00407650                 xor     ecx, ecx
.text:00407652
.text:00407652 loc_407652:                             ; CODE XREF: sub_407610+80↓j
.text:00407652                 mov     [ebp+var_18], edi
.text:00407655                 mov     ebx, [ebp+var_C]
.text:00407658                 mov     eax, [ebp+var_18]
.text:0040765B                 mov     [ebp+var_14], ecx
.text:0040765E                 mov     esi, [ebp+var_8]
.text:00407661                 mov     edx, [ebp+var_14]
.text:00407664                 mov     edi, [ebp+var_4]
.text:00407667                 mov     esp, ebp
.text:00407669                 pop     ebp
.text:0040766A                 retn
.text:0040766A ; ---------------------------------------------------------------------------
.text:0040766B                 align 10h
.text:00407670
.text:00407670 loc_407670:                             ; CODE XREF: sub_407610+34↑j
.text:00407670                 test    eax, eax
.text:00407672                 jnz     short loc_407681
.text:00407674                 mov     eax, 1
.text:00407679                 xor     ecx, ecx
.text:0040767B                 xor     edx, edx
.text:0040767D                 div     ecx
.text:0040767F                 mov     esi, eax
.text:00407681
.text:00407681 loc_407681:                             ; CODE XREF: sub_407610+62↑j
.text:00407681                 mov     eax, ebx
.text:00407683                 xor     edx, edx
.text:00407685                 div     esi
.text:00407687                 mov     ecx, eax
.text:00407689                 mov     eax, [ebp+var_1C]
.text:0040768C                 div     esi
.text:0040768E                 mov     edi, eax
.text:00407690                 jmp     short loc_407652
.text:00407692 ; ---------------------------------------------------------------------------
.text:00407692
.text:00407692 loc_407692:                             ; CODE XREF: sub_407610+30↑j
.text:00407692                 cmp     edx, ebx
.text:00407694                 jbe     short loc_4076A0
.text:00407696                 xor     edi, edi
.text:00407698                 jmp     short loc_407650
.text:00407698 ; ---------------------------------------------------------------------------
.text:0040769A                 align 10h
.text:004076A0
.text:004076A0 loc_4076A0:                             ; CODE XREF: sub_407610+84↑j
.text:004076A0                 bsr     eax, edx
.text:004076A3                 xor     eax, 1Fh
.text:004076A6                 mov     [ebp+var_20], eax
.text:004076A9                 jnz     short loc_4076C0
.text:004076AB                 cmp     ebx, edx
.text:004076AD                 ja      short loc_4076B6
.text:004076AF                 xor     edi, edi
.text:004076B1                 cmp     [ebp+var_1C], esi
.text:004076B4                 jb      short loc_407650
.text:004076B6
.text:004076B6 loc_4076B6:                             ; CODE XREF: sub_407610+9D↑j
.text:004076B6                 mov     edi, 1
.text:004076BB                 jmp     short loc_407650
.text:004076BB ; ---------------------------------------------------------------------------
.text:004076BD                 align 10h
.text:004076C0
.text:004076C0 loc_4076C0:                             ; CODE XREF: sub_407610+99↑j
.text:004076C0                 mov     eax, [ebp+var_20]
.text:004076C3                 mov     ecx, 20h ; ' '
.text:004076C8                 sub     ecx, eax
.text:004076CA                 mov     [ebp+var_24], ecx
.text:004076CD                 mov     eax, esi
.text:004076CF                 movzx   ecx, byte ptr [ebp+var_20]
.text:004076D3                 shl     edx, cl
.text:004076D5                 mov     edi, edx
.text:004076D7                 movzx   ecx, byte ptr [ebp+var_24]
.text:004076DB                 mov     edx, ebx
.text:004076DD                 shr     eax, cl
.text:004076DF                 movzx   ecx, byte ptr [ebp+var_20]
.text:004076E3                 or      edi, eax
.text:004076E5                 mov     eax, [ebp+var_1C]
.text:004076E8                 shl     esi, cl
.text:004076EA                 movzx   ecx, byte ptr [ebp+var_24]
.text:004076EE                 shr     edx, cl
.text:004076F0                 movzx   ecx, byte ptr [ebp+var_20]
.text:004076F4                 shl     ebx, cl
.text:004076F6                 movzx   ecx, byte ptr [ebp+var_24]
.text:004076FA                 shr     eax, cl
.text:004076FC                 or      ebx, eax
.text:004076FE                 movzx   ecx, byte ptr [ebp+var_20]
.text:00407702                 mov     eax, ebx
.text:00407704                 div     edi
.text:00407706                 mov     ebx, edx
.text:00407708                 mov     edi, eax
.text:0040770A                 shl     [ebp+var_1C], cl
.text:0040770D                 mul     esi
.text:0040770F                 cmp     edx, ebx
.text:00407711                 ja      short loc_407724
.text:00407713                 cmp     edx, ebx
.text:00407715                 jnz     loc_407650
.text:0040771B                 cmp     eax, [ebp+var_1C]
.text:0040771E                 jbe     loc_407650
.text:00407724
.text:00407724 loc_407724:                             ; CODE XREF: sub_407610+101↑j
.text:00407724                 dec     edi
.text:00407725                 jmp     loc_407650
.text:00407725 sub_407610      endp
.text:00407725
.text:00407725 ; ---------------------------------------------------------------------------
.text:0040772A                 align 10h
.text:00407730 flt_407730      dd 2.3283064e-10        ; DATA XREF: sub_407740+2B↓r
.text:00407734 flt_407734      dd 1.8446744e19         ; DATA XREF: sub_407740:loc_4077D4↓r
.text:00407738                 align 10h
.text:00407740
.text:00407740 ; =============== S U B R O U T I N E =======================================
.text:00407740
.text:00407740 ; Attributes: bp-based frame
.text:00407740
.text:00407740 ; int __cdecl sub_407740(_TBYTE)
.text:00407740 sub_407740      proc near               ; CODE XREF: sub_4036C0+250↑p
.text:00407740                                         ; sub_4036C0+52C↑p ...
.text:00407740
.text:00407740 var_20          = qword ptr -20h
.text:00407740 var_18          = qword ptr -18h
.text:00407740 var_C           = word ptr -0Ch
.text:00407740 var_A           = word ptr -0Ah
.text:00407740 var_4           = dword ptr -4
.text:00407740 arg_0           = tbyte ptr  8
.text:00407740
.text:00407740                 push    ebp
.text:00407741                 fldz
.text:00407743                 mov     ebp, esp
.text:00407745                 sub     esp, 18h
.text:00407748                 fld     [ebp+arg_0]
.text:0040774B                 fxch    st(1)
.text:0040774D                 mov     [ebp+var_4], ebx
.text:00407750                 fucom   st(1)
.text:00407752                 fnstsw  ax
.text:00407754                 sahf
.text:00407755                 jbe     short loc_407766
.text:00407757                 fstp    st
.text:00407759                 fstp    st
.text:0040775B                 xor     eax, eax
.text:0040775D                 xor     edx, edx
.text:0040775F
.text:0040775F loc_40775F:                             ; CODE XREF: sub_407740+7A↓j
.text:0040775F                 mov     ebx, [ebp+var_4]
.text:00407762                 mov     esp, ebp
.text:00407764                 pop     ebp
.text:00407765                 retn
.text:00407766 ; ---------------------------------------------------------------------------
.text:00407766
.text:00407766 loc_407766:                             ; CODE XREF: sub_407740+15↑j
.text:00407766                 fnstcw  [ebp+var_A]
.text:00407769                 xor     ecx, ecx
.text:0040776B                 fld     ds:flt_407730
.text:00407771                 movzx   eax, [ebp+var_A]
.text:00407775                 fmul    st, st(2)
.text:00407777                 or      ax, 0C00h
.text:0040777B                 mov     [ebp+var_C], ax
.text:0040777F                 fldcw   [ebp+var_C]
.text:00407782                 fistp   [ebp+var_18]
.text:00407785                 fldcw   [ebp+var_A]
.text:00407788                 mov     eax, dword ptr [ebp+var_18]
.text:0040778B                 mov     ebx, eax
.text:0040778D                 push    eax
.text:0040778E                 push    ecx
.text:0040778F                 fild    [esp+20h+var_20]
.text:00407792                 add     esp, 8
.text:00407795                 test    eax, eax
.text:00407797                 js      short loc_4077D4
.text:00407799
.text:00407799 loc_407799:                             ; CODE XREF: sub_407740+9A↓j
.text:00407799                 fsubp   st(2), st
.text:0040779B                 fucomp  st(1)
.text:0040779D                 fnstsw  ax
.text:0040779F                 sahf
.text:004077A0                 jbe     short loc_4077C0
.text:004077A2                 fchs
.text:004077A4                 xor     edx, edx
.text:004077A6                 fldcw   [ebp+var_C]
.text:004077A9                 fistp   [ebp+var_18]
.text:004077AC                 fldcw   [ebp+var_A]
.text:004077AF                 mov     eax, dword ptr [ebp+var_18]
.text:004077B2                 sub     ecx, eax
.text:004077B4                 sbb     ebx, edx
.text:004077B6
.text:004077B6 loc_4077B6:                             ; CODE XREF: sub_407740+92↓j
.text:004077B6                 mov     eax, ecx
.text:004077B8                 mov     edx, ebx
.text:004077BA                 jmp     short loc_40775F
.text:004077BA ; ---------------------------------------------------------------------------
.text:004077BC                 align 10h
.text:004077C0
.text:004077C0 loc_4077C0:                             ; CODE XREF: sub_407740+60↑j
.text:004077C0                 fldcw   [ebp+var_C]
.text:004077C3                 fistp   [ebp+var_18]
.text:004077C6                 fldcw   [ebp+var_A]
.text:004077C9                 xor     edx, edx
.text:004077CB                 mov     eax, dword ptr [ebp+var_18]
.text:004077CE                 add     ecx, eax
.text:004077D0                 adc     ebx, edx
.text:004077D2                 jmp     short loc_4077B6
.text:004077D4 ; ---------------------------------------------------------------------------
.text:004077D4
.text:004077D4 loc_4077D4:                             ; CODE XREF: sub_407740+57↑j
.text:004077D4                 fadd    ds:flt_407734
.text:004077DA                 jmp     short loc_407799
.text:004077DA sub_407740      endp
.text:004077DA
.text:004077DA ; ---------------------------------------------------------------------------
.text:004077DC                 align 10h
.text:004077E0
.text:004077E0 ; =============== S U B R O U T I N E =======================================
.text:004077E0
.text:004077E0 ; Attributes: thunk
.text:004077E0
.text:004077E0 ; int __cdecl close(int FileHandle)
.text:004077E0 _close          proc near               ; CODE XREF: sub_401C30+FD↑p
.text:004077E0                                         ; sub_401C30+11D↑p
.text:004077E0
.text:004077E0 FileHandle      = dword ptr  4
.text:004077E0
.text:004077E0                 jmp     ds:__imp__close
.text:004077E0 _close          endp
.text:004077E0
.text:004077E0 ; ---------------------------------------------------------------------------
.text:004077E6                 align 10h
.text:004077F0
.text:004077F0 ; =============== S U B R O U T I N E =======================================
.text:004077F0
.text:004077F0 ; Attributes: thunk
.text:004077F0
.text:004077F0 ; int open(const char *FileName, int OpenFlag, ...)
.text:004077F0 _open           proc near               ; CODE XREF: sub_401C30+257↑p
.text:004077F0
.text:004077F0 FileName        = dword ptr  4
.text:004077F0 OpenFlag        = dword ptr  8
.text:004077F0
.text:004077F0                 jmp     ds:__imp__open
.text:004077F0 _open           endp
.text:004077F0
.text:004077F0 ; ---------------------------------------------------------------------------
.text:004077F6                 align 10h
.text:00407800
.text:00407800 ; =============== S U B R O U T I N E =======================================
.text:00407800
.text:00407800 ; Attributes: thunk
.text:00407800
.text:00407800 ; int __cdecl isatty(int FileHandle)
.text:00407800 _isatty         proc near               ; CODE XREF: sub_4019C0+49↑p
.text:00407800                                         ; sub_401C30+4D↑p
.text:00407800
.text:00407800 FileHandle      = dword ptr  4
.text:00407800
.text:00407800                 jmp     ds:__imp__isatty
.text:00407800 _isatty         endp
.text:00407800
.text:00407800 ; ---------------------------------------------------------------------------
.text:00407806                 align 10h
.text:00407810
.text:00407810 ; =============== S U B R O U T I N E =======================================
.text:00407810
.text:00407810 ; Attributes: thunk
.text:00407810
.text:00407810 ; int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.text:00407810 _read           proc near               ; CODE XREF: sub_403610+2B↑p
.text:00407810
.text:00407810 FileHandle      = dword ptr  4
.text:00407810 DstBuf          = dword ptr  8
.text:00407810 MaxCharCount    = dword ptr  0Ch
.text:00407810
.text:00407810                 jmp     ds:__imp__read
.text:00407810 _read           endp
.text:00407810
.text:00407810 ; ---------------------------------------------------------------------------
.text:00407816                 align 10h
.text:00407820
.text:00407820 ; =============== S U B R O U T I N E =======================================
.text:00407820
.text:00407820 ; Attributes: info_from_lumina
.text:00407820
.text:00407820 ; unsigned __int64 __cdecl strtoull(const char *String, char **EndPtr, int Radix)
.text:00407820 _strtoull       proc near               ; CODE XREF: sub_405A50+AD↑p
.text:00407820
.text:00407820 C               = dword ptr -3Ch
.text:00407820 Type            = dword ptr -38h
.text:00407820 var_34          = dword ptr -34h
.text:00407820 var_30          = dword ptr -30h
.text:00407820 var_2C          = dword ptr -2Ch
.text:00407820 var_28          = dword ptr -28h
.text:00407820 var_24          = dword ptr -24h
.text:00407820 var_20          = dword ptr -20h
.text:00407820 var_1C          = dword ptr -1Ch
.text:00407820 var_18          = dword ptr -18h
.text:00407820 String          = dword ptr  4
.text:00407820 EndPtr          = dword ptr  8
.text:00407820 Radix           = dword ptr  0Ch
.text:00407820
.text:00407820                 push    ebp
.text:00407821                 push    edi
.text:00407822                 push    esi
.text:00407823                 push    ebx
.text:00407824                 sub     esp, 2Ch
.text:00407827                 mov     edx, [esp+3Ch+EndPtr]
.text:0040782B                 test    edx, edx
.text:0040782D                 jz      short loc_407839
.text:0040782F                 mov     eax, [esp+3Ch+String]
.text:00407833                 mov     ecx, [esp+3Ch+EndPtr]
.text:00407837                 mov     [ecx], eax
.text:00407839
.text:00407839 loc_407839:                             ; CODE XREF: _strtoull+D↑j
.text:00407839                 mov     edx, [esp+3Ch+Radix]
.text:0040783D                 test    edx, edx
.text:0040783F                 js      short loc_40784F
.text:00407841                 cmp     [esp+3Ch+Radix], 1
.text:00407846                 jz      short loc_40784F
.text:00407848                 cmp     [esp+3Ch+Radix], 24h ; '$'
.text:0040784D                 jle     short loc_407866
.text:0040784F
.text:0040784F loc_40784F:                             ; CODE XREF: _strtoull+1F↑j
.text:0040784F                                         ; _strtoull+26↑j
.text:0040784F                 call    _errno
.text:00407854                 mov     dword ptr [eax], 21h ; '!'
.text:0040785A
.text:0040785A loc_40785A:                             ; CODE XREF: _strtoull+FF↓j
.text:0040785A                                         ; _strtoull+109↓j
.text:0040785A                 xor     eax, eax
.text:0040785C                 xor     edx, edx
.text:0040785E
.text:0040785E loc_40785E:                             ; CODE XREF: _strtoull+244↓j
.text:0040785E                                         ; _strtoull+251↓j ...
.text:0040785E                 add     esp, 2Ch
.text:00407861                 pop     ebx
.text:00407862                 pop     esi
.text:00407863                 pop     edi
.text:00407864                 pop     ebp
.text:00407865                 retn
.text:00407866 ; ---------------------------------------------------------------------------
.text:00407866
.text:00407866 loc_407866:                             ; CODE XREF: _strtoull+2D↑j
.text:00407866                 mov     ecx, ds:__mb_cur_max
.text:0040786C                 lea     esi, [esi+0]
.text:00407870
.text:00407870 loc_407870:                             ; CODE XREF: _strtoull+7E↓j
.text:00407870                 cmp     dword ptr [ecx], 1
.text:00407873                 mov     esi, [esp+3Ch+String]
.text:00407877                 movsx   edx, byte ptr [esi]
.text:0040787A                 jz      loc_407C52
.text:00407880                 mov     [esp+3Ch+Type], 8 ; Type
.text:00407888                 mov     [esp+3Ch+C], edx ; C
.text:0040788B                 call    _isctype
.text:00407890                 mov     ecx, ds:__mb_cur_max
.text:00407896
.text:00407896 loc_407896:                             ; CODE XREF: _strtoull+445↓j
.text:00407896                 test    eax, eax
.text:00407898                 jz      short loc_4078A0
.text:0040789A                 inc     [esp+3Ch+String]
.text:0040789E                 jmp     short loc_407870
.text:004078A0 ; ---------------------------------------------------------------------------
.text:004078A0
.text:004078A0 loc_4078A0:                             ; CODE XREF: _strtoull+78↑j
.text:004078A0                 mov     esi, [esp+3Ch+String]
.text:004078A4                 xor     ebx, ebx
.text:004078A6                 movzx   edx, byte ptr [esi]
.text:004078A9                 cmp     dl, 2Dh ; '-'
.text:004078AC                 setz    bl
.text:004078AF                 test    ebx, ebx
.text:004078B1                 mov     [esp+3Ch+var_20], ebx
.text:004078B5                 jnz     loc_407C42
.text:004078BB                 cmp     dl, 2Bh ; '+'
.text:004078BE                 jz      loc_407C42
.text:004078C4
.text:004078C4 loc_4078C4:                             ; CODE XREF: _strtoull+42D↓j
.text:004078C4                 mov     ebp, [esp+3Ch+Radix]
.text:004078C8                 test    ebp, ebp
.text:004078CA                 jnz     short loc_4078DD
.text:004078CC                 cmp     dl, 30h ; '0'
.text:004078CF                 jz      loc_407C19
.text:004078D5                 mov     [esp+3Ch+Radix], 0Ah
.text:004078DD
.text:004078DD loc_4078DD:                             ; CODE XREF: _strtoull+AA↑j
.text:004078DD                                         ; _strtoull+40F↓j ...
.text:004078DD                 cmp     [esp+3Ch+Radix], 10h
.text:004078E2                 jz      loc_407BEB
.text:004078E8
.text:004078E8 loc_4078E8:                             ; CODE XREF: _strtoull+3CE↓j
.text:004078E8                                         ; _strtoull+3E2↓j ...
.text:004078E8                 cmp     dword ptr [ecx], 1
.text:004078EB                 movsx   ebx, dl
.text:004078EE                 jz      loc_407BD3
.text:004078F4                 mov     [esp+3Ch+Type], 4 ; Type
.text:004078FC                 mov     [esp+3Ch+C], ebx ; C
.text:004078FF                 call    _isctype
.text:00407904                 mov     esi, [esp+3Ch+String]
.text:00407908                 movzx   edx, byte ptr [esi]
.text:0040790B
.text:0040790B loc_40790B:                             ; CODE XREF: _strtoull+3C6↓j
.text:0040790B                 test    eax, eax
.text:0040790D                 jz      loc_407B3C
.text:00407913                 movsx   eax, dl
.text:00407916                 sub     eax, 30h ; '0'
.text:00407919
.text:00407919 loc_407919:                             ; CODE XREF: _strtoull+34B↓j
.text:00407919                                         ; _strtoull+37C↓j ...
.text:00407919                 inc     [esp+3Ch+String]
.text:0040791D                 test    eax, eax
.text:0040791F                 js      loc_40785A
.text:00407925                 cmp     eax, [esp+3Ch+Radix]
.text:00407929                 jge     loc_40785A
.text:0040792F                 mov     [esp+3Ch+var_1C], eax
.text:00407933                 mov     edx, eax
.text:00407935                 sar     edx, 1Fh
.text:00407938                 mov     [esp+3Ch+var_18], edx
.text:0040793C                 mov     [esp+3Ch+var_24], 0
.text:00407944                 lea     esi, [esi+0]
.text:0040794A                 lea     edi, [edi+0]
.text:00407950
.text:00407950 loc_407950:                             ; CODE XREF: _strtoull+20C↓j
.text:00407950                 mov     ebp, [esp+3Ch+String]
.text:00407954                 mov     ebx, ds:__mb_cur_max
.text:0040795A                 movzx   edx, byte ptr [ebp+0]
.text:0040795E                 cmp     dword ptr [ebx], 1
.text:00407961                 movsx   ecx, dl
.text:00407964                 jz      loc_407B25
.text:0040796A                 mov     [esp+3Ch+C], ecx ; C
.text:0040796D                 mov     [esp+3Ch+Type], 4 ; Type
.text:00407975                 call    _isctype
.text:0040797A                 mov     ecx, [esp+3Ch+String]
.text:0040797E                 movzx   edx, byte ptr [ecx]
.text:00407981
.text:00407981 loc_407981:                             ; CODE XREF: _strtoull+317↓j
.text:00407981                 test    eax, eax
.text:00407983                 jz      loc_407A90
.text:00407989                 movsx   edi, dl
.text:0040798C                 lea     ebp, [edi-30h]
.text:0040798F
.text:0040798F loc_40798F:                             ; CODE XREF: _strtoull+2A3↓j
.text:0040798F                 test    ebp, ebp
.text:00407991                 js      loc_407A3B
.text:00407997                 cmp     ebp, [esp+3Ch+Radix]
.text:0040799B                 jge     loc_407A3B
.text:004079A1                 mov     [esp+3Ch+C], 0FFFFFFFFh
.text:004079A8                 mov     eax, [esp+3Ch+Radix]
.text:004079AC                 mov     [esp+3Ch+Type], 0FFFFFFFFh
.text:004079B4                 cdq
.text:004079B5                 mov     esi, eax
.text:004079B7                 mov     [esp+3Ch+var_34], eax
.text:004079BB                 mov     edi, edx
.text:004079BD                 mov     [esp+3Ch+var_30], edx
.text:004079C1                 call    sub_407610
.text:004079C6                 add     eax, 1
.text:004079C9                 adc     edx, 0
.text:004079CC                 cmp     [esp+3Ch+var_18], edx
.text:004079D0                 ja      short loc_407A20
.text:004079D2                 jb      short loc_4079DA
.text:004079D4                 cmp     [esp+3Ch+var_1C], eax
.text:004079D8                 ja      short loc_407A20
.text:004079DA
.text:004079DA loc_4079DA:                             ; CODE XREF: _strtoull+1B2↑j
.text:004079DA                 mov     eax, [esp+3Ch+var_1C]
.text:004079DE                 mov     ebx, ebp
.text:004079E0                 mul     esi
.text:004079E2                 mov     ecx, edx
.text:004079E4                 mov     [esp+3Ch+var_2C], eax
.text:004079E8                 mov     eax, [esp+3Ch+var_18]
.text:004079EC                 mov     [esp+3Ch+var_28], edx
.text:004079F0                 imul    eax, esi
.text:004079F3                 mov     esi, [esp+3Ch+var_1C]
.text:004079F7                 imul    esi, edi
.text:004079FA                 add     ecx, eax
.text:004079FC                 lea     edi, [esi+ecx]
.text:004079FF                 mov     esi, ebp
.text:00407A01                 sar     esi, 1Fh
.text:00407A04                 add     ebx, [esp+3Ch+var_2C]
.text:00407A08                 mov     [esp+3Ch+var_28], edi
.text:00407A0C                 adc     esi, [esp+3Ch+var_28]
.text:00407A10                 cmp     esi, [esp+3Ch+var_18]
.text:00407A14                 jb      short loc_407A20
.text:00407A16                 ja      short loc_407A31
.text:00407A18                 cmp     ebx, [esp+3Ch+var_1C]
.text:00407A1C                 jnb     short loc_407A31
.text:00407A1E                 mov     esi, esi
.text:00407A20
.text:00407A20 loc_407A20:                             ; CODE XREF: _strtoull+1B0↑j
.text:00407A20                                         ; _strtoull+1B8↑j ...
.text:00407A20                 mov     [esp+3Ch+var_24], 1
.text:00407A28
.text:00407A28 loc_407A28:                             ; CODE XREF: _strtoull+219↓j
.text:00407A28                 inc     [esp+3Ch+String]
.text:00407A2C                 jmp     loc_407950
.text:00407A31 ; ---------------------------------------------------------------------------
.text:00407A31
.text:00407A31 loc_407A31:                             ; CODE XREF: _strtoull+1F6↑j
.text:00407A31                                         ; _strtoull+1FC↑j
.text:00407A31                 mov     [esp+3Ch+var_1C], ebx
.text:00407A35                 mov     [esp+3Ch+var_18], esi
.text:00407A39                 jmp     short loc_407A28
.text:00407A3B ; ---------------------------------------------------------------------------
.text:00407A3B
.text:00407A3B loc_407A3B:                             ; CODE XREF: _strtoull+171↑j
.text:00407A3B                                         ; _strtoull+17B↑j
.text:00407A3B                 mov     eax, [esp+3Ch+EndPtr]
.text:00407A3F                 test    eax, eax
.text:00407A41                 jz      short loc_407A4E
.text:00407A43                 mov     ecx, [esp+3Ch+String]
.text:00407A47                 mov     ebp, [esp+3Ch+EndPtr]
.text:00407A4B                 mov     [ebp+0], ecx
.text:00407A4E
.text:00407A4E loc_407A4E:                             ; CODE XREF: _strtoull+221↑j
.text:00407A4E                 mov     esi, [esp+3Ch+var_24]
.text:00407A52                 test    esi, esi
.text:00407A54                 jnz     short loc_407A76
.text:00407A56                 mov     ebx, [esp+3Ch+var_20]
.text:00407A5A                 mov     eax, [esp+3Ch+var_1C]
.text:00407A5E                 mov     edx, [esp+3Ch+var_18]
.text:00407A62                 test    ebx, ebx
.text:00407A64                 jz      loc_40785E
.text:00407A6A                 neg     eax
.text:00407A6C                 adc     edx, 0
.text:00407A6F                 neg     edx
.text:00407A71                 jmp     loc_40785E
.text:00407A76 ; ---------------------------------------------------------------------------
.text:00407A76
.text:00407A76 loc_407A76:                             ; CODE XREF: _strtoull+234↑j
.text:00407A76                 call    _errno
.text:00407A7B                 mov     edx, 0FFFFFFFFh
.text:00407A80                 mov     dword ptr [eax], 22h ; '"'
.text:00407A86                 mov     eax, 0FFFFFFFFh
.text:00407A8B                 jmp     loc_40785E
.text:00407A90 ; ---------------------------------------------------------------------------
.text:00407A90
.text:00407A90 loc_407A90:                             ; CODE XREF: _strtoull+163↑j
.text:00407A90                 mov     ebp, ds:__mb_cur_max
.text:00407A96                 movsx   ecx, dl
.text:00407A99                 cmp     dword ptr [ebp+0], 1
.text:00407A9D                 jz      short loc_407B11
.text:00407A9F                 mov     [esp+3Ch+Type], 1 ; Type
.text:00407AA7                 mov     [esp+3Ch+C], ecx ; C
.text:00407AAA                 call    _isctype
.text:00407AAF                 mov     ebp, [esp+3Ch+String]
.text:00407AB3                 movzx   edx, byte ptr [ebp+0]
.text:00407AB7
.text:00407AB7 loc_407AB7:                             ; CODE XREF: _strtoull+303↓j
.text:00407AB7                 test    eax, eax
.text:00407AB9                 jz      short loc_407AC8
.text:00407ABB                 movsx   eax, dl
.text:00407ABE                 sub     eax, 37h ; '7'
.text:00407AC1
.text:00407AC1 loc_407AC1:                             ; CODE XREF: _strtoull+2D4↓j
.text:00407AC1                                         ; _strtoull+2DB↓j
.text:00407AC1                 mov     ebp, eax
.text:00407AC3                 jmp     loc_40798F
.text:00407AC8 ; ---------------------------------------------------------------------------
.text:00407AC8
.text:00407AC8 loc_407AC8:                             ; CODE XREF: _strtoull+299↑j
.text:00407AC8                 mov     ecx, ds:__mb_cur_max
.text:00407ACE                 movsx   edx, dl
.text:00407AD1                 cmp     dword ptr [ecx], 1
.text:00407AD4                 jz      short loc_407AFD
.text:00407AD6                 mov     [esp+3Ch+Type], 2 ; Type
.text:00407ADE                 mov     [esp+3Ch+C], edx ; C
.text:00407AE1                 call    _isctype
.text:00407AE6
.text:00407AE6 loc_407AE6:                             ; CODE XREF: _strtoull+2EF↓j
.text:00407AE6                 test    eax, eax
.text:00407AE8                 jz      short loc_407AF6
.text:00407AEA                 mov     edx, [esp+3Ch+String]
.text:00407AEE                 movsx   eax, byte ptr [edx]
.text:00407AF1                 sub     eax, 57h ; 'W'
.text:00407AF4                 jmp     short loc_407AC1
.text:00407AF6 ; ---------------------------------------------------------------------------
.text:00407AF6
.text:00407AF6 loc_407AF6:                             ; CODE XREF: _strtoull+2C8↑j
.text:00407AF6                 mov     eax, 0FFFFFFFFh
.text:00407AFB                 jmp     short loc_407AC1
.text:00407AFD ; ---------------------------------------------------------------------------
.text:00407AFD
.text:00407AFD loc_407AFD:                             ; CODE XREF: _strtoull+2B4↑j
.text:00407AFD                 mov     edi, ds:_pctype
.text:00407B03                 mov     ebx, [edi]
.text:00407B05                 movzx   esi, word ptr [ebx+edx*2]
.text:00407B09                 and     esi, 2
.text:00407B0C                 movzx   eax, si
.text:00407B0F                 jmp     short loc_407AE6
.text:00407B11 ; ---------------------------------------------------------------------------
.text:00407B11
.text:00407B11 loc_407B11:                             ; CODE XREF: _strtoull+27D↑j
.text:00407B11                 mov     edi, ds:_pctype
.text:00407B17                 mov     ebx, [edi]
.text:00407B19                 movzx   esi, word ptr [ebx+ecx*2]
.text:00407B1D                 and     esi, 1
.text:00407B20                 movzx   eax, si
.text:00407B23                 jmp     short loc_407AB7
.text:00407B25 ; ---------------------------------------------------------------------------
.text:00407B25
.text:00407B25 loc_407B25:                             ; CODE XREF: _strtoull+144↑j
.text:00407B25                 mov     ebx, ds:_pctype
.text:00407B2B                 mov     esi, [ebx]
.text:00407B2D                 movzx   edi, word ptr [esi+ecx*2]
.text:00407B31                 and     edi, 4
.text:00407B34                 movzx   eax, di
.text:00407B37                 jmp     loc_407981
.text:00407B3C ; ---------------------------------------------------------------------------
.text:00407B3C
.text:00407B3C loc_407B3C:                             ; CODE XREF: _strtoull+ED↑j
.text:00407B3C                 mov     ebx, ds:__mb_cur_max
.text:00407B42                 movsx   ecx, dl
.text:00407B45                 cmp     dword ptr [ebx], 1
.text:00407B48                 jz      short loc_407BBF
.text:00407B4A                 mov     [esp+3Ch+C], ecx ; C
.text:00407B4D                 mov     [esp+3Ch+Type], 1 ; Type
.text:00407B55                 call    _isctype
.text:00407B5A                 mov     ecx, [esp+3Ch+String]
.text:00407B5E                 movzx   edx, byte ptr [ecx]
.text:00407B61
.text:00407B61 loc_407B61:                             ; CODE XREF: _strtoull+3B1↓j
.text:00407B61                 test    eax, eax
.text:00407B63                 jz      short loc_407B70
.text:00407B65                 movsx   eax, dl
.text:00407B68                 sub     eax, 37h ; '7'
.text:00407B6B                 jmp     loc_407919
.text:00407B70 ; ---------------------------------------------------------------------------
.text:00407B70
.text:00407B70 loc_407B70:                             ; CODE XREF: _strtoull+343↑j
.text:00407B70                 mov     ebx, ds:__mb_cur_max
.text:00407B76                 movsx   edx, dl
.text:00407B79                 cmp     dword ptr [ebx], 1
.text:00407B7C                 jz      short loc_407BAB
.text:00407B7E                 mov     [esp+3Ch+Type], 2 ; Type
.text:00407B86                 mov     [esp+3Ch+C], edx ; C
.text:00407B89                 call    _isctype
.text:00407B8E
.text:00407B8E loc_407B8E:                             ; CODE XREF: _strtoull+39D↓j
.text:00407B8E                 test    eax, eax
.text:00407B90                 jz      short loc_407BA1
.text:00407B92                 mov     ecx, [esp+3Ch+String]
.text:00407B96                 movsx   eax, byte ptr [ecx]
.text:00407B99                 sub     eax, 57h ; 'W'
.text:00407B9C                 jmp     loc_407919
.text:00407BA1 ; ---------------------------------------------------------------------------
.text:00407BA1
.text:00407BA1 loc_407BA1:                             ; CODE XREF: _strtoull+370↑j
.text:00407BA1                 mov     eax, 0FFFFFFFFh
.text:00407BA6                 jmp     loc_407919
.text:00407BAB ; ---------------------------------------------------------------------------
.text:00407BAB
.text:00407BAB loc_407BAB:                             ; CODE XREF: _strtoull+35C↑j
.text:00407BAB                 mov     esi, ds:_pctype
.text:00407BB1                 mov     edi, [esi]
.text:00407BB3                 movzx   ebp, word ptr [edi+edx*2]
.text:00407BB7                 and     ebp, 2
.text:00407BBA                 movzx   eax, bp
.text:00407BBD                 jmp     short loc_407B8E
.text:00407BBF ; ---------------------------------------------------------------------------
.text:00407BBF
.text:00407BBF loc_407BBF:                             ; CODE XREF: _strtoull+328↑j
.text:00407BBF                 mov     esi, ds:_pctype
.text:00407BC5                 mov     edi, [esi]
.text:00407BC7                 movzx   ebp, word ptr [edi+ecx*2]
.text:00407BCB                 and     ebp, 1
.text:00407BCE                 movzx   eax, bp
.text:00407BD1                 jmp     short loc_407B61
.text:00407BD3 ; ---------------------------------------------------------------------------
.text:00407BD3
.text:00407BD3 loc_407BD3:                             ; CODE XREF: _strtoull+CE↑j
.text:00407BD3                 mov     edi, ds:_pctype
.text:00407BD9                 mov     ebp, [edi]
.text:00407BDB                 movzx   ecx, word ptr [ebp+ebx*2+0]
.text:00407BE0                 and     ecx, 4
.text:00407BE3                 movzx   eax, cx
.text:00407BE6                 jmp     loc_40790B
.text:00407BEB ; ---------------------------------------------------------------------------
.text:00407BEB
.text:00407BEB loc_407BEB:                             ; CODE XREF: _strtoull+C2↑j
.text:00407BEB                 cmp     dl, 30h ; '0'
.text:00407BEE                 jnz     loc_4078E8
.text:00407BF4                 mov     esi, [esp+3Ch+String]
.text:00407BF8                 movzx   eax, byte ptr [esi+1]
.text:00407BFC                 cmp     al, 58h ; 'X'
.text:00407BFE                 jz      short loc_407C08
.text:00407C00                 cmp     al, 78h ; 'x'
.text:00407C02                 jnz     loc_4078E8
.text:00407C08
.text:00407C08 loc_407C08:                             ; CODE XREF: _strtoull+3DE↑j
.text:00407C08                 add     [esp+3Ch+String], 2
.text:00407C0D                 mov     ebx, [esp+3Ch+String]
.text:00407C11                 movzx   edx, byte ptr [ebx]
.text:00407C14                 jmp     loc_4078E8
.text:00407C19 ; ---------------------------------------------------------------------------
.text:00407C19
.text:00407C19 loc_407C19:                             ; CODE XREF: _strtoull+AF↑j
.text:00407C19                 mov     edi, [esp+3Ch+String]
.text:00407C1D                 movzx   eax, byte ptr [edi+1]
.text:00407C21                 cmp     al, 58h ; 'X'
.text:00407C23                 jz      short loc_407C35
.text:00407C25                 mov     [esp+3Ch+Radix], 8
.text:00407C2D                 cmp     al, 78h ; 'x'
.text:00407C2F                 jnz     loc_4078DD
.text:00407C35
.text:00407C35 loc_407C35:                             ; CODE XREF: _strtoull+403↑j
.text:00407C35                 mov     [esp+3Ch+Radix], 10h
.text:00407C3D                 jmp     loc_4078DD
.text:00407C42 ; ---------------------------------------------------------------------------
.text:00407C42
.text:00407C42 loc_407C42:                             ; CODE XREF: _strtoull+95↑j
.text:00407C42                                         ; _strtoull+9E↑j
.text:00407C42                 inc     [esp+3Ch+String]
.text:00407C46                 mov     eax, [esp+3Ch+String]
.text:00407C4A                 movzx   edx, byte ptr [eax]
.text:00407C4D                 jmp     loc_4078C4
.text:00407C52 ; ---------------------------------------------------------------------------
.text:00407C52
.text:00407C52 loc_407C52:                             ; CODE XREF: _strtoull+5A↑j
.text:00407C52                 mov     ebp, ds:_pctype
.text:00407C58                 mov     edi, [ebp+0]
.text:00407C5B                 movzx   ebx, word ptr [edi+edx*2]
.text:00407C5F                 and     ebx, 8
.text:00407C62                 movzx   eax, bx
.text:00407C65                 jmp     loc_407896
.text:00407C65 _strtoull       endp
.text:00407C65
.text:00407C65 ; ---------------------------------------------------------------------------
.text:00407C6A                 align 10h
.text:00407C70                 jmp     ds:__set_app_type
.text:00407C70 ; ---------------------------------------------------------------------------
.text:00407C76                 align 10h
.text:00407C80
.text:00407C80 ; =============== S U B R O U T I N E =======================================
.text:00407C80
.text:00407C80 ; Attributes: thunk
.text:00407C80
.text:00407C80 ; void __cdecl cexit()
.text:00407C80 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00407C80                 jmp     ds:__imp__cexit
.text:00407C80 _cexit          endp
.text:00407C80
.text:00407C80 ; ---------------------------------------------------------------------------
.text:00407C86                 align 10h
.text:00407C90
.text:00407C90 ; =============== S U B R O U T I N E =======================================
.text:00407C90
.text:00407C90 ; Attributes: thunk
.text:00407C90
.text:00407C90 ; char ***__cdecl _p__environ()
.text:00407C90 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00407C90                 jmp     ds:__imp___p__environ
.text:00407C90 __p__environ    endp
.text:00407C90
.text:00407C90 ; ---------------------------------------------------------------------------
.text:00407C96                 align 10h
.text:00407CA0
.text:00407CA0 ; =============== S U B R O U T I N E =======================================
.text:00407CA0
.text:00407CA0 ; Attributes: thunk
.text:00407CA0
.text:00407CA0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00407CA0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00407CA0                                         ; TopLevelExceptionFilter+88↑p ...
.text:00407CA0
.text:00407CA0 Signal          = dword ptr  4
.text:00407CA0 Function        = dword ptr  8
.text:00407CA0
.text:00407CA0                 jmp     ds:__imp_signal
.text:00407CA0 signal          endp
.text:00407CA0
.text:00407CA0 ; ---------------------------------------------------------------------------
.text:00407CA6                 align 10h
.text:00407CB0
.text:00407CB0 ; =============== S U B R O U T I N E =======================================
.text:00407CB0
.text:00407CB0 ; Attributes: thunk
.text:00407CB0
.text:00407CB0 ; int *__cdecl _p__fmode()
.text:00407CB0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00407CB0                 jmp     ds:__imp___p__fmode
.text:00407CB0 __p__fmode      endp
.text:00407CB0
.text:00407CB0 ; ---------------------------------------------------------------------------
.text:00407CB6                 align 10h
.text:00407CC0
.text:00407CC0 ; =============== S U B R O U T I N E =======================================
.text:00407CC0
.text:00407CC0 ; Attributes: thunk
.text:00407CC0
.text:00407CC0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00407CC0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00407CC0                                         ; sub_401080+90↑p ...
.text:00407CC0
.text:00407CC0 FileHandle      = dword ptr  4
.text:00407CC0 Mode            = dword ptr  8
.text:00407CC0
.text:00407CC0                 jmp     ds:__imp__setmode
.text:00407CC0 _setmode        endp
.text:00407CC0
.text:00407CC0 ; ---------------------------------------------------------------------------
.text:00407CC6                 align 10h
.text:00407CD0
.text:00407CD0 ; =============== S U B R O U T I N E =======================================
.text:00407CD0
.text:00407CD0 ; Attributes: thunk
.text:00407CD0
.text:00407CD0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00407CD0                 jmp     ds:__imp___getmainargs
.text:00407CD0 __getmainargs   endp
.text:00407CD0
.text:00407CD0 ; ---------------------------------------------------------------------------
.text:00407CD6                 align 10h
.text:00407CE0
.text:00407CE0 ; =============== S U B R O U T I N E =======================================
.text:00407CE0
.text:00407CE0 ; Attributes: thunk
.text:00407CE0
.text:00407CE0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00407CE0 setlocale       proc near               ; CODE XREF: sub_4015B0+3A↑p
.text:00407CE0
.text:00407CE0 Category        = dword ptr  4
.text:00407CE0 Locale          = dword ptr  8
.text:00407CE0
.text:00407CE0                 jmp     ds:__imp_setlocale
.text:00407CE0 setlocale       endp
.text:00407CE0
.text:00407CE0 ; ---------------------------------------------------------------------------
.text:00407CE6                 align 10h
.text:00407CF0
.text:00407CF0 ; =============== S U B R O U T I N E =======================================
.text:00407CF0
.text:00407CF0 ; Attributes: thunk
.text:00407CF0
.text:00407CF0 ; int __cdecl fclose(FILE *Stream)
.text:00407CF0 fclose          proc near               ; CODE XREF: sub_4015B0+264↑p
.text:00407CF0                                         ; sub_4019C0+C2↑p ...
.text:00407CF0
.text:00407CF0 Stream          = dword ptr  4
.text:00407CF0
.text:00407CF0                 jmp     ds:__imp_fclose
.text:00407CF0 fclose          endp
.text:00407CF0
.text:00407CF0 ; ---------------------------------------------------------------------------
.text:00407CF6                 align 10h
.text:00407D00
.text:00407D00 ; =============== S U B R O U T I N E =======================================
.text:00407D00
.text:00407D00 ; Attributes: thunk
.text:00407D00
.text:00407D00 ; int *__cdecl errno()
.text:00407D00 _errno          proc near               ; CODE XREF: sub_4015B0+26C↑p
.text:00407D00                                         ; sub_4019C0:loc_401B54↑p ...
.text:00407D00                 jmp     ds:__imp__errno
.text:00407D00 _errno          endp
.text:00407D00
.text:00407D00 ; ---------------------------------------------------------------------------
.text:00407D06                 align 10h
.text:00407D10
.text:00407D10 ; =============== S U B R O U T I N E =======================================
.text:00407D10
.text:00407D10 ; Attributes: noreturn thunk
.text:00407D10
.text:00407D10 ; void __cdecl __noreturn exit(int Code)
.text:00407D10 exit            proc near               ; CODE XREF: sub_4015B0:loc_4016B6↑p
.text:00407D10                                         ; sub_4018A0+3E↑p ...
.text:00407D10
.text:00407D10 Code            = dword ptr  4
.text:00407D10
.text:00407D10                 jmp     ds:__imp_exit
.text:00407D10 exit            endp
.text:00407D10
.text:00407D10 ; ---------------------------------------------------------------------------
.text:00407D16                 align 10h
.text:00407D20
.text:00407D20 ; =============== S U B R O U T I N E =======================================
.text:00407D20
.text:00407D20 ; Attributes: thunk
.text:00407D20
.text:00407D20 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00407D20 fputs           proc near               ; CODE XREF: sub_4015B0+198↑p
.text:00407D20                                         ; sub_4015B0+1BA↑p ...
.text:00407D20
.text:00407D20 Buffer          = dword ptr  4
.text:00407D20 Stream          = dword ptr  8
.text:00407D20
.text:00407D20                 jmp     ds:__imp_fputs
.text:00407D20 fputs           endp
.text:00407D20
.text:00407D20 ; ---------------------------------------------------------------------------
.text:00407D26                 align 10h
.text:00407D30
.text:00407D30 ; =============== S U B R O U T I N E =======================================
.text:00407D30
.text:00407D30 ; Attributes: thunk
.text:00407D30
.text:00407D30 ; int printf(const char *const Format, ...)
.text:00407D30 printf          proc near               ; CODE XREF: sub_4015B0+176↑p
.text:00407D30                                         ; sub_4015B0+21B↑p ...
.text:00407D30
.text:00407D30 Format          = dword ptr  4
.text:00407D30
.text:00407D30                 jmp     ds:__imp_printf
.text:00407D30 printf          endp
.text:00407D30
.text:00407D30 ; ---------------------------------------------------------------------------
.text:00407D36                 align 10h
.text:00407D40
.text:00407D40 ; =============== S U B R O U T I N E =======================================
.text:00407D40
.text:00407D40 ; Attributes: thunk
.text:00407D40
.text:00407D40 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00407D40 fprintf         proc near               ; CODE XREF: sub_4015B0+FA↑p
.text:00407D40                                         ; sub_4018A0+36↑p ...
.text:00407D40
.text:00407D40 Stream          = dword ptr  4
.text:00407D40 Format          = dword ptr  8
.text:00407D40
.text:00407D40                 jmp     ds:__imp_fprintf
.text:00407D40 fprintf         endp
.text:00407D40
.text:00407D40 ; ---------------------------------------------------------------------------
.text:00407D46                 align 10h
.text:00407D50
.text:00407D50 ; =============== S U B R O U T I N E =======================================
.text:00407D50
.text:00407D50 ; Attributes: thunk
.text:00407D50
.text:00407D50 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00407D50 fopen           proc near               ; CODE XREF: sub_4019C0+249↑p
.text:00407D50
.text:00407D50 FileName        = dword ptr  4
.text:00407D50 Mode            = dword ptr  8
.text:00407D50
.text:00407D50                 jmp     ds:__imp_fopen
.text:00407D50 fopen           endp
.text:00407D50
.text:00407D50 ; ---------------------------------------------------------------------------
.text:00407D56                 align 10h
.text:00407D60
.text:00407D60 ; =============== S U B R O U T I N E =======================================
.text:00407D60
.text:00407D60 ; Attributes: thunk
.text:00407D60
.text:00407D60 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00407D60 _flsbuf         proc near               ; CODE XREF: sub_4019C0+174↑p
.text:00407D60                                         ; sub_401C30+1DA↑p ...
.text:00407D60
.text:00407D60 File            = dword ptr  8
.text:00407D60
.text:00407D60                 jmp     ds:__imp__flsbuf
.text:00407D60 _flsbuf         endp
.text:00407D60
.text:00407D60 ; ---------------------------------------------------------------------------
.text:00407D66                 align 10h
.text:00407D70
.text:00407D70 ; =============== S U B R O U T I N E =======================================
.text:00407D70
.text:00407D70 ; Attributes: thunk
.text:00407D70
.text:00407D70 ; int __cdecl filbuf(FILE *File)
.text:00407D70 _filbuf         proc near               ; CODE XREF: sub_4019C0+213↑p
.text:00407D70
.text:00407D70 File            = dword ptr  4
.text:00407D70
.text:00407D70                 jmp     ds:__imp__filbuf
.text:00407D70 _filbuf         endp
.text:00407D70
.text:00407D70 ; ---------------------------------------------------------------------------
.text:00407D76                 align 10h
.text:00407D80
.text:00407D80 ; =============== S U B R O U T I N E =======================================
.text:00407D80
.text:00407D80 ; Attributes: thunk
.text:00407D80
.text:00407D80 ; size_t __cdecl strlen(const char *Str)
.text:00407D80 strlen          proc near               ; CODE XREF: sub_4020F0+2A9↑p
.text:00407D80                                         ; sub_4020F0+346↑p ...
.text:00407D80
.text:00407D80 Str             = dword ptr  4
.text:00407D80
.text:00407D80                 jmp     ds:__imp_strlen
.text:00407D80 strlen          endp
.text:00407D80
.text:00407D80 ; ---------------------------------------------------------------------------
.text:00407D86                 align 10h
.text:00407D90
.text:00407D90 ; =============== S U B R O U T I N E =======================================
.text:00407D90
.text:00407D90 ; Attributes: thunk
.text:00407D90
.text:00407D90 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00407D90 strncmp         proc near               ; CODE XREF: sub_4020F0+23F↑p
.text:00407D90                                         ; sub_4020F0+699↑p ...
.text:00407D90
.text:00407D90 Str1            = dword ptr  4
.text:00407D90 Str2            = dword ptr  8
.text:00407D90 MaxCount        = dword ptr  0Ch
.text:00407D90
.text:00407D90                 jmp     ds:__imp_strncmp
.text:00407D90 strncmp         endp
.text:00407D90
.text:00407D90 ; ---------------------------------------------------------------------------
.text:00407D96                 align 10h
.text:00407DA0
.text:00407DA0 ; =============== S U B R O U T I N E =======================================
.text:00407DA0
.text:00407DA0 ; Attributes: thunk
.text:00407DA0
.text:00407DA0 ; char *__cdecl getenv(const char *VarName)
.text:00407DA0 getenv          proc near               ; CODE XREF: sub_4020F0+B57↑p
.text:00407DA0                                         ; .text:004043E7↑p ...
.text:00407DA0
.text:00407DA0 VarName         = dword ptr  4
.text:00407DA0
.text:00407DA0                 jmp     ds:__imp_getenv
.text:00407DA0 getenv          endp
.text:00407DA0
.text:00407DA0 ; ---------------------------------------------------------------------------
.text:00407DA6                 align 10h
.text:00407DB0
.text:00407DB0 ; =============== S U B R O U T I N E =======================================
.text:00407DB0
.text:00407DB0 ; Attributes: thunk
.text:00407DB0
.text:00407DB0 ; char *__cdecl strchr(const char *Str, int Val)
.text:00407DB0 strchr          proc near               ; CODE XREF: sub_4020F0+469↑p
.text:00407DB0                                         ; sub_4020F0+53A↑p ...
.text:00407DB0
.text:00407DB0 Str             = dword ptr  4
.text:00407DB0 Val             = dword ptr  8
.text:00407DB0
.text:00407DB0                 jmp     ds:__imp_strchr
.text:00407DB0 strchr          endp
.text:00407DB0
.text:00407DB0 ; ---------------------------------------------------------------------------
.text:00407DB6                 align 10h
.text:00407DC0
.text:00407DC0 ; =============== S U B R O U T I N E =======================================
.text:00407DC0
.text:00407DC0 ; Attributes: thunk
.text:00407DC0
.text:00407DC0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00407DC0 vfprintf        proc near               ; CODE XREF: sub_4031B0+C1↑p
.text:00407DC0                                         ; sub_407070+49↑p ...
.text:00407DC0
.text:00407DC0 Stream          = dword ptr  4
.text:00407DC0 Format          = dword ptr  8
.text:00407DC0 ArgList         = dword ptr  0Ch
.text:00407DC0
.text:00407DC0                 jmp     ds:__imp_vfprintf
.text:00407DC0 vfprintf        endp
.text:00407DC0
.text:00407DC0 ; ---------------------------------------------------------------------------
.text:00407DC6                 align 10h
.text:00407DD0
.text:00407DD0 ; =============== S U B R O U T I N E =======================================
.text:00407DD0
.text:00407DD0 ; Attributes: noreturn thunk
.text:00407DD0
.text:00407DD0 ; void __cdecl __noreturn abort()
.text:00407DD0 abort           proc near               ; CODE XREF: sub_4031B0:loc_40324C↑p
.text:00407DD0                                         ; .text:loc_40434D↑p ...
.text:00407DD0                 jmp     ds:__imp_abort
.text:00407DD0 abort           endp
.text:00407DD0
.text:00407DD0 ; ---------------------------------------------------------------------------
.text:00407DD6                 align 10h
.text:00407DE0
.text:00407DE0 ; =============== S U B R O U T I N E =======================================
.text:00407DE0
.text:00407DE0 ; Attributes: thunk
.text:00407DE0
.text:00407DE0 ; void *__cdecl memmove(void *, const void *Src, size_t Size)
.text:00407DE0 memmove         proc near               ; CODE XREF: sub_4036C0+2E5↑p
.text:00407DE0
.text:00407DE0 Src             = dword ptr  8
.text:00407DE0 Size            = dword ptr  0Ch
.text:00407DE0
.text:00407DE0                 jmp     ds:__imp_memmove
.text:00407DE0 memmove         endp
.text:00407DE0
.text:00407DE0 ; ---------------------------------------------------------------------------
.text:00407DE6                 align 10h
.text:00407DF0
.text:00407DF0 ; =============== S U B R O U T I N E =======================================
.text:00407DF0
.text:00407DF0 ; Attributes: thunk
.text:00407DF0
.text:00407DF0 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00407DF0 sprintf         proc near               ; CODE XREF: sub_4036C0+2C1↑p
.text:00407DF0                                         ; sub_4036C0+58F↑p
.text:00407DF0
.text:00407DF0 Buffer          = dword ptr  4
.text:00407DF0 Format          = dword ptr  8
.text:00407DF0
.text:00407DF0                 jmp     ds:__imp_sprintf
.text:00407DF0 sprintf         endp
.text:00407DF0
.text:00407DF0 ; ---------------------------------------------------------------------------
.text:00407DF6                 align 10h
.text:00407E00
.text:00407E00 ; =============== S U B R O U T I N E =======================================
.text:00407E00
.text:00407E00 ; Attributes: thunk
.text:00407E00
.text:00407E00 ; struct lconv *__cdecl localeconv()
.text:00407E00 localeconv      proc near               ; CODE XREF: sub_4036C0+A6↑p
.text:00407E00                 jmp     ds:__imp_localeconv
.text:00407E00 localeconv      endp
.text:00407E00
.text:00407E00 ; ---------------------------------------------------------------------------
.text:00407E06                 align 10h
.text:00407E10
.text:00407E10 ; =============== S U B R O U T I N E =======================================
.text:00407E10
.text:00407E10 ; Attributes: thunk
.text:00407E10
.text:00407E10 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00407E10 memcpy          proc near               ; CODE XREF: sub_4036C0+85A↑p
.text:00407E10                                         ; sub_4036C0+9A7↑p ...
.text:00407E10
.text:00407E10 Src             = dword ptr  8
.text:00407E10 Size            = dword ptr  0Ch
.text:00407E10
.text:00407E10                 jmp     ds:__imp_memcpy
.text:00407E10 memcpy          endp
.text:00407E10
.text:00407E10 ; ---------------------------------------------------------------------------
.text:00407E16                 align 10h
.text:00407E20
.text:00407E20 ; =============== S U B R O U T I N E =======================================
.text:00407E20
.text:00407E20 ; Attributes: thunk
.text:00407E20
.text:00407E20 ; void __cdecl free(void *Block)
.text:00407E20 free            proc near               ; CODE XREF: sub_405810+112↑p
.text:00407E20
.text:00407E20 Block           = dword ptr  4
.text:00407E20
.text:00407E20                 jmp     ds:__imp_free
.text:00407E20 free            endp
.text:00407E20
.text:00407E20 ; ---------------------------------------------------------------------------
.text:00407E26                 align 10h
.text:00407E30
.text:00407E30 ; =============== S U B R O U T I N E =======================================
.text:00407E30
.text:00407E30 ; Attributes: thunk
.text:00407E30
.text:00407E30 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00407E30 iswctype        proc near               ; CODE XREF: sub_4046D0+78B↑p
.text:00407E30
.text:00407E30 C               = word ptr  4
.text:00407E30 Type            = word ptr  8
.text:00407E30
.text:00407E30                 jmp     ds:__imp_iswctype
.text:00407E30 iswctype        endp
.text:00407E30
.text:00407E30 ; ---------------------------------------------------------------------------
.text:00407E36                 align 10h
.text:00407E40
.text:00407E40 ; =============== S U B R O U T I N E =======================================
.text:00407E40
.text:00407E40 ; Attributes: thunk
.text:00407E40
.text:00407E40 ; int __cdecl isctype(int C, int Type)
.text:00407E40 _isctype        proc near               ; CODE XREF: sub_4046D0+610↑p
.text:00407E40                                         ; sub_405A50+72↑p ...
.text:00407E40
.text:00407E40 C               = dword ptr  4
.text:00407E40 Type            = dword ptr  8
.text:00407E40
.text:00407E40                 jmp     ds:__imp__isctype
.text:00407E40 _isctype        endp
.text:00407E40
.text:00407E40 ; ---------------------------------------------------------------------------
.text:00407E46                 align 10h
.text:00407E50
.text:00407E50 ; =============== S U B R O U T I N E =======================================
.text:00407E50
.text:00407E50 ; Attributes: noreturn thunk
.text:00407E50
.text:00407E50 _assert         proc near               ; CODE XREF: sub_405A50+C88↑p
.text:00407E50                 jmp     ds:__imp__assert
.text:00407E50 _assert         endp
.text:00407E50
.text:00407E50 ; ---------------------------------------------------------------------------
.text:00407E56                 align 10h
.text:00407E60
.text:00407E60 ; =============== S U B R O U T I N E =======================================
.text:00407E60
.text:00407E60 ; Attributes: thunk
.text:00407E60
.text:00407E60 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00407E60 memset          proc near               ; CODE XREF: .text:00406DF6↑p
.text:00407E60
.text:00407E60 Val             = dword ptr  8
.text:00407E60 Size            = dword ptr  0Ch
.text:00407E60
.text:00407E60                 jmp     ds:__imp_memset
.text:00407E60 memset          endp
.text:00407E60
.text:00407E60 ; ---------------------------------------------------------------------------
.text:00407E66                 align 10h
.text:00407E70
.text:00407E70 ; =============== S U B R O U T I N E =======================================
.text:00407E70
.text:00407E70 ; Attributes: thunk
.text:00407E70
.text:00407E70 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00407E70 calloc          proc near               ; CODE XREF: .text:00406E33↑p
.text:00407E70
.text:00407E70 Count           = dword ptr  4
.text:00407E70 Size            = dword ptr  8
.text:00407E70
.text:00407E70                 jmp     ds:__imp_calloc
.text:00407E70 calloc          endp
.text:00407E70
.text:00407E70 ; ---------------------------------------------------------------------------
.text:00407E76                 align 10h
.text:00407E80
.text:00407E80 ; =============== S U B R O U T I N E =======================================
.text:00407E80
.text:00407E80 ; Attributes: thunk
.text:00407E80
.text:00407E80 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00407E80 realloc         proc near               ; CODE XREF: .text:00406D30↑p
.text:00407E80                                         ; sub_406D60+16↑p ...
.text:00407E80
.text:00407E80 Block           = dword ptr  4
.text:00407E80 Size            = dword ptr  8
.text:00407E80
.text:00407E80                 jmp     ds:__imp_realloc
.text:00407E80 realloc         endp
.text:00407E80
.text:00407E80 ; ---------------------------------------------------------------------------
.text:00407E86                 align 10h
.text:00407E90
.text:00407E90 ; =============== S U B R O U T I N E =======================================
.text:00407E90
.text:00407E90 ; Attributes: thunk
.text:00407E90
.text:00407E90 ; void *__cdecl malloc(size_t Size)
.text:00407E90 malloc          proc near               ; CODE XREF: .text:00406CB4↑p
.text:00407E90                                         ; sub_406CD0+E↑p ...
.text:00407E90
.text:00407E90 Size            = dword ptr  4
.text:00407E90
.text:00407E90                 jmp     ds:__imp_malloc
.text:00407E90 malloc          endp
.text:00407E90
.text:00407E90 ; ---------------------------------------------------------------------------
.text:00407E96                 align 10h
.text:00407EA0
.text:00407EA0 ; =============== S U B R O U T I N E =======================================
.text:00407EA0
.text:00407EA0 ; Attributes: thunk
.text:00407EA0
.text:00407EA0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00407EA0 strcmp          proc near               ; CODE XREF: sub_407174+180↑p
.text:00407EA0
.text:00407EA0 Str1            = dword ptr  4
.text:00407EA0 Str2            = dword ptr  8
.text:00407EA0
.text:00407EA0                 jmp     ds:__imp_strcmp
.text:00407EA0 strcmp          endp
.text:00407EA0
.text:00407EA0 ; ---------------------------------------------------------------------------
.text:00407EA6                 align 10h
.text:00407EB0
.text:00407EB0 ; =============== S U B R O U T I N E =======================================
.text:00407EB0
.text:00407EB0 ; Attributes: thunk
.text:00407EB0
.text:00407EB0 ; int __cdecl fflush(FILE *Stream)
.text:00407EB0 fflush          proc near               ; CODE XREF: sub_407070+19↑p
.text:00407EB0                                         ; sub_407070+81↑p ...
.text:00407EB0
.text:00407EB0 Stream          = dword ptr  4
.text:00407EB0
.text:00407EB0                 jmp     ds:__imp_fflush
.text:00407EB0 fflush          endp
.text:00407EB0
.text:00407EB0 ; ---------------------------------------------------------------------------
.text:00407EB6                 align 10h
.text:00407EC0
.text:00407EC0 ; =============== S U B R O U T I N E =======================================
.text:00407EC0
.text:00407EC0 ; Attributes: thunk
.text:00407EC0
.text:00407EC0 ; char *__cdecl strerror(int ErrorMessage)
.text:00407EC0 strerror        proc near               ; CODE XREF: sub_407070+A5↑p
.text:00407EC0                                         ; sub_407174+10F↑p
.text:00407EC0
.text:00407EC0 ErrorMessage    = dword ptr  4
.text:00407EC0
.text:00407EC0                 jmp     ds:__imp_strerror
.text:00407EC0 strerror        endp
.text:00407EC0
.text:00407EC0 ; ---------------------------------------------------------------------------
.text:00407EC6                 align 10h
.text:00407ED0
.text:00407ED0 ; =============== S U B R O U T I N E =======================================
.text:00407ED0
.text:00407ED0 ; Attributes: thunk
.text:00407ED0
.text:00407ED0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00407ED0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00407ED0
.text:00407ED0 lpTopLevelExceptionFilter= dword ptr  4
.text:00407ED0
.text:00407ED0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00407ED0 SetUnhandledExceptionFilter endp
.text:00407ED0
.text:00407ED0 ; ---------------------------------------------------------------------------
.text:00407ED6                 align 10h
.text:00407EE0
.text:00407EE0 ; =============== S U B R O U T I N E =======================================
.text:00407EE0
.text:00407EE0 ; Attributes: noreturn thunk
.text:00407EE0
.text:00407EE0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00407EE0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00407EE0
.text:00407EE0 uExitCode       = dword ptr  4
.text:00407EE0
.text:00407EE0                 jmp     ds:__imp_ExitProcess
.text:00407EE0 ExitProcess     endp
.text:00407EE0
.text:00407EE0 ; ---------------------------------------------------------------------------
.text:00407EE6                 align 10h
.text:00407EF0 dword_407EF0    dd 0FFFFFFFFh           ; DATA XREF: .text:00407399↑r
.text:00407EF0                                         ; .text:loc_4073C0↑r ...
.text:00407EF4 dword_407EF4    dd 0                    ; DATA XREF: .text:loc_4073CC↑r
.text:00407EF4                                         ; sub_4073F0:loc_40743D↑r
.text:00407EF8                 dd 0FFFFFFFFh
.text:00407EFC dword_407EFC    dd 41h dup(0)           ; DATA XREF: .data:off_408094↓o
.text:00407EFC _text           ends
.text:00407EFC
.data:00408000 ; Section 2. (virtual address 00008000)
.data:00408000 ; Virtual size                  : 000000B0 (    176.)
.data:00408000 ; Section size in file          : 00000200 (    512.)
.data:00408000 ; Offset to raw data for section: 00007400
.data:00408000 ; Flags C0000040: Data Readable Writable
.data:00408000 ; Alignment     : default
.data:00408000 ; ===========================================================================
.data:00408000
.data:00408000 ; Segment type: Pure data
.data:00408000 ; Segment permissions: Read/Write
.data:00408000 _data           segment para public 'DATA' use32
.data:00408000                 assume cs:_data
.data:00408000                 ;org 408000h
.data:00408000 dword_408000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00408000                                         ; sub_401080+CC↑r
.data:00408004 dword_408004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00408004                                         ; sub_401080+D4↑r
.data:00408008                 align 10h
.data:00408010 dword_408010    dd 1                    ; DATA XREF: sub_4015B0:loc_4017D5↑r
.data:00408010                                         ; sub_4015B0+2B5↑r ...
.data:00408014 dword_408014    dd 1                    ; DATA XREF: sub_402C80+11↑r
.data:00408014                                         ; .text:00402D21↑r
.data:00408018 dword_408018    dd 3Fh                  ; DATA XREF: sub_402C80+7D↑w
.data:00408018                                         ; .text:00402D8D↑w
.data:0040801C                 align 10h
.data:00408020 ; char *Buffer
.data:00408020 Buffer          dd offset aCopyrightC2005
.data:00408020                                         ; DATA XREF: sub_4031B0+DC↑r
.data:00408020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00408024                 align 10h
.data:00408030 ; int Code
.data:00408030 Code            dd 1                    ; DATA XREF: sub_403530+6D↑r
.data:00408030                                         ; sub_403530+9A↑r ...
.data:00408034                 align 10h
.data:00408040 dword_408040    dd 1                    ; DATA XREF: sub_405810+22↑r
.data:00408040                                         ; sub_405810+65↑r ...
.data:00408044 dword_408044    dd 100h                 ; DATA XREF: sub_405810+3F↑o
.data:00408044                                         ; sub_405810+1A2↑r ...
.data:00408048 off_408048      dd offset unk_409050    ; DATA XREF: sub_405810+1AA↑r
.data:0040804C ; void *off_40804C
.data:0040804C off_40804C      dd offset dword_408044  ; DATA XREF: sub_405810+39↑r
.data:0040804C                                         ; sub_405810+60↑w ...
.data:00408050                 dd offset sub_406C70
.data:00408054                 align 10h
.data:00408060 dword_408060    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00408064                 align 10h
.data:00408070 ; int Mode
.data:00408070 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00408070                                         ; sub_401080+80↑r ...
.data:00408074                 align 10h
.data:00408080 dword_408080    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00408080                                         ; sub_401080+BA↑r
.data:00408084                 align 10h
.data:00408090 dword_408090    dd 0                    ; DATA XREF: sub_4073F0+9↑r
.data:00408090                                         ; sub_4073F0+1D↑w
.data:00408094 off_408094      dd offset dword_407EFC  ; DATA XREF: sub_407360+6↑r
.data:00408094                                         ; sub_407360+17↑r ...
.data:00408098                 align 1000h
.data:00408098 _data           ends
.data:00408098
.bss:00409000 ; Section 3. (virtual address 00009000)
.bss:00409000 ; Virtual size                  : 00000240 (    576.)
.bss:00409000 ; Section size in file          : 00000000 (      0.)
.bss:00409000 ; Offset to raw data for section: 00000000
.bss:00409000 ; Flags C0000080: Bss Readable Writable
.bss:00409000 ; Alignment     : default
.bss:00409000 ; ===========================================================================
.bss:00409000
.bss:00409000 ; Segment type: Uninitialized
.bss:00409000 ; Segment permissions: Read/Write
.bss:00409000 _bss            segment para public 'BSS' use32
.bss:00409000                 assume cs:_bss
.bss:00409000                 ;org 409000h
.bss:00409000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00409000 byte_409000     db ?                    ; DATA XREF: sub_4015B0+6D↑w
.bss:00409000                                         ; sub_4015B0:loc_4017F1↑r ...
.bss:00409001                 align 10h
.bss:00409010 dword_409010    dd ?                    ; DATA XREF: sub_402C80+9↑o
.bss:00409010                                         ; sub_402C80+17↑w ...
.bss:00409014 dword_409014    dd ?                    ; DATA XREF: sub_402C80+21↑w
.bss:00409014                                         ; .text:00402D39↑w
.bss:00409018 dword_409018    dd ?                    ; DATA XREF: sub_402C80+77↑r
.bss:00409018                                         ; .text:00402D87↑r
.bss:0040901C dword_40901C    dd ?                    ; DATA XREF: sub_402C80+6B↑r
.bss:0040901C                                         ; .text:00402D7B↑r
.bss:00409020                 align 40h
.bss:00409040 ; char *dword_409040
.bss:00409040 dword_409040    dd ?                    ; DATA XREF: .text:00403504↑w
.bss:00409040                                         ; sub_403530+58↑r
.bss:00409044                 align 10h
.bss:00409050 unk_409050      db    ? ;               ; DATA XREF: sub_405810+100↑o
.bss:00409050                                         ; .data:off_408048↑o
.bss:00409051                 db    ? ;
.bss:00409052                 db    ? ;
.bss:00409053                 db    ? ;
.bss:00409054                 db    ? ;
.bss:00409055                 db    ? ;
.bss:00409056                 db    ? ;
.bss:00409057                 db    ? ;
.bss:00409058                 db    ? ;
.bss:00409059                 db    ? ;
.bss:0040905A                 db    ? ;
.bss:0040905B                 db    ? ;
.bss:0040905C                 db    ? ;
.bss:0040905D                 db    ? ;
.bss:0040905E                 db    ? ;
.bss:0040905F                 db    ? ;
.bss:00409060                 db    ? ;
.bss:00409061                 db    ? ;
.bss:00409062                 db    ? ;
.bss:00409063                 db    ? ;
.bss:00409064                 db    ? ;
.bss:00409065                 db    ? ;
.bss:00409066                 db    ? ;
.bss:00409067                 db    ? ;
.bss:00409068                 db    ? ;
.bss:00409069                 db    ? ;
.bss:0040906A                 db    ? ;
.bss:0040906B                 db    ? ;
.bss:0040906C                 db    ? ;
.bss:0040906D                 db    ? ;
.bss:0040906E                 db    ? ;
.bss:0040906F                 db    ? ;
.bss:00409070                 db    ? ;
.bss:00409071                 db    ? ;
.bss:00409072                 db    ? ;
.bss:00409073                 db    ? ;
.bss:00409074                 db    ? ;
.bss:00409075                 db    ? ;
.bss:00409076                 db    ? ;
.bss:00409077                 db    ? ;
.bss:00409078                 db    ? ;
.bss:00409079                 db    ? ;
.bss:0040907A                 db    ? ;
.bss:0040907B                 db    ? ;
.bss:0040907C                 db    ? ;
.bss:0040907D                 db    ? ;
.bss:0040907E                 db    ? ;
.bss:0040907F                 db    ? ;
.bss:00409080                 db    ? ;
.bss:00409081                 db    ? ;
.bss:00409082                 db    ? ;
.bss:00409083                 db    ? ;
.bss:00409084                 db    ? ;
.bss:00409085                 db    ? ;
.bss:00409086                 db    ? ;
.bss:00409087                 db    ? ;
.bss:00409088                 db    ? ;
.bss:00409089                 db    ? ;
.bss:0040908A                 db    ? ;
.bss:0040908B                 db    ? ;
.bss:0040908C                 db    ? ;
.bss:0040908D                 db    ? ;
.bss:0040908E                 db    ? ;
.bss:0040908F                 db    ? ;
.bss:00409090                 db    ? ;
.bss:00409091                 db    ? ;
.bss:00409092                 db    ? ;
.bss:00409093                 db    ? ;
.bss:00409094                 db    ? ;
.bss:00409095                 db    ? ;
.bss:00409096                 db    ? ;
.bss:00409097                 db    ? ;
.bss:00409098                 db    ? ;
.bss:00409099                 db    ? ;
.bss:0040909A                 db    ? ;
.bss:0040909B                 db    ? ;
.bss:0040909C                 db    ? ;
.bss:0040909D                 db    ? ;
.bss:0040909E                 db    ? ;
.bss:0040909F                 db    ? ;
.bss:004090A0                 db    ? ;
.bss:004090A1                 db    ? ;
.bss:004090A2                 db    ? ;
.bss:004090A3                 db    ? ;
.bss:004090A4                 db    ? ;
.bss:004090A5                 db    ? ;
.bss:004090A6                 db    ? ;
.bss:004090A7                 db    ? ;
.bss:004090A8                 db    ? ;
.bss:004090A9                 db    ? ;
.bss:004090AA                 db    ? ;
.bss:004090AB                 db    ? ;
.bss:004090AC                 db    ? ;
.bss:004090AD                 db    ? ;
.bss:004090AE                 db    ? ;
.bss:004090AF                 db    ? ;
.bss:004090B0                 db    ? ;
.bss:004090B1                 db    ? ;
.bss:004090B2                 db    ? ;
.bss:004090B3                 db    ? ;
.bss:004090B4                 db    ? ;
.bss:004090B5                 db    ? ;
.bss:004090B6                 db    ? ;
.bss:004090B7                 db    ? ;
.bss:004090B8                 db    ? ;
.bss:004090B9                 db    ? ;
.bss:004090BA                 db    ? ;
.bss:004090BB                 db    ? ;
.bss:004090BC                 db    ? ;
.bss:004090BD                 db    ? ;
.bss:004090BE                 db    ? ;
.bss:004090BF                 db    ? ;
.bss:004090C0                 db    ? ;
.bss:004090C1                 db    ? ;
.bss:004090C2                 db    ? ;
.bss:004090C3                 db    ? ;
.bss:004090C4                 db    ? ;
.bss:004090C5                 db    ? ;
.bss:004090C6                 db    ? ;
.bss:004090C7                 db    ? ;
.bss:004090C8                 db    ? ;
.bss:004090C9                 db    ? ;
.bss:004090CA                 db    ? ;
.bss:004090CB                 db    ? ;
.bss:004090CC                 db    ? ;
.bss:004090CD                 db    ? ;
.bss:004090CE                 db    ? ;
.bss:004090CF                 db    ? ;
.bss:004090D0                 db    ? ;
.bss:004090D1                 db    ? ;
.bss:004090D2                 db    ? ;
.bss:004090D3                 db    ? ;
.bss:004090D4                 db    ? ;
.bss:004090D5                 db    ? ;
.bss:004090D6                 db    ? ;
.bss:004090D7                 db    ? ;
.bss:004090D8                 db    ? ;
.bss:004090D9                 db    ? ;
.bss:004090DA                 db    ? ;
.bss:004090DB                 db    ? ;
.bss:004090DC                 db    ? ;
.bss:004090DD                 db    ? ;
.bss:004090DE                 db    ? ;
.bss:004090DF                 db    ? ;
.bss:004090E0                 db    ? ;
.bss:004090E1                 db    ? ;
.bss:004090E2                 db    ? ;
.bss:004090E3                 db    ? ;
.bss:004090E4                 db    ? ;
.bss:004090E5                 db    ? ;
.bss:004090E6                 db    ? ;
.bss:004090E7                 db    ? ;
.bss:004090E8                 db    ? ;
.bss:004090E9                 db    ? ;
.bss:004090EA                 db    ? ;
.bss:004090EB                 db    ? ;
.bss:004090EC                 db    ? ;
.bss:004090ED                 db    ? ;
.bss:004090EE                 db    ? ;
.bss:004090EF                 db    ? ;
.bss:004090F0                 db    ? ;
.bss:004090F1                 db    ? ;
.bss:004090F2                 db    ? ;
.bss:004090F3                 db    ? ;
.bss:004090F4                 db    ? ;
.bss:004090F5                 db    ? ;
.bss:004090F6                 db    ? ;
.bss:004090F7                 db    ? ;
.bss:004090F8                 db    ? ;
.bss:004090F9                 db    ? ;
.bss:004090FA                 db    ? ;
.bss:004090FB                 db    ? ;
.bss:004090FC                 db    ? ;
.bss:004090FD                 db    ? ;
.bss:004090FE                 db    ? ;
.bss:004090FF                 db    ? ;
.bss:00409100                 db    ? ;
.bss:00409101                 db    ? ;
.bss:00409102                 db    ? ;
.bss:00409103                 db    ? ;
.bss:00409104                 db    ? ;
.bss:00409105                 db    ? ;
.bss:00409106                 db    ? ;
.bss:00409107                 db    ? ;
.bss:00409108                 db    ? ;
.bss:00409109                 db    ? ;
.bss:0040910A                 db    ? ;
.bss:0040910B                 db    ? ;
.bss:0040910C                 db    ? ;
.bss:0040910D                 db    ? ;
.bss:0040910E                 db    ? ;
.bss:0040910F                 db    ? ;
.bss:00409110                 db    ? ;
.bss:00409111                 db    ? ;
.bss:00409112                 db    ? ;
.bss:00409113                 db    ? ;
.bss:00409114                 db    ? ;
.bss:00409115                 db    ? ;
.bss:00409116                 db    ? ;
.bss:00409117                 db    ? ;
.bss:00409118                 db    ? ;
.bss:00409119                 db    ? ;
.bss:0040911A                 db    ? ;
.bss:0040911B                 db    ? ;
.bss:0040911C                 db    ? ;
.bss:0040911D                 db    ? ;
.bss:0040911E                 db    ? ;
.bss:0040911F                 db    ? ;
.bss:00409120                 db    ? ;
.bss:00409121                 db    ? ;
.bss:00409122                 db    ? ;
.bss:00409123                 db    ? ;
.bss:00409124                 db    ? ;
.bss:00409125                 db    ? ;
.bss:00409126                 db    ? ;
.bss:00409127                 db    ? ;
.bss:00409128                 db    ? ;
.bss:00409129                 db    ? ;
.bss:0040912A                 db    ? ;
.bss:0040912B                 db    ? ;
.bss:0040912C                 db    ? ;
.bss:0040912D                 db    ? ;
.bss:0040912E                 db    ? ;
.bss:0040912F                 db    ? ;
.bss:00409130                 db    ? ;
.bss:00409131                 db    ? ;
.bss:00409132                 db    ? ;
.bss:00409133                 db    ? ;
.bss:00409134                 db    ? ;
.bss:00409135                 db    ? ;
.bss:00409136                 db    ? ;
.bss:00409137                 db    ? ;
.bss:00409138                 db    ? ;
.bss:00409139                 db    ? ;
.bss:0040913A                 db    ? ;
.bss:0040913B                 db    ? ;
.bss:0040913C                 db    ? ;
.bss:0040913D                 db    ? ;
.bss:0040913E                 db    ? ;
.bss:0040913F                 db    ? ;
.bss:00409140                 db    ? ;
.bss:00409141                 db    ? ;
.bss:00409142                 db    ? ;
.bss:00409143                 db    ? ;
.bss:00409144                 db    ? ;
.bss:00409145                 db    ? ;
.bss:00409146                 db    ? ;
.bss:00409147                 db    ? ;
.bss:00409148                 db    ? ;
.bss:00409149                 db    ? ;
.bss:0040914A                 db    ? ;
.bss:0040914B                 db    ? ;
.bss:0040914C                 db    ? ;
.bss:0040914D                 db    ? ;
.bss:0040914E                 db    ? ;
.bss:0040914F                 db    ? ;
.bss:00409150 dword_409150    dd ?                    ; DATA XREF: .text:loc_4051A1↑o
.bss:00409150                                         ; .text:loc_4051C0↑o ...
.bss:00409154 dword_409154    dd ?                    ; DATA XREF: .text:loc_405240↑o
.bss:00409154                                         ; .text:004056C8↑r ...
.bss:00409158 dword_409158    dd ?                    ; DATA XREF: .text:004056C2↑r
.bss:00409158                                         ; sub_405770+2C↑r
.bss:0040915C dword_40915C    dd ?                    ; DATA XREF: .text:004056B6↑r
.bss:0040915C                                         ; sub_405770+22↑r
.bss:00409160 dword_409160    dd ?                    ; DATA XREF: .text:004056D2↑r
.bss:00409160                                         ; sub_405770+36↑r
.bss:00409164 dword_409164    dd ?                    ; DATA XREF: .text:004056E2↑r
.bss:00409164                                         ; sub_405770+4E↑r
.bss:00409168 dword_409168    dd ?                    ; DATA XREF: .text:004056FF↑r
.bss:00409168                                         ; sub_405770+62↑r
.bss:0040916C dword_40916C    dd ?                    ; DATA XREF: .text:004056F5↑r
.bss:0040916C                                         ; sub_405770+70↑r
.bss:00409170 dword_409170    dd ?                    ; DATA XREF: .text:004056D8↑r
.bss:00409170                                         ; sub_405770+7A↑r
.bss:00409174                 align 10h
.bss:00409180 ; char *Str1
.bss:00409180 Str1            dd ?                    ; DATA XREF: sub_407174:loc_4071AD↑w
.bss:00409180                                         ; sub_407174:loc_4072E0↑r
.bss:00409184                 align 10h
.bss:00409190 dword_409190    dd ?                    ; DATA XREF: sub_407174+2D↑r
.bss:00409190                                         ; sub_407174+3F↑w
.bss:00409194                 align 10h
.bss:004091A0 dword_4091A0    dd ?                    ; DATA XREF: sub_4015B0+34↑w
.bss:004091A0                                         ; sub_4015B0+E6↑r ...
.bss:004091A4                 align 20h
.bss:004091C0 dword_4091C0    dd ?                    ; DATA XREF: sub_402C80+71↑w
.bss:004091C0                                         ; .text:00402D81↑w
.bss:004091C4                 align 10h
.bss:004091D0 dword_4091D0    dd ?                    ; CODE XREF: sub_407174+63↑p
.bss:004091D0                                         ; DATA XREF: sub_407070+1E↑r ...
.bss:004091D4                 align 10h
.bss:004091E0 dword_4091E0    dd ?                    ; DATA XREF: sub_407070+4E↑w
.bss:004091E0                                         ; sub_407174+AB↑w
.bss:004091E4                 db    ? ;
.bss:004091E5                 db    ? ;
.bss:004091E6                 db    ? ;
.bss:004091E7                 db    ? ;
.bss:004091E8                 db    ? ;
.bss:004091E9                 db    ? ;
.bss:004091EA                 db    ? ;
.bss:004091EB                 db    ? ;
.bss:004091EC                 db    ? ;
.bss:004091ED                 db    ? ;
.bss:004091EE                 db    ? ;
.bss:004091EF                 db    ? ;
.bss:004091F0                 db    ? ;
.bss:004091F1                 db    ? ;
.bss:004091F2                 db    ? ;
.bss:004091F3                 db    ? ;
.bss:004091F4                 db    ? ;
.bss:004091F5                 db    ? ;
.bss:004091F6                 db    ? ;
.bss:004091F7                 db    ? ;
.bss:004091F8                 db    ? ;
.bss:004091F9                 db    ? ;
.bss:004091FA                 db    ? ;
.bss:004091FB                 db    ? ;
.bss:004091FC                 db    ? ;
.bss:004091FD                 db    ? ;
.bss:004091FE                 db    ? ;
.bss:004091FF                 db    ? ;
.bss:00409200                 db    ? ;
.bss:00409201                 db    ? ;
.bss:00409202                 db    ? ;
.bss:00409203                 db    ? ;
.bss:00409204                 db    ? ;
.bss:00409205                 db    ? ;
.bss:00409206                 db    ? ;
.bss:00409207                 db    ? ;
.bss:00409208                 db    ? ;
.bss:00409209                 db    ? ;
.bss:0040920A                 db    ? ;
.bss:0040920B                 db    ? ;
.bss:0040920C                 db    ? ;
.bss:0040920D                 db    ? ;
.bss:0040920E                 db    ? ;
.bss:0040920F                 db    ? ;
.bss:00409210 dword_409210    dd ?                    ; DATA XREF: sub_407174+13↑r
.bss:00409214                 align 1000h
.bss:00409214 _bss            ends
.bss:00409214
.idata:0040A000 ; Section 4. (virtual address 0000A000)
.idata:0040A000 ; Virtual size                  : 0000063C (   1596.)
.idata:0040A000 ; Section size in file          : 00000800 (   2048.)
.idata:0040A000 ; Offset to raw data for section: 00007600
.idata:0040A000 ; Flags C0000040: Data Readable Writable
.idata:0040A000 ; Alignment     : default
.idata:0040A000 ; ===========================================================================
.idata:0040A000
.idata:0040A000 ; Segment type: Externs
.idata:0040A000 ; _idata
.idata:0040A000
.idata:0040A001
.idata:0040A178 ;
.idata:0040A178 ; Imports from libintl3.dll
.idata:0040A178 ;
.idata:0040A178                 extrn libintl_bindtextdomain:dword
.idata:0040A178                                         ; CODE XREF: sub_4015B0+4E↑p
.idata:0040A178                                         ; DATA XREF: sub_4015B0+4E↑r ...
.idata:0040A17C                 extrn libintl_gettext:dword
.idata:0040A17C                                         ; CODE XREF: sub_4015B0+DA↑p
.idata:0040A17C                                         ; sub_4015B0+163↑p ...
.idata:0040A180                 extrn libintl_textdomain:dword
.idata:0040A180                                         ; CODE XREF: sub_4015B0+5B↑p
.idata:0040A180                                         ; DATA XREF: sub_4015B0+5B↑r ...
.idata:0040A184
.idata:0040A18C ;
.idata:0040A18C ; Imports from KERNEL32.dll
.idata:0040A18C ;
.idata:0040A18C ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040A18C                 extrn __imp_ExitProcess:dword
.idata:0040A18C                                         ; DATA XREF: ExitProcess↑r
.idata:0040A190 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0040A190                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0040A190                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0040A194
.idata:0040A19C ;
.idata:0040A19C ; Imports from msvcrt.dll
.idata:0040A19C ;
.idata:0040A19C ; int (__cdecl *_close)(int FileHandle)
.idata:0040A19C                 extrn __imp__close:dword
.idata:0040A19C                                         ; DATA XREF: _close↑r
.idata:0040A1A0 ; int (__cdecl *_isatty)(int FileHandle)
.idata:0040A1A0                 extrn __imp__isatty:dword
.idata:0040A1A0                                         ; DATA XREF: _isatty↑r
.idata:0040A1A4 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:0040A1A4                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:0040A1A8 ; int (__cdecl *_read)(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.idata:0040A1A8                 extrn __imp__read:dword ; DATA XREF: _read↑r
.idata:0040A1AC
.idata:0040A1B4 ;
.idata:0040A1B4 ; Imports from MSVCP60.DLL
.idata:0040A1B4 ;
.idata:0040A1B4 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040A1B4                 extrn __imp_mbrtowc:dword
.idata:0040A1B4                                         ; DATA XREF: mbrtowc↑r
.idata:0040A1B8
.idata:0040A1C0 ;
.idata:0040A1C0 ; Imports from msvcrt.dll
.idata:0040A1C0 ;
.idata:0040A1C0                 extrn __imp___getmainargs:dword
.idata:0040A1C0                                         ; DATA XREF: __getmainargs↑r
.idata:0040A1C4 ; int _mb_cur_max
.idata:0040A1C4                 extrn __mb_cur_max:dword
.idata:0040A1C4                                         ; DATA XREF: sub_4046D0+7↑r
.idata:0040A1C4                                         ; sub_4046D0+5F3↑r ...
.idata:0040A1C8 ; char ***(__cdecl *__p__environ)()
.idata:0040A1C8                 extrn __imp___p__environ:dword
.idata:0040A1C8                                         ; DATA XREF: __p__environ↑r
.idata:0040A1CC ; int *(__cdecl *__p__fmode)()
.idata:0040A1CC                 extrn __imp___p__fmode:dword
.idata:0040A1CC                                         ; DATA XREF: __p__fmode↑r
.idata:0040A1D0 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0040A1D0                 extrn __set_app_type:dword
.idata:0040A1D0                                         ; CODE XREF: start+D↑p
.idata:0040A1D0                                         ; .text:0040102D↑p
.idata:0040A1D0                                         ; DATA XREF: ...
.idata:0040A1D4                 extrn __imp__assert:dword
.idata:0040A1D4                                         ; DATA XREF: _assert↑r
.idata:0040A1D8 ; void (__cdecl *_cexit)()
.idata:0040A1D8                 extrn __imp__cexit:dword
.idata:0040A1D8                                         ; DATA XREF: _cexit↑r
.idata:0040A1DC ; int *(__cdecl *_errno)()
.idata:0040A1DC                 extrn __imp__errno:dword
.idata:0040A1DC                                         ; DATA XREF: _errno↑r
.idata:0040A1E0 ; int (__cdecl *_filbuf)(FILE *File)
.idata:0040A1E0                 extrn __imp__filbuf:dword
.idata:0040A1E0                                         ; DATA XREF: _filbuf↑r
.idata:0040A1E4 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0040A1E4                 extrn __imp__flsbuf:dword
.idata:0040A1E4                                         ; DATA XREF: _flsbuf↑r
.idata:0040A1E8 ; FILE iob[]
.idata:0040A1E8                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0040A1E8                                         ; sub_401080+75↑r ...
.idata:0040A1EC ; int (__cdecl *_isctype)(int C, int Type)
.idata:0040A1EC                 extrn __imp__isctype:dword
.idata:0040A1EC                                         ; DATA XREF: _isctype↑r
.idata:0040A1F0 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0040A1F0                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0040A1F0                                         ; DATA XREF: .text:0040106C↑r
.idata:0040A1F4 ; const unsigned __int16 *pctype
.idata:0040A1F4                 extrn _pctype:dword     ; DATA XREF: sub_4046D0:loc_404DC4↑r
.idata:0040A1F4                                         ; sub_405A50:loc_4066A2↑r ...
.idata:0040A1F8 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0040A1F8                 extrn __imp__setmode:dword
.idata:0040A1F8                                         ; DATA XREF: _setmode↑r
.idata:0040A1FC ; void (__cdecl __noreturn *abort)()
.idata:0040A1FC                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0040A200 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0040A200                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0040A200                                         ; DATA XREF: sub_401040+C↑r
.idata:0040A204 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0040A204                 extrn __imp_calloc:dword
.idata:0040A204                                         ; DATA XREF: calloc↑r
.idata:0040A208 ; void (__cdecl __noreturn *exit)(int Code)
.idata:0040A208                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0040A20C ; int (__cdecl *fclose)(FILE *Stream)
.idata:0040A20C                 extrn __imp_fclose:dword
.idata:0040A20C                                         ; DATA XREF: fclose↑r
.idata:0040A210 ; int (__cdecl *fflush)(FILE *Stream)
.idata:0040A210                 extrn __imp_fflush:dword
.idata:0040A210                                         ; DATA XREF: fflush↑r
.idata:0040A214 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:0040A214                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:0040A218 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0040A218                 extrn __imp_fprintf:dword
.idata:0040A218                                         ; DATA XREF: fprintf↑r
.idata:0040A21C ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0040A21C                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0040A220 ; void (__cdecl *free)(void *Block)
.idata:0040A220                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0040A224 ; char *(__cdecl *getenv)(const char *VarName)
.idata:0040A224                 extrn __imp_getenv:dword
.idata:0040A224                                         ; DATA XREF: getenv↑r
.idata:0040A228 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0040A228                 extrn __imp_iswctype:dword
.idata:0040A228                                         ; DATA XREF: iswctype↑r
.idata:0040A22C ; struct lconv *(__cdecl *localeconv)()
.idata:0040A22C                 extrn __imp_localeconv:dword
.idata:0040A22C                                         ; DATA XREF: localeconv↑r
.idata:0040A230 ; void *(__cdecl *malloc)(size_t Size)
.idata:0040A230                 extrn __imp_malloc:dword
.idata:0040A230                                         ; DATA XREF: malloc↑r
.idata:0040A234 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0040A234                 extrn __imp_memcpy:dword
.idata:0040A234                                         ; DATA XREF: memcpy↑r
.idata:0040A238 ; void *(__cdecl *memmove)(void *, const void *Src, size_t Size)
.idata:0040A238                 extrn __imp_memmove:dword
.idata:0040A238                                         ; DATA XREF: memmove↑r
.idata:0040A23C ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0040A23C                 extrn __imp_memset:dword
.idata:0040A23C                                         ; DATA XREF: memset↑r
.idata:0040A240 ; int (*printf)(const char *const Format, ...)
.idata:0040A240                 extrn __imp_printf:dword
.idata:0040A240                                         ; DATA XREF: printf↑r
.idata:0040A244 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0040A244                 extrn __imp_realloc:dword
.idata:0040A244                                         ; DATA XREF: realloc↑r
.idata:0040A248 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0040A248                 extrn __imp_setlocale:dword
.idata:0040A248                                         ; DATA XREF: setlocale↑r
.idata:0040A24C ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0040A24C                 extrn __imp_signal:dword
.idata:0040A24C                                         ; DATA XREF: signal↑r
.idata:0040A250 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:0040A250                 extrn __imp_sprintf:dword
.idata:0040A250                                         ; DATA XREF: sprintf↑r
.idata:0040A254 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0040A254                 extrn __imp_strchr:dword
.idata:0040A254                                         ; DATA XREF: strchr↑r
.idata:0040A258 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0040A258                 extrn __imp_strcmp:dword
.idata:0040A258                                         ; DATA XREF: strcmp↑r
.idata:0040A25C ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0040A25C                 extrn __imp_strerror:dword
.idata:0040A25C                                         ; DATA XREF: strerror↑r
.idata:0040A260 ; size_t (__cdecl *strlen)(const char *Str)
.idata:0040A260                 extrn __imp_strlen:dword
.idata:0040A260                                         ; DATA XREF: strlen↑r
.idata:0040A264 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0040A264                 extrn __imp_strncmp:dword
.idata:0040A264                                         ; DATA XREF: strncmp↑r
.idata:0040A268 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0040A268                 extrn __imp_vfprintf:dword
.idata:0040A268                                         ; DATA XREF: vfprintf↑r
.idata:0040A26C
.idata:0040A26C
.idata:0040A26C
.idata:0040A26C                 end start
