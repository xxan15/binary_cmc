.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 431DE55C9EB12D111EA2646264179E75BC15541BAB851BCC127D163633D9E7F8
.text:00401000 ; Input MD5    : 492C2F956C084CC055FD726DD55829DB
.text:00401000 ; Input CRC32  : A539FE84
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/id.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A26A (Wed Apr 20 18:41:46 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00005040 (  20544.)
.text:00401000 ; Section size in file          : 00005200 (  20992.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401770+73↓p
.text:00401040                                         ; .text:00405D10↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_405CB0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_407000
.text:004010A2                 mov     edx, dword_407070
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_407004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_407090, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_407090
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_405C80
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_407000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_407004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401770
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_405CB0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aGroup          db 'group',0            ; DATA XREF: .text:off_4012C0↓o
.text:00401286 aGroups_0       db 'groups',0           ; DATA XREF: .text:004012D0↓o
.text:0040128D aName           db 'name',0             ; DATA XREF: .text:004012E0↓o
.text:00401292 aReal           db 'real',0             ; DATA XREF: .text:004012F0↓o
.text:00401297 aUser           db 'user',0             ; DATA XREF: .text:00401300↓o
.text:0040129C aHelp           db 'help',0             ; DATA XREF: .text:00401310↓o
.text:004012A1 aVersion        db 'version',0          ; DATA XREF: .text:00401320↓o
.text:004012A9                 align 20h
.text:004012C0 off_4012C0      dd offset aGroup        ; DATA XREF: sub_401770+88↓o
.text:004012C0                                         ; "group"
.text:004012C4                 dd 2 dup(0)
.text:004012CC                 dd 67h
.text:004012D0                 dd offset aGroups_0     ; "groups"
.text:004012D4                 dd 2 dup(0)
.text:004012DC                 dd 47h
.text:004012E0                 dd offset aName         ; "name"
.text:004012E4                 dd 2 dup(0)
.text:004012EC                 dd 6Eh
.text:004012F0                 dd offset aReal         ; "real"
.text:004012F4                 dd 2 dup(0)
.text:004012FC                 dd 72h
.text:00401300                 dd offset aUser         ; "user"
.text:00401304                 dd 2 dup(0)
.text:0040130C                 dd 75h
.text:00401310                 dd offset aHelp         ; "help"
.text:00401314                 dd 2 dup(0)
.text:0040131C                 dd 0FFFFFF7Eh
.text:00401320                 dd offset aVersion      ; "version"
.text:00401324                 dd 2 dup(0)
.text:0040132C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401340 ; const char Locale
.text:00401340 Locale          db 0                    ; DATA XREF: sub_401770+36↓o
.text:00401341                 align 20h
.text:00401360 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401360                                         ; DATA XREF: sub_401770+4A↓o
.text:00401383 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401770+52↓o
.text:00401383                                         ; sub_401770+5F↓o
.text:0040138D ; const char aAgnrug[]
.text:0040138D aAgnrug         db 'agnruG',0           ; DATA XREF: sub_401770+90↓o
.text:00401394                 align 10h
.text:004013A0 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:004013A0                                         ; DATA XREF: sub_401770:loc_401846↓o
.text:004013A0                                         ; .text:0040214F↓o
.text:004013C7 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401770+123↓o
.text:004013D7 aArnoldRobbins  db 'Arnold Robbins',0   ; DATA XREF: sub_401770+12B↓o
.text:004013E6 a530            db '5.3.0',0            ; DATA XREF: sub_401770+136↓o
.text:004013EC aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401770+13E↓o
.text:004013FA ; const FILE stru_4013FA
.text:004013FA stru_4013FA     FILE <8D006469h, 73550076h, 3A656761h, 20732520h, 54504F5Bh, \
.text:004013FA                                         ; DATA XREF: sub_401770+146↓o
.text:004013FA                                         ; sub_401770:loc_4018CF↓o ...
.text:004013FA                       5D4E4F49h, 202E2E2Eh, 4553555Bh>
.text:0040141A                 db  52h ; R
.text:0040141B                 db  4Eh ; N
.text:0040141C                 db  41h ; A
.text:0040141D                 db  4Dh ; M
.text:0040141E                 db  45h ; E
.text:0040141F                 db  5Dh ; ]
.text:00401420                 db  0Ah
.text:00401421                 db    0
.text:00401422                 align 20h
.text:00401440 aPrintInformati db 'Print information for USERNAME, or the current user.',0Ah
.text:00401440                                         ; DATA XREF: sub_401770+17E↓o
.text:00401440                                         ; .text:004021A2↓o
.text:00401440                 db 0Ah
.text:00401440                 db '  -a              ignore, for compatibility with other versions',0Ah
.text:00401440                 db '  -g, --group     print only the effective group ID',0Ah
.text:00401440                 db '  -G, --groups    print all group IDs',0Ah
.text:00401440                 db '  -n, --name      print a name instead of a number, for -ugG',0Ah
.text:00401440                 db '  -r, --real      print the real ID instead of the effective ID, '
.text:00401440                 db 'with -ugG',0Ah
.text:00401440                 db '  -u, --user      print only the effective user ID',0Ah,0
.text:004015CC                 align 20h
.text:004015E0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004015E0                                         ; DATA XREF: sub_401770+1A0↓o
.text:004015E0                                         ; .text:004021C4↓o
.text:0040160D                 align 20h
.text:00401620 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401620                                         ; DATA XREF: sub_401770+1C2↓o
.text:00401620                                         ; .text:004021E6↓o
.text:00401656                 align 10h
.text:00401660 aWithoutAnyOpti db 0Ah                  ; DATA XREF: sub_401770+1E4↓o
.text:00401660                                         ; .text:00402208↓o
.text:00401660                 db 'Without any OPTION, print some useful set of identified informati'
.text:00401660                 db 'on.',0Ah,0
.text:004016A7 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401770+206↓o
.text:004016A7                                         ; .text:0040222A↓o
.text:004016A7                 db 'Report bugs to <%s>.',0Ah,0
.text:004016BE aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004016BE                                         ; DATA XREF: sub_401770+213↓o
.text:004016BE                                         ; .text:00402237↓o
.text:004016D4                 align 10h
.text:004016E0 aCannotPrintOnl db 'cannot print only names or real IDs in default format',0
.text:004016E0                                         ; DATA XREF: sub_401770:loc_401A09↓o
.text:00401716 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: sub_401770+2D8↓o
.text:00401727 aSNoSuchUser    db '%s: No such user',0 ; DATA XREF: sub_401770:loc_401B97↓o
.text:00401738                 align 10h
.text:00401740 aCannotPrintOnl_0 db 'cannot print only user and only group',0
.text:00401740                                         ; DATA XREF: sub_401770:loc_401BD0↓o
.text:00401766                 align 10h
.text:00401770
.text:00401770 ; =============== S U B R O U T I N E =======================================
.text:00401770
.text:00401770 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401770
.text:00401770 sub_401770      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401770
.text:00401770 Category        = dword ptr -38h
.text:00401770 Locale          = dword ptr -34h
.text:00401770 var_30          = dword ptr -30h
.text:00401770 var_2C          = byte ptr -2Ch
.text:00401770 var_28          = byte ptr -28h
.text:00401770 var_24          = dword ptr -24h
.text:00401770 var_20          = dword ptr -20h
.text:00401770 var_10          = byte ptr -10h
.text:00401770 var_F           = byte ptr -0Fh
.text:00401770 var_E           = byte ptr -0Eh
.text:00401770 var_D           = byte ptr -0Dh
.text:00401770 arg_0           = dword ptr  8
.text:00401770 arg_4           = dword ptr  0Ch
.text:00401770
.text:00401770                 push    ebp
.text:00401771                 xor     eax, eax
.text:00401773                 mov     ebp, esp
.text:00401775                 push    edi
.text:00401776                 push    esi
.text:00401777                 push    ebx
.text:00401778                 sub     esp, 2Ch
.text:0040177B                 mov     ebx, [ebp+arg_4]
.text:0040177E                 and     esp, 0FFFFFFF0h
.text:00401781                 mov     esi, [ebp+arg_0]
.text:00401784                 call    __alloca
.text:00401789                 call    sub_405D50
.text:0040178E                 mov     [ebp+var_D], 0
.text:00401792                 mov     edx, [ebx]
.text:00401794                 mov     [ebp+var_E], 0
.text:00401798                 mov     [ebp+var_F], 0
.text:0040179C                 mov     ds:dword_408B30, edx
.text:004017A2                 mov     [ebp+var_10], 0
.text:004017A6                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:004017AE                 mov     [esp+38h+Category], 0 ; Category
.text:004017B5                 call    setlocale
.text:004017BA                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004017C2                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:004017C9                 call    ds:__imp_libintl_bindtextdomain
.text:004017CF                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:004017D6                 call    ds:libintl_textdomain
.text:004017DC                 mov     [esp+38h+Category], offset sub_403E10 ; void (__cdecl *)()
.text:004017E3                 call    sub_401040
.text:004017E8                 nop
.text:004017E9                 lea     esi, [esi+0]
.text:004017F0
.text:004017F0 loc_4017F0:                             ; CODE XREF: sub_401770+B0↓j
.text:004017F0                                         ; sub_401770:loc_401844↓j ...
.text:004017F0                 mov     dword ptr [esp+38h+var_28], 0 ; int
.text:004017F8                 mov     dword ptr [esp+38h+var_2C], offset off_4012C0 ; char
.text:00401800                 mov     [esp+38h+var_30], offset aAgnrug ; "agnruG"
.text:00401808                 mov     [esp+38h+Locale], ebx ; int
.text:0040180C                 mov     [esp+38h+Category], esi ; int
.text:0040180F                 call    sub_403CA0
.text:00401814                 cmp     eax, 0FFFFFFFFh
.text:00401817                 jz      loc_4019DC
.text:0040181D                 cmp     eax, 61h ; 'a'
.text:00401820                 jz      short loc_4017F0
.text:00401822                 cmp     eax, 61h ; 'a'
.text:00401825                 jg      loc_401998
.text:0040182B                 cmp     eax, 0FFFFFF7Eh
.text:00401830                 jz      loc_4018CF
.text:00401836                 cmp     eax, 0FFFFFF7Eh
.text:0040183B                 jle     short loc_40187E
.text:0040183D                 mov     [ebp+var_D], 1
.text:00401841                 cmp     eax, 47h ; 'G'
.text:00401844
.text:00401844 loc_401844:                             ; CODE XREF: sub_401770+239↓j
.text:00401844                                         ; sub_401770+24C↓j
.text:00401844                 jz      short loc_4017F0
.text:00401846
.text:00401846 loc_401846:                             ; CODE XREF: sub_401770+113↓j
.text:00401846                                         ; sub_401770+303↓j
.text:00401846                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:0040184D                 call    ds:libintl_gettext
.text:00401853                 mov     ebx, ds:_iob
.text:00401859                 mov     ecx, ds:dword_408B30
.text:0040185F                 add     ebx, 40h ; '@'
.text:00401862                 mov     [esp+38h+var_30], ecx
.text:00401866                 mov     [esp+38h+Locale], eax ; Format
.text:0040186A                 mov     [esp+38h+Category], ebx ; Stream
.text:0040186D                 call    fprintf
.text:00401872                 mov     [esp+38h+Category], 1 ; Code
.text:00401879
.text:00401879 loc_401879:                             ; CODE XREF: sub_401770+15D↓j
.text:00401879                                         ; sub_401770+37F↓j
.text:00401879                 call    exit
.text:0040187E ; ---------------------------------------------------------------------------
.text:0040187E
.text:0040187E loc_40187E:                             ; CODE XREF: sub_401770+CB↑j
.text:0040187E                 cmp     eax, 0FFFFFF7Dh
.text:00401883                 jnz     short loc_401846
.text:00401885                 mov     [esp+38h+var_20], 0
.text:0040188D                 mov     edx, ds:_iob
.text:00401893                 mov     [esp+38h+var_24], offset aDavidMackenzie ; "David MacKenzie"
.text:0040189B                 mov     dword ptr [esp+38h+var_28], offset aArnoldRobbins ; "Arnold Robbins"
.text:004018A3                 add     edx, 20h ; ' '
.text:004018A6                 mov     dword ptr [esp+38h+var_2C], offset a530 ; "5.3.0"
.text:004018AE                 mov     [esp+38h+var_30], offset aGnuCoreutils ; "GNU coreutils"
.text:004018B6                 mov     [esp+38h+Locale], offset stru_4013FA ; FILE *
.text:004018BE                 mov     [esp+38h+Category], edx ; FILE *
.text:004018C1                 call    sub_403C60
.text:004018C6
.text:004018C6 loc_4018C6:                             ; CODE XREF: sub_401770+223↓j
.text:004018C6                 mov     [esp+38h+Category], 0
.text:004018CD                 jmp     short loc_401879
.text:004018CF ; ---------------------------------------------------------------------------
.text:004018CF
.text:004018CF loc_4018CF:                             ; CODE XREF: sub_401770+C0↑j
.text:004018CF                 mov     [esp+38h+Category], (offset stru_4013FA._cnt+2)
.text:004018D6                 call    ds:libintl_gettext
.text:004018DC                 mov     ecx, ds:dword_408B30
.text:004018E2                 mov     [esp+38h+Category], eax ; Format
.text:004018E5                 mov     [esp+38h+Locale], ecx
.text:004018E9                 call    printf
.text:004018EE                 mov     [esp+38h+Category], offset aPrintInformati ; "Print information for USERNAME, or the "...
.text:004018F5                 call    ds:libintl_gettext
.text:004018FB                 mov     edi, ds:_iob
.text:00401901                 add     edi, 20h ; ' '
.text:00401904                 mov     [esp+38h+Locale], edi ; Stream
.text:00401908                 mov     [esp+38h+Category], eax ; Buffer
.text:0040190B                 call    fputs
.text:00401910                 mov     [esp+38h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401917                 call    ds:libintl_gettext
.text:0040191D                 mov     esi, ds:_iob
.text:00401923                 add     esi, 20h ; ' '
.text:00401926                 mov     [esp+38h+Locale], esi ; Stream
.text:0040192A                 mov     [esp+38h+Category], eax ; Buffer
.text:0040192D                 call    fputs
.text:00401932                 mov     [esp+38h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401939                 call    ds:libintl_gettext
.text:0040193F                 mov     ebx, ds:_iob
.text:00401945                 add     ebx, 20h ; ' '
.text:00401948                 mov     [esp+38h+Locale], ebx ; Stream
.text:0040194C                 mov     [esp+38h+Category], eax ; Buffer
.text:0040194F                 call    fputs
.text:00401954                 mov     [esp+38h+Category], offset aWithoutAnyOpti ; "\nWithout any OPTION, print some useful"...
.text:0040195B                 call    ds:libintl_gettext
.text:00401961                 mov     ecx, ds:_iob
.text:00401967                 add     ecx, 20h ; ' '
.text:0040196A                 mov     [esp+38h+Locale], ecx ; Stream
.text:0040196E                 mov     [esp+38h+Category], eax ; Buffer
.text:00401971                 call    fputs
.text:00401976                 mov     [esp+38h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:0040197D                 call    ds:libintl_gettext
.text:00401983                 mov     [esp+38h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040198B                 mov     [esp+38h+Category], eax ; Format
.text:0040198E                 call    printf
.text:00401993                 jmp     loc_4018C6
.text:00401998 ; ---------------------------------------------------------------------------
.text:00401998
.text:00401998 loc_401998:                             ; CODE XREF: sub_401770+B5↑j
.text:00401998                 cmp     eax, 6Eh ; 'n'
.text:0040199B                 jz      short loc_4019D0
.text:0040199D                 cmp     eax, 6Eh ; 'n'
.text:004019A0                 jg      short loc_4019B0
.text:004019A2                 mov     [ebp+var_E], 1
.text:004019A6                 cmp     eax, 67h ; 'g'
.text:004019A9                 jmp     loc_401844
.text:004019A9 ; ---------------------------------------------------------------------------
.text:004019AE                 align 10h
.text:004019B0
.text:004019B0 loc_4019B0:                             ; CODE XREF: sub_401770+230↑j
.text:004019B0                 cmp     eax, 72h ; 'r'
.text:004019B3                 jz      short loc_4019C1
.text:004019B5                 mov     [ebp+var_10], 1
.text:004019B9                 cmp     eax, 75h ; 'u'
.text:004019BC                 jmp     loc_401844
.text:004019C1 ; ---------------------------------------------------------------------------
.text:004019C1
.text:004019C1 loc_4019C1:                             ; CODE XREF: sub_401770+243↑j
.text:004019C1                 mov     [ebp+var_F], 1
.text:004019C5                 jmp     loc_4017F0
.text:004019C5 ; ---------------------------------------------------------------------------
.text:004019CA                 align 10h
.text:004019D0
.text:004019D0 loc_4019D0:                             ; CODE XREF: sub_401770+22B↑j
.text:004019D0                 mov     ds:byte_408000, 1
.text:004019D7                 jmp     loc_4017F0
.text:004019DC ; ---------------------------------------------------------------------------
.text:004019DC
.text:004019DC loc_4019DC:                             ; CODE XREF: sub_401770+A7↑j
.text:004019DC                 movzx   edi, [ebp+var_E]
.text:004019E0                 movzx   eax, [ebp+var_10]
.text:004019E4                 movzx   ecx, [ebp+var_D]
.text:004019E8                 add     eax, edi
.text:004019EA                 lea     edi, [ecx+eax]
.text:004019ED                 cmp     edi, 1
.text:004019F0                 jg      loc_401BD0
.text:004019F6
.text:004019F6 loc_4019F6:                             ; CODE XREF: sub_401770+485↓j
.text:004019F6                 test    edi, edi
.text:004019F8                 jnz     short loc_401A2E
.text:004019FA                 cmp     ds:byte_408000, 0
.text:00401A01                 jnz     short loc_401A09
.text:00401A03                 cmp     [ebp+var_F], 0
.text:00401A07                 jz      short loc_401A2E
.text:00401A09
.text:00401A09 loc_401A09:                             ; CODE XREF: sub_401770+291↑j
.text:00401A09                 mov     [esp+38h+Category], offset aCannotPrintOnl ; "cannot print only names or real IDs in "...
.text:00401A10                 call    ds:libintl_gettext
.text:00401A16                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:00401A1E                 mov     [esp+38h+Category], 1 ; Code
.text:00401A25                 mov     [esp+38h+var_30], eax ; char *
.text:00401A29                 call    sub_405340
.text:00401A2E
.text:00401A2E loc_401A2E:                             ; CODE XREF: sub_401770+288↑j
.text:00401A2E                                         ; sub_401770+297↑j
.text:00401A2E                 mov     eax, dword_407020
.text:00401A33                 mov     edx, esi
.text:00401A35                 sub     edx, eax
.text:00401A37                 cmp     edx, 1
.text:00401A3A                 jle     short loc_401A78
.text:00401A3C                 mov     edx, [ebx+eax*4+4]
.text:00401A40                 mov     [esp+38h+Category], edx ; char *
.text:00401A43                 call    sub_403770
.text:00401A48                 mov     [esp+38h+Category], offset aExtraOperandS ; "extra operand %s"
.text:00401A4F                 mov     esi, eax
.text:00401A51                 call    ds:libintl_gettext
.text:00401A57                 mov     dword ptr [esp+38h+var_2C], esi ; char
.text:00401A5B                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:00401A63                 mov     [esp+38h+Category], 0 ; Code
.text:00401A6A                 mov     [esp+38h+var_30], eax ; char *
.text:00401A6E                 call    sub_405340
.text:00401A73                 jmp     loc_401846
.text:00401A78 ; ---------------------------------------------------------------------------
.text:00401A78
.text:00401A78 loc_401A78:                             ; CODE XREF: sub_401770+2CA↑j
.text:00401A78                 dec     edx
.text:00401A79                 jz      loc_401B6A
.text:00401A7F                 call    sub_405680
.text:00401A84                 mov     ds:dword_408020, eax
.text:00401A89                 call    sub_405670
.text:00401A8E                 mov     ds:dword_408010, eax
.text:00401A93                 call    sub_405660
.text:00401A98                 mov     ds:dword_408040, eax
.text:00401A9D                 call    sub_405650
.text:00401AA2
.text:00401AA2 loc_401AA2:                             ; CODE XREF: sub_401770+422↓j
.text:00401AA2                 cmp     [ebp+var_10], 0
.text:00401AA6                 mov     ds:dword_408030, eax
.text:00401AAB                 jz      short loc_401B16
.text:00401AAD                 cmp     [ebp+var_F], 0
.text:00401AB1                 jz      short loc_401B0F
.text:00401AB3                 mov     eax, ds:dword_408010
.text:00401AB8
.text:00401AB8 loc_401AB8:                             ; CODE XREF: sub_401770+3A4↓j
.text:00401AB8                 mov     [esp+38h+Category], eax
.text:00401ABB                 call    sub_401C40
.text:00401AC0
.text:00401AC0 loc_401AC0:                             ; CODE XREF: sub_401770+3BF↓j
.text:00401AC0                                         ; sub_401770+3DF↓j ...
.text:00401AC0                 mov     esi, ds:_iob
.text:00401AC6                 mov     ebx, [esi+24h]
.text:00401AC9                 dec     ebx
.text:00401ACA                 mov     [esi+24h], ebx
.text:00401ACD                 test    ebx, ebx
.text:00401ACF                 js      short loc_401AF4
.text:00401AD1                 mov     ecx, ds:_iob
.text:00401AD7                 mov     eax, [ecx+20h]
.text:00401ADA                 mov     byte ptr [eax], 0Ah
.text:00401ADD                 inc     dword ptr [ecx+20h]
.text:00401AE0
.text:00401AE0 loc_401AE0:                             ; CODE XREF: sub_401770+39D↓j
.text:00401AE0                 xor     edx, edx
.text:00401AE2                 cmp     byte_407010, 0
.text:00401AE9                 setz    dl
.text:00401AEC                 mov     [esp+38h+Category], edx
.text:00401AEF                 jmp     loc_401879
.text:00401AF4 ; ---------------------------------------------------------------------------
.text:00401AF4
.text:00401AF4 loc_401AF4:                             ; CODE XREF: sub_401770+35F↑j
.text:00401AF4                 mov     [esp+38h+Category], 0Ah ; Ch
.text:00401AFB                 mov     edi, ds:_iob
.text:00401B01                 add     edi, 20h ; ' '
.text:00401B04                 mov     [esp+38h+Locale], edi ; File
.text:00401B08                 call    _flsbuf
.text:00401B0D                 jmp     short loc_401AE0
.text:00401B0F ; ---------------------------------------------------------------------------
.text:00401B0F
.text:00401B0F loc_401B0F:                             ; CODE XREF: sub_401770+341↑j
.text:00401B0F                 mov     eax, ds:dword_408020
.text:00401B14                 jmp     short loc_401AB8
.text:00401B16 ; ---------------------------------------------------------------------------
.text:00401B16
.text:00401B16 loc_401B16:                             ; CODE XREF: sub_401770+33B↑j
.text:00401B16                 cmp     [ebp+var_E], 0
.text:00401B1A                 jz      short loc_401B38
.text:00401B1C                 cmp     [ebp+var_F], 0
.text:00401B20                 jz      short loc_401B31
.text:00401B22                 mov     eax, ds:dword_408030
.text:00401B27
.text:00401B27 loc_401B27:                             ; CODE XREF: sub_401770+3C6↓j
.text:00401B27                 mov     [esp+38h+Category], eax
.text:00401B2A                 call    sub_401CF0
.text:00401B2F                 jmp     short loc_401AC0
.text:00401B31 ; ---------------------------------------------------------------------------
.text:00401B31
.text:00401B31 loc_401B31:                             ; CODE XREF: sub_401770+3B0↑j
.text:00401B31                 mov     eax, ds:dword_408040
.text:00401B36                 jmp     short loc_401B27
.text:00401B38 ; ---------------------------------------------------------------------------
.text:00401B38
.text:00401B38 loc_401B38:                             ; CODE XREF: sub_401770+3AA↑j
.text:00401B38                 cmp     [ebp+var_D], 0
.text:00401B3C                 jz      short loc_401B54
.text:00401B3E                 mov     ecx, dword_407020
.text:00401B44                 mov     esi, [ebx+ecx*4]
.text:00401B47                 mov     [esp+38h+Category], esi ; char *
.text:00401B4A                 call    sub_401D70
.text:00401B4F                 jmp     loc_401AC0
.text:00401B54 ; ---------------------------------------------------------------------------
.text:00401B54
.text:00401B54 loc_401B54:                             ; CODE XREF: sub_401770+3CC↑j
.text:00401B54                 mov     edx, dword_407020
.text:00401B5A                 mov     edi, [ebx+edx*4]
.text:00401B5D                 mov     [esp+38h+Category], edi ; char *
.text:00401B60                 call    sub_401F10
.text:00401B65                 jmp     loc_401AC0
.text:00401B6A ; ---------------------------------------------------------------------------
.text:00401B6A
.text:00401B6A loc_401B6A:                             ; CODE XREF: sub_401770+309↑j
.text:00401B6A                 mov     edi, [ebx+eax*4]
.text:00401B6D                 mov     [esp+38h+Category], edi ; char *
.text:00401B70                 call    sub_405690
.text:00401B75                 test    eax, eax
.text:00401B77                 mov     esi, eax
.text:00401B79                 jz      short loc_401B97
.text:00401B7B
.text:00401B7B loc_401B7B:                             ; CODE XREF: sub_401770+459↓j
.text:00401B7B                 mov     edx, [esi+8]
.text:00401B7E                 mov     eax, [esi+0Ch]
.text:00401B81                 mov     ds:dword_408020, edx
.text:00401B87                 mov     ds:dword_408010, edx
.text:00401B8D                 mov     ds:dword_408040, eax
.text:00401B92                 jmp     loc_401AA2
.text:00401B97 ; ---------------------------------------------------------------------------
.text:00401B97
.text:00401B97 loc_401B97:                             ; CODE XREF: sub_401770+409↑j
.text:00401B97                 mov     [esp+38h+Category], offset aSNoSuchUser ; "%s: No such user"
.text:00401B9E                 call    ds:libintl_gettext
.text:00401BA4                 mov     edi, dword_407020
.text:00401BAA                 mov     ecx, [ebx+edi*4]
.text:00401BAD                 mov     [esp+38h+var_30], eax ; char *
.text:00401BB1                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:00401BB9                 mov     dword ptr [esp+38h+var_2C], ecx ; char
.text:00401BBD                 mov     [esp+38h+Category], 1 ; Code
.text:00401BC4                 call    sub_405340
.text:00401BC9                 jmp     short loc_401B7B
.text:00401BC9 ; ---------------------------------------------------------------------------
.text:00401BCB                 align 10h
.text:00401BD0
.text:00401BD0 loc_401BD0:                             ; CODE XREF: sub_401770+280↑j
.text:00401BD0                 mov     [esp+38h+Category], offset aCannotPrintOnl_0 ; "cannot print only user and only group"
.text:00401BD7                 call    ds:libintl_gettext
.text:00401BDD                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:00401BE5                 mov     [esp+38h+Category], 1 ; Code
.text:00401BEC                 mov     [esp+38h+var_30], eax ; char *
.text:00401BF0                 call    sub_405340
.text:00401BF5                 jmp     loc_4019F6
.text:00401BF5 sub_401770      endp
.text:00401BF5
.text:00401BF5 ; ---------------------------------------------------------------------------
.text:00401BFA ; const char Format[4]
.text:00401BFA Format          db '%lu',0              ; DATA XREF: sub_401C40+18↓o
.text:00401BFA                                         ; sub_401CF0+18↓o ...
.text:00401BFE aS_4            db '%s',0               ; DATA XREF: sub_401C40+3E↓o
.text:00401BFE                                         ; sub_401CF0+3E↓o
.text:00401C01                 align 20h
.text:00401C20 aCannotFindName db 'cannot find name for user ID %u',0
.text:00401C20                                         ; DATA XREF: sub_401C40:loc_401C8B↓o
.text:00401C40
.text:00401C40 ; =============== S U B R O U T I N E =======================================
.text:00401C40
.text:00401C40
.text:00401C40 sub_401C40      proc near               ; CODE XREF: sub_401770+34B↑p
.text:00401C40
.text:00401C40 Format          = dword ptr -1Ch
.text:00401C40 ErrorMessage    = dword ptr -18h
.text:00401C40 var_14          = dword ptr -14h
.text:00401C40 var_10          = byte ptr -10h
.text:00401C40 var_4           = dword ptr -4
.text:00401C40 arg_0           = byte ptr  4
.text:00401C40
.text:00401C40                 sub     esp, 1Ch
.text:00401C43                 cmp     ds:byte_408000, 0
.text:00401C4A                 mov     [esp+1Ch+var_4], ebx
.text:00401C4E                 mov     ebx, dword ptr [esp+1Ch+arg_0]
.text:00401C52                 jnz     short loc_401C70
.text:00401C54
.text:00401C54 loc_401C54:                             ; CODE XREF: sub_401C40+7B↓j
.text:00401C54                 mov     [esp+1Ch+ErrorMessage], ebx
.text:00401C58                 mov     [esp+1Ch+Format], offset Format ; "%lu"
.text:00401C5F
.text:00401C5F loc_401C5F:                             ; CODE XREF: sub_401C40+49↓j
.text:00401C5F                 call    printf
.text:00401C64                 mov     ebx, [esp+1Ch+var_4]
.text:00401C68                 add     esp, 1Ch
.text:00401C6B                 retn
.text:00401C6B ; ---------------------------------------------------------------------------
.text:00401C6C                 align 10h
.text:00401C70
.text:00401C70 loc_401C70:                             ; CODE XREF: sub_401C40+12↑j
.text:00401C70                 mov     [esp+1Ch+Format], ebx
.text:00401C73                 call    sub_405600
.text:00401C78                 test    eax, eax
.text:00401C7A                 jz      short loc_401C8B
.text:00401C7C                 mov     edx, [eax]
.text:00401C7E                 mov     [esp+1Ch+Format], offset aS_4 ; "%s"
.text:00401C85                 mov     [esp+1Ch+ErrorMessage], edx
.text:00401C89                 jmp     short loc_401C5F
.text:00401C8B ; ---------------------------------------------------------------------------
.text:00401C8B
.text:00401C8B loc_401C8B:                             ; CODE XREF: sub_401C40+3A↑j
.text:00401C8B                 mov     [esp+1Ch+Format], offset aCannotFindName ; "cannot find name for user ID %u"
.text:00401C92                 call    ds:libintl_gettext
.text:00401C98                 mov     dword ptr [esp+1Ch+var_10], ebx ; char
.text:00401C9C                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00401CA4                 mov     [esp+1Ch+Format], 0 ; Code
.text:00401CAB                 mov     [esp+1Ch+var_14], eax ; char *
.text:00401CAF                 call    sub_405340
.text:00401CB4                 mov     byte_407010, 0
.text:00401CBB                 jmp     short loc_401C54
.text:00401CBB sub_401C40      endp
.text:00401CBB
.text:00401CBB ; ---------------------------------------------------------------------------
.text:00401CBD                 align 10h
.text:00401CC0 aCannotFindName_0 db 'cannot find name for group ID %u',0
.text:00401CC0                                         ; DATA XREF: sub_401CF0:loc_401D3B↓o
.text:00401CE1 ; ---------------------------------------------------------------------------
.text:00401CE1                 jmp     short sub_401CF0
.text:00401CE1 ; ---------------------------------------------------------------------------
.text:00401CE3                 align 10h
.text:00401CF0
.text:00401CF0 ; =============== S U B R O U T I N E =======================================
.text:00401CF0
.text:00401CF0
.text:00401CF0 sub_401CF0      proc near               ; CODE XREF: sub_401770+3BA↑p
.text:00401CF0                                         ; .text:00401CE1↑j ...
.text:00401CF0
.text:00401CF0 Format          = dword ptr -1Ch
.text:00401CF0 ErrorMessage    = dword ptr -18h
.text:00401CF0 var_14          = dword ptr -14h
.text:00401CF0 var_10          = byte ptr -10h
.text:00401CF0 var_4           = dword ptr -4
.text:00401CF0 arg_0           = byte ptr  4
.text:00401CF0
.text:00401CF0                 sub     esp, 1Ch
.text:00401CF3                 cmp     ds:byte_408000, 0
.text:00401CFA                 mov     [esp+1Ch+var_4], ebx
.text:00401CFE                 mov     ebx, dword ptr [esp+1Ch+arg_0]
.text:00401D02                 jnz     short loc_401D20
.text:00401D04
.text:00401D04 loc_401D04:                             ; CODE XREF: sub_401CF0+7B↓j
.text:00401D04                 mov     [esp+1Ch+ErrorMessage], ebx
.text:00401D08                 mov     [esp+1Ch+Format], offset Format ; "%lu"
.text:00401D0F
.text:00401D0F loc_401D0F:                             ; CODE XREF: sub_401CF0+49↓j
.text:00401D0F                 call    printf
.text:00401D14                 mov     ebx, [esp+1Ch+var_4]
.text:00401D18                 add     esp, 1Ch
.text:00401D1B                 retn
.text:00401D1B ; ---------------------------------------------------------------------------
.text:00401D1C                 align 10h
.text:00401D20
.text:00401D20 loc_401D20:                             ; CODE XREF: sub_401CF0+12↑j
.text:00401D20                 mov     [esp+1Ch+Format], ebx
.text:00401D23                 call    sub_4055F0
.text:00401D28                 test    eax, eax
.text:00401D2A                 jz      short loc_401D3B
.text:00401D2C                 mov     edx, [eax]
.text:00401D2E                 mov     [esp+1Ch+Format], offset aS_4 ; "%s"
.text:00401D35                 mov     [esp+1Ch+ErrorMessage], edx
.text:00401D39                 jmp     short loc_401D0F
.text:00401D3B ; ---------------------------------------------------------------------------
.text:00401D3B
.text:00401D3B loc_401D3B:                             ; CODE XREF: sub_401CF0+3A↑j
.text:00401D3B                 mov     [esp+1Ch+Format], offset aCannotFindName_0 ; "cannot find name for group ID %u"
.text:00401D42                 call    ds:libintl_gettext
.text:00401D48                 mov     dword ptr [esp+1Ch+var_10], ebx ; char
.text:00401D4C                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00401D54                 mov     [esp+1Ch+Format], 0 ; Code
.text:00401D5B                 mov     [esp+1Ch+var_14], eax ; char *
.text:00401D5F                 call    sub_405340
.text:00401D64                 mov     byte_407010, 0
.text:00401D6B                 jmp     short loc_401D04
.text:00401D6B sub_401CF0      endp
.text:00401D6B
.text:00401D6B ; ---------------------------------------------------------------------------
.text:00401D6D                 align 10h
.text:00401D70
.text:00401D70 ; =============== S U B R O U T I N E =======================================
.text:00401D70
.text:00401D70
.text:00401D70 ; int __cdecl sub_401D70(char *)
.text:00401D70 sub_401D70      proc near               ; CODE XREF: sub_401770+3DA↑p
.text:00401D70
.text:00401D70 Block           = dword ptr -1Ch
.text:00401D70 File            = dword ptr -18h
.text:00401D70 var_14          = dword ptr -14h
.text:00401D70 var_10          = dword ptr -10h
.text:00401D70 var_C           = dword ptr -0Ch
.text:00401D70 var_8           = dword ptr -8
.text:00401D70 arg_0           = dword ptr  4
.text:00401D70
.text:00401D70                 push    ebx
.text:00401D71                 sub     esp, 18h
.text:00401D74                 mov     edx, ds:dword_408010
.text:00401D7A                 mov     [esp+1Ch+Block], edx
.text:00401D7D                 call    sub_405600
.text:00401D82                 test    eax, eax
.text:00401D84                 mov     ebx, eax
.text:00401D86                 jz      loc_401EC8
.text:00401D8C
.text:00401D8C loc_401D8C:                             ; CODE XREF: sub_401D70+15F↓j
.text:00401D8C                 mov     ecx, ds:dword_408030
.text:00401D92                 mov     [esp+1Ch+Block], ecx
.text:00401D95                 call    sub_401CF0
.text:00401D9A                 mov     edx, ds:dword_408030
.text:00401DA0                 cmp     ds:dword_408040, edx
.text:00401DA6                 jz      short loc_401DDA
.text:00401DA8                 mov     edx, ds:_iob
.text:00401DAE                 mov     ecx, [edx+24h]
.text:00401DB1                 dec     ecx
.text:00401DB2                 mov     [edx+24h], ecx
.text:00401DB5                 test    ecx, ecx
.text:00401DB7                 js      loc_401EAA
.text:00401DBD                 mov     ecx, ds:_iob
.text:00401DC3                 mov     eax, [ecx+20h]
.text:00401DC6                 mov     byte ptr [eax], 20h ; ' '
.text:00401DC9                 inc     dword ptr [ecx+20h]
.text:00401DCC
.text:00401DCC loc_401DCC:                             ; CODE XREF: sub_401D70+153↓j
.text:00401DCC                 mov     ecx, ds:dword_408040
.text:00401DD2                 mov     [esp+1Ch+Block], ecx
.text:00401DD5                 call    sub_401CF0
.text:00401DDA
.text:00401DDA loc_401DDA:                             ; CODE XREF: sub_401D70+36↑j
.text:00401DDA                 lea     ecx, [esp+1Ch+var_8]
.text:00401DDE                 test    ebx, ebx
.text:00401DE0                 lea     edx, [esp+1Ch+var_C]
.text:00401DE4                 mov     [esp+1Ch+var_10], ecx ; int
.text:00401DE8                 mov     eax, 0FFFFFFFFh
.text:00401DED                 mov     [esp+1Ch+var_14], edx ; int
.text:00401DF1                 jz      short loc_401DF6
.text:00401DF3                 mov     eax, [ebx+0Ch]
.text:00401DF6
.text:00401DF6 loc_401DF6:                             ; CODE XREF: sub_401D70+81↑j
.text:00401DF6                 mov     [esp+1Ch+File], eax ; char
.text:00401DFA                 mov     ebx, [esp+1Ch+arg_0]
.text:00401DFE                 mov     [esp+1Ch+Block], ebx ; char *
.text:00401E01                 call    sub_402290
.text:00401E06                 test    al, al
.text:00401E08                 jnz     short loc_401E16
.text:00401E0A                 mov     byte_407010, 0
.text:00401E11
.text:00401E11 loc_401E11:                             ; CODE XREF: sub_401D70+117↓j
.text:00401E11                 add     esp, 18h
.text:00401E14                 pop     ebx
.text:00401E15                 retn
.text:00401E16 ; ---------------------------------------------------------------------------
.text:00401E16
.text:00401E16 loc_401E16:                             ; CODE XREF: sub_401D70+98↑j
.text:00401E16                 mov     ecx, [esp+1Ch+var_C]
.text:00401E1A                 xor     ebx, ebx
.text:00401E1C                 cmp     ebx, ecx
.text:00401E1E                 jge     loc_401EA4
.text:00401E24                 mov     edx, [esp+1Ch+var_8]
.text:00401E28                 nop
.text:00401E29                 lea     esi, [esi+0]
.text:00401E30
.text:00401E30 loc_401E30:                             ; CODE XREF: sub_401D70+10D↓j
.text:00401E30                 mov     eax, [edx+ebx*4]
.text:00401E33                 cmp     eax, ds:dword_408030
.text:00401E39                 jz      short loc_401E7A
.text:00401E3B                 cmp     eax, ds:dword_408040
.text:00401E41                 jz      short loc_401E7A
.text:00401E43                 mov     edx, ds:_iob
.text:00401E49                 mov     ecx, [edx+24h]
.text:00401E4C                 dec     ecx
.text:00401E4D                 mov     [edx+24h], ecx
.text:00401E50                 test    ecx, ecx
.text:00401E52                 js      short loc_401E89
.text:00401E54                 mov     ecx, ds:_iob
.text:00401E5A                 mov     eax, [ecx+20h]
.text:00401E5D                 mov     byte ptr [eax], 20h ; ' '
.text:00401E60                 inc     dword ptr [ecx+20h]
.text:00401E63
.text:00401E63 loc_401E63:                             ; CODE XREF: sub_401D70+132↓j
.text:00401E63                 mov     edx, [esp+1Ch+var_8]
.text:00401E67                 mov     ecx, [edx+ebx*4]
.text:00401E6A                 mov     [esp+1Ch+Block], ecx
.text:00401E6D                 call    sub_401CF0
.text:00401E72                 mov     ecx, [esp+1Ch+var_C]
.text:00401E76                 mov     edx, [esp+1Ch+var_8]
.text:00401E7A
.text:00401E7A loc_401E7A:                             ; CODE XREF: sub_401D70+C9↑j
.text:00401E7A                                         ; sub_401D70+D1↑j
.text:00401E7A                 inc     ebx
.text:00401E7B                 cmp     ebx, ecx
.text:00401E7D                 jl      short loc_401E30
.text:00401E7F
.text:00401E7F loc_401E7F:                             ; CODE XREF: sub_401D70+138↓j
.text:00401E7F                 mov     [esp+1Ch+Block], edx ; Block
.text:00401E82                 call    free
.text:00401E87                 jmp     short loc_401E11
.text:00401E89 ; ---------------------------------------------------------------------------
.text:00401E89
.text:00401E89 loc_401E89:                             ; CODE XREF: sub_401D70+E2↑j
.text:00401E89                 mov     [esp+1Ch+Block], 20h ; ' ' ; Ch
.text:00401E90                 mov     edx, ds:_iob
.text:00401E96                 add     edx, 20h ; ' '
.text:00401E99                 mov     [esp+1Ch+File], edx ; File
.text:00401E9D                 call    _flsbuf
.text:00401EA2                 jmp     short loc_401E63
.text:00401EA4 ; ---------------------------------------------------------------------------
.text:00401EA4
.text:00401EA4 loc_401EA4:                             ; CODE XREF: sub_401D70+AE↑j
.text:00401EA4                 mov     edx, [esp+1Ch+var_8]
.text:00401EA8                 jmp     short loc_401E7F
.text:00401EAA ; ---------------------------------------------------------------------------
.text:00401EAA
.text:00401EAA loc_401EAA:                             ; CODE XREF: sub_401D70+47↑j
.text:00401EAA                 mov     [esp+1Ch+Block], 20h ; ' ' ; Ch
.text:00401EB1                 mov     edx, ds:_iob
.text:00401EB7                 add     edx, 20h ; ' '
.text:00401EBA                 mov     [esp+1Ch+File], edx ; File
.text:00401EBE                 call    _flsbuf
.text:00401EC3                 jmp     loc_401DCC
.text:00401EC8 ; ---------------------------------------------------------------------------
.text:00401EC8
.text:00401EC8 loc_401EC8:                             ; CODE XREF: sub_401D70+16↑j
.text:00401EC8                 mov     byte_407010, 0
.text:00401ECF                 jmp     loc_401D8C
.text:00401ECF sub_401D70      endp
.text:00401ECF
.text:00401ECF ; ---------------------------------------------------------------------------
.text:00401ED4 ; const char aUidLu[]
.text:00401ED4 aUidLu          db 'uid=%lu',0          ; DATA XREF: sub_401F10+A↓o
.text:00401EDC ; const char aS[]
.text:00401EDC aS              db '(%s)',0             ; DATA XREF: sub_401F10+30↓o
.text:00401EDC                                         ; sub_401F10+6A↓o ...
.text:00401EE1 ; const char aGidLu[]
.text:00401EE1 aGidLu          db ' gid=%lu',0         ; DATA XREF: sub_401F10:loc_401F50↓o
.text:00401EEA ; const char aEuidLu[]
.text:00401EEA aEuidLu         db ' euid=%lu',0        ; DATA XREF: sub_401F10+8B↓o
.text:00401EF4 ; const char aEgidLu[]
.text:00401EF4 aEgidLu         db ' egid=%lu',0        ; DATA XREF: sub_401F10+D1↓o
.text:00401EFE aGroups         db ' groups=',0         ; DATA XREF: sub_401F10+158↓o
.text:00401F07                 align 10h
.text:00401F10
.text:00401F10 ; =============== S U B R O U T I N E =======================================
.text:00401F10
.text:00401F10
.text:00401F10 ; int __cdecl sub_401F10(char *)
.text:00401F10 sub_401F10      proc near               ; CODE XREF: sub_401770+3F0↑p
.text:00401F10
.text:00401F10 Format          = dword ptr -1Ch
.text:00401F10 Stream          = dword ptr -18h
.text:00401F10 var_14          = dword ptr -14h
.text:00401F10 var_10          = dword ptr -10h
.text:00401F10 var_C           = dword ptr -0Ch
.text:00401F10 Block           = dword ptr -8
.text:00401F10 arg_0           = dword ptr  4
.text:00401F10
.text:00401F10                 push    ebx
.text:00401F11                 sub     esp, 18h
.text:00401F14                 mov     edx, ds:dword_408010
.text:00401F1A                 mov     [esp+1Ch+Format], offset aUidLu ; "uid=%lu"
.text:00401F21                 mov     [esp+1Ch+Stream], edx
.text:00401F25                 call    printf
.text:00401F2A                 mov     edx, ds:dword_408010
.text:00401F30                 mov     [esp+1Ch+Format], edx
.text:00401F33                 call    sub_405600
.text:00401F38                 test    eax, eax
.text:00401F3A                 mov     ebx, eax
.text:00401F3C                 jz      short loc_401F50
.text:00401F3E                 mov     ecx, [eax]
.text:00401F40                 mov     [esp+1Ch+Format], offset aS ; "(%s)"
.text:00401F47                 mov     [esp+1Ch+Stream], ecx
.text:00401F4B                 call    printf
.text:00401F50
.text:00401F50 loc_401F50:                             ; CODE XREF: sub_401F10+2C↑j
.text:00401F50                 mov     [esp+1Ch+Format], offset aGidLu ; " gid=%lu"
.text:00401F57                 mov     ecx, ds:dword_408030
.text:00401F5D                 mov     [esp+1Ch+Stream], ecx
.text:00401F61                 call    printf
.text:00401F66                 mov     edx, ds:dword_408030
.text:00401F6C                 mov     [esp+1Ch+Format], edx
.text:00401F6F                 call    sub_4055F0
.text:00401F74                 test    eax, eax
.text:00401F76                 jz      short loc_401F8A
.text:00401F78                 mov     edx, [eax]
.text:00401F7A                 mov     [esp+1Ch+Format], offset aS ; "(%s)"
.text:00401F81                 mov     [esp+1Ch+Stream], edx
.text:00401F85                 call    printf
.text:00401F8A
.text:00401F8A loc_401F8A:                             ; CODE XREF: sub_401F10+66↑j
.text:00401F8A                 mov     eax, ds:dword_408020
.text:00401F8F                 cmp     eax, ds:dword_408010
.text:00401F95                 jz      short loc_401FD0
.text:00401F97                 mov     [esp+1Ch+Stream], eax
.text:00401F9B                 mov     [esp+1Ch+Format], offset aEuidLu ; " euid=%lu"
.text:00401FA2                 call    printf
.text:00401FA7                 mov     ebx, ds:dword_408020
.text:00401FAD                 mov     [esp+1Ch+Format], ebx
.text:00401FB0                 call    sub_405600
.text:00401FB5                 test    eax, eax
.text:00401FB7                 mov     ebx, eax
.text:00401FB9                 jz      short loc_401FD0
.text:00401FBB                 mov     ecx, [eax]
.text:00401FBD                 mov     [esp+1Ch+Format], offset aS ; "(%s)"
.text:00401FC4                 mov     [esp+1Ch+Stream], ecx
.text:00401FC8                 call    printf
.text:00401FCD                 lea     esi, [esi+0]
.text:00401FD0
.text:00401FD0 loc_401FD0:                             ; CODE XREF: sub_401F10+85↑j
.text:00401FD0                                         ; sub_401F10+A9↑j
.text:00401FD0                 mov     eax, ds:dword_408040
.text:00401FD5                 cmp     eax, ds:dword_408030
.text:00401FDB                 jz      short loc_402020
.text:00401FDD                 mov     [esp+1Ch+Stream], eax
.text:00401FE1                 mov     [esp+1Ch+Format], offset aEgidLu ; " egid=%lu"
.text:00401FE8                 call    printf
.text:00401FED                 mov     edx, ds:dword_408040
.text:00401FF3                 mov     [esp+1Ch+Format], edx
.text:00401FF6                 call    sub_4055F0
.text:00401FFB                 test    eax, eax
.text:00401FFD                 jz      short loc_402020
.text:00401FFF                 mov     ecx, [eax]
.text:00402001                 mov     [esp+1Ch+Format], offset aS ; "(%s)"
.text:00402008                 mov     [esp+1Ch+Stream], ecx
.text:0040200C                 call    printf
.text:00402011                 jmp     short loc_402020
.text:00402011 ; ---------------------------------------------------------------------------
.text:00402013                 align 10h
.text:00402020
.text:00402020 loc_402020:                             ; CODE XREF: sub_401F10+CB↑j
.text:00402020                                         ; sub_401F10+ED↑j ...
.text:00402020                 lea     ecx, [esp+1Ch+Block]
.text:00402024                 test    ebx, ebx
.text:00402026                 lea     edx, [esp+1Ch+var_C]
.text:0040202A                 mov     [esp+1Ch+var_10], ecx ; int
.text:0040202E                 mov     eax, 0FFFFFFFFh
.text:00402033                 mov     [esp+1Ch+var_14], edx ; int
.text:00402037                 jz      short loc_40203C
.text:00402039                 mov     eax, [ebx+0Ch]
.text:0040203C
.text:0040203C loc_40203C:                             ; CODE XREF: sub_401F10+127↑j
.text:0040203C                 mov     [esp+1Ch+Stream], eax ; char
.text:00402040                 mov     ebx, [esp+1Ch+arg_0]
.text:00402044                 mov     [esp+1Ch+Format], ebx ; char *
.text:00402047                 call    sub_402290
.text:0040204C                 test    al, al
.text:0040204E                 jnz     short loc_402060
.text:00402050                 mov     byte_407010, 0
.text:00402057
.text:00402057 loc_402057:                             ; CODE XREF: sub_401F10+203↓j
.text:00402057                 add     esp, 18h
.text:0040205A                 pop     ebx
.text:0040205B                 retn
.text:0040205B ; ---------------------------------------------------------------------------
.text:0040205C                 align 10h
.text:00402060
.text:00402060 loc_402060:                             ; CODE XREF: sub_401F10+13E↑j
.text:00402060                 mov     eax, [esp+1Ch+var_C]
.text:00402064                 test    eax, eax
.text:00402066                 jle     short loc_40208E
.text:00402068                 mov     [esp+1Ch+Format], offset aGroups ; " groups="
.text:0040206F                 call    ds:libintl_gettext
.text:00402075                 mov     ecx, ds:_iob
.text:0040207B                 add     ecx, 20h ; ' '
.text:0040207E                 mov     [esp+1Ch+Stream], ecx ; Stream
.text:00402082                 mov     [esp+1Ch+Format], eax ; Buffer
.text:00402085                 call    fputs
.text:0040208A                 mov     eax, [esp+1Ch+var_C]
.text:0040208E
.text:0040208E loc_40208E:                             ; CODE XREF: sub_401F10+156↑j
.text:0040208E                 xor     ebx, ebx
.text:00402090                 cmp     ebx, eax
.text:00402092                 jge     short loc_402107
.text:00402094                 lea     esi, [esi+0]
.text:0040209A                 lea     edi, [edi+0]
.text:004020A0
.text:004020A0 loc_4020A0:                             ; CODE XREF: sub_401F10+1F5↓j
.text:004020A0                 test    ebx, ebx
.text:004020A2                 jle     short loc_4020C4
.text:004020A4                 mov     edx, ds:_iob
.text:004020AA                 mov     ecx, [edx+24h]
.text:004020AD                 dec     ecx
.text:004020AE                 mov     [edx+24h], ecx
.text:004020B1                 test    ecx, ecx
.text:004020B3                 js      short loc_402118
.text:004020B5                 mov     ecx, ds:_iob
.text:004020BB                 mov     eax, [ecx+20h]
.text:004020BE                 mov     byte ptr [eax], 2Ch ; ','
.text:004020C1                 inc     dword ptr [ecx+20h]
.text:004020C4
.text:004020C4 loc_4020C4:                             ; CODE XREF: sub_401F10+192↑j
.text:004020C4                                         ; sub_401F10+221↓j
.text:004020C4                 mov     edx, [esp+1Ch+Block]
.text:004020C8                 mov     ecx, [edx+ebx*4]
.text:004020CB                 mov     [esp+1Ch+Format], offset Format ; "%lu"
.text:004020D2                 mov     [esp+1Ch+Stream], ecx
.text:004020D6                 call    printf
.text:004020DB                 mov     edx, [esp+1Ch+Block]
.text:004020DF                 mov     ecx, [edx+ebx*4]
.text:004020E2                 mov     [esp+1Ch+Format], ecx
.text:004020E5                 call    sub_4055F0
.text:004020EA                 test    eax, eax
.text:004020EC                 jz      short loc_402100
.text:004020EE                 mov     ecx, [eax]
.text:004020F0                 mov     [esp+1Ch+Format], offset aS ; "(%s)"
.text:004020F7                 mov     [esp+1Ch+Stream], ecx
.text:004020FB                 call    printf
.text:00402100
.text:00402100 loc_402100:                             ; CODE XREF: sub_401F10+1DC↑j
.text:00402100                 inc     ebx
.text:00402101                 cmp     ebx, [esp+1Ch+var_C]
.text:00402105                 jl      short loc_4020A0
.text:00402107
.text:00402107 loc_402107:                             ; CODE XREF: sub_401F10+182↑j
.text:00402107                 mov     ebx, [esp+1Ch+Block]
.text:0040210B                 mov     [esp+1Ch+Format], ebx ; Block
.text:0040210E                 call    free
.text:00402113                 jmp     loc_402057
.text:00402118 ; ---------------------------------------------------------------------------
.text:00402118
.text:00402118 loc_402118:                             ; CODE XREF: sub_401F10+1A3↑j
.text:00402118                 mov     [esp+1Ch+Format], 2Ch ; ',' ; Ch
.text:0040211F                 mov     edx, ds:_iob
.text:00402125                 add     edx, 20h ; ' '
.text:00402128                 mov     [esp+1Ch+Stream], edx ; File
.text:0040212C                 call    _flsbuf
.text:00402131                 jmp     short loc_4020C4
.text:00402131 sub_401F10      endp
.text:00402131
.text:00402131 ; ---------------------------------------------------------------------------
.text:00402133                 align 10h
.text:00402140                 sub     esp, 1Ch
.text:00402143                 mov     [esp+18h], ebx
.text:00402147                 mov     ebx, [esp+20h]
.text:0040214B                 test    ebx, ebx
.text:0040214D                 jz      short loc_402183
.text:0040214F                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402156                 call    ds:libintl_gettext
.text:0040215C                 mov     edx, ds:_iob
.text:00402162                 mov     ecx, ds:dword_408B30
.text:00402168                 add     edx, 40h ; '@'
.text:0040216B                 mov     [esp+8], ecx
.text:0040216F                 mov     [esp+4], eax
.text:00402173                 mov     [esp], edx
.text:00402176                 call    fprintf
.text:0040217B
.text:0040217B loc_40217B:                             ; CODE XREF: .text:00402247↓j
.text:0040217B                 mov     [esp], ebx
.text:0040217E                 call    exit
.text:00402183 ; ---------------------------------------------------------------------------
.text:00402183
.text:00402183 loc_402183:                             ; CODE XREF: .text:0040214D↑j
.text:00402183                 mov     dword ptr [esp], (offset stru_4013FA._cnt+2)
.text:0040218A                 call    ds:libintl_gettext
.text:00402190                 mov     ecx, ds:dword_408B30
.text:00402196                 mov     [esp], eax
.text:00402199                 mov     [esp+4], ecx
.text:0040219D                 call    printf
.text:004021A2                 mov     dword ptr [esp], offset aPrintInformati ; "Print information for USERNAME, or the "...
.text:004021A9                 call    ds:libintl_gettext
.text:004021AF                 mov     ecx, ds:_iob
.text:004021B5                 add     ecx, 20h ; ' '
.text:004021B8                 mov     [esp+4], ecx
.text:004021BC                 mov     [esp], eax
.text:004021BF                 call    fputs
.text:004021C4                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004021CB                 call    ds:libintl_gettext
.text:004021D1                 mov     ecx, ds:_iob
.text:004021D7                 add     ecx, 20h ; ' '
.text:004021DA                 mov     [esp+4], ecx
.text:004021DE                 mov     [esp], eax
.text:004021E1                 call    fputs
.text:004021E6                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:004021ED                 call    ds:libintl_gettext
.text:004021F3                 mov     ecx, ds:_iob
.text:004021F9                 add     ecx, 20h ; ' '
.text:004021FC                 mov     [esp+4], ecx
.text:00402200                 mov     [esp], eax
.text:00402203                 call    fputs
.text:00402208                 mov     dword ptr [esp], offset aWithoutAnyOpti ; "\nWithout any OPTION, print some useful"...
.text:0040220F                 call    ds:libintl_gettext
.text:00402215                 mov     ecx, ds:_iob
.text:0040221B                 add     ecx, 20h ; ' '
.text:0040221E                 mov     [esp+4], ecx
.text:00402222                 mov     [esp], eax
.text:00402225                 call    fputs
.text:0040222A                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402231                 call    ds:libintl_gettext
.text:00402237                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040223F                 mov     [esp], eax
.text:00402242                 call    printf
.text:00402247                 jmp     loc_40217B
.text:00402247 ; ---------------------------------------------------------------------------
.text:0040224C                 align 20h
.text:00402260 aCannotGetSuppl db 'cannot get supplemental group list',0
.text:00402260                                         ; DATA XREF: sub_402290:loc_402312↓o
.text:00402283                 align 10h
.text:00402290
.text:00402290 ; =============== S U B R O U T I N E =======================================
.text:00402290
.text:00402290
.text:00402290 ; int __cdecl sub_402290(char *, char, int, int)
.text:00402290 sub_402290      proc near               ; CODE XREF: sub_401D70+91↑p
.text:00402290                                         ; sub_401F10+137↑p
.text:00402290
.text:00402290 Block           = dword ptr -2Ch
.text:00402290 ErrorMessage    = dword ptr -28h
.text:00402290 var_24          = dword ptr -24h
.text:00402290 var_20          = byte ptr -20h
.text:00402290 arg_0           = dword ptr  4
.text:00402290 arg_4           = byte ptr  8
.text:00402290 arg_8           = dword ptr  0Ch
.text:00402290 arg_C           = dword ptr  10h
.text:00402290
.text:00402290                 push    ebp
.text:00402291                 push    edi
.text:00402292                 xor     edi, edi
.text:00402294                 push    esi
.text:00402295                 push    ebx
.text:00402296                 sub     esp, 1Ch
.text:00402299                 mov     esi, [esp+2Ch+arg_0]
.text:0040229D                 mov     ebp, dword ptr [esp+2Ch+arg_4]
.text:004022A1                 test    esi, esi
.text:004022A3                 jz      loc_402356
.text:004022A9                 mov     dword ptr [esp+2Ch+var_20], ebp ; char
.text:004022AD                 mov     [esp+2Ch+var_24], esi ; char *
.text:004022B1                 mov     [esp+2Ch+ErrorMessage], 0 ; int
.text:004022B9                 mov     [esp+2Ch+Block], 0 ; int
.text:004022C0                 call    sub_403670
.text:004022C5
.text:004022C5 loc_4022C5:                             ; CODE XREF: sub_402290+DA↓j
.text:004022C5                 test    eax, eax
.text:004022C7                 mov     ebx, eax
.text:004022C9                 js      short loc_402312
.text:004022CB                 mov     [esp+2Ch+ErrorMessage], 4
.text:004022D3                 mov     [esp+2Ch+Block], eax
.text:004022D6                 call    sub_4033A0
.text:004022DB                 test    esi, esi
.text:004022DD                 mov     edi, eax
.text:004022DF                 jz      short loc_402348
.text:004022E1                 mov     dword ptr [esp+2Ch+var_20], ebp ; int
.text:004022E5                 mov     [esp+2Ch+var_24], esi ; char *
.text:004022E9                 mov     [esp+2Ch+ErrorMessage], eax ; int
.text:004022ED                 mov     [esp+2Ch+Block], ebx ; int
.text:004022F0                 call    sub_403670
.text:004022F5
.text:004022F5 loc_4022F5:                             ; CODE XREF: sub_402290+C4↓j
.text:004022F5                 test    eax, eax
.text:004022F7                 js      short loc_402312
.text:004022F9                 mov     ecx, [esp+2Ch+arg_8]
.text:004022FD                 mov     edx, [esp+2Ch+arg_C]
.text:00402301                 mov     [ecx], eax
.text:00402303                 mov     eax, 1
.text:00402308                 mov     [edx], edi
.text:0040230A
.text:0040230A loc_40230A:                             ; CODE XREF: sub_402290+B6↓j
.text:0040230A                 add     esp, 1Ch
.text:0040230D                 pop     ebx
.text:0040230E                 pop     esi
.text:0040230F                 pop     edi
.text:00402310                 pop     ebp
.text:00402311                 retn
.text:00402312 ; ---------------------------------------------------------------------------
.text:00402312
.text:00402312 loc_402312:                             ; CODE XREF: sub_402290+39↑j
.text:00402312                                         ; sub_402290+67↑j
.text:00402312                 mov     [esp+2Ch+Block], offset aCannotGetSuppl ; "cannot get supplemental group list"
.text:00402319                 call    ds:libintl_gettext
.text:0040231F                 mov     esi, eax
.text:00402321                 call    _errno
.text:00402326                 mov     [esp+2Ch+var_24], esi ; char *
.text:0040232A                 mov     edx, [eax]
.text:0040232C                 mov     [esp+2Ch+Block], 0 ; Code
.text:00402333                 mov     [esp+2Ch+ErrorMessage], edx ; ErrorMessage
.text:00402337                 call    sub_405340
.text:0040233C                 mov     [esp+2Ch+Block], edi ; Block
.text:0040233F                 call    free
.text:00402344                 xor     eax, eax
.text:00402346                 jmp     short loc_40230A
.text:00402348 ; ---------------------------------------------------------------------------
.text:00402348
.text:00402348 loc_402348:                             ; CODE XREF: sub_402290+4F↑j
.text:00402348                 mov     [esp+2Ch+ErrorMessage], eax
.text:0040234C                 mov     [esp+2Ch+Block], ebx
.text:0040234F                 call    sub_4055E0
.text:00402354                 jmp     short loc_4022F5
.text:00402356 ; ---------------------------------------------------------------------------
.text:00402356
.text:00402356 loc_402356:                             ; CODE XREF: sub_402290+13↑j
.text:00402356                 mov     [esp+2Ch+ErrorMessage], 0
.text:0040235E                 mov     [esp+2Ch+Block], 0
.text:00402365                 call    sub_4055E0
.text:0040236A                 jmp     loc_4022C5
.text:0040236A sub_402290      endp
.text:0040236A
.text:0040236A ; ---------------------------------------------------------------------------
.text:0040236F                 align 20h
.text:00402380 dword_402380    dd 90002D2Dh, 7 dup(90909090h)
.text:00402380                                         ; DATA XREF: sub_4025D0+E4↓o
.text:004023A0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004023A0                                         ; DATA XREF: sub_4025D0+2FC↓o
.text:004023CD                 align 20h
.text:004023E0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004023E0                                         ; DATA XREF: sub_4025D0:loc_402932↓o
.text:0040240D                 align 20h
.text:00402420 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00402420                                         ; DATA XREF: sub_4025D0:loc_4029D0↓o
.text:00402420                                         ; sub_4025D0:loc_402D97↓o
.text:00402446                 align 20h
.text:00402460 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00402460                                         ; DATA XREF: sub_4025D0+48E↓o
.text:00402480 dword_402480    dd 90909000h, 7 dup(90909090h)
.text:00402480                                         ; DATA XREF: sub_4025D0:loc_402AA1↓o
.text:004024A0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:004024A0                                         ; DATA XREF: sub_4025D0:loc_402ABA↓o
.text:004024C0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:004024C0                                         ; DATA XREF: sub_4025D0:loc_402B9F↓o
.text:004024C0                                         ; sub_4025D0:loc_402ECC↓o
.text:004024E7                 align 20h
.text:00402500 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402500                                         ; DATA XREF: sub_4025D0:loc_402D13↓o
.text:0040252E                 align 20h
.text:00402540 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00402540                                         ; DATA XREF: sub_4025D0:loc_402DFF↓o
.text:00402561 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00402561                                         ; DATA XREF: sub_4025D0+93F↓o
.text:0040257B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040257B                                         ; DATA XREF: sub_4025D0:loc_402F47↓o
.text:00402595 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00402595                                         ; DATA XREF: sub_4025D0:loc_402F6E↓o
.text:004025B3 ; const char VarName[]
.text:004025B3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_4025D0:loc_403120↓o
.text:004025C3                 align 10h
.text:004025D0
.text:004025D0 ; =============== S U B R O U T I N E =======================================
.text:004025D0
.text:004025D0
.text:004025D0 ; int __cdecl sub_4025D0(int, int, char *Str, int, int, int, int, int)
.text:004025D0 sub_4025D0      proc near               ; CODE XREF: sub_403160+5A↓p
.text:004025D0                                         ; .text:0040324A↓p ...
.text:004025D0
.text:004025D0 Str1            = dword ptr -5Ch
.text:004025D0 Str2            = dword ptr -58h
.text:004025D0 MaxCount        = dword ptr -54h
.text:004025D0 var_50          = dword ptr -50h
.text:004025D0 var_4C          = dword ptr -4Ch
.text:004025D0 var_3C          = dword ptr -3Ch
.text:004025D0 var_38          = dword ptr -38h
.text:004025D0 var_34          = dword ptr -34h
.text:004025D0 var_30          = dword ptr -30h
.text:004025D0 var_2C          = dword ptr -2Ch
.text:004025D0 var_28          = dword ptr -28h
.text:004025D0 var_24          = dword ptr -24h
.text:004025D0 var_20          = dword ptr -20h
.text:004025D0 var_1C          = dword ptr -1Ch
.text:004025D0 var_18          = dword ptr -18h
.text:004025D0 var_14          = dword ptr -14h
.text:004025D0 arg_0           = dword ptr  4
.text:004025D0 arg_4           = dword ptr  8
.text:004025D0 Str             = dword ptr  0Ch
.text:004025D0 arg_C           = dword ptr  10h
.text:004025D0 arg_10          = dword ptr  14h
.text:004025D0 arg_14          = dword ptr  18h
.text:004025D0 arg_18          = dword ptr  1Ch
.text:004025D0 arg_1C          = dword ptr  20h
.text:004025D0
.text:004025D0                 push    ebp
.text:004025D1                 mov     eax, 0FFFFFFFFh
.text:004025D6                 push    edi
.text:004025D7                 push    esi
.text:004025D8                 push    ebx
.text:004025D9                 sub     esp, 4Ch
.text:004025DC                 mov     esi, [esp+5Ch+Str]
.text:004025E0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004025E4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004025E7                 mov     ebx, [ebp+4]
.text:004025EA                 setz    dl
.text:004025ED                 movzx   ecx, dl
.text:004025F0                 dec     ecx
.text:004025F1                 and     ecx, ebx
.text:004025F3                 mov     [esp+5Ch+var_14], ecx
.text:004025F7                 mov     ecx, [esp+5Ch+arg_0]
.text:004025FB                 test    ecx, ecx
.text:004025FD                 jle     loc_402727
.text:00402603                 mov     dword ptr [ebp+0Ch], 0
.text:0040260A                 mov     ebx, [ebp+0]
.text:0040260D                 test    ebx, ebx
.text:0040260F                 jz      loc_403140
.text:00402615                 mov     edi, [ebp+10h]
.text:00402618                 test    edi, edi
.text:0040261A                 jnz     short loc_402673
.text:0040261C                 lea     esi, [esi+0]
.text:00402620
.text:00402620 loc_402620:                             ; CODE XREF: sub_4025D0+B7C↓j
.text:00402620                 mov     [ebp+24h], ebx
.text:00402623                 mov     esi, [esp+5Ch+Str]
.text:00402627                 mov     [ebp+20h], ebx
.text:0040262A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040262E                 xor     ebx, ebx
.text:00402630                 mov     dword ptr [ebp+14h], 0
.text:00402637                 test    ecx, ecx
.text:00402639                 jz      loc_403120
.text:0040263F
.text:0040263F loc_40263F:                             ; CODE XREF: sub_4025D0+B64↓j
.text:0040263F                 mov     ebx, 1
.text:00402644
.text:00402644 loc_402644:                             ; CODE XREF: sub_4025D0+B5E↓j
.text:00402644                 mov     [ebp+1Ch], ebx
.text:00402647                 mov     ecx, [esp+5Ch+Str]
.text:0040264B                 movzx   eax, byte ptr [ecx]
.text:0040264E                 cmp     al, 2Dh ; '-'
.text:00402650                 jz      loc_403110
.text:00402656                 cmp     al, 2Bh ; '+'
.text:00402658                 jz      loc_4030F9
.text:0040265E                 xor     edx, edx
.text:00402660                 test    ebx, ebx
.text:00402662                 setz    dl
.text:00402665                 mov     [ebp+18h], edx
.text:00402668
.text:00402668 loc_402668:                             ; CODE XREF: sub_4025D0+B35↓j
.text:00402668                 mov     [esp+5Ch+Str], esi
.text:0040266C                 mov     dword ptr [ebp+10h], 1
.text:00402673
.text:00402673 loc_402673:                             ; CODE XREF: sub_4025D0+4A↑j
.text:00402673                 mov     eax, [ebp+14h]
.text:00402676                 test    eax, eax
.text:00402678                 jz      short loc_402683
.text:0040267A                 cmp     byte ptr [eax], 0
.text:0040267D                 jnz     loc_402760
.text:00402683
.text:00402683 loc_402683:                             ; CODE XREF: sub_4025D0+A8↑j
.text:00402683                 mov     ebx, [ebp+0]
.text:00402686                 cmp     [ebp+24h], ebx
.text:00402689                 jle     short loc_40268E
.text:0040268B                 mov     [ebp+24h], ebx
.text:0040268E
.text:0040268E loc_40268E:                             ; CODE XREF: sub_4025D0+B9↑j
.text:0040268E                 cmp     [ebp+20h], ebx
.text:00402691                 jle     short loc_402696
.text:00402693                 mov     [ebp+20h], ebx
.text:00402696
.text:00402696 loc_402696:                             ; CODE XREF: sub_4025D0+C1↑j
.text:00402696                 cmp     dword ptr [ebp+18h], 1
.text:0040269A                 jz      loc_403070
.text:004026A0
.text:004026A0 loc_4026A0:                             ; CODE XREF: sub_4025D0+B13↓j
.text:004026A0                 cmp     ebx, [esp+5Ch+arg_0]
.text:004026A4                 jz      loc_403054
.text:004026AA                 cld
.text:004026AB                 mov     ecx, [esp+5Ch+arg_4]
.text:004026AF                 mov     edx, 3
.text:004026B4                 mov     edi, offset dword_402380
.text:004026B9                 mov     esi, [ecx+ebx*4]
.text:004026BC                 mov     ecx, edx
.text:004026BE                 repe cmpsb
.text:004026C0                 jnz     short loc_4026FC
.text:004026C2                 mov     edx, [ebp+24h]
.text:004026C5                 lea     eax, [ebx+1]
.text:004026C8                 cmp     [ebp+20h], edx
.text:004026CB                 mov     [ebp+0], eax
.text:004026CE                 jz      loc_403068
.text:004026D4                 cmp     edx, eax
.text:004026D6                 jz      short loc_4026F0
.text:004026D8                 mov     [esp+5Ch+Str2], ebp
.text:004026DC                 mov     ebx, [esp+5Ch+arg_4]
.text:004026E0                 mov     [esp+5Ch+Str1], ebx
.text:004026E3                 call    sub_403280
.text:004026E8                 nop
.text:004026E9                 lea     esi, [esi+0]
.text:004026F0
.text:004026F0 loc_4026F0:                             ; CODE XREF: sub_4025D0+106↑j
.text:004026F0                                         ; sub_4025D0+A9B↓j
.text:004026F0                 mov     eax, [esp+5Ch+arg_0]
.text:004026F4                 mov     ebx, eax
.text:004026F6                 mov     [ebp+24h], eax
.text:004026F9                 mov     [ebp+0], eax
.text:004026FC
.text:004026FC loc_4026FC:                             ; CODE XREF: sub_4025D0+F0↑j
.text:004026FC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402700                 jz      loc_403054
.text:00402706                 mov     esi, [esp+5Ch+arg_4]
.text:0040270A                 mov     eax, [esi+ebx*4]
.text:0040270D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402710                 jz      short loc_402737
.text:00402712
.text:00402712 loc_402712:                             ; CODE XREF: sub_4025D0+16D↓j
.text:00402712                 mov     edx, [ebp+18h]
.text:00402715                 test    edx, edx
.text:00402717                 jz      short loc_402730
.text:00402719                 mov     [ebp+0Ch], eax
.text:0040271C                 lea     edi, [ebx+1]
.text:0040271F                 mov     eax, 1
.text:00402724                 mov     [ebp+0], edi
.text:00402727
.text:00402727 loc_402727:                             ; CODE XREF: sub_4025D0+2D↑j
.text:00402727                                         ; sub_4025D0+165↓j ...
.text:00402727                 add     esp, 4Ch
.text:0040272A                 pop     ebx
.text:0040272B                 pop     esi
.text:0040272C                 pop     edi
.text:0040272D                 pop     ebp
.text:0040272E                 retn
.text:0040272E ; ---------------------------------------------------------------------------
.text:0040272F                 align 10h
.text:00402730
.text:00402730 loc_402730:                             ; CODE XREF: sub_4025D0+147↑j
.text:00402730                                         ; sub_4025D0+A8A↓j ...
.text:00402730                 mov     eax, 0FFFFFFFFh
.text:00402735                 jmp     short loc_402727
.text:00402737 ; ---------------------------------------------------------------------------
.text:00402737
.text:00402737 loc_402737:                             ; CODE XREF: sub_4025D0+140↑j
.text:00402737                 movzx   edx, byte ptr [eax+1]
.text:0040273B                 test    dl, dl
.text:0040273D                 jz      short loc_402712
.text:0040273F                 mov     ebx, [esp+5Ch+arg_C]
.text:00402743                 xor     ecx, ecx
.text:00402745                 test    ebx, ebx
.text:00402747                 jz      short loc_402752
.text:00402749                 cmp     dl, 2Dh ; '-'
.text:0040274C                 jz      loc_40304A
.text:00402752
.text:00402752 loc_402752:                             ; CODE XREF: sub_4025D0+177↑j
.text:00402752                                         ; sub_4025D0+A7F↓j
.text:00402752                 lea     esi, [ecx+eax+1]
.text:00402756                 mov     [ebp+14h], esi
.text:00402759                 lea     esi, [esi+0]
.text:00402760
.text:00402760 loc_402760:                             ; CODE XREF: sub_4025D0+AD↑j
.text:00402760                 mov     ecx, [esp+5Ch+arg_C]
.text:00402764                 test    ecx, ecx
.text:00402766                 jz      loc_402AF0
.text:0040276C                 mov     edx, [ebp+0]
.text:0040276F                 mov     edi, [esp+5Ch+arg_4]
.text:00402773                 mov     eax, [edi+edx*4]
.text:00402776                 movzx   edx, byte ptr [eax+1]
.text:0040277A                 cmp     dl, 2Dh ; '-'
.text:0040277D                 jz      short loc_402795
.text:0040277F                 mov     ebx, [esp+5Ch+arg_14]
.text:00402783                 test    ebx, ebx
.text:00402785                 jz      loc_402AF0
.text:0040278B                 cmp     byte ptr [eax+2], 0
.text:0040278F                 jz      loc_40302A
.text:00402795
.text:00402795 loc_402795:                             ; CODE XREF: sub_4025D0+1AD↑j
.text:00402795                                         ; sub_4025D0+A75↓j
.text:00402795                 mov     [esp+5Ch+var_18], 0
.text:0040279D                 mov     ecx, [ebp+14h]
.text:004027A0                 mov     [esp+5Ch+var_1C], 0
.text:004027A8                 mov     [esp+5Ch+var_20], 0
.text:004027B0                 mov     edi, ecx
.text:004027B2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:004027BA                 movzx   eax, byte ptr [ecx]
.text:004027BD                 test    al, al
.text:004027BF                 jz      short loc_4027DC
.text:004027C1                 cmp     al, 3Dh ; '='
.text:004027C3                 jz      short loc_4027DC
.text:004027C5                 lea     esi, [esi+0]
.text:004027C9                 lea     edi, [edi+0]
.text:004027D0
.text:004027D0 loc_4027D0:                             ; CODE XREF: sub_4025D0+20A↓j
.text:004027D0                 inc     edi
.text:004027D1                 movzx   eax, byte ptr [edi]
.text:004027D4                 test    al, al
.text:004027D6                 jz      short loc_4027DC
.text:004027D8                 cmp     al, 3Dh ; '='
.text:004027DA                 jnz     short loc_4027D0
.text:004027DC
.text:004027DC loc_4027DC:                             ; CODE XREF: sub_4025D0+1EF↑j
.text:004027DC                                         ; sub_4025D0+1F3↑j ...
.text:004027DC                 mov     [esp+5Ch+var_28], 0
.text:004027E4                 mov     esi, [esp+5Ch+arg_C]
.text:004027E8                 mov     ebx, [esi]
.text:004027EA                 test    ebx, ebx
.text:004027EC                 mov     edx, ebx
.text:004027EE                 jz      loc_402A10
.text:004027F4                 lea     esi, [esi+0]
.text:004027FA                 lea     edi, [edi+0]
.text:00402800
.text:00402800 loc_402800:                             ; CODE XREF: sub_4025D0+25E↓j
.text:00402800                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00402804                 mov     ebx, edi
.text:00402806                 sub     ebx, ecx
.text:00402808                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:0040280C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:0040280F                 call    strncmp
.text:00402814                 test    eax, eax
.text:00402816                 jz      loc_402FA6
.text:0040281C
.text:0040281C loc_40281C:                             ; CODE XREF: sub_4025D0+A0F↓j
.text:0040281C                                         ; sub_4025D0+A24↓j ...
.text:0040281C                 inc     [esp+5Ch+var_28]
.text:00402820                 add     esi, 10h
.text:00402823                 mov     ecx, [esi]
.text:00402825                 test    ecx, ecx
.text:00402827                 mov     edx, ecx
.text:00402829                 jz      short loc_402830
.text:0040282B                 mov     ecx, [ebp+14h]
.text:0040282E                 jmp     short loc_402800
.text:00402830 ; ---------------------------------------------------------------------------
.text:00402830
.text:00402830 loc_402830:                             ; CODE XREF: sub_4025D0+259↑j
.text:00402830                                         ; sub_4025D0+A55↓j
.text:00402830                 mov     esi, [esp+5Ch+var_20]
.text:00402834                 test    esi, esi
.text:00402836                 jz      short loc_402844
.text:00402838                 mov     edx, [esp+5Ch+var_1C]
.text:0040283C                 test    edx, edx
.text:0040283E                 jz      loc_402F50
.text:00402844
.text:00402844 loc_402844:                             ; CODE XREF: sub_4025D0+266↑j
.text:00402844                 mov     eax, [esp+5Ch+var_18]
.text:00402848                 test    eax, eax
.text:0040284A                 jz      loc_402A10
.text:00402850                 mov     ecx, [ebp+0]
.text:00402853                 lea     eax, [ecx+1]
.text:00402856                 mov     [ebp+0], eax
.text:00402859                 cmp     byte ptr [edi], 0
.text:0040285C                 jz      loc_402970
.text:00402862                 mov     ecx, [esp+5Ch+var_18]
.text:00402866                 mov     esi, [ecx+4]
.text:00402869                 test    esi, esi
.text:0040286B                 jz      short loc_4028B6
.text:0040286D                 lea     ebx, [edi+1]
.text:00402870                 mov     [ebp+0Ch], ebx
.text:00402873
.text:00402873 loc_402873:                             ; CODE XREF: sub_4025D0+3A8↓j
.text:00402873                                         ; sub_4025D0+3C4↓j
.text:00402873                 mov     ebx, [ebp+14h]
.text:00402876                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00402879                 call    strlen
.text:0040287E                 add     [ebp+14h], eax
.text:00402881                 mov     esi, [esp+5Ch+arg_10]
.text:00402885                 test    esi, esi
.text:00402887                 jz      short loc_402893
.text:00402889                 mov     ebp, [esp+5Ch+var_24]
.text:0040288D                 mov     ecx, [esp+5Ch+arg_10]
.text:00402891                 mov     [ecx], ebp
.text:00402893
.text:00402893 loc_402893:                             ; CODE XREF: sub_4025D0+2B7↑j
.text:00402893                 mov     eax, [esp+5Ch+var_18]
.text:00402897                 mov     ecx, [eax+8]
.text:0040289A                 test    ecx, ecx
.text:0040289C                 jnz     short loc_4028AA
.text:0040289E                 mov     ecx, [esp+5Ch+var_18]
.text:004028A2
.text:004028A2 loc_4028A2:                             ; CODE XREF: sub_4025D0+723↓j
.text:004028A2                 mov     eax, [ecx+0Ch]
.text:004028A5                 jmp     loc_402727
.text:004028AA ; ---------------------------------------------------------------------------
.text:004028AA
.text:004028AA loc_4028AA:                             ; CODE XREF: sub_4025D0+2CC↑j
.text:004028AA                                         ; sub_4025D0+719↓j
.text:004028AA                 mov     esi, [eax+0Ch]
.text:004028AD                 xor     eax, eax
.text:004028AF                 mov     [ecx], esi
.text:004028B1                 jmp     loc_402727
.text:004028B6 ; ---------------------------------------------------------------------------
.text:004028B6
.text:004028B6 loc_4028B6:                             ; CODE XREF: sub_4025D0+29B↑j
.text:004028B6                 mov     edi, [esp+5Ch+var_14]
.text:004028BA                 test    edi, edi
.text:004028BC                 jz      short loc_402910
.text:004028BE                 mov     esi, [esp+5Ch+arg_4]
.text:004028C2                 mov     edx, [esi+eax*4-4]
.text:004028C6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:004028CA                 jz      short loc_402932
.text:004028CC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:004028D3                 call    ds:libintl_gettext
.text:004028D9                 mov     edx, [esp+5Ch+var_18]
.text:004028DD                 mov     edi, [edx]
.text:004028DF                 mov     [esp+5Ch+var_4C], edi
.text:004028E3                 mov     ebx, [ebp+0]
.text:004028E6                 mov     edi, [esp+5Ch+arg_4]
.text:004028EA                 mov     ecx, [edi+ebx*4-4]
.text:004028EE                 movsx   esi, byte ptr [ecx]
.text:004028F1                 mov     ecx, ds:_iob
.text:004028F7                 add     ecx, 40h ; '@'
.text:004028FA                 mov     [esp+5Ch+var_50], esi
.text:004028FE                 mov     ebx, [edi]
.text:00402900                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402904                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402907                 mov     [esp+5Ch+MaxCount], ebx
.text:0040290B                 call    fprintf
.text:00402910
.text:00402910 loc_402910:                             ; CODE XREF: sub_4025D0+2EC↑j
.text:00402910                                         ; sub_4025D0+398↓j
.text:00402910                 mov     ecx, [ebp+14h]
.text:00402913                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402916                 call    strlen
.text:0040291B                 add     [ebp+14h], eax
.text:0040291E                 mov     eax, [esp+5Ch+var_18]
.text:00402922                 mov     esi, [eax+0Ch]
.text:00402925                 mov     [ebp+8], esi
.text:00402928
.text:00402928 loc_402928:                             ; CODE XREF: sub_4025D0+4E5↓j
.text:00402928                                         ; sub_4025D0+73E↓j ...
.text:00402928                 mov     eax, 3Fh ; '?'
.text:0040292D                 jmp     loc_402727
.text:00402932 ; ---------------------------------------------------------------------------
.text:00402932
.text:00402932 loc_402932:                             ; CODE XREF: sub_4025D0+2FA↑j
.text:00402932                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00402939                 call    ds:libintl_gettext
.text:0040293F                 mov     edx, [esp+5Ch+var_18]
.text:00402943                 mov     edi, [esp+5Ch+arg_4]
.text:00402947                 mov     ecx, ds:_iob
.text:0040294D                 mov     esi, [edx]
.text:0040294F                 add     ecx, 40h ; '@'
.text:00402952                 mov     [esp+5Ch+var_50], esi
.text:00402956                 mov     ebx, [edi]
.text:00402958                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040295C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040295F                 mov     [esp+5Ch+MaxCount], ebx
.text:00402963                 call    fprintf
.text:00402968                 jmp     short loc_402910
.text:00402968 ; ---------------------------------------------------------------------------
.text:0040296A                 align 10h
.text:00402970
.text:00402970 loc_402970:                             ; CODE XREF: sub_4025D0+28C↑j
.text:00402970                 mov     ebx, [esp+5Ch+var_18]
.text:00402974                 cmp     dword ptr [ebx+4], 1
.text:00402978                 jnz     loc_402873
.text:0040297E                 cmp     eax, [esp+5Ch+arg_0]
.text:00402982                 jge     short loc_402999
.text:00402984                 mov     ebx, [esp+5Ch+arg_4]
.text:00402988                 lea     edi, [ecx+2]
.text:0040298B                 mov     [ebp+0], edi
.text:0040298E                 mov     esi, [ebx+eax*4]
.text:00402991                 mov     [ebp+0Ch], esi
.text:00402994                 jmp     loc_402873
.text:00402999 ; ---------------------------------------------------------------------------
.text:00402999
.text:00402999 loc_402999:                             ; CODE XREF: sub_4025D0+3B2↑j
.text:00402999                 mov     edx, [esp+5Ch+var_14]
.text:0040299D                 test    edx, edx
.text:0040299F                 jnz     short loc_4029D0
.text:004029A1
.text:004029A1 loc_4029A1:                             ; CODE XREF: sub_4025D0+437↓j
.text:004029A1                 mov     edx, [ebp+14h]
.text:004029A4                 mov     [esp+5Ch+Str1], edx ; Str
.text:004029A7                 call    strlen
.text:004029AC                 add     [ebp+14h], eax
.text:004029AF                 mov     eax, [esp+5Ch+var_18]
.text:004029B3                 mov     edi, [eax+0Ch]
.text:004029B6                 mov     [ebp+8], edi
.text:004029B9
.text:004029B9 loc_4029B9:                             ; CODE XREF: sub_4025D0+7C2↓j
.text:004029B9                 mov     ebp, [esp+5Ch+Str]
.text:004029BD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004029C1                 setnz   bl
.text:004029C4                 movzx   esi, bl
.text:004029C7                 lea     eax, [esi+esi*4+3Ah]
.text:004029CB                 jmp     loc_402727
.text:004029D0 ; ---------------------------------------------------------------------------
.text:004029D0
.text:004029D0 loc_4029D0:                             ; CODE XREF: sub_4025D0+3CF↑j
.text:004029D0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004029D7                 call    ds:libintl_gettext
.text:004029DD                 mov     ecx, [ebp+0]
.text:004029E0                 mov     esi, [esp+5Ch+arg_4]
.text:004029E4                 mov     ebx, [esi+ecx*4-4]
.text:004029E8                 mov     ecx, ds:_iob
.text:004029EE                 mov     [esp+5Ch+var_50], ebx
.text:004029F2                 mov     edi, [esi]
.text:004029F4                 add     ecx, 40h ; '@'
.text:004029F7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004029FB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004029FE                 mov     [esp+5Ch+MaxCount], edi
.text:00402A02                 call    fprintf
.text:00402A07                 jmp     short loc_4029A1
.text:00402A07 ; ---------------------------------------------------------------------------
.text:00402A09                 align 10h
.text:00402A10
.text:00402A10 loc_402A10:                             ; CODE XREF: sub_4025D0+21E↑j
.text:00402A10                                         ; sub_4025D0+27A↑j
.text:00402A10                 mov     eax, [esp+5Ch+arg_14]
.text:00402A14                 test    eax, eax
.text:00402A16                 jz      short loc_402A46
.text:00402A18                 mov     ebx, [ebp+0]
.text:00402A1B                 mov     esi, [esp+5Ch+arg_4]
.text:00402A1F                 mov     edi, [esi+ebx*4]
.text:00402A22                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402A26                 jz      short loc_402A49
.text:00402A28                 mov     ecx, [ebp+14h]
.text:00402A2B                 mov     edx, [esp+5Ch+Str]
.text:00402A2F                 movsx   ebx, byte ptr [ecx]
.text:00402A32                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402A35                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00402A39                 call    strchr
.text:00402A3E                 test    eax, eax
.text:00402A40                 jnz     loc_402AF0
.text:00402A46
.text:00402A46 loc_402A46:                             ; CODE XREF: sub_4025D0+446↑j
.text:00402A46                 mov     ebx, [ebp+0]
.text:00402A49
.text:00402A49 loc_402A49:                             ; CODE XREF: sub_4025D0+456↑j
.text:00402A49                 mov     eax, [esp+5Ch+var_14]
.text:00402A4D                 test    eax, eax
.text:00402A4F                 jz      short loc_402AA1
.text:00402A51                 mov     esi, [esp+5Ch+arg_4]
.text:00402A55                 mov     edi, [esi+ebx*4]
.text:00402A58                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402A5C                 jz      short loc_402ABA
.text:00402A5E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00402A65                 call    ds:libintl_gettext
.text:00402A6B                 mov     edi, [ebp+14h]
.text:00402A6E                 mov     [esp+5Ch+var_4C], edi
.text:00402A72                 mov     ebx, [ebp+0]
.text:00402A75                 mov     edi, [esp+5Ch+arg_4]
.text:00402A79                 mov     esi, [edi+ebx*4]
.text:00402A7C                 movsx   ecx, byte ptr [esi]
.text:00402A7F                 mov     esi, ds:_iob
.text:00402A85                 add     esi, 40h ; '@'
.text:00402A88                 mov     [esp+5Ch+var_50], ecx
.text:00402A8C                 mov     ebx, [edi]
.text:00402A8E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402A92                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00402A95                 mov     [esp+5Ch+MaxCount], ebx
.text:00402A99                 call    fprintf
.text:00402A9E
.text:00402A9E loc_402A9E:                             ; CODE XREF: sub_4025D0+51D↓j
.text:00402A9E                 mov     ebx, [ebp+0]
.text:00402AA1
.text:00402AA1 loc_402AA1:                             ; CODE XREF: sub_4025D0+47F↑j
.text:00402AA1                 mov     dword ptr [ebp+14h], offset dword_402480
.text:00402AA8                 lea     edx, [ebx+1]
.text:00402AAB                 mov     [ebp+0], edx
.text:00402AAE
.text:00402AAE loc_402AAE:                             ; CODE XREF: sub_4025D0+999↓j
.text:00402AAE                 mov     dword ptr [ebp+8], 0
.text:00402AB5                 jmp     loc_402928
.text:00402ABA ; ---------------------------------------------------------------------------
.text:00402ABA
.text:00402ABA loc_402ABA:                             ; CODE XREF: sub_4025D0+48C↑j
.text:00402ABA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00402AC1                 call    ds:libintl_gettext
.text:00402AC7                 mov     ecx, [ebp+14h]
.text:00402ACA                 mov     edi, [esp+5Ch+arg_4]
.text:00402ACE                 mov     edx, ds:_iob
.text:00402AD4                 mov     [esp+5Ch+var_50], ecx
.text:00402AD8                 mov     ebx, [edi]
.text:00402ADA                 add     edx, 40h ; '@'
.text:00402ADD                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402AE1                 mov     [esp+5Ch+MaxCount], ebx
.text:00402AE5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402AE8                 call    fprintf
.text:00402AED                 jmp     short loc_402A9E
.text:00402AED ; ---------------------------------------------------------------------------
.text:00402AEF                 align 10h
.text:00402AF0
.text:00402AF0 loc_402AF0:                             ; CODE XREF: sub_4025D0+196↑j
.text:00402AF0                                         ; sub_4025D0+1B5↑j ...
.text:00402AF0                 mov     esi, [ebp+14h]
.text:00402AF3                 movzx   ebx, byte ptr [esi]
.text:00402AF6                 inc     esi
.text:00402AF7                 mov     [ebp+14h], esi
.text:00402AFA                 mov     ecx, [esp+5Ch+Str]
.text:00402AFE                 movsx   esi, bl
.text:00402B01                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402B05                 mov     edi, esi
.text:00402B07                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402B0A                 call    strchr
.text:00402B0F                 mov     ecx, [ebp+14h]
.text:00402B12                 cmp     byte ptr [ecx], 0
.text:00402B15                 jnz     short loc_402B1A
.text:00402B17                 inc     dword ptr [ebp+0]
.text:00402B1A
.text:00402B1A loc_402B1A:                             ; CODE XREF: sub_4025D0+545↑j
.text:00402B1A                 test    eax, eax
.text:00402B1C                 jz      loc_402F00
.text:00402B22                 cmp     bl, 3Ah ; ':'
.text:00402B25                 jz      loc_402F00
.text:00402B2B                 cmp     byte ptr [eax], 57h ; 'W'
.text:00402B2E                 jz      loc_402BE6
.text:00402B34                 movzx   edx, byte ptr [eax+1]
.text:00402B38
.text:00402B38 loc_402B38:                             ; CODE XREF: sub_4025D0+61D↓j
.text:00402B38                 cmp     dl, 3Ah ; ':'
.text:00402B3B                 jz      short loc_402B44
.text:00402B3D
.text:00402B3D loc_402B3D:                             ; CODE XREF: sub_4025D0+590↓j
.text:00402B3D                 mov     eax, esi
.text:00402B3F                 jmp     loc_402727
.text:00402B44 ; ---------------------------------------------------------------------------
.text:00402B44
.text:00402B44 loc_402B44:                             ; CODE XREF: sub_4025D0+56B↑j
.text:00402B44                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402B48                 jz      loc_402BD1
.text:00402B4E                 cmp     byte ptr [ecx], 0
.text:00402B51                 jz      short loc_402B62
.text:00402B53
.text:00402B53 loc_402B53:                             ; CODE XREF: sub_4025D0+604↓j
.text:00402B53                 inc     dword ptr [ebp+0]
.text:00402B56                 mov     [ebp+0Ch], ecx
.text:00402B59
.text:00402B59 loc_402B59:                             ; CODE XREF: sub_4025D0+5AB↓j
.text:00402B59                                         ; sub_4025D0+5C6↓j ...
.text:00402B59                 mov     dword ptr [ebp+14h], 0
.text:00402B60                 jmp     short loc_402B3D
.text:00402B62 ; ---------------------------------------------------------------------------
.text:00402B62
.text:00402B62 loc_402B62:                             ; CODE XREF: sub_4025D0+581↑j
.text:00402B62                 mov     ecx, [ebp+0]
.text:00402B65                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402B69                 jz      short loc_402B7D
.text:00402B6B                 mov     eax, [esp+5Ch+arg_4]
.text:00402B6F                 lea     edx, [ecx+1]
.text:00402B72                 mov     [ebp+0], edx
.text:00402B75                 mov     ebx, [eax+ecx*4]
.text:00402B78                 mov     [ebp+0Ch], ebx
.text:00402B7B                 jmp     short loc_402B59
.text:00402B7D ; ---------------------------------------------------------------------------
.text:00402B7D
.text:00402B7D loc_402B7D:                             ; CODE XREF: sub_4025D0+599↑j
.text:00402B7D                 mov     ecx, [esp+5Ch+var_14]
.text:00402B81                 test    ecx, ecx
.text:00402B83                 jnz     short loc_402B9F
.text:00402B85
.text:00402B85 loc_402B85:                             ; CODE XREF: sub_4025D0+5FF↓j
.text:00402B85                 mov     [ebp+8], edi
.text:00402B88                 mov     edi, [esp+5Ch+Str]
.text:00402B8C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00402B8F                 jz      short loc_402B98
.text:00402B91                 mov     esi, 3Fh ; '?'
.text:00402B96                 jmp     short loc_402B59
.text:00402B98 ; ---------------------------------------------------------------------------
.text:00402B98
.text:00402B98 loc_402B98:                             ; CODE XREF: sub_4025D0+5BF↑j
.text:00402B98                 mov     esi, 3Ah ; ':'
.text:00402B9D                 jmp     short loc_402B59
.text:00402B9F ; ---------------------------------------------------------------------------
.text:00402B9F
.text:00402B9F loc_402B9F:                             ; CODE XREF: sub_4025D0+5B3↑j
.text:00402B9F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402BA6                 call    ds:libintl_gettext
.text:00402BAC                 mov     [esp+5Ch+var_50], edi
.text:00402BB0                 mov     ebx, [esp+5Ch+arg_4]
.text:00402BB4                 mov     edx, ds:_iob
.text:00402BBA                 mov     esi, [ebx]
.text:00402BBC                 add     edx, 40h ; '@'
.text:00402BBF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402BC3                 mov     [esp+5Ch+MaxCount], esi
.text:00402BC7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402BCA                 call    fprintf
.text:00402BCF                 jmp     short loc_402B85
.text:00402BD1 ; ---------------------------------------------------------------------------
.text:00402BD1
.text:00402BD1 loc_402BD1:                             ; CODE XREF: sub_4025D0+578↑j
.text:00402BD1                 cmp     byte ptr [ecx], 0
.text:00402BD4                 jnz     loc_402B53
.text:00402BDA                 mov     dword ptr [ebp+0Ch], 0
.text:00402BE1                 jmp     loc_402B59
.text:00402BE6 ; ---------------------------------------------------------------------------
.text:00402BE6
.text:00402BE6 loc_402BE6:                             ; CODE XREF: sub_4025D0+55E↑j
.text:00402BE6                 movzx   edx, byte ptr [eax+1]
.text:00402BEA                 cmp     dl, 3Bh ; ';'
.text:00402BED                 jnz     loc_402B38
.text:00402BF3                 mov     [esp+5Ch+var_2C], 0
.text:00402BFB                 mov     [esp+5Ch+var_30], 0
.text:00402C03                 mov     [esp+5Ch+var_34], 0
.text:00402C0B                 mov     [esp+5Ch+var_38], 0
.text:00402C13                 cmp     byte ptr [ecx], 0
.text:00402C16                 jz      loc_402E8B
.text:00402C1C                 inc     dword ptr [ebp+0]
.text:00402C1F                 mov     [ebp+0Ch], ecx
.text:00402C22
.text:00402C22 loc_402C22:                             ; CODE XREF: sub_4025D0+8D4↓j
.text:00402C22                 mov     edi, [ebp+0Ch]
.text:00402C25                 mov     [ebp+14h], edi
.text:00402C28                 movzx   eax, byte ptr [edi]
.text:00402C2B                 test    al, al
.text:00402C2D                 jz      short loc_402C3F
.text:00402C2F                 cmp     al, 3Dh ; '='
.text:00402C31                 jz      short loc_402C3F
.text:00402C33
.text:00402C33 loc_402C33:                             ; CODE XREF: sub_4025D0+66D↓j
.text:00402C33                 inc     edi
.text:00402C34                 movzx   eax, byte ptr [edi]
.text:00402C37                 test    al, al
.text:00402C39                 jz      short loc_402C3F
.text:00402C3B                 cmp     al, 3Dh ; '='
.text:00402C3D                 jnz     short loc_402C33
.text:00402C3F
.text:00402C3F loc_402C3F:                             ; CODE XREF: sub_4025D0+65D↑j
.text:00402C3F                                         ; sub_4025D0+661↑j ...
.text:00402C3F                 mov     [esp+5Ch+var_3C], 0
.text:00402C47                 mov     esi, [esp+5Ch+arg_C]
.text:00402C4B                 mov     eax, [esi]
.text:00402C4D                 test    eax, eax
.text:00402C4F                 jz      loc_402DD0
.text:00402C55                 mov     ecx, eax
.text:00402C57
.text:00402C57 loc_402C57:                             ; CODE XREF: sub_4025D0+6B3↓j
.text:00402C57                 mov     ebx, [ebp+14h]
.text:00402C5A                 mov     eax, edi
.text:00402C5C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:00402C5F                 sub     eax, ebx
.text:00402C61                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402C65                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402C69                 call    strncmp
.text:00402C6E                 test    eax, eax
.text:00402C70                 jz      loc_402E37
.text:00402C76
.text:00402C76 loc_402C76:                             ; CODE XREF: sub_4025D0+88C↓j
.text:00402C76                                         ; sub_4025D0+89D↓j
.text:00402C76                 inc     [esp+5Ch+var_3C]
.text:00402C7A                 add     esi, 10h
.text:00402C7D                 mov     edx, [esi]
.text:00402C7F                 test    edx, edx
.text:00402C81                 mov     ecx, edx
.text:00402C83                 jnz     short loc_402C57
.text:00402C85
.text:00402C85 loc_402C85:                             ; CODE XREF: sub_4025D0+8B6↓j
.text:00402C85                 mov     esi, [esp+5Ch+var_34]
.text:00402C89                 test    esi, esi
.text:00402C8B                 jz      short loc_402C99
.text:00402C8D                 mov     ebx, [esp+5Ch+var_30]
.text:00402C91                 test    ebx, ebx
.text:00402C93                 jz      loc_402DE1
.text:00402C99
.text:00402C99 loc_402C99:                             ; CODE XREF: sub_4025D0+6BB↑j
.text:00402C99                 mov     esi, [esp+5Ch+var_2C]
.text:00402C9D                 test    esi, esi
.text:00402C9F                 jz      loc_402DD0
.text:00402CA5                 cmp     byte ptr [edi], 0
.text:00402CA8                 jz      loc_402D50
.text:00402CAE                 mov     ecx, [esp+5Ch+var_2C]
.text:00402CB2                 mov     ebx, [ecx+4]
.text:00402CB5                 test    ebx, ebx
.text:00402CB7                 jz      short loc_402CF8
.text:00402CB9                 lea     edx, [edi+1]
.text:00402CBC                 mov     [ebp+0Ch], edx
.text:00402CBF
.text:00402CBF loc_402CBF:                             ; CODE XREF: sub_4025D0+788↓j
.text:00402CBF                                         ; sub_4025D0+7A7↓j
.text:00402CBF                 mov     edi, [ebp+14h]
.text:00402CC2                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402CC5                 call    strlen
.text:00402CCA                 add     [ebp+14h], eax
.text:00402CCD                 mov     eax, [esp+5Ch+arg_10]
.text:00402CD1                 test    eax, eax
.text:00402CD3                 jz      short loc_402CE0
.text:00402CD5                 mov     edx, [esp+5Ch+var_38]
.text:00402CD9                 mov     ebp, [esp+5Ch+arg_10]
.text:00402CDD                 mov     [ebp+0], edx
.text:00402CE0
.text:00402CE0 loc_402CE0:                             ; CODE XREF: sub_4025D0+703↑j
.text:00402CE0                 mov     eax, [esp+5Ch+var_2C]
.text:00402CE4                 mov     ecx, [eax+8]
.text:00402CE7                 test    ecx, ecx
.text:00402CE9                 jnz     loc_4028AA
.text:00402CEF                 mov     ecx, [esp+5Ch+var_2C]
.text:00402CF3                 jmp     loc_4028A2
.text:00402CF8 ; ---------------------------------------------------------------------------
.text:00402CF8
.text:00402CF8 loc_402CF8:                             ; CODE XREF: sub_4025D0+6E7↑j
.text:00402CF8                 mov     eax, [esp+5Ch+var_14]
.text:00402CFC                 test    eax, eax
.text:00402CFE                 jnz     short loc_402D13
.text:00402D00
.text:00402D00 loc_402D00:                             ; CODE XREF: sub_4025D0+779↓j
.text:00402D00                 mov     ecx, [ebp+14h]
.text:00402D03                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402D06                 call    strlen
.text:00402D0B                 add     [ebp+14h], eax
.text:00402D0E                 jmp     loc_402928
.text:00402D13 ; ---------------------------------------------------------------------------
.text:00402D13
.text:00402D13 loc_402D13:                             ; CODE XREF: sub_4025D0+72E↑j
.text:00402D13                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:00402D1A                 call    ds:libintl_gettext
.text:00402D20                 mov     edx, [esp+5Ch+var_2C]
.text:00402D24                 mov     ebx, [esp+5Ch+arg_4]
.text:00402D28                 mov     edi, [edx]
.text:00402D2A                 mov     [esp+5Ch+var_50], edi
.text:00402D2E                 mov     edi, ds:_iob
.text:00402D34                 mov     esi, [ebx]
.text:00402D36                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402D3A                 add     edi, 40h ; '@'
.text:00402D3D                 mov     [esp+5Ch+MaxCount], esi
.text:00402D41                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402D44                 call    fprintf
.text:00402D49                 jmp     short loc_402D00
.text:00402D49 ; ---------------------------------------------------------------------------
.text:00402D4B                 align 10h
.text:00402D50
.text:00402D50 loc_402D50:                             ; CODE XREF: sub_4025D0+6D8↑j
.text:00402D50                 mov     esi, [esp+5Ch+var_2C]
.text:00402D54                 cmp     dword ptr [esi+4], 1
.text:00402D58                 jnz     loc_402CBF
.text:00402D5E                 mov     ecx, [ebp+0]
.text:00402D61                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402D65                 jge     short loc_402D7C
.text:00402D67                 mov     eax, [esp+5Ch+arg_4]
.text:00402D6B                 lea     ebx, [ecx+1]
.text:00402D6E                 mov     [ebp+0], ebx
.text:00402D71                 mov     edi, [eax+ecx*4]
.text:00402D74                 mov     [ebp+0Ch], edi
.text:00402D77                 jmp     loc_402CBF
.text:00402D7C ; ---------------------------------------------------------------------------
.text:00402D7C
.text:00402D7C loc_402D7C:                             ; CODE XREF: sub_4025D0+795↑j
.text:00402D7C                 mov     edx, [esp+5Ch+var_14]
.text:00402D80                 test    edx, edx
.text:00402D82                 jnz     short loc_402D97
.text:00402D84
.text:00402D84 loc_402D84:                             ; CODE XREF: sub_4025D0+7FE↓j
.text:00402D84                 mov     edx, [ebp+14h]
.text:00402D87                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402D8A                 call    strlen
.text:00402D8F                 add     [ebp+14h], eax
.text:00402D92                 jmp     loc_4029B9
.text:00402D97 ; ---------------------------------------------------------------------------
.text:00402D97
.text:00402D97 loc_402D97:                             ; CODE XREF: sub_4025D0+7B2↑j
.text:00402D97                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402D9E                 call    ds:libintl_gettext
.text:00402DA4                 mov     ecx, [ebp+0]
.text:00402DA7                 mov     ebx, [esp+5Ch+arg_4]
.text:00402DAB                 mov     edi, [ebx+ecx*4-4]
.text:00402DAF                 mov     ecx, ds:_iob
.text:00402DB5                 mov     [esp+5Ch+var_50], edi
.text:00402DB9                 mov     esi, [ebx]
.text:00402DBB                 add     ecx, 40h ; '@'
.text:00402DBE                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402DC2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402DC5                 mov     [esp+5Ch+MaxCount], esi
.text:00402DC9                 call    fprintf
.text:00402DCE                 jmp     short loc_402D84
.text:00402DD0 ; ---------------------------------------------------------------------------
.text:00402DD0
.text:00402DD0 loc_402DD0:                             ; CODE XREF: sub_4025D0+67F↑j
.text:00402DD0                                         ; sub_4025D0+6CF↑j
.text:00402DD0                 mov     dword ptr [ebp+14h], 0
.text:00402DD7                 mov     eax, 57h ; 'W'
.text:00402DDC                 jmp     loc_402727
.text:00402DE1 ; ---------------------------------------------------------------------------
.text:00402DE1
.text:00402DE1 loc_402DE1:                             ; CODE XREF: sub_4025D0+6C3↑j
.text:00402DE1                 mov     edi, [esp+5Ch+var_14]
.text:00402DE5                 test    edi, edi
.text:00402DE7                 jnz     short loc_402DFF
.text:00402DE9
.text:00402DE9 loc_402DE9:                             ; CODE XREF: sub_4025D0+865↓j
.text:00402DE9                 mov     edx, [ebp+14h]
.text:00402DEC                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402DEF                 call    strlen
.text:00402DF4                 add     [ebp+14h], eax
.text:00402DF7                 inc     dword ptr [ebp+0]
.text:00402DFA                 jmp     loc_402928
.text:00402DFF ; ---------------------------------------------------------------------------
.text:00402DFF
.text:00402DFF loc_402DFF:                             ; CODE XREF: sub_4025D0+817↑j
.text:00402DFF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402E06                 call    ds:libintl_gettext
.text:00402E0C                 mov     ecx, [ebp+0]
.text:00402E0F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402E13                 mov     edi, [ebx+ecx*4]
.text:00402E16                 mov     ecx, ds:_iob
.text:00402E1C                 mov     [esp+5Ch+var_50], edi
.text:00402E20                 mov     esi, [ebx]
.text:00402E22                 add     ecx, 40h ; '@'
.text:00402E25                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402E29                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402E2C                 mov     [esp+5Ch+MaxCount], esi
.text:00402E30                 call    fprintf
.text:00402E35                 jmp     short loc_402DE9
.text:00402E37 ; ---------------------------------------------------------------------------
.text:00402E37
.text:00402E37 loc_402E37:                             ; CODE XREF: sub_4025D0+6A0↑j
.text:00402E37                 mov     edx, [ebp+14h]
.text:00402E3A                 mov     ebx, edi
.text:00402E3C                 mov     ecx, [esi]
.text:00402E3E                 sub     ebx, edx
.text:00402E40                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402E43                 call    strlen
.text:00402E48                 cmp     ebx, eax
.text:00402E4A                 jz      short loc_402E72
.text:00402E4C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402E50                 test    ebx, ebx
.text:00402E52                 jz      short loc_402E61
.text:00402E54                 mov     [esp+5Ch+var_34], 1
.text:00402E5C                 jmp     loc_402C76
.text:00402E61 ; ---------------------------------------------------------------------------
.text:00402E61
.text:00402E61 loc_402E61:                             ; CODE XREF: sub_4025D0+882↑j
.text:00402E61                 mov     [esp+5Ch+var_2C], esi
.text:00402E65                 mov     ecx, [esp+5Ch+var_3C]
.text:00402E69                 mov     [esp+5Ch+var_38], ecx
.text:00402E6D                 jmp     loc_402C76
.text:00402E72 ; ---------------------------------------------------------------------------
.text:00402E72
.text:00402E72 loc_402E72:                             ; CODE XREF: sub_4025D0+87A↑j
.text:00402E72                 mov     [esp+5Ch+var_2C], esi
.text:00402E76                 mov     eax, [esp+5Ch+var_3C]
.text:00402E7A                 mov     [esp+5Ch+var_30], 1
.text:00402E82                 mov     [esp+5Ch+var_38], eax
.text:00402E86                 jmp     loc_402C85
.text:00402E8B ; ---------------------------------------------------------------------------
.text:00402E8B
.text:00402E8B loc_402E8B:                             ; CODE XREF: sub_4025D0+646↑j
.text:00402E8B                 mov     edx, [ebp+0]
.text:00402E8E                 cmp     edx, [esp+5Ch+arg_0]
.text:00402E92                 jz      short loc_402EA9
.text:00402E94                 mov     ebx, [esp+5Ch+arg_4]
.text:00402E98                 lea     esi, [edx+1]
.text:00402E9B                 mov     [ebp+0], esi
.text:00402E9E                 mov     edi, [ebx+edx*4]
.text:00402EA1                 mov     [ebp+0Ch], edi
.text:00402EA4                 jmp     loc_402C22
.text:00402EA9 ; ---------------------------------------------------------------------------
.text:00402EA9
.text:00402EA9 loc_402EA9:                             ; CODE XREF: sub_4025D0+8C2↑j
.text:00402EA9                 mov     edi, [esp+5Ch+var_14]
.text:00402EAD                 test    edi, edi
.text:00402EAF                 jnz     short loc_402ECC
.text:00402EB1
.text:00402EB1 loc_402EB1:                             ; CODE XREF: sub_4025D0+92C↓j
.text:00402EB1                 mov     [ebp+8], esi
.text:00402EB4                 mov     ebp, [esp+5Ch+Str]
.text:00402EB8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402EBC                 jz      short loc_402EC8
.text:00402EBE                 mov     bl, 3Fh ; '?'
.text:00402EC0
.text:00402EC0 loc_402EC0:                             ; CODE XREF: sub_4025D0+8FA↓j
.text:00402EC0                 movsx   eax, bl
.text:00402EC3                 jmp     loc_402727
.text:00402EC8 ; ---------------------------------------------------------------------------
.text:00402EC8
.text:00402EC8 loc_402EC8:                             ; CODE XREF: sub_4025D0+8EC↑j
.text:00402EC8                 mov     bl, 3Ah ; ':'
.text:00402ECA                 jmp     short loc_402EC0
.text:00402ECC ; ---------------------------------------------------------------------------
.text:00402ECC
.text:00402ECC loc_402ECC:                             ; CODE XREF: sub_4025D0+8DF↑j
.text:00402ECC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402ED3                 call    ds:libintl_gettext
.text:00402ED9                 mov     [esp+5Ch+var_50], esi
.text:00402EDD                 mov     edx, [esp+5Ch+arg_4]
.text:00402EE1                 mov     ecx, ds:_iob
.text:00402EE7                 mov     ebx, [edx]
.text:00402EE9                 add     ecx, 40h ; '@'
.text:00402EEC                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402EF0                 mov     [esp+5Ch+MaxCount], ebx
.text:00402EF4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402EF7                 call    fprintf
.text:00402EFC                 jmp     short loc_402EB1
.text:00402EFC ; ---------------------------------------------------------------------------
.text:00402EFE                 align 10h
.text:00402F00
.text:00402F00 loc_402F00:                             ; CODE XREF: sub_4025D0+54C↑j
.text:00402F00                                         ; sub_4025D0+555↑j
.text:00402F00                 mov     eax, [esp+5Ch+var_14]
.text:00402F04                 test    eax, eax
.text:00402F06                 jz      short loc_402F3F
.text:00402F08                 mov     ebx, [ebp+1Ch]
.text:00402F0B                 test    ebx, ebx
.text:00402F0D                 jz      short loc_402F47
.text:00402F0F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402F16
.text:00402F16 loc_402F16:                             ; CODE XREF: sub_4025D0+97E↓j
.text:00402F16                 call    ds:libintl_gettext
.text:00402F1C                 mov     [esp+5Ch+var_50], esi
.text:00402F20                 mov     ebx, [esp+5Ch+arg_4]
.text:00402F24                 mov     edx, ds:_iob
.text:00402F2A                 mov     esi, [ebx]
.text:00402F2C                 add     edx, 40h ; '@'
.text:00402F2F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402F33                 mov     [esp+5Ch+MaxCount], esi
.text:00402F37                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402F3A                 call    fprintf
.text:00402F3F
.text:00402F3F loc_402F3F:                             ; CODE XREF: sub_4025D0+936↑j
.text:00402F3F                 mov     [ebp+8], edi
.text:00402F42                 jmp     loc_402928
.text:00402F47 ; ---------------------------------------------------------------------------
.text:00402F47
.text:00402F47 loc_402F47:                             ; CODE XREF: sub_4025D0+93D↑j
.text:00402F47                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00402F4E                 jmp     short loc_402F16
.text:00402F50 ; ---------------------------------------------------------------------------
.text:00402F50
.text:00402F50 loc_402F50:                             ; CODE XREF: sub_4025D0+26E↑j
.text:00402F50                 mov     edi, [esp+5Ch+var_14]
.text:00402F54                 test    edi, edi
.text:00402F56                 jnz     short loc_402F6E
.text:00402F58
.text:00402F58 loc_402F58:                             ; CODE XREF: sub_4025D0+9D4↓j
.text:00402F58                 mov     edx, [ebp+14h]
.text:00402F5B                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402F5E                 call    strlen
.text:00402F63                 add     [ebp+14h], eax
.text:00402F66                 inc     dword ptr [ebp+0]
.text:00402F69                 jmp     loc_402AAE
.text:00402F6E ; ---------------------------------------------------------------------------
.text:00402F6E
.text:00402F6E loc_402F6E:                             ; CODE XREF: sub_4025D0+986↑j
.text:00402F6E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402F75                 call    ds:libintl_gettext
.text:00402F7B                 mov     ebx, [ebp+0]
.text:00402F7E                 mov     edi, [esp+5Ch+arg_4]
.text:00402F82                 mov     ecx, [edi+ebx*4]
.text:00402F85                 mov     ebx, ds:_iob
.text:00402F8B                 mov     [esp+5Ch+var_50], ecx
.text:00402F8F                 mov     esi, [edi]
.text:00402F91                 add     ebx, 40h ; '@'
.text:00402F94                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402F98                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00402F9B                 mov     [esp+5Ch+MaxCount], esi
.text:00402F9F                 call    fprintf
.text:00402FA4                 jmp     short loc_402F58
.text:00402FA6 ; ---------------------------------------------------------------------------
.text:00402FA6
.text:00402FA6 loc_402FA6:                             ; CODE XREF: sub_4025D0+246↑j
.text:00402FA6                 mov     ecx, [ebp+14h]
.text:00402FA9                 mov     ebx, edi
.text:00402FAB                 mov     edx, [esi]
.text:00402FAD                 sub     ebx, ecx
.text:00402FAF                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402FB2                 call    strlen
.text:00402FB7                 cmp     ebx, eax
.text:00402FB9                 jz      short loc_403011
.text:00402FBB                 mov     ebx, [esp+5Ch+var_18]
.text:00402FBF                 test    ebx, ebx
.text:00402FC1                 jz      short loc_403000
.text:00402FC3                 mov     edx, [esp+5Ch+arg_14]
.text:00402FC7                 test    edx, edx
.text:00402FC9                 jnz     short loc_402FD7
.text:00402FCB                 mov     ecx, [esp+5Ch+var_18]
.text:00402FCF                 mov     ebx, [esi+4]
.text:00402FD2                 cmp     [ecx+4], ebx
.text:00402FD5                 jz      short loc_402FE4
.text:00402FD7
.text:00402FD7 loc_402FD7:                             ; CODE XREF: sub_4025D0+9F9↑j
.text:00402FD7                                         ; sub_4025D0+A1A↓j ...
.text:00402FD7                 mov     [esp+5Ch+var_20], 1
.text:00402FDF                 jmp     loc_40281C
.text:00402FE4 ; ---------------------------------------------------------------------------
.text:00402FE4
.text:00402FE4 loc_402FE4:                             ; CODE XREF: sub_4025D0+A05↑j
.text:00402FE4                 mov     edx, [esi+8]
.text:00402FE7                 cmp     [ecx+8], edx
.text:00402FEA                 jnz     short loc_402FD7
.text:00402FEC                 mov     ebx, [esi+0Ch]
.text:00402FEF                 cmp     [ecx+0Ch], ebx
.text:00402FF2                 jnz     short loc_402FD7
.text:00402FF4                 jmp     loc_40281C
.text:00402FF4 ; ---------------------------------------------------------------------------
.text:00402FF9                 align 10h
.text:00403000
.text:00403000 loc_403000:                             ; CODE XREF: sub_4025D0+9F1↑j
.text:00403000                 mov     [esp+5Ch+var_18], esi
.text:00403004                 mov     eax, [esp+5Ch+var_28]
.text:00403008                 mov     [esp+5Ch+var_24], eax
.text:0040300C                 jmp     loc_40281C
.text:00403011 ; ---------------------------------------------------------------------------
.text:00403011
.text:00403011 loc_403011:                             ; CODE XREF: sub_4025D0+9E9↑j
.text:00403011                 mov     [esp+5Ch+var_18], esi
.text:00403015                 mov     ecx, [esp+5Ch+var_28]
.text:00403019                 mov     [esp+5Ch+var_1C], 1
.text:00403021                 mov     [esp+5Ch+var_24], ecx
.text:00403025                 jmp     loc_402830
.text:0040302A ; ---------------------------------------------------------------------------
.text:0040302A
.text:0040302A loc_40302A:                             ; CODE XREF: sub_4025D0+1BF↑j
.text:0040302A                 mov     eax, [esp+5Ch+Str]
.text:0040302E                 movsx   esi, dl
.text:00403031                 mov     [esp+5Ch+Str2], esi ; Val
.text:00403035                 mov     [esp+5Ch+Str1], eax ; Str
.text:00403038                 call    strchr
.text:0040303D                 test    eax, eax
.text:0040303F                 jnz     loc_402AF0
.text:00403045                 jmp     loc_402795
.text:0040304A ; ---------------------------------------------------------------------------
.text:0040304A
.text:0040304A loc_40304A:                             ; CODE XREF: sub_4025D0+17C↑j
.text:0040304A                 mov     ecx, 1
.text:0040304F                 jmp     loc_402752
.text:00403054 ; ---------------------------------------------------------------------------
.text:00403054
.text:00403054 loc_403054:                             ; CODE XREF: sub_4025D0+D4↑j
.text:00403054                                         ; sub_4025D0+130↑j
.text:00403054                 mov     eax, [ebp+20h]
.text:00403057                 cmp     eax, [ebp+24h]
.text:0040305A                 jz      loc_402730
.text:00403060                 mov     [ebp+0], eax
.text:00403063                 jmp     loc_402730
.text:00403068 ; ---------------------------------------------------------------------------
.text:00403068
.text:00403068 loc_403068:                             ; CODE XREF: sub_4025D0+FE↑j
.text:00403068                 mov     [ebp+20h], eax
.text:0040306B                 jmp     loc_4026F0
.text:00403070 ; ---------------------------------------------------------------------------
.text:00403070
.text:00403070 loc_403070:                             ; CODE XREF: sub_4025D0+CA↑j
.text:00403070                 mov     edx, [ebp+20h]
.text:00403073                 mov     eax, [ebp+24h]
.text:00403076                 cmp     edx, eax
.text:00403078                 jz      short loc_4030F0
.text:0040307A                 cmp     eax, ebx
.text:0040307C                 jz      short loc_403091
.text:0040307E                 mov     [esp+5Ch+Str2], ebp
.text:00403082                 mov     ebx, [esp+5Ch+arg_4]
.text:00403086                 mov     [esp+5Ch+Str1], ebx
.text:00403089                 call    sub_403280
.text:0040308E                 mov     ebx, [ebp+0]
.text:00403091
.text:00403091 loc_403091:                             ; CODE XREF: sub_4025D0+AAC↑j
.text:00403091                                         ; sub_4025D0+B22↓j ...
.text:00403091                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403095                 jge     short loc_4030E0
.text:00403097                 mov     esi, [esp+5Ch+arg_4]
.text:0040309B                 mov     eax, [esi+ebx*4]
.text:0040309E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004030A1                 jz      short loc_4030E8
.text:004030A3                 lea     esi, [esi+0]
.text:004030A9                 lea     edi, [edi+0]
.text:004030B0
.text:004030B0 loc_4030B0:                             ; CODE XREF: sub_4025D0+AFC↓j
.text:004030B0                                         ; sub_4025D0+B1C↓j
.text:004030B0                 lea     eax, [ebx+1]
.text:004030B3                 mov     ebx, eax
.text:004030B5                 mov     [ebp+0], eax
.text:004030B8                 cmp     eax, [esp+5Ch+arg_0]
.text:004030BC                 jge     short loc_4030E0
.text:004030BE                 mov     edi, [esp+5Ch+arg_4]
.text:004030C2                 mov     edx, [edi+eax*4]
.text:004030C5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:004030C8                 jz      short loc_4030D0
.text:004030CA
.text:004030CA loc_4030CA:                             ; CODE XREF: sub_4025D0+B04↓j
.text:004030CA                 mov     ebx, eax
.text:004030CC                 jmp     short loc_4030B0
.text:004030CC ; ---------------------------------------------------------------------------
.text:004030CE                 align 10h
.text:004030D0
.text:004030D0 loc_4030D0:                             ; CODE XREF: sub_4025D0+AF8↑j
.text:004030D0                 cmp     byte ptr [edx+1], 0
.text:004030D4                 jz      short loc_4030CA
.text:004030D6                 lea     esi, [esi+0]
.text:004030D9                 lea     edi, [edi+0]
.text:004030E0
.text:004030E0 loc_4030E0:                             ; CODE XREF: sub_4025D0+AC5↑j
.text:004030E0                                         ; sub_4025D0+AEC↑j ...
.text:004030E0                 mov     [ebp+24h], ebx
.text:004030E3                 jmp     loc_4026A0
.text:004030E8 ; ---------------------------------------------------------------------------
.text:004030E8
.text:004030E8 loc_4030E8:                             ; CODE XREF: sub_4025D0+AD1↑j
.text:004030E8                 cmp     byte ptr [eax+1], 0
.text:004030EC                 jz      short loc_4030B0
.text:004030EE                 jmp     short loc_4030E0
.text:004030F0 ; ---------------------------------------------------------------------------
.text:004030F0
.text:004030F0 loc_4030F0:                             ; CODE XREF: sub_4025D0+AA8↑j
.text:004030F0                 cmp     edx, ebx
.text:004030F2                 jz      short loc_403091
.text:004030F4                 mov     [ebp+20h], ebx
.text:004030F7                 jmp     short loc_403091
.text:004030F9 ; ---------------------------------------------------------------------------
.text:004030F9
.text:004030F9 loc_4030F9:                             ; CODE XREF: sub_4025D0+88↑j
.text:004030F9                 mov     dword ptr [ebp+18h], 0
.text:00403100                 mov     esi, [esp+5Ch+Str]
.text:00403104
.text:00403104 loc_403104:                             ; CODE XREF: sub_4025D0+B49↓j
.text:00403104                 inc     esi
.text:00403105                 jmp     loc_402668
.text:00403105 ; ---------------------------------------------------------------------------
.text:0040310A                 align 10h
.text:00403110
.text:00403110 loc_403110:                             ; CODE XREF: sub_4025D0+80↑j
.text:00403110                 mov     dword ptr [ebp+18h], 2
.text:00403117                 mov     esi, ecx
.text:00403119                 jmp     short loc_403104
.text:00403119 ; ---------------------------------------------------------------------------
.text:0040311B                 align 10h
.text:00403120
.text:00403120 loc_403120:                             ; CODE XREF: sub_4025D0+69↑j
.text:00403120                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00403127                 call    getenv
.text:0040312C                 test    eax, eax
.text:0040312E                 jz      loc_402644
.text:00403134                 jmp     loc_40263F
.text:00403134 ; ---------------------------------------------------------------------------
.text:00403139                 align 10h
.text:00403140
.text:00403140 loc_403140:                             ; CODE XREF: sub_4025D0+3F↑j
.text:00403140                 mov     dword ptr [ebp+0], 1
.text:00403147                 mov     ebx, 1
.text:0040314C                 jmp     loc_402620
.text:0040314C sub_4025D0      endp
.text:0040314C
.text:00403151 ; ---------------------------------------------------------------------------
.text:00403151                 jmp     short sub_403160
.text:00403151 ; ---------------------------------------------------------------------------
.text:00403153                 align 10h
.text:00403160
.text:00403160 ; =============== S U B R O U T I N E =======================================
.text:00403160
.text:00403160
.text:00403160 ; int __cdecl sub_403160(int, int, char *, int, int, int, int)
.text:00403160 sub_403160      proc near               ; CODE XREF: .text:00403151↑j
.text:00403160                                         ; sub_403CA0+3A↓p ...
.text:00403160
.text:00403160 var_2C          = dword ptr -2Ch
.text:00403160 var_28          = dword ptr -28h
.text:00403160 Str             = dword ptr -24h
.text:00403160 var_20          = dword ptr -20h
.text:00403160 var_1C          = dword ptr -1Ch
.text:00403160 var_18          = dword ptr -18h
.text:00403160 var_14          = dword ptr -14h
.text:00403160 var_10          = dword ptr -10h
.text:00403160 arg_0           = dword ptr  4
.text:00403160 arg_4           = dword ptr  8
.text:00403160 arg_8           = dword ptr  0Ch
.text:00403160 arg_C           = dword ptr  10h
.text:00403160 arg_10          = dword ptr  14h
.text:00403160 arg_14          = dword ptr  18h
.text:00403160 arg_18          = dword ptr  1Ch
.text:00403160
.text:00403160                 sub     esp, 2Ch
.text:00403163                 mov     edx, dword_407020
.text:00403169                 mov     [esp+2Ch+var_10], offset dword_408050 ; int
.text:00403171                 mov     ecx, dword_407024
.text:00403177                 mov     ds:dword_408050, edx
.text:0040317D                 mov     edx, [esp+2Ch+arg_18]
.text:00403181                 mov     ds:dword_408054, ecx
.text:00403187                 mov     ecx, [esp+2Ch+arg_14]
.text:0040318B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040318F                 mov     edx, [esp+2Ch+arg_10]
.text:00403193                 mov     [esp+2Ch+var_18], ecx ; int
.text:00403197                 mov     ecx, [esp+2Ch+arg_C]
.text:0040319B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040319F                 mov     edx, [esp+2Ch+arg_8]
.text:004031A3                 mov     [esp+2Ch+var_20], ecx ; int
.text:004031A7                 mov     ecx, [esp+2Ch+arg_4]
.text:004031AB                 mov     [esp+2Ch+Str], edx ; Str
.text:004031AF                 mov     edx, [esp+2Ch+arg_0]
.text:004031B3                 mov     [esp+2Ch+var_28], ecx ; int
.text:004031B7                 mov     [esp+2Ch+var_2C], edx ; int
.text:004031BA                 call    sub_4025D0
.text:004031BF                 mov     ecx, ds:dword_408050
.text:004031C5                 mov     dword_407020, ecx
.text:004031CB                 mov     ecx, ds:dword_40805C
.text:004031D1                 mov     ds:dword_408B50, ecx
.text:004031D7                 mov     ecx, ds:dword_408058
.text:004031DD                 mov     dword_407028, ecx
.text:004031E3                 add     esp, 2Ch
.text:004031E6                 retn
.text:004031E6 sub_403160      endp
.text:004031E6
.text:004031E6 ; ---------------------------------------------------------------------------
.text:004031E7                 align 10h
.text:004031F0                 sub     esp, 2Ch
.text:004031F3                 mov     edx, dword_407020
.text:004031F9                 mov     dword ptr [esp+1Ch], offset dword_408050
.text:00403201                 mov     ecx, dword_407024
.text:00403207                 mov     dword ptr [esp+18h], 1
.text:0040320F                 mov     ds:dword_408050, edx
.text:00403215                 mov     edx, [esp+38h]
.text:00403219                 mov     ds:dword_408054, ecx
.text:0040321F                 mov     ecx, [esp+34h]
.text:00403223                 mov     [esp+8], edx
.text:00403227                 mov     edx, [esp+30h]
.text:0040322B                 mov     [esp+4], ecx
.text:0040322F                 mov     dword ptr [esp+14h], 0
.text:00403237                 mov     dword ptr [esp+10h], 0
.text:0040323F                 mov     dword ptr [esp+0Ch], 0
.text:00403247                 mov     [esp], edx
.text:0040324A                 call    sub_4025D0
.text:0040324F                 mov     ecx, ds:dword_408050
.text:00403255                 mov     dword_407020, ecx
.text:0040325B                 mov     ecx, ds:dword_40805C
.text:00403261                 mov     ds:dword_408B50, ecx
.text:00403267                 mov     ecx, ds:dword_408058
.text:0040326D                 mov     dword_407028, ecx
.text:00403273                 add     esp, 2Ch
.text:00403276                 retn
.text:00403276 ; ---------------------------------------------------------------------------
.text:00403277                 align 10h
.text:00403280
.text:00403280 ; =============== S U B R O U T I N E =======================================
.text:00403280
.text:00403280
.text:00403280 sub_403280      proc near               ; CODE XREF: sub_4025D0+113↑p
.text:00403280                                         ; sub_4025D0+AB9↑p
.text:00403280
.text:00403280 var_2C          = dword ptr -2Ch
.text:00403280 var_28          = dword ptr -28h
.text:00403280 var_24          = dword ptr -24h
.text:00403280 var_20          = dword ptr -20h
.text:00403280 var_1C          = dword ptr -1Ch
.text:00403280 var_18          = dword ptr -18h
.text:00403280 var_14          = dword ptr -14h
.text:00403280 arg_0           = dword ptr  4
.text:00403280 arg_4           = dword ptr  8
.text:00403280
.text:00403280                 push    ebp
.text:00403281                 push    edi
.text:00403282                 push    esi
.text:00403283                 push    ebx
.text:00403284                 sub     esp, 1Ch
.text:00403287                 mov     ecx, [esp+2Ch+arg_4]
.text:0040328B                 mov     eax, [esp+2Ch+arg_4]
.text:0040328F                 mov     ebx, [esp+2Ch+arg_4]
.text:00403293                 mov     edx, [ecx+20h]
.text:00403296                 mov     edi, [esp+2Ch+arg_0]
.text:0040329A                 mov     ecx, [ebx]
.text:0040329C                 mov     [esp+2Ch+var_2C], edx
.text:0040329F                 mov     [esp+2Ch+var_14], edx
.text:004032A3                 mov     edx, [eax+24h]
.text:004032A6                 mov     [esp+2Ch+var_28], ecx
.text:004032AA                 mov     [esp+2Ch+var_1C], ecx
.text:004032AE                 cmp     ecx, edx
.text:004032B0                 mov     [esp+2Ch+var_18], edx
.text:004032B4                 jle     short loc_403330
.text:004032B6                 mov     esi, [esp+2Ch+var_2C]
.text:004032B9                 cmp     edx, esi
.text:004032BB                 jle     short loc_403330
.text:004032BD                 lea     esi, [esi+0]
.text:004032C0
.text:004032C0 loc_4032C0:                             ; CODE XREF: sub_403280+A1↓j
.text:004032C0                 mov     ebx, [esp+2Ch+var_1C]
.text:004032C4                 mov     edx, [esp+2Ch+var_18]
.text:004032C8                 mov     ebp, [esp+2Ch+var_18]
.text:004032CC                 mov     eax, [esp+2Ch+var_14]
.text:004032D0                 sub     ebx, edx
.text:004032D2                 mov     [esp+2Ch+var_20], ebx
.text:004032D6                 sub     ebp, eax
.text:004032D8                 cmp     ebx, ebp
.text:004032DA                 jle     short loc_403355
.text:004032DC                 xor     esi, esi
.text:004032DE                 cmp     esi, ebp
.text:004032E0                 jge     short loc_40330D
.text:004032E2                 mov     ecx, [esp+2Ch+var_1C]
.text:004032E6                 sub     ecx, ebp
.text:004032E8                 mov     [esp+2Ch+var_24], ecx
.text:004032EC                 lea     esi, [esi+0]
.text:004032F0
.text:004032F0 loc_4032F0:                             ; CODE XREF: sub_403280+8B↓j
.text:004032F0                 mov     ecx, [esp+2Ch+var_14]
.text:004032F4                 mov     edx, [esp+2Ch+var_24]
.text:004032F8                 add     ecx, esi
.text:004032FA                 add     edx, esi
.text:004032FC                 mov     ebx, [edi+ecx*4]
.text:004032FF                 mov     eax, [edi+edx*4]
.text:00403302                 inc     esi
.text:00403303                 cmp     esi, ebp
.text:00403305                 mov     [edi+ecx*4], eax
.text:00403308                 mov     [edi+edx*4], ebx
.text:0040330B                 jl      short loc_4032F0
.text:0040330D
.text:0040330D loc_40330D:                             ; CODE XREF: sub_403280+60↑j
.text:0040330D                 sub     [esp+2Ch+var_1C], ebp
.text:00403311
.text:00403311 loc_403311:                             ; CODE XREF: sub_403280+107↓j
.text:00403311                 mov     eax, [esp+2Ch+var_18]
.text:00403315                 cmp     [esp+2Ch+var_1C], eax
.text:00403319                 jle     short loc_403330
.text:0040331B                 mov     ebp, [esp+2Ch+var_14]
.text:0040331F                 cmp     eax, ebp
.text:00403321                 jg      short loc_4032C0
.text:00403323                 lea     esi, [esi+0]
.text:00403329                 lea     edi, [edi+0]
.text:00403330
.text:00403330 loc_403330:                             ; CODE XREF: sub_403280+34↑j
.text:00403330                                         ; sub_403280+3B↑j ...
.text:00403330                 mov     esi, [esp+2Ch+var_28]
.text:00403334                 mov     ecx, [esp+2Ch+var_18]
.text:00403338                 mov     eax, [esp+2Ch+var_2C]
.text:0040333B                 mov     edi, [esp+2Ch+arg_4]
.text:0040333F                 mov     edx, [esp+2Ch+var_28]
.text:00403343                 sub     esi, ecx
.text:00403345                 add     esi, eax
.text:00403347                 mov     [edi+20h], esi
.text:0040334A                 mov     [edi+24h], edx
.text:0040334D                 add     esp, 1Ch
.text:00403350                 pop     ebx
.text:00403351                 pop     esi
.text:00403352                 pop     edi
.text:00403353                 pop     ebp
.text:00403354                 retn
.text:00403355 ; ---------------------------------------------------------------------------
.text:00403355
.text:00403355 loc_403355:                             ; CODE XREF: sub_403280+5A↑j
.text:00403355                 xor     esi, esi
.text:00403357                 cmp     esi, [esp+2Ch+var_20]
.text:0040335B                 jge     short loc_40337F
.text:0040335D                 lea     esi, [esi+0]
.text:00403360
.text:00403360 loc_403360:                             ; CODE XREF: sub_403280+FD↓j
.text:00403360                 mov     ebx, [esp+2Ch+var_14]
.text:00403364                 mov     ebp, [esp+2Ch+var_18]
.text:00403368                 add     ebx, esi
.text:0040336A                 add     ebp, esi
.text:0040336C                 mov     edx, [edi+ebx*4]
.text:0040336F                 inc     esi
.text:00403370                 cmp     esi, [esp+2Ch+var_20]
.text:00403374                 mov     ecx, [edi+ebp*4]
.text:00403377                 mov     [edi+ebx*4], ecx
.text:0040337A                 mov     [edi+ebp*4], edx
.text:0040337D                 jl      short loc_403360
.text:0040337F
.text:0040337F loc_40337F:                             ; CODE XREF: sub_403280+DB↑j
.text:0040337F                 mov     esi, [esp+2Ch+var_20]
.text:00403383                 add     [esp+2Ch+var_14], esi
.text:00403387                 jmp     short loc_403311
.text:00403387 sub_403280      endp
.text:00403387
.text:00403387 ; ---------------------------------------------------------------------------
.text:00403389                 align 20h
.text:004033A0
.text:004033A0 ; =============== S U B R O U T I N E =======================================
.text:004033A0
.text:004033A0
.text:004033A0 sub_4033A0      proc near               ; CODE XREF: sub_402290+46↑p
.text:004033A0
.text:004033A0 Size            = dword ptr -0Ch
.text:004033A0 var_4           = dword ptr -4
.text:004033A0 arg_0           = dword ptr  4
.text:004033A0 arg_4           = dword ptr  8
.text:004033A0
.text:004033A0                 sub     esp, 0Ch
.text:004033A3                 xor     edx, edx
.text:004033A5                 mov     ecx, [esp+0Ch+arg_4]
.text:004033A9                 mov     [esp+0Ch+var_4], ebx
.text:004033AD                 mov     eax, 0FFFFFFFFh
.text:004033B2                 mov     ebx, [esp+0Ch+arg_0]
.text:004033B6                 div     ecx
.text:004033B8                 cmp     eax, ebx
.text:004033BA                 jb      short loc_4033D9
.text:004033BC                 mov     edx, ebx
.text:004033BE                 imul    edx, ecx
.text:004033C1                 mov     [esp+0Ch+Size], edx ; Size
.text:004033C4                 call    malloc
.text:004033C9                 test    eax, eax
.text:004033CB                 jz      short loc_4033D5
.text:004033CD
.text:004033CD loc_4033CD:                             ; CODE XREF: sub_4033A0+37↓j
.text:004033CD                 mov     ebx, [esp+0Ch+var_4]
.text:004033D1                 add     esp, 0Ch
.text:004033D4                 retn
.text:004033D5 ; ---------------------------------------------------------------------------
.text:004033D5
.text:004033D5 loc_4033D5:                             ; CODE XREF: sub_4033A0+2B↑j
.text:004033D5                 test    ebx, ebx
.text:004033D7                 jz      short loc_4033CD
.text:004033D9
.text:004033D9 loc_4033D9:                             ; CODE XREF: sub_4033A0+1A↑j
.text:004033D9                 call    sub_403F10
.text:004033D9 sub_4033A0      endp
.text:004033D9
.text:004033D9 ; ---------------------------------------------------------------------------
.text:004033DE                 align 10h
.text:004033E0
.text:004033E0 ; =============== S U B R O U T I N E =======================================
.text:004033E0
.text:004033E0
.text:004033E0 ; int __cdecl sub_4033E0(size_t)
.text:004033E0 sub_4033E0      proc near               ; CODE XREF: .text:00404A59↓p
.text:004033E0                                         ; .text:00404C36↓p ...
.text:004033E0
.text:004033E0 Size            = dword ptr -0Ch
.text:004033E0 var_4           = dword ptr -4
.text:004033E0 arg_0           = dword ptr  4
.text:004033E0
.text:004033E0                 sub     esp, 0Ch
.text:004033E3                 mov     [esp+0Ch+var_4], ebx
.text:004033E7                 mov     ebx, [esp+0Ch+arg_0]
.text:004033EB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004033EE                 call    malloc
.text:004033F3                 test    eax, eax
.text:004033F5                 jz      short loc_403400
.text:004033F7
.text:004033F7 loc_4033F7:                             ; CODE XREF: sub_4033E0+22↓j
.text:004033F7                 mov     ebx, [esp+0Ch+var_4]
.text:004033FB                 add     esp, 0Ch
.text:004033FE                 retn
.text:004033FE ; ---------------------------------------------------------------------------
.text:004033FF                 align 10h
.text:00403400
.text:00403400 loc_403400:                             ; CODE XREF: sub_4033E0+15↑j
.text:00403400                 test    ebx, ebx
.text:00403402                 jz      short loc_4033F7
.text:00403404                 call    sub_403F10
.text:00403404 sub_4033E0      endp
.text:00403404
.text:00403404 ; ---------------------------------------------------------------------------
.text:00403409                 align 10h
.text:00403410                 sub     esp, 1Ch
.text:00403413                 xor     edx, edx
.text:00403415                 mov     eax, 0FFFFFFFFh
.text:0040341A                 mov     [esp+14h], ebx
.text:0040341E                 mov     ecx, [esp+20h]
.text:00403422                 mov     ebx, [esp+28h]
.text:00403426                 mov     [esp+18h], esi
.text:0040342A                 mov     esi, [esp+24h]
.text:0040342E                 div     ebx
.text:00403430                 cmp     eax, esi
.text:00403432                 jb      short loc_403464
.text:00403434                 mov     [esp], ecx
.text:00403437                 mov     edx, esi
.text:00403439                 imul    edx, ebx
.text:0040343C                 mov     [esp+4], edx
.text:00403440                 call    realloc
.text:00403445                 test    eax, eax
.text:00403447                 mov     ecx, eax
.text:00403449                 jz      short loc_403460
.text:0040344B
.text:0040344B loc_40344B:                             ; CODE XREF: .text:00403462↓j
.text:0040344B                 mov     ebx, [esp+14h]
.text:0040344F                 mov     eax, ecx
.text:00403451                 mov     esi, [esp+18h]
.text:00403455                 add     esp, 1Ch
.text:00403458                 retn
.text:00403458 ; ---------------------------------------------------------------------------
.text:00403459                 align 10h
.text:00403460
.text:00403460 loc_403460:                             ; CODE XREF: .text:00403449↑j
.text:00403460                 test    esi, esi
.text:00403462                 jz      short loc_40344B
.text:00403464
.text:00403464 loc_403464:                             ; CODE XREF: .text:00403432↑j
.text:00403464                 call    sub_403F10
.text:00403464 ; ---------------------------------------------------------------------------
.text:00403469                 align 10h
.text:00403470
.text:00403470 ; =============== S U B R O U T I N E =======================================
.text:00403470
.text:00403470
.text:00403470 ; int __cdecl sub_403470(void *, size_t)
.text:00403470 sub_403470      proc near               ; CODE XREF: sub_405120+5B↓p
.text:00403470
.text:00403470 Block           = dword ptr -0Ch
.text:00403470 Size            = dword ptr -8
.text:00403470 var_4           = dword ptr -4
.text:00403470 arg_0           = dword ptr  4
.text:00403470 arg_4           = dword ptr  8
.text:00403470
.text:00403470                 sub     esp, 0Ch
.text:00403473                 mov     edx, [esp+0Ch+arg_0]
.text:00403477                 mov     [esp+0Ch+var_4], ebx
.text:0040347B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040347F                 mov     [esp+0Ch+Block], edx ; Block
.text:00403482                 mov     [esp+0Ch+Size], ebx ; Size
.text:00403486                 call    realloc
.text:0040348B                 test    eax, eax
.text:0040348D                 jz      short loc_403497
.text:0040348F
.text:0040348F loc_40348F:                             ; CODE XREF: sub_403470+29↓j
.text:0040348F                 mov     ebx, [esp+0Ch+var_4]
.text:00403493                 add     esp, 0Ch
.text:00403496                 retn
.text:00403497 ; ---------------------------------------------------------------------------
.text:00403497
.text:00403497 loc_403497:                             ; CODE XREF: sub_403470+1D↑j
.text:00403497                 test    ebx, ebx
.text:00403499                 jz      short loc_40348F
.text:0040349B                 call    sub_403F10
.text:0040349B sub_403470      endp
.text:0040349B
.text:004034A0 ; ---------------------------------------------------------------------------
.text:004034A0                 jmp     sub_4035F0
.text:004034A0 ; ---------------------------------------------------------------------------
.text:004034A5                 align 10h
.text:004034B0                 sub     esp, 0Ch
.text:004034B3                 mov     edx, [esp+14h]
.text:004034B7                 mov     dword ptr [esp+8], 1
.text:004034BF                 mov     [esp+4], edx
.text:004034C3                 mov     edx, [esp+10h]
.text:004034C7                 mov     [esp], edx
.text:004034CA                 call    sub_4035F0
.text:004034CF                 add     esp, 0Ch
.text:004034D2                 retn
.text:004034D2 ; ---------------------------------------------------------------------------
.text:004034D3                 align 10h
.text:004034E0                 sub     esp, 1Ch
.text:004034E3                 mov     [esp+18h], ebx
.text:004034E7                 mov     ebx, [esp+20h]
.text:004034EB                 mov     [esp], ebx
.text:004034EE                 call    malloc
.text:004034F3                 test    eax, eax
.text:004034F5                 jz      short loc_403513
.text:004034F7
.text:004034F7 loc_4034F7:                             ; CODE XREF: .text:00403515↓j
.text:004034F7                 mov     [esp+8], ebx
.text:004034FB                 mov     dword ptr [esp+4], 0
.text:00403503                 mov     [esp], eax
.text:00403506                 call    memset
.text:0040350B                 mov     ebx, [esp+18h]
.text:0040350F                 add     esp, 1Ch
.text:00403512                 retn
.text:00403513 ; ---------------------------------------------------------------------------
.text:00403513
.text:00403513 loc_403513:                             ; CODE XREF: .text:004034F5↑j
.text:00403513                 test    ebx, ebx
.text:00403515                 jz      short loc_4034F7
.text:00403517                 call    sub_403F10
.text:00403517 ; ---------------------------------------------------------------------------
.text:0040351C                 align 10h
.text:00403520                 sub     esp, 0Ch
.text:00403523                 xor     edx, edx
.text:00403525                 mov     ecx, [esp+14h]
.text:00403529                 mov     [esp+8], ebx
.text:0040352D                 mov     eax, 0FFFFFFFFh
.text:00403532                 mov     ebx, [esp+10h]
.text:00403536                 div     ecx
.text:00403538                 cmp     eax, ebx
.text:0040353A                 jb      short loc_403558
.text:0040353C                 mov     [esp+4], ecx
.text:00403540                 mov     [esp], ebx
.text:00403543                 call    calloc
.text:00403548                 test    eax, eax
.text:0040354A                 jz      short loc_403554
.text:0040354C
.text:0040354C loc_40354C:                             ; CODE XREF: .text:00403556↓j
.text:0040354C                 mov     ebx, [esp+8]
.text:00403550                 add     esp, 0Ch
.text:00403553                 retn
.text:00403554 ; ---------------------------------------------------------------------------
.text:00403554
.text:00403554 loc_403554:                             ; CODE XREF: .text:0040354A↑j
.text:00403554                 test    ebx, ebx
.text:00403556                 jz      short loc_40354C
.text:00403558
.text:00403558 loc_403558:                             ; CODE XREF: .text:0040353A↑j
.text:00403558                 call    sub_403F10
.text:00403558 ; ---------------------------------------------------------------------------
.text:0040355D                 align 10h
.text:00403560                 sub     esp, 1Ch
.text:00403563                 mov     [esp+18h], ebx
.text:00403567                 mov     ebx, [esp+24h]
.text:0040356B                 mov     [esp], ebx
.text:0040356E                 call    malloc
.text:00403573                 test    eax, eax
.text:00403575                 mov     edx, eax
.text:00403577                 jz      short loc_403595
.text:00403579
.text:00403579 loc_403579:                             ; CODE XREF: .text:00403597↓j
.text:00403579                 mov     [esp+8], ebx
.text:0040357D                 mov     ecx, [esp+20h]
.text:00403581                 mov     [esp], edx
.text:00403584                 mov     [esp+4], ecx
.text:00403588                 call    memcpy
.text:0040358D                 mov     ebx, [esp+18h]
.text:00403591                 add     esp, 1Ch
.text:00403594                 retn
.text:00403595 ; ---------------------------------------------------------------------------
.text:00403595
.text:00403595 loc_403595:                             ; CODE XREF: .text:00403577↑j
.text:00403595                 test    ebx, ebx
.text:00403597                 jz      short loc_403579
.text:00403599                 call    sub_403F10
.text:00403599 ; ---------------------------------------------------------------------------
.text:0040359E                 align 10h
.text:004035A0                 sub     esp, 1Ch
.text:004035A3                 mov     [esp+18h], esi
.text:004035A7                 mov     esi, [esp+20h]
.text:004035AB                 mov     [esp+14h], ebx
.text:004035AF                 mov     [esp], esi
.text:004035B2                 call    strlen
.text:004035B7                 lea     ebx, [eax+1]
.text:004035BA                 mov     [esp], ebx
.text:004035BD                 call    malloc
.text:004035C2                 test    eax, eax
.text:004035C4                 jz      short loc_4035E2
.text:004035C6
.text:004035C6 loc_4035C6:                             ; CODE XREF: .text:004035E4↓j
.text:004035C6                 mov     [esp+8], ebx
.text:004035CA                 mov     [esp+4], esi
.text:004035CE                 mov     [esp], eax
.text:004035D1                 call    memcpy
.text:004035D6                 mov     ebx, [esp+14h]
.text:004035DA                 mov     esi, [esp+18h]
.text:004035DE                 add     esp, 1Ch
.text:004035E1                 retn
.text:004035E2 ; ---------------------------------------------------------------------------
.text:004035E2
.text:004035E2 loc_4035E2:                             ; CODE XREF: .text:004035C4↑j
.text:004035E2                 test    ebx, ebx
.text:004035E4                 jz      short loc_4035C6
.text:004035E6                 call    sub_403F10
.text:004035E6 ; ---------------------------------------------------------------------------
.text:004035EB                 align 10h
.text:004035F0
.text:004035F0 ; =============== S U B R O U T I N E =======================================
.text:004035F0
.text:004035F0
.text:004035F0 ; int __cdecl sub_4035F0(void *, int, int)
.text:004035F0 sub_4035F0      proc near               ; CODE XREF: .text:004034A0↑j
.text:004035F0                                         ; .text:004034CA↑p
.text:004035F0
.text:004035F0 Block           = dword ptr -1Ch
.text:004035F0 Size            = dword ptr -18h
.text:004035F0 var_C           = dword ptr -0Ch
.text:004035F0 var_8           = dword ptr -8
.text:004035F0 var_4           = dword ptr -4
.text:004035F0 arg_0           = dword ptr  4
.text:004035F0 arg_4           = dword ptr  8
.text:004035F0 arg_8           = dword ptr  0Ch
.text:004035F0
.text:004035F0                 sub     esp, 1Ch
.text:004035F3                 mov     [esp+1Ch+var_8], esi
.text:004035F7                 mov     esi, [esp+1Ch+arg_0]
.text:004035FB                 mov     [esp+1Ch+var_4], edi
.text:004035FF                 mov     edi, [esp+1Ch+arg_4]
.text:00403603                 test    esi, esi
.text:00403605                 mov     [esp+1Ch+var_C], ebx
.text:00403609                 mov     ecx, [edi]
.text:0040360B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040360F                 jz      short loc_403650
.text:00403611                 xor     edx, edx
.text:00403613                 mov     eax, 7FFFFFFFh
.text:00403618                 div     ebx
.text:0040361A                 cmp     eax, ecx
.text:0040361C                 jb      short loc_403649
.text:0040361E                 add     ecx, ecx
.text:00403620
.text:00403620 loc_403620:                             ; CODE XREF: sub_4035F0+62↓j
.text:00403620                                         ; sub_4035F0+71↓j ...
.text:00403620                 mov     [edi], ecx
.text:00403622                 imul    ebx, ecx
.text:00403625                 mov     [esp+1Ch+Block], esi ; Block
.text:00403628                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040362C                 call    realloc
.text:00403631                 test    eax, eax
.text:00403633                 jz      short loc_403645
.text:00403635
.text:00403635 loc_403635:                             ; CODE XREF: sub_4035F0+57↓j
.text:00403635                 mov     ebx, [esp+1Ch+var_C]
.text:00403639                 mov     esi, [esp+1Ch+var_8]
.text:0040363D                 mov     edi, [esp+1Ch+var_4]
.text:00403641                 add     esp, 1Ch
.text:00403644                 retn
.text:00403645 ; ---------------------------------------------------------------------------
.text:00403645
.text:00403645 loc_403645:                             ; CODE XREF: sub_4035F0+43↑j
.text:00403645                 test    ebx, ebx
.text:00403647                 jz      short loc_403635
.text:00403649
.text:00403649 loc_403649:                             ; CODE XREF: sub_4035F0+2C↑j
.text:00403649                 call    sub_403F10
.text:00403649 ; ---------------------------------------------------------------------------
.text:0040364E                 align 10h
.text:00403650
.text:00403650 loc_403650:                             ; CODE XREF: sub_4035F0+1F↑j
.text:00403650                 test    ecx, ecx
.text:00403652                 jnz     short loc_403620
.text:00403654                 xor     edx, edx
.text:00403656                 mov     eax, 40h ; '@'
.text:0040365B                 div     ebx
.text:0040365D                 test    eax, eax
.text:0040365F                 mov     ecx, eax
.text:00403661                 jnz     short loc_403620
.text:00403663                 mov     ecx, 1
.text:00403668                 jmp     short loc_403620
.text:00403668 sub_4035F0      endp
.text:00403668
.text:00403668 ; ---------------------------------------------------------------------------
.text:0040366A                 align 10h
.text:00403670
.text:00403670 ; =============== S U B R O U T I N E =======================================
.text:00403670
.text:00403670
.text:00403670 ; int __cdecl sub_403670(int, int, char *, int)
.text:00403670 sub_403670      proc near               ; CODE XREF: sub_402290+30↑p
.text:00403670                                         ; sub_402290+60↑p
.text:00403670
.text:00403670 Str1            = dword ptr -1Ch
.text:00403670 Str2            = dword ptr -18h
.text:00403670 arg_0           = dword ptr  4
.text:00403670 arg_4           = dword ptr  8
.text:00403670 arg_8           = dword ptr  0Ch
.text:00403670 arg_C           = dword ptr  10h
.text:00403670
.text:00403670                 push    ebp
.text:00403671                 push    edi
.text:00403672                 xor     edi, edi
.text:00403674                 push    esi
.text:00403675                 push    ebx
.text:00403676                 sub     esp, 0Ch
.text:00403679                 mov     eax, [esp+1Ch+arg_C]
.text:0040367D                 mov     ebp, [esp+1Ch+arg_4]
.text:00403681                 cmp     eax, 0FFFFFFFFh
.text:00403684                 jz      short loc_403696
.text:00403686                 mov     ecx, [esp+1Ch+arg_0]
.text:0040368A                 test    ecx, ecx
.text:0040368C                 jz      short loc_403691
.text:0040368E                 mov     [ebp+0], eax
.text:00403691
.text:00403691 loc_403691:                             ; CODE XREF: sub_403670+1C↑j
.text:00403691                 mov     edi, 1
.text:00403696
.text:00403696 loc_403696:                             ; CODE XREF: sub_403670+14↑j
.text:00403696                 call    nullsub_2
.text:0040369B                 nop
.text:0040369C                 lea     esi, [esi+0]
.text:004036A0
.text:004036A0 loc_4036A0:                             ; CODE XREF: sub_403670+46↓j
.text:004036A0                                         ; sub_403670+6D↓j
.text:004036A0                 call    sub_4056F0
.text:004036A5                 test    eax, eax
.text:004036A7                 mov     esi, eax
.text:004036A9                 jz      loc_403736
.text:004036AF                 mov     ebx, [esi+0Ch]
.text:004036B2                 mov     eax, [ebx]
.text:004036B4                 test    eax, eax
.text:004036B6                 jz      short loc_4036A0
.text:004036B8                 nop
.text:004036B9                 lea     esi, [esi+0]
.text:004036C0
.text:004036C0 loc_4036C0:                             ; CODE XREF: sub_403670+6B↓j
.text:004036C0                 mov     [esp+1Ch+Str2], eax ; Str2
.text:004036C4                 mov     edx, [esp+1Ch+arg_8]
.text:004036C8                 mov     [esp+1Ch+Str1], edx ; Str1
.text:004036CB                 call    strcmp
.text:004036D0                 test    eax, eax
.text:004036D2                 jz      short loc_4036E0
.text:004036D4
.text:004036D4 loc_4036D4:                             ; CODE XREF: sub_403670+94↓j
.text:004036D4                                         ; sub_403670+AC↓j
.text:004036D4                 add     ebx, 4
.text:004036D7                 mov     eax, [ebx]
.text:004036D9                 test    eax, eax
.text:004036DB                 jnz     short loc_4036C0
.text:004036DD                 jmp     short loc_4036A0
.text:004036DD ; ---------------------------------------------------------------------------
.text:004036DF                 align 10h
.text:004036E0
.text:004036E0 loc_4036E0:                             ; CODE XREF: sub_403670+62↑j
.text:004036E0                 xor     edx, edx
.text:004036E2                 cmp     edx, edi
.text:004036E4                 jge     short loc_403702
.text:004036E6                 lea     esi, [esi+0]
.text:004036E9                 lea     edi, [edi+0]
.text:004036F0
.text:004036F0 loc_4036F0:                             ; CODE XREF: sub_403670+90↓j
.text:004036F0                 test    ebp, ebp
.text:004036F2                 jz      short loc_4036FD
.text:004036F4                 mov     ecx, [esi+8]
.text:004036F7                 cmp     [ebp+edx*4+0], ecx
.text:004036FB                 jz      short loc_403702
.text:004036FD
.text:004036FD loc_4036FD:                             ; CODE XREF: sub_403670+82↑j
.text:004036FD                 inc     edx
.text:004036FE                 cmp     edx, edi
.text:00403700                 jl      short loc_4036F0
.text:00403702
.text:00403702 loc_403702:                             ; CODE XREF: sub_403670+74↑j
.text:00403702                                         ; sub_403670+8B↑j
.text:00403702                 cmp     edx, edi
.text:00403704                 jnz     short loc_4036D4
.text:00403706                 mov     edx, [esp+1Ch+arg_0]
.text:0040370A                 test    edx, edx
.text:0040370C                 jz      short loc_40371B
.text:0040370E                 cmp     edi, [esp+1Ch+arg_0]
.text:00403712                 jge     short loc_403736
.text:00403714                 mov     ecx, [esi+8]
.text:00403717                 mov     [ebp+edi*4+0], ecx
.text:0040371B
.text:0040371B loc_40371B:                             ; CODE XREF: sub_403670+9C↑j
.text:0040371B                 inc     edi
.text:0040371C                 jns     short loc_4036D4
.text:0040371E                 call    _errno
.text:00403723                 mov     dword ptr [eax], 73h ; 's'
.text:00403729                 mov     eax, 0FFFFFFFFh
.text:0040372E
.text:0040372E loc_40372E:                             ; CODE XREF: sub_403670+CD↓j
.text:0040372E                 add     esp, 0Ch
.text:00403731                 pop     ebx
.text:00403732                 pop     esi
.text:00403733                 pop     edi
.text:00403734                 pop     ebp
.text:00403735                 retn
.text:00403736 ; ---------------------------------------------------------------------------
.text:00403736
.text:00403736 loc_403736:                             ; CODE XREF: sub_403670+39↑j
.text:00403736                                         ; sub_403670+A2↑j
.text:00403736                 call    nullsub_1
.text:0040373B                 mov     eax, edi
.text:0040373D                 jmp     short loc_40372E
.text:0040373D sub_403670      endp
.text:0040373D
.text:0040373D ; ---------------------------------------------------------------------------
.text:0040373F                 align 10h
.text:00403740                 sub     esp, 0Ch
.text:00403743                 mov     edx, [esp+14h]
.text:00403747                 mov     dword ptr [esp+4], 5
.text:0040374F                 mov     [esp+8], edx
.text:00403753                 mov     edx, [esp+10h]
.text:00403757                 mov     [esp], edx
.text:0040375A                 call    sub_404D10
.text:0040375F                 add     esp, 0Ch
.text:00403762                 retn
.text:00403762 ; ---------------------------------------------------------------------------
.text:00403763                 align 10h
.text:00403770
.text:00403770 ; =============== S U B R O U T I N E =======================================
.text:00403770
.text:00403770
.text:00403770 ; int __cdecl sub_403770(char *)
.text:00403770 sub_403770      proc near               ; CODE XREF: sub_401770+2D3↑p
.text:00403770
.text:00403770 var_C           = dword ptr -0Ch
.text:00403770 var_8           = dword ptr -8
.text:00403770 var_4           = dword ptr -4
.text:00403770 arg_0           = dword ptr  4
.text:00403770
.text:00403770                 sub     esp, 0Ch
.text:00403773                 mov     edx, [esp+0Ch+arg_0]
.text:00403777                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040377F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00403786                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040378A                 call    sub_404D10
.text:0040378F                 add     esp, 0Ch
.text:00403792                 retn
.text:00403792 sub_403770      endp
.text:00403792
.text:00403792 ; ---------------------------------------------------------------------------
.text:00403793                 align 10h
.text:004037A0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:004037A0                                         ; DATA XREF: .data:Buffer↓o
.text:004037D2 ; const char aSSS[]
.text:004037D2 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_403A90+50↓o
.text:004037DE aWrittenByS     db 'Written by %s.',0Ah,0
.text:004037DE                                         ; DATA XREF: sub_403A90:loc_403B31↓o
.text:004037EE                 align 20h
.text:00403800 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00403800                                         ; DATA XREF: sub_403A90+100↓o
.text:00403800                 db 'ere is NO',0Ah
.text:00403800                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00403800                 db 'R PURPOSE.',0Ah,0
.text:00403898 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00403898                                         ; DATA XREF: sub_403A90:loc_403BD1↓o
.text:004038AF aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:004038AF                                         ; DATA XREF: sub_403A90:loc_403BDD↓o
.text:004038CB                 align 20h
.text:004038E0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:004038E0                                         ; DATA XREF: sub_403A90:loc_403BE9↓o
.text:004038E0                 db 'and %s.',0Ah,0
.text:00403900 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00403900                                         ; DATA XREF: sub_403A90:loc_403BF5↓o
.text:00403900                 db '%s, and %s.',0Ah,0
.text:00403924                 align 20h
.text:00403940 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00403940                                         ; DATA XREF: sub_403A90:loc_403C01↓o
.text:00403940                 db '%s, %s, and %s.',0Ah,0
.text:00403968                 align 20h
.text:00403980 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00403980                                         ; DATA XREF: sub_403A90:loc_403C0D↓o
.text:00403980                 db '%s, %s, %s, and %s.',0Ah,0
.text:004039AC                 align 20h
.text:004039C0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:004039C0                                         ; DATA XREF: sub_403A90:loc_403C19↓o
.text:004039C0                 db '%s, %s, %s, %s,',0Ah
.text:004039C0                 db 'and %s.',0Ah,0
.text:004039F0                 align 20h
.text:00403A00 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00403A00                                         ; DATA XREF: sub_403A90:loc_403C25↓o
.text:00403A00                 db '%s, %s, %s, %s,',0Ah
.text:00403A00                 db '%s, and %s.',0Ah,0
.text:00403A34                 align 10h
.text:00403A40 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00403A40                                         ; DATA XREF: sub_403A90:def_403AFD↓o
.text:00403A40                 db '%s, %s, %s, %s,',0Ah
.text:00403A40                 db '%s, %s, and others.',0Ah,0
.text:00403A7C ; const char aSS[]
.text:00403A7C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_403A90+1B5↓o
.text:00403A83                 align 10h
.text:00403A90
.text:00403A90 ; =============== S U B R O U T I N E =======================================
.text:00403A90
.text:00403A90
.text:00403A90 ; int __cdecl sub_403A90(FILE *, FILE *, int, int, va_list)
.text:00403A90 sub_403A90      proc near               ; CODE XREF: sub_403C60+2A↓p
.text:00403A90
.text:00403A90 Stream          = dword ptr -2Ch
.text:00403A90 Format          = dword ptr -28h
.text:00403A90 ArgList         = dword ptr -24h
.text:00403A90 var_20          = dword ptr -20h
.text:00403A90 var_1C          = dword ptr -1Ch
.text:00403A90 var_14          = dword ptr -14h
.text:00403A90 arg_0           = dword ptr  4
.text:00403A90 arg_4           = dword ptr  8
.text:00403A90 arg_8           = dword ptr  0Ch
.text:00403A90 arg_C           = dword ptr  10h
.text:00403A90 arg_10          = dword ptr  14h
.text:00403A90
.text:00403A90                 push    ebp
.text:00403A91                 push    edi
.text:00403A92                 push    esi
.text:00403A93                 push    ebx
.text:00403A94                 sub     esp, 1Ch
.text:00403A97                 xor     ebx, ebx
.text:00403A99                 mov     edi, [esp+2Ch+arg_10]
.text:00403A9D                 mov     edx, [esp+2Ch+arg_8]
.text:00403AA1                 mov     esi, [esp+2Ch+arg_0]
.text:00403AA5                 mov     eax, [edi]
.text:00403AA7                 mov     ecx, [esp+2Ch+arg_4]
.text:00403AAB                 mov     [esp+2Ch+var_14], edx
.text:00403AAF                 mov     ebp, [esp+2Ch+arg_C]
.text:00403AB3                 lea     edx, [edi+4]
.text:00403AB6                 test    eax, eax
.text:00403AB8                 jz      short loc_403ACC
.text:00403ABA                 lea     esi, [esi+0]
.text:00403AC0
.text:00403AC0 loc_403AC0:                             ; CODE XREF: sub_403A90+3A↓j
.text:00403AC0                 mov     eax, edx
.text:00403AC2                 inc     ebx
.text:00403AC3                 mov     eax, [eax]
.text:00403AC5                 add     edx, 4
.text:00403AC8                 test    eax, eax
.text:00403ACA                 jnz     short loc_403AC0
.text:00403ACC
.text:00403ACC loc_403ACC:                             ; CODE XREF: sub_403A90+28↑j
.text:00403ACC                 test    ecx, ecx
.text:00403ACE                 jz      loc_403C3D
.text:00403AD4                 mov     [esp+2Ch+var_1C], ebp
.text:00403AD8                 mov     edx, [esp+2Ch+var_14]
.text:00403ADC                 mov     [esp+2Ch+ArgList], ecx
.text:00403AE0                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00403AE8                 mov     [esp+2Ch+var_20], edx
.text:00403AEC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403AEF                 call    fprintf
.text:00403AF4
.text:00403AF4 loc_403AF4:                             ; CODE XREF: sub_403A90+1C9↓j
.text:00403AF4                 cmp     ebx, 9          ; switch 10 cases
.text:00403AF7                 ja      def_403AFD      ; jumptable 00403AFD default case
.text:00403AFD                 jmp     ds:jpt_403AFD[ebx*4] ; switch jump
.text:00403AFD ; ---------------------------------------------------------------------------
.text:00403B04 jpt_403AFD      dd offset loc_403B2C    ; DATA XREF: sub_403A90+6D↑r
.text:00403B04                 dd offset loc_403B31    ; jump table for switch statement
.text:00403B04                 dd offset loc_403BD1
.text:00403B04                 dd offset loc_403BDD
.text:00403B04                 dd offset loc_403BE9
.text:00403B04                 dd offset loc_403BF5
.text:00403B04                 dd offset loc_403C01
.text:00403B04                 dd offset loc_403C0D
.text:00403B04                 dd offset loc_403C19
.text:00403B04                 dd offset loc_403C25
.text:00403B2C ; ---------------------------------------------------------------------------
.text:00403B2C
.text:00403B2C loc_403B2C:                             ; CODE XREF: sub_403A90+6D↑j
.text:00403B2C                                         ; DATA XREF: sub_403A90:jpt_403AFD↑o
.text:00403B2C                 call    abort           ; jumptable 00403AFD case 0
.text:00403B31 ; ---------------------------------------------------------------------------
.text:00403B31
.text:00403B31 loc_403B31:                             ; CODE XREF: sub_403A90+6D↑j
.text:00403B31                                         ; DATA XREF: sub_403A90:jpt_403AFD↑o
.text:00403B31                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00403AFD case 1
.text:00403B38                 nop
.text:00403B39                 lea     esi, [esi+0]
.text:00403B40
.text:00403B40 loc_403B40:                             ; CODE XREF: sub_403A90+148↓j
.text:00403B40                                         ; sub_403A90+154↓j ...
.text:00403B40                 call    ds:libintl_gettext
.text:00403B46                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00403B4A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403B4D                 mov     [esp+2Ch+Format], eax ; Format
.text:00403B51                 call    vfprintf
.text:00403B56                 mov     ebx, [esi+4]
.text:00403B59                 dec     ebx
.text:00403B5A                 test    ebx, ebx
.text:00403B5C                 mov     [esi+4], ebx
.text:00403B5F                 js      short loc_403BBF
.text:00403B61                 mov     edi, [esi]
.text:00403B63                 mov     byte ptr [edi], 0Ah
.text:00403B66                 inc     dword ptr [esi]
.text:00403B68
.text:00403B68 loc_403B68:                             ; CODE XREF: sub_403A90+13F↓j
.text:00403B68                 mov     [esp+2Ch+Format], esi ; Stream
.text:00403B6C                 mov     edx, Buffer
.text:00403B72                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00403B75                 call    fputs
.text:00403B7A                 mov     ebp, [esi+4]
.text:00403B7D                 dec     ebp
.text:00403B7E                 test    ebp, ebp
.text:00403B80                 mov     [esi+4], ebp
.text:00403B83                 js      short loc_403BAD
.text:00403B85                 mov     ecx, [esi]
.text:00403B87                 mov     byte ptr [ecx], 0Ah
.text:00403B8A                 inc     dword ptr [esi]
.text:00403B8C
.text:00403B8C loc_403B8C:                             ; CODE XREF: sub_403A90+12D↓j
.text:00403B8C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00403B90                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00403B97                 call    ds:libintl_gettext
.text:00403B9D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00403BA1                 add     esp, 1Ch
.text:00403BA4                 pop     ebx
.text:00403BA5                 pop     esi
.text:00403BA6                 pop     edi
.text:00403BA7                 pop     ebp
.text:00403BA8                 jmp     fputs
.text:00403BAD ; ---------------------------------------------------------------------------
.text:00403BAD
.text:00403BAD loc_403BAD:                             ; CODE XREF: sub_403A90+F3↑j
.text:00403BAD                 mov     [esp+2Ch+Format], esi ; File
.text:00403BB1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403BB8                 call    _flsbuf
.text:00403BBD                 jmp     short loc_403B8C
.text:00403BBF ; ---------------------------------------------------------------------------
.text:00403BBF
.text:00403BBF loc_403BBF:                             ; CODE XREF: sub_403A90+CF↑j
.text:00403BBF                 mov     [esp+2Ch+Format], esi ; File
.text:00403BC3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403BCA                 call    _flsbuf
.text:00403BCF                 jmp     short loc_403B68
.text:00403BD1 ; ---------------------------------------------------------------------------
.text:00403BD1
.text:00403BD1 loc_403BD1:                             ; CODE XREF: sub_403A90+6D↑j
.text:00403BD1                                         ; DATA XREF: sub_403A90:jpt_403AFD↑o
.text:00403BD1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00403AFD case 2
.text:00403BD8                 jmp     loc_403B40
.text:00403BDD ; ---------------------------------------------------------------------------
.text:00403BDD
.text:00403BDD loc_403BDD:                             ; CODE XREF: sub_403A90+6D↑j
.text:00403BDD                                         ; DATA XREF: sub_403A90:jpt_403AFD↑o
.text:00403BDD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00403AFD case 3
.text:00403BE4                 jmp     loc_403B40
.text:00403BE9 ; ---------------------------------------------------------------------------
.text:00403BE9
.text:00403BE9 loc_403BE9:                             ; CODE XREF: sub_403A90+6D↑j
.text:00403BE9                                         ; DATA XREF: sub_403A90:jpt_403AFD↑o
.text:00403BE9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00403AFD case 4
.text:00403BF0                 jmp     loc_403B40
.text:00403BF5 ; ---------------------------------------------------------------------------
.text:00403BF5
.text:00403BF5 loc_403BF5:                             ; CODE XREF: sub_403A90+6D↑j
.text:00403BF5                                         ; DATA XREF: sub_403A90:jpt_403AFD↑o
.text:00403BF5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00403AFD case 5
.text:00403BFC                 jmp     loc_403B40
.text:00403C01 ; ---------------------------------------------------------------------------
.text:00403C01
.text:00403C01 loc_403C01:                             ; CODE XREF: sub_403A90+6D↑j
.text:00403C01                                         ; DATA XREF: sub_403A90:jpt_403AFD↑o
.text:00403C01                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00403AFD case 6
.text:00403C08                 jmp     loc_403B40
.text:00403C0D ; ---------------------------------------------------------------------------
.text:00403C0D
.text:00403C0D loc_403C0D:                             ; CODE XREF: sub_403A90+6D↑j
.text:00403C0D                                         ; DATA XREF: sub_403A90:jpt_403AFD↑o
.text:00403C0D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00403AFD case 7
.text:00403C14                 jmp     loc_403B40
.text:00403C19 ; ---------------------------------------------------------------------------
.text:00403C19
.text:00403C19 loc_403C19:                             ; CODE XREF: sub_403A90+6D↑j
.text:00403C19                                         ; DATA XREF: sub_403A90:jpt_403AFD↑o
.text:00403C19                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00403AFD case 8
.text:00403C20                 jmp     loc_403B40
.text:00403C25 ; ---------------------------------------------------------------------------
.text:00403C25
.text:00403C25 loc_403C25:                             ; CODE XREF: sub_403A90+6D↑j
.text:00403C25                                         ; DATA XREF: sub_403A90:jpt_403AFD↑o
.text:00403C25                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00403AFD case 9
.text:00403C2C                 jmp     loc_403B40
.text:00403C31 ; ---------------------------------------------------------------------------
.text:00403C31
.text:00403C31 def_403AFD:                             ; CODE XREF: sub_403A90+67↑j
.text:00403C31                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00403AFD default case
.text:00403C38                 jmp     loc_403B40
.text:00403C3D ; ---------------------------------------------------------------------------
.text:00403C3D
.text:00403C3D loc_403C3D:                             ; CODE XREF: sub_403A90+3E↑j
.text:00403C3D                 mov     [esp+2Ch+var_20], ebp
.text:00403C41                 mov     ecx, [esp+2Ch+var_14]
.text:00403C45                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:00403C4D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403C50                 mov     [esp+2Ch+ArgList], ecx
.text:00403C54                 call    fprintf
.text:00403C59                 jmp     loc_403AF4
.text:00403C59 sub_403A90      endp
.text:00403C59
.text:00403C59 ; ---------------------------------------------------------------------------
.text:00403C5E                 align 10h
.text:00403C60
.text:00403C60 ; =============== S U B R O U T I N E =======================================
.text:00403C60
.text:00403C60
.text:00403C60 ; int __cdecl sub_403C60(FILE *, FILE *, int, int, char)
.text:00403C60 sub_403C60      proc near               ; CODE XREF: sub_401770+151↑p
.text:00403C60
.text:00403C60 var_1C          = dword ptr -1Ch
.text:00403C60 var_18          = dword ptr -18h
.text:00403C60 var_14          = dword ptr -14h
.text:00403C60 var_10          = dword ptr -10h
.text:00403C60 var_C           = dword ptr -0Ch
.text:00403C60 arg_0           = dword ptr  4
.text:00403C60 arg_4           = dword ptr  8
.text:00403C60 arg_8           = dword ptr  0Ch
.text:00403C60 arg_C           = dword ptr  10h
.text:00403C60 arg_10          = byte ptr  14h
.text:00403C60
.text:00403C60                 sub     esp, 1Ch
.text:00403C63                 mov     edx, [esp+1Ch+arg_C]
.text:00403C67                 lea     ecx, [esp+1Ch+arg_10]
.text:00403C6B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:00403C6F                 mov     ecx, [esp+1Ch+arg_8]
.text:00403C73                 mov     [esp+1Ch+var_10], edx ; int
.text:00403C77                 mov     edx, [esp+1Ch+arg_4]
.text:00403C7B                 mov     [esp+1Ch+var_14], ecx ; int
.text:00403C7F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00403C83                 mov     edx, [esp+1Ch+arg_0]
.text:00403C87                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:00403C8A                 call    sub_403A90
.text:00403C8F                 add     esp, 1Ch
.text:00403C92                 retn
.text:00403C92 sub_403C60      endp
.text:00403C92
.text:00403C92 ; ---------------------------------------------------------------------------
.text:00403C93                 align 10h
.text:00403CA0
.text:00403CA0 ; =============== S U B R O U T I N E =======================================
.text:00403CA0
.text:00403CA0
.text:00403CA0 ; int __cdecl sub_403CA0(int, int, char *, int, int)
.text:00403CA0 sub_403CA0      proc near               ; CODE XREF: sub_401770+9F↑p
.text:00403CA0
.text:00403CA0 var_1C          = dword ptr -1Ch
.text:00403CA0 var_18          = dword ptr -18h
.text:00403CA0 var_14          = dword ptr -14h
.text:00403CA0 var_10          = dword ptr -10h
.text:00403CA0 var_C           = dword ptr -0Ch
.text:00403CA0 var_8           = dword ptr -8
.text:00403CA0 var_4           = dword ptr -4
.text:00403CA0 arg_0           = dword ptr  4
.text:00403CA0 arg_4           = dword ptr  8
.text:00403CA0 arg_8           = dword ptr  0Ch
.text:00403CA0 arg_C           = dword ptr  10h
.text:00403CA0 arg_10          = dword ptr  14h
.text:00403CA0
.text:00403CA0                 sub     esp, 1Ch
.text:00403CA3                 mov     edx, [esp+1Ch+arg_C]
.text:00403CA7                 mov     [esp+1Ch+var_4], 0 ; int
.text:00403CAF                 mov     ecx, [esp+1Ch+arg_10]
.text:00403CB3                 mov     [esp+1Ch+var_8], 0 ; int
.text:00403CBB                 mov     [esp+1Ch+var_10], edx ; int
.text:00403CBF                 mov     edx, [esp+1Ch+arg_4]
.text:00403CC3                 mov     [esp+1Ch+var_C], ecx ; int
.text:00403CC7                 mov     ecx, [esp+1Ch+arg_8]
.text:00403CCB                 mov     [esp+1Ch+var_18], edx ; int
.text:00403CCF                 mov     edx, [esp+1Ch+arg_0]
.text:00403CD3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00403CD7                 mov     [esp+1Ch+var_1C], edx ; int
.text:00403CDA                 call    sub_403160
.text:00403CDF                 add     esp, 1Ch
.text:00403CE2                 retn
.text:00403CE2 sub_403CA0      endp
.text:00403CE2
.text:00403CE2 ; ---------------------------------------------------------------------------
.text:00403CE3                 align 10h
.text:00403CF0                 sub     esp, 2Ch
.text:00403CF3                 mov     edx, [esp+44h]
.text:00403CF7                 mov     dword ptr [esp+18h], 0
.text:00403CFF                 mov     ecx, [esp+40h]
.text:00403D03                 mov     dword ptr [esp+14h], 0
.text:00403D0B                 mov     [esp+1Ch], edx
.text:00403D0F                 mov     edx, [esp+3Ch]
.text:00403D13                 mov     [esp+10h], ecx
.text:00403D17                 mov     ecx, [esp+38h]
.text:00403D1B                 mov     [esp+0Ch], edx
.text:00403D1F                 mov     edx, [esp+34h]
.text:00403D23                 mov     [esp+8], ecx
.text:00403D27                 mov     [esp+4], edx
.text:00403D2B                 mov     edx, [esp+30h]
.text:00403D2F                 mov     [esp], edx
.text:00403D32                 call    sub_4025D0
.text:00403D37                 add     esp, 2Ch
.text:00403D3A                 retn
.text:00403D3A ; ---------------------------------------------------------------------------
.text:00403D3B                 align 10h
.text:00403D40                 sub     esp, 1Ch
.text:00403D43                 mov     edx, [esp+2Ch]
.text:00403D47                 mov     dword ptr [esp+18h], 0
.text:00403D4F                 mov     ecx, [esp+30h]
.text:00403D53                 mov     dword ptr [esp+14h], 1
.text:00403D5B                 mov     [esp+0Ch], edx
.text:00403D5F                 mov     edx, [esp+24h]
.text:00403D63                 mov     [esp+10h], ecx
.text:00403D67                 mov     ecx, [esp+28h]
.text:00403D6B                 mov     [esp+4], edx
.text:00403D6F                 mov     edx, [esp+20h]
.text:00403D73                 mov     [esp+8], ecx
.text:00403D77                 mov     [esp], edx
.text:00403D7A                 call    sub_403160
.text:00403D7F                 add     esp, 1Ch
.text:00403D82                 retn
.text:00403D82 ; ---------------------------------------------------------------------------
.text:00403D83                 align 10h
.text:00403D90                 sub     esp, 2Ch
.text:00403D93                 mov     edx, [esp+44h]
.text:00403D97                 mov     dword ptr [esp+18h], 0
.text:00403D9F                 mov     ecx, [esp+40h]
.text:00403DA3                 mov     dword ptr [esp+14h], 1
.text:00403DAB                 mov     [esp+1Ch], edx
.text:00403DAF                 mov     edx, [esp+3Ch]
.text:00403DB3                 mov     [esp+10h], ecx
.text:00403DB7                 mov     ecx, [esp+38h]
.text:00403DBB                 mov     [esp+0Ch], edx
.text:00403DBF                 mov     edx, [esp+34h]
.text:00403DC3                 mov     [esp+8], ecx
.text:00403DC7                 mov     [esp+4], edx
.text:00403DCB                 mov     edx, [esp+30h]
.text:00403DCF                 mov     [esp], edx
.text:00403DD2                 call    sub_4025D0
.text:00403DD7                 add     esp, 2Ch
.text:00403DDA                 retn
.text:00403DDA ; ---------------------------------------------------------------------------
.text:00403DDB                 align 10h
.text:00403DE0                 mov     edx, [esp+4]
.text:00403DE4                 mov     ds:dword_408080, edx
.text:00403DEA                 retn
.text:00403DEA ; ---------------------------------------------------------------------------
.text:00403DEB aWriteError     db 'write error',0      ; DATA XREF: sub_403E10:loc_403E59↓o
.text:00403DF7 ; const char aSS_0[]
.text:00403DF7 aSS_0           db '%s: %s',0           ; DATA XREF: sub_403E10+77↓o
.text:00403DFE ; const char aS_3[]
.text:00403DFE aS_3            db '%s',0               ; DATA XREF: sub_403E10+A0↓o
.text:00403E01 ; ---------------------------------------------------------------------------
.text:00403E01                 jmp     short sub_403E10
.text:00403E01 ; ---------------------------------------------------------------------------
.text:00403E03                 align 10h
.text:00403E10
.text:00403E10 ; =============== S U B R O U T I N E =======================================
.text:00403E10
.text:00403E10
.text:00403E10 ; void __cdecl sub_403E10()
.text:00403E10 sub_403E10      proc near               ; CODE XREF: .text:00403E01↑j
.text:00403E10                                         ; DATA XREF: sub_401770+6C↑o
.text:00403E10
.text:00403E10 Stream          = dword ptr -2Ch
.text:00403E10 ErrorMessage    = dword ptr -28h
.text:00403E10 var_24          = dword ptr -24h
.text:00403E10 var_20          = byte ptr -20h
.text:00403E10 var_1C          = dword ptr -1Ch
.text:00403E10 var_9           = byte ptr -9
.text:00403E10
.text:00403E10                 push    esi
.text:00403E11                 push    ebx
.text:00403E12                 sub     esp, 24h
.text:00403E15                 mov     edx, ds:_iob
.text:00403E1B                 mov     ecx, [edx+2Ch]
.text:00403E1E                 lea     esi, [edx+20h]
.text:00403E21                 shr     ecx, 5
.text:00403E24                 mov     bl, cl
.text:00403E26                 mov     ecx, [edx+20h]
.text:00403E29                 and     bl, 1
.text:00403E2C                 cmp     ecx, [esi+8]
.text:00403E2F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403E32                 setz    [esp+2Ch+var_9]
.text:00403E37                 call    fclose
.text:00403E3C                 test    eax, eax
.text:00403E3E                 setnz   al
.text:00403E41                 test    bl, bl
.text:00403E43                 jnz     loc_403ED3
.text:00403E49                 test    al, al
.text:00403E4B                 jz      short loc_403EA0
.text:00403E4D
.text:00403E4D loc_403E4D:                             ; CODE XREF: sub_403E10+CD↓j
.text:00403E4D                 call    _errno
.text:00403E52                 mov     esi, [eax]
.text:00403E54
.text:00403E54 loc_403E54:                             ; CODE XREF: sub_403E10+C7↓j
.text:00403E54                 cmp     esi, 9
.text:00403E57                 jz      short loc_403EC6
.text:00403E59
.text:00403E59 loc_403E59:                             ; CODE XREF: sub_403E10+B8↓j
.text:00403E59                                         ; sub_403E10+C1↓j
.text:00403E59                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00403E60                 call    ds:libintl_gettext
.text:00403E66                 mov     ebx, eax
.text:00403E68                 mov     eax, ds:dword_408080
.text:00403E6D                 test    eax, eax
.text:00403E6F                 jz      short loc_403EA6
.text:00403E71                 mov     [esp+2Ch+Stream], eax ; char *
.text:00403E74                 call    sub_405080
.text:00403E79                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00403E7D                 mov     edx, Code
.text:00403E83                 mov     [esp+2Ch+var_1C], ebx
.text:00403E87                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:00403E8F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403E93                 mov     [esp+2Ch+Stream], edx ; Code
.text:00403E96                 call    sub_405340
.text:00403E9B                 nop
.text:00403E9C                 lea     esi, [esi+0]
.text:00403EA0
.text:00403EA0 loc_403EA0:                             ; CODE XREF: sub_403E10+3B↑j
.text:00403EA0                                         ; sub_403E10+B4↓j ...
.text:00403EA0                 add     esp, 24h
.text:00403EA3                 pop     ebx
.text:00403EA4                 pop     esi
.text:00403EA5                 retn
.text:00403EA6 ; ---------------------------------------------------------------------------
.text:00403EA6
.text:00403EA6 loc_403EA6:                             ; CODE XREF: sub_403E10+5F↑j
.text:00403EA6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00403EAA                 mov     ebx, Code
.text:00403EB0                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:00403EB8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403EBC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00403EBF                 call    sub_405340
.text:00403EC4                 jmp     short loc_403EA0
.text:00403EC6 ; ---------------------------------------------------------------------------
.text:00403EC6
.text:00403EC6 loc_403EC6:                             ; CODE XREF: sub_403E10+47↑j
.text:00403EC6                 test    bl, bl
.text:00403EC8                 jnz     short loc_403E59
.text:00403ECA                 cmp     [esp+2Ch+var_9], 0
.text:00403ECF                 jnz     short loc_403EA0
.text:00403ED1                 jmp     short loc_403E59
.text:00403ED3 ; ---------------------------------------------------------------------------
.text:00403ED3
.text:00403ED3 loc_403ED3:                             ; CODE XREF: sub_403E10+33↑j
.text:00403ED3                 xor     esi, esi
.text:00403ED5                 test    al, al
.text:00403ED7                 jz      loc_403E54
.text:00403EDD                 jmp     loc_403E4D
.text:00403EDD sub_403E10      endp
.text:00403EDD
.text:00403EDD ; ---------------------------------------------------------------------------
.text:00403EE2                 align 10h
.text:00403EF0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_403F10+3↓o
.text:00403F01 ; const char aS_0[]
.text:00403F01 aS_0            db '%s',0               ; DATA XREF: sub_403F10+10↓o
.text:00403F04                 align 10h
.text:00403F10
.text:00403F10 ; =============== S U B R O U T I N E =======================================
.text:00403F10
.text:00403F10 ; Attributes: noreturn
.text:00403F10
.text:00403F10 sub_403F10      proc near               ; CODE XREF: sub_4033A0:loc_4033D9↑p
.text:00403F10                                         ; sub_4033E0+24↑p ...
.text:00403F10
.text:00403F10 Code            = dword ptr -1Ch
.text:00403F10 ErrorMessage    = dword ptr -18h
.text:00403F10 var_14          = dword ptr -14h
.text:00403F10 var_10          = byte ptr -10h
.text:00403F10
.text:00403F10                 sub     esp, 1Ch
.text:00403F13                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00403F1A                 call    ds:libintl_gettext
.text:00403F20                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:00403F28                 mov     edx, Code
.text:00403F2E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00403F36                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00403F3A                 mov     [esp+1Ch+Code], edx ; Code
.text:00403F3D                 call    sub_405340
.text:00403F42                 call    abort
.text:00403F42 sub_403F10      endp
.text:00403F42
.text:00403F42 ; ---------------------------------------------------------------------------
.text:00403F47                 align 10h
.text:00403F50 aLiteral        db 'literal',0          ; DATA XREF: .text:00403F90↓o
.text:00403F58 aShell_0        db 'shell',0            ; DATA XREF: .text:00403F94↓o
.text:00403F5E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00403F98↓o
.text:00403F6B aC_0            db 'c',0                ; DATA XREF: .text:00403F9C↓o
.text:00403F6D aEscape         db 'escape',0           ; DATA XREF: .text:00403FA0↓o
.text:00403F74 aLocale         db 'locale',0           ; DATA XREF: .text:00403FA4↓o
.text:00403F7B aClocale        db 'clocale',0          ; DATA XREF: .text:00403FA8↓o
.text:00403F83                 align 10h
.text:00403F90                 dd offset aLiteral      ; "literal"
.text:00403F94                 dd offset aShell_0      ; "shell"
.text:00403F98                 dd offset aShellAlways  ; "shell-always"
.text:00403F9C                 dd offset aC_0          ; "c"
.text:00403FA0                 dd offset aEscape       ; "escape"
.text:00403FA4                 dd offset aLocale       ; "locale"
.text:00403FA8                 dd offset aClocale      ; "clocale"
.text:00403FAC                 dd 2 dup(0)
.text:00403FB4                 dd 1, 2, 3, 4, 5, 6
.text:00403FCC asc_403FCC:                             ; DATA XREF: sub_403FE0+7E↓o
.text:00403FCC                                         ; sub_403FE0+A39↓o ...
.text:00403FCC                 text "UTF-16LE", '"',27h,'`'
.text:00403FD2                 align 10h
.text:00403FE0
.text:00403FE0 ; =============== S U B R O U T I N E =======================================
.text:00403FE0
.text:00403FE0
.text:00403FE0 ; int __cdecl sub_403FE0(int, int, char *Str, int, int, int)
.text:00403FE0 sub_403FE0      proc near               ; CODE XREF: sub_403FE0+43A↓p
.text:00403FE0                                         ; .text:00404BA3↓p ...
.text:00403FE0
.text:00403FE0 C               = dword ptr -4Ch
.text:00403FE0 Type            = dword ptr -48h
.text:00403FE0 SizeInBytes     = dword ptr -44h
.text:00403FE0 State           = dword ptr -40h
.text:00403FE0 var_3C          = dword ptr -3Ch
.text:00403FE0 var_38          = dword ptr -38h
.text:00403FE0 var_34          = dword ptr -34h
.text:00403FE0 var_30          = dword ptr -30h
.text:00403FE0 var_29          = byte ptr -29h
.text:00403FE0 var_28          = dword ptr -28h
.text:00403FE0 var_22          = byte ptr -22h
.text:00403FE0 var_21          = byte ptr -21h
.text:00403FE0 var_20          = dword ptr -20h
.text:00403FE0 var_1C          = dword ptr -1Ch
.text:00403FE0 var_18          = mbstate_t ptr -18h
.text:00403FE0 arg_0           = dword ptr  4
.text:00403FE0 arg_4           = dword ptr  8
.text:00403FE0 Str             = dword ptr  0Ch
.text:00403FE0 arg_C           = dword ptr  10h
.text:00403FE0 arg_10          = dword ptr  14h
.text:00403FE0 arg_14          = dword ptr  18h
.text:00403FE0
.text:00403FE0                 push    ebp
.text:00403FE1                 push    edi
.text:00403FE2                 push    esi
.text:00403FE3                 push    ebx
.text:00403FE4                 sub     esp, 3Ch
.text:00403FE7                 mov     edx, ds:__mb_cur_max
.text:00403FED                 mov     [esp+4Ch+var_34], 0
.text:00403FF5                 mov     [esp+4Ch+var_1C], 0
.text:00403FFD                 cmp     dword ptr [edx], 1
.text:00404000                 mov     [esp+4Ch+var_20], 0
.text:00404008                 mov     [esp+4Ch+var_21], 0
.text:0040400D                 setz    [esp+4Ch+var_22]
.text:00404012                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00404017                 ja      short def_40401D ; jumptable 0040401D default case, cases 0,1
.text:00404019                 mov     edx, [esp+4Ch+arg_10]
.text:0040401D                 jmp     ds:jpt_40401D[edx*4] ; switch jump
.text:0040401D ; ---------------------------------------------------------------------------
.text:00404024 jpt_40401D      dd offset def_40401D    ; DATA XREF: sub_403FE0+3D↑r
.text:00404024                 dd offset def_40401D    ; jump table for switch statement
.text:00404024                 dd offset loc_404965
.text:00404024                 dd offset loc_404040
.text:00404024                 dd offset loc_40498B
.text:00404024                 dd offset loc_404995
.text:00404024                 dd offset loc_404995
.text:00404040 ; ---------------------------------------------------------------------------
.text:00404040
.text:00404040 loc_404040:                             ; CODE XREF: sub_403FE0+3D↑j
.text:00404040                                         ; DATA XREF: sub_403FE0:jpt_40401D↑o
.text:00404040                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040401D case 3
.text:00404044                 cmp     [esp+4Ch+var_34], eax
.text:00404048                 jnb     short loc_404051
.text:0040404A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040404E                 mov     byte ptr [ebx], 22h ; '"'
.text:00404051
.text:00404051 loc_404051:                             ; CODE XREF: sub_403FE0+68↑j
.text:00404051                 mov     [esp+4Ch+var_34], 1
.text:00404059                 mov     [esp+4Ch+var_21], 1
.text:0040405E                 mov     [esp+4Ch+var_1C], offset asc_403FCC ; "\"'`"
.text:00404066
.text:00404066 loc_404066:                             ; CODE XREF: sub_403FE0+9A6↓j
.text:00404066                 mov     [esp+4Ch+var_20], 1
.text:0040406E
.text:0040406E def_40401D:                             ; CODE XREF: sub_403FE0+37↑j
.text:0040406E                                         ; sub_403FE0+3D↑j ...
.text:0040406E                 xor     ebp, ebp        ; jumptable 0040401D default case, cases 0,1
.text:00404070
.text:00404070 loc_404070:                             ; CODE XREF: sub_403FE0+3DB↓j
.text:00404070                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404075                 jz      loc_404957
.text:0040407B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040407F
.text:0040407F loc_40407F:                             ; CODE XREF: sub_403FE0+980↓j
.text:0040407F                 jz      loc_4048EE
.text:00404085                 cmp     [esp+4Ch+var_21], 0
.text:0040408A                 jz      short loc_4040D0
.text:0040408C                 mov     esi, [esp+4Ch+var_20]
.text:00404090                 test    esi, esi
.text:00404092                 jz      short loc_4040D0
.text:00404094                 mov     ecx, [esp+4Ch+var_20]
.text:00404098                 lea     edi, [ecx+ebp]
.text:0040409B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040409F                 ja      short loc_4040D0
.text:004040A1                 cld
.text:004040A2                 mov     ebx, [esp+4Ch+Str]
.text:004040A6                 mov     edi, [esp+4Ch+var_1C]
.text:004040AA                 add     ebx, ebp
.text:004040AC                 mov     esi, ebx
.text:004040AE                 cmp     ecx, ecx
.text:004040B0                 repe cmpsb
.text:004040B2                 jnz     short loc_4040D0
.text:004040B4                 mov     edx, [esp+4Ch+arg_4]
.text:004040B8                 cmp     [esp+4Ch+var_34], edx
.text:004040BC                 jnb     short loc_4040CA
.text:004040BE                 mov     ecx, [esp+4Ch+arg_0]
.text:004040C2                 mov     eax, [esp+4Ch+var_34]
.text:004040C6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004040CA
.text:004040CA loc_4040CA:                             ; CODE XREF: sub_403FE0+DC↑j
.text:004040CA                 inc     [esp+4Ch+var_34]
.text:004040CE                 mov     esi, esi
.text:004040D0
.text:004040D0 loc_4040D0:                             ; CODE XREF: sub_403FE0+AA↑j
.text:004040D0                                         ; sub_403FE0+B2↑j ...
.text:004040D0                 mov     edi, [esp+4Ch+Str]
.text:004040D4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004040D9                 movzx   eax, bl
.text:004040DC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004040DF                 ja      def_4040E5      ; jumptable 004040E5 default case, cases 1-6,14-31,64
.text:004040E5                 jmp     ds:jpt_4040E5[eax*4] ; switch jump
.text:004040E5 ; ---------------------------------------------------------------------------
.text:004040EC jpt_4040E5      dd offset loc_4042E8, offset def_4040E5, offset def_4040E5
.text:004040EC                                         ; DATA XREF: sub_403FE0+105↑r
.text:004040EC                 dd offset def_4040E5, offset def_4040E5, offset def_4040E5 ; jump table for switch statement
.text:004040EC                 dd offset def_4040E5, offset loc_4043C0, offset loc_4043DE
.text:004040EC                 dd offset loc_4043E2, offset loc_404427, offset loc_40442B
.text:004040EC                 dd offset loc_40442F, offset loc_404433, offset def_4040E5
.text:004040EC                 dd offset def_4040E5, offset def_4040E5, offset def_4040E5
.text:004040EC                 dd offset def_4040E5, offset def_4040E5, offset def_4040E5
.text:004040EC                 dd offset def_4040E5, offset def_4040E5, offset def_4040E5
.text:004040EC                 dd offset def_4040E5, offset def_4040E5, offset def_4040E5
.text:004040EC                 dd offset def_4040E5, offset def_4040E5, offset def_4040E5
.text:004040EC                 dd offset def_4040E5, offset def_4040E5, offset loc_4048B8
.text:004040EC                 dd offset loc_4048B8, offset loc_4048B8, offset loc_4048DA
.text:004040EC                 dd offset loc_4048B8, offset def_4044E2, offset loc_4048B8
.text:004040EC                 dd offset loc_404437, offset loc_4048B8, offset loc_4048B8
.text:004040EC                 dd offset loc_4048B8, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset loc_4048B8
.text:004040EC                 dd offset loc_4048B8, offset loc_4048B8, offset loc_4048B8
.text:004040EC                 dd offset loc_40449C, offset def_4040E5, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset loc_4048B8, offset loc_4048B1
.text:004040EC                 dd offset def_4044E2, offset loc_4048B8, offset def_4044E2
.text:004040EC                 dd offset loc_4048B8, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset loc_4048C8, offset loc_4048B8, offset loc_4048C8
.text:004040EC                 dd offset loc_4048DA
.text:004042E8 ; ---------------------------------------------------------------------------
.text:004042E8
.text:004042E8 loc_4042E8:                             ; CODE XREF: sub_403FE0+105↑j
.text:004042E8                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:004042E8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004040E5 case 0
.text:004042ED                 lea     eax, [ebp+1]
.text:004042F0                 jz      loc_4043A0
.text:004042F6                 mov     esi, [esp+4Ch+arg_4]
.text:004042FA                 cmp     [esp+4Ch+var_34], esi
.text:004042FE                 jnb     short loc_40430C
.text:00404300                 mov     eax, [esp+4Ch+arg_0]
.text:00404304                 mov     ebx, [esp+4Ch+var_34]
.text:00404308                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040430C
.text:0040430C loc_40430C:                             ; CODE XREF: sub_403FE0+31E↑j
.text:0040430C                 inc     [esp+4Ch+var_34]
.text:00404310                 mov     edx, [esp+4Ch+arg_4]
.text:00404314                 cmp     [esp+4Ch+var_34], edx
.text:00404318                 jnb     short loc_404326
.text:0040431A                 mov     edi, [esp+4Ch+arg_0]
.text:0040431E                 mov     ecx, [esp+4Ch+var_34]
.text:00404322                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00404326
.text:00404326 loc_404326:                             ; CODE XREF: sub_403FE0+338↑j
.text:00404326                 inc     [esp+4Ch+var_34]
.text:0040432A                 mov     esi, [esp+4Ch+arg_4]
.text:0040432E                 cmp     [esp+4Ch+var_34], esi
.text:00404332                 jnb     short loc_404340
.text:00404334                 mov     ebx, [esp+4Ch+arg_0]
.text:00404338                 mov     eax, [esp+4Ch+var_34]
.text:0040433C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00404340
.text:00404340 loc_404340:                             ; CODE XREF: sub_403FE0+352↑j
.text:00404340                 inc     [esp+4Ch+var_34]
.text:00404344                 mov     bl, 30h ; '0'
.text:00404346                 lea     esi, [esi+0]
.text:00404349                 lea     edi, [edi+0]
.text:00404350
.text:00404350 def_4044E2:                             ; CODE XREF: sub_403FE0+105↑j
.text:00404350                                         ; sub_403FE0+463↓j ...
.text:00404350                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:00404350                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:00404355                 lea     eax, [ebp+1]
.text:00404358                 jz      short loc_4043A0
.text:0040435A                 mov     cl, bl
.text:0040435C                 mov     edi, [esp+4Ch+arg_14]
.text:00404360                 mov     esi, 1
.text:00404365                 shr     cl, 5
.text:00404368                 movzx   edx, cl
.text:0040436B                 mov     ecx, ebx
.text:0040436D                 and     ecx, 1Fh
.text:00404370                 shl     esi, cl
.text:00404372                 test    [edi+edx*4+4], esi
.text:00404376                 jz      short loc_404392
.text:00404378
.text:00404378 loc_404378:                             ; CODE XREF: sub_403FE0+3FC↓j
.text:00404378                 mov     edx, [esp+4Ch+arg_4]
.text:0040437C                 cmp     [esp+4Ch+var_34], edx
.text:00404380                 jnb     short loc_40438E
.text:00404382                 mov     edi, [esp+4Ch+arg_0]
.text:00404386                 mov     esi, [esp+4Ch+var_34]
.text:0040438A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040438E
.text:0040438E loc_40438E:                             ; CODE XREF: sub_403FE0+3A0↑j
.text:0040438E                 inc     [esp+4Ch+var_34]
.text:00404392
.text:00404392 loc_404392:                             ; CODE XREF: sub_403FE0+396↑j
.text:00404392                 lea     eax, [ebp+1]
.text:00404395                 lea     esi, [esi+0]
.text:00404399                 lea     edi, [edi+0]
.text:004043A0
.text:004043A0 loc_4043A0:                             ; CODE XREF: sub_403FE0+310↑j
.text:004043A0                                         ; sub_403FE0+378↑j ...
.text:004043A0                 mov     ebp, [esp+4Ch+arg_4]
.text:004043A4                 cmp     [esp+4Ch+var_34], ebp
.text:004043A8                 jnb     short loc_4043B5
.text:004043AA                 mov     edx, [esp+4Ch+arg_0]
.text:004043AE                 mov     ecx, [esp+4Ch+var_34]
.text:004043B2                 mov     [ecx+edx], bl
.text:004043B5
.text:004043B5 loc_4043B5:                             ; CODE XREF: sub_403FE0+3C8↑j
.text:004043B5                 inc     [esp+4Ch+var_34]
.text:004043B9                 mov     ebp, eax
.text:004043BB                 jmp     loc_404070
.text:004043C0 ; ---------------------------------------------------------------------------
.text:004043C0
.text:004043C0 loc_4043C0:                             ; CODE XREF: sub_403FE0+105↑j
.text:004043C0                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:004043C0                 mov     dl, 61h ; 'a'   ; jumptable 004040E5 case 7
.text:004043C2                 lea     esi, [esi+0]
.text:004043C9                 lea     edi, [edi+0]
.text:004043D0
.text:004043D0 loc_4043D0:                             ; CODE XREF: sub_403FE0+400↓j
.text:004043D0                                         ; sub_403FE0+409↓j ...
.text:004043D0                 cmp     [esp+4Ch+var_21], 0
.text:004043D5                 lea     eax, [ebp+1]
.text:004043D8                 jz      short loc_4043A0
.text:004043DA                 mov     bl, dl
.text:004043DC                 jmp     short loc_404378
.text:004043DE ; ---------------------------------------------------------------------------
.text:004043DE
.text:004043DE loc_4043DE:                             ; CODE XREF: sub_403FE0+105↑j
.text:004043DE                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:004043DE                 mov     dl, 62h ; 'b'   ; jumptable 004040E5 case 8
.text:004043E0                 jmp     short loc_4043D0
.text:004043E2 ; ---------------------------------------------------------------------------
.text:004043E2
.text:004043E2 loc_4043E2:                             ; CODE XREF: sub_403FE0+105↑j
.text:004043E2                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:004043E2                 mov     dl, 74h ; 't'   ; jumptable 004040E5 case 9
.text:004043E4
.text:004043E4 loc_4043E4:                             ; CODE XREF: sub_403FE0+449↓j
.text:004043E4                                         ; sub_403FE0+455↓j ...
.text:004043E4                 cmp     [esp+4Ch+arg_10], 1
.text:004043E9                 jnz     short loc_4043D0
.text:004043EB
.text:004043EB loc_4043EB:                             ; CODE XREF: sub_403FE0+45C↓j
.text:004043EB                                         ; sub_403FE0+4C1↓j ...
.text:004043EB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 004047B2 cases 91,92,94,96,124
.text:004043F3                 mov     eax, [esp+4Ch+arg_14]
.text:004043F7                 mov     edx, [esp+4Ch+arg_C]
.text:004043FB                 mov     ecx, [esp+4Ch+Str]
.text:004043FF                 mov     ebx, [esp+4Ch+arg_4]
.text:00404403                 mov     [esp+4Ch+var_38], eax ; int
.text:00404407                 mov     ebp, [esp+4Ch+arg_0]
.text:0040440B                 mov     [esp+4Ch+State], edx ; int
.text:0040440F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00404413                 mov     [esp+4Ch+Type], ebx ; int
.text:00404417                 mov     [esp+4Ch+C], ebp ; int
.text:0040441A                 call    sub_403FE0
.text:0040441F
.text:0040441F loc_40441F:                             ; CODE XREF: sub_403FE0+972↓j
.text:0040441F                 add     esp, 3Ch
.text:00404422                 pop     ebx
.text:00404423                 pop     esi
.text:00404424                 pop     edi
.text:00404425                 pop     ebp
.text:00404426                 retn
.text:00404427 ; ---------------------------------------------------------------------------
.text:00404427
.text:00404427 loc_404427:                             ; CODE XREF: sub_403FE0+105↑j
.text:00404427                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:00404427                 mov     dl, 6Eh ; 'n'   ; jumptable 004040E5 case 10
.text:00404429                 jmp     short loc_4043E4
.text:0040442B ; ---------------------------------------------------------------------------
.text:0040442B
.text:0040442B loc_40442B:                             ; CODE XREF: sub_403FE0+105↑j
.text:0040442B                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:0040442B                 mov     dl, 76h ; 'v'   ; jumptable 004040E5 case 11
.text:0040442D                 jmp     short loc_4043D0
.text:0040442F ; ---------------------------------------------------------------------------
.text:0040442F
.text:0040442F loc_40442F:                             ; CODE XREF: sub_403FE0+105↑j
.text:0040442F                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:0040442F                 mov     dl, 66h ; 'f'   ; jumptable 004040E5 case 12
.text:00404431                 jmp     short loc_4043D0
.text:00404433 ; ---------------------------------------------------------------------------
.text:00404433
.text:00404433 loc_404433:                             ; CODE XREF: sub_403FE0+105↑j
.text:00404433                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:00404433                 mov     dl, 72h ; 'r'   ; jumptable 004040E5 case 13
.text:00404435                 jmp     short loc_4043E4
.text:00404437 ; ---------------------------------------------------------------------------
.text:00404437
.text:00404437 loc_404437:                             ; CODE XREF: sub_403FE0+105↑j
.text:00404437                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:00404437                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004040E5 case 39
.text:0040443C                 jz      short loc_4043EB ; jumptable 004047B2 cases 91,92,94,96,124
.text:0040443E                 cmp     [esp+4Ch+arg_10], 2
.text:00404443                 jnz     def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:00404443                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:00404449                 mov     edx, [esp+4Ch+arg_4]
.text:0040444D                 cmp     [esp+4Ch+var_34], edx
.text:00404451                 jnb     short loc_40445F
.text:00404453                 mov     ecx, [esp+4Ch+arg_0]
.text:00404457                 mov     edi, [esp+4Ch+var_34]
.text:0040445B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040445F
.text:0040445F loc_40445F:                             ; CODE XREF: sub_403FE0+471↑j
.text:0040445F                 inc     [esp+4Ch+var_34]
.text:00404463                 mov     eax, [esp+4Ch+arg_4]
.text:00404467                 cmp     [esp+4Ch+var_34], eax
.text:0040446B                 jnb     short loc_404479
.text:0040446D                 mov     esi, [esp+4Ch+arg_0]
.text:00404471                 mov     edx, [esp+4Ch+var_34]
.text:00404475                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00404479
.text:00404479 loc_404479:                             ; CODE XREF: sub_403FE0+48B↑j
.text:00404479                 inc     [esp+4Ch+var_34]
.text:0040447D                 mov     edi, [esp+4Ch+arg_4]
.text:00404481                 cmp     [esp+4Ch+var_34], edi
.text:00404485                 jnb     short loc_404493
.text:00404487                 mov     ecx, [esp+4Ch+arg_0]
.text:0040448B                 mov     eax, [esp+4Ch+var_34]
.text:0040448F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00404493
.text:00404493 loc_404493:                             ; CODE XREF: sub_403FE0+4A5↑j
.text:00404493                                         ; sub_403FE0+5C4↓j ...
.text:00404493                 inc     [esp+4Ch+var_34]
.text:00404497                 jmp     def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:00404497                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:0040449C ; ---------------------------------------------------------------------------
.text:0040449C
.text:0040449C loc_40449C:                             ; CODE XREF: sub_403FE0+105↑j
.text:0040449C                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:0040449C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004040E5 case 63
.text:004044A1                 jz      loc_4043EB      ; jumptable 004047B2 cases 91,92,94,96,124
.text:004044A7                 cmp     [esp+4Ch+arg_10], 3
.text:004044AC                 jnz     def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:004044AC                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:004044B2                 lea     edx, [ebp+2]
.text:004044B5                 cmp     edx, [esp+4Ch+arg_C]
.text:004044B9                 jnb     def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:004044B9                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:004044BF                 mov     esi, [esp+4Ch+Str]
.text:004044C3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004044C8                 jnz     def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:004044C8                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:004044CE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004044D3                 movsx   eax, cl
.text:004044D6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004044D9                 cmp     eax, 1Dh
.text:004044DC                 ja      def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:004044DC                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:004044E2                 jmp     ds:jpt_4044E2[eax*4] ; switch jump
.text:004044E2 ; ---------------------------------------------------------------------------
.text:004044E9                 align 4
.text:004044EC jpt_4044E2      dd offset loc_404564    ; DATA XREF: sub_403FE0+502↑r
.text:004044EC                 dd offset def_4044E2    ; jump table for switch statement
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset loc_404564
.text:004044EC                 dd offset loc_404564
.text:004044EC                 dd offset loc_404564
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset loc_404564
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset loc_404564
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset loc_404564
.text:004044EC                 dd offset loc_404564
.text:004044EC                 dd offset loc_404564
.text:00404564 ; ---------------------------------------------------------------------------
.text:00404564
.text:00404564 loc_404564:                             ; CODE XREF: sub_403FE0+502↑j
.text:00404564                                         ; DATA XREF: sub_403FE0:jpt_4044E2↑o
.text:00404564                 mov     ebp, edx        ; jumptable 004044E2 cases 33,39-41,45,47,60-62
.text:00404566                 mov     bl, cl
.text:00404568                 mov     edx, [esp+4Ch+arg_4]
.text:0040456C                 cmp     [esp+4Ch+var_34], edx
.text:00404570                 jnb     short loc_40457E
.text:00404572                 mov     ecx, [esp+4Ch+arg_0]
.text:00404576                 mov     edi, [esp+4Ch+var_34]
.text:0040457A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040457E
.text:0040457E loc_40457E:                             ; CODE XREF: sub_403FE0+590↑j
.text:0040457E                 inc     [esp+4Ch+var_34]
.text:00404582                 mov     eax, [esp+4Ch+arg_4]
.text:00404586                 cmp     [esp+4Ch+var_34], eax
.text:0040458A                 jnb     short loc_404598
.text:0040458C                 mov     edx, [esp+4Ch+arg_0]
.text:00404590                 mov     esi, [esp+4Ch+var_34]
.text:00404594                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00404598
.text:00404598 loc_404598:                             ; CODE XREF: sub_403FE0+5AA↑j
.text:00404598                 inc     [esp+4Ch+var_34]
.text:0040459C                 mov     edi, [esp+4Ch+arg_4]
.text:004045A0                 cmp     [esp+4Ch+var_34], edi
.text:004045A4                 jnb     loc_404493
.text:004045AA                 mov     eax, [esp+4Ch+arg_0]
.text:004045AE                 mov     ecx, [esp+4Ch+var_34]
.text:004045B2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:004045B6                 jmp     loc_404493
.text:004045B6 ; ---------------------------------------------------------------------------
.text:004045BB                 align 10h
.text:004045C0
.text:004045C0 def_4040E5:                             ; CODE XREF: sub_403FE0+FF↑j
.text:004045C0                                         ; sub_403FE0+105↑j
.text:004045C0                                         ; DATA XREF: ...
.text:004045C0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004040E5 default case, cases 1-6,14-31,64
.text:004045C5                 jz      loc_4046F0
.text:004045CB                 mov     [esp+4Ch+var_28], 1
.text:004045D3                 mov     esi, ds:__mb_cur_max
.text:004045D9                 movzx   edx, bl
.text:004045DC                 cmp     dword ptr [esi], 1
.text:004045DF                 jz      loc_4046D4
.text:004045E5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004045ED                 mov     [esp+4Ch+C], edx ; C
.text:004045F0                 call    _isctype
.text:004045F5
.text:004045F5 loc_4045F5:                             ; CODE XREF: sub_403FE0+705↓j
.text:004045F5                 test    eax, eax
.text:004045F7                 setnz   [esp+4Ch+var_29]
.text:004045FC
.text:004045FC loc_4045FC:                             ; CODE XREF: sub_403FE0+7A5↓j
.text:004045FC                 cmp     [esp+4Ch+var_21], 0
.text:00404601                 lea     eax, [ebp+1]
.text:00404604                 jz      loc_4043A0
.text:0040460A                 cmp     [esp+4Ch+var_29], 0
.text:0040460F                 jnz     def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:0040460F                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:00404615
.text:00404615 loc_404615:                             ; CODE XREF: sub_403FE0+7AB↓j
.text:00404615                 mov     eax, [esp+4Ch+var_28]
.text:00404619                 lea     edx, [eax+ebp]
.text:0040461C                 lea     esi, [esi+0]
.text:00404620
.text:00404620 loc_404620:                             ; CODE XREF: sub_403FE0+6EF↓j
.text:00404620                 cmp     [esp+4Ch+var_21], 0
.text:00404625                 jz      short loc_4046A0
.text:00404627                 cmp     [esp+4Ch+var_29], 0
.text:0040462C                 jnz     short loc_4046A0
.text:0040462E                 mov     edi, [esp+4Ch+arg_4]
.text:00404632                 cmp     [esp+4Ch+var_34], edi
.text:00404636                 jnb     short loc_404644
.text:00404638                 mov     esi, [esp+4Ch+arg_0]
.text:0040463C                 mov     eax, [esp+4Ch+var_34]
.text:00404640                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00404644
.text:00404644 loc_404644:                             ; CODE XREF: sub_403FE0+656↑j
.text:00404644                 inc     [esp+4Ch+var_34]
.text:00404648                 mov     ecx, [esp+4Ch+arg_4]
.text:0040464C                 cmp     [esp+4Ch+var_34], ecx
.text:00404650                 jnb     short loc_404665
.text:00404652                 mov     cl, bl
.text:00404654                 mov     esi, [esp+4Ch+arg_0]
.text:00404658                 mov     edi, [esp+4Ch+var_34]
.text:0040465C                 shr     cl, 6
.text:0040465F                 add     cl, 30h ; '0'
.text:00404662                 mov     [edi+esi], cl
.text:00404665
.text:00404665 loc_404665:                             ; CODE XREF: sub_403FE0+670↑j
.text:00404665                 inc     [esp+4Ch+var_34]
.text:00404669                 mov     edi, [esp+4Ch+arg_4]
.text:0040466D                 cmp     [esp+4Ch+var_34], edi
.text:00404671                 jnb     short loc_404689
.text:00404673                 mov     cl, bl
.text:00404675                 mov     esi, [esp+4Ch+arg_0]
.text:00404679                 shr     cl, 3
.text:0040467C                 mov     edi, [esp+4Ch+var_34]
.text:00404680                 and     cl, 7
.text:00404683                 add     cl, 30h ; '0'
.text:00404686                 mov     [edi+esi], cl
.text:00404689
.text:00404689 loc_404689:                             ; CODE XREF: sub_403FE0+691↑j
.text:00404689                 inc     [esp+4Ch+var_34]
.text:0040468D                 and     bl, 7
.text:00404690                 add     bl, 30h ; '0'
.text:00404693                 lea     esi, [esi+0]
.text:00404699                 lea     edi, [edi+0]
.text:004046A0
.text:004046A0 loc_4046A0:                             ; CODE XREF: sub_403FE0+645↑j
.text:004046A0                                         ; sub_403FE0+64C↑j
.text:004046A0                 lea     eax, [ebp+1]
.text:004046A3                 cmp     edx, eax
.text:004046A5                 jbe     loc_4043A0
.text:004046AB                 mov     ebp, [esp+4Ch+arg_4]
.text:004046AF                 cmp     [esp+4Ch+var_34], ebp
.text:004046B3                 jnb     short loc_4046C0
.text:004046B5                 mov     ecx, [esp+4Ch+arg_0]
.text:004046B9                 mov     edi, [esp+4Ch+var_34]
.text:004046BD                 mov     [edi+ecx], bl
.text:004046C0
.text:004046C0 loc_4046C0:                             ; CODE XREF: sub_403FE0+6D3↑j
.text:004046C0                 inc     [esp+4Ch+var_34]
.text:004046C4                 mov     ebp, eax
.text:004046C6                 mov     eax, [esp+4Ch+Str]
.text:004046CA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:004046CF                 jmp     loc_404620
.text:004046D4 ; ---------------------------------------------------------------------------
.text:004046D4
.text:004046D4 loc_4046D4:                             ; CODE XREF: sub_403FE0+5FF↑j
.text:004046D4                 mov     ecx, ds:_pctype
.text:004046DA                 mov     edi, [ecx]
.text:004046DC                 movzx   eax, word ptr [edi+edx*2]
.text:004046E0                 and     eax, 157h
.text:004046E5                 jmp     loc_4045F5
.text:004046E5 ; ---------------------------------------------------------------------------
.text:004046EA                 align 10h
.text:004046F0
.text:004046F0 loc_4046F0:                             ; CODE XREF: sub_403FE0+5E5↑j
.text:004046F0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004046F5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004046FD                 mov     [esp+4Ch+var_28], 0
.text:00404705                 mov     [esp+4Ch+var_29], 1
.text:0040470A                 jz      loc_40489C
.text:00404710
.text:00404710 loc_404710:                             ; CODE XREF: sub_403FE0+8CC↓j
.text:00404710                 mov     ecx, [esp+4Ch+arg_C]
.text:00404714                 lea     edx, [esp+4Ch+var_18]
.text:00404718                 mov     edi, [esp+4Ch+Str]
.text:0040471C                 mov     [esp+4Ch+State], edx ; State
.text:00404720                 lea     esi, [esp+4Ch+var_18._State]
.text:00404724                 sub     ecx, ebp
.text:00404726                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040472A                 add     edi, ebp
.text:0040472C                 mov     [esp+4Ch+var_30], edi
.text:00404730                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00404734                 mov     [esp+4Ch+C], esi ; DstCh
.text:00404737                 call    mbrtowc
.text:0040473C                 test    eax, eax
.text:0040473E                 mov     edi, eax
.text:00404740                 jz      short loc_404780
.text:00404742                 cmp     eax, 0FFFFFFFFh
.text:00404745                 jz      loc_404892
.text:0040474B                 cmp     eax, 0FFFFFFFEh
.text:0040474E                 jz      loc_404852
.text:00404754                 cmp     [esp+4Ch+arg_10], 1
.text:00404759                 jz      short loc_404790
.text:0040475B
.text:0040475B loc_40475B:                             ; CODE XREF: sub_403FE0+7B9↓j
.text:0040475B                                         ; sub_403FE0+86D↓j
.text:0040475B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00404760                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404768                 mov     [esp+4Ch+C], ecx ; C
.text:0040476B                 call    iswctype
.text:00404770                 test    eax, eax
.text:00404772                 jnz     short loc_404779
.text:00404774                 mov     [esp+4Ch+var_29], 0
.text:00404779
.text:00404779 loc_404779:                             ; CODE XREF: sub_403FE0+792↑j
.text:00404779                 mov     [esp+4Ch+var_28], edi
.text:0040477D                 lea     esi, [esi+0]
.text:00404780
.text:00404780 loc_404780:                             ; CODE XREF: sub_403FE0+760↑j
.text:00404780                                         ; sub_403FE0+87B↓j ...
.text:00404780                 cmp     [esp+4Ch+var_28], 1
.text:00404785                 jbe     loc_4045FC
.text:0040478B                 jmp     loc_404615
.text:00404790 ; ---------------------------------------------------------------------------
.text:00404790
.text:00404790 loc_404790:                             ; CODE XREF: sub_403FE0+779↑j
.text:00404790                 cmp     [esp+4Ch+arg_10], eax
.text:00404794                 mov     edx, 1
.text:00404799                 jnb     short loc_40475B
.text:0040479B
.text:0040479B loc_40479B:                             ; CODE XREF: sub_403FE0+867↓j
.text:0040479B                 mov     ecx, [esp+4Ch+Str]
.text:0040479F                 lea     esi, [edx+ebp]
.text:004047A2                 movsx   eax, byte ptr [esi+ecx]
.text:004047A6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:004047A9                 cmp     eax, 21h
.text:004047AC                 ja      def_4047B2      ; jumptable 004047B2 default case, cases 93,95,97-123
.text:004047B2                 jmp     ds:jpt_4047B2[eax*4] ; switch jump
.text:004047B2 ; ---------------------------------------------------------------------------
.text:004047B9                 align 4
.text:004047BC jpt_4047B2      dd offset loc_4043EB    ; DATA XREF: sub_403FE0+7D2↑r
.text:004047BC                 dd offset loc_4043EB    ; jump table for switch statement
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset loc_4043EB
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset loc_4043EB
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset loc_4043EB
.text:00404844 ; ---------------------------------------------------------------------------
.text:00404844
.text:00404844 def_4047B2:                             ; CODE XREF: sub_403FE0+7CC↑j
.text:00404844                                         ; sub_403FE0+7D2↑j
.text:00404844                                         ; DATA XREF: ...
.text:00404844                 inc     edx             ; jumptable 004047B2 default case, cases 93,95,97-123
.text:00404845                 cmp     edx, edi
.text:00404847                 jb      loc_40479B
.text:0040484D                 jmp     loc_40475B
.text:00404852 ; ---------------------------------------------------------------------------
.text:00404852
.text:00404852 loc_404852:                             ; CODE XREF: sub_403FE0+76E↑j
.text:00404852                 cmp     ebp, [esp+4Ch+arg_C]
.text:00404856                 mov     [esp+4Ch+var_29], 0
.text:0040485B                 jnb     loc_404780
.text:00404861                 mov     eax, [esp+4Ch+var_30]
.text:00404865                 cmp     byte ptr [eax], 0
.text:00404868                 jz      loc_404780
.text:0040486E
.text:0040486E loc_40486E:                             ; CODE XREF: sub_403FE0+8AB↓j
.text:0040486E                 inc     [esp+4Ch+var_28]
.text:00404872                 mov     esi, [esp+4Ch+var_28]
.text:00404876                 lea     eax, [esi+ebp]
.text:00404879                 cmp     eax, [esp+4Ch+arg_C]
.text:0040487D                 jnb     loc_404780
.text:00404883                 mov     edi, [esp+4Ch+Str]
.text:00404887                 cmp     byte ptr [eax+edi], 0
.text:0040488B                 jnz     short loc_40486E
.text:0040488D                 jmp     loc_404780
.text:00404892 ; ---------------------------------------------------------------------------
.text:00404892
.text:00404892 loc_404892:                             ; CODE XREF: sub_403FE0+765↑j
.text:00404892                 mov     [esp+4Ch+var_29], 0
.text:00404897                 jmp     loc_404780
.text:0040489C ; ---------------------------------------------------------------------------
.text:0040489C
.text:0040489C loc_40489C:                             ; CODE XREF: sub_403FE0+72A↑j
.text:0040489C                 mov     edx, [esp+4Ch+Str]
.text:004048A0                 mov     [esp+4Ch+C], edx ; Str
.text:004048A3                 call    strlen
.text:004048A8                 mov     [esp+4Ch+arg_C], eax
.text:004048AC                 jmp     loc_404710
.text:004048B1 ; ---------------------------------------------------------------------------
.text:004048B1
.text:004048B1 loc_4048B1:                             ; CODE XREF: sub_403FE0+105↑j
.text:004048B1                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:004048B1                 mov     dl, bl          ; jumptable 004040E5 case 92
.text:004048B3                 jmp     loc_4043E4
.text:004048B8 ; ---------------------------------------------------------------------------
.text:004048B8
.text:004048B8 loc_4048B8:                             ; CODE XREF: sub_403FE0+105↑j
.text:004048B8                                         ; sub_403FE0+902↓j
.text:004048B8                                         ; DATA XREF: ...
.text:004048B8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004040E5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004048BD                 jnz     def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:004048BD                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:004048C3                 jmp     loc_4043EB      ; jumptable 004047B2 cases 91,92,94,96,124
.text:004048C8 ; ---------------------------------------------------------------------------
.text:004048C8
.text:004048C8 loc_4048C8:                             ; CODE XREF: sub_403FE0+105↑j
.text:004048C8                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:004048C8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004040E5 cases 123,125
.text:004048CD                 jz      short loc_4048E4
.text:004048CF                 cmp     [esp+4Ch+arg_C], 1
.text:004048D4
.text:004048D4 loc_4048D4:                             ; CODE XREF: sub_403FE0+90C↓j
.text:004048D4                 jnz     def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:004048D4                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:004048DA
.text:004048DA loc_4048DA:                             ; CODE XREF: sub_403FE0+105↑j
.text:004048DA                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:004048DA                 test    ebp, ebp        ; jumptable 004040E5 cases 35,126
.text:004048DC                 jnz     def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:004048DC                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:004048E2                 jmp     short loc_4048B8 ; jumptable 004040E5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004048E4 ; ---------------------------------------------------------------------------
.text:004048E4
.text:004048E4 loc_4048E4:                             ; CODE XREF: sub_403FE0+8ED↑j
.text:004048E4                 mov     esi, [esp+4Ch+Str]
.text:004048E8                 cmp     byte ptr [esi+1], 0
.text:004048EC                 jmp     short loc_4048D4
.text:004048EE ; ---------------------------------------------------------------------------
.text:004048EE
.text:004048EE loc_4048EE:                             ; CODE XREF: sub_403FE0:loc_40407F↑j
.text:004048EE                 test    ebp, ebp
.text:004048F0                 jnz     short loc_4048FD
.text:004048F2                 cmp     [esp+4Ch+arg_10], 1
.text:004048F7                 jz      loc_4043EB      ; jumptable 004047B2 cases 91,92,94,96,124
.text:004048FD
.text:004048FD loc_4048FD:                             ; CODE XREF: sub_403FE0+910↑j
.text:004048FD                 mov     esi, [esp+4Ch+var_1C]
.text:00404901                 test    esi, esi
.text:00404903                 jz      short loc_404938
.text:00404905                 mov     edi, [esp+4Ch+var_1C]
.text:00404909                 movzx   eax, byte ptr [edi]
.text:0040490C                 test    al, al
.text:0040490E                 jz      short loc_404938
.text:00404910
.text:00404910 loc_404910:                             ; CODE XREF: sub_403FE0+956↓j
.text:00404910                 mov     ebp, [esp+4Ch+arg_4]
.text:00404914                 cmp     [esp+4Ch+var_34], ebp
.text:00404918                 jnb     short loc_404925
.text:0040491A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040491E                 mov     ebx, [esp+4Ch+var_34]
.text:00404922                 mov     [ebx+ecx], al
.text:00404925
.text:00404925 loc_404925:                             ; CODE XREF: sub_403FE0+938↑j
.text:00404925                 inc     [esp+4Ch+var_1C]
.text:00404929                 inc     [esp+4Ch+var_34]
.text:0040492D                 mov     edx, [esp+4Ch+var_1C]
.text:00404931                 movzx   eax, byte ptr [edx]
.text:00404934                 test    al, al
.text:00404936                 jnz     short loc_404910
.text:00404938
.text:00404938 loc_404938:                             ; CODE XREF: sub_403FE0+923↑j
.text:00404938                                         ; sub_403FE0+92E↑j
.text:00404938                 mov     eax, [esp+4Ch+arg_4]
.text:0040493C                 cmp     [esp+4Ch+var_34], eax
.text:00404940                 jnb     short loc_40494E
.text:00404942                 mov     edi, [esp+4Ch+arg_0]
.text:00404946                 mov     esi, [esp+4Ch+var_34]
.text:0040494A                 mov     byte ptr [esi+edi], 0
.text:0040494E
.text:0040494E loc_40494E:                             ; CODE XREF: sub_403FE0+960↑j
.text:0040494E                 mov     eax, [esp+4Ch+var_34]
.text:00404952                 jmp     loc_40441F
.text:00404957 ; ---------------------------------------------------------------------------
.text:00404957
.text:00404957 loc_404957:                             ; CODE XREF: sub_403FE0+95↑j
.text:00404957                 mov     ebx, [esp+4Ch+Str]
.text:0040495B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00404960                 jmp     loc_40407F
.text:00404965 ; ---------------------------------------------------------------------------
.text:00404965
.text:00404965 loc_404965:                             ; CODE XREF: sub_403FE0+3D↑j
.text:00404965                                         ; DATA XREF: sub_403FE0:jpt_40401D↑o
.text:00404965                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040401D case 2
.text:00404969                 cmp     [esp+4Ch+var_34], edx
.text:0040496D                 jnb     short loc_404976
.text:0040496F                 mov     ecx, [esp+4Ch+arg_0]
.text:00404973                 mov     byte ptr [ecx], 27h ; '''
.text:00404976
.text:00404976 loc_404976:                             ; CODE XREF: sub_403FE0+98D↑j
.text:00404976                 mov     [esp+4Ch+var_34], 1
.text:0040497E                 mov     [esp+4Ch+var_1C], 403FCEh
.text:00404986                 jmp     loc_404066
.text:0040498B ; ---------------------------------------------------------------------------
.text:0040498B
.text:0040498B loc_40498B:                             ; CODE XREF: sub_403FE0+3D↑j
.text:0040498B                                         ; DATA XREF: sub_403FE0:jpt_40401D↑o
.text:0040498B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040401D case 4
.text:00404990                 jmp     def_40401D      ; jumptable 0040401D default case, cases 0,1
.text:00404995 ; ---------------------------------------------------------------------------
.text:00404995
.text:00404995 loc_404995:                             ; CODE XREF: sub_403FE0+3D↑j
.text:00404995                                         ; DATA XREF: sub_403FE0:jpt_40401D↑o
.text:00404995                 mov     [esp+4Ch+C], 403FD0h ; jumptable 0040401D cases 5,6
.text:0040499C                 call    ds:libintl_gettext
.text:004049A2                 cmp     eax, 403FD0h
.text:004049A7                 mov     edi, eax
.text:004049A9                 jz      short loc_404A20
.text:004049AB
.text:004049AB loc_4049AB:                             ; CODE XREF: sub_403FE0+A45↓j
.text:004049AB                                         ; sub_403FE0+A4C↓j
.text:004049AB                 mov     [esp+4Ch+C], 403FCEh
.text:004049B2                 call    ds:libintl_gettext
.text:004049B8                 cmp     eax, 403FCEh
.text:004049BD                 mov     edx, eax
.text:004049BF                 jz      short loc_404A12
.text:004049C1
.text:004049C1 loc_4049C1:                             ; CODE XREF: sub_403FE0+A37↓j
.text:004049C1                                         ; sub_403FE0+A3E↓j
.text:004049C1                 mov     [esp+4Ch+var_1C], edi
.text:004049C5                 cmp     byte ptr [edi], 0
.text:004049C8                 jz      short loc_4049F8
.text:004049CA
.text:004049CA loc_4049CA:                             ; CODE XREF: sub_403FE0+A16↓j
.text:004049CA                 mov     ecx, [esp+4Ch+arg_4]
.text:004049CE                 cmp     [esp+4Ch+var_34], ecx
.text:004049D2                 jnb     short loc_4049E7
.text:004049D4                 mov     ebp, [esp+4Ch+var_1C]
.text:004049D8                 mov     edi, [esp+4Ch+arg_0]
.text:004049DC                 mov     esi, [esp+4Ch+var_34]
.text:004049E0                 movzx   ebx, byte ptr [ebp+0]
.text:004049E4                 mov     [esi+edi], bl
.text:004049E7
.text:004049E7 loc_4049E7:                             ; CODE XREF: sub_403FE0+9F2↑j
.text:004049E7                 inc     [esp+4Ch+var_1C]
.text:004049EB                 inc     [esp+4Ch+var_34]
.text:004049EF                 mov     eax, [esp+4Ch+var_1C]
.text:004049F3                 cmp     byte ptr [eax], 0
.text:004049F6                 jnz     short loc_4049CA
.text:004049F8
.text:004049F8 loc_4049F8:                             ; CODE XREF: sub_403FE0+9E8↑j
.text:004049F8                 mov     [esp+4Ch+var_21], 1
.text:004049FD                 mov     [esp+4Ch+var_1C], edx
.text:00404A01                 mov     [esp+4Ch+C], edx ; Str
.text:00404A04                 call    strlen
.text:00404A09                 mov     [esp+4Ch+var_20], eax
.text:00404A0D                 jmp     def_40401D      ; jumptable 0040401D default case, cases 0,1
.text:00404A12 ; ---------------------------------------------------------------------------
.text:00404A12
.text:00404A12 loc_404A12:                             ; CODE XREF: sub_403FE0+9DF↑j
.text:00404A12                 cmp     [esp+4Ch+arg_10], 6
.text:00404A17                 jnz     short loc_4049C1
.text:00404A19                 mov     edx, offset asc_403FCC ; "\"'`"
.text:00404A1E                 jmp     short loc_4049C1
.text:00404A20 ; ---------------------------------------------------------------------------
.text:00404A20
.text:00404A20 loc_404A20:                             ; CODE XREF: sub_403FE0+9C9↑j
.text:00404A20                 cmp     [esp+4Ch+arg_10], 6
.text:00404A25                 jnz     short loc_4049AB
.text:00404A27                 mov     edi, offset asc_403FCC ; "\"'`"
.text:00404A2C                 jmp     loc_4049AB
.text:00404A2C sub_403FE0      endp
.text:00404A2C
.text:00404A31 ; ---------------------------------------------------------------------------
.text:00404A31                 jmp     short loc_404A40
.text:00404A31 ; ---------------------------------------------------------------------------
.text:00404A33                 align 10h
.text:00404A40
.text:00404A40 loc_404A40:                             ; CODE XREF: .text:00404A31↑j
.text:00404A40                 sub     esp, 0Ch
.text:00404A43                 mov     [esp+4], ebx
.text:00404A47                 mov     [esp+8], esi
.text:00404A4B                 call    _errno
.text:00404A50                 mov     esi, [eax]
.text:00404A52                 mov     dword ptr [esp], 24h ; '$'
.text:00404A59                 call    sub_4033E0
.text:00404A5E                 mov     edx, [esp+10h]
.text:00404A62                 mov     ebx, eax
.text:00404A64                 test    edx, edx
.text:00404A66                 jz      short loc_404AB1
.text:00404A68
.text:00404A68 loc_404A68:                             ; CODE XREF: .text:00404AB6↓j
.text:00404A68                 mov     ecx, [edx]
.text:00404A6A                 mov     [ebx], ecx
.text:00404A6C                 mov     ecx, [edx+4]
.text:00404A6F                 mov     [ebx+4], ecx
.text:00404A72                 mov     ecx, [edx+8]
.text:00404A75                 mov     [ebx+8], ecx
.text:00404A78                 mov     ecx, [edx+0Ch]
.text:00404A7B                 mov     [ebx+0Ch], ecx
.text:00404A7E                 mov     ecx, [edx+10h]
.text:00404A81                 mov     [ebx+10h], ecx
.text:00404A84                 mov     ecx, [edx+14h]
.text:00404A87                 mov     [ebx+14h], ecx
.text:00404A8A                 mov     ecx, [edx+18h]
.text:00404A8D                 mov     [ebx+18h], ecx
.text:00404A90                 mov     ecx, [edx+1Ch]
.text:00404A93                 mov     [ebx+1Ch], ecx
.text:00404A96                 mov     ecx, [edx+20h]
.text:00404A99                 mov     [ebx+20h], ecx
.text:00404A9C                 call    _errno
.text:00404AA1                 mov     [eax], esi
.text:00404AA3                 mov     esi, [esp+8]
.text:00404AA7                 mov     eax, ebx
.text:00404AA9                 mov     ebx, [esp+4]
.text:00404AAD                 add     esp, 0Ch
.text:00404AB0                 retn
.text:00404AB1 ; ---------------------------------------------------------------------------
.text:00404AB1
.text:00404AB1 loc_404AB1:                             ; CODE XREF: .text:00404A66↑j
.text:00404AB1                 mov     edx, offset dword_408190
.text:00404AB6                 jmp     short loc_404A68
.text:00404AB6 ; ---------------------------------------------------------------------------
.text:00404AB8                 align 10h
.text:00404AC0                 mov     eax, [esp+4]
.text:00404AC4                 test    eax, eax
.text:00404AC6                 jz      short loc_404AD0
.text:00404AC8
.text:00404AC8 loc_404AC8:                             ; CODE XREF: .text:00404AD5↓j
.text:00404AC8                 mov     eax, [eax]
.text:00404ACA                 retn
.text:00404ACA ; ---------------------------------------------------------------------------
.text:00404ACB                 align 10h
.text:00404AD0
.text:00404AD0 loc_404AD0:                             ; CODE XREF: .text:00404AC6↑j
.text:00404AD0                 mov     eax, offset dword_408190
.text:00404AD5                 jmp     short loc_404AC8
.text:00404AD5 ; ---------------------------------------------------------------------------
.text:00404AD7                 align 10h
.text:00404AE0                 mov     edx, [esp+4]
.text:00404AE4                 test    edx, edx
.text:00404AE6                 jz      short loc_404AF0
.text:00404AE8
.text:00404AE8 loc_404AE8:                             ; CODE XREF: .text:00404AF5↓j
.text:00404AE8                 mov     ecx, [esp+8]
.text:00404AEC                 mov     [edx], ecx
.text:00404AEE                 retn
.text:00404AEE ; ---------------------------------------------------------------------------
.text:00404AEF                 align 10h
.text:00404AF0
.text:00404AF0 loc_404AF0:                             ; CODE XREF: .text:00404AE6↑j
.text:00404AF0                 mov     edx, offset dword_408190
.text:00404AF5                 jmp     short loc_404AE8
.text:00404AF5 ; ---------------------------------------------------------------------------
.text:00404AF7                 align 10h
.text:00404B00                 sub     esp, 8
.text:00404B03                 mov     eax, [esp+0Ch]
.text:00404B07                 movzx   ecx, byte ptr [esp+10h]
.text:00404B0C                 mov     [esp], ebx
.text:00404B0F                 mov     ebx, [esp+14h]
.text:00404B13                 mov     [esp+4], esi
.text:00404B17                 mov     dl, cl
.text:00404B19                 shr     dl, 5
.text:00404B1C                 movzx   edx, dl
.text:00404B1F                 shl     edx, 2
.text:00404B22                 test    eax, eax
.text:00404B24                 lea     esi, [edx+eax+4]
.text:00404B28                 jz      short loc_404B50
.text:00404B2A
.text:00404B2A loc_404B2A:                             ; CODE XREF: .text:00404B56↓j
.text:00404B2A                 mov     edx, [esi]
.text:00404B2C                 and     ecx, 1Fh
.text:00404B2F                 and     ebx, 1
.text:00404B32                 mov     eax, edx
.text:00404B34                 shr     eax, cl
.text:00404B36                 and     eax, 1
.text:00404B39                 xor     ebx, eax
.text:00404B3B                 shl     ebx, cl
.text:00404B3D                 xor     edx, ebx
.text:00404B3F                 mov     [esi], edx
.text:00404B41                 mov     ebx, [esp]
.text:00404B44                 mov     esi, [esp+4]
.text:00404B48                 add     esp, 8
.text:00404B4B                 retn
.text:00404B4B ; ---------------------------------------------------------------------------
.text:00404B4C                 align 10h
.text:00404B50
.text:00404B50 loc_404B50:                             ; CODE XREF: .text:00404B28↑j
.text:00404B50                 lea     esi, dword_408194[edx]
.text:00404B56                 jmp     short loc_404B2A
.text:00404B56 ; ---------------------------------------------------------------------------
.text:00404B58                 align 10h
.text:00404B60                 sub     esp, 2Ch
.text:00404B63                 mov     [esp+24h], ebx
.text:00404B67                 mov     ebx, [esp+40h]
.text:00404B6B                 mov     [esp+28h], esi
.text:00404B6F                 test    ebx, ebx
.text:00404B71                 jz      short loc_404BC0
.text:00404B73
.text:00404B73 loc_404B73:                             ; CODE XREF: .text:00404BC5↓j
.text:00404B73                 call    _errno
.text:00404B78                 mov     esi, [eax]
.text:00404B7A                 mov     [esp+14h], ebx
.text:00404B7E                 mov     edx, [ebx]
.text:00404B80                 mov     ecx, [esp+38h]
.text:00404B84                 mov     ebx, [esp+3Ch]
.text:00404B88                 mov     [esp+10h], edx
.text:00404B8C                 mov     edx, [esp+34h]
.text:00404B90                 mov     [esp+0Ch], ebx
.text:00404B94                 mov     [esp+8], ecx
.text:00404B98                 mov     [esp+4], edx
.text:00404B9C                 mov     edx, [esp+30h]
.text:00404BA0                 mov     [esp], edx
.text:00404BA3                 call    sub_403FE0
.text:00404BA8                 mov     ebx, eax
.text:00404BAA                 call    _errno
.text:00404BAF                 mov     [eax], esi
.text:00404BB1                 mov     esi, [esp+28h]
.text:00404BB5                 mov     eax, ebx
.text:00404BB7                 mov     ebx, [esp+24h]
.text:00404BBB                 add     esp, 2Ch
.text:00404BBE                 retn
.text:00404BBE ; ---------------------------------------------------------------------------
.text:00404BBF                 align 10h
.text:00404BC0
.text:00404BC0 loc_404BC0:                             ; CODE XREF: .text:00404B71↑j
.text:00404BC0                 mov     ebx, offset dword_408190
.text:00404BC5                 jmp     short loc_404B73
.text:00404BC5 ; ---------------------------------------------------------------------------
.text:00404BC7                 align 10h
.text:00404BD0                 push    ebp
.text:00404BD1                 push    edi
.text:00404BD2                 push    esi
.text:00404BD3                 push    ebx
.text:00404BD4                 sub     esp, 2Ch
.text:00404BD7                 mov     ebp, [esp+48h]
.text:00404BDB                 call    _errno
.text:00404BE0                 mov     edx, [eax]
.text:00404BE2                 test    ebp, ebp
.text:00404BE4                 mov     ebx, ebp
.text:00404BE6                 mov     [esp+28h], edx
.text:00404BEA                 jz      loc_404CA0
.text:00404BF0
.text:00404BF0 loc_404BF0:                             ; CODE XREF: .text:00404CA5↓j
.text:00404BF0                 call    _errno
.text:00404BF5                 mov     edi, [eax]
.text:00404BF7                 mov     esi, ebp
.text:00404BF9                 mov     [esp+14h], ebx
.text:00404BFD                 mov     ecx, [ebx]
.text:00404BFF                 mov     dword ptr [esp], 0
.text:00404C06                 mov     edx, [esp+44h]
.text:00404C0A                 mov     dword ptr [esp+4], 0
.text:00404C12                 mov     eax, [esp+40h]
.text:00404C16                 mov     [esp+10h], ecx
.text:00404C1A                 mov     [esp+0Ch], edx
.text:00404C1E                 mov     [esp+8], eax
.text:00404C22                 call    sub_403FE0
.text:00404C27                 mov     ebx, eax
.text:00404C29                 call    _errno
.text:00404C2E                 mov     [eax], edi
.text:00404C30                 lea     edi, [ebx+1]
.text:00404C33                 mov     [esp], edi
.text:00404C36                 call    sub_4033E0
.text:00404C3B                 mov     [esp+24h], eax
.text:00404C3F                 test    ebp, ebp
.text:00404C41                 jz      short loc_404C92
.text:00404C43
.text:00404C43 loc_404C43:                             ; CODE XREF: .text:00404C97↓j
.text:00404C43                 call    _errno
.text:00404C48                 mov     ebp, [eax]
.text:00404C4A                 mov     [esp+14h], esi
.text:00404C4E                 mov     ecx, [esi]
.text:00404C50                 mov     [esp+4], edi
.text:00404C54                 mov     edx, [esp+44h]
.text:00404C58                 mov     esi, [esp+24h]
.text:00404C5C                 mov     [esp+10h], ecx
.text:00404C60                 mov     eax, [esp+40h]
.text:00404C64                 mov     [esp+0Ch], edx
.text:00404C68                 mov     [esp], esi
.text:00404C6B                 mov     [esp+8], eax
.text:00404C6F                 call    sub_403FE0
.text:00404C74                 call    _errno
.text:00404C79                 mov     [eax], ebp
.text:00404C7B                 call    _errno
.text:00404C80                 mov     ebx, [esp+28h]
.text:00404C84                 mov     [eax], ebx
.text:00404C86                 mov     eax, [esp+24h]
.text:00404C8A                 add     esp, 2Ch
.text:00404C8D                 pop     ebx
.text:00404C8E                 pop     esi
.text:00404C8F                 pop     edi
.text:00404C90                 pop     ebp
.text:00404C91                 retn
.text:00404C92 ; ---------------------------------------------------------------------------
.text:00404C92
.text:00404C92 loc_404C92:                             ; CODE XREF: .text:00404C41↑j
.text:00404C92                 mov     esi, offset dword_408190
.text:00404C97                 jmp     short loc_404C43
.text:00404C97 ; ---------------------------------------------------------------------------
.text:00404C99                 align 10h
.text:00404CA0
.text:00404CA0 loc_404CA0:                             ; CODE XREF: .text:00404BEA↑j
.text:00404CA0                 mov     ebx, offset dword_408190
.text:00404CA5                 jmp     loc_404BF0
.text:00404CA5 ; ---------------------------------------------------------------------------
.text:00404CAA                 align 10h
.text:00404CB0                 sub     esp, 1Ch
.text:00404CB3                 mov     edx, [esp+24h]
.text:00404CB7                 mov     dword ptr [esp+0Ch], offset dword_408190
.text:00404CBF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404CC7                 mov     [esp+4], edx
.text:00404CCB                 mov     edx, [esp+20h]
.text:00404CCF                 mov     [esp], edx
.text:00404CD2                 call    sub_405120
.text:00404CD7                 add     esp, 1Ch
.text:00404CDA                 retn
.text:00404CDA ; ---------------------------------------------------------------------------
.text:00404CDB                 align 10h
.text:00404CE0                 sub     esp, 1Ch
.text:00404CE3                 mov     edx, [esp+20h]
.text:00404CE7                 mov     dword ptr [esp+0Ch], offset dword_408190
.text:00404CEF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404CF7                 mov     [esp+4], edx
.text:00404CFB                 mov     dword ptr [esp], 0
.text:00404D02                 call    sub_405120
.text:00404D07                 add     esp, 1Ch
.text:00404D0A                 retn
.text:00404D0A ; ---------------------------------------------------------------------------
.text:00404D0B                 align 10h
.text:00404D10
.text:00404D10 ; =============== S U B R O U T I N E =======================================
.text:00404D10
.text:00404D10
.text:00404D10 ; int __cdecl sub_404D10(int, int, char *)
.text:00404D10 sub_404D10      proc near               ; CODE XREF: .text:0040375A↑p
.text:00404D10                                         ; sub_403770+1A↑p
.text:00404D10
.text:00404D10 var_BC          = dword ptr -0BCh
.text:00404D10 var_B8          = dword ptr -0B8h
.text:00404D10 var_B4          = dword ptr -0B4h
.text:00404D10 var_B0          = dword ptr -0B0h
.text:00404D10 var_AC          = dword ptr -0ACh
.text:00404D10 var_A8          = dword ptr -0A8h
.text:00404D10 var_A4          = dword ptr -0A4h
.text:00404D10 var_A0          = dword ptr -0A0h
.text:00404D10 var_9C          = dword ptr -9Ch
.text:00404D10 var_98          = dword ptr -98h
.text:00404D10 var_94          = dword ptr -94h
.text:00404D10 var_90          = dword ptr -90h
.text:00404D10 var_8C          = dword ptr -8Ch
.text:00404D10 var_7C          = dword ptr -7Ch
.text:00404D10 var_78          = dword ptr -78h
.text:00404D10 var_74          = dword ptr -74h
.text:00404D10 var_70          = dword ptr -70h
.text:00404D10 var_6C          = dword ptr -6Ch
.text:00404D10 var_68          = dword ptr -68h
.text:00404D10 var_64          = dword ptr -64h
.text:00404D10 var_60          = dword ptr -60h
.text:00404D10 var_5C          = dword ptr -5Ch
.text:00404D10 var_4C          = dword ptr -4Ch
.text:00404D10 var_48          = dword ptr -48h
.text:00404D10 var_44          = dword ptr -44h
.text:00404D10 var_40          = dword ptr -40h
.text:00404D10 var_3C          = dword ptr -3Ch
.text:00404D10 var_38          = dword ptr -38h
.text:00404D10 var_34          = dword ptr -34h
.text:00404D10 var_30          = dword ptr -30h
.text:00404D10 var_2C          = dword ptr -2Ch
.text:00404D10 arg_0           = dword ptr  4
.text:00404D10 arg_4           = dword ptr  8
.text:00404D10 arg_8           = dword ptr  0Ch
.text:00404D10
.text:00404D10                 push    ebp
.text:00404D11                 xor     eax, eax
.text:00404D13                 mov     ecx, 8
.text:00404D18                 push    edi
.text:00404D19                 push    esi
.text:00404D1A                 push    ebx
.text:00404D1B                 sub     esp, 0ACh
.text:00404D21                 mov     ebp, [esp+0BCh+arg_4]
.text:00404D28                 cld
.text:00404D29                 lea     edi, [esp+0BCh+var_A8]
.text:00404D2D                 mov     [esp+0BCh+var_AC], ebp
.text:00404D31                 rep stosd
.text:00404D33                 mov     eax, [esp+0BCh+var_8C]
.text:00404D37                 mov     edi, [esp+0BCh+var_AC]
.text:00404D3B                 mov     esi, [esp+0BCh+var_A8]
.text:00404D3F                 mov     [esp+0BCh+var_5C], eax
.text:00404D43                 mov     ebp, [esp+0BCh+var_A4]
.text:00404D47                 mov     eax, [esp+0BCh+var_AC]
.text:00404D4B                 mov     [esp+0BCh+var_7C], edi
.text:00404D4F                 mov     ecx, [esp+0BCh+var_94]
.text:00404D53                 mov     edi, [esp+0BCh+var_A0]
.text:00404D57                 mov     [esp+0BCh+var_78], esi
.text:00404D5B                 mov     edx, [esp+0BCh+var_90]
.text:00404D5F                 mov     esi, [esp+0BCh+var_9C]
.text:00404D63                 mov     [esp+0BCh+var_4C], eax
.text:00404D67                 mov     ebx, [esp+0BCh+var_98]
.text:00404D6B                 mov     eax, [esp+0BCh+var_A8]
.text:00404D6F                 mov     [esp+0BCh+var_74], ebp
.text:00404D73                 mov     [esp+0BCh+var_70], edi
.text:00404D77                 mov     [esp+0BCh+var_6C], esi
.text:00404D7B                 mov     [esp+0BCh+var_68], ebx
.text:00404D7F                 mov     [esp+0BCh+var_64], ecx
.text:00404D83                 mov     [esp+0BCh+var_60], edx
.text:00404D87                 mov     [esp+0BCh+var_48], eax
.text:00404D8B                 mov     [esp+0BCh+var_44], ebp
.text:00404D8F                 mov     [esp+0BCh+var_40], edi
.text:00404D93                 mov     [esp+0BCh+var_3C], esi
.text:00404D9A                 mov     [esp+0BCh+var_38], ebx
.text:00404DA1                 mov     ebx, [esp+0BCh+var_8C]
.text:00404DA5                 mov     [esp+0BCh+var_30], edx
.text:00404DAC                 mov     edx, [esp+0BCh+arg_8]
.text:00404DB3                 mov     [esp+0BCh+var_34], ecx
.text:00404DBA                 lea     ecx, [esp+0BCh+var_4C]
.text:00404DBE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00404DC2                 mov     edx, [esp+0BCh+arg_0]
.text:00404DC9                 mov     [esp+0BCh+var_2C], ebx
.text:00404DD0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00404DD4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00404DDC                 mov     [esp+0BCh+var_BC], edx ; int
.text:00404DDF                 call    sub_405120
.text:00404DE4                 add     esp, 0ACh
.text:00404DEA                 pop     ebx
.text:00404DEB                 pop     esi
.text:00404DEC                 pop     edi
.text:00404DED                 pop     ebp
.text:00404DEE                 retn
.text:00404DEE sub_404D10      endp
.text:00404DEE
.text:00404DEE ; ---------------------------------------------------------------------------
.text:00404DEF                 align 10h
.text:00404DF0                 push    ebp
.text:00404DF1                 xor     eax, eax
.text:00404DF3                 mov     ecx, 8
.text:00404DF8                 push    edi
.text:00404DF9                 push    esi
.text:00404DFA                 push    ebx
.text:00404DFB                 sub     esp, 0ACh
.text:00404E01                 mov     edx, [esp+0C4h]
.text:00404E08                 cld
.text:00404E09                 lea     edi, [esp+14h]
.text:00404E0D                 mov     [esp+10h], edx
.text:00404E11                 rep stosd
.text:00404E13                 mov     eax, [esp+30h]
.text:00404E17                 mov     ebp, [esp+10h]
.text:00404E1B                 mov     edi, [esp+14h]
.text:00404E1F                 mov     [esp+60h], eax
.text:00404E23                 mov     esi, [esp+20h]
.text:00404E27                 mov     eax, [esp+10h]
.text:00404E2B                 mov     [esp+40h], ebp
.text:00404E2F                 mov     ecx, [esp+28h]
.text:00404E33                 mov     ebp, [esp+18h]
.text:00404E37                 mov     [esp+44h], edi
.text:00404E3B                 mov     edx, [esp+2Ch]
.text:00404E3F                 mov     edi, [esp+1Ch]
.text:00404E43                 mov     [esp+70h], eax
.text:00404E47                 mov     ebx, [esp+24h]
.text:00404E4B                 mov     eax, [esp+14h]
.text:00404E4F                 mov     [esp+48h], ebp
.text:00404E53                 mov     [esp+4Ch], edi
.text:00404E57                 mov     [esp+50h], esi
.text:00404E5B                 mov     [esp+54h], ebx
.text:00404E5F                 mov     [esp+58h], ecx
.text:00404E63                 mov     [esp+5Ch], edx
.text:00404E67                 mov     [esp+74h], eax
.text:00404E6B                 mov     [esp+78h], ebp
.text:00404E6F                 mov     [esp+7Ch], edi
.text:00404E73                 mov     [esp+80h], esi
.text:00404E7A                 mov     [esp+84h], ebx
.text:00404E81                 mov     esi, [esp+30h]
.text:00404E85                 lea     ebx, [esp+70h]
.text:00404E89                 mov     [esp+8Ch], edx
.text:00404E90                 mov     edx, [esp+0C8h]
.text:00404E97                 mov     [esp+88h], ecx
.text:00404E9E                 mov     ecx, [esp+0CCh]
.text:00404EA5                 mov     [esp+4], edx
.text:00404EA9                 mov     edx, [esp+0C0h]
.text:00404EB0                 mov     [esp+90h], esi
.text:00404EB7                 mov     [esp+0Ch], ebx
.text:00404EBB                 mov     [esp+8], ecx
.text:00404EBF                 mov     [esp], edx
.text:00404EC2                 call    sub_405120
.text:00404EC7                 add     esp, 0ACh
.text:00404ECD                 pop     ebx
.text:00404ECE                 pop     esi
.text:00404ECF                 pop     edi
.text:00404ED0                 pop     ebp
.text:00404ED1                 retn
.text:00404ED1 ; ---------------------------------------------------------------------------
.text:00404ED2                 align 10h
.text:00404EE0                 push    ebp
.text:00404EE1                 xor     eax, eax
.text:00404EE3                 mov     ecx, 8
.text:00404EE8                 push    edi
.text:00404EE9                 push    esi
.text:00404EEA                 push    ebx
.text:00404EEB                 sub     esp, 0ACh
.text:00404EF1                 mov     edi, [esp+0C0h]
.text:00404EF8                 cld
.text:00404EF9                 mov     [esp+10h], edi
.text:00404EFD                 lea     edi, [esp+14h]
.text:00404F01                 rep stosd
.text:00404F03                 mov     eax, [esp+30h]
.text:00404F07                 mov     esi, [esp+10h]
.text:00404F0B                 mov     ebx, [esp+14h]
.text:00404F0F                 mov     [esp+60h], eax
.text:00404F13                 mov     ebp, [esp+18h]
.text:00404F17                 mov     eax, [esp+10h]
.text:00404F1B                 mov     [esp+40h], esi
.text:00404F1F                 mov     edi, [esp+1Ch]
.text:00404F23                 mov     esi, [esp+20h]
.text:00404F27                 mov     [esp+44h], ebx
.text:00404F2B                 mov     ecx, [esp+28h]
.text:00404F2F                 mov     edx, [esp+2Ch]
.text:00404F33                 mov     [esp+70h], eax
.text:00404F37                 mov     ebx, [esp+24h]
.text:00404F3B                 mov     eax, [esp+14h]
.text:00404F3F                 mov     [esp+48h], ebp
.text:00404F43                 mov     [esp+4Ch], edi
.text:00404F47                 mov     [esp+50h], esi
.text:00404F4B                 mov     [esp+54h], ebx
.text:00404F4F                 mov     [esp+58h], ecx
.text:00404F53                 mov     [esp+5Ch], edx
.text:00404F57                 mov     [esp+74h], eax
.text:00404F5B                 mov     [esp+78h], ebp
.text:00404F5F                 mov     [esp+7Ch], edi
.text:00404F63                 mov     [esp+80h], esi
.text:00404F6A                 mov     [esp+84h], ebx
.text:00404F71                 mov     [esp+8Ch], edx
.text:00404F78                 lea     edx, [esp+70h]
.text:00404F7C                 mov     [esp+88h], ecx
.text:00404F83                 mov     ecx, [esp+30h]
.text:00404F87                 mov     [esp+0Ch], edx
.text:00404F8B                 mov     edx, [esp+0C4h]
.text:00404F92                 mov     [esp+90h], ecx
.text:00404F99                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404FA1                 mov     [esp+4], edx
.text:00404FA5                 mov     dword ptr [esp], 0
.text:00404FAC                 call    sub_405120
.text:00404FB1                 add     esp, 0ACh
.text:00404FB7                 pop     ebx
.text:00404FB8                 pop     esi
.text:00404FB9                 pop     edi
.text:00404FBA                 pop     ebp
.text:00404FBB                 retn
.text:00404FBB ; ---------------------------------------------------------------------------
.text:00404FBC                 align 10h
.text:00404FC0                 push    edi
.text:00404FC1                 push    esi
.text:00404FC2                 push    ebx
.text:00404FC3                 sub     esp, 40h
.text:00404FC6                 mov     edx, ds:dword_40819C
.text:00404FCC                 mov     ebx, ds:dword_408190
.text:00404FD2                 mov     esi, ds:dword_408198
.text:00404FD8                 mov     edi, ds:dword_408194
.text:00404FDE                 mov     [esp+1Ch], edx
.text:00404FE2                 mov     ecx, ds:dword_4081A0
.text:00404FE8                 mov     edx, ds:dword_4081B0
.text:00404FEE                 mov     [esp+10h], ebx
.text:00404FF2                 mov     ebx, ds:dword_4081A4
.text:00404FF8                 mov     [esp+30h], edx
.text:00404FFC                 movzx   edx, byte ptr [esp+54h]
.text:00405001                 mov     [esp+18h], esi
.text:00405005                 mov     esi, ds:dword_4081AC
.text:0040500B                 mov     [esp+14h], edi
.text:0040500F                 mov     edi, ds:dword_4081A8
.text:00405015                 mov     [esp+20h], ecx
.text:00405019                 mov     cl, dl
.text:0040501B                 shr     cl, 5
.text:0040501E                 mov     [esp+24h], ebx
.text:00405022                 movzx   ebx, cl
.text:00405025                 mov     [esp+2Ch], esi
.text:00405029                 lea     esi, [esp+10h]
.text:0040502D                 mov     [esp+28h], edi
.text:00405031                 lea     edi, [esi+ebx*4]
.text:00405034                 mov     ebx, edx
.text:00405036                 mov     edx, [edi+4]
.text:00405039                 and     ebx, 1Fh
.text:0040503C                 mov     cl, bl
.text:0040503E                 mov     eax, edx
.text:00405040                 shr     eax, cl
.text:00405042                 and     eax, 1
.text:00405045                 xor     eax, 1
.text:00405048                 shl     eax, cl
.text:0040504A                 xor     edx, eax
.text:0040504C                 mov     [edi+4], edx
.text:0040504F                 mov     edx, [esp+50h]
.text:00405053                 mov     [esp+0Ch], esi
.text:00405057                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040505F                 mov     [esp+4], edx
.text:00405063                 mov     dword ptr [esp], 0
.text:0040506A                 call    sub_405120
.text:0040506F                 add     esp, 40h
.text:00405072                 pop     ebx
.text:00405073                 pop     esi
.text:00405074                 pop     edi
.text:00405075                 retn
.text:00405075 ; ---------------------------------------------------------------------------
.text:00405076                 align 10h
.text:00405080
.text:00405080 ; =============== S U B R O U T I N E =======================================
.text:00405080
.text:00405080
.text:00405080 ; int __cdecl sub_405080(char *)
.text:00405080 sub_405080      proc near               ; CODE XREF: sub_403E10+64↑p
.text:00405080
.text:00405080 var_4C          = dword ptr -4Ch
.text:00405080 var_48          = dword ptr -48h
.text:00405080 var_44          = dword ptr -44h
.text:00405080 var_40          = dword ptr -40h
.text:00405080 var_3C          = dword ptr -3Ch
.text:00405080 var_38          = dword ptr -38h
.text:00405080 var_34          = dword ptr -34h
.text:00405080 var_30          = dword ptr -30h
.text:00405080 var_2C          = dword ptr -2Ch
.text:00405080 var_28          = dword ptr -28h
.text:00405080 var_24          = dword ptr -24h
.text:00405080 var_20          = dword ptr -20h
.text:00405080 var_1C          = dword ptr -1Ch
.text:00405080 arg_0           = dword ptr  4
.text:00405080
.text:00405080                 sub     esp, 4Ch
.text:00405083                 mov     ecx, ds:dword_408190
.text:00405089                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00405091                 mov     edx, ds:dword_408194
.text:00405097                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040509E                 mov     [esp+4Ch+var_3C], ecx
.text:004050A2                 mov     ecx, ds:dword_40819C
.text:004050A8                 mov     [esp+4Ch+var_38], edx
.text:004050AC                 mov     edx, ds:dword_408198
.text:004050B2                 mov     [esp+4Ch+var_30], ecx
.text:004050B6                 mov     ecx, ds:dword_4081A0
.text:004050BC                 mov     eax, edx
.text:004050BE                 shr     eax, 1Ah
.text:004050C1                 and     eax, 1
.text:004050C4                 xor     eax, 1
.text:004050C7                 mov     [esp+4Ch+var_2C], ecx
.text:004050CB                 shl     eax, 1Ah
.text:004050CE                 mov     ecx, ds:dword_4081A4
.text:004050D4                 xor     edx, eax
.text:004050D6                 mov     [esp+4Ch+var_34], edx
.text:004050DA                 mov     edx, [esp+4Ch+arg_0]
.text:004050DE                 mov     [esp+4Ch+var_28], ecx
.text:004050E2                 mov     ecx, ds:dword_4081A8
.text:004050E8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004050EC                 mov     [esp+4Ch+var_24], ecx
.text:004050F0                 mov     ecx, ds:dword_4081AC
.text:004050F6                 mov     [esp+4Ch+var_20], ecx
.text:004050FA                 mov     ecx, ds:dword_4081B0
.text:00405100                 mov     [esp+4Ch+var_1C], ecx
.text:00405104                 lea     ecx, [esp+4Ch+var_3C]
.text:00405108                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040510C                 call    sub_405120
.text:00405111                 add     esp, 4Ch
.text:00405114                 retn
.text:00405114 sub_405080      endp
.text:00405114
.text:00405114 ; ---------------------------------------------------------------------------
.text:00405115                 align 10h
.text:00405120
.text:00405120 ; =============== S U B R O U T I N E =======================================
.text:00405120
.text:00405120
.text:00405120 ; int __cdecl sub_405120(int, char *, int, int)
.text:00405120 sub_405120      proc near               ; CODE XREF: .text:00404CD2↑p
.text:00405120                                         ; .text:00404D02↑p ...
.text:00405120
.text:00405120 Block           = dword ptr -2Ch
.text:00405120 var_28          = dword ptr -28h
.text:00405120 Str             = dword ptr -24h
.text:00405120 var_20          = dword ptr -20h
.text:00405120 var_1C          = dword ptr -1Ch
.text:00405120 var_18          = dword ptr -18h
.text:00405120 var_14          = dword ptr -14h
.text:00405120 arg_0           = dword ptr  4
.text:00405120 arg_4           = dword ptr  8
.text:00405120 arg_8           = dword ptr  0Ch
.text:00405120 arg_C           = dword ptr  10h
.text:00405120
.text:00405120                 push    ebp
.text:00405121                 push    edi
.text:00405122                 push    esi
.text:00405123                 push    ebx
.text:00405124                 sub     esp, 1Ch
.text:00405127                 call    _errno
.text:0040512C                 mov     edx, [eax]
.text:0040512E                 mov     eax, [esp+2Ch+arg_0]
.text:00405132                 mov     [esp+2Ch+var_14], edx
.text:00405136                 test    eax, eax
.text:00405138                 js      loc_4052DA
.text:0040513E                 mov     eax, [esp+2Ch+arg_0]
.text:00405142                 cmp     dword_407040, eax
.text:00405148                 ja      short loc_4051C0
.text:0040514A                 mov     esi, eax
.text:0040514C                 inc     esi
.text:0040514D                 cmp     esi, 1FFFFFFFh
.text:00405153                 ja      loc_4052DF
.text:00405159                 mov     ebx, off_40704C
.text:0040515F                 cmp     ebx, offset dword_407044
.text:00405165                 jz      loc_4052B1
.text:0040516B
.text:0040516B loc_40516B:                             ; CODE XREF: sub_405120+1B5↓j
.text:0040516B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040516E                 lea     ecx, ds:0[esi*8]
.text:00405175                 mov     ebp, esi
.text:00405177                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040517B                 call    sub_403470
.text:00405180                 mov     off_40704C, eax
.text:00405185                 mov     ebx, dword_407040
.text:0040518B                 sub     ebp, ebx
.text:0040518D                 lea     edi, [eax+ebx*8]
.text:00405190                 lea     eax, ds:0[ebp*8]
.text:00405197                 cmp     eax, 7
.text:0040519A                 jbe     short loc_4051B0
.text:0040519C                 test    edi, 4
.text:004051A2                 jz      short loc_4051B0
.text:004051A4                 mov     dword ptr [edi], 0
.text:004051AA                 sub     eax, 4
.text:004051AD                 add     edi, 4
.text:004051B0
.text:004051B0 loc_4051B0:                             ; CODE XREF: sub_405120+7A↑j
.text:004051B0                                         ; sub_405120+82↑j
.text:004051B0                 cld
.text:004051B1                 mov     ecx, eax
.text:004051B3                 shr     ecx, 2
.text:004051B6                 xor     eax, eax
.text:004051B8                 rep stosd
.text:004051BA                 mov     dword_407040, esi
.text:004051C0
.text:004051C0 loc_4051C0:                             ; CODE XREF: sub_405120+28↑j
.text:004051C0                 mov     esi, off_40704C
.text:004051C6                 mov     eax, [esp+2Ch+arg_0]
.text:004051CA                 mov     ebp, [esi+eax*8]
.text:004051CD                 mov     edi, [esi+eax*8+4]
.text:004051D1                 mov     esi, [esp+2Ch+arg_C]
.text:004051D5                 test    esi, esi
.text:004051D7                 jz      loc_4052A7
.text:004051DD
.text:004051DD loc_4051DD:                             ; CODE XREF: sub_405120+18C↓j
.text:004051DD                 call    _errno
.text:004051E2                 mov     ebx, [eax]
.text:004051E4                 mov     [esp+2Ch+var_18], esi ; int
.text:004051E8                 mov     ecx, [esi]
.text:004051EA                 mov     [esp+2Ch+Block], edi ; int
.text:004051ED                 mov     edx, [esp+2Ch+arg_8]
.text:004051F1                 mov     [esp+2Ch+var_28], ebp ; int
.text:004051F5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004051F9                 mov     ecx, [esp+2Ch+arg_4]
.text:004051FD                 mov     [esp+2Ch+var_20], edx ; int
.text:00405201                 mov     [esp+2Ch+Str], ecx ; Str
.text:00405205                 call    sub_403FE0
.text:0040520A                 mov     esi, eax
.text:0040520C                 call    _errno
.text:00405211                 mov     [eax], ebx
.text:00405213                 cmp     ebp, esi
.text:00405215                 ja      short loc_40528B
.text:00405217                 lea     ebp, [esi+1]
.text:0040521A                 mov     ebx, off_40704C
.text:00405220                 cmp     edi, offset unk_408090
.text:00405226                 mov     esi, [esp+2Ch+arg_0]
.text:0040522A                 mov     [ebx+esi*8], ebp
.text:0040522D                 jz      short loc_40523D
.text:0040522F                 mov     [esp+2Ch+Block], edi ; Block
.text:00405232                 call    free
.text:00405237                 mov     ebx, off_40704C
.text:0040523D
.text:0040523D loc_40523D:                             ; CODE XREF: sub_405120+10D↑j
.text:0040523D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00405240                 call    sub_4033E0
.text:00405245                 mov     esi, [esp+2Ch+arg_C]
.text:00405249                 mov     edi, eax
.text:0040524B                 mov     eax, [esp+2Ch+arg_0]
.text:0040524F                 test    esi, esi
.text:00405251                 mov     [ebx+eax*8+4], edi
.text:00405255                 jz      short loc_4052A0
.text:00405257
.text:00405257 loc_405257:                             ; CODE XREF: sub_405120+185↓j
.text:00405257                 call    _errno
.text:0040525C                 mov     ebx, [eax]
.text:0040525E                 mov     [esp+2Ch+var_18], esi ; int
.text:00405262                 mov     ecx, [esi]
.text:00405264                 mov     [esp+2Ch+Block], edi ; int
.text:00405267                 mov     edx, [esp+2Ch+arg_8]
.text:0040526B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040526F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405273                 mov     ecx, [esp+2Ch+arg_4]
.text:00405277                 mov     [esp+2Ch+var_20], edx ; int
.text:0040527B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040527F                 call    sub_403FE0
.text:00405284                 call    _errno
.text:00405289                 mov     [eax], ebx
.text:0040528B
.text:0040528B loc_40528B:                             ; CODE XREF: sub_405120+F5↑j
.text:0040528B                 call    _errno
.text:00405290                 mov     ebp, [esp+2Ch+var_14]
.text:00405294                 mov     [eax], ebp
.text:00405296                 add     esp, 1Ch
.text:00405299                 mov     eax, edi
.text:0040529B                 pop     ebx
.text:0040529C                 pop     esi
.text:0040529D                 pop     edi
.text:0040529E                 pop     ebp
.text:0040529F                 retn
.text:004052A0 ; ---------------------------------------------------------------------------
.text:004052A0
.text:004052A0 loc_4052A0:                             ; CODE XREF: sub_405120+135↑j
.text:004052A0                 mov     esi, offset dword_408190
.text:004052A5                 jmp     short loc_405257
.text:004052A7 ; ---------------------------------------------------------------------------
.text:004052A7
.text:004052A7 loc_4052A7:                             ; CODE XREF: sub_405120+B7↑j
.text:004052A7                 mov     esi, offset dword_408190
.text:004052AC                 jmp     loc_4051DD
.text:004052B1 ; ---------------------------------------------------------------------------
.text:004052B1
.text:004052B1 loc_4052B1:                             ; CODE XREF: sub_405120+45↑j
.text:004052B1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004052B8                 call    sub_4033E0
.text:004052BD                 mov     off_40704C, eax
.text:004052C2                 mov     edi, dword_407044
.text:004052C8                 mov     ebx, eax
.text:004052CA                 mov     ecx, off_407048
.text:004052D0                 mov     [eax], edi
.text:004052D2                 mov     [eax+4], ecx
.text:004052D5                 jmp     loc_40516B
.text:004052DA ; ---------------------------------------------------------------------------
.text:004052DA
.text:004052DA loc_4052DA:                             ; CODE XREF: sub_405120+18↑j
.text:004052DA                 call    abort
.text:004052DF ; ---------------------------------------------------------------------------
.text:004052DF
.text:004052DF loc_4052DF:                             ; CODE XREF: sub_405120+33↑j
.text:004052DF                 call    sub_403F10
.text:004052DF sub_405120      endp
.text:004052DF
.text:004052DF ; ---------------------------------------------------------------------------
.text:004052E4                 align 10h
.text:004052F0
.text:004052F0 ; =============== S U B R O U T I N E =======================================
.text:004052F0
.text:004052F0 ; Attributes: thunk
.text:004052F0
.text:004052F0 libintl_bindtextdomain proc near
.text:004052F0                 jmp     ds:__imp_libintl_bindtextdomain
.text:004052F0 libintl_bindtextdomain endp
.text:004052F0
.text:004052F0 ; ---------------------------------------------------------------------------
.text:004052F6                 align 10h
.text:00405300                 jmp     ds:libintl_textdomain
.text:00405300 ; ---------------------------------------------------------------------------
.text:00405306                 align 10h
.text:00405310                 jmp     ds:libintl_gettext
.text:00405310 ; ---------------------------------------------------------------------------
.text:00405316                 align 10h
.text:00405320 ; const char aS_1[]
.text:00405320 aS_1            db ': %s',0             ; DATA XREF: sub_405340+B8↓o
.text:00405320                                         ; sub_405444+122↓o
.text:00405325 aUnknownSystemE db 'Unknown system error',0
.text:00405325                                         ; DATA XREF: sub_405340:loc_40540D↓o
.text:00405325                                         ; sub_405444:loc_40557E↓o
.text:0040533A ; const char aS_2[]
.text:0040533A aS_2            db '%s: ',0             ; DATA XREF: sub_405340:loc_405414↓o
.text:0040533F                 align 10h
.text:00405340
.text:00405340 ; =============== S U B R O U T I N E =======================================
.text:00405340
.text:00405340
.text:00405340 ; int __cdecl sub_405340(int Code, int ErrorMessage, char *, char)
.text:00405340 sub_405340      proc near               ; CODE XREF: sub_401770+2B9↑p
.text:00405340                                         ; sub_401770+2FE↑p ...
.text:00405340
.text:00405340 Stream          = dword ptr -1Ch
.text:00405340 Format          = dword ptr -18h
.text:00405340 ArgList         = dword ptr -14h
.text:00405340 Code            = dword ptr  4
.text:00405340 ErrorMessage    = dword ptr  8
.text:00405340 arg_8           = dword ptr  0Ch
.text:00405340 arg_C           = byte ptr  10h
.text:00405340
.text:00405340                 push    esi
.text:00405341                 push    ebx
.text:00405342                 sub     esp, 14h
.text:00405345                 mov     edx, ds:_iob
.text:0040534B                 mov     esi, [esp+1Ch+Code]
.text:0040534F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00405353                 add     edx, 20h ; ' '
.text:00405356                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405359                 call    fflush
.text:0040535E                 mov     eax, ds:dword_408B60
.text:00405363                 test    eax, eax
.text:00405365                 jz      loc_405414
.text:0040536B                 call    eax ; dword_408B60
.text:0040536D
.text:0040536D loc_40536D:                             ; CODE XREF: sub_405340+F7↓j
.text:0040536D                 lea     edx, [esp+1Ch+arg_C]
.text:00405371                 mov     ecx, [esp+1Ch+arg_8]
.text:00405375                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00405379                 mov     edx, ds:_iob
.text:0040537F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00405383                 add     edx, 40h ; '@'
.text:00405386                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405389                 call    vfprintf
.text:0040538E                 inc     ds:dword_408B70
.text:00405394                 test    ebx, ebx
.text:00405396                 jnz     short loc_4053E2
.text:00405398
.text:00405398 loc_405398:                             ; CODE XREF: sub_405340+CB↓j
.text:00405398                 mov     edx, ds:_iob
.text:0040539E                 lea     ecx, [edx+40h]
.text:004053A1                 mov     ebx, [ecx+4]
.text:004053A4                 dec     ebx
.text:004053A5                 test    ebx, ebx
.text:004053A7                 mov     [ecx+4], ebx
.text:004053AA                 js      short loc_4053D0
.text:004053AC                 mov     ecx, [edx+40h]
.text:004053AF                 mov     byte ptr [ecx], 0Ah
.text:004053B2                 inc     dword ptr [edx+40h]
.text:004053B5
.text:004053B5 loc_4053B5:                             ; CODE XREF: sub_405340+A0↓j
.text:004053B5                 mov     edx, ds:_iob
.text:004053BB                 add     edx, 40h ; '@'
.text:004053BE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004053C1                 call    fflush
.text:004053C6                 test    esi, esi
.text:004053C8                 jnz     short loc_40543C
.text:004053CA                 add     esp, 14h
.text:004053CD                 pop     ebx
.text:004053CE                 pop     esi
.text:004053CF                 retn
.text:004053D0 ; ---------------------------------------------------------------------------
.text:004053D0
.text:004053D0 loc_4053D0:                             ; CODE XREF: sub_405340+6A↑j
.text:004053D0                 mov     [esp+1Ch+Format], ecx ; File
.text:004053D4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:004053DB                 call    _flsbuf
.text:004053E0                 jmp     short loc_4053B5
.text:004053E2 ; ---------------------------------------------------------------------------
.text:004053E2
.text:004053E2 loc_4053E2:                             ; CODE XREF: sub_405340+56↑j
.text:004053E2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004053E5                 call    strerror
.text:004053EA                 test    eax, eax
.text:004053EC                 jz      short loc_40540D
.text:004053EE
.text:004053EE loc_4053EE:                             ; CODE XREF: sub_405340+D2↓j
.text:004053EE                 mov     [esp+1Ch+ArgList], eax
.text:004053F2                 mov     ebx, ds:_iob
.text:004053F8                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:00405400                 add     ebx, 40h ; '@'
.text:00405403                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00405406                 call    fprintf
.text:0040540B                 jmp     short loc_405398
.text:0040540D ; ---------------------------------------------------------------------------
.text:0040540D
.text:0040540D loc_40540D:                             ; CODE XREF: sub_405340+AC↑j
.text:0040540D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405412                 jmp     short loc_4053EE
.text:00405414 ; ---------------------------------------------------------------------------
.text:00405414
.text:00405414 loc_405414:                             ; CODE XREF: sub_405340+25↑j
.text:00405414                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:0040541C                 mov     edx, ds:_iob
.text:00405422                 mov     ecx, ds:dword_408B30
.text:00405428                 add     edx, 40h ; '@'
.text:0040542B                 mov     [esp+1Ch+ArgList], ecx
.text:0040542F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405432                 call    fprintf
.text:00405437                 jmp     loc_40536D
.text:0040543C ; ---------------------------------------------------------------------------
.text:0040543C
.text:0040543C loc_40543C:                             ; CODE XREF: sub_405340+88↑j
.text:0040543C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040543F                 call    exit
.text:0040543F sub_405340      endp
.text:0040543F
.text:00405444
.text:00405444 ; =============== S U B R O U T I N E =======================================
.text:00405444
.text:00405444
.text:00405444 ; int __cdecl sub_405444(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00405444 sub_405444      proc near               ; DATA XREF: sub_405444+77↓o
.text:00405444
.text:00405444 Stream          = dword ptr -28h
.text:00405444 Format          = dword ptr -24h
.text:00405444 ArgList         = dword ptr -20h
.text:00405444 var_1C          = dword ptr -1Ch
.text:00405444 Code            = dword ptr  8
.text:00405444 ErrorMessage    = dword ptr  0Ch
.text:00405444 Str2            = dword ptr  10h
.text:00405444 arg_10          = dword ptr  14h
.text:00405444 arg_14          = dword ptr  18h
.text:00405444 arg_18          = byte ptr  1Ch
.text:00405444
.text:00405444                 and     eax, 64253A73h
.text:00405449                 cmp     ah, [eax]
.text:0040544B
.text:0040544B loc_40544B:                             ; DATA XREF: sub_405444:loc_405585↓o
.text:0040544B                 add     ds:55003A73h, ah
.text:00405451                 push    edi
.text:00405452                 push    esi
.text:00405453                 push    ebx
.text:00405454                 sub     esp, 1Ch
.text:00405457                 mov     edx, ds:dword_408BA0
.text:0040545D                 mov     ebp, [esp+28h+Code]
.text:00405461                 mov     edi, [esp+28h+ErrorMessage]
.text:00405465                 test    edx, edx
.text:00405467                 mov     ebx, [esp+28h+Str2]
.text:0040546B                 mov     esi, [esp+28h+arg_10]
.text:0040546F                 jz      short loc_405489
.text:00405471                 cmp     ds:dword_4081D0, esi
.text:00405477                 jz      loc_4055B0
.text:0040547D
.text:0040547D loc_40547D:                             ; CODE XREF: sub_405444+18D↓j
.text:0040547D                 mov     ds:Str1, ebx
.text:00405483                 mov     ds:dword_4081D0, esi
.text:00405489
.text:00405489 loc_405489:                             ; CODE XREF: sub_405444+2B↑j
.text:00405489                 mov     edx, ds:_iob
.text:0040548F                 add     edx, 20h ; ' '
.text:00405492                 mov     [esp+28h+Stream], edx ; Stream
.text:00405495                 call    fflush
.text:0040549A                 mov     eax, ds:dword_408B60
.text:0040549F                 test    eax, eax
.text:004054A1                 jz      loc_405585
.text:004054A7                 call    eax ; dword_408B60
.text:004054A9
.text:004054A9 loc_4054A9:                             ; CODE XREF: sub_405444+164↓j
.text:004054A9                 test    ebx, ebx
.text:004054AB                 jz      short loc_4054CE
.text:004054AD                 mov     [esp+28h+ArgList], ebx
.text:004054B1                 mov     ebx, ds:_iob
.text:004054B7                 mov     [esp+28h+var_1C], esi
.text:004054BB                 mov     [esp+28h+Format], offset sub_405444 ; Format
.text:004054C3                 add     ebx, 40h ; '@'
.text:004054C6                 mov     [esp+28h+Stream], ebx ; Stream
.text:004054C9                 call    fprintf
.text:004054CE
.text:004054CE loc_4054CE:                             ; CODE XREF: sub_405444+67↑j
.text:004054CE                 mov     esi, ds:_iob
.text:004054D4                 lea     edx, [esp+28h+arg_18]
.text:004054D8                 mov     ecx, [esp+28h+arg_14]
.text:004054DC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004054E0                 add     esi, 40h ; '@'
.text:004054E3                 mov     [esp+28h+Format], ecx ; Format
.text:004054E7                 mov     [esp+28h+Stream], esi ; Stream
.text:004054EA                 call    vfprintf
.text:004054EF                 inc     ds:dword_408B70
.text:004054F5                 test    edi, edi
.text:004054F7                 jnz     short loc_405550
.text:004054F9
.text:004054F9 loc_4054F9:                             ; CODE XREF: sub_405444+135↓j
.text:004054F9                 mov     edx, ds:_iob
.text:004054FF                 lea     ecx, [edx+40h]
.text:00405502                 mov     ebx, [ecx+4]
.text:00405505                 dec     ebx
.text:00405506                 test    ebx, ebx
.text:00405508                 mov     [ecx+4], ebx
.text:0040550B                 js      short loc_405537
.text:0040550D                 mov     esi, [edx+40h]
.text:00405510                 mov     byte ptr [esi], 0Ah
.text:00405513                 inc     dword ptr [edx+40h]
.text:00405516
.text:00405516 loc_405516:                             ; CODE XREF: sub_405444+103↓j
.text:00405516                 mov     ecx, ds:_iob
.text:0040551C                 add     ecx, 40h ; '@'
.text:0040551F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405522                 call    fflush
.text:00405527                 test    ebp, ebp
.text:00405529                 jnz     loc_4055D6
.text:0040552F
.text:0040552F loc_40552F:                             ; CODE XREF: sub_405444+173↓j
.text:0040552F                                         ; sub_405444+187↓j
.text:0040552F                 add     esp, 1Ch
.text:00405532                 pop     ebx
.text:00405533                 pop     esi
.text:00405534                 pop     edi
.text:00405535                 pop     ebp
.text:00405536                 retn
.text:00405537 ; ---------------------------------------------------------------------------
.text:00405537
.text:00405537 loc_405537:                             ; CODE XREF: sub_405444+C7↑j
.text:00405537                 mov     [esp+28h+Format], ecx ; File
.text:0040553B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00405542                 call    _flsbuf
.text:00405547                 jmp     short loc_405516
.text:00405547 ; ---------------------------------------------------------------------------
.text:00405549                 align 10h
.text:00405550
.text:00405550 loc_405550:                             ; CODE XREF: sub_405444+B3↑j
.text:00405550                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00405553                 call    strerror
.text:00405558                 test    eax, eax
.text:0040555A                 jz      short loc_40557E
.text:0040555C
.text:0040555C loc_40555C:                             ; CODE XREF: sub_405444+13F↓j
.text:0040555C                 mov     [esp+28h+ArgList], eax
.text:00405560                 mov     edi, ds:_iob
.text:00405566                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:0040556E                 add     edi, 40h ; '@'
.text:00405571                 mov     [esp+28h+Stream], edi ; Stream
.text:00405574                 call    fprintf
.text:00405579                 jmp     loc_4054F9
.text:0040557E ; ---------------------------------------------------------------------------
.text:0040557E
.text:0040557E loc_40557E:                             ; CODE XREF: sub_405444+116↑j
.text:0040557E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405583                 jmp     short loc_40555C
.text:00405585 ; ---------------------------------------------------------------------------
.text:00405585
.text:00405585 loc_405585:                             ; CODE XREF: sub_405444+5D↑j
.text:00405585                 mov     [esp+28h+Format], (offset loc_40544B+1) ; Format
.text:0040558D                 mov     ecx, ds:_iob
.text:00405593                 mov     edx, ds:dword_408B30
.text:00405599                 add     ecx, 40h ; '@'
.text:0040559C                 mov     [esp+28h+ArgList], edx
.text:004055A0                 mov     [esp+28h+Stream], ecx ; Stream
.text:004055A3                 call    fprintf
.text:004055A8                 jmp     loc_4054A9
.text:004055A8 ; ---------------------------------------------------------------------------
.text:004055AD                 align 10h
.text:004055B0
.text:004055B0 loc_4055B0:                             ; CODE XREF: sub_405444+33↑j
.text:004055B0                 mov     eax, ds:Str1
.text:004055B5                 cmp     ebx, eax
.text:004055B7                 jz      loc_40552F
.text:004055BD                 mov     [esp+28h+Format], ebx ; Str2
.text:004055C1                 mov     [esp+28h+Stream], eax ; Str1
.text:004055C4                 call    strcmp
.text:004055C9                 test    eax, eax
.text:004055CB                 jz      loc_40552F
.text:004055D1                 jmp     loc_40547D
.text:004055D6 ; ---------------------------------------------------------------------------
.text:004055D6
.text:004055D6 loc_4055D6:                             ; CODE XREF: sub_405444+E5↑j
.text:004055D6                 mov     [esp+28h+Stream], ebp ; Code
.text:004055D9                 call    exit
.text:004055D9 sub_405444      endp ; sp-analysis failed
.text:004055D9
.text:004055D9 ; ---------------------------------------------------------------------------
.text:004055DE                 align 10h
.text:004055E0
.text:004055E0 ; =============== S U B R O U T I N E =======================================
.text:004055E0
.text:004055E0
.text:004055E0 sub_4055E0      proc near               ; CODE XREF: sub_402290+BF↑p
.text:004055E0                                         ; sub_402290+D5↑p
.text:004055E0                 xor     eax, eax
.text:004055E2                 retn
.text:004055E2 sub_4055E0      endp
.text:004055E2
.text:004055E2 ; ---------------------------------------------------------------------------
.text:004055E3                 align 10h
.text:004055F0
.text:004055F0 ; =============== S U B R O U T I N E =======================================
.text:004055F0
.text:004055F0
.text:004055F0 sub_4055F0      proc near               ; CODE XREF: sub_401CF0+33↑p
.text:004055F0                                         ; sub_401F10+5F↑p ...
.text:004055F0                 xor     eax, eax
.text:004055F2                 retn
.text:004055F2 sub_4055F0      endp
.text:004055F2
.text:004055F2 ; ---------------------------------------------------------------------------
.text:004055F3                 align 10h
.text:00405600
.text:00405600 ; =============== S U B R O U T I N E =======================================
.text:00405600
.text:00405600
.text:00405600 sub_405600      proc near               ; CODE XREF: sub_401C40+33↑p
.text:00405600                                         ; sub_401D70+D↑p ...
.text:00405600
.text:00405600 var_1C          = dword ptr -1Ch
.text:00405600 var_18          = dword ptr -18h
.text:00405600 var_14          = dword ptr -14h
.text:00405600 var_10          = dword ptr -10h
.text:00405600 var_C           = dword ptr -0Ch
.text:00405600 var_4           = dword ptr -4
.text:00405600 arg_0           = dword ptr  4
.text:00405600
.text:00405600                 sub     esp, 1Ch
.text:00405603                 mov     ecx, [esp+1Ch+arg_0]
.text:00405607                 lea     edx, [esp+1Ch+var_4]
.text:0040560B                 mov     [esp+1Ch+var_C], edx ; int
.text:0040560F                 mov     [esp+1Ch+var_10], 400h ; int
.text:00405617                 mov     [esp+1Ch+var_1C], ecx ; int
.text:0040561A                 mov     [esp+1Ch+var_14], offset byte_408200 ; char *
.text:00405622                 mov     [esp+1Ch+var_18], offset unk_4081E0 ; int
.text:0040562A                 call    sub_405710
.text:0040562F                 test    eax, eax
.text:00405631                 mov     ecx, [esp+1Ch+var_4]
.text:00405635                 setnz   dl
.text:00405638                 add     esp, 1Ch
.text:0040563B                 movzx   eax, dl
.text:0040563E                 dec     eax
.text:0040563F                 and     eax, ecx
.text:00405641                 retn
.text:00405641 sub_405600      endp
.text:00405641
.text:00405641 ; ---------------------------------------------------------------------------
.text:00405642                 align 10h
.text:00405650
.text:00405650 ; =============== S U B R O U T I N E =======================================
.text:00405650
.text:00405650
.text:00405650 sub_405650      proc near               ; CODE XREF: sub_401770+32D↑p
.text:00405650                                         ; sub_405780+8A↓p
.text:00405650                 xor     eax, eax
.text:00405652                 retn
.text:00405652 sub_405650      endp
.text:00405652
.text:00405652 ; ---------------------------------------------------------------------------
.text:00405653                 align 10h
.text:00405660
.text:00405660 ; =============== S U B R O U T I N E =======================================
.text:00405660
.text:00405660
.text:00405660 sub_405660      proc near               ; CODE XREF: sub_401770+323↑p
.text:00405660                 xor     eax, eax
.text:00405662                 retn
.text:00405662 sub_405660      endp
.text:00405662
.text:00405662 ; ---------------------------------------------------------------------------
.text:00405663                 align 10h
.text:00405670
.text:00405670 ; =============== S U B R O U T I N E =======================================
.text:00405670
.text:00405670
.text:00405670 sub_405670      proc near               ; CODE XREF: sub_401770+319↑p
.text:00405670                                         ; sub_405780+7E↓p
.text:00405670                 xor     eax, eax
.text:00405672                 retn
.text:00405672 sub_405670      endp
.text:00405672
.text:00405672 ; ---------------------------------------------------------------------------
.text:00405673                 align 10h
.text:00405680
.text:00405680 ; =============== S U B R O U T I N E =======================================
.text:00405680
.text:00405680
.text:00405680 sub_405680      proc near               ; CODE XREF: sub_401770+30F↑p
.text:00405680                 xor     eax, eax
.text:00405682                 retn
.text:00405682 sub_405680      endp
.text:00405682
.text:00405682 ; ---------------------------------------------------------------------------
.text:00405683                 align 10h
.text:00405690
.text:00405690 ; =============== S U B R O U T I N E =======================================
.text:00405690
.text:00405690
.text:00405690 ; int __cdecl sub_405690(char *)
.text:00405690 sub_405690      proc near               ; CODE XREF: sub_401770+400↑p
.text:00405690
.text:00405690 var_1C          = dword ptr -1Ch
.text:00405690 var_18          = dword ptr -18h
.text:00405690 var_14          = dword ptr -14h
.text:00405690 var_10          = dword ptr -10h
.text:00405690 var_C           = dword ptr -0Ch
.text:00405690 var_4           = dword ptr -4
.text:00405690 arg_0           = dword ptr  4
.text:00405690
.text:00405690                 sub     esp, 1Ch
.text:00405693                 mov     ecx, [esp+1Ch+arg_0]
.text:00405697                 lea     edx, [esp+1Ch+var_4]
.text:0040569B                 mov     [esp+1Ch+var_C], edx ; int
.text:0040569F                 mov     [esp+1Ch+var_10], 400h ; int
.text:004056A7                 mov     [esp+1Ch+var_1C], ecx ; char *
.text:004056AA                 mov     [esp+1Ch+var_14], offset byte_408620 ; char *
.text:004056B2                 mov     [esp+1Ch+var_18], offset unk_408600 ; int
.text:004056BA                 call    sub_405780
.text:004056BF                 test    eax, eax
.text:004056C1                 mov     ecx, [esp+1Ch+var_4]
.text:004056C5                 setnz   dl
.text:004056C8                 add     esp, 1Ch
.text:004056CB                 movzx   eax, dl
.text:004056CE                 dec     eax
.text:004056CF                 and     eax, ecx
.text:004056D1                 retn
.text:004056D1 sub_405690      endp
.text:004056D1
.text:004056D1 ; ---------------------------------------------------------------------------
.text:004056D2                 align 10h
.text:004056E0
.text:004056E0 ; =============== S U B R O U T I N E =======================================
.text:004056E0
.text:004056E0
.text:004056E0 nullsub_1       proc near               ; CODE XREF: sub_403670:loc_403736↑p
.text:004056E0                 retn
.text:004056E0 nullsub_1       endp
.text:004056E0
.text:004056E0 ; ---------------------------------------------------------------------------
.text:004056E1                 align 10h
.text:004056F0
.text:004056F0 ; =============== S U B R O U T I N E =======================================
.text:004056F0
.text:004056F0
.text:004056F0 sub_4056F0      proc near               ; CODE XREF: sub_403670:loc_4036A0↑p
.text:004056F0                 xor     eax, eax
.text:004056F2                 retn
.text:004056F2 sub_4056F0      endp
.text:004056F2
.text:004056F2 ; ---------------------------------------------------------------------------
.text:004056F3                 align 10h
.text:00405700
.text:00405700 ; =============== S U B R O U T I N E =======================================
.text:00405700
.text:00405700
.text:00405700 nullsub_2       proc near               ; CODE XREF: sub_403670:loc_403696↑p
.text:00405700                 retn
.text:00405700 nullsub_2       endp
.text:00405700
.text:00405700 ; ---------------------------------------------------------------------------
.text:00405701                 align 10h
.text:00405710
.text:00405710 ; =============== S U B R O U T I N E =======================================
.text:00405710
.text:00405710
.text:00405710 ; int __cdecl sub_405710(int, int, char *, int, int)
.text:00405710 sub_405710      proc near               ; CODE XREF: sub_405600+2A↑p
.text:00405710
.text:00405710 var_1C          = dword ptr -1Ch
.text:00405710 var_18          = dword ptr -18h
.text:00405710 var_14          = dword ptr -14h
.text:00405710 var_10          = dword ptr -10h
.text:00405710 var_C           = dword ptr -0Ch
.text:00405710 var_4           = dword ptr -4
.text:00405710 arg_0           = dword ptr  4
.text:00405710 arg_4           = dword ptr  8
.text:00405710 arg_8           = dword ptr  0Ch
.text:00405710 arg_C           = dword ptr  10h
.text:00405710 arg_10          = dword ptr  14h
.text:00405710
.text:00405710                 sub     esp, 1Ch
.text:00405713                 mov     [esp+1Ch+var_4], ebx
.text:00405717                 mov     ebx, [esp+1Ch+arg_4]
.text:0040571B                 call    sub_405970
.text:00405720                 mov     [esp+1Ch+var_1C], eax ; char *
.text:00405723                 mov     ecx, [esp+1Ch+arg_10]
.text:00405727                 mov     [esp+1Ch+var_18], ebx ; int
.text:0040572B                 mov     [esp+1Ch+var_C], ecx ; int
.text:0040572F                 mov     ecx, [esp+1Ch+arg_C]
.text:00405733                 mov     [esp+1Ch+var_10], ecx ; int
.text:00405737                 mov     ecx, [esp+1Ch+arg_8]
.text:0040573B                 mov     [esp+1Ch+var_14], ecx ; char *
.text:0040573F                 call    sub_405780
.text:00405744                 mov     ecx, [esp+1Ch+arg_0]
.text:00405748                 mov     [ebx+8], ecx
.text:0040574B                 mov     ebx, [esp+1Ch+var_4]
.text:0040574F                 add     esp, 1Ch
.text:00405752                 retn
.text:00405752 sub_405710      endp
.text:00405752
.text:00405752 ; ---------------------------------------------------------------------------
.text:00405753                 align 10h
.text:00405760 byte_405760     db 0                    ; DATA XREF: .data:Src↓o
.text:00405761 byte_405761     db 73h, 68h, 0          ; DATA XREF: .data:off_407064↓o
.text:00405764 ; const char aHome[]
.text:00405764 aHome           db 'HOME',0             ; DATA XREF: sub_405780+96↓o
.text:00405769 ; const char aShell[]
.text:00405769 aShell          db 'SHELL',0            ; DATA XREF: sub_405780+E2↓o
.text:0040576F ; const char aComspec[]
.text:0040576F aComspec        db 'COMSPEC',0          ; DATA XREF: sub_405780:loc_405944↓o
.text:00405777 aC              db 'C:/',0              ; DATA XREF: sub_405780:loc_405965↓o
.text:0040577B                 align 10h
.text:00405780
.text:00405780 ; =============== S U B R O U T I N E =======================================
.text:00405780
.text:00405780
.text:00405780 ; int __cdecl sub_405780(char *, int, char *, int, int)
.text:00405780 sub_405780      proc near               ; CODE XREF: sub_405690+2A↑p
.text:00405780                                         ; sub_405710+2F↑p
.text:00405780
.text:00405780 Str             = dword ptr -1Ch
.text:00405780 Src             = dword ptr -18h
.text:00405780 Size            = dword ptr -14h
.text:00405780 var_10          = dword ptr -10h
.text:00405780 var_C           = dword ptr -0Ch
.text:00405780 var_8           = dword ptr -8
.text:00405780 var_4           = dword ptr -4
.text:00405780 arg_0           = dword ptr  4
.text:00405780 arg_4           = dword ptr  8
.text:00405780 arg_8           = dword ptr  0Ch
.text:00405780 arg_C           = dword ptr  10h
.text:00405780 arg_10          = dword ptr  14h
.text:00405780
.text:00405780                 sub     esp, 1Ch
.text:00405783                 mov     eax, [esp+1Ch+arg_0]
.text:00405787                 mov     [esp+1Ch+var_10], ebx
.text:0040578B                 mov     [esp+1Ch+var_C], esi
.text:0040578F                 test    eax, eax
.text:00405791                 mov     [esp+1Ch+var_8], edi
.text:00405795                 mov     [esp+1Ch+var_4], ebp
.text:00405799                 jz      short loc_4057A8
.text:0040579B                 cmp     byte ptr [eax], 0
.text:0040579E                 jz      short loc_4057A8
.text:004057A0                 mov     ecx, [esp+1Ch+arg_C]
.text:004057A4                 test    ecx, ecx
.text:004057A6                 jnz     short loc_4057D0
.text:004057A8
.text:004057A8 loc_4057A8:                             ; CODE XREF: sub_405780+19↑j
.text:004057A8                                         ; sub_405780+1E↑j ...
.text:004057A8                 call    _errno
.text:004057AD                 mov     dword ptr [eax], 22h ; '"'
.text:004057B3                 mov     eax, 0FFFFFFFFh
.text:004057B8
.text:004057B8 loc_4057B8:                             ; CODE XREF: sub_405780+1BF↓j
.text:004057B8                 mov     ebx, [esp+1Ch+var_10]
.text:004057BC                 mov     esi, [esp+1Ch+var_C]
.text:004057C0                 mov     edi, [esp+1Ch+var_8]
.text:004057C4                 mov     ebp, [esp+1Ch+var_4]
.text:004057C8                 add     esp, 1Ch
.text:004057CB                 retn
.text:004057CB ; ---------------------------------------------------------------------------
.text:004057CC                 align 10h
.text:004057D0
.text:004057D0 loc_4057D0:                             ; CODE XREF: sub_405780+26↑j
.text:004057D0                 mov     [esp+1Ch+Str], eax ; Str
.text:004057D3                 mov     ebx, eax
.text:004057D5                 call    strlen
.text:004057DA                 lea     esi, [eax+1]
.text:004057DD                 cmp     esi, [esp+1Ch+arg_C]
.text:004057E1                 ja      short loc_4057A8
.text:004057E3                 mov     [esp+1Ch+Src], ebx ; Src
.text:004057E7                 mov     edx, [esp+1Ch+arg_8]
.text:004057EB                 mov     [esp+1Ch+Size], esi ; Size
.text:004057EF                 mov     [esp+1Ch+Str], edx ; void *
.text:004057F2                 call    memcpy
.text:004057F7                 mov     ebp, [esp+1Ch+arg_4]
.text:004057FB                 mov     [ebp+0], eax
.text:004057FE                 call    sub_405670
.text:00405803                 mov     edi, [esp+1Ch+arg_4]
.text:00405807                 mov     [edi+8], eax
.text:0040580A                 call    sub_405650
.text:0040580F                 mov     ebx, [esp+1Ch+arg_4]
.text:00405813                 mov     [ebx+0Ch], eax
.text:00405816                 mov     [esp+1Ch+Str], offset aHome ; "HOME"
.text:0040581D                 call    getenv
.text:00405822                 test    eax, eax
.text:00405824                 mov     ebx, eax
.text:00405826                 jz      loc_405965
.text:0040582C
.text:0040582C loc_40582C:                             ; CODE XREF: sub_405780+1EA↓j
.text:0040582C                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040582F                 call    strlen
.text:00405834                 lea     ebp, [eax+esi+1]
.text:00405838                 cmp     ebp, [esp+1Ch+arg_C]
.text:0040583C                 ja      loc_4057A8
.text:00405842                 mov     [esp+1Ch+Src], ebx ; Src
.text:00405846                 mov     ecx, [esp+1Ch+arg_8]
.text:0040584A                 lea     edi, [eax+1]
.text:0040584D                 mov     [esp+1Ch+Size], edi ; Size
.text:00405851                 add     ecx, esi
.text:00405853                 mov     [esp+1Ch+Str], ecx ; void *
.text:00405856                 call    memcpy
.text:0040585B                 mov     esi, [esp+1Ch+arg_4]
.text:0040585F                 mov     [esi+14h], eax
.text:00405862                 mov     [esp+1Ch+Str], offset aShell ; "SHELL"
.text:00405869                 call    getenv
.text:0040586E                 test    eax, eax
.text:00405870                 mov     ebx, eax
.text:00405872                 jz      loc_405944
.text:00405878
.text:00405878 loc_405878:                             ; CODE XREF: sub_405780+1D4↓j
.text:00405878                                         ; sub_405780+1E0↓j
.text:00405878                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040587B                 call    strlen
.text:00405880                 lea     edi, [eax+ebp+1]
.text:00405884                 cmp     edi, [esp+1Ch+arg_C]
.text:00405888                 ja      loc_4057A8
.text:0040588E                 mov     [esp+1Ch+Src], ebx ; Src
.text:00405892                 mov     esi, [esp+1Ch+arg_8]
.text:00405896                 lea     ecx, [eax+1]
.text:00405899                 mov     [esp+1Ch+Size], ecx ; Size
.text:0040589D                 add     esi, ebp
.text:0040589F                 mov     [esp+1Ch+Str], esi ; void *
.text:004058A2                 call    memcpy
.text:004058A7                 mov     ebx, [esp+1Ch+arg_4]
.text:004058AB                 mov     [ebx+18h], eax
.text:004058AE                 call    sub_405970
.text:004058B3                 mov     [esp+1Ch+Str], eax ; Str
.text:004058B6                 mov     ebx, eax
.text:004058B8                 call    strlen
.text:004058BD                 lea     esi, [eax+edi+1]
.text:004058C1                 cmp     esi, [esp+1Ch+arg_C]
.text:004058C5                 ja      loc_4057A8
.text:004058CB                 mov     [esp+1Ch+Src], ebx ; Src
.text:004058CF                 mov     ecx, [esp+1Ch+arg_8]
.text:004058D3                 lea     ebp, [eax+1]
.text:004058D6                 mov     [esp+1Ch+Size], ebp ; Size
.text:004058DA                 add     ecx, edi
.text:004058DC                 mov     [esp+1Ch+Str], ecx ; void *
.text:004058DF                 call    memcpy
.text:004058E4                 mov     edi, [esp+1Ch+arg_4]
.text:004058E8                 mov     ebx, Src
.text:004058EE                 mov     [edi+10h], eax
.text:004058F1                 mov     [esp+1Ch+Str], ebx ; Str
.text:004058F4                 call    strlen
.text:004058F9                 lea     ebp, [eax+esi+1]
.text:004058FD                 cmp     ebp, [esp+1Ch+arg_C]
.text:00405901                 ja      loc_4057A8
.text:00405907                 mov     [esp+1Ch+Src], ebx ; Src
.text:0040590B                 mov     edi, [esp+1Ch+arg_8]
.text:0040590F                 lea     ecx, [eax+1]
.text:00405912                 mov     [esp+1Ch+Size], ecx ; Size
.text:00405916                 add     edi, esi
.text:00405918                 mov     [esp+1Ch+Str], edi ; void *
.text:0040591B                 call    memcpy
.text:00405920                 mov     esi, [esp+1Ch+arg_4]
.text:00405924                 mov     [esi+4], eax
.text:00405927                 mov     edx, [esp+1Ch+arg_8]
.text:0040592B                 mov     [esp+1Ch+Str], edx ; Str
.text:0040592E                 call    strlen
.text:00405933                 mov     eax, [esp+1Ch+arg_4]
.text:00405937                 mov     ebx, [esp+1Ch+arg_10]
.text:0040593B                 mov     [ebx], eax
.text:0040593D                 xor     eax, eax
.text:0040593F                 jmp     loc_4057B8
.text:00405944 ; ---------------------------------------------------------------------------
.text:00405944
.text:00405944 loc_405944:                             ; CODE XREF: sub_405780+F2↑j
.text:00405944                 mov     [esp+1Ch+Str], offset aComspec ; "COMSPEC"
.text:0040594B                 call    getenv
.text:00405950                 test    eax, eax
.text:00405952                 mov     ebx, eax
.text:00405954                 jnz     loc_405878
.text:0040595A                 mov     ebx, off_407064
.text:00405960                 jmp     loc_405878
.text:00405965 ; ---------------------------------------------------------------------------
.text:00405965
.text:00405965 loc_405965:                             ; CODE XREF: sub_405780+A6↑j
.text:00405965                 mov     ebx, offset aC  ; "C:/"
.text:0040596A                 jmp     loc_40582C
.text:0040596A sub_405780      endp
.text:0040596A
.text:0040596A ; ---------------------------------------------------------------------------
.text:0040596F                 align 10h
.text:00405970
.text:00405970 ; =============== S U B R O U T I N E =======================================
.text:00405970
.text:00405970
.text:00405970 sub_405970      proc near               ; CODE XREF: sub_405710+B↑p
.text:00405970                                         ; sub_405780+12E↑p
.text:00405970
.text:00405970 lpBuffer        = dword ptr -1Ch
.text:00405970 pcbBuffer       = dword ptr -18h
.text:00405970 var_8           = dword ptr -8
.text:00405970 var_4           = dword ptr -4
.text:00405970
.text:00405970                 sub     esp, 1Ch
.text:00405973                 lea     edx, [esp+1Ch+var_8]
.text:00405977                 mov     [esp+1Ch+pcbBuffer], edx ; pcbBuffer
.text:0040597B                 mov     [esp+1Ch+var_4], ebx
.text:0040597F                 mov     [esp+1Ch+var_8], 101h
.text:00405987                 mov     [esp+1Ch+lpBuffer], offset byte_408A20 ; lpBuffer
.text:0040598E                 call    GetUserNameA
.text:00405993                 sub     esp, 8
.text:00405996                 mov     edx, offset byte_408A20
.text:0040599B                 test    eax, eax
.text:0040599D                 jz      short loc_4059A9
.text:0040599F
.text:0040599F loc_40599F:                             ; CODE XREF: sub_405970+49↓j
.text:0040599F                 mov     ebx, [esp+1Ch+var_4]
.text:004059A3                 mov     eax, edx
.text:004059A5                 add     esp, 1Ch
.text:004059A8                 retn
.text:004059A9 ; ---------------------------------------------------------------------------
.text:004059A9
.text:004059A9 loc_4059A9:                             ; CODE XREF: sub_405970+2D↑j
.text:004059A9                 call    sub_405C50
.text:004059AE                 mov     ebx, eax
.text:004059B0                 call    _errno
.text:004059B5                 mov     [eax], ebx
.text:004059B7                 xor     edx, edx
.text:004059B9                 jmp     short loc_40599F
.text:004059B9 sub_405970      endp
.text:004059B9
.text:004059B9 ; ---------------------------------------------------------------------------
.text:004059BB                 align 10h
.text:004059C0
.text:004059C0 ; =============== S U B R O U T I N E =======================================
.text:004059C0
.text:004059C0 ; Attributes: info_from_lumina
.text:004059C0
.text:004059C0 ___get_errno    proc near               ; CODE XREF: sub_405C50+B↓p
.text:004059C0
.text:004059C0 arg_0           = dword ptr  4
.text:004059C0
.text:004059C0                 mov     eax, [esp+arg_0]
.text:004059C4                 cmp     eax, 53h ; 'S'
.text:004059C7                 jg      loc_405AC0
.text:004059CD                 cmp     eax, 52h ; 'R'
.text:004059D0                 jge     short loc_405A22
.text:004059D2                 cmp     eax, 0Fh
.text:004059D5                 jz      short loc_4059F0
.text:004059D7                 cmp     eax, 0Fh
.text:004059DA                 jg      short loc_405A50
.text:004059DC                 cmp     eax, 9
.text:004059DF                 jg      short loc_405A30
.text:004059E1                 cmp     eax, 7
.text:004059E4                 jge     short loc_405A29
.text:004059E6                 cmp     eax, 3
.text:004059E9                 jg      short loc_405A0A
.text:004059EB                 cmp     eax, 2
.text:004059EE                 jl      short loc_405A03
.text:004059F0
.text:004059F0 loc_4059F0:                             ; CODE XREF: ___get_errno+15↑j
.text:004059F0                                         ; ___get_errno+9D↓j ...
.text:004059F0                 mov     edx, 2
.text:004059F5                 lea     esi, [esi+0]
.text:004059F9                 lea     edi, [edi+0]
.text:00405A00
.text:00405A00 loc_405A00:                             ; CODE XREF: ___get_errno+48↓j
.text:00405A00                                         ; ___get_errno+59↓j ...
.text:00405A00                 mov     eax, edx
.text:00405A02                 retn
.text:00405A03 ; ---------------------------------------------------------------------------
.text:00405A03
.text:00405A03 loc_405A03:                             ; CODE XREF: ___get_errno+2E↑j
.text:00405A03                                         ; ___get_errno+78↓j ...
.text:00405A03                 mov     edx, 16h
.text:00405A08                 jmp     short loc_405A00
.text:00405A0A ; ---------------------------------------------------------------------------
.text:00405A0A
.text:00405A0A loc_405A0A:                             ; CODE XREF: ___get_errno+29↑j
.text:00405A0A                 cmp     eax, 5
.text:00405A0D                 jz      short loc_405A22
.text:00405A0F                 cmp     eax, 5
.text:00405A12                 jg      short loc_405A1B
.text:00405A14                 mov     edx, 18h
.text:00405A19                 jmp     short loc_405A00
.text:00405A1B ; ---------------------------------------------------------------------------
.text:00405A1B
.text:00405A1B loc_405A1B:                             ; CODE XREF: ___get_errno+52↑j
.text:00405A1B                                         ; ___get_errno+180↓j
.text:00405A1B                 mov     edx, 9
.text:00405A20                 jmp     short loc_405A00
.text:00405A22 ; ---------------------------------------------------------------------------
.text:00405A22
.text:00405A22 loc_405A22:                             ; CODE XREF: ___get_errno+10↑j
.text:00405A22                                         ; ___get_errno+4D↑j ...
.text:00405A22                 mov     edx, 0Dh
.text:00405A27                 jmp     short loc_405A00
.text:00405A29 ; ---------------------------------------------------------------------------
.text:00405A29
.text:00405A29 loc_405A29:                             ; CODE XREF: ___get_errno+24↑j
.text:00405A29                                         ; ___get_errno+73↓j ...
.text:00405A29                 mov     edx, 0Ch
.text:00405A2E                 jmp     short loc_405A00
.text:00405A30 ; ---------------------------------------------------------------------------
.text:00405A30
.text:00405A30 loc_405A30:                             ; CODE XREF: ___get_errno+1F↑j
.text:00405A30                 cmp     eax, 0Dh
.text:00405A33                 jg      short loc_405A29
.text:00405A35                 cmp     eax, 0Ch
.text:00405A38                 jge     short loc_405A03
.text:00405A3A                 cmp     eax, 0Ah
.text:00405A3D                 mov     edx, 7
.text:00405A42                 jz      short loc_405A00
.text:00405A44                 cmp     eax, 0Bh
.text:00405A47                 jnz     short loc_405A03
.text:00405A49
.text:00405A49 loc_405A49:                             ; CODE XREF: ___get_errno+21A↓j
.text:00405A49                 mov     edx, 8
.text:00405A4E                 jmp     short loc_405A00
.text:00405A50 ; ---------------------------------------------------------------------------
.text:00405A50
.text:00405A50 loc_405A50:                             ; CODE XREF: ___get_errno+1A↑j
.text:00405A50                 cmp     eax, 22h ; '"'
.text:00405A53                 jg      short loc_405A84
.text:00405A55                 cmp     eax, 16h
.text:00405A58                 jge     short loc_405A22
.text:00405A5A                 cmp     eax, 12h
.text:00405A5D                 jz      short loc_4059F0
.text:00405A5F                 cmp     eax, 12h
.text:00405A62                 jg      short loc_405A75
.text:00405A64                 cmp     eax, 10h
.text:00405A67                 jz      short loc_405A22
.text:00405A69                 mov     edx, 12h
.text:00405A6E                 cmp     eax, 11h
.text:00405A71
.text:00405A71 loc_405A71:                             ; CODE XREF: ___get_errno+172↓j
.text:00405A71                                         ; ___get_errno+24C↓j ...
.text:00405A71                 jnz     short loc_405A03
.text:00405A73                 jmp     short loc_405A00
.text:00405A75 ; ---------------------------------------------------------------------------
.text:00405A75
.text:00405A75 loc_405A75:                             ; CODE XREF: ___get_errno+A2↑j
.text:00405A75                 cmp     eax, 14h
.text:00405A78                 jle     short loc_405A22
.text:00405A7A
.text:00405A7A loc_405A7A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:00405A7A                 mov     edx, 10h
.text:00405A7F                 jmp     loc_405A00
.text:00405A84 ; ---------------------------------------------------------------------------
.text:00405A84
.text:00405A84 loc_405A84:                             ; CODE XREF: ___get_errno+93↑j
.text:00405A84                 cmp     eax, 41h ; 'A'
.text:00405A87                 jz      short loc_405A22
.text:00405A89                 cmp     eax, 41h ; 'A'
.text:00405A8C                 jg      short loc_405AA1
.text:00405A8E                 cmp     eax, 24h ; '$'
.text:00405A91                 jz      short loc_405A22
.text:00405A93                 cmp     eax, 35h ; '5'
.text:00405A96                 jnz     loc_405A03
.text:00405A9C                 jmp     loc_4059F0
.text:00405AA1 ; ---------------------------------------------------------------------------
.text:00405AA1
.text:00405AA1 loc_405AA1:                             ; CODE XREF: ___get_errno+CC↑j
.text:00405AA1                 cmp     eax, 43h ; 'C'
.text:00405AA4                 jz      loc_4059F0
.text:00405AAA                 cmp     eax, 50h ; 'P'
.text:00405AAD                 jnz     loc_405A03
.text:00405AB3
.text:00405AB3 loc_405AB3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00405AB3                 mov     edx, 11h
.text:00405AB8                 jmp     loc_405A00
.text:00405AB8 ; ---------------------------------------------------------------------------
.text:00405ABD                 align 10h
.text:00405AC0
.text:00405AC0 loc_405AC0:                             ; CODE XREF: ___get_errno+7↑j
.text:00405AC0                 cmp     eax, 0A1h ; '¡'
.text:00405AC5                 jz      loc_4059F0
.text:00405ACB                 cmp     eax, 0A1h ; '¡'
.text:00405AD0                 jg      loc_405B80
.text:00405AD6                 cmp     eax, 81h
.text:00405ADB                 jg      short loc_405B45
.text:00405ADD                 cmp     eax, 80h ; '€'
.text:00405AE2                 mov     edx, 0Ah
.text:00405AE7                 jge     loc_405A00
.text:00405AED                 cmp     eax, 6Ch ; 'l'
.text:00405AF0                 jz      loc_405A22
.text:00405AF6                 cmp     eax, 6Ch ; 'l'
.text:00405AF9                 jg      short loc_405B17
.text:00405AFB                 cmp     eax, 57h ; 'W'
.text:00405AFE                 jz      loc_405A03
.text:00405B04                 cmp     eax, 59h ; 'Y'
.text:00405B07                 jnz     loc_405A03
.text:00405B0D
.text:00405B0D loc_405B0D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:00405B0D                                         ; ___get_errno+23C↓j
.text:00405B0D                 mov     edx, 0Bh
.text:00405B12                 jmp     loc_405A00
.text:00405B17 ; ---------------------------------------------------------------------------
.text:00405B17
.text:00405B17 loc_405B17:                             ; CODE XREF: ___get_errno+139↑j
.text:00405B17                 cmp     eax, 70h ; 'p'
.text:00405B1A                 mov     edx, 1Ch
.text:00405B1F                 jz      loc_405A00
.text:00405B25                 cmp     eax, 70h ; 'p'
.text:00405B28                 jg      short loc_405B37
.text:00405B2A                 mov     edx, 20h ; ' '
.text:00405B2F                 cmp     eax, 6Dh ; 'm'
.text:00405B32                 jmp     loc_405A71
.text:00405B37 ; ---------------------------------------------------------------------------
.text:00405B37
.text:00405B37 loc_405B37:                             ; CODE XREF: ___get_errno+168↑j
.text:00405B37                 cmp     eax, 72h ; 'r'
.text:00405B3A
.text:00405B3A loc_405B3A:                             ; CODE XREF: ___get_errno+19C↓j
.text:00405B3A                 jnz     loc_405A03
.text:00405B40                 jmp     loc_405A1B
.text:00405B45 ; ---------------------------------------------------------------------------
.text:00405B45
.text:00405B45 loc_405B45:                             ; CODE XREF: ___get_errno+11B↑j
.text:00405B45                 cmp     eax, 84h ; '„'
.text:00405B4A                 jz      loc_405A22
.text:00405B50                 cmp     eax, 84h ; '„'
.text:00405B55                 jg      short loc_405B5E
.text:00405B57                 cmp     eax, 82h ; '‚'
.text:00405B5C                 jmp     short loc_405B3A
.text:00405B5E ; ---------------------------------------------------------------------------
.text:00405B5E
.text:00405B5E loc_405B5E:                             ; CODE XREF: ___get_errno+195↑j
.text:00405B5E                 cmp     eax, 91h ; '‘'
.text:00405B63                 mov     edx, 29h ; ')'
.text:00405B68                 jz      loc_405A00
.text:00405B6E                 cmp     eax, 9Eh ; 'ž'
.text:00405B73
.text:00405B73 loc_405B73:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00405B73                 jnz     loc_405A03
.text:00405B79                 jmp     loc_405A22
.text:00405B79 ; ---------------------------------------------------------------------------
.text:00405B7E                 align 10h
.text:00405B80
.text:00405B80 loc_405B80:                             ; CODE XREF: ___get_errno+110↑j
.text:00405B80                 cmp     eax, 0CEh ; 'Î'
.text:00405B85                 jz      loc_4059F0
.text:00405B8B                 cmp     eax, 0CEh ; 'Î'
.text:00405B90                 jg      short loc_405BE0
.text:00405B92                 cmp     eax, 0AAh ; 'ª'
.text:00405B97                 jz      loc_405A7A
.text:00405B9D                 cmp     eax, 0AAh ; 'ª'
.text:00405BA2                 jg      short loc_405BB6
.text:00405BA4                 cmp     eax, 0A4h ; '¤'
.text:00405BA9                 jz      loc_405B0D
.text:00405BAF                 cmp     eax, 0A7h ; '§'
.text:00405BB4                 jmp     short loc_405B73
.text:00405BB6 ; ---------------------------------------------------------------------------
.text:00405BB6
.text:00405BB6 loc_405BB6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00405BB6                 cmp     eax, 0B7h ; '·'
.text:00405BBB                 jz      loc_405AB3
.text:00405BC1                 cmp     eax, 0B7h ; '·'
.text:00405BC6                 jl      loc_405A03
.text:00405BCC                 sub     eax, 0BCh ; '¼'
.text:00405BD1                 cmp     eax, 0Eh
.text:00405BD4                 ja      loc_405A03
.text:00405BDA                 jmp     loc_405A49
.text:00405BDA ; ---------------------------------------------------------------------------
.text:00405BDF                 align 10h
.text:00405BE0
.text:00405BE0 loc_405BE0:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00405BE0                 cmp     eax, 46Bh
.text:00405BE5                 mov     edx, 24h ; '$'
.text:00405BEA                 jz      loc_405A00
.text:00405BF0                 cmp     eax, 46Bh
.text:00405BF5                 jg      short loc_405C11
.text:00405BF7                 cmp     eax, 0D7h ; '×'
.text:00405BFC                 jz      loc_405B0D
.text:00405C02                 mov     edx, 5
.text:00405C07                 cmp     eax, 45Dh
.text:00405C0C                 jmp     loc_405A71
.text:00405C11 ; ---------------------------------------------------------------------------
.text:00405C11
.text:00405C11 loc_405C11:                             ; CODE XREF: ___get_errno+235↑j
.text:00405C11                 cmp     eax, 4D5h
.text:00405C16                 mov     edx, 4
.text:00405C1B                 jz      loc_405A00
.text:00405C21                 cmp     eax, 4D5h
.text:00405C26                 jg      short loc_405C37
.text:00405C28                 mov     edx, 13h
.text:00405C2D                 cmp     eax, 4B0h
.text:00405C32                 jmp     loc_405A71
.text:00405C37 ; ---------------------------------------------------------------------------
.text:00405C37
.text:00405C37 loc_405C37:                             ; CODE XREF: ___get_errno+266↑j
.text:00405C37                 cmp     eax, 718h
.text:00405C3C                 jnz     loc_405A03
.text:00405C42                 jmp     loc_405A29
.text:00405C42 ___get_errno    endp
.text:00405C42
.text:00405C42 ; ---------------------------------------------------------------------------
.text:00405C47                 align 10h
.text:00405C50
.text:00405C50 ; =============== S U B R O U T I N E =======================================
.text:00405C50
.text:00405C50
.text:00405C50 sub_405C50      proc near               ; CODE XREF: sub_405970:loc_4059A9↑p
.text:00405C50
.text:00405C50 var_C           = dword ptr -0Ch
.text:00405C50
.text:00405C50                 sub     esp, 0Ch
.text:00405C53                 call    GetLastError
.text:00405C58                 mov     [esp+0Ch+var_C], eax
.text:00405C5B                 call    ___get_errno
.text:00405C60                 add     esp, 0Ch
.text:00405C63                 retn
.text:00405C63 sub_405C50      endp
.text:00405C63
.text:00405C63 ; ---------------------------------------------------------------------------
.text:00405C64                 align 10h
.text:00405C70
.text:00405C70 ; =============== S U B R O U T I N E =======================================
.text:00405C70
.text:00405C70 ; Attributes: thunk
.text:00405C70
.text:00405C70 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00405C70 mbrtowc         proc near               ; CODE XREF: sub_403FE0+757↑p
.text:00405C70
.text:00405C70 DstCh           = dword ptr  4
.text:00405C70 SrcCh           = dword ptr  8
.text:00405C70 SizeInBytes     = dword ptr  0Ch
.text:00405C70 State           = dword ptr  10h
.text:00405C70
.text:00405C70                 jmp     ds:__imp_mbrtowc
.text:00405C70 mbrtowc         endp
.text:00405C70
.text:00405C70 ; ---------------------------------------------------------------------------
.text:00405C76                 align 10h
.text:00405C80
.text:00405C80 ; =============== S U B R O U T I N E =======================================
.text:00405C80
.text:00405C80 ; Attributes: bp-based frame
.text:00405C80
.text:00405C80 sub_405C80      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00405C80                 push    ebp
.text:00405C81                 mov     ecx, offset byte_408000
.text:00405C86                 cmp     ecx, offset byte_408000
.text:00405C8C                 mov     ebp, esp
.text:00405C8E                 jnb     short loc_405CA6
.text:00405C90
.text:00405C90 loc_405C90:                             ; CODE XREF: sub_405C80+24↓j
.text:00405C90                 mov     edx, [ecx+4]
.text:00405C93                 mov     eax, [ecx]
.text:00405C95                 add     ecx, 8
.text:00405C98                 add     [edx+400000h], eax
.text:00405C9E                 cmp     ecx, offset byte_408000
.text:00405CA4                 jb      short loc_405C90
.text:00405CA6
.text:00405CA6 loc_405CA6:                             ; CODE XREF: sub_405C80+E↑j
.text:00405CA6                 pop     ebp
.text:00405CA7                 retn
.text:00405CA7 sub_405C80      endp
.text:00405CA7
.text:00405CA7 ; ---------------------------------------------------------------------------
.text:00405CA8                 align 10h
.text:00405CB0
.text:00405CB0 ; =============== S U B R O U T I N E =======================================
.text:00405CB0
.text:00405CB0 ; Attributes: bp-based frame
.text:00405CB0
.text:00405CB0 sub_405CB0      proc near               ; CODE XREF: sub_401080+16↑p
.text:00405CB0                                         ; TopLevelExceptionFilter+D7↑p
.text:00405CB0                 push    ebp
.text:00405CB1                 mov     ebp, esp
.text:00405CB3                 fninit
.text:00405CB5                 pop     ebp
.text:00405CB6                 retn
.text:00405CB6 sub_405CB0      endp
.text:00405CB6
.text:00405CB6 ; ---------------------------------------------------------------------------
.text:00405CB7                 align 10h
.text:00405CC0
.text:00405CC0 ; =============== S U B R O U T I N E =======================================
.text:00405CC0
.text:00405CC0 ; Attributes: bp-based frame
.text:00405CC0
.text:00405CC0 ; void __cdecl sub_405CC0()
.text:00405CC0 sub_405CC0      proc near               ; DATA XREF: .text:loc_405D09↓o
.text:00405CC0                                         ; sub_405D50:loc_405D7E↓o
.text:00405CC0                 push    ebp
.text:00405CC1                 mov     ebp, esp
.text:00405CC3                 sub     esp, 8
.text:00405CC6                 mov     eax, off_4070A4
.text:00405CCB                 mov     edx, [eax]
.text:00405CCD                 test    edx, edx
.text:00405CCF                 jnz     short loc_405CD5
.text:00405CD1
.text:00405CD1 loc_405CD1:                             ; CODE XREF: sub_405CC0+2C↓j
.text:00405CD1                 mov     esp, ebp
.text:00405CD3                 pop     ebp
.text:00405CD4                 retn
.text:00405CD5 ; ---------------------------------------------------------------------------
.text:00405CD5
.text:00405CD5 loc_405CD5:                             ; CODE XREF: sub_405CC0+F↑j
.text:00405CD5                                         ; sub_405CC0+2A↓j
.text:00405CD5                 call    dword ptr [eax]
.text:00405CD7                 mov     edx, off_4070A4
.text:00405CDD                 mov     ecx, [edx+4]
.text:00405CE0                 lea     eax, [edx+4]
.text:00405CE3                 mov     off_4070A4, eax
.text:00405CE8                 test    ecx, ecx
.text:00405CEA                 jnz     short loc_405CD5
.text:00405CEC                 jmp     short loc_405CD1
.text:00405CEC sub_405CC0      endp
.text:00405CEC
.text:00405CEC ; ---------------------------------------------------------------------------
.text:00405CEE                 align 10h
.text:00405CF0                 push    ebp
.text:00405CF1                 mov     ebp, esp
.text:00405CF3                 sub     esp, 8
.text:00405CF6                 mov     [ebp-4], ebx
.text:00405CF9                 mov     eax, ds:dword_406030
.text:00405CFE                 cmp     eax, 0FFFFFFFFh
.text:00405D01                 jz      short loc_405D2C
.text:00405D03
.text:00405D03 loc_405D03:                             ; CODE XREF: .text:00405D36↓j
.text:00405D03                                         ; .text:00405D49↓j
.text:00405D03                 test    eax, eax
.text:00405D05                 mov     ebx, eax
.text:00405D07                 jnz     short loc_405D20
.text:00405D09
.text:00405D09 loc_405D09:                             ; CODE XREF: .text:00405D2A↓j
.text:00405D09                 mov     dword ptr [esp], offset sub_405CC0
.text:00405D10                 call    sub_401040
.text:00405D15                 mov     ebx, [ebp-4]
.text:00405D18                 mov     esp, ebp
.text:00405D1A                 pop     ebp
.text:00405D1B                 retn
.text:00405D1B ; ---------------------------------------------------------------------------
.text:00405D1C                 align 10h
.text:00405D20
.text:00405D20 loc_405D20:                             ; CODE XREF: .text:00405D07↑j
.text:00405D20                                         ; .text:00405D28↓j
.text:00405D20                 call    ds:dword_406030[ebx*4]
.text:00405D27                 dec     ebx
.text:00405D28                 jnz     short loc_405D20
.text:00405D2A                 jmp     short loc_405D09
.text:00405D2C ; ---------------------------------------------------------------------------
.text:00405D2C
.text:00405D2C loc_405D2C:                             ; CODE XREF: .text:00405D01↑j
.text:00405D2C                 mov     ecx, ds:dword_406034
.text:00405D32                 xor     eax, eax
.text:00405D34                 test    ecx, ecx
.text:00405D36                 jz      short loc_405D03
.text:00405D38                 mov     edx, offset dword_406030
.text:00405D3D                 lea     esi, [esi+0]
.text:00405D40
.text:00405D40 loc_405D40:                             ; CODE XREF: .text:00405D47↓j
.text:00405D40                 inc     eax
.text:00405D41                 mov     ecx, [edx+eax*4+4]
.text:00405D45                 test    ecx, ecx
.text:00405D47                 jnz     short loc_405D40
.text:00405D49                 jmp     short loc_405D03
.text:00405D49 ; ---------------------------------------------------------------------------
.text:00405D4B                 align 10h
.text:00405D50
.text:00405D50 ; =============== S U B R O U T I N E =======================================
.text:00405D50
.text:00405D50 ; Attributes: bp-based frame
.text:00405D50
.text:00405D50 sub_405D50      proc near               ; CODE XREF: sub_401770+19↑p
.text:00405D50
.text:00405D50 var_8           = dword ptr -8
.text:00405D50 var_4           = dword ptr -4
.text:00405D50
.text:00405D50                 push    ebp
.text:00405D51                 mov     ebp, esp
.text:00405D53                 sub     esp, 8
.text:00405D56                 mov     [ebp+var_4], ebx
.text:00405D59                 mov     edx, dword_4070A0
.text:00405D5F                 test    edx, edx
.text:00405D61                 jnz     short loc_405D8A
.text:00405D63                 mov     eax, ds:dword_406030
.text:00405D68                 mov     edx, 1
.text:00405D6D                 mov     dword_4070A0, edx
.text:00405D73                 cmp     eax, 0FFFFFFFFh
.text:00405D76                 jz      short loc_405D9D
.text:00405D78
.text:00405D78 loc_405D78:                             ; CODE XREF: sub_405D50+57↓j
.text:00405D78                                         ; sub_405D50+69↓j
.text:00405D78                 test    eax, eax
.text:00405D7A                 mov     ebx, eax
.text:00405D7C                 jnz     short loc_405D91
.text:00405D7E
.text:00405D7E loc_405D7E:                             ; CODE XREF: sub_405D50+4B↓j
.text:00405D7E                 mov     [esp+8+var_8], offset sub_405CC0 ; void (__cdecl *)()
.text:00405D85                 call    sub_401040
.text:00405D8A
.text:00405D8A loc_405D8A:                             ; CODE XREF: sub_405D50+11↑j
.text:00405D8A                 mov     ebx, [ebp+var_4]
.text:00405D8D                 mov     esp, ebp
.text:00405D8F                 pop     ebp
.text:00405D90                 retn
.text:00405D91 ; ---------------------------------------------------------------------------
.text:00405D91
.text:00405D91 loc_405D91:                             ; CODE XREF: sub_405D50+2C↑j
.text:00405D91                                         ; sub_405D50+49↓j
.text:00405D91                 call    ds:dword_406030[ebx*4]
.text:00405D98                 dec     ebx
.text:00405D99                 jnz     short loc_405D91
.text:00405D9B                 jmp     short loc_405D7E
.text:00405D9D ; ---------------------------------------------------------------------------
.text:00405D9D
.text:00405D9D loc_405D9D:                             ; CODE XREF: sub_405D50+26↑j
.text:00405D9D                 mov     ecx, ds:dword_406034
.text:00405DA3                 xor     eax, eax
.text:00405DA5                 test    ecx, ecx
.text:00405DA7                 jz      short loc_405D78
.text:00405DA9                 mov     edx, offset dword_406030
.text:00405DAE                 mov     esi, esi
.text:00405DB0
.text:00405DB0 loc_405DB0:                             ; CODE XREF: sub_405D50+67↓j
.text:00405DB0                 inc     eax
.text:00405DB1                 mov     ebx, [edx+eax*4+4]
.text:00405DB5                 test    ebx, ebx
.text:00405DB7                 jnz     short loc_405DB0
.text:00405DB9                 jmp     short loc_405D78
.text:00405DB9 sub_405D50      endp
.text:00405DB9
.text:00405DB9 ; ---------------------------------------------------------------------------
.text:00405DBB                 align 10h
.text:00405DC0
.text:00405DC0 ; =============== S U B R O U T I N E =======================================
.text:00405DC0
.text:00405DC0 ; Attributes: info_from_lumina
.text:00405DC0
.text:00405DC0 ; void *__cdecl _alloca(size_t Size)
.text:00405DC0 __alloca        proc near               ; CODE XREF: sub_401770+14↑p
.text:00405DC0                 push    ecx
.text:00405DC1                 mov     ecx, esp
.text:00405DC3                 add     ecx, 8
.text:00405DC6
.text:00405DC6 loc_405DC6:                             ; CODE XREF: __alloca+1B↓j
.text:00405DC6                 cmp     eax, 1000h
.text:00405DCB                 jb      short loc_405DDD
.text:00405DCD                 sub     ecx, 1000h
.text:00405DD3                 or      dword ptr [ecx], 0
.text:00405DD6                 sub     eax, 1000h
.text:00405DDB                 jmp     short loc_405DC6
.text:00405DDD ; ---------------------------------------------------------------------------
.text:00405DDD
.text:00405DDD loc_405DDD:                             ; CODE XREF: __alloca+B↑j
.text:00405DDD                 sub     ecx, eax
.text:00405DDF                 or      dword ptr [ecx], 0
.text:00405DE2                 mov     eax, esp
.text:00405DE4                 mov     esp, ecx
.text:00405DE6                 mov     ecx, [eax]
.text:00405DE8                 mov     eax, [eax+4]
.text:00405DEB                 jmp     eax
.text:00405DEB __alloca        endp
.text:00405DEB
.text:00405DEB ; ---------------------------------------------------------------------------
.text:00405DED                 align 10h
.text:00405DF0                 jmp     ds:__set_app_type
.text:00405DF0 ; ---------------------------------------------------------------------------
.text:00405DF6                 align 10h
.text:00405E00
.text:00405E00 ; =============== S U B R O U T I N E =======================================
.text:00405E00
.text:00405E00 ; Attributes: thunk
.text:00405E00
.text:00405E00 ; void __cdecl cexit()
.text:00405E00 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00405E00                 jmp     ds:__imp__cexit
.text:00405E00 _cexit          endp
.text:00405E00
.text:00405E00 ; ---------------------------------------------------------------------------
.text:00405E06                 align 10h
.text:00405E10
.text:00405E10 ; =============== S U B R O U T I N E =======================================
.text:00405E10
.text:00405E10 ; Attributes: thunk
.text:00405E10
.text:00405E10 ; char ***__cdecl _p__environ()
.text:00405E10 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00405E10                 jmp     ds:__imp___p__environ
.text:00405E10 __p__environ    endp
.text:00405E10
.text:00405E10 ; ---------------------------------------------------------------------------
.text:00405E16                 align 10h
.text:00405E20
.text:00405E20 ; =============== S U B R O U T I N E =======================================
.text:00405E20
.text:00405E20 ; Attributes: thunk
.text:00405E20
.text:00405E20 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00405E20 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00405E20                                         ; TopLevelExceptionFilter+88↑p ...
.text:00405E20
.text:00405E20 Signal          = dword ptr  4
.text:00405E20 Function        = dword ptr  8
.text:00405E20
.text:00405E20                 jmp     ds:__imp_signal
.text:00405E20 signal          endp
.text:00405E20
.text:00405E20 ; ---------------------------------------------------------------------------
.text:00405E26                 align 10h
.text:00405E30
.text:00405E30 ; =============== S U B R O U T I N E =======================================
.text:00405E30
.text:00405E30 ; Attributes: thunk
.text:00405E30
.text:00405E30 ; int *__cdecl _p__fmode()
.text:00405E30 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00405E30                 jmp     ds:__imp___p__fmode
.text:00405E30 __p__fmode      endp
.text:00405E30
.text:00405E30 ; ---------------------------------------------------------------------------
.text:00405E36                 align 10h
.text:00405E40
.text:00405E40 ; =============== S U B R O U T I N E =======================================
.text:00405E40
.text:00405E40 ; Attributes: thunk
.text:00405E40
.text:00405E40 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00405E40 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00405E40                                         ; sub_401080+90↑p ...
.text:00405E40
.text:00405E40 FileHandle      = dword ptr  4
.text:00405E40 Mode            = dword ptr  8
.text:00405E40
.text:00405E40                 jmp     ds:__imp__setmode
.text:00405E40 _setmode        endp
.text:00405E40
.text:00405E40 ; ---------------------------------------------------------------------------
.text:00405E46                 align 10h
.text:00405E50
.text:00405E50 ; =============== S U B R O U T I N E =======================================
.text:00405E50
.text:00405E50 ; Attributes: thunk
.text:00405E50
.text:00405E50 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00405E50                 jmp     ds:__imp___getmainargs
.text:00405E50 __getmainargs   endp
.text:00405E50
.text:00405E50 ; ---------------------------------------------------------------------------
.text:00405E56                 align 10h
.text:00405E60
.text:00405E60 ; =============== S U B R O U T I N E =======================================
.text:00405E60
.text:00405E60 ; Attributes: thunk
.text:00405E60
.text:00405E60 ; void __cdecl free(void *Block)
.text:00405E60 free            proc near               ; CODE XREF: sub_401D70+112↑p
.text:00405E60                                         ; sub_401F10+1FE↑p ...
.text:00405E60
.text:00405E60 Block           = dword ptr  4
.text:00405E60
.text:00405E60                 jmp     ds:__imp_free
.text:00405E60 free            endp
.text:00405E60
.text:00405E60 ; ---------------------------------------------------------------------------
.text:00405E66                 align 10h
.text:00405E70
.text:00405E70 ; =============== S U B R O U T I N E =======================================
.text:00405E70
.text:00405E70 ; Attributes: thunk
.text:00405E70
.text:00405E70 ; int *__cdecl errno()
.text:00405E70 _errno          proc near               ; CODE XREF: sub_402290+91↑p
.text:00405E70                                         ; sub_403670+AE↑p ...
.text:00405E70                 jmp     ds:__imp__errno
.text:00405E70 _errno          endp
.text:00405E70
.text:00405E70 ; ---------------------------------------------------------------------------
.text:00405E76                 align 10h
.text:00405E80
.text:00405E80 ; =============== S U B R O U T I N E =======================================
.text:00405E80
.text:00405E80 ; Attributes: thunk
.text:00405E80
.text:00405E80 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00405E80 setlocale       proc near               ; CODE XREF: sub_401770+45↑p
.text:00405E80
.text:00405E80 Category        = dword ptr  4
.text:00405E80 Locale          = dword ptr  8
.text:00405E80
.text:00405E80                 jmp     ds:__imp_setlocale
.text:00405E80 setlocale       endp
.text:00405E80
.text:00405E80 ; ---------------------------------------------------------------------------
.text:00405E86                 align 10h
.text:00405E90
.text:00405E90 ; =============== S U B R O U T I N E =======================================
.text:00405E90
.text:00405E90 ; Attributes: noreturn thunk
.text:00405E90
.text:00405E90 ; void __cdecl __noreturn exit(int Code)
.text:00405E90 exit            proc near               ; CODE XREF: sub_401770:loc_401879↑p
.text:00405E90                                         ; .text:0040217E↑p ...
.text:00405E90
.text:00405E90 Code            = dword ptr  4
.text:00405E90
.text:00405E90                 jmp     ds:__imp_exit
.text:00405E90 exit            endp
.text:00405E90
.text:00405E90 ; ---------------------------------------------------------------------------
.text:00405E96                 align 10h
.text:00405EA0
.text:00405EA0 ; =============== S U B R O U T I N E =======================================
.text:00405EA0
.text:00405EA0 ; Attributes: thunk
.text:00405EA0
.text:00405EA0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00405EA0 fputs           proc near               ; CODE XREF: sub_401770+19B↑p
.text:00405EA0                                         ; sub_401770+1BD↑p ...
.text:00405EA0
.text:00405EA0 Buffer          = dword ptr  4
.text:00405EA0 Stream          = dword ptr  8
.text:00405EA0
.text:00405EA0                 jmp     ds:__imp_fputs
.text:00405EA0 fputs           endp
.text:00405EA0
.text:00405EA0 ; ---------------------------------------------------------------------------
.text:00405EA6                 align 10h
.text:00405EB0
.text:00405EB0 ; =============== S U B R O U T I N E =======================================
.text:00405EB0
.text:00405EB0 ; Attributes: thunk
.text:00405EB0
.text:00405EB0 ; int printf(const char *const Format, ...)
.text:00405EB0 printf          proc near               ; CODE XREF: sub_401770+179↑p
.text:00405EB0                                         ; sub_401770+21E↑p ...
.text:00405EB0
.text:00405EB0 Format          = dword ptr  4
.text:00405EB0
.text:00405EB0                 jmp     ds:__imp_printf
.text:00405EB0 printf          endp
.text:00405EB0
.text:00405EB0 ; ---------------------------------------------------------------------------
.text:00405EB6                 align 10h
.text:00405EC0
.text:00405EC0 ; =============== S U B R O U T I N E =======================================
.text:00405EC0
.text:00405EC0 ; Attributes: thunk
.text:00405EC0
.text:00405EC0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00405EC0 fprintf         proc near               ; CODE XREF: sub_401770+FD↑p
.text:00405EC0                                         ; .text:00402176↑p ...
.text:00405EC0
.text:00405EC0 Stream          = dword ptr  4
.text:00405EC0 Format          = dword ptr  8
.text:00405EC0
.text:00405EC0                 jmp     ds:__imp_fprintf
.text:00405EC0 fprintf         endp
.text:00405EC0
.text:00405EC0 ; ---------------------------------------------------------------------------
.text:00405EC6                 align 10h
.text:00405ED0
.text:00405ED0 ; =============== S U B R O U T I N E =======================================
.text:00405ED0
.text:00405ED0 ; Attributes: thunk
.text:00405ED0
.text:00405ED0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00405ED0 _flsbuf         proc near               ; CODE XREF: sub_401770+398↑p
.text:00405ED0                                         ; sub_401D70+12D↑p ...
.text:00405ED0
.text:00405ED0 File            = dword ptr  8
.text:00405ED0
.text:00405ED0                 jmp     ds:__imp__flsbuf
.text:00405ED0 _flsbuf         endp
.text:00405ED0
.text:00405ED0 ; ---------------------------------------------------------------------------
.text:00405ED6                 align 10h
.text:00405EE0
.text:00405EE0 ; =============== S U B R O U T I N E =======================================
.text:00405EE0
.text:00405EE0 ; Attributes: thunk
.text:00405EE0
.text:00405EE0 ; size_t __cdecl strlen(const char *Str)
.text:00405EE0 strlen          proc near               ; CODE XREF: sub_4025D0+2A9↑p
.text:00405EE0                                         ; sub_4025D0+346↑p ...
.text:00405EE0
.text:00405EE0 Str             = dword ptr  4
.text:00405EE0
.text:00405EE0                 jmp     ds:__imp_strlen
.text:00405EE0 strlen          endp
.text:00405EE0
.text:00405EE0 ; ---------------------------------------------------------------------------
.text:00405EE6                 align 10h
.text:00405EF0
.text:00405EF0 ; =============== S U B R O U T I N E =======================================
.text:00405EF0
.text:00405EF0 ; Attributes: thunk
.text:00405EF0
.text:00405EF0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00405EF0 strncmp         proc near               ; CODE XREF: sub_4025D0+23F↑p
.text:00405EF0                                         ; sub_4025D0+699↑p
.text:00405EF0
.text:00405EF0 Str1            = dword ptr  4
.text:00405EF0 Str2            = dword ptr  8
.text:00405EF0 MaxCount        = dword ptr  0Ch
.text:00405EF0
.text:00405EF0                 jmp     ds:__imp_strncmp
.text:00405EF0 strncmp         endp
.text:00405EF0
.text:00405EF0 ; ---------------------------------------------------------------------------
.text:00405EF6                 align 10h
.text:00405F00
.text:00405F00 ; =============== S U B R O U T I N E =======================================
.text:00405F00
.text:00405F00 ; Attributes: thunk
.text:00405F00
.text:00405F00 ; char *__cdecl getenv(const char *VarName)
.text:00405F00 getenv          proc near               ; CODE XREF: sub_4025D0+B57↑p
.text:00405F00                                         ; sub_405780+9D↑p ...
.text:00405F00
.text:00405F00 VarName         = dword ptr  4
.text:00405F00
.text:00405F00                 jmp     ds:__imp_getenv
.text:00405F00 getenv          endp
.text:00405F00
.text:00405F00 ; ---------------------------------------------------------------------------
.text:00405F06                 align 10h
.text:00405F10
.text:00405F10 ; =============== S U B R O U T I N E =======================================
.text:00405F10
.text:00405F10 ; Attributes: thunk
.text:00405F10
.text:00405F10 ; char *__cdecl strchr(const char *Str, int Val)
.text:00405F10 strchr          proc near               ; CODE XREF: sub_4025D0+469↑p
.text:00405F10                                         ; sub_4025D0+53A↑p ...
.text:00405F10
.text:00405F10 Str             = dword ptr  4
.text:00405F10 Val             = dword ptr  8
.text:00405F10
.text:00405F10                 jmp     ds:__imp_strchr
.text:00405F10 strchr          endp
.text:00405F10
.text:00405F10 ; ---------------------------------------------------------------------------
.text:00405F16                 align 10h
.text:00405F20
.text:00405F20 ; =============== S U B R O U T I N E =======================================
.text:00405F20
.text:00405F20 ; Attributes: thunk
.text:00405F20
.text:00405F20 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00405F20 memcpy          proc near               ; CODE XREF: .text:00403588↑p
.text:00405F20                                         ; .text:004035D1↑p ...
.text:00405F20
.text:00405F20 Src             = dword ptr  8
.text:00405F20 Size            = dword ptr  0Ch
.text:00405F20
.text:00405F20                 jmp     ds:__imp_memcpy
.text:00405F20 memcpy          endp
.text:00405F20
.text:00405F20 ; ---------------------------------------------------------------------------
.text:00405F26                 align 10h
.text:00405F30
.text:00405F30 ; =============== S U B R O U T I N E =======================================
.text:00405F30
.text:00405F30 ; Attributes: thunk
.text:00405F30
.text:00405F30 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00405F30 memset          proc near               ; CODE XREF: .text:00403506↑p
.text:00405F30
.text:00405F30 Val             = dword ptr  8
.text:00405F30 Size            = dword ptr  0Ch
.text:00405F30
.text:00405F30                 jmp     ds:__imp_memset
.text:00405F30 memset          endp
.text:00405F30
.text:00405F30 ; ---------------------------------------------------------------------------
.text:00405F36                 align 10h
.text:00405F40
.text:00405F40 ; =============== S U B R O U T I N E =======================================
.text:00405F40
.text:00405F40 ; Attributes: thunk
.text:00405F40
.text:00405F40 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00405F40 calloc          proc near               ; CODE XREF: .text:00403543↑p
.text:00405F40
.text:00405F40 Count           = dword ptr  4
.text:00405F40 Size            = dword ptr  8
.text:00405F40
.text:00405F40                 jmp     ds:__imp_calloc
.text:00405F40 calloc          endp
.text:00405F40
.text:00405F40 ; ---------------------------------------------------------------------------
.text:00405F46                 align 10h
.text:00405F50
.text:00405F50 ; =============== S U B R O U T I N E =======================================
.text:00405F50
.text:00405F50 ; Attributes: thunk
.text:00405F50
.text:00405F50 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00405F50 realloc         proc near               ; CODE XREF: .text:00403440↑p
.text:00405F50                                         ; sub_403470+16↑p ...
.text:00405F50
.text:00405F50 Block           = dword ptr  4
.text:00405F50 Size            = dword ptr  8
.text:00405F50
.text:00405F50                 jmp     ds:__imp_realloc
.text:00405F50 realloc         endp
.text:00405F50
.text:00405F50 ; ---------------------------------------------------------------------------
.text:00405F56                 align 10h
.text:00405F60
.text:00405F60 ; =============== S U B R O U T I N E =======================================
.text:00405F60
.text:00405F60 ; Attributes: thunk
.text:00405F60
.text:00405F60 ; void *__cdecl malloc(size_t Size)
.text:00405F60 malloc          proc near               ; CODE XREF: sub_4033A0+24↑p
.text:00405F60                                         ; sub_4033E0+E↑p ...
.text:00405F60
.text:00405F60 Size            = dword ptr  4
.text:00405F60
.text:00405F60                 jmp     ds:__imp_malloc
.text:00405F60 malloc          endp
.text:00405F60
.text:00405F60 ; ---------------------------------------------------------------------------
.text:00405F66                 align 10h
.text:00405F70
.text:00405F70 ; =============== S U B R O U T I N E =======================================
.text:00405F70
.text:00405F70 ; Attributes: thunk
.text:00405F70
.text:00405F70 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00405F70 strcmp          proc near               ; CODE XREF: sub_403670+5B↑p
.text:00405F70                                         ; sub_405444+180↑p
.text:00405F70
.text:00405F70 Str1            = dword ptr  4
.text:00405F70 Str2            = dword ptr  8
.text:00405F70
.text:00405F70                 jmp     ds:__imp_strcmp
.text:00405F70 strcmp          endp
.text:00405F70
.text:00405F70 ; ---------------------------------------------------------------------------
.text:00405F76                 align 10h
.text:00405F80
.text:00405F80 ; =============== S U B R O U T I N E =======================================
.text:00405F80
.text:00405F80 ; Attributes: thunk
.text:00405F80
.text:00405F80 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00405F80 vfprintf        proc near               ; CODE XREF: sub_403A90+C1↑p
.text:00405F80                                         ; sub_405340+49↑p ...
.text:00405F80
.text:00405F80 Stream          = dword ptr  4
.text:00405F80 Format          = dword ptr  8
.text:00405F80 ArgList         = dword ptr  0Ch
.text:00405F80
.text:00405F80                 jmp     ds:__imp_vfprintf
.text:00405F80 vfprintf        endp
.text:00405F80
.text:00405F80 ; ---------------------------------------------------------------------------
.text:00405F86                 align 10h
.text:00405F90
.text:00405F90 ; =============== S U B R O U T I N E =======================================
.text:00405F90
.text:00405F90 ; Attributes: noreturn thunk
.text:00405F90
.text:00405F90 ; void __cdecl __noreturn abort()
.text:00405F90 abort           proc near               ; CODE XREF: sub_403A90:loc_403B2C↑p
.text:00405F90                                         ; sub_403F10+32↑p ...
.text:00405F90                 jmp     ds:__imp_abort
.text:00405F90 abort           endp
.text:00405F90
.text:00405F90 ; ---------------------------------------------------------------------------
.text:00405F96                 align 10h
.text:00405FA0
.text:00405FA0 ; =============== S U B R O U T I N E =======================================
.text:00405FA0
.text:00405FA0 ; Attributes: thunk
.text:00405FA0
.text:00405FA0 ; int __cdecl fclose(FILE *Stream)
.text:00405FA0 fclose          proc near               ; CODE XREF: sub_403E10+27↑p
.text:00405FA0
.text:00405FA0 Stream          = dword ptr  4
.text:00405FA0
.text:00405FA0                 jmp     ds:__imp_fclose
.text:00405FA0 fclose          endp
.text:00405FA0
.text:00405FA0 ; ---------------------------------------------------------------------------
.text:00405FA6                 align 10h
.text:00405FB0
.text:00405FB0 ; =============== S U B R O U T I N E =======================================
.text:00405FB0
.text:00405FB0 ; Attributes: thunk
.text:00405FB0
.text:00405FB0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00405FB0 iswctype        proc near               ; CODE XREF: sub_403FE0+78B↑p
.text:00405FB0
.text:00405FB0 C               = word ptr  4
.text:00405FB0 Type            = word ptr  8
.text:00405FB0
.text:00405FB0                 jmp     ds:__imp_iswctype
.text:00405FB0 iswctype        endp
.text:00405FB0
.text:00405FB0 ; ---------------------------------------------------------------------------
.text:00405FB6                 align 10h
.text:00405FC0
.text:00405FC0 ; =============== S U B R O U T I N E =======================================
.text:00405FC0
.text:00405FC0 ; Attributes: thunk
.text:00405FC0
.text:00405FC0 ; int __cdecl isctype(int C, int Type)
.text:00405FC0 _isctype        proc near               ; CODE XREF: sub_403FE0+610↑p
.text:00405FC0
.text:00405FC0 C               = dword ptr  4
.text:00405FC0 Type            = dword ptr  8
.text:00405FC0
.text:00405FC0                 jmp     ds:__imp__isctype
.text:00405FC0 _isctype        endp
.text:00405FC0
.text:00405FC0 ; ---------------------------------------------------------------------------
.text:00405FC6                 align 10h
.text:00405FD0
.text:00405FD0 ; =============== S U B R O U T I N E =======================================
.text:00405FD0
.text:00405FD0 ; Attributes: thunk
.text:00405FD0
.text:00405FD0 ; int __cdecl fflush(FILE *Stream)
.text:00405FD0 fflush          proc near               ; CODE XREF: sub_405340+19↑p
.text:00405FD0                                         ; sub_405340+81↑p ...
.text:00405FD0
.text:00405FD0 Stream          = dword ptr  4
.text:00405FD0
.text:00405FD0                 jmp     ds:__imp_fflush
.text:00405FD0 fflush          endp
.text:00405FD0
.text:00405FD0 ; ---------------------------------------------------------------------------
.text:00405FD6                 align 10h
.text:00405FE0
.text:00405FE0 ; =============== S U B R O U T I N E =======================================
.text:00405FE0
.text:00405FE0 ; Attributes: thunk
.text:00405FE0
.text:00405FE0 ; char *__cdecl strerror(int ErrorMessage)
.text:00405FE0 strerror        proc near               ; CODE XREF: sub_405340+A5↑p
.text:00405FE0                                         ; sub_405444+10F↑p
.text:00405FE0
.text:00405FE0 ErrorMessage    = dword ptr  4
.text:00405FE0
.text:00405FE0                 jmp     ds:__imp_strerror
.text:00405FE0 strerror        endp
.text:00405FE0
.text:00405FE0 ; ---------------------------------------------------------------------------
.text:00405FE6                 align 10h
.text:00405FF0
.text:00405FF0 ; =============== S U B R O U T I N E =======================================
.text:00405FF0
.text:00405FF0 ; Attributes: thunk
.text:00405FF0
.text:00405FF0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00405FF0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00405FF0
.text:00405FF0 lpTopLevelExceptionFilter= dword ptr  4
.text:00405FF0
.text:00405FF0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00405FF0 SetUnhandledExceptionFilter endp
.text:00405FF0
.text:00405FF0 ; ---------------------------------------------------------------------------
.text:00405FF6                 align 10h
.text:00406000
.text:00406000 ; =============== S U B R O U T I N E =======================================
.text:00406000
.text:00406000 ; Attributes: noreturn thunk
.text:00406000
.text:00406000 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00406000 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00406000
.text:00406000 uExitCode       = dword ptr  4
.text:00406000
.text:00406000                 jmp     ds:__imp_ExitProcess
.text:00406000 ExitProcess     endp
.text:00406000
.text:00406000 ; ---------------------------------------------------------------------------
.text:00406006                 align 10h
.text:00406010
.text:00406010 ; =============== S U B R O U T I N E =======================================
.text:00406010
.text:00406010 ; Attributes: thunk
.text:00406010
.text:00406010 ; DWORD __stdcall GetLastError()
.text:00406010 GetLastError    proc near               ; CODE XREF: sub_405C50+3↑p
.text:00406010                 jmp     ds:__imp_GetLastError
.text:00406010 GetLastError    endp
.text:00406010
.text:00406010 ; ---------------------------------------------------------------------------
.text:00406016                 align 10h
.text:00406020
.text:00406020 ; =============== S U B R O U T I N E =======================================
.text:00406020
.text:00406020 ; Attributes: thunk
.text:00406020
.text:00406020 ; BOOL __stdcall GetUserNameA(LPSTR lpBuffer, LPDWORD pcbBuffer)
.text:00406020 GetUserNameA    proc near               ; CODE XREF: sub_405970+1E↑p
.text:00406020
.text:00406020 lpBuffer        = dword ptr  4
.text:00406020 pcbBuffer       = dword ptr  8
.text:00406020
.text:00406020                 jmp     ds:__imp_GetUserNameA
.text:00406020 GetUserNameA    endp
.text:00406020
.text:00406020 ; ---------------------------------------------------------------------------
.text:00406026                 align 10h
.text:00406030 dword_406030    dd 0FFFFFFFFh           ; DATA XREF: .text:00405CF9↑r
.text:00406030                                         ; .text:loc_405D20↑r ...
.text:00406034 dword_406034    dd 0                    ; DATA XREF: .text:loc_405D2C↑r
.text:00406034                                         ; sub_405D50:loc_405D9D↑r
.text:00406038                 dd 0FFFFFFFFh
.text:0040603C dword_40603C    dd 71h dup(0)           ; DATA XREF: .data:off_4070A4↓o
.text:00406200                 dd 380h dup(?)
.text:00406200 _text           ends
.text:00406200
.data:00407000 ; Section 2. (virtual address 00007000)
.data:00407000 ; Virtual size                  : 000000C0 (    192.)
.data:00407000 ; Section size in file          : 00000200 (    512.)
.data:00407000 ; Offset to raw data for section: 00005600
.data:00407000 ; Flags C0000040: Data Readable Writable
.data:00407000 ; Alignment     : default
.data:00407000 ; ===========================================================================
.data:00407000
.data:00407000 ; Segment type: Pure data
.data:00407000 ; Segment permissions: Read/Write
.data:00407000 _data           segment para public 'DATA' use32
.data:00407000                 assume cs:_data
.data:00407000                 ;org 407000h
.data:00407000 dword_407000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00407000                                         ; sub_401080+CC↑r
.data:00407004 dword_407004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00407004                                         ; sub_401080+D4↑r
.data:00407008                 align 10h
.data:00407010 byte_407010     db 1                    ; DATA XREF: sub_401770+372↑r
.data:00407010                                         ; sub_401C40+74↑w ...
.data:00407011                 align 10h
.data:00407020 dword_407020    dd 1                    ; DATA XREF: sub_401770:loc_401A2E↑r
.data:00407020                                         ; sub_401770+3CE↑r ...
.data:00407024 dword_407024    dd 1                    ; DATA XREF: sub_403160+11↑r
.data:00407024                                         ; .text:00403201↑r
.data:00407028 dword_407028    dd 3Fh                  ; DATA XREF: sub_403160+7D↑w
.data:00407028                                         ; .text:0040326D↑w
.data:0040702C                 align 10h
.data:00407030 ; char *Buffer
.data:00407030 Buffer          dd offset aCopyrightC2005
.data:00407030                                         ; DATA XREF: sub_403A90+DC↑r
.data:00407030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00407034                 align 10h
.data:00407040 dword_407040    dd 1                    ; DATA XREF: sub_405120+22↑r
.data:00407040                                         ; sub_405120+65↑r ...
.data:00407044 dword_407044    dd 100h                 ; DATA XREF: sub_405120+3F↑o
.data:00407044                                         ; sub_405120+1A2↑r ...
.data:00407048 off_407048      dd offset unk_408090    ; DATA XREF: sub_405120+1AA↑r
.data:0040704C ; void *off_40704C
.data:0040704C off_40704C      dd offset dword_407044  ; DATA XREF: sub_405120+39↑r
.data:0040704C                                         ; sub_405120+60↑w ...
.data:00407050 ; int Code
.data:00407050 Code            dd 1                    ; DATA XREF: sub_403E10+6D↑r
.data:00407050                                         ; sub_403E10+9A↑r ...
.data:00407054                 align 10h
.data:00407060 ; char *Src
.data:00407060 Src             dd offset byte_405760   ; DATA XREF: sub_405780+168↑r
.data:00407064 off_407064      dd offset byte_405761   ; DATA XREF: sub_405780+1DA↑r
.data:00407068                 align 10h
.data:00407070 dword_407070    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00407074                 align 10h
.data:00407080 ; int Mode
.data:00407080 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00407080                                         ; sub_401080+80↑r ...
.data:00407084                 align 10h
.data:00407090 dword_407090    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00407090                                         ; sub_401080+BA↑r
.data:00407094                 align 10h
.data:004070A0 dword_4070A0    dd 0                    ; DATA XREF: sub_405D50+9↑r
.data:004070A0                                         ; sub_405D50+1D↑w
.data:004070A4 off_4070A4      dd offset dword_40603C  ; DATA XREF: sub_405CC0+6↑r
.data:004070A4                                         ; sub_405CC0+17↑r ...
.data:004070A8                 align 1000h
.data:004070A8 _data           ends
.data:004070A8
.bss:00408000 ; Section 3. (virtual address 00008000)
.bss:00408000 ; Virtual size                  : 00000BD0 (   3024.)
.bss:00408000 ; Section size in file          : 00000000 (      0.)
.bss:00408000 ; Offset to raw data for section: 00000000
.bss:00408000 ; Flags C0000080: Bss Readable Writable
.bss:00408000 ; Alignment     : default
.bss:00408000 ; ===========================================================================
.bss:00408000
.bss:00408000 ; Segment type: Uninitialized
.bss:00408000 ; Segment permissions: Read/Write
.bss:00408000 _bss            segment para public 'BSS' use32
.bss:00408000                 assume cs:_bss
.bss:00408000                 ;org 408000h
.bss:00408000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00408000 byte_408000     db ?                    ; DATA XREF: sub_401770:loc_4019D0↑w
.bss:00408000                                         ; sub_401770+28A↑r ...
.bss:00408001                 align 10h
.bss:00408010 dword_408010    dd ?                    ; DATA XREF: sub_401770+31E↑w
.bss:00408010                                         ; sub_401770+343↑r ...
.bss:00408014                 align 10h
.bss:00408020 dword_408020    dd ?                    ; DATA XREF: sub_401770+314↑w
.bss:00408020                                         ; sub_401770:loc_401B0F↑r ...
.bss:00408024                 align 10h
.bss:00408030 dword_408030    dd ?                    ; DATA XREF: sub_401770+336↑w
.bss:00408030                                         ; sub_401770+3B2↑r ...
.bss:00408034                 align 10h
.bss:00408040 dword_408040    dd ?                    ; DATA XREF: sub_401770+328↑w
.bss:00408040                                         ; sub_401770:loc_401B31↑r ...
.bss:00408044                 align 10h
.bss:00408050 dword_408050    dd ?                    ; DATA XREF: sub_403160+9↑o
.bss:00408050                                         ; sub_403160+17↑w ...
.bss:00408054 dword_408054    dd ?                    ; DATA XREF: sub_403160+21↑w
.bss:00408054                                         ; .text:00403219↑w
.bss:00408058 dword_408058    dd ?                    ; DATA XREF: sub_403160+77↑r
.bss:00408058                                         ; .text:00403267↑r
.bss:0040805C dword_40805C    dd ?                    ; DATA XREF: sub_403160+6B↑r
.bss:0040805C                                         ; .text:0040325B↑r
.bss:00408060                 align 40h
.bss:00408080 ; char *dword_408080
.bss:00408080 dword_408080    dd ?                    ; DATA XREF: .text:00403DE4↑w
.bss:00408080                                         ; sub_403E10+58↑r
.bss:00408084                 align 10h
.bss:00408090 unk_408090      db    ? ;               ; DATA XREF: sub_405120+100↑o
.bss:00408090                                         ; .data:off_407048↑o
.bss:00408091                 db    ? ;
.bss:00408092                 db    ? ;
.bss:00408093                 db    ? ;
.bss:00408094                 db    ? ;
.bss:00408095                 db    ? ;
.bss:00408096                 db    ? ;
.bss:00408097                 db    ? ;
.bss:00408098                 db    ? ;
.bss:00408099                 db    ? ;
.bss:0040809A                 db    ? ;
.bss:0040809B                 db    ? ;
.bss:0040809C                 db    ? ;
.bss:0040809D                 db    ? ;
.bss:0040809E                 db    ? ;
.bss:0040809F                 db    ? ;
.bss:004080A0                 db    ? ;
.bss:004080A1                 db    ? ;
.bss:004080A2                 db    ? ;
.bss:004080A3                 db    ? ;
.bss:004080A4                 db    ? ;
.bss:004080A5                 db    ? ;
.bss:004080A6                 db    ? ;
.bss:004080A7                 db    ? ;
.bss:004080A8                 db    ? ;
.bss:004080A9                 db    ? ;
.bss:004080AA                 db    ? ;
.bss:004080AB                 db    ? ;
.bss:004080AC                 db    ? ;
.bss:004080AD                 db    ? ;
.bss:004080AE                 db    ? ;
.bss:004080AF                 db    ? ;
.bss:004080B0                 db    ? ;
.bss:004080B1                 db    ? ;
.bss:004080B2                 db    ? ;
.bss:004080B3                 db    ? ;
.bss:004080B4                 db    ? ;
.bss:004080B5                 db    ? ;
.bss:004080B6                 db    ? ;
.bss:004080B7                 db    ? ;
.bss:004080B8                 db    ? ;
.bss:004080B9                 db    ? ;
.bss:004080BA                 db    ? ;
.bss:004080BB                 db    ? ;
.bss:004080BC                 db    ? ;
.bss:004080BD                 db    ? ;
.bss:004080BE                 db    ? ;
.bss:004080BF                 db    ? ;
.bss:004080C0                 db    ? ;
.bss:004080C1                 db    ? ;
.bss:004080C2                 db    ? ;
.bss:004080C3                 db    ? ;
.bss:004080C4                 db    ? ;
.bss:004080C5                 db    ? ;
.bss:004080C6                 db    ? ;
.bss:004080C7                 db    ? ;
.bss:004080C8                 db    ? ;
.bss:004080C9                 db    ? ;
.bss:004080CA                 db    ? ;
.bss:004080CB                 db    ? ;
.bss:004080CC                 db    ? ;
.bss:004080CD                 db    ? ;
.bss:004080CE                 db    ? ;
.bss:004080CF                 db    ? ;
.bss:004080D0                 db    ? ;
.bss:004080D1                 db    ? ;
.bss:004080D2                 db    ? ;
.bss:004080D3                 db    ? ;
.bss:004080D4                 db    ? ;
.bss:004080D5                 db    ? ;
.bss:004080D6                 db    ? ;
.bss:004080D7                 db    ? ;
.bss:004080D8                 db    ? ;
.bss:004080D9                 db    ? ;
.bss:004080DA                 db    ? ;
.bss:004080DB                 db    ? ;
.bss:004080DC                 db    ? ;
.bss:004080DD                 db    ? ;
.bss:004080DE                 db    ? ;
.bss:004080DF                 db    ? ;
.bss:004080E0                 db    ? ;
.bss:004080E1                 db    ? ;
.bss:004080E2                 db    ? ;
.bss:004080E3                 db    ? ;
.bss:004080E4                 db    ? ;
.bss:004080E5                 db    ? ;
.bss:004080E6                 db    ? ;
.bss:004080E7                 db    ? ;
.bss:004080E8                 db    ? ;
.bss:004080E9                 db    ? ;
.bss:004080EA                 db    ? ;
.bss:004080EB                 db    ? ;
.bss:004080EC                 db    ? ;
.bss:004080ED                 db    ? ;
.bss:004080EE                 db    ? ;
.bss:004080EF                 db    ? ;
.bss:004080F0                 db    ? ;
.bss:004080F1                 db    ? ;
.bss:004080F2                 db    ? ;
.bss:004080F3                 db    ? ;
.bss:004080F4                 db    ? ;
.bss:004080F5                 db    ? ;
.bss:004080F6                 db    ? ;
.bss:004080F7                 db    ? ;
.bss:004080F8                 db    ? ;
.bss:004080F9                 db    ? ;
.bss:004080FA                 db    ? ;
.bss:004080FB                 db    ? ;
.bss:004080FC                 db    ? ;
.bss:004080FD                 db    ? ;
.bss:004080FE                 db    ? ;
.bss:004080FF                 db    ? ;
.bss:00408100                 db    ? ;
.bss:00408101                 db    ? ;
.bss:00408102                 db    ? ;
.bss:00408103                 db    ? ;
.bss:00408104                 db    ? ;
.bss:00408105                 db    ? ;
.bss:00408106                 db    ? ;
.bss:00408107                 db    ? ;
.bss:00408108                 db    ? ;
.bss:00408109                 db    ? ;
.bss:0040810A                 db    ? ;
.bss:0040810B                 db    ? ;
.bss:0040810C                 db    ? ;
.bss:0040810D                 db    ? ;
.bss:0040810E                 db    ? ;
.bss:0040810F                 db    ? ;
.bss:00408110                 db    ? ;
.bss:00408111                 db    ? ;
.bss:00408112                 db    ? ;
.bss:00408113                 db    ? ;
.bss:00408114                 db    ? ;
.bss:00408115                 db    ? ;
.bss:00408116                 db    ? ;
.bss:00408117                 db    ? ;
.bss:00408118                 db    ? ;
.bss:00408119                 db    ? ;
.bss:0040811A                 db    ? ;
.bss:0040811B                 db    ? ;
.bss:0040811C                 db    ? ;
.bss:0040811D                 db    ? ;
.bss:0040811E                 db    ? ;
.bss:0040811F                 db    ? ;
.bss:00408120                 db    ? ;
.bss:00408121                 db    ? ;
.bss:00408122                 db    ? ;
.bss:00408123                 db    ? ;
.bss:00408124                 db    ? ;
.bss:00408125                 db    ? ;
.bss:00408126                 db    ? ;
.bss:00408127                 db    ? ;
.bss:00408128                 db    ? ;
.bss:00408129                 db    ? ;
.bss:0040812A                 db    ? ;
.bss:0040812B                 db    ? ;
.bss:0040812C                 db    ? ;
.bss:0040812D                 db    ? ;
.bss:0040812E                 db    ? ;
.bss:0040812F                 db    ? ;
.bss:00408130                 db    ? ;
.bss:00408131                 db    ? ;
.bss:00408132                 db    ? ;
.bss:00408133                 db    ? ;
.bss:00408134                 db    ? ;
.bss:00408135                 db    ? ;
.bss:00408136                 db    ? ;
.bss:00408137                 db    ? ;
.bss:00408138                 db    ? ;
.bss:00408139                 db    ? ;
.bss:0040813A                 db    ? ;
.bss:0040813B                 db    ? ;
.bss:0040813C                 db    ? ;
.bss:0040813D                 db    ? ;
.bss:0040813E                 db    ? ;
.bss:0040813F                 db    ? ;
.bss:00408140                 db    ? ;
.bss:00408141                 db    ? ;
.bss:00408142                 db    ? ;
.bss:00408143                 db    ? ;
.bss:00408144                 db    ? ;
.bss:00408145                 db    ? ;
.bss:00408146                 db    ? ;
.bss:00408147                 db    ? ;
.bss:00408148                 db    ? ;
.bss:00408149                 db    ? ;
.bss:0040814A                 db    ? ;
.bss:0040814B                 db    ? ;
.bss:0040814C                 db    ? ;
.bss:0040814D                 db    ? ;
.bss:0040814E                 db    ? ;
.bss:0040814F                 db    ? ;
.bss:00408150                 db    ? ;
.bss:00408151                 db    ? ;
.bss:00408152                 db    ? ;
.bss:00408153                 db    ? ;
.bss:00408154                 db    ? ;
.bss:00408155                 db    ? ;
.bss:00408156                 db    ? ;
.bss:00408157                 db    ? ;
.bss:00408158                 db    ? ;
.bss:00408159                 db    ? ;
.bss:0040815A                 db    ? ;
.bss:0040815B                 db    ? ;
.bss:0040815C                 db    ? ;
.bss:0040815D                 db    ? ;
.bss:0040815E                 db    ? ;
.bss:0040815F                 db    ? ;
.bss:00408160                 db    ? ;
.bss:00408161                 db    ? ;
.bss:00408162                 db    ? ;
.bss:00408163                 db    ? ;
.bss:00408164                 db    ? ;
.bss:00408165                 db    ? ;
.bss:00408166                 db    ? ;
.bss:00408167                 db    ? ;
.bss:00408168                 db    ? ;
.bss:00408169                 db    ? ;
.bss:0040816A                 db    ? ;
.bss:0040816B                 db    ? ;
.bss:0040816C                 db    ? ;
.bss:0040816D                 db    ? ;
.bss:0040816E                 db    ? ;
.bss:0040816F                 db    ? ;
.bss:00408170                 db    ? ;
.bss:00408171                 db    ? ;
.bss:00408172                 db    ? ;
.bss:00408173                 db    ? ;
.bss:00408174                 db    ? ;
.bss:00408175                 db    ? ;
.bss:00408176                 db    ? ;
.bss:00408177                 db    ? ;
.bss:00408178                 db    ? ;
.bss:00408179                 db    ? ;
.bss:0040817A                 db    ? ;
.bss:0040817B                 db    ? ;
.bss:0040817C                 db    ? ;
.bss:0040817D                 db    ? ;
.bss:0040817E                 db    ? ;
.bss:0040817F                 db    ? ;
.bss:00408180                 db    ? ;
.bss:00408181                 db    ? ;
.bss:00408182                 db    ? ;
.bss:00408183                 db    ? ;
.bss:00408184                 db    ? ;
.bss:00408185                 db    ? ;
.bss:00408186                 db    ? ;
.bss:00408187                 db    ? ;
.bss:00408188                 db    ? ;
.bss:00408189                 db    ? ;
.bss:0040818A                 db    ? ;
.bss:0040818B                 db    ? ;
.bss:0040818C                 db    ? ;
.bss:0040818D                 db    ? ;
.bss:0040818E                 db    ? ;
.bss:0040818F                 db    ? ;
.bss:00408190 dword_408190    dd ?                    ; DATA XREF: .text:loc_404AB1↑o
.bss:00408190                                         ; .text:loc_404AD0↑o ...
.bss:00408194 dword_408194    dd ?                    ; DATA XREF: .text:loc_404B50↑o
.bss:00408194                                         ; .text:00404FD8↑r ...
.bss:00408198 dword_408198    dd ?                    ; DATA XREF: .text:00404FD2↑r
.bss:00408198                                         ; sub_405080+2C↑r
.bss:0040819C dword_40819C    dd ?                    ; DATA XREF: .text:00404FC6↑r
.bss:0040819C                                         ; sub_405080+22↑r
.bss:004081A0 dword_4081A0    dd ?                    ; DATA XREF: .text:00404FE2↑r
.bss:004081A0                                         ; sub_405080+36↑r
.bss:004081A4 dword_4081A4    dd ?                    ; DATA XREF: .text:00404FF2↑r
.bss:004081A4                                         ; sub_405080+4E↑r
.bss:004081A8 dword_4081A8    dd ?                    ; DATA XREF: .text:0040500F↑r
.bss:004081A8                                         ; sub_405080+62↑r
.bss:004081AC dword_4081AC    dd ?                    ; DATA XREF: .text:00405005↑r
.bss:004081AC                                         ; sub_405080+70↑r
.bss:004081B0 dword_4081B0    dd ?                    ; DATA XREF: .text:00404FE8↑r
.bss:004081B0                                         ; sub_405080+7A↑r
.bss:004081B4                 align 10h
.bss:004081C0 ; char *Str1
.bss:004081C0 Str1            dd ?                    ; DATA XREF: sub_405444:loc_40547D↑w
.bss:004081C0                                         ; sub_405444:loc_4055B0↑r
.bss:004081C4                 align 10h
.bss:004081D0 dword_4081D0    dd ?                    ; DATA XREF: sub_405444+2D↑r
.bss:004081D0                                         ; sub_405444+3F↑w
.bss:004081D4                 align 10h
.bss:004081E0 unk_4081E0      db    ? ;               ; DATA XREF: sub_405600+22↑o
.bss:004081E1                 db    ? ;
.bss:004081E2                 db    ? ;
.bss:004081E3                 db    ? ;
.bss:004081E4                 db    ? ;
.bss:004081E5                 db    ? ;
.bss:004081E6                 db    ? ;
.bss:004081E7                 db    ? ;
.bss:004081E8                 db    ? ;
.bss:004081E9                 db    ? ;
.bss:004081EA                 db    ? ;
.bss:004081EB                 db    ? ;
.bss:004081EC                 db    ? ;
.bss:004081ED                 db    ? ;
.bss:004081EE                 db    ? ;
.bss:004081EF                 db    ? ;
.bss:004081F0                 db    ? ;
.bss:004081F1                 db    ? ;
.bss:004081F2                 db    ? ;
.bss:004081F3                 db    ? ;
.bss:004081F4                 db    ? ;
.bss:004081F5                 db    ? ;
.bss:004081F6                 db    ? ;
.bss:004081F7                 db    ? ;
.bss:004081F8                 db    ? ;
.bss:004081F9                 db    ? ;
.bss:004081FA                 db    ? ;
.bss:004081FB                 db    ? ;
.bss:004081FC                 db    ? ;
.bss:004081FD                 db    ? ;
.bss:004081FE                 db    ? ;
.bss:004081FF                 db    ? ;
.bss:00408200 ; char byte_408200[1024]
.bss:00408200 byte_408200     db 400h dup(?)          ; DATA XREF: sub_405600+1A↑o
.bss:00408600 unk_408600      db    ? ;               ; DATA XREF: sub_405690+22↑o
.bss:00408601                 db    ? ;
.bss:00408602                 db    ? ;
.bss:00408603                 db    ? ;
.bss:00408604                 db    ? ;
.bss:00408605                 db    ? ;
.bss:00408606                 db    ? ;
.bss:00408607                 db    ? ;
.bss:00408608                 db    ? ;
.bss:00408609                 db    ? ;
.bss:0040860A                 db    ? ;
.bss:0040860B                 db    ? ;
.bss:0040860C                 db    ? ;
.bss:0040860D                 db    ? ;
.bss:0040860E                 db    ? ;
.bss:0040860F                 db    ? ;
.bss:00408610                 db    ? ;
.bss:00408611                 db    ? ;
.bss:00408612                 db    ? ;
.bss:00408613                 db    ? ;
.bss:00408614                 db    ? ;
.bss:00408615                 db    ? ;
.bss:00408616                 db    ? ;
.bss:00408617                 db    ? ;
.bss:00408618                 db    ? ;
.bss:00408619                 db    ? ;
.bss:0040861A                 db    ? ;
.bss:0040861B                 db    ? ;
.bss:0040861C                 db    ? ;
.bss:0040861D                 db    ? ;
.bss:0040861E                 db    ? ;
.bss:0040861F                 db    ? ;
.bss:00408620 ; char byte_408620[1024]
.bss:00408620 byte_408620     db 400h dup(?)          ; DATA XREF: sub_405690+1A↑o
.bss:00408A20 ; CHAR byte_408A20[272]
.bss:00408A20 byte_408A20     db 110h dup(?)          ; DATA XREF: sub_405970+17↑o
.bss:00408A20                                         ; sub_405970+26↑o
.bss:00408B30 dword_408B30    dd ?                    ; DATA XREF: sub_401770+2C↑w
.bss:00408B30                                         ; sub_401770+E9↑r ...
.bss:00408B34                 db    ? ;
.bss:00408B35                 db    ? ;
.bss:00408B36                 db    ? ;
.bss:00408B37                 db    ? ;
.bss:00408B38                 db    ? ;
.bss:00408B39                 db    ? ;
.bss:00408B3A                 db    ? ;
.bss:00408B3B                 db    ? ;
.bss:00408B3C                 db    ? ;
.bss:00408B3D                 db    ? ;
.bss:00408B3E                 db    ? ;
.bss:00408B3F                 db    ? ;
.bss:00408B40                 db    ? ;
.bss:00408B41                 db    ? ;
.bss:00408B42                 db    ? ;
.bss:00408B43                 db    ? ;
.bss:00408B44                 db    ? ;
.bss:00408B45                 db    ? ;
.bss:00408B46                 db    ? ;
.bss:00408B47                 db    ? ;
.bss:00408B48                 db    ? ;
.bss:00408B49                 db    ? ;
.bss:00408B4A                 db    ? ;
.bss:00408B4B                 db    ? ;
.bss:00408B4C                 db    ? ;
.bss:00408B4D                 db    ? ;
.bss:00408B4E                 db    ? ;
.bss:00408B4F                 db    ? ;
.bss:00408B50 dword_408B50    dd ?                    ; DATA XREF: sub_403160+71↑w
.bss:00408B50                                         ; .text:00403261↑w
.bss:00408B54                 align 10h
.bss:00408B60 dword_408B60    dd ?                    ; CODE XREF: sub_405444+63↑p
.bss:00408B60                                         ; DATA XREF: sub_405340+1E↑r ...
.bss:00408B64                 align 10h
.bss:00408B70 dword_408B70    dd ?                    ; DATA XREF: sub_405340+4E↑w
.bss:00408B70                                         ; sub_405444+AB↑w
.bss:00408B74                 db    ? ;
.bss:00408B75                 db    ? ;
.bss:00408B76                 db    ? ;
.bss:00408B77                 db    ? ;
.bss:00408B78                 db    ? ;
.bss:00408B79                 db    ? ;
.bss:00408B7A                 db    ? ;
.bss:00408B7B                 db    ? ;
.bss:00408B7C                 db    ? ;
.bss:00408B7D                 db    ? ;
.bss:00408B7E                 db    ? ;
.bss:00408B7F                 db    ? ;
.bss:00408B80                 db    ? ;
.bss:00408B81                 db    ? ;
.bss:00408B82                 db    ? ;
.bss:00408B83                 db    ? ;
.bss:00408B84                 db    ? ;
.bss:00408B85                 db    ? ;
.bss:00408B86                 db    ? ;
.bss:00408B87                 db    ? ;
.bss:00408B88                 db    ? ;
.bss:00408B89                 db    ? ;
.bss:00408B8A                 db    ? ;
.bss:00408B8B                 db    ? ;
.bss:00408B8C                 db    ? ;
.bss:00408B8D                 db    ? ;
.bss:00408B8E                 db    ? ;
.bss:00408B8F                 db    ? ;
.bss:00408B90                 db    ? ;
.bss:00408B91                 db    ? ;
.bss:00408B92                 db    ? ;
.bss:00408B93                 db    ? ;
.bss:00408B94                 db    ? ;
.bss:00408B95                 db    ? ;
.bss:00408B96                 db    ? ;
.bss:00408B97                 db    ? ;
.bss:00408B98                 db    ? ;
.bss:00408B99                 db    ? ;
.bss:00408B9A                 db    ? ;
.bss:00408B9B                 db    ? ;
.bss:00408B9C                 db    ? ;
.bss:00408B9D                 db    ? ;
.bss:00408B9E                 db    ? ;
.bss:00408B9F                 db    ? ;
.bss:00408BA0 dword_408BA0    dd ?                    ; DATA XREF: sub_405444+13↑r
.bss:00408BA4                 align 800h
.bss:00408BA4 _bss            ends
.bss:00408BA4
.idata:00409000 ; Section 4. (virtual address 00009000)
.idata:00409000 ; Virtual size                  : 00000590 (   1424.)
.idata:00409000 ; Section size in file          : 00000600 (   1536.)
.idata:00409000 ; Offset to raw data for section: 00005800
.idata:00409000 ; Flags C0000040: Data Readable Writable
.idata:00409000 ; Alignment     : default
.idata:00409000 ; ===========================================================================
.idata:00409000
.idata:00409000 ; Segment type: Externs
.idata:00409000 ; _idata
.idata:00409000
.idata:00409001
.idata:00409158 ;
.idata:00409158 ; Imports from libintl3.dll
.idata:00409158 ;
.idata:00409158                 extrn __imp_libintl_bindtextdomain:dword
.idata:00409158                                         ; CODE XREF: sub_401770+59↑p
.idata:00409158                                         ; DATA XREF: sub_401770+59↑r ...
.idata:0040915C                 extrn libintl_gettext:dword
.idata:0040915C                                         ; CODE XREF: sub_401770+DD↑p
.idata:0040915C                                         ; sub_401770+166↑p ...
.idata:00409160                 extrn libintl_textdomain:dword
.idata:00409160                                         ; CODE XREF: sub_401770+66↑p
.idata:00409160                                         ; DATA XREF: sub_401770+66↑r ...
.idata:00409164
.idata:0040916C ;
.idata:0040916C ; Imports from ADVAPI32.DLL
.idata:0040916C ;
.idata:0040916C ; BOOL (__stdcall *GetUserNameA)(LPSTR lpBuffer, LPDWORD pcbBuffer)
.idata:0040916C                 extrn __imp_GetUserNameA:dword
.idata:0040916C                                         ; DATA XREF: GetUserNameA↑r
.idata:00409170
.idata:00409178 ;
.idata:00409178 ; Imports from KERNEL32.dll
.idata:00409178 ;
.idata:00409178 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00409178                 extrn __imp_ExitProcess:dword
.idata:00409178                                         ; DATA XREF: ExitProcess↑r
.idata:0040917C ; DWORD (__stdcall *GetLastError)()
.idata:0040917C                 extrn __imp_GetLastError:dword
.idata:0040917C                                         ; DATA XREF: GetLastError↑r
.idata:00409180 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00409180                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00409180                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00409184
.idata:0040918C ;
.idata:0040918C ; Imports from MSVCP60.DLL
.idata:0040918C ;
.idata:0040918C ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040918C                 extrn __imp_mbrtowc:dword
.idata:0040918C                                         ; DATA XREF: mbrtowc↑r
.idata:00409190
.idata:00409198 ;
.idata:00409198 ; Imports from msvcrt.dll
.idata:00409198 ;
.idata:00409198                 extrn __imp___getmainargs:dword
.idata:00409198                                         ; DATA XREF: __getmainargs↑r
.idata:0040919C ; int _mb_cur_max
.idata:0040919C                 extrn __mb_cur_max:dword
.idata:0040919C                                         ; DATA XREF: sub_403FE0+7↑r
.idata:0040919C                                         ; sub_403FE0+5F3↑r
.idata:004091A0 ; char ***(__cdecl *__p__environ)()
.idata:004091A0                 extrn __imp___p__environ:dword
.idata:004091A0                                         ; DATA XREF: __p__environ↑r
.idata:004091A4 ; int *(__cdecl *__p__fmode)()
.idata:004091A4                 extrn __imp___p__fmode:dword
.idata:004091A4                                         ; DATA XREF: __p__fmode↑r
.idata:004091A8 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004091A8                 extrn __set_app_type:dword
.idata:004091A8                                         ; CODE XREF: start+D↑p
.idata:004091A8                                         ; .text:0040102D↑p
.idata:004091A8                                         ; DATA XREF: ...
.idata:004091AC ; void (__cdecl *_cexit)()
.idata:004091AC                 extrn __imp__cexit:dword
.idata:004091AC                                         ; DATA XREF: _cexit↑r
.idata:004091B0 ; int *(__cdecl *_errno)()
.idata:004091B0                 extrn __imp__errno:dword
.idata:004091B0                                         ; DATA XREF: _errno↑r
.idata:004091B4 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004091B4                 extrn __imp__flsbuf:dword
.idata:004091B4                                         ; DATA XREF: _flsbuf↑r
.idata:004091B8 ; FILE iob[]
.idata:004091B8                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004091B8                                         ; sub_401080+75↑r ...
.idata:004091BC ; int (__cdecl *_isctype)(int C, int Type)
.idata:004091BC                 extrn __imp__isctype:dword
.idata:004091BC                                         ; DATA XREF: _isctype↑r
.idata:004091C0 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004091C0                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004091C0                                         ; DATA XREF: .text:0040106C↑r
.idata:004091C4 ; const unsigned __int16 *pctype
.idata:004091C4                 extrn _pctype:dword     ; DATA XREF: sub_403FE0:loc_4046D4↑r
.idata:004091C8 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004091C8                 extrn __imp__setmode:dword
.idata:004091C8                                         ; DATA XREF: _setmode↑r
.idata:004091CC ; void (__cdecl __noreturn *abort)()
.idata:004091CC                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004091D0 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004091D0                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004091D0                                         ; DATA XREF: sub_401040+C↑r
.idata:004091D4 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004091D4                 extrn __imp_calloc:dword
.idata:004091D4                                         ; DATA XREF: calloc↑r
.idata:004091D8 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004091D8                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004091DC ; int (__cdecl *fclose)(FILE *Stream)
.idata:004091DC                 extrn __imp_fclose:dword
.idata:004091DC                                         ; DATA XREF: fclose↑r
.idata:004091E0 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004091E0                 extrn __imp_fflush:dword
.idata:004091E0                                         ; DATA XREF: fflush↑r
.idata:004091E4 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004091E4                 extrn __imp_fprintf:dword
.idata:004091E4                                         ; DATA XREF: fprintf↑r
.idata:004091E8 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004091E8                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004091EC ; void (__cdecl *free)(void *Block)
.idata:004091EC                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004091F0 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004091F0                 extrn __imp_getenv:dword
.idata:004091F0                                         ; DATA XREF: getenv↑r
.idata:004091F4 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004091F4                 extrn __imp_iswctype:dword
.idata:004091F4                                         ; DATA XREF: iswctype↑r
.idata:004091F8 ; void *(__cdecl *malloc)(size_t Size)
.idata:004091F8                 extrn __imp_malloc:dword
.idata:004091F8                                         ; DATA XREF: malloc↑r
.idata:004091FC ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004091FC                 extrn __imp_memcpy:dword
.idata:004091FC                                         ; DATA XREF: memcpy↑r
.idata:00409200 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00409200                 extrn __imp_memset:dword
.idata:00409200                                         ; DATA XREF: memset↑r
.idata:00409204 ; int (*printf)(const char *const Format, ...)
.idata:00409204                 extrn __imp_printf:dword
.idata:00409204                                         ; DATA XREF: printf↑r
.idata:00409208 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00409208                 extrn __imp_realloc:dword
.idata:00409208                                         ; DATA XREF: realloc↑r
.idata:0040920C ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0040920C                 extrn __imp_setlocale:dword
.idata:0040920C                                         ; DATA XREF: setlocale↑r
.idata:00409210 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00409210                 extrn __imp_signal:dword
.idata:00409210                                         ; DATA XREF: signal↑r
.idata:00409214 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00409214                 extrn __imp_strchr:dword
.idata:00409214                                         ; DATA XREF: strchr↑r
.idata:00409218 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00409218                 extrn __imp_strcmp:dword
.idata:00409218                                         ; DATA XREF: strcmp↑r
.idata:0040921C ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0040921C                 extrn __imp_strerror:dword
.idata:0040921C                                         ; DATA XREF: strerror↑r
.idata:00409220 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00409220                 extrn __imp_strlen:dword
.idata:00409220                                         ; DATA XREF: strlen↑r
.idata:00409224 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00409224                 extrn __imp_strncmp:dword
.idata:00409224                                         ; DATA XREF: strncmp↑r
.idata:00409228 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00409228                 extrn __imp_vfprintf:dword
.idata:00409228                                         ; DATA XREF: vfprintf↑r
.idata:0040922C
.idata:0040922C
.idata:0040922C
.idata:0040922C                 end start
