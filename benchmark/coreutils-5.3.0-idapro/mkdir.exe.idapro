.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 6914A50F48C1503411BEFBDABC74D28BDB5D48548B3941B090745E96B16DF5F2
.text:00401000 ; Input MD5    : D92452BEC6107344C8AB426147FC0370
.text:00401000 ; Input CRC32  : 9E37D5FC
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/mkdir.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A248 (Wed Apr 20 18:41:12 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 0000E890 (  59536.)
.text:00401000 ; Section size in file          : 0000EA00 (  59904.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4016F0+75↓p
.text:00401040                                         ; .text:0040EAC0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_40EA60
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_410000
.text:004010A2                 mov     edx, dword_410090
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_410004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4100B0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4100B0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_40EA30
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_410000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_410004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4016F0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_40EA60
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aMode           db 'mode',0             ; DATA XREF: .text:off_4012C0↓o
.text:00401285 aParents        db 'parents',0          ; DATA XREF: .text:004012D0↓o
.text:0040128D aVerbose        db 'verbose',0          ; DATA XREF: .text:004012E0↓o
.text:00401295 aHelp           db 'help',0             ; DATA XREF: .text:004012F0↓o
.text:0040129A aVersion        db 'version',0          ; DATA XREF: .text:00401300↓o
.text:004012A2                 align 20h
.text:004012C0 off_4012C0      dd offset aMode         ; DATA XREF: sub_4016F0+9B↓o
.text:004012C0                                         ; "mode"
.text:004012C4                 dd 1, 0
.text:004012CC                 dd 6Dh
.text:004012D0                 dd offset aParents      ; "parents"
.text:004012D4                 dd 2 dup(0)
.text:004012DC                 dd 70h
.text:004012E0                 dd offset aVerbose      ; "verbose"
.text:004012E4                 dd 2 dup(0)
.text:004012EC                 dd 76h
.text:004012F0                 dd offset aHelp         ; "help"
.text:004012F4                 dd 2 dup(0)
.text:004012FC                 dd 0FFFFFF7Eh
.text:00401300                 dd offset aVersion      ; "version"
.text:00401304                 dd 2 dup(0)
.text:0040130C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401320 ; const char Locale
.text:00401320 Locale          db 0                    ; DATA XREF: sub_4016F0+38↓o
.text:00401321                 align 20h
.text:00401340 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401340                                         ; DATA XREF: sub_4016F0+4C↓o
.text:00401363 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4016F0+54↓o
.text:00401363                                         ; sub_4016F0+61↓o
.text:0040136D ; const char aPmV[]
.text:0040136D aPmV            db 'pm:v',0             ; DATA XREF: sub_4016F0+A3↓o
.text:00401372 aCreatedDirecto db 'created directory %s',0
.text:00401372                                         ; DATA XREF: sub_4016F0+D8↓o
.text:00401387                 align 20h
.text:004013A0 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:004013A0                                         ; DATA XREF: sub_4016F0:loc_4017DA↓o
.text:004013A0                                         ; .text:00401C1C↓o
.text:004013C7                 align 20h
.text:004013E0 aUsageSOptionDi db 'Usage: %s [OPTION] DIRECTORY...',0Ah,0
.text:004013E0                                         ; DATA XREF: sub_4016F0+140↓o
.text:004013E0                                         ; .text:loc_401C50↓o
.text:00401401                 align 20h
.text:00401420 aCreateTheDirec db 'Create the DIRECTORY(ies), if they do not already exist.',0Ah
.text:00401420                                         ; DATA XREF: sub_4016F0+15F↓o
.text:00401420                                         ; .text:00401C6F↓o
.text:00401420                 db 0Ah,0
.text:0040145B                 align 10h
.text:00401460 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:00401460                                         ; DATA XREF: sub_4016F0+181↓o
.text:00401460                                         ; .text:00401C91↓o
.text:00401460                 db 'ns too.',0Ah,0
.text:004014AA                 align 20h
.text:004014C0 aMModeModeSetPe db '  -m, --mode=MODE   set permission mode (as in chmod), not rwxrwx'
.text:004014C0                                         ; DATA XREF: sub_4016F0+1A3↓o
.text:004014C0                                         ; .text:00401CB3↓o
.text:004014C0                 db 'rwx - umask',0Ah
.text:004014C0                 db '  -p, --parents     no error if existing, make parent directories'
.text:004014C0                 db ' as needed',0Ah
.text:004014C0                 db '  -v, --verbose     print a message for each created directory',0Ah
.text:004014C0                 db 0
.text:00401599                 align 10h
.text:004015A0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004015A0                                         ; DATA XREF: sub_4016F0+1C5↓o
.text:004015A0                                         ; .text:00401CD5↓o
.text:004015CD                 align 20h
.text:004015E0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004015E0                                         ; DATA XREF: sub_4016F0+1E7↓o
.text:004015E0                                         ; .text:00401CF7↓o
.text:00401616 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4016F0+209↓o
.text:00401616                                         ; .text:00401D19↓o
.text:00401616                 db 'Report bugs to <%s>.',0Ah,0
.text:0040162D aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040162D                                         ; DATA XREF: sub_4016F0+216↓o
.text:0040162D                                         ; .text:00401D26↓o
.text:00401643 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_4016F0+240↓o
.text:00401653 a530            db '5.3.0',0            ; DATA XREF: sub_4016F0+248↓o
.text:00401659 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4016F0+253↓o
.text:00401667 ; const FILE stru_401667
.text:00401667 stru_401667     FILE <69646B6Dh, 90900072h, 90909090h, 90909090h, 90909090h, \
.text:00401667                                         ; DATA XREF: sub_4016F0+25B↓o
.text:00401667                       90909090h, 6E616390h, 20746F6Eh>
.text:00401687                 db  73h ; s
.text:00401688                 db  65h ; e
.text:00401689                 db  74h ; t
.text:0040168A                 db  20h
.text:0040168B                 db  70h ; p
.text:0040168C                 db  65h ; e
.text:0040168D                 db  72h ; r
.text:0040168E                 db  6Dh ; m
.text:0040168F                 db  69h ; i
.text:00401690                 db  73h ; s
.text:00401691                 db  73h ; s
.text:00401692                 db  69h ; i
.text:00401693                 db  6Fh ; o
.text:00401694                 db  6Eh ; n
.text:00401695                 db  73h ; s
.text:00401696                 db  20h
.text:00401697                 db  6Fh ; o
.text:00401698                 db  66h ; f
.text:00401699                 db  20h
.text:0040169A                 db  64h ; d
.text:0040169B                 db  69h ; i
.text:0040169C                 db  72h ; r
.text:0040169D                 db  65h ; e
.text:0040169E                 db  63h ; c
.text:0040169F                 db  74h ; t
.text:004016A0                 db  6Fh ; o
.text:004016A1                 db  72h ; r
.text:004016A2                 db  79h ; y
.text:004016A3                 db  20h
.text:004016A4                 db  25h ; %
.text:004016A5                 db  73h ; s
.text:004016A6                 db    0
.text:004016A7 aCannotCreateDi db 'cannot create directory %s',0
.text:004016A7                                         ; DATA XREF: sub_4016F0+47A↓o
.text:004016C2 aInvalidModeS   db 'invalid mode %s',0  ; DATA XREF: sub_4016F0+4B5↓o
.text:004016D2 aMissingOperand db 'missing operand',0  ; DATA XREF: sub_4016F0:loc_401BD5↓o
.text:004016E2                 align 10h
.text:004016F0
.text:004016F0 ; =============== S U B R O U T I N E =======================================
.text:004016F0
.text:004016F0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004016F0
.text:004016F0 sub_4016F0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004016F0
.text:004016F0 Category        = dword ptr -48h
.text:004016F0 Locale          = dword ptr -44h
.text:004016F0 var_40          = dword ptr -40h
.text:004016F0 var_3C          = byte ptr -3Ch
.text:004016F0 var_38          = byte ptr -38h
.text:004016F0 var_34          = byte ptr -34h
.text:004016F0 var_30          = dword ptr -30h
.text:004016F0 var_24          = dword ptr -24h
.text:004016F0 var_20          = dword ptr -20h
.text:004016F0 var_1C          = dword ptr -1Ch
.text:004016F0 var_18          = word ptr -18h
.text:004016F0 var_14          = word ptr -14h
.text:004016F0 var_D           = dword ptr -0Dh
.text:004016F0 arg_0           = dword ptr  8
.text:004016F0 arg_4           = dword ptr  0Ch
.text:004016F0
.text:004016F0                 push    ebp
.text:004016F1                 xor     eax, eax
.text:004016F3                 mov     ebp, esp
.text:004016F5                 push    edi
.text:004016F6                 push    esi
.text:004016F7                 push    ebx
.text:004016F8                 sub     esp, 3Ch
.text:004016FB                 mov     edi, [ebp+arg_4]
.text:004016FE                 and     esp, 0FFFFFFF0h
.text:00401701                 call    __alloca
.text:00401706                 call    sub_40EB00
.text:0040170B                 mov     [ebp+var_1C], 0
.text:00401712                 mov     edx, [edi]
.text:00401714                 mov     [ebp+var_20], 0
.text:0040171B                 mov     [ebp+var_24], 0
.text:00401722                 mov     ds:dword_4114C0, edx
.text:00401728                 mov     [esp+48h+Locale], offset Locale ; Locale
.text:00401730                 mov     [esp+48h+Category], 0 ; Category
.text:00401737                 call    setlocale
.text:0040173C                 mov     [esp+48h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401744                 mov     [esp+48h+Category], offset aCoreutils ; "coreutils"
.text:0040174B                 call    ds:libintl_bindtextdomain
.text:00401751                 mov     [esp+48h+Category], offset aCoreutils ; "coreutils"
.text:00401758                 call    ds:libintl_textdomain
.text:0040175E                 mov     [esp+48h+Category], offset sub_404670 ; void (__cdecl *)()
.text:00401765                 call    sub_401040
.text:0040176A                 mov     ds:byte_411000, 0
.text:00401771                 jmp     short loc_401780
.text:00401771 ; ---------------------------------------------------------------------------
.text:00401773                 align 10h
.text:00401780
.text:00401780 loc_401780:                             ; CODE XREF: sub_4016F0+81↑j
.text:00401780                                         ; sub_4016F0+E8↓j ...
.text:00401780                 mov     dword ptr [esp+48h+var_38], 0 ; int
.text:00401788                 mov     eax, [ebp+arg_0]
.text:0040178B                 mov     dword ptr [esp+48h+var_3C], offset off_4012C0 ; char
.text:00401793                 mov     [esp+48h+var_40], offset aPmV ; "pm:v"
.text:0040179B                 mov     [esp+48h+Locale], edi ; int
.text:0040179F                 mov     [esp+48h+Category], eax ; int
.text:004017A2                 call    sub_404500
.text:004017A7                 cmp     eax, 0FFFFFFFFh
.text:004017AA                 jz      loc_40196E
.text:004017B0                 cmp     eax, 6Dh ; 'm'
.text:004017B3                 jz      loc_401960
.text:004017B9                 cmp     eax, 6Dh ; 'm'
.text:004017BC                 jle     short loc_40181E
.text:004017BE                 cmp     eax, 70h ; 'p'
.text:004017C1                 jz      short loc_401812
.text:004017C3                 cmp     eax, 76h ; 'v'
.text:004017C6                 jnz     short loc_4017DA
.text:004017C8                 mov     [esp+48h+Category], offset aCreatedDirecto ; "created directory %s"
.text:004017CF                 call    ds:libintl_gettext
.text:004017D5                 mov     [ebp+var_20], eax
.text:004017D8                 jmp     short loc_401780
.text:004017DA ; ---------------------------------------------------------------------------
.text:004017DA
.text:004017DA loc_4017DA:                             ; CODE XREF: sub_4016F0+D6↑j
.text:004017DA                                         ; sub_4016F0+13E↓j ...
.text:004017DA                 mov     [esp+48h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004017E1                 call    ds:libintl_gettext
.text:004017E7                 mov     edi, ds:_iob
.text:004017ED                 mov     ecx, ds:dword_4114C0
.text:004017F3                 add     edi, 40h ; '@'
.text:004017F6                 mov     [esp+48h+var_40], ecx
.text:004017FA                 mov     [esp+48h+Locale], eax ; Format
.text:004017FE                 mov     [esp+48h+Category], edi ; Stream
.text:00401801                 call    fprintf
.text:00401806                 mov     [esp+48h+Category], 1 ; Code
.text:0040180D
.text:0040180D loc_40180D:                             ; CODE XREF: sub_4016F0+22D↓j
.text:0040180D                                         ; sub_4016F0+396↓j
.text:0040180D                 call    exit
.text:00401812 ; ---------------------------------------------------------------------------
.text:00401812
.text:00401812 loc_401812:                             ; CODE XREF: sub_4016F0+D1↑j
.text:00401812                 mov     ds:byte_411000, 1
.text:00401819                 jmp     loc_401780
.text:0040181E ; ---------------------------------------------------------------------------
.text:0040181E
.text:0040181E loc_40181E:                             ; CODE XREF: sub_4016F0+CC↑j
.text:0040181E                 cmp     eax, 0FFFFFF7Dh
.text:00401823                 jz      loc_401922
.text:00401829                 cmp     eax, 0FFFFFF7Eh
.text:0040182E                 jnz     short loc_4017DA
.text:00401830                 mov     [esp+48h+Category], offset aUsageSOptionDi ; "Usage: %s [OPTION] DIRECTORY...\n"
.text:00401837                 call    ds:libintl_gettext
.text:0040183D                 mov     ebx, ds:dword_4114C0
.text:00401843                 mov     [esp+48h+Category], eax ; Format
.text:00401846                 mov     [esp+48h+Locale], ebx
.text:0040184A                 call    printf
.text:0040184F                 mov     [esp+48h+Category], offset aCreateTheDirec ; "Create the DIRECTORY(ies), if they do n"...
.text:00401856                 call    ds:libintl_gettext
.text:0040185C                 mov     ecx, ds:_iob
.text:00401862                 add     ecx, 20h ; ' '
.text:00401865                 mov     [esp+48h+Locale], ecx ; Stream
.text:00401869                 mov     [esp+48h+Category], eax ; Buffer
.text:0040186C                 call    fputs
.text:00401871                 mov     [esp+48h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401878                 call    ds:libintl_gettext
.text:0040187E                 mov     edi, ds:_iob
.text:00401884                 add     edi, 20h ; ' '
.text:00401887                 mov     [esp+48h+Locale], edi ; Stream
.text:0040188B                 mov     [esp+48h+Category], eax ; Buffer
.text:0040188E                 call    fputs
.text:00401893                 mov     [esp+48h+Category], offset aMModeModeSetPe ; "  -m, --mode=MODE   set permission mode"...
.text:0040189A                 call    ds:libintl_gettext
.text:004018A0                 mov     esi, ds:_iob
.text:004018A6                 add     esi, 20h ; ' '
.text:004018A9                 mov     [esp+48h+Locale], esi ; Stream
.text:004018AD                 mov     [esp+48h+Category], eax ; Buffer
.text:004018B0                 call    fputs
.text:004018B5                 mov     [esp+48h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004018BC                 call    ds:libintl_gettext
.text:004018C2                 mov     ebx, ds:_iob
.text:004018C8                 add     ebx, 20h ; ' '
.text:004018CB                 mov     [esp+48h+Locale], ebx ; Stream
.text:004018CF                 mov     [esp+48h+Category], eax ; Buffer
.text:004018D2                 call    fputs
.text:004018D7                 mov     [esp+48h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:004018DE                 call    ds:libintl_gettext
.text:004018E4                 mov     ecx, ds:_iob
.text:004018EA                 add     ecx, 20h ; ' '
.text:004018ED                 mov     [esp+48h+Locale], ecx ; Stream
.text:004018F1                 mov     [esp+48h+Category], eax ; Buffer
.text:004018F4                 call    fputs
.text:004018F9                 mov     [esp+48h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401900                 call    ds:libintl_gettext
.text:00401906                 mov     [esp+48h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040190E                 mov     [esp+48h+Category], eax ; Format
.text:00401911                 call    printf
.text:00401916
.text:00401916 loc_401916:                             ; CODE XREF: sub_4016F0+26B↓j
.text:00401916                 mov     [esp+48h+Category], 0
.text:0040191D                 jmp     loc_40180D
.text:00401922 ; ---------------------------------------------------------------------------
.text:00401922
.text:00401922 loc_401922:                             ; CODE XREF: sub_4016F0+133↑j
.text:00401922                 mov     dword ptr [esp+48h+var_34], 0
.text:0040192A                 mov     edx, ds:_iob
.text:00401930                 mov     dword ptr [esp+48h+var_38], offset aDavidMackenzie ; "David MacKenzie"
.text:00401938                 mov     dword ptr [esp+48h+var_3C], offset a530 ; "5.3.0"
.text:00401940                 add     edx, 20h ; ' '
.text:00401943                 mov     [esp+48h+var_40], offset aGnuCoreutils ; "GNU coreutils"
.text:0040194B                 mov     [esp+48h+Locale], offset stru_401667 ; FILE *
.text:00401953                 mov     [esp+48h+Category], edx ; FILE *
.text:00401956                 call    sub_4044C0
.text:0040195B                 jmp     short loc_401916
.text:0040195B ; ---------------------------------------------------------------------------
.text:0040195D                 align 10h
.text:00401960
.text:00401960 loc_401960:                             ; CODE XREF: sub_4016F0+C3↑j
.text:00401960                 mov     edx, ds:dword_4114E0
.text:00401966                 mov     [ebp+var_1C], edx
.text:00401969                 jmp     loc_401780
.text:0040196E ; ---------------------------------------------------------------------------
.text:0040196E
.text:0040196E loc_40196E:                             ; CODE XREF: sub_4016F0+BA↑j
.text:0040196E                 mov     esi, [ebp+arg_0]
.text:00401971                 cmp     dword_410010, esi
.text:00401977                 jz      loc_401BD5
.text:0040197D                 mov     dword ptr [ebp+var_14], 1FFh
.text:00401984                 mov     [esp+48h+Category], 0 ; Mode
.text:0040198B                 call    _umask
.text:00401990                 movzx   esi, ax
.text:00401993                 mov     [esp+48h+Category], esi ; Mode
.text:00401996                 not     esi
.text:00401998                 call    _umask
.text:0040199D                 mov     dword ptr [ebp+var_18], esi
.text:004019A0                 mov     ebx, [ebp+var_1C]
.text:004019A3                 and     dword ptr [ebp+var_18], 1FFh
.text:004019AA                 or      dword ptr [ebp+var_18], 0C0h
.text:004019B1                 test    ebx, ebx
.text:004019B3                 jz      short loc_401A09
.text:004019B5                 mov     [esp+48h+Locale], 0
.text:004019BD                 mov     eax, [ebp+var_1C]
.text:004019C0                 mov     [esp+48h+Category], eax
.text:004019C3                 call    sub_402850
.text:004019C8                 mov     [esp+48h+Category], 0 ; Mode
.text:004019CF                 mov     esi, eax
.text:004019D1                 call    _umask
.text:004019D6                 mov     dword ptr [ebp+var_14], eax
.text:004019D9                 not     dword ptr [ebp+var_14]
.text:004019DC                 and     dword ptr [ebp+var_14], 1FFh
.text:004019E3                 test    esi, esi
.text:004019E5                 jz      loc_401B9A
.text:004019EB                 cmp     esi, 1
.text:004019EE                 jz      loc_401BFF
.text:004019F4
.text:004019F4 loc_4019F4:                             ; CODE XREF: sub_4016F0+4E0↓j
.text:004019F4                 mov     [esp+48h+Locale], esi
.text:004019F8                 mov     ebx, dword ptr [ebp+var_14]
.text:004019FB                 mov     [esp+48h+Category], ebx
.text:004019FE                 call    sub_402C20
.text:00401A03                 movzx   ecx, ax
.text:00401A06                 mov     dword ptr [ebp+var_14], ecx
.text:00401A09
.text:00401A09 loc_401A09:                             ; CODE XREF: sub_4016F0+2C3↑j
.text:00401A09                 mov     edx, dword_410010
.text:00401A0F                 cmp     edx, [ebp+arg_0]
.text:00401A12                 mov     eax, edx
.text:00401A14                 jge     short loc_401A80
.text:00401A16                 lea     esi, [esi+0]
.text:00401A19                 lea     edi, [edi+0]
.text:00401A20
.text:00401A20 loc_401A20:                             ; CODE XREF: sub_4016F0+38E↓j
.text:00401A20                 cmp     ds:byte_411000, 0
.text:00401A27                 jz      short loc_401A8B
.text:00401A29                 mov     esi, [edi+edx*4]
.text:00401A2C                 mov     dword ptr [esp+48h+var_3C], 0FFFFFFFFh ; int
.text:00401A34                 mov     ebx, [ebp+var_20]
.text:00401A37                 mov     dword ptr [esp+48h+var_34], 1 ; char
.text:00401A3F                 mov     ecx, dword ptr [ebp+var_18]
.text:00401A42                 mov     dword ptr [esp+48h+var_38], 0FFFFFFFFh ; int
.text:00401A4A                 mov     eax, dword ptr [ebp+var_14]
.text:00401A4D                 mov     [esp+48h+var_30], ebx ; char *
.text:00401A51                 mov     [esp+48h+var_40], ecx ; __int16
.text:00401A55                 mov     [esp+48h+Locale], eax ; __int16
.text:00401A59                 mov     [esp+48h+Category], esi ; Str
.text:00401A5C                 call    sub_401E50
.text:00401A61                 mov     bl, al
.text:00401A63
.text:00401A63 loc_401A63:                             ; CODE XREF: sub_4016F0+40C↓j
.text:00401A63                                         ; sub_4016F0+416↓j ...
.text:00401A63                 test    bl, bl
.text:00401A65                 jnz     short loc_401A6E
.text:00401A67
.text:00401A67 loc_401A67:                             ; CODE XREF: sub_4016F0+3BC↓j
.text:00401A67                                         ; sub_4016F0+401↓j ...
.text:00401A67                 mov     [ebp+var_24], 1
.text:00401A6E
.text:00401A6E loc_401A6E:                             ; CODE XREF: sub_4016F0+375↑j
.text:00401A6E                 mov     eax, dword_410010
.text:00401A73                 inc     eax
.text:00401A74                 mov     edx, eax
.text:00401A76                 cmp     eax, [ebp+arg_0]
.text:00401A79                 mov     dword_410010, eax
.text:00401A7E                 jl      short loc_401A20
.text:00401A80
.text:00401A80 loc_401A80:                             ; CODE XREF: sub_4016F0+324↑j
.text:00401A80                 mov     edi, [ebp+var_24]
.text:00401A83                 mov     [esp+48h+Category], edi
.text:00401A86                 jmp     loc_40180D
.text:00401A8B ; ---------------------------------------------------------------------------
.text:00401A8B
.text:00401A8B loc_401A8B:                             ; CODE XREF: sub_4016F0+337↑j
.text:00401A8B                 mov     esi, [edi+eax*4]
.text:00401A8E                 lea     ecx, [ebp+var_D]
.text:00401A91                 mov     edx, dword ptr [ebp+var_14]
.text:00401A94                 mov     dword ptr [esp+48h+var_3C], ecx ; int
.text:00401A98                 mov     [esp+48h+Locale], esi ; char *
.text:00401A9C                 mov     [esp+48h+var_40], edx ; __int16
.text:00401AA0                 mov     [esp+48h+Category], esi ; LPCSTR
.text:00401AA3                 call    sub_402720
.text:00401AA8                 test    al, al
.text:00401AAA                 mov     bl, al
.text:00401AAC                 jz      short loc_401A67
.text:00401AAE                 cmp     ds:byte_411000, 0
.text:00401AB5                 jnz     short loc_401AC1
.text:00401AB7                 cmp     byte ptr [ebp+var_D], 0
.text:00401ABB                 jz      loc_401B62
.text:00401AC1
.text:00401AC1 loc_401AC1:                             ; CODE XREF: sub_4016F0+3C5↑j
.text:00401AC1                 mov     eax, [ebp+var_20]
.text:00401AC4                 test    eax, eax
.text:00401AC6                 jz      short loc_401AEF
.text:00401AC8                 mov     [esp+48h+Category], esi ; char *
.text:00401ACB                 call    sub_403FD0
.text:00401AD0                 mov     dword ptr [esp+48h+var_3C], eax ; char
.text:00401AD4                 mov     ecx, [ebp+var_20]
.text:00401AD7                 mov     [esp+48h+Locale], 0 ; ErrorMessage
.text:00401ADF                 mov     [esp+48h+Category], 0 ; Code
.text:00401AE6                 mov     [esp+48h+var_40], ecx ; char *
.text:00401AEA                 call    sub_406EF0
.text:00401AEF
.text:00401AEF loc_401AEF:                             ; CODE XREF: sub_4016F0+3D6↑j
.text:00401AEF                 test    bl, bl
.text:00401AF1                 jz      loc_401A67
.text:00401AF7                 mov     edx, [ebp+var_1C]
.text:00401AFA                 test    edx, edx
.text:00401AFC                 jz      loc_401A63
.text:00401B02                 cmp     byte ptr [ebp+var_D], 0
.text:00401B06                 jz      loc_401A63
.text:00401B0C                 mov     [esp+48h+Category], esi ; FileName
.text:00401B0F                 mov     ecx, dword ptr [ebp+var_14]
.text:00401B12                 mov     [esp+48h+Locale], ecx ; AccessMode
.text:00401B16                 call    _chmod
.text:00401B1B                 test    eax, eax
.text:00401B1D                 jz      loc_401A63
.text:00401B23                 mov     [esp+48h+Category], esi ; char *
.text:00401B26                 call    sub_403FD0
.text:00401B2B                 mov     [esp+48h+Category], (offset stru_401667._bufsiz+1)
.text:00401B32                 mov     esi, eax
.text:00401B34                 call    ds:libintl_gettext
.text:00401B3A                 mov     ebx, eax
.text:00401B3C                 call    _errno
.text:00401B41                 mov     dword ptr [esp+48h+var_3C], esi ; char
.text:00401B45                 mov     [esp+48h+var_40], ebx ; char *
.text:00401B49                 mov     ebx, [eax]
.text:00401B4B                 mov     [esp+48h+Category], 0 ; Code
.text:00401B52                 mov     [esp+48h+Locale], ebx ; ErrorMessage
.text:00401B56                 xor     ebx, ebx
.text:00401B58                 call    sub_406EF0
.text:00401B5D                 jmp     loc_401A63
.text:00401B62 ; ---------------------------------------------------------------------------
.text:00401B62
.text:00401B62 loc_401B62:                             ; CODE XREF: sub_4016F0+3CB↑j
.text:00401B62                 mov     [esp+48h+Category], esi ; char *
.text:00401B65                 call    sub_403FD0
.text:00401B6A                 mov     [esp+48h+Category], offset aCannotCreateDi ; "cannot create directory %s"
.text:00401B71                 mov     esi, eax
.text:00401B73                 call    ds:libintl_gettext
.text:00401B79                 mov     dword ptr [esp+48h+var_3C], esi ; char
.text:00401B7D                 mov     [esp+48h+Locale], 11h ; ErrorMessage
.text:00401B85                 mov     [esp+48h+Category], 0 ; Code
.text:00401B8C                 mov     [esp+48h+var_40], eax ; char *
.text:00401B90                 call    sub_406EF0
.text:00401B95                 jmp     loc_401A67
.text:00401B9A ; ---------------------------------------------------------------------------
.text:00401B9A
.text:00401B9A loc_401B9A:                             ; CODE XREF: sub_4016F0+2F5↑j
.text:00401B9A                 mov     edx, [ebp+var_1C]
.text:00401B9D                 mov     [esp+48h+Category], edx ; char *
.text:00401BA0                 call    sub_403FD0
.text:00401BA5                 mov     [esp+48h+Category], offset aInvalidModeS ; "invalid mode %s"
.text:00401BAC                 mov     ebx, eax
.text:00401BAE                 call    ds:libintl_gettext
.text:00401BB4                 mov     dword ptr [esp+48h+var_3C], ebx ; char
.text:00401BB8                 mov     [esp+48h+Locale], 0 ; ErrorMessage
.text:00401BC0                 mov     [esp+48h+Category], 1 ; Code
.text:00401BC7                 mov     [esp+48h+var_40], eax ; char *
.text:00401BCB                 call    sub_406EF0
.text:00401BD0                 jmp     loc_4019F4
.text:00401BD5 ; ---------------------------------------------------------------------------
.text:00401BD5
.text:00401BD5 loc_401BD5:                             ; CODE XREF: sub_4016F0+287↑j
.text:00401BD5                 mov     [esp+48h+Category], offset aMissingOperand ; "missing operand"
.text:00401BDC                 call    ds:libintl_gettext
.text:00401BE2                 mov     [esp+48h+Locale], 0 ; ErrorMessage
.text:00401BEA                 mov     [esp+48h+Category], 0 ; Code
.text:00401BF1                 mov     [esp+48h+var_40], eax ; char *
.text:00401BF5                 call    sub_406EF0
.text:00401BFA                 jmp     loc_4017DA
.text:00401BFF ; ---------------------------------------------------------------------------
.text:00401BFF
.text:00401BFF loc_401BFF:                             ; CODE XREF: sub_4016F0+2FE↑j
.text:00401BFF                 call    sub_403F60
.text:00401BFF sub_4016F0      endp
.text:00401BFF
.text:00401BFF ; ---------------------------------------------------------------------------
.text:00401C04                 align 10h
.text:00401C10                 push    ebx
.text:00401C11                 sub     esp, 18h
.text:00401C14                 mov     ebx, [esp+20h]
.text:00401C18                 test    ebx, ebx
.text:00401C1A                 jz      short loc_401C50
.text:00401C1C                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401C23                 call    ds:libintl_gettext
.text:00401C29                 mov     edx, ds:_iob
.text:00401C2F                 mov     ecx, ds:dword_4114C0
.text:00401C35                 add     edx, 40h ; '@'
.text:00401C38                 mov     [esp+8], ecx
.text:00401C3C                 mov     [esp+4], eax
.text:00401C40                 mov     [esp], edx
.text:00401C43                 call    fprintf
.text:00401C48
.text:00401C48 loc_401C48:                             ; CODE XREF: .text:00401D36↓j
.text:00401C48                 mov     [esp], ebx
.text:00401C4B                 call    exit
.text:00401C50 ; ---------------------------------------------------------------------------
.text:00401C50
.text:00401C50 loc_401C50:                             ; CODE XREF: .text:00401C1A↑j
.text:00401C50                 mov     dword ptr [esp], offset aUsageSOptionDi ; "Usage: %s [OPTION] DIRECTORY...\n"
.text:00401C57                 call    ds:libintl_gettext
.text:00401C5D                 mov     ecx, ds:dword_4114C0
.text:00401C63                 mov     [esp], eax
.text:00401C66                 mov     [esp+4], ecx
.text:00401C6A                 call    printf
.text:00401C6F                 mov     dword ptr [esp], offset aCreateTheDirec ; "Create the DIRECTORY(ies), if they do n"...
.text:00401C76                 call    ds:libintl_gettext
.text:00401C7C                 mov     ecx, ds:_iob
.text:00401C82                 add     ecx, 20h ; ' '
.text:00401C85                 mov     [esp+4], ecx
.text:00401C89                 mov     [esp], eax
.text:00401C8C                 call    fputs
.text:00401C91                 mov     dword ptr [esp], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401C98                 call    ds:libintl_gettext
.text:00401C9E                 mov     ecx, ds:_iob
.text:00401CA4                 add     ecx, 20h ; ' '
.text:00401CA7                 mov     [esp+4], ecx
.text:00401CAB                 mov     [esp], eax
.text:00401CAE                 call    fputs
.text:00401CB3                 mov     dword ptr [esp], offset aMModeModeSetPe ; "  -m, --mode=MODE   set permission mode"...
.text:00401CBA                 call    ds:libintl_gettext
.text:00401CC0                 mov     ecx, ds:_iob
.text:00401CC6                 add     ecx, 20h ; ' '
.text:00401CC9                 mov     [esp+4], ecx
.text:00401CCD                 mov     [esp], eax
.text:00401CD0                 call    fputs
.text:00401CD5                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401CDC                 call    ds:libintl_gettext
.text:00401CE2                 mov     ecx, ds:_iob
.text:00401CE8                 add     ecx, 20h ; ' '
.text:00401CEB                 mov     [esp+4], ecx
.text:00401CEF                 mov     [esp], eax
.text:00401CF2                 call    fputs
.text:00401CF7                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401CFE                 call    ds:libintl_gettext
.text:00401D04                 mov     ecx, ds:_iob
.text:00401D0A                 add     ecx, 20h ; ' '
.text:00401D0D                 mov     [esp+4], ecx
.text:00401D11                 mov     [esp], eax
.text:00401D14                 call    fputs
.text:00401D19                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401D20                 call    ds:libintl_gettext
.text:00401D26                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401D2E                 mov     [esp], eax
.text:00401D31                 call    printf
.text:00401D36                 jmp     loc_401C48
.text:00401D36 ; ---------------------------------------------------------------------------
.text:00401D3B                 align 10h
.text:00401D40 aSExistsButIsNo db '%s exists but is not a directory',0
.text:00401D40                                         ; DATA XREF: sub_401E50+6E↓o
.text:00401D40                                         ; sub_401E50+542↓o ...
.text:00401D61                 align 20h
.text:00401D80 aCannotChangePe db 'cannot change permissions of %s',0
.text:00401D80                                         ; DATA XREF: sub_401E50+FD↓o
.text:00401D80                                         ; sub_401E50+69E↓o ...
.text:00401DA0 aCannotChangeOw db 'cannot change owner and/or group of %s',0
.text:00401DA0                                         ; DATA XREF: sub_401E50+13C↓o
.text:00401DA0                                         ; sub_401E50+43A↓o ...
.text:00401DC7 aCannotChdirToD db 'cannot chdir to directory %s',0
.text:00401DC7                                         ; DATA XREF: sub_401E50+363↓o
.text:00401DE4                 align 20h
.text:00401E00 aFailedToReturn db 'failed to return to initial working directory',0
.text:00401E00                                         ; DATA XREF: sub_401E50+3C7↓o
.text:00401E00                                         ; sub_401E50+49C↓o
.text:00401E2E aCannotCreateDi_0 db 'cannot create directory %s',0
.text:00401E2E                                         ; DATA XREF: sub_401E50+580↓o
.text:00401E2E                                         ; sub_401E50+84F↓o ...
.text:00401E49 ; const CHAR asc_401E49[]
.text:00401E49 asc_401E49      db '/',0                ; DATA XREF: sub_401E50:loc_4026C3↓o
.text:00401E4B                 align 10h
.text:00401E50
.text:00401E50 ; =============== S U B R O U T I N E =======================================
.text:00401E50
.text:00401E50
.text:00401E50 ; int __cdecl sub_401E50(char *Str, __int16, __int16, int, int, char, char *)
.text:00401E50 sub_401E50      proc near               ; CODE XREF: sub_4016F0+36C↑p
.text:00401E50
.text:00401E50 FileName        = dword ptr -14Ch
.text:00401E50 AccessMode      = dword ptr -148h
.text:00401E50 var_144         = dword ptr -144h
.text:00401E50 var_140         = byte ptr -140h
.text:00401E50 var_134         = dword ptr -134h
.text:00401E50 var_12D         = byte ptr -12Dh
.text:00401E50 Mode            = dword ptr -12Ch
.text:00401E50 var_128         = dword ptr -128h
.text:00401E50 var_121         = byte ptr -121h
.text:00401E50 var_120         = dword ptr -120h
.text:00401E50 var_119         = byte ptr -119h
.text:00401E50 var_118         = dword ptr -118h
.text:00401E50 var_111         = byte ptr -111h
.text:00401E50 var_110         = dword ptr -110h
.text:00401E50 var_10C         = dword ptr -10Ch
.text:00401E50 var_105         = byte ptr -105h
.text:00401E50 Block           = byte ptr -104h
.text:00401E50 var_FC          = dword ptr -0FCh
.text:00401E50 var_8C          = dword ptr -8Ch
.text:00401E50 Str             = dword ptr  4
.text:00401E50 arg_4           = word ptr  8
.text:00401E50 arg_8           = word ptr  0Ch
.text:00401E50 arg_C           = dword ptr  10h
.text:00401E50 arg_10          = dword ptr  14h
.text:00401E50 arg_14          = byte ptr  18h
.text:00401E50 arg_18          = dword ptr  1Ch
.text:00401E50
.text:00401E50                 push    ebp
.text:00401E51                 push    edi
.text:00401E52                 push    esi
.text:00401E53                 push    ebx
.text:00401E54                 sub     esp, 13Ch
.text:00401E5A                 mov     edi, [esp+14Ch+Str]
.text:00401E61                 movzx   edx, [esp+14Ch+arg_4]
.text:00401E69                 movzx   eax, [esp+14Ch+arg_8]
.text:00401E71                 movzx   ebx, [esp+14Ch+arg_14]
.text:00401E79                 mov     [esp+14Ch+var_111], 1
.text:00401E7E                 mov     [esp+14Ch+var_10C], edx
.text:00401E82                 lea     edx, [esp+14Ch+var_8C]
.text:00401E89                 mov     [esp+14Ch+var_110], eax
.text:00401E8D                 mov     [esp+14Ch+AccessMode], edx ; int
.text:00401E91                 mov     [esp+14Ch+FileName], edi ; char *
.text:00401E94                 call    sub_407210
.text:00401E99                 test    eax, eax
.text:00401E9B                 jnz     loc_401FE0
.text:00401EA1                 mov     edx, [esp+14Ch+var_8C]
.text:00401EA8                 and     edx, 0F000h
.text:00401EAE                 cmp     edx, 4000h
.text:00401EB4                 jz      short loc_401EF6
.text:00401EB6                 mov     [esp+14Ch+FileName], edi ; char *
.text:00401EB9                 call    sub_403FD0
.text:00401EBE                 mov     [esp+14Ch+FileName], offset aSExistsButIsNo ; "%s exists but is not a directory"
.text:00401EC5                 mov     edi, eax
.text:00401EC7                 call    ds:libintl_gettext
.text:00401ECD                 mov     dword ptr [esp+14Ch+var_140], edi ; char
.text:00401ED1                 mov     [esp+14Ch+AccessMode], 0 ; ErrorMessage
.text:00401ED9                 mov     [esp+14Ch+FileName], 0 ; Code
.text:00401EE0                 mov     [esp+14Ch+var_144], eax ; char *
.text:00401EE4                 call    sub_406EF0
.text:00401EE9
.text:00401EE9 loc_401EE9:                             ; CODE XREF: sub_401E50+3BB↓j
.text:00401EE9                                         ; sub_401E50+47B↓j ...
.text:00401EE9                 xor     eax, eax
.text:00401EEB
.text:00401EEB loc_401EEB:                             ; CODE XREF: sub_401E50+F3↓j
.text:00401EEB                                         ; sub_401E50+409↓j
.text:00401EEB                 add     esp, 13Ch
.text:00401EF1                 pop     ebx
.text:00401EF2                 pop     esi
.text:00401EF3                 pop     edi
.text:00401EF4                 pop     ebp
.text:00401EF5                 retn
.text:00401EF6 ; ---------------------------------------------------------------------------
.text:00401EF6
.text:00401EF6 loc_401EF6:                             ; CODE XREF: sub_401E50+64↑j
.text:00401EF6                 test    bl, bl
.text:00401EF8                 jnz     short loc_401F3E
.text:00401EFA                 cmp     [esp+14Ch+arg_C], 0FFFFFFFFh
.text:00401F02                 jz      loc_401FC6
.text:00401F08
.text:00401F08 loc_401F08:                             ; CODE XREF: sub_401E50+17E↓j
.text:00401F08                 mov     [esp+14Ch+FileName], edi ; char *
.text:00401F0B                 mov     edx, [esp+14Ch+arg_10]
.text:00401F12                 mov     esi, [esp+14Ch+arg_C]
.text:00401F19                 mov     [esp+14Ch+var_144], edx ; int
.text:00401F1D                 mov     [esp+14Ch+AccessMode], esi ; int
.text:00401F21                 call    sub_402E00
.text:00401F26                 test    eax, eax
.text:00401F28                 jnz     short loc_401F84
.text:00401F2A
.text:00401F2A loc_401F2A:                             ; CODE XREF: sub_401E50+171↓j
.text:00401F2A                                         ; sub_401E50+184↓j
.text:00401F2A                 mov     [esp+14Ch+FileName], edi ; FileName
.text:00401F2D                 mov     esi, [esp+14Ch+var_10C]
.text:00401F31                 mov     [esp+14Ch+AccessMode], esi ; AccessMode
.text:00401F35                 call    _chmod
.text:00401F3A                 test    eax, eax
.text:00401F3C                 jnz     short loc_401F45
.text:00401F3E
.text:00401F3E loc_401F3E:                             ; CODE XREF: sub_401E50+A8↑j
.text:00401F3E                                         ; sub_401E50+132↓j ...
.text:00401F3E                 movzx   eax, [esp+14Ch+var_111]
.text:00401F43                 jmp     short loc_401EEB
.text:00401F45 ; ---------------------------------------------------------------------------
.text:00401F45
.text:00401F45 loc_401F45:                             ; CODE XREF: sub_401E50+EC↑j
.text:00401F45                 mov     [esp+14Ch+FileName], edi ; char *
.text:00401F48                 call    sub_403FD0
.text:00401F4D                 mov     [esp+14Ch+FileName], offset aCannotChangePe ; "cannot change permissions of %s"
.text:00401F54                 mov     ebx, eax
.text:00401F56                 call    ds:libintl_gettext
.text:00401F5C                 mov     ebp, eax
.text:00401F5E                 call    _errno
.text:00401F63                 mov     dword ptr [esp+14Ch+var_140], ebx ; char
.text:00401F67                 mov     [esp+14Ch+var_144], ebp ; char *
.text:00401F6B                 mov     edi, [eax]
.text:00401F6D                 mov     [esp+14Ch+FileName], 0 ; Code
.text:00401F74                 mov     [esp+14Ch+AccessMode], edi ; ErrorMessage
.text:00401F78                 call    sub_406EF0
.text:00401F7D                 mov     [esp+14Ch+var_111], 0
.text:00401F82                 jmp     short loc_401F3E
.text:00401F84 ; ---------------------------------------------------------------------------
.text:00401F84
.text:00401F84 loc_401F84:                             ; CODE XREF: sub_401E50+D8↑j
.text:00401F84                 mov     [esp+14Ch+FileName], edi ; char *
.text:00401F87                 call    sub_403FD0
.text:00401F8C                 mov     [esp+14Ch+FileName], offset aCannotChangeOw ; "cannot change owner and/or group of %s"
.text:00401F93                 mov     ebx, eax
.text:00401F95                 call    ds:libintl_gettext
.text:00401F9B                 mov     ebp, eax
.text:00401F9D                 call    _errno
.text:00401FA2                 mov     dword ptr [esp+14Ch+var_140], ebx ; char
.text:00401FA6                 mov     [esp+14Ch+var_144], ebp ; char *
.text:00401FAA                 mov     ecx, [eax]
.text:00401FAC                 mov     [esp+14Ch+FileName], 0 ; Code
.text:00401FB3                 mov     [esp+14Ch+AccessMode], ecx ; ErrorMessage
.text:00401FB7                 call    sub_406EF0
.text:00401FBC                 mov     [esp+14Ch+var_111], 0
.text:00401FC1                 jmp     loc_401F2A
.text:00401FC6 ; ---------------------------------------------------------------------------
.text:00401FC6
.text:00401FC6 loc_401FC6:                             ; CODE XREF: sub_401E50+B2↑j
.text:00401FC6                 cmp     [esp+14Ch+arg_10], 0FFFFFFFFh
.text:00401FCE                 jnz     loc_401F08
.text:00401FD4                 jmp     loc_401F2A
.text:00401FD4 ; ---------------------------------------------------------------------------
.text:00401FD9                 align 10h
.text:00401FE0
.text:00401FE0 loc_401FE0:                             ; CODE XREF: sub_401E50+4B↑j
.text:00401FE0                 mov     [esp+14Ch+var_120], 0
.text:00401FE8                 mov     [esp+14Ch+FileName], 0 ; Mode
.text:00401FEF                 call    _umask
.text:00401FF4                 mov     [esp+14Ch+FileName], edi ; Str
.text:00401FF7                 movzx   esi, ax
.text:00401FFA                 mov     [esp+14Ch+Mode], esi
.text:00401FFE                 call    strlen
.text:00402003                 inc     eax
.text:00402004                 mov     [esp+14Ch+FileName], eax ; Size
.text:00402007                 call    malloc
.text:0040200C                 mov     [esp+14Ch+var_128], eax
.text:00402010                 mov     [esp+14Ch+AccessMode], edi ; Source
.text:00402014                 mov     [esp+14Ch+FileName], eax ; Destination
.text:00402017                 call    strcpy
.text:0040201C                 mov     ebx, [esp+14Ch+var_128]
.text:00402020                 mov     [esp+14Ch+FileName], ebx
.text:00402023                 call    sub_404800
.text:00402028                 mov     ecx, [esp+14Ch+var_110]
.text:0040202C                 and     ecx, 0C0h
.text:00402032                 cmp     ecx, 0C0h ; 'À'
.text:00402038                 jz      loc_4026E6
.text:0040203E
.text:0040203E loc_40203E:                             ; CODE XREF: sub_401E50+8A8↓j
.text:0040203E                 mov     [esp+14Ch+var_118], 1C0h
.text:00402046                 mov     [esp+14Ch+var_119], 1
.text:0040204B
.text:0040204B loc_40204B:                             ; CODE XREF: sub_401E50+8BB↓j
.text:0040204B                 lea     ebp, [esp+14Ch+Block]
.text:0040204F                 mov     [esp+14Ch+FileName], ebp
.text:00402052                 call    sub_404750
.text:00402057                 test    eax, eax
.text:00402059                 setz    [esp+14Ch+var_121]
.text:0040205E                 cmp     [esp+14Ch+var_121], 0
.text:00402063                 jz      loc_4026D3
.text:00402069                 mov     ecx, [esp+14Ch+var_128]
.text:0040206D                 movzx   eax, byte ptr [ecx]
.text:00402070                 cmp     al, 2Fh ; '/'
.text:00402072                 jz      loc_4026C3
.text:00402078
.text:00402078 loc_402078:                             ; CODE XREF: sub_401E50+88A↓j
.text:00402078                 cmp     al, 2Fh ; '/'
.text:0040207A                 mov     esi, [esp+14Ch+var_128]
.text:0040207E                 jz      loc_4026B8
.text:00402084                 lea     esi, [esi+0]
.text:0040208A                 lea     edi, [edi+0]
.text:00402090
.text:00402090 loc_402090:                             ; CODE XREF: sub_401E50+334↓j
.text:00402090                                         ; sub_401E50+346↓j ...
.text:00402090                 mov     [esp+14Ch+FileName], esi ; Str
.text:00402093                 mov     edi, esi
.text:00402095                 mov     [esp+14Ch+AccessMode], 2Fh ; '/' ; Val
.text:0040209D                 call    strchr
.text:004020A2                 test    eax, eax
.text:004020A4                 mov     esi, eax
.text:004020A6                 jz      loc_4023F1
.text:004020AC                 cmp     [esp+14Ch+var_121], 0
.text:004020B1                 jnz     short loc_4020B7
.text:004020B3                 mov     edi, [esp+14Ch+var_128]
.text:004020B7
.text:004020B7 loc_4020B7:                             ; CODE XREF: sub_401E50+261↑j
.text:004020B7                 mov     byte ptr [esi], 0
.text:004020BA                 lea     ebp, [esp+14Ch+var_105]
.text:004020BE                 mov     bl, 1
.text:004020C0                 mov     [esp+14Ch+FileName], edi ; LPCSTR
.text:004020C3                 mov     edx, [esp+14Ch+var_118]
.text:004020C7                 mov     [esp+14Ch+AccessMode], edx ; AccessMode
.text:004020CB                 call    sub_407190
.text:004020D0                 test    eax, eax
.text:004020D2                 setz    [esp+14Ch+var_12D]
.text:004020D7                 cmp     [esp+14Ch+var_12D], 0
.text:004020DC                 jz      loc_402351
.text:004020E2
.text:004020E2 loc_4020E2:                             ; CODE XREF: sub_401E50+530↓j
.text:004020E2                                         ; sub_401E50+56F↓j
.text:004020E2                 test    ebp, ebp
.text:004020E4                 jz      short loc_4020EE
.text:004020E6                 movzx   edx, [esp+14Ch+var_12D]
.text:004020EB                 mov     [ebp+0], dl
.text:004020EE
.text:004020EE loc_4020EE:                             ; CODE XREF: sub_401E50+294↑j
.text:004020EE                 test    bl, bl
.text:004020F0                 jz      loc_402335
.text:004020F6                 cmp     [esp+14Ch+var_105], 0
.text:004020FB                 jz      short loc_402176
.text:004020FD                 mov     ebp, [esp+14Ch+arg_18]
.text:00402104                 test    ebp, ebp
.text:00402106                 jz      short loc_402137
.text:00402108                 mov     ecx, [esp+14Ch+var_128]
.text:0040210C                 mov     [esp+14Ch+FileName], ecx ; char *
.text:0040210F                 call    sub_403FD0
.text:00402114                 mov     dword ptr [esp+14Ch+var_140], eax ; char
.text:00402118                 mov     eax, [esp+14Ch+arg_18]
.text:0040211F                 mov     [esp+14Ch+AccessMode], 0 ; ErrorMessage
.text:00402127                 mov     [esp+14Ch+FileName], 0 ; Code
.text:0040212E                 mov     [esp+14Ch+var_144], eax ; char *
.text:00402132                 call    sub_406EF0
.text:00402137
.text:00402137 loc_402137:                             ; CODE XREF: sub_401E50+2B6↑j
.text:00402137                 cmp     [esp+14Ch+arg_C], 0FFFFFFFFh
.text:0040213F                 jz      loc_402322
.text:00402145
.text:00402145 loc_402145:                             ; CODE XREF: sub_401E50+4DA↓j
.text:00402145                 mov     [esp+14Ch+FileName], edi ; char *
.text:00402148                 mov     edx, [esp+14Ch+arg_10]
.text:0040214F                 mov     ebx, [esp+14Ch+arg_C]
.text:00402156                 mov     [esp+14Ch+var_144], edx ; int
.text:0040215A                 mov     [esp+14Ch+AccessMode], ebx ; int
.text:0040215E                 call    sub_402E00
.text:00402163                 test    eax, eax
.text:00402165                 jnz     loc_40227E
.text:0040216B
.text:0040216B loc_40216B:                             ; CODE XREF: sub_401E50+4E0↓j
.text:0040216B                 cmp     [esp+14Ch+var_119], 0
.text:00402170                 jnz     loc_402260
.text:00402176
.text:00402176 loc_402176:                             ; CODE XREF: sub_401E50+2AB↑j
.text:00402176                                         ; sub_401E50+429↓j
.text:00402176                 cmp     [esp+14Ch+var_121], 0
.text:0040217B                 jnz     short loc_40219B
.text:0040217D
.text:0040217D loc_40217D:                             ; CODE XREF: sub_401E50+355↓j
.text:0040217D                 mov     byte ptr [esi], 2Fh ; '/'
.text:00402180                 inc     esi
.text:00402181                 cmp     byte ptr [esi], 2Fh ; '/'
.text:00402184                 jnz     loc_402090
.text:0040218A                 lea     esi, [esi+0]
.text:00402190
.text:00402190 loc_402190:                             ; CODE XREF: sub_401E50+344↓j
.text:00402190                 inc     esi
.text:00402191                 cmp     byte ptr [esi], 2Fh ; '/'
.text:00402194                 jz      short loc_402190
.text:00402196                 jmp     loc_402090
.text:0040219B ; ---------------------------------------------------------------------------
.text:0040219B
.text:0040219B loc_40219B:                             ; CODE XREF: sub_401E50+32B↑j
.text:0040219B                 mov     [esp+14Ch+FileName], edi ; LPCSTR
.text:0040219E                 call    sub_407300
.text:004021A3                 test    eax, eax
.text:004021A5                 jns     short loc_40217D
.text:004021A7                 mov     esi, [esp+14Ch+var_128]
.text:004021AB                 mov     [esp+14Ch+FileName], esi ; char *
.text:004021AE                 call    sub_403FD0
.text:004021B3                 mov     [esp+14Ch+FileName], offset aCannotChdirToD ; "cannot chdir to directory %s"
.text:004021BA                 mov     ebx, eax
.text:004021BC                 call    ds:libintl_gettext
.text:004021C2                 mov     ebp, eax
.text:004021C4                 call    _errno
.text:004021C9                 mov     dword ptr [esp+14Ch+var_140], ebx ; char
.text:004021CD                 mov     [esp+14Ch+var_144], ebp ; char *
.text:004021D1                 mov     edi, [eax]
.text:004021D3                 mov     [esp+14Ch+FileName], 0 ; Code
.text:004021DA                 mov     [esp+14Ch+AccessMode], edi ; ErrorMessage
.text:004021DE                 call    sub_406EF0
.text:004021E3                 mov     eax, [esp+14Ch+Mode]
.text:004021E7                 mov     [esp+14Ch+FileName], eax ; Mode
.text:004021EA                 call    _umask
.text:004021EF
.text:004021EF loc_4021EF:                             ; CODE XREF: sub_401E50+4FC↓j
.text:004021EF                 lea     ecx, [esp+14Ch+Block]
.text:004021F3                 mov     [esp+14Ch+FileName], ecx
.text:004021F6                 call    sub_404790
.text:004021FB                 test    eax, eax
.text:004021FD                 jnz     short loc_402210
.text:004021FF
.text:004021FF loc_4021FF:                             ; CODE XREF: sub_401E50+48F↓j
.text:004021FF                 lea     ebx, [esp+14Ch+Block]
.text:00402203                 mov     [esp+14Ch+FileName], ebx ; Block
.text:00402206                 call    sub_4047C0
.text:0040220B                 jmp     loc_401EE9
.text:00402210 ; ---------------------------------------------------------------------------
.text:00402210
.text:00402210 loc_402210:                             ; CODE XREF: sub_401E50+3AD↑j
.text:00402210                 call    _errno
.text:00402215                 mov     esi, [eax]
.text:00402217                 mov     [esp+14Ch+FileName], offset aFailedToReturn ; "failed to return to initial working dir"...
.text:0040221E                 call    ds:libintl_gettext
.text:00402224                 mov     ebp, eax
.text:00402226                 call    _errno
.text:0040222B                 mov     [esp+14Ch+var_144], ebp ; char *
.text:0040222F                 mov     ebx, [eax]
.text:00402231                 mov     [esp+14Ch+FileName], 0 ; Code
.text:00402238                 mov     [esp+14Ch+AccessMode], ebx ; ErrorMessage
.text:0040223C                 call    sub_406EF0
.text:00402241                 lea     eax, [esp+14Ch+Block]
.text:00402245                 mov     [esp+14Ch+FileName], eax ; Block
.text:00402248
.text:00402248 loc_402248:                             ; CODE XREF: sub_401E50+4CD↓j
.text:00402248                 call    sub_4047C0
.text:0040224D                 call    _errno
.text:00402252                 mov     [eax], esi
.text:00402254                 mov     eax, 1
.text:00402259                 jmp     loc_401EEB
.text:00402259 ; ---------------------------------------------------------------------------
.text:0040225E                 align 10h
.text:00402260
.text:00402260 loc_402260:                             ; CODE XREF: sub_401E50+320↑j
.text:00402260                 mov     [esp+14Ch+FileName], 8 ; Size
.text:00402267                 call    malloc
.text:0040226C                 mov     [eax], esi
.text:0040226E                 mov     ebp, [esp+14Ch+var_120]
.text:00402272                 mov     [esp+14Ch+var_120], eax
.text:00402276                 mov     [eax+4], ebp
.text:00402279                 jmp     loc_402176
.text:0040227E ; ---------------------------------------------------------------------------
.text:0040227E
.text:0040227E loc_40227E:                             ; CODE XREF: sub_401E50+315↑j
.text:0040227E                 mov     ecx, [esp+14Ch+var_128]
.text:00402282                 mov     [esp+14Ch+FileName], ecx ; char *
.text:00402285                 call    sub_403FD0
.text:0040228A                 mov     [esp+14Ch+FileName], offset aCannotChangeOw ; "cannot change owner and/or group of %s"
.text:00402291                 mov     ebx, eax
.text:00402293                 call    ds:libintl_gettext
.text:00402299                 mov     ebp, eax
.text:0040229B                 call    _errno
.text:004022A0                 mov     dword ptr [esp+14Ch+var_140], ebx ; char
.text:004022A4                 mov     [esp+14Ch+var_144], ebp ; char *
.text:004022A8                 mov     esi, [eax]
.text:004022AA                 mov     [esp+14Ch+FileName], 0 ; Code
.text:004022B1                 mov     [esp+14Ch+AccessMode], esi ; ErrorMessage
.text:004022B5                 call    sub_406EF0
.text:004022BA                 mov     edi, [esp+14Ch+Mode]
.text:004022BE                 mov     [esp+14Ch+FileName], edi ; Mode
.text:004022C1                 call    _umask
.text:004022C6                 cmp     [esp+14Ch+var_121], 0
.text:004022CB                 jz      loc_401EE9
.text:004022D1                 lea     edx, [esp+14Ch+Block]
.text:004022D5                 mov     [esp+14Ch+FileName], edx
.text:004022D8
.text:004022D8 loc_4022D8:                             ; CODE XREF: sub_401E50+7CF↓j
.text:004022D8                 call    sub_404790
.text:004022DD                 test    eax, eax
.text:004022DF                 jz      loc_4021FF
.text:004022E5
.text:004022E5 loc_4022E5:                             ; CODE XREF: sub_401E50+6E3↓j
.text:004022E5                 call    _errno
.text:004022EA                 mov     esi, [eax]
.text:004022EC                 mov     [esp+14Ch+FileName], offset aFailedToReturn ; "failed to return to initial working dir"...
.text:004022F3                 call    ds:libintl_gettext
.text:004022F9                 mov     edi, eax
.text:004022FB                 call    _errno
.text:00402300                 mov     [esp+14Ch+var_144], edi ; char *
.text:00402304                 mov     ebp, [eax]
.text:00402306                 mov     [esp+14Ch+FileName], 0 ; Code
.text:0040230D                 mov     [esp+14Ch+AccessMode], ebp ; ErrorMessage
.text:00402311                 call    sub_406EF0
.text:00402316                 lea     ecx, [esp+14Ch+Block]
.text:0040231A                 mov     [esp+14Ch+FileName], ecx
.text:0040231D                 jmp     loc_402248
.text:00402322 ; ---------------------------------------------------------------------------
.text:00402322
.text:00402322 loc_402322:                             ; CODE XREF: sub_401E50+2EF↑j
.text:00402322                 cmp     [esp+14Ch+arg_10], 0FFFFFFFFh
.text:0040232A                 jnz     loc_402145
.text:00402330                 jmp     loc_40216B
.text:00402335 ; ---------------------------------------------------------------------------
.text:00402335
.text:00402335 loc_402335:                             ; CODE XREF: sub_401E50+2A0↑j
.text:00402335                 mov     esi, [esp+14Ch+Mode]
.text:00402339                 mov     [esp+14Ch+FileName], esi ; Mode
.text:0040233C                 call    _umask
.text:00402341                 cmp     [esp+14Ch+var_121], 0
.text:00402346                 jz      loc_401EE9
.text:0040234C                 jmp     loc_4021EF
.text:00402351 ; ---------------------------------------------------------------------------
.text:00402351
.text:00402351 loc_402351:                             ; CODE XREF: sub_401E50+28C↑j
.text:00402351                 call    _errno
.text:00402356                 mov     edx, [eax]
.text:00402358                 lea     ecx, [esp+14Ch+var_FC]
.text:0040235C                 mov     [esp+14Ch+AccessMode], ecx ; int
.text:00402360                 mov     [esp+14Ch+FileName], edi ; char *
.text:00402363                 mov     [esp+14Ch+var_134], edx
.text:00402367                 call    sub_407210
.text:0040236C                 test    eax, eax
.text:0040236E                 jnz     short loc_4023C4
.text:00402370                 mov     ecx, [esp+14Ch+var_FC]
.text:00402374                 and     ecx, 0F000h
.text:0040237A                 cmp     ecx, 4000h
.text:00402380                 jz      loc_4020E2
.text:00402386                 mov     ebx, [esp+14Ch+var_128]
.text:0040238A                 mov     [esp+14Ch+FileName], ebx ; char *
.text:0040238D                 call    sub_403FD0
.text:00402392                 mov     [esp+14Ch+FileName], offset aSExistsButIsNo ; "%s exists but is not a directory"
.text:00402399                 mov     ebx, eax
.text:0040239B                 call    ds:libintl_gettext
.text:004023A1                 mov     dword ptr [esp+14Ch+var_140], ebx ; char
.text:004023A5                 mov     [esp+14Ch+AccessMode], 0 ; ErrorMessage
.text:004023AD                 mov     [esp+14Ch+var_144], eax ; char *
.text:004023B1
.text:004023B1 loc_4023B1:                             ; CODE XREF: sub_401E50+59F↓j
.text:004023B1                 mov     [esp+14Ch+FileName], 0 ; Code
.text:004023B8                 xor     ebx, ebx
.text:004023BA                 call    sub_406EF0
.text:004023BF                 jmp     loc_4020E2
.text:004023C4 ; ---------------------------------------------------------------------------
.text:004023C4
.text:004023C4 loc_4023C4:                             ; CODE XREF: sub_401E50+51E↑j
.text:004023C4                 mov     eax, [esp+14Ch+var_128]
.text:004023C8                 mov     [esp+14Ch+FileName], eax ; char *
.text:004023CB                 call    sub_403FD0
.text:004023D0                 mov     [esp+14Ch+FileName], offset aCannotCreateDi_0 ; "cannot create directory %s"
.text:004023D7                 mov     ebx, eax
.text:004023D9                 call    ds:libintl_gettext
.text:004023DF                 mov     dword ptr [esp+14Ch+var_140], ebx
.text:004023E3                 mov     ebx, [esp+14Ch+var_134]
.text:004023E7                 mov     [esp+14Ch+var_144], eax
.text:004023EB                 mov     [esp+14Ch+AccessMode], ebx
.text:004023EF                 jmp     short loc_4023B1
.text:004023F1 ; ---------------------------------------------------------------------------
.text:004023F1
.text:004023F1 loc_4023F1:                             ; CODE XREF: sub_401E50+256↑j
.text:004023F1                 cmp     [esp+14Ch+var_121], 0
.text:004023F6                 jnz     short loc_4023FC
.text:004023F8                 mov     edi, [esp+14Ch+var_128]
.text:004023FC
.text:004023FC loc_4023FC:                             ; CODE XREF: sub_401E50+5A6↑j
.text:004023FC                 mov     edx, [esp+14Ch+Mode]
.text:00402400                 mov     bl, 1
.text:00402402                 mov     [esp+14Ch+FileName], edx ; Mode
.text:00402405                 call    _umask
.text:0040240A                 mov     [esp+14Ch+FileName], edi ; LPCSTR
.text:0040240D                 mov     eax, [esp+14Ch+var_10C]
.text:00402411                 mov     [esp+14Ch+AccessMode], eax ; AccessMode
.text:00402415                 call    sub_407190
.text:0040241A                 test    eax, eax
.text:0040241C                 jnz     loc_402624
.text:00402422
.text:00402422 loc_402422:                             ; CODE XREF: sub_401E50+7FF↓j
.text:00402422                                         ; sub_401E50+83E↓j
.text:00402422                 test    bl, bl
.text:00402424                 jz      loc_402601
.text:0040242A                 mov     edx, [esp+14Ch+arg_18]
.text:00402431                 test    edx, edx
.text:00402433                 jz      short loc_402464
.text:00402435                 mov     ebp, [esp+14Ch+var_128]
.text:00402439                 mov     [esp+14Ch+FileName], ebp ; char *
.text:0040243C                 call    sub_403FD0
.text:00402441                 mov     dword ptr [esp+14Ch+var_140], eax ; char
.text:00402445                 mov     esi, [esp+14Ch+arg_18]
.text:0040244C                 mov     [esp+14Ch+AccessMode], 0 ; ErrorMessage
.text:00402454                 mov     [esp+14Ch+FileName], 0 ; Code
.text:0040245B                 mov     [esp+14Ch+var_144], esi ; char *
.text:0040245F                 call    sub_406EF0
.text:00402464
.text:00402464 loc_402464:                             ; CODE XREF: sub_401E50+5E3↑j
.text:00402464                 cmp     [esp+14Ch+arg_C], 0FFFFFFFFh
.text:0040246C                 jz      loc_4025EE
.text:00402472
.text:00402472 loc_402472:                             ; CODE XREF: sub_401E50+7A6↓j
.text:00402472                 mov     [esp+14Ch+FileName], edi ; char *
.text:00402475                 mov     ebx, [esp+14Ch+arg_10]
.text:0040247C                 mov     ecx, [esp+14Ch+arg_C]
.text:00402483                 mov     [esp+14Ch+var_144], ebx ; int
.text:00402487                 mov     [esp+14Ch+AccessMode], ecx ; int
.text:0040248B                 call    sub_402E00
.text:00402490                 test    eax, eax
.text:00402492                 jnz     loc_4025A8
.text:00402498
.text:00402498 loc_402498:                             ; CODE XREF: sub_401E50+799↓j
.text:00402498                                         ; sub_401E50+7AC↓j
.text:00402498                 test    [esp+14Ch+var_10C], 0FE00h
.text:004024A0                 jnz     loc_40254A
.text:004024A6
.text:004024A6 loc_4024A6:                             ; CODE XREF: sub_401E50+70C↓j
.text:004024A6                                         ; sub_401E50+753↓j
.text:004024A6                 cmp     [esp+14Ch+var_121], 0
.text:004024AB                 jnz     short loc_402525
.text:004024AD
.text:004024AD loc_4024AD:                             ; CODE XREF: sub_401E50+6F5↓j
.text:004024AD                 mov     edi, [esp+14Ch+var_120]
.text:004024B1                 test    edi, edi
.text:004024B3                 jz      loc_401F3E
.text:004024B9
.text:004024B9 loc_4024B9:                             ; CODE XREF: sub_401E50+68B↓j
.text:004024B9                 mov     ebx, [edi]
.text:004024BB                 mov     byte ptr [ebx], 0
.text:004024BE                 mov     edx, [esp+14Ch+var_110]
.text:004024C2                 mov     ebp, [esp+14Ch+var_128]
.text:004024C6                 mov     [esp+14Ch+AccessMode], edx ; AccessMode
.text:004024CA                 mov     [esp+14Ch+FileName], ebp ; FileName
.text:004024CD                 call    _chmod
.text:004024D2                 test    eax, eax
.text:004024D4                 jnz     short loc_4024E2
.text:004024D6
.text:004024D6 loc_4024D6:                             ; CODE XREF: sub_401E50+6D3↓j
.text:004024D6                 mov     edi, [edi+4]
.text:004024D9                 test    edi, edi
.text:004024DB                 jnz     short loc_4024B9
.text:004024DD                 jmp     loc_401F3E
.text:004024E2 ; ---------------------------------------------------------------------------
.text:004024E2
.text:004024E2 loc_4024E2:                             ; CODE XREF: sub_401E50+684↑j
.text:004024E2                 mov     esi, [esp+14Ch+var_128]
.text:004024E6                 mov     [esp+14Ch+FileName], esi ; char *
.text:004024E9                 call    sub_403FD0
.text:004024EE                 mov     [esp+14Ch+FileName], offset aCannotChangePe ; "cannot change permissions of %s"
.text:004024F5                 mov     ebx, eax
.text:004024F7                 call    ds:libintl_gettext
.text:004024FD                 mov     ebp, eax
.text:004024FF                 call    _errno
.text:00402504                 mov     dword ptr [esp+14Ch+var_140], ebx ; char
.text:00402508                 mov     [esp+14Ch+var_144], ebp ; char *
.text:0040250C                 mov     ecx, [eax]
.text:0040250E                 mov     [esp+14Ch+FileName], 0 ; Code
.text:00402515                 mov     [esp+14Ch+AccessMode], ecx ; ErrorMessage
.text:00402519                 call    sub_406EF0
.text:0040251E                 mov     [esp+14Ch+var_111], 0
.text:00402523                 jmp     short loc_4024D6
.text:00402525 ; ---------------------------------------------------------------------------
.text:00402525
.text:00402525 loc_402525:                             ; CODE XREF: sub_401E50+65B↑j
.text:00402525                 lea     esi, [esp+14Ch+Block]
.text:00402529                 mov     [esp+14Ch+FileName], esi
.text:0040252C                 call    sub_404790
.text:00402531                 test    eax, eax
.text:00402533                 jnz     loc_4022E5
.text:00402539                 lea     eax, [esp+14Ch+Block]
.text:0040253D                 mov     [esp+14Ch+FileName], eax ; Block
.text:00402540                 call    sub_4047C0
.text:00402545                 jmp     loc_4024AD
.text:0040254A ; ---------------------------------------------------------------------------
.text:0040254A
.text:0040254A loc_40254A:                             ; CODE XREF: sub_401E50+650↑j
.text:0040254A                 mov     [esp+14Ch+FileName], edi ; FileName
.text:0040254D                 mov     eax, [esp+14Ch+var_10C]
.text:00402551                 mov     [esp+14Ch+AccessMode], eax ; AccessMode
.text:00402555                 call    _chmod
.text:0040255A                 test    eax, eax
.text:0040255C                 jz      loc_4024A6
.text:00402562                 mov     ecx, [esp+14Ch+var_128]
.text:00402566                 mov     [esp+14Ch+FileName], ecx ; char *
.text:00402569                 call    sub_403FD0
.text:0040256E                 mov     [esp+14Ch+FileName], offset aCannotChangePe ; "cannot change permissions of %s"
.text:00402575                 mov     ebx, eax
.text:00402577                 call    ds:libintl_gettext
.text:0040257D                 mov     ebp, eax
.text:0040257F                 call    _errno
.text:00402584                 mov     dword ptr [esp+14Ch+var_140], ebx ; char
.text:00402588                 mov     [esp+14Ch+var_144], ebp ; char *
.text:0040258C                 mov     edi, [eax]
.text:0040258E                 mov     [esp+14Ch+FileName], 0 ; Code
.text:00402595                 mov     [esp+14Ch+AccessMode], edi ; ErrorMessage
.text:00402599                 call    sub_406EF0
.text:0040259E                 mov     [esp+14Ch+var_111], 0
.text:004025A3                 jmp     loc_4024A6
.text:004025A8 ; ---------------------------------------------------------------------------
.text:004025A8
.text:004025A8 loc_4025A8:                             ; CODE XREF: sub_401E50+642↑j
.text:004025A8                 mov     esi, [esp+14Ch+var_128]
.text:004025AC                 mov     [esp+14Ch+FileName], esi ; char *
.text:004025AF                 call    sub_403FD0
.text:004025B4                 mov     [esp+14Ch+FileName], offset aCannotChangeOw ; "cannot change owner and/or group of %s"
.text:004025BB                 mov     ebx, eax
.text:004025BD                 call    ds:libintl_gettext
.text:004025C3                 mov     ebp, eax
.text:004025C5                 call    _errno
.text:004025CA                 mov     dword ptr [esp+14Ch+var_140], ebx ; char
.text:004025CE                 mov     [esp+14Ch+var_144], ebp ; char *
.text:004025D2                 mov     edx, [eax]
.text:004025D4                 mov     [esp+14Ch+FileName], 0 ; Code
.text:004025DB                 mov     [esp+14Ch+AccessMode], edx ; ErrorMessage
.text:004025DF                 call    sub_406EF0
.text:004025E4                 mov     [esp+14Ch+var_111], 0
.text:004025E9                 jmp     loc_402498
.text:004025EE ; ---------------------------------------------------------------------------
.text:004025EE
.text:004025EE loc_4025EE:                             ; CODE XREF: sub_401E50+61C↑j
.text:004025EE                 cmp     [esp+14Ch+arg_10], 0FFFFFFFFh
.text:004025F6                 jnz     loc_402472
.text:004025FC                 jmp     loc_402498
.text:00402601 ; ---------------------------------------------------------------------------
.text:00402601
.text:00402601 loc_402601:                             ; CODE XREF: sub_401E50+5D4↑j
.text:00402601                 mov     edi, [esp+14Ch+Mode]
.text:00402605                 mov     [esp+14Ch+FileName], edi ; Mode
.text:00402608                 call    _umask
.text:0040260D                 cmp     [esp+14Ch+var_121], 0
.text:00402612                 jz      loc_401EE9
.text:00402618                 lea     eax, [esp+14Ch+Block]
.text:0040261C                 mov     [esp+14Ch+FileName], eax
.text:0040261F                 jmp     loc_4022D8
.text:00402624 ; ---------------------------------------------------------------------------
.text:00402624
.text:00402624 loc_402624:                             ; CODE XREF: sub_401E50+5CC↑j
.text:00402624                 call    _errno
.text:00402629                 lea     ebp, [esp+14Ch+var_FC]
.text:0040262D                 mov     esi, [eax]
.text:0040262F                 mov     [esp+14Ch+AccessMode], ebp ; int
.text:00402633                 mov     [esp+14Ch+FileName], edi ; char *
.text:00402636                 call    sub_407210
.text:0040263B                 test    eax, eax
.text:0040263D                 jnz     short loc_402693
.text:0040263F                 mov     esi, [esp+14Ch+var_FC]
.text:00402643                 and     esi, 0F000h
.text:00402649                 cmp     esi, 4000h
.text:0040264F                 jz      loc_402422
.text:00402655                 mov     ecx, [esp+14Ch+var_128]
.text:00402659                 mov     [esp+14Ch+FileName], ecx ; char *
.text:0040265C                 call    sub_403FD0
.text:00402661                 mov     [esp+14Ch+FileName], offset aSExistsButIsNo ; "%s exists but is not a directory"
.text:00402668                 mov     ebp, eax
.text:0040266A                 call    ds:libintl_gettext
.text:00402670                 mov     dword ptr [esp+14Ch+var_140], ebp ; char
.text:00402674                 mov     [esp+14Ch+AccessMode], 0 ; ErrorMessage
.text:0040267C
.text:0040267C loc_40267C:                             ; CODE XREF: sub_401E50+866↓j
.text:0040267C                 mov     [esp+14Ch+var_144], eax ; char *
.text:00402680                 mov     [esp+14Ch+FileName], 0 ; Code
.text:00402687                 xor     ebx, ebx
.text:00402689                 call    sub_406EF0
.text:0040268E                 jmp     loc_402422
.text:00402693 ; ---------------------------------------------------------------------------
.text:00402693
.text:00402693 loc_402693:                             ; CODE XREF: sub_401E50+7ED↑j
.text:00402693                 mov     ebx, [esp+14Ch+var_128]
.text:00402697                 mov     [esp+14Ch+FileName], ebx ; char *
.text:0040269A                 call    sub_403FD0
.text:0040269F                 mov     [esp+14Ch+FileName], offset aCannotCreateDi_0 ; "cannot create directory %s"
.text:004026A6                 mov     ebp, eax
.text:004026A8                 call    ds:libintl_gettext
.text:004026AE                 mov     dword ptr [esp+14Ch+var_140], ebp
.text:004026B2                 mov     [esp+14Ch+AccessMode], esi
.text:004026B6                 jmp     short loc_40267C
.text:004026B8 ; ---------------------------------------------------------------------------
.text:004026B8
.text:004026B8 loc_4026B8:                             ; CODE XREF: sub_401E50+22E↑j
.text:004026B8                                         ; sub_401E50+86C↓j
.text:004026B8                 inc     esi
.text:004026B9                 cmp     byte ptr [esi], 2Fh ; '/'
.text:004026BC                 jz      short loc_4026B8
.text:004026BE                 jmp     loc_402090
.text:004026C3 ; ---------------------------------------------------------------------------
.text:004026C3
.text:004026C3 loc_4026C3:                             ; CODE XREF: sub_401E50+222↑j
.text:004026C3                 mov     [esp+14Ch+FileName], offset asc_401E49 ; "/"
.text:004026CA                 call    sub_407300
.text:004026CF                 test    eax, eax
.text:004026D1                 js      short loc_4026DF
.text:004026D3
.text:004026D3 loc_4026D3:                             ; CODE XREF: sub_401E50+213↑j
.text:004026D3                                         ; sub_401E50+894↓j
.text:004026D3                 mov     ebx, [esp+14Ch+var_128]
.text:004026D7                 movzx   eax, byte ptr [ebx]
.text:004026DA                 jmp     loc_402078
.text:004026DF ; ---------------------------------------------------------------------------
.text:004026DF
.text:004026DF loc_4026DF:                             ; CODE XREF: sub_401E50+881↑j
.text:004026DF                 mov     [esp+14Ch+var_121], 0
.text:004026E4                 jmp     short loc_4026D3
.text:004026E6 ; ---------------------------------------------------------------------------
.text:004026E6
.text:004026E6 loc_4026E6:                             ; CODE XREF: sub_401E50+1E8↑j
.text:004026E6                 cmp     [esp+14Ch+arg_C], 0FFFFFFFFh
.text:004026EE                 jz      short loc_402710
.text:004026F0
.text:004026F0 loc_4026F0:                             ; CODE XREF: sub_401E50+8C8↓j
.text:004026F0                 test    [esp+14Ch+var_110], 0E00h
.text:004026F8                 jnz     loc_40203E
.text:004026FE
.text:004026FE loc_4026FE:                             ; CODE XREF: sub_401E50+8CA↓j
.text:004026FE                 mov     [esp+14Ch+var_119], 0
.text:00402703                 mov     edi, [esp+14Ch+var_110]
.text:00402707                 mov     [esp+14Ch+var_118], edi
.text:0040270B                 jmp     loc_40204B
.text:00402710 ; ---------------------------------------------------------------------------
.text:00402710
.text:00402710 loc_402710:                             ; CODE XREF: sub_401E50+89E↑j
.text:00402710                 cmp     [esp+14Ch+arg_10], 0FFFFFFFFh
.text:00402718                 jnz     short loc_4026F0
.text:0040271A                 jmp     short loc_4026FE
.text:0040271A sub_401E50      endp
.text:0040271A
.text:0040271A ; ---------------------------------------------------------------------------
.text:0040271C                 align 10h
.text:00402720
.text:00402720 ; =============== S U B R O U T I N E =======================================
.text:00402720
.text:00402720
.text:00402720 ; int __cdecl sub_402720(LPCSTR, char *, __int16, int)
.text:00402720 sub_402720      proc near               ; CODE XREF: sub_4016F0+3B3↑p
.text:00402720
.text:00402720 Code            = dword ptr -0ACh
.text:00402720 ErrorMessage    = dword ptr -0A8h
.text:00402720 var_A4          = dword ptr -0A4h
.text:00402720 var_A0          = byte ptr -0A0h
.text:00402720 var_8D          = byte ptr -8Dh
.text:00402720 var_8C          = dword ptr -8Ch
.text:00402720 var_10          = dword ptr -10h
.text:00402720 var_C           = dword ptr -0Ch
.text:00402720 var_8           = dword ptr -8
.text:00402720 var_4           = dword ptr -4
.text:00402720 arg_0           = dword ptr  4
.text:00402720 arg_4           = dword ptr  8
.text:00402720 arg_8           = word ptr  0Ch
.text:00402720 arg_C           = dword ptr  10h
.text:00402720
.text:00402720                 sub     esp, 0ACh
.text:00402726                 movzx   edx, [esp+0ACh+arg_8]
.text:0040272E                 mov     [esp+0ACh+var_C], esi
.text:00402735                 mov     esi, [esp+0ACh+arg_0]
.text:0040273C                 mov     [esp+0ACh+var_10], ebx
.text:00402743                 mov     bl, 1
.text:00402745                 mov     [esp+0ACh+var_8], edi
.text:0040274C                 mov     edi, [esp+0ACh+arg_C]
.text:00402753                 mov     [esp+0ACh+var_4], ebp
.text:0040275A                 mov     [esp+0ACh+ErrorMessage], edx ; AccessMode
.text:0040275E                 mov     [esp+0ACh+Code], esi ; LPCSTR
.text:00402761                 call    sub_407190
.text:00402766                 test    eax, eax
.text:00402768                 setz    [esp+0ACh+var_8D]
.text:0040276D                 cmp     [esp+0ACh+var_8D], 0
.text:00402772                 jz      short loc_4027A5
.text:00402774
.text:00402774 loc_402774:                             ; CODE XREF: sub_402720+B0↓j
.text:00402774                                         ; sub_402720+EE↓j
.text:00402774                 test    edi, edi
.text:00402776                 jz      short loc_40277F
.text:00402778                 movzx   edx, [esp+0ACh+var_8D]
.text:0040277D                 mov     [edi], dl
.text:0040277F
.text:0040277F loc_40277F:                             ; CODE XREF: sub_402720+56↑j
.text:0040277F                 movzx   eax, bl
.text:00402782                 mov     esi, [esp+0ACh+var_C]
.text:00402789                 mov     ebx, [esp+0ACh+var_10]
.text:00402790                 mov     edi, [esp+0ACh+var_8]
.text:00402797                 mov     ebp, [esp+0ACh+var_4]
.text:0040279E                 add     esp, 0ACh
.text:004027A4                 retn
.text:004027A5 ; ---------------------------------------------------------------------------
.text:004027A5
.text:004027A5 loc_4027A5:                             ; CODE XREF: sub_402720+52↑j
.text:004027A5                 call    _errno
.text:004027AA                 lea     edx, [esp+0ACh+var_8C]
.text:004027AE                 mov     ebp, [eax]
.text:004027B0                 mov     [esp+0ACh+ErrorMessage], edx ; int
.text:004027B4                 mov     [esp+0ACh+Code], esi ; char *
.text:004027B7                 call    sub_407210
.text:004027BC                 test    eax, eax
.text:004027BE                 jnz     short loc_402813
.text:004027C0                 mov     ebp, [esp+0ACh+var_8C]
.text:004027C4                 and     ebp, 0F000h
.text:004027CA                 cmp     ebp, 4000h
.text:004027D0                 jz      short loc_402774
.text:004027D2                 mov     ebx, [esp+0ACh+arg_4]
.text:004027D9                 mov     [esp+0ACh+Code], ebx ; char *
.text:004027DC                 call    sub_403FD0
.text:004027E1                 mov     [esp+0ACh+Code], offset aSExistsButIsNo ; "%s exists but is not a directory"
.text:004027E8                 mov     esi, eax
.text:004027EA                 call    ds:libintl_gettext
.text:004027F0                 mov     dword ptr [esp+0ACh+var_A0], esi ; char
.text:004027F4                 mov     [esp+0ACh+ErrorMessage], 0 ; ErrorMessage
.text:004027FC
.text:004027FC loc_4027FC:                             ; CODE XREF: sub_402720+119↓j
.text:004027FC                 mov     [esp+0ACh+var_A4], eax ; char *
.text:00402800                 mov     [esp+0ACh+Code], 0 ; Code
.text:00402807                 xor     ebx, ebx
.text:00402809                 call    sub_406EF0
.text:0040280E                 jmp     loc_402774
.text:00402813 ; ---------------------------------------------------------------------------
.text:00402813
.text:00402813 loc_402813:                             ; CODE XREF: sub_402720+9E↑j
.text:00402813                 mov     ecx, [esp+0ACh+arg_4]
.text:0040281A                 mov     [esp+0ACh+Code], ecx ; char *
.text:0040281D                 call    sub_403FD0
.text:00402822                 mov     [esp+0ACh+Code], offset aCannotCreateDi_0 ; "cannot create directory %s"
.text:00402829                 mov     esi, eax
.text:0040282B                 call    ds:libintl_gettext
.text:00402831                 mov     dword ptr [esp+0ACh+var_A0], esi
.text:00402835                 mov     [esp+0ACh+ErrorMessage], ebp
.text:00402839                 jmp     short loc_4027FC
.text:00402839 sub_402720      endp
.text:00402839
.text:00402839 ; ---------------------------------------------------------------------------
.text:0040283B                 align 10h
.text:00402840 ; const char dword_402840[]
.text:00402840 dword_402840    dd 900DEB00h, 3 dup(90909090h)
.text:00402840                                         ; DATA XREF: sub_402850+17↓o
.text:00402850
.text:00402850 ; =============== S U B R O U T I N E =======================================
.text:00402850
.text:00402850
.text:00402850 sub_402850      proc near               ; CODE XREF: sub_4016F0+2D3↑p
.text:00402850
.text:00402850 Size            = dword ptr -3Ch
.text:00402850 var_38          = dword ptr -38h
.text:00402850 var_34          = dword ptr -34h
.text:00402850 var_30          = dword ptr -30h
.text:00402850 Str             = dword ptr -2Ch
.text:00402850 var_25          = byte ptr -25h
.text:00402850 var_24          = dword ptr -24h
.text:00402850 var_20          = dword ptr -20h
.text:00402850 var_1C          = dword ptr -1Ch
.text:00402850 var_18          = dword ptr -18h
.text:00402850 var_14          = dword ptr -14h
.text:00402850 arg_0           = dword ptr  4
.text:00402850 arg_4           = dword ptr  8
.text:00402850
.text:00402850                 push    ebp
.text:00402851                 push    edi
.text:00402852                 push    esi
.text:00402853                 push    ebx
.text:00402854                 sub     esp, 2Ch
.text:00402857                 mov     esi, [esp+3Ch+arg_0]
.text:0040285B                 mov     [esp+3Ch+var_18], 0
.text:00402863                 lea     edx, [esp+3Ch+var_14]
.text:00402867                 mov     [esp+3Ch+Str], offset dword_402840 ; Str
.text:0040286F                 mov     [esp+3Ch+var_30], edx ; int
.text:00402873                 mov     [esp+3Ch+var_34], 8 ; int
.text:0040287B                 mov     [esp+3Ch+var_38], 0 ; int
.text:00402883                 mov     [esp+3Ch+Size], esi ; int
.text:00402886                 call    sub_4048B0
.text:0040288B                 test    eax, eax
.text:0040288D                 jnz     short loc_4028E7
.text:0040288F                 mov     edx, [esp+3Ch+var_14]
.text:00402893                 and     edx, 0FFFh
.text:00402899                 cmp     edx, [esp+3Ch+var_14]
.text:0040289D                 jnz     short loc_4028E3
.text:0040289F                 movzx   ebx, word ptr [esp+3Ch+var_14]
.text:004028A4                 mov     [esp+3Ch+Size], 0Ch ; Size
.text:004028AB                 call    malloc
.text:004028B0                 xor     edx, edx
.text:004028B2                 test    eax, eax
.text:004028B4                 jz      short loc_4028D0
.text:004028B6                 mov     dword ptr [eax+8], 0
.text:004028BD                 mov     edx, eax
.text:004028BF                 mov     byte ptr [eax], 3Dh ; '='
.text:004028C2                 mov     byte ptr [eax+1], 0
.text:004028C6                 mov     [eax+4], bx
.text:004028CA                 mov     word ptr [eax+2], 0FFFh
.text:004028D0
.text:004028D0 loc_4028D0:                             ; CODE XREF: sub_402850+64↑j
.text:004028D0                 test    edx, edx
.text:004028D2                 mov     eax, 1
.text:004028D7                 jz      short loc_4028DB
.text:004028D9                 mov     eax, edx
.text:004028DB
.text:004028DB loc_4028DB:                             ; CODE XREF: sub_402850+87↑j
.text:004028DB                                         ; sub_402850+95↓j ...
.text:004028DB                 add     esp, 2Ch
.text:004028DE                 pop     ebx
.text:004028DF                 pop     esi
.text:004028E0                 pop     edi
.text:004028E1                 pop     ebp
.text:004028E2                 retn
.text:004028E3 ; ---------------------------------------------------------------------------
.text:004028E3
.text:004028E3 loc_4028E3:                             ; CODE XREF: sub_402850+4D↑j
.text:004028E3                                         ; sub_402850+133↓j
.text:004028E3                 xor     eax, eax
.text:004028E5                 jmp     short loc_4028DB
.text:004028E7 ; ---------------------------------------------------------------------------
.text:004028E7
.text:004028E7 loc_4028E7:                             ; CODE XREF: sub_402850+3D↑j
.text:004028E7                 mov     [esp+3Ch+Size], 0 ; Mode
.text:004028EE                 call    _umask
.text:004028F3                 movzx   ecx, ax
.text:004028F6                 mov     [esp+3Ch+var_20], ecx
.text:004028FA                 mov     [esp+3Ch+Size], ecx ; Mode
.text:004028FD                 call    _umask
.text:00402902
.text:00402902 loc_402902:                             ; CODE XREF: sub_402850+119↓j
.text:00402902                 mov     [esp+3Ch+var_24], 0
.text:0040290A                 xor     ebp, ebp
.text:0040290C                 lea     esi, [esi+0]
.text:00402910
.text:00402910 loc_402910:                             ; CODE XREF: sub_402850+E6↓j
.text:00402910                 movzx   edx, byte ptr [esi]
.text:00402913                 movsx   eax, dl
.text:00402916                 mov     cl, dl
.text:00402918                 cmp     eax, 67h ; 'g'
.text:0040291B                 jz      loc_402C14
.text:00402921                 cmp     eax, 67h ; 'g'
.text:00402924                 jg      loc_402BF0
.text:0040292A                 cmp     eax, 61h ; 'a'
.text:0040292D                 jnz     short loc_402938
.text:0040292F                 or      ebp, 0FFFh
.text:00402935
.text:00402935 loc_402935:                             ; CODE XREF: sub_402850+3B4↓j
.text:00402935                                         ; sub_402850+3BF↓j ...
.text:00402935                 inc     esi
.text:00402936                 jmp     short loc_402910
.text:00402938 ; ---------------------------------------------------------------------------
.text:00402938
.text:00402938 loc_402938:                             ; CODE XREF: sub_402850+DD↑j
.text:00402938                                         ; sub_402850+3A8↓j
.text:00402938                 mov     [esp+3Ch+var_25], 1
.text:0040293D                 test    bp, bp
.text:00402940                 jnz     short loc_402954
.text:00402942                 mov     [esp+3Ch+var_25], 0
.text:00402947                 mov     ebx, [esp+3Ch+arg_4]
.text:0040294B                 mov     ebp, 0FFFh
.text:00402950                 mov     [esp+3Ch+var_24], ebx
.text:00402954
.text:00402954 loc_402954:                             ; CODE XREF: sub_402850+F0↑j
.text:00402954                 cmp     cl, 3Dh ; '='
.text:00402957                 jz      short loc_402988
.text:00402959                 cmp     cl, 2Bh ; '+'
.text:0040295C                 jz      short loc_402988
.text:0040295E                 cmp     cl, 2Dh ; '-'
.text:00402961                 jz      short loc_402988
.text:00402963
.text:00402963 loc_402963:                             ; CODE XREF: sub_402850+2EB↓j
.text:00402963                 cmp     dl, 2Ch ; ','
.text:00402966                 jnz     short loc_40296B
.text:00402968                 inc     esi
.text:00402969                 jmp     short loc_402902
.text:0040296B ; ---------------------------------------------------------------------------
.text:0040296B
.text:0040296B loc_40296B:                             ; CODE XREF: sub_402850+116↑j
.text:0040296B                 test    dl, dl
.text:0040296D                 mov     eax, [esp+3Ch+var_18]
.text:00402971                 jz      loc_4028DB
.text:00402977
.text:00402977 loc_402977:                             ; CODE XREF: sub_402850+27F↓j
.text:00402977                                         ; sub_402850+299↓j ...
.text:00402977                 mov     edi, [esp+3Ch+var_18]
.text:0040297B                 mov     [esp+3Ch+Size], edi ; void *
.text:0040297E                 call    sub_402D60
.text:00402983                 jmp     loc_4028E3
.text:00402988 ; ---------------------------------------------------------------------------
.text:00402988
.text:00402988 loc_402988:                             ; CODE XREF: sub_402850+107↑j
.text:00402988                                         ; sub_402850+10C↑j ...
.text:00402988                 mov     [esp+3Ch+Size], 0Ch ; Size
.text:0040298F                 call    malloc
.text:00402994                 test    eax, eax
.text:00402996                 mov     ebx, eax
.text:00402998                 jz      loc_402BD9
.text:0040299E                 mov     dword ptr [eax+8], 0
.text:004029A5                 mov     edi, ebp
.text:004029A7                 movzx   edx, byte ptr [esi]
.text:004029AA                 mov     [eax], dl
.text:004029AC                 cmp     [esp+3Ch+var_25], 0
.text:004029B1                 jnz     loc_402B6D
.text:004029B7                 cmp     dl, 3Dh ; '='
.text:004029BA                 jz      loc_402B66
.text:004029C0
.text:004029C0 loc_4029C0:                             ; CODE XREF: sub_402850+320↓j
.text:004029C0                 cmp     dl, 2Bh ; '+'
.text:004029C3                 jz      loc_402B5C
.text:004029C9                 test    byte ptr [esp+3Ch+var_24], 4
.text:004029CE
.text:004029CE loc_4029CE:                             ; CODE XREF: sub_402850+311↓j
.text:004029CE                                         ; sub_402850+32B↓j
.text:004029CE                 jz      short loc_4029D8
.text:004029D0                 mov     edi, [esp+3Ch+var_20]
.text:004029D4                 not     edi
.text:004029D6                 and     edi, ebp
.text:004029D8
.text:004029D8 loc_4029D8:                             ; CODE XREF: sub_402850:loc_4029CE↑j
.text:004029D8                 mov     byte ptr [ebx+1], 0
.text:004029DC                 mov     edx, [esp+3Ch+var_18]
.text:004029E0                 mov     [ebx+2], di
.text:004029E4                 mov     word ptr [ebx+4], 0
.text:004029EA                 test    edx, edx
.text:004029EC                 jnz     loc_402B4C
.text:004029F2                 mov     [esp+3Ch+var_1C], ebx
.text:004029F6                 mov     [esp+3Ch+var_18], ebx
.text:004029FA                 lea     esi, [esi+0]
.text:00402A00
.text:00402A00 loc_402A00:                             ; CODE XREF: sub_402850+26A↓j
.text:00402A00                                         ; sub_402850+28F↓j ...
.text:00402A00                 inc     esi
.text:00402A01                 movzx   edx, byte ptr [esi]
.text:00402A04                 movsx   eax, dl
.text:00402A07                 mov     cl, dl
.text:00402A09                 sub     eax, 58h ; 'X'  ; switch 33 cases
.text:00402A0C                 cmp     eax, 20h
.text:00402A0F                 ja      def_402A15      ; jumptable 00402A15 default case, cases 89-102,104-110,112,113,118
.text:00402A15                 jmp     ds:jpt_402A15[eax*4] ; switch jump
.text:00402A15 ; ---------------------------------------------------------------------------
.text:00402A1C jpt_402A15      dd offset loc_402ABF    ; DATA XREF: sub_402850+1C5↑r
.text:00402A1C                 dd offset def_402A15    ; jump table for switch statement
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset loc_402ACA
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset loc_402AE4
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset loc_402AA0
.text:00402A1C                 dd offset loc_402AF7
.text:00402A1C                 dd offset loc_402B00
.text:00402A1C                 dd offset loc_402B09
.text:00402A1C                 dd offset def_402A15
.text:00402A1C                 dd offset loc_402B40
.text:00402A1C                 dd offset loc_402AC3
.text:00402AA0 ; ---------------------------------------------------------------------------
.text:00402AA0
.text:00402AA0 loc_402AA0:                             ; CODE XREF: sub_402850+1C5↑j
.text:00402AA0                                         ; DATA XREF: sub_402850:jpt_402A15↑o
.text:00402AA0                 mov     eax, edi        ; jumptable 00402A15 case 114
.text:00402AA2                 and     eax, 124h
.text:00402AA7                 mov     esi, esi
.text:00402AA9                 lea     edi, [edi+0]
.text:00402AB0
.text:00402AB0 loc_402AB0:                             ; CODE XREF: sub_402850+278↓j
.text:00402AB0                                         ; sub_402850+2AE↓j ...
.text:00402AB0                 movzx   ecx, word ptr [ebx+4]
.text:00402AB4                 or      eax, ecx
.text:00402AB6                 mov     [ebx+4], ax
.text:00402ABA                 jmp     loc_402A00
.text:00402ABF ; ---------------------------------------------------------------------------
.text:00402ABF
.text:00402ABF loc_402ABF:                             ; CODE XREF: sub_402850+1C5↑j
.text:00402ABF                                         ; DATA XREF: sub_402850:jpt_402A15↑o
.text:00402ABF                 or      byte ptr [ebx+1], 1 ; jumptable 00402A15 case 88
.text:00402AC3
.text:00402AC3 loc_402AC3:                             ; CODE XREF: sub_402850+1C5↑j
.text:00402AC3                                         ; DATA XREF: sub_402850:jpt_402A15↑o
.text:00402AC3                 mov     eax, edi        ; jumptable 00402A15 case 120
.text:00402AC5                 and     eax, 49h
.text:00402AC8                 jmp     short loc_402AB0
.text:00402ACA ; ---------------------------------------------------------------------------
.text:00402ACA
.text:00402ACA loc_402ACA:                             ; CODE XREF: sub_402850+1C5↑j
.text:00402ACA                                         ; DATA XREF: sub_402850:jpt_402A15↑o
.text:00402ACA                 cmp     word ptr [ebx+4], 0 ; jumptable 00402A15 case 103
.text:00402ACF                 jnz     loc_402977
.text:00402AD5                 mov     word ptr [ebx+4], 38h ; '8'
.text:00402ADB
.text:00402ADB loc_402ADB:                             ; CODE XREF: sub_402850+2A5↓j
.text:00402ADB                                         ; sub_402850+2CA↓j
.text:00402ADB                 or      byte ptr [ebx+1], 2
.text:00402ADF                 jmp     loc_402A00
.text:00402AE4 ; ---------------------------------------------------------------------------
.text:00402AE4
.text:00402AE4 loc_402AE4:                             ; CODE XREF: sub_402850+1C5↑j
.text:00402AE4                                         ; DATA XREF: sub_402850:jpt_402A15↑o
.text:00402AE4                 cmp     word ptr [ebx+4], 0 ; jumptable 00402A15 case 111
.text:00402AE9                 jnz     loc_402977
.text:00402AEF                 mov     word ptr [ebx+4], 7
.text:00402AF5                 jmp     short loc_402ADB
.text:00402AF7 ; ---------------------------------------------------------------------------
.text:00402AF7
.text:00402AF7 loc_402AF7:                             ; CODE XREF: sub_402850+1C5↑j
.text:00402AF7                                         ; DATA XREF: sub_402850:jpt_402A15↑o
.text:00402AF7                 mov     eax, edi        ; jumptable 00402A15 case 115
.text:00402AF9                 and     eax, 0C00h
.text:00402AFE                 jmp     short loc_402AB0
.text:00402B00 ; ---------------------------------------------------------------------------
.text:00402B00
.text:00402B00 loc_402B00:                             ; CODE XREF: sub_402850+1C5↑j
.text:00402B00                                         ; DATA XREF: sub_402850:jpt_402A15↑o
.text:00402B00                 mov     eax, edi        ; jumptable 00402A15 case 116
.text:00402B02                 and     eax, 200h
.text:00402B07                 jmp     short loc_402AB0
.text:00402B09 ; ---------------------------------------------------------------------------
.text:00402B09
.text:00402B09 loc_402B09:                             ; CODE XREF: sub_402850+1C5↑j
.text:00402B09                                         ; DATA XREF: sub_402850:jpt_402A15↑o
.text:00402B09                 cmp     word ptr [ebx+4], 0 ; jumptable 00402A15 case 117
.text:00402B0E                 jnz     loc_402977
.text:00402B14                 mov     word ptr [ebx+4], 1C0h
.text:00402B1A                 jmp     short loc_402ADB
.text:00402B1A ; ---------------------------------------------------------------------------
.text:00402B1C                 align 10h
.text:00402B20
.text:00402B20 def_402A15:                             ; CODE XREF: sub_402850+1BF↑j
.text:00402B20                                         ; sub_402850+1C5↑j
.text:00402B20                                         ; DATA XREF: ...
.text:00402B20                 cmp     cl, 3Dh ; '='   ; jumptable 00402A15 default case, cases 89-102,104-110,112,113,118
.text:00402B23                 jz      loc_402988
.text:00402B29                 cmp     cl, 2Bh ; '+'
.text:00402B2C                 jz      loc_402988
.text:00402B32                 cmp     cl, 2Dh ; '-'
.text:00402B35                 jz      loc_402988
.text:00402B3B                 jmp     loc_402963
.text:00402B40 ; ---------------------------------------------------------------------------
.text:00402B40
.text:00402B40 loc_402B40:                             ; CODE XREF: sub_402850+1C5↑j
.text:00402B40                                         ; DATA XREF: sub_402850:jpt_402A15↑o
.text:00402B40                 mov     eax, edi        ; jumptable 00402A15 case 119
.text:00402B42                 and     eax, 92h
.text:00402B47                 jmp     loc_402AB0
.text:00402B4C ; ---------------------------------------------------------------------------
.text:00402B4C
.text:00402B4C loc_402B4C:                             ; CODE XREF: sub_402850+19C↑j
.text:00402B4C                 mov     ecx, [esp+3Ch+var_1C]
.text:00402B50                 mov     [esp+3Ch+var_1C], ebx
.text:00402B54                 mov     [ecx+8], ebx
.text:00402B57                 jmp     loc_402A00
.text:00402B5C ; ---------------------------------------------------------------------------
.text:00402B5C
.text:00402B5C loc_402B5C:                             ; CODE XREF: sub_402850+173↑j
.text:00402B5C                 test    byte ptr [esp+3Ch+var_24], 2
.text:00402B61                 jmp     loc_4029CE
.text:00402B66 ; ---------------------------------------------------------------------------
.text:00402B66
.text:00402B66 loc_402B66:                             ; CODE XREF: sub_402850+16A↑j
.text:00402B66                 test    byte ptr [esp+3Ch+var_24], 1
.text:00402B6B                 jnz     short loc_402B80
.text:00402B6D
.text:00402B6D loc_402B6D:                             ; CODE XREF: sub_402850+161↑j
.text:00402B6D                                         ; sub_402850+37E↓j
.text:00402B6D                 cmp     dl, 3Dh ; '='
.text:00402B70                 jnz     loc_4029C0
.text:00402B76                 test    byte ptr [esp+3Ch+var_24], 1
.text:00402B7B                 jmp     loc_4029CE
.text:00402B80 ; ---------------------------------------------------------------------------
.text:00402B80
.text:00402B80 loc_402B80:                             ; CODE XREF: sub_402850+31B↑j
.text:00402B80                 mov     [esp+3Ch+Size], 0Ch ; Size
.text:00402B87                 call    malloc
.text:00402B8C                 xor     edx, edx
.text:00402B8E                 test    eax, eax
.text:00402B90                 jz      short loc_402BAE
.text:00402B92                 mov     dword ptr [eax+8], 0
.text:00402B99                 mov     edx, eax
.text:00402B9B                 mov     byte ptr [eax], 3Dh ; '='
.text:00402B9E                 mov     byte ptr [eax+1], 0
.text:00402BA2                 mov     word ptr [eax+4], 0
.text:00402BA8                 mov     word ptr [eax+2], 0FFFh
.text:00402BAE
.text:00402BAE loc_402BAE:                             ; CODE XREF: sub_402850+340↑j
.text:00402BAE                 test    edx, edx
.text:00402BB0                 mov     eax, 1
.text:00402BB5                 jz      loc_4028DB
.text:00402BBB                 mov     eax, [esp+3Ch+var_18]
.text:00402BBF                 test    eax, eax
.text:00402BC1                 jnz     short loc_402BD0
.text:00402BC3                 mov     [esp+3Ch+var_18], edx
.text:00402BC7
.text:00402BC7 loc_402BC7:                             ; CODE XREF: sub_402850+387↓j
.text:00402BC7                 mov     [esp+3Ch+var_1C], edx
.text:00402BCB                 movzx   edx, byte ptr [esi]
.text:00402BCE                 jmp     short loc_402B6D
.text:00402BD0 ; ---------------------------------------------------------------------------
.text:00402BD0
.text:00402BD0 loc_402BD0:                             ; CODE XREF: sub_402850+371↑j
.text:00402BD0                 mov     ecx, [esp+3Ch+var_1C]
.text:00402BD4                 mov     [ecx+8], edx
.text:00402BD7                 jmp     short loc_402BC7
.text:00402BD9 ; ---------------------------------------------------------------------------
.text:00402BD9
.text:00402BD9 loc_402BD9:                             ; CODE XREF: sub_402850+148↑j
.text:00402BD9                 mov     esi, [esp+3Ch+var_18]
.text:00402BDD                 mov     [esp+3Ch+Size], esi ; void *
.text:00402BE0                 call    sub_402D60
.text:00402BE5                 mov     eax, 1
.text:00402BEA                 jmp     loc_4028DB
.text:00402BEA ; ---------------------------------------------------------------------------
.text:00402BEF                 align 10h
.text:00402BF0
.text:00402BF0 loc_402BF0:                             ; CODE XREF: sub_402850+D4↑j
.text:00402BF0                 cmp     eax, 6Fh ; 'o'
.text:00402BF3                 jz      short loc_402C09
.text:00402BF5                 cmp     eax, 75h ; 'u'
.text:00402BF8                 jnz     loc_402938
.text:00402BFE                 or      ebp, 9C0h
.text:00402C04                 jmp     loc_402935
.text:00402C09 ; ---------------------------------------------------------------------------
.text:00402C09
.text:00402C09 loc_402C09:                             ; CODE XREF: sub_402850+3A3↑j
.text:00402C09                 or      ebp, 207h
.text:00402C0F                 jmp     loc_402935
.text:00402C14 ; ---------------------------------------------------------------------------
.text:00402C14
.text:00402C14 loc_402C14:                             ; CODE XREF: sub_402850+CB↑j
.text:00402C14                 or      ebp, 438h
.text:00402C1A                 jmp     loc_402935
.text:00402C1A sub_402850      endp
.text:00402C1A
.text:00402C1A ; ---------------------------------------------------------------------------
.text:00402C1F                 align 10h
.text:00402C20
.text:00402C20 ; =============== S U B R O U T I N E =======================================
.text:00402C20
.text:00402C20
.text:00402C20 sub_402C20      proc near               ; CODE XREF: sub_4016F0+30E↑p
.text:00402C20
.text:00402C20 arg_0           = word ptr  4
.text:00402C20 arg_4           = dword ptr  8
.text:00402C20
.text:00402C20                 push    esi
.text:00402C21                 push    ebx
.text:00402C22                 mov     ecx, [esp+8+arg_4]
.text:00402C26                 movzx   esi, [esp+8+arg_0]
.text:00402C2B                 mov     ebx, esi
.text:00402C2D                 and     ebx, 0FFFh
.text:00402C33                 test    ecx, ecx
.text:00402C35                 jz      short loc_402CA7
.text:00402C37                 mov     esi, esi
.text:00402C39                 lea     edi, [edi+0]
.text:00402C40
.text:00402C40 loc_402C40:                             ; CODE XREF: sub_402C20+85↓j
.text:00402C40                 movsx   eax, byte ptr [ecx+1]
.text:00402C44                 test    al, 2
.text:00402C46                 jz      loc_402D20
.text:00402C4C                 movzx   eax, word ptr [ecx+4]
.text:00402C50                 mov     edx, ebx
.text:00402C52                 and     edx, eax
.text:00402C54                 test    eax, 1C0h
.text:00402C59                 jz      short loc_402CD0
.text:00402C5B                 xor     eax, eax
.text:00402C5D                 test    dh, 1
.text:00402C60                 setz    al
.text:00402C63                 dec     eax
.text:00402C64                 and     eax, 24h
.text:00402C67                 test    dl, dl
.text:00402C69                 jns     short loc_402C6E
.text:00402C6B                 or      eax, 12h
.text:00402C6E
.text:00402C6E loc_402C6E:                             ; CODE XREF: sub_402C20+49↑j
.text:00402C6E                 test    dl, 40h
.text:00402C71                 jz      short loc_402C80
.text:00402C73                 or      eax, 9
.text:00402C76                 lea     esi, [esi+0]
.text:00402C79                 lea     edi, [edi+0]
.text:00402C80
.text:00402C80 loc_402C80:                             ; CODE XREF: sub_402C20+51↑j
.text:00402C80                                         ; sub_402C20+CF↓j ...
.text:00402C80                 or      eax, edx
.text:00402C82                 movzx   edx, ax
.text:00402C85                 movzx   eax, word ptr [ecx+2]
.text:00402C89                 and     edx, eax
.text:00402C8B
.text:00402C8B loc_402C8B:                             ; CODE XREF: sub_402C20+106↓j
.text:00402C8B                                         ; sub_402C20+118↓j ...
.text:00402C8B                 movsx   eax, byte ptr [ecx]
.text:00402C8E                 cmp     eax, 2Dh ; '-'
.text:00402C91                 jz      short loc_402CC3
.text:00402C93                 cmp     eax, 2Dh ; '-'
.text:00402C96                 jg      short loc_402CB4
.text:00402C98                 cmp     eax, 2Bh ; '+'
.text:00402C9B                 jz      short loc_402CB0
.text:00402C9D                 lea     esi, [esi+0]
.text:00402CA0
.text:00402CA0 loc_402CA0:                             ; CODE XREF: sub_402C20+92↓j
.text:00402CA0                                         ; sub_402C20+97↓j ...
.text:00402CA0                 mov     ecx, [ecx+8]
.text:00402CA3                 test    ecx, ecx
.text:00402CA5                 jnz     short loc_402C40
.text:00402CA7
.text:00402CA7 loc_402CA7:                             ; CODE XREF: sub_402C20+15↑j
.text:00402CA7                 mov     eax, ebx
.text:00402CA9                 pop     ebx
.text:00402CAA                 pop     esi
.text:00402CAB                 retn
.text:00402CAB ; ---------------------------------------------------------------------------
.text:00402CAC                 align 10h
.text:00402CB0
.text:00402CB0 loc_402CB0:                             ; CODE XREF: sub_402C20+7B↑j
.text:00402CB0                                         ; sub_402C20+A1↓j
.text:00402CB0                 or      ebx, edx
.text:00402CB2                 jmp     short loc_402CA0
.text:00402CB4 ; ---------------------------------------------------------------------------
.text:00402CB4
.text:00402CB4 loc_402CB4:                             ; CODE XREF: sub_402C20+76↑j
.text:00402CB4                 cmp     eax, 3Dh ; '='
.text:00402CB7                 jnz     short loc_402CA0
.text:00402CB9                 movzx   eax, word ptr [ecx+2]
.text:00402CBD                 not     eax
.text:00402CBF                 and     ebx, eax
.text:00402CC1                 jmp     short loc_402CB0
.text:00402CC3 ; ---------------------------------------------------------------------------
.text:00402CC3
.text:00402CC3 loc_402CC3:                             ; CODE XREF: sub_402C20+71↑j
.text:00402CC3                 not     edx
.text:00402CC5                 and     ebx, edx
.text:00402CC7                 jmp     short loc_402CA0
.text:00402CC7 ; ---------------------------------------------------------------------------
.text:00402CC9                 align 10h
.text:00402CD0
.text:00402CD0 loc_402CD0:                             ; CODE XREF: sub_402C20+39↑j
.text:00402CD0                 test    al, 38h
.text:00402CD2                 jz      short loc_402CF6
.text:00402CD4                 xor     eax, eax
.text:00402CD6                 test    dl, 20h
.text:00402CD9                 setz    al
.text:00402CDC                 dec     eax
.text:00402CDD                 and     eax, 104h
.text:00402CE2                 test    dl, 10h
.text:00402CE5                 jz      short loc_402CEC
.text:00402CE7                 or      eax, 82h
.text:00402CEC
.text:00402CEC loc_402CEC:                             ; CODE XREF: sub_402C20+C5↑j
.text:00402CEC                 test    dl, 8
.text:00402CEF                 jz      short loc_402C80
.text:00402CF1                 or      eax, 41h
.text:00402CF4                 jmp     short loc_402C80
.text:00402CF6 ; ---------------------------------------------------------------------------
.text:00402CF6
.text:00402CF6 loc_402CF6:                             ; CODE XREF: sub_402C20+B2↑j
.text:00402CF6                 xor     eax, eax
.text:00402CF8                 test    dl, 4
.text:00402CFB                 setz    al
.text:00402CFE                 dec     eax
.text:00402CFF                 and     eax, 120h
.text:00402D04                 test    dl, 2
.text:00402D07                 jz      short loc_402D0E
.text:00402D09                 or      eax, 90h
.text:00402D0E
.text:00402D0E loc_402D0E:                             ; CODE XREF: sub_402C20+E7↑j
.text:00402D0E                 test    dl, 1
.text:00402D11                 jz      loc_402C80
.text:00402D17                 or      eax, 48h
.text:00402D1A                 jmp     loc_402C80
.text:00402D1A ; ---------------------------------------------------------------------------
.text:00402D1F                 align 10h
.text:00402D20
.text:00402D20 loc_402D20:                             ; CODE XREF: sub_402C20+26↑j
.text:00402D20                 movzx   edx, word ptr [ecx+4]
.text:00402D24                 test    al, 1
.text:00402D26                 jz      loc_402C8B
.text:00402D2C                 mov     eax, esi
.text:00402D2E                 and     eax, 0F000h
.text:00402D33                 cmp     eax, 4000h
.text:00402D38                 jz      loc_402C8B
.text:00402D3E                 test    bl, 49h
.text:00402D41                 jnz     loc_402C8B
.text:00402D47                 and     edx, 0FFB6h
.text:00402D4D                 jmp     loc_402C8B
.text:00402D4D sub_402C20      endp
.text:00402D4D
.text:00402D4D ; ---------------------------------------------------------------------------
.text:00402D52                 align 10h
.text:00402D60
.text:00402D60 ; =============== S U B R O U T I N E =======================================
.text:00402D60
.text:00402D60
.text:00402D60 ; int __cdecl sub_402D60(void *)
.text:00402D60 sub_402D60      proc near               ; CODE XREF: sub_402850+12E↑p
.text:00402D60                                         ; sub_402850+390↑p
.text:00402D60
.text:00402D60 Block           = dword ptr -0Ch
.text:00402D60 arg_0           = dword ptr  4
.text:00402D60
.text:00402D60                 push    ebx
.text:00402D61                 sub     esp, 8
.text:00402D64                 mov     eax, [esp+0Ch+arg_0]
.text:00402D68                 test    eax, eax
.text:00402D6A                 jz      short loc_402D81
.text:00402D6C                 lea     esi, [esi+0]
.text:00402D70
.text:00402D70 loc_402D70:                             ; CODE XREF: sub_402D60+1F↓j
.text:00402D70                 mov     ebx, [eax+8]
.text:00402D73                 mov     [esp+0Ch+Block], eax ; Block
.text:00402D76                 call    free
.text:00402D7B                 test    ebx, ebx
.text:00402D7D                 mov     eax, ebx
.text:00402D7F                 jnz     short loc_402D70
.text:00402D81
.text:00402D81 loc_402D81:                             ; CODE XREF: sub_402D60+A↑j
.text:00402D81                 add     esp, 8
.text:00402D84                 pop     ebx
.text:00402D85                 retn
.text:00402D85 sub_402D60      endp
.text:00402D85
.text:00402D85 ; ---------------------------------------------------------------------------
.text:00402D86                 align 10h
.text:00402D90                 sub     esp, 8Ch
.text:00402D96                 lea     edx, [esp+10h]
.text:00402D9A                 mov     [esp+4], edx
.text:00402D9E                 mov     edx, [esp+90h]
.text:00402DA5                 mov     [esp], edx
.text:00402DA8                 call    sub_407210
.text:00402DAD                 test    eax, eax
.text:00402DAF                 mov     ecx, 2
.text:00402DB4                 jz      short loc_402DC0
.text:00402DB6
.text:00402DB6 loc_402DB6:                             ; CODE XREF: .text:00402DD3↓j
.text:00402DB6                                         ; .text:00402DF3↓j
.text:00402DB6                 mov     eax, ecx
.text:00402DB8                 add     esp, 8Ch
.text:00402DBE                 retn
.text:00402DBE ; ---------------------------------------------------------------------------
.text:00402DBF                 align 10h
.text:00402DC0
.text:00402DC0 loc_402DC0:                             ; CODE XREF: .text:00402DB4↑j
.text:00402DC0                 mov     dword ptr [esp], 0Ch
.text:00402DC7                 call    malloc
.text:00402DCC                 test    eax, eax
.text:00402DCE                 mov     ecx, 1
.text:00402DD3                 jz      short loc_402DB6
.text:00402DD5                 mov     byte ptr [eax], 3Dh ; '='
.text:00402DD8                 mov     byte ptr [eax+1], 0
.text:00402DDC                 mov     ecx, [esp+10h]
.text:00402DE0                 mov     word ptr [eax+2], 0FFFh
.text:00402DE6                 mov     dword ptr [eax+8], 0
.text:00402DED                 mov     [eax+4], cx
.text:00402DF1                 mov     ecx, eax
.text:00402DF3                 jmp     short loc_402DB6
.text:00402DF3 ; ---------------------------------------------------------------------------
.text:00402DF5                 align 10h
.text:00402E00
.text:00402E00 ; =============== S U B R O U T I N E =======================================
.text:00402E00
.text:00402E00
.text:00402E00 ; int __cdecl sub_402E00(char *, int, int)
.text:00402E00 sub_402E00      proc near               ; CODE XREF: sub_401E50+D1↑p
.text:00402E00                                         ; sub_401E50+30E↑p ...
.text:00402E00
.text:00402E00 FileName        = dword ptr -9Ch
.text:00402E00 OpenFlag        = dword ptr -98h
.text:00402E00 var_94          = dword ptr -94h
.text:00402E00 var_8C          = dword ptr -8Ch
.text:00402E00 var_70          = dword ptr -70h
.text:00402E00 var_6C          = dword ptr -6Ch
.text:00402E00 var_10          = dword ptr -10h
.text:00402E00 var_C           = dword ptr -0Ch
.text:00402E00 var_8           = dword ptr -8
.text:00402E00 var_4           = dword ptr -4
.text:00402E00 arg_0           = dword ptr  4
.text:00402E00 arg_4           = dword ptr  8
.text:00402E00 arg_8           = dword ptr  0Ch
.text:00402E00
.text:00402E00                 sub     esp, 9Ch
.text:00402E06                 mov     [esp+9Ch+var_10], ebx
.text:00402E0D                 mov     ebx, [esp+9Ch+arg_8]
.text:00402E14                 mov     [esp+9Ch+var_8], edi
.text:00402E1B                 mov     edi, [esp+9Ch+arg_4]
.text:00402E22                 cmp     ebx, 0FFFFFFFFh
.text:00402E25                 mov     [esp+9Ch+var_4], ebp
.text:00402E2C                 mov     ebp, [esp+9Ch+arg_0]
.text:00402E33                 mov     [esp+9Ch+var_C], esi
.text:00402E3A                 jz      loc_402EE0
.text:00402E40                 cmp     edi, 0FFFFFFFFh
.text:00402E43                 jz      loc_402EE0
.text:00402E49
.text:00402E49 loc_402E49:                             ; CODE XREF: sub_402E00+101↓j
.text:00402E49                                         ; sub_402E00+10B↓j
.text:00402E49                 mov     [esp+9Ch+OpenFlag], 4 ; OpenFlag
.text:00402E51                 mov     [esp+9Ch+FileName], ebp ; FileName
.text:00402E54                 call    _open
.text:00402E59                 test    eax, eax
.text:00402E5B                 mov     esi, eax
.text:00402E5D                 js      short loc_402EC0
.text:00402E5F
.text:00402E5F loc_402E5F:                             ; CODE XREF: sub_402E00+D9↓j
.text:00402E5F                 mov     [esp+9Ch+var_94], ebx
.text:00402E63                 mov     [esp+9Ch+OpenFlag], edi
.text:00402E67                 mov     [esp+9Ch+FileName], esi
.text:00402E6A                 call    sub_407350
.text:00402E6F                 test    eax, eax
.text:00402E71                 jnz     short loc_402EA2
.text:00402E73                 mov     [esp+9Ch+FileName], esi ; FileHandle
.text:00402E76                 call    _close
.text:00402E7B                 mov     edx, eax
.text:00402E7D
.text:00402E7D loc_402E7D:                             ; CODE XREF: sub_402E00+BD↓j
.text:00402E7D                                         ; sub_402E00+DB↓j ...
.text:00402E7D                 mov     ebx, [esp+9Ch+var_10]
.text:00402E84                 mov     eax, edx
.text:00402E86                 mov     esi, [esp+9Ch+var_C]
.text:00402E8D                 mov     edi, [esp+9Ch+var_8]
.text:00402E94                 mov     ebp, [esp+9Ch+var_4]
.text:00402E9B                 add     esp, 9Ch
.text:00402EA1                 retn
.text:00402EA2 ; ---------------------------------------------------------------------------
.text:00402EA2
.text:00402EA2 loc_402EA2:                             ; CODE XREF: sub_402E00+71↑j
.text:00402EA2                 call    _errno
.text:00402EA7                 mov     edi, [eax]
.text:00402EA9                 mov     [esp+9Ch+FileName], esi ; FileHandle
.text:00402EAC                 call    _close
.text:00402EB1                 call    _errno
.text:00402EB6                 mov     [eax], edi
.text:00402EB8                 mov     edx, 0FFFFFFFFh
.text:00402EBD                 jmp     short loc_402E7D
.text:00402EBD ; ---------------------------------------------------------------------------
.text:00402EBF                 align 10h
.text:00402EC0
.text:00402EC0 loc_402EC0:                             ; CODE XREF: sub_402E00+5D↑j
.text:00402EC0                 mov     [esp+9Ch+OpenFlag], 5 ; OpenFlag
.text:00402EC8                 mov     [esp+9Ch+FileName], ebp ; FileName
.text:00402ECB                 call    _open
.text:00402ED0                 test    eax, eax
.text:00402ED2                 mov     esi, eax
.text:00402ED4                 mov     edx, 0FFFFFFFFh
.text:00402ED9                 jns     short loc_402E5F
.text:00402EDB                 jmp     short loc_402E7D
.text:00402EDB ; ---------------------------------------------------------------------------
.text:00402EDD                 align 10h
.text:00402EE0
.text:00402EE0 loc_402EE0:                             ; CODE XREF: sub_402E00+3A↑j
.text:00402EE0                                         ; sub_402E00+43↑j
.text:00402EE0                 mov     [esp+9Ch+FileName], ebp ; char *
.text:00402EE3                 lea     edx, [esp+9Ch+var_8C]
.text:00402EE7                 mov     [esp+9Ch+OpenFlag], edx ; int
.text:00402EEB                 call    sub_407210
.text:00402EF0                 test    eax, eax
.text:00402EF2                 mov     edx, 1
.text:00402EF7                 jnz     short loc_402E7D
.text:00402EF9                 cmp     ebx, 0FFFFFFFFh
.text:00402EFC                 jz      short loc_402F10
.text:00402EFE
.text:00402EFE loc_402EFE:                             ; CODE XREF: sub_402E00+114↓j
.text:00402EFE                 cmp     edi, 0FFFFFFFFh
.text:00402F01                 jnz     loc_402E49
.text:00402F07                 mov     edi, [esp+9Ch+var_70]
.text:00402F0B                 jmp     loc_402E49
.text:00402F10 ; ---------------------------------------------------------------------------
.text:00402F10
.text:00402F10 loc_402F10:                             ; CODE XREF: sub_402E00+FC↑j
.text:00402F10                 mov     ebx, [esp+9Ch+var_6C]
.text:00402F14                 jmp     short loc_402EFE
.text:00402F14 sub_402E00      endp
.text:00402F14
.text:00402F14 ; ---------------------------------------------------------------------------
.text:00402F16                 align 10h
.text:00402F20 dword_402F20    dd 90002D2Dh, 7 dup(90909090h)
.text:00402F20                                         ; DATA XREF: sub_403170+E4↓o
.text:00402F40 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402F40                                         ; DATA XREF: sub_403170+2FC↓o
.text:00402F6D                 align 20h
.text:00402F80 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402F80                                         ; DATA XREF: sub_403170:loc_4034D2↓o
.text:00402FAD                 align 20h
.text:00402FC0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00402FC0                                         ; DATA XREF: sub_403170:loc_403570↓o
.text:00402FC0                                         ; sub_403170:loc_403937↓o
.text:00402FE6                 align 20h
.text:00403000 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00403000                                         ; DATA XREF: sub_403170+48E↓o
.text:00403020 dword_403020    dd 90909000h, 7 dup(90909090h)
.text:00403020                                         ; DATA XREF: sub_403170:loc_403641↓o
.text:00403040 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00403040                                         ; DATA XREF: sub_403170:loc_40365A↓o
.text:00403060 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00403060                                         ; DATA XREF: sub_403170:loc_40373F↓o
.text:00403060                                         ; sub_403170:loc_403A6C↓o
.text:00403087                 align 20h
.text:004030A0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004030A0                                         ; DATA XREF: sub_403170:loc_4038B3↓o
.text:004030CE                 align 20h
.text:004030E0 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:004030E0                                         ; DATA XREF: sub_403170:loc_40399F↓o
.text:00403101 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00403101                                         ; DATA XREF: sub_403170+93F↓o
.text:0040311B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040311B                                         ; DATA XREF: sub_403170:loc_403AE7↓o
.text:00403135 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00403135                                         ; DATA XREF: sub_403170:loc_403B0E↓o
.text:00403153 ; const char VarName[]
.text:00403153 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_403170:loc_403CC0↓o
.text:00403163                 align 10h
.text:00403170
.text:00403170 ; =============== S U B R O U T I N E =======================================
.text:00403170
.text:00403170
.text:00403170 ; int __cdecl sub_403170(int, int, char *Str, int, int, int, int, int)
.text:00403170 sub_403170      proc near               ; CODE XREF: sub_403D00+5A↓p
.text:00403170                                         ; .text:00403DEA↓p ...
.text:00403170
.text:00403170 Str1            = dword ptr -5Ch
.text:00403170 Str2            = dword ptr -58h
.text:00403170 MaxCount        = dword ptr -54h
.text:00403170 var_50          = dword ptr -50h
.text:00403170 var_4C          = dword ptr -4Ch
.text:00403170 var_3C          = dword ptr -3Ch
.text:00403170 var_38          = dword ptr -38h
.text:00403170 var_34          = dword ptr -34h
.text:00403170 var_30          = dword ptr -30h
.text:00403170 var_2C          = dword ptr -2Ch
.text:00403170 var_28          = dword ptr -28h
.text:00403170 var_24          = dword ptr -24h
.text:00403170 var_20          = dword ptr -20h
.text:00403170 var_1C          = dword ptr -1Ch
.text:00403170 var_18          = dword ptr -18h
.text:00403170 var_14          = dword ptr -14h
.text:00403170 arg_0           = dword ptr  4
.text:00403170 arg_4           = dword ptr  8
.text:00403170 Str             = dword ptr  0Ch
.text:00403170 arg_C           = dword ptr  10h
.text:00403170 arg_10          = dword ptr  14h
.text:00403170 arg_14          = dword ptr  18h
.text:00403170 arg_18          = dword ptr  1Ch
.text:00403170 arg_1C          = dword ptr  20h
.text:00403170
.text:00403170                 push    ebp
.text:00403171                 mov     eax, 0FFFFFFFFh
.text:00403176                 push    edi
.text:00403177                 push    esi
.text:00403178                 push    ebx
.text:00403179                 sub     esp, 4Ch
.text:0040317C                 mov     esi, [esp+5Ch+Str]
.text:00403180                 mov     ebp, [esp+5Ch+arg_1C]
.text:00403184                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00403187                 mov     ebx, [ebp+4]
.text:0040318A                 setz    dl
.text:0040318D                 movzx   ecx, dl
.text:00403190                 dec     ecx
.text:00403191                 and     ecx, ebx
.text:00403193                 mov     [esp+5Ch+var_14], ecx
.text:00403197                 mov     ecx, [esp+5Ch+arg_0]
.text:0040319B                 test    ecx, ecx
.text:0040319D                 jle     loc_4032C7
.text:004031A3                 mov     dword ptr [ebp+0Ch], 0
.text:004031AA                 mov     ebx, [ebp+0]
.text:004031AD                 test    ebx, ebx
.text:004031AF                 jz      loc_403CE0
.text:004031B5                 mov     edi, [ebp+10h]
.text:004031B8                 test    edi, edi
.text:004031BA                 jnz     short loc_403213
.text:004031BC                 lea     esi, [esi+0]
.text:004031C0
.text:004031C0 loc_4031C0:                             ; CODE XREF: sub_403170+B7C↓j
.text:004031C0                 mov     [ebp+24h], ebx
.text:004031C3                 mov     esi, [esp+5Ch+Str]
.text:004031C7                 mov     [ebp+20h], ebx
.text:004031CA                 mov     ecx, [esp+5Ch+arg_18]
.text:004031CE                 xor     ebx, ebx
.text:004031D0                 mov     dword ptr [ebp+14h], 0
.text:004031D7                 test    ecx, ecx
.text:004031D9                 jz      loc_403CC0
.text:004031DF
.text:004031DF loc_4031DF:                             ; CODE XREF: sub_403170+B64↓j
.text:004031DF                 mov     ebx, 1
.text:004031E4
.text:004031E4 loc_4031E4:                             ; CODE XREF: sub_403170+B5E↓j
.text:004031E4                 mov     [ebp+1Ch], ebx
.text:004031E7                 mov     ecx, [esp+5Ch+Str]
.text:004031EB                 movzx   eax, byte ptr [ecx]
.text:004031EE                 cmp     al, 2Dh ; '-'
.text:004031F0                 jz      loc_403CB0
.text:004031F6                 cmp     al, 2Bh ; '+'
.text:004031F8                 jz      loc_403C99
.text:004031FE                 xor     edx, edx
.text:00403200                 test    ebx, ebx
.text:00403202                 setz    dl
.text:00403205                 mov     [ebp+18h], edx
.text:00403208
.text:00403208 loc_403208:                             ; CODE XREF: sub_403170+B35↓j
.text:00403208                 mov     [esp+5Ch+Str], esi
.text:0040320C                 mov     dword ptr [ebp+10h], 1
.text:00403213
.text:00403213 loc_403213:                             ; CODE XREF: sub_403170+4A↑j
.text:00403213                 mov     eax, [ebp+14h]
.text:00403216                 test    eax, eax
.text:00403218                 jz      short loc_403223
.text:0040321A                 cmp     byte ptr [eax], 0
.text:0040321D                 jnz     loc_403300
.text:00403223
.text:00403223 loc_403223:                             ; CODE XREF: sub_403170+A8↑j
.text:00403223                 mov     ebx, [ebp+0]
.text:00403226                 cmp     [ebp+24h], ebx
.text:00403229                 jle     short loc_40322E
.text:0040322B                 mov     [ebp+24h], ebx
.text:0040322E
.text:0040322E loc_40322E:                             ; CODE XREF: sub_403170+B9↑j
.text:0040322E                 cmp     [ebp+20h], ebx
.text:00403231                 jle     short loc_403236
.text:00403233                 mov     [ebp+20h], ebx
.text:00403236
.text:00403236 loc_403236:                             ; CODE XREF: sub_403170+C1↑j
.text:00403236                 cmp     dword ptr [ebp+18h], 1
.text:0040323A                 jz      loc_403C10
.text:00403240
.text:00403240 loc_403240:                             ; CODE XREF: sub_403170+B13↓j
.text:00403240                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403244                 jz      loc_403BF4
.text:0040324A                 cld
.text:0040324B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040324F                 mov     edx, 3
.text:00403254                 mov     edi, offset dword_402F20
.text:00403259                 mov     esi, [ecx+ebx*4]
.text:0040325C                 mov     ecx, edx
.text:0040325E                 repe cmpsb
.text:00403260                 jnz     short loc_40329C
.text:00403262                 mov     edx, [ebp+24h]
.text:00403265                 lea     eax, [ebx+1]
.text:00403268                 cmp     [ebp+20h], edx
.text:0040326B                 mov     [ebp+0], eax
.text:0040326E                 jz      loc_403C08
.text:00403274                 cmp     edx, eax
.text:00403276                 jz      short loc_403290
.text:00403278                 mov     [esp+5Ch+Str2], ebp
.text:0040327C                 mov     ebx, [esp+5Ch+arg_4]
.text:00403280                 mov     [esp+5Ch+Str1], ebx
.text:00403283                 call    sub_403E20
.text:00403288                 nop
.text:00403289                 lea     esi, [esi+0]
.text:00403290
.text:00403290 loc_403290:                             ; CODE XREF: sub_403170+106↑j
.text:00403290                                         ; sub_403170+A9B↓j
.text:00403290                 mov     eax, [esp+5Ch+arg_0]
.text:00403294                 mov     ebx, eax
.text:00403296                 mov     [ebp+24h], eax
.text:00403299                 mov     [ebp+0], eax
.text:0040329C
.text:0040329C loc_40329C:                             ; CODE XREF: sub_403170+F0↑j
.text:0040329C                 cmp     ebx, [esp+5Ch+arg_0]
.text:004032A0                 jz      loc_403BF4
.text:004032A6                 mov     esi, [esp+5Ch+arg_4]
.text:004032AA                 mov     eax, [esi+ebx*4]
.text:004032AD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004032B0                 jz      short loc_4032D7
.text:004032B2
.text:004032B2 loc_4032B2:                             ; CODE XREF: sub_403170+16D↓j
.text:004032B2                 mov     edx, [ebp+18h]
.text:004032B5                 test    edx, edx
.text:004032B7                 jz      short loc_4032D0
.text:004032B9                 mov     [ebp+0Ch], eax
.text:004032BC                 lea     edi, [ebx+1]
.text:004032BF                 mov     eax, 1
.text:004032C4                 mov     [ebp+0], edi
.text:004032C7
.text:004032C7 loc_4032C7:                             ; CODE XREF: sub_403170+2D↑j
.text:004032C7                                         ; sub_403170+165↓j ...
.text:004032C7                 add     esp, 4Ch
.text:004032CA                 pop     ebx
.text:004032CB                 pop     esi
.text:004032CC                 pop     edi
.text:004032CD                 pop     ebp
.text:004032CE                 retn
.text:004032CE ; ---------------------------------------------------------------------------
.text:004032CF                 align 10h
.text:004032D0
.text:004032D0 loc_4032D0:                             ; CODE XREF: sub_403170+147↑j
.text:004032D0                                         ; sub_403170+A8A↓j ...
.text:004032D0                 mov     eax, 0FFFFFFFFh
.text:004032D5                 jmp     short loc_4032C7
.text:004032D7 ; ---------------------------------------------------------------------------
.text:004032D7
.text:004032D7 loc_4032D7:                             ; CODE XREF: sub_403170+140↑j
.text:004032D7                 movzx   edx, byte ptr [eax+1]
.text:004032DB                 test    dl, dl
.text:004032DD                 jz      short loc_4032B2
.text:004032DF                 mov     ebx, [esp+5Ch+arg_C]
.text:004032E3                 xor     ecx, ecx
.text:004032E5                 test    ebx, ebx
.text:004032E7                 jz      short loc_4032F2
.text:004032E9                 cmp     dl, 2Dh ; '-'
.text:004032EC                 jz      loc_403BEA
.text:004032F2
.text:004032F2 loc_4032F2:                             ; CODE XREF: sub_403170+177↑j
.text:004032F2                                         ; sub_403170+A7F↓j
.text:004032F2                 lea     esi, [ecx+eax+1]
.text:004032F6                 mov     [ebp+14h], esi
.text:004032F9                 lea     esi, [esi+0]
.text:00403300
.text:00403300 loc_403300:                             ; CODE XREF: sub_403170+AD↑j
.text:00403300                 mov     ecx, [esp+5Ch+arg_C]
.text:00403304                 test    ecx, ecx
.text:00403306                 jz      loc_403690
.text:0040330C                 mov     edx, [ebp+0]
.text:0040330F                 mov     edi, [esp+5Ch+arg_4]
.text:00403313                 mov     eax, [edi+edx*4]
.text:00403316                 movzx   edx, byte ptr [eax+1]
.text:0040331A                 cmp     dl, 2Dh ; '-'
.text:0040331D                 jz      short loc_403335
.text:0040331F                 mov     ebx, [esp+5Ch+arg_14]
.text:00403323                 test    ebx, ebx
.text:00403325                 jz      loc_403690
.text:0040332B                 cmp     byte ptr [eax+2], 0
.text:0040332F                 jz      loc_403BCA
.text:00403335
.text:00403335 loc_403335:                             ; CODE XREF: sub_403170+1AD↑j
.text:00403335                                         ; sub_403170+A75↓j
.text:00403335                 mov     [esp+5Ch+var_18], 0
.text:0040333D                 mov     ecx, [ebp+14h]
.text:00403340                 mov     [esp+5Ch+var_1C], 0
.text:00403348                 mov     [esp+5Ch+var_20], 0
.text:00403350                 mov     edi, ecx
.text:00403352                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040335A                 movzx   eax, byte ptr [ecx]
.text:0040335D                 test    al, al
.text:0040335F                 jz      short loc_40337C
.text:00403361                 cmp     al, 3Dh ; '='
.text:00403363                 jz      short loc_40337C
.text:00403365                 lea     esi, [esi+0]
.text:00403369                 lea     edi, [edi+0]
.text:00403370
.text:00403370 loc_403370:                             ; CODE XREF: sub_403170+20A↓j
.text:00403370                 inc     edi
.text:00403371                 movzx   eax, byte ptr [edi]
.text:00403374                 test    al, al
.text:00403376                 jz      short loc_40337C
.text:00403378                 cmp     al, 3Dh ; '='
.text:0040337A                 jnz     short loc_403370
.text:0040337C
.text:0040337C loc_40337C:                             ; CODE XREF: sub_403170+1EF↑j
.text:0040337C                                         ; sub_403170+1F3↑j ...
.text:0040337C                 mov     [esp+5Ch+var_28], 0
.text:00403384                 mov     esi, [esp+5Ch+arg_C]
.text:00403388                 mov     ebx, [esi]
.text:0040338A                 test    ebx, ebx
.text:0040338C                 mov     edx, ebx
.text:0040338E                 jz      loc_4035B0
.text:00403394                 lea     esi, [esi+0]
.text:0040339A                 lea     edi, [edi+0]
.text:004033A0
.text:004033A0 loc_4033A0:                             ; CODE XREF: sub_403170+25E↓j
.text:004033A0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:004033A4                 mov     ebx, edi
.text:004033A6                 sub     ebx, ecx
.text:004033A8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:004033AC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004033AF                 call    strncmp
.text:004033B4                 test    eax, eax
.text:004033B6                 jz      loc_403B46
.text:004033BC
.text:004033BC loc_4033BC:                             ; CODE XREF: sub_403170+A0F↓j
.text:004033BC                                         ; sub_403170+A24↓j ...
.text:004033BC                 inc     [esp+5Ch+var_28]
.text:004033C0                 add     esi, 10h
.text:004033C3                 mov     ecx, [esi]
.text:004033C5                 test    ecx, ecx
.text:004033C7                 mov     edx, ecx
.text:004033C9                 jz      short loc_4033D0
.text:004033CB                 mov     ecx, [ebp+14h]
.text:004033CE                 jmp     short loc_4033A0
.text:004033D0 ; ---------------------------------------------------------------------------
.text:004033D0
.text:004033D0 loc_4033D0:                             ; CODE XREF: sub_403170+259↑j
.text:004033D0                                         ; sub_403170+A55↓j
.text:004033D0                 mov     esi, [esp+5Ch+var_20]
.text:004033D4                 test    esi, esi
.text:004033D6                 jz      short loc_4033E4
.text:004033D8                 mov     edx, [esp+5Ch+var_1C]
.text:004033DC                 test    edx, edx
.text:004033DE                 jz      loc_403AF0
.text:004033E4
.text:004033E4 loc_4033E4:                             ; CODE XREF: sub_403170+266↑j
.text:004033E4                 mov     eax, [esp+5Ch+var_18]
.text:004033E8                 test    eax, eax
.text:004033EA                 jz      loc_4035B0
.text:004033F0                 mov     ecx, [ebp+0]
.text:004033F3                 lea     eax, [ecx+1]
.text:004033F6                 mov     [ebp+0], eax
.text:004033F9                 cmp     byte ptr [edi], 0
.text:004033FC                 jz      loc_403510
.text:00403402                 mov     ecx, [esp+5Ch+var_18]
.text:00403406                 mov     esi, [ecx+4]
.text:00403409                 test    esi, esi
.text:0040340B                 jz      short loc_403456
.text:0040340D                 lea     ebx, [edi+1]
.text:00403410                 mov     [ebp+0Ch], ebx
.text:00403413
.text:00403413 loc_403413:                             ; CODE XREF: sub_403170+3A8↓j
.text:00403413                                         ; sub_403170+3C4↓j
.text:00403413                 mov     ebx, [ebp+14h]
.text:00403416                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00403419                 call    strlen
.text:0040341E                 add     [ebp+14h], eax
.text:00403421                 mov     esi, [esp+5Ch+arg_10]
.text:00403425                 test    esi, esi
.text:00403427                 jz      short loc_403433
.text:00403429                 mov     ebp, [esp+5Ch+var_24]
.text:0040342D                 mov     ecx, [esp+5Ch+arg_10]
.text:00403431                 mov     [ecx], ebp
.text:00403433
.text:00403433 loc_403433:                             ; CODE XREF: sub_403170+2B7↑j
.text:00403433                 mov     eax, [esp+5Ch+var_18]
.text:00403437                 mov     ecx, [eax+8]
.text:0040343A                 test    ecx, ecx
.text:0040343C                 jnz     short loc_40344A
.text:0040343E                 mov     ecx, [esp+5Ch+var_18]
.text:00403442
.text:00403442 loc_403442:                             ; CODE XREF: sub_403170+723↓j
.text:00403442                 mov     eax, [ecx+0Ch]
.text:00403445                 jmp     loc_4032C7
.text:0040344A ; ---------------------------------------------------------------------------
.text:0040344A
.text:0040344A loc_40344A:                             ; CODE XREF: sub_403170+2CC↑j
.text:0040344A                                         ; sub_403170+719↓j
.text:0040344A                 mov     esi, [eax+0Ch]
.text:0040344D                 xor     eax, eax
.text:0040344F                 mov     [ecx], esi
.text:00403451                 jmp     loc_4032C7
.text:00403456 ; ---------------------------------------------------------------------------
.text:00403456
.text:00403456 loc_403456:                             ; CODE XREF: sub_403170+29B↑j
.text:00403456                 mov     edi, [esp+5Ch+var_14]
.text:0040345A                 test    edi, edi
.text:0040345C                 jz      short loc_4034B0
.text:0040345E                 mov     esi, [esp+5Ch+arg_4]
.text:00403462                 mov     edx, [esi+eax*4-4]
.text:00403466                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040346A                 jz      short loc_4034D2
.text:0040346C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00403473                 call    ds:libintl_gettext
.text:00403479                 mov     edx, [esp+5Ch+var_18]
.text:0040347D                 mov     edi, [edx]
.text:0040347F                 mov     [esp+5Ch+var_4C], edi
.text:00403483                 mov     ebx, [ebp+0]
.text:00403486                 mov     edi, [esp+5Ch+arg_4]
.text:0040348A                 mov     ecx, [edi+ebx*4-4]
.text:0040348E                 movsx   esi, byte ptr [ecx]
.text:00403491                 mov     ecx, ds:_iob
.text:00403497                 add     ecx, 40h ; '@'
.text:0040349A                 mov     [esp+5Ch+var_50], esi
.text:0040349E                 mov     ebx, [edi]
.text:004034A0                 mov     [esp+5Ch+Str2], eax ; Format
.text:004034A4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004034A7                 mov     [esp+5Ch+MaxCount], ebx
.text:004034AB                 call    fprintf
.text:004034B0
.text:004034B0 loc_4034B0:                             ; CODE XREF: sub_403170+2EC↑j
.text:004034B0                                         ; sub_403170+398↓j
.text:004034B0                 mov     ecx, [ebp+14h]
.text:004034B3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004034B6                 call    strlen
.text:004034BB                 add     [ebp+14h], eax
.text:004034BE                 mov     eax, [esp+5Ch+var_18]
.text:004034C2                 mov     esi, [eax+0Ch]
.text:004034C5                 mov     [ebp+8], esi
.text:004034C8
.text:004034C8 loc_4034C8:                             ; CODE XREF: sub_403170+4E5↓j
.text:004034C8                                         ; sub_403170+73E↓j ...
.text:004034C8                 mov     eax, 3Fh ; '?'
.text:004034CD                 jmp     loc_4032C7
.text:004034D2 ; ---------------------------------------------------------------------------
.text:004034D2
.text:004034D2 loc_4034D2:                             ; CODE XREF: sub_403170+2FA↑j
.text:004034D2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:004034D9                 call    ds:libintl_gettext
.text:004034DF                 mov     edx, [esp+5Ch+var_18]
.text:004034E3                 mov     edi, [esp+5Ch+arg_4]
.text:004034E7                 mov     ecx, ds:_iob
.text:004034ED                 mov     esi, [edx]
.text:004034EF                 add     ecx, 40h ; '@'
.text:004034F2                 mov     [esp+5Ch+var_50], esi
.text:004034F6                 mov     ebx, [edi]
.text:004034F8                 mov     [esp+5Ch+Str2], eax ; Format
.text:004034FC                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004034FF                 mov     [esp+5Ch+MaxCount], ebx
.text:00403503                 call    fprintf
.text:00403508                 jmp     short loc_4034B0
.text:00403508 ; ---------------------------------------------------------------------------
.text:0040350A                 align 10h
.text:00403510
.text:00403510 loc_403510:                             ; CODE XREF: sub_403170+28C↑j
.text:00403510                 mov     ebx, [esp+5Ch+var_18]
.text:00403514                 cmp     dword ptr [ebx+4], 1
.text:00403518                 jnz     loc_403413
.text:0040351E                 cmp     eax, [esp+5Ch+arg_0]
.text:00403522                 jge     short loc_403539
.text:00403524                 mov     ebx, [esp+5Ch+arg_4]
.text:00403528                 lea     edi, [ecx+2]
.text:0040352B                 mov     [ebp+0], edi
.text:0040352E                 mov     esi, [ebx+eax*4]
.text:00403531                 mov     [ebp+0Ch], esi
.text:00403534                 jmp     loc_403413
.text:00403539 ; ---------------------------------------------------------------------------
.text:00403539
.text:00403539 loc_403539:                             ; CODE XREF: sub_403170+3B2↑j
.text:00403539                 mov     edx, [esp+5Ch+var_14]
.text:0040353D                 test    edx, edx
.text:0040353F                 jnz     short loc_403570
.text:00403541
.text:00403541 loc_403541:                             ; CODE XREF: sub_403170+437↓j
.text:00403541                 mov     edx, [ebp+14h]
.text:00403544                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403547                 call    strlen
.text:0040354C                 add     [ebp+14h], eax
.text:0040354F                 mov     eax, [esp+5Ch+var_18]
.text:00403553                 mov     edi, [eax+0Ch]
.text:00403556                 mov     [ebp+8], edi
.text:00403559
.text:00403559 loc_403559:                             ; CODE XREF: sub_403170+7C2↓j
.text:00403559                 mov     ebp, [esp+5Ch+Str]
.text:0040355D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00403561                 setnz   bl
.text:00403564                 movzx   esi, bl
.text:00403567                 lea     eax, [esi+esi*4+3Ah]
.text:0040356B                 jmp     loc_4032C7
.text:00403570 ; ---------------------------------------------------------------------------
.text:00403570
.text:00403570 loc_403570:                             ; CODE XREF: sub_403170+3CF↑j
.text:00403570                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00403577                 call    ds:libintl_gettext
.text:0040357D                 mov     ecx, [ebp+0]
.text:00403580                 mov     esi, [esp+5Ch+arg_4]
.text:00403584                 mov     ebx, [esi+ecx*4-4]
.text:00403588                 mov     ecx, ds:_iob
.text:0040358E                 mov     [esp+5Ch+var_50], ebx
.text:00403592                 mov     edi, [esi]
.text:00403594                 add     ecx, 40h ; '@'
.text:00403597                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040359B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040359E                 mov     [esp+5Ch+MaxCount], edi
.text:004035A2                 call    fprintf
.text:004035A7                 jmp     short loc_403541
.text:004035A7 ; ---------------------------------------------------------------------------
.text:004035A9                 align 10h
.text:004035B0
.text:004035B0 loc_4035B0:                             ; CODE XREF: sub_403170+21E↑j
.text:004035B0                                         ; sub_403170+27A↑j
.text:004035B0                 mov     eax, [esp+5Ch+arg_14]
.text:004035B4                 test    eax, eax
.text:004035B6                 jz      short loc_4035E6
.text:004035B8                 mov     ebx, [ebp+0]
.text:004035BB                 mov     esi, [esp+5Ch+arg_4]
.text:004035BF                 mov     edi, [esi+ebx*4]
.text:004035C2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004035C6                 jz      short loc_4035E9
.text:004035C8                 mov     ecx, [ebp+14h]
.text:004035CB                 mov     edx, [esp+5Ch+Str]
.text:004035CF                 movsx   ebx, byte ptr [ecx]
.text:004035D2                 mov     [esp+5Ch+Str1], edx ; Str
.text:004035D5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:004035D9                 call    strchr
.text:004035DE                 test    eax, eax
.text:004035E0                 jnz     loc_403690
.text:004035E6
.text:004035E6 loc_4035E6:                             ; CODE XREF: sub_403170+446↑j
.text:004035E6                 mov     ebx, [ebp+0]
.text:004035E9
.text:004035E9 loc_4035E9:                             ; CODE XREF: sub_403170+456↑j
.text:004035E9                 mov     eax, [esp+5Ch+var_14]
.text:004035ED                 test    eax, eax
.text:004035EF                 jz      short loc_403641
.text:004035F1                 mov     esi, [esp+5Ch+arg_4]
.text:004035F5                 mov     edi, [esi+ebx*4]
.text:004035F8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004035FC                 jz      short loc_40365A
.text:004035FE                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00403605                 call    ds:libintl_gettext
.text:0040360B                 mov     edi, [ebp+14h]
.text:0040360E                 mov     [esp+5Ch+var_4C], edi
.text:00403612                 mov     ebx, [ebp+0]
.text:00403615                 mov     edi, [esp+5Ch+arg_4]
.text:00403619                 mov     esi, [edi+ebx*4]
.text:0040361C                 movsx   ecx, byte ptr [esi]
.text:0040361F                 mov     esi, ds:_iob
.text:00403625                 add     esi, 40h ; '@'
.text:00403628                 mov     [esp+5Ch+var_50], ecx
.text:0040362C                 mov     ebx, [edi]
.text:0040362E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403632                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00403635                 mov     [esp+5Ch+MaxCount], ebx
.text:00403639                 call    fprintf
.text:0040363E
.text:0040363E loc_40363E:                             ; CODE XREF: sub_403170+51D↓j
.text:0040363E                 mov     ebx, [ebp+0]
.text:00403641
.text:00403641 loc_403641:                             ; CODE XREF: sub_403170+47F↑j
.text:00403641                 mov     dword ptr [ebp+14h], offset dword_403020
.text:00403648                 lea     edx, [ebx+1]
.text:0040364B                 mov     [ebp+0], edx
.text:0040364E
.text:0040364E loc_40364E:                             ; CODE XREF: sub_403170+999↓j
.text:0040364E                 mov     dword ptr [ebp+8], 0
.text:00403655                 jmp     loc_4034C8
.text:0040365A ; ---------------------------------------------------------------------------
.text:0040365A
.text:0040365A loc_40365A:                             ; CODE XREF: sub_403170+48C↑j
.text:0040365A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00403661                 call    ds:libintl_gettext
.text:00403667                 mov     ecx, [ebp+14h]
.text:0040366A                 mov     edi, [esp+5Ch+arg_4]
.text:0040366E                 mov     edx, ds:_iob
.text:00403674                 mov     [esp+5Ch+var_50], ecx
.text:00403678                 mov     ebx, [edi]
.text:0040367A                 add     edx, 40h ; '@'
.text:0040367D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403681                 mov     [esp+5Ch+MaxCount], ebx
.text:00403685                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00403688                 call    fprintf
.text:0040368D                 jmp     short loc_40363E
.text:0040368D ; ---------------------------------------------------------------------------
.text:0040368F                 align 10h
.text:00403690
.text:00403690 loc_403690:                             ; CODE XREF: sub_403170+196↑j
.text:00403690                                         ; sub_403170+1B5↑j ...
.text:00403690                 mov     esi, [ebp+14h]
.text:00403693                 movzx   ebx, byte ptr [esi]
.text:00403696                 inc     esi
.text:00403697                 mov     [ebp+14h], esi
.text:0040369A                 mov     ecx, [esp+5Ch+Str]
.text:0040369E                 movsx   esi, bl
.text:004036A1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004036A5                 mov     edi, esi
.text:004036A7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004036AA                 call    strchr
.text:004036AF                 mov     ecx, [ebp+14h]
.text:004036B2                 cmp     byte ptr [ecx], 0
.text:004036B5                 jnz     short loc_4036BA
.text:004036B7                 inc     dword ptr [ebp+0]
.text:004036BA
.text:004036BA loc_4036BA:                             ; CODE XREF: sub_403170+545↑j
.text:004036BA                 test    eax, eax
.text:004036BC                 jz      loc_403AA0
.text:004036C2                 cmp     bl, 3Ah ; ':'
.text:004036C5                 jz      loc_403AA0
.text:004036CB                 cmp     byte ptr [eax], 57h ; 'W'
.text:004036CE                 jz      loc_403786
.text:004036D4                 movzx   edx, byte ptr [eax+1]
.text:004036D8
.text:004036D8 loc_4036D8:                             ; CODE XREF: sub_403170+61D↓j
.text:004036D8                 cmp     dl, 3Ah ; ':'
.text:004036DB                 jz      short loc_4036E4
.text:004036DD
.text:004036DD loc_4036DD:                             ; CODE XREF: sub_403170+590↓j
.text:004036DD                 mov     eax, esi
.text:004036DF                 jmp     loc_4032C7
.text:004036E4 ; ---------------------------------------------------------------------------
.text:004036E4
.text:004036E4 loc_4036E4:                             ; CODE XREF: sub_403170+56B↑j
.text:004036E4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:004036E8                 jz      loc_403771
.text:004036EE                 cmp     byte ptr [ecx], 0
.text:004036F1                 jz      short loc_403702
.text:004036F3
.text:004036F3 loc_4036F3:                             ; CODE XREF: sub_403170+604↓j
.text:004036F3                 inc     dword ptr [ebp+0]
.text:004036F6                 mov     [ebp+0Ch], ecx
.text:004036F9
.text:004036F9 loc_4036F9:                             ; CODE XREF: sub_403170+5AB↓j
.text:004036F9                                         ; sub_403170+5C6↓j ...
.text:004036F9                 mov     dword ptr [ebp+14h], 0
.text:00403700                 jmp     short loc_4036DD
.text:00403702 ; ---------------------------------------------------------------------------
.text:00403702
.text:00403702 loc_403702:                             ; CODE XREF: sub_403170+581↑j
.text:00403702                 mov     ecx, [ebp+0]
.text:00403705                 cmp     ecx, [esp+5Ch+arg_0]
.text:00403709                 jz      short loc_40371D
.text:0040370B                 mov     eax, [esp+5Ch+arg_4]
.text:0040370F                 lea     edx, [ecx+1]
.text:00403712                 mov     [ebp+0], edx
.text:00403715                 mov     ebx, [eax+ecx*4]
.text:00403718                 mov     [ebp+0Ch], ebx
.text:0040371B                 jmp     short loc_4036F9
.text:0040371D ; ---------------------------------------------------------------------------
.text:0040371D
.text:0040371D loc_40371D:                             ; CODE XREF: sub_403170+599↑j
.text:0040371D                 mov     ecx, [esp+5Ch+var_14]
.text:00403721                 test    ecx, ecx
.text:00403723                 jnz     short loc_40373F
.text:00403725
.text:00403725 loc_403725:                             ; CODE XREF: sub_403170+5FF↓j
.text:00403725                 mov     [ebp+8], edi
.text:00403728                 mov     edi, [esp+5Ch+Str]
.text:0040372C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040372F                 jz      short loc_403738
.text:00403731                 mov     esi, 3Fh ; '?'
.text:00403736                 jmp     short loc_4036F9
.text:00403738 ; ---------------------------------------------------------------------------
.text:00403738
.text:00403738 loc_403738:                             ; CODE XREF: sub_403170+5BF↑j
.text:00403738                 mov     esi, 3Ah ; ':'
.text:0040373D                 jmp     short loc_4036F9
.text:0040373F ; ---------------------------------------------------------------------------
.text:0040373F
.text:0040373F loc_40373F:                             ; CODE XREF: sub_403170+5B3↑j
.text:0040373F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00403746                 call    ds:libintl_gettext
.text:0040374C                 mov     [esp+5Ch+var_50], edi
.text:00403750                 mov     ebx, [esp+5Ch+arg_4]
.text:00403754                 mov     edx, ds:_iob
.text:0040375A                 mov     esi, [ebx]
.text:0040375C                 add     edx, 40h ; '@'
.text:0040375F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403763                 mov     [esp+5Ch+MaxCount], esi
.text:00403767                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040376A                 call    fprintf
.text:0040376F                 jmp     short loc_403725
.text:00403771 ; ---------------------------------------------------------------------------
.text:00403771
.text:00403771 loc_403771:                             ; CODE XREF: sub_403170+578↑j
.text:00403771                 cmp     byte ptr [ecx], 0
.text:00403774                 jnz     loc_4036F3
.text:0040377A                 mov     dword ptr [ebp+0Ch], 0
.text:00403781                 jmp     loc_4036F9
.text:00403786 ; ---------------------------------------------------------------------------
.text:00403786
.text:00403786 loc_403786:                             ; CODE XREF: sub_403170+55E↑j
.text:00403786                 movzx   edx, byte ptr [eax+1]
.text:0040378A                 cmp     dl, 3Bh ; ';'
.text:0040378D                 jnz     loc_4036D8
.text:00403793                 mov     [esp+5Ch+var_2C], 0
.text:0040379B                 mov     [esp+5Ch+var_30], 0
.text:004037A3                 mov     [esp+5Ch+var_34], 0
.text:004037AB                 mov     [esp+5Ch+var_38], 0
.text:004037B3                 cmp     byte ptr [ecx], 0
.text:004037B6                 jz      loc_403A2B
.text:004037BC                 inc     dword ptr [ebp+0]
.text:004037BF                 mov     [ebp+0Ch], ecx
.text:004037C2
.text:004037C2 loc_4037C2:                             ; CODE XREF: sub_403170+8D4↓j
.text:004037C2                 mov     edi, [ebp+0Ch]
.text:004037C5                 mov     [ebp+14h], edi
.text:004037C8                 movzx   eax, byte ptr [edi]
.text:004037CB                 test    al, al
.text:004037CD                 jz      short loc_4037DF
.text:004037CF                 cmp     al, 3Dh ; '='
.text:004037D1                 jz      short loc_4037DF
.text:004037D3
.text:004037D3 loc_4037D3:                             ; CODE XREF: sub_403170+66D↓j
.text:004037D3                 inc     edi
.text:004037D4                 movzx   eax, byte ptr [edi]
.text:004037D7                 test    al, al
.text:004037D9                 jz      short loc_4037DF
.text:004037DB                 cmp     al, 3Dh ; '='
.text:004037DD                 jnz     short loc_4037D3
.text:004037DF
.text:004037DF loc_4037DF:                             ; CODE XREF: sub_403170+65D↑j
.text:004037DF                                         ; sub_403170+661↑j ...
.text:004037DF                 mov     [esp+5Ch+var_3C], 0
.text:004037E7                 mov     esi, [esp+5Ch+arg_C]
.text:004037EB                 mov     eax, [esi]
.text:004037ED                 test    eax, eax
.text:004037EF                 jz      loc_403970
.text:004037F5                 mov     ecx, eax
.text:004037F7
.text:004037F7 loc_4037F7:                             ; CODE XREF: sub_403170+6B3↓j
.text:004037F7                 mov     ebx, [ebp+14h]
.text:004037FA                 mov     eax, edi
.text:004037FC                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:004037FF                 sub     eax, ebx
.text:00403801                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00403805                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00403809                 call    strncmp
.text:0040380E                 test    eax, eax
.text:00403810                 jz      loc_4039D7
.text:00403816
.text:00403816 loc_403816:                             ; CODE XREF: sub_403170+88C↓j
.text:00403816                                         ; sub_403170+89D↓j
.text:00403816                 inc     [esp+5Ch+var_3C]
.text:0040381A                 add     esi, 10h
.text:0040381D                 mov     edx, [esi]
.text:0040381F                 test    edx, edx
.text:00403821                 mov     ecx, edx
.text:00403823                 jnz     short loc_4037F7
.text:00403825
.text:00403825 loc_403825:                             ; CODE XREF: sub_403170+8B6↓j
.text:00403825                 mov     esi, [esp+5Ch+var_34]
.text:00403829                 test    esi, esi
.text:0040382B                 jz      short loc_403839
.text:0040382D                 mov     ebx, [esp+5Ch+var_30]
.text:00403831                 test    ebx, ebx
.text:00403833                 jz      loc_403981
.text:00403839
.text:00403839 loc_403839:                             ; CODE XREF: sub_403170+6BB↑j
.text:00403839                 mov     esi, [esp+5Ch+var_2C]
.text:0040383D                 test    esi, esi
.text:0040383F                 jz      loc_403970
.text:00403845                 cmp     byte ptr [edi], 0
.text:00403848                 jz      loc_4038F0
.text:0040384E                 mov     ecx, [esp+5Ch+var_2C]
.text:00403852                 mov     ebx, [ecx+4]
.text:00403855                 test    ebx, ebx
.text:00403857                 jz      short loc_403898
.text:00403859                 lea     edx, [edi+1]
.text:0040385C                 mov     [ebp+0Ch], edx
.text:0040385F
.text:0040385F loc_40385F:                             ; CODE XREF: sub_403170+788↓j
.text:0040385F                                         ; sub_403170+7A7↓j
.text:0040385F                 mov     edi, [ebp+14h]
.text:00403862                 mov     [esp+5Ch+Str1], edi ; Str
.text:00403865                 call    strlen
.text:0040386A                 add     [ebp+14h], eax
.text:0040386D                 mov     eax, [esp+5Ch+arg_10]
.text:00403871                 test    eax, eax
.text:00403873                 jz      short loc_403880
.text:00403875                 mov     edx, [esp+5Ch+var_38]
.text:00403879                 mov     ebp, [esp+5Ch+arg_10]
.text:0040387D                 mov     [ebp+0], edx
.text:00403880
.text:00403880 loc_403880:                             ; CODE XREF: sub_403170+703↑j
.text:00403880                 mov     eax, [esp+5Ch+var_2C]
.text:00403884                 mov     ecx, [eax+8]
.text:00403887                 test    ecx, ecx
.text:00403889                 jnz     loc_40344A
.text:0040388F                 mov     ecx, [esp+5Ch+var_2C]
.text:00403893                 jmp     loc_403442
.text:00403898 ; ---------------------------------------------------------------------------
.text:00403898
.text:00403898 loc_403898:                             ; CODE XREF: sub_403170+6E7↑j
.text:00403898                 mov     eax, [esp+5Ch+var_14]
.text:0040389C                 test    eax, eax
.text:0040389E                 jnz     short loc_4038B3
.text:004038A0
.text:004038A0 loc_4038A0:                             ; CODE XREF: sub_403170+779↓j
.text:004038A0                 mov     ecx, [ebp+14h]
.text:004038A3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004038A6                 call    strlen
.text:004038AB                 add     [ebp+14h], eax
.text:004038AE                 jmp     loc_4034C8
.text:004038B3 ; ---------------------------------------------------------------------------
.text:004038B3
.text:004038B3 loc_4038B3:                             ; CODE XREF: sub_403170+72E↑j
.text:004038B3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004038BA                 call    ds:libintl_gettext
.text:004038C0                 mov     edx, [esp+5Ch+var_2C]
.text:004038C4                 mov     ebx, [esp+5Ch+arg_4]
.text:004038C8                 mov     edi, [edx]
.text:004038CA                 mov     [esp+5Ch+var_50], edi
.text:004038CE                 mov     edi, ds:_iob
.text:004038D4                 mov     esi, [ebx]
.text:004038D6                 mov     [esp+5Ch+Str2], eax ; Format
.text:004038DA                 add     edi, 40h ; '@'
.text:004038DD                 mov     [esp+5Ch+MaxCount], esi
.text:004038E1                 mov     [esp+5Ch+Str1], edi ; Stream
.text:004038E4                 call    fprintf
.text:004038E9                 jmp     short loc_4038A0
.text:004038E9 ; ---------------------------------------------------------------------------
.text:004038EB                 align 10h
.text:004038F0
.text:004038F0 loc_4038F0:                             ; CODE XREF: sub_403170+6D8↑j
.text:004038F0                 mov     esi, [esp+5Ch+var_2C]
.text:004038F4                 cmp     dword ptr [esi+4], 1
.text:004038F8                 jnz     loc_40385F
.text:004038FE                 mov     ecx, [ebp+0]
.text:00403901                 cmp     ecx, [esp+5Ch+arg_0]
.text:00403905                 jge     short loc_40391C
.text:00403907                 mov     eax, [esp+5Ch+arg_4]
.text:0040390B                 lea     ebx, [ecx+1]
.text:0040390E                 mov     [ebp+0], ebx
.text:00403911                 mov     edi, [eax+ecx*4]
.text:00403914                 mov     [ebp+0Ch], edi
.text:00403917                 jmp     loc_40385F
.text:0040391C ; ---------------------------------------------------------------------------
.text:0040391C
.text:0040391C loc_40391C:                             ; CODE XREF: sub_403170+795↑j
.text:0040391C                 mov     edx, [esp+5Ch+var_14]
.text:00403920                 test    edx, edx
.text:00403922                 jnz     short loc_403937
.text:00403924
.text:00403924 loc_403924:                             ; CODE XREF: sub_403170+7FE↓j
.text:00403924                 mov     edx, [ebp+14h]
.text:00403927                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040392A                 call    strlen
.text:0040392F                 add     [ebp+14h], eax
.text:00403932                 jmp     loc_403559
.text:00403937 ; ---------------------------------------------------------------------------
.text:00403937
.text:00403937 loc_403937:                             ; CODE XREF: sub_403170+7B2↑j
.text:00403937                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040393E                 call    ds:libintl_gettext
.text:00403944                 mov     ecx, [ebp+0]
.text:00403947                 mov     ebx, [esp+5Ch+arg_4]
.text:0040394B                 mov     edi, [ebx+ecx*4-4]
.text:0040394F                 mov     ecx, ds:_iob
.text:00403955                 mov     [esp+5Ch+var_50], edi
.text:00403959                 mov     esi, [ebx]
.text:0040395B                 add     ecx, 40h ; '@'
.text:0040395E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403962                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403965                 mov     [esp+5Ch+MaxCount], esi
.text:00403969                 call    fprintf
.text:0040396E                 jmp     short loc_403924
.text:00403970 ; ---------------------------------------------------------------------------
.text:00403970
.text:00403970 loc_403970:                             ; CODE XREF: sub_403170+67F↑j
.text:00403970                                         ; sub_403170+6CF↑j
.text:00403970                 mov     dword ptr [ebp+14h], 0
.text:00403977                 mov     eax, 57h ; 'W'
.text:0040397C                 jmp     loc_4032C7
.text:00403981 ; ---------------------------------------------------------------------------
.text:00403981
.text:00403981 loc_403981:                             ; CODE XREF: sub_403170+6C3↑j
.text:00403981                 mov     edi, [esp+5Ch+var_14]
.text:00403985                 test    edi, edi
.text:00403987                 jnz     short loc_40399F
.text:00403989
.text:00403989 loc_403989:                             ; CODE XREF: sub_403170+865↓j
.text:00403989                 mov     edx, [ebp+14h]
.text:0040398C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040398F                 call    strlen
.text:00403994                 add     [ebp+14h], eax
.text:00403997                 inc     dword ptr [ebp+0]
.text:0040399A                 jmp     loc_4034C8
.text:0040399F ; ---------------------------------------------------------------------------
.text:0040399F
.text:0040399F loc_40399F:                             ; CODE XREF: sub_403170+817↑j
.text:0040399F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004039A6                 call    ds:libintl_gettext
.text:004039AC                 mov     ecx, [ebp+0]
.text:004039AF                 mov     ebx, [esp+5Ch+arg_4]
.text:004039B3                 mov     edi, [ebx+ecx*4]
.text:004039B6                 mov     ecx, ds:_iob
.text:004039BC                 mov     [esp+5Ch+var_50], edi
.text:004039C0                 mov     esi, [ebx]
.text:004039C2                 add     ecx, 40h ; '@'
.text:004039C5                 mov     [esp+5Ch+Str2], eax ; Format
.text:004039C9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004039CC                 mov     [esp+5Ch+MaxCount], esi
.text:004039D0                 call    fprintf
.text:004039D5                 jmp     short loc_403989
.text:004039D7 ; ---------------------------------------------------------------------------
.text:004039D7
.text:004039D7 loc_4039D7:                             ; CODE XREF: sub_403170+6A0↑j
.text:004039D7                 mov     edx, [ebp+14h]
.text:004039DA                 mov     ebx, edi
.text:004039DC                 mov     ecx, [esi]
.text:004039DE                 sub     ebx, edx
.text:004039E0                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004039E3                 call    strlen
.text:004039E8                 cmp     ebx, eax
.text:004039EA                 jz      short loc_403A12
.text:004039EC                 mov     ebx, [esp+5Ch+var_2C]
.text:004039F0                 test    ebx, ebx
.text:004039F2                 jz      short loc_403A01
.text:004039F4                 mov     [esp+5Ch+var_34], 1
.text:004039FC                 jmp     loc_403816
.text:00403A01 ; ---------------------------------------------------------------------------
.text:00403A01
.text:00403A01 loc_403A01:                             ; CODE XREF: sub_403170+882↑j
.text:00403A01                 mov     [esp+5Ch+var_2C], esi
.text:00403A05                 mov     ecx, [esp+5Ch+var_3C]
.text:00403A09                 mov     [esp+5Ch+var_38], ecx
.text:00403A0D                 jmp     loc_403816
.text:00403A12 ; ---------------------------------------------------------------------------
.text:00403A12
.text:00403A12 loc_403A12:                             ; CODE XREF: sub_403170+87A↑j
.text:00403A12                 mov     [esp+5Ch+var_2C], esi
.text:00403A16                 mov     eax, [esp+5Ch+var_3C]
.text:00403A1A                 mov     [esp+5Ch+var_30], 1
.text:00403A22                 mov     [esp+5Ch+var_38], eax
.text:00403A26                 jmp     loc_403825
.text:00403A2B ; ---------------------------------------------------------------------------
.text:00403A2B
.text:00403A2B loc_403A2B:                             ; CODE XREF: sub_403170+646↑j
.text:00403A2B                 mov     edx, [ebp+0]
.text:00403A2E                 cmp     edx, [esp+5Ch+arg_0]
.text:00403A32                 jz      short loc_403A49
.text:00403A34                 mov     ebx, [esp+5Ch+arg_4]
.text:00403A38                 lea     esi, [edx+1]
.text:00403A3B                 mov     [ebp+0], esi
.text:00403A3E                 mov     edi, [ebx+edx*4]
.text:00403A41                 mov     [ebp+0Ch], edi
.text:00403A44                 jmp     loc_4037C2
.text:00403A49 ; ---------------------------------------------------------------------------
.text:00403A49
.text:00403A49 loc_403A49:                             ; CODE XREF: sub_403170+8C2↑j
.text:00403A49                 mov     edi, [esp+5Ch+var_14]
.text:00403A4D                 test    edi, edi
.text:00403A4F                 jnz     short loc_403A6C
.text:00403A51
.text:00403A51 loc_403A51:                             ; CODE XREF: sub_403170+92C↓j
.text:00403A51                 mov     [ebp+8], esi
.text:00403A54                 mov     ebp, [esp+5Ch+Str]
.text:00403A58                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00403A5C                 jz      short loc_403A68
.text:00403A5E                 mov     bl, 3Fh ; '?'
.text:00403A60
.text:00403A60 loc_403A60:                             ; CODE XREF: sub_403170+8FA↓j
.text:00403A60                 movsx   eax, bl
.text:00403A63                 jmp     loc_4032C7
.text:00403A68 ; ---------------------------------------------------------------------------
.text:00403A68
.text:00403A68 loc_403A68:                             ; CODE XREF: sub_403170+8EC↑j
.text:00403A68                 mov     bl, 3Ah ; ':'
.text:00403A6A                 jmp     short loc_403A60
.text:00403A6C ; ---------------------------------------------------------------------------
.text:00403A6C
.text:00403A6C loc_403A6C:                             ; CODE XREF: sub_403170+8DF↑j
.text:00403A6C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00403A73                 call    ds:libintl_gettext
.text:00403A79                 mov     [esp+5Ch+var_50], esi
.text:00403A7D                 mov     edx, [esp+5Ch+arg_4]
.text:00403A81                 mov     ecx, ds:_iob
.text:00403A87                 mov     ebx, [edx]
.text:00403A89                 add     ecx, 40h ; '@'
.text:00403A8C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403A90                 mov     [esp+5Ch+MaxCount], ebx
.text:00403A94                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403A97                 call    fprintf
.text:00403A9C                 jmp     short loc_403A51
.text:00403A9C ; ---------------------------------------------------------------------------
.text:00403A9E                 align 10h
.text:00403AA0
.text:00403AA0 loc_403AA0:                             ; CODE XREF: sub_403170+54C↑j
.text:00403AA0                                         ; sub_403170+555↑j
.text:00403AA0                 mov     eax, [esp+5Ch+var_14]
.text:00403AA4                 test    eax, eax
.text:00403AA6                 jz      short loc_403ADF
.text:00403AA8                 mov     ebx, [ebp+1Ch]
.text:00403AAB                 test    ebx, ebx
.text:00403AAD                 jz      short loc_403AE7
.text:00403AAF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00403AB6
.text:00403AB6 loc_403AB6:                             ; CODE XREF: sub_403170+97E↓j
.text:00403AB6                 call    ds:libintl_gettext
.text:00403ABC                 mov     [esp+5Ch+var_50], esi
.text:00403AC0                 mov     ebx, [esp+5Ch+arg_4]
.text:00403AC4                 mov     edx, ds:_iob
.text:00403ACA                 mov     esi, [ebx]
.text:00403ACC                 add     edx, 40h ; '@'
.text:00403ACF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403AD3                 mov     [esp+5Ch+MaxCount], esi
.text:00403AD7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00403ADA                 call    fprintf
.text:00403ADF
.text:00403ADF loc_403ADF:                             ; CODE XREF: sub_403170+936↑j
.text:00403ADF                 mov     [ebp+8], edi
.text:00403AE2                 jmp     loc_4034C8
.text:00403AE7 ; ---------------------------------------------------------------------------
.text:00403AE7
.text:00403AE7 loc_403AE7:                             ; CODE XREF: sub_403170+93D↑j
.text:00403AE7                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00403AEE                 jmp     short loc_403AB6
.text:00403AF0 ; ---------------------------------------------------------------------------
.text:00403AF0
.text:00403AF0 loc_403AF0:                             ; CODE XREF: sub_403170+26E↑j
.text:00403AF0                 mov     edi, [esp+5Ch+var_14]
.text:00403AF4                 test    edi, edi
.text:00403AF6                 jnz     short loc_403B0E
.text:00403AF8
.text:00403AF8 loc_403AF8:                             ; CODE XREF: sub_403170+9D4↓j
.text:00403AF8                 mov     edx, [ebp+14h]
.text:00403AFB                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403AFE                 call    strlen
.text:00403B03                 add     [ebp+14h], eax
.text:00403B06                 inc     dword ptr [ebp+0]
.text:00403B09                 jmp     loc_40364E
.text:00403B0E ; ---------------------------------------------------------------------------
.text:00403B0E
.text:00403B0E loc_403B0E:                             ; CODE XREF: sub_403170+986↑j
.text:00403B0E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00403B15                 call    ds:libintl_gettext
.text:00403B1B                 mov     ebx, [ebp+0]
.text:00403B1E                 mov     edi, [esp+5Ch+arg_4]
.text:00403B22                 mov     ecx, [edi+ebx*4]
.text:00403B25                 mov     ebx, ds:_iob
.text:00403B2B                 mov     [esp+5Ch+var_50], ecx
.text:00403B2F                 mov     esi, [edi]
.text:00403B31                 add     ebx, 40h ; '@'
.text:00403B34                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403B38                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00403B3B                 mov     [esp+5Ch+MaxCount], esi
.text:00403B3F                 call    fprintf
.text:00403B44                 jmp     short loc_403AF8
.text:00403B46 ; ---------------------------------------------------------------------------
.text:00403B46
.text:00403B46 loc_403B46:                             ; CODE XREF: sub_403170+246↑j
.text:00403B46                 mov     ecx, [ebp+14h]
.text:00403B49                 mov     ebx, edi
.text:00403B4B                 mov     edx, [esi]
.text:00403B4D                 sub     ebx, ecx
.text:00403B4F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403B52                 call    strlen
.text:00403B57                 cmp     ebx, eax
.text:00403B59                 jz      short loc_403BB1
.text:00403B5B                 mov     ebx, [esp+5Ch+var_18]
.text:00403B5F                 test    ebx, ebx
.text:00403B61                 jz      short loc_403BA0
.text:00403B63                 mov     edx, [esp+5Ch+arg_14]
.text:00403B67                 test    edx, edx
.text:00403B69                 jnz     short loc_403B77
.text:00403B6B                 mov     ecx, [esp+5Ch+var_18]
.text:00403B6F                 mov     ebx, [esi+4]
.text:00403B72                 cmp     [ecx+4], ebx
.text:00403B75                 jz      short loc_403B84
.text:00403B77
.text:00403B77 loc_403B77:                             ; CODE XREF: sub_403170+9F9↑j
.text:00403B77                                         ; sub_403170+A1A↓j ...
.text:00403B77                 mov     [esp+5Ch+var_20], 1
.text:00403B7F                 jmp     loc_4033BC
.text:00403B84 ; ---------------------------------------------------------------------------
.text:00403B84
.text:00403B84 loc_403B84:                             ; CODE XREF: sub_403170+A05↑j
.text:00403B84                 mov     edx, [esi+8]
.text:00403B87                 cmp     [ecx+8], edx
.text:00403B8A                 jnz     short loc_403B77
.text:00403B8C                 mov     ebx, [esi+0Ch]
.text:00403B8F                 cmp     [ecx+0Ch], ebx
.text:00403B92                 jnz     short loc_403B77
.text:00403B94                 jmp     loc_4033BC
.text:00403B94 ; ---------------------------------------------------------------------------
.text:00403B99                 align 10h
.text:00403BA0
.text:00403BA0 loc_403BA0:                             ; CODE XREF: sub_403170+9F1↑j
.text:00403BA0                 mov     [esp+5Ch+var_18], esi
.text:00403BA4                 mov     eax, [esp+5Ch+var_28]
.text:00403BA8                 mov     [esp+5Ch+var_24], eax
.text:00403BAC                 jmp     loc_4033BC
.text:00403BB1 ; ---------------------------------------------------------------------------
.text:00403BB1
.text:00403BB1 loc_403BB1:                             ; CODE XREF: sub_403170+9E9↑j
.text:00403BB1                 mov     [esp+5Ch+var_18], esi
.text:00403BB5                 mov     ecx, [esp+5Ch+var_28]
.text:00403BB9                 mov     [esp+5Ch+var_1C], 1
.text:00403BC1                 mov     [esp+5Ch+var_24], ecx
.text:00403BC5                 jmp     loc_4033D0
.text:00403BCA ; ---------------------------------------------------------------------------
.text:00403BCA
.text:00403BCA loc_403BCA:                             ; CODE XREF: sub_403170+1BF↑j
.text:00403BCA                 mov     eax, [esp+5Ch+Str]
.text:00403BCE                 movsx   esi, dl
.text:00403BD1                 mov     [esp+5Ch+Str2], esi ; Val
.text:00403BD5                 mov     [esp+5Ch+Str1], eax ; Str
.text:00403BD8                 call    strchr
.text:00403BDD                 test    eax, eax
.text:00403BDF                 jnz     loc_403690
.text:00403BE5                 jmp     loc_403335
.text:00403BEA ; ---------------------------------------------------------------------------
.text:00403BEA
.text:00403BEA loc_403BEA:                             ; CODE XREF: sub_403170+17C↑j
.text:00403BEA                 mov     ecx, 1
.text:00403BEF                 jmp     loc_4032F2
.text:00403BF4 ; ---------------------------------------------------------------------------
.text:00403BF4
.text:00403BF4 loc_403BF4:                             ; CODE XREF: sub_403170+D4↑j
.text:00403BF4                                         ; sub_403170+130↑j
.text:00403BF4                 mov     eax, [ebp+20h]
.text:00403BF7                 cmp     eax, [ebp+24h]
.text:00403BFA                 jz      loc_4032D0
.text:00403C00                 mov     [ebp+0], eax
.text:00403C03                 jmp     loc_4032D0
.text:00403C08 ; ---------------------------------------------------------------------------
.text:00403C08
.text:00403C08 loc_403C08:                             ; CODE XREF: sub_403170+FE↑j
.text:00403C08                 mov     [ebp+20h], eax
.text:00403C0B                 jmp     loc_403290
.text:00403C10 ; ---------------------------------------------------------------------------
.text:00403C10
.text:00403C10 loc_403C10:                             ; CODE XREF: sub_403170+CA↑j
.text:00403C10                 mov     edx, [ebp+20h]
.text:00403C13                 mov     eax, [ebp+24h]
.text:00403C16                 cmp     edx, eax
.text:00403C18                 jz      short loc_403C90
.text:00403C1A                 cmp     eax, ebx
.text:00403C1C                 jz      short loc_403C31
.text:00403C1E                 mov     [esp+5Ch+Str2], ebp
.text:00403C22                 mov     ebx, [esp+5Ch+arg_4]
.text:00403C26                 mov     [esp+5Ch+Str1], ebx
.text:00403C29                 call    sub_403E20
.text:00403C2E                 mov     ebx, [ebp+0]
.text:00403C31
.text:00403C31 loc_403C31:                             ; CODE XREF: sub_403170+AAC↑j
.text:00403C31                                         ; sub_403170+B22↓j ...
.text:00403C31                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403C35                 jge     short loc_403C80
.text:00403C37                 mov     esi, [esp+5Ch+arg_4]
.text:00403C3B                 mov     eax, [esi+ebx*4]
.text:00403C3E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403C41                 jz      short loc_403C88
.text:00403C43                 lea     esi, [esi+0]
.text:00403C49                 lea     edi, [edi+0]
.text:00403C50
.text:00403C50 loc_403C50:                             ; CODE XREF: sub_403170+AFC↓j
.text:00403C50                                         ; sub_403170+B1C↓j
.text:00403C50                 lea     eax, [ebx+1]
.text:00403C53                 mov     ebx, eax
.text:00403C55                 mov     [ebp+0], eax
.text:00403C58                 cmp     eax, [esp+5Ch+arg_0]
.text:00403C5C                 jge     short loc_403C80
.text:00403C5E                 mov     edi, [esp+5Ch+arg_4]
.text:00403C62                 mov     edx, [edi+eax*4]
.text:00403C65                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00403C68                 jz      short loc_403C70
.text:00403C6A
.text:00403C6A loc_403C6A:                             ; CODE XREF: sub_403170+B04↓j
.text:00403C6A                 mov     ebx, eax
.text:00403C6C                 jmp     short loc_403C50
.text:00403C6C ; ---------------------------------------------------------------------------
.text:00403C6E                 align 10h
.text:00403C70
.text:00403C70 loc_403C70:                             ; CODE XREF: sub_403170+AF8↑j
.text:00403C70                 cmp     byte ptr [edx+1], 0
.text:00403C74                 jz      short loc_403C6A
.text:00403C76                 lea     esi, [esi+0]
.text:00403C79                 lea     edi, [edi+0]
.text:00403C80
.text:00403C80 loc_403C80:                             ; CODE XREF: sub_403170+AC5↑j
.text:00403C80                                         ; sub_403170+AEC↑j ...
.text:00403C80                 mov     [ebp+24h], ebx
.text:00403C83                 jmp     loc_403240
.text:00403C88 ; ---------------------------------------------------------------------------
.text:00403C88
.text:00403C88 loc_403C88:                             ; CODE XREF: sub_403170+AD1↑j
.text:00403C88                 cmp     byte ptr [eax+1], 0
.text:00403C8C                 jz      short loc_403C50
.text:00403C8E                 jmp     short loc_403C80
.text:00403C90 ; ---------------------------------------------------------------------------
.text:00403C90
.text:00403C90 loc_403C90:                             ; CODE XREF: sub_403170+AA8↑j
.text:00403C90                 cmp     edx, ebx
.text:00403C92                 jz      short loc_403C31
.text:00403C94                 mov     [ebp+20h], ebx
.text:00403C97                 jmp     short loc_403C31
.text:00403C99 ; ---------------------------------------------------------------------------
.text:00403C99
.text:00403C99 loc_403C99:                             ; CODE XREF: sub_403170+88↑j
.text:00403C99                 mov     dword ptr [ebp+18h], 0
.text:00403CA0                 mov     esi, [esp+5Ch+Str]
.text:00403CA4
.text:00403CA4 loc_403CA4:                             ; CODE XREF: sub_403170+B49↓j
.text:00403CA4                 inc     esi
.text:00403CA5                 jmp     loc_403208
.text:00403CA5 ; ---------------------------------------------------------------------------
.text:00403CAA                 align 10h
.text:00403CB0
.text:00403CB0 loc_403CB0:                             ; CODE XREF: sub_403170+80↑j
.text:00403CB0                 mov     dword ptr [ebp+18h], 2
.text:00403CB7                 mov     esi, ecx
.text:00403CB9                 jmp     short loc_403CA4
.text:00403CB9 ; ---------------------------------------------------------------------------
.text:00403CBB                 align 10h
.text:00403CC0
.text:00403CC0 loc_403CC0:                             ; CODE XREF: sub_403170+69↑j
.text:00403CC0                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00403CC7                 call    getenv
.text:00403CCC                 test    eax, eax
.text:00403CCE                 jz      loc_4031E4
.text:00403CD4                 jmp     loc_4031DF
.text:00403CD4 ; ---------------------------------------------------------------------------
.text:00403CD9                 align 10h
.text:00403CE0
.text:00403CE0 loc_403CE0:                             ; CODE XREF: sub_403170+3F↑j
.text:00403CE0                 mov     dword ptr [ebp+0], 1
.text:00403CE7                 mov     ebx, 1
.text:00403CEC                 jmp     loc_4031C0
.text:00403CEC sub_403170      endp
.text:00403CEC
.text:00403CF1 ; ---------------------------------------------------------------------------
.text:00403CF1                 jmp     short sub_403D00
.text:00403CF1 ; ---------------------------------------------------------------------------
.text:00403CF3                 align 10h
.text:00403D00
.text:00403D00 ; =============== S U B R O U T I N E =======================================
.text:00403D00
.text:00403D00
.text:00403D00 ; int __cdecl sub_403D00(int, int, char *, int, int, int, int)
.text:00403D00 sub_403D00      proc near               ; CODE XREF: .text:00403CF1↑j
.text:00403D00                                         ; sub_404500+3A↓p ...
.text:00403D00
.text:00403D00 var_2C          = dword ptr -2Ch
.text:00403D00 var_28          = dword ptr -28h
.text:00403D00 Str             = dword ptr -24h
.text:00403D00 var_20          = dword ptr -20h
.text:00403D00 var_1C          = dword ptr -1Ch
.text:00403D00 var_18          = dword ptr -18h
.text:00403D00 var_14          = dword ptr -14h
.text:00403D00 var_10          = dword ptr -10h
.text:00403D00 arg_0           = dword ptr  4
.text:00403D00 arg_4           = dword ptr  8
.text:00403D00 arg_8           = dword ptr  0Ch
.text:00403D00 arg_C           = dword ptr  10h
.text:00403D00 arg_10          = dword ptr  14h
.text:00403D00 arg_14          = dword ptr  18h
.text:00403D00 arg_18          = dword ptr  1Ch
.text:00403D00
.text:00403D00                 sub     esp, 2Ch
.text:00403D03                 mov     edx, dword_410010
.text:00403D09                 mov     [esp+2Ch+var_10], offset dword_411010 ; int
.text:00403D11                 mov     ecx, dword_410014
.text:00403D17                 mov     ds:dword_411010, edx
.text:00403D1D                 mov     edx, [esp+2Ch+arg_18]
.text:00403D21                 mov     ds:dword_411014, ecx
.text:00403D27                 mov     ecx, [esp+2Ch+arg_14]
.text:00403D2B                 mov     [esp+2Ch+var_14], edx ; int
.text:00403D2F                 mov     edx, [esp+2Ch+arg_10]
.text:00403D33                 mov     [esp+2Ch+var_18], ecx ; int
.text:00403D37                 mov     ecx, [esp+2Ch+arg_C]
.text:00403D3B                 mov     [esp+2Ch+var_1C], edx ; int
.text:00403D3F                 mov     edx, [esp+2Ch+arg_8]
.text:00403D43                 mov     [esp+2Ch+var_20], ecx ; int
.text:00403D47                 mov     ecx, [esp+2Ch+arg_4]
.text:00403D4B                 mov     [esp+2Ch+Str], edx ; Str
.text:00403D4F                 mov     edx, [esp+2Ch+arg_0]
.text:00403D53                 mov     [esp+2Ch+var_28], ecx ; int
.text:00403D57                 mov     [esp+2Ch+var_2C], edx ; int
.text:00403D5A                 call    sub_403170
.text:00403D5F                 mov     ecx, ds:dword_411010
.text:00403D65                 mov     dword_410010, ecx
.text:00403D6B                 mov     ecx, ds:dword_41101C
.text:00403D71                 mov     ds:dword_4114E0, ecx
.text:00403D77                 mov     ecx, ds:dword_411018
.text:00403D7D                 mov     dword_410018, ecx
.text:00403D83                 add     esp, 2Ch
.text:00403D86                 retn
.text:00403D86 sub_403D00      endp
.text:00403D86
.text:00403D86 ; ---------------------------------------------------------------------------
.text:00403D87                 align 10h
.text:00403D90                 sub     esp, 2Ch
.text:00403D93                 mov     edx, dword_410010
.text:00403D99                 mov     dword ptr [esp+1Ch], offset dword_411010
.text:00403DA1                 mov     ecx, dword_410014
.text:00403DA7                 mov     dword ptr [esp+18h], 1
.text:00403DAF                 mov     ds:dword_411010, edx
.text:00403DB5                 mov     edx, [esp+38h]
.text:00403DB9                 mov     ds:dword_411014, ecx
.text:00403DBF                 mov     ecx, [esp+34h]
.text:00403DC3                 mov     [esp+8], edx
.text:00403DC7                 mov     edx, [esp+30h]
.text:00403DCB                 mov     [esp+4], ecx
.text:00403DCF                 mov     dword ptr [esp+14h], 0
.text:00403DD7                 mov     dword ptr [esp+10h], 0
.text:00403DDF                 mov     dword ptr [esp+0Ch], 0
.text:00403DE7                 mov     [esp], edx
.text:00403DEA                 call    sub_403170
.text:00403DEF                 mov     ecx, ds:dword_411010
.text:00403DF5                 mov     dword_410010, ecx
.text:00403DFB                 mov     ecx, ds:dword_41101C
.text:00403E01                 mov     ds:dword_4114E0, ecx
.text:00403E07                 mov     ecx, ds:dword_411018
.text:00403E0D                 mov     dword_410018, ecx
.text:00403E13                 add     esp, 2Ch
.text:00403E16                 retn
.text:00403E16 ; ---------------------------------------------------------------------------
.text:00403E17                 align 10h
.text:00403E20
.text:00403E20 ; =============== S U B R O U T I N E =======================================
.text:00403E20
.text:00403E20
.text:00403E20 sub_403E20      proc near               ; CODE XREF: sub_403170+113↑p
.text:00403E20                                         ; sub_403170+AB9↑p
.text:00403E20
.text:00403E20 var_2C          = dword ptr -2Ch
.text:00403E20 var_28          = dword ptr -28h
.text:00403E20 var_24          = dword ptr -24h
.text:00403E20 var_20          = dword ptr -20h
.text:00403E20 var_1C          = dword ptr -1Ch
.text:00403E20 var_18          = dword ptr -18h
.text:00403E20 var_14          = dword ptr -14h
.text:00403E20 arg_0           = dword ptr  4
.text:00403E20 arg_4           = dword ptr  8
.text:00403E20
.text:00403E20                 push    ebp
.text:00403E21                 push    edi
.text:00403E22                 push    esi
.text:00403E23                 push    ebx
.text:00403E24                 sub     esp, 1Ch
.text:00403E27                 mov     ecx, [esp+2Ch+arg_4]
.text:00403E2B                 mov     eax, [esp+2Ch+arg_4]
.text:00403E2F                 mov     ebx, [esp+2Ch+arg_4]
.text:00403E33                 mov     edx, [ecx+20h]
.text:00403E36                 mov     edi, [esp+2Ch+arg_0]
.text:00403E3A                 mov     ecx, [ebx]
.text:00403E3C                 mov     [esp+2Ch+var_2C], edx
.text:00403E3F                 mov     [esp+2Ch+var_14], edx
.text:00403E43                 mov     edx, [eax+24h]
.text:00403E46                 mov     [esp+2Ch+var_28], ecx
.text:00403E4A                 mov     [esp+2Ch+var_1C], ecx
.text:00403E4E                 cmp     ecx, edx
.text:00403E50                 mov     [esp+2Ch+var_18], edx
.text:00403E54                 jle     short loc_403ED0
.text:00403E56                 mov     esi, [esp+2Ch+var_2C]
.text:00403E59                 cmp     edx, esi
.text:00403E5B                 jle     short loc_403ED0
.text:00403E5D                 lea     esi, [esi+0]
.text:00403E60
.text:00403E60 loc_403E60:                             ; CODE XREF: sub_403E20+A1↓j
.text:00403E60                 mov     ebx, [esp+2Ch+var_1C]
.text:00403E64                 mov     edx, [esp+2Ch+var_18]
.text:00403E68                 mov     ebp, [esp+2Ch+var_18]
.text:00403E6C                 mov     eax, [esp+2Ch+var_14]
.text:00403E70                 sub     ebx, edx
.text:00403E72                 mov     [esp+2Ch+var_20], ebx
.text:00403E76                 sub     ebp, eax
.text:00403E78                 cmp     ebx, ebp
.text:00403E7A                 jle     short loc_403EF5
.text:00403E7C                 xor     esi, esi
.text:00403E7E                 cmp     esi, ebp
.text:00403E80                 jge     short loc_403EAD
.text:00403E82                 mov     ecx, [esp+2Ch+var_1C]
.text:00403E86                 sub     ecx, ebp
.text:00403E88                 mov     [esp+2Ch+var_24], ecx
.text:00403E8C                 lea     esi, [esi+0]
.text:00403E90
.text:00403E90 loc_403E90:                             ; CODE XREF: sub_403E20+8B↓j
.text:00403E90                 mov     ecx, [esp+2Ch+var_14]
.text:00403E94                 mov     edx, [esp+2Ch+var_24]
.text:00403E98                 add     ecx, esi
.text:00403E9A                 add     edx, esi
.text:00403E9C                 mov     ebx, [edi+ecx*4]
.text:00403E9F                 mov     eax, [edi+edx*4]
.text:00403EA2                 inc     esi
.text:00403EA3                 cmp     esi, ebp
.text:00403EA5                 mov     [edi+ecx*4], eax
.text:00403EA8                 mov     [edi+edx*4], ebx
.text:00403EAB                 jl      short loc_403E90
.text:00403EAD
.text:00403EAD loc_403EAD:                             ; CODE XREF: sub_403E20+60↑j
.text:00403EAD                 sub     [esp+2Ch+var_1C], ebp
.text:00403EB1
.text:00403EB1 loc_403EB1:                             ; CODE XREF: sub_403E20+107↓j
.text:00403EB1                 mov     eax, [esp+2Ch+var_18]
.text:00403EB5                 cmp     [esp+2Ch+var_1C], eax
.text:00403EB9                 jle     short loc_403ED0
.text:00403EBB                 mov     ebp, [esp+2Ch+var_14]
.text:00403EBF                 cmp     eax, ebp
.text:00403EC1                 jg      short loc_403E60
.text:00403EC3                 lea     esi, [esi+0]
.text:00403EC9                 lea     edi, [edi+0]
.text:00403ED0
.text:00403ED0 loc_403ED0:                             ; CODE XREF: sub_403E20+34↑j
.text:00403ED0                                         ; sub_403E20+3B↑j ...
.text:00403ED0                 mov     esi, [esp+2Ch+var_28]
.text:00403ED4                 mov     ecx, [esp+2Ch+var_18]
.text:00403ED8                 mov     eax, [esp+2Ch+var_2C]
.text:00403EDB                 mov     edi, [esp+2Ch+arg_4]
.text:00403EDF                 mov     edx, [esp+2Ch+var_28]
.text:00403EE3                 sub     esi, ecx
.text:00403EE5                 add     esi, eax
.text:00403EE7                 mov     [edi+20h], esi
.text:00403EEA                 mov     [edi+24h], edx
.text:00403EED                 add     esp, 1Ch
.text:00403EF0                 pop     ebx
.text:00403EF1                 pop     esi
.text:00403EF2                 pop     edi
.text:00403EF3                 pop     ebp
.text:00403EF4                 retn
.text:00403EF5 ; ---------------------------------------------------------------------------
.text:00403EF5
.text:00403EF5 loc_403EF5:                             ; CODE XREF: sub_403E20+5A↑j
.text:00403EF5                 xor     esi, esi
.text:00403EF7                 cmp     esi, [esp+2Ch+var_20]
.text:00403EFB                 jge     short loc_403F1F
.text:00403EFD                 lea     esi, [esi+0]
.text:00403F00
.text:00403F00 loc_403F00:                             ; CODE XREF: sub_403E20+FD↓j
.text:00403F00                 mov     ebx, [esp+2Ch+var_14]
.text:00403F04                 mov     ebp, [esp+2Ch+var_18]
.text:00403F08                 add     ebx, esi
.text:00403F0A                 add     ebp, esi
.text:00403F0C                 mov     edx, [edi+ebx*4]
.text:00403F0F                 inc     esi
.text:00403F10                 cmp     esi, [esp+2Ch+var_20]
.text:00403F14                 mov     ecx, [edi+ebp*4]
.text:00403F17                 mov     [edi+ebx*4], ecx
.text:00403F1A                 mov     [edi+ebp*4], edx
.text:00403F1D                 jl      short loc_403F00
.text:00403F1F
.text:00403F1F loc_403F1F:                             ; CODE XREF: sub_403E20+DB↑j
.text:00403F1F                 mov     esi, [esp+2Ch+var_20]
.text:00403F23                 add     [esp+2Ch+var_14], esi
.text:00403F27                 jmp     short loc_403EB1
.text:00403F27 sub_403E20      endp
.text:00403F27
.text:00403F27 ; ---------------------------------------------------------------------------
.text:00403F29                 align 20h
.text:00403F40 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_403F60+3↓o
.text:00403F51 ; const char aS[]
.text:00403F51 aS              db '%s',0               ; DATA XREF: sub_403F60+10↓o
.text:00403F54                 align 10h
.text:00403F60
.text:00403F60 ; =============== S U B R O U T I N E =======================================
.text:00403F60
.text:00403F60 ; Attributes: noreturn
.text:00403F60
.text:00403F60 sub_403F60      proc near               ; CODE XREF: sub_4016F0:loc_401BFF↑p
.text:00403F60                                         ; sub_405FF0:loc_4061AF↓p ...
.text:00403F60
.text:00403F60 Code            = dword ptr -1Ch
.text:00403F60 ErrorMessage    = dword ptr -18h
.text:00403F60 var_14          = dword ptr -14h
.text:00403F60 var_10          = byte ptr -10h
.text:00403F60
.text:00403F60                 sub     esp, 1Ch
.text:00403F63                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00403F6A                 call    ds:libintl_gettext
.text:00403F70                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:00403F78                 mov     edx, Code
.text:00403F7E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00403F86                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00403F8A                 mov     [esp+1Ch+Code], edx ; Code
.text:00403F8D                 call    sub_406EF0
.text:00403F92                 call    abort
.text:00403F92 sub_403F60      endp
.text:00403F92
.text:00403F92 ; ---------------------------------------------------------------------------
.text:00403F97                 align 10h
.text:00403FA0
.text:00403FA0 ; =============== S U B R O U T I N E =======================================
.text:00403FA0
.text:00403FA0
.text:00403FA0 ; int __cdecl sub_403FA0(int, char *)
.text:00403FA0 sub_403FA0      proc near
.text:00403FA0
.text:00403FA0 var_C           = dword ptr -0Ch
.text:00403FA0 var_8           = dword ptr -8
.text:00403FA0 var_4           = dword ptr -4
.text:00403FA0 arg_0           = dword ptr  4
.text:00403FA0 arg_4           = dword ptr  8
.text:00403FA0
.text:00403FA0                 sub     esp, 0Ch
.text:00403FA3                 mov     edx, [esp+0Ch+arg_4]
.text:00403FA7                 mov     [esp+0Ch+var_8], 5 ; int
.text:00403FAF                 mov     [esp+0Ch+var_4], edx ; char *
.text:00403FB3                 mov     edx, [esp+0Ch+arg_0]
.text:00403FB7                 mov     [esp+0Ch+var_C], edx ; int
.text:00403FBA                 call    sub_405BE0
.text:00403FBF                 add     esp, 0Ch
.text:00403FC2                 retn
.text:00403FC2 sub_403FA0      endp
.text:00403FC2
.text:00403FC2 ; ---------------------------------------------------------------------------
.text:00403FC3                 align 10h
.text:00403FD0
.text:00403FD0 ; =============== S U B R O U T I N E =======================================
.text:00403FD0
.text:00403FD0
.text:00403FD0 ; int __cdecl sub_403FD0(char *)
.text:00403FD0 sub_403FD0      proc near               ; CODE XREF: sub_4016F0+3DB↑p
.text:00403FD0                                         ; sub_4016F0+436↑p ...
.text:00403FD0
.text:00403FD0 var_C           = dword ptr -0Ch
.text:00403FD0 var_8           = dword ptr -8
.text:00403FD0 var_4           = dword ptr -4
.text:00403FD0 arg_0           = dword ptr  4
.text:00403FD0
.text:00403FD0                 sub     esp, 0Ch
.text:00403FD3                 mov     edx, [esp+0Ch+arg_0]
.text:00403FD7                 mov     [esp+0Ch+var_8], 5 ; int
.text:00403FDF                 mov     [esp+0Ch+var_C], 0 ; int
.text:00403FE6                 mov     [esp+0Ch+var_4], edx ; char *
.text:00403FEA                 call    sub_405BE0
.text:00403FEF                 add     esp, 0Ch
.text:00403FF2                 retn
.text:00403FF2 sub_403FD0      endp
.text:00403FF2
.text:00403FF2 ; ---------------------------------------------------------------------------
.text:00403FF3                 align 10h
.text:00404000 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00404000                                         ; DATA XREF: .data:Buffer↓o
.text:00404032 ; const char Format[]
.text:00404032 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_4042F0+50↓o
.text:0040403E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040403E                                         ; DATA XREF: sub_4042F0:loc_404391↓o
.text:0040404E                 align 20h
.text:00404060 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00404060                                         ; DATA XREF: sub_4042F0+100↓o
.text:00404060                 db 'ere is NO',0Ah
.text:00404060                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00404060                 db 'R PURPOSE.',0Ah,0
.text:004040F8 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:004040F8                                         ; DATA XREF: sub_4042F0:loc_404431↓o
.text:0040410F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040410F                                         ; DATA XREF: sub_4042F0:loc_40443D↓o
.text:0040412B                 align 20h
.text:00404140 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00404140                                         ; DATA XREF: sub_4042F0:loc_404449↓o
.text:00404140                 db 'and %s.',0Ah,0
.text:00404160 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00404160                                         ; DATA XREF: sub_4042F0:loc_404455↓o
.text:00404160                 db '%s, and %s.',0Ah,0
.text:00404184                 align 20h
.text:004041A0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:004041A0                                         ; DATA XREF: sub_4042F0:loc_404461↓o
.text:004041A0                 db '%s, %s, and %s.',0Ah,0
.text:004041C8                 align 20h
.text:004041E0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:004041E0                                         ; DATA XREF: sub_4042F0:loc_40446D↓o
.text:004041E0                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040420C                 align 20h
.text:00404220 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00404220                                         ; DATA XREF: sub_4042F0:loc_404479↓o
.text:00404220                 db '%s, %s, %s, %s,',0Ah
.text:00404220                 db 'and %s.',0Ah,0
.text:00404250                 align 20h
.text:00404260 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00404260                                         ; DATA XREF: sub_4042F0:loc_404485↓o
.text:00404260                 db '%s, %s, %s, %s,',0Ah
.text:00404260                 db '%s, and %s.',0Ah,0
.text:00404294                 align 10h
.text:004042A0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:004042A0                                         ; DATA XREF: sub_4042F0:def_40435D↓o
.text:004042A0                 db '%s, %s, %s, %s,',0Ah
.text:004042A0                 db '%s, %s, and others.',0Ah,0
.text:004042DC ; const char aSS[]
.text:004042DC aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_4042F0+1B5↓o
.text:004042E3                 align 10h
.text:004042F0
.text:004042F0 ; =============== S U B R O U T I N E =======================================
.text:004042F0
.text:004042F0
.text:004042F0 ; int __cdecl sub_4042F0(FILE *, FILE *, int, int, va_list)
.text:004042F0 sub_4042F0      proc near               ; CODE XREF: sub_4044C0+2A↓p
.text:004042F0
.text:004042F0 Stream          = dword ptr -2Ch
.text:004042F0 Format          = dword ptr -28h
.text:004042F0 ArgList         = dword ptr -24h
.text:004042F0 var_20          = dword ptr -20h
.text:004042F0 var_1C          = dword ptr -1Ch
.text:004042F0 var_14          = dword ptr -14h
.text:004042F0 arg_0           = dword ptr  4
.text:004042F0 arg_4           = dword ptr  8
.text:004042F0 arg_8           = dword ptr  0Ch
.text:004042F0 arg_C           = dword ptr  10h
.text:004042F0 arg_10          = dword ptr  14h
.text:004042F0
.text:004042F0                 push    ebp
.text:004042F1                 push    edi
.text:004042F2                 push    esi
.text:004042F3                 push    ebx
.text:004042F4                 sub     esp, 1Ch
.text:004042F7                 xor     ebx, ebx
.text:004042F9                 mov     edi, [esp+2Ch+arg_10]
.text:004042FD                 mov     edx, [esp+2Ch+arg_8]
.text:00404301                 mov     esi, [esp+2Ch+arg_0]
.text:00404305                 mov     eax, [edi]
.text:00404307                 mov     ecx, [esp+2Ch+arg_4]
.text:0040430B                 mov     [esp+2Ch+var_14], edx
.text:0040430F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404313                 lea     edx, [edi+4]
.text:00404316                 test    eax, eax
.text:00404318                 jz      short loc_40432C
.text:0040431A                 lea     esi, [esi+0]
.text:00404320
.text:00404320 loc_404320:                             ; CODE XREF: sub_4042F0+3A↓j
.text:00404320                 mov     eax, edx
.text:00404322                 inc     ebx
.text:00404323                 mov     eax, [eax]
.text:00404325                 add     edx, 4
.text:00404328                 test    eax, eax
.text:0040432A                 jnz     short loc_404320
.text:0040432C
.text:0040432C loc_40432C:                             ; CODE XREF: sub_4042F0+28↑j
.text:0040432C                 test    ecx, ecx
.text:0040432E                 jz      loc_40449D
.text:00404334                 mov     [esp+2Ch+var_1C], ebp
.text:00404338                 mov     edx, [esp+2Ch+var_14]
.text:0040433C                 mov     [esp+2Ch+ArgList], ecx
.text:00404340                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00404348                 mov     [esp+2Ch+var_20], edx
.text:0040434C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040434F                 call    fprintf
.text:00404354
.text:00404354 loc_404354:                             ; CODE XREF: sub_4042F0+1C9↓j
.text:00404354                 cmp     ebx, 9          ; switch 10 cases
.text:00404357                 ja      def_40435D      ; jumptable 0040435D default case
.text:0040435D                 jmp     ds:jpt_40435D[ebx*4] ; switch jump
.text:0040435D ; ---------------------------------------------------------------------------
.text:00404364 jpt_40435D      dd offset loc_40438C    ; DATA XREF: sub_4042F0+6D↑r
.text:00404364                 dd offset loc_404391    ; jump table for switch statement
.text:00404364                 dd offset loc_404431
.text:00404364                 dd offset loc_40443D
.text:00404364                 dd offset loc_404449
.text:00404364                 dd offset loc_404455
.text:00404364                 dd offset loc_404461
.text:00404364                 dd offset loc_40446D
.text:00404364                 dd offset loc_404479
.text:00404364                 dd offset loc_404485
.text:0040438C ; ---------------------------------------------------------------------------
.text:0040438C
.text:0040438C loc_40438C:                             ; CODE XREF: sub_4042F0+6D↑j
.text:0040438C                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:0040438C                 call    abort           ; jumptable 0040435D case 0
.text:00404391 ; ---------------------------------------------------------------------------
.text:00404391
.text:00404391 loc_404391:                             ; CODE XREF: sub_4042F0+6D↑j
.text:00404391                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:00404391                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040435D case 1
.text:00404398                 nop
.text:00404399                 lea     esi, [esi+0]
.text:004043A0
.text:004043A0 loc_4043A0:                             ; CODE XREF: sub_4042F0+148↓j
.text:004043A0                                         ; sub_4042F0+154↓j ...
.text:004043A0                 call    ds:libintl_gettext
.text:004043A6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004043AA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004043AD                 mov     [esp+2Ch+Format], eax ; Format
.text:004043B1                 call    vfprintf
.text:004043B6                 mov     ebx, [esi+4]
.text:004043B9                 dec     ebx
.text:004043BA                 test    ebx, ebx
.text:004043BC                 mov     [esi+4], ebx
.text:004043BF                 js      short loc_40441F
.text:004043C1                 mov     edi, [esi]
.text:004043C3                 mov     byte ptr [edi], 0Ah
.text:004043C6                 inc     dword ptr [esi]
.text:004043C8
.text:004043C8 loc_4043C8:                             ; CODE XREF: sub_4042F0+13F↓j
.text:004043C8                 mov     [esp+2Ch+Format], esi ; Stream
.text:004043CC                 mov     edx, Buffer
.text:004043D2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:004043D5                 call    fputs
.text:004043DA                 mov     ebp, [esi+4]
.text:004043DD                 dec     ebp
.text:004043DE                 test    ebp, ebp
.text:004043E0                 mov     [esi+4], ebp
.text:004043E3                 js      short loc_40440D
.text:004043E5                 mov     ecx, [esi]
.text:004043E7                 mov     byte ptr [ecx], 0Ah
.text:004043EA                 inc     dword ptr [esi]
.text:004043EC
.text:004043EC loc_4043EC:                             ; CODE XREF: sub_4042F0+12D↓j
.text:004043EC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:004043F0                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:004043F7                 call    ds:libintl_gettext
.text:004043FD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00404401                 add     esp, 1Ch
.text:00404404                 pop     ebx
.text:00404405                 pop     esi
.text:00404406                 pop     edi
.text:00404407                 pop     ebp
.text:00404408                 jmp     fputs
.text:0040440D ; ---------------------------------------------------------------------------
.text:0040440D
.text:0040440D loc_40440D:                             ; CODE XREF: sub_4042F0+F3↑j
.text:0040440D                 mov     [esp+2Ch+Format], esi ; File
.text:00404411                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404418                 call    _flsbuf
.text:0040441D                 jmp     short loc_4043EC
.text:0040441F ; ---------------------------------------------------------------------------
.text:0040441F
.text:0040441F loc_40441F:                             ; CODE XREF: sub_4042F0+CF↑j
.text:0040441F                 mov     [esp+2Ch+Format], esi ; File
.text:00404423                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040442A                 call    _flsbuf
.text:0040442F                 jmp     short loc_4043C8
.text:00404431 ; ---------------------------------------------------------------------------
.text:00404431
.text:00404431 loc_404431:                             ; CODE XREF: sub_4042F0+6D↑j
.text:00404431                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:00404431                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040435D case 2
.text:00404438                 jmp     loc_4043A0
.text:0040443D ; ---------------------------------------------------------------------------
.text:0040443D
.text:0040443D loc_40443D:                             ; CODE XREF: sub_4042F0+6D↑j
.text:0040443D                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:0040443D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040435D case 3
.text:00404444                 jmp     loc_4043A0
.text:00404449 ; ---------------------------------------------------------------------------
.text:00404449
.text:00404449 loc_404449:                             ; CODE XREF: sub_4042F0+6D↑j
.text:00404449                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:00404449                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040435D case 4
.text:00404450                 jmp     loc_4043A0
.text:00404455 ; ---------------------------------------------------------------------------
.text:00404455
.text:00404455 loc_404455:                             ; CODE XREF: sub_4042F0+6D↑j
.text:00404455                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:00404455                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040435D case 5
.text:0040445C                 jmp     loc_4043A0
.text:00404461 ; ---------------------------------------------------------------------------
.text:00404461
.text:00404461 loc_404461:                             ; CODE XREF: sub_4042F0+6D↑j
.text:00404461                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:00404461                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040435D case 6
.text:00404468                 jmp     loc_4043A0
.text:0040446D ; ---------------------------------------------------------------------------
.text:0040446D
.text:0040446D loc_40446D:                             ; CODE XREF: sub_4042F0+6D↑j
.text:0040446D                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:0040446D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040435D case 7
.text:00404474                 jmp     loc_4043A0
.text:00404479 ; ---------------------------------------------------------------------------
.text:00404479
.text:00404479 loc_404479:                             ; CODE XREF: sub_4042F0+6D↑j
.text:00404479                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:00404479                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040435D case 8
.text:00404480                 jmp     loc_4043A0
.text:00404485 ; ---------------------------------------------------------------------------
.text:00404485
.text:00404485 loc_404485:                             ; CODE XREF: sub_4042F0+6D↑j
.text:00404485                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:00404485                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040435D case 9
.text:0040448C                 jmp     loc_4043A0
.text:00404491 ; ---------------------------------------------------------------------------
.text:00404491
.text:00404491 def_40435D:                             ; CODE XREF: sub_4042F0+67↑j
.text:00404491                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040435D default case
.text:00404498                 jmp     loc_4043A0
.text:0040449D ; ---------------------------------------------------------------------------
.text:0040449D
.text:0040449D loc_40449D:                             ; CODE XREF: sub_4042F0+3E↑j
.text:0040449D                 mov     [esp+2Ch+var_20], ebp
.text:004044A1                 mov     ecx, [esp+2Ch+var_14]
.text:004044A5                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:004044AD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004044B0                 mov     [esp+2Ch+ArgList], ecx
.text:004044B4                 call    fprintf
.text:004044B9                 jmp     loc_404354
.text:004044B9 sub_4042F0      endp
.text:004044B9
.text:004044B9 ; ---------------------------------------------------------------------------
.text:004044BE                 align 10h
.text:004044C0
.text:004044C0 ; =============== S U B R O U T I N E =======================================
.text:004044C0
.text:004044C0
.text:004044C0 ; int __cdecl sub_4044C0(FILE *, FILE *, int, int, char)
.text:004044C0 sub_4044C0      proc near               ; CODE XREF: sub_4016F0+266↑p
.text:004044C0
.text:004044C0 var_1C          = dword ptr -1Ch
.text:004044C0 var_18          = dword ptr -18h
.text:004044C0 var_14          = dword ptr -14h
.text:004044C0 var_10          = dword ptr -10h
.text:004044C0 var_C           = dword ptr -0Ch
.text:004044C0 arg_0           = dword ptr  4
.text:004044C0 arg_4           = dword ptr  8
.text:004044C0 arg_8           = dword ptr  0Ch
.text:004044C0 arg_C           = dword ptr  10h
.text:004044C0 arg_10          = byte ptr  14h
.text:004044C0
.text:004044C0                 sub     esp, 1Ch
.text:004044C3                 mov     edx, [esp+1Ch+arg_C]
.text:004044C7                 lea     ecx, [esp+1Ch+arg_10]
.text:004044CB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:004044CF                 mov     ecx, [esp+1Ch+arg_8]
.text:004044D3                 mov     [esp+1Ch+var_10], edx ; int
.text:004044D7                 mov     edx, [esp+1Ch+arg_4]
.text:004044DB                 mov     [esp+1Ch+var_14], ecx ; int
.text:004044DF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:004044E3                 mov     edx, [esp+1Ch+arg_0]
.text:004044E7                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:004044EA                 call    sub_4042F0
.text:004044EF                 add     esp, 1Ch
.text:004044F2                 retn
.text:004044F2 sub_4044C0      endp
.text:004044F2
.text:004044F2 ; ---------------------------------------------------------------------------
.text:004044F3                 align 10h
.text:00404500
.text:00404500 ; =============== S U B R O U T I N E =======================================
.text:00404500
.text:00404500
.text:00404500 ; int __cdecl sub_404500(int, int, char *, int, int)
.text:00404500 sub_404500      proc near               ; CODE XREF: sub_4016F0+B2↑p
.text:00404500
.text:00404500 var_1C          = dword ptr -1Ch
.text:00404500 var_18          = dword ptr -18h
.text:00404500 var_14          = dword ptr -14h
.text:00404500 var_10          = dword ptr -10h
.text:00404500 var_C           = dword ptr -0Ch
.text:00404500 var_8           = dword ptr -8
.text:00404500 var_4           = dword ptr -4
.text:00404500 arg_0           = dword ptr  4
.text:00404500 arg_4           = dword ptr  8
.text:00404500 arg_8           = dword ptr  0Ch
.text:00404500 arg_C           = dword ptr  10h
.text:00404500 arg_10          = dword ptr  14h
.text:00404500
.text:00404500                 sub     esp, 1Ch
.text:00404503                 mov     edx, [esp+1Ch+arg_C]
.text:00404507                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040450F                 mov     ecx, [esp+1Ch+arg_10]
.text:00404513                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040451B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040451F                 mov     edx, [esp+1Ch+arg_4]
.text:00404523                 mov     [esp+1Ch+var_C], ecx ; int
.text:00404527                 mov     ecx, [esp+1Ch+arg_8]
.text:0040452B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040452F                 mov     edx, [esp+1Ch+arg_0]
.text:00404533                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00404537                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040453A                 call    sub_403D00
.text:0040453F                 add     esp, 1Ch
.text:00404542                 retn
.text:00404542 sub_404500      endp
.text:00404542
.text:00404542 ; ---------------------------------------------------------------------------
.text:00404543                 align 10h
.text:00404550                 sub     esp, 2Ch
.text:00404553                 mov     edx, [esp+44h]
.text:00404557                 mov     dword ptr [esp+18h], 0
.text:0040455F                 mov     ecx, [esp+40h]
.text:00404563                 mov     dword ptr [esp+14h], 0
.text:0040456B                 mov     [esp+1Ch], edx
.text:0040456F                 mov     edx, [esp+3Ch]
.text:00404573                 mov     [esp+10h], ecx
.text:00404577                 mov     ecx, [esp+38h]
.text:0040457B                 mov     [esp+0Ch], edx
.text:0040457F                 mov     edx, [esp+34h]
.text:00404583                 mov     [esp+8], ecx
.text:00404587                 mov     [esp+4], edx
.text:0040458B                 mov     edx, [esp+30h]
.text:0040458F                 mov     [esp], edx
.text:00404592                 call    sub_403170
.text:00404597                 add     esp, 2Ch
.text:0040459A                 retn
.text:0040459A ; ---------------------------------------------------------------------------
.text:0040459B                 align 10h
.text:004045A0                 sub     esp, 1Ch
.text:004045A3                 mov     edx, [esp+2Ch]
.text:004045A7                 mov     dword ptr [esp+18h], 0
.text:004045AF                 mov     ecx, [esp+30h]
.text:004045B3                 mov     dword ptr [esp+14h], 1
.text:004045BB                 mov     [esp+0Ch], edx
.text:004045BF                 mov     edx, [esp+24h]
.text:004045C3                 mov     [esp+10h], ecx
.text:004045C7                 mov     ecx, [esp+28h]
.text:004045CB                 mov     [esp+4], edx
.text:004045CF                 mov     edx, [esp+20h]
.text:004045D3                 mov     [esp+8], ecx
.text:004045D7                 mov     [esp], edx
.text:004045DA                 call    sub_403D00
.text:004045DF                 add     esp, 1Ch
.text:004045E2                 retn
.text:004045E2 ; ---------------------------------------------------------------------------
.text:004045E3                 align 10h
.text:004045F0                 sub     esp, 2Ch
.text:004045F3                 mov     edx, [esp+44h]
.text:004045F7                 mov     dword ptr [esp+18h], 0
.text:004045FF                 mov     ecx, [esp+40h]
.text:00404603                 mov     dword ptr [esp+14h], 1
.text:0040460B                 mov     [esp+1Ch], edx
.text:0040460F                 mov     edx, [esp+3Ch]
.text:00404613                 mov     [esp+10h], ecx
.text:00404617                 mov     ecx, [esp+38h]
.text:0040461B                 mov     [esp+0Ch], edx
.text:0040461F                 mov     edx, [esp+34h]
.text:00404623                 mov     [esp+8], ecx
.text:00404627                 mov     [esp+4], edx
.text:0040462B                 mov     edx, [esp+30h]
.text:0040462F                 mov     [esp], edx
.text:00404632                 call    sub_403170
.text:00404637                 add     esp, 2Ch
.text:0040463A                 retn
.text:0040463A ; ---------------------------------------------------------------------------
.text:0040463B                 align 10h
.text:00404640                 mov     edx, [esp+4]
.text:00404644                 mov     ds:dword_411040, edx
.text:0040464A                 retn
.text:0040464A ; ---------------------------------------------------------------------------
.text:0040464B aWriteError     db 'write error',0      ; DATA XREF: sub_404670:loc_4046B9↓o
.text:00404657 ; const char aSS_0[]
.text:00404657 aSS_0           db '%s: %s',0           ; DATA XREF: sub_404670+77↓o
.text:0040465E ; const char aS_2[]
.text:0040465E aS_2            db '%s',0               ; DATA XREF: sub_404670+A0↓o
.text:00404661 ; ---------------------------------------------------------------------------
.text:00404661                 jmp     short sub_404670
.text:00404661 ; ---------------------------------------------------------------------------
.text:00404663                 align 10h
.text:00404670
.text:00404670 ; =============== S U B R O U T I N E =======================================
.text:00404670
.text:00404670
.text:00404670 ; void __cdecl sub_404670()
.text:00404670 sub_404670      proc near               ; CODE XREF: .text:00404661↑j
.text:00404670                                         ; DATA XREF: sub_4016F0+6E↑o
.text:00404670
.text:00404670 Stream          = dword ptr -2Ch
.text:00404670 ErrorMessage    = dword ptr -28h
.text:00404670 var_24          = dword ptr -24h
.text:00404670 var_20          = byte ptr -20h
.text:00404670 var_1C          = dword ptr -1Ch
.text:00404670 var_9           = byte ptr -9
.text:00404670
.text:00404670                 push    esi
.text:00404671                 push    ebx
.text:00404672                 sub     esp, 24h
.text:00404675                 mov     edx, ds:_iob
.text:0040467B                 mov     ecx, [edx+2Ch]
.text:0040467E                 lea     esi, [edx+20h]
.text:00404681                 shr     ecx, 5
.text:00404684                 mov     bl, cl
.text:00404686                 mov     ecx, [edx+20h]
.text:00404689                 and     bl, 1
.text:0040468C                 cmp     ecx, [esi+8]
.text:0040468F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404692                 setz    [esp+2Ch+var_9]
.text:00404697                 call    fclose
.text:0040469C                 test    eax, eax
.text:0040469E                 setnz   al
.text:004046A1                 test    bl, bl
.text:004046A3                 jnz     loc_404733
.text:004046A9                 test    al, al
.text:004046AB                 jz      short loc_404700
.text:004046AD
.text:004046AD loc_4046AD:                             ; CODE XREF: sub_404670+CD↓j
.text:004046AD                 call    _errno
.text:004046B2                 mov     esi, [eax]
.text:004046B4
.text:004046B4 loc_4046B4:                             ; CODE XREF: sub_404670+C7↓j
.text:004046B4                 cmp     esi, 9
.text:004046B7                 jz      short loc_404726
.text:004046B9
.text:004046B9 loc_4046B9:                             ; CODE XREF: sub_404670+B8↓j
.text:004046B9                                         ; sub_404670+C1↓j
.text:004046B9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:004046C0                 call    ds:libintl_gettext
.text:004046C6                 mov     ebx, eax
.text:004046C8                 mov     eax, ds:dword_411040
.text:004046CD                 test    eax, eax
.text:004046CF                 jz      short loc_404706
.text:004046D1                 mov     [esp+2Ch+Stream], eax ; char *
.text:004046D4                 call    sub_405F50
.text:004046D9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:004046DD                 mov     edx, Code
.text:004046E3                 mov     [esp+2Ch+var_1C], ebx
.text:004046E7                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:004046EF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004046F3                 mov     [esp+2Ch+Stream], edx ; Code
.text:004046F6                 call    sub_406EF0
.text:004046FB                 nop
.text:004046FC                 lea     esi, [esi+0]
.text:00404700
.text:00404700 loc_404700:                             ; CODE XREF: sub_404670+3B↑j
.text:00404700                                         ; sub_404670+B4↓j ...
.text:00404700                 add     esp, 24h
.text:00404703                 pop     ebx
.text:00404704                 pop     esi
.text:00404705                 retn
.text:00404706 ; ---------------------------------------------------------------------------
.text:00404706
.text:00404706 loc_404706:                             ; CODE XREF: sub_404670+5F↑j
.text:00404706                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040470A                 mov     ebx, Code
.text:00404710                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00404718                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040471C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040471F                 call    sub_406EF0
.text:00404724                 jmp     short loc_404700
.text:00404726 ; ---------------------------------------------------------------------------
.text:00404726
.text:00404726 loc_404726:                             ; CODE XREF: sub_404670+47↑j
.text:00404726                 test    bl, bl
.text:00404728                 jnz     short loc_4046B9
.text:0040472A                 cmp     [esp+2Ch+var_9], 0
.text:0040472F                 jnz     short loc_404700
.text:00404731                 jmp     short loc_4046B9
.text:00404733 ; ---------------------------------------------------------------------------
.text:00404733
.text:00404733 loc_404733:                             ; CODE XREF: sub_404670+33↑j
.text:00404733                 xor     esi, esi
.text:00404735                 test    al, al
.text:00404737                 jz      loc_4046B4
.text:0040473D                 jmp     loc_4046AD
.text:0040473D sub_404670      endp
.text:0040473D
.text:0040473D ; ---------------------------------------------------------------------------
.text:00404742                 align 10h
.text:00404750
.text:00404750 ; =============== S U B R O U T I N E =======================================
.text:00404750
.text:00404750
.text:00404750 sub_404750      proc near               ; CODE XREF: sub_401E50+202↑p
.text:00404750                                         ; sub_406D20+45↓p
.text:00404750
.text:00404750 var_4           = dword ptr -4
.text:00404750 arg_0           = dword ptr  4
.text:00404750
.text:00404750                 sub     esp, 0Ch
.text:00404753                 mov     [esp+0Ch+var_4], ebx
.text:00404757                 mov     ebx, [esp+0Ch+arg_0]
.text:0040475B                 mov     dword ptr [ebx], 0FFFFFFFFh
.text:00404761                 mov     dword ptr [ebx+4], 0
.text:00404768                 call    sub_4068E0
.text:0040476D                 mov     [ebx+4], eax
.text:00404770                 test    eax, eax
.text:00404772                 mov     ebx, [esp+0Ch+var_4]
.text:00404776                 setnz   dl
.text:00404779                 add     esp, 0Ch
.text:0040477C                 movzx   eax, dl
.text:0040477F                 dec     eax
.text:00404780                 retn
.text:00404780 sub_404750      endp
.text:00404780
.text:00404781 ; ---------------------------------------------------------------------------
.text:00404781                 jmp     short sub_404790
.text:00404781 ; ---------------------------------------------------------------------------
.text:00404783                 align 10h
.text:00404790
.text:00404790 ; =============== S U B R O U T I N E =======================================
.text:00404790
.text:00404790
.text:00404790 sub_404790      proc near               ; CODE XREF: sub_401E50+3A6↑p
.text:00404790                                         ; sub_401E50:loc_4022D8↑p ...
.text:00404790
.text:00404790 arg_0           = dword ptr  4
.text:00404790
.text:00404790                 sub     esp, 0Ch
.text:00404793                 mov     eax, [esp+0Ch+arg_0]
.text:00404797                 mov     ecx, [eax]
.text:00404799                 test    ecx, ecx
.text:0040479B                 jns     short loc_4047AC
.text:0040479D                 mov     edx, [eax+4]
.text:004047A0                 mov     [esp+0Ch+arg_0], edx ; LPCSTR
.text:004047A4                 add     esp, 0Ch
.text:004047A7                 jmp     sub_406250
.text:004047AC ; ---------------------------------------------------------------------------
.text:004047AC
.text:004047AC loc_4047AC:                             ; CODE XREF: sub_404790+B↑j
.text:004047AC                 call    abort
.text:004047AC sub_404790      endp
.text:004047AC
.text:004047B1 ; ---------------------------------------------------------------------------
.text:004047B1                 jmp     short sub_4047C0
.text:004047B1 ; ---------------------------------------------------------------------------
.text:004047B3                 align 10h
.text:004047C0
.text:004047C0 ; =============== S U B R O U T I N E =======================================
.text:004047C0
.text:004047C0
.text:004047C0 ; int __cdecl sub_4047C0(void *Block)
.text:004047C0 sub_4047C0      proc near               ; CODE XREF: sub_401E50+3B6↑p
.text:004047C0                                         ; sub_401E50:loc_402248↑p ...
.text:004047C0
.text:004047C0 FileHandle      = dword ptr -0Ch
.text:004047C0 var_4           = dword ptr -4
.text:004047C0 Block           = dword ptr  4
.text:004047C0
.text:004047C0                 sub     esp, 0Ch
.text:004047C3                 mov     [esp+0Ch+var_4], ebx
.text:004047C7                 mov     ebx, [esp+0Ch+Block]
.text:004047CB                 mov     eax, [ebx]
.text:004047CD                 test    eax, eax
.text:004047CF                 js      short loc_4047D9
.text:004047D1                 mov     [esp+0Ch+FileHandle], eax ; FileHandle
.text:004047D4                 call    _close
.text:004047D9
.text:004047D9 loc_4047D9:                             ; CODE XREF: sub_4047C0+F↑j
.text:004047D9                 mov     eax, [ebx+4]
.text:004047DC                 test    eax, eax
.text:004047DE                 jnz     short loc_4047E8
.text:004047E0                 mov     ebx, [esp+0Ch+var_4]
.text:004047E4                 add     esp, 0Ch
.text:004047E7                 retn
.text:004047E8 ; ---------------------------------------------------------------------------
.text:004047E8
.text:004047E8 loc_4047E8:                             ; CODE XREF: sub_4047C0+1E↑j
.text:004047E8                 mov     [esp+0Ch+Block], eax ; Block
.text:004047EC                 mov     ebx, [esp+0Ch+var_4]
.text:004047F0                 add     esp, 0Ch
.text:004047F3                 jmp     free
.text:004047F3 sub_4047C0      endp
.text:004047F3
.text:004047F3 ; ---------------------------------------------------------------------------
.text:004047F8                 align 10h
.text:00404800
.text:00404800 ; =============== S U B R O U T I N E =======================================
.text:00404800
.text:00404800
.text:00404800 sub_404800      proc near               ; CODE XREF: sub_401E50+1D3↑p
.text:00404800
.text:00404800 var_C           = dword ptr -0Ch
.text:00404800 var_4           = dword ptr -4
.text:00404800 arg_0           = dword ptr  4
.text:00404800
.text:00404800                 sub     esp, 0Ch
.text:00404803                 mov     edx, [esp+0Ch+arg_0]
.text:00404807                 mov     [esp+0Ch+var_4], ebx
.text:0040480B                 mov     [esp+0Ch+var_C], edx
.text:0040480E                 call    sub_406920
.text:00404813                 mov     [esp+0Ch+var_C], eax ; char *
.text:00404816                 mov     ebx, eax
.text:00404818                 call    sub_406980
.text:0040481D                 lea     edx, [eax+ebx]
.text:00404820                 cmp     byte ptr [edx], 0
.text:00404823                 mov     byte ptr [edx], 0
.text:00404826                 mov     ebx, [esp+0Ch+var_4]
.text:0040482A                 setnz   cl
.text:0040482D                 add     esp, 0Ch
.text:00404830                 movzx   eax, cl
.text:00404833                 retn
.text:00404833 sub_404800      endp
.text:00404833
.text:00404833 ; ---------------------------------------------------------------------------
.text:00404834                 align 10h
.text:00404840 aCoreutils530Sr db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00404840                                         ; DATA XREF: sub_4048B0+544↓o
.text:00404868                 align 20h
.text:00404880 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:00404880                                         ; DATA XREF: sub_4048B0+54C↓o
.text:004048A6                 align 10h
.text:004048B0
.text:004048B0 ; =============== S U B R O U T I N E =======================================
.text:004048B0
.text:004048B0
.text:004048B0 ; int __cdecl sub_4048B0(int, int, int, int, char *Str)
.text:004048B0 sub_4048B0      proc near               ; CODE XREF: sub_402850+36↑p
.text:004048B0
.text:004048B0 C               = dword ptr -3Ch
.text:004048B0 Type            = dword ptr -38h
.text:004048B0 Radix           = dword ptr -34h
.text:004048B0 var_28          = dword ptr -28h
.text:004048B0 var_24          = dword ptr -24h
.text:004048B0 var_1D          = byte ptr -1Dh
.text:004048B0 var_1C          = dword ptr -1Ch
.text:004048B0 var_18          = dword ptr -18h
.text:004048B0 var_14          = byte ptr -14h
.text:004048B0 arg_0           = dword ptr  4
.text:004048B0 arg_4           = dword ptr  8
.text:004048B0 arg_8           = dword ptr  0Ch
.text:004048B0 arg_C           = dword ptr  10h
.text:004048B0 Str             = dword ptr  14h
.text:004048B0
.text:004048B0                 push    ebp
.text:004048B1                 push    edi
.text:004048B2                 push    esi
.text:004048B3                 push    ebx
.text:004048B4                 sub     esp, 2Ch
.text:004048B7                 mov     ebp, [esp+3Ch+arg_8]
.text:004048BB                 mov     [esp+3Ch+var_1C], 0
.text:004048C3                 mov     esi, [esp+3Ch+arg_0]
.text:004048C7                 cmp     ebp, 24h ; '$'
.text:004048CA                 ja      loc_404DEC
.text:004048D0                 mov     edi, [esp+3Ch+arg_4]
.text:004048D4                 test    edi, edi
.text:004048D6                 jz      loc_404DE3
.text:004048DC
.text:004048DC loc_4048DC:                             ; CODE XREF: sub_4048B0+537↓j
.text:004048DC                 movzx   edx, byte ptr [esi]
.text:004048DF                 mov     ebx, esi
.text:004048E1                 mov     [esp+3Ch+var_1D], dl
.text:004048E5                 lea     esi, [esi+0]
.text:004048E9                 lea     edi, [edi+0]
.text:004048F0
.text:004048F0 loc_4048F0:                             ; CODE XREF: sub_4048B0+70↓j
.text:004048F0                 movzx   edx, [esp+3Ch+var_1D]
.text:004048F5                 mov     ecx, ds:__mb_cur_max
.text:004048FB                 cmp     dword ptr [ecx], 1
.text:004048FE                 jz      loc_404DD0
.text:00404904                 mov     [esp+3Ch+Type], 8 ; Type
.text:0040490C                 mov     [esp+3Ch+C], edx ; C
.text:0040490F                 call    _isctype
.text:00404914
.text:00404914 loc_404914:                             ; CODE XREF: sub_4048B0+52E↓j
.text:00404914                 test    eax, eax
.text:00404916                 jz      short loc_404922
.text:00404918                 inc     ebx
.text:00404919                 movzx   eax, byte ptr [ebx]
.text:0040491C                 mov     [esp+3Ch+var_1D], al
.text:00404920                 jmp     short loc_4048F0
.text:00404922 ; ---------------------------------------------------------------------------
.text:00404922
.text:00404922 loc_404922:                             ; CODE XREF: sub_4048B0+66↑j
.text:00404922                 cmp     [esp+3Ch+var_1D], 2Dh ; '-'
.text:00404927                 mov     eax, 4
.text:0040492C                 jz      short loc_404985
.text:0040492E                 call    _errno
.text:00404933                 mov     dword ptr [eax], 0
.text:00404939                 mov     [esp+3Ch+Radix], ebp ; Radix
.text:0040493D                 mov     [esp+3Ch+Type], edi ; EndPtr
.text:00404941                 mov     [esp+3Ch+C], esi ; String
.text:00404944                 call    strtoul
.text:00404949                 mov     [esp+3Ch+var_18], eax
.text:0040494D                 mov     eax, [edi]
.text:0040494F                 cmp     eax, esi
.text:00404951                 jz      loc_404D9C
.text:00404957                 call    _errno
.text:0040495C                 mov     ebp, [eax]
.text:0040495E                 test    ebp, ebp
.text:00404960                 jnz     loc_404D7B
.text:00404966
.text:00404966 loc_404966:                             ; CODE XREF: sub_4048B0+4DD↓j
.text:00404966                                         ; sub_4048B0+51A↓j
.text:00404966                 mov     eax, [esp+3Ch+Str]
.text:0040496A                 test    eax, eax
.text:0040496C                 jz      short loc_404977
.text:0040496E                 mov     ecx, [edi]
.text:00404970                 movzx   eax, byte ptr [ecx]
.text:00404973                 test    al, al
.text:00404975                 jnz     short loc_40498D
.text:00404977
.text:00404977 loc_404977:                             ; CODE XREF: sub_4048B0+BC↑j
.text:00404977                                         ; sub_4048B0+26C↓j ...
.text:00404977                 mov     edx, [esp+3Ch+var_18]
.text:0040497B                 mov     esi, [esp+3Ch+arg_C]
.text:0040497F                 mov     eax, [esp+3Ch+var_1C]
.text:00404983                 mov     [esi], edx
.text:00404985
.text:00404985 loc_404985:                             ; CODE XREF: sub_4048B0+7C↑j
.text:00404985                                         ; sub_4048B0+112↓j ...
.text:00404985                 add     esp, 2Ch
.text:00404988                 pop     ebx
.text:00404989                 pop     esi
.text:0040498A                 pop     edi
.text:0040498B                 pop     ebp
.text:0040498C                 retn
.text:0040498D ; ---------------------------------------------------------------------------
.text:0040498D
.text:0040498D loc_40498D:                             ; CODE XREF: sub_4048B0+C5↑j
.text:0040498D                 mov     [esp+3Ch+var_24], 1
.text:00404995                 mov     edx, [esp+3Ch+Str]
.text:00404999                 movsx   esi, al
.text:0040499C                 mov     [esp+3Ch+Type], esi ; Val
.text:004049A0                 mov     ebx, 400h
.text:004049A5                 mov     [esp+3Ch+C], edx ; Str
.text:004049A8                 call    strchr
.text:004049AD                 test    eax, eax
.text:004049AF                 jnz     short loc_4049C4
.text:004049B1
.text:004049B1 def_404A14:                             ; CODE XREF: sub_4048B0+162↓j
.text:004049B1                                         ; sub_4048B0+164↓j
.text:004049B1                                         ; DATA XREF: ...
.text:004049B1                 mov     eax, [esp+3Ch+var_1C] ; jumptable 00404A14 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:004049B5                 mov     ebx, [esp+3Ch+var_18]
.text:004049B9                 mov     edi, [esp+3Ch+arg_C]
.text:004049BD                 or      eax, 2
.text:004049C0                 mov     [edi], ebx
.text:004049C2                 jmp     short loc_404985
.text:004049C4 ; ---------------------------------------------------------------------------
.text:004049C4
.text:004049C4 loc_4049C4:                             ; CODE XREF: sub_4048B0+FF↑j
.text:004049C4                 mov     [esp+3Ch+Type], 30h ; '0' ; Val
.text:004049CC                 mov     ebp, [esp+3Ch+Str]
.text:004049D0                 mov     [esp+3Ch+C], ebp ; Str
.text:004049D3                 call    strchr
.text:004049D8                 test    eax, eax
.text:004049DA                 jz      loc_404D70
.text:004049E0                 mov     ecx, [edi]
.text:004049E2                 mov     [esp+3Ch+var_28], ecx
.text:004049E6                 movsx   eax, byte ptr [ecx+1]
.text:004049EA                 cmp     eax, 44h ; 'D'
.text:004049ED                 jz      loc_404D39
.text:004049F3                 cmp     eax, 44h ; 'D'
.text:004049F6                 jg      loc_404D4B
.text:004049FC                 cmp     eax, 42h ; 'B'
.text:004049FF                 jz      loc_404D39
.text:00404A05
.text:00404A05 loc_404A05:                             ; CODE XREF: sub_4048B0+496↓j
.text:00404A05                                         ; sub_4048B0+49E↓j ...
.text:00404A05                 mov     esi, [esp+3Ch+var_28]
.text:00404A09                 movsx   eax, byte ptr [esi]
.text:00404A0C                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00404A0F                 cmp     eax, 35h
.text:00404A12                 ja      short def_404A14 ; jumptable 00404A14 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00404A14                 jmp     ds:jpt_404A14[eax*4] ; switch jump
.text:00404A14 ; ---------------------------------------------------------------------------
.text:00404A1B                 align 4
.text:00404A1C jpt_404A14      dd offset loc_404B3B, offset def_404A14, offset def_404A14
.text:00404A1C                                         ; DATA XREF: sub_4048B0+164↑r
.text:00404A1C                 dd offset loc_404B4B, offset def_404A14, offset loc_404C3C ; jump table for switch statement
.text:00404A1C                 dd offset def_404A14, offset def_404A14, offset def_404A14
.text:00404A1C                 dd offset loc_404C79, offset def_404A14, offset loc_404CAB
.text:00404A1C                 dd offset def_404A14, offset def_404A14, offset loc_404B85
.text:00404A1C                 dd offset def_404A14, offset def_404A14, offset def_404A14
.text:00404A1C                 dd offset loc_404CE9, offset def_404A14, offset def_404A14
.text:00404A1C                 dd offset def_404A14, offset def_404A14, offset loc_404BC2
.text:00404A1C                 dd offset loc_404BFF, offset def_404A14, offset def_404A14
.text:00404A1C                 dd offset def_404A14, offset def_404A14, offset def_404A14
.text:00404A1C                 dd offset def_404A14, offset def_404A14, offset loc_404AF4
.text:00404A1C                 dd offset loc_404B06, offset def_404A14, offset def_404A14
.text:00404A1C                 dd offset def_404A14, offset loc_404C3C, offset def_404A14
.text:00404A1C                 dd offset def_404A14, offset def_404A14, offset loc_404C79
.text:00404A1C                 dd offset def_404A14, offset loc_404CAB, offset def_404A14
.text:00404A1C                 dd offset def_404A14, offset def_404A14, offset def_404A14
.text:00404A1C                 dd offset def_404A14, offset def_404A14, offset loc_404CE9
.text:00404A1C                 dd offset def_404A14, offset def_404A14, offset loc_404D26
.text:00404AF4 ; ---------------------------------------------------------------------------
.text:00404AF4
.text:00404AF4 loc_404AF4:                             ; CODE XREF: sub_4048B0+164↑j
.text:00404AF4                                         ; DATA XREF: sub_4048B0:jpt_404A14↑o
.text:00404AF4                 mov     eax, [esp+3Ch+var_18] ; jumptable 00404A14 case 98
.text:00404AF8                 cmp     eax, 7FFFFFh
.text:00404AFD                 ja      short loc_404B2C
.text:00404AFF                 shl     eax, 9
.text:00404B02
.text:00404B02 loc_404B02:                             ; CODE XREF: sub_4048B0+299↓j
.text:00404B02                                         ; sub_4048B0+484↓j
.text:00404B02                 mov     [esp+3Ch+var_18], eax
.text:00404B06
.text:00404B06 loc_404B06:                             ; CODE XREF: sub_4048B0+164↑j
.text:00404B06                                         ; DATA XREF: sub_4048B0:jpt_404A14↑o
.text:00404B06                 xor     eax, eax        ; jumptable 00404A14 case 99
.text:00404B08
.text:00404B08 loc_404B08:                             ; CODE XREF: sub_4048B0+289↓j
.text:00404B08                                         ; sub_4048B0+2CA↓j ...
.text:00404B08                 or      [esp+3Ch+var_1C], eax
.text:00404B0C                 mov     ebp, [esp+3Ch+var_28]
.text:00404B10                 mov     ecx, [esp+3Ch+var_24]
.text:00404B14                 add     ebp, ecx
.text:00404B16                 mov     [edi], ebp
.text:00404B18                 cmp     byte ptr [ebp+0], 0
.text:00404B1C                 jz      loc_404977
.text:00404B22                 or      [esp+3Ch+var_1C], 2
.text:00404B27                 jmp     loc_404977
.text:00404B2C ; ---------------------------------------------------------------------------
.text:00404B2C
.text:00404B2C loc_404B2C:                             ; CODE XREF: sub_4048B0+24D↑j
.text:00404B2C                                         ; sub_4048B0+294↓j ...
.text:00404B2C                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00404B34                 mov     eax, 1
.text:00404B39                 jmp     short loc_404B08
.text:00404B3B ; ---------------------------------------------------------------------------
.text:00404B3B
.text:00404B3B loc_404B3B:                             ; CODE XREF: sub_4048B0+164↑j
.text:00404B3B                                         ; DATA XREF: sub_4048B0:jpt_404A14↑o
.text:00404B3B                 mov     eax, [esp+3Ch+var_18] ; jumptable 00404A14 case 66
.text:00404B3F                 cmp     eax, 3FFFFFh
.text:00404B44                 ja      short loc_404B2C
.text:00404B46                 shl     eax, 0Ah
.text:00404B49                 jmp     short loc_404B02
.text:00404B4B ; ---------------------------------------------------------------------------
.text:00404B4B
.text:00404B4B loc_404B4B:                             ; CODE XREF: sub_4048B0+164↑j
.text:00404B4B                                         ; DATA XREF: sub_4048B0:jpt_404A14↑o
.text:00404B4B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404A14 case 69
.text:00404B4F                 xor     ebp, ebp
.text:00404B51                 mov     esi, 5
.text:00404B56
.text:00404B56 loc_404B56:                             ; CODE XREF: sub_4048B0+2C8↓j
.text:00404B56                 xor     edx, edx
.text:00404B58                 mov     eax, 0FFFFFFFFh
.text:00404B5D                 div     ebx
.text:00404B5F                 mov     edx, [ecx]
.text:00404B61                 cmp     eax, edx
.text:00404B63                 jnb     short loc_404B7C
.text:00404B65                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00404B6B                 mov     eax, 1
.text:00404B70
.text:00404B70 loc_404B70:                             ; CODE XREF: sub_4048B0+2D3↓j
.text:00404B70                 dec     esi
.text:00404B71                 or      ebp, eax
.text:00404B73                 cmp     esi, 0FFFFFFFFh
.text:00404B76                 mov     eax, ebp
.text:00404B78                 jnz     short loc_404B56
.text:00404B7A                 jmp     short loc_404B08
.text:00404B7C ; ---------------------------------------------------------------------------
.text:00404B7C
.text:00404B7C loc_404B7C:                             ; CODE XREF: sub_4048B0+2B3↑j
.text:00404B7C                 imul    edx, ebx
.text:00404B7F                 xor     eax, eax
.text:00404B81                 mov     [ecx], edx
.text:00404B83                 jmp     short loc_404B70
.text:00404B85 ; ---------------------------------------------------------------------------
.text:00404B85
.text:00404B85 loc_404B85:                             ; CODE XREF: sub_4048B0+164↑j
.text:00404B85                                         ; DATA XREF: sub_4048B0:jpt_404A14↑o
.text:00404B85                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404A14 case 80
.text:00404B89                 xor     ebp, ebp
.text:00404B8B                 mov     esi, 4
.text:00404B90
.text:00404B90 loc_404B90:                             ; CODE XREF: sub_4048B0+302↓j
.text:00404B90                 xor     edx, edx
.text:00404B92                 mov     eax, 0FFFFFFFFh
.text:00404B97                 div     ebx
.text:00404B99                 mov     edx, [ecx]
.text:00404B9B                 cmp     eax, edx
.text:00404B9D                 jnb     short loc_404BB9
.text:00404B9F                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00404BA5                 mov     eax, 1
.text:00404BAA
.text:00404BAA loc_404BAA:                             ; CODE XREF: sub_4048B0+310↓j
.text:00404BAA                 dec     esi
.text:00404BAB                 or      ebp, eax
.text:00404BAD                 cmp     esi, 0FFFFFFFFh
.text:00404BB0                 mov     eax, ebp
.text:00404BB2                 jnz     short loc_404B90
.text:00404BB4                 jmp     loc_404B08
.text:00404BB9 ; ---------------------------------------------------------------------------
.text:00404BB9
.text:00404BB9 loc_404BB9:                             ; CODE XREF: sub_4048B0+2ED↑j
.text:00404BB9                 imul    edx, ebx
.text:00404BBC                 xor     eax, eax
.text:00404BBE                 mov     [ecx], edx
.text:00404BC0                 jmp     short loc_404BAA
.text:00404BC2 ; ---------------------------------------------------------------------------
.text:00404BC2
.text:00404BC2 loc_404BC2:                             ; CODE XREF: sub_4048B0+164↑j
.text:00404BC2                                         ; DATA XREF: sub_4048B0:jpt_404A14↑o
.text:00404BC2                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404A14 case 89
.text:00404BC6                 xor     ebp, ebp
.text:00404BC8                 mov     esi, 7
.text:00404BCD
.text:00404BCD loc_404BCD:                             ; CODE XREF: sub_4048B0+33F↓j
.text:00404BCD                 xor     edx, edx
.text:00404BCF                 mov     eax, 0FFFFFFFFh
.text:00404BD4                 div     ebx
.text:00404BD6                 mov     edx, [ecx]
.text:00404BD8                 cmp     eax, edx
.text:00404BDA                 jnb     short loc_404BF6
.text:00404BDC                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00404BE2                 mov     eax, 1
.text:00404BE7
.text:00404BE7 loc_404BE7:                             ; CODE XREF: sub_4048B0+34D↓j
.text:00404BE7                 dec     esi
.text:00404BE8                 or      ebp, eax
.text:00404BEA                 cmp     esi, 0FFFFFFFFh
.text:00404BED                 mov     eax, ebp
.text:00404BEF                 jnz     short loc_404BCD
.text:00404BF1                 jmp     loc_404B08
.text:00404BF6 ; ---------------------------------------------------------------------------
.text:00404BF6
.text:00404BF6 loc_404BF6:                             ; CODE XREF: sub_4048B0+32A↑j
.text:00404BF6                 imul    edx, ebx
.text:00404BF9                 xor     eax, eax
.text:00404BFB                 mov     [ecx], edx
.text:00404BFD                 jmp     short loc_404BE7
.text:00404BFF ; ---------------------------------------------------------------------------
.text:00404BFF
.text:00404BFF loc_404BFF:                             ; CODE XREF: sub_4048B0+164↑j
.text:00404BFF                                         ; DATA XREF: sub_4048B0:jpt_404A14↑o
.text:00404BFF                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404A14 case 90
.text:00404C03                 xor     ebp, ebp
.text:00404C05                 mov     esi, 6
.text:00404C0A
.text:00404C0A loc_404C0A:                             ; CODE XREF: sub_4048B0+37C↓j
.text:00404C0A                 xor     edx, edx
.text:00404C0C                 mov     eax, 0FFFFFFFFh
.text:00404C11                 div     ebx
.text:00404C13                 mov     edx, [ecx]
.text:00404C15                 cmp     eax, edx
.text:00404C17                 jnb     short loc_404C33
.text:00404C19                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00404C1F                 mov     eax, 1
.text:00404C24
.text:00404C24 loc_404C24:                             ; CODE XREF: sub_4048B0+38A↓j
.text:00404C24                 dec     esi
.text:00404C25                 or      ebp, eax
.text:00404C27                 cmp     esi, 0FFFFFFFFh
.text:00404C2A                 mov     eax, ebp
.text:00404C2C                 jnz     short loc_404C0A
.text:00404C2E                 jmp     loc_404B08
.text:00404C33 ; ---------------------------------------------------------------------------
.text:00404C33
.text:00404C33 loc_404C33:                             ; CODE XREF: sub_4048B0+367↑j
.text:00404C33                 imul    edx, ebx
.text:00404C36                 xor     eax, eax
.text:00404C38                 mov     [ecx], edx
.text:00404C3A                 jmp     short loc_404C24
.text:00404C3C ; ---------------------------------------------------------------------------
.text:00404C3C
.text:00404C3C loc_404C3C:                             ; CODE XREF: sub_4048B0+164↑j
.text:00404C3C                                         ; DATA XREF: sub_4048B0:jpt_404A14↑o
.text:00404C3C                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404A14 cases 71,103
.text:00404C40                 xor     ebp, ebp
.text:00404C42                 mov     esi, 2
.text:00404C47
.text:00404C47 loc_404C47:                             ; CODE XREF: sub_4048B0+3B9↓j
.text:00404C47                 xor     edx, edx
.text:00404C49                 mov     eax, 0FFFFFFFFh
.text:00404C4E                 div     ebx
.text:00404C50                 mov     edx, [ecx]
.text:00404C52                 cmp     eax, edx
.text:00404C54                 jnb     short loc_404C70
.text:00404C56                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00404C5C                 mov     eax, 1
.text:00404C61
.text:00404C61 loc_404C61:                             ; CODE XREF: sub_4048B0+3C7↓j
.text:00404C61                 dec     esi
.text:00404C62                 or      ebp, eax
.text:00404C64                 cmp     esi, 0FFFFFFFFh
.text:00404C67                 mov     eax, ebp
.text:00404C69                 jnz     short loc_404C47
.text:00404C6B                 jmp     loc_404B08
.text:00404C70 ; ---------------------------------------------------------------------------
.text:00404C70
.text:00404C70 loc_404C70:                             ; CODE XREF: sub_4048B0+3A4↑j
.text:00404C70                 imul    edx, ebx
.text:00404C73                 xor     eax, eax
.text:00404C75                 mov     [ecx], edx
.text:00404C77                 jmp     short loc_404C61
.text:00404C79 ; ---------------------------------------------------------------------------
.text:00404C79
.text:00404C79 loc_404C79:                             ; CODE XREF: sub_4048B0+164↑j
.text:00404C79                                         ; DATA XREF: sub_4048B0:jpt_404A14↑o
.text:00404C79                 xor     edx, edx        ; jumptable 00404A14 cases 75,107
.text:00404C7B                 mov     eax, 0FFFFFFFFh
.text:00404C80                 div     ebx
.text:00404C82                 mov     edx, [esp+3Ch+var_18]
.text:00404C86                 cmp     eax, edx
.text:00404C88                 jnb     short loc_404CA0
.text:00404C8A                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00404C92                 mov     edx, 1
.text:00404C97
.text:00404C97 loc_404C97:                             ; CODE XREF: sub_4048B0+3F9↓j
.text:00404C97                 xor     eax, eax
.text:00404C99                 or      eax, edx
.text:00404C9B                 jmp     loc_404B08
.text:00404CA0 ; ---------------------------------------------------------------------------
.text:00404CA0
.text:00404CA0 loc_404CA0:                             ; CODE XREF: sub_4048B0+3D8↑j
.text:00404CA0                 imul    edx, ebx
.text:00404CA3                 mov     [esp+3Ch+var_18], edx
.text:00404CA7                 xor     edx, edx
.text:00404CA9                 jmp     short loc_404C97
.text:00404CAB ; ---------------------------------------------------------------------------
.text:00404CAB
.text:00404CAB loc_404CAB:                             ; CODE XREF: sub_4048B0+164↑j
.text:00404CAB                                         ; DATA XREF: sub_4048B0:jpt_404A14↑o
.text:00404CAB                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404A14 cases 77,109
.text:00404CAF                 xor     ebp, ebp
.text:00404CB1                 mov     esi, 1
.text:00404CB6
.text:00404CB6 loc_404CB6:                             ; CODE XREF: sub_4048B0+42E↓j
.text:00404CB6                 xor     edx, edx
.text:00404CB8                 mov     eax, 0FFFFFFFFh
.text:00404CBD                 div     ebx
.text:00404CBF                 mov     edx, [ecx]
.text:00404CC1                 cmp     eax, edx
.text:00404CC3                 jnb     short loc_404CE0
.text:00404CC5                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00404CCB                 mov     eax, 1
.text:00404CD0
.text:00404CD0 loc_404CD0:                             ; CODE XREF: sub_4048B0+437↓j
.text:00404CD0                 dec     esi
.text:00404CD1                 or      ebp, eax
.text:00404CD3                 cmp     esi, 0FFFFFFFFh
.text:00404CD6                 mov     eax, ebp
.text:00404CD8                 jz      loc_404B08
.text:00404CDE                 jmp     short loc_404CB6
.text:00404CE0 ; ---------------------------------------------------------------------------
.text:00404CE0
.text:00404CE0 loc_404CE0:                             ; CODE XREF: sub_4048B0+413↑j
.text:00404CE0                 imul    edx, ebx
.text:00404CE3                 xor     eax, eax
.text:00404CE5                 mov     [ecx], edx
.text:00404CE7                 jmp     short loc_404CD0
.text:00404CE9 ; ---------------------------------------------------------------------------
.text:00404CE9
.text:00404CE9 loc_404CE9:                             ; CODE XREF: sub_4048B0+164↑j
.text:00404CE9                                         ; DATA XREF: sub_4048B0:jpt_404A14↑o
.text:00404CE9                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404A14 cases 84,116
.text:00404CED                 xor     ebp, ebp
.text:00404CEF                 mov     esi, 3
.text:00404CF4
.text:00404CF4 loc_404CF4:                             ; CODE XREF: sub_4048B0+466↓j
.text:00404CF4                 xor     edx, edx
.text:00404CF6                 mov     eax, 0FFFFFFFFh
.text:00404CFB                 div     ebx
.text:00404CFD                 mov     edx, [ecx]
.text:00404CFF                 cmp     eax, edx
.text:00404D01                 jnb     short loc_404D1D
.text:00404D03                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00404D09                 mov     eax, 1
.text:00404D0E
.text:00404D0E loc_404D0E:                             ; CODE XREF: sub_4048B0+474↓j
.text:00404D0E                 dec     esi
.text:00404D0F                 or      ebp, eax
.text:00404D11                 cmp     esi, 0FFFFFFFFh
.text:00404D14                 mov     eax, ebp
.text:00404D16                 jnz     short loc_404CF4
.text:00404D18                 jmp     loc_404B08
.text:00404D1D ; ---------------------------------------------------------------------------
.text:00404D1D
.text:00404D1D loc_404D1D:                             ; CODE XREF: sub_4048B0+451↑j
.text:00404D1D                 imul    edx, ebx
.text:00404D20                 xor     eax, eax
.text:00404D22                 mov     [ecx], edx
.text:00404D24                 jmp     short loc_404D0E
.text:00404D26 ; ---------------------------------------------------------------------------
.text:00404D26
.text:00404D26 loc_404D26:                             ; CODE XREF: sub_4048B0+164↑j
.text:00404D26                                         ; DATA XREF: sub_4048B0:jpt_404A14↑o
.text:00404D26                 mov     eax, [esp+3Ch+var_18] ; jumptable 00404A14 case 119
.text:00404D2A                 test    eax, eax
.text:00404D2C                 js      loc_404B2C
.text:00404D32                 add     eax, eax
.text:00404D34                 jmp     loc_404B02
.text:00404D39 ; ---------------------------------------------------------------------------
.text:00404D39
.text:00404D39 loc_404D39:                             ; CODE XREF: sub_4048B0+13D↑j
.text:00404D39                                         ; sub_4048B0+14F↑j
.text:00404D39                 mov     [esp+3Ch+var_24], 2
.text:00404D41                 mov     ebx, 3E8h
.text:00404D46                 jmp     loc_404A05
.text:00404D4B ; ---------------------------------------------------------------------------
.text:00404D4B
.text:00404D4B loc_404D4B:                             ; CODE XREF: sub_4048B0+146↑j
.text:00404D4B                 cmp     eax, 69h ; 'i'
.text:00404D4E                 jnz     loc_404A05
.text:00404D54                 mov     edx, [esp+3Ch+var_28]
.text:00404D58                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:00404D5C                 jnz     loc_404A05
.text:00404D62                 mov     [esp+3Ch+var_24], 3
.text:00404D6A                 jmp     loc_404A05
.text:00404D6A ; ---------------------------------------------------------------------------
.text:00404D6F                 align 10h
.text:00404D70
.text:00404D70 loc_404D70:                             ; CODE XREF: sub_4048B0+12A↑j
.text:00404D70                 mov     eax, [edi]
.text:00404D72                 mov     [esp+3Ch+var_28], eax
.text:00404D76                 jmp     loc_404A05
.text:00404D7B ; ---------------------------------------------------------------------------
.text:00404D7B
.text:00404D7B loc_404D7B:                             ; CODE XREF: sub_4048B0+B0↑j
.text:00404D7B                 call    _errno
.text:00404D80                 cmp     dword ptr [eax], 22h ; '"'
.text:00404D83                 jnz     short loc_404D92
.text:00404D85                 mov     [esp+3Ch+var_1C], 1
.text:00404D8D                 jmp     loc_404966
.text:00404D92 ; ---------------------------------------------------------------------------
.text:00404D92
.text:00404D92 loc_404D92:                             ; CODE XREF: sub_4048B0+4D3↑j
.text:00404D92                                         ; sub_4048B0+4F2↓j ...
.text:00404D92                 mov     eax, 4
.text:00404D97                 jmp     loc_404985
.text:00404D9C ; ---------------------------------------------------------------------------
.text:00404D9C
.text:00404D9C loc_404D9C:                             ; CODE XREF: sub_4048B0+A1↑j
.text:00404D9C                 mov     edx, [esp+3Ch+Str]
.text:00404DA0                 test    edx, edx
.text:00404DA2                 jz      short loc_404D92
.text:00404DA4                 movzx   eax, byte ptr [eax]
.text:00404DA7                 test    al, al
.text:00404DA9                 jz      short loc_404D92
.text:00404DAB                 mov     ebx, [esp+3Ch+Str]
.text:00404DAF                 movsx   esi, al
.text:00404DB2                 mov     [esp+3Ch+Type], esi ; Val
.text:00404DB6                 mov     [esp+3Ch+C], ebx ; Str
.text:00404DB9                 call    strchr
.text:00404DBE                 test    eax, eax
.text:00404DC0                 jz      short loc_404D92
.text:00404DC2                 mov     [esp+3Ch+var_18], 1
.text:00404DCA                 jmp     loc_404966
.text:00404DCA ; ---------------------------------------------------------------------------
.text:00404DCF                 align 10h
.text:00404DD0
.text:00404DD0 loc_404DD0:                             ; CODE XREF: sub_4048B0+4E↑j
.text:00404DD0                 mov     eax, ds:_pctype
.text:00404DD5                 mov     ecx, [eax]
.text:00404DD7                 movzx   eax, word ptr [ecx+edx*2]
.text:00404DDB                 and     eax, 8
.text:00404DDE                 jmp     loc_404914
.text:00404DE3 ; ---------------------------------------------------------------------------
.text:00404DE3
.text:00404DE3 loc_404DE3:                             ; CODE XREF: sub_4048B0+26↑j
.text:00404DE3                 lea     edi, [esp+3Ch+var_14]
.text:00404DE7                 jmp     loc_4048DC
.text:00404DEC ; ---------------------------------------------------------------------------
.text:00404DEC
.text:00404DEC loc_404DEC:                             ; CODE XREF: sub_4048B0+1A↑j
.text:00404DEC                 mov     [esp+3Ch+Radix], 70h ; 'p'
.text:00404DF4                 mov     [esp+3Ch+Type], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:00404DFC                 mov     [esp+3Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00404E03                 call    _assert
.text:00404E03 sub_4048B0      endp
.text:00404E03
.text:00404E03 ; ---------------------------------------------------------------------------
.text:00404E08                 align 20h
.text:00404E20 aLiteral        db 'literal',0          ; DATA XREF: .text:00404E60↓o
.text:00404E28 aShell          db 'shell',0            ; DATA XREF: .text:00404E64↓o
.text:00404E2E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00404E68↓o
.text:00404E3B aC              db 'c',0                ; DATA XREF: .text:00404E6C↓o
.text:00404E3D aEscape         db 'escape',0           ; DATA XREF: .text:00404E70↓o
.text:00404E44 aLocale         db 'locale',0           ; DATA XREF: .text:00404E74↓o
.text:00404E4B aClocale        db 'clocale',0          ; DATA XREF: .text:00404E78↓o
.text:00404E53                 align 10h
.text:00404E60                 dd offset aLiteral      ; "literal"
.text:00404E64                 dd offset aShell        ; "shell"
.text:00404E68                 dd offset aShellAlways  ; "shell-always"
.text:00404E6C                 dd offset aC            ; "c"
.text:00404E70                 dd offset aEscape       ; "escape"
.text:00404E74                 dd offset aLocale       ; "locale"
.text:00404E78                 dd offset aClocale      ; "clocale"
.text:00404E7C                 dd 2 dup(0)
.text:00404E84                 dd 1, 2, 3, 4, 5, 6
.text:00404E9C asc_404E9C:                             ; DATA XREF: sub_404EB0+7E↓o
.text:00404E9C                                         ; sub_404EB0+A39↓o ...
.text:00404E9C                 text "UTF-16LE", '"',27h,'`'
.text:00404EA2                 align 10h
.text:00404EB0
.text:00404EB0 ; =============== S U B R O U T I N E =======================================
.text:00404EB0
.text:00404EB0
.text:00404EB0 ; int __cdecl sub_404EB0(int, int, char *Str, int, int, int)
.text:00404EB0 sub_404EB0      proc near               ; CODE XREF: sub_404EB0+43A↓p
.text:00404EB0                                         ; .text:00405A73↓p ...
.text:00404EB0
.text:00404EB0 C               = dword ptr -4Ch
.text:00404EB0 Type            = dword ptr -48h
.text:00404EB0 SizeInBytes     = dword ptr -44h
.text:00404EB0 State           = dword ptr -40h
.text:00404EB0 var_3C          = dword ptr -3Ch
.text:00404EB0 var_38          = dword ptr -38h
.text:00404EB0 var_34          = dword ptr -34h
.text:00404EB0 var_30          = dword ptr -30h
.text:00404EB0 var_29          = byte ptr -29h
.text:00404EB0 var_28          = dword ptr -28h
.text:00404EB0 var_22          = byte ptr -22h
.text:00404EB0 var_21          = byte ptr -21h
.text:00404EB0 var_20          = dword ptr -20h
.text:00404EB0 var_1C          = dword ptr -1Ch
.text:00404EB0 var_18          = mbstate_t ptr -18h
.text:00404EB0 arg_0           = dword ptr  4
.text:00404EB0 arg_4           = dword ptr  8
.text:00404EB0 Str             = dword ptr  0Ch
.text:00404EB0 arg_C           = dword ptr  10h
.text:00404EB0 arg_10          = dword ptr  14h
.text:00404EB0 arg_14          = dword ptr  18h
.text:00404EB0
.text:00404EB0                 push    ebp
.text:00404EB1                 push    edi
.text:00404EB2                 push    esi
.text:00404EB3                 push    ebx
.text:00404EB4                 sub     esp, 3Ch
.text:00404EB7                 mov     edx, ds:__mb_cur_max
.text:00404EBD                 mov     [esp+4Ch+var_34], 0
.text:00404EC5                 mov     [esp+4Ch+var_1C], 0
.text:00404ECD                 cmp     dword ptr [edx], 1
.text:00404ED0                 mov     [esp+4Ch+var_20], 0
.text:00404ED8                 mov     [esp+4Ch+var_21], 0
.text:00404EDD                 setz    [esp+4Ch+var_22]
.text:00404EE2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00404EE7                 ja      short def_404EED ; jumptable 00404EED default case, cases 0,1
.text:00404EE9                 mov     edx, [esp+4Ch+arg_10]
.text:00404EED                 jmp     ds:jpt_404EED[edx*4] ; switch jump
.text:00404EED ; ---------------------------------------------------------------------------
.text:00404EF4 jpt_404EED      dd offset def_404EED    ; DATA XREF: sub_404EB0+3D↑r
.text:00404EF4                 dd offset def_404EED    ; jump table for switch statement
.text:00404EF4                 dd offset loc_405835
.text:00404EF4                 dd offset loc_404F10
.text:00404EF4                 dd offset loc_40585B
.text:00404EF4                 dd offset loc_405865
.text:00404EF4                 dd offset loc_405865
.text:00404F10 ; ---------------------------------------------------------------------------
.text:00404F10
.text:00404F10 loc_404F10:                             ; CODE XREF: sub_404EB0+3D↑j
.text:00404F10                                         ; DATA XREF: sub_404EB0:jpt_404EED↑o
.text:00404F10                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00404EED case 3
.text:00404F14                 cmp     [esp+4Ch+var_34], eax
.text:00404F18                 jnb     short loc_404F21
.text:00404F1A                 mov     ebx, [esp+4Ch+arg_0]
.text:00404F1E                 mov     byte ptr [ebx], 22h ; '"'
.text:00404F21
.text:00404F21 loc_404F21:                             ; CODE XREF: sub_404EB0+68↑j
.text:00404F21                 mov     [esp+4Ch+var_34], 1
.text:00404F29                 mov     [esp+4Ch+var_21], 1
.text:00404F2E                 mov     [esp+4Ch+var_1C], offset asc_404E9C ; "\"'`"
.text:00404F36
.text:00404F36 loc_404F36:                             ; CODE XREF: sub_404EB0+9A6↓j
.text:00404F36                 mov     [esp+4Ch+var_20], 1
.text:00404F3E
.text:00404F3E def_404EED:                             ; CODE XREF: sub_404EB0+37↑j
.text:00404F3E                                         ; sub_404EB0+3D↑j ...
.text:00404F3E                 xor     ebp, ebp        ; jumptable 00404EED default case, cases 0,1
.text:00404F40
.text:00404F40 loc_404F40:                             ; CODE XREF: sub_404EB0+3DB↓j
.text:00404F40                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404F45                 jz      loc_405827
.text:00404F4B                 cmp     ebp, [esp+4Ch+arg_C]
.text:00404F4F
.text:00404F4F loc_404F4F:                             ; CODE XREF: sub_404EB0+980↓j
.text:00404F4F                 jz      loc_4057BE
.text:00404F55                 cmp     [esp+4Ch+var_21], 0
.text:00404F5A                 jz      short loc_404FA0
.text:00404F5C                 mov     esi, [esp+4Ch+var_20]
.text:00404F60                 test    esi, esi
.text:00404F62                 jz      short loc_404FA0
.text:00404F64                 mov     ecx, [esp+4Ch+var_20]
.text:00404F68                 lea     edi, [ecx+ebp]
.text:00404F6B                 cmp     edi, [esp+4Ch+arg_C]
.text:00404F6F                 ja      short loc_404FA0
.text:00404F71                 cld
.text:00404F72                 mov     ebx, [esp+4Ch+Str]
.text:00404F76                 mov     edi, [esp+4Ch+var_1C]
.text:00404F7A                 add     ebx, ebp
.text:00404F7C                 mov     esi, ebx
.text:00404F7E                 cmp     ecx, ecx
.text:00404F80                 repe cmpsb
.text:00404F82                 jnz     short loc_404FA0
.text:00404F84                 mov     edx, [esp+4Ch+arg_4]
.text:00404F88                 cmp     [esp+4Ch+var_34], edx
.text:00404F8C                 jnb     short loc_404F9A
.text:00404F8E                 mov     ecx, [esp+4Ch+arg_0]
.text:00404F92                 mov     eax, [esp+4Ch+var_34]
.text:00404F96                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00404F9A
.text:00404F9A loc_404F9A:                             ; CODE XREF: sub_404EB0+DC↑j
.text:00404F9A                 inc     [esp+4Ch+var_34]
.text:00404F9E                 mov     esi, esi
.text:00404FA0
.text:00404FA0 loc_404FA0:                             ; CODE XREF: sub_404EB0+AA↑j
.text:00404FA0                                         ; sub_404EB0+B2↑j ...
.text:00404FA0                 mov     edi, [esp+4Ch+Str]
.text:00404FA4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00404FA9                 movzx   eax, bl
.text:00404FAC                 cmp     eax, 7Eh        ; switch 127 cases
.text:00404FAF                 ja      def_404FB5      ; jumptable 00404FB5 default case, cases 1-6,14-31,64
.text:00404FB5                 jmp     ds:jpt_404FB5[eax*4] ; switch jump
.text:00404FB5 ; ---------------------------------------------------------------------------
.text:00404FBC jpt_404FB5      dd offset loc_4051B8, offset def_404FB5, offset def_404FB5
.text:00404FBC                                         ; DATA XREF: sub_404EB0+105↑r
.text:00404FBC                 dd offset def_404FB5, offset def_404FB5, offset def_404FB5 ; jump table for switch statement
.text:00404FBC                 dd offset def_404FB5, offset loc_405290, offset loc_4052AE
.text:00404FBC                 dd offset loc_4052B2, offset loc_4052F7, offset loc_4052FB
.text:00404FBC                 dd offset loc_4052FF, offset loc_405303, offset def_404FB5
.text:00404FBC                 dd offset def_404FB5, offset def_404FB5, offset def_404FB5
.text:00404FBC                 dd offset def_404FB5, offset def_404FB5, offset def_404FB5
.text:00404FBC                 dd offset def_404FB5, offset def_404FB5, offset def_404FB5
.text:00404FBC                 dd offset def_404FB5, offset def_404FB5, offset def_404FB5
.text:00404FBC                 dd offset def_404FB5, offset def_404FB5, offset def_404FB5
.text:00404FBC                 dd offset def_404FB5, offset def_404FB5, offset loc_405788
.text:00404FBC                 dd offset loc_405788, offset loc_405788, offset loc_4057AA
.text:00404FBC                 dd offset loc_405788, offset def_4053B2, offset loc_405788
.text:00404FBC                 dd offset loc_405307, offset loc_405788, offset loc_405788
.text:00404FBC                 dd offset loc_405788, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset loc_405788
.text:00404FBC                 dd offset loc_405788, offset loc_405788, offset loc_405788
.text:00404FBC                 dd offset loc_40536C, offset def_404FB5, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset loc_405788, offset loc_405781
.text:00404FBC                 dd offset def_4053B2, offset loc_405788, offset def_4053B2
.text:00404FBC                 dd offset loc_405788, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset def_4053B2, offset def_4053B2, offset def_4053B2
.text:00404FBC                 dd offset loc_405798, offset loc_405788, offset loc_405798
.text:00404FBC                 dd offset loc_4057AA
.text:004051B8 ; ---------------------------------------------------------------------------
.text:004051B8
.text:004051B8 loc_4051B8:                             ; CODE XREF: sub_404EB0+105↑j
.text:004051B8                                         ; DATA XREF: sub_404EB0:jpt_404FB5↑o
.text:004051B8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00404FB5 case 0
.text:004051BD                 lea     eax, [ebp+1]
.text:004051C0                 jz      loc_405270
.text:004051C6                 mov     esi, [esp+4Ch+arg_4]
.text:004051CA                 cmp     [esp+4Ch+var_34], esi
.text:004051CE                 jnb     short loc_4051DC
.text:004051D0                 mov     eax, [esp+4Ch+arg_0]
.text:004051D4                 mov     ebx, [esp+4Ch+var_34]
.text:004051D8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004051DC
.text:004051DC loc_4051DC:                             ; CODE XREF: sub_404EB0+31E↑j
.text:004051DC                 inc     [esp+4Ch+var_34]
.text:004051E0                 mov     edx, [esp+4Ch+arg_4]
.text:004051E4                 cmp     [esp+4Ch+var_34], edx
.text:004051E8                 jnb     short loc_4051F6
.text:004051EA                 mov     edi, [esp+4Ch+arg_0]
.text:004051EE                 mov     ecx, [esp+4Ch+var_34]
.text:004051F2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:004051F6
.text:004051F6 loc_4051F6:                             ; CODE XREF: sub_404EB0+338↑j
.text:004051F6                 inc     [esp+4Ch+var_34]
.text:004051FA                 mov     esi, [esp+4Ch+arg_4]
.text:004051FE                 cmp     [esp+4Ch+var_34], esi
.text:00405202                 jnb     short loc_405210
.text:00405204                 mov     ebx, [esp+4Ch+arg_0]
.text:00405208                 mov     eax, [esp+4Ch+var_34]
.text:0040520C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00405210
.text:00405210 loc_405210:                             ; CODE XREF: sub_404EB0+352↑j
.text:00405210                 inc     [esp+4Ch+var_34]
.text:00405214                 mov     bl, 30h ; '0'
.text:00405216                 lea     esi, [esi+0]
.text:00405219                 lea     edi, [edi+0]
.text:00405220
.text:00405220 def_4053B2:                             ; CODE XREF: sub_404EB0+105↑j
.text:00405220                                         ; sub_404EB0+463↓j ...
.text:00405220                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00404FB5 cases 37,43-58,65-90,93,95,97-122
.text:00405220                                         ; jumptable 004053B2 default case, cases 34-38,42-44,46,48-59
.text:00405225                 lea     eax, [ebp+1]
.text:00405228                 jz      short loc_405270
.text:0040522A                 mov     cl, bl
.text:0040522C                 mov     edi, [esp+4Ch+arg_14]
.text:00405230                 mov     esi, 1
.text:00405235                 shr     cl, 5
.text:00405238                 movzx   edx, cl
.text:0040523B                 mov     ecx, ebx
.text:0040523D                 and     ecx, 1Fh
.text:00405240                 shl     esi, cl
.text:00405242                 test    [edi+edx*4+4], esi
.text:00405246                 jz      short loc_405262
.text:00405248
.text:00405248 loc_405248:                             ; CODE XREF: sub_404EB0+3FC↓j
.text:00405248                 mov     edx, [esp+4Ch+arg_4]
.text:0040524C                 cmp     [esp+4Ch+var_34], edx
.text:00405250                 jnb     short loc_40525E
.text:00405252                 mov     edi, [esp+4Ch+arg_0]
.text:00405256                 mov     esi, [esp+4Ch+var_34]
.text:0040525A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040525E
.text:0040525E loc_40525E:                             ; CODE XREF: sub_404EB0+3A0↑j
.text:0040525E                 inc     [esp+4Ch+var_34]
.text:00405262
.text:00405262 loc_405262:                             ; CODE XREF: sub_404EB0+396↑j
.text:00405262                 lea     eax, [ebp+1]
.text:00405265                 lea     esi, [esi+0]
.text:00405269                 lea     edi, [edi+0]
.text:00405270
.text:00405270 loc_405270:                             ; CODE XREF: sub_404EB0+310↑j
.text:00405270                                         ; sub_404EB0+378↑j ...
.text:00405270                 mov     ebp, [esp+4Ch+arg_4]
.text:00405274                 cmp     [esp+4Ch+var_34], ebp
.text:00405278                 jnb     short loc_405285
.text:0040527A                 mov     edx, [esp+4Ch+arg_0]
.text:0040527E                 mov     ecx, [esp+4Ch+var_34]
.text:00405282                 mov     [ecx+edx], bl
.text:00405285
.text:00405285 loc_405285:                             ; CODE XREF: sub_404EB0+3C8↑j
.text:00405285                 inc     [esp+4Ch+var_34]
.text:00405289                 mov     ebp, eax
.text:0040528B                 jmp     loc_404F40
.text:00405290 ; ---------------------------------------------------------------------------
.text:00405290
.text:00405290 loc_405290:                             ; CODE XREF: sub_404EB0+105↑j
.text:00405290                                         ; DATA XREF: sub_404EB0:jpt_404FB5↑o
.text:00405290                 mov     dl, 61h ; 'a'   ; jumptable 00404FB5 case 7
.text:00405292                 lea     esi, [esi+0]
.text:00405299                 lea     edi, [edi+0]
.text:004052A0
.text:004052A0 loc_4052A0:                             ; CODE XREF: sub_404EB0+400↓j
.text:004052A0                                         ; sub_404EB0+409↓j ...
.text:004052A0                 cmp     [esp+4Ch+var_21], 0
.text:004052A5                 lea     eax, [ebp+1]
.text:004052A8                 jz      short loc_405270
.text:004052AA                 mov     bl, dl
.text:004052AC                 jmp     short loc_405248
.text:004052AE ; ---------------------------------------------------------------------------
.text:004052AE
.text:004052AE loc_4052AE:                             ; CODE XREF: sub_404EB0+105↑j
.text:004052AE                                         ; DATA XREF: sub_404EB0:jpt_404FB5↑o
.text:004052AE                 mov     dl, 62h ; 'b'   ; jumptable 00404FB5 case 8
.text:004052B0                 jmp     short loc_4052A0
.text:004052B2 ; ---------------------------------------------------------------------------
.text:004052B2
.text:004052B2 loc_4052B2:                             ; CODE XREF: sub_404EB0+105↑j
.text:004052B2                                         ; DATA XREF: sub_404EB0:jpt_404FB5↑o
.text:004052B2                 mov     dl, 74h ; 't'   ; jumptable 00404FB5 case 9
.text:004052B4
.text:004052B4 loc_4052B4:                             ; CODE XREF: sub_404EB0+449↓j
.text:004052B4                                         ; sub_404EB0+455↓j ...
.text:004052B4                 cmp     [esp+4Ch+arg_10], 1
.text:004052B9                 jnz     short loc_4052A0
.text:004052BB
.text:004052BB loc_4052BB:                             ; CODE XREF: sub_404EB0+45C↓j
.text:004052BB                                         ; sub_404EB0+4C1↓j ...
.text:004052BB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00405682 cases 91,92,94,96,124
.text:004052C3                 mov     eax, [esp+4Ch+arg_14]
.text:004052C7                 mov     edx, [esp+4Ch+arg_C]
.text:004052CB                 mov     ecx, [esp+4Ch+Str]
.text:004052CF                 mov     ebx, [esp+4Ch+arg_4]
.text:004052D3                 mov     [esp+4Ch+var_38], eax ; int
.text:004052D7                 mov     ebp, [esp+4Ch+arg_0]
.text:004052DB                 mov     [esp+4Ch+State], edx ; int
.text:004052DF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:004052E3                 mov     [esp+4Ch+Type], ebx ; int
.text:004052E7                 mov     [esp+4Ch+C], ebp ; int
.text:004052EA                 call    sub_404EB0
.text:004052EF
.text:004052EF loc_4052EF:                             ; CODE XREF: sub_404EB0+972↓j
.text:004052EF                 add     esp, 3Ch
.text:004052F2                 pop     ebx
.text:004052F3                 pop     esi
.text:004052F4                 pop     edi
.text:004052F5                 pop     ebp
.text:004052F6                 retn
.text:004052F7 ; ---------------------------------------------------------------------------
.text:004052F7
.text:004052F7 loc_4052F7:                             ; CODE XREF: sub_404EB0+105↑j
.text:004052F7                                         ; DATA XREF: sub_404EB0:jpt_404FB5↑o
.text:004052F7                 mov     dl, 6Eh ; 'n'   ; jumptable 00404FB5 case 10
.text:004052F9                 jmp     short loc_4052B4
.text:004052FB ; ---------------------------------------------------------------------------
.text:004052FB
.text:004052FB loc_4052FB:                             ; CODE XREF: sub_404EB0+105↑j
.text:004052FB                                         ; DATA XREF: sub_404EB0:jpt_404FB5↑o
.text:004052FB                 mov     dl, 76h ; 'v'   ; jumptable 00404FB5 case 11
.text:004052FD                 jmp     short loc_4052A0
.text:004052FF ; ---------------------------------------------------------------------------
.text:004052FF
.text:004052FF loc_4052FF:                             ; CODE XREF: sub_404EB0+105↑j
.text:004052FF                                         ; DATA XREF: sub_404EB0:jpt_404FB5↑o
.text:004052FF                 mov     dl, 66h ; 'f'   ; jumptable 00404FB5 case 12
.text:00405301                 jmp     short loc_4052A0
.text:00405303 ; ---------------------------------------------------------------------------
.text:00405303
.text:00405303 loc_405303:                             ; CODE XREF: sub_404EB0+105↑j
.text:00405303                                         ; DATA XREF: sub_404EB0:jpt_404FB5↑o
.text:00405303                 mov     dl, 72h ; 'r'   ; jumptable 00404FB5 case 13
.text:00405305                 jmp     short loc_4052B4
.text:00405307 ; ---------------------------------------------------------------------------
.text:00405307
.text:00405307 loc_405307:                             ; CODE XREF: sub_404EB0+105↑j
.text:00405307                                         ; DATA XREF: sub_404EB0:jpt_404FB5↑o
.text:00405307                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404FB5 case 39
.text:0040530C                 jz      short loc_4052BB ; jumptable 00405682 cases 91,92,94,96,124
.text:0040530E                 cmp     [esp+4Ch+arg_10], 2
.text:00405313                 jnz     def_4053B2      ; jumptable 00404FB5 cases 37,43-58,65-90,93,95,97-122
.text:00405313                                         ; jumptable 004053B2 default case, cases 34-38,42-44,46,48-59
.text:00405319                 mov     edx, [esp+4Ch+arg_4]
.text:0040531D                 cmp     [esp+4Ch+var_34], edx
.text:00405321                 jnb     short loc_40532F
.text:00405323                 mov     ecx, [esp+4Ch+arg_0]
.text:00405327                 mov     edi, [esp+4Ch+var_34]
.text:0040532B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040532F
.text:0040532F loc_40532F:                             ; CODE XREF: sub_404EB0+471↑j
.text:0040532F                 inc     [esp+4Ch+var_34]
.text:00405333                 mov     eax, [esp+4Ch+arg_4]
.text:00405337                 cmp     [esp+4Ch+var_34], eax
.text:0040533B                 jnb     short loc_405349
.text:0040533D                 mov     esi, [esp+4Ch+arg_0]
.text:00405341                 mov     edx, [esp+4Ch+var_34]
.text:00405345                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00405349
.text:00405349 loc_405349:                             ; CODE XREF: sub_404EB0+48B↑j
.text:00405349                 inc     [esp+4Ch+var_34]
.text:0040534D                 mov     edi, [esp+4Ch+arg_4]
.text:00405351                 cmp     [esp+4Ch+var_34], edi
.text:00405355                 jnb     short loc_405363
.text:00405357                 mov     ecx, [esp+4Ch+arg_0]
.text:0040535B                 mov     eax, [esp+4Ch+var_34]
.text:0040535F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00405363
.text:00405363 loc_405363:                             ; CODE XREF: sub_404EB0+4A5↑j
.text:00405363                                         ; sub_404EB0+5C4↓j ...
.text:00405363                 inc     [esp+4Ch+var_34]
.text:00405367                 jmp     def_4053B2      ; jumptable 00404FB5 cases 37,43-58,65-90,93,95,97-122
.text:00405367                                         ; jumptable 004053B2 default case, cases 34-38,42-44,46,48-59
.text:0040536C ; ---------------------------------------------------------------------------
.text:0040536C
.text:0040536C loc_40536C:                             ; CODE XREF: sub_404EB0+105↑j
.text:0040536C                                         ; DATA XREF: sub_404EB0:jpt_404FB5↑o
.text:0040536C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404FB5 case 63
.text:00405371                 jz      loc_4052BB      ; jumptable 00405682 cases 91,92,94,96,124
.text:00405377                 cmp     [esp+4Ch+arg_10], 3
.text:0040537C                 jnz     def_4053B2      ; jumptable 00404FB5 cases 37,43-58,65-90,93,95,97-122
.text:0040537C                                         ; jumptable 004053B2 default case, cases 34-38,42-44,46,48-59
.text:00405382                 lea     edx, [ebp+2]
.text:00405385                 cmp     edx, [esp+4Ch+arg_C]
.text:00405389                 jnb     def_4053B2      ; jumptable 00404FB5 cases 37,43-58,65-90,93,95,97-122
.text:00405389                                         ; jumptable 004053B2 default case, cases 34-38,42-44,46,48-59
.text:0040538F                 mov     esi, [esp+4Ch+Str]
.text:00405393                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00405398                 jnz     def_4053B2      ; jumptable 00404FB5 cases 37,43-58,65-90,93,95,97-122
.text:00405398                                         ; jumptable 004053B2 default case, cases 34-38,42-44,46,48-59
.text:0040539E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004053A3                 movsx   eax, cl
.text:004053A6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004053A9                 cmp     eax, 1Dh
.text:004053AC                 ja      def_4053B2      ; jumptable 00404FB5 cases 37,43-58,65-90,93,95,97-122
.text:004053AC                                         ; jumptable 004053B2 default case, cases 34-38,42-44,46,48-59
.text:004053B2                 jmp     ds:jpt_4053B2[eax*4] ; switch jump
.text:004053B2 ; ---------------------------------------------------------------------------
.text:004053B9                 align 4
.text:004053BC jpt_4053B2      dd offset loc_405434    ; DATA XREF: sub_404EB0+502↑r
.text:004053BC                 dd offset def_4053B2    ; jump table for switch statement
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset loc_405434
.text:004053BC                 dd offset loc_405434
.text:004053BC                 dd offset loc_405434
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset loc_405434
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset loc_405434
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset def_4053B2
.text:004053BC                 dd offset loc_405434
.text:004053BC                 dd offset loc_405434
.text:004053BC                 dd offset loc_405434
.text:00405434 ; ---------------------------------------------------------------------------
.text:00405434
.text:00405434 loc_405434:                             ; CODE XREF: sub_404EB0+502↑j
.text:00405434                                         ; DATA XREF: sub_404EB0:jpt_4053B2↑o
.text:00405434                 mov     ebp, edx        ; jumptable 004053B2 cases 33,39-41,45,47,60-62
.text:00405436                 mov     bl, cl
.text:00405438                 mov     edx, [esp+4Ch+arg_4]
.text:0040543C                 cmp     [esp+4Ch+var_34], edx
.text:00405440                 jnb     short loc_40544E
.text:00405442                 mov     ecx, [esp+4Ch+arg_0]
.text:00405446                 mov     edi, [esp+4Ch+var_34]
.text:0040544A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040544E
.text:0040544E loc_40544E:                             ; CODE XREF: sub_404EB0+590↑j
.text:0040544E                 inc     [esp+4Ch+var_34]
.text:00405452                 mov     eax, [esp+4Ch+arg_4]
.text:00405456                 cmp     [esp+4Ch+var_34], eax
.text:0040545A                 jnb     short loc_405468
.text:0040545C                 mov     edx, [esp+4Ch+arg_0]
.text:00405460                 mov     esi, [esp+4Ch+var_34]
.text:00405464                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00405468
.text:00405468 loc_405468:                             ; CODE XREF: sub_404EB0+5AA↑j
.text:00405468                 inc     [esp+4Ch+var_34]
.text:0040546C                 mov     edi, [esp+4Ch+arg_4]
.text:00405470                 cmp     [esp+4Ch+var_34], edi
.text:00405474                 jnb     loc_405363
.text:0040547A                 mov     eax, [esp+4Ch+arg_0]
.text:0040547E                 mov     ecx, [esp+4Ch+var_34]
.text:00405482                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00405486                 jmp     loc_405363
.text:00405486 ; ---------------------------------------------------------------------------
.text:0040548B                 align 10h
.text:00405490
.text:00405490 def_404FB5:                             ; CODE XREF: sub_404EB0+FF↑j
.text:00405490                                         ; sub_404EB0+105↑j
.text:00405490                                         ; DATA XREF: ...
.text:00405490                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00404FB5 default case, cases 1-6,14-31,64
.text:00405495                 jz      loc_4055C0
.text:0040549B                 mov     [esp+4Ch+var_28], 1
.text:004054A3                 mov     esi, ds:__mb_cur_max
.text:004054A9                 movzx   edx, bl
.text:004054AC                 cmp     dword ptr [esi], 1
.text:004054AF                 jz      loc_4055A4
.text:004054B5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004054BD                 mov     [esp+4Ch+C], edx ; C
.text:004054C0                 call    _isctype
.text:004054C5
.text:004054C5 loc_4054C5:                             ; CODE XREF: sub_404EB0+705↓j
.text:004054C5                 test    eax, eax
.text:004054C7                 setnz   [esp+4Ch+var_29]
.text:004054CC
.text:004054CC loc_4054CC:                             ; CODE XREF: sub_404EB0+7A5↓j
.text:004054CC                 cmp     [esp+4Ch+var_21], 0
.text:004054D1                 lea     eax, [ebp+1]
.text:004054D4                 jz      loc_405270
.text:004054DA                 cmp     [esp+4Ch+var_29], 0
.text:004054DF                 jnz     def_4053B2      ; jumptable 00404FB5 cases 37,43-58,65-90,93,95,97-122
.text:004054DF                                         ; jumptable 004053B2 default case, cases 34-38,42-44,46,48-59
.text:004054E5
.text:004054E5 loc_4054E5:                             ; CODE XREF: sub_404EB0+7AB↓j
.text:004054E5                 mov     eax, [esp+4Ch+var_28]
.text:004054E9                 lea     edx, [eax+ebp]
.text:004054EC                 lea     esi, [esi+0]
.text:004054F0
.text:004054F0 loc_4054F0:                             ; CODE XREF: sub_404EB0+6EF↓j
.text:004054F0                 cmp     [esp+4Ch+var_21], 0
.text:004054F5                 jz      short loc_405570
.text:004054F7                 cmp     [esp+4Ch+var_29], 0
.text:004054FC                 jnz     short loc_405570
.text:004054FE                 mov     edi, [esp+4Ch+arg_4]
.text:00405502                 cmp     [esp+4Ch+var_34], edi
.text:00405506                 jnb     short loc_405514
.text:00405508                 mov     esi, [esp+4Ch+arg_0]
.text:0040550C                 mov     eax, [esp+4Ch+var_34]
.text:00405510                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00405514
.text:00405514 loc_405514:                             ; CODE XREF: sub_404EB0+656↑j
.text:00405514                 inc     [esp+4Ch+var_34]
.text:00405518                 mov     ecx, [esp+4Ch+arg_4]
.text:0040551C                 cmp     [esp+4Ch+var_34], ecx
.text:00405520                 jnb     short loc_405535
.text:00405522                 mov     cl, bl
.text:00405524                 mov     esi, [esp+4Ch+arg_0]
.text:00405528                 mov     edi, [esp+4Ch+var_34]
.text:0040552C                 shr     cl, 6
.text:0040552F                 add     cl, 30h ; '0'
.text:00405532                 mov     [edi+esi], cl
.text:00405535
.text:00405535 loc_405535:                             ; CODE XREF: sub_404EB0+670↑j
.text:00405535                 inc     [esp+4Ch+var_34]
.text:00405539                 mov     edi, [esp+4Ch+arg_4]
.text:0040553D                 cmp     [esp+4Ch+var_34], edi
.text:00405541                 jnb     short loc_405559
.text:00405543                 mov     cl, bl
.text:00405545                 mov     esi, [esp+4Ch+arg_0]
.text:00405549                 shr     cl, 3
.text:0040554C                 mov     edi, [esp+4Ch+var_34]
.text:00405550                 and     cl, 7
.text:00405553                 add     cl, 30h ; '0'
.text:00405556                 mov     [edi+esi], cl
.text:00405559
.text:00405559 loc_405559:                             ; CODE XREF: sub_404EB0+691↑j
.text:00405559                 inc     [esp+4Ch+var_34]
.text:0040555D                 and     bl, 7
.text:00405560                 add     bl, 30h ; '0'
.text:00405563                 lea     esi, [esi+0]
.text:00405569                 lea     edi, [edi+0]
.text:00405570
.text:00405570 loc_405570:                             ; CODE XREF: sub_404EB0+645↑j
.text:00405570                                         ; sub_404EB0+64C↑j
.text:00405570                 lea     eax, [ebp+1]
.text:00405573                 cmp     edx, eax
.text:00405575                 jbe     loc_405270
.text:0040557B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040557F                 cmp     [esp+4Ch+var_34], ebp
.text:00405583                 jnb     short loc_405590
.text:00405585                 mov     ecx, [esp+4Ch+arg_0]
.text:00405589                 mov     edi, [esp+4Ch+var_34]
.text:0040558D                 mov     [edi+ecx], bl
.text:00405590
.text:00405590 loc_405590:                             ; CODE XREF: sub_404EB0+6D3↑j
.text:00405590                 inc     [esp+4Ch+var_34]
.text:00405594                 mov     ebp, eax
.text:00405596                 mov     eax, [esp+4Ch+Str]
.text:0040559A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040559F                 jmp     loc_4054F0
.text:004055A4 ; ---------------------------------------------------------------------------
.text:004055A4
.text:004055A4 loc_4055A4:                             ; CODE XREF: sub_404EB0+5FF↑j
.text:004055A4                 mov     ecx, ds:_pctype
.text:004055AA                 mov     edi, [ecx]
.text:004055AC                 movzx   eax, word ptr [edi+edx*2]
.text:004055B0                 and     eax, 157h
.text:004055B5                 jmp     loc_4054C5
.text:004055B5 ; ---------------------------------------------------------------------------
.text:004055BA                 align 10h
.text:004055C0
.text:004055C0 loc_4055C0:                             ; CODE XREF: sub_404EB0+5E5↑j
.text:004055C0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004055C5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004055CD                 mov     [esp+4Ch+var_28], 0
.text:004055D5                 mov     [esp+4Ch+var_29], 1
.text:004055DA                 jz      loc_40576C
.text:004055E0
.text:004055E0 loc_4055E0:                             ; CODE XREF: sub_404EB0+8CC↓j
.text:004055E0                 mov     ecx, [esp+4Ch+arg_C]
.text:004055E4                 lea     edx, [esp+4Ch+var_18]
.text:004055E8                 mov     edi, [esp+4Ch+Str]
.text:004055EC                 mov     [esp+4Ch+State], edx ; State
.text:004055F0                 lea     esi, [esp+4Ch+var_18._State]
.text:004055F4                 sub     ecx, ebp
.text:004055F6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:004055FA                 add     edi, ebp
.text:004055FC                 mov     [esp+4Ch+var_30], edi
.text:00405600                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00405604                 mov     [esp+4Ch+C], esi ; DstCh
.text:00405607                 call    mbrtowc
.text:0040560C                 test    eax, eax
.text:0040560E                 mov     edi, eax
.text:00405610                 jz      short loc_405650
.text:00405612                 cmp     eax, 0FFFFFFFFh
.text:00405615                 jz      loc_405762
.text:0040561B                 cmp     eax, 0FFFFFFFEh
.text:0040561E                 jz      loc_405722
.text:00405624                 cmp     [esp+4Ch+arg_10], 1
.text:00405629                 jz      short loc_405660
.text:0040562B
.text:0040562B loc_40562B:                             ; CODE XREF: sub_404EB0+7B9↓j
.text:0040562B                                         ; sub_404EB0+86D↓j
.text:0040562B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00405630                 mov     [esp+4Ch+Type], 157h ; Type
.text:00405638                 mov     [esp+4Ch+C], ecx ; C
.text:0040563B                 call    iswctype
.text:00405640                 test    eax, eax
.text:00405642                 jnz     short loc_405649
.text:00405644                 mov     [esp+4Ch+var_29], 0
.text:00405649
.text:00405649 loc_405649:                             ; CODE XREF: sub_404EB0+792↑j
.text:00405649                 mov     [esp+4Ch+var_28], edi
.text:0040564D                 lea     esi, [esi+0]
.text:00405650
.text:00405650 loc_405650:                             ; CODE XREF: sub_404EB0+760↑j
.text:00405650                                         ; sub_404EB0+87B↓j ...
.text:00405650                 cmp     [esp+4Ch+var_28], 1
.text:00405655                 jbe     loc_4054CC
.text:0040565B                 jmp     loc_4054E5
.text:00405660 ; ---------------------------------------------------------------------------
.text:00405660
.text:00405660 loc_405660:                             ; CODE XREF: sub_404EB0+779↑j
.text:00405660                 cmp     [esp+4Ch+arg_10], eax
.text:00405664                 mov     edx, 1
.text:00405669                 jnb     short loc_40562B
.text:0040566B
.text:0040566B loc_40566B:                             ; CODE XREF: sub_404EB0+867↓j
.text:0040566B                 mov     ecx, [esp+4Ch+Str]
.text:0040566F                 lea     esi, [edx+ebp]
.text:00405672                 movsx   eax, byte ptr [esi+ecx]
.text:00405676                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00405679                 cmp     eax, 21h
.text:0040567C                 ja      def_405682      ; jumptable 00405682 default case, cases 93,95,97-123
.text:00405682                 jmp     ds:jpt_405682[eax*4] ; switch jump
.text:00405682 ; ---------------------------------------------------------------------------
.text:00405689                 align 4
.text:0040568C jpt_405682      dd offset loc_4052BB    ; DATA XREF: sub_404EB0+7D2↑r
.text:0040568C                 dd offset loc_4052BB    ; jump table for switch statement
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset loc_4052BB
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset loc_4052BB
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset def_405682
.text:0040568C                 dd offset loc_4052BB
.text:00405714 ; ---------------------------------------------------------------------------
.text:00405714
.text:00405714 def_405682:                             ; CODE XREF: sub_404EB0+7CC↑j
.text:00405714                                         ; sub_404EB0+7D2↑j
.text:00405714                                         ; DATA XREF: ...
.text:00405714                 inc     edx             ; jumptable 00405682 default case, cases 93,95,97-123
.text:00405715                 cmp     edx, edi
.text:00405717                 jb      loc_40566B
.text:0040571D                 jmp     loc_40562B
.text:00405722 ; ---------------------------------------------------------------------------
.text:00405722
.text:00405722 loc_405722:                             ; CODE XREF: sub_404EB0+76E↑j
.text:00405722                 cmp     ebp, [esp+4Ch+arg_C]
.text:00405726                 mov     [esp+4Ch+var_29], 0
.text:0040572B                 jnb     loc_405650
.text:00405731                 mov     eax, [esp+4Ch+var_30]
.text:00405735                 cmp     byte ptr [eax], 0
.text:00405738                 jz      loc_405650
.text:0040573E
.text:0040573E loc_40573E:                             ; CODE XREF: sub_404EB0+8AB↓j
.text:0040573E                 inc     [esp+4Ch+var_28]
.text:00405742                 mov     esi, [esp+4Ch+var_28]
.text:00405746                 lea     eax, [esi+ebp]
.text:00405749                 cmp     eax, [esp+4Ch+arg_C]
.text:0040574D                 jnb     loc_405650
.text:00405753                 mov     edi, [esp+4Ch+Str]
.text:00405757                 cmp     byte ptr [eax+edi], 0
.text:0040575B                 jnz     short loc_40573E
.text:0040575D                 jmp     loc_405650
.text:00405762 ; ---------------------------------------------------------------------------
.text:00405762
.text:00405762 loc_405762:                             ; CODE XREF: sub_404EB0+765↑j
.text:00405762                 mov     [esp+4Ch+var_29], 0
.text:00405767                 jmp     loc_405650
.text:0040576C ; ---------------------------------------------------------------------------
.text:0040576C
.text:0040576C loc_40576C:                             ; CODE XREF: sub_404EB0+72A↑j
.text:0040576C                 mov     edx, [esp+4Ch+Str]
.text:00405770                 mov     [esp+4Ch+C], edx ; Str
.text:00405773                 call    strlen
.text:00405778                 mov     [esp+4Ch+arg_C], eax
.text:0040577C                 jmp     loc_4055E0
.text:00405781 ; ---------------------------------------------------------------------------
.text:00405781
.text:00405781 loc_405781:                             ; CODE XREF: sub_404EB0+105↑j
.text:00405781                                         ; DATA XREF: sub_404EB0:jpt_404FB5↑o
.text:00405781                 mov     dl, bl          ; jumptable 00404FB5 case 92
.text:00405783                 jmp     loc_4052B4
.text:00405788 ; ---------------------------------------------------------------------------
.text:00405788
.text:00405788 loc_405788:                             ; CODE XREF: sub_404EB0+105↑j
.text:00405788                                         ; sub_404EB0+902↓j
.text:00405788                                         ; DATA XREF: ...
.text:00405788                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404FB5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040578D                 jnz     def_4053B2      ; jumptable 00404FB5 cases 37,43-58,65-90,93,95,97-122
.text:0040578D                                         ; jumptable 004053B2 default case, cases 34-38,42-44,46,48-59
.text:00405793                 jmp     loc_4052BB      ; jumptable 00405682 cases 91,92,94,96,124
.text:00405798 ; ---------------------------------------------------------------------------
.text:00405798
.text:00405798 loc_405798:                             ; CODE XREF: sub_404EB0+105↑j
.text:00405798                                         ; DATA XREF: sub_404EB0:jpt_404FB5↑o
.text:00405798                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00404FB5 cases 123,125
.text:0040579D                 jz      short loc_4057B4
.text:0040579F                 cmp     [esp+4Ch+arg_C], 1
.text:004057A4
.text:004057A4 loc_4057A4:                             ; CODE XREF: sub_404EB0+90C↓j
.text:004057A4                 jnz     def_4053B2      ; jumptable 00404FB5 cases 37,43-58,65-90,93,95,97-122
.text:004057A4                                         ; jumptable 004053B2 default case, cases 34-38,42-44,46,48-59
.text:004057AA
.text:004057AA loc_4057AA:                             ; CODE XREF: sub_404EB0+105↑j
.text:004057AA                                         ; DATA XREF: sub_404EB0:jpt_404FB5↑o
.text:004057AA                 test    ebp, ebp        ; jumptable 00404FB5 cases 35,126
.text:004057AC                 jnz     def_4053B2      ; jumptable 00404FB5 cases 37,43-58,65-90,93,95,97-122
.text:004057AC                                         ; jumptable 004053B2 default case, cases 34-38,42-44,46,48-59
.text:004057B2                 jmp     short loc_405788 ; jumptable 00404FB5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004057B4 ; ---------------------------------------------------------------------------
.text:004057B4
.text:004057B4 loc_4057B4:                             ; CODE XREF: sub_404EB0+8ED↑j
.text:004057B4                 mov     esi, [esp+4Ch+Str]
.text:004057B8                 cmp     byte ptr [esi+1], 0
.text:004057BC                 jmp     short loc_4057A4
.text:004057BE ; ---------------------------------------------------------------------------
.text:004057BE
.text:004057BE loc_4057BE:                             ; CODE XREF: sub_404EB0:loc_404F4F↑j
.text:004057BE                 test    ebp, ebp
.text:004057C0                 jnz     short loc_4057CD
.text:004057C2                 cmp     [esp+4Ch+arg_10], 1
.text:004057C7                 jz      loc_4052BB      ; jumptable 00405682 cases 91,92,94,96,124
.text:004057CD
.text:004057CD loc_4057CD:                             ; CODE XREF: sub_404EB0+910↑j
.text:004057CD                 mov     esi, [esp+4Ch+var_1C]
.text:004057D1                 test    esi, esi
.text:004057D3                 jz      short loc_405808
.text:004057D5                 mov     edi, [esp+4Ch+var_1C]
.text:004057D9                 movzx   eax, byte ptr [edi]
.text:004057DC                 test    al, al
.text:004057DE                 jz      short loc_405808
.text:004057E0
.text:004057E0 loc_4057E0:                             ; CODE XREF: sub_404EB0+956↓j
.text:004057E0                 mov     ebp, [esp+4Ch+arg_4]
.text:004057E4                 cmp     [esp+4Ch+var_34], ebp
.text:004057E8                 jnb     short loc_4057F5
.text:004057EA                 mov     ecx, [esp+4Ch+arg_0]
.text:004057EE                 mov     ebx, [esp+4Ch+var_34]
.text:004057F2                 mov     [ebx+ecx], al
.text:004057F5
.text:004057F5 loc_4057F5:                             ; CODE XREF: sub_404EB0+938↑j
.text:004057F5                 inc     [esp+4Ch+var_1C]
.text:004057F9                 inc     [esp+4Ch+var_34]
.text:004057FD                 mov     edx, [esp+4Ch+var_1C]
.text:00405801                 movzx   eax, byte ptr [edx]
.text:00405804                 test    al, al
.text:00405806                 jnz     short loc_4057E0
.text:00405808
.text:00405808 loc_405808:                             ; CODE XREF: sub_404EB0+923↑j
.text:00405808                                         ; sub_404EB0+92E↑j
.text:00405808                 mov     eax, [esp+4Ch+arg_4]
.text:0040580C                 cmp     [esp+4Ch+var_34], eax
.text:00405810                 jnb     short loc_40581E
.text:00405812                 mov     edi, [esp+4Ch+arg_0]
.text:00405816                 mov     esi, [esp+4Ch+var_34]
.text:0040581A                 mov     byte ptr [esi+edi], 0
.text:0040581E
.text:0040581E loc_40581E:                             ; CODE XREF: sub_404EB0+960↑j
.text:0040581E                 mov     eax, [esp+4Ch+var_34]
.text:00405822                 jmp     loc_4052EF
.text:00405827 ; ---------------------------------------------------------------------------
.text:00405827
.text:00405827 loc_405827:                             ; CODE XREF: sub_404EB0+95↑j
.text:00405827                 mov     ebx, [esp+4Ch+Str]
.text:0040582B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00405830                 jmp     loc_404F4F
.text:00405835 ; ---------------------------------------------------------------------------
.text:00405835
.text:00405835 loc_405835:                             ; CODE XREF: sub_404EB0+3D↑j
.text:00405835                                         ; DATA XREF: sub_404EB0:jpt_404EED↑o
.text:00405835                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00404EED case 2
.text:00405839                 cmp     [esp+4Ch+var_34], edx
.text:0040583D                 jnb     short loc_405846
.text:0040583F                 mov     ecx, [esp+4Ch+arg_0]
.text:00405843                 mov     byte ptr [ecx], 27h ; '''
.text:00405846
.text:00405846 loc_405846:                             ; CODE XREF: sub_404EB0+98D↑j
.text:00405846                 mov     [esp+4Ch+var_34], 1
.text:0040584E                 mov     [esp+4Ch+var_1C], 404E9Eh
.text:00405856                 jmp     loc_404F36
.text:0040585B ; ---------------------------------------------------------------------------
.text:0040585B
.text:0040585B loc_40585B:                             ; CODE XREF: sub_404EB0+3D↑j
.text:0040585B                                         ; DATA XREF: sub_404EB0:jpt_404EED↑o
.text:0040585B                 mov     [esp+4Ch+var_21], 1 ; jumptable 00404EED case 4
.text:00405860                 jmp     def_404EED      ; jumptable 00404EED default case, cases 0,1
.text:00405865 ; ---------------------------------------------------------------------------
.text:00405865
.text:00405865 loc_405865:                             ; CODE XREF: sub_404EB0+3D↑j
.text:00405865                                         ; DATA XREF: sub_404EB0:jpt_404EED↑o
.text:00405865                 mov     [esp+4Ch+C], 404EA0h ; jumptable 00404EED cases 5,6
.text:0040586C                 call    ds:libintl_gettext
.text:00405872                 cmp     eax, 404EA0h
.text:00405877                 mov     edi, eax
.text:00405879                 jz      short loc_4058F0
.text:0040587B
.text:0040587B loc_40587B:                             ; CODE XREF: sub_404EB0+A45↓j
.text:0040587B                                         ; sub_404EB0+A4C↓j
.text:0040587B                 mov     [esp+4Ch+C], 404E9Eh
.text:00405882                 call    ds:libintl_gettext
.text:00405888                 cmp     eax, 404E9Eh
.text:0040588D                 mov     edx, eax
.text:0040588F                 jz      short loc_4058E2
.text:00405891
.text:00405891 loc_405891:                             ; CODE XREF: sub_404EB0+A37↓j
.text:00405891                                         ; sub_404EB0+A3E↓j
.text:00405891                 mov     [esp+4Ch+var_1C], edi
.text:00405895                 cmp     byte ptr [edi], 0
.text:00405898                 jz      short loc_4058C8
.text:0040589A
.text:0040589A loc_40589A:                             ; CODE XREF: sub_404EB0+A16↓j
.text:0040589A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040589E                 cmp     [esp+4Ch+var_34], ecx
.text:004058A2                 jnb     short loc_4058B7
.text:004058A4                 mov     ebp, [esp+4Ch+var_1C]
.text:004058A8                 mov     edi, [esp+4Ch+arg_0]
.text:004058AC                 mov     esi, [esp+4Ch+var_34]
.text:004058B0                 movzx   ebx, byte ptr [ebp+0]
.text:004058B4                 mov     [esi+edi], bl
.text:004058B7
.text:004058B7 loc_4058B7:                             ; CODE XREF: sub_404EB0+9F2↑j
.text:004058B7                 inc     [esp+4Ch+var_1C]
.text:004058BB                 inc     [esp+4Ch+var_34]
.text:004058BF                 mov     eax, [esp+4Ch+var_1C]
.text:004058C3                 cmp     byte ptr [eax], 0
.text:004058C6                 jnz     short loc_40589A
.text:004058C8
.text:004058C8 loc_4058C8:                             ; CODE XREF: sub_404EB0+9E8↑j
.text:004058C8                 mov     [esp+4Ch+var_21], 1
.text:004058CD                 mov     [esp+4Ch+var_1C], edx
.text:004058D1                 mov     [esp+4Ch+C], edx ; Str
.text:004058D4                 call    strlen
.text:004058D9                 mov     [esp+4Ch+var_20], eax
.text:004058DD                 jmp     def_404EED      ; jumptable 00404EED default case, cases 0,1
.text:004058E2 ; ---------------------------------------------------------------------------
.text:004058E2
.text:004058E2 loc_4058E2:                             ; CODE XREF: sub_404EB0+9DF↑j
.text:004058E2                 cmp     [esp+4Ch+arg_10], 6
.text:004058E7                 jnz     short loc_405891
.text:004058E9                 mov     edx, offset asc_404E9C ; "\"'`"
.text:004058EE                 jmp     short loc_405891
.text:004058F0 ; ---------------------------------------------------------------------------
.text:004058F0
.text:004058F0 loc_4058F0:                             ; CODE XREF: sub_404EB0+9C9↑j
.text:004058F0                 cmp     [esp+4Ch+arg_10], 6
.text:004058F5                 jnz     short loc_40587B
.text:004058F7                 mov     edi, offset asc_404E9C ; "\"'`"
.text:004058FC                 jmp     loc_40587B
.text:004058FC sub_404EB0      endp
.text:004058FC
.text:00405901 ; ---------------------------------------------------------------------------
.text:00405901                 jmp     short loc_405910
.text:00405901 ; ---------------------------------------------------------------------------
.text:00405903                 align 10h
.text:00405910
.text:00405910 loc_405910:                             ; CODE XREF: .text:00405901↑j
.text:00405910                 sub     esp, 0Ch
.text:00405913                 mov     [esp+4], ebx
.text:00405917                 mov     [esp+8], esi
.text:0040591B                 call    _errno
.text:00405920                 mov     esi, [eax]
.text:00405922                 mov     dword ptr [esp], 24h ; '$'
.text:00405929                 call    sub_406A10
.text:0040592E                 mov     edx, [esp+10h]
.text:00405932                 mov     ebx, eax
.text:00405934                 test    edx, edx
.text:00405936                 jz      short loc_405981
.text:00405938
.text:00405938 loc_405938:                             ; CODE XREF: .text:00405986↓j
.text:00405938                 mov     ecx, [edx]
.text:0040593A                 mov     [ebx], ecx
.text:0040593C                 mov     ecx, [edx+4]
.text:0040593F                 mov     [ebx+4], ecx
.text:00405942                 mov     ecx, [edx+8]
.text:00405945                 mov     [ebx+8], ecx
.text:00405948                 mov     ecx, [edx+0Ch]
.text:0040594B                 mov     [ebx+0Ch], ecx
.text:0040594E                 mov     ecx, [edx+10h]
.text:00405951                 mov     [ebx+10h], ecx
.text:00405954                 mov     ecx, [edx+14h]
.text:00405957                 mov     [ebx+14h], ecx
.text:0040595A                 mov     ecx, [edx+18h]
.text:0040595D                 mov     [ebx+18h], ecx
.text:00405960                 mov     ecx, [edx+1Ch]
.text:00405963                 mov     [ebx+1Ch], ecx
.text:00405966                 mov     ecx, [edx+20h]
.text:00405969                 mov     [ebx+20h], ecx
.text:0040596C                 call    _errno
.text:00405971                 mov     [eax], esi
.text:00405973                 mov     esi, [esp+8]
.text:00405977                 mov     eax, ebx
.text:00405979                 mov     ebx, [esp+4]
.text:0040597D                 add     esp, 0Ch
.text:00405980                 retn
.text:00405981 ; ---------------------------------------------------------------------------
.text:00405981
.text:00405981 loc_405981:                             ; CODE XREF: .text:00405936↑j
.text:00405981                 mov     edx, offset dword_411150
.text:00405986                 jmp     short loc_405938
.text:00405986 ; ---------------------------------------------------------------------------
.text:00405988                 align 10h
.text:00405990                 mov     eax, [esp+4]
.text:00405994                 test    eax, eax
.text:00405996                 jz      short loc_4059A0
.text:00405998
.text:00405998 loc_405998:                             ; CODE XREF: .text:004059A5↓j
.text:00405998                 mov     eax, [eax]
.text:0040599A                 retn
.text:0040599A ; ---------------------------------------------------------------------------
.text:0040599B                 align 10h
.text:004059A0
.text:004059A0 loc_4059A0:                             ; CODE XREF: .text:00405996↑j
.text:004059A0                 mov     eax, offset dword_411150
.text:004059A5                 jmp     short loc_405998
.text:004059A5 ; ---------------------------------------------------------------------------
.text:004059A7                 align 10h
.text:004059B0                 mov     edx, [esp+4]
.text:004059B4                 test    edx, edx
.text:004059B6                 jz      short loc_4059C0
.text:004059B8
.text:004059B8 loc_4059B8:                             ; CODE XREF: .text:004059C5↓j
.text:004059B8                 mov     ecx, [esp+8]
.text:004059BC                 mov     [edx], ecx
.text:004059BE                 retn
.text:004059BE ; ---------------------------------------------------------------------------
.text:004059BF                 align 10h
.text:004059C0
.text:004059C0 loc_4059C0:                             ; CODE XREF: .text:004059B6↑j
.text:004059C0                 mov     edx, offset dword_411150
.text:004059C5                 jmp     short loc_4059B8
.text:004059C5 ; ---------------------------------------------------------------------------
.text:004059C7                 align 10h
.text:004059D0                 sub     esp, 8
.text:004059D3                 mov     eax, [esp+0Ch]
.text:004059D7                 movzx   ecx, byte ptr [esp+10h]
.text:004059DC                 mov     [esp], ebx
.text:004059DF                 mov     ebx, [esp+14h]
.text:004059E3                 mov     [esp+4], esi
.text:004059E7                 mov     dl, cl
.text:004059E9                 shr     dl, 5
.text:004059EC                 movzx   edx, dl
.text:004059EF                 shl     edx, 2
.text:004059F2                 test    eax, eax
.text:004059F4                 lea     esi, [edx+eax+4]
.text:004059F8                 jz      short loc_405A20
.text:004059FA
.text:004059FA loc_4059FA:                             ; CODE XREF: .text:00405A26↓j
.text:004059FA                 mov     edx, [esi]
.text:004059FC                 and     ecx, 1Fh
.text:004059FF                 and     ebx, 1
.text:00405A02                 mov     eax, edx
.text:00405A04                 shr     eax, cl
.text:00405A06                 and     eax, 1
.text:00405A09                 xor     ebx, eax
.text:00405A0B                 shl     ebx, cl
.text:00405A0D                 xor     edx, ebx
.text:00405A0F                 mov     [esi], edx
.text:00405A11                 mov     ebx, [esp]
.text:00405A14                 mov     esi, [esp+4]
.text:00405A18                 add     esp, 8
.text:00405A1B                 retn
.text:00405A1B ; ---------------------------------------------------------------------------
.text:00405A1C                 align 10h
.text:00405A20
.text:00405A20 loc_405A20:                             ; CODE XREF: .text:004059F8↑j
.text:00405A20                 lea     esi, dword_411154[edx]
.text:00405A26                 jmp     short loc_4059FA
.text:00405A26 ; ---------------------------------------------------------------------------
.text:00405A28                 align 10h
.text:00405A30                 sub     esp, 2Ch
.text:00405A33                 mov     [esp+24h], ebx
.text:00405A37                 mov     ebx, [esp+40h]
.text:00405A3B                 mov     [esp+28h], esi
.text:00405A3F                 test    ebx, ebx
.text:00405A41                 jz      short loc_405A90
.text:00405A43
.text:00405A43 loc_405A43:                             ; CODE XREF: .text:00405A95↓j
.text:00405A43                 call    _errno
.text:00405A48                 mov     esi, [eax]
.text:00405A4A                 mov     [esp+14h], ebx
.text:00405A4E                 mov     edx, [ebx]
.text:00405A50                 mov     ecx, [esp+38h]
.text:00405A54                 mov     ebx, [esp+3Ch]
.text:00405A58                 mov     [esp+10h], edx
.text:00405A5C                 mov     edx, [esp+34h]
.text:00405A60                 mov     [esp+0Ch], ebx
.text:00405A64                 mov     [esp+8], ecx
.text:00405A68                 mov     [esp+4], edx
.text:00405A6C                 mov     edx, [esp+30h]
.text:00405A70                 mov     [esp], edx
.text:00405A73                 call    sub_404EB0
.text:00405A78                 mov     ebx, eax
.text:00405A7A                 call    _errno
.text:00405A7F                 mov     [eax], esi
.text:00405A81                 mov     esi, [esp+28h]
.text:00405A85                 mov     eax, ebx
.text:00405A87                 mov     ebx, [esp+24h]
.text:00405A8B                 add     esp, 2Ch
.text:00405A8E                 retn
.text:00405A8E ; ---------------------------------------------------------------------------
.text:00405A8F                 align 10h
.text:00405A90
.text:00405A90 loc_405A90:                             ; CODE XREF: .text:00405A41↑j
.text:00405A90                 mov     ebx, offset dword_411150
.text:00405A95                 jmp     short loc_405A43
.text:00405A95 ; ---------------------------------------------------------------------------
.text:00405A97                 align 10h
.text:00405AA0                 push    ebp
.text:00405AA1                 push    edi
.text:00405AA2                 push    esi
.text:00405AA3                 push    ebx
.text:00405AA4                 sub     esp, 2Ch
.text:00405AA7                 mov     ebp, [esp+48h]
.text:00405AAB                 call    _errno
.text:00405AB0                 mov     edx, [eax]
.text:00405AB2                 test    ebp, ebp
.text:00405AB4                 mov     ebx, ebp
.text:00405AB6                 mov     [esp+28h], edx
.text:00405ABA                 jz      loc_405B70
.text:00405AC0
.text:00405AC0 loc_405AC0:                             ; CODE XREF: .text:00405B75↓j
.text:00405AC0                 call    _errno
.text:00405AC5                 mov     edi, [eax]
.text:00405AC7                 mov     esi, ebp
.text:00405AC9                 mov     [esp+14h], ebx
.text:00405ACD                 mov     ecx, [ebx]
.text:00405ACF                 mov     dword ptr [esp], 0
.text:00405AD6                 mov     edx, [esp+44h]
.text:00405ADA                 mov     dword ptr [esp+4], 0
.text:00405AE2                 mov     eax, [esp+40h]
.text:00405AE6                 mov     [esp+10h], ecx
.text:00405AEA                 mov     [esp+0Ch], edx
.text:00405AEE                 mov     [esp+8], eax
.text:00405AF2                 call    sub_404EB0
.text:00405AF7                 mov     ebx, eax
.text:00405AF9                 call    _errno
.text:00405AFE                 mov     [eax], edi
.text:00405B00                 lea     edi, [ebx+1]
.text:00405B03                 mov     [esp], edi
.text:00405B06                 call    sub_406A10
.text:00405B0B                 mov     [esp+24h], eax
.text:00405B0F                 test    ebp, ebp
.text:00405B11                 jz      short loc_405B62
.text:00405B13
.text:00405B13 loc_405B13:                             ; CODE XREF: .text:00405B67↓j
.text:00405B13                 call    _errno
.text:00405B18                 mov     ebp, [eax]
.text:00405B1A                 mov     [esp+14h], esi
.text:00405B1E                 mov     ecx, [esi]
.text:00405B20                 mov     [esp+4], edi
.text:00405B24                 mov     edx, [esp+44h]
.text:00405B28                 mov     esi, [esp+24h]
.text:00405B2C                 mov     [esp+10h], ecx
.text:00405B30                 mov     eax, [esp+40h]
.text:00405B34                 mov     [esp+0Ch], edx
.text:00405B38                 mov     [esp], esi
.text:00405B3B                 mov     [esp+8], eax
.text:00405B3F                 call    sub_404EB0
.text:00405B44                 call    _errno
.text:00405B49                 mov     [eax], ebp
.text:00405B4B                 call    _errno
.text:00405B50                 mov     ebx, [esp+28h]
.text:00405B54                 mov     [eax], ebx
.text:00405B56                 mov     eax, [esp+24h]
.text:00405B5A                 add     esp, 2Ch
.text:00405B5D                 pop     ebx
.text:00405B5E                 pop     esi
.text:00405B5F                 pop     edi
.text:00405B60                 pop     ebp
.text:00405B61                 retn
.text:00405B62 ; ---------------------------------------------------------------------------
.text:00405B62
.text:00405B62 loc_405B62:                             ; CODE XREF: .text:00405B11↑j
.text:00405B62                 mov     esi, offset dword_411150
.text:00405B67                 jmp     short loc_405B13
.text:00405B67 ; ---------------------------------------------------------------------------
.text:00405B69                 align 10h
.text:00405B70
.text:00405B70 loc_405B70:                             ; CODE XREF: .text:00405ABA↑j
.text:00405B70                 mov     ebx, offset dword_411150
.text:00405B75                 jmp     loc_405AC0
.text:00405B75 ; ---------------------------------------------------------------------------
.text:00405B7A                 align 10h
.text:00405B80                 sub     esp, 1Ch
.text:00405B83                 mov     edx, [esp+24h]
.text:00405B87                 mov     dword ptr [esp+0Ch], offset dword_411150
.text:00405B8F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405B97                 mov     [esp+4], edx
.text:00405B9B                 mov     edx, [esp+20h]
.text:00405B9F                 mov     [esp], edx
.text:00405BA2                 call    sub_405FF0
.text:00405BA7                 add     esp, 1Ch
.text:00405BAA                 retn
.text:00405BAA ; ---------------------------------------------------------------------------
.text:00405BAB                 align 10h
.text:00405BB0                 sub     esp, 1Ch
.text:00405BB3                 mov     edx, [esp+20h]
.text:00405BB7                 mov     dword ptr [esp+0Ch], offset dword_411150
.text:00405BBF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405BC7                 mov     [esp+4], edx
.text:00405BCB                 mov     dword ptr [esp], 0
.text:00405BD2                 call    sub_405FF0
.text:00405BD7                 add     esp, 1Ch
.text:00405BDA                 retn
.text:00405BDA ; ---------------------------------------------------------------------------
.text:00405BDB                 align 10h
.text:00405BE0
.text:00405BE0 ; =============== S U B R O U T I N E =======================================
.text:00405BE0
.text:00405BE0
.text:00405BE0 ; int __cdecl sub_405BE0(int, int, char *)
.text:00405BE0 sub_405BE0      proc near               ; CODE XREF: sub_403FA0+1A↑p
.text:00405BE0                                         ; sub_403FD0+1A↑p
.text:00405BE0
.text:00405BE0 var_BC          = dword ptr -0BCh
.text:00405BE0 var_B8          = dword ptr -0B8h
.text:00405BE0 var_B4          = dword ptr -0B4h
.text:00405BE0 var_B0          = dword ptr -0B0h
.text:00405BE0 var_AC          = dword ptr -0ACh
.text:00405BE0 var_A8          = dword ptr -0A8h
.text:00405BE0 var_A4          = dword ptr -0A4h
.text:00405BE0 var_A0          = dword ptr -0A0h
.text:00405BE0 var_9C          = dword ptr -9Ch
.text:00405BE0 var_98          = dword ptr -98h
.text:00405BE0 var_94          = dword ptr -94h
.text:00405BE0 var_90          = dword ptr -90h
.text:00405BE0 var_8C          = dword ptr -8Ch
.text:00405BE0 var_7C          = dword ptr -7Ch
.text:00405BE0 var_78          = dword ptr -78h
.text:00405BE0 var_74          = dword ptr -74h
.text:00405BE0 var_70          = dword ptr -70h
.text:00405BE0 var_6C          = dword ptr -6Ch
.text:00405BE0 var_68          = dword ptr -68h
.text:00405BE0 var_64          = dword ptr -64h
.text:00405BE0 var_60          = dword ptr -60h
.text:00405BE0 var_5C          = dword ptr -5Ch
.text:00405BE0 var_4C          = dword ptr -4Ch
.text:00405BE0 var_48          = dword ptr -48h
.text:00405BE0 var_44          = dword ptr -44h
.text:00405BE0 var_40          = dword ptr -40h
.text:00405BE0 var_3C          = dword ptr -3Ch
.text:00405BE0 var_38          = dword ptr -38h
.text:00405BE0 var_34          = dword ptr -34h
.text:00405BE0 var_30          = dword ptr -30h
.text:00405BE0 var_2C          = dword ptr -2Ch
.text:00405BE0 arg_0           = dword ptr  4
.text:00405BE0 arg_4           = dword ptr  8
.text:00405BE0 arg_8           = dword ptr  0Ch
.text:00405BE0
.text:00405BE0                 push    ebp
.text:00405BE1                 xor     eax, eax
.text:00405BE3                 mov     ecx, 8
.text:00405BE8                 push    edi
.text:00405BE9                 push    esi
.text:00405BEA                 push    ebx
.text:00405BEB                 sub     esp, 0ACh
.text:00405BF1                 mov     ebp, [esp+0BCh+arg_4]
.text:00405BF8                 cld
.text:00405BF9                 lea     edi, [esp+0BCh+var_A8]
.text:00405BFD                 mov     [esp+0BCh+var_AC], ebp
.text:00405C01                 rep stosd
.text:00405C03                 mov     eax, [esp+0BCh+var_8C]
.text:00405C07                 mov     edi, [esp+0BCh+var_AC]
.text:00405C0B                 mov     esi, [esp+0BCh+var_A8]
.text:00405C0F                 mov     [esp+0BCh+var_5C], eax
.text:00405C13                 mov     ebp, [esp+0BCh+var_A4]
.text:00405C17                 mov     eax, [esp+0BCh+var_AC]
.text:00405C1B                 mov     [esp+0BCh+var_7C], edi
.text:00405C1F                 mov     ecx, [esp+0BCh+var_94]
.text:00405C23                 mov     edi, [esp+0BCh+var_A0]
.text:00405C27                 mov     [esp+0BCh+var_78], esi
.text:00405C2B                 mov     edx, [esp+0BCh+var_90]
.text:00405C2F                 mov     esi, [esp+0BCh+var_9C]
.text:00405C33                 mov     [esp+0BCh+var_4C], eax
.text:00405C37                 mov     ebx, [esp+0BCh+var_98]
.text:00405C3B                 mov     eax, [esp+0BCh+var_A8]
.text:00405C3F                 mov     [esp+0BCh+var_74], ebp
.text:00405C43                 mov     [esp+0BCh+var_70], edi
.text:00405C47                 mov     [esp+0BCh+var_6C], esi
.text:00405C4B                 mov     [esp+0BCh+var_68], ebx
.text:00405C4F                 mov     [esp+0BCh+var_64], ecx
.text:00405C53                 mov     [esp+0BCh+var_60], edx
.text:00405C57                 mov     [esp+0BCh+var_48], eax
.text:00405C5B                 mov     [esp+0BCh+var_44], ebp
.text:00405C5F                 mov     [esp+0BCh+var_40], edi
.text:00405C63                 mov     [esp+0BCh+var_3C], esi
.text:00405C6A                 mov     [esp+0BCh+var_38], ebx
.text:00405C71                 mov     ebx, [esp+0BCh+var_8C]
.text:00405C75                 mov     [esp+0BCh+var_30], edx
.text:00405C7C                 mov     edx, [esp+0BCh+arg_8]
.text:00405C83                 mov     [esp+0BCh+var_34], ecx
.text:00405C8A                 lea     ecx, [esp+0BCh+var_4C]
.text:00405C8E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00405C92                 mov     edx, [esp+0BCh+arg_0]
.text:00405C99                 mov     [esp+0BCh+var_2C], ebx
.text:00405CA0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00405CA4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00405CAC                 mov     [esp+0BCh+var_BC], edx ; int
.text:00405CAF                 call    sub_405FF0
.text:00405CB4                 add     esp, 0ACh
.text:00405CBA                 pop     ebx
.text:00405CBB                 pop     esi
.text:00405CBC                 pop     edi
.text:00405CBD                 pop     ebp
.text:00405CBE                 retn
.text:00405CBE sub_405BE0      endp
.text:00405CBE
.text:00405CBE ; ---------------------------------------------------------------------------
.text:00405CBF                 align 10h
.text:00405CC0                 push    ebp
.text:00405CC1                 xor     eax, eax
.text:00405CC3                 mov     ecx, 8
.text:00405CC8                 push    edi
.text:00405CC9                 push    esi
.text:00405CCA                 push    ebx
.text:00405CCB                 sub     esp, 0ACh
.text:00405CD1                 mov     edx, [esp+0C4h]
.text:00405CD8                 cld
.text:00405CD9                 lea     edi, [esp+14h]
.text:00405CDD                 mov     [esp+10h], edx
.text:00405CE1                 rep stosd
.text:00405CE3                 mov     eax, [esp+30h]
.text:00405CE7                 mov     ebp, [esp+10h]
.text:00405CEB                 mov     edi, [esp+14h]
.text:00405CEF                 mov     [esp+60h], eax
.text:00405CF3                 mov     esi, [esp+20h]
.text:00405CF7                 mov     eax, [esp+10h]
.text:00405CFB                 mov     [esp+40h], ebp
.text:00405CFF                 mov     ecx, [esp+28h]
.text:00405D03                 mov     ebp, [esp+18h]
.text:00405D07                 mov     [esp+44h], edi
.text:00405D0B                 mov     edx, [esp+2Ch]
.text:00405D0F                 mov     edi, [esp+1Ch]
.text:00405D13                 mov     [esp+70h], eax
.text:00405D17                 mov     ebx, [esp+24h]
.text:00405D1B                 mov     eax, [esp+14h]
.text:00405D1F                 mov     [esp+48h], ebp
.text:00405D23                 mov     [esp+4Ch], edi
.text:00405D27                 mov     [esp+50h], esi
.text:00405D2B                 mov     [esp+54h], ebx
.text:00405D2F                 mov     [esp+58h], ecx
.text:00405D33                 mov     [esp+5Ch], edx
.text:00405D37                 mov     [esp+74h], eax
.text:00405D3B                 mov     [esp+78h], ebp
.text:00405D3F                 mov     [esp+7Ch], edi
.text:00405D43                 mov     [esp+80h], esi
.text:00405D4A                 mov     [esp+84h], ebx
.text:00405D51                 mov     esi, [esp+30h]
.text:00405D55                 lea     ebx, [esp+70h]
.text:00405D59                 mov     [esp+8Ch], edx
.text:00405D60                 mov     edx, [esp+0C8h]
.text:00405D67                 mov     [esp+88h], ecx
.text:00405D6E                 mov     ecx, [esp+0CCh]
.text:00405D75                 mov     [esp+4], edx
.text:00405D79                 mov     edx, [esp+0C0h]
.text:00405D80                 mov     [esp+90h], esi
.text:00405D87                 mov     [esp+0Ch], ebx
.text:00405D8B                 mov     [esp+8], ecx
.text:00405D8F                 mov     [esp], edx
.text:00405D92                 call    sub_405FF0
.text:00405D97                 add     esp, 0ACh
.text:00405D9D                 pop     ebx
.text:00405D9E                 pop     esi
.text:00405D9F                 pop     edi
.text:00405DA0                 pop     ebp
.text:00405DA1                 retn
.text:00405DA1 ; ---------------------------------------------------------------------------
.text:00405DA2                 align 10h
.text:00405DB0                 push    ebp
.text:00405DB1                 xor     eax, eax
.text:00405DB3                 mov     ecx, 8
.text:00405DB8                 push    edi
.text:00405DB9                 push    esi
.text:00405DBA                 push    ebx
.text:00405DBB                 sub     esp, 0ACh
.text:00405DC1                 mov     edi, [esp+0C0h]
.text:00405DC8                 cld
.text:00405DC9                 mov     [esp+10h], edi
.text:00405DCD                 lea     edi, [esp+14h]
.text:00405DD1                 rep stosd
.text:00405DD3                 mov     eax, [esp+30h]
.text:00405DD7                 mov     esi, [esp+10h]
.text:00405DDB                 mov     ebx, [esp+14h]
.text:00405DDF                 mov     [esp+60h], eax
.text:00405DE3                 mov     ebp, [esp+18h]
.text:00405DE7                 mov     eax, [esp+10h]
.text:00405DEB                 mov     [esp+40h], esi
.text:00405DEF                 mov     edi, [esp+1Ch]
.text:00405DF3                 mov     esi, [esp+20h]
.text:00405DF7                 mov     [esp+44h], ebx
.text:00405DFB                 mov     ecx, [esp+28h]
.text:00405DFF                 mov     edx, [esp+2Ch]
.text:00405E03                 mov     [esp+70h], eax
.text:00405E07                 mov     ebx, [esp+24h]
.text:00405E0B                 mov     eax, [esp+14h]
.text:00405E0F                 mov     [esp+48h], ebp
.text:00405E13                 mov     [esp+4Ch], edi
.text:00405E17                 mov     [esp+50h], esi
.text:00405E1B                 mov     [esp+54h], ebx
.text:00405E1F                 mov     [esp+58h], ecx
.text:00405E23                 mov     [esp+5Ch], edx
.text:00405E27                 mov     [esp+74h], eax
.text:00405E2B                 mov     [esp+78h], ebp
.text:00405E2F                 mov     [esp+7Ch], edi
.text:00405E33                 mov     [esp+80h], esi
.text:00405E3A                 mov     [esp+84h], ebx
.text:00405E41                 mov     [esp+8Ch], edx
.text:00405E48                 lea     edx, [esp+70h]
.text:00405E4C                 mov     [esp+88h], ecx
.text:00405E53                 mov     ecx, [esp+30h]
.text:00405E57                 mov     [esp+0Ch], edx
.text:00405E5B                 mov     edx, [esp+0C4h]
.text:00405E62                 mov     [esp+90h], ecx
.text:00405E69                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405E71                 mov     [esp+4], edx
.text:00405E75                 mov     dword ptr [esp], 0
.text:00405E7C                 call    sub_405FF0
.text:00405E81                 add     esp, 0ACh
.text:00405E87                 pop     ebx
.text:00405E88                 pop     esi
.text:00405E89                 pop     edi
.text:00405E8A                 pop     ebp
.text:00405E8B                 retn
.text:00405E8B ; ---------------------------------------------------------------------------
.text:00405E8C                 align 10h
.text:00405E90                 push    edi
.text:00405E91                 push    esi
.text:00405E92                 push    ebx
.text:00405E93                 sub     esp, 40h
.text:00405E96                 mov     edx, ds:dword_41115C
.text:00405E9C                 mov     ebx, ds:dword_411150
.text:00405EA2                 mov     esi, ds:dword_411158
.text:00405EA8                 mov     edi, ds:dword_411154
.text:00405EAE                 mov     [esp+1Ch], edx
.text:00405EB2                 mov     ecx, ds:dword_411160
.text:00405EB8                 mov     edx, ds:dword_411170
.text:00405EBE                 mov     [esp+10h], ebx
.text:00405EC2                 mov     ebx, ds:dword_411164
.text:00405EC8                 mov     [esp+30h], edx
.text:00405ECC                 movzx   edx, byte ptr [esp+54h]
.text:00405ED1                 mov     [esp+18h], esi
.text:00405ED5                 mov     esi, ds:dword_41116C
.text:00405EDB                 mov     [esp+14h], edi
.text:00405EDF                 mov     edi, ds:dword_411168
.text:00405EE5                 mov     [esp+20h], ecx
.text:00405EE9                 mov     cl, dl
.text:00405EEB                 shr     cl, 5
.text:00405EEE                 mov     [esp+24h], ebx
.text:00405EF2                 movzx   ebx, cl
.text:00405EF5                 mov     [esp+2Ch], esi
.text:00405EF9                 lea     esi, [esp+10h]
.text:00405EFD                 mov     [esp+28h], edi
.text:00405F01                 lea     edi, [esi+ebx*4]
.text:00405F04                 mov     ebx, edx
.text:00405F06                 mov     edx, [edi+4]
.text:00405F09                 and     ebx, 1Fh
.text:00405F0C                 mov     cl, bl
.text:00405F0E                 mov     eax, edx
.text:00405F10                 shr     eax, cl
.text:00405F12                 and     eax, 1
.text:00405F15                 xor     eax, 1
.text:00405F18                 shl     eax, cl
.text:00405F1A                 xor     edx, eax
.text:00405F1C                 mov     [edi+4], edx
.text:00405F1F                 mov     edx, [esp+50h]
.text:00405F23                 mov     [esp+0Ch], esi
.text:00405F27                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405F2F                 mov     [esp+4], edx
.text:00405F33                 mov     dword ptr [esp], 0
.text:00405F3A                 call    sub_405FF0
.text:00405F3F                 add     esp, 40h
.text:00405F42                 pop     ebx
.text:00405F43                 pop     esi
.text:00405F44                 pop     edi
.text:00405F45                 retn
.text:00405F45 ; ---------------------------------------------------------------------------
.text:00405F46                 align 10h
.text:00405F50
.text:00405F50 ; =============== S U B R O U T I N E =======================================
.text:00405F50
.text:00405F50
.text:00405F50 ; int __cdecl sub_405F50(char *)
.text:00405F50 sub_405F50      proc near               ; CODE XREF: sub_404670+64↑p
.text:00405F50
.text:00405F50 var_4C          = dword ptr -4Ch
.text:00405F50 var_48          = dword ptr -48h
.text:00405F50 var_44          = dword ptr -44h
.text:00405F50 var_40          = dword ptr -40h
.text:00405F50 var_3C          = dword ptr -3Ch
.text:00405F50 var_38          = dword ptr -38h
.text:00405F50 var_34          = dword ptr -34h
.text:00405F50 var_30          = dword ptr -30h
.text:00405F50 var_2C          = dword ptr -2Ch
.text:00405F50 var_28          = dword ptr -28h
.text:00405F50 var_24          = dword ptr -24h
.text:00405F50 var_20          = dword ptr -20h
.text:00405F50 var_1C          = dword ptr -1Ch
.text:00405F50 arg_0           = dword ptr  4
.text:00405F50
.text:00405F50                 sub     esp, 4Ch
.text:00405F53                 mov     ecx, ds:dword_411150
.text:00405F59                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00405F61                 mov     edx, ds:dword_411154
.text:00405F67                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00405F6E                 mov     [esp+4Ch+var_3C], ecx
.text:00405F72                 mov     ecx, ds:dword_41115C
.text:00405F78                 mov     [esp+4Ch+var_38], edx
.text:00405F7C                 mov     edx, ds:dword_411158
.text:00405F82                 mov     [esp+4Ch+var_30], ecx
.text:00405F86                 mov     ecx, ds:dword_411160
.text:00405F8C                 mov     eax, edx
.text:00405F8E                 shr     eax, 1Ah
.text:00405F91                 and     eax, 1
.text:00405F94                 xor     eax, 1
.text:00405F97                 mov     [esp+4Ch+var_2C], ecx
.text:00405F9B                 shl     eax, 1Ah
.text:00405F9E                 mov     ecx, ds:dword_411164
.text:00405FA4                 xor     edx, eax
.text:00405FA6                 mov     [esp+4Ch+var_34], edx
.text:00405FAA                 mov     edx, [esp+4Ch+arg_0]
.text:00405FAE                 mov     [esp+4Ch+var_28], ecx
.text:00405FB2                 mov     ecx, ds:dword_411168
.text:00405FB8                 mov     [esp+4Ch+var_48], edx ; char *
.text:00405FBC                 mov     [esp+4Ch+var_24], ecx
.text:00405FC0                 mov     ecx, ds:dword_41116C
.text:00405FC6                 mov     [esp+4Ch+var_20], ecx
.text:00405FCA                 mov     ecx, ds:dword_411170
.text:00405FD0                 mov     [esp+4Ch+var_1C], ecx
.text:00405FD4                 lea     ecx, [esp+4Ch+var_3C]
.text:00405FD8                 mov     [esp+4Ch+var_40], ecx ; int
.text:00405FDC                 call    sub_405FF0
.text:00405FE1                 add     esp, 4Ch
.text:00405FE4                 retn
.text:00405FE4 sub_405F50      endp
.text:00405FE4
.text:00405FE4 ; ---------------------------------------------------------------------------
.text:00405FE5                 align 10h
.text:00405FF0
.text:00405FF0 ; =============== S U B R O U T I N E =======================================
.text:00405FF0
.text:00405FF0
.text:00405FF0 ; int __cdecl sub_405FF0(int, char *, int, int)
.text:00405FF0 sub_405FF0      proc near               ; CODE XREF: .text:00405BA2↑p
.text:00405FF0                                         ; .text:00405BD2↑p ...
.text:00405FF0
.text:00405FF0 Block           = dword ptr -2Ch
.text:00405FF0 var_28          = dword ptr -28h
.text:00405FF0 Str             = dword ptr -24h
.text:00405FF0 var_20          = dword ptr -20h
.text:00405FF0 var_1C          = dword ptr -1Ch
.text:00405FF0 var_18          = dword ptr -18h
.text:00405FF0 var_14          = dword ptr -14h
.text:00405FF0 arg_0           = dword ptr  4
.text:00405FF0 arg_4           = dword ptr  8
.text:00405FF0 arg_8           = dword ptr  0Ch
.text:00405FF0 arg_C           = dword ptr  10h
.text:00405FF0
.text:00405FF0                 push    ebp
.text:00405FF1                 push    edi
.text:00405FF2                 push    esi
.text:00405FF3                 push    ebx
.text:00405FF4                 sub     esp, 1Ch
.text:00405FF7                 call    _errno
.text:00405FFC                 mov     edx, [eax]
.text:00405FFE                 mov     eax, [esp+2Ch+arg_0]
.text:00406002                 mov     [esp+2Ch+var_14], edx
.text:00406006                 test    eax, eax
.text:00406008                 js      loc_4061AA
.text:0040600E                 mov     eax, [esp+2Ch+arg_0]
.text:00406012                 cmp     dword_410040, eax
.text:00406018                 ja      short loc_406090
.text:0040601A                 mov     esi, eax
.text:0040601C                 inc     esi
.text:0040601D                 cmp     esi, 1FFFFFFFh
.text:00406023                 ja      loc_4061AF
.text:00406029                 mov     ebx, off_41004C
.text:0040602F                 cmp     ebx, offset dword_410044
.text:00406035                 jz      loc_406181
.text:0040603B
.text:0040603B loc_40603B:                             ; CODE XREF: sub_405FF0+1B5↓j
.text:0040603B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040603E                 lea     ecx, ds:0[esi*8]
.text:00406045                 mov     ebp, esi
.text:00406047                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040604B                 call    sub_406AA0
.text:00406050                 mov     off_41004C, eax
.text:00406055                 mov     ebx, dword_410040
.text:0040605B                 sub     ebp, ebx
.text:0040605D                 lea     edi, [eax+ebx*8]
.text:00406060                 lea     eax, ds:0[ebp*8]
.text:00406067                 cmp     eax, 7
.text:0040606A                 jbe     short loc_406080
.text:0040606C                 test    edi, 4
.text:00406072                 jz      short loc_406080
.text:00406074                 mov     dword ptr [edi], 0
.text:0040607A                 sub     eax, 4
.text:0040607D                 add     edi, 4
.text:00406080
.text:00406080 loc_406080:                             ; CODE XREF: sub_405FF0+7A↑j
.text:00406080                                         ; sub_405FF0+82↑j
.text:00406080                 cld
.text:00406081                 mov     ecx, eax
.text:00406083                 shr     ecx, 2
.text:00406086                 xor     eax, eax
.text:00406088                 rep stosd
.text:0040608A                 mov     dword_410040, esi
.text:00406090
.text:00406090 loc_406090:                             ; CODE XREF: sub_405FF0+28↑j
.text:00406090                 mov     esi, off_41004C
.text:00406096                 mov     eax, [esp+2Ch+arg_0]
.text:0040609A                 mov     ebp, [esi+eax*8]
.text:0040609D                 mov     edi, [esi+eax*8+4]
.text:004060A1                 mov     esi, [esp+2Ch+arg_C]
.text:004060A5                 test    esi, esi
.text:004060A7                 jz      loc_406177
.text:004060AD
.text:004060AD loc_4060AD:                             ; CODE XREF: sub_405FF0+18C↓j
.text:004060AD                 call    _errno
.text:004060B2                 mov     ebx, [eax]
.text:004060B4                 mov     [esp+2Ch+var_18], esi ; int
.text:004060B8                 mov     ecx, [esi]
.text:004060BA                 mov     [esp+2Ch+Block], edi ; int
.text:004060BD                 mov     edx, [esp+2Ch+arg_8]
.text:004060C1                 mov     [esp+2Ch+var_28], ebp ; int
.text:004060C5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004060C9                 mov     ecx, [esp+2Ch+arg_4]
.text:004060CD                 mov     [esp+2Ch+var_20], edx ; int
.text:004060D1                 mov     [esp+2Ch+Str], ecx ; Str
.text:004060D5                 call    sub_404EB0
.text:004060DA                 mov     esi, eax
.text:004060DC                 call    _errno
.text:004060E1                 mov     [eax], ebx
.text:004060E3                 cmp     ebp, esi
.text:004060E5                 ja      short loc_40615B
.text:004060E7                 lea     ebp, [esi+1]
.text:004060EA                 mov     ebx, off_41004C
.text:004060F0                 cmp     edi, offset unk_411050
.text:004060F6                 mov     esi, [esp+2Ch+arg_0]
.text:004060FA                 mov     [ebx+esi*8], ebp
.text:004060FD                 jz      short loc_40610D
.text:004060FF                 mov     [esp+2Ch+Block], edi ; Block
.text:00406102                 call    free
.text:00406107                 mov     ebx, off_41004C
.text:0040610D
.text:0040610D loc_40610D:                             ; CODE XREF: sub_405FF0+10D↑j
.text:0040610D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00406110                 call    sub_406A10
.text:00406115                 mov     esi, [esp+2Ch+arg_C]
.text:00406119                 mov     edi, eax
.text:0040611B                 mov     eax, [esp+2Ch+arg_0]
.text:0040611F                 test    esi, esi
.text:00406121                 mov     [ebx+eax*8+4], edi
.text:00406125                 jz      short loc_406170
.text:00406127
.text:00406127 loc_406127:                             ; CODE XREF: sub_405FF0+185↓j
.text:00406127                 call    _errno
.text:0040612C                 mov     ebx, [eax]
.text:0040612E                 mov     [esp+2Ch+var_18], esi ; int
.text:00406132                 mov     ecx, [esi]
.text:00406134                 mov     [esp+2Ch+Block], edi ; int
.text:00406137                 mov     edx, [esp+2Ch+arg_8]
.text:0040613B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040613F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00406143                 mov     ecx, [esp+2Ch+arg_4]
.text:00406147                 mov     [esp+2Ch+var_20], edx ; int
.text:0040614B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040614F                 call    sub_404EB0
.text:00406154                 call    _errno
.text:00406159                 mov     [eax], ebx
.text:0040615B
.text:0040615B loc_40615B:                             ; CODE XREF: sub_405FF0+F5↑j
.text:0040615B                 call    _errno
.text:00406160                 mov     ebp, [esp+2Ch+var_14]
.text:00406164                 mov     [eax], ebp
.text:00406166                 add     esp, 1Ch
.text:00406169                 mov     eax, edi
.text:0040616B                 pop     ebx
.text:0040616C                 pop     esi
.text:0040616D                 pop     edi
.text:0040616E                 pop     ebp
.text:0040616F                 retn
.text:00406170 ; ---------------------------------------------------------------------------
.text:00406170
.text:00406170 loc_406170:                             ; CODE XREF: sub_405FF0+135↑j
.text:00406170                 mov     esi, offset dword_411150
.text:00406175                 jmp     short loc_406127
.text:00406177 ; ---------------------------------------------------------------------------
.text:00406177
.text:00406177 loc_406177:                             ; CODE XREF: sub_405FF0+B7↑j
.text:00406177                 mov     esi, offset dword_411150
.text:0040617C                 jmp     loc_4060AD
.text:00406181 ; ---------------------------------------------------------------------------
.text:00406181
.text:00406181 loc_406181:                             ; CODE XREF: sub_405FF0+45↑j
.text:00406181                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00406188                 call    sub_406A10
.text:0040618D                 mov     off_41004C, eax
.text:00406192                 mov     edi, dword_410044
.text:00406198                 mov     ebx, eax
.text:0040619A                 mov     ecx, off_410048
.text:004061A0                 mov     [eax], edi
.text:004061A2                 mov     [eax+4], ecx
.text:004061A5                 jmp     loc_40603B
.text:004061AA ; ---------------------------------------------------------------------------
.text:004061AA
.text:004061AA loc_4061AA:                             ; CODE XREF: sub_405FF0+18↑j
.text:004061AA                 call    abort
.text:004061AF ; ---------------------------------------------------------------------------
.text:004061AF
.text:004061AF loc_4061AF:                             ; CODE XREF: sub_405FF0+33↑j
.text:004061AF                 call    sub_403F60
.text:004061AF sub_405FF0      endp
.text:004061AF
.text:004061AF ; ---------------------------------------------------------------------------
.text:004061B4                 align 10h
.text:004061C0
.text:004061C0 loc_4061C0:                             ; DATA XREF: sub_406250:loc_4062D0↓o
.text:004061C0                                         ; sub_406250:loc_40631B↓o ...
.text:004061C0                 das
.text:004061C1                 add     [eax-6F6F6F70h], dl
.text:004061C7                 nop
.text:004061C8                 nop
.text:004061C9                 nop
.text:004061CA                 nop
.text:004061CB                 nop
.text:004061CC                 nop
.text:004061CD                 nop
.text:004061CE                 nop
.text:004061CF                 nop
.text:004061D0                 nop
.text:004061D1                 nop
.text:004061D2                 nop
.text:004061D3                 nop
.text:004061D4                 nop
.text:004061D5                 nop
.text:004061D6                 nop
.text:004061D7                 nop
.text:004061D8                 nop
.text:004061D9                 nop
.text:004061DA                 nop
.text:004061DB                 nop
.text:004061DC                 nop
.text:004061DD                 nop
.text:004061DE                 nop
.text:004061DF                 nop
.text:004061E0
.text:004061E0 loc_4061E0:                             ; DATA XREF: sub_406250+22E↓o
.text:004061E0                                         ; sub_406250+5CB↓o ...
.text:004061E0                 db      2Eh, 2Eh
.text:004061E0                 das
.text:004061E3                 db      2Eh, 2Eh
.text:004061E3                 das
.text:004061E6                 arpl    [edi+72h], bp
.text:004061E9                 db      65h
.text:004061E9                 jnz     short near ptr loc_40625A+6
.text:004061EC                 imul    ebp, [ebx+esi*2+2Dh], 2E332E35h
.text:004061F4                 xor     ds:2F637273h, ch
.text:004061FA                 insb
.text:004061FB                 imul    esp, [edx+2Fh], 69646863h
.text:00406202                 jb      short near ptr loc_406230+1
.text:00406204                 insb
.text:00406205                 outsd
.text:00406206                 outsb
.text:00406207                 arpl    cs:[bx+si], ax
.text:0040620B
.text:0040620B loc_40620B:                             ; DATA XREF: sub_406250+236↓o
.text:0040620B                 insb
.text:0040620C                 outs    dx, byte ptr gs:[esi]
.text:0040620E                 and     ds:7473203Dh, bh
.text:00406214                 jb      short loc_406279
.text:00406216                 jnb     short loc_406288
.text:00406218                 outsb
.text:00406219                 and     [eax], ch
.text:0040621B                 jnb     short near ptr loc_40628D+4
.text:0040621D                 popa
.text:0040621E                 jb      short near ptr loc_406292+2
.text:00406220                 sub     al, 20h ; ' '
.text:00406222                 and     ch, [edi]
.text:00406224                 and     ch, [ecx]
.text:00406226                 add     [edx], ch
.text:00406228                 and     fs:2F27203Dh, bh
.text:0040622F                 daa
.text:00406230
.text:00406230 loc_406230:                             ; CODE XREF: .text:00406202↑j
.text:00406230                 and     [esp+edi*2+20h], bh
.text:00406234                 sub     ah, [eax+3Dh]
.text:00406238                 cmp     eax, 305C2720h
.text:0040623D                 daa
.text:0040623E                 add     [eax], dh
.text:00406240                 and     [eax], bh
.text:00406243                 insb
.text:00406244                 outs    dx, byte ptr gs:[esi]
.text:00406246                 add     [ecx+27BC8DF6h], cl
.text:00406246 ; ---------------------------------------------------------------------------
.text:0040624C                 dd 0
.text:00406250
.text:00406250 ; =============== S U B R O U T I N E =======================================
.text:00406250
.text:00406250
.text:00406250 ; int __cdecl sub_406250(LPCSTR)
.text:00406250 sub_406250      proc near               ; CODE XREF: sub_404790+17↑j
.text:00406250
.text:00406250 Str             = dword ptr -14Ch
.text:00406250 Control         = dword ptr -148h
.text:00406250 MaxCount        = dword ptr -144h
.text:00406250 var_130         = dword ptr -130h
.text:00406250 var_12C         = byte ptr -12Ch
.text:00406250 var_29          = byte ptr -29h
.text:00406250 var_28          = dword ptr -28h
.text:00406250 FileHandle      = dword ptr -24h
.text:00406250 arg_0           = dword ptr  4
.text:00406250
.text:00406250                 push    ebp
.text:00406251                 push    edi
.text:00406252                 push    esi
.text:00406253                 push    ebx
.text:00406254                 sub     esp, 13Ch
.text:0040625A
.text:0040625A loc_40625A:                             ; CODE XREF: .text:004061E9↑j
.text:0040625A                 mov     esi, [esp+14Ch+arg_0]
.text:00406261                 mov     [esp+14Ch+Str], esi ; LPCSTR
.text:00406264                 call    sub_407300
.text:00406269                 test    eax, eax
.text:0040626B                 mov     ebx, eax
.text:0040626D                 jnz     short loc_406280
.text:0040626F
.text:0040626F loc_40626F:                             ; CODE XREF: sub_406250:loc_406288↓j
.text:0040626F                 mov     eax, ebx
.text:00406271
.text:00406271 loc_406271:                             ; CODE XREF: sub_406250+214↓j
.text:00406271                                         ; sub_406250+2C7↓j
.text:00406271                 add     esp, 13Ch
.text:00406277                 pop     ebx
.text:00406278                 pop     esi
.text:00406279
.text:00406279 loc_406279:                             ; CODE XREF: .text:00406214↑j
.text:00406279                 pop     edi
.text:0040627A                 pop     ebp
.text:0040627B                 retn
.text:0040627B ; ---------------------------------------------------------------------------
.text:0040627C                 align 10h
.text:00406280
.text:00406280 loc_406280:                             ; CODE XREF: sub_406250+1D↑j
.text:00406280                 call    _errno
.text:00406285                 cmp     dword ptr [eax], 26h ; '&'
.text:00406288
.text:00406288 loc_406288:                             ; CODE XREF: .text:00406216↑j
.text:00406288                 jnz     short loc_40626F
.text:0040628A                 mov     [esp+14Ch+Str], esi ; Str
.text:0040628D
.text:0040628D loc_40628D:                             ; CODE XREF: .text:0040621B↑j
.text:0040628D                 call    strlen
.text:00406292
.text:00406292 loc_406292:                             ; CODE XREF: .text:0040621E↑j
.text:00406292                 lea     ecx, [eax+esi]
.text:00406295                 test    eax, eax
.text:00406297                 lea     edx, [esp+14Ch+var_12C]
.text:0040629B                 mov     [esp+14Ch+var_130], ecx
.text:0040629F                 mov     ecx, 0FFD19553h
.text:004062A4                 mov     [esp+14Ch+var_28], edx
.text:004062AB                 mov     [esp+14Ch+FileHandle], ecx
.text:004062B2                 jz      loc_4068B0
.text:004062B8                 cmp     byte ptr [esi], 2Fh ; '/'
.text:004062BB                 jz      loc_406650
.text:004062C1                 mov     ebp, esi
.text:004062C3                 lea     esi, [esi+0]
.text:004062C9                 lea     edi, [edi+0]
.text:004062D0
.text:004062D0 loc_4062D0:                             ; CODE XREF: sub_406250+16B↓j
.text:004062D0                                         ; sub_406250+5B5↓j ...
.text:004062D0                 mov     [esp+14Ch+Control], offset loc_4061C0 ; Control
.text:004062D8                 mov     [esp+14Ch+Str], ebp ; Str
.text:004062DB                 call    strspn
.text:004062E0                 lea     esi, [eax+ebp]
.text:004062E3                 cmp     byte ptr [esi], 0
.text:004062E6                 jz      loc_4065C0
.text:004062EC                 mov     eax, [esp+14Ch+var_130]
.text:004062F0                 sub     eax, esi
.text:004062F2                 cmp     eax, 103h
.text:004062F7                 jle     loc_406492
.text:004062FD                 mov     [esp+14Ch+MaxCount], eax ; MaxCount
.text:00406301                 mov     ebx, eax
.text:00406303                 mov     [esp+14Ch+Control], 2Fh ; '/' ; Val
.text:0040630B                 mov     [esp+14Ch+Str], esi ; Buf
.text:0040630E                 call    memchr
.text:00406313                 test    eax, eax
.text:00406315                 jz      short loc_40631B
.text:00406317                 mov     ebx, eax
.text:00406319                 sub     ebx, esi
.text:0040631B
.text:0040631B loc_40631B:                             ; CODE XREF: sub_406250+C5↑j
.text:0040631B                 mov     [esp+14Ch+Control], offset loc_4061C0 ; Control
.text:00406323                 mov     [esp+14Ch+Str], esi ; Str
.text:00406326                 call    strcspn
.text:0040632B                 cmp     ebx, eax
.text:0040632D                 jnz     loc_406476
.text:00406333                 mov     edx, [esp+14Ch+var_28]
.text:0040633A                 lea     ecx, [esp+14Ch+var_12C]
.text:0040633E                 xor     eax, eax
.text:00406340                 lea     ebp, [ebx+esi]
.text:00406343                 lea     edi, [esp+14Ch+var_29]
.text:0040634A                 cmp     ecx, edx
.text:0040634C                 jnb     short loc_406356
.text:0040634E                 cmp     byte ptr [edx-1], 2Fh ; '/'
.text:00406352                 jz      short loc_406356
.text:00406354                 mov     al, 1
.text:00406356
.text:00406356 loc_406356:                             ; CODE XREF: sub_406250+FC↑j
.text:00406356                                         ; sub_406250+102↑j
.text:00406356                 lea     edx, [ebx+1]
.text:00406359                 mov     cl, al
.text:0040635B                 cmp     edx, 103h
.text:00406361                 ja      loc_406469
.text:00406367                 mov     edx, [esp+14Ch+var_28]
.text:0040636E                 movzx   eax, al
.text:00406371                 lea     eax, [ebx+eax+1]
.text:00406375                 sub     edi, edx
.text:00406377                 cmp     edi, eax
.text:00406379                 jnb     short loc_40638C
.text:0040637B                 lea     eax, [esp+14Ch+var_12C]
.text:0040637F                 cmp     edx, eax
.text:00406381                 jnz     short loc_4063C0
.text:00406383
.text:00406383 loc_406383:                             ; CODE XREF: sub_406250+1BC↓j
.text:00406383                 mov     edx, [esp+14Ch+var_28]
.text:0040638A                 xor     ecx, ecx
.text:0040638C
.text:0040638C loc_40638C:                             ; CODE XREF: sub_406250+129↑j
.text:0040638C                 test    cl, cl
.text:0040638E                 jz      short loc_4063A4
.text:00406390                 mov     byte ptr [edx], 2Fh ; '/'
.text:00406393                 mov     ecx, [esp+14Ch+var_28]
.text:0040639A                 inc     ecx
.text:0040639B                 mov     [esp+14Ch+var_28], ecx
.text:004063A2                 mov     edx, ecx
.text:004063A4
.text:004063A4 loc_4063A4:                             ; CODE XREF: sub_406250+13E↑j
.text:004063A4                 mov     [esp+14Ch+MaxCount], ebx
.text:004063A8                 mov     [esp+14Ch+Control], esi
.text:004063AC
.text:004063AC loc_4063AC:                             ; CODE XREF: sub_406250+480↓j
.text:004063AC                 mov     [esp+14Ch+Str], edx
.text:004063AF                 call    sub_407380
.text:004063B4                 mov     [esp+14Ch+var_28], eax
.text:004063BB                 jmp     loc_4062D0
.text:004063C0 ; ---------------------------------------------------------------------------
.text:004063C0
.text:004063C0 loc_4063C0:                             ; CODE XREF: sub_406250+131↑j
.text:004063C0                 mov     byte ptr [edx], 0
.text:004063C3                 mov     ecx, [esp+14Ch+FileHandle]
.text:004063CA                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:004063D2                 mov     [esp+14Ch+Control], eax ; char *
.text:004063D6                 mov     [esp+14Ch+Str], ecx ; int
.text:004063D9                 call    sub_406D20
.text:004063DE                 test    eax, eax
.text:004063E0                 mov     edi, eax
.text:004063E2                 js      short loc_406411
.text:004063E4
.text:004063E4 loc_4063E4:                             ; CODE XREF: sub_406250+1E4↓j
.text:004063E4                 mov     eax, [esp+14Ch+FileHandle]
.text:004063EB                 cmp     eax, 0FFD19553h
.text:004063F0                 jz      short loc_4063FA
.text:004063F2                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:004063F5                 call    _close
.text:004063FA
.text:004063FA loc_4063FA:                             ; CODE XREF: sub_406250+1A0↑j
.text:004063FA                 mov     [esp+14Ch+FileHandle], edi
.text:00406401                 lea     edx, [esp+14Ch+var_12C]
.text:00406405                 mov     [esp+14Ch+var_28], edx
.text:0040640C                 jmp     loc_406383
.text:00406411 ; ---------------------------------------------------------------------------
.text:00406411
.text:00406411 loc_406411:                             ; CODE XREF: sub_406250+192↑j
.text:00406411                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:00406419                 mov     edi, [esp+14Ch+FileHandle]
.text:00406420                 lea     eax, [esp+14Ch+var_12C]
.text:00406424                 mov     [esp+14Ch+Control], eax ; char *
.text:00406428                 mov     [esp+14Ch+Str], edi ; int
.text:0040642B                 call    sub_406D20
.text:00406430                 test    eax, eax
.text:00406432                 mov     edi, eax
.text:00406434                 jns     short loc_4063E4
.text:00406436
.text:00406436 loc_406436:                             ; CODE XREF: sub_406250+224↓j
.text:00406436                                         ; sub_406250+2A4↓j ...
.text:00406436                 call    _errno
.text:0040643B                 mov     ebx, [eax]
.text:0040643D                 mov     eax, [esp+14Ch+FileHandle]
.text:00406444                 test    eax, eax
.text:00406446                 js      short loc_406458
.text:00406448                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:0040644B                 call    _close
.text:00406450                 test    eax, eax
.text:00406452                 jnz     loc_4068CC
.text:00406458
.text:00406458 loc_406458:                             ; CODE XREF: sub_406250+1F6↑j
.text:00406458                 call    _errno
.text:0040645D                 mov     [eax], ebx
.text:0040645F                 mov     eax, 0FFFFFFFFh
.text:00406464                 jmp     loc_406271
.text:00406469 ; ---------------------------------------------------------------------------
.text:00406469
.text:00406469 loc_406469:                             ; CODE XREF: sub_406250+111↑j
.text:00406469                                         ; sub_406250+54E↓j
.text:00406469                 call    _errno
.text:0040646E                 mov     dword ptr [eax], 26h ; '&'
.text:00406474                 jmp     short loc_406436
.text:00406476 ; ---------------------------------------------------------------------------
.text:00406476
.text:00406476 loc_406476:                             ; CODE XREF: sub_406250+DD↑j
.text:00406476                 mov     [esp+14Ch+MaxCount], 105h
.text:0040647E                 mov     [esp+14Ch+Control], offset loc_4061E0
.text:00406486                 mov     [esp+14Ch+Str], offset loc_40620B
.text:0040648D
.text:0040648D loc_40648D:                             ; CODE XREF: sub_406250+5DA↓j
.text:0040648D                                         ; sub_406250+677↓j
.text:0040648D                 call    _assert
.text:00406492 ; ---------------------------------------------------------------------------
.text:00406492
.text:00406492 loc_406492:                             ; CODE XREF: sub_406250+A7↑j
.text:00406492                 mov     eax, [esp+14Ch+var_28]
.text:00406499                 lea     edx, [esp+14Ch+var_12C]
.text:0040649D                 cmp     eax, edx
.text:0040649F                 jnz     loc_406542
.text:004064A5
.text:004064A5 loc_4064A5:                             ; CODE XREF: sub_406250+33E↓j
.text:004064A5                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:004064AD                 mov     ebx, [esp+14Ch+FileHandle]
.text:004064B4                 mov     [esp+14Ch+Control], esi ; char *
.text:004064B8                 mov     [esp+14Ch+Str], ebx ; int
.text:004064BB                 call    sub_406D20
.text:004064C0                 test    eax, eax
.text:004064C2                 mov     ebx, eax
.text:004064C4                 js      short loc_40651C
.text:004064C6
.text:004064C6 loc_4064C6:                             ; CODE XREF: sub_406250+2EB↓j
.text:004064C6                 mov     eax, [esp+14Ch+FileHandle]
.text:004064CD                 cmp     eax, 0FFD19553h
.text:004064D2                 jz      short loc_4064DC
.text:004064D4                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:004064D7                 call    _close
.text:004064DC
.text:004064DC loc_4064DC:                             ; CODE XREF: sub_406250+282↑j
.text:004064DC                 mov     [esp+14Ch+FileHandle], ebx
.text:004064E3
.text:004064E3 loc_4064E3:                             ; CODE XREF: sub_406250+37D↓j
.text:004064E3                                         ; sub_406250+3CF↓j
.text:004064E3                 mov     ebp, [esp+14Ch+FileHandle]
.text:004064EA                 mov     [esp+14Ch+Str], ebp
.text:004064ED                 call    sub_406E80
.text:004064F2                 test    eax, eax
.text:004064F4                 jnz     loc_406436
.text:004064FA                 mov     eax, [esp+14Ch+FileHandle]
.text:00406501                 test    eax, eax
.text:00406503                 js      short loc_406515
.text:00406505                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:00406508                 call    _close
.text:0040650D                 test    eax, eax
.text:0040650F                 jnz     loc_4068CC
.text:00406515
.text:00406515 loc_406515:                             ; CODE XREF: sub_406250+2B3↑j
.text:00406515                 xor     eax, eax
.text:00406517                 jmp     loc_406271
.text:0040651C ; ---------------------------------------------------------------------------
.text:0040651C
.text:0040651C loc_40651C:                             ; CODE XREF: sub_406250+274↑j
.text:0040651C                 mov     [esp+14Ch+Control], esi ; char *
.text:00406520                 mov     esi, [esp+14Ch+FileHandle]
.text:00406527                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:0040652F                 mov     [esp+14Ch+Str], esi ; int
.text:00406532                 call    sub_406D20
.text:00406537                 test    eax, eax
.text:00406539                 mov     ebx, eax
.text:0040653B                 jns     short loc_4064C6
.text:0040653D                 jmp     loc_406436
.text:00406542 ; ---------------------------------------------------------------------------
.text:00406542
.text:00406542 loc_406542:                             ; CODE XREF: sub_406250+24F↑j
.text:00406542                 mov     byte ptr [eax], 0
.text:00406545                 mov     ebp, [esp+14Ch+FileHandle]
.text:0040654C                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:00406554                 mov     [esp+14Ch+Control], edx ; char *
.text:00406558                 mov     [esp+14Ch+Str], ebp ; int
.text:0040655B                 call    sub_406D20
.text:00406560                 test    eax, eax
.text:00406562                 mov     ebx, eax
.text:00406564                 js      short loc_406593
.text:00406566
.text:00406566 loc_406566:                             ; CODE XREF: sub_406250+366↓j
.text:00406566                 mov     eax, [esp+14Ch+FileHandle]
.text:0040656D                 cmp     eax, 0FFD19553h
.text:00406572                 jz      short loc_40657C
.text:00406574                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:00406577                 call    _close
.text:0040657C
.text:0040657C loc_40657C:                             ; CODE XREF: sub_406250+322↑j
.text:0040657C                 mov     [esp+14Ch+FileHandle], ebx
.text:00406583                 lea     edi, [esp+14Ch+var_12C]
.text:00406587                 mov     [esp+14Ch+var_28], edi
.text:0040658E                 jmp     loc_4064A5
.text:00406593 ; ---------------------------------------------------------------------------
.text:00406593
.text:00406593 loc_406593:                             ; CODE XREF: sub_406250+314↑j
.text:00406593                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:0040659B                 mov     ecx, [esp+14Ch+FileHandle]
.text:004065A2                 lea     eax, [esp+14Ch+var_12C]
.text:004065A6                 mov     [esp+14Ch+Control], eax ; char *
.text:004065AA                 mov     [esp+14Ch+Str], ecx ; int
.text:004065AD                 call    sub_406D20
.text:004065B2                 test    eax, eax
.text:004065B4                 mov     ebx, eax
.text:004065B6                 jns     short loc_406566
.text:004065B8                 jmp     loc_406436
.text:004065B8 ; ---------------------------------------------------------------------------
.text:004065BD                 align 10h
.text:004065C0
.text:004065C0 loc_4065C0:                             ; CODE XREF: sub_406250+96↑j
.text:004065C0                 mov     eax, [esp+14Ch+var_28]
.text:004065C7                 lea     edx, [esp+14Ch+var_12C]
.text:004065CB                 cmp     eax, edx
.text:004065CD                 jz      loc_4064E3
.text:004065D3                 mov     byte ptr [eax], 0
.text:004065D6                 mov     esi, [esp+14Ch+FileHandle]
.text:004065DD                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:004065E5                 mov     [esp+14Ch+Control], edx ; char *
.text:004065E9                 mov     [esp+14Ch+Str], esi ; int
.text:004065EC                 call    sub_406D20
.text:004065F1                 test    eax, eax
.text:004065F3                 mov     ebx, eax
.text:004065F5                 js      short loc_406624
.text:004065F7
.text:004065F7 loc_4065F7:                             ; CODE XREF: sub_406250+3F7↓j
.text:004065F7                 mov     eax, [esp+14Ch+FileHandle]
.text:004065FE                 cmp     eax, 0FFD19553h
.text:00406603                 jz      short loc_40660D
.text:00406605                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:00406608                 call    _close
.text:0040660D
.text:0040660D loc_40660D:                             ; CODE XREF: sub_406250+3B3↑j
.text:0040660D                 mov     [esp+14Ch+FileHandle], ebx
.text:00406614                 lea     edx, [esp+14Ch+var_12C]
.text:00406618                 mov     [esp+14Ch+var_28], edx
.text:0040661F                 jmp     loc_4064E3
.text:00406624 ; ---------------------------------------------------------------------------
.text:00406624
.text:00406624 loc_406624:                             ; CODE XREF: sub_406250+3A5↑j
.text:00406624                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:0040662C                 mov     edi, [esp+14Ch+FileHandle]
.text:00406633                 lea     ebx, [esp+14Ch+var_12C]
.text:00406637                 mov     [esp+14Ch+Control], ebx ; char *
.text:0040663B                 mov     [esp+14Ch+Str], edi ; int
.text:0040663E                 call    sub_406D20
.text:00406643                 test    eax, eax
.text:00406645                 mov     ebx, eax
.text:00406647                 jns     short loc_4065F7
.text:00406649                 jmp     loc_406436
.text:00406649 ; ---------------------------------------------------------------------------
.text:0040664E                 align 10h
.text:00406650
.text:00406650 loc_406650:                             ; CODE XREF: sub_406250+6B↑j
.text:00406650                 cmp     eax, 2
.text:00406653                 jbe     short loc_40665F
.text:00406655                 cmp     byte ptr [esi+1], 2Fh ; '/'
.text:00406659                 jz      loc_406750
.text:0040665F
.text:0040665F loc_40665F:                             ; CODE XREF: sub_406250+403↑j
.text:0040665F                                         ; sub_406250+504↓j
.text:0040665F                 mov     edx, [esp+14Ch+var_28]
.text:00406666                 lea     ebp, [esp+14Ch+var_12C]
.text:0040666A                 xor     eax, eax
.text:0040666C                 lea     ebx, [esp+14Ch+var_29]
.text:00406673                 cmp     ebp, edx
.text:00406675                 jnb     short loc_40667F
.text:00406677                 cmp     byte ptr [edx-1], 2Fh ; '/'
.text:0040667B                 jz      short loc_40667F
.text:0040667D                 mov     al, 1
.text:0040667F
.text:0040667F loc_40667F:                             ; CODE XREF: sub_406250+425↑j
.text:0040667F                                         ; sub_406250+42B↑j
.text:0040667F                 mov     edx, [esp+14Ch+var_28]
.text:00406686                 movzx   edi, al
.text:00406689                 mov     cl, al
.text:0040668B                 add     edi, 2
.text:0040668E                 sub     ebx, edx
.text:00406690                 cmp     ebx, edi
.text:00406692                 jnb     short loc_4066A5
.text:00406694                 lea     eax, [esp+14Ch+var_12C]
.text:00406698                 cmp     edx, eax
.text:0040669A                 jnz     short loc_4066D5
.text:0040669C
.text:0040669C loc_40669C:                             ; CODE XREF: sub_406250+4D1↓j
.text:0040669C                 mov     edx, [esp+14Ch+var_28]
.text:004066A3                 xor     ecx, ecx
.text:004066A5
.text:004066A5 loc_4066A5:                             ; CODE XREF: sub_406250+442↑j
.text:004066A5                 test    cl, cl
.text:004066A7                 jz      short loc_4066BD
.text:004066A9                 mov     byte ptr [edx], 2Fh ; '/'
.text:004066AC                 mov     ecx, [esp+14Ch+var_28]
.text:004066B3                 inc     ecx
.text:004066B4                 mov     [esp+14Ch+var_28], ecx
.text:004066BB                 mov     edx, ecx
.text:004066BD
.text:004066BD loc_4066BD:                             ; CODE XREF: sub_406250+457↑j
.text:004066BD                 mov     [esp+14Ch+MaxCount], 1
.text:004066C5                 lea     ebp, [esi+1]
.text:004066C8                 mov     [esp+14Ch+Control], offset loc_4061C0
.text:004066D0                 jmp     loc_4063AC
.text:004066D5 ; ---------------------------------------------------------------------------
.text:004066D5
.text:004066D5 loc_4066D5:                             ; CODE XREF: sub_406250+44A↑j
.text:004066D5                 mov     byte ptr [edx], 0
.text:004066D8                 mov     ebx, [esp+14Ch+FileHandle]
.text:004066DF                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:004066E7                 mov     [esp+14Ch+Control], eax ; char *
.text:004066EB                 mov     [esp+14Ch+Str], ebx ; int
.text:004066EE                 call    sub_406D20
.text:004066F3                 test    eax, eax
.text:004066F5                 mov     ebx, eax
.text:004066F7                 js      short loc_406726
.text:004066F9
.text:004066F9 loc_4066F9:                             ; CODE XREF: sub_406250+4F9↓j
.text:004066F9                 mov     eax, [esp+14Ch+FileHandle]
.text:00406700                 cmp     eax, 0FFD19553h
.text:00406705                 jz      short loc_40670F
.text:00406707                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:0040670A                 call    _close
.text:0040670F
.text:0040670F loc_40670F:                             ; CODE XREF: sub_406250+4B5↑j
.text:0040670F                 mov     [esp+14Ch+FileHandle], ebx
.text:00406716                 lea     ebp, [esp+14Ch+var_12C]
.text:0040671A                 mov     [esp+14Ch+var_28], ebp
.text:00406721                 jmp     loc_40669C
.text:00406726 ; ---------------------------------------------------------------------------
.text:00406726
.text:00406726 loc_406726:                             ; CODE XREF: sub_406250+4A7↑j
.text:00406726                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:0040672E                 mov     edx, [esp+14Ch+FileHandle]
.text:00406735                 lea     eax, [esp+14Ch+var_12C]
.text:00406739                 mov     [esp+14Ch+Control], eax ; char *
.text:0040673D                 mov     [esp+14Ch+Str], edx ; int
.text:00406740                 call    sub_406D20
.text:00406745                 test    eax, eax
.text:00406747                 mov     ebx, eax
.text:00406749                 jns     short loc_4066F9
.text:0040674B                 jmp     loc_406436
.text:00406750 ; ---------------------------------------------------------------------------
.text:00406750
.text:00406750 loc_406750:                             ; CODE XREF: sub_406250+409↑j
.text:00406750                 cmp     byte ptr [esi+2], 2Fh ; '/'
.text:00406754                 jz      loc_40665F
.text:0040675A                 mov     [esp+14Ch+Control], offset loc_4061C0 ; Control
.text:00406762                 lea     ebx, [esi+3]
.text:00406765                 mov     [esp+14Ch+Str], ebx ; Str
.text:00406768                 lea     ebx, [esp+14Ch+var_29]
.text:0040676F                 call    strcspn
.text:00406774                 mov     edx, [esp+14Ch+var_28]
.text:0040677B                 lea     ecx, [esp+14Ch+var_12C]
.text:0040677F                 lea     ebp, [eax+1]
.text:00406782                 lea     edi, [eax+3]
.text:00406785                 xor     eax, eax
.text:00406787                 cmp     ecx, edx
.text:00406789                 jnb     short loc_406793
.text:0040678B                 cmp     byte ptr [edx-1], 2Fh ; '/'
.text:0040678F                 jz      short loc_406793
.text:00406791                 mov     al, 1
.text:00406793
.text:00406793 loc_406793:                             ; CODE XREF: sub_406250+539↑j
.text:00406793                                         ; sub_406250+53F↑j
.text:00406793                 lea     edx, [edi+1]
.text:00406796                 mov     cl, al
.text:00406798                 cmp     edx, 103h
.text:0040679E                 ja      loc_406469
.text:004067A4                 mov     edx, [esp+14Ch+var_28]
.text:004067AB                 movzx   eax, al
.text:004067AE                 lea     eax, [edi+eax+1]
.text:004067B2                 sub     ebx, edx
.text:004067B4                 cmp     ebx, eax
.text:004067B6                 jnb     short loc_4067C9
.text:004067B8                 lea     eax, [esp+14Ch+var_12C]
.text:004067BC                 cmp     edx, eax
.text:004067BE                 jnz     short loc_406830
.text:004067C0
.text:004067C0 loc_4067C0:                             ; CODE XREF: sub_406250+62C↓j
.text:004067C0                 mov     edx, [esp+14Ch+var_28]
.text:004067C7                 xor     ecx, ecx
.text:004067C9
.text:004067C9 loc_4067C9:                             ; CODE XREF: sub_406250+566↑j
.text:004067C9                 test    cl, cl
.text:004067CB                 jz      short loc_4067E1
.text:004067CD                 mov     byte ptr [edx], 2Fh ; '/'
.text:004067D0                 mov     ecx, [esp+14Ch+var_28]
.text:004067D7                 inc     ecx
.text:004067D8                 mov     [esp+14Ch+var_28], ecx
.text:004067DF                 mov     edx, ecx
.text:004067E1
.text:004067E1 loc_4067E1:                             ; CODE XREF: sub_406250+57B↑j
.text:004067E1                 mov     [esp+14Ch+MaxCount], edi
.text:004067E5                 lea     edi, [ebp+esi+0]
.text:004067E9                 lea     ebp, [edi+2]
.text:004067EC                 mov     [esp+14Ch+Control], esi
.text:004067F0                 mov     [esp+14Ch+Str], edx
.text:004067F3                 call    sub_407380
.text:004067F8                 mov     [esp+14Ch+var_28], eax
.text:004067FF                 movzx   eax, byte ptr [edi+2]
.text:00406803                 cmp     al, 2Fh ; '/'
.text:00406805                 jz      loc_4062D0
.text:0040680B                 test    al, al
.text:0040680D                 jz      loc_4062D0
.text:00406813                 mov     [esp+14Ch+MaxCount], 0E1h ; 'á'
.text:0040681B                 mov     [esp+14Ch+Control], offset loc_4061E0
.text:00406823                 mov     [esp+14Ch+Str], 406227h
.text:0040682A                 jmp     loc_40648D
.text:0040682A ; ---------------------------------------------------------------------------
.text:0040682F                 align 10h
.text:00406830
.text:00406830 loc_406830:                             ; CODE XREF: sub_406250+56E↑j
.text:00406830                 mov     byte ptr [edx], 0
.text:00406833                 mov     ecx, [esp+14Ch+FileHandle]
.text:0040683A                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:00406842                 mov     [esp+14Ch+Control], eax ; char *
.text:00406846                 mov     [esp+14Ch+Str], ecx ; int
.text:00406849                 call    sub_406D20
.text:0040684E                 test    eax, eax
.text:00406850                 mov     ebx, eax
.text:00406852                 js      short loc_406881
.text:00406854
.text:00406854 loc_406854:                             ; CODE XREF: sub_406250+654↓j
.text:00406854                 mov     eax, [esp+14Ch+FileHandle]
.text:0040685B                 cmp     eax, 0FFD19553h
.text:00406860                 jz      short loc_40686A
.text:00406862                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:00406865                 call    _close
.text:0040686A
.text:0040686A loc_40686A:                             ; CODE XREF: sub_406250+610↑j
.text:0040686A                 mov     [esp+14Ch+FileHandle], ebx
.text:00406871                 lea     edx, [esp+14Ch+var_12C]
.text:00406875                 mov     [esp+14Ch+var_28], edx
.text:0040687C                 jmp     loc_4067C0
.text:00406881 ; ---------------------------------------------------------------------------
.text:00406881
.text:00406881 loc_406881:                             ; CODE XREF: sub_406250+602↑j
.text:00406881                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:00406889                 mov     ebx, [esp+14Ch+FileHandle]
.text:00406890                 lea     eax, [esp+14Ch+var_12C]
.text:00406894                 mov     [esp+14Ch+Control], eax ; char *
.text:00406898                 mov     [esp+14Ch+Str], ebx ; int
.text:0040689B                 call    sub_406D20
.text:004068A0                 test    eax, eax
.text:004068A2                 mov     ebx, eax
.text:004068A4                 jns     short loc_406854
.text:004068A6                 jmp     loc_406436
.text:004068A6 ; ---------------------------------------------------------------------------
.text:004068AB                 align 10h
.text:004068B0
.text:004068B0 loc_4068B0:                             ; CODE XREF: sub_406250+62↑j
.text:004068B0                 mov     [esp+14Ch+MaxCount], 0D0h ; 'Ð'
.text:004068B8                 mov     [esp+14Ch+Control], offset loc_4061E0
.text:004068C0                 mov     [esp+14Ch+Str], 40623Fh
.text:004068C7                 jmp     loc_40648D
.text:004068CC ; ---------------------------------------------------------------------------
.text:004068CC
.text:004068CC loc_4068CC:                             ; CODE XREF: sub_406250+202↑j
.text:004068CC                                         ; sub_406250+2BF↑j
.text:004068CC                 call    abort
.text:004068CC sub_406250      endp
.text:004068CC
.text:004068CC ; ---------------------------------------------------------------------------
.text:004068D1                 align 10h
.text:004068E0
.text:004068E0 ; =============== S U B R O U T I N E =======================================
.text:004068E0
.text:004068E0
.text:004068E0 sub_4068E0      proc near               ; CODE XREF: sub_404750+18↑p
.text:004068E0
.text:004068E0 DstBuf          = dword ptr -0Ch
.text:004068E0 SizeInBytes     = dword ptr -8
.text:004068E0 var_4           = dword ptr -4
.text:004068E0
.text:004068E0                 sub     esp, 0Ch
.text:004068E3                 mov     [esp+0Ch+var_4], ebx
.text:004068E7                 mov     [esp+0Ch+SizeInBytes], 0 ; SizeInBytes
.text:004068EF                 mov     [esp+0Ch+DstBuf], 0 ; DstBuf
.text:004068F6                 call    j__getcwd
.text:004068FB                 test    eax, eax
.text:004068FD                 mov     ebx, eax
.text:004068FF                 jz      short loc_40690B
.text:00406901
.text:00406901 loc_406901:                             ; CODE XREF: sub_4068E0+33↓j
.text:00406901                 mov     eax, ebx
.text:00406903                 mov     ebx, [esp+0Ch+var_4]
.text:00406907                 add     esp, 0Ch
.text:0040690A                 retn
.text:0040690B ; ---------------------------------------------------------------------------
.text:0040690B
.text:0040690B loc_40690B:                             ; CODE XREF: sub_4068E0+1F↑j
.text:0040690B                 call    _errno
.text:00406910                 cmp     dword ptr [eax], 0Ch
.text:00406913                 jnz     short loc_406901
.text:00406915                 call    sub_403F60
.text:00406915 sub_4068E0      endp
.text:00406915
.text:00406915 ; ---------------------------------------------------------------------------
.text:0040691A                 align 10h
.text:00406920
.text:00406920 ; =============== S U B R O U T I N E =======================================
.text:00406920
.text:00406920
.text:00406920 sub_406920      proc near               ; CODE XREF: sub_404800+E↑p
.text:00406920
.text:00406920 arg_0           = dword ptr  4
.text:00406920
.text:00406920                 mov     ecx, [esp+arg_0]
.text:00406924                 movzx   eax, byte ptr [ecx]
.text:00406927                 test    al, al
.text:00406929                 jz      short loc_406931
.text:0040692B                 cmp     byte ptr [ecx+1], 3Ah ; ':'
.text:0040692F                 jz      short loc_406977
.text:00406931
.text:00406931 loc_406931:                             ; CODE XREF: sub_406920+9↑j
.text:00406931                                         ; sub_406920+5D↓j
.text:00406931                 test    al, al
.text:00406933                 mov     edx, ecx
.text:00406935                 jz      short loc_406950
.text:00406937                 movzx   eax, byte ptr [ecx]
.text:0040693A                 lea     esi, [esi+0]
.text:00406940
.text:00406940 loc_406940:                             ; CODE XREF: sub_406920+2E↓j
.text:00406940                 cmp     al, 2Fh ; '/'
.text:00406942                 jz      short loc_406953
.text:00406944                 cmp     al, 5Ch ; '\'
.text:00406946                 jz      short loc_406953
.text:00406948
.text:00406948 loc_406948:                             ; CODE XREF: sub_406920+45↓j
.text:00406948                 inc     edx
.text:00406949                 movzx   eax, byte ptr [edx]
.text:0040694C                 test    al, al
.text:0040694E                 jnz     short loc_406940
.text:00406950
.text:00406950 loc_406950:                             ; CODE XREF: sub_406920+15↑j
.text:00406950                                         ; sub_406920+50↓j ...
.text:00406950                 mov     eax, ecx
.text:00406952                 retn
.text:00406953 ; ---------------------------------------------------------------------------
.text:00406953
.text:00406953 loc_406953:                             ; CODE XREF: sub_406920+22↑j
.text:00406953                                         ; sub_406920+26↑j ...
.text:00406953                 inc     edx
.text:00406954                 movzx   eax, byte ptr [edx]
.text:00406957                 cmp     al, 2Fh ; '/'
.text:00406959                 jz      short loc_406953
.text:0040695B                 cmp     al, 5Ch ; '\'
.text:0040695D                 jz      short loc_406953
.text:0040695F                 test    al, al
.text:00406961                 jz      short loc_406967
.text:00406963                 mov     ecx, edx
.text:00406965                 jmp     short loc_406948
.text:00406967 ; ---------------------------------------------------------------------------
.text:00406967
.text:00406967 loc_406967:                             ; CODE XREF: sub_406920+41↑j
.text:00406967                 movzx   eax, byte ptr [ecx]
.text:0040696A                 cmp     al, 2Fh ; '/'
.text:0040696C                 jz      short loc_406972
.text:0040696E                 cmp     al, 5Ch ; '\'
.text:00406970                 jnz     short loc_406950
.text:00406972
.text:00406972 loc_406972:                             ; CODE XREF: sub_406920+4C↑j
.text:00406972                 lea     ecx, [edx-1]
.text:00406975                 jmp     short loc_406950
.text:00406977 ; ---------------------------------------------------------------------------
.text:00406977
.text:00406977 loc_406977:                             ; CODE XREF: sub_406920+F↑j
.text:00406977                 add     ecx, 2
.text:0040697A                 movzx   eax, byte ptr [ecx]
.text:0040697D                 jmp     short loc_406931
.text:0040697D sub_406920      endp
.text:0040697D
.text:0040697D ; ---------------------------------------------------------------------------
.text:0040697F                 align 10h
.text:00406980
.text:00406980 ; =============== S U B R O U T I N E =======================================
.text:00406980
.text:00406980
.text:00406980 ; int __cdecl sub_406980(char *)
.text:00406980 sub_406980      proc near               ; CODE XREF: sub_404800+18↑p
.text:00406980
.text:00406980 Str             = dword ptr -0Ch
.text:00406980 arg_0           = dword ptr  4
.text:00406980
.text:00406980                 push    ebx
.text:00406981                 sub     esp, 8
.text:00406984                 mov     ebx, [esp+0Ch+arg_0]
.text:00406988                 mov     [esp+0Ch+Str], ebx ; Str
.text:0040698B                 call    strlen
.text:00406990                 cmp     eax, 1
.text:00406993                 jbe     short loc_4069B0
.text:00406995                 movzx   edx, byte ptr [eax+ebx-1]
.text:0040699A                 cmp     dl, 2Fh ; '/'
.text:0040699D                 jz      short loc_4069B5
.text:0040699F                 cmp     dl, 5Ch ; '\'
.text:004069A2                 jz      short loc_4069B5
.text:004069A4                 lea     esi, [esi+0]
.text:004069AA                 lea     edi, [edi+0]
.text:004069B0
.text:004069B0 loc_4069B0:                             ; CODE XREF: sub_406980+13↑j
.text:004069B0                                         ; sub_406980+39↓j ...
.text:004069B0                 add     esp, 8
.text:004069B3                 pop     ebx
.text:004069B4                 retn
.text:004069B5 ; ---------------------------------------------------------------------------
.text:004069B5
.text:004069B5 loc_4069B5:                             ; CODE XREF: sub_406980+1D↑j
.text:004069B5                                         ; sub_406980+22↑j ...
.text:004069B5                 dec     eax
.text:004069B6                 cmp     eax, 1
.text:004069B9                 jbe     short loc_4069B0
.text:004069BB                 movzx   edx, byte ptr [eax+ebx-1]
.text:004069C0                 cmp     dl, 2Fh ; '/'
.text:004069C3                 jz      short loc_4069B5
.text:004069C5                 cmp     dl, 5Ch ; '\'
.text:004069C8                 jz      short loc_4069B5
.text:004069CA                 jmp     short loc_4069B0
.text:004069CA sub_406980      endp
.text:004069CA
.text:004069CA ; ---------------------------------------------------------------------------
.text:004069CC                 align 10h
.text:004069D0                 sub     esp, 0Ch
.text:004069D3                 xor     edx, edx
.text:004069D5                 mov     ecx, [esp+14h]
.text:004069D9                 mov     [esp+8], ebx
.text:004069DD                 mov     eax, 0FFFFFFFFh
.text:004069E2                 mov     ebx, [esp+10h]
.text:004069E6                 div     ecx
.text:004069E8                 cmp     eax, ebx
.text:004069EA                 jb      short loc_406A09
.text:004069EC                 mov     edx, ebx
.text:004069EE                 imul    edx, ecx
.text:004069F1                 mov     [esp], edx
.text:004069F4                 call    malloc
.text:004069F9                 test    eax, eax
.text:004069FB                 jz      short loc_406A05
.text:004069FD
.text:004069FD loc_4069FD:                             ; CODE XREF: .text:00406A07↓j
.text:004069FD                 mov     ebx, [esp+8]
.text:00406A01                 add     esp, 0Ch
.text:00406A04                 retn
.text:00406A05 ; ---------------------------------------------------------------------------
.text:00406A05
.text:00406A05 loc_406A05:                             ; CODE XREF: .text:004069FB↑j
.text:00406A05                 test    ebx, ebx
.text:00406A07                 jz      short loc_4069FD
.text:00406A09
.text:00406A09 loc_406A09:                             ; CODE XREF: .text:004069EA↑j
.text:00406A09                 call    sub_403F60
.text:00406A09 ; ---------------------------------------------------------------------------
.text:00406A0E                 align 10h
.text:00406A10
.text:00406A10 ; =============== S U B R O U T I N E =======================================
.text:00406A10
.text:00406A10
.text:00406A10 ; int __cdecl sub_406A10(size_t)
.text:00406A10 sub_406A10      proc near               ; CODE XREF: .text:00405929↑p
.text:00406A10                                         ; .text:00405B06↑p ...
.text:00406A10
.text:00406A10 Size            = dword ptr -0Ch
.text:00406A10 var_4           = dword ptr -4
.text:00406A10 arg_0           = dword ptr  4
.text:00406A10
.text:00406A10                 sub     esp, 0Ch
.text:00406A13                 mov     [esp+0Ch+var_4], ebx
.text:00406A17                 mov     ebx, [esp+0Ch+arg_0]
.text:00406A1B                 mov     [esp+0Ch+Size], ebx ; Size
.text:00406A1E                 call    malloc
.text:00406A23                 test    eax, eax
.text:00406A25                 jz      short loc_406A30
.text:00406A27
.text:00406A27 loc_406A27:                             ; CODE XREF: sub_406A10+22↓j
.text:00406A27                 mov     ebx, [esp+0Ch+var_4]
.text:00406A2B                 add     esp, 0Ch
.text:00406A2E                 retn
.text:00406A2E ; ---------------------------------------------------------------------------
.text:00406A2F                 align 10h
.text:00406A30
.text:00406A30 loc_406A30:                             ; CODE XREF: sub_406A10+15↑j
.text:00406A30                 test    ebx, ebx
.text:00406A32                 jz      short loc_406A27
.text:00406A34                 call    sub_403F60
.text:00406A34 sub_406A10      endp
.text:00406A34
.text:00406A34 ; ---------------------------------------------------------------------------
.text:00406A39                 align 10h
.text:00406A40                 sub     esp, 1Ch
.text:00406A43                 xor     edx, edx
.text:00406A45                 mov     eax, 0FFFFFFFFh
.text:00406A4A                 mov     [esp+14h], ebx
.text:00406A4E                 mov     ecx, [esp+20h]
.text:00406A52                 mov     ebx, [esp+28h]
.text:00406A56                 mov     [esp+18h], esi
.text:00406A5A                 mov     esi, [esp+24h]
.text:00406A5E                 div     ebx
.text:00406A60                 cmp     eax, esi
.text:00406A62                 jb      short loc_406A94
.text:00406A64                 mov     [esp], ecx
.text:00406A67                 mov     edx, esi
.text:00406A69                 imul    edx, ebx
.text:00406A6C                 mov     [esp+4], edx
.text:00406A70                 call    realloc
.text:00406A75                 test    eax, eax
.text:00406A77                 mov     ecx, eax
.text:00406A79                 jz      short loc_406A90
.text:00406A7B
.text:00406A7B loc_406A7B:                             ; CODE XREF: .text:00406A92↓j
.text:00406A7B                 mov     ebx, [esp+14h]
.text:00406A7F                 mov     eax, ecx
.text:00406A81                 mov     esi, [esp+18h]
.text:00406A85                 add     esp, 1Ch
.text:00406A88                 retn
.text:00406A88 ; ---------------------------------------------------------------------------
.text:00406A89                 align 10h
.text:00406A90
.text:00406A90 loc_406A90:                             ; CODE XREF: .text:00406A79↑j
.text:00406A90                 test    esi, esi
.text:00406A92                 jz      short loc_406A7B
.text:00406A94
.text:00406A94 loc_406A94:                             ; CODE XREF: .text:00406A62↑j
.text:00406A94                 call    sub_403F60
.text:00406A94 ; ---------------------------------------------------------------------------
.text:00406A99                 align 10h
.text:00406AA0
.text:00406AA0 ; =============== S U B R O U T I N E =======================================
.text:00406AA0
.text:00406AA0
.text:00406AA0 ; int __cdecl sub_406AA0(void *, size_t)
.text:00406AA0 sub_406AA0      proc near               ; CODE XREF: sub_405FF0+5B↑p
.text:00406AA0
.text:00406AA0 Block           = dword ptr -0Ch
.text:00406AA0 Size            = dword ptr -8
.text:00406AA0 var_4           = dword ptr -4
.text:00406AA0 arg_0           = dword ptr  4
.text:00406AA0 arg_4           = dword ptr  8
.text:00406AA0
.text:00406AA0                 sub     esp, 0Ch
.text:00406AA3                 mov     edx, [esp+0Ch+arg_0]
.text:00406AA7                 mov     [esp+0Ch+var_4], ebx
.text:00406AAB                 mov     ebx, [esp+0Ch+arg_4]
.text:00406AAF                 mov     [esp+0Ch+Block], edx ; Block
.text:00406AB2                 mov     [esp+0Ch+Size], ebx ; Size
.text:00406AB6                 call    realloc
.text:00406ABB                 test    eax, eax
.text:00406ABD                 jz      short loc_406AC7
.text:00406ABF
.text:00406ABF loc_406ABF:                             ; CODE XREF: sub_406AA0+29↓j
.text:00406ABF                 mov     ebx, [esp+0Ch+var_4]
.text:00406AC3                 add     esp, 0Ch
.text:00406AC6                 retn
.text:00406AC7 ; ---------------------------------------------------------------------------
.text:00406AC7
.text:00406AC7 loc_406AC7:                             ; CODE XREF: sub_406AA0+1D↑j
.text:00406AC7                 test    ebx, ebx
.text:00406AC9                 jz      short loc_406ABF
.text:00406ACB                 call    sub_403F60
.text:00406ACB sub_406AA0      endp
.text:00406ACB
.text:00406AD0 ; ---------------------------------------------------------------------------
.text:00406AD0                 jmp     sub_406C20
.text:00406AD0 ; ---------------------------------------------------------------------------
.text:00406AD5                 align 10h
.text:00406AE0                 sub     esp, 0Ch
.text:00406AE3                 mov     edx, [esp+14h]
.text:00406AE7                 mov     dword ptr [esp+8], 1
.text:00406AEF                 mov     [esp+4], edx
.text:00406AF3                 mov     edx, [esp+10h]
.text:00406AF7                 mov     [esp], edx
.text:00406AFA                 call    sub_406C20
.text:00406AFF                 add     esp, 0Ch
.text:00406B02                 retn
.text:00406B02 ; ---------------------------------------------------------------------------
.text:00406B03                 align 10h
.text:00406B10                 sub     esp, 1Ch
.text:00406B13                 mov     [esp+18h], ebx
.text:00406B17                 mov     ebx, [esp+20h]
.text:00406B1B                 mov     [esp], ebx
.text:00406B1E                 call    malloc
.text:00406B23                 test    eax, eax
.text:00406B25                 jz      short loc_406B43
.text:00406B27
.text:00406B27 loc_406B27:                             ; CODE XREF: .text:00406B45↓j
.text:00406B27                 mov     [esp+8], ebx
.text:00406B2B                 mov     dword ptr [esp+4], 0
.text:00406B33                 mov     [esp], eax
.text:00406B36                 call    memset
.text:00406B3B                 mov     ebx, [esp+18h]
.text:00406B3F                 add     esp, 1Ch
.text:00406B42                 retn
.text:00406B43 ; ---------------------------------------------------------------------------
.text:00406B43
.text:00406B43 loc_406B43:                             ; CODE XREF: .text:00406B25↑j
.text:00406B43                 test    ebx, ebx
.text:00406B45                 jz      short loc_406B27
.text:00406B47                 call    sub_403F60
.text:00406B47 ; ---------------------------------------------------------------------------
.text:00406B4C                 align 10h
.text:00406B50                 sub     esp, 0Ch
.text:00406B53                 xor     edx, edx
.text:00406B55                 mov     ecx, [esp+14h]
.text:00406B59                 mov     [esp+8], ebx
.text:00406B5D                 mov     eax, 0FFFFFFFFh
.text:00406B62                 mov     ebx, [esp+10h]
.text:00406B66                 div     ecx
.text:00406B68                 cmp     eax, ebx
.text:00406B6A                 jb      short loc_406B88
.text:00406B6C                 mov     [esp+4], ecx
.text:00406B70                 mov     [esp], ebx
.text:00406B73                 call    calloc
.text:00406B78                 test    eax, eax
.text:00406B7A                 jz      short loc_406B84
.text:00406B7C
.text:00406B7C loc_406B7C:                             ; CODE XREF: .text:00406B86↓j
.text:00406B7C                 mov     ebx, [esp+8]
.text:00406B80                 add     esp, 0Ch
.text:00406B83                 retn
.text:00406B84 ; ---------------------------------------------------------------------------
.text:00406B84
.text:00406B84 loc_406B84:                             ; CODE XREF: .text:00406B7A↑j
.text:00406B84                 test    ebx, ebx
.text:00406B86                 jz      short loc_406B7C
.text:00406B88
.text:00406B88 loc_406B88:                             ; CODE XREF: .text:00406B6A↑j
.text:00406B88                 call    sub_403F60
.text:00406B88 ; ---------------------------------------------------------------------------
.text:00406B8D                 align 10h
.text:00406B90                 sub     esp, 1Ch
.text:00406B93                 mov     [esp+18h], ebx
.text:00406B97                 mov     ebx, [esp+24h]
.text:00406B9B                 mov     [esp], ebx
.text:00406B9E                 call    malloc
.text:00406BA3                 test    eax, eax
.text:00406BA5                 mov     edx, eax
.text:00406BA7                 jz      short loc_406BC5
.text:00406BA9
.text:00406BA9 loc_406BA9:                             ; CODE XREF: .text:00406BC7↓j
.text:00406BA9                 mov     [esp+8], ebx
.text:00406BAD                 mov     ecx, [esp+20h]
.text:00406BB1                 mov     [esp], edx
.text:00406BB4                 mov     [esp+4], ecx
.text:00406BB8                 call    memcpy
.text:00406BBD                 mov     ebx, [esp+18h]
.text:00406BC1                 add     esp, 1Ch
.text:00406BC4                 retn
.text:00406BC5 ; ---------------------------------------------------------------------------
.text:00406BC5
.text:00406BC5 loc_406BC5:                             ; CODE XREF: .text:00406BA7↑j
.text:00406BC5                 test    ebx, ebx
.text:00406BC7                 jz      short loc_406BA9
.text:00406BC9                 call    sub_403F60
.text:00406BC9 ; ---------------------------------------------------------------------------
.text:00406BCE                 align 10h
.text:00406BD0                 sub     esp, 1Ch
.text:00406BD3                 mov     [esp+18h], esi
.text:00406BD7                 mov     esi, [esp+20h]
.text:00406BDB                 mov     [esp+14h], ebx
.text:00406BDF                 mov     [esp], esi
.text:00406BE2                 call    strlen
.text:00406BE7                 lea     ebx, [eax+1]
.text:00406BEA                 mov     [esp], ebx
.text:00406BED                 call    malloc
.text:00406BF2                 test    eax, eax
.text:00406BF4                 jz      short loc_406C12
.text:00406BF6
.text:00406BF6 loc_406BF6:                             ; CODE XREF: .text:00406C14↓j
.text:00406BF6                 mov     [esp+8], ebx
.text:00406BFA                 mov     [esp+4], esi
.text:00406BFE                 mov     [esp], eax
.text:00406C01                 call    memcpy
.text:00406C06                 mov     ebx, [esp+14h]
.text:00406C0A                 mov     esi, [esp+18h]
.text:00406C0E                 add     esp, 1Ch
.text:00406C11                 retn
.text:00406C12 ; ---------------------------------------------------------------------------
.text:00406C12
.text:00406C12 loc_406C12:                             ; CODE XREF: .text:00406BF4↑j
.text:00406C12                 test    ebx, ebx
.text:00406C14                 jz      short loc_406BF6
.text:00406C16                 call    sub_403F60
.text:00406C16 ; ---------------------------------------------------------------------------
.text:00406C1B                 align 10h
.text:00406C20
.text:00406C20 ; =============== S U B R O U T I N E =======================================
.text:00406C20
.text:00406C20
.text:00406C20 ; int __cdecl sub_406C20(void *, int, int)
.text:00406C20 sub_406C20      proc near               ; CODE XREF: .text:00406AD0↑j
.text:00406C20                                         ; .text:00406AFA↑p
.text:00406C20
.text:00406C20 Block           = dword ptr -1Ch
.text:00406C20 Size            = dword ptr -18h
.text:00406C20 var_C           = dword ptr -0Ch
.text:00406C20 var_8           = dword ptr -8
.text:00406C20 var_4           = dword ptr -4
.text:00406C20 arg_0           = dword ptr  4
.text:00406C20 arg_4           = dword ptr  8
.text:00406C20 arg_8           = dword ptr  0Ch
.text:00406C20
.text:00406C20                 sub     esp, 1Ch
.text:00406C23                 mov     [esp+1Ch+var_8], esi
.text:00406C27                 mov     esi, [esp+1Ch+arg_0]
.text:00406C2B                 mov     [esp+1Ch+var_4], edi
.text:00406C2F                 mov     edi, [esp+1Ch+arg_4]
.text:00406C33                 test    esi, esi
.text:00406C35                 mov     [esp+1Ch+var_C], ebx
.text:00406C39                 mov     ecx, [edi]
.text:00406C3B                 mov     ebx, [esp+1Ch+arg_8]
.text:00406C3F                 jz      short loc_406C80
.text:00406C41                 xor     edx, edx
.text:00406C43                 mov     eax, 7FFFFFFFh
.text:00406C48                 div     ebx
.text:00406C4A                 cmp     eax, ecx
.text:00406C4C                 jb      short loc_406C79
.text:00406C4E                 add     ecx, ecx
.text:00406C50
.text:00406C50 loc_406C50:                             ; CODE XREF: sub_406C20+62↓j
.text:00406C50                                         ; sub_406C20+71↓j ...
.text:00406C50                 mov     [edi], ecx
.text:00406C52                 imul    ebx, ecx
.text:00406C55                 mov     [esp+1Ch+Block], esi ; Block
.text:00406C58                 mov     [esp+1Ch+Size], ebx ; Size
.text:00406C5C                 call    realloc
.text:00406C61                 test    eax, eax
.text:00406C63                 jz      short loc_406C75
.text:00406C65
.text:00406C65 loc_406C65:                             ; CODE XREF: sub_406C20+57↓j
.text:00406C65                 mov     ebx, [esp+1Ch+var_C]
.text:00406C69                 mov     esi, [esp+1Ch+var_8]
.text:00406C6D                 mov     edi, [esp+1Ch+var_4]
.text:00406C71                 add     esp, 1Ch
.text:00406C74                 retn
.text:00406C75 ; ---------------------------------------------------------------------------
.text:00406C75
.text:00406C75 loc_406C75:                             ; CODE XREF: sub_406C20+43↑j
.text:00406C75                 test    ebx, ebx
.text:00406C77                 jz      short loc_406C65
.text:00406C79
.text:00406C79 loc_406C79:                             ; CODE XREF: sub_406C20+2C↑j
.text:00406C79                 call    sub_403F60
.text:00406C79 ; ---------------------------------------------------------------------------
.text:00406C7E                 align 10h
.text:00406C80
.text:00406C80 loc_406C80:                             ; CODE XREF: sub_406C20+1F↑j
.text:00406C80                 test    ecx, ecx
.text:00406C82                 jnz     short loc_406C50
.text:00406C84                 xor     edx, edx
.text:00406C86                 mov     eax, 40h ; '@'
.text:00406C8B                 div     ebx
.text:00406C8D                 test    eax, eax
.text:00406C8F                 mov     ecx, eax
.text:00406C91                 jnz     short loc_406C50
.text:00406C93                 mov     ecx, 1
.text:00406C98                 jmp     short loc_406C50
.text:00406C98 sub_406C20      endp
.text:00406C98
.text:00406C98 ; ---------------------------------------------------------------------------
.text:00406C9A                 align 10h
.text:00406CA0 aOpenatUnableTo db 'openat: unable to restore working directory',0
.text:00406CA0                                         ; DATA XREF: sub_406D20:loc_406DD8↓o
.text:00406CCC                 align 20h
.text:00406CE0 aOpenatUnableTo_0 db 'openat: unable to record current working directory',0
.text:00406CE0                                         ; DATA XREF: sub_406D20:loc_406E27↓o
.text:00406D13                 align 10h
.text:00406D20
.text:00406D20 ; =============== S U B R O U T I N E =======================================
.text:00406D20
.text:00406D20
.text:00406D20 ; int __cdecl sub_406D20(int, char *, int)
.text:00406D20 sub_406D20      proc near               ; CODE XREF: sub_406250+189↑p
.text:00406D20                                         ; sub_406250+1DB↑p ...
.text:00406D20
.text:00406D20 FileName        = dword ptr -2Ch
.text:00406D20 OpenFlag        = dword ptr -28h
.text:00406D20 var_24          = dword ptr -24h
.text:00406D20 Block           = byte ptr -1Ch
.text:00406D20 var_10          = dword ptr -10h
.text:00406D20 var_C           = dword ptr -0Ch
.text:00406D20 var_8           = dword ptr -8
.text:00406D20 var_4           = dword ptr -4
.text:00406D20 arg_0           = dword ptr  4
.text:00406D20 arg_4           = dword ptr  8
.text:00406D20 arg_8           = dword ptr  0Ch
.text:00406D20
.text:00406D20                 sub     esp, 2Ch
.text:00406D23                 mov     [esp+2Ch+var_C], esi
.text:00406D27                 mov     esi, [esp+2Ch+arg_8]
.text:00406D2B                 mov     [esp+2Ch+var_4], ebp
.text:00406D2F                 mov     ebp, [esp+2Ch+arg_0]
.text:00406D33                 test    esi, 100h
.text:00406D39                 mov     [esp+2Ch+var_8], edi
.text:00406D3D                 mov     edi, [esp+2Ch+arg_4]
.text:00406D41                 mov     [esp+2Ch+var_10], ebx
.text:00406D45                 jz      short loc_406D49
.text:00406D47                 int     5               ;  - PRINT-SCREEN KEY
.text:00406D47                                         ; automatically called by keyboard scanner when print-screen key is pressed
.text:00406D49
.text:00406D49 loc_406D49:                             ; CODE XREF: sub_406D20+25↑j
.text:00406D49                 cmp     ebp, 0FFD19553h
.text:00406D4F                 jz      loc_406E58
.text:00406D55                 cmp     byte ptr [edi], 2Fh ; '/'
.text:00406D58                 jz      loc_406E58
.text:00406D5E                 lea     edx, [esp+2Ch+Block]
.text:00406D62                 mov     [esp+2Ch+FileName], edx
.text:00406D65                 call    sub_404750
.text:00406D6A                 test    eax, eax
.text:00406D6C                 jnz     loc_406E27
.text:00406D72
.text:00406D72 loc_406D72:                             ; CODE XREF: sub_406D20+133↓j
.text:00406D72                 mov     [esp+2Ch+FileName], ebp
.text:00406D75                 call    sub_406E80
.text:00406D7A                 test    eax, eax
.text:00406D7C                 jnz     loc_406E06
.text:00406D82                 mov     [esp+2Ch+OpenFlag], esi ; OpenFlag
.text:00406D86                 lea     ebp, [esp+2Ch+Block]
.text:00406D8A                 mov     [esp+2Ch+FileName], edi ; FileName
.text:00406D8D                 mov     [esp+2Ch+var_24], 0
.text:00406D95                 call    _open
.text:00406D9A                 mov     edi, eax
.text:00406D9C                 call    _errno
.text:00406DA1                 mov     esi, [eax]
.text:00406DA3                 mov     [esp+2Ch+FileName], ebp
.text:00406DA6                 call    sub_404790
.text:00406DAB                 test    eax, eax
.text:00406DAD                 jnz     short loc_406DD8
.text:00406DAF
.text:00406DAF loc_406DAF:                             ; CODE XREF: sub_406D20+E4↓j
.text:00406DAF                 lea     ebx, [esp+2Ch+Block]
.text:00406DB3                 mov     [esp+2Ch+FileName], ebx ; Block
.text:00406DB6                 call    sub_4047C0
.text:00406DBB                 call    _errno
.text:00406DC0                 mov     [eax], esi
.text:00406DC2                 mov     eax, edi
.text:00406DC4
.text:00406DC4 loc_406DC4:                             ; CODE XREF: sub_406D20+105↓j
.text:00406DC4                                         ; sub_406D20+14C↓j
.text:00406DC4                 mov     ebx, [esp+2Ch+var_10]
.text:00406DC8                 mov     esi, [esp+2Ch+var_C]
.text:00406DCC                 mov     edi, [esp+2Ch+var_8]
.text:00406DD0                 mov     ebp, [esp+2Ch+var_4]
.text:00406DD4                 add     esp, 2Ch
.text:00406DD7                 retn
.text:00406DD8 ; ---------------------------------------------------------------------------
.text:00406DD8
.text:00406DD8 loc_406DD8:                             ; CODE XREF: sub_406D20+8D↑j
.text:00406DD8                 mov     [esp+2Ch+FileName], offset aOpenatUnableTo ; "openat: unable to restore working direc"...
.text:00406DDF                 call    ds:libintl_gettext
.text:00406DE5                 mov     ebp, eax
.text:00406DE7                 call    _errno
.text:00406DEC                 mov     [esp+2Ch+var_24], ebp ; char *
.text:00406DF0                 mov     edx, Code
.text:00406DF6                 mov     ecx, [eax]
.text:00406DF8                 mov     [esp+2Ch+FileName], edx ; Code
.text:00406DFB                 mov     [esp+2Ch+OpenFlag], ecx ; ErrorMessage
.text:00406DFF                 call    sub_406EF0
.text:00406E04                 jmp     short loc_406DAF
.text:00406E06 ; ---------------------------------------------------------------------------
.text:00406E06
.text:00406E06 loc_406E06:                             ; CODE XREF: sub_406D20+5C↑j
.text:00406E06                 call    _errno
.text:00406E0B                 mov     ebx, [eax]
.text:00406E0D                 lea     esi, [esp+2Ch+Block]
.text:00406E11                 mov     [esp+2Ch+FileName], esi ; Block
.text:00406E14                 call    sub_4047C0
.text:00406E19                 call    _errno
.text:00406E1E                 mov     [eax], ebx
.text:00406E20                 mov     eax, 0FFFFFFFFh
.text:00406E25                 jmp     short loc_406DC4
.text:00406E27 ; ---------------------------------------------------------------------------
.text:00406E27
.text:00406E27 loc_406E27:                             ; CODE XREF: sub_406D20+4C↑j
.text:00406E27                 mov     [esp+2Ch+FileName], offset aOpenatUnableTo_0 ; "openat: unable to record current workin"...
.text:00406E2E                 call    ds:libintl_gettext
.text:00406E34                 mov     ebx, eax
.text:00406E36                 call    _errno
.text:00406E3B                 mov     [esp+2Ch+var_24], ebx ; char *
.text:00406E3F                 mov     edx, Code
.text:00406E45                 mov     ecx, [eax]
.text:00406E47                 mov     [esp+2Ch+FileName], edx ; Code
.text:00406E4A                 mov     [esp+2Ch+OpenFlag], ecx ; ErrorMessage
.text:00406E4E                 call    sub_406EF0
.text:00406E53                 jmp     loc_406D72
.text:00406E58 ; ---------------------------------------------------------------------------
.text:00406E58
.text:00406E58 loc_406E58:                             ; CODE XREF: sub_406D20+2F↑j
.text:00406E58                                         ; sub_406D20+38↑j
.text:00406E58                 mov     [esp+2Ch+var_24], 0
.text:00406E60                 mov     [esp+2Ch+OpenFlag], esi ; OpenFlag
.text:00406E64                 mov     [esp+2Ch+FileName], edi ; FileName
.text:00406E67                 call    _open
.text:00406E6C                 jmp     loc_406DC4
.text:00406E6C sub_406D20      endp
.text:00406E6C
.text:00406E6C ; ---------------------------------------------------------------------------
.text:00406E71                 align 10h
.text:00406E80
.text:00406E80 ; =============== S U B R O U T I N E =======================================
.text:00406E80
.text:00406E80
.text:00406E80 sub_406E80      proc near               ; CODE XREF: sub_406250+29D↑p
.text:00406E80                                         ; sub_406D20+55↑p
.text:00406E80                 sub     esp, 0Ch
.text:00406E83                 call    _errno
.text:00406E88                 mov     dword ptr [eax], 28h ; '('
.text:00406E8E                 mov     eax, 0FFFFFFFFh
.text:00406E93                 add     esp, 0Ch
.text:00406E96                 retn
.text:00406E96 sub_406E80      endp
.text:00406E96
.text:00406E96 ; ---------------------------------------------------------------------------
.text:00406E97                 align 10h
.text:00406EA0                 jmp     ds:libintl_bindtextdomain
.text:00406EA0 ; ---------------------------------------------------------------------------
.text:00406EA6                 align 10h
.text:00406EB0                 jmp     ds:libintl_textdomain
.text:00406EB0 ; ---------------------------------------------------------------------------
.text:00406EB6                 align 10h
.text:00406EC0                 jmp     ds:libintl_gettext
.text:00406EC0 ; ---------------------------------------------------------------------------
.text:00406EC6                 align 10h
.text:00406ED0 ; const char aS_0[]
.text:00406ED0 aS_0            db ': %s',0             ; DATA XREF: sub_406EF0+B8↓o
.text:00406ED0                                         ; sub_406FF4+122↓o
.text:00406ED5 aUnknownSystemE db 'Unknown system error',0
.text:00406ED5                                         ; DATA XREF: sub_406EF0:loc_406FBD↓o
.text:00406ED5                                         ; sub_406FF4:loc_40712E↓o
.text:00406EEA ; const char aS_1[]
.text:00406EEA aS_1            db '%s: ',0             ; DATA XREF: sub_406EF0:loc_406FC4↓o
.text:00406EEF                 align 10h
.text:00406EF0
.text:00406EF0 ; =============== S U B R O U T I N E =======================================
.text:00406EF0
.text:00406EF0
.text:00406EF0 ; int __cdecl sub_406EF0(int Code, int ErrorMessage, char *, char)
.text:00406EF0 sub_406EF0      proc near               ; CODE XREF: sub_4016F0+3FA↑p
.text:00406EF0                                         ; sub_4016F0+468↑p ...
.text:00406EF0
.text:00406EF0 Stream          = dword ptr -1Ch
.text:00406EF0 Format          = dword ptr -18h
.text:00406EF0 ArgList         = dword ptr -14h
.text:00406EF0 Code            = dword ptr  4
.text:00406EF0 ErrorMessage    = dword ptr  8
.text:00406EF0 arg_8           = dword ptr  0Ch
.text:00406EF0 arg_C           = byte ptr  10h
.text:00406EF0
.text:00406EF0                 push    esi
.text:00406EF1                 push    ebx
.text:00406EF2                 sub     esp, 14h
.text:00406EF5                 mov     edx, ds:_iob
.text:00406EFB                 mov     esi, [esp+1Ch+Code]
.text:00406EFF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00406F03                 add     edx, 20h ; ' '
.text:00406F06                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00406F09                 call    fflush
.text:00406F0E                 mov     eax, ds:dword_4114F0
.text:00406F13                 test    eax, eax
.text:00406F15                 jz      loc_406FC4
.text:00406F1B                 call    eax ; dword_4114F0
.text:00406F1D
.text:00406F1D loc_406F1D:                             ; CODE XREF: sub_406EF0+F7↓j
.text:00406F1D                 lea     edx, [esp+1Ch+arg_C]
.text:00406F21                 mov     ecx, [esp+1Ch+arg_8]
.text:00406F25                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00406F29                 mov     edx, ds:_iob
.text:00406F2F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00406F33                 add     edx, 40h ; '@'
.text:00406F36                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00406F39                 call    vfprintf
.text:00406F3E                 inc     ds:dword_411500
.text:00406F44                 test    ebx, ebx
.text:00406F46                 jnz     short loc_406F92
.text:00406F48
.text:00406F48 loc_406F48:                             ; CODE XREF: sub_406EF0+CB↓j
.text:00406F48                 mov     edx, ds:_iob
.text:00406F4E                 lea     ecx, [edx+40h]
.text:00406F51                 mov     ebx, [ecx+4]
.text:00406F54                 dec     ebx
.text:00406F55                 test    ebx, ebx
.text:00406F57                 mov     [ecx+4], ebx
.text:00406F5A                 js      short loc_406F80
.text:00406F5C                 mov     ecx, [edx+40h]
.text:00406F5F                 mov     byte ptr [ecx], 0Ah
.text:00406F62                 inc     dword ptr [edx+40h]
.text:00406F65
.text:00406F65 loc_406F65:                             ; CODE XREF: sub_406EF0+A0↓j
.text:00406F65                 mov     edx, ds:_iob
.text:00406F6B                 add     edx, 40h ; '@'
.text:00406F6E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00406F71                 call    fflush
.text:00406F76                 test    esi, esi
.text:00406F78                 jnz     short loc_406FEC
.text:00406F7A                 add     esp, 14h
.text:00406F7D                 pop     ebx
.text:00406F7E                 pop     esi
.text:00406F7F                 retn
.text:00406F80 ; ---------------------------------------------------------------------------
.text:00406F80
.text:00406F80 loc_406F80:                             ; CODE XREF: sub_406EF0+6A↑j
.text:00406F80                 mov     [esp+1Ch+Format], ecx ; File
.text:00406F84                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00406F8B                 call    _flsbuf
.text:00406F90                 jmp     short loc_406F65
.text:00406F92 ; ---------------------------------------------------------------------------
.text:00406F92
.text:00406F92 loc_406F92:                             ; CODE XREF: sub_406EF0+56↑j
.text:00406F92                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00406F95                 call    strerror
.text:00406F9A                 test    eax, eax
.text:00406F9C                 jz      short loc_406FBD
.text:00406F9E
.text:00406F9E loc_406F9E:                             ; CODE XREF: sub_406EF0+D2↓j
.text:00406F9E                 mov     [esp+1Ch+ArgList], eax
.text:00406FA2                 mov     ebx, ds:_iob
.text:00406FA8                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00406FB0                 add     ebx, 40h ; '@'
.text:00406FB3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00406FB6                 call    fprintf
.text:00406FBB                 jmp     short loc_406F48
.text:00406FBD ; ---------------------------------------------------------------------------
.text:00406FBD
.text:00406FBD loc_406FBD:                             ; CODE XREF: sub_406EF0+AC↑j
.text:00406FBD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00406FC2                 jmp     short loc_406F9E
.text:00406FC4 ; ---------------------------------------------------------------------------
.text:00406FC4
.text:00406FC4 loc_406FC4:                             ; CODE XREF: sub_406EF0+25↑j
.text:00406FC4                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:00406FCC                 mov     edx, ds:_iob
.text:00406FD2                 mov     ecx, ds:dword_4114C0
.text:00406FD8                 add     edx, 40h ; '@'
.text:00406FDB                 mov     [esp+1Ch+ArgList], ecx
.text:00406FDF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00406FE2                 call    fprintf
.text:00406FE7                 jmp     loc_406F1D
.text:00406FEC ; ---------------------------------------------------------------------------
.text:00406FEC
.text:00406FEC loc_406FEC:                             ; CODE XREF: sub_406EF0+88↑j
.text:00406FEC                 mov     [esp+1Ch+Stream], esi ; Code
.text:00406FEF                 call    exit
.text:00406FEF sub_406EF0      endp
.text:00406FEF
.text:00406FF4
.text:00406FF4 ; =============== S U B R O U T I N E =======================================
.text:00406FF4
.text:00406FF4
.text:00406FF4 ; int __cdecl sub_406FF4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00406FF4 sub_406FF4      proc near               ; DATA XREF: sub_406FF4+77↓o
.text:00406FF4
.text:00406FF4 Stream          = dword ptr -28h
.text:00406FF4 Format          = dword ptr -24h
.text:00406FF4 ArgList         = dword ptr -20h
.text:00406FF4 var_1C          = dword ptr -1Ch
.text:00406FF4 Code            = dword ptr  8
.text:00406FF4 ErrorMessage    = dword ptr  0Ch
.text:00406FF4 Str2            = dword ptr  10h
.text:00406FF4 arg_10          = dword ptr  14h
.text:00406FF4 arg_14          = dword ptr  18h
.text:00406FF4 arg_18          = byte ptr  1Ch
.text:00406FF4
.text:00406FF4                 and     eax, 64253A73h
.text:00406FF9                 cmp     ah, [eax]
.text:00406FFB
.text:00406FFB loc_406FFB:                             ; DATA XREF: sub_406FF4:loc_407135↓o
.text:00406FFB                 add     ds:55003A73h, ah
.text:00407001                 push    edi
.text:00407002                 push    esi
.text:00407003                 push    ebx
.text:00407004                 sub     esp, 1Ch
.text:00407007                 mov     edx, ds:dword_411530
.text:0040700D                 mov     ebp, [esp+28h+Code]
.text:00407011                 mov     edi, [esp+28h+ErrorMessage]
.text:00407015                 test    edx, edx
.text:00407017                 mov     ebx, [esp+28h+Str2]
.text:0040701B                 mov     esi, [esp+28h+arg_10]
.text:0040701F                 jz      short loc_407039
.text:00407021                 cmp     ds:dword_411190, esi
.text:00407027                 jz      loc_407160
.text:0040702D
.text:0040702D loc_40702D:                             ; CODE XREF: sub_406FF4+18D↓j
.text:0040702D                 mov     ds:Str1, ebx
.text:00407033                 mov     ds:dword_411190, esi
.text:00407039
.text:00407039 loc_407039:                             ; CODE XREF: sub_406FF4+2B↑j
.text:00407039                 mov     edx, ds:_iob
.text:0040703F                 add     edx, 20h ; ' '
.text:00407042                 mov     [esp+28h+Stream], edx ; Stream
.text:00407045                 call    fflush
.text:0040704A                 mov     eax, ds:dword_4114F0
.text:0040704F                 test    eax, eax
.text:00407051                 jz      loc_407135
.text:00407057                 call    eax ; dword_4114F0
.text:00407059
.text:00407059 loc_407059:                             ; CODE XREF: sub_406FF4+164↓j
.text:00407059                 test    ebx, ebx
.text:0040705B                 jz      short loc_40707E
.text:0040705D                 mov     [esp+28h+ArgList], ebx
.text:00407061                 mov     ebx, ds:_iob
.text:00407067                 mov     [esp+28h+var_1C], esi
.text:0040706B                 mov     [esp+28h+Format], offset sub_406FF4 ; Format
.text:00407073                 add     ebx, 40h ; '@'
.text:00407076                 mov     [esp+28h+Stream], ebx ; Stream
.text:00407079                 call    fprintf
.text:0040707E
.text:0040707E loc_40707E:                             ; CODE XREF: sub_406FF4+67↑j
.text:0040707E                 mov     esi, ds:_iob
.text:00407084                 lea     edx, [esp+28h+arg_18]
.text:00407088                 mov     ecx, [esp+28h+arg_14]
.text:0040708C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00407090                 add     esi, 40h ; '@'
.text:00407093                 mov     [esp+28h+Format], ecx ; Format
.text:00407097                 mov     [esp+28h+Stream], esi ; Stream
.text:0040709A                 call    vfprintf
.text:0040709F                 inc     ds:dword_411500
.text:004070A5                 test    edi, edi
.text:004070A7                 jnz     short loc_407100
.text:004070A9
.text:004070A9 loc_4070A9:                             ; CODE XREF: sub_406FF4+135↓j
.text:004070A9                 mov     edx, ds:_iob
.text:004070AF                 lea     ecx, [edx+40h]
.text:004070B2                 mov     ebx, [ecx+4]
.text:004070B5                 dec     ebx
.text:004070B6                 test    ebx, ebx
.text:004070B8                 mov     [ecx+4], ebx
.text:004070BB                 js      short loc_4070E7
.text:004070BD                 mov     esi, [edx+40h]
.text:004070C0                 mov     byte ptr [esi], 0Ah
.text:004070C3                 inc     dword ptr [edx+40h]
.text:004070C6
.text:004070C6 loc_4070C6:                             ; CODE XREF: sub_406FF4+103↓j
.text:004070C6                 mov     ecx, ds:_iob
.text:004070CC                 add     ecx, 40h ; '@'
.text:004070CF                 mov     [esp+28h+Stream], ecx ; Stream
.text:004070D2                 call    fflush
.text:004070D7                 test    ebp, ebp
.text:004070D9                 jnz     loc_407186
.text:004070DF
.text:004070DF loc_4070DF:                             ; CODE XREF: sub_406FF4+173↓j
.text:004070DF                                         ; sub_406FF4+187↓j
.text:004070DF                 add     esp, 1Ch
.text:004070E2                 pop     ebx
.text:004070E3                 pop     esi
.text:004070E4                 pop     edi
.text:004070E5                 pop     ebp
.text:004070E6                 retn
.text:004070E7 ; ---------------------------------------------------------------------------
.text:004070E7
.text:004070E7 loc_4070E7:                             ; CODE XREF: sub_406FF4+C7↑j
.text:004070E7                 mov     [esp+28h+Format], ecx ; File
.text:004070EB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:004070F2                 call    _flsbuf
.text:004070F7                 jmp     short loc_4070C6
.text:004070F7 ; ---------------------------------------------------------------------------
.text:004070F9                 align 10h
.text:00407100
.text:00407100 loc_407100:                             ; CODE XREF: sub_406FF4+B3↑j
.text:00407100                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00407103                 call    strerror
.text:00407108                 test    eax, eax
.text:0040710A                 jz      short loc_40712E
.text:0040710C
.text:0040710C loc_40710C:                             ; CODE XREF: sub_406FF4+13F↓j
.text:0040710C                 mov     [esp+28h+ArgList], eax
.text:00407110                 mov     edi, ds:_iob
.text:00407116                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:0040711E                 add     edi, 40h ; '@'
.text:00407121                 mov     [esp+28h+Stream], edi ; Stream
.text:00407124                 call    fprintf
.text:00407129                 jmp     loc_4070A9
.text:0040712E ; ---------------------------------------------------------------------------
.text:0040712E
.text:0040712E loc_40712E:                             ; CODE XREF: sub_406FF4+116↑j
.text:0040712E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00407133                 jmp     short loc_40710C
.text:00407135 ; ---------------------------------------------------------------------------
.text:00407135
.text:00407135 loc_407135:                             ; CODE XREF: sub_406FF4+5D↑j
.text:00407135                 mov     [esp+28h+Format], (offset loc_406FFB+1) ; Format
.text:0040713D                 mov     ecx, ds:_iob
.text:00407143                 mov     edx, ds:dword_4114C0
.text:00407149                 add     ecx, 40h ; '@'
.text:0040714C                 mov     [esp+28h+ArgList], edx
.text:00407150                 mov     [esp+28h+Stream], ecx ; Stream
.text:00407153                 call    fprintf
.text:00407158                 jmp     loc_407059
.text:00407158 ; ---------------------------------------------------------------------------
.text:0040715D                 align 10h
.text:00407160
.text:00407160 loc_407160:                             ; CODE XREF: sub_406FF4+33↑j
.text:00407160                 mov     eax, ds:Str1
.text:00407165                 cmp     ebx, eax
.text:00407167                 jz      loc_4070DF
.text:0040716D                 mov     [esp+28h+Format], ebx ; Str2
.text:00407171                 mov     [esp+28h+Stream], eax ; Str1
.text:00407174                 call    strcmp
.text:00407179                 test    eax, eax
.text:0040717B                 jz      loc_4070DF
.text:00407181                 jmp     loc_40702D
.text:00407186 ; ---------------------------------------------------------------------------
.text:00407186
.text:00407186 loc_407186:                             ; CODE XREF: sub_406FF4+E5↑j
.text:00407186                 mov     [esp+28h+Stream], ebp ; Code
.text:00407189                 call    exit
.text:00407189 sub_406FF4      endp ; sp-analysis failed
.text:00407189
.text:00407189 ; ---------------------------------------------------------------------------
.text:0040718E                 align 10h
.text:00407190
.text:00407190 ; =============== S U B R O U T I N E =======================================
.text:00407190
.text:00407190
.text:00407190 ; int __cdecl sub_407190(LPCSTR, int AccessMode)
.text:00407190 sub_407190      proc near               ; CODE XREF: sub_401E50+27B↑p
.text:00407190                                         ; sub_401E50+5C5↑p ...
.text:00407190
.text:00407190 lpPathName      = dword ptr -1Ch
.text:00407190 lpSecurityAttributes= dword ptr -18h
.text:00407190 var_8           = dword ptr -8
.text:00407190 var_4           = dword ptr -4
.text:00407190 arg_0           = dword ptr  4
.text:00407190 AccessMode      = dword ptr  8
.text:00407190
.text:00407190                 sub     esp, 1Ch
.text:00407193                 mov     [esp+1Ch+var_8], ebx
.text:00407197                 mov     ebx, [esp+1Ch+arg_0]
.text:0040719B                 mov     [esp+1Ch+var_4], esi
.text:0040719F                 mov     esi, [esp+1Ch+AccessMode]
.text:004071A3                 test    ebx, ebx
.text:004071A5                 jz      short loc_4071F5
.text:004071A7                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:004071AF                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:004071B2                 call    CreateDirectoryA
.text:004071B7                 sub     esp, 8
.text:004071BA                 test    eax, eax
.text:004071BC                 jz      short loc_4071D6
.text:004071BE                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:004071C2                 mov     esi, [esp+1Ch+var_4]
.text:004071C6                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:004071CA                 mov     ebx, [esp+1Ch+var_8]
.text:004071CE                 add     esp, 1Ch
.text:004071D1                 jmp     _chmod
.text:004071D6 ; ---------------------------------------------------------------------------
.text:004071D6
.text:004071D6 loc_4071D6:                             ; CODE XREF: sub_407190+2C↑j
.text:004071D6                 call    sub_4076C0
.text:004071DB                 mov     esi, eax
.text:004071DD                 call    _errno
.text:004071E2                 mov     [eax], esi
.text:004071E4
.text:004071E4 loc_4071E4:                             ; CODE XREF: sub_407190+70↓j
.text:004071E4                 mov     ebx, [esp+1Ch+var_8]
.text:004071E8                 mov     eax, 0FFFFFFFFh
.text:004071ED                 mov     esi, [esp+1Ch+var_4]
.text:004071F1                 add     esp, 1Ch
.text:004071F4                 retn
.text:004071F5 ; ---------------------------------------------------------------------------
.text:004071F5
.text:004071F5 loc_4071F5:                             ; CODE XREF: sub_407190+15↑j
.text:004071F5                 call    _errno
.text:004071FA                 mov     dword ptr [eax], 16h
.text:00407200                 jmp     short loc_4071E4
.text:00407200 sub_407190      endp
.text:00407200
.text:00407200 ; ---------------------------------------------------------------------------
.text:00407202                 align 10h
.text:00407210
.text:00407210 ; =============== S U B R O U T I N E =======================================
.text:00407210
.text:00407210
.text:00407210 ; int __cdecl sub_407210(char *, int)
.text:00407210 sub_407210      proc near               ; CODE XREF: sub_401E50+44↑p
.text:00407210                                         ; sub_401E50+517↑p ...
.text:00407210
.text:00407210 var_C           = dword ptr -0Ch
.text:00407210 var_8           = dword ptr -8
.text:00407210 var_4           = dword ptr -4
.text:00407210 arg_0           = dword ptr  4
.text:00407210 arg_4           = dword ptr  8
.text:00407210
.text:00407210                 sub     esp, 0Ch
.text:00407213                 mov     edx, [esp+0Ch+arg_4]
.text:00407217                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040721E                 mov     [esp+0Ch+var_4], edx ; int
.text:00407222                 mov     edx, [esp+0Ch+arg_0]
.text:00407226                 mov     [esp+0Ch+var_8], edx ; char *
.text:0040722A                 call    sub_407240
.text:0040722F                 add     esp, 0Ch
.text:00407232                 retn
.text:00407232 sub_407210      endp
.text:00407232
.text:00407232 ; ---------------------------------------------------------------------------
.text:00407233                 align 10h
.text:00407240
.text:00407240 ; =============== S U B R O U T I N E =======================================
.text:00407240
.text:00407240
.text:00407240 ; int __cdecl sub_407240(LPCSTR, char *, int)
.text:00407240 sub_407240      proc near               ; CODE XREF: sub_407210+1A↑p
.text:00407240                                         ; sub_40CBD0+104↓p ...
.text:00407240
.text:00407240 var_13C         = dword ptr -13Ch
.text:00407240 lpString1       = dword ptr -138h
.text:00407240 var_134         = dword ptr -134h
.text:00407240 String1         = byte ptr -12Ch
.text:00407240 var_10          = dword ptr -10h
.text:00407240 var_C           = dword ptr -0Ch
.text:00407240 var_8           = dword ptr -8
.text:00407240 var_4           = dword ptr -4
.text:00407240 arg_0           = dword ptr  4
.text:00407240 arg_4           = dword ptr  8
.text:00407240 arg_8           = dword ptr  0Ch
.text:00407240
.text:00407240                 sub     esp, 13Ch
.text:00407246                 mov     [esp+13Ch+var_10], ebx
.text:0040724D                 mov     ebx, [esp+13Ch+arg_8]
.text:00407254                 mov     [esp+13Ch+var_C], esi
.text:0040725B                 mov     esi, [esp+13Ch+arg_4]
.text:00407262                 mov     [esp+13Ch+var_8], edi
.text:00407269                 mov     edi, [esp+13Ch+arg_0]
.text:00407270                 mov     [esp+13Ch+var_4], ebp
.text:00407277                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040727B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0040727F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:00407282                 call    sub_407940
.text:00407287                 cmp     eax, 0FFFFFFFFh
.text:0040728A                 mov     edx, eax
.text:0040728C                 jz      short loc_40729E
.text:0040728E                 mov     ecx, [ebx]
.text:00407290                 and     ecx, 0F000h
.text:00407296                 cmp     ecx, 0A000h
.text:0040729C                 jz      short loc_4072C3
.text:0040729E
.text:0040729E loc_40729E:                             ; CODE XREF: sub_407240+4C↑j
.text:0040729E                                         ; sub_407240+A1↓j ...
.text:0040729E                 mov     ebx, [esp+13Ch+var_10]
.text:004072A5                 mov     eax, edx
.text:004072A7                 mov     esi, [esp+13Ch+var_C]
.text:004072AE                 mov     edi, [esp+13Ch+var_8]
.text:004072B5                 mov     ebp, [esp+13Ch+var_4]
.text:004072BC                 add     esp, 13Ch
.text:004072C2                 retn
.text:004072C3 ; ---------------------------------------------------------------------------
.text:004072C3
.text:004072C3 loc_4072C3:                             ; CODE XREF: sub_407240+5C↑j
.text:004072C3                 mov     [esp+13Ch+var_134], 104h
.text:004072CB                 lea     ebp, [esp+13Ch+String1]
.text:004072CF                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:004072D3                 mov     [esp+13Ch+var_13C], esi ; char *
.text:004072D6                 call    sub_407860
.text:004072DB                 inc     eax
.text:004072DC                 mov     edx, 0FFFFFFFFh
.text:004072E1                 jz      short loc_40729E
.text:004072E3                 mov     [esp+13Ch+var_134], ebx ; int
.text:004072E7                 mov     [esp+13Ch+lpString1], ebp ; int
.text:004072EB                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:004072EE                 call    sub_407940
.text:004072F3                 mov     edx, eax
.text:004072F5                 jmp     short loc_40729E
.text:004072F5 sub_407240      endp
.text:004072F5
.text:004072F5 ; ---------------------------------------------------------------------------
.text:004072F7                 align 10h
.text:00407300
.text:00407300 ; =============== S U B R O U T I N E =======================================
.text:00407300
.text:00407300
.text:00407300 ; int __cdecl sub_407300(LPCSTR)
.text:00407300 sub_407300      proc near               ; CODE XREF: sub_401E50+34E↑p
.text:00407300                                         ; sub_401E50+87A↑p ...
.text:00407300
.text:00407300 lpPathName      = dword ptr -0Ch
.text:00407300 var_4           = dword ptr -4
.text:00407300 arg_0           = dword ptr  4
.text:00407300
.text:00407300                 sub     esp, 0Ch
.text:00407303                 mov     eax, [esp+0Ch+arg_0]
.text:00407307                 mov     [esp+0Ch+var_4], ebx
.text:0040730B                 test    eax, eax
.text:0040730D                 jz      short loc_40733F
.text:0040730F                 mov     [esp+0Ch+lpPathName], eax ; lpPathName
.text:00407312                 call    SetCurrentDirectoryA
.text:00407317                 sub     esp, 4
.text:0040731A                 xor     edx, edx
.text:0040731C                 test    eax, eax
.text:0040731E                 jz      short loc_40732A
.text:00407320
.text:00407320 loc_407320:                             ; CODE XREF: sub_407300+3D↓j
.text:00407320                 mov     ebx, [esp+0Ch+var_4]
.text:00407324                 mov     eax, edx
.text:00407326                 add     esp, 0Ch
.text:00407329                 retn
.text:0040732A ; ---------------------------------------------------------------------------
.text:0040732A
.text:0040732A loc_40732A:                             ; CODE XREF: sub_407300+1E↑j
.text:0040732A                 call    sub_4076C0
.text:0040732F                 mov     ebx, eax
.text:00407331                 call    _errno
.text:00407336                 mov     [eax], ebx
.text:00407338
.text:00407338 loc_407338:                             ; CODE XREF: sub_407300+4A↓j
.text:00407338                 mov     edx, 0FFFFFFFFh
.text:0040733D                 jmp     short loc_407320
.text:0040733F ; ---------------------------------------------------------------------------
.text:0040733F
.text:0040733F loc_40733F:                             ; CODE XREF: sub_407300+D↑j
.text:0040733F                 call    _errno
.text:00407344                 mov     dword ptr [eax], 16h
.text:0040734A                 jmp     short loc_407338
.text:0040734A sub_407300      endp
.text:0040734A
.text:0040734A ; ---------------------------------------------------------------------------
.text:0040734C                 align 10h
.text:00407350
.text:00407350 ; =============== S U B R O U T I N E =======================================
.text:00407350
.text:00407350
.text:00407350 sub_407350      proc near               ; CODE XREF: sub_402E00+6A↑p
.text:00407350
.text:00407350 arg_0           = dword ptr  4
.text:00407350
.text:00407350                 sub     esp, 0Ch
.text:00407353                 mov     edx, [esp+0Ch+arg_0]
.text:00407357                 test    edx, edx
.text:00407359                 js      short loc_407361
.text:0040735B                 xor     eax, eax
.text:0040735D
.text:0040735D loc_40735D:                             ; CODE XREF: sub_407350+21↓j
.text:0040735D                 add     esp, 0Ch
.text:00407360                 retn
.text:00407361 ; ---------------------------------------------------------------------------
.text:00407361
.text:00407361 loc_407361:                             ; CODE XREF: sub_407350+9↑j
.text:00407361                 call    _errno
.text:00407366                 mov     dword ptr [eax], 16h
.text:0040736C                 mov     eax, 0FFFFFFFFh
.text:00407371                 jmp     short loc_40735D
.text:00407371 sub_407350      endp
.text:00407371
.text:00407371 ; ---------------------------------------------------------------------------
.text:00407373                 align 10h
.text:00407380
.text:00407380 ; =============== S U B R O U T I N E =======================================
.text:00407380
.text:00407380
.text:00407380 sub_407380      proc near               ; CODE XREF: sub_406250+15F↑p
.text:00407380                                         ; sub_406250+5A3↑p
.text:00407380
.text:00407380 var_1C          = dword ptr -1Ch
.text:00407380 var_18          = dword ptr -18h
.text:00407380 var_14          = dword ptr -14h
.text:00407380 arg_0           = dword ptr  4
.text:00407380 arg_4           = dword ptr  8
.text:00407380 arg_8           = dword ptr  0Ch
.text:00407380
.text:00407380                 push    edi
.text:00407381                 push    esi
.text:00407382                 push    ebx
.text:00407383                 sub     esp, 10h
.text:00407386                 mov     edi, [esp+1Ch+arg_8]
.text:0040738A                 mov     esi, [esp+1Ch+arg_0]
.text:0040738E                 mov     ebx, [esp+1Ch+arg_4]
.text:00407392                 cmp     edi, 0Fh
.text:00407395                 jbe     short loc_4073E0
.text:00407397                 mov     ecx, esi
.text:00407399                 neg     ecx
.text:0040739B                 and     ecx, 3
.text:0040739E                 sub     edi, ecx
.text:004073A0                 mov     edx, ecx
.text:004073A2                 test    ecx, ecx
.text:004073A4                 jz      short loc_4073BA
.text:004073A6                 lea     esi, [esi+0]
.text:004073A9                 lea     edi, [edi+0]
.text:004073B0
.text:004073B0 loc_4073B0:                             ; CODE XREF: sub_407380+38↓j
.text:004073B0                 movzx   ecx, byte ptr [ebx]
.text:004073B3                 inc     ebx
.text:004073B4                 mov     [esi], cl
.text:004073B6                 inc     esi
.text:004073B7                 dec     edx
.text:004073B8                 jnz     short loc_4073B0
.text:004073BA
.text:004073BA loc_4073BA:                             ; CODE XREF: sub_407380+24↑j
.text:004073BA                 test    bl, 3
.text:004073BD                 jnz     short loc_407403
.text:004073BF                 mov     [esp+1Ch+var_18], ebx
.text:004073C3                 mov     edx, edi
.text:004073C5                 shr     edx, 2
.text:004073C8                 mov     [esp+1Ch+var_14], edx
.text:004073CC                 mov     [esp+1Ch+var_1C], esi
.text:004073CF                 call    sub_407990
.text:004073D4
.text:004073D4 loc_4073D4:                             ; CODE XREF: sub_407380+98↓j
.text:004073D4                 mov     edx, edi
.text:004073D6                 and     edx, 0FFFFFFFCh
.text:004073D9                 and     edi, 3
.text:004073DC                 add     ebx, edx
.text:004073DE                 add     esi, edx
.text:004073E0
.text:004073E0 loc_4073E0:                             ; CODE XREF: sub_407380+15↑j
.text:004073E0                 test    edi, edi
.text:004073E2                 mov     edx, edi
.text:004073E4                 jz      short loc_4073FA
.text:004073E6                 lea     esi, [esi+0]
.text:004073E9                 lea     edi, [edi+0]
.text:004073F0
.text:004073F0 loc_4073F0:                             ; CODE XREF: sub_407380+78↓j
.text:004073F0                 movzx   ecx, byte ptr [ebx]
.text:004073F3                 inc     ebx
.text:004073F4                 mov     [esi], cl
.text:004073F6                 inc     esi
.text:004073F7                 dec     edx
.text:004073F8                 jnz     short loc_4073F0
.text:004073FA
.text:004073FA loc_4073FA:                             ; CODE XREF: sub_407380+64↑j
.text:004073FA                 add     esp, 10h
.text:004073FD                 mov     eax, esi
.text:004073FF                 pop     ebx
.text:00407400                 pop     esi
.text:00407401                 pop     edi
.text:00407402                 retn
.text:00407403 ; ---------------------------------------------------------------------------
.text:00407403
.text:00407403 loc_407403:                             ; CODE XREF: sub_407380+3D↑j
.text:00407403                 mov     [esp+1Ch+var_18], ebx
.text:00407407                 mov     ecx, edi
.text:00407409                 shr     ecx, 2
.text:0040740C                 mov     [esp+1Ch+var_14], ecx
.text:00407410                 mov     [esp+1Ch+var_1C], esi
.text:00407413                 call    sub_407A90
.text:00407418                 jmp     short loc_4073D4
.text:00407418 sub_407380      endp
.text:00407418
.text:00407418 ; ---------------------------------------------------------------------------
.text:0040741A                 align 10h
.text:00407420
.text:00407420 ; =============== S U B R O U T I N E =======================================
.text:00407420
.text:00407420 ; Attributes: thunk
.text:00407420
.text:00407420 ; char *__cdecl j__getcwd(char *DstBuf, int SizeInBytes)
.text:00407420 j__getcwd       proc near               ; CODE XREF: sub_4068E0+16↑p
.text:00407420
.text:00407420 DstBuf          = dword ptr  4
.text:00407420 SizeInBytes     = dword ptr  8
.text:00407420
.text:00407420                 jmp     _getcwd
.text:00407420 j__getcwd       endp
.text:00407420
.text:00407420 ; ---------------------------------------------------------------------------
.text:00407425                 align 10h
.text:00407430
.text:00407430 ; =============== S U B R O U T I N E =======================================
.text:00407430
.text:00407430 ; Attributes: info_from_lumina
.text:00407430
.text:00407430 ___get_errno    proc near               ; CODE XREF: sub_4076C0+B↓p
.text:00407430
.text:00407430 arg_0           = dword ptr  4
.text:00407430
.text:00407430                 mov     eax, [esp+arg_0]
.text:00407434                 cmp     eax, 53h ; 'S'
.text:00407437                 jg      loc_407530
.text:0040743D                 cmp     eax, 52h ; 'R'
.text:00407440                 jge     short loc_407492
.text:00407442                 cmp     eax, 0Fh
.text:00407445                 jz      short loc_407460
.text:00407447                 cmp     eax, 0Fh
.text:0040744A                 jg      short loc_4074C0
.text:0040744C                 cmp     eax, 9
.text:0040744F                 jg      short loc_4074A0
.text:00407451                 cmp     eax, 7
.text:00407454                 jge     short loc_407499
.text:00407456                 cmp     eax, 3
.text:00407459                 jg      short loc_40747A
.text:0040745B                 cmp     eax, 2
.text:0040745E                 jl      short loc_407473
.text:00407460
.text:00407460 loc_407460:                             ; CODE XREF: ___get_errno+15↑j
.text:00407460                                         ; ___get_errno+9D↓j ...
.text:00407460                 mov     edx, 2
.text:00407465                 lea     esi, [esi+0]
.text:00407469                 lea     edi, [edi+0]
.text:00407470
.text:00407470 loc_407470:                             ; CODE XREF: ___get_errno+48↓j
.text:00407470                                         ; ___get_errno+59↓j ...
.text:00407470                 mov     eax, edx
.text:00407472                 retn
.text:00407473 ; ---------------------------------------------------------------------------
.text:00407473
.text:00407473 loc_407473:                             ; CODE XREF: ___get_errno+2E↑j
.text:00407473                                         ; ___get_errno+78↓j ...
.text:00407473                 mov     edx, 16h
.text:00407478                 jmp     short loc_407470
.text:0040747A ; ---------------------------------------------------------------------------
.text:0040747A
.text:0040747A loc_40747A:                             ; CODE XREF: ___get_errno+29↑j
.text:0040747A                 cmp     eax, 5
.text:0040747D                 jz      short loc_407492
.text:0040747F                 cmp     eax, 5
.text:00407482                 jg      short loc_40748B
.text:00407484                 mov     edx, 18h
.text:00407489                 jmp     short loc_407470
.text:0040748B ; ---------------------------------------------------------------------------
.text:0040748B
.text:0040748B loc_40748B:                             ; CODE XREF: ___get_errno+52↑j
.text:0040748B                                         ; ___get_errno+180↓j
.text:0040748B                 mov     edx, 9
.text:00407490                 jmp     short loc_407470
.text:00407492 ; ---------------------------------------------------------------------------
.text:00407492
.text:00407492 loc_407492:                             ; CODE XREF: ___get_errno+10↑j
.text:00407492                                         ; ___get_errno+4D↑j ...
.text:00407492                 mov     edx, 0Dh
.text:00407497                 jmp     short loc_407470
.text:00407499 ; ---------------------------------------------------------------------------
.text:00407499
.text:00407499 loc_407499:                             ; CODE XREF: ___get_errno+24↑j
.text:00407499                                         ; ___get_errno+73↓j ...
.text:00407499                 mov     edx, 0Ch
.text:0040749E                 jmp     short loc_407470
.text:004074A0 ; ---------------------------------------------------------------------------
.text:004074A0
.text:004074A0 loc_4074A0:                             ; CODE XREF: ___get_errno+1F↑j
.text:004074A0                 cmp     eax, 0Dh
.text:004074A3                 jg      short loc_407499
.text:004074A5                 cmp     eax, 0Ch
.text:004074A8                 jge     short loc_407473
.text:004074AA                 cmp     eax, 0Ah
.text:004074AD                 mov     edx, 7
.text:004074B2                 jz      short loc_407470
.text:004074B4                 cmp     eax, 0Bh
.text:004074B7                 jnz     short loc_407473
.text:004074B9
.text:004074B9 loc_4074B9:                             ; CODE XREF: ___get_errno+21A↓j
.text:004074B9                 mov     edx, 8
.text:004074BE                 jmp     short loc_407470
.text:004074C0 ; ---------------------------------------------------------------------------
.text:004074C0
.text:004074C0 loc_4074C0:                             ; CODE XREF: ___get_errno+1A↑j
.text:004074C0                 cmp     eax, 22h ; '"'
.text:004074C3                 jg      short loc_4074F4
.text:004074C5                 cmp     eax, 16h
.text:004074C8                 jge     short loc_407492
.text:004074CA                 cmp     eax, 12h
.text:004074CD                 jz      short loc_407460
.text:004074CF                 cmp     eax, 12h
.text:004074D2                 jg      short loc_4074E5
.text:004074D4                 cmp     eax, 10h
.text:004074D7                 jz      short loc_407492
.text:004074D9                 mov     edx, 12h
.text:004074DE                 cmp     eax, 11h
.text:004074E1
.text:004074E1 loc_4074E1:                             ; CODE XREF: ___get_errno+172↓j
.text:004074E1                                         ; ___get_errno+24C↓j ...
.text:004074E1                 jnz     short loc_407473
.text:004074E3                 jmp     short loc_407470
.text:004074E5 ; ---------------------------------------------------------------------------
.text:004074E5
.text:004074E5 loc_4074E5:                             ; CODE XREF: ___get_errno+A2↑j
.text:004074E5                 cmp     eax, 14h
.text:004074E8                 jle     short loc_407492
.text:004074EA
.text:004074EA loc_4074EA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:004074EA                 mov     edx, 10h
.text:004074EF                 jmp     loc_407470
.text:004074F4 ; ---------------------------------------------------------------------------
.text:004074F4
.text:004074F4 loc_4074F4:                             ; CODE XREF: ___get_errno+93↑j
.text:004074F4                 cmp     eax, 41h ; 'A'
.text:004074F7                 jz      short loc_407492
.text:004074F9                 cmp     eax, 41h ; 'A'
.text:004074FC                 jg      short loc_407511
.text:004074FE                 cmp     eax, 24h ; '$'
.text:00407501                 jz      short loc_407492
.text:00407503                 cmp     eax, 35h ; '5'
.text:00407506                 jnz     loc_407473
.text:0040750C                 jmp     loc_407460
.text:00407511 ; ---------------------------------------------------------------------------
.text:00407511
.text:00407511 loc_407511:                             ; CODE XREF: ___get_errno+CC↑j
.text:00407511                 cmp     eax, 43h ; 'C'
.text:00407514                 jz      loc_407460
.text:0040751A                 cmp     eax, 50h ; 'P'
.text:0040751D                 jnz     loc_407473
.text:00407523
.text:00407523 loc_407523:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00407523                 mov     edx, 11h
.text:00407528                 jmp     loc_407470
.text:00407528 ; ---------------------------------------------------------------------------
.text:0040752D                 align 10h
.text:00407530
.text:00407530 loc_407530:                             ; CODE XREF: ___get_errno+7↑j
.text:00407530                 cmp     eax, 0A1h ; '¡'
.text:00407535                 jz      loc_407460
.text:0040753B                 cmp     eax, 0A1h ; '¡'
.text:00407540                 jg      loc_4075F0
.text:00407546                 cmp     eax, 81h
.text:0040754B                 jg      short loc_4075B5
.text:0040754D                 cmp     eax, 80h ; '€'
.text:00407552                 mov     edx, 0Ah
.text:00407557                 jge     loc_407470
.text:0040755D                 cmp     eax, 6Ch ; 'l'
.text:00407560                 jz      loc_407492
.text:00407566                 cmp     eax, 6Ch ; 'l'
.text:00407569                 jg      short loc_407587
.text:0040756B                 cmp     eax, 57h ; 'W'
.text:0040756E                 jz      loc_407473
.text:00407574                 cmp     eax, 59h ; 'Y'
.text:00407577                 jnz     loc_407473
.text:0040757D
.text:0040757D loc_40757D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040757D                                         ; ___get_errno+23C↓j
.text:0040757D                 mov     edx, 0Bh
.text:00407582                 jmp     loc_407470
.text:00407587 ; ---------------------------------------------------------------------------
.text:00407587
.text:00407587 loc_407587:                             ; CODE XREF: ___get_errno+139↑j
.text:00407587                 cmp     eax, 70h ; 'p'
.text:0040758A                 mov     edx, 1Ch
.text:0040758F                 jz      loc_407470
.text:00407595                 cmp     eax, 70h ; 'p'
.text:00407598                 jg      short loc_4075A7
.text:0040759A                 mov     edx, 20h ; ' '
.text:0040759F                 cmp     eax, 6Dh ; 'm'
.text:004075A2                 jmp     loc_4074E1
.text:004075A7 ; ---------------------------------------------------------------------------
.text:004075A7
.text:004075A7 loc_4075A7:                             ; CODE XREF: ___get_errno+168↑j
.text:004075A7                 cmp     eax, 72h ; 'r'
.text:004075AA
.text:004075AA loc_4075AA:                             ; CODE XREF: ___get_errno+19C↓j
.text:004075AA                 jnz     loc_407473
.text:004075B0                 jmp     loc_40748B
.text:004075B5 ; ---------------------------------------------------------------------------
.text:004075B5
.text:004075B5 loc_4075B5:                             ; CODE XREF: ___get_errno+11B↑j
.text:004075B5                 cmp     eax, 84h ; '„'
.text:004075BA                 jz      loc_407492
.text:004075C0                 cmp     eax, 84h ; '„'
.text:004075C5                 jg      short loc_4075CE
.text:004075C7                 cmp     eax, 82h ; '‚'
.text:004075CC                 jmp     short loc_4075AA
.text:004075CE ; ---------------------------------------------------------------------------
.text:004075CE
.text:004075CE loc_4075CE:                             ; CODE XREF: ___get_errno+195↑j
.text:004075CE                 cmp     eax, 91h ; '‘'
.text:004075D3                 mov     edx, 29h ; ')'
.text:004075D8                 jz      loc_407470
.text:004075DE                 cmp     eax, 9Eh ; 'ž'
.text:004075E3
.text:004075E3 loc_4075E3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:004075E3                 jnz     loc_407473
.text:004075E9                 jmp     loc_407492
.text:004075E9 ; ---------------------------------------------------------------------------
.text:004075EE                 align 10h
.text:004075F0
.text:004075F0 loc_4075F0:                             ; CODE XREF: ___get_errno+110↑j
.text:004075F0                 cmp     eax, 0CEh ; 'Î'
.text:004075F5                 jz      loc_407460
.text:004075FB                 cmp     eax, 0CEh ; 'Î'
.text:00407600                 jg      short loc_407650
.text:00407602                 cmp     eax, 0AAh ; 'ª'
.text:00407607                 jz      loc_4074EA
.text:0040760D                 cmp     eax, 0AAh ; 'ª'
.text:00407612                 jg      short loc_407626
.text:00407614                 cmp     eax, 0A4h ; '¤'
.text:00407619                 jz      loc_40757D
.text:0040761F                 cmp     eax, 0A7h ; '§'
.text:00407624                 jmp     short loc_4075E3
.text:00407626 ; ---------------------------------------------------------------------------
.text:00407626
.text:00407626 loc_407626:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00407626                 cmp     eax, 0B7h ; '·'
.text:0040762B                 jz      loc_407523
.text:00407631                 cmp     eax, 0B7h ; '·'
.text:00407636                 jl      loc_407473
.text:0040763C                 sub     eax, 0BCh ; '¼'
.text:00407641                 cmp     eax, 0Eh
.text:00407644                 ja      loc_407473
.text:0040764A                 jmp     loc_4074B9
.text:0040764A ; ---------------------------------------------------------------------------
.text:0040764F                 align 10h
.text:00407650
.text:00407650 loc_407650:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00407650                 cmp     eax, 46Bh
.text:00407655                 mov     edx, 24h ; '$'
.text:0040765A                 jz      loc_407470
.text:00407660                 cmp     eax, 46Bh
.text:00407665                 jg      short loc_407681
.text:00407667                 cmp     eax, 0D7h ; '×'
.text:0040766C                 jz      loc_40757D
.text:00407672                 mov     edx, 5
.text:00407677                 cmp     eax, 45Dh
.text:0040767C                 jmp     loc_4074E1
.text:00407681 ; ---------------------------------------------------------------------------
.text:00407681
.text:00407681 loc_407681:                             ; CODE XREF: ___get_errno+235↑j
.text:00407681                 cmp     eax, 4D5h
.text:00407686                 mov     edx, 4
.text:0040768B                 jz      loc_407470
.text:00407691                 cmp     eax, 4D5h
.text:00407696                 jg      short loc_4076A7
.text:00407698                 mov     edx, 13h
.text:0040769D                 cmp     eax, 4B0h
.text:004076A2                 jmp     loc_4074E1
.text:004076A7 ; ---------------------------------------------------------------------------
.text:004076A7
.text:004076A7 loc_4076A7:                             ; CODE XREF: ___get_errno+266↑j
.text:004076A7                 cmp     eax, 718h
.text:004076AC                 jnz     loc_407473
.text:004076B2                 jmp     loc_407499
.text:004076B2 ___get_errno    endp
.text:004076B2
.text:004076B2 ; ---------------------------------------------------------------------------
.text:004076B7                 align 10h
.text:004076C0
.text:004076C0 ; =============== S U B R O U T I N E =======================================
.text:004076C0
.text:004076C0
.text:004076C0 sub_4076C0      proc near               ; CODE XREF: sub_407190:loc_4071D6↑p
.text:004076C0                                         ; sub_407300:loc_40732A↑p ...
.text:004076C0
.text:004076C0 var_C           = dword ptr -0Ch
.text:004076C0
.text:004076C0                 sub     esp, 0Ch
.text:004076C3                 call    GetLastError
.text:004076C8                 mov     [esp+0Ch+var_C], eax
.text:004076CB                 call    ___get_errno
.text:004076D0                 add     esp, 0Ch
.text:004076D3                 retn
.text:004076D3 sub_4076C0      endp
.text:004076D3
.text:004076D3 ; ---------------------------------------------------------------------------
.text:004076D4                 align 10h
.text:004076E0
.text:004076E0 ; =============== S U B R O U T I N E =======================================
.text:004076E0
.text:004076E0
.text:004076E0 ; int __cdecl sub_4076E0(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:004076E0 sub_4076E0      proc near               ; CODE XREF: sub_407860+93↓p
.text:004076E0
.text:004076E0 pvReserved      = dword ptr -35Ch
.text:004076E0 pUnkOuter       = dword ptr -358h
.text:004076E0 dwClsContext    = dword ptr -354h
.text:004076E0 riid            = dword ptr -350h
.text:004076E0 ppv             = dword ptr -34Ch
.text:004076E0 cchWideChar     = dword ptr -348h
.text:004076E0 var_334         = byte ptr -334h
.text:004076E0 var_330         = dword ptr -330h
.text:004076E0 String2         = byte ptr -32Ch
.text:004076E0 WideCharStr     = word ptr -21Ch
.text:004076E0 lpMultiByteStr  = dword ptr  4
.text:004076E0 lpString1       = dword ptr  8
.text:004076E0
.text:004076E0                 push    edi
.text:004076E1                 push    esi
.text:004076E2                 push    ebx
.text:004076E3                 sub     esp, 350h
.text:004076E9                 mov     edi, [esp+35Ch+lpString1]
.text:004076F0                 mov     byte ptr [edi], 0
.text:004076F3                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:004076FA                 call    OleInitialize
.text:004076FF                 sub     esp, 4
.text:00407702                 cmp     eax, 1
.text:00407705                 ja      loc_40783F
.text:0040770B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:00407713                 lea     ecx, [esp+35Ch+var_330]
.text:00407717                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0040771B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:00407723                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0040772B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:00407732                 call    CoCreateInstance
.text:00407737                 sub     esp, 14h
.text:0040773A                 test    eax, eax
.text:0040773C                 js      loc_40783F
.text:00407742                 mov     ebx, [esp+35Ch+var_330]
.text:00407746                 lea     edx, [esp+35Ch+var_334]
.text:0040774A                 mov     esi, [ebx]
.text:0040774C                 mov     [esp+35Ch+dwClsContext], edx
.text:00407750                 mov     [esp+35Ch+pvReserved], ebx
.text:00407753                 xor     ebx, ebx
.text:00407755                 mov     [esp+35Ch+pUnkOuter], offset dword_40E350
.text:0040775D                 call    dword ptr [esi]
.text:0040775F                 sub     esp, 0Ch
.text:00407762                 lea     esi, [esp+35Ch+WideCharStr]
.text:00407769                 call    AreFileApisANSI
.text:0040776E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:00407776                 test    eax, eax
.text:00407778                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0040777F                 setz    bl
.text:00407782                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00407786                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0040778E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:00407792                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0040779A                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0040779D                 call    MultiByteToWideChar
.text:004077A2                 sub     esp, 18h
.text:004077A5                 test    eax, eax
.text:004077A7                 js      loc_40783F
.text:004077AD                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:004077B1                 mov     ebx, [edx]
.text:004077B3                 mov     [esp+35Ch+dwClsContext], 0
.text:004077BB                 mov     [esp+35Ch+pUnkOuter], esi
.text:004077BF                 mov     [esp+35Ch+pvReserved], edx
.text:004077C2                 call    dword ptr [ebx+14h]
.text:004077C5                 sub     esp, 0Ch
.text:004077C8                 test    eax, eax
.text:004077CA                 js      short loc_40783F
.text:004077CC                 mov     ebx, [esp+35Ch+var_330]
.text:004077D0                 lea     esi, [esp+35Ch+String2]
.text:004077D4                 mov     ecx, [ebx]
.text:004077D6                 mov     [esp+35Ch+pvReserved], ebx
.text:004077D9                 mov     [esp+35Ch+ppv], 0
.text:004077E1                 mov     [esp+35Ch+riid], 0
.text:004077E9                 mov     [esp+35Ch+dwClsContext], 104h
.text:004077F1                 mov     [esp+35Ch+pUnkOuter], esi
.text:004077F5                 call    dword ptr [ecx+0Ch]
.text:004077F8                 sub     esp, 14h
.text:004077FB                 mov     ebx, eax
.text:004077FD                 test    eax, eax
.text:004077FF                 js      short loc_40783F
.text:00407801                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:00407805                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:00407808                 call    lstrcpyA
.text:0040780D                 sub     esp, 8
.text:00407810                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:00407814                 mov     ecx, [edi]
.text:00407816                 mov     [esp+35Ch+pvReserved], edi
.text:00407819                 call    dword ptr [ecx+8]
.text:0040781C                 sub     esp, 4
.text:0040781F                 mov     edx, [esp+35Ch+var_330]
.text:00407823                 mov     esi, [edx]
.text:00407825                 mov     [esp+35Ch+pvReserved], edx
.text:00407828                 call    dword ptr [esi+8]
.text:0040782B                 sub     esp, 4
.text:0040782E                 call    CoUninitialize
.text:00407833                 mov     eax, ebx
.text:00407835
.text:00407835 loc_407835:                             ; CODE XREF: sub_4076E0+177↓j
.text:00407835                 add     esp, 350h
.text:0040783B                 pop     ebx
.text:0040783C                 pop     esi
.text:0040783D                 pop     edi
.text:0040783E                 retn
.text:0040783F ; ---------------------------------------------------------------------------
.text:0040783F
.text:0040783F loc_40783F:                             ; CODE XREF: sub_4076E0+25↑j
.text:0040783F                                         ; sub_4076E0+5C↑j ...
.text:0040783F                 call    sub_4076C0
.text:00407844                 mov     edi, eax
.text:00407846                 call    _errno
.text:0040784B                 mov     [eax], edi
.text:0040784D                 call    CoUninitialize
.text:00407852                 mov     eax, 0FFFFFFFFh
.text:00407857                 jmp     short loc_407835
.text:00407857 sub_4076E0      endp
.text:00407857
.text:00407857 ; ---------------------------------------------------------------------------
.text:00407859 ; const char Source[]
.text:00407859 Source          db '.lnk',0             ; DATA XREF: sub_407860+53↓o
.text:00407859                                         ; sub_407860:loc_4078C5↓o
.text:0040785E                 align 10h
.text:00407860
.text:00407860 ; =============== S U B R O U T I N E =======================================
.text:00407860
.text:00407860
.text:00407860 ; int __cdecl sub_407860(char *, LPSTR lpString1)
.text:00407860 sub_407860      proc near               ; CODE XREF: sub_407240+96↑p
.text:00407860
.text:00407860 Str             = dword ptr -1Ch
.text:00407860 Source          = dword ptr -18h
.text:00407860 Destination     = dword ptr -14h
.text:00407860 arg_0           = dword ptr  4
.text:00407860 lpString1       = dword ptr  8
.text:00407860
.text:00407860                 push    ebp
.text:00407861                 push    edi
.text:00407862                 push    esi
.text:00407863                 push    ebx
.text:00407864                 sub     esp, 0Ch
.text:00407867                 mov     ebx, [esp+1Ch+arg_0]
.text:0040786B                 mov     ebp, [esp+1Ch+lpString1]
.text:0040786F                 mov     [esp+1Ch+Str], ebx ; Str
.text:00407872                 call    strlen
.text:00407877                 add     eax, 5
.text:0040787A                 mov     [esp+1Ch+Str], eax ; Size
.text:0040787D                 call    malloc
.text:00407882                 mov     [esp+1Ch+Destination], eax
.text:00407886                 test    eax, eax
.text:00407888                 jz      loc_407930
.text:0040788E                 mov     [esp+1Ch+Source], ebx ; Source
.text:00407892                 mov     [esp+1Ch+Str], eax ; Destination
.text:00407895                 call    strcpy
.text:0040789A                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:004078A2                 mov     eax, [esp+1Ch+Destination]
.text:004078A6                 mov     [esp+1Ch+Str], eax ; Str
.text:004078A9                 call    strrchr
.text:004078AE                 test    eax, eax
.text:004078B0                 jz      short loc_4078C5
.text:004078B2                 cld
.text:004078B3                 mov     ebx, offset Source ; ".lnk"
.text:004078B8                 mov     ecx, 5
.text:004078BD                 mov     esi, eax
.text:004078BF                 mov     edi, ebx
.text:004078C1                 repe cmpsb
.text:004078C3                 jz      short loc_4078D9
.text:004078C5
.text:004078C5 loc_4078C5:                             ; CODE XREF: sub_407860+50↑j
.text:004078C5                 mov     [esp+1Ch+Source], offset Source ; ".lnk"
.text:004078CD                 mov     edx, [esp+1Ch+Destination]
.text:004078D1                 mov     [esp+1Ch+Str], edx ; Destination
.text:004078D4                 call    strcat
.text:004078D9
.text:004078D9 loc_4078D9:                             ; CODE XREF: sub_407860+63↑j
.text:004078D9                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:004078E0                 call    SetErrorMode
.text:004078E5                 sub     esp, 4
.text:004078E8                 mov     ebx, [esp+1Ch+Destination]
.text:004078EC                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:004078F0                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:004078F3                 call    sub_4076E0
.text:004078F8                 mov     [esp+1Ch+Str], ebx ; Block
.text:004078FB                 mov     esi, eax
.text:004078FD                 call    free
.text:00407902                 mov     [esp+1Ch+Str], 0 ; uMode
.text:00407909                 call    SetErrorMode
.text:0040790E                 sub     esp, 4
.text:00407911                 mov     [esp+1Ch+Str], ebp
.text:00407914                 call    sub_4081F0
.text:00407919                 inc     esi
.text:0040791A                 jz      short loc_407930
.text:0040791C                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:00407920                 add     esp, 0Ch
.text:00407923                 pop     ebx
.text:00407924                 pop     esi
.text:00407925                 pop     edi
.text:00407926                 pop     ebp
.text:00407927                 jmp     strlen
.text:00407927 ; ---------------------------------------------------------------------------
.text:0040792C                 align 10h
.text:00407930
.text:00407930 loc_407930:                             ; CODE XREF: sub_407860+28↑j
.text:00407930                                         ; sub_407860+BA↑j
.text:00407930                 add     esp, 0Ch
.text:00407933                 mov     eax, 0FFFFFFFFh
.text:00407938                 pop     ebx
.text:00407939                 pop     esi
.text:0040793A                 pop     edi
.text:0040793B                 pop     ebp
.text:0040793C                 retn
.text:0040793C sub_407860      endp
.text:0040793C
.text:0040793C ; ---------------------------------------------------------------------------
.text:0040793D                 align 10h
.text:00407940
.text:00407940 ; =============== S U B R O U T I N E =======================================
.text:00407940
.text:00407940
.text:00407940 ; int __cdecl sub_407940(LPCSTR, int, int)
.text:00407940 sub_407940      proc near               ; CODE XREF: sub_407240+42↑p
.text:00407940                                         ; sub_407240+AE↑p ...
.text:00407940
.text:00407940 lpFileName      = dword ptr -2Ch
.text:00407940 dwDesiredAccess = dword ptr -28h
.text:00407940 dwShareMode     = dword ptr -24h
.text:00407940 lpSecurityAttributes= dword ptr -20h
.text:00407940 dwCreationDisposition= dword ptr -1Ch
.text:00407940 dwFlagsAndAttributes= dword ptr -18h
.text:00407940 hTemplateFile   = dword ptr -14h
.text:00407940 var_10          = dword ptr -10h
.text:00407940 var_C           = dword ptr -0Ch
.text:00407940 var_8           = dword ptr -8
.text:00407940 var_4           = dword ptr -4
.text:00407940 arg_0           = dword ptr  4
.text:00407940 arg_4           = dword ptr  8
.text:00407940 arg_8           = dword ptr  0Ch
.text:00407940
.text:00407940 ; FUNCTION CHUNK AT .text:0040A080 SIZE 0000013A BYTES
.text:00407940
.text:00407940                 sub     esp, 0Ch
.text:00407943                 mov     ecx, [esp+0Ch+arg_0]
.text:00407947                 mov     edx, [esp+0Ch+arg_4]
.text:0040794B                 mov     eax, [esp+0Ch+arg_8]
.text:0040794F                 test    ecx, ecx
.text:00407951                 jnz     short loc_407970
.text:00407953                 test    edx, edx
.text:00407955                 jz      short loc_407970
.text:00407957                 test    eax, eax
.text:00407959                 jz      short loc_407970
.text:0040795B                 mov     [esp+0Ch+arg_4], eax
.text:0040795F                 mov     [esp+0Ch+arg_0], edx
.text:00407963                 add     esp, 0Ch
.text:00407966                 jmp     loc_40A080
.text:00407966 ; ---------------------------------------------------------------------------
.text:0040796B                 align 10h
.text:00407970
.text:00407970 loc_407970:                             ; CODE XREF: sub_407940+11↑j
.text:00407970                                         ; sub_407940+15↑j ...
.text:00407970                 call    _errno
.text:00407975                 mov     dword ptr [eax], 16h
.text:0040797B                 mov     eax, 0FFFFFFFFh
.text:00407980                 add     esp, 0Ch
.text:00407983                 retn
.text:00407983 sub_407940      endp
.text:00407983
.text:00407983 ; ---------------------------------------------------------------------------
.text:00407984                 align 10h
.text:00407990
.text:00407990 ; =============== S U B R O U T I N E =======================================
.text:00407990
.text:00407990
.text:00407990 sub_407990      proc near               ; CODE XREF: sub_407380+4F↑p
.text:00407990
.text:00407990 var_8           = dword ptr -8
.text:00407990 var_4           = dword ptr -4
.text:00407990 arg_0           = dword ptr  4
.text:00407990 arg_4           = dword ptr  8
.text:00407990 arg_8           = dword ptr  0Ch
.text:00407990
.text:00407990                 sub     esp, 8
.text:00407993                 mov     ecx, [esp+8+arg_0]
.text:00407997                 mov     [esp+8+var_8], ebx
.text:0040799A                 mov     ebx, [esp+8+arg_8]
.text:0040799E                 mov     [esp+8+var_4], esi
.text:004079A2                 mov     edx, [esp+8+arg_4]
.text:004079A6                 mov     eax, ebx
.text:004079A8                 and     eax, 7
.text:004079AB                 cmp     eax, 7          ; switch 8 cases
.text:004079AE                 ja      short def_4079B0 ; jumptable 004079B0 default case
.text:004079B0                 jmp     ds:jpt_4079B0[eax*4] ; switch jump
.text:004079B0 ; ---------------------------------------------------------------------------
.text:004079B7                 align 4
.text:004079B8 jpt_4079B0      dd offset loc_407A3A    ; DATA XREF: sub_407990+20↑r
.text:004079B8                 dd offset loc_407A41    ; jump table for switch statement
.text:004079B8                 dd offset loc_4079D8
.text:004079B8                 dd offset loc_407A49
.text:004079B8                 dd offset loc_407A56
.text:004079B8                 dd offset loc_407A63
.text:004079B8                 dd offset loc_407A70
.text:004079B8                 dd offset loc_407A7D
.text:004079D8 ; ---------------------------------------------------------------------------
.text:004079D8
.text:004079D8 loc_4079D8:                             ; CODE XREF: sub_407990+20↑j
.text:004079D8                                         ; DATA XREF: sub_407990:jpt_4079B0↑o
.text:004079D8                 mov     eax, [edx]      ; jumptable 004079B0 case 2
.text:004079DA                 sub     ecx, 1Ch
.text:004079DD                 add     ebx, 6
.text:004079E0                 sub     edx, 18h
.text:004079E3                 lea     esi, [esi+0]
.text:004079E9                 lea     edi, [edi+0]
.text:004079F0
.text:004079F0 loc_4079F0:                             ; CODE XREF: sub_407990+A8↓j
.text:004079F0                 mov     esi, [edx+1Ch]
.text:004079F3                 add     edx, 20h ; ' '
.text:004079F6                 mov     [ecx+1Ch], eax
.text:004079F9                 add     ecx, 20h ; ' '
.text:004079FC                 sub     ebx, 8
.text:004079FF                 jnz     short def_4079B0 ; jumptable 004079B0 default case
.text:00407A01                 mov     [ecx], esi
.text:00407A03                 mov     ebx, [esp+8+var_8]
.text:00407A06                 mov     esi, [esp+8+var_4]
.text:00407A0A                 add     esp, 8
.text:00407A0D                 retn
.text:00407A0D ; ---------------------------------------------------------------------------
.text:00407A0E                 align 10h
.text:00407A10
.text:00407A10 def_4079B0:                             ; CODE XREF: sub_407990+1E↑j
.text:00407A10                                         ; sub_407990+6F↑j ...
.text:00407A10                 mov     eax, [edx]      ; jumptable 004079B0 default case
.text:00407A12                 mov     [ecx], esi
.text:00407A14
.text:00407A14 loc_407A14:                             ; CODE XREF: sub_407990+AF↓j
.text:00407A14                 mov     esi, [edx+4]
.text:00407A17                 mov     [ecx+4], eax
.text:00407A1A
.text:00407A1A loc_407A1A:                             ; CODE XREF: sub_407990+F6↓j
.text:00407A1A                 mov     eax, [edx+8]
.text:00407A1D                 mov     [ecx+8], esi
.text:00407A20
.text:00407A20 loc_407A20:                             ; CODE XREF: sub_407990+EB↓j
.text:00407A20                 mov     esi, [edx+0Ch]
.text:00407A23                 mov     [ecx+0Ch], eax
.text:00407A26
.text:00407A26 loc_407A26:                             ; CODE XREF: sub_407990+DE↓j
.text:00407A26                 mov     eax, [edx+10h]
.text:00407A29                 mov     [ecx+10h], esi
.text:00407A2C
.text:00407A2C loc_407A2C:                             ; CODE XREF: sub_407990+D1↓j
.text:00407A2C                 mov     esi, [edx+14h]
.text:00407A2F                 mov     [ecx+14h], eax
.text:00407A32
.text:00407A32 loc_407A32:                             ; CODE XREF: sub_407990+C4↓j
.text:00407A32                 mov     eax, [edx+18h]
.text:00407A35                 mov     [ecx+18h], esi
.text:00407A38                 jmp     short loc_4079F0
.text:00407A3A ; ---------------------------------------------------------------------------
.text:00407A3A
.text:00407A3A loc_407A3A:                             ; CODE XREF: sub_407990+20↑j
.text:00407A3A                                         ; DATA XREF: sub_407990:jpt_4079B0↑o
.text:00407A3A                 mov     eax, [edx]      ; jumptable 004079B0 case 0
.text:00407A3C                 sub     ecx, 4
.text:00407A3F                 jmp     short loc_407A14
.text:00407A41 ; ---------------------------------------------------------------------------
.text:00407A41
.text:00407A41 loc_407A41:                             ; CODE XREF: sub_407990+20↑j
.text:00407A41                                         ; DATA XREF: sub_407990:jpt_4079B0↑o
.text:00407A41                 mov     esi, [edx]      ; jumptable 004079B0 case 1
.text:00407A43                 dec     ebx
.text:00407A44                 add     edx, 4
.text:00407A47                 jmp     short def_4079B0 ; jumptable 004079B0 default case
.text:00407A49 ; ---------------------------------------------------------------------------
.text:00407A49
.text:00407A49 loc_407A49:                             ; CODE XREF: sub_407990+20↑j
.text:00407A49                                         ; DATA XREF: sub_407990:jpt_4079B0↑o
.text:00407A49                 mov     esi, [edx]      ; jumptable 004079B0 case 3
.text:00407A4B                 sub     ecx, 18h
.text:00407A4E                 add     ebx, 5
.text:00407A51                 sub     edx, 14h
.text:00407A54                 jmp     short loc_407A32
.text:00407A56 ; ---------------------------------------------------------------------------
.text:00407A56
.text:00407A56 loc_407A56:                             ; CODE XREF: sub_407990+20↑j
.text:00407A56                                         ; DATA XREF: sub_407990:jpt_4079B0↑o
.text:00407A56                 mov     eax, [edx]      ; jumptable 004079B0 case 4
.text:00407A58                 sub     ecx, 14h
.text:00407A5B                 add     ebx, 4
.text:00407A5E                 sub     edx, 10h
.text:00407A61                 jmp     short loc_407A2C
.text:00407A63 ; ---------------------------------------------------------------------------
.text:00407A63
.text:00407A63 loc_407A63:                             ; CODE XREF: sub_407990+20↑j
.text:00407A63                                         ; DATA XREF: sub_407990:jpt_4079B0↑o
.text:00407A63                 mov     esi, [edx]      ; jumptable 004079B0 case 5
.text:00407A65                 sub     ecx, 10h
.text:00407A68                 add     ebx, 3
.text:00407A6B                 sub     edx, 0Ch
.text:00407A6E                 jmp     short loc_407A26
.text:00407A70 ; ---------------------------------------------------------------------------
.text:00407A70
.text:00407A70 loc_407A70:                             ; CODE XREF: sub_407990+20↑j
.text:00407A70                                         ; DATA XREF: sub_407990:jpt_4079B0↑o
.text:00407A70                 mov     eax, [edx]      ; jumptable 004079B0 case 6
.text:00407A72                 sub     ecx, 0Ch
.text:00407A75                 add     ebx, 2
.text:00407A78                 sub     edx, 8
.text:00407A7B                 jmp     short loc_407A20
.text:00407A7D ; ---------------------------------------------------------------------------
.text:00407A7D
.text:00407A7D loc_407A7D:                             ; CODE XREF: sub_407990+20↑j
.text:00407A7D                                         ; DATA XREF: sub_407990:jpt_4079B0↑o
.text:00407A7D                 mov     esi, [edx]      ; jumptable 004079B0 case 7
.text:00407A7F                 sub     ecx, 8
.text:00407A82                 inc     ebx
.text:00407A83                 sub     edx, 4
.text:00407A86                 jmp     short loc_407A1A
.text:00407A86 sub_407990      endp
.text:00407A86
.text:00407A86 ; ---------------------------------------------------------------------------
.text:00407A88                 align 10h
.text:00407A90
.text:00407A90 ; =============== S U B R O U T I N E =======================================
.text:00407A90
.text:00407A90
.text:00407A90 sub_407A90      proc near               ; CODE XREF: sub_407380+93↑p
.text:00407A90
.text:00407A90 var_1C          = dword ptr -1Ch
.text:00407A90 var_18          = dword ptr -18h
.text:00407A90 var_14          = dword ptr -14h
.text:00407A90 arg_0           = dword ptr  4
.text:00407A90 arg_4           = dword ptr  8
.text:00407A90 arg_8           = dword ptr  0Ch
.text:00407A90
.text:00407A90                 push    ebp
.text:00407A91                 push    edi
.text:00407A92                 push    esi
.text:00407A93                 push    ebx
.text:00407A94                 sub     esp, 0Ch
.text:00407A97                 mov     edx, [esp+1Ch+arg_4]
.text:00407A9B                 mov     [esp+1Ch+var_14], 20h ; ' '
.text:00407AA3                 mov     eax, [esp+1Ch+arg_8]
.text:00407AA7                 mov     esi, [esp+1Ch+arg_0]
.text:00407AAB                 mov     ecx, edx
.text:00407AAD                 and     ecx, 3
.text:00407AB0                 and     eax, 3
.text:00407AB3                 shl     ecx, 3
.text:00407AB6                 and     edx, 0FFFFFFFCh
.text:00407AB9                 sub     [esp+1Ch+var_14], ecx
.text:00407ABD                 cmp     eax, 1
.text:00407AC0                 mov     [esp+1Ch+var_18], ecx
.text:00407AC4                 jz      loc_407BB0
.text:00407ACA                 cmp     eax, 1
.text:00407ACD                 jb      loc_407BA0
.text:00407AD3                 cmp     eax, 2
.text:00407AD6                 jz      loc_407B84
.text:00407ADC                 cmp     eax, 3
.text:00407ADF                 jz      loc_407B73
.text:00407AE5
.text:00407AE5 loc_407AE5:                             ; CODE XREF: sub_407A90+C7↓j
.text:00407AE5                                         ; sub_407A90+12C↓j
.text:00407AE5                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00407AEA                 mov     eax, edi
.text:00407AEC                 mov     ebx, [edx]
.text:00407AEE                 shr     ebp, cl
.text:00407AF0                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00407AF5                 shl     eax, cl
.text:00407AF7                 or      ebp, eax
.text:00407AF9                 mov     [esi], ebp
.text:00407AFB
.text:00407AFB loc_407AFB:                             ; CODE XREF: sub_407A90+11B↓j
.text:00407AFB                 mov     ecx, [edx+4]
.text:00407AFE                 mov     ebp, ebx
.text:00407B00                 mov     [esp+1Ch+var_1C], ecx
.text:00407B03                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00407B08                 shr     edi, cl
.text:00407B0A                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00407B0F                 shl     ebp, cl
.text:00407B11                 or      edi, ebp
.text:00407B13                 mov     [esi+4], edi
.text:00407B16
.text:00407B16 loc_407B16:                             ; CODE XREF: sub_407A90+F2↓j
.text:00407B16                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00407B1B                 mov     edi, [esp+1Ch+var_1C]
.text:00407B1E                 mov     ebp, [edx+8]
.text:00407B21                 shr     ebx, cl
.text:00407B23                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00407B28                 shl     edi, cl
.text:00407B2A                 or      ebx, edi
.text:00407B2C                 mov     [esi+8], ebx
.text:00407B2F
.text:00407B2F loc_407B2F:                             ; CODE XREF: sub_407A90+107↓j
.text:00407B2F                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00407B34                 mov     ebx, ebp
.text:00407B36                 mov     edi, [edx+0Ch]
.text:00407B39                 add     edx, 10h
.text:00407B3C                 shr     [esp+1Ch+var_1C], cl
.text:00407B3F                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00407B44                 shl     ebx, cl
.text:00407B46                 or      [esp+1Ch+var_1C], ebx
.text:00407B49                 mov     ebx, [esp+1Ch+var_1C]
.text:00407B4C                 mov     [esi+0Ch], ebx
.text:00407B4F                 add     esi, 10h
.text:00407B52                 sub     [esp+1Ch+arg_8], 4
.text:00407B57                 jnz     short loc_407AE5
.text:00407B59                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00407B5E                 shr     ebp, cl
.text:00407B60                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00407B65                 shl     edi, cl
.text:00407B67                 or      ebp, edi
.text:00407B69                 mov     [esi], ebp
.text:00407B6B                 add     esp, 0Ch
.text:00407B6E                 pop     ebx
.text:00407B6F                 pop     esi
.text:00407B70                 pop     edi
.text:00407B71                 pop     ebp
.text:00407B72                 retn
.text:00407B73 ; ---------------------------------------------------------------------------
.text:00407B73
.text:00407B73 loc_407B73:                             ; CODE XREF: sub_407A90+4F↑j
.text:00407B73                 inc     [esp+1Ch+arg_8]
.text:00407B77                 sub     esi, 8
.text:00407B7A                 mov     eax, [edx+4]
.text:00407B7D                 mov     ebx, [edx]
.text:00407B7F                 mov     [esp+1Ch+var_1C], eax
.text:00407B82                 jmp     short loc_407B16
.text:00407B84 ; ---------------------------------------------------------------------------
.text:00407B84
.text:00407B84 loc_407B84:                             ; CODE XREF: sub_407A90+46↑j
.text:00407B84                 add     [esp+1Ch+arg_8], 2
.text:00407B89                 sub     esi, 0Ch
.text:00407B8C                 mov     ecx, [edx]
.text:00407B8E                 mov     ebp, [edx+4]
.text:00407B91                 sub     edx, 4
.text:00407B94                 mov     [esp+1Ch+var_1C], ecx
.text:00407B97                 jmp     short loc_407B2F
.text:00407B97 ; ---------------------------------------------------------------------------
.text:00407B99                 align 10h
.text:00407BA0
.text:00407BA0 loc_407BA0:                             ; CODE XREF: sub_407A90+3D↑j
.text:00407BA0                 mov     edi, [edx]
.text:00407BA2                 sub     esi, 4
.text:00407BA5                 mov     ebx, [edx+4]
.text:00407BA8                 add     edx, 4
.text:00407BAB                 jmp     loc_407AFB
.text:00407BB0 ; ---------------------------------------------------------------------------
.text:00407BB0
.text:00407BB0 loc_407BB0:                             ; CODE XREF: sub_407A90+34↑j
.text:00407BB0                 dec     [esp+1Ch+arg_8]
.text:00407BB4                 mov     ebp, [edx]
.text:00407BB6                 mov     edi, [edx+4]
.text:00407BB9                 add     edx, 8
.text:00407BBC                 jmp     loc_407AE5
.text:00407BBC sub_407A90      endp
.text:00407BBC
.text:00407BC1 ; ---------------------------------------------------------------------------
.text:00407BC1                 jmp     short loc_407BD0
.text:00407BC1 ; ---------------------------------------------------------------------------
.text:00407BC3                 align 10h
.text:00407BD0
.text:00407BD0 loc_407BD0:                             ; CODE XREF: .text:00407BC1↑j
.text:00407BD0                 sub     esp, 8
.text:00407BD3                 mov     ecx, [esp+0Ch]
.text:00407BD7                 mov     [esp+4], esi
.text:00407BDB                 mov     esi, [esp+14h]
.text:00407BDF                 mov     [esp], ebx
.text:00407BE2                 mov     edx, [esp+10h]
.text:00407BE6                 mov     eax, esi
.text:00407BE8                 and     eax, 7
.text:00407BEB                 cmp     eax, 7          ; switch 8 cases
.text:00407BEE                 ja      short def_407BF0 ; jumptable 00407BF0 default case
.text:00407BF0                 jmp     ds:jpt_407BF0[eax*4] ; switch jump
.text:00407BF0 ; ---------------------------------------------------------------------------
.text:00407BF7                 align 4
.text:00407BF8 jpt_407BF0      dd offset loc_407C7C    ; DATA XREF: .text:00407BF0↑r
.text:00407BF8                 dd offset loc_407C87    ; jump table for switch statement
.text:00407BF8                 dd offset loc_407C18
.text:00407BF8                 dd offset loc_407C93
.text:00407BF8                 dd offset loc_407CA1
.text:00407BF8                 dd offset loc_407CAF
.text:00407BF8                 dd offset loc_407CBD
.text:00407BF8                 dd offset loc_407CCB
.text:00407C18 ; ---------------------------------------------------------------------------
.text:00407C18
.text:00407C18 loc_407C18:                             ; CODE XREF: .text:00407BF0↑j
.text:00407C18                                         ; DATA XREF: .text:jpt_407BF0↑o
.text:00407C18                 sub     edx, 8          ; jumptable 00407BF0 case 2
.text:00407C1B                 sub     ecx, 4
.text:00407C1E                 mov     eax, [edx+4]
.text:00407C21                 add     esi, 6
.text:00407C24                 lea     esi, [esi+0]
.text:00407C2A                 lea     edi, [edi+0]
.text:00407C30
.text:00407C30 loc_407C30:                             ; CODE XREF: .text:00407C7A↓j
.text:00407C30                 mov     ebx, [edx]
.text:00407C32                 sub     edx, 20h ; ' '
.text:00407C35                 mov     [ecx], eax
.text:00407C37                 sub     ecx, 20h ; ' '
.text:00407C3A                 sub     esi, 8
.text:00407C3D                 jnz     short def_407BF0 ; jumptable 00407BF0 default case
.text:00407C3F                 mov     [ecx+1Ch], ebx
.text:00407C42                 mov     ebx, [esp]
.text:00407C45                 mov     esi, [esp+4]
.text:00407C49                 add     esp, 8
.text:00407C4C                 retn
.text:00407C4C ; ---------------------------------------------------------------------------
.text:00407C4D                 align 10h
.text:00407C50
.text:00407C50 def_407BF0:                             ; CODE XREF: .text:00407BEE↑j
.text:00407C50                                         ; .text:00407C3D↑j ...
.text:00407C50                 mov     eax, [edx+1Ch]  ; jumptable 00407BF0 default case
.text:00407C53                 mov     [ecx+1Ch], ebx
.text:00407C56
.text:00407C56 loc_407C56:                             ; CODE XREF: .text:00407C85↓j
.text:00407C56                 mov     ebx, [edx+18h]
.text:00407C59                 mov     [ecx+18h], eax
.text:00407C5C
.text:00407C5C loc_407C5C:                             ; CODE XREF: .text:00407CD5↓j
.text:00407C5C                 mov     eax, [edx+14h]
.text:00407C5F                 mov     [ecx+14h], ebx
.text:00407C62
.text:00407C62 loc_407C62:                             ; CODE XREF: .text:00407CC9↓j
.text:00407C62                 mov     ebx, [edx+10h]
.text:00407C65                 mov     [ecx+10h], eax
.text:00407C68
.text:00407C68 loc_407C68:                             ; CODE XREF: .text:00407CBB↓j
.text:00407C68                 mov     eax, [edx+0Ch]
.text:00407C6B                 mov     [ecx+0Ch], ebx
.text:00407C6E
.text:00407C6E loc_407C6E:                             ; CODE XREF: .text:00407CAD↓j
.text:00407C6E                 mov     ebx, [edx+8]
.text:00407C71                 mov     [ecx+8], eax
.text:00407C74
.text:00407C74 loc_407C74:                             ; CODE XREF: .text:00407C9F↓j
.text:00407C74                 mov     eax, [edx+4]
.text:00407C77                 mov     [ecx+4], ebx
.text:00407C7A                 jmp     short loc_407C30
.text:00407C7C ; ---------------------------------------------------------------------------
.text:00407C7C
.text:00407C7C loc_407C7C:                             ; CODE XREF: .text:00407BF0↑j
.text:00407C7C                                         ; DATA XREF: .text:jpt_407BF0↑o
.text:00407C7C                 sub     edx, 20h ; ' '  ; jumptable 00407BF0 case 0
.text:00407C7F                 sub     ecx, 1Ch
.text:00407C82                 mov     eax, [edx+1Ch]
.text:00407C85                 jmp     short loc_407C56
.text:00407C87 ; ---------------------------------------------------------------------------
.text:00407C87
.text:00407C87 loc_407C87:                             ; CODE XREF: .text:00407BF0↑j
.text:00407C87                                         ; DATA XREF: .text:jpt_407BF0↑o
.text:00407C87                 sub     edx, 24h ; '$'  ; jumptable 00407BF0 case 1
.text:00407C8A                 sub     ecx, 20h ; ' '
.text:00407C8D                 mov     ebx, [edx+20h]
.text:00407C90                 dec     esi
.text:00407C91                 jmp     short def_407BF0 ; jumptable 00407BF0 default case
.text:00407C93 ; ---------------------------------------------------------------------------
.text:00407C93
.text:00407C93 loc_407C93:                             ; CODE XREF: .text:00407BF0↑j
.text:00407C93                                         ; DATA XREF: .text:jpt_407BF0↑o
.text:00407C93                 sub     edx, 0Ch        ; jumptable 00407BF0 case 3
.text:00407C96                 sub     ecx, 8
.text:00407C99                 mov     ebx, [edx+8]
.text:00407C9C                 add     esi, 5
.text:00407C9F                 jmp     short loc_407C74
.text:00407CA1 ; ---------------------------------------------------------------------------
.text:00407CA1
.text:00407CA1 loc_407CA1:                             ; CODE XREF: .text:00407BF0↑j
.text:00407CA1                                         ; DATA XREF: .text:jpt_407BF0↑o
.text:00407CA1                 sub     edx, 10h        ; jumptable 00407BF0 case 4
.text:00407CA4                 sub     ecx, 0Ch
.text:00407CA7                 mov     eax, [edx+0Ch]
.text:00407CAA                 add     esi, 4
.text:00407CAD                 jmp     short loc_407C6E
.text:00407CAF ; ---------------------------------------------------------------------------
.text:00407CAF
.text:00407CAF loc_407CAF:                             ; CODE XREF: .text:00407BF0↑j
.text:00407CAF                                         ; DATA XREF: .text:jpt_407BF0↑o
.text:00407CAF                 sub     edx, 14h        ; jumptable 00407BF0 case 5
.text:00407CB2                 sub     ecx, 10h
.text:00407CB5                 mov     ebx, [edx+10h]
.text:00407CB8                 add     esi, 3
.text:00407CBB                 jmp     short loc_407C68
.text:00407CBD ; ---------------------------------------------------------------------------
.text:00407CBD
.text:00407CBD loc_407CBD:                             ; CODE XREF: .text:00407BF0↑j
.text:00407CBD                                         ; DATA XREF: .text:jpt_407BF0↑o
.text:00407CBD                 sub     edx, 18h        ; jumptable 00407BF0 case 6
.text:00407CC0                 sub     ecx, 14h
.text:00407CC3                 mov     eax, [edx+14h]
.text:00407CC6                 add     esi, 2
.text:00407CC9                 jmp     short loc_407C62
.text:00407CCB ; ---------------------------------------------------------------------------
.text:00407CCB
.text:00407CCB loc_407CCB:                             ; CODE XREF: .text:00407BF0↑j
.text:00407CCB                                         ; DATA XREF: .text:jpt_407BF0↑o
.text:00407CCB                 sub     edx, 1Ch        ; jumptable 00407BF0 case 7
.text:00407CCE                 sub     ecx, 18h
.text:00407CD1                 mov     ebx, [edx+18h]
.text:00407CD4                 inc     esi
.text:00407CD5                 jmp     short loc_407C5C
.text:00407CD5 ; ---------------------------------------------------------------------------
.text:00407CD7                 align 10h
.text:00407CE0                 push    ebp
.text:00407CE1                 push    edi
.text:00407CE2                 push    esi
.text:00407CE3                 push    ebx
.text:00407CE4                 sub     esp, 8
.text:00407CE7                 mov     edx, [esp+20h]
.text:00407CEB                 mov     dword ptr [esp+4], 20h ; ' '
.text:00407CF3                 mov     eax, [esp+24h]
.text:00407CF7                 mov     ecx, edx
.text:00407CF9                 and     ecx, 3
.text:00407CFC                 and     eax, 3
.text:00407CFF                 shl     ecx, 3
.text:00407D02                 sub     [esp+4], ecx
.text:00407D06                 and     edx, 0FFFFFFFCh
.text:00407D09                 add     edx, 4
.text:00407D0C                 mov     [esp], ecx
.text:00407D0F                 cmp     eax, 1
.text:00407D12                 jz      loc_407E08
.text:00407D18                 cmp     eax, 1
.text:00407D1B                 jb      loc_407DF5
.text:00407D21                 cmp     eax, 2
.text:00407D24                 jz      loc_407DE0
.text:00407D2A                 cmp     eax, 3
.text:00407D2D                 jz      loc_407DCC
.text:00407D33
.text:00407D33 loc_407D33:                             ; CODE XREF: .text:00407DAC↓j
.text:00407D33                                         ; .text:00407E1A↓j
.text:00407D33                 movzx   ecx, byte ptr [esp]
.text:00407D37                 mov     eax, edi
.text:00407D39                 mov     ebx, [esp+1Ch]
.text:00407D3D                 mov     esi, [edx+0Ch]
.text:00407D40                 shr     eax, cl
.text:00407D42                 movzx   ecx, byte ptr [esp+4]
.text:00407D47                 shl     ebp, cl
.text:00407D49                 or      eax, ebp
.text:00407D4B                 mov     [ebx+0Ch], eax
.text:00407D4E
.text:00407D4E loc_407D4E:                             ; CODE XREF: .text:00407E03↓j
.text:00407D4E                 movzx   ecx, byte ptr [esp]
.text:00407D52                 mov     ebp, esi
.text:00407D54                 mov     ebx, [edx+8]
.text:00407D57                 shr     ebp, cl
.text:00407D59                 movzx   ecx, byte ptr [esp+4]
.text:00407D5E                 shl     edi, cl
.text:00407D60                 or      ebp, edi
.text:00407D62                 mov     edi, [esp+1Ch]
.text:00407D66                 mov     [edi+8], ebp
.text:00407D69
.text:00407D69 loc_407D69:                             ; CODE XREF: .text:00407DDE↓j
.text:00407D69                 movzx   ecx, byte ptr [esp]
.text:00407D6D                 mov     edi, ebx
.text:00407D6F                 mov     ebp, [edx+4]
.text:00407D72                 shr     edi, cl
.text:00407D74                 movzx   ecx, byte ptr [esp+4]
.text:00407D79                 shl     esi, cl
.text:00407D7B                 or      edi, esi
.text:00407D7D                 mov     esi, [esp+1Ch]
.text:00407D81                 mov     [esi+4], edi
.text:00407D84
.text:00407D84 loc_407D84:                             ; CODE XREF: .text:00407DF3↓j
.text:00407D84                 movzx   ecx, byte ptr [esp]
.text:00407D88                 mov     esi, ebp
.text:00407D8A                 mov     edi, [edx]
.text:00407D8C                 sub     edx, 10h
.text:00407D8F                 shr     esi, cl
.text:00407D91                 movzx   ecx, byte ptr [esp+4]
.text:00407D96                 shl     ebx, cl
.text:00407D98                 or      esi, ebx
.text:00407D9A                 mov     ebx, [esp+1Ch]
.text:00407D9E                 mov     [ebx], esi
.text:00407DA0                 sub     ebx, 10h
.text:00407DA3                 sub     dword ptr [esp+24h], 4
.text:00407DA8                 mov     [esp+1Ch], ebx
.text:00407DAC                 jnz     short loc_407D33
.text:00407DAE                 movzx   ecx, byte ptr [esp]
.text:00407DB2                 mov     edx, [esp+1Ch]
.text:00407DB6                 shr     edi, cl
.text:00407DB8                 movzx   ecx, byte ptr [esp+4]
.text:00407DBD                 shl     ebp, cl
.text:00407DBF                 or      edi, ebp
.text:00407DC1                 mov     [edx+0Ch], edi
.text:00407DC4                 add     esp, 8
.text:00407DC7                 pop     ebx
.text:00407DC8                 pop     esi
.text:00407DC9                 pop     edi
.text:00407DCA                 pop     ebp
.text:00407DCB                 retn
.text:00407DCC ; ---------------------------------------------------------------------------
.text:00407DCC
.text:00407DCC loc_407DCC:                             ; CODE XREF: .text:00407D2D↑j
.text:00407DCC                 sub     dword ptr [esp+1Ch], 8
.text:00407DD1                 sub     edx, 10h
.text:00407DD4                 inc     dword ptr [esp+24h]
.text:00407DD8                 mov     esi, [edx+0Ch]
.text:00407DDB                 mov     ebx, [edx+8]
.text:00407DDE                 jmp     short loc_407D69
.text:00407DE0 ; ---------------------------------------------------------------------------
.text:00407DE0
.text:00407DE0 loc_407DE0:                             ; CODE XREF: .text:00407D24↑j
.text:00407DE0                 sub     dword ptr [esp+1Ch], 4
.text:00407DE5                 sub     edx, 0Ch
.text:00407DE8                 add     dword ptr [esp+24h], 2
.text:00407DED                 mov     ebx, [edx+8]
.text:00407DF0                 mov     ebp, [edx+4]
.text:00407DF3                 jmp     short loc_407D84
.text:00407DF5 ; ---------------------------------------------------------------------------
.text:00407DF5
.text:00407DF5 loc_407DF5:                             ; CODE XREF: .text:00407D1B↑j
.text:00407DF5                 sub     dword ptr [esp+1Ch], 0Ch
.text:00407DFA                 sub     edx, 14h
.text:00407DFD                 mov     edi, [edx+10h]
.text:00407E00                 mov     esi, [edx+0Ch]
.text:00407E03                 jmp     loc_407D4E
.text:00407E08 ; ---------------------------------------------------------------------------
.text:00407E08
.text:00407E08 loc_407E08:                             ; CODE XREF: .text:00407D12↑j
.text:00407E08                 sub     dword ptr [esp+1Ch], 10h
.text:00407E0D                 sub     edx, 18h
.text:00407E10                 dec     dword ptr [esp+24h]
.text:00407E14                 mov     ebp, [edx+14h]
.text:00407E17                 mov     edi, [edx+10h]
.text:00407E1A                 jmp     loc_407D33
.text:00407E1A ; ---------------------------------------------------------------------------
.text:00407E1F                 align 10h
.text:00407E20
.text:00407E20 ; =============== S U B R O U T I N E =======================================
.text:00407E20
.text:00407E20 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:00407E20
.text:00407E20 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:00407E20 _win32_longpath proc near               ; CODE XREF: .text:004085E4↓p
.text:00407E20
.text:00407E20 C               = dword ptr -278h
.text:00407E20 lpFindFileData  = dword ptr -274h
.text:00407E20 Destination     = byte ptr -268h
.text:00407E20 var_267         = byte ptr -267h
.text:00407E20 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:00407E20 lpFileName      = dword ptr  8
.text:00407E20
.text:00407E20                 push    ebp
.text:00407E21                 xor     eax, eax
.text:00407E23                 push    edi
.text:00407E24                 push    esi
.text:00407E25                 push    ebx
.text:00407E26                 sub     esp, 26Ch
.text:00407E2C                 mov     esi, [esp+278h+lpFileName]
.text:00407E33                 lea     ebp, [esp+278h+Destination]
.text:00407E37                 test    esi, esi
.text:00407E39                 jz      loc_407F97
.text:00407E3F                 movsx   edx, byte ptr [esi]
.text:00407E42                 mov     [esp+278h+C], edx ; C
.text:00407E45                 call    isalpha
.text:00407E4A                 test    eax, eax
.text:00407E4C                 jz      short loc_407E5F
.text:00407E4E                 mov     eax, [esp+278h+lpFileName]
.text:00407E55                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:00407E59                 jz      loc_40819B
.text:00407E5F
.text:00407E5F loc_407E5F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:00407E5F                 mov     edx, [esp+278h+lpFileName]
.text:00407E66                 movzx   eax, byte ptr [edx]
.text:00407E69                 cmp     al, 2Fh ; '/'
.text:00407E6B                 jz      loc_40807B
.text:00407E71                 cmp     al, 5Ch ; '\'
.text:00407E73                 jz      loc_40807B
.text:00407E79
.text:00407E79 loc_407E79:                             ; CODE XREF: _win32_longpath+26E↓j
.text:00407E79                                         ; _win32_longpath+2B1↓j ...
.text:00407E79                 mov     [ebp+268h+Destination], 0
.text:00407E7D                 movzx   ebx, byte ptr [esi]
.text:00407E80                 test    bl, bl
.text:00407E82                 jz      loc_407F79
.text:00407E88                 nop
.text:00407E89                 lea     esi, [esi+0]
.text:00407E90
.text:00407E90 loc_407E90:                             ; CODE XREF: _win32_longpath+153↓j
.text:00407E90                 cmp     bl, 2Fh ; '/'
.text:00407E93                 jz      loc_408030
.text:00407E99                 cmp     bl, 5Ch ; '\'
.text:00407E9C                 jz      loc_408030
.text:00407EA2
.text:00407EA2 loc_407EA2:                             ; CODE XREF: _win32_longpath+21E↓j
.text:00407EA2                                         ; _win32_longpath+22C↓j ...
.text:00407EA2                 cmp     bl, 2Eh ; '.'
.text:00407EA5                 jz      loc_407FD0
.text:00407EAB
.text:00407EAB loc_407EAB:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:00407EAB                                         ; _win32_longpath+203↓j
.text:00407EAB                 test    bl, bl
.text:00407EAD                 jz      loc_407F79
.text:00407EB3                 cmp     bl, 2Fh ; '/'
.text:00407EB6                 jz      short loc_407ED2
.text:00407EB8                 cmp     bl, 5Ch ; '\'
.text:00407EBB                 jz      short loc_407ED2
.text:00407EBD                 lea     esi, [esi+0]
.text:00407EC0
.text:00407EC0 loc_407EC0:                             ; CODE XREF: _win32_longpath+B0↓j
.text:00407EC0                 inc     esi
.text:00407EC1                 movzx   ebx, byte ptr [esi]
.text:00407EC4                 test    bl, bl
.text:00407EC6                 jz      short loc_407ED2
.text:00407EC8                 cmp     bl, 2Fh ; '/'
.text:00407ECB                 jz      short loc_407ED2
.text:00407ECD                 cmp     bl, 5Ch ; '\'
.text:00407ED0                 jnz     short loc_407EC0
.text:00407ED2
.text:00407ED2 loc_407ED2:                             ; CODE XREF: _win32_longpath+96↑j
.text:00407ED2                                         ; _win32_longpath+9B↑j ...
.text:00407ED2                 mov     byte ptr [esi], 0
.text:00407ED5                 lea     edx, [esp+278h+FindFileData]
.text:00407EDC                 mov     eax, [esp+278h+lpFileName]
.text:00407EE3                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:00407EE7                 mov     [esp+278h+C], eax ; lpFileName
.text:00407EEA                 call    FindFirstFileA
.text:00407EEF                 mov     [esi], bl
.text:00407EF1                 sub     esp, 8
.text:00407EF4                 mov     edi, eax
.text:00407EF6                 cmp     eax, 0FFFFFFFFh
.text:00407EF9                 jz      loc_407FBC
.text:00407EFF                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:00407F06                 mov     ecx, ebx
.text:00407F08                 nop
.text:00407F09                 lea     esi, [esi+0]
.text:00407F10
.text:00407F10 loc_407F10:                             ; CODE XREF: _win32_longpath+105↓j
.text:00407F10                 mov     eax, [ebx]
.text:00407F12                 add     ebx, 4
.text:00407F15                 lea     edx, [eax-1010101h]
.text:00407F1B                 not     eax
.text:00407F1D                 and     edx, eax
.text:00407F1F                 and     edx, 80808080h
.text:00407F25                 jz      short loc_407F10
.text:00407F27                 test    edx, 8080h
.text:00407F2D                 jnz     short loc_407F35
.text:00407F2F                 shr     edx, 10h
.text:00407F32                 add     ebx, 2
.text:00407F35
.text:00407F35 loc_407F35:                             ; CODE XREF: _win32_longpath+10D↑j
.text:00407F35                 add     dl, dl
.text:00407F37                 sbb     ebx, 3
.text:00407F3A                 sub     ebx, ecx
.text:00407F3C                 lea     ecx, [esp+278h+Destination]
.text:00407F40                 sub     ecx, ebp
.text:00407F42                 add     ecx, 105h
.text:00407F48                 cmp     ecx, ebx
.text:00407F4A                 jle     short loc_407FA2
.text:00407F4C                 mov     [esp+278h+C], ebp ; Destination
.text:00407F4F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:00407F56                 add     ebp, ebx
.text:00407F58                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:00407F5C                 call    strcpy
.text:00407F61                 mov     [esp+278h+C], edi ; hFindFile
.text:00407F64                 call    FindClose
.text:00407F69                 sub     esp, 4
.text:00407F6C
.text:00407F6C loc_407F6C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:00407F6C                 movzx   ecx, byte ptr [esi]
.text:00407F6F                 test    cl, cl
.text:00407F71                 mov     bl, cl
.text:00407F73                 jnz     loc_407E90
.text:00407F79
.text:00407F79 loc_407F79:                             ; CODE XREF: _win32_longpath+62↑j
.text:00407F79                                         ; _win32_longpath+8D↑j
.text:00407F79                 mov     esi, [esp+278h+lpFileName]
.text:00407F80                 lea     ebp, [esp+278h+Destination]
.text:00407F84                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:00407F88                 mov     [esp+278h+C], esi ; Destination
.text:00407F8B                 call    strcpy
.text:00407F90                 mov     eax, [esp+278h+lpFileName]
.text:00407F97
.text:00407F97 loc_407F97:                             ; CODE XREF: _win32_longpath+19↑j
.text:00407F97                                         ; _win32_longpath+19A↓j
.text:00407F97                 add     esp, 26Ch
.text:00407F9D                 pop     ebx
.text:00407F9E                 pop     esi
.text:00407F9F                 pop     edi
.text:00407FA0                 pop     ebp
.text:00407FA1                 retn
.text:00407FA2 ; ---------------------------------------------------------------------------
.text:00407FA2
.text:00407FA2 loc_407FA2:                             ; CODE XREF: _win32_longpath+12A↑j
.text:00407FA2                 mov     [esp+278h+C], edi ; hFindFile
.text:00407FA5                 call    FindClose
.text:00407FAA                 sub     esp, 4
.text:00407FAD                 call    _errno
.text:00407FB2                 mov     dword ptr [eax], 22h ; '"'
.text:00407FB8
.text:00407FB8 loc_407FB8:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:00407FB8                 xor     eax, eax
.text:00407FBA                 jmp     short loc_407F97
.text:00407FBC ; ---------------------------------------------------------------------------
.text:00407FBC
.text:00407FBC loc_407FBC:                             ; CODE XREF: _win32_longpath+D9↑j
.text:00407FBC                 call    _errno
.text:00407FC1                 mov     dword ptr [eax], 16h
.text:00407FC7                 jmp     short loc_407FB8
.text:00407FC7 ; ---------------------------------------------------------------------------
.text:00407FC9                 align 10h
.text:00407FD0
.text:00407FD0 loc_407FD0:                             ; CODE XREF: _win32_longpath+85↑j
.text:00407FD0                 movzx   eax, byte ptr [esi+1]
.text:00407FD4                 test    al, al
.text:00407FD6                 jnz     short loc_408005
.text:00407FD8
.text:00407FD8 loc_407FD8:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:00407FD8                                         ; _win32_longpath+1EB↓j ...
.text:00407FD8                 test    bl, bl
.text:00407FDA                 jz      short loc_407FFC
.text:00407FDC                 cmp     bl, 2Fh ; '/'
.text:00407FDF                 jz      short loc_407FFC
.text:00407FE1                 cmp     bl, 5Ch ; '\'
.text:00407FE4                 jz      short loc_407FFC
.text:00407FE6
.text:00407FE6 loc_407FE6:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:00407FE6                 mov     [ebp+268h+Destination], bl
.text:00407FE9                 inc     esi
.text:00407FEA                 inc     ebp
.text:00407FEB                 movzx   ebx, byte ptr [esi]
.text:00407FEE                 test    bl, bl
.text:00407FF0                 jz      short loc_407FFC
.text:00407FF2                 cmp     bl, 2Fh ; '/'
.text:00407FF5                 jz      short loc_407FFC
.text:00407FF7                 cmp     bl, 5Ch ; '\'
.text:00407FFA                 jnz     short loc_407FE6
.text:00407FFC
.text:00407FFC loc_407FFC:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:00407FFC                                         ; _win32_longpath+1BF↑j ...
.text:00407FFC                 mov     [ebp+268h+Destination], 0
.text:00408000                 jmp     loc_407F6C
.text:00408005 ; ---------------------------------------------------------------------------
.text:00408005
.text:00408005 loc_408005:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:00408005                 cmp     al, 2Fh ; '/'
.text:00408007                 jz      short loc_407FD8
.text:00408009                 cmp     al, 5Ch ; '\'
.text:0040800B                 jz      short loc_407FD8
.text:0040800D                 cmp     al, 2Eh ; '.'
.text:0040800F                 jnz     loc_407EAB
.text:00408015                 movzx   eax, byte ptr [esi+2]
.text:00408019                 test    al, al
.text:0040801B                 jz      short loc_407FD8
.text:0040801D                 cmp     al, 2Fh ; '/'
.text:0040801F                 jz      short loc_407FD8
.text:00408021                 cmp     al, 5Ch ; '\'
.text:00408023                 jnz     loc_407EAB
.text:00408029                 jmp     short loc_407FD8
.text:00408029 ; ---------------------------------------------------------------------------
.text:0040802B                 align 10h
.text:00408030
.text:00408030 loc_408030:                             ; CODE XREF: _win32_longpath+73↑j
.text:00408030                                         ; _win32_longpath+7C↑j
.text:00408030                 mov     [ebp+268h+Destination], bl
.text:00408033                 inc     esi
.text:00408034                 inc     ebp
.text:00408035                 mov     [ebp+268h+Destination], 0
.text:00408039                 movzx   ebx, byte ptr [esi]
.text:0040803C                 test    bl, bl
.text:0040803E                 jz      loc_407EA2
.text:00408044                 cmp     bl, 2Fh ; '/'
.text:00408047                 jz      short loc_408060
.text:00408049                 cmp     bl, 5Ch ; '\'
.text:0040804C                 jnz     loc_407EA2
.text:00408052                 lea     esi, [esi+0]
.text:00408059                 lea     edi, [edi+0]
.text:00408060
.text:00408060 loc_408060:                             ; CODE XREF: _win32_longpath+227↑j
.text:00408060                                         ; _win32_longpath+24F↓j ...
.text:00408060                 inc     esi
.text:00408061                 movzx   ebx, byte ptr [esi]
.text:00408064                 test    bl, bl
.text:00408066                 jz      loc_407EA2
.text:0040806C                 cmp     bl, 2Fh ; '/'
.text:0040806F                 jz      short loc_408060
.text:00408071                 cmp     bl, 5Ch ; '\'
.text:00408074                 jz      short loc_408060
.text:00408076                 jmp     loc_407EA2
.text:0040807B ; ---------------------------------------------------------------------------
.text:0040807B
.text:0040807B loc_40807B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040807B                                         ; _win32_longpath+53↑j
.text:0040807B                 mov     edi, [esp+278h+lpFileName]
.text:00408082                 movzx   edx, byte ptr [edi+1]
.text:00408086                 cmp     dl, 2Fh ; '/'
.text:00408089                 jz      short loc_408094
.text:0040808B                 cmp     dl, 5Ch ; '\'
.text:0040808E                 jnz     loc_407E79
.text:00408094
.text:00408094 loc_408094:                             ; CODE XREF: _win32_longpath+269↑j
.text:00408094                 mov     esi, [esp+278h+lpFileName]
.text:0040809B                 mov     [ebp+268h+Destination], al
.text:0040809E                 mov     ecx, [esp+278h+lpFileName]
.text:004080A5                 inc     ebp
.text:004080A6                 add     esi, 2
.text:004080A9                 movzx   ebx, byte ptr [ecx+1]
.text:004080AD                 mov     [ebp+268h+Destination], bl
.text:004080B0                 inc     ebp
.text:004080B1                 movzx   eax, byte ptr [ecx+2]
.text:004080B5                 test    al, al
.text:004080B7                 jz      loc_408193
.text:004080BD                 cmp     al, 2Fh ; '/'
.text:004080BF                 jz      loc_408178
.text:004080C5                 cmp     al, 5Ch ; '\'
.text:004080C7                 mov     bl, al
.text:004080C9                 jz      loc_408178
.text:004080CF
.text:004080CF loc_4080CF:                             ; CODE XREF: _win32_longpath+36E↓j
.text:004080CF                                         ; _win32_longpath+376↓j
.text:004080CF                 test    bl, bl
.text:004080D1                 jz      loc_407E79
.text:004080D7                 cmp     bl, 2Fh ; '/'
.text:004080DA                 jz      short loc_4080FB
.text:004080DC                 cmp     bl, 5Ch ; '\'
.text:004080DF                 jz      short loc_4080FB
.text:004080E1
.text:004080E1 loc_4080E1:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:004080E1                 mov     [ebp+268h+Destination], bl
.text:004080E4                 inc     esi
.text:004080E5                 inc     ebp
.text:004080E6                 movzx   ebx, byte ptr [esi]
.text:004080E9                 test    bl, bl
.text:004080EB                 jz      loc_407E79
.text:004080F1                 cmp     bl, 2Fh ; '/'
.text:004080F4                 jz      short loc_4080FB
.text:004080F6                 cmp     bl, 5Ch ; '\'
.text:004080F9                 jnz     short loc_4080E1
.text:004080FB
.text:004080FB loc_4080FB:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:004080FB                                         ; _win32_longpath+2BF↑j ...
.text:004080FB                 test    bl, bl
.text:004080FD                 jz      loc_407E79
.text:00408103                 mov     [ebp+268h+Destination], bl
.text:00408106                 inc     esi
.text:00408107                 inc     ebp
.text:00408108                 movzx   ebx, byte ptr [esi]
.text:0040810B                 test    bl, bl
.text:0040810D                 jz      loc_407E79
.text:00408113                 cmp     bl, 2Fh ; '/'
.text:00408116                 jz      short loc_408160
.text:00408118                 cmp     bl, 5Ch ; '\'
.text:0040811B                 jz      short loc_408160
.text:0040811D
.text:0040811D loc_40811D:                             ; CODE XREF: _win32_longpath+356↓j
.text:0040811D                 test    bl, bl
.text:0040811F                 jz      loc_407E79
.text:00408125                 cmp     bl, 2Fh ; '/'
.text:00408128                 jz      loc_407E79
.text:0040812E                 cmp     bl, 5Ch ; '\'
.text:00408131                 jz      loc_407E79
.text:00408137
.text:00408137 loc_408137:                             ; CODE XREF: _win32_longpath+333↓j
.text:00408137                 mov     [ebp+268h+Destination], bl
.text:0040813A                 inc     esi
.text:0040813B                 inc     ebp
.text:0040813C                 movzx   ebx, byte ptr [esi]
.text:0040813F                 test    bl, bl
.text:00408141                 jz      loc_407E79
.text:00408147                 cmp     bl, 2Fh ; '/'
.text:0040814A                 jz      loc_407E79
.text:00408150                 cmp     bl, 5Ch ; '\'
.text:00408153                 jnz     short loc_408137
.text:00408155                 jmp     loc_407E79
.text:00408155 ; ---------------------------------------------------------------------------
.text:0040815A                 align 10h
.text:00408160
.text:00408160 loc_408160:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:00408160                                         ; _win32_longpath+2FB↑j ...
.text:00408160                 inc     esi
.text:00408161                 movzx   ebx, byte ptr [esi]
.text:00408164                 test    bl, bl
.text:00408166                 jz      loc_407E79
.text:0040816C                 cmp     bl, 2Fh ; '/'
.text:0040816F                 jz      short loc_408160
.text:00408171                 cmp     bl, 5Ch ; '\'
.text:00408174                 jz      short loc_408160
.text:00408176                 jmp     short loc_40811D
.text:00408178 ; ---------------------------------------------------------------------------
.text:00408178
.text:00408178 loc_408178:                             ; CODE XREF: _win32_longpath+29F↑j
.text:00408178                                         ; _win32_longpath+2A9↑j ...
.text:00408178                 inc     esi
.text:00408179                 movzx   ebx, byte ptr [esi]
.text:0040817C                 test    bl, bl
.text:0040817E                 jz      loc_407E79
.text:00408184                 cmp     bl, 2Fh ; '/'
.text:00408187                 jz      short loc_408178
.text:00408189                 cmp     bl, 5Ch ; '\'
.text:0040818C                 jz      short loc_408178
.text:0040818E                 jmp     loc_4080CF
.text:00408193 ; ---------------------------------------------------------------------------
.text:00408193
.text:00408193 loc_408193:                             ; CODE XREF: _win32_longpath+297↑j
.text:00408193                 movzx   ebx, byte ptr [esi]
.text:00408196                 jmp     loc_4080CF
.text:0040819B ; ---------------------------------------------------------------------------
.text:0040819B
.text:0040819B loc_40819B:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040819B                 movzx   ecx, byte ptr [eax]
.text:0040819E                 mov     esi, eax
.text:004081A0                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:004081A5                 add     esi, 2
.text:004081A8                 lea     ebp, [esp+12h]
.text:004081AC                 mov     [esp+278h+Destination], cl
.text:004081B0                 jmp     loc_407E79
.text:004081B0 _win32_longpath endp
.text:004081B0
.text:004081B0 ; ---------------------------------------------------------------------------
.text:004081B5                 align 10h
.text:004081C0                 sub     esp, 0Ch
.text:004081C3                 mov     edx, [esp+10h]
.text:004081C7                 mov     dword ptr [esp+4], 0
.text:004081CF                 mov     [esp], edx
.text:004081D2                 call    sub_40AE60
.text:004081D7                 inc     eax
.text:004081D8                 setnz   dl
.text:004081DB                 add     esp, 0Ch
.text:004081DE                 movzx   eax, dl
.text:004081E1                 retn
.text:004081E1 ; ---------------------------------------------------------------------------
.text:004081E2                 align 10h
.text:004081F0
.text:004081F0 ; =============== S U B R O U T I N E =======================================
.text:004081F0
.text:004081F0
.text:004081F0 sub_4081F0      proc near               ; CODE XREF: sub_407860+B4↑p
.text:004081F0                                         ; sub_40AD30+AA↓p
.text:004081F0
.text:004081F0 arg_0           = dword ptr  4
.text:004081F0
.text:004081F0                 mov     ecx, [esp+arg_0]
.text:004081F4                 mov     edx, ecx
.text:004081F6                 movzx   eax, byte ptr [ecx]
.text:004081F9                 test    al, al
.text:004081FB                 jz      short loc_40820C
.text:004081FD                 lea     esi, [esi+0]
.text:00408200
.text:00408200 loc_408200:                             ; CODE XREF: sub_4081F0+1A↓j
.text:00408200                 cmp     al, 5Ch ; '\'
.text:00408202                 jz      short loc_408210
.text:00408204
.text:00408204 loc_408204:                             ; CODE XREF: sub_4081F0+23↓j
.text:00408204                 inc     edx
.text:00408205                 movzx   eax, byte ptr [edx]
.text:00408208                 test    al, al
.text:0040820A                 jnz     short loc_408200
.text:0040820C
.text:0040820C loc_40820C:                             ; CODE XREF: sub_4081F0+B↑j
.text:0040820C                 mov     eax, ecx
.text:0040820E                 retn
.text:0040820E ; ---------------------------------------------------------------------------
.text:0040820F                 align 10h
.text:00408210
.text:00408210 loc_408210:                             ; CODE XREF: sub_4081F0+12↑j
.text:00408210                 mov     byte ptr [edx], 2Fh ; '/'
.text:00408213                 jmp     short loc_408204
.text:00408213 sub_4081F0      endp
.text:00408213
.text:00408213 ; ---------------------------------------------------------------------------
.text:00408215                 align 10h
.text:00408220                 push    ebx
.text:00408221                 sub     esp, 8
.text:00408224                 mov     ebx, [esp+14h]
.text:00408228                 mov     edx, [esp+10h]
.text:0040822C                 mov     [esp], ebx
.text:0040822F                 mov     [esp+4], edx
.text:00408233                 call    strcpy
.text:00408238                 movzx   eax, byte ptr [ebx]
.text:0040823B                 mov     edx, ebx
.text:0040823D                 test    al, al
.text:0040823F                 jz      short loc_40825C
.text:00408241                 jmp     short loc_408250
.text:00408241 ; ---------------------------------------------------------------------------
.text:00408243                 align 10h
.text:00408250
.text:00408250 loc_408250:                             ; CODE XREF: .text:00408241↑j
.text:00408250                                         ; .text:0040825A↓j
.text:00408250                 cmp     al, 5Ch ; '\'
.text:00408252                 jz      short loc_408263
.text:00408254
.text:00408254 loc_408254:                             ; CODE XREF: .text:00408266↓j
.text:00408254                 inc     edx
.text:00408255                 movzx   eax, byte ptr [edx]
.text:00408258                 test    al, al
.text:0040825A                 jnz     short loc_408250
.text:0040825C
.text:0040825C loc_40825C:                             ; CODE XREF: .text:0040823F↑j
.text:0040825C                 add     esp, 8
.text:0040825F                 xor     eax, eax
.text:00408261                 pop     ebx
.text:00408262                 retn
.text:00408263 ; ---------------------------------------------------------------------------
.text:00408263
.text:00408263 loc_408263:                             ; CODE XREF: .text:00408252↑j
.text:00408263                 mov     byte ptr [edx], 2Fh ; '/'
.text:00408266                 jmp     short loc_408254
.text:00408266 ; ---------------------------------------------------------------------------
.text:00408268                 align 10h
.text:00408270
.text:00408270 ; =============== S U B R O U T I N E =======================================
.text:00408270
.text:00408270
.text:00408270 sub_408270      proc near               ; CODE XREF: sub_408E90+16↓p
.text:00408270                                         ; sub_409390+1F↓p ...
.text:00408270
.text:00408270 arg_0           = dword ptr  4
.text:00408270
.text:00408270                 mov     ecx, [esp+arg_0]
.text:00408274                 mov     edx, ecx
.text:00408276                 movzx   eax, byte ptr [ecx]
.text:00408279                 test    al, al
.text:0040827B                 jz      short loc_40828C
.text:0040827D                 lea     esi, [esi+0]
.text:00408280
.text:00408280 loc_408280:                             ; CODE XREF: sub_408270+1A↓j
.text:00408280                 cmp     al, 2Fh ; '/'
.text:00408282                 jz      short loc_408290
.text:00408284
.text:00408284 loc_408284:                             ; CODE XREF: sub_408270+23↓j
.text:00408284                 inc     edx
.text:00408285                 movzx   eax, byte ptr [edx]
.text:00408288                 test    al, al
.text:0040828A                 jnz     short loc_408280
.text:0040828C
.text:0040828C loc_40828C:                             ; CODE XREF: sub_408270+B↑j
.text:0040828C                 mov     eax, ecx
.text:0040828E                 retn
.text:0040828E ; ---------------------------------------------------------------------------
.text:0040828F                 align 10h
.text:00408290
.text:00408290 loc_408290:                             ; CODE XREF: sub_408270+12↑j
.text:00408290                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408293                 jmp     short loc_408284
.text:00408293 sub_408270      endp
.text:00408293
.text:00408293 ; ---------------------------------------------------------------------------
.text:00408295                 align 10h
.text:004082A0                 push    ebx
.text:004082A1                 sub     esp, 8
.text:004082A4                 mov     ebx, [esp+14h]
.text:004082A8                 mov     edx, [esp+10h]
.text:004082AC                 mov     [esp], ebx
.text:004082AF                 mov     [esp+4], edx
.text:004082B3                 call    strcpy
.text:004082B8                 movzx   eax, byte ptr [ebx]
.text:004082BB                 mov     edx, ebx
.text:004082BD                 test    al, al
.text:004082BF                 jz      short loc_4082DC
.text:004082C1                 jmp     short loc_4082D0
.text:004082C1 ; ---------------------------------------------------------------------------
.text:004082C3                 align 10h
.text:004082D0
.text:004082D0 loc_4082D0:                             ; CODE XREF: .text:004082C1↑j
.text:004082D0                                         ; .text:004082DA↓j
.text:004082D0                 cmp     al, 2Fh ; '/'
.text:004082D2                 jz      short loc_4082E3
.text:004082D4
.text:004082D4 loc_4082D4:                             ; CODE XREF: .text:004082E6↓j
.text:004082D4                 inc     edx
.text:004082D5                 movzx   eax, byte ptr [edx]
.text:004082D8                 test    al, al
.text:004082DA                 jnz     short loc_4082D0
.text:004082DC
.text:004082DC loc_4082DC:                             ; CODE XREF: .text:004082BF↑j
.text:004082DC                 add     esp, 8
.text:004082DF                 xor     eax, eax
.text:004082E1                 pop     ebx
.text:004082E2                 retn
.text:004082E3 ; ---------------------------------------------------------------------------
.text:004082E3
.text:004082E3 loc_4082E3:                             ; CODE XREF: .text:004082D2↑j
.text:004082E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004082E6                 jmp     short loc_4082D4
.text:004082E6 ; ---------------------------------------------------------------------------
.text:004082E8                 align 10h
.text:004082F0                 push    ebx
.text:004082F1                 sub     esp, 8
.text:004082F4                 mov     ebx, [esp+14h]
.text:004082F8                 mov     edx, [esp+10h]
.text:004082FC                 mov     [esp+4], ebx
.text:00408300                 mov     [esp], edx
.text:00408303                 call    sub_40ACE0
.text:00408308                 movzx   eax, byte ptr [ebx]
.text:0040830B                 mov     edx, ebx
.text:0040830D                 test    al, al
.text:0040830F                 jz      short loc_40832C
.text:00408311                 jmp     short loc_408320
.text:00408311 ; ---------------------------------------------------------------------------
.text:00408313                 align 10h
.text:00408320
.text:00408320 loc_408320:                             ; CODE XREF: .text:00408311↑j
.text:00408320                                         ; .text:0040832A↓j
.text:00408320                 cmp     al, 2Fh ; '/'
.text:00408322                 jz      short loc_408333
.text:00408324
.text:00408324 loc_408324:                             ; CODE XREF: .text:00408336↓j
.text:00408324                 inc     edx
.text:00408325                 movzx   eax, byte ptr [edx]
.text:00408328                 test    al, al
.text:0040832A                 jnz     short loc_408320
.text:0040832C
.text:0040832C loc_40832C:                             ; CODE XREF: .text:0040830F↑j
.text:0040832C                 add     esp, 8
.text:0040832F                 xor     eax, eax
.text:00408331                 pop     ebx
.text:00408332                 retn
.text:00408333 ; ---------------------------------------------------------------------------
.text:00408333
.text:00408333 loc_408333:                             ; CODE XREF: .text:00408322↑j
.text:00408333                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408336                 jmp     short loc_408324
.text:00408336 ; ---------------------------------------------------------------------------
.text:00408338                 align 10h
.text:00408340                 push    ebx
.text:00408341                 sub     esp, 8
.text:00408344                 mov     ebx, [esp+14h]
.text:00408348                 mov     edx, [esp+10h]
.text:0040834C                 mov     [esp], ebx
.text:0040834F                 mov     [esp+4], edx
.text:00408353                 call    sub_40ACE0
.text:00408358                 movzx   eax, byte ptr [ebx]
.text:0040835B                 mov     edx, ebx
.text:0040835D                 test    al, al
.text:0040835F                 jz      short loc_40837C
.text:00408361                 jmp     short loc_408370
.text:00408361 ; ---------------------------------------------------------------------------
.text:00408363                 align 10h
.text:00408370
.text:00408370 loc_408370:                             ; CODE XREF: .text:00408361↑j
.text:00408370                                         ; .text:0040837A↓j
.text:00408370                 cmp     al, 5Ch ; '\'
.text:00408372                 jz      short loc_408381
.text:00408374
.text:00408374 loc_408374:                             ; CODE XREF: .text:00408384↓j
.text:00408374                 inc     edx
.text:00408375                 movzx   eax, byte ptr [edx]
.text:00408378                 test    al, al
.text:0040837A                 jnz     short loc_408370
.text:0040837C
.text:0040837C loc_40837C:                             ; CODE XREF: .text:0040835F↑j
.text:0040837C                 add     esp, 8
.text:0040837F                 pop     ebx
.text:00408380                 retn
.text:00408381 ; ---------------------------------------------------------------------------
.text:00408381
.text:00408381 loc_408381:                             ; CODE XREF: .text:00408372↑j
.text:00408381                 mov     byte ptr [edx], 2Fh ; '/'
.text:00408384                 jmp     short loc_408374
.text:00408384 ; ---------------------------------------------------------------------------
.text:00408386                 align 10h
.text:00408390
.text:00408390 ; =============== S U B R O U T I N E =======================================
.text:00408390
.text:00408390
.text:00408390 ; int __cdecl sub_408390(LPSTR)
.text:00408390 sub_408390      proc near               ; CODE XREF: .text:0040841E↓p
.text:00408390                                         ; .text:0040845E↓p ...
.text:00408390
.text:00408390 hModule         = dword ptr -1Ch
.text:00408390 lpFilename      = dword ptr -18h
.text:00408390 nSize           = dword ptr -14h
.text:00408390 arg_0           = dword ptr  4
.text:00408390
.text:00408390                 push    esi
.text:00408391                 push    ebx
.text:00408392                 sub     esp, 14h
.text:00408395                 mov     esi, [esp+1Ch+arg_0]
.text:00408399                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:004083A1                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:004083A8                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:004083AC                 call    GetModuleFileNameA
.text:004083B1                 sub     esp, 0Ch
.text:004083B4                 test    eax, eax
.text:004083B6                 jz      short loc_4083F8
.text:004083B8                 cmp     eax, 104h
.text:004083BD                 jg      short loc_4083E9
.text:004083BF
.text:004083BF loc_4083BF:                             ; CODE XREF: sub_408390+66↓j
.text:004083BF                                         ; sub_408390+78↓j
.text:004083BF                 movzx   eax, byte ptr [esi]
.text:004083C2                 mov     edx, esi
.text:004083C4                 test    al, al
.text:004083C6                 jz      short loc_4083DC
.text:004083C8                 nop
.text:004083C9                 lea     esi, [esi+0]
.text:004083D0
.text:004083D0 loc_4083D0:                             ; CODE XREF: sub_408390+4A↓j
.text:004083D0                 cmp     al, 5Ch ; '\'
.text:004083D2                 jz      short loc_4083E4
.text:004083D4
.text:004083D4 loc_4083D4:                             ; CODE XREF: sub_408390+57↓j
.text:004083D4                 inc     edx
.text:004083D5                 movzx   eax, byte ptr [edx]
.text:004083D8                 test    al, al
.text:004083DA                 jnz     short loc_4083D0
.text:004083DC
.text:004083DC loc_4083DC:                             ; CODE XREF: sub_408390+36↑j
.text:004083DC                 add     esp, 14h
.text:004083DF                 mov     eax, esi
.text:004083E1                 pop     ebx
.text:004083E2                 pop     esi
.text:004083E3                 retn
.text:004083E4 ; ---------------------------------------------------------------------------
.text:004083E4
.text:004083E4 loc_4083E4:                             ; CODE XREF: sub_408390+42↑j
.text:004083E4                 mov     byte ptr [edx], 2Fh ; '/'
.text:004083E7                 jmp     short loc_4083D4
.text:004083E9 ; ---------------------------------------------------------------------------
.text:004083E9
.text:004083E9 loc_4083E9:                             ; CODE XREF: sub_408390+2D↑j
.text:004083E9                 call    _errno
.text:004083EE                 mov     dword ptr [eax], 26h ; '&'
.text:004083F4                 xor     esi, esi
.text:004083F6                 jmp     short loc_4083BF
.text:004083F8 ; ---------------------------------------------------------------------------
.text:004083F8
.text:004083F8 loc_4083F8:                             ; CODE XREF: sub_408390+26↑j
.text:004083F8                 call    sub_4076C0
.text:004083FD                 mov     ebx, eax
.text:004083FF                 xor     esi, esi
.text:00408401                 call    _errno
.text:00408406                 mov     [eax], ebx
.text:00408408                 jmp     short loc_4083BF
.text:00408408 sub_408390      endp
.text:00408408
.text:00408408 ; ---------------------------------------------------------------------------
.text:0040840A                 align 10h
.text:00408410                 sub     esp, 0Ch
.text:00408413                 mov     [esp+8], ebx
.text:00408417                 mov     ebx, [esp+10h]
.text:0040841B                 mov     [esp], ebx
.text:0040841E                 call    sub_408390
.text:00408423                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040842B                 mov     [esp], ebx
.text:0040842E                 call    strrchr
.text:00408433                 test    eax, eax
.text:00408435                 jz      short loc_40843A
.text:00408437                 lea     ebx, [eax+1]
.text:0040843A
.text:0040843A loc_40843A:                             ; CODE XREF: .text:00408435↑j
.text:0040843A                 mov     eax, ebx
.text:0040843C                 mov     ebx, [esp+8]
.text:00408440                 add     esp, 0Ch
.text:00408443                 retn
.text:00408443 ; ---------------------------------------------------------------------------
.text:00408444                 align 10h
.text:00408450                 sub     esp, 0Ch
.text:00408453                 mov     [esp+8], ebx
.text:00408457                 mov     ebx, [esp+10h]
.text:0040845B                 mov     [esp], ebx
.text:0040845E                 call    sub_408390
.text:00408463                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040846B                 mov     [esp], ebx
.text:0040846E                 call    strrchr
.text:00408473                 test    eax, eax
.text:00408475                 jz      short loc_40847A
.text:00408477                 mov     byte ptr [eax], 0
.text:0040847A
.text:0040847A loc_40847A:                             ; CODE XREF: .text:00408475↑j
.text:0040847A                 mov     eax, ebx
.text:0040847C                 mov     ebx, [esp+8]
.text:00408480                 add     esp, 0Ch
.text:00408483                 retn
.text:00408483 ; ---------------------------------------------------------------------------
.text:00408484                 align 10h
.text:00408490                 sub     esp, 0Ch
.text:00408493                 mov     [esp+8], ebx
.text:00408497                 mov     ebx, [esp+10h]
.text:0040849B                 mov     [esp], ebx
.text:0040849E                 call    sub_408390
.text:004084A3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004084AB                 mov     [esp], ebx
.text:004084AE                 call    strrchr
.text:004084B3                 test    eax, eax
.text:004084B5                 jz      short loc_4084BA
.text:004084B7                 mov     byte ptr [eax], 0
.text:004084BA
.text:004084BA loc_4084BA:                             ; CODE XREF: .text:004084B5↑j
.text:004084BA                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004084C2                 mov     [esp], ebx
.text:004084C5                 call    strrchr
.text:004084CA                 test    eax, eax
.text:004084CC                 jz      short loc_4084D1
.text:004084CE                 mov     byte ptr [eax], 0
.text:004084D1
.text:004084D1 loc_4084D1:                             ; CODE XREF: .text:004084CC↑j
.text:004084D1                 mov     eax, ebx
.text:004084D3                 mov     ebx, [esp+8]
.text:004084D7                 add     esp, 0Ch
.text:004084DA                 retn
.text:004084DA ; ---------------------------------------------------------------------------
.text:004084DB                 align 10h
.text:004084E0                 sub     esp, 1Ch
.text:004084E3                 mov     edx, [esp+20h]
.text:004084E7                 mov     [esp+10h], ebx
.text:004084EB                 xor     ebx, ebx
.text:004084ED                 mov     [esp+14h], esi
.text:004084F1                 mov     [esp+18h], edi
.text:004084F5                 mov     [esp], edx
.text:004084F8                 call    sub_40AD10
.text:004084FD                 mov     edx, [esp+24h]
.text:00408501                 mov     edi, eax
.text:00408503                 mov     [esp], edx
.text:00408506                 call    sub_40AD10
.text:0040850B                 mov     [esp+4], eax
.text:0040850F                 mov     esi, eax
.text:00408511                 mov     [esp], edi
.text:00408514                 call    _stricmp_0
.text:00408519                 mov     [esp], edi
.text:0040851C                 test    eax, eax
.text:0040851E                 setz    bl
.text:00408521                 call    free
.text:00408526                 mov     [esp], esi
.text:00408529                 call    free
.text:0040852E                 mov     eax, ebx
.text:00408530                 mov     esi, [esp+14h]
.text:00408534                 mov     ebx, [esp+10h]
.text:00408538                 mov     edi, [esp+18h]
.text:0040853C                 add     esp, 1Ch
.text:0040853F                 retn
.text:00408540 ; ---------------------------------------------------------------------------
.text:00408540                 xor     eax, eax
.text:00408542                 retn
.text:00408542 ; ---------------------------------------------------------------------------
.text:00408543 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:00408577↓o
.text:00408550 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:00408586↓o
.text:00408560 ; ---------------------------------------------------------------------------
.text:00408560                 sub     esp, 1Ch
.text:00408563                 mov     [esp+10h], ebx
.text:00408567                 mov     ebx, [esp+20h]
.text:0040856B                 mov     [esp+18h], edi
.text:0040856F                 mov     edi, [esp+24h]
.text:00408573                 mov     [esp+14h], esi
.text:00408577                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040857E                 call    GetModuleHandleA
.text:00408583                 sub     esp, 4
.text:00408586                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040858E                 mov     [esp], eax
.text:00408591                 call    GetProcAddress
.text:00408596                 sub     esp, 8
.text:00408599                 test    eax, eax
.text:0040859B                 jz      short loc_4085B3
.text:0040859D                 mov     dword ptr [esp+8], 104h
.text:004085A5                 mov     [esp+4], ebx
.text:004085A9                 mov     [esp], edi
.text:004085AC                 call    eax
.text:004085AE                 sub     esp, 0Ch
.text:004085B1                 mov     esi, eax
.text:004085B3
.text:004085B3 loc_4085B3:                             ; CODE XREF: .text:0040859B↑j
.text:004085B3                 test    esi, esi
.text:004085B5                 jz      short loc_4085D0
.text:004085B7
.text:004085B7 loc_4085B7:                             ; CODE XREF: .text:004085EB↓j
.text:004085B7                 mov     eax, ebx
.text:004085B9                 mov     esi, [esp+14h]
.text:004085BD                 mov     ebx, [esp+10h]
.text:004085C1                 mov     edi, [esp+18h]
.text:004085C5                 add     esp, 1Ch
.text:004085C8                 retn
.text:004085C8 ; ---------------------------------------------------------------------------
.text:004085C9                 align 10h
.text:004085D0
.text:004085D0 loc_4085D0:                             ; CODE XREF: .text:004085B5↑j
.text:004085D0                 call    sub_40AA30
.text:004085D5                 mov     [esp], ebx
.text:004085D8                 mov     [esp+4], edi
.text:004085DC                 call    strcpy
.text:004085E1                 mov     [esp], ebx
.text:004085E4                 call    _win32_longpath
.text:004085E9                 mov     ebx, eax
.text:004085EB                 jmp     short loc_4085B7
.text:004085EB ; ---------------------------------------------------------------------------
.text:004085ED                 align 10h
.text:004085F0                 sub     esp, 1Ch
.text:004085F3                 mov     [esp+18h], edi
.text:004085F7                 mov     edi, [esp+20h]
.text:004085FB                 mov     [esp+10h], ebx
.text:004085FF                 mov     [esp+14h], esi
.text:00408603                 mov     dword ptr [esp+8], 0
.text:0040860B                 mov     dword ptr [esp+4], 0
.text:00408613                 mov     [esp], edi
.text:00408616                 call    GetShortPathNameA
.text:0040861B                 sub     esp, 0Ch
.text:0040861E                 mov     ebx, eax
.text:00408620                 test    eax, eax
.text:00408622                 jz      short loc_408670
.text:00408624                 lea     edx, [eax+1]
.text:00408627                 mov     [esp], edx
.text:0040862A                 call    malloc
.text:0040862F                 test    eax, eax
.text:00408631                 mov     esi, eax
.text:00408633                 jz      short loc_408670
.text:00408635                 mov     [esp+8], ebx
.text:00408639                 mov     [esp+4], eax
.text:0040863D                 mov     [esp], edi
.text:00408640                 call    GetShortPathNameA
.text:00408645                 sub     esp, 0Ch
.text:00408648                 mov     edx, esi
.text:0040864A                 test    eax, eax
.text:0040864C                 jz      short loc_408662
.text:0040864E                 mov     esi, esi
.text:00408650
.text:00408650 loc_408650:                             ; CODE XREF: .text:00408680↓j
.text:00408650                 mov     ebx, [esp+10h]
.text:00408654                 mov     eax, edx
.text:00408656                 mov     esi, [esp+14h]
.text:0040865A                 mov     edi, [esp+18h]
.text:0040865E                 add     esp, 1Ch
.text:00408661                 retn
.text:00408662 ; ---------------------------------------------------------------------------
.text:00408662
.text:00408662 loc_408662:                             ; CODE XREF: .text:0040864C↑j
.text:00408662                 mov     [esp], esi
.text:00408665                 call    free
.text:0040866A                 lea     esi, [esi+0]
.text:00408670
.text:00408670 loc_408670:                             ; CODE XREF: .text:00408622↑j
.text:00408670                                         ; .text:00408633↑j
.text:00408670                 call    sub_4076C0
.text:00408675                 mov     esi, eax
.text:00408677                 call    _errno
.text:0040867C                 mov     [eax], esi
.text:0040867E                 mov     edx, edi
.text:00408680                 jmp     short loc_408650
.text:00408680 ; ---------------------------------------------------------------------------
.text:00408682                 align 10h
.text:00408690 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:00408690                                         ; DATA XREF: .data:off_410054↓o
.text:004086A4 ; const CHAR LibFileName[]
.text:004086A4 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_4086D0+11↓o
.text:004086A4                                         ; sub_408840+C↓o ...
.text:004086B1 ; const CHAR ProcName[]
.text:004086B1 ProcName        db 'GetFileAttributesExA',0
.text:004086B1                                         ; DATA XREF: sub_4086D0+28↓o
.text:004086C6                 align 10h
.text:004086D0
.text:004086D0 ; =============== S U B R O U T I N E =======================================
.text:004086D0
.text:004086D0
.text:004086D0 ; int __cdecl sub_4086D0(LPCSTR lpFileName, int)
.text:004086D0 sub_4086D0      proc near               ; CODE XREF: .text:00409874↓p
.text:004086D0                                         ; sub_409C70+37↓p
.text:004086D0
.text:004086D0 lpModuleName    = dword ptr -18Ch
.text:004086D0 lpProcName      = dword ptr -188h
.text:004086D0 var_184         = dword ptr -184h
.text:004086D0 var_170         = dword ptr -170h
.text:004086D0 var_164         = dword ptr -164h
.text:004086D0 hModule         = dword ptr -160h
.text:004086D0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:004086D0 lpFileName      = dword ptr  4
.text:004086D0 arg_4           = dword ptr  8
.text:004086D0
.text:004086D0                 push    ebp
.text:004086D1                 push    edi
.text:004086D2                 push    esi
.text:004086D3                 push    ebx
.text:004086D4                 sub     esp, 17Ch
.text:004086DA                 mov     ebx, [esp+18Ch+arg_4]
.text:004086E1                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:004086E8                 call    GetModuleHandleA
.text:004086ED                 sub     esp, 4
.text:004086F0                 mov     [esp+18Ch+hModule], eax
.text:004086F4                 mov     edx, [esp+18Ch+hModule]
.text:004086F8                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:00408700                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:00408703                 call    GetProcAddress
.text:00408708                 sub     esp, 8
.text:0040870B                 mov     ebp, eax
.text:0040870D                 mov     eax, [esp+18Ch+lpFileName]
.text:00408714                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00408717                 call    GetFileAttributesA
.text:0040871C                 sub     esp, 4
.text:0040871F                 mov     [esp+18Ch+var_164], eax
.text:00408723                 xor     eax, eax
.text:00408725                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040872A                 jz      short loc_408781
.text:0040872C                 cld
.text:0040872D                 mov     ecx, 50h ; 'P'
.text:00408732                 lea     esi, [esp+18Ch+FindFileData]
.text:00408736                 mov     edi, esi
.text:00408738                 test    ebp, ebp
.text:0040873A                 rep stosd
.text:0040873C                 mov     [esp+18Ch+var_170], 0
.text:00408744                 jz      short loc_408765
.text:00408746                 mov     [esp+18Ch+var_184], ebx
.text:0040874A                 mov     ecx, [esp+18Ch+lpFileName]
.text:00408751                 mov     [esp+18Ch+lpProcName], 0
.text:00408759                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040875C                 call    ebp
.text:0040875E                 sub     esp, 0Ch
.text:00408761                 mov     [esp+18Ch+var_170], eax
.text:00408765
.text:00408765 loc_408765:                             ; CODE XREF: sub_4086D0+74↑j
.text:00408765                 mov     eax, [esp+18Ch+var_170]
.text:00408769                 test    eax, eax
.text:0040876B                 jz      short loc_408790
.text:0040876D
.text:0040876D loc_40876D:                             ; CODE XREF: sub_4086D0+131↓j
.text:0040876D                                         ; sub_4086D0+14B↓j
.text:0040876D                 mov     ebx, [esp+18Ch+hModule]
.text:00408771                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:00408774                 call    FreeLibrary
.text:00408779                 sub     esp, 4
.text:0040877C                 mov     eax, 1
.text:00408781
.text:00408781 loc_408781:                             ; CODE XREF: sub_4086D0+5A↑j
.text:00408781                 add     esp, 17Ch
.text:00408787                 pop     ebx
.text:00408788                 pop     esi
.text:00408789                 pop     edi
.text:0040878A                 pop     ebp
.text:0040878B                 retn
.text:0040878B ; ---------------------------------------------------------------------------
.text:0040878C                 align 10h
.text:00408790
.text:00408790 loc_408790:                             ; CODE XREF: sub_4086D0+9B↑j
.text:00408790                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:00408794                 mov     edx, [esp+18Ch+lpFileName]
.text:0040879B                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:0040879E                 call    FindFirstFileA
.text:004087A3                 sub     esp, 8
.text:004087A6                 xor     ecx, ecx
.text:004087A8                 cmp     eax, 0FFFFFFFFh
.text:004087AB                 setnz   cl
.text:004087AE                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:004087B2                 mov     [ebx], edi
.text:004087B4                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:004087B8                 mov     [esp+18Ch+var_170], ecx
.text:004087BC                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:004087C0                 mov     [ebx+8], esi
.text:004087C3                 mov     [ebx+4], ecx
.text:004087C6                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:004087CA                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:004087CE                 mov     [ebx+0Ch], ebp
.text:004087D1                 mov     [ebx+10h], edi
.text:004087D4                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:004087D8                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:004087DC                 mov     [ebx+18h], esi
.text:004087DF                 mov     [ebx+14h], ecx
.text:004087E2                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:004087E6                 mov     [ebx+1Ch], ebp
.text:004087E9                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:004087ED                 mov     [ebx+20h], edi
.text:004087F0                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:004087F3                 call    FindClose
.text:004087F8                 sub     esp, 4
.text:004087FB                 mov     esi, [esp+18Ch+var_170]
.text:004087FF                 test    esi, esi
.text:00408801                 jnz     loc_40876D
.text:00408807                 cld
.text:00408808                 mov     eax, [esp+18Ch+var_170]
.text:0040880C                 mov     ecx, 9
.text:00408811                 mov     edi, ebx
.text:00408813                 rep stosd
.text:00408815                 mov     ebp, [esp+18Ch+var_164]
.text:00408819                 mov     [ebx], ebp
.text:0040881B                 jmp     loc_40876D
.text:0040881B sub_4086D0      endp
.text:0040881B
.text:0040881B ; ---------------------------------------------------------------------------
.text:00408820 ; const CHAR aFindfirstfilee[]
.text:00408820 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_408840+23↓o
.text:00408831 ; const char asc_408831[]
.text:00408831 asc_408831      db '\*',0               ; DATA XREF: sub_408840:loc_4088CD↓o
.text:00408834                 align 10h
.text:00408840
.text:00408840 ; =============== S U B R O U T I N E =======================================
.text:00408840
.text:00408840
.text:00408840 ; int __cdecl sub_408840(char *Str)
.text:00408840 sub_408840      proc near               ; CODE XREF: .text:00409973↓p
.text:00408840                                         ; sub_409C70+3FA↓p ...
.text:00408840
.text:00408840 lpLibFileName   = dword ptr -18Ch
.text:00408840 lpProcName      = dword ptr -188h
.text:00408840 var_184         = dword ptr -184h
.text:00408840 var_180         = dword ptr -180h
.text:00408840 var_17C         = dword ptr -17Ch
.text:00408840 var_178         = dword ptr -178h
.text:00408840 var_164         = dword ptr -164h
.text:00408840 hModule         = dword ptr -160h
.text:00408840 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00408840 Str             = dword ptr  4
.text:00408840
.text:00408840                 push    ebp
.text:00408841                 push    edi
.text:00408842                 xor     edi, edi
.text:00408844                 push    esi
.text:00408845                 push    ebx
.text:00408846                 sub     esp, 17Ch
.text:0040884C                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:00408853                 call    LoadLibraryA
.text:00408858                 sub     esp, 4
.text:0040885B                 mov     [esp+18Ch+hModule], eax
.text:0040885F                 mov     ecx, [esp+18Ch+hModule]
.text:00408863                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0040886B                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:0040886E                 call    GetProcAddress
.text:00408873                 sub     esp, 8
.text:00408876                 mov     edx, [esp+18Ch+Str]
.text:0040887D                 mov     [esp+18Ch+var_164], eax
.text:00408881                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:00408884                 call    strlen
.text:00408889                 lea     edx, [eax+5]
.text:0040888C                 mov     ebx, eax
.text:0040888E                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:00408891                 call    malloc
.text:00408896                 mov     esi, eax
.text:00408898                 test    esi, esi
.text:0040889A                 mov     eax, 1
.text:0040889F                 jz      loc_40897D
.text:004088A5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:004088A8                 mov     ebp, [esp+18Ch+Str]
.text:004088AF                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:004088B3                 call    strcpy
.text:004088B8                 movzx   eax, byte ptr [ebx+esi-1]
.text:004088BD                 cmp     al, 2Fh ; '/'
.text:004088BF                 jz      loc_4089AB
.text:004088C5                 cmp     al, 5Ch ; '\'
.text:004088C7                 jz      loc_4089AB
.text:004088CD
.text:004088CD loc_4088CD:                             ; CODE XREF: sub_408840+170↓j
.text:004088CD                 mov     [esp+18Ch+lpProcName], offset asc_408831 ; "\\*"
.text:004088D5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:004088D8                 call    strcat
.text:004088DD                 mov     eax, [esp+18Ch+var_164]
.text:004088E1                 test    eax, eax
.text:004088E3                 jz      loc_4089A5
.text:004088E9                 mov     [esp+18Ch+var_178], 0
.text:004088F1                 lea     ebp, [esp+18Ch+FindFileData]
.text:004088F5                 mov     [esp+18Ch+var_17C], 0
.text:004088FD                 mov     [esp+18Ch+var_180], 1
.text:00408905                 mov     [esp+18Ch+var_184], ebp
.text:00408909                 mov     [esp+18Ch+lpProcName], 0
.text:00408911                 mov     [esp+18Ch+lpLibFileName], esi
.text:00408914                 call    [esp+18Ch+var_164]
.text:00408918                 sub     esp, 18h
.text:0040891B                 mov     ebx, eax
.text:0040891D                 cmp     eax, 0FFFFFFFFh
.text:00408920                 jz      short loc_408988
.text:00408922                 lea     esi, [esi+0]
.text:00408929                 lea     edi, [edi+0]
.text:00408930
.text:00408930 loc_408930:                             ; CODE XREF: sub_408840+109↓j
.text:00408930                                         ; sub_408840+161↓j
.text:00408930                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:00408935                 jz      short loc_408938
.text:00408937                 inc     edi
.text:00408938
.text:00408938 loc_408938:                             ; CODE XREF: sub_408840+F5↑j
.text:00408938                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040893C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040893F                 call    FindNextFileA
.text:00408944                 sub     esp, 8
.text:00408947                 test    eax, eax
.text:00408949                 jnz     short loc_408930
.text:0040894B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040894E                 call    FindClose
.text:00408953                 sub     esp, 4
.text:00408956                 mov     esi, [esp+18Ch+hModule]
.text:0040895A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:0040895D                 call    FreeLibrary
.text:00408962                 sub     esp, 4
.text:00408965                 mov     ebx, [esp+18Ch+Str]
.text:0040896C                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:0040896F                 call    sub_40B310
.text:00408974                 test    eax, eax
.text:00408976                 jz      short loc_40897B
.text:00408978                 add     edi, 2
.text:0040897B
.text:0040897B loc_40897B:                             ; CODE XREF: sub_408840+136↑j
.text:0040897B                 mov     eax, edi
.text:0040897D
.text:0040897D loc_40897D:                             ; CODE XREF: sub_408840+5F↑j
.text:0040897D                                         ; sub_408840+163↓j
.text:0040897D                 add     esp, 17Ch
.text:00408983                 pop     ebx
.text:00408984                 pop     esi
.text:00408985                 pop     edi
.text:00408986                 pop     ebp
.text:00408987                 retn
.text:00408988 ; ---------------------------------------------------------------------------
.text:00408988
.text:00408988 loc_408988:                             ; CODE XREF: sub_408840+E0↑j
.text:00408988                                         ; sub_408840+169↓j
.text:00408988                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040898C                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:0040898F                 call    FindFirstFileA
.text:00408994                 mov     ebx, eax
.text:00408996                 sub     esp, 8
.text:00408999                 cmp     ebx, 0FFFFFFFFh
.text:0040899C                 mov     eax, 2
.text:004089A1                 jnz     short loc_408930
.text:004089A3                 jmp     short loc_40897D
.text:004089A5 ; ---------------------------------------------------------------------------
.text:004089A5
.text:004089A5 loc_4089A5:                             ; CODE XREF: sub_408840+A3↑j
.text:004089A5                 lea     ebp, [esp+18Ch+FindFileData]
.text:004089A9                 jmp     short loc_408988
.text:004089AB ; ---------------------------------------------------------------------------
.text:004089AB
.text:004089AB loc_4089AB:                             ; CODE XREF: sub_408840+7F↑j
.text:004089AB                                         ; sub_408840+87↑j
.text:004089AB                 mov     byte ptr [ebx+esi-1], 0
.text:004089B0                 jmp     loc_4088CD
.text:004089B0 sub_408840      endp
.text:004089B0
.text:004089B0 ; ---------------------------------------------------------------------------
.text:004089B5                 align 10h
.text:004089C0
.text:004089C0 ; =============== S U B R O U T I N E =======================================
.text:004089C0
.text:004089C0
.text:004089C0 ; int __cdecl sub_4089C0(HANDLE hNamedPipe, int)
.text:004089C0 sub_4089C0      proc near               ; CODE XREF: sub_407940+27F7↓p
.text:004089C0                                         ; sub_40C940+52↓j
.text:004089C0
.text:004089C0 hFile           = dword ptr -0ECh
.text:004089C0 lpFileInformation= dword ptr -0E8h
.text:004089C0 nBufferSize     = dword ptr -0E4h
.text:004089C0 lpBytesRead     = dword ptr -0E0h
.text:004089C0 lpTotalBytesAvail= dword ptr -0DCh
.text:004089C0 lpBytesLeftThisMessage= dword ptr -0D8h
.text:004089C0 var_C4          = dword ptr -0C4h
.text:004089C0 var_C0          = dword ptr -0C0h
.text:004089C0 var_BC          = dword ptr -0BCh
.text:004089C0 var_B8          = dword ptr -0B8h
.text:004089C0 var_B4          = dword ptr -0B4h
.text:004089C0 var_B0          = dword ptr -0B0h
.text:004089C0 var_AC          = dword ptr -0ACh
.text:004089C0 var_A8          = dword ptr -0A8h
.text:004089C0 TotalBytesAvail = dword ptr -0A0h
.text:004089C0 var_9C          = dword ptr -9Ch
.text:004089C0 var_98          = dword ptr -98h
.text:004089C0 var_94          = dword ptr -94h
.text:004089C0 var_90          = dword ptr -90h
.text:004089C0 var_8C          = dword ptr -8Ch
.text:004089C0 var_88          = dword ptr -88h
.text:004089C0 var_84          = dword ptr -84h
.text:004089C0 var_80          = dword ptr -80h
.text:004089C0 var_7C          = dword ptr -7Ch
.text:004089C0 var_78          = dword ptr -78h
.text:004089C0 var_74          = dword ptr -74h
.text:004089C0 var_70          = dword ptr -70h
.text:004089C0 var_6C          = dword ptr -6Ch
.text:004089C0 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:004089C0 hNamedPipe      = dword ptr  4
.text:004089C0 arg_4           = dword ptr  8
.text:004089C0
.text:004089C0                 push    ebp
.text:004089C1                 mov     eax, 0FFFFFFFFh
.text:004089C6                 push    edi
.text:004089C7                 push    esi
.text:004089C8                 push    ebx
.text:004089C9                 sub     esp, 0DCh
.text:004089CF                 mov     esi, [esp+0ECh+hNamedPipe]
.text:004089D6                 mov     ebp, [esp+0ECh+arg_4]
.text:004089DD                 cmp     esi, 0FFFFFFFFh
.text:004089E0                 jz      loc_408D61
.text:004089E6                 cld
.text:004089E7                 xor     eax, eax
.text:004089E9                 lea     ebx, [esp+0ECh+FileInformation]
.text:004089F0                 mov     ecx, 0Dh
.text:004089F5                 mov     edi, ebx
.text:004089F7                 rep stosd
.text:004089F9                 mov     dword ptr [ebp+18h], 1
.text:00408A00                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00408A03                 call    GetFileType
.text:00408A08                 sub     esp, 4
.text:00408A0B                 xor     edx, edx
.text:00408A0D                 cmp     eax, 2
.text:00408A10                 jz      loc_408E40
.text:00408A16                 cmp     eax, 3
.text:00408A19                 jz      loc_408E30
.text:00408A1F
.text:00408A1F loc_408A1F:                             ; CODE XREF: sub_4089C0+475↓j
.text:00408A1F                                         ; sub_4089C0+485↓j
.text:00408A1F                 or      [ebp+0], edx
.text:00408A22                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:00408A26                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00408A29                 call    GetFileInformationByHandle
.text:00408A2E                 sub     esp, 8
.text:00408A31                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00408A38                 test    ecx, ecx
.text:00408A3A                 jnz     short loc_408A70
.text:00408A3C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00408A43                 test    edx, edx
.text:00408A45                 jnz     short loc_408A70
.text:00408A47                 mov     edx, [ebp+0]
.text:00408A4A                 and     edx, 0F000h
.text:00408A50                 cmp     edx, 1000h
.text:00408A56                 jz      loc_408DC6
.text:00408A5C
.text:00408A5C loc_408A5C:                             ; CODE XREF: sub_4089C0+459↓j
.text:00408A5C                                         ; sub_4089C0+465↓j
.text:00408A5C                 test    ecx, ecx
.text:00408A5E                 jnz     short loc_408A70
.text:00408A60                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00408A67                 test    edx, edx
.text:00408A69                 jz      loc_408DA4
.text:00408A6F                 nop
.text:00408A70
.text:00408A70 loc_408A70:                             ; CODE XREF: sub_4089C0+7A↑j
.text:00408A70                                         ; sub_4089C0+85↑j ...
.text:00408A70                 cld
.text:00408A71                 mov     esi, ebx
.text:00408A73                 mov     dword ptr [ebp+14h], 0
.text:00408A7A                 lea     edi, [esp+0ECh+var_9C]
.text:00408A7E                 mov     ecx, 0Dh
.text:00408A83                 rep movsd
.text:00408A85                 xor     ebx, ebx
.text:00408A87                 xor     edi, edi
.text:00408A89                 mov     edx, [esp+0ECh+var_6C]
.text:00408A90                 mov     esi, [esp+0ECh+var_70]
.text:00408A94                 or      edx, ebx
.text:00408A96                 mov     ebx, [esp+0ECh+var_9C]
.text:00408A9A                 mov     [ebp+8], edx
.text:00408A9D                 or      edi, esi
.text:00408A9F                 xor     edx, edx
.text:00408AA1                 mov     [ebp+0Ch], edi
.text:00408AA4                 test    bl, 10h
.text:00408AA7                 mov     esi, [esp+0ECh+var_80]
.text:00408AAB                 setz    dl
.text:00408AAE                 mov     [ebp+10h], esi
.text:00408AB1                 dec     edx
.text:00408AB2                 and     edx, 0FFFFC000h
.text:00408AB8                 add     edx, 8000h
.text:00408ABE                 or      edx, 124h
.text:00408AC4                 test    bl, 1
.text:00408AC7                 movzx   eax, dx
.text:00408ACA                 jnz     short loc_408AD1
.text:00408ACC                 or      eax, 92h
.text:00408AD1
.text:00408AD1 loc_408AD1:                             ; CODE XREF: sub_4089C0+10A↑j
.text:00408AD1                 or      [ebp+0], eax
.text:00408AD4                 xor     edx, edx
.text:00408AD6                 mov     ebx, [esp+0ECh+var_7C]
.text:00408ADA                 mov     ecx, [esp+0ECh+var_78]
.text:00408ADE                 mov     eax, edx
.text:00408AE0                 xor     esi, esi
.text:00408AE2                 mov     edx, [esp+0ECh+var_8C]
.text:00408AE6                 mov     edi, ebx
.text:00408AE8                 or      eax, edi
.text:00408AEA                 mov     [esp+0ECh+var_A8], eax
.text:00408AEE                 mov     ebx, ecx
.text:00408AF0                 mov     edi, [esp+0ECh+var_74]
.text:00408AF4                 or      ebx, esi
.text:00408AF6                 mov     esi, [esp+0ECh+var_A8]
.text:00408AFA                 mov     [esp+0ECh+var_AC], ebx
.text:00408AFE                 xor     ebx, ebx
.text:00408B00                 mov     ecx, [esp+0ECh+var_AC]
.text:00408B04                 mov     [ebp+34h], esi
.text:00408B07                 mov     esi, [esp+0ECh+var_90]
.text:00408B0B                 mov     [ebp+18h], edi
.text:00408B0E                 xor     edi, edi
.text:00408B10                 or      esi, ebx
.text:00408B12                 mov     [ebp+30h], ecx
.text:00408B15                 or      edi, edx
.text:00408B17                 mov     edx, esi
.text:00408B19                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00408B21                 sub     edx, 0D53E8000h
.text:00408B27                 mov     ebx, edi
.text:00408B29                 sbb     ebx, 19DB1DEh
.text:00408B2F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00408B33                 mov     [esp+0ECh+lpBytesRead], 0
.text:00408B3B                 mov     [esp+0ECh+hFile], edx
.text:00408B3E                 call    sub_40EBA0
.text:00408B43                 mov     ecx, eax
.text:00408B45                 shr     eax, 1Fh
.text:00408B48                 dec     eax
.text:00408B49                 and     ecx, eax
.text:00408B4B                 mov     [ebp+38h], ecx
.text:00408B4E                 mov     [esp+0ECh+hFile], esi
.text:00408B51                 mov     [esp+0ECh+lpFileInformation], edi
.text:00408B55                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00408B5D                 mov     [esp+0ECh+lpBytesRead], 0
.text:00408B65                 call    sub_40ECC0
.text:00408B6A                 lea     ebx, [eax+eax*4]
.text:00408B6D                 xor     ecx, ecx
.text:00408B6F                 lea     esi, [ebx+ebx*4]
.text:00408B72                 shl     esi, 2
.text:00408B75                 mov     edi, esi
.text:00408B77                 shr     edi, 1Fh
.text:00408B7A                 dec     edi
.text:00408B7B                 and     edi, esi
.text:00408B7D                 mov     [ebp+3Ch], edi
.text:00408B80                 mov     esi, [esp+0ECh+var_98]
.text:00408B84                 xor     edi, edi
.text:00408B86                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00408B8E                 mov     edx, [esp+0ECh+var_94]
.text:00408B92                 mov     [esp+0ECh+lpBytesRead], 0
.text:00408B9A                 or      esi, ecx
.text:00408B9C                 or      edi, edx
.text:00408B9E                 mov     edx, esi
.text:00408BA0                 mov     ecx, edi
.text:00408BA2                 sub     edx, 0D53E8000h
.text:00408BA8                 sbb     ecx, 19DB1DEh
.text:00408BAE                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00408BB2                 mov     [esp+0ECh+hFile], edx
.text:00408BB5                 call    sub_40EBA0
.text:00408BBA                 mov     ebx, eax
.text:00408BBC                 shr     eax, 1Fh
.text:00408BBF                 dec     eax
.text:00408BC0                 and     ebx, eax
.text:00408BC2                 mov     [ebp+48h], ebx
.text:00408BC5                 xor     ebx, ebx
.text:00408BC7                 mov     [esp+0ECh+hFile], esi
.text:00408BCA                 mov     [esp+0ECh+lpFileInformation], edi
.text:00408BCE                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00408BD6                 mov     [esp+0ECh+lpBytesRead], 0
.text:00408BDE                 call    sub_40ECC0
.text:00408BE3                 lea     ecx, [eax+eax*4]
.text:00408BE6                 lea     esi, [ecx+ecx*4]
.text:00408BE9                 shl     esi, 2
.text:00408BEC                 mov     edi, esi
.text:00408BEE                 shr     edi, 1Fh
.text:00408BF1                 dec     edi
.text:00408BF2                 and     edi, esi
.text:00408BF4                 mov     [ebp+4Ch], edi
.text:00408BF7                 mov     esi, [esp+0ECh+var_88]
.text:00408BFB                 xor     edi, edi
.text:00408BFD                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00408C05                 mov     edx, [esp+0ECh+var_84]
.text:00408C09                 mov     [esp+0ECh+lpBytesRead], 0
.text:00408C11                 or      esi, ebx
.text:00408C13                 or      edi, edx
.text:00408C15                 mov     edx, esi
.text:00408C17                 mov     ebx, edi
.text:00408C19                 sub     edx, 0D53E8000h
.text:00408C1F                 sbb     ebx, 19DB1DEh
.text:00408C25                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00408C29                 mov     [esp+0ECh+hFile], edx
.text:00408C2C                 call    sub_40EBA0
.text:00408C31                 mov     ecx, eax
.text:00408C33                 shr     eax, 1Fh
.text:00408C36                 dec     eax
.text:00408C37                 and     ecx, eax
.text:00408C39                 mov     [ebp+40h], ecx
.text:00408C3C                 mov     [esp+0ECh+lpFileInformation], edi
.text:00408C40                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00408C48                 mov     [esp+0ECh+lpBytesRead], 0
.text:00408C50                 mov     [esp+0ECh+hFile], esi
.text:00408C53                 call    sub_40ECC0
.text:00408C58                 mov     dword ptr [ebp+50h], 200h
.text:00408C5F                 lea     ebx, [eax+eax*4]
.text:00408C62                 mov     edi, [esp+0ECh+var_A8]
.text:00408C66                 lea     edx, [ebx+ebx*4]
.text:00408C69                 mov     eax, [esp+0ECh+var_AC]
.text:00408C6D                 shl     edx, 2
.text:00408C70                 mov     ecx, edx
.text:00408C72                 shr     ecx, 1Fh
.text:00408C75                 dec     ecx
.text:00408C76                 and     ecx, edx
.text:00408C78                 test    edi, edi
.text:00408C7A                 mov     edx, [esp+0ECh+var_A8]
.text:00408C7E                 mov     [ebp+44h], ecx
.text:00408C81                 js      loc_408D97
.text:00408C87
.text:00408C87 loc_408C87:                             ; CODE XREF: sub_4089C0+3DF↓j
.text:00408C87                 mov     edi, [esp+0ECh+var_AC]
.text:00408C8B                 xor     esi, esi
.text:00408C8D                 mov     ecx, eax
.text:00408C8F                 shrd    ecx, edx, 9
.text:00408C93                 mov     ebx, edx
.text:00408C95                 mov     eax, esi
.text:00408C97                 and     edi, 1FFh
.text:00408C9D                 sar     ebx, 9
.text:00408CA0                 or      eax, edi
.text:00408CA2                 jz      short loc_408CAA
.text:00408CA4                 add     ecx, 1
.text:00408CA7                 adc     ebx, 0
.text:00408CAA
.text:00408CAA loc_408CAA:                             ; CODE XREF: sub_4089C0+2E2↑j
.text:00408CAA                 mov     [ebp+5Ch], ebx
.text:00408CAD                 mov     esi, dword_410050
.text:00408CB3                 xor     edi, edi
.text:00408CB5                 mov     [ebp+58h], ecx
.text:00408CB8                 mov     ebx, dword_410050
.text:00408CBE                 mov     ecx, [esp+0ECh+var_A8]
.text:00408CC2                 mov     edx, [esp+0ECh+var_AC]
.text:00408CC6                 mov     [ebp+50h], ebx
.text:00408CC9                 shr     ebx, 9
.text:00408CCC                 mov     [esp+0ECh+lpBytesRead], edi
.text:00408CD0                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00408CD4                 mov     [esp+0ECh+nBufferSize], esi
.text:00408CD8                 mov     [esp+0ECh+hFile], edx
.text:00408CDB                 call    sub_40EBA0
.text:00408CE0                 mov     [esp+0ECh+lpBytesRead], edi
.text:00408CE4                 mov     ecx, [esp+0ECh+var_AC]
.text:00408CE8                 mov     edi, [esp+0ECh+var_A8]
.text:00408CEC                 mov     [esp+0ECh+var_BC], ebx
.text:00408CF0                 mov     [esp+0ECh+var_B4], eax
.text:00408CF4                 mov     [esp+0ECh+var_B0], edx
.text:00408CF8                 mov     [esp+0ECh+var_B8], 0
.text:00408D00                 mov     [esp+0ECh+nBufferSize], esi
.text:00408D04                 mov     [esp+0ECh+hFile], ecx
.text:00408D07                 mov     [esp+0ECh+lpFileInformation], edi
.text:00408D0B                 call    sub_40ECC0
.text:00408D10                 mov     ebx, edx
.text:00408D12                 or      ebx, eax
.text:00408D14                 jz      short loc_408D70
.text:00408D16                 mov     edi, [esp+0ECh+var_B4]
.text:00408D1A                 mov     esi, [esp+0ECh+var_B0]
.text:00408D1E                 mov     eax, [esp+0ECh+var_BC]
.text:00408D22                 mov     [esp+0ECh+var_C4], edi
.text:00408D26                 mov     ecx, [esp+0ECh+var_B8]
.text:00408D2A                 add     [esp+0ECh+var_C4], 1
.text:00408D2F                 mov     [esp+0ECh+var_C0], esi
.text:00408D33                 adc     [esp+0ECh+var_C0], 0
.text:00408D38                 mul     [esp+0ECh+var_C4]
.text:00408D3C                 mov     edi, [esp+0ECh+var_C0]
.text:00408D40                 mov     ebx, edx
.text:00408D42                 mov     edx, [esp+0ECh+var_C4]
.text:00408D46                 mov     esi, eax
.text:00408D48                 mov     eax, ebx
.text:00408D4A                 imul    ecx, edx
.text:00408D4D                 mov     edx, [esp+0ECh+var_BC]
.text:00408D51                 imul    edx, edi
.text:00408D54                 add     eax, ecx
.text:00408D56                 lea     edi, [edx+eax]
.text:00408D59
.text:00408D59 loc_408D59:                             ; CODE XREF: sub_4089C0+3D5↓j
.text:00408D59                 mov     [ebp+58h], esi
.text:00408D5C                 xor     eax, eax
.text:00408D5E                 mov     [ebp+5Ch], edi
.text:00408D61
.text:00408D61 loc_408D61:                             ; CODE XREF: sub_4089C0+20↑j
.text:00408D61                 add     esp, 0DCh
.text:00408D67                 pop     ebx
.text:00408D68                 pop     esi
.text:00408D69                 pop     edi
.text:00408D6A                 pop     ebp
.text:00408D6B                 retn
.text:00408D6B ; ---------------------------------------------------------------------------
.text:00408D6C                 align 10h
.text:00408D70
.text:00408D70 loc_408D70:                             ; CODE XREF: sub_4089C0+354↑j
.text:00408D70                 mov     eax, [esp+0ECh+var_B4]
.text:00408D74                 mov     edi, [esp+0ECh+var_B8]
.text:00408D78                 mov     ebx, [esp+0ECh+var_B4]
.text:00408D7C                 mul     [esp+0ECh+var_BC]
.text:00408D80                 mov     ecx, [esp+0ECh+var_BC]
.text:00408D84                 imul    ebx, edi
.text:00408D87                 mov     esi, eax
.text:00408D89                 mov     eax, [esp+0ECh+var_B0]
.text:00408D8D                 add     edx, ebx
.text:00408D8F                 imul    ecx, eax
.text:00408D92                 lea     edi, [ecx+edx]
.text:00408D95                 jmp     short loc_408D59
.text:00408D97 ; ---------------------------------------------------------------------------
.text:00408D97
.text:00408D97 loc_408D97:                             ; CODE XREF: sub_4089C0+2C1↑j
.text:00408D97                 add     eax, 1FFh
.text:00408D9C                 adc     edx, 0
.text:00408D9F                 jmp     loc_408C87
.text:00408DA4 ; ---------------------------------------------------------------------------
.text:00408DA4
.text:00408DA4 loc_408DA4:                             ; CODE XREF: sub_4089C0+A9↑j
.text:00408DA4                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00408DA7                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00408DAE                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:00408DB2                 call    GetFileSize
.text:00408DB7                 sub     esp, 8
.text:00408DBA                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:00408DC1                 jmp     loc_408A70
.text:00408DC6 ; ---------------------------------------------------------------------------
.text:00408DC6
.text:00408DC6 loc_408DC6:                             ; CODE XREF: sub_4089C0+96↑j
.text:00408DC6                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:00408DCE                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:00408DD2                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:00408DDA                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:00408DDE                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:00408DE6                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:00408DEE                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:00408DF6                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:00408DF9                 call    PeekNamedPipe
.text:00408DFE                 sub     esp, 18h
.text:00408E01                 test    eax, eax
.text:00408E03                 jz      short loc_408E1E
.text:00408E05                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:00408E09                 xor     eax, eax
.text:00408E0B                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:00408E12                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:00408E19                 jmp     loc_408A5C
.text:00408E1E ; ---------------------------------------------------------------------------
.text:00408E1E
.text:00408E1E loc_408E1E:                             ; CODE XREF: sub_4089C0+443↑j
.text:00408E1E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00408E25                 jmp     loc_408A5C
.text:00408E25 ; ---------------------------------------------------------------------------
.text:00408E2A                 align 10h
.text:00408E30
.text:00408E30 loc_408E30:                             ; CODE XREF: sub_4089C0+59↑j
.text:00408E30                 mov     edx, 1000h
.text:00408E35                 jmp     loc_408A1F
.text:00408E35 ; ---------------------------------------------------------------------------
.text:00408E3A                 align 10h
.text:00408E40
.text:00408E40 loc_408E40:                             ; CODE XREF: sub_4089C0+50↑j
.text:00408E40                 mov     edx, 2000h
.text:00408E45                 jmp     loc_408A1F
.text:00408E45 sub_4089C0      endp
.text:00408E45
.text:00408E45 ; ---------------------------------------------------------------------------
.text:00408E4A aLnk_0          db '.lnk',0             ; DATA XREF: sub_408E90+E0↓o
.text:00408E4A                                         ; .text:0040953A↓o ...
.text:00408E4F ; const CHAR aKernel32[]
.text:00408E4F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_408E90+12D↓o
.text:00408E4F                                         ; .text:00409BEB↓o
.text:00408E58 ; const CHAR aGetcompressedf[]
.text:00408E58 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00408E58                                         ; DATA XREF: sub_408E90+13E↓o
.text:00408E58                                         ; .text:00409BFC↓o
.text:00408E6F ; const CHAR aGetbinarytypea[]
.text:00408E6F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_408E90+333↓o
.text:00408E6F                                         ; .text:00409596↓o ...
.text:00408E7E ; const char aPathext[]
.text:00408E7E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_408E90:loc_409277↓o
.text:00408E7E                                         ; .text:loc_409640↓o ...
.text:00408E86                 align 10h
.text:00408E90
.text:00408E90 ; =============== S U B R O U T I N E =======================================
.text:00408E90
.text:00408E90
.text:00408E90 ; int __cdecl sub_408E90(char *String1, int)
.text:00408E90 sub_408E90      proc near               ; CODE XREF: sub_409C70+3CD↓p
.text:00408E90                                         ; sub_407940+2815↓p
.text:00408E90
.text:00408E90 Str             = dword ptr -6Ch
.text:00408E90 lpProcName      = dword ptr -68h
.text:00408E90 var_64          = dword ptr -64h
.text:00408E90 var_60          = dword ptr -60h
.text:00408E90 var_5C          = dword ptr -5Ch
.text:00408E90 var_4C          = dword ptr -4Ch
.text:00408E90 var_48          = dword ptr -48h
.text:00408E90 var_44          = dword ptr -44h
.text:00408E90 var_40          = dword ptr -40h
.text:00408E90 var_3C          = dword ptr -3Ch
.text:00408E90 var_38          = dword ptr -38h
.text:00408E90 lpRootPathName  = dword ptr -30h
.text:00408E90 var_2C          = byte ptr -2Ch
.text:00408E90 var_28          = dword ptr -28h
.text:00408E90 var_24          = dword ptr -24h
.text:00408E90 var_20          = dword ptr -20h
.text:00408E90 var_1C          = dword ptr -1Ch
.text:00408E90 var_18          = byte ptr -18h
.text:00408E90 String1         = dword ptr  4
.text:00408E90 arg_4           = dword ptr  8
.text:00408E90
.text:00408E90                 push    ebp
.text:00408E91                 push    edi
.text:00408E92                 push    esi
.text:00408E93                 push    ebx
.text:00408E94                 sub     esp, 5Ch
.text:00408E97                 mov     edx, [esp+6Ch+String1]
.text:00408E9B                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00408E9E                 call    sub_40AF40
.text:00408EA3                 mov     [esp+6Ch+Str], eax
.text:00408EA6                 call    sub_408270
.text:00408EAB                 mov     [esp+6Ch+lpRootPathName], eax
.text:00408EAF                 test    eax, eax
.text:00408EB1                 jz      loc_4090E3
.text:00408EB7                 mov     [esp+6Ch+Str], eax ; Str
.text:00408EBA                 call    strlen
.text:00408EBF                 mov     edx, [esp+6Ch+arg_4]
.text:00408EC3                 mov     ebx, eax
.text:00408EC5                 mov     esi, [edx+0Ch]
.text:00408EC8                 mov     edi, [edx+8]
.text:00408ECB                 mov     eax, esi
.text:00408ECD                 or      eax, edi
.text:00408ECF                 jz      loc_4092F0
.text:00408ED5                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:00408ED9                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:00408EDC                 call    GetDriveTypeA
.text:00408EE1                 sub     esp, 4
.text:00408EE4                 cmp     eax, 4
.text:00408EE7                 jz      loc_4092F0
.text:00408EED
.text:00408EED loc_408EED:                             ; CODE XREF: sub_408E90+48A↓j
.text:00408EED                                         ; sub_408E90+4B2↓j
.text:00408EED                 mov     edx, [esp+6Ch+arg_4]
.text:00408EF1                 mov     esi, [edx+14h]
.text:00408EF4                 mov     edi, [edx+10h]
.text:00408EF7                 mov     ecx, esi
.text:00408EF9                 or      ecx, edi
.text:00408EFB                 jnz     short loc_408F25
.text:00408EFD                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:00408F01                 xor     esi, esi
.text:00408F03                 xor     edi, edi
.text:00408F05                 test    ebp, ebp
.text:00408F07                 jz      short loc_408F17
.text:00408F09                 movzx   ebx, byte ptr [ebp+0]
.text:00408F0D                 test    bl, bl
.text:00408F0F                 mov     cl, bl
.text:00408F11                 jnz     loc_4092A1
.text:00408F17
.text:00408F17 loc_408F17:                             ; CODE XREF: sub_408E90+77↑j
.text:00408F17                 xor     eax, eax
.text:00408F19                 xor     edx, edx
.text:00408F1B
.text:00408F1B loc_408F1B:                             ; CODE XREF: sub_408E90+458↓j
.text:00408F1B                 mov     ebp, [esp+6Ch+arg_4]
.text:00408F1F                 mov     [ebp+10h], eax
.text:00408F22                 mov     [ebp+14h], edx
.text:00408F25
.text:00408F25 loc_408F25:                             ; CODE XREF: sub_408E90+6B↑j
.text:00408F25                 mov     edi, [esp+6Ch+String1]
.text:00408F29                 xor     ebx, ebx
.text:00408F2B                 test    edi, edi
.text:00408F2D                 jz      loc_4091A3
.text:00408F33                 mov     esi, [esp+6Ch+String1]
.text:00408F37                 cmp     byte ptr [esi], 0
.text:00408F3A                 jnz     loc_4091B0
.text:00408F40
.text:00408F40 loc_408F40:                             ; CODE XREF: sub_408E90+38C↓j
.text:00408F40                                         ; sub_408E90+397↓j
.text:00408F40                 mov     ebp, [esp+6Ch+String1]
.text:00408F44                 test    ebp, ebp
.text:00408F46                 jz      loc_4091A3
.text:00408F4C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00408F54                 mov     edi, [esp+6Ch+String1]
.text:00408F58                 mov     [esp+6Ch+Str], edi ; Str
.text:00408F5B                 call    strrchr
.text:00408F60                 test    eax, eax
.text:00408F62                 jz      loc_4091A3
.text:00408F68                 cld
.text:00408F69                 mov     ecx, 5
.text:00408F6E                 mov     esi, eax
.text:00408F70                 mov     edi, offset aLnk_0 ; ".lnk"
.text:00408F75                 repe cmpsb
.text:00408F77                 setz    cl
.text:00408F7A                 movzx   eax, cl
.text:00408F7D                 lea     esi, [esi+0]
.text:00408F80
.text:00408F80 loc_408F80:                             ; CODE XREF: sub_408E90+315↓j
.text:00408F80                 test    eax, eax
.text:00408F82                 jz      short loc_408F8A
.text:00408F84                 or      ebx, 0A000h
.text:00408F8A
.text:00408F8A loc_408F8A:                             ; CODE XREF: sub_408E90+F2↑j
.text:00408F8A                 mov     esi, [esp+6Ch+arg_4]
.text:00408F8E                 xor     ecx, ecx
.text:00408F90                 mov     edi, ds:dword_4111A0
.text:00408F96                 or      [esi], ebx
.text:00408F98                 mov     ebx, [esi+14h]
.text:00408F9B                 mov     ebp, [esi+10h]
.text:00408F9E                 mov     eax, ebx
.text:00408FA0                 xor     eax, ecx
.text:00408FA2                 xor     ebp, edi
.text:00408FA4                 or      eax, ebp
.text:00408FA6                 jnz     loc_409130
.text:00408FAC
.text:00408FAC loc_408FAC:                             ; CODE XREF: sub_408E90+30E↓j
.text:00408FAC                 mov     ecx, dword_410050
.text:00408FB2                 xor     esi, esi
.text:00408FB4                 xor     edi, edi
.text:00408FB6                 mov     edx, [esp+6Ch+arg_4]
.text:00408FBA                 mov     [edx+50h], ecx
.text:00408FBD                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:00408FC4                 call    LoadLibraryA
.text:00408FC9                 sub     esp, 4
.text:00408FCC                 mov     ebp, eax
.text:00408FCE                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00408FD6                 mov     [esp+6Ch+Str], eax ; hModule
.text:00408FD9                 call    GetProcAddress
.text:00408FDE                 sub     esp, 8
.text:00408FE1                 test    eax, eax
.text:00408FE3                 jz      short loc_409018
.text:00408FE5                 mov     ebx, [esp+6Ch+String1]
.text:00408FE9                 lea     esi, [esp+6Ch+var_2C]
.text:00408FED                 mov     [esp+6Ch+lpProcName], esi
.text:00408FF1                 mov     [esp+6Ch+Str], ebx
.text:00408FF4                 call    eax
.text:00408FF6                 sub     esp, 8
.text:00408FF9                 mov     ebx, eax
.text:00408FFB                 cmp     eax, 0FFFFFFFFh
.text:00408FFE                 jz      loc_409119
.text:00409004
.text:00409004 loc_409004:                             ; CODE XREF: sub_408E90+29A↓j
.text:00409004                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:00409008                 mov     ecx, ebx
.text:0040900A                 xor     edi, edi
.text:0040900C                 xor     ebx, ebx
.text:0040900E                 mov     edx, esi
.text:00409010                 mov     esi, ecx
.text:00409012                 or      esi, edi
.text:00409014                 mov     edi, ebx
.text:00409016                 or      edi, edx
.text:00409018
.text:00409018 loc_409018:                             ; CODE XREF: sub_408E90+153↑j
.text:00409018                                         ; sub_408E90+294↓j
.text:00409018                 test    ebp, ebp
.text:0040901A                 jz      short loc_409027
.text:0040901C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040901F                 call    FreeLibrary
.text:00409024                 sub     esp, 4
.text:00409027
.text:00409027 loc_409027:                             ; CODE XREF: sub_408E90+18A↑j
.text:00409027                 mov     ebp, edi
.text:00409029                 mov     edx, ebp
.text:0040902B                 mov     edi, esi
.text:0040902D                 or      edx, esi
.text:0040902F                 jnz     short loc_40903B
.text:00409031                 mov     eax, [esp+6Ch+arg_4]
.text:00409035                 mov     edi, [eax+30h]
.text:00409038                 mov     ebp, [eax+34h]
.text:0040903B
.text:0040903B loc_40903B:                             ; CODE XREF: sub_408E90+19F↑j
.text:0040903B                 mov     [esp+6Ch+lpProcName], ebp
.text:0040903F                 mov     ebx, dword_410050
.text:00409045                 xor     esi, esi
.text:00409047                 mov     [esp+6Ch+var_60], esi
.text:0040904B                 mov     [esp+6Ch+Str], edi
.text:0040904E                 mov     [esp+6Ch+var_64], ebx
.text:00409052                 call    sub_40EBA0
.text:00409057                 mov     [esp+6Ch+var_3C], eax
.text:0040905B                 mov     ecx, dword_410050
.text:00409061                 mov     [esp+6Ch+lpProcName], ebp
.text:00409065                 mov     [esp+6Ch+var_38], edx
.text:00409069                 shr     ecx, 9
.text:0040906C                 mov     [esp+6Ch+var_44], ecx
.text:00409070                 mov     [esp+6Ch+var_40], 0
.text:00409078                 mov     [esp+6Ch+var_64], ebx
.text:0040907C                 mov     [esp+6Ch+var_60], esi
.text:00409080                 mov     [esp+6Ch+Str], edi
.text:00409083                 call    sub_40ECC0
.text:00409088                 mov     ebp, edx
.text:0040908A                 or      ebp, eax
.text:0040908C                 jz      short loc_4090F0
.text:0040908E                 mov     ebp, [esp+6Ch+var_3C]
.text:00409092                 mov     esi, [esp+6Ch+var_38]
.text:00409096                 mov     eax, [esp+6Ch+var_44]
.text:0040909A                 mov     [esp+6Ch+var_4C], ebp
.text:0040909E                 mov     ecx, [esp+6Ch+var_40]
.text:004090A2                 mov     ebx, [esp+6Ch+var_44]
.text:004090A6                 add     [esp+6Ch+var_4C], 1
.text:004090AB                 mov     [esp+6Ch+var_48], esi
.text:004090AF                 mov     edi, [esp+6Ch+var_4C]
.text:004090B3                 adc     [esp+6Ch+var_48], 0
.text:004090B8                 mul     [esp+6Ch+var_4C]
.text:004090BC                 imul    ecx, edi
.text:004090BF                 mov     esi, eax
.text:004090C1                 mov     eax, [esp+6Ch+var_48]
.text:004090C5                 add     edx, ecx
.text:004090C7                 imul    ebx, eax
.text:004090CA                 lea     edi, [ebx+edx]
.text:004090CD
.text:004090CD loc_4090CD:                             ; CODE XREF: sub_408E90+287↓j
.text:004090CD                 mov     ebx, [esp+6Ch+arg_4]
.text:004090D1                 mov     [ebx+58h], esi
.text:004090D4                 mov     esi, [esp+6Ch+lpRootPathName]
.text:004090D8                 mov     [ebx+5Ch], edi
.text:004090DB                 mov     [esp+6Ch+Str], esi ; Block
.text:004090DE                 call    free
.text:004090E3
.text:004090E3 loc_4090E3:                             ; CODE XREF: sub_408E90+21↑j
.text:004090E3                 add     esp, 5Ch
.text:004090E6                 xor     eax, eax
.text:004090E8                 pop     ebx
.text:004090E9                 pop     esi
.text:004090EA                 pop     edi
.text:004090EB                 pop     ebp
.text:004090EC                 retn
.text:004090EC ; ---------------------------------------------------------------------------
.text:004090ED                 align 10h
.text:004090F0
.text:004090F0 loc_4090F0:                             ; CODE XREF: sub_408E90+1FC↑j
.text:004090F0                 mov     eax, [esp+6Ch+var_3C]
.text:004090F4                 mov     edi, [esp+6Ch+var_40]
.text:004090F8                 mov     ecx, [esp+6Ch+var_3C]
.text:004090FC                 mul     [esp+6Ch+var_44]
.text:00409100                 mov     ebx, [esp+6Ch+var_44]
.text:00409104                 imul    ecx, edi
.text:00409107                 mov     ebp, edx
.text:00409109                 mov     esi, eax
.text:0040910B                 mov     edx, [esp+6Ch+var_38]
.text:0040910F                 add     ebp, ecx
.text:00409111                 imul    ebx, edx
.text:00409114                 lea     edi, [ebx+ebp]
.text:00409117                 jmp     short loc_4090CD
.text:00409119 ; ---------------------------------------------------------------------------
.text:00409119
.text:00409119 loc_409119:                             ; CODE XREF: sub_408E90+16E↑j
.text:00409119                 call    GetLastError
.text:0040911E                 xor     esi, esi
.text:00409120                 xor     edi, edi
.text:00409122                 test    eax, eax
.text:00409124                 jnz     loc_409018
.text:0040912A                 jmp     loc_409004
.text:0040912A ; ---------------------------------------------------------------------------
.text:0040912F                 align 10h
.text:00409130
.text:00409130 loc_409130:                             ; CODE XREF: sub_408E90+116↑j
.text:00409130                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00409134                 lea     ecx, [esp+6Ch+var_20]
.text:00409138                 lea     ebx, [esp+6Ch+var_1C]
.text:0040913C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00409140                 lea     edi, [esp+6Ch+var_24]
.text:00409144                 lea     ebp, [esp+6Ch+var_28]
.text:00409148                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040914C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:00409150                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:00409154                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00409157                 call    sub_40B960
.text:0040915C                 test    eax, eax
.text:0040915E                 jnz     short loc_409180
.text:00409160                 mov     [esp+6Ch+var_28], 1
.text:00409168                 mov     [esp+6Ch+var_24], 200h
.text:00409170                 mov     [esp+6Ch+var_20], 0
.text:00409178                 mov     [esp+6Ch+var_1C], 0
.text:00409180
.text:00409180 loc_409180:                             ; CODE XREF: sub_408E90+2CE↑j
.text:00409180                 mov     ebp, [esp+6Ch+var_24]
.text:00409184                 mov     edi, [esp+6Ch+var_28]
.text:00409188                 mov     eax, [esp+6Ch+arg_4]
.text:0040918C                 imul    ebp, edi
.text:0040918F                 mov     esi, [eax+10h]
.text:00409192                 mov     dword_410050, ebp
.text:00409198                 mov     ds:dword_4111A0, esi
.text:0040919E                 jmp     loc_408FAC
.text:004091A3 ; ---------------------------------------------------------------------------
.text:004091A3
.text:004091A3 loc_4091A3:                             ; CODE XREF: sub_408E90+9D↑j
.text:004091A3                                         ; sub_408E90+B6↑j ...
.text:004091A3                 xor     eax, eax
.text:004091A5                 jmp     loc_408F80
.text:004091A5 ; ---------------------------------------------------------------------------
.text:004091AA                 align 10h
.text:004091B0
.text:004091B0 loc_4091B0:                             ; CODE XREF: sub_408E90+AA↑j
.text:004091B0                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:004091B7                 xor     ebp, ebp
.text:004091B9                 call    GetModuleHandleA
.text:004091BE                 sub     esp, 4
.text:004091C1                 mov     edi, eax
.text:004091C3                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004091CB                 mov     [esp+6Ch+Str], eax ; hModule
.text:004091CE                 call    GetProcAddress
.text:004091D3                 sub     esp, 8
.text:004091D6                 mov     edx, eax
.text:004091D8                 test    eax, eax
.text:004091DA                 jz      short loc_4091F4
.text:004091DC                 mov     eax, [esp+6Ch+String1]
.text:004091E0                 lea     ecx, [esp+6Ch+var_18]
.text:004091E4                 mov     [esp+6Ch+lpProcName], ecx
.text:004091E8                 mov     [esp+6Ch+Str], eax
.text:004091EB                 call    edx
.text:004091ED                 sub     esp, 8
.text:004091F0                 test    eax, eax
.text:004091F2                 jnz     short loc_409258
.text:004091F4
.text:004091F4 loc_4091F4:                             ; CODE XREF: sub_408E90+34A↑j
.text:004091F4                 mov     edx, ds:Str
.text:004091FA                 test    edx, edx
.text:004091FC                 jz      short loc_409277
.text:004091FE
.text:004091FE loc_4091FE:                             ; CODE XREF: sub_408E90+3FA↓j
.text:004091FE                                         ; sub_408E90+40C↓j
.text:004091FE                 mov     eax, [esp+6Ch+String1]
.text:00409202                 test    eax, eax
.text:00409204                 jz      short loc_40920F
.text:00409206                 mov     esi, [esp+6Ch+String1]
.text:0040920A                 cmp     byte ptr [esi], 0
.text:0040920D                 jnz     short loc_40922C
.text:0040920F
.text:0040920F loc_40920F:                             ; CODE XREF: sub_408E90+374↑j
.text:0040920F                                         ; sub_408E90+3B0↓j ...
.text:0040920F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00409212                 call    FreeLibrary
.text:00409217                 sub     esp, 4
.text:0040921A                 test    ebp, ebp
.text:0040921C                 jz      loc_408F40
.text:00409222                 mov     ebx, 49h ; 'I'
.text:00409227                 jmp     loc_408F40
.text:0040922C ; ---------------------------------------------------------------------------
.text:0040922C
.text:0040922C loc_40922C:                             ; CODE XREF: sub_408E90+37D↑j
.text:0040922C                 mov     [esp+6Ch+Str], esi ; Str
.text:0040922F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00409237                 call    strrchr
.text:0040923C                 test    eax, eax
.text:0040923E                 mov     esi, eax
.text:00409240                 jz      short loc_40920F
.text:00409242                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:00409246                 mov     ecx, ds:Str
.text:0040924C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040924F                 call    strstr
.text:00409254                 test    eax, eax
.text:00409256                 jz      short loc_40925F
.text:00409258
.text:00409258 loc_409258:                             ; CODE XREF: sub_408E90+362↑j
.text:00409258                                         ; sub_408E90+3E5↓j
.text:00409258                 mov     ebp, 1
.text:0040925D                 jmp     short loc_40920F
.text:0040925F ; ---------------------------------------------------------------------------
.text:0040925F
.text:0040925F loc_40925F:                             ; CODE XREF: sub_408E90+3C6↑j
.text:0040925F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:00409263                 mov     edx, off_410054 ; ".com;.exe;.bat;.cmd"
.text:00409269                 mov     [esp+6Ch+Str], edx ; Str
.text:0040926C                 call    strstr
.text:00409271                 test    eax, eax
.text:00409273                 jz      short loc_40920F
.text:00409275                 jmp     short loc_409258
.text:00409277 ; ---------------------------------------------------------------------------
.text:00409277
.text:00409277 loc_409277:                             ; CODE XREF: sub_408E90+36C↑j
.text:00409277                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0040927E                 call    getenv
.text:00409283                 mov     ds:Str, eax
.text:00409288                 test    eax, eax
.text:0040928A                 jnz     loc_4091FE
.text:00409290                 mov     esi, off_410054 ; ".com;.exe;.bat;.cmd"
.text:00409296                 mov     ds:Str, esi
.text:0040929C                 jmp     loc_4091FE
.text:004092A1 ; ---------------------------------------------------------------------------
.text:004092A1
.text:004092A1 loc_4092A1:                             ; CODE XREF: sub_408E90+81↑j
.text:004092A1                                         ; sub_408E90+452↓j
.text:004092A1                 shld    edi, esi, 8
.text:004092A5                 movsx   eax, cl
.text:004092A8                 shl     esi, 8
.text:004092AB                 cdq
.text:004092AC                 add     esi, eax
.text:004092AE                 adc     edi, edx
.text:004092B0                 mov     edx, edi
.text:004092B2                 xor     ebx, ebx
.text:004092B4                 and     edx, 0FF000000h
.text:004092BA                 mov     eax, edx
.text:004092BC                 or      eax, ebx
.text:004092BE                 jz      short loc_4092D9
.text:004092C0                 mov     ecx, edx
.text:004092C2                 xor     eax, eax
.text:004092C4                 shr     ecx, 10h
.text:004092C7                 mov     edx, esi
.text:004092C9                 xor     edx, ecx
.text:004092CB                 mov     ecx, edi
.text:004092CD                 xor     ecx, eax
.text:004092CF                 mov     esi, edx
.text:004092D1                 mov     edi, ecx
.text:004092D3                 and     edi, 0FFFFFFh
.text:004092D9
.text:004092D9 loc_4092D9:                             ; CODE XREF: sub_408E90+42E↑j
.text:004092D9                 inc     ebp
.text:004092DA                 movzx   ebx, byte ptr [ebp+0]
.text:004092DE                 test    bl, bl
.text:004092E0                 mov     cl, bl
.text:004092E2                 jnz     short loc_4092A1
.text:004092E4                 mov     eax, esi
.text:004092E6                 mov     edx, edi
.text:004092E8                 jmp     loc_408F1B
.text:004092E8 ; ---------------------------------------------------------------------------
.text:004092ED                 align 10h
.text:004092F0
.text:004092F0 loc_4092F0:                             ; CODE XREF: sub_408E90+3F↑j
.text:004092F0                                         ; sub_408E90+57↑j
.text:004092F0                 mov     edi, [esp+6Ch+lpRootPathName]
.text:004092F4                 mov     ebp, [esp+6Ch+String1]
.text:004092F8                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:004092FC                 mov     [esp+6Ch+Str], ebp ; String1
.text:004092FF                 call    _stricmp
.text:00409304                 test    eax, eax
.text:00409306                 jnz     short loc_409320
.text:00409308                 mov     ebx, [esp+6Ch+arg_4]
.text:0040930C                 mov     dword ptr [ebx+8], 5
.text:00409313                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040931A                 jmp     loc_408EED
.text:0040931A ; ---------------------------------------------------------------------------
.text:0040931F                 align 10h
.text:00409320
.text:00409320 loc_409320:                             ; CODE XREF: sub_408E90+476↑j
.text:00409320                 mov     ebp, [esp+6Ch+String1]
.text:00409324                 xor     esi, esi
.text:00409326                 xor     edi, edi
.text:00409328                 add     ebp, ebx
.text:0040932A                 jz      short loc_409334
.text:0040932C                 movzx   ecx, byte ptr [ebp+0]
.text:00409330                 test    cl, cl
.text:00409332                 jnz     short loc_409347
.text:00409334
.text:00409334 loc_409334:                             ; CODE XREF: sub_408E90+49A↑j
.text:00409334                 xor     eax, eax
.text:00409336                 xor     edx, edx
.text:00409338
.text:00409338 loc_409338:                             ; CODE XREF: sub_408E90+4FE↓j
.text:00409338                 mov     ebp, [esp+6Ch+arg_4]
.text:0040933C                 mov     [ebp+8], eax
.text:0040933F                 mov     [ebp+0Ch], edx
.text:00409342                 jmp     loc_408EED
.text:00409347 ; ---------------------------------------------------------------------------
.text:00409347
.text:00409347 loc_409347:                             ; CODE XREF: sub_408E90+4A2↑j
.text:00409347                                         ; sub_408E90+4F8↓j
.text:00409347                 shld    edi, esi, 8
.text:0040934B                 movsx   eax, cl
.text:0040934E                 shl     esi, 8
.text:00409351                 cdq
.text:00409352                 add     esi, eax
.text:00409354                 adc     edi, edx
.text:00409356                 mov     edx, edi
.text:00409358                 xor     ebx, ebx
.text:0040935A                 and     edx, 0FF000000h
.text:00409360                 mov     eax, edx
.text:00409362                 or      eax, ebx
.text:00409364                 jz      short loc_40937F
.text:00409366                 mov     ecx, edx
.text:00409368                 xor     eax, eax
.text:0040936A                 shr     ecx, 10h
.text:0040936D                 mov     edx, esi
.text:0040936F                 xor     edx, ecx
.text:00409371                 mov     ecx, edi
.text:00409373                 xor     ecx, eax
.text:00409375                 mov     esi, edx
.text:00409377                 mov     edi, ecx
.text:00409379                 and     edi, 0FFFFFFh
.text:0040937F
.text:0040937F loc_40937F:                             ; CODE XREF: sub_408E90+4D4↑j
.text:0040937F                 inc     ebp
.text:00409380                 movzx   ebx, byte ptr [ebp+0]
.text:00409384                 test    bl, bl
.text:00409386                 mov     cl, bl
.text:00409388                 jnz     short loc_409347
.text:0040938A                 mov     eax, esi
.text:0040938C                 mov     edx, edi
.text:0040938E                 jmp     short loc_409338
.text:0040938E sub_408E90      endp
.text:0040938E
.text:00409390
.text:00409390 ; =============== S U B R O U T I N E =======================================
.text:00409390
.text:00409390
.text:00409390 ; int __cdecl sub_409390(LPCSTR)
.text:00409390 sub_409390      proc near               ; CODE XREF: sub_40B060+CA↓p
.text:00409390
.text:00409390 lpRootPathName  = dword ptr -83Ch
.text:00409390 lpVolumeNameBuffer= dword ptr -838h
.text:00409390 nVolumeNameSize = dword ptr -834h
.text:00409390 lpVolumeSerialNumber= dword ptr -830h
.text:00409390 lpMaximumComponentLength= dword ptr -82Ch
.text:00409390 lpFileSystemFlags= dword ptr -828h
.text:00409390 lpFileSystemNameBuffer= dword ptr -824h
.text:00409390 nFileSystemNameSize= dword ptr -820h
.text:00409390 VolumeSerialNumber= dword ptr -818h
.text:00409390 MaximumComponentLength= dword ptr -814h
.text:00409390 FileSystemFlags = dword ptr -810h
.text:00409390 FileSystemNameBuffer= byte ptr -80Ch
.text:00409390 VolumeNameBuffer= byte ptr -40Ch
.text:00409390 var_4           = dword ptr -4
.text:00409390 arg_0           = dword ptr  4
.text:00409390
.text:00409390                 sub     esp, 83Ch
.text:00409396                 mov     [esp+83Ch+var_4], ebx
.text:0040939D                 mov     ebx, [esp+83Ch+arg_0]
.text:004093A4                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:004093A7                 call    sub_40AF40
.text:004093AC                 mov     [esp+83Ch+lpRootPathName], eax
.text:004093AF                 call    sub_408270
.text:004093B4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:004093B7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:004093BB                 mov     ebx, eax
.text:004093BD                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:004093C1                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:004093C5                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:004093C9                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:004093CD                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:004093D1                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:004093D5                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:004093DC                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:004093E0                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:004093E4                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:004093EC                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:004093F4                 call    GetVolumeInformationA
.text:004093F9                 sub     esp, 20h
.text:004093FC                 test    eax, eax
.text:004093FE                 setz    cl
.text:00409401                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:00409404                 movzx   edx, cl
.text:00409407                 dec     edx
.text:00409408                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0040940C                 call    free
.text:00409411                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00409415                 mov     ebx, [esp+83Ch+var_4]
.text:0040941C                 add     esp, 83Ch
.text:00409422                 retn
.text:00409422 sub_409390      endp
.text:00409422
.text:00409422 ; ---------------------------------------------------------------------------
.text:00409423                 align 10h
.text:00409430                 push    ebp
.text:00409431                 push    edi
.text:00409432                 xor     edi, edi
.text:00409434                 push    esi
.text:00409435                 xor     esi, esi
.text:00409437                 push    ebx
.text:00409438                 mov     ebp, [esp+14h]
.text:0040943C                 test    ebp, ebp
.text:0040943E                 jz      short loc_409448
.text:00409440                 movzx   ecx, byte ptr [ebp+0]
.text:00409444                 test    cl, cl
.text:00409446                 jnz     short loc_409451
.text:00409448
.text:00409448 loc_409448:                             ; CODE XREF: .text:0040943E↑j
.text:00409448                 xor     eax, eax
.text:0040944A                 xor     edx, edx
.text:0040944C
.text:0040944C loc_40944C:                             ; CODE XREF: .text:00409498↓j
.text:0040944C                 pop     ebx
.text:0040944D                 pop     esi
.text:0040944E                 pop     edi
.text:0040944F                 pop     ebp
.text:00409450                 retn
.text:00409451 ; ---------------------------------------------------------------------------
.text:00409451
.text:00409451 loc_409451:                             ; CODE XREF: .text:00409446↑j
.text:00409451                                         ; .text:00409492↓j
.text:00409451                 shld    edi, esi, 8
.text:00409455                 movsx   eax, cl
.text:00409458                 shl     esi, 8
.text:0040945B                 cdq
.text:0040945C                 add     esi, eax
.text:0040945E                 adc     edi, edx
.text:00409460                 mov     edx, edi
.text:00409462                 xor     ebx, ebx
.text:00409464                 and     edx, 0FF000000h
.text:0040946A                 mov     eax, edx
.text:0040946C                 or      eax, ebx
.text:0040946E                 jz      short loc_409489
.text:00409470                 mov     ecx, edx
.text:00409472                 xor     eax, eax
.text:00409474                 shr     ecx, 10h
.text:00409477                 mov     edx, esi
.text:00409479                 xor     edx, ecx
.text:0040947B                 mov     ecx, edi
.text:0040947D                 xor     ecx, eax
.text:0040947F                 mov     esi, edx
.text:00409481                 mov     edi, ecx
.text:00409483                 and     edi, 0FFFFFFh
.text:00409489
.text:00409489 loc_409489:                             ; CODE XREF: .text:0040946E↑j
.text:00409489                 inc     ebp
.text:0040948A                 movzx   ebx, byte ptr [ebp+0]
.text:0040948E                 test    bl, bl
.text:00409490                 mov     cl, bl
.text:00409492                 jnz     short loc_409451
.text:00409494                 mov     eax, esi
.text:00409496                 mov     edx, edi
.text:00409498                 jmp     short loc_40944C
.text:00409498 ; ---------------------------------------------------------------------------
.text:0040949A                 align 10h
.text:004094A0                 sub     esp, 2Ch
.text:004094A3                 lea     edx, [esp+24h]
.text:004094A7                 lea     ecx, [esp+28h]
.text:004094AB                 mov     [esp+0Ch], edx
.text:004094AF                 lea     edx, [esp+1Ch]
.text:004094B3                 mov     [esp+4], edx
.text:004094B7                 mov     edx, [esp+30h]
.text:004094BB                 mov     [esp+10h], ecx
.text:004094BF                 lea     ecx, [esp+20h]
.text:004094C3                 mov     [esp+8], ecx
.text:004094C7                 mov     [esp], edx
.text:004094CA                 call    sub_40B960
.text:004094CF                 test    eax, eax
.text:004094D1                 jnz     short loc_4094F3
.text:004094D3                 mov     dword ptr [esp+1Ch], 1
.text:004094DB                 mov     dword ptr [esp+20h], 200h
.text:004094E3                 mov     dword ptr [esp+24h], 0
.text:004094EB                 mov     dword ptr [esp+28h], 0
.text:004094F3
.text:004094F3 loc_4094F3:                             ; CODE XREF: .text:004094D1↑j
.text:004094F3                 mov     eax, [esp+20h]
.text:004094F7                 mov     ecx, [esp+1Ch]
.text:004094FB                 add     esp, 2Ch
.text:004094FE                 imul    eax, ecx
.text:00409501                 retn
.text:00409501 ; ---------------------------------------------------------------------------
.text:00409502                 align 10h
.text:00409510                 sub     esp, 1Ch
.text:00409513                 mov     eax, [esp+20h]
.text:00409517                 mov     [esp+14h], esi
.text:0040951B                 mov     [esp+18h], edi
.text:0040951F                 test    eax, eax
.text:00409521                 jz      short loc_409560
.text:00409523                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040952B                 mov     [esp], eax
.text:0040952E                 call    strrchr
.text:00409533                 test    eax, eax
.text:00409535                 jz      short loc_409560
.text:00409537                 cld
.text:00409538                 mov     esi, eax
.text:0040953A                 mov     edi, offset aLnk_0 ; ".lnk"
.text:0040953F                 mov     ecx, 5
.text:00409544                 repe cmpsb
.text:00409546                 setz    dl
.text:00409549                 movzx   eax, dl
.text:0040954C                 lea     esi, [esi+0]
.text:00409550
.text:00409550 loc_409550:                             ; CODE XREF: .text:00409562↓j
.text:00409550                 mov     esi, [esp+14h]
.text:00409554                 mov     edi, [esp+18h]
.text:00409558                 add     esp, 1Ch
.text:0040955B                 retn
.text:0040955B ; ---------------------------------------------------------------------------
.text:0040955C                 align 10h
.text:00409560
.text:00409560 loc_409560:                             ; CODE XREF: .text:00409521↑j
.text:00409560                                         ; .text:00409535↑j
.text:00409560                 xor     eax, eax
.text:00409562                 jmp     short loc_409550
.text:00409562 ; ---------------------------------------------------------------------------
.text:00409564                 align 10h
.text:00409570                 sub     esp, 1Ch
.text:00409573                 mov     [esp+10h], ebx
.text:00409577                 mov     ebx, [esp+20h]
.text:0040957B                 mov     [esp+14h], esi
.text:0040957F                 mov     [esp+18h], edi
.text:00409583                 xor     edi, edi
.text:00409585                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040958C                 call    GetModuleHandleA
.text:00409591                 sub     esp, 4
.text:00409594                 mov     esi, eax
.text:00409596                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040959E                 mov     [esp], eax
.text:004095A1                 call    GetProcAddress
.text:004095A6                 sub     esp, 8
.text:004095A9                 test    eax, eax
.text:004095AB                 jz      short loc_4095C1
.text:004095AD                 mov     [esp], ebx
.text:004095B0                 lea     ecx, [esp+0Ch]
.text:004095B4                 mov     [esp+4], ecx
.text:004095B8                 call    eax
.text:004095BA                 sub     esp, 8
.text:004095BD                 test    eax, eax
.text:004095BF                 jnz     short loc_409620
.text:004095C1
.text:004095C1 loc_4095C1:                             ; CODE XREF: .text:004095AB↑j
.text:004095C1                 mov     eax, ds:Str
.text:004095C6                 test    eax, eax
.text:004095C8                 jz      short loc_409640
.text:004095CA
.text:004095CA loc_4095CA:                             ; CODE XREF: .text:00409653↓j
.text:004095CA                                         ; .text:00409665↓j
.text:004095CA                 test    ebx, ebx
.text:004095CC                 jz      short loc_4095D3
.text:004095CE                 cmp     byte ptr [ebx], 0
.text:004095D1                 jnz     short loc_4095F0
.text:004095D3
.text:004095D3 loc_4095D3:                             ; CODE XREF: .text:004095CC↑j
.text:004095D3                                         ; .text:00409604↓j ...
.text:004095D3                 mov     [esp], esi
.text:004095D6                 call    FreeLibrary
.text:004095DB                 sub     esp, 4
.text:004095DE                 mov     eax, edi
.text:004095E0                 mov     ebx, [esp+10h]
.text:004095E4                 mov     esi, [esp+14h]
.text:004095E8                 mov     edi, [esp+18h]
.text:004095EC                 add     esp, 1Ch
.text:004095EF                 retn
.text:004095F0 ; ---------------------------------------------------------------------------
.text:004095F0
.text:004095F0 loc_4095F0:                             ; CODE XREF: .text:004095D1↑j
.text:004095F0                 mov     [esp], ebx
.text:004095F3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:004095FB                 call    strrchr
.text:00409600                 test    eax, eax
.text:00409602                 mov     ebx, eax
.text:00409604                 jz      short loc_4095D3
.text:00409606                 mov     [esp+4], eax
.text:0040960A                 mov     ecx, ds:Str
.text:00409610                 mov     [esp], ecx
.text:00409613                 call    strstr
.text:00409618                 test    eax, eax
.text:0040961A                 jz      short loc_409627
.text:0040961C                 lea     esi, [esi+0]
.text:00409620
.text:00409620 loc_409620:                             ; CODE XREF: .text:004095BF↑j
.text:00409620                                         ; .text:0040963D↓j
.text:00409620                 mov     edi, 1
.text:00409625                 jmp     short loc_4095D3
.text:00409627 ; ---------------------------------------------------------------------------
.text:00409627
.text:00409627 loc_409627:                             ; CODE XREF: .text:0040961A↑j
.text:00409627                 mov     [esp+4], ebx
.text:0040962B                 mov     ebx, off_410054 ; ".com;.exe;.bat;.cmd"
.text:00409631                 mov     [esp], ebx
.text:00409634                 call    strstr
.text:00409639                 test    eax, eax
.text:0040963B                 jz      short loc_4095D3
.text:0040963D                 jmp     short loc_409620
.text:0040963D ; ---------------------------------------------------------------------------
.text:0040963F                 align 10h
.text:00409640
.text:00409640 loc_409640:                             ; CODE XREF: .text:004095C8↑j
.text:00409640                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00409647                 call    getenv
.text:0040964C                 mov     ds:Str, eax
.text:00409651                 test    eax, eax
.text:00409653                 jnz     loc_4095CA
.text:00409659                 mov     edx, off_410054 ; ".com;.exe;.bat;.cmd"
.text:0040965F                 mov     ds:Str, edx
.text:00409665                 jmp     loc_4095CA
.text:00409665 ; ---------------------------------------------------------------------------
.text:0040966A                 align 10h
.text:00409670                 sub     esp, 0Ch
.text:00409673                 mov     edx, [esp+10h]
.text:00409677                 mov     [esp], edx
.text:0040967A                 call    GetFileType
.text:0040967F                 sub     esp, 4
.text:00409682                 xor     edx, edx
.text:00409684                 cmp     eax, 2
.text:00409687                 jz      short loc_4096A0
.text:00409689                 cmp     eax, 3
.text:0040968C                 jz      short loc_409694
.text:0040968E
.text:0040968E loc_40968E:                             ; CODE XREF: .text:00409699↓j
.text:0040968E                                         ; .text:004096A5↓j
.text:0040968E                 mov     eax, edx
.text:00409690                 add     esp, 0Ch
.text:00409693                 retn
.text:00409694 ; ---------------------------------------------------------------------------
.text:00409694
.text:00409694 loc_409694:                             ; CODE XREF: .text:0040968C↑j
.text:00409694                 mov     edx, 1000h
.text:00409699                 jmp     short loc_40968E
.text:00409699 ; ---------------------------------------------------------------------------
.text:0040969B                 align 10h
.text:004096A0
.text:004096A0 loc_4096A0:                             ; CODE XREF: .text:00409687↑j
.text:004096A0                 mov     edx, 2000h
.text:004096A5                 jmp     short loc_40968E
.text:004096A5 ; ---------------------------------------------------------------------------
.text:004096A7                 align 10h
.text:004096B0                 mov     ecx, [esp+4]
.text:004096B4                 xor     edx, edx
.text:004096B6                 test    cl, 10h
.text:004096B9                 setz    dl
.text:004096BC                 dec     edx
.text:004096BD                 and     edx, 0FFFFC000h
.text:004096C3                 add     edx, 8000h
.text:004096C9                 or      edx, 124h
.text:004096CF                 test    cl, 1
.text:004096D2                 movzx   eax, dx
.text:004096D5                 jnz     short locret_4096DC
.text:004096D7                 or      eax, 92h
.text:004096DC
.text:004096DC locret_4096DC:                          ; CODE XREF: .text:004096D5↑j
.text:004096DC                 retn
.text:004096DC ; ---------------------------------------------------------------------------
.text:004096DD                 align 10h
.text:004096E0                 sub     esp, 2Ch
.text:004096E3                 mov     [esp+20h], esi
.text:004096E7                 mov     esi, [esp+30h]
.text:004096EB                 mov     [esp+1Ch], ebx
.text:004096EF                 xor     ebx, ebx
.text:004096F1                 test    esi, esi
.text:004096F3                 mov     [esp+24h], edi
.text:004096F7                 mov     [esp+28h], ebp
.text:004096FB                 jz      short loc_409750
.text:004096FD                 cmp     byte ptr [esi], 0
.text:00409700                 jnz     short loc_409754
.text:00409702
.text:00409702 loc_409702:                             ; CODE XREF: .text:004097BC↓j
.text:00409702                                         ; .text:004097C7↓j
.text:00409702                 test    esi, esi
.text:00409704                 jz      short loc_409750
.text:00409706                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040970E                 mov     [esp], esi
.text:00409711                 call    strrchr
.text:00409716                 test    eax, eax
.text:00409718                 jz      short loc_409750
.text:0040971A                 cld
.text:0040971B                 mov     ecx, 5
.text:00409720                 mov     esi, eax
.text:00409722                 mov     edi, offset aLnk_0 ; ".lnk"
.text:00409727                 repe cmpsb
.text:00409729                 setz    cl
.text:0040972C                 movzx   eax, cl
.text:0040972F                 nop
.text:00409730
.text:00409730 loc_409730:                             ; CODE XREF: .text:00409752↓j
.text:00409730                 test    eax, eax
.text:00409732                 jz      short loc_40973A
.text:00409734                 or      ebx, 0A000h
.text:0040973A
.text:0040973A loc_40973A:                             ; CODE XREF: .text:00409732↑j
.text:0040973A                 mov     eax, ebx
.text:0040973C                 mov     esi, [esp+20h]
.text:00409740                 mov     ebx, [esp+1Ch]
.text:00409744                 mov     edi, [esp+24h]
.text:00409748                 mov     ebp, [esp+28h]
.text:0040974C                 add     esp, 2Ch
.text:0040974F                 retn
.text:00409750 ; ---------------------------------------------------------------------------
.text:00409750
.text:00409750 loc_409750:                             ; CODE XREF: .text:004096FB↑j
.text:00409750                                         ; .text:00409704↑j ...
.text:00409750                 xor     eax, eax
.text:00409752                 jmp     short loc_409730
.text:00409754 ; ---------------------------------------------------------------------------
.text:00409754
.text:00409754 loc_409754:                             ; CODE XREF: .text:00409700↑j
.text:00409754                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040975B                 call    GetModuleHandleA
.text:00409760                 sub     esp, 4
.text:00409763                 mov     ebp, eax
.text:00409765                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040976D                 mov     [esp], eax
.text:00409770                 call    GetProcAddress
.text:00409775                 sub     esp, 8
.text:00409778                 test    eax, eax
.text:0040977A                 mov     dword ptr [esp+14h], 0
.text:00409782                 jz      short loc_409798
.text:00409784                 mov     [esp], esi
.text:00409787                 lea     ecx, [esp+18h]
.text:0040978B                 mov     [esp+4], ecx
.text:0040978F                 call    eax
.text:00409791                 sub     esp, 8
.text:00409794                 test    eax, eax
.text:00409796                 jnz     short loc_4097F8
.text:00409798
.text:00409798 loc_409798:                             ; CODE XREF: .text:00409782↑j
.text:00409798                 mov     edx, ds:Str
.text:0040979E                 test    edx, edx
.text:004097A0                 jz      short loc_409820
.text:004097A2
.text:004097A2 loc_4097A2:                             ; CODE XREF: .text:00409833↓j
.text:004097A2                                         ; .text:00409845↓j
.text:004097A2                 test    esi, esi
.text:004097A4                 jz      short loc_4097AB
.text:004097A6                 cmp     byte ptr [esi], 0
.text:004097A9                 jnz     short loc_4097CC
.text:004097AB
.text:004097AB loc_4097AB:                             ; CODE XREF: .text:004097A4↑j
.text:004097AB                                         ; .text:004097E0↓j ...
.text:004097AB                 mov     [esp], ebp
.text:004097AE                 call    FreeLibrary
.text:004097B3                 sub     esp, 4
.text:004097B6                 mov     eax, [esp+14h]
.text:004097BA                 test    eax, eax
.text:004097BC                 jz      loc_409702
.text:004097C2                 mov     ebx, 49h ; 'I'
.text:004097C7                 jmp     loc_409702
.text:004097CC ; ---------------------------------------------------------------------------
.text:004097CC
.text:004097CC loc_4097CC:                             ; CODE XREF: .text:004097A9↑j
.text:004097CC                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:004097D4                 mov     [esp], esi
.text:004097D7                 call    strrchr
.text:004097DC                 test    eax, eax
.text:004097DE                 mov     edi, eax
.text:004097E0                 jz      short loc_4097AB
.text:004097E2                 mov     [esp+4], eax
.text:004097E6                 mov     edx, ds:Str
.text:004097EC                 mov     [esp], edx
.text:004097EF                 call    strstr
.text:004097F4                 test    eax, eax
.text:004097F6                 jz      short loc_409802
.text:004097F8
.text:004097F8 loc_4097F8:                             ; CODE XREF: .text:00409796↑j
.text:004097F8                                         ; .text:00409818↓j
.text:004097F8                 mov     dword ptr [esp+14h], 1
.text:00409800                 jmp     short loc_4097AB
.text:00409802 ; ---------------------------------------------------------------------------
.text:00409802
.text:00409802 loc_409802:                             ; CODE XREF: .text:004097F6↑j
.text:00409802                 mov     [esp+4], edi
.text:00409806                 mov     edi, off_410054 ; ".com;.exe;.bat;.cmd"
.text:0040980C                 mov     [esp], edi
.text:0040980F                 call    strstr
.text:00409814                 test    eax, eax
.text:00409816                 jz      short loc_4097AB
.text:00409818                 jmp     short loc_4097F8
.text:00409818 ; ---------------------------------------------------------------------------
.text:0040981A                 align 10h
.text:00409820
.text:00409820 loc_409820:                             ; CODE XREF: .text:004097A0↑j
.text:00409820                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00409827                 call    getenv
.text:0040982C                 mov     ds:Str, eax
.text:00409831                 test    eax, eax
.text:00409833                 jnz     loc_4097A2
.text:00409839                 mov     ecx, off_410054 ; ".com;.exe;.bat;.cmd"
.text:0040983F                 mov     ds:Str, ecx
.text:00409845                 jmp     loc_4097A2
.text:00409845 ; ---------------------------------------------------------------------------
.text:0040984A                 align 10h
.text:00409850                 push    esi
.text:00409851                 push    ebx
.text:00409852                 sub     esp, 864h
.text:00409858                 mov     ebx, [esp+870h]
.text:0040985F                 lea     edx, [esp+830h]
.text:00409866                 mov     esi, [esp+874h]
.text:0040986D                 mov     [esp+4], edx
.text:00409871                 mov     [esp], ebx
.text:00409874                 call    sub_4086D0
.text:00409879                 xor     edx, edx
.text:0040987B                 test    eax, eax
.text:0040987D                 jz      loc_409965
.text:00409883                 mov     ecx, [esp+830h]
.text:0040988A                 test    cl, 10h
.text:0040988D                 mov     [esi], ecx
.text:0040988F                 mov     eax, [esp+834h]
.text:00409896                 mov     edx, [esp+838h]
.text:0040989D                 mov     [esi+4], eax
.text:004098A0                 mov     [esi+8], edx
.text:004098A3                 mov     eax, [esp+83Ch]
.text:004098AA                 mov     edx, [esp+840h]
.text:004098B1                 mov     [esi+0Ch], eax
.text:004098B4                 mov     [esi+10h], edx
.text:004098B7                 mov     edx, [esp+848h]
.text:004098BE                 mov     eax, [esp+844h]
.text:004098C5                 mov     [esi+18h], edx
.text:004098C8                 mov     [esi+14h], eax
.text:004098CB                 mov     edx, [esp+84Ch]
.text:004098D2                 mov     [esi+20h], edx
.text:004098D5                 mov     edx, [esp+850h]
.text:004098DC                 mov     [esi+24h], edx
.text:004098DF                 jnz     loc_409970
.text:004098E5                 mov     dword ptr [esi+28h], 1
.text:004098EC
.text:004098EC loc_4098EC:                             ; CODE XREF: .text:0040997B↓j
.text:004098EC                 mov     [esp], ebx
.text:004098EF                 call    sub_40AF40
.text:004098F4                 mov     [esp], eax
.text:004098F7                 call    sub_408270
.text:004098FC                 mov     [esp], eax
.text:004098FF                 lea     edx, [esp+30h]
.text:00409903                 mov     ebx, eax
.text:00409905                 mov     [esp+18h], edx
.text:00409909                 lea     ecx, [esp+2Ch]
.text:0040990D                 lea     edx, [esp+28h]
.text:00409911                 mov     [esp+14h], ecx
.text:00409915                 lea     ecx, [esp+24h]
.text:00409919                 mov     [esp+10h], edx
.text:0040991D                 lea     edx, [esp+430h]
.text:00409924                 mov     [esp+0Ch], ecx
.text:00409928                 mov     [esp+4], edx
.text:0040992C                 mov     dword ptr [esp+1Ch], 400h
.text:00409934                 mov     dword ptr [esp+8], 400h
.text:0040993C                 call    GetVolumeInformationA
.text:00409941                 sub     esp, 20h
.text:00409944                 test    eax, eax
.text:00409946                 setz    cl
.text:00409949                 mov     [esp], ebx
.text:0040994C                 movzx   edx, cl
.text:0040994F                 dec     edx
.text:00409950                 and     [esp+24h], edx
.text:00409954                 call    free
.text:00409959                 mov     ecx, [esp+24h]
.text:0040995D                 mov     edx, 1
.text:00409962                 mov     [esi+1Ch], ecx
.text:00409965
.text:00409965 loc_409965:                             ; CODE XREF: .text:0040987D↑j
.text:00409965                 add     esp, 864h
.text:0040996B                 mov     eax, edx
.text:0040996D                 pop     ebx
.text:0040996E                 pop     esi
.text:0040996F                 retn
.text:00409970 ; ---------------------------------------------------------------------------
.text:00409970
.text:00409970 loc_409970:                             ; CODE XREF: .text:004098DF↑j
.text:00409970                 mov     [esp], ebx
.text:00409973                 call    sub_408840
.text:00409978                 mov     [esi+28h], eax
.text:0040997B                 jmp     loc_4098EC
.text:00409980 ; ---------------------------------------------------------------------------
.text:00409980                 push    ebp
.text:00409981                 xor     edx, edx
.text:00409983                 push    edi
.text:00409984                 push    esi
.text:00409985                 xor     esi, esi
.text:00409987                 push    ebx
.text:00409988                 sub     esp, 1Ch
.text:0040998B                 mov     ebx, [esp+5Ch]
.text:0040998F                 mov     ecx, [esp+30h]
.text:00409993                 mov     edi, [esp+60h]
.text:00409997                 or      esi, ebx
.text:00409999                 mov     eax, [esp+4Ch]
.text:0040999D                 or      edi, edx
.text:0040999F                 mov     ebx, [esp+64h]
.text:004099A3                 xor     edx, edx
.text:004099A5                 test    cl, 10h
.text:004099A8                 setz    dl
.text:004099AB                 mov     [ebx+10h], eax
.text:004099AE                 mov     [ebx+8], edi
.text:004099B1                 mov     [ebx+0Ch], esi
.text:004099B4                 dec     edx
.text:004099B5                 and     edx, 0FFFFC000h
.text:004099BB                 mov     dword ptr [ebx+14h], 0
.text:004099C2                 add     edx, 8000h
.text:004099C8                 or      edx, 124h
.text:004099CE                 test    cl, 1
.text:004099D1                 movzx   eax, dx
.text:004099D4                 jnz     short loc_4099DB
.text:004099D6                 or      eax, 92h
.text:004099DB
.text:004099DB loc_4099DB:                             ; CODE XREF: .text:004099D4↑j
.text:004099DB                 mov     ebx, [esp+54h]
.text:004099DF                 xor     edx, edx
.text:004099E1                 xor     ebp, ebp
.text:004099E3                 mov     edi, [esp+50h]
.text:004099E7                 mov     ecx, [esp+64h]
.text:004099EB                 mov     esi, edi
.text:004099ED                 or      [ecx], eax
.text:004099EF                 mov     edi, ebx
.text:004099F1                 or      edi, ebp
.text:004099F3                 mov     ebp, edx
.text:004099F5                 mov     ebx, [esp+64h]
.text:004099F9                 or      ebp, esi
.text:004099FB                 mov     esi, [esp+58h]
.text:004099FF                 mov     edx, [esp+40h]
.text:00409A03                 mov     [ebx+30h], edi
.text:00409A06                 mov     [ebx+18h], esi
.text:00409A09                 mov     ecx, edx
.text:00409A0B                 xor     esi, esi
.text:00409A0D                 mov     [ebx+34h], ebp
.text:00409A10                 xor     edx, edx
.text:00409A12                 or      esi, ecx
.text:00409A14                 mov     dword ptr [esp+8], 989680h
.text:00409A1C                 mov     ebx, [esp+3Ch]
.text:00409A20                 mov     ecx, esi
.text:00409A22                 mov     dword ptr [esp+0Ch], 0
.text:00409A2A                 or      ebx, edx
.text:00409A2C                 mov     edx, ebx
.text:00409A2E                 sub     edx, 0D53E8000h
.text:00409A34                 sbb     ecx, 19DB1DEh
.text:00409A3A                 mov     [esp+4], ecx
.text:00409A3E                 mov     [esp], edx
.text:00409A41                 call    sub_40EBA0
.text:00409A46                 mov     edx, eax
.text:00409A48                 mov     ecx, [esp+64h]
.text:00409A4C                 shr     eax, 1Fh
.text:00409A4F                 dec     eax
.text:00409A50                 and     edx, eax
.text:00409A52                 mov     [ecx+38h], edx
.text:00409A55                 mov     [esp], ebx
.text:00409A58                 mov     [esp+4], esi
.text:00409A5C                 mov     dword ptr [esp+8], 989680h
.text:00409A64                 mov     dword ptr [esp+0Ch], 0
.text:00409A6C                 call    sub_40ECC0
.text:00409A71                 lea     ecx, [eax+eax*4]
.text:00409A74                 lea     esi, [ecx+ecx*4]
.text:00409A77                 mov     eax, [esp+64h]
.text:00409A7B                 shl     esi, 2
.text:00409A7E                 mov     ebx, esi
.text:00409A80                 shr     ebx, 1Fh
.text:00409A83                 dec     ebx
.text:00409A84                 and     ebx, esi
.text:00409A86                 xor     esi, esi
.text:00409A88                 mov     [eax+3Ch], ebx
.text:00409A8B                 mov     edx, [esp+38h]
.text:00409A8F                 mov     dword ptr [esp+8], 989680h
.text:00409A97                 mov     ebx, [esp+34h]
.text:00409A9B                 mov     dword ptr [esp+0Ch], 0
.text:00409AA3                 mov     ecx, edx
.text:00409AA5                 xor     edx, edx
.text:00409AA7                 or      ebx, edx
.text:00409AA9                 or      esi, ecx
.text:00409AAB                 mov     edx, ebx
.text:00409AAD                 sub     edx, 0D53E8000h
.text:00409AB3                 mov     ecx, esi
.text:00409AB5                 sbb     ecx, 19DB1DEh
.text:00409ABB                 mov     [esp+4], ecx
.text:00409ABF                 mov     [esp], edx
.text:00409AC2                 call    sub_40EBA0
.text:00409AC7                 mov     edx, eax
.text:00409AC9                 mov     ecx, [esp+64h]
.text:00409ACD                 shr     eax, 1Fh
.text:00409AD0                 dec     eax
.text:00409AD1                 and     edx, eax
.text:00409AD3                 mov     [ecx+48h], edx
.text:00409AD6                 mov     [esp], ebx
.text:00409AD9                 mov     [esp+4], esi
.text:00409ADD                 mov     dword ptr [esp+8], 989680h
.text:00409AE5                 mov     dword ptr [esp+0Ch], 0
.text:00409AED                 call    sub_40ECC0
.text:00409AF2                 lea     edx, [eax+eax*4]
.text:00409AF5                 mov     ebx, [esp+64h]
.text:00409AF9                 lea     ecx, [edx+edx*4]
.text:00409AFC                 shl     ecx, 2
.text:00409AFF                 mov     esi, ecx
.text:00409B01                 shr     esi, 1Fh
.text:00409B04                 dec     esi
.text:00409B05                 and     esi, ecx
.text:00409B07                 mov     [ebx+4Ch], esi
.text:00409B0A                 mov     edx, [esp+48h]
.text:00409B0E                 xor     esi, esi
.text:00409B10                 mov     dword ptr [esp+8], 989680h
.text:00409B18                 mov     ebx, [esp+44h]
.text:00409B1C                 mov     dword ptr [esp+0Ch], 0
.text:00409B24                 mov     ecx, edx
.text:00409B26                 xor     edx, edx
.text:00409B28                 or      ebx, edx
.text:00409B2A                 or      esi, ecx
.text:00409B2C                 mov     edx, ebx
.text:00409B2E                 sub     edx, 0D53E8000h
.text:00409B34                 mov     ecx, esi
.text:00409B36                 sbb     ecx, 19DB1DEh
.text:00409B3C                 mov     [esp+4], ecx
.text:00409B40                 mov     [esp], edx
.text:00409B43                 call    sub_40EBA0
.text:00409B48                 mov     edx, eax
.text:00409B4A                 mov     ecx, [esp+64h]
.text:00409B4E                 shr     eax, 1Fh
.text:00409B51                 dec     eax
.text:00409B52                 and     edx, eax
.text:00409B54                 mov     [ecx+40h], edx
.text:00409B57                 mov     [esp+4], esi
.text:00409B5B                 mov     dword ptr [esp+8], 989680h
.text:00409B63                 mov     dword ptr [esp+0Ch], 0
.text:00409B6B                 mov     [esp], ebx
.text:00409B6E                 call    sub_40ECC0
.text:00409B73                 lea     edx, [eax+eax*4]
.text:00409B76                 lea     esi, [edx+edx*4]
.text:00409B79                 mov     eax, [esp+64h]
.text:00409B7D                 shl     esi, 2
.text:00409B80                 mov     edx, ebp
.text:00409B82                 mov     ecx, esi
.text:00409B84                 mov     dword ptr [eax+50h], 200h
.text:00409B8B                 shr     ecx, 1Fh
.text:00409B8E                 dec     ecx
.text:00409B8F                 and     ecx, esi
.text:00409B91                 test    ebp, ebp
.text:00409B93                 mov     [eax+44h], ecx
.text:00409B96                 mov     eax, edi
.text:00409B98                 js      short loc_409BD2
.text:00409B9A
.text:00409B9A loc_409B9A:                             ; CODE XREF: .text:00409BDA↓j
.text:00409B9A                 xor     esi, esi
.text:00409B9C                 mov     ebp, edi
.text:00409B9E                 mov     ecx, eax
.text:00409BA0                 shrd    ecx, edx, 9
.text:00409BA4                 mov     ebx, edx
.text:00409BA6                 and     ebp, 1FFh
.text:00409BAC                 mov     eax, esi
.text:00409BAE                 sar     ebx, 9
.text:00409BB1                 or      eax, ebp
.text:00409BB3                 jz      short loc_409BBB
.text:00409BB5                 add     ecx, 1
.text:00409BB8                 adc     ebx, 0
.text:00409BBB
.text:00409BBB loc_409BBB:                             ; CODE XREF: .text:00409BB3↑j
.text:00409BBB                 mov     edx, [esp+64h]
.text:00409BBF                 mov     eax, 1
.text:00409BC4                 mov     [edx+58h], ecx
.text:00409BC7                 mov     [edx+5Ch], ebx
.text:00409BCA                 add     esp, 1Ch
.text:00409BCD                 pop     ebx
.text:00409BCE                 pop     esi
.text:00409BCF                 pop     edi
.text:00409BD0                 pop     ebp
.text:00409BD1                 retn
.text:00409BD2 ; ---------------------------------------------------------------------------
.text:00409BD2
.text:00409BD2 loc_409BD2:                             ; CODE XREF: .text:00409B98↑j
.text:00409BD2                 add     eax, 1FFh
.text:00409BD7                 adc     edx, 0
.text:00409BDA                 jmp     short loc_409B9A
.text:00409BDA ; ---------------------------------------------------------------------------
.text:00409BDC                 align 10h
.text:00409BE0                 push    ebp
.text:00409BE1                 push    edi
.text:00409BE2                 xor     edi, edi
.text:00409BE4                 push    esi
.text:00409BE5                 xor     esi, esi
.text:00409BE7                 push    ebx
.text:00409BE8                 sub     esp, 0Ch
.text:00409BEB                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:00409BF2                 call    LoadLibraryA
.text:00409BF7                 sub     esp, 4
.text:00409BFA                 mov     ebp, eax
.text:00409BFC                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00409C04                 mov     [esp], eax
.text:00409C07                 call    GetProcAddress
.text:00409C0C                 sub     esp, 8
.text:00409C0F                 test    eax, eax
.text:00409C11                 jz      short loc_409C42
.text:00409C13                 lea     ecx, [esp+8]
.text:00409C17                 mov     [esp+4], ecx
.text:00409C1B                 mov     ecx, [esp+20h]
.text:00409C1F                 mov     [esp], ecx
.text:00409C22                 call    eax
.text:00409C24                 sub     esp, 8
.text:00409C27                 mov     ebx, eax
.text:00409C29                 cmp     eax, 0FFFFFFFFh
.text:00409C2C                 jz      short loc_409C5D
.text:00409C2E
.text:00409C2E loc_409C2E:                             ; CODE XREF: .text:00409C66↓j
.text:00409C2E                 mov     esi, [esp+8]
.text:00409C32                 mov     ecx, ebx
.text:00409C34                 xor     edi, edi
.text:00409C36                 xor     ebx, ebx
.text:00409C38                 mov     edx, esi
.text:00409C3A                 mov     esi, ecx
.text:00409C3C                 or      esi, edi
.text:00409C3E                 mov     edi, ebx
.text:00409C40                 or      edi, edx
.text:00409C42
.text:00409C42 loc_409C42:                             ; CODE XREF: .text:00409C11↑j
.text:00409C42                                         ; .text:00409C64↓j
.text:00409C42                 test    ebp, ebp
.text:00409C44                 jz      short loc_409C51
.text:00409C46                 mov     [esp], ebp
.text:00409C49                 call    FreeLibrary
.text:00409C4E                 sub     esp, 4
.text:00409C51
.text:00409C51 loc_409C51:                             ; CODE XREF: .text:00409C44↑j
.text:00409C51                 add     esp, 0Ch
.text:00409C54                 mov     eax, esi
.text:00409C56                 mov     edx, edi
.text:00409C58                 pop     ebx
.text:00409C59                 pop     esi
.text:00409C5A                 pop     edi
.text:00409C5B                 pop     ebp
.text:00409C5C                 retn
.text:00409C5D ; ---------------------------------------------------------------------------
.text:00409C5D
.text:00409C5D loc_409C5D:                             ; CODE XREF: .text:00409C2C↑j
.text:00409C5D                 call    GetLastError
.text:00409C62                 test    eax, eax
.text:00409C64                 jnz     short loc_409C42
.text:00409C66                 jmp     short loc_409C2E
.text:00409C66 ; ---------------------------------------------------------------------------
.text:00409C68                 align 10h
.text:00409C70
.text:00409C70 ; =============== S U B R O U T I N E =======================================
.text:00409C70
.text:00409C70
.text:00409C70 ; int __cdecl sub_409C70(LPCSTR lpFileName, int)
.text:00409C70 sub_409C70      proc near               ; CODE XREF: sub_407940+2871↓p
.text:00409C70
.text:00409C70 lpRootPathName  = dword ptr -8FCh
.text:00409C70 lpVolumeNameBuffer= dword ptr -8F8h
.text:00409C70 nVolumeNameSize = dword ptr -8F4h
.text:00409C70 lpVolumeSerialNumber= dword ptr -8F0h
.text:00409C70 lpMaximumComponentLength= dword ptr -8ECh
.text:00409C70 lpFileSystemFlags= dword ptr -8E8h
.text:00409C70 lpFileSystemNameBuffer= dword ptr -8E4h
.text:00409C70 nFileSystemNameSize= dword ptr -8E0h
.text:00409C70 VolumeSerialNumber= dword ptr -8D8h
.text:00409C70 MaximumComponentLength= dword ptr -8D4h
.text:00409C70 FileSystemFlags = dword ptr -8D0h
.text:00409C70 var_8CC         = dword ptr -8CCh
.text:00409C70 var_8C8         = dword ptr -8C8h
.text:00409C70 var_8C4         = dword ptr -8C4h
.text:00409C70 var_8C0         = dword ptr -8C0h
.text:00409C70 var_8BC         = dword ptr -8BCh
.text:00409C70 var_8B8         = dword ptr -8B8h
.text:00409C70 var_8B4         = dword ptr -8B4h
.text:00409C70 var_8B0         = dword ptr -8B0h
.text:00409C70 var_8AC         = dword ptr -8ACh
.text:00409C70 var_8A8         = dword ptr -8A8h
.text:00409C70 var_8A4         = dword ptr -8A4h
.text:00409C70 var_8A0         = dword ptr -8A0h
.text:00409C70 var_89C         = dword ptr -89Ch
.text:00409C70 FileSystemNameBuffer= byte ptr -88Ch
.text:00409C70 VolumeNameBuffer= byte ptr -48Ch
.text:00409C70 var_8C          = dword ptr -8Ch
.text:00409C70 var_88          = dword ptr -88h
.text:00409C70 var_84          = dword ptr -84h
.text:00409C70 var_80          = dword ptr -80h
.text:00409C70 var_7C          = dword ptr -7Ch
.text:00409C70 var_78          = dword ptr -78h
.text:00409C70 var_74          = dword ptr -74h
.text:00409C70 var_70          = dword ptr -70h
.text:00409C70 var_6C          = dword ptr -6Ch
.text:00409C70 var_5C          = dword ptr -5Ch
.text:00409C70 var_58          = dword ptr -58h
.text:00409C70 var_54          = dword ptr -54h
.text:00409C70 var_50          = dword ptr -50h
.text:00409C70 var_4C          = dword ptr -4Ch
.text:00409C70 var_48          = dword ptr -48h
.text:00409C70 var_44          = dword ptr -44h
.text:00409C70 var_3C          = dword ptr -3Ch
.text:00409C70 var_38          = dword ptr -38h
.text:00409C70 var_34          = dword ptr -34h
.text:00409C70 lpFileName      = dword ptr  4
.text:00409C70 arg_4           = dword ptr  8
.text:00409C70
.text:00409C70                 push    ebp
.text:00409C71                 xor     eax, eax
.text:00409C73                 mov     ecx, 0Dh
.text:00409C78                 push    edi
.text:00409C79                 push    esi
.text:00409C7A                 push    ebx
.text:00409C7B                 sub     esp, 8ECh
.text:00409C81                 lea     edi, [esp+8FCh+var_5C]
.text:00409C88                 cld
.text:00409C89                 lea     edx, [esp+8FCh+var_8C]
.text:00409C90                 rep stosd
.text:00409C92                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00409C96                 lea     esi, [esp+8FCh+var_5C]
.text:00409C9D                 mov     edx, [esp+8FCh+lpFileName]
.text:00409CA4                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:00409CA7                 call    sub_4086D0
.text:00409CAC                 test    eax, eax
.text:00409CAE                 mov     edx, 0FFFFFFFFh
.text:00409CB3                 jz      loc_40A044
.text:00409CB9                 mov     edx, [esp+8FCh+var_88]
.text:00409CC0                 mov     ebp, [esp+8FCh+var_84]
.text:00409CC7                 mov     edi, [esp+8FCh+var_80]
.text:00409CCE                 mov     [esp+8FCh+var_58], edx
.text:00409CD5                 mov     ecx, [esp+8FCh+var_7C]
.text:00409CDC                 mov     ebx, [esp+8FCh+var_8C]
.text:00409CE3                 mov     [esp+8FCh+var_54], ebp
.text:00409CEA                 mov     edx, [esp+8FCh+var_78]
.text:00409CF1                 mov     ebp, [esp+8FCh+var_74]
.text:00409CF8                 mov     [esp+8FCh+var_50], edi
.text:00409CFF                 test    bl, 10h
.text:00409D02                 mov     edi, [esp+8FCh+var_70]
.text:00409D09                 mov     [esp+8FCh+var_4C], ecx
.text:00409D10                 mov     ecx, [esp+8FCh+var_6C]
.text:00409D17                 mov     [esp+8FCh+var_5C], ebx
.text:00409D1E                 mov     [esp+8FCh+var_48], edx
.text:00409D25                 mov     [esp+8FCh+var_44], ebp
.text:00409D2C                 mov     [esp+8FCh+var_3C], edi
.text:00409D33                 mov     [esp+8FCh+var_38], ecx
.text:00409D3A                 jnz     loc_40A060
.text:00409D40                 mov     ebx, 1
.text:00409D45                 mov     [esp+8FCh+var_34], ebx
.text:00409D4C
.text:00409D4C loc_409D4C:                             ; CODE XREF: sub_409C70+406↓j
.text:00409D4C                 mov     eax, [esp+8FCh+lpFileName]
.text:00409D53                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:00409D57                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:00409D5B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:00409D5E                 call    sub_40AF40
.text:00409D63                 mov     [esp+8FCh+lpRootPathName], eax
.text:00409D66                 call    sub_408270
.text:00409D6B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:00409D6F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00409D73                 mov     ebp, eax
.text:00409D75                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00409D79                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:00409D7D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:00409D84                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:00409D88                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00409D8C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:00409D90                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00409D98                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00409DA0                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:00409DA3                 call    GetVolumeInformationA
.text:00409DA8                 sub     esp, 20h
.text:00409DAB                 test    eax, eax
.text:00409DAD                 lea     edi, [esp+8FCh+var_8CC]
.text:00409DB1                 setz    bl
.text:00409DB4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:00409DB7                 xor     ebp, ebp
.text:00409DB9                 movzx   edx, bl
.text:00409DBC                 dec     edx
.text:00409DBD                 xor     ebx, ebx
.text:00409DBF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:00409DC3                 call    free
.text:00409DC8                 cld
.text:00409DC9                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00409DCD                 mov     [esi+1Ch], ecx
.text:00409DD0                 mov     ecx, 0Dh
.text:00409DD5                 rep movsd
.text:00409DD7                 mov     edi, [esp+8FCh+var_8A0]
.text:00409DDB                 mov     edx, [esp+8FCh+var_89C]
.text:00409DDF                 mov     ecx, [esp+8FCh+var_8CC]
.text:00409DE3                 or      ebp, edi
.text:00409DE5                 mov     esi, [esp+8FCh+var_8B0]
.text:00409DE9                 mov     edi, [esp+8FCh+arg_4]
.text:00409DF0                 or      edx, ebx
.text:00409DF2                 mov     [edi+8], edx
.text:00409DF5                 xor     edx, edx
.text:00409DF7                 test    cl, 10h
.text:00409DFA                 setz    dl
.text:00409DFD                 mov     [edi+0Ch], ebp
.text:00409E00                 mov     [edi+10h], esi
.text:00409E03                 mov     dword ptr [edi+14h], 0
.text:00409E0A                 dec     edx
.text:00409E0B                 and     edx, 0FFFFC000h
.text:00409E11                 add     edx, 8000h
.text:00409E17                 or      edx, 124h
.text:00409E1D                 test    cl, 1
.text:00409E20                 movzx   eax, dx
.text:00409E23                 jnz     short loc_409E2A
.text:00409E25                 or      eax, 92h
.text:00409E2A
.text:00409E2A loc_409E2A:                             ; CODE XREF: sub_409C70+1B3↑j
.text:00409E2A                 mov     ebx, [esp+8FCh+var_8A8]
.text:00409E2E                 xor     edx, edx
.text:00409E30                 xor     ebp, ebp
.text:00409E32                 mov     edi, [esp+8FCh+var_8AC]
.text:00409E36                 mov     ecx, [esp+8FCh+arg_4]
.text:00409E3D                 mov     esi, edi
.text:00409E3F                 or      [ecx], eax
.text:00409E41                 mov     edi, ebx
.text:00409E43                 or      edi, ebp
.text:00409E45                 mov     ebp, edx
.text:00409E47                 mov     ebx, [esp+8FCh+var_8A4]
.text:00409E4B                 or      ebp, esi
.text:00409E4D                 mov     esi, [esp+8FCh+arg_4]
.text:00409E54                 mov     edx, [esp+8FCh+var_8BC]
.text:00409E58                 mov     [esi+18h], ebx
.text:00409E5B                 mov     ebx, [esp+8FCh+var_8C0]
.text:00409E5F                 mov     ecx, edx
.text:00409E61                 mov     [esi+30h], edi
.text:00409E64                 xor     edx, edx
.text:00409E66                 mov     [esi+34h], ebp
.text:00409E69                 or      ebx, edx
.text:00409E6B                 xor     esi, esi
.text:00409E6D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00409E75                 or      esi, ecx
.text:00409E77                 mov     edx, ebx
.text:00409E79                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00409E81                 sub     edx, 0D53E8000h
.text:00409E87                 mov     ecx, esi
.text:00409E89                 sbb     ecx, 19DB1DEh
.text:00409E8F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00409E93                 mov     [esp+8FCh+lpRootPathName], edx
.text:00409E96                 call    sub_40EBA0
.text:00409E9B                 mov     edx, eax
.text:00409E9D                 mov     ecx, [esp+8FCh+arg_4]
.text:00409EA4                 shr     eax, 1Fh
.text:00409EA7                 dec     eax
.text:00409EA8                 and     edx, eax
.text:00409EAA                 mov     [ecx+38h], edx
.text:00409EAD                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00409EB0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00409EB4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00409EBC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00409EC4                 call    sub_40ECC0
.text:00409EC9                 lea     ecx, [eax+eax*4]
.text:00409ECC                 lea     ebx, [ecx+ecx*4]
.text:00409ECF                 mov     eax, [esp+8FCh+arg_4]
.text:00409ED6                 shl     ebx, 2
.text:00409ED9                 mov     esi, ebx
.text:00409EDB                 shr     esi, 1Fh
.text:00409EDE                 dec     esi
.text:00409EDF                 and     esi, ebx
.text:00409EE1                 mov     [eax+3Ch], esi
.text:00409EE4                 mov     edx, [esp+8FCh+var_8C4]
.text:00409EE8                 xor     esi, esi
.text:00409EEA                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00409EF2                 mov     ebx, [esp+8FCh+var_8C8]
.text:00409EF6                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00409EFE                 mov     ecx, edx
.text:00409F00                 xor     edx, edx
.text:00409F02                 or      ebx, edx
.text:00409F04                 or      esi, ecx
.text:00409F06                 mov     edx, ebx
.text:00409F08                 sub     edx, 0D53E8000h
.text:00409F0E                 mov     ecx, esi
.text:00409F10                 sbb     ecx, 19DB1DEh
.text:00409F16                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00409F1A                 mov     [esp+8FCh+lpRootPathName], edx
.text:00409F1D                 call    sub_40EBA0
.text:00409F22                 mov     edx, eax
.text:00409F24                 mov     ecx, [esp+8FCh+arg_4]
.text:00409F2B                 shr     eax, 1Fh
.text:00409F2E                 dec     eax
.text:00409F2F                 and     edx, eax
.text:00409F31                 mov     [ecx+48h], edx
.text:00409F34                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00409F37                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00409F3B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00409F43                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00409F4B                 call    sub_40ECC0
.text:00409F50                 lea     ecx, [eax+eax*4]
.text:00409F53                 lea     ebx, [ecx+ecx*4]
.text:00409F56                 mov     eax, [esp+8FCh+arg_4]
.text:00409F5D                 shl     ebx, 2
.text:00409F60                 mov     esi, ebx
.text:00409F62                 shr     esi, 1Fh
.text:00409F65                 dec     esi
.text:00409F66                 and     esi, ebx
.text:00409F68                 mov     [eax+4Ch], esi
.text:00409F6B                 mov     edx, [esp+8FCh+var_8B4]
.text:00409F6F                 xor     esi, esi
.text:00409F71                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00409F79                 mov     ebx, [esp+8FCh+var_8B8]
.text:00409F7D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00409F85                 mov     ecx, edx
.text:00409F87                 xor     edx, edx
.text:00409F89                 or      ebx, edx
.text:00409F8B                 or      esi, ecx
.text:00409F8D                 mov     edx, ebx
.text:00409F8F                 sub     edx, 0D53E8000h
.text:00409F95                 mov     ecx, esi
.text:00409F97                 sbb     ecx, 19DB1DEh
.text:00409F9D                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00409FA1                 mov     [esp+8FCh+lpRootPathName], edx
.text:00409FA4                 call    sub_40EBA0
.text:00409FA9                 mov     edx, eax
.text:00409FAB                 mov     ecx, [esp+8FCh+arg_4]
.text:00409FB2                 shr     eax, 1Fh
.text:00409FB5                 dec     eax
.text:00409FB6                 and     edx, eax
.text:00409FB8                 mov     [ecx+40h], edx
.text:00409FBB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00409FBE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00409FC2                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00409FCA                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00409FD2                 call    sub_40ECC0
.text:00409FD7                 lea     ebx, [eax+eax*4]
.text:00409FDA                 mov     esi, [esp+8FCh+arg_4]
.text:00409FE1                 lea     edx, [ebx+ebx*4]
.text:00409FE4                 shl     edx, 2
.text:00409FE7                 mov     eax, edi
.text:00409FE9                 mov     ecx, edx
.text:00409FEB                 mov     dword ptr [esi+50h], 200h
.text:00409FF2                 shr     ecx, 1Fh
.text:00409FF5                 dec     ecx
.text:00409FF6                 and     ecx, edx
.text:00409FF8                 test    ebp, ebp
.text:00409FFA                 mov     edx, ebp
.text:00409FFC                 mov     [esi+44h], ecx
.text:00409FFF                 js      short loc_40A051
.text:0040A001
.text:0040A001 loc_40A001:                             ; CODE XREF: sub_409C70+3E9↓j
.text:0040A001                 xor     esi, esi
.text:0040A003                 mov     ebp, edi
.text:0040A005                 mov     ecx, eax
.text:0040A007                 shrd    ecx, edx, 9
.text:0040A00B                 mov     ebx, edx
.text:0040A00D                 and     ebp, 1FFh
.text:0040A013                 mov     eax, esi
.text:0040A015                 sar     ebx, 9
.text:0040A018                 or      eax, ebp
.text:0040A01A                 jz      short loc_40A022
.text:0040A01C                 add     ecx, 1
.text:0040A01F                 adc     ebx, 0
.text:0040A022
.text:0040A022 loc_40A022:                             ; CODE XREF: sub_409C70+3AA↑j
.text:0040A022                 mov     edx, [esp+8FCh+arg_4]
.text:0040A029                 mov     [edx+5Ch], ebx
.text:0040A02C                 mov     ebx, [esp+8FCh+lpFileName]
.text:0040A033                 mov     [edx+58h], ecx
.text:0040A036                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040A03A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040A03D                 call    sub_408E90
.text:0040A042                 xor     edx, edx
.text:0040A044
.text:0040A044 loc_40A044:                             ; CODE XREF: sub_409C70+43↑j
.text:0040A044                 add     esp, 8ECh
.text:0040A04A                 mov     eax, edx
.text:0040A04C                 pop     ebx
.text:0040A04D                 pop     esi
.text:0040A04E                 pop     edi
.text:0040A04F                 pop     ebp
.text:0040A050                 retn
.text:0040A051 ; ---------------------------------------------------------------------------
.text:0040A051
.text:0040A051 loc_40A051:                             ; CODE XREF: sub_409C70+38F↑j
.text:0040A051                 add     eax, 1FFh
.text:0040A056                 adc     edx, 0
.text:0040A059                 jmp     short loc_40A001
.text:0040A059 ; ---------------------------------------------------------------------------
.text:0040A05B                 align 10h
.text:0040A060
.text:0040A060 loc_40A060:                             ; CODE XREF: sub_409C70+CA↑j
.text:0040A060                 mov     eax, [esp+8FCh+lpFileName]
.text:0040A067                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:0040A06A                 call    sub_408840
.text:0040A06F                 mov     [esp+8FCh+var_34], eax
.text:0040A076                 jmp     loc_409D4C
.text:0040A076 sub_409C70      endp
.text:0040A076
.text:0040A076 ; ---------------------------------------------------------------------------
.text:0040A07B                 align 10h
.text:0040A080 ; START OF FUNCTION CHUNK FOR sub_407940
.text:0040A080
.text:0040A080 loc_40A080:                             ; CODE XREF: sub_407940+26↑j
.text:0040A080                 cld
.text:0040A081                 sub     esp, 2Ch
.text:0040A084                 xor     eax, eax
.text:0040A086                 mov     [esp+2Ch+var_10], ebx
.text:0040A08A                 mov     ecx, 18h
.text:0040A08F                 mov     ebx, [esp+2Ch+arg_0]
.text:0040A093                 mov     [esp+2Ch+var_C], esi
.text:0040A097                 mov     esi, [esp+2Ch+arg_4]
.text:0040A09B                 test    ebx, ebx
.text:0040A09D                 mov     [esp+2Ch+var_8], edi
.text:0040A0A1                 mov     edi, esi
.text:0040A0A3                 mov     [esp+2Ch+var_4], ebp
.text:0040A0A7                 rep stosd
.text:0040A0A9                 jz      short loc_40A0B0
.text:0040A0AB                 cmp     byte ptr [ebx], 0
.text:0040A0AE                 jnz     short loc_40A0C8
.text:0040A0B0
.text:0040A0B0 loc_40A0B0:                             ; CODE XREF: sub_407940+2769↑j
.text:0040A0B0                 xor     edx, edx
.text:0040A0B2
.text:0040A0B2 loc_40A0B2:                             ; CODE XREF: sub_407940+279F↓j
.text:0040A0B2                                         ; sub_407940+2848↓j
.text:0040A0B2                 mov     ebx, [esp+2Ch+var_10]
.text:0040A0B6                 mov     eax, edx
.text:0040A0B8                 mov     esi, [esp+2Ch+var_C]
.text:0040A0BC                 mov     edi, [esp+2Ch+var_8]
.text:0040A0C0                 mov     ebp, [esp+2Ch+var_4]
.text:0040A0C4                 add     esp, 2Ch
.text:0040A0C7                 retn
.text:0040A0C8 ; ---------------------------------------------------------------------------
.text:0040A0C8
.text:0040A0C8 loc_40A0C8:                             ; CODE XREF: sub_407940+276E↑j
.text:0040A0C8                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:0040A0D0                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:0040A0D3                 call    sub_40AE60
.text:0040A0D8                 test    eax, eax
.text:0040A0DA                 mov     edx, 0FFFFFFFFh
.text:0040A0DF                 jnz     short loc_40A0B2
.text:0040A0E1                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:0040A0E4                 call    sub_40AD10
.text:0040A0E9                 mov     [esp+2Ch+lpFileName], eax
.text:0040A0EC                 call    sub_408270
.text:0040A0F1                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:0040A0F4                 mov     ebp, eax
.text:0040A0F6                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040A0FE                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:0040A106                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040A10E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040A116                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040A11E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040A126                 call    CreateFileA
.text:0040A12B                 sub     esp, 1Ch
.text:0040A12E                 mov     ebx, eax
.text:0040A130                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040A134                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:0040A137                 call    sub_4089C0
.text:0040A13C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040A13F                 mov     edi, eax
.text:0040A141                 call    CloseHandle
.text:0040A146                 sub     esp, 4
.text:0040A149                 cmp     edi, 0FFFFFFFFh
.text:0040A14C                 jz      short loc_40A1AA
.text:0040A14E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040A152                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:0040A155                 call    sub_408E90
.text:0040A15A
.text:0040A15A loc_40A15A:                             ; CODE XREF: sub_407940+2878↓j
.text:0040A15A                 mov     edx, [esi]
.text:0040A15C                 and     edx, 0F000h
.text:0040A162                 cmp     edx, 4000h
.text:0040A168                 jz      short loc_40A19D
.text:0040A16A
.text:0040A16A loc_40A16A:                             ; CODE XREF: sub_407940+2868↓j
.text:0040A16A                 cmp     edi, 0FFFFFFFFh
.text:0040A16D                 jz      short loc_40A18D
.text:0040A16F
.text:0040A16F loc_40A16F:                             ; CODE XREF: sub_407940+285B↓j
.text:0040A16F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:0040A176                 call    SetErrorMode
.text:0040A17B                 sub     esp, 4
.text:0040A17E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:0040A181                 call    free
.text:0040A186                 mov     edx, edi
.text:0040A188                 jmp     loc_40A0B2
.text:0040A18D ; ---------------------------------------------------------------------------
.text:0040A18D
.text:0040A18D loc_40A18D:                             ; CODE XREF: sub_407940+282D↑j
.text:0040A18D                 call    sub_4076C0
.text:0040A192                 mov     esi, eax
.text:0040A194                 call    _errno
.text:0040A199                 mov     [eax], esi
.text:0040A19B                 jmp     short loc_40A16F
.text:0040A19D ; ---------------------------------------------------------------------------
.text:0040A19D
.text:0040A19D loc_40A19D:                             ; CODE XREF: sub_407940+2828↑j
.text:0040A19D                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:0040A1A0                 call    sub_408840
.text:0040A1A5                 mov     [esi+18h], eax
.text:0040A1A8                 jmp     short loc_40A16A
.text:0040A1AA ; ---------------------------------------------------------------------------
.text:0040A1AA
.text:0040A1AA loc_40A1AA:                             ; CODE XREF: sub_407940+280C↑j
.text:0040A1AA                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040A1AE                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:0040A1B1                 call    sub_409C70
.text:0040A1B6                 mov     edi, eax
.text:0040A1B8                 jmp     short loc_40A15A
.text:0040A1B8 ; END OF FUNCTION CHUNK FOR sub_407940
.text:0040A1B8 ; ---------------------------------------------------------------------------
.text:0040A1BA                 align 10h
.text:0040A1C0 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040A3DF↓o
.text:0040A1CC aLu             db '%lu',0              ; DATA XREF: .text:0040A3EF↓o
.text:0040A1D0 asc_40A1D0      db ' ',0                ; DATA XREF: .text:loc_40A4D8↓o
.text:0040A1D2                 align 10h
.text:0040A1E0 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0040A1E0                                         ; DATA XREF: .text:0040A50F↓o
.text:0040A200 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40A51D↓o
.text:0040A20C aServer         db ' Server',0          ; DATA XREF: .text:0040A546↓o
.text:0040A20C                                         ; .text:loc_40A6BE↓o
.text:0040A214 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_40A558↓o
.text:0040A225 aDatacenterServ db ' Datacenter Server',0
.text:0040A225                                         ; DATA XREF: .text:loc_40A562↓o
.text:0040A238 aStandardEditio db ' Standard Edition',0
.text:0040A238                                         ; DATA XREF: .text:0040A58A↓o
.text:0040A24A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_40A594↓o
.text:0040A257 aEnterpriseEdit db ' Enterprise Edition',0
.text:0040A257                                         ; DATA XREF: .text:loc_40A59E↓o
.text:0040A26B aDatacenterEdit db ' Datacenter Edition',0
.text:0040A26B                                         ; DATA XREF: .text:loc_40A5A8↓o
.text:0040A27F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040A5BB↓o
.text:0040A28D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_40A5C5↓o
.text:0040A28D                                         ; .text:loc_40A6D0↓o
.text:0040A29B                 align 10h
.text:0040A2A0 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0040A2A0                                         ; DATA XREF: .text:0040A5F2↓o
.text:0040A2D0 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0040A639↓o
.text:0040A2DC aWinnt          db 'WINNT',0            ; DATA XREF: .text:0040A674↓o
.text:0040A2E2 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0040A68B↓o
.text:0040A2EB aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0040A6A2↓o
.text:0040A2F4                 align 10h
.text:0040A300 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0040A300                                         ; DATA XREF: .text:0040A817↓o
.text:0040A323                 align 20h
.text:0040A340 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0040A340                                         ; DATA XREF: .text:0040A876↓o
.text:0040A366 ; ---------------------------------------------------------------------------
.text:0040A366
.text:0040A366 loc_40A366:                             ; DATA XREF: .text:loc_40A8E1↓o
.text:0040A366                 and     [ebx+45h], dl
.text:0040A369                 add     [eax], ah
.text:0040A36B                 push    ebx
.text:0040A36C                 push    eax
.text:0040A36D                 xor     [eax], eax
.text:0040A36F
.text:0040A36F loc_40A36F:                             ; DATA XREF: .text:loc_40A95B↓o
.text:0040A36F                 and     [edi+53h], cl
.text:0040A372                 push    edx
.text:0040A373                 xor     al, [eax]
.text:0040A375                 lea     esi, [esi+0]
.text:0040A379                 lea     edi, [edi+0]
.text:0040A380                 push    edi
.text:0040A381                 push    esi
.text:0040A382                 push    ebx
.text:0040A383                 sub     esp, 130h
.text:0040A389                 mov     ebx, [esp+140h]
.text:0040A390                 call    sub_40AA90
.text:0040A395                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040A39A                 cmp     eax, 1
.text:0040A39D                 jz      loc_40A840
.text:0040A3A3                 cmp     eax, 1
.text:0040A3A6                 jb      loc_40A816
.text:0040A3AC                 cmp     eax, 2
.text:0040A3AF                 jz      loc_40A460
.text:0040A3B5                 cmp     eax, 3
.text:0040A3B8                 jz      short loc_40A41F
.text:0040A3BA                 lea     esi, [esi+0]
.text:0040A3C0
.text:0040A3C0 loc_40A3C0:                             ; CODE XREF: .text:0040A455↓j
.text:0040A3C0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040A3C6                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040A3CC
.text:0040A3CC loc_40A3CC:                             ; CODE XREF: .text:0040A85F↓j
.text:0040A3CC                 mov     [esp+10h], edx
.text:0040A3D0                 mov     ebx, [esp+144h]
.text:0040A3D7                 mov     [esp+0Ch], ecx
.text:0040A3DB                 mov     [esp+8], eax
.text:0040A3DF                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0040A3E7                 mov     [esp], ebx
.text:0040A3EA                 call    sprintf
.text:0040A3EF                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:0040A3F7                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040A3FD                 mov     ecx, [esp+148h]
.text:0040A404                 mov     [esp+8], edi
.text:0040A408                 mov     [esp], ecx
.text:0040A40B                 call    sprintf
.text:0040A410                 mov     eax, 1
.text:0040A415
.text:0040A415 loc_40A415:                             ; CODE XREF: .text:0040A60F↓j
.text:0040A415                                         ; .text:0040A65C↓j
.text:0040A415                 add     esp, 130h
.text:0040A41B                 pop     ebx
.text:0040A41C                 pop     esi
.text:0040A41D                 pop     edi
.text:0040A41E                 retn
.text:0040A41F ; ---------------------------------------------------------------------------
.text:0040A41F
.text:0040A41F loc_40A41F:                             ; CODE XREF: .text:0040A3B8↑j
.text:0040A41F                 mov     dword ptr [ebx], 7263694Dh
.text:0040A425                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040A42C                 mov     dword ptr [ebx+8], 69572074h
.text:0040A433                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040A43A                 mov     dword ptr [ebx+10h], 45432073h
.text:0040A441                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0040A447                 mov     esi, esi
.text:0040A449                 lea     edi, [edi+0]
.text:0040A450
.text:0040A450 loc_40A450:                             ; CODE XREF: .text:0040A4F8↓j
.text:0040A450                                         ; .text:0040A839↓j ...
.text:0040A450                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040A455                 jmp     loc_40A3C0
.text:0040A455 ; ---------------------------------------------------------------------------
.text:0040A45A                 align 10h
.text:0040A460
.text:0040A460 loc_40A460:                             ; CODE XREF: .text:0040A3AF↑j
.text:0040A460                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0040A466                 cmp     edx, 3
.text:0040A469                 mov     eax, edx
.text:0040A46B                 jz      loc_40A7D5
.text:0040A471
.text:0040A471 loc_40A471:                             ; CODE XREF: .text:0040A7DC↓j
.text:0040A471                 cmp     eax, 4
.text:0040A474                 jz      loc_40A795
.text:0040A47A
.text:0040A47A loc_40A47A:                             ; CODE XREF: .text:0040A79D↓j
.text:0040A47A                 cmp     eax, 4
.text:0040A47D                 ja      loc_40A6E2
.text:0040A483                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040A489                 test    ecx, ecx
.text:0040A48B                 jnz     loc_40A6E2
.text:0040A491                 mov     dword ptr [ebx], 7263694Dh
.text:0040A497                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040A49E                 mov     dword ptr [ebx+8], 69572074h
.text:0040A4A5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040A4AC                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040A4B3
.text:0040A4B3 loc_40A4B3:                             ; CODE XREF: .text:0040A755↓j
.text:0040A4B3                 mov     byte ptr [ebx+14h], 0
.text:0040A4B7
.text:0040A4B7 loc_40A4B7:                             ; CODE XREF: .text:0040A6E5↓j
.text:0040A4B7                                         ; .text:0040A6FC↓j ...
.text:0040A4B7                 mov     esi, dword_410060
.text:0040A4BD                 test    esi, esi
.text:0040A4BF                 jz      loc_40A5D2
.text:0040A4C5                 movzx   eax, ds:byte_41126A
.text:0040A4CC                 cmp     al, 1
.text:0040A4CE                 jz      loc_40A5B2
.text:0040A4D4                 cmp     al, 3
.text:0040A4D6                 jz      short loc_40A4FD
.text:0040A4D8
.text:0040A4D8 loc_40A4D8:                             ; CODE XREF: .text:0040A51B↓j
.text:0040A4D8                                         ; .text:0040A556↓j ...
.text:0040A4D8                 mov     dword ptr [esp+4], offset asc_40A1D0 ; " "
.text:0040A4E0                 mov     [esp], ebx
.text:0040A4E3                 call    strcat
.text:0040A4E8                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0040A4F0                 mov     [esp], ebx
.text:0040A4F3                 call    strcat
.text:0040A4F8                 jmp     loc_40A450
.text:0040A4FD ; ---------------------------------------------------------------------------
.text:0040A4FD
.text:0040A4FD loc_40A4FD:                             ; CODE XREF: .text:0040A4D6↑j
.text:0040A4FD                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0040A504                 jz      short loc_40A526
.text:0040A506
.text:0040A506 loc_40A506:                             ; CODE XREF: .text:0040A532↓j
.text:0040A506                 test    byte ptr ds:word_411268, 2
.text:0040A50D                 jz      short loc_40A51D
.text:0040A50F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0040A516
.text:0040A516 loc_40A516:                             ; CODE XREF: .text:0040A524↓j
.text:0040A516                 call    printf
.text:0040A51B                 jmp     short loc_40A4D8
.text:0040A51D ; ---------------------------------------------------------------------------
.text:0040A51D
.text:0040A51D loc_40A51D:                             ; CODE XREF: .text:0040A50D↑j
.text:0040A51D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0040A524                 jmp     short loc_40A516
.text:0040A526 ; ---------------------------------------------------------------------------
.text:0040A526
.text:0040A526 loc_40A526:                             ; CODE XREF: .text:0040A504↑j
.text:0040A526                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040A52B                 cmp     eax, 2
.text:0040A52E                 jz      short loc_40A570
.text:0040A530                 test    eax, eax
.text:0040A532                 jnz     short loc_40A506
.text:0040A534                 cmp     byte ptr ds:word_411268, 0
.text:0040A53B                 js      short loc_40A562
.text:0040A53D                 test    byte ptr ds:word_411268, 2
.text:0040A544                 jnz     short loc_40A558
.text:0040A546                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040A54E
.text:0040A54E loc_40A54E:                             ; CODE XREF: .text:0040A560↓j
.text:0040A54E                                         ; .text:0040A56A↓j ...
.text:0040A54E                 mov     [esp], ebx
.text:0040A551                 call    strcat
.text:0040A556                 jmp     short loc_40A4D8
.text:0040A558 ; ---------------------------------------------------------------------------
.text:0040A558
.text:0040A558 loc_40A558:                             ; CODE XREF: .text:0040A544↑j
.text:0040A558                                         ; .text:0040A6B9↓j
.text:0040A558                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0040A560                 jmp     short loc_40A54E
.text:0040A562 ; ---------------------------------------------------------------------------
.text:0040A562
.text:0040A562 loc_40A562:                             ; CODE XREF: .text:0040A53B↑j
.text:0040A562                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0040A56A                 jmp     short loc_40A54E
.text:0040A56A ; ---------------------------------------------------------------------------
.text:0040A56C                 align 10h
.text:0040A570
.text:0040A570 loc_40A570:                             ; CODE XREF: .text:0040A52E↑j
.text:0040A570                 cmp     byte ptr ds:word_411268, 0
.text:0040A577                 js      short loc_40A5A8
.text:0040A579                 movzx   eax, ds:word_411268
.text:0040A580                 test    al, 2
.text:0040A582                 jnz     short loc_40A59E
.text:0040A584                 cmp     ax, 400h
.text:0040A588                 jz      short loc_40A594
.text:0040A58A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0040A592                 jmp     short loc_40A54E
.text:0040A594 ; ---------------------------------------------------------------------------
.text:0040A594
.text:0040A594 loc_40A594:                             ; CODE XREF: .text:0040A588↑j
.text:0040A594                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040A59C                 jmp     short loc_40A54E
.text:0040A59E ; ---------------------------------------------------------------------------
.text:0040A59E
.text:0040A59E loc_40A59E:                             ; CODE XREF: .text:0040A582↑j
.text:0040A59E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0040A5A6                 jmp     short loc_40A54E
.text:0040A5A8 ; ---------------------------------------------------------------------------
.text:0040A5A8
.text:0040A5A8 loc_40A5A8:                             ; CODE XREF: .text:0040A577↑j
.text:0040A5A8                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0040A5B0                 jmp     short loc_40A54E
.text:0040A5B2 ; ---------------------------------------------------------------------------
.text:0040A5B2
.text:0040A5B2 loc_40A5B2:                             ; CODE XREF: .text:0040A4CE↑j
.text:0040A5B2                 test    byte ptr ds:word_411268+1, 2
.text:0040A5B9                 jz      short loc_40A5C5
.text:0040A5BB                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0040A5C3                 jmp     short loc_40A54E
.text:0040A5C5 ; ---------------------------------------------------------------------------
.text:0040A5C5
.text:0040A5C5 loc_40A5C5:                             ; CODE XREF: .text:0040A5B9↑j
.text:0040A5C5                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040A5CD                 jmp     loc_40A54E
.text:0040A5D2 ; ---------------------------------------------------------------------------
.text:0040A5D2
.text:0040A5D2 loc_40A5D2:                             ; CODE XREF: .text:0040A4BF↑j
.text:0040A5D2                 mov     dword ptr [esp+28h], 0FFh
.text:0040A5DA                 lea     edx, [esp+2Ch]
.text:0040A5DE                 mov     [esp+10h], edx
.text:0040A5E2                 mov     dword ptr [esp+0Ch], 1
.text:0040A5EA                 mov     dword ptr [esp+8], 0
.text:0040A5F2                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040A5FA                 mov     dword ptr [esp], 80000002h
.text:0040A601                 call    RegOpenKeyExA
.text:0040A606                 mov     edi, eax
.text:0040A608                 sub     esp, 14h
.text:0040A60B                 xor     eax, eax
.text:0040A60D                 test    edi, edi
.text:0040A60F                 jnz     loc_40A415
.text:0040A615                 mov     dword ptr [esp+0Ch], 0
.text:0040A61D                 mov     edi, [esp+2Ch]
.text:0040A621                 lea     esi, [esp+28h]
.text:0040A625                 mov     [esp+14h], esi
.text:0040A629                 lea     esi, [esp+30h]
.text:0040A62D                 mov     [esp+10h], esi
.text:0040A631                 mov     dword ptr [esp+8], 0
.text:0040A639                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0040A641                 mov     [esp], edi
.text:0040A644                 call    RegQueryValueExA
.text:0040A649                 sub     esp, 18h
.text:0040A64C                 test    eax, eax
.text:0040A64E                 jnz     short loc_40A65A
.text:0040A650                 cmp     dword ptr [esp+28h], 0FFh
.text:0040A658                 jbe     short loc_40A661
.text:0040A65A
.text:0040A65A loc_40A65A:                             ; CODE XREF: .text:0040A64E↑j
.text:0040A65A                 xor     eax, eax
.text:0040A65C                 jmp     loc_40A415
.text:0040A661 ; ---------------------------------------------------------------------------
.text:0040A661
.text:0040A661 loc_40A661:                             ; CODE XREF: .text:0040A658↑j
.text:0040A661                 mov     edx, [esp+2Ch]
.text:0040A665                 mov     [esp], edx
.text:0040A668                 call    RegCloseKey
.text:0040A66D                 sub     esp, 4
.text:0040A670                 mov     [esp+4], esi
.text:0040A674                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0040A67B                 call    lstrcmpiA
.text:0040A680                 sub     esp, 8
.text:0040A683                 test    eax, eax
.text:0040A685                 jz      short loc_40A6D0
.text:0040A687
.text:0040A687 loc_40A687:                             ; CODE XREF: .text:0040A6E0↓j
.text:0040A687                 mov     [esp+4], esi
.text:0040A68B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0040A692                 call    lstrcmpiA
.text:0040A697                 sub     esp, 8
.text:0040A69A                 test    eax, eax
.text:0040A69C                 jz      short loc_40A6BE
.text:0040A69E
.text:0040A69E loc_40A69E:                             ; CODE XREF: .text:0040A6CE↓j
.text:0040A69E                 mov     [esp+4], esi
.text:0040A6A2                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0040A6A9                 call    lstrcmpiA
.text:0040A6AE                 sub     esp, 8
.text:0040A6B1                 test    eax, eax
.text:0040A6B3                 jnz     loc_40A4D8
.text:0040A6B9                 jmp     loc_40A558
.text:0040A6BE ; ---------------------------------------------------------------------------
.text:0040A6BE
.text:0040A6BE loc_40A6BE:                             ; CODE XREF: .text:0040A69C↑j
.text:0040A6BE                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040A6C6                 mov     [esp], ebx
.text:0040A6C9                 call    strcat
.text:0040A6CE                 jmp     short loc_40A69E
.text:0040A6D0 ; ---------------------------------------------------------------------------
.text:0040A6D0
.text:0040A6D0 loc_40A6D0:                             ; CODE XREF: .text:0040A685↑j
.text:0040A6D0                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040A6D8                 mov     [esp], ebx
.text:0040A6DB                 call    strcat
.text:0040A6E0                 jmp     short loc_40A687
.text:0040A6E2 ; ---------------------------------------------------------------------------
.text:0040A6E2
.text:0040A6E2 loc_40A6E2:                             ; CODE XREF: .text:0040A47D↑j
.text:0040A6E2                                         ; .text:0040A48B↑j
.text:0040A6E2                 cmp     eax, 5
.text:0040A6E5                 jnz     loc_40A4B7
.text:0040A6EB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040A6F0                 cmp     eax, 2
.text:0040A6F3                 jz      short loc_40A75A
.text:0040A6F5                 cmp     eax, 1
.text:0040A6F8                 jz      short loc_40A733
.text:0040A6FA                 test    eax, eax
.text:0040A6FC                 jnz     loc_40A4B7
.text:0040A702                 mov     dword ptr [ebx], 7263694Dh
.text:0040A708                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040A70F                 mov     dword ptr [ebx+8], 69572074h
.text:0040A716                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040A71D                 mov     dword ptr [ebx+10h], 30322073h
.text:0040A724                 mov     word ptr [ebx+14h], 3030h
.text:0040A72A                 mov     byte ptr [ebx+16h], 0
.text:0040A72E                 jmp     loc_40A4B7
.text:0040A733 ; ---------------------------------------------------------------------------
.text:0040A733
.text:0040A733 loc_40A733:                             ; CODE XREF: .text:0040A6F8↑j
.text:0040A733                 mov     dword ptr [ebx], 7263694Dh
.text:0040A739                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040A740                 mov     dword ptr [ebx+8], 69572074h
.text:0040A747                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040A74E                 mov     dword ptr [ebx+10h], 50582073h
.text:0040A755                 jmp     loc_40A4B3
.text:0040A75A ; ---------------------------------------------------------------------------
.text:0040A75A
.text:0040A75A loc_40A75A:                             ; CODE XREF: .text:0040A6F3↑j
.text:0040A75A                 mov     dword ptr [ebx], 7263694Dh
.text:0040A760                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040A767                 mov     dword ptr [ebx+8], 69572074h
.text:0040A76E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040A775                 mov     dword ptr [ebx+10h], 65532073h
.text:0040A77C                 mov     dword ptr [ebx+14h], 72657672h
.text:0040A783                 mov     dword ptr [ebx+18h], 30303220h
.text:0040A78A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:0040A790                 jmp     loc_40A4B7
.text:0040A795 ; ---------------------------------------------------------------------------
.text:0040A795
.text:0040A795 loc_40A795:                             ; CODE XREF: .text:0040A474↑j
.text:0040A795                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040A79B                 test    edx, edx
.text:0040A79D                 jnz     loc_40A47A
.text:0040A7A3                 mov     dword ptr [ebx], 7263694Dh
.text:0040A7A9                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040A7B0                 mov     dword ptr [ebx+8], 69572074h
.text:0040A7B7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040A7BE                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040A7C5                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040A7CC                 mov     byte ptr [ebx+18h], 0
.text:0040A7D0                 jmp     loc_40A4B7
.text:0040A7D5 ; ---------------------------------------------------------------------------
.text:0040A7D5
.text:0040A7D5 loc_40A7D5:                             ; CODE XREF: .text:0040A46B↑j
.text:0040A7D5                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040A7DC                 jnz     loc_40A471
.text:0040A7E2                 mov     dword ptr [ebx], 7263694Dh
.text:0040A7E8                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040A7EF                 mov     dword ptr [ebx+8], 69572074h
.text:0040A7F6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040A7FD                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040A804                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040A80B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:0040A811                 jmp     loc_40A4B7
.text:0040A816 ; ---------------------------------------------------------------------------
.text:0040A816
.text:0040A816 loc_40A816:                             ; CODE XREF: .text:0040A3A6↑j
.text:0040A816                 cld
.text:0040A817                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0040A81C                 mov     ecx, 8
.text:0040A821                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:0040A828                 mov     edi, ebx
.text:0040A82A                 rep movsd
.text:0040A82C                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:0040A833                 mov     [edi+2], dl
.text:0040A836                 mov     [edi], si
.text:0040A839                 jmp     loc_40A450
.text:0040A839 ; ---------------------------------------------------------------------------
.text:0040A83E                 align 10h
.text:0040A840
.text:0040A840 loc_40A840:                             ; CODE XREF: .text:0040A39D↑j
.text:0040A840                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040A846                 cmp     ecx, 4
.text:0040A849                 jz      loc_40A900
.text:0040A84F
.text:0040A84F loc_40A84F:                             ; CODE XREF: .text:0040A956↓j
.text:0040A84F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040A855
.text:0040A855 loc_40A855:                             ; CODE XREF: .text:0040A908↓j
.text:0040A855                 cmp     ecx, 4
.text:0040A858                 jz      short loc_40A864
.text:0040A85A
.text:0040A85A loc_40A85A:                             ; CODE XREF: .text:0040A86C↓j
.text:0040A85A                                         ; .text:0040A871↓j
.text:0040A85A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040A85F                 jmp     loc_40A3CC
.text:0040A864 ; ---------------------------------------------------------------------------
.text:0040A864
.text:0040A864 loc_40A864:                             ; CODE XREF: .text:0040A858↑j
.text:0040A864                 cmp     edx, 0Ah
.text:0040A867                 jz      short loc_40A891
.text:0040A869
.text:0040A869 loc_40A869:                             ; CODE XREF: .text:0040A8DF↓j
.text:0040A869                 cmp     ecx, 4
.text:0040A86C                 jnz     short loc_40A85A
.text:0040A86E                 cmp     edx, 5Ah ; 'Z'
.text:0040A871                 jnz     short loc_40A85A
.text:0040A873                 cld
.text:0040A874                 mov     edi, ebx
.text:0040A876                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0040A87B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:0040A882                 mov     ecx, 9
.text:0040A887                 rep movsd
.text:0040A889                 mov     [edi], bx
.text:0040A88C                 jmp     loc_40A450
.text:0040A891 ; ---------------------------------------------------------------------------
.text:0040A891
.text:0040A891 loc_40A891:                             ; CODE XREF: .text:0040A867↑j
.text:0040A891                 mov     dword ptr [ebx], 7263694Dh
.text:0040A897                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040A89E                 mov     dword ptr [ebx+8], 69572074h
.text:0040A8A5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040A8AC                 mov     dword ptr [ebx+10h], 38392073h
.text:0040A8B3                 mov     byte ptr [ebx+14h], 0
.text:0040A8B7                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040A8BD                 lea     edi, [edx-7CFh]
.text:0040A8C3                 cmp     edi, 0B7h ; '·'
.text:0040A8C9                 jbe     short loc_40A8F3
.text:0040A8CB                 cmp     edx, 886h
.text:0040A8D1                 ja      short loc_40A8E1
.text:0040A8D3
.text:0040A8D3 loc_40A8D3:                             ; CODE XREF: .text:0040A8F1↓j
.text:0040A8D3                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040A8D9                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040A8DF                 jmp     short loc_40A869
.text:0040A8E1 ; ---------------------------------------------------------------------------
.text:0040A8E1
.text:0040A8E1 loc_40A8E1:                             ; CODE XREF: .text:0040A8D1↑j
.text:0040A8E1                 mov     dword ptr [esp+4], offset loc_40A366
.text:0040A8E9
.text:0040A8E9 loc_40A8E9:                             ; CODE XREF: .text:0040A8FB↓j
.text:0040A8E9                 mov     [esp], ebx
.text:0040A8EC                 call    strcat
.text:0040A8F1                 jmp     short loc_40A8D3
.text:0040A8F3 ; ---------------------------------------------------------------------------
.text:0040A8F3
.text:0040A8F3 loc_40A8F3:                             ; CODE XREF: .text:0040A8C9↑j
.text:0040A8F3                 mov     dword ptr [esp+4], 40A36Ah
.text:0040A8FB                 jmp     short loc_40A8E9
.text:0040A8FB ; ---------------------------------------------------------------------------
.text:0040A8FD                 align 10h
.text:0040A900
.text:0040A900 loc_40A900:                             ; CODE XREF: .text:0040A849↑j
.text:0040A900                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040A906                 test    edx, edx
.text:0040A908                 jnz     loc_40A855
.text:0040A90E                 mov     dword ptr [ebx], 7263694Dh
.text:0040A914                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040A91B                 mov     dword ptr [ebx+8], 69572074h
.text:0040A922                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040A929                 mov     dword ptr [ebx+10h], 35392073h
.text:0040A930                 mov     byte ptr [ebx+14h], 0
.text:0040A934                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040A93A                 lea     ecx, [edx-3B7h]
.text:0040A940                 cmp     ecx, 81h
.text:0040A946                 jbe     short loc_40A96D
.text:0040A948                 cmp     edx, 438h
.text:0040A94E                 ja      short loc_40A95B
.text:0040A950
.text:0040A950 loc_40A950:                             ; CODE XREF: .text:0040A96B↓j
.text:0040A950                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040A956                 jmp     loc_40A84F
.text:0040A95B ; ---------------------------------------------------------------------------
.text:0040A95B
.text:0040A95B loc_40A95B:                             ; CODE XREF: .text:0040A94E↑j
.text:0040A95B                 mov     dword ptr [esp+4], offset loc_40A36F
.text:0040A963
.text:0040A963 loc_40A963:                             ; CODE XREF: .text:0040A975↓j
.text:0040A963                 mov     [esp], ebx
.text:0040A966                 call    strcat
.text:0040A96B                 jmp     short loc_40A950
.text:0040A96D ; ---------------------------------------------------------------------------
.text:0040A96D
.text:0040A96D loc_40A96D:                             ; CODE XREF: .text:0040A946↑j
.text:0040A96D                 mov     dword ptr [esp+4], 40A36Ah
.text:0040A975                 jmp     short loc_40A963
.text:0040A975 ; ---------------------------------------------------------------------------
.text:0040A977                 align 10h
.text:0040A980
.text:0040A980 ; =============== S U B R O U T I N E =======================================
.text:0040A980
.text:0040A980
.text:0040A980 sub_40A980      proc near               ; CODE XREF: .text:0040B4DE↓p
.text:0040A980                                         ; sub_40B960+12A↓p
.text:0040A980                 sub     esp, 0Ch
.text:0040A983                 call    sub_40AA90
.text:0040A988                 mov     eax, ds:dword_4111C0
.text:0040A98D                 add     esp, 0Ch
.text:0040A990                 retn
.text:0040A990 sub_40A980      endp
.text:0040A990
.text:0040A991 ; ---------------------------------------------------------------------------
.text:0040A991                 jmp     short loc_40A9A0
.text:0040A991 ; ---------------------------------------------------------------------------
.text:0040A993                 align 10h
.text:0040A9A0
.text:0040A9A0 loc_40A9A0:                             ; CODE XREF: .text:0040A991↑j
.text:0040A9A0                 sub     esp, 0Ch
.text:0040A9A3                 call    sub_40AA90
.text:0040A9A8                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040A9AD                 add     esp, 0Ch
.text:0040A9B0                 retn
.text:0040A9B1 ; ---------------------------------------------------------------------------
.text:0040A9B1                 jmp     short loc_40A9C0
.text:0040A9B1 ; ---------------------------------------------------------------------------
.text:0040A9B3                 align 10h
.text:0040A9C0
.text:0040A9C0 loc_40A9C0:                             ; CODE XREF: .text:0040A9B1↑j
.text:0040A9C0                 sub     esp, 0Ch
.text:0040A9C3                 call    sub_40AA90
.text:0040A9C8                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040A9CD                 add     esp, 0Ch
.text:0040A9D0                 retn
.text:0040A9D1 ; ---------------------------------------------------------------------------
.text:0040A9D1                 jmp     short loc_40A9E0
.text:0040A9D1 ; ---------------------------------------------------------------------------
.text:0040A9D3                 align 10h
.text:0040A9E0
.text:0040A9E0 loc_40A9E0:                             ; CODE XREF: .text:0040A9D1↑j
.text:0040A9E0                 sub     esp, 0Ch
.text:0040A9E3                 call    sub_40AA90
.text:0040A9E8                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040A9ED                 add     esp, 0Ch
.text:0040A9F0                 retn
.text:0040A9F1 ; ---------------------------------------------------------------------------
.text:0040A9F1                 jmp     short loc_40AA00
.text:0040A9F1 ; ---------------------------------------------------------------------------
.text:0040A9F3                 align 10h
.text:0040AA00
.text:0040AA00 loc_40AA00:                             ; CODE XREF: .text:0040A9F1↑j
.text:0040AA00                 sub     esp, 0Ch
.text:0040AA03                 call    GetVersion
.text:0040AA08                 shr     eax, 10h
.text:0040AA0B                 add     esp, 0Ch
.text:0040AA0E                 retn
.text:0040AA0E ; ---------------------------------------------------------------------------
.text:0040AA0F                 align 10h
.text:0040AA10                 sub     esp, 0Ch
.text:0040AA13                 call    sub_40AA90
.text:0040AA18                 xor     eax, eax
.text:0040AA1A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0040AA21                 setz    al
.text:0040AA24                 add     esp, 0Ch
.text:0040AA27                 retn
.text:0040AA27 ; ---------------------------------------------------------------------------
.text:0040AA28                 align 10h
.text:0040AA30
.text:0040AA30 ; =============== S U B R O U T I N E =======================================
.text:0040AA30
.text:0040AA30
.text:0040AA30 sub_40AA30      proc near               ; CODE XREF: .text:loc_4085D0↑p
.text:0040AA30                                         ; .text:loc_40B4C4↓p ...
.text:0040AA30                 sub     esp, 0Ch
.text:0040AA33                 call    sub_40AA90
.text:0040AA38                 xor     eax, eax
.text:0040AA3A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0040AA41                 setz    al
.text:0040AA44                 add     esp, 0Ch
.text:0040AA47                 retn
.text:0040AA47 sub_40AA30      endp
.text:0040AA47
.text:0040AA47 ; ---------------------------------------------------------------------------
.text:0040AA48                 align 10h
.text:0040AA50                 sub     esp, 0Ch
.text:0040AA53                 call    sub_40AA90
.text:0040AA58                 xor     eax, eax
.text:0040AA5A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0040AA61                 setz    al
.text:0040AA64                 add     esp, 0Ch
.text:0040AA67                 retn
.text:0040AA67 ; ---------------------------------------------------------------------------
.text:0040AA68                 align 10h
.text:0040AA70                 sub     esp, 0Ch
.text:0040AA73                 call    sub_40AA90
.text:0040AA78                 xor     eax, eax
.text:0040AA7A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0040AA81                 setz    al
.text:0040AA84                 add     esp, 0Ch
.text:0040AA87                 retn
.text:0040AA87 ; ---------------------------------------------------------------------------
.text:0040AA88                 align 10h
.text:0040AA90
.text:0040AA90 ; =============== S U B R O U T I N E =======================================
.text:0040AA90
.text:0040AA90
.text:0040AA90 sub_40AA90      proc near               ; CODE XREF: .text:0040A390↑p
.text:0040AA90                                         ; sub_40A980+3↑p ...
.text:0040AA90
.text:0040AA90 lpVersionInformation= dword ptr -0BCh
.text:0040AA90 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0040AA90
.text:0040AA90                 sub     esp, 0BCh
.text:0040AA96                 mov     edx, ds:dword_411270
.text:0040AA9C                 test    edx, edx
.text:0040AA9E                 jz      short loc_40AAB0
.text:0040AAA0
.text:0040AAA0 loc_40AAA0:                             ; CODE XREF: sub_40AA90+7B↓j
.text:0040AAA0                 mov     edx, 1
.text:0040AAA5
.text:0040AAA5 loc_40AAA5:                             ; CODE XREF: sub_40AA90+217↓j
.text:0040AAA5                 mov     eax, edx
.text:0040AAA7                 add     esp, 0BCh
.text:0040AAAD                 retn
.text:0040AAAD ; ---------------------------------------------------------------------------
.text:0040AAAE                 align 10h
.text:0040AAB0
.text:0040AAB0 loc_40AAB0:                             ; CODE XREF: sub_40AA90+E↑j
.text:0040AAB0                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0040AAB7                 mov     edx, 9Ch ; 'œ'
.text:0040AABC                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0040AAC2                 call    GetVersionExA
.text:0040AAC7                 sub     esp, 4
.text:0040AACA                 test    eax, eax
.text:0040AACC                 jz      loc_40AC84
.text:0040AAD2
.text:0040AAD2 loc_40AAD2:                             ; CODE XREF: sub_40AA90+245↓j
.text:0040AAD2                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0040AAD9                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040AADE                 cmp     eax, 1
.text:0040AAE1                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040AAE7                 jz      loc_40ABD0
.text:0040AAED                 cmp     eax, 1
.text:0040AAF0                 jb      loc_40ABC0
.text:0040AAF6                 cmp     eax, 2
.text:0040AAF9                 jz      short loc_40AB1A
.text:0040AAFB                 cmp     eax, 3
.text:0040AAFE                 jz      short loc_40AB0D
.text:0040AB00
.text:0040AB00 loc_40AB00:                             ; CODE XREF: sub_40AA90+88↓j
.text:0040AB00                                         ; sub_40AA90+C0↓j ...
.text:0040AB00                 mov     edx, 1
.text:0040AB05                 mov     ds:dword_411270, edx
.text:0040AB0B                 jmp     short loc_40AAA0
.text:0040AB0D ; ---------------------------------------------------------------------------
.text:0040AB0D
.text:0040AB0D loc_40AB0D:                             ; CODE XREF: sub_40AA90+6E↑j
.text:0040AB0D                 mov     ecx, 17h
.text:0040AB12
.text:0040AB12 loc_40AB12:                             ; CODE XREF: sub_40AA90+1A7↓j
.text:0040AB12                 mov     ds:dword_4111C0, ecx
.text:0040AB18                 jmp     short loc_40AB00
.text:0040AB1A ; ---------------------------------------------------------------------------
.text:0040AB1A
.text:0040AB1A loc_40AB1A:                             ; CODE XREF: sub_40AA90+69↑j
.text:0040AB1A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040AB1F                 cmp     eax, 3
.text:0040AB22                 jz      short loc_40AB9B
.text:0040AB24                 cmp     eax, 4
.text:0040AB27                 jz      short loc_40AB8A
.text:0040AB29
.text:0040AB29 loc_40AB29:                             ; CODE XREF: sub_40AA90+102↓j
.text:0040AB29                 cmp     eax, 4
.text:0040AB2C                 ja      short loc_40AB52
.text:0040AB2E                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040AB34                 test    ecx, ecx
.text:0040AB36                 jnz     short loc_40AB52
.text:0040AB38                 mov     edx, 1Eh
.text:0040AB3D
.text:0040AB3D loc_40AB3D:                             ; CODE XREF: sub_40AA90+DF↓j
.text:0040AB3D                 mov     ds:dword_4111C0, edx
.text:0040AB43
.text:0040AB43 loc_40AB43:                             ; CODE XREF: sub_40AA90+C5↓j
.text:0040AB43                                         ; sub_40AA90+D8↓j ...
.text:0040AB43                 movzx   ecx, ds:word_411264
.text:0040AB4A                 add     ds:dword_4111C0, ecx
.text:0040AB50                 jmp     short loc_40AB00
.text:0040AB52 ; ---------------------------------------------------------------------------
.text:0040AB52
.text:0040AB52 loc_40AB52:                             ; CODE XREF: sub_40AA90+9C↑j
.text:0040AB52                                         ; sub_40AA90+A6↑j
.text:0040AB52                 cmp     eax, 5
.text:0040AB55                 jnz     short loc_40AB43
.text:0040AB57                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040AB5C                 cmp     eax, 2
.text:0040AB5F                 jz      short loc_40AB7E
.text:0040AB61                 cmp     eax, 1
.text:0040AB64                 jz      short loc_40AB71
.text:0040AB66                 test    eax, eax
.text:0040AB68                 jnz     short loc_40AB43
.text:0040AB6A                 mov     edx, 32h ; '2'
.text:0040AB6F                 jmp     short loc_40AB3D
.text:0040AB71 ; ---------------------------------------------------------------------------
.text:0040AB71
.text:0040AB71 loc_40AB71:                             ; CODE XREF: sub_40AA90+D4↑j
.text:0040AB71                 mov     ecx, 3Ch ; '<'
.text:0040AB76
.text:0040AB76 loc_40AB76:                             ; CODE XREF: sub_40AA90+122↓j
.text:0040AB76                 mov     ds:dword_4111C0, ecx
.text:0040AB7C                 jmp     short loc_40AB43
.text:0040AB7E ; ---------------------------------------------------------------------------
.text:0040AB7E
.text:0040AB7E loc_40AB7E:                             ; CODE XREF: sub_40AA90+CF↑j
.text:0040AB7E                 mov     eax, 46h ; 'F'
.text:0040AB83
.text:0040AB83 loc_40AB83:                             ; CODE XREF: sub_40AA90+109↓j
.text:0040AB83                                         ; sub_40AA90+129↓j
.text:0040AB83                 mov     ds:dword_4111C0, eax
.text:0040AB88                 jmp     short loc_40AB43
.text:0040AB8A ; ---------------------------------------------------------------------------
.text:0040AB8A
.text:0040AB8A loc_40AB8A:                             ; CODE XREF: sub_40AA90+97↑j
.text:0040AB8A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040AB90                 test    ecx, ecx
.text:0040AB92                 jnz     short loc_40AB29
.text:0040AB94                 mov     eax, 28h ; '('
.text:0040AB99                 jmp     short loc_40AB83
.text:0040AB9B ; ---------------------------------------------------------------------------
.text:0040AB9B
.text:0040AB9B loc_40AB9B:                             ; CODE XREF: sub_40AA90+92↑j
.text:0040AB9B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040ABA0                 cmp     eax, 33h ; '3'
.text:0040ABA3                 jz      short loc_40ABB4
.text:0040ABA5                 cmp     eax, 5
.text:0040ABA8                 setz    cl
.text:0040ABAB                 movzx   edx, cl
.text:0040ABAE                 lea     ecx, [edx+edx*4+1Eh]
.text:0040ABB2                 jmp     short loc_40AB76
.text:0040ABB4 ; ---------------------------------------------------------------------------
.text:0040ABB4
.text:0040ABB4 loc_40ABB4:                             ; CODE XREF: sub_40AA90+113↑j
.text:0040ABB4                 mov     eax, 24h ; '$'
.text:0040ABB9                 jmp     short loc_40AB83
.text:0040ABB9 ; ---------------------------------------------------------------------------
.text:0040ABBB                 align 10h
.text:0040ABC0
.text:0040ABC0 loc_40ABC0:                             ; CODE XREF: sub_40AA90+60↑j
.text:0040ABC0                 mov     edx, 2
.text:0040ABC5                 mov     ds:dword_4111C0, edx
.text:0040ABCB                 jmp     loc_40AB00
.text:0040ABD0 ; ---------------------------------------------------------------------------
.text:0040ABD0
.text:0040ABD0 loc_40ABD0:                             ; CODE XREF: sub_40AA90+57↑j
.text:0040ABD0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040ABD6                 cmp     ecx, 4
.text:0040ABD9                 jnz     loc_40AB00
.text:0040ABDF                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040ABE4                 test    eax, eax
.text:0040ABE6                 jnz     short loc_40AC0A
.text:0040ABE8                 mov     eax, 0Ah
.text:0040ABED                 mov     ds:dword_4111C0, eax
.text:0040ABF2                 lea     eax, [edx-3B7h]
.text:0040ABF8                 cmp     eax, 81h
.text:0040ABFD                 ja      short loc_40AC75
.text:0040ABFF                 mov     edx, 0Bh
.text:0040AC04
.text:0040AC04 loc_40AC04:                             ; CODE XREF: sub_40AA90+1F2↓j
.text:0040AC04                 mov     ds:dword_4111C0, edx
.text:0040AC0A
.text:0040AC0A loc_40AC0A:                             ; CODE XREF: sub_40AA90+156↑j
.text:0040AC0A                                         ; sub_40AA90+1EB↓j
.text:0040AC0A                 cmp     ecx, 4
.text:0040AC0D                 jnz     loc_40AB00
.text:0040AC13                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040AC1A                 jz      short loc_40AC3C
.text:0040AC1C
.text:0040AC1C loc_40AC1C:                             ; CODE XREF: sub_40AA90+1D4↓j
.text:0040AC1C                                         ; sub_40AA90+1DC↓j
.text:0040AC1C                 cmp     ecx, 4
.text:0040AC1F                 jnz     loc_40AB00
.text:0040AC25                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040AC2C                 jnz     loc_40AB00
.text:0040AC32                 mov     ecx, 12h
.text:0040AC37                 jmp     loc_40AB12
.text:0040AC3C ; ---------------------------------------------------------------------------
.text:0040AC3C
.text:0040AC3C loc_40AC3C:                             ; CODE XREF: sub_40AA90+18A↑j
.text:0040AC3C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040AC42                 mov     eax, 0Eh
.text:0040AC47                 mov     ds:dword_4111C0, eax
.text:0040AC4C                 lea     eax, [edx-7CFh]
.text:0040AC52                 cmp     eax, 0B7h ; '·'
.text:0040AC57                 ja      short loc_40AC66
.text:0040AC59                 mov     edx, 0Fh
.text:0040AC5E
.text:0040AC5E loc_40AC5E:                             ; CODE XREF: sub_40AA90+1E3↓j
.text:0040AC5E                 mov     ds:dword_4111C0, edx
.text:0040AC64                 jmp     short loc_40AC1C
.text:0040AC66 ; ---------------------------------------------------------------------------
.text:0040AC66
.text:0040AC66 loc_40AC66:                             ; CODE XREF: sub_40AA90+1C7↑j
.text:0040AC66                 cmp     edx, 886h
.text:0040AC6C                 jbe     short loc_40AC1C
.text:0040AC6E                 mov     edx, 10h
.text:0040AC73                 jmp     short loc_40AC5E
.text:0040AC75 ; ---------------------------------------------------------------------------
.text:0040AC75
.text:0040AC75 loc_40AC75:                             ; CODE XREF: sub_40AA90+16D↑j
.text:0040AC75                 cmp     edx, 438h
.text:0040AC7B                 jbe     short loc_40AC0A
.text:0040AC7D                 mov     edx, 0Ch
.text:0040AC82                 jmp     short loc_40AC04
.text:0040AC84 ; ---------------------------------------------------------------------------
.text:0040AC84
.text:0040AC84 loc_40AC84:                             ; CODE XREF: sub_40AA90+3C↑j
.text:0040AC84                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040AC8C                 xor     edx, edx
.text:0040AC8E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0040AC92                 mov     dword_410060, edx
.text:0040AC98                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040AC9B                 call    GetVersionExA
.text:0040ACA0                 sub     esp, 4
.text:0040ACA3                 xor     edx, edx
.text:0040ACA5                 test    eax, eax
.text:0040ACA7                 jz      loc_40AAA5
.text:0040ACAD                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0040ACB1                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0040ACB5                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040ACBB                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040ACBF                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0040ACC5                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0040ACC9                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040ACCF                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0040ACD5                 jmp     loc_40AAD2
.text:0040ACD5 sub_40AA90      endp
.text:0040ACD5
.text:0040ACD5 ; ---------------------------------------------------------------------------
.text:0040ACDA                 align 10h
.text:0040ACE0
.text:0040ACE0 ; =============== S U B R O U T I N E =======================================
.text:0040ACE0
.text:0040ACE0
.text:0040ACE0 sub_40ACE0      proc near               ; CODE XREF: .text:00408303↑p
.text:0040ACE0                                         ; .text:00408353↑p
.text:0040ACE0
.text:0040ACE0 arg_4           = dword ptr  8
.text:0040ACE0
.text:0040ACE0                 sub     esp, 0Ch
.text:0040ACE3                 mov     edx, [esp+0Ch+arg_4]
.text:0040ACE7                 test    edx, edx
.text:0040ACE9                 jz      short loc_40ACF0
.text:0040ACEB                 add     esp, 0Ch
.text:0040ACEE                 jmp     short sub_40AD30
.text:0040ACF0 ; ---------------------------------------------------------------------------
.text:0040ACF0
.text:0040ACF0 loc_40ACF0:                             ; CODE XREF: sub_40ACE0+9↑j
.text:0040ACF0                 call    _errno
.text:0040ACF5                 mov     dword ptr [eax], 16h
.text:0040ACFB                 xor     eax, eax
.text:0040ACFD                 add     esp, 0Ch
.text:0040AD00                 retn
.text:0040AD00 sub_40ACE0      endp
.text:0040AD00
.text:0040AD01 ; ---------------------------------------------------------------------------
.text:0040AD01                 jmp     short sub_40AD10
.text:0040AD01 ; ---------------------------------------------------------------------------
.text:0040AD03                 align 10h
.text:0040AD10
.text:0040AD10 ; =============== S U B R O U T I N E =======================================
.text:0040AD10
.text:0040AD10
.text:0040AD10 ; int __cdecl sub_40AD10(LPCSTR)
.text:0040AD10 sub_40AD10      proc near               ; CODE XREF: .text:004084F8↑p
.text:0040AD10                                         ; .text:00408506↑p ...
.text:0040AD10
.text:0040AD10 lpFileName      = dword ptr -0Ch
.text:0040AD10 Destination     = dword ptr -8
.text:0040AD10 arg_0           = dword ptr  4
.text:0040AD10
.text:0040AD10                 sub     esp, 0Ch
.text:0040AD13                 mov     edx, [esp+0Ch+arg_0]
.text:0040AD17                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040AD1F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0040AD22                 call    sub_40AD30
.text:0040AD27                 add     esp, 0Ch
.text:0040AD2A                 retn
.text:0040AD2A sub_40AD10      endp
.text:0040AD2A
.text:0040AD2A ; ---------------------------------------------------------------------------
.text:0040AD2B                 align 10h
.text:0040AD30
.text:0040AD30 ; =============== S U B R O U T I N E =======================================
.text:0040AD30
.text:0040AD30
.text:0040AD30 ; int __cdecl sub_40AD30(LPCSTR lpFileName, char *Destination)
.text:0040AD30 sub_40AD30      proc near               ; CODE XREF: sub_40ACE0+E↑j
.text:0040AD30                                         ; sub_40AD10+12↑p
.text:0040AD30
.text:0040AD30 Size            = dword ptr -2Ch
.text:0040AD30 nBufferLength   = dword ptr -28h
.text:0040AD30 lpBuffer        = dword ptr -24h
.text:0040AD30 lpFilePart      = dword ptr -20h
.text:0040AD30 FilePart        = dword ptr -14h
.text:0040AD30 lpFileName      = dword ptr  4
.text:0040AD30 Destination     = dword ptr  8
.text:0040AD30
.text:0040AD30                 push    ebp
.text:0040AD31                 push    edi
.text:0040AD32                 push    esi
.text:0040AD33                 push    ebx
.text:0040AD34                 sub     esp, 1Ch
.text:0040AD37                 mov     edi, [esp+2Ch+lpFileName]
.text:0040AD3B                 mov     ebp, [esp+2Ch+Destination]
.text:0040AD3F                 test    edi, edi
.text:0040AD41                 jz      loc_40AE49
.text:0040AD47                 cmp     byte ptr [edi], 0
.text:0040AD4A                 jz      loc_40AE3C
.text:0040AD50                 mov     [esp+2Ch+Size], 104h ; Size
.text:0040AD57                 call    malloc
.text:0040AD5C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040AD60                 lea     edx, [esp+2Ch+FilePart]
.text:0040AD64                 mov     ebx, eax
.text:0040AD66                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040AD6A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0040AD72                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040AD75                 call    GetFullPathNameA
.text:0040AD7A                 sub     esp, 10h
.text:0040AD7D                 mov     esi, eax
.text:0040AD7F                 test    eax, eax
.text:0040AD81                 jz      loc_40AE2A
.text:0040AD87                 cmp     eax, 104h
.text:0040AD8C                 jle     short loc_40AD9D
.text:0040AD8E                 test    ebp, ebp
.text:0040AD90                 jz      short loc_40ADF9
.text:0040AD92                 call    _errno
.text:0040AD97                 mov     dword ptr [eax], 26h ; '&'
.text:0040AD9D
.text:0040AD9D loc_40AD9D:                             ; CODE XREF: sub_40AD30+5C↑j
.text:0040AD9D                                         ; sub_40AD30+F5↓j
.text:0040AD9D                 call    _errno
.text:0040ADA2                 mov     edi, [eax]
.text:0040ADA4                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040ADAC                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040ADAF                 call    sub_40AE60
.text:0040ADB4                 test    eax, eax
.text:0040ADB6                 jnz     short loc_40ADD0
.text:0040ADB8                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040ADBD                 cmp     al, 2Fh ; '/'
.text:0040ADBF                 jz      short loc_40ADD0
.text:0040ADC1                 cmp     al, 5Ch ; '\'
.text:0040ADC3                 jz      short loc_40ADD0
.text:0040ADC5                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0040ADC9                 mov     byte ptr [esi+ebx+1], 0
.text:0040ADCE                 mov     esi, esi
.text:0040ADD0
.text:0040ADD0 loc_40ADD0:                             ; CODE XREF: sub_40AD30+86↑j
.text:0040ADD0                                         ; sub_40AD30+8F↑j ...
.text:0040ADD0                 call    _errno
.text:0040ADD5                 mov     [eax], edi
.text:0040ADD7                 mov     [esp+2Ch+Size], ebx
.text:0040ADDA                 call    sub_4081F0
.text:0040ADDF                 test    ebp, ebp
.text:0040ADE1                 mov     eax, ebx
.text:0040ADE3                 jz      short loc_40ADF1
.text:0040ADE5                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0040ADE9                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040ADEC                 call    strcpy
.text:0040ADF1
.text:0040ADF1 loc_40ADF1:                             ; CODE XREF: sub_40AD30+B3↑j
.text:0040ADF1                                         ; sub_40AD30+10A↓j
.text:0040ADF1                 add     esp, 1Ch
.text:0040ADF4                 pop     ebx
.text:0040ADF5                 pop     esi
.text:0040ADF6                 pop     edi
.text:0040ADF7                 pop     ebp
.text:0040ADF8                 retn
.text:0040ADF9 ; ---------------------------------------------------------------------------
.text:0040ADF9
.text:0040ADF9 loc_40ADF9:                             ; CODE XREF: sub_40AD30+60↑j
.text:0040ADF9                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040ADFC                 lea     ecx, [eax+2]
.text:0040ADFF                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0040AE03                 call    realloc
.text:0040AE08                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040AE0C                 lea     edx, [esp+2Ch+FilePart]
.text:0040AE10                 mov     ebx, eax
.text:0040AE12                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040AE16                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040AE1A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040AE1D                 call    GetFullPathNameA
.text:0040AE22                 sub     esp, 10h
.text:0040AE25                 jmp     loc_40AD9D
.text:0040AE2A ; ---------------------------------------------------------------------------
.text:0040AE2A
.text:0040AE2A loc_40AE2A:                             ; CODE XREF: sub_40AD30+51↑j
.text:0040AE2A                 call    sub_4076C0
.text:0040AE2F                 mov     esi, eax
.text:0040AE31                 call    _errno
.text:0040AE36                 mov     [eax], esi
.text:0040AE38
.text:0040AE38 loc_40AE38:                             ; CODE XREF: sub_40AD30+117↓j
.text:0040AE38                                         ; sub_40AD30+124↓j
.text:0040AE38                 xor     eax, eax
.text:0040AE3A                 jmp     short loc_40ADF1
.text:0040AE3C ; ---------------------------------------------------------------------------
.text:0040AE3C
.text:0040AE3C loc_40AE3C:                             ; CODE XREF: sub_40AD30+1A↑j
.text:0040AE3C                 call    _errno
.text:0040AE41                 mov     dword ptr [eax], 2
.text:0040AE47                 jmp     short loc_40AE38
.text:0040AE49 ; ---------------------------------------------------------------------------
.text:0040AE49
.text:0040AE49 loc_40AE49:                             ; CODE XREF: sub_40AD30+11↑j
.text:0040AE49                 call    _errno
.text:0040AE4E                 mov     dword ptr [eax], 16h
.text:0040AE54                 jmp     short loc_40AE38
.text:0040AE54 sub_40AD30      endp
.text:0040AE54
.text:0040AE54 ; ---------------------------------------------------------------------------
.text:0040AE56                 align 10h
.text:0040AE60
.text:0040AE60 ; =============== S U B R O U T I N E =======================================
.text:0040AE60
.text:0040AE60
.text:0040AE60 ; int __cdecl sub_40AE60(LPCSTR lpFileName, int)
.text:0040AE60 sub_40AE60      proc near               ; CODE XREF: .text:004081D2↑p
.text:0040AE60                                         ; sub_407940+2793↑p ...
.text:0040AE60
.text:0040AE60 uMode           = dword ptr -1Ch
.text:0040AE60 var_10          = dword ptr -10h
.text:0040AE60 var_C           = dword ptr -0Ch
.text:0040AE60 var_8           = dword ptr -8
.text:0040AE60 var_4           = dword ptr -4
.text:0040AE60 lpFileName      = dword ptr  4
.text:0040AE60 arg_4           = dword ptr  8
.text:0040AE60
.text:0040AE60                 sub     esp, 1Ch
.text:0040AE63                 mov     [esp+1Ch+var_10], ebx
.text:0040AE67                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040AE6B                 mov     [esp+1Ch+var_4], ebp
.text:0040AE6F                 xor     ebp, ebp
.text:0040AE71                 test    ebx, ebx
.text:0040AE73                 mov     [esp+1Ch+var_C], esi
.text:0040AE77                 mov     esi, [esp+1Ch+arg_4]
.text:0040AE7B                 mov     [esp+1Ch+var_8], edi
.text:0040AE7F                 jz      short loc_40AE89
.text:0040AE81                 test    esi, 0FFFFFFE8h
.text:0040AE87                 jz      short loc_40AEB0
.text:0040AE89
.text:0040AE89 loc_40AE89:                             ; CODE XREF: sub_40AE60+1F↑j
.text:0040AE89                 call    _errno
.text:0040AE8E                 mov     dword ptr [eax], 16h
.text:0040AE94
.text:0040AE94 loc_40AE94:                             ; CODE XREF: sub_40AE60+B1↓j
.text:0040AE94                 mov     eax, 0FFFFFFFFh
.text:0040AE99
.text:0040AE99 loc_40AE99:                             ; CODE XREF: sub_40AE60+86↓j
.text:0040AE99                                         ; sub_40AE60+A4↓j
.text:0040AE99                 mov     ebx, [esp+1Ch+var_10]
.text:0040AE9D                 mov     esi, [esp+1Ch+var_C]
.text:0040AEA1                 mov     edi, [esp+1Ch+var_8]
.text:0040AEA5                 mov     ebp, [esp+1Ch+var_4]
.text:0040AEA9                 add     esp, 1Ch
.text:0040AEAC                 retn
.text:0040AEAC ; ---------------------------------------------------------------------------
.text:0040AEAD                 align 10h
.text:0040AEB0
.text:0040AEB0 loc_40AEB0:                             ; CODE XREF: sub_40AE60+27↑j
.text:0040AEB0                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0040AEB7                 call    SetErrorMode
.text:0040AEBC                 sub     esp, 4
.text:0040AEBF                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0040AEC2                 call    GetFileAttributesA
.text:0040AEC7                 sub     esp, 4
.text:0040AECA                 mov     edi, eax
.text:0040AECC                 cmp     eax, 0FFFFFFFFh
.text:0040AECF                 jz      short loc_40AF13
.text:0040AED1
.text:0040AED1 loc_40AED1:                             ; CODE XREF: sub_40AE60+C6↓j
.text:0040AED1                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0040AED8                 call    SetErrorMode
.text:0040AEDD                 sub     esp, 4
.text:0040AEE0                 mov     eax, 0FFFFFFFFh
.text:0040AEE5                 inc     ebp
.text:0040AEE6                 jz      short loc_40AE99
.text:0040AEE8                 test    esi, 10h
.text:0040AEEE                 jz      short loc_40AEF8
.text:0040AEF0                 test    edi, 10h
.text:0040AEF6                 jz      short loc_40AF06
.text:0040AEF8
.text:0040AEF8 loc_40AEF8:                             ; CODE XREF: sub_40AE60+8E↑j
.text:0040AEF8                 and     esi, 2
.text:0040AEFB                 jz      short loc_40AF02
.text:0040AEFD                 and     edi, 1
.text:0040AF00                 jnz     short loc_40AF06
.text:0040AF02
.text:0040AF02 loc_40AF02:                             ; CODE XREF: sub_40AE60+9B↑j
.text:0040AF02                 xor     eax, eax
.text:0040AF04                 jmp     short loc_40AE99
.text:0040AF06 ; ---------------------------------------------------------------------------
.text:0040AF06
.text:0040AF06 loc_40AF06:                             ; CODE XREF: sub_40AE60+96↑j
.text:0040AF06                                         ; sub_40AE60+A0↑j
.text:0040AF06                 call    _errno
.text:0040AF0B                 mov     dword ptr [eax], 0Dh
.text:0040AF11                 jmp     short loc_40AE94
.text:0040AF13 ; ---------------------------------------------------------------------------
.text:0040AF13
.text:0040AF13 loc_40AF13:                             ; CODE XREF: sub_40AE60+6F↑j
.text:0040AF13                 call    sub_4076C0
.text:0040AF18                 mov     ebp, eax
.text:0040AF1A                 call    _errno
.text:0040AF1F                 mov     [eax], ebp
.text:0040AF21                 mov     ebp, 0FFFFFFFFh
.text:0040AF26                 jmp     short loc_40AED1
.text:0040AF26 sub_40AE60      endp
.text:0040AF26
.text:0040AF26 ; ---------------------------------------------------------------------------
.text:0040AF28                 align 10h
.text:0040AF30 ; const char String[4]
.text:0040AF30 String          db ' :/',0              ; DATA XREF: sub_40AF40+FA↓o
.text:0040AF34                 align 10h
.text:0040AF40
.text:0040AF40 ; =============== S U B R O U T I N E =======================================
.text:0040AF40
.text:0040AF40
.text:0040AF40 ; int __cdecl sub_40AF40(LPCSTR)
.text:0040AF40 sub_40AF40      proc near               ; CODE XREF: sub_408E90+E↑p
.text:0040AF40                                         ; sub_409390+17↑p ...
.text:0040AF40
.text:0040AF40 Str             = dword ptr -1Ch
.text:0040AF40 Val             = dword ptr -18h
.text:0040AF40 Count           = dword ptr -14h
.text:0040AF40 var_10          = dword ptr -10h
.text:0040AF40 var_C           = dword ptr -0Ch
.text:0040AF40 var_8           = dword ptr -8
.text:0040AF40 var_4           = dword ptr -4
.text:0040AF40 arg_0           = dword ptr  4
.text:0040AF40
.text:0040AF40                 sub     esp, 1Ch
.text:0040AF43                 mov     edx, [esp+1Ch+arg_0]
.text:0040AF47                 mov     [esp+1Ch+var_8], edi
.text:0040AF4B                 mov     [esp+1Ch+var_10], ebx
.text:0040AF4F                 mov     [esp+1Ch+var_C], esi
.text:0040AF53                 mov     [esp+1Ch+var_4], ebp
.text:0040AF57                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040AF5A                 call    sub_40AD10
.text:0040AF5F                 test    eax, eax
.text:0040AF61                 mov     edi, eax
.text:0040AF63                 jz      short loc_40AFA0
.text:0040AF65                 mov     [esp+1Ch+Str], eax ; Str
.text:0040AF68                 call    strlen
.text:0040AF6D                 cmp     eax, 2
.text:0040AF70                 jbe     short loc_40AF7C
.text:0040AF72                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040AF76                 jz      loc_40B030
.text:0040AF7C
.text:0040AF7C loc_40AF7C:                             ; CODE XREF: sub_40AF40+30↑j
.text:0040AF7C                                         ; sub_40AF40+F4↓j
.text:0040AF7C                 test    edi, edi
.text:0040AF7E                 jz      short loc_40AFA0
.text:0040AF80                 mov     [esp+1Ch+Str], edi ; Str
.text:0040AF83                 call    strlen
.text:0040AF88                 cmp     eax, 4
.text:0040AF8B                 mov     ebp, eax
.text:0040AF8D                 jle     short loc_40AFA0
.text:0040AF8F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040AF92                 jz      short loc_40AFC0
.text:0040AF94                 lea     esi, [esi+0]
.text:0040AF9A                 lea     edi, [edi+0]
.text:0040AFA0
.text:0040AFA0 loc_40AFA0:                             ; CODE XREF: sub_40AF40+23↑j
.text:0040AFA0                                         ; sub_40AF40+3E↑j ...
.text:0040AFA0                 xor     esi, esi
.text:0040AFA2
.text:0040AFA2 loc_40AFA2:                             ; CODE XREF: sub_40AF40+CD↓j
.text:0040AFA2                                         ; sub_40AF40+115↓j
.text:0040AFA2                 mov     [esp+1Ch+Str], edi ; Block
.text:0040AFA5                 call    free
.text:0040AFAA                 mov     eax, esi
.text:0040AFAC                 mov     ebx, [esp+1Ch+var_10]
.text:0040AFB0                 mov     esi, [esp+1Ch+var_C]
.text:0040AFB4                 mov     edi, [esp+1Ch+var_8]
.text:0040AFB8                 mov     ebp, [esp+1Ch+var_4]
.text:0040AFBC                 add     esp, 1Ch
.text:0040AFBF                 retn
.text:0040AFC0 ; ---------------------------------------------------------------------------
.text:0040AFC0
.text:0040AFC0 loc_40AFC0:                             ; CODE XREF: sub_40AF40+52↑j
.text:0040AFC0                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:0040AFC4                 jnz     short loc_40AFA0
.text:0040AFC6                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040AFCE                 lea     ecx, [edi+2]
.text:0040AFD1                 mov     [esp+1Ch+Str], ecx ; Str
.text:0040AFD4                 call    strchr
.text:0040AFD9                 test    eax, eax
.text:0040AFDB                 jnz     short loc_40B00F
.text:0040AFDD
.text:0040AFDD loc_40AFDD:                             ; CODE XREF: sub_40AF40+E2↓j
.text:0040AFDD                 inc     ebp
.text:0040AFDE
.text:0040AFDE loc_40AFDE:                             ; CODE XREF: sub_40AF40+E9↓j
.text:0040AFDE                 mov     [esp+1Ch+Val], 1 ; Size
.text:0040AFE6                 lea     ebx, [ebp+1]
.text:0040AFE9                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040AFEC                 call    calloc
.text:0040AFF1                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040AFF4                 mov     esi, eax
.text:0040AFF6                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040AFFA                 mov     [esp+1Ch+Val], edi ; Source
.text:0040AFFE                 call    strncpy
.text:0040B003                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:0040B008                 mov     byte ptr [ebp+esi+0], 0
.text:0040B00D                 jmp     short loc_40AFA2
.text:0040B00F ; ---------------------------------------------------------------------------
.text:0040B00F
.text:0040B00F loc_40B00F:                             ; CODE XREF: sub_40AF40+9B↑j
.text:0040B00F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040B017                 inc     eax
.text:0040B018                 mov     [esp+1Ch+Str], eax ; Str
.text:0040B01B                 call    strchr
.text:0040B020                 test    eax, eax
.text:0040B022                 jz      short loc_40AFDD
.text:0040B024                 sub     eax, edi
.text:0040B026                 lea     ebp, [eax+1]
.text:0040B029                 jmp     short loc_40AFDE
.text:0040B029 ; ---------------------------------------------------------------------------
.text:0040B02B                 align 10h
.text:0040B030
.text:0040B030 loc_40B030:                             ; CODE XREF: sub_40AF40+36↑j
.text:0040B030                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:0040B034                 jnz     loc_40AF7C
.text:0040B03A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:0040B041                 call    _strdup
.text:0040B046                 movsx   edx, byte ptr [edi]
.text:0040B049                 mov     esi, eax
.text:0040B04B                 mov     [esp+1Ch+Str], edx ; C
.text:0040B04E                 call    toupper
.text:0040B053                 mov     [esi], al
.text:0040B055                 jmp     loc_40AFA2
.text:0040B055 sub_40AF40      endp
.text:0040B055
.text:0040B055 ; ---------------------------------------------------------------------------
.text:0040B05A                 align 10h
.text:0040B060
.text:0040B060 ; =============== S U B R O U T I N E =======================================
.text:0040B060
.text:0040B060
.text:0040B060 sub_40B060      proc near               ; CODE XREF: .text:0040B1B4↓p
.text:0040B060                                         ; .text:0040B298↓p
.text:0040B060
.text:0040B060 Str             = dword ptr -2Ch
.text:0040B060 Val             = dword ptr -28h
.text:0040B060 var_18          = dword ptr -18h
.text:0040B060 var_11          = byte ptr -11h
.text:0040B060 arg_0           = dword ptr  4
.text:0040B060
.text:0040B060                 push    ebp
.text:0040B061                 push    edi
.text:0040B062                 push    esi
.text:0040B063                 push    ebx
.text:0040B064                 sub     esp, 1Ch
.text:0040B067                 mov     edx, [esp+2Ch+arg_0]
.text:0040B06B                 cmp     edx, ds:dword_411290
.text:0040B071                 mov     [esp+2Ch+var_11], 0
.text:0040B076                 jz      loc_40B174
.text:0040B07C                 mov     ebx, ds:dword_411280
.text:0040B082                 test    ebx, ebx
.text:0040B084                 jz      short loc_40B0F2
.text:0040B086
.text:0040B086 loc_40B086:                             ; CODE XREF: sub_40B060+10F↓j
.text:0040B086                 mov     ebx, [esp+2Ch+arg_0]
.text:0040B08A                 xor     edi, edi
.text:0040B08C                 xor     esi, esi
.text:0040B08E                 mov     ebp, offset dword_4112A8
.text:0040B093                 lea     esi, [esi+0]
.text:0040B099                 lea     edi, [edi+0]
.text:0040B0A0
.text:0040B0A0 loc_40B0A0:                             ; CODE XREF: sub_40B060+60↓j
.text:0040B0A0                 mov     edx, [ebp+4]
.text:0040B0A3                 mov     ecx, edi
.text:0040B0A5                 mov     eax, [ebp+0]
.text:0040B0A8                 shl     ecx, 4
.text:0040B0AB                 mov     [esp+2Ch+var_18], ecx
.text:0040B0AF                 mov     ecx, edx
.text:0040B0B1                 xor     eax, ebx
.text:0040B0B3                 xor     ecx, esi
.text:0040B0B5                 or      ecx, eax
.text:0040B0B7                 jz      short loc_40B0E1
.text:0040B0B9                 inc     edi
.text:0040B0BA                 add     ebp, 10h
.text:0040B0BD                 cmp     edi, 20h ; ' '
.text:0040B0C0                 jle     short loc_40B0A0
.text:0040B0C2
.text:0040B0C2 loc_40B0C2:                             ; CODE XREF: sub_40B060+90↓j
.text:0040B0C2                 movzx   ebx, [esp+2Ch+var_11]
.text:0040B0C7                 mov     eax, [esp+2Ch+arg_0]
.text:0040B0CB                 mov     byte_410070, bl
.text:0040B0D1                 mov     ds:dword_411290, eax
.text:0040B0D6                 movsx   eax, bl
.text:0040B0D9
.text:0040B0D9 loc_40B0D9:                             ; CODE XREF: sub_40B060+11B↓j
.text:0040B0D9                 add     esp, 1Ch
.text:0040B0DC                 pop     ebx
.text:0040B0DD                 pop     esi
.text:0040B0DE                 pop     edi
.text:0040B0DF                 pop     ebp
.text:0040B0E0                 retn
.text:0040B0E1 ; ---------------------------------------------------------------------------
.text:0040B0E1
.text:0040B0E1 loc_40B0E1:                             ; CODE XREF: sub_40B060+57↑j
.text:0040B0E1                 mov     edx, [esp+2Ch+var_18]
.text:0040B0E5                 movzx   eax, byte ptr ds:dword_4112A0[edx]
.text:0040B0EC                 mov     [esp+2Ch+var_11], al
.text:0040B0F0                 jmp     short loc_40B0C2
.text:0040B0F2 ; ---------------------------------------------------------------------------
.text:0040B0F2
.text:0040B0F2 loc_40B0F2:                             ; CODE XREF: sub_40B060+24↑j
.text:0040B0F2                 mov     [esp+2Ch+Str], 0
.text:0040B0F9                 call    sub_40C730
.text:0040B0FE                 test    eax, eax
.text:0040B100                 mov     ebx, eax
.text:0040B102                 jz      short loc_40B15C
.text:0040B104                 movzx   ecx, byte ptr [eax]
.text:0040B107                 mov     esi, 0FFFFFFF0h
.text:0040B10C                 test    cl, cl
.text:0040B10E                 jz      short loc_40B15C
.text:0040B110
.text:0040B110 loc_40B110:                             ; CODE XREF: sub_40B060+FA↓j
.text:0040B110                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:0040B113                 movsx   ebp, cl
.text:0040B116                 add     esi, 10h
.text:0040B119                 mov     ds:dword_4112A0[esi], ebp
.text:0040B11F                 mov     edi, ebp
.text:0040B121                 sar     edi, 1Fh
.text:0040B124                 mov     ds:dword_4112A4[esi], edi
.text:0040B12A                 call    sub_409390
.text:0040B12F                 mov     ds:dword_4112A8[esi], eax
.text:0040B135                 xor     ecx, ecx
.text:0040B137                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040B13A                 mov     ds:dword_4112AC[esi], ecx
.text:0040B140                 mov     [esp+2Ch+Val], 0 ; Val
.text:0040B148                 call    strchr
.text:0040B14D                 mov     ebx, eax
.text:0040B14F                 inc     ebx
.text:0040B150                 jz      short loc_40B15C
.text:0040B152                 movzx   edx, byte ptr [eax+1]
.text:0040B156                 test    dl, dl
.text:0040B158                 mov     cl, dl
.text:0040B15A                 jnz     short loc_40B110
.text:0040B15C
.text:0040B15C loc_40B15C:                             ; CODE XREF: sub_40B060+A2↑j
.text:0040B15C                                         ; sub_40B060+AE↑j ...
.text:0040B15C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040B15F                 mov     esi, 1
.text:0040B164                 mov     ds:dword_411280, esi
.text:0040B16A                 call    free
.text:0040B16F                 jmp     loc_40B086
.text:0040B174 ; ---------------------------------------------------------------------------
.text:0040B174
.text:0040B174 loc_40B174:                             ; CODE XREF: sub_40B060+16↑j
.text:0040B174                 movsx   eax, byte_410070
.text:0040B17B                 jmp     loc_40B0D9
.text:0040B17B sub_40B060      endp
.text:0040B17B
.text:0040B17B ; ---------------------------------------------------------------------------
.text:0040B180 dword_40B180    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:0040B180                                         ; DATA XREF: .text:0040B1A3↓o
.text:0040B180                                         ; .text:0040B283↓o
.text:0040B190 ; ---------------------------------------------------------------------------
.text:0040B190                 sub     esp, 1Ch
.text:0040B193                 mov     [esp+14h], esi
.text:0040B197                 mov     esi, [esp+20h]
.text:0040B19B                 mov     [esp+18h], edi
.text:0040B19F                 mov     [esp+10h], ebx
.text:0040B1A3                 mov     dword ptr [esp], offset dword_40B180
.text:0040B1AA                 call    _strdup
.text:0040B1AF                 mov     [esp], esi
.text:0040B1B2                 mov     edi, eax
.text:0040B1B4                 call    sub_40B060
.text:0040B1B9                 mov     [edi], al
.text:0040B1BB                 test    al, al
.text:0040B1BD                 jz      short loc_40B1D1
.text:0040B1BF                 mov     eax, edi
.text:0040B1C1                 mov     ebx, [esp+10h]
.text:0040B1C5                 mov     esi, [esp+14h]
.text:0040B1C9                 mov     edi, [esp+18h]
.text:0040B1CD                 add     esp, 1Ch
.text:0040B1D0                 retn
.text:0040B1D1 ; ---------------------------------------------------------------------------
.text:0040B1D1
.text:0040B1D1 loc_40B1D1:                             ; CODE XREF: .text:0040B1BD↑j
.text:0040B1D1                 mov     [esp], edi
.text:0040B1D4                 call    free
.text:0040B1D9                 mov     dword ptr [esp+4], 0
.text:0040B1E1                 mov     dword ptr [esp], 0
.text:0040B1E8                 call    GetCurrentDirectoryA
.text:0040B1ED                 sub     esp, 8
.text:0040B1F0                 lea     esi, [eax+1]
.text:0040B1F3                 mov     [esp], esi
.text:0040B1F6                 call    malloc
.text:0040B1FB                 mov     [esp+4], eax
.text:0040B1FF                 mov     edi, eax
.text:0040B201                 mov     [esp], esi
.text:0040B204                 call    GetCurrentDirectoryA
.text:0040B209                 sub     esp, 8
.text:0040B20C                 test    eax, eax
.text:0040B20E                 jnz     short loc_40B230
.text:0040B210                 mov     dword ptr [esp+20h], 40B184h
.text:0040B218                 mov     ebx, [esp+10h]
.text:0040B21C                 mov     esi, [esp+14h]
.text:0040B220                 mov     edi, [esp+18h]
.text:0040B224                 add     esp, 1Ch
.text:0040B227                 jmp     _strdup
.text:0040B227 ; ---------------------------------------------------------------------------
.text:0040B22C                 align 10h
.text:0040B230
.text:0040B230 loc_40B230:                             ; CODE XREF: .text:0040B20E↑j
.text:0040B230                 mov     [esp+20h], edi
.text:0040B234                 mov     ebx, [esp+10h]
.text:0040B238                 mov     esi, [esp+14h]
.text:0040B23C                 mov     edi, [esp+18h]
.text:0040B240                 add     esp, 1Ch
.text:0040B243                 jmp     sub_40AF40
.text:0040B243 ; ---------------------------------------------------------------------------
.text:0040B248                 align 10h
.text:0040B250                 sub     esp, 7Ch
.text:0040B253                 lea     edx, [esp+10h]
.text:0040B257                 mov     [esp+8], edx
.text:0040B25B                 mov     edx, [esp+80h]
.text:0040B262                 mov     [esp+70h], ebx
.text:0040B266                 mov     [esp+74h], esi
.text:0040B26A                 mov     [esp+4], edx
.text:0040B26E                 mov     [esp+78h], edi
.text:0040B272                 mov     dword ptr [esp], 0
.text:0040B279                 call    sub_40C940
.text:0040B27E                 xor     edx, edx
.text:0040B280                 inc     eax
.text:0040B281                 jz      short loc_40B2A5
.text:0040B283                 mov     dword ptr [esp], offset dword_40B180
.text:0040B28A                 mov     esi, [esp+20h]
.text:0040B28E                 call    _strdup
.text:0040B293                 mov     edi, eax
.text:0040B295                 mov     [esp], esi
.text:0040B298                 call    sub_40B060
.text:0040B29D                 mov     [edi], al
.text:0040B29F                 test    al, al
.text:0040B2A1                 mov     edx, edi
.text:0040B2A3                 jz      short loc_40B2B7
.text:0040B2A5
.text:0040B2A5 loc_40B2A5:                             ; CODE XREF: .text:0040B281↑j
.text:0040B2A5                                         ; .text:0040B304↓j
.text:0040B2A5                 mov     ebx, [esp+70h]
.text:0040B2A9                 mov     eax, edx
.text:0040B2AB                 mov     esi, [esp+74h]
.text:0040B2AF                 mov     edi, [esp+78h]
.text:0040B2B3                 add     esp, 7Ch
.text:0040B2B6                 retn
.text:0040B2B7 ; ---------------------------------------------------------------------------
.text:0040B2B7
.text:0040B2B7 loc_40B2B7:                             ; CODE XREF: .text:0040B2A3↑j
.text:0040B2B7                 mov     [esp], edi
.text:0040B2BA                 call    free
.text:0040B2BF                 mov     dword ptr [esp+4], 0
.text:0040B2C7                 mov     dword ptr [esp], 0
.text:0040B2CE                 call    GetCurrentDirectoryA
.text:0040B2D3                 sub     esp, 8
.text:0040B2D6                 lea     esi, [eax+1]
.text:0040B2D9                 mov     [esp], esi
.text:0040B2DC                 call    malloc
.text:0040B2E1                 mov     [esp+4], eax
.text:0040B2E5                 mov     edi, eax
.text:0040B2E7                 mov     [esp], esi
.text:0040B2EA                 call    GetCurrentDirectoryA
.text:0040B2EF                 sub     esp, 8
.text:0040B2F2                 test    eax, eax
.text:0040B2F4                 jnz     short loc_40B306
.text:0040B2F6                 mov     dword ptr [esp], 40B184h
.text:0040B2FD                 call    _strdup
.text:0040B302
.text:0040B302 loc_40B302:                             ; CODE XREF: .text:0040B30E↓j
.text:0040B302                 mov     edx, eax
.text:0040B304                 jmp     short loc_40B2A5
.text:0040B306 ; ---------------------------------------------------------------------------
.text:0040B306
.text:0040B306 loc_40B306:                             ; CODE XREF: .text:0040B2F4↑j
.text:0040B306                 mov     [esp], edi
.text:0040B309                 call    sub_40AF40
.text:0040B30E                 jmp     short loc_40B302
.text:0040B310
.text:0040B310 ; =============== S U B R O U T I N E =======================================
.text:0040B310
.text:0040B310
.text:0040B310 ; int __cdecl sub_40B310(LPCSTR)
.text:0040B310 sub_40B310      proc near               ; CODE XREF: sub_408840+12F↑p
.text:0040B310
.text:0040B310 String1         = dword ptr -1Ch
.text:0040B310 String2         = dword ptr -18h
.text:0040B310 var_C           = dword ptr -0Ch
.text:0040B310 var_8           = dword ptr -8
.text:0040B310 var_4           = dword ptr -4
.text:0040B310 arg_0           = dword ptr  4
.text:0040B310
.text:0040B310                 sub     esp, 1Ch
.text:0040B313                 mov     [esp+1Ch+var_4], edi
.text:0040B317                 mov     edi, [esp+1Ch+arg_0]
.text:0040B31B                 mov     [esp+1Ch+var_C], ebx
.text:0040B31F                 mov     [esp+1Ch+var_8], esi
.text:0040B323                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040B326                 call    sub_40AD10
.text:0040B32B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040B32E                 mov     esi, eax
.text:0040B330                 call    sub_40AF40
.text:0040B335                 mov     [esp+1Ch+String2], eax ; String2
.text:0040B339                 mov     ebx, eax
.text:0040B33B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040B33E                 call    _stricmp
.text:0040B343                 test    eax, eax
.text:0040B345                 setz    dl
.text:0040B348                 test    esi, esi
.text:0040B34A                 movzx   edi, dl
.text:0040B34D                 jz      short loc_40B357
.text:0040B34F                 mov     [esp+1Ch+String1], esi ; Block
.text:0040B352                 call    free
.text:0040B357
.text:0040B357 loc_40B357:                             ; CODE XREF: sub_40B310+3D↑j
.text:0040B357                 test    ebx, ebx
.text:0040B359                 jz      short loc_40B363
.text:0040B35B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040B35E                 call    free
.text:0040B363
.text:0040B363 loc_40B363:                             ; CODE XREF: sub_40B310+49↑j
.text:0040B363                 mov     eax, edi
.text:0040B365                 mov     ebx, [esp+1Ch+var_C]
.text:0040B369                 mov     esi, [esp+1Ch+var_8]
.text:0040B36D                 mov     edi, [esp+1Ch+var_4]
.text:0040B371                 add     esp, 1Ch
.text:0040B374                 retn
.text:0040B374 sub_40B310      endp
.text:0040B374
.text:0040B374 ; ---------------------------------------------------------------------------
.text:0040B375                 align 10h
.text:0040B380 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:0040B3D1↓o
.text:0040B389 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:0040B389                                         ; DATA XREF: .text:0040B3E2↓o
.text:0040B39D ; const CHAR FileName[]
.text:0040B39D FileName        db '\\.\vwin32',0       ; DATA XREF: .text:0040B52C↓o
.text:0040B39D                                         ; sub_40B960+17C↓o
.text:0040B3A8 ; ---------------------------------------------------------------------------
.text:0040B3A8
.text:0040B3A8 loc_40B3A8:                             ; DATA XREF: .text:0040B642↓o
.text:0040B3A8                 dec     esi
.text:0040B3A9                 push    esp
.text:0040B3AA                 inc     esi
.text:0040B3AB                 push    ebx
.text:0040B3AC                 add     [esi+41h], al
.text:0040B3AF                 push    esp
.text:0040B3B0                 xor     esi, [edx]
.text:0040B3B2                 add     [esi+41h], al
.text:0040B3B5                 push    esp
.text:0040B3B6                 add     [ebx+44h], al
.text:0040B3B9                 inc     esi
.text:0040B3BA                 push    ebx
.text:0040B3BB
.text:0040B3BB loc_40B3BB:                             ; CODE XREF: sub_40B960+101↓p
.text:0040B3BB                 add     [ebp+55002674h], cl
.text:0040B3C1                 push    edi
.text:0040B3C2                 push    esi
.text:0040B3C3                 push    ebx
.text:0040B3C4                 sub     esp, 8BCh
.text:0040B3CA                 mov     ebp, [esp+8D0h]
.text:0040B3D1                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:0040B3D8                 call    LoadLibraryA
.text:0040B3DD                 sub     esp, 4
.text:0040B3E0                 mov     edi, eax
.text:0040B3E2                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040B3EA                 mov     [esp], eax
.text:0040B3ED                 call    GetProcAddress
.text:0040B3F2                 sub     esp, 8
.text:0040B3F5                 mov     esi, eax
.text:0040B3F7                 test    ebp, ebp
.text:0040B3F9                 mov     dword ptr [esp+20h], 0
.text:0040B401                 jz      loc_40B941
.text:0040B407                 mov     [esp], ebp
.text:0040B40A                 call    sub_408270
.text:0040B40F                 mov     [esp], eax
.text:0040B412                 mov     ebp, eax
.text:0040B414                 call    strlen
.text:0040B419                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040B41E                 mov     ebx, eax
.text:0040B420                 jz      short loc_40B43C
.text:0040B422                 mov     [esp], ebp
.text:0040B425                 lea     edx, [eax+1]
.text:0040B428                 mov     [esp+4], edx
.text:0040B42C                 call    realloc
.text:0040B431                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040B435                 mov     ebp, eax
.text:0040B437                 mov     byte ptr [ebx+eax+1], 0
.text:0040B43C
.text:0040B43C loc_40B43C:                             ; CODE XREF: .text:0040B420↑j
.text:0040B43C                 mov     dword ptr [esp+1Ch], 400h
.text:0040B444                 lea     edx, [esp+0B0h]
.text:0040B44B                 lea     ebx, [esp+5Ch]
.text:0040B44F                 mov     [esp+18h], edx
.text:0040B453                 lea     ecx, [esp+58h]
.text:0040B457                 lea     edx, [esp+54h]
.text:0040B45B                 mov     [esp+14h], ebx
.text:0040B45F                 lea     eax, [esp+4B0h]
.text:0040B466                 mov     [esp+10h], ecx
.text:0040B46A                 mov     [esp+0Ch], edx
.text:0040B46E                 mov     dword ptr [esp+8], 400h
.text:0040B476                 mov     [esp+4], eax
.text:0040B47A                 mov     [esp], ebp
.text:0040B47D                 call    GetVolumeInformationA
.text:0040B482                 sub     esp, 20h
.text:0040B485                 test    eax, eax
.text:0040B487                 jz      loc_40B91E
.text:0040B48D                 test    esi, esi
.text:0040B48F                 jz      short loc_40B4B5
.text:0040B491                 mov     [esp], ebp
.text:0040B494                 lea     edx, [esp+48h]
.text:0040B498                 lea     ebx, [esp+40h]
.text:0040B49C                 mov     [esp+0Ch], edx
.text:0040B4A0                 lea     ecx, [esp+38h]
.text:0040B4A4                 mov     [esp+8], ebx
.text:0040B4A8                 mov     [esp+4], ecx
.text:0040B4AC                 call    esi
.text:0040B4AE                 sub     esp, 10h
.text:0040B4B1                 mov     [esp+20h], eax
.text:0040B4B5
.text:0040B4B5 loc_40B4B5:                             ; CODE XREF: .text:0040B48F↑j
.text:0040B4B5                 test    edi, edi
.text:0040B4B7                 jz      short loc_40B4C4
.text:0040B4B9                 mov     [esp], edi
.text:0040B4BC                 call    FreeLibrary
.text:0040B4C1                 sub     esp, 4
.text:0040B4C4
.text:0040B4C4 loc_40B4C4:                             ; CODE XREF: .text:0040B4B7↑j
.text:0040B4C4                 call    sub_40AA30
.text:0040B4C9                 test    eax, eax
.text:0040B4CB                 lea     esi, [esp+28h]
.text:0040B4CF                 jz      loc_40B900
.text:0040B4D5                 call    sub_40AA30
.text:0040B4DA                 test    eax, eax
.text:0040B4DC                 jz      short loc_40B4EC
.text:0040B4DE                 call    sub_40A980
.text:0040B4E3                 cmp     eax, 0Bh
.text:0040B4E6                 jle     loc_40B8D4
.text:0040B4EC
.text:0040B4EC loc_40B4EC:                             ; CODE XREF: .text:0040B4DC↑j
.text:0040B4EC                 cld
.text:0040B4ED                 xor     eax, eax
.text:0040B4EF                 lea     ebx, [esp+60h]
.text:0040B4F3                 mov     ecx, 7
.text:0040B4F8                 mov     edi, ebx
.text:0040B4FA                 rep stosd
.text:0040B4FC                 mov     dword ptr [esp+18h], 0
.text:0040B504                 mov     dword ptr [esp+14h], 4000000h
.text:0040B50C                 mov     dword ptr [esp+10h], 0
.text:0040B514                 mov     dword ptr [esp+0Ch], 0
.text:0040B51C                 mov     dword ptr [esp+8], 0
.text:0040B524                 mov     dword ptr [esp+4], 0
.text:0040B52C                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:0040B533                 call    CreateFileA
.text:0040B538                 sub     esp, 1Ch
.text:0040B53B                 mov     edi, eax
.text:0040B53D                 cmp     eax, 0FFFFFFFFh
.text:0040B540                 jz      short loc_40B5C0
.text:0040B542                 mov     [esp+10h], ebx
.text:0040B546                 lea     edx, [esp+80h]
.text:0040B54D                 lea     ecx, [esp+24h]
.text:0040B551                 mov     [esp+70h], edx
.text:0040B555                 mov     [esp+18h], ecx
.text:0040B559                 mov     [esp+8], ebx
.text:0040B55D                 mov     dword ptr [esp+6Ch], 7303h
.text:0040B565                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0040B56D                 mov     [esp+64h], ebp
.text:0040B571                 mov     dword ptr [esp+78h], 1
.text:0040B579                 mov     dword ptr [esp+1Ch], 0
.text:0040B581                 mov     dword ptr [esp+14h], 1Ch
.text:0040B589                 mov     dword ptr [esp+0Ch], 1Ch
.text:0040B591                 mov     dword ptr [esp+4], 6
.text:0040B599                 mov     [esp], eax
.text:0040B59C                 call    DeviceIoControl
.text:0040B5A1                 sub     esp, 20h
.text:0040B5A4                 mov     ebx, eax
.text:0040B5A6                 mov     [esp], edi
.text:0040B5A9                 call    CloseHandle
.text:0040B5AE                 sub     esp, 4
.text:0040B5B1                 test    ebx, ebx
.text:0040B5B3                 jz      short loc_40B5C0
.text:0040B5B5                 test    byte ptr [esp+78h], 1
.text:0040B5BA                 jz      loc_40B8A0
.text:0040B5C0
.text:0040B5C0 loc_40B5C0:                             ; CODE XREF: .text:0040B540↑j
.text:0040B5C0                                         ; .text:0040B5B3↑j
.text:0040B5C0                 call    sub_4076C0
.text:0040B5C5                 mov     edi, eax
.text:0040B5C7                 call    _errno
.text:0040B5CC                 mov     [eax], edi
.text:0040B5CE                 xor     eax, eax
.text:0040B5D0
.text:0040B5D0 loc_40B5D0:                             ; CODE XREF: .text:0040B8CF↓j
.text:0040B5D0                                         ; .text:0040B8FB↓j
.text:0040B5D0                 test    eax, eax
.text:0040B5D2                 jnz     short loc_40B5F4
.text:0040B5D4                 mov     dword ptr [esp+34h], 1
.text:0040B5DC                 mov     dword ptr [esp+30h], 200h
.text:0040B5E4                 mov     dword ptr [esp+2Ch], 0
.text:0040B5EC                 mov     dword ptr [esp+28h], 0
.text:0040B5F4
.text:0040B5F4 loc_40B5F4:                             ; CODE XREF: .text:0040B5D2↑j
.text:0040B5F4                 mov     edx, [esp+30h]
.text:0040B5F8                 mov     edi, [esp+34h]
.text:0040B5FC                 mov     ecx, [esp+20h]
.text:0040B600                 imul    edi, edx
.text:0040B603                 test    ecx, ecx
.text:0040B605                 jnz     short loc_40B62D
.text:0040B607                 mov     eax, [esp+28h]
.text:0040B60B                 mul     edi
.text:0040B60D                 mov     esi, eax
.text:0040B60F                 mov     eax, [esp+2Ch]
.text:0040B613                 mov     [esp+44h], edx
.text:0040B617                 mov     [esp+40h], esi
.text:0040B61B                 mul     edi
.text:0040B61D                 mov     [esp+48h], eax
.text:0040B621                 mov     [esp+4Ch], edx
.text:0040B625                 mov     [esp+38h], eax
.text:0040B629                 mov     [esp+3Ch], edx
.text:0040B62D
.text:0040B62D loc_40B62D:                             ; CODE XREF: .text:0040B605↑j
.text:0040B62D                 mov     ebx, [esp+5Ch]
.text:0040B631                 lea     edx, [esp+0B0h]
.text:0040B638                 mov     ecx, [esp+8D4h]
.text:0040B63F                 mov     [ecx+48h], ebx
.text:0040B642                 mov     dword ptr [esp+4], offset loc_40B3A8
.text:0040B64A                 mov     [esp], edx
.text:0040B64D                 call    _stricmp
.text:0040B652                 test    eax, eax
.text:0040B654                 jnz     loc_40B810
.text:0040B65A                 mov     esi, [esp+8D4h]
.text:0040B661                 mov     dword ptr [esi], 5346544Eh
.text:0040B667
.text:0040B667 loc_40B667:                             ; CODE XREF: .text:0040B838↓j
.text:0040B667                                         ; .text:0040B865↓j ...
.text:0040B667                 mov     ebx, [esp+30h]
.text:0040B66B                 mov     esi, [esp+8D4h]
.text:0040B672                 mov     [esi+4], ebx
.text:0040B675                 mov     [esi+8], ebx
.text:0040B678                 mov     ebx, [esi+8]
.text:0040B67B                 mov     [esi+0Ch], edi
.text:0040B67E                 mov     ecx, [esp+44h]
.text:0040B682                 xor     esi, esi
.text:0040B684                 mov     [esp+8], ebx
.text:0040B688                 mov     edx, [esp+40h]
.text:0040B68C                 mov     [esp+0Ch], esi
.text:0040B690                 mov     [esp+4], ecx
.text:0040B694                 mov     [esp], edx
.text:0040B697                 call    sub_40EBA0
.text:0040B69C                 mov     ecx, [esp+8D4h]
.text:0040B6A3                 mov     [ecx+10h], eax
.text:0040B6A6                 mov     [ecx+14h], edx
.text:0040B6A9                 mov     ecx, [esp+4Ch]
.text:0040B6AD                 mov     [esp+8], ebx
.text:0040B6B1                 mov     edx, [esp+48h]
.text:0040B6B5                 mov     [esp+0Ch], esi
.text:0040B6B9                 mov     [esp+4], ecx
.text:0040B6BD                 mov     [esp], edx
.text:0040B6C0                 call    sub_40EBA0
.text:0040B6C5                 mov     ecx, [esp+8D4h]
.text:0040B6CC                 mov     [ecx+18h], eax
.text:0040B6CF                 mov     [ecx+1Ch], edx
.text:0040B6D2                 mov     ecx, [esp+38h]
.text:0040B6D6                 mov     [esp+8], ebx
.text:0040B6DA                 mov     ebx, [esp+3Ch]
.text:0040B6DE                 mov     [esp+0Ch], esi
.text:0040B6E2                 mov     [esp], ecx
.text:0040B6E5                 mov     [esp+4], ebx
.text:0040B6E9                 call    sub_40EBA0
.text:0040B6EE                 mov     esi, [esp+8D4h]
.text:0040B6F5                 mov     [esi+20h], eax
.text:0040B6F8                 mov     [esi+24h], edx
.text:0040B6FB                 mov     ecx, [esp+44h]
.text:0040B6FF                 mov     esi, edi
.text:0040B701                 mov     [esp+8], esi
.text:0040B705                 mov     edx, [esp+40h]
.text:0040B709                 xor     edi, edi
.text:0040B70B                 mov     [esp+0Ch], edi
.text:0040B70F                 mov     [esp+4], ecx
.text:0040B713                 mov     [esp], edx
.text:0040B716                 call    sub_40EBA0
.text:0040B71B                 mov     ebx, [esp+8D4h]
.text:0040B722                 mov     [ebx+28h], eax
.text:0040B725                 mov     [ebx+2Ch], edx
.text:0040B728                 mov     ecx, [esp+4Ch]
.text:0040B72C                 mov     [esp+8], esi
.text:0040B730                 mov     edx, [esp+48h]
.text:0040B734                 mov     [esp+0Ch], edi
.text:0040B738                 mov     [esp+4], ecx
.text:0040B73C                 mov     [esp], edx
.text:0040B73F                 call    sub_40EBA0
.text:0040B744                 mov     ebx, [esp+8D4h]
.text:0040B74B                 mov     [ebx+30h], eax
.text:0040B74E                 mov     [ebx+34h], edx
.text:0040B751                 mov     ecx, [esp+3Ch]
.text:0040B755                 mov     [esp+8], esi
.text:0040B759                 mov     edx, [esp+38h]
.text:0040B75D                 mov     [esp+0Ch], edi
.text:0040B761                 mov     [esp+4], ecx
.text:0040B765                 mov     [esp], edx
.text:0040B768                 call    sub_40EBA0
.text:0040B76D                 mov     edx, [esp+8D4h]
.text:0040B774                 lea     ecx, [esp+0B0h]
.text:0040B77B                 mov     [edx+38h], eax
.text:0040B77E                 mov     esi, [esp+58h]
.text:0040B782                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:0040B789                 mov     [edx+110h], esi
.text:0040B78F                 mov     esi, edx
.text:0040B791                 add     esi, 4Ch ; 'L'
.text:0040B794                 movzx   ebx, word ptr [esp+56h]
.text:0040B799                 movzx   edi, word ptr [esp+54h]
.text:0040B79E                 mov     [edx+3Ch], ebx
.text:0040B7A1                 lea     ebx, [esp+4B0h]
.text:0040B7A8                 mov     [edx+40h], edi
.text:0040B7AB                 mov     [esp+4], ecx
.text:0040B7AF                 mov     dword ptr [esp+8], 10h
.text:0040B7B7                 mov     [esp], esi
.text:0040B7BA                 call    strncpy
.text:0040B7BF                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040B7C7                 mov     edi, [esp+8D4h]
.text:0040B7CE                 mov     [esp+4], ebx
.text:0040B7D2                 add     edi, 5Ch ; '\'
.text:0040B7D5                 mov     [esp], edi
.text:0040B7D8                 call    strncpy
.text:0040B7DD                 mov     [esp+4], ebp
.text:0040B7E1                 mov     ebp, [esp+8D4h]
.text:0040B7E8                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040B7F0                 add     ebp, 0B6h ; '¶'
.text:0040B7F6                 mov     [esp], ebp
.text:0040B7F9                 call    strncpy
.text:0040B7FE                 xor     eax, eax
.text:0040B800
.text:0040B800 loc_40B800:                             ; CODE XREF: .text:0040B93C↓j
.text:0040B800                 add     esp, 8BCh
.text:0040B806                 pop     ebx
.text:0040B807                 pop     esi
.text:0040B808                 pop     edi
.text:0040B809                 pop     ebp
.text:0040B80A                 retn
.text:0040B80A ; ---------------------------------------------------------------------------
.text:0040B80B                 align 10h
.text:0040B810
.text:0040B810 loc_40B810:                             ; CODE XREF: .text:0040B654↑j
.text:0040B810                 mov     dword ptr [esp+4], 40B3ADh
.text:0040B818                 lea     eax, [esp+0B0h]
.text:0040B81F                 mov     [esp], eax
.text:0040B822                 call    _stricmp
.text:0040B827                 test    eax, eax
.text:0040B829                 jnz     short loc_40B83D
.text:0040B82B                 mov     edx, [esp+8D4h]
.text:0040B832                 mov     dword ptr [edx], 4008h
.text:0040B838                 jmp     loc_40B667
.text:0040B83D ; ---------------------------------------------------------------------------
.text:0040B83D
.text:0040B83D loc_40B83D:                             ; CODE XREF: .text:0040B829↑j
.text:0040B83D                 mov     dword ptr [esp+4], 40B3B3h
.text:0040B845                 lea     ecx, [esp+0B0h]
.text:0040B84C                 mov     [esp], ecx
.text:0040B84F                 call    _stricmp
.text:0040B854                 test    eax, eax
.text:0040B856                 jnz     short loc_40B86A
.text:0040B858                 mov     ebx, [esp+8D4h]
.text:0040B85F                 mov     dword ptr [ebx], 4006h
.text:0040B865                 jmp     loc_40B667
.text:0040B86A ; ---------------------------------------------------------------------------
.text:0040B86A
.text:0040B86A loc_40B86A:                             ; CODE XREF: .text:0040B856↑j
.text:0040B86A                 mov     dword ptr [esp+4], 40B3B7h
.text:0040B872                 lea     eax, [esp+0B0h]
.text:0040B879                 mov     [esp], eax
.text:0040B87C                 call    _stricmp
.text:0040B881                 test    eax, eax
.text:0040B883                 mov     esi, [esp+8D4h]
.text:0040B88A                 setnz   cl
.text:0040B88D                 movzx   edx, cl
.text:0040B890                 dec     edx
.text:0040B891                 and     edx, 4000h
.text:0040B897                 mov     [esi], edx
.text:0040B899                 jmp     loc_40B667
.text:0040B899 ; ---------------------------------------------------------------------------
.text:0040B89E                 align 10h
.text:0040B8A0
.text:0040B8A0 loc_40B8A0:                             ; CODE XREF: .text:0040B5BA↑j
.text:0040B8A0                 mov     edi, [esp+84h]
.text:0040B8A7                 mov     eax, 1
.text:0040B8AC                 mov     edx, [esp+88h]
.text:0040B8B3                 mov     ecx, [esp+8Ch]
.text:0040B8BA                 mov     ebx, [esp+90h]
.text:0040B8C1                 mov     [esp+34h], edi
.text:0040B8C5                 mov     [esp+30h], edx
.text:0040B8C9                 mov     [esp+2Ch], ecx
.text:0040B8CD                 mov     [esi], ebx
.text:0040B8CF                 jmp     loc_40B5D0
.text:0040B8D4 ; ---------------------------------------------------------------------------
.text:0040B8D4
.text:0040B8D4 loc_40B8D4:                             ; CODE XREF: .text:0040B4E6↑j
.text:0040B8D4                 mov     [esp+10h], esi
.text:0040B8D8                 lea     eax, [esp+2Ch]
.text:0040B8DC                 lea     esi, [esp+30h]
.text:0040B8E0                 mov     [esp+0Ch], eax
.text:0040B8E4                 lea     edi, [esp+34h]
.text:0040B8E8                 mov     [esp+8], esi
.text:0040B8EC                 mov     [esp+4], edi
.text:0040B8F0
.text:0040B8F0 loc_40B8F0:                             ; CODE XREF: .text:0040B91C↓j
.text:0040B8F0                 mov     [esp], ebp
.text:0040B8F3                 call    GetDiskFreeSpaceA
.text:0040B8F8                 sub     esp, 14h
.text:0040B8FB                 jmp     loc_40B5D0
.text:0040B900 ; ---------------------------------------------------------------------------
.text:0040B900
.text:0040B900 loc_40B900:                             ; CODE XREF: .text:0040B4CF↑j
.text:0040B900                 mov     [esp+10h], esi
.text:0040B904                 lea     ebx, [esp+2Ch]
.text:0040B908                 lea     eax, [esp+30h]
.text:0040B90C                 mov     [esp+0Ch], ebx
.text:0040B910                 lea     esi, [esp+34h]
.text:0040B914                 mov     [esp+8], eax
.text:0040B918                 mov     [esp+4], esi
.text:0040B91C                 jmp     short loc_40B8F0
.text:0040B91E ; ---------------------------------------------------------------------------
.text:0040B91E
.text:0040B91E loc_40B91E:                             ; CODE XREF: .text:0040B487↑j
.text:0040B91E                 mov     [esp], edi
.text:0040B921                 call    FreeLibrary
.text:0040B926                 sub     esp, 4
.text:0040B929                 call    sub_4076C0
.text:0040B92E                 mov     esi, eax
.text:0040B930                 call    _errno
.text:0040B935                 mov     [eax], esi
.text:0040B937
.text:0040B937 loc_40B937:                             ; CODE XREF: .text:0040B957↓j
.text:0040B937                 mov     eax, 0FFFFFFFFh
.text:0040B93C                 jmp     loc_40B800
.text:0040B941 ; ---------------------------------------------------------------------------
.text:0040B941
.text:0040B941 loc_40B941:                             ; CODE XREF: .text:0040B401↑j
.text:0040B941                 mov     [esp], edi
.text:0040B944                 call    FreeLibrary
.text:0040B949                 sub     esp, 4
.text:0040B94C                 call    _errno
.text:0040B951                 mov     dword ptr [eax], 2
.text:0040B957                 jmp     short loc_40B937
.text:0040B957 ; ---------------------------------------------------------------------------
.text:0040B959                 align 10h
.text:0040B960
.text:0040B960 ; =============== S U B R O U T I N E =======================================
.text:0040B960
.text:0040B960
.text:0040B960 ; int __cdecl sub_40B960(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:0040B960 sub_40B960      proc near               ; CODE XREF: sub_408E90+2C7↑p
.text:0040B960                                         ; .text:004094CA↑p
.text:0040B960
.text:0040B960 lpFileName      = dword ptr -9Ch
.text:0040B960 dwDesiredAccess = dword ptr -98h
.text:0040B960 dwShareMode     = dword ptr -94h
.text:0040B960 lpSecurityAttributes= dword ptr -90h
.text:0040B960 dwCreationDisposition= dword ptr -8Ch
.text:0040B960 dwFlagsAndAttributes= dword ptr -88h
.text:0040B960 hTemplateFile   = dword ptr -84h
.text:0040B960 lpOverlapped    = dword ptr -80h
.text:0040B960 BytesReturned   = dword ptr -70h
.text:0040B960 InBuffer        = byte ptr -6Ch
.text:0040B960 var_68          = dword ptr -68h
.text:0040B960 var_64          = dword ptr -64h
.text:0040B960 var_60          = dword ptr -60h
.text:0040B960 var_5C          = dword ptr -5Ch
.text:0040B960 var_54          = dword ptr -54h
.text:0040B960 var_4C          = byte ptr -4Ch
.text:0040B960 var_48          = dword ptr -48h
.text:0040B960 var_44          = dword ptr -44h
.text:0040B960 var_40          = dword ptr -40h
.text:0040B960 var_3C          = dword ptr -3Ch
.text:0040B960 lpRootPathName  = dword ptr -2Ch
.text:0040B960 lpSectorsPerCluster= dword ptr -28h
.text:0040B960 lpBytesPerSector= dword ptr -24h
.text:0040B960 lpNumberOfFreeClusters= dword ptr -20h
.text:0040B960 lpTotalNumberOfClusters= dword ptr -1Ch
.text:0040B960 var_18          = dword ptr -18h
.text:0040B960 var_14          = dword ptr -14h
.text:0040B960 var_10          = dword ptr -10h
.text:0040B960 var_C           = dword ptr -0Ch
.text:0040B960 var_8           = dword ptr -8
.text:0040B960 var_4           = dword ptr -4
.text:0040B960 arg_0           = dword ptr  4
.text:0040B960 arg_4           = dword ptr  8
.text:0040B960 arg_8           = dword ptr  0Ch
.text:0040B960 arg_C           = dword ptr  10h
.text:0040B960 arg_10          = dword ptr  14h
.text:0040B960
.text:0040B960                 sub     esp, 2Ch
.text:0040B963                 mov     edx, [esp+2Ch+arg_0]
.text:0040B967                 mov     [esp+2Ch+var_10], ebx
.text:0040B96B                 mov     ebx, [esp+2Ch+arg_10]
.text:0040B96F                 mov     [esp+2Ch+var_C], esi
.text:0040B973                 mov     esi, [esp+2Ch+arg_C]
.text:0040B977                 mov     [esp+2Ch+var_8], edi
.text:0040B97B                 mov     edi, [esp+2Ch+arg_8]
.text:0040B97F                 mov     [esp+2Ch+var_4], ebp
.text:0040B983                 mov     ebp, [esp+2Ch+arg_4]
.text:0040B987                 mov     [esp+2Ch+var_14], edx
.text:0040B98B                 call    sub_40AA30
.text:0040B990                 test    eax, eax
.text:0040B992                 jz      short loc_40B9C4
.text:0040B994                 mov     [esp+2Ch+arg_10], ebx
.text:0040B998                 mov     edx, [esp+2Ch+var_14]
.text:0040B99C                 mov     ebx, [esp+2Ch+var_10]
.text:0040B9A0                 mov     [esp+2Ch+arg_C], esi
.text:0040B9A4                 mov     esi, [esp+2Ch+var_C]
.text:0040B9A8                 mov     [esp+2Ch+arg_8], edi
.text:0040B9AC                 mov     edi, [esp+2Ch+var_8]
.text:0040B9B0                 mov     [esp+2Ch+arg_4], ebp
.text:0040B9B4                 mov     ebp, [esp+2Ch+var_4]
.text:0040B9B8                 mov     [esp+2Ch+arg_0], edx
.text:0040B9BC                 add     esp, 2Ch
.text:0040B9BF                 jmp     loc_40BA70
.text:0040B9C4 ; ---------------------------------------------------------------------------
.text:0040B9C4
.text:0040B9C4 loc_40B9C4:                             ; CODE XREF: sub_40B960+32↑j
.text:0040B9C4                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:0040B9C8                 mov     ecx, [esp+2Ch+var_14]
.text:0040B9CC                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:0040B9D0                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:0040B9D4                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:0040B9D8                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040B9DB                 call    GetDiskFreeSpaceA
.text:0040B9E0                 sub     esp, 14h
.text:0040B9E3                 mov     ebx, [esp+2Ch+var_10]
.text:0040B9E7                 mov     esi, [esp+2Ch+var_C]
.text:0040B9EB                 mov     edi, [esp+2Ch+var_8]
.text:0040B9EF                 mov     ebp, [esp+2Ch+var_4]
.text:0040B9F3                 add     esp, 2Ch
.text:0040B9F6                 retn
.text:0040B9F6 ; ---------------------------------------------------------------------------
.text:0040B9F7                 align 10h
.text:0040BA00
.text:0040BA00 loc_40BA00:                             ; CODE XREF: .text:0040BC6D↓p
.text:0040BA00                 sub     esp, 1Ch
.text:0040BA03                 mov     [esp+1Ch+var_4], esi
.text:0040BA07                 mov     esi, [esp+1Ch+arg_0]
.text:0040BA0B                 mov     [esp+1Ch+var_8], ebx
.text:0040BA0F                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:0040BA12                 call    sub_40AF40
.text:0040BA17                 test    eax, eax
.text:0040BA19                 mov     ebx, eax
.text:0040BA1B                 jz      short loc_40BA30
.text:0040BA1D                 cmp     byte ptr [eax], 0
.text:0040BA20                 jz      short loc_40BA30
.text:0040BA22                 test    esi, esi
.text:0040BA24                 jz      short loc_40BA30
.text:0040BA26                 cmp     byte ptr [esi], 0
.text:0040BA29                 jnz     short loc_40BA56
.text:0040BA2B                 nop
.text:0040BA2C                 lea     esi, [esi+0]
.text:0040BA30
.text:0040BA30 loc_40BA30:                             ; CODE XREF: sub_40B960+BB↑j
.text:0040BA30                                         ; sub_40B960+C0↑j ...
.text:0040BA30                 call    _errno
.text:0040BA35                 mov     dword ptr [eax], 2
.text:0040BA3B                 mov     esi, 0FFFFFFFFh
.text:0040BA40
.text:0040BA40 loc_40BA40:                             ; CODE XREF: sub_40B960+108↓j
.text:0040BA40                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:0040BA43                 call    free
.text:0040BA48                 mov     eax, esi
.text:0040BA4A                 mov     ebx, [esp+1Ch+var_8]
.text:0040BA4E                 mov     esi, [esp+1Ch+var_4]
.text:0040BA52                 add     esp, 1Ch
.text:0040BA55                 retn
.text:0040BA56 ; ---------------------------------------------------------------------------
.text:0040BA56
.text:0040BA56 loc_40BA56:                             ; CODE XREF: sub_40B960+C9↑j
.text:0040BA56                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:0040BA59                 mov     edx, [esp+1Ch+arg_4]
.text:0040BA5D                 mov     [esp+1Ch+var_18], edx
.text:0040BA61                 call    near ptr loc_40B3BB+5
.text:0040BA66                 mov     esi, eax
.text:0040BA68                 jmp     short loc_40BA40
.text:0040BA68 ; ---------------------------------------------------------------------------
.text:0040BA6A                 align 10h
.text:0040BA70
.text:0040BA70 loc_40BA70:                             ; CODE XREF: sub_40B960+5F↑j
.text:0040BA70                 push    ebp
.text:0040BA71                 push    edi
.text:0040BA72                 push    esi
.text:0040BA73                 push    ebx
.text:0040BA74                 sub     esp, 8Ch
.text:0040BA7A                 mov     ebp, [esp+9Ch+arg_0]
.text:0040BA81                 call    sub_40AA30
.text:0040BA86                 test    eax, eax
.text:0040BA88                 jz      short loc_40BA98
.text:0040BA8A                 call    sub_40A980
.text:0040BA8F                 cmp     eax, 0Bh
.text:0040BA92                 jle     loc_40BBC0
.text:0040BA98
.text:0040BA98 loc_40BA98:                             ; CODE XREF: sub_40B960+128↑j
.text:0040BA98                 cld
.text:0040BA99                 xor     eax, eax
.text:0040BA9B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040BA9F                 mov     ecx, 7
.text:0040BAA4                 mov     edi, ebx
.text:0040BAA6                 lea     esi, [esp+9Ch+var_4C]
.text:0040BAAA                 rep stosd
.text:0040BAAC                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040BAB4                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040BABC                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:0040BAC4                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040BACC                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:0040BAD4                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040BADC                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:0040BAE3                 call    CreateFileA
.text:0040BAE8                 sub     esp, 1Ch
.text:0040BAEB                 mov     edi, eax
.text:0040BAED                 cmp     eax, 0FFFFFFFFh
.text:0040BAF0                 jz      short loc_40BB65
.text:0040BAF2                 mov     [esp+9Ch+var_68], ebp
.text:0040BAF6                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040BAFA                 mov     [esp+9Ch+var_5C], esi
.text:0040BAFE                 mov     [esp+9Ch+var_60], 7303h
.text:0040BB06                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040BB0E                 mov     [esp+9Ch+var_54], 1
.text:0040BB16                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0040BB1E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:0040BB22                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0040BB2A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0040BB2E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:0040BB36                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0040BB3A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:0040BB42                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:0040BB45                 call    DeviceIoControl
.text:0040BB4A                 sub     esp, 20h
.text:0040BB4D                 mov     esi, eax
.text:0040BB4F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:0040BB52                 call    CloseHandle
.text:0040BB57                 sub     esp, 4
.text:0040BB5A                 test    esi, esi
.text:0040BB5C                 jz      short loc_40BB65
.text:0040BB5E                 test    byte ptr [esp+9Ch+var_54], 1
.text:0040BB63                 jz      short loc_40BB80
.text:0040BB65
.text:0040BB65 loc_40BB65:                             ; CODE XREF: sub_40B960+190↑j
.text:0040BB65                                         ; sub_40B960+1FC↑j
.text:0040BB65                 call    sub_4076C0
.text:0040BB6A                 mov     edi, eax
.text:0040BB6C                 call    _errno
.text:0040BB71                 mov     [eax], edi
.text:0040BB73                 xor     eax, eax
.text:0040BB75
.text:0040BB75 loc_40BB75:                             ; CODE XREF: sub_40B960+25A↓j
.text:0040BB75                                         ; sub_40B960+297↓j
.text:0040BB75                 add     esp, 8Ch
.text:0040BB7B                 pop     ebx
.text:0040BB7C                 pop     esi
.text:0040BB7D                 pop     edi
.text:0040BB7E                 pop     ebp
.text:0040BB7F                 retn
.text:0040BB80 ; ---------------------------------------------------------------------------
.text:0040BB80
.text:0040BB80 loc_40BB80:                             ; CODE XREF: sub_40B960+203↑j
.text:0040BB80                 mov     edx, [esp+9Ch+var_48]
.text:0040BB84                 mov     eax, 1
.text:0040BB89                 mov     ebx, [esp+9Ch+arg_4]
.text:0040BB90                 mov     ebp, [esp+9Ch+arg_8]
.text:0040BB97                 mov     ecx, [esp+9Ch+arg_C]
.text:0040BB9E                 mov     [ebx], edx
.text:0040BBA0                 mov     edi, [esp+9Ch+var_44]
.text:0040BBA4                 mov     ebx, [esp+9Ch+arg_10]
.text:0040BBAB                 mov     [ebp+0], edi
.text:0040BBAE                 mov     esi, [esp+9Ch+var_40]
.text:0040BBB2                 mov     [ecx], esi
.text:0040BBB4                 mov     edx, [esp+9Ch+var_3C]
.text:0040BBB8                 mov     [ebx], edx
.text:0040BBBA                 jmp     short loc_40BB75
.text:0040BBBA ; ---------------------------------------------------------------------------
.text:0040BBBC                 align 10h
.text:0040BBC0
.text:0040BBC0 loc_40BBC0:                             ; CODE XREF: sub_40B960+132↑j
.text:0040BBC0                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:0040BBC3                 mov     eax, [esp+9Ch+arg_C]
.text:0040BBCA                 mov     ecx, [esp+9Ch+arg_10]
.text:0040BBD1                 mov     edx, [esp+9Ch+arg_8]
.text:0040BBD8                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040BBDC                 mov     eax, [esp+9Ch+arg_4]
.text:0040BBE3                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:0040BBE7                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040BBEB                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040BBEF                 call    GetDiskFreeSpaceA
.text:0040BBF4                 sub     esp, 14h
.text:0040BBF7                 jmp     loc_40BB75
.text:0040BBF7 sub_40B960      endp ; sp-analysis failed
.text:0040BBF7
.text:0040BBF7 ; ---------------------------------------------------------------------------
.text:0040BBFC                 align 10h
.text:0040BC00 aNotset         db 'notset',0           ; DATA XREF: .data:off_410080↓o
.text:0040BC00                                         ; .data:off_410084↓o
.text:0040BC07 ; ---------------------------------------------------------------------------
.text:0040BC07
.text:0040BC07 loc_40BC07:                             ; DATA XREF: .text:loc_40BCA5↓o
.text:0040BC07                 jb      short loc_40BC80
.text:0040BC09                 add     [eax], ah
.text:0040BC0B                 or      [eax], eax
.text:0040BC0D
.text:0040BC0D loc_40BC0D:                             ; DATA XREF: .text:0040BCF8↓o
.text:0040BC0D                                         ; .text:0040BD5E↓o ...
.text:0040BC0D                 add     [eax], ah
.text:0040BC0F                 and     eax, 64252064h
.text:0040BC14                 and     [eax], al
.text:0040BC16                 lea     esi, [esi+0]
.text:0040BC19                 lea     edi, [edi+0]
.text:0040BC20                 push    ebp
.text:0040BC21                 push    edi
.text:0040BC22                 push    esi
.text:0040BC23                 push    ebx
.text:0040BC24                 sub     esp, 14Ch
.text:0040BC2A                 mov     edx, off_410080 ; "notset"
.text:0040BC30                 mov     edi, [esp+164h]
.text:0040BC37                 mov     ebp, [esp+168h]
.text:0040BC3E                 mov     [esp+4], edx
.text:0040BC42                 mov     edx, off_410084 ; "notset"
.text:0040BC48                 mov     [esp], edx
.text:0040BC4B                 call    strcmp
.text:0040BC50                 test    eax, eax
.text:0040BC52                 jz      loc_40C040
.text:0040BC58
.text:0040BC58 loc_40BC58:                             ; CODE XREF: .text:0040C08C↓j
.text:0040BC58                 lea     ebx, [esp+20h]
.text:0040BC5C                 lea     esi, [esi+0]
.text:0040BC60
.text:0040BC60 loc_40BC60:                             ; CODE XREF: .text:0040BC96↓j
.text:0040BC60                 mov     [esp+4], ebx
.text:0040BC64                 mov     ecx, off_410084 ; "notset"
.text:0040BC6A                 mov     [esp], ecx
.text:0040BC6D                 call    loc_40BA00
.text:0040BC72                 test    eax, eax
.text:0040BC74                 jns     short loc_40BCA5
.text:0040BC76                 mov     eax, off_410084 ; "notset"
.text:0040BC7B                 cmp     byte ptr [eax], 0
.text:0040BC7E                 jz      short loc_40BC98
.text:0040BC80
.text:0040BC80 loc_40BC80:                             ; CODE XREF: .text:loc_40BC07↑j
.text:0040BC80                 mov     dword ptr [esp+4], 0
.text:0040BC88                 mov     [esp], eax
.text:0040BC8B                 call    strchr
.text:0040BC90                 inc     eax
.text:0040BC91                 mov     off_410084, eax ; "notset"
.text:0040BC96                 jmp     short loc_40BC60
.text:0040BC98 ; ---------------------------------------------------------------------------
.text:0040BC98
.text:0040BC98 loc_40BC98:                             ; CODE XREF: .text:0040BC7E↑j
.text:0040BC98                 xor     eax, eax
.text:0040BC9A
.text:0040BC9A loc_40BC9A:                             ; CODE XREF: .text:0040BE5C↓j
.text:0040BC9A                 add     esp, 14Ch
.text:0040BCA0                 pop     ebx
.text:0040BCA1                 pop     esi
.text:0040BCA2                 pop     edi
.text:0040BCA3                 pop     ebp
.text:0040BCA4                 retn
.text:0040BCA5 ; ---------------------------------------------------------------------------
.text:0040BCA5
.text:0040BCA5 loc_40BCA5:                             ; CODE XREF: .text:0040BC74↑j
.text:0040BCA5                 mov     dword ptr [edi+0Ch], offset loc_40BC07
.text:0040BCAC                 lea     ecx, [esp+0D6h]
.text:0040BCB3                 lea     edx, [esp+6Ch]
.text:0040BCB7                 mov     [edi+4], ecx
.text:0040BCBA                 lea     ebx, [esp+7Ch]
.text:0040BCBE                 mov     [edi+8], edx
.text:0040BCC1                 mov     [edi], ebx
.text:0040BCC3                 mov     [esp], ebp
.text:0040BCC6                 mov     [esp+4], edi
.text:0040BCCA                 call    ___addmntentstr
.text:0040BCCF                 mov     [esp], ebp
.text:0040BCD2                 mov     dword ptr [esp+4], 40BC0Ah
.text:0040BCDA                 call    strspn
.text:0040BCDF                 mov     dword ptr [esp+4], 0
.text:0040BCE7                 mov     ebx, off_410084 ; "notset"
.text:0040BCED                 lea     esi, [eax+ebp]
.text:0040BCF0                 mov     [esp+1Ch], esi
.text:0040BCF4                 lea     ebp, [esp+1Ch]
.text:0040BCF8                 mov     esi, offset loc_40BC0D
.text:0040BCFD                 mov     [esp], ebx
.text:0040BD00                 call    strchr
.text:0040BD05                 mov     dword ptr [esp+4], 40BC0Ah
.text:0040BD0D                 inc     eax
.text:0040BD0E                 mov     off_410084, eax ; "notset"
.text:0040BD13                 mov     [esp], ebp
.text:0040BD16                 call    sub_40CA60
.text:0040BD1B                 test    eax, eax
.text:0040BD1D                 mov     ebx, eax
.text:0040BD1F                 jz      short loc_40BD48
.text:0040BD21                 mov     edx, eax
.text:0040BD23                 mov     ecx, eax
.text:0040BD25                 lea     esi, [esi+0]
.text:0040BD29                 lea     edi, [edi+0]
.text:0040BD30
.text:0040BD30 loc_40BD30:                             ; CODE XREF: .text:0040BD46↓j
.text:0040BD30                 movzx   eax, byte ptr [edx]
.text:0040BD33                 cmp     al, 5Ch ; '\'
.text:0040BD35                 jz      loc_40BFE4
.text:0040BD3B
.text:0040BD3B loc_40BD3B:                             ; CODE XREF: .text:0040BFEC↓j
.text:0040BD3B                                         ; .text:0040BFFA↓j ...
.text:0040BD3B                 mov     [ecx], al
.text:0040BD3D
.text:0040BD3D loc_40BD3D:                             ; CODE XREF: .text:0040C00E↓j
.text:0040BD3D                 inc     ecx
.text:0040BD3E
.text:0040BD3E loc_40BD3E:                             ; CODE XREF: .text:0040C026↓j
.text:0040BD3E                 movzx   eax, byte ptr [edx]
.text:0040BD41                 mov     esi, ebx
.text:0040BD43                 inc     edx
.text:0040BD44                 test    al, al
.text:0040BD46                 jnz     short loc_40BD30
.text:0040BD48
.text:0040BD48 loc_40BD48:                             ; CODE XREF: .text:0040BD1F↑j
.text:0040BD48                 mov     [edi], esi
.text:0040BD4A                 mov     eax, [esp+1Ch]
.text:0040BD4E                 test    eax, eax
.text:0040BD50                 jnz     loc_40BFCB
.text:0040BD56
.text:0040BD56 loc_40BD56:                             ; CODE XREF: .text:0040BFDF↓j
.text:0040BD56                 mov     dword ptr [esp+4], 40BC0Ah
.text:0040BD5E                 mov     esi, offset loc_40BC0D
.text:0040BD63                 mov     [esp], ebp
.text:0040BD66                 call    sub_40CA60
.text:0040BD6B                 test    eax, eax
.text:0040BD6D                 mov     ebx, eax
.text:0040BD6F                 jz      short loc_40BD98
.text:0040BD71                 mov     edx, eax
.text:0040BD73                 mov     ecx, eax
.text:0040BD75                 lea     esi, [esi+0]
.text:0040BD79                 lea     edi, [edi+0]
.text:0040BD80
.text:0040BD80 loc_40BD80:                             ; CODE XREF: .text:0040BD96↓j
.text:0040BD80                 movzx   eax, byte ptr [edx]
.text:0040BD83                 cmp     al, 5Ch ; '\'
.text:0040BD85                 jz      loc_40BF73
.text:0040BD8B
.text:0040BD8B loc_40BD8B:                             ; CODE XREF: .text:0040BF7B↓j
.text:0040BD8B                                         ; .text:0040BF89↓j ...
.text:0040BD8B                 mov     [ecx], al
.text:0040BD8D
.text:0040BD8D loc_40BD8D:                             ; CODE XREF: .text:0040BF9D↓j
.text:0040BD8D                 inc     ecx
.text:0040BD8E
.text:0040BD8E loc_40BD8E:                             ; CODE XREF: .text:0040BFB5↓j
.text:0040BD8E                 movzx   eax, byte ptr [edx]
.text:0040BD91                 mov     esi, ebx
.text:0040BD93                 inc     edx
.text:0040BD94                 test    al, al
.text:0040BD96                 jnz     short loc_40BD80
.text:0040BD98
.text:0040BD98 loc_40BD98:                             ; CODE XREF: .text:0040BD6F↑j
.text:0040BD98                 mov     [edi+4], esi
.text:0040BD9B                 mov     eax, [esp+1Ch]
.text:0040BD9F                 test    eax, eax
.text:0040BDA1                 jnz     loc_40BF5A
.text:0040BDA7
.text:0040BDA7 loc_40BDA7:                             ; CODE XREF: .text:0040BF6E↓j
.text:0040BDA7                 mov     dword ptr [esp+4], 40BC0Ah
.text:0040BDAF                 mov     esi, offset loc_40BC0D
.text:0040BDB4                 mov     [esp], ebp
.text:0040BDB7                 call    sub_40CA60
.text:0040BDBC                 test    eax, eax
.text:0040BDBE                 mov     ebx, eax
.text:0040BDC0                 jz      short loc_40BDE8
.text:0040BDC2                 mov     edx, eax
.text:0040BDC4                 mov     ecx, eax
.text:0040BDC6                 lea     esi, [esi+0]
.text:0040BDC9                 lea     edi, [edi+0]
.text:0040BDD0
.text:0040BDD0 loc_40BDD0:                             ; CODE XREF: .text:0040BDE6↓j
.text:0040BDD0                 movzx   eax, byte ptr [edx]
.text:0040BDD3                 cmp     al, 5Ch ; '\'
.text:0040BDD5                 jz      loc_40BF02
.text:0040BDDB
.text:0040BDDB loc_40BDDB:                             ; CODE XREF: .text:0040BF0A↓j
.text:0040BDDB                                         ; .text:0040BF18↓j ...
.text:0040BDDB                 mov     [ecx], al
.text:0040BDDD
.text:0040BDDD loc_40BDDD:                             ; CODE XREF: .text:0040BF2C↓j
.text:0040BDDD                 inc     ecx
.text:0040BDDE
.text:0040BDDE loc_40BDDE:                             ; CODE XREF: .text:0040BF44↓j
.text:0040BDDE                 movzx   eax, byte ptr [edx]
.text:0040BDE1                 mov     esi, ebx
.text:0040BDE3                 inc     edx
.text:0040BDE4                 test    al, al
.text:0040BDE6                 jnz     short loc_40BDD0
.text:0040BDE8
.text:0040BDE8 loc_40BDE8:                             ; CODE XREF: .text:0040BDC0↑j
.text:0040BDE8                 mov     [edi+8], esi
.text:0040BDEB                 mov     eax, [esp+1Ch]
.text:0040BDEF                 test    eax, eax
.text:0040BDF1                 jnz     loc_40BEE9
.text:0040BDF7
.text:0040BDF7 loc_40BDF7:                             ; CODE XREF: .text:0040BEFD↓j
.text:0040BDF7                 mov     dword ptr [esp+4], 40BC0Ah
.text:0040BDFF                 mov     esi, offset loc_40BC0D
.text:0040BE04                 mov     [esp], ebp
.text:0040BE07                 call    sub_40CA60
.text:0040BE0C                 test    eax, eax
.text:0040BE0E                 mov     ebx, eax
.text:0040BE10                 jz      short loc_40BE34
.text:0040BE12                 mov     edx, eax
.text:0040BE14                 mov     ecx, eax
.text:0040BE16                 lea     esi, [esi+0]
.text:0040BE19                 lea     edi, [edi+0]
.text:0040BE20
.text:0040BE20 loc_40BE20:                             ; CODE XREF: .text:0040BE32↓j
.text:0040BE20                 movzx   eax, byte ptr [edx]
.text:0040BE23                 cmp     al, 5Ch ; '\'
.text:0040BE25                 jz      short loc_40BE95
.text:0040BE27
.text:0040BE27 loc_40BE27:                             ; CODE XREF: .text:0040BE9D↓j
.text:0040BE27                                         ; .text:0040BEA7↓j ...
.text:0040BE27                 mov     [ecx], al
.text:0040BE29
.text:0040BE29 loc_40BE29:                             ; CODE XREF: .text:0040BEBB↓j
.text:0040BE29                 inc     ecx
.text:0040BE2A
.text:0040BE2A loc_40BE2A:                             ; CODE XREF: .text:0040BED3↓j
.text:0040BE2A                 movzx   eax, byte ptr [edx]
.text:0040BE2D                 mov     esi, ebx
.text:0040BE2F                 inc     edx
.text:0040BE30                 test    al, al
.text:0040BE32                 jnz     short loc_40BE20
.text:0040BE34
.text:0040BE34 loc_40BE34:                             ; CODE XREF: .text:0040BE10↑j
.text:0040BE34                 mov     [edi+0Ch], esi
.text:0040BE37                 xor     eax, eax
.text:0040BE39                 mov     edx, [esp+1Ch]
.text:0040BE3D                 test    edx, edx
.text:0040BE3F                 jnz     short loc_40BE75
.text:0040BE41
.text:0040BE41 loc_40BE41:                             ; CODE XREF: .text:0040BE93↓j
.text:0040BE41                 cmp     eax, 1
.text:0040BE44                 jz      short loc_40BE6C
.text:0040BE46                 cmp     eax, 1
.text:0040BE49                 jle     short loc_40BE61
.text:0040BE4B
.text:0040BE4B loc_40BE4B:                             ; CODE XREF: .text:0040BE63↓j
.text:0040BE4B                                         ; .text:0040BE73↓j
.text:0040BE4B                 mov     edx, [esp+160h]
.text:0040BE52                 mov     [esp], edx
.text:0040BE55                 call    sub_40CA00
.text:0040BE5A                 mov     eax, edi
.text:0040BE5C                 jmp     loc_40BC9A
.text:0040BE61 ; ---------------------------------------------------------------------------
.text:0040BE61
.text:0040BE61 loc_40BE61:                             ; CODE XREF: .text:0040BE49↑j
.text:0040BE61                 test    eax, eax
.text:0040BE63                 jnz     short loc_40BE4B
.text:0040BE65                 mov     dword ptr [edi+10h], 0
.text:0040BE6C
.text:0040BE6C loc_40BE6C:                             ; CODE XREF: .text:0040BE44↑j
.text:0040BE6C                 mov     dword ptr [edi+14h], 0
.text:0040BE73                 jmp     short loc_40BE4B
.text:0040BE75 ; ---------------------------------------------------------------------------
.text:0040BE75
.text:0040BE75 loc_40BE75:                             ; CODE XREF: .text:0040BE3F↑j
.text:0040BE75                 mov     dword ptr [esp+4], 40BC0Eh
.text:0040BE7D                 lea     esi, [edi+14h]
.text:0040BE80                 lea     ebp, [edi+10h]
.text:0040BE83                 mov     [esp+0Ch], esi
.text:0040BE87                 mov     [esp+8], ebp
.text:0040BE8B                 mov     [esp], edx
.text:0040BE8E                 call    sscanf
.text:0040BE93                 jmp     short loc_40BE41
.text:0040BE95 ; ---------------------------------------------------------------------------
.text:0040BE95
.text:0040BE95 loc_40BE95:                             ; CODE XREF: .text:0040BE25↑j
.text:0040BE95                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040BE99                 jz      short loc_40BED8
.text:0040BE9B
.text:0040BE9B loc_40BE9B:                             ; CODE XREF: .text:0040BEDC↓j
.text:0040BE9B                                         ; .text:0040BEE2↓j
.text:0040BE9B                 cmp     al, 5Ch ; '\'
.text:0040BE9D                 jnz     short loc_40BE27
.text:0040BE9F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040BEA3                 jz      short loc_40BEC0
.text:0040BEA5
.text:0040BEA5 loc_40BEA5:                             ; CODE XREF: .text:0040BEC4↓j
.text:0040BEA5                                         ; .text:0040BECA↓j
.text:0040BEA5                 cmp     al, 5Ch ; '\'
.text:0040BEA7                 jnz     loc_40BE27
.text:0040BEAD                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040BEB1                 jnz     loc_40BE27
.text:0040BEB7                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040BEBA                 inc     edx
.text:0040BEBB                 jmp     loc_40BE29
.text:0040BEC0 ; ---------------------------------------------------------------------------
.text:0040BEC0
.text:0040BEC0 loc_40BEC0:                             ; CODE XREF: .text:0040BEA3↑j
.text:0040BEC0                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040BEC4                 jnz     short loc_40BEA5
.text:0040BEC6                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040BECA                 jnz     short loc_40BEA5
.text:0040BECC                 mov     byte ptr [ecx], 9
.text:0040BECF
.text:0040BECF loc_40BECF:                             ; CODE XREF: .text:0040BEE7↓j
.text:0040BECF                 inc     ecx
.text:0040BED0                 add     edx, 3
.text:0040BED3                 jmp     loc_40BE2A
.text:0040BED8 ; ---------------------------------------------------------------------------
.text:0040BED8
.text:0040BED8 loc_40BED8:                             ; CODE XREF: .text:0040BE99↑j
.text:0040BED8                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040BEDC                 jnz     short loc_40BE9B
.text:0040BEDE                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040BEE2                 jnz     short loc_40BE9B
.text:0040BEE4                 mov     byte ptr [ecx], 20h ; ' '
.text:0040BEE7                 jmp     short loc_40BECF
.text:0040BEE9 ; ---------------------------------------------------------------------------
.text:0040BEE9
.text:0040BEE9 loc_40BEE9:                             ; CODE XREF: .text:0040BDF1↑j
.text:0040BEE9                 mov     dword ptr [esp+4], 40BC0Ah
.text:0040BEF1                 mov     [esp], eax
.text:0040BEF4                 call    strspn
.text:0040BEF9                 add     [esp+1Ch], eax
.text:0040BEFD                 jmp     loc_40BDF7
.text:0040BF02 ; ---------------------------------------------------------------------------
.text:0040BF02
.text:0040BF02 loc_40BF02:                             ; CODE XREF: .text:0040BDD5↑j
.text:0040BF02                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040BF06                 jz      short loc_40BF49
.text:0040BF08
.text:0040BF08 loc_40BF08:                             ; CODE XREF: .text:0040BF4D↓j
.text:0040BF08                                         ; .text:0040BF53↓j
.text:0040BF08                 cmp     al, 5Ch ; '\'
.text:0040BF0A                 jnz     loc_40BDDB
.text:0040BF10                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040BF14                 jz      short loc_40BF31
.text:0040BF16
.text:0040BF16 loc_40BF16:                             ; CODE XREF: .text:0040BF35↓j
.text:0040BF16                                         ; .text:0040BF3B↓j
.text:0040BF16                 cmp     al, 5Ch ; '\'
.text:0040BF18                 jnz     loc_40BDDB
.text:0040BF1E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040BF22                 jnz     loc_40BDDB
.text:0040BF28                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040BF2B                 inc     edx
.text:0040BF2C                 jmp     loc_40BDDD
.text:0040BF31 ; ---------------------------------------------------------------------------
.text:0040BF31
.text:0040BF31 loc_40BF31:                             ; CODE XREF: .text:0040BF14↑j
.text:0040BF31                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040BF35                 jnz     short loc_40BF16
.text:0040BF37                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040BF3B                 jnz     short loc_40BF16
.text:0040BF3D                 mov     byte ptr [ecx], 9
.text:0040BF40
.text:0040BF40 loc_40BF40:                             ; CODE XREF: .text:0040BF58↓j
.text:0040BF40                 inc     ecx
.text:0040BF41                 add     edx, 3
.text:0040BF44                 jmp     loc_40BDDE
.text:0040BF49 ; ---------------------------------------------------------------------------
.text:0040BF49
.text:0040BF49 loc_40BF49:                             ; CODE XREF: .text:0040BF06↑j
.text:0040BF49                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040BF4D                 jnz     short loc_40BF08
.text:0040BF4F                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040BF53                 jnz     short loc_40BF08
.text:0040BF55                 mov     byte ptr [ecx], 20h ; ' '
.text:0040BF58                 jmp     short loc_40BF40
.text:0040BF5A ; ---------------------------------------------------------------------------
.text:0040BF5A
.text:0040BF5A loc_40BF5A:                             ; CODE XREF: .text:0040BDA1↑j
.text:0040BF5A                 mov     dword ptr [esp+4], 40BC0Ah
.text:0040BF62                 mov     [esp], eax
.text:0040BF65                 call    strspn
.text:0040BF6A                 add     [esp+1Ch], eax
.text:0040BF6E                 jmp     loc_40BDA7
.text:0040BF73 ; ---------------------------------------------------------------------------
.text:0040BF73
.text:0040BF73 loc_40BF73:                             ; CODE XREF: .text:0040BD85↑j
.text:0040BF73                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040BF77                 jz      short loc_40BFBA
.text:0040BF79
.text:0040BF79 loc_40BF79:                             ; CODE XREF: .text:0040BFBE↓j
.text:0040BF79                                         ; .text:0040BFC4↓j
.text:0040BF79                 cmp     al, 5Ch ; '\'
.text:0040BF7B                 jnz     loc_40BD8B
.text:0040BF81                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040BF85                 jz      short loc_40BFA2
.text:0040BF87
.text:0040BF87 loc_40BF87:                             ; CODE XREF: .text:0040BFA6↓j
.text:0040BF87                                         ; .text:0040BFAC↓j
.text:0040BF87                 cmp     al, 5Ch ; '\'
.text:0040BF89                 jnz     loc_40BD8B
.text:0040BF8F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040BF93                 jnz     loc_40BD8B
.text:0040BF99                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040BF9C                 inc     edx
.text:0040BF9D                 jmp     loc_40BD8D
.text:0040BFA2 ; ---------------------------------------------------------------------------
.text:0040BFA2
.text:0040BFA2 loc_40BFA2:                             ; CODE XREF: .text:0040BF85↑j
.text:0040BFA2                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040BFA6                 jnz     short loc_40BF87
.text:0040BFA8                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040BFAC                 jnz     short loc_40BF87
.text:0040BFAE                 mov     byte ptr [ecx], 9
.text:0040BFB1
.text:0040BFB1 loc_40BFB1:                             ; CODE XREF: .text:0040BFC9↓j
.text:0040BFB1                 inc     ecx
.text:0040BFB2                 add     edx, 3
.text:0040BFB5                 jmp     loc_40BD8E
.text:0040BFBA ; ---------------------------------------------------------------------------
.text:0040BFBA
.text:0040BFBA loc_40BFBA:                             ; CODE XREF: .text:0040BF77↑j
.text:0040BFBA                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040BFBE                 jnz     short loc_40BF79
.text:0040BFC0                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040BFC4                 jnz     short loc_40BF79
.text:0040BFC6                 mov     byte ptr [ecx], 20h ; ' '
.text:0040BFC9                 jmp     short loc_40BFB1
.text:0040BFCB ; ---------------------------------------------------------------------------
.text:0040BFCB
.text:0040BFCB loc_40BFCB:                             ; CODE XREF: .text:0040BD50↑j
.text:0040BFCB                 mov     dword ptr [esp+4], 40BC0Ah
.text:0040BFD3                 mov     [esp], eax
.text:0040BFD6                 call    strspn
.text:0040BFDB                 add     [esp+1Ch], eax
.text:0040BFDF                 jmp     loc_40BD56
.text:0040BFE4 ; ---------------------------------------------------------------------------
.text:0040BFE4
.text:0040BFE4 loc_40BFE4:                             ; CODE XREF: .text:0040BD35↑j
.text:0040BFE4                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040BFE8                 jz      short loc_40C02B
.text:0040BFEA
.text:0040BFEA loc_40BFEA:                             ; CODE XREF: .text:0040C02F↓j
.text:0040BFEA                                         ; .text:0040C035↓j
.text:0040BFEA                 cmp     al, 5Ch ; '\'
.text:0040BFEC                 jnz     loc_40BD3B
.text:0040BFF2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040BFF6                 jz      short loc_40C013
.text:0040BFF8
.text:0040BFF8 loc_40BFF8:                             ; CODE XREF: .text:0040C017↓j
.text:0040BFF8                                         ; .text:0040C01D↓j
.text:0040BFF8                 cmp     al, 5Ch ; '\'
.text:0040BFFA                 jnz     loc_40BD3B
.text:0040C000                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040C004                 jnz     loc_40BD3B
.text:0040C00A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040C00D                 inc     edx
.text:0040C00E                 jmp     loc_40BD3D
.text:0040C013 ; ---------------------------------------------------------------------------
.text:0040C013
.text:0040C013 loc_40C013:                             ; CODE XREF: .text:0040BFF6↑j
.text:0040C013                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040C017                 jnz     short loc_40BFF8
.text:0040C019                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040C01D                 jnz     short loc_40BFF8
.text:0040C01F                 mov     byte ptr [ecx], 9
.text:0040C022
.text:0040C022 loc_40C022:                             ; CODE XREF: .text:0040C03A↓j
.text:0040C022                 inc     ecx
.text:0040C023                 add     edx, 3
.text:0040C026                 jmp     loc_40BD3E
.text:0040C02B ; ---------------------------------------------------------------------------
.text:0040C02B
.text:0040C02B loc_40C02B:                             ; CODE XREF: .text:0040BFE8↑j
.text:0040C02B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040C02F                 jnz     short loc_40BFEA
.text:0040C031                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040C035                 jnz     short loc_40BFEA
.text:0040C037                 mov     byte ptr [ecx], 20h ; ' '
.text:0040C03A                 jmp     short loc_40C022
.text:0040C03A ; ---------------------------------------------------------------------------
.text:0040C03C                 align 10h
.text:0040C040
.text:0040C040 loc_40C040:                             ; CODE XREF: .text:0040BC52↑j
.text:0040C040                 mov     dword ptr [esp+4], 0
.text:0040C048                 mov     dword ptr [esp], 0
.text:0040C04F                 call    GetLogicalDriveStringsA
.text:0040C054                 sub     esp, 8
.text:0040C057                 mov     ebx, eax
.text:0040C059                 call    GetProcessHeap
.text:0040C05E                 mov     [esp], eax
.text:0040C061                 mov     [esp+8], ebx
.text:0040C065                 mov     dword ptr [esp+4], 0
.text:0040C06D                 call    HeapAlloc
.text:0040C072                 sub     esp, 0Ch
.text:0040C075                 mov     esi, eax
.text:0040C077                 mov     [esp+4], eax
.text:0040C07B                 mov     [esp], ebx
.text:0040C07E                 call    GetLogicalDriveStringsA
.text:0040C083                 mov     off_410084, esi ; "notset"
.text:0040C089                 sub     esp, 8
.text:0040C08C                 jmp     loc_40BC58
.text:0040C08C ; ---------------------------------------------------------------------------
.text:0040C091 ; const char aSSSSDD[]
.text:0040C091 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040C091                                         ; DATA XREF: .text:0040C1D0↓o
.text:0040C091                                         ; ___addmntentstr+F0↓o
.text:0040C0A4                 align 10h
.text:0040C0B0                 push    esi
.text:0040C0B1                 push    ebx
.text:0040C0B2                 sub     esp, 44h
.text:0040C0B5                 mov     ebx, [esp+54h]
.text:0040C0B9                 mov     esi, [esp+50h]
.text:0040C0BD                 mov     edx, [ebx]
.text:0040C0BF                 mov     [esp+20h], edx
.text:0040C0C3                 mov     ecx, [ebx+4]
.text:0040C0C6                 mov     [esp+24h], ecx
.text:0040C0CA                 mov     edx, [ebx+8]
.text:0040C0CD                 mov     [esp+28h], edx
.text:0040C0D1                 mov     ecx, [ebx+0Ch]
.text:0040C0D4                 mov     [esp+2Ch], ecx
.text:0040C0D8                 mov     edx, [ebx+10h]
.text:0040C0DB                 mov     [esp+30h], edx
.text:0040C0DF                 mov     ecx, [ebx+14h]
.text:0040C0E2                 mov     dword ptr [esp+8], 2
.text:0040C0EA                 mov     dword ptr [esp+4], 0
.text:0040C0F2                 mov     [esp+34h], ecx
.text:0040C0F6                 mov     [esp], esi
.text:0040C0F9                 call    sub_40C9F0
.text:0040C0FE ; ---------------------------------------------------------------------------
.text:0040C0FE                 test    eax, eax
.text:0040C100                 mov     edx, 1
.text:0040C105                 jnz     loc_40C205
.text:0040C10B                 mov     ebx, [esp+20h]
.text:0040C10F                 mov     edx, ebx
.text:0040C111                 movzx   eax, byte ptr [ebx]
.text:0040C114                 test    al, al
.text:0040C116                 jz      short loc_40C140
.text:0040C118                 nop
.text:0040C119                 lea     esi, [esi+0]
.text:0040C120
.text:0040C120 loc_40C120:                             ; CODE XREF: .text:0040C13E↓j
.text:0040C120                 cmp     al, 20h ; ' '
.text:0040C122                 jz      loc_40C37A
.text:0040C128                 cmp     al, 9
.text:0040C12A                 jz      loc_40C37A
.text:0040C130                 cmp     al, 5Ch ; '\'
.text:0040C132                 jz      loc_40C37A
.text:0040C138                 inc     ebx
.text:0040C139                 movzx   eax, byte ptr [ebx]
.text:0040C13C                 test    al, al
.text:0040C13E                 jnz     short loc_40C120
.text:0040C140
.text:0040C140 loc_40C140:                             ; CODE XREF: .text:0040C116↑j
.text:0040C140                                         ; .text:0040C37C↓j ...
.text:0040C140                 mov     ebx, [esp+24h]
.text:0040C144                 mov     edx, ebx
.text:0040C146                 movzx   eax, byte ptr [ebx]
.text:0040C149                 test    al, al
.text:0040C14B                 jz      short loc_40C170
.text:0040C14D                 lea     esi, [esi+0]
.text:0040C150
.text:0040C150 loc_40C150:                             ; CODE XREF: .text:0040C16E↓j
.text:0040C150                 cmp     al, 20h ; ' '
.text:0040C152                 jz      loc_40C2FA
.text:0040C158                 cmp     al, 9
.text:0040C15A                 jz      loc_40C2FA
.text:0040C160                 cmp     al, 5Ch ; '\'
.text:0040C162                 jz      loc_40C2FA
.text:0040C168                 inc     ebx
.text:0040C169                 movzx   eax, byte ptr [ebx]
.text:0040C16C                 test    al, al
.text:0040C16E                 jnz     short loc_40C150
.text:0040C170
.text:0040C170 loc_40C170:                             ; CODE XREF: .text:0040C14B↑j
.text:0040C170                                         ; .text:0040C2FC↓j ...
.text:0040C170                 mov     ebx, [esp+28h]
.text:0040C174                 mov     edx, ebx
.text:0040C176                 movzx   eax, byte ptr [ebx]
.text:0040C179                 test    al, al
.text:0040C17B                 jz      short loc_40C1A0
.text:0040C17D                 lea     esi, [esi+0]
.text:0040C180
.text:0040C180 loc_40C180:                             ; CODE XREF: .text:0040C19E↓j
.text:0040C180                 cmp     al, 20h ; ' '
.text:0040C182                 jz      loc_40C27E
.text:0040C188                 cmp     al, 9
.text:0040C18A                 jz      loc_40C27E
.text:0040C190                 cmp     al, 5Ch ; '\'
.text:0040C192                 jz      loc_40C27E
.text:0040C198                 inc     ebx
.text:0040C199                 movzx   eax, byte ptr [ebx]
.text:0040C19C                 test    al, al
.text:0040C19E                 jnz     short loc_40C180
.text:0040C1A0
.text:0040C1A0 loc_40C1A0:                             ; CODE XREF: .text:0040C17B↑j
.text:0040C1A0                                         ; .text:0040C280↓j ...
.text:0040C1A0                 mov     edx, [esp+2Ch]
.text:0040C1A4                 mov     ebx, edx
.text:0040C1A6                 movzx   eax, byte ptr [edx]
.text:0040C1A9                 test    al, al
.text:0040C1AB                 jz      short loc_40C1C4
.text:0040C1AD                 lea     esi, [esi+0]
.text:0040C1B0
.text:0040C1B0 loc_40C1B0:                             ; CODE XREF: .text:0040C1C2↓j
.text:0040C1B0                 cmp     al, 20h ; ' '
.text:0040C1B2                 jz      short loc_40C20D
.text:0040C1B4                 cmp     al, 9
.text:0040C1B6                 jz      short loc_40C20D
.text:0040C1B8                 cmp     al, 5Ch ; '\'
.text:0040C1BA                 jz      short loc_40C20D
.text:0040C1BC                 inc     ebx
.text:0040C1BD                 movzx   eax, byte ptr [ebx]
.text:0040C1C0                 test    al, al
.text:0040C1C2                 jnz     short loc_40C1B0
.text:0040C1C4
.text:0040C1C4 loc_40C1C4:                             ; CODE XREF: .text:0040C1AB↑j
.text:0040C1C4                                         ; .text:0040C20F↓j ...
.text:0040C1C4                 mov     [esp+14h], edx
.text:0040C1C8                 mov     ecx, [esp+34h]
.text:0040C1CC                 mov     ebx, [esp+30h]
.text:0040C1D0                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040C1D8                 mov     edx, [esp+24h]
.text:0040C1DC                 mov     [esp+1Ch], ecx
.text:0040C1E0                 mov     ecx, [esp+28h]
.text:0040C1E4                 mov     [esp+18h], ebx
.text:0040C1E8                 mov     ebx, [esp+20h]
.text:0040C1EC                 mov     [esp+0Ch], edx
.text:0040C1F0                 mov     [esp+10h], ecx
.text:0040C1F4                 mov     [esp+8], ebx
.text:0040C1F8                 mov     [esp], esi
.text:0040C1FB                 call    fprintf
.text:0040C200                 mov     edx, eax
.text:0040C202                 shr     edx, 1Fh
.text:0040C205
.text:0040C205 loc_40C205:                             ; CODE XREF: .text:0040C105↑j
.text:0040C205                 add     esp, 44h
.text:0040C208                 mov     eax, edx
.text:0040C20A                 pop     ebx
.text:0040C20B                 pop     esi
.text:0040C20C                 retn
.text:0040C20D ; ---------------------------------------------------------------------------
.text:0040C20D
.text:0040C20D loc_40C20D:                             ; CODE XREF: .text:0040C1B2↑j
.text:0040C20D                                         ; .text:0040C1B6↑j ...
.text:0040C20D                 test    al, al
.text:0040C20F                 jz      short loc_40C1C4
.text:0040C211                 mov     [esp], edx
.text:0040C214                 mov     ebx, edx
.text:0040C216                 call    strlen
.text:0040C21B                 lea     edx, ds:1[eax*4]
.text:0040C222                 mov     [esp], edx
.text:0040C225                 call    malloc
.text:0040C22A                 mov     [esp+2Ch], eax
.text:0040C22E                 mov     edx, eax
.text:0040C230
.text:0040C230 loc_40C230:                             ; CODE XREF: .text:0040C248↓j
.text:0040C230                 movzx   eax, byte ptr [ebx]
.text:0040C233                 cmp     al, 20h ; ' '
.text:0040C235                 jz      short loc_40C26D
.text:0040C237                 cmp     al, 9
.text:0040C239                 jz      short loc_40C25C
.text:0040C23B                 cmp     al, 5Ch ; '\'
.text:0040C23D                 jz      short loc_40C253
.text:0040C23F                 mov     [edx], al
.text:0040C241
.text:0040C241 loc_40C241:                             ; CODE XREF: .text:0040C25A↓j
.text:0040C241                                         ; .text:0040C26B↓j ...
.text:0040C241                 movzx   ecx, byte ptr [ebx]
.text:0040C244                 inc     edx
.text:0040C245                 inc     ebx
.text:0040C246                 test    cl, cl
.text:0040C248                 jnz     short loc_40C230
.text:0040C24A                 mov     edx, [esp+2Ch]
.text:0040C24E                 jmp     loc_40C1C4
.text:0040C253 ; ---------------------------------------------------------------------------
.text:0040C253
.text:0040C253 loc_40C253:                             ; CODE XREF: .text:0040C23D↑j
.text:0040C253                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C256                 inc     edx
.text:0040C257                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C25A                 jmp     short loc_40C241
.text:0040C25C ; ---------------------------------------------------------------------------
.text:0040C25C
.text:0040C25C loc_40C25C:                             ; CODE XREF: .text:0040C239↑j
.text:0040C25C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C25F                 inc     edx
.text:0040C260                 mov     byte ptr [edx], 30h ; '0'
.text:0040C263                 inc     edx
.text:0040C264                 mov     byte ptr [edx], 31h ; '1'
.text:0040C267                 inc     edx
.text:0040C268                 mov     byte ptr [edx], 32h ; '2'
.text:0040C26B                 jmp     short loc_40C241
.text:0040C26D ; ---------------------------------------------------------------------------
.text:0040C26D
.text:0040C26D loc_40C26D:                             ; CODE XREF: .text:0040C235↑j
.text:0040C26D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C270                 inc     edx
.text:0040C271                 mov     byte ptr [edx], 30h ; '0'
.text:0040C274                 inc     edx
.text:0040C275                 mov     byte ptr [edx], 34h ; '4'
.text:0040C278                 inc     edx
.text:0040C279                 mov     byte ptr [edx], 30h ; '0'
.text:0040C27C                 jmp     short loc_40C241
.text:0040C27E ; ---------------------------------------------------------------------------
.text:0040C27E
.text:0040C27E loc_40C27E:                             ; CODE XREF: .text:0040C182↑j
.text:0040C27E                                         ; .text:0040C18A↑j ...
.text:0040C27E                 test    al, al
.text:0040C280                 jz      loc_40C1A0
.text:0040C286                 mov     [esp], edx
.text:0040C289                 mov     ebx, edx
.text:0040C28B                 call    strlen
.text:0040C290                 lea     edx, ds:1[eax*4]
.text:0040C297                 mov     [esp], edx
.text:0040C29A                 call    malloc
.text:0040C29F                 mov     [esp+28h], eax
.text:0040C2A3                 mov     edx, eax
.text:0040C2A5                 lea     esi, [esi+0]
.text:0040C2A9                 lea     edi, [edi+0]
.text:0040C2B0
.text:0040C2B0 loc_40C2B0:                             ; CODE XREF: .text:0040C2C8↓j
.text:0040C2B0                 movzx   eax, byte ptr [ebx]
.text:0040C2B3                 cmp     al, 20h ; ' '
.text:0040C2B5                 jz      short loc_40C2E9
.text:0040C2B7                 cmp     al, 9
.text:0040C2B9                 jz      short loc_40C2D8
.text:0040C2BB                 cmp     al, 5Ch ; '\'
.text:0040C2BD                 jz      short loc_40C2CF
.text:0040C2BF                 mov     [edx], al
.text:0040C2C1
.text:0040C2C1 loc_40C2C1:                             ; CODE XREF: .text:0040C2D6↓j
.text:0040C2C1                                         ; .text:0040C2E7↓j ...
.text:0040C2C1                 movzx   ecx, byte ptr [ebx]
.text:0040C2C4                 inc     edx
.text:0040C2C5                 inc     ebx
.text:0040C2C6                 test    cl, cl
.text:0040C2C8                 jnz     short loc_40C2B0
.text:0040C2CA                 jmp     loc_40C1A0
.text:0040C2CF ; ---------------------------------------------------------------------------
.text:0040C2CF
.text:0040C2CF loc_40C2CF:                             ; CODE XREF: .text:0040C2BD↑j
.text:0040C2CF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C2D2                 inc     edx
.text:0040C2D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C2D6                 jmp     short loc_40C2C1
.text:0040C2D8 ; ---------------------------------------------------------------------------
.text:0040C2D8
.text:0040C2D8 loc_40C2D8:                             ; CODE XREF: .text:0040C2B9↑j
.text:0040C2D8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C2DB                 inc     edx
.text:0040C2DC                 mov     byte ptr [edx], 30h ; '0'
.text:0040C2DF                 inc     edx
.text:0040C2E0                 mov     byte ptr [edx], 31h ; '1'
.text:0040C2E3                 inc     edx
.text:0040C2E4                 mov     byte ptr [edx], 32h ; '2'
.text:0040C2E7                 jmp     short loc_40C2C1
.text:0040C2E9 ; ---------------------------------------------------------------------------
.text:0040C2E9
.text:0040C2E9 loc_40C2E9:                             ; CODE XREF: .text:0040C2B5↑j
.text:0040C2E9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C2EC                 inc     edx
.text:0040C2ED                 mov     byte ptr [edx], 30h ; '0'
.text:0040C2F0                 inc     edx
.text:0040C2F1                 mov     byte ptr [edx], 34h ; '4'
.text:0040C2F4                 inc     edx
.text:0040C2F5                 mov     byte ptr [edx], 30h ; '0'
.text:0040C2F8                 jmp     short loc_40C2C1
.text:0040C2FA ; ---------------------------------------------------------------------------
.text:0040C2FA
.text:0040C2FA loc_40C2FA:                             ; CODE XREF: .text:0040C152↑j
.text:0040C2FA                                         ; .text:0040C15A↑j ...
.text:0040C2FA                 test    al, al
.text:0040C2FC                 jz      loc_40C170
.text:0040C302                 mov     [esp], edx
.text:0040C305                 mov     ebx, edx
.text:0040C307                 call    strlen
.text:0040C30C                 lea     edx, ds:1[eax*4]
.text:0040C313                 mov     [esp], edx
.text:0040C316                 call    malloc
.text:0040C31B                 mov     [esp+24h], eax
.text:0040C31F                 mov     edx, eax
.text:0040C321                 jmp     short loc_40C330
.text:0040C321 ; ---------------------------------------------------------------------------
.text:0040C323                 align 10h
.text:0040C330
.text:0040C330 loc_40C330:                             ; CODE XREF: .text:0040C321↑j
.text:0040C330                                         ; .text:0040C348↓j
.text:0040C330                 movzx   eax, byte ptr [ebx]
.text:0040C333                 cmp     al, 20h ; ' '
.text:0040C335                 jz      short loc_40C369
.text:0040C337                 cmp     al, 9
.text:0040C339                 jz      short loc_40C358
.text:0040C33B                 cmp     al, 5Ch ; '\'
.text:0040C33D                 jz      short loc_40C34F
.text:0040C33F                 mov     [edx], al
.text:0040C341
.text:0040C341 loc_40C341:                             ; CODE XREF: .text:0040C356↓j
.text:0040C341                                         ; .text:0040C367↓j ...
.text:0040C341                 movzx   ecx, byte ptr [ebx]
.text:0040C344                 inc     edx
.text:0040C345                 inc     ebx
.text:0040C346                 test    cl, cl
.text:0040C348                 jnz     short loc_40C330
.text:0040C34A                 jmp     loc_40C170
.text:0040C34F ; ---------------------------------------------------------------------------
.text:0040C34F
.text:0040C34F loc_40C34F:                             ; CODE XREF: .text:0040C33D↑j
.text:0040C34F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C352                 inc     edx
.text:0040C353                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C356                 jmp     short loc_40C341
.text:0040C358 ; ---------------------------------------------------------------------------
.text:0040C358
.text:0040C358 loc_40C358:                             ; CODE XREF: .text:0040C339↑j
.text:0040C358                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C35B                 inc     edx
.text:0040C35C                 mov     byte ptr [edx], 30h ; '0'
.text:0040C35F                 inc     edx
.text:0040C360                 mov     byte ptr [edx], 31h ; '1'
.text:0040C363                 inc     edx
.text:0040C364                 mov     byte ptr [edx], 32h ; '2'
.text:0040C367                 jmp     short loc_40C341
.text:0040C369 ; ---------------------------------------------------------------------------
.text:0040C369
.text:0040C369 loc_40C369:                             ; CODE XREF: .text:0040C335↑j
.text:0040C369                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C36C                 inc     edx
.text:0040C36D                 mov     byte ptr [edx], 30h ; '0'
.text:0040C370                 inc     edx
.text:0040C371                 mov     byte ptr [edx], 34h ; '4'
.text:0040C374                 inc     edx
.text:0040C375                 mov     byte ptr [edx], 30h ; '0'
.text:0040C378                 jmp     short loc_40C341
.text:0040C37A ; ---------------------------------------------------------------------------
.text:0040C37A
.text:0040C37A loc_40C37A:                             ; CODE XREF: .text:0040C122↑j
.text:0040C37A                                         ; .text:0040C12A↑j ...
.text:0040C37A                 test    al, al
.text:0040C37C                 jz      loc_40C140
.text:0040C382                 mov     [esp], edx
.text:0040C385                 mov     ebx, edx
.text:0040C387                 call    strlen
.text:0040C38C                 lea     ecx, ds:1[eax*4]
.text:0040C393                 mov     [esp], ecx
.text:0040C396                 call    malloc
.text:0040C39B                 mov     [esp+20h], eax
.text:0040C39F                 mov     edx, eax
.text:0040C3A1                 jmp     short loc_40C3B0
.text:0040C3A1 ; ---------------------------------------------------------------------------
.text:0040C3A3                 align 10h
.text:0040C3B0
.text:0040C3B0 loc_40C3B0:                             ; CODE XREF: .text:0040C3A1↑j
.text:0040C3B0                                         ; .text:0040C3C8↓j
.text:0040C3B0                 movzx   eax, byte ptr [ebx]
.text:0040C3B3                 cmp     al, 20h ; ' '
.text:0040C3B5                 jz      short loc_40C3E9
.text:0040C3B7                 cmp     al, 9
.text:0040C3B9                 jz      short loc_40C3D8
.text:0040C3BB                 cmp     al, 5Ch ; '\'
.text:0040C3BD                 jz      short loc_40C3CF
.text:0040C3BF                 mov     [edx], al
.text:0040C3C1
.text:0040C3C1 loc_40C3C1:                             ; CODE XREF: .text:0040C3D6↓j
.text:0040C3C1                                         ; .text:0040C3E7↓j ...
.text:0040C3C1                 movzx   ecx, byte ptr [ebx]
.text:0040C3C4                 inc     edx
.text:0040C3C5                 inc     ebx
.text:0040C3C6                 test    cl, cl
.text:0040C3C8                 jnz     short loc_40C3B0
.text:0040C3CA                 jmp     loc_40C140
.text:0040C3CF ; ---------------------------------------------------------------------------
.text:0040C3CF
.text:0040C3CF loc_40C3CF:                             ; CODE XREF: .text:0040C3BD↑j
.text:0040C3CF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C3D2                 inc     edx
.text:0040C3D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C3D6                 jmp     short loc_40C3C1
.text:0040C3D8 ; ---------------------------------------------------------------------------
.text:0040C3D8
.text:0040C3D8 loc_40C3D8:                             ; CODE XREF: .text:0040C3B9↑j
.text:0040C3D8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C3DB                 inc     edx
.text:0040C3DC                 mov     byte ptr [edx], 30h ; '0'
.text:0040C3DF                 inc     edx
.text:0040C3E0                 mov     byte ptr [edx], 31h ; '1'
.text:0040C3E3                 inc     edx
.text:0040C3E4                 mov     byte ptr [edx], 32h ; '2'
.text:0040C3E7                 jmp     short loc_40C3C1
.text:0040C3E9 ; ---------------------------------------------------------------------------
.text:0040C3E9
.text:0040C3E9 loc_40C3E9:                             ; CODE XREF: .text:0040C3B5↑j
.text:0040C3E9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C3EC                 inc     edx
.text:0040C3ED                 mov     byte ptr [edx], 30h ; '0'
.text:0040C3F0                 inc     edx
.text:0040C3F1                 mov     byte ptr [edx], 34h ; '4'
.text:0040C3F4                 inc     edx
.text:0040C3F5                 mov     byte ptr [edx], 30h ; '0'
.text:0040C3F8                 jmp     short loc_40C3C1
.text:0040C3F8 ; ---------------------------------------------------------------------------
.text:0040C3FA                 align 10h
.text:0040C400
.text:0040C400 ; =============== S U B R O U T I N E =======================================
.text:0040C400
.text:0040C400 ; Attributes: info_from_lumina
.text:0040C400
.text:0040C400 ; int __cdecl __addmntentstr(char *, int)
.text:0040C400 ___addmntentstr proc near               ; CODE XREF: .text:0040BCCA↑p
.text:0040C400
.text:0040C400 Buffer          = dword ptr -4Ch
.text:0040C400 Format          = dword ptr -48h
.text:0040C400 var_44          = dword ptr -44h
.text:0040C400 var_40          = dword ptr -40h
.text:0040C400 var_3C          = dword ptr -3Ch
.text:0040C400 var_38          = dword ptr -38h
.text:0040C400 var_34          = dword ptr -34h
.text:0040C400 var_30          = dword ptr -30h
.text:0040C400 var_2C          = dword ptr -2Ch
.text:0040C400 var_28          = dword ptr -28h
.text:0040C400 var_24          = dword ptr -24h
.text:0040C400 Str             = dword ptr -20h
.text:0040C400 var_1C          = dword ptr -1Ch
.text:0040C400 var_18          = dword ptr -18h
.text:0040C400 arg_0           = dword ptr  4
.text:0040C400 arg_4           = dword ptr  8
.text:0040C400
.text:0040C400                 push    ebx
.text:0040C401                 sub     esp, 48h
.text:0040C404                 mov     edx, [esp+4Ch+arg_4]
.text:0040C408                 mov     ecx, [edx]
.text:0040C40A                 mov     [esp+4Ch+var_2C], ecx
.text:0040C40E                 mov     ebx, [edx+4]
.text:0040C411                 mov     [esp+4Ch+var_28], ebx
.text:0040C415                 mov     ebx, [edx+8]
.text:0040C418                 mov     [esp+4Ch+var_24], ebx
.text:0040C41C                 mov     ebx, [edx+0Ch]
.text:0040C41F                 mov     [esp+4Ch+Str], ebx
.text:0040C423                 mov     ebx, [edx+10h]
.text:0040C426                 mov     [esp+4Ch+var_1C], ebx
.text:0040C42A                 mov     ebx, [edx+14h]
.text:0040C42D                 mov     [esp+4Ch+var_18], ebx
.text:0040C431                 mov     ebx, ecx
.text:0040C433                 movzx   eax, byte ptr [ecx]
.text:0040C436                 test    al, al
.text:0040C438                 jz      loc_40C721
.text:0040C43E                 mov     esi, esi
.text:0040C440
.text:0040C440 loc_40C440:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040C440                 cmp     al, 20h ; ' '
.text:0040C442                 jz      loc_40C6A0
.text:0040C448                 cmp     al, 9
.text:0040C44A                 jz      loc_40C6A0
.text:0040C450                 cmp     al, 5Ch ; '\'
.text:0040C452                 jz      loc_40C6A0
.text:0040C458                 inc     ebx
.text:0040C459                 movzx   eax, byte ptr [ebx]
.text:0040C45C                 test    al, al
.text:0040C45E                 jnz     short loc_40C440
.text:0040C460
.text:0040C460 loc_40C460:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040C460                                         ; ___addmntentstr+2EA↓j
.text:0040C460                 mov     ebx, [esp+4Ch+var_28]
.text:0040C464                 mov     edx, ebx
.text:0040C466                 movzx   eax, byte ptr [ebx]
.text:0040C469                 test    al, al
.text:0040C46B                 jz      short loc_40C490
.text:0040C46D                 lea     esi, [esi+0]
.text:0040C470
.text:0040C470 loc_40C470:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040C470                 cmp     al, 20h ; ' '
.text:0040C472                 jz      loc_40C61A
.text:0040C478                 cmp     al, 9
.text:0040C47A                 jz      loc_40C61A
.text:0040C480                 cmp     al, 5Ch ; '\'
.text:0040C482                 jz      loc_40C61A
.text:0040C488                 inc     ebx
.text:0040C489                 movzx   eax, byte ptr [ebx]
.text:0040C48C                 test    al, al
.text:0040C48E                 jnz     short loc_40C470
.text:0040C490
.text:0040C490 loc_40C490:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040C490                                         ; ___addmntentstr+21C↓j ...
.text:0040C490                 mov     ebx, [esp+4Ch+var_24]
.text:0040C494                 mov     edx, ebx
.text:0040C496                 movzx   eax, byte ptr [ebx]
.text:0040C499                 test    al, al
.text:0040C49B                 jz      short loc_40C4C0
.text:0040C49D                 lea     esi, [esi+0]
.text:0040C4A0
.text:0040C4A0 loc_40C4A0:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040C4A0                 cmp     al, 20h ; ' '
.text:0040C4A2                 jz      loc_40C59E
.text:0040C4A8                 cmp     al, 9
.text:0040C4AA                 jz      loc_40C59E
.text:0040C4B0                 cmp     al, 5Ch ; '\'
.text:0040C4B2                 jz      loc_40C59E
.text:0040C4B8                 inc     ebx
.text:0040C4B9                 movzx   eax, byte ptr [ebx]
.text:0040C4BC                 test    al, al
.text:0040C4BE                 jnz     short loc_40C4A0
.text:0040C4C0
.text:0040C4C0 loc_40C4C0:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040C4C0                                         ; ___addmntentstr+1A0↓j ...
.text:0040C4C0                 mov     edx, [esp+4Ch+Str]
.text:0040C4C4                 mov     ebx, edx
.text:0040C4C6                 movzx   eax, byte ptr [edx]
.text:0040C4C9                 test    al, al
.text:0040C4CB                 jz      short loc_40C4E4
.text:0040C4CD                 lea     esi, [esi+0]
.text:0040C4D0
.text:0040C4D0 loc_40C4D0:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040C4D0                 cmp     al, 20h ; ' '
.text:0040C4D2                 jz      short loc_40C52C
.text:0040C4D4                 cmp     al, 9
.text:0040C4D6                 jz      short loc_40C52C
.text:0040C4D8                 cmp     al, 5Ch ; '\'
.text:0040C4DA                 jz      short loc_40C52C
.text:0040C4DC                 inc     ebx
.text:0040C4DD                 movzx   eax, byte ptr [ebx]
.text:0040C4E0                 test    al, al
.text:0040C4E2                 jnz     short loc_40C4D0
.text:0040C4E4
.text:0040C4E4 loc_40C4E4:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040C4E4                                         ; ___addmntentstr+12E↓j ...
.text:0040C4E4                 mov     [esp+4Ch+var_38], edx
.text:0040C4E8                 mov     ebx, [esp+4Ch+var_18]
.text:0040C4EC                 mov     ecx, [esp+4Ch+var_1C]
.text:0040C4F0                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040C4F8                 mov     edx, [esp+4Ch+var_2C]
.text:0040C4FC                 mov     [esp+4Ch+var_30], ebx
.text:0040C500                 mov     ebx, [esp+4Ch+var_24]
.text:0040C504                 mov     [esp+4Ch+var_34], ecx
.text:0040C508                 mov     ecx, [esp+4Ch+var_28]
.text:0040C50C                 mov     [esp+4Ch+var_3C], ebx
.text:0040C510                 mov     ebx, [esp+4Ch+arg_0]
.text:0040C514                 mov     [esp+4Ch+var_40], ecx
.text:0040C518                 mov     [esp+4Ch+var_44], edx
.text:0040C51C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040C51F                 call    sprintf
.text:0040C524                 add     esp, 48h
.text:0040C527                 shr     eax, 1Fh
.text:0040C52A                 pop     ebx
.text:0040C52B                 retn
.text:0040C52C ; ---------------------------------------------------------------------------
.text:0040C52C
.text:0040C52C loc_40C52C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040C52C                                         ; ___addmntentstr+D6↑j ...
.text:0040C52C                 test    al, al
.text:0040C52E                 jz      short loc_40C4E4
.text:0040C530                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040C533                 mov     ebx, edx
.text:0040C535                 call    strlen
.text:0040C53A                 lea     edx, ds:1[eax*4]
.text:0040C541                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040C544                 call    malloc
.text:0040C549                 mov     [esp+4Ch+Str], eax
.text:0040C54D                 mov     edx, eax
.text:0040C54F                 nop
.text:0040C550
.text:0040C550 loc_40C550:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040C550                 movzx   eax, byte ptr [ebx]
.text:0040C553                 cmp     al, 20h ; ' '
.text:0040C555                 jz      short loc_40C58D
.text:0040C557                 cmp     al, 9
.text:0040C559                 jz      short loc_40C57C
.text:0040C55B                 cmp     al, 5Ch ; '\'
.text:0040C55D                 jz      short loc_40C573
.text:0040C55F                 mov     [edx], al
.text:0040C561
.text:0040C561 loc_40C561:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040C561                                         ; ___addmntentstr+18B↓j ...
.text:0040C561                 movzx   ecx, byte ptr [ebx]
.text:0040C564                 inc     edx
.text:0040C565                 inc     ebx
.text:0040C566                 test    cl, cl
.text:0040C568                 jnz     short loc_40C550
.text:0040C56A                 mov     edx, [esp+4Ch+Str]
.text:0040C56E                 jmp     loc_40C4E4
.text:0040C573 ; ---------------------------------------------------------------------------
.text:0040C573
.text:0040C573 loc_40C573:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040C573                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C576                 inc     edx
.text:0040C577                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C57A                 jmp     short loc_40C561
.text:0040C57C ; ---------------------------------------------------------------------------
.text:0040C57C
.text:0040C57C loc_40C57C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040C57C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C57F                 inc     edx
.text:0040C580                 mov     byte ptr [edx], 30h ; '0'
.text:0040C583                 inc     edx
.text:0040C584                 mov     byte ptr [edx], 31h ; '1'
.text:0040C587                 inc     edx
.text:0040C588                 mov     byte ptr [edx], 32h ; '2'
.text:0040C58B                 jmp     short loc_40C561
.text:0040C58D ; ---------------------------------------------------------------------------
.text:0040C58D
.text:0040C58D loc_40C58D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040C58D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C590                 inc     edx
.text:0040C591                 mov     byte ptr [edx], 30h ; '0'
.text:0040C594                 inc     edx
.text:0040C595                 mov     byte ptr [edx], 34h ; '4'
.text:0040C598                 inc     edx
.text:0040C599                 mov     byte ptr [edx], 30h ; '0'
.text:0040C59C                 jmp     short loc_40C561
.text:0040C59E ; ---------------------------------------------------------------------------
.text:0040C59E
.text:0040C59E loc_40C59E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040C59E                                         ; ___addmntentstr+AA↑j ...
.text:0040C59E                 test    al, al
.text:0040C5A0                 jz      loc_40C4C0
.text:0040C5A6                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040C5A9                 mov     ebx, edx
.text:0040C5AB                 call    strlen
.text:0040C5B0                 lea     edx, ds:1[eax*4]
.text:0040C5B7                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040C5BA                 call    malloc
.text:0040C5BF                 mov     [esp+4Ch+var_24], eax
.text:0040C5C3                 mov     edx, eax
.text:0040C5C5                 lea     esi, [esi+0]
.text:0040C5C9                 lea     edi, [edi+0]
.text:0040C5D0
.text:0040C5D0 loc_40C5D0:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040C5D0                 movzx   eax, byte ptr [ebx]
.text:0040C5D3                 cmp     al, 20h ; ' '
.text:0040C5D5                 jz      short loc_40C609
.text:0040C5D7                 cmp     al, 9
.text:0040C5D9                 jz      short loc_40C5F8
.text:0040C5DB                 cmp     al, 5Ch ; '\'
.text:0040C5DD                 jz      short loc_40C5EF
.text:0040C5DF                 mov     [edx], al
.text:0040C5E1
.text:0040C5E1 loc_40C5E1:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040C5E1                                         ; ___addmntentstr+207↓j ...
.text:0040C5E1                 movzx   ecx, byte ptr [ebx]
.text:0040C5E4                 inc     edx
.text:0040C5E5                 inc     ebx
.text:0040C5E6                 test    cl, cl
.text:0040C5E8                 jnz     short loc_40C5D0
.text:0040C5EA                 jmp     loc_40C4C0
.text:0040C5EF ; ---------------------------------------------------------------------------
.text:0040C5EF
.text:0040C5EF loc_40C5EF:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040C5EF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C5F2                 inc     edx
.text:0040C5F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C5F6                 jmp     short loc_40C5E1
.text:0040C5F8 ; ---------------------------------------------------------------------------
.text:0040C5F8
.text:0040C5F8 loc_40C5F8:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040C5F8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C5FB                 inc     edx
.text:0040C5FC                 mov     byte ptr [edx], 30h ; '0'
.text:0040C5FF                 inc     edx
.text:0040C600                 mov     byte ptr [edx], 31h ; '1'
.text:0040C603                 inc     edx
.text:0040C604                 mov     byte ptr [edx], 32h ; '2'
.text:0040C607                 jmp     short loc_40C5E1
.text:0040C609 ; ---------------------------------------------------------------------------
.text:0040C609
.text:0040C609 loc_40C609:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040C609                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C60C                 inc     edx
.text:0040C60D                 mov     byte ptr [edx], 30h ; '0'
.text:0040C610                 inc     edx
.text:0040C611                 mov     byte ptr [edx], 34h ; '4'
.text:0040C614                 inc     edx
.text:0040C615                 mov     byte ptr [edx], 30h ; '0'
.text:0040C618                 jmp     short loc_40C5E1
.text:0040C61A ; ---------------------------------------------------------------------------
.text:0040C61A
.text:0040C61A loc_40C61A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040C61A                                         ; ___addmntentstr+7A↑j ...
.text:0040C61A                 test    al, al
.text:0040C61C                 jz      loc_40C490
.text:0040C622                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040C625                 mov     ebx, edx
.text:0040C627                 call    strlen
.text:0040C62C                 lea     edx, ds:1[eax*4]
.text:0040C633                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040C636                 call    malloc
.text:0040C63B                 mov     [esp+4Ch+var_28], eax
.text:0040C63F                 mov     edx, eax
.text:0040C641                 jmp     short loc_40C650
.text:0040C641 ; ---------------------------------------------------------------------------
.text:0040C643                 align 10h
.text:0040C650
.text:0040C650 loc_40C650:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040C650                                         ; ___addmntentstr+268↓j
.text:0040C650                 movzx   eax, byte ptr [ebx]
.text:0040C653                 cmp     al, 20h ; ' '
.text:0040C655                 jz      short loc_40C689
.text:0040C657                 cmp     al, 9
.text:0040C659                 jz      short loc_40C678
.text:0040C65B                 cmp     al, 5Ch ; '\'
.text:0040C65D                 jz      short loc_40C66F
.text:0040C65F                 mov     [edx], al
.text:0040C661
.text:0040C661 loc_40C661:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040C661                                         ; ___addmntentstr+287↓j ...
.text:0040C661                 movzx   ecx, byte ptr [ebx]
.text:0040C664                 inc     edx
.text:0040C665                 inc     ebx
.text:0040C666                 test    cl, cl
.text:0040C668                 jnz     short loc_40C650
.text:0040C66A                 jmp     loc_40C490
.text:0040C66F ; ---------------------------------------------------------------------------
.text:0040C66F
.text:0040C66F loc_40C66F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040C66F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C672                 inc     edx
.text:0040C673                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C676                 jmp     short loc_40C661
.text:0040C678 ; ---------------------------------------------------------------------------
.text:0040C678
.text:0040C678 loc_40C678:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040C678                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C67B                 inc     edx
.text:0040C67C                 mov     byte ptr [edx], 30h ; '0'
.text:0040C67F                 inc     edx
.text:0040C680                 mov     byte ptr [edx], 31h ; '1'
.text:0040C683                 inc     edx
.text:0040C684                 mov     byte ptr [edx], 32h ; '2'
.text:0040C687                 jmp     short loc_40C661
.text:0040C689 ; ---------------------------------------------------------------------------
.text:0040C689
.text:0040C689 loc_40C689:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040C689                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C68C                 inc     edx
.text:0040C68D                 mov     byte ptr [edx], 30h ; '0'
.text:0040C690                 inc     edx
.text:0040C691                 mov     byte ptr [edx], 34h ; '4'
.text:0040C694                 inc     edx
.text:0040C695                 mov     byte ptr [edx], 30h ; '0'
.text:0040C698                 jmp     short loc_40C661
.text:0040C698 ; ---------------------------------------------------------------------------
.text:0040C69A                 align 10h
.text:0040C6A0
.text:0040C6A0 loc_40C6A0:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040C6A0                                         ; ___addmntentstr+4A↑j ...
.text:0040C6A0                 test    al, al
.text:0040C6A2                 jz      loc_40C460
.text:0040C6A8                 mov     ebx, [esp+4Ch+var_2C]
.text:0040C6AC                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040C6AF                 call    strlen
.text:0040C6B4                 lea     edx, ds:1[eax*4]
.text:0040C6BB                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040C6BE                 call    malloc
.text:0040C6C3                 mov     [esp+4Ch+var_2C], eax
.text:0040C6C7                 mov     edx, eax
.text:0040C6C9                 lea     esi, [esi+0]
.text:0040C6D0
.text:0040C6D0 loc_40C6D0:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040C6D0                 movzx   eax, byte ptr [ebx]
.text:0040C6D3                 cmp     al, 20h ; ' '
.text:0040C6D5                 jz      short loc_40C710
.text:0040C6D7                 cmp     al, 9
.text:0040C6D9                 jz      short loc_40C6F8
.text:0040C6DB                 cmp     al, 5Ch ; '\'
.text:0040C6DD                 jz      short loc_40C6EF
.text:0040C6DF                 mov     [edx], al
.text:0040C6E1
.text:0040C6E1 loc_40C6E1:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040C6E1                                         ; ___addmntentstr+307↓j ...
.text:0040C6E1                 movzx   ecx, byte ptr [ebx]
.text:0040C6E4                 inc     edx
.text:0040C6E5                 inc     ebx
.text:0040C6E6                 test    cl, cl
.text:0040C6E8                 jnz     short loc_40C6D0
.text:0040C6EA                 jmp     loc_40C460
.text:0040C6EF ; ---------------------------------------------------------------------------
.text:0040C6EF
.text:0040C6EF loc_40C6EF:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040C6EF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C6F2                 inc     edx
.text:0040C6F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C6F6                 jmp     short loc_40C6E1
.text:0040C6F8 ; ---------------------------------------------------------------------------
.text:0040C6F8
.text:0040C6F8 loc_40C6F8:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040C6F8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C6FB                 inc     edx
.text:0040C6FC                 mov     byte ptr [edx], 30h ; '0'
.text:0040C6FF                 inc     edx
.text:0040C700                 mov     byte ptr [edx], 31h ; '1'
.text:0040C703                 inc     edx
.text:0040C704                 mov     byte ptr [edx], 32h ; '2'
.text:0040C707                 jmp     short loc_40C6E1
.text:0040C707 ; ---------------------------------------------------------------------------
.text:0040C709                 align 10h
.text:0040C710
.text:0040C710 loc_40C710:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040C710                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C713                 inc     edx
.text:0040C714                 mov     byte ptr [edx], 30h ; '0'
.text:0040C717                 inc     edx
.text:0040C718                 mov     byte ptr [edx], 34h ; '4'
.text:0040C71B                 inc     edx
.text:0040C71C                 mov     byte ptr [edx], 30h ; '0'
.text:0040C71F                 jmp     short loc_40C6E1
.text:0040C721 ; ---------------------------------------------------------------------------
.text:0040C721
.text:0040C721 loc_40C721:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040C721                 movzx   eax, byte ptr [ecx]
.text:0040C724                 jmp     loc_40C6A0
.text:0040C724 ___addmntentstr endp
.text:0040C724
.text:0040C724 ; ---------------------------------------------------------------------------
.text:0040C729                 align 10h
.text:0040C730
.text:0040C730 ; =============== S U B R O U T I N E =======================================
.text:0040C730
.text:0040C730
.text:0040C730 sub_40C730      proc near               ; CODE XREF: sub_40B060+99↑p
.text:0040C730
.text:0040C730 nBufferLength   = dword ptr -1Ch
.text:0040C730 lpBuffer        = dword ptr -18h
.text:0040C730 dwBytes         = dword ptr -14h
.text:0040C730 var_8           = dword ptr -8
.text:0040C730 var_4           = dword ptr -4
.text:0040C730
.text:0040C730                 sub     esp, 1Ch
.text:0040C733                 mov     [esp+1Ch+var_8], ebx
.text:0040C737                 mov     [esp+1Ch+var_4], esi
.text:0040C73B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040C743                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040C74A                 call    GetLogicalDriveStringsA
.text:0040C74F                 sub     esp, 8
.text:0040C752                 mov     ebx, eax
.text:0040C754                 call    GetProcessHeap
.text:0040C759                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040C75C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040C760                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040C768                 call    HeapAlloc
.text:0040C76D                 sub     esp, 0Ch
.text:0040C770                 mov     esi, eax
.text:0040C772                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040C775                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040C779                 call    GetLogicalDriveStringsA
.text:0040C77E                 sub     esp, 8
.text:0040C781                 mov     eax, esi
.text:0040C783                 mov     ebx, [esp+1Ch+var_8]
.text:0040C787                 mov     esi, [esp+1Ch+var_4]
.text:0040C78B                 add     esp, 1Ch
.text:0040C78E                 retn
.text:0040C78E sub_40C730      endp
.text:0040C78E
.text:0040C78F
.text:0040C78F ; =============== S U B R O U T I N E =======================================
.text:0040C78F
.text:0040C78F
.text:0040C78F ; int __cdecl sub_40C78F(char *, char *)
.text:0040C78F sub_40C78F      proc near               ; DATA XREF: sub_40C78F:loc_40C81D↓o
.text:0040C78F
.text:0040C78F FileName        = dword ptr -1Ch
.text:0040C78F Mode            = dword ptr -18h
.text:0040C78F dwBytes         = dword ptr -14h
.text:0040C78F arg_0           = dword ptr  4
.text:0040C78F arg_4           = dword ptr  8
.text:0040C78F
.text:0040C78F                 ja      short $+2
.text:0040C791
.text:0040C791 loc_40C791:                             ; CODE XREF: sub_40C78F↑j
.text:0040C791                 jmp     short loc_40C7A0
.text:0040C791 ; ---------------------------------------------------------------------------
.text:0040C793                 align 10h
.text:0040C7A0
.text:0040C7A0 loc_40C7A0:                             ; CODE XREF: sub_40C78F:loc_40C791↑j
.text:0040C7A0                 push    edi
.text:0040C7A1                 push    esi
.text:0040C7A2                 push    ebx
.text:0040C7A3                 sub     esp, 10h
.text:0040C7A6                 mov     ebx, [esp+1Ch+arg_0]
.text:0040C7AA                 mov     edx, [esp+1Ch+arg_4]
.text:0040C7AE                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040C7B1                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040C7B5                 call    fopen
.text:0040C7BA                 test    eax, eax
.text:0040C7BC                 mov     edi, eax
.text:0040C7BE                 jz      short loc_40C81D
.text:0040C7C0
.text:0040C7C0 loc_40C7C0:                             ; CODE XREF: sub_40C78F+A2↓j
.text:0040C7C0                                         ; sub_40C78F+AB↓j
.text:0040C7C0                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040C7C8                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040C7CF                 call    GetLogicalDriveStringsA
.text:0040C7D4                 sub     esp, 8
.text:0040C7D7                 mov     esi, eax
.text:0040C7D9                 call    GetProcessHeap
.text:0040C7DE                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040C7E1                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040C7E5                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040C7ED                 call    HeapAlloc
.text:0040C7F2                 sub     esp, 0Ch
.text:0040C7F5                 mov     ebx, eax
.text:0040C7F7                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040C7FA                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040C7FE                 call    GetLogicalDriveStringsA
.text:0040C803                 mov     off_410084, ebx ; "notset"
.text:0040C809                 sub     esp, 8
.text:0040C80C                 xor     eax, eax
.text:0040C80E                 test    ebx, ebx
.text:0040C810                 setz    al
.text:0040C813                 add     esp, 10h
.text:0040C816                 pop     ebx
.text:0040C817                 dec     eax
.text:0040C818                 and     eax, edi
.text:0040C81A                 pop     esi
.text:0040C81B                 pop     edi
.text:0040C81C                 retn
.text:0040C81D ; ---------------------------------------------------------------------------
.text:0040C81D
.text:0040C81D loc_40C81D:                             ; CODE XREF: sub_40C78F+2F↑j
.text:0040C81D                 mov     [esp+1Ch+Mode], offset sub_40C78F ; Mode
.text:0040C825                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040C828                 call    fopen
.text:0040C82D                 test    eax, eax
.text:0040C82F                 mov     edi, eax
.text:0040C831                 jnz     short loc_40C7C0
.text:0040C833                 call    sub_40CB00
.text:0040C838                 mov     edi, eax
.text:0040C83A                 jmp     short loc_40C7C0
.text:0040C83A sub_40C78F      endp
.text:0040C83A
.text:0040C83A ; ---------------------------------------------------------------------------
.text:0040C83C                 align 10h
.text:0040C840                 sub     esp, 0Ch
.text:0040C843                 mov     eax, [esp+10h]
.text:0040C847                 test    eax, eax
.text:0040C849                 jz      short loc_40C853
.text:0040C84B                 mov     [esp], eax
.text:0040C84E                 call    fclose
.text:0040C853
.text:0040C853 loc_40C853:                             ; CODE XREF: .text:0040C849↑j
.text:0040C853                 call    GetProcessHeap
.text:0040C858                 mov     [esp], eax
.text:0040C85B                 mov     ecx, off_410084 ; "notset"
.text:0040C861                 mov     dword ptr [esp+4], 0
.text:0040C869                 mov     [esp+8], ecx
.text:0040C86D                 call    HeapFree
.text:0040C872                 mov     edx, off_410080 ; "notset"
.text:0040C878                 sub     esp, 0Ch
.text:0040C87B                 mov     eax, 1
.text:0040C880                 mov     off_410084, edx ; "notset"
.text:0040C886                 add     esp, 0Ch
.text:0040C889                 retn
.text:0040C889 ; ---------------------------------------------------------------------------
.text:0040C88A                 align 10h
.text:0040C890                 push    edi
.text:0040C891                 push    esi
.text:0040C892                 push    ebx
.text:0040C893                 sub     esp, 10h
.text:0040C896                 mov     edi, [esp+24h]
.text:0040C89A                 mov     [esp], edi
.text:0040C89D                 call    strlen
.text:0040C8A2                 mov     edx, [esp+20h]
.text:0040C8A6                 mov     esi, eax
.text:0040C8A8                 mov     ebx, [edx+0Ch]
.text:0040C8AB                 nop
.text:0040C8AC                 lea     esi, [esi+0]
.text:0040C8B0
.text:0040C8B0 loc_40C8B0:                             ; CODE XREF: .text:0040C8E1↓j
.text:0040C8B0                 mov     [esp+4], edi
.text:0040C8B4                 mov     [esp], ebx
.text:0040C8B7                 call    strstr
.text:0040C8BC                 test    eax, eax
.text:0040C8BE                 jz      short loc_40C8E3
.text:0040C8C0                 cmp     eax, ebx
.text:0040C8C2                 jz      short loc_40C8E5
.text:0040C8C4                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040C8C8                 jz      short loc_40C8F0
.text:0040C8CA
.text:0040C8CA loc_40C8CA:                             ; CODE XREF: .text:0040C900↓j
.text:0040C8CA                 mov     [esp], ebx
.text:0040C8CD                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040C8D5                 call    strchr
.text:0040C8DA                 test    eax, eax
.text:0040C8DC                 mov     ebx, eax
.text:0040C8DE                 jz      short loc_40C8E3
.text:0040C8E0                 inc     ebx
.text:0040C8E1                 jmp     short loc_40C8B0
.text:0040C8E3 ; ---------------------------------------------------------------------------
.text:0040C8E3
.text:0040C8E3 loc_40C8E3:                             ; CODE XREF: .text:0040C8BE↑j
.text:0040C8E3                                         ; .text:0040C8DE↑j
.text:0040C8E3                 xor     eax, eax
.text:0040C8E5
.text:0040C8E5 loc_40C8E5:                             ; CODE XREF: .text:0040C8C2↑j
.text:0040C8E5                                         ; .text:0040C8F6↓j ...
.text:0040C8E5                 add     esp, 10h
.text:0040C8E8                 pop     ebx
.text:0040C8E9                 pop     esi
.text:0040C8EA                 pop     edi
.text:0040C8EB                 retn
.text:0040C8EB ; ---------------------------------------------------------------------------
.text:0040C8EC                 align 10h
.text:0040C8F0
.text:0040C8F0 loc_40C8F0:                             ; CODE XREF: .text:0040C8C8↑j
.text:0040C8F0                 movzx   edx, byte ptr [esi+eax]
.text:0040C8F4                 test    dl, dl
.text:0040C8F6                 jz      short loc_40C8E5
.text:0040C8F8                 cmp     dl, 3Dh ; '='
.text:0040C8FB                 jz      short loc_40C8E5
.text:0040C8FD                 cmp     dl, 2Ch ; ','
.text:0040C900                 jnz     short loc_40C8CA
.text:0040C902                 jmp     short loc_40C8E5
.text:0040C902 ; ---------------------------------------------------------------------------
.text:0040C904                 align 10h
.text:0040C910 ; const char aFxstat64BadFil[]
.text:0040C910 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:0040C910                                         ; DATA XREF: sub_40C940+7B↓o
.text:0040C934                 align 10h
.text:0040C940
.text:0040C940 ; =============== S U B R O U T I N E =======================================
.text:0040C940
.text:0040C940
.text:0040C940 ; int __cdecl sub_40C940(HANDLE hNamedPipe, int, int)
.text:0040C940 sub_40C940      proc near               ; CODE XREF: .text:0040B279↑p
.text:0040C940
.text:0040C940 FileHandle      = dword ptr -1Ch
.text:0040C940 var_18          = dword ptr -18h
.text:0040C940 var_C           = dword ptr -0Ch
.text:0040C940 var_8           = dword ptr -8
.text:0040C940 var_4           = dword ptr -4
.text:0040C940 hNamedPipe      = dword ptr  4
.text:0040C940 arg_4           = dword ptr  8
.text:0040C940 arg_8           = dword ptr  0Ch
.text:0040C940
.text:0040C940                 sub     esp, 1Ch
.text:0040C943                 mov     edx, [esp+1Ch+arg_4]
.text:0040C947                 mov     [esp+1Ch+var_C], ebx
.text:0040C94B                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040C94F                 mov     [esp+1Ch+var_8], esi
.text:0040C953                 mov     esi, [esp+1Ch+arg_8]
.text:0040C957                 test    ebx, ebx
.text:0040C959                 mov     [esp+1Ch+var_4], edi
.text:0040C95D                 jnz     short loc_40C997
.text:0040C95F                 test    edx, edx
.text:0040C961                 js      short loc_40C9B7
.text:0040C963                 test    esi, esi
.text:0040C965                 jz      short loc_40C997
.text:0040C967                 cld
.text:0040C968                 mov     eax, ebx
.text:0040C96A                 mov     edi, esi
.text:0040C96C                 mov     ecx, 18h
.text:0040C971                 rep stosd
.text:0040C973                 mov     [esp+1Ch+arg_4], esi ; int
.text:0040C977                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040C97A                 call    _get_osfhandle
.text:0040C97F                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:0040C983                 mov     ebx, [esp+1Ch+var_C]
.text:0040C987                 mov     esi, [esp+1Ch+var_8]
.text:0040C98B                 mov     edi, [esp+1Ch+var_4]
.text:0040C98F                 add     esp, 1Ch
.text:0040C992                 jmp     sub_4089C0
.text:0040C997 ; ---------------------------------------------------------------------------
.text:0040C997
.text:0040C997 loc_40C997:                             ; CODE XREF: sub_40C940+1D↑j
.text:0040C997                                         ; sub_40C940+25↑j
.text:0040C997                 call    _errno
.text:0040C99C                 mov     dword ptr [eax], 16h
.text:0040C9A2
.text:0040C9A2 loc_40C9A2:                             ; CODE XREF: sub_40C940+92↓j
.text:0040C9A2                 mov     ebx, [esp+1Ch+var_C]
.text:0040C9A6                 mov     eax, 0FFFFFFFFh
.text:0040C9AB                 mov     esi, [esp+1Ch+var_8]
.text:0040C9AF                 mov     edi, [esp+1Ch+var_4]
.text:0040C9B3                 add     esp, 1Ch
.text:0040C9B6                 retn
.text:0040C9B7 ; ---------------------------------------------------------------------------
.text:0040C9B7
.text:0040C9B7 loc_40C9B7:                             ; CODE XREF: sub_40C940+21↑j
.text:0040C9B7                 mov     [esp+1Ch+var_18], edx
.text:0040C9BB                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:0040C9C2                 call    printf
.text:0040C9C7                 call    _errno
.text:0040C9CC                 mov     dword ptr [eax], 9
.text:0040C9D2                 jmp     short loc_40C9A2
.text:0040C9D2 sub_40C940      endp
.text:0040C9D2
.text:0040C9D2 ; ---------------------------------------------------------------------------
.text:0040C9D4                 db 1Ch dup(90h)
.text:0040C9F0
.text:0040C9F0 ; =============== S U B R O U T I N E =======================================
.text:0040C9F0
.text:0040C9F0 ; Attributes: noreturn
.text:0040C9F0
.text:0040C9F0 sub_40C9F0      proc near               ; CODE XREF: .text:0040C0F9↑p
.text:0040C9F0                                         ; sub_40C9F0↓j
.text:0040C9F0                 jmp     short sub_40C9F0
.text:0040C9F0 sub_40C9F0      endp
.text:0040C9F0
.text:0040C9F0 ; ---------------------------------------------------------------------------
.text:0040C9F2                 align 10h
.text:0040CA00
.text:0040CA00 ; =============== S U B R O U T I N E =======================================
.text:0040CA00
.text:0040CA00
.text:0040CA00 sub_40CA00      proc near               ; CODE XREF: .text:0040BE55↑p
.text:0040CA00
.text:0040CA00 FileHandle      = dword ptr -1Ch
.text:0040CA00 dwFileOffsetLow = dword ptr -18h
.text:0040CA00 dwFileOffsetHigh= dword ptr -14h
.text:0040CA00 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0040CA00 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0040CA00 var_8           = dword ptr -8
.text:0040CA00 var_4           = dword ptr -4
.text:0040CA00 arg_0           = dword ptr  4
.text:0040CA00
.text:0040CA00                 sub     esp, 1Ch
.text:0040CA03                 mov     edx, [esp+1Ch+arg_0]
.text:0040CA07                 mov     [esp+1Ch+var_4], esi
.text:0040CA0B                 mov     [esp+1Ch+var_8], ebx
.text:0040CA0F                 mov     ebx, [edx+10h]
.text:0040CA12                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040CA15                 call    _get_osfhandle
.text:0040CA1A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040CA1D                 mov     esi, eax
.text:0040CA1F                 call    _filelengthi64
.text:0040CA24                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0040CA28                 cdq
.text:0040CA29                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0040CA2C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040CA30                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0040CA38                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0040CA40                 call    UnlockFile
.text:0040CA45                 sub     esp, 14h
.text:0040CA48                 mov     ebx, [esp+1Ch+var_8]
.text:0040CA4C                 mov     esi, [esp+1Ch+var_4]
.text:0040CA50                 add     esp, 1Ch
.text:0040CA53                 retn
.text:0040CA53 sub_40CA00      endp
.text:0040CA53
.text:0040CA53 ; ---------------------------------------------------------------------------
.text:0040CA54                 align 10h
.text:0040CA60
.text:0040CA60 ; =============== S U B R O U T I N E =======================================
.text:0040CA60
.text:0040CA60
.text:0040CA60 ; int __cdecl sub_40CA60(int, char *Control)
.text:0040CA60 sub_40CA60      proc near               ; CODE XREF: .text:0040BD16↑p
.text:0040CA60                                         ; .text:0040BD66↑p ...
.text:0040CA60
.text:0040CA60 Str             = dword ptr -1Ch
.text:0040CA60 Val             = dword ptr -18h
.text:0040CA60 var_8           = dword ptr -8
.text:0040CA60 var_4           = dword ptr -4
.text:0040CA60 arg_0           = dword ptr  4
.text:0040CA60 Control         = dword ptr  8
.text:0040CA60
.text:0040CA60                 sub     esp, 1Ch
.text:0040CA63                 xor     eax, eax
.text:0040CA65                 mov     edx, [esp+1Ch+Control]
.text:0040CA69                 mov     [esp+1Ch+var_4], esi
.text:0040CA6D                 mov     esi, [esp+1Ch+arg_0]
.text:0040CA71                 mov     [esp+1Ch+var_8], ebx
.text:0040CA75                 mov     ebx, [esi]
.text:0040CA77                 test    ebx, ebx
.text:0040CA79                 jz      short loc_40CAA8
.text:0040CA7B                 movzx   eax, byte ptr [edx]
.text:0040CA7E                 test    al, al
.text:0040CA80                 jz      short loc_40CAA0
.text:0040CA82                 cmp     byte ptr [edx+1], 0
.text:0040CA86                 jnz     short loc_40CAE0
.text:0040CA88                 movzx   ecx, byte ptr [ebx]
.text:0040CA8B                 mov     edx, ebx
.text:0040CA8D                 cmp     cl, al
.text:0040CA8F                 jz      short loc_40CAD2
.text:0040CA91                 test    cl, cl
.text:0040CA93                 jnz     short loc_40CAB4
.text:0040CA95                 lea     esi, [esi+0]
.text:0040CA99                 lea     edi, [edi+0]
.text:0040CAA0
.text:0040CAA0 loc_40CAA0:                             ; CODE XREF: sub_40CA60+20↑j
.text:0040CAA0                                         ; sub_40CA60+74↓j
.text:0040CAA0                 mov     dword ptr [esi], 0
.text:0040CAA6
.text:0040CAA6 loc_40CAA6:                             ; CODE XREF: sub_40CA60+7C↓j
.text:0040CAA6                 mov     eax, ebx
.text:0040CAA8
.text:0040CAA8 loc_40CAA8:                             ; CODE XREF: sub_40CA60+19↑j
.text:0040CAA8                 mov     ebx, [esp+1Ch+var_8]
.text:0040CAAC                 mov     esi, [esp+1Ch+var_4]
.text:0040CAB0                 add     esp, 1Ch
.text:0040CAB3                 retn
.text:0040CAB4 ; ---------------------------------------------------------------------------
.text:0040CAB4
.text:0040CAB4 loc_40CAB4:                             ; CODE XREF: sub_40CA60+33↑j
.text:0040CAB4                 movsx   edx, al
.text:0040CAB7                 mov     [esp+1Ch+Val], edx ; Val
.text:0040CABB                 lea     edx, [ebx+1]
.text:0040CABE                 mov     [esp+1Ch+Str], edx ; Str
.text:0040CAC1                 call    strchr
.text:0040CAC6                 lea     esi, [esi+0]
.text:0040CAC9                 lea     edi, [edi+0]
.text:0040CAD0
.text:0040CAD0 loc_40CAD0:                             ; CODE XREF: sub_40CA60+8C↓j
.text:0040CAD0                 mov     edx, eax
.text:0040CAD2
.text:0040CAD2 loc_40CAD2:                             ; CODE XREF: sub_40CA60+2F↑j
.text:0040CAD2                 test    edx, edx
.text:0040CAD4                 jz      short loc_40CAA0
.text:0040CAD6                 mov     byte ptr [edx], 0
.text:0040CAD9                 inc     edx
.text:0040CADA                 mov     [esi], edx
.text:0040CADC                 jmp     short loc_40CAA6
.text:0040CADC ; ---------------------------------------------------------------------------
.text:0040CADE                 align 10h
.text:0040CAE0
.text:0040CAE0 loc_40CAE0:                             ; CODE XREF: sub_40CA60+26↑j
.text:0040CAE0                 mov     [esp+1Ch+Val], edx ; Control
.text:0040CAE4                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040CAE7                 call    strpbrk
.text:0040CAEC                 jmp     short loc_40CAD0
.text:0040CAEC sub_40CA60      endp
.text:0040CAEC
.text:0040CAEC ; ---------------------------------------------------------------------------
.text:0040CAEE                 align 10h
.text:0040CAF0 ; const char aTmpf[]
.text:0040CAF0 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40CB00+20↓o
.text:0040CAF5 ; const char aWBd[]
.text:0040CAF5 aWBd            db 'w+bD',0             ; DATA XREF: sub_40CB00+5E↓o
.text:0040CAFA                 align 10h
.text:0040CB00
.text:0040CB00 ; =============== S U B R O U T I N E =======================================
.text:0040CB00
.text:0040CB00
.text:0040CB00 sub_40CB00      proc near               ; CODE XREF: sub_40C78F+A4↑p
.text:0040CB00
.text:0040CB00 FileHandle      = dword ptr -13Ch
.text:0040CB00 Format          = dword ptr -138h
.text:0040CB00 var_134         = dword ptr -134h
.text:0040CB00 var_130         = dword ptr -130h
.text:0040CB00 var_12C         = dword ptr -12Ch
.text:0040CB00 FileName        = byte ptr -11Ch
.text:0040CB00 var_8           = dword ptr -8
.text:0040CB00 var_4           = dword ptr -4
.text:0040CB00
.text:0040CB00                 sub     esp, 13Ch
.text:0040CB06                 mov     [esp+13Ch+var_8], ebx
.text:0040CB0D                 lea     ebx, [esp+13Ch+FileName]
.text:0040CB11                 mov     [esp+13Ch+var_4], esi
.text:0040CB18                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040CB20                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040CB28                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040CB30                 mov     [esp+13Ch+Format], 104h ; int
.text:0040CB38                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040CB3B                 call    sub_40CBD0
.text:0040CB40                 xor     edx, edx
.text:0040CB42                 test    eax, eax
.text:0040CB44                 jnz     short loc_40CB76
.text:0040CB46                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040CB49                 mov     [esp+13Ch+Format], 0 ; int
.text:0040CB51                 call    sub_40CF50
.text:0040CB56                 xor     edx, edx
.text:0040CB58                 mov     ebx, eax
.text:0040CB5A                 test    eax, eax
.text:0040CB5C                 js      short loc_40CB76
.text:0040CB5E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040CB66                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040CB69                 call    _fdopen
.text:0040CB6E                 test    eax, eax
.text:0040CB70                 mov     esi, eax
.text:0040CB72                 jz      short loc_40CB8D
.text:0040CB74
.text:0040CB74 loc_40CB74:                             ; CODE XREF: sub_40CB00+95↓j
.text:0040CB74                 mov     edx, esi
.text:0040CB76
.text:0040CB76 loc_40CB76:                             ; CODE XREF: sub_40CB00+44↑j
.text:0040CB76                                         ; sub_40CB00+5C↑j
.text:0040CB76                 mov     ebx, [esp+13Ch+var_8]
.text:0040CB7D                 mov     eax, edx
.text:0040CB7F                 mov     esi, [esp+13Ch+var_4]
.text:0040CB86                 add     esp, 13Ch
.text:0040CB8C                 retn
.text:0040CB8D ; ---------------------------------------------------------------------------
.text:0040CB8D
.text:0040CB8D loc_40CB8D:                             ; CODE XREF: sub_40CB00+72↑j
.text:0040CB8D                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040CB90                 call    _close_0
.text:0040CB95                 jmp     short loc_40CB74
.text:0040CB95 sub_40CB00      endp
.text:0040CB95
.text:0040CB95 ; ---------------------------------------------------------------------------
.text:0040CB97                 align 10h
.text:0040CBA0 aFile           db 'file',0             ; DATA XREF: sub_40CBD0:loc_40CBFC↓o
.text:0040CBA5 ; const char aSSxxxxxx[]
.text:0040CBA5 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_40CBD0+9B↓o
.text:0040CBB5 ; const char aTemp[]
.text:0040CBB5 aTemp           db 'TEMP',0             ; DATA XREF: sub_40CBD0:loc_40CCB2↓o
.text:0040CBB5                                         ; sub_40CBD0:loc_40CCF2↓o ...
.text:0040CBBA ; const char aTmp[]
.text:0040CBBA aTmp            db '/tmp',0             ; DATA XREF: sub_40CBD0+12F↓o
.text:0040CBBA                                         ; sub_40CBD0+141↓o ...
.text:0040CBBF aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_40CBD0:loc_40CD70↓o
.text:0040CBC6 aTmp_0          db 'TMP',0              ; DATA XREF: sub_40CBD0:loc_40CE00↓o
.text:0040CBCA                 align 10h
.text:0040CBD0
.text:0040CBD0 ; =============== S U B R O U T I N E =======================================
.text:0040CBD0
.text:0040CBD0
.text:0040CBD0 ; int __cdecl sub_40CBD0(char *Buffer, int, char *, char *, int)
.text:0040CBD0 sub_40CBD0      proc near               ; CODE XREF: sub_40CB00+3B↑p
.text:0040CBD0
.text:0040CBD0 Str             = dword ptr -1BCh
.text:0040CBD0 Format          = dword ptr -1B8h
.text:0040CBD0 var_1B4         = dword ptr -1B4h
.text:0040CBD0 var_1B0         = dword ptr -1B0h
.text:0040CBD0 var_1AC         = dword ptr -1ACh
.text:0040CBD0 var_1A8         = dword ptr -1A8h
.text:0040CBD0 var_19C         = dword ptr -19Ch
.text:0040CBD0 var_13C         = dword ptr -13Ch
.text:0040CBD0 var_DC          = dword ptr -0DCh
.text:0040CBD0 var_7C          = dword ptr -7Ch
.text:0040CBD0 Buffer          = dword ptr  4
.text:0040CBD0 arg_4           = dword ptr  8
.text:0040CBD0 arg_8           = dword ptr  0Ch
.text:0040CBD0 arg_C           = dword ptr  10h
.text:0040CBD0 arg_10          = dword ptr  14h
.text:0040CBD0
.text:0040CBD0                 push    ebp
.text:0040CBD1                 push    edi
.text:0040CBD2                 push    esi
.text:0040CBD3                 push    ebx
.text:0040CBD4                 sub     esp, 1ACh
.text:0040CBDA                 mov     eax, [esp+1BCh+arg_C]
.text:0040CBE1                 mov     esi, [esp+1BCh+arg_8]
.text:0040CBE8                 test    eax, eax
.text:0040CBEA                 jz      short loc_40CBFC
.text:0040CBEC                 mov     edx, [esp+1BCh+arg_C]
.text:0040CBF3                 cmp     byte ptr [edx], 0
.text:0040CBF6                 jnz     loc_40CE30
.text:0040CBFC
.text:0040CBFC loc_40CBFC:                             ; CODE XREF: sub_40CBD0+1A↑j
.text:0040CBFC                 mov     eax, offset aFile ; "file"
.text:0040CC01                 mov     ebp, 4
.text:0040CC06                 mov     [esp+1BCh+arg_C], eax
.text:0040CC0D
.text:0040CC0D loc_40CC0D:                             ; CODE XREF: sub_40CBD0+274↓j
.text:0040CC0D                                         ; sub_40CBD0+27F↓j
.text:0040CC0D                 mov     ebx, [esp+1BCh+arg_10]
.text:0040CC14                 test    ebx, ebx
.text:0040CC16                 jnz     loc_40CD70
.text:0040CC1C
.text:0040CC1C loc_40CC1C:                             ; CODE XREF: sub_40CBD0+21C↓j
.text:0040CC1C                                         ; sub_40CBD0+224↓j ...
.text:0040CC1C                 test    esi, esi
.text:0040CC1E                 jz      loc_40CCB2
.text:0040CC24
.text:0040CC24 loc_40CC24:                             ; CODE XREF: sub_40CBD0+176↓j
.text:0040CC24                                         ; sub_40CBD0+19A↓j
.text:0040CC24                 mov     [esp+1BCh+Str], esi ; Str
.text:0040CC27                 call    strlen
.text:0040CC2C                 test    eax, eax
.text:0040CC2E                 mov     edx, eax
.text:0040CC30                 jz      short loc_40CC40
.text:0040CC32                 movzx   eax, byte ptr [eax+esi-1]
.text:0040CC37                 cmp     al, 2Fh ; '/'
.text:0040CC39                 jz      short loc_40CCA0
.text:0040CC3B                 cmp     al, 5Ch ; '\'
.text:0040CC3D                 jz      short loc_40CCA0
.text:0040CC3F                 nop
.text:0040CC40
.text:0040CC40 loc_40CC40:                             ; CODE XREF: sub_40CBD0+60↑j
.text:0040CC40                                         ; sub_40CBD0+D1↓j ...
.text:0040CC40                 lea     edi, [ebp+edx+8]
.text:0040CC44                 cmp     [esp+1BCh+arg_4], edi
.text:0040CC4B                 jb      short loc_40CC88
.text:0040CC4D                 mov     [esp+1BCh+var_1AC], ebp
.text:0040CC51                 mov     ecx, [esp+1BCh+arg_C]
.text:0040CC58                 mov     ebp, [esp+1BCh+Buffer]
.text:0040CC5F                 mov     [esp+1BCh+var_1B0], esi
.text:0040CC63                 mov     [esp+1BCh+var_1A8], ecx
.text:0040CC67                 mov     [esp+1BCh+var_1B4], edx
.text:0040CC6B                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0040CC73                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0040CC76                 call    sprintf
.text:0040CC7B                 xor     eax, eax
.text:0040CC7D
.text:0040CC7D loc_40CC7D:                             ; CODE XREF: sub_40CBD0+C8↓j
.text:0040CC7D                 add     esp, 1ACh
.text:0040CC83                 pop     ebx
.text:0040CC84                 pop     esi
.text:0040CC85                 pop     edi
.text:0040CC86                 pop     ebp
.text:0040CC87                 retn
.text:0040CC88 ; ---------------------------------------------------------------------------
.text:0040CC88
.text:0040CC88 loc_40CC88:                             ; CODE XREF: sub_40CBD0+7B↑j
.text:0040CC88                 call    _errno
.text:0040CC8D                 mov     dword ptr [eax], 16h
.text:0040CC93
.text:0040CC93 loc_40CC93:                             ; CODE XREF: sub_40CBD0+187↓j
.text:0040CC93                 mov     eax, 0FFFFFFFFh
.text:0040CC98                 jmp     short loc_40CC7D
.text:0040CC98 ; ---------------------------------------------------------------------------
.text:0040CC9A                 align 10h
.text:0040CCA0
.text:0040CCA0 loc_40CCA0:                             ; CODE XREF: sub_40CBD0+69↑j
.text:0040CCA0                                         ; sub_40CBD0+6D↑j ...
.text:0040CCA0                 dec     edx
.text:0040CCA1                 jz      short loc_40CC40
.text:0040CCA3                 movzx   eax, byte ptr [edx+esi-1]
.text:0040CCA8                 cmp     al, 2Fh ; '/'
.text:0040CCAA                 jz      short loc_40CCA0
.text:0040CCAC                 cmp     al, 5Ch ; '\'
.text:0040CCAE                 jz      short loc_40CCA0
.text:0040CCB0                 jmp     short loc_40CC40
.text:0040CCB2 ; ---------------------------------------------------------------------------
.text:0040CCB2
.text:0040CCB2 loc_40CCB2:                             ; CODE XREF: sub_40CBD0+4E↑j
.text:0040CCB2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040CCB9                 lea     esi, [esp+1BCh+var_13C]
.text:0040CCC0                 call    getenv
.text:0040CCC5                 mov     [esp+1BCh+Format], eax ; char *
.text:0040CCC9                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0040CCCD                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040CCD4                 call    sub_407240
.text:0040CCD9                 test    eax, eax
.text:0040CCDB                 jnz     short loc_40CCF2
.text:0040CCDD                 mov     edi, [esp+1BCh+var_13C]
.text:0040CCE4                 and     edi, 0F000h
.text:0040CCEA                 cmp     edi, 4000h
.text:0040CCF0                 jz      short loc_40CD5C
.text:0040CCF2
.text:0040CCF2 loc_40CCF2:                             ; CODE XREF: sub_40CBD0+10B↑j
.text:0040CCF2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040CCF9                 call    getenv
.text:0040CCFE                 cld
.text:0040CCFF                 mov     edx, offset aTmp ; "/tmp"
.text:0040CD04                 mov     esi, eax
.text:0040CD06                 mov     ecx, 5
.text:0040CD0B                 mov     edi, edx
.text:0040CD0D                 repe cmpsb
.text:0040CD0F                 jz      short loc_40CD4C
.text:0040CD11                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0040CD19                 lea     ecx, [esp+1BCh+var_19C]
.text:0040CD1D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040CD21                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040CD28                 call    sub_407240
.text:0040CD2D                 test    eax, eax
.text:0040CD2F                 jnz     short loc_40CD4C
.text:0040CD31                 mov     ebx, [esp+1BCh+var_19C]
.text:0040CD35                 mov     esi, offset aTmp ; "/tmp"
.text:0040CD3A                 and     ebx, 0F000h
.text:0040CD40                 cmp     ebx, 4000h
.text:0040CD46                 jz      loc_40CC24
.text:0040CD4C
.text:0040CD4C loc_40CD4C:                             ; CODE XREF: sub_40CBD0+13F↑j
.text:0040CD4C                                         ; sub_40CBD0+15F↑j
.text:0040CD4C                 call    _errno
.text:0040CD51                 mov     dword ptr [eax], 2
.text:0040CD57                 jmp     loc_40CC93
.text:0040CD5C ; ---------------------------------------------------------------------------
.text:0040CD5C
.text:0040CD5C loc_40CD5C:                             ; CODE XREF: sub_40CBD0+120↑j
.text:0040CD5C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040CD63                 call    getenv
.text:0040CD68                 mov     esi, eax
.text:0040CD6A                 jmp     loc_40CC24
.text:0040CD6A ; ---------------------------------------------------------------------------
.text:0040CD6F                 align 10h
.text:0040CD70
.text:0040CD70 loc_40CD70:                             ; CODE XREF: sub_40CBD0+46↑j
.text:0040CD70                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0040CD77                 call    sub_40D3E0
.text:0040CD7C                 test    eax, eax
.text:0040CD7E                 mov     ebx, eax
.text:0040CD80                 jz      short loc_40CE00
.text:0040CD82
.text:0040CD82 loc_40CD82:                             ; CODE XREF: sub_40CBD0+240↓j
.text:0040CD82                                         ; sub_40CBD0+256↓j
.text:0040CD82                 mov     [esp+1BCh+Format], ebx ; char *
.text:0040CD86                 lea     edi, [esp+1BCh+var_7C]
.text:0040CD8D                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0040CD91                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040CD98                 call    sub_407240
.text:0040CD9D                 test    eax, eax
.text:0040CD9F                 jnz     short loc_40CDB6
.text:0040CDA1                 mov     edx, [esp+1BCh+var_7C]
.text:0040CDA8                 and     edx, 0F000h
.text:0040CDAE                 cmp     edx, 4000h
.text:0040CDB4                 jz      short loc_40CDF9
.text:0040CDB6
.text:0040CDB6 loc_40CDB6:                             ; CODE XREF: sub_40CBD0+1CF↑j
.text:0040CDB6                                         ; sub_40CBD0+25C↓j
.text:0040CDB6                 test    esi, esi
.text:0040CDB8                 jz      short loc_40CDF2
.text:0040CDBA                 mov     [esp+1BCh+Format], esi ; char *
.text:0040CDBE                 lea     ecx, [esp+1BCh+var_DC]
.text:0040CDC5                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040CDC9                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040CDD0                 call    sub_407240
.text:0040CDD5                 test    eax, eax
.text:0040CDD7                 jnz     short loc_40CDF2
.text:0040CDD9                 mov     ebx, [esp+1BCh+var_DC]
.text:0040CDE0                 and     ebx, 0F000h
.text:0040CDE6                 cmp     ebx, 4000h
.text:0040CDEC                 jz      loc_40CC1C
.text:0040CDF2
.text:0040CDF2 loc_40CDF2:                             ; CODE XREF: sub_40CBD0+1E8↑j
.text:0040CDF2                                         ; sub_40CBD0+207↑j
.text:0040CDF2                 xor     esi, esi
.text:0040CDF4                 jmp     loc_40CC1C
.text:0040CDF9 ; ---------------------------------------------------------------------------
.text:0040CDF9
.text:0040CDF9 loc_40CDF9:                             ; CODE XREF: sub_40CBD0+1E4↑j
.text:0040CDF9                 mov     esi, ebx
.text:0040CDFB                 jmp     loc_40CC1C
.text:0040CE00 ; ---------------------------------------------------------------------------
.text:0040CE00
.text:0040CE00 loc_40CE00:                             ; CODE XREF: sub_40CBD0+1B0↑j
.text:0040CE00                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0040CE07                 call    sub_40D3E0
.text:0040CE0C                 test    eax, eax
.text:0040CE0E                 mov     ebx, eax
.text:0040CE10                 jnz     loc_40CD82
.text:0040CE16                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040CE1D                 call    sub_40D3E0
.text:0040CE22                 test    eax, eax
.text:0040CE24                 mov     ebx, eax
.text:0040CE26                 jnz     loc_40CD82
.text:0040CE2C                 jmp     short loc_40CDB6
.text:0040CE2C ; ---------------------------------------------------------------------------
.text:0040CE2E                 align 10h
.text:0040CE30
.text:0040CE30 loc_40CE30:                             ; CODE XREF: sub_40CBD0+26↑j
.text:0040CE30                 mov     ecx, [esp+1BCh+arg_C]
.text:0040CE37                 mov     [esp+1BCh+Str], ecx ; Str
.text:0040CE3A                 call    strlen
.text:0040CE3F                 cmp     eax, 5
.text:0040CE42                 mov     ebp, eax
.text:0040CE44                 jbe     loc_40CC0D
.text:0040CE4A                 mov     ebp, 5
.text:0040CE4F                 jmp     loc_40CC0D
.text:0040CE4F sub_40CBD0      endp
.text:0040CE4F
.text:0040CE4F ; ---------------------------------------------------------------------------
.text:0040CE54                 align 10h
.text:0040CE60 byte_40CE60     db 61h                  ; DATA XREF: sub_40CF50+DC↓r
.text:0040CE60                                         ; sub_40CF50+122↓r ...
.text:0040CE61 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0040CE9F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_40CF50+39↓o
.text:0040CEA6                 align 20h
.text:0040CEC0 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0040CEC0                                         ; DATA XREF: sub_40CF50:loc_40D1C8↓o
.text:0040CEDF                 align 10h
.text:0040CEE0 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0040CEE0                                         ; DATA XREF: sub_40CF50+405↓o
.text:0040CF0B                 align 20h
.text:0040CF20 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0040CF20                                         ; DATA XREF: sub_40CF50+40D↓o
.text:0040CF43                 align 10h
.text:0040CF50
.text:0040CF50 ; =============== S U B R O U T I N E =======================================
.text:0040CF50
.text:0040CF50
.text:0040CF50 ; int __cdecl sub_40CF50(char *FileName, int)
.text:0040CF50 sub_40CF50      proc near               ; CODE XREF: sub_40CB00+51↑p
.text:0040CF50
.text:0040CF50 Str             = dword ptr -9Ch
.text:0040CF50 OpenFlag        = dword ptr -98h
.text:0040CF50 var_94          = dword ptr -94h
.text:0040CF50 var_90          = dword ptr -90h
.text:0040CF50 var_8C          = dword ptr -8Ch
.text:0040CF50 var_88          = dword ptr -88h
.text:0040CF50 var_84          = dword ptr -84h
.text:0040CF50 var_80          = dword ptr -80h
.text:0040CF50 var_7C          = dword ptr -7Ch
.text:0040CF50 FileName        = dword ptr  4
.text:0040CF50 arg_4           = dword ptr  8
.text:0040CF50
.text:0040CF50                 push    ebp
.text:0040CF51                 push    edi
.text:0040CF52                 push    esi
.text:0040CF53                 push    ebx
.text:0040CF54                 sub     esp, 8Ch
.text:0040CF5A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0040CF62                 call    _errno
.text:0040CF67                 mov     edx, [eax]
.text:0040CF69                 mov     [esp+9Ch+var_8C], edx
.text:0040CF6D                 mov     edx, [esp+9Ch+FileName]
.text:0040CF74                 mov     [esp+9Ch+Str], edx ; Str
.text:0040CF77                 call    strlen
.text:0040CF7C                 cmp     eax, 5
.text:0040CF7F                 jle     short loc_40CF9D
.text:0040CF81                 cld
.text:0040CF82                 mov     ecx, [esp+9Ch+FileName]
.text:0040CF89                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0040CF8E                 lea     esi, [eax+ecx-6]
.text:0040CF92                 mov     ecx, 7
.text:0040CF97                 mov     ebp, esi
.text:0040CF99                 repe cmpsb
.text:0040CF9B                 jz      short loc_40CFB8
.text:0040CF9D
.text:0040CF9D loc_40CF9D:                             ; CODE XREF: sub_40CF50+2F↑j
.text:0040CF9D                 call    _errno
.text:0040CFA2                 mov     dword ptr [eax], 16h
.text:0040CFA8
.text:0040CFA8 loc_40CFA8:                             ; CODE XREF: sub_40CF50+295↓j
.text:0040CFA8                                         ; sub_40CF50+2D8↓j ...
.text:0040CFA8                 mov     eax, 0FFFFFFFFh
.text:0040CFAD
.text:0040CFAD loc_40CFAD:                             ; CODE XREF: sub_40CF50+2EF↓j
.text:0040CFAD                                         ; sub_40CF50+332↓j
.text:0040CFAD                 add     esp, 8Ch
.text:0040CFB3                 pop     ebx
.text:0040CFB4                 pop     esi
.text:0040CFB5                 pop     edi
.text:0040CFB6                 pop     ebp
.text:0040CFB7                 retn
.text:0040CFB8 ; ---------------------------------------------------------------------------
.text:0040CFB8
.text:0040CFB8 loc_40CFB8:                             ; CODE XREF: sub_40CF50+4B↑j
.text:0040CFB8                 mov     ecx, ds:dword_4114A4
.text:0040CFBE                 mov     edi, ds:dword_4114A0
.text:0040CFC4                 mov     eax, ecx
.text:0040CFC6                 or      eax, edi
.text:0040CFC8                 jz      loc_40D303
.text:0040CFCE
.text:0040CFCE loc_40CFCE:                             ; CODE XREF: sub_40CF50+3F8↓j
.text:0040CFCE                 rdtsc
.text:0040CFD0                 mov     edi, edx
.text:0040CFD2                 mov     esi, eax
.text:0040CFD4                 call    _getpid
.text:0040CFD9                 mov     ebx, eax
.text:0040CFDB                 mov     edx, esi
.text:0040CFDD                 sar     ebx, 1Fh
.text:0040CFE0                 xor     edx, eax
.text:0040CFE2                 mov     ecx, edi
.text:0040CFE4                 xor     ecx, ebx
.text:0040CFE6                 mov     ebx, edx
.text:0040CFE8                 mov     esi, ecx
.text:0040CFEA                 add     ebx, ds:dword_4114A0
.text:0040CFF0                 adc     esi, ds:dword_4114A4
.text:0040CFF6                 xor     edi, edi
.text:0040CFF8                 mov     ds:dword_4114A0, ebx
.text:0040CFFE                 mov     ds:dword_4114A4, esi
.text:0040D004                 lea     esi, [esi+0]
.text:0040D00A                 lea     edi, [edi+0]
.text:0040D010
.text:0040D010 loc_40D010:                             ; CODE XREF: sub_40CF50+2C7↓j
.text:0040D010                 mov     [esp+9Ch+Str], ebx
.text:0040D013                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D017                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D01F                 mov     [esp+9Ch+var_90], 0
.text:0040D027                 call    sub_40ECC0
.text:0040D02C                 movzx   ecx, ds:byte_40CE60[eax]
.text:0040D033                 mov     [ebp+0], cl
.text:0040D036                 mov     [esp+9Ch+Str], ebx
.text:0040D039                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D03D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D045                 mov     [esp+9Ch+var_90], 0
.text:0040D04D                 call    sub_40EBA0
.text:0040D052                 mov     [esp+9Ch+Str], eax
.text:0040D055                 mov     ebx, eax
.text:0040D057                 mov     esi, edx
.text:0040D059                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D061                 mov     [esp+9Ch+var_90], 0
.text:0040D069                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D06D                 call    sub_40ECC0
.text:0040D072                 movzx   edx, ds:byte_40CE60[eax]
.text:0040D079                 mov     [ebp+1], dl
.text:0040D07C                 mov     [esp+9Ch+Str], ebx
.text:0040D07F                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D083                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D08B                 mov     [esp+9Ch+var_90], 0
.text:0040D093                 call    sub_40EBA0
.text:0040D098                 mov     [esp+9Ch+Str], eax
.text:0040D09B                 mov     ebx, eax
.text:0040D09D                 mov     esi, edx
.text:0040D09F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D0A7                 mov     [esp+9Ch+var_90], 0
.text:0040D0AF                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D0B3                 call    sub_40ECC0
.text:0040D0B8                 movzx   ecx, ds:byte_40CE60[eax]
.text:0040D0BF                 mov     [ebp+2], cl
.text:0040D0C2                 mov     [esp+9Ch+Str], ebx
.text:0040D0C5                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D0C9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D0D1                 mov     [esp+9Ch+var_90], 0
.text:0040D0D9                 call    sub_40EBA0
.text:0040D0DE                 mov     [esp+9Ch+Str], eax
.text:0040D0E1                 mov     ebx, eax
.text:0040D0E3                 mov     esi, edx
.text:0040D0E5                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D0ED                 mov     [esp+9Ch+var_90], 0
.text:0040D0F5                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D0F9                 call    sub_40ECC0
.text:0040D0FE                 movzx   edx, ds:byte_40CE60[eax]
.text:0040D105                 mov     [ebp+3], dl
.text:0040D108                 mov     [esp+9Ch+Str], ebx
.text:0040D10B                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D10F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D117                 mov     [esp+9Ch+var_90], 0
.text:0040D11F                 call    sub_40EBA0
.text:0040D124                 mov     [esp+9Ch+Str], eax
.text:0040D127                 mov     ebx, eax
.text:0040D129                 mov     esi, edx
.text:0040D12B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D133                 mov     [esp+9Ch+var_90], 0
.text:0040D13B                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D13F                 call    sub_40ECC0
.text:0040D144                 movzx   ecx, ds:byte_40CE60[eax]
.text:0040D14B                 mov     [ebp+4], cl
.text:0040D14E                 mov     [esp+9Ch+Str], ebx
.text:0040D151                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D159                 mov     [esp+9Ch+var_90], 0
.text:0040D161                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D165                 call    sub_40EBA0
.text:0040D16A                 mov     [esp+9Ch+Str], eax
.text:0040D16D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D175                 mov     [esp+9Ch+var_90], 0
.text:0040D17D                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D181                 call    sub_40ECC0
.text:0040D186                 movzx   ebx, ds:byte_40CE60[eax]
.text:0040D18D                 mov     [ebp+5], bl
.text:0040D190                 cmp     [esp+9Ch+arg_4], 1
.text:0040D198                 jz      loc_40D2E7
.text:0040D19E                 cmp     [esp+9Ch+arg_4], 1
.text:0040D1A6                 jle     loc_40D2B0
.text:0040D1AC                 cmp     [esp+9Ch+arg_4], 2
.text:0040D1B4                 jz      loc_40D287
.text:0040D1BA                 cmp     [esp+9Ch+arg_4], 3
.text:0040D1C2                 jz      loc_40D244
.text:0040D1C8
.text:0040D1C8 loc_40D1C8:                             ; CODE XREF: sub_40CF50+369↓j
.text:0040D1C8                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0040D1CD                 test    ebx, ebx
.text:0040D1CF                 jnz     loc_40D34D
.text:0040D1D5
.text:0040D1D5 loc_40D1D5:                             ; CODE XREF: sub_40CF50+354↓j
.text:0040D1D5                 mov     eax, [esp+9Ch+var_88]
.text:0040D1D9                 test    eax, eax
.text:0040D1DB                 jns     short loc_40D230
.text:0040D1DD                 call    _errno
.text:0040D1E2                 cmp     dword ptr [eax], 11h
.text:0040D1E5                 jnz     loc_40CFA8
.text:0040D1EB
.text:0040D1EB loc_40D1EB:                             ; CODE XREF: sub_40CF50+315↓j
.text:0040D1EB                 mov     edx, ds:dword_4114A0
.text:0040D1F1                 mov     ecx, ds:dword_4114A4
.text:0040D1F7                 add     edx, 1E61h
.text:0040D1FD                 adc     ecx, 0
.text:0040D200                 mov     ebx, edx
.text:0040D202                 inc     edi
.text:0040D203                 mov     ds:dword_4114A0, edx
.text:0040D209                 cmp     edi, 3A2F8h
.text:0040D20F                 mov     esi, ecx
.text:0040D211                 mov     ds:dword_4114A4, ecx
.text:0040D217                 jb      loc_40D010
.text:0040D21D                 call    _errno
.text:0040D222                 mov     dword ptr [eax], 11h
.text:0040D228                 jmp     loc_40CFA8
.text:0040D228 ; ---------------------------------------------------------------------------
.text:0040D22D                 align 10h
.text:0040D230
.text:0040D230 loc_40D230:                             ; CODE XREF: sub_40CF50+28B↑j
.text:0040D230                 call    _errno
.text:0040D235                 mov     esi, [esp+9Ch+var_8C]
.text:0040D239                 mov     [eax], esi
.text:0040D23B                 mov     eax, [esp+9Ch+var_88]
.text:0040D23F                 jmp     loc_40CFAD
.text:0040D244 ; ---------------------------------------------------------------------------
.text:0040D244
.text:0040D244 loc_40D244:                             ; CODE XREF: sub_40CF50+272↑j
.text:0040D244                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0040D24B                 mov     ecx, [esp+9Ch+FileName]
.text:0040D252                 lea     esi, [esp+9Ch+var_7C]
.text:0040D256                 mov     [esp+9Ch+var_94], esi ; int
.text:0040D25A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0040D25E                 call    sub_407940
.text:0040D263                 test    eax, eax
.text:0040D265                 jns     short loc_40D1EB
.text:0040D267                 call    _errno
.text:0040D26C                 cmp     dword ptr [eax], 2
.text:0040D26F                 jnz     loc_40CFA8
.text:0040D275                 call    _errno
.text:0040D27A                 mov     ebx, [esp+9Ch+var_8C]
.text:0040D27E                 mov     [eax], ebx
.text:0040D280                 xor     eax, eax
.text:0040D282                 jmp     loc_40CFAD
.text:0040D287 ; ---------------------------------------------------------------------------
.text:0040D287
.text:0040D287 loc_40D287:                             ; CODE XREF: sub_40CF50+264↑j
.text:0040D287                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0040D28F                 mov     edx, [esp+9Ch+FileName]
.text:0040D296                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0040D299                 call    sub_407190
.text:0040D29E                 mov     esi, esi
.text:0040D2A0
.text:0040D2A0 loc_40D2A0:                             ; CODE XREF: sub_40CF50+395↓j
.text:0040D2A0                 mov     [esp+9Ch+var_88], eax
.text:0040D2A4                 jmp     loc_40D1D5
.text:0040D2A4 ; ---------------------------------------------------------------------------
.text:0040D2A9                 align 10h
.text:0040D2B0
.text:0040D2B0 loc_40D2B0:                             ; CODE XREF: sub_40CF50+256↑j
.text:0040D2B0                 mov     eax, [esp+9Ch+arg_4]
.text:0040D2B7                 test    eax, eax
.text:0040D2B9                 jnz     loc_40D1C8
.text:0040D2BF                 mov     [esp+9Ch+var_94], 180h
.text:0040D2C7                 mov     esi, [esp+9Ch+FileName]
.text:0040D2CE                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0040D2D6                 mov     [esp+9Ch+Str], esi ; FileName
.text:0040D2D9                 lea     esi, [esi+0]
.text:0040D2E0
.text:0040D2E0 loc_40D2E0:                             ; CODE XREF: sub_40CF50+3B1↓j
.text:0040D2E0                 call    _open_0
.text:0040D2E5                 jmp     short loc_40D2A0
.text:0040D2E7 ; ---------------------------------------------------------------------------
.text:0040D2E7
.text:0040D2E7 loc_40D2E7:                             ; CODE XREF: sub_40CF50+248↑j
.text:0040D2E7                 mov     [esp+9Ch+var_94], 180h
.text:0040D2EF                 mov     ebx, [esp+9Ch+FileName]
.text:0040D2F6                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0040D2FE                 mov     [esp+9Ch+Str], ebx
.text:0040D301                 jmp     short loc_40D2E0
.text:0040D303 ; ---------------------------------------------------------------------------
.text:0040D303
.text:0040D303 loc_40D303:                             ; CODE XREF: sub_40CF50+78↑j
.text:0040D303                 mov     [esp+9Ch+OpenFlag], 0
.text:0040D30B                 lea     ebx, [esp+9Ch+var_84]
.text:0040D30F                 mov     [esp+9Ch+Str], ebx
.text:0040D312                 call    sub_40D380
.text:0040D317                 mov     edi, [esp+9Ch+var_80]
.text:0040D31B                 mov     edx, [esp+9Ch+var_84]
.text:0040D31F                 mov     ecx, edi
.text:0040D321                 mov     ebx, edi
.text:0040D323                 shl     ecx, 10h
.text:0040D326                 sar     ebx, 1Fh
.text:0040D329                 shld    ebx, edi, 10h
.text:0040D32D                 mov     esi, edx
.text:0040D32F                 mov     edi, edx
.text:0040D331                 mov     edx, ecx
.text:0040D333                 sar     edi, 1Fh
.text:0040D336                 xor     edx, esi
.text:0040D338                 mov     ds:dword_4114A0, edx
.text:0040D33E                 mov     esi, ebx
.text:0040D340                 xor     esi, edi
.text:0040D342                 mov     ds:dword_4114A4, esi
.text:0040D348                 jmp     loc_40CFCE
.text:0040D34D ; ---------------------------------------------------------------------------
.text:0040D34D
.text:0040D34D loc_40D34D:                             ; CODE XREF: sub_40CF50+27F↑j
.text:0040D34D                 mov     [esp+9Ch+var_94], 151h
.text:0040D355                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0040D35D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0040D364                 call    _assert
.text:0040D364 sub_40CF50      endp
.text:0040D364
.text:0040D364 ; ---------------------------------------------------------------------------
.text:0040D369                 align 20h
.text:0040D380
.text:0040D380 ; =============== S U B R O U T I N E =======================================
.text:0040D380
.text:0040D380
.text:0040D380 sub_40D380      proc near               ; CODE XREF: sub_40CF50+3C2↑p
.text:0040D380
.text:0040D380 var_1C          = dword ptr -1Ch
.text:0040D380 var_18          = dword ptr -18h
.text:0040D380 var_C           = dword ptr -0Ch
.text:0040D380 var_8           = dword ptr -8
.text:0040D380 var_4           = dword ptr -4
.text:0040D380 arg_0           = dword ptr  4
.text:0040D380 arg_4           = dword ptr  8
.text:0040D380
.text:0040D380                 sub     esp, 1Ch
.text:0040D383                 mov     edx, [esp+1Ch+arg_4]
.text:0040D387                 mov     [esp+1Ch+var_4], ebx
.text:0040D38B                 mov     ebx, [esp+1Ch+arg_0]
.text:0040D38F                 mov     [esp+1Ch+var_18], edx
.text:0040D393                 lea     edx, [esp+1Ch+var_C]
.text:0040D397                 mov     [esp+1Ch+var_1C], edx
.text:0040D39A                 call    sub_40D400
.text:0040D39F                 test    eax, eax
.text:0040D3A1                 mov     edx, 0FFFFFFFFh
.text:0040D3A6                 jnz     short loc_40D3CA
.text:0040D3A8                 mov     ecx, [esp+1Ch+var_C]
.text:0040D3AC                 mov     edx, 10624DD3h
.text:0040D3B1                 mov     [ebx], ecx
.text:0040D3B3                 mov     ecx, [esp+1Ch+var_8]
.text:0040D3B7                 mov     eax, ecx
.text:0040D3B9                 imul    edx
.text:0040D3BB                 mov     eax, ecx
.text:0040D3BD                 sar     eax, 1Fh
.text:0040D3C0                 sar     edx, 6
.text:0040D3C3                 sub     edx, eax
.text:0040D3C5                 mov     [ebx+4], edx
.text:0040D3C8                 xor     edx, edx
.text:0040D3CA
.text:0040D3CA loc_40D3CA:                             ; CODE XREF: sub_40D380+26↑j
.text:0040D3CA                 mov     ebx, [esp+1Ch+var_4]
.text:0040D3CE                 mov     eax, edx
.text:0040D3D0                 add     esp, 1Ch
.text:0040D3D3                 retn
.text:0040D3D3 sub_40D380      endp
.text:0040D3D3
.text:0040D3D3 ; ---------------------------------------------------------------------------
.text:0040D3D4                 align 10h
.text:0040D3E0
.text:0040D3E0 ; =============== S U B R O U T I N E =======================================
.text:0040D3E0
.text:0040D3E0
.text:0040D3E0 sub_40D3E0      proc near               ; CODE XREF: sub_40CBD0+1A7↑p
.text:0040D3E0                                         ; sub_40CBD0+237↑p ...
.text:0040D3E0                 mov     edx, ds:dword_4114B0
.text:0040D3E6                 test    edx, edx
.text:0040D3E8                 jnz     short loc_40D3F0
.text:0040D3EA                 jmp     getenv
.text:0040D3EA ; ---------------------------------------------------------------------------
.text:0040D3EF                 align 10h
.text:0040D3F0
.text:0040D3F0 loc_40D3F0:                             ; CODE XREF: sub_40D3E0+8↑j
.text:0040D3F0                 xor     eax, eax
.text:0040D3F2                 retn
.text:0040D3F2 sub_40D3E0      endp
.text:0040D3F2
.text:0040D3F2 ; ---------------------------------------------------------------------------
.text:0040D3F3                 align 10h
.text:0040D400
.text:0040D400 ; =============== S U B R O U T I N E =======================================
.text:0040D400
.text:0040D400
.text:0040D400 sub_40D400      proc near               ; CODE XREF: sub_40D380+1A↑p
.text:0040D400
.text:0040D400 lpTimeZoneInformation= dword ptr -0DCh
.text:0040D400 var_D8          = dword ptr -0D8h
.text:0040D400 var_D4          = dword ptr -0D4h
.text:0040D400 var_D0          = dword ptr -0D0h
.text:0040D400 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0040D400 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0040D400 arg_0           = dword ptr  4
.text:0040D400 arg_4           = dword ptr  8
.text:0040D400
.text:0040D400                 push    edi
.text:0040D401                 push    esi
.text:0040D402                 push    ebx
.text:0040D403                 sub     esp, 0D0h
.text:0040D409                 mov     ebx, [esp+0DCh+arg_4]
.text:0040D410                 mov     edi, [esp+0DCh+arg_0]
.text:0040D417                 test    ebx, ebx
.text:0040D419                 jz      short loc_40D444
.text:0040D41B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040D41F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0040D422                 call    GetTimeZoneInformation
.text:0040D427                 sub     esp, 4
.text:0040D42A                 cmp     eax, 0FFFFFFFFh
.text:0040D42D                 jz      loc_40D4C5
.text:0040D433                 xor     ecx, ecx
.text:0040D435                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0040D439                 cmp     eax, 2
.text:0040D43C                 setz    cl
.text:0040D43F                 mov     [ebx], esi
.text:0040D441                 mov     [ebx+4], ecx
.text:0040D444
.text:0040D444 loc_40D444:                             ; CODE XREF: sub_40D400+19↑j
.text:0040D444                                         ; sub_40D400+E0↓j
.text:0040D444                 test    edi, edi
.text:0040D446                 jz      short loc_40D4B9
.text:0040D448                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0040D44C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0040D44F                 call    GetSystemTimeAsFileTime
.text:0040D454                 sub     esp, 4
.text:0040D457                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0040D45B                 mov     [esp+0DCh+var_D4], 989680h
.text:0040D463                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0040D467                 mov     [esp+0DCh+var_D0], 0
.text:0040D46F                 add     ebx, 2AC18000h
.text:0040D475                 adc     esi, 0FE624E21h
.text:0040D47B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0040D47F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040D482                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0040D486                 mov     [esp+0DCh+var_D8], esi
.text:0040D48A                 call    sub_40EBA0
.text:0040D48F                 mov     [edi], eax
.text:0040D491                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040D494                 mov     [esp+0DCh+var_D4], 989680h
.text:0040D49C                 mov     [esp+0DCh+var_D0], 0
.text:0040D4A4                 mov     [esp+0DCh+var_D8], esi
.text:0040D4A8                 call    sub_40ECC0
.text:0040D4AD                 lea     ebx, [eax+eax*4]
.text:0040D4B0                 lea     edx, [ebx+ebx*4]
.text:0040D4B3                 shl     edx, 2
.text:0040D4B6                 mov     [edi+4], edx
.text:0040D4B9
.text:0040D4B9 loc_40D4B9:                             ; CODE XREF: sub_40D400+46↑j
.text:0040D4B9                 add     esp, 0D0h
.text:0040D4BF                 xor     eax, eax
.text:0040D4C1                 pop     ebx
.text:0040D4C2                 pop     esi
.text:0040D4C3                 pop     edi
.text:0040D4C4                 retn
.text:0040D4C5 ; ---------------------------------------------------------------------------
.text:0040D4C5
.text:0040D4C5 loc_40D4C5:                             ; CODE XREF: sub_40D400+2D↑j
.text:0040D4C5                 mov     dword ptr [ebx], 0
.text:0040D4CB                 mov     dword ptr [ebx+4], 0
.text:0040D4D2                 call    sub_4076C0
.text:0040D4D7                 mov     esi, eax
.text:0040D4D9                 call    _errno
.text:0040D4DE                 mov     [eax], esi
.text:0040D4E0                 jmp     loc_40D444
.text:0040D4E0 sub_40D400      endp
.text:0040D4E0
.text:0040D4E0 ; ---------------------------------------------------------------------------
.text:0040D4E5                 align 10h
.text:0040D4F0                 sub     esp, 0Ch
.text:0040D4F3                 mov     [esp+4], ebx
.text:0040D4F7                 mov     [esp+8], esi
.text:0040D4FB                 xor     esi, esi
.text:0040D4FD                 call    sub_40D570
.text:0040D502                 mov     ebx, eax
.text:0040D504                 call    sub_40D560
.text:0040D509                 cmp     ebx, eax
.text:0040D50B                 jz      short loc_40D524
.text:0040D50D
.text:0040D50D loc_40D50D:                             ; CODE XREF: .text:0040D532↓j
.text:0040D50D                 mov     esi, 1
.text:0040D512
.text:0040D512 loc_40D512:                             ; CODE XREF: .text:0040D534↓j
.text:0040D512                 mov     ds:dword_4114B0, esi
.text:0040D518                 mov     ebx, [esp+4]
.text:0040D51C                 mov     esi, [esp+8]
.text:0040D520                 add     esp, 0Ch
.text:0040D523                 retn
.text:0040D524 ; ---------------------------------------------------------------------------
.text:0040D524
.text:0040D524 loc_40D524:                             ; CODE XREF: .text:0040D50B↑j
.text:0040D524                 call    sub_40D550
.text:0040D529                 mov     ebx, eax
.text:0040D52B                 call    sub_40D540
.text:0040D530                 cmp     ebx, eax
.text:0040D532                 jnz     short loc_40D50D
.text:0040D534                 jmp     short loc_40D512
.text:0040D534 ; ---------------------------------------------------------------------------
.text:0040D536                 align 10h
.text:0040D540
.text:0040D540 ; =============== S U B R O U T I N E =======================================
.text:0040D540
.text:0040D540
.text:0040D540 sub_40D540      proc near               ; CODE XREF: .text:0040D52B↑p
.text:0040D540                 xor     eax, eax
.text:0040D542                 retn
.text:0040D542 sub_40D540      endp
.text:0040D542
.text:0040D542 ; ---------------------------------------------------------------------------
.text:0040D543                 align 10h
.text:0040D550
.text:0040D550 ; =============== S U B R O U T I N E =======================================
.text:0040D550
.text:0040D550
.text:0040D550 sub_40D550      proc near               ; CODE XREF: .text:loc_40D524↑p
.text:0040D550                 xor     eax, eax
.text:0040D552                 retn
.text:0040D552 sub_40D550      endp
.text:0040D552
.text:0040D552 ; ---------------------------------------------------------------------------
.text:0040D553                 align 10h
.text:0040D560
.text:0040D560 ; =============== S U B R O U T I N E =======================================
.text:0040D560
.text:0040D560
.text:0040D560 sub_40D560      proc near               ; CODE XREF: .text:0040D504↑p
.text:0040D560                 xor     eax, eax
.text:0040D562                 retn
.text:0040D562 sub_40D560      endp
.text:0040D562
.text:0040D562 ; ---------------------------------------------------------------------------
.text:0040D563                 align 10h
.text:0040D570
.text:0040D570 ; =============== S U B R O U T I N E =======================================
.text:0040D570
.text:0040D570
.text:0040D570 sub_40D570      proc near               ; CODE XREF: .text:0040D4FD↑p
.text:0040D570                 xor     eax, eax
.text:0040D572                 retn
.text:0040D572 sub_40D570      endp
.text:0040D572
.text:0040D572 ; ---------------------------------------------------------------------------
.text:0040D573                 align 10h
.text:0040D580
.text:0040D580 ; =============== S U B R O U T I N E =======================================
.text:0040D580
.text:0040D580 ; Attributes: thunk
.text:0040D580
.text:0040D580 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:0040D580 OleInitialize   proc near               ; CODE XREF: sub_4076E0+1A↑p
.text:0040D580
.text:0040D580 pvReserved      = dword ptr  4
.text:0040D580
.text:0040D580                 jmp     ds:__imp_OleInitialize
.text:0040D580 OleInitialize   endp
.text:0040D580
.text:0040D580 ; ---------------------------------------------------------------------------
.text:0040D586                 align 10h
.text:0040D590
.text:0040D590 ; =============== S U B R O U T I N E =======================================
.text:0040D590
.text:0040D590 ; Attributes: thunk
.text:0040D590
.text:0040D590 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:0040D590 CoCreateInstance proc near              ; CODE XREF: sub_4076E0+52↑p
.text:0040D590
.text:0040D590 rclsid          = dword ptr  4
.text:0040D590 pUnkOuter       = dword ptr  8
.text:0040D590 dwClsContext    = dword ptr  0Ch
.text:0040D590 riid            = dword ptr  10h
.text:0040D590 ppv             = dword ptr  14h
.text:0040D590
.text:0040D590                 jmp     ds:__imp_CoCreateInstance
.text:0040D590 CoCreateInstance endp
.text:0040D590
.text:0040D590 ; ---------------------------------------------------------------------------
.text:0040D596                 align 10h
.text:0040D5A0
.text:0040D5A0 ; =============== S U B R O U T I N E =======================================
.text:0040D5A0
.text:0040D5A0 ; Attributes: thunk
.text:0040D5A0
.text:0040D5A0 ; void __stdcall CoUninitialize()
.text:0040D5A0 CoUninitialize  proc near               ; CODE XREF: sub_4076E0+14E↑p
.text:0040D5A0                                         ; sub_4076E0+16D↑p
.text:0040D5A0                 jmp     ds:__imp_CoUninitialize
.text:0040D5A0 CoUninitialize  endp
.text:0040D5A0
.text:0040D5A0 ; ---------------------------------------------------------------------------
.text:0040D5A6                 align 10h
.text:0040D5B0                 add     al, 0BAh ; 'º'
.text:0040D5B2                 retf
.text:0040D5B2 ; ---------------------------------------------------------------------------
.text:0040D5B3                 db 7Eh
.text:0040D5B4                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:0040D5B4                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:0040D5B4                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:0040D5B4                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:0040D5B4                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:0040D5B4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:0040D5B4                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:0040D5B4                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:0040D5B4                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:0040D5B4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:0040D5B4                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:0040D5B4                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:0040D5B4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:0040D5B4                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:0040D5B4                 dd 0C4426C00h, 330h, 0
.text:0040D6E8                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040D6E8                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:0040D6E8                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:0040D6E8                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:0040D738                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040D738                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:0040D738                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:0040D738                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:0040D738                 dd 0BA94B00h, 1Bh, 0
.text:0040D798                 dd 0C0h, 46000000h, 1Ch, 0
.text:0040D7A8                 dd 0C0h, 46000000h, 331h, 0
.text:0040D7B8                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040D7B8                 dd 312h, 0
.text:0040D7D8                 dd 0C0h, 46000000h, 30Eh, 0
.text:0040D7E8                 dd 0C0h, 46000000h, 30Dh, 0
.text:0040D7F8                 dd 0C0h, 46000000h, 311h, 0
.text:0040D808                 dd 0C0h, 46000000h, 313h, 0
.text:0040D818                 dd 0C0h, 46000000h, 30Ch, 0
.text:0040D828                 dd 0C0h, 46000000h, 30Fh, 0
.text:0040D838                 dd 0C0h, 46000000h, 310h, 0
.text:0040D848                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040D848                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:0040D878                 dd 0C0h, 46000000h, 319h, 0
.text:0040D888                 dd 0C0h, 46000000h, 315h, 0
.text:0040D898                 dd 0C0h, 46000000h, 316h, 0
.text:0040D8A8                 dd 0C0h, 46000000h, 315h, 0
.text:0040D8B8                 dd 0C0h, 46000000h, 2E005h, 0
.text:0040D8C8                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040D8C8                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0040D8C8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0040D908                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040D908                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0040D908                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0040D908                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0040D908                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0040D908                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0040D908                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0040D908                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0040D908                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0040D908                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0040D908                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0040D908                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040D908                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0040D908                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0040D908                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0040D908                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040D908                 dd 2DE81h, 0
.text:0040DA58                 dd 0C0h, 46000000h, 4 dup(0)
.text:0040DA70                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0040DA70                 dd 0
.text:0040DA88                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040DA88                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0040DA88                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0040DA88                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0040DA88                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040DA88                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0040DA88                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0040DA88                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0040DA88                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0040DA88                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0040DA88                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0040DA88                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0040DA88                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0040DA88                 dd 10Fh, 0
.text:0040DB98                 dd 0C0h, 46000000h, 125h, 0
.text:0040DBA8                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040DBA8                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0040DBA8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0040DBE8                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0040DBE8                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040DBE8                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0040DBE8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0040DBE8                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0040DC48                 dd 0C0h, 46000000h, 2E012h, 0
.text:0040DC58                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0040DC58                 dd 140h, 0
.text:0040DC78                 dd 0C0h, 46000000h, 1, 0
.text:0040DC88                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:0040DC88                 dd 71D3400h, 13Dh, 0
.text:0040DCA8                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040DCA8                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:0040DCA8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:0040DCA8                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:0040DCF8                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:0040DCF8                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040DCF8                 dd 20405h, 0
.text:0040DD28                 dd 0C0h, 46000000h, 2040Eh, 0
.text:0040DD38                 dd 0C0h, 46000000h, 20406h, 0
.text:0040DD48                 dd 0C0h, 46000000h, 2040Fh, 0
.text:0040DD58                 dd 0C0h, 46000000h, 110h, 0
.text:0040DD68                 dd 0C0h, 46000000h, 10Eh, 0
.text:0040DD78                 dd 0C0h, 46000000h, 123h, 0
.text:0040DD88                 dd 0C0h, 46000000h, 124h, 0
.text:0040DD98                 dd 0C0h, 46000000h, 13h, 0
.text:0040DDA8                 dd 0C0h, 46000000h, 14h, 0
.text:0040DDB8                 dd 0C0h, 46000000h, 15h, 0
.text:0040DDC8                 dd 0C0h, 46000000h, 20400h, 0
.text:0040DDD8                 dd 0C0h, 46000000h, 121h, 0
.text:0040DDE8                 dd 0C0h, 46000000h, 122h, 0
.text:0040DDF8                 dd 0C0h, 46000000h, 2E011h, 0
.text:0040DE08                 dd 0C0h, 46000000h, 108h, 0
.text:0040DE18                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:0040DE18                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040DE18                 dd 103h, 0
.text:0040DE48                 dd 0C0h, 46000000h, 2E000h, 0
.text:0040DE58                 dd 0C0h, 46000000h, 106h, 0
.text:0040DE68                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040DE68                 dd 107h, 0
.text:0040DE88                 dd 0C0h, 46000000h, 102h, 0
.text:0040DE98                 dd 0C0h, 46000000h, 104h, 0
.text:0040DEA8                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:0040DEA8                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:0040DEA8                 dd 105h, 0
.text:0040DED8                 dd 0C0h, 46000000h, 13Bh, 0
.text:0040DEE8                 dd 0C0h, 46000000h, 139h, 0
.text:0040DEF8                 dd 0C0h, 46000000h, 0Dh, 0
.text:0040DF08                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040DF08                 dd 101h, 0
.text:0040DF28                 dd 0C0h, 46000000h, 100h, 0
.text:0040DF38                 dd 0C0h, 46000000h, 20404h, 0
.text:0040DF48                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040DF48                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:0040DF78                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:0040DF78                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:0040DF78                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:0040DF78                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:0040DFC8                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040DFC8                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:0040DFC8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:0040DFC8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:0040DFC8                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040DFC8                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:0040E048                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:0040E048                 dd 0Ah, 0
.text:0040E068                 dd 0C0h, 46000000h, 2, 0
.text:0040E078                 dd 0C0h, 46000000h, 1Dh, 0
.text:0040E088                 dd 0C0h, 46000000h, 3, 0
.text:0040E098                 dd 0C0h, 46000000h, 16h, 0
.text:0040E0A8                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:0040E0A8                 dd 1608D74Fh, 0Fh, 0
.text:0040E0C8                 dd 0C0h, 46000000h, 20h, 0
.text:0040E0D8                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:0040E0D8                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:0040E0D8                 dd 0
.text:0040E108                 dd 0C0h, 46000000h, 11Eh, 0
.text:0040E118                 dd 0C0h, 46000000h, 128h, 0
.text:0040E128                 dd 0C0h, 46000000h, 129h, 0
.text:0040E138                 dd 0C0h, 46000000h, 118h, 0
.text:0040E148                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:0040E148                 dd 70474000h, 11Bh, 0
.text:0040E168                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:0040E168                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040E168                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:0040E168                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:0040E168                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:0040E1C8                 dd 0C0h, 46000000h, 116h, 0
.text:0040E1D8                 dd 0C0h, 46000000h, 113h, 0
.text:0040E1E8                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:0040E1E8                 dd 119h, 0
.text:0040E208                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:0040E208                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:0040E208                 dd 0
.text:0040E238                 dd 0C0h, 46000000h, 11Ch, 0
.text:0040E248                 dd 0C0h, 46000000h, 11Dh, 0
.text:0040E258                 dd 0C0h, 46000000h, 11Fh, 0
.text:0040E268                 dd 0C0h, 46000000h, 112h, 0
.text:0040E278                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:0040E278                 dd 18E6000h, 120h, 0
.text:0040E298                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:0040E298                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:0040E298                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:0040E2D8                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:0040E2D8                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:0040E308                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040E308                 dd 11Ah, 0
.text:0040E328                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:0040E328                 dd 10Ch, 0
.text:0040E348                 dd 0C0h, 46000000h
.text:0040E350 dword_40E350    dd 10Bh, 0              ; DATA XREF: sub_4076E0+75↑o
.text:0040E358                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:0040E358                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:0040E358                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:0040E358                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:0040E3A8                 dd 0C0h, 46000000h, 109h, 0
.text:0040E3B8                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:0040E3B8                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:0040E3B8                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:0040E3B8                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:0040E3B8                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:0040E3B8                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:0040E3B8                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:0040E3B8                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:0040E3B8                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040E3B8                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:0040E3B8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:0040E498                 dd 0C0h, 46000000h, 138h, 0
.text:0040E4A8                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:0040E4A8                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:0040E4A8                 dd 27h, 0
.text:0040E4D8                 dd 0C0h, 46000000h, 8, 0
.text:0040E4E8                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:0040E4E8                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:0040E4E8                 dd 20D00h, 0
.text:0040E518                 dd 0C0h, 46000000h, 20D03h, 0
.text:0040E528                 dd 0C0h, 46000000h, 12h, 0
.text:0040E538                 dd 0C0h, 46000000h, 4, 0
.text:0040E548                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040E548                 dd 7, 0
.text:0040E568                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040E568                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:0040E598                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040E598                 dd 126h, 0
.text:0040E5B8                 dd 0C0h, 46000000h, 10h, 0
.text:0040E5C8                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:0040E5C8                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:0040E5F8                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:0040E5F8                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:0040E5F8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:0040E638                 dd 0C0h, 46000000h, 0Bh, 0
.text:0040E648                 dd 0C0h, 46000000h, 0Ch, 0
.text:0040E658                 dd 0C0h, 46000000h, 26h, 0
.text:0040E668                 dd 0C0h, 46000000h, 6, 0
.text:0040E678                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:0040E678                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:0040E678                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:0040E6B8                 dd 0C0h, 46000000h, 20403h, 0
.text:0040E6C8                 dd 0C0h, 46000000h, 20401h, 0
.text:0040E6D8                 dd 0C0h, 46000000h, 20412h, 0
.text:0040E6E8                 dd 0C0h, 46000000h, 20402h, 0
.text:0040E6F8                 dd 0C0h, 46000000h, 20411h, 0
.text:0040E708                 dd 0C0h, 46000000h, 2 dup(0)
.text:0040E718                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040E718                 dd 10Dh, 0
.text:0040E738                 dd 0C0h, 46000000h, 127h, 0
.text:0040E748                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040E748                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:0040E748                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:0040E788                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:0040E788                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:0040E788                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:0040E7C8                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:0040E7D8                 dd 0C0h, 46000000h, 2DE18h, 0
.text:0040E7E8                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:0040E7F8                 dd 0C0h, 46000000h, 2DE19h, 0
.text:0040E808                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:0040E818                 dd 0C0h, 46000000h, 2DE12h, 0
.text:0040E828                 dd 0C0h, 46000000h, 2DE21h, 0
.text:0040E838                 dd 0C0h, 46000000h, 2DE01h, 0
.text:0040E848                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:0040E858                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:0040E868                 dd 0C0h, 46000000h, 2DE02h, 0
.text:0040E878                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:0040E888                 dd 0C0h, 46000000h, 2DE04h, 0
.text:0040E898                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:0040E8A8                 dd 0C0h, 46000000h, 2DE05h, 0
.text:0040E8B8                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:0040E8C8                 dd 0C0h, 46000000h, 2DE06h, 0
.text:0040E8D8                 dd 0C0h, 46000000h, 2DE13h, 0
.text:0040E8E8                 dd 0C0h, 46000000h, 2DE10h, 0
.text:0040E8F8                 dd 0C0h, 46000000h, 2DE22h, 0
.text:0040E908                 dd 0C0h, 46000000h, 2DE09h, 0
.text:0040E918                 dd 0C0h, 46000000h, 2DE23h, 0
.text:0040E928                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:0040E938                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:0040E948                 dd 0C0h, 46000000h, 2DE11h, 0
.text:0040E958                 dd 0C0h, 46000000h, 2DE15h, 0
.text:0040E968                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:0040E978                 dd 0C0h, 46000000h, 2DE16h, 0
.text:0040E988                 dd 0C0h, 46000000h, 2DE20h, 0
.text:0040E998                 dd 0C0h, 46000000h, 2DE07h, 0
.text:0040E9A8                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:0040E9B8                 dd 0C0h, 46000000h, 2DE17h, 0
.text:0040E9C8                 dd 0C0h, 46000000h, 2DE14h, 0
.text:0040E9D8                 dd 0C0h, 46000000h, 2DE03h, 0
.text:0040E9E8                 dd 0C0h, 46000000h, 2DE08h, 0
.text:0040E9F8                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:0040E9F8                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:0040EA20
.text:0040EA20 ; =============== S U B R O U T I N E =======================================
.text:0040EA20
.text:0040EA20 ; Attributes: thunk
.text:0040EA20
.text:0040EA20 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0040EA20 mbrtowc         proc near               ; CODE XREF: sub_404EB0+757↑p
.text:0040EA20
.text:0040EA20 DstCh           = dword ptr  4
.text:0040EA20 SrcCh           = dword ptr  8
.text:0040EA20 SizeInBytes     = dword ptr  0Ch
.text:0040EA20 State           = dword ptr  10h
.text:0040EA20
.text:0040EA20                 jmp     ds:__imp_mbrtowc
.text:0040EA20 mbrtowc         endp
.text:0040EA20
.text:0040EA20 ; ---------------------------------------------------------------------------
.text:0040EA26                 align 10h
.text:0040EA30
.text:0040EA30 ; =============== S U B R O U T I N E =======================================
.text:0040EA30
.text:0040EA30 ; Attributes: bp-based frame
.text:0040EA30
.text:0040EA30 sub_40EA30      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0040EA30                 push    ebp
.text:0040EA31                 mov     ecx, offset byte_411000
.text:0040EA36                 cmp     ecx, offset byte_411000
.text:0040EA3C                 mov     ebp, esp
.text:0040EA3E                 jnb     short loc_40EA56
.text:0040EA40
.text:0040EA40 loc_40EA40:                             ; CODE XREF: sub_40EA30+24↓j
.text:0040EA40                 mov     edx, [ecx+4]
.text:0040EA43                 mov     eax, [ecx]
.text:0040EA45                 add     ecx, 8
.text:0040EA48                 add     [edx+400000h], eax
.text:0040EA4E                 cmp     ecx, offset byte_411000
.text:0040EA54                 jb      short loc_40EA40
.text:0040EA56
.text:0040EA56 loc_40EA56:                             ; CODE XREF: sub_40EA30+E↑j
.text:0040EA56                 pop     ebp
.text:0040EA57                 retn
.text:0040EA57 sub_40EA30      endp
.text:0040EA57
.text:0040EA57 ; ---------------------------------------------------------------------------
.text:0040EA58                 align 10h
.text:0040EA60
.text:0040EA60 ; =============== S U B R O U T I N E =======================================
.text:0040EA60
.text:0040EA60 ; Attributes: bp-based frame
.text:0040EA60
.text:0040EA60 sub_40EA60      proc near               ; CODE XREF: sub_401080+16↑p
.text:0040EA60                                         ; TopLevelExceptionFilter+D7↑p
.text:0040EA60                 push    ebp
.text:0040EA61                 mov     ebp, esp
.text:0040EA63                 fninit
.text:0040EA65                 pop     ebp
.text:0040EA66                 retn
.text:0040EA66 sub_40EA60      endp
.text:0040EA66
.text:0040EA66 ; ---------------------------------------------------------------------------
.text:0040EA67                 align 10h
.text:0040EA70
.text:0040EA70 ; =============== S U B R O U T I N E =======================================
.text:0040EA70
.text:0040EA70 ; Attributes: bp-based frame
.text:0040EA70
.text:0040EA70 ; void __cdecl sub_40EA70()
.text:0040EA70 sub_40EA70      proc near               ; DATA XREF: .text:loc_40EAB9↓o
.text:0040EA70                                         ; sub_40EB00:loc_40EB2E↓o
.text:0040EA70                 push    ebp
.text:0040EA71                 mov     ebp, esp
.text:0040EA73                 sub     esp, 8
.text:0040EA76                 mov     eax, off_4100C4
.text:0040EA7B                 mov     edx, [eax]
.text:0040EA7D                 test    edx, edx
.text:0040EA7F                 jnz     short loc_40EA85
.text:0040EA81
.text:0040EA81 loc_40EA81:                             ; CODE XREF: sub_40EA70+2C↓j
.text:0040EA81                 mov     esp, ebp
.text:0040EA83                 pop     ebp
.text:0040EA84                 retn
.text:0040EA85 ; ---------------------------------------------------------------------------
.text:0040EA85
.text:0040EA85 loc_40EA85:                             ; CODE XREF: sub_40EA70+F↑j
.text:0040EA85                                         ; sub_40EA70+2A↓j
.text:0040EA85                 call    dword ptr [eax]
.text:0040EA87                 mov     edx, off_4100C4
.text:0040EA8D                 mov     ecx, [edx+4]
.text:0040EA90                 lea     eax, [edx+4]
.text:0040EA93                 mov     off_4100C4, eax
.text:0040EA98                 test    ecx, ecx
.text:0040EA9A                 jnz     short loc_40EA85
.text:0040EA9C                 jmp     short loc_40EA81
.text:0040EA9C sub_40EA70      endp
.text:0040EA9C
.text:0040EA9C ; ---------------------------------------------------------------------------
.text:0040EA9E                 align 10h
.text:0040EAA0                 push    ebp
.text:0040EAA1                 mov     ebp, esp
.text:0040EAA3                 sub     esp, 8
.text:0040EAA6                 mov     [ebp-4], ebx
.text:0040EAA9                 mov     eax, ds:dword_40F880
.text:0040EAAE                 cmp     eax, 0FFFFFFFFh
.text:0040EAB1                 jz      short loc_40EADC
.text:0040EAB3
.text:0040EAB3 loc_40EAB3:                             ; CODE XREF: .text:0040EAE6↓j
.text:0040EAB3                                         ; .text:0040EAF9↓j
.text:0040EAB3                 test    eax, eax
.text:0040EAB5                 mov     ebx, eax
.text:0040EAB7                 jnz     short loc_40EAD0
.text:0040EAB9
.text:0040EAB9 loc_40EAB9:                             ; CODE XREF: .text:0040EADA↓j
.text:0040EAB9                 mov     dword ptr [esp], offset sub_40EA70
.text:0040EAC0                 call    sub_401040
.text:0040EAC5                 mov     ebx, [ebp-4]
.text:0040EAC8                 mov     esp, ebp
.text:0040EACA                 pop     ebp
.text:0040EACB                 retn
.text:0040EACB ; ---------------------------------------------------------------------------
.text:0040EACC                 align 10h
.text:0040EAD0
.text:0040EAD0 loc_40EAD0:                             ; CODE XREF: .text:0040EAB7↑j
.text:0040EAD0                                         ; .text:0040EAD8↓j
.text:0040EAD0                 call    ds:dword_40F880[ebx*4]
.text:0040EAD7                 dec     ebx
.text:0040EAD8                 jnz     short loc_40EAD0
.text:0040EADA                 jmp     short loc_40EAB9
.text:0040EADC ; ---------------------------------------------------------------------------
.text:0040EADC
.text:0040EADC loc_40EADC:                             ; CODE XREF: .text:0040EAB1↑j
.text:0040EADC                 mov     ecx, ds:dword_40F884
.text:0040EAE2                 xor     eax, eax
.text:0040EAE4                 test    ecx, ecx
.text:0040EAE6                 jz      short loc_40EAB3
.text:0040EAE8                 mov     edx, offset dword_40F880
.text:0040EAED                 lea     esi, [esi+0]
.text:0040EAF0
.text:0040EAF0 loc_40EAF0:                             ; CODE XREF: .text:0040EAF7↓j
.text:0040EAF0                 inc     eax
.text:0040EAF1                 mov     ecx, [edx+eax*4+4]
.text:0040EAF5                 test    ecx, ecx
.text:0040EAF7                 jnz     short loc_40EAF0
.text:0040EAF9                 jmp     short loc_40EAB3
.text:0040EAF9 ; ---------------------------------------------------------------------------
.text:0040EAFB                 align 10h
.text:0040EB00
.text:0040EB00 ; =============== S U B R O U T I N E =======================================
.text:0040EB00
.text:0040EB00 ; Attributes: bp-based frame
.text:0040EB00
.text:0040EB00 sub_40EB00      proc near               ; CODE XREF: sub_4016F0+16↑p
.text:0040EB00
.text:0040EB00 var_8           = dword ptr -8
.text:0040EB00 var_4           = dword ptr -4
.text:0040EB00
.text:0040EB00                 push    ebp
.text:0040EB01                 mov     ebp, esp
.text:0040EB03                 sub     esp, 8
.text:0040EB06                 mov     [ebp+var_4], ebx
.text:0040EB09                 mov     edx, dword_4100C0
.text:0040EB0F                 test    edx, edx
.text:0040EB11                 jnz     short loc_40EB3A
.text:0040EB13                 mov     eax, ds:dword_40F880
.text:0040EB18                 mov     edx, 1
.text:0040EB1D                 mov     dword_4100C0, edx
.text:0040EB23                 cmp     eax, 0FFFFFFFFh
.text:0040EB26                 jz      short loc_40EB4D
.text:0040EB28
.text:0040EB28 loc_40EB28:                             ; CODE XREF: sub_40EB00+57↓j
.text:0040EB28                                         ; sub_40EB00+69↓j
.text:0040EB28                 test    eax, eax
.text:0040EB2A                 mov     ebx, eax
.text:0040EB2C                 jnz     short loc_40EB41
.text:0040EB2E
.text:0040EB2E loc_40EB2E:                             ; CODE XREF: sub_40EB00+4B↓j
.text:0040EB2E                 mov     [esp+8+var_8], offset sub_40EA70 ; void (__cdecl *)()
.text:0040EB35                 call    sub_401040
.text:0040EB3A
.text:0040EB3A loc_40EB3A:                             ; CODE XREF: sub_40EB00+11↑j
.text:0040EB3A                 mov     ebx, [ebp+var_4]
.text:0040EB3D                 mov     esp, ebp
.text:0040EB3F                 pop     ebp
.text:0040EB40                 retn
.text:0040EB41 ; ---------------------------------------------------------------------------
.text:0040EB41
.text:0040EB41 loc_40EB41:                             ; CODE XREF: sub_40EB00+2C↑j
.text:0040EB41                                         ; sub_40EB00+49↓j
.text:0040EB41                 call    ds:dword_40F880[ebx*4]
.text:0040EB48                 dec     ebx
.text:0040EB49                 jnz     short loc_40EB41
.text:0040EB4B                 jmp     short loc_40EB2E
.text:0040EB4D ; ---------------------------------------------------------------------------
.text:0040EB4D
.text:0040EB4D loc_40EB4D:                             ; CODE XREF: sub_40EB00+26↑j
.text:0040EB4D                 mov     ecx, ds:dword_40F884
.text:0040EB53                 xor     eax, eax
.text:0040EB55                 test    ecx, ecx
.text:0040EB57                 jz      short loc_40EB28
.text:0040EB59                 mov     edx, offset dword_40F880
.text:0040EB5E                 mov     esi, esi
.text:0040EB60
.text:0040EB60 loc_40EB60:                             ; CODE XREF: sub_40EB00+67↓j
.text:0040EB60                 inc     eax
.text:0040EB61                 mov     ebx, [edx+eax*4+4]
.text:0040EB65                 test    ebx, ebx
.text:0040EB67                 jnz     short loc_40EB60
.text:0040EB69                 jmp     short loc_40EB28
.text:0040EB69 sub_40EB00      endp
.text:0040EB69
.text:0040EB69 ; ---------------------------------------------------------------------------
.text:0040EB6B                 align 10h
.text:0040EB70
.text:0040EB70 ; =============== S U B R O U T I N E =======================================
.text:0040EB70
.text:0040EB70 ; Attributes: info_from_lumina
.text:0040EB70
.text:0040EB70 ; void *__cdecl _alloca(size_t Size)
.text:0040EB70 __alloca        proc near               ; CODE XREF: sub_4016F0+11↑p
.text:0040EB70                 push    ecx
.text:0040EB71                 mov     ecx, esp
.text:0040EB73                 add     ecx, 8
.text:0040EB76
.text:0040EB76 loc_40EB76:                             ; CODE XREF: __alloca+1B↓j
.text:0040EB76                 cmp     eax, 1000h
.text:0040EB7B                 jb      short loc_40EB8D
.text:0040EB7D                 sub     ecx, 1000h
.text:0040EB83                 or      dword ptr [ecx], 0
.text:0040EB86                 sub     eax, 1000h
.text:0040EB8B                 jmp     short loc_40EB76
.text:0040EB8D ; ---------------------------------------------------------------------------
.text:0040EB8D
.text:0040EB8D loc_40EB8D:                             ; CODE XREF: __alloca+B↑j
.text:0040EB8D                 sub     ecx, eax
.text:0040EB8F                 or      dword ptr [ecx], 0
.text:0040EB92                 mov     eax, esp
.text:0040EB94                 mov     esp, ecx
.text:0040EB96                 mov     ecx, [eax]
.text:0040EB98                 mov     eax, [eax+4]
.text:0040EB9B                 jmp     eax
.text:0040EB9B __alloca        endp
.text:0040EB9B
.text:0040EB9B ; ---------------------------------------------------------------------------
.text:0040EB9D                 align 10h
.text:0040EBA0
.text:0040EBA0 ; =============== S U B R O U T I N E =======================================
.text:0040EBA0
.text:0040EBA0 ; Attributes: bp-based frame
.text:0040EBA0
.text:0040EBA0 sub_40EBA0      proc near               ; CODE XREF: sub_4089C0+17E↑p
.text:0040EBA0                                         ; sub_4089C0+1F5↑p ...
.text:0040EBA0
.text:0040EBA0 var_24          = dword ptr -24h
.text:0040EBA0 var_20          = dword ptr -20h
.text:0040EBA0 var_1C          = dword ptr -1Ch
.text:0040EBA0 var_18          = dword ptr -18h
.text:0040EBA0 var_14          = dword ptr -14h
.text:0040EBA0 var_C           = dword ptr -0Ch
.text:0040EBA0 var_8           = dword ptr -8
.text:0040EBA0 var_4           = dword ptr -4
.text:0040EBA0 arg_0           = dword ptr  8
.text:0040EBA0 arg_4           = dword ptr  0Ch
.text:0040EBA0 arg_8           = dword ptr  10h
.text:0040EBA0 arg_C           = dword ptr  14h
.text:0040EBA0
.text:0040EBA0                 push    ebp
.text:0040EBA1                 mov     ebp, esp
.text:0040EBA3                 sub     esp, 28h
.text:0040EBA6                 mov     [ebp+var_C], ebx
.text:0040EBA9                 mov     edx, [ebp+arg_C]
.text:0040EBAC                 mov     ecx, [ebp+arg_0]
.text:0040EBAF                 mov     [ebp+var_8], esi
.text:0040EBB2                 mov     eax, [ebp+arg_8]
.text:0040EBB5                 test    edx, edx
.text:0040EBB7                 mov     [ebp+var_4], edi
.text:0040EBBA                 mov     ebx, [ebp+arg_4]
.text:0040EBBD                 mov     esi, eax
.text:0040EBBF                 mov     [ebp+var_18], 0
.text:0040EBC6                 mov     [ebp+var_14], 0
.text:0040EBCD                 mov     [ebp+var_1C], ecx
.text:0040EBD0                 jnz     short loc_40EC22
.text:0040EBD2                 cmp     eax, ebx
.text:0040EBD4                 jbe     short loc_40EC00
.text:0040EBD6                 mov     eax, ecx
.text:0040EBD8                 mov     edx, ebx
.text:0040EBDA                 div     esi
.text:0040EBDC                 mov     edi, eax
.text:0040EBDE                 mov     esi, esi
.text:0040EBE0
.text:0040EBE0 loc_40EBE0:                             ; CODE XREF: sub_40EBA0+88↓j
.text:0040EBE0                                         ; sub_40EBA0+A4↓j ...
.text:0040EBE0                 xor     ecx, ecx
.text:0040EBE2
.text:0040EBE2 loc_40EBE2:                             ; CODE XREF: sub_40EBA0+80↓j
.text:0040EBE2                 mov     [ebp+var_18], edi
.text:0040EBE5                 mov     ebx, [ebp+var_C]
.text:0040EBE8                 mov     eax, [ebp+var_18]
.text:0040EBEB                 mov     [ebp+var_14], ecx
.text:0040EBEE                 mov     esi, [ebp+var_8]
.text:0040EBF1                 mov     edx, [ebp+var_14]
.text:0040EBF4                 mov     edi, [ebp+var_4]
.text:0040EBF7                 mov     esp, ebp
.text:0040EBF9                 pop     ebp
.text:0040EBFA                 retn
.text:0040EBFA ; ---------------------------------------------------------------------------
.text:0040EBFB                 align 10h
.text:0040EC00
.text:0040EC00 loc_40EC00:                             ; CODE XREF: sub_40EBA0+34↑j
.text:0040EC00                 test    eax, eax
.text:0040EC02                 jnz     short loc_40EC11
.text:0040EC04                 mov     eax, 1
.text:0040EC09                 xor     ecx, ecx
.text:0040EC0B                 xor     edx, edx
.text:0040EC0D                 div     ecx
.text:0040EC0F                 mov     esi, eax
.text:0040EC11
.text:0040EC11 loc_40EC11:                             ; CODE XREF: sub_40EBA0+62↑j
.text:0040EC11                 mov     eax, ebx
.text:0040EC13                 xor     edx, edx
.text:0040EC15                 div     esi
.text:0040EC17                 mov     ecx, eax
.text:0040EC19                 mov     eax, [ebp+var_1C]
.text:0040EC1C                 div     esi
.text:0040EC1E                 mov     edi, eax
.text:0040EC20                 jmp     short loc_40EBE2
.text:0040EC22 ; ---------------------------------------------------------------------------
.text:0040EC22
.text:0040EC22 loc_40EC22:                             ; CODE XREF: sub_40EBA0+30↑j
.text:0040EC22                 cmp     edx, ebx
.text:0040EC24                 jbe     short loc_40EC30
.text:0040EC26                 xor     edi, edi
.text:0040EC28                 jmp     short loc_40EBE0
.text:0040EC28 ; ---------------------------------------------------------------------------
.text:0040EC2A                 align 10h
.text:0040EC30
.text:0040EC30 loc_40EC30:                             ; CODE XREF: sub_40EBA0+84↑j
.text:0040EC30                 bsr     eax, edx
.text:0040EC33                 xor     eax, 1Fh
.text:0040EC36                 mov     [ebp+var_20], eax
.text:0040EC39                 jnz     short loc_40EC50
.text:0040EC3B                 cmp     ebx, edx
.text:0040EC3D                 ja      short loc_40EC46
.text:0040EC3F                 xor     edi, edi
.text:0040EC41                 cmp     [ebp+var_1C], esi
.text:0040EC44                 jb      short loc_40EBE0
.text:0040EC46
.text:0040EC46 loc_40EC46:                             ; CODE XREF: sub_40EBA0+9D↑j
.text:0040EC46                 mov     edi, 1
.text:0040EC4B                 jmp     short loc_40EBE0
.text:0040EC4B ; ---------------------------------------------------------------------------
.text:0040EC4D                 align 10h
.text:0040EC50
.text:0040EC50 loc_40EC50:                             ; CODE XREF: sub_40EBA0+99↑j
.text:0040EC50                 mov     eax, [ebp+var_20]
.text:0040EC53                 mov     ecx, 20h ; ' '
.text:0040EC58                 sub     ecx, eax
.text:0040EC5A                 mov     [ebp+var_24], ecx
.text:0040EC5D                 mov     eax, esi
.text:0040EC5F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040EC63                 shl     edx, cl
.text:0040EC65                 mov     edi, edx
.text:0040EC67                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040EC6B                 mov     edx, ebx
.text:0040EC6D                 shr     eax, cl
.text:0040EC6F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040EC73                 or      edi, eax
.text:0040EC75                 mov     eax, [ebp+var_1C]
.text:0040EC78                 shl     esi, cl
.text:0040EC7A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040EC7E                 shr     edx, cl
.text:0040EC80                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040EC84                 shl     ebx, cl
.text:0040EC86                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040EC8A                 shr     eax, cl
.text:0040EC8C                 or      ebx, eax
.text:0040EC8E                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040EC92                 mov     eax, ebx
.text:0040EC94                 div     edi
.text:0040EC96                 mov     ebx, edx
.text:0040EC98                 mov     edi, eax
.text:0040EC9A                 shl     [ebp+var_1C], cl
.text:0040EC9D                 mul     esi
.text:0040EC9F                 cmp     edx, ebx
.text:0040ECA1                 ja      short loc_40ECB4
.text:0040ECA3                 cmp     edx, ebx
.text:0040ECA5                 jnz     loc_40EBE0
.text:0040ECAB                 cmp     eax, [ebp+var_1C]
.text:0040ECAE                 jbe     loc_40EBE0
.text:0040ECB4
.text:0040ECB4 loc_40ECB4:                             ; CODE XREF: sub_40EBA0+101↑j
.text:0040ECB4                 dec     edi
.text:0040ECB5                 jmp     loc_40EBE0
.text:0040ECB5 sub_40EBA0      endp
.text:0040ECB5
.text:0040ECB5 ; ---------------------------------------------------------------------------
.text:0040ECBA                 align 10h
.text:0040ECC0
.text:0040ECC0 ; =============== S U B R O U T I N E =======================================
.text:0040ECC0
.text:0040ECC0 ; Attributes: bp-based frame
.text:0040ECC0
.text:0040ECC0 sub_40ECC0      proc near               ; CODE XREF: sub_4089C0+1A5↑p
.text:0040ECC0                                         ; sub_4089C0+21E↑p ...
.text:0040ECC0
.text:0040ECC0 var_34          = dword ptr -34h
.text:0040ECC0 var_2C          = dword ptr -2Ch
.text:0040ECC0 var_28          = dword ptr -28h
.text:0040ECC0 var_24          = dword ptr -24h
.text:0040ECC0 var_20          = dword ptr -20h
.text:0040ECC0 var_1C          = dword ptr -1Ch
.text:0040ECC0 var_18          = dword ptr -18h
.text:0040ECC0 var_14          = dword ptr -14h
.text:0040ECC0 arg_0           = dword ptr  8
.text:0040ECC0 arg_4           = dword ptr  0Ch
.text:0040ECC0 arg_8           = dword ptr  10h
.text:0040ECC0 arg_C           = dword ptr  14h
.text:0040ECC0
.text:0040ECC0                 push    ebp
.text:0040ECC1                 mov     ebp, esp
.text:0040ECC3                 push    edi
.text:0040ECC4                 push    esi
.text:0040ECC5                 push    ebx
.text:0040ECC6                 sub     esp, 2Ch
.text:0040ECC9                 mov     edx, [ebp+arg_C]
.text:0040ECCC                 mov     [ebp+var_20], 0
.text:0040ECD3                 mov     ecx, [ebp+arg_0]
.text:0040ECD6                 mov     ebx, [ebp+arg_4]
.text:0040ECD9                 mov     [ebp+var_1C], 0
.text:0040ECE0                 mov     eax, [ebp+arg_8]
.text:0040ECE3                 test    edx, edx
.text:0040ECE5                 mov     [ebp+var_24], edx
.text:0040ECE8                 mov     edi, ebx
.text:0040ECEA                 mov     esi, eax
.text:0040ECEC                 mov     [ebp+var_28], ecx
.text:0040ECEF                 jnz     short loc_40ED50
.text:0040ECF1                 cmp     eax, ebx
.text:0040ECF3                 jbe     short loc_40ED30
.text:0040ECF5                 mov     eax, ecx
.text:0040ECF7                 mov     edx, ebx
.text:0040ECF9                 div     esi
.text:0040ECFB
.text:0040ECFB loc_40ECFB:                             ; CODE XREF: sub_40ECC0+8B↓j
.text:0040ECFB                 mov     [ebp+var_28], edx
.text:0040ECFE                 lea     ecx, [ebp+var_18]
.text:0040ED01                 test    ecx, ecx
.text:0040ED03                 jz      short loc_40ED1E
.text:0040ED05                 mov     [ebp+var_1C], 0
.text:0040ED0C
.text:0040ED0C loc_40ED0C:                             ; CODE XREF: sub_40ECC0+DA↓j
.text:0040ED0C                 mov     eax, [ebp+var_28]
.text:0040ED0F                 mov     [ebp+var_20], eax
.text:0040ED12                 mov     edx, [ebp+var_20]
.text:0040ED15                 mov     ecx, [ebp+var_1C]
.text:0040ED18                 mov     [ebp+var_18], edx
.text:0040ED1B                 mov     [ebp+var_14], ecx
.text:0040ED1E
.text:0040ED1E loc_40ED1E:                             ; CODE XREF: sub_40ECC0+43↑j
.text:0040ED1E                                         ; sub_40ECC0+A7↓j ...
.text:0040ED1E                 mov     eax, [ebp+var_18]
.text:0040ED21                 mov     edx, [ebp+var_14]
.text:0040ED24                 add     esp, 2Ch
.text:0040ED27                 pop     ebx
.text:0040ED28                 pop     esi
.text:0040ED29                 pop     edi
.text:0040ED2A                 pop     ebp
.text:0040ED2B                 retn
.text:0040ED2B ; ---------------------------------------------------------------------------
.text:0040ED2C                 align 10h
.text:0040ED30
.text:0040ED30 loc_40ED30:                             ; CODE XREF: sub_40ECC0+33↑j
.text:0040ED30                 test    eax, eax
.text:0040ED32                 jnz     short loc_40ED3F
.text:0040ED34                 mov     eax, 1
.text:0040ED39                 xor     edx, edx
.text:0040ED3B                 div     esi
.text:0040ED3D                 mov     esi, eax
.text:0040ED3F
.text:0040ED3F loc_40ED3F:                             ; CODE XREF: sub_40ECC0+72↑j
.text:0040ED3F                 mov     eax, edi
.text:0040ED41                 mov     edx, [ebp+var_24]
.text:0040ED44                 div     esi
.text:0040ED46                 mov     eax, [ebp+var_28]
.text:0040ED49                 div     esi
.text:0040ED4B                 jmp     short loc_40ECFB
.text:0040ED4B ; ---------------------------------------------------------------------------
.text:0040ED4D                 align 10h
.text:0040ED50
.text:0040ED50 loc_40ED50:                             ; CODE XREF: sub_40ECC0+2F↑j
.text:0040ED50                 cmp     [ebp+var_24], ebx
.text:0040ED53                 jbe     short loc_40ED70
.text:0040ED55                 mov     [ebp+var_20], ecx
.text:0040ED58
.text:0040ED58 loc_40ED58:                             ; CODE XREF: sub_40ECC0+15B↓j
.text:0040ED58                 mov     [ebp+var_1C], edi
.text:0040ED5B                 mov     eax, [ebp+var_20]
.text:0040ED5E                 mov     edx, [ebp+var_1C]
.text:0040ED61                 mov     [ebp+var_18], eax
.text:0040ED64                 mov     [ebp+var_14], edx
.text:0040ED67                 jmp     short loc_40ED1E
.text:0040ED67 ; ---------------------------------------------------------------------------
.text:0040ED69                 align 10h
.text:0040ED70
.text:0040ED70 loc_40ED70:                             ; CODE XREF: sub_40ECC0+93↑j
.text:0040ED70                 bsr     eax, [ebp+var_24]
.text:0040ED74                 mov     ebx, eax
.text:0040ED76                 xor     ebx, 1Fh
.text:0040ED79                 jnz     short loc_40EDA0
.text:0040ED7B                 cmp     edi, [ebp+var_24]
.text:0040ED7E                 ja      short loc_40ED85
.text:0040ED80                 cmp     [ebp+var_28], esi
.text:0040ED83                 jb      short loc_40ED90
.text:0040ED85
.text:0040ED85 loc_40ED85:                             ; CODE XREF: sub_40ECC0+BE↑j
.text:0040ED85                 mov     edx, [ebp+var_28]
.text:0040ED88                 sub     edx, esi
.text:0040ED8A                 sbb     edi, [ebp+var_24]
.text:0040ED8D                 mov     [ebp+var_28], edx
.text:0040ED90
.text:0040ED90 loc_40ED90:                             ; CODE XREF: sub_40ECC0+C3↑j
.text:0040ED90                 lea     ecx, [ebp+var_18]
.text:0040ED93                 test    ecx, ecx
.text:0040ED95                 jz      short loc_40ED1E
.text:0040ED97                 mov     [ebp+var_1C], edi
.text:0040ED9A                 jmp     loc_40ED0C
.text:0040ED9A ; ---------------------------------------------------------------------------
.text:0040ED9F                 align 10h
.text:0040EDA0
.text:0040EDA0 loc_40EDA0:                             ; CODE XREF: sub_40ECC0+B9↑j
.text:0040EDA0                 mov     edx, [ebp+var_24]
.text:0040EDA3                 mov     eax, 20h ; ' '
.text:0040EDA8                 mov     cl, bl
.text:0040EDAA                 sub     eax, ebx
.text:0040EDAC                 mov     [ebp+var_2C], eax
.text:0040EDAF                 shl     edx, cl
.text:0040EDB1                 mov     eax, esi
.text:0040EDB3                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040EDB7                 shr     eax, cl
.text:0040EDB9                 mov     cl, bl
.text:0040EDBB                 shl     esi, cl
.text:0040EDBD                 or      edx, eax
.text:0040EDBF                 mov     eax, [ebp+var_28]
.text:0040EDC2                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040EDC6                 mov     [ebp+var_24], edx
.text:0040EDC9                 mov     edx, edi
.text:0040EDCB                 shr     edx, cl
.text:0040EDCD                 mov     cl, bl
.text:0040EDCF                 shl     edi, cl
.text:0040EDD1                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040EDD5                 shr     eax, cl
.text:0040EDD7                 or      edi, eax
.text:0040EDD9                 mov     eax, edi
.text:0040EDDB                 mov     cl, bl
.text:0040EDDD                 div     [ebp+var_24]
.text:0040EDE0                 shl     [ebp+var_28], cl
.text:0040EDE3                 mov     edi, edx
.text:0040EDE5                 mul     esi
.text:0040EDE7                 mov     [ebp+var_34], eax
.text:0040EDEA                 cmp     edx, edi
.text:0040EDEC                 ja      short loc_40EE28
.text:0040EDEE                 cmp     edx, edi
.text:0040EDF0                 jz      short loc_40EE20
.text:0040EDF2
.text:0040EDF2 loc_40EDF2:                             ; CODE XREF: sub_40ECC0+166↓j
.text:0040EDF2                                         ; sub_40ECC0+173↓j
.text:0040EDF2                 lea     eax, [ebp+var_18]
.text:0040EDF5                 test    eax, eax
.text:0040EDF7                 jz      loc_40ED1E
.text:0040EDFD                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040EE01                 mov     eax, [ebp+var_28]
.text:0040EE04                 sub     eax, [ebp+var_34]
.text:0040EE07                 sbb     edi, edx
.text:0040EE09                 mov     [ebp+var_28], eax
.text:0040EE0C                 mov     edx, edi
.text:0040EE0E                 shl     edx, cl
.text:0040EE10                 mov     cl, bl
.text:0040EE12                 shr     eax, cl
.text:0040EE14                 or      edx, eax
.text:0040EE16                 mov     [ebp+var_20], edx
.text:0040EE19                 shr     edi, cl
.text:0040EE1B                 jmp     loc_40ED58
.text:0040EE20 ; ---------------------------------------------------------------------------
.text:0040EE20
.text:0040EE20 loc_40EE20:                             ; CODE XREF: sub_40ECC0+130↑j
.text:0040EE20                 mov     eax, [ebp+var_28]
.text:0040EE23                 cmp     [ebp+var_34], eax
.text:0040EE26                 jbe     short loc_40EDF2
.text:0040EE28
.text:0040EE28 loc_40EE28:                             ; CODE XREF: sub_40ECC0+12C↑j
.text:0040EE28                 mov     ecx, [ebp+var_34]
.text:0040EE2B                 sub     ecx, esi
.text:0040EE2D                 sbb     edx, [ebp+var_24]
.text:0040EE30                 mov     [ebp+var_34], ecx
.text:0040EE33                 jmp     short loc_40EDF2
.text:0040EE33 sub_40ECC0      endp
.text:0040EE33
.text:0040EE33 ; ---------------------------------------------------------------------------
.text:0040EE35                 align 10h
.text:0040EE40
.text:0040EE40 ; =============== S U B R O U T I N E =======================================
.text:0040EE40
.text:0040EE40 ; Attributes: thunk
.text:0040EE40
.text:0040EE40 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:0040EE40 _chmod          proc near               ; CODE XREF: sub_4016F0+426↑p
.text:0040EE40                                         ; sub_401E50+E5↑p ...
.text:0040EE40
.text:0040EE40 FileName        = dword ptr  4
.text:0040EE40 AccessMode      = dword ptr  8
.text:0040EE40
.text:0040EE40                 jmp     ds:__imp__chmod
.text:0040EE40 _chmod          endp
.text:0040EE40
.text:0040EE40 ; ---------------------------------------------------------------------------
.text:0040EE46                 align 10h
.text:0040EE50
.text:0040EE50 ; =============== S U B R O U T I N E =======================================
.text:0040EE50
.text:0040EE50 ; Attributes: thunk
.text:0040EE50
.text:0040EE50 ; int __cdecl umask(int Mode)
.text:0040EE50 _umask          proc near               ; CODE XREF: sub_4016F0+29B↑p
.text:0040EE50                                         ; sub_4016F0+2A8↑p ...
.text:0040EE50
.text:0040EE50 Mode            = dword ptr  4
.text:0040EE50
.text:0040EE50                 jmp     ds:__imp__umask
.text:0040EE50 _umask          endp
.text:0040EE50
.text:0040EE50 ; ---------------------------------------------------------------------------
.text:0040EE56                 align 10h
.text:0040EE60
.text:0040EE60 ; =============== S U B R O U T I N E =======================================
.text:0040EE60
.text:0040EE60 ; Attributes: thunk
.text:0040EE60
.text:0040EE60 ; int __cdecl close(int FileHandle)
.text:0040EE60 _close          proc near               ; CODE XREF: sub_402E00+76↑p
.text:0040EE60                                         ; sub_402E00+AC↑p ...
.text:0040EE60
.text:0040EE60 FileHandle      = dword ptr  4
.text:0040EE60
.text:0040EE60                 jmp     ds:__imp__close
.text:0040EE60 _close          endp
.text:0040EE60
.text:0040EE60 ; ---------------------------------------------------------------------------
.text:0040EE66                 align 10h
.text:0040EE70
.text:0040EE70 ; =============== S U B R O U T I N E =======================================
.text:0040EE70
.text:0040EE70 ; Attributes: thunk
.text:0040EE70
.text:0040EE70 ; int open(const char *FileName, int OpenFlag, ...)
.text:0040EE70 _open           proc near               ; CODE XREF: sub_402E00+54↑p
.text:0040EE70                                         ; sub_402E00+CB↑p ...
.text:0040EE70
.text:0040EE70 FileName        = dword ptr  4
.text:0040EE70 OpenFlag        = dword ptr  8
.text:0040EE70
.text:0040EE70                 jmp     ds:__imp__open
.text:0040EE70 _open           endp
.text:0040EE70
.text:0040EE70 ; ---------------------------------------------------------------------------
.text:0040EE76                 align 10h
.text:0040EE80
.text:0040EE80 ; =============== S U B R O U T I N E =======================================
.text:0040EE80
.text:0040EE80 ; Attributes: thunk
.text:0040EE80
.text:0040EE80 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:0040EE80 _stricmp        proc near               ; CODE XREF: sub_408E90+46F↑p
.text:0040EE80                                         ; sub_40B310+2E↑p ...
.text:0040EE80
.text:0040EE80 String1         = dword ptr  4
.text:0040EE80 String2         = dword ptr  8
.text:0040EE80
.text:0040EE80                 jmp     ds:__imp__stricmp
.text:0040EE80 _stricmp        endp
.text:0040EE80
.text:0040EE80 ; ---------------------------------------------------------------------------
.text:0040EE86                 align 10h
.text:0040EE90
.text:0040EE90 ; =============== S U B R O U T I N E =======================================
.text:0040EE90
.text:0040EE90 ; Attributes: thunk
.text:0040EE90
.text:0040EE90 ; char *__cdecl strdup(const char *String)
.text:0040EE90 _strdup         proc near               ; CODE XREF: sub_40AF40+101↑p
.text:0040EE90                                         ; .text:0040B1AA↑p ...
.text:0040EE90
.text:0040EE90 String          = dword ptr  4
.text:0040EE90
.text:0040EE90                 jmp     ds:__imp__strdup
.text:0040EE90 _strdup         endp
.text:0040EE90
.text:0040EE90 ; ---------------------------------------------------------------------------
.text:0040EE96                 align 10h
.text:0040EEA0
.text:0040EEA0 ; =============== S U B R O U T I N E =======================================
.text:0040EEA0
.text:0040EEA0 ; Attributes: thunk
.text:0040EEA0
.text:0040EEA0 ; int __cdecl getpid()
.text:0040EEA0 _getpid         proc near               ; CODE XREF: sub_40CF50+84↑p
.text:0040EEA0                 jmp     ds:__imp__getpid
.text:0040EEA0 _getpid         endp
.text:0040EEA0
.text:0040EEA0 ; ---------------------------------------------------------------------------
.text:0040EEA6                 align 10h
.text:0040EEB0                 jmp     ds:__set_app_type
.text:0040EEB0 ; ---------------------------------------------------------------------------
.text:0040EEB6                 align 10h
.text:0040EEC0
.text:0040EEC0 ; =============== S U B R O U T I N E =======================================
.text:0040EEC0
.text:0040EEC0 ; Attributes: thunk
.text:0040EEC0
.text:0040EEC0 ; void __cdecl cexit()
.text:0040EEC0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:0040EEC0                 jmp     ds:__imp__cexit
.text:0040EEC0 _cexit          endp
.text:0040EEC0
.text:0040EEC0 ; ---------------------------------------------------------------------------
.text:0040EEC6                 align 10h
.text:0040EED0
.text:0040EED0 ; =============== S U B R O U T I N E =======================================
.text:0040EED0
.text:0040EED0 ; Attributes: thunk
.text:0040EED0
.text:0040EED0 ; char ***__cdecl _p__environ()
.text:0040EED0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0040EED0                 jmp     ds:__imp___p__environ
.text:0040EED0 __p__environ    endp
.text:0040EED0
.text:0040EED0 ; ---------------------------------------------------------------------------
.text:0040EED6                 align 10h
.text:0040EEE0
.text:0040EEE0 ; =============== S U B R O U T I N E =======================================
.text:0040EEE0
.text:0040EEE0 ; Attributes: thunk
.text:0040EEE0
.text:0040EEE0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0040EEE0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0040EEE0                                         ; TopLevelExceptionFilter+88↑p ...
.text:0040EEE0
.text:0040EEE0 Signal          = dword ptr  4
.text:0040EEE0 Function        = dword ptr  8
.text:0040EEE0
.text:0040EEE0                 jmp     ds:__imp_signal
.text:0040EEE0 signal          endp
.text:0040EEE0
.text:0040EEE0 ; ---------------------------------------------------------------------------
.text:0040EEE6                 align 10h
.text:0040EEF0
.text:0040EEF0 ; =============== S U B R O U T I N E =======================================
.text:0040EEF0
.text:0040EEF0 ; Attributes: thunk
.text:0040EEF0
.text:0040EEF0 ; int *__cdecl _p__fmode()
.text:0040EEF0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0040EEF0                 jmp     ds:__imp___p__fmode
.text:0040EEF0 __p__fmode      endp
.text:0040EEF0
.text:0040EEF0 ; ---------------------------------------------------------------------------
.text:0040EEF6                 align 10h
.text:0040EF00
.text:0040EF00 ; =============== S U B R O U T I N E =======================================
.text:0040EF00
.text:0040EF00 ; Attributes: thunk
.text:0040EF00
.text:0040EF00 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0040EF00 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0040EF00                                         ; sub_401080+90↑p ...
.text:0040EF00
.text:0040EF00 FileHandle      = dword ptr  4
.text:0040EF00 Mode            = dword ptr  8
.text:0040EF00
.text:0040EF00                 jmp     ds:__imp__setmode
.text:0040EF00 _setmode        endp
.text:0040EF00
.text:0040EF00 ; ---------------------------------------------------------------------------
.text:0040EF06                 align 10h
.text:0040EF10
.text:0040EF10 ; =============== S U B R O U T I N E =======================================
.text:0040EF10
.text:0040EF10 ; Attributes: thunk
.text:0040EF10
.text:0040EF10 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0040EF10                 jmp     ds:__imp___getmainargs
.text:0040EF10 __getmainargs   endp
.text:0040EF10
.text:0040EF10 ; ---------------------------------------------------------------------------
.text:0040EF16                 align 10h
.text:0040EF20
.text:0040EF20 ; =============== S U B R O U T I N E =======================================
.text:0040EF20
.text:0040EF20 ; Attributes: thunk
.text:0040EF20
.text:0040EF20 ; int *__cdecl errno()
.text:0040EF20 _errno          proc near               ; CODE XREF: sub_4016F0+44C↑p
.text:0040EF20                                         ; sub_401E50+10E↑p ...
.text:0040EF20                 jmp     ds:__imp__errno
.text:0040EF20 _errno          endp
.text:0040EF20
.text:0040EF20 ; ---------------------------------------------------------------------------
.text:0040EF26                 align 10h
.text:0040EF30
.text:0040EF30 ; =============== S U B R O U T I N E =======================================
.text:0040EF30
.text:0040EF30 ; Attributes: thunk
.text:0040EF30
.text:0040EF30 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0040EF30 setlocale       proc near               ; CODE XREF: sub_4016F0+47↑p
.text:0040EF30
.text:0040EF30 Category        = dword ptr  4
.text:0040EF30 Locale          = dword ptr  8
.text:0040EF30
.text:0040EF30                 jmp     ds:__imp_setlocale
.text:0040EF30 setlocale       endp
.text:0040EF30
.text:0040EF30 ; ---------------------------------------------------------------------------
.text:0040EF36                 align 10h
.text:0040EF40
.text:0040EF40 ; =============== S U B R O U T I N E =======================================
.text:0040EF40
.text:0040EF40 ; Attributes: noreturn thunk
.text:0040EF40
.text:0040EF40 ; void __cdecl __noreturn exit(int Code)
.text:0040EF40 exit            proc near               ; CODE XREF: sub_4016F0:loc_40180D↑p
.text:0040EF40                                         ; .text:00401C4B↑p ...
.text:0040EF40
.text:0040EF40 Code            = dword ptr  4
.text:0040EF40
.text:0040EF40                 jmp     ds:__imp_exit
.text:0040EF40 exit            endp
.text:0040EF40
.text:0040EF40 ; ---------------------------------------------------------------------------
.text:0040EF46                 align 10h
.text:0040EF50
.text:0040EF50 ; =============== S U B R O U T I N E =======================================
.text:0040EF50
.text:0040EF50 ; Attributes: thunk
.text:0040EF50
.text:0040EF50 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:0040EF50 fputs           proc near               ; CODE XREF: sub_4016F0+17C↑p
.text:0040EF50                                         ; sub_4016F0+19E↑p ...
.text:0040EF50
.text:0040EF50 Buffer          = dword ptr  4
.text:0040EF50 Stream          = dword ptr  8
.text:0040EF50
.text:0040EF50                 jmp     ds:__imp_fputs
.text:0040EF50 fputs           endp
.text:0040EF50
.text:0040EF50 ; ---------------------------------------------------------------------------
.text:0040EF56                 align 10h
.text:0040EF60
.text:0040EF60 ; =============== S U B R O U T I N E =======================================
.text:0040EF60
.text:0040EF60 ; Attributes: thunk
.text:0040EF60
.text:0040EF60 ; int printf(const char *const Format, ...)
.text:0040EF60 printf          proc near               ; CODE XREF: sub_4016F0+15A↑p
.text:0040EF60                                         ; sub_4016F0+221↑p ...
.text:0040EF60
.text:0040EF60 Format          = dword ptr  4
.text:0040EF60
.text:0040EF60                 jmp     ds:__imp_printf
.text:0040EF60 printf          endp
.text:0040EF60
.text:0040EF60 ; ---------------------------------------------------------------------------
.text:0040EF66                 align 10h
.text:0040EF70
.text:0040EF70 ; =============== S U B R O U T I N E =======================================
.text:0040EF70
.text:0040EF70 ; Attributes: thunk
.text:0040EF70
.text:0040EF70 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:0040EF70 fprintf         proc near               ; CODE XREF: sub_4016F0+111↑p
.text:0040EF70                                         ; .text:00401C43↑p ...
.text:0040EF70
.text:0040EF70 Stream          = dword ptr  4
.text:0040EF70 Format          = dword ptr  8
.text:0040EF70
.text:0040EF70                 jmp     ds:__imp_fprintf
.text:0040EF70 fprintf         endp
.text:0040EF70
.text:0040EF70 ; ---------------------------------------------------------------------------
.text:0040EF76                 align 10h
.text:0040EF80
.text:0040EF80 ; =============== S U B R O U T I N E =======================================
.text:0040EF80
.text:0040EF80 ; Attributes: thunk
.text:0040EF80
.text:0040EF80 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:0040EF80 strcpy          proc near               ; CODE XREF: sub_401E50+1C7↑p
.text:0040EF80                                         ; sub_407860+35↑p ...
.text:0040EF80
.text:0040EF80 Destination     = dword ptr  4
.text:0040EF80 Source          = dword ptr  8
.text:0040EF80
.text:0040EF80                 jmp     ds:__imp_strcpy
.text:0040EF80 strcpy          endp
.text:0040EF80
.text:0040EF80 ; ---------------------------------------------------------------------------
.text:0040EF86                 align 10h
.text:0040EF90
.text:0040EF90 ; =============== S U B R O U T I N E =======================================
.text:0040EF90
.text:0040EF90 ; Attributes: thunk
.text:0040EF90
.text:0040EF90 ; size_t __cdecl strlen(const char *Str)
.text:0040EF90 strlen          proc near               ; CODE XREF: sub_401E50+1AE↑p
.text:0040EF90                                         ; sub_403170+2A9↑p ...
.text:0040EF90
.text:0040EF90 Str             = dword ptr  4
.text:0040EF90
.text:0040EF90                 jmp     ds:__imp_strlen
.text:0040EF90 strlen          endp
.text:0040EF90
.text:0040EF90 ; ---------------------------------------------------------------------------
.text:0040EF96                 align 10h
.text:0040EFA0
.text:0040EFA0 ; =============== S U B R O U T I N E =======================================
.text:0040EFA0
.text:0040EFA0 ; Attributes: thunk
.text:0040EFA0
.text:0040EFA0 ; void *__cdecl malloc(size_t Size)
.text:0040EFA0 malloc          proc near               ; CODE XREF: sub_401E50+1B7↑p
.text:0040EFA0                                         ; sub_401E50+417↑p ...
.text:0040EFA0
.text:0040EFA0 Size            = dword ptr  4
.text:0040EFA0
.text:0040EFA0                 jmp     ds:__imp_malloc
.text:0040EFA0 malloc          endp
.text:0040EFA0
.text:0040EFA0 ; ---------------------------------------------------------------------------
.text:0040EFA6                 align 10h
.text:0040EFB0
.text:0040EFB0 ; =============== S U B R O U T I N E =======================================
.text:0040EFB0
.text:0040EFB0 ; Attributes: thunk
.text:0040EFB0
.text:0040EFB0 ; char *__cdecl strchr(const char *Str, int Val)
.text:0040EFB0 strchr          proc near               ; CODE XREF: sub_401E50+24D↑p
.text:0040EFB0                                         ; sub_403170+469↑p ...
.text:0040EFB0
.text:0040EFB0 Str             = dword ptr  4
.text:0040EFB0 Val             = dword ptr  8
.text:0040EFB0
.text:0040EFB0                 jmp     ds:__imp_strchr
.text:0040EFB0 strchr          endp
.text:0040EFB0
.text:0040EFB0 ; ---------------------------------------------------------------------------
.text:0040EFB6                 align 10h
.text:0040EFC0
.text:0040EFC0 ; =============== S U B R O U T I N E =======================================
.text:0040EFC0
.text:0040EFC0 ; Attributes: thunk
.text:0040EFC0
.text:0040EFC0 ; void __cdecl free(void *Block)
.text:0040EFC0 free            proc near               ; CODE XREF: sub_402D60+16↑p
.text:0040EFC0                                         ; sub_4047C0+33↑j ...
.text:0040EFC0
.text:0040EFC0 Block           = dword ptr  4
.text:0040EFC0
.text:0040EFC0                 jmp     ds:__imp_free
.text:0040EFC0 free            endp
.text:0040EFC0
.text:0040EFC0 ; ---------------------------------------------------------------------------
.text:0040EFC6                 align 10h
.text:0040EFD0
.text:0040EFD0 ; =============== S U B R O U T I N E =======================================
.text:0040EFD0
.text:0040EFD0 ; Attributes: thunk
.text:0040EFD0
.text:0040EFD0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:0040EFD0 strncmp         proc near               ; CODE XREF: sub_403170+23F↑p
.text:0040EFD0                                         ; sub_403170+699↑p
.text:0040EFD0
.text:0040EFD0 Str1            = dword ptr  4
.text:0040EFD0 Str2            = dword ptr  8
.text:0040EFD0 MaxCount        = dword ptr  0Ch
.text:0040EFD0
.text:0040EFD0                 jmp     ds:__imp_strncmp
.text:0040EFD0 strncmp         endp
.text:0040EFD0
.text:0040EFD0 ; ---------------------------------------------------------------------------
.text:0040EFD6                 align 10h
.text:0040EFE0
.text:0040EFE0 ; =============== S U B R O U T I N E =======================================
.text:0040EFE0
.text:0040EFE0 ; Attributes: thunk
.text:0040EFE0
.text:0040EFE0 ; char *__cdecl getenv(const char *VarName)
.text:0040EFE0 getenv          proc near               ; CODE XREF: sub_403170+B57↑p
.text:0040EFE0                                         ; sub_408E90+3EE↑p ...
.text:0040EFE0
.text:0040EFE0 VarName         = dword ptr  4
.text:0040EFE0
.text:0040EFE0                 jmp     ds:__imp_getenv
.text:0040EFE0 getenv          endp
.text:0040EFE0
.text:0040EFE0 ; ---------------------------------------------------------------------------
.text:0040EFE6                 align 10h
.text:0040EFF0
.text:0040EFF0 ; =============== S U B R O U T I N E =======================================
.text:0040EFF0
.text:0040EFF0 ; Attributes: noreturn thunk
.text:0040EFF0
.text:0040EFF0 ; void __cdecl __noreturn abort()
.text:0040EFF0 abort           proc near               ; CODE XREF: sub_403F60+32↑p
.text:0040EFF0                                         ; sub_4042F0:loc_40438C↑p ...
.text:0040EFF0                 jmp     ds:__imp_abort
.text:0040EFF0 abort           endp
.text:0040EFF0
.text:0040EFF0 ; ---------------------------------------------------------------------------
.text:0040EFF6                 align 10h
.text:0040F000
.text:0040F000 ; =============== S U B R O U T I N E =======================================
.text:0040F000
.text:0040F000 ; Attributes: thunk
.text:0040F000
.text:0040F000 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:0040F000 vfprintf        proc near               ; CODE XREF: sub_4042F0+C1↑p
.text:0040F000                                         ; sub_406EF0+49↑p ...
.text:0040F000
.text:0040F000 Stream          = dword ptr  4
.text:0040F000 Format          = dword ptr  8
.text:0040F000 ArgList         = dword ptr  0Ch
.text:0040F000
.text:0040F000                 jmp     ds:__imp_vfprintf
.text:0040F000 vfprintf        endp
.text:0040F000
.text:0040F000 ; ---------------------------------------------------------------------------
.text:0040F006                 align 10h
.text:0040F010
.text:0040F010 ; =============== S U B R O U T I N E =======================================
.text:0040F010
.text:0040F010 ; Attributes: thunk
.text:0040F010
.text:0040F010 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:0040F010 _flsbuf         proc near               ; CODE XREF: sub_4042F0+128↑p
.text:0040F010                                         ; sub_4042F0+13A↑p ...
.text:0040F010
.text:0040F010 File            = dword ptr  8
.text:0040F010
.text:0040F010                 jmp     ds:__imp__flsbuf
.text:0040F010 _flsbuf         endp
.text:0040F010
.text:0040F010 ; ---------------------------------------------------------------------------
.text:0040F016                 align 10h
.text:0040F020
.text:0040F020 ; =============== S U B R O U T I N E =======================================
.text:0040F020
.text:0040F020 ; Attributes: thunk
.text:0040F020
.text:0040F020 ; int __cdecl fclose(FILE *Stream)
.text:0040F020 fclose          proc near               ; CODE XREF: sub_404670+27↑p
.text:0040F020                                         ; .text:0040C84E↑p
.text:0040F020
.text:0040F020 Stream          = dword ptr  4
.text:0040F020
.text:0040F020                 jmp     ds:__imp_fclose
.text:0040F020 fclose          endp
.text:0040F020
.text:0040F020 ; ---------------------------------------------------------------------------
.text:0040F026                 align 10h
.text:0040F030
.text:0040F030 ; =============== S U B R O U T I N E =======================================
.text:0040F030
.text:0040F030 ; Attributes: thunk
.text:0040F030
.text:0040F030 ; unsigned int __cdecl strtoul(const char *String, char **EndPtr, int Radix)
.text:0040F030 strtoul         proc near               ; CODE XREF: sub_4048B0+94↑p
.text:0040F030
.text:0040F030 String          = dword ptr  4
.text:0040F030 EndPtr          = dword ptr  8
.text:0040F030 Radix           = dword ptr  0Ch
.text:0040F030
.text:0040F030                 jmp     ds:__imp_strtoul
.text:0040F030 strtoul         endp
.text:0040F030
.text:0040F030 ; ---------------------------------------------------------------------------
.text:0040F036                 align 10h
.text:0040F040
.text:0040F040 ; =============== S U B R O U T I N E =======================================
.text:0040F040
.text:0040F040 ; Attributes: noreturn thunk
.text:0040F040
.text:0040F040 _assert         proc near               ; CODE XREF: sub_4048B0+553↑p
.text:0040F040                                         ; sub_406250:loc_40648D↑p ...
.text:0040F040                 jmp     ds:__imp__assert
.text:0040F040 _assert         endp
.text:0040F040
.text:0040F040 ; ---------------------------------------------------------------------------
.text:0040F046                 align 10h
.text:0040F050
.text:0040F050 ; =============== S U B R O U T I N E =======================================
.text:0040F050
.text:0040F050 ; Attributes: thunk
.text:0040F050
.text:0040F050 ; int __cdecl isctype(int C, int Type)
.text:0040F050 _isctype        proc near               ; CODE XREF: sub_4048B0+5F↑p
.text:0040F050                                         ; sub_404EB0+610↑p
.text:0040F050
.text:0040F050 C               = dword ptr  4
.text:0040F050 Type            = dword ptr  8
.text:0040F050
.text:0040F050                 jmp     ds:__imp__isctype
.text:0040F050 _isctype        endp
.text:0040F050
.text:0040F050 ; ---------------------------------------------------------------------------
.text:0040F056                 align 10h
.text:0040F060
.text:0040F060 ; =============== S U B R O U T I N E =======================================
.text:0040F060
.text:0040F060 ; Attributes: thunk
.text:0040F060
.text:0040F060 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:0040F060 iswctype        proc near               ; CODE XREF: sub_404EB0+78B↑p
.text:0040F060
.text:0040F060 C               = word ptr  4
.text:0040F060 Type            = word ptr  8
.text:0040F060
.text:0040F060                 jmp     ds:__imp_iswctype
.text:0040F060 iswctype        endp
.text:0040F060
.text:0040F060 ; ---------------------------------------------------------------------------
.text:0040F066                 align 10h
.text:0040F070
.text:0040F070 ; =============== S U B R O U T I N E =======================================
.text:0040F070
.text:0040F070 ; Attributes: thunk
.text:0040F070
.text:0040F070 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:0040F070 strspn          proc near               ; CODE XREF: sub_406250+8B↑p
.text:0040F070                                         ; .text:0040BCDA↑p ...
.text:0040F070
.text:0040F070 Str             = dword ptr  4
.text:0040F070 Control         = dword ptr  8
.text:0040F070
.text:0040F070                 jmp     ds:__imp_strspn
.text:0040F070 strspn          endp
.text:0040F070
.text:0040F070 ; ---------------------------------------------------------------------------
.text:0040F076                 align 10h
.text:0040F080
.text:0040F080 ; =============== S U B R O U T I N E =======================================
.text:0040F080
.text:0040F080 ; Attributes: thunk
.text:0040F080
.text:0040F080 ; size_t __cdecl strcspn(const char *Str, const char *Control)
.text:0040F080 strcspn         proc near               ; CODE XREF: sub_406250+D6↑p
.text:0040F080                                         ; sub_406250+51F↑p
.text:0040F080
.text:0040F080 Str             = dword ptr  4
.text:0040F080 Control         = dword ptr  8
.text:0040F080
.text:0040F080                 jmp     ds:__imp_strcspn
.text:0040F080 strcspn         endp
.text:0040F080
.text:0040F080 ; ---------------------------------------------------------------------------
.text:0040F086                 align 10h
.text:0040F090
.text:0040F090 ; =============== S U B R O U T I N E =======================================
.text:0040F090
.text:0040F090 ; Attributes: thunk
.text:0040F090
.text:0040F090 ; void *__cdecl memchr(const void *Buf, int Val, size_t MaxCount)
.text:0040F090 memchr          proc near               ; CODE XREF: sub_406250+BE↑p
.text:0040F090
.text:0040F090 Buf             = dword ptr  4
.text:0040F090 Val             = dword ptr  8
.text:0040F090 MaxCount        = dword ptr  0Ch
.text:0040F090
.text:0040F090                 jmp     ds:__imp_memchr
.text:0040F090 memchr          endp
.text:0040F090
.text:0040F090 ; ---------------------------------------------------------------------------
.text:0040F096                 align 10h
.text:0040F0A0
.text:0040F0A0 ; =============== S U B R O U T I N E =======================================
.text:0040F0A0
.text:0040F0A0 ; Attributes: thunk
.text:0040F0A0
.text:0040F0A0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0040F0A0 memcpy          proc near               ; CODE XREF: .text:00406BB8↑p
.text:0040F0A0                                         ; .text:00406C01↑p
.text:0040F0A0
.text:0040F0A0 Src             = dword ptr  8
.text:0040F0A0 Size            = dword ptr  0Ch
.text:0040F0A0
.text:0040F0A0                 jmp     ds:__imp_memcpy
.text:0040F0A0 memcpy          endp
.text:0040F0A0
.text:0040F0A0 ; ---------------------------------------------------------------------------
.text:0040F0A6                 align 10h
.text:0040F0B0
.text:0040F0B0 ; =============== S U B R O U T I N E =======================================
.text:0040F0B0
.text:0040F0B0 ; Attributes: thunk
.text:0040F0B0
.text:0040F0B0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:0040F0B0 memset          proc near               ; CODE XREF: .text:00406B36↑p
.text:0040F0B0
.text:0040F0B0 Val             = dword ptr  8
.text:0040F0B0 Size            = dword ptr  0Ch
.text:0040F0B0
.text:0040F0B0                 jmp     ds:__imp_memset
.text:0040F0B0 memset          endp
.text:0040F0B0
.text:0040F0B0 ; ---------------------------------------------------------------------------
.text:0040F0B6                 align 10h
.text:0040F0C0
.text:0040F0C0 ; =============== S U B R O U T I N E =======================================
.text:0040F0C0
.text:0040F0C0 ; Attributes: thunk
.text:0040F0C0
.text:0040F0C0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:0040F0C0 calloc          proc near               ; CODE XREF: .text:00406B73↑p
.text:0040F0C0                                         ; sub_40AF40+AC↑p
.text:0040F0C0
.text:0040F0C0 Count           = dword ptr  4
.text:0040F0C0 Size            = dword ptr  8
.text:0040F0C0
.text:0040F0C0                 jmp     ds:__imp_calloc
.text:0040F0C0 calloc          endp
.text:0040F0C0
.text:0040F0C0 ; ---------------------------------------------------------------------------
.text:0040F0C6                 align 10h
.text:0040F0D0
.text:0040F0D0 ; =============== S U B R O U T I N E =======================================
.text:0040F0D0
.text:0040F0D0 ; Attributes: thunk
.text:0040F0D0
.text:0040F0D0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:0040F0D0 realloc         proc near               ; CODE XREF: .text:00406A70↑p
.text:0040F0D0                                         ; sub_406AA0+16↑p ...
.text:0040F0D0
.text:0040F0D0 Block           = dword ptr  4
.text:0040F0D0 Size            = dword ptr  8
.text:0040F0D0
.text:0040F0D0                 jmp     ds:__imp_realloc
.text:0040F0D0 realloc         endp
.text:0040F0D0
.text:0040F0D0 ; ---------------------------------------------------------------------------
.text:0040F0D6                 align 10h
.text:0040F0E0
.text:0040F0E0 ; =============== S U B R O U T I N E =======================================
.text:0040F0E0
.text:0040F0E0 ; Attributes: thunk
.text:0040F0E0
.text:0040F0E0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:0040F0E0 strcmp          proc near               ; CODE XREF: sub_406FF4+180↑p
.text:0040F0E0                                         ; .text:0040BC4B↑p
.text:0040F0E0
.text:0040F0E0 Str1            = dword ptr  4
.text:0040F0E0 Str2            = dword ptr  8
.text:0040F0E0
.text:0040F0E0                 jmp     ds:__imp_strcmp
.text:0040F0E0 strcmp          endp
.text:0040F0E0
.text:0040F0E0 ; ---------------------------------------------------------------------------
.text:0040F0E6                 align 10h
.text:0040F0F0
.text:0040F0F0 ; =============== S U B R O U T I N E =======================================
.text:0040F0F0
.text:0040F0F0 ; Attributes: thunk
.text:0040F0F0
.text:0040F0F0 ; int __cdecl fflush(FILE *Stream)
.text:0040F0F0 fflush          proc near               ; CODE XREF: sub_406EF0+19↑p
.text:0040F0F0                                         ; sub_406EF0+81↑p ...
.text:0040F0F0
.text:0040F0F0 Stream          = dword ptr  4
.text:0040F0F0
.text:0040F0F0                 jmp     ds:__imp_fflush
.text:0040F0F0 fflush          endp
.text:0040F0F0
.text:0040F0F0 ; ---------------------------------------------------------------------------
.text:0040F0F6                 align 10h
.text:0040F100
.text:0040F100 ; =============== S U B R O U T I N E =======================================
.text:0040F100
.text:0040F100 ; Attributes: thunk
.text:0040F100
.text:0040F100 ; char *__cdecl strerror(int ErrorMessage)
.text:0040F100 strerror        proc near               ; CODE XREF: sub_406EF0+A5↑p
.text:0040F100                                         ; sub_406FF4+10F↑p
.text:0040F100
.text:0040F100 ErrorMessage    = dword ptr  4
.text:0040F100
.text:0040F100                 jmp     ds:__imp_strerror
.text:0040F100 strerror        endp
.text:0040F100
.text:0040F100 ; ---------------------------------------------------------------------------
.text:0040F106                 align 10h
.text:0040F110
.text:0040F110 ; =============== S U B R O U T I N E =======================================
.text:0040F110
.text:0040F110 ; Attributes: thunk
.text:0040F110
.text:0040F110 ; char *__cdecl getcwd(char *DstBuf, int SizeInBytes)
.text:0040F110 _getcwd         proc near               ; CODE XREF: j__getcwd↑j
.text:0040F110
.text:0040F110 DstBuf          = dword ptr  4
.text:0040F110 SizeInBytes     = dword ptr  8
.text:0040F110
.text:0040F110                 jmp     ds:__imp__getcwd
.text:0040F110 _getcwd         endp
.text:0040F110
.text:0040F110 ; ---------------------------------------------------------------------------
.text:0040F116                 align 10h
.text:0040F120
.text:0040F120 ; =============== S U B R O U T I N E =======================================
.text:0040F120
.text:0040F120 ; Attributes: thunk
.text:0040F120
.text:0040F120 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:0040F120 strcat          proc near               ; CODE XREF: sub_407860+74↑p
.text:0040F120                                         ; sub_408840+98↑p ...
.text:0040F120
.text:0040F120 Destination     = dword ptr  4
.text:0040F120 Source          = dword ptr  8
.text:0040F120
.text:0040F120                 jmp     ds:__imp_strcat
.text:0040F120 strcat          endp
.text:0040F120
.text:0040F120 ; ---------------------------------------------------------------------------
.text:0040F126                 align 10h
.text:0040F130
.text:0040F130 ; =============== S U B R O U T I N E =======================================
.text:0040F130
.text:0040F130 ; Attributes: thunk
.text:0040F130
.text:0040F130 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:0040F130 strrchr         proc near               ; CODE XREF: sub_407860+49↑p
.text:0040F130                                         ; .text:0040842E↑p ...
.text:0040F130
.text:0040F130 Str             = dword ptr  4
.text:0040F130
.text:0040F130                 jmp     ds:__imp_strrchr
.text:0040F130 strrchr         endp
.text:0040F130
.text:0040F130 ; ---------------------------------------------------------------------------
.text:0040F136                 align 10h
.text:0040F140
.text:0040F140 ; =============== S U B R O U T I N E =======================================
.text:0040F140
.text:0040F140 ; Attributes: thunk
.text:0040F140
.text:0040F140 ; int __cdecl isalpha(int C)
.text:0040F140 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:0040F140
.text:0040F140 C               = dword ptr  4
.text:0040F140
.text:0040F140                 jmp     ds:__imp_isalpha
.text:0040F140 isalpha         endp
.text:0040F140
.text:0040F140 ; ---------------------------------------------------------------------------
.text:0040F146                 align 10h
.text:0040F150
.text:0040F150 ; =============== S U B R O U T I N E =======================================
.text:0040F150
.text:0040F150 ; Attributes: thunk
.text:0040F150
.text:0040F150 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:0040F150 _stricmp_0      proc near               ; CODE XREF: .text:00408514↑p
.text:0040F150
.text:0040F150 String1         = dword ptr  4
.text:0040F150 String2         = dword ptr  8
.text:0040F150
.text:0040F150                 jmp     ds:__imp__stricmp_0
.text:0040F150 _stricmp_0      endp
.text:0040F150
.text:0040F150 ; ---------------------------------------------------------------------------
.text:0040F156                 align 10h
.text:0040F160
.text:0040F160 ; =============== S U B R O U T I N E =======================================
.text:0040F160
.text:0040F160 ; Attributes: thunk
.text:0040F160
.text:0040F160 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:0040F160 strstr          proc near               ; CODE XREF: sub_408E90+3BF↑p
.text:0040F160                                         ; sub_408E90+3DC↑p ...
.text:0040F160
.text:0040F160 Str             = dword ptr  4
.text:0040F160 SubStr          = dword ptr  8
.text:0040F160
.text:0040F160                 jmp     ds:__imp_strstr
.text:0040F160 strstr          endp
.text:0040F160
.text:0040F160 ; ---------------------------------------------------------------------------
.text:0040F166                 align 10h
.text:0040F170
.text:0040F170 ; =============== S U B R O U T I N E =======================================
.text:0040F170
.text:0040F170 ; Attributes: thunk
.text:0040F170
.text:0040F170 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:0040F170 sprintf         proc near               ; CODE XREF: .text:0040A3EA↑p
.text:0040F170                                         ; .text:0040A40B↑p ...
.text:0040F170
.text:0040F170 Buffer          = dword ptr  4
.text:0040F170 Format          = dword ptr  8
.text:0040F170
.text:0040F170                 jmp     ds:__imp_sprintf
.text:0040F170 sprintf         endp
.text:0040F170
.text:0040F170 ; ---------------------------------------------------------------------------
.text:0040F176                 align 10h
.text:0040F180
.text:0040F180 ; =============== S U B R O U T I N E =======================================
.text:0040F180
.text:0040F180 ; Attributes: thunk
.text:0040F180
.text:0040F180 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:0040F180 strncpy         proc near               ; CODE XREF: sub_40AF40+BE↑p
.text:0040F180                                         ; .text:0040B7BA↑p ...
.text:0040F180
.text:0040F180 Destination     = dword ptr  4
.text:0040F180 Source          = dword ptr  8
.text:0040F180 Count           = dword ptr  0Ch
.text:0040F180
.text:0040F180                 jmp     ds:__imp_strncpy
.text:0040F180 strncpy         endp
.text:0040F180
.text:0040F180 ; ---------------------------------------------------------------------------
.text:0040F186                 align 10h
.text:0040F190
.text:0040F190 ; =============== S U B R O U T I N E =======================================
.text:0040F190
.text:0040F190 ; Attributes: thunk
.text:0040F190
.text:0040F190 ; int __cdecl toupper(int C)
.text:0040F190 toupper         proc near               ; CODE XREF: sub_40AF40+10E↑p
.text:0040F190
.text:0040F190 C               = dword ptr  4
.text:0040F190
.text:0040F190                 jmp     ds:__imp_toupper
.text:0040F190 toupper         endp
.text:0040F190
.text:0040F190 ; ---------------------------------------------------------------------------
.text:0040F196                 align 10h
.text:0040F1A0
.text:0040F1A0 ; =============== S U B R O U T I N E =======================================
.text:0040F1A0
.text:0040F1A0 ; Attributes: thunk
.text:0040F1A0
.text:0040F1A0 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:0040F1A0 sscanf          proc near               ; CODE XREF: .text:0040BE8E↑p
.text:0040F1A0
.text:0040F1A0 Buffer          = dword ptr  4
.text:0040F1A0 Format          = dword ptr  8
.text:0040F1A0
.text:0040F1A0                 jmp     ds:__imp_sscanf
.text:0040F1A0 sscanf          endp
.text:0040F1A0
.text:0040F1A0 ; ---------------------------------------------------------------------------
.text:0040F1A6                 align 10h
.text:0040F1B0
.text:0040F1B0 ; =============== S U B R O U T I N E =======================================
.text:0040F1B0
.text:0040F1B0 ; Attributes: thunk
.text:0040F1B0
.text:0040F1B0 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:0040F1B0 fopen           proc near               ; CODE XREF: sub_40C78F+26↑p
.text:0040F1B0                                         ; sub_40C78F+99↑p
.text:0040F1B0
.text:0040F1B0 FileName        = dword ptr  4
.text:0040F1B0 Mode            = dword ptr  8
.text:0040F1B0
.text:0040F1B0                 jmp     ds:__imp_fopen
.text:0040F1B0 fopen           endp
.text:0040F1B0
.text:0040F1B0 ; ---------------------------------------------------------------------------
.text:0040F1B6                 align 10h
.text:0040F1C0
.text:0040F1C0 ; =============== S U B R O U T I N E =======================================
.text:0040F1C0
.text:0040F1C0 ; Attributes: thunk
.text:0040F1C0
.text:0040F1C0 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:0040F1C0 _get_osfhandle  proc near               ; CODE XREF: sub_40C940+3A↑p
.text:0040F1C0                                         ; sub_40CA00+15↑p
.text:0040F1C0
.text:0040F1C0 FileHandle      = dword ptr  4
.text:0040F1C0
.text:0040F1C0                 jmp     ds:__imp__get_osfhandle
.text:0040F1C0 _get_osfhandle  endp
.text:0040F1C0
.text:0040F1C0 ; ---------------------------------------------------------------------------
.text:0040F1C6                 align 10h
.text:0040F1D0
.text:0040F1D0 ; =============== S U B R O U T I N E =======================================
.text:0040F1D0
.text:0040F1D0 ; Attributes: thunk
.text:0040F1D0
.text:0040F1D0 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:0040F1D0 _filelengthi64  proc near               ; CODE XREF: sub_40CA00+1F↑p
.text:0040F1D0
.text:0040F1D0 FileHandle      = dword ptr  4
.text:0040F1D0
.text:0040F1D0                 jmp     ds:__imp__filelengthi64
.text:0040F1D0 _filelengthi64  endp
.text:0040F1D0
.text:0040F1D0 ; ---------------------------------------------------------------------------
.text:0040F1D6                 align 10h
.text:0040F1E0
.text:0040F1E0 ; =============== S U B R O U T I N E =======================================
.text:0040F1E0
.text:0040F1E0 ; Attributes: thunk
.text:0040F1E0
.text:0040F1E0 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:0040F1E0 strpbrk         proc near               ; CODE XREF: sub_40CA60+87↑p
.text:0040F1E0
.text:0040F1E0 Str             = dword ptr  4
.text:0040F1E0 Control         = dword ptr  8
.text:0040F1E0
.text:0040F1E0                 jmp     ds:__imp_strpbrk
.text:0040F1E0 strpbrk         endp
.text:0040F1E0
.text:0040F1E0 ; ---------------------------------------------------------------------------
.text:0040F1E6                 align 10h
.text:0040F1F0
.text:0040F1F0 ; =============== S U B R O U T I N E =======================================
.text:0040F1F0
.text:0040F1F0 ; Attributes: thunk
.text:0040F1F0
.text:0040F1F0 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:0040F1F0 _fdopen         proc near               ; CODE XREF: sub_40CB00+69↑p
.text:0040F1F0
.text:0040F1F0 FileHandle      = dword ptr  4
.text:0040F1F0 Format          = dword ptr  8
.text:0040F1F0
.text:0040F1F0                 jmp     ds:__imp__fdopen
.text:0040F1F0 _fdopen         endp
.text:0040F1F0
.text:0040F1F0 ; ---------------------------------------------------------------------------
.text:0040F1F6                 align 10h
.text:0040F200
.text:0040F200 ; =============== S U B R O U T I N E =======================================
.text:0040F200
.text:0040F200 ; Attributes: thunk
.text:0040F200
.text:0040F200 ; int __cdecl close_0(int FileHandle)
.text:0040F200 _close_0        proc near               ; CODE XREF: sub_40CB00+90↑p
.text:0040F200
.text:0040F200 FileHandle      = dword ptr  4
.text:0040F200
.text:0040F200                 jmp     ds:__imp__close_0
.text:0040F200 _close_0        endp
.text:0040F200
.text:0040F200 ; ---------------------------------------------------------------------------
.text:0040F206                 align 10h
.text:0040F210
.text:0040F210 ; =============== S U B R O U T I N E =======================================
.text:0040F210
.text:0040F210 ; Attributes: thunk
.text:0040F210
.text:0040F210 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:0040F210 _open_0         proc near               ; CODE XREF: sub_40CF50:loc_40D2E0↑p
.text:0040F210
.text:0040F210 FileName        = dword ptr  4
.text:0040F210 OpenFlag        = dword ptr  8
.text:0040F210
.text:0040F210                 jmp     ds:__imp__open_0
.text:0040F210 _open_0         endp
.text:0040F210
.text:0040F210 ; ---------------------------------------------------------------------------
.text:0040F216                 align 10h
.text:0040F220
.text:0040F220 ; =============== S U B R O U T I N E =======================================
.text:0040F220
.text:0040F220 ; Attributes: thunk
.text:0040F220
.text:0040F220 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0040F220 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0040F220
.text:0040F220 lpTopLevelExceptionFilter= dword ptr  4
.text:0040F220
.text:0040F220                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0040F220 SetUnhandledExceptionFilter endp
.text:0040F220
.text:0040F220 ; ---------------------------------------------------------------------------
.text:0040F226                 align 10h
.text:0040F230
.text:0040F230 ; =============== S U B R O U T I N E =======================================
.text:0040F230
.text:0040F230 ; Attributes: noreturn thunk
.text:0040F230
.text:0040F230 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0040F230 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:0040F230
.text:0040F230 uExitCode       = dword ptr  4
.text:0040F230
.text:0040F230                 jmp     ds:__imp_ExitProcess
.text:0040F230 ExitProcess     endp
.text:0040F230
.text:0040F230 ; ---------------------------------------------------------------------------
.text:0040F236                 align 10h
.text:0040F240
.text:0040F240 ; =============== S U B R O U T I N E =======================================
.text:0040F240
.text:0040F240 ; Attributes: thunk
.text:0040F240
.text:0040F240 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0040F240 CreateDirectoryA proc near              ; CODE XREF: sub_407190+22↑p
.text:0040F240
.text:0040F240 lpPathName      = dword ptr  4
.text:0040F240 lpSecurityAttributes= dword ptr  8
.text:0040F240
.text:0040F240                 jmp     ds:__imp_CreateDirectoryA
.text:0040F240 CreateDirectoryA endp
.text:0040F240
.text:0040F240 ; ---------------------------------------------------------------------------
.text:0040F246                 align 10h
.text:0040F250
.text:0040F250 ; =============== S U B R O U T I N E =======================================
.text:0040F250
.text:0040F250 ; Attributes: thunk
.text:0040F250
.text:0040F250 ; BOOL __stdcall SetCurrentDirectoryA(LPCSTR lpPathName)
.text:0040F250 SetCurrentDirectoryA proc near          ; CODE XREF: sub_407300+12↑p
.text:0040F250
.text:0040F250 lpPathName      = dword ptr  4
.text:0040F250
.text:0040F250                 jmp     ds:__imp_SetCurrentDirectoryA
.text:0040F250 SetCurrentDirectoryA endp
.text:0040F250
.text:0040F250 ; ---------------------------------------------------------------------------
.text:0040F256                 align 10h
.text:0040F260
.text:0040F260 ; =============== S U B R O U T I N E =======================================
.text:0040F260
.text:0040F260 ; Attributes: thunk
.text:0040F260
.text:0040F260 ; DWORD __stdcall GetLastError()
.text:0040F260 GetLastError    proc near               ; CODE XREF: sub_4076C0+3↑p
.text:0040F260                                         ; sub_408E90:loc_409119↑p ...
.text:0040F260                 jmp     ds:__imp_GetLastError
.text:0040F260 GetLastError    endp
.text:0040F260
.text:0040F260 ; ---------------------------------------------------------------------------
.text:0040F266                 align 10h
.text:0040F270
.text:0040F270 ; =============== S U B R O U T I N E =======================================
.text:0040F270
.text:0040F270 ; Attributes: thunk
.text:0040F270
.text:0040F270 ; BOOL __stdcall AreFileApisANSI()
.text:0040F270 AreFileApisANSI proc near               ; CODE XREF: sub_4076E0+89↑p
.text:0040F270                 jmp     ds:__imp_AreFileApisANSI
.text:0040F270 AreFileApisANSI endp
.text:0040F270
.text:0040F270 ; ---------------------------------------------------------------------------
.text:0040F276                 align 10h
.text:0040F280
.text:0040F280 ; =============== S U B R O U T I N E =======================================
.text:0040F280
.text:0040F280 ; Attributes: thunk
.text:0040F280
.text:0040F280 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:0040F280 MultiByteToWideChar proc near           ; CODE XREF: sub_4076E0+BD↑p
.text:0040F280
.text:0040F280 CodePage        = dword ptr  4
.text:0040F280 dwFlags         = dword ptr  8
.text:0040F280 lpMultiByteStr  = dword ptr  0Ch
.text:0040F280 cbMultiByte     = dword ptr  10h
.text:0040F280 lpWideCharStr   = dword ptr  14h
.text:0040F280 cchWideChar     = dword ptr  18h
.text:0040F280
.text:0040F280                 jmp     ds:__imp_MultiByteToWideChar
.text:0040F280 MultiByteToWideChar endp
.text:0040F280
.text:0040F280 ; ---------------------------------------------------------------------------
.text:0040F286                 align 10h
.text:0040F290
.text:0040F290 ; =============== S U B R O U T I N E =======================================
.text:0040F290
.text:0040F290 ; Attributes: thunk
.text:0040F290
.text:0040F290 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:0040F290 lstrcpyA        proc near               ; CODE XREF: sub_4076E0+128↑p
.text:0040F290
.text:0040F290 lpString1       = dword ptr  4
.text:0040F290 lpString2       = dword ptr  8
.text:0040F290
.text:0040F290                 jmp     ds:__imp_lstrcpyA
.text:0040F290 lstrcpyA        endp
.text:0040F290
.text:0040F290 ; ---------------------------------------------------------------------------
.text:0040F296                 align 10h
.text:0040F2A0
.text:0040F2A0 ; =============== S U B R O U T I N E =======================================
.text:0040F2A0
.text:0040F2A0 ; Attributes: thunk
.text:0040F2A0
.text:0040F2A0 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:0040F2A0 SetErrorMode    proc near               ; CODE XREF: sub_407860+80↑p
.text:0040F2A0                                         ; sub_407860+A9↑p ...
.text:0040F2A0
.text:0040F2A0 uMode           = dword ptr  4
.text:0040F2A0
.text:0040F2A0                 jmp     ds:__imp_SetErrorMode
.text:0040F2A0 SetErrorMode    endp
.text:0040F2A0
.text:0040F2A0 ; ---------------------------------------------------------------------------
.text:0040F2A6                 align 10h
.text:0040F2B0
.text:0040F2B0 ; =============== S U B R O U T I N E =======================================
.text:0040F2B0
.text:0040F2B0 ; Attributes: thunk
.text:0040F2B0
.text:0040F2B0 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040F2B0 FindFirstFileA  proc near               ; CODE XREF: _win32_longpath+CA↑p
.text:0040F2B0                                         ; sub_4086D0+CE↑p ...
.text:0040F2B0
.text:0040F2B0 lpFileName      = dword ptr  4
.text:0040F2B0 lpFindFileData  = dword ptr  8
.text:0040F2B0
.text:0040F2B0                 jmp     ds:__imp_FindFirstFileA
.text:0040F2B0 FindFirstFileA  endp
.text:0040F2B0
.text:0040F2B0 ; ---------------------------------------------------------------------------
.text:0040F2B6                 align 10h
.text:0040F2C0
.text:0040F2C0 ; =============== S U B R O U T I N E =======================================
.text:0040F2C0
.text:0040F2C0 ; Attributes: thunk
.text:0040F2C0
.text:0040F2C0 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:0040F2C0 FindClose       proc near               ; CODE XREF: _win32_longpath+144↑p
.text:0040F2C0                                         ; _win32_longpath+185↑p ...
.text:0040F2C0
.text:0040F2C0 hFindFile       = dword ptr  4
.text:0040F2C0
.text:0040F2C0                 jmp     ds:__imp_FindClose
.text:0040F2C0 FindClose       endp
.text:0040F2C0
.text:0040F2C0 ; ---------------------------------------------------------------------------
.text:0040F2C6                 align 10h
.text:0040F2D0
.text:0040F2D0 ; =============== S U B R O U T I N E =======================================
.text:0040F2D0
.text:0040F2D0 ; Attributes: thunk
.text:0040F2D0
.text:0040F2D0 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:0040F2D0 GetModuleFileNameA proc near            ; CODE XREF: sub_408390+1C↑p
.text:0040F2D0
.text:0040F2D0 hModule         = dword ptr  4
.text:0040F2D0 lpFilename      = dword ptr  8
.text:0040F2D0 nSize           = dword ptr  0Ch
.text:0040F2D0
.text:0040F2D0                 jmp     ds:__imp_GetModuleFileNameA
.text:0040F2D0 GetModuleFileNameA endp
.text:0040F2D0
.text:0040F2D0 ; ---------------------------------------------------------------------------
.text:0040F2D6                 align 10h
.text:0040F2E0
.text:0040F2E0 ; =============== S U B R O U T I N E =======================================
.text:0040F2E0
.text:0040F2E0 ; Attributes: thunk
.text:0040F2E0
.text:0040F2E0 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:0040F2E0 GetModuleHandleA proc near              ; CODE XREF: .text:0040857E↑p
.text:0040F2E0                                         ; sub_4086D0+18↑p ...
.text:0040F2E0
.text:0040F2E0 lpModuleName    = dword ptr  4
.text:0040F2E0
.text:0040F2E0                 jmp     ds:__imp_GetModuleHandleA
.text:0040F2E0 GetModuleHandleA endp
.text:0040F2E0
.text:0040F2E0 ; ---------------------------------------------------------------------------
.text:0040F2E6                 align 10h
.text:0040F2F0
.text:0040F2F0 ; =============== S U B R O U T I N E =======================================
.text:0040F2F0
.text:0040F2F0 ; Attributes: thunk
.text:0040F2F0
.text:0040F2F0 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:0040F2F0 GetProcAddress  proc near               ; CODE XREF: .text:00408591↑p
.text:0040F2F0                                         ; sub_4086D0+33↑p ...
.text:0040F2F0
.text:0040F2F0 hModule         = dword ptr  4
.text:0040F2F0 lpProcName      = dword ptr  8
.text:0040F2F0
.text:0040F2F0                 jmp     ds:__imp_GetProcAddress
.text:0040F2F0 GetProcAddress  endp
.text:0040F2F0
.text:0040F2F0 ; ---------------------------------------------------------------------------
.text:0040F2F6                 align 10h
.text:0040F300
.text:0040F300 ; =============== S U B R O U T I N E =======================================
.text:0040F300
.text:0040F300 ; Attributes: thunk
.text:0040F300
.text:0040F300 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:0040F300 GetShortPathNameA proc near             ; CODE XREF: .text:00408616↑p
.text:0040F300                                         ; .text:00408640↑p
.text:0040F300
.text:0040F300 lpszLongPath    = dword ptr  4
.text:0040F300 lpszShortPath   = dword ptr  8
.text:0040F300 cchBuffer       = dword ptr  0Ch
.text:0040F300
.text:0040F300                 jmp     ds:__imp_GetShortPathNameA
.text:0040F300 GetShortPathNameA endp
.text:0040F300
.text:0040F300 ; ---------------------------------------------------------------------------
.text:0040F306                 align 10h
.text:0040F310
.text:0040F310 ; =============== S U B R O U T I N E =======================================
.text:0040F310
.text:0040F310 ; Attributes: thunk
.text:0040F310
.text:0040F310 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:0040F310 GetFileAttributesA proc near            ; CODE XREF: sub_4086D0+47↑p
.text:0040F310                                         ; sub_40AE60+62↑p
.text:0040F310
.text:0040F310 lpFileName      = dword ptr  4
.text:0040F310
.text:0040F310                 jmp     ds:__imp_GetFileAttributesA
.text:0040F310 GetFileAttributesA endp
.text:0040F310
.text:0040F310 ; ---------------------------------------------------------------------------
.text:0040F316                 align 10h
.text:0040F320
.text:0040F320 ; =============== S U B R O U T I N E =======================================
.text:0040F320
.text:0040F320 ; Attributes: thunk
.text:0040F320
.text:0040F320 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:0040F320 FreeLibrary     proc near               ; CODE XREF: sub_4086D0+A4↑p
.text:0040F320                                         ; sub_408840+11D↑p ...
.text:0040F320
.text:0040F320 hLibModule      = dword ptr  4
.text:0040F320
.text:0040F320                 jmp     ds:__imp_FreeLibrary
.text:0040F320 FreeLibrary     endp
.text:0040F320
.text:0040F320 ; ---------------------------------------------------------------------------
.text:0040F326                 align 10h
.text:0040F330
.text:0040F330 ; =============== S U B R O U T I N E =======================================
.text:0040F330
.text:0040F330 ; Attributes: thunk
.text:0040F330
.text:0040F330 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:0040F330 LoadLibraryA    proc near               ; CODE XREF: sub_408840+13↑p
.text:0040F330                                         ; sub_408E90+134↑p ...
.text:0040F330
.text:0040F330 lpLibFileName   = dword ptr  4
.text:0040F330
.text:0040F330                 jmp     ds:__imp_LoadLibraryA
.text:0040F330 LoadLibraryA    endp
.text:0040F330
.text:0040F330 ; ---------------------------------------------------------------------------
.text:0040F336                 align 10h
.text:0040F340
.text:0040F340 ; =============== S U B R O U T I N E =======================================
.text:0040F340
.text:0040F340 ; Attributes: thunk
.text:0040F340
.text:0040F340 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040F340 FindNextFileA   proc near               ; CODE XREF: sub_408840+FF↑p
.text:0040F340
.text:0040F340 hFindFile       = dword ptr  4
.text:0040F340 lpFindFileData  = dword ptr  8
.text:0040F340
.text:0040F340                 jmp     ds:__imp_FindNextFileA
.text:0040F340 FindNextFileA   endp
.text:0040F340
.text:0040F340 ; ---------------------------------------------------------------------------
.text:0040F346                 align 10h
.text:0040F350
.text:0040F350 ; =============== S U B R O U T I N E =======================================
.text:0040F350
.text:0040F350 ; Attributes: thunk
.text:0040F350
.text:0040F350 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:0040F350 GetFileType     proc near               ; CODE XREF: sub_4089C0+43↑p
.text:0040F350                                         ; .text:0040967A↑p
.text:0040F350
.text:0040F350 hFile           = dword ptr  4
.text:0040F350
.text:0040F350                 jmp     ds:__imp_GetFileType
.text:0040F350 GetFileType     endp
.text:0040F350
.text:0040F350 ; ---------------------------------------------------------------------------
.text:0040F356                 align 10h
.text:0040F360
.text:0040F360 ; =============== S U B R O U T I N E =======================================
.text:0040F360
.text:0040F360 ; Attributes: thunk
.text:0040F360
.text:0040F360 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:0040F360 GetFileInformationByHandle proc near    ; CODE XREF: sub_4089C0+69↑p
.text:0040F360
.text:0040F360 hFile           = dword ptr  4
.text:0040F360 lpFileInformation= dword ptr  8
.text:0040F360
.text:0040F360                 jmp     ds:__imp_GetFileInformationByHandle
.text:0040F360 GetFileInformationByHandle endp
.text:0040F360
.text:0040F360 ; ---------------------------------------------------------------------------
.text:0040F366                 align 10h
.text:0040F370
.text:0040F370 ; =============== S U B R O U T I N E =======================================
.text:0040F370
.text:0040F370 ; Attributes: thunk
.text:0040F370
.text:0040F370 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:0040F370 GetFileSize     proc near               ; CODE XREF: sub_4089C0+3F2↑p
.text:0040F370
.text:0040F370 hFile           = dword ptr  4
.text:0040F370 lpFileSizeHigh  = dword ptr  8
.text:0040F370
.text:0040F370                 jmp     ds:__imp_GetFileSize
.text:0040F370 GetFileSize     endp
.text:0040F370
.text:0040F370 ; ---------------------------------------------------------------------------
.text:0040F376                 align 10h
.text:0040F380
.text:0040F380 ; =============== S U B R O U T I N E =======================================
.text:0040F380
.text:0040F380 ; Attributes: thunk
.text:0040F380
.text:0040F380 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:0040F380 PeekNamedPipe   proc near               ; CODE XREF: sub_4089C0+439↑p
.text:0040F380
.text:0040F380 hNamedPipe      = dword ptr  4
.text:0040F380 lpBuffer        = dword ptr  8
.text:0040F380 nBufferSize     = dword ptr  0Ch
.text:0040F380 lpBytesRead     = dword ptr  10h
.text:0040F380 lpTotalBytesAvail= dword ptr  14h
.text:0040F380 lpBytesLeftThisMessage= dword ptr  18h
.text:0040F380
.text:0040F380                 jmp     ds:__imp_PeekNamedPipe
.text:0040F380 PeekNamedPipe   endp
.text:0040F380
.text:0040F380 ; ---------------------------------------------------------------------------
.text:0040F386                 align 10h
.text:0040F390
.text:0040F390 ; =============== S U B R O U T I N E =======================================
.text:0040F390
.text:0040F390 ; Attributes: thunk
.text:0040F390
.text:0040F390 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:0040F390 GetDriveTypeA   proc near               ; CODE XREF: sub_408E90+4C↑p
.text:0040F390
.text:0040F390 lpRootPathName  = dword ptr  4
.text:0040F390
.text:0040F390                 jmp     ds:__imp_GetDriveTypeA
.text:0040F390 GetDriveTypeA   endp
.text:0040F390
.text:0040F390 ; ---------------------------------------------------------------------------
.text:0040F396                 align 10h
.text:0040F3A0
.text:0040F3A0 ; =============== S U B R O U T I N E =======================================
.text:0040F3A0
.text:0040F3A0 ; Attributes: thunk
.text:0040F3A0
.text:0040F3A0 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:0040F3A0 GetVolumeInformationA proc near         ; CODE XREF: sub_409390+64↑p
.text:0040F3A0                                         ; .text:0040993C↑p ...
.text:0040F3A0
.text:0040F3A0 lpRootPathName  = dword ptr  4
.text:0040F3A0 lpVolumeNameBuffer= dword ptr  8
.text:0040F3A0 nVolumeNameSize = dword ptr  0Ch
.text:0040F3A0 lpVolumeSerialNumber= dword ptr  10h
.text:0040F3A0 lpMaximumComponentLength= dword ptr  14h
.text:0040F3A0 lpFileSystemFlags= dword ptr  18h
.text:0040F3A0 lpFileSystemNameBuffer= dword ptr  1Ch
.text:0040F3A0 nFileSystemNameSize= dword ptr  20h
.text:0040F3A0
.text:0040F3A0                 jmp     ds:__imp_GetVolumeInformationA
.text:0040F3A0 GetVolumeInformationA endp
.text:0040F3A0
.text:0040F3A0 ; ---------------------------------------------------------------------------
.text:0040F3A6                 align 10h
.text:0040F3B0
.text:0040F3B0 ; =============== S U B R O U T I N E =======================================
.text:0040F3B0
.text:0040F3B0 ; Attributes: thunk
.text:0040F3B0
.text:0040F3B0 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:0040F3B0 CreateFileA     proc near               ; CODE XREF: sub_407940+27E6↑p
.text:0040F3B0                                         ; .text:0040B533↑p ...
.text:0040F3B0
.text:0040F3B0 lpFileName      = dword ptr  4
.text:0040F3B0 dwDesiredAccess = dword ptr  8
.text:0040F3B0 dwShareMode     = dword ptr  0Ch
.text:0040F3B0 lpSecurityAttributes= dword ptr  10h
.text:0040F3B0 dwCreationDisposition= dword ptr  14h
.text:0040F3B0 dwFlagsAndAttributes= dword ptr  18h
.text:0040F3B0 hTemplateFile   = dword ptr  1Ch
.text:0040F3B0
.text:0040F3B0                 jmp     ds:__imp_CreateFileA
.text:0040F3B0 CreateFileA     endp
.text:0040F3B0
.text:0040F3B0 ; ---------------------------------------------------------------------------
.text:0040F3B6                 align 10h
.text:0040F3C0
.text:0040F3C0 ; =============== S U B R O U T I N E =======================================
.text:0040F3C0
.text:0040F3C0 ; Attributes: thunk
.text:0040F3C0
.text:0040F3C0 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:0040F3C0 CloseHandle     proc near               ; CODE XREF: sub_407940+2801↑p
.text:0040F3C0                                         ; .text:0040B5A9↑p ...
.text:0040F3C0
.text:0040F3C0 hObject         = dword ptr  4
.text:0040F3C0
.text:0040F3C0                 jmp     ds:__imp_CloseHandle
.text:0040F3C0 CloseHandle     endp
.text:0040F3C0
.text:0040F3C0 ; ---------------------------------------------------------------------------
.text:0040F3C6                 align 10h
.text:0040F3D0
.text:0040F3D0 ; =============== S U B R O U T I N E =======================================
.text:0040F3D0
.text:0040F3D0 ; Attributes: thunk
.text:0040F3D0
.text:0040F3D0 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:0040F3D0 lstrcmpiA       proc near               ; CODE XREF: .text:0040A67B↑p
.text:0040F3D0                                         ; .text:0040A692↑p ...
.text:0040F3D0
.text:0040F3D0 lpString1       = dword ptr  4
.text:0040F3D0 lpString2       = dword ptr  8
.text:0040F3D0
.text:0040F3D0                 jmp     ds:__imp_lstrcmpiA
.text:0040F3D0 lstrcmpiA       endp
.text:0040F3D0
.text:0040F3D0 ; ---------------------------------------------------------------------------
.text:0040F3D6                 align 10h
.text:0040F3E0
.text:0040F3E0 ; =============== S U B R O U T I N E =======================================
.text:0040F3E0
.text:0040F3E0 ; Attributes: thunk
.text:0040F3E0
.text:0040F3E0 ; DWORD __stdcall GetVersion()
.text:0040F3E0 GetVersion      proc near               ; CODE XREF: .text:0040AA03↑p
.text:0040F3E0                 jmp     ds:__imp_GetVersion
.text:0040F3E0 GetVersion      endp
.text:0040F3E0
.text:0040F3E0 ; ---------------------------------------------------------------------------
.text:0040F3E6                 align 10h
.text:0040F3F0
.text:0040F3F0 ; =============== S U B R O U T I N E =======================================
.text:0040F3F0
.text:0040F3F0 ; Attributes: thunk
.text:0040F3F0
.text:0040F3F0 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:0040F3F0 GetVersionExA   proc near               ; CODE XREF: sub_40AA90+32↑p
.text:0040F3F0                                         ; sub_40AA90+20B↑p
.text:0040F3F0
.text:0040F3F0 lpVersionInformation= dword ptr  4
.text:0040F3F0
.text:0040F3F0                 jmp     ds:__imp_GetVersionExA
.text:0040F3F0 GetVersionExA   endp
.text:0040F3F0
.text:0040F3F0 ; ---------------------------------------------------------------------------
.text:0040F3F6                 align 10h
.text:0040F400
.text:0040F400 ; =============== S U B R O U T I N E =======================================
.text:0040F400
.text:0040F400 ; Attributes: thunk
.text:0040F400
.text:0040F400 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:0040F400 GetFullPathNameA proc near              ; CODE XREF: sub_40AD30+45↑p
.text:0040F400                                         ; sub_40AD30+ED↑p
.text:0040F400
.text:0040F400 lpFileName      = dword ptr  4
.text:0040F400 nBufferLength   = dword ptr  8
.text:0040F400 lpBuffer        = dword ptr  0Ch
.text:0040F400 lpFilePart      = dword ptr  10h
.text:0040F400
.text:0040F400                 jmp     ds:__imp_GetFullPathNameA
.text:0040F400 GetFullPathNameA endp
.text:0040F400
.text:0040F400 ; ---------------------------------------------------------------------------
.text:0040F406                 align 10h
.text:0040F410
.text:0040F410 ; =============== S U B R O U T I N E =======================================
.text:0040F410
.text:0040F410 ; Attributes: thunk
.text:0040F410
.text:0040F410 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040F410 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040B1E8↑p
.text:0040F410                                         ; .text:0040B204↑p ...
.text:0040F410
.text:0040F410 nBufferLength   = dword ptr  4
.text:0040F410 lpBuffer        = dword ptr  8
.text:0040F410
.text:0040F410                 jmp     ds:__imp_GetCurrentDirectoryA
.text:0040F410 GetCurrentDirectoryA endp
.text:0040F410
.text:0040F410 ; ---------------------------------------------------------------------------
.text:0040F416                 align 10h
.text:0040F420
.text:0040F420 ; =============== S U B R O U T I N E =======================================
.text:0040F420
.text:0040F420 ; Attributes: thunk
.text:0040F420
.text:0040F420 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:0040F420 DeviceIoControl proc near               ; CODE XREF: .text:0040B59C↑p
.text:0040F420                                         ; sub_40B960+1E5↑p
.text:0040F420
.text:0040F420 hDevice         = dword ptr  4
.text:0040F420 dwIoControlCode = dword ptr  8
.text:0040F420 lpInBuffer      = dword ptr  0Ch
.text:0040F420 nInBufferSize   = dword ptr  10h
.text:0040F420 lpOutBuffer     = dword ptr  14h
.text:0040F420 nOutBufferSize  = dword ptr  18h
.text:0040F420 lpBytesReturned = dword ptr  1Ch
.text:0040F420 lpOverlapped    = dword ptr  20h
.text:0040F420
.text:0040F420                 jmp     ds:__imp_DeviceIoControl
.text:0040F420 DeviceIoControl endp
.text:0040F420
.text:0040F420 ; ---------------------------------------------------------------------------
.text:0040F426                 align 10h
.text:0040F430
.text:0040F430 ; =============== S U B R O U T I N E =======================================
.text:0040F430
.text:0040F430 ; Attributes: thunk
.text:0040F430
.text:0040F430 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:0040F430 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:0040B8F3↑p
.text:0040F430                                         ; sub_40B960+7B↑p ...
.text:0040F430
.text:0040F430 lpRootPathName  = dword ptr  4
.text:0040F430 lpSectorsPerCluster= dword ptr  8
.text:0040F430 lpBytesPerSector= dword ptr  0Ch
.text:0040F430 lpNumberOfFreeClusters= dword ptr  10h
.text:0040F430 lpTotalNumberOfClusters= dword ptr  14h
.text:0040F430
.text:0040F430                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:0040F430 GetDiskFreeSpaceA endp
.text:0040F430
.text:0040F430 ; ---------------------------------------------------------------------------
.text:0040F436                 align 10h
.text:0040F440
.text:0040F440 ; =============== S U B R O U T I N E =======================================
.text:0040F440
.text:0040F440 ; Attributes: thunk
.text:0040F440
.text:0040F440 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040F440 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040C04F↑p
.text:0040F440                                         ; .text:0040C07E↑p ...
.text:0040F440
.text:0040F440 nBufferLength   = dword ptr  4
.text:0040F440 lpBuffer        = dword ptr  8
.text:0040F440
.text:0040F440                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:0040F440 GetLogicalDriveStringsA endp
.text:0040F440
.text:0040F440 ; ---------------------------------------------------------------------------
.text:0040F446                 align 10h
.text:0040F450
.text:0040F450 ; =============== S U B R O U T I N E =======================================
.text:0040F450
.text:0040F450 ; Attributes: thunk
.text:0040F450
.text:0040F450 ; HANDLE __stdcall GetProcessHeap()
.text:0040F450 GetProcessHeap  proc near               ; CODE XREF: .text:0040C059↑p
.text:0040F450                                         ; sub_40C730+24↑p ...
.text:0040F450                 jmp     ds:__imp_GetProcessHeap
.text:0040F450 GetProcessHeap  endp
.text:0040F450
.text:0040F450 ; ---------------------------------------------------------------------------
.text:0040F456                 align 10h
.text:0040F460
.text:0040F460 ; =============== S U B R O U T I N E =======================================
.text:0040F460
.text:0040F460 ; Attributes: thunk
.text:0040F460
.text:0040F460 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:0040F460 HeapAlloc       proc near               ; CODE XREF: .text:0040C06D↑p
.text:0040F460                                         ; sub_40C730+38↑p ...
.text:0040F460
.text:0040F460 hHeap           = dword ptr  4
.text:0040F460 dwFlags         = dword ptr  8
.text:0040F460 dwBytes         = dword ptr  0Ch
.text:0040F460
.text:0040F460                 jmp     ds:__imp_HeapAlloc
.text:0040F460 HeapAlloc       endp
.text:0040F460
.text:0040F460 ; ---------------------------------------------------------------------------
.text:0040F466                 align 10h
.text:0040F470
.text:0040F470 ; =============== S U B R O U T I N E =======================================
.text:0040F470
.text:0040F470 ; Attributes: thunk
.text:0040F470
.text:0040F470 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:0040F470 HeapFree        proc near               ; CODE XREF: .text:0040C86D↑p
.text:0040F470
.text:0040F470 hHeap           = dword ptr  4
.text:0040F470 dwFlags         = dword ptr  8
.text:0040F470 lpMem           = dword ptr  0Ch
.text:0040F470
.text:0040F470                 jmp     ds:__imp_HeapFree
.text:0040F470 HeapFree        endp
.text:0040F470
.text:0040F470 ; ---------------------------------------------------------------------------
.text:0040F476                 align 10h
.text:0040F480
.text:0040F480 ; =============== S U B R O U T I N E =======================================
.text:0040F480
.text:0040F480 ; Attributes: thunk
.text:0040F480
.text:0040F480 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:0040F480 UnlockFile      proc near               ; CODE XREF: sub_40CA00+40↑p
.text:0040F480
.text:0040F480 hFile           = dword ptr  4
.text:0040F480 dwFileOffsetLow = dword ptr  8
.text:0040F480 dwFileOffsetHigh= dword ptr  0Ch
.text:0040F480 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:0040F480 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:0040F480
.text:0040F480                 jmp     ds:__imp_UnlockFile
.text:0040F480 UnlockFile      endp
.text:0040F480
.text:0040F480 ; ---------------------------------------------------------------------------
.text:0040F486                 align 10h
.text:0040F490
.text:0040F490 ; =============== S U B R O U T I N E =======================================
.text:0040F490
.text:0040F490 ; Attributes: thunk
.text:0040F490
.text:0040F490 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:0040F490 GetTimeZoneInformation proc near        ; CODE XREF: sub_40D400+22↑p
.text:0040F490
.text:0040F490 lpTimeZoneInformation= dword ptr  4
.text:0040F490
.text:0040F490                 jmp     ds:__imp_GetTimeZoneInformation
.text:0040F490 GetTimeZoneInformation endp
.text:0040F490
.text:0040F490 ; ---------------------------------------------------------------------------
.text:0040F496                 align 10h
.text:0040F4A0
.text:0040F4A0 ; =============== S U B R O U T I N E =======================================
.text:0040F4A0
.text:0040F4A0 ; Attributes: thunk
.text:0040F4A0
.text:0040F4A0 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:0040F4A0 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_40D400+4F↑p
.text:0040F4A0
.text:0040F4A0 lpSystemTimeAsFileTime= dword ptr  4
.text:0040F4A0
.text:0040F4A0                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:0040F4A0 GetSystemTimeAsFileTime endp
.text:0040F4A0
.text:0040F4A0 ; ---------------------------------------------------------------------------
.text:0040F4A6                 align 10h
.text:0040F4B0
.text:0040F4B0 ; =============== S U B R O U T I N E =======================================
.text:0040F4B0
.text:0040F4B0 ; Attributes: thunk
.text:0040F4B0
.text:0040F4B0 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:0040F4B0 RegOpenKeyExA   proc near               ; CODE XREF: .text:0040A601↑p
.text:0040F4B0
.text:0040F4B0 hKey            = dword ptr  4
.text:0040F4B0 lpSubKey        = dword ptr  8
.text:0040F4B0 ulOptions       = dword ptr  0Ch
.text:0040F4B0 samDesired      = dword ptr  10h
.text:0040F4B0 phkResult       = dword ptr  14h
.text:0040F4B0
.text:0040F4B0                 jmp     ds:__imp_RegOpenKeyExA
.text:0040F4B0 RegOpenKeyExA   endp
.text:0040F4B0
.text:0040F4B0 ; ---------------------------------------------------------------------------
.text:0040F4B6                 align 10h
.text:0040F4C0
.text:0040F4C0 ; =============== S U B R O U T I N E =======================================
.text:0040F4C0
.text:0040F4C0 ; Attributes: thunk
.text:0040F4C0
.text:0040F4C0 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:0040F4C0 RegQueryValueExA proc near              ; CODE XREF: .text:0040A644↑p
.text:0040F4C0
.text:0040F4C0 hKey            = dword ptr  4
.text:0040F4C0 lpValueName     = dword ptr  8
.text:0040F4C0 lpReserved      = dword ptr  0Ch
.text:0040F4C0 lpType          = dword ptr  10h
.text:0040F4C0 lpData          = dword ptr  14h
.text:0040F4C0 lpcbData        = dword ptr  18h
.text:0040F4C0
.text:0040F4C0                 jmp     ds:__imp_RegQueryValueExA
.text:0040F4C0 RegQueryValueExA endp
.text:0040F4C0
.text:0040F4C0 ; ---------------------------------------------------------------------------
.text:0040F4C6                 align 10h
.text:0040F4D0
.text:0040F4D0 ; =============== S U B R O U T I N E =======================================
.text:0040F4D0
.text:0040F4D0 ; Attributes: thunk
.text:0040F4D0
.text:0040F4D0 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:0040F4D0 RegCloseKey     proc near               ; CODE XREF: .text:0040A668↑p
.text:0040F4D0
.text:0040F4D0 hKey            = dword ptr  4
.text:0040F4D0
.text:0040F4D0                 jmp     ds:__imp_RegCloseKey
.text:0040F4D0 RegCloseKey     endp
.text:0040F4D0
.text:0040F4D0 ; ---------------------------------------------------------------------------
.text:0040F4D6                 db 2 dup(90h)
.text:0040F4D8                 dd 2 dup(0)
.text:0040F4E0                 dd 21400h, 0
.text:0040F4E8                 dd 0C0h, 46000000h
.text:0040F4F0 ; const IID rclsid
.text:0040F4F0 rclsid          dd 21401h               ; Data1
.text:0040F4F0                                         ; DATA XREF: sub_4076E0+4B↑o
.text:0040F4F0                 dw 0                    ; Data2
.text:0040F4F0                 dw 0                    ; Data3
.text:0040F4F0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040F500                 dd 214A0h, 0
.text:0040F508                 dd 0C0h, 46000000h, 214A1h, 0
.text:0040F518                 dd 0C0h, 46000000h, 214D0h, 0
.text:0040F528                 dd 0C0h, 46000000h, 214D1h, 0
.text:0040F538                 dd 0C0h, 46000000h, 214D2h, 0
.text:0040F548                 dd 0C0h, 46000000h, 214E1h, 0
.text:0040F558                 dd 0C0h, 46000000h, 214E2h, 0
.text:0040F568                 dd 0C0h, 46000000h, 214E3h, 0
.text:0040F578                 dd 0C0h, 46000000h, 214E4h, 0
.text:0040F588                 dd 0C0h, 46000000h, 21500h, 0
.text:0040F598                 dd 0C0h, 46000000h, 214E5h, 0
.text:0040F5A8                 dd 0C0h, 46000000h, 214E6h, 0
.text:0040F5B8                 dd 0C0h, 46000000h, 214E8h, 0
.text:0040F5C8                 dd 0C0h, 46000000h, 214E9h, 0
.text:0040F5D8                 dd 0C0h, 46000000h, 214EAh, 0
.text:0040F5E8                 dd 0C0h, 46000000h, 214EBh, 0
.text:0040F5F8                 dd 0C0h, 46000000h
.text:0040F600 ; const IID riid
.text:0040F600 riid            dd 214EEh               ; Data1
.text:0040F600                                         ; DATA XREF: sub_4076E0+2B↑o
.text:0040F600                 dw 0                    ; Data2
.text:0040F600                 dw 0                    ; Data3
.text:0040F600                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040F610                 dd 214EFh, 0
.text:0040F618                 dd 0C0h, 46000000h, 214F0h, 0
.text:0040F628                 dd 0C0h, 46000000h, 214F1h, 0
.text:0040F638                 dd 0C0h, 46000000h, 214F2h, 0
.text:0040F648                 dd 0C0h, 46000000h, 214F3h, 0
.text:0040F658                 dd 0C0h, 46000000h, 214F4h, 0
.text:0040F668                 dd 0C0h, 46000000h, 214F5h, 0
.text:0040F678                 dd 0C0h, 46000000h, 214F6h, 0
.text:0040F688                 dd 0C0h, 46000000h, 214F7h, 0
.text:0040F698                 dd 0C0h, 46000000h, 214F8h, 0
.text:0040F6A8                 dd 0C0h, 46000000h, 214F9h, 0
.text:0040F6B8                 dd 0C0h, 46000000h, 214FAh, 0
.text:0040F6C8                 dd 0C0h, 46000000h, 214FBh, 0
.text:0040F6D8                 dd 0C0h, 46000000h, 214FCh, 0
.text:0040F6E8                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:0040F6E8                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:0040F6E8                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:0040F6E8                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:0040F6E8                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040F6E8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:0040F6E8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:0040F6E8                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040F6E8                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:0040F6E8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:0040F7B8                 dd 0C0h, 46000000h, 2DF05h, 0
.text:0040F7C8                 dd 0C0h, 46000000h, 2DF06h, 0
.text:0040F7D8                 dd 0C0h, 46000000h, 2DF01h, 0
.text:0040F7E8                 dd 0C0h, 46000000h, 2DF09h, 0
.text:0040F7F8                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:0040F7F8                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:0040F7F8                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:0040F7F8                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:0040F7F8                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:0040F7F8                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:0040F7F8                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:0040F880 dword_40F880    dd 0FFFFFFFFh           ; DATA XREF: .text:0040EAA9↑r
.text:0040F880                                         ; .text:loc_40EAD0↑r ...
.text:0040F884 dword_40F884    dd 0                    ; DATA XREF: .text:loc_40EADC↑r
.text:0040F884                                         ; sub_40EB00:loc_40EB4D↑r
.text:0040F888                 dd 0FFFFFFFFh
.text:0040F88C dword_40F88C    dd 5Dh dup(0)           ; DATA XREF: .data:off_4100C4↓o
.text:0040FA00                 dd 180h dup(?)
.text:0040FA00 _text           ends
.text:0040FA00
.data:00410000 ; Section 2. (virtual address 00010000)
.data:00410000 ; Virtual size                  : 000000E0 (    224.)
.data:00410000 ; Section size in file          : 00000200 (    512.)
.data:00410000 ; Offset to raw data for section: 0000EE00
.data:00410000 ; Flags C0000040: Data Readable Writable
.data:00410000 ; Alignment     : default
.data:00410000 ; ===========================================================================
.data:00410000
.data:00410000 ; Segment type: Pure data
.data:00410000 ; Segment permissions: Read/Write
.data:00410000 _data           segment para public 'DATA' use32
.data:00410000                 assume cs:_data
.data:00410000                 ;org 410000h
.data:00410000 dword_410000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00410000                                         ; sub_401080+CC↑r
.data:00410004 dword_410004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00410004                                         ; sub_401080+D4↑r
.data:00410008                 align 10h
.data:00410010 dword_410010    dd 1                    ; DATA XREF: sub_4016F0+281↑r
.data:00410010                                         ; sub_4016F0:loc_401A09↑r ...
.data:00410014 dword_410014    dd 1                    ; DATA XREF: sub_403D00+11↑r
.data:00410014                                         ; .text:00403DA1↑r
.data:00410018 dword_410018    dd 3Fh                  ; DATA XREF: sub_403D00+7D↑w
.data:00410018                                         ; .text:00403E0D↑w
.data:0041001C                 align 10h
.data:00410020 ; char *Buffer
.data:00410020 Buffer          dd offset aCopyrightC2005
.data:00410020                                         ; DATA XREF: sub_4042F0+DC↑r
.data:00410020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00410024                 align 10h
.data:00410030 ; int Code
.data:00410030 Code            dd 1                    ; DATA XREF: sub_403F60+18↑r
.data:00410030                                         ; sub_404670+6D↑r ...
.data:00410034                 align 10h
.data:00410040 dword_410040    dd 1                    ; DATA XREF: sub_405FF0+22↑r
.data:00410040                                         ; sub_405FF0+65↑r ...
.data:00410044 dword_410044    dd 100h                 ; DATA XREF: sub_405FF0+3F↑o
.data:00410044                                         ; sub_405FF0+1A2↑r ...
.data:00410048 off_410048      dd offset unk_411050    ; DATA XREF: sub_405FF0+1AA↑r
.data:0041004C ; void *off_41004C
.data:0041004C off_41004C      dd offset dword_410044  ; DATA XREF: sub_405FF0+39↑r
.data:0041004C                                         ; sub_405FF0+60↑w ...
.data:00410050 dword_410050    dd 200h                 ; DATA XREF: sub_4089C0+2ED↑r
.data:00410050                                         ; sub_4089C0+2F8↑r ...
.data:00410054 ; char *off_410054
.data:00410054 off_410054      dd offset aComExeBatCmd ; DATA XREF: sub_408E90+3D3↑r
.data:00410054                                         ; sub_408E90+400↑r ...
.data:00410054                                         ; ".com;.exe;.bat;.cmd"
.data:00410058                 align 10h
.data:00410060 dword_410060    dd 1                    ; DATA XREF: .text:loc_40A4B7↑r
.data:00410060                                         ; sub_40AA90+202↑w
.data:00410064                 align 10h
.data:00410070 byte_410070     db 41h                  ; DATA XREF: sub_40B060+6B↑w
.data:00410070                                         ; sub_40B060:loc_40B174↑r
.data:00410071                 align 10h
.data:00410080 off_410080      dd offset aNotset       ; DATA XREF: .text:0040BC2A↑r
.data:00410080                                         ; .text:0040C872↑r
.data:00410080                                         ; "notset"
.data:00410084 off_410084      dd offset aNotset       ; DATA XREF: .text:0040BC42↑r
.data:00410084                                         ; .text:0040BC64↑r ...
.data:00410084                                         ; "notset"
.data:00410088                 align 10h
.data:00410090 dword_410090    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00410094                 align 10h
.data:004100A0 ; int Mode
.data:004100A0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004100A0                                         ; sub_401080+80↑r ...
.data:004100A4                 align 10h
.data:004100B0 dword_4100B0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004100B0                                         ; sub_401080+BA↑r
.data:004100B4                 align 10h
.data:004100C0 dword_4100C0    dd 0                    ; DATA XREF: sub_40EB00+9↑r
.data:004100C0                                         ; sub_40EB00+1D↑w
.data:004100C4 off_4100C4      dd offset dword_40F88C  ; DATA XREF: sub_40EA70+6↑r
.data:004100C4                                         ; sub_40EA70+17↑r ...
.data:004100C8                 align 1000h
.data:004100C8 _data           ends
.data:004100C8
.bss:00411000 ; Section 3. (virtual address 00011000)
.bss:00411000 ; Virtual size                  : 00000560 (   1376.)
.bss:00411000 ; Section size in file          : 00000000 (      0.)
.bss:00411000 ; Offset to raw data for section: 00000000
.bss:00411000 ; Flags C0000080: Bss Readable Writable
.bss:00411000 ; Alignment     : default
.bss:00411000 ; ===========================================================================
.bss:00411000
.bss:00411000 ; Segment type: Uninitialized
.bss:00411000 ; Segment permissions: Read/Write
.bss:00411000 _bss            segment para public 'BSS' use32
.bss:00411000                 assume cs:_bss
.bss:00411000                 ;org 411000h
.bss:00411000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00411000 byte_411000     db ?                    ; DATA XREF: sub_4016F0+7A↑w
.bss:00411000                                         ; sub_4016F0:loc_401812↑w ...
.bss:00411001                 align 10h
.bss:00411010 dword_411010    dd ?                    ; DATA XREF: sub_403D00+9↑o
.bss:00411010                                         ; sub_403D00+17↑w ...
.bss:00411014 dword_411014    dd ?                    ; DATA XREF: sub_403D00+21↑w
.bss:00411014                                         ; .text:00403DB9↑w
.bss:00411018 dword_411018    dd ?                    ; DATA XREF: sub_403D00+77↑r
.bss:00411018                                         ; .text:00403E07↑r
.bss:0041101C dword_41101C    dd ?                    ; DATA XREF: sub_403D00+6B↑r
.bss:0041101C                                         ; .text:00403DFB↑r
.bss:00411020                 align 40h
.bss:00411040 ; char *dword_411040
.bss:00411040 dword_411040    dd ?                    ; DATA XREF: .text:00404644↑w
.bss:00411040                                         ; sub_404670+58↑r
.bss:00411044                 align 10h
.bss:00411050 unk_411050      db    ? ;               ; DATA XREF: sub_405FF0+100↑o
.bss:00411050                                         ; .data:off_410048↑o
.bss:00411051                 db    ? ;
.bss:00411052                 db    ? ;
.bss:00411053                 db    ? ;
.bss:00411054                 db    ? ;
.bss:00411055                 db    ? ;
.bss:00411056                 db    ? ;
.bss:00411057                 db    ? ;
.bss:00411058                 db    ? ;
.bss:00411059                 db    ? ;
.bss:0041105A                 db    ? ;
.bss:0041105B                 db    ? ;
.bss:0041105C                 db    ? ;
.bss:0041105D                 db    ? ;
.bss:0041105E                 db    ? ;
.bss:0041105F                 db    ? ;
.bss:00411060                 db    ? ;
.bss:00411061                 db    ? ;
.bss:00411062                 db    ? ;
.bss:00411063                 db    ? ;
.bss:00411064                 db    ? ;
.bss:00411065                 db    ? ;
.bss:00411066                 db    ? ;
.bss:00411067                 db    ? ;
.bss:00411068                 db    ? ;
.bss:00411069                 db    ? ;
.bss:0041106A                 db    ? ;
.bss:0041106B                 db    ? ;
.bss:0041106C                 db    ? ;
.bss:0041106D                 db    ? ;
.bss:0041106E                 db    ? ;
.bss:0041106F                 db    ? ;
.bss:00411070                 db    ? ;
.bss:00411071                 db    ? ;
.bss:00411072                 db    ? ;
.bss:00411073                 db    ? ;
.bss:00411074                 db    ? ;
.bss:00411075                 db    ? ;
.bss:00411076                 db    ? ;
.bss:00411077                 db    ? ;
.bss:00411078                 db    ? ;
.bss:00411079                 db    ? ;
.bss:0041107A                 db    ? ;
.bss:0041107B                 db    ? ;
.bss:0041107C                 db    ? ;
.bss:0041107D                 db    ? ;
.bss:0041107E                 db    ? ;
.bss:0041107F                 db    ? ;
.bss:00411080                 db    ? ;
.bss:00411081                 db    ? ;
.bss:00411082                 db    ? ;
.bss:00411083                 db    ? ;
.bss:00411084                 db    ? ;
.bss:00411085                 db    ? ;
.bss:00411086                 db    ? ;
.bss:00411087                 db    ? ;
.bss:00411088                 db    ? ;
.bss:00411089                 db    ? ;
.bss:0041108A                 db    ? ;
.bss:0041108B                 db    ? ;
.bss:0041108C                 db    ? ;
.bss:0041108D                 db    ? ;
.bss:0041108E                 db    ? ;
.bss:0041108F                 db    ? ;
.bss:00411090                 db    ? ;
.bss:00411091                 db    ? ;
.bss:00411092                 db    ? ;
.bss:00411093                 db    ? ;
.bss:00411094                 db    ? ;
.bss:00411095                 db    ? ;
.bss:00411096                 db    ? ;
.bss:00411097                 db    ? ;
.bss:00411098                 db    ? ;
.bss:00411099                 db    ? ;
.bss:0041109A                 db    ? ;
.bss:0041109B                 db    ? ;
.bss:0041109C                 db    ? ;
.bss:0041109D                 db    ? ;
.bss:0041109E                 db    ? ;
.bss:0041109F                 db    ? ;
.bss:004110A0                 db    ? ;
.bss:004110A1                 db    ? ;
.bss:004110A2                 db    ? ;
.bss:004110A3                 db    ? ;
.bss:004110A4                 db    ? ;
.bss:004110A5                 db    ? ;
.bss:004110A6                 db    ? ;
.bss:004110A7                 db    ? ;
.bss:004110A8                 db    ? ;
.bss:004110A9                 db    ? ;
.bss:004110AA                 db    ? ;
.bss:004110AB                 db    ? ;
.bss:004110AC                 db    ? ;
.bss:004110AD                 db    ? ;
.bss:004110AE                 db    ? ;
.bss:004110AF                 db    ? ;
.bss:004110B0                 db    ? ;
.bss:004110B1                 db    ? ;
.bss:004110B2                 db    ? ;
.bss:004110B3                 db    ? ;
.bss:004110B4                 db    ? ;
.bss:004110B5                 db    ? ;
.bss:004110B6                 db    ? ;
.bss:004110B7                 db    ? ;
.bss:004110B8                 db    ? ;
.bss:004110B9                 db    ? ;
.bss:004110BA                 db    ? ;
.bss:004110BB                 db    ? ;
.bss:004110BC                 db    ? ;
.bss:004110BD                 db    ? ;
.bss:004110BE                 db    ? ;
.bss:004110BF                 db    ? ;
.bss:004110C0                 db    ? ;
.bss:004110C1                 db    ? ;
.bss:004110C2                 db    ? ;
.bss:004110C3                 db    ? ;
.bss:004110C4                 db    ? ;
.bss:004110C5                 db    ? ;
.bss:004110C6                 db    ? ;
.bss:004110C7                 db    ? ;
.bss:004110C8                 db    ? ;
.bss:004110C9                 db    ? ;
.bss:004110CA                 db    ? ;
.bss:004110CB                 db    ? ;
.bss:004110CC                 db    ? ;
.bss:004110CD                 db    ? ;
.bss:004110CE                 db    ? ;
.bss:004110CF                 db    ? ;
.bss:004110D0                 db    ? ;
.bss:004110D1                 db    ? ;
.bss:004110D2                 db    ? ;
.bss:004110D3                 db    ? ;
.bss:004110D4                 db    ? ;
.bss:004110D5                 db    ? ;
.bss:004110D6                 db    ? ;
.bss:004110D7                 db    ? ;
.bss:004110D8                 db    ? ;
.bss:004110D9                 db    ? ;
.bss:004110DA                 db    ? ;
.bss:004110DB                 db    ? ;
.bss:004110DC                 db    ? ;
.bss:004110DD                 db    ? ;
.bss:004110DE                 db    ? ;
.bss:004110DF                 db    ? ;
.bss:004110E0                 db    ? ;
.bss:004110E1                 db    ? ;
.bss:004110E2                 db    ? ;
.bss:004110E3                 db    ? ;
.bss:004110E4                 db    ? ;
.bss:004110E5                 db    ? ;
.bss:004110E6                 db    ? ;
.bss:004110E7                 db    ? ;
.bss:004110E8                 db    ? ;
.bss:004110E9                 db    ? ;
.bss:004110EA                 db    ? ;
.bss:004110EB                 db    ? ;
.bss:004110EC                 db    ? ;
.bss:004110ED                 db    ? ;
.bss:004110EE                 db    ? ;
.bss:004110EF                 db    ? ;
.bss:004110F0                 db    ? ;
.bss:004110F1                 db    ? ;
.bss:004110F2                 db    ? ;
.bss:004110F3                 db    ? ;
.bss:004110F4                 db    ? ;
.bss:004110F5                 db    ? ;
.bss:004110F6                 db    ? ;
.bss:004110F7                 db    ? ;
.bss:004110F8                 db    ? ;
.bss:004110F9                 db    ? ;
.bss:004110FA                 db    ? ;
.bss:004110FB                 db    ? ;
.bss:004110FC                 db    ? ;
.bss:004110FD                 db    ? ;
.bss:004110FE                 db    ? ;
.bss:004110FF                 db    ? ;
.bss:00411100                 db    ? ;
.bss:00411101                 db    ? ;
.bss:00411102                 db    ? ;
.bss:00411103                 db    ? ;
.bss:00411104                 db    ? ;
.bss:00411105                 db    ? ;
.bss:00411106                 db    ? ;
.bss:00411107                 db    ? ;
.bss:00411108                 db    ? ;
.bss:00411109                 db    ? ;
.bss:0041110A                 db    ? ;
.bss:0041110B                 db    ? ;
.bss:0041110C                 db    ? ;
.bss:0041110D                 db    ? ;
.bss:0041110E                 db    ? ;
.bss:0041110F                 db    ? ;
.bss:00411110                 db    ? ;
.bss:00411111                 db    ? ;
.bss:00411112                 db    ? ;
.bss:00411113                 db    ? ;
.bss:00411114                 db    ? ;
.bss:00411115                 db    ? ;
.bss:00411116                 db    ? ;
.bss:00411117                 db    ? ;
.bss:00411118                 db    ? ;
.bss:00411119                 db    ? ;
.bss:0041111A                 db    ? ;
.bss:0041111B                 db    ? ;
.bss:0041111C                 db    ? ;
.bss:0041111D                 db    ? ;
.bss:0041111E                 db    ? ;
.bss:0041111F                 db    ? ;
.bss:00411120                 db    ? ;
.bss:00411121                 db    ? ;
.bss:00411122                 db    ? ;
.bss:00411123                 db    ? ;
.bss:00411124                 db    ? ;
.bss:00411125                 db    ? ;
.bss:00411126                 db    ? ;
.bss:00411127                 db    ? ;
.bss:00411128                 db    ? ;
.bss:00411129                 db    ? ;
.bss:0041112A                 db    ? ;
.bss:0041112B                 db    ? ;
.bss:0041112C                 db    ? ;
.bss:0041112D                 db    ? ;
.bss:0041112E                 db    ? ;
.bss:0041112F                 db    ? ;
.bss:00411130                 db    ? ;
.bss:00411131                 db    ? ;
.bss:00411132                 db    ? ;
.bss:00411133                 db    ? ;
.bss:00411134                 db    ? ;
.bss:00411135                 db    ? ;
.bss:00411136                 db    ? ;
.bss:00411137                 db    ? ;
.bss:00411138                 db    ? ;
.bss:00411139                 db    ? ;
.bss:0041113A                 db    ? ;
.bss:0041113B                 db    ? ;
.bss:0041113C                 db    ? ;
.bss:0041113D                 db    ? ;
.bss:0041113E                 db    ? ;
.bss:0041113F                 db    ? ;
.bss:00411140                 db    ? ;
.bss:00411141                 db    ? ;
.bss:00411142                 db    ? ;
.bss:00411143                 db    ? ;
.bss:00411144                 db    ? ;
.bss:00411145                 db    ? ;
.bss:00411146                 db    ? ;
.bss:00411147                 db    ? ;
.bss:00411148                 db    ? ;
.bss:00411149                 db    ? ;
.bss:0041114A                 db    ? ;
.bss:0041114B                 db    ? ;
.bss:0041114C                 db    ? ;
.bss:0041114D                 db    ? ;
.bss:0041114E                 db    ? ;
.bss:0041114F                 db    ? ;
.bss:00411150 dword_411150    dd ?                    ; DATA XREF: .text:loc_405981↑o
.bss:00411150                                         ; .text:loc_4059A0↑o ...
.bss:00411154 dword_411154    dd ?                    ; DATA XREF: .text:loc_405A20↑o
.bss:00411154                                         ; .text:00405EA8↑r ...
.bss:00411158 dword_411158    dd ?                    ; DATA XREF: .text:00405EA2↑r
.bss:00411158                                         ; sub_405F50+2C↑r
.bss:0041115C dword_41115C    dd ?                    ; DATA XREF: .text:00405E96↑r
.bss:0041115C                                         ; sub_405F50+22↑r
.bss:00411160 dword_411160    dd ?                    ; DATA XREF: .text:00405EB2↑r
.bss:00411160                                         ; sub_405F50+36↑r
.bss:00411164 dword_411164    dd ?                    ; DATA XREF: .text:00405EC2↑r
.bss:00411164                                         ; sub_405F50+4E↑r
.bss:00411168 dword_411168    dd ?                    ; DATA XREF: .text:00405EDF↑r
.bss:00411168                                         ; sub_405F50+62↑r
.bss:0041116C dword_41116C    dd ?                    ; DATA XREF: .text:00405ED5↑r
.bss:0041116C                                         ; sub_405F50+70↑r
.bss:00411170 dword_411170    dd ?                    ; DATA XREF: .text:00405EB8↑r
.bss:00411170                                         ; sub_405F50+7A↑r
.bss:00411174                 align 10h
.bss:00411180 ; char *Str1
.bss:00411180 Str1            dd ?                    ; DATA XREF: sub_406FF4:loc_40702D↑w
.bss:00411180                                         ; sub_406FF4:loc_407160↑r
.bss:00411184                 align 10h
.bss:00411190 dword_411190    dd ?                    ; DATA XREF: sub_406FF4+2D↑r
.bss:00411190                                         ; sub_406FF4+3F↑w
.bss:00411194                 align 10h
.bss:004111A0 dword_4111A0    dd ?                    ; DATA XREF: sub_408E90+100↑r
.bss:004111A0                                         ; sub_408E90+308↑w
.bss:004111A4                 align 10h
.bss:004111B0 ; char *Str
.bss:004111B0 Str             dd ?                    ; DATA XREF: sub_408E90:loc_4091F4↑r
.bss:004111B0                                         ; sub_408E90+3B6↑r ...
.bss:004111B4                 align 10h
.bss:004111C0 dword_4111C0    dd ?                    ; DATA XREF: sub_40A980+8↑r
.bss:004111C0                                         ; sub_40AA90:loc_40AB12↑w ...
.bss:004111C4                 align 10h
.bss:004111D0 ; struct _OSVERSIONINFOA VersionInformation
.bss:004111D0 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_40AA90:loc_40AAB0↑o
.bss:004111D0                                         ; sub_40AA90+2C↑w ...
.bss:00411264 word_411264     dw ?                    ; DATA XREF: sub_40AA90:loc_40AB43↑r
.bss:00411266                 align 4
.bss:00411268 word_411268     dw ?                    ; DATA XREF: .text:loc_40A506↑r
.bss:00411268                                         ; .text:0040A534↑r ...
.bss:0041126A byte_41126A     db ?                    ; DATA XREF: .text:0040A4C5↑r
.bss:0041126B                 align 10h
.bss:00411270 dword_411270    dd ?                    ; DATA XREF: sub_40AA90+6↑r
.bss:00411270                                         ; sub_40AA90+75↑w
.bss:00411274                 align 10h
.bss:00411280 dword_411280    dd ?                    ; DATA XREF: sub_40B060+1C↑r
.bss:00411280                                         ; sub_40B060+104↑w
.bss:00411284                 align 10h
.bss:00411290 dword_411290    dd ?                    ; DATA XREF: sub_40B060+B↑r
.bss:00411290                                         ; sub_40B060+71↑w
.bss:00411294                 align 10h
.bss:004112A0 dword_4112A0    dd ?                    ; DATA XREF: sub_40B060+85↑r
.bss:004112A0                                         ; sub_40B060+B9↑w
.bss:004112A4 dword_4112A4    dd ?                    ; DATA XREF: sub_40B060+C4↑w
.bss:004112A8 dword_4112A8    dd ?                    ; DATA XREF: sub_40B060+2E↑o
.bss:004112A8                                         ; sub_40B060+CF↑w
.bss:004112AC dword_4112AC    dd ?                    ; DATA XREF: sub_40B060+DA↑w
.bss:004112B0                 db    ? ;
.bss:004112B1                 db    ? ;
.bss:004112B2                 db    ? ;
.bss:004112B3                 db    ? ;
.bss:004112B4                 db    ? ;
.bss:004112B5                 db    ? ;
.bss:004112B6                 db    ? ;
.bss:004112B7                 db    ? ;
.bss:004112B8                 db    ? ;
.bss:004112B9                 db    ? ;
.bss:004112BA                 db    ? ;
.bss:004112BB                 db    ? ;
.bss:004112BC                 db    ? ;
.bss:004112BD                 db    ? ;
.bss:004112BE                 db    ? ;
.bss:004112BF                 db    ? ;
.bss:004112C0                 db    ? ;
.bss:004112C1                 db    ? ;
.bss:004112C2                 db    ? ;
.bss:004112C3                 db    ? ;
.bss:004112C4                 db    ? ;
.bss:004112C5                 db    ? ;
.bss:004112C6                 db    ? ;
.bss:004112C7                 db    ? ;
.bss:004112C8                 db    ? ;
.bss:004112C9                 db    ? ;
.bss:004112CA                 db    ? ;
.bss:004112CB                 db    ? ;
.bss:004112CC                 db    ? ;
.bss:004112CD                 db    ? ;
.bss:004112CE                 db    ? ;
.bss:004112CF                 db    ? ;
.bss:004112D0                 db    ? ;
.bss:004112D1                 db    ? ;
.bss:004112D2                 db    ? ;
.bss:004112D3                 db    ? ;
.bss:004112D4                 db    ? ;
.bss:004112D5                 db    ? ;
.bss:004112D6                 db    ? ;
.bss:004112D7                 db    ? ;
.bss:004112D8                 db    ? ;
.bss:004112D9                 db    ? ;
.bss:004112DA                 db    ? ;
.bss:004112DB                 db    ? ;
.bss:004112DC                 db    ? ;
.bss:004112DD                 db    ? ;
.bss:004112DE                 db    ? ;
.bss:004112DF                 db    ? ;
.bss:004112E0                 db    ? ;
.bss:004112E1                 db    ? ;
.bss:004112E2                 db    ? ;
.bss:004112E3                 db    ? ;
.bss:004112E4                 db    ? ;
.bss:004112E5                 db    ? ;
.bss:004112E6                 db    ? ;
.bss:004112E7                 db    ? ;
.bss:004112E8                 db    ? ;
.bss:004112E9                 db    ? ;
.bss:004112EA                 db    ? ;
.bss:004112EB                 db    ? ;
.bss:004112EC                 db    ? ;
.bss:004112ED                 db    ? ;
.bss:004112EE                 db    ? ;
.bss:004112EF                 db    ? ;
.bss:004112F0                 db    ? ;
.bss:004112F1                 db    ? ;
.bss:004112F2                 db    ? ;
.bss:004112F3                 db    ? ;
.bss:004112F4                 db    ? ;
.bss:004112F5                 db    ? ;
.bss:004112F6                 db    ? ;
.bss:004112F7                 db    ? ;
.bss:004112F8                 db    ? ;
.bss:004112F9                 db    ? ;
.bss:004112FA                 db    ? ;
.bss:004112FB                 db    ? ;
.bss:004112FC                 db    ? ;
.bss:004112FD                 db    ? ;
.bss:004112FE                 db    ? ;
.bss:004112FF                 db    ? ;
.bss:00411300                 db    ? ;
.bss:00411301                 db    ? ;
.bss:00411302                 db    ? ;
.bss:00411303                 db    ? ;
.bss:00411304                 db    ? ;
.bss:00411305                 db    ? ;
.bss:00411306                 db    ? ;
.bss:00411307                 db    ? ;
.bss:00411308                 db    ? ;
.bss:00411309                 db    ? ;
.bss:0041130A                 db    ? ;
.bss:0041130B                 db    ? ;
.bss:0041130C                 db    ? ;
.bss:0041130D                 db    ? ;
.bss:0041130E                 db    ? ;
.bss:0041130F                 db    ? ;
.bss:00411310                 db    ? ;
.bss:00411311                 db    ? ;
.bss:00411312                 db    ? ;
.bss:00411313                 db    ? ;
.bss:00411314                 db    ? ;
.bss:00411315                 db    ? ;
.bss:00411316                 db    ? ;
.bss:00411317                 db    ? ;
.bss:00411318                 db    ? ;
.bss:00411319                 db    ? ;
.bss:0041131A                 db    ? ;
.bss:0041131B                 db    ? ;
.bss:0041131C                 db    ? ;
.bss:0041131D                 db    ? ;
.bss:0041131E                 db    ? ;
.bss:0041131F                 db    ? ;
.bss:00411320                 db    ? ;
.bss:00411321                 db    ? ;
.bss:00411322                 db    ? ;
.bss:00411323                 db    ? ;
.bss:00411324                 db    ? ;
.bss:00411325                 db    ? ;
.bss:00411326                 db    ? ;
.bss:00411327                 db    ? ;
.bss:00411328                 db    ? ;
.bss:00411329                 db    ? ;
.bss:0041132A                 db    ? ;
.bss:0041132B                 db    ? ;
.bss:0041132C                 db    ? ;
.bss:0041132D                 db    ? ;
.bss:0041132E                 db    ? ;
.bss:0041132F                 db    ? ;
.bss:00411330                 db    ? ;
.bss:00411331                 db    ? ;
.bss:00411332                 db    ? ;
.bss:00411333                 db    ? ;
.bss:00411334                 db    ? ;
.bss:00411335                 db    ? ;
.bss:00411336                 db    ? ;
.bss:00411337                 db    ? ;
.bss:00411338                 db    ? ;
.bss:00411339                 db    ? ;
.bss:0041133A                 db    ? ;
.bss:0041133B                 db    ? ;
.bss:0041133C                 db    ? ;
.bss:0041133D                 db    ? ;
.bss:0041133E                 db    ? ;
.bss:0041133F                 db    ? ;
.bss:00411340                 db    ? ;
.bss:00411341                 db    ? ;
.bss:00411342                 db    ? ;
.bss:00411343                 db    ? ;
.bss:00411344                 db    ? ;
.bss:00411345                 db    ? ;
.bss:00411346                 db    ? ;
.bss:00411347                 db    ? ;
.bss:00411348                 db    ? ;
.bss:00411349                 db    ? ;
.bss:0041134A                 db    ? ;
.bss:0041134B                 db    ? ;
.bss:0041134C                 db    ? ;
.bss:0041134D                 db    ? ;
.bss:0041134E                 db    ? ;
.bss:0041134F                 db    ? ;
.bss:00411350                 db    ? ;
.bss:00411351                 db    ? ;
.bss:00411352                 db    ? ;
.bss:00411353                 db    ? ;
.bss:00411354                 db    ? ;
.bss:00411355                 db    ? ;
.bss:00411356                 db    ? ;
.bss:00411357                 db    ? ;
.bss:00411358                 db    ? ;
.bss:00411359                 db    ? ;
.bss:0041135A                 db    ? ;
.bss:0041135B                 db    ? ;
.bss:0041135C                 db    ? ;
.bss:0041135D                 db    ? ;
.bss:0041135E                 db    ? ;
.bss:0041135F                 db    ? ;
.bss:00411360                 db    ? ;
.bss:00411361                 db    ? ;
.bss:00411362                 db    ? ;
.bss:00411363                 db    ? ;
.bss:00411364                 db    ? ;
.bss:00411365                 db    ? ;
.bss:00411366                 db    ? ;
.bss:00411367                 db    ? ;
.bss:00411368                 db    ? ;
.bss:00411369                 db    ? ;
.bss:0041136A                 db    ? ;
.bss:0041136B                 db    ? ;
.bss:0041136C                 db    ? ;
.bss:0041136D                 db    ? ;
.bss:0041136E                 db    ? ;
.bss:0041136F                 db    ? ;
.bss:00411370                 db    ? ;
.bss:00411371                 db    ? ;
.bss:00411372                 db    ? ;
.bss:00411373                 db    ? ;
.bss:00411374                 db    ? ;
.bss:00411375                 db    ? ;
.bss:00411376                 db    ? ;
.bss:00411377                 db    ? ;
.bss:00411378                 db    ? ;
.bss:00411379                 db    ? ;
.bss:0041137A                 db    ? ;
.bss:0041137B                 db    ? ;
.bss:0041137C                 db    ? ;
.bss:0041137D                 db    ? ;
.bss:0041137E                 db    ? ;
.bss:0041137F                 db    ? ;
.bss:00411380                 db    ? ;
.bss:00411381                 db    ? ;
.bss:00411382                 db    ? ;
.bss:00411383                 db    ? ;
.bss:00411384                 db    ? ;
.bss:00411385                 db    ? ;
.bss:00411386                 db    ? ;
.bss:00411387                 db    ? ;
.bss:00411388                 db    ? ;
.bss:00411389                 db    ? ;
.bss:0041138A                 db    ? ;
.bss:0041138B                 db    ? ;
.bss:0041138C                 db    ? ;
.bss:0041138D                 db    ? ;
.bss:0041138E                 db    ? ;
.bss:0041138F                 db    ? ;
.bss:00411390                 db    ? ;
.bss:00411391                 db    ? ;
.bss:00411392                 db    ? ;
.bss:00411393                 db    ? ;
.bss:00411394                 db    ? ;
.bss:00411395                 db    ? ;
.bss:00411396                 db    ? ;
.bss:00411397                 db    ? ;
.bss:00411398                 db    ? ;
.bss:00411399                 db    ? ;
.bss:0041139A                 db    ? ;
.bss:0041139B                 db    ? ;
.bss:0041139C                 db    ? ;
.bss:0041139D                 db    ? ;
.bss:0041139E                 db    ? ;
.bss:0041139F                 db    ? ;
.bss:004113A0                 db    ? ;
.bss:004113A1                 db    ? ;
.bss:004113A2                 db    ? ;
.bss:004113A3                 db    ? ;
.bss:004113A4                 db    ? ;
.bss:004113A5                 db    ? ;
.bss:004113A6                 db    ? ;
.bss:004113A7                 db    ? ;
.bss:004113A8                 db    ? ;
.bss:004113A9                 db    ? ;
.bss:004113AA                 db    ? ;
.bss:004113AB                 db    ? ;
.bss:004113AC                 db    ? ;
.bss:004113AD                 db    ? ;
.bss:004113AE                 db    ? ;
.bss:004113AF                 db    ? ;
.bss:004113B0                 db    ? ;
.bss:004113B1                 db    ? ;
.bss:004113B2                 db    ? ;
.bss:004113B3                 db    ? ;
.bss:004113B4                 db    ? ;
.bss:004113B5                 db    ? ;
.bss:004113B6                 db    ? ;
.bss:004113B7                 db    ? ;
.bss:004113B8                 db    ? ;
.bss:004113B9                 db    ? ;
.bss:004113BA                 db    ? ;
.bss:004113BB                 db    ? ;
.bss:004113BC                 db    ? ;
.bss:004113BD                 db    ? ;
.bss:004113BE                 db    ? ;
.bss:004113BF                 db    ? ;
.bss:004113C0                 db    ? ;
.bss:004113C1                 db    ? ;
.bss:004113C2                 db    ? ;
.bss:004113C3                 db    ? ;
.bss:004113C4                 db    ? ;
.bss:004113C5                 db    ? ;
.bss:004113C6                 db    ? ;
.bss:004113C7                 db    ? ;
.bss:004113C8                 db    ? ;
.bss:004113C9                 db    ? ;
.bss:004113CA                 db    ? ;
.bss:004113CB                 db    ? ;
.bss:004113CC                 db    ? ;
.bss:004113CD                 db    ? ;
.bss:004113CE                 db    ? ;
.bss:004113CF                 db    ? ;
.bss:004113D0                 db    ? ;
.bss:004113D1                 db    ? ;
.bss:004113D2                 db    ? ;
.bss:004113D3                 db    ? ;
.bss:004113D4                 db    ? ;
.bss:004113D5                 db    ? ;
.bss:004113D6                 db    ? ;
.bss:004113D7                 db    ? ;
.bss:004113D8                 db    ? ;
.bss:004113D9                 db    ? ;
.bss:004113DA                 db    ? ;
.bss:004113DB                 db    ? ;
.bss:004113DC                 db    ? ;
.bss:004113DD                 db    ? ;
.bss:004113DE                 db    ? ;
.bss:004113DF                 db    ? ;
.bss:004113E0                 db    ? ;
.bss:004113E1                 db    ? ;
.bss:004113E2                 db    ? ;
.bss:004113E3                 db    ? ;
.bss:004113E4                 db    ? ;
.bss:004113E5                 db    ? ;
.bss:004113E6                 db    ? ;
.bss:004113E7                 db    ? ;
.bss:004113E8                 db    ? ;
.bss:004113E9                 db    ? ;
.bss:004113EA                 db    ? ;
.bss:004113EB                 db    ? ;
.bss:004113EC                 db    ? ;
.bss:004113ED                 db    ? ;
.bss:004113EE                 db    ? ;
.bss:004113EF                 db    ? ;
.bss:004113F0                 db    ? ;
.bss:004113F1                 db    ? ;
.bss:004113F2                 db    ? ;
.bss:004113F3                 db    ? ;
.bss:004113F4                 db    ? ;
.bss:004113F5                 db    ? ;
.bss:004113F6                 db    ? ;
.bss:004113F7                 db    ? ;
.bss:004113F8                 db    ? ;
.bss:004113F9                 db    ? ;
.bss:004113FA                 db    ? ;
.bss:004113FB                 db    ? ;
.bss:004113FC                 db    ? ;
.bss:004113FD                 db    ? ;
.bss:004113FE                 db    ? ;
.bss:004113FF                 db    ? ;
.bss:00411400                 db    ? ;
.bss:00411401                 db    ? ;
.bss:00411402                 db    ? ;
.bss:00411403                 db    ? ;
.bss:00411404                 db    ? ;
.bss:00411405                 db    ? ;
.bss:00411406                 db    ? ;
.bss:00411407                 db    ? ;
.bss:00411408                 db    ? ;
.bss:00411409                 db    ? ;
.bss:0041140A                 db    ? ;
.bss:0041140B                 db    ? ;
.bss:0041140C                 db    ? ;
.bss:0041140D                 db    ? ;
.bss:0041140E                 db    ? ;
.bss:0041140F                 db    ? ;
.bss:00411410                 db    ? ;
.bss:00411411                 db    ? ;
.bss:00411412                 db    ? ;
.bss:00411413                 db    ? ;
.bss:00411414                 db    ? ;
.bss:00411415                 db    ? ;
.bss:00411416                 db    ? ;
.bss:00411417                 db    ? ;
.bss:00411418                 db    ? ;
.bss:00411419                 db    ? ;
.bss:0041141A                 db    ? ;
.bss:0041141B                 db    ? ;
.bss:0041141C                 db    ? ;
.bss:0041141D                 db    ? ;
.bss:0041141E                 db    ? ;
.bss:0041141F                 db    ? ;
.bss:00411420                 db    ? ;
.bss:00411421                 db    ? ;
.bss:00411422                 db    ? ;
.bss:00411423                 db    ? ;
.bss:00411424                 db    ? ;
.bss:00411425                 db    ? ;
.bss:00411426                 db    ? ;
.bss:00411427                 db    ? ;
.bss:00411428                 db    ? ;
.bss:00411429                 db    ? ;
.bss:0041142A                 db    ? ;
.bss:0041142B                 db    ? ;
.bss:0041142C                 db    ? ;
.bss:0041142D                 db    ? ;
.bss:0041142E                 db    ? ;
.bss:0041142F                 db    ? ;
.bss:00411430                 db    ? ;
.bss:00411431                 db    ? ;
.bss:00411432                 db    ? ;
.bss:00411433                 db    ? ;
.bss:00411434                 db    ? ;
.bss:00411435                 db    ? ;
.bss:00411436                 db    ? ;
.bss:00411437                 db    ? ;
.bss:00411438                 db    ? ;
.bss:00411439                 db    ? ;
.bss:0041143A                 db    ? ;
.bss:0041143B                 db    ? ;
.bss:0041143C                 db    ? ;
.bss:0041143D                 db    ? ;
.bss:0041143E                 db    ? ;
.bss:0041143F                 db    ? ;
.bss:00411440                 db    ? ;
.bss:00411441                 db    ? ;
.bss:00411442                 db    ? ;
.bss:00411443                 db    ? ;
.bss:00411444                 db    ? ;
.bss:00411445                 db    ? ;
.bss:00411446                 db    ? ;
.bss:00411447                 db    ? ;
.bss:00411448                 db    ? ;
.bss:00411449                 db    ? ;
.bss:0041144A                 db    ? ;
.bss:0041144B                 db    ? ;
.bss:0041144C                 db    ? ;
.bss:0041144D                 db    ? ;
.bss:0041144E                 db    ? ;
.bss:0041144F                 db    ? ;
.bss:00411450                 db    ? ;
.bss:00411451                 db    ? ;
.bss:00411452                 db    ? ;
.bss:00411453                 db    ? ;
.bss:00411454                 db    ? ;
.bss:00411455                 db    ? ;
.bss:00411456                 db    ? ;
.bss:00411457                 db    ? ;
.bss:00411458                 db    ? ;
.bss:00411459                 db    ? ;
.bss:0041145A                 db    ? ;
.bss:0041145B                 db    ? ;
.bss:0041145C                 db    ? ;
.bss:0041145D                 db    ? ;
.bss:0041145E                 db    ? ;
.bss:0041145F                 db    ? ;
.bss:00411460                 db    ? ;
.bss:00411461                 db    ? ;
.bss:00411462                 db    ? ;
.bss:00411463                 db    ? ;
.bss:00411464                 db    ? ;
.bss:00411465                 db    ? ;
.bss:00411466                 db    ? ;
.bss:00411467                 db    ? ;
.bss:00411468                 db    ? ;
.bss:00411469                 db    ? ;
.bss:0041146A                 db    ? ;
.bss:0041146B                 db    ? ;
.bss:0041146C                 db    ? ;
.bss:0041146D                 db    ? ;
.bss:0041146E                 db    ? ;
.bss:0041146F                 db    ? ;
.bss:00411470                 db    ? ;
.bss:00411471                 db    ? ;
.bss:00411472                 db    ? ;
.bss:00411473                 db    ? ;
.bss:00411474                 db    ? ;
.bss:00411475                 db    ? ;
.bss:00411476                 db    ? ;
.bss:00411477                 db    ? ;
.bss:00411478                 db    ? ;
.bss:00411479                 db    ? ;
.bss:0041147A                 db    ? ;
.bss:0041147B                 db    ? ;
.bss:0041147C                 db    ? ;
.bss:0041147D                 db    ? ;
.bss:0041147E                 db    ? ;
.bss:0041147F                 db    ? ;
.bss:00411480                 db    ? ;
.bss:00411481                 db    ? ;
.bss:00411482                 db    ? ;
.bss:00411483                 db    ? ;
.bss:00411484                 db    ? ;
.bss:00411485                 db    ? ;
.bss:00411486                 db    ? ;
.bss:00411487                 db    ? ;
.bss:00411488                 db    ? ;
.bss:00411489                 db    ? ;
.bss:0041148A                 db    ? ;
.bss:0041148B                 db    ? ;
.bss:0041148C                 db    ? ;
.bss:0041148D                 db    ? ;
.bss:0041148E                 db    ? ;
.bss:0041148F                 db    ? ;
.bss:00411490                 db    ? ;
.bss:00411491                 db    ? ;
.bss:00411492                 db    ? ;
.bss:00411493                 db    ? ;
.bss:00411494                 db    ? ;
.bss:00411495                 db    ? ;
.bss:00411496                 db    ? ;
.bss:00411497                 db    ? ;
.bss:00411498                 db    ? ;
.bss:00411499                 db    ? ;
.bss:0041149A                 db    ? ;
.bss:0041149B                 db    ? ;
.bss:0041149C                 db    ? ;
.bss:0041149D                 db    ? ;
.bss:0041149E                 db    ? ;
.bss:0041149F                 db    ? ;
.bss:004114A0 dword_4114A0    dd ?                    ; DATA XREF: sub_40CF50+6E↑r
.bss:004114A0                                         ; sub_40CF50+9A↑r ...
.bss:004114A4 dword_4114A4    dd ?                    ; DATA XREF: sub_40CF50:loc_40CFB8↑r
.bss:004114A4                                         ; sub_40CF50+A0↑r ...
.bss:004114A8                 align 10h
.bss:004114B0 dword_4114B0    dd ?                    ; DATA XREF: sub_40D3E0↑r
.bss:004114B0                                         ; .text:loc_40D512↑w
.bss:004114B4                 align 10h
.bss:004114C0 dword_4114C0    dd ?                    ; DATA XREF: sub_4016F0+32↑w
.bss:004114C0                                         ; sub_4016F0+FD↑r ...
.bss:004114C4                 align 20h
.bss:004114E0 dword_4114E0    dd ?                    ; DATA XREF: sub_4016F0:loc_401960↑r
.bss:004114E0                                         ; sub_403D00+71↑w ...
.bss:004114E4                 align 10h
.bss:004114F0 dword_4114F0    dd ?                    ; CODE XREF: sub_406FF4+63↑p
.bss:004114F0                                         ; DATA XREF: sub_406EF0+1E↑r ...
.bss:004114F4                 align 10h
.bss:00411500 dword_411500    dd ?                    ; DATA XREF: sub_406EF0+4E↑w
.bss:00411500                                         ; sub_406FF4+AB↑w
.bss:00411504                 db    ? ;
.bss:00411505                 db    ? ;
.bss:00411506                 db    ? ;
.bss:00411507                 db    ? ;
.bss:00411508                 db    ? ;
.bss:00411509                 db    ? ;
.bss:0041150A                 db    ? ;
.bss:0041150B                 db    ? ;
.bss:0041150C                 db    ? ;
.bss:0041150D                 db    ? ;
.bss:0041150E                 db    ? ;
.bss:0041150F                 db    ? ;
.bss:00411510                 db    ? ;
.bss:00411511                 db    ? ;
.bss:00411512                 db    ? ;
.bss:00411513                 db    ? ;
.bss:00411514                 db    ? ;
.bss:00411515                 db    ? ;
.bss:00411516                 db    ? ;
.bss:00411517                 db    ? ;
.bss:00411518                 db    ? ;
.bss:00411519                 db    ? ;
.bss:0041151A                 db    ? ;
.bss:0041151B                 db    ? ;
.bss:0041151C                 db    ? ;
.bss:0041151D                 db    ? ;
.bss:0041151E                 db    ? ;
.bss:0041151F                 db    ? ;
.bss:00411520                 db    ? ;
.bss:00411521                 db    ? ;
.bss:00411522                 db    ? ;
.bss:00411523                 db    ? ;
.bss:00411524                 db    ? ;
.bss:00411525                 db    ? ;
.bss:00411526                 db    ? ;
.bss:00411527                 db    ? ;
.bss:00411528                 db    ? ;
.bss:00411529                 db    ? ;
.bss:0041152A                 db    ? ;
.bss:0041152B                 db    ? ;
.bss:0041152C                 db    ? ;
.bss:0041152D                 db    ? ;
.bss:0041152E                 db    ? ;
.bss:0041152F                 db    ? ;
.bss:00411530 dword_411530    dd ?                    ; DATA XREF: sub_406FF4+13↑r
.bss:00411534                 align 1000h
.bss:00411534 _bss            ends
.bss:00411534
.idata:00412000 ; Section 4. (virtual address 00012000)
.idata:00412000 ; Virtual size                  : 00000DFC (   3580.)
.idata:00412000 ; Section size in file          : 00000E00 (   3584.)
.idata:00412000 ; Offset to raw data for section: 0000F000
.idata:00412000 ; Flags C0000040: Data Readable Writable
.idata:00412000 ; Alignment     : default
.idata:00412000 ; ===========================================================================
.idata:00412000
.idata:00412000 ; Segment type: Externs
.idata:00412000 ; _idata
.idata:00412000
.idata:00412001
.idata:004122B4 ;
.idata:004122B4 ; Imports from libintl3.dll
.idata:004122B4 ;
.idata:004122B4                 extrn libintl_bindtextdomain:dword
.idata:004122B4                                         ; CODE XREF: sub_4016F0+5B↑p
.idata:004122B4                                         ; DATA XREF: sub_4016F0+5B↑r ...
.idata:004122B8                 extrn libintl_gettext:dword
.idata:004122B8                                         ; CODE XREF: sub_4016F0+DF↑p
.idata:004122B8                                         ; sub_4016F0+F1↑p ...
.idata:004122BC                 extrn libintl_textdomain:dword
.idata:004122BC                                         ; CODE XREF: sub_4016F0+68↑p
.idata:004122BC                                         ; DATA XREF: sub_4016F0+68↑r ...
.idata:004122C0
.idata:004122C8 ;
.idata:004122C8 ; Imports from ADVAPI32.DLL
.idata:004122C8 ;
.idata:004122C8 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004122C8                 extrn __imp_RegCloseKey:dword
.idata:004122C8                                         ; DATA XREF: RegCloseKey↑r
.idata:004122CC ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004122CC                 extrn __imp_RegOpenKeyExA:dword
.idata:004122CC                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004122D0 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004122D0                 extrn __imp_RegQueryValueExA:dword
.idata:004122D0                                         ; DATA XREF: RegQueryValueExA↑r
.idata:004122D4
.idata:004122DC ;
.idata:004122DC ; Imports from KERNEL32.dll
.idata:004122DC ;
.idata:004122DC ; BOOL (__stdcall *AreFileApisANSI)()
.idata:004122DC                 extrn __imp_AreFileApisANSI:dword
.idata:004122DC                                         ; DATA XREF: AreFileApisANSI↑r
.idata:004122E0 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004122E0                 extrn __imp_CloseHandle:dword
.idata:004122E0                                         ; DATA XREF: CloseHandle↑r
.idata:004122E4 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004122E4                 extrn __imp_CreateDirectoryA:dword
.idata:004122E4                                         ; DATA XREF: CreateDirectoryA↑r
.idata:004122E8 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004122E8                 extrn __imp_CreateFileA:dword
.idata:004122E8                                         ; DATA XREF: CreateFileA↑r
.idata:004122EC ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:004122EC                 extrn __imp_DeviceIoControl:dword
.idata:004122EC                                         ; DATA XREF: DeviceIoControl↑r
.idata:004122F0 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:004122F0                 extrn __imp_ExitProcess:dword
.idata:004122F0                                         ; DATA XREF: ExitProcess↑r
.idata:004122F4 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:004122F4                 extrn __imp_FindClose:dword
.idata:004122F4                                         ; DATA XREF: FindClose↑r
.idata:004122F8 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004122F8                 extrn __imp_FindFirstFileA:dword
.idata:004122F8                                         ; DATA XREF: FindFirstFileA↑r
.idata:004122FC ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004122FC                 extrn __imp_FindNextFileA:dword
.idata:004122FC                                         ; DATA XREF: FindNextFileA↑r
.idata:00412300 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00412300                 extrn __imp_FreeLibrary:dword
.idata:00412300                                         ; DATA XREF: FreeLibrary↑r
.idata:00412304 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00412304                 extrn __imp_GetCurrentDirectoryA:dword
.idata:00412304                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:00412308 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:00412308                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:00412308                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:0041230C ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:0041230C                 extrn __imp_GetDriveTypeA:dword
.idata:0041230C                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00412310 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00412310                 extrn __imp_GetFileAttributesA:dword
.idata:00412310                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00412314 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00412314                 extrn __imp_GetFileInformationByHandle:dword
.idata:00412314                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:00412318 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:00412318                 extrn __imp_GetFileSize:dword
.idata:00412318                                         ; DATA XREF: GetFileSize↑r
.idata:0041231C ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:0041231C                 extrn __imp_GetFileType:dword
.idata:0041231C                                         ; DATA XREF: GetFileType↑r
.idata:00412320 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00412320                 extrn __imp_GetFullPathNameA:dword
.idata:00412320                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00412324 ; DWORD (__stdcall *GetLastError)()
.idata:00412324                 extrn __imp_GetLastError:dword
.idata:00412324                                         ; DATA XREF: GetLastError↑r
.idata:00412328 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00412328                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:00412328                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:0041232C ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:0041232C                 extrn __imp_GetModuleFileNameA:dword
.idata:0041232C                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00412330 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00412330                 extrn __imp_GetModuleHandleA:dword
.idata:00412330                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00412334 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00412334                 extrn __imp_GetProcAddress:dword
.idata:00412334                                         ; DATA XREF: GetProcAddress↑r
.idata:00412338 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:00412338                 extrn __imp_GetProcessHeap:dword
.idata:00412338                                         ; DATA XREF: GetProcessHeap↑r
.idata:0041233C ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:0041233C                 extrn __imp_GetShortPathNameA:dword
.idata:0041233C                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00412340 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00412340                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00412340                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00412344 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00412344                 extrn __imp_GetTimeZoneInformation:dword
.idata:00412344                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:00412348 ; DWORD (__stdcall *GetVersion)()
.idata:00412348                 extrn __imp_GetVersion:dword
.idata:00412348                                         ; DATA XREF: GetVersion↑r
.idata:0041234C ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:0041234C                 extrn __imp_GetVersionExA:dword
.idata:0041234C                                         ; DATA XREF: GetVersionExA↑r
.idata:00412350 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00412350                 extrn __imp_GetVolumeInformationA:dword
.idata:00412350                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00412354 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00412354                 extrn __imp_HeapAlloc:dword
.idata:00412354                                         ; DATA XREF: HeapAlloc↑r
.idata:00412358 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:00412358                 extrn __imp_HeapFree:dword
.idata:00412358                                         ; DATA XREF: HeapFree↑r
.idata:0041235C ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:0041235C                 extrn __imp_LoadLibraryA:dword
.idata:0041235C                                         ; DATA XREF: LoadLibraryA↑r
.idata:00412360 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00412360                 extrn __imp_MultiByteToWideChar:dword
.idata:00412360                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:00412364 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:00412364                 extrn __imp_PeekNamedPipe:dword
.idata:00412364                                         ; DATA XREF: PeekNamedPipe↑r
.idata:00412368 ; BOOL (__stdcall *SetCurrentDirectoryA)(LPCSTR lpPathName)
.idata:00412368                 extrn __imp_SetCurrentDirectoryA:dword
.idata:00412368                                         ; DATA XREF: SetCurrentDirectoryA↑r
.idata:0041236C ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0041236C                 extrn __imp_SetErrorMode:dword
.idata:0041236C                                         ; DATA XREF: SetErrorMode↑r
.idata:00412370 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00412370                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00412370                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00412374 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:00412374                 extrn __imp_UnlockFile:dword
.idata:00412374                                         ; DATA XREF: UnlockFile↑r
.idata:00412378 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:00412378                 extrn __imp_lstrcmpiA:dword
.idata:00412378                                         ; DATA XREF: lstrcmpiA↑r
.idata:0041237C ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:0041237C                 extrn __imp_lstrcpyA:dword
.idata:0041237C                                         ; DATA XREF: lstrcpyA↑r
.idata:00412380
.idata:00412388 ;
.idata:00412388 ; Imports from msvcrt.dll
.idata:00412388 ;
.idata:00412388 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:00412388                 extrn __imp__chmod:dword
.idata:00412388                                         ; DATA XREF: _chmod↑r
.idata:0041238C ; int (__cdecl *_close)(int FileHandle)
.idata:0041238C                 extrn __imp__close:dword
.idata:0041238C                                         ; DATA XREF: _close↑r
.idata:00412390 ; int (__cdecl *_getpid)()
.idata:00412390                 extrn __imp__getpid:dword
.idata:00412390                                         ; DATA XREF: _getpid↑r
.idata:00412394 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:00412394                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:00412398 ; char *(__cdecl *_strdup)(const char *String)
.idata:00412398                 extrn __imp__strdup:dword
.idata:00412398                                         ; DATA XREF: _strdup↑r
.idata:0041239C ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:0041239C                 extrn __imp__stricmp:dword
.idata:0041239C                                         ; DATA XREF: _stricmp↑r
.idata:004123A0 ; int (__cdecl *_umask)(int Mode)
.idata:004123A0                 extrn __imp__umask:dword
.idata:004123A0                                         ; DATA XREF: _umask↑r
.idata:004123A4
.idata:004123AC ;
.idata:004123AC ; Imports from MSVCP60.DLL
.idata:004123AC ;
.idata:004123AC ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004123AC                 extrn __imp_mbrtowc:dword
.idata:004123AC                                         ; DATA XREF: mbrtowc↑r
.idata:004123B0
.idata:004123B8 ;
.idata:004123B8 ; Imports from msvcrt.dll
.idata:004123B8 ;
.idata:004123B8                 extrn __imp___getmainargs:dword
.idata:004123B8                                         ; DATA XREF: __getmainargs↑r
.idata:004123BC ; int _mb_cur_max
.idata:004123BC                 extrn __mb_cur_max:dword
.idata:004123BC                                         ; DATA XREF: sub_4048B0+45↑r
.idata:004123BC                                         ; sub_404EB0+7↑r ...
.idata:004123C0 ; char ***(__cdecl *__p__environ)()
.idata:004123C0                 extrn __imp___p__environ:dword
.idata:004123C0                                         ; DATA XREF: __p__environ↑r
.idata:004123C4 ; int *(__cdecl *__p__fmode)()
.idata:004123C4                 extrn __imp___p__fmode:dword
.idata:004123C4                                         ; DATA XREF: __p__fmode↑r
.idata:004123C8 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004123C8                 extrn __set_app_type:dword
.idata:004123C8                                         ; CODE XREF: start+D↑p
.idata:004123C8                                         ; .text:0040102D↑p
.idata:004123C8                                         ; DATA XREF: ...
.idata:004123CC                 extrn __imp__assert:dword
.idata:004123CC                                         ; DATA XREF: _assert↑r
.idata:004123D0 ; void (__cdecl *_cexit)()
.idata:004123D0                 extrn __imp__cexit:dword
.idata:004123D0                                         ; DATA XREF: _cexit↑r
.idata:004123D4 ; int (__cdecl *_close_0)(int FileHandle)
.idata:004123D4                 extrn __imp__close_0:dword
.idata:004123D4                                         ; DATA XREF: _close_0↑r
.idata:004123D8 ; int *(__cdecl *_errno)()
.idata:004123D8                 extrn __imp__errno:dword
.idata:004123D8                                         ; DATA XREF: _errno↑r
.idata:004123DC ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:004123DC                 extrn __imp__fdopen:dword
.idata:004123DC                                         ; DATA XREF: _fdopen↑r
.idata:004123E0 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004123E0                 extrn __imp__filelengthi64:dword
.idata:004123E0                                         ; DATA XREF: _filelengthi64↑r
.idata:004123E4 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004123E4                 extrn __imp__flsbuf:dword
.idata:004123E4                                         ; DATA XREF: _flsbuf↑r
.idata:004123E8 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004123E8                 extrn __imp__get_osfhandle:dword
.idata:004123E8                                         ; DATA XREF: _get_osfhandle↑r
.idata:004123EC ; char *(__cdecl *_getcwd)(char *DstBuf, int SizeInBytes)
.idata:004123EC                 extrn __imp__getcwd:dword
.idata:004123EC                                         ; DATA XREF: _getcwd↑r
.idata:004123F0 ; FILE iob[]
.idata:004123F0                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004123F0                                         ; sub_401080+75↑r ...
.idata:004123F4 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004123F4                 extrn __imp__isctype:dword
.idata:004123F4                                         ; DATA XREF: _isctype↑r
.idata:004123F8 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004123F8                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004123F8                                         ; DATA XREF: .text:0040106C↑r
.idata:004123FC ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:004123FC                 extrn __imp__open_0:dword
.idata:004123FC                                         ; DATA XREF: _open_0↑r
.idata:00412400 ; const unsigned __int16 *pctype
.idata:00412400                 extrn _pctype:dword     ; DATA XREF: sub_4048B0:loc_404DD0↑r
.idata:00412400                                         ; sub_404EB0:loc_4055A4↑r
.idata:00412404 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:00412404                 extrn __imp__setmode:dword
.idata:00412404                                         ; DATA XREF: _setmode↑r
.idata:00412408 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:00412408                 extrn __imp__stricmp_0:dword
.idata:00412408                                         ; DATA XREF: _stricmp_0↑r
.idata:0041240C ; void (__cdecl __noreturn *abort)()
.idata:0041240C                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:00412410 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:00412410                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:00412410                                         ; DATA XREF: sub_401040+C↑r
.idata:00412414 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:00412414                 extrn __imp_calloc:dword
.idata:00412414                                         ; DATA XREF: calloc↑r
.idata:00412418 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00412418                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0041241C ; int (__cdecl *fclose)(FILE *Stream)
.idata:0041241C                 extrn __imp_fclose:dword
.idata:0041241C                                         ; DATA XREF: fclose↑r
.idata:00412420 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00412420                 extrn __imp_fflush:dword
.idata:00412420                                         ; DATA XREF: fflush↑r
.idata:00412424 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:00412424                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00412428 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00412428                 extrn __imp_fprintf:dword
.idata:00412428                                         ; DATA XREF: fprintf↑r
.idata:0041242C ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0041242C                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00412430 ; void (__cdecl *free)(void *Block)
.idata:00412430                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00412434 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00412434                 extrn __imp_getenv:dword
.idata:00412434                                         ; DATA XREF: getenv↑r
.idata:00412438 ; int (__cdecl *isalpha)(int C)
.idata:00412438                 extrn __imp_isalpha:dword
.idata:00412438                                         ; DATA XREF: isalpha↑r
.idata:0041243C ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0041243C                 extrn __imp_iswctype:dword
.idata:0041243C                                         ; DATA XREF: iswctype↑r
.idata:00412440 ; void *(__cdecl *malloc)(size_t Size)
.idata:00412440                 extrn __imp_malloc:dword
.idata:00412440                                         ; DATA XREF: malloc↑r
.idata:00412444 ; void *(__cdecl *memchr)(const void *Buf, int Val, size_t MaxCount)
.idata:00412444                 extrn __imp_memchr:dword
.idata:00412444                                         ; DATA XREF: memchr↑r
.idata:00412448 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00412448                 extrn __imp_memcpy:dword
.idata:00412448                                         ; DATA XREF: memcpy↑r
.idata:0041244C ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0041244C                 extrn __imp_memset:dword
.idata:0041244C                                         ; DATA XREF: memset↑r
.idata:00412450 ; int (*printf)(const char *const Format, ...)
.idata:00412450                 extrn __imp_printf:dword
.idata:00412450                                         ; DATA XREF: printf↑r
.idata:00412454 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00412454                 extrn __imp_realloc:dword
.idata:00412454                                         ; DATA XREF: realloc↑r
.idata:00412458 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00412458                 extrn __imp_setlocale:dword
.idata:00412458                                         ; DATA XREF: setlocale↑r
.idata:0041245C ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0041245C                 extrn __imp_signal:dword
.idata:0041245C                                         ; DATA XREF: signal↑r
.idata:00412460 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:00412460                 extrn __imp_sprintf:dword
.idata:00412460                                         ; DATA XREF: sprintf↑r
.idata:00412464 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:00412464                 extrn __imp_sscanf:dword
.idata:00412464                                         ; DATA XREF: sscanf↑r
.idata:00412468 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:00412468                 extrn __imp_strcat:dword
.idata:00412468                                         ; DATA XREF: strcat↑r
.idata:0041246C ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0041246C                 extrn __imp_strchr:dword
.idata:0041246C                                         ; DATA XREF: strchr↑r
.idata:00412470 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00412470                 extrn __imp_strcmp:dword
.idata:00412470                                         ; DATA XREF: strcmp↑r
.idata:00412474 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:00412474                 extrn __imp_strcpy:dword
.idata:00412474                                         ; DATA XREF: strcpy↑r
.idata:00412478 ; size_t (__cdecl *strcspn)(const char *Str, const char *Control)
.idata:00412478                 extrn __imp_strcspn:dword
.idata:00412478                                         ; DATA XREF: strcspn↑r
.idata:0041247C ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0041247C                 extrn __imp_strerror:dword
.idata:0041247C                                         ; DATA XREF: strerror↑r
.idata:00412480 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00412480                 extrn __imp_strlen:dword
.idata:00412480                                         ; DATA XREF: strlen↑r
.idata:00412484 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00412484                 extrn __imp_strncmp:dword
.idata:00412484                                         ; DATA XREF: strncmp↑r
.idata:00412488 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:00412488                 extrn __imp_strncpy:dword
.idata:00412488                                         ; DATA XREF: strncpy↑r
.idata:0041248C ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:0041248C                 extrn __imp_strpbrk:dword
.idata:0041248C                                         ; DATA XREF: strpbrk↑r
.idata:00412490 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:00412490                 extrn __imp_strrchr:dword
.idata:00412490                                         ; DATA XREF: strrchr↑r
.idata:00412494 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:00412494                 extrn __imp_strspn:dword
.idata:00412494                                         ; DATA XREF: strspn↑r
.idata:00412498 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:00412498                 extrn __imp_strstr:dword
.idata:00412498                                         ; DATA XREF: strstr↑r
.idata:0041249C ; unsigned int (__cdecl *strtoul)(const char *String, char **EndPtr, int Radix)
.idata:0041249C                 extrn __imp_strtoul:dword
.idata:0041249C                                         ; DATA XREF: strtoul↑r
.idata:004124A0 ; int (__cdecl *toupper)(int C)
.idata:004124A0                 extrn __imp_toupper:dword
.idata:004124A0                                         ; DATA XREF: toupper↑r
.idata:004124A4 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004124A4                 extrn __imp_vfprintf:dword
.idata:004124A4                                         ; DATA XREF: vfprintf↑r
.idata:004124A8
.idata:004124B0 ;
.idata:004124B0 ; Imports from OLE32.dll
.idata:004124B0 ;
.idata:004124B0 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:004124B0                 extrn __imp_CoCreateInstance:dword
.idata:004124B0                                         ; DATA XREF: CoCreateInstance↑r
.idata:004124B4 ; void (__stdcall *CoUninitialize)()
.idata:004124B4                 extrn __imp_CoUninitialize:dword
.idata:004124B4                                         ; DATA XREF: CoUninitialize↑r
.idata:004124B8 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:004124B8                 extrn __imp_OleInitialize:dword
.idata:004124B8                                         ; DATA XREF: OleInitialize↑r
.idata:004124BC
.idata:004124BC
.idata:004124BC
.idata:004124BC                 end start
