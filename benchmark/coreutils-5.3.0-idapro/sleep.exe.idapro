.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : CA14AA8B184043F5650456497D3235F34733FF3E19E3B35E1342BD915052C8C0
.text:00401000 ; Input MD5    : DE8940416F800406D5EB94FF1F2BDAB5
.text:00401000 ; Input CRC32  : 48381E9B
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/sleep.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A26F (Wed Apr 20 18:41:51 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00004C30 (  19504.)
.text:00401000 ; Section size in file          : 00004E00 (  19968.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401380+69↓p
.text:00401040                                         ; .text:00405600↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_4055A0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_405570
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401380
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_4055A0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_401380+23↓o
.text:00401280                                         ; sub_401380+C8↓o
.text:00401281                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_401380+40↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401380+48↓o
.text:004012C3                                         ; sub_401380+55↓o
.text:004012CD aPaulEggert     db 'Paul Eggert',0      ; DATA XREF: sub_401380+79↓o
.text:004012D9 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_401380+81↓o
.text:004012E6 a530            db '5.3.0',0            ; DATA XREF: sub_401380+94↓o
.text:004012EC aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401380+9C↓o
.text:004012FA ; const FILE stru_4012FA
.text:004012FA stru_4012FA     FILE <65656C73h, 6E690070h, 696C6176h, 69742064h, 6920656Dh, \
.text:004012FA                                         ; DATA XREF: sub_401380+A4↓o
.text:004012FA                                         ; sub_401380:loc_4014F0↓o
.text:004012FA                       7265746Eh, 206C6176h, 27732560h>
.text:0040131A                 db    0
.text:0040131B                 align 10h
.text:00401320 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401320                                         ; DATA XREF: sub_401380:loc_401539↓o
.text:00401320                                         ; sub_4017F0+F↓o
.text:00401347 aCannotReadReal db 'cannot read realtime clock',0
.text:00401347                                         ; DATA XREF: sub_401380:loc_401589↓o
.text:00401362 aMissingOperand db 'missing operand',0  ; DATA XREF: sub_401380:loc_4015F5↓o
.text:00401372                 align 10h
.text:00401380
.text:00401380 ; =============== S U B R O U T I N E =======================================
.text:00401380
.text:00401380 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401380
.text:00401380 sub_401380      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401380
.text:00401380 var_5C          = dword ptr -5Ch
.text:00401380 Category        = dword ptr -58h
.text:00401380 var_50          = dword ptr -50h
.text:00401380 var_4C          = byte ptr -4Ch
.text:00401380 var_48          = dword ptr -48h
.text:00401380 var_44          = dword ptr -44h
.text:00401380 var_40          = byte ptr -40h
.text:00401380 var_3C          = dword ptr -3Ch
.text:00401380 var_38          = dword ptr -38h
.text:00401380 var_29          = byte ptr -29h
.text:00401380 var_28          = qword ptr -28h
.text:00401380 var_1C          = dword ptr -1Ch
.text:00401380 var_18          = qword ptr -18h
.text:00401380 arg_0           = dword ptr  8
.text:00401380 arg_4           = dword ptr  0Ch
.text:00401380
.text:00401380                 push    ebp
.text:00401381                 xor     eax, eax
.text:00401383                 mov     ebp, esp
.text:00401385                 push    edi
.text:00401386                 push    esi
.text:00401387                 push    ebx
.text:00401388                 sub     esp, 4Ch
.text:0040138B                 mov     edi, [ebp+arg_4]
.text:0040138E                 and     esp, 0FFFFFFF0h
.text:00401391                 call    __alloca
.text:00401396                 call    sub_405640
.text:0040139B                 mov     [ebp+var_29], 1
.text:0040139F                 mov     ecx, [edi]
.text:004013A1                 fldz
.text:004013A3                 mov     [esp+58h+Category+4], offset Locale ; Locale
.text:004013AB                 fstp    [ebp+var_28]
.text:004013AE                 mov     ds:dword_4071B0, ecx
.text:004013B4                 mov     [esp+58h+Category], 0 ; Category
.text:004013BB                 call    setlocale
.text:004013C0                 mov     [esp+58h+Category+4], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004013C8                 mov     [esp+58h+Category], offset aCoreutils ; "coreutils"
.text:004013CF                 call    ds:__imp_libintl_bindtextdomain
.text:004013D5                 mov     [esp+58h+Category], offset aCoreutils ; "coreutils"
.text:004013DC                 call    ds:libintl_textdomain
.text:004013E2                 mov     [esp+58h+Category], offset sub_402F20 ; void (__cdecl *)()
.text:004013E9                 call    sub_401040
.text:004013EE                 mov     [esp+58h+var_38], 0
.text:004013F6                 mov     edx, [ebp+arg_0]
.text:004013F9                 mov     [esp+58h+var_3C], offset aPaulEggert ; "Paul Eggert"
.text:00401401                 mov     dword ptr [esp+58h+var_40], offset aJimMeyering ; "Jim Meyering"
.text:00401409                 mov     [esp+58h+Category], edx ; int
.text:0040140C                 mov     [esp+58h+var_44], offset sub_4017F0 ; int
.text:00401414                 mov     [esp+58h+var_48], offset a530 ; "5.3.0"
.text:0040141C                 mov     dword ptr [esp+58h+var_4C], offset aGnuCoreutils ; "GNU coreutils"
.text:00401424                 mov     [esp+58h+var_50], offset stru_4012FA ; FILE *
.text:0040142C                 mov     [esp+58h+Category+4], edi ; int
.text:00401430                 call    sub_402E30
.text:00401435                 mov     [esp+58h+var_48], 0 ; int
.text:0040143D                 mov     edx, [ebp+arg_0]
.text:00401440                 mov     dword ptr [esp+58h+var_4C], 0 ; char
.text:00401448                 mov     [esp+58h+var_50], offset Locale ; char *
.text:00401450                 mov     [esp+58h+Category+4], edi ; int
.text:00401454                 mov     [esp+58h+Category], edx ; int
.text:00401457                 call    sub_402C90
.text:0040145C                 inc     eax
.text:0040145D                 jnz     loc_401539
.text:00401463                 cmp     [ebp+arg_0], 1
.text:00401467                 jz      loc_4015F5
.text:0040146D                 mov     ebx, dword_406010
.text:00401473                 cmp     ebx, [ebp+arg_0]
.text:00401476                 jge     loc_401571
.text:0040147C                 lea     esi, [ebp+var_18]
.text:0040147F                 nop
.text:00401480
.text:00401480 loc_401480:                             ; CODE XREF: sub_401380+1AD↓j
.text:00401480                 mov     dword ptr [esp+58h+var_4C], offset sub_402B70
.text:00401488                 lea     ecx, [ebp+var_1C]
.text:0040148B                 mov     [esp+58h+var_50], esi
.text:0040148F                 mov     [esp+58h+Category+4], ecx
.text:00401493                 mov     edx, [edi+ebx*4]
.text:00401496                 mov     [esp+58h+Category], edx
.text:00401499                 call    sub_402BF0
.text:0040149E                 test    al, al
.text:004014A0                 jz      short loc_4014F0
.text:004014A2                 fld     [ebp+var_18]
.text:004014A5                 fldz
.text:004014A7                 fxch    st(1)
.text:004014A9                 fucompp
.text:004014AB                 fnstsw  ax
.text:004014AD                 sahf
.text:004014AE                 jb      short loc_4014F0
.text:004014B0                 mov     eax, [ebp+var_1C]
.text:004014B3                 movzx   edx, byte ptr [eax]
.text:004014B6                 test    dl, dl
.text:004014B8                 jz      short loc_4014C0
.text:004014BA                 cmp     byte ptr [eax+1], 0
.text:004014BE                 jnz     short loc_4014F0
.text:004014C0
.text:004014C0 loc_4014C0:                             ; CODE XREF: sub_401380+138↑j
.text:004014C0                 movsx   eax, dl
.text:004014C3                 cmp     eax, 68h ; 'h'
.text:004014C6                 jz      loc_4015EE
.text:004014CC                 cmp     eax, 68h ; 'h'
.text:004014CF                 jg      loc_4015D7
.text:004014D5                 test    eax, eax
.text:004014D7                 jz      loc_4015D0
.text:004014DD                 cmp     eax, 64h ; 'd'
.text:004014E0                 jz      loc_4015B5
.text:004014E6                 lea     esi, [esi+0]
.text:004014E9                 lea     edi, [edi+0]
.text:004014F0
.text:004014F0 loc_4014F0:                             ; CODE XREF: sub_401380+120↑j
.text:004014F0                                         ; sub_401380+12E↑j ...
.text:004014F0                 mov     [esp+58h+Category], (offset stru_4012FA._cnt+2)
.text:004014F7                 call    ds:libintl_gettext
.text:004014FD                 mov     ecx, [edi+ebx*4]
.text:00401500                 mov     [esp+58h+Category+4], 0 ; ErrorMessage
.text:00401508                 mov     [esp+58h+Category], 0 ; Code
.text:0040150F                 mov     dword ptr [esp+58h+var_4C], ecx ; char
.text:00401513                 mov     [esp+58h+var_50], eax ; char *
.text:00401517                 call    sub_404CA0
.text:0040151C                 mov     [ebp+var_29], 0
.text:00401520
.text:00401520 loc_401520:                             ; CODE XREF: sub_401380+24B↓j
.text:00401520                 fld     [ebp+var_28]
.text:00401523                 inc     ebx
.text:00401524                 fadd    [ebp+var_18]
.text:00401527                 cmp     ebx, [ebp+arg_0]
.text:0040152A                 fstp    [ebp+var_28]
.text:0040152D                 jl      loc_401480
.text:00401533                 cmp     [ebp+var_29], 0
.text:00401537                 jnz     short loc_401571
.text:00401539
.text:00401539 loc_401539:                             ; CODE XREF: sub_401380+DD↑j
.text:00401539                                         ; sub_401380+29A↓j
.text:00401539                 mov     [esp+58h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401540                 call    ds:libintl_gettext
.text:00401546                 mov     ebx, ds:_iob
.text:0040154C                 mov     esi, ds:dword_4071B0
.text:00401552                 add     ebx, 40h ; '@'
.text:00401555                 mov     [esp+58h+var_50], esi
.text:00401559                 mov     [esp+58h+Category+4], eax ; Format
.text:0040155D                 mov     [esp+58h+Category], ebx ; Stream
.text:00401560                 call    fprintf
.text:00401565                 mov     [esp+58h+Category], 1 ; Code
.text:0040156C
.text:0040156C loc_40156C:                             ; CODE XREF: sub_401380+207↓j
.text:0040156C                 call    exit
.text:00401571 ; ---------------------------------------------------------------------------
.text:00401571
.text:00401571 loc_401571:                             ; CODE XREF: sub_401380+F6↑j
.text:00401571                                         ; sub_401380+1B7↑j
.text:00401571                 fld     [ebp+var_28]
.text:00401574                 fstp    qword ptr [esp+58h+Category] ; double
.text:00401577                 call    sub_402920
.text:0040157C                 test    eax, eax
.text:0040157E                 jnz     short loc_401589
.text:00401580
.text:00401580 loc_401580:                             ; CODE XREF: sub_401380+233↓j
.text:00401580                 mov     [esp+58h+Category], 0
.text:00401587                 jmp     short loc_40156C
.text:00401589 ; ---------------------------------------------------------------------------
.text:00401589
.text:00401589 loc_401589:                             ; CODE XREF: sub_401380+1FE↑j
.text:00401589                 mov     [esp+58h+Category], offset aCannotReadReal ; "cannot read realtime clock"
.text:00401590                 call    ds:libintl_gettext
.text:00401596                 mov     esi, eax
.text:00401598                 call    _errno
.text:0040159D                 mov     [esp+58h+var_50], esi ; char *
.text:004015A1                 mov     edi, [eax]
.text:004015A3                 mov     [esp+58h+Category], 1 ; Code
.text:004015AA                 mov     [esp+58h+Category+4], edi ; ErrorMessage
.text:004015AE                 call    sub_404CA0
.text:004015B3                 jmp     short loc_401580
.text:004015B5 ; ---------------------------------------------------------------------------
.text:004015B5
.text:004015B5 loc_4015B5:                             ; CODE XREF: sub_401380+160↑j
.text:004015B5                 mov     eax, 15180h
.text:004015BA                 lea     esi, [esi+0]
.text:004015C0
.text:004015C0 loc_4015C0:                             ; CODE XREF: sub_401380+255↓j
.text:004015C0                                         ; sub_401380+26C↓j ...
.text:004015C0                 push    eax
.text:004015C1                 fild    [esp+5Ch+var_5C]
.text:004015C4                 add     esp, 4
.text:004015C7                 fmul    qword ptr [esi]
.text:004015C9                 fstp    qword ptr [esi]
.text:004015CB                 jmp     loc_401520
.text:004015D0 ; ---------------------------------------------------------------------------
.text:004015D0
.text:004015D0 loc_4015D0:                             ; CODE XREF: sub_401380+157↑j
.text:004015D0                                         ; sub_401380+265↓j
.text:004015D0                 mov     eax, 1
.text:004015D5                 jmp     short loc_4015C0
.text:004015D7 ; ---------------------------------------------------------------------------
.text:004015D7
.text:004015D7 loc_4015D7:                             ; CODE XREF: sub_401380+14F↑j
.text:004015D7                 cmp     eax, 6Dh ; 'm'
.text:004015DA                 jz      short loc_4015E7
.text:004015DC                 cmp     eax, 73h ; 's'
.text:004015DF                 jnz     loc_4014F0
.text:004015E5                 jmp     short loc_4015D0
.text:004015E7 ; ---------------------------------------------------------------------------
.text:004015E7
.text:004015E7 loc_4015E7:                             ; CODE XREF: sub_401380+25A↑j
.text:004015E7                 mov     eax, 3Ch ; '<'
.text:004015EC                 jmp     short loc_4015C0
.text:004015EE ; ---------------------------------------------------------------------------
.text:004015EE
.text:004015EE loc_4015EE:                             ; CODE XREF: sub_401380+146↑j
.text:004015EE                 mov     eax, 0E10h
.text:004015F3                 jmp     short loc_4015C0
.text:004015F5 ; ---------------------------------------------------------------------------
.text:004015F5
.text:004015F5 loc_4015F5:                             ; CODE XREF: sub_401380+E7↑j
.text:004015F5                 mov     [esp+58h+Category], offset aMissingOperand ; "missing operand"
.text:004015FC                 call    ds:libintl_gettext
.text:00401602                 mov     [esp+58h+Category+4], 0 ; ErrorMessage
.text:0040160A                 mov     [esp+58h+Category], 0 ; Code
.text:00401611                 mov     [esp+58h+var_50], eax ; char *
.text:00401615                 call    sub_404CA0
.text:0040161A                 jmp     loc_401539
.text:0040161A sub_401380      endp
.text:0040161A
.text:0040161A ; ---------------------------------------------------------------------------
.text:0040161F                 align 10h
.text:00401620 aUsageSNumberSu db 'Usage: %s NUMBER[SUFFIX]...',0Ah
.text:00401620                                         ; DATA XREF: sub_4017F0:loc_401833↓o
.text:00401620                 db '  or:  %s OPTION',0Ah
.text:00401620                 db 'Pause for NUMBER seconds.  SUFFIX may be `s',27h,' for seconds (t'
.text:00401620                 db 'he default),',0Ah
.text:00401620                 db '`m',27h,' for minutes, `h',27h,' for hours or `d',27h,' for days.'
.text:00401620                 db '  Unlike most implementations',0Ah
.text:00401620                 db 'that require NUMBER be an integer, here NUMBER may be an arbitrar'
.text:00401620                 db 'y floating',0Ah
.text:00401620                 db 'point number.',0Ah
.text:00401620                 db 0Ah,0
.text:0040173E                 align 10h
.text:00401740 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401740                                         ; DATA XREF: sub_4017F0+66↓o
.text:0040176D                 align 20h
.text:00401780 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401780                                         ; DATA XREF: sub_4017F0+88↓o
.text:004017B6 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4017F0+AA↓o
.text:004017B6                 db 'Report bugs to <%s>.',0Ah,0
.text:004017CD aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004017CD                                         ; DATA XREF: sub_4017F0+B7↓o
.text:004017E3                 align 10h
.text:004017F0
.text:004017F0 ; =============== S U B R O U T I N E =======================================
.text:004017F0
.text:004017F0 ; Attributes: noreturn
.text:004017F0
.text:004017F0 ; void __cdecl __noreturn sub_4017F0(int Code)
.text:004017F0 sub_4017F0      proc near               ; DATA XREF: sub_401380+8C↑o
.text:004017F0
.text:004017F0 Stream          = dword ptr -1Ch
.text:004017F0 Format          = dword ptr -18h
.text:004017F0 var_14          = dword ptr -14h
.text:004017F0 var_4           = dword ptr -4
.text:004017F0 Code            = dword ptr  4
.text:004017F0
.text:004017F0                 sub     esp, 1Ch
.text:004017F3                 mov     [esp+1Ch+var_4], ebx
.text:004017F7                 mov     ebx, [esp+1Ch+Code]
.text:004017FB                 test    ebx, ebx
.text:004017FD                 jz      short loc_401833
.text:004017FF                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401806                 call    ds:libintl_gettext
.text:0040180C                 mov     edx, ds:_iob
.text:00401812                 mov     ecx, ds:dword_4071B0
.text:00401818                 add     edx, 40h ; '@'
.text:0040181B                 mov     [esp+1Ch+var_14], ecx
.text:0040181F                 mov     [esp+1Ch+Format], eax ; Format
.text:00401823                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00401826                 call    fprintf
.text:0040182B
.text:0040182B loc_40182B:                             ; CODE XREF: sub_4017F0+C7↓j
.text:0040182B                 mov     [esp+1Ch+Stream], ebx ; Code
.text:0040182E                 call    exit
.text:00401833 ; ---------------------------------------------------------------------------
.text:00401833
.text:00401833 loc_401833:                             ; CODE XREF: sub_4017F0+D↑j
.text:00401833                 mov     [esp+1Ch+Stream], offset aUsageSNumberSu ; "Usage: %s NUMBER[SUFFIX]...\n  or:  %s "...
.text:0040183A                 call    ds:libintl_gettext
.text:00401840                 mov     ecx, ds:dword_4071B0
.text:00401846                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401849                 mov     [esp+1Ch+var_14], ecx
.text:0040184D                 mov     [esp+1Ch+Format], ecx
.text:00401851                 call    printf
.text:00401856                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040185D                 call    ds:libintl_gettext
.text:00401863                 mov     ecx, ds:_iob
.text:00401869                 add     ecx, 20h ; ' '
.text:0040186C                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401870                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401873                 call    fputs
.text:00401878                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:0040187F                 call    ds:libintl_gettext
.text:00401885                 mov     ecx, ds:_iob
.text:0040188B                 add     ecx, 20h ; ' '
.text:0040188E                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401892                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401895                 call    fputs
.text:0040189A                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004018A1                 call    ds:libintl_gettext
.text:004018A7                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004018AF                 mov     [esp+1Ch+Stream], eax ; Format
.text:004018B2                 call    printf
.text:004018B7                 jmp     loc_40182B
.text:004018B7 sub_4017F0      endp
.text:004018B7
.text:004018B7 ; ---------------------------------------------------------------------------
.text:004018BC                 align 10h
.text:004018C0 dword_4018C0    dd 90002D2Dh, 7 dup(90909090h)
.text:004018C0                                         ; DATA XREF: sub_401B10+E4↓o
.text:004018E0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004018E0                                         ; DATA XREF: sub_401B10+2FC↓o
.text:0040190D                 align 20h
.text:00401920 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401920                                         ; DATA XREF: sub_401B10:loc_401E72↓o
.text:0040194D                 align 20h
.text:00401960 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401960                                         ; DATA XREF: sub_401B10:loc_401F10↓o
.text:00401960                                         ; sub_401B10:loc_4022D7↓o
.text:00401986                 align 20h
.text:004019A0 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:004019A0                                         ; DATA XREF: sub_401B10+48E↓o
.text:004019C0 dword_4019C0    dd 90909000h, 7 dup(90909090h)
.text:004019C0                                         ; DATA XREF: sub_401B10:loc_401FE1↓o
.text:004019E0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:004019E0                                         ; DATA XREF: sub_401B10:loc_401FFA↓o
.text:00401A00 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00401A00                                         ; DATA XREF: sub_401B10:loc_4020DF↓o
.text:00401A00                                         ; sub_401B10:loc_40240C↓o
.text:00401A27                 align 20h
.text:00401A40 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401A40                                         ; DATA XREF: sub_401B10:loc_402253↓o
.text:00401A6E                 align 20h
.text:00401A80 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00401A80                                         ; DATA XREF: sub_401B10:loc_40233F↓o
.text:00401AA1 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00401AA1                                         ; DATA XREF: sub_401B10+93F↓o
.text:00401ABB aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00401ABB                                         ; DATA XREF: sub_401B10:loc_402487↓o
.text:00401AD5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00401AD5                                         ; DATA XREF: sub_401B10:loc_4024AE↓o
.text:00401AF3 ; const char VarName[]
.text:00401AF3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401B10:loc_402660↓o
.text:00401B03                 align 10h
.text:00401B10
.text:00401B10 ; =============== S U B R O U T I N E =======================================
.text:00401B10
.text:00401B10
.text:00401B10 ; int __cdecl sub_401B10(int, int, char *Str, int, int, int, int, int)
.text:00401B10 sub_401B10      proc near               ; CODE XREF: sub_4026A0+5A↓p
.text:00401B10                                         ; .text:0040278A↓p ...
.text:00401B10
.text:00401B10 Str1            = dword ptr -5Ch
.text:00401B10 Str2            = dword ptr -58h
.text:00401B10 MaxCount        = dword ptr -54h
.text:00401B10 var_50          = dword ptr -50h
.text:00401B10 var_4C          = dword ptr -4Ch
.text:00401B10 var_3C          = dword ptr -3Ch
.text:00401B10 var_38          = dword ptr -38h
.text:00401B10 var_34          = dword ptr -34h
.text:00401B10 var_30          = dword ptr -30h
.text:00401B10 var_2C          = dword ptr -2Ch
.text:00401B10 var_28          = dword ptr -28h
.text:00401B10 var_24          = dword ptr -24h
.text:00401B10 var_20          = dword ptr -20h
.text:00401B10 var_1C          = dword ptr -1Ch
.text:00401B10 var_18          = dword ptr -18h
.text:00401B10 var_14          = dword ptr -14h
.text:00401B10 arg_0           = dword ptr  4
.text:00401B10 arg_4           = dword ptr  8
.text:00401B10 Str             = dword ptr  0Ch
.text:00401B10 arg_C           = dword ptr  10h
.text:00401B10 arg_10          = dword ptr  14h
.text:00401B10 arg_14          = dword ptr  18h
.text:00401B10 arg_18          = dword ptr  1Ch
.text:00401B10 arg_1C          = dword ptr  20h
.text:00401B10
.text:00401B10                 push    ebp
.text:00401B11                 mov     eax, 0FFFFFFFFh
.text:00401B16                 push    edi
.text:00401B17                 push    esi
.text:00401B18                 push    ebx
.text:00401B19                 sub     esp, 4Ch
.text:00401B1C                 mov     esi, [esp+5Ch+Str]
.text:00401B20                 mov     ebp, [esp+5Ch+arg_1C]
.text:00401B24                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00401B27                 mov     ebx, [ebp+4]
.text:00401B2A                 setz    dl
.text:00401B2D                 movzx   ecx, dl
.text:00401B30                 dec     ecx
.text:00401B31                 and     ecx, ebx
.text:00401B33                 mov     [esp+5Ch+var_14], ecx
.text:00401B37                 mov     ecx, [esp+5Ch+arg_0]
.text:00401B3B                 test    ecx, ecx
.text:00401B3D                 jle     loc_401C67
.text:00401B43                 mov     dword ptr [ebp+0Ch], 0
.text:00401B4A                 mov     ebx, [ebp+0]
.text:00401B4D                 test    ebx, ebx
.text:00401B4F                 jz      loc_402680
.text:00401B55                 mov     edi, [ebp+10h]
.text:00401B58                 test    edi, edi
.text:00401B5A                 jnz     short loc_401BB3
.text:00401B5C                 lea     esi, [esi+0]
.text:00401B60
.text:00401B60 loc_401B60:                             ; CODE XREF: sub_401B10+B7C↓j
.text:00401B60                 mov     [ebp+24h], ebx
.text:00401B63                 mov     esi, [esp+5Ch+Str]
.text:00401B67                 mov     [ebp+20h], ebx
.text:00401B6A                 mov     ecx, [esp+5Ch+arg_18]
.text:00401B6E                 xor     ebx, ebx
.text:00401B70                 mov     dword ptr [ebp+14h], 0
.text:00401B77                 test    ecx, ecx
.text:00401B79                 jz      loc_402660
.text:00401B7F
.text:00401B7F loc_401B7F:                             ; CODE XREF: sub_401B10+B64↓j
.text:00401B7F                 mov     ebx, 1
.text:00401B84
.text:00401B84 loc_401B84:                             ; CODE XREF: sub_401B10+B5E↓j
.text:00401B84                 mov     [ebp+1Ch], ebx
.text:00401B87                 mov     ecx, [esp+5Ch+Str]
.text:00401B8B                 movzx   eax, byte ptr [ecx]
.text:00401B8E                 cmp     al, 2Dh ; '-'
.text:00401B90                 jz      loc_402650
.text:00401B96                 cmp     al, 2Bh ; '+'
.text:00401B98                 jz      loc_402639
.text:00401B9E                 xor     edx, edx
.text:00401BA0                 test    ebx, ebx
.text:00401BA2                 setz    dl
.text:00401BA5                 mov     [ebp+18h], edx
.text:00401BA8
.text:00401BA8 loc_401BA8:                             ; CODE XREF: sub_401B10+B35↓j
.text:00401BA8                 mov     [esp+5Ch+Str], esi
.text:00401BAC                 mov     dword ptr [ebp+10h], 1
.text:00401BB3
.text:00401BB3 loc_401BB3:                             ; CODE XREF: sub_401B10+4A↑j
.text:00401BB3                 mov     eax, [ebp+14h]
.text:00401BB6                 test    eax, eax
.text:00401BB8                 jz      short loc_401BC3
.text:00401BBA                 cmp     byte ptr [eax], 0
.text:00401BBD                 jnz     loc_401CA0
.text:00401BC3
.text:00401BC3 loc_401BC3:                             ; CODE XREF: sub_401B10+A8↑j
.text:00401BC3                 mov     ebx, [ebp+0]
.text:00401BC6                 cmp     [ebp+24h], ebx
.text:00401BC9                 jle     short loc_401BCE
.text:00401BCB                 mov     [ebp+24h], ebx
.text:00401BCE
.text:00401BCE loc_401BCE:                             ; CODE XREF: sub_401B10+B9↑j
.text:00401BCE                 cmp     [ebp+20h], ebx
.text:00401BD1                 jle     short loc_401BD6
.text:00401BD3                 mov     [ebp+20h], ebx
.text:00401BD6
.text:00401BD6 loc_401BD6:                             ; CODE XREF: sub_401B10+C1↑j
.text:00401BD6                 cmp     dword ptr [ebp+18h], 1
.text:00401BDA                 jz      loc_4025B0
.text:00401BE0
.text:00401BE0 loc_401BE0:                             ; CODE XREF: sub_401B10+B13↓j
.text:00401BE0                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401BE4                 jz      loc_402594
.text:00401BEA                 cld
.text:00401BEB                 mov     ecx, [esp+5Ch+arg_4]
.text:00401BEF                 mov     edx, 3
.text:00401BF4                 mov     edi, offset dword_4018C0
.text:00401BF9                 mov     esi, [ecx+ebx*4]
.text:00401BFC                 mov     ecx, edx
.text:00401BFE                 repe cmpsb
.text:00401C00                 jnz     short loc_401C3C
.text:00401C02                 mov     edx, [ebp+24h]
.text:00401C05                 lea     eax, [ebx+1]
.text:00401C08                 cmp     [ebp+20h], edx
.text:00401C0B                 mov     [ebp+0], eax
.text:00401C0E                 jz      loc_4025A8
.text:00401C14                 cmp     edx, eax
.text:00401C16                 jz      short loc_401C30
.text:00401C18                 mov     [esp+5Ch+Str2], ebp
.text:00401C1C                 mov     ebx, [esp+5Ch+arg_4]
.text:00401C20                 mov     [esp+5Ch+Str1], ebx
.text:00401C23                 call    sub_4027C0
.text:00401C28                 nop
.text:00401C29                 lea     esi, [esi+0]
.text:00401C30
.text:00401C30 loc_401C30:                             ; CODE XREF: sub_401B10+106↑j
.text:00401C30                                         ; sub_401B10+A9B↓j
.text:00401C30                 mov     eax, [esp+5Ch+arg_0]
.text:00401C34                 mov     ebx, eax
.text:00401C36                 mov     [ebp+24h], eax
.text:00401C39                 mov     [ebp+0], eax
.text:00401C3C
.text:00401C3C loc_401C3C:                             ; CODE XREF: sub_401B10+F0↑j
.text:00401C3C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401C40                 jz      loc_402594
.text:00401C46                 mov     esi, [esp+5Ch+arg_4]
.text:00401C4A                 mov     eax, [esi+ebx*4]
.text:00401C4D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401C50                 jz      short loc_401C77
.text:00401C52
.text:00401C52 loc_401C52:                             ; CODE XREF: sub_401B10+16D↓j
.text:00401C52                 mov     edx, [ebp+18h]
.text:00401C55                 test    edx, edx
.text:00401C57                 jz      short loc_401C70
.text:00401C59                 mov     [ebp+0Ch], eax
.text:00401C5C                 lea     edi, [ebx+1]
.text:00401C5F                 mov     eax, 1
.text:00401C64                 mov     [ebp+0], edi
.text:00401C67
.text:00401C67 loc_401C67:                             ; CODE XREF: sub_401B10+2D↑j
.text:00401C67                                         ; sub_401B10+165↓j ...
.text:00401C67                 add     esp, 4Ch
.text:00401C6A                 pop     ebx
.text:00401C6B                 pop     esi
.text:00401C6C                 pop     edi
.text:00401C6D                 pop     ebp
.text:00401C6E                 retn
.text:00401C6E ; ---------------------------------------------------------------------------
.text:00401C6F                 align 10h
.text:00401C70
.text:00401C70 loc_401C70:                             ; CODE XREF: sub_401B10+147↑j
.text:00401C70                                         ; sub_401B10+A8A↓j ...
.text:00401C70                 mov     eax, 0FFFFFFFFh
.text:00401C75                 jmp     short loc_401C67
.text:00401C77 ; ---------------------------------------------------------------------------
.text:00401C77
.text:00401C77 loc_401C77:                             ; CODE XREF: sub_401B10+140↑j
.text:00401C77                 movzx   edx, byte ptr [eax+1]
.text:00401C7B                 test    dl, dl
.text:00401C7D                 jz      short loc_401C52
.text:00401C7F                 mov     ebx, [esp+5Ch+arg_C]
.text:00401C83                 xor     ecx, ecx
.text:00401C85                 test    ebx, ebx
.text:00401C87                 jz      short loc_401C92
.text:00401C89                 cmp     dl, 2Dh ; '-'
.text:00401C8C                 jz      loc_40258A
.text:00401C92
.text:00401C92 loc_401C92:                             ; CODE XREF: sub_401B10+177↑j
.text:00401C92                                         ; sub_401B10+A7F↓j
.text:00401C92                 lea     esi, [ecx+eax+1]
.text:00401C96                 mov     [ebp+14h], esi
.text:00401C99                 lea     esi, [esi+0]
.text:00401CA0
.text:00401CA0 loc_401CA0:                             ; CODE XREF: sub_401B10+AD↑j
.text:00401CA0                 mov     ecx, [esp+5Ch+arg_C]
.text:00401CA4                 test    ecx, ecx
.text:00401CA6                 jz      loc_402030
.text:00401CAC                 mov     edx, [ebp+0]
.text:00401CAF                 mov     edi, [esp+5Ch+arg_4]
.text:00401CB3                 mov     eax, [edi+edx*4]
.text:00401CB6                 movzx   edx, byte ptr [eax+1]
.text:00401CBA                 cmp     dl, 2Dh ; '-'
.text:00401CBD                 jz      short loc_401CD5
.text:00401CBF                 mov     ebx, [esp+5Ch+arg_14]
.text:00401CC3                 test    ebx, ebx
.text:00401CC5                 jz      loc_402030
.text:00401CCB                 cmp     byte ptr [eax+2], 0
.text:00401CCF                 jz      loc_40256A
.text:00401CD5
.text:00401CD5 loc_401CD5:                             ; CODE XREF: sub_401B10+1AD↑j
.text:00401CD5                                         ; sub_401B10+A75↓j
.text:00401CD5                 mov     [esp+5Ch+var_18], 0
.text:00401CDD                 mov     ecx, [ebp+14h]
.text:00401CE0                 mov     [esp+5Ch+var_1C], 0
.text:00401CE8                 mov     [esp+5Ch+var_20], 0
.text:00401CF0                 mov     edi, ecx
.text:00401CF2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00401CFA                 movzx   eax, byte ptr [ecx]
.text:00401CFD                 test    al, al
.text:00401CFF                 jz      short loc_401D1C
.text:00401D01                 cmp     al, 3Dh ; '='
.text:00401D03                 jz      short loc_401D1C
.text:00401D05                 lea     esi, [esi+0]
.text:00401D09                 lea     edi, [edi+0]
.text:00401D10
.text:00401D10 loc_401D10:                             ; CODE XREF: sub_401B10+20A↓j
.text:00401D10                 inc     edi
.text:00401D11                 movzx   eax, byte ptr [edi]
.text:00401D14                 test    al, al
.text:00401D16                 jz      short loc_401D1C
.text:00401D18                 cmp     al, 3Dh ; '='
.text:00401D1A                 jnz     short loc_401D10
.text:00401D1C
.text:00401D1C loc_401D1C:                             ; CODE XREF: sub_401B10+1EF↑j
.text:00401D1C                                         ; sub_401B10+1F3↑j ...
.text:00401D1C                 mov     [esp+5Ch+var_28], 0
.text:00401D24                 mov     esi, [esp+5Ch+arg_C]
.text:00401D28                 mov     ebx, [esi]
.text:00401D2A                 test    ebx, ebx
.text:00401D2C                 mov     edx, ebx
.text:00401D2E                 jz      loc_401F50
.text:00401D34                 lea     esi, [esi+0]
.text:00401D3A                 lea     edi, [edi+0]
.text:00401D40
.text:00401D40 loc_401D40:                             ; CODE XREF: sub_401B10+25E↓j
.text:00401D40                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00401D44                 mov     ebx, edi
.text:00401D46                 sub     ebx, ecx
.text:00401D48                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00401D4C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00401D4F                 call    strncmp
.text:00401D54                 test    eax, eax
.text:00401D56                 jz      loc_4024E6
.text:00401D5C
.text:00401D5C loc_401D5C:                             ; CODE XREF: sub_401B10+A0F↓j
.text:00401D5C                                         ; sub_401B10+A24↓j ...
.text:00401D5C                 inc     [esp+5Ch+var_28]
.text:00401D60                 add     esi, 10h
.text:00401D63                 mov     ecx, [esi]
.text:00401D65                 test    ecx, ecx
.text:00401D67                 mov     edx, ecx
.text:00401D69                 jz      short loc_401D70
.text:00401D6B                 mov     ecx, [ebp+14h]
.text:00401D6E                 jmp     short loc_401D40
.text:00401D70 ; ---------------------------------------------------------------------------
.text:00401D70
.text:00401D70 loc_401D70:                             ; CODE XREF: sub_401B10+259↑j
.text:00401D70                                         ; sub_401B10+A55↓j
.text:00401D70                 mov     esi, [esp+5Ch+var_20]
.text:00401D74                 test    esi, esi
.text:00401D76                 jz      short loc_401D84
.text:00401D78                 mov     edx, [esp+5Ch+var_1C]
.text:00401D7C                 test    edx, edx
.text:00401D7E                 jz      loc_402490
.text:00401D84
.text:00401D84 loc_401D84:                             ; CODE XREF: sub_401B10+266↑j
.text:00401D84                 mov     eax, [esp+5Ch+var_18]
.text:00401D88                 test    eax, eax
.text:00401D8A                 jz      loc_401F50
.text:00401D90                 mov     ecx, [ebp+0]
.text:00401D93                 lea     eax, [ecx+1]
.text:00401D96                 mov     [ebp+0], eax
.text:00401D99                 cmp     byte ptr [edi], 0
.text:00401D9C                 jz      loc_401EB0
.text:00401DA2                 mov     ecx, [esp+5Ch+var_18]
.text:00401DA6                 mov     esi, [ecx+4]
.text:00401DA9                 test    esi, esi
.text:00401DAB                 jz      short loc_401DF6
.text:00401DAD                 lea     ebx, [edi+1]
.text:00401DB0                 mov     [ebp+0Ch], ebx
.text:00401DB3
.text:00401DB3 loc_401DB3:                             ; CODE XREF: sub_401B10+3A8↓j
.text:00401DB3                                         ; sub_401B10+3C4↓j
.text:00401DB3                 mov     ebx, [ebp+14h]
.text:00401DB6                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00401DB9                 call    strlen
.text:00401DBE                 add     [ebp+14h], eax
.text:00401DC1                 mov     esi, [esp+5Ch+arg_10]
.text:00401DC5                 test    esi, esi
.text:00401DC7                 jz      short loc_401DD3
.text:00401DC9                 mov     ebp, [esp+5Ch+var_24]
.text:00401DCD                 mov     ecx, [esp+5Ch+arg_10]
.text:00401DD1                 mov     [ecx], ebp
.text:00401DD3
.text:00401DD3 loc_401DD3:                             ; CODE XREF: sub_401B10+2B7↑j
.text:00401DD3                 mov     eax, [esp+5Ch+var_18]
.text:00401DD7                 mov     ecx, [eax+8]
.text:00401DDA                 test    ecx, ecx
.text:00401DDC                 jnz     short loc_401DEA
.text:00401DDE                 mov     ecx, [esp+5Ch+var_18]
.text:00401DE2
.text:00401DE2 loc_401DE2:                             ; CODE XREF: sub_401B10+723↓j
.text:00401DE2                 mov     eax, [ecx+0Ch]
.text:00401DE5                 jmp     loc_401C67
.text:00401DEA ; ---------------------------------------------------------------------------
.text:00401DEA
.text:00401DEA loc_401DEA:                             ; CODE XREF: sub_401B10+2CC↑j
.text:00401DEA                                         ; sub_401B10+719↓j
.text:00401DEA                 mov     esi, [eax+0Ch]
.text:00401DED                 xor     eax, eax
.text:00401DEF                 mov     [ecx], esi
.text:00401DF1                 jmp     loc_401C67
.text:00401DF6 ; ---------------------------------------------------------------------------
.text:00401DF6
.text:00401DF6 loc_401DF6:                             ; CODE XREF: sub_401B10+29B↑j
.text:00401DF6                 mov     edi, [esp+5Ch+var_14]
.text:00401DFA                 test    edi, edi
.text:00401DFC                 jz      short loc_401E50
.text:00401DFE                 mov     esi, [esp+5Ch+arg_4]
.text:00401E02                 mov     edx, [esi+eax*4-4]
.text:00401E06                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00401E0A                 jz      short loc_401E72
.text:00401E0C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00401E13                 call    ds:libintl_gettext
.text:00401E19                 mov     edx, [esp+5Ch+var_18]
.text:00401E1D                 mov     edi, [edx]
.text:00401E1F                 mov     [esp+5Ch+var_4C], edi
.text:00401E23                 mov     ebx, [ebp+0]
.text:00401E26                 mov     edi, [esp+5Ch+arg_4]
.text:00401E2A                 mov     ecx, [edi+ebx*4-4]
.text:00401E2E                 movsx   esi, byte ptr [ecx]
.text:00401E31                 mov     ecx, ds:_iob
.text:00401E37                 add     ecx, 40h ; '@'
.text:00401E3A                 mov     [esp+5Ch+var_50], esi
.text:00401E3E                 mov     ebx, [edi]
.text:00401E40                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401E44                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401E47                 mov     [esp+5Ch+MaxCount], ebx
.text:00401E4B                 call    fprintf
.text:00401E50
.text:00401E50 loc_401E50:                             ; CODE XREF: sub_401B10+2EC↑j
.text:00401E50                                         ; sub_401B10+398↓j
.text:00401E50                 mov     ecx, [ebp+14h]
.text:00401E53                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401E56                 call    strlen
.text:00401E5B                 add     [ebp+14h], eax
.text:00401E5E                 mov     eax, [esp+5Ch+var_18]
.text:00401E62                 mov     esi, [eax+0Ch]
.text:00401E65                 mov     [ebp+8], esi
.text:00401E68
.text:00401E68 loc_401E68:                             ; CODE XREF: sub_401B10+4E5↓j
.text:00401E68                                         ; sub_401B10+73E↓j ...
.text:00401E68                 mov     eax, 3Fh ; '?'
.text:00401E6D                 jmp     loc_401C67
.text:00401E72 ; ---------------------------------------------------------------------------
.text:00401E72
.text:00401E72 loc_401E72:                             ; CODE XREF: sub_401B10+2FA↑j
.text:00401E72                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00401E79                 call    ds:libintl_gettext
.text:00401E7F                 mov     edx, [esp+5Ch+var_18]
.text:00401E83                 mov     edi, [esp+5Ch+arg_4]
.text:00401E87                 mov     ecx, ds:_iob
.text:00401E8D                 mov     esi, [edx]
.text:00401E8F                 add     ecx, 40h ; '@'
.text:00401E92                 mov     [esp+5Ch+var_50], esi
.text:00401E96                 mov     ebx, [edi]
.text:00401E98                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401E9C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401E9F                 mov     [esp+5Ch+MaxCount], ebx
.text:00401EA3                 call    fprintf
.text:00401EA8                 jmp     short loc_401E50
.text:00401EA8 ; ---------------------------------------------------------------------------
.text:00401EAA                 align 10h
.text:00401EB0
.text:00401EB0 loc_401EB0:                             ; CODE XREF: sub_401B10+28C↑j
.text:00401EB0                 mov     ebx, [esp+5Ch+var_18]
.text:00401EB4                 cmp     dword ptr [ebx+4], 1
.text:00401EB8                 jnz     loc_401DB3
.text:00401EBE                 cmp     eax, [esp+5Ch+arg_0]
.text:00401EC2                 jge     short loc_401ED9
.text:00401EC4                 mov     ebx, [esp+5Ch+arg_4]
.text:00401EC8                 lea     edi, [ecx+2]
.text:00401ECB                 mov     [ebp+0], edi
.text:00401ECE                 mov     esi, [ebx+eax*4]
.text:00401ED1                 mov     [ebp+0Ch], esi
.text:00401ED4                 jmp     loc_401DB3
.text:00401ED9 ; ---------------------------------------------------------------------------
.text:00401ED9
.text:00401ED9 loc_401ED9:                             ; CODE XREF: sub_401B10+3B2↑j
.text:00401ED9                 mov     edx, [esp+5Ch+var_14]
.text:00401EDD                 test    edx, edx
.text:00401EDF                 jnz     short loc_401F10
.text:00401EE1
.text:00401EE1 loc_401EE1:                             ; CODE XREF: sub_401B10+437↓j
.text:00401EE1                 mov     edx, [ebp+14h]
.text:00401EE4                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401EE7                 call    strlen
.text:00401EEC                 add     [ebp+14h], eax
.text:00401EEF                 mov     eax, [esp+5Ch+var_18]
.text:00401EF3                 mov     edi, [eax+0Ch]
.text:00401EF6                 mov     [ebp+8], edi
.text:00401EF9
.text:00401EF9 loc_401EF9:                             ; CODE XREF: sub_401B10+7C2↓j
.text:00401EF9                 mov     ebp, [esp+5Ch+Str]
.text:00401EFD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00401F01                 setnz   bl
.text:00401F04                 movzx   esi, bl
.text:00401F07                 lea     eax, [esi+esi*4+3Ah]
.text:00401F0B                 jmp     loc_401C67
.text:00401F10 ; ---------------------------------------------------------------------------
.text:00401F10
.text:00401F10 loc_401F10:                             ; CODE XREF: sub_401B10+3CF↑j
.text:00401F10                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00401F17                 call    ds:libintl_gettext
.text:00401F1D                 mov     ecx, [ebp+0]
.text:00401F20                 mov     esi, [esp+5Ch+arg_4]
.text:00401F24                 mov     ebx, [esi+ecx*4-4]
.text:00401F28                 mov     ecx, ds:_iob
.text:00401F2E                 mov     [esp+5Ch+var_50], ebx
.text:00401F32                 mov     edi, [esi]
.text:00401F34                 add     ecx, 40h ; '@'
.text:00401F37                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401F3B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401F3E                 mov     [esp+5Ch+MaxCount], edi
.text:00401F42                 call    fprintf
.text:00401F47                 jmp     short loc_401EE1
.text:00401F47 ; ---------------------------------------------------------------------------
.text:00401F49                 align 10h
.text:00401F50
.text:00401F50 loc_401F50:                             ; CODE XREF: sub_401B10+21E↑j
.text:00401F50                                         ; sub_401B10+27A↑j
.text:00401F50                 mov     eax, [esp+5Ch+arg_14]
.text:00401F54                 test    eax, eax
.text:00401F56                 jz      short loc_401F86
.text:00401F58                 mov     ebx, [ebp+0]
.text:00401F5B                 mov     esi, [esp+5Ch+arg_4]
.text:00401F5F                 mov     edi, [esi+ebx*4]
.text:00401F62                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401F66                 jz      short loc_401F89
.text:00401F68                 mov     ecx, [ebp+14h]
.text:00401F6B                 mov     edx, [esp+5Ch+Str]
.text:00401F6F                 movsx   ebx, byte ptr [ecx]
.text:00401F72                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401F75                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00401F79                 call    strchr
.text:00401F7E                 test    eax, eax
.text:00401F80                 jnz     loc_402030
.text:00401F86
.text:00401F86 loc_401F86:                             ; CODE XREF: sub_401B10+446↑j
.text:00401F86                 mov     ebx, [ebp+0]
.text:00401F89
.text:00401F89 loc_401F89:                             ; CODE XREF: sub_401B10+456↑j
.text:00401F89                 mov     eax, [esp+5Ch+var_14]
.text:00401F8D                 test    eax, eax
.text:00401F8F                 jz      short loc_401FE1
.text:00401F91                 mov     esi, [esp+5Ch+arg_4]
.text:00401F95                 mov     edi, [esi+ebx*4]
.text:00401F98                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401F9C                 jz      short loc_401FFA
.text:00401F9E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00401FA5                 call    ds:libintl_gettext
.text:00401FAB                 mov     edi, [ebp+14h]
.text:00401FAE                 mov     [esp+5Ch+var_4C], edi
.text:00401FB2                 mov     ebx, [ebp+0]
.text:00401FB5                 mov     edi, [esp+5Ch+arg_4]
.text:00401FB9                 mov     esi, [edi+ebx*4]
.text:00401FBC                 movsx   ecx, byte ptr [esi]
.text:00401FBF                 mov     esi, ds:_iob
.text:00401FC5                 add     esi, 40h ; '@'
.text:00401FC8                 mov     [esp+5Ch+var_50], ecx
.text:00401FCC                 mov     ebx, [edi]
.text:00401FCE                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401FD2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00401FD5                 mov     [esp+5Ch+MaxCount], ebx
.text:00401FD9                 call    fprintf
.text:00401FDE
.text:00401FDE loc_401FDE:                             ; CODE XREF: sub_401B10+51D↓j
.text:00401FDE                 mov     ebx, [ebp+0]
.text:00401FE1
.text:00401FE1 loc_401FE1:                             ; CODE XREF: sub_401B10+47F↑j
.text:00401FE1                 mov     dword ptr [ebp+14h], offset dword_4019C0
.text:00401FE8                 lea     edx, [ebx+1]
.text:00401FEB                 mov     [ebp+0], edx
.text:00401FEE
.text:00401FEE loc_401FEE:                             ; CODE XREF: sub_401B10+999↓j
.text:00401FEE                 mov     dword ptr [ebp+8], 0
.text:00401FF5                 jmp     loc_401E68
.text:00401FFA ; ---------------------------------------------------------------------------
.text:00401FFA
.text:00401FFA loc_401FFA:                             ; CODE XREF: sub_401B10+48C↑j
.text:00401FFA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00402001                 call    ds:libintl_gettext
.text:00402007                 mov     ecx, [ebp+14h]
.text:0040200A                 mov     edi, [esp+5Ch+arg_4]
.text:0040200E                 mov     edx, ds:_iob
.text:00402014                 mov     [esp+5Ch+var_50], ecx
.text:00402018                 mov     ebx, [edi]
.text:0040201A                 add     edx, 40h ; '@'
.text:0040201D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402021                 mov     [esp+5Ch+MaxCount], ebx
.text:00402025                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402028                 call    fprintf
.text:0040202D                 jmp     short loc_401FDE
.text:0040202D ; ---------------------------------------------------------------------------
.text:0040202F                 align 10h
.text:00402030
.text:00402030 loc_402030:                             ; CODE XREF: sub_401B10+196↑j
.text:00402030                                         ; sub_401B10+1B5↑j ...
.text:00402030                 mov     esi, [ebp+14h]
.text:00402033                 movzx   ebx, byte ptr [esi]
.text:00402036                 inc     esi
.text:00402037                 mov     [ebp+14h], esi
.text:0040203A                 mov     ecx, [esp+5Ch+Str]
.text:0040203E                 movsx   esi, bl
.text:00402041                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402045                 mov     edi, esi
.text:00402047                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040204A                 call    strchr
.text:0040204F                 mov     ecx, [ebp+14h]
.text:00402052                 cmp     byte ptr [ecx], 0
.text:00402055                 jnz     short loc_40205A
.text:00402057                 inc     dword ptr [ebp+0]
.text:0040205A
.text:0040205A loc_40205A:                             ; CODE XREF: sub_401B10+545↑j
.text:0040205A                 test    eax, eax
.text:0040205C                 jz      loc_402440
.text:00402062                 cmp     bl, 3Ah ; ':'
.text:00402065                 jz      loc_402440
.text:0040206B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040206E                 jz      loc_402126
.text:00402074                 movzx   edx, byte ptr [eax+1]
.text:00402078
.text:00402078 loc_402078:                             ; CODE XREF: sub_401B10+61D↓j
.text:00402078                 cmp     dl, 3Ah ; ':'
.text:0040207B                 jz      short loc_402084
.text:0040207D
.text:0040207D loc_40207D:                             ; CODE XREF: sub_401B10+590↓j
.text:0040207D                 mov     eax, esi
.text:0040207F                 jmp     loc_401C67
.text:00402084 ; ---------------------------------------------------------------------------
.text:00402084
.text:00402084 loc_402084:                             ; CODE XREF: sub_401B10+56B↑j
.text:00402084                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402088                 jz      loc_402111
.text:0040208E                 cmp     byte ptr [ecx], 0
.text:00402091                 jz      short loc_4020A2
.text:00402093
.text:00402093 loc_402093:                             ; CODE XREF: sub_401B10+604↓j
.text:00402093                 inc     dword ptr [ebp+0]
.text:00402096                 mov     [ebp+0Ch], ecx
.text:00402099
.text:00402099 loc_402099:                             ; CODE XREF: sub_401B10+5AB↓j
.text:00402099                                         ; sub_401B10+5C6↓j ...
.text:00402099                 mov     dword ptr [ebp+14h], 0
.text:004020A0                 jmp     short loc_40207D
.text:004020A2 ; ---------------------------------------------------------------------------
.text:004020A2
.text:004020A2 loc_4020A2:                             ; CODE XREF: sub_401B10+581↑j
.text:004020A2                 mov     ecx, [ebp+0]
.text:004020A5                 cmp     ecx, [esp+5Ch+arg_0]
.text:004020A9                 jz      short loc_4020BD
.text:004020AB                 mov     eax, [esp+5Ch+arg_4]
.text:004020AF                 lea     edx, [ecx+1]
.text:004020B2                 mov     [ebp+0], edx
.text:004020B5                 mov     ebx, [eax+ecx*4]
.text:004020B8                 mov     [ebp+0Ch], ebx
.text:004020BB                 jmp     short loc_402099
.text:004020BD ; ---------------------------------------------------------------------------
.text:004020BD
.text:004020BD loc_4020BD:                             ; CODE XREF: sub_401B10+599↑j
.text:004020BD                 mov     ecx, [esp+5Ch+var_14]
.text:004020C1                 test    ecx, ecx
.text:004020C3                 jnz     short loc_4020DF
.text:004020C5
.text:004020C5 loc_4020C5:                             ; CODE XREF: sub_401B10+5FF↓j
.text:004020C5                 mov     [ebp+8], edi
.text:004020C8                 mov     edi, [esp+5Ch+Str]
.text:004020CC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:004020CF                 jz      short loc_4020D8
.text:004020D1                 mov     esi, 3Fh ; '?'
.text:004020D6                 jmp     short loc_402099
.text:004020D8 ; ---------------------------------------------------------------------------
.text:004020D8
.text:004020D8 loc_4020D8:                             ; CODE XREF: sub_401B10+5BF↑j
.text:004020D8                 mov     esi, 3Ah ; ':'
.text:004020DD                 jmp     short loc_402099
.text:004020DF ; ---------------------------------------------------------------------------
.text:004020DF
.text:004020DF loc_4020DF:                             ; CODE XREF: sub_401B10+5B3↑j
.text:004020DF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004020E6                 call    ds:libintl_gettext
.text:004020EC                 mov     [esp+5Ch+var_50], edi
.text:004020F0                 mov     ebx, [esp+5Ch+arg_4]
.text:004020F4                 mov     edx, ds:_iob
.text:004020FA                 mov     esi, [ebx]
.text:004020FC                 add     edx, 40h ; '@'
.text:004020FF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402103                 mov     [esp+5Ch+MaxCount], esi
.text:00402107                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040210A                 call    fprintf
.text:0040210F                 jmp     short loc_4020C5
.text:00402111 ; ---------------------------------------------------------------------------
.text:00402111
.text:00402111 loc_402111:                             ; CODE XREF: sub_401B10+578↑j
.text:00402111                 cmp     byte ptr [ecx], 0
.text:00402114                 jnz     loc_402093
.text:0040211A                 mov     dword ptr [ebp+0Ch], 0
.text:00402121                 jmp     loc_402099
.text:00402126 ; ---------------------------------------------------------------------------
.text:00402126
.text:00402126 loc_402126:                             ; CODE XREF: sub_401B10+55E↑j
.text:00402126                 movzx   edx, byte ptr [eax+1]
.text:0040212A                 cmp     dl, 3Bh ; ';'
.text:0040212D                 jnz     loc_402078
.text:00402133                 mov     [esp+5Ch+var_2C], 0
.text:0040213B                 mov     [esp+5Ch+var_30], 0
.text:00402143                 mov     [esp+5Ch+var_34], 0
.text:0040214B                 mov     [esp+5Ch+var_38], 0
.text:00402153                 cmp     byte ptr [ecx], 0
.text:00402156                 jz      loc_4023CB
.text:0040215C                 inc     dword ptr [ebp+0]
.text:0040215F                 mov     [ebp+0Ch], ecx
.text:00402162
.text:00402162 loc_402162:                             ; CODE XREF: sub_401B10+8D4↓j
.text:00402162                 mov     edi, [ebp+0Ch]
.text:00402165                 mov     [ebp+14h], edi
.text:00402168                 movzx   eax, byte ptr [edi]
.text:0040216B                 test    al, al
.text:0040216D                 jz      short loc_40217F
.text:0040216F                 cmp     al, 3Dh ; '='
.text:00402171                 jz      short loc_40217F
.text:00402173
.text:00402173 loc_402173:                             ; CODE XREF: sub_401B10+66D↓j
.text:00402173                 inc     edi
.text:00402174                 movzx   eax, byte ptr [edi]
.text:00402177                 test    al, al
.text:00402179                 jz      short loc_40217F
.text:0040217B                 cmp     al, 3Dh ; '='
.text:0040217D                 jnz     short loc_402173
.text:0040217F
.text:0040217F loc_40217F:                             ; CODE XREF: sub_401B10+65D↑j
.text:0040217F                                         ; sub_401B10+661↑j ...
.text:0040217F                 mov     [esp+5Ch+var_3C], 0
.text:00402187                 mov     esi, [esp+5Ch+arg_C]
.text:0040218B                 mov     eax, [esi]
.text:0040218D                 test    eax, eax
.text:0040218F                 jz      loc_402310
.text:00402195                 mov     ecx, eax
.text:00402197
.text:00402197 loc_402197:                             ; CODE XREF: sub_401B10+6B3↓j
.text:00402197                 mov     ebx, [ebp+14h]
.text:0040219A                 mov     eax, edi
.text:0040219C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040219F                 sub     eax, ebx
.text:004021A1                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:004021A5                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:004021A9                 call    strncmp
.text:004021AE                 test    eax, eax
.text:004021B0                 jz      loc_402377
.text:004021B6
.text:004021B6 loc_4021B6:                             ; CODE XREF: sub_401B10+88C↓j
.text:004021B6                                         ; sub_401B10+89D↓j
.text:004021B6                 inc     [esp+5Ch+var_3C]
.text:004021BA                 add     esi, 10h
.text:004021BD                 mov     edx, [esi]
.text:004021BF                 test    edx, edx
.text:004021C1                 mov     ecx, edx
.text:004021C3                 jnz     short loc_402197
.text:004021C5
.text:004021C5 loc_4021C5:                             ; CODE XREF: sub_401B10+8B6↓j
.text:004021C5                 mov     esi, [esp+5Ch+var_34]
.text:004021C9                 test    esi, esi
.text:004021CB                 jz      short loc_4021D9
.text:004021CD                 mov     ebx, [esp+5Ch+var_30]
.text:004021D1                 test    ebx, ebx
.text:004021D3                 jz      loc_402321
.text:004021D9
.text:004021D9 loc_4021D9:                             ; CODE XREF: sub_401B10+6BB↑j
.text:004021D9                 mov     esi, [esp+5Ch+var_2C]
.text:004021DD                 test    esi, esi
.text:004021DF                 jz      loc_402310
.text:004021E5                 cmp     byte ptr [edi], 0
.text:004021E8                 jz      loc_402290
.text:004021EE                 mov     ecx, [esp+5Ch+var_2C]
.text:004021F2                 mov     ebx, [ecx+4]
.text:004021F5                 test    ebx, ebx
.text:004021F7                 jz      short loc_402238
.text:004021F9                 lea     edx, [edi+1]
.text:004021FC                 mov     [ebp+0Ch], edx
.text:004021FF
.text:004021FF loc_4021FF:                             ; CODE XREF: sub_401B10+788↓j
.text:004021FF                                         ; sub_401B10+7A7↓j
.text:004021FF                 mov     edi, [ebp+14h]
.text:00402202                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402205                 call    strlen
.text:0040220A                 add     [ebp+14h], eax
.text:0040220D                 mov     eax, [esp+5Ch+arg_10]
.text:00402211                 test    eax, eax
.text:00402213                 jz      short loc_402220
.text:00402215                 mov     edx, [esp+5Ch+var_38]
.text:00402219                 mov     ebp, [esp+5Ch+arg_10]
.text:0040221D                 mov     [ebp+0], edx
.text:00402220
.text:00402220 loc_402220:                             ; CODE XREF: sub_401B10+703↑j
.text:00402220                 mov     eax, [esp+5Ch+var_2C]
.text:00402224                 mov     ecx, [eax+8]
.text:00402227                 test    ecx, ecx
.text:00402229                 jnz     loc_401DEA
.text:0040222F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402233                 jmp     loc_401DE2
.text:00402238 ; ---------------------------------------------------------------------------
.text:00402238
.text:00402238 loc_402238:                             ; CODE XREF: sub_401B10+6E7↑j
.text:00402238                 mov     eax, [esp+5Ch+var_14]
.text:0040223C                 test    eax, eax
.text:0040223E                 jnz     short loc_402253
.text:00402240
.text:00402240 loc_402240:                             ; CODE XREF: sub_401B10+779↓j
.text:00402240                 mov     ecx, [ebp+14h]
.text:00402243                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402246                 call    strlen
.text:0040224B                 add     [ebp+14h], eax
.text:0040224E                 jmp     loc_401E68
.text:00402253 ; ---------------------------------------------------------------------------
.text:00402253
.text:00402253 loc_402253:                             ; CODE XREF: sub_401B10+72E↑j
.text:00402253                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040225A                 call    ds:libintl_gettext
.text:00402260                 mov     edx, [esp+5Ch+var_2C]
.text:00402264                 mov     ebx, [esp+5Ch+arg_4]
.text:00402268                 mov     edi, [edx]
.text:0040226A                 mov     [esp+5Ch+var_50], edi
.text:0040226E                 mov     edi, ds:_iob
.text:00402274                 mov     esi, [ebx]
.text:00402276                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040227A                 add     edi, 40h ; '@'
.text:0040227D                 mov     [esp+5Ch+MaxCount], esi
.text:00402281                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402284                 call    fprintf
.text:00402289                 jmp     short loc_402240
.text:00402289 ; ---------------------------------------------------------------------------
.text:0040228B                 align 10h
.text:00402290
.text:00402290 loc_402290:                             ; CODE XREF: sub_401B10+6D8↑j
.text:00402290                 mov     esi, [esp+5Ch+var_2C]
.text:00402294                 cmp     dword ptr [esi+4], 1
.text:00402298                 jnz     loc_4021FF
.text:0040229E                 mov     ecx, [ebp+0]
.text:004022A1                 cmp     ecx, [esp+5Ch+arg_0]
.text:004022A5                 jge     short loc_4022BC
.text:004022A7                 mov     eax, [esp+5Ch+arg_4]
.text:004022AB                 lea     ebx, [ecx+1]
.text:004022AE                 mov     [ebp+0], ebx
.text:004022B1                 mov     edi, [eax+ecx*4]
.text:004022B4                 mov     [ebp+0Ch], edi
.text:004022B7                 jmp     loc_4021FF
.text:004022BC ; ---------------------------------------------------------------------------
.text:004022BC
.text:004022BC loc_4022BC:                             ; CODE XREF: sub_401B10+795↑j
.text:004022BC                 mov     edx, [esp+5Ch+var_14]
.text:004022C0                 test    edx, edx
.text:004022C2                 jnz     short loc_4022D7
.text:004022C4
.text:004022C4 loc_4022C4:                             ; CODE XREF: sub_401B10+7FE↓j
.text:004022C4                 mov     edx, [ebp+14h]
.text:004022C7                 mov     [esp+5Ch+Str1], edx ; Str
.text:004022CA                 call    strlen
.text:004022CF                 add     [ebp+14h], eax
.text:004022D2                 jmp     loc_401EF9
.text:004022D7 ; ---------------------------------------------------------------------------
.text:004022D7
.text:004022D7 loc_4022D7:                             ; CODE XREF: sub_401B10+7B2↑j
.text:004022D7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004022DE                 call    ds:libintl_gettext
.text:004022E4                 mov     ecx, [ebp+0]
.text:004022E7                 mov     ebx, [esp+5Ch+arg_4]
.text:004022EB                 mov     edi, [ebx+ecx*4-4]
.text:004022EF                 mov     ecx, ds:_iob
.text:004022F5                 mov     [esp+5Ch+var_50], edi
.text:004022F9                 mov     esi, [ebx]
.text:004022FB                 add     ecx, 40h ; '@'
.text:004022FE                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402302                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402305                 mov     [esp+5Ch+MaxCount], esi
.text:00402309                 call    fprintf
.text:0040230E                 jmp     short loc_4022C4
.text:00402310 ; ---------------------------------------------------------------------------
.text:00402310
.text:00402310 loc_402310:                             ; CODE XREF: sub_401B10+67F↑j
.text:00402310                                         ; sub_401B10+6CF↑j
.text:00402310                 mov     dword ptr [ebp+14h], 0
.text:00402317                 mov     eax, 57h ; 'W'
.text:0040231C                 jmp     loc_401C67
.text:00402321 ; ---------------------------------------------------------------------------
.text:00402321
.text:00402321 loc_402321:                             ; CODE XREF: sub_401B10+6C3↑j
.text:00402321                 mov     edi, [esp+5Ch+var_14]
.text:00402325                 test    edi, edi
.text:00402327                 jnz     short loc_40233F
.text:00402329
.text:00402329 loc_402329:                             ; CODE XREF: sub_401B10+865↓j
.text:00402329                 mov     edx, [ebp+14h]
.text:0040232C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040232F                 call    strlen
.text:00402334                 add     [ebp+14h], eax
.text:00402337                 inc     dword ptr [ebp+0]
.text:0040233A                 jmp     loc_401E68
.text:0040233F ; ---------------------------------------------------------------------------
.text:0040233F
.text:0040233F loc_40233F:                             ; CODE XREF: sub_401B10+817↑j
.text:0040233F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402346                 call    ds:libintl_gettext
.text:0040234C                 mov     ecx, [ebp+0]
.text:0040234F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402353                 mov     edi, [ebx+ecx*4]
.text:00402356                 mov     ecx, ds:_iob
.text:0040235C                 mov     [esp+5Ch+var_50], edi
.text:00402360                 mov     esi, [ebx]
.text:00402362                 add     ecx, 40h ; '@'
.text:00402365                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402369                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040236C                 mov     [esp+5Ch+MaxCount], esi
.text:00402370                 call    fprintf
.text:00402375                 jmp     short loc_402329
.text:00402377 ; ---------------------------------------------------------------------------
.text:00402377
.text:00402377 loc_402377:                             ; CODE XREF: sub_401B10+6A0↑j
.text:00402377                 mov     edx, [ebp+14h]
.text:0040237A                 mov     ebx, edi
.text:0040237C                 mov     ecx, [esi]
.text:0040237E                 sub     ebx, edx
.text:00402380                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402383                 call    strlen
.text:00402388                 cmp     ebx, eax
.text:0040238A                 jz      short loc_4023B2
.text:0040238C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402390                 test    ebx, ebx
.text:00402392                 jz      short loc_4023A1
.text:00402394                 mov     [esp+5Ch+var_34], 1
.text:0040239C                 jmp     loc_4021B6
.text:004023A1 ; ---------------------------------------------------------------------------
.text:004023A1
.text:004023A1 loc_4023A1:                             ; CODE XREF: sub_401B10+882↑j
.text:004023A1                 mov     [esp+5Ch+var_2C], esi
.text:004023A5                 mov     ecx, [esp+5Ch+var_3C]
.text:004023A9                 mov     [esp+5Ch+var_38], ecx
.text:004023AD                 jmp     loc_4021B6
.text:004023B2 ; ---------------------------------------------------------------------------
.text:004023B2
.text:004023B2 loc_4023B2:                             ; CODE XREF: sub_401B10+87A↑j
.text:004023B2                 mov     [esp+5Ch+var_2C], esi
.text:004023B6                 mov     eax, [esp+5Ch+var_3C]
.text:004023BA                 mov     [esp+5Ch+var_30], 1
.text:004023C2                 mov     [esp+5Ch+var_38], eax
.text:004023C6                 jmp     loc_4021C5
.text:004023CB ; ---------------------------------------------------------------------------
.text:004023CB
.text:004023CB loc_4023CB:                             ; CODE XREF: sub_401B10+646↑j
.text:004023CB                 mov     edx, [ebp+0]
.text:004023CE                 cmp     edx, [esp+5Ch+arg_0]
.text:004023D2                 jz      short loc_4023E9
.text:004023D4                 mov     ebx, [esp+5Ch+arg_4]
.text:004023D8                 lea     esi, [edx+1]
.text:004023DB                 mov     [ebp+0], esi
.text:004023DE                 mov     edi, [ebx+edx*4]
.text:004023E1                 mov     [ebp+0Ch], edi
.text:004023E4                 jmp     loc_402162
.text:004023E9 ; ---------------------------------------------------------------------------
.text:004023E9
.text:004023E9 loc_4023E9:                             ; CODE XREF: sub_401B10+8C2↑j
.text:004023E9                 mov     edi, [esp+5Ch+var_14]
.text:004023ED                 test    edi, edi
.text:004023EF                 jnz     short loc_40240C
.text:004023F1
.text:004023F1 loc_4023F1:                             ; CODE XREF: sub_401B10+92C↓j
.text:004023F1                 mov     [ebp+8], esi
.text:004023F4                 mov     ebp, [esp+5Ch+Str]
.text:004023F8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004023FC                 jz      short loc_402408
.text:004023FE                 mov     bl, 3Fh ; '?'
.text:00402400
.text:00402400 loc_402400:                             ; CODE XREF: sub_401B10+8FA↓j
.text:00402400                 movsx   eax, bl
.text:00402403                 jmp     loc_401C67
.text:00402408 ; ---------------------------------------------------------------------------
.text:00402408
.text:00402408 loc_402408:                             ; CODE XREF: sub_401B10+8EC↑j
.text:00402408                 mov     bl, 3Ah ; ':'
.text:0040240A                 jmp     short loc_402400
.text:0040240C ; ---------------------------------------------------------------------------
.text:0040240C
.text:0040240C loc_40240C:                             ; CODE XREF: sub_401B10+8DF↑j
.text:0040240C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402413                 call    ds:libintl_gettext
.text:00402419                 mov     [esp+5Ch+var_50], esi
.text:0040241D                 mov     edx, [esp+5Ch+arg_4]
.text:00402421                 mov     ecx, ds:_iob
.text:00402427                 mov     ebx, [edx]
.text:00402429                 add     ecx, 40h ; '@'
.text:0040242C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402430                 mov     [esp+5Ch+MaxCount], ebx
.text:00402434                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402437                 call    fprintf
.text:0040243C                 jmp     short loc_4023F1
.text:0040243C ; ---------------------------------------------------------------------------
.text:0040243E                 align 10h
.text:00402440
.text:00402440 loc_402440:                             ; CODE XREF: sub_401B10+54C↑j
.text:00402440                                         ; sub_401B10+555↑j
.text:00402440                 mov     eax, [esp+5Ch+var_14]
.text:00402444                 test    eax, eax
.text:00402446                 jz      short loc_40247F
.text:00402448                 mov     ebx, [ebp+1Ch]
.text:0040244B                 test    ebx, ebx
.text:0040244D                 jz      short loc_402487
.text:0040244F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402456
.text:00402456 loc_402456:                             ; CODE XREF: sub_401B10+97E↓j
.text:00402456                 call    ds:libintl_gettext
.text:0040245C                 mov     [esp+5Ch+var_50], esi
.text:00402460                 mov     ebx, [esp+5Ch+arg_4]
.text:00402464                 mov     edx, ds:_iob
.text:0040246A                 mov     esi, [ebx]
.text:0040246C                 add     edx, 40h ; '@'
.text:0040246F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402473                 mov     [esp+5Ch+MaxCount], esi
.text:00402477                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040247A                 call    fprintf
.text:0040247F
.text:0040247F loc_40247F:                             ; CODE XREF: sub_401B10+936↑j
.text:0040247F                 mov     [ebp+8], edi
.text:00402482                 jmp     loc_401E68
.text:00402487 ; ---------------------------------------------------------------------------
.text:00402487
.text:00402487 loc_402487:                             ; CODE XREF: sub_401B10+93D↑j
.text:00402487                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040248E                 jmp     short loc_402456
.text:00402490 ; ---------------------------------------------------------------------------
.text:00402490
.text:00402490 loc_402490:                             ; CODE XREF: sub_401B10+26E↑j
.text:00402490                 mov     edi, [esp+5Ch+var_14]
.text:00402494                 test    edi, edi
.text:00402496                 jnz     short loc_4024AE
.text:00402498
.text:00402498 loc_402498:                             ; CODE XREF: sub_401B10+9D4↓j
.text:00402498                 mov     edx, [ebp+14h]
.text:0040249B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040249E                 call    strlen
.text:004024A3                 add     [ebp+14h], eax
.text:004024A6                 inc     dword ptr [ebp+0]
.text:004024A9                 jmp     loc_401FEE
.text:004024AE ; ---------------------------------------------------------------------------
.text:004024AE
.text:004024AE loc_4024AE:                             ; CODE XREF: sub_401B10+986↑j
.text:004024AE                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:004024B5                 call    ds:libintl_gettext
.text:004024BB                 mov     ebx, [ebp+0]
.text:004024BE                 mov     edi, [esp+5Ch+arg_4]
.text:004024C2                 mov     ecx, [edi+ebx*4]
.text:004024C5                 mov     ebx, ds:_iob
.text:004024CB                 mov     [esp+5Ch+var_50], ecx
.text:004024CF                 mov     esi, [edi]
.text:004024D1                 add     ebx, 40h ; '@'
.text:004024D4                 mov     [esp+5Ch+Str2], eax ; Format
.text:004024D8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:004024DB                 mov     [esp+5Ch+MaxCount], esi
.text:004024DF                 call    fprintf
.text:004024E4                 jmp     short loc_402498
.text:004024E6 ; ---------------------------------------------------------------------------
.text:004024E6
.text:004024E6 loc_4024E6:                             ; CODE XREF: sub_401B10+246↑j
.text:004024E6                 mov     ecx, [ebp+14h]
.text:004024E9                 mov     ebx, edi
.text:004024EB                 mov     edx, [esi]
.text:004024ED                 sub     ebx, ecx
.text:004024EF                 mov     [esp+5Ch+Str1], edx ; Str
.text:004024F2                 call    strlen
.text:004024F7                 cmp     ebx, eax
.text:004024F9                 jz      short loc_402551
.text:004024FB                 mov     ebx, [esp+5Ch+var_18]
.text:004024FF                 test    ebx, ebx
.text:00402501                 jz      short loc_402540
.text:00402503                 mov     edx, [esp+5Ch+arg_14]
.text:00402507                 test    edx, edx
.text:00402509                 jnz     short loc_402517
.text:0040250B                 mov     ecx, [esp+5Ch+var_18]
.text:0040250F                 mov     ebx, [esi+4]
.text:00402512                 cmp     [ecx+4], ebx
.text:00402515                 jz      short loc_402524
.text:00402517
.text:00402517 loc_402517:                             ; CODE XREF: sub_401B10+9F9↑j
.text:00402517                                         ; sub_401B10+A1A↓j ...
.text:00402517                 mov     [esp+5Ch+var_20], 1
.text:0040251F                 jmp     loc_401D5C
.text:00402524 ; ---------------------------------------------------------------------------
.text:00402524
.text:00402524 loc_402524:                             ; CODE XREF: sub_401B10+A05↑j
.text:00402524                 mov     edx, [esi+8]
.text:00402527                 cmp     [ecx+8], edx
.text:0040252A                 jnz     short loc_402517
.text:0040252C                 mov     ebx, [esi+0Ch]
.text:0040252F                 cmp     [ecx+0Ch], ebx
.text:00402532                 jnz     short loc_402517
.text:00402534                 jmp     loc_401D5C
.text:00402534 ; ---------------------------------------------------------------------------
.text:00402539                 align 10h
.text:00402540
.text:00402540 loc_402540:                             ; CODE XREF: sub_401B10+9F1↑j
.text:00402540                 mov     [esp+5Ch+var_18], esi
.text:00402544                 mov     eax, [esp+5Ch+var_28]
.text:00402548                 mov     [esp+5Ch+var_24], eax
.text:0040254C                 jmp     loc_401D5C
.text:00402551 ; ---------------------------------------------------------------------------
.text:00402551
.text:00402551 loc_402551:                             ; CODE XREF: sub_401B10+9E9↑j
.text:00402551                 mov     [esp+5Ch+var_18], esi
.text:00402555                 mov     ecx, [esp+5Ch+var_28]
.text:00402559                 mov     [esp+5Ch+var_1C], 1
.text:00402561                 mov     [esp+5Ch+var_24], ecx
.text:00402565                 jmp     loc_401D70
.text:0040256A ; ---------------------------------------------------------------------------
.text:0040256A
.text:0040256A loc_40256A:                             ; CODE XREF: sub_401B10+1BF↑j
.text:0040256A                 mov     eax, [esp+5Ch+Str]
.text:0040256E                 movsx   esi, dl
.text:00402571                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402575                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402578                 call    strchr
.text:0040257D                 test    eax, eax
.text:0040257F                 jnz     loc_402030
.text:00402585                 jmp     loc_401CD5
.text:0040258A ; ---------------------------------------------------------------------------
.text:0040258A
.text:0040258A loc_40258A:                             ; CODE XREF: sub_401B10+17C↑j
.text:0040258A                 mov     ecx, 1
.text:0040258F                 jmp     loc_401C92
.text:00402594 ; ---------------------------------------------------------------------------
.text:00402594
.text:00402594 loc_402594:                             ; CODE XREF: sub_401B10+D4↑j
.text:00402594                                         ; sub_401B10+130↑j
.text:00402594                 mov     eax, [ebp+20h]
.text:00402597                 cmp     eax, [ebp+24h]
.text:0040259A                 jz      loc_401C70
.text:004025A0                 mov     [ebp+0], eax
.text:004025A3                 jmp     loc_401C70
.text:004025A8 ; ---------------------------------------------------------------------------
.text:004025A8
.text:004025A8 loc_4025A8:                             ; CODE XREF: sub_401B10+FE↑j
.text:004025A8                 mov     [ebp+20h], eax
.text:004025AB                 jmp     loc_401C30
.text:004025B0 ; ---------------------------------------------------------------------------
.text:004025B0
.text:004025B0 loc_4025B0:                             ; CODE XREF: sub_401B10+CA↑j
.text:004025B0                 mov     edx, [ebp+20h]
.text:004025B3                 mov     eax, [ebp+24h]
.text:004025B6                 cmp     edx, eax
.text:004025B8                 jz      short loc_402630
.text:004025BA                 cmp     eax, ebx
.text:004025BC                 jz      short loc_4025D1
.text:004025BE                 mov     [esp+5Ch+Str2], ebp
.text:004025C2                 mov     ebx, [esp+5Ch+arg_4]
.text:004025C6                 mov     [esp+5Ch+Str1], ebx
.text:004025C9                 call    sub_4027C0
.text:004025CE                 mov     ebx, [ebp+0]
.text:004025D1
.text:004025D1 loc_4025D1:                             ; CODE XREF: sub_401B10+AAC↑j
.text:004025D1                                         ; sub_401B10+B22↓j ...
.text:004025D1                 cmp     ebx, [esp+5Ch+arg_0]
.text:004025D5                 jge     short loc_402620
.text:004025D7                 mov     esi, [esp+5Ch+arg_4]
.text:004025DB                 mov     eax, [esi+ebx*4]
.text:004025DE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004025E1                 jz      short loc_402628
.text:004025E3                 lea     esi, [esi+0]
.text:004025E9                 lea     edi, [edi+0]
.text:004025F0
.text:004025F0 loc_4025F0:                             ; CODE XREF: sub_401B10+AFC↓j
.text:004025F0                                         ; sub_401B10+B1C↓j
.text:004025F0                 lea     eax, [ebx+1]
.text:004025F3                 mov     ebx, eax
.text:004025F5                 mov     [ebp+0], eax
.text:004025F8                 cmp     eax, [esp+5Ch+arg_0]
.text:004025FC                 jge     short loc_402620
.text:004025FE                 mov     edi, [esp+5Ch+arg_4]
.text:00402602                 mov     edx, [edi+eax*4]
.text:00402605                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402608                 jz      short loc_402610
.text:0040260A
.text:0040260A loc_40260A:                             ; CODE XREF: sub_401B10+B04↓j
.text:0040260A                 mov     ebx, eax
.text:0040260C                 jmp     short loc_4025F0
.text:0040260C ; ---------------------------------------------------------------------------
.text:0040260E                 align 10h
.text:00402610
.text:00402610 loc_402610:                             ; CODE XREF: sub_401B10+AF8↑j
.text:00402610                 cmp     byte ptr [edx+1], 0
.text:00402614                 jz      short loc_40260A
.text:00402616                 lea     esi, [esi+0]
.text:00402619                 lea     edi, [edi+0]
.text:00402620
.text:00402620 loc_402620:                             ; CODE XREF: sub_401B10+AC5↑j
.text:00402620                                         ; sub_401B10+AEC↑j ...
.text:00402620                 mov     [ebp+24h], ebx
.text:00402623                 jmp     loc_401BE0
.text:00402628 ; ---------------------------------------------------------------------------
.text:00402628
.text:00402628 loc_402628:                             ; CODE XREF: sub_401B10+AD1↑j
.text:00402628                 cmp     byte ptr [eax+1], 0
.text:0040262C                 jz      short loc_4025F0
.text:0040262E                 jmp     short loc_402620
.text:00402630 ; ---------------------------------------------------------------------------
.text:00402630
.text:00402630 loc_402630:                             ; CODE XREF: sub_401B10+AA8↑j
.text:00402630                 cmp     edx, ebx
.text:00402632                 jz      short loc_4025D1
.text:00402634                 mov     [ebp+20h], ebx
.text:00402637                 jmp     short loc_4025D1
.text:00402639 ; ---------------------------------------------------------------------------
.text:00402639
.text:00402639 loc_402639:                             ; CODE XREF: sub_401B10+88↑j
.text:00402639                 mov     dword ptr [ebp+18h], 0
.text:00402640                 mov     esi, [esp+5Ch+Str]
.text:00402644
.text:00402644 loc_402644:                             ; CODE XREF: sub_401B10+B49↓j
.text:00402644                 inc     esi
.text:00402645                 jmp     loc_401BA8
.text:00402645 ; ---------------------------------------------------------------------------
.text:0040264A                 align 10h
.text:00402650
.text:00402650 loc_402650:                             ; CODE XREF: sub_401B10+80↑j
.text:00402650                 mov     dword ptr [ebp+18h], 2
.text:00402657                 mov     esi, ecx
.text:00402659                 jmp     short loc_402644
.text:00402659 ; ---------------------------------------------------------------------------
.text:0040265B                 align 10h
.text:00402660
.text:00402660 loc_402660:                             ; CODE XREF: sub_401B10+69↑j
.text:00402660                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402667                 call    getenv
.text:0040266C                 test    eax, eax
.text:0040266E                 jz      loc_401B84
.text:00402674                 jmp     loc_401B7F
.text:00402674 ; ---------------------------------------------------------------------------
.text:00402679                 align 10h
.text:00402680
.text:00402680 loc_402680:                             ; CODE XREF: sub_401B10+3F↑j
.text:00402680                 mov     dword ptr [ebp+0], 1
.text:00402687                 mov     ebx, 1
.text:0040268C                 jmp     loc_401B60
.text:0040268C sub_401B10      endp
.text:0040268C
.text:00402691 ; ---------------------------------------------------------------------------
.text:00402691                 jmp     short sub_4026A0
.text:00402691 ; ---------------------------------------------------------------------------
.text:00402693                 align 10h
.text:004026A0
.text:004026A0 ; =============== S U B R O U T I N E =======================================
.text:004026A0
.text:004026A0
.text:004026A0 ; int __cdecl sub_4026A0(int, int, char *, int, int, int, int)
.text:004026A0 sub_4026A0      proc near               ; CODE XREF: .text:00402691↑j
.text:004026A0                                         ; sub_402C90+3A↓p ...
.text:004026A0
.text:004026A0 var_2C          = dword ptr -2Ch
.text:004026A0 var_28          = dword ptr -28h
.text:004026A0 Str             = dword ptr -24h
.text:004026A0 var_20          = dword ptr -20h
.text:004026A0 var_1C          = dword ptr -1Ch
.text:004026A0 var_18          = dword ptr -18h
.text:004026A0 var_14          = dword ptr -14h
.text:004026A0 var_10          = dword ptr -10h
.text:004026A0 arg_0           = dword ptr  4
.text:004026A0 arg_4           = dword ptr  8
.text:004026A0 arg_8           = dword ptr  0Ch
.text:004026A0 arg_C           = dword ptr  10h
.text:004026A0 arg_10          = dword ptr  14h
.text:004026A0 arg_14          = dword ptr  18h
.text:004026A0 arg_18          = dword ptr  1Ch
.text:004026A0
.text:004026A0                 sub     esp, 2Ch
.text:004026A3                 mov     edx, dword_406010
.text:004026A9                 mov     [esp+2Ch+var_10], offset dword_407000 ; int
.text:004026B1                 mov     ecx, dword_406014
.text:004026B7                 mov     ds:dword_407000, edx
.text:004026BD                 mov     edx, [esp+2Ch+arg_18]
.text:004026C1                 mov     ds:dword_407004, ecx
.text:004026C7                 mov     ecx, [esp+2Ch+arg_14]
.text:004026CB                 mov     [esp+2Ch+var_14], edx ; int
.text:004026CF                 mov     edx, [esp+2Ch+arg_10]
.text:004026D3                 mov     [esp+2Ch+var_18], ecx ; int
.text:004026D7                 mov     ecx, [esp+2Ch+arg_C]
.text:004026DB                 mov     [esp+2Ch+var_1C], edx ; int
.text:004026DF                 mov     edx, [esp+2Ch+arg_8]
.text:004026E3                 mov     [esp+2Ch+var_20], ecx ; int
.text:004026E7                 mov     ecx, [esp+2Ch+arg_4]
.text:004026EB                 mov     [esp+2Ch+Str], edx ; Str
.text:004026EF                 mov     edx, [esp+2Ch+arg_0]
.text:004026F3                 mov     [esp+2Ch+var_28], ecx ; int
.text:004026F7                 mov     [esp+2Ch+var_2C], edx ; int
.text:004026FA                 call    sub_401B10
.text:004026FF                 mov     ecx, ds:dword_407000
.text:00402705                 mov     dword_406010, ecx
.text:0040270B                 mov     ecx, ds:dword_40700C
.text:00402711                 mov     ds:dword_4071D0, ecx
.text:00402717                 mov     ecx, ds:dword_407008
.text:0040271D                 mov     dword_406018, ecx
.text:00402723                 add     esp, 2Ch
.text:00402726                 retn
.text:00402726 sub_4026A0      endp
.text:00402726
.text:00402726 ; ---------------------------------------------------------------------------
.text:00402727                 align 10h
.text:00402730                 sub     esp, 2Ch
.text:00402733                 mov     edx, dword_406010
.text:00402739                 mov     dword ptr [esp+1Ch], offset dword_407000
.text:00402741                 mov     ecx, dword_406014
.text:00402747                 mov     dword ptr [esp+18h], 1
.text:0040274F                 mov     ds:dword_407000, edx
.text:00402755                 mov     edx, [esp+38h]
.text:00402759                 mov     ds:dword_407004, ecx
.text:0040275F                 mov     ecx, [esp+34h]
.text:00402763                 mov     [esp+8], edx
.text:00402767                 mov     edx, [esp+30h]
.text:0040276B                 mov     [esp+4], ecx
.text:0040276F                 mov     dword ptr [esp+14h], 0
.text:00402777                 mov     dword ptr [esp+10h], 0
.text:0040277F                 mov     dword ptr [esp+0Ch], 0
.text:00402787                 mov     [esp], edx
.text:0040278A                 call    sub_401B10
.text:0040278F                 mov     ecx, ds:dword_407000
.text:00402795                 mov     dword_406010, ecx
.text:0040279B                 mov     ecx, ds:dword_40700C
.text:004027A1                 mov     ds:dword_4071D0, ecx
.text:004027A7                 mov     ecx, ds:dword_407008
.text:004027AD                 mov     dword_406018, ecx
.text:004027B3                 add     esp, 2Ch
.text:004027B6                 retn
.text:004027B6 ; ---------------------------------------------------------------------------
.text:004027B7                 align 10h
.text:004027C0
.text:004027C0 ; =============== S U B R O U T I N E =======================================
.text:004027C0
.text:004027C0
.text:004027C0 sub_4027C0      proc near               ; CODE XREF: sub_401B10+113↑p
.text:004027C0                                         ; sub_401B10+AB9↑p
.text:004027C0
.text:004027C0 var_2C          = dword ptr -2Ch
.text:004027C0 var_28          = dword ptr -28h
.text:004027C0 var_24          = dword ptr -24h
.text:004027C0 var_20          = dword ptr -20h
.text:004027C0 var_1C          = dword ptr -1Ch
.text:004027C0 var_18          = dword ptr -18h
.text:004027C0 var_14          = dword ptr -14h
.text:004027C0 arg_0           = dword ptr  4
.text:004027C0 arg_4           = dword ptr  8
.text:004027C0
.text:004027C0                 push    ebp
.text:004027C1                 push    edi
.text:004027C2                 push    esi
.text:004027C3                 push    ebx
.text:004027C4                 sub     esp, 1Ch
.text:004027C7                 mov     ecx, [esp+2Ch+arg_4]
.text:004027CB                 mov     eax, [esp+2Ch+arg_4]
.text:004027CF                 mov     ebx, [esp+2Ch+arg_4]
.text:004027D3                 mov     edx, [ecx+20h]
.text:004027D6                 mov     edi, [esp+2Ch+arg_0]
.text:004027DA                 mov     ecx, [ebx]
.text:004027DC                 mov     [esp+2Ch+var_2C], edx
.text:004027DF                 mov     [esp+2Ch+var_14], edx
.text:004027E3                 mov     edx, [eax+24h]
.text:004027E6                 mov     [esp+2Ch+var_28], ecx
.text:004027EA                 mov     [esp+2Ch+var_1C], ecx
.text:004027EE                 cmp     ecx, edx
.text:004027F0                 mov     [esp+2Ch+var_18], edx
.text:004027F4                 jle     short loc_402870
.text:004027F6                 mov     esi, [esp+2Ch+var_2C]
.text:004027F9                 cmp     edx, esi
.text:004027FB                 jle     short loc_402870
.text:004027FD                 lea     esi, [esi+0]
.text:00402800
.text:00402800 loc_402800:                             ; CODE XREF: sub_4027C0+A1↓j
.text:00402800                 mov     ebx, [esp+2Ch+var_1C]
.text:00402804                 mov     edx, [esp+2Ch+var_18]
.text:00402808                 mov     ebp, [esp+2Ch+var_18]
.text:0040280C                 mov     eax, [esp+2Ch+var_14]
.text:00402810                 sub     ebx, edx
.text:00402812                 mov     [esp+2Ch+var_20], ebx
.text:00402816                 sub     ebp, eax
.text:00402818                 cmp     ebx, ebp
.text:0040281A                 jle     short loc_402895
.text:0040281C                 xor     esi, esi
.text:0040281E                 cmp     esi, ebp
.text:00402820                 jge     short loc_40284D
.text:00402822                 mov     ecx, [esp+2Ch+var_1C]
.text:00402826                 sub     ecx, ebp
.text:00402828                 mov     [esp+2Ch+var_24], ecx
.text:0040282C                 lea     esi, [esi+0]
.text:00402830
.text:00402830 loc_402830:                             ; CODE XREF: sub_4027C0+8B↓j
.text:00402830                 mov     ecx, [esp+2Ch+var_14]
.text:00402834                 mov     edx, [esp+2Ch+var_24]
.text:00402838                 add     ecx, esi
.text:0040283A                 add     edx, esi
.text:0040283C                 mov     ebx, [edi+ecx*4]
.text:0040283F                 mov     eax, [edi+edx*4]
.text:00402842                 inc     esi
.text:00402843                 cmp     esi, ebp
.text:00402845                 mov     [edi+ecx*4], eax
.text:00402848                 mov     [edi+edx*4], ebx
.text:0040284B                 jl      short loc_402830
.text:0040284D
.text:0040284D loc_40284D:                             ; CODE XREF: sub_4027C0+60↑j
.text:0040284D                 sub     [esp+2Ch+var_1C], ebp
.text:00402851
.text:00402851 loc_402851:                             ; CODE XREF: sub_4027C0+107↓j
.text:00402851                 mov     eax, [esp+2Ch+var_18]
.text:00402855                 cmp     [esp+2Ch+var_1C], eax
.text:00402859                 jle     short loc_402870
.text:0040285B                 mov     ebp, [esp+2Ch+var_14]
.text:0040285F                 cmp     eax, ebp
.text:00402861                 jg      short loc_402800
.text:00402863                 lea     esi, [esi+0]
.text:00402869                 lea     edi, [edi+0]
.text:00402870
.text:00402870 loc_402870:                             ; CODE XREF: sub_4027C0+34↑j
.text:00402870                                         ; sub_4027C0+3B↑j ...
.text:00402870                 mov     esi, [esp+2Ch+var_28]
.text:00402874                 mov     ecx, [esp+2Ch+var_18]
.text:00402878                 mov     eax, [esp+2Ch+var_2C]
.text:0040287B                 mov     edi, [esp+2Ch+arg_4]
.text:0040287F                 mov     edx, [esp+2Ch+var_28]
.text:00402883                 sub     esi, ecx
.text:00402885                 add     esi, eax
.text:00402887                 mov     [edi+20h], esi
.text:0040288A                 mov     [edi+24h], edx
.text:0040288D                 add     esp, 1Ch
.text:00402890                 pop     ebx
.text:00402891                 pop     esi
.text:00402892                 pop     edi
.text:00402893                 pop     ebp
.text:00402894                 retn
.text:00402895 ; ---------------------------------------------------------------------------
.text:00402895
.text:00402895 loc_402895:                             ; CODE XREF: sub_4027C0+5A↑j
.text:00402895                 xor     esi, esi
.text:00402897                 cmp     esi, [esp+2Ch+var_20]
.text:0040289B                 jge     short loc_4028BF
.text:0040289D                 lea     esi, [esi+0]
.text:004028A0
.text:004028A0 loc_4028A0:                             ; CODE XREF: sub_4027C0+FD↓j
.text:004028A0                 mov     ebx, [esp+2Ch+var_14]
.text:004028A4                 mov     ebp, [esp+2Ch+var_18]
.text:004028A8                 add     ebx, esi
.text:004028AA                 add     ebp, esi
.text:004028AC                 mov     edx, [edi+ebx*4]
.text:004028AF                 inc     esi
.text:004028B0                 cmp     esi, [esp+2Ch+var_20]
.text:004028B4                 mov     ecx, [edi+ebp*4]
.text:004028B7                 mov     [edi+ebx*4], ecx
.text:004028BA                 mov     [edi+ebp*4], edx
.text:004028BD                 jl      short loc_4028A0
.text:004028BF
.text:004028BF loc_4028BF:                             ; CODE XREF: sub_4027C0+DB↑j
.text:004028BF                 mov     esi, [esp+2Ch+var_20]
.text:004028C3                 add     [esp+2Ch+var_14], esi
.text:004028C7                 jmp     short loc_402851
.text:004028C7 sub_4027C0      endp
.text:004028C7
.text:004028C7 ; ---------------------------------------------------------------------------
.text:004028C9                 align 20h
.text:004028E0 aCoreutils530Sr db '../../coreutils-5.3.0-src/lib/xnanosleep.c',0
.text:004028E0                                         ; DATA XREF: sub_402920+221↓o
.text:0040290B a0Seconds       db '0 <= seconds',0     ; DATA XREF: sub_402920+229↓o
.text:00402918 flt_402918      dd 1.0e9                ; DATA XREF: sub_402920+48↓r
.text:0040291C                 align 10h
.text:00402920
.text:00402920 ; =============== S U B R O U T I N E =======================================
.text:00402920
.text:00402920
.text:00402920 ; int __cdecl sub_402920(double)
.text:00402920 sub_402920      proc near               ; CODE XREF: sub_401380+1F7↑p
.text:00402920
.text:00402920 var_60          = dword ptr -60h
.text:00402920 var_5C          = dword ptr -5Ch
.text:00402920 var_58          = dword ptr -58h
.text:00402920 var_54          = dword ptr -54h
.text:00402920 var_4C          = qword ptr -4Ch
.text:00402920 var_3C          = dword ptr -3Ch
.text:00402920 var_38          = word ptr -38h
.text:00402920 var_36          = word ptr -36h
.text:00402920 var_34          = dword ptr -34h
.text:00402920 var_30          = dword ptr -30h
.text:00402920 var_2C          = dword ptr -2Ch
.text:00402920 var_28          = dword ptr -28h
.text:00402920 var_24          = dword ptr -24h
.text:00402920 arg_0           = qword ptr  4
.text:00402920
.text:00402920                 push    ebp
.text:00402921                 fldz
.text:00402923                 push    edi
.text:00402924                 push    esi
.text:00402925                 push    ebx
.text:00402926                 sub     esp, 4Ch
.text:00402929                 fld     [esp+5Ch+arg_0]
.text:0040292D                 fucom   st(1)
.text:0040292F                 fnstsw  ax
.text:00402931                 fstp    st(1)
.text:00402933                 sahf
.text:00402934                 jb      loc_402B37
.text:0040293A                 fstp    [esp+5Ch+var_4C]
.text:0040293E                 lea     edi, [esp+5Ch+var_24]
.text:00402942                 mov     [esp+5Ch+var_5C], edi
.text:00402945                 call    sub_403000
.text:0040294A                 fld     [esp+5Ch+var_4C]
.text:0040294E                 test    eax, eax
.text:00402950                 mov     edx, 0FFFFFFFFh
.text:00402955                 jnz     loc_402B33
.text:0040295B                 fnstcw  [esp+5Ch+var_36]
.text:0040295F                 fld     st
.text:00402961                 xor     ecx, ecx
.text:00402963                 movzx   edx, [esp+5Ch+var_36]
.text:00402968                 fld     ds:flt_402918
.text:0040296E                 fxch    st(2)
.text:00402970                 or      dx, 0C00h
.text:00402975                 mov     [esp+5Ch+var_38], dx
.text:0040297A                 fldcw   [esp+5Ch+var_38]
.text:0040297E                 fist    [esp+5Ch+var_3C]
.text:00402982                 fldcw   [esp+5Ch+var_36]
.text:00402986                 mov     edx, [esp+5Ch+var_3C]
.text:0040298A                 mov     [esp+5Ch+var_2C], edx
.text:0040298E                 push    edx
.text:0040298F                 fild    [esp+60h+var_60]
.text:00402992                 add     esp, 4
.text:00402995                 fsub    st(2), st
.text:00402997                 fxch    st(1)
.text:00402999                 fucompp
.text:0040299B                 fnstsw  ax
.text:0040299D                 sahf
.text:0040299E                 fmul    st, st(1)
.text:004029A0                 jb      loc_402B2C
.text:004029A6                 fldz
.text:004029A8                 fxch    st(1)
.text:004029AA                 fucom   st(1)
.text:004029AC                 fnstsw  ax
.text:004029AE                 fstp    st(1)
.text:004029B0                 sahf
.text:004029B1                 jb      loc_402B2C
.text:004029B7                 fxch    st(1)
.text:004029B9                 fucomp  st(1)
.text:004029BB                 fnstsw  ax
.text:004029BD                 sahf
.text:004029BE                 jnb     short loc_4029C2
.text:004029C0
.text:004029C0 loc_4029C0:                             ; CODE XREF: sub_402920+20E↓j
.text:004029C0                 mov     cl, 1
.text:004029C2
.text:004029C2 loc_4029C2:                             ; CODE XREF: sub_402920+9E↑j
.text:004029C2                 fldcw   [esp+5Ch+var_38]
.text:004029C6                 fist    [esp+5Ch+var_3C]
.text:004029CA                 fldcw   [esp+5Ch+var_36]
.text:004029CE                 mov     bl, cl
.text:004029D0                 lea     esi, [esp+5Ch+var_2C]
.text:004029D4                 mov     ebp, [esp+5Ch+var_3C]
.text:004029D8                 mov     edx, ebp
.text:004029DA                 mov     [esp+5Ch+var_28], ebp
.text:004029DE                 push    ebp
.text:004029DF                 fild    [esp+60h+var_60]
.text:004029E2                 fxch    st(1)
.text:004029E4                 add     esp, 4
.text:004029E7                 fucompp
.text:004029E9                 fnstsw  ax
.text:004029EB                 sahf
.text:004029EC                 jbe     short loc_4029EF
.text:004029EE                 inc     edx
.text:004029EF
.text:004029EF loc_4029EF:                             ; CODE XREF: sub_402920+CC↑j
.text:004029EF                 mov     [esi+4], edx
.text:004029F2                 cmp     edx, 3B9AC9FFh
.text:004029F8                 jle     short loc_402A12
.text:004029FA                 mov     ebp, [esp+5Ch+var_2C]
.text:004029FE                 movzx   ebx, cl
.text:00402A01                 inc     ebp
.text:00402A02                 mov     [esp+5Ch+var_2C], ebp
.text:00402A06                 test    ebx, ebx
.text:00402A08                 setnz   bl
.text:00402A0B                 sub     dword ptr [esi+4], 3B9ACA00h
.text:00402A12
.text:00402A12 loc_402A12:                             ; CODE XREF: sub_402920+D8↑j
.text:00402A12                 mov     ecx, [esp+5Ch+var_24]
.text:00402A16                 mov     ebp, [esp+5Ch+var_2C]
.text:00402A1A                 mov     eax, ecx
.text:00402A1C                 add     eax, ebp
.text:00402A1E                 mov     [esp+5Ch+var_34], eax
.text:00402A22                 mov     ebp, [edi+4]
.text:00402A25                 mov     edx, ebp
.text:00402A27                 add     edx, [esi+4]
.text:00402A2A                 cmp     edx, 3B9AC9FFh
.text:00402A30                 mov     [esp+5Ch+var_30], edx
.text:00402A34                 jle     short loc_402A45
.text:00402A36                 inc     eax
.text:00402A37                 mov     [esp+5Ch+var_34], eax
.text:00402A3B                 lea     eax, [edx-3B9ACA00h]
.text:00402A41                 mov     [esp+5Ch+var_30], eax
.text:00402A45
.text:00402A45 loc_402A45:                             ; CODE XREF: sub_402920+114↑j
.text:00402A45                 mov     eax, [esp+5Ch+var_34]
.text:00402A49                 movzx   edx, bl
.text:00402A4C                 xor     ebx, ebx
.text:00402A4E                 cmp     eax, ecx
.text:00402A50                 jl      loc_402B22
.text:00402A56                 cmp     eax, ecx
.text:00402A58                 jz      loc_402B18
.text:00402A5E
.text:00402A5E loc_402A5E:                             ; CODE XREF: sub_402920+1FC↓j
.text:00402A5E                                         ; sub_402920+207↓j
.text:00402A5E                 or      edx, ebx
.text:00402A60                 jz      short loc_402A90
.text:00402A62                 mov     [esp+5Ch+var_34], 7FFFFFFFh
.text:00402A6A                 mov     [esp+5Ch+var_2C], 7FFFFFFFh
.text:00402A72                 mov     [esp+5Ch+var_30], 3B9AC9FFh
.text:00402A7A                 mov     dword ptr [esi+4], 3B9AC9FFh
.text:00402A81                 jmp     short loc_402A90
.text:00402A81 ; ---------------------------------------------------------------------------
.text:00402A83                 align 10h
.text:00402A90
.text:00402A90 loc_402A90:                             ; CODE XREF: sub_402920+140↑j
.text:00402A90                                         ; sub_402920+161↑j ...
.text:00402A90                 mov     [esp+5Ch+var_58], 0
.text:00402A98                 mov     [esp+5Ch+var_5C], esi
.text:00402A9B                 call    sub_404F40
.text:00402AA0                 test    eax, eax
.text:00402AA2                 jz      short loc_402AF9
.text:00402AA4                 call    _errno
.text:00402AA9                 cmp     dword ptr [eax], 4
.text:00402AAC                 jnz     short loc_402B11
.text:00402AAE                 mov     [esp+5Ch+var_5C], edi
.text:00402AB1                 call    sub_403000
.text:00402AB6                 test    eax, eax
.text:00402AB8                 jnz     short loc_402B11
.text:00402ABA                 mov     edx, [esp+5Ch+var_34]
.text:00402ABE                 mov     eax, [esp+5Ch+var_24]
.text:00402AC2                 mov     ecx, [esp+5Ch+var_30]
.text:00402AC6                 mov     ebp, [edi+4]
.text:00402AC9                 mov     ebx, edx
.text:00402ACB                 sub     ebx, eax
.text:00402ACD                 sub     ecx, ebp
.text:00402ACF                 cmp     edx, eax
.text:00402AD1                 jl      short loc_402AF9
.text:00402AD3                 test    ebx, ebx
.text:00402AD5                 js      short loc_402B05
.text:00402AD7                 test    ebx, ebx
.text:00402AD9                 jnz     short loc_402ADF
.text:00402ADB                 test    ecx, ecx
.text:00402ADD                 jle     short loc_402AF9
.text:00402ADF
.text:00402ADF loc_402ADF:                             ; CODE XREF: sub_402920+1B9↑j
.text:00402ADF                 test    ecx, ecx
.text:00402AE1                 js      short loc_402AF0
.text:00402AE3
.text:00402AE3 loc_402AE3:                             ; CODE XREF: sub_402920+1D7↓j
.text:00402AE3                                         ; sub_402920+1EF↓j
.text:00402AE3                 mov     [esi], ebx
.text:00402AE5                 mov     [esi+4], ecx
.text:00402AE8                 jmp     short loc_402A90
.text:00402AE8 ; ---------------------------------------------------------------------------
.text:00402AEA                 align 10h
.text:00402AF0
.text:00402AF0 loc_402AF0:                             ; CODE XREF: sub_402920+1C1↑j
.text:00402AF0                 dec     ebx
.text:00402AF1                 add     ecx, 3B9ACA00h
.text:00402AF7                 jmp     short loc_402AE3
.text:00402AF9 ; ---------------------------------------------------------------------------
.text:00402AF9
.text:00402AF9 loc_402AF9:                             ; CODE XREF: sub_402920+182↑j
.text:00402AF9                                         ; sub_402920+1B1↑j ...
.text:00402AF9                 xor     edx, edx
.text:00402AFB
.text:00402AFB loc_402AFB:                             ; CODE XREF: sub_402920+1F6↓j
.text:00402AFB                                         ; sub_402920+215↓j
.text:00402AFB                 add     esp, 4Ch
.text:00402AFE                 mov     eax, edx
.text:00402B00                 pop     ebx
.text:00402B01                 pop     esi
.text:00402B02                 pop     edi
.text:00402B03                 pop     ebp
.text:00402B04                 retn
.text:00402B05 ; ---------------------------------------------------------------------------
.text:00402B05
.text:00402B05 loc_402B05:                             ; CODE XREF: sub_402920+1B5↑j
.text:00402B05                 mov     ebx, 7FFFFFFFh
.text:00402B0A                 mov     ecx, 3B9AC9FFh
.text:00402B0F                 jmp     short loc_402AE3
.text:00402B11 ; ---------------------------------------------------------------------------
.text:00402B11
.text:00402B11 loc_402B11:                             ; CODE XREF: sub_402920+18C↑j
.text:00402B11                                         ; sub_402920+198↑j
.text:00402B11                 mov     edx, 0FFFFFFFFh
.text:00402B16                 jmp     short loc_402AFB
.text:00402B18 ; ---------------------------------------------------------------------------
.text:00402B18
.text:00402B18 loc_402B18:                             ; CODE XREF: sub_402920+138↑j
.text:00402B18                 cmp     [esp+5Ch+var_30], ebp
.text:00402B1C                 jge     loc_402A5E
.text:00402B22
.text:00402B22 loc_402B22:                             ; CODE XREF: sub_402920+130↑j
.text:00402B22                 mov     ebx, 1
.text:00402B27                 jmp     loc_402A5E
.text:00402B2C ; ---------------------------------------------------------------------------
.text:00402B2C
.text:00402B2C loc_402B2C:                             ; CODE XREF: sub_402920+80↑j
.text:00402B2C                                         ; sub_402920+91↑j
.text:00402B2C                 fstp    st(1)
.text:00402B2E                 jmp     loc_4029C0
.text:00402B33 ; ---------------------------------------------------------------------------
.text:00402B33
.text:00402B33 loc_402B33:                             ; CODE XREF: sub_402920+35↑j
.text:00402B33                 fstp    st
.text:00402B35                 jmp     short loc_402AFB
.text:00402B37 ; ---------------------------------------------------------------------------
.text:00402B37
.text:00402B37 loc_402B37:                             ; CODE XREF: sub_402920+14↑j
.text:00402B37                 fstp    st
.text:00402B39                 mov     [esp+5Ch+var_54], 66h ; 'f'
.text:00402B41                 mov     [esp+5Ch+var_58], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/lib/xnanoslee"...
.text:00402B49                 mov     [esp+5Ch+var_5C], offset a0Seconds ; "0 <= seconds"
.text:00402B50                 call    _assert
.text:00402B50 sub_402920      endp
.text:00402B50
.text:00402B50 ; ---------------------------------------------------------------------------
.text:00402B55                 align 10h
.text:00402B60
.text:00402B60 loc_402B60:                             ; DATA XREF: sub_402B70+29↓o
.text:00402B60                 inc     ebx
.text:00402B61                 add     [ebp+26B4h], cl
.text:00402B61 ; ---------------------------------------------------------------------------
.text:00402B67                 db 0
.text:00402B68                 align 10h
.text:00402B70
.text:00402B70 ; =============== S U B R O U T I N E =======================================
.text:00402B70
.text:00402B70
.text:00402B70 ; int __cdecl sub_402B70(char *String, char **EndPtr)
.text:00402B70 sub_402B70      proc near               ; DATA XREF: sub_401380:loc_401480↑o
.text:00402B70
.text:00402B70 Category        = dword ptr -1Ch
.text:00402B70 Locale          = dword ptr -18h
.text:00402B70 var_C           = qword ptr -0Ch
.text:00402B70 var_4           = dword ptr -4
.text:00402B70 String          = dword ptr  4
.text:00402B70 EndPtr          = dword ptr  8
.text:00402B70
.text:00402B70                 sub     esp, 1Ch
.text:00402B73                 mov     [esp+1Ch+var_4], ebx
.text:00402B77                 mov     [esp+1Ch+Locale], 0 ; Locale
.text:00402B7F                 mov     [esp+1Ch+Category], 4 ; Category
.text:00402B86                 call    setlocale
.text:00402B8B                 test    eax, eax
.text:00402B8D                 mov     ebx, eax
.text:00402B8F                 jz      short loc_402BAF
.text:00402B91                 mov     [esp+1Ch+Category], eax ; char *
.text:00402B94                 call    sub_403280
.text:00402B99                 mov     [esp+1Ch+Locale], offset loc_402B60 ; Locale
.text:00402BA1                 mov     ebx, eax
.text:00402BA3                 mov     [esp+1Ch+Category], 4 ; Category
.text:00402BAA                 call    setlocale
.text:00402BAF
.text:00402BAF loc_402BAF:                             ; CODE XREF: sub_402B70+1F↑j
.text:00402BAF                 mov     edx, [esp+1Ch+EndPtr]
.text:00402BB3                 mov     [esp+1Ch+Locale], edx ; EndPtr
.text:00402BB7                 mov     edx, [esp+1Ch+String]
.text:00402BBB                 mov     [esp+1Ch+Category], edx ; String
.text:00402BBE                 call    strtod
.text:00402BC3                 test    ebx, ebx
.text:00402BC5                 fstp    [esp+1Ch+var_C]
.text:00402BC9                 jz      short loc_402BE3
.text:00402BCB                 mov     [esp+1Ch+Locale], ebx ; Locale
.text:00402BCF                 mov     [esp+1Ch+Category], 4 ; Category
.text:00402BD6                 call    setlocale
.text:00402BDB                 mov     [esp+1Ch+Category], ebx ; Block
.text:00402BDE                 call    free
.text:00402BE3
.text:00402BE3 loc_402BE3:                             ; CODE XREF: sub_402B70+59↑j
.text:00402BE3                 fld     [esp+1Ch+var_C]
.text:00402BE7                 mov     ebx, [esp+1Ch+var_4]
.text:00402BEB                 add     esp, 1Ch
.text:00402BEE                 retn
.text:00402BEE sub_402B70      endp
.text:00402BEE
.text:00402BEE ; ---------------------------------------------------------------------------
.text:00402BEF                 align 10h
.text:00402BF0
.text:00402BF0 ; =============== S U B R O U T I N E =======================================
.text:00402BF0
.text:00402BF0
.text:00402BF0 sub_402BF0      proc near               ; CODE XREF: sub_401380+119↑p
.text:00402BF0
.text:00402BF0 var_2C          = dword ptr -2Ch
.text:00402BF0 var_28          = dword ptr -28h
.text:00402BF0 var_1D          = byte ptr -1Dh
.text:00402BF0 var_1C          = qword ptr -1Ch
.text:00402BF0 var_10          = dword ptr -10h
.text:00402BF0 var_8           = dword ptr -8
.text:00402BF0 var_4           = dword ptr -4
.text:00402BF0 arg_0           = dword ptr  4
.text:00402BF0 arg_4           = dword ptr  8
.text:00402BF0 arg_8           = dword ptr  0Ch
.text:00402BF0 arg_C           = dword ptr  10h
.text:00402BF0
.text:00402BF0                 sub     esp, 2Ch
.text:00402BF3                 mov     [esp+2Ch+var_8], ebx
.text:00402BF7                 mov     ebx, [esp+2Ch+arg_0]
.text:00402BFB                 mov     [esp+2Ch+var_4], esi
.text:00402BFF                 mov     esi, [esp+2Ch+arg_4]
.text:00402C03                 mov     [esp+2Ch+var_1D], 1
.text:00402C08                 call    _errno
.text:00402C0D                 mov     dword ptr [eax], 0
.text:00402C13                 lea     edx, [esp+2Ch+var_10]
.text:00402C17                 mov     [esp+2Ch+var_28], edx
.text:00402C1B                 mov     [esp+2Ch+var_2C], ebx
.text:00402C1E                 call    [esp+2Ch+arg_C]
.text:00402C22                 mov     eax, [esp+2Ch+var_10]
.text:00402C26                 cmp     eax, ebx
.text:00402C28                 fstp    [esp+2Ch+var_1C]
.text:00402C2C                 jz      short loc_402C80
.text:00402C2E                 test    esi, esi
.text:00402C30                 jz      short loc_402C87
.text:00402C32
.text:00402C32 loc_402C32:                             ; CODE XREF: sub_402BF0+9C↓j
.text:00402C32                 fld     [esp+2Ch+var_1C]
.text:00402C36                 fldz
.text:00402C38                 fxch    st(1)
.text:00402C3A                 fucompp
.text:00402C3C                 fnstsw  ax
.text:00402C3E                 sahf
.text:00402C3F                 jp      short loc_402C68
.text:00402C41                 jnz     short loc_402C68
.text:00402C43
.text:00402C43 loc_402C43:                             ; CODE XREF: sub_402BF0+80↓j
.text:00402C43                                         ; sub_402BF0+95↓j
.text:00402C43                 test    esi, esi
.text:00402C45                 jz      short loc_402C4D
.text:00402C47                 mov     edx, [esp+2Ch+var_10]
.text:00402C4B                 mov     [esi], edx
.text:00402C4D
.text:00402C4D loc_402C4D:                             ; CODE XREF: sub_402BF0+55↑j
.text:00402C4D                 fld     [esp+2Ch+var_1C]
.text:00402C51                 mov     ecx, [esp+2Ch+arg_8]
.text:00402C55                 movzx   eax, [esp+2Ch+var_1D]
.text:00402C5A                 fstp    qword ptr [ecx]
.text:00402C5C                 mov     ebx, [esp+2Ch+var_8]
.text:00402C60                 mov     esi, [esp+2Ch+var_4]
.text:00402C64                 add     esp, 2Ch
.text:00402C67                 retn
.text:00402C68 ; ---------------------------------------------------------------------------
.text:00402C68
.text:00402C68 loc_402C68:                             ; CODE XREF: sub_402BF0+4F↑j
.text:00402C68                                         ; sub_402BF0+51↑j
.text:00402C68                 call    _errno
.text:00402C6D                 cmp     dword ptr [eax], 22h ; '"'
.text:00402C70                 jnz     short loc_402C43
.text:00402C72                 lea     esi, [esi+0]
.text:00402C79                 lea     edi, [edi+0]
.text:00402C80
.text:00402C80 loc_402C80:                             ; CODE XREF: sub_402BF0+3C↑j
.text:00402C80                                         ; sub_402BF0+9A↓j
.text:00402C80                 mov     [esp+2Ch+var_1D], 0
.text:00402C85                 jmp     short loc_402C43
.text:00402C87 ; ---------------------------------------------------------------------------
.text:00402C87
.text:00402C87 loc_402C87:                             ; CODE XREF: sub_402BF0+40↑j
.text:00402C87                 cmp     byte ptr [eax], 0
.text:00402C8A                 jnz     short loc_402C80
.text:00402C8C                 jmp     short loc_402C32
.text:00402C8C sub_402BF0      endp
.text:00402C8C
.text:00402C8C ; ---------------------------------------------------------------------------
.text:00402C8E                 align 10h
.text:00402C90
.text:00402C90 ; =============== S U B R O U T I N E =======================================
.text:00402C90
.text:00402C90
.text:00402C90 ; int __cdecl sub_402C90(int, int, char *, int, int)
.text:00402C90 sub_402C90      proc near               ; CODE XREF: sub_401380+D7↑p
.text:00402C90                                         ; sub_402E30+58↓p
.text:00402C90
.text:00402C90 var_1C          = dword ptr -1Ch
.text:00402C90 var_18          = dword ptr -18h
.text:00402C90 var_14          = dword ptr -14h
.text:00402C90 var_10          = dword ptr -10h
.text:00402C90 var_C           = dword ptr -0Ch
.text:00402C90 var_8           = dword ptr -8
.text:00402C90 var_4           = dword ptr -4
.text:00402C90 arg_0           = dword ptr  4
.text:00402C90 arg_4           = dword ptr  8
.text:00402C90 arg_8           = dword ptr  0Ch
.text:00402C90 arg_C           = dword ptr  10h
.text:00402C90 arg_10          = dword ptr  14h
.text:00402C90
.text:00402C90                 sub     esp, 1Ch
.text:00402C93                 mov     edx, [esp+1Ch+arg_C]
.text:00402C97                 mov     [esp+1Ch+var_4], 0 ; int
.text:00402C9F                 mov     ecx, [esp+1Ch+arg_10]
.text:00402CA3                 mov     [esp+1Ch+var_8], 0 ; int
.text:00402CAB                 mov     [esp+1Ch+var_10], edx ; int
.text:00402CAF                 mov     edx, [esp+1Ch+arg_4]
.text:00402CB3                 mov     [esp+1Ch+var_C], ecx ; int
.text:00402CB7                 mov     ecx, [esp+1Ch+arg_8]
.text:00402CBB                 mov     [esp+1Ch+var_18], edx ; int
.text:00402CBF                 mov     edx, [esp+1Ch+arg_0]
.text:00402CC3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00402CC7                 mov     [esp+1Ch+var_1C], edx ; int
.text:00402CCA                 call    sub_4026A0
.text:00402CCF                 add     esp, 1Ch
.text:00402CD2                 retn
.text:00402CD2 sub_402C90      endp
.text:00402CD2
.text:00402CD2 ; ---------------------------------------------------------------------------
.text:00402CD3                 align 10h
.text:00402CE0                 sub     esp, 2Ch
.text:00402CE3                 mov     edx, [esp+44h]
.text:00402CE7                 mov     dword ptr [esp+18h], 0
.text:00402CEF                 mov     ecx, [esp+40h]
.text:00402CF3                 mov     dword ptr [esp+14h], 0
.text:00402CFB                 mov     [esp+1Ch], edx
.text:00402CFF                 mov     edx, [esp+3Ch]
.text:00402D03                 mov     [esp+10h], ecx
.text:00402D07                 mov     ecx, [esp+38h]
.text:00402D0B                 mov     [esp+0Ch], edx
.text:00402D0F                 mov     edx, [esp+34h]
.text:00402D13                 mov     [esp+8], ecx
.text:00402D17                 mov     [esp+4], edx
.text:00402D1B                 mov     edx, [esp+30h]
.text:00402D1F                 mov     [esp], edx
.text:00402D22                 call    sub_401B10
.text:00402D27                 add     esp, 2Ch
.text:00402D2A                 retn
.text:00402D2A ; ---------------------------------------------------------------------------
.text:00402D2B                 align 10h
.text:00402D30                 sub     esp, 1Ch
.text:00402D33                 mov     edx, [esp+2Ch]
.text:00402D37                 mov     dword ptr [esp+18h], 0
.text:00402D3F                 mov     ecx, [esp+30h]
.text:00402D43                 mov     dword ptr [esp+14h], 1
.text:00402D4B                 mov     [esp+0Ch], edx
.text:00402D4F                 mov     edx, [esp+24h]
.text:00402D53                 mov     [esp+10h], ecx
.text:00402D57                 mov     ecx, [esp+28h]
.text:00402D5B                 mov     [esp+4], edx
.text:00402D5F                 mov     edx, [esp+20h]
.text:00402D63                 mov     [esp+8], ecx
.text:00402D67                 mov     [esp], edx
.text:00402D6A                 call    sub_4026A0
.text:00402D6F                 add     esp, 1Ch
.text:00402D72                 retn
.text:00402D72 ; ---------------------------------------------------------------------------
.text:00402D73                 align 10h
.text:00402D80                 sub     esp, 2Ch
.text:00402D83                 mov     edx, [esp+44h]
.text:00402D87                 mov     dword ptr [esp+18h], 0
.text:00402D8F                 mov     ecx, [esp+40h]
.text:00402D93                 mov     dword ptr [esp+14h], 1
.text:00402D9B                 mov     [esp+1Ch], edx
.text:00402D9F                 mov     edx, [esp+3Ch]
.text:00402DA3                 mov     [esp+10h], ecx
.text:00402DA7                 mov     ecx, [esp+38h]
.text:00402DAB                 mov     [esp+0Ch], edx
.text:00402DAF                 mov     edx, [esp+34h]
.text:00402DB3                 mov     [esp+8], ecx
.text:00402DB7                 mov     [esp+4], edx
.text:00402DBB                 mov     edx, [esp+30h]
.text:00402DBF                 mov     [esp], edx
.text:00402DC2                 call    sub_401B10
.text:00402DC7                 add     esp, 2Ch
.text:00402DCA                 retn
.text:00402DCA ; ---------------------------------------------------------------------------
.text:00402DCB                 align 10h
.text:00402DD0 aHelp           db 'help',0             ; DATA XREF: .text:off_402DF0↓o
.text:00402DD5 aVersion        db 'version',0          ; DATA XREF: .text:00402E00↓o
.text:00402DDD                 db 13h dup(90h)
.text:00402DF0 off_402DF0      dd offset aHelp         ; DATA XREF: sub_402E30+3D↓o
.text:00402DF0                                         ; "help"
.text:00402DF4                 dd 2 dup(0)
.text:00402DFC                 dd 68h
.text:00402E00                 dd offset aVersion      ; "version"
.text:00402E04                 dd 2 dup(0)
.text:00402E0C                 dd 76h, 4 dup(0)
.text:00402E20 ; ---------------------------------------------------------------------------
.text:00402E20
.text:00402E20 loc_402E20:                             ; DATA XREF: sub_402E30+45↓o
.text:00402E20                 sub     eax, [eax]
.text:00402E22                 lea     esi, [esi+0]
.text:00402E29                 lea     edi, [edi+0]
.text:00402E30
.text:00402E30 ; =============== S U B R O U T I N E =======================================
.text:00402E30
.text:00402E30
.text:00402E30 ; int __cdecl sub_402E30(int, int, FILE *, int, int, int, char)
.text:00402E30 sub_402E30      proc near               ; CODE XREF: sub_401380+B0↑p
.text:00402E30
.text:00402E30 Code            = dword ptr -1Ch
.text:00402E30 var_18          = dword ptr -18h
.text:00402E30 var_14          = dword ptr -14h
.text:00402E30 var_10          = dword ptr -10h
.text:00402E30 var_C           = dword ptr -0Ch
.text:00402E30 var_4           = dword ptr -4
.text:00402E30 arg_0           = dword ptr  4
.text:00402E30 arg_4           = dword ptr  8
.text:00402E30 arg_8           = dword ptr  0Ch
.text:00402E30 arg_C           = dword ptr  10h
.text:00402E30 arg_10          = dword ptr  14h
.text:00402E30 arg_14          = dword ptr  18h
.text:00402E30 arg_18          = byte ptr  1Ch
.text:00402E30
.text:00402E30                 sub     esp, 1Ch
.text:00402E33                 xor     eax, eax
.text:00402E35                 cmp     [esp+1Ch+arg_0], 2
.text:00402E3A                 mov     [esp+1Ch+var_4], ebx
.text:00402E3E                 mov     ebx, dword_406014
.text:00402E44                 mov     dword_406014, eax
.text:00402E49                 jz      short loc_402E61
.text:00402E4B
.text:00402E4B loc_402E4B:                             ; CODE XREF: sub_402E30+60↓j
.text:00402E4B                                         ; sub_402E30+6A↓j
.text:00402E4B                 mov     dword_406014, ebx
.text:00402E51                 xor     edx, edx
.text:00402E53                 mov     ebx, [esp+1Ch+var_4]
.text:00402E57                 mov     dword_406010, edx
.text:00402E5D                 add     esp, 1Ch
.text:00402E60                 retn
.text:00402E61 ; ---------------------------------------------------------------------------
.text:00402E61
.text:00402E61 loc_402E61:                             ; CODE XREF: sub_402E30+19↑j
.text:00402E61                 mov     [esp+1Ch+var_C], 0 ; int
.text:00402E69                 mov     edx, [esp+1Ch+arg_4]
.text:00402E6D                 mov     [esp+1Ch+var_10], offset off_402DF0 ; int
.text:00402E75                 mov     [esp+1Ch+var_14], offset loc_402E20 ; char *
.text:00402E7D                 mov     [esp+1Ch+var_18], edx ; int
.text:00402E81                 mov     [esp+1Ch+Code], 2 ; int
.text:00402E88                 call    sub_402C90
.text:00402E8D                 cmp     eax, 0FFFFFFFFh
.text:00402E90                 jz      short loc_402E4B
.text:00402E92                 cmp     eax, 68h ; 'h'
.text:00402E95                 jz      short loc_402E9E
.text:00402E97                 cmp     eax, 76h ; 'v'
.text:00402E9A                 jnz     short loc_402E4B
.text:00402E9C                 jmp     short loc_402EA9
.text:00402E9E ; ---------------------------------------------------------------------------
.text:00402E9E
.text:00402E9E loc_402E9E:                             ; CODE XREF: sub_402E30+65↑j
.text:00402E9E                 mov     [esp+1Ch+Code], 0
.text:00402EA5                 call    [esp+1Ch+arg_14]
.text:00402EA9
.text:00402EA9 loc_402EA9:                             ; CODE XREF: sub_402E30+6C↑j
.text:00402EA9                 mov     ecx, [esp+1Ch+arg_10]
.text:00402EAD                 lea     ebx, [esp+1Ch+arg_18]
.text:00402EB1                 mov     edx, [esp+1Ch+arg_C]
.text:00402EB5                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:00402EB9                 mov     ebx, [esp+1Ch+arg_8]
.text:00402EBD                 mov     [esp+1Ch+var_10], ecx ; int
.text:00402EC1                 mov     ecx, ds:_iob
.text:00402EC7                 mov     [esp+1Ch+var_14], edx ; int
.text:00402ECB                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:00402ECF                 add     ecx, 20h ; ' '
.text:00402ED2                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:00402ED5                 call    sub_403640
.text:00402EDA                 mov     [esp+1Ch+Code], 0 ; Code
.text:00402EE1                 call    exit
.text:00402EE1 sub_402E30      endp
.text:00402EE1
.text:00402EE1 ; ---------------------------------------------------------------------------
.text:00402EE6                 align 10h
.text:00402EF0                 mov     edx, [esp+4]
.text:00402EF4                 mov     ds:dword_407030, edx
.text:00402EFA                 retn
.text:00402EFA ; ---------------------------------------------------------------------------
.text:00402EFB aWriteError     db 'write error',0      ; DATA XREF: sub_402F20:loc_402F69↓o
.text:00402F07 ; const char aSS_0[]
.text:00402F07 aSS_0           db '%s: %s',0           ; DATA XREF: sub_402F20+77↓o
.text:00402F0E ; const char aS_1[]
.text:00402F0E aS_1            db '%s',0               ; DATA XREF: sub_402F20+A0↓o
.text:00402F11 ; ---------------------------------------------------------------------------
.text:00402F11                 jmp     short sub_402F20
.text:00402F11 ; ---------------------------------------------------------------------------
.text:00402F13                 align 10h
.text:00402F20
.text:00402F20 ; =============== S U B R O U T I N E =======================================
.text:00402F20
.text:00402F20
.text:00402F20 ; void __cdecl sub_402F20()
.text:00402F20 sub_402F20      proc near               ; CODE XREF: .text:00402F11↑j
.text:00402F20                                         ; DATA XREF: sub_401380+62↑o
.text:00402F20
.text:00402F20 Stream          = dword ptr -2Ch
.text:00402F20 ErrorMessage    = dword ptr -28h
.text:00402F20 var_24          = dword ptr -24h
.text:00402F20 var_20          = byte ptr -20h
.text:00402F20 var_1C          = dword ptr -1Ch
.text:00402F20 var_9           = byte ptr -9
.text:00402F20
.text:00402F20                 push    esi
.text:00402F21                 push    ebx
.text:00402F22                 sub     esp, 24h
.text:00402F25                 mov     edx, ds:_iob
.text:00402F2B                 mov     ecx, [edx+2Ch]
.text:00402F2E                 lea     esi, [edx+20h]
.text:00402F31                 shr     ecx, 5
.text:00402F34                 mov     bl, cl
.text:00402F36                 mov     ecx, [edx+20h]
.text:00402F39                 and     bl, 1
.text:00402F3C                 cmp     ecx, [esi+8]
.text:00402F3F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402F42                 setz    [esp+2Ch+var_9]
.text:00402F47                 call    fclose
.text:00402F4C                 test    eax, eax
.text:00402F4E                 setnz   al
.text:00402F51                 test    bl, bl
.text:00402F53                 jnz     loc_402FE3
.text:00402F59                 test    al, al
.text:00402F5B                 jz      short loc_402FB0
.text:00402F5D
.text:00402F5D loc_402F5D:                             ; CODE XREF: sub_402F20+CD↓j
.text:00402F5D                 call    _errno
.text:00402F62                 mov     esi, [eax]
.text:00402F64
.text:00402F64 loc_402F64:                             ; CODE XREF: sub_402F20+C7↓j
.text:00402F64                 cmp     esi, 9
.text:00402F67                 jz      short loc_402FD6
.text:00402F69
.text:00402F69 loc_402F69:                             ; CODE XREF: sub_402F20+B8↓j
.text:00402F69                                         ; sub_402F20+C1↓j
.text:00402F69                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00402F70                 call    ds:libintl_gettext
.text:00402F76                 mov     ebx, eax
.text:00402F78                 mov     eax, ds:dword_407030
.text:00402F7D                 test    eax, eax
.text:00402F7F                 jz      short loc_402FB6
.text:00402F81                 mov     [esp+2Ch+Stream], eax ; char *
.text:00402F84                 call    sub_404980
.text:00402F89                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00402F8D                 mov     edx, Code
.text:00402F93                 mov     [esp+2Ch+var_1C], ebx
.text:00402F97                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:00402F9F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402FA3                 mov     [esp+2Ch+Stream], edx ; Code
.text:00402FA6                 call    sub_404CA0
.text:00402FAB                 nop
.text:00402FAC                 lea     esi, [esi+0]
.text:00402FB0
.text:00402FB0 loc_402FB0:                             ; CODE XREF: sub_402F20+3B↑j
.text:00402FB0                                         ; sub_402F20+B4↓j ...
.text:00402FB0                 add     esp, 24h
.text:00402FB3                 pop     ebx
.text:00402FB4                 pop     esi
.text:00402FB5                 retn
.text:00402FB6 ; ---------------------------------------------------------------------------
.text:00402FB6
.text:00402FB6 loc_402FB6:                             ; CODE XREF: sub_402F20+5F↑j
.text:00402FB6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00402FBA                 mov     ebx, Code
.text:00402FC0                 mov     [esp+2Ch+var_24], offset aS_1 ; "%s"
.text:00402FC8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402FCC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00402FCF                 call    sub_404CA0
.text:00402FD4                 jmp     short loc_402FB0
.text:00402FD6 ; ---------------------------------------------------------------------------
.text:00402FD6
.text:00402FD6 loc_402FD6:                             ; CODE XREF: sub_402F20+47↑j
.text:00402FD6                 test    bl, bl
.text:00402FD8                 jnz     short loc_402F69
.text:00402FDA                 cmp     [esp+2Ch+var_9], 0
.text:00402FDF                 jnz     short loc_402FB0
.text:00402FE1                 jmp     short loc_402F69
.text:00402FE3 ; ---------------------------------------------------------------------------
.text:00402FE3
.text:00402FE3 loc_402FE3:                             ; CODE XREF: sub_402F20+33↑j
.text:00402FE3                 xor     esi, esi
.text:00402FE5                 test    al, al
.text:00402FE7                 jz      loc_402F64
.text:00402FED                 jmp     loc_402F5D
.text:00402FED sub_402F20      endp
.text:00402FED
.text:00402FED ; ---------------------------------------------------------------------------
.text:00402FF2                 align 10h
.text:00403000
.text:00403000 ; =============== S U B R O U T I N E =======================================
.text:00403000
.text:00403000
.text:00403000 sub_403000      proc near               ; CODE XREF: sub_402920+25↑p
.text:00403000                                         ; sub_402920+191↑p
.text:00403000
.text:00403000 Time            = dword ptr -1Ch
.text:00403000 var_18          = dword ptr -18h
.text:00403000 var_C           = dword ptr -0Ch
.text:00403000 var_8           = dword ptr -8
.text:00403000 var_4           = dword ptr -4
.text:00403000 arg_0           = dword ptr  4
.text:00403000
.text:00403000                 sub     esp, 1Ch
.text:00403003                 mov     [esp+1Ch+var_4], ebx
.text:00403007                 mov     ebx, [esp+1Ch+arg_0]
.text:0040300B                 mov     [esp+1Ch+Time], 0
.text:00403012                 mov     [esp+1Ch+var_18], ebx
.text:00403016                 call    sub_405020
.text:0040301B                 xor     edx, edx
.text:0040301D                 test    eax, eax
.text:0040301F                 jnz     short loc_403030
.text:00403021
.text:00403021 loc_403021:                             ; CODE XREF: sub_403000+5D↓j
.text:00403021                                         ; sub_403000+73↓j
.text:00403021                 mov     ebx, [esp+1Ch+var_4]
.text:00403025                 mov     eax, edx
.text:00403027                 add     esp, 1Ch
.text:0040302A                 retn
.text:0040302A ; ---------------------------------------------------------------------------
.text:0040302B                 align 10h
.text:00403030
.text:00403030 loc_403030:                             ; CODE XREF: sub_403000+1F↑j
.text:00403030                 mov     [esp+1Ch+var_18], 0
.text:00403038                 lea     edx, [esp+1Ch+var_C]
.text:0040303C                 mov     [esp+1Ch+Time], edx
.text:0040303F                 call    sub_404FC0
.text:00403044                 test    eax, eax
.text:00403046                 jnz     short loc_40305F
.text:00403048                 mov     ecx, [esp+1Ch+var_C]
.text:0040304C                 mov     [ebx], ecx
.text:0040304E                 mov     edx, [esp+1Ch+var_8]
.text:00403052                 imul    edx, 3E8h
.text:00403058                 mov     [ebx+4], edx
.text:0040305B
.text:0040305B loc_40305B:                             ; CODE XREF: sub_403000+7E↓j
.text:0040305B                 xor     edx, edx
.text:0040305D                 jmp     short loc_403021
.text:0040305F ; ---------------------------------------------------------------------------
.text:0040305F
.text:0040305F loc_40305F:                             ; CODE XREF: sub_403000+46↑j
.text:0040305F                 mov     [esp+1Ch+Time], 0 ; Time
.text:00403066                 call    time
.text:0040306B                 cmp     eax, 0FFFFFFFFh
.text:0040306E                 mov     edx, 0FFFFFFFFh
.text:00403073                 jz      short loc_403021
.text:00403075                 mov     [ebx], eax
.text:00403077                 mov     dword ptr [ebx+4], 0
.text:0040307E                 jmp     short loc_40305B
.text:0040307E sub_403000      endp
.text:0040307E
.text:00403080 ; ---------------------------------------------------------------------------
.text:00403080                 sub     esp, 0Ch
.text:00403083                 xor     edx, edx
.text:00403085                 mov     ecx, [esp+14h]
.text:00403089                 mov     [esp+8], ebx
.text:0040308D                 mov     eax, 0FFFFFFFFh
.text:00403092                 mov     ebx, [esp+10h]
.text:00403096                 div     ecx
.text:00403098                 cmp     eax, ebx
.text:0040309A                 jb      short loc_4030B9
.text:0040309C                 mov     edx, ebx
.text:0040309E                 imul    edx, ecx
.text:004030A1                 mov     [esp], edx
.text:004030A4                 call    malloc
.text:004030A9                 test    eax, eax
.text:004030AB                 jz      short loc_4030B5
.text:004030AD
.text:004030AD loc_4030AD:                             ; CODE XREF: .text:004030B7↓j
.text:004030AD                 mov     ebx, [esp+8]
.text:004030B1                 add     esp, 0Ch
.text:004030B4                 retn
.text:004030B5 ; ---------------------------------------------------------------------------
.text:004030B5
.text:004030B5 loc_4030B5:                             ; CODE XREF: .text:004030AB↑j
.text:004030B5                 test    ebx, ebx
.text:004030B7                 jz      short loc_4030AD
.text:004030B9
.text:004030B9 loc_4030B9:                             ; CODE XREF: .text:0040309A↑j
.text:004030B9                 call    sub_404C10
.text:004030B9 ; ---------------------------------------------------------------------------
.text:004030BE                 align 10h
.text:004030C0
.text:004030C0 ; =============== S U B R O U T I N E =======================================
.text:004030C0
.text:004030C0
.text:004030C0 ; int __cdecl sub_4030C0(size_t)
.text:004030C0 sub_4030C0      proc near               ; CODE XREF: .text:00404359↓p
.text:004030C0                                         ; .text:00404536↓p ...
.text:004030C0
.text:004030C0 Size            = dword ptr -0Ch
.text:004030C0 var_4           = dword ptr -4
.text:004030C0 arg_0           = dword ptr  4
.text:004030C0
.text:004030C0                 sub     esp, 0Ch
.text:004030C3                 mov     [esp+0Ch+var_4], ebx
.text:004030C7                 mov     ebx, [esp+0Ch+arg_0]
.text:004030CB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004030CE                 call    malloc
.text:004030D3                 test    eax, eax
.text:004030D5                 jz      short loc_4030E0
.text:004030D7
.text:004030D7 loc_4030D7:                             ; CODE XREF: sub_4030C0+22↓j
.text:004030D7                 mov     ebx, [esp+0Ch+var_4]
.text:004030DB                 add     esp, 0Ch
.text:004030DE                 retn
.text:004030DE ; ---------------------------------------------------------------------------
.text:004030DF                 align 10h
.text:004030E0
.text:004030E0 loc_4030E0:                             ; CODE XREF: sub_4030C0+15↑j
.text:004030E0                 test    ebx, ebx
.text:004030E2                 jz      short loc_4030D7
.text:004030E4                 call    sub_404C10
.text:004030E4 sub_4030C0      endp
.text:004030E4
.text:004030E4 ; ---------------------------------------------------------------------------
.text:004030E9                 align 10h
.text:004030F0                 sub     esp, 1Ch
.text:004030F3                 xor     edx, edx
.text:004030F5                 mov     eax, 0FFFFFFFFh
.text:004030FA                 mov     [esp+14h], ebx
.text:004030FE                 mov     ecx, [esp+20h]
.text:00403102                 mov     ebx, [esp+28h]
.text:00403106                 mov     [esp+18h], esi
.text:0040310A                 mov     esi, [esp+24h]
.text:0040310E                 div     ebx
.text:00403110                 cmp     eax, esi
.text:00403112                 jb      short loc_403144
.text:00403114                 mov     [esp], ecx
.text:00403117                 mov     edx, esi
.text:00403119                 imul    edx, ebx
.text:0040311C                 mov     [esp+4], edx
.text:00403120                 call    realloc
.text:00403125                 test    eax, eax
.text:00403127                 mov     ecx, eax
.text:00403129                 jz      short loc_403140
.text:0040312B
.text:0040312B loc_40312B:                             ; CODE XREF: .text:00403142↓j
.text:0040312B                 mov     ebx, [esp+14h]
.text:0040312F                 mov     eax, ecx
.text:00403131                 mov     esi, [esp+18h]
.text:00403135                 add     esp, 1Ch
.text:00403138                 retn
.text:00403138 ; ---------------------------------------------------------------------------
.text:00403139                 align 10h
.text:00403140
.text:00403140 loc_403140:                             ; CODE XREF: .text:00403129↑j
.text:00403140                 test    esi, esi
.text:00403142                 jz      short loc_40312B
.text:00403144
.text:00403144 loc_403144:                             ; CODE XREF: .text:00403112↑j
.text:00403144                 call    sub_404C10
.text:00403144 ; ---------------------------------------------------------------------------
.text:00403149                 align 10h
.text:00403150
.text:00403150 ; =============== S U B R O U T I N E =======================================
.text:00403150
.text:00403150
.text:00403150 ; int __cdecl sub_403150(void *, size_t)
.text:00403150 sub_403150      proc near               ; CODE XREF: sub_404A20+5B↓p
.text:00403150
.text:00403150 Block           = dword ptr -0Ch
.text:00403150 Size            = dword ptr -8
.text:00403150 var_4           = dword ptr -4
.text:00403150 arg_0           = dword ptr  4
.text:00403150 arg_4           = dword ptr  8
.text:00403150
.text:00403150                 sub     esp, 0Ch
.text:00403153                 mov     edx, [esp+0Ch+arg_0]
.text:00403157                 mov     [esp+0Ch+var_4], ebx
.text:0040315B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040315F                 mov     [esp+0Ch+Block], edx ; Block
.text:00403162                 mov     [esp+0Ch+Size], ebx ; Size
.text:00403166                 call    realloc
.text:0040316B                 test    eax, eax
.text:0040316D                 jz      short loc_403177
.text:0040316F
.text:0040316F loc_40316F:                             ; CODE XREF: sub_403150+29↓j
.text:0040316F                 mov     ebx, [esp+0Ch+var_4]
.text:00403173                 add     esp, 0Ch
.text:00403176                 retn
.text:00403177 ; ---------------------------------------------------------------------------
.text:00403177
.text:00403177 loc_403177:                             ; CODE XREF: sub_403150+1D↑j
.text:00403177                 test    ebx, ebx
.text:00403179                 jz      short loc_40316F
.text:0040317B                 call    sub_404C10
.text:0040317B sub_403150      endp
.text:0040317B
.text:00403180 ; ---------------------------------------------------------------------------
.text:00403180                 jmp     sub_4032D0
.text:00403180 ; ---------------------------------------------------------------------------
.text:00403185                 align 10h
.text:00403190                 sub     esp, 0Ch
.text:00403193                 mov     edx, [esp+14h]
.text:00403197                 mov     dword ptr [esp+8], 1
.text:0040319F                 mov     [esp+4], edx
.text:004031A3                 mov     edx, [esp+10h]
.text:004031A7                 mov     [esp], edx
.text:004031AA                 call    sub_4032D0
.text:004031AF                 add     esp, 0Ch
.text:004031B2                 retn
.text:004031B2 ; ---------------------------------------------------------------------------
.text:004031B3                 align 10h
.text:004031C0                 sub     esp, 1Ch
.text:004031C3                 mov     [esp+18h], ebx
.text:004031C7                 mov     ebx, [esp+20h]
.text:004031CB                 mov     [esp], ebx
.text:004031CE                 call    malloc
.text:004031D3                 test    eax, eax
.text:004031D5                 jz      short loc_4031F3
.text:004031D7
.text:004031D7 loc_4031D7:                             ; CODE XREF: .text:004031F5↓j
.text:004031D7                 mov     [esp+8], ebx
.text:004031DB                 mov     dword ptr [esp+4], 0
.text:004031E3                 mov     [esp], eax
.text:004031E6                 call    memset
.text:004031EB                 mov     ebx, [esp+18h]
.text:004031EF                 add     esp, 1Ch
.text:004031F2                 retn
.text:004031F3 ; ---------------------------------------------------------------------------
.text:004031F3
.text:004031F3 loc_4031F3:                             ; CODE XREF: .text:004031D5↑j
.text:004031F3                 test    ebx, ebx
.text:004031F5                 jz      short loc_4031D7
.text:004031F7                 call    sub_404C10
.text:004031F7 ; ---------------------------------------------------------------------------
.text:004031FC                 align 10h
.text:00403200                 sub     esp, 0Ch
.text:00403203                 xor     edx, edx
.text:00403205                 mov     ecx, [esp+14h]
.text:00403209                 mov     [esp+8], ebx
.text:0040320D                 mov     eax, 0FFFFFFFFh
.text:00403212                 mov     ebx, [esp+10h]
.text:00403216                 div     ecx
.text:00403218                 cmp     eax, ebx
.text:0040321A                 jb      short loc_403238
.text:0040321C                 mov     [esp+4], ecx
.text:00403220                 mov     [esp], ebx
.text:00403223                 call    calloc
.text:00403228                 test    eax, eax
.text:0040322A                 jz      short loc_403234
.text:0040322C
.text:0040322C loc_40322C:                             ; CODE XREF: .text:00403236↓j
.text:0040322C                 mov     ebx, [esp+8]
.text:00403230                 add     esp, 0Ch
.text:00403233                 retn
.text:00403234 ; ---------------------------------------------------------------------------
.text:00403234
.text:00403234 loc_403234:                             ; CODE XREF: .text:0040322A↑j
.text:00403234                 test    ebx, ebx
.text:00403236                 jz      short loc_40322C
.text:00403238
.text:00403238 loc_403238:                             ; CODE XREF: .text:0040321A↑j
.text:00403238                 call    sub_404C10
.text:00403238 ; ---------------------------------------------------------------------------
.text:0040323D                 align 10h
.text:00403240                 sub     esp, 1Ch
.text:00403243                 mov     [esp+18h], ebx
.text:00403247                 mov     ebx, [esp+24h]
.text:0040324B                 mov     [esp], ebx
.text:0040324E                 call    malloc
.text:00403253                 test    eax, eax
.text:00403255                 mov     edx, eax
.text:00403257                 jz      short loc_403275
.text:00403259
.text:00403259 loc_403259:                             ; CODE XREF: .text:00403277↓j
.text:00403259                 mov     [esp+8], ebx
.text:0040325D                 mov     ecx, [esp+20h]
.text:00403261                 mov     [esp], edx
.text:00403264                 mov     [esp+4], ecx
.text:00403268                 call    memcpy
.text:0040326D                 mov     ebx, [esp+18h]
.text:00403271                 add     esp, 1Ch
.text:00403274                 retn
.text:00403275 ; ---------------------------------------------------------------------------
.text:00403275
.text:00403275 loc_403275:                             ; CODE XREF: .text:00403257↑j
.text:00403275                 test    ebx, ebx
.text:00403277                 jz      short loc_403259
.text:00403279                 call    sub_404C10
.text:00403279 ; ---------------------------------------------------------------------------
.text:0040327E                 align 10h
.text:00403280
.text:00403280 ; =============== S U B R O U T I N E =======================================
.text:00403280
.text:00403280
.text:00403280 ; int __cdecl sub_403280(char *)
.text:00403280 sub_403280      proc near               ; CODE XREF: sub_402B70+24↑p
.text:00403280
.text:00403280 Str             = dword ptr -1Ch
.text:00403280 Src             = dword ptr -18h
.text:00403280 Size            = dword ptr -14h
.text:00403280 var_8           = dword ptr -8
.text:00403280 var_4           = dword ptr -4
.text:00403280 arg_0           = dword ptr  4
.text:00403280
.text:00403280                 sub     esp, 1Ch
.text:00403283                 mov     [esp+1Ch+var_4], esi
.text:00403287                 mov     esi, [esp+1Ch+arg_0]
.text:0040328B                 mov     [esp+1Ch+var_8], ebx
.text:0040328F                 mov     [esp+1Ch+Str], esi ; Str
.text:00403292                 call    strlen
.text:00403297                 lea     ebx, [eax+1]
.text:0040329A                 mov     [esp+1Ch+Str], ebx ; Size
.text:0040329D                 call    malloc
.text:004032A2                 test    eax, eax
.text:004032A4                 jz      short loc_4032C2
.text:004032A6
.text:004032A6 loc_4032A6:                             ; CODE XREF: sub_403280+44↓j
.text:004032A6                 mov     [esp+1Ch+Size], ebx ; Size
.text:004032AA                 mov     [esp+1Ch+Src], esi ; Src
.text:004032AE                 mov     [esp+1Ch+Str], eax ; void *
.text:004032B1                 call    memcpy
.text:004032B6                 mov     ebx, [esp+1Ch+var_8]
.text:004032BA                 mov     esi, [esp+1Ch+var_4]
.text:004032BE                 add     esp, 1Ch
.text:004032C1                 retn
.text:004032C2 ; ---------------------------------------------------------------------------
.text:004032C2
.text:004032C2 loc_4032C2:                             ; CODE XREF: sub_403280+24↑j
.text:004032C2                 test    ebx, ebx
.text:004032C4                 jz      short loc_4032A6
.text:004032C6                 call    sub_404C10
.text:004032C6 sub_403280      endp
.text:004032C6
.text:004032C6 ; ---------------------------------------------------------------------------
.text:004032CB                 align 10h
.text:004032D0
.text:004032D0 ; =============== S U B R O U T I N E =======================================
.text:004032D0
.text:004032D0
.text:004032D0 ; int __cdecl sub_4032D0(void *, int, int)
.text:004032D0 sub_4032D0      proc near               ; CODE XREF: .text:00403180↑j
.text:004032D0                                         ; .text:004031AA↑p
.text:004032D0
.text:004032D0 Block           = dword ptr -1Ch
.text:004032D0 Size            = dword ptr -18h
.text:004032D0 var_C           = dword ptr -0Ch
.text:004032D0 var_8           = dword ptr -8
.text:004032D0 var_4           = dword ptr -4
.text:004032D0 arg_0           = dword ptr  4
.text:004032D0 arg_4           = dword ptr  8
.text:004032D0 arg_8           = dword ptr  0Ch
.text:004032D0
.text:004032D0                 sub     esp, 1Ch
.text:004032D3                 mov     [esp+1Ch+var_8], esi
.text:004032D7                 mov     esi, [esp+1Ch+arg_0]
.text:004032DB                 mov     [esp+1Ch+var_4], edi
.text:004032DF                 mov     edi, [esp+1Ch+arg_4]
.text:004032E3                 test    esi, esi
.text:004032E5                 mov     [esp+1Ch+var_C], ebx
.text:004032E9                 mov     ecx, [edi]
.text:004032EB                 mov     ebx, [esp+1Ch+arg_8]
.text:004032EF                 jz      short loc_403330
.text:004032F1                 xor     edx, edx
.text:004032F3                 mov     eax, 7FFFFFFFh
.text:004032F8                 div     ebx
.text:004032FA                 cmp     eax, ecx
.text:004032FC                 jb      short loc_403329
.text:004032FE                 add     ecx, ecx
.text:00403300
.text:00403300 loc_403300:                             ; CODE XREF: sub_4032D0+62↓j
.text:00403300                                         ; sub_4032D0+71↓j ...
.text:00403300                 mov     [edi], ecx
.text:00403302                 imul    ebx, ecx
.text:00403305                 mov     [esp+1Ch+Block], esi ; Block
.text:00403308                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040330C                 call    realloc
.text:00403311                 test    eax, eax
.text:00403313                 jz      short loc_403325
.text:00403315
.text:00403315 loc_403315:                             ; CODE XREF: sub_4032D0+57↓j
.text:00403315                 mov     ebx, [esp+1Ch+var_C]
.text:00403319                 mov     esi, [esp+1Ch+var_8]
.text:0040331D                 mov     edi, [esp+1Ch+var_4]
.text:00403321                 add     esp, 1Ch
.text:00403324                 retn
.text:00403325 ; ---------------------------------------------------------------------------
.text:00403325
.text:00403325 loc_403325:                             ; CODE XREF: sub_4032D0+43↑j
.text:00403325                 test    ebx, ebx
.text:00403327                 jz      short loc_403315
.text:00403329
.text:00403329 loc_403329:                             ; CODE XREF: sub_4032D0+2C↑j
.text:00403329                 call    sub_404C10
.text:00403329 ; ---------------------------------------------------------------------------
.text:0040332E                 align 10h
.text:00403330
.text:00403330 loc_403330:                             ; CODE XREF: sub_4032D0+1F↑j
.text:00403330                 test    ecx, ecx
.text:00403332                 jnz     short loc_403300
.text:00403334                 xor     edx, edx
.text:00403336                 mov     eax, 40h ; '@'
.text:0040333B                 div     ebx
.text:0040333D                 test    eax, eax
.text:0040333F                 mov     ecx, eax
.text:00403341                 jnz     short loc_403300
.text:00403343                 mov     ecx, 1
.text:00403348                 jmp     short loc_403300
.text:00403348 sub_4032D0      endp
.text:00403348
.text:00403348 ; ---------------------------------------------------------------------------
.text:0040334A                 align 10h
.text:00403350 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00403350                                         ; DATA XREF: .data:Buffer↓o
.text:00403382 ; const char Format[]
.text:00403382 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_403640+50↓o
.text:0040338E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040338E                                         ; DATA XREF: sub_403640:loc_4036E1↓o
.text:0040339E                 db 12h dup(90h)
.text:004033B0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:004033B0                                         ; DATA XREF: sub_403640+100↓o
.text:004033B0                 db 'ere is NO',0Ah
.text:004033B0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:004033B0                 db 'R PURPOSE.',0Ah,0
.text:00403448 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00403448                                         ; DATA XREF: sub_403640:loc_403781↓o
.text:0040345F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040345F                                         ; DATA XREF: sub_403640:loc_40378D↓o
.text:0040347B                 db 15h dup(90h)
.text:00403490 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00403490                                         ; DATA XREF: sub_403640:loc_403799↓o
.text:00403490                 db 'and %s.',0Ah,0
.text:004034B0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:004034B0                                         ; DATA XREF: sub_403640:loc_4037A5↓o
.text:004034B0                 db '%s, and %s.',0Ah,0
.text:004034D4                 db 1Ch dup(90h)
.text:004034F0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:004034F0                                         ; DATA XREF: sub_403640:loc_4037B1↓o
.text:004034F0                 db '%s, %s, and %s.',0Ah,0
.text:00403518                 db 18h dup(90h)
.text:00403530 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00403530                                         ; DATA XREF: sub_403640:loc_4037BD↓o
.text:00403530                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040355C                 db 14h dup(90h)
.text:00403570 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00403570                                         ; DATA XREF: sub_403640:loc_4037C9↓o
.text:00403570                 db '%s, %s, %s, %s,',0Ah
.text:00403570                 db 'and %s.',0Ah,0
.text:004035A0                 db 10h dup(90h)
.text:004035B0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:004035B0                                         ; DATA XREF: sub_403640:loc_4037D5↓o
.text:004035B0                 db '%s, %s, %s, %s,',0Ah
.text:004035B0                 db '%s, and %s.',0Ah,0
.text:004035E4                 align 10h
.text:004035F0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:004035F0                                         ; DATA XREF: sub_403640:def_4036AD↓o
.text:004035F0                 db '%s, %s, %s, %s,',0Ah
.text:004035F0                 db '%s, %s, and others.',0Ah,0
.text:0040362C ; const char aSS[]
.text:0040362C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_403640+1B5↓o
.text:00403633                 align 10h
.text:00403640
.text:00403640 ; =============== S U B R O U T I N E =======================================
.text:00403640
.text:00403640
.text:00403640 ; int __cdecl sub_403640(FILE *, FILE *, int, int, va_list)
.text:00403640 sub_403640      proc near               ; CODE XREF: sub_402E30+A5↑p
.text:00403640                                         ; .text:0040383A↓p
.text:00403640
.text:00403640 Stream          = dword ptr -2Ch
.text:00403640 Format          = dword ptr -28h
.text:00403640 ArgList         = dword ptr -24h
.text:00403640 var_20          = dword ptr -20h
.text:00403640 var_1C          = dword ptr -1Ch
.text:00403640 var_14          = dword ptr -14h
.text:00403640 arg_0           = dword ptr  4
.text:00403640 arg_4           = dword ptr  8
.text:00403640 arg_8           = dword ptr  0Ch
.text:00403640 arg_C           = dword ptr  10h
.text:00403640 arg_10          = dword ptr  14h
.text:00403640
.text:00403640                 push    ebp
.text:00403641                 push    edi
.text:00403642                 push    esi
.text:00403643                 push    ebx
.text:00403644                 sub     esp, 1Ch
.text:00403647                 xor     ebx, ebx
.text:00403649                 mov     edi, [esp+2Ch+arg_10]
.text:0040364D                 mov     edx, [esp+2Ch+arg_8]
.text:00403651                 mov     esi, [esp+2Ch+arg_0]
.text:00403655                 mov     eax, [edi]
.text:00403657                 mov     ecx, [esp+2Ch+arg_4]
.text:0040365B                 mov     [esp+2Ch+var_14], edx
.text:0040365F                 mov     ebp, [esp+2Ch+arg_C]
.text:00403663                 lea     edx, [edi+4]
.text:00403666                 test    eax, eax
.text:00403668                 jz      short loc_40367C
.text:0040366A                 lea     esi, [esi+0]
.text:00403670
.text:00403670 loc_403670:                             ; CODE XREF: sub_403640+3A↓j
.text:00403670                 mov     eax, edx
.text:00403672                 inc     ebx
.text:00403673                 mov     eax, [eax]
.text:00403675                 add     edx, 4
.text:00403678                 test    eax, eax
.text:0040367A                 jnz     short loc_403670
.text:0040367C
.text:0040367C loc_40367C:                             ; CODE XREF: sub_403640+28↑j
.text:0040367C                 test    ecx, ecx
.text:0040367E                 jz      loc_4037ED
.text:00403684                 mov     [esp+2Ch+var_1C], ebp
.text:00403688                 mov     edx, [esp+2Ch+var_14]
.text:0040368C                 mov     [esp+2Ch+ArgList], ecx
.text:00403690                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00403698                 mov     [esp+2Ch+var_20], edx
.text:0040369C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040369F                 call    fprintf
.text:004036A4
.text:004036A4 loc_4036A4:                             ; CODE XREF: sub_403640+1C9↓j
.text:004036A4                 cmp     ebx, 9          ; switch 10 cases
.text:004036A7                 ja      def_4036AD      ; jumptable 004036AD default case
.text:004036AD                 jmp     ds:jpt_4036AD[ebx*4] ; switch jump
.text:004036AD ; ---------------------------------------------------------------------------
.text:004036B4 jpt_4036AD      dd offset loc_4036DC    ; DATA XREF: sub_403640+6D↑r
.text:004036B4                 dd offset loc_4036E1    ; jump table for switch statement
.text:004036B4                 dd offset loc_403781
.text:004036B4                 dd offset loc_40378D
.text:004036B4                 dd offset loc_403799
.text:004036B4                 dd offset loc_4037A5
.text:004036B4                 dd offset loc_4037B1
.text:004036B4                 dd offset loc_4037BD
.text:004036B4                 dd offset loc_4037C9
.text:004036B4                 dd offset loc_4037D5
.text:004036DC ; ---------------------------------------------------------------------------
.text:004036DC
.text:004036DC loc_4036DC:                             ; CODE XREF: sub_403640+6D↑j
.text:004036DC                                         ; DATA XREF: sub_403640:jpt_4036AD↑o
.text:004036DC                 call    abort           ; jumptable 004036AD case 0
.text:004036E1 ; ---------------------------------------------------------------------------
.text:004036E1
.text:004036E1 loc_4036E1:                             ; CODE XREF: sub_403640+6D↑j
.text:004036E1                                         ; DATA XREF: sub_403640:jpt_4036AD↑o
.text:004036E1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 004036AD case 1
.text:004036E8                 nop
.text:004036E9                 lea     esi, [esi+0]
.text:004036F0
.text:004036F0 loc_4036F0:                             ; CODE XREF: sub_403640+148↓j
.text:004036F0                                         ; sub_403640+154↓j ...
.text:004036F0                 call    ds:libintl_gettext
.text:004036F6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004036FA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004036FD                 mov     [esp+2Ch+Format], eax ; Format
.text:00403701                 call    vfprintf
.text:00403706                 mov     ebx, [esi+4]
.text:00403709                 dec     ebx
.text:0040370A                 test    ebx, ebx
.text:0040370C                 mov     [esi+4], ebx
.text:0040370F                 js      short loc_40376F
.text:00403711                 mov     edi, [esi]
.text:00403713                 mov     byte ptr [edi], 0Ah
.text:00403716                 inc     dword ptr [esi]
.text:00403718
.text:00403718 loc_403718:                             ; CODE XREF: sub_403640+13F↓j
.text:00403718                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040371C                 mov     edx, Buffer
.text:00403722                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00403725                 call    fputs
.text:0040372A                 mov     ebp, [esi+4]
.text:0040372D                 dec     ebp
.text:0040372E                 test    ebp, ebp
.text:00403730                 mov     [esi+4], ebp
.text:00403733                 js      short loc_40375D
.text:00403735                 mov     ecx, [esi]
.text:00403737                 mov     byte ptr [ecx], 0Ah
.text:0040373A                 inc     dword ptr [esi]
.text:0040373C
.text:0040373C loc_40373C:                             ; CODE XREF: sub_403640+12D↓j
.text:0040373C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00403740                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00403747                 call    ds:libintl_gettext
.text:0040374D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00403751                 add     esp, 1Ch
.text:00403754                 pop     ebx
.text:00403755                 pop     esi
.text:00403756                 pop     edi
.text:00403757                 pop     ebp
.text:00403758                 jmp     fputs
.text:0040375D ; ---------------------------------------------------------------------------
.text:0040375D
.text:0040375D loc_40375D:                             ; CODE XREF: sub_403640+F3↑j
.text:0040375D                 mov     [esp+2Ch+Format], esi ; File
.text:00403761                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403768                 call    _flsbuf
.text:0040376D                 jmp     short loc_40373C
.text:0040376F ; ---------------------------------------------------------------------------
.text:0040376F
.text:0040376F loc_40376F:                             ; CODE XREF: sub_403640+CF↑j
.text:0040376F                 mov     [esp+2Ch+Format], esi ; File
.text:00403773                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040377A                 call    _flsbuf
.text:0040377F                 jmp     short loc_403718
.text:00403781 ; ---------------------------------------------------------------------------
.text:00403781
.text:00403781 loc_403781:                             ; CODE XREF: sub_403640+6D↑j
.text:00403781                                         ; DATA XREF: sub_403640:jpt_4036AD↑o
.text:00403781                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 004036AD case 2
.text:00403788                 jmp     loc_4036F0
.text:0040378D ; ---------------------------------------------------------------------------
.text:0040378D
.text:0040378D loc_40378D:                             ; CODE XREF: sub_403640+6D↑j
.text:0040378D                                         ; DATA XREF: sub_403640:jpt_4036AD↑o
.text:0040378D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 004036AD case 3
.text:00403794                 jmp     loc_4036F0
.text:00403799 ; ---------------------------------------------------------------------------
.text:00403799
.text:00403799 loc_403799:                             ; CODE XREF: sub_403640+6D↑j
.text:00403799                                         ; DATA XREF: sub_403640:jpt_4036AD↑o
.text:00403799                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 004036AD case 4
.text:004037A0                 jmp     loc_4036F0
.text:004037A5 ; ---------------------------------------------------------------------------
.text:004037A5
.text:004037A5 loc_4037A5:                             ; CODE XREF: sub_403640+6D↑j
.text:004037A5                                         ; DATA XREF: sub_403640:jpt_4036AD↑o
.text:004037A5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 004036AD case 5
.text:004037AC                 jmp     loc_4036F0
.text:004037B1 ; ---------------------------------------------------------------------------
.text:004037B1
.text:004037B1 loc_4037B1:                             ; CODE XREF: sub_403640+6D↑j
.text:004037B1                                         ; DATA XREF: sub_403640:jpt_4036AD↑o
.text:004037B1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 004036AD case 6
.text:004037B8                 jmp     loc_4036F0
.text:004037BD ; ---------------------------------------------------------------------------
.text:004037BD
.text:004037BD loc_4037BD:                             ; CODE XREF: sub_403640+6D↑j
.text:004037BD                                         ; DATA XREF: sub_403640:jpt_4036AD↑o
.text:004037BD                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 004036AD case 7
.text:004037C4                 jmp     loc_4036F0
.text:004037C9 ; ---------------------------------------------------------------------------
.text:004037C9
.text:004037C9 loc_4037C9:                             ; CODE XREF: sub_403640+6D↑j
.text:004037C9                                         ; DATA XREF: sub_403640:jpt_4036AD↑o
.text:004037C9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 004036AD case 8
.text:004037D0                 jmp     loc_4036F0
.text:004037D5 ; ---------------------------------------------------------------------------
.text:004037D5
.text:004037D5 loc_4037D5:                             ; CODE XREF: sub_403640+6D↑j
.text:004037D5                                         ; DATA XREF: sub_403640:jpt_4036AD↑o
.text:004037D5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 004036AD case 9
.text:004037DC                 jmp     loc_4036F0
.text:004037E1 ; ---------------------------------------------------------------------------
.text:004037E1
.text:004037E1 def_4036AD:                             ; CODE XREF: sub_403640+67↑j
.text:004037E1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 004036AD default case
.text:004037E8                 jmp     loc_4036F0
.text:004037ED ; ---------------------------------------------------------------------------
.text:004037ED
.text:004037ED loc_4037ED:                             ; CODE XREF: sub_403640+3E↑j
.text:004037ED                 mov     [esp+2Ch+var_20], ebp
.text:004037F1                 mov     ecx, [esp+2Ch+var_14]
.text:004037F5                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:004037FD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403800                 mov     [esp+2Ch+ArgList], ecx
.text:00403804                 call    fprintf
.text:00403809                 jmp     loc_4036A4
.text:00403809 sub_403640      endp
.text:00403809
.text:00403809 ; ---------------------------------------------------------------------------
.text:0040380E                 align 10h
.text:00403810                 sub     esp, 1Ch
.text:00403813                 mov     edx, [esp+2Ch]
.text:00403817                 lea     ecx, [esp+30h]
.text:0040381B                 mov     [esp+10h], ecx
.text:0040381F                 mov     ecx, [esp+28h]
.text:00403823                 mov     [esp+0Ch], edx
.text:00403827                 mov     edx, [esp+24h]
.text:0040382B                 mov     [esp+8], ecx
.text:0040382F                 mov     [esp+4], edx
.text:00403833                 mov     edx, [esp+20h]
.text:00403837                 mov     [esp], edx
.text:0040383A                 call    sub_403640
.text:0040383F                 add     esp, 1Ch
.text:00403842                 retn
.text:00403842 ; ---------------------------------------------------------------------------
.text:00403843                 align 10h
.text:00403850 aLiteral        db 'literal',0          ; DATA XREF: .text:00403890↓o
.text:00403858 aShell          db 'shell',0            ; DATA XREF: .text:00403894↓o
.text:0040385E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00403898↓o
.text:0040386B aC              db 'c',0                ; DATA XREF: .text:0040389C↓o
.text:0040386D aEscape         db 'escape',0           ; DATA XREF: .text:004038A0↓o
.text:00403874 aLocale         db 'locale',0           ; DATA XREF: .text:004038A4↓o
.text:0040387B aClocale        db 'clocale',0          ; DATA XREF: .text:004038A8↓o
.text:00403883                 align 10h
.text:00403890                 dd offset aLiteral      ; "literal"
.text:00403894                 dd offset aShell        ; "shell"
.text:00403898                 dd offset aShellAlways  ; "shell-always"
.text:0040389C                 dd offset aC            ; "c"
.text:004038A0                 dd offset aEscape       ; "escape"
.text:004038A4                 dd offset aLocale       ; "locale"
.text:004038A8                 dd offset aClocale      ; "clocale"
.text:004038AC                 dd 2 dup(0)
.text:004038B4                 dd 1, 2, 3, 4, 5, 6
.text:004038CC asc_4038CC:                             ; DATA XREF: sub_4038E0+7E↓o
.text:004038CC                                         ; sub_4038E0+A39↓o ...
.text:004038CC                 text "UTF-16LE", '"',27h,'`'
.text:004038D2                 align 10h
.text:004038E0
.text:004038E0 ; =============== S U B R O U T I N E =======================================
.text:004038E0
.text:004038E0
.text:004038E0 ; int __cdecl sub_4038E0(int, int, char *Str, int, int, int)
.text:004038E0 sub_4038E0      proc near               ; CODE XREF: sub_4038E0+43A↓p
.text:004038E0                                         ; .text:004044A3↓p ...
.text:004038E0
.text:004038E0 C               = dword ptr -4Ch
.text:004038E0 Type            = dword ptr -48h
.text:004038E0 SizeInBytes     = dword ptr -44h
.text:004038E0 State           = dword ptr -40h
.text:004038E0 var_3C          = dword ptr -3Ch
.text:004038E0 var_38          = dword ptr -38h
.text:004038E0 var_34          = dword ptr -34h
.text:004038E0 var_30          = dword ptr -30h
.text:004038E0 var_29          = byte ptr -29h
.text:004038E0 var_28          = dword ptr -28h
.text:004038E0 var_22          = byte ptr -22h
.text:004038E0 var_21          = byte ptr -21h
.text:004038E0 var_20          = dword ptr -20h
.text:004038E0 var_1C          = dword ptr -1Ch
.text:004038E0 var_18          = mbstate_t ptr -18h
.text:004038E0 arg_0           = dword ptr  4
.text:004038E0 arg_4           = dword ptr  8
.text:004038E0 Str             = dword ptr  0Ch
.text:004038E0 arg_C           = dword ptr  10h
.text:004038E0 arg_10          = dword ptr  14h
.text:004038E0 arg_14          = dword ptr  18h
.text:004038E0
.text:004038E0                 push    ebp
.text:004038E1                 push    edi
.text:004038E2                 push    esi
.text:004038E3                 push    ebx
.text:004038E4                 sub     esp, 3Ch
.text:004038E7                 mov     edx, ds:__mb_cur_max
.text:004038ED                 mov     [esp+4Ch+var_34], 0
.text:004038F5                 mov     [esp+4Ch+var_1C], 0
.text:004038FD                 cmp     dword ptr [edx], 1
.text:00403900                 mov     [esp+4Ch+var_20], 0
.text:00403908                 mov     [esp+4Ch+var_21], 0
.text:0040390D                 setz    [esp+4Ch+var_22]
.text:00403912                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00403917                 ja      short def_40391D ; jumptable 0040391D default case, cases 0,1
.text:00403919                 mov     edx, [esp+4Ch+arg_10]
.text:0040391D                 jmp     ds:jpt_40391D[edx*4] ; switch jump
.text:0040391D ; ---------------------------------------------------------------------------
.text:00403924 jpt_40391D      dd offset def_40391D    ; DATA XREF: sub_4038E0+3D↑r
.text:00403924                 dd offset def_40391D    ; jump table for switch statement
.text:00403924                 dd offset loc_404265
.text:00403924                 dd offset loc_403940
.text:00403924                 dd offset loc_40428B
.text:00403924                 dd offset loc_404295
.text:00403924                 dd offset loc_404295
.text:00403940 ; ---------------------------------------------------------------------------
.text:00403940
.text:00403940 loc_403940:                             ; CODE XREF: sub_4038E0+3D↑j
.text:00403940                                         ; DATA XREF: sub_4038E0:jpt_40391D↑o
.text:00403940                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040391D case 3
.text:00403944                 cmp     [esp+4Ch+var_34], eax
.text:00403948                 jnb     short loc_403951
.text:0040394A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040394E                 mov     byte ptr [ebx], 22h ; '"'
.text:00403951
.text:00403951 loc_403951:                             ; CODE XREF: sub_4038E0+68↑j
.text:00403951                 mov     [esp+4Ch+var_34], 1
.text:00403959                 mov     [esp+4Ch+var_21], 1
.text:0040395E                 mov     [esp+4Ch+var_1C], offset asc_4038CC ; "\"'`"
.text:00403966
.text:00403966 loc_403966:                             ; CODE XREF: sub_4038E0+9A6↓j
.text:00403966                 mov     [esp+4Ch+var_20], 1
.text:0040396E
.text:0040396E def_40391D:                             ; CODE XREF: sub_4038E0+37↑j
.text:0040396E                                         ; sub_4038E0+3D↑j ...
.text:0040396E                 xor     ebp, ebp        ; jumptable 0040391D default case, cases 0,1
.text:00403970
.text:00403970 loc_403970:                             ; CODE XREF: sub_4038E0+3DB↓j
.text:00403970                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403975                 jz      loc_404257
.text:0040397B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040397F
.text:0040397F loc_40397F:                             ; CODE XREF: sub_4038E0+980↓j
.text:0040397F                 jz      loc_4041EE
.text:00403985                 cmp     [esp+4Ch+var_21], 0
.text:0040398A                 jz      short loc_4039D0
.text:0040398C                 mov     esi, [esp+4Ch+var_20]
.text:00403990                 test    esi, esi
.text:00403992                 jz      short loc_4039D0
.text:00403994                 mov     ecx, [esp+4Ch+var_20]
.text:00403998                 lea     edi, [ecx+ebp]
.text:0040399B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040399F                 ja      short loc_4039D0
.text:004039A1                 cld
.text:004039A2                 mov     ebx, [esp+4Ch+Str]
.text:004039A6                 mov     edi, [esp+4Ch+var_1C]
.text:004039AA                 add     ebx, ebp
.text:004039AC                 mov     esi, ebx
.text:004039AE                 cmp     ecx, ecx
.text:004039B0                 repe cmpsb
.text:004039B2                 jnz     short loc_4039D0
.text:004039B4                 mov     edx, [esp+4Ch+arg_4]
.text:004039B8                 cmp     [esp+4Ch+var_34], edx
.text:004039BC                 jnb     short loc_4039CA
.text:004039BE                 mov     ecx, [esp+4Ch+arg_0]
.text:004039C2                 mov     eax, [esp+4Ch+var_34]
.text:004039C6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004039CA
.text:004039CA loc_4039CA:                             ; CODE XREF: sub_4038E0+DC↑j
.text:004039CA                 inc     [esp+4Ch+var_34]
.text:004039CE                 mov     esi, esi
.text:004039D0
.text:004039D0 loc_4039D0:                             ; CODE XREF: sub_4038E0+AA↑j
.text:004039D0                                         ; sub_4038E0+B2↑j ...
.text:004039D0                 mov     edi, [esp+4Ch+Str]
.text:004039D4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004039D9                 movzx   eax, bl
.text:004039DC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004039DF                 ja      def_4039E5      ; jumptable 004039E5 default case, cases 1-6,14-31,64
.text:004039E5                 jmp     ds:jpt_4039E5[eax*4] ; switch jump
.text:004039E5 ; ---------------------------------------------------------------------------
.text:004039EC jpt_4039E5      dd offset loc_403BE8, offset def_4039E5, offset def_4039E5
.text:004039EC                                         ; DATA XREF: sub_4038E0+105↑r
.text:004039EC                 dd offset def_4039E5, offset def_4039E5, offset def_4039E5 ; jump table for switch statement
.text:004039EC                 dd offset def_4039E5, offset loc_403CC0, offset loc_403CDE
.text:004039EC                 dd offset loc_403CE2, offset loc_403D27, offset loc_403D2B
.text:004039EC                 dd offset loc_403D2F, offset loc_403D33, offset def_4039E5
.text:004039EC                 dd offset def_4039E5, offset def_4039E5, offset def_4039E5
.text:004039EC                 dd offset def_4039E5, offset def_4039E5, offset def_4039E5
.text:004039EC                 dd offset def_4039E5, offset def_4039E5, offset def_4039E5
.text:004039EC                 dd offset def_4039E5, offset def_4039E5, offset def_4039E5
.text:004039EC                 dd offset def_4039E5, offset def_4039E5, offset def_4039E5
.text:004039EC                 dd offset def_4039E5, offset def_4039E5, offset loc_4041B8
.text:004039EC                 dd offset loc_4041B8, offset loc_4041B8, offset loc_4041DA
.text:004039EC                 dd offset loc_4041B8, offset def_403DE2, offset loc_4041B8
.text:004039EC                 dd offset loc_403D37, offset loc_4041B8, offset loc_4041B8
.text:004039EC                 dd offset loc_4041B8, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset loc_4041B8
.text:004039EC                 dd offset loc_4041B8, offset loc_4041B8, offset loc_4041B8
.text:004039EC                 dd offset loc_403D9C, offset def_4039E5, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset loc_4041B8, offset loc_4041B1
.text:004039EC                 dd offset def_403DE2, offset loc_4041B8, offset def_403DE2
.text:004039EC                 dd offset loc_4041B8, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset def_403DE2, offset def_403DE2, offset def_403DE2
.text:004039EC                 dd offset loc_4041C8, offset loc_4041B8, offset loc_4041C8
.text:004039EC                 dd offset loc_4041DA
.text:00403BE8 ; ---------------------------------------------------------------------------
.text:00403BE8
.text:00403BE8 loc_403BE8:                             ; CODE XREF: sub_4038E0+105↑j
.text:00403BE8                                         ; DATA XREF: sub_4038E0:jpt_4039E5↑o
.text:00403BE8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004039E5 case 0
.text:00403BED                 lea     eax, [ebp+1]
.text:00403BF0                 jz      loc_403CA0
.text:00403BF6                 mov     esi, [esp+4Ch+arg_4]
.text:00403BFA                 cmp     [esp+4Ch+var_34], esi
.text:00403BFE                 jnb     short loc_403C0C
.text:00403C00                 mov     eax, [esp+4Ch+arg_0]
.text:00403C04                 mov     ebx, [esp+4Ch+var_34]
.text:00403C08                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00403C0C
.text:00403C0C loc_403C0C:                             ; CODE XREF: sub_4038E0+31E↑j
.text:00403C0C                 inc     [esp+4Ch+var_34]
.text:00403C10                 mov     edx, [esp+4Ch+arg_4]
.text:00403C14                 cmp     [esp+4Ch+var_34], edx
.text:00403C18                 jnb     short loc_403C26
.text:00403C1A                 mov     edi, [esp+4Ch+arg_0]
.text:00403C1E                 mov     ecx, [esp+4Ch+var_34]
.text:00403C22                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00403C26
.text:00403C26 loc_403C26:                             ; CODE XREF: sub_4038E0+338↑j
.text:00403C26                 inc     [esp+4Ch+var_34]
.text:00403C2A                 mov     esi, [esp+4Ch+arg_4]
.text:00403C2E                 cmp     [esp+4Ch+var_34], esi
.text:00403C32                 jnb     short loc_403C40
.text:00403C34                 mov     ebx, [esp+4Ch+arg_0]
.text:00403C38                 mov     eax, [esp+4Ch+var_34]
.text:00403C3C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00403C40
.text:00403C40 loc_403C40:                             ; CODE XREF: sub_4038E0+352↑j
.text:00403C40                 inc     [esp+4Ch+var_34]
.text:00403C44                 mov     bl, 30h ; '0'
.text:00403C46                 lea     esi, [esi+0]
.text:00403C49                 lea     edi, [edi+0]
.text:00403C50
.text:00403C50 def_403DE2:                             ; CODE XREF: sub_4038E0+105↑j
.text:00403C50                                         ; sub_4038E0+463↓j ...
.text:00403C50                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004039E5 cases 37,43-58,65-90,93,95,97-122
.text:00403C50                                         ; jumptable 00403DE2 default case, cases 34-38,42-44,46,48-59
.text:00403C55                 lea     eax, [ebp+1]
.text:00403C58                 jz      short loc_403CA0
.text:00403C5A                 mov     cl, bl
.text:00403C5C                 mov     edi, [esp+4Ch+arg_14]
.text:00403C60                 mov     esi, 1
.text:00403C65                 shr     cl, 5
.text:00403C68                 movzx   edx, cl
.text:00403C6B                 mov     ecx, ebx
.text:00403C6D                 and     ecx, 1Fh
.text:00403C70                 shl     esi, cl
.text:00403C72                 test    [edi+edx*4+4], esi
.text:00403C76                 jz      short loc_403C92
.text:00403C78
.text:00403C78 loc_403C78:                             ; CODE XREF: sub_4038E0+3FC↓j
.text:00403C78                 mov     edx, [esp+4Ch+arg_4]
.text:00403C7C                 cmp     [esp+4Ch+var_34], edx
.text:00403C80                 jnb     short loc_403C8E
.text:00403C82                 mov     edi, [esp+4Ch+arg_0]
.text:00403C86                 mov     esi, [esp+4Ch+var_34]
.text:00403C8A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00403C8E
.text:00403C8E loc_403C8E:                             ; CODE XREF: sub_4038E0+3A0↑j
.text:00403C8E                 inc     [esp+4Ch+var_34]
.text:00403C92
.text:00403C92 loc_403C92:                             ; CODE XREF: sub_4038E0+396↑j
.text:00403C92                 lea     eax, [ebp+1]
.text:00403C95                 lea     esi, [esi+0]
.text:00403C99                 lea     edi, [edi+0]
.text:00403CA0
.text:00403CA0 loc_403CA0:                             ; CODE XREF: sub_4038E0+310↑j
.text:00403CA0                                         ; sub_4038E0+378↑j ...
.text:00403CA0                 mov     ebp, [esp+4Ch+arg_4]
.text:00403CA4                 cmp     [esp+4Ch+var_34], ebp
.text:00403CA8                 jnb     short loc_403CB5
.text:00403CAA                 mov     edx, [esp+4Ch+arg_0]
.text:00403CAE                 mov     ecx, [esp+4Ch+var_34]
.text:00403CB2                 mov     [ecx+edx], bl
.text:00403CB5
.text:00403CB5 loc_403CB5:                             ; CODE XREF: sub_4038E0+3C8↑j
.text:00403CB5                 inc     [esp+4Ch+var_34]
.text:00403CB9                 mov     ebp, eax
.text:00403CBB                 jmp     loc_403970
.text:00403CC0 ; ---------------------------------------------------------------------------
.text:00403CC0
.text:00403CC0 loc_403CC0:                             ; CODE XREF: sub_4038E0+105↑j
.text:00403CC0                                         ; DATA XREF: sub_4038E0:jpt_4039E5↑o
.text:00403CC0                 mov     dl, 61h ; 'a'   ; jumptable 004039E5 case 7
.text:00403CC2                 lea     esi, [esi+0]
.text:00403CC9                 lea     edi, [edi+0]
.text:00403CD0
.text:00403CD0 loc_403CD0:                             ; CODE XREF: sub_4038E0+400↓j
.text:00403CD0                                         ; sub_4038E0+409↓j ...
.text:00403CD0                 cmp     [esp+4Ch+var_21], 0
.text:00403CD5                 lea     eax, [ebp+1]
.text:00403CD8                 jz      short loc_403CA0
.text:00403CDA                 mov     bl, dl
.text:00403CDC                 jmp     short loc_403C78
.text:00403CDE ; ---------------------------------------------------------------------------
.text:00403CDE
.text:00403CDE loc_403CDE:                             ; CODE XREF: sub_4038E0+105↑j
.text:00403CDE                                         ; DATA XREF: sub_4038E0:jpt_4039E5↑o
.text:00403CDE                 mov     dl, 62h ; 'b'   ; jumptable 004039E5 case 8
.text:00403CE0                 jmp     short loc_403CD0
.text:00403CE2 ; ---------------------------------------------------------------------------
.text:00403CE2
.text:00403CE2 loc_403CE2:                             ; CODE XREF: sub_4038E0+105↑j
.text:00403CE2                                         ; DATA XREF: sub_4038E0:jpt_4039E5↑o
.text:00403CE2                 mov     dl, 74h ; 't'   ; jumptable 004039E5 case 9
.text:00403CE4
.text:00403CE4 loc_403CE4:                             ; CODE XREF: sub_4038E0+449↓j
.text:00403CE4                                         ; sub_4038E0+455↓j ...
.text:00403CE4                 cmp     [esp+4Ch+arg_10], 1
.text:00403CE9                 jnz     short loc_403CD0
.text:00403CEB
.text:00403CEB loc_403CEB:                             ; CODE XREF: sub_4038E0+45C↓j
.text:00403CEB                                         ; sub_4038E0+4C1↓j ...
.text:00403CEB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 004040B2 cases 91,92,94,96,124
.text:00403CF3                 mov     eax, [esp+4Ch+arg_14]
.text:00403CF7                 mov     edx, [esp+4Ch+arg_C]
.text:00403CFB                 mov     ecx, [esp+4Ch+Str]
.text:00403CFF                 mov     ebx, [esp+4Ch+arg_4]
.text:00403D03                 mov     [esp+4Ch+var_38], eax ; int
.text:00403D07                 mov     ebp, [esp+4Ch+arg_0]
.text:00403D0B                 mov     [esp+4Ch+State], edx ; int
.text:00403D0F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00403D13                 mov     [esp+4Ch+Type], ebx ; int
.text:00403D17                 mov     [esp+4Ch+C], ebp ; int
.text:00403D1A                 call    sub_4038E0
.text:00403D1F
.text:00403D1F loc_403D1F:                             ; CODE XREF: sub_4038E0+972↓j
.text:00403D1F                 add     esp, 3Ch
.text:00403D22                 pop     ebx
.text:00403D23                 pop     esi
.text:00403D24                 pop     edi
.text:00403D25                 pop     ebp
.text:00403D26                 retn
.text:00403D27 ; ---------------------------------------------------------------------------
.text:00403D27
.text:00403D27 loc_403D27:                             ; CODE XREF: sub_4038E0+105↑j
.text:00403D27                                         ; DATA XREF: sub_4038E0:jpt_4039E5↑o
.text:00403D27                 mov     dl, 6Eh ; 'n'   ; jumptable 004039E5 case 10
.text:00403D29                 jmp     short loc_403CE4
.text:00403D2B ; ---------------------------------------------------------------------------
.text:00403D2B
.text:00403D2B loc_403D2B:                             ; CODE XREF: sub_4038E0+105↑j
.text:00403D2B                                         ; DATA XREF: sub_4038E0:jpt_4039E5↑o
.text:00403D2B                 mov     dl, 76h ; 'v'   ; jumptable 004039E5 case 11
.text:00403D2D                 jmp     short loc_403CD0
.text:00403D2F ; ---------------------------------------------------------------------------
.text:00403D2F
.text:00403D2F loc_403D2F:                             ; CODE XREF: sub_4038E0+105↑j
.text:00403D2F                                         ; DATA XREF: sub_4038E0:jpt_4039E5↑o
.text:00403D2F                 mov     dl, 66h ; 'f'   ; jumptable 004039E5 case 12
.text:00403D31                 jmp     short loc_403CD0
.text:00403D33 ; ---------------------------------------------------------------------------
.text:00403D33
.text:00403D33 loc_403D33:                             ; CODE XREF: sub_4038E0+105↑j
.text:00403D33                                         ; DATA XREF: sub_4038E0:jpt_4039E5↑o
.text:00403D33                 mov     dl, 72h ; 'r'   ; jumptable 004039E5 case 13
.text:00403D35                 jmp     short loc_403CE4
.text:00403D37 ; ---------------------------------------------------------------------------
.text:00403D37
.text:00403D37 loc_403D37:                             ; CODE XREF: sub_4038E0+105↑j
.text:00403D37                                         ; DATA XREF: sub_4038E0:jpt_4039E5↑o
.text:00403D37                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004039E5 case 39
.text:00403D3C                 jz      short loc_403CEB ; jumptable 004040B2 cases 91,92,94,96,124
.text:00403D3E                 cmp     [esp+4Ch+arg_10], 2
.text:00403D43                 jnz     def_403DE2      ; jumptable 004039E5 cases 37,43-58,65-90,93,95,97-122
.text:00403D43                                         ; jumptable 00403DE2 default case, cases 34-38,42-44,46,48-59
.text:00403D49                 mov     edx, [esp+4Ch+arg_4]
.text:00403D4D                 cmp     [esp+4Ch+var_34], edx
.text:00403D51                 jnb     short loc_403D5F
.text:00403D53                 mov     ecx, [esp+4Ch+arg_0]
.text:00403D57                 mov     edi, [esp+4Ch+var_34]
.text:00403D5B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00403D5F
.text:00403D5F loc_403D5F:                             ; CODE XREF: sub_4038E0+471↑j
.text:00403D5F                 inc     [esp+4Ch+var_34]
.text:00403D63                 mov     eax, [esp+4Ch+arg_4]
.text:00403D67                 cmp     [esp+4Ch+var_34], eax
.text:00403D6B                 jnb     short loc_403D79
.text:00403D6D                 mov     esi, [esp+4Ch+arg_0]
.text:00403D71                 mov     edx, [esp+4Ch+var_34]
.text:00403D75                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403D79
.text:00403D79 loc_403D79:                             ; CODE XREF: sub_4038E0+48B↑j
.text:00403D79                 inc     [esp+4Ch+var_34]
.text:00403D7D                 mov     edi, [esp+4Ch+arg_4]
.text:00403D81                 cmp     [esp+4Ch+var_34], edi
.text:00403D85                 jnb     short loc_403D93
.text:00403D87                 mov     ecx, [esp+4Ch+arg_0]
.text:00403D8B                 mov     eax, [esp+4Ch+var_34]
.text:00403D8F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00403D93
.text:00403D93 loc_403D93:                             ; CODE XREF: sub_4038E0+4A5↑j
.text:00403D93                                         ; sub_4038E0+5C4↓j ...
.text:00403D93                 inc     [esp+4Ch+var_34]
.text:00403D97                 jmp     def_403DE2      ; jumptable 004039E5 cases 37,43-58,65-90,93,95,97-122
.text:00403D97                                         ; jumptable 00403DE2 default case, cases 34-38,42-44,46,48-59
.text:00403D9C ; ---------------------------------------------------------------------------
.text:00403D9C
.text:00403D9C loc_403D9C:                             ; CODE XREF: sub_4038E0+105↑j
.text:00403D9C                                         ; DATA XREF: sub_4038E0:jpt_4039E5↑o
.text:00403D9C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004039E5 case 63
.text:00403DA1                 jz      loc_403CEB      ; jumptable 004040B2 cases 91,92,94,96,124
.text:00403DA7                 cmp     [esp+4Ch+arg_10], 3
.text:00403DAC                 jnz     def_403DE2      ; jumptable 004039E5 cases 37,43-58,65-90,93,95,97-122
.text:00403DAC                                         ; jumptable 00403DE2 default case, cases 34-38,42-44,46,48-59
.text:00403DB2                 lea     edx, [ebp+2]
.text:00403DB5                 cmp     edx, [esp+4Ch+arg_C]
.text:00403DB9                 jnb     def_403DE2      ; jumptable 004039E5 cases 37,43-58,65-90,93,95,97-122
.text:00403DB9                                         ; jumptable 00403DE2 default case, cases 34-38,42-44,46,48-59
.text:00403DBF                 mov     esi, [esp+4Ch+Str]
.text:00403DC3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00403DC8                 jnz     def_403DE2      ; jumptable 004039E5 cases 37,43-58,65-90,93,95,97-122
.text:00403DC8                                         ; jumptable 00403DE2 default case, cases 34-38,42-44,46,48-59
.text:00403DCE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00403DD3                 movsx   eax, cl
.text:00403DD6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00403DD9                 cmp     eax, 1Dh
.text:00403DDC                 ja      def_403DE2      ; jumptable 004039E5 cases 37,43-58,65-90,93,95,97-122
.text:00403DDC                                         ; jumptable 00403DE2 default case, cases 34-38,42-44,46,48-59
.text:00403DE2                 jmp     ds:jpt_403DE2[eax*4] ; switch jump
.text:00403DE2 ; ---------------------------------------------------------------------------
.text:00403DE9                 align 4
.text:00403DEC jpt_403DE2      dd offset loc_403E64    ; DATA XREF: sub_4038E0+502↑r
.text:00403DEC                 dd offset def_403DE2    ; jump table for switch statement
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset loc_403E64
.text:00403DEC                 dd offset loc_403E64
.text:00403DEC                 dd offset loc_403E64
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset loc_403E64
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset loc_403E64
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset def_403DE2
.text:00403DEC                 dd offset loc_403E64
.text:00403DEC                 dd offset loc_403E64
.text:00403DEC                 dd offset loc_403E64
.text:00403E64 ; ---------------------------------------------------------------------------
.text:00403E64
.text:00403E64 loc_403E64:                             ; CODE XREF: sub_4038E0+502↑j
.text:00403E64                                         ; DATA XREF: sub_4038E0:jpt_403DE2↑o
.text:00403E64                 mov     ebp, edx        ; jumptable 00403DE2 cases 33,39-41,45,47,60-62
.text:00403E66                 mov     bl, cl
.text:00403E68                 mov     edx, [esp+4Ch+arg_4]
.text:00403E6C                 cmp     [esp+4Ch+var_34], edx
.text:00403E70                 jnb     short loc_403E7E
.text:00403E72                 mov     ecx, [esp+4Ch+arg_0]
.text:00403E76                 mov     edi, [esp+4Ch+var_34]
.text:00403E7A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00403E7E
.text:00403E7E loc_403E7E:                             ; CODE XREF: sub_4038E0+590↑j
.text:00403E7E                 inc     [esp+4Ch+var_34]
.text:00403E82                 mov     eax, [esp+4Ch+arg_4]
.text:00403E86                 cmp     [esp+4Ch+var_34], eax
.text:00403E8A                 jnb     short loc_403E98
.text:00403E8C                 mov     edx, [esp+4Ch+arg_0]
.text:00403E90                 mov     esi, [esp+4Ch+var_34]
.text:00403E94                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00403E98
.text:00403E98 loc_403E98:                             ; CODE XREF: sub_4038E0+5AA↑j
.text:00403E98                 inc     [esp+4Ch+var_34]
.text:00403E9C                 mov     edi, [esp+4Ch+arg_4]
.text:00403EA0                 cmp     [esp+4Ch+var_34], edi
.text:00403EA4                 jnb     loc_403D93
.text:00403EAA                 mov     eax, [esp+4Ch+arg_0]
.text:00403EAE                 mov     ecx, [esp+4Ch+var_34]
.text:00403EB2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00403EB6                 jmp     loc_403D93
.text:00403EB6 ; ---------------------------------------------------------------------------
.text:00403EBB                 align 10h
.text:00403EC0
.text:00403EC0 def_4039E5:                             ; CODE XREF: sub_4038E0+FF↑j
.text:00403EC0                                         ; sub_4038E0+105↑j
.text:00403EC0                                         ; DATA XREF: ...
.text:00403EC0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004039E5 default case, cases 1-6,14-31,64
.text:00403EC5                 jz      loc_403FF0
.text:00403ECB                 mov     [esp+4Ch+var_28], 1
.text:00403ED3                 mov     esi, ds:__mb_cur_max
.text:00403ED9                 movzx   edx, bl
.text:00403EDC                 cmp     dword ptr [esi], 1
.text:00403EDF                 jz      loc_403FD4
.text:00403EE5                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403EED                 mov     [esp+4Ch+C], edx ; C
.text:00403EF0                 call    _isctype
.text:00403EF5
.text:00403EF5 loc_403EF5:                             ; CODE XREF: sub_4038E0+705↓j
.text:00403EF5                 test    eax, eax
.text:00403EF7                 setnz   [esp+4Ch+var_29]
.text:00403EFC
.text:00403EFC loc_403EFC:                             ; CODE XREF: sub_4038E0+7A5↓j
.text:00403EFC                 cmp     [esp+4Ch+var_21], 0
.text:00403F01                 lea     eax, [ebp+1]
.text:00403F04                 jz      loc_403CA0
.text:00403F0A                 cmp     [esp+4Ch+var_29], 0
.text:00403F0F                 jnz     def_403DE2      ; jumptable 004039E5 cases 37,43-58,65-90,93,95,97-122
.text:00403F0F                                         ; jumptable 00403DE2 default case, cases 34-38,42-44,46,48-59
.text:00403F15
.text:00403F15 loc_403F15:                             ; CODE XREF: sub_4038E0+7AB↓j
.text:00403F15                 mov     eax, [esp+4Ch+var_28]
.text:00403F19                 lea     edx, [eax+ebp]
.text:00403F1C                 lea     esi, [esi+0]
.text:00403F20
.text:00403F20 loc_403F20:                             ; CODE XREF: sub_4038E0+6EF↓j
.text:00403F20                 cmp     [esp+4Ch+var_21], 0
.text:00403F25                 jz      short loc_403FA0
.text:00403F27                 cmp     [esp+4Ch+var_29], 0
.text:00403F2C                 jnz     short loc_403FA0
.text:00403F2E                 mov     edi, [esp+4Ch+arg_4]
.text:00403F32                 cmp     [esp+4Ch+var_34], edi
.text:00403F36                 jnb     short loc_403F44
.text:00403F38                 mov     esi, [esp+4Ch+arg_0]
.text:00403F3C                 mov     eax, [esp+4Ch+var_34]
.text:00403F40                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00403F44
.text:00403F44 loc_403F44:                             ; CODE XREF: sub_4038E0+656↑j
.text:00403F44                 inc     [esp+4Ch+var_34]
.text:00403F48                 mov     ecx, [esp+4Ch+arg_4]
.text:00403F4C                 cmp     [esp+4Ch+var_34], ecx
.text:00403F50                 jnb     short loc_403F65
.text:00403F52                 mov     cl, bl
.text:00403F54                 mov     esi, [esp+4Ch+arg_0]
.text:00403F58                 mov     edi, [esp+4Ch+var_34]
.text:00403F5C                 shr     cl, 6
.text:00403F5F                 add     cl, 30h ; '0'
.text:00403F62                 mov     [edi+esi], cl
.text:00403F65
.text:00403F65 loc_403F65:                             ; CODE XREF: sub_4038E0+670↑j
.text:00403F65                 inc     [esp+4Ch+var_34]
.text:00403F69                 mov     edi, [esp+4Ch+arg_4]
.text:00403F6D                 cmp     [esp+4Ch+var_34], edi
.text:00403F71                 jnb     short loc_403F89
.text:00403F73                 mov     cl, bl
.text:00403F75                 mov     esi, [esp+4Ch+arg_0]
.text:00403F79                 shr     cl, 3
.text:00403F7C                 mov     edi, [esp+4Ch+var_34]
.text:00403F80                 and     cl, 7
.text:00403F83                 add     cl, 30h ; '0'
.text:00403F86                 mov     [edi+esi], cl
.text:00403F89
.text:00403F89 loc_403F89:                             ; CODE XREF: sub_4038E0+691↑j
.text:00403F89                 inc     [esp+4Ch+var_34]
.text:00403F8D                 and     bl, 7
.text:00403F90                 add     bl, 30h ; '0'
.text:00403F93                 lea     esi, [esi+0]
.text:00403F99                 lea     edi, [edi+0]
.text:00403FA0
.text:00403FA0 loc_403FA0:                             ; CODE XREF: sub_4038E0+645↑j
.text:00403FA0                                         ; sub_4038E0+64C↑j
.text:00403FA0                 lea     eax, [ebp+1]
.text:00403FA3                 cmp     edx, eax
.text:00403FA5                 jbe     loc_403CA0
.text:00403FAB                 mov     ebp, [esp+4Ch+arg_4]
.text:00403FAF                 cmp     [esp+4Ch+var_34], ebp
.text:00403FB3                 jnb     short loc_403FC0
.text:00403FB5                 mov     ecx, [esp+4Ch+arg_0]
.text:00403FB9                 mov     edi, [esp+4Ch+var_34]
.text:00403FBD                 mov     [edi+ecx], bl
.text:00403FC0
.text:00403FC0 loc_403FC0:                             ; CODE XREF: sub_4038E0+6D3↑j
.text:00403FC0                 inc     [esp+4Ch+var_34]
.text:00403FC4                 mov     ebp, eax
.text:00403FC6                 mov     eax, [esp+4Ch+Str]
.text:00403FCA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00403FCF                 jmp     loc_403F20
.text:00403FD4 ; ---------------------------------------------------------------------------
.text:00403FD4
.text:00403FD4 loc_403FD4:                             ; CODE XREF: sub_4038E0+5FF↑j
.text:00403FD4                 mov     ecx, ds:_pctype
.text:00403FDA                 mov     edi, [ecx]
.text:00403FDC                 movzx   eax, word ptr [edi+edx*2]
.text:00403FE0                 and     eax, 157h
.text:00403FE5                 jmp     loc_403EF5
.text:00403FE5 ; ---------------------------------------------------------------------------
.text:00403FEA                 align 10h
.text:00403FF0
.text:00403FF0 loc_403FF0:                             ; CODE XREF: sub_4038E0+5E5↑j
.text:00403FF0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403FF5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00403FFD                 mov     [esp+4Ch+var_28], 0
.text:00404005                 mov     [esp+4Ch+var_29], 1
.text:0040400A                 jz      loc_40419C
.text:00404010
.text:00404010 loc_404010:                             ; CODE XREF: sub_4038E0+8CC↓j
.text:00404010                 mov     ecx, [esp+4Ch+arg_C]
.text:00404014                 lea     edx, [esp+4Ch+var_18]
.text:00404018                 mov     edi, [esp+4Ch+Str]
.text:0040401C                 mov     [esp+4Ch+State], edx ; State
.text:00404020                 lea     esi, [esp+4Ch+var_18._State]
.text:00404024                 sub     ecx, ebp
.text:00404026                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040402A                 add     edi, ebp
.text:0040402C                 mov     [esp+4Ch+var_30], edi
.text:00404030                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00404034                 mov     [esp+4Ch+C], esi ; DstCh
.text:00404037                 call    mbrtowc
.text:0040403C                 test    eax, eax
.text:0040403E                 mov     edi, eax
.text:00404040                 jz      short loc_404080
.text:00404042                 cmp     eax, 0FFFFFFFFh
.text:00404045                 jz      loc_404192
.text:0040404B                 cmp     eax, 0FFFFFFFEh
.text:0040404E                 jz      loc_404152
.text:00404054                 cmp     [esp+4Ch+arg_10], 1
.text:00404059                 jz      short loc_404090
.text:0040405B
.text:0040405B loc_40405B:                             ; CODE XREF: sub_4038E0+7B9↓j
.text:0040405B                                         ; sub_4038E0+86D↓j
.text:0040405B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00404060                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404068                 mov     [esp+4Ch+C], ecx ; C
.text:0040406B                 call    iswctype
.text:00404070                 test    eax, eax
.text:00404072                 jnz     short loc_404079
.text:00404074                 mov     [esp+4Ch+var_29], 0
.text:00404079
.text:00404079 loc_404079:                             ; CODE XREF: sub_4038E0+792↑j
.text:00404079                 mov     [esp+4Ch+var_28], edi
.text:0040407D                 lea     esi, [esi+0]
.text:00404080
.text:00404080 loc_404080:                             ; CODE XREF: sub_4038E0+760↑j
.text:00404080                                         ; sub_4038E0+87B↓j ...
.text:00404080                 cmp     [esp+4Ch+var_28], 1
.text:00404085                 jbe     loc_403EFC
.text:0040408B                 jmp     loc_403F15
.text:00404090 ; ---------------------------------------------------------------------------
.text:00404090
.text:00404090 loc_404090:                             ; CODE XREF: sub_4038E0+779↑j
.text:00404090                 cmp     [esp+4Ch+arg_10], eax
.text:00404094                 mov     edx, 1
.text:00404099                 jnb     short loc_40405B
.text:0040409B
.text:0040409B loc_40409B:                             ; CODE XREF: sub_4038E0+867↓j
.text:0040409B                 mov     ecx, [esp+4Ch+Str]
.text:0040409F                 lea     esi, [edx+ebp]
.text:004040A2                 movsx   eax, byte ptr [esi+ecx]
.text:004040A6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:004040A9                 cmp     eax, 21h
.text:004040AC                 ja      def_4040B2      ; jumptable 004040B2 default case, cases 93,95,97-123
.text:004040B2                 jmp     ds:jpt_4040B2[eax*4] ; switch jump
.text:004040B2 ; ---------------------------------------------------------------------------
.text:004040B9                 align 4
.text:004040BC jpt_4040B2      dd offset loc_403CEB    ; DATA XREF: sub_4038E0+7D2↑r
.text:004040BC                 dd offset loc_403CEB    ; jump table for switch statement
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset loc_403CEB
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset loc_403CEB
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset def_4040B2
.text:004040BC                 dd offset loc_403CEB
.text:00404144 ; ---------------------------------------------------------------------------
.text:00404144
.text:00404144 def_4040B2:                             ; CODE XREF: sub_4038E0+7CC↑j
.text:00404144                                         ; sub_4038E0+7D2↑j
.text:00404144                                         ; DATA XREF: ...
.text:00404144                 inc     edx             ; jumptable 004040B2 default case, cases 93,95,97-123
.text:00404145                 cmp     edx, edi
.text:00404147                 jb      loc_40409B
.text:0040414D                 jmp     loc_40405B
.text:00404152 ; ---------------------------------------------------------------------------
.text:00404152
.text:00404152 loc_404152:                             ; CODE XREF: sub_4038E0+76E↑j
.text:00404152                 cmp     ebp, [esp+4Ch+arg_C]
.text:00404156                 mov     [esp+4Ch+var_29], 0
.text:0040415B                 jnb     loc_404080
.text:00404161                 mov     eax, [esp+4Ch+var_30]
.text:00404165                 cmp     byte ptr [eax], 0
.text:00404168                 jz      loc_404080
.text:0040416E
.text:0040416E loc_40416E:                             ; CODE XREF: sub_4038E0+8AB↓j
.text:0040416E                 inc     [esp+4Ch+var_28]
.text:00404172                 mov     esi, [esp+4Ch+var_28]
.text:00404176                 lea     eax, [esi+ebp]
.text:00404179                 cmp     eax, [esp+4Ch+arg_C]
.text:0040417D                 jnb     loc_404080
.text:00404183                 mov     edi, [esp+4Ch+Str]
.text:00404187                 cmp     byte ptr [eax+edi], 0
.text:0040418B                 jnz     short loc_40416E
.text:0040418D                 jmp     loc_404080
.text:00404192 ; ---------------------------------------------------------------------------
.text:00404192
.text:00404192 loc_404192:                             ; CODE XREF: sub_4038E0+765↑j
.text:00404192                 mov     [esp+4Ch+var_29], 0
.text:00404197                 jmp     loc_404080
.text:0040419C ; ---------------------------------------------------------------------------
.text:0040419C
.text:0040419C loc_40419C:                             ; CODE XREF: sub_4038E0+72A↑j
.text:0040419C                 mov     edx, [esp+4Ch+Str]
.text:004041A0                 mov     [esp+4Ch+C], edx ; Str
.text:004041A3                 call    strlen
.text:004041A8                 mov     [esp+4Ch+arg_C], eax
.text:004041AC                 jmp     loc_404010
.text:004041B1 ; ---------------------------------------------------------------------------
.text:004041B1
.text:004041B1 loc_4041B1:                             ; CODE XREF: sub_4038E0+105↑j
.text:004041B1                                         ; DATA XREF: sub_4038E0:jpt_4039E5↑o
.text:004041B1                 mov     dl, bl          ; jumptable 004039E5 case 92
.text:004041B3                 jmp     loc_403CE4
.text:004041B8 ; ---------------------------------------------------------------------------
.text:004041B8
.text:004041B8 loc_4041B8:                             ; CODE XREF: sub_4038E0+105↑j
.text:004041B8                                         ; sub_4038E0+902↓j
.text:004041B8                                         ; DATA XREF: ...
.text:004041B8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004039E5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004041BD                 jnz     def_403DE2      ; jumptable 004039E5 cases 37,43-58,65-90,93,95,97-122
.text:004041BD                                         ; jumptable 00403DE2 default case, cases 34-38,42-44,46,48-59
.text:004041C3                 jmp     loc_403CEB      ; jumptable 004040B2 cases 91,92,94,96,124
.text:004041C8 ; ---------------------------------------------------------------------------
.text:004041C8
.text:004041C8 loc_4041C8:                             ; CODE XREF: sub_4038E0+105↑j
.text:004041C8                                         ; DATA XREF: sub_4038E0:jpt_4039E5↑o
.text:004041C8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004039E5 cases 123,125
.text:004041CD                 jz      short loc_4041E4
.text:004041CF                 cmp     [esp+4Ch+arg_C], 1
.text:004041D4
.text:004041D4 loc_4041D4:                             ; CODE XREF: sub_4038E0+90C↓j
.text:004041D4                 jnz     def_403DE2      ; jumptable 004039E5 cases 37,43-58,65-90,93,95,97-122
.text:004041D4                                         ; jumptable 00403DE2 default case, cases 34-38,42-44,46,48-59
.text:004041DA
.text:004041DA loc_4041DA:                             ; CODE XREF: sub_4038E0+105↑j
.text:004041DA                                         ; DATA XREF: sub_4038E0:jpt_4039E5↑o
.text:004041DA                 test    ebp, ebp        ; jumptable 004039E5 cases 35,126
.text:004041DC                 jnz     def_403DE2      ; jumptable 004039E5 cases 37,43-58,65-90,93,95,97-122
.text:004041DC                                         ; jumptable 00403DE2 default case, cases 34-38,42-44,46,48-59
.text:004041E2                 jmp     short loc_4041B8 ; jumptable 004039E5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004041E4 ; ---------------------------------------------------------------------------
.text:004041E4
.text:004041E4 loc_4041E4:                             ; CODE XREF: sub_4038E0+8ED↑j
.text:004041E4                 mov     esi, [esp+4Ch+Str]
.text:004041E8                 cmp     byte ptr [esi+1], 0
.text:004041EC                 jmp     short loc_4041D4
.text:004041EE ; ---------------------------------------------------------------------------
.text:004041EE
.text:004041EE loc_4041EE:                             ; CODE XREF: sub_4038E0:loc_40397F↑j
.text:004041EE                 test    ebp, ebp
.text:004041F0                 jnz     short loc_4041FD
.text:004041F2                 cmp     [esp+4Ch+arg_10], 1
.text:004041F7                 jz      loc_403CEB      ; jumptable 004040B2 cases 91,92,94,96,124
.text:004041FD
.text:004041FD loc_4041FD:                             ; CODE XREF: sub_4038E0+910↑j
.text:004041FD                 mov     esi, [esp+4Ch+var_1C]
.text:00404201                 test    esi, esi
.text:00404203                 jz      short loc_404238
.text:00404205                 mov     edi, [esp+4Ch+var_1C]
.text:00404209                 movzx   eax, byte ptr [edi]
.text:0040420C                 test    al, al
.text:0040420E                 jz      short loc_404238
.text:00404210
.text:00404210 loc_404210:                             ; CODE XREF: sub_4038E0+956↓j
.text:00404210                 mov     ebp, [esp+4Ch+arg_4]
.text:00404214                 cmp     [esp+4Ch+var_34], ebp
.text:00404218                 jnb     short loc_404225
.text:0040421A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040421E                 mov     ebx, [esp+4Ch+var_34]
.text:00404222                 mov     [ebx+ecx], al
.text:00404225
.text:00404225 loc_404225:                             ; CODE XREF: sub_4038E0+938↑j
.text:00404225                 inc     [esp+4Ch+var_1C]
.text:00404229                 inc     [esp+4Ch+var_34]
.text:0040422D                 mov     edx, [esp+4Ch+var_1C]
.text:00404231                 movzx   eax, byte ptr [edx]
.text:00404234                 test    al, al
.text:00404236                 jnz     short loc_404210
.text:00404238
.text:00404238 loc_404238:                             ; CODE XREF: sub_4038E0+923↑j
.text:00404238                                         ; sub_4038E0+92E↑j
.text:00404238                 mov     eax, [esp+4Ch+arg_4]
.text:0040423C                 cmp     [esp+4Ch+var_34], eax
.text:00404240                 jnb     short loc_40424E
.text:00404242                 mov     edi, [esp+4Ch+arg_0]
.text:00404246                 mov     esi, [esp+4Ch+var_34]
.text:0040424A                 mov     byte ptr [esi+edi], 0
.text:0040424E
.text:0040424E loc_40424E:                             ; CODE XREF: sub_4038E0+960↑j
.text:0040424E                 mov     eax, [esp+4Ch+var_34]
.text:00404252                 jmp     loc_403D1F
.text:00404257 ; ---------------------------------------------------------------------------
.text:00404257
.text:00404257 loc_404257:                             ; CODE XREF: sub_4038E0+95↑j
.text:00404257                 mov     ebx, [esp+4Ch+Str]
.text:0040425B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00404260                 jmp     loc_40397F
.text:00404265 ; ---------------------------------------------------------------------------
.text:00404265
.text:00404265 loc_404265:                             ; CODE XREF: sub_4038E0+3D↑j
.text:00404265                                         ; DATA XREF: sub_4038E0:jpt_40391D↑o
.text:00404265                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040391D case 2
.text:00404269                 cmp     [esp+4Ch+var_34], edx
.text:0040426D                 jnb     short loc_404276
.text:0040426F                 mov     ecx, [esp+4Ch+arg_0]
.text:00404273                 mov     byte ptr [ecx], 27h ; '''
.text:00404276
.text:00404276 loc_404276:                             ; CODE XREF: sub_4038E0+98D↑j
.text:00404276                 mov     [esp+4Ch+var_34], 1
.text:0040427E                 mov     [esp+4Ch+var_1C], 4038CEh
.text:00404286                 jmp     loc_403966
.text:0040428B ; ---------------------------------------------------------------------------
.text:0040428B
.text:0040428B loc_40428B:                             ; CODE XREF: sub_4038E0+3D↑j
.text:0040428B                                         ; DATA XREF: sub_4038E0:jpt_40391D↑o
.text:0040428B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040391D case 4
.text:00404290                 jmp     def_40391D      ; jumptable 0040391D default case, cases 0,1
.text:00404295 ; ---------------------------------------------------------------------------
.text:00404295
.text:00404295 loc_404295:                             ; CODE XREF: sub_4038E0+3D↑j
.text:00404295                                         ; DATA XREF: sub_4038E0:jpt_40391D↑o
.text:00404295                 mov     [esp+4Ch+C], 4038D0h ; jumptable 0040391D cases 5,6
.text:0040429C                 call    ds:libintl_gettext
.text:004042A2                 cmp     eax, 4038D0h
.text:004042A7                 mov     edi, eax
.text:004042A9                 jz      short loc_404320
.text:004042AB
.text:004042AB loc_4042AB:                             ; CODE XREF: sub_4038E0+A45↓j
.text:004042AB                                         ; sub_4038E0+A4C↓j
.text:004042AB                 mov     [esp+4Ch+C], 4038CEh
.text:004042B2                 call    ds:libintl_gettext
.text:004042B8                 cmp     eax, 4038CEh
.text:004042BD                 mov     edx, eax
.text:004042BF                 jz      short loc_404312
.text:004042C1
.text:004042C1 loc_4042C1:                             ; CODE XREF: sub_4038E0+A37↓j
.text:004042C1                                         ; sub_4038E0+A3E↓j
.text:004042C1                 mov     [esp+4Ch+var_1C], edi
.text:004042C5                 cmp     byte ptr [edi], 0
.text:004042C8                 jz      short loc_4042F8
.text:004042CA
.text:004042CA loc_4042CA:                             ; CODE XREF: sub_4038E0+A16↓j
.text:004042CA                 mov     ecx, [esp+4Ch+arg_4]
.text:004042CE                 cmp     [esp+4Ch+var_34], ecx
.text:004042D2                 jnb     short loc_4042E7
.text:004042D4                 mov     ebp, [esp+4Ch+var_1C]
.text:004042D8                 mov     edi, [esp+4Ch+arg_0]
.text:004042DC                 mov     esi, [esp+4Ch+var_34]
.text:004042E0                 movzx   ebx, byte ptr [ebp+0]
.text:004042E4                 mov     [esi+edi], bl
.text:004042E7
.text:004042E7 loc_4042E7:                             ; CODE XREF: sub_4038E0+9F2↑j
.text:004042E7                 inc     [esp+4Ch+var_1C]
.text:004042EB                 inc     [esp+4Ch+var_34]
.text:004042EF                 mov     eax, [esp+4Ch+var_1C]
.text:004042F3                 cmp     byte ptr [eax], 0
.text:004042F6                 jnz     short loc_4042CA
.text:004042F8
.text:004042F8 loc_4042F8:                             ; CODE XREF: sub_4038E0+9E8↑j
.text:004042F8                 mov     [esp+4Ch+var_21], 1
.text:004042FD                 mov     [esp+4Ch+var_1C], edx
.text:00404301                 mov     [esp+4Ch+C], edx ; Str
.text:00404304                 call    strlen
.text:00404309                 mov     [esp+4Ch+var_20], eax
.text:0040430D                 jmp     def_40391D      ; jumptable 0040391D default case, cases 0,1
.text:00404312 ; ---------------------------------------------------------------------------
.text:00404312
.text:00404312 loc_404312:                             ; CODE XREF: sub_4038E0+9DF↑j
.text:00404312                 cmp     [esp+4Ch+arg_10], 6
.text:00404317                 jnz     short loc_4042C1
.text:00404319                 mov     edx, offset asc_4038CC ; "\"'`"
.text:0040431E                 jmp     short loc_4042C1
.text:00404320 ; ---------------------------------------------------------------------------
.text:00404320
.text:00404320 loc_404320:                             ; CODE XREF: sub_4038E0+9C9↑j
.text:00404320                 cmp     [esp+4Ch+arg_10], 6
.text:00404325                 jnz     short loc_4042AB
.text:00404327                 mov     edi, offset asc_4038CC ; "\"'`"
.text:0040432C                 jmp     loc_4042AB
.text:0040432C sub_4038E0      endp
.text:0040432C
.text:00404331 ; ---------------------------------------------------------------------------
.text:00404331                 jmp     short loc_404340
.text:00404331 ; ---------------------------------------------------------------------------
.text:00404333                 align 10h
.text:00404340
.text:00404340 loc_404340:                             ; CODE XREF: .text:00404331↑j
.text:00404340                 sub     esp, 0Ch
.text:00404343                 mov     [esp+4], ebx
.text:00404347                 mov     [esp+8], esi
.text:0040434B                 call    _errno
.text:00404350                 mov     esi, [eax]
.text:00404352                 mov     dword ptr [esp], 24h ; '$'
.text:00404359                 call    sub_4030C0
.text:0040435E                 mov     edx, [esp+10h]
.text:00404362                 mov     ebx, eax
.text:00404364                 test    edx, edx
.text:00404366                 jz      short loc_4043B1
.text:00404368
.text:00404368 loc_404368:                             ; CODE XREF: .text:004043B6↓j
.text:00404368                 mov     ecx, [edx]
.text:0040436A                 mov     [ebx], ecx
.text:0040436C                 mov     ecx, [edx+4]
.text:0040436F                 mov     [ebx+4], ecx
.text:00404372                 mov     ecx, [edx+8]
.text:00404375                 mov     [ebx+8], ecx
.text:00404378                 mov     ecx, [edx+0Ch]
.text:0040437B                 mov     [ebx+0Ch], ecx
.text:0040437E                 mov     ecx, [edx+10h]
.text:00404381                 mov     [ebx+10h], ecx
.text:00404384                 mov     ecx, [edx+14h]
.text:00404387                 mov     [ebx+14h], ecx
.text:0040438A                 mov     ecx, [edx+18h]
.text:0040438D                 mov     [ebx+18h], ecx
.text:00404390                 mov     ecx, [edx+1Ch]
.text:00404393                 mov     [ebx+1Ch], ecx
.text:00404396                 mov     ecx, [edx+20h]
.text:00404399                 mov     [ebx+20h], ecx
.text:0040439C                 call    _errno
.text:004043A1                 mov     [eax], esi
.text:004043A3                 mov     esi, [esp+8]
.text:004043A7                 mov     eax, ebx
.text:004043A9                 mov     ebx, [esp+4]
.text:004043AD                 add     esp, 0Ch
.text:004043B0                 retn
.text:004043B1 ; ---------------------------------------------------------------------------
.text:004043B1
.text:004043B1 loc_4043B1:                             ; CODE XREF: .text:00404366↑j
.text:004043B1                 mov     edx, offset dword_407140
.text:004043B6                 jmp     short loc_404368
.text:004043B6 ; ---------------------------------------------------------------------------
.text:004043B8                 align 10h
.text:004043C0                 mov     eax, [esp+4]
.text:004043C4                 test    eax, eax
.text:004043C6                 jz      short loc_4043D0
.text:004043C8
.text:004043C8 loc_4043C8:                             ; CODE XREF: .text:004043D5↓j
.text:004043C8                 mov     eax, [eax]
.text:004043CA                 retn
.text:004043CA ; ---------------------------------------------------------------------------
.text:004043CB                 align 10h
.text:004043D0
.text:004043D0 loc_4043D0:                             ; CODE XREF: .text:004043C6↑j
.text:004043D0                 mov     eax, offset dword_407140
.text:004043D5                 jmp     short loc_4043C8
.text:004043D5 ; ---------------------------------------------------------------------------
.text:004043D7                 align 10h
.text:004043E0                 mov     edx, [esp+4]
.text:004043E4                 test    edx, edx
.text:004043E6                 jz      short loc_4043F0
.text:004043E8
.text:004043E8 loc_4043E8:                             ; CODE XREF: .text:004043F5↓j
.text:004043E8                 mov     ecx, [esp+8]
.text:004043EC                 mov     [edx], ecx
.text:004043EE                 retn
.text:004043EE ; ---------------------------------------------------------------------------
.text:004043EF                 align 10h
.text:004043F0
.text:004043F0 loc_4043F0:                             ; CODE XREF: .text:004043E6↑j
.text:004043F0                 mov     edx, offset dword_407140
.text:004043F5                 jmp     short loc_4043E8
.text:004043F5 ; ---------------------------------------------------------------------------
.text:004043F7                 align 10h
.text:00404400                 sub     esp, 8
.text:00404403                 mov     eax, [esp+0Ch]
.text:00404407                 movzx   ecx, byte ptr [esp+10h]
.text:0040440C                 mov     [esp], ebx
.text:0040440F                 mov     ebx, [esp+14h]
.text:00404413                 mov     [esp+4], esi
.text:00404417                 mov     dl, cl
.text:00404419                 shr     dl, 5
.text:0040441C                 movzx   edx, dl
.text:0040441F                 shl     edx, 2
.text:00404422                 test    eax, eax
.text:00404424                 lea     esi, [edx+eax+4]
.text:00404428                 jz      short loc_404450
.text:0040442A
.text:0040442A loc_40442A:                             ; CODE XREF: .text:00404456↓j
.text:0040442A                 mov     edx, [esi]
.text:0040442C                 and     ecx, 1Fh
.text:0040442F                 and     ebx, 1
.text:00404432                 mov     eax, edx
.text:00404434                 shr     eax, cl
.text:00404436                 and     eax, 1
.text:00404439                 xor     ebx, eax
.text:0040443B                 shl     ebx, cl
.text:0040443D                 xor     edx, ebx
.text:0040443F                 mov     [esi], edx
.text:00404441                 mov     ebx, [esp]
.text:00404444                 mov     esi, [esp+4]
.text:00404448                 add     esp, 8
.text:0040444B                 retn
.text:0040444B ; ---------------------------------------------------------------------------
.text:0040444C                 align 10h
.text:00404450
.text:00404450 loc_404450:                             ; CODE XREF: .text:00404428↑j
.text:00404450                 lea     esi, dword_407144[edx]
.text:00404456                 jmp     short loc_40442A
.text:00404456 ; ---------------------------------------------------------------------------
.text:00404458                 align 10h
.text:00404460                 sub     esp, 2Ch
.text:00404463                 mov     [esp+24h], ebx
.text:00404467                 mov     ebx, [esp+40h]
.text:0040446B                 mov     [esp+28h], esi
.text:0040446F                 test    ebx, ebx
.text:00404471                 jz      short loc_4044C0
.text:00404473
.text:00404473 loc_404473:                             ; CODE XREF: .text:004044C5↓j
.text:00404473                 call    _errno
.text:00404478                 mov     esi, [eax]
.text:0040447A                 mov     [esp+14h], ebx
.text:0040447E                 mov     edx, [ebx]
.text:00404480                 mov     ecx, [esp+38h]
.text:00404484                 mov     ebx, [esp+3Ch]
.text:00404488                 mov     [esp+10h], edx
.text:0040448C                 mov     edx, [esp+34h]
.text:00404490                 mov     [esp+0Ch], ebx
.text:00404494                 mov     [esp+8], ecx
.text:00404498                 mov     [esp+4], edx
.text:0040449C                 mov     edx, [esp+30h]
.text:004044A0                 mov     [esp], edx
.text:004044A3                 call    sub_4038E0
.text:004044A8                 mov     ebx, eax
.text:004044AA                 call    _errno
.text:004044AF                 mov     [eax], esi
.text:004044B1                 mov     esi, [esp+28h]
.text:004044B5                 mov     eax, ebx
.text:004044B7                 mov     ebx, [esp+24h]
.text:004044BB                 add     esp, 2Ch
.text:004044BE                 retn
.text:004044BE ; ---------------------------------------------------------------------------
.text:004044BF                 align 10h
.text:004044C0
.text:004044C0 loc_4044C0:                             ; CODE XREF: .text:00404471↑j
.text:004044C0                 mov     ebx, offset dword_407140
.text:004044C5                 jmp     short loc_404473
.text:004044C5 ; ---------------------------------------------------------------------------
.text:004044C7                 align 10h
.text:004044D0                 push    ebp
.text:004044D1                 push    edi
.text:004044D2                 push    esi
.text:004044D3                 push    ebx
.text:004044D4                 sub     esp, 2Ch
.text:004044D7                 mov     ebp, [esp+48h]
.text:004044DB                 call    _errno
.text:004044E0                 mov     edx, [eax]
.text:004044E2                 test    ebp, ebp
.text:004044E4                 mov     ebx, ebp
.text:004044E6                 mov     [esp+28h], edx
.text:004044EA                 jz      loc_4045A0
.text:004044F0
.text:004044F0 loc_4044F0:                             ; CODE XREF: .text:004045A5↓j
.text:004044F0                 call    _errno
.text:004044F5                 mov     edi, [eax]
.text:004044F7                 mov     esi, ebp
.text:004044F9                 mov     [esp+14h], ebx
.text:004044FD                 mov     ecx, [ebx]
.text:004044FF                 mov     dword ptr [esp], 0
.text:00404506                 mov     edx, [esp+44h]
.text:0040450A                 mov     dword ptr [esp+4], 0
.text:00404512                 mov     eax, [esp+40h]
.text:00404516                 mov     [esp+10h], ecx
.text:0040451A                 mov     [esp+0Ch], edx
.text:0040451E                 mov     [esp+8], eax
.text:00404522                 call    sub_4038E0
.text:00404527                 mov     ebx, eax
.text:00404529                 call    _errno
.text:0040452E                 mov     [eax], edi
.text:00404530                 lea     edi, [ebx+1]
.text:00404533                 mov     [esp], edi
.text:00404536                 call    sub_4030C0
.text:0040453B                 mov     [esp+24h], eax
.text:0040453F                 test    ebp, ebp
.text:00404541                 jz      short loc_404592
.text:00404543
.text:00404543 loc_404543:                             ; CODE XREF: .text:00404597↓j
.text:00404543                 call    _errno
.text:00404548                 mov     ebp, [eax]
.text:0040454A                 mov     [esp+14h], esi
.text:0040454E                 mov     ecx, [esi]
.text:00404550                 mov     [esp+4], edi
.text:00404554                 mov     edx, [esp+44h]
.text:00404558                 mov     esi, [esp+24h]
.text:0040455C                 mov     [esp+10h], ecx
.text:00404560                 mov     eax, [esp+40h]
.text:00404564                 mov     [esp+0Ch], edx
.text:00404568                 mov     [esp], esi
.text:0040456B                 mov     [esp+8], eax
.text:0040456F                 call    sub_4038E0
.text:00404574                 call    _errno
.text:00404579                 mov     [eax], ebp
.text:0040457B                 call    _errno
.text:00404580                 mov     ebx, [esp+28h]
.text:00404584                 mov     [eax], ebx
.text:00404586                 mov     eax, [esp+24h]
.text:0040458A                 add     esp, 2Ch
.text:0040458D                 pop     ebx
.text:0040458E                 pop     esi
.text:0040458F                 pop     edi
.text:00404590                 pop     ebp
.text:00404591                 retn
.text:00404592 ; ---------------------------------------------------------------------------
.text:00404592
.text:00404592 loc_404592:                             ; CODE XREF: .text:00404541↑j
.text:00404592                 mov     esi, offset dword_407140
.text:00404597                 jmp     short loc_404543
.text:00404597 ; ---------------------------------------------------------------------------
.text:00404599                 align 10h
.text:004045A0
.text:004045A0 loc_4045A0:                             ; CODE XREF: .text:004044EA↑j
.text:004045A0                 mov     ebx, offset dword_407140
.text:004045A5                 jmp     loc_4044F0
.text:004045A5 ; ---------------------------------------------------------------------------
.text:004045AA                 align 10h
.text:004045B0                 sub     esp, 1Ch
.text:004045B3                 mov     edx, [esp+24h]
.text:004045B7                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:004045BF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004045C7                 mov     [esp+4], edx
.text:004045CB                 mov     edx, [esp+20h]
.text:004045CF                 mov     [esp], edx
.text:004045D2                 call    sub_404A20
.text:004045D7                 add     esp, 1Ch
.text:004045DA                 retn
.text:004045DA ; ---------------------------------------------------------------------------
.text:004045DB                 align 10h
.text:004045E0                 sub     esp, 1Ch
.text:004045E3                 mov     edx, [esp+20h]
.text:004045E7                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:004045EF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004045F7                 mov     [esp+4], edx
.text:004045FB                 mov     dword ptr [esp], 0
.text:00404602                 call    sub_404A20
.text:00404607                 add     esp, 1Ch
.text:0040460A                 retn
.text:0040460A ; ---------------------------------------------------------------------------
.text:0040460B                 align 10h
.text:00404610                 push    ebp
.text:00404611                 xor     eax, eax
.text:00404613                 mov     ecx, 8
.text:00404618                 push    edi
.text:00404619                 push    esi
.text:0040461A                 push    ebx
.text:0040461B                 sub     esp, 0ACh
.text:00404621                 mov     ebp, [esp+0C4h]
.text:00404628                 cld
.text:00404629                 lea     edi, [esp+14h]
.text:0040462D                 mov     [esp+10h], ebp
.text:00404631                 rep stosd
.text:00404633                 mov     eax, [esp+30h]
.text:00404637                 mov     edi, [esp+10h]
.text:0040463B                 mov     esi, [esp+14h]
.text:0040463F                 mov     [esp+60h], eax
.text:00404643                 mov     ebp, [esp+18h]
.text:00404647                 mov     eax, [esp+10h]
.text:0040464B                 mov     [esp+40h], edi
.text:0040464F                 mov     ecx, [esp+28h]
.text:00404653                 mov     edi, [esp+1Ch]
.text:00404657                 mov     [esp+44h], esi
.text:0040465B                 mov     edx, [esp+2Ch]
.text:0040465F                 mov     esi, [esp+20h]
.text:00404663                 mov     [esp+70h], eax
.text:00404667                 mov     ebx, [esp+24h]
.text:0040466B                 mov     eax, [esp+14h]
.text:0040466F                 mov     [esp+48h], ebp
.text:00404673                 mov     [esp+4Ch], edi
.text:00404677                 mov     [esp+50h], esi
.text:0040467B                 mov     [esp+54h], ebx
.text:0040467F                 mov     [esp+58h], ecx
.text:00404683                 mov     [esp+5Ch], edx
.text:00404687                 mov     [esp+74h], eax
.text:0040468B                 mov     [esp+78h], ebp
.text:0040468F                 mov     [esp+7Ch], edi
.text:00404693                 mov     [esp+80h], esi
.text:0040469A                 mov     [esp+84h], ebx
.text:004046A1                 mov     ebx, [esp+30h]
.text:004046A5                 mov     [esp+8Ch], edx
.text:004046AC                 mov     edx, [esp+0C8h]
.text:004046B3                 mov     [esp+88h], ecx
.text:004046BA                 lea     ecx, [esp+70h]
.text:004046BE                 mov     [esp+4], edx
.text:004046C2                 mov     edx, [esp+0C0h]
.text:004046C9                 mov     [esp+90h], ebx
.text:004046D0                 mov     [esp+0Ch], ecx
.text:004046D4                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004046DC                 mov     [esp], edx
.text:004046DF                 call    sub_404A20
.text:004046E4                 add     esp, 0ACh
.text:004046EA                 pop     ebx
.text:004046EB                 pop     esi
.text:004046EC                 pop     edi
.text:004046ED                 pop     ebp
.text:004046EE                 retn
.text:004046EE ; ---------------------------------------------------------------------------
.text:004046EF                 align 10h
.text:004046F0                 push    ebp
.text:004046F1                 xor     eax, eax
.text:004046F3                 mov     ecx, 8
.text:004046F8                 push    edi
.text:004046F9                 push    esi
.text:004046FA                 push    ebx
.text:004046FB                 sub     esp, 0ACh
.text:00404701                 mov     edx, [esp+0C4h]
.text:00404708                 cld
.text:00404709                 lea     edi, [esp+14h]
.text:0040470D                 mov     [esp+10h], edx
.text:00404711                 rep stosd
.text:00404713                 mov     eax, [esp+30h]
.text:00404717                 mov     ebp, [esp+10h]
.text:0040471B                 mov     edi, [esp+14h]
.text:0040471F                 mov     [esp+60h], eax
.text:00404723                 mov     esi, [esp+20h]
.text:00404727                 mov     eax, [esp+10h]
.text:0040472B                 mov     [esp+40h], ebp
.text:0040472F                 mov     ecx, [esp+28h]
.text:00404733                 mov     ebp, [esp+18h]
.text:00404737                 mov     [esp+44h], edi
.text:0040473B                 mov     edx, [esp+2Ch]
.text:0040473F                 mov     edi, [esp+1Ch]
.text:00404743                 mov     [esp+70h], eax
.text:00404747                 mov     ebx, [esp+24h]
.text:0040474B                 mov     eax, [esp+14h]
.text:0040474F                 mov     [esp+48h], ebp
.text:00404753                 mov     [esp+4Ch], edi
.text:00404757                 mov     [esp+50h], esi
.text:0040475B                 mov     [esp+54h], ebx
.text:0040475F                 mov     [esp+58h], ecx
.text:00404763                 mov     [esp+5Ch], edx
.text:00404767                 mov     [esp+74h], eax
.text:0040476B                 mov     [esp+78h], ebp
.text:0040476F                 mov     [esp+7Ch], edi
.text:00404773                 mov     [esp+80h], esi
.text:0040477A                 mov     [esp+84h], ebx
.text:00404781                 mov     esi, [esp+30h]
.text:00404785                 lea     ebx, [esp+70h]
.text:00404789                 mov     [esp+8Ch], edx
.text:00404790                 mov     edx, [esp+0C8h]
.text:00404797                 mov     [esp+88h], ecx
.text:0040479E                 mov     ecx, [esp+0CCh]
.text:004047A5                 mov     [esp+4], edx
.text:004047A9                 mov     edx, [esp+0C0h]
.text:004047B0                 mov     [esp+90h], esi
.text:004047B7                 mov     [esp+0Ch], ebx
.text:004047BB                 mov     [esp+8], ecx
.text:004047BF                 mov     [esp], edx
.text:004047C2                 call    sub_404A20
.text:004047C7                 add     esp, 0ACh
.text:004047CD                 pop     ebx
.text:004047CE                 pop     esi
.text:004047CF                 pop     edi
.text:004047D0                 pop     ebp
.text:004047D1                 retn
.text:004047D1 ; ---------------------------------------------------------------------------
.text:004047D2                 align 10h
.text:004047E0                 push    ebp
.text:004047E1                 xor     eax, eax
.text:004047E3                 mov     ecx, 8
.text:004047E8                 push    edi
.text:004047E9                 push    esi
.text:004047EA                 push    ebx
.text:004047EB                 sub     esp, 0ACh
.text:004047F1                 mov     edi, [esp+0C0h]
.text:004047F8                 cld
.text:004047F9                 mov     [esp+10h], edi
.text:004047FD                 lea     edi, [esp+14h]
.text:00404801                 rep stosd
.text:00404803                 mov     eax, [esp+30h]
.text:00404807                 mov     esi, [esp+10h]
.text:0040480B                 mov     ebx, [esp+14h]
.text:0040480F                 mov     [esp+60h], eax
.text:00404813                 mov     ebp, [esp+18h]
.text:00404817                 mov     eax, [esp+10h]
.text:0040481B                 mov     [esp+40h], esi
.text:0040481F                 mov     edi, [esp+1Ch]
.text:00404823                 mov     esi, [esp+20h]
.text:00404827                 mov     [esp+44h], ebx
.text:0040482B                 mov     ecx, [esp+28h]
.text:0040482F                 mov     edx, [esp+2Ch]
.text:00404833                 mov     [esp+70h], eax
.text:00404837                 mov     ebx, [esp+24h]
.text:0040483B                 mov     eax, [esp+14h]
.text:0040483F                 mov     [esp+48h], ebp
.text:00404843                 mov     [esp+4Ch], edi
.text:00404847                 mov     [esp+50h], esi
.text:0040484B                 mov     [esp+54h], ebx
.text:0040484F                 mov     [esp+58h], ecx
.text:00404853                 mov     [esp+5Ch], edx
.text:00404857                 mov     [esp+74h], eax
.text:0040485B                 mov     [esp+78h], ebp
.text:0040485F                 mov     [esp+7Ch], edi
.text:00404863                 mov     [esp+80h], esi
.text:0040486A                 mov     [esp+84h], ebx
.text:00404871                 mov     [esp+8Ch], edx
.text:00404878                 lea     edx, [esp+70h]
.text:0040487C                 mov     [esp+88h], ecx
.text:00404883                 mov     ecx, [esp+30h]
.text:00404887                 mov     [esp+0Ch], edx
.text:0040488B                 mov     edx, [esp+0C4h]
.text:00404892                 mov     [esp+90h], ecx
.text:00404899                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004048A1                 mov     [esp+4], edx
.text:004048A5                 mov     dword ptr [esp], 0
.text:004048AC                 call    sub_404A20
.text:004048B1                 add     esp, 0ACh
.text:004048B7                 pop     ebx
.text:004048B8                 pop     esi
.text:004048B9                 pop     edi
.text:004048BA                 pop     ebp
.text:004048BB                 retn
.text:004048BB ; ---------------------------------------------------------------------------
.text:004048BC                 align 10h
.text:004048C0                 push    edi
.text:004048C1                 push    esi
.text:004048C2                 push    ebx
.text:004048C3                 sub     esp, 40h
.text:004048C6                 mov     edx, ds:dword_40714C
.text:004048CC                 mov     ebx, ds:dword_407140
.text:004048D2                 mov     esi, ds:dword_407148
.text:004048D8                 mov     edi, ds:dword_407144
.text:004048DE                 mov     [esp+1Ch], edx
.text:004048E2                 mov     ecx, ds:dword_407150
.text:004048E8                 mov     edx, ds:dword_407160
.text:004048EE                 mov     [esp+10h], ebx
.text:004048F2                 mov     ebx, ds:dword_407154
.text:004048F8                 mov     [esp+30h], edx
.text:004048FC                 movzx   edx, byte ptr [esp+54h]
.text:00404901                 mov     [esp+18h], esi
.text:00404905                 mov     esi, ds:dword_40715C
.text:0040490B                 mov     [esp+14h], edi
.text:0040490F                 mov     edi, ds:dword_407158
.text:00404915                 mov     [esp+20h], ecx
.text:00404919                 mov     cl, dl
.text:0040491B                 shr     cl, 5
.text:0040491E                 mov     [esp+24h], ebx
.text:00404922                 movzx   ebx, cl
.text:00404925                 mov     [esp+2Ch], esi
.text:00404929                 lea     esi, [esp+10h]
.text:0040492D                 mov     [esp+28h], edi
.text:00404931                 lea     edi, [esi+ebx*4]
.text:00404934                 mov     ebx, edx
.text:00404936                 mov     edx, [edi+4]
.text:00404939                 and     ebx, 1Fh
.text:0040493C                 mov     cl, bl
.text:0040493E                 mov     eax, edx
.text:00404940                 shr     eax, cl
.text:00404942                 and     eax, 1
.text:00404945                 xor     eax, 1
.text:00404948                 shl     eax, cl
.text:0040494A                 xor     edx, eax
.text:0040494C                 mov     [edi+4], edx
.text:0040494F                 mov     edx, [esp+50h]
.text:00404953                 mov     [esp+0Ch], esi
.text:00404957                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040495F                 mov     [esp+4], edx
.text:00404963                 mov     dword ptr [esp], 0
.text:0040496A                 call    sub_404A20
.text:0040496F                 add     esp, 40h
.text:00404972                 pop     ebx
.text:00404973                 pop     esi
.text:00404974                 pop     edi
.text:00404975                 retn
.text:00404975 ; ---------------------------------------------------------------------------
.text:00404976                 align 10h
.text:00404980
.text:00404980 ; =============== S U B R O U T I N E =======================================
.text:00404980
.text:00404980
.text:00404980 ; int __cdecl sub_404980(char *)
.text:00404980 sub_404980      proc near               ; CODE XREF: sub_402F20+64↑p
.text:00404980
.text:00404980 var_4C          = dword ptr -4Ch
.text:00404980 var_48          = dword ptr -48h
.text:00404980 var_44          = dword ptr -44h
.text:00404980 var_40          = dword ptr -40h
.text:00404980 var_3C          = dword ptr -3Ch
.text:00404980 var_38          = dword ptr -38h
.text:00404980 var_34          = dword ptr -34h
.text:00404980 var_30          = dword ptr -30h
.text:00404980 var_2C          = dword ptr -2Ch
.text:00404980 var_28          = dword ptr -28h
.text:00404980 var_24          = dword ptr -24h
.text:00404980 var_20          = dword ptr -20h
.text:00404980 var_1C          = dword ptr -1Ch
.text:00404980 arg_0           = dword ptr  4
.text:00404980
.text:00404980                 sub     esp, 4Ch
.text:00404983                 mov     ecx, ds:dword_407140
.text:00404989                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00404991                 mov     edx, ds:dword_407144
.text:00404997                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040499E                 mov     [esp+4Ch+var_3C], ecx
.text:004049A2                 mov     ecx, ds:dword_40714C
.text:004049A8                 mov     [esp+4Ch+var_38], edx
.text:004049AC                 mov     edx, ds:dword_407148
.text:004049B2                 mov     [esp+4Ch+var_30], ecx
.text:004049B6                 mov     ecx, ds:dword_407150
.text:004049BC                 mov     eax, edx
.text:004049BE                 shr     eax, 1Ah
.text:004049C1                 and     eax, 1
.text:004049C4                 xor     eax, 1
.text:004049C7                 mov     [esp+4Ch+var_2C], ecx
.text:004049CB                 shl     eax, 1Ah
.text:004049CE                 mov     ecx, ds:dword_407154
.text:004049D4                 xor     edx, eax
.text:004049D6                 mov     [esp+4Ch+var_34], edx
.text:004049DA                 mov     edx, [esp+4Ch+arg_0]
.text:004049DE                 mov     [esp+4Ch+var_28], ecx
.text:004049E2                 mov     ecx, ds:dword_407158
.text:004049E8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004049EC                 mov     [esp+4Ch+var_24], ecx
.text:004049F0                 mov     ecx, ds:dword_40715C
.text:004049F6                 mov     [esp+4Ch+var_20], ecx
.text:004049FA                 mov     ecx, ds:dword_407160
.text:00404A00                 mov     [esp+4Ch+var_1C], ecx
.text:00404A04                 lea     ecx, [esp+4Ch+var_3C]
.text:00404A08                 mov     [esp+4Ch+var_40], ecx ; int
.text:00404A0C                 call    sub_404A20
.text:00404A11                 add     esp, 4Ch
.text:00404A14                 retn
.text:00404A14 sub_404980      endp
.text:00404A14
.text:00404A14 ; ---------------------------------------------------------------------------
.text:00404A15                 align 10h
.text:00404A20
.text:00404A20 ; =============== S U B R O U T I N E =======================================
.text:00404A20
.text:00404A20
.text:00404A20 ; int __cdecl sub_404A20(int, char *, int, int)
.text:00404A20 sub_404A20      proc near               ; CODE XREF: .text:004045D2↑p
.text:00404A20                                         ; .text:00404602↑p ...
.text:00404A20
.text:00404A20 Block           = dword ptr -2Ch
.text:00404A20 var_28          = dword ptr -28h
.text:00404A20 Str             = dword ptr -24h
.text:00404A20 var_20          = dword ptr -20h
.text:00404A20 var_1C          = dword ptr -1Ch
.text:00404A20 var_18          = dword ptr -18h
.text:00404A20 var_14          = dword ptr -14h
.text:00404A20 arg_0           = dword ptr  4
.text:00404A20 arg_4           = dword ptr  8
.text:00404A20 arg_8           = dword ptr  0Ch
.text:00404A20 arg_C           = dword ptr  10h
.text:00404A20
.text:00404A20                 push    ebp
.text:00404A21                 push    edi
.text:00404A22                 push    esi
.text:00404A23                 push    ebx
.text:00404A24                 sub     esp, 1Ch
.text:00404A27                 call    _errno
.text:00404A2C                 mov     edx, [eax]
.text:00404A2E                 mov     eax, [esp+2Ch+arg_0]
.text:00404A32                 mov     [esp+2Ch+var_14], edx
.text:00404A36                 test    eax, eax
.text:00404A38                 js      loc_404BDA
.text:00404A3E                 mov     eax, [esp+2Ch+arg_0]
.text:00404A42                 cmp     dword_406040, eax
.text:00404A48                 ja      short loc_404AC0
.text:00404A4A                 mov     esi, eax
.text:00404A4C                 inc     esi
.text:00404A4D                 cmp     esi, 1FFFFFFFh
.text:00404A53                 ja      loc_404BDF
.text:00404A59                 mov     ebx, off_40604C
.text:00404A5F                 cmp     ebx, offset dword_406044
.text:00404A65                 jz      loc_404BB1
.text:00404A6B
.text:00404A6B loc_404A6B:                             ; CODE XREF: sub_404A20+1B5↓j
.text:00404A6B                 mov     [esp+2Ch+Block], ebx ; void *
.text:00404A6E                 lea     ecx, ds:0[esi*8]
.text:00404A75                 mov     ebp, esi
.text:00404A77                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00404A7B                 call    sub_403150
.text:00404A80                 mov     off_40604C, eax
.text:00404A85                 mov     ebx, dword_406040
.text:00404A8B                 sub     ebp, ebx
.text:00404A8D                 lea     edi, [eax+ebx*8]
.text:00404A90                 lea     eax, ds:0[ebp*8]
.text:00404A97                 cmp     eax, 7
.text:00404A9A                 jbe     short loc_404AB0
.text:00404A9C                 test    edi, 4
.text:00404AA2                 jz      short loc_404AB0
.text:00404AA4                 mov     dword ptr [edi], 0
.text:00404AAA                 sub     eax, 4
.text:00404AAD                 add     edi, 4
.text:00404AB0
.text:00404AB0 loc_404AB0:                             ; CODE XREF: sub_404A20+7A↑j
.text:00404AB0                                         ; sub_404A20+82↑j
.text:00404AB0                 cld
.text:00404AB1                 mov     ecx, eax
.text:00404AB3                 shr     ecx, 2
.text:00404AB6                 xor     eax, eax
.text:00404AB8                 rep stosd
.text:00404ABA                 mov     dword_406040, esi
.text:00404AC0
.text:00404AC0 loc_404AC0:                             ; CODE XREF: sub_404A20+28↑j
.text:00404AC0                 mov     esi, off_40604C
.text:00404AC6                 mov     eax, [esp+2Ch+arg_0]
.text:00404ACA                 mov     ebp, [esi+eax*8]
.text:00404ACD                 mov     edi, [esi+eax*8+4]
.text:00404AD1                 mov     esi, [esp+2Ch+arg_C]
.text:00404AD5                 test    esi, esi
.text:00404AD7                 jz      loc_404BA7
.text:00404ADD
.text:00404ADD loc_404ADD:                             ; CODE XREF: sub_404A20+18C↓j
.text:00404ADD                 call    _errno
.text:00404AE2                 mov     ebx, [eax]
.text:00404AE4                 mov     [esp+2Ch+var_18], esi ; int
.text:00404AE8                 mov     ecx, [esi]
.text:00404AEA                 mov     [esp+2Ch+Block], edi ; int
.text:00404AED                 mov     edx, [esp+2Ch+arg_8]
.text:00404AF1                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404AF5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404AF9                 mov     ecx, [esp+2Ch+arg_4]
.text:00404AFD                 mov     [esp+2Ch+var_20], edx ; int
.text:00404B01                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404B05                 call    sub_4038E0
.text:00404B0A                 mov     esi, eax
.text:00404B0C                 call    _errno
.text:00404B11                 mov     [eax], ebx
.text:00404B13                 cmp     ebp, esi
.text:00404B15                 ja      short loc_404B8B
.text:00404B17                 lea     ebp, [esi+1]
.text:00404B1A                 mov     ebx, off_40604C
.text:00404B20                 cmp     edi, offset unk_407040
.text:00404B26                 mov     esi, [esp+2Ch+arg_0]
.text:00404B2A                 mov     [ebx+esi*8], ebp
.text:00404B2D                 jz      short loc_404B3D
.text:00404B2F                 mov     [esp+2Ch+Block], edi ; Block
.text:00404B32                 call    free
.text:00404B37                 mov     ebx, off_40604C
.text:00404B3D
.text:00404B3D loc_404B3D:                             ; CODE XREF: sub_404A20+10D↑j
.text:00404B3D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00404B40                 call    sub_4030C0
.text:00404B45                 mov     esi, [esp+2Ch+arg_C]
.text:00404B49                 mov     edi, eax
.text:00404B4B                 mov     eax, [esp+2Ch+arg_0]
.text:00404B4F                 test    esi, esi
.text:00404B51                 mov     [ebx+eax*8+4], edi
.text:00404B55                 jz      short loc_404BA0
.text:00404B57
.text:00404B57 loc_404B57:                             ; CODE XREF: sub_404A20+185↓j
.text:00404B57                 call    _errno
.text:00404B5C                 mov     ebx, [eax]
.text:00404B5E                 mov     [esp+2Ch+var_18], esi ; int
.text:00404B62                 mov     ecx, [esi]
.text:00404B64                 mov     [esp+2Ch+Block], edi ; int
.text:00404B67                 mov     edx, [esp+2Ch+arg_8]
.text:00404B6B                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404B6F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404B73                 mov     ecx, [esp+2Ch+arg_4]
.text:00404B77                 mov     [esp+2Ch+var_20], edx ; int
.text:00404B7B                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404B7F                 call    sub_4038E0
.text:00404B84                 call    _errno
.text:00404B89                 mov     [eax], ebx
.text:00404B8B
.text:00404B8B loc_404B8B:                             ; CODE XREF: sub_404A20+F5↑j
.text:00404B8B                 call    _errno
.text:00404B90                 mov     ebp, [esp+2Ch+var_14]
.text:00404B94                 mov     [eax], ebp
.text:00404B96                 add     esp, 1Ch
.text:00404B99                 mov     eax, edi
.text:00404B9B                 pop     ebx
.text:00404B9C                 pop     esi
.text:00404B9D                 pop     edi
.text:00404B9E                 pop     ebp
.text:00404B9F                 retn
.text:00404BA0 ; ---------------------------------------------------------------------------
.text:00404BA0
.text:00404BA0 loc_404BA0:                             ; CODE XREF: sub_404A20+135↑j
.text:00404BA0                 mov     esi, offset dword_407140
.text:00404BA5                 jmp     short loc_404B57
.text:00404BA7 ; ---------------------------------------------------------------------------
.text:00404BA7
.text:00404BA7 loc_404BA7:                             ; CODE XREF: sub_404A20+B7↑j
.text:00404BA7                 mov     esi, offset dword_407140
.text:00404BAC                 jmp     loc_404ADD
.text:00404BB1 ; ---------------------------------------------------------------------------
.text:00404BB1
.text:00404BB1 loc_404BB1:                             ; CODE XREF: sub_404A20+45↑j
.text:00404BB1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00404BB8                 call    sub_4030C0
.text:00404BBD                 mov     off_40604C, eax
.text:00404BC2                 mov     edi, dword_406044
.text:00404BC8                 mov     ebx, eax
.text:00404BCA                 mov     ecx, off_406048
.text:00404BD0                 mov     [eax], edi
.text:00404BD2                 mov     [eax+4], ecx
.text:00404BD5                 jmp     loc_404A6B
.text:00404BDA ; ---------------------------------------------------------------------------
.text:00404BDA
.text:00404BDA loc_404BDA:                             ; CODE XREF: sub_404A20+18↑j
.text:00404BDA                 call    abort
.text:00404BDF ; ---------------------------------------------------------------------------
.text:00404BDF
.text:00404BDF loc_404BDF:                             ; CODE XREF: sub_404A20+33↑j
.text:00404BDF                 call    sub_404C10
.text:00404BDF sub_404A20      endp
.text:00404BDF
.text:00404BDF ; ---------------------------------------------------------------------------
.text:00404BE4                 align 10h
.text:00404BF0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_404C10+3↓o
.text:00404C01 ; const char aS_2[]
.text:00404C01 aS_2            db '%s',0               ; DATA XREF: sub_404C10+10↓o
.text:00404C04                 align 10h
.text:00404C10
.text:00404C10 ; =============== S U B R O U T I N E =======================================
.text:00404C10
.text:00404C10 ; Attributes: noreturn
.text:00404C10
.text:00404C10 sub_404C10      proc near               ; CODE XREF: .text:loc_4030B9↑p
.text:00404C10                                         ; sub_4030C0+24↑p ...
.text:00404C10
.text:00404C10 Code            = dword ptr -1Ch
.text:00404C10 ErrorMessage    = dword ptr -18h
.text:00404C10 var_14          = dword ptr -14h
.text:00404C10 var_10          = byte ptr -10h
.text:00404C10
.text:00404C10                 sub     esp, 1Ch
.text:00404C13                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00404C1A                 call    ds:libintl_gettext
.text:00404C20                 mov     [esp+1Ch+var_14], offset aS_2 ; "%s"
.text:00404C28                 mov     edx, Code
.text:00404C2E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404C36                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00404C3A                 mov     [esp+1Ch+Code], edx ; Code
.text:00404C3D                 call    sub_404CA0
.text:00404C42                 call    abort
.text:00404C42 sub_404C10      endp
.text:00404C42
.text:00404C42 ; ---------------------------------------------------------------------------
.text:00404C47                 align 10h
.text:00404C50
.text:00404C50 ; =============== S U B R O U T I N E =======================================
.text:00404C50
.text:00404C50 ; Attributes: thunk
.text:00404C50
.text:00404C50 libintl_bindtextdomain proc near
.text:00404C50                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404C50 libintl_bindtextdomain endp
.text:00404C50
.text:00404C50 ; ---------------------------------------------------------------------------
.text:00404C56                 align 10h
.text:00404C60                 jmp     ds:libintl_textdomain
.text:00404C60 ; ---------------------------------------------------------------------------
.text:00404C66                 align 10h
.text:00404C70                 jmp     ds:libintl_gettext
.text:00404C70 ; ---------------------------------------------------------------------------
.text:00404C76                 align 10h
.text:00404C80 ; const char aS[]
.text:00404C80 aS              db ': %s',0             ; DATA XREF: sub_404CA0+B8↓o
.text:00404C80                                         ; sub_404DA4+122↓o
.text:00404C85 aUnknownSystemE db 'Unknown system error',0
.text:00404C85                                         ; DATA XREF: sub_404CA0:loc_404D6D↓o
.text:00404C85                                         ; sub_404DA4:loc_404EDE↓o
.text:00404C9A ; const char aS_0[]
.text:00404C9A aS_0            db '%s: ',0             ; DATA XREF: sub_404CA0:loc_404D74↓o
.text:00404C9F                 align 10h
.text:00404CA0
.text:00404CA0 ; =============== S U B R O U T I N E =======================================
.text:00404CA0
.text:00404CA0
.text:00404CA0 ; int __cdecl sub_404CA0(int Code, int ErrorMessage, char *, char)
.text:00404CA0 sub_404CA0      proc near               ; CODE XREF: sub_401380+197↑p
.text:00404CA0                                         ; sub_401380+22E↑p ...
.text:00404CA0
.text:00404CA0 Stream          = dword ptr -1Ch
.text:00404CA0 Format          = dword ptr -18h
.text:00404CA0 ArgList         = dword ptr -14h
.text:00404CA0 Code            = dword ptr  4
.text:00404CA0 ErrorMessage    = dword ptr  8
.text:00404CA0 arg_8           = dword ptr  0Ch
.text:00404CA0 arg_C           = byte ptr  10h
.text:00404CA0
.text:00404CA0                 push    esi
.text:00404CA1                 push    ebx
.text:00404CA2                 sub     esp, 14h
.text:00404CA5                 mov     edx, ds:_iob
.text:00404CAB                 mov     esi, [esp+1Ch+Code]
.text:00404CAF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00404CB3                 add     edx, 20h ; ' '
.text:00404CB6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404CB9                 call    fflush
.text:00404CBE                 mov     eax, ds:dword_4071E0
.text:00404CC3                 test    eax, eax
.text:00404CC5                 jz      loc_404D74
.text:00404CCB                 call    eax ; dword_4071E0
.text:00404CCD
.text:00404CCD loc_404CCD:                             ; CODE XREF: sub_404CA0+F7↓j
.text:00404CCD                 lea     edx, [esp+1Ch+arg_C]
.text:00404CD1                 mov     ecx, [esp+1Ch+arg_8]
.text:00404CD5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404CD9                 mov     edx, ds:_iob
.text:00404CDF                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404CE3                 add     edx, 40h ; '@'
.text:00404CE6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404CE9                 call    vfprintf
.text:00404CEE                 inc     ds:dword_4071F0
.text:00404CF4                 test    ebx, ebx
.text:00404CF6                 jnz     short loc_404D42
.text:00404CF8
.text:00404CF8 loc_404CF8:                             ; CODE XREF: sub_404CA0+CB↓j
.text:00404CF8                 mov     edx, ds:_iob
.text:00404CFE                 lea     ecx, [edx+40h]
.text:00404D01                 mov     ebx, [ecx+4]
.text:00404D04                 dec     ebx
.text:00404D05                 test    ebx, ebx
.text:00404D07                 mov     [ecx+4], ebx
.text:00404D0A                 js      short loc_404D30
.text:00404D0C                 mov     ecx, [edx+40h]
.text:00404D0F                 mov     byte ptr [ecx], 0Ah
.text:00404D12                 inc     dword ptr [edx+40h]
.text:00404D15
.text:00404D15 loc_404D15:                             ; CODE XREF: sub_404CA0+A0↓j
.text:00404D15                 mov     edx, ds:_iob
.text:00404D1B                 add     edx, 40h ; '@'
.text:00404D1E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404D21                 call    fflush
.text:00404D26                 test    esi, esi
.text:00404D28                 jnz     short loc_404D9C
.text:00404D2A                 add     esp, 14h
.text:00404D2D                 pop     ebx
.text:00404D2E                 pop     esi
.text:00404D2F                 retn
.text:00404D30 ; ---------------------------------------------------------------------------
.text:00404D30
.text:00404D30 loc_404D30:                             ; CODE XREF: sub_404CA0+6A↑j
.text:00404D30                 mov     [esp+1Ch+Format], ecx ; File
.text:00404D34                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00404D3B                 call    _flsbuf
.text:00404D40                 jmp     short loc_404D15
.text:00404D42 ; ---------------------------------------------------------------------------
.text:00404D42
.text:00404D42 loc_404D42:                             ; CODE XREF: sub_404CA0+56↑j
.text:00404D42                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00404D45                 call    strerror
.text:00404D4A                 test    eax, eax
.text:00404D4C                 jz      short loc_404D6D
.text:00404D4E
.text:00404D4E loc_404D4E:                             ; CODE XREF: sub_404CA0+D2↓j
.text:00404D4E                 mov     [esp+1Ch+ArgList], eax
.text:00404D52                 mov     ebx, ds:_iob
.text:00404D58                 mov     [esp+1Ch+Format], offset aS ; ": %s"
.text:00404D60                 add     ebx, 40h ; '@'
.text:00404D63                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00404D66                 call    fprintf
.text:00404D6B                 jmp     short loc_404CF8
.text:00404D6D ; ---------------------------------------------------------------------------
.text:00404D6D
.text:00404D6D loc_404D6D:                             ; CODE XREF: sub_404CA0+AC↑j
.text:00404D6D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404D72                 jmp     short loc_404D4E
.text:00404D74 ; ---------------------------------------------------------------------------
.text:00404D74
.text:00404D74 loc_404D74:                             ; CODE XREF: sub_404CA0+25↑j
.text:00404D74                 mov     [esp+1Ch+Format], offset aS_0 ; "%s: "
.text:00404D7C                 mov     edx, ds:_iob
.text:00404D82                 mov     ecx, ds:dword_4071B0
.text:00404D88                 add     edx, 40h ; '@'
.text:00404D8B                 mov     [esp+1Ch+ArgList], ecx
.text:00404D8F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404D92                 call    fprintf
.text:00404D97                 jmp     loc_404CCD
.text:00404D9C ; ---------------------------------------------------------------------------
.text:00404D9C
.text:00404D9C loc_404D9C:                             ; CODE XREF: sub_404CA0+88↑j
.text:00404D9C                 mov     [esp+1Ch+Stream], esi ; Code
.text:00404D9F                 call    exit
.text:00404D9F sub_404CA0      endp
.text:00404D9F
.text:00404DA4
.text:00404DA4 ; =============== S U B R O U T I N E =======================================
.text:00404DA4
.text:00404DA4
.text:00404DA4 ; int __cdecl sub_404DA4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00404DA4 sub_404DA4      proc near               ; DATA XREF: sub_404DA4+77↓o
.text:00404DA4
.text:00404DA4 Stream          = dword ptr -28h
.text:00404DA4 Format          = dword ptr -24h
.text:00404DA4 ArgList         = dword ptr -20h
.text:00404DA4 var_1C          = dword ptr -1Ch
.text:00404DA4 Code            = dword ptr  8
.text:00404DA4 ErrorMessage    = dword ptr  0Ch
.text:00404DA4 Str2            = dword ptr  10h
.text:00404DA4 arg_10          = dword ptr  14h
.text:00404DA4 arg_14          = dword ptr  18h
.text:00404DA4 arg_18          = byte ptr  1Ch
.text:00404DA4
.text:00404DA4                 and     eax, 64253A73h
.text:00404DA9                 cmp     ah, [eax]
.text:00404DAB
.text:00404DAB loc_404DAB:                             ; DATA XREF: sub_404DA4:loc_404EE5↓o
.text:00404DAB                 add     ds:55003A73h, ah
.text:00404DB1                 push    edi
.text:00404DB2                 push    esi
.text:00404DB3                 push    ebx
.text:00404DB4                 sub     esp, 1Ch
.text:00404DB7                 mov     edx, ds:dword_407220
.text:00404DBD                 mov     ebp, [esp+28h+Code]
.text:00404DC1                 mov     edi, [esp+28h+ErrorMessage]
.text:00404DC5                 test    edx, edx
.text:00404DC7                 mov     ebx, [esp+28h+Str2]
.text:00404DCB                 mov     esi, [esp+28h+arg_10]
.text:00404DCF                 jz      short loc_404DE9
.text:00404DD1                 cmp     ds:dword_407180, esi
.text:00404DD7                 jz      loc_404F10
.text:00404DDD
.text:00404DDD loc_404DDD:                             ; CODE XREF: sub_404DA4+18D↓j
.text:00404DDD                 mov     ds:Str1, ebx
.text:00404DE3                 mov     ds:dword_407180, esi
.text:00404DE9
.text:00404DE9 loc_404DE9:                             ; CODE XREF: sub_404DA4+2B↑j
.text:00404DE9                 mov     edx, ds:_iob
.text:00404DEF                 add     edx, 20h ; ' '
.text:00404DF2                 mov     [esp+28h+Stream], edx ; Stream
.text:00404DF5                 call    fflush
.text:00404DFA                 mov     eax, ds:dword_4071E0
.text:00404DFF                 test    eax, eax
.text:00404E01                 jz      loc_404EE5
.text:00404E07                 call    eax ; dword_4071E0
.text:00404E09
.text:00404E09 loc_404E09:                             ; CODE XREF: sub_404DA4+164↓j
.text:00404E09                 test    ebx, ebx
.text:00404E0B                 jz      short loc_404E2E
.text:00404E0D                 mov     [esp+28h+ArgList], ebx
.text:00404E11                 mov     ebx, ds:_iob
.text:00404E17                 mov     [esp+28h+var_1C], esi
.text:00404E1B                 mov     [esp+28h+Format], offset sub_404DA4 ; Format
.text:00404E23                 add     ebx, 40h ; '@'
.text:00404E26                 mov     [esp+28h+Stream], ebx ; Stream
.text:00404E29                 call    fprintf
.text:00404E2E
.text:00404E2E loc_404E2E:                             ; CODE XREF: sub_404DA4+67↑j
.text:00404E2E                 mov     esi, ds:_iob
.text:00404E34                 lea     edx, [esp+28h+arg_18]
.text:00404E38                 mov     ecx, [esp+28h+arg_14]
.text:00404E3C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00404E40                 add     esi, 40h ; '@'
.text:00404E43                 mov     [esp+28h+Format], ecx ; Format
.text:00404E47                 mov     [esp+28h+Stream], esi ; Stream
.text:00404E4A                 call    vfprintf
.text:00404E4F                 inc     ds:dword_4071F0
.text:00404E55                 test    edi, edi
.text:00404E57                 jnz     short loc_404EB0
.text:00404E59
.text:00404E59 loc_404E59:                             ; CODE XREF: sub_404DA4+135↓j
.text:00404E59                 mov     edx, ds:_iob
.text:00404E5F                 lea     ecx, [edx+40h]
.text:00404E62                 mov     ebx, [ecx+4]
.text:00404E65                 dec     ebx
.text:00404E66                 test    ebx, ebx
.text:00404E68                 mov     [ecx+4], ebx
.text:00404E6B                 js      short loc_404E97
.text:00404E6D                 mov     esi, [edx+40h]
.text:00404E70                 mov     byte ptr [esi], 0Ah
.text:00404E73                 inc     dword ptr [edx+40h]
.text:00404E76
.text:00404E76 loc_404E76:                             ; CODE XREF: sub_404DA4+103↓j
.text:00404E76                 mov     ecx, ds:_iob
.text:00404E7C                 add     ecx, 40h ; '@'
.text:00404E7F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404E82                 call    fflush
.text:00404E87                 test    ebp, ebp
.text:00404E89                 jnz     loc_404F36
.text:00404E8F
.text:00404E8F loc_404E8F:                             ; CODE XREF: sub_404DA4+173↓j
.text:00404E8F                                         ; sub_404DA4+187↓j
.text:00404E8F                 add     esp, 1Ch
.text:00404E92                 pop     ebx
.text:00404E93                 pop     esi
.text:00404E94                 pop     edi
.text:00404E95                 pop     ebp
.text:00404E96                 retn
.text:00404E97 ; ---------------------------------------------------------------------------
.text:00404E97
.text:00404E97 loc_404E97:                             ; CODE XREF: sub_404DA4+C7↑j
.text:00404E97                 mov     [esp+28h+Format], ecx ; File
.text:00404E9B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00404EA2                 call    _flsbuf
.text:00404EA7                 jmp     short loc_404E76
.text:00404EA7 ; ---------------------------------------------------------------------------
.text:00404EA9                 align 10h
.text:00404EB0
.text:00404EB0 loc_404EB0:                             ; CODE XREF: sub_404DA4+B3↑j
.text:00404EB0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00404EB3                 call    strerror
.text:00404EB8                 test    eax, eax
.text:00404EBA                 jz      short loc_404EDE
.text:00404EBC
.text:00404EBC loc_404EBC:                             ; CODE XREF: sub_404DA4+13F↓j
.text:00404EBC                 mov     [esp+28h+ArgList], eax
.text:00404EC0                 mov     edi, ds:_iob
.text:00404EC6                 mov     [esp+28h+Format], offset aS ; ": %s"
.text:00404ECE                 add     edi, 40h ; '@'
.text:00404ED1                 mov     [esp+28h+Stream], edi ; Stream
.text:00404ED4                 call    fprintf
.text:00404ED9                 jmp     loc_404E59
.text:00404EDE ; ---------------------------------------------------------------------------
.text:00404EDE
.text:00404EDE loc_404EDE:                             ; CODE XREF: sub_404DA4+116↑j
.text:00404EDE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404EE3                 jmp     short loc_404EBC
.text:00404EE5 ; ---------------------------------------------------------------------------
.text:00404EE5
.text:00404EE5 loc_404EE5:                             ; CODE XREF: sub_404DA4+5D↑j
.text:00404EE5                 mov     [esp+28h+Format], (offset loc_404DAB+1) ; Format
.text:00404EED                 mov     ecx, ds:_iob
.text:00404EF3                 mov     edx, ds:dword_4071B0
.text:00404EF9                 add     ecx, 40h ; '@'
.text:00404EFC                 mov     [esp+28h+ArgList], edx
.text:00404F00                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404F03                 call    fprintf
.text:00404F08                 jmp     loc_404E09
.text:00404F08 ; ---------------------------------------------------------------------------
.text:00404F0D                 align 10h
.text:00404F10
.text:00404F10 loc_404F10:                             ; CODE XREF: sub_404DA4+33↑j
.text:00404F10                 mov     eax, ds:Str1
.text:00404F15                 cmp     ebx, eax
.text:00404F17                 jz      loc_404E8F
.text:00404F1D                 mov     [esp+28h+Format], ebx ; Str2
.text:00404F21                 mov     [esp+28h+Stream], eax ; Str1
.text:00404F24                 call    strcmp
.text:00404F29                 test    eax, eax
.text:00404F2B                 jz      loc_404E8F
.text:00404F31                 jmp     loc_404DDD
.text:00404F36 ; ---------------------------------------------------------------------------
.text:00404F36
.text:00404F36 loc_404F36:                             ; CODE XREF: sub_404DA4+E5↑j
.text:00404F36                 mov     [esp+28h+Stream], ebp ; Code
.text:00404F39                 call    exit
.text:00404F39 sub_404DA4      endp ; sp-analysis failed
.text:00404F39
.text:00404F39 ; ---------------------------------------------------------------------------
.text:00404F3E                 align 10h
.text:00404F40
.text:00404F40 ; =============== S U B R O U T I N E =======================================
.text:00404F40
.text:00404F40
.text:00404F40 sub_404F40      proc near               ; CODE XREF: sub_402920+17B↑p
.text:00404F40
.text:00404F40 dwMilliseconds  = dword ptr -0Ch
.text:00404F40 var_8           = dword ptr -8
.text:00404F40 var_4           = dword ptr -4
.text:00404F40 arg_0           = dword ptr  4
.text:00404F40 arg_4           = dword ptr  8
.text:00404F40
.text:00404F40                 sub     esp, 0Ch
.text:00404F43                 mov     eax, [esp+0Ch+arg_0]
.text:00404F47                 mov     [esp+0Ch+var_8], ebx
.text:00404F4B                 mov     ebx, [esp+0Ch+arg_4]
.text:00404F4F                 mov     [esp+0Ch+var_4], esi
.text:00404F53                 mov     ecx, [eax+4]
.text:00404F56                 cmp     ecx, 0F4240h
.text:00404F5C                 ja      short loc_404FA4
.text:00404F5E                 mov     esi, [eax]
.text:00404F60                 mov     edx, 431BDE83h
.text:00404F65                 mov     eax, ecx
.text:00404F67                 imul    edx
.text:00404F69                 imul    esi, 3E8h
.text:00404F6F                 sar     ecx, 1Fh
.text:00404F72                 sar     edx, 12h
.text:00404F75                 sub     edx, ecx
.text:00404F77                 lea     ecx, [edx+esi]
.text:00404F7A                 mov     [esp+0Ch+dwMilliseconds], ecx ; dwMilliseconds
.text:00404F7D                 call    Sleep
.text:00404F82                 sub     esp, 4
.text:00404F85                 test    ebx, ebx
.text:00404F87                 jz      short loc_404F96
.text:00404F89                 mov     dword ptr [ebx], 0
.text:00404F8F                 mov     dword ptr [ebx+4], 0
.text:00404F96
.text:00404F96 loc_404F96:                             ; CODE XREF: sub_404F40+47↑j
.text:00404F96                 xor     eax, eax
.text:00404F98
.text:00404F98 loc_404F98:                             ; CODE XREF: sub_404F40+74↓j
.text:00404F98                 mov     ebx, [esp+0Ch+var_8]
.text:00404F9C                 mov     esi, [esp+0Ch+var_4]
.text:00404FA0                 add     esp, 0Ch
.text:00404FA3                 retn
.text:00404FA4 ; ---------------------------------------------------------------------------
.text:00404FA4
.text:00404FA4 loc_404FA4:                             ; CODE XREF: sub_404F40+1C↑j
.text:00404FA4                 call    _errno
.text:00404FA9                 mov     dword ptr [eax], 16h
.text:00404FAF                 mov     eax, 0FFFFFFFFh
.text:00404FB4                 jmp     short loc_404F98
.text:00404FB4 sub_404F40      endp
.text:00404FB4
.text:00404FB4 ; ---------------------------------------------------------------------------
.text:00404FB6                 align 10h
.text:00404FC0
.text:00404FC0 ; =============== S U B R O U T I N E =======================================
.text:00404FC0
.text:00404FC0
.text:00404FC0 sub_404FC0      proc near               ; CODE XREF: sub_403000+3F↑p
.text:00404FC0
.text:00404FC0 var_1C          = dword ptr -1Ch
.text:00404FC0 var_18          = dword ptr -18h
.text:00404FC0 var_C           = dword ptr -0Ch
.text:00404FC0 var_8           = dword ptr -8
.text:00404FC0 var_4           = dword ptr -4
.text:00404FC0 arg_0           = dword ptr  4
.text:00404FC0 arg_4           = dword ptr  8
.text:00404FC0
.text:00404FC0                 sub     esp, 1Ch
.text:00404FC3                 mov     edx, [esp+1Ch+arg_4]
.text:00404FC7                 mov     [esp+1Ch+var_4], ebx
.text:00404FCB                 mov     ebx, [esp+1Ch+arg_0]
.text:00404FCF                 mov     [esp+1Ch+var_18], edx
.text:00404FD3                 lea     edx, [esp+1Ch+var_C]
.text:00404FD7                 mov     [esp+1Ch+var_1C], edx
.text:00404FDA                 call    sub_405160
.text:00404FDF                 test    eax, eax
.text:00404FE1                 mov     edx, 0FFFFFFFFh
.text:00404FE6                 jnz     short loc_40500A
.text:00404FE8                 mov     ecx, [esp+1Ch+var_C]
.text:00404FEC                 mov     edx, 10624DD3h
.text:00404FF1                 mov     [ebx], ecx
.text:00404FF3                 mov     ecx, [esp+1Ch+var_8]
.text:00404FF7                 mov     eax, ecx
.text:00404FF9                 imul    edx
.text:00404FFB                 mov     eax, ecx
.text:00404FFD                 sar     eax, 1Fh
.text:00405000                 sar     edx, 6
.text:00405003                 sub     edx, eax
.text:00405005                 mov     [ebx+4], edx
.text:00405008                 xor     edx, edx
.text:0040500A
.text:0040500A loc_40500A:                             ; CODE XREF: sub_404FC0+26↑j
.text:0040500A                 mov     ebx, [esp+1Ch+var_4]
.text:0040500E                 mov     eax, edx
.text:00405010                 add     esp, 1Ch
.text:00405013                 retn
.text:00405013 sub_404FC0      endp
.text:00405013
.text:00405013 ; ---------------------------------------------------------------------------
.text:00405014                 align 10h
.text:00405020
.text:00405020 ; =============== S U B R O U T I N E =======================================
.text:00405020
.text:00405020
.text:00405020 sub_405020      proc near               ; CODE XREF: sub_403000+16↑p
.text:00405020
.text:00405020 var_2C          = dword ptr -2Ch
.text:00405020 var_28          = dword ptr -28h
.text:00405020 var_24          = dword ptr -24h
.text:00405020 var_20          = dword ptr -20h
.text:00405020 var_1C          = dword ptr -1Ch
.text:00405020 var_18          = dword ptr -18h
.text:00405020 var_10          = dword ptr -10h
.text:00405020 var_C           = dword ptr -0Ch
.text:00405020 var_8           = dword ptr -8
.text:00405020 var_4           = dword ptr -4
.text:00405020 arg_0           = dword ptr  4
.text:00405020 arg_4           = dword ptr  8
.text:00405020
.text:00405020                 sub     esp, 2Ch
.text:00405023                 mov     eax, [esp+2Ch+arg_0]
.text:00405027                 mov     [esp+2Ch+var_10], ebx
.text:0040502B                 mov     ebx, 0FFFFFFFFh
.text:00405030                 test    eax, eax
.text:00405032                 mov     [esp+2Ch+var_C], esi
.text:00405036                 mov     [esp+2Ch+var_8], edi
.text:0040503A                 mov     [esp+2Ch+var_4], ebp
.text:0040503E                 jz      loc_405130
.text:00405044                 test    eax, eax
.text:00405046                 js      loc_405123
.text:0040504C                 sub     eax, 2
.text:0040504F                 cmp     eax, 1
.text:00405052                 ja      loc_405123
.text:00405058                 mov     ebp, ds:dword_407194
.text:0040505E                 mov     edi, ds:dword_407190
.text:00405064                 mov     eax, ebp
.text:00405066                 or      eax, edi
.text:00405068                 jz      loc_405106
.text:0040506E
.text:0040506E loc_40506E:                             ; CODE XREF: sub_405020+FE↓j
.text:0040506E                 rdtsc
.text:00405070                 mov     [esp+2Ch+var_24], edi
.text:00405074                 mov     ebx, eax
.text:00405076                 mov     esi, edx
.text:00405078                 mov     [esp+2Ch+var_20], ebp
.text:0040507C                 mov     [esp+2Ch+var_2C], eax
.text:0040507F                 mov     [esp+2Ch+var_28], edx
.text:00405083                 call    sub_4056E0
.text:00405088                 mov     edx, [esp+2Ch+arg_4]
.text:0040508C                 mov     [edx], eax
.text:0040508E                 mov     [esp+2Ch+var_2C], ebx
.text:00405091                 mov     ebx, 3B9ACA00h
.text:00405096                 mov     [esp+2Ch+var_24], edi
.text:0040509A                 mov     [esp+2Ch+var_20], ebp
.text:0040509E                 mov     [esp+2Ch+var_28], esi
.text:004050A2                 call    sub_405800
.text:004050A7                 mov     [esp+2Ch+var_1C], eax
.text:004050AB                 mov     eax, [esp+2Ch+var_1C]
.text:004050AF                 mov     [esp+2Ch+var_18], edx
.text:004050B3                 mov     [esp+2Ch+var_24], edi
.text:004050B7                 mul     ebx
.text:004050B9                 mov     ebx, [esp+2Ch+var_18]
.text:004050BD                 mov     [esp+2Ch+var_20], ebp
.text:004050C1                 imul    ebx, 3B9ACA00h
.text:004050C7                 mov     ecx, eax
.text:004050C9                 mov     [esp+2Ch+var_2C], ecx
.text:004050CC                 lea     edx, [ebx+edx]
.text:004050CF                 mov     [esp+2Ch+var_28], edx
.text:004050D3                 call    sub_4056E0
.text:004050D8                 mov     ebx, [esp+2Ch+arg_4]
.text:004050DC                 mov     [ebx+4], eax
.text:004050DF                 xor     ebx, ebx
.text:004050E1                 jmp     short loc_4050F0
.text:004050E1 ; ---------------------------------------------------------------------------
.text:004050E3                 align 10h
.text:004050F0
.text:004050F0 loc_4050F0:                             ; CODE XREF: sub_405020+C1↑j
.text:004050F0                                         ; sub_405020+FC↓j ...
.text:004050F0                 mov     eax, ebx
.text:004050F2                 mov     esi, [esp+2Ch+var_C]
.text:004050F6                 mov     ebx, [esp+2Ch+var_10]
.text:004050FA                 mov     edi, [esp+2Ch+var_8]
.text:004050FE                 mov     ebp, [esp+2Ch+var_4]
.text:00405102                 add     esp, 2Ch
.text:00405105                 retn
.text:00405106 ; ---------------------------------------------------------------------------
.text:00405106
.text:00405106 loc_405106:                             ; CODE XREF: sub_405020+48↑j
.text:00405106                 call    sub_405250
.text:0040510B                 mov     ds:dword_407194, edx
.text:00405111                 mov     edi, eax
.text:00405113                 mov     ebp, edx
.text:00405115                 mov     ds:dword_407190, eax
.text:0040511A                 or      edx, edi
.text:0040511C                 jz      short loc_4050F0
.text:0040511E                 jmp     loc_40506E
.text:00405123 ; ---------------------------------------------------------------------------
.text:00405123
.text:00405123 loc_405123:                             ; CODE XREF: sub_405020+26↑j
.text:00405123                                         ; sub_405020+32↑j
.text:00405123                 call    _errno
.text:00405128                 mov     dword ptr [eax], 16h
.text:0040512E                 jmp     short loc_4050F0
.text:00405130 ; ---------------------------------------------------------------------------
.text:00405130
.text:00405130 loc_405130:                             ; CODE XREF: sub_405020+1E↑j
.text:00405130                 mov     [esp+2Ch+var_28], 0
.text:00405138                 mov     edx, [esp+2Ch+arg_4]
.text:0040513C                 mov     [esp+2Ch+var_2C], edx
.text:0040513F                 call    sub_405160
.text:00405144                 mov     ebx, eax
.text:00405146                 jmp     short loc_4050F0
.text:00405146 sub_405020      endp
.text:00405146
.text:00405146 ; ---------------------------------------------------------------------------
.text:00405148                 align 10h
.text:00405150                 xor     eax, eax
.text:00405152                 retn
.text:00405152 ; ---------------------------------------------------------------------------
.text:00405153                 align 10h
.text:00405160
.text:00405160 ; =============== S U B R O U T I N E =======================================
.text:00405160
.text:00405160
.text:00405160 sub_405160      proc near               ; CODE XREF: sub_404FC0+1A↑p
.text:00405160                                         ; sub_405020+11F↑p
.text:00405160
.text:00405160 lpTimeZoneInformation= dword ptr -0DCh
.text:00405160 var_D8          = dword ptr -0D8h
.text:00405160 var_D4          = dword ptr -0D4h
.text:00405160 var_D0          = dword ptr -0D0h
.text:00405160 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:00405160 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:00405160 arg_0           = dword ptr  4
.text:00405160 arg_4           = dword ptr  8
.text:00405160
.text:00405160                 push    edi
.text:00405161                 push    esi
.text:00405162                 push    ebx
.text:00405163                 sub     esp, 0D0h
.text:00405169                 mov     ebx, [esp+0DCh+arg_4]
.text:00405170                 mov     edi, [esp+0DCh+arg_0]
.text:00405177                 test    ebx, ebx
.text:00405179                 jz      short loc_4051A4
.text:0040517B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040517F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:00405182                 call    GetTimeZoneInformation
.text:00405187                 sub     esp, 4
.text:0040518A                 cmp     eax, 0FFFFFFFFh
.text:0040518D                 jz      loc_405225
.text:00405193                 xor     ecx, ecx
.text:00405195                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:00405199                 cmp     eax, 2
.text:0040519C                 setz    cl
.text:0040519F                 mov     [ebx], esi
.text:004051A1                 mov     [ebx+4], ecx
.text:004051A4
.text:004051A4 loc_4051A4:                             ; CODE XREF: sub_405160+19↑j
.text:004051A4                                         ; sub_405160+E0↓j
.text:004051A4                 test    edi, edi
.text:004051A6                 jz      short loc_405219
.text:004051A8                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:004051AC                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:004051AF                 call    GetSystemTimeAsFileTime
.text:004051B4                 sub     esp, 4
.text:004051B7                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:004051BB                 mov     [esp+0DCh+var_D4], 989680h
.text:004051C3                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:004051C7                 mov     [esp+0DCh+var_D0], 0
.text:004051CF                 add     ebx, 2AC18000h
.text:004051D5                 adc     esi, 0FE624E21h
.text:004051DB                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:004051DF                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:004051E2                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:004051E6                 mov     [esp+0DCh+var_D8], esi
.text:004051EA                 call    sub_4056E0
.text:004051EF                 mov     [edi], eax
.text:004051F1                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:004051F4                 mov     [esp+0DCh+var_D4], 989680h
.text:004051FC                 mov     [esp+0DCh+var_D0], 0
.text:00405204                 mov     [esp+0DCh+var_D8], esi
.text:00405208                 call    sub_405800
.text:0040520D                 lea     ebx, [eax+eax*4]
.text:00405210                 lea     edx, [ebx+ebx*4]
.text:00405213                 shl     edx, 2
.text:00405216                 mov     [edi+4], edx
.text:00405219
.text:00405219 loc_405219:                             ; CODE XREF: sub_405160+46↑j
.text:00405219                 add     esp, 0D0h
.text:0040521F                 xor     eax, eax
.text:00405221                 pop     ebx
.text:00405222                 pop     esi
.text:00405223                 pop     edi
.text:00405224                 retn
.text:00405225 ; ---------------------------------------------------------------------------
.text:00405225
.text:00405225 loc_405225:                             ; CODE XREF: sub_405160+2D↑j
.text:00405225                 mov     dword ptr [ebx], 0
.text:0040522B                 mov     dword ptr [ebx+4], 0
.text:00405232                 call    sub_405540
.text:00405237                 mov     esi, eax
.text:00405239                 call    _errno
.text:0040523E                 mov     [eax], esi
.text:00405240                 jmp     loc_4051A4
.text:00405240 sub_405160      endp
.text:00405240
.text:00405240 ; ---------------------------------------------------------------------------
.text:00405245                 align 10h
.text:00405250
.text:00405250 ; =============== S U B R O U T I N E =======================================
.text:00405250
.text:00405250
.text:00405250 sub_405250      proc near               ; CODE XREF: sub_405020:loc_405106↑p
.text:00405250
.text:00405250 lpFrequency     = dword ptr -0Ch
.text:00405250 var_4           = dword ptr -4
.text:00405250
.text:00405250                 sub     esp, 0Ch
.text:00405253                 mov     edx, dword ptr ds:Frequency+4
.text:00405259                 mov     [esp+0Ch+var_4], ebx
.text:0040525D                 mov     eax, dword ptr ds:Frequency
.text:00405262                 mov     ebx, edx
.text:00405264                 or      ebx, eax
.text:00405266                 jz      short loc_405270
.text:00405268
.text:00405268 loc_405268:                             ; CODE XREF: sub_405250+3E↓j
.text:00405268                                         ; sub_405250+52↓j
.text:00405268                 mov     ebx, [esp+0Ch+var_4]
.text:0040526C                 add     esp, 0Ch
.text:0040526F                 retn
.text:00405270 ; ---------------------------------------------------------------------------
.text:00405270
.text:00405270 loc_405270:                             ; CODE XREF: sub_405250+16↑j
.text:00405270                 mov     [esp+0Ch+lpFrequency], offset Frequency ; lpFrequency
.text:00405277                 call    QueryPerformanceFrequency
.text:0040527C                 sub     esp, 4
.text:0040527F                 test    eax, eax
.text:00405281                 jz      short loc_405290
.text:00405283                 mov     eax, dword ptr ds:Frequency
.text:00405288                 mov     edx, dword ptr ds:Frequency+4
.text:0040528E                 jmp     short loc_405268
.text:00405290 ; ---------------------------------------------------------------------------
.text:00405290
.text:00405290 loc_405290:                             ; CODE XREF: sub_405250+31↑j
.text:00405290                 call    sub_405540
.text:00405295                 mov     ebx, eax
.text:00405297                 call    _errno
.text:0040529C                 mov     [eax], ebx
.text:0040529E                 xor     edx, edx
.text:004052A0                 xor     eax, eax
.text:004052A2                 jmp     short loc_405268
.text:004052A2 sub_405250      endp
.text:004052A2
.text:004052A2 ; ---------------------------------------------------------------------------
.text:004052A4                 align 10h
.text:004052B0
.text:004052B0 ; =============== S U B R O U T I N E =======================================
.text:004052B0
.text:004052B0 ; Attributes: info_from_lumina
.text:004052B0
.text:004052B0 ___get_errno    proc near               ; CODE XREF: sub_405540+B↓p
.text:004052B0
.text:004052B0 arg_0           = dword ptr  4
.text:004052B0
.text:004052B0                 mov     eax, [esp+arg_0]
.text:004052B4                 cmp     eax, 53h ; 'S'
.text:004052B7                 jg      loc_4053B0
.text:004052BD                 cmp     eax, 52h ; 'R'
.text:004052C0                 jge     short loc_405312
.text:004052C2                 cmp     eax, 0Fh
.text:004052C5                 jz      short loc_4052E0
.text:004052C7                 cmp     eax, 0Fh
.text:004052CA                 jg      short loc_405340
.text:004052CC                 cmp     eax, 9
.text:004052CF                 jg      short loc_405320
.text:004052D1                 cmp     eax, 7
.text:004052D4                 jge     short loc_405319
.text:004052D6                 cmp     eax, 3
.text:004052D9                 jg      short loc_4052FA
.text:004052DB                 cmp     eax, 2
.text:004052DE                 jl      short loc_4052F3
.text:004052E0
.text:004052E0 loc_4052E0:                             ; CODE XREF: ___get_errno+15↑j
.text:004052E0                                         ; ___get_errno+9D↓j ...
.text:004052E0                 mov     edx, 2
.text:004052E5                 lea     esi, [esi+0]
.text:004052E9                 lea     edi, [edi+0]
.text:004052F0
.text:004052F0 loc_4052F0:                             ; CODE XREF: ___get_errno+48↓j
.text:004052F0                                         ; ___get_errno+59↓j ...
.text:004052F0                 mov     eax, edx
.text:004052F2                 retn
.text:004052F3 ; ---------------------------------------------------------------------------
.text:004052F3
.text:004052F3 loc_4052F3:                             ; CODE XREF: ___get_errno+2E↑j
.text:004052F3                                         ; ___get_errno+78↓j ...
.text:004052F3                 mov     edx, 16h
.text:004052F8                 jmp     short loc_4052F0
.text:004052FA ; ---------------------------------------------------------------------------
.text:004052FA
.text:004052FA loc_4052FA:                             ; CODE XREF: ___get_errno+29↑j
.text:004052FA                 cmp     eax, 5
.text:004052FD                 jz      short loc_405312
.text:004052FF                 cmp     eax, 5
.text:00405302                 jg      short loc_40530B
.text:00405304                 mov     edx, 18h
.text:00405309                 jmp     short loc_4052F0
.text:0040530B ; ---------------------------------------------------------------------------
.text:0040530B
.text:0040530B loc_40530B:                             ; CODE XREF: ___get_errno+52↑j
.text:0040530B                                         ; ___get_errno+180↓j
.text:0040530B                 mov     edx, 9
.text:00405310                 jmp     short loc_4052F0
.text:00405312 ; ---------------------------------------------------------------------------
.text:00405312
.text:00405312 loc_405312:                             ; CODE XREF: ___get_errno+10↑j
.text:00405312                                         ; ___get_errno+4D↑j ...
.text:00405312                 mov     edx, 0Dh
.text:00405317                 jmp     short loc_4052F0
.text:00405319 ; ---------------------------------------------------------------------------
.text:00405319
.text:00405319 loc_405319:                             ; CODE XREF: ___get_errno+24↑j
.text:00405319                                         ; ___get_errno+73↓j ...
.text:00405319                 mov     edx, 0Ch
.text:0040531E                 jmp     short loc_4052F0
.text:00405320 ; ---------------------------------------------------------------------------
.text:00405320
.text:00405320 loc_405320:                             ; CODE XREF: ___get_errno+1F↑j
.text:00405320                 cmp     eax, 0Dh
.text:00405323                 jg      short loc_405319
.text:00405325                 cmp     eax, 0Ch
.text:00405328                 jge     short loc_4052F3
.text:0040532A                 cmp     eax, 0Ah
.text:0040532D                 mov     edx, 7
.text:00405332                 jz      short loc_4052F0
.text:00405334                 cmp     eax, 0Bh
.text:00405337                 jnz     short loc_4052F3
.text:00405339
.text:00405339 loc_405339:                             ; CODE XREF: ___get_errno+21A↓j
.text:00405339                 mov     edx, 8
.text:0040533E                 jmp     short loc_4052F0
.text:00405340 ; ---------------------------------------------------------------------------
.text:00405340
.text:00405340 loc_405340:                             ; CODE XREF: ___get_errno+1A↑j
.text:00405340                 cmp     eax, 22h ; '"'
.text:00405343                 jg      short loc_405374
.text:00405345                 cmp     eax, 16h
.text:00405348                 jge     short loc_405312
.text:0040534A                 cmp     eax, 12h
.text:0040534D                 jz      short loc_4052E0
.text:0040534F                 cmp     eax, 12h
.text:00405352                 jg      short loc_405365
.text:00405354                 cmp     eax, 10h
.text:00405357                 jz      short loc_405312
.text:00405359                 mov     edx, 12h
.text:0040535E                 cmp     eax, 11h
.text:00405361
.text:00405361 loc_405361:                             ; CODE XREF: ___get_errno+172↓j
.text:00405361                                         ; ___get_errno+24C↓j ...
.text:00405361                 jnz     short loc_4052F3
.text:00405363                 jmp     short loc_4052F0
.text:00405365 ; ---------------------------------------------------------------------------
.text:00405365
.text:00405365 loc_405365:                             ; CODE XREF: ___get_errno+A2↑j
.text:00405365                 cmp     eax, 14h
.text:00405368                 jle     short loc_405312
.text:0040536A
.text:0040536A loc_40536A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040536A                 mov     edx, 10h
.text:0040536F                 jmp     loc_4052F0
.text:00405374 ; ---------------------------------------------------------------------------
.text:00405374
.text:00405374 loc_405374:                             ; CODE XREF: ___get_errno+93↑j
.text:00405374                 cmp     eax, 41h ; 'A'
.text:00405377                 jz      short loc_405312
.text:00405379                 cmp     eax, 41h ; 'A'
.text:0040537C                 jg      short loc_405391
.text:0040537E                 cmp     eax, 24h ; '$'
.text:00405381                 jz      short loc_405312
.text:00405383                 cmp     eax, 35h ; '5'
.text:00405386                 jnz     loc_4052F3
.text:0040538C                 jmp     loc_4052E0
.text:00405391 ; ---------------------------------------------------------------------------
.text:00405391
.text:00405391 loc_405391:                             ; CODE XREF: ___get_errno+CC↑j
.text:00405391                 cmp     eax, 43h ; 'C'
.text:00405394                 jz      loc_4052E0
.text:0040539A                 cmp     eax, 50h ; 'P'
.text:0040539D                 jnz     loc_4052F3
.text:004053A3
.text:004053A3 loc_4053A3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:004053A3                 mov     edx, 11h
.text:004053A8                 jmp     loc_4052F0
.text:004053A8 ; ---------------------------------------------------------------------------
.text:004053AD                 align 10h
.text:004053B0
.text:004053B0 loc_4053B0:                             ; CODE XREF: ___get_errno+7↑j
.text:004053B0                 cmp     eax, 0A1h ; '¡'
.text:004053B5                 jz      loc_4052E0
.text:004053BB                 cmp     eax, 0A1h ; '¡'
.text:004053C0                 jg      loc_405470
.text:004053C6                 cmp     eax, 81h
.text:004053CB                 jg      short loc_405435
.text:004053CD                 cmp     eax, 80h ; '€'
.text:004053D2                 mov     edx, 0Ah
.text:004053D7                 jge     loc_4052F0
.text:004053DD                 cmp     eax, 6Ch ; 'l'
.text:004053E0                 jz      loc_405312
.text:004053E6                 cmp     eax, 6Ch ; 'l'
.text:004053E9                 jg      short loc_405407
.text:004053EB                 cmp     eax, 57h ; 'W'
.text:004053EE                 jz      loc_4052F3
.text:004053F4                 cmp     eax, 59h ; 'Y'
.text:004053F7                 jnz     loc_4052F3
.text:004053FD
.text:004053FD loc_4053FD:                             ; CODE XREF: ___get_errno+1E9↓j
.text:004053FD                                         ; ___get_errno+23C↓j
.text:004053FD                 mov     edx, 0Bh
.text:00405402                 jmp     loc_4052F0
.text:00405407 ; ---------------------------------------------------------------------------
.text:00405407
.text:00405407 loc_405407:                             ; CODE XREF: ___get_errno+139↑j
.text:00405407                 cmp     eax, 70h ; 'p'
.text:0040540A                 mov     edx, 1Ch
.text:0040540F                 jz      loc_4052F0
.text:00405415                 cmp     eax, 70h ; 'p'
.text:00405418                 jg      short loc_405427
.text:0040541A                 mov     edx, 20h ; ' '
.text:0040541F                 cmp     eax, 6Dh ; 'm'
.text:00405422                 jmp     loc_405361
.text:00405427 ; ---------------------------------------------------------------------------
.text:00405427
.text:00405427 loc_405427:                             ; CODE XREF: ___get_errno+168↑j
.text:00405427                 cmp     eax, 72h ; 'r'
.text:0040542A
.text:0040542A loc_40542A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040542A                 jnz     loc_4052F3
.text:00405430                 jmp     loc_40530B
.text:00405435 ; ---------------------------------------------------------------------------
.text:00405435
.text:00405435 loc_405435:                             ; CODE XREF: ___get_errno+11B↑j
.text:00405435                 cmp     eax, 84h ; '„'
.text:0040543A                 jz      loc_405312
.text:00405440                 cmp     eax, 84h ; '„'
.text:00405445                 jg      short loc_40544E
.text:00405447                 cmp     eax, 82h ; '‚'
.text:0040544C                 jmp     short loc_40542A
.text:0040544E ; ---------------------------------------------------------------------------
.text:0040544E
.text:0040544E loc_40544E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040544E                 cmp     eax, 91h ; '‘'
.text:00405453                 mov     edx, 29h ; ')'
.text:00405458                 jz      loc_4052F0
.text:0040545E                 cmp     eax, 9Eh ; 'ž'
.text:00405463
.text:00405463 loc_405463:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00405463                 jnz     loc_4052F3
.text:00405469                 jmp     loc_405312
.text:00405469 ; ---------------------------------------------------------------------------
.text:0040546E                 align 10h
.text:00405470
.text:00405470 loc_405470:                             ; CODE XREF: ___get_errno+110↑j
.text:00405470                 cmp     eax, 0CEh ; 'Î'
.text:00405475                 jz      loc_4052E0
.text:0040547B                 cmp     eax, 0CEh ; 'Î'
.text:00405480                 jg      short loc_4054D0
.text:00405482                 cmp     eax, 0AAh ; 'ª'
.text:00405487                 jz      loc_40536A
.text:0040548D                 cmp     eax, 0AAh ; 'ª'
.text:00405492                 jg      short loc_4054A6
.text:00405494                 cmp     eax, 0A4h ; '¤'
.text:00405499                 jz      loc_4053FD
.text:0040549F                 cmp     eax, 0A7h ; '§'
.text:004054A4                 jmp     short loc_405463
.text:004054A6 ; ---------------------------------------------------------------------------
.text:004054A6
.text:004054A6 loc_4054A6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:004054A6                 cmp     eax, 0B7h ; '·'
.text:004054AB                 jz      loc_4053A3
.text:004054B1                 cmp     eax, 0B7h ; '·'
.text:004054B6                 jl      loc_4052F3
.text:004054BC                 sub     eax, 0BCh ; '¼'
.text:004054C1                 cmp     eax, 0Eh
.text:004054C4                 ja      loc_4052F3
.text:004054CA                 jmp     loc_405339
.text:004054CA ; ---------------------------------------------------------------------------
.text:004054CF                 align 10h
.text:004054D0
.text:004054D0 loc_4054D0:                             ; CODE XREF: ___get_errno+1D0↑j
.text:004054D0                 cmp     eax, 46Bh
.text:004054D5                 mov     edx, 24h ; '$'
.text:004054DA                 jz      loc_4052F0
.text:004054E0                 cmp     eax, 46Bh
.text:004054E5                 jg      short loc_405501
.text:004054E7                 cmp     eax, 0D7h ; '×'
.text:004054EC                 jz      loc_4053FD
.text:004054F2                 mov     edx, 5
.text:004054F7                 cmp     eax, 45Dh
.text:004054FC                 jmp     loc_405361
.text:00405501 ; ---------------------------------------------------------------------------
.text:00405501
.text:00405501 loc_405501:                             ; CODE XREF: ___get_errno+235↑j
.text:00405501                 cmp     eax, 4D5h
.text:00405506                 mov     edx, 4
.text:0040550B                 jz      loc_4052F0
.text:00405511                 cmp     eax, 4D5h
.text:00405516                 jg      short loc_405527
.text:00405518                 mov     edx, 13h
.text:0040551D                 cmp     eax, 4B0h
.text:00405522                 jmp     loc_405361
.text:00405527 ; ---------------------------------------------------------------------------
.text:00405527
.text:00405527 loc_405527:                             ; CODE XREF: ___get_errno+266↑j
.text:00405527                 cmp     eax, 718h
.text:0040552C                 jnz     loc_4052F3
.text:00405532                 jmp     loc_405319
.text:00405532 ___get_errno    endp
.text:00405532
.text:00405532 ; ---------------------------------------------------------------------------
.text:00405537                 align 10h
.text:00405540
.text:00405540 ; =============== S U B R O U T I N E =======================================
.text:00405540
.text:00405540
.text:00405540 sub_405540      proc near               ; CODE XREF: sub_405160+D2↑p
.text:00405540                                         ; sub_405250:loc_405290↑p
.text:00405540
.text:00405540 var_C           = dword ptr -0Ch
.text:00405540
.text:00405540                 sub     esp, 0Ch
.text:00405543                 call    GetLastError
.text:00405548                 mov     [esp+0Ch+var_C], eax
.text:0040554B                 call    ___get_errno
.text:00405550                 add     esp, 0Ch
.text:00405553                 retn
.text:00405553 sub_405540      endp
.text:00405553
.text:00405553 ; ---------------------------------------------------------------------------
.text:00405554                 align 10h
.text:00405560
.text:00405560 ; =============== S U B R O U T I N E =======================================
.text:00405560
.text:00405560 ; Attributes: thunk
.text:00405560
.text:00405560 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00405560 mbrtowc         proc near               ; CODE XREF: sub_4038E0+757↑p
.text:00405560
.text:00405560 DstCh           = dword ptr  4
.text:00405560 SrcCh           = dword ptr  8
.text:00405560 SizeInBytes     = dword ptr  0Ch
.text:00405560 State           = dword ptr  10h
.text:00405560
.text:00405560                 jmp     ds:__imp_mbrtowc
.text:00405560 mbrtowc         endp
.text:00405560
.text:00405560 ; ---------------------------------------------------------------------------
.text:00405566                 align 10h
.text:00405570
.text:00405570 ; =============== S U B R O U T I N E =======================================
.text:00405570
.text:00405570 ; Attributes: bp-based frame
.text:00405570
.text:00405570 sub_405570      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00405570                 push    ebp
.text:00405571                 mov     ecx, offset dword_407000
.text:00405576                 cmp     ecx, offset dword_407000
.text:0040557C                 mov     ebp, esp
.text:0040557E                 jnb     short loc_405596
.text:00405580
.text:00405580 loc_405580:                             ; CODE XREF: sub_405570+24↓j
.text:00405580                 mov     edx, [ecx+4]
.text:00405583                 mov     eax, [ecx]
.text:00405585                 add     ecx, 8
.text:00405588                 add     [edx+400000h], eax
.text:0040558E                 cmp     ecx, offset dword_407000
.text:00405594                 jb      short loc_405580
.text:00405596
.text:00405596 loc_405596:                             ; CODE XREF: sub_405570+E↑j
.text:00405596                 pop     ebp
.text:00405597                 retn
.text:00405597 sub_405570      endp
.text:00405597
.text:00405597 ; ---------------------------------------------------------------------------
.text:00405598                 align 10h
.text:004055A0
.text:004055A0 ; =============== S U B R O U T I N E =======================================
.text:004055A0
.text:004055A0 ; Attributes: bp-based frame
.text:004055A0
.text:004055A0 sub_4055A0      proc near               ; CODE XREF: sub_401080+16↑p
.text:004055A0                                         ; TopLevelExceptionFilter+D7↑p
.text:004055A0                 push    ebp
.text:004055A1                 mov     ebp, esp
.text:004055A3                 fninit
.text:004055A5                 pop     ebp
.text:004055A6                 retn
.text:004055A6 sub_4055A0      endp
.text:004055A6
.text:004055A6 ; ---------------------------------------------------------------------------
.text:004055A7                 align 10h
.text:004055B0
.text:004055B0 ; =============== S U B R O U T I N E =======================================
.text:004055B0
.text:004055B0 ; Attributes: bp-based frame
.text:004055B0
.text:004055B0 ; void __cdecl sub_4055B0()
.text:004055B0 sub_4055B0      proc near               ; DATA XREF: .text:loc_4055F9↓o
.text:004055B0                                         ; sub_405640:loc_40566E↓o
.text:004055B0                 push    ebp
.text:004055B1                 mov     ebp, esp
.text:004055B3                 sub     esp, 8
.text:004055B6                 mov     eax, off_406084
.text:004055BB                 mov     edx, [eax]
.text:004055BD                 test    edx, edx
.text:004055BF                 jnz     short loc_4055C5
.text:004055C1
.text:004055C1 loc_4055C1:                             ; CODE XREF: sub_4055B0+2C↓j
.text:004055C1                 mov     esp, ebp
.text:004055C3                 pop     ebp
.text:004055C4                 retn
.text:004055C5 ; ---------------------------------------------------------------------------
.text:004055C5
.text:004055C5 loc_4055C5:                             ; CODE XREF: sub_4055B0+F↑j
.text:004055C5                                         ; sub_4055B0+2A↓j
.text:004055C5                 call    dword ptr [eax]
.text:004055C7                 mov     edx, off_406084
.text:004055CD                 mov     ecx, [edx+4]
.text:004055D0                 lea     eax, [edx+4]
.text:004055D3                 mov     off_406084, eax
.text:004055D8                 test    ecx, ecx
.text:004055DA                 jnz     short loc_4055C5
.text:004055DC                 jmp     short loc_4055C1
.text:004055DC sub_4055B0      endp
.text:004055DC
.text:004055DC ; ---------------------------------------------------------------------------
.text:004055DE                 align 10h
.text:004055E0                 push    ebp
.text:004055E1                 mov     ebp, esp
.text:004055E3                 sub     esp, 8
.text:004055E6                 mov     [ebp-4], ebx
.text:004055E9                 mov     eax, ds:dword_405C20
.text:004055EE                 cmp     eax, 0FFFFFFFFh
.text:004055F1                 jz      short loc_40561C
.text:004055F3
.text:004055F3 loc_4055F3:                             ; CODE XREF: .text:00405626↓j
.text:004055F3                                         ; .text:00405639↓j
.text:004055F3                 test    eax, eax
.text:004055F5                 mov     ebx, eax
.text:004055F7                 jnz     short loc_405610
.text:004055F9
.text:004055F9 loc_4055F9:                             ; CODE XREF: .text:0040561A↓j
.text:004055F9                 mov     dword ptr [esp], offset sub_4055B0
.text:00405600                 call    sub_401040
.text:00405605                 mov     ebx, [ebp-4]
.text:00405608                 mov     esp, ebp
.text:0040560A                 pop     ebp
.text:0040560B                 retn
.text:0040560B ; ---------------------------------------------------------------------------
.text:0040560C                 align 10h
.text:00405610
.text:00405610 loc_405610:                             ; CODE XREF: .text:004055F7↑j
.text:00405610                                         ; .text:00405618↓j
.text:00405610                 call    ds:dword_405C20[ebx*4]
.text:00405617                 dec     ebx
.text:00405618                 jnz     short loc_405610
.text:0040561A                 jmp     short loc_4055F9
.text:0040561C ; ---------------------------------------------------------------------------
.text:0040561C
.text:0040561C loc_40561C:                             ; CODE XREF: .text:004055F1↑j
.text:0040561C                 mov     ecx, ds:dword_405C24
.text:00405622                 xor     eax, eax
.text:00405624                 test    ecx, ecx
.text:00405626                 jz      short loc_4055F3
.text:00405628                 mov     edx, offset dword_405C20
.text:0040562D                 lea     esi, [esi+0]
.text:00405630
.text:00405630 loc_405630:                             ; CODE XREF: .text:00405637↓j
.text:00405630                 inc     eax
.text:00405631                 mov     ecx, [edx+eax*4+4]
.text:00405635                 test    ecx, ecx
.text:00405637                 jnz     short loc_405630
.text:00405639                 jmp     short loc_4055F3
.text:00405639 ; ---------------------------------------------------------------------------
.text:0040563B                 align 10h
.text:00405640
.text:00405640 ; =============== S U B R O U T I N E =======================================
.text:00405640
.text:00405640 ; Attributes: bp-based frame
.text:00405640
.text:00405640 sub_405640      proc near               ; CODE XREF: sub_401380+16↑p
.text:00405640
.text:00405640 var_8           = dword ptr -8
.text:00405640 var_4           = dword ptr -4
.text:00405640
.text:00405640                 push    ebp
.text:00405641                 mov     ebp, esp
.text:00405643                 sub     esp, 8
.text:00405646                 mov     [ebp+var_4], ebx
.text:00405649                 mov     edx, dword_406080
.text:0040564F                 test    edx, edx
.text:00405651                 jnz     short loc_40567A
.text:00405653                 mov     eax, ds:dword_405C20
.text:00405658                 mov     edx, 1
.text:0040565D                 mov     dword_406080, edx
.text:00405663                 cmp     eax, 0FFFFFFFFh
.text:00405666                 jz      short loc_40568D
.text:00405668
.text:00405668 loc_405668:                             ; CODE XREF: sub_405640+57↓j
.text:00405668                                         ; sub_405640+69↓j
.text:00405668                 test    eax, eax
.text:0040566A                 mov     ebx, eax
.text:0040566C                 jnz     short loc_405681
.text:0040566E
.text:0040566E loc_40566E:                             ; CODE XREF: sub_405640+4B↓j
.text:0040566E                 mov     [esp+8+var_8], offset sub_4055B0 ; void (__cdecl *)()
.text:00405675                 call    sub_401040
.text:0040567A
.text:0040567A loc_40567A:                             ; CODE XREF: sub_405640+11↑j
.text:0040567A                 mov     ebx, [ebp+var_4]
.text:0040567D                 mov     esp, ebp
.text:0040567F                 pop     ebp
.text:00405680                 retn
.text:00405681 ; ---------------------------------------------------------------------------
.text:00405681
.text:00405681 loc_405681:                             ; CODE XREF: sub_405640+2C↑j
.text:00405681                                         ; sub_405640+49↓j
.text:00405681                 call    ds:dword_405C20[ebx*4]
.text:00405688                 dec     ebx
.text:00405689                 jnz     short loc_405681
.text:0040568B                 jmp     short loc_40566E
.text:0040568D ; ---------------------------------------------------------------------------
.text:0040568D
.text:0040568D loc_40568D:                             ; CODE XREF: sub_405640+26↑j
.text:0040568D                 mov     ecx, ds:dword_405C24
.text:00405693                 xor     eax, eax
.text:00405695                 test    ecx, ecx
.text:00405697                 jz      short loc_405668
.text:00405699                 mov     edx, offset dword_405C20
.text:0040569E                 mov     esi, esi
.text:004056A0
.text:004056A0 loc_4056A0:                             ; CODE XREF: sub_405640+67↓j
.text:004056A0                 inc     eax
.text:004056A1                 mov     ebx, [edx+eax*4+4]
.text:004056A5                 test    ebx, ebx
.text:004056A7                 jnz     short loc_4056A0
.text:004056A9                 jmp     short loc_405668
.text:004056A9 sub_405640      endp
.text:004056A9
.text:004056A9 ; ---------------------------------------------------------------------------
.text:004056AB                 align 10h
.text:004056B0
.text:004056B0 ; =============== S U B R O U T I N E =======================================
.text:004056B0
.text:004056B0 ; Attributes: info_from_lumina
.text:004056B0
.text:004056B0 ; void *__cdecl _alloca(size_t Size)
.text:004056B0 __alloca        proc near               ; CODE XREF: sub_401380+11↑p
.text:004056B0                 push    ecx
.text:004056B1                 mov     ecx, esp
.text:004056B3                 add     ecx, 8
.text:004056B6
.text:004056B6 loc_4056B6:                             ; CODE XREF: __alloca+1B↓j
.text:004056B6                 cmp     eax, 1000h
.text:004056BB                 jb      short loc_4056CD
.text:004056BD                 sub     ecx, 1000h
.text:004056C3                 or      dword ptr [ecx], 0
.text:004056C6                 sub     eax, 1000h
.text:004056CB                 jmp     short loc_4056B6
.text:004056CD ; ---------------------------------------------------------------------------
.text:004056CD
.text:004056CD loc_4056CD:                             ; CODE XREF: __alloca+B↑j
.text:004056CD                 sub     ecx, eax
.text:004056CF                 or      dword ptr [ecx], 0
.text:004056D2                 mov     eax, esp
.text:004056D4                 mov     esp, ecx
.text:004056D6                 mov     ecx, [eax]
.text:004056D8                 mov     eax, [eax+4]
.text:004056DB                 jmp     eax
.text:004056DB __alloca        endp
.text:004056DB
.text:004056DB ; ---------------------------------------------------------------------------
.text:004056DD                 align 10h
.text:004056E0
.text:004056E0 ; =============== S U B R O U T I N E =======================================
.text:004056E0
.text:004056E0 ; Attributes: bp-based frame
.text:004056E0
.text:004056E0 sub_4056E0      proc near               ; CODE XREF: sub_405020+63↑p
.text:004056E0                                         ; sub_405020+B3↑p ...
.text:004056E0
.text:004056E0 var_24          = dword ptr -24h
.text:004056E0 var_20          = dword ptr -20h
.text:004056E0 var_1C          = dword ptr -1Ch
.text:004056E0 var_18          = dword ptr -18h
.text:004056E0 var_14          = dword ptr -14h
.text:004056E0 var_C           = dword ptr -0Ch
.text:004056E0 var_8           = dword ptr -8
.text:004056E0 var_4           = dword ptr -4
.text:004056E0 arg_0           = dword ptr  8
.text:004056E0 arg_4           = dword ptr  0Ch
.text:004056E0 arg_8           = dword ptr  10h
.text:004056E0 arg_C           = dword ptr  14h
.text:004056E0
.text:004056E0                 push    ebp
.text:004056E1                 mov     ebp, esp
.text:004056E3                 sub     esp, 28h
.text:004056E6                 mov     [ebp+var_C], ebx
.text:004056E9                 mov     edx, [ebp+arg_C]
.text:004056EC                 mov     ecx, [ebp+arg_0]
.text:004056EF                 mov     [ebp+var_8], esi
.text:004056F2                 mov     eax, [ebp+arg_8]
.text:004056F5                 test    edx, edx
.text:004056F7                 mov     [ebp+var_4], edi
.text:004056FA                 mov     ebx, [ebp+arg_4]
.text:004056FD                 mov     esi, eax
.text:004056FF                 mov     [ebp+var_18], 0
.text:00405706                 mov     [ebp+var_14], 0
.text:0040570D                 mov     [ebp+var_1C], ecx
.text:00405710                 jnz     short loc_405762
.text:00405712                 cmp     eax, ebx
.text:00405714                 jbe     short loc_405740
.text:00405716                 mov     eax, ecx
.text:00405718                 mov     edx, ebx
.text:0040571A                 div     esi
.text:0040571C                 mov     edi, eax
.text:0040571E                 mov     esi, esi
.text:00405720
.text:00405720 loc_405720:                             ; CODE XREF: sub_4056E0+88↓j
.text:00405720                                         ; sub_4056E0+A4↓j ...
.text:00405720                 xor     ecx, ecx
.text:00405722
.text:00405722 loc_405722:                             ; CODE XREF: sub_4056E0+80↓j
.text:00405722                 mov     [ebp+var_18], edi
.text:00405725                 mov     ebx, [ebp+var_C]
.text:00405728                 mov     eax, [ebp+var_18]
.text:0040572B                 mov     [ebp+var_14], ecx
.text:0040572E                 mov     esi, [ebp+var_8]
.text:00405731                 mov     edx, [ebp+var_14]
.text:00405734                 mov     edi, [ebp+var_4]
.text:00405737                 mov     esp, ebp
.text:00405739                 pop     ebp
.text:0040573A                 retn
.text:0040573A ; ---------------------------------------------------------------------------
.text:0040573B                 align 10h
.text:00405740
.text:00405740 loc_405740:                             ; CODE XREF: sub_4056E0+34↑j
.text:00405740                 test    eax, eax
.text:00405742                 jnz     short loc_405751
.text:00405744                 mov     eax, 1
.text:00405749                 xor     ecx, ecx
.text:0040574B                 xor     edx, edx
.text:0040574D                 div     ecx
.text:0040574F                 mov     esi, eax
.text:00405751
.text:00405751 loc_405751:                             ; CODE XREF: sub_4056E0+62↑j
.text:00405751                 mov     eax, ebx
.text:00405753                 xor     edx, edx
.text:00405755                 div     esi
.text:00405757                 mov     ecx, eax
.text:00405759                 mov     eax, [ebp+var_1C]
.text:0040575C                 div     esi
.text:0040575E                 mov     edi, eax
.text:00405760                 jmp     short loc_405722
.text:00405762 ; ---------------------------------------------------------------------------
.text:00405762
.text:00405762 loc_405762:                             ; CODE XREF: sub_4056E0+30↑j
.text:00405762                 cmp     edx, ebx
.text:00405764                 jbe     short loc_405770
.text:00405766                 xor     edi, edi
.text:00405768                 jmp     short loc_405720
.text:00405768 ; ---------------------------------------------------------------------------
.text:0040576A                 align 10h
.text:00405770
.text:00405770 loc_405770:                             ; CODE XREF: sub_4056E0+84↑j
.text:00405770                 bsr     eax, edx
.text:00405773                 xor     eax, 1Fh
.text:00405776                 mov     [ebp+var_20], eax
.text:00405779                 jnz     short loc_405790
.text:0040577B                 cmp     ebx, edx
.text:0040577D                 ja      short loc_405786
.text:0040577F                 xor     edi, edi
.text:00405781                 cmp     [ebp+var_1C], esi
.text:00405784                 jb      short loc_405720
.text:00405786
.text:00405786 loc_405786:                             ; CODE XREF: sub_4056E0+9D↑j
.text:00405786                 mov     edi, 1
.text:0040578B                 jmp     short loc_405720
.text:0040578B ; ---------------------------------------------------------------------------
.text:0040578D                 align 10h
.text:00405790
.text:00405790 loc_405790:                             ; CODE XREF: sub_4056E0+99↑j
.text:00405790                 mov     eax, [ebp+var_20]
.text:00405793                 mov     ecx, 20h ; ' '
.text:00405798                 sub     ecx, eax
.text:0040579A                 mov     [ebp+var_24], ecx
.text:0040579D                 mov     eax, esi
.text:0040579F                 movzx   ecx, byte ptr [ebp+var_20]
.text:004057A3                 shl     edx, cl
.text:004057A5                 mov     edi, edx
.text:004057A7                 movzx   ecx, byte ptr [ebp+var_24]
.text:004057AB                 mov     edx, ebx
.text:004057AD                 shr     eax, cl
.text:004057AF                 movzx   ecx, byte ptr [ebp+var_20]
.text:004057B3                 or      edi, eax
.text:004057B5                 mov     eax, [ebp+var_1C]
.text:004057B8                 shl     esi, cl
.text:004057BA                 movzx   ecx, byte ptr [ebp+var_24]
.text:004057BE                 shr     edx, cl
.text:004057C0                 movzx   ecx, byte ptr [ebp+var_20]
.text:004057C4                 shl     ebx, cl
.text:004057C6                 movzx   ecx, byte ptr [ebp+var_24]
.text:004057CA                 shr     eax, cl
.text:004057CC                 or      ebx, eax
.text:004057CE                 movzx   ecx, byte ptr [ebp+var_20]
.text:004057D2                 mov     eax, ebx
.text:004057D4                 div     edi
.text:004057D6                 mov     ebx, edx
.text:004057D8                 mov     edi, eax
.text:004057DA                 shl     [ebp+var_1C], cl
.text:004057DD                 mul     esi
.text:004057DF                 cmp     edx, ebx
.text:004057E1                 ja      short loc_4057F4
.text:004057E3                 cmp     edx, ebx
.text:004057E5                 jnz     loc_405720
.text:004057EB                 cmp     eax, [ebp+var_1C]
.text:004057EE                 jbe     loc_405720
.text:004057F4
.text:004057F4 loc_4057F4:                             ; CODE XREF: sub_4056E0+101↑j
.text:004057F4                 dec     edi
.text:004057F5                 jmp     loc_405720
.text:004057F5 sub_4056E0      endp
.text:004057F5
.text:004057F5 ; ---------------------------------------------------------------------------
.text:004057FA                 align 10h
.text:00405800
.text:00405800 ; =============== S U B R O U T I N E =======================================
.text:00405800
.text:00405800 ; Attributes: bp-based frame
.text:00405800
.text:00405800 sub_405800      proc near               ; CODE XREF: sub_405020+82↑p
.text:00405800                                         ; sub_405160+A8↑p
.text:00405800
.text:00405800 var_34          = dword ptr -34h
.text:00405800 var_2C          = dword ptr -2Ch
.text:00405800 var_28          = dword ptr -28h
.text:00405800 var_24          = dword ptr -24h
.text:00405800 var_20          = dword ptr -20h
.text:00405800 var_1C          = dword ptr -1Ch
.text:00405800 var_18          = dword ptr -18h
.text:00405800 var_14          = dword ptr -14h
.text:00405800 arg_0           = dword ptr  8
.text:00405800 arg_4           = dword ptr  0Ch
.text:00405800 arg_8           = dword ptr  10h
.text:00405800 arg_C           = dword ptr  14h
.text:00405800
.text:00405800                 push    ebp
.text:00405801                 mov     ebp, esp
.text:00405803                 push    edi
.text:00405804                 push    esi
.text:00405805                 push    ebx
.text:00405806                 sub     esp, 2Ch
.text:00405809                 mov     edx, [ebp+arg_C]
.text:0040580C                 mov     [ebp+var_20], 0
.text:00405813                 mov     ecx, [ebp+arg_0]
.text:00405816                 mov     ebx, [ebp+arg_4]
.text:00405819                 mov     [ebp+var_1C], 0
.text:00405820                 mov     eax, [ebp+arg_8]
.text:00405823                 test    edx, edx
.text:00405825                 mov     [ebp+var_24], edx
.text:00405828                 mov     edi, ebx
.text:0040582A                 mov     esi, eax
.text:0040582C                 mov     [ebp+var_28], ecx
.text:0040582F                 jnz     short loc_405890
.text:00405831                 cmp     eax, ebx
.text:00405833                 jbe     short loc_405870
.text:00405835                 mov     eax, ecx
.text:00405837                 mov     edx, ebx
.text:00405839                 div     esi
.text:0040583B
.text:0040583B loc_40583B:                             ; CODE XREF: sub_405800+8B↓j
.text:0040583B                 mov     [ebp+var_28], edx
.text:0040583E                 lea     ecx, [ebp+var_18]
.text:00405841                 test    ecx, ecx
.text:00405843                 jz      short loc_40585E
.text:00405845                 mov     [ebp+var_1C], 0
.text:0040584C
.text:0040584C loc_40584C:                             ; CODE XREF: sub_405800+DA↓j
.text:0040584C                 mov     eax, [ebp+var_28]
.text:0040584F                 mov     [ebp+var_20], eax
.text:00405852                 mov     edx, [ebp+var_20]
.text:00405855                 mov     ecx, [ebp+var_1C]
.text:00405858                 mov     [ebp+var_18], edx
.text:0040585B                 mov     [ebp+var_14], ecx
.text:0040585E
.text:0040585E loc_40585E:                             ; CODE XREF: sub_405800+43↑j
.text:0040585E                                         ; sub_405800+A7↓j ...
.text:0040585E                 mov     eax, [ebp+var_18]
.text:00405861                 mov     edx, [ebp+var_14]
.text:00405864                 add     esp, 2Ch
.text:00405867                 pop     ebx
.text:00405868                 pop     esi
.text:00405869                 pop     edi
.text:0040586A                 pop     ebp
.text:0040586B                 retn
.text:0040586B ; ---------------------------------------------------------------------------
.text:0040586C                 align 10h
.text:00405870
.text:00405870 loc_405870:                             ; CODE XREF: sub_405800+33↑j
.text:00405870                 test    eax, eax
.text:00405872                 jnz     short loc_40587F
.text:00405874                 mov     eax, 1
.text:00405879                 xor     edx, edx
.text:0040587B                 div     esi
.text:0040587D                 mov     esi, eax
.text:0040587F
.text:0040587F loc_40587F:                             ; CODE XREF: sub_405800+72↑j
.text:0040587F                 mov     eax, edi
.text:00405881                 mov     edx, [ebp+var_24]
.text:00405884                 div     esi
.text:00405886                 mov     eax, [ebp+var_28]
.text:00405889                 div     esi
.text:0040588B                 jmp     short loc_40583B
.text:0040588B ; ---------------------------------------------------------------------------
.text:0040588D                 align 10h
.text:00405890
.text:00405890 loc_405890:                             ; CODE XREF: sub_405800+2F↑j
.text:00405890                 cmp     [ebp+var_24], ebx
.text:00405893                 jbe     short loc_4058B0
.text:00405895                 mov     [ebp+var_20], ecx
.text:00405898
.text:00405898 loc_405898:                             ; CODE XREF: sub_405800+15B↓j
.text:00405898                 mov     [ebp+var_1C], edi
.text:0040589B                 mov     eax, [ebp+var_20]
.text:0040589E                 mov     edx, [ebp+var_1C]
.text:004058A1                 mov     [ebp+var_18], eax
.text:004058A4                 mov     [ebp+var_14], edx
.text:004058A7                 jmp     short loc_40585E
.text:004058A7 ; ---------------------------------------------------------------------------
.text:004058A9                 align 10h
.text:004058B0
.text:004058B0 loc_4058B0:                             ; CODE XREF: sub_405800+93↑j
.text:004058B0                 bsr     eax, [ebp+var_24]
.text:004058B4                 mov     ebx, eax
.text:004058B6                 xor     ebx, 1Fh
.text:004058B9                 jnz     short loc_4058E0
.text:004058BB                 cmp     edi, [ebp+var_24]
.text:004058BE                 ja      short loc_4058C5
.text:004058C0                 cmp     [ebp+var_28], esi
.text:004058C3                 jb      short loc_4058D0
.text:004058C5
.text:004058C5 loc_4058C5:                             ; CODE XREF: sub_405800+BE↑j
.text:004058C5                 mov     edx, [ebp+var_28]
.text:004058C8                 sub     edx, esi
.text:004058CA                 sbb     edi, [ebp+var_24]
.text:004058CD                 mov     [ebp+var_28], edx
.text:004058D0
.text:004058D0 loc_4058D0:                             ; CODE XREF: sub_405800+C3↑j
.text:004058D0                 lea     ecx, [ebp+var_18]
.text:004058D3                 test    ecx, ecx
.text:004058D5                 jz      short loc_40585E
.text:004058D7                 mov     [ebp+var_1C], edi
.text:004058DA                 jmp     loc_40584C
.text:004058DA ; ---------------------------------------------------------------------------
.text:004058DF                 align 10h
.text:004058E0
.text:004058E0 loc_4058E0:                             ; CODE XREF: sub_405800+B9↑j
.text:004058E0                 mov     edx, [ebp+var_24]
.text:004058E3                 mov     eax, 20h ; ' '
.text:004058E8                 mov     cl, bl
.text:004058EA                 sub     eax, ebx
.text:004058EC                 mov     [ebp+var_2C], eax
.text:004058EF                 shl     edx, cl
.text:004058F1                 mov     eax, esi
.text:004058F3                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004058F7                 shr     eax, cl
.text:004058F9                 mov     cl, bl
.text:004058FB                 shl     esi, cl
.text:004058FD                 or      edx, eax
.text:004058FF                 mov     eax, [ebp+var_28]
.text:00405902                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00405906                 mov     [ebp+var_24], edx
.text:00405909                 mov     edx, edi
.text:0040590B                 shr     edx, cl
.text:0040590D                 mov     cl, bl
.text:0040590F                 shl     edi, cl
.text:00405911                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00405915                 shr     eax, cl
.text:00405917                 or      edi, eax
.text:00405919                 mov     eax, edi
.text:0040591B                 mov     cl, bl
.text:0040591D                 div     [ebp+var_24]
.text:00405920                 shl     [ebp+var_28], cl
.text:00405923                 mov     edi, edx
.text:00405925                 mul     esi
.text:00405927                 mov     [ebp+var_34], eax
.text:0040592A                 cmp     edx, edi
.text:0040592C                 ja      short loc_405968
.text:0040592E                 cmp     edx, edi
.text:00405930                 jz      short loc_405960
.text:00405932
.text:00405932 loc_405932:                             ; CODE XREF: sub_405800+166↓j
.text:00405932                                         ; sub_405800+173↓j
.text:00405932                 lea     eax, [ebp+var_18]
.text:00405935                 test    eax, eax
.text:00405937                 jz      loc_40585E
.text:0040593D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00405941                 mov     eax, [ebp+var_28]
.text:00405944                 sub     eax, [ebp+var_34]
.text:00405947                 sbb     edi, edx
.text:00405949                 mov     [ebp+var_28], eax
.text:0040594C                 mov     edx, edi
.text:0040594E                 shl     edx, cl
.text:00405950                 mov     cl, bl
.text:00405952                 shr     eax, cl
.text:00405954                 or      edx, eax
.text:00405956                 mov     [ebp+var_20], edx
.text:00405959                 shr     edi, cl
.text:0040595B                 jmp     loc_405898
.text:00405960 ; ---------------------------------------------------------------------------
.text:00405960
.text:00405960 loc_405960:                             ; CODE XREF: sub_405800+130↑j
.text:00405960                 mov     eax, [ebp+var_28]
.text:00405963                 cmp     [ebp+var_34], eax
.text:00405966                 jbe     short loc_405932
.text:00405968
.text:00405968 loc_405968:                             ; CODE XREF: sub_405800+12C↑j
.text:00405968                 mov     ecx, [ebp+var_34]
.text:0040596B                 sub     ecx, esi
.text:0040596D                 sbb     edx, [ebp+var_24]
.text:00405970                 mov     [ebp+var_34], ecx
.text:00405973                 jmp     short loc_405932
.text:00405973 sub_405800      endp
.text:00405973
.text:00405973 ; ---------------------------------------------------------------------------
.text:00405975                 align 10h
.text:00405980                 jmp     ds:__set_app_type
.text:00405980 ; ---------------------------------------------------------------------------
.text:00405986                 align 10h
.text:00405990
.text:00405990 ; =============== S U B R O U T I N E =======================================
.text:00405990
.text:00405990 ; Attributes: thunk
.text:00405990
.text:00405990 ; void __cdecl cexit()
.text:00405990 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00405990                 jmp     ds:__imp__cexit
.text:00405990 _cexit          endp
.text:00405990
.text:00405990 ; ---------------------------------------------------------------------------
.text:00405996                 align 10h
.text:004059A0
.text:004059A0 ; =============== S U B R O U T I N E =======================================
.text:004059A0
.text:004059A0 ; Attributes: thunk
.text:004059A0
.text:004059A0 ; char ***__cdecl _p__environ()
.text:004059A0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:004059A0                 jmp     ds:__imp___p__environ
.text:004059A0 __p__environ    endp
.text:004059A0
.text:004059A0 ; ---------------------------------------------------------------------------
.text:004059A6                 align 10h
.text:004059B0
.text:004059B0 ; =============== S U B R O U T I N E =======================================
.text:004059B0
.text:004059B0 ; Attributes: thunk
.text:004059B0
.text:004059B0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:004059B0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:004059B0                                         ; TopLevelExceptionFilter+88↑p ...
.text:004059B0
.text:004059B0 Signal          = dword ptr  4
.text:004059B0 Function        = dword ptr  8
.text:004059B0
.text:004059B0                 jmp     ds:__imp_signal
.text:004059B0 signal          endp
.text:004059B0
.text:004059B0 ; ---------------------------------------------------------------------------
.text:004059B6                 align 10h
.text:004059C0
.text:004059C0 ; =============== S U B R O U T I N E =======================================
.text:004059C0
.text:004059C0 ; Attributes: thunk
.text:004059C0
.text:004059C0 ; int *__cdecl _p__fmode()
.text:004059C0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:004059C0                 jmp     ds:__imp___p__fmode
.text:004059C0 __p__fmode      endp
.text:004059C0
.text:004059C0 ; ---------------------------------------------------------------------------
.text:004059C6                 align 10h
.text:004059D0
.text:004059D0 ; =============== S U B R O U T I N E =======================================
.text:004059D0
.text:004059D0 ; Attributes: thunk
.text:004059D0
.text:004059D0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:004059D0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:004059D0                                         ; sub_401080+90↑p ...
.text:004059D0
.text:004059D0 FileHandle      = dword ptr  4
.text:004059D0 Mode            = dword ptr  8
.text:004059D0
.text:004059D0                 jmp     ds:__imp__setmode
.text:004059D0 _setmode        endp
.text:004059D0
.text:004059D0 ; ---------------------------------------------------------------------------
.text:004059D6                 align 10h
.text:004059E0
.text:004059E0 ; =============== S U B R O U T I N E =======================================
.text:004059E0
.text:004059E0 ; Attributes: thunk
.text:004059E0
.text:004059E0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004059E0                 jmp     ds:__imp___getmainargs
.text:004059E0 __getmainargs   endp
.text:004059E0
.text:004059E0 ; ---------------------------------------------------------------------------
.text:004059E6                 align 10h
.text:004059F0
.text:004059F0 ; =============== S U B R O U T I N E =======================================
.text:004059F0
.text:004059F0 ; Attributes: thunk
.text:004059F0
.text:004059F0 ; int *__cdecl errno()
.text:004059F0 _errno          proc near               ; CODE XREF: sub_401380+218↑p
.text:004059F0                                         ; sub_402920+184↑p ...
.text:004059F0                 jmp     ds:__imp__errno
.text:004059F0 _errno          endp
.text:004059F0
.text:004059F0 ; ---------------------------------------------------------------------------
.text:004059F6                 align 10h
.text:00405A00
.text:00405A00 ; =============== S U B R O U T I N E =======================================
.text:00405A00
.text:00405A00 ; Attributes: thunk
.text:00405A00
.text:00405A00 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00405A00 setlocale       proc near               ; CODE XREF: sub_401380+3B↑p
.text:00405A00                                         ; sub_402B70+16↑p ...
.text:00405A00
.text:00405A00 Category        = dword ptr  4
.text:00405A00 Locale          = dword ptr  8
.text:00405A00
.text:00405A00                 jmp     ds:__imp_setlocale
.text:00405A00 setlocale       endp
.text:00405A00
.text:00405A00 ; ---------------------------------------------------------------------------
.text:00405A06                 align 10h
.text:00405A10
.text:00405A10 ; =============== S U B R O U T I N E =======================================
.text:00405A10
.text:00405A10 ; Attributes: noreturn thunk
.text:00405A10
.text:00405A10 ; void __cdecl __noreturn exit(int Code)
.text:00405A10 exit            proc near               ; CODE XREF: sub_401380:loc_40156C↑p
.text:00405A10                                         ; sub_4017F0+3E↑p ...
.text:00405A10
.text:00405A10 Code            = dword ptr  4
.text:00405A10
.text:00405A10                 jmp     ds:__imp_exit
.text:00405A10 exit            endp
.text:00405A10
.text:00405A10 ; ---------------------------------------------------------------------------
.text:00405A16                 align 10h
.text:00405A20
.text:00405A20 ; =============== S U B R O U T I N E =======================================
.text:00405A20
.text:00405A20 ; Attributes: thunk
.text:00405A20
.text:00405A20 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00405A20 fputs           proc near               ; CODE XREF: sub_4017F0+83↑p
.text:00405A20                                         ; sub_4017F0+A5↑p ...
.text:00405A20
.text:00405A20 Buffer          = dword ptr  4
.text:00405A20 Stream          = dword ptr  8
.text:00405A20
.text:00405A20                 jmp     ds:__imp_fputs
.text:00405A20 fputs           endp
.text:00405A20
.text:00405A20 ; ---------------------------------------------------------------------------
.text:00405A26                 align 10h
.text:00405A30
.text:00405A30 ; =============== S U B R O U T I N E =======================================
.text:00405A30
.text:00405A30 ; Attributes: thunk
.text:00405A30
.text:00405A30 ; int printf(const char *const Format, ...)
.text:00405A30 printf          proc near               ; CODE XREF: sub_4017F0+61↑p
.text:00405A30                                         ; sub_4017F0+C2↑p
.text:00405A30
.text:00405A30 Format          = dword ptr  4
.text:00405A30
.text:00405A30                 jmp     ds:__imp_printf
.text:00405A30 printf          endp
.text:00405A30
.text:00405A30 ; ---------------------------------------------------------------------------
.text:00405A36                 align 10h
.text:00405A40
.text:00405A40 ; =============== S U B R O U T I N E =======================================
.text:00405A40
.text:00405A40 ; Attributes: thunk
.text:00405A40
.text:00405A40 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00405A40 fprintf         proc near               ; CODE XREF: sub_401380+1E0↑p
.text:00405A40                                         ; sub_4017F0+36↑p ...
.text:00405A40
.text:00405A40 Stream          = dword ptr  4
.text:00405A40 Format          = dword ptr  8
.text:00405A40
.text:00405A40                 jmp     ds:__imp_fprintf
.text:00405A40 fprintf         endp
.text:00405A40
.text:00405A40 ; ---------------------------------------------------------------------------
.text:00405A46                 align 10h
.text:00405A50
.text:00405A50 ; =============== S U B R O U T I N E =======================================
.text:00405A50
.text:00405A50 ; Attributes: thunk
.text:00405A50
.text:00405A50 ; size_t __cdecl strlen(const char *Str)
.text:00405A50 strlen          proc near               ; CODE XREF: sub_401B10+2A9↑p
.text:00405A50                                         ; sub_401B10+346↑p ...
.text:00405A50
.text:00405A50 Str             = dword ptr  4
.text:00405A50
.text:00405A50                 jmp     ds:__imp_strlen
.text:00405A50 strlen          endp
.text:00405A50
.text:00405A50 ; ---------------------------------------------------------------------------
.text:00405A56                 align 10h
.text:00405A60
.text:00405A60 ; =============== S U B R O U T I N E =======================================
.text:00405A60
.text:00405A60 ; Attributes: thunk
.text:00405A60
.text:00405A60 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00405A60 strncmp         proc near               ; CODE XREF: sub_401B10+23F↑p
.text:00405A60                                         ; sub_401B10+699↑p
.text:00405A60
.text:00405A60 Str1            = dword ptr  4
.text:00405A60 Str2            = dword ptr  8
.text:00405A60 MaxCount        = dword ptr  0Ch
.text:00405A60
.text:00405A60                 jmp     ds:__imp_strncmp
.text:00405A60 strncmp         endp
.text:00405A60
.text:00405A60 ; ---------------------------------------------------------------------------
.text:00405A66                 align 10h
.text:00405A70
.text:00405A70 ; =============== S U B R O U T I N E =======================================
.text:00405A70
.text:00405A70 ; Attributes: thunk
.text:00405A70
.text:00405A70 ; char *__cdecl getenv(const char *VarName)
.text:00405A70 getenv          proc near               ; CODE XREF: sub_401B10+B57↑p
.text:00405A70
.text:00405A70 VarName         = dword ptr  4
.text:00405A70
.text:00405A70                 jmp     ds:__imp_getenv
.text:00405A70 getenv          endp
.text:00405A70
.text:00405A70 ; ---------------------------------------------------------------------------
.text:00405A76                 align 10h
.text:00405A80
.text:00405A80 ; =============== S U B R O U T I N E =======================================
.text:00405A80
.text:00405A80 ; Attributes: thunk
.text:00405A80
.text:00405A80 ; char *__cdecl strchr(const char *Str, int Val)
.text:00405A80 strchr          proc near               ; CODE XREF: sub_401B10+469↑p
.text:00405A80                                         ; sub_401B10+53A↑p ...
.text:00405A80
.text:00405A80 Str             = dword ptr  4
.text:00405A80 Val             = dword ptr  8
.text:00405A80
.text:00405A80                 jmp     ds:__imp_strchr
.text:00405A80 strchr          endp
.text:00405A80
.text:00405A80 ; ---------------------------------------------------------------------------
.text:00405A86                 align 10h
.text:00405A90
.text:00405A90 ; =============== S U B R O U T I N E =======================================
.text:00405A90
.text:00405A90 ; Attributes: noreturn thunk
.text:00405A90
.text:00405A90 _assert         proc near               ; CODE XREF: sub_402920+230↑p
.text:00405A90                 jmp     ds:__imp__assert
.text:00405A90 _assert         endp
.text:00405A90
.text:00405A90 ; ---------------------------------------------------------------------------
.text:00405A96                 align 10h
.text:00405AA0
.text:00405AA0 ; =============== S U B R O U T I N E =======================================
.text:00405AA0
.text:00405AA0 ; Attributes: thunk
.text:00405AA0
.text:00405AA0 ; void __cdecl free(void *Block)
.text:00405AA0 free            proc near               ; CODE XREF: sub_402B70+6E↑p
.text:00405AA0                                         ; sub_404A20+112↑p
.text:00405AA0
.text:00405AA0 Block           = dword ptr  4
.text:00405AA0
.text:00405AA0                 jmp     ds:__imp_free
.text:00405AA0 free            endp
.text:00405AA0
.text:00405AA0 ; ---------------------------------------------------------------------------
.text:00405AA6                 align 10h
.text:00405AB0
.text:00405AB0 ; =============== S U B R O U T I N E =======================================
.text:00405AB0
.text:00405AB0 ; Attributes: thunk
.text:00405AB0
.text:00405AB0 ; double __cdecl strtod(const char *String, char **EndPtr)
.text:00405AB0 strtod          proc near               ; CODE XREF: sub_402B70+4E↑p
.text:00405AB0
.text:00405AB0 String          = dword ptr  4
.text:00405AB0 EndPtr          = dword ptr  8
.text:00405AB0
.text:00405AB0                 jmp     ds:__imp_strtod
.text:00405AB0 strtod          endp
.text:00405AB0
.text:00405AB0 ; ---------------------------------------------------------------------------
.text:00405AB6                 align 10h
.text:00405AC0
.text:00405AC0 ; =============== S U B R O U T I N E =======================================
.text:00405AC0
.text:00405AC0 ; Attributes: thunk
.text:00405AC0
.text:00405AC0 ; int __cdecl fclose(FILE *Stream)
.text:00405AC0 fclose          proc near               ; CODE XREF: sub_402F20+27↑p
.text:00405AC0
.text:00405AC0 Stream          = dword ptr  4
.text:00405AC0
.text:00405AC0                 jmp     ds:__imp_fclose
.text:00405AC0 fclose          endp
.text:00405AC0
.text:00405AC0 ; ---------------------------------------------------------------------------
.text:00405AC6                 align 10h
.text:00405AD0
.text:00405AD0 ; =============== S U B R O U T I N E =======================================
.text:00405AD0
.text:00405AD0 ; Attributes: thunk
.text:00405AD0
.text:00405AD0 ; __time32_t __cdecl time(__time32_t *const Time)
.text:00405AD0 time            proc near               ; CODE XREF: sub_403000+66↑p
.text:00405AD0
.text:00405AD0 Time            = dword ptr  4
.text:00405AD0
.text:00405AD0                 jmp     ds:__imp_time
.text:00405AD0 time            endp
.text:00405AD0
.text:00405AD0 ; ---------------------------------------------------------------------------
.text:00405AD6                 align 10h
.text:00405AE0
.text:00405AE0 ; =============== S U B R O U T I N E =======================================
.text:00405AE0
.text:00405AE0 ; Attributes: thunk
.text:00405AE0
.text:00405AE0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00405AE0 memcpy          proc near               ; CODE XREF: .text:00403268↑p
.text:00405AE0                                         ; sub_403280+31↑p
.text:00405AE0
.text:00405AE0 Src             = dword ptr  8
.text:00405AE0 Size            = dword ptr  0Ch
.text:00405AE0
.text:00405AE0                 jmp     ds:__imp_memcpy
.text:00405AE0 memcpy          endp
.text:00405AE0
.text:00405AE0 ; ---------------------------------------------------------------------------
.text:00405AE6                 align 10h
.text:00405AF0
.text:00405AF0 ; =============== S U B R O U T I N E =======================================
.text:00405AF0
.text:00405AF0 ; Attributes: thunk
.text:00405AF0
.text:00405AF0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00405AF0 memset          proc near               ; CODE XREF: .text:004031E6↑p
.text:00405AF0
.text:00405AF0 Val             = dword ptr  8
.text:00405AF0 Size            = dword ptr  0Ch
.text:00405AF0
.text:00405AF0                 jmp     ds:__imp_memset
.text:00405AF0 memset          endp
.text:00405AF0
.text:00405AF0 ; ---------------------------------------------------------------------------
.text:00405AF6                 align 10h
.text:00405B00
.text:00405B00 ; =============== S U B R O U T I N E =======================================
.text:00405B00
.text:00405B00 ; Attributes: thunk
.text:00405B00
.text:00405B00 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00405B00 calloc          proc near               ; CODE XREF: .text:00403223↑p
.text:00405B00
.text:00405B00 Count           = dword ptr  4
.text:00405B00 Size            = dword ptr  8
.text:00405B00
.text:00405B00                 jmp     ds:__imp_calloc
.text:00405B00 calloc          endp
.text:00405B00
.text:00405B00 ; ---------------------------------------------------------------------------
.text:00405B06                 align 10h
.text:00405B10
.text:00405B10 ; =============== S U B R O U T I N E =======================================
.text:00405B10
.text:00405B10 ; Attributes: thunk
.text:00405B10
.text:00405B10 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00405B10 realloc         proc near               ; CODE XREF: .text:00403120↑p
.text:00405B10                                         ; sub_403150+16↑p ...
.text:00405B10
.text:00405B10 Block           = dword ptr  4
.text:00405B10 Size            = dword ptr  8
.text:00405B10
.text:00405B10                 jmp     ds:__imp_realloc
.text:00405B10 realloc         endp
.text:00405B10
.text:00405B10 ; ---------------------------------------------------------------------------
.text:00405B16                 align 10h
.text:00405B20
.text:00405B20 ; =============== S U B R O U T I N E =======================================
.text:00405B20
.text:00405B20 ; Attributes: thunk
.text:00405B20
.text:00405B20 ; void *__cdecl malloc(size_t Size)
.text:00405B20 malloc          proc near               ; CODE XREF: .text:004030A4↑p
.text:00405B20                                         ; sub_4030C0+E↑p ...
.text:00405B20
.text:00405B20 Size            = dword ptr  4
.text:00405B20
.text:00405B20                 jmp     ds:__imp_malloc
.text:00405B20 malloc          endp
.text:00405B20
.text:00405B20 ; ---------------------------------------------------------------------------
.text:00405B26                 align 10h
.text:00405B30
.text:00405B30 ; =============== S U B R O U T I N E =======================================
.text:00405B30
.text:00405B30 ; Attributes: thunk
.text:00405B30
.text:00405B30 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00405B30 vfprintf        proc near               ; CODE XREF: sub_403640+C1↑p
.text:00405B30                                         ; sub_404CA0+49↑p ...
.text:00405B30
.text:00405B30 Stream          = dword ptr  4
.text:00405B30 Format          = dword ptr  8
.text:00405B30 ArgList         = dword ptr  0Ch
.text:00405B30
.text:00405B30                 jmp     ds:__imp_vfprintf
.text:00405B30 vfprintf        endp
.text:00405B30
.text:00405B30 ; ---------------------------------------------------------------------------
.text:00405B36                 align 10h
.text:00405B40
.text:00405B40 ; =============== S U B R O U T I N E =======================================
.text:00405B40
.text:00405B40 ; Attributes: noreturn thunk
.text:00405B40
.text:00405B40 ; void __cdecl __noreturn abort()
.text:00405B40 abort           proc near               ; CODE XREF: sub_403640:loc_4036DC↑p
.text:00405B40                                         ; sub_404A20:loc_404BDA↑p ...
.text:00405B40                 jmp     ds:__imp_abort
.text:00405B40 abort           endp
.text:00405B40
.text:00405B40 ; ---------------------------------------------------------------------------
.text:00405B46                 align 10h
.text:00405B50
.text:00405B50 ; =============== S U B R O U T I N E =======================================
.text:00405B50
.text:00405B50 ; Attributes: thunk
.text:00405B50
.text:00405B50 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00405B50 _flsbuf         proc near               ; CODE XREF: sub_403640+128↑p
.text:00405B50                                         ; sub_403640+13A↑p ...
.text:00405B50
.text:00405B50 File            = dword ptr  8
.text:00405B50
.text:00405B50                 jmp     ds:__imp__flsbuf
.text:00405B50 _flsbuf         endp
.text:00405B50
.text:00405B50 ; ---------------------------------------------------------------------------
.text:00405B56                 align 10h
.text:00405B60
.text:00405B60 ; =============== S U B R O U T I N E =======================================
.text:00405B60
.text:00405B60 ; Attributes: thunk
.text:00405B60
.text:00405B60 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00405B60 iswctype        proc near               ; CODE XREF: sub_4038E0+78B↑p
.text:00405B60
.text:00405B60 C               = word ptr  4
.text:00405B60 Type            = word ptr  8
.text:00405B60
.text:00405B60                 jmp     ds:__imp_iswctype
.text:00405B60 iswctype        endp
.text:00405B60
.text:00405B60 ; ---------------------------------------------------------------------------
.text:00405B66                 align 10h
.text:00405B70
.text:00405B70 ; =============== S U B R O U T I N E =======================================
.text:00405B70
.text:00405B70 ; Attributes: thunk
.text:00405B70
.text:00405B70 ; int __cdecl isctype(int C, int Type)
.text:00405B70 _isctype        proc near               ; CODE XREF: sub_4038E0+610↑p
.text:00405B70
.text:00405B70 C               = dword ptr  4
.text:00405B70 Type            = dword ptr  8
.text:00405B70
.text:00405B70                 jmp     ds:__imp__isctype
.text:00405B70 _isctype        endp
.text:00405B70
.text:00405B70 ; ---------------------------------------------------------------------------
.text:00405B76                 align 10h
.text:00405B80
.text:00405B80 ; =============== S U B R O U T I N E =======================================
.text:00405B80
.text:00405B80 ; Attributes: thunk
.text:00405B80
.text:00405B80 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00405B80 strcmp          proc near               ; CODE XREF: sub_404DA4+180↑p
.text:00405B80
.text:00405B80 Str1            = dword ptr  4
.text:00405B80 Str2            = dword ptr  8
.text:00405B80
.text:00405B80                 jmp     ds:__imp_strcmp
.text:00405B80 strcmp          endp
.text:00405B80
.text:00405B80 ; ---------------------------------------------------------------------------
.text:00405B86                 align 10h
.text:00405B90
.text:00405B90 ; =============== S U B R O U T I N E =======================================
.text:00405B90
.text:00405B90 ; Attributes: thunk
.text:00405B90
.text:00405B90 ; int __cdecl fflush(FILE *Stream)
.text:00405B90 fflush          proc near               ; CODE XREF: sub_404CA0+19↑p
.text:00405B90                                         ; sub_404CA0+81↑p ...
.text:00405B90
.text:00405B90 Stream          = dword ptr  4
.text:00405B90
.text:00405B90                 jmp     ds:__imp_fflush
.text:00405B90 fflush          endp
.text:00405B90
.text:00405B90 ; ---------------------------------------------------------------------------
.text:00405B96                 align 10h
.text:00405BA0
.text:00405BA0 ; =============== S U B R O U T I N E =======================================
.text:00405BA0
.text:00405BA0 ; Attributes: thunk
.text:00405BA0
.text:00405BA0 ; char *__cdecl strerror(int ErrorMessage)
.text:00405BA0 strerror        proc near               ; CODE XREF: sub_404CA0+A5↑p
.text:00405BA0                                         ; sub_404DA4+10F↑p
.text:00405BA0
.text:00405BA0 ErrorMessage    = dword ptr  4
.text:00405BA0
.text:00405BA0                 jmp     ds:__imp_strerror
.text:00405BA0 strerror        endp
.text:00405BA0
.text:00405BA0 ; ---------------------------------------------------------------------------
.text:00405BA6                 align 10h
.text:00405BB0
.text:00405BB0 ; =============== S U B R O U T I N E =======================================
.text:00405BB0
.text:00405BB0 ; Attributes: thunk
.text:00405BB0
.text:00405BB0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00405BB0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00405BB0
.text:00405BB0 lpTopLevelExceptionFilter= dword ptr  4
.text:00405BB0
.text:00405BB0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00405BB0 SetUnhandledExceptionFilter endp
.text:00405BB0
.text:00405BB0 ; ---------------------------------------------------------------------------
.text:00405BB6                 align 10h
.text:00405BC0
.text:00405BC0 ; =============== S U B R O U T I N E =======================================
.text:00405BC0
.text:00405BC0 ; Attributes: noreturn thunk
.text:00405BC0
.text:00405BC0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00405BC0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00405BC0
.text:00405BC0 uExitCode       = dword ptr  4
.text:00405BC0
.text:00405BC0                 jmp     ds:__imp_ExitProcess
.text:00405BC0 ExitProcess     endp
.text:00405BC0
.text:00405BC0 ; ---------------------------------------------------------------------------
.text:00405BC6                 align 10h
.text:00405BD0
.text:00405BD0 ; =============== S U B R O U T I N E =======================================
.text:00405BD0
.text:00405BD0 ; Attributes: thunk
.text:00405BD0
.text:00405BD0 ; void __stdcall Sleep(DWORD dwMilliseconds)
.text:00405BD0 Sleep           proc near               ; CODE XREF: sub_404F40+3D↑p
.text:00405BD0
.text:00405BD0 dwMilliseconds  = dword ptr  4
.text:00405BD0
.text:00405BD0                 jmp     ds:__imp_Sleep
.text:00405BD0 Sleep           endp
.text:00405BD0
.text:00405BD0 ; ---------------------------------------------------------------------------
.text:00405BD6                 align 10h
.text:00405BE0
.text:00405BE0 ; =============== S U B R O U T I N E =======================================
.text:00405BE0
.text:00405BE0 ; Attributes: thunk
.text:00405BE0
.text:00405BE0 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:00405BE0 GetTimeZoneInformation proc near        ; CODE XREF: sub_405160+22↑p
.text:00405BE0
.text:00405BE0 lpTimeZoneInformation= dword ptr  4
.text:00405BE0
.text:00405BE0                 jmp     ds:__imp_GetTimeZoneInformation
.text:00405BE0 GetTimeZoneInformation endp
.text:00405BE0
.text:00405BE0 ; ---------------------------------------------------------------------------
.text:00405BE6                 align 10h
.text:00405BF0
.text:00405BF0 ; =============== S U B R O U T I N E =======================================
.text:00405BF0
.text:00405BF0 ; Attributes: thunk
.text:00405BF0
.text:00405BF0 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:00405BF0 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_405160+4F↑p
.text:00405BF0
.text:00405BF0 lpSystemTimeAsFileTime= dword ptr  4
.text:00405BF0
.text:00405BF0                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:00405BF0 GetSystemTimeAsFileTime endp
.text:00405BF0
.text:00405BF0 ; ---------------------------------------------------------------------------
.text:00405BF6                 align 10h
.text:00405C00
.text:00405C00 ; =============== S U B R O U T I N E =======================================
.text:00405C00
.text:00405C00 ; Attributes: thunk
.text:00405C00
.text:00405C00 ; BOOL __stdcall QueryPerformanceFrequency(LARGE_INTEGER *lpFrequency)
.text:00405C00 QueryPerformanceFrequency proc near     ; CODE XREF: sub_405250+27↑p
.text:00405C00
.text:00405C00 lpFrequency     = dword ptr  4
.text:00405C00
.text:00405C00                 jmp     ds:__imp_QueryPerformanceFrequency
.text:00405C00 QueryPerformanceFrequency endp
.text:00405C00
.text:00405C00 ; ---------------------------------------------------------------------------
.text:00405C06                 align 10h
.text:00405C10
.text:00405C10 ; =============== S U B R O U T I N E =======================================
.text:00405C10
.text:00405C10 ; Attributes: thunk
.text:00405C10
.text:00405C10 ; DWORD __stdcall GetLastError()
.text:00405C10 GetLastError    proc near               ; CODE XREF: sub_405540+3↑p
.text:00405C10                 jmp     ds:__imp_GetLastError
.text:00405C10 GetLastError    endp
.text:00405C10
.text:00405C10 ; ---------------------------------------------------------------------------
.text:00405C16                 align 10h
.text:00405C20 dword_405C20    dd 0FFFFFFFFh           ; DATA XREF: .text:004055E9↑r
.text:00405C20                                         ; .text:loc_405610↑r ...
.text:00405C24 dword_405C24    dd 0                    ; DATA XREF: .text:loc_40561C↑r
.text:00405C24                                         ; sub_405640:loc_40568D↑r
.text:00405C28                 dd 0FFFFFFFFh
.text:00405C2C dword_405C2C    dd 75h dup(0)           ; DATA XREF: .data:off_406084↓o
.text:00405E00                 dd 80h dup(?)
.text:00405E00 _text           ends
.text:00405E00
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000A0 (    160.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00005200
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 dword_406010    dd 1                    ; DATA XREF: sub_401380+ED↑r
.data:00406010                                         ; sub_4026A0+3↑r ...
.data:00406014 dword_406014    dd 1                    ; DATA XREF: sub_4026A0+11↑r
.data:00406014                                         ; .text:00402741↑r ...
.data:00406018 dword_406018    dd 3Fh                  ; DATA XREF: sub_4026A0+7D↑w
.data:00406018                                         ; .text:004027AD↑w
.data:0040601C                 align 10h
.data:00406020 ; char *Buffer
.data:00406020 Buffer          dd offset aCopyrightC2005
.data:00406020                                         ; DATA XREF: sub_403640+DC↑r
.data:00406020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406024                 align 10h
.data:00406030 ; int Code
.data:00406030 Code            dd 1                    ; DATA XREF: sub_402F20+6D↑r
.data:00406030                                         ; sub_402F20+9A↑r ...
.data:00406034                 align 10h
.data:00406040 dword_406040    dd 1                    ; DATA XREF: sub_404A20+22↑r
.data:00406040                                         ; sub_404A20+65↑r ...
.data:00406044 dword_406044    dd 100h                 ; DATA XREF: sub_404A20+3F↑o
.data:00406044                                         ; sub_404A20+1A2↑r ...
.data:00406048 off_406048      dd offset unk_407040    ; DATA XREF: sub_404A20+1AA↑r
.data:0040604C ; void *off_40604C
.data:0040604C off_40604C      dd offset dword_406044  ; DATA XREF: sub_404A20+39↑r
.data:0040604C                                         ; sub_404A20+60↑w ...
.data:00406050 dword_406050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406054                 align 10h
.data:00406060 ; int Mode
.data:00406060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406060                                         ; sub_401080+80↑r ...
.data:00406064                 align 10h
.data:00406070 dword_406070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406070                                         ; sub_401080+BA↑r
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 0                    ; DATA XREF: sub_405640+9↑r
.data:00406080                                         ; sub_405640+1D↑w
.data:00406084 off_406084      dd offset dword_405C2C  ; DATA XREF: sub_4055B0+6↑r
.data:00406084                                         ; sub_4055B0+17↑r ...
.data:00406088                 align 1000h
.data:00406088 _data           ends
.data:00406088
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000250 (    592.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 dword_407000    dd ?                    ; DATA XREF: sub_4026A0+9↑o
.bss:00407000                                         ; sub_4026A0+17↑w ...
.bss:00407004 dword_407004    dd ?                    ; DATA XREF: sub_4026A0+21↑w
.bss:00407004                                         ; .text:00402759↑w
.bss:00407008 dword_407008    dd ?                    ; DATA XREF: sub_4026A0+77↑r
.bss:00407008                                         ; .text:004027A7↑r
.bss:0040700C dword_40700C    dd ?                    ; DATA XREF: sub_4026A0+6B↑r
.bss:0040700C                                         ; .text:0040279B↑r
.bss:00407010                 db    ? ;
.bss:00407011                 db    ? ;
.bss:00407012                 db    ? ;
.bss:00407013                 db    ? ;
.bss:00407014                 db    ? ;
.bss:00407015                 db    ? ;
.bss:00407016                 db    ? ;
.bss:00407017                 db    ? ;
.bss:00407018                 db    ? ;
.bss:00407019                 db    ? ;
.bss:0040701A                 db    ? ;
.bss:0040701B                 db    ? ;
.bss:0040701C                 db    ? ;
.bss:0040701D                 db    ? ;
.bss:0040701E                 db    ? ;
.bss:0040701F                 db    ? ;
.bss:00407020                 db    ? ;
.bss:00407021                 db    ? ;
.bss:00407022                 db    ? ;
.bss:00407023                 db    ? ;
.bss:00407024                 db    ? ;
.bss:00407025                 db    ? ;
.bss:00407026                 db    ? ;
.bss:00407027                 db    ? ;
.bss:00407028                 db    ? ;
.bss:00407029                 db    ? ;
.bss:0040702A                 db    ? ;
.bss:0040702B                 db    ? ;
.bss:0040702C                 db    ? ;
.bss:0040702D                 db    ? ;
.bss:0040702E                 db    ? ;
.bss:0040702F                 db    ? ;
.bss:00407030 ; char *dword_407030
.bss:00407030 dword_407030    dd ?                    ; DATA XREF: .text:00402EF4↑w
.bss:00407030                                         ; sub_402F20+58↑r
.bss:00407034                 align 10h
.bss:00407040 unk_407040      db    ? ;               ; DATA XREF: sub_404A20+100↑o
.bss:00407040                                         ; .data:off_406048↑o
.bss:00407041                 db    ? ;
.bss:00407042                 db    ? ;
.bss:00407043                 db    ? ;
.bss:00407044                 db    ? ;
.bss:00407045                 db    ? ;
.bss:00407046                 db    ? ;
.bss:00407047                 db    ? ;
.bss:00407048                 db    ? ;
.bss:00407049                 db    ? ;
.bss:0040704A                 db    ? ;
.bss:0040704B                 db    ? ;
.bss:0040704C                 db    ? ;
.bss:0040704D                 db    ? ;
.bss:0040704E                 db    ? ;
.bss:0040704F                 db    ? ;
.bss:00407050                 db    ? ;
.bss:00407051                 db    ? ;
.bss:00407052                 db    ? ;
.bss:00407053                 db    ? ;
.bss:00407054                 db    ? ;
.bss:00407055                 db    ? ;
.bss:00407056                 db    ? ;
.bss:00407057                 db    ? ;
.bss:00407058                 db    ? ;
.bss:00407059                 db    ? ;
.bss:0040705A                 db    ? ;
.bss:0040705B                 db    ? ;
.bss:0040705C                 db    ? ;
.bss:0040705D                 db    ? ;
.bss:0040705E                 db    ? ;
.bss:0040705F                 db    ? ;
.bss:00407060                 db    ? ;
.bss:00407061                 db    ? ;
.bss:00407062                 db    ? ;
.bss:00407063                 db    ? ;
.bss:00407064                 db    ? ;
.bss:00407065                 db    ? ;
.bss:00407066                 db    ? ;
.bss:00407067                 db    ? ;
.bss:00407068                 db    ? ;
.bss:00407069                 db    ? ;
.bss:0040706A                 db    ? ;
.bss:0040706B                 db    ? ;
.bss:0040706C                 db    ? ;
.bss:0040706D                 db    ? ;
.bss:0040706E                 db    ? ;
.bss:0040706F                 db    ? ;
.bss:00407070                 db    ? ;
.bss:00407071                 db    ? ;
.bss:00407072                 db    ? ;
.bss:00407073                 db    ? ;
.bss:00407074                 db    ? ;
.bss:00407075                 db    ? ;
.bss:00407076                 db    ? ;
.bss:00407077                 db    ? ;
.bss:00407078                 db    ? ;
.bss:00407079                 db    ? ;
.bss:0040707A                 db    ? ;
.bss:0040707B                 db    ? ;
.bss:0040707C                 db    ? ;
.bss:0040707D                 db    ? ;
.bss:0040707E                 db    ? ;
.bss:0040707F                 db    ? ;
.bss:00407080                 db    ? ;
.bss:00407081                 db    ? ;
.bss:00407082                 db    ? ;
.bss:00407083                 db    ? ;
.bss:00407084                 db    ? ;
.bss:00407085                 db    ? ;
.bss:00407086                 db    ? ;
.bss:00407087                 db    ? ;
.bss:00407088                 db    ? ;
.bss:00407089                 db    ? ;
.bss:0040708A                 db    ? ;
.bss:0040708B                 db    ? ;
.bss:0040708C                 db    ? ;
.bss:0040708D                 db    ? ;
.bss:0040708E                 db    ? ;
.bss:0040708F                 db    ? ;
.bss:00407090                 db    ? ;
.bss:00407091                 db    ? ;
.bss:00407092                 db    ? ;
.bss:00407093                 db    ? ;
.bss:00407094                 db    ? ;
.bss:00407095                 db    ? ;
.bss:00407096                 db    ? ;
.bss:00407097                 db    ? ;
.bss:00407098                 db    ? ;
.bss:00407099                 db    ? ;
.bss:0040709A                 db    ? ;
.bss:0040709B                 db    ? ;
.bss:0040709C                 db    ? ;
.bss:0040709D                 db    ? ;
.bss:0040709E                 db    ? ;
.bss:0040709F                 db    ? ;
.bss:004070A0                 db    ? ;
.bss:004070A1                 db    ? ;
.bss:004070A2                 db    ? ;
.bss:004070A3                 db    ? ;
.bss:004070A4                 db    ? ;
.bss:004070A5                 db    ? ;
.bss:004070A6                 db    ? ;
.bss:004070A7                 db    ? ;
.bss:004070A8                 db    ? ;
.bss:004070A9                 db    ? ;
.bss:004070AA                 db    ? ;
.bss:004070AB                 db    ? ;
.bss:004070AC                 db    ? ;
.bss:004070AD                 db    ? ;
.bss:004070AE                 db    ? ;
.bss:004070AF                 db    ? ;
.bss:004070B0                 db    ? ;
.bss:004070B1                 db    ? ;
.bss:004070B2                 db    ? ;
.bss:004070B3                 db    ? ;
.bss:004070B4                 db    ? ;
.bss:004070B5                 db    ? ;
.bss:004070B6                 db    ? ;
.bss:004070B7                 db    ? ;
.bss:004070B8                 db    ? ;
.bss:004070B9                 db    ? ;
.bss:004070BA                 db    ? ;
.bss:004070BB                 db    ? ;
.bss:004070BC                 db    ? ;
.bss:004070BD                 db    ? ;
.bss:004070BE                 db    ? ;
.bss:004070BF                 db    ? ;
.bss:004070C0                 db    ? ;
.bss:004070C1                 db    ? ;
.bss:004070C2                 db    ? ;
.bss:004070C3                 db    ? ;
.bss:004070C4                 db    ? ;
.bss:004070C5                 db    ? ;
.bss:004070C6                 db    ? ;
.bss:004070C7                 db    ? ;
.bss:004070C8                 db    ? ;
.bss:004070C9                 db    ? ;
.bss:004070CA                 db    ? ;
.bss:004070CB                 db    ? ;
.bss:004070CC                 db    ? ;
.bss:004070CD                 db    ? ;
.bss:004070CE                 db    ? ;
.bss:004070CF                 db    ? ;
.bss:004070D0                 db    ? ;
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140 dword_407140    dd ?                    ; DATA XREF: .text:loc_4043B1↑o
.bss:00407140                                         ; .text:loc_4043D0↑o ...
.bss:00407144 dword_407144    dd ?                    ; DATA XREF: .text:loc_404450↑o
.bss:00407144                                         ; .text:004048D8↑r ...
.bss:00407148 dword_407148    dd ?                    ; DATA XREF: .text:004048D2↑r
.bss:00407148                                         ; sub_404980+2C↑r
.bss:0040714C dword_40714C    dd ?                    ; DATA XREF: .text:004048C6↑r
.bss:0040714C                                         ; sub_404980+22↑r
.bss:00407150 dword_407150    dd ?                    ; DATA XREF: .text:004048E2↑r
.bss:00407150                                         ; sub_404980+36↑r
.bss:00407154 dword_407154    dd ?                    ; DATA XREF: .text:004048F2↑r
.bss:00407154                                         ; sub_404980+4E↑r
.bss:00407158 dword_407158    dd ?                    ; DATA XREF: .text:0040490F↑r
.bss:00407158                                         ; sub_404980+62↑r
.bss:0040715C dword_40715C    dd ?                    ; DATA XREF: .text:00404905↑r
.bss:0040715C                                         ; sub_404980+70↑r
.bss:00407160 dword_407160    dd ?                    ; DATA XREF: .text:004048E8↑r
.bss:00407160                                         ; sub_404980+7A↑r
.bss:00407164                 align 10h
.bss:00407170 ; char *Str1
.bss:00407170 Str1            dd ?                    ; DATA XREF: sub_404DA4:loc_404DDD↑w
.bss:00407170                                         ; sub_404DA4:loc_404F10↑r
.bss:00407174                 align 10h
.bss:00407180 dword_407180    dd ?                    ; DATA XREF: sub_404DA4+2D↑r
.bss:00407180                                         ; sub_404DA4+3F↑w
.bss:00407184                 align 10h
.bss:00407190 dword_407190    dd ?                    ; DATA XREF: sub_405020+3E↑r
.bss:00407190                                         ; sub_405020+F5↑w
.bss:00407194 dword_407194    dd ?                    ; DATA XREF: sub_405020+38↑r
.bss:00407194                                         ; sub_405020+EB↑w
.bss:00407198                 align 10h
.bss:004071A0 ; LARGE_INTEGER Frequency
.bss:004071A0 Frequency       LARGE_INTEGER <?>       ; DATA XREF: sub_405250+D↑r
.bss:004071A0                                         ; sub_405250:loc_405270↑o ...
.bss:004071A8                 align 10h
.bss:004071B0 dword_4071B0    dd ?                    ; DATA XREF: sub_401380+2E↑w
.bss:004071B0                                         ; sub_401380+1CC↑r ...
.bss:004071B4                 db    ? ;
.bss:004071B5                 db    ? ;
.bss:004071B6                 db    ? ;
.bss:004071B7                 db    ? ;
.bss:004071B8                 db    ? ;
.bss:004071B9                 db    ? ;
.bss:004071BA                 db    ? ;
.bss:004071BB                 db    ? ;
.bss:004071BC                 db    ? ;
.bss:004071BD                 db    ? ;
.bss:004071BE                 db    ? ;
.bss:004071BF                 db    ? ;
.bss:004071C0                 db    ? ;
.bss:004071C1                 db    ? ;
.bss:004071C2                 db    ? ;
.bss:004071C3                 db    ? ;
.bss:004071C4                 db    ? ;
.bss:004071C5                 db    ? ;
.bss:004071C6                 db    ? ;
.bss:004071C7                 db    ? ;
.bss:004071C8                 db    ? ;
.bss:004071C9                 db    ? ;
.bss:004071CA                 db    ? ;
.bss:004071CB                 db    ? ;
.bss:004071CC                 db    ? ;
.bss:004071CD                 db    ? ;
.bss:004071CE                 db    ? ;
.bss:004071CF                 db    ? ;
.bss:004071D0 dword_4071D0    dd ?                    ; DATA XREF: sub_4026A0+71↑w
.bss:004071D0                                         ; .text:004027A1↑w
.bss:004071D4                 align 10h
.bss:004071E0 dword_4071E0    dd ?                    ; CODE XREF: sub_404DA4+63↑p
.bss:004071E0                                         ; DATA XREF: sub_404CA0+1E↑r ...
.bss:004071E4                 align 10h
.bss:004071F0 dword_4071F0    dd ?                    ; DATA XREF: sub_404CA0+4E↑w
.bss:004071F0                                         ; sub_404DA4+AB↑w
.bss:004071F4                 db    ? ;
.bss:004071F5                 db    ? ;
.bss:004071F6                 db    ? ;
.bss:004071F7                 db    ? ;
.bss:004071F8                 db    ? ;
.bss:004071F9                 db    ? ;
.bss:004071FA                 db    ? ;
.bss:004071FB                 db    ? ;
.bss:004071FC                 db    ? ;
.bss:004071FD                 db    ? ;
.bss:004071FE                 db    ? ;
.bss:004071FF                 db    ? ;
.bss:00407200                 db    ? ;
.bss:00407201                 db    ? ;
.bss:00407202                 db    ? ;
.bss:00407203                 db    ? ;
.bss:00407204                 db    ? ;
.bss:00407205                 db    ? ;
.bss:00407206                 db    ? ;
.bss:00407207                 db    ? ;
.bss:00407208                 db    ? ;
.bss:00407209                 db    ? ;
.bss:0040720A                 db    ? ;
.bss:0040720B                 db    ? ;
.bss:0040720C                 db    ? ;
.bss:0040720D                 db    ? ;
.bss:0040720E                 db    ? ;
.bss:0040720F                 db    ? ;
.bss:00407210                 db    ? ;
.bss:00407211                 db    ? ;
.bss:00407212                 db    ? ;
.bss:00407213                 db    ? ;
.bss:00407214                 db    ? ;
.bss:00407215                 db    ? ;
.bss:00407216                 db    ? ;
.bss:00407217                 db    ? ;
.bss:00407218                 db    ? ;
.bss:00407219                 db    ? ;
.bss:0040721A                 db    ? ;
.bss:0040721B                 db    ? ;
.bss:0040721C                 db    ? ;
.bss:0040721D                 db    ? ;
.bss:0040721E                 db    ? ;
.bss:0040721F                 db    ? ;
.bss:00407220 dword_407220    dd ?                    ; DATA XREF: sub_404DA4+13↑r
.bss:00407224                 align 1000h
.bss:00407224 _bss            ends
.bss:00407224
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 00000610 (   1552.)
.idata:00408000 ; Section size in file          : 00000800 (   2048.)
.idata:00408000 ; Offset to raw data for section: 00005400
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:00408154 ;
.idata:00408154 ; Imports from libintl3.dll
.idata:00408154 ;
.idata:00408154                 extrn __imp_libintl_bindtextdomain:dword
.idata:00408154                                         ; CODE XREF: sub_401380+4F↑p
.idata:00408154                                         ; DATA XREF: sub_401380+4F↑r ...
.idata:00408158                 extrn libintl_gettext:dword
.idata:00408158                                         ; CODE XREF: sub_401380+177↑p
.idata:00408158                                         ; sub_401380+1C0↑p ...
.idata:0040815C                 extrn libintl_textdomain:dword
.idata:0040815C                                         ; CODE XREF: sub_401380+5C↑p
.idata:0040815C                                         ; DATA XREF: sub_401380+5C↑r ...
.idata:00408160
.idata:00408168 ;
.idata:00408168 ; Imports from KERNEL32.dll
.idata:00408168 ;
.idata:00408168 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00408168                 extrn __imp_ExitProcess:dword
.idata:00408168                                         ; DATA XREF: ExitProcess↑r
.idata:0040816C ; DWORD (__stdcall *GetLastError)()
.idata:0040816C                 extrn __imp_GetLastError:dword
.idata:0040816C                                         ; DATA XREF: GetLastError↑r
.idata:00408170 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00408170                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00408170                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00408174 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00408174                 extrn __imp_GetTimeZoneInformation:dword
.idata:00408174                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:00408178 ; BOOL (__stdcall *QueryPerformanceFrequency)(LARGE_INTEGER *lpFrequency)
.idata:00408178                 extrn __imp_QueryPerformanceFrequency:dword
.idata:00408178                                         ; DATA XREF: QueryPerformanceFrequency↑r
.idata:0040817C ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0040817C                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0040817C                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00408180 ; void (__stdcall *Sleep)(DWORD dwMilliseconds)
.idata:00408180                 extrn __imp_Sleep:dword ; DATA XREF: Sleep↑r
.idata:00408184
.idata:0040818C ;
.idata:0040818C ; Imports from MSVCP60.DLL
.idata:0040818C ;
.idata:0040818C ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040818C                 extrn __imp_mbrtowc:dword
.idata:0040818C                                         ; DATA XREF: mbrtowc↑r
.idata:00408190
.idata:00408198 ;
.idata:00408198 ; Imports from msvcrt.dll
.idata:00408198 ;
.idata:00408198                 extrn __imp___getmainargs:dword
.idata:00408198                                         ; DATA XREF: __getmainargs↑r
.idata:0040819C ; int _mb_cur_max
.idata:0040819C                 extrn __mb_cur_max:dword
.idata:0040819C                                         ; DATA XREF: sub_4038E0+7↑r
.idata:0040819C                                         ; sub_4038E0+5F3↑r
.idata:004081A0 ; char ***(__cdecl *__p__environ)()
.idata:004081A0                 extrn __imp___p__environ:dword
.idata:004081A0                                         ; DATA XREF: __p__environ↑r
.idata:004081A4 ; int *(__cdecl *__p__fmode)()
.idata:004081A4                 extrn __imp___p__fmode:dword
.idata:004081A4                                         ; DATA XREF: __p__fmode↑r
.idata:004081A8 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004081A8                 extrn __set_app_type:dword
.idata:004081A8                                         ; CODE XREF: start+D↑p
.idata:004081A8                                         ; .text:0040102D↑p
.idata:004081A8                                         ; DATA XREF: ...
.idata:004081AC                 extrn __imp__assert:dword
.idata:004081AC                                         ; DATA XREF: _assert↑r
.idata:004081B0 ; void (__cdecl *_cexit)()
.idata:004081B0                 extrn __imp__cexit:dword
.idata:004081B0                                         ; DATA XREF: _cexit↑r
.idata:004081B4 ; int *(__cdecl *_errno)()
.idata:004081B4                 extrn __imp__errno:dword
.idata:004081B4                                         ; DATA XREF: _errno↑r
.idata:004081B8 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004081B8                 extrn __imp__flsbuf:dword
.idata:004081B8                                         ; DATA XREF: _flsbuf↑r
.idata:004081BC ; FILE iob[]
.idata:004081BC                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004081BC                                         ; sub_401080+75↑r ...
.idata:004081C0 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004081C0                 extrn __imp__isctype:dword
.idata:004081C0                                         ; DATA XREF: _isctype↑r
.idata:004081C4 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004081C4                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004081C4                                         ; DATA XREF: .text:0040106C↑r
.idata:004081C8 ; const unsigned __int16 *pctype
.idata:004081C8                 extrn _pctype:dword     ; DATA XREF: sub_4038E0:loc_403FD4↑r
.idata:004081CC ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004081CC                 extrn __imp__setmode:dword
.idata:004081CC                                         ; DATA XREF: _setmode↑r
.idata:004081D0 ; void (__cdecl __noreturn *abort)()
.idata:004081D0                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004081D4 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004081D4                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004081D4                                         ; DATA XREF: sub_401040+C↑r
.idata:004081D8 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004081D8                 extrn __imp_calloc:dword
.idata:004081D8                                         ; DATA XREF: calloc↑r
.idata:004081DC ; void (__cdecl __noreturn *exit)(int Code)
.idata:004081DC                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004081E0 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004081E0                 extrn __imp_fclose:dword
.idata:004081E0                                         ; DATA XREF: fclose↑r
.idata:004081E4 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004081E4                 extrn __imp_fflush:dword
.idata:004081E4                                         ; DATA XREF: fflush↑r
.idata:004081E8 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004081E8                 extrn __imp_fprintf:dword
.idata:004081E8                                         ; DATA XREF: fprintf↑r
.idata:004081EC ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004081EC                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004081F0 ; void (__cdecl *free)(void *Block)
.idata:004081F0                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004081F4 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004081F4                 extrn __imp_getenv:dword
.idata:004081F4                                         ; DATA XREF: getenv↑r
.idata:004081F8 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004081F8                 extrn __imp_iswctype:dword
.idata:004081F8                                         ; DATA XREF: iswctype↑r
.idata:004081FC ; void *(__cdecl *malloc)(size_t Size)
.idata:004081FC                 extrn __imp_malloc:dword
.idata:004081FC                                         ; DATA XREF: malloc↑r
.idata:00408200 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00408200                 extrn __imp_memcpy:dword
.idata:00408200                                         ; DATA XREF: memcpy↑r
.idata:00408204 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00408204                 extrn __imp_memset:dword
.idata:00408204                                         ; DATA XREF: memset↑r
.idata:00408208 ; int (*printf)(const char *const Format, ...)
.idata:00408208                 extrn __imp_printf:dword
.idata:00408208                                         ; DATA XREF: printf↑r
.idata:0040820C ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0040820C                 extrn __imp_realloc:dword
.idata:0040820C                                         ; DATA XREF: realloc↑r
.idata:00408210 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00408210                 extrn __imp_setlocale:dword
.idata:00408210                                         ; DATA XREF: setlocale↑r
.idata:00408214 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00408214                 extrn __imp_signal:dword
.idata:00408214                                         ; DATA XREF: signal↑r
.idata:00408218 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00408218                 extrn __imp_strchr:dword
.idata:00408218                                         ; DATA XREF: strchr↑r
.idata:0040821C ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0040821C                 extrn __imp_strcmp:dword
.idata:0040821C                                         ; DATA XREF: strcmp↑r
.idata:00408220 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00408220                 extrn __imp_strerror:dword
.idata:00408220                                         ; DATA XREF: strerror↑r
.idata:00408224 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00408224                 extrn __imp_strlen:dword
.idata:00408224                                         ; DATA XREF: strlen↑r
.idata:00408228 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00408228                 extrn __imp_strncmp:dword
.idata:00408228                                         ; DATA XREF: strncmp↑r
.idata:0040822C ; double (__cdecl *strtod)(const char *String, char **EndPtr)
.idata:0040822C                 extrn __imp_strtod:dword
.idata:0040822C                                         ; DATA XREF: strtod↑r
.idata:00408230 ; __time32_t (__cdecl *time)(__time32_t *const Time)
.idata:00408230                 extrn __imp_time:dword  ; DATA XREF: time↑r
.idata:00408234 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00408234                 extrn __imp_vfprintf:dword
.idata:00408234                                         ; DATA XREF: vfprintf↑r
.idata:00408238
.idata:00408238
.idata:00408238
.idata:00408238                 end start
