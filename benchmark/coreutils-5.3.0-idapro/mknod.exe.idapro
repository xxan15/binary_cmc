.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 3D34749920E9077F8A8D3A601D9363A4235D2C7C5527255CC419B2C204D25071
.text:00401000 ; Input MD5    : 7320C5B3450683EFDD42EAB89AB6837C
.text:00401000 ; Input CRC32  : 9E38EA9C
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/mknod.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A24A (Wed Apr 20 18:41:14 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 0000E210 (  57872.)
.text:00401000 ; Section size in file          : 0000E400 (  58368.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4018C0+63↓p
.text:00401040                                         ; .text:0040E030↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_40DFD0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_410000
.text:004010A2                 mov     edx, dword_410090
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_410004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4100B0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4100B0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_40DFA0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_410000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_410004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4018C0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_40DFD0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aMode           db 'mode',0             ; DATA XREF: .text:off_4012A0↓o
.text:00401285 aHelp           db 'help',0             ; DATA XREF: .text:004012B0↓o
.text:0040128A aVersion        db 'version',0          ; DATA XREF: .text:004012C0↓o
.text:00401292                 align 10h
.text:004012A0 off_4012A0      dd offset aMode         ; DATA XREF: sub_4018C0+78↓o
.text:004012A0                                         ; "mode"
.text:004012A4                 dd 1, 0
.text:004012AC                 dd 6Dh
.text:004012B0                 dd offset aHelp         ; "help"
.text:004012B4                 dd 2 dup(0)
.text:004012BC                 dd 0FFFFFF7Eh
.text:004012C0                 dd offset aVersion      ; "version"
.text:004012C4                 dd 2 dup(0)
.text:004012CC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004012E0 ; const char Locale
.text:004012E0 Locale          db 0                    ; DATA XREF: sub_4018C0+20↓o
.text:004012E1                 align 20h
.text:00401300 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401300                                         ; DATA XREF: sub_4018C0+3A↓o
.text:00401323 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4018C0+42↓o
.text:00401323                                         ; sub_4018C0+4F↓o
.text:0040132D ; const char aM[]
.text:0040132D aM              db 'm:',0               ; DATA XREF: sub_4018C0+80↓o
.text:00401330                 align 20h
.text:00401340 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401340                                         ; DATA XREF: sub_4018C0:loc_40197F↓o
.text:00401340                                         ; .text:0040201C↓o
.text:00401367 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_4018C0+10C↓o
.text:00401377 a530            db '5.3.0',0            ; DATA XREF: sub_4018C0+114↓o
.text:0040137D aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4018C0+11F↓o
.text:0040138B ; const FILE stru_40138B
.text:0040138B stru_40138B     FILE <6F6E6B6Dh, 0DEB0064h, 90909090h, 90909090h, 90909090h, \
.text:0040138B                                         ; DATA XREF: sub_4018C0+127↓o
.text:0040138B                       61735590h, 203A6567h, 5B207325h>
.text:004013AB                 db  4Fh ; O
.text:004013AC                 db  50h ; P
.text:004013AD                 db  54h ; T
.text:004013AE                 db  49h ; I
.text:004013AF                 db  4Fh ; O
.text:004013B0                 db  4Eh ; N
.text:004013B1                 db  5Dh ; ]
.text:004013B2                 db  2Eh ; .
.text:004013B3                 db  2Eh ; .
.text:004013B4                 db  2Eh ; .
.text:004013B5                 db  20h
.text:004013B6                 db  4Eh ; N
.text:004013B7                 db  41h ; A
.text:004013B8                 db  4Dh ; M
.text:004013B9                 db  45h ; E
.text:004013BA                 db  20h
.text:004013BB                 db  54h ; T
.text:004013BC                 db  59h ; Y
.text:004013BD                 db  50h ; P
.text:004013BE                 db  45h ; E
.text:004013BF                 db  20h
.text:004013C0                 db  5Bh ; [
.text:004013C1                 db  4Dh ; M
.text:004013C2                 db  41h ; A
.text:004013C3                 db  4Ah ; J
.text:004013C4                 db  4Fh ; O
.text:004013C5                 db  52h ; R
.text:004013C6                 db  20h
.text:004013C7                 db  4Dh ; M
.text:004013C8                 db  49h ; I
.text:004013C9                 db  4Eh ; N
.text:004013CA                 db  4Fh ; O
.text:004013CB                 db  52h ; R
.text:004013CC                 db  5Dh ; ]
.text:004013CD                 db  0Ah
.text:004013CE                 db    0
.text:004013CF                 align 20h
.text:004013E0 aCreateTheSpeci db 'Create the special file NAME of the given TYPE.',0Ah
.text:004013E0                                         ; DATA XREF: sub_4018C0+15F↓o
.text:004013E0                                         ; .text:0040206F↓o
.text:004013E0                 db 0Ah,0
.text:00401412                 align 10h
.text:00401420 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:00401420                                         ; DATA XREF: sub_4018C0+181↓o
.text:00401420                                         ; .text:00402091↓o
.text:00401420                 db 'ns too.',0Ah,0
.text:0040146A                 align 20h
.text:00401480 aMModeModeSetPe db '  -m, --mode=MODE   set permission mode (as in chmod), not a=rw -'
.text:00401480                                         ; DATA XREF: sub_4018C0+1A3↓o
.text:00401480                                         ; .text:004020B3↓o
.text:00401480                 db ' umask',0Ah,0
.text:004014C9                 align 20h
.text:004014E0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004014E0                                         ; DATA XREF: sub_4018C0+1C5↓o
.text:004014E0                                         ; .text:004020D5↓o
.text:0040150D                 align 20h
.text:00401520 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401520                                         ; DATA XREF: sub_4018C0+1E7↓o
.text:00401520                                         ; .text:004020F7↓o
.text:00401556                 align 10h
.text:00401560 aBothMajorAndMi db 0Ah                  ; DATA XREF: sub_4018C0+209↓o
.text:00401560                                         ; .text:00402119↓o
.text:00401560                 db 'Both MAJOR and MINOR must be specified when TYPE is b, c, or u, a'
.text:00401560                 db 'nd they',0Ah
.text:00401560                 db 'must be omitted when TYPE is p.  If MAJOR or MINOR begins with 0x'
.text:00401560                 db ' or 0X,',0Ah
.text:00401560                 db 'it is interpreted as hexadecimal; otherwise, if it begins with 0,'
.text:00401560                 db ' as octal;',0Ah
.text:00401560                 db 'otherwise, as decimal.  TYPE may be:',0Ah,0
.text:00401665                 align 20h
.text:00401680 aBCreateABlockB db 0Ah                  ; DATA XREF: sub_4018C0+22B↓o
.text:00401680                                         ; .text:0040213B↓o
.text:00401680                 db '  b      create a block (buffered) special file',0Ah
.text:00401680                 db '  c, u   create a character (unbuffered) special file',0Ah
.text:00401680                 db '  p      create a FIFO',0Ah,0
.text:004016FF aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4018C0+24D↓o
.text:004016FF                                         ; .text:0040215D↓o
.text:004016FF                 db 'Report bugs to <%s>.',0Ah,0
.text:00401716 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401716                                         ; DATA XREF: sub_4018C0+25A↓o
.text:00401716                                         ; .text:0040216A↓o
.text:0040172C aInvalidDeviceT db 'invalid device type %s',0
.text:0040172C                                         ; DATA XREF: sub_4018C0+33A↓o
.text:00401743                 align 20h
.text:00401760 aInvalidMajorDe db 'invalid major device number %s',0
.text:00401760                                         ; DATA XREF: sub_4018C0+3CD↓o
.text:0040177F                 align 10h
.text:00401780 aInvalidMinorDe db 'invalid minor device number %s',0
.text:00401780                                         ; DATA XREF: sub_4018C0+450↓o
.text:0040179F aCannotSetPermi db 'cannot set permissions of %s',0
.text:0040179F                                         ; DATA XREF: sub_4018C0+51C↓o
.text:004017BC ; const char aS[]
.text:004017BC aS              db '%s',0               ; DATA XREF: sub_4018C0+56D↓o
.text:004017BF aInvalidDeviceS db 'invalid device %s %s',0
.text:004017BF                                         ; DATA XREF: sub_4018C0:loc_401E4C↓o
.text:004017D4 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: sub_4018C0+606↓o
.text:004017E5                 align 20h
.text:00401800 aFifosDoNotHave db 'Fifos do not have major and minor device numbers.',0
.text:00401800                                         ; DATA XREF: sub_4018C0+64C↓o
.text:00401832 ; const char Format[]
.text:00401832 Format          db '%s',0Ah,0           ; DATA XREF: sub_4018C0+659↓o
.text:00401836 aMissingOperand db 'missing operand',0  ; DATA XREF: sub_4018C0+684↓o
.text:00401846                 align 20h
.text:00401860 aSpecialFilesRe db 'Special files require major and minor device numbers.',0
.text:00401860                                         ; DATA XREF: sub_4018C0+6C3↓o
.text:00401896 aMissingOperand_0 db 'missing operand after %s',0
.text:00401896                                         ; DATA XREF: sub_4018C0+6DC↓o
.text:004018AF aInvalidMode    db 'invalid mode',0     ; DATA XREF: sub_4018C0:loc_401FDC↓o
.text:004018BC                 align 10h
.text:004018C0
.text:004018C0 ; =============== S U B R O U T I N E =======================================
.text:004018C0
.text:004018C0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004018C0
.text:004018C0 sub_4018C0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004018C0
.text:004018C0 Category        = dword ptr -68h
.text:004018C0 Locale          = dword ptr -64h
.text:004018C0 var_60          = dword ptr -60h
.text:004018C0 var_5C          = byte ptr -5Ch
.text:004018C0 Str             = dword ptr -58h
.text:004018C0 var_54          = dword ptr -54h
.text:004018C0 var_48          = dword ptr -48h
.text:004018C0 var_44          = dword ptr -44h
.text:004018C0 var_40          = dword ptr -40h
.text:004018C0 var_3C          = dword ptr -3Ch
.text:004018C0 var_38          = dword ptr -38h
.text:004018C0 var_34          = dword ptr -34h
.text:004018C0 var_30          = dword ptr -30h
.text:004018C0 AccessMode      = dword ptr -2Ch
.text:004018C0 var_28          = dword ptr -28h
.text:004018C0 var_24          = dword ptr -24h
.text:004018C0 var_20          = dword ptr -20h
.text:004018C0 var_1C          = dword ptr -1Ch
.text:004018C0 var_18          = dword ptr -18h
.text:004018C0 var_14          = dword ptr -14h
.text:004018C0 arg_0           = dword ptr  8
.text:004018C0 arg_4           = dword ptr  0Ch
.text:004018C0
.text:004018C0                 push    ebp
.text:004018C1                 xor     eax, eax
.text:004018C3                 mov     ebp, esp
.text:004018C5                 push    edi
.text:004018C6                 push    esi
.text:004018C7                 push    ebx
.text:004018C8                 sub     esp, 5Ch
.text:004018CB                 mov     edi, [ebp+arg_4]
.text:004018CE                 and     esp, 0FFFFFFF0h
.text:004018D1                 mov     esi, [ebp+arg_0]
.text:004018D4                 call    __alloca
.text:004018D9                 call    sub_40E070
.text:004018DE                 mov     edx, [edi]
.text:004018E0                 mov     [esp+68h+Locale], offset Locale ; Locale
.text:004018E8                 mov     [esp+68h+Category], 0 ; Category
.text:004018EF                 mov     ds:dword_4114B0, edx
.text:004018F5                 call    setlocale
.text:004018FA                 mov     [esp+68h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401902                 mov     [esp+68h+Category], offset aCoreutils ; "coreutils"
.text:00401909                 call    ds:libintl_bindtextdomain
.text:0040190F                 mov     [esp+68h+Category], offset aCoreutils ; "coreutils"
.text:00401916                 call    ds:libintl_textdomain
.text:0040191C                 mov     [esp+68h+Category], offset sub_404B90 ; void (__cdecl *)()
.text:00401923                 call    sub_401040
.text:00401928                 mov     [ebp+var_30], 0
.text:0040192F                 nop
.text:00401930
.text:00401930 loc_401930:                             ; CODE XREF: sub_4018C0+BD↓j
.text:00401930                 mov     [esp+68h+Str], 0 ; int
.text:00401938                 mov     dword ptr [esp+68h+var_5C], offset off_4012A0 ; char
.text:00401940                 mov     [esp+68h+var_60], offset aM ; "m:"
.text:00401948                 mov     [esp+68h+Locale], edi ; int
.text:0040194C                 mov     [esp+68h+Category], esi ; int
.text:0040194F                 call    sub_404A20
.text:00401954                 cmp     eax, 0FFFFFFFFh
.text:00401957                 jz      loc_401B2F
.text:0040195D                 cmp     eax, 0FFFFFF7Eh
.text:00401962                 jz      loc_401A00
.text:00401968                 cmp     eax, 0FFFFFF7Eh
.text:0040196D                 jle     short loc_4019B7
.text:0040196F                 cmp     eax, 6Dh ; 'm'
.text:00401972                 jnz     short loc_40197F
.text:00401974                 mov     edx, ds:dword_4114D0
.text:0040197A                 mov     [ebp+var_30], edx
.text:0040197D                 jmp     short loc_401930
.text:0040197F ; ---------------------------------------------------------------------------
.text:0040197F
.text:0040197F loc_40197F:                             ; CODE XREF: sub_4018C0+B2↑j
.text:0040197F                                         ; sub_4018C0+FC↓j ...
.text:0040197F                 mov     [esp+68h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401986                 call    ds:libintl_gettext
.text:0040198C                 mov     edx, ds:_iob
.text:00401992                 mov     ecx, ds:dword_4114B0
.text:00401998                 add     edx, 40h ; '@'
.text:0040199B                 mov     [esp+68h+var_60], ecx
.text:0040199F                 mov     [esp+68h+Locale], eax ; Format
.text:004019A3                 mov     [esp+68h+Category], edx ; Stream
.text:004019A6                 call    fprintf
.text:004019AB                 mov     [esp+68h+Category], 1 ; Code
.text:004019B2
.text:004019B2 loc_4019B2:                             ; CODE XREF: sub_4018C0+13E↓j
.text:004019B2                 call    exit
.text:004019B7 ; ---------------------------------------------------------------------------
.text:004019B7
.text:004019B7 loc_4019B7:                             ; CODE XREF: sub_4018C0+AD↑j
.text:004019B7                 cmp     eax, 0FFFFFF7Dh
.text:004019BC                 jnz     short loc_40197F
.text:004019BE                 mov     [esp+68h+var_54], 0
.text:004019C6                 mov     edx, ds:_iob
.text:004019CC                 mov     [esp+68h+Str], offset aDavidMackenzie ; "David MacKenzie"
.text:004019D4                 mov     dword ptr [esp+68h+var_5C], offset a530 ; "5.3.0"
.text:004019DC                 add     edx, 20h ; ' '
.text:004019DF                 mov     [esp+68h+var_60], offset aGnuCoreutils ; "GNU coreutils"
.text:004019E7                 mov     [esp+68h+Locale], offset stru_40138B ; FILE *
.text:004019EF                 mov     [esp+68h+Category], edx ; FILE *
.text:004019F2                 call    sub_4049E0
.text:004019F7
.text:004019F7 loc_4019F7:                             ; CODE XREF: sub_4018C0+26A↓j
.text:004019F7                                         ; sub_4018C0+4E5↓j ...
.text:004019F7                 mov     [esp+68h+Category], 0
.text:004019FE                 jmp     short loc_4019B2
.text:00401A00 ; ---------------------------------------------------------------------------
.text:00401A00
.text:00401A00 loc_401A00:                             ; CODE XREF: sub_4018C0+A2↑j
.text:00401A00                 mov     [esp+68h+Category], (offset stru_40138B._charbuf+1)
.text:00401A07                 call    ds:libintl_gettext
.text:00401A0D                 mov     edi, ds:dword_4114B0
.text:00401A13                 mov     [esp+68h+Category], eax ; Format
.text:00401A16                 mov     [esp+68h+Locale], edi
.text:00401A1A                 call    printf
.text:00401A1F                 mov     [esp+68h+Category], offset aCreateTheSpeci ; "Create the special file NAME of the giv"...
.text:00401A26                 call    ds:libintl_gettext
.text:00401A2C                 mov     esi, ds:_iob
.text:00401A32                 add     esi, 20h ; ' '
.text:00401A35                 mov     [esp+68h+Locale], esi ; Stream
.text:00401A39                 mov     [esp+68h+Category], eax ; Buffer
.text:00401A3C                 call    fputs
.text:00401A41                 mov     [esp+68h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401A48                 call    ds:libintl_gettext
.text:00401A4E                 mov     ebx, ds:_iob
.text:00401A54                 add     ebx, 20h ; ' '
.text:00401A57                 mov     [esp+68h+Locale], ebx ; Stream
.text:00401A5B                 mov     [esp+68h+Category], eax ; Buffer
.text:00401A5E                 call    fputs
.text:00401A63                 mov     [esp+68h+Category], offset aMModeModeSetPe ; "  -m, --mode=MODE   set permission mode"...
.text:00401A6A                 call    ds:libintl_gettext
.text:00401A70                 mov     ecx, ds:_iob
.text:00401A76                 add     ecx, 20h ; ' '
.text:00401A79                 mov     [esp+68h+Locale], ecx ; Stream
.text:00401A7D                 mov     [esp+68h+Category], eax ; Buffer
.text:00401A80                 call    fputs
.text:00401A85                 mov     [esp+68h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401A8C                 call    ds:libintl_gettext
.text:00401A92                 mov     edi, ds:_iob
.text:00401A98                 add     edi, 20h ; ' '
.text:00401A9B                 mov     [esp+68h+Locale], edi ; Stream
.text:00401A9F                 mov     [esp+68h+Category], eax ; Buffer
.text:00401AA2                 call    fputs
.text:00401AA7                 mov     [esp+68h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401AAE                 call    ds:libintl_gettext
.text:00401AB4                 mov     esi, ds:_iob
.text:00401ABA                 add     esi, 20h ; ' '
.text:00401ABD                 mov     [esp+68h+Locale], esi ; Stream
.text:00401AC1                 mov     [esp+68h+Category], eax ; Buffer
.text:00401AC4                 call    fputs
.text:00401AC9                 mov     [esp+68h+Category], offset aBothMajorAndMi ; "\nBoth MAJOR and MINOR must be specifie"...
.text:00401AD0                 call    ds:libintl_gettext
.text:00401AD6                 mov     ebx, ds:_iob
.text:00401ADC                 add     ebx, 20h ; ' '
.text:00401ADF                 mov     [esp+68h+Locale], ebx ; Stream
.text:00401AE3                 mov     [esp+68h+Category], eax ; Buffer
.text:00401AE6                 call    fputs
.text:00401AEB                 mov     [esp+68h+Category], offset aBCreateABlockB ; "\n  b      create a block (buffered) sp"...
.text:00401AF2                 call    ds:libintl_gettext
.text:00401AF8                 mov     ecx, ds:_iob
.text:00401AFE                 add     ecx, 20h ; ' '
.text:00401B01                 mov     [esp+68h+Locale], ecx ; Stream
.text:00401B05                 mov     [esp+68h+Category], eax ; Buffer
.text:00401B08                 call    fputs
.text:00401B0D                 mov     [esp+68h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401B14                 call    ds:libintl_gettext
.text:00401B1A                 mov     [esp+68h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401B22                 mov     [esp+68h+Category], eax ; Format
.text:00401B25                 call    printf
.text:00401B2A                 jmp     loc_4019F7
.text:00401B2F ; ---------------------------------------------------------------------------
.text:00401B2F
.text:00401B2F loc_401B2F:                             ; CODE XREF: sub_4018C0+97↑j
.text:00401B2F                 mov     [ebp+AccessMode], 1B6h
.text:00401B36                 mov     ecx, [ebp+var_30]
.text:00401B39                 test    ecx, ecx
.text:00401B3B                 jz      short loc_401B91
.text:00401B3D                 mov     [esp+68h+Category], 0 ; Mode
.text:00401B44                 call    _umask
.text:00401B49                 mov     [ebp+AccessMode], eax
.text:00401B4C                 mov     eax, [ebp+var_30]
.text:00401B4F                 not     [ebp+AccessMode]
.text:00401B52                 mov     [esp+68h+Locale], 0
.text:00401B5A                 mov     [esp+68h+Category], eax
.text:00401B5D                 and     [ebp+AccessMode], 1B6h
.text:00401B64                 call    sub_402190
.text:00401B69                 test    eax, eax
.text:00401B6B                 mov     ebx, eax
.text:00401B6D                 jz      loc_401FDC
.text:00401B73                 cmp     eax, 1
.text:00401B76                 jz      loc_402006
.text:00401B7C
.text:00401B7C loc_401B7C:                             ; CODE XREF: sub_4018C0+741↓j
.text:00401B7C                 mov     [esp+68h+Locale], ebx
.text:00401B80                 mov     edx, [ebp+AccessMode]
.text:00401B83                 mov     [esp+68h+Category], edx
.text:00401B86                 call    sub_402560
.text:00401B8B                 movzx   ebx, ax
.text:00401B8E                 mov     [ebp+AccessMode], ebx
.text:00401B91
.text:00401B91 loc_401B91:                             ; CODE XREF: sub_4018C0+27B↑j
.text:00401B91                 mov     edx, dword_410010
.text:00401B97                 cmp     esi, edx
.text:00401B99                 jle     loc_401FD0
.text:00401B9F                 lea     ecx, [edx+1]
.text:00401BA2                 cmp     ecx, esi
.text:00401BA4                 jge     short loc_401BB3
.text:00401BA6                 mov     ebx, [edi+edx*4+4]
.text:00401BAA                 cmp     byte ptr [ebx], 70h ; 'p'
.text:00401BAD                 jz      loc_401FD0
.text:00401BB3
.text:00401BB3 loc_401BB3:                             ; CODE XREF: sub_4018C0+2E4↑j
.text:00401BB3                 mov     [ebp+var_34], 4
.text:00401BBA
.text:00401BBA loc_401BBA:                             ; CODE XREF: sub_4018C0+717↓j
.text:00401BBA                 mov     eax, esi
.text:00401BBC                 sub     eax, edx
.text:00401BBE                 cmp     eax, [ebp+var_34]
.text:00401BC1                 jl      loc_401F40
.text:00401BC7                 cmp     [ebp+var_34], eax
.text:00401BCA                 jl      loc_401EB5
.text:00401BD0                 mov     ecx, [edi+edx*4+4]
.text:00401BD4                 movsx   eax, byte ptr [ecx]
.text:00401BD7                 cmp     eax, 63h ; 'c'
.text:00401BDA                 jz      loc_401E92
.text:00401BE0                 cmp     eax, 63h ; 'c'
.text:00401BE3                 jg      loc_401E84
.text:00401BE9                 cmp     eax, 62h ; 'b'
.text:00401BEC                 jz      short loc_401C2A
.text:00401BEE
.text:00401BEE loc_401BEE:                             ; CODE XREF: sub_4018C0+5CC↓j
.text:00401BEE                 mov     esi, [edi+edx*4+4]
.text:00401BF2                 mov     [esp+68h+Category], esi ; char *
.text:00401BF5                 call    sub_404490
.text:00401BFA                 mov     [esp+68h+Category], offset aInvalidDeviceT ; "invalid device type %s"
.text:00401C01                 mov     edi, eax
.text:00401C03                 call    ds:libintl_gettext
.text:00401C09                 mov     dword ptr [esp+68h+var_5C], edi ; char
.text:00401C0D                 mov     [esp+68h+Locale], 0 ; ErrorMessage
.text:00401C15                 mov     [esp+68h+Category], 0 ; Code
.text:00401C1C                 mov     [esp+68h+var_60], eax ; char *
.text:00401C20                 call    sub_406910
.text:00401C25                 jmp     loc_40197F
.text:00401C2A ; ---------------------------------------------------------------------------
.text:00401C2A
.text:00401C2A loc_401C2A:                             ; CODE XREF: sub_4018C0+32C↑j
.text:00401C2A                 mov     [ebp+var_38], 6000h
.text:00401C31
.text:00401C31 loc_401C31:                             ; CODE XREF: sub_4018C0+5D9↓j
.text:00401C31                 mov     esi, [edi+edx*4+8]
.text:00401C35                 mov     ebx, [edi+edx*4+0Ch]
.text:00401C39                 lea     edx, [ebp+var_18]
.text:00401C3C                 mov     [ebp+var_3C], esi
.text:00401C3F                 mov     eax, [ebp+var_3C]
.text:00401C42                 mov     [ebp+var_40], ebx
.text:00401C45                 mov     [esp+68h+Str], 0 ; Str
.text:00401C4D                 mov     dword ptr [esp+68h+var_5C], edx ; int
.text:00401C51                 mov     [esp+68h+var_60], 0 ; int
.text:00401C59                 mov     [esp+68h+Locale], 0 ; int
.text:00401C61                 mov     [esp+68h+Category], eax ; int
.text:00401C64                 call    sub_4037D0
.text:00401C69                 test    eax, eax
.text:00401C6B                 jnz     short loc_401C82
.text:00401C6D                 mov     edx, [ebp+var_14]
.text:00401C70                 xor     ebx, ebx
.text:00401C72                 mov     ecx, [ebp+var_18]
.text:00401C75                 mov     eax, [ebp+var_18]
.text:00401C78                 mov     esi, edx
.text:00401C7A                 xor     esi, ebx
.text:00401C7C                 xor     eax, ecx
.text:00401C7E                 or      esi, eax
.text:00401C80                 jz      short loc_401CB8
.text:00401C82
.text:00401C82 loc_401C82:                             ; CODE XREF: sub_4018C0+3AB↑j
.text:00401C82                 mov     eax, [ebp+var_3C]
.text:00401C85                 mov     [esp+68h+Category], eax ; char *
.text:00401C88                 call    sub_404490
.text:00401C8D                 mov     [esp+68h+Category], offset aInvalidMajorDe ; "invalid major device number %s"
.text:00401C94                 mov     esi, eax
.text:00401C96                 call    ds:libintl_gettext
.text:00401C9C                 mov     dword ptr [esp+68h+var_5C], esi ; char
.text:00401CA0                 mov     [esp+68h+Locale], 0 ; ErrorMessage
.text:00401CA8                 mov     [esp+68h+Category], 1 ; Code
.text:00401CAF                 mov     [esp+68h+var_60], eax ; char *
.text:00401CB3                 call    sub_406910
.text:00401CB8
.text:00401CB8 loc_401CB8:                             ; CODE XREF: sub_4018C0+3C0↑j
.text:00401CB8                 mov     [esp+68h+Str], 0 ; Str
.text:00401CC0                 mov     ecx, [ebp+var_40]
.text:00401CC3                 lea     edx, [ebp+var_20]
.text:00401CC6                 mov     dword ptr [esp+68h+var_5C], edx ; int
.text:00401CCA                 mov     [esp+68h+var_60], 0 ; int
.text:00401CD2                 mov     [esp+68h+Locale], 0 ; int
.text:00401CDA                 mov     [esp+68h+Category], ecx ; int
.text:00401CDD                 call    sub_4037D0
.text:00401CE2                 test    eax, eax
.text:00401CE4                 jnz     short loc_401D05
.text:00401CE6                 mov     edx, [ebp+var_1C]
.text:00401CE9                 xor     eax, eax
.text:00401CEB                 mov     ebx, [ebp+var_20]
.text:00401CEE                 mov     esi, [ebp+var_20]
.text:00401CF1                 mov     [ebp+var_44], edx
.text:00401CF4                 mov     [ebp+var_48], ebx
.text:00401CF7                 mov     ebx, [ebp+var_44]
.text:00401CFA                 xor     ebx, eax
.text:00401CFC                 mov     eax, [ebp+var_48]
.text:00401CFF                 xor     esi, eax
.text:00401D01                 or      ebx, esi
.text:00401D03                 jz      short loc_401D47
.text:00401D05
.text:00401D05 loc_401D05:                             ; CODE XREF: sub_4018C0+424↑j
.text:00401D05                 mov     eax, [ebp+var_40]
.text:00401D08                 mov     [esp+68h+Category], eax ; char *
.text:00401D0B                 call    sub_404490
.text:00401D10                 mov     [esp+68h+Category], offset aInvalidMinorDe ; "invalid minor device number %s"
.text:00401D17                 mov     esi, eax
.text:00401D19                 call    ds:libintl_gettext
.text:00401D1F                 mov     dword ptr [esp+68h+var_5C], esi ; char
.text:00401D23                 mov     [esp+68h+Locale], 0 ; ErrorMessage
.text:00401D2B                 mov     [esp+68h+Category], 1 ; Code
.text:00401D32                 mov     [esp+68h+var_60], eax ; char *
.text:00401D36                 call    sub_406910
.text:00401D3B                 mov     esi, [ebp+var_20]
.text:00401D3E                 mov     ecx, [ebp+var_1C]
.text:00401D41                 mov     [ebp+var_48], esi
.text:00401D44                 mov     [ebp+var_44], ecx
.text:00401D47
.text:00401D47 loc_401D47:                             ; CODE XREF: sub_4018C0+443↑j
.text:00401D47                 mov     esi, [ebp+var_18]
.text:00401D4A                 mov     ecx, [ebp+var_14]
.text:00401D4D                 mov     ebx, [ebp+var_48]
.text:00401D50                 shld    ecx, esi, 8
.text:00401D54                 shl     esi, 8
.text:00401D57                 or      ebx, esi
.text:00401D59                 mov     esi, [ebp+var_44]
.text:00401D5C                 mov     edx, ebx
.text:00401D5E                 or      esi, ecx
.text:00401D60                 and     edx, esi
.text:00401D62                 inc     edx
.text:00401D63                 jz      loc_401E4C
.text:00401D69
.text:00401D69 loc_401D69:                             ; CODE XREF: sub_4018C0+5BF↓j
.text:00401D69                 mov     [ebp+var_28], ebx
.text:00401D6C                 mov     ecx, dword_410010
.text:00401D72                 mov     [ebp+var_24], esi
.text:00401D75                 lea     esi, [ebp+var_28]
.text:00401D78                 mov     edx, [edi+ecx*4]
.text:00401D7B                 mov     dword ptr [esp+68h+var_5C], esi
.text:00401D7F                 mov     ecx, [ebp+AccessMode]
.text:00401D82                 or      [ebp+var_38], ecx
.text:00401D85                 mov     [esp+68h+Locale], edx
.text:00401D89                 mov     [esp+68h+Category], 0
.text:00401D90                 mov     ebx, [ebp+var_38]
.text:00401D93                 mov     [esp+68h+var_60], ebx
.text:00401D97                 call    sub_406CC0
.text:00401D9C
.text:00401D9C loc_401D9C:                             ; CODE XREF: sub_4018C0+5F0↓j
.text:00401D9C                 test    eax, eax
.text:00401D9E                 jnz     short loc_401E11
.text:00401DA0
.text:00401DA0 loc_401DA0:                             ; CODE XREF: sub_4018C0+587↓j
.text:00401DA0                 mov     ebx, [ebp+var_30]
.text:00401DA3                 test    ebx, ebx
.text:00401DA5                 jz      loc_4019F7
.text:00401DAB                 mov     ecx, [ebp+AccessMode]
.text:00401DAE                 mov     edx, dword_410010
.text:00401DB4                 mov     [esp+68h+Locale], ecx ; AccessMode
.text:00401DB8                 mov     esi, [edi+edx*4]
.text:00401DBB                 mov     [esp+68h+Category], esi ; FileName
.text:00401DBE                 call    _chmod
.text:00401DC3                 test    eax, eax
.text:00401DC5                 jz      loc_4019F7
.text:00401DCB                 mov     edx, dword_410010
.text:00401DD1                 mov     esi, [edi+edx*4]
.text:00401DD4                 mov     [esp+68h+Category], esi ; char *
.text:00401DD7                 call    sub_404490
.text:00401DDC                 mov     [esp+68h+Category], offset aCannotSetPermi ; "cannot set permissions of %s"
.text:00401DE3                 mov     ebx, eax
.text:00401DE5                 call    ds:libintl_gettext
.text:00401DEB                 mov     edi, eax
.text:00401DED                 call    _errno
.text:00401DF2                 mov     dword ptr [esp+68h+var_5C], ebx ; char
.text:00401DF6                 mov     [esp+68h+var_60], edi ; char *
.text:00401DFA                 mov     edi, [eax]
.text:00401DFC                 mov     [esp+68h+Category], 0 ; Code
.text:00401E03                 mov     [esp+68h+Locale], edi ; ErrorMessage
.text:00401E07                 call    sub_406910
.text:00401E0C                 jmp     loc_4019F7
.text:00401E11 ; ---------------------------------------------------------------------------
.text:00401E11
.text:00401E11 loc_401E11:                             ; CODE XREF: sub_4018C0+4DE↑j
.text:00401E11                 mov     ebx, dword_410010
.text:00401E17                 mov     ecx, [edi+ebx*4]
.text:00401E1A                 mov     [esp+68h+Category], ecx ; char *
.text:00401E1D                 call    sub_404490
.text:00401E22                 mov     esi, eax
.text:00401E24                 call    _errno
.text:00401E29                 mov     dword ptr [esp+68h+var_5C], esi ; char
.text:00401E2D                 mov     [esp+68h+var_60], offset aS ; "%s"
.text:00401E35                 mov     edx, [eax]
.text:00401E37                 mov     [esp+68h+Category], 1 ; Code
.text:00401E3E                 mov     [esp+68h+Locale], edx ; ErrorMessage
.text:00401E42                 call    sub_406910
.text:00401E47                 jmp     loc_401DA0
.text:00401E4C ; ---------------------------------------------------------------------------
.text:00401E4C
.text:00401E4C loc_401E4C:                             ; CODE XREF: sub_4018C0+4A3↑j
.text:00401E4C                 mov     [esp+68h+Category], offset aInvalidDeviceS ; "invalid device %s %s"
.text:00401E53                 call    ds:libintl_gettext
.text:00401E59                 mov     [esp+68h+Locale], 0 ; ErrorMessage
.text:00401E61                 mov     ecx, [ebp+var_40]
.text:00401E64                 mov     edx, [ebp+var_3C]
.text:00401E67                 mov     [esp+68h+Category], 1 ; Code
.text:00401E6E                 mov     [esp+68h+Str], ecx
.text:00401E72                 mov     dword ptr [esp+68h+var_5C], edx ; char
.text:00401E76                 mov     [esp+68h+var_60], eax ; char *
.text:00401E7A                 call    sub_406910
.text:00401E7F                 jmp     loc_401D69
.text:00401E84 ; ---------------------------------------------------------------------------
.text:00401E84
.text:00401E84 loc_401E84:                             ; CODE XREF: sub_4018C0+323↑j
.text:00401E84                 cmp     eax, 70h ; 'p'
.text:00401E87                 jz      short loc_401E9E
.text:00401E89                 cmp     eax, 75h ; 'u'
.text:00401E8C                 jnz     loc_401BEE
.text:00401E92
.text:00401E92 loc_401E92:                             ; CODE XREF: sub_4018C0+31A↑j
.text:00401E92                 mov     [ebp+var_38], 2000h
.text:00401E99                 jmp     loc_401C31
.text:00401E9E ; ---------------------------------------------------------------------------
.text:00401E9E
.text:00401E9E loc_401E9E:                             ; CODE XREF: sub_4018C0+5C7↑j
.text:00401E9E                 mov     eax, [ebp+AccessMode]
.text:00401EA1                 mov     [esp+68h+Locale], eax ; __int16
.text:00401EA5                 mov     ebx, [edi+edx*4]
.text:00401EA8                 mov     [esp+68h+Category], ebx ; char *
.text:00401EAB                 call    sub_406BB0
.text:00401EB0                 jmp     loc_401D9C
.text:00401EB5 ; ---------------------------------------------------------------------------
.text:00401EB5
.text:00401EB5 loc_401EB5:                             ; CODE XREF: sub_4018C0+30A↑j
.text:00401EB5                 mov     ecx, [ebp+var_34]
.text:00401EB8                 lea     eax, [ecx+edx]
.text:00401EBB                 mov     ecx, [edi+eax*4]
.text:00401EBE                 mov     [esp+68h+Category], ecx ; char *
.text:00401EC1                 call    sub_404490
.text:00401EC6                 mov     [esp+68h+Category], offset aExtraOperandS ; "extra operand %s"
.text:00401ECD                 mov     edi, eax
.text:00401ECF                 call    ds:libintl_gettext
.text:00401ED5                 mov     dword ptr [esp+68h+var_5C], edi ; char
.text:00401ED9                 mov     [esp+68h+Locale], 0 ; ErrorMessage
.text:00401EE1                 mov     [esp+68h+Category], 0 ; Code
.text:00401EE8                 mov     [esp+68h+var_60], eax ; char *
.text:00401EEC                 call    sub_406910
.text:00401EF1                 cmp     [ebp+var_34], 2
.text:00401EF5                 jnz     loc_40197F
.text:00401EFB                 mov     ebx, dword_410010
.text:00401F01                 sub     esi, ebx
.text:00401F03                 cmp     esi, 4
.text:00401F06                 jnz     loc_40197F
.text:00401F0C                 mov     [esp+68h+Category], offset aFifosDoNotHave ; "Fifos do not have major and minor devic"...
.text:00401F13
.text:00401F13 loc_401F13:                             ; CODE XREF: sub_4018C0+6CA↓j
.text:00401F13                 call    ds:libintl_gettext
.text:00401F19                 mov     [esp+68h+Locale], offset Format ; "%s\n"
.text:00401F21                 mov     esi, ds:_iob
.text:00401F27                 add     esi, 40h ; '@'
.text:00401F2A                 mov     [esp+68h+var_60], eax
.text:00401F2E                 mov     [esp+68h+Category], esi ; Stream
.text:00401F31                 call    fprintf
.text:00401F36                 jmp     loc_40197F
.text:00401F36 ; ---------------------------------------------------------------------------
.text:00401F3B                 align 10h
.text:00401F40
.text:00401F40 loc_401F40:                             ; CODE XREF: sub_4018C0+301↑j
.text:00401F40                 cmp     esi, edx
.text:00401F42                 jg      short loc_401F90
.text:00401F44                 mov     [esp+68h+Category], offset aMissingOperand ; "missing operand"
.text:00401F4B                 call    ds:libintl_gettext
.text:00401F51                 mov     [esp+68h+Locale], 0 ; ErrorMessage
.text:00401F59                 mov     [esp+68h+Category], 0 ; Code
.text:00401F60                 mov     [esp+68h+var_60], eax ; char *
.text:00401F64                 call    sub_406910
.text:00401F69
.text:00401F69 loc_401F69:                             ; CODE XREF: sub_4018C0+707↓j
.text:00401F69                 cmp     [ebp+var_34], 4
.text:00401F6D                 jnz     loc_40197F
.text:00401F73                 mov     eax, dword_410010
.text:00401F78                 sub     esi, eax
.text:00401F7A                 cmp     esi, 2
.text:00401F7D                 jnz     loc_40197F
.text:00401F83                 mov     [esp+68h+Category], offset aSpecialFilesRe ; "Special files require major and minor d"...
.text:00401F8A                 jmp     short loc_401F13
.text:00401F8A ; ---------------------------------------------------------------------------
.text:00401F8C                 align 10h
.text:00401F90
.text:00401F90 loc_401F90:                             ; CODE XREF: sub_4018C0+682↑j
.text:00401F90                 mov     edx, [edi+esi*4-4]
.text:00401F94                 mov     [esp+68h+Category], edx ; char *
.text:00401F97                 call    sub_404490
.text:00401F9C                 mov     [esp+68h+Category], offset aMissingOperand_0 ; "missing operand after %s"
.text:00401FA3                 mov     edi, eax
.text:00401FA5                 call    ds:libintl_gettext
.text:00401FAB                 mov     dword ptr [esp+68h+var_5C], edi ; char
.text:00401FAF                 mov     [esp+68h+Locale], 0 ; ErrorMessage
.text:00401FB7                 mov     [esp+68h+Category], 0 ; Code
.text:00401FBE                 mov     [esp+68h+var_60], eax ; char *
.text:00401FC2                 call    sub_406910
.text:00401FC7                 jmp     short loc_401F69
.text:00401FC7 ; ---------------------------------------------------------------------------
.text:00401FC9                 align 10h
.text:00401FD0
.text:00401FD0 loc_401FD0:                             ; CODE XREF: sub_4018C0+2D9↑j
.text:00401FD0                                         ; sub_4018C0+2ED↑j
.text:00401FD0                 mov     [ebp+var_34], 2
.text:00401FD7                 jmp     loc_401BBA
.text:00401FDC ; ---------------------------------------------------------------------------
.text:00401FDC
.text:00401FDC loc_401FDC:                             ; CODE XREF: sub_4018C0+2AD↑j
.text:00401FDC                 mov     [esp+68h+Category], offset aInvalidMode ; "invalid mode"
.text:00401FE3                 call    ds:libintl_gettext
.text:00401FE9                 mov     [esp+68h+Locale], 0 ; ErrorMessage
.text:00401FF1                 mov     [esp+68h+Category], 1 ; Code
.text:00401FF8                 mov     [esp+68h+var_60], eax ; char *
.text:00401FFC                 call    sub_406910
.text:00402001                 jmp     loc_401B7C
.text:00402006 ; ---------------------------------------------------------------------------
.text:00402006
.text:00402006 loc_402006:                             ; CODE XREF: sub_4018C0+2B6↑j
.text:00402006                 call    sub_4044E0
.text:00402006 sub_4018C0      endp
.text:00402006
.text:00402006 ; ---------------------------------------------------------------------------
.text:0040200B                 align 10h
.text:00402010                 push    ebx
.text:00402011                 sub     esp, 18h
.text:00402014                 mov     ebx, [esp+20h]
.text:00402018                 test    ebx, ebx
.text:0040201A                 jz      short loc_402050
.text:0040201C                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402023                 call    ds:libintl_gettext
.text:00402029                 mov     edx, ds:_iob
.text:0040202F                 mov     ecx, ds:dword_4114B0
.text:00402035                 add     edx, 40h ; '@'
.text:00402038                 mov     [esp+8], ecx
.text:0040203C                 mov     [esp+4], eax
.text:00402040                 mov     [esp], edx
.text:00402043                 call    fprintf
.text:00402048
.text:00402048 loc_402048:                             ; CODE XREF: .text:0040217A↓j
.text:00402048                 mov     [esp], ebx
.text:0040204B                 call    exit
.text:00402050 ; ---------------------------------------------------------------------------
.text:00402050
.text:00402050 loc_402050:                             ; CODE XREF: .text:0040201A↑j
.text:00402050                 mov     dword ptr [esp], (offset stru_40138B._charbuf+1)
.text:00402057                 call    ds:libintl_gettext
.text:0040205D                 mov     ecx, ds:dword_4114B0
.text:00402063                 mov     [esp], eax
.text:00402066                 mov     [esp+4], ecx
.text:0040206A                 call    printf
.text:0040206F                 mov     dword ptr [esp], offset aCreateTheSpeci ; "Create the special file NAME of the giv"...
.text:00402076                 call    ds:libintl_gettext
.text:0040207C                 mov     ecx, ds:_iob
.text:00402082                 add     ecx, 20h ; ' '
.text:00402085                 mov     [esp+4], ecx
.text:00402089                 mov     [esp], eax
.text:0040208C                 call    fputs
.text:00402091                 mov     dword ptr [esp], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00402098                 call    ds:libintl_gettext
.text:0040209E                 mov     ecx, ds:_iob
.text:004020A4                 add     ecx, 20h ; ' '
.text:004020A7                 mov     [esp+4], ecx
.text:004020AB                 mov     [esp], eax
.text:004020AE                 call    fputs
.text:004020B3                 mov     dword ptr [esp], offset aMModeModeSetPe ; "  -m, --mode=MODE   set permission mode"...
.text:004020BA                 call    ds:libintl_gettext
.text:004020C0                 mov     ecx, ds:_iob
.text:004020C6                 add     ecx, 20h ; ' '
.text:004020C9                 mov     [esp+4], ecx
.text:004020CD                 mov     [esp], eax
.text:004020D0                 call    fputs
.text:004020D5                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004020DC                 call    ds:libintl_gettext
.text:004020E2                 mov     ecx, ds:_iob
.text:004020E8                 add     ecx, 20h ; ' '
.text:004020EB                 mov     [esp+4], ecx
.text:004020EF                 mov     [esp], eax
.text:004020F2                 call    fputs
.text:004020F7                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:004020FE                 call    ds:libintl_gettext
.text:00402104                 mov     ecx, ds:_iob
.text:0040210A                 add     ecx, 20h ; ' '
.text:0040210D                 mov     [esp+4], ecx
.text:00402111                 mov     [esp], eax
.text:00402114                 call    fputs
.text:00402119                 mov     dword ptr [esp], offset aBothMajorAndMi ; "\nBoth MAJOR and MINOR must be specifie"...
.text:00402120                 call    ds:libintl_gettext
.text:00402126                 mov     ecx, ds:_iob
.text:0040212C                 add     ecx, 20h ; ' '
.text:0040212F                 mov     [esp+4], ecx
.text:00402133                 mov     [esp], eax
.text:00402136                 call    fputs
.text:0040213B                 mov     dword ptr [esp], offset aBCreateABlockB ; "\n  b      create a block (buffered) sp"...
.text:00402142                 call    ds:libintl_gettext
.text:00402148                 mov     ecx, ds:_iob
.text:0040214E                 add     ecx, 20h ; ' '
.text:00402151                 mov     [esp+4], ecx
.text:00402155                 mov     [esp], eax
.text:00402158                 call    fputs
.text:0040215D                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402164                 call    ds:libintl_gettext
.text:0040216A                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402172                 mov     [esp], eax
.text:00402175                 call    printf
.text:0040217A                 jmp     loc_402048
.text:0040217A ; ---------------------------------------------------------------------------
.text:0040217F                 align 10h
.text:00402180 ; const char dword_402180[]
.text:00402180 dword_402180    dd 900DEB00h, 3 dup(90909090h)
.text:00402180                                         ; DATA XREF: sub_402190+17↓o
.text:00402190
.text:00402190 ; =============== S U B R O U T I N E =======================================
.text:00402190
.text:00402190
.text:00402190 sub_402190      proc near               ; CODE XREF: sub_4018C0+2A4↑p
.text:00402190
.text:00402190 Size            = dword ptr -3Ch
.text:00402190 var_38          = dword ptr -38h
.text:00402190 var_34          = dword ptr -34h
.text:00402190 var_30          = dword ptr -30h
.text:00402190 Str             = dword ptr -2Ch
.text:00402190 var_25          = byte ptr -25h
.text:00402190 var_24          = dword ptr -24h
.text:00402190 var_20          = dword ptr -20h
.text:00402190 var_1C          = dword ptr -1Ch
.text:00402190 var_18          = dword ptr -18h
.text:00402190 var_14          = dword ptr -14h
.text:00402190 arg_0           = dword ptr  4
.text:00402190 arg_4           = dword ptr  8
.text:00402190
.text:00402190                 push    ebp
.text:00402191                 push    edi
.text:00402192                 push    esi
.text:00402193                 push    ebx
.text:00402194                 sub     esp, 2Ch
.text:00402197                 mov     esi, [esp+3Ch+arg_0]
.text:0040219B                 mov     [esp+3Ch+var_18], 0
.text:004021A3                 lea     edx, [esp+3Ch+var_14]
.text:004021A7                 mov     [esp+3Ch+Str], offset dword_402180 ; Str
.text:004021AF                 mov     [esp+3Ch+var_30], edx ; int
.text:004021B3                 mov     [esp+3Ch+var_34], 8 ; int
.text:004021BB                 mov     [esp+3Ch+var_38], 0 ; int
.text:004021C3                 mov     [esp+3Ch+Size], esi ; int
.text:004021C6                 call    sub_404CE0
.text:004021CB                 test    eax, eax
.text:004021CD                 jnz     short loc_402227
.text:004021CF                 mov     edx, [esp+3Ch+var_14]
.text:004021D3                 and     edx, 0FFFh
.text:004021D9                 cmp     edx, [esp+3Ch+var_14]
.text:004021DD                 jnz     short loc_402223
.text:004021DF                 movzx   ebx, word ptr [esp+3Ch+var_14]
.text:004021E4                 mov     [esp+3Ch+Size], 0Ch ; Size
.text:004021EB                 call    malloc
.text:004021F0                 xor     edx, edx
.text:004021F2                 test    eax, eax
.text:004021F4                 jz      short loc_402210
.text:004021F6                 mov     dword ptr [eax+8], 0
.text:004021FD                 mov     edx, eax
.text:004021FF                 mov     byte ptr [eax], 3Dh ; '='
.text:00402202                 mov     byte ptr [eax+1], 0
.text:00402206                 mov     [eax+4], bx
.text:0040220A                 mov     word ptr [eax+2], 0FFFh
.text:00402210
.text:00402210 loc_402210:                             ; CODE XREF: sub_402190+64↑j
.text:00402210                 test    edx, edx
.text:00402212                 mov     eax, 1
.text:00402217                 jz      short loc_40221B
.text:00402219                 mov     eax, edx
.text:0040221B
.text:0040221B loc_40221B:                             ; CODE XREF: sub_402190+87↑j
.text:0040221B                                         ; sub_402190+95↓j ...
.text:0040221B                 add     esp, 2Ch
.text:0040221E                 pop     ebx
.text:0040221F                 pop     esi
.text:00402220                 pop     edi
.text:00402221                 pop     ebp
.text:00402222                 retn
.text:00402223 ; ---------------------------------------------------------------------------
.text:00402223
.text:00402223 loc_402223:                             ; CODE XREF: sub_402190+4D↑j
.text:00402223                                         ; sub_402190+133↓j
.text:00402223                 xor     eax, eax
.text:00402225                 jmp     short loc_40221B
.text:00402227 ; ---------------------------------------------------------------------------
.text:00402227
.text:00402227 loc_402227:                             ; CODE XREF: sub_402190+3D↑j
.text:00402227                 mov     [esp+3Ch+Size], 0 ; Mode
.text:0040222E                 call    _umask
.text:00402233                 movzx   ecx, ax
.text:00402236                 mov     [esp+3Ch+var_20], ecx
.text:0040223A                 mov     [esp+3Ch+Size], ecx ; Mode
.text:0040223D                 call    _umask
.text:00402242
.text:00402242 loc_402242:                             ; CODE XREF: sub_402190+119↓j
.text:00402242                 mov     [esp+3Ch+var_24], 0
.text:0040224A                 xor     ebp, ebp
.text:0040224C                 lea     esi, [esi+0]
.text:00402250
.text:00402250 loc_402250:                             ; CODE XREF: sub_402190+E6↓j
.text:00402250                 movzx   edx, byte ptr [esi]
.text:00402253                 movsx   eax, dl
.text:00402256                 mov     cl, dl
.text:00402258                 cmp     eax, 67h ; 'g'
.text:0040225B                 jz      loc_402554
.text:00402261                 cmp     eax, 67h ; 'g'
.text:00402264                 jg      loc_402530
.text:0040226A                 cmp     eax, 61h ; 'a'
.text:0040226D                 jnz     short loc_402278
.text:0040226F                 or      ebp, 0FFFh
.text:00402275
.text:00402275 loc_402275:                             ; CODE XREF: sub_402190+3B4↓j
.text:00402275                                         ; sub_402190+3BF↓j ...
.text:00402275                 inc     esi
.text:00402276                 jmp     short loc_402250
.text:00402278 ; ---------------------------------------------------------------------------
.text:00402278
.text:00402278 loc_402278:                             ; CODE XREF: sub_402190+DD↑j
.text:00402278                                         ; sub_402190+3A8↓j
.text:00402278                 mov     [esp+3Ch+var_25], 1
.text:0040227D                 test    bp, bp
.text:00402280                 jnz     short loc_402294
.text:00402282                 mov     [esp+3Ch+var_25], 0
.text:00402287                 mov     ebx, [esp+3Ch+arg_4]
.text:0040228B                 mov     ebp, 0FFFh
.text:00402290                 mov     [esp+3Ch+var_24], ebx
.text:00402294
.text:00402294 loc_402294:                             ; CODE XREF: sub_402190+F0↑j
.text:00402294                 cmp     cl, 3Dh ; '='
.text:00402297                 jz      short loc_4022C8
.text:00402299                 cmp     cl, 2Bh ; '+'
.text:0040229C                 jz      short loc_4022C8
.text:0040229E                 cmp     cl, 2Dh ; '-'
.text:004022A1                 jz      short loc_4022C8
.text:004022A3
.text:004022A3 loc_4022A3:                             ; CODE XREF: sub_402190+2EB↓j
.text:004022A3                 cmp     dl, 2Ch ; ','
.text:004022A6                 jnz     short loc_4022AB
.text:004022A8                 inc     esi
.text:004022A9                 jmp     short loc_402242
.text:004022AB ; ---------------------------------------------------------------------------
.text:004022AB
.text:004022AB loc_4022AB:                             ; CODE XREF: sub_402190+116↑j
.text:004022AB                 test    dl, dl
.text:004022AD                 mov     eax, [esp+3Ch+var_18]
.text:004022B1                 jz      loc_40221B
.text:004022B7
.text:004022B7 loc_4022B7:                             ; CODE XREF: sub_402190+27F↓j
.text:004022B7                                         ; sub_402190+299↓j ...
.text:004022B7                 mov     edi, [esp+3Ch+var_18]
.text:004022BB                 mov     [esp+3Ch+Size], edi ; void *
.text:004022BE                 call    sub_4026A0
.text:004022C3                 jmp     loc_402223
.text:004022C8 ; ---------------------------------------------------------------------------
.text:004022C8
.text:004022C8 loc_4022C8:                             ; CODE XREF: sub_402190+107↑j
.text:004022C8                                         ; sub_402190+10C↑j ...
.text:004022C8                 mov     [esp+3Ch+Size], 0Ch ; Size
.text:004022CF                 call    malloc
.text:004022D4                 test    eax, eax
.text:004022D6                 mov     ebx, eax
.text:004022D8                 jz      loc_402519
.text:004022DE                 mov     dword ptr [eax+8], 0
.text:004022E5                 mov     edi, ebp
.text:004022E7                 movzx   edx, byte ptr [esi]
.text:004022EA                 mov     [eax], dl
.text:004022EC                 cmp     [esp+3Ch+var_25], 0
.text:004022F1                 jnz     loc_4024AD
.text:004022F7                 cmp     dl, 3Dh ; '='
.text:004022FA                 jz      loc_4024A6
.text:00402300
.text:00402300 loc_402300:                             ; CODE XREF: sub_402190+320↓j
.text:00402300                 cmp     dl, 2Bh ; '+'
.text:00402303                 jz      loc_40249C
.text:00402309                 test    byte ptr [esp+3Ch+var_24], 4
.text:0040230E
.text:0040230E loc_40230E:                             ; CODE XREF: sub_402190+311↓j
.text:0040230E                                         ; sub_402190+32B↓j
.text:0040230E                 jz      short loc_402318
.text:00402310                 mov     edi, [esp+3Ch+var_20]
.text:00402314                 not     edi
.text:00402316                 and     edi, ebp
.text:00402318
.text:00402318 loc_402318:                             ; CODE XREF: sub_402190:loc_40230E↑j
.text:00402318                 mov     byte ptr [ebx+1], 0
.text:0040231C                 mov     edx, [esp+3Ch+var_18]
.text:00402320                 mov     [ebx+2], di
.text:00402324                 mov     word ptr [ebx+4], 0
.text:0040232A                 test    edx, edx
.text:0040232C                 jnz     loc_40248C
.text:00402332                 mov     [esp+3Ch+var_1C], ebx
.text:00402336                 mov     [esp+3Ch+var_18], ebx
.text:0040233A                 lea     esi, [esi+0]
.text:00402340
.text:00402340 loc_402340:                             ; CODE XREF: sub_402190+26A↓j
.text:00402340                                         ; sub_402190+28F↓j ...
.text:00402340                 inc     esi
.text:00402341                 movzx   edx, byte ptr [esi]
.text:00402344                 movsx   eax, dl
.text:00402347                 mov     cl, dl
.text:00402349                 sub     eax, 58h ; 'X'  ; switch 33 cases
.text:0040234C                 cmp     eax, 20h
.text:0040234F                 ja      def_402355      ; jumptable 00402355 default case, cases 89-102,104-110,112,113,118
.text:00402355                 jmp     ds:jpt_402355[eax*4] ; switch jump
.text:00402355 ; ---------------------------------------------------------------------------
.text:0040235C jpt_402355      dd offset loc_4023FF    ; DATA XREF: sub_402190+1C5↑r
.text:0040235C                 dd offset def_402355    ; jump table for switch statement
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset loc_40240A
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset loc_402424
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset loc_4023E0
.text:0040235C                 dd offset loc_402437
.text:0040235C                 dd offset loc_402440
.text:0040235C                 dd offset loc_402449
.text:0040235C                 dd offset def_402355
.text:0040235C                 dd offset loc_402480
.text:0040235C                 dd offset loc_402403
.text:004023E0 ; ---------------------------------------------------------------------------
.text:004023E0
.text:004023E0 loc_4023E0:                             ; CODE XREF: sub_402190+1C5↑j
.text:004023E0                                         ; DATA XREF: sub_402190:jpt_402355↑o
.text:004023E0                 mov     eax, edi        ; jumptable 00402355 case 114
.text:004023E2                 and     eax, 124h
.text:004023E7                 mov     esi, esi
.text:004023E9                 lea     edi, [edi+0]
.text:004023F0
.text:004023F0 loc_4023F0:                             ; CODE XREF: sub_402190+278↓j
.text:004023F0                                         ; sub_402190+2AE↓j ...
.text:004023F0                 movzx   ecx, word ptr [ebx+4]
.text:004023F4                 or      eax, ecx
.text:004023F6                 mov     [ebx+4], ax
.text:004023FA                 jmp     loc_402340
.text:004023FF ; ---------------------------------------------------------------------------
.text:004023FF
.text:004023FF loc_4023FF:                             ; CODE XREF: sub_402190+1C5↑j
.text:004023FF                                         ; DATA XREF: sub_402190:jpt_402355↑o
.text:004023FF                 or      byte ptr [ebx+1], 1 ; jumptable 00402355 case 88
.text:00402403
.text:00402403 loc_402403:                             ; CODE XREF: sub_402190+1C5↑j
.text:00402403                                         ; DATA XREF: sub_402190:jpt_402355↑o
.text:00402403                 mov     eax, edi        ; jumptable 00402355 case 120
.text:00402405                 and     eax, 49h
.text:00402408                 jmp     short loc_4023F0
.text:0040240A ; ---------------------------------------------------------------------------
.text:0040240A
.text:0040240A loc_40240A:                             ; CODE XREF: sub_402190+1C5↑j
.text:0040240A                                         ; DATA XREF: sub_402190:jpt_402355↑o
.text:0040240A                 cmp     word ptr [ebx+4], 0 ; jumptable 00402355 case 103
.text:0040240F                 jnz     loc_4022B7
.text:00402415                 mov     word ptr [ebx+4], 38h ; '8'
.text:0040241B
.text:0040241B loc_40241B:                             ; CODE XREF: sub_402190+2A5↓j
.text:0040241B                                         ; sub_402190+2CA↓j
.text:0040241B                 or      byte ptr [ebx+1], 2
.text:0040241F                 jmp     loc_402340
.text:00402424 ; ---------------------------------------------------------------------------
.text:00402424
.text:00402424 loc_402424:                             ; CODE XREF: sub_402190+1C5↑j
.text:00402424                                         ; DATA XREF: sub_402190:jpt_402355↑o
.text:00402424                 cmp     word ptr [ebx+4], 0 ; jumptable 00402355 case 111
.text:00402429                 jnz     loc_4022B7
.text:0040242F                 mov     word ptr [ebx+4], 7
.text:00402435                 jmp     short loc_40241B
.text:00402437 ; ---------------------------------------------------------------------------
.text:00402437
.text:00402437 loc_402437:                             ; CODE XREF: sub_402190+1C5↑j
.text:00402437                                         ; DATA XREF: sub_402190:jpt_402355↑o
.text:00402437                 mov     eax, edi        ; jumptable 00402355 case 115
.text:00402439                 and     eax, 0C00h
.text:0040243E                 jmp     short loc_4023F0
.text:00402440 ; ---------------------------------------------------------------------------
.text:00402440
.text:00402440 loc_402440:                             ; CODE XREF: sub_402190+1C5↑j
.text:00402440                                         ; DATA XREF: sub_402190:jpt_402355↑o
.text:00402440                 mov     eax, edi        ; jumptable 00402355 case 116
.text:00402442                 and     eax, 200h
.text:00402447                 jmp     short loc_4023F0
.text:00402449 ; ---------------------------------------------------------------------------
.text:00402449
.text:00402449 loc_402449:                             ; CODE XREF: sub_402190+1C5↑j
.text:00402449                                         ; DATA XREF: sub_402190:jpt_402355↑o
.text:00402449                 cmp     word ptr [ebx+4], 0 ; jumptable 00402355 case 117
.text:0040244E                 jnz     loc_4022B7
.text:00402454                 mov     word ptr [ebx+4], 1C0h
.text:0040245A                 jmp     short loc_40241B
.text:0040245A ; ---------------------------------------------------------------------------
.text:0040245C                 align 10h
.text:00402460
.text:00402460 def_402355:                             ; CODE XREF: sub_402190+1BF↑j
.text:00402460                                         ; sub_402190+1C5↑j
.text:00402460                                         ; DATA XREF: ...
.text:00402460                 cmp     cl, 3Dh ; '='   ; jumptable 00402355 default case, cases 89-102,104-110,112,113,118
.text:00402463                 jz      loc_4022C8
.text:00402469                 cmp     cl, 2Bh ; '+'
.text:0040246C                 jz      loc_4022C8
.text:00402472                 cmp     cl, 2Dh ; '-'
.text:00402475                 jz      loc_4022C8
.text:0040247B                 jmp     loc_4022A3
.text:00402480 ; ---------------------------------------------------------------------------
.text:00402480
.text:00402480 loc_402480:                             ; CODE XREF: sub_402190+1C5↑j
.text:00402480                                         ; DATA XREF: sub_402190:jpt_402355↑o
.text:00402480                 mov     eax, edi        ; jumptable 00402355 case 119
.text:00402482                 and     eax, 92h
.text:00402487                 jmp     loc_4023F0
.text:0040248C ; ---------------------------------------------------------------------------
.text:0040248C
.text:0040248C loc_40248C:                             ; CODE XREF: sub_402190+19C↑j
.text:0040248C                 mov     ecx, [esp+3Ch+var_1C]
.text:00402490                 mov     [esp+3Ch+var_1C], ebx
.text:00402494                 mov     [ecx+8], ebx
.text:00402497                 jmp     loc_402340
.text:0040249C ; ---------------------------------------------------------------------------
.text:0040249C
.text:0040249C loc_40249C:                             ; CODE XREF: sub_402190+173↑j
.text:0040249C                 test    byte ptr [esp+3Ch+var_24], 2
.text:004024A1                 jmp     loc_40230E
.text:004024A6 ; ---------------------------------------------------------------------------
.text:004024A6
.text:004024A6 loc_4024A6:                             ; CODE XREF: sub_402190+16A↑j
.text:004024A6                 test    byte ptr [esp+3Ch+var_24], 1
.text:004024AB                 jnz     short loc_4024C0
.text:004024AD
.text:004024AD loc_4024AD:                             ; CODE XREF: sub_402190+161↑j
.text:004024AD                                         ; sub_402190+37E↓j
.text:004024AD                 cmp     dl, 3Dh ; '='
.text:004024B0                 jnz     loc_402300
.text:004024B6                 test    byte ptr [esp+3Ch+var_24], 1
.text:004024BB                 jmp     loc_40230E
.text:004024C0 ; ---------------------------------------------------------------------------
.text:004024C0
.text:004024C0 loc_4024C0:                             ; CODE XREF: sub_402190+31B↑j
.text:004024C0                 mov     [esp+3Ch+Size], 0Ch ; Size
.text:004024C7                 call    malloc
.text:004024CC                 xor     edx, edx
.text:004024CE                 test    eax, eax
.text:004024D0                 jz      short loc_4024EE
.text:004024D2                 mov     dword ptr [eax+8], 0
.text:004024D9                 mov     edx, eax
.text:004024DB                 mov     byte ptr [eax], 3Dh ; '='
.text:004024DE                 mov     byte ptr [eax+1], 0
.text:004024E2                 mov     word ptr [eax+4], 0
.text:004024E8                 mov     word ptr [eax+2], 0FFFh
.text:004024EE
.text:004024EE loc_4024EE:                             ; CODE XREF: sub_402190+340↑j
.text:004024EE                 test    edx, edx
.text:004024F0                 mov     eax, 1
.text:004024F5                 jz      loc_40221B
.text:004024FB                 mov     eax, [esp+3Ch+var_18]
.text:004024FF                 test    eax, eax
.text:00402501                 jnz     short loc_402510
.text:00402503                 mov     [esp+3Ch+var_18], edx
.text:00402507
.text:00402507 loc_402507:                             ; CODE XREF: sub_402190+387↓j
.text:00402507                 mov     [esp+3Ch+var_1C], edx
.text:0040250B                 movzx   edx, byte ptr [esi]
.text:0040250E                 jmp     short loc_4024AD
.text:00402510 ; ---------------------------------------------------------------------------
.text:00402510
.text:00402510 loc_402510:                             ; CODE XREF: sub_402190+371↑j
.text:00402510                 mov     ecx, [esp+3Ch+var_1C]
.text:00402514                 mov     [ecx+8], edx
.text:00402517                 jmp     short loc_402507
.text:00402519 ; ---------------------------------------------------------------------------
.text:00402519
.text:00402519 loc_402519:                             ; CODE XREF: sub_402190+148↑j
.text:00402519                 mov     esi, [esp+3Ch+var_18]
.text:0040251D                 mov     [esp+3Ch+Size], esi ; void *
.text:00402520                 call    sub_4026A0
.text:00402525                 mov     eax, 1
.text:0040252A                 jmp     loc_40221B
.text:0040252A ; ---------------------------------------------------------------------------
.text:0040252F                 align 10h
.text:00402530
.text:00402530 loc_402530:                             ; CODE XREF: sub_402190+D4↑j
.text:00402530                 cmp     eax, 6Fh ; 'o'
.text:00402533                 jz      short loc_402549
.text:00402535                 cmp     eax, 75h ; 'u'
.text:00402538                 jnz     loc_402278
.text:0040253E                 or      ebp, 9C0h
.text:00402544                 jmp     loc_402275
.text:00402549 ; ---------------------------------------------------------------------------
.text:00402549
.text:00402549 loc_402549:                             ; CODE XREF: sub_402190+3A3↑j
.text:00402549                 or      ebp, 207h
.text:0040254F                 jmp     loc_402275
.text:00402554 ; ---------------------------------------------------------------------------
.text:00402554
.text:00402554 loc_402554:                             ; CODE XREF: sub_402190+CB↑j
.text:00402554                 or      ebp, 438h
.text:0040255A                 jmp     loc_402275
.text:0040255A sub_402190      endp
.text:0040255A
.text:0040255A ; ---------------------------------------------------------------------------
.text:0040255F                 align 10h
.text:00402560
.text:00402560 ; =============== S U B R O U T I N E =======================================
.text:00402560
.text:00402560
.text:00402560 sub_402560      proc near               ; CODE XREF: sub_4018C0+2C6↑p
.text:00402560
.text:00402560 arg_0           = word ptr  4
.text:00402560 arg_4           = dword ptr  8
.text:00402560
.text:00402560                 push    esi
.text:00402561                 push    ebx
.text:00402562                 mov     ecx, [esp+8+arg_4]
.text:00402566                 movzx   esi, [esp+8+arg_0]
.text:0040256B                 mov     ebx, esi
.text:0040256D                 and     ebx, 0FFFh
.text:00402573                 test    ecx, ecx
.text:00402575                 jz      short loc_4025E7
.text:00402577                 mov     esi, esi
.text:00402579                 lea     edi, [edi+0]
.text:00402580
.text:00402580 loc_402580:                             ; CODE XREF: sub_402560+85↓j
.text:00402580                 movsx   eax, byte ptr [ecx+1]
.text:00402584                 test    al, 2
.text:00402586                 jz      loc_402660
.text:0040258C                 movzx   eax, word ptr [ecx+4]
.text:00402590                 mov     edx, ebx
.text:00402592                 and     edx, eax
.text:00402594                 test    eax, 1C0h
.text:00402599                 jz      short loc_402610
.text:0040259B                 xor     eax, eax
.text:0040259D                 test    dh, 1
.text:004025A0                 setz    al
.text:004025A3                 dec     eax
.text:004025A4                 and     eax, 24h
.text:004025A7                 test    dl, dl
.text:004025A9                 jns     short loc_4025AE
.text:004025AB                 or      eax, 12h
.text:004025AE
.text:004025AE loc_4025AE:                             ; CODE XREF: sub_402560+49↑j
.text:004025AE                 test    dl, 40h
.text:004025B1                 jz      short loc_4025C0
.text:004025B3                 or      eax, 9
.text:004025B6                 lea     esi, [esi+0]
.text:004025B9                 lea     edi, [edi+0]
.text:004025C0
.text:004025C0 loc_4025C0:                             ; CODE XREF: sub_402560+51↑j
.text:004025C0                                         ; sub_402560+CF↓j ...
.text:004025C0                 or      eax, edx
.text:004025C2                 movzx   edx, ax
.text:004025C5                 movzx   eax, word ptr [ecx+2]
.text:004025C9                 and     edx, eax
.text:004025CB
.text:004025CB loc_4025CB:                             ; CODE XREF: sub_402560+106↓j
.text:004025CB                                         ; sub_402560+118↓j ...
.text:004025CB                 movsx   eax, byte ptr [ecx]
.text:004025CE                 cmp     eax, 2Dh ; '-'
.text:004025D1                 jz      short loc_402603
.text:004025D3                 cmp     eax, 2Dh ; '-'
.text:004025D6                 jg      short loc_4025F4
.text:004025D8                 cmp     eax, 2Bh ; '+'
.text:004025DB                 jz      short loc_4025F0
.text:004025DD                 lea     esi, [esi+0]
.text:004025E0
.text:004025E0 loc_4025E0:                             ; CODE XREF: sub_402560+92↓j
.text:004025E0                                         ; sub_402560+97↓j ...
.text:004025E0                 mov     ecx, [ecx+8]
.text:004025E3                 test    ecx, ecx
.text:004025E5                 jnz     short loc_402580
.text:004025E7
.text:004025E7 loc_4025E7:                             ; CODE XREF: sub_402560+15↑j
.text:004025E7                 mov     eax, ebx
.text:004025E9                 pop     ebx
.text:004025EA                 pop     esi
.text:004025EB                 retn
.text:004025EB ; ---------------------------------------------------------------------------
.text:004025EC                 align 10h
.text:004025F0
.text:004025F0 loc_4025F0:                             ; CODE XREF: sub_402560+7B↑j
.text:004025F0                                         ; sub_402560+A1↓j
.text:004025F0                 or      ebx, edx
.text:004025F2                 jmp     short loc_4025E0
.text:004025F4 ; ---------------------------------------------------------------------------
.text:004025F4
.text:004025F4 loc_4025F4:                             ; CODE XREF: sub_402560+76↑j
.text:004025F4                 cmp     eax, 3Dh ; '='
.text:004025F7                 jnz     short loc_4025E0
.text:004025F9                 movzx   eax, word ptr [ecx+2]
.text:004025FD                 not     eax
.text:004025FF                 and     ebx, eax
.text:00402601                 jmp     short loc_4025F0
.text:00402603 ; ---------------------------------------------------------------------------
.text:00402603
.text:00402603 loc_402603:                             ; CODE XREF: sub_402560+71↑j
.text:00402603                 not     edx
.text:00402605                 and     ebx, edx
.text:00402607                 jmp     short loc_4025E0
.text:00402607 ; ---------------------------------------------------------------------------
.text:00402609                 align 10h
.text:00402610
.text:00402610 loc_402610:                             ; CODE XREF: sub_402560+39↑j
.text:00402610                 test    al, 38h
.text:00402612                 jz      short loc_402636
.text:00402614                 xor     eax, eax
.text:00402616                 test    dl, 20h
.text:00402619                 setz    al
.text:0040261C                 dec     eax
.text:0040261D                 and     eax, 104h
.text:00402622                 test    dl, 10h
.text:00402625                 jz      short loc_40262C
.text:00402627                 or      eax, 82h
.text:0040262C
.text:0040262C loc_40262C:                             ; CODE XREF: sub_402560+C5↑j
.text:0040262C                 test    dl, 8
.text:0040262F                 jz      short loc_4025C0
.text:00402631                 or      eax, 41h
.text:00402634                 jmp     short loc_4025C0
.text:00402636 ; ---------------------------------------------------------------------------
.text:00402636
.text:00402636 loc_402636:                             ; CODE XREF: sub_402560+B2↑j
.text:00402636                 xor     eax, eax
.text:00402638                 test    dl, 4
.text:0040263B                 setz    al
.text:0040263E                 dec     eax
.text:0040263F                 and     eax, 120h
.text:00402644                 test    dl, 2
.text:00402647                 jz      short loc_40264E
.text:00402649                 or      eax, 90h
.text:0040264E
.text:0040264E loc_40264E:                             ; CODE XREF: sub_402560+E7↑j
.text:0040264E                 test    dl, 1
.text:00402651                 jz      loc_4025C0
.text:00402657                 or      eax, 48h
.text:0040265A                 jmp     loc_4025C0
.text:0040265A ; ---------------------------------------------------------------------------
.text:0040265F                 align 10h
.text:00402660
.text:00402660 loc_402660:                             ; CODE XREF: sub_402560+26↑j
.text:00402660                 movzx   edx, word ptr [ecx+4]
.text:00402664                 test    al, 1
.text:00402666                 jz      loc_4025CB
.text:0040266C                 mov     eax, esi
.text:0040266E                 and     eax, 0F000h
.text:00402673                 cmp     eax, 4000h
.text:00402678                 jz      loc_4025CB
.text:0040267E                 test    bl, 49h
.text:00402681                 jnz     loc_4025CB
.text:00402687                 and     edx, 0FFB6h
.text:0040268D                 jmp     loc_4025CB
.text:0040268D sub_402560      endp
.text:0040268D
.text:0040268D ; ---------------------------------------------------------------------------
.text:00402692                 align 10h
.text:004026A0
.text:004026A0 ; =============== S U B R O U T I N E =======================================
.text:004026A0
.text:004026A0
.text:004026A0 ; int __cdecl sub_4026A0(void *)
.text:004026A0 sub_4026A0      proc near               ; CODE XREF: sub_402190+12E↑p
.text:004026A0                                         ; sub_402190+390↑p
.text:004026A0
.text:004026A0 Block           = dword ptr -0Ch
.text:004026A0 arg_0           = dword ptr  4
.text:004026A0
.text:004026A0                 push    ebx
.text:004026A1                 sub     esp, 8
.text:004026A4                 mov     eax, [esp+0Ch+arg_0]
.text:004026A8                 test    eax, eax
.text:004026AA                 jz      short loc_4026C1
.text:004026AC                 lea     esi, [esi+0]
.text:004026B0
.text:004026B0 loc_4026B0:                             ; CODE XREF: sub_4026A0+1F↓j
.text:004026B0                 mov     ebx, [eax+8]
.text:004026B3                 mov     [esp+0Ch+Block], eax ; Block
.text:004026B6                 call    free
.text:004026BB                 test    ebx, ebx
.text:004026BD                 mov     eax, ebx
.text:004026BF                 jnz     short loc_4026B0
.text:004026C1
.text:004026C1 loc_4026C1:                             ; CODE XREF: sub_4026A0+A↑j
.text:004026C1                 add     esp, 8
.text:004026C4                 pop     ebx
.text:004026C5                 retn
.text:004026C5 sub_4026A0      endp
.text:004026C5
.text:004026C5 ; ---------------------------------------------------------------------------
.text:004026C6                 align 10h
.text:004026D0                 sub     esp, 8Ch
.text:004026D6                 lea     edx, [esp+10h]
.text:004026DA                 mov     [esp+4], edx
.text:004026DE                 mov     edx, [esp+90h]
.text:004026E5                 mov     [esp], edx
.text:004026E8                 call    sub_406C90
.text:004026ED                 test    eax, eax
.text:004026EF                 mov     ecx, 2
.text:004026F4                 jz      short loc_402700
.text:004026F6
.text:004026F6 loc_4026F6:                             ; CODE XREF: .text:00402713↓j
.text:004026F6                                         ; .text:00402733↓j
.text:004026F6                 mov     eax, ecx
.text:004026F8                 add     esp, 8Ch
.text:004026FE                 retn
.text:004026FE ; ---------------------------------------------------------------------------
.text:004026FF                 align 10h
.text:00402700
.text:00402700 loc_402700:                             ; CODE XREF: .text:004026F4↑j
.text:00402700                 mov     dword ptr [esp], 0Ch
.text:00402707                 call    malloc
.text:0040270C                 test    eax, eax
.text:0040270E                 mov     ecx, 1
.text:00402713                 jz      short loc_4026F6
.text:00402715                 mov     byte ptr [eax], 3Dh ; '='
.text:00402718                 mov     byte ptr [eax+1], 0
.text:0040271C                 mov     ecx, [esp+10h]
.text:00402720                 mov     word ptr [eax+2], 0FFFh
.text:00402726                 mov     dword ptr [eax+8], 0
.text:0040272D                 mov     [eax+4], cx
.text:00402731                 mov     ecx, eax
.text:00402733                 jmp     short loc_4026F6
.text:00402733 ; ---------------------------------------------------------------------------
.text:00402735                 align 10h
.text:00402740 dword_402740    dd 90002D2Dh, 7 dup(90909090h)
.text:00402740                                         ; DATA XREF: sub_402990+E4↓o
.text:00402760 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402760                                         ; DATA XREF: sub_402990+2FC↓o
.text:0040278D                 align 20h
.text:004027A0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004027A0                                         ; DATA XREF: sub_402990:loc_402CF2↓o
.text:004027CD                 align 20h
.text:004027E0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:004027E0                                         ; DATA XREF: sub_402990:loc_402D90↓o
.text:004027E0                                         ; sub_402990:loc_403157↓o
.text:00402806                 align 20h
.text:00402820 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00402820                                         ; DATA XREF: sub_402990+48E↓o
.text:00402840 dword_402840    dd 90909000h, 7 dup(90909090h)
.text:00402840                                         ; DATA XREF: sub_402990:loc_402E61↓o
.text:00402860 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00402860                                         ; DATA XREF: sub_402990:loc_402E7A↓o
.text:00402880 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00402880                                         ; DATA XREF: sub_402990:loc_402F5F↓o
.text:00402880                                         ; sub_402990:loc_40328C↓o
.text:004028A7                 align 20h
.text:004028C0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004028C0                                         ; DATA XREF: sub_402990:loc_4030D3↓o
.text:004028EE                 align 20h
.text:00402900 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00402900                                         ; DATA XREF: sub_402990:loc_4031BF↓o
.text:00402921 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00402921                                         ; DATA XREF: sub_402990+93F↓o
.text:0040293B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040293B                                         ; DATA XREF: sub_402990:loc_403307↓o
.text:00402955 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00402955                                         ; DATA XREF: sub_402990:loc_40332E↓o
.text:00402973 ; const char VarName[]
.text:00402973 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_402990:loc_4034E0↓o
.text:00402983                 align 10h
.text:00402990
.text:00402990 ; =============== S U B R O U T I N E =======================================
.text:00402990
.text:00402990
.text:00402990 ; int __cdecl sub_402990(int, int, char *Str, int, int, int, int, int)
.text:00402990 sub_402990      proc near               ; CODE XREF: sub_403520+5A↓p
.text:00402990                                         ; .text:0040360A↓p ...
.text:00402990
.text:00402990 Str1            = dword ptr -5Ch
.text:00402990 Str2            = dword ptr -58h
.text:00402990 MaxCount        = dword ptr -54h
.text:00402990 var_50          = dword ptr -50h
.text:00402990 var_4C          = dword ptr -4Ch
.text:00402990 var_3C          = dword ptr -3Ch
.text:00402990 var_38          = dword ptr -38h
.text:00402990 var_34          = dword ptr -34h
.text:00402990 var_30          = dword ptr -30h
.text:00402990 var_2C          = dword ptr -2Ch
.text:00402990 var_28          = dword ptr -28h
.text:00402990 var_24          = dword ptr -24h
.text:00402990 var_20          = dword ptr -20h
.text:00402990 var_1C          = dword ptr -1Ch
.text:00402990 var_18          = dword ptr -18h
.text:00402990 var_14          = dword ptr -14h
.text:00402990 arg_0           = dword ptr  4
.text:00402990 arg_4           = dword ptr  8
.text:00402990 Str             = dword ptr  0Ch
.text:00402990 arg_C           = dword ptr  10h
.text:00402990 arg_10          = dword ptr  14h
.text:00402990 arg_14          = dword ptr  18h
.text:00402990 arg_18          = dword ptr  1Ch
.text:00402990 arg_1C          = dword ptr  20h
.text:00402990
.text:00402990                 push    ebp
.text:00402991                 mov     eax, 0FFFFFFFFh
.text:00402996                 push    edi
.text:00402997                 push    esi
.text:00402998                 push    ebx
.text:00402999                 sub     esp, 4Ch
.text:0040299C                 mov     esi, [esp+5Ch+Str]
.text:004029A0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004029A4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004029A7                 mov     ebx, [ebp+4]
.text:004029AA                 setz    dl
.text:004029AD                 movzx   ecx, dl
.text:004029B0                 dec     ecx
.text:004029B1                 and     ecx, ebx
.text:004029B3                 mov     [esp+5Ch+var_14], ecx
.text:004029B7                 mov     ecx, [esp+5Ch+arg_0]
.text:004029BB                 test    ecx, ecx
.text:004029BD                 jle     loc_402AE7
.text:004029C3                 mov     dword ptr [ebp+0Ch], 0
.text:004029CA                 mov     ebx, [ebp+0]
.text:004029CD                 test    ebx, ebx
.text:004029CF                 jz      loc_403500
.text:004029D5                 mov     edi, [ebp+10h]
.text:004029D8                 test    edi, edi
.text:004029DA                 jnz     short loc_402A33
.text:004029DC                 lea     esi, [esi+0]
.text:004029E0
.text:004029E0 loc_4029E0:                             ; CODE XREF: sub_402990+B7C↓j
.text:004029E0                 mov     [ebp+24h], ebx
.text:004029E3                 mov     esi, [esp+5Ch+Str]
.text:004029E7                 mov     [ebp+20h], ebx
.text:004029EA                 mov     ecx, [esp+5Ch+arg_18]
.text:004029EE                 xor     ebx, ebx
.text:004029F0                 mov     dword ptr [ebp+14h], 0
.text:004029F7                 test    ecx, ecx
.text:004029F9                 jz      loc_4034E0
.text:004029FF
.text:004029FF loc_4029FF:                             ; CODE XREF: sub_402990+B64↓j
.text:004029FF                 mov     ebx, 1
.text:00402A04
.text:00402A04 loc_402A04:                             ; CODE XREF: sub_402990+B5E↓j
.text:00402A04                 mov     [ebp+1Ch], ebx
.text:00402A07                 mov     ecx, [esp+5Ch+Str]
.text:00402A0B                 movzx   eax, byte ptr [ecx]
.text:00402A0E                 cmp     al, 2Dh ; '-'
.text:00402A10                 jz      loc_4034D0
.text:00402A16                 cmp     al, 2Bh ; '+'
.text:00402A18                 jz      loc_4034B9
.text:00402A1E                 xor     edx, edx
.text:00402A20                 test    ebx, ebx
.text:00402A22                 setz    dl
.text:00402A25                 mov     [ebp+18h], edx
.text:00402A28
.text:00402A28 loc_402A28:                             ; CODE XREF: sub_402990+B35↓j
.text:00402A28                 mov     [esp+5Ch+Str], esi
.text:00402A2C                 mov     dword ptr [ebp+10h], 1
.text:00402A33
.text:00402A33 loc_402A33:                             ; CODE XREF: sub_402990+4A↑j
.text:00402A33                 mov     eax, [ebp+14h]
.text:00402A36                 test    eax, eax
.text:00402A38                 jz      short loc_402A43
.text:00402A3A                 cmp     byte ptr [eax], 0
.text:00402A3D                 jnz     loc_402B20
.text:00402A43
.text:00402A43 loc_402A43:                             ; CODE XREF: sub_402990+A8↑j
.text:00402A43                 mov     ebx, [ebp+0]
.text:00402A46                 cmp     [ebp+24h], ebx
.text:00402A49                 jle     short loc_402A4E
.text:00402A4B                 mov     [ebp+24h], ebx
.text:00402A4E
.text:00402A4E loc_402A4E:                             ; CODE XREF: sub_402990+B9↑j
.text:00402A4E                 cmp     [ebp+20h], ebx
.text:00402A51                 jle     short loc_402A56
.text:00402A53                 mov     [ebp+20h], ebx
.text:00402A56
.text:00402A56 loc_402A56:                             ; CODE XREF: sub_402990+C1↑j
.text:00402A56                 cmp     dword ptr [ebp+18h], 1
.text:00402A5A                 jz      loc_403430
.text:00402A60
.text:00402A60 loc_402A60:                             ; CODE XREF: sub_402990+B13↓j
.text:00402A60                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402A64                 jz      loc_403414
.text:00402A6A                 cld
.text:00402A6B                 mov     ecx, [esp+5Ch+arg_4]
.text:00402A6F                 mov     edx, 3
.text:00402A74                 mov     edi, offset dword_402740
.text:00402A79                 mov     esi, [ecx+ebx*4]
.text:00402A7C                 mov     ecx, edx
.text:00402A7E                 repe cmpsb
.text:00402A80                 jnz     short loc_402ABC
.text:00402A82                 mov     edx, [ebp+24h]
.text:00402A85                 lea     eax, [ebx+1]
.text:00402A88                 cmp     [ebp+20h], edx
.text:00402A8B                 mov     [ebp+0], eax
.text:00402A8E                 jz      loc_403428
.text:00402A94                 cmp     edx, eax
.text:00402A96                 jz      short loc_402AB0
.text:00402A98                 mov     [esp+5Ch+Str2], ebp
.text:00402A9C                 mov     ebx, [esp+5Ch+arg_4]
.text:00402AA0                 mov     [esp+5Ch+Str1], ebx
.text:00402AA3                 call    sub_403640
.text:00402AA8                 nop
.text:00402AA9                 lea     esi, [esi+0]
.text:00402AB0
.text:00402AB0 loc_402AB0:                             ; CODE XREF: sub_402990+106↑j
.text:00402AB0                                         ; sub_402990+A9B↓j
.text:00402AB0                 mov     eax, [esp+5Ch+arg_0]
.text:00402AB4                 mov     ebx, eax
.text:00402AB6                 mov     [ebp+24h], eax
.text:00402AB9                 mov     [ebp+0], eax
.text:00402ABC
.text:00402ABC loc_402ABC:                             ; CODE XREF: sub_402990+F0↑j
.text:00402ABC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402AC0                 jz      loc_403414
.text:00402AC6                 mov     esi, [esp+5Ch+arg_4]
.text:00402ACA                 mov     eax, [esi+ebx*4]
.text:00402ACD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402AD0                 jz      short loc_402AF7
.text:00402AD2
.text:00402AD2 loc_402AD2:                             ; CODE XREF: sub_402990+16D↓j
.text:00402AD2                 mov     edx, [ebp+18h]
.text:00402AD5                 test    edx, edx
.text:00402AD7                 jz      short loc_402AF0
.text:00402AD9                 mov     [ebp+0Ch], eax
.text:00402ADC                 lea     edi, [ebx+1]
.text:00402ADF                 mov     eax, 1
.text:00402AE4                 mov     [ebp+0], edi
.text:00402AE7
.text:00402AE7 loc_402AE7:                             ; CODE XREF: sub_402990+2D↑j
.text:00402AE7                                         ; sub_402990+165↓j ...
.text:00402AE7                 add     esp, 4Ch
.text:00402AEA                 pop     ebx
.text:00402AEB                 pop     esi
.text:00402AEC                 pop     edi
.text:00402AED                 pop     ebp
.text:00402AEE                 retn
.text:00402AEE ; ---------------------------------------------------------------------------
.text:00402AEF                 align 10h
.text:00402AF0
.text:00402AF0 loc_402AF0:                             ; CODE XREF: sub_402990+147↑j
.text:00402AF0                                         ; sub_402990+A8A↓j ...
.text:00402AF0                 mov     eax, 0FFFFFFFFh
.text:00402AF5                 jmp     short loc_402AE7
.text:00402AF7 ; ---------------------------------------------------------------------------
.text:00402AF7
.text:00402AF7 loc_402AF7:                             ; CODE XREF: sub_402990+140↑j
.text:00402AF7                 movzx   edx, byte ptr [eax+1]
.text:00402AFB                 test    dl, dl
.text:00402AFD                 jz      short loc_402AD2
.text:00402AFF                 mov     ebx, [esp+5Ch+arg_C]
.text:00402B03                 xor     ecx, ecx
.text:00402B05                 test    ebx, ebx
.text:00402B07                 jz      short loc_402B12
.text:00402B09                 cmp     dl, 2Dh ; '-'
.text:00402B0C                 jz      loc_40340A
.text:00402B12
.text:00402B12 loc_402B12:                             ; CODE XREF: sub_402990+177↑j
.text:00402B12                                         ; sub_402990+A7F↓j
.text:00402B12                 lea     esi, [ecx+eax+1]
.text:00402B16                 mov     [ebp+14h], esi
.text:00402B19                 lea     esi, [esi+0]
.text:00402B20
.text:00402B20 loc_402B20:                             ; CODE XREF: sub_402990+AD↑j
.text:00402B20                 mov     ecx, [esp+5Ch+arg_C]
.text:00402B24                 test    ecx, ecx
.text:00402B26                 jz      loc_402EB0
.text:00402B2C                 mov     edx, [ebp+0]
.text:00402B2F                 mov     edi, [esp+5Ch+arg_4]
.text:00402B33                 mov     eax, [edi+edx*4]
.text:00402B36                 movzx   edx, byte ptr [eax+1]
.text:00402B3A                 cmp     dl, 2Dh ; '-'
.text:00402B3D                 jz      short loc_402B55
.text:00402B3F                 mov     ebx, [esp+5Ch+arg_14]
.text:00402B43                 test    ebx, ebx
.text:00402B45                 jz      loc_402EB0
.text:00402B4B                 cmp     byte ptr [eax+2], 0
.text:00402B4F                 jz      loc_4033EA
.text:00402B55
.text:00402B55 loc_402B55:                             ; CODE XREF: sub_402990+1AD↑j
.text:00402B55                                         ; sub_402990+A75↓j
.text:00402B55                 mov     [esp+5Ch+var_18], 0
.text:00402B5D                 mov     ecx, [ebp+14h]
.text:00402B60                 mov     [esp+5Ch+var_1C], 0
.text:00402B68                 mov     [esp+5Ch+var_20], 0
.text:00402B70                 mov     edi, ecx
.text:00402B72                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00402B7A                 movzx   eax, byte ptr [ecx]
.text:00402B7D                 test    al, al
.text:00402B7F                 jz      short loc_402B9C
.text:00402B81                 cmp     al, 3Dh ; '='
.text:00402B83                 jz      short loc_402B9C
.text:00402B85                 lea     esi, [esi+0]
.text:00402B89                 lea     edi, [edi+0]
.text:00402B90
.text:00402B90 loc_402B90:                             ; CODE XREF: sub_402990+20A↓j
.text:00402B90                 inc     edi
.text:00402B91                 movzx   eax, byte ptr [edi]
.text:00402B94                 test    al, al
.text:00402B96                 jz      short loc_402B9C
.text:00402B98                 cmp     al, 3Dh ; '='
.text:00402B9A                 jnz     short loc_402B90
.text:00402B9C
.text:00402B9C loc_402B9C:                             ; CODE XREF: sub_402990+1EF↑j
.text:00402B9C                                         ; sub_402990+1F3↑j ...
.text:00402B9C                 mov     [esp+5Ch+var_28], 0
.text:00402BA4                 mov     esi, [esp+5Ch+arg_C]
.text:00402BA8                 mov     ebx, [esi]
.text:00402BAA                 test    ebx, ebx
.text:00402BAC                 mov     edx, ebx
.text:00402BAE                 jz      loc_402DD0
.text:00402BB4                 lea     esi, [esi+0]
.text:00402BBA                 lea     edi, [edi+0]
.text:00402BC0
.text:00402BC0 loc_402BC0:                             ; CODE XREF: sub_402990+25E↓j
.text:00402BC0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00402BC4                 mov     ebx, edi
.text:00402BC6                 sub     ebx, ecx
.text:00402BC8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00402BCC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00402BCF                 call    strncmp
.text:00402BD4                 test    eax, eax
.text:00402BD6                 jz      loc_403366
.text:00402BDC
.text:00402BDC loc_402BDC:                             ; CODE XREF: sub_402990+A0F↓j
.text:00402BDC                                         ; sub_402990+A24↓j ...
.text:00402BDC                 inc     [esp+5Ch+var_28]
.text:00402BE0                 add     esi, 10h
.text:00402BE3                 mov     ecx, [esi]
.text:00402BE5                 test    ecx, ecx
.text:00402BE7                 mov     edx, ecx
.text:00402BE9                 jz      short loc_402BF0
.text:00402BEB                 mov     ecx, [ebp+14h]
.text:00402BEE                 jmp     short loc_402BC0
.text:00402BF0 ; ---------------------------------------------------------------------------
.text:00402BF0
.text:00402BF0 loc_402BF0:                             ; CODE XREF: sub_402990+259↑j
.text:00402BF0                                         ; sub_402990+A55↓j
.text:00402BF0                 mov     esi, [esp+5Ch+var_20]
.text:00402BF4                 test    esi, esi
.text:00402BF6                 jz      short loc_402C04
.text:00402BF8                 mov     edx, [esp+5Ch+var_1C]
.text:00402BFC                 test    edx, edx
.text:00402BFE                 jz      loc_403310
.text:00402C04
.text:00402C04 loc_402C04:                             ; CODE XREF: sub_402990+266↑j
.text:00402C04                 mov     eax, [esp+5Ch+var_18]
.text:00402C08                 test    eax, eax
.text:00402C0A                 jz      loc_402DD0
.text:00402C10                 mov     ecx, [ebp+0]
.text:00402C13                 lea     eax, [ecx+1]
.text:00402C16                 mov     [ebp+0], eax
.text:00402C19                 cmp     byte ptr [edi], 0
.text:00402C1C                 jz      loc_402D30
.text:00402C22                 mov     ecx, [esp+5Ch+var_18]
.text:00402C26                 mov     esi, [ecx+4]
.text:00402C29                 test    esi, esi
.text:00402C2B                 jz      short loc_402C76
.text:00402C2D                 lea     ebx, [edi+1]
.text:00402C30                 mov     [ebp+0Ch], ebx
.text:00402C33
.text:00402C33 loc_402C33:                             ; CODE XREF: sub_402990+3A8↓j
.text:00402C33                                         ; sub_402990+3C4↓j
.text:00402C33                 mov     ebx, [ebp+14h]
.text:00402C36                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00402C39                 call    strlen
.text:00402C3E                 add     [ebp+14h], eax
.text:00402C41                 mov     esi, [esp+5Ch+arg_10]
.text:00402C45                 test    esi, esi
.text:00402C47                 jz      short loc_402C53
.text:00402C49                 mov     ebp, [esp+5Ch+var_24]
.text:00402C4D                 mov     ecx, [esp+5Ch+arg_10]
.text:00402C51                 mov     [ecx], ebp
.text:00402C53
.text:00402C53 loc_402C53:                             ; CODE XREF: sub_402990+2B7↑j
.text:00402C53                 mov     eax, [esp+5Ch+var_18]
.text:00402C57                 mov     ecx, [eax+8]
.text:00402C5A                 test    ecx, ecx
.text:00402C5C                 jnz     short loc_402C6A
.text:00402C5E                 mov     ecx, [esp+5Ch+var_18]
.text:00402C62
.text:00402C62 loc_402C62:                             ; CODE XREF: sub_402990+723↓j
.text:00402C62                 mov     eax, [ecx+0Ch]
.text:00402C65                 jmp     loc_402AE7
.text:00402C6A ; ---------------------------------------------------------------------------
.text:00402C6A
.text:00402C6A loc_402C6A:                             ; CODE XREF: sub_402990+2CC↑j
.text:00402C6A                                         ; sub_402990+719↓j
.text:00402C6A                 mov     esi, [eax+0Ch]
.text:00402C6D                 xor     eax, eax
.text:00402C6F                 mov     [ecx], esi
.text:00402C71                 jmp     loc_402AE7
.text:00402C76 ; ---------------------------------------------------------------------------
.text:00402C76
.text:00402C76 loc_402C76:                             ; CODE XREF: sub_402990+29B↑j
.text:00402C76                 mov     edi, [esp+5Ch+var_14]
.text:00402C7A                 test    edi, edi
.text:00402C7C                 jz      short loc_402CD0
.text:00402C7E                 mov     esi, [esp+5Ch+arg_4]
.text:00402C82                 mov     edx, [esi+eax*4-4]
.text:00402C86                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00402C8A                 jz      short loc_402CF2
.text:00402C8C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00402C93                 call    ds:libintl_gettext
.text:00402C99                 mov     edx, [esp+5Ch+var_18]
.text:00402C9D                 mov     edi, [edx]
.text:00402C9F                 mov     [esp+5Ch+var_4C], edi
.text:00402CA3                 mov     ebx, [ebp+0]
.text:00402CA6                 mov     edi, [esp+5Ch+arg_4]
.text:00402CAA                 mov     ecx, [edi+ebx*4-4]
.text:00402CAE                 movsx   esi, byte ptr [ecx]
.text:00402CB1                 mov     ecx, ds:_iob
.text:00402CB7                 add     ecx, 40h ; '@'
.text:00402CBA                 mov     [esp+5Ch+var_50], esi
.text:00402CBE                 mov     ebx, [edi]
.text:00402CC0                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402CC4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402CC7                 mov     [esp+5Ch+MaxCount], ebx
.text:00402CCB                 call    fprintf
.text:00402CD0
.text:00402CD0 loc_402CD0:                             ; CODE XREF: sub_402990+2EC↑j
.text:00402CD0                                         ; sub_402990+398↓j
.text:00402CD0                 mov     ecx, [ebp+14h]
.text:00402CD3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402CD6                 call    strlen
.text:00402CDB                 add     [ebp+14h], eax
.text:00402CDE                 mov     eax, [esp+5Ch+var_18]
.text:00402CE2                 mov     esi, [eax+0Ch]
.text:00402CE5                 mov     [ebp+8], esi
.text:00402CE8
.text:00402CE8 loc_402CE8:                             ; CODE XREF: sub_402990+4E5↓j
.text:00402CE8                                         ; sub_402990+73E↓j ...
.text:00402CE8                 mov     eax, 3Fh ; '?'
.text:00402CED                 jmp     loc_402AE7
.text:00402CF2 ; ---------------------------------------------------------------------------
.text:00402CF2
.text:00402CF2 loc_402CF2:                             ; CODE XREF: sub_402990+2FA↑j
.text:00402CF2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00402CF9                 call    ds:libintl_gettext
.text:00402CFF                 mov     edx, [esp+5Ch+var_18]
.text:00402D03                 mov     edi, [esp+5Ch+arg_4]
.text:00402D07                 mov     ecx, ds:_iob
.text:00402D0D                 mov     esi, [edx]
.text:00402D0F                 add     ecx, 40h ; '@'
.text:00402D12                 mov     [esp+5Ch+var_50], esi
.text:00402D16                 mov     ebx, [edi]
.text:00402D18                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402D1C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402D1F                 mov     [esp+5Ch+MaxCount], ebx
.text:00402D23                 call    fprintf
.text:00402D28                 jmp     short loc_402CD0
.text:00402D28 ; ---------------------------------------------------------------------------
.text:00402D2A                 align 10h
.text:00402D30
.text:00402D30 loc_402D30:                             ; CODE XREF: sub_402990+28C↑j
.text:00402D30                 mov     ebx, [esp+5Ch+var_18]
.text:00402D34                 cmp     dword ptr [ebx+4], 1
.text:00402D38                 jnz     loc_402C33
.text:00402D3E                 cmp     eax, [esp+5Ch+arg_0]
.text:00402D42                 jge     short loc_402D59
.text:00402D44                 mov     ebx, [esp+5Ch+arg_4]
.text:00402D48                 lea     edi, [ecx+2]
.text:00402D4B                 mov     [ebp+0], edi
.text:00402D4E                 mov     esi, [ebx+eax*4]
.text:00402D51                 mov     [ebp+0Ch], esi
.text:00402D54                 jmp     loc_402C33
.text:00402D59 ; ---------------------------------------------------------------------------
.text:00402D59
.text:00402D59 loc_402D59:                             ; CODE XREF: sub_402990+3B2↑j
.text:00402D59                 mov     edx, [esp+5Ch+var_14]
.text:00402D5D                 test    edx, edx
.text:00402D5F                 jnz     short loc_402D90
.text:00402D61
.text:00402D61 loc_402D61:                             ; CODE XREF: sub_402990+437↓j
.text:00402D61                 mov     edx, [ebp+14h]
.text:00402D64                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402D67                 call    strlen
.text:00402D6C                 add     [ebp+14h], eax
.text:00402D6F                 mov     eax, [esp+5Ch+var_18]
.text:00402D73                 mov     edi, [eax+0Ch]
.text:00402D76                 mov     [ebp+8], edi
.text:00402D79
.text:00402D79 loc_402D79:                             ; CODE XREF: sub_402990+7C2↓j
.text:00402D79                 mov     ebp, [esp+5Ch+Str]
.text:00402D7D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402D81                 setnz   bl
.text:00402D84                 movzx   esi, bl
.text:00402D87                 lea     eax, [esi+esi*4+3Ah]
.text:00402D8B                 jmp     loc_402AE7
.text:00402D90 ; ---------------------------------------------------------------------------
.text:00402D90
.text:00402D90 loc_402D90:                             ; CODE XREF: sub_402990+3CF↑j
.text:00402D90                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402D97                 call    ds:libintl_gettext
.text:00402D9D                 mov     ecx, [ebp+0]
.text:00402DA0                 mov     esi, [esp+5Ch+arg_4]
.text:00402DA4                 mov     ebx, [esi+ecx*4-4]
.text:00402DA8                 mov     ecx, ds:_iob
.text:00402DAE                 mov     [esp+5Ch+var_50], ebx
.text:00402DB2                 mov     edi, [esi]
.text:00402DB4                 add     ecx, 40h ; '@'
.text:00402DB7                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402DBB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402DBE                 mov     [esp+5Ch+MaxCount], edi
.text:00402DC2                 call    fprintf
.text:00402DC7                 jmp     short loc_402D61
.text:00402DC7 ; ---------------------------------------------------------------------------
.text:00402DC9                 align 10h
.text:00402DD0
.text:00402DD0 loc_402DD0:                             ; CODE XREF: sub_402990+21E↑j
.text:00402DD0                                         ; sub_402990+27A↑j
.text:00402DD0                 mov     eax, [esp+5Ch+arg_14]
.text:00402DD4                 test    eax, eax
.text:00402DD6                 jz      short loc_402E06
.text:00402DD8                 mov     ebx, [ebp+0]
.text:00402DDB                 mov     esi, [esp+5Ch+arg_4]
.text:00402DDF                 mov     edi, [esi+ebx*4]
.text:00402DE2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402DE6                 jz      short loc_402E09
.text:00402DE8                 mov     ecx, [ebp+14h]
.text:00402DEB                 mov     edx, [esp+5Ch+Str]
.text:00402DEF                 movsx   ebx, byte ptr [ecx]
.text:00402DF2                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402DF5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00402DF9                 call    strchr
.text:00402DFE                 test    eax, eax
.text:00402E00                 jnz     loc_402EB0
.text:00402E06
.text:00402E06 loc_402E06:                             ; CODE XREF: sub_402990+446↑j
.text:00402E06                 mov     ebx, [ebp+0]
.text:00402E09
.text:00402E09 loc_402E09:                             ; CODE XREF: sub_402990+456↑j
.text:00402E09                 mov     eax, [esp+5Ch+var_14]
.text:00402E0D                 test    eax, eax
.text:00402E0F                 jz      short loc_402E61
.text:00402E11                 mov     esi, [esp+5Ch+arg_4]
.text:00402E15                 mov     edi, [esi+ebx*4]
.text:00402E18                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402E1C                 jz      short loc_402E7A
.text:00402E1E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00402E25                 call    ds:libintl_gettext
.text:00402E2B                 mov     edi, [ebp+14h]
.text:00402E2E                 mov     [esp+5Ch+var_4C], edi
.text:00402E32                 mov     ebx, [ebp+0]
.text:00402E35                 mov     edi, [esp+5Ch+arg_4]
.text:00402E39                 mov     esi, [edi+ebx*4]
.text:00402E3C                 movsx   ecx, byte ptr [esi]
.text:00402E3F                 mov     esi, ds:_iob
.text:00402E45                 add     esi, 40h ; '@'
.text:00402E48                 mov     [esp+5Ch+var_50], ecx
.text:00402E4C                 mov     ebx, [edi]
.text:00402E4E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402E52                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00402E55                 mov     [esp+5Ch+MaxCount], ebx
.text:00402E59                 call    fprintf
.text:00402E5E
.text:00402E5E loc_402E5E:                             ; CODE XREF: sub_402990+51D↓j
.text:00402E5E                 mov     ebx, [ebp+0]
.text:00402E61
.text:00402E61 loc_402E61:                             ; CODE XREF: sub_402990+47F↑j
.text:00402E61                 mov     dword ptr [ebp+14h], offset dword_402840
.text:00402E68                 lea     edx, [ebx+1]
.text:00402E6B                 mov     [ebp+0], edx
.text:00402E6E
.text:00402E6E loc_402E6E:                             ; CODE XREF: sub_402990+999↓j
.text:00402E6E                 mov     dword ptr [ebp+8], 0
.text:00402E75                 jmp     loc_402CE8
.text:00402E7A ; ---------------------------------------------------------------------------
.text:00402E7A
.text:00402E7A loc_402E7A:                             ; CODE XREF: sub_402990+48C↑j
.text:00402E7A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00402E81                 call    ds:libintl_gettext
.text:00402E87                 mov     ecx, [ebp+14h]
.text:00402E8A                 mov     edi, [esp+5Ch+arg_4]
.text:00402E8E                 mov     edx, ds:_iob
.text:00402E94                 mov     [esp+5Ch+var_50], ecx
.text:00402E98                 mov     ebx, [edi]
.text:00402E9A                 add     edx, 40h ; '@'
.text:00402E9D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402EA1                 mov     [esp+5Ch+MaxCount], ebx
.text:00402EA5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402EA8                 call    fprintf
.text:00402EAD                 jmp     short loc_402E5E
.text:00402EAD ; ---------------------------------------------------------------------------
.text:00402EAF                 align 10h
.text:00402EB0
.text:00402EB0 loc_402EB0:                             ; CODE XREF: sub_402990+196↑j
.text:00402EB0                                         ; sub_402990+1B5↑j ...
.text:00402EB0                 mov     esi, [ebp+14h]
.text:00402EB3                 movzx   ebx, byte ptr [esi]
.text:00402EB6                 inc     esi
.text:00402EB7                 mov     [ebp+14h], esi
.text:00402EBA                 mov     ecx, [esp+5Ch+Str]
.text:00402EBE                 movsx   esi, bl
.text:00402EC1                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402EC5                 mov     edi, esi
.text:00402EC7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402ECA                 call    strchr
.text:00402ECF                 mov     ecx, [ebp+14h]
.text:00402ED2                 cmp     byte ptr [ecx], 0
.text:00402ED5                 jnz     short loc_402EDA
.text:00402ED7                 inc     dword ptr [ebp+0]
.text:00402EDA
.text:00402EDA loc_402EDA:                             ; CODE XREF: sub_402990+545↑j
.text:00402EDA                 test    eax, eax
.text:00402EDC                 jz      loc_4032C0
.text:00402EE2                 cmp     bl, 3Ah ; ':'
.text:00402EE5                 jz      loc_4032C0
.text:00402EEB                 cmp     byte ptr [eax], 57h ; 'W'
.text:00402EEE                 jz      loc_402FA6
.text:00402EF4                 movzx   edx, byte ptr [eax+1]
.text:00402EF8
.text:00402EF8 loc_402EF8:                             ; CODE XREF: sub_402990+61D↓j
.text:00402EF8                 cmp     dl, 3Ah ; ':'
.text:00402EFB                 jz      short loc_402F04
.text:00402EFD
.text:00402EFD loc_402EFD:                             ; CODE XREF: sub_402990+590↓j
.text:00402EFD                 mov     eax, esi
.text:00402EFF                 jmp     loc_402AE7
.text:00402F04 ; ---------------------------------------------------------------------------
.text:00402F04
.text:00402F04 loc_402F04:                             ; CODE XREF: sub_402990+56B↑j
.text:00402F04                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402F08                 jz      loc_402F91
.text:00402F0E                 cmp     byte ptr [ecx], 0
.text:00402F11                 jz      short loc_402F22
.text:00402F13
.text:00402F13 loc_402F13:                             ; CODE XREF: sub_402990+604↓j
.text:00402F13                 inc     dword ptr [ebp+0]
.text:00402F16                 mov     [ebp+0Ch], ecx
.text:00402F19
.text:00402F19 loc_402F19:                             ; CODE XREF: sub_402990+5AB↓j
.text:00402F19                                         ; sub_402990+5C6↓j ...
.text:00402F19                 mov     dword ptr [ebp+14h], 0
.text:00402F20                 jmp     short loc_402EFD
.text:00402F22 ; ---------------------------------------------------------------------------
.text:00402F22
.text:00402F22 loc_402F22:                             ; CODE XREF: sub_402990+581↑j
.text:00402F22                 mov     ecx, [ebp+0]
.text:00402F25                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402F29                 jz      short loc_402F3D
.text:00402F2B                 mov     eax, [esp+5Ch+arg_4]
.text:00402F2F                 lea     edx, [ecx+1]
.text:00402F32                 mov     [ebp+0], edx
.text:00402F35                 mov     ebx, [eax+ecx*4]
.text:00402F38                 mov     [ebp+0Ch], ebx
.text:00402F3B                 jmp     short loc_402F19
.text:00402F3D ; ---------------------------------------------------------------------------
.text:00402F3D
.text:00402F3D loc_402F3D:                             ; CODE XREF: sub_402990+599↑j
.text:00402F3D                 mov     ecx, [esp+5Ch+var_14]
.text:00402F41                 test    ecx, ecx
.text:00402F43                 jnz     short loc_402F5F
.text:00402F45
.text:00402F45 loc_402F45:                             ; CODE XREF: sub_402990+5FF↓j
.text:00402F45                 mov     [ebp+8], edi
.text:00402F48                 mov     edi, [esp+5Ch+Str]
.text:00402F4C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00402F4F                 jz      short loc_402F58
.text:00402F51                 mov     esi, 3Fh ; '?'
.text:00402F56                 jmp     short loc_402F19
.text:00402F58 ; ---------------------------------------------------------------------------
.text:00402F58
.text:00402F58 loc_402F58:                             ; CODE XREF: sub_402990+5BF↑j
.text:00402F58                 mov     esi, 3Ah ; ':'
.text:00402F5D                 jmp     short loc_402F19
.text:00402F5F ; ---------------------------------------------------------------------------
.text:00402F5F
.text:00402F5F loc_402F5F:                             ; CODE XREF: sub_402990+5B3↑j
.text:00402F5F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402F66                 call    ds:libintl_gettext
.text:00402F6C                 mov     [esp+5Ch+var_50], edi
.text:00402F70                 mov     ebx, [esp+5Ch+arg_4]
.text:00402F74                 mov     edx, ds:_iob
.text:00402F7A                 mov     esi, [ebx]
.text:00402F7C                 add     edx, 40h ; '@'
.text:00402F7F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402F83                 mov     [esp+5Ch+MaxCount], esi
.text:00402F87                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402F8A                 call    fprintf
.text:00402F8F                 jmp     short loc_402F45
.text:00402F91 ; ---------------------------------------------------------------------------
.text:00402F91
.text:00402F91 loc_402F91:                             ; CODE XREF: sub_402990+578↑j
.text:00402F91                 cmp     byte ptr [ecx], 0
.text:00402F94                 jnz     loc_402F13
.text:00402F9A                 mov     dword ptr [ebp+0Ch], 0
.text:00402FA1                 jmp     loc_402F19
.text:00402FA6 ; ---------------------------------------------------------------------------
.text:00402FA6
.text:00402FA6 loc_402FA6:                             ; CODE XREF: sub_402990+55E↑j
.text:00402FA6                 movzx   edx, byte ptr [eax+1]
.text:00402FAA                 cmp     dl, 3Bh ; ';'
.text:00402FAD                 jnz     loc_402EF8
.text:00402FB3                 mov     [esp+5Ch+var_2C], 0
.text:00402FBB                 mov     [esp+5Ch+var_30], 0
.text:00402FC3                 mov     [esp+5Ch+var_34], 0
.text:00402FCB                 mov     [esp+5Ch+var_38], 0
.text:00402FD3                 cmp     byte ptr [ecx], 0
.text:00402FD6                 jz      loc_40324B
.text:00402FDC                 inc     dword ptr [ebp+0]
.text:00402FDF                 mov     [ebp+0Ch], ecx
.text:00402FE2
.text:00402FE2 loc_402FE2:                             ; CODE XREF: sub_402990+8D4↓j
.text:00402FE2                 mov     edi, [ebp+0Ch]
.text:00402FE5                 mov     [ebp+14h], edi
.text:00402FE8                 movzx   eax, byte ptr [edi]
.text:00402FEB                 test    al, al
.text:00402FED                 jz      short loc_402FFF
.text:00402FEF                 cmp     al, 3Dh ; '='
.text:00402FF1                 jz      short loc_402FFF
.text:00402FF3
.text:00402FF3 loc_402FF3:                             ; CODE XREF: sub_402990+66D↓j
.text:00402FF3                 inc     edi
.text:00402FF4                 movzx   eax, byte ptr [edi]
.text:00402FF7                 test    al, al
.text:00402FF9                 jz      short loc_402FFF
.text:00402FFB                 cmp     al, 3Dh ; '='
.text:00402FFD                 jnz     short loc_402FF3
.text:00402FFF
.text:00402FFF loc_402FFF:                             ; CODE XREF: sub_402990+65D↑j
.text:00402FFF                                         ; sub_402990+661↑j ...
.text:00402FFF                 mov     [esp+5Ch+var_3C], 0
.text:00403007                 mov     esi, [esp+5Ch+arg_C]
.text:0040300B                 mov     eax, [esi]
.text:0040300D                 test    eax, eax
.text:0040300F                 jz      loc_403190
.text:00403015                 mov     ecx, eax
.text:00403017
.text:00403017 loc_403017:                             ; CODE XREF: sub_402990+6B3↓j
.text:00403017                 mov     ebx, [ebp+14h]
.text:0040301A                 mov     eax, edi
.text:0040301C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040301F                 sub     eax, ebx
.text:00403021                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00403025                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00403029                 call    strncmp
.text:0040302E                 test    eax, eax
.text:00403030                 jz      loc_4031F7
.text:00403036
.text:00403036 loc_403036:                             ; CODE XREF: sub_402990+88C↓j
.text:00403036                                         ; sub_402990+89D↓j
.text:00403036                 inc     [esp+5Ch+var_3C]
.text:0040303A                 add     esi, 10h
.text:0040303D                 mov     edx, [esi]
.text:0040303F                 test    edx, edx
.text:00403041                 mov     ecx, edx
.text:00403043                 jnz     short loc_403017
.text:00403045
.text:00403045 loc_403045:                             ; CODE XREF: sub_402990+8B6↓j
.text:00403045                 mov     esi, [esp+5Ch+var_34]
.text:00403049                 test    esi, esi
.text:0040304B                 jz      short loc_403059
.text:0040304D                 mov     ebx, [esp+5Ch+var_30]
.text:00403051                 test    ebx, ebx
.text:00403053                 jz      loc_4031A1
.text:00403059
.text:00403059 loc_403059:                             ; CODE XREF: sub_402990+6BB↑j
.text:00403059                 mov     esi, [esp+5Ch+var_2C]
.text:0040305D                 test    esi, esi
.text:0040305F                 jz      loc_403190
.text:00403065                 cmp     byte ptr [edi], 0
.text:00403068                 jz      loc_403110
.text:0040306E                 mov     ecx, [esp+5Ch+var_2C]
.text:00403072                 mov     ebx, [ecx+4]
.text:00403075                 test    ebx, ebx
.text:00403077                 jz      short loc_4030B8
.text:00403079                 lea     edx, [edi+1]
.text:0040307C                 mov     [ebp+0Ch], edx
.text:0040307F
.text:0040307F loc_40307F:                             ; CODE XREF: sub_402990+788↓j
.text:0040307F                                         ; sub_402990+7A7↓j
.text:0040307F                 mov     edi, [ebp+14h]
.text:00403082                 mov     [esp+5Ch+Str1], edi ; Str
.text:00403085                 call    strlen
.text:0040308A                 add     [ebp+14h], eax
.text:0040308D                 mov     eax, [esp+5Ch+arg_10]
.text:00403091                 test    eax, eax
.text:00403093                 jz      short loc_4030A0
.text:00403095                 mov     edx, [esp+5Ch+var_38]
.text:00403099                 mov     ebp, [esp+5Ch+arg_10]
.text:0040309D                 mov     [ebp+0], edx
.text:004030A0
.text:004030A0 loc_4030A0:                             ; CODE XREF: sub_402990+703↑j
.text:004030A0                 mov     eax, [esp+5Ch+var_2C]
.text:004030A4                 mov     ecx, [eax+8]
.text:004030A7                 test    ecx, ecx
.text:004030A9                 jnz     loc_402C6A
.text:004030AF                 mov     ecx, [esp+5Ch+var_2C]
.text:004030B3                 jmp     loc_402C62
.text:004030B8 ; ---------------------------------------------------------------------------
.text:004030B8
.text:004030B8 loc_4030B8:                             ; CODE XREF: sub_402990+6E7↑j
.text:004030B8                 mov     eax, [esp+5Ch+var_14]
.text:004030BC                 test    eax, eax
.text:004030BE                 jnz     short loc_4030D3
.text:004030C0
.text:004030C0 loc_4030C0:                             ; CODE XREF: sub_402990+779↓j
.text:004030C0                 mov     ecx, [ebp+14h]
.text:004030C3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004030C6                 call    strlen
.text:004030CB                 add     [ebp+14h], eax
.text:004030CE                 jmp     loc_402CE8
.text:004030D3 ; ---------------------------------------------------------------------------
.text:004030D3
.text:004030D3 loc_4030D3:                             ; CODE XREF: sub_402990+72E↑j
.text:004030D3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004030DA                 call    ds:libintl_gettext
.text:004030E0                 mov     edx, [esp+5Ch+var_2C]
.text:004030E4                 mov     ebx, [esp+5Ch+arg_4]
.text:004030E8                 mov     edi, [edx]
.text:004030EA                 mov     [esp+5Ch+var_50], edi
.text:004030EE                 mov     edi, ds:_iob
.text:004030F4                 mov     esi, [ebx]
.text:004030F6                 mov     [esp+5Ch+Str2], eax ; Format
.text:004030FA                 add     edi, 40h ; '@'
.text:004030FD                 mov     [esp+5Ch+MaxCount], esi
.text:00403101                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00403104                 call    fprintf
.text:00403109                 jmp     short loc_4030C0
.text:00403109 ; ---------------------------------------------------------------------------
.text:0040310B                 align 10h
.text:00403110
.text:00403110 loc_403110:                             ; CODE XREF: sub_402990+6D8↑j
.text:00403110                 mov     esi, [esp+5Ch+var_2C]
.text:00403114                 cmp     dword ptr [esi+4], 1
.text:00403118                 jnz     loc_40307F
.text:0040311E                 mov     ecx, [ebp+0]
.text:00403121                 cmp     ecx, [esp+5Ch+arg_0]
.text:00403125                 jge     short loc_40313C
.text:00403127                 mov     eax, [esp+5Ch+arg_4]
.text:0040312B                 lea     ebx, [ecx+1]
.text:0040312E                 mov     [ebp+0], ebx
.text:00403131                 mov     edi, [eax+ecx*4]
.text:00403134                 mov     [ebp+0Ch], edi
.text:00403137                 jmp     loc_40307F
.text:0040313C ; ---------------------------------------------------------------------------
.text:0040313C
.text:0040313C loc_40313C:                             ; CODE XREF: sub_402990+795↑j
.text:0040313C                 mov     edx, [esp+5Ch+var_14]
.text:00403140                 test    edx, edx
.text:00403142                 jnz     short loc_403157
.text:00403144
.text:00403144 loc_403144:                             ; CODE XREF: sub_402990+7FE↓j
.text:00403144                 mov     edx, [ebp+14h]
.text:00403147                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040314A                 call    strlen
.text:0040314F                 add     [ebp+14h], eax
.text:00403152                 jmp     loc_402D79
.text:00403157 ; ---------------------------------------------------------------------------
.text:00403157
.text:00403157 loc_403157:                             ; CODE XREF: sub_402990+7B2↑j
.text:00403157                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040315E                 call    ds:libintl_gettext
.text:00403164                 mov     ecx, [ebp+0]
.text:00403167                 mov     ebx, [esp+5Ch+arg_4]
.text:0040316B                 mov     edi, [ebx+ecx*4-4]
.text:0040316F                 mov     ecx, ds:_iob
.text:00403175                 mov     [esp+5Ch+var_50], edi
.text:00403179                 mov     esi, [ebx]
.text:0040317B                 add     ecx, 40h ; '@'
.text:0040317E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403182                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403185                 mov     [esp+5Ch+MaxCount], esi
.text:00403189                 call    fprintf
.text:0040318E                 jmp     short loc_403144
.text:00403190 ; ---------------------------------------------------------------------------
.text:00403190
.text:00403190 loc_403190:                             ; CODE XREF: sub_402990+67F↑j
.text:00403190                                         ; sub_402990+6CF↑j
.text:00403190                 mov     dword ptr [ebp+14h], 0
.text:00403197                 mov     eax, 57h ; 'W'
.text:0040319C                 jmp     loc_402AE7
.text:004031A1 ; ---------------------------------------------------------------------------
.text:004031A1
.text:004031A1 loc_4031A1:                             ; CODE XREF: sub_402990+6C3↑j
.text:004031A1                 mov     edi, [esp+5Ch+var_14]
.text:004031A5                 test    edi, edi
.text:004031A7                 jnz     short loc_4031BF
.text:004031A9
.text:004031A9 loc_4031A9:                             ; CODE XREF: sub_402990+865↓j
.text:004031A9                 mov     edx, [ebp+14h]
.text:004031AC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004031AF                 call    strlen
.text:004031B4                 add     [ebp+14h], eax
.text:004031B7                 inc     dword ptr [ebp+0]
.text:004031BA                 jmp     loc_402CE8
.text:004031BF ; ---------------------------------------------------------------------------
.text:004031BF
.text:004031BF loc_4031BF:                             ; CODE XREF: sub_402990+817↑j
.text:004031BF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004031C6                 call    ds:libintl_gettext
.text:004031CC                 mov     ecx, [ebp+0]
.text:004031CF                 mov     ebx, [esp+5Ch+arg_4]
.text:004031D3                 mov     edi, [ebx+ecx*4]
.text:004031D6                 mov     ecx, ds:_iob
.text:004031DC                 mov     [esp+5Ch+var_50], edi
.text:004031E0                 mov     esi, [ebx]
.text:004031E2                 add     ecx, 40h ; '@'
.text:004031E5                 mov     [esp+5Ch+Str2], eax ; Format
.text:004031E9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004031EC                 mov     [esp+5Ch+MaxCount], esi
.text:004031F0                 call    fprintf
.text:004031F5                 jmp     short loc_4031A9
.text:004031F7 ; ---------------------------------------------------------------------------
.text:004031F7
.text:004031F7 loc_4031F7:                             ; CODE XREF: sub_402990+6A0↑j
.text:004031F7                 mov     edx, [ebp+14h]
.text:004031FA                 mov     ebx, edi
.text:004031FC                 mov     ecx, [esi]
.text:004031FE                 sub     ebx, edx
.text:00403200                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403203                 call    strlen
.text:00403208                 cmp     ebx, eax
.text:0040320A                 jz      short loc_403232
.text:0040320C                 mov     ebx, [esp+5Ch+var_2C]
.text:00403210                 test    ebx, ebx
.text:00403212                 jz      short loc_403221
.text:00403214                 mov     [esp+5Ch+var_34], 1
.text:0040321C                 jmp     loc_403036
.text:00403221 ; ---------------------------------------------------------------------------
.text:00403221
.text:00403221 loc_403221:                             ; CODE XREF: sub_402990+882↑j
.text:00403221                 mov     [esp+5Ch+var_2C], esi
.text:00403225                 mov     ecx, [esp+5Ch+var_3C]
.text:00403229                 mov     [esp+5Ch+var_38], ecx
.text:0040322D                 jmp     loc_403036
.text:00403232 ; ---------------------------------------------------------------------------
.text:00403232
.text:00403232 loc_403232:                             ; CODE XREF: sub_402990+87A↑j
.text:00403232                 mov     [esp+5Ch+var_2C], esi
.text:00403236                 mov     eax, [esp+5Ch+var_3C]
.text:0040323A                 mov     [esp+5Ch+var_30], 1
.text:00403242                 mov     [esp+5Ch+var_38], eax
.text:00403246                 jmp     loc_403045
.text:0040324B ; ---------------------------------------------------------------------------
.text:0040324B
.text:0040324B loc_40324B:                             ; CODE XREF: sub_402990+646↑j
.text:0040324B                 mov     edx, [ebp+0]
.text:0040324E                 cmp     edx, [esp+5Ch+arg_0]
.text:00403252                 jz      short loc_403269
.text:00403254                 mov     ebx, [esp+5Ch+arg_4]
.text:00403258                 lea     esi, [edx+1]
.text:0040325B                 mov     [ebp+0], esi
.text:0040325E                 mov     edi, [ebx+edx*4]
.text:00403261                 mov     [ebp+0Ch], edi
.text:00403264                 jmp     loc_402FE2
.text:00403269 ; ---------------------------------------------------------------------------
.text:00403269
.text:00403269 loc_403269:                             ; CODE XREF: sub_402990+8C2↑j
.text:00403269                 mov     edi, [esp+5Ch+var_14]
.text:0040326D                 test    edi, edi
.text:0040326F                 jnz     short loc_40328C
.text:00403271
.text:00403271 loc_403271:                             ; CODE XREF: sub_402990+92C↓j
.text:00403271                 mov     [ebp+8], esi
.text:00403274                 mov     ebp, [esp+5Ch+Str]
.text:00403278                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040327C                 jz      short loc_403288
.text:0040327E                 mov     bl, 3Fh ; '?'
.text:00403280
.text:00403280 loc_403280:                             ; CODE XREF: sub_402990+8FA↓j
.text:00403280                 movsx   eax, bl
.text:00403283                 jmp     loc_402AE7
.text:00403288 ; ---------------------------------------------------------------------------
.text:00403288
.text:00403288 loc_403288:                             ; CODE XREF: sub_402990+8EC↑j
.text:00403288                 mov     bl, 3Ah ; ':'
.text:0040328A                 jmp     short loc_403280
.text:0040328C ; ---------------------------------------------------------------------------
.text:0040328C
.text:0040328C loc_40328C:                             ; CODE XREF: sub_402990+8DF↑j
.text:0040328C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00403293                 call    ds:libintl_gettext
.text:00403299                 mov     [esp+5Ch+var_50], esi
.text:0040329D                 mov     edx, [esp+5Ch+arg_4]
.text:004032A1                 mov     ecx, ds:_iob
.text:004032A7                 mov     ebx, [edx]
.text:004032A9                 add     ecx, 40h ; '@'
.text:004032AC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004032B0                 mov     [esp+5Ch+MaxCount], ebx
.text:004032B4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004032B7                 call    fprintf
.text:004032BC                 jmp     short loc_403271
.text:004032BC ; ---------------------------------------------------------------------------
.text:004032BE                 align 10h
.text:004032C0
.text:004032C0 loc_4032C0:                             ; CODE XREF: sub_402990+54C↑j
.text:004032C0                                         ; sub_402990+555↑j
.text:004032C0                 mov     eax, [esp+5Ch+var_14]
.text:004032C4                 test    eax, eax
.text:004032C6                 jz      short loc_4032FF
.text:004032C8                 mov     ebx, [ebp+1Ch]
.text:004032CB                 test    ebx, ebx
.text:004032CD                 jz      short loc_403307
.text:004032CF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:004032D6
.text:004032D6 loc_4032D6:                             ; CODE XREF: sub_402990+97E↓j
.text:004032D6                 call    ds:libintl_gettext
.text:004032DC                 mov     [esp+5Ch+var_50], esi
.text:004032E0                 mov     ebx, [esp+5Ch+arg_4]
.text:004032E4                 mov     edx, ds:_iob
.text:004032EA                 mov     esi, [ebx]
.text:004032EC                 add     edx, 40h ; '@'
.text:004032EF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004032F3                 mov     [esp+5Ch+MaxCount], esi
.text:004032F7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004032FA                 call    fprintf
.text:004032FF
.text:004032FF loc_4032FF:                             ; CODE XREF: sub_402990+936↑j
.text:004032FF                 mov     [ebp+8], edi
.text:00403302                 jmp     loc_402CE8
.text:00403307 ; ---------------------------------------------------------------------------
.text:00403307
.text:00403307 loc_403307:                             ; CODE XREF: sub_402990+93D↑j
.text:00403307                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040330E                 jmp     short loc_4032D6
.text:00403310 ; ---------------------------------------------------------------------------
.text:00403310
.text:00403310 loc_403310:                             ; CODE XREF: sub_402990+26E↑j
.text:00403310                 mov     edi, [esp+5Ch+var_14]
.text:00403314                 test    edi, edi
.text:00403316                 jnz     short loc_40332E
.text:00403318
.text:00403318 loc_403318:                             ; CODE XREF: sub_402990+9D4↓j
.text:00403318                 mov     edx, [ebp+14h]
.text:0040331B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040331E                 call    strlen
.text:00403323                 add     [ebp+14h], eax
.text:00403326                 inc     dword ptr [ebp+0]
.text:00403329                 jmp     loc_402E6E
.text:0040332E ; ---------------------------------------------------------------------------
.text:0040332E
.text:0040332E loc_40332E:                             ; CODE XREF: sub_402990+986↑j
.text:0040332E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00403335                 call    ds:libintl_gettext
.text:0040333B                 mov     ebx, [ebp+0]
.text:0040333E                 mov     edi, [esp+5Ch+arg_4]
.text:00403342                 mov     ecx, [edi+ebx*4]
.text:00403345                 mov     ebx, ds:_iob
.text:0040334B                 mov     [esp+5Ch+var_50], ecx
.text:0040334F                 mov     esi, [edi]
.text:00403351                 add     ebx, 40h ; '@'
.text:00403354                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403358                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040335B                 mov     [esp+5Ch+MaxCount], esi
.text:0040335F                 call    fprintf
.text:00403364                 jmp     short loc_403318
.text:00403366 ; ---------------------------------------------------------------------------
.text:00403366
.text:00403366 loc_403366:                             ; CODE XREF: sub_402990+246↑j
.text:00403366                 mov     ecx, [ebp+14h]
.text:00403369                 mov     ebx, edi
.text:0040336B                 mov     edx, [esi]
.text:0040336D                 sub     ebx, ecx
.text:0040336F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403372                 call    strlen
.text:00403377                 cmp     ebx, eax
.text:00403379                 jz      short loc_4033D1
.text:0040337B                 mov     ebx, [esp+5Ch+var_18]
.text:0040337F                 test    ebx, ebx
.text:00403381                 jz      short loc_4033C0
.text:00403383                 mov     edx, [esp+5Ch+arg_14]
.text:00403387                 test    edx, edx
.text:00403389                 jnz     short loc_403397
.text:0040338B                 mov     ecx, [esp+5Ch+var_18]
.text:0040338F                 mov     ebx, [esi+4]
.text:00403392                 cmp     [ecx+4], ebx
.text:00403395                 jz      short loc_4033A4
.text:00403397
.text:00403397 loc_403397:                             ; CODE XREF: sub_402990+9F9↑j
.text:00403397                                         ; sub_402990+A1A↓j ...
.text:00403397                 mov     [esp+5Ch+var_20], 1
.text:0040339F                 jmp     loc_402BDC
.text:004033A4 ; ---------------------------------------------------------------------------
.text:004033A4
.text:004033A4 loc_4033A4:                             ; CODE XREF: sub_402990+A05↑j
.text:004033A4                 mov     edx, [esi+8]
.text:004033A7                 cmp     [ecx+8], edx
.text:004033AA                 jnz     short loc_403397
.text:004033AC                 mov     ebx, [esi+0Ch]
.text:004033AF                 cmp     [ecx+0Ch], ebx
.text:004033B2                 jnz     short loc_403397
.text:004033B4                 jmp     loc_402BDC
.text:004033B4 ; ---------------------------------------------------------------------------
.text:004033B9                 align 10h
.text:004033C0
.text:004033C0 loc_4033C0:                             ; CODE XREF: sub_402990+9F1↑j
.text:004033C0                 mov     [esp+5Ch+var_18], esi
.text:004033C4                 mov     eax, [esp+5Ch+var_28]
.text:004033C8                 mov     [esp+5Ch+var_24], eax
.text:004033CC                 jmp     loc_402BDC
.text:004033D1 ; ---------------------------------------------------------------------------
.text:004033D1
.text:004033D1 loc_4033D1:                             ; CODE XREF: sub_402990+9E9↑j
.text:004033D1                 mov     [esp+5Ch+var_18], esi
.text:004033D5                 mov     ecx, [esp+5Ch+var_28]
.text:004033D9                 mov     [esp+5Ch+var_1C], 1
.text:004033E1                 mov     [esp+5Ch+var_24], ecx
.text:004033E5                 jmp     loc_402BF0
.text:004033EA ; ---------------------------------------------------------------------------
.text:004033EA
.text:004033EA loc_4033EA:                             ; CODE XREF: sub_402990+1BF↑j
.text:004033EA                 mov     eax, [esp+5Ch+Str]
.text:004033EE                 movsx   esi, dl
.text:004033F1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004033F5                 mov     [esp+5Ch+Str1], eax ; Str
.text:004033F8                 call    strchr
.text:004033FD                 test    eax, eax
.text:004033FF                 jnz     loc_402EB0
.text:00403405                 jmp     loc_402B55
.text:0040340A ; ---------------------------------------------------------------------------
.text:0040340A
.text:0040340A loc_40340A:                             ; CODE XREF: sub_402990+17C↑j
.text:0040340A                 mov     ecx, 1
.text:0040340F                 jmp     loc_402B12
.text:00403414 ; ---------------------------------------------------------------------------
.text:00403414
.text:00403414 loc_403414:                             ; CODE XREF: sub_402990+D4↑j
.text:00403414                                         ; sub_402990+130↑j
.text:00403414                 mov     eax, [ebp+20h]
.text:00403417                 cmp     eax, [ebp+24h]
.text:0040341A                 jz      loc_402AF0
.text:00403420                 mov     [ebp+0], eax
.text:00403423                 jmp     loc_402AF0
.text:00403428 ; ---------------------------------------------------------------------------
.text:00403428
.text:00403428 loc_403428:                             ; CODE XREF: sub_402990+FE↑j
.text:00403428                 mov     [ebp+20h], eax
.text:0040342B                 jmp     loc_402AB0
.text:00403430 ; ---------------------------------------------------------------------------
.text:00403430
.text:00403430 loc_403430:                             ; CODE XREF: sub_402990+CA↑j
.text:00403430                 mov     edx, [ebp+20h]
.text:00403433                 mov     eax, [ebp+24h]
.text:00403436                 cmp     edx, eax
.text:00403438                 jz      short loc_4034B0
.text:0040343A                 cmp     eax, ebx
.text:0040343C                 jz      short loc_403451
.text:0040343E                 mov     [esp+5Ch+Str2], ebp
.text:00403442                 mov     ebx, [esp+5Ch+arg_4]
.text:00403446                 mov     [esp+5Ch+Str1], ebx
.text:00403449                 call    sub_403640
.text:0040344E                 mov     ebx, [ebp+0]
.text:00403451
.text:00403451 loc_403451:                             ; CODE XREF: sub_402990+AAC↑j
.text:00403451                                         ; sub_402990+B22↓j ...
.text:00403451                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403455                 jge     short loc_4034A0
.text:00403457                 mov     esi, [esp+5Ch+arg_4]
.text:0040345B                 mov     eax, [esi+ebx*4]
.text:0040345E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403461                 jz      short loc_4034A8
.text:00403463                 lea     esi, [esi+0]
.text:00403469                 lea     edi, [edi+0]
.text:00403470
.text:00403470 loc_403470:                             ; CODE XREF: sub_402990+AFC↓j
.text:00403470                                         ; sub_402990+B1C↓j
.text:00403470                 lea     eax, [ebx+1]
.text:00403473                 mov     ebx, eax
.text:00403475                 mov     [ebp+0], eax
.text:00403478                 cmp     eax, [esp+5Ch+arg_0]
.text:0040347C                 jge     short loc_4034A0
.text:0040347E                 mov     edi, [esp+5Ch+arg_4]
.text:00403482                 mov     edx, [edi+eax*4]
.text:00403485                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00403488                 jz      short loc_403490
.text:0040348A
.text:0040348A loc_40348A:                             ; CODE XREF: sub_402990+B04↓j
.text:0040348A                 mov     ebx, eax
.text:0040348C                 jmp     short loc_403470
.text:0040348C ; ---------------------------------------------------------------------------
.text:0040348E                 align 10h
.text:00403490
.text:00403490 loc_403490:                             ; CODE XREF: sub_402990+AF8↑j
.text:00403490                 cmp     byte ptr [edx+1], 0
.text:00403494                 jz      short loc_40348A
.text:00403496                 lea     esi, [esi+0]
.text:00403499                 lea     edi, [edi+0]
.text:004034A0
.text:004034A0 loc_4034A0:                             ; CODE XREF: sub_402990+AC5↑j
.text:004034A0                                         ; sub_402990+AEC↑j ...
.text:004034A0                 mov     [ebp+24h], ebx
.text:004034A3                 jmp     loc_402A60
.text:004034A8 ; ---------------------------------------------------------------------------
.text:004034A8
.text:004034A8 loc_4034A8:                             ; CODE XREF: sub_402990+AD1↑j
.text:004034A8                 cmp     byte ptr [eax+1], 0
.text:004034AC                 jz      short loc_403470
.text:004034AE                 jmp     short loc_4034A0
.text:004034B0 ; ---------------------------------------------------------------------------
.text:004034B0
.text:004034B0 loc_4034B0:                             ; CODE XREF: sub_402990+AA8↑j
.text:004034B0                 cmp     edx, ebx
.text:004034B2                 jz      short loc_403451
.text:004034B4                 mov     [ebp+20h], ebx
.text:004034B7                 jmp     short loc_403451
.text:004034B9 ; ---------------------------------------------------------------------------
.text:004034B9
.text:004034B9 loc_4034B9:                             ; CODE XREF: sub_402990+88↑j
.text:004034B9                 mov     dword ptr [ebp+18h], 0
.text:004034C0                 mov     esi, [esp+5Ch+Str]
.text:004034C4
.text:004034C4 loc_4034C4:                             ; CODE XREF: sub_402990+B49↓j
.text:004034C4                 inc     esi
.text:004034C5                 jmp     loc_402A28
.text:004034C5 ; ---------------------------------------------------------------------------
.text:004034CA                 align 10h
.text:004034D0
.text:004034D0 loc_4034D0:                             ; CODE XREF: sub_402990+80↑j
.text:004034D0                 mov     dword ptr [ebp+18h], 2
.text:004034D7                 mov     esi, ecx
.text:004034D9                 jmp     short loc_4034C4
.text:004034D9 ; ---------------------------------------------------------------------------
.text:004034DB                 align 10h
.text:004034E0
.text:004034E0 loc_4034E0:                             ; CODE XREF: sub_402990+69↑j
.text:004034E0                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:004034E7                 call    getenv
.text:004034EC                 test    eax, eax
.text:004034EE                 jz      loc_402A04
.text:004034F4                 jmp     loc_4029FF
.text:004034F4 ; ---------------------------------------------------------------------------
.text:004034F9                 align 10h
.text:00403500
.text:00403500 loc_403500:                             ; CODE XREF: sub_402990+3F↑j
.text:00403500                 mov     dword ptr [ebp+0], 1
.text:00403507                 mov     ebx, 1
.text:0040350C                 jmp     loc_4029E0
.text:0040350C sub_402990      endp
.text:0040350C
.text:00403511 ; ---------------------------------------------------------------------------
.text:00403511                 jmp     short sub_403520
.text:00403511 ; ---------------------------------------------------------------------------
.text:00403513                 align 10h
.text:00403520
.text:00403520 ; =============== S U B R O U T I N E =======================================
.text:00403520
.text:00403520
.text:00403520 ; int __cdecl sub_403520(int, int, char *, int, int, int, int)
.text:00403520 sub_403520      proc near               ; CODE XREF: .text:00403511↑j
.text:00403520                                         ; sub_404A20+3A↓p ...
.text:00403520
.text:00403520 var_2C          = dword ptr -2Ch
.text:00403520 var_28          = dword ptr -28h
.text:00403520 Str             = dword ptr -24h
.text:00403520 var_20          = dword ptr -20h
.text:00403520 var_1C          = dword ptr -1Ch
.text:00403520 var_18          = dword ptr -18h
.text:00403520 var_14          = dword ptr -14h
.text:00403520 var_10          = dword ptr -10h
.text:00403520 arg_0           = dword ptr  4
.text:00403520 arg_4           = dword ptr  8
.text:00403520 arg_8           = dword ptr  0Ch
.text:00403520 arg_C           = dword ptr  10h
.text:00403520 arg_10          = dword ptr  14h
.text:00403520 arg_14          = dword ptr  18h
.text:00403520 arg_18          = dword ptr  1Ch
.text:00403520
.text:00403520                 sub     esp, 2Ch
.text:00403523                 mov     edx, dword_410010
.text:00403529                 mov     [esp+2Ch+var_10], offset dword_411000 ; int
.text:00403531                 mov     ecx, dword_410014
.text:00403537                 mov     ds:dword_411000, edx
.text:0040353D                 mov     edx, [esp+2Ch+arg_18]
.text:00403541                 mov     ds:dword_411004, ecx
.text:00403547                 mov     ecx, [esp+2Ch+arg_14]
.text:0040354B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040354F                 mov     edx, [esp+2Ch+arg_10]
.text:00403553                 mov     [esp+2Ch+var_18], ecx ; int
.text:00403557                 mov     ecx, [esp+2Ch+arg_C]
.text:0040355B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040355F                 mov     edx, [esp+2Ch+arg_8]
.text:00403563                 mov     [esp+2Ch+var_20], ecx ; int
.text:00403567                 mov     ecx, [esp+2Ch+arg_4]
.text:0040356B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040356F                 mov     edx, [esp+2Ch+arg_0]
.text:00403573                 mov     [esp+2Ch+var_28], ecx ; int
.text:00403577                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040357A                 call    sub_402990
.text:0040357F                 mov     ecx, ds:dword_411000
.text:00403585                 mov     dword_410010, ecx
.text:0040358B                 mov     ecx, ds:dword_41100C
.text:00403591                 mov     ds:dword_4114D0, ecx
.text:00403597                 mov     ecx, ds:dword_411008
.text:0040359D                 mov     dword_410018, ecx
.text:004035A3                 add     esp, 2Ch
.text:004035A6                 retn
.text:004035A6 sub_403520      endp
.text:004035A6
.text:004035A6 ; ---------------------------------------------------------------------------
.text:004035A7                 align 10h
.text:004035B0                 sub     esp, 2Ch
.text:004035B3                 mov     edx, dword_410010
.text:004035B9                 mov     dword ptr [esp+1Ch], offset dword_411000
.text:004035C1                 mov     ecx, dword_410014
.text:004035C7                 mov     dword ptr [esp+18h], 1
.text:004035CF                 mov     ds:dword_411000, edx
.text:004035D5                 mov     edx, [esp+38h]
.text:004035D9                 mov     ds:dword_411004, ecx
.text:004035DF                 mov     ecx, [esp+34h]
.text:004035E3                 mov     [esp+8], edx
.text:004035E7                 mov     edx, [esp+30h]
.text:004035EB                 mov     [esp+4], ecx
.text:004035EF                 mov     dword ptr [esp+14h], 0
.text:004035F7                 mov     dword ptr [esp+10h], 0
.text:004035FF                 mov     dword ptr [esp+0Ch], 0
.text:00403607                 mov     [esp], edx
.text:0040360A                 call    sub_402990
.text:0040360F                 mov     ecx, ds:dword_411000
.text:00403615                 mov     dword_410010, ecx
.text:0040361B                 mov     ecx, ds:dword_41100C
.text:00403621                 mov     ds:dword_4114D0, ecx
.text:00403627                 mov     ecx, ds:dword_411008
.text:0040362D                 mov     dword_410018, ecx
.text:00403633                 add     esp, 2Ch
.text:00403636                 retn
.text:00403636 ; ---------------------------------------------------------------------------
.text:00403637                 align 10h
.text:00403640
.text:00403640 ; =============== S U B R O U T I N E =======================================
.text:00403640
.text:00403640
.text:00403640 sub_403640      proc near               ; CODE XREF: sub_402990+113↑p
.text:00403640                                         ; sub_402990+AB9↑p
.text:00403640
.text:00403640 var_2C          = dword ptr -2Ch
.text:00403640 var_28          = dword ptr -28h
.text:00403640 var_24          = dword ptr -24h
.text:00403640 var_20          = dword ptr -20h
.text:00403640 var_1C          = dword ptr -1Ch
.text:00403640 var_18          = dword ptr -18h
.text:00403640 var_14          = dword ptr -14h
.text:00403640 arg_0           = dword ptr  4
.text:00403640 arg_4           = dword ptr  8
.text:00403640
.text:00403640                 push    ebp
.text:00403641                 push    edi
.text:00403642                 push    esi
.text:00403643                 push    ebx
.text:00403644                 sub     esp, 1Ch
.text:00403647                 mov     ecx, [esp+2Ch+arg_4]
.text:0040364B                 mov     eax, [esp+2Ch+arg_4]
.text:0040364F                 mov     ebx, [esp+2Ch+arg_4]
.text:00403653                 mov     edx, [ecx+20h]
.text:00403656                 mov     edi, [esp+2Ch+arg_0]
.text:0040365A                 mov     ecx, [ebx]
.text:0040365C                 mov     [esp+2Ch+var_2C], edx
.text:0040365F                 mov     [esp+2Ch+var_14], edx
.text:00403663                 mov     edx, [eax+24h]
.text:00403666                 mov     [esp+2Ch+var_28], ecx
.text:0040366A                 mov     [esp+2Ch+var_1C], ecx
.text:0040366E                 cmp     ecx, edx
.text:00403670                 mov     [esp+2Ch+var_18], edx
.text:00403674                 jle     short loc_4036F0
.text:00403676                 mov     esi, [esp+2Ch+var_2C]
.text:00403679                 cmp     edx, esi
.text:0040367B                 jle     short loc_4036F0
.text:0040367D                 lea     esi, [esi+0]
.text:00403680
.text:00403680 loc_403680:                             ; CODE XREF: sub_403640+A1↓j
.text:00403680                 mov     ebx, [esp+2Ch+var_1C]
.text:00403684                 mov     edx, [esp+2Ch+var_18]
.text:00403688                 mov     ebp, [esp+2Ch+var_18]
.text:0040368C                 mov     eax, [esp+2Ch+var_14]
.text:00403690                 sub     ebx, edx
.text:00403692                 mov     [esp+2Ch+var_20], ebx
.text:00403696                 sub     ebp, eax
.text:00403698                 cmp     ebx, ebp
.text:0040369A                 jle     short loc_403715
.text:0040369C                 xor     esi, esi
.text:0040369E                 cmp     esi, ebp
.text:004036A0                 jge     short loc_4036CD
.text:004036A2                 mov     ecx, [esp+2Ch+var_1C]
.text:004036A6                 sub     ecx, ebp
.text:004036A8                 mov     [esp+2Ch+var_24], ecx
.text:004036AC                 lea     esi, [esi+0]
.text:004036B0
.text:004036B0 loc_4036B0:                             ; CODE XREF: sub_403640+8B↓j
.text:004036B0                 mov     ecx, [esp+2Ch+var_14]
.text:004036B4                 mov     edx, [esp+2Ch+var_24]
.text:004036B8                 add     ecx, esi
.text:004036BA                 add     edx, esi
.text:004036BC                 mov     ebx, [edi+ecx*4]
.text:004036BF                 mov     eax, [edi+edx*4]
.text:004036C2                 inc     esi
.text:004036C3                 cmp     esi, ebp
.text:004036C5                 mov     [edi+ecx*4], eax
.text:004036C8                 mov     [edi+edx*4], ebx
.text:004036CB                 jl      short loc_4036B0
.text:004036CD
.text:004036CD loc_4036CD:                             ; CODE XREF: sub_403640+60↑j
.text:004036CD                 sub     [esp+2Ch+var_1C], ebp
.text:004036D1
.text:004036D1 loc_4036D1:                             ; CODE XREF: sub_403640+107↓j
.text:004036D1                 mov     eax, [esp+2Ch+var_18]
.text:004036D5                 cmp     [esp+2Ch+var_1C], eax
.text:004036D9                 jle     short loc_4036F0
.text:004036DB                 mov     ebp, [esp+2Ch+var_14]
.text:004036DF                 cmp     eax, ebp
.text:004036E1                 jg      short loc_403680
.text:004036E3                 lea     esi, [esi+0]
.text:004036E9                 lea     edi, [edi+0]
.text:004036F0
.text:004036F0 loc_4036F0:                             ; CODE XREF: sub_403640+34↑j
.text:004036F0                                         ; sub_403640+3B↑j ...
.text:004036F0                 mov     esi, [esp+2Ch+var_28]
.text:004036F4                 mov     ecx, [esp+2Ch+var_18]
.text:004036F8                 mov     eax, [esp+2Ch+var_2C]
.text:004036FB                 mov     edi, [esp+2Ch+arg_4]
.text:004036FF                 mov     edx, [esp+2Ch+var_28]
.text:00403703                 sub     esi, ecx
.text:00403705                 add     esi, eax
.text:00403707                 mov     [edi+20h], esi
.text:0040370A                 mov     [edi+24h], edx
.text:0040370D                 add     esp, 1Ch
.text:00403710                 pop     ebx
.text:00403711                 pop     esi
.text:00403712                 pop     edi
.text:00403713                 pop     ebp
.text:00403714                 retn
.text:00403715 ; ---------------------------------------------------------------------------
.text:00403715
.text:00403715 loc_403715:                             ; CODE XREF: sub_403640+5A↑j
.text:00403715                 xor     esi, esi
.text:00403717                 cmp     esi, [esp+2Ch+var_20]
.text:0040371B                 jge     short loc_40373F
.text:0040371D                 lea     esi, [esi+0]
.text:00403720
.text:00403720 loc_403720:                             ; CODE XREF: sub_403640+FD↓j
.text:00403720                 mov     ebx, [esp+2Ch+var_14]
.text:00403724                 mov     ebp, [esp+2Ch+var_18]
.text:00403728                 add     ebx, esi
.text:0040372A                 add     ebp, esi
.text:0040372C                 mov     edx, [edi+ebx*4]
.text:0040372F                 inc     esi
.text:00403730                 cmp     esi, [esp+2Ch+var_20]
.text:00403734                 mov     ecx, [edi+ebp*4]
.text:00403737                 mov     [edi+ebx*4], ecx
.text:0040373A                 mov     [edi+ebp*4], edx
.text:0040373D                 jl      short loc_403720
.text:0040373F
.text:0040373F loc_40373F:                             ; CODE XREF: sub_403640+DB↑j
.text:0040373F                 mov     esi, [esp+2Ch+var_20]
.text:00403743                 add     [esp+2Ch+var_14], esi
.text:00403747                 jmp     short loc_4036D1
.text:00403747 sub_403640      endp
.text:00403747
.text:00403747 ; ---------------------------------------------------------------------------
.text:00403749                 align 20h
.text:00403760 aCoreutils530Sr db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00403760                                         ; DATA XREF: sub_4037D0+C79↓o
.text:00403788                 align 20h
.text:004037A0 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:004037A0                                         ; DATA XREF: sub_4037D0+C81↓o
.text:004037C6                 align 10h
.text:004037D0
.text:004037D0 ; =============== S U B R O U T I N E =======================================
.text:004037D0
.text:004037D0
.text:004037D0 ; int __cdecl sub_4037D0(int, int, int, int, char *Str)
.text:004037D0 sub_4037D0      proc near               ; CODE XREF: sub_4018C0+3A4↑p
.text:004037D0                                         ; sub_4018C0+41D↑p
.text:004037D0
.text:004037D0 C               = dword ptr -13Ch
.text:004037D0 Type            = dword ptr -138h
.text:004037D0 Radix           = dword ptr -134h
.text:004037D0 var_130         = dword ptr -130h
.text:004037D0 var_124         = dword ptr -124h
.text:004037D0 var_120         = dword ptr -120h
.text:004037D0 var_11C         = dword ptr -11Ch
.text:004037D0 var_118         = dword ptr -118h
.text:004037D0 var_114         = dword ptr -114h
.text:004037D0 var_110         = dword ptr -110h
.text:004037D0 var_10C         = dword ptr -10Ch
.text:004037D0 var_108         = dword ptr -108h
.text:004037D0 var_104         = dword ptr -104h
.text:004037D0 var_100         = dword ptr -100h
.text:004037D0 var_F8          = dword ptr -0F8h
.text:004037D0 var_F4          = dword ptr -0F4h
.text:004037D0 var_F0          = dword ptr -0F0h
.text:004037D0 var_EC          = dword ptr -0ECh
.text:004037D0 var_E8          = dword ptr -0E8h
.text:004037D0 var_E4          = dword ptr -0E4h
.text:004037D0 var_E0          = dword ptr -0E0h
.text:004037D0 var_D8          = dword ptr -0D8h
.text:004037D0 var_D4          = dword ptr -0D4h
.text:004037D0 var_D0          = dword ptr -0D0h
.text:004037D0 var_CC          = dword ptr -0CCh
.text:004037D0 var_C8          = dword ptr -0C8h
.text:004037D0 var_C4          = dword ptr -0C4h
.text:004037D0 var_C0          = dword ptr -0C0h
.text:004037D0 var_B8          = dword ptr -0B8h
.text:004037D0 var_B4          = dword ptr -0B4h
.text:004037D0 var_B0          = dword ptr -0B0h
.text:004037D0 var_AC          = dword ptr -0ACh
.text:004037D0 var_A8          = dword ptr -0A8h
.text:004037D0 var_A4          = dword ptr -0A4h
.text:004037D0 var_A0          = dword ptr -0A0h
.text:004037D0 var_98          = dword ptr -98h
.text:004037D0 var_94          = dword ptr -94h
.text:004037D0 var_90          = dword ptr -90h
.text:004037D0 var_8C          = dword ptr -8Ch
.text:004037D0 var_88          = dword ptr -88h
.text:004037D0 var_84          = dword ptr -84h
.text:004037D0 var_80          = dword ptr -80h
.text:004037D0 var_78          = dword ptr -78h
.text:004037D0 var_74          = dword ptr -74h
.text:004037D0 var_70          = dword ptr -70h
.text:004037D0 var_6C          = dword ptr -6Ch
.text:004037D0 var_68          = dword ptr -68h
.text:004037D0 var_64          = dword ptr -64h
.text:004037D0 var_60          = dword ptr -60h
.text:004037D0 var_5C          = dword ptr -5Ch
.text:004037D0 var_58          = dword ptr -58h
.text:004037D0 var_50          = dword ptr -50h
.text:004037D0 var_4C          = dword ptr -4Ch
.text:004037D0 var_48          = dword ptr -48h
.text:004037D0 var_44          = dword ptr -44h
.text:004037D0 var_40          = dword ptr -40h
.text:004037D0 var_3C          = dword ptr -3Ch
.text:004037D0 var_38          = dword ptr -38h
.text:004037D0 var_34          = dword ptr -34h
.text:004037D0 var_30          = dword ptr -30h
.text:004037D0 var_29          = byte ptr -29h
.text:004037D0 var_28          = dword ptr -28h
.text:004037D0 var_24          = dword ptr -24h
.text:004037D0 var_20          = dword ptr -20h
.text:004037D0 var_18          = byte ptr -18h
.text:004037D0 arg_0           = dword ptr  4
.text:004037D0 arg_4           = dword ptr  8
.text:004037D0 arg_8           = dword ptr  0Ch
.text:004037D0 arg_C           = dword ptr  10h
.text:004037D0 Str             = dword ptr  14h
.text:004037D0
.text:004037D0                 push    ebp
.text:004037D1                 xor     eax, eax
.text:004037D3                 push    edi
.text:004037D4                 push    esi
.text:004037D5                 push    ebx
.text:004037D6                 sub     esp, 12Ch
.text:004037DC                 mov     ebp, [esp+13Ch+arg_8]
.text:004037E3                 mov     [esp+13Ch+var_28], eax
.text:004037EA                 mov     esi, [esp+13Ch+arg_0]
.text:004037F1                 cmp     ebp, 24h ; '$'
.text:004037F4                 ja      loc_404441
.text:004037FA                 mov     edi, [esp+13Ch+arg_4]
.text:00403801                 test    edi, edi
.text:00403803                 jz      loc_404435
.text:00403809
.text:00403809 loc_403809:                             ; CODE XREF: sub_4037D0+C6C↓j
.text:00403809                 movzx   edx, byte ptr [esi]
.text:0040380C                 mov     ebx, esi
.text:0040380E                 mov     [esp+13Ch+var_29], dl
.text:00403815                 lea     esi, [esi+0]
.text:00403819                 lea     edi, [edi+0]
.text:00403820
.text:00403820 loc_403820:                             ; CODE XREF: sub_4037D0+86↓j
.text:00403820                 movzx   edx, [esp+13Ch+var_29]
.text:00403828                 mov     ecx, ds:__mb_cur_max
.text:0040382E                 cmp     dword ptr [ecx], 1
.text:00403831                 jz      loc_404422
.text:00403837                 mov     [esp+13Ch+Type], 8 ; Type
.text:0040383F                 mov     [esp+13Ch+C], edx ; C
.text:00403842                 call    _isctype
.text:00403847
.text:00403847 loc_403847:                             ; CODE XREF: sub_4037D0+C60↓j
.text:00403847                 test    eax, eax
.text:00403849                 jz      short loc_403858
.text:0040384B                 inc     ebx
.text:0040384C                 movzx   eax, byte ptr [ebx]
.text:0040384F                 mov     [esp+13Ch+var_29], al
.text:00403856                 jmp     short loc_403820
.text:00403858 ; ---------------------------------------------------------------------------
.text:00403858
.text:00403858 loc_403858:                             ; CODE XREF: sub_4037D0+79↑j
.text:00403858                 cmp     [esp+13Ch+var_29], 2Dh ; '-'
.text:00403860                 mov     eax, 4
.text:00403865                 jz      short loc_4038E2
.text:00403867                 call    _errno
.text:0040386C                 mov     dword ptr [eax], 0
.text:00403872                 mov     [esp+13Ch+Radix], ebp ; Radix
.text:00403876                 mov     [esp+13Ch+Type], edi ; EndPtr
.text:0040387A                 mov     [esp+13Ch+C], esi ; String
.text:0040387D                 call    _strtoull
.text:00403882                 mov     [esp+13Ch+var_24], eax
.text:00403889                 mov     eax, [edi]
.text:0040388B                 mov     [esp+13Ch+var_20], edx
.text:00403892                 cmp     eax, esi
.text:00403894                 jz      loc_4043DC
.text:0040389A                 call    _errno
.text:0040389F                 mov     ebx, [eax]
.text:004038A1                 test    ebx, ebx
.text:004038A3                 jnz     loc_4043B7
.text:004038A9
.text:004038A9 loc_4038A9:                             ; CODE XREF: sub_4037D0+BFD↓j
.text:004038A9                                         ; sub_4037D0+C4D↓j
.text:004038A9                 mov     ebp, [esp+13Ch+Str]
.text:004038B0                 test    ebp, ebp
.text:004038B2                 jz      loc_404398
.text:004038B8                 mov     ebx, [edi]
.text:004038BA                 movzx   eax, byte ptr [ebx]
.text:004038BD                 test    al, al
.text:004038BF                 jnz     short loc_4038ED
.text:004038C1
.text:004038C1 loc_4038C1:                             ; CODE XREF: sub_4037D0+312↓j
.text:004038C1                                         ; sub_4037D0+320↓j
.text:004038C1                 mov     edx, [esp+13Ch+var_24]
.text:004038C8                 mov     edi, [esp+13Ch+var_20]
.text:004038CF                 mov     ebx, [esp+13Ch+arg_C]
.text:004038D6                 mov     [ebx], edx
.text:004038D8                 mov     [ebx+4], edi
.text:004038DB
.text:004038DB loc_4038DB:                             ; CODE XREF: sub_4037D0+BE2↓j
.text:004038DB                 mov     eax, [esp+13Ch+var_28]
.text:004038E2
.text:004038E2 loc_4038E2:                             ; CODE XREF: sub_4037D0+95↑j
.text:004038E2                                         ; sub_4037D0+16C↓j ...
.text:004038E2                 add     esp, 12Ch
.text:004038E8                 pop     ebx
.text:004038E9                 pop     esi
.text:004038EA                 pop     edi
.text:004038EB                 pop     ebp
.text:004038EC                 retn
.text:004038ED ; ---------------------------------------------------------------------------
.text:004038ED
.text:004038ED loc_4038ED:                             ; CODE XREF: sub_4037D0+EF↑j
.text:004038ED                 mov     esi, [esp+13Ch+Str]
.text:004038F4                 mov     ecx, 1
.text:004038F9                 movsx   ebp, al
.text:004038FC                 mov     [esp+13Ch+var_30], ecx
.text:00403903                 mov     ebx, 400h
.text:00403908                 mov     [esp+13Ch+Type], ebp ; Val
.text:0040390C                 mov     [esp+13Ch+C], esi ; Str
.text:0040390F                 call    strchr
.text:00403914                 test    eax, eax
.text:00403916                 jnz     short loc_40393E
.text:00403918
.text:00403918 def_403989:                             ; CODE XREF: sub_4037D0+1B7↓j
.text:00403918                                         ; sub_4037D0+1B9↓j
.text:00403918                                         ; DATA XREF: ...
.text:00403918                 mov     eax, [esp+13Ch+var_28] ; jumptable 00403989 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0040391F                 mov     esi, [esp+13Ch+var_24]
.text:00403926                 mov     ebp, [esp+13Ch+var_20]
.text:0040392D                 mov     edi, [esp+13Ch+arg_C]
.text:00403934                 or      eax, 2
.text:00403937                 mov     [edi], esi
.text:00403939                 mov     [edi+4], ebp
.text:0040393C                 jmp     short loc_4038E2
.text:0040393E ; ---------------------------------------------------------------------------
.text:0040393E
.text:0040393E loc_40393E:                             ; CODE XREF: sub_4037D0+146↑j
.text:0040393E                 mov     [esp+13Ch+Type], 30h ; '0' ; Val
.text:00403946                 mov     edx, [esp+13Ch+Str]
.text:0040394D                 mov     [esp+13Ch+C], edx ; Str
.text:00403950                 call    strchr
.text:00403955                 test    eax, eax
.text:00403957                 jz      loc_404391
.text:0040395D                 mov     edx, [edi]
.text:0040395F                 movsx   eax, byte ptr [edx+1]
.text:00403963                 cmp     eax, 44h ; 'D'
.text:00403966                 jz      loc_404357
.text:0040396C                 cmp     eax, 44h ; 'D'
.text:0040396F                 jg      loc_40436D
.text:00403975                 cmp     eax, 42h ; 'B'
.text:00403978                 jz      loc_404357
.text:0040397E
.text:0040397E loc_40397E:                             ; CODE XREF: sub_4037D0+B98↓j
.text:0040397E                                         ; sub_4037D0+BA0↓j ...
.text:0040397E                 movsx   eax, byte ptr [edx]
.text:00403981                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00403984                 cmp     eax, 35h
.text:00403987                 ja      short def_403989 ; jumptable 00403989 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00403989                 jmp     ds:jpt_403989[eax*4] ; switch jump
.text:00403989 ; ---------------------------------------------------------------------------
.text:00403990 jpt_403989      dd offset loc_403B14, offset def_403989, offset def_403989
.text:00403990                                         ; DATA XREF: sub_4037D0+1B9↑r
.text:00403990                 dd offset loc_403B6E, offset def_403989, offset loc_403F37 ; jump table for switch statement
.text:00403990                 dd offset def_403989, offset def_403989, offset def_403989
.text:00403990                 dd offset loc_404046, offset def_403989, offset loc_40410F
.text:00403990                 dd offset def_403989, offset def_403989, offset loc_403C7D
.text:00403990                 dd offset def_403989, offset def_403989, offset def_403989
.text:00403990                 dd offset loc_40421E, offset def_403989, offset def_403989
.text:00403990                 dd offset def_403989, offset def_403989, offset loc_403D8C
.text:00403990                 dd offset loc_403E5E, offset def_403989, offset def_403989
.text:00403990                 dd offset def_403989, offset def_403989, offset def_403989
.text:00403990                 dd offset def_403989, offset def_403989, offset loc_403A68
.text:00403990                 dd offset loc_403F30, offset def_403989, offset def_403989
.text:00403990                 dd offset def_403989, offset loc_403F37, offset def_403989
.text:00403990                 dd offset def_403989, offset def_403989, offset loc_404046
.text:00403990                 dd offset def_403989, offset loc_40410F, offset def_403989
.text:00403990                 dd offset def_403989, offset def_403989, offset def_403989
.text:00403990                 dd offset def_403989, offset def_403989, offset loc_40421E
.text:00403990                 dd offset def_403989, offset def_403989, offset loc_4042F7
.text:00403A68 ; ---------------------------------------------------------------------------
.text:00403A68
.text:00403A68 loc_403A68:                             ; CODE XREF: sub_4037D0+1B9↑j
.text:00403A68                                         ; DATA XREF: sub_4037D0:jpt_403989↑o
.text:00403A68                 mov     [esp+13Ch+Radix], 200h ; jumptable 00403989 case 98
.text:00403A70                 lea     ebp, [esp+13Ch+var_24]
.text:00403A77                 mov     [esp+13Ch+var_130], 0
.text:00403A7F                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00403A86                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00403A8E                 call    sub_40E110
.text:00403A93                 mov     esi, [esp+13Ch+var_20]
.text:00403A9A                 mov     ecx, [esp+13Ch+var_24]
.text:00403AA1                 cmp     edx, esi
.text:00403AA3                 ja      short loc_403AAB
.text:00403AA5                 jb      short loc_403AF5
.text:00403AA7                 cmp     eax, ecx
.text:00403AA9                 jb      short loc_403AF5
.text:00403AAB
.text:00403AAB loc_403AAB:                             ; CODE XREF: sub_4037D0+2D3↑j
.text:00403AAB                 mov     esi, [ebp+0]
.text:00403AAE                 mov     eax, 200h
.text:00403AB3                 mov     ebx, [ebp+4]
.text:00403AB6                 mul     esi
.text:00403AB8                 mov     ecx, ebx
.text:00403ABA                 shl     ecx, 9
.text:00403ABD
.text:00403ABD loc_403ABD:                             ; CODE XREF: sub_4037D0+399↓j
.text:00403ABD                 mov     esi, edx
.text:00403ABF                 lea     edx, [ecx+esi]
.text:00403AC2
.text:00403AC2 loc_403AC2:                             ; CODE XREF: sub_4037D0+B82↓j
.text:00403AC2                 mov     [ebp+0], eax
.text:00403AC5                 xor     eax, eax
.text:00403AC7                 mov     [ebp+4], edx
.text:00403ACA
.text:00403ACA loc_403ACA:                             ; CODE XREF: sub_4037D0+342↓j
.text:00403ACA                                         ; sub_4037D0+459↓j ...
.text:00403ACA                 mov     edx, [edi]
.text:00403ACC
.text:00403ACC loc_403ACC:                             ; CODE XREF: sub_4037D0+762↓j
.text:00403ACC                 or      [esp+13Ch+var_28], eax
.text:00403AD3                 mov     eax, [esp+13Ch+var_30]
.text:00403ADA                 lea     ecx, [eax+edx]
.text:00403ADD                 mov     [edi], ecx
.text:00403ADF                 cmp     byte ptr [ecx], 0
.text:00403AE2                 jz      loc_4038C1
.text:00403AE8                 or      [esp+13Ch+var_28], 2
.text:00403AF0                 jmp     loc_4038C1
.text:00403AF5 ; ---------------------------------------------------------------------------
.text:00403AF5
.text:00403AF5 loc_403AF5:                             ; CODE XREF: sub_4037D0+2D5↑j
.text:00403AF5                                         ; sub_4037D0+2D9↑j ...
.text:00403AF5                 mov     edx, 0FFFFFFFFh
.text:00403AFA                 mov     ebp, 0FFFFFFFFh
.text:00403AFF                 mov     eax, 1
.text:00403B04                 mov     [esp+13Ch+var_24], edx
.text:00403B0B                 mov     [esp+13Ch+var_20], ebp
.text:00403B12                 jmp     short loc_403ACA
.text:00403B14 ; ---------------------------------------------------------------------------
.text:00403B14
.text:00403B14 loc_403B14:                             ; CODE XREF: sub_4037D0+1B9↑j
.text:00403B14                                         ; DATA XREF: sub_4037D0:jpt_403989↑o
.text:00403B14                 mov     [esp+13Ch+Radix], 400h ; jumptable 00403989 case 66
.text:00403B1C                 lea     ebp, [esp+13Ch+var_24]
.text:00403B23                 mov     [esp+13Ch+var_130], 0
.text:00403B2B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00403B32                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00403B3A                 call    sub_40E110
.text:00403B3F                 mov     esi, [esp+13Ch+var_20]
.text:00403B46                 mov     ecx, [esp+13Ch+var_24]
.text:00403B4D                 cmp     edx, esi
.text:00403B4F                 ja      short loc_403B57
.text:00403B51                 jb      short loc_403AF5
.text:00403B53                 cmp     eax, ecx
.text:00403B55                 jb      short loc_403AF5
.text:00403B57
.text:00403B57 loc_403B57:                             ; CODE XREF: sub_4037D0+37F↑j
.text:00403B57                 mov     esi, [ebp+0]
.text:00403B5A                 mov     eax, 400h
.text:00403B5F                 mov     ebx, [ebp+4]
.text:00403B62                 mul     esi
.text:00403B64                 mov     ecx, ebx
.text:00403B66                 shl     ecx, 0Ah
.text:00403B69                 jmp     loc_403ABD
.text:00403B6E ; ---------------------------------------------------------------------------
.text:00403B6E
.text:00403B6E loc_403B6E:                             ; CODE XREF: sub_4037D0+1B9↑j
.text:00403B6E                                         ; DATA XREF: sub_4037D0:jpt_403989↑o
.text:00403B6E                 mov     [esp+13Ch+var_3C], ebx ; jumptable 00403989 case 69
.text:00403B75                 mov     ecx, ebx
.text:00403B77                 xor     ebp, ebp
.text:00403B79                 mov     [esp+13Ch+var_34], ebp
.text:00403B80                 sar     ecx, 1Fh
.text:00403B83                 mov     ebx, [esp+13Ch+var_3C]
.text:00403B8A                 mov     [esp+13Ch+var_38], ecx
.text:00403B91                 lea     esi, [esp+13Ch+var_24]
.text:00403B98                 mov     ebp, 5
.text:00403B9D                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00403BA4                 mov     edx, [esp+13Ch+var_38]
.text:00403BAB                 mov     [esp+13Ch+Radix], ebx
.text:00403BAF                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00403BB7                 mov     [esp+13Ch+var_130], edx
.text:00403BBB                 call    sub_40E110
.text:00403BC0                 mov     [esp+13Ch+var_44], eax
.text:00403BC7                 mov     [esp+13Ch+var_40], edx
.text:00403BCE
.text:00403BCE loc_403BCE:                             ; CODE XREF: sub_4037D0+450↓j
.text:00403BCE                 mov     ebx, [esi+4]
.text:00403BD1                 mov     eax, [esi]
.text:00403BD3                 cmp     [esp+13Ch+var_40], ebx
.text:00403BDA                 mov     [esp+13Ch+var_48], ebx
.text:00403BE1                 mov     [esp+13Ch+var_4C], eax
.text:00403BE8                 ja      short loc_403C2E
.text:00403BEA                 mov     ecx, [esp+13Ch+var_48]
.text:00403BF1                 cmp     [esp+13Ch+var_40], ecx
.text:00403BF8                 jb      short loc_403C03
.text:00403BFA                 cmp     [esp+13Ch+var_44], eax
.text:00403C01                 jnb     short loc_403C2E
.text:00403C03
.text:00403C03 loc_403C03:                             ; CODE XREF: sub_4037D0+428↑j
.text:00403C03                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00403C09                 mov     eax, 1
.text:00403C0E                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00403C15
.text:00403C15 loc_403C15:                             ; CODE XREF: sub_4037D0+4AB↓j
.text:00403C15                 or      [esp+13Ch+var_34], eax
.text:00403C1C                 dec     ebp
.text:00403C1D                 cmp     ebp, 0FFFFFFFFh
.text:00403C20                 jnz     short loc_403BCE
.text:00403C22                 mov     eax, [esp+13Ch+var_34]
.text:00403C29                 jmp     loc_403ACA
.text:00403C2E ; ---------------------------------------------------------------------------
.text:00403C2E
.text:00403C2E loc_403C2E:                             ; CODE XREF: sub_4037D0+418↑j
.text:00403C2E                                         ; sub_4037D0+431↑j
.text:00403C2E                 mov     ecx, [esp+13Ch+var_38]
.text:00403C35                 mov     eax, [esp+13Ch+var_4C]
.text:00403C3C                 mov     ebx, [esp+13Ch+var_4C]
.text:00403C43                 mul     [esp+13Ch+var_3C]
.text:00403C4A                 imul    ebx, ecx
.text:00403C4D                 mov     ecx, edx
.text:00403C4F                 mov     [esp+13Ch+var_124], eax
.text:00403C53                 add     ecx, ebx
.text:00403C55                 mov     edx, [esp+13Ch+var_3C]
.text:00403C5C                 mov     ebx, [esp+13Ch+var_48]
.text:00403C63                 imul    edx, ebx
.text:00403C66                 mov     ebx, [esp+13Ch+var_124]
.text:00403C6A                 mov     [esi], ebx
.text:00403C6C                 add     ecx, edx
.text:00403C6E                 mov     [esp+13Ch+var_120], ecx
.text:00403C72                 mov     eax, [esp+13Ch+var_120]
.text:00403C76                 mov     [esi+4], eax
.text:00403C79                 xor     eax, eax
.text:00403C7B                 jmp     short loc_403C15
.text:00403C7D ; ---------------------------------------------------------------------------
.text:00403C7D
.text:00403C7D loc_403C7D:                             ; CODE XREF: sub_4037D0+1B9↑j
.text:00403C7D                                         ; DATA XREF: sub_4037D0:jpt_403989↑o
.text:00403C7D                 mov     [esp+13Ch+var_A4], ebx ; jumptable 00403989 case 80
.text:00403C84                 mov     eax, ebx
.text:00403C86                 xor     ebp, ebp
.text:00403C88                 mov     [esp+13Ch+var_98], ebp
.text:00403C8F                 sar     eax, 1Fh
.text:00403C92                 mov     edx, [esp+13Ch+var_A4]
.text:00403C99                 mov     [esp+13Ch+var_A0], eax
.text:00403CA0                 lea     esi, [esp+13Ch+var_24]
.text:00403CA7                 mov     ebp, 4
.text:00403CAC                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00403CB3                 mov     ebx, [esp+13Ch+var_A0]
.text:00403CBA                 mov     [esp+13Ch+Radix], edx
.text:00403CBE                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00403CC6                 mov     [esp+13Ch+var_130], ebx
.text:00403CCA                 call    sub_40E110
.text:00403CCF                 mov     [esp+13Ch+var_AC], eax
.text:00403CD6                 mov     [esp+13Ch+var_A8], edx
.text:00403CDD
.text:00403CDD loc_403CDD:                             ; CODE XREF: sub_4037D0+55F↓j
.text:00403CDD                 mov     ebx, [esi+4]
.text:00403CE0                 mov     edx, [esi]
.text:00403CE2                 cmp     [esp+13Ch+var_A8], ebx
.text:00403CE9                 mov     [esp+13Ch+var_B0], ebx
.text:00403CF0                 mov     [esp+13Ch+var_B4], edx
.text:00403CF7                 ja      short loc_403D3D
.text:00403CF9                 mov     eax, [esp+13Ch+var_B0]
.text:00403D00                 cmp     [esp+13Ch+var_A8], eax
.text:00403D07                 jb      short loc_403D12
.text:00403D09                 cmp     [esp+13Ch+var_AC], edx
.text:00403D10                 jnb     short loc_403D3D
.text:00403D12
.text:00403D12 loc_403D12:                             ; CODE XREF: sub_4037D0+537↑j
.text:00403D12                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00403D18                 mov     eax, 1
.text:00403D1D                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00403D24
.text:00403D24 loc_403D24:                             ; CODE XREF: sub_4037D0+5BA↓j
.text:00403D24                 or      [esp+13Ch+var_98], eax
.text:00403D2B                 dec     ebp
.text:00403D2C                 cmp     ebp, 0FFFFFFFFh
.text:00403D2F                 jnz     short loc_403CDD
.text:00403D31                 mov     eax, [esp+13Ch+var_98]
.text:00403D38                 jmp     loc_403ACA
.text:00403D3D ; ---------------------------------------------------------------------------
.text:00403D3D
.text:00403D3D loc_403D3D:                             ; CODE XREF: sub_4037D0+527↑j
.text:00403D3D                                         ; sub_4037D0+540↑j
.text:00403D3D                 mov     ecx, [esp+13Ch+var_A0]
.text:00403D44                 mov     eax, [esp+13Ch+var_B4]
.text:00403D4B                 mov     ebx, [esp+13Ch+var_B4]
.text:00403D52                 mul     [esp+13Ch+var_A4]
.text:00403D59                 imul    ebx, ecx
.text:00403D5C                 mov     ecx, edx
.text:00403D5E                 mov     [esp+13Ch+var_124], eax
.text:00403D62                 add     ecx, ebx
.text:00403D64                 mov     edx, [esp+13Ch+var_A4]
.text:00403D6B                 mov     ebx, [esp+13Ch+var_B0]
.text:00403D72                 xor     eax, eax
.text:00403D74                 imul    edx, ebx
.text:00403D77                 add     ecx, edx
.text:00403D79                 mov     [esp+13Ch+var_120], ecx
.text:00403D7D                 mov     ebx, [esp+13Ch+var_120]
.text:00403D81                 mov     ecx, [esp+13Ch+var_124]
.text:00403D85                 mov     [esi+4], ebx
.text:00403D88                 mov     [esi], ecx
.text:00403D8A                 jmp     short loc_403D24
.text:00403D8C ; ---------------------------------------------------------------------------
.text:00403D8C
.text:00403D8C loc_403D8C:                             ; CODE XREF: sub_4037D0+1B9↑j
.text:00403D8C                                         ; DATA XREF: sub_4037D0:jpt_403989↑o
.text:00403D8C                 mov     [esp+13Ch+var_E4], ebx ; jumptable 00403989 case 89
.text:00403D90                 mov     eax, ebx
.text:00403D92                 lea     esi, [esp+13Ch+var_24]
.text:00403D99                 mov     [esp+13Ch+var_D8], 0
.text:00403DA1                 sar     eax, 1Fh
.text:00403DA4                 mov     edx, [esp+13Ch+var_E4]
.text:00403DA8                 mov     [esp+13Ch+var_E0], eax
.text:00403DAC                 mov     ebp, 7
.text:00403DB1                 mov     ebx, [esp+13Ch+var_E0]
.text:00403DB5                 mov     [esp+13Ch+Radix], edx
.text:00403DB9                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00403DC0                 mov     [esp+13Ch+var_130], ebx
.text:00403DC4                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00403DCC                 call    sub_40E110
.text:00403DD1                 mov     [esp+13Ch+var_EC], eax
.text:00403DD5                 mov     [esp+13Ch+var_E8], edx
.text:00403DD9
.text:00403DD9 loc_403DD9:                             ; CODE XREF: sub_4037D0+646↓j
.text:00403DD9                 mov     ebx, [esi+4]
.text:00403DDC                 mov     edx, [esi]
.text:00403DDE                 cmp     [esp+13Ch+var_E8], ebx
.text:00403DE2                 mov     [esp+13Ch+var_F0], ebx
.text:00403DE6                 mov     [esp+13Ch+var_F4], edx
.text:00403DEA                 ja      short loc_403E21
.text:00403DEC                 mov     eax, [esp+13Ch+var_F0]
.text:00403DF0                 cmp     [esp+13Ch+var_E8], eax
.text:00403DF4                 jb      short loc_403DFC
.text:00403DF6                 cmp     [esp+13Ch+var_EC], edx
.text:00403DFA                 jnb     short loc_403E21
.text:00403DFC
.text:00403DFC loc_403DFC:                             ; CODE XREF: sub_4037D0+624↑j
.text:00403DFC                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00403E02                 mov     eax, 1
.text:00403E07                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00403E0E
.text:00403E0E loc_403E0E:                             ; CODE XREF: sub_4037D0+68C↓j
.text:00403E0E                 or      [esp+13Ch+var_D8], eax
.text:00403E12                 dec     ebp
.text:00403E13                 cmp     ebp, 0FFFFFFFFh
.text:00403E16                 jnz     short loc_403DD9
.text:00403E18                 mov     eax, [esp+13Ch+var_D8]
.text:00403E1C                 jmp     loc_403ACA
.text:00403E21 ; ---------------------------------------------------------------------------
.text:00403E21
.text:00403E21 loc_403E21:                             ; CODE XREF: sub_4037D0+61A↑j
.text:00403E21                                         ; sub_4037D0+62A↑j
.text:00403E21                 mov     ecx, [esp+13Ch+var_E0]
.text:00403E25                 mov     eax, [esp+13Ch+var_F4]
.text:00403E29                 mov     ebx, [esp+13Ch+var_F4]
.text:00403E2D                 mul     [esp+13Ch+var_E4]
.text:00403E31                 imul    ebx, ecx
.text:00403E34                 mov     ecx, edx
.text:00403E36                 mov     [esp+13Ch+var_124], eax
.text:00403E3A                 add     ecx, ebx
.text:00403E3C                 mov     edx, [esp+13Ch+var_E4]
.text:00403E40                 mov     ebx, [esp+13Ch+var_F0]
.text:00403E44                 xor     eax, eax
.text:00403E46                 imul    edx, ebx
.text:00403E49                 add     ecx, edx
.text:00403E4B                 mov     [esp+13Ch+var_120], ecx
.text:00403E4F                 mov     ebx, [esp+13Ch+var_120]
.text:00403E53                 mov     ecx, [esp+13Ch+var_124]
.text:00403E57                 mov     [esi+4], ebx
.text:00403E5A                 mov     [esi], ecx
.text:00403E5C                 jmp     short loc_403E0E
.text:00403E5E ; ---------------------------------------------------------------------------
.text:00403E5E
.text:00403E5E loc_403E5E:                             ; CODE XREF: sub_4037D0+1B9↑j
.text:00403E5E                                         ; DATA XREF: sub_4037D0:jpt_403989↑o
.text:00403E5E                 mov     [esp+13Ch+var_104], ebx ; jumptable 00403989 case 90
.text:00403E62                 mov     eax, ebx
.text:00403E64                 lea     esi, [esp+13Ch+var_24]
.text:00403E6B                 mov     [esp+13Ch+var_F8], 0
.text:00403E73                 sar     eax, 1Fh
.text:00403E76                 mov     edx, [esp+13Ch+var_104]
.text:00403E7A                 mov     [esp+13Ch+var_100], eax
.text:00403E7E                 mov     ebp, 6
.text:00403E83                 mov     ebx, [esp+13Ch+var_100]
.text:00403E87                 mov     [esp+13Ch+Radix], edx
.text:00403E8B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00403E92                 mov     [esp+13Ch+var_130], ebx
.text:00403E96                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00403E9E                 call    sub_40E110
.text:00403EA3                 mov     [esp+13Ch+var_10C], eax
.text:00403EA7                 mov     [esp+13Ch+var_108], edx
.text:00403EAB
.text:00403EAB loc_403EAB:                             ; CODE XREF: sub_4037D0+718↓j
.text:00403EAB                 mov     ebx, [esi+4]
.text:00403EAE                 mov     edx, [esi]
.text:00403EB0                 cmp     [esp+13Ch+var_108], ebx
.text:00403EB4                 mov     [esp+13Ch+var_110], ebx
.text:00403EB8                 mov     [esp+13Ch+var_114], edx
.text:00403EBC                 ja      short loc_403EF3
.text:00403EBE                 mov     eax, [esp+13Ch+var_110]
.text:00403EC2                 cmp     [esp+13Ch+var_108], eax
.text:00403EC6                 jb      short loc_403ECE
.text:00403EC8                 cmp     [esp+13Ch+var_10C], edx
.text:00403ECC                 jnb     short loc_403EF3
.text:00403ECE
.text:00403ECE loc_403ECE:                             ; CODE XREF: sub_4037D0+6F6↑j
.text:00403ECE                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00403ED4                 mov     eax, 1
.text:00403ED9                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00403EE0
.text:00403EE0 loc_403EE0:                             ; CODE XREF: sub_4037D0+75E↓j
.text:00403EE0                 or      [esp+13Ch+var_F8], eax
.text:00403EE4                 dec     ebp
.text:00403EE5                 cmp     ebp, 0FFFFFFFFh
.text:00403EE8                 jnz     short loc_403EAB
.text:00403EEA                 mov     eax, [esp+13Ch+var_F8]
.text:00403EEE                 jmp     loc_403ACA
.text:00403EF3 ; ---------------------------------------------------------------------------
.text:00403EF3
.text:00403EF3 loc_403EF3:                             ; CODE XREF: sub_4037D0+6EC↑j
.text:00403EF3                                         ; sub_4037D0+6FC↑j
.text:00403EF3                 mov     eax, [esp+13Ch+var_114]
.text:00403EF7                 mov     ebx, [esp+13Ch+var_100]
.text:00403EFB                 mul     [esp+13Ch+var_104]
.text:00403EFF                 mov     ecx, edx
.text:00403F01                 mov     edx, [esp+13Ch+var_104]
.text:00403F05                 mov     [esp+13Ch+var_124], eax
.text:00403F09                 mov     eax, [esp+13Ch+var_114]
.text:00403F0D                 imul    eax, ebx
.text:00403F10                 mov     ebx, [esp+13Ch+var_110]
.text:00403F14                 imul    edx, ebx
.text:00403F17                 add     ecx, eax
.text:00403F19                 xor     eax, eax
.text:00403F1B                 add     ecx, edx
.text:00403F1D                 mov     [esp+13Ch+var_120], ecx
.text:00403F21                 mov     ebx, [esp+13Ch+var_120]
.text:00403F25                 mov     ecx, [esp+13Ch+var_124]
.text:00403F29                 mov     [esi+4], ebx
.text:00403F2C                 mov     [esi], ecx
.text:00403F2E                 jmp     short loc_403EE0
.text:00403F30 ; ---------------------------------------------------------------------------
.text:00403F30
.text:00403F30 loc_403F30:                             ; CODE XREF: sub_4037D0+1B9↑j
.text:00403F30                                         ; DATA XREF: sub_4037D0:jpt_403989↑o
.text:00403F30                 xor     eax, eax        ; jumptable 00403989 case 99
.text:00403F32                 jmp     loc_403ACC
.text:00403F37 ; ---------------------------------------------------------------------------
.text:00403F37
.text:00403F37 loc_403F37:                             ; CODE XREF: sub_4037D0+1B9↑j
.text:00403F37                                         ; DATA XREF: sub_4037D0:jpt_403989↑o
.text:00403F37                 mov     [esp+13Ch+var_5C], ebx ; jumptable 00403989 cases 71,103
.text:00403F3E                 mov     eax, ebx
.text:00403F40                 xor     ebp, ebp
.text:00403F42                 mov     [esp+13Ch+var_50], ebp
.text:00403F49                 sar     eax, 1Fh
.text:00403F4C                 mov     edx, [esp+13Ch+var_5C]
.text:00403F53                 mov     [esp+13Ch+var_58], eax
.text:00403F5A                 lea     esi, [esp+13Ch+var_24]
.text:00403F61                 mov     ebp, 2
.text:00403F66                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00403F6D                 mov     ebx, [esp+13Ch+var_58]
.text:00403F74                 mov     [esp+13Ch+Radix], edx
.text:00403F78                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00403F80                 mov     [esp+13Ch+var_130], ebx
.text:00403F84                 call    sub_40E110
.text:00403F89                 mov     [esp+13Ch+var_64], eax
.text:00403F90                 mov     [esp+13Ch+var_60], edx
.text:00403F97
.text:00403F97 loc_403F97:                             ; CODE XREF: sub_4037D0+819↓j
.text:00403F97                 mov     ebx, [esi+4]
.text:00403F9A                 mov     edx, [esi]
.text:00403F9C                 cmp     [esp+13Ch+var_60], ebx
.text:00403FA3                 mov     [esp+13Ch+var_68], ebx
.text:00403FAA                 mov     [esp+13Ch+var_6C], edx
.text:00403FB1                 ja      short loc_403FF7
.text:00403FB3                 mov     eax, [esp+13Ch+var_68]
.text:00403FBA                 cmp     [esp+13Ch+var_60], eax
.text:00403FC1                 jb      short loc_403FCC
.text:00403FC3                 cmp     [esp+13Ch+var_64], edx
.text:00403FCA                 jnb     short loc_403FF7
.text:00403FCC
.text:00403FCC loc_403FCC:                             ; CODE XREF: sub_4037D0+7F1↑j
.text:00403FCC                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00403FD2                 mov     eax, 1
.text:00403FD7                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00403FDE
.text:00403FDE loc_403FDE:                             ; CODE XREF: sub_4037D0+874↓j
.text:00403FDE                 or      [esp+13Ch+var_50], eax
.text:00403FE5                 dec     ebp
.text:00403FE6                 cmp     ebp, 0FFFFFFFFh
.text:00403FE9                 jnz     short loc_403F97
.text:00403FEB                 mov     eax, [esp+13Ch+var_50]
.text:00403FF2                 jmp     loc_403ACA
.text:00403FF7 ; ---------------------------------------------------------------------------
.text:00403FF7
.text:00403FF7 loc_403FF7:                             ; CODE XREF: sub_4037D0+7E1↑j
.text:00403FF7                                         ; sub_4037D0+7FA↑j
.text:00403FF7                 mov     ecx, [esp+13Ch+var_58]
.text:00403FFE                 mov     eax, [esp+13Ch+var_6C]
.text:00404005                 mov     ebx, [esp+13Ch+var_6C]
.text:0040400C                 mul     [esp+13Ch+var_5C]
.text:00404013                 imul    ebx, ecx
.text:00404016                 mov     ecx, edx
.text:00404018                 mov     [esp+13Ch+var_124], eax
.text:0040401C                 add     ecx, ebx
.text:0040401E                 mov     edx, [esp+13Ch+var_5C]
.text:00404025                 mov     ebx, [esp+13Ch+var_68]
.text:0040402C                 xor     eax, eax
.text:0040402E                 imul    edx, ebx
.text:00404031                 add     ecx, edx
.text:00404033                 mov     [esp+13Ch+var_120], ecx
.text:00404037                 mov     ebx, [esp+13Ch+var_120]
.text:0040403B                 mov     ecx, [esp+13Ch+var_124]
.text:0040403F                 mov     [esi+4], ebx
.text:00404042                 mov     [esi], ecx
.text:00404044                 jmp     short loc_403FDE
.text:00404046 ; ---------------------------------------------------------------------------
.text:00404046
.text:00404046 loc_404046:                             ; CODE XREF: sub_4037D0+1B9↑j
.text:00404046                                         ; DATA XREF: sub_4037D0:jpt_403989↑o
.text:00404046                 mov     [esp+13Ch+var_74], ebx ; jumptable 00403989 cases 75,107
.text:0040404D                 mov     eax, ebx
.text:0040404F                 lea     esi, [esp+13Ch+var_24]
.text:00404056                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040405D                 sar     eax, 1Fh
.text:00404060                 mov     edx, [esp+13Ch+var_74]
.text:00404067                 mov     [esp+13Ch+var_70], eax
.text:0040406E                 mov     ebx, [esp+13Ch+var_70]
.text:00404075                 mov     [esp+13Ch+Radix], edx
.text:00404079                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00404081                 mov     [esp+13Ch+var_130], ebx
.text:00404085                 call    sub_40E110
.text:0040408A                 mov     ebp, [esp+13Ch+var_20]
.text:00404091                 mov     ecx, [esp+13Ch+var_24]
.text:00404098                 cmp     edx, ebp
.text:0040409A                 mov     [esp+13Ch+var_11C], ecx
.text:0040409E                 mov     [esp+13Ch+var_118], ebp
.text:004040A2                 ja      short loc_4040C9
.text:004040A4                 cmp     edx, [esp+13Ch+var_118]
.text:004040A8                 jb      short loc_4040AE
.text:004040AA                 cmp     eax, ecx
.text:004040AC                 jnb     short loc_4040C9
.text:004040AE
.text:004040AE loc_4040AE:                             ; CODE XREF: sub_4037D0+8D8↑j
.text:004040AE                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004040B4                 mov     edx, 1
.text:004040B9                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004040C0
.text:004040C0 loc_4040C0:                             ; CODE XREF: sub_4037D0+93D↓j
.text:004040C0                 xor     eax, eax
.text:004040C2                 or      eax, edx
.text:004040C4                 jmp     loc_403ACA
.text:004040C9 ; ---------------------------------------------------------------------------
.text:004040C9
.text:004040C9 loc_4040C9:                             ; CODE XREF: sub_4037D0+8D2↑j
.text:004040C9                                         ; sub_4037D0+8DC↑j
.text:004040C9                 mov     eax, [esp+13Ch+var_11C]
.text:004040CD                 mov     ebp, [esp+13Ch+var_11C]
.text:004040D1                 mov     ebx, [esp+13Ch+var_118]
.text:004040D5                 mul     [esp+13Ch+var_74]
.text:004040DC                 mov     [esp+13Ch+var_124], eax
.text:004040E0                 mov     eax, [esp+13Ch+var_70]
.text:004040E7                 mov     ecx, [esp+13Ch+var_124]
.text:004040EB                 imul    ebp, eax
.text:004040EE                 mov     eax, edx
.text:004040F0                 xor     edx, edx
.text:004040F2                 mov     [esi], ecx
.text:004040F4                 add     eax, ebp
.text:004040F6                 mov     ebp, [esp+13Ch+var_74]
.text:004040FD                 imul    ebp, ebx
.text:00404100                 add     eax, ebp
.text:00404102                 mov     [esp+13Ch+var_120], eax
.text:00404106                 mov     ebp, [esp+13Ch+var_120]
.text:0040410A                 mov     [esi+4], ebp
.text:0040410D                 jmp     short loc_4040C0
.text:0040410F ; ---------------------------------------------------------------------------
.text:0040410F
.text:0040410F loc_40410F:                             ; CODE XREF: sub_4037D0+1B9↑j
.text:0040410F                                         ; DATA XREF: sub_4037D0:jpt_403989↑o
.text:0040410F                 mov     [esp+13Ch+var_84], ebx ; jumptable 00403989 cases 77,109
.text:00404116                 mov     eax, ebx
.text:00404118                 xor     ebp, ebp
.text:0040411A                 mov     [esp+13Ch+var_78], ebp
.text:00404121                 sar     eax, 1Fh
.text:00404124                 mov     edx, [esp+13Ch+var_84]
.text:0040412B                 mov     [esp+13Ch+var_80], eax
.text:00404132                 lea     esi, [esp+13Ch+var_24]
.text:00404139                 mov     ebp, 1
.text:0040413E                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00404145                 mov     ecx, [esp+13Ch+var_80]
.text:0040414C                 mov     [esp+13Ch+Radix], edx
.text:00404150                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00404158                 mov     [esp+13Ch+var_130], ecx
.text:0040415C                 call    sub_40E110
.text:00404161                 mov     [esp+13Ch+var_8C], eax
.text:00404168                 mov     [esp+13Ch+var_88], edx
.text:0040416F
.text:0040416F loc_40416F:                             ; CODE XREF: sub_4037D0+9F1↓j
.text:0040416F                 mov     ebx, [esi+4]
.text:00404172                 mov     edx, [esi]
.text:00404174                 cmp     [esp+13Ch+var_88], ebx
.text:0040417B                 mov     [esp+13Ch+var_90], ebx
.text:00404182                 mov     [esp+13Ch+var_94], edx
.text:00404189                 ja      short loc_4041CF
.text:0040418B                 mov     eax, [esp+13Ch+var_90]
.text:00404192                 cmp     [esp+13Ch+var_88], eax
.text:00404199                 jb      short loc_4041A4
.text:0040419B                 cmp     [esp+13Ch+var_8C], edx
.text:004041A2                 jnb     short loc_4041CF
.text:004041A4
.text:004041A4 loc_4041A4:                             ; CODE XREF: sub_4037D0+9C9↑j
.text:004041A4                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004041AA                 mov     eax, 1
.text:004041AF                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004041B6
.text:004041B6 loc_4041B6:                             ; CODE XREF: sub_4037D0+A4C↓j
.text:004041B6                 or      [esp+13Ch+var_78], eax
.text:004041BD                 dec     ebp
.text:004041BE                 cmp     ebp, 0FFFFFFFFh
.text:004041C1                 jnz     short loc_40416F
.text:004041C3                 mov     eax, [esp+13Ch+var_78]
.text:004041CA                 jmp     loc_403ACA
.text:004041CF ; ---------------------------------------------------------------------------
.text:004041CF
.text:004041CF loc_4041CF:                             ; CODE XREF: sub_4037D0+9B9↑j
.text:004041CF                                         ; sub_4037D0+9D2↑j
.text:004041CF                 mov     ecx, [esp+13Ch+var_80]
.text:004041D6                 mov     eax, [esp+13Ch+var_94]
.text:004041DD                 mov     ebx, [esp+13Ch+var_94]
.text:004041E4                 mul     [esp+13Ch+var_84]
.text:004041EB                 imul    ebx, ecx
.text:004041EE                 mov     ecx, edx
.text:004041F0                 mov     [esp+13Ch+var_124], eax
.text:004041F4                 add     ecx, ebx
.text:004041F6                 mov     edx, [esp+13Ch+var_84]
.text:004041FD                 mov     ebx, [esp+13Ch+var_90]
.text:00404204                 xor     eax, eax
.text:00404206                 imul    edx, ebx
.text:00404209                 add     ecx, edx
.text:0040420B                 mov     [esp+13Ch+var_120], ecx
.text:0040420F                 mov     ebx, [esp+13Ch+var_120]
.text:00404213                 mov     ecx, [esp+13Ch+var_124]
.text:00404217                 mov     [esi+4], ebx
.text:0040421A                 mov     [esi], ecx
.text:0040421C                 jmp     short loc_4041B6
.text:0040421E ; ---------------------------------------------------------------------------
.text:0040421E
.text:0040421E loc_40421E:                             ; CODE XREF: sub_4037D0+1B9↑j
.text:0040421E                                         ; DATA XREF: sub_4037D0:jpt_403989↑o
.text:0040421E                 mov     [esp+13Ch+var_C4], ebx ; jumptable 00403989 cases 84,116
.text:00404222                 mov     eax, ebx
.text:00404224                 xor     ebp, ebp
.text:00404226                 mov     [esp+13Ch+var_B8], ebp
.text:0040422D                 sar     eax, 1Fh
.text:00404230                 mov     edx, [esp+13Ch+var_C4]
.text:00404234                 mov     [esp+13Ch+var_C0], eax
.text:00404238                 lea     esi, [esp+13Ch+var_24]
.text:0040423F                 mov     ebp, 3
.text:00404244                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040424B                 mov     ebx, [esp+13Ch+var_C0]
.text:0040424F                 mov     [esp+13Ch+Radix], edx
.text:00404253                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040425B                 mov     [esp+13Ch+var_130], ebx
.text:0040425F                 call    sub_40E110
.text:00404264                 mov     [esp+13Ch+var_CC], eax
.text:00404268                 mov     [esp+13Ch+var_C8], edx
.text:0040426C
.text:0040426C loc_40426C:                             ; CODE XREF: sub_4037D0+ADC↓j
.text:0040426C                 mov     ebx, [esi+4]
.text:0040426F                 mov     edx, [esi]
.text:00404271                 cmp     [esp+13Ch+var_C8], ebx
.text:00404275                 mov     [esp+13Ch+var_D0], ebx
.text:00404279                 mov     [esp+13Ch+var_D4], edx
.text:0040427D                 ja      short loc_4042BA
.text:0040427F                 mov     eax, [esp+13Ch+var_D0]
.text:00404283                 cmp     [esp+13Ch+var_C8], eax
.text:00404287                 jb      short loc_40428F
.text:00404289                 cmp     [esp+13Ch+var_CC], edx
.text:0040428D                 jnb     short loc_4042BA
.text:0040428F
.text:0040428F loc_40428F:                             ; CODE XREF: sub_4037D0+AB7↑j
.text:0040428F                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00404295                 mov     eax, 1
.text:0040429A                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004042A1
.text:004042A1 loc_4042A1:                             ; CODE XREF: sub_4037D0+B25↓j
.text:004042A1                 or      [esp+13Ch+var_B8], eax
.text:004042A8                 dec     ebp
.text:004042A9                 cmp     ebp, 0FFFFFFFFh
.text:004042AC                 jnz     short loc_40426C
.text:004042AE                 mov     eax, [esp+13Ch+var_B8]
.text:004042B5                 jmp     loc_403ACA
.text:004042BA ; ---------------------------------------------------------------------------
.text:004042BA
.text:004042BA loc_4042BA:                             ; CODE XREF: sub_4037D0+AAD↑j
.text:004042BA                                         ; sub_4037D0+ABD↑j
.text:004042BA                 mov     ecx, [esp+13Ch+var_C0]
.text:004042BE                 mov     eax, [esp+13Ch+var_D4]
.text:004042C2                 mov     ebx, [esp+13Ch+var_D4]
.text:004042C6                 mul     [esp+13Ch+var_C4]
.text:004042CA                 imul    ebx, ecx
.text:004042CD                 mov     ecx, edx
.text:004042CF                 mov     [esp+13Ch+var_124], eax
.text:004042D3                 add     ecx, ebx
.text:004042D5                 mov     edx, [esp+13Ch+var_C4]
.text:004042D9                 mov     ebx, [esp+13Ch+var_D0]
.text:004042DD                 xor     eax, eax
.text:004042DF                 imul    edx, ebx
.text:004042E2                 add     ecx, edx
.text:004042E4                 mov     [esp+13Ch+var_120], ecx
.text:004042E8                 mov     ebx, [esp+13Ch+var_120]
.text:004042EC                 mov     ecx, [esp+13Ch+var_124]
.text:004042F0                 mov     [esi+4], ebx
.text:004042F3                 mov     [esi], ecx
.text:004042F5                 jmp     short loc_4042A1
.text:004042F7 ; ---------------------------------------------------------------------------
.text:004042F7
.text:004042F7 loc_4042F7:                             ; CODE XREF: sub_4037D0+1B9↑j
.text:004042F7                                         ; DATA XREF: sub_4037D0:jpt_403989↑o
.text:004042F7                 mov     [esp+13Ch+Radix], 2 ; jumptable 00403989 case 119
.text:004042FF                 lea     ebp, [esp+13Ch+var_24]
.text:00404306                 mov     [esp+13Ch+var_130], 0
.text:0040430E                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00404315                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040431D                 call    sub_40E110
.text:00404322                 mov     esi, [esp+13Ch+var_20]
.text:00404329                 mov     ecx, [esp+13Ch+var_24]
.text:00404330                 cmp     edx, esi
.text:00404332                 ja      short loc_404342
.text:00404334                 jb      loc_403AF5
.text:0040433A                 cmp     eax, ecx
.text:0040433C                 jb      loc_403AF5
.text:00404342
.text:00404342 loc_404342:                             ; CODE XREF: sub_4037D0+B62↑j
.text:00404342                 mov     esi, [ebp+0]
.text:00404345                 mov     eax, 2
.text:0040434A                 mov     ecx, [ebp+4]
.text:0040434D                 mul     esi
.text:0040434F                 lea     edx, [edx+ecx*2]
.text:00404352                 jmp     loc_403AC2
.text:00404357 ; ---------------------------------------------------------------------------
.text:00404357
.text:00404357 loc_404357:                             ; CODE XREF: sub_4037D0+196↑j
.text:00404357                                         ; sub_4037D0+1A8↑j
.text:00404357                 mov     esi, 2
.text:0040435C                 mov     ebx, 3E8h
.text:00404361                 mov     [esp+13Ch+var_30], esi
.text:00404368                 jmp     loc_40397E
.text:0040436D ; ---------------------------------------------------------------------------
.text:0040436D
.text:0040436D loc_40436D:                             ; CODE XREF: sub_4037D0+19F↑j
.text:0040436D                 cmp     eax, 69h ; 'i'
.text:00404370                 jnz     loc_40397E
.text:00404376                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040437A                 jnz     loc_40397E
.text:00404380                 mov     eax, 3
.text:00404385                 mov     [esp+13Ch+var_30], eax
.text:0040438C                 jmp     loc_40397E
.text:00404391 ; ---------------------------------------------------------------------------
.text:00404391
.text:00404391 loc_404391:                             ; CODE XREF: sub_4037D0+187↑j
.text:00404391                 mov     edx, [edi]
.text:00404393                 jmp     loc_40397E
.text:00404398 ; ---------------------------------------------------------------------------
.text:00404398
.text:00404398 loc_404398:                             ; CODE XREF: sub_4037D0+E2↑j
.text:00404398                 mov     edx, [esp+13Ch+var_24]
.text:0040439F                 mov     ecx, [esp+13Ch+var_20]
.text:004043A6                 mov     edi, [esp+13Ch+arg_C]
.text:004043AD                 mov     [edi], edx
.text:004043AF                 mov     [edi+4], ecx
.text:004043B2                 jmp     loc_4038DB
.text:004043B7 ; ---------------------------------------------------------------------------
.text:004043B7
.text:004043B7 loc_4043B7:                             ; CODE XREF: sub_4037D0+D3↑j
.text:004043B7                 call    _errno
.text:004043BC                 cmp     dword ptr [eax], 22h ; '"'
.text:004043BF                 jnz     short loc_4043D2
.text:004043C1                 mov     esi, 1
.text:004043C6                 mov     [esp+13Ch+var_28], esi
.text:004043CD                 jmp     loc_4038A9
.text:004043D2 ; ---------------------------------------------------------------------------
.text:004043D2
.text:004043D2 loc_4043D2:                             ; CODE XREF: sub_4037D0+BEF↑j
.text:004043D2                                         ; sub_4037D0+C15↓j ...
.text:004043D2                 mov     eax, 4
.text:004043D7                 jmp     loc_4038E2
.text:004043DC ; ---------------------------------------------------------------------------
.text:004043DC
.text:004043DC loc_4043DC:                             ; CODE XREF: sub_4037D0+C4↑j
.text:004043DC                 mov     ebx, [esp+13Ch+Str]
.text:004043E3                 test    ebx, ebx
.text:004043E5                 jz      short loc_4043D2
.text:004043E7                 movzx   eax, byte ptr [eax]
.text:004043EA                 test    al, al
.text:004043EC                 jz      short loc_4043D2
.text:004043EE                 mov     esi, [esp+13Ch+Str]
.text:004043F5                 movsx   ebp, al
.text:004043F8                 mov     [esp+13Ch+Type], ebp ; Val
.text:004043FC                 mov     [esp+13Ch+C], esi ; Str
.text:004043FF                 call    strchr
.text:00404404                 test    eax, eax
.text:00404406                 jz      short loc_4043D2
.text:00404408                 mov     ecx, 1
.text:0040440D                 xor     edx, edx
.text:0040440F                 mov     [esp+13Ch+var_24], ecx
.text:00404416                 mov     [esp+13Ch+var_20], edx
.text:0040441D                 jmp     loc_4038A9
.text:00404422 ; ---------------------------------------------------------------------------
.text:00404422
.text:00404422 loc_404422:                             ; CODE XREF: sub_4037D0+61↑j
.text:00404422                 mov     eax, ds:_pctype
.text:00404427                 mov     ecx, [eax]
.text:00404429                 movzx   eax, word ptr [ecx+edx*2]
.text:0040442D                 and     eax, 8
.text:00404430                 jmp     loc_403847
.text:00404435 ; ---------------------------------------------------------------------------
.text:00404435
.text:00404435 loc_404435:                             ; CODE XREF: sub_4037D0+33↑j
.text:00404435                 lea     edi, [esp+13Ch+var_18]
.text:0040443C                 jmp     loc_403809
.text:00404441 ; ---------------------------------------------------------------------------
.text:00404441
.text:00404441 loc_404441:                             ; CODE XREF: sub_4037D0+24↑j
.text:00404441                 mov     [esp+13Ch+Radix], 70h ; 'p'
.text:00404449                 mov     [esp+13Ch+Type], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:00404451                 mov     [esp+13Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00404458                 call    _assert
.text:00404458 sub_4037D0      endp
.text:00404458
.text:00404458 ; ---------------------------------------------------------------------------
.text:0040445D                 align 10h
.text:00404460                 sub     esp, 0Ch
.text:00404463                 mov     edx, [esp+14h]
.text:00404467                 mov     dword ptr [esp+4], 5
.text:0040446F                 mov     [esp+8], edx
.text:00404473                 mov     edx, [esp+10h]
.text:00404477                 mov     [esp], edx
.text:0040447A                 call    sub_406010
.text:0040447F                 add     esp, 0Ch
.text:00404482                 retn
.text:00404482 ; ---------------------------------------------------------------------------
.text:00404483                 align 10h
.text:00404490
.text:00404490 ; =============== S U B R O U T I N E =======================================
.text:00404490
.text:00404490
.text:00404490 ; int __cdecl sub_404490(char *)
.text:00404490 sub_404490      proc near               ; CODE XREF: sub_4018C0+335↑p
.text:00404490                                         ; sub_4018C0+3C8↑p ...
.text:00404490
.text:00404490 var_C           = dword ptr -0Ch
.text:00404490 var_8           = dword ptr -8
.text:00404490 var_4           = dword ptr -4
.text:00404490 arg_0           = dword ptr  4
.text:00404490
.text:00404490                 sub     esp, 0Ch
.text:00404493                 mov     edx, [esp+0Ch+arg_0]
.text:00404497                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040449F                 mov     [esp+0Ch+var_C], 0 ; int
.text:004044A6                 mov     [esp+0Ch+var_4], edx ; char *
.text:004044AA                 call    sub_406010
.text:004044AF                 add     esp, 0Ch
.text:004044B2                 retn
.text:004044B2 sub_404490      endp
.text:004044B2
.text:004044B2 ; ---------------------------------------------------------------------------
.text:004044B3                 align 10h
.text:004044C0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_4044E0+3↓o
.text:004044D1 ; const char aS_0[]
.text:004044D1 aS_0            db '%s',0               ; DATA XREF: sub_4044E0+10↓o
.text:004044D4                 align 10h
.text:004044E0
.text:004044E0 ; =============== S U B R O U T I N E =======================================
.text:004044E0
.text:004044E0 ; Attributes: noreturn
.text:004044E0
.text:004044E0 sub_4044E0      proc near               ; CODE XREF: sub_4018C0:loc_402006↑p
.text:004044E0                                         ; sub_406420:loc_4065DF↓p ...
.text:004044E0
.text:004044E0 Code            = dword ptr -1Ch
.text:004044E0 ErrorMessage    = dword ptr -18h
.text:004044E0 var_14          = dword ptr -14h
.text:004044E0 var_10          = byte ptr -10h
.text:004044E0
.text:004044E0                 sub     esp, 1Ch
.text:004044E3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:004044EA                 call    ds:libintl_gettext
.text:004044F0                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:004044F8                 mov     edx, Code
.text:004044FE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404506                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040450A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040450D                 call    sub_406910
.text:00404512                 call    abort
.text:00404512 sub_4044E0      endp
.text:00404512
.text:00404512 ; ---------------------------------------------------------------------------
.text:00404517                 align 10h
.text:00404520 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00404520                                         ; DATA XREF: .data:Buffer↓o
.text:00404552 ; const char aSSS[12]
.text:00404552 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_404810+50↓o
.text:0040455E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040456E                 align 20h
.text:00404580
.text:00404580 ; =============== S U B R O U T I N E =======================================
.text:00404580
.text:00404580
.text:00404580 sub_404580      proc near               ; DATA XREF: sub_404810+100↓o
.text:00404580                 push    esp
.text:00404581                 push    69207369h
.text:00404586                 jnb     short loc_4045A8
.text:00404588                 db      66h
.text:00404588                 jb      short near ptr 45F0h
.text:0040458B                 and     gs:[ebx+6Fh], dh
.text:0040458F                 db      66h
.text:0040458F                 jz      short near ptr 4609h
.text:00404592                 popa
.text:00404593                 jb      short loc_4045FA
.text:00404595                 cmp     esp, [eax]
.text:00404597                 jnb     short near ptr loc_4045FC+2
.text:00404599                 and     gs:[eax+ebp*2+65h], dh
.text:0040459E                 and     [ebx+6Fh], dh
.text:004045A1                 jnz     short loc_404615
.text:004045A3                 arpl    [ebp+20h], sp
.text:004045A6                 outsw
.text:004045A8
.text:004045A8 loc_4045A8:                             ; CODE XREF: sub_404580+6↑j
.text:004045A8                 jb      short loc_4045CA
.text:004045AA                 arpl    [edi+70h], bp
.text:004045AD                 jns     short loc_404618
.text:004045AF                 outsb
.text:004045B0                 and     [bp+di+6Fh], ah
.text:004045B4                 outsb
.text:004045B5                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:004045BE                 and     [eax+ebp*2+65h], dl
.text:004045C2                 jb      short near ptr loc_404628+1
.text:004045C4                 and     [ecx+73h], ch
.text:004045C7                 and     [esi+4Fh], cl
.text:004045CA
.text:004045CA loc_4045CA:                             ; CODE XREF: sub_404580:loc_4045A8↑j
.text:004045CA                 or      dh, [edi+61h]
.text:004045CD                 jb      short loc_404641
.text:004045CF                 popa
.text:004045D0                 outsb
.text:004045D1                 jz      short loc_40464C
.text:004045D3                 cmp     esp, [eax]
.text:004045D5                 outsb
.text:004045D6                 outsd
.text:004045D7                 jz      short loc_4045F9
.text:004045D9                 db      65h
.text:004045D9                 jbe     short loc_404641
.text:004045DC                 outsb
.text:004045DD                 and     [esi+6Fh], ah
.text:004045E0                 jb      short near ptr loc_404600+2
.text:004045E2                 dec     ebp
.text:004045E3                 inc     ebp
.text:004045E4                 push    edx
.text:004045E5                 inc     ebx
.text:004045E6                 dec     eax
.text:004045E7                 inc     ecx
.text:004045E8                 dec     esi
.text:004045E9                 push    esp
.text:004045EA                 inc     ecx
.text:004045EB                 inc     edx
.text:004045EC                 dec     ecx
.text:004045ED                 dec     esp
.text:004045EE                 dec     ecx
.text:004045EF                 push    esp
.text:004045F0                 pop     ecx
.text:004045F1                 and     [edi+72h], ch
.text:004045F4                 and     [esi+49h], al
.text:004045F7                 push    esp
.text:004045F8                 dec     esi
.text:004045F9
.text:004045F9 loc_4045F9:                             ; CODE XREF: sub_404580+57↑j
.text:004045F9                 inc     ebp
.text:004045FA
.text:004045FA loc_4045FA:                             ; CODE XREF: sub_404580+13↑j
.text:004045FA                 push    ebx
.text:004045FB                 push    ebx
.text:004045FC
.text:004045FC loc_4045FC:                             ; CODE XREF: sub_404580+17↑j
.text:004045FC                 and     [esi+4Fh], al
.text:004045FF                 push    edx
.text:00404600
.text:00404600 loc_404600:                             ; CODE XREF: sub_404580+60↑j
.text:00404600                 and     [ecx+20h], al
.text:00404603                 push    eax
.text:00404604                 inc     ecx
.text:00404605                 push    edx
.text:00404606                 push    esp
.text:00404607                 dec     ecx
.text:00404608                 inc     ebx
.text:00404609                 push    ebp
.text:0040460A                 dec     esp
.text:0040460B                 inc     ecx
.text:0040460C                 push    edx
.text:0040460D                 and     [eax+55h], dl
.text:00404610                 push    edx
.text:00404611                 push    eax
.text:00404612                 dec     edi
.text:00404613                 push    ebx
.text:00404614                 inc     ebp
.text:00404615
.text:00404615 loc_404615:                             ; CODE XREF: sub_404580+21↑j
.text:00404615                 or      al, cs:[eax]
.text:00404618
.text:00404618 loc_404618:                             ; CODE XREF: sub_404580+2D↑j
.text:00404618                                         ; DATA XREF: sub_404810:loc_404951↓o
.text:00404618                 push    edi
.text:00404619                 jb      short near ptr loc_404683+1
.text:0040461B                 jz      short near ptr loc_404690+1
.text:0040461D                 outs    dx, byte ptr gs:[esi]
.text:0040461F                 and     [edx+79h], ah
.text:00404622                 and     ds:6E612073h, ah
.text:00404628
.text:00404628 loc_404628:                             ; CODE XREF: sub_404580+42↑j
.text:00404628                 and     fs:0A2E73h, ah
.text:0040462F
.text:0040462F loc_40462F:                             ; DATA XREF: sub_404810:loc_40495D↓o
.text:0040462F                 push    edi
.text:00404630                 jb      short near ptr loc_40469A+1
.text:00404632                 jz      short loc_4046A8
.text:00404634                 outs    dx, byte ptr gs:[esi]
.text:00404636                 and     [edx+79h], ah
.text:00404639                 and     ds:25202C73h, ah
.text:0040463F                 jnb     short near ptr loc_40466A+3
.text:00404641
.text:00404641 loc_404641:                             ; CODE XREF: sub_404580+4D↑j
.text:00404641                                         ; sub_404580+59↑j
.text:00404641                 and     [ecx+6Eh], ah
.text:00404644                 and     fs:0A2E73h, ah
.text:0040464B                 nop
.text:0040464C
.text:0040464C loc_40464C:                             ; CODE XREF: sub_404580+51↑j
.text:0040464C                 nop
.text:0040464D                 nop
.text:0040464E                 nop
.text:0040464F                 nop
.text:00404650                 nop
.text:00404651                 nop
.text:00404652                 nop
.text:00404653                 nop
.text:00404654                 nop
.text:00404655                 nop
.text:00404656                 nop
.text:00404657                 nop
.text:00404658                 nop
.text:00404659                 nop
.text:0040465A                 nop
.text:0040465B                 nop
.text:0040465C                 nop
.text:0040465D                 nop
.text:0040465E                 nop
.text:0040465F                 nop
.text:0040465F sub_404580      endp ; sp-analysis failed
.text:0040465F
.text:00404660
.text:00404660 ; =============== S U B R O U T I N E =======================================
.text:00404660
.text:00404660
.text:00404660 sub_404660      proc near               ; DATA XREF: sub_404810:loc_404969↓o
.text:00404660                 push    edi
.text:00404661                 jb      short near ptr loc_4046CA+2
.text:00404663                 jz      short near ptr loc_4046D8+1
.text:00404665                 outs    dx, byte ptr gs:[esi]
.text:00404667                 and     [edx+79h], ah
.text:0040466A
.text:0040466A loc_40466A:                             ; CODE XREF: sub_404580+BF↑j
.text:0040466A                 and     ds:25202C73h, ah
.text:00404670                 jnb     short near ptr loc_40469D+1
.text:00404672                 and     ds:610A2C73h, ah
.text:00404678                 outsb
.text:00404679                 and     fs:0A2E73h, ah
.text:00404680
.text:00404680 loc_404680:                             ; DATA XREF: sub_404810:loc_404975↓o
.text:00404680                 push    edi
.text:00404681                 jb      short loc_4046EC
.text:00404683
.text:00404683 loc_404683:                             ; CODE XREF: sub_404580+99↑j
.text:00404683                 jz      short loc_4046F9
.text:00404685                 outs    dx, byte ptr gs:[esi]
.text:00404687                 and     [edx+79h], ah
.text:0040468A                 and     ds:25202C73h, ah
.text:00404690
.text:00404690 loc_404690:                             ; CODE XREF: sub_404580+9B↑j
.text:00404690                 jnb     short loc_4046BE
.text:00404692                 and     ds:250A2C73h, ah
.text:00404698                 jnb     short near ptr loc_4046C5+1
.text:0040469A
.text:0040469A loc_40469A:                             ; CODE XREF: sub_404580+B0↑j
.text:0040469A                 and     [ecx+6Eh], ah
.text:0040469D
.text:0040469D loc_40469D:                             ; CODE XREF: sub_404660+10↑j
.text:0040469D                 and     fs:0A2E73h, ah
.text:004046A4                 nop
.text:004046A5                 nop
.text:004046A6                 nop
.text:004046A7                 nop
.text:004046A8
.text:004046A8 loc_4046A8:                             ; CODE XREF: sub_404580+B2↑j
.text:004046A8                 nop
.text:004046A9                 nop
.text:004046AA                 nop
.text:004046AB                 nop
.text:004046AC                 nop
.text:004046AD                 nop
.text:004046AE                 nop
.text:004046AF                 nop
.text:004046B0                 nop
.text:004046B1                 nop
.text:004046B2                 nop
.text:004046B3                 nop
.text:004046B4                 nop
.text:004046B5                 nop
.text:004046B6                 nop
.text:004046B7                 nop
.text:004046B8                 nop
.text:004046B9                 nop
.text:004046BA                 nop
.text:004046BB                 nop
.text:004046BC                 nop
.text:004046BD                 nop
.text:004046BE
.text:004046BE loc_4046BE:                             ; CODE XREF: sub_404660:loc_404690↑j
.text:004046BE                 nop
.text:004046BF                 nop
.text:004046BF sub_404660      endp ; sp-analysis failed
.text:004046BF
.text:004046C0
.text:004046C0 ; =============== S U B R O U T I N E =======================================
.text:004046C0
.text:004046C0
.text:004046C0 sub_4046C0      proc near               ; DATA XREF: sub_404810:loc_404981↓o
.text:004046C0                 push    edi
.text:004046C1                 jb      short loc_40472C
.text:004046C3                 jz      short loc_404739
.text:004046C5
.text:004046C5 loc_4046C5:                             ; CODE XREF: sub_404660+38↑j
.text:004046C5                 outs    dx, byte ptr gs:[esi]
.text:004046C7                 and     [edx+79h], ah
.text:004046CA
.text:004046CA loc_4046CA:                             ; CODE XREF: sub_404660+1↑j
.text:004046CA                 and     ds:25202C73h, ah
.text:004046D0                 jnb     short loc_4046FE
.text:004046D2                 and     ds:250A2C73h, ah
.text:004046D8
.text:004046D8 loc_4046D8:                             ; CODE XREF: sub_404660+3↑j
.text:004046D8                 jnb     short near ptr loc_404705+1
.text:004046DA                 and     ds:61202C73h, ah
.text:004046E0                 outsb
.text:004046E1                 and     fs:0A2E73h, ah
.text:004046E8                 nop
.text:004046E9                 nop
.text:004046EA                 nop
.text:004046EB                 nop
.text:004046EC
.text:004046EC loc_4046EC:                             ; CODE XREF: sub_404660+21↑j
.text:004046EC                 nop
.text:004046ED                 nop
.text:004046EE                 nop
.text:004046EF                 nop
.text:004046F0                 nop
.text:004046F1                 nop
.text:004046F2                 nop
.text:004046F3                 nop
.text:004046F4                 nop
.text:004046F5                 nop
.text:004046F6                 nop
.text:004046F7                 nop
.text:004046F8                 nop
.text:004046F9
.text:004046F9 loc_4046F9:                             ; CODE XREF: sub_404660:loc_404683↑j
.text:004046F9                 nop
.text:004046FA                 nop
.text:004046FB                 nop
.text:004046FC                 nop
.text:004046FD                 nop
.text:004046FE
.text:004046FE loc_4046FE:                             ; CODE XREF: sub_4046C0+10↑j
.text:004046FE                 nop
.text:004046FF                 nop
.text:004046FF sub_4046C0      endp ; sp-analysis failed
.text:004046FF
.text:00404700
.text:00404700 ; =============== S U B R O U T I N E =======================================
.text:00404700
.text:00404700
.text:00404700 sub_404700      proc near               ; DATA XREF: sub_404810:loc_40498D↓o
.text:00404700                 push    edi
.text:00404701                 jb      short near ptr loc_404769+3
.text:00404703                 jz      short loc_404779
.text:00404705
.text:00404705 loc_404705:                             ; CODE XREF: sub_4046C0:loc_4046D8↑j
.text:00404705                 outs    dx, byte ptr gs:[esi]
.text:00404707                 and     [edx+79h], ah
.text:0040470A                 and     ds:25202C73h, ah
.text:00404710                 jnb     short loc_40473E
.text:00404712                 and     ds:250A2C73h, ah
.text:00404718                 jnb     short near ptr loc_404745+1
.text:0040471A                 and     ds:25202C73h, ah
.text:00404720                 jnb     short near ptr loc_40474A+4
.text:00404722                 and     [ecx+6Eh], ah
.text:00404725                 and     fs:0A2E73h, ah
.text:0040472C
.text:0040472C loc_40472C:                             ; CODE XREF: sub_4046C0+1↑j
.text:0040472C                 nop
.text:0040472D                 nop
.text:0040472E                 nop
.text:0040472F                 nop
.text:00404730                 nop
.text:00404731                 nop
.text:00404732                 nop
.text:00404733                 nop
.text:00404734                 nop
.text:00404735                 nop
.text:00404736                 nop
.text:00404737                 nop
.text:00404738                 nop
.text:00404739
.text:00404739 loc_404739:                             ; CODE XREF: sub_4046C0+3↑j
.text:00404739                 nop
.text:0040473A                 nop
.text:0040473B                 nop
.text:0040473C                 nop
.text:0040473D                 nop
.text:0040473E
.text:0040473E loc_40473E:                             ; CODE XREF: sub_404700+10↑j
.text:0040473E                 nop
.text:0040473F                 nop
.text:0040473F sub_404700      endp ; sp-analysis failed
.text:0040473F
.text:00404740
.text:00404740 ; =============== S U B R O U T I N E =======================================
.text:00404740
.text:00404740
.text:00404740 sub_404740      proc near               ; DATA XREF: sub_404810:loc_404999↓o
.text:00404740                 push    edi
.text:00404741                 jb      short near ptr loc_4047AA+2
.text:00404743                 jz      short near ptr loc_4047B4+5
.text:00404745
.text:00404745 loc_404745:                             ; CODE XREF: sub_404700+18↑j
.text:00404745                 outs    dx, byte ptr gs:[esi]
.text:00404747                 and     [edx+79h], ah
.text:0040474A
.text:0040474A loc_40474A:                             ; CODE XREF: sub_404700+20↑j
.text:0040474A                 and     ds:25202C73h, ah
.text:00404750                 jnb     short loc_40477E
.text:00404752                 and     ds:250A2C73h, ah
.text:00404758                 jnb     short near ptr loc_404785+1
.text:0040475A                 and     ds:25202C73h, ah
.text:00404760                 jnb     short near ptr loc_40478A+4
.text:00404762                 and     ds:610A2C73h, ah
.text:00404768                 outsb
.text:00404769
.text:00404769 loc_404769:                             ; CODE XREF: sub_404700+1↑j
.text:00404769                 and     fs:0A2E73h, ah
.text:00404770                 nop
.text:00404771                 nop
.text:00404772                 nop
.text:00404773                 nop
.text:00404774                 nop
.text:00404775                 nop
.text:00404776                 nop
.text:00404777                 nop
.text:00404778                 nop
.text:00404779
.text:00404779 loc_404779:                             ; CODE XREF: sub_404700+3↑j
.text:00404779                 nop
.text:0040477A                 nop
.text:0040477B                 nop
.text:0040477C                 nop
.text:0040477D                 nop
.text:0040477E
.text:0040477E loc_40477E:                             ; CODE XREF: sub_404740+10↑j
.text:0040477E                 nop
.text:0040477F                 nop
.text:0040477F sub_404740      endp ; sp-analysis failed
.text:0040477F
.text:00404780
.text:00404780 ; =============== S U B R O U T I N E =======================================
.text:00404780
.text:00404780
.text:00404780 sub_404780      proc near               ; DATA XREF: sub_404810:loc_4049A5↓o
.text:00404780                 push    edi
.text:00404781                 jb      short near ptr loc_4047EA+2
.text:00404783                 jz      short near ptr loc_4047F5+4
.text:00404785
.text:00404785 loc_404785:                             ; CODE XREF: sub_404740+18↑j
.text:00404785                 outs    dx, byte ptr gs:[esi]
.text:00404787                 and     [edx+79h], ah
.text:0040478A
.text:0040478A loc_40478A:                             ; CODE XREF: sub_404740+20↑j
.text:0040478A                 and     ds:25202C73h, ah
.text:00404790                 jnb     short near ptr loc_4047BA+4
.text:00404792                 and     ds:250A2C73h, ah
.text:00404798                 jnb     short near ptr loc_4047C5+1
.text:0040479A                 and     ds:25202C73h, ah
.text:004047A0                 jnb     short near ptr loc_4047CA+4
.text:004047A2                 and     ds:250A2C73h, ah
.text:004047A8                 jnb     short near ptr loc_4047D2+4
.text:004047AA
.text:004047AA loc_4047AA:                             ; CODE XREF: sub_404740+1↑j
.text:004047AA                 and     [ecx+6Eh], ah
.text:004047AD                 and     fs:0A2E73h, ah
.text:004047B4
.text:004047B4 loc_4047B4:                             ; CODE XREF: sub_404740+3↑j
.text:004047B4                 lea     esi, [esi+0]
.text:004047BA
.text:004047BA loc_4047BA:                             ; CODE XREF: sub_404780+10↑j
.text:004047BA                 lea     edi, [edi+0]
.text:004047C0
.text:004047C0 loc_4047C0:                             ; DATA XREF: sub_404810:def_40487D↓o
.text:004047C0                 push    edi
.text:004047C1                 jb      short near ptr loc_40482B+1
.text:004047C3                 jz      short near ptr loc_404838+1
.text:004047C5
.text:004047C5 loc_4047C5:                             ; CODE XREF: sub_404780+18↑j
.text:004047C5                 outs    dx, byte ptr gs:[esi]
.text:004047C7                 and     [edx+79h], ah
.text:004047CA
.text:004047CA loc_4047CA:                             ; CODE XREF: sub_404780+20↑j
.text:004047CA                 and     ds:25202C73h, ah
.text:004047D0                 jnb     short near ptr loc_4047FC+2
.text:004047D2
.text:004047D2 loc_4047D2:                             ; CODE XREF: sub_404780+28↑j
.text:004047D2                 and     ds:250A2C73h, ah
.text:004047D8                 jnb     short near ptr loc_404803+3
.text:004047DA                 and     ds:25202C73h, ah
.text:004047E0                 jnb     short near ptr loc_404809+5
.text:004047E2                 and     ds:250A2C73h, ah
.text:004047E8                 jnb     short near ptr loc_404814+2
.text:004047EA
.text:004047EA loc_4047EA:                             ; CODE XREF: sub_404780+1↑j
.text:004047EA                 and     ds:61202C73h, ah
.text:004047F0                 outsb
.text:004047F1                 and     fs:[edi+74h], ch
.text:004047F5
.text:004047F5 loc_4047F5:                             ; CODE XREF: sub_404780+3↑j
.text:004047F5                 push    2E737265h
.text:004047FA                 or      al, [eax]
.text:004047FC
.text:004047FC loc_4047FC:                             ; CODE XREF: sub_404780+50↑j
.text:004047FC                                         ; DATA XREF: sub_404810+1B5↓o
.text:004047FC                 and     eax, 73252073h
.text:00404801                 or      al, [eax]
.text:00404803
.text:00404803 loc_404803:                             ; CODE XREF: sub_404780+58↑j
.text:00404803                 lea     esi, [esi+0]
.text:00404809
.text:00404809 loc_404809:                             ; CODE XREF: sub_404780+60↑j
.text:00404809                 lea     edi, [edi+0]
.text:00404809 sub_404780      endp ; sp-analysis failed
.text:00404809
.text:00404810
.text:00404810 ; =============== S U B R O U T I N E =======================================
.text:00404810
.text:00404810
.text:00404810 ; int __cdecl sub_404810(FILE *, FILE *, int, int, va_list)
.text:00404810 sub_404810      proc near               ; CODE XREF: sub_4049E0+2A↓p
.text:00404810
.text:00404810 Stream          = dword ptr -2Ch
.text:00404810 Format          = dword ptr -28h
.text:00404810 ArgList         = dword ptr -24h
.text:00404810 var_20          = dword ptr -20h
.text:00404810 var_1C          = dword ptr -1Ch
.text:00404810 var_14          = dword ptr -14h
.text:00404810 arg_0           = dword ptr  4
.text:00404810 arg_4           = dword ptr  8
.text:00404810 arg_8           = dword ptr  0Ch
.text:00404810 arg_C           = dword ptr  10h
.text:00404810 arg_10          = dword ptr  14h
.text:00404810
.text:00404810                 push    ebp
.text:00404811                 push    edi
.text:00404812                 push    esi
.text:00404813                 push    ebx
.text:00404814
.text:00404814 loc_404814:                             ; CODE XREF: sub_404780+68↑j
.text:00404814                 sub     esp, 1Ch
.text:00404817                 xor     ebx, ebx
.text:00404819                 mov     edi, [esp+2Ch+arg_10]
.text:0040481D                 mov     edx, [esp+2Ch+arg_8]
.text:00404821                 mov     esi, [esp+2Ch+arg_0]
.text:00404825                 mov     eax, [edi]
.text:00404827                 mov     ecx, [esp+2Ch+arg_4]
.text:0040482B
.text:0040482B loc_40482B:                             ; CODE XREF: sub_404780+41↑j
.text:0040482B                 mov     [esp+2Ch+var_14], edx
.text:0040482F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404833                 lea     edx, [edi+4]
.text:00404836                 test    eax, eax
.text:00404838
.text:00404838 loc_404838:                             ; CODE XREF: sub_404780+43↑j
.text:00404838                 jz      short loc_40484C
.text:0040483A                 lea     esi, [esi+0]
.text:00404840
.text:00404840 loc_404840:                             ; CODE XREF: sub_404810+3A↓j
.text:00404840                 mov     eax, edx
.text:00404842                 inc     ebx
.text:00404843                 mov     eax, [eax]
.text:00404845                 add     edx, 4
.text:00404848                 test    eax, eax
.text:0040484A                 jnz     short loc_404840
.text:0040484C
.text:0040484C loc_40484C:                             ; CODE XREF: sub_404810:loc_404838↑j
.text:0040484C                 test    ecx, ecx
.text:0040484E                 jz      loc_4049BD
.text:00404854                 mov     [esp+2Ch+var_1C], ebp
.text:00404858                 mov     edx, [esp+2Ch+var_14]
.text:0040485C                 mov     [esp+2Ch+ArgList], ecx
.text:00404860                 mov     [esp+2Ch+Format], offset aSSS ; Format
.text:00404868                 mov     [esp+2Ch+var_20], edx
.text:0040486C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040486F                 call    fprintf
.text:00404874
.text:00404874 loc_404874:                             ; CODE XREF: sub_404810+1C9↓j
.text:00404874                 cmp     ebx, 9          ; switch 10 cases
.text:00404877                 ja      def_40487D      ; jumptable 0040487D default case
.text:0040487D                 jmp     ds:jpt_40487D[ebx*4] ; switch jump
.text:0040487D ; ---------------------------------------------------------------------------
.text:00404884 jpt_40487D      dd offset loc_4048AC    ; DATA XREF: sub_404810+6D↑r
.text:00404884                 dd offset loc_4048B1    ; jump table for switch statement
.text:00404884                 dd offset loc_404951
.text:00404884                 dd offset loc_40495D
.text:00404884                 dd offset loc_404969
.text:00404884                 dd offset loc_404975
.text:00404884                 dd offset loc_404981
.text:00404884                 dd offset loc_40498D
.text:00404884                 dd offset loc_404999
.text:00404884                 dd offset loc_4049A5
.text:004048AC ; ---------------------------------------------------------------------------
.text:004048AC
.text:004048AC loc_4048AC:                             ; CODE XREF: sub_404810+6D↑j
.text:004048AC                                         ; DATA XREF: sub_404810:jpt_40487D↑o
.text:004048AC                 call    abort           ; jumptable 0040487D case 0
.text:004048B1 ; ---------------------------------------------------------------------------
.text:004048B1
.text:004048B1 loc_4048B1:                             ; CODE XREF: sub_404810+6D↑j
.text:004048B1                                         ; DATA XREF: sub_404810:jpt_40487D↑o
.text:004048B1                 mov     [esp+2Ch+Stream], 40455Eh ; jumptable 0040487D case 1
.text:004048B8                 nop
.text:004048B9                 lea     esi, [esi+0]
.text:004048C0
.text:004048C0 loc_4048C0:                             ; CODE XREF: sub_404810+148↓j
.text:004048C0                                         ; sub_404810+154↓j ...
.text:004048C0                 call    ds:libintl_gettext
.text:004048C6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004048CA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004048CD                 mov     [esp+2Ch+Format], eax ; Format
.text:004048D1                 call    vfprintf
.text:004048D6                 mov     ebx, [esi+4]
.text:004048D9                 dec     ebx
.text:004048DA                 test    ebx, ebx
.text:004048DC                 mov     [esi+4], ebx
.text:004048DF                 js      short loc_40493F
.text:004048E1                 mov     edi, [esi]
.text:004048E3                 mov     byte ptr [edi], 0Ah
.text:004048E6                 inc     dword ptr [esi]
.text:004048E8
.text:004048E8 loc_4048E8:                             ; CODE XREF: sub_404810+13F↓j
.text:004048E8                 mov     [esp+2Ch+Format], esi ; Stream
.text:004048EC                 mov     edx, Buffer
.text:004048F2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:004048F5                 call    fputs
.text:004048FA                 mov     ebp, [esi+4]
.text:004048FD                 dec     ebp
.text:004048FE                 test    ebp, ebp
.text:00404900                 mov     [esi+4], ebp
.text:00404903                 js      short loc_40492D
.text:00404905                 mov     ecx, [esi]
.text:00404907                 mov     byte ptr [ecx], 0Ah
.text:0040490A                 inc     dword ptr [esi]
.text:0040490C
.text:0040490C loc_40490C:                             ; CODE XREF: sub_404810+12D↓j
.text:0040490C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00404910                 mov     [esp+2Ch+Stream], offset sub_404580
.text:00404917                 call    ds:libintl_gettext
.text:0040491D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00404921                 add     esp, 1Ch
.text:00404924                 pop     ebx
.text:00404925                 pop     esi
.text:00404926                 pop     edi
.text:00404927                 pop     ebp
.text:00404928                 jmp     fputs
.text:0040492D ; ---------------------------------------------------------------------------
.text:0040492D
.text:0040492D loc_40492D:                             ; CODE XREF: sub_404810+F3↑j
.text:0040492D                 mov     [esp+2Ch+Format], esi ; File
.text:00404931                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404938                 call    _flsbuf
.text:0040493D                 jmp     short loc_40490C
.text:0040493F ; ---------------------------------------------------------------------------
.text:0040493F
.text:0040493F loc_40493F:                             ; CODE XREF: sub_404810+CF↑j
.text:0040493F                 mov     [esp+2Ch+Format], esi ; File
.text:00404943                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040494A                 call    _flsbuf
.text:0040494F                 jmp     short loc_4048E8
.text:00404951 ; ---------------------------------------------------------------------------
.text:00404951
.text:00404951 loc_404951:                             ; CODE XREF: sub_404810+6D↑j
.text:00404951                                         ; DATA XREF: sub_404810:jpt_40487D↑o
.text:00404951                 mov     [esp+2Ch+Stream], offset loc_404618 ; jumptable 0040487D case 2
.text:00404958                 jmp     loc_4048C0
.text:0040495D ; ---------------------------------------------------------------------------
.text:0040495D
.text:0040495D loc_40495D:                             ; CODE XREF: sub_404810+6D↑j
.text:0040495D                                         ; DATA XREF: sub_404810:jpt_40487D↑o
.text:0040495D                 mov     [esp+2Ch+Stream], offset loc_40462F ; jumptable 0040487D case 3
.text:00404964                 jmp     loc_4048C0
.text:00404969 ; ---------------------------------------------------------------------------
.text:00404969
.text:00404969 loc_404969:                             ; CODE XREF: sub_404810+6D↑j
.text:00404969                                         ; DATA XREF: sub_404810:jpt_40487D↑o
.text:00404969                 mov     [esp+2Ch+Stream], offset sub_404660 ; jumptable 0040487D case 4
.text:00404970                 jmp     loc_4048C0
.text:00404975 ; ---------------------------------------------------------------------------
.text:00404975
.text:00404975 loc_404975:                             ; CODE XREF: sub_404810+6D↑j
.text:00404975                                         ; DATA XREF: sub_404810:jpt_40487D↑o
.text:00404975                 mov     [esp+2Ch+Stream], offset loc_404680 ; jumptable 0040487D case 5
.text:0040497C                 jmp     loc_4048C0
.text:00404981 ; ---------------------------------------------------------------------------
.text:00404981
.text:00404981 loc_404981:                             ; CODE XREF: sub_404810+6D↑j
.text:00404981                                         ; DATA XREF: sub_404810:jpt_40487D↑o
.text:00404981                 mov     [esp+2Ch+Stream], offset sub_4046C0 ; jumptable 0040487D case 6
.text:00404988                 jmp     loc_4048C0
.text:0040498D ; ---------------------------------------------------------------------------
.text:0040498D
.text:0040498D loc_40498D:                             ; CODE XREF: sub_404810+6D↑j
.text:0040498D                                         ; DATA XREF: sub_404810:jpt_40487D↑o
.text:0040498D                 mov     [esp+2Ch+Stream], offset sub_404700 ; jumptable 0040487D case 7
.text:00404994                 jmp     loc_4048C0
.text:00404999 ; ---------------------------------------------------------------------------
.text:00404999
.text:00404999 loc_404999:                             ; CODE XREF: sub_404810+6D↑j
.text:00404999                                         ; DATA XREF: sub_404810:jpt_40487D↑o
.text:00404999                 mov     [esp+2Ch+Stream], offset sub_404740 ; jumptable 0040487D case 8
.text:004049A0                 jmp     loc_4048C0
.text:004049A5 ; ---------------------------------------------------------------------------
.text:004049A5
.text:004049A5 loc_4049A5:                             ; CODE XREF: sub_404810+6D↑j
.text:004049A5                                         ; DATA XREF: sub_404810:jpt_40487D↑o
.text:004049A5                 mov     [esp+2Ch+Stream], offset sub_404780 ; jumptable 0040487D case 9
.text:004049AC                 jmp     loc_4048C0
.text:004049B1 ; ---------------------------------------------------------------------------
.text:004049B1
.text:004049B1 def_40487D:                             ; CODE XREF: sub_404810+67↑j
.text:004049B1                 mov     [esp+2Ch+Stream], offset loc_4047C0 ; jumptable 0040487D default case
.text:004049B8                 jmp     loc_4048C0
.text:004049BD ; ---------------------------------------------------------------------------
.text:004049BD
.text:004049BD loc_4049BD:                             ; CODE XREF: sub_404810+3E↑j
.text:004049BD                 mov     [esp+2Ch+var_20], ebp
.text:004049C1                 mov     ecx, [esp+2Ch+var_14]
.text:004049C5                 mov     [esp+2Ch+Format], offset loc_4047FC ; Format
.text:004049CD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004049D0                 mov     [esp+2Ch+ArgList], ecx
.text:004049D4                 call    fprintf
.text:004049D9                 jmp     loc_404874
.text:004049D9 sub_404810      endp
.text:004049D9
.text:004049D9 ; ---------------------------------------------------------------------------
.text:004049DE                 align 10h
.text:004049E0
.text:004049E0 ; =============== S U B R O U T I N E =======================================
.text:004049E0
.text:004049E0
.text:004049E0 ; int __cdecl sub_4049E0(FILE *, FILE *, int, int, char)
.text:004049E0 sub_4049E0      proc near               ; CODE XREF: sub_4018C0+132↑p
.text:004049E0
.text:004049E0 var_1C          = dword ptr -1Ch
.text:004049E0 var_18          = dword ptr -18h
.text:004049E0 var_14          = dword ptr -14h
.text:004049E0 var_10          = dword ptr -10h
.text:004049E0 var_C           = dword ptr -0Ch
.text:004049E0 arg_0           = dword ptr  4
.text:004049E0 arg_4           = dword ptr  8
.text:004049E0 arg_8           = dword ptr  0Ch
.text:004049E0 arg_C           = dword ptr  10h
.text:004049E0 arg_10          = byte ptr  14h
.text:004049E0
.text:004049E0                 sub     esp, 1Ch
.text:004049E3                 mov     edx, [esp+1Ch+arg_C]
.text:004049E7                 lea     ecx, [esp+1Ch+arg_10]
.text:004049EB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:004049EF                 mov     ecx, [esp+1Ch+arg_8]
.text:004049F3                 mov     [esp+1Ch+var_10], edx ; int
.text:004049F7                 mov     edx, [esp+1Ch+arg_4]
.text:004049FB                 mov     [esp+1Ch+var_14], ecx ; int
.text:004049FF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00404A03                 mov     edx, [esp+1Ch+arg_0]
.text:00404A07                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:00404A0A                 call    sub_404810
.text:00404A0F                 add     esp, 1Ch
.text:00404A12                 retn
.text:00404A12 sub_4049E0      endp
.text:00404A12
.text:00404A12 ; ---------------------------------------------------------------------------
.text:00404A13                 align 10h
.text:00404A20
.text:00404A20 ; =============== S U B R O U T I N E =======================================
.text:00404A20
.text:00404A20
.text:00404A20 ; int __cdecl sub_404A20(int, int, char *, int, int)
.text:00404A20 sub_404A20      proc near               ; CODE XREF: sub_4018C0+8F↑p
.text:00404A20
.text:00404A20 var_1C          = dword ptr -1Ch
.text:00404A20 var_18          = dword ptr -18h
.text:00404A20 var_14          = dword ptr -14h
.text:00404A20 var_10          = dword ptr -10h
.text:00404A20 var_C           = dword ptr -0Ch
.text:00404A20 var_8           = dword ptr -8
.text:00404A20 var_4           = dword ptr -4
.text:00404A20 arg_0           = dword ptr  4
.text:00404A20 arg_4           = dword ptr  8
.text:00404A20 arg_8           = dword ptr  0Ch
.text:00404A20 arg_C           = dword ptr  10h
.text:00404A20 arg_10          = dword ptr  14h
.text:00404A20
.text:00404A20                 sub     esp, 1Ch
.text:00404A23                 mov     edx, [esp+1Ch+arg_C]
.text:00404A27                 mov     [esp+1Ch+var_4], 0 ; int
.text:00404A2F                 mov     ecx, [esp+1Ch+arg_10]
.text:00404A33                 mov     [esp+1Ch+var_8], 0 ; int
.text:00404A3B                 mov     [esp+1Ch+var_10], edx ; int
.text:00404A3F                 mov     edx, [esp+1Ch+arg_4]
.text:00404A43                 mov     [esp+1Ch+var_C], ecx ; int
.text:00404A47                 mov     ecx, [esp+1Ch+arg_8]
.text:00404A4B                 mov     [esp+1Ch+var_18], edx ; int
.text:00404A4F                 mov     edx, [esp+1Ch+arg_0]
.text:00404A53                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00404A57                 mov     [esp+1Ch+var_1C], edx ; int
.text:00404A5A                 call    sub_403520
.text:00404A5F                 add     esp, 1Ch
.text:00404A62                 retn
.text:00404A62 sub_404A20      endp
.text:00404A62
.text:00404A62 ; ---------------------------------------------------------------------------
.text:00404A63                 align 10h
.text:00404A70                 sub     esp, 2Ch
.text:00404A73                 mov     edx, [esp+44h]
.text:00404A77                 mov     dword ptr [esp+18h], 0
.text:00404A7F                 mov     ecx, [esp+40h]
.text:00404A83                 mov     dword ptr [esp+14h], 0
.text:00404A8B                 mov     [esp+1Ch], edx
.text:00404A8F                 mov     edx, [esp+3Ch]
.text:00404A93                 mov     [esp+10h], ecx
.text:00404A97                 mov     ecx, [esp+38h]
.text:00404A9B                 mov     [esp+0Ch], edx
.text:00404A9F                 mov     edx, [esp+34h]
.text:00404AA3                 mov     [esp+8], ecx
.text:00404AA7                 mov     [esp+4], edx
.text:00404AAB                 mov     edx, [esp+30h]
.text:00404AAF                 mov     [esp], edx
.text:00404AB2                 call    sub_402990
.text:00404AB7                 add     esp, 2Ch
.text:00404ABA                 retn
.text:00404ABA ; ---------------------------------------------------------------------------
.text:00404ABB                 align 10h
.text:00404AC0                 sub     esp, 1Ch
.text:00404AC3                 mov     edx, [esp+2Ch]
.text:00404AC7                 mov     dword ptr [esp+18h], 0
.text:00404ACF                 mov     ecx, [esp+30h]
.text:00404AD3                 mov     dword ptr [esp+14h], 1
.text:00404ADB                 mov     [esp+0Ch], edx
.text:00404ADF                 mov     edx, [esp+24h]
.text:00404AE3                 mov     [esp+10h], ecx
.text:00404AE7                 mov     ecx, [esp+28h]
.text:00404AEB                 mov     [esp+4], edx
.text:00404AEF                 mov     edx, [esp+20h]
.text:00404AF3                 mov     [esp+8], ecx
.text:00404AF7                 mov     [esp], edx
.text:00404AFA                 call    sub_403520
.text:00404AFF                 add     esp, 1Ch
.text:00404B02                 retn
.text:00404B02 ; ---------------------------------------------------------------------------
.text:00404B03                 align 10h
.text:00404B10                 sub     esp, 2Ch
.text:00404B13                 mov     edx, [esp+44h]
.text:00404B17                 mov     dword ptr [esp+18h], 0
.text:00404B1F                 mov     ecx, [esp+40h]
.text:00404B23                 mov     dword ptr [esp+14h], 1
.text:00404B2B                 mov     [esp+1Ch], edx
.text:00404B2F                 mov     edx, [esp+3Ch]
.text:00404B33                 mov     [esp+10h], ecx
.text:00404B37                 mov     ecx, [esp+38h]
.text:00404B3B                 mov     [esp+0Ch], edx
.text:00404B3F                 mov     edx, [esp+34h]
.text:00404B43                 mov     [esp+8], ecx
.text:00404B47                 mov     [esp+4], edx
.text:00404B4B                 mov     edx, [esp+30h]
.text:00404B4F                 mov     [esp], edx
.text:00404B52                 call    sub_402990
.text:00404B57                 add     esp, 2Ch
.text:00404B5A                 retn
.text:00404B5A ; ---------------------------------------------------------------------------
.text:00404B5B                 align 10h
.text:00404B60                 mov     edx, [esp+4]
.text:00404B64                 mov     ds:dword_411030, edx
.text:00404B6A                 retn
.text:00404B6A ; ---------------------------------------------------------------------------
.text:00404B6B aWriteError     db 'write error',0      ; DATA XREF: sub_404B90:loc_404BD9↓o
.text:00404B77 ; const char aSS[]
.text:00404B77 aSS             db '%s: %s',0           ; DATA XREF: sub_404B90+77↓o
.text:00404B7E ; const char aS_3[]
.text:00404B7E aS_3            db '%s',0               ; DATA XREF: sub_404B90+A0↓o
.text:00404B81 ; ---------------------------------------------------------------------------
.text:00404B81                 jmp     short sub_404B90
.text:00404B81 ; ---------------------------------------------------------------------------
.text:00404B83                 align 10h
.text:00404B90
.text:00404B90 ; =============== S U B R O U T I N E =======================================
.text:00404B90
.text:00404B90
.text:00404B90 ; void __cdecl sub_404B90()
.text:00404B90 sub_404B90      proc near               ; CODE XREF: .text:00404B81↑j
.text:00404B90                                         ; DATA XREF: sub_4018C0+5C↑o
.text:00404B90
.text:00404B90 Stream          = dword ptr -2Ch
.text:00404B90 ErrorMessage    = dword ptr -28h
.text:00404B90 var_24          = dword ptr -24h
.text:00404B90 var_20          = byte ptr -20h
.text:00404B90 var_1C          = dword ptr -1Ch
.text:00404B90 var_9           = byte ptr -9
.text:00404B90
.text:00404B90                 push    esi
.text:00404B91                 push    ebx
.text:00404B92                 sub     esp, 24h
.text:00404B95                 mov     edx, ds:_iob
.text:00404B9B                 mov     ecx, [edx+2Ch]
.text:00404B9E                 lea     esi, [edx+20h]
.text:00404BA1                 shr     ecx, 5
.text:00404BA4                 mov     bl, cl
.text:00404BA6                 mov     ecx, [edx+20h]
.text:00404BA9                 and     bl, 1
.text:00404BAC                 cmp     ecx, [esi+8]
.text:00404BAF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404BB2                 setz    [esp+2Ch+var_9]
.text:00404BB7                 call    fclose
.text:00404BBC                 test    eax, eax
.text:00404BBE                 setnz   al
.text:00404BC1                 test    bl, bl
.text:00404BC3                 jnz     loc_404C53
.text:00404BC9                 test    al, al
.text:00404BCB                 jz      short loc_404C20
.text:00404BCD
.text:00404BCD loc_404BCD:                             ; CODE XREF: sub_404B90+CD↓j
.text:00404BCD                 call    _errno
.text:00404BD2                 mov     esi, [eax]
.text:00404BD4
.text:00404BD4 loc_404BD4:                             ; CODE XREF: sub_404B90+C7↓j
.text:00404BD4                 cmp     esi, 9
.text:00404BD7                 jz      short loc_404C46
.text:00404BD9
.text:00404BD9 loc_404BD9:                             ; CODE XREF: sub_404B90+B8↓j
.text:00404BD9                                         ; sub_404B90+C1↓j
.text:00404BD9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00404BE0                 call    ds:libintl_gettext
.text:00404BE6                 mov     ebx, eax
.text:00404BE8                 mov     eax, ds:dword_411030
.text:00404BED                 test    eax, eax
.text:00404BEF                 jz      short loc_404C26
.text:00404BF1                 mov     [esp+2Ch+Stream], eax ; char *
.text:00404BF4                 call    sub_406380
.text:00404BF9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00404BFD                 mov     edx, Code
.text:00404C03                 mov     [esp+2Ch+var_1C], ebx
.text:00404C07                 mov     [esp+2Ch+var_24], offset aSS ; "%s: %s"
.text:00404C0F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00404C13                 mov     [esp+2Ch+Stream], edx ; Code
.text:00404C16                 call    sub_406910
.text:00404C1B                 nop
.text:00404C1C                 lea     esi, [esi+0]
.text:00404C20
.text:00404C20 loc_404C20:                             ; CODE XREF: sub_404B90+3B↑j
.text:00404C20                                         ; sub_404B90+B4↓j ...
.text:00404C20                 add     esp, 24h
.text:00404C23                 pop     ebx
.text:00404C24                 pop     esi
.text:00404C25                 retn
.text:00404C26 ; ---------------------------------------------------------------------------
.text:00404C26
.text:00404C26 loc_404C26:                             ; CODE XREF: sub_404B90+5F↑j
.text:00404C26                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00404C2A                 mov     ebx, Code
.text:00404C30                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:00404C38                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00404C3C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00404C3F                 call    sub_406910
.text:00404C44                 jmp     short loc_404C20
.text:00404C46 ; ---------------------------------------------------------------------------
.text:00404C46
.text:00404C46 loc_404C46:                             ; CODE XREF: sub_404B90+47↑j
.text:00404C46                 test    bl, bl
.text:00404C48                 jnz     short loc_404BD9
.text:00404C4A                 cmp     [esp+2Ch+var_9], 0
.text:00404C4F                 jnz     short loc_404C20
.text:00404C51                 jmp     short loc_404BD9
.text:00404C53 ; ---------------------------------------------------------------------------
.text:00404C53
.text:00404C53 loc_404C53:                             ; CODE XREF: sub_404B90+33↑j
.text:00404C53                 xor     esi, esi
.text:00404C55                 test    al, al
.text:00404C57                 jz      loc_404BD4
.text:00404C5D                 jmp     loc_404BCD
.text:00404C5D sub_404B90      endp
.text:00404C5D
.text:00404C5D ; ---------------------------------------------------------------------------
.text:00404C62                 align 10h
.text:00404C70 aCoreutils530Sr_0 db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00404C70                                         ; DATA XREF: sub_404CE0+544↓o
.text:00404C98                 db 18h dup(90h)
.text:00404CB0 a0StrtolBaseStr_0 db '0 <= strtol_base && strtol_base <= 36',0
.text:00404CB0                                         ; DATA XREF: sub_404CE0+54C↓o
.text:00404CD6                 align 10h
.text:00404CE0
.text:00404CE0 ; =============== S U B R O U T I N E =======================================
.text:00404CE0
.text:00404CE0
.text:00404CE0 ; int __cdecl sub_404CE0(int, int, int, int, char *Str)
.text:00404CE0 sub_404CE0      proc near               ; CODE XREF: sub_402190+36↑p
.text:00404CE0
.text:00404CE0 C               = dword ptr -3Ch
.text:00404CE0 Type            = dword ptr -38h
.text:00404CE0 Radix           = dword ptr -34h
.text:00404CE0 var_28          = dword ptr -28h
.text:00404CE0 var_24          = dword ptr -24h
.text:00404CE0 var_1D          = byte ptr -1Dh
.text:00404CE0 var_1C          = dword ptr -1Ch
.text:00404CE0 var_18          = dword ptr -18h
.text:00404CE0 var_14          = byte ptr -14h
.text:00404CE0 arg_0           = dword ptr  4
.text:00404CE0 arg_4           = dword ptr  8
.text:00404CE0 arg_8           = dword ptr  0Ch
.text:00404CE0 arg_C           = dword ptr  10h
.text:00404CE0 Str             = dword ptr  14h
.text:00404CE0
.text:00404CE0                 push    ebp
.text:00404CE1                 push    edi
.text:00404CE2                 push    esi
.text:00404CE3                 push    ebx
.text:00404CE4                 sub     esp, 2Ch
.text:00404CE7                 mov     ebp, [esp+3Ch+arg_8]
.text:00404CEB                 mov     [esp+3Ch+var_1C], 0
.text:00404CF3                 mov     esi, [esp+3Ch+arg_0]
.text:00404CF7                 cmp     ebp, 24h ; '$'
.text:00404CFA                 ja      loc_40521C
.text:00404D00                 mov     edi, [esp+3Ch+arg_4]
.text:00404D04                 test    edi, edi
.text:00404D06                 jz      loc_405213
.text:00404D0C
.text:00404D0C loc_404D0C:                             ; CODE XREF: sub_404CE0+537↓j
.text:00404D0C                 movzx   edx, byte ptr [esi]
.text:00404D0F                 mov     ebx, esi
.text:00404D11                 mov     [esp+3Ch+var_1D], dl
.text:00404D15                 lea     esi, [esi+0]
.text:00404D19                 lea     edi, [edi+0]
.text:00404D20
.text:00404D20 loc_404D20:                             ; CODE XREF: sub_404CE0+70↓j
.text:00404D20                 movzx   edx, [esp+3Ch+var_1D]
.text:00404D25                 mov     ecx, ds:__mb_cur_max
.text:00404D2B                 cmp     dword ptr [ecx], 1
.text:00404D2E                 jz      loc_405200
.text:00404D34                 mov     [esp+3Ch+Type], 8 ; Type
.text:00404D3C                 mov     [esp+3Ch+C], edx ; C
.text:00404D3F                 call    _isctype
.text:00404D44
.text:00404D44 loc_404D44:                             ; CODE XREF: sub_404CE0+52E↓j
.text:00404D44                 test    eax, eax
.text:00404D46                 jz      short loc_404D52
.text:00404D48                 inc     ebx
.text:00404D49                 movzx   eax, byte ptr [ebx]
.text:00404D4C                 mov     [esp+3Ch+var_1D], al
.text:00404D50                 jmp     short loc_404D20
.text:00404D52 ; ---------------------------------------------------------------------------
.text:00404D52
.text:00404D52 loc_404D52:                             ; CODE XREF: sub_404CE0+66↑j
.text:00404D52                 cmp     [esp+3Ch+var_1D], 2Dh ; '-'
.text:00404D57                 mov     eax, 4
.text:00404D5C                 jz      short loc_404DB5
.text:00404D5E                 call    _errno
.text:00404D63                 mov     dword ptr [eax], 0
.text:00404D69                 mov     [esp+3Ch+Radix], ebp ; Radix
.text:00404D6D                 mov     [esp+3Ch+Type], edi ; EndPtr
.text:00404D71                 mov     [esp+3Ch+C], esi ; String
.text:00404D74                 call    strtoul
.text:00404D79                 mov     [esp+3Ch+var_18], eax
.text:00404D7D                 mov     eax, [edi]
.text:00404D7F                 cmp     eax, esi
.text:00404D81                 jz      loc_4051CC
.text:00404D87                 call    _errno
.text:00404D8C                 mov     ebp, [eax]
.text:00404D8E                 test    ebp, ebp
.text:00404D90                 jnz     loc_4051AB
.text:00404D96
.text:00404D96 loc_404D96:                             ; CODE XREF: sub_404CE0+4DD↓j
.text:00404D96                                         ; sub_404CE0+51A↓j
.text:00404D96                 mov     eax, [esp+3Ch+Str]
.text:00404D9A                 test    eax, eax
.text:00404D9C                 jz      short loc_404DA7
.text:00404D9E                 mov     ecx, [edi]
.text:00404DA0                 movzx   eax, byte ptr [ecx]
.text:00404DA3                 test    al, al
.text:00404DA5                 jnz     short loc_404DBD
.text:00404DA7
.text:00404DA7 loc_404DA7:                             ; CODE XREF: sub_404CE0+BC↑j
.text:00404DA7                                         ; sub_404CE0+26C↓j ...
.text:00404DA7                 mov     edx, [esp+3Ch+var_18]
.text:00404DAB                 mov     esi, [esp+3Ch+arg_C]
.text:00404DAF                 mov     eax, [esp+3Ch+var_1C]
.text:00404DB3                 mov     [esi], edx
.text:00404DB5
.text:00404DB5 loc_404DB5:                             ; CODE XREF: sub_404CE0+7C↑j
.text:00404DB5                                         ; sub_404CE0+112↓j ...
.text:00404DB5                 add     esp, 2Ch
.text:00404DB8                 pop     ebx
.text:00404DB9                 pop     esi
.text:00404DBA                 pop     edi
.text:00404DBB                 pop     ebp
.text:00404DBC                 retn
.text:00404DBD ; ---------------------------------------------------------------------------
.text:00404DBD
.text:00404DBD loc_404DBD:                             ; CODE XREF: sub_404CE0+C5↑j
.text:00404DBD                 mov     [esp+3Ch+var_24], 1
.text:00404DC5                 mov     edx, [esp+3Ch+Str]
.text:00404DC9                 movsx   esi, al
.text:00404DCC                 mov     [esp+3Ch+Type], esi ; Val
.text:00404DD0                 mov     ebx, 400h
.text:00404DD5                 mov     [esp+3Ch+C], edx ; Str
.text:00404DD8                 call    strchr
.text:00404DDD                 test    eax, eax
.text:00404DDF                 jnz     short loc_404DF4
.text:00404DE1
.text:00404DE1 def_404E44:                             ; CODE XREF: sub_404CE0+162↓j
.text:00404DE1                                         ; sub_404CE0+164↓j
.text:00404DE1                                         ; DATA XREF: ...
.text:00404DE1                 mov     eax, [esp+3Ch+var_1C] ; jumptable 00404E44 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00404DE5                 mov     ebx, [esp+3Ch+var_18]
.text:00404DE9                 mov     edi, [esp+3Ch+arg_C]
.text:00404DED                 or      eax, 2
.text:00404DF0                 mov     [edi], ebx
.text:00404DF2                 jmp     short loc_404DB5
.text:00404DF4 ; ---------------------------------------------------------------------------
.text:00404DF4
.text:00404DF4 loc_404DF4:                             ; CODE XREF: sub_404CE0+FF↑j
.text:00404DF4                 mov     [esp+3Ch+Type], 30h ; '0' ; Val
.text:00404DFC                 mov     ebp, [esp+3Ch+Str]
.text:00404E00                 mov     [esp+3Ch+C], ebp ; Str
.text:00404E03                 call    strchr
.text:00404E08                 test    eax, eax
.text:00404E0A                 jz      loc_4051A0
.text:00404E10                 mov     ecx, [edi]
.text:00404E12                 mov     [esp+3Ch+var_28], ecx
.text:00404E16                 movsx   eax, byte ptr [ecx+1]
.text:00404E1A                 cmp     eax, 44h ; 'D'
.text:00404E1D                 jz      loc_405169
.text:00404E23                 cmp     eax, 44h ; 'D'
.text:00404E26                 jg      loc_40517B
.text:00404E2C                 cmp     eax, 42h ; 'B'
.text:00404E2F                 jz      loc_405169
.text:00404E35
.text:00404E35 loc_404E35:                             ; CODE XREF: sub_404CE0+496↓j
.text:00404E35                                         ; sub_404CE0+49E↓j ...
.text:00404E35                 mov     esi, [esp+3Ch+var_28]
.text:00404E39                 movsx   eax, byte ptr [esi]
.text:00404E3C                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00404E3F                 cmp     eax, 35h
.text:00404E42                 ja      short def_404E44 ; jumptable 00404E44 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00404E44                 jmp     ds:jpt_404E44[eax*4] ; switch jump
.text:00404E44 ; ---------------------------------------------------------------------------
.text:00404E4B                 align 4
.text:00404E4C jpt_404E44      dd offset loc_404F6B, offset def_404E44, offset def_404E44
.text:00404E4C                                         ; DATA XREF: sub_404CE0+164↑r
.text:00404E4C                 dd offset loc_404F7B, offset def_404E44, offset loc_40506C ; jump table for switch statement
.text:00404E4C                 dd offset def_404E44, offset def_404E44, offset def_404E44
.text:00404E4C                 dd offset loc_4050A9, offset def_404E44, offset loc_4050DB
.text:00404E4C                 dd offset def_404E44, offset def_404E44, offset loc_404FB5
.text:00404E4C                 dd offset def_404E44, offset def_404E44, offset def_404E44
.text:00404E4C                 dd offset loc_405119, offset def_404E44, offset def_404E44
.text:00404E4C                 dd offset def_404E44, offset def_404E44, offset loc_404FF2
.text:00404E4C                 dd offset loc_40502F, offset def_404E44, offset def_404E44
.text:00404E4C                 dd offset def_404E44, offset def_404E44, offset def_404E44
.text:00404E4C                 dd offset def_404E44, offset def_404E44, offset loc_404F24
.text:00404E4C                 dd offset loc_404F36, offset def_404E44, offset def_404E44
.text:00404E4C                 dd offset def_404E44, offset loc_40506C, offset def_404E44
.text:00404E4C                 dd offset def_404E44, offset def_404E44, offset loc_4050A9
.text:00404E4C                 dd offset def_404E44, offset loc_4050DB, offset def_404E44
.text:00404E4C                 dd offset def_404E44, offset def_404E44, offset def_404E44
.text:00404E4C                 dd offset def_404E44, offset def_404E44, offset loc_405119
.text:00404E4C                 dd offset def_404E44, offset def_404E44, offset loc_405156
.text:00404F24 ; ---------------------------------------------------------------------------
.text:00404F24
.text:00404F24 loc_404F24:                             ; CODE XREF: sub_404CE0+164↑j
.text:00404F24                                         ; DATA XREF: sub_404CE0:jpt_404E44↑o
.text:00404F24                 mov     eax, [esp+3Ch+var_18] ; jumptable 00404E44 case 98
.text:00404F28                 cmp     eax, 7FFFFFh
.text:00404F2D                 ja      short loc_404F5C
.text:00404F2F                 shl     eax, 9
.text:00404F32
.text:00404F32 loc_404F32:                             ; CODE XREF: sub_404CE0+299↓j
.text:00404F32                                         ; sub_404CE0+484↓j
.text:00404F32                 mov     [esp+3Ch+var_18], eax
.text:00404F36
.text:00404F36 loc_404F36:                             ; CODE XREF: sub_404CE0+164↑j
.text:00404F36                                         ; DATA XREF: sub_404CE0:jpt_404E44↑o
.text:00404F36                 xor     eax, eax        ; jumptable 00404E44 case 99
.text:00404F38
.text:00404F38 loc_404F38:                             ; CODE XREF: sub_404CE0+289↓j
.text:00404F38                                         ; sub_404CE0+2CA↓j ...
.text:00404F38                 or      [esp+3Ch+var_1C], eax
.text:00404F3C                 mov     ebp, [esp+3Ch+var_28]
.text:00404F40                 mov     ecx, [esp+3Ch+var_24]
.text:00404F44                 add     ebp, ecx
.text:00404F46                 mov     [edi], ebp
.text:00404F48                 cmp     byte ptr [ebp+0], 0
.text:00404F4C                 jz      loc_404DA7
.text:00404F52                 or      [esp+3Ch+var_1C], 2
.text:00404F57                 jmp     loc_404DA7
.text:00404F5C ; ---------------------------------------------------------------------------
.text:00404F5C
.text:00404F5C loc_404F5C:                             ; CODE XREF: sub_404CE0+24D↑j
.text:00404F5C                                         ; sub_404CE0+294↓j ...
.text:00404F5C                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00404F64                 mov     eax, 1
.text:00404F69                 jmp     short loc_404F38
.text:00404F6B ; ---------------------------------------------------------------------------
.text:00404F6B
.text:00404F6B loc_404F6B:                             ; CODE XREF: sub_404CE0+164↑j
.text:00404F6B                                         ; DATA XREF: sub_404CE0:jpt_404E44↑o
.text:00404F6B                 mov     eax, [esp+3Ch+var_18] ; jumptable 00404E44 case 66
.text:00404F6F                 cmp     eax, 3FFFFFh
.text:00404F74                 ja      short loc_404F5C
.text:00404F76                 shl     eax, 0Ah
.text:00404F79                 jmp     short loc_404F32
.text:00404F7B ; ---------------------------------------------------------------------------
.text:00404F7B
.text:00404F7B loc_404F7B:                             ; CODE XREF: sub_404CE0+164↑j
.text:00404F7B                                         ; DATA XREF: sub_404CE0:jpt_404E44↑o
.text:00404F7B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404E44 case 69
.text:00404F7F                 xor     ebp, ebp
.text:00404F81                 mov     esi, 5
.text:00404F86
.text:00404F86 loc_404F86:                             ; CODE XREF: sub_404CE0+2C8↓j
.text:00404F86                 xor     edx, edx
.text:00404F88                 mov     eax, 0FFFFFFFFh
.text:00404F8D                 div     ebx
.text:00404F8F                 mov     edx, [ecx]
.text:00404F91                 cmp     eax, edx
.text:00404F93                 jnb     short loc_404FAC
.text:00404F95                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00404F9B                 mov     eax, 1
.text:00404FA0
.text:00404FA0 loc_404FA0:                             ; CODE XREF: sub_404CE0+2D3↓j
.text:00404FA0                 dec     esi
.text:00404FA1                 or      ebp, eax
.text:00404FA3                 cmp     esi, 0FFFFFFFFh
.text:00404FA6                 mov     eax, ebp
.text:00404FA8                 jnz     short loc_404F86
.text:00404FAA                 jmp     short loc_404F38
.text:00404FAC ; ---------------------------------------------------------------------------
.text:00404FAC
.text:00404FAC loc_404FAC:                             ; CODE XREF: sub_404CE0+2B3↑j
.text:00404FAC                 imul    edx, ebx
.text:00404FAF                 xor     eax, eax
.text:00404FB1                 mov     [ecx], edx
.text:00404FB3                 jmp     short loc_404FA0
.text:00404FB5 ; ---------------------------------------------------------------------------
.text:00404FB5
.text:00404FB5 loc_404FB5:                             ; CODE XREF: sub_404CE0+164↑j
.text:00404FB5                                         ; DATA XREF: sub_404CE0:jpt_404E44↑o
.text:00404FB5                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404E44 case 80
.text:00404FB9                 xor     ebp, ebp
.text:00404FBB                 mov     esi, 4
.text:00404FC0
.text:00404FC0 loc_404FC0:                             ; CODE XREF: sub_404CE0+302↓j
.text:00404FC0                 xor     edx, edx
.text:00404FC2                 mov     eax, 0FFFFFFFFh
.text:00404FC7                 div     ebx
.text:00404FC9                 mov     edx, [ecx]
.text:00404FCB                 cmp     eax, edx
.text:00404FCD                 jnb     short loc_404FE9
.text:00404FCF                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00404FD5                 mov     eax, 1
.text:00404FDA
.text:00404FDA loc_404FDA:                             ; CODE XREF: sub_404CE0+310↓j
.text:00404FDA                 dec     esi
.text:00404FDB                 or      ebp, eax
.text:00404FDD                 cmp     esi, 0FFFFFFFFh
.text:00404FE0                 mov     eax, ebp
.text:00404FE2                 jnz     short loc_404FC0
.text:00404FE4                 jmp     loc_404F38
.text:00404FE9 ; ---------------------------------------------------------------------------
.text:00404FE9
.text:00404FE9 loc_404FE9:                             ; CODE XREF: sub_404CE0+2ED↑j
.text:00404FE9                 imul    edx, ebx
.text:00404FEC                 xor     eax, eax
.text:00404FEE                 mov     [ecx], edx
.text:00404FF0                 jmp     short loc_404FDA
.text:00404FF2 ; ---------------------------------------------------------------------------
.text:00404FF2
.text:00404FF2 loc_404FF2:                             ; CODE XREF: sub_404CE0+164↑j
.text:00404FF2                                         ; DATA XREF: sub_404CE0:jpt_404E44↑o
.text:00404FF2                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404E44 case 89
.text:00404FF6                 xor     ebp, ebp
.text:00404FF8                 mov     esi, 7
.text:00404FFD
.text:00404FFD loc_404FFD:                             ; CODE XREF: sub_404CE0+33F↓j
.text:00404FFD                 xor     edx, edx
.text:00404FFF                 mov     eax, 0FFFFFFFFh
.text:00405004                 div     ebx
.text:00405006                 mov     edx, [ecx]
.text:00405008                 cmp     eax, edx
.text:0040500A                 jnb     short loc_405026
.text:0040500C                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00405012                 mov     eax, 1
.text:00405017
.text:00405017 loc_405017:                             ; CODE XREF: sub_404CE0+34D↓j
.text:00405017                 dec     esi
.text:00405018                 or      ebp, eax
.text:0040501A                 cmp     esi, 0FFFFFFFFh
.text:0040501D                 mov     eax, ebp
.text:0040501F                 jnz     short loc_404FFD
.text:00405021                 jmp     loc_404F38
.text:00405026 ; ---------------------------------------------------------------------------
.text:00405026
.text:00405026 loc_405026:                             ; CODE XREF: sub_404CE0+32A↑j
.text:00405026                 imul    edx, ebx
.text:00405029                 xor     eax, eax
.text:0040502B                 mov     [ecx], edx
.text:0040502D                 jmp     short loc_405017
.text:0040502F ; ---------------------------------------------------------------------------
.text:0040502F
.text:0040502F loc_40502F:                             ; CODE XREF: sub_404CE0+164↑j
.text:0040502F                                         ; DATA XREF: sub_404CE0:jpt_404E44↑o
.text:0040502F                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404E44 case 90
.text:00405033                 xor     ebp, ebp
.text:00405035                 mov     esi, 6
.text:0040503A
.text:0040503A loc_40503A:                             ; CODE XREF: sub_404CE0+37C↓j
.text:0040503A                 xor     edx, edx
.text:0040503C                 mov     eax, 0FFFFFFFFh
.text:00405041                 div     ebx
.text:00405043                 mov     edx, [ecx]
.text:00405045                 cmp     eax, edx
.text:00405047                 jnb     short loc_405063
.text:00405049                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040504F                 mov     eax, 1
.text:00405054
.text:00405054 loc_405054:                             ; CODE XREF: sub_404CE0+38A↓j
.text:00405054                 dec     esi
.text:00405055                 or      ebp, eax
.text:00405057                 cmp     esi, 0FFFFFFFFh
.text:0040505A                 mov     eax, ebp
.text:0040505C                 jnz     short loc_40503A
.text:0040505E                 jmp     loc_404F38
.text:00405063 ; ---------------------------------------------------------------------------
.text:00405063
.text:00405063 loc_405063:                             ; CODE XREF: sub_404CE0+367↑j
.text:00405063                 imul    edx, ebx
.text:00405066                 xor     eax, eax
.text:00405068                 mov     [ecx], edx
.text:0040506A                 jmp     short loc_405054
.text:0040506C ; ---------------------------------------------------------------------------
.text:0040506C
.text:0040506C loc_40506C:                             ; CODE XREF: sub_404CE0+164↑j
.text:0040506C                                         ; DATA XREF: sub_404CE0:jpt_404E44↑o
.text:0040506C                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404E44 cases 71,103
.text:00405070                 xor     ebp, ebp
.text:00405072                 mov     esi, 2
.text:00405077
.text:00405077 loc_405077:                             ; CODE XREF: sub_404CE0+3B9↓j
.text:00405077                 xor     edx, edx
.text:00405079                 mov     eax, 0FFFFFFFFh
.text:0040507E                 div     ebx
.text:00405080                 mov     edx, [ecx]
.text:00405082                 cmp     eax, edx
.text:00405084                 jnb     short loc_4050A0
.text:00405086                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040508C                 mov     eax, 1
.text:00405091
.text:00405091 loc_405091:                             ; CODE XREF: sub_404CE0+3C7↓j
.text:00405091                 dec     esi
.text:00405092                 or      ebp, eax
.text:00405094                 cmp     esi, 0FFFFFFFFh
.text:00405097                 mov     eax, ebp
.text:00405099                 jnz     short loc_405077
.text:0040509B                 jmp     loc_404F38
.text:004050A0 ; ---------------------------------------------------------------------------
.text:004050A0
.text:004050A0 loc_4050A0:                             ; CODE XREF: sub_404CE0+3A4↑j
.text:004050A0                 imul    edx, ebx
.text:004050A3                 xor     eax, eax
.text:004050A5                 mov     [ecx], edx
.text:004050A7                 jmp     short loc_405091
.text:004050A9 ; ---------------------------------------------------------------------------
.text:004050A9
.text:004050A9 loc_4050A9:                             ; CODE XREF: sub_404CE0+164↑j
.text:004050A9                                         ; DATA XREF: sub_404CE0:jpt_404E44↑o
.text:004050A9                 xor     edx, edx        ; jumptable 00404E44 cases 75,107
.text:004050AB                 mov     eax, 0FFFFFFFFh
.text:004050B0                 div     ebx
.text:004050B2                 mov     edx, [esp+3Ch+var_18]
.text:004050B6                 cmp     eax, edx
.text:004050B8                 jnb     short loc_4050D0
.text:004050BA                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:004050C2                 mov     edx, 1
.text:004050C7
.text:004050C7 loc_4050C7:                             ; CODE XREF: sub_404CE0+3F9↓j
.text:004050C7                 xor     eax, eax
.text:004050C9                 or      eax, edx
.text:004050CB                 jmp     loc_404F38
.text:004050D0 ; ---------------------------------------------------------------------------
.text:004050D0
.text:004050D0 loc_4050D0:                             ; CODE XREF: sub_404CE0+3D8↑j
.text:004050D0                 imul    edx, ebx
.text:004050D3                 mov     [esp+3Ch+var_18], edx
.text:004050D7                 xor     edx, edx
.text:004050D9                 jmp     short loc_4050C7
.text:004050DB ; ---------------------------------------------------------------------------
.text:004050DB
.text:004050DB loc_4050DB:                             ; CODE XREF: sub_404CE0+164↑j
.text:004050DB                                         ; DATA XREF: sub_404CE0:jpt_404E44↑o
.text:004050DB                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404E44 cases 77,109
.text:004050DF                 xor     ebp, ebp
.text:004050E1                 mov     esi, 1
.text:004050E6
.text:004050E6 loc_4050E6:                             ; CODE XREF: sub_404CE0+42E↓j
.text:004050E6                 xor     edx, edx
.text:004050E8                 mov     eax, 0FFFFFFFFh
.text:004050ED                 div     ebx
.text:004050EF                 mov     edx, [ecx]
.text:004050F1                 cmp     eax, edx
.text:004050F3                 jnb     short loc_405110
.text:004050F5                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004050FB                 mov     eax, 1
.text:00405100
.text:00405100 loc_405100:                             ; CODE XREF: sub_404CE0+437↓j
.text:00405100                 dec     esi
.text:00405101                 or      ebp, eax
.text:00405103                 cmp     esi, 0FFFFFFFFh
.text:00405106                 mov     eax, ebp
.text:00405108                 jz      loc_404F38
.text:0040510E                 jmp     short loc_4050E6
.text:00405110 ; ---------------------------------------------------------------------------
.text:00405110
.text:00405110 loc_405110:                             ; CODE XREF: sub_404CE0+413↑j
.text:00405110                 imul    edx, ebx
.text:00405113                 xor     eax, eax
.text:00405115                 mov     [ecx], edx
.text:00405117                 jmp     short loc_405100
.text:00405119 ; ---------------------------------------------------------------------------
.text:00405119
.text:00405119 loc_405119:                             ; CODE XREF: sub_404CE0+164↑j
.text:00405119                                         ; DATA XREF: sub_404CE0:jpt_404E44↑o
.text:00405119                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404E44 cases 84,116
.text:0040511D                 xor     ebp, ebp
.text:0040511F                 mov     esi, 3
.text:00405124
.text:00405124 loc_405124:                             ; CODE XREF: sub_404CE0+466↓j
.text:00405124                 xor     edx, edx
.text:00405126                 mov     eax, 0FFFFFFFFh
.text:0040512B                 div     ebx
.text:0040512D                 mov     edx, [ecx]
.text:0040512F                 cmp     eax, edx
.text:00405131                 jnb     short loc_40514D
.text:00405133                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00405139                 mov     eax, 1
.text:0040513E
.text:0040513E loc_40513E:                             ; CODE XREF: sub_404CE0+474↓j
.text:0040513E                 dec     esi
.text:0040513F                 or      ebp, eax
.text:00405141                 cmp     esi, 0FFFFFFFFh
.text:00405144                 mov     eax, ebp
.text:00405146                 jnz     short loc_405124
.text:00405148                 jmp     loc_404F38
.text:0040514D ; ---------------------------------------------------------------------------
.text:0040514D
.text:0040514D loc_40514D:                             ; CODE XREF: sub_404CE0+451↑j
.text:0040514D                 imul    edx, ebx
.text:00405150                 xor     eax, eax
.text:00405152                 mov     [ecx], edx
.text:00405154                 jmp     short loc_40513E
.text:00405156 ; ---------------------------------------------------------------------------
.text:00405156
.text:00405156 loc_405156:                             ; CODE XREF: sub_404CE0+164↑j
.text:00405156                                         ; DATA XREF: sub_404CE0:jpt_404E44↑o
.text:00405156                 mov     eax, [esp+3Ch+var_18] ; jumptable 00404E44 case 119
.text:0040515A                 test    eax, eax
.text:0040515C                 js      loc_404F5C
.text:00405162                 add     eax, eax
.text:00405164                 jmp     loc_404F32
.text:00405169 ; ---------------------------------------------------------------------------
.text:00405169
.text:00405169 loc_405169:                             ; CODE XREF: sub_404CE0+13D↑j
.text:00405169                                         ; sub_404CE0+14F↑j
.text:00405169                 mov     [esp+3Ch+var_24], 2
.text:00405171                 mov     ebx, 3E8h
.text:00405176                 jmp     loc_404E35
.text:0040517B ; ---------------------------------------------------------------------------
.text:0040517B
.text:0040517B loc_40517B:                             ; CODE XREF: sub_404CE0+146↑j
.text:0040517B                 cmp     eax, 69h ; 'i'
.text:0040517E                 jnz     loc_404E35
.text:00405184                 mov     edx, [esp+3Ch+var_28]
.text:00405188                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040518C                 jnz     loc_404E35
.text:00405192                 mov     [esp+3Ch+var_24], 3
.text:0040519A                 jmp     loc_404E35
.text:0040519A ; ---------------------------------------------------------------------------
.text:0040519F                 align 10h
.text:004051A0
.text:004051A0 loc_4051A0:                             ; CODE XREF: sub_404CE0+12A↑j
.text:004051A0                 mov     eax, [edi]
.text:004051A2                 mov     [esp+3Ch+var_28], eax
.text:004051A6                 jmp     loc_404E35
.text:004051AB ; ---------------------------------------------------------------------------
.text:004051AB
.text:004051AB loc_4051AB:                             ; CODE XREF: sub_404CE0+B0↑j
.text:004051AB                 call    _errno
.text:004051B0                 cmp     dword ptr [eax], 22h ; '"'
.text:004051B3                 jnz     short loc_4051C2
.text:004051B5                 mov     [esp+3Ch+var_1C], 1
.text:004051BD                 jmp     loc_404D96
.text:004051C2 ; ---------------------------------------------------------------------------
.text:004051C2
.text:004051C2 loc_4051C2:                             ; CODE XREF: sub_404CE0+4D3↑j
.text:004051C2                                         ; sub_404CE0+4F2↓j ...
.text:004051C2                 mov     eax, 4
.text:004051C7                 jmp     loc_404DB5
.text:004051CC ; ---------------------------------------------------------------------------
.text:004051CC
.text:004051CC loc_4051CC:                             ; CODE XREF: sub_404CE0+A1↑j
.text:004051CC                 mov     edx, [esp+3Ch+Str]
.text:004051D0                 test    edx, edx
.text:004051D2                 jz      short loc_4051C2
.text:004051D4                 movzx   eax, byte ptr [eax]
.text:004051D7                 test    al, al
.text:004051D9                 jz      short loc_4051C2
.text:004051DB                 mov     ebx, [esp+3Ch+Str]
.text:004051DF                 movsx   esi, al
.text:004051E2                 mov     [esp+3Ch+Type], esi ; Val
.text:004051E6                 mov     [esp+3Ch+C], ebx ; Str
.text:004051E9                 call    strchr
.text:004051EE                 test    eax, eax
.text:004051F0                 jz      short loc_4051C2
.text:004051F2                 mov     [esp+3Ch+var_18], 1
.text:004051FA                 jmp     loc_404D96
.text:004051FA ; ---------------------------------------------------------------------------
.text:004051FF                 align 10h
.text:00405200
.text:00405200 loc_405200:                             ; CODE XREF: sub_404CE0+4E↑j
.text:00405200                 mov     eax, ds:_pctype
.text:00405205                 mov     ecx, [eax]
.text:00405207                 movzx   eax, word ptr [ecx+edx*2]
.text:0040520B                 and     eax, 8
.text:0040520E                 jmp     loc_404D44
.text:00405213 ; ---------------------------------------------------------------------------
.text:00405213
.text:00405213 loc_405213:                             ; CODE XREF: sub_404CE0+26↑j
.text:00405213                 lea     edi, [esp+3Ch+var_14]
.text:00405217                 jmp     loc_404D0C
.text:0040521C ; ---------------------------------------------------------------------------
.text:0040521C
.text:0040521C loc_40521C:                             ; CODE XREF: sub_404CE0+1A↑j
.text:0040521C                 mov     [esp+3Ch+Radix], 70h ; 'p'
.text:00405224                 mov     [esp+3Ch+Type], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:0040522C                 mov     [esp+3Ch+C], offset a0StrtolBaseStr_0 ; "0 <= strtol_base && strtol_base <= 36"
.text:00405233                 call    _assert
.text:00405233 sub_404CE0      endp
.text:00405233
.text:00405233 ; ---------------------------------------------------------------------------
.text:00405238                 db 18h dup(90h)
.text:00405250 aLiteral        db 'literal',0          ; DATA XREF: .text:00405290↓o
.text:00405258 aShell          db 'shell',0            ; DATA XREF: .text:00405294↓o
.text:0040525E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00405298↓o
.text:0040526B aC              db 'c',0                ; DATA XREF: .text:0040529C↓o
.text:0040526D aEscape         db 'escape',0           ; DATA XREF: .text:004052A0↓o
.text:00405274 aLocale         db 'locale',0           ; DATA XREF: .text:004052A4↓o
.text:0040527B aClocale        db 'clocale',0          ; DATA XREF: .text:004052A8↓o
.text:00405283                 align 10h
.text:00405290                 dd offset aLiteral      ; "literal"
.text:00405294                 dd offset aShell        ; "shell"
.text:00405298                 dd offset aShellAlways  ; "shell-always"
.text:0040529C                 dd offset aC            ; "c"
.text:004052A0                 dd offset aEscape       ; "escape"
.text:004052A4                 dd offset aLocale       ; "locale"
.text:004052A8                 dd offset aClocale      ; "clocale"
.text:004052AC                 dd 2 dup(0)
.text:004052B4                 dd 1, 2, 3, 4, 5, 6
.text:004052CC asc_4052CC:                             ; DATA XREF: sub_4052E0+7E↓o
.text:004052CC                                         ; sub_4052E0+A39↓o ...
.text:004052CC                 text "UTF-16LE", '"',27h,'`'
.text:004052D2                 align 10h
.text:004052E0
.text:004052E0 ; =============== S U B R O U T I N E =======================================
.text:004052E0
.text:004052E0
.text:004052E0 ; int __cdecl sub_4052E0(int, int, char *Str, int, int, int)
.text:004052E0 sub_4052E0      proc near               ; CODE XREF: sub_4052E0+43A↓p
.text:004052E0                                         ; .text:00405EA3↓p ...
.text:004052E0
.text:004052E0 C               = dword ptr -4Ch
.text:004052E0 Type            = dword ptr -48h
.text:004052E0 SizeInBytes     = dword ptr -44h
.text:004052E0 State           = dword ptr -40h
.text:004052E0 var_3C          = dword ptr -3Ch
.text:004052E0 var_38          = dword ptr -38h
.text:004052E0 var_34          = dword ptr -34h
.text:004052E0 var_30          = dword ptr -30h
.text:004052E0 var_29          = byte ptr -29h
.text:004052E0 var_28          = dword ptr -28h
.text:004052E0 var_22          = byte ptr -22h
.text:004052E0 var_21          = byte ptr -21h
.text:004052E0 var_20          = dword ptr -20h
.text:004052E0 var_1C          = dword ptr -1Ch
.text:004052E0 var_18          = mbstate_t ptr -18h
.text:004052E0 arg_0           = dword ptr  4
.text:004052E0 arg_4           = dword ptr  8
.text:004052E0 Str             = dword ptr  0Ch
.text:004052E0 arg_C           = dword ptr  10h
.text:004052E0 arg_10          = dword ptr  14h
.text:004052E0 arg_14          = dword ptr  18h
.text:004052E0
.text:004052E0                 push    ebp
.text:004052E1                 push    edi
.text:004052E2                 push    esi
.text:004052E3                 push    ebx
.text:004052E4                 sub     esp, 3Ch
.text:004052E7                 mov     edx, ds:__mb_cur_max
.text:004052ED                 mov     [esp+4Ch+var_34], 0
.text:004052F5                 mov     [esp+4Ch+var_1C], 0
.text:004052FD                 cmp     dword ptr [edx], 1
.text:00405300                 mov     [esp+4Ch+var_20], 0
.text:00405308                 mov     [esp+4Ch+var_21], 0
.text:0040530D                 setz    [esp+4Ch+var_22]
.text:00405312                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00405317                 ja      short def_40531D ; jumptable 0040531D default case, cases 0,1
.text:00405319                 mov     edx, [esp+4Ch+arg_10]
.text:0040531D                 jmp     ds:jpt_40531D[edx*4] ; switch jump
.text:0040531D ; ---------------------------------------------------------------------------
.text:00405324 jpt_40531D      dd offset def_40531D    ; DATA XREF: sub_4052E0+3D↑r
.text:00405324                 dd offset def_40531D    ; jump table for switch statement
.text:00405324                 dd offset loc_405C65
.text:00405324                 dd offset loc_405340
.text:00405324                 dd offset loc_405C8B
.text:00405324                 dd offset loc_405C95
.text:00405324                 dd offset loc_405C95
.text:00405340 ; ---------------------------------------------------------------------------
.text:00405340
.text:00405340 loc_405340:                             ; CODE XREF: sub_4052E0+3D↑j
.text:00405340                                         ; DATA XREF: sub_4052E0:jpt_40531D↑o
.text:00405340                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040531D case 3
.text:00405344                 cmp     [esp+4Ch+var_34], eax
.text:00405348                 jnb     short loc_405351
.text:0040534A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040534E                 mov     byte ptr [ebx], 22h ; '"'
.text:00405351
.text:00405351 loc_405351:                             ; CODE XREF: sub_4052E0+68↑j
.text:00405351                 mov     [esp+4Ch+var_34], 1
.text:00405359                 mov     [esp+4Ch+var_21], 1
.text:0040535E                 mov     [esp+4Ch+var_1C], offset asc_4052CC ; "\"'`"
.text:00405366
.text:00405366 loc_405366:                             ; CODE XREF: sub_4052E0+9A6↓j
.text:00405366                 mov     [esp+4Ch+var_20], 1
.text:0040536E
.text:0040536E def_40531D:                             ; CODE XREF: sub_4052E0+37↑j
.text:0040536E                                         ; sub_4052E0+3D↑j ...
.text:0040536E                 xor     ebp, ebp        ; jumptable 0040531D default case, cases 0,1
.text:00405370
.text:00405370 loc_405370:                             ; CODE XREF: sub_4052E0+3DB↓j
.text:00405370                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00405375                 jz      loc_405C57
.text:0040537B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040537F
.text:0040537F loc_40537F:                             ; CODE XREF: sub_4052E0+980↓j
.text:0040537F                 jz      loc_405BEE
.text:00405385                 cmp     [esp+4Ch+var_21], 0
.text:0040538A                 jz      short loc_4053D0
.text:0040538C                 mov     esi, [esp+4Ch+var_20]
.text:00405390                 test    esi, esi
.text:00405392                 jz      short loc_4053D0
.text:00405394                 mov     ecx, [esp+4Ch+var_20]
.text:00405398                 lea     edi, [ecx+ebp]
.text:0040539B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040539F                 ja      short loc_4053D0
.text:004053A1                 cld
.text:004053A2                 mov     ebx, [esp+4Ch+Str]
.text:004053A6                 mov     edi, [esp+4Ch+var_1C]
.text:004053AA                 add     ebx, ebp
.text:004053AC                 mov     esi, ebx
.text:004053AE                 cmp     ecx, ecx
.text:004053B0                 repe cmpsb
.text:004053B2                 jnz     short loc_4053D0
.text:004053B4                 mov     edx, [esp+4Ch+arg_4]
.text:004053B8                 cmp     [esp+4Ch+var_34], edx
.text:004053BC                 jnb     short loc_4053CA
.text:004053BE                 mov     ecx, [esp+4Ch+arg_0]
.text:004053C2                 mov     eax, [esp+4Ch+var_34]
.text:004053C6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004053CA
.text:004053CA loc_4053CA:                             ; CODE XREF: sub_4052E0+DC↑j
.text:004053CA                 inc     [esp+4Ch+var_34]
.text:004053CE                 mov     esi, esi
.text:004053D0
.text:004053D0 loc_4053D0:                             ; CODE XREF: sub_4052E0+AA↑j
.text:004053D0                                         ; sub_4052E0+B2↑j ...
.text:004053D0                 mov     edi, [esp+4Ch+Str]
.text:004053D4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004053D9                 movzx   eax, bl
.text:004053DC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004053DF                 ja      def_4053E5      ; jumptable 004053E5 default case, cases 1-6,14-31,64
.text:004053E5                 jmp     ds:jpt_4053E5[eax*4] ; switch jump
.text:004053E5 ; ---------------------------------------------------------------------------
.text:004053EC jpt_4053E5      dd offset loc_4055E8, offset def_4053E5, offset def_4053E5
.text:004053EC                                         ; DATA XREF: sub_4052E0+105↑r
.text:004053EC                 dd offset def_4053E5, offset def_4053E5, offset def_4053E5 ; jump table for switch statement
.text:004053EC                 dd offset def_4053E5, offset loc_4056C0, offset loc_4056DE
.text:004053EC                 dd offset loc_4056E2, offset loc_405727, offset loc_40572B
.text:004053EC                 dd offset loc_40572F, offset loc_405733, offset def_4053E5
.text:004053EC                 dd offset def_4053E5, offset def_4053E5, offset def_4053E5
.text:004053EC                 dd offset def_4053E5, offset def_4053E5, offset def_4053E5
.text:004053EC                 dd offset def_4053E5, offset def_4053E5, offset def_4053E5
.text:004053EC                 dd offset def_4053E5, offset def_4053E5, offset def_4053E5
.text:004053EC                 dd offset def_4053E5, offset def_4053E5, offset def_4053E5
.text:004053EC                 dd offset def_4053E5, offset def_4053E5, offset loc_405BB8
.text:004053EC                 dd offset loc_405BB8, offset loc_405BB8, offset loc_405BDA
.text:004053EC                 dd offset loc_405BB8, offset def_4057E2, offset loc_405BB8
.text:004053EC                 dd offset loc_405737, offset loc_405BB8, offset loc_405BB8
.text:004053EC                 dd offset loc_405BB8, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset loc_405BB8
.text:004053EC                 dd offset loc_405BB8, offset loc_405BB8, offset loc_405BB8
.text:004053EC                 dd offset loc_40579C, offset def_4053E5, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset loc_405BB8, offset loc_405BB1
.text:004053EC                 dd offset def_4057E2, offset loc_405BB8, offset def_4057E2
.text:004053EC                 dd offset loc_405BB8, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset def_4057E2, offset def_4057E2, offset def_4057E2
.text:004053EC                 dd offset loc_405BC8, offset loc_405BB8, offset loc_405BC8
.text:004053EC                 dd offset loc_405BDA
.text:004055E8 ; ---------------------------------------------------------------------------
.text:004055E8
.text:004055E8 loc_4055E8:                             ; CODE XREF: sub_4052E0+105↑j
.text:004055E8                                         ; DATA XREF: sub_4052E0:jpt_4053E5↑o
.text:004055E8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004053E5 case 0
.text:004055ED                 lea     eax, [ebp+1]
.text:004055F0                 jz      loc_4056A0
.text:004055F6                 mov     esi, [esp+4Ch+arg_4]
.text:004055FA                 cmp     [esp+4Ch+var_34], esi
.text:004055FE                 jnb     short loc_40560C
.text:00405600                 mov     eax, [esp+4Ch+arg_0]
.text:00405604                 mov     ebx, [esp+4Ch+var_34]
.text:00405608                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040560C
.text:0040560C loc_40560C:                             ; CODE XREF: sub_4052E0+31E↑j
.text:0040560C                 inc     [esp+4Ch+var_34]
.text:00405610                 mov     edx, [esp+4Ch+arg_4]
.text:00405614                 cmp     [esp+4Ch+var_34], edx
.text:00405618                 jnb     short loc_405626
.text:0040561A                 mov     edi, [esp+4Ch+arg_0]
.text:0040561E                 mov     ecx, [esp+4Ch+var_34]
.text:00405622                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00405626
.text:00405626 loc_405626:                             ; CODE XREF: sub_4052E0+338↑j
.text:00405626                 inc     [esp+4Ch+var_34]
.text:0040562A                 mov     esi, [esp+4Ch+arg_4]
.text:0040562E                 cmp     [esp+4Ch+var_34], esi
.text:00405632                 jnb     short loc_405640
.text:00405634                 mov     ebx, [esp+4Ch+arg_0]
.text:00405638                 mov     eax, [esp+4Ch+var_34]
.text:0040563C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00405640
.text:00405640 loc_405640:                             ; CODE XREF: sub_4052E0+352↑j
.text:00405640                 inc     [esp+4Ch+var_34]
.text:00405644                 mov     bl, 30h ; '0'
.text:00405646                 lea     esi, [esi+0]
.text:00405649                 lea     edi, [edi+0]
.text:00405650
.text:00405650 def_4057E2:                             ; CODE XREF: sub_4052E0+105↑j
.text:00405650                                         ; sub_4052E0+463↓j ...
.text:00405650                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004053E5 cases 37,43-58,65-90,93,95,97-122
.text:00405650                                         ; jumptable 004057E2 default case, cases 34-38,42-44,46,48-59
.text:00405655                 lea     eax, [ebp+1]
.text:00405658                 jz      short loc_4056A0
.text:0040565A                 mov     cl, bl
.text:0040565C                 mov     edi, [esp+4Ch+arg_14]
.text:00405660                 mov     esi, 1
.text:00405665                 shr     cl, 5
.text:00405668                 movzx   edx, cl
.text:0040566B                 mov     ecx, ebx
.text:0040566D                 and     ecx, 1Fh
.text:00405670                 shl     esi, cl
.text:00405672                 test    [edi+edx*4+4], esi
.text:00405676                 jz      short loc_405692
.text:00405678
.text:00405678 loc_405678:                             ; CODE XREF: sub_4052E0+3FC↓j
.text:00405678                 mov     edx, [esp+4Ch+arg_4]
.text:0040567C                 cmp     [esp+4Ch+var_34], edx
.text:00405680                 jnb     short loc_40568E
.text:00405682                 mov     edi, [esp+4Ch+arg_0]
.text:00405686                 mov     esi, [esp+4Ch+var_34]
.text:0040568A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040568E
.text:0040568E loc_40568E:                             ; CODE XREF: sub_4052E0+3A0↑j
.text:0040568E                 inc     [esp+4Ch+var_34]
.text:00405692
.text:00405692 loc_405692:                             ; CODE XREF: sub_4052E0+396↑j
.text:00405692                 lea     eax, [ebp+1]
.text:00405695                 lea     esi, [esi+0]
.text:00405699                 lea     edi, [edi+0]
.text:004056A0
.text:004056A0 loc_4056A0:                             ; CODE XREF: sub_4052E0+310↑j
.text:004056A0                                         ; sub_4052E0+378↑j ...
.text:004056A0                 mov     ebp, [esp+4Ch+arg_4]
.text:004056A4                 cmp     [esp+4Ch+var_34], ebp
.text:004056A8                 jnb     short loc_4056B5
.text:004056AA                 mov     edx, [esp+4Ch+arg_0]
.text:004056AE                 mov     ecx, [esp+4Ch+var_34]
.text:004056B2                 mov     [ecx+edx], bl
.text:004056B5
.text:004056B5 loc_4056B5:                             ; CODE XREF: sub_4052E0+3C8↑j
.text:004056B5                 inc     [esp+4Ch+var_34]
.text:004056B9                 mov     ebp, eax
.text:004056BB                 jmp     loc_405370
.text:004056C0 ; ---------------------------------------------------------------------------
.text:004056C0
.text:004056C0 loc_4056C0:                             ; CODE XREF: sub_4052E0+105↑j
.text:004056C0                                         ; DATA XREF: sub_4052E0:jpt_4053E5↑o
.text:004056C0                 mov     dl, 61h ; 'a'   ; jumptable 004053E5 case 7
.text:004056C2                 lea     esi, [esi+0]
.text:004056C9                 lea     edi, [edi+0]
.text:004056D0
.text:004056D0 loc_4056D0:                             ; CODE XREF: sub_4052E0+400↓j
.text:004056D0                                         ; sub_4052E0+409↓j ...
.text:004056D0                 cmp     [esp+4Ch+var_21], 0
.text:004056D5                 lea     eax, [ebp+1]
.text:004056D8                 jz      short loc_4056A0
.text:004056DA                 mov     bl, dl
.text:004056DC                 jmp     short loc_405678
.text:004056DE ; ---------------------------------------------------------------------------
.text:004056DE
.text:004056DE loc_4056DE:                             ; CODE XREF: sub_4052E0+105↑j
.text:004056DE                                         ; DATA XREF: sub_4052E0:jpt_4053E5↑o
.text:004056DE                 mov     dl, 62h ; 'b'   ; jumptable 004053E5 case 8
.text:004056E0                 jmp     short loc_4056D0
.text:004056E2 ; ---------------------------------------------------------------------------
.text:004056E2
.text:004056E2 loc_4056E2:                             ; CODE XREF: sub_4052E0+105↑j
.text:004056E2                                         ; DATA XREF: sub_4052E0:jpt_4053E5↑o
.text:004056E2                 mov     dl, 74h ; 't'   ; jumptable 004053E5 case 9
.text:004056E4
.text:004056E4 loc_4056E4:                             ; CODE XREF: sub_4052E0+449↓j
.text:004056E4                                         ; sub_4052E0+455↓j ...
.text:004056E4                 cmp     [esp+4Ch+arg_10], 1
.text:004056E9                 jnz     short loc_4056D0
.text:004056EB
.text:004056EB loc_4056EB:                             ; CODE XREF: sub_4052E0+45C↓j
.text:004056EB                                         ; sub_4052E0+4C1↓j ...
.text:004056EB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00405AB2 cases 91,92,94,96,124
.text:004056F3                 mov     eax, [esp+4Ch+arg_14]
.text:004056F7                 mov     edx, [esp+4Ch+arg_C]
.text:004056FB                 mov     ecx, [esp+4Ch+Str]
.text:004056FF                 mov     ebx, [esp+4Ch+arg_4]
.text:00405703                 mov     [esp+4Ch+var_38], eax ; int
.text:00405707                 mov     ebp, [esp+4Ch+arg_0]
.text:0040570B                 mov     [esp+4Ch+State], edx ; int
.text:0040570F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00405713                 mov     [esp+4Ch+Type], ebx ; int
.text:00405717                 mov     [esp+4Ch+C], ebp ; int
.text:0040571A                 call    sub_4052E0
.text:0040571F
.text:0040571F loc_40571F:                             ; CODE XREF: sub_4052E0+972↓j
.text:0040571F                 add     esp, 3Ch
.text:00405722                 pop     ebx
.text:00405723                 pop     esi
.text:00405724                 pop     edi
.text:00405725                 pop     ebp
.text:00405726                 retn
.text:00405727 ; ---------------------------------------------------------------------------
.text:00405727
.text:00405727 loc_405727:                             ; CODE XREF: sub_4052E0+105↑j
.text:00405727                                         ; DATA XREF: sub_4052E0:jpt_4053E5↑o
.text:00405727                 mov     dl, 6Eh ; 'n'   ; jumptable 004053E5 case 10
.text:00405729                 jmp     short loc_4056E4
.text:0040572B ; ---------------------------------------------------------------------------
.text:0040572B
.text:0040572B loc_40572B:                             ; CODE XREF: sub_4052E0+105↑j
.text:0040572B                                         ; DATA XREF: sub_4052E0:jpt_4053E5↑o
.text:0040572B                 mov     dl, 76h ; 'v'   ; jumptable 004053E5 case 11
.text:0040572D                 jmp     short loc_4056D0
.text:0040572F ; ---------------------------------------------------------------------------
.text:0040572F
.text:0040572F loc_40572F:                             ; CODE XREF: sub_4052E0+105↑j
.text:0040572F                                         ; DATA XREF: sub_4052E0:jpt_4053E5↑o
.text:0040572F                 mov     dl, 66h ; 'f'   ; jumptable 004053E5 case 12
.text:00405731                 jmp     short loc_4056D0
.text:00405733 ; ---------------------------------------------------------------------------
.text:00405733
.text:00405733 loc_405733:                             ; CODE XREF: sub_4052E0+105↑j
.text:00405733                                         ; DATA XREF: sub_4052E0:jpt_4053E5↑o
.text:00405733                 mov     dl, 72h ; 'r'   ; jumptable 004053E5 case 13
.text:00405735                 jmp     short loc_4056E4
.text:00405737 ; ---------------------------------------------------------------------------
.text:00405737
.text:00405737 loc_405737:                             ; CODE XREF: sub_4052E0+105↑j
.text:00405737                                         ; DATA XREF: sub_4052E0:jpt_4053E5↑o
.text:00405737                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004053E5 case 39
.text:0040573C                 jz      short loc_4056EB ; jumptable 00405AB2 cases 91,92,94,96,124
.text:0040573E                 cmp     [esp+4Ch+arg_10], 2
.text:00405743                 jnz     def_4057E2      ; jumptable 004053E5 cases 37,43-58,65-90,93,95,97-122
.text:00405743                                         ; jumptable 004057E2 default case, cases 34-38,42-44,46,48-59
.text:00405749                 mov     edx, [esp+4Ch+arg_4]
.text:0040574D                 cmp     [esp+4Ch+var_34], edx
.text:00405751                 jnb     short loc_40575F
.text:00405753                 mov     ecx, [esp+4Ch+arg_0]
.text:00405757                 mov     edi, [esp+4Ch+var_34]
.text:0040575B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040575F
.text:0040575F loc_40575F:                             ; CODE XREF: sub_4052E0+471↑j
.text:0040575F                 inc     [esp+4Ch+var_34]
.text:00405763                 mov     eax, [esp+4Ch+arg_4]
.text:00405767                 cmp     [esp+4Ch+var_34], eax
.text:0040576B                 jnb     short loc_405779
.text:0040576D                 mov     esi, [esp+4Ch+arg_0]
.text:00405771                 mov     edx, [esp+4Ch+var_34]
.text:00405775                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00405779
.text:00405779 loc_405779:                             ; CODE XREF: sub_4052E0+48B↑j
.text:00405779                 inc     [esp+4Ch+var_34]
.text:0040577D                 mov     edi, [esp+4Ch+arg_4]
.text:00405781                 cmp     [esp+4Ch+var_34], edi
.text:00405785                 jnb     short loc_405793
.text:00405787                 mov     ecx, [esp+4Ch+arg_0]
.text:0040578B                 mov     eax, [esp+4Ch+var_34]
.text:0040578F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00405793
.text:00405793 loc_405793:                             ; CODE XREF: sub_4052E0+4A5↑j
.text:00405793                                         ; sub_4052E0+5C4↓j ...
.text:00405793                 inc     [esp+4Ch+var_34]
.text:00405797                 jmp     def_4057E2      ; jumptable 004053E5 cases 37,43-58,65-90,93,95,97-122
.text:00405797                                         ; jumptable 004057E2 default case, cases 34-38,42-44,46,48-59
.text:0040579C ; ---------------------------------------------------------------------------
.text:0040579C
.text:0040579C loc_40579C:                             ; CODE XREF: sub_4052E0+105↑j
.text:0040579C                                         ; DATA XREF: sub_4052E0:jpt_4053E5↑o
.text:0040579C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004053E5 case 63
.text:004057A1                 jz      loc_4056EB      ; jumptable 00405AB2 cases 91,92,94,96,124
.text:004057A7                 cmp     [esp+4Ch+arg_10], 3
.text:004057AC                 jnz     def_4057E2      ; jumptable 004053E5 cases 37,43-58,65-90,93,95,97-122
.text:004057AC                                         ; jumptable 004057E2 default case, cases 34-38,42-44,46,48-59
.text:004057B2                 lea     edx, [ebp+2]
.text:004057B5                 cmp     edx, [esp+4Ch+arg_C]
.text:004057B9                 jnb     def_4057E2      ; jumptable 004053E5 cases 37,43-58,65-90,93,95,97-122
.text:004057B9                                         ; jumptable 004057E2 default case, cases 34-38,42-44,46,48-59
.text:004057BF                 mov     esi, [esp+4Ch+Str]
.text:004057C3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004057C8                 jnz     def_4057E2      ; jumptable 004053E5 cases 37,43-58,65-90,93,95,97-122
.text:004057C8                                         ; jumptable 004057E2 default case, cases 34-38,42-44,46,48-59
.text:004057CE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004057D3                 movsx   eax, cl
.text:004057D6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004057D9                 cmp     eax, 1Dh
.text:004057DC                 ja      def_4057E2      ; jumptable 004053E5 cases 37,43-58,65-90,93,95,97-122
.text:004057DC                                         ; jumptable 004057E2 default case, cases 34-38,42-44,46,48-59
.text:004057E2                 jmp     ds:jpt_4057E2[eax*4] ; switch jump
.text:004057E2 ; ---------------------------------------------------------------------------
.text:004057E9                 align 4
.text:004057EC jpt_4057E2      dd offset loc_405864    ; DATA XREF: sub_4052E0+502↑r
.text:004057EC                 dd offset def_4057E2    ; jump table for switch statement
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset loc_405864
.text:004057EC                 dd offset loc_405864
.text:004057EC                 dd offset loc_405864
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset loc_405864
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset loc_405864
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset def_4057E2
.text:004057EC                 dd offset loc_405864
.text:004057EC                 dd offset loc_405864
.text:004057EC                 dd offset loc_405864
.text:00405864 ; ---------------------------------------------------------------------------
.text:00405864
.text:00405864 loc_405864:                             ; CODE XREF: sub_4052E0+502↑j
.text:00405864                                         ; DATA XREF: sub_4052E0:jpt_4057E2↑o
.text:00405864                 mov     ebp, edx        ; jumptable 004057E2 cases 33,39-41,45,47,60-62
.text:00405866                 mov     bl, cl
.text:00405868                 mov     edx, [esp+4Ch+arg_4]
.text:0040586C                 cmp     [esp+4Ch+var_34], edx
.text:00405870                 jnb     short loc_40587E
.text:00405872                 mov     ecx, [esp+4Ch+arg_0]
.text:00405876                 mov     edi, [esp+4Ch+var_34]
.text:0040587A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040587E
.text:0040587E loc_40587E:                             ; CODE XREF: sub_4052E0+590↑j
.text:0040587E                 inc     [esp+4Ch+var_34]
.text:00405882                 mov     eax, [esp+4Ch+arg_4]
.text:00405886                 cmp     [esp+4Ch+var_34], eax
.text:0040588A                 jnb     short loc_405898
.text:0040588C                 mov     edx, [esp+4Ch+arg_0]
.text:00405890                 mov     esi, [esp+4Ch+var_34]
.text:00405894                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00405898
.text:00405898 loc_405898:                             ; CODE XREF: sub_4052E0+5AA↑j
.text:00405898                 inc     [esp+4Ch+var_34]
.text:0040589C                 mov     edi, [esp+4Ch+arg_4]
.text:004058A0                 cmp     [esp+4Ch+var_34], edi
.text:004058A4                 jnb     loc_405793
.text:004058AA                 mov     eax, [esp+4Ch+arg_0]
.text:004058AE                 mov     ecx, [esp+4Ch+var_34]
.text:004058B2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:004058B6                 jmp     loc_405793
.text:004058B6 ; ---------------------------------------------------------------------------
.text:004058BB                 align 10h
.text:004058C0
.text:004058C0 def_4053E5:                             ; CODE XREF: sub_4052E0+FF↑j
.text:004058C0                                         ; sub_4052E0+105↑j
.text:004058C0                                         ; DATA XREF: ...
.text:004058C0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004053E5 default case, cases 1-6,14-31,64
.text:004058C5                 jz      loc_4059F0
.text:004058CB                 mov     [esp+4Ch+var_28], 1
.text:004058D3                 mov     esi, ds:__mb_cur_max
.text:004058D9                 movzx   edx, bl
.text:004058DC                 cmp     dword ptr [esi], 1
.text:004058DF                 jz      loc_4059D4
.text:004058E5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004058ED                 mov     [esp+4Ch+C], edx ; C
.text:004058F0                 call    _isctype
.text:004058F5
.text:004058F5 loc_4058F5:                             ; CODE XREF: sub_4052E0+705↓j
.text:004058F5                 test    eax, eax
.text:004058F7                 setnz   [esp+4Ch+var_29]
.text:004058FC
.text:004058FC loc_4058FC:                             ; CODE XREF: sub_4052E0+7A5↓j
.text:004058FC                 cmp     [esp+4Ch+var_21], 0
.text:00405901                 lea     eax, [ebp+1]
.text:00405904                 jz      loc_4056A0
.text:0040590A                 cmp     [esp+4Ch+var_29], 0
.text:0040590F                 jnz     def_4057E2      ; jumptable 004053E5 cases 37,43-58,65-90,93,95,97-122
.text:0040590F                                         ; jumptable 004057E2 default case, cases 34-38,42-44,46,48-59
.text:00405915
.text:00405915 loc_405915:                             ; CODE XREF: sub_4052E0+7AB↓j
.text:00405915                 mov     eax, [esp+4Ch+var_28]
.text:00405919                 lea     edx, [eax+ebp]
.text:0040591C                 lea     esi, [esi+0]
.text:00405920
.text:00405920 loc_405920:                             ; CODE XREF: sub_4052E0+6EF↓j
.text:00405920                 cmp     [esp+4Ch+var_21], 0
.text:00405925                 jz      short loc_4059A0
.text:00405927                 cmp     [esp+4Ch+var_29], 0
.text:0040592C                 jnz     short loc_4059A0
.text:0040592E                 mov     edi, [esp+4Ch+arg_4]
.text:00405932                 cmp     [esp+4Ch+var_34], edi
.text:00405936                 jnb     short loc_405944
.text:00405938                 mov     esi, [esp+4Ch+arg_0]
.text:0040593C                 mov     eax, [esp+4Ch+var_34]
.text:00405940                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00405944
.text:00405944 loc_405944:                             ; CODE XREF: sub_4052E0+656↑j
.text:00405944                 inc     [esp+4Ch+var_34]
.text:00405948                 mov     ecx, [esp+4Ch+arg_4]
.text:0040594C                 cmp     [esp+4Ch+var_34], ecx
.text:00405950                 jnb     short loc_405965
.text:00405952                 mov     cl, bl
.text:00405954                 mov     esi, [esp+4Ch+arg_0]
.text:00405958                 mov     edi, [esp+4Ch+var_34]
.text:0040595C                 shr     cl, 6
.text:0040595F                 add     cl, 30h ; '0'
.text:00405962                 mov     [edi+esi], cl
.text:00405965
.text:00405965 loc_405965:                             ; CODE XREF: sub_4052E0+670↑j
.text:00405965                 inc     [esp+4Ch+var_34]
.text:00405969                 mov     edi, [esp+4Ch+arg_4]
.text:0040596D                 cmp     [esp+4Ch+var_34], edi
.text:00405971                 jnb     short loc_405989
.text:00405973                 mov     cl, bl
.text:00405975                 mov     esi, [esp+4Ch+arg_0]
.text:00405979                 shr     cl, 3
.text:0040597C                 mov     edi, [esp+4Ch+var_34]
.text:00405980                 and     cl, 7
.text:00405983                 add     cl, 30h ; '0'
.text:00405986                 mov     [edi+esi], cl
.text:00405989
.text:00405989 loc_405989:                             ; CODE XREF: sub_4052E0+691↑j
.text:00405989                 inc     [esp+4Ch+var_34]
.text:0040598D                 and     bl, 7
.text:00405990                 add     bl, 30h ; '0'
.text:00405993                 lea     esi, [esi+0]
.text:00405999                 lea     edi, [edi+0]
.text:004059A0
.text:004059A0 loc_4059A0:                             ; CODE XREF: sub_4052E0+645↑j
.text:004059A0                                         ; sub_4052E0+64C↑j
.text:004059A0                 lea     eax, [ebp+1]
.text:004059A3                 cmp     edx, eax
.text:004059A5                 jbe     loc_4056A0
.text:004059AB                 mov     ebp, [esp+4Ch+arg_4]
.text:004059AF                 cmp     [esp+4Ch+var_34], ebp
.text:004059B3                 jnb     short loc_4059C0
.text:004059B5                 mov     ecx, [esp+4Ch+arg_0]
.text:004059B9                 mov     edi, [esp+4Ch+var_34]
.text:004059BD                 mov     [edi+ecx], bl
.text:004059C0
.text:004059C0 loc_4059C0:                             ; CODE XREF: sub_4052E0+6D3↑j
.text:004059C0                 inc     [esp+4Ch+var_34]
.text:004059C4                 mov     ebp, eax
.text:004059C6                 mov     eax, [esp+4Ch+Str]
.text:004059CA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:004059CF                 jmp     loc_405920
.text:004059D4 ; ---------------------------------------------------------------------------
.text:004059D4
.text:004059D4 loc_4059D4:                             ; CODE XREF: sub_4052E0+5FF↑j
.text:004059D4                 mov     ecx, ds:_pctype
.text:004059DA                 mov     edi, [ecx]
.text:004059DC                 movzx   eax, word ptr [edi+edx*2]
.text:004059E0                 and     eax, 157h
.text:004059E5                 jmp     loc_4058F5
.text:004059E5 ; ---------------------------------------------------------------------------
.text:004059EA                 align 10h
.text:004059F0
.text:004059F0 loc_4059F0:                             ; CODE XREF: sub_4052E0+5E5↑j
.text:004059F0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004059F5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004059FD                 mov     [esp+4Ch+var_28], 0
.text:00405A05                 mov     [esp+4Ch+var_29], 1
.text:00405A0A                 jz      loc_405B9C
.text:00405A10
.text:00405A10 loc_405A10:                             ; CODE XREF: sub_4052E0+8CC↓j
.text:00405A10                 mov     ecx, [esp+4Ch+arg_C]
.text:00405A14                 lea     edx, [esp+4Ch+var_18]
.text:00405A18                 mov     edi, [esp+4Ch+Str]
.text:00405A1C                 mov     [esp+4Ch+State], edx ; State
.text:00405A20                 lea     esi, [esp+4Ch+var_18._State]
.text:00405A24                 sub     ecx, ebp
.text:00405A26                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00405A2A                 add     edi, ebp
.text:00405A2C                 mov     [esp+4Ch+var_30], edi
.text:00405A30                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00405A34                 mov     [esp+4Ch+C], esi ; DstCh
.text:00405A37                 call    mbrtowc
.text:00405A3C                 test    eax, eax
.text:00405A3E                 mov     edi, eax
.text:00405A40                 jz      short loc_405A80
.text:00405A42                 cmp     eax, 0FFFFFFFFh
.text:00405A45                 jz      loc_405B92
.text:00405A4B                 cmp     eax, 0FFFFFFFEh
.text:00405A4E                 jz      loc_405B52
.text:00405A54                 cmp     [esp+4Ch+arg_10], 1
.text:00405A59                 jz      short loc_405A90
.text:00405A5B
.text:00405A5B loc_405A5B:                             ; CODE XREF: sub_4052E0+7B9↓j
.text:00405A5B                                         ; sub_4052E0+86D↓j
.text:00405A5B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00405A60                 mov     [esp+4Ch+Type], 157h ; Type
.text:00405A68                 mov     [esp+4Ch+C], ecx ; C
.text:00405A6B                 call    iswctype
.text:00405A70                 test    eax, eax
.text:00405A72                 jnz     short loc_405A79
.text:00405A74                 mov     [esp+4Ch+var_29], 0
.text:00405A79
.text:00405A79 loc_405A79:                             ; CODE XREF: sub_4052E0+792↑j
.text:00405A79                 mov     [esp+4Ch+var_28], edi
.text:00405A7D                 lea     esi, [esi+0]
.text:00405A80
.text:00405A80 loc_405A80:                             ; CODE XREF: sub_4052E0+760↑j
.text:00405A80                                         ; sub_4052E0+87B↓j ...
.text:00405A80                 cmp     [esp+4Ch+var_28], 1
.text:00405A85                 jbe     loc_4058FC
.text:00405A8B                 jmp     loc_405915
.text:00405A90 ; ---------------------------------------------------------------------------
.text:00405A90
.text:00405A90 loc_405A90:                             ; CODE XREF: sub_4052E0+779↑j
.text:00405A90                 cmp     [esp+4Ch+arg_10], eax
.text:00405A94                 mov     edx, 1
.text:00405A99                 jnb     short loc_405A5B
.text:00405A9B
.text:00405A9B loc_405A9B:                             ; CODE XREF: sub_4052E0+867↓j
.text:00405A9B                 mov     ecx, [esp+4Ch+Str]
.text:00405A9F                 lea     esi, [edx+ebp]
.text:00405AA2                 movsx   eax, byte ptr [esi+ecx]
.text:00405AA6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00405AA9                 cmp     eax, 21h
.text:00405AAC                 ja      def_405AB2      ; jumptable 00405AB2 default case, cases 93,95,97-123
.text:00405AB2                 jmp     ds:jpt_405AB2[eax*4] ; switch jump
.text:00405AB2 ; ---------------------------------------------------------------------------
.text:00405AB9                 align 4
.text:00405ABC jpt_405AB2      dd offset loc_4056EB    ; DATA XREF: sub_4052E0+7D2↑r
.text:00405ABC                 dd offset loc_4056EB    ; jump table for switch statement
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset loc_4056EB
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset loc_4056EB
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset def_405AB2
.text:00405ABC                 dd offset loc_4056EB
.text:00405B44 ; ---------------------------------------------------------------------------
.text:00405B44
.text:00405B44 def_405AB2:                             ; CODE XREF: sub_4052E0+7CC↑j
.text:00405B44                                         ; sub_4052E0+7D2↑j
.text:00405B44                                         ; DATA XREF: ...
.text:00405B44                 inc     edx             ; jumptable 00405AB2 default case, cases 93,95,97-123
.text:00405B45                 cmp     edx, edi
.text:00405B47                 jb      loc_405A9B
.text:00405B4D                 jmp     loc_405A5B
.text:00405B52 ; ---------------------------------------------------------------------------
.text:00405B52
.text:00405B52 loc_405B52:                             ; CODE XREF: sub_4052E0+76E↑j
.text:00405B52                 cmp     ebp, [esp+4Ch+arg_C]
.text:00405B56                 mov     [esp+4Ch+var_29], 0
.text:00405B5B                 jnb     loc_405A80
.text:00405B61                 mov     eax, [esp+4Ch+var_30]
.text:00405B65                 cmp     byte ptr [eax], 0
.text:00405B68                 jz      loc_405A80
.text:00405B6E
.text:00405B6E loc_405B6E:                             ; CODE XREF: sub_4052E0+8AB↓j
.text:00405B6E                 inc     [esp+4Ch+var_28]
.text:00405B72                 mov     esi, [esp+4Ch+var_28]
.text:00405B76                 lea     eax, [esi+ebp]
.text:00405B79                 cmp     eax, [esp+4Ch+arg_C]
.text:00405B7D                 jnb     loc_405A80
.text:00405B83                 mov     edi, [esp+4Ch+Str]
.text:00405B87                 cmp     byte ptr [eax+edi], 0
.text:00405B8B                 jnz     short loc_405B6E
.text:00405B8D                 jmp     loc_405A80
.text:00405B92 ; ---------------------------------------------------------------------------
.text:00405B92
.text:00405B92 loc_405B92:                             ; CODE XREF: sub_4052E0+765↑j
.text:00405B92                 mov     [esp+4Ch+var_29], 0
.text:00405B97                 jmp     loc_405A80
.text:00405B9C ; ---------------------------------------------------------------------------
.text:00405B9C
.text:00405B9C loc_405B9C:                             ; CODE XREF: sub_4052E0+72A↑j
.text:00405B9C                 mov     edx, [esp+4Ch+Str]
.text:00405BA0                 mov     [esp+4Ch+C], edx ; Str
.text:00405BA3                 call    strlen
.text:00405BA8                 mov     [esp+4Ch+arg_C], eax
.text:00405BAC                 jmp     loc_405A10
.text:00405BB1 ; ---------------------------------------------------------------------------
.text:00405BB1
.text:00405BB1 loc_405BB1:                             ; CODE XREF: sub_4052E0+105↑j
.text:00405BB1                                         ; DATA XREF: sub_4052E0:jpt_4053E5↑o
.text:00405BB1                 mov     dl, bl          ; jumptable 004053E5 case 92
.text:00405BB3                 jmp     loc_4056E4
.text:00405BB8 ; ---------------------------------------------------------------------------
.text:00405BB8
.text:00405BB8 loc_405BB8:                             ; CODE XREF: sub_4052E0+105↑j
.text:00405BB8                                         ; sub_4052E0+902↓j
.text:00405BB8                                         ; DATA XREF: ...
.text:00405BB8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004053E5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00405BBD                 jnz     def_4057E2      ; jumptable 004053E5 cases 37,43-58,65-90,93,95,97-122
.text:00405BBD                                         ; jumptable 004057E2 default case, cases 34-38,42-44,46,48-59
.text:00405BC3                 jmp     loc_4056EB      ; jumptable 00405AB2 cases 91,92,94,96,124
.text:00405BC8 ; ---------------------------------------------------------------------------
.text:00405BC8
.text:00405BC8 loc_405BC8:                             ; CODE XREF: sub_4052E0+105↑j
.text:00405BC8                                         ; DATA XREF: sub_4052E0:jpt_4053E5↑o
.text:00405BC8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004053E5 cases 123,125
.text:00405BCD                 jz      short loc_405BE4
.text:00405BCF                 cmp     [esp+4Ch+arg_C], 1
.text:00405BD4
.text:00405BD4 loc_405BD4:                             ; CODE XREF: sub_4052E0+90C↓j
.text:00405BD4                 jnz     def_4057E2      ; jumptable 004053E5 cases 37,43-58,65-90,93,95,97-122
.text:00405BD4                                         ; jumptable 004057E2 default case, cases 34-38,42-44,46,48-59
.text:00405BDA
.text:00405BDA loc_405BDA:                             ; CODE XREF: sub_4052E0+105↑j
.text:00405BDA                                         ; DATA XREF: sub_4052E0:jpt_4053E5↑o
.text:00405BDA                 test    ebp, ebp        ; jumptable 004053E5 cases 35,126
.text:00405BDC                 jnz     def_4057E2      ; jumptable 004053E5 cases 37,43-58,65-90,93,95,97-122
.text:00405BDC                                         ; jumptable 004057E2 default case, cases 34-38,42-44,46,48-59
.text:00405BE2                 jmp     short loc_405BB8 ; jumptable 004053E5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00405BE4 ; ---------------------------------------------------------------------------
.text:00405BE4
.text:00405BE4 loc_405BE4:                             ; CODE XREF: sub_4052E0+8ED↑j
.text:00405BE4                 mov     esi, [esp+4Ch+Str]
.text:00405BE8                 cmp     byte ptr [esi+1], 0
.text:00405BEC                 jmp     short loc_405BD4
.text:00405BEE ; ---------------------------------------------------------------------------
.text:00405BEE
.text:00405BEE loc_405BEE:                             ; CODE XREF: sub_4052E0:loc_40537F↑j
.text:00405BEE                 test    ebp, ebp
.text:00405BF0                 jnz     short loc_405BFD
.text:00405BF2                 cmp     [esp+4Ch+arg_10], 1
.text:00405BF7                 jz      loc_4056EB      ; jumptable 00405AB2 cases 91,92,94,96,124
.text:00405BFD
.text:00405BFD loc_405BFD:                             ; CODE XREF: sub_4052E0+910↑j
.text:00405BFD                 mov     esi, [esp+4Ch+var_1C]
.text:00405C01                 test    esi, esi
.text:00405C03                 jz      short loc_405C38
.text:00405C05                 mov     edi, [esp+4Ch+var_1C]
.text:00405C09                 movzx   eax, byte ptr [edi]
.text:00405C0C                 test    al, al
.text:00405C0E                 jz      short loc_405C38
.text:00405C10
.text:00405C10 loc_405C10:                             ; CODE XREF: sub_4052E0+956↓j
.text:00405C10                 mov     ebp, [esp+4Ch+arg_4]
.text:00405C14                 cmp     [esp+4Ch+var_34], ebp
.text:00405C18                 jnb     short loc_405C25
.text:00405C1A                 mov     ecx, [esp+4Ch+arg_0]
.text:00405C1E                 mov     ebx, [esp+4Ch+var_34]
.text:00405C22                 mov     [ebx+ecx], al
.text:00405C25
.text:00405C25 loc_405C25:                             ; CODE XREF: sub_4052E0+938↑j
.text:00405C25                 inc     [esp+4Ch+var_1C]
.text:00405C29                 inc     [esp+4Ch+var_34]
.text:00405C2D                 mov     edx, [esp+4Ch+var_1C]
.text:00405C31                 movzx   eax, byte ptr [edx]
.text:00405C34                 test    al, al
.text:00405C36                 jnz     short loc_405C10
.text:00405C38
.text:00405C38 loc_405C38:                             ; CODE XREF: sub_4052E0+923↑j
.text:00405C38                                         ; sub_4052E0+92E↑j
.text:00405C38                 mov     eax, [esp+4Ch+arg_4]
.text:00405C3C                 cmp     [esp+4Ch+var_34], eax
.text:00405C40                 jnb     short loc_405C4E
.text:00405C42                 mov     edi, [esp+4Ch+arg_0]
.text:00405C46                 mov     esi, [esp+4Ch+var_34]
.text:00405C4A                 mov     byte ptr [esi+edi], 0
.text:00405C4E
.text:00405C4E loc_405C4E:                             ; CODE XREF: sub_4052E0+960↑j
.text:00405C4E                 mov     eax, [esp+4Ch+var_34]
.text:00405C52                 jmp     loc_40571F
.text:00405C57 ; ---------------------------------------------------------------------------
.text:00405C57
.text:00405C57 loc_405C57:                             ; CODE XREF: sub_4052E0+95↑j
.text:00405C57                 mov     ebx, [esp+4Ch+Str]
.text:00405C5B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00405C60                 jmp     loc_40537F
.text:00405C65 ; ---------------------------------------------------------------------------
.text:00405C65
.text:00405C65 loc_405C65:                             ; CODE XREF: sub_4052E0+3D↑j
.text:00405C65                                         ; DATA XREF: sub_4052E0:jpt_40531D↑o
.text:00405C65                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040531D case 2
.text:00405C69                 cmp     [esp+4Ch+var_34], edx
.text:00405C6D                 jnb     short loc_405C76
.text:00405C6F                 mov     ecx, [esp+4Ch+arg_0]
.text:00405C73                 mov     byte ptr [ecx], 27h ; '''
.text:00405C76
.text:00405C76 loc_405C76:                             ; CODE XREF: sub_4052E0+98D↑j
.text:00405C76                 mov     [esp+4Ch+var_34], 1
.text:00405C7E                 mov     [esp+4Ch+var_1C], 4052CEh
.text:00405C86                 jmp     loc_405366
.text:00405C8B ; ---------------------------------------------------------------------------
.text:00405C8B
.text:00405C8B loc_405C8B:                             ; CODE XREF: sub_4052E0+3D↑j
.text:00405C8B                                         ; DATA XREF: sub_4052E0:jpt_40531D↑o
.text:00405C8B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040531D case 4
.text:00405C90                 jmp     def_40531D      ; jumptable 0040531D default case, cases 0,1
.text:00405C95 ; ---------------------------------------------------------------------------
.text:00405C95
.text:00405C95 loc_405C95:                             ; CODE XREF: sub_4052E0+3D↑j
.text:00405C95                                         ; DATA XREF: sub_4052E0:jpt_40531D↑o
.text:00405C95                 mov     [esp+4Ch+C], 4052D0h ; jumptable 0040531D cases 5,6
.text:00405C9C                 call    ds:libintl_gettext
.text:00405CA2                 cmp     eax, 4052D0h
.text:00405CA7                 mov     edi, eax
.text:00405CA9                 jz      short loc_405D20
.text:00405CAB
.text:00405CAB loc_405CAB:                             ; CODE XREF: sub_4052E0+A45↓j
.text:00405CAB                                         ; sub_4052E0+A4C↓j
.text:00405CAB                 mov     [esp+4Ch+C], 4052CEh
.text:00405CB2                 call    ds:libintl_gettext
.text:00405CB8                 cmp     eax, 4052CEh
.text:00405CBD                 mov     edx, eax
.text:00405CBF                 jz      short loc_405D12
.text:00405CC1
.text:00405CC1 loc_405CC1:                             ; CODE XREF: sub_4052E0+A37↓j
.text:00405CC1                                         ; sub_4052E0+A3E↓j
.text:00405CC1                 mov     [esp+4Ch+var_1C], edi
.text:00405CC5                 cmp     byte ptr [edi], 0
.text:00405CC8                 jz      short loc_405CF8
.text:00405CCA
.text:00405CCA loc_405CCA:                             ; CODE XREF: sub_4052E0+A16↓j
.text:00405CCA                 mov     ecx, [esp+4Ch+arg_4]
.text:00405CCE                 cmp     [esp+4Ch+var_34], ecx
.text:00405CD2                 jnb     short loc_405CE7
.text:00405CD4                 mov     ebp, [esp+4Ch+var_1C]
.text:00405CD8                 mov     edi, [esp+4Ch+arg_0]
.text:00405CDC                 mov     esi, [esp+4Ch+var_34]
.text:00405CE0                 movzx   ebx, byte ptr [ebp+0]
.text:00405CE4                 mov     [esi+edi], bl
.text:00405CE7
.text:00405CE7 loc_405CE7:                             ; CODE XREF: sub_4052E0+9F2↑j
.text:00405CE7                 inc     [esp+4Ch+var_1C]
.text:00405CEB                 inc     [esp+4Ch+var_34]
.text:00405CEF                 mov     eax, [esp+4Ch+var_1C]
.text:00405CF3                 cmp     byte ptr [eax], 0
.text:00405CF6                 jnz     short loc_405CCA
.text:00405CF8
.text:00405CF8 loc_405CF8:                             ; CODE XREF: sub_4052E0+9E8↑j
.text:00405CF8                 mov     [esp+4Ch+var_21], 1
.text:00405CFD                 mov     [esp+4Ch+var_1C], edx
.text:00405D01                 mov     [esp+4Ch+C], edx ; Str
.text:00405D04                 call    strlen
.text:00405D09                 mov     [esp+4Ch+var_20], eax
.text:00405D0D                 jmp     def_40531D      ; jumptable 0040531D default case, cases 0,1
.text:00405D12 ; ---------------------------------------------------------------------------
.text:00405D12
.text:00405D12 loc_405D12:                             ; CODE XREF: sub_4052E0+9DF↑j
.text:00405D12                 cmp     [esp+4Ch+arg_10], 6
.text:00405D17                 jnz     short loc_405CC1
.text:00405D19                 mov     edx, offset asc_4052CC ; "\"'`"
.text:00405D1E                 jmp     short loc_405CC1
.text:00405D20 ; ---------------------------------------------------------------------------
.text:00405D20
.text:00405D20 loc_405D20:                             ; CODE XREF: sub_4052E0+9C9↑j
.text:00405D20                 cmp     [esp+4Ch+arg_10], 6
.text:00405D25                 jnz     short loc_405CAB
.text:00405D27                 mov     edi, offset asc_4052CC ; "\"'`"
.text:00405D2C                 jmp     loc_405CAB
.text:00405D2C sub_4052E0      endp
.text:00405D2C
.text:00405D31 ; ---------------------------------------------------------------------------
.text:00405D31                 jmp     short loc_405D40
.text:00405D31 ; ---------------------------------------------------------------------------
.text:00405D33                 align 10h
.text:00405D40
.text:00405D40 loc_405D40:                             ; CODE XREF: .text:00405D31↑j
.text:00405D40                 sub     esp, 0Ch
.text:00405D43                 mov     [esp+4], ebx
.text:00405D47                 mov     [esp+8], esi
.text:00405D4B                 call    _errno
.text:00405D50                 mov     esi, [eax]
.text:00405D52                 mov     dword ptr [esp], 24h ; '$'
.text:00405D59                 call    sub_406630
.text:00405D5E                 mov     edx, [esp+10h]
.text:00405D62                 mov     ebx, eax
.text:00405D64                 test    edx, edx
.text:00405D66                 jz      short loc_405DB1
.text:00405D68
.text:00405D68 loc_405D68:                             ; CODE XREF: .text:00405DB6↓j
.text:00405D68                 mov     ecx, [edx]
.text:00405D6A                 mov     [ebx], ecx
.text:00405D6C                 mov     ecx, [edx+4]
.text:00405D6F                 mov     [ebx+4], ecx
.text:00405D72                 mov     ecx, [edx+8]
.text:00405D75                 mov     [ebx+8], ecx
.text:00405D78                 mov     ecx, [edx+0Ch]
.text:00405D7B                 mov     [ebx+0Ch], ecx
.text:00405D7E                 mov     ecx, [edx+10h]
.text:00405D81                 mov     [ebx+10h], ecx
.text:00405D84                 mov     ecx, [edx+14h]
.text:00405D87                 mov     [ebx+14h], ecx
.text:00405D8A                 mov     ecx, [edx+18h]
.text:00405D8D                 mov     [ebx+18h], ecx
.text:00405D90                 mov     ecx, [edx+1Ch]
.text:00405D93                 mov     [ebx+1Ch], ecx
.text:00405D96                 mov     ecx, [edx+20h]
.text:00405D99                 mov     [ebx+20h], ecx
.text:00405D9C                 call    _errno
.text:00405DA1                 mov     [eax], esi
.text:00405DA3                 mov     esi, [esp+8]
.text:00405DA7                 mov     eax, ebx
.text:00405DA9                 mov     ebx, [esp+4]
.text:00405DAD                 add     esp, 0Ch
.text:00405DB0                 retn
.text:00405DB1 ; ---------------------------------------------------------------------------
.text:00405DB1
.text:00405DB1 loc_405DB1:                             ; CODE XREF: .text:00405D66↑j
.text:00405DB1                 mov     edx, offset dword_411140
.text:00405DB6                 jmp     short loc_405D68
.text:00405DB6 ; ---------------------------------------------------------------------------
.text:00405DB8                 align 10h
.text:00405DC0                 mov     eax, [esp+4]
.text:00405DC4                 test    eax, eax
.text:00405DC6                 jz      short loc_405DD0
.text:00405DC8
.text:00405DC8 loc_405DC8:                             ; CODE XREF: .text:00405DD5↓j
.text:00405DC8                 mov     eax, [eax]
.text:00405DCA                 retn
.text:00405DCA ; ---------------------------------------------------------------------------
.text:00405DCB                 align 10h
.text:00405DD0
.text:00405DD0 loc_405DD0:                             ; CODE XREF: .text:00405DC6↑j
.text:00405DD0                 mov     eax, offset dword_411140
.text:00405DD5                 jmp     short loc_405DC8
.text:00405DD5 ; ---------------------------------------------------------------------------
.text:00405DD7                 align 10h
.text:00405DE0                 mov     edx, [esp+4]
.text:00405DE4                 test    edx, edx
.text:00405DE6                 jz      short loc_405DF0
.text:00405DE8
.text:00405DE8 loc_405DE8:                             ; CODE XREF: .text:00405DF5↓j
.text:00405DE8                 mov     ecx, [esp+8]
.text:00405DEC                 mov     [edx], ecx
.text:00405DEE                 retn
.text:00405DEE ; ---------------------------------------------------------------------------
.text:00405DEF                 align 10h
.text:00405DF0
.text:00405DF0 loc_405DF0:                             ; CODE XREF: .text:00405DE6↑j
.text:00405DF0                 mov     edx, offset dword_411140
.text:00405DF5                 jmp     short loc_405DE8
.text:00405DF5 ; ---------------------------------------------------------------------------
.text:00405DF7                 align 10h
.text:00405E00                 sub     esp, 8
.text:00405E03                 mov     eax, [esp+0Ch]
.text:00405E07                 movzx   ecx, byte ptr [esp+10h]
.text:00405E0C                 mov     [esp], ebx
.text:00405E0F                 mov     ebx, [esp+14h]
.text:00405E13                 mov     [esp+4], esi
.text:00405E17                 mov     dl, cl
.text:00405E19                 shr     dl, 5
.text:00405E1C                 movzx   edx, dl
.text:00405E1F                 shl     edx, 2
.text:00405E22                 test    eax, eax
.text:00405E24                 lea     esi, [edx+eax+4]
.text:00405E28                 jz      short loc_405E50
.text:00405E2A
.text:00405E2A loc_405E2A:                             ; CODE XREF: .text:00405E56↓j
.text:00405E2A                 mov     edx, [esi]
.text:00405E2C                 and     ecx, 1Fh
.text:00405E2F                 and     ebx, 1
.text:00405E32                 mov     eax, edx
.text:00405E34                 shr     eax, cl
.text:00405E36                 and     eax, 1
.text:00405E39                 xor     ebx, eax
.text:00405E3B                 shl     ebx, cl
.text:00405E3D                 xor     edx, ebx
.text:00405E3F                 mov     [esi], edx
.text:00405E41                 mov     ebx, [esp]
.text:00405E44                 mov     esi, [esp+4]
.text:00405E48                 add     esp, 8
.text:00405E4B                 retn
.text:00405E4B ; ---------------------------------------------------------------------------
.text:00405E4C                 align 10h
.text:00405E50
.text:00405E50 loc_405E50:                             ; CODE XREF: .text:00405E28↑j
.text:00405E50                 lea     esi, dword_411144[edx]
.text:00405E56                 jmp     short loc_405E2A
.text:00405E56 ; ---------------------------------------------------------------------------
.text:00405E58                 align 10h
.text:00405E60                 sub     esp, 2Ch
.text:00405E63                 mov     [esp+24h], ebx
.text:00405E67                 mov     ebx, [esp+40h]
.text:00405E6B                 mov     [esp+28h], esi
.text:00405E6F                 test    ebx, ebx
.text:00405E71                 jz      short loc_405EC0
.text:00405E73
.text:00405E73 loc_405E73:                             ; CODE XREF: .text:00405EC5↓j
.text:00405E73                 call    _errno
.text:00405E78                 mov     esi, [eax]
.text:00405E7A                 mov     [esp+14h], ebx
.text:00405E7E                 mov     edx, [ebx]
.text:00405E80                 mov     ecx, [esp+38h]
.text:00405E84                 mov     ebx, [esp+3Ch]
.text:00405E88                 mov     [esp+10h], edx
.text:00405E8C                 mov     edx, [esp+34h]
.text:00405E90                 mov     [esp+0Ch], ebx
.text:00405E94                 mov     [esp+8], ecx
.text:00405E98                 mov     [esp+4], edx
.text:00405E9C                 mov     edx, [esp+30h]
.text:00405EA0                 mov     [esp], edx
.text:00405EA3                 call    sub_4052E0
.text:00405EA8                 mov     ebx, eax
.text:00405EAA                 call    _errno
.text:00405EAF                 mov     [eax], esi
.text:00405EB1                 mov     esi, [esp+28h]
.text:00405EB5                 mov     eax, ebx
.text:00405EB7                 mov     ebx, [esp+24h]
.text:00405EBB                 add     esp, 2Ch
.text:00405EBE                 retn
.text:00405EBE ; ---------------------------------------------------------------------------
.text:00405EBF                 align 10h
.text:00405EC0
.text:00405EC0 loc_405EC0:                             ; CODE XREF: .text:00405E71↑j
.text:00405EC0                 mov     ebx, offset dword_411140
.text:00405EC5                 jmp     short loc_405E73
.text:00405EC5 ; ---------------------------------------------------------------------------
.text:00405EC7                 align 10h
.text:00405ED0                 push    ebp
.text:00405ED1                 push    edi
.text:00405ED2                 push    esi
.text:00405ED3                 push    ebx
.text:00405ED4                 sub     esp, 2Ch
.text:00405ED7                 mov     ebp, [esp+48h]
.text:00405EDB                 call    _errno
.text:00405EE0                 mov     edx, [eax]
.text:00405EE2                 test    ebp, ebp
.text:00405EE4                 mov     ebx, ebp
.text:00405EE6                 mov     [esp+28h], edx
.text:00405EEA                 jz      loc_405FA0
.text:00405EF0
.text:00405EF0 loc_405EF0:                             ; CODE XREF: .text:00405FA5↓j
.text:00405EF0                 call    _errno
.text:00405EF5                 mov     edi, [eax]
.text:00405EF7                 mov     esi, ebp
.text:00405EF9                 mov     [esp+14h], ebx
.text:00405EFD                 mov     ecx, [ebx]
.text:00405EFF                 mov     dword ptr [esp], 0
.text:00405F06                 mov     edx, [esp+44h]
.text:00405F0A                 mov     dword ptr [esp+4], 0
.text:00405F12                 mov     eax, [esp+40h]
.text:00405F16                 mov     [esp+10h], ecx
.text:00405F1A                 mov     [esp+0Ch], edx
.text:00405F1E                 mov     [esp+8], eax
.text:00405F22                 call    sub_4052E0
.text:00405F27                 mov     ebx, eax
.text:00405F29                 call    _errno
.text:00405F2E                 mov     [eax], edi
.text:00405F30                 lea     edi, [ebx+1]
.text:00405F33                 mov     [esp], edi
.text:00405F36                 call    sub_406630
.text:00405F3B                 mov     [esp+24h], eax
.text:00405F3F                 test    ebp, ebp
.text:00405F41                 jz      short loc_405F92
.text:00405F43
.text:00405F43 loc_405F43:                             ; CODE XREF: .text:00405F97↓j
.text:00405F43                 call    _errno
.text:00405F48                 mov     ebp, [eax]
.text:00405F4A                 mov     [esp+14h], esi
.text:00405F4E                 mov     ecx, [esi]
.text:00405F50                 mov     [esp+4], edi
.text:00405F54                 mov     edx, [esp+44h]
.text:00405F58                 mov     esi, [esp+24h]
.text:00405F5C                 mov     [esp+10h], ecx
.text:00405F60                 mov     eax, [esp+40h]
.text:00405F64                 mov     [esp+0Ch], edx
.text:00405F68                 mov     [esp], esi
.text:00405F6B                 mov     [esp+8], eax
.text:00405F6F                 call    sub_4052E0
.text:00405F74                 call    _errno
.text:00405F79                 mov     [eax], ebp
.text:00405F7B                 call    _errno
.text:00405F80                 mov     ebx, [esp+28h]
.text:00405F84                 mov     [eax], ebx
.text:00405F86                 mov     eax, [esp+24h]
.text:00405F8A                 add     esp, 2Ch
.text:00405F8D                 pop     ebx
.text:00405F8E                 pop     esi
.text:00405F8F                 pop     edi
.text:00405F90                 pop     ebp
.text:00405F91                 retn
.text:00405F92 ; ---------------------------------------------------------------------------
.text:00405F92
.text:00405F92 loc_405F92:                             ; CODE XREF: .text:00405F41↑j
.text:00405F92                 mov     esi, offset dword_411140
.text:00405F97                 jmp     short loc_405F43
.text:00405F97 ; ---------------------------------------------------------------------------
.text:00405F99                 align 10h
.text:00405FA0
.text:00405FA0 loc_405FA0:                             ; CODE XREF: .text:00405EEA↑j
.text:00405FA0                 mov     ebx, offset dword_411140
.text:00405FA5                 jmp     loc_405EF0
.text:00405FA5 ; ---------------------------------------------------------------------------
.text:00405FAA                 align 10h
.text:00405FB0                 sub     esp, 1Ch
.text:00405FB3                 mov     edx, [esp+24h]
.text:00405FB7                 mov     dword ptr [esp+0Ch], offset dword_411140
.text:00405FBF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405FC7                 mov     [esp+4], edx
.text:00405FCB                 mov     edx, [esp+20h]
.text:00405FCF                 mov     [esp], edx
.text:00405FD2                 call    sub_406420
.text:00405FD7                 add     esp, 1Ch
.text:00405FDA                 retn
.text:00405FDA ; ---------------------------------------------------------------------------
.text:00405FDB                 align 10h
.text:00405FE0                 sub     esp, 1Ch
.text:00405FE3                 mov     edx, [esp+20h]
.text:00405FE7                 mov     dword ptr [esp+0Ch], offset dword_411140
.text:00405FEF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405FF7                 mov     [esp+4], edx
.text:00405FFB                 mov     dword ptr [esp], 0
.text:00406002                 call    sub_406420
.text:00406007                 add     esp, 1Ch
.text:0040600A                 retn
.text:0040600A ; ---------------------------------------------------------------------------
.text:0040600B                 align 10h
.text:00406010
.text:00406010 ; =============== S U B R O U T I N E =======================================
.text:00406010
.text:00406010
.text:00406010 ; int __cdecl sub_406010(int, int, char *)
.text:00406010 sub_406010      proc near               ; CODE XREF: .text:0040447A↑p
.text:00406010                                         ; sub_404490+1A↑p
.text:00406010
.text:00406010 var_BC          = dword ptr -0BCh
.text:00406010 var_B8          = dword ptr -0B8h
.text:00406010 var_B4          = dword ptr -0B4h
.text:00406010 var_B0          = dword ptr -0B0h
.text:00406010 var_AC          = dword ptr -0ACh
.text:00406010 var_A8          = dword ptr -0A8h
.text:00406010 var_A4          = dword ptr -0A4h
.text:00406010 var_A0          = dword ptr -0A0h
.text:00406010 var_9C          = dword ptr -9Ch
.text:00406010 var_98          = dword ptr -98h
.text:00406010 var_94          = dword ptr -94h
.text:00406010 var_90          = dword ptr -90h
.text:00406010 var_8C          = dword ptr -8Ch
.text:00406010 var_7C          = dword ptr -7Ch
.text:00406010 var_78          = dword ptr -78h
.text:00406010 var_74          = dword ptr -74h
.text:00406010 var_70          = dword ptr -70h
.text:00406010 var_6C          = dword ptr -6Ch
.text:00406010 var_68          = dword ptr -68h
.text:00406010 var_64          = dword ptr -64h
.text:00406010 var_60          = dword ptr -60h
.text:00406010 var_5C          = dword ptr -5Ch
.text:00406010 var_4C          = dword ptr -4Ch
.text:00406010 var_48          = dword ptr -48h
.text:00406010 var_44          = dword ptr -44h
.text:00406010 var_40          = dword ptr -40h
.text:00406010 var_3C          = dword ptr -3Ch
.text:00406010 var_38          = dword ptr -38h
.text:00406010 var_34          = dword ptr -34h
.text:00406010 var_30          = dword ptr -30h
.text:00406010 var_2C          = dword ptr -2Ch
.text:00406010 arg_0           = dword ptr  4
.text:00406010 arg_4           = dword ptr  8
.text:00406010 arg_8           = dword ptr  0Ch
.text:00406010
.text:00406010                 push    ebp
.text:00406011                 xor     eax, eax
.text:00406013                 mov     ecx, 8
.text:00406018                 push    edi
.text:00406019                 push    esi
.text:0040601A                 push    ebx
.text:0040601B                 sub     esp, 0ACh
.text:00406021                 mov     ebp, [esp+0BCh+arg_4]
.text:00406028                 cld
.text:00406029                 lea     edi, [esp+0BCh+var_A8]
.text:0040602D                 mov     [esp+0BCh+var_AC], ebp
.text:00406031                 rep stosd
.text:00406033                 mov     eax, [esp+0BCh+var_8C]
.text:00406037                 mov     edi, [esp+0BCh+var_AC]
.text:0040603B                 mov     esi, [esp+0BCh+var_A8]
.text:0040603F                 mov     [esp+0BCh+var_5C], eax
.text:00406043                 mov     ebp, [esp+0BCh+var_A4]
.text:00406047                 mov     eax, [esp+0BCh+var_AC]
.text:0040604B                 mov     [esp+0BCh+var_7C], edi
.text:0040604F                 mov     ecx, [esp+0BCh+var_94]
.text:00406053                 mov     edi, [esp+0BCh+var_A0]
.text:00406057                 mov     [esp+0BCh+var_78], esi
.text:0040605B                 mov     edx, [esp+0BCh+var_90]
.text:0040605F                 mov     esi, [esp+0BCh+var_9C]
.text:00406063                 mov     [esp+0BCh+var_4C], eax
.text:00406067                 mov     ebx, [esp+0BCh+var_98]
.text:0040606B                 mov     eax, [esp+0BCh+var_A8]
.text:0040606F                 mov     [esp+0BCh+var_74], ebp
.text:00406073                 mov     [esp+0BCh+var_70], edi
.text:00406077                 mov     [esp+0BCh+var_6C], esi
.text:0040607B                 mov     [esp+0BCh+var_68], ebx
.text:0040607F                 mov     [esp+0BCh+var_64], ecx
.text:00406083                 mov     [esp+0BCh+var_60], edx
.text:00406087                 mov     [esp+0BCh+var_48], eax
.text:0040608B                 mov     [esp+0BCh+var_44], ebp
.text:0040608F                 mov     [esp+0BCh+var_40], edi
.text:00406093                 mov     [esp+0BCh+var_3C], esi
.text:0040609A                 mov     [esp+0BCh+var_38], ebx
.text:004060A1                 mov     ebx, [esp+0BCh+var_8C]
.text:004060A5                 mov     [esp+0BCh+var_30], edx
.text:004060AC                 mov     edx, [esp+0BCh+arg_8]
.text:004060B3                 mov     [esp+0BCh+var_34], ecx
.text:004060BA                 lea     ecx, [esp+0BCh+var_4C]
.text:004060BE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:004060C2                 mov     edx, [esp+0BCh+arg_0]
.text:004060C9                 mov     [esp+0BCh+var_2C], ebx
.text:004060D0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:004060D4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:004060DC                 mov     [esp+0BCh+var_BC], edx ; int
.text:004060DF                 call    sub_406420
.text:004060E4                 add     esp, 0ACh
.text:004060EA                 pop     ebx
.text:004060EB                 pop     esi
.text:004060EC                 pop     edi
.text:004060ED                 pop     ebp
.text:004060EE                 retn
.text:004060EE sub_406010      endp
.text:004060EE
.text:004060EE ; ---------------------------------------------------------------------------
.text:004060EF                 align 10h
.text:004060F0                 push    ebp
.text:004060F1                 xor     eax, eax
.text:004060F3                 mov     ecx, 8
.text:004060F8                 push    edi
.text:004060F9                 push    esi
.text:004060FA                 push    ebx
.text:004060FB                 sub     esp, 0ACh
.text:00406101                 mov     edx, [esp+0C4h]
.text:00406108                 cld
.text:00406109                 lea     edi, [esp+14h]
.text:0040610D                 mov     [esp+10h], edx
.text:00406111                 rep stosd
.text:00406113                 mov     eax, [esp+30h]
.text:00406117                 mov     ebp, [esp+10h]
.text:0040611B                 mov     edi, [esp+14h]
.text:0040611F                 mov     [esp+60h], eax
.text:00406123                 mov     esi, [esp+20h]
.text:00406127                 mov     eax, [esp+10h]
.text:0040612B                 mov     [esp+40h], ebp
.text:0040612F                 mov     ecx, [esp+28h]
.text:00406133                 mov     ebp, [esp+18h]
.text:00406137                 mov     [esp+44h], edi
.text:0040613B                 mov     edx, [esp+2Ch]
.text:0040613F                 mov     edi, [esp+1Ch]
.text:00406143                 mov     [esp+70h], eax
.text:00406147                 mov     ebx, [esp+24h]
.text:0040614B                 mov     eax, [esp+14h]
.text:0040614F                 mov     [esp+48h], ebp
.text:00406153                 mov     [esp+4Ch], edi
.text:00406157                 mov     [esp+50h], esi
.text:0040615B                 mov     [esp+54h], ebx
.text:0040615F                 mov     [esp+58h], ecx
.text:00406163                 mov     [esp+5Ch], edx
.text:00406167                 mov     [esp+74h], eax
.text:0040616B                 mov     [esp+78h], ebp
.text:0040616F                 mov     [esp+7Ch], edi
.text:00406173                 mov     [esp+80h], esi
.text:0040617A                 mov     [esp+84h], ebx
.text:00406181                 mov     esi, [esp+30h]
.text:00406185                 lea     ebx, [esp+70h]
.text:00406189                 mov     [esp+8Ch], edx
.text:00406190                 mov     edx, [esp+0C8h]
.text:00406197                 mov     [esp+88h], ecx
.text:0040619E                 mov     ecx, [esp+0CCh]
.text:004061A5                 mov     [esp+4], edx
.text:004061A9                 mov     edx, [esp+0C0h]
.text:004061B0                 mov     [esp+90h], esi
.text:004061B7                 mov     [esp+0Ch], ebx
.text:004061BB                 mov     [esp+8], ecx
.text:004061BF                 mov     [esp], edx
.text:004061C2                 call    sub_406420
.text:004061C7                 add     esp, 0ACh
.text:004061CD                 pop     ebx
.text:004061CE                 pop     esi
.text:004061CF                 pop     edi
.text:004061D0                 pop     ebp
.text:004061D1                 retn
.text:004061D1 ; ---------------------------------------------------------------------------
.text:004061D2                 align 10h
.text:004061E0                 push    ebp
.text:004061E1                 xor     eax, eax
.text:004061E3                 mov     ecx, 8
.text:004061E8                 push    edi
.text:004061E9                 push    esi
.text:004061EA                 push    ebx
.text:004061EB                 sub     esp, 0ACh
.text:004061F1                 mov     edi, [esp+0C0h]
.text:004061F8                 cld
.text:004061F9                 mov     [esp+10h], edi
.text:004061FD                 lea     edi, [esp+14h]
.text:00406201                 rep stosd
.text:00406203                 mov     eax, [esp+30h]
.text:00406207                 mov     esi, [esp+10h]
.text:0040620B                 mov     ebx, [esp+14h]
.text:0040620F                 mov     [esp+60h], eax
.text:00406213                 mov     ebp, [esp+18h]
.text:00406217                 mov     eax, [esp+10h]
.text:0040621B                 mov     [esp+40h], esi
.text:0040621F                 mov     edi, [esp+1Ch]
.text:00406223                 mov     esi, [esp+20h]
.text:00406227                 mov     [esp+44h], ebx
.text:0040622B                 mov     ecx, [esp+28h]
.text:0040622F                 mov     edx, [esp+2Ch]
.text:00406233                 mov     [esp+70h], eax
.text:00406237                 mov     ebx, [esp+24h]
.text:0040623B                 mov     eax, [esp+14h]
.text:0040623F                 mov     [esp+48h], ebp
.text:00406243                 mov     [esp+4Ch], edi
.text:00406247                 mov     [esp+50h], esi
.text:0040624B                 mov     [esp+54h], ebx
.text:0040624F                 mov     [esp+58h], ecx
.text:00406253                 mov     [esp+5Ch], edx
.text:00406257                 mov     [esp+74h], eax
.text:0040625B                 mov     [esp+78h], ebp
.text:0040625F                 mov     [esp+7Ch], edi
.text:00406263                 mov     [esp+80h], esi
.text:0040626A                 mov     [esp+84h], ebx
.text:00406271                 mov     [esp+8Ch], edx
.text:00406278                 lea     edx, [esp+70h]
.text:0040627C                 mov     [esp+88h], ecx
.text:00406283                 mov     ecx, [esp+30h]
.text:00406287                 mov     [esp+0Ch], edx
.text:0040628B                 mov     edx, [esp+0C4h]
.text:00406292                 mov     [esp+90h], ecx
.text:00406299                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004062A1                 mov     [esp+4], edx
.text:004062A5                 mov     dword ptr [esp], 0
.text:004062AC                 call    sub_406420
.text:004062B1                 add     esp, 0ACh
.text:004062B7                 pop     ebx
.text:004062B8                 pop     esi
.text:004062B9                 pop     edi
.text:004062BA                 pop     ebp
.text:004062BB                 retn
.text:004062BB ; ---------------------------------------------------------------------------
.text:004062BC                 align 10h
.text:004062C0                 push    edi
.text:004062C1                 push    esi
.text:004062C2                 push    ebx
.text:004062C3                 sub     esp, 40h
.text:004062C6                 mov     edx, ds:dword_41114C
.text:004062CC                 mov     ebx, ds:dword_411140
.text:004062D2                 mov     esi, ds:dword_411148
.text:004062D8                 mov     edi, ds:dword_411144
.text:004062DE                 mov     [esp+1Ch], edx
.text:004062E2                 mov     ecx, ds:dword_411150
.text:004062E8                 mov     edx, ds:dword_411160
.text:004062EE                 mov     [esp+10h], ebx
.text:004062F2                 mov     ebx, ds:dword_411154
.text:004062F8                 mov     [esp+30h], edx
.text:004062FC                 movzx   edx, byte ptr [esp+54h]
.text:00406301                 mov     [esp+18h], esi
.text:00406305                 mov     esi, ds:dword_41115C
.text:0040630B                 mov     [esp+14h], edi
.text:0040630F                 mov     edi, ds:dword_411158
.text:00406315                 mov     [esp+20h], ecx
.text:00406319                 mov     cl, dl
.text:0040631B                 shr     cl, 5
.text:0040631E                 mov     [esp+24h], ebx
.text:00406322                 movzx   ebx, cl
.text:00406325                 mov     [esp+2Ch], esi
.text:00406329                 lea     esi, [esp+10h]
.text:0040632D                 mov     [esp+28h], edi
.text:00406331                 lea     edi, [esi+ebx*4]
.text:00406334                 mov     ebx, edx
.text:00406336                 mov     edx, [edi+4]
.text:00406339                 and     ebx, 1Fh
.text:0040633C                 mov     cl, bl
.text:0040633E                 mov     eax, edx
.text:00406340                 shr     eax, cl
.text:00406342                 and     eax, 1
.text:00406345                 xor     eax, 1
.text:00406348                 shl     eax, cl
.text:0040634A                 xor     edx, eax
.text:0040634C                 mov     [edi+4], edx
.text:0040634F                 mov     edx, [esp+50h]
.text:00406353                 mov     [esp+0Ch], esi
.text:00406357                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040635F                 mov     [esp+4], edx
.text:00406363                 mov     dword ptr [esp], 0
.text:0040636A                 call    sub_406420
.text:0040636F                 add     esp, 40h
.text:00406372                 pop     ebx
.text:00406373                 pop     esi
.text:00406374                 pop     edi
.text:00406375                 retn
.text:00406375 ; ---------------------------------------------------------------------------
.text:00406376                 align 10h
.text:00406380
.text:00406380 ; =============== S U B R O U T I N E =======================================
.text:00406380
.text:00406380
.text:00406380 ; int __cdecl sub_406380(char *)
.text:00406380 sub_406380      proc near               ; CODE XREF: sub_404B90+64↑p
.text:00406380
.text:00406380 var_4C          = dword ptr -4Ch
.text:00406380 var_48          = dword ptr -48h
.text:00406380 var_44          = dword ptr -44h
.text:00406380 var_40          = dword ptr -40h
.text:00406380 var_3C          = dword ptr -3Ch
.text:00406380 var_38          = dword ptr -38h
.text:00406380 var_34          = dword ptr -34h
.text:00406380 var_30          = dword ptr -30h
.text:00406380 var_2C          = dword ptr -2Ch
.text:00406380 var_28          = dword ptr -28h
.text:00406380 var_24          = dword ptr -24h
.text:00406380 var_20          = dword ptr -20h
.text:00406380 var_1C          = dword ptr -1Ch
.text:00406380 arg_0           = dword ptr  4
.text:00406380
.text:00406380                 sub     esp, 4Ch
.text:00406383                 mov     ecx, ds:dword_411140
.text:00406389                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00406391                 mov     edx, ds:dword_411144
.text:00406397                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040639E                 mov     [esp+4Ch+var_3C], ecx
.text:004063A2                 mov     ecx, ds:dword_41114C
.text:004063A8                 mov     [esp+4Ch+var_38], edx
.text:004063AC                 mov     edx, ds:dword_411148
.text:004063B2                 mov     [esp+4Ch+var_30], ecx
.text:004063B6                 mov     ecx, ds:dword_411150
.text:004063BC                 mov     eax, edx
.text:004063BE                 shr     eax, 1Ah
.text:004063C1                 and     eax, 1
.text:004063C4                 xor     eax, 1
.text:004063C7                 mov     [esp+4Ch+var_2C], ecx
.text:004063CB                 shl     eax, 1Ah
.text:004063CE                 mov     ecx, ds:dword_411154
.text:004063D4                 xor     edx, eax
.text:004063D6                 mov     [esp+4Ch+var_34], edx
.text:004063DA                 mov     edx, [esp+4Ch+arg_0]
.text:004063DE                 mov     [esp+4Ch+var_28], ecx
.text:004063E2                 mov     ecx, ds:dword_411158
.text:004063E8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004063EC                 mov     [esp+4Ch+var_24], ecx
.text:004063F0                 mov     ecx, ds:dword_41115C
.text:004063F6                 mov     [esp+4Ch+var_20], ecx
.text:004063FA                 mov     ecx, ds:dword_411160
.text:00406400                 mov     [esp+4Ch+var_1C], ecx
.text:00406404                 lea     ecx, [esp+4Ch+var_3C]
.text:00406408                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040640C                 call    sub_406420
.text:00406411                 add     esp, 4Ch
.text:00406414                 retn
.text:00406414 sub_406380      endp
.text:00406414
.text:00406414 ; ---------------------------------------------------------------------------
.text:00406415                 align 10h
.text:00406420
.text:00406420 ; =============== S U B R O U T I N E =======================================
.text:00406420
.text:00406420
.text:00406420 ; int __cdecl sub_406420(int, char *, int, int)
.text:00406420 sub_406420      proc near               ; CODE XREF: .text:00405FD2↑p
.text:00406420                                         ; .text:00406002↑p ...
.text:00406420
.text:00406420 Block           = dword ptr -2Ch
.text:00406420 var_28          = dword ptr -28h
.text:00406420 Str             = dword ptr -24h
.text:00406420 var_20          = dword ptr -20h
.text:00406420 var_1C          = dword ptr -1Ch
.text:00406420 var_18          = dword ptr -18h
.text:00406420 var_14          = dword ptr -14h
.text:00406420 arg_0           = dword ptr  4
.text:00406420 arg_4           = dword ptr  8
.text:00406420 arg_8           = dword ptr  0Ch
.text:00406420 arg_C           = dword ptr  10h
.text:00406420
.text:00406420                 push    ebp
.text:00406421                 push    edi
.text:00406422                 push    esi
.text:00406423                 push    ebx
.text:00406424                 sub     esp, 1Ch
.text:00406427                 call    _errno
.text:0040642C                 mov     edx, [eax]
.text:0040642E                 mov     eax, [esp+2Ch+arg_0]
.text:00406432                 mov     [esp+2Ch+var_14], edx
.text:00406436                 test    eax, eax
.text:00406438                 js      loc_4065DA
.text:0040643E                 mov     eax, [esp+2Ch+arg_0]
.text:00406442                 cmp     dword_410030, eax
.text:00406448                 ja      short loc_4064C0
.text:0040644A                 mov     esi, eax
.text:0040644C                 inc     esi
.text:0040644D                 cmp     esi, 1FFFFFFFh
.text:00406453                 ja      loc_4065DF
.text:00406459                 mov     ebx, off_41003C
.text:0040645F                 cmp     ebx, offset dword_410034
.text:00406465                 jz      loc_4065B1
.text:0040646B
.text:0040646B loc_40646B:                             ; CODE XREF: sub_406420+1B5↓j
.text:0040646B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040646E                 lea     ecx, ds:0[esi*8]
.text:00406475                 mov     ebp, esi
.text:00406477                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040647B                 call    sub_4066C0
.text:00406480                 mov     off_41003C, eax
.text:00406485                 mov     ebx, dword_410030
.text:0040648B                 sub     ebp, ebx
.text:0040648D                 lea     edi, [eax+ebx*8]
.text:00406490                 lea     eax, ds:0[ebp*8]
.text:00406497                 cmp     eax, 7
.text:0040649A                 jbe     short loc_4064B0
.text:0040649C                 test    edi, 4
.text:004064A2                 jz      short loc_4064B0
.text:004064A4                 mov     dword ptr [edi], 0
.text:004064AA                 sub     eax, 4
.text:004064AD                 add     edi, 4
.text:004064B0
.text:004064B0 loc_4064B0:                             ; CODE XREF: sub_406420+7A↑j
.text:004064B0                                         ; sub_406420+82↑j
.text:004064B0                 cld
.text:004064B1                 mov     ecx, eax
.text:004064B3                 shr     ecx, 2
.text:004064B6                 xor     eax, eax
.text:004064B8                 rep stosd
.text:004064BA                 mov     dword_410030, esi
.text:004064C0
.text:004064C0 loc_4064C0:                             ; CODE XREF: sub_406420+28↑j
.text:004064C0                 mov     esi, off_41003C
.text:004064C6                 mov     eax, [esp+2Ch+arg_0]
.text:004064CA                 mov     ebp, [esi+eax*8]
.text:004064CD                 mov     edi, [esi+eax*8+4]
.text:004064D1                 mov     esi, [esp+2Ch+arg_C]
.text:004064D5                 test    esi, esi
.text:004064D7                 jz      loc_4065A7
.text:004064DD
.text:004064DD loc_4064DD:                             ; CODE XREF: sub_406420+18C↓j
.text:004064DD                 call    _errno
.text:004064E2                 mov     ebx, [eax]
.text:004064E4                 mov     [esp+2Ch+var_18], esi ; int
.text:004064E8                 mov     ecx, [esi]
.text:004064EA                 mov     [esp+2Ch+Block], edi ; int
.text:004064ED                 mov     edx, [esp+2Ch+arg_8]
.text:004064F1                 mov     [esp+2Ch+var_28], ebp ; int
.text:004064F5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004064F9                 mov     ecx, [esp+2Ch+arg_4]
.text:004064FD                 mov     [esp+2Ch+var_20], edx ; int
.text:00406501                 mov     [esp+2Ch+Str], ecx ; Str
.text:00406505                 call    sub_4052E0
.text:0040650A                 mov     esi, eax
.text:0040650C                 call    _errno
.text:00406511                 mov     [eax], ebx
.text:00406513                 cmp     ebp, esi
.text:00406515                 ja      short loc_40658B
.text:00406517                 lea     ebp, [esi+1]
.text:0040651A                 mov     ebx, off_41003C
.text:00406520                 cmp     edi, offset unk_411040
.text:00406526                 mov     esi, [esp+2Ch+arg_0]
.text:0040652A                 mov     [ebx+esi*8], ebp
.text:0040652D                 jz      short loc_40653D
.text:0040652F                 mov     [esp+2Ch+Block], edi ; Block
.text:00406532                 call    free
.text:00406537                 mov     ebx, off_41003C
.text:0040653D
.text:0040653D loc_40653D:                             ; CODE XREF: sub_406420+10D↑j
.text:0040653D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00406540                 call    sub_406630
.text:00406545                 mov     esi, [esp+2Ch+arg_C]
.text:00406549                 mov     edi, eax
.text:0040654B                 mov     eax, [esp+2Ch+arg_0]
.text:0040654F                 test    esi, esi
.text:00406551                 mov     [ebx+eax*8+4], edi
.text:00406555                 jz      short loc_4065A0
.text:00406557
.text:00406557 loc_406557:                             ; CODE XREF: sub_406420+185↓j
.text:00406557                 call    _errno
.text:0040655C                 mov     ebx, [eax]
.text:0040655E                 mov     [esp+2Ch+var_18], esi ; int
.text:00406562                 mov     ecx, [esi]
.text:00406564                 mov     [esp+2Ch+Block], edi ; int
.text:00406567                 mov     edx, [esp+2Ch+arg_8]
.text:0040656B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040656F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00406573                 mov     ecx, [esp+2Ch+arg_4]
.text:00406577                 mov     [esp+2Ch+var_20], edx ; int
.text:0040657B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040657F                 call    sub_4052E0
.text:00406584                 call    _errno
.text:00406589                 mov     [eax], ebx
.text:0040658B
.text:0040658B loc_40658B:                             ; CODE XREF: sub_406420+F5↑j
.text:0040658B                 call    _errno
.text:00406590                 mov     ebp, [esp+2Ch+var_14]
.text:00406594                 mov     [eax], ebp
.text:00406596                 add     esp, 1Ch
.text:00406599                 mov     eax, edi
.text:0040659B                 pop     ebx
.text:0040659C                 pop     esi
.text:0040659D                 pop     edi
.text:0040659E                 pop     ebp
.text:0040659F                 retn
.text:004065A0 ; ---------------------------------------------------------------------------
.text:004065A0
.text:004065A0 loc_4065A0:                             ; CODE XREF: sub_406420+135↑j
.text:004065A0                 mov     esi, offset dword_411140
.text:004065A5                 jmp     short loc_406557
.text:004065A7 ; ---------------------------------------------------------------------------
.text:004065A7
.text:004065A7 loc_4065A7:                             ; CODE XREF: sub_406420+B7↑j
.text:004065A7                 mov     esi, offset dword_411140
.text:004065AC                 jmp     loc_4064DD
.text:004065B1 ; ---------------------------------------------------------------------------
.text:004065B1
.text:004065B1 loc_4065B1:                             ; CODE XREF: sub_406420+45↑j
.text:004065B1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004065B8                 call    sub_406630
.text:004065BD                 mov     off_41003C, eax
.text:004065C2                 mov     edi, dword_410034
.text:004065C8                 mov     ebx, eax
.text:004065CA                 mov     ecx, off_410038
.text:004065D0                 mov     [eax], edi
.text:004065D2                 mov     [eax+4], ecx
.text:004065D5                 jmp     loc_40646B
.text:004065DA ; ---------------------------------------------------------------------------
.text:004065DA
.text:004065DA loc_4065DA:                             ; CODE XREF: sub_406420+18↑j
.text:004065DA                 call    abort
.text:004065DF ; ---------------------------------------------------------------------------
.text:004065DF
.text:004065DF loc_4065DF:                             ; CODE XREF: sub_406420+33↑j
.text:004065DF                 call    sub_4044E0
.text:004065DF sub_406420      endp
.text:004065DF
.text:004065DF ; ---------------------------------------------------------------------------
.text:004065E4                 align 10h
.text:004065F0
.text:004065F0 ; =============== S U B R O U T I N E =======================================
.text:004065F0
.text:004065F0
.text:004065F0 sub_4065F0      proc near
.text:004065F0
.text:004065F0 Size            = dword ptr -0Ch
.text:004065F0 var_4           = dword ptr -4
.text:004065F0 arg_0           = dword ptr  4
.text:004065F0 arg_4           = dword ptr  8
.text:004065F0
.text:004065F0                 sub     esp, 0Ch
.text:004065F3                 xor     edx, edx
.text:004065F5                 mov     ecx, [esp+0Ch+arg_4]
.text:004065F9                 mov     [esp+0Ch+var_4], ebx
.text:004065FD                 mov     eax, 0FFFFFFFFh
.text:00406602                 mov     ebx, [esp+0Ch+arg_0]
.text:00406606                 div     ecx
.text:00406608                 cmp     eax, ebx
.text:0040660A                 jb      short loc_406629
.text:0040660C                 mov     edx, ebx
.text:0040660E                 imul    edx, ecx
.text:00406611                 mov     [esp+0Ch+Size], edx ; Size
.text:00406614                 call    malloc
.text:00406619                 test    eax, eax
.text:0040661B                 jz      short loc_406625
.text:0040661D
.text:0040661D loc_40661D:                             ; CODE XREF: sub_4065F0+37↓j
.text:0040661D                 mov     ebx, [esp+0Ch+var_4]
.text:00406621                 add     esp, 0Ch
.text:00406624                 retn
.text:00406625 ; ---------------------------------------------------------------------------
.text:00406625
.text:00406625 loc_406625:                             ; CODE XREF: sub_4065F0+2B↑j
.text:00406625                 test    ebx, ebx
.text:00406627                 jz      short loc_40661D
.text:00406629
.text:00406629 loc_406629:                             ; CODE XREF: sub_4065F0+1A↑j
.text:00406629                 call    sub_4044E0
.text:00406629 sub_4065F0      endp
.text:00406629
.text:00406629 ; ---------------------------------------------------------------------------
.text:0040662E                 align 10h
.text:00406630
.text:00406630 ; =============== S U B R O U T I N E =======================================
.text:00406630
.text:00406630
.text:00406630 ; int __cdecl sub_406630(size_t)
.text:00406630 sub_406630      proc near               ; CODE XREF: .text:00405D59↑p
.text:00406630                                         ; .text:00405F36↑p ...
.text:00406630
.text:00406630 Size            = dword ptr -0Ch
.text:00406630 var_4           = dword ptr -4
.text:00406630 arg_0           = dword ptr  4
.text:00406630
.text:00406630                 sub     esp, 0Ch
.text:00406633                 mov     [esp+0Ch+var_4], ebx
.text:00406637                 mov     ebx, [esp+0Ch+arg_0]
.text:0040663B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040663E                 call    malloc
.text:00406643                 test    eax, eax
.text:00406645                 jz      short loc_406650
.text:00406647
.text:00406647 loc_406647:                             ; CODE XREF: sub_406630+22↓j
.text:00406647                 mov     ebx, [esp+0Ch+var_4]
.text:0040664B                 add     esp, 0Ch
.text:0040664E                 retn
.text:0040664E ; ---------------------------------------------------------------------------
.text:0040664F                 align 10h
.text:00406650
.text:00406650 loc_406650:                             ; CODE XREF: sub_406630+15↑j
.text:00406650                 test    ebx, ebx
.text:00406652                 jz      short loc_406647
.text:00406654                 call    sub_4044E0
.text:00406654 sub_406630      endp
.text:00406654
.text:00406654 ; ---------------------------------------------------------------------------
.text:00406659                 align 10h
.text:00406660                 sub     esp, 1Ch
.text:00406663                 xor     edx, edx
.text:00406665                 mov     eax, 0FFFFFFFFh
.text:0040666A                 mov     [esp+14h], ebx
.text:0040666E                 mov     ecx, [esp+20h]
.text:00406672                 mov     ebx, [esp+28h]
.text:00406676                 mov     [esp+18h], esi
.text:0040667A                 mov     esi, [esp+24h]
.text:0040667E                 div     ebx
.text:00406680                 cmp     eax, esi
.text:00406682                 jb      short loc_4066B4
.text:00406684                 mov     [esp], ecx
.text:00406687                 mov     edx, esi
.text:00406689                 imul    edx, ebx
.text:0040668C                 mov     [esp+4], edx
.text:00406690                 call    realloc
.text:00406695                 test    eax, eax
.text:00406697                 mov     ecx, eax
.text:00406699                 jz      short loc_4066B0
.text:0040669B
.text:0040669B loc_40669B:                             ; CODE XREF: .text:004066B2↓j
.text:0040669B                 mov     ebx, [esp+14h]
.text:0040669F                 mov     eax, ecx
.text:004066A1                 mov     esi, [esp+18h]
.text:004066A5                 add     esp, 1Ch
.text:004066A8                 retn
.text:004066A8 ; ---------------------------------------------------------------------------
.text:004066A9                 align 10h
.text:004066B0
.text:004066B0 loc_4066B0:                             ; CODE XREF: .text:00406699↑j
.text:004066B0                 test    esi, esi
.text:004066B2                 jz      short loc_40669B
.text:004066B4
.text:004066B4 loc_4066B4:                             ; CODE XREF: .text:00406682↑j
.text:004066B4                 call    sub_4044E0
.text:004066B4 ; ---------------------------------------------------------------------------
.text:004066B9                 align 10h
.text:004066C0
.text:004066C0 ; =============== S U B R O U T I N E =======================================
.text:004066C0
.text:004066C0
.text:004066C0 ; int __cdecl sub_4066C0(void *, size_t)
.text:004066C0 sub_4066C0      proc near               ; CODE XREF: sub_406420+5B↑p
.text:004066C0
.text:004066C0 Block           = dword ptr -0Ch
.text:004066C0 Size            = dword ptr -8
.text:004066C0 var_4           = dword ptr -4
.text:004066C0 arg_0           = dword ptr  4
.text:004066C0 arg_4           = dword ptr  8
.text:004066C0
.text:004066C0                 sub     esp, 0Ch
.text:004066C3                 mov     edx, [esp+0Ch+arg_0]
.text:004066C7                 mov     [esp+0Ch+var_4], ebx
.text:004066CB                 mov     ebx, [esp+0Ch+arg_4]
.text:004066CF                 mov     [esp+0Ch+Block], edx ; Block
.text:004066D2                 mov     [esp+0Ch+Size], ebx ; Size
.text:004066D6                 call    realloc
.text:004066DB                 test    eax, eax
.text:004066DD                 jz      short loc_4066E7
.text:004066DF
.text:004066DF loc_4066DF:                             ; CODE XREF: sub_4066C0+29↓j
.text:004066DF                 mov     ebx, [esp+0Ch+var_4]
.text:004066E3                 add     esp, 0Ch
.text:004066E6                 retn
.text:004066E7 ; ---------------------------------------------------------------------------
.text:004066E7
.text:004066E7 loc_4066E7:                             ; CODE XREF: sub_4066C0+1D↑j
.text:004066E7                 test    ebx, ebx
.text:004066E9                 jz      short loc_4066DF
.text:004066EB                 call    sub_4044E0
.text:004066EB sub_4066C0      endp
.text:004066EB
.text:004066F0 ; ---------------------------------------------------------------------------
.text:004066F0                 jmp     sub_406840
.text:004066F0 ; ---------------------------------------------------------------------------
.text:004066F5                 align 10h
.text:00406700                 sub     esp, 0Ch
.text:00406703                 mov     edx, [esp+14h]
.text:00406707                 mov     dword ptr [esp+8], 1
.text:0040670F                 mov     [esp+4], edx
.text:00406713                 mov     edx, [esp+10h]
.text:00406717                 mov     [esp], edx
.text:0040671A                 call    sub_406840
.text:0040671F                 add     esp, 0Ch
.text:00406722                 retn
.text:00406722 ; ---------------------------------------------------------------------------
.text:00406723                 align 10h
.text:00406730                 sub     esp, 1Ch
.text:00406733                 mov     [esp+18h], ebx
.text:00406737                 mov     ebx, [esp+20h]
.text:0040673B                 mov     [esp], ebx
.text:0040673E                 call    malloc
.text:00406743                 test    eax, eax
.text:00406745                 jz      short loc_406763
.text:00406747
.text:00406747 loc_406747:                             ; CODE XREF: .text:00406765↓j
.text:00406747                 mov     [esp+8], ebx
.text:0040674B                 mov     dword ptr [esp+4], 0
.text:00406753                 mov     [esp], eax
.text:00406756                 call    memset
.text:0040675B                 mov     ebx, [esp+18h]
.text:0040675F                 add     esp, 1Ch
.text:00406762                 retn
.text:00406763 ; ---------------------------------------------------------------------------
.text:00406763
.text:00406763 loc_406763:                             ; CODE XREF: .text:00406745↑j
.text:00406763                 test    ebx, ebx
.text:00406765                 jz      short loc_406747
.text:00406767                 call    sub_4044E0
.text:00406767 ; ---------------------------------------------------------------------------
.text:0040676C                 align 10h
.text:00406770                 sub     esp, 0Ch
.text:00406773                 xor     edx, edx
.text:00406775                 mov     ecx, [esp+14h]
.text:00406779                 mov     [esp+8], ebx
.text:0040677D                 mov     eax, 0FFFFFFFFh
.text:00406782                 mov     ebx, [esp+10h]
.text:00406786                 div     ecx
.text:00406788                 cmp     eax, ebx
.text:0040678A                 jb      short loc_4067A8
.text:0040678C                 mov     [esp+4], ecx
.text:00406790                 mov     [esp], ebx
.text:00406793                 call    calloc
.text:00406798                 test    eax, eax
.text:0040679A                 jz      short loc_4067A4
.text:0040679C
.text:0040679C loc_40679C:                             ; CODE XREF: .text:004067A6↓j
.text:0040679C                 mov     ebx, [esp+8]
.text:004067A0                 add     esp, 0Ch
.text:004067A3                 retn
.text:004067A4 ; ---------------------------------------------------------------------------
.text:004067A4
.text:004067A4 loc_4067A4:                             ; CODE XREF: .text:0040679A↑j
.text:004067A4                 test    ebx, ebx
.text:004067A6                 jz      short loc_40679C
.text:004067A8
.text:004067A8 loc_4067A8:                             ; CODE XREF: .text:0040678A↑j
.text:004067A8                 call    sub_4044E0
.text:004067A8 ; ---------------------------------------------------------------------------
.text:004067AD                 align 10h
.text:004067B0                 sub     esp, 1Ch
.text:004067B3                 mov     [esp+18h], ebx
.text:004067B7                 mov     ebx, [esp+24h]
.text:004067BB                 mov     [esp], ebx
.text:004067BE                 call    malloc
.text:004067C3                 test    eax, eax
.text:004067C5                 mov     edx, eax
.text:004067C7                 jz      short loc_4067E5
.text:004067C9
.text:004067C9 loc_4067C9:                             ; CODE XREF: .text:004067E7↓j
.text:004067C9                 mov     [esp+8], ebx
.text:004067CD                 mov     ecx, [esp+20h]
.text:004067D1                 mov     [esp], edx
.text:004067D4                 mov     [esp+4], ecx
.text:004067D8                 call    memcpy
.text:004067DD                 mov     ebx, [esp+18h]
.text:004067E1                 add     esp, 1Ch
.text:004067E4                 retn
.text:004067E5 ; ---------------------------------------------------------------------------
.text:004067E5
.text:004067E5 loc_4067E5:                             ; CODE XREF: .text:004067C7↑j
.text:004067E5                 test    ebx, ebx
.text:004067E7                 jz      short loc_4067C9
.text:004067E9                 call    sub_4044E0
.text:004067E9 ; ---------------------------------------------------------------------------
.text:004067EE                 align 10h
.text:004067F0                 sub     esp, 1Ch
.text:004067F3                 mov     [esp+18h], esi
.text:004067F7                 mov     esi, [esp+20h]
.text:004067FB                 mov     [esp+14h], ebx
.text:004067FF                 mov     [esp], esi
.text:00406802                 call    strlen
.text:00406807                 lea     ebx, [eax+1]
.text:0040680A                 mov     [esp], ebx
.text:0040680D                 call    malloc
.text:00406812                 test    eax, eax
.text:00406814                 jz      short loc_406832
.text:00406816
.text:00406816 loc_406816:                             ; CODE XREF: .text:00406834↓j
.text:00406816                 mov     [esp+8], ebx
.text:0040681A                 mov     [esp+4], esi
.text:0040681E                 mov     [esp], eax
.text:00406821                 call    memcpy
.text:00406826                 mov     ebx, [esp+14h]
.text:0040682A                 mov     esi, [esp+18h]
.text:0040682E                 add     esp, 1Ch
.text:00406831                 retn
.text:00406832 ; ---------------------------------------------------------------------------
.text:00406832
.text:00406832 loc_406832:                             ; CODE XREF: .text:00406814↑j
.text:00406832                 test    ebx, ebx
.text:00406834                 jz      short loc_406816
.text:00406836                 call    sub_4044E0
.text:00406836 ; ---------------------------------------------------------------------------
.text:0040683B                 align 10h
.text:00406840
.text:00406840 ; =============== S U B R O U T I N E =======================================
.text:00406840
.text:00406840
.text:00406840 ; int __cdecl sub_406840(void *, int, int)
.text:00406840 sub_406840      proc near               ; CODE XREF: .text:004066F0↑j
.text:00406840                                         ; .text:0040671A↑p
.text:00406840
.text:00406840 Block           = dword ptr -1Ch
.text:00406840 Size            = dword ptr -18h
.text:00406840 var_C           = dword ptr -0Ch
.text:00406840 var_8           = dword ptr -8
.text:00406840 var_4           = dword ptr -4
.text:00406840 arg_0           = dword ptr  4
.text:00406840 arg_4           = dword ptr  8
.text:00406840 arg_8           = dword ptr  0Ch
.text:00406840
.text:00406840                 sub     esp, 1Ch
.text:00406843                 mov     [esp+1Ch+var_8], esi
.text:00406847                 mov     esi, [esp+1Ch+arg_0]
.text:0040684B                 mov     [esp+1Ch+var_4], edi
.text:0040684F                 mov     edi, [esp+1Ch+arg_4]
.text:00406853                 test    esi, esi
.text:00406855                 mov     [esp+1Ch+var_C], ebx
.text:00406859                 mov     ecx, [edi]
.text:0040685B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040685F                 jz      short loc_4068A0
.text:00406861                 xor     edx, edx
.text:00406863                 mov     eax, 7FFFFFFFh
.text:00406868                 div     ebx
.text:0040686A                 cmp     eax, ecx
.text:0040686C                 jb      short loc_406899
.text:0040686E                 add     ecx, ecx
.text:00406870
.text:00406870 loc_406870:                             ; CODE XREF: sub_406840+62↓j
.text:00406870                                         ; sub_406840+71↓j ...
.text:00406870                 mov     [edi], ecx
.text:00406872                 imul    ebx, ecx
.text:00406875                 mov     [esp+1Ch+Block], esi ; Block
.text:00406878                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040687C                 call    realloc
.text:00406881                 test    eax, eax
.text:00406883                 jz      short loc_406895
.text:00406885
.text:00406885 loc_406885:                             ; CODE XREF: sub_406840+57↓j
.text:00406885                 mov     ebx, [esp+1Ch+var_C]
.text:00406889                 mov     esi, [esp+1Ch+var_8]
.text:0040688D                 mov     edi, [esp+1Ch+var_4]
.text:00406891                 add     esp, 1Ch
.text:00406894                 retn
.text:00406895 ; ---------------------------------------------------------------------------
.text:00406895
.text:00406895 loc_406895:                             ; CODE XREF: sub_406840+43↑j
.text:00406895                 test    ebx, ebx
.text:00406897                 jz      short loc_406885
.text:00406899
.text:00406899 loc_406899:                             ; CODE XREF: sub_406840+2C↑j
.text:00406899                 call    sub_4044E0
.text:00406899 ; ---------------------------------------------------------------------------
.text:0040689E                 align 10h
.text:004068A0
.text:004068A0 loc_4068A0:                             ; CODE XREF: sub_406840+1F↑j
.text:004068A0                 test    ecx, ecx
.text:004068A2                 jnz     short loc_406870
.text:004068A4                 xor     edx, edx
.text:004068A6                 mov     eax, 40h ; '@'
.text:004068AB                 div     ebx
.text:004068AD                 test    eax, eax
.text:004068AF                 mov     ecx, eax
.text:004068B1                 jnz     short loc_406870
.text:004068B3                 mov     ecx, 1
.text:004068B8                 jmp     short loc_406870
.text:004068B8 sub_406840      endp
.text:004068B8
.text:004068B8 ; ---------------------------------------------------------------------------
.text:004068BA                 align 10h
.text:004068C0                 jmp     ds:libintl_bindtextdomain
.text:004068C0 ; ---------------------------------------------------------------------------
.text:004068C6                 align 10h
.text:004068D0                 jmp     ds:libintl_textdomain
.text:004068D0 ; ---------------------------------------------------------------------------
.text:004068D6                 align 10h
.text:004068E0                 jmp     ds:libintl_gettext
.text:004068E0 ; ---------------------------------------------------------------------------
.text:004068E6                 align 10h
.text:004068F0 ; const char aS_1[]
.text:004068F0 aS_1            db ': %s',0             ; DATA XREF: sub_406910+B8↓o
.text:004068F0                                         ; sub_406A14+122↓o
.text:004068F5 aUnknownSystemE db 'Unknown system error',0
.text:004068F5                                         ; DATA XREF: sub_406910:loc_4069DD↓o
.text:004068F5                                         ; sub_406A14:loc_406B4E↓o
.text:0040690A ; const char aS_2[]
.text:0040690A aS_2            db '%s: ',0             ; DATA XREF: sub_406910:loc_4069E4↓o
.text:0040690F                 align 10h
.text:00406910
.text:00406910 ; =============== S U B R O U T I N E =======================================
.text:00406910
.text:00406910
.text:00406910 ; int __cdecl sub_406910(int Code, int ErrorMessage, char *, char)
.text:00406910 sub_406910      proc near               ; CODE XREF: sub_4018C0+360↑p
.text:00406910                                         ; sub_4018C0+3F3↑p ...
.text:00406910
.text:00406910 Stream          = dword ptr -1Ch
.text:00406910 Format          = dword ptr -18h
.text:00406910 ArgList         = dword ptr -14h
.text:00406910 Code            = dword ptr  4
.text:00406910 ErrorMessage    = dword ptr  8
.text:00406910 arg_8           = dword ptr  0Ch
.text:00406910 arg_C           = byte ptr  10h
.text:00406910
.text:00406910                 push    esi
.text:00406911                 push    ebx
.text:00406912                 sub     esp, 14h
.text:00406915                 mov     edx, ds:_iob
.text:0040691B                 mov     esi, [esp+1Ch+Code]
.text:0040691F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00406923                 add     edx, 20h ; ' '
.text:00406926                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00406929                 call    fflush
.text:0040692E                 mov     eax, ds:dword_4114E0
.text:00406933                 test    eax, eax
.text:00406935                 jz      loc_4069E4
.text:0040693B                 call    eax ; dword_4114E0
.text:0040693D
.text:0040693D loc_40693D:                             ; CODE XREF: sub_406910+F7↓j
.text:0040693D                 lea     edx, [esp+1Ch+arg_C]
.text:00406941                 mov     ecx, [esp+1Ch+arg_8]
.text:00406945                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00406949                 mov     edx, ds:_iob
.text:0040694F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00406953                 add     edx, 40h ; '@'
.text:00406956                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00406959                 call    vfprintf
.text:0040695E                 inc     ds:dword_4114F0
.text:00406964                 test    ebx, ebx
.text:00406966                 jnz     short loc_4069B2
.text:00406968
.text:00406968 loc_406968:                             ; CODE XREF: sub_406910+CB↓j
.text:00406968                 mov     edx, ds:_iob
.text:0040696E                 lea     ecx, [edx+40h]
.text:00406971                 mov     ebx, [ecx+4]
.text:00406974                 dec     ebx
.text:00406975                 test    ebx, ebx
.text:00406977                 mov     [ecx+4], ebx
.text:0040697A                 js      short loc_4069A0
.text:0040697C                 mov     ecx, [edx+40h]
.text:0040697F                 mov     byte ptr [ecx], 0Ah
.text:00406982                 inc     dword ptr [edx+40h]
.text:00406985
.text:00406985 loc_406985:                             ; CODE XREF: sub_406910+A0↓j
.text:00406985                 mov     edx, ds:_iob
.text:0040698B                 add     edx, 40h ; '@'
.text:0040698E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00406991                 call    fflush
.text:00406996                 test    esi, esi
.text:00406998                 jnz     short loc_406A0C
.text:0040699A                 add     esp, 14h
.text:0040699D                 pop     ebx
.text:0040699E                 pop     esi
.text:0040699F                 retn
.text:004069A0 ; ---------------------------------------------------------------------------
.text:004069A0
.text:004069A0 loc_4069A0:                             ; CODE XREF: sub_406910+6A↑j
.text:004069A0                 mov     [esp+1Ch+Format], ecx ; File
.text:004069A4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:004069AB                 call    _flsbuf
.text:004069B0                 jmp     short loc_406985
.text:004069B2 ; ---------------------------------------------------------------------------
.text:004069B2
.text:004069B2 loc_4069B2:                             ; CODE XREF: sub_406910+56↑j
.text:004069B2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004069B5                 call    strerror
.text:004069BA                 test    eax, eax
.text:004069BC                 jz      short loc_4069DD
.text:004069BE
.text:004069BE loc_4069BE:                             ; CODE XREF: sub_406910+D2↓j
.text:004069BE                 mov     [esp+1Ch+ArgList], eax
.text:004069C2                 mov     ebx, ds:_iob
.text:004069C8                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:004069D0                 add     ebx, 40h ; '@'
.text:004069D3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004069D6                 call    fprintf
.text:004069DB                 jmp     short loc_406968
.text:004069DD ; ---------------------------------------------------------------------------
.text:004069DD
.text:004069DD loc_4069DD:                             ; CODE XREF: sub_406910+AC↑j
.text:004069DD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004069E2                 jmp     short loc_4069BE
.text:004069E4 ; ---------------------------------------------------------------------------
.text:004069E4
.text:004069E4 loc_4069E4:                             ; CODE XREF: sub_406910+25↑j
.text:004069E4                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:004069EC                 mov     edx, ds:_iob
.text:004069F2                 mov     ecx, ds:dword_4114B0
.text:004069F8                 add     edx, 40h ; '@'
.text:004069FB                 mov     [esp+1Ch+ArgList], ecx
.text:004069FF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00406A02                 call    fprintf
.text:00406A07                 jmp     loc_40693D
.text:00406A0C ; ---------------------------------------------------------------------------
.text:00406A0C
.text:00406A0C loc_406A0C:                             ; CODE XREF: sub_406910+88↑j
.text:00406A0C                 mov     [esp+1Ch+Stream], esi ; Code
.text:00406A0F                 call    exit
.text:00406A0F sub_406910      endp
.text:00406A0F
.text:00406A14
.text:00406A14 ; =============== S U B R O U T I N E =======================================
.text:00406A14
.text:00406A14
.text:00406A14 ; int __cdecl sub_406A14(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00406A14 sub_406A14      proc near               ; DATA XREF: sub_406A14+77↓o
.text:00406A14
.text:00406A14 Stream          = dword ptr -28h
.text:00406A14 Format          = dword ptr -24h
.text:00406A14 ArgList         = dword ptr -20h
.text:00406A14 var_1C          = dword ptr -1Ch
.text:00406A14 Code            = dword ptr  8
.text:00406A14 ErrorMessage    = dword ptr  0Ch
.text:00406A14 Str2            = dword ptr  10h
.text:00406A14 arg_10          = dword ptr  14h
.text:00406A14 arg_14          = dword ptr  18h
.text:00406A14 arg_18          = byte ptr  1Ch
.text:00406A14
.text:00406A14                 and     eax, 64253A73h
.text:00406A19                 cmp     ah, [eax]
.text:00406A1B
.text:00406A1B loc_406A1B:                             ; DATA XREF: sub_406A14:loc_406B55↓o
.text:00406A1B                 add     ds:55003A73h, ah
.text:00406A21                 push    edi
.text:00406A22                 push    esi
.text:00406A23                 push    ebx
.text:00406A24                 sub     esp, 1Ch
.text:00406A27                 mov     edx, ds:dword_411520
.text:00406A2D                 mov     ebp, [esp+28h+Code]
.text:00406A31                 mov     edi, [esp+28h+ErrorMessage]
.text:00406A35                 test    edx, edx
.text:00406A37                 mov     ebx, [esp+28h+Str2]
.text:00406A3B                 mov     esi, [esp+28h+arg_10]
.text:00406A3F                 jz      short loc_406A59
.text:00406A41                 cmp     ds:dword_411180, esi
.text:00406A47                 jz      loc_406B80
.text:00406A4D
.text:00406A4D loc_406A4D:                             ; CODE XREF: sub_406A14+18D↓j
.text:00406A4D                 mov     ds:Str1, ebx
.text:00406A53                 mov     ds:dword_411180, esi
.text:00406A59
.text:00406A59 loc_406A59:                             ; CODE XREF: sub_406A14+2B↑j
.text:00406A59                 mov     edx, ds:_iob
.text:00406A5F                 add     edx, 20h ; ' '
.text:00406A62                 mov     [esp+28h+Stream], edx ; Stream
.text:00406A65                 call    fflush
.text:00406A6A                 mov     eax, ds:dword_4114E0
.text:00406A6F                 test    eax, eax
.text:00406A71                 jz      loc_406B55
.text:00406A77                 call    eax ; dword_4114E0
.text:00406A79
.text:00406A79 loc_406A79:                             ; CODE XREF: sub_406A14+164↓j
.text:00406A79                 test    ebx, ebx
.text:00406A7B                 jz      short loc_406A9E
.text:00406A7D                 mov     [esp+28h+ArgList], ebx
.text:00406A81                 mov     ebx, ds:_iob
.text:00406A87                 mov     [esp+28h+var_1C], esi
.text:00406A8B                 mov     [esp+28h+Format], offset sub_406A14 ; Format
.text:00406A93                 add     ebx, 40h ; '@'
.text:00406A96                 mov     [esp+28h+Stream], ebx ; Stream
.text:00406A99                 call    fprintf
.text:00406A9E
.text:00406A9E loc_406A9E:                             ; CODE XREF: sub_406A14+67↑j
.text:00406A9E                 mov     esi, ds:_iob
.text:00406AA4                 lea     edx, [esp+28h+arg_18]
.text:00406AA8                 mov     ecx, [esp+28h+arg_14]
.text:00406AAC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00406AB0                 add     esi, 40h ; '@'
.text:00406AB3                 mov     [esp+28h+Format], ecx ; Format
.text:00406AB7                 mov     [esp+28h+Stream], esi ; Stream
.text:00406ABA                 call    vfprintf
.text:00406ABF                 inc     ds:dword_4114F0
.text:00406AC5                 test    edi, edi
.text:00406AC7                 jnz     short loc_406B20
.text:00406AC9
.text:00406AC9 loc_406AC9:                             ; CODE XREF: sub_406A14+135↓j
.text:00406AC9                 mov     edx, ds:_iob
.text:00406ACF                 lea     ecx, [edx+40h]
.text:00406AD2                 mov     ebx, [ecx+4]
.text:00406AD5                 dec     ebx
.text:00406AD6                 test    ebx, ebx
.text:00406AD8                 mov     [ecx+4], ebx
.text:00406ADB                 js      short loc_406B07
.text:00406ADD                 mov     esi, [edx+40h]
.text:00406AE0                 mov     byte ptr [esi], 0Ah
.text:00406AE3                 inc     dword ptr [edx+40h]
.text:00406AE6
.text:00406AE6 loc_406AE6:                             ; CODE XREF: sub_406A14+103↓j
.text:00406AE6                 mov     ecx, ds:_iob
.text:00406AEC                 add     ecx, 40h ; '@'
.text:00406AEF                 mov     [esp+28h+Stream], ecx ; Stream
.text:00406AF2                 call    fflush
.text:00406AF7                 test    ebp, ebp
.text:00406AF9                 jnz     loc_406BA6
.text:00406AFF
.text:00406AFF loc_406AFF:                             ; CODE XREF: sub_406A14+173↓j
.text:00406AFF                                         ; sub_406A14+187↓j
.text:00406AFF                 add     esp, 1Ch
.text:00406B02                 pop     ebx
.text:00406B03                 pop     esi
.text:00406B04                 pop     edi
.text:00406B05                 pop     ebp
.text:00406B06                 retn
.text:00406B07 ; ---------------------------------------------------------------------------
.text:00406B07
.text:00406B07 loc_406B07:                             ; CODE XREF: sub_406A14+C7↑j
.text:00406B07                 mov     [esp+28h+Format], ecx ; File
.text:00406B0B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00406B12                 call    _flsbuf
.text:00406B17                 jmp     short loc_406AE6
.text:00406B17 ; ---------------------------------------------------------------------------
.text:00406B19                 align 10h
.text:00406B20
.text:00406B20 loc_406B20:                             ; CODE XREF: sub_406A14+B3↑j
.text:00406B20                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00406B23                 call    strerror
.text:00406B28                 test    eax, eax
.text:00406B2A                 jz      short loc_406B4E
.text:00406B2C
.text:00406B2C loc_406B2C:                             ; CODE XREF: sub_406A14+13F↓j
.text:00406B2C                 mov     [esp+28h+ArgList], eax
.text:00406B30                 mov     edi, ds:_iob
.text:00406B36                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:00406B3E                 add     edi, 40h ; '@'
.text:00406B41                 mov     [esp+28h+Stream], edi ; Stream
.text:00406B44                 call    fprintf
.text:00406B49                 jmp     loc_406AC9
.text:00406B4E ; ---------------------------------------------------------------------------
.text:00406B4E
.text:00406B4E loc_406B4E:                             ; CODE XREF: sub_406A14+116↑j
.text:00406B4E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00406B53                 jmp     short loc_406B2C
.text:00406B55 ; ---------------------------------------------------------------------------
.text:00406B55
.text:00406B55 loc_406B55:                             ; CODE XREF: sub_406A14+5D↑j
.text:00406B55                 mov     [esp+28h+Format], (offset loc_406A1B+1) ; Format
.text:00406B5D                 mov     ecx, ds:_iob
.text:00406B63                 mov     edx, ds:dword_4114B0
.text:00406B69                 add     ecx, 40h ; '@'
.text:00406B6C                 mov     [esp+28h+ArgList], edx
.text:00406B70                 mov     [esp+28h+Stream], ecx ; Stream
.text:00406B73                 call    fprintf
.text:00406B78                 jmp     loc_406A79
.text:00406B78 ; ---------------------------------------------------------------------------
.text:00406B7D                 align 10h
.text:00406B80
.text:00406B80 loc_406B80:                             ; CODE XREF: sub_406A14+33↑j
.text:00406B80                 mov     eax, ds:Str1
.text:00406B85                 cmp     ebx, eax
.text:00406B87                 jz      loc_406AFF
.text:00406B8D                 mov     [esp+28h+Format], ebx ; Str2
.text:00406B91                 mov     [esp+28h+Stream], eax ; Str1
.text:00406B94                 call    strcmp
.text:00406B99                 test    eax, eax
.text:00406B9B                 jz      loc_406AFF
.text:00406BA1                 jmp     loc_406A4D
.text:00406BA6 ; ---------------------------------------------------------------------------
.text:00406BA6
.text:00406BA6 loc_406BA6:                             ; CODE XREF: sub_406A14+E5↑j
.text:00406BA6                 mov     [esp+28h+Stream], ebp ; Code
.text:00406BA9                 call    exit
.text:00406BA9 sub_406A14      endp ; sp-analysis failed
.text:00406BA9
.text:00406BA9 ; ---------------------------------------------------------------------------
.text:00406BAE                 align 10h
.text:00406BB0
.text:00406BB0 ; =============== S U B R O U T I N E =======================================
.text:00406BB0
.text:00406BB0
.text:00406BB0 ; int __cdecl sub_406BB0(char *, __int16)
.text:00406BB0 sub_406BB0      proc near               ; CODE XREF: sub_4018C0+5EB↑p
.text:00406BB0
.text:00406BB0 Destination     = dword ptr -13Ch
.text:00406BB0 Source          = dword ptr -138h
.text:00406BB0 dwPipeMode      = dword ptr -134h
.text:00406BB0 nMaxInstances   = dword ptr -130h
.text:00406BB0 nOutBufferSize  = dword ptr -12Ch
.text:00406BB0 nInBufferSize   = dword ptr -128h
.text:00406BB0 nDefaultTimeOut = dword ptr -124h
.text:00406BB0 lpSecurityAttributes= dword ptr -120h
.text:00406BB0 Name            = byte ptr -11Ch
.text:00406BB0 var_118         = dword ptr -118h
.text:00406BB0 var_114         = word ptr -114h
.text:00406BB0 var_8           = dword ptr -8
.text:00406BB0 var_4           = dword ptr -4
.text:00406BB0 arg_0           = dword ptr  4
.text:00406BB0 arg_4           = word ptr  8
.text:00406BB0
.text:00406BB0                 sub     esp, 13Ch
.text:00406BB6                 mov     eax, [esp+13Ch+arg_0]
.text:00406BBD                 mov     [esp+13Ch+var_4], esi
.text:00406BC4                 mov     [esp+13Ch+var_8], ebx
.text:00406BCB                 test    eax, eax
.text:00406BCD                 movzx   esi, [esp+13Ch+arg_4]
.text:00406BD5                 jz      loc_406C7D
.text:00406BDB                 mov     dword ptr [esp+13Ch+Name], 5C2E5C5Ch
.text:00406BE3                 lea     ebx, [esp+13Ch+Name]
.text:00406BE7                 mov     [esp+13Ch+var_118], 65706970h
.text:00406BEF                 mov     [esp+13Ch+var_114], 5Ch ; '\'
.text:00406BF6                 mov     [esp+13Ch+Source], eax ; Source
.text:00406BFA                 mov     [esp+13Ch+Destination], ebx ; Destination
.text:00406BFD                 call    strcat
.text:00406C02                 mov     [esp+13Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00406C0A                 mov     [esp+13Ch+nDefaultTimeOut], 1388h ; nDefaultTimeOut
.text:00406C12                 mov     [esp+13Ch+nInBufferSize], 400h ; nInBufferSize
.text:00406C1A                 mov     [esp+13Ch+nOutBufferSize], 400h ; nOutBufferSize
.text:00406C22                 mov     [esp+13Ch+nMaxInstances], 0FFh ; nMaxInstances
.text:00406C2A                 mov     [esp+13Ch+dwPipeMode], 6 ; dwPipeMode
.text:00406C32                 mov     [esp+13Ch+Source], 3 ; dwOpenMode
.text:00406C3A                 mov     [esp+13Ch+Destination], ebx ; lpName
.text:00406C3D                 call    CreateNamedPipeA
.text:00406C42                 sub     esp, 20h
.text:00406C45                 cmp     eax, 0FFFFFFFFh
.text:00406C48                 jz      short loc_406C6B
.text:00406C4A                 mov     [esp+13Ch+Source], esi ; Flags
.text:00406C4E                 mov     [esp+13Ch+Destination], eax ; OSFileHandle
.text:00406C51                 call    _open_osfhandle
.text:00406C56
.text:00406C56 loc_406C56:                             ; CODE XREF: sub_406BB0+CB↓j
.text:00406C56                 mov     ebx, [esp+13Ch+var_8]
.text:00406C5D                 mov     esi, [esp+13Ch+var_4]
.text:00406C64                 add     esp, 13Ch
.text:00406C6A                 retn
.text:00406C6B ; ---------------------------------------------------------------------------
.text:00406C6B
.text:00406C6B loc_406C6B:                             ; CODE XREF: sub_406BB0+98↑j
.text:00406C6B                 call    _errno
.text:00406C70                 mov     dword ptr [eax], 9
.text:00406C76
.text:00406C76 loc_406C76:                             ; CODE XREF: sub_406BB0+D8↓j
.text:00406C76                 mov     eax, 0FFFFFFFFh
.text:00406C7B                 jmp     short loc_406C56
.text:00406C7D ; ---------------------------------------------------------------------------
.text:00406C7D
.text:00406C7D loc_406C7D:                             ; CODE XREF: sub_406BB0+25↑j
.text:00406C7D                 call    _errno
.text:00406C82                 mov     dword ptr [eax], 16h
.text:00406C88                 jmp     short loc_406C76
.text:00406C88 sub_406BB0      endp
.text:00406C88
.text:00406C88 ; ---------------------------------------------------------------------------
.text:00406C8A                 align 10h
.text:00406C90
.text:00406C90 ; =============== S U B R O U T I N E =======================================
.text:00406C90
.text:00406C90
.text:00406C90 ; int __cdecl sub_406C90(char *, int)
.text:00406C90 sub_406C90      proc near               ; CODE XREF: .text:004026E8↑p
.text:00406C90
.text:00406C90 var_C           = dword ptr -0Ch
.text:00406C90 var_8           = dword ptr -8
.text:00406C90 var_4           = dword ptr -4
.text:00406C90 arg_0           = dword ptr  4
.text:00406C90 arg_4           = dword ptr  8
.text:00406C90
.text:00406C90                 sub     esp, 0Ch
.text:00406C93                 mov     edx, [esp+0Ch+arg_4]
.text:00406C97                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:00406C9E                 mov     [esp+0Ch+var_4], edx ; int
.text:00406CA2                 mov     edx, [esp+0Ch+arg_0]
.text:00406CA6                 mov     [esp+0Ch+var_8], edx ; char *
.text:00406CAA                 call    sub_406CF0
.text:00406CAF                 add     esp, 0Ch
.text:00406CB2                 retn
.text:00406CB2 sub_406C90      endp
.text:00406CB2
.text:00406CB2 ; ---------------------------------------------------------------------------
.text:00406CB3                 align 10h
.text:00406CC0
.text:00406CC0 ; =============== S U B R O U T I N E =======================================
.text:00406CC0
.text:00406CC0
.text:00406CC0 sub_406CC0      proc near               ; CODE XREF: sub_4018C0+4D7↑p
.text:00406CC0
.text:00406CC0 arg_0           = dword ptr  4
.text:00406CC0
.text:00406CC0                 sub     esp, 0Ch
.text:00406CC3                 mov     edx, [esp+0Ch+arg_0]
.text:00406CC7                 test    edx, edx
.text:00406CC9                 jz      short loc_406CE0
.text:00406CCB                 call    _errno
.text:00406CD0                 mov     dword ptr [eax], 16h
.text:00406CD6
.text:00406CD6 loc_406CD6:                             ; CODE XREF: sub_406CC0+2B↓j
.text:00406CD6                 mov     eax, 0FFFFFFFFh
.text:00406CDB                 add     esp, 0Ch
.text:00406CDE                 retn
.text:00406CDE ; ---------------------------------------------------------------------------
.text:00406CDF                 align 10h
.text:00406CE0
.text:00406CE0 loc_406CE0:                             ; CODE XREF: sub_406CC0+9↑j
.text:00406CE0                 call    _errno
.text:00406CE5                 mov     dword ptr [eax], 28h ; '('
.text:00406CEB                 jmp     short loc_406CD6
.text:00406CEB sub_406CC0      endp
.text:00406CEB
.text:00406CEB ; ---------------------------------------------------------------------------
.text:00406CED                 align 10h
.text:00406CF0
.text:00406CF0 ; =============== S U B R O U T I N E =======================================
.text:00406CF0
.text:00406CF0
.text:00406CF0 ; int __cdecl sub_406CF0(LPCSTR, char *, int)
.text:00406CF0 sub_406CF0      proc near               ; CODE XREF: sub_406C90+1A↑p
.text:00406CF0                                         ; sub_40C0C0+104↓p ...
.text:00406CF0
.text:00406CF0 var_13C         = dword ptr -13Ch
.text:00406CF0 lpString1       = dword ptr -138h
.text:00406CF0 var_134         = dword ptr -134h
.text:00406CF0 String1         = byte ptr -12Ch
.text:00406CF0 var_10          = dword ptr -10h
.text:00406CF0 var_C           = dword ptr -0Ch
.text:00406CF0 var_8           = dword ptr -8
.text:00406CF0 var_4           = dword ptr -4
.text:00406CF0 arg_0           = dword ptr  4
.text:00406CF0 arg_4           = dword ptr  8
.text:00406CF0 arg_8           = dword ptr  0Ch
.text:00406CF0
.text:00406CF0                 sub     esp, 13Ch
.text:00406CF6                 mov     [esp+13Ch+var_10], ebx
.text:00406CFD                 mov     ebx, [esp+13Ch+arg_8]
.text:00406D04                 mov     [esp+13Ch+var_C], esi
.text:00406D0B                 mov     esi, [esp+13Ch+arg_4]
.text:00406D12                 mov     [esp+13Ch+var_8], edi
.text:00406D19                 mov     edi, [esp+13Ch+arg_0]
.text:00406D20                 mov     [esp+13Ch+var_4], ebp
.text:00406D27                 mov     [esp+13Ch+var_134], ebx ; int
.text:00406D2B                 mov     [esp+13Ch+lpString1], esi ; int
.text:00406D2F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:00406D32                 call    sub_407010
.text:00406D37                 cmp     eax, 0FFFFFFFFh
.text:00406D3A                 mov     edx, eax
.text:00406D3C                 jz      short loc_406D4E
.text:00406D3E                 mov     ecx, [ebx]
.text:00406D40                 and     ecx, 0F000h
.text:00406D46                 cmp     ecx, 0A000h
.text:00406D4C                 jz      short loc_406D73
.text:00406D4E
.text:00406D4E loc_406D4E:                             ; CODE XREF: sub_406CF0+4C↑j
.text:00406D4E                                         ; sub_406CF0+A1↓j ...
.text:00406D4E                 mov     ebx, [esp+13Ch+var_10]
.text:00406D55                 mov     eax, edx
.text:00406D57                 mov     esi, [esp+13Ch+var_C]
.text:00406D5E                 mov     edi, [esp+13Ch+var_8]
.text:00406D65                 mov     ebp, [esp+13Ch+var_4]
.text:00406D6C                 add     esp, 13Ch
.text:00406D72                 retn
.text:00406D73 ; ---------------------------------------------------------------------------
.text:00406D73
.text:00406D73 loc_406D73:                             ; CODE XREF: sub_406CF0+5C↑j
.text:00406D73                 mov     [esp+13Ch+var_134], 104h
.text:00406D7B                 lea     ebp, [esp+13Ch+String1]
.text:00406D7F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:00406D83                 mov     [esp+13Ch+var_13C], esi ; char *
.text:00406D86                 call    sub_406F30
.text:00406D8B                 inc     eax
.text:00406D8C                 mov     edx, 0FFFFFFFFh
.text:00406D91                 jz      short loc_406D4E
.text:00406D93                 mov     [esp+13Ch+var_134], ebx ; int
.text:00406D97                 mov     [esp+13Ch+lpString1], ebp ; int
.text:00406D9B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:00406D9E                 call    sub_407010
.text:00406DA3                 mov     edx, eax
.text:00406DA5                 jmp     short loc_406D4E
.text:00406DA5 sub_406CF0      endp
.text:00406DA5
.text:00406DA5 ; ---------------------------------------------------------------------------
.text:00406DA7                 align 10h
.text:00406DB0
.text:00406DB0 ; =============== S U B R O U T I N E =======================================
.text:00406DB0
.text:00406DB0
.text:00406DB0 ; int __cdecl sub_406DB0(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:00406DB0 sub_406DB0      proc near               ; CODE XREF: sub_406F30+93↓p
.text:00406DB0
.text:00406DB0 pvReserved      = dword ptr -35Ch
.text:00406DB0 pUnkOuter       = dword ptr -358h
.text:00406DB0 dwClsContext    = dword ptr -354h
.text:00406DB0 riid            = dword ptr -350h
.text:00406DB0 ppv             = dword ptr -34Ch
.text:00406DB0 cchWideChar     = dword ptr -348h
.text:00406DB0 var_334         = byte ptr -334h
.text:00406DB0 var_330         = dword ptr -330h
.text:00406DB0 String2         = byte ptr -32Ch
.text:00406DB0 WideCharStr     = word ptr -21Ch
.text:00406DB0 lpMultiByteStr  = dword ptr  4
.text:00406DB0 lpString1       = dword ptr  8
.text:00406DB0
.text:00406DB0                 push    edi
.text:00406DB1                 push    esi
.text:00406DB2                 push    ebx
.text:00406DB3                 sub     esp, 350h
.text:00406DB9                 mov     edi, [esp+35Ch+lpString1]
.text:00406DC0                 mov     byte ptr [edi], 0
.text:00406DC3                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:00406DCA                 call    OleInitialize
.text:00406DCF                 sub     esp, 4
.text:00406DD2                 cmp     eax, 1
.text:00406DD5                 ja      loc_406F0F
.text:00406DDB                 mov     [esp+35Ch+riid], offset riid ; riid
.text:00406DE3                 lea     ecx, [esp+35Ch+var_330]
.text:00406DE7                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:00406DEB                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:00406DF3                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:00406DFB                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:00406E02                 call    CoCreateInstance
.text:00406E07                 sub     esp, 14h
.text:00406E0A                 test    eax, eax
.text:00406E0C                 js      loc_406F0F
.text:00406E12                 mov     ebx, [esp+35Ch+var_330]
.text:00406E16                 lea     edx, [esp+35Ch+var_334]
.text:00406E1A                 mov     esi, [ebx]
.text:00406E1C                 mov     [esp+35Ch+dwClsContext], edx
.text:00406E20                 mov     [esp+35Ch+pvReserved], ebx
.text:00406E23                 xor     ebx, ebx
.text:00406E25                 mov     [esp+35Ch+pUnkOuter], offset dword_40D8C0
.text:00406E2D                 call    dword ptr [esi]
.text:00406E2F                 sub     esp, 0Ch
.text:00406E32                 lea     esi, [esp+35Ch+WideCharStr]
.text:00406E39                 call    AreFileApisANSI
.text:00406E3E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:00406E46                 test    eax, eax
.text:00406E48                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:00406E4F                 setz    bl
.text:00406E52                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00406E56                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:00406E5E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:00406E62                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:00406E6A                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:00406E6D                 call    MultiByteToWideChar
.text:00406E72                 sub     esp, 18h
.text:00406E75                 test    eax, eax
.text:00406E77                 js      loc_406F0F
.text:00406E7D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:00406E81                 mov     ebx, [edx]
.text:00406E83                 mov     [esp+35Ch+dwClsContext], 0
.text:00406E8B                 mov     [esp+35Ch+pUnkOuter], esi
.text:00406E8F                 mov     [esp+35Ch+pvReserved], edx
.text:00406E92                 call    dword ptr [ebx+14h]
.text:00406E95                 sub     esp, 0Ch
.text:00406E98                 test    eax, eax
.text:00406E9A                 js      short loc_406F0F
.text:00406E9C                 mov     ebx, [esp+35Ch+var_330]
.text:00406EA0                 lea     esi, [esp+35Ch+String2]
.text:00406EA4                 mov     ecx, [ebx]
.text:00406EA6                 mov     [esp+35Ch+pvReserved], ebx
.text:00406EA9                 mov     [esp+35Ch+ppv], 0
.text:00406EB1                 mov     [esp+35Ch+riid], 0
.text:00406EB9                 mov     [esp+35Ch+dwClsContext], 104h
.text:00406EC1                 mov     [esp+35Ch+pUnkOuter], esi
.text:00406EC5                 call    dword ptr [ecx+0Ch]
.text:00406EC8                 sub     esp, 14h
.text:00406ECB                 mov     ebx, eax
.text:00406ECD                 test    eax, eax
.text:00406ECF                 js      short loc_406F0F
.text:00406ED1                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:00406ED5                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:00406ED8                 call    lstrcpyA
.text:00406EDD                 sub     esp, 8
.text:00406EE0                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:00406EE4                 mov     ecx, [edi]
.text:00406EE6                 mov     [esp+35Ch+pvReserved], edi
.text:00406EE9                 call    dword ptr [ecx+8]
.text:00406EEC                 sub     esp, 4
.text:00406EEF                 mov     edx, [esp+35Ch+var_330]
.text:00406EF3                 mov     esi, [edx]
.text:00406EF5                 mov     [esp+35Ch+pvReserved], edx
.text:00406EF8                 call    dword ptr [esi+8]
.text:00406EFB                 sub     esp, 4
.text:00406EFE                 call    CoUninitialize
.text:00406F03                 mov     eax, ebx
.text:00406F05
.text:00406F05 loc_406F05:                             ; CODE XREF: sub_406DB0+177↓j
.text:00406F05                 add     esp, 350h
.text:00406F0B                 pop     ebx
.text:00406F0C                 pop     esi
.text:00406F0D                 pop     edi
.text:00406F0E                 retn
.text:00406F0F ; ---------------------------------------------------------------------------
.text:00406F0F
.text:00406F0F loc_406F0F:                             ; CODE XREF: sub_406DB0+25↑j
.text:00406F0F                                         ; sub_406DB0+5C↑j ...
.text:00406F0F                 call    sub_407B60
.text:00406F14                 mov     edi, eax
.text:00406F16                 call    _errno
.text:00406F1B                 mov     [eax], edi
.text:00406F1D                 call    CoUninitialize
.text:00406F22                 mov     eax, 0FFFFFFFFh
.text:00406F27                 jmp     short loc_406F05
.text:00406F27 sub_406DB0      endp
.text:00406F27
.text:00406F27 ; ---------------------------------------------------------------------------
.text:00406F29 ; const char Source[]
.text:00406F29 Source          db '.lnk',0             ; DATA XREF: sub_406F30+53↓o
.text:00406F29                                         ; sub_406F30:loc_406F95↓o
.text:00406F2E                 align 10h
.text:00406F30
.text:00406F30 ; =============== S U B R O U T I N E =======================================
.text:00406F30
.text:00406F30
.text:00406F30 ; int __cdecl sub_406F30(char *, LPSTR lpString1)
.text:00406F30 sub_406F30      proc near               ; CODE XREF: sub_406CF0+96↑p
.text:00406F30
.text:00406F30 Str             = dword ptr -1Ch
.text:00406F30 Source          = dword ptr -18h
.text:00406F30 Destination     = dword ptr -14h
.text:00406F30 arg_0           = dword ptr  4
.text:00406F30 lpString1       = dword ptr  8
.text:00406F30
.text:00406F30                 push    ebp
.text:00406F31                 push    edi
.text:00406F32                 push    esi
.text:00406F33                 push    ebx
.text:00406F34                 sub     esp, 0Ch
.text:00406F37                 mov     ebx, [esp+1Ch+arg_0]
.text:00406F3B                 mov     ebp, [esp+1Ch+lpString1]
.text:00406F3F                 mov     [esp+1Ch+Str], ebx ; Str
.text:00406F42                 call    strlen
.text:00406F47                 add     eax, 5
.text:00406F4A                 mov     [esp+1Ch+Str], eax ; Size
.text:00406F4D                 call    malloc
.text:00406F52                 mov     [esp+1Ch+Destination], eax
.text:00406F56                 test    eax, eax
.text:00406F58                 jz      loc_407000
.text:00406F5E                 mov     [esp+1Ch+Source], ebx ; Source
.text:00406F62                 mov     [esp+1Ch+Str], eax ; Destination
.text:00406F65                 call    strcpy
.text:00406F6A                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:00406F72                 mov     eax, [esp+1Ch+Destination]
.text:00406F76                 mov     [esp+1Ch+Str], eax ; Str
.text:00406F79                 call    strrchr
.text:00406F7E                 test    eax, eax
.text:00406F80                 jz      short loc_406F95
.text:00406F82                 cld
.text:00406F83                 mov     ebx, offset Source ; ".lnk"
.text:00406F88                 mov     ecx, 5
.text:00406F8D                 mov     esi, eax
.text:00406F8F                 mov     edi, ebx
.text:00406F91                 repe cmpsb
.text:00406F93                 jz      short loc_406FA9
.text:00406F95
.text:00406F95 loc_406F95:                             ; CODE XREF: sub_406F30+50↑j
.text:00406F95                 mov     [esp+1Ch+Source], offset Source ; ".lnk"
.text:00406F9D                 mov     edx, [esp+1Ch+Destination]
.text:00406FA1                 mov     [esp+1Ch+Str], edx ; Destination
.text:00406FA4                 call    strcat
.text:00406FA9
.text:00406FA9 loc_406FA9:                             ; CODE XREF: sub_406F30+63↑j
.text:00406FA9                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:00406FB0                 call    SetErrorMode
.text:00406FB5                 sub     esp, 4
.text:00406FB8                 mov     ebx, [esp+1Ch+Destination]
.text:00406FBC                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:00406FC0                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:00406FC3                 call    sub_406DB0
.text:00406FC8                 mov     [esp+1Ch+Str], ebx ; Block
.text:00406FCB                 mov     esi, eax
.text:00406FCD                 call    free
.text:00406FD2                 mov     [esp+1Ch+Str], 0 ; uMode
.text:00406FD9                 call    SetErrorMode
.text:00406FDE                 sub     esp, 4
.text:00406FE1                 mov     [esp+1Ch+Str], ebp
.text:00406FE4                 call    sub_407430
.text:00406FE9                 inc     esi
.text:00406FEA                 jz      short loc_407000
.text:00406FEC                 mov     [esp+1Ch+arg_0], ebp
.text:00406FF0                 add     esp, 0Ch
.text:00406FF3                 pop     ebx
.text:00406FF4                 pop     esi
.text:00406FF5                 pop     edi
.text:00406FF6                 pop     ebp
.text:00406FF7                 jmp     strlen
.text:00406FF7 ; ---------------------------------------------------------------------------
.text:00406FFC                 align 10h
.text:00407000
.text:00407000 loc_407000:                             ; CODE XREF: sub_406F30+28↑j
.text:00407000                                         ; sub_406F30+BA↑j
.text:00407000                 add     esp, 0Ch
.text:00407003                 mov     eax, 0FFFFFFFFh
.text:00407008                 pop     ebx
.text:00407009                 pop     esi
.text:0040700A                 pop     edi
.text:0040700B                 pop     ebp
.text:0040700C                 retn
.text:0040700C sub_406F30      endp
.text:0040700C
.text:0040700C ; ---------------------------------------------------------------------------
.text:0040700D                 align 10h
.text:00407010
.text:00407010 ; =============== S U B R O U T I N E =======================================
.text:00407010
.text:00407010
.text:00407010 ; int __cdecl sub_407010(LPCSTR, int, int)
.text:00407010 sub_407010      proc near               ; CODE XREF: sub_406CF0+42↑p
.text:00407010                                         ; sub_406CF0+AE↑p ...
.text:00407010
.text:00407010 lpFileName      = dword ptr -2Ch
.text:00407010 dwDesiredAccess = dword ptr -28h
.text:00407010 dwShareMode     = dword ptr -24h
.text:00407010 lpSecurityAttributes= dword ptr -20h
.text:00407010 dwCreationDisposition= dword ptr -1Ch
.text:00407010 dwFlagsAndAttributes= dword ptr -18h
.text:00407010 hTemplateFile   = dword ptr -14h
.text:00407010 var_10          = dword ptr -10h
.text:00407010 var_C           = dword ptr -0Ch
.text:00407010 var_8           = dword ptr -8
.text:00407010 var_4           = dword ptr -4
.text:00407010 arg_0           = dword ptr  4
.text:00407010 arg_4           = dword ptr  8
.text:00407010 arg_8           = dword ptr  0Ch
.text:00407010
.text:00407010 ; FUNCTION CHUNK AT .text:00409570 SIZE 0000013A BYTES
.text:00407010
.text:00407010                 sub     esp, 0Ch
.text:00407013                 mov     ecx, [esp+0Ch+arg_0]
.text:00407017                 mov     edx, [esp+0Ch+arg_4]
.text:0040701B                 mov     eax, [esp+0Ch+arg_8]
.text:0040701F                 test    ecx, ecx
.text:00407021                 jnz     short loc_407040
.text:00407023                 test    edx, edx
.text:00407025                 jz      short loc_407040
.text:00407027                 test    eax, eax
.text:00407029                 jz      short loc_407040
.text:0040702B                 mov     [esp+0Ch+arg_4], eax
.text:0040702F                 mov     [esp+0Ch+arg_0], edx
.text:00407033                 add     esp, 0Ch
.text:00407036                 jmp     loc_409570
.text:00407036 ; ---------------------------------------------------------------------------
.text:0040703B                 align 10h
.text:00407040
.text:00407040 loc_407040:                             ; CODE XREF: sub_407010+11↑j
.text:00407040                                         ; sub_407010+15↑j ...
.text:00407040                 call    _errno
.text:00407045                 mov     dword ptr [eax], 16h
.text:0040704B                 mov     eax, 0FFFFFFFFh
.text:00407050                 add     esp, 0Ch
.text:00407053                 retn
.text:00407053 sub_407010      endp
.text:00407053
.text:00407053 ; ---------------------------------------------------------------------------
.text:00407054                 align 10h
.text:00407060
.text:00407060 ; =============== S U B R O U T I N E =======================================
.text:00407060
.text:00407060 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:00407060
.text:00407060 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:00407060 _win32_longpath proc near               ; CODE XREF: .text:00407824↓p
.text:00407060
.text:00407060 C               = dword ptr -278h
.text:00407060 lpFindFileData  = dword ptr -274h
.text:00407060 Destination     = byte ptr -268h
.text:00407060 var_267         = byte ptr -267h
.text:00407060 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:00407060 lpFileName      = dword ptr  8
.text:00407060
.text:00407060                 push    ebp
.text:00407061                 xor     eax, eax
.text:00407063                 push    edi
.text:00407064                 push    esi
.text:00407065                 push    ebx
.text:00407066                 sub     esp, 26Ch
.text:0040706C                 mov     esi, [esp+278h+lpFileName]
.text:00407073                 lea     ebp, [esp+278h+Destination]
.text:00407077                 test    esi, esi
.text:00407079                 jz      loc_4071D7
.text:0040707F                 movsx   edx, byte ptr [esi]
.text:00407082                 mov     [esp+278h+C], edx ; C
.text:00407085                 call    isalpha
.text:0040708A                 test    eax, eax
.text:0040708C                 jz      short loc_40709F
.text:0040708E                 mov     eax, [esp+278h+lpFileName]
.text:00407095                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:00407099                 jz      loc_4073DB
.text:0040709F
.text:0040709F loc_40709F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040709F                 mov     edx, [esp+278h+lpFileName]
.text:004070A6                 movzx   eax, byte ptr [edx]
.text:004070A9                 cmp     al, 2Fh ; '/'
.text:004070AB                 jz      loc_4072BB
.text:004070B1                 cmp     al, 5Ch ; '\'
.text:004070B3                 jz      loc_4072BB
.text:004070B9
.text:004070B9 loc_4070B9:                             ; CODE XREF: _win32_longpath+26E↓j
.text:004070B9                                         ; _win32_longpath+2B1↓j ...
.text:004070B9                 mov     [ebp+268h+Destination], 0
.text:004070BD                 movzx   ebx, byte ptr [esi]
.text:004070C0                 test    bl, bl
.text:004070C2                 jz      loc_4071B9
.text:004070C8                 nop
.text:004070C9                 lea     esi, [esi+0]
.text:004070D0
.text:004070D0 loc_4070D0:                             ; CODE XREF: _win32_longpath+153↓j
.text:004070D0                 cmp     bl, 2Fh ; '/'
.text:004070D3                 jz      loc_407270
.text:004070D9                 cmp     bl, 5Ch ; '\'
.text:004070DC                 jz      loc_407270
.text:004070E2
.text:004070E2 loc_4070E2:                             ; CODE XREF: _win32_longpath+21E↓j
.text:004070E2                                         ; _win32_longpath+22C↓j ...
.text:004070E2                 cmp     bl, 2Eh ; '.'
.text:004070E5                 jz      loc_407210
.text:004070EB
.text:004070EB loc_4070EB:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:004070EB                                         ; _win32_longpath+203↓j
.text:004070EB                 test    bl, bl
.text:004070ED                 jz      loc_4071B9
.text:004070F3                 cmp     bl, 2Fh ; '/'
.text:004070F6                 jz      short loc_407112
.text:004070F8                 cmp     bl, 5Ch ; '\'
.text:004070FB                 jz      short loc_407112
.text:004070FD                 lea     esi, [esi+0]
.text:00407100
.text:00407100 loc_407100:                             ; CODE XREF: _win32_longpath+B0↓j
.text:00407100                 inc     esi
.text:00407101                 movzx   ebx, byte ptr [esi]
.text:00407104                 test    bl, bl
.text:00407106                 jz      short loc_407112
.text:00407108                 cmp     bl, 2Fh ; '/'
.text:0040710B                 jz      short loc_407112
.text:0040710D                 cmp     bl, 5Ch ; '\'
.text:00407110                 jnz     short loc_407100
.text:00407112
.text:00407112 loc_407112:                             ; CODE XREF: _win32_longpath+96↑j
.text:00407112                                         ; _win32_longpath+9B↑j ...
.text:00407112                 mov     byte ptr [esi], 0
.text:00407115                 lea     edx, [esp+278h+FindFileData]
.text:0040711C                 mov     eax, [esp+278h+lpFileName]
.text:00407123                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:00407127                 mov     [esp+278h+C], eax ; lpFileName
.text:0040712A                 call    FindFirstFileA
.text:0040712F                 mov     [esi], bl
.text:00407131                 sub     esp, 8
.text:00407134                 mov     edi, eax
.text:00407136                 cmp     eax, 0FFFFFFFFh
.text:00407139                 jz      loc_4071FC
.text:0040713F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:00407146                 mov     ecx, ebx
.text:00407148                 nop
.text:00407149                 lea     esi, [esi+0]
.text:00407150
.text:00407150 loc_407150:                             ; CODE XREF: _win32_longpath+105↓j
.text:00407150                 mov     eax, [ebx]
.text:00407152                 add     ebx, 4
.text:00407155                 lea     edx, [eax-1010101h]
.text:0040715B                 not     eax
.text:0040715D                 and     edx, eax
.text:0040715F                 and     edx, 80808080h
.text:00407165                 jz      short loc_407150
.text:00407167                 test    edx, 8080h
.text:0040716D                 jnz     short loc_407175
.text:0040716F                 shr     edx, 10h
.text:00407172                 add     ebx, 2
.text:00407175
.text:00407175 loc_407175:                             ; CODE XREF: _win32_longpath+10D↑j
.text:00407175                 add     dl, dl
.text:00407177                 sbb     ebx, 3
.text:0040717A                 sub     ebx, ecx
.text:0040717C                 lea     ecx, [esp+278h+Destination]
.text:00407180                 sub     ecx, ebp
.text:00407182                 add     ecx, 105h
.text:00407188                 cmp     ecx, ebx
.text:0040718A                 jle     short loc_4071E2
.text:0040718C                 mov     [esp+278h+C], ebp ; Destination
.text:0040718F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:00407196                 add     ebp, ebx
.text:00407198                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0040719C                 call    strcpy
.text:004071A1                 mov     [esp+278h+C], edi ; hFindFile
.text:004071A4                 call    FindClose
.text:004071A9                 sub     esp, 4
.text:004071AC
.text:004071AC loc_4071AC:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:004071AC                 movzx   ecx, byte ptr [esi]
.text:004071AF                 test    cl, cl
.text:004071B1                 mov     bl, cl
.text:004071B3                 jnz     loc_4070D0
.text:004071B9
.text:004071B9 loc_4071B9:                             ; CODE XREF: _win32_longpath+62↑j
.text:004071B9                                         ; _win32_longpath+8D↑j
.text:004071B9                 mov     esi, [esp+278h+lpFileName]
.text:004071C0                 lea     ebp, [esp+278h+Destination]
.text:004071C4                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:004071C8                 mov     [esp+278h+C], esi ; Destination
.text:004071CB                 call    strcpy
.text:004071D0                 mov     eax, [esp+278h+lpFileName]
.text:004071D7
.text:004071D7 loc_4071D7:                             ; CODE XREF: _win32_longpath+19↑j
.text:004071D7                                         ; _win32_longpath+19A↓j
.text:004071D7                 add     esp, 26Ch
.text:004071DD                 pop     ebx
.text:004071DE                 pop     esi
.text:004071DF                 pop     edi
.text:004071E0                 pop     ebp
.text:004071E1                 retn
.text:004071E2 ; ---------------------------------------------------------------------------
.text:004071E2
.text:004071E2 loc_4071E2:                             ; CODE XREF: _win32_longpath+12A↑j
.text:004071E2                 mov     [esp+278h+C], edi ; hFindFile
.text:004071E5                 call    FindClose
.text:004071EA                 sub     esp, 4
.text:004071ED                 call    _errno
.text:004071F2                 mov     dword ptr [eax], 22h ; '"'
.text:004071F8
.text:004071F8 loc_4071F8:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:004071F8                 xor     eax, eax
.text:004071FA                 jmp     short loc_4071D7
.text:004071FC ; ---------------------------------------------------------------------------
.text:004071FC
.text:004071FC loc_4071FC:                             ; CODE XREF: _win32_longpath+D9↑j
.text:004071FC                 call    _errno
.text:00407201                 mov     dword ptr [eax], 16h
.text:00407207                 jmp     short loc_4071F8
.text:00407207 ; ---------------------------------------------------------------------------
.text:00407209                 align 10h
.text:00407210
.text:00407210 loc_407210:                             ; CODE XREF: _win32_longpath+85↑j
.text:00407210                 movzx   eax, byte ptr [esi+1]
.text:00407214                 test    al, al
.text:00407216                 jnz     short loc_407245
.text:00407218
.text:00407218 loc_407218:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:00407218                                         ; _win32_longpath+1EB↓j ...
.text:00407218                 test    bl, bl
.text:0040721A                 jz      short loc_40723C
.text:0040721C                 cmp     bl, 2Fh ; '/'
.text:0040721F                 jz      short loc_40723C
.text:00407221                 cmp     bl, 5Ch ; '\'
.text:00407224                 jz      short loc_40723C
.text:00407226
.text:00407226 loc_407226:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:00407226                 mov     [ebp+268h+Destination], bl
.text:00407229                 inc     esi
.text:0040722A                 inc     ebp
.text:0040722B                 movzx   ebx, byte ptr [esi]
.text:0040722E                 test    bl, bl
.text:00407230                 jz      short loc_40723C
.text:00407232                 cmp     bl, 2Fh ; '/'
.text:00407235                 jz      short loc_40723C
.text:00407237                 cmp     bl, 5Ch ; '\'
.text:0040723A                 jnz     short loc_407226
.text:0040723C
.text:0040723C loc_40723C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040723C                                         ; _win32_longpath+1BF↑j ...
.text:0040723C                 mov     [ebp+268h+Destination], 0
.text:00407240                 jmp     loc_4071AC
.text:00407245 ; ---------------------------------------------------------------------------
.text:00407245
.text:00407245 loc_407245:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:00407245                 cmp     al, 2Fh ; '/'
.text:00407247                 jz      short loc_407218
.text:00407249                 cmp     al, 5Ch ; '\'
.text:0040724B                 jz      short loc_407218
.text:0040724D                 cmp     al, 2Eh ; '.'
.text:0040724F                 jnz     loc_4070EB
.text:00407255                 movzx   eax, byte ptr [esi+2]
.text:00407259                 test    al, al
.text:0040725B                 jz      short loc_407218
.text:0040725D                 cmp     al, 2Fh ; '/'
.text:0040725F                 jz      short loc_407218
.text:00407261                 cmp     al, 5Ch ; '\'
.text:00407263                 jnz     loc_4070EB
.text:00407269                 jmp     short loc_407218
.text:00407269 ; ---------------------------------------------------------------------------
.text:0040726B                 align 10h
.text:00407270
.text:00407270 loc_407270:                             ; CODE XREF: _win32_longpath+73↑j
.text:00407270                                         ; _win32_longpath+7C↑j
.text:00407270                 mov     [ebp+268h+Destination], bl
.text:00407273                 inc     esi
.text:00407274                 inc     ebp
.text:00407275                 mov     [ebp+268h+Destination], 0
.text:00407279                 movzx   ebx, byte ptr [esi]
.text:0040727C                 test    bl, bl
.text:0040727E                 jz      loc_4070E2
.text:00407284                 cmp     bl, 2Fh ; '/'
.text:00407287                 jz      short loc_4072A0
.text:00407289                 cmp     bl, 5Ch ; '\'
.text:0040728C                 jnz     loc_4070E2
.text:00407292                 lea     esi, [esi+0]
.text:00407299                 lea     edi, [edi+0]
.text:004072A0
.text:004072A0 loc_4072A0:                             ; CODE XREF: _win32_longpath+227↑j
.text:004072A0                                         ; _win32_longpath+24F↓j ...
.text:004072A0                 inc     esi
.text:004072A1                 movzx   ebx, byte ptr [esi]
.text:004072A4                 test    bl, bl
.text:004072A6                 jz      loc_4070E2
.text:004072AC                 cmp     bl, 2Fh ; '/'
.text:004072AF                 jz      short loc_4072A0
.text:004072B1                 cmp     bl, 5Ch ; '\'
.text:004072B4                 jz      short loc_4072A0
.text:004072B6                 jmp     loc_4070E2
.text:004072BB ; ---------------------------------------------------------------------------
.text:004072BB
.text:004072BB loc_4072BB:                             ; CODE XREF: _win32_longpath+4B↑j
.text:004072BB                                         ; _win32_longpath+53↑j
.text:004072BB                 mov     edi, [esp+278h+lpFileName]
.text:004072C2                 movzx   edx, byte ptr [edi+1]
.text:004072C6                 cmp     dl, 2Fh ; '/'
.text:004072C9                 jz      short loc_4072D4
.text:004072CB                 cmp     dl, 5Ch ; '\'
.text:004072CE                 jnz     loc_4070B9
.text:004072D4
.text:004072D4 loc_4072D4:                             ; CODE XREF: _win32_longpath+269↑j
.text:004072D4                 mov     esi, [esp+278h+lpFileName]
.text:004072DB                 mov     [ebp+268h+Destination], al
.text:004072DE                 mov     ecx, [esp+278h+lpFileName]
.text:004072E5                 inc     ebp
.text:004072E6                 add     esi, 2
.text:004072E9                 movzx   ebx, byte ptr [ecx+1]
.text:004072ED                 mov     [ebp+268h+Destination], bl
.text:004072F0                 inc     ebp
.text:004072F1                 movzx   eax, byte ptr [ecx+2]
.text:004072F5                 test    al, al
.text:004072F7                 jz      loc_4073D3
.text:004072FD                 cmp     al, 2Fh ; '/'
.text:004072FF                 jz      loc_4073B8
.text:00407305                 cmp     al, 5Ch ; '\'
.text:00407307                 mov     bl, al
.text:00407309                 jz      loc_4073B8
.text:0040730F
.text:0040730F loc_40730F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040730F                                         ; _win32_longpath+376↓j
.text:0040730F                 test    bl, bl
.text:00407311                 jz      loc_4070B9
.text:00407317                 cmp     bl, 2Fh ; '/'
.text:0040731A                 jz      short loc_40733B
.text:0040731C                 cmp     bl, 5Ch ; '\'
.text:0040731F                 jz      short loc_40733B
.text:00407321
.text:00407321 loc_407321:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:00407321                 mov     [ebp+268h+Destination], bl
.text:00407324                 inc     esi
.text:00407325                 inc     ebp
.text:00407326                 movzx   ebx, byte ptr [esi]
.text:00407329                 test    bl, bl
.text:0040732B                 jz      loc_4070B9
.text:00407331                 cmp     bl, 2Fh ; '/'
.text:00407334                 jz      short loc_40733B
.text:00407336                 cmp     bl, 5Ch ; '\'
.text:00407339                 jnz     short loc_407321
.text:0040733B
.text:0040733B loc_40733B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040733B                                         ; _win32_longpath+2BF↑j ...
.text:0040733B                 test    bl, bl
.text:0040733D                 jz      loc_4070B9
.text:00407343                 mov     [ebp+268h+Destination], bl
.text:00407346                 inc     esi
.text:00407347                 inc     ebp
.text:00407348                 movzx   ebx, byte ptr [esi]
.text:0040734B                 test    bl, bl
.text:0040734D                 jz      loc_4070B9
.text:00407353                 cmp     bl, 2Fh ; '/'
.text:00407356                 jz      short loc_4073A0
.text:00407358                 cmp     bl, 5Ch ; '\'
.text:0040735B                 jz      short loc_4073A0
.text:0040735D
.text:0040735D loc_40735D:                             ; CODE XREF: _win32_longpath+356↓j
.text:0040735D                 test    bl, bl
.text:0040735F                 jz      loc_4070B9
.text:00407365                 cmp     bl, 2Fh ; '/'
.text:00407368                 jz      loc_4070B9
.text:0040736E                 cmp     bl, 5Ch ; '\'
.text:00407371                 jz      loc_4070B9
.text:00407377
.text:00407377 loc_407377:                             ; CODE XREF: _win32_longpath+333↓j
.text:00407377                 mov     [ebp+268h+Destination], bl
.text:0040737A                 inc     esi
.text:0040737B                 inc     ebp
.text:0040737C                 movzx   ebx, byte ptr [esi]
.text:0040737F                 test    bl, bl
.text:00407381                 jz      loc_4070B9
.text:00407387                 cmp     bl, 2Fh ; '/'
.text:0040738A                 jz      loc_4070B9
.text:00407390                 cmp     bl, 5Ch ; '\'
.text:00407393                 jnz     short loc_407377
.text:00407395                 jmp     loc_4070B9
.text:00407395 ; ---------------------------------------------------------------------------
.text:0040739A                 align 10h
.text:004073A0
.text:004073A0 loc_4073A0:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:004073A0                                         ; _win32_longpath+2FB↑j ...
.text:004073A0                 inc     esi
.text:004073A1                 movzx   ebx, byte ptr [esi]
.text:004073A4                 test    bl, bl
.text:004073A6                 jz      loc_4070B9
.text:004073AC                 cmp     bl, 2Fh ; '/'
.text:004073AF                 jz      short loc_4073A0
.text:004073B1                 cmp     bl, 5Ch ; '\'
.text:004073B4                 jz      short loc_4073A0
.text:004073B6                 jmp     short loc_40735D
.text:004073B8 ; ---------------------------------------------------------------------------
.text:004073B8
.text:004073B8 loc_4073B8:                             ; CODE XREF: _win32_longpath+29F↑j
.text:004073B8                                         ; _win32_longpath+2A9↑j ...
.text:004073B8                 inc     esi
.text:004073B9                 movzx   ebx, byte ptr [esi]
.text:004073BC                 test    bl, bl
.text:004073BE                 jz      loc_4070B9
.text:004073C4                 cmp     bl, 2Fh ; '/'
.text:004073C7                 jz      short loc_4073B8
.text:004073C9                 cmp     bl, 5Ch ; '\'
.text:004073CC                 jz      short loc_4073B8
.text:004073CE                 jmp     loc_40730F
.text:004073D3 ; ---------------------------------------------------------------------------
.text:004073D3
.text:004073D3 loc_4073D3:                             ; CODE XREF: _win32_longpath+297↑j
.text:004073D3                 movzx   ebx, byte ptr [esi]
.text:004073D6                 jmp     loc_40730F
.text:004073DB ; ---------------------------------------------------------------------------
.text:004073DB
.text:004073DB loc_4073DB:                             ; CODE XREF: _win32_longpath+39↑j
.text:004073DB                 movzx   ecx, byte ptr [eax]
.text:004073DE                 mov     esi, eax
.text:004073E0                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:004073E5                 add     esi, 2
.text:004073E8                 lea     ebp, [esp+12h]
.text:004073EC                 mov     [esp+278h+Destination], cl
.text:004073F0                 jmp     loc_4070B9
.text:004073F0 _win32_longpath endp
.text:004073F0
.text:004073F0 ; ---------------------------------------------------------------------------
.text:004073F5                 align 10h
.text:00407400                 sub     esp, 0Ch
.text:00407403                 mov     edx, [esp+10h]
.text:00407407                 mov     dword ptr [esp+4], 0
.text:0040740F                 mov     [esp], edx
.text:00407412                 call    sub_40A350
.text:00407417                 inc     eax
.text:00407418                 setnz   dl
.text:0040741B                 add     esp, 0Ch
.text:0040741E                 movzx   eax, dl
.text:00407421                 retn
.text:00407421 ; ---------------------------------------------------------------------------
.text:00407422                 align 10h
.text:00407430
.text:00407430 ; =============== S U B R O U T I N E =======================================
.text:00407430
.text:00407430
.text:00407430 sub_407430      proc near               ; CODE XREF: sub_406F30+B4↑p
.text:00407430                                         ; sub_40A220+AA↓p
.text:00407430
.text:00407430 arg_0           = dword ptr  4
.text:00407430
.text:00407430                 mov     ecx, [esp+arg_0]
.text:00407434                 mov     edx, ecx
.text:00407436                 movzx   eax, byte ptr [ecx]
.text:00407439                 test    al, al
.text:0040743B                 jz      short loc_40744C
.text:0040743D                 lea     esi, [esi+0]
.text:00407440
.text:00407440 loc_407440:                             ; CODE XREF: sub_407430+1A↓j
.text:00407440                 cmp     al, 5Ch ; '\'
.text:00407442                 jz      short loc_407450
.text:00407444
.text:00407444 loc_407444:                             ; CODE XREF: sub_407430+23↓j
.text:00407444                 inc     edx
.text:00407445                 movzx   eax, byte ptr [edx]
.text:00407448                 test    al, al
.text:0040744A                 jnz     short loc_407440
.text:0040744C
.text:0040744C loc_40744C:                             ; CODE XREF: sub_407430+B↑j
.text:0040744C                 mov     eax, ecx
.text:0040744E                 retn
.text:0040744E ; ---------------------------------------------------------------------------
.text:0040744F                 align 10h
.text:00407450
.text:00407450 loc_407450:                             ; CODE XREF: sub_407430+12↑j
.text:00407450                 mov     byte ptr [edx], 2Fh ; '/'
.text:00407453                 jmp     short loc_407444
.text:00407453 sub_407430      endp
.text:00407453
.text:00407453 ; ---------------------------------------------------------------------------
.text:00407455                 align 10h
.text:00407460                 push    ebx
.text:00407461                 sub     esp, 8
.text:00407464                 mov     ebx, [esp+14h]
.text:00407468                 mov     edx, [esp+10h]
.text:0040746C                 mov     [esp], ebx
.text:0040746F                 mov     [esp+4], edx
.text:00407473                 call    strcpy
.text:00407478                 movzx   eax, byte ptr [ebx]
.text:0040747B                 mov     edx, ebx
.text:0040747D                 test    al, al
.text:0040747F                 jz      short loc_40749C
.text:00407481                 jmp     short loc_407490
.text:00407481 ; ---------------------------------------------------------------------------
.text:00407483                 align 10h
.text:00407490
.text:00407490 loc_407490:                             ; CODE XREF: .text:00407481↑j
.text:00407490                                         ; .text:0040749A↓j
.text:00407490                 cmp     al, 5Ch ; '\'
.text:00407492                 jz      short loc_4074A3
.text:00407494
.text:00407494 loc_407494:                             ; CODE XREF: .text:004074A6↓j
.text:00407494                 inc     edx
.text:00407495                 movzx   eax, byte ptr [edx]
.text:00407498                 test    al, al
.text:0040749A                 jnz     short loc_407490
.text:0040749C
.text:0040749C loc_40749C:                             ; CODE XREF: .text:0040747F↑j
.text:0040749C                 add     esp, 8
.text:0040749F                 xor     eax, eax
.text:004074A1                 pop     ebx
.text:004074A2                 retn
.text:004074A3 ; ---------------------------------------------------------------------------
.text:004074A3
.text:004074A3 loc_4074A3:                             ; CODE XREF: .text:00407492↑j
.text:004074A3                 mov     byte ptr [edx], 2Fh ; '/'
.text:004074A6                 jmp     short loc_407494
.text:004074A6 ; ---------------------------------------------------------------------------
.text:004074A8                 align 10h
.text:004074B0
.text:004074B0 ; =============== S U B R O U T I N E =======================================
.text:004074B0
.text:004074B0
.text:004074B0 sub_4074B0      proc near               ; CODE XREF: sub_408380+16↓p
.text:004074B0                                         ; sub_408880+1F↓p ...
.text:004074B0
.text:004074B0 arg_0           = dword ptr  4
.text:004074B0
.text:004074B0                 mov     ecx, [esp+arg_0]
.text:004074B4                 mov     edx, ecx
.text:004074B6                 movzx   eax, byte ptr [ecx]
.text:004074B9                 test    al, al
.text:004074BB                 jz      short loc_4074CC
.text:004074BD                 lea     esi, [esi+0]
.text:004074C0
.text:004074C0 loc_4074C0:                             ; CODE XREF: sub_4074B0+1A↓j
.text:004074C0                 cmp     al, 2Fh ; '/'
.text:004074C2                 jz      short loc_4074D0
.text:004074C4
.text:004074C4 loc_4074C4:                             ; CODE XREF: sub_4074B0+23↓j
.text:004074C4                 inc     edx
.text:004074C5                 movzx   eax, byte ptr [edx]
.text:004074C8                 test    al, al
.text:004074CA                 jnz     short loc_4074C0
.text:004074CC
.text:004074CC loc_4074CC:                             ; CODE XREF: sub_4074B0+B↑j
.text:004074CC                 mov     eax, ecx
.text:004074CE                 retn
.text:004074CE ; ---------------------------------------------------------------------------
.text:004074CF                 align 10h
.text:004074D0
.text:004074D0 loc_4074D0:                             ; CODE XREF: sub_4074B0+12↑j
.text:004074D0                 mov     byte ptr [edx], 5Ch ; '\'
.text:004074D3                 jmp     short loc_4074C4
.text:004074D3 sub_4074B0      endp
.text:004074D3
.text:004074D3 ; ---------------------------------------------------------------------------
.text:004074D5                 align 10h
.text:004074E0                 push    ebx
.text:004074E1                 sub     esp, 8
.text:004074E4                 mov     ebx, [esp+14h]
.text:004074E8                 mov     edx, [esp+10h]
.text:004074EC                 mov     [esp], ebx
.text:004074EF                 mov     [esp+4], edx
.text:004074F3                 call    strcpy
.text:004074F8                 movzx   eax, byte ptr [ebx]
.text:004074FB                 mov     edx, ebx
.text:004074FD                 test    al, al
.text:004074FF                 jz      short loc_40751C
.text:00407501                 jmp     short loc_407510
.text:00407501 ; ---------------------------------------------------------------------------
.text:00407503                 align 10h
.text:00407510
.text:00407510 loc_407510:                             ; CODE XREF: .text:00407501↑j
.text:00407510                                         ; .text:0040751A↓j
.text:00407510                 cmp     al, 2Fh ; '/'
.text:00407512                 jz      short loc_407523
.text:00407514
.text:00407514 loc_407514:                             ; CODE XREF: .text:00407526↓j
.text:00407514                 inc     edx
.text:00407515                 movzx   eax, byte ptr [edx]
.text:00407518                 test    al, al
.text:0040751A                 jnz     short loc_407510
.text:0040751C
.text:0040751C loc_40751C:                             ; CODE XREF: .text:004074FF↑j
.text:0040751C                 add     esp, 8
.text:0040751F                 xor     eax, eax
.text:00407521                 pop     ebx
.text:00407522                 retn
.text:00407523 ; ---------------------------------------------------------------------------
.text:00407523
.text:00407523 loc_407523:                             ; CODE XREF: .text:00407512↑j
.text:00407523                 mov     byte ptr [edx], 5Ch ; '\'
.text:00407526                 jmp     short loc_407514
.text:00407526 ; ---------------------------------------------------------------------------
.text:00407528                 align 10h
.text:00407530                 push    ebx
.text:00407531                 sub     esp, 8
.text:00407534                 mov     ebx, [esp+14h]
.text:00407538                 mov     edx, [esp+10h]
.text:0040753C                 mov     [esp+4], ebx
.text:00407540                 mov     [esp], edx
.text:00407543                 call    sub_40A1D0
.text:00407548                 movzx   eax, byte ptr [ebx]
.text:0040754B                 mov     edx, ebx
.text:0040754D                 test    al, al
.text:0040754F                 jz      short loc_40756C
.text:00407551                 jmp     short loc_407560
.text:00407551 ; ---------------------------------------------------------------------------
.text:00407553                 align 10h
.text:00407560
.text:00407560 loc_407560:                             ; CODE XREF: .text:00407551↑j
.text:00407560                                         ; .text:0040756A↓j
.text:00407560                 cmp     al, 2Fh ; '/'
.text:00407562                 jz      short loc_407573
.text:00407564
.text:00407564 loc_407564:                             ; CODE XREF: .text:00407576↓j
.text:00407564                 inc     edx
.text:00407565                 movzx   eax, byte ptr [edx]
.text:00407568                 test    al, al
.text:0040756A                 jnz     short loc_407560
.text:0040756C
.text:0040756C loc_40756C:                             ; CODE XREF: .text:0040754F↑j
.text:0040756C                 add     esp, 8
.text:0040756F                 xor     eax, eax
.text:00407571                 pop     ebx
.text:00407572                 retn
.text:00407573 ; ---------------------------------------------------------------------------
.text:00407573
.text:00407573 loc_407573:                             ; CODE XREF: .text:00407562↑j
.text:00407573                 mov     byte ptr [edx], 5Ch ; '\'
.text:00407576                 jmp     short loc_407564
.text:00407576 ; ---------------------------------------------------------------------------
.text:00407578                 align 10h
.text:00407580                 push    ebx
.text:00407581                 sub     esp, 8
.text:00407584                 mov     ebx, [esp+14h]
.text:00407588                 mov     edx, [esp+10h]
.text:0040758C                 mov     [esp], ebx
.text:0040758F                 mov     [esp+4], edx
.text:00407593                 call    sub_40A1D0
.text:00407598                 movzx   eax, byte ptr [ebx]
.text:0040759B                 mov     edx, ebx
.text:0040759D                 test    al, al
.text:0040759F                 jz      short loc_4075BC
.text:004075A1                 jmp     short loc_4075B0
.text:004075A1 ; ---------------------------------------------------------------------------
.text:004075A3                 align 10h
.text:004075B0
.text:004075B0 loc_4075B0:                             ; CODE XREF: .text:004075A1↑j
.text:004075B0                                         ; .text:004075BA↓j
.text:004075B0                 cmp     al, 5Ch ; '\'
.text:004075B2                 jz      short loc_4075C1
.text:004075B4
.text:004075B4 loc_4075B4:                             ; CODE XREF: .text:004075C4↓j
.text:004075B4                 inc     edx
.text:004075B5                 movzx   eax, byte ptr [edx]
.text:004075B8                 test    al, al
.text:004075BA                 jnz     short loc_4075B0
.text:004075BC
.text:004075BC loc_4075BC:                             ; CODE XREF: .text:0040759F↑j
.text:004075BC                 add     esp, 8
.text:004075BF                 pop     ebx
.text:004075C0                 retn
.text:004075C1 ; ---------------------------------------------------------------------------
.text:004075C1
.text:004075C1 loc_4075C1:                             ; CODE XREF: .text:004075B2↑j
.text:004075C1                 mov     byte ptr [edx], 2Fh ; '/'
.text:004075C4                 jmp     short loc_4075B4
.text:004075C4 ; ---------------------------------------------------------------------------
.text:004075C6                 align 10h
.text:004075D0
.text:004075D0 ; =============== S U B R O U T I N E =======================================
.text:004075D0
.text:004075D0
.text:004075D0 ; int __cdecl sub_4075D0(LPSTR)
.text:004075D0 sub_4075D0      proc near               ; CODE XREF: .text:0040765E↓p
.text:004075D0                                         ; .text:0040769E↓p ...
.text:004075D0
.text:004075D0 hModule         = dword ptr -1Ch
.text:004075D0 lpFilename      = dword ptr -18h
.text:004075D0 nSize           = dword ptr -14h
.text:004075D0 arg_0           = dword ptr  4
.text:004075D0
.text:004075D0                 push    esi
.text:004075D1                 push    ebx
.text:004075D2                 sub     esp, 14h
.text:004075D5                 mov     esi, [esp+1Ch+arg_0]
.text:004075D9                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:004075E1                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:004075E8                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:004075EC                 call    GetModuleFileNameA
.text:004075F1                 sub     esp, 0Ch
.text:004075F4                 test    eax, eax
.text:004075F6                 jz      short loc_407638
.text:004075F8                 cmp     eax, 104h
.text:004075FD                 jg      short loc_407629
.text:004075FF
.text:004075FF loc_4075FF:                             ; CODE XREF: sub_4075D0+66↓j
.text:004075FF                                         ; sub_4075D0+78↓j
.text:004075FF                 movzx   eax, byte ptr [esi]
.text:00407602                 mov     edx, esi
.text:00407604                 test    al, al
.text:00407606                 jz      short loc_40761C
.text:00407608                 nop
.text:00407609                 lea     esi, [esi+0]
.text:00407610
.text:00407610 loc_407610:                             ; CODE XREF: sub_4075D0+4A↓j
.text:00407610                 cmp     al, 5Ch ; '\'
.text:00407612                 jz      short loc_407624
.text:00407614
.text:00407614 loc_407614:                             ; CODE XREF: sub_4075D0+57↓j
.text:00407614                 inc     edx
.text:00407615                 movzx   eax, byte ptr [edx]
.text:00407618                 test    al, al
.text:0040761A                 jnz     short loc_407610
.text:0040761C
.text:0040761C loc_40761C:                             ; CODE XREF: sub_4075D0+36↑j
.text:0040761C                 add     esp, 14h
.text:0040761F                 mov     eax, esi
.text:00407621                 pop     ebx
.text:00407622                 pop     esi
.text:00407623                 retn
.text:00407624 ; ---------------------------------------------------------------------------
.text:00407624
.text:00407624 loc_407624:                             ; CODE XREF: sub_4075D0+42↑j
.text:00407624                 mov     byte ptr [edx], 2Fh ; '/'
.text:00407627                 jmp     short loc_407614
.text:00407629 ; ---------------------------------------------------------------------------
.text:00407629
.text:00407629 loc_407629:                             ; CODE XREF: sub_4075D0+2D↑j
.text:00407629                 call    _errno
.text:0040762E                 mov     dword ptr [eax], 26h ; '&'
.text:00407634                 xor     esi, esi
.text:00407636                 jmp     short loc_4075FF
.text:00407638 ; ---------------------------------------------------------------------------
.text:00407638
.text:00407638 loc_407638:                             ; CODE XREF: sub_4075D0+26↑j
.text:00407638                 call    sub_407B60
.text:0040763D                 mov     ebx, eax
.text:0040763F                 xor     esi, esi
.text:00407641                 call    _errno
.text:00407646                 mov     [eax], ebx
.text:00407648                 jmp     short loc_4075FF
.text:00407648 sub_4075D0      endp
.text:00407648
.text:00407648 ; ---------------------------------------------------------------------------
.text:0040764A                 align 10h
.text:00407650                 sub     esp, 0Ch
.text:00407653                 mov     [esp+8], ebx
.text:00407657                 mov     ebx, [esp+10h]
.text:0040765B                 mov     [esp], ebx
.text:0040765E                 call    sub_4075D0
.text:00407663                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040766B                 mov     [esp], ebx
.text:0040766E                 call    strrchr
.text:00407673                 test    eax, eax
.text:00407675                 jz      short loc_40767A
.text:00407677                 lea     ebx, [eax+1]
.text:0040767A
.text:0040767A loc_40767A:                             ; CODE XREF: .text:00407675↑j
.text:0040767A                 mov     eax, ebx
.text:0040767C                 mov     ebx, [esp+8]
.text:00407680                 add     esp, 0Ch
.text:00407683                 retn
.text:00407683 ; ---------------------------------------------------------------------------
.text:00407684                 align 10h
.text:00407690                 sub     esp, 0Ch
.text:00407693                 mov     [esp+8], ebx
.text:00407697                 mov     ebx, [esp+10h]
.text:0040769B                 mov     [esp], ebx
.text:0040769E                 call    sub_4075D0
.text:004076A3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004076AB                 mov     [esp], ebx
.text:004076AE                 call    strrchr
.text:004076B3                 test    eax, eax
.text:004076B5                 jz      short loc_4076BA
.text:004076B7                 mov     byte ptr [eax], 0
.text:004076BA
.text:004076BA loc_4076BA:                             ; CODE XREF: .text:004076B5↑j
.text:004076BA                 mov     eax, ebx
.text:004076BC                 mov     ebx, [esp+8]
.text:004076C0                 add     esp, 0Ch
.text:004076C3                 retn
.text:004076C3 ; ---------------------------------------------------------------------------
.text:004076C4                 align 10h
.text:004076D0                 sub     esp, 0Ch
.text:004076D3                 mov     [esp+8], ebx
.text:004076D7                 mov     ebx, [esp+10h]
.text:004076DB                 mov     [esp], ebx
.text:004076DE                 call    sub_4075D0
.text:004076E3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004076EB                 mov     [esp], ebx
.text:004076EE                 call    strrchr
.text:004076F3                 test    eax, eax
.text:004076F5                 jz      short loc_4076FA
.text:004076F7                 mov     byte ptr [eax], 0
.text:004076FA
.text:004076FA loc_4076FA:                             ; CODE XREF: .text:004076F5↑j
.text:004076FA                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00407702                 mov     [esp], ebx
.text:00407705                 call    strrchr
.text:0040770A                 test    eax, eax
.text:0040770C                 jz      short loc_407711
.text:0040770E                 mov     byte ptr [eax], 0
.text:00407711
.text:00407711 loc_407711:                             ; CODE XREF: .text:0040770C↑j
.text:00407711                 mov     eax, ebx
.text:00407713                 mov     ebx, [esp+8]
.text:00407717                 add     esp, 0Ch
.text:0040771A                 retn
.text:0040771A ; ---------------------------------------------------------------------------
.text:0040771B                 align 10h
.text:00407720                 sub     esp, 1Ch
.text:00407723                 mov     edx, [esp+20h]
.text:00407727                 mov     [esp+10h], ebx
.text:0040772B                 xor     ebx, ebx
.text:0040772D                 mov     [esp+14h], esi
.text:00407731                 mov     [esp+18h], edi
.text:00407735                 mov     [esp], edx
.text:00407738                 call    sub_40A200
.text:0040773D                 mov     edx, [esp+24h]
.text:00407741                 mov     edi, eax
.text:00407743                 mov     [esp], edx
.text:00407746                 call    sub_40A200
.text:0040774B                 mov     [esp+4], eax
.text:0040774F                 mov     esi, eax
.text:00407751                 mov     [esp], edi
.text:00407754                 call    _stricmp_0
.text:00407759                 mov     [esp], edi
.text:0040775C                 test    eax, eax
.text:0040775E                 setz    bl
.text:00407761                 call    free
.text:00407766                 mov     [esp], esi
.text:00407769                 call    free
.text:0040776E                 mov     eax, ebx
.text:00407770                 mov     esi, [esp+14h]
.text:00407774                 mov     ebx, [esp+10h]
.text:00407778                 mov     edi, [esp+18h]
.text:0040777C                 add     esp, 1Ch
.text:0040777F                 retn
.text:00407780 ; ---------------------------------------------------------------------------
.text:00407780                 xor     eax, eax
.text:00407782                 retn
.text:00407782 ; ---------------------------------------------------------------------------
.text:00407783 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:004077B7↓o
.text:00407790 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:004077C6↓o
.text:004077A0 ; ---------------------------------------------------------------------------
.text:004077A0                 sub     esp, 1Ch
.text:004077A3                 mov     [esp+10h], ebx
.text:004077A7                 mov     ebx, [esp+20h]
.text:004077AB                 mov     [esp+18h], edi
.text:004077AF                 mov     edi, [esp+24h]
.text:004077B3                 mov     [esp+14h], esi
.text:004077B7                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:004077BE                 call    GetModuleHandleA
.text:004077C3                 sub     esp, 4
.text:004077C6                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:004077CE                 mov     [esp], eax
.text:004077D1                 call    GetProcAddress
.text:004077D6                 sub     esp, 8
.text:004077D9                 test    eax, eax
.text:004077DB                 jz      short loc_4077F3
.text:004077DD                 mov     dword ptr [esp+8], 104h
.text:004077E5                 mov     [esp+4], ebx
.text:004077E9                 mov     [esp], edi
.text:004077EC                 call    eax
.text:004077EE                 sub     esp, 0Ch
.text:004077F1                 mov     esi, eax
.text:004077F3
.text:004077F3 loc_4077F3:                             ; CODE XREF: .text:004077DB↑j
.text:004077F3                 test    esi, esi
.text:004077F5                 jz      short loc_407810
.text:004077F7
.text:004077F7 loc_4077F7:                             ; CODE XREF: .text:0040782B↓j
.text:004077F7                 mov     eax, ebx
.text:004077F9                 mov     esi, [esp+14h]
.text:004077FD                 mov     ebx, [esp+10h]
.text:00407801                 mov     edi, [esp+18h]
.text:00407805                 add     esp, 1Ch
.text:00407808                 retn
.text:00407808 ; ---------------------------------------------------------------------------
.text:00407809                 align 10h
.text:00407810
.text:00407810 loc_407810:                             ; CODE XREF: .text:004077F5↑j
.text:00407810                 call    sub_409F20
.text:00407815                 mov     [esp], ebx
.text:00407818                 mov     [esp+4], edi
.text:0040781C                 call    strcpy
.text:00407821                 mov     [esp], ebx
.text:00407824                 call    _win32_longpath
.text:00407829                 mov     ebx, eax
.text:0040782B                 jmp     short loc_4077F7
.text:0040782B ; ---------------------------------------------------------------------------
.text:0040782D                 align 10h
.text:00407830                 sub     esp, 1Ch
.text:00407833                 mov     [esp+18h], edi
.text:00407837                 mov     edi, [esp+20h]
.text:0040783B                 mov     [esp+10h], ebx
.text:0040783F                 mov     [esp+14h], esi
.text:00407843                 mov     dword ptr [esp+8], 0
.text:0040784B                 mov     dword ptr [esp+4], 0
.text:00407853                 mov     [esp], edi
.text:00407856                 call    GetShortPathNameA
.text:0040785B                 sub     esp, 0Ch
.text:0040785E                 mov     ebx, eax
.text:00407860                 test    eax, eax
.text:00407862                 jz      short loc_4078B0
.text:00407864                 lea     edx, [eax+1]
.text:00407867                 mov     [esp], edx
.text:0040786A                 call    malloc
.text:0040786F                 test    eax, eax
.text:00407871                 mov     esi, eax
.text:00407873                 jz      short loc_4078B0
.text:00407875                 mov     [esp+8], ebx
.text:00407879                 mov     [esp+4], eax
.text:0040787D                 mov     [esp], edi
.text:00407880                 call    GetShortPathNameA
.text:00407885                 sub     esp, 0Ch
.text:00407888                 mov     edx, esi
.text:0040788A                 test    eax, eax
.text:0040788C                 jz      short loc_4078A2
.text:0040788E                 mov     esi, esi
.text:00407890
.text:00407890 loc_407890:                             ; CODE XREF: .text:004078C0↓j
.text:00407890                 mov     ebx, [esp+10h]
.text:00407894                 mov     eax, edx
.text:00407896                 mov     esi, [esp+14h]
.text:0040789A                 mov     edi, [esp+18h]
.text:0040789E                 add     esp, 1Ch
.text:004078A1                 retn
.text:004078A2 ; ---------------------------------------------------------------------------
.text:004078A2
.text:004078A2 loc_4078A2:                             ; CODE XREF: .text:0040788C↑j
.text:004078A2                 mov     [esp], esi
.text:004078A5                 call    free
.text:004078AA                 lea     esi, [esi+0]
.text:004078B0
.text:004078B0 loc_4078B0:                             ; CODE XREF: .text:00407862↑j
.text:004078B0                                         ; .text:00407873↑j
.text:004078B0                 call    sub_407B60
.text:004078B5                 mov     esi, eax
.text:004078B7                 call    _errno
.text:004078BC                 mov     [eax], esi
.text:004078BE                 mov     edx, edi
.text:004078C0                 jmp     short loc_407890
.text:004078C0 ; ---------------------------------------------------------------------------
.text:004078C2                 align 10h
.text:004078D0
.text:004078D0 ; =============== S U B R O U T I N E =======================================
.text:004078D0
.text:004078D0 ; Attributes: info_from_lumina
.text:004078D0
.text:004078D0 ___get_errno    proc near               ; CODE XREF: sub_407B60+B↓p
.text:004078D0
.text:004078D0 arg_0           = dword ptr  4
.text:004078D0
.text:004078D0                 mov     eax, [esp+arg_0]
.text:004078D4                 cmp     eax, 53h ; 'S'
.text:004078D7                 jg      loc_4079D0
.text:004078DD                 cmp     eax, 52h ; 'R'
.text:004078E0                 jge     short loc_407932
.text:004078E2                 cmp     eax, 0Fh
.text:004078E5                 jz      short loc_407900
.text:004078E7                 cmp     eax, 0Fh
.text:004078EA                 jg      short loc_407960
.text:004078EC                 cmp     eax, 9
.text:004078EF                 jg      short loc_407940
.text:004078F1                 cmp     eax, 7
.text:004078F4                 jge     short loc_407939
.text:004078F6                 cmp     eax, 3
.text:004078F9                 jg      short loc_40791A
.text:004078FB                 cmp     eax, 2
.text:004078FE                 jl      short loc_407913
.text:00407900
.text:00407900 loc_407900:                             ; CODE XREF: ___get_errno+15↑j
.text:00407900                                         ; ___get_errno+9D↓j ...
.text:00407900                 mov     edx, 2
.text:00407905                 lea     esi, [esi+0]
.text:00407909                 lea     edi, [edi+0]
.text:00407910
.text:00407910 loc_407910:                             ; CODE XREF: ___get_errno+48↓j
.text:00407910                                         ; ___get_errno+59↓j ...
.text:00407910                 mov     eax, edx
.text:00407912                 retn
.text:00407913 ; ---------------------------------------------------------------------------
.text:00407913
.text:00407913 loc_407913:                             ; CODE XREF: ___get_errno+2E↑j
.text:00407913                                         ; ___get_errno+78↓j ...
.text:00407913                 mov     edx, 16h
.text:00407918                 jmp     short loc_407910
.text:0040791A ; ---------------------------------------------------------------------------
.text:0040791A
.text:0040791A loc_40791A:                             ; CODE XREF: ___get_errno+29↑j
.text:0040791A                 cmp     eax, 5
.text:0040791D                 jz      short loc_407932
.text:0040791F                 cmp     eax, 5
.text:00407922                 jg      short loc_40792B
.text:00407924                 mov     edx, 18h
.text:00407929                 jmp     short loc_407910
.text:0040792B ; ---------------------------------------------------------------------------
.text:0040792B
.text:0040792B loc_40792B:                             ; CODE XREF: ___get_errno+52↑j
.text:0040792B                                         ; ___get_errno+180↓j
.text:0040792B                 mov     edx, 9
.text:00407930                 jmp     short loc_407910
.text:00407932 ; ---------------------------------------------------------------------------
.text:00407932
.text:00407932 loc_407932:                             ; CODE XREF: ___get_errno+10↑j
.text:00407932                                         ; ___get_errno+4D↑j ...
.text:00407932                 mov     edx, 0Dh
.text:00407937                 jmp     short loc_407910
.text:00407939 ; ---------------------------------------------------------------------------
.text:00407939
.text:00407939 loc_407939:                             ; CODE XREF: ___get_errno+24↑j
.text:00407939                                         ; ___get_errno+73↓j ...
.text:00407939                 mov     edx, 0Ch
.text:0040793E                 jmp     short loc_407910
.text:00407940 ; ---------------------------------------------------------------------------
.text:00407940
.text:00407940 loc_407940:                             ; CODE XREF: ___get_errno+1F↑j
.text:00407940                 cmp     eax, 0Dh
.text:00407943                 jg      short loc_407939
.text:00407945                 cmp     eax, 0Ch
.text:00407948                 jge     short loc_407913
.text:0040794A                 cmp     eax, 0Ah
.text:0040794D                 mov     edx, 7
.text:00407952                 jz      short loc_407910
.text:00407954                 cmp     eax, 0Bh
.text:00407957                 jnz     short loc_407913
.text:00407959
.text:00407959 loc_407959:                             ; CODE XREF: ___get_errno+21A↓j
.text:00407959                 mov     edx, 8
.text:0040795E                 jmp     short loc_407910
.text:00407960 ; ---------------------------------------------------------------------------
.text:00407960
.text:00407960 loc_407960:                             ; CODE XREF: ___get_errno+1A↑j
.text:00407960                 cmp     eax, 22h ; '"'
.text:00407963                 jg      short loc_407994
.text:00407965                 cmp     eax, 16h
.text:00407968                 jge     short loc_407932
.text:0040796A                 cmp     eax, 12h
.text:0040796D                 jz      short loc_407900
.text:0040796F                 cmp     eax, 12h
.text:00407972                 jg      short loc_407985
.text:00407974                 cmp     eax, 10h
.text:00407977                 jz      short loc_407932
.text:00407979                 mov     edx, 12h
.text:0040797E                 cmp     eax, 11h
.text:00407981
.text:00407981 loc_407981:                             ; CODE XREF: ___get_errno+172↓j
.text:00407981                                         ; ___get_errno+24C↓j ...
.text:00407981                 jnz     short loc_407913
.text:00407983                 jmp     short loc_407910
.text:00407985 ; ---------------------------------------------------------------------------
.text:00407985
.text:00407985 loc_407985:                             ; CODE XREF: ___get_errno+A2↑j
.text:00407985                 cmp     eax, 14h
.text:00407988                 jle     short loc_407932
.text:0040798A
.text:0040798A loc_40798A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040798A                 mov     edx, 10h
.text:0040798F                 jmp     loc_407910
.text:00407994 ; ---------------------------------------------------------------------------
.text:00407994
.text:00407994 loc_407994:                             ; CODE XREF: ___get_errno+93↑j
.text:00407994                 cmp     eax, 41h ; 'A'
.text:00407997                 jz      short loc_407932
.text:00407999                 cmp     eax, 41h ; 'A'
.text:0040799C                 jg      short loc_4079B1
.text:0040799E                 cmp     eax, 24h ; '$'
.text:004079A1                 jz      short loc_407932
.text:004079A3                 cmp     eax, 35h ; '5'
.text:004079A6                 jnz     loc_407913
.text:004079AC                 jmp     loc_407900
.text:004079B1 ; ---------------------------------------------------------------------------
.text:004079B1
.text:004079B1 loc_4079B1:                             ; CODE XREF: ___get_errno+CC↑j
.text:004079B1                 cmp     eax, 43h ; 'C'
.text:004079B4                 jz      loc_407900
.text:004079BA                 cmp     eax, 50h ; 'P'
.text:004079BD                 jnz     loc_407913
.text:004079C3
.text:004079C3 loc_4079C3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:004079C3                 mov     edx, 11h
.text:004079C8                 jmp     loc_407910
.text:004079C8 ; ---------------------------------------------------------------------------
.text:004079CD                 align 10h
.text:004079D0
.text:004079D0 loc_4079D0:                             ; CODE XREF: ___get_errno+7↑j
.text:004079D0                 cmp     eax, 0A1h ; '¡'
.text:004079D5                 jz      loc_407900
.text:004079DB                 cmp     eax, 0A1h ; '¡'
.text:004079E0                 jg      loc_407A90
.text:004079E6                 cmp     eax, 81h
.text:004079EB                 jg      short loc_407A55
.text:004079ED                 cmp     eax, 80h ; '€'
.text:004079F2                 mov     edx, 0Ah
.text:004079F7                 jge     loc_407910
.text:004079FD                 cmp     eax, 6Ch ; 'l'
.text:00407A00                 jz      loc_407932
.text:00407A06                 cmp     eax, 6Ch ; 'l'
.text:00407A09                 jg      short loc_407A27
.text:00407A0B                 cmp     eax, 57h ; 'W'
.text:00407A0E                 jz      loc_407913
.text:00407A14                 cmp     eax, 59h ; 'Y'
.text:00407A17                 jnz     loc_407913
.text:00407A1D
.text:00407A1D loc_407A1D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:00407A1D                                         ; ___get_errno+23C↓j
.text:00407A1D                 mov     edx, 0Bh
.text:00407A22                 jmp     loc_407910
.text:00407A27 ; ---------------------------------------------------------------------------
.text:00407A27
.text:00407A27 loc_407A27:                             ; CODE XREF: ___get_errno+139↑j
.text:00407A27                 cmp     eax, 70h ; 'p'
.text:00407A2A                 mov     edx, 1Ch
.text:00407A2F                 jz      loc_407910
.text:00407A35                 cmp     eax, 70h ; 'p'
.text:00407A38                 jg      short loc_407A47
.text:00407A3A                 mov     edx, 20h ; ' '
.text:00407A3F                 cmp     eax, 6Dh ; 'm'
.text:00407A42                 jmp     loc_407981
.text:00407A47 ; ---------------------------------------------------------------------------
.text:00407A47
.text:00407A47 loc_407A47:                             ; CODE XREF: ___get_errno+168↑j
.text:00407A47                 cmp     eax, 72h ; 'r'
.text:00407A4A
.text:00407A4A loc_407A4A:                             ; CODE XREF: ___get_errno+19C↓j
.text:00407A4A                 jnz     loc_407913
.text:00407A50                 jmp     loc_40792B
.text:00407A55 ; ---------------------------------------------------------------------------
.text:00407A55
.text:00407A55 loc_407A55:                             ; CODE XREF: ___get_errno+11B↑j
.text:00407A55                 cmp     eax, 84h ; '„'
.text:00407A5A                 jz      loc_407932
.text:00407A60                 cmp     eax, 84h ; '„'
.text:00407A65                 jg      short loc_407A6E
.text:00407A67                 cmp     eax, 82h ; '‚'
.text:00407A6C                 jmp     short loc_407A4A
.text:00407A6E ; ---------------------------------------------------------------------------
.text:00407A6E
.text:00407A6E loc_407A6E:                             ; CODE XREF: ___get_errno+195↑j
.text:00407A6E                 cmp     eax, 91h ; '‘'
.text:00407A73                 mov     edx, 29h ; ')'
.text:00407A78                 jz      loc_407910
.text:00407A7E                 cmp     eax, 9Eh ; 'ž'
.text:00407A83
.text:00407A83 loc_407A83:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00407A83                 jnz     loc_407913
.text:00407A89                 jmp     loc_407932
.text:00407A89 ; ---------------------------------------------------------------------------
.text:00407A8E                 align 10h
.text:00407A90
.text:00407A90 loc_407A90:                             ; CODE XREF: ___get_errno+110↑j
.text:00407A90                 cmp     eax, 0CEh ; 'Î'
.text:00407A95                 jz      loc_407900
.text:00407A9B                 cmp     eax, 0CEh ; 'Î'
.text:00407AA0                 jg      short loc_407AF0
.text:00407AA2                 cmp     eax, 0AAh ; 'ª'
.text:00407AA7                 jz      loc_40798A
.text:00407AAD                 cmp     eax, 0AAh ; 'ª'
.text:00407AB2                 jg      short loc_407AC6
.text:00407AB4                 cmp     eax, 0A4h ; '¤'
.text:00407AB9                 jz      loc_407A1D
.text:00407ABF                 cmp     eax, 0A7h ; '§'
.text:00407AC4                 jmp     short loc_407A83
.text:00407AC6 ; ---------------------------------------------------------------------------
.text:00407AC6
.text:00407AC6 loc_407AC6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00407AC6                 cmp     eax, 0B7h ; '·'
.text:00407ACB                 jz      loc_4079C3
.text:00407AD1                 cmp     eax, 0B7h ; '·'
.text:00407AD6                 jl      loc_407913
.text:00407ADC                 sub     eax, 0BCh ; '¼'
.text:00407AE1                 cmp     eax, 0Eh
.text:00407AE4                 ja      loc_407913
.text:00407AEA                 jmp     loc_407959
.text:00407AEA ; ---------------------------------------------------------------------------
.text:00407AEF                 align 10h
.text:00407AF0
.text:00407AF0 loc_407AF0:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00407AF0                 cmp     eax, 46Bh
.text:00407AF5                 mov     edx, 24h ; '$'
.text:00407AFA                 jz      loc_407910
.text:00407B00                 cmp     eax, 46Bh
.text:00407B05                 jg      short loc_407B21
.text:00407B07                 cmp     eax, 0D7h ; '×'
.text:00407B0C                 jz      loc_407A1D
.text:00407B12                 mov     edx, 5
.text:00407B17                 cmp     eax, 45Dh
.text:00407B1C                 jmp     loc_407981
.text:00407B21 ; ---------------------------------------------------------------------------
.text:00407B21
.text:00407B21 loc_407B21:                             ; CODE XREF: ___get_errno+235↑j
.text:00407B21                 cmp     eax, 4D5h
.text:00407B26                 mov     edx, 4
.text:00407B2B                 jz      loc_407910
.text:00407B31                 cmp     eax, 4D5h
.text:00407B36                 jg      short loc_407B47
.text:00407B38                 mov     edx, 13h
.text:00407B3D                 cmp     eax, 4B0h
.text:00407B42                 jmp     loc_407981
.text:00407B47 ; ---------------------------------------------------------------------------
.text:00407B47
.text:00407B47 loc_407B47:                             ; CODE XREF: ___get_errno+266↑j
.text:00407B47                 cmp     eax, 718h
.text:00407B4C                 jnz     loc_407913
.text:00407B52                 jmp     loc_407939
.text:00407B52 ___get_errno    endp
.text:00407B52
.text:00407B52 ; ---------------------------------------------------------------------------
.text:00407B57                 align 10h
.text:00407B60
.text:00407B60 ; =============== S U B R O U T I N E =======================================
.text:00407B60
.text:00407B60
.text:00407B60 sub_407B60      proc near               ; CODE XREF: sub_406DB0:loc_406F0F↑p
.text:00407B60                                         ; sub_4075D0:loc_407638↑p ...
.text:00407B60
.text:00407B60 var_C           = dword ptr -0Ch
.text:00407B60
.text:00407B60                 sub     esp, 0Ch
.text:00407B63                 call    GetLastError
.text:00407B68                 mov     [esp+0Ch+var_C], eax
.text:00407B6B                 call    ___get_errno
.text:00407B70                 add     esp, 0Ch
.text:00407B73                 retn
.text:00407B73 sub_407B60      endp
.text:00407B73
.text:00407B73 ; ---------------------------------------------------------------------------
.text:00407B74                 align 10h
.text:00407B80 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:00407B80                                         ; DATA XREF: .data:off_410054↓o
.text:00407B94 ; const CHAR LibFileName[]
.text:00407B94 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_407BC0+11↓o
.text:00407B94                                         ; sub_407D30+C↓o ...
.text:00407BA1 ; const CHAR ProcName[]
.text:00407BA1 ProcName        db 'GetFileAttributesExA',0
.text:00407BA1                                         ; DATA XREF: sub_407BC0+28↓o
.text:00407BB6                 align 10h
.text:00407BC0
.text:00407BC0 ; =============== S U B R O U T I N E =======================================
.text:00407BC0
.text:00407BC0
.text:00407BC0 ; int __cdecl sub_407BC0(LPCSTR lpFileName, int)
.text:00407BC0 sub_407BC0      proc near               ; CODE XREF: .text:00408D64↓p
.text:00407BC0                                         ; sub_409160+37↓p
.text:00407BC0
.text:00407BC0 lpModuleName    = dword ptr -18Ch
.text:00407BC0 lpProcName      = dword ptr -188h
.text:00407BC0 var_184         = dword ptr -184h
.text:00407BC0 var_170         = dword ptr -170h
.text:00407BC0 var_164         = dword ptr -164h
.text:00407BC0 hModule         = dword ptr -160h
.text:00407BC0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00407BC0 lpFileName      = dword ptr  4
.text:00407BC0 arg_4           = dword ptr  8
.text:00407BC0
.text:00407BC0                 push    ebp
.text:00407BC1                 push    edi
.text:00407BC2                 push    esi
.text:00407BC3                 push    ebx
.text:00407BC4                 sub     esp, 17Ch
.text:00407BCA                 mov     ebx, [esp+18Ch+arg_4]
.text:00407BD1                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:00407BD8                 call    GetModuleHandleA
.text:00407BDD                 sub     esp, 4
.text:00407BE0                 mov     [esp+18Ch+hModule], eax
.text:00407BE4                 mov     edx, [esp+18Ch+hModule]
.text:00407BE8                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:00407BF0                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:00407BF3                 call    GetProcAddress
.text:00407BF8                 sub     esp, 8
.text:00407BFB                 mov     ebp, eax
.text:00407BFD                 mov     eax, [esp+18Ch+lpFileName]
.text:00407C04                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00407C07                 call    GetFileAttributesA
.text:00407C0C                 sub     esp, 4
.text:00407C0F                 mov     [esp+18Ch+var_164], eax
.text:00407C13                 xor     eax, eax
.text:00407C15                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:00407C1A                 jz      short loc_407C71
.text:00407C1C                 cld
.text:00407C1D                 mov     ecx, 50h ; 'P'
.text:00407C22                 lea     esi, [esp+18Ch+FindFileData]
.text:00407C26                 mov     edi, esi
.text:00407C28                 test    ebp, ebp
.text:00407C2A                 rep stosd
.text:00407C2C                 mov     [esp+18Ch+var_170], 0
.text:00407C34                 jz      short loc_407C55
.text:00407C36                 mov     [esp+18Ch+var_184], ebx
.text:00407C3A                 mov     ecx, [esp+18Ch+lpFileName]
.text:00407C41                 mov     [esp+18Ch+lpProcName], 0
.text:00407C49                 mov     [esp+18Ch+lpModuleName], ecx
.text:00407C4C                 call    ebp
.text:00407C4E                 sub     esp, 0Ch
.text:00407C51                 mov     [esp+18Ch+var_170], eax
.text:00407C55
.text:00407C55 loc_407C55:                             ; CODE XREF: sub_407BC0+74↑j
.text:00407C55                 mov     eax, [esp+18Ch+var_170]
.text:00407C59                 test    eax, eax
.text:00407C5B                 jz      short loc_407C80
.text:00407C5D
.text:00407C5D loc_407C5D:                             ; CODE XREF: sub_407BC0+131↓j
.text:00407C5D                                         ; sub_407BC0+14B↓j
.text:00407C5D                 mov     ebx, [esp+18Ch+hModule]
.text:00407C61                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:00407C64                 call    FreeLibrary
.text:00407C69                 sub     esp, 4
.text:00407C6C                 mov     eax, 1
.text:00407C71
.text:00407C71 loc_407C71:                             ; CODE XREF: sub_407BC0+5A↑j
.text:00407C71                 add     esp, 17Ch
.text:00407C77                 pop     ebx
.text:00407C78                 pop     esi
.text:00407C79                 pop     edi
.text:00407C7A                 pop     ebp
.text:00407C7B                 retn
.text:00407C7B ; ---------------------------------------------------------------------------
.text:00407C7C                 align 10h
.text:00407C80
.text:00407C80 loc_407C80:                             ; CODE XREF: sub_407BC0+9B↑j
.text:00407C80                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:00407C84                 mov     edx, [esp+18Ch+lpFileName]
.text:00407C8B                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:00407C8E                 call    FindFirstFileA
.text:00407C93                 sub     esp, 8
.text:00407C96                 xor     ecx, ecx
.text:00407C98                 cmp     eax, 0FFFFFFFFh
.text:00407C9B                 setnz   cl
.text:00407C9E                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:00407CA2                 mov     [ebx], edi
.text:00407CA4                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:00407CA8                 mov     [esp+18Ch+var_170], ecx
.text:00407CAC                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:00407CB0                 mov     [ebx+8], esi
.text:00407CB3                 mov     [ebx+4], ecx
.text:00407CB6                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:00407CBA                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:00407CBE                 mov     [ebx+0Ch], ebp
.text:00407CC1                 mov     [ebx+10h], edi
.text:00407CC4                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:00407CC8                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:00407CCC                 mov     [ebx+18h], esi
.text:00407CCF                 mov     [ebx+14h], ecx
.text:00407CD2                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:00407CD6                 mov     [ebx+1Ch], ebp
.text:00407CD9                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:00407CDD                 mov     [ebx+20h], edi
.text:00407CE0                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:00407CE3                 call    FindClose
.text:00407CE8                 sub     esp, 4
.text:00407CEB                 mov     esi, [esp+18Ch+var_170]
.text:00407CEF                 test    esi, esi
.text:00407CF1                 jnz     loc_407C5D
.text:00407CF7                 cld
.text:00407CF8                 mov     eax, [esp+18Ch+var_170]
.text:00407CFC                 mov     ecx, 9
.text:00407D01                 mov     edi, ebx
.text:00407D03                 rep stosd
.text:00407D05                 mov     ebp, [esp+18Ch+var_164]
.text:00407D09                 mov     [ebx], ebp
.text:00407D0B                 jmp     loc_407C5D
.text:00407D0B sub_407BC0      endp
.text:00407D0B
.text:00407D0B ; ---------------------------------------------------------------------------
.text:00407D10 ; const CHAR aFindfirstfilee[]
.text:00407D10 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_407D30+23↓o
.text:00407D21 ; const char asc_407D21[]
.text:00407D21 asc_407D21      db '\*',0               ; DATA XREF: sub_407D30:loc_407DBD↓o
.text:00407D24                 align 10h
.text:00407D30
.text:00407D30 ; =============== S U B R O U T I N E =======================================
.text:00407D30
.text:00407D30
.text:00407D30 ; int __cdecl sub_407D30(char *Str)
.text:00407D30 sub_407D30      proc near               ; CODE XREF: .text:00408E63↓p
.text:00407D30                                         ; sub_409160+3FA↓p ...
.text:00407D30
.text:00407D30 lpLibFileName   = dword ptr -18Ch
.text:00407D30 lpProcName      = dword ptr -188h
.text:00407D30 var_184         = dword ptr -184h
.text:00407D30 var_180         = dword ptr -180h
.text:00407D30 var_17C         = dword ptr -17Ch
.text:00407D30 var_178         = dword ptr -178h
.text:00407D30 var_164         = dword ptr -164h
.text:00407D30 hModule         = dword ptr -160h
.text:00407D30 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00407D30 Str             = dword ptr  4
.text:00407D30
.text:00407D30                 push    ebp
.text:00407D31                 push    edi
.text:00407D32                 xor     edi, edi
.text:00407D34                 push    esi
.text:00407D35                 push    ebx
.text:00407D36                 sub     esp, 17Ch
.text:00407D3C                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:00407D43                 call    LoadLibraryA
.text:00407D48                 sub     esp, 4
.text:00407D4B                 mov     [esp+18Ch+hModule], eax
.text:00407D4F                 mov     ecx, [esp+18Ch+hModule]
.text:00407D53                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:00407D5B                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:00407D5E                 call    GetProcAddress
.text:00407D63                 sub     esp, 8
.text:00407D66                 mov     edx, [esp+18Ch+Str]
.text:00407D6D                 mov     [esp+18Ch+var_164], eax
.text:00407D71                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:00407D74                 call    strlen
.text:00407D79                 lea     edx, [eax+5]
.text:00407D7C                 mov     ebx, eax
.text:00407D7E                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:00407D81                 call    malloc
.text:00407D86                 mov     esi, eax
.text:00407D88                 test    esi, esi
.text:00407D8A                 mov     eax, 1
.text:00407D8F                 jz      loc_407E6D
.text:00407D95                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00407D98                 mov     ebp, [esp+18Ch+Str]
.text:00407D9F                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:00407DA3                 call    strcpy
.text:00407DA8                 movzx   eax, byte ptr [ebx+esi-1]
.text:00407DAD                 cmp     al, 2Fh ; '/'
.text:00407DAF                 jz      loc_407E9B
.text:00407DB5                 cmp     al, 5Ch ; '\'
.text:00407DB7                 jz      loc_407E9B
.text:00407DBD
.text:00407DBD loc_407DBD:                             ; CODE XREF: sub_407D30+170↓j
.text:00407DBD                 mov     [esp+18Ch+lpProcName], offset asc_407D21 ; "\\*"
.text:00407DC5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00407DC8                 call    strcat
.text:00407DCD                 mov     eax, [esp+18Ch+var_164]
.text:00407DD1                 test    eax, eax
.text:00407DD3                 jz      loc_407E95
.text:00407DD9                 mov     [esp+18Ch+var_178], 0
.text:00407DE1                 lea     ebp, [esp+18Ch+FindFileData]
.text:00407DE5                 mov     [esp+18Ch+var_17C], 0
.text:00407DED                 mov     [esp+18Ch+var_180], 1
.text:00407DF5                 mov     [esp+18Ch+var_184], ebp
.text:00407DF9                 mov     [esp+18Ch+lpProcName], 0
.text:00407E01                 mov     [esp+18Ch+lpLibFileName], esi
.text:00407E04                 call    [esp+18Ch+var_164]
.text:00407E08                 sub     esp, 18h
.text:00407E0B                 mov     ebx, eax
.text:00407E0D                 cmp     eax, 0FFFFFFFFh
.text:00407E10                 jz      short loc_407E78
.text:00407E12                 lea     esi, [esi+0]
.text:00407E19                 lea     edi, [edi+0]
.text:00407E20
.text:00407E20 loc_407E20:                             ; CODE XREF: sub_407D30+109↓j
.text:00407E20                                         ; sub_407D30+161↓j
.text:00407E20                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:00407E25                 jz      short loc_407E28
.text:00407E27                 inc     edi
.text:00407E28
.text:00407E28 loc_407E28:                             ; CODE XREF: sub_407D30+F5↑j
.text:00407E28                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00407E2C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00407E2F                 call    FindNextFileA
.text:00407E34                 sub     esp, 8
.text:00407E37                 test    eax, eax
.text:00407E39                 jnz     short loc_407E20
.text:00407E3B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00407E3E                 call    FindClose
.text:00407E43                 sub     esp, 4
.text:00407E46                 mov     esi, [esp+18Ch+hModule]
.text:00407E4A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:00407E4D                 call    FreeLibrary
.text:00407E52                 sub     esp, 4
.text:00407E55                 mov     ebx, [esp+18Ch+Str]
.text:00407E5C                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:00407E5F                 call    sub_40A800
.text:00407E64                 test    eax, eax
.text:00407E66                 jz      short loc_407E6B
.text:00407E68                 add     edi, 2
.text:00407E6B
.text:00407E6B loc_407E6B:                             ; CODE XREF: sub_407D30+136↑j
.text:00407E6B                 mov     eax, edi
.text:00407E6D
.text:00407E6D loc_407E6D:                             ; CODE XREF: sub_407D30+5F↑j
.text:00407E6D                                         ; sub_407D30+163↓j
.text:00407E6D                 add     esp, 17Ch
.text:00407E73                 pop     ebx
.text:00407E74                 pop     esi
.text:00407E75                 pop     edi
.text:00407E76                 pop     ebp
.text:00407E77                 retn
.text:00407E78 ; ---------------------------------------------------------------------------
.text:00407E78
.text:00407E78 loc_407E78:                             ; CODE XREF: sub_407D30+E0↑j
.text:00407E78                                         ; sub_407D30+169↓j
.text:00407E78                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00407E7C                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:00407E7F                 call    FindFirstFileA
.text:00407E84                 mov     ebx, eax
.text:00407E86                 sub     esp, 8
.text:00407E89                 cmp     ebx, 0FFFFFFFFh
.text:00407E8C                 mov     eax, 2
.text:00407E91                 jnz     short loc_407E20
.text:00407E93                 jmp     short loc_407E6D
.text:00407E95 ; ---------------------------------------------------------------------------
.text:00407E95
.text:00407E95 loc_407E95:                             ; CODE XREF: sub_407D30+A3↑j
.text:00407E95                 lea     ebp, [esp+18Ch+FindFileData]
.text:00407E99                 jmp     short loc_407E78
.text:00407E9B ; ---------------------------------------------------------------------------
.text:00407E9B
.text:00407E9B loc_407E9B:                             ; CODE XREF: sub_407D30+7F↑j
.text:00407E9B                                         ; sub_407D30+87↑j
.text:00407E9B                 mov     byte ptr [ebx+esi-1], 0
.text:00407EA0                 jmp     loc_407DBD
.text:00407EA0 sub_407D30      endp
.text:00407EA0
.text:00407EA0 ; ---------------------------------------------------------------------------
.text:00407EA5                 align 10h
.text:00407EB0
.text:00407EB0 ; =============== S U B R O U T I N E =======================================
.text:00407EB0
.text:00407EB0
.text:00407EB0 ; int __cdecl sub_407EB0(HANDLE hNamedPipe, int)
.text:00407EB0 sub_407EB0      proc near               ; CODE XREF: sub_407010+2617↓p
.text:00407EB0                                         ; sub_40BE30+52↓j
.text:00407EB0
.text:00407EB0 hFile           = dword ptr -0ECh
.text:00407EB0 lpFileInformation= dword ptr -0E8h
.text:00407EB0 nBufferSize     = dword ptr -0E4h
.text:00407EB0 lpBytesRead     = dword ptr -0E0h
.text:00407EB0 lpTotalBytesAvail= dword ptr -0DCh
.text:00407EB0 lpBytesLeftThisMessage= dword ptr -0D8h
.text:00407EB0 var_C4          = dword ptr -0C4h
.text:00407EB0 var_C0          = dword ptr -0C0h
.text:00407EB0 var_BC          = dword ptr -0BCh
.text:00407EB0 var_B8          = dword ptr -0B8h
.text:00407EB0 var_B4          = dword ptr -0B4h
.text:00407EB0 var_B0          = dword ptr -0B0h
.text:00407EB0 var_AC          = dword ptr -0ACh
.text:00407EB0 var_A8          = dword ptr -0A8h
.text:00407EB0 TotalBytesAvail = dword ptr -0A0h
.text:00407EB0 var_9C          = dword ptr -9Ch
.text:00407EB0 var_98          = dword ptr -98h
.text:00407EB0 var_94          = dword ptr -94h
.text:00407EB0 var_90          = dword ptr -90h
.text:00407EB0 var_8C          = dword ptr -8Ch
.text:00407EB0 var_88          = dword ptr -88h
.text:00407EB0 var_84          = dword ptr -84h
.text:00407EB0 var_80          = dword ptr -80h
.text:00407EB0 var_7C          = dword ptr -7Ch
.text:00407EB0 var_78          = dword ptr -78h
.text:00407EB0 var_74          = dword ptr -74h
.text:00407EB0 var_70          = dword ptr -70h
.text:00407EB0 var_6C          = dword ptr -6Ch
.text:00407EB0 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:00407EB0 hNamedPipe      = dword ptr  4
.text:00407EB0 arg_4           = dword ptr  8
.text:00407EB0
.text:00407EB0                 push    ebp
.text:00407EB1                 mov     eax, 0FFFFFFFFh
.text:00407EB6                 push    edi
.text:00407EB7                 push    esi
.text:00407EB8                 push    ebx
.text:00407EB9                 sub     esp, 0DCh
.text:00407EBF                 mov     esi, [esp+0ECh+hNamedPipe]
.text:00407EC6                 mov     ebp, [esp+0ECh+arg_4]
.text:00407ECD                 cmp     esi, 0FFFFFFFFh
.text:00407ED0                 jz      loc_408251
.text:00407ED6                 cld
.text:00407ED7                 xor     eax, eax
.text:00407ED9                 lea     ebx, [esp+0ECh+FileInformation]
.text:00407EE0                 mov     ecx, 0Dh
.text:00407EE5                 mov     edi, ebx
.text:00407EE7                 rep stosd
.text:00407EE9                 mov     dword ptr [ebp+18h], 1
.text:00407EF0                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00407EF3                 call    GetFileType
.text:00407EF8                 sub     esp, 4
.text:00407EFB                 xor     edx, edx
.text:00407EFD                 cmp     eax, 2
.text:00407F00                 jz      loc_408330
.text:00407F06                 cmp     eax, 3
.text:00407F09                 jz      loc_408320
.text:00407F0F
.text:00407F0F loc_407F0F:                             ; CODE XREF: sub_407EB0+475↓j
.text:00407F0F                                         ; sub_407EB0+485↓j
.text:00407F0F                 or      [ebp+0], edx
.text:00407F12                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:00407F16                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00407F19                 call    GetFileInformationByHandle
.text:00407F1E                 sub     esp, 8
.text:00407F21                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00407F28                 test    ecx, ecx
.text:00407F2A                 jnz     short loc_407F60
.text:00407F2C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00407F33                 test    edx, edx
.text:00407F35                 jnz     short loc_407F60
.text:00407F37                 mov     edx, [ebp+0]
.text:00407F3A                 and     edx, 0F000h
.text:00407F40                 cmp     edx, 1000h
.text:00407F46                 jz      loc_4082B6
.text:00407F4C
.text:00407F4C loc_407F4C:                             ; CODE XREF: sub_407EB0+459↓j
.text:00407F4C                                         ; sub_407EB0+465↓j
.text:00407F4C                 test    ecx, ecx
.text:00407F4E                 jnz     short loc_407F60
.text:00407F50                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00407F57                 test    edx, edx
.text:00407F59                 jz      loc_408294
.text:00407F5F                 nop
.text:00407F60
.text:00407F60 loc_407F60:                             ; CODE XREF: sub_407EB0+7A↑j
.text:00407F60                                         ; sub_407EB0+85↑j ...
.text:00407F60                 cld
.text:00407F61                 mov     esi, ebx
.text:00407F63                 mov     dword ptr [ebp+14h], 0
.text:00407F6A                 lea     edi, [esp+0ECh+var_9C]
.text:00407F6E                 mov     ecx, 0Dh
.text:00407F73                 rep movsd
.text:00407F75                 xor     ebx, ebx
.text:00407F77                 xor     edi, edi
.text:00407F79                 mov     edx, [esp+0ECh+var_6C]
.text:00407F80                 mov     esi, [esp+0ECh+var_70]
.text:00407F84                 or      edx, ebx
.text:00407F86                 mov     ebx, [esp+0ECh+var_9C]
.text:00407F8A                 mov     [ebp+8], edx
.text:00407F8D                 or      edi, esi
.text:00407F8F                 xor     edx, edx
.text:00407F91                 mov     [ebp+0Ch], edi
.text:00407F94                 test    bl, 10h
.text:00407F97                 mov     esi, [esp+0ECh+var_80]
.text:00407F9B                 setz    dl
.text:00407F9E                 mov     [ebp+10h], esi
.text:00407FA1                 dec     edx
.text:00407FA2                 and     edx, 0FFFFC000h
.text:00407FA8                 add     edx, 8000h
.text:00407FAE                 or      edx, 124h
.text:00407FB4                 test    bl, 1
.text:00407FB7                 movzx   eax, dx
.text:00407FBA                 jnz     short loc_407FC1
.text:00407FBC                 or      eax, 92h
.text:00407FC1
.text:00407FC1 loc_407FC1:                             ; CODE XREF: sub_407EB0+10A↑j
.text:00407FC1                 or      [ebp+0], eax
.text:00407FC4                 xor     edx, edx
.text:00407FC6                 mov     ebx, [esp+0ECh+var_7C]
.text:00407FCA                 mov     ecx, [esp+0ECh+var_78]
.text:00407FCE                 mov     eax, edx
.text:00407FD0                 xor     esi, esi
.text:00407FD2                 mov     edx, [esp+0ECh+var_8C]
.text:00407FD6                 mov     edi, ebx
.text:00407FD8                 or      eax, edi
.text:00407FDA                 mov     [esp+0ECh+var_A8], eax
.text:00407FDE                 mov     ebx, ecx
.text:00407FE0                 mov     edi, [esp+0ECh+var_74]
.text:00407FE4                 or      ebx, esi
.text:00407FE6                 mov     esi, [esp+0ECh+var_A8]
.text:00407FEA                 mov     [esp+0ECh+var_AC], ebx
.text:00407FEE                 xor     ebx, ebx
.text:00407FF0                 mov     ecx, [esp+0ECh+var_AC]
.text:00407FF4                 mov     [ebp+34h], esi
.text:00407FF7                 mov     esi, [esp+0ECh+var_90]
.text:00407FFB                 mov     [ebp+18h], edi
.text:00407FFE                 xor     edi, edi
.text:00408000                 or      esi, ebx
.text:00408002                 mov     [ebp+30h], ecx
.text:00408005                 or      edi, edx
.text:00408007                 mov     edx, esi
.text:00408009                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00408011                 sub     edx, 0D53E8000h
.text:00408017                 mov     ebx, edi
.text:00408019                 sbb     ebx, 19DB1DEh
.text:0040801F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00408023                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040802B                 mov     [esp+0ECh+hFile], edx
.text:0040802E                 call    sub_40E110
.text:00408033                 mov     ecx, eax
.text:00408035                 shr     eax, 1Fh
.text:00408038                 dec     eax
.text:00408039                 and     ecx, eax
.text:0040803B                 mov     [ebp+38h], ecx
.text:0040803E                 mov     [esp+0ECh+hFile], esi
.text:00408041                 mov     [esp+0ECh+lpFileInformation], edi
.text:00408045                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040804D                 mov     [esp+0ECh+lpBytesRead], 0
.text:00408055                 call    sub_40E230
.text:0040805A                 lea     ebx, [eax+eax*4]
.text:0040805D                 xor     ecx, ecx
.text:0040805F                 lea     esi, [ebx+ebx*4]
.text:00408062                 shl     esi, 2
.text:00408065                 mov     edi, esi
.text:00408067                 shr     edi, 1Fh
.text:0040806A                 dec     edi
.text:0040806B                 and     edi, esi
.text:0040806D                 mov     [ebp+3Ch], edi
.text:00408070                 mov     esi, [esp+0ECh+var_98]
.text:00408074                 xor     edi, edi
.text:00408076                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040807E                 mov     edx, [esp+0ECh+var_94]
.text:00408082                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040808A                 or      esi, ecx
.text:0040808C                 or      edi, edx
.text:0040808E                 mov     edx, esi
.text:00408090                 mov     ecx, edi
.text:00408092                 sub     edx, 0D53E8000h
.text:00408098                 sbb     ecx, 19DB1DEh
.text:0040809E                 mov     [esp+0ECh+lpFileInformation], ecx
.text:004080A2                 mov     [esp+0ECh+hFile], edx
.text:004080A5                 call    sub_40E110
.text:004080AA                 mov     ebx, eax
.text:004080AC                 shr     eax, 1Fh
.text:004080AF                 dec     eax
.text:004080B0                 and     ebx, eax
.text:004080B2                 mov     [ebp+48h], ebx
.text:004080B5                 xor     ebx, ebx
.text:004080B7                 mov     [esp+0ECh+hFile], esi
.text:004080BA                 mov     [esp+0ECh+lpFileInformation], edi
.text:004080BE                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004080C6                 mov     [esp+0ECh+lpBytesRead], 0
.text:004080CE                 call    sub_40E230
.text:004080D3                 lea     ecx, [eax+eax*4]
.text:004080D6                 lea     esi, [ecx+ecx*4]
.text:004080D9                 shl     esi, 2
.text:004080DC                 mov     edi, esi
.text:004080DE                 shr     edi, 1Fh
.text:004080E1                 dec     edi
.text:004080E2                 and     edi, esi
.text:004080E4                 mov     [ebp+4Ch], edi
.text:004080E7                 mov     esi, [esp+0ECh+var_88]
.text:004080EB                 xor     edi, edi
.text:004080ED                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004080F5                 mov     edx, [esp+0ECh+var_84]
.text:004080F9                 mov     [esp+0ECh+lpBytesRead], 0
.text:00408101                 or      esi, ebx
.text:00408103                 or      edi, edx
.text:00408105                 mov     edx, esi
.text:00408107                 mov     ebx, edi
.text:00408109                 sub     edx, 0D53E8000h
.text:0040810F                 sbb     ebx, 19DB1DEh
.text:00408115                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00408119                 mov     [esp+0ECh+hFile], edx
.text:0040811C                 call    sub_40E110
.text:00408121                 mov     ecx, eax
.text:00408123                 shr     eax, 1Fh
.text:00408126                 dec     eax
.text:00408127                 and     ecx, eax
.text:00408129                 mov     [ebp+40h], ecx
.text:0040812C                 mov     [esp+0ECh+lpFileInformation], edi
.text:00408130                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00408138                 mov     [esp+0ECh+lpBytesRead], 0
.text:00408140                 mov     [esp+0ECh+hFile], esi
.text:00408143                 call    sub_40E230
.text:00408148                 mov     dword ptr [ebp+50h], 200h
.text:0040814F                 lea     ebx, [eax+eax*4]
.text:00408152                 mov     edi, [esp+0ECh+var_A8]
.text:00408156                 lea     edx, [ebx+ebx*4]
.text:00408159                 mov     eax, [esp+0ECh+var_AC]
.text:0040815D                 shl     edx, 2
.text:00408160                 mov     ecx, edx
.text:00408162                 shr     ecx, 1Fh
.text:00408165                 dec     ecx
.text:00408166                 and     ecx, edx
.text:00408168                 test    edi, edi
.text:0040816A                 mov     edx, [esp+0ECh+var_A8]
.text:0040816E                 mov     [ebp+44h], ecx
.text:00408171                 js      loc_408287
.text:00408177
.text:00408177 loc_408177:                             ; CODE XREF: sub_407EB0+3DF↓j
.text:00408177                 mov     edi, [esp+0ECh+var_AC]
.text:0040817B                 xor     esi, esi
.text:0040817D                 mov     ecx, eax
.text:0040817F                 shrd    ecx, edx, 9
.text:00408183                 mov     ebx, edx
.text:00408185                 mov     eax, esi
.text:00408187                 and     edi, 1FFh
.text:0040818D                 sar     ebx, 9
.text:00408190                 or      eax, edi
.text:00408192                 jz      short loc_40819A
.text:00408194                 add     ecx, 1
.text:00408197                 adc     ebx, 0
.text:0040819A
.text:0040819A loc_40819A:                             ; CODE XREF: sub_407EB0+2E2↑j
.text:0040819A                 mov     [ebp+5Ch], ebx
.text:0040819D                 mov     esi, dword_410050
.text:004081A3                 xor     edi, edi
.text:004081A5                 mov     [ebp+58h], ecx
.text:004081A8                 mov     ebx, dword_410050
.text:004081AE                 mov     ecx, [esp+0ECh+var_A8]
.text:004081B2                 mov     edx, [esp+0ECh+var_AC]
.text:004081B6                 mov     [ebp+50h], ebx
.text:004081B9                 shr     ebx, 9
.text:004081BC                 mov     [esp+0ECh+lpBytesRead], edi
.text:004081C0                 mov     [esp+0ECh+lpFileInformation], ecx
.text:004081C4                 mov     [esp+0ECh+nBufferSize], esi
.text:004081C8                 mov     [esp+0ECh+hFile], edx
.text:004081CB                 call    sub_40E110
.text:004081D0                 mov     [esp+0ECh+lpBytesRead], edi
.text:004081D4                 mov     ecx, [esp+0ECh+var_AC]
.text:004081D8                 mov     edi, [esp+0ECh+var_A8]
.text:004081DC                 mov     [esp+0ECh+var_BC], ebx
.text:004081E0                 mov     [esp+0ECh+var_B4], eax
.text:004081E4                 mov     [esp+0ECh+var_B0], edx
.text:004081E8                 mov     [esp+0ECh+var_B8], 0
.text:004081F0                 mov     [esp+0ECh+nBufferSize], esi
.text:004081F4                 mov     [esp+0ECh+hFile], ecx
.text:004081F7                 mov     [esp+0ECh+lpFileInformation], edi
.text:004081FB                 call    sub_40E230
.text:00408200                 mov     ebx, edx
.text:00408202                 or      ebx, eax
.text:00408204                 jz      short loc_408260
.text:00408206                 mov     edi, [esp+0ECh+var_B4]
.text:0040820A                 mov     esi, [esp+0ECh+var_B0]
.text:0040820E                 mov     eax, [esp+0ECh+var_BC]
.text:00408212                 mov     [esp+0ECh+var_C4], edi
.text:00408216                 mov     ecx, [esp+0ECh+var_B8]
.text:0040821A                 add     [esp+0ECh+var_C4], 1
.text:0040821F                 mov     [esp+0ECh+var_C0], esi
.text:00408223                 adc     [esp+0ECh+var_C0], 0
.text:00408228                 mul     [esp+0ECh+var_C4]
.text:0040822C                 mov     edi, [esp+0ECh+var_C0]
.text:00408230                 mov     ebx, edx
.text:00408232                 mov     edx, [esp+0ECh+var_C4]
.text:00408236                 mov     esi, eax
.text:00408238                 mov     eax, ebx
.text:0040823A                 imul    ecx, edx
.text:0040823D                 mov     edx, [esp+0ECh+var_BC]
.text:00408241                 imul    edx, edi
.text:00408244                 add     eax, ecx
.text:00408246                 lea     edi, [edx+eax]
.text:00408249
.text:00408249 loc_408249:                             ; CODE XREF: sub_407EB0+3D5↓j
.text:00408249                 mov     [ebp+58h], esi
.text:0040824C                 xor     eax, eax
.text:0040824E                 mov     [ebp+5Ch], edi
.text:00408251
.text:00408251 loc_408251:                             ; CODE XREF: sub_407EB0+20↑j
.text:00408251                 add     esp, 0DCh
.text:00408257                 pop     ebx
.text:00408258                 pop     esi
.text:00408259                 pop     edi
.text:0040825A                 pop     ebp
.text:0040825B                 retn
.text:0040825B ; ---------------------------------------------------------------------------
.text:0040825C                 align 10h
.text:00408260
.text:00408260 loc_408260:                             ; CODE XREF: sub_407EB0+354↑j
.text:00408260                 mov     eax, [esp+0ECh+var_B4]
.text:00408264                 mov     edi, [esp+0ECh+var_B8]
.text:00408268                 mov     ebx, [esp+0ECh+var_B4]
.text:0040826C                 mul     [esp+0ECh+var_BC]
.text:00408270                 mov     ecx, [esp+0ECh+var_BC]
.text:00408274                 imul    ebx, edi
.text:00408277                 mov     esi, eax
.text:00408279                 mov     eax, [esp+0ECh+var_B0]
.text:0040827D                 add     edx, ebx
.text:0040827F                 imul    ecx, eax
.text:00408282                 lea     edi, [ecx+edx]
.text:00408285                 jmp     short loc_408249
.text:00408287 ; ---------------------------------------------------------------------------
.text:00408287
.text:00408287 loc_408287:                             ; CODE XREF: sub_407EB0+2C1↑j
.text:00408287                 add     eax, 1FFh
.text:0040828C                 adc     edx, 0
.text:0040828F                 jmp     loc_408177
.text:00408294 ; ---------------------------------------------------------------------------
.text:00408294
.text:00408294 loc_408294:                             ; CODE XREF: sub_407EB0+A9↑j
.text:00408294                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00408297                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040829E                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:004082A2                 call    GetFileSize
.text:004082A7                 sub     esp, 8
.text:004082AA                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:004082B1                 jmp     loc_407F60
.text:004082B6 ; ---------------------------------------------------------------------------
.text:004082B6
.text:004082B6 loc_4082B6:                             ; CODE XREF: sub_407EB0+96↑j
.text:004082B6                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:004082BE                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:004082C2                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:004082CA                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:004082CE                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:004082D6                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:004082DE                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:004082E6                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:004082E9                 call    PeekNamedPipe
.text:004082EE                 sub     esp, 18h
.text:004082F1                 test    eax, eax
.text:004082F3                 jz      short loc_40830E
.text:004082F5                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:004082F9                 xor     eax, eax
.text:004082FB                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:00408302                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:00408309                 jmp     loc_407F4C
.text:0040830E ; ---------------------------------------------------------------------------
.text:0040830E
.text:0040830E loc_40830E:                             ; CODE XREF: sub_407EB0+443↑j
.text:0040830E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00408315                 jmp     loc_407F4C
.text:00408315 ; ---------------------------------------------------------------------------
.text:0040831A                 align 10h
.text:00408320
.text:00408320 loc_408320:                             ; CODE XREF: sub_407EB0+59↑j
.text:00408320                 mov     edx, 1000h
.text:00408325                 jmp     loc_407F0F
.text:00408325 ; ---------------------------------------------------------------------------
.text:0040832A                 align 10h
.text:00408330
.text:00408330 loc_408330:                             ; CODE XREF: sub_407EB0+50↑j
.text:00408330                 mov     edx, 2000h
.text:00408335                 jmp     loc_407F0F
.text:00408335 sub_407EB0      endp
.text:00408335
.text:00408335 ; ---------------------------------------------------------------------------
.text:0040833A aLnk_0          db '.lnk',0             ; DATA XREF: sub_408380+E0↓o
.text:0040833A                                         ; .text:00408A2A↓o ...
.text:0040833F ; const CHAR aKernel32[]
.text:0040833F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_408380+12D↓o
.text:0040833F                                         ; .text:004090DB↓o
.text:00408348 ; const CHAR aGetcompressedf[]
.text:00408348 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00408348                                         ; DATA XREF: sub_408380+13E↓o
.text:00408348                                         ; .text:004090EC↓o
.text:0040835F ; const CHAR aGetbinarytypea[]
.text:0040835F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_408380+333↓o
.text:0040835F                                         ; .text:00408A86↓o ...
.text:0040836E ; const char aPathext[]
.text:0040836E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_408380:loc_408767↓o
.text:0040836E                                         ; .text:loc_408B30↓o ...
.text:00408376                 align 10h
.text:00408380
.text:00408380 ; =============== S U B R O U T I N E =======================================
.text:00408380
.text:00408380
.text:00408380 ; int __cdecl sub_408380(char *String1, int)
.text:00408380 sub_408380      proc near               ; CODE XREF: sub_409160+3CD↓p
.text:00408380                                         ; sub_407010+2635↓p
.text:00408380
.text:00408380 Str             = dword ptr -6Ch
.text:00408380 lpProcName      = dword ptr -68h
.text:00408380 var_64          = dword ptr -64h
.text:00408380 var_60          = dword ptr -60h
.text:00408380 var_5C          = dword ptr -5Ch
.text:00408380 var_4C          = dword ptr -4Ch
.text:00408380 var_48          = dword ptr -48h
.text:00408380 var_44          = dword ptr -44h
.text:00408380 var_40          = dword ptr -40h
.text:00408380 var_3C          = dword ptr -3Ch
.text:00408380 var_38          = dword ptr -38h
.text:00408380 lpRootPathName  = dword ptr -30h
.text:00408380 var_2C          = byte ptr -2Ch
.text:00408380 var_28          = dword ptr -28h
.text:00408380 var_24          = dword ptr -24h
.text:00408380 var_20          = dword ptr -20h
.text:00408380 var_1C          = dword ptr -1Ch
.text:00408380 var_18          = byte ptr -18h
.text:00408380 String1         = dword ptr  4
.text:00408380 arg_4           = dword ptr  8
.text:00408380
.text:00408380                 push    ebp
.text:00408381                 push    edi
.text:00408382                 push    esi
.text:00408383                 push    ebx
.text:00408384                 sub     esp, 5Ch
.text:00408387                 mov     edx, [esp+6Ch+String1]
.text:0040838B                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040838E                 call    sub_40A430
.text:00408393                 mov     [esp+6Ch+Str], eax
.text:00408396                 call    sub_4074B0
.text:0040839B                 mov     [esp+6Ch+lpRootPathName], eax
.text:0040839F                 test    eax, eax
.text:004083A1                 jz      loc_4085D3
.text:004083A7                 mov     [esp+6Ch+Str], eax ; Str
.text:004083AA                 call    strlen
.text:004083AF                 mov     edx, [esp+6Ch+arg_4]
.text:004083B3                 mov     ebx, eax
.text:004083B5                 mov     esi, [edx+0Ch]
.text:004083B8                 mov     edi, [edx+8]
.text:004083BB                 mov     eax, esi
.text:004083BD                 or      eax, edi
.text:004083BF                 jz      loc_4087E0
.text:004083C5                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:004083C9                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:004083CC                 call    GetDriveTypeA
.text:004083D1                 sub     esp, 4
.text:004083D4                 cmp     eax, 4
.text:004083D7                 jz      loc_4087E0
.text:004083DD
.text:004083DD loc_4083DD:                             ; CODE XREF: sub_408380+48A↓j
.text:004083DD                                         ; sub_408380+4B2↓j
.text:004083DD                 mov     edx, [esp+6Ch+arg_4]
.text:004083E1                 mov     esi, [edx+14h]
.text:004083E4                 mov     edi, [edx+10h]
.text:004083E7                 mov     ecx, esi
.text:004083E9                 or      ecx, edi
.text:004083EB                 jnz     short loc_408415
.text:004083ED                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:004083F1                 xor     esi, esi
.text:004083F3                 xor     edi, edi
.text:004083F5                 test    ebp, ebp
.text:004083F7                 jz      short loc_408407
.text:004083F9                 movzx   ebx, byte ptr [ebp+0]
.text:004083FD                 test    bl, bl
.text:004083FF                 mov     cl, bl
.text:00408401                 jnz     loc_408791
.text:00408407
.text:00408407 loc_408407:                             ; CODE XREF: sub_408380+77↑j
.text:00408407                 xor     eax, eax
.text:00408409                 xor     edx, edx
.text:0040840B
.text:0040840B loc_40840B:                             ; CODE XREF: sub_408380+458↓j
.text:0040840B                 mov     ebp, [esp+6Ch+arg_4]
.text:0040840F                 mov     [ebp+10h], eax
.text:00408412                 mov     [ebp+14h], edx
.text:00408415
.text:00408415 loc_408415:                             ; CODE XREF: sub_408380+6B↑j
.text:00408415                 mov     edi, [esp+6Ch+String1]
.text:00408419                 xor     ebx, ebx
.text:0040841B                 test    edi, edi
.text:0040841D                 jz      loc_408693
.text:00408423                 mov     esi, [esp+6Ch+String1]
.text:00408427                 cmp     byte ptr [esi], 0
.text:0040842A                 jnz     loc_4086A0
.text:00408430
.text:00408430 loc_408430:                             ; CODE XREF: sub_408380+38C↓j
.text:00408430                                         ; sub_408380+397↓j
.text:00408430                 mov     ebp, [esp+6Ch+String1]
.text:00408434                 test    ebp, ebp
.text:00408436                 jz      loc_408693
.text:0040843C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00408444                 mov     edi, [esp+6Ch+String1]
.text:00408448                 mov     [esp+6Ch+Str], edi ; Str
.text:0040844B                 call    strrchr
.text:00408450                 test    eax, eax
.text:00408452                 jz      loc_408693
.text:00408458                 cld
.text:00408459                 mov     ecx, 5
.text:0040845E                 mov     esi, eax
.text:00408460                 mov     edi, offset aLnk_0 ; ".lnk"
.text:00408465                 repe cmpsb
.text:00408467                 setz    cl
.text:0040846A                 movzx   eax, cl
.text:0040846D                 lea     esi, [esi+0]
.text:00408470
.text:00408470 loc_408470:                             ; CODE XREF: sub_408380+315↓j
.text:00408470                 test    eax, eax
.text:00408472                 jz      short loc_40847A
.text:00408474                 or      ebx, 0A000h
.text:0040847A
.text:0040847A loc_40847A:                             ; CODE XREF: sub_408380+F2↑j
.text:0040847A                 mov     esi, [esp+6Ch+arg_4]
.text:0040847E                 xor     ecx, ecx
.text:00408480                 mov     edi, ds:dword_411190
.text:00408486                 or      [esi], ebx
.text:00408488                 mov     ebx, [esi+14h]
.text:0040848B                 mov     ebp, [esi+10h]
.text:0040848E                 mov     eax, ebx
.text:00408490                 xor     eax, ecx
.text:00408492                 xor     ebp, edi
.text:00408494                 or      eax, ebp
.text:00408496                 jnz     loc_408620
.text:0040849C
.text:0040849C loc_40849C:                             ; CODE XREF: sub_408380+30E↓j
.text:0040849C                 mov     ecx, dword_410050
.text:004084A2                 xor     esi, esi
.text:004084A4                 xor     edi, edi
.text:004084A6                 mov     edx, [esp+6Ch+arg_4]
.text:004084AA                 mov     [edx+50h], ecx
.text:004084AD                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:004084B4                 call    LoadLibraryA
.text:004084B9                 sub     esp, 4
.text:004084BC                 mov     ebp, eax
.text:004084BE                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:004084C6                 mov     [esp+6Ch+Str], eax ; hModule
.text:004084C9                 call    GetProcAddress
.text:004084CE                 sub     esp, 8
.text:004084D1                 test    eax, eax
.text:004084D3                 jz      short loc_408508
.text:004084D5                 mov     ebx, [esp+6Ch+String1]
.text:004084D9                 lea     esi, [esp+6Ch+var_2C]
.text:004084DD                 mov     [esp+6Ch+lpProcName], esi
.text:004084E1                 mov     [esp+6Ch+Str], ebx
.text:004084E4                 call    eax
.text:004084E6                 sub     esp, 8
.text:004084E9                 mov     ebx, eax
.text:004084EB                 cmp     eax, 0FFFFFFFFh
.text:004084EE                 jz      loc_408609
.text:004084F4
.text:004084F4 loc_4084F4:                             ; CODE XREF: sub_408380+29A↓j
.text:004084F4                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:004084F8                 mov     ecx, ebx
.text:004084FA                 xor     edi, edi
.text:004084FC                 xor     ebx, ebx
.text:004084FE                 mov     edx, esi
.text:00408500                 mov     esi, ecx
.text:00408502                 or      esi, edi
.text:00408504                 mov     edi, ebx
.text:00408506                 or      edi, edx
.text:00408508
.text:00408508 loc_408508:                             ; CODE XREF: sub_408380+153↑j
.text:00408508                                         ; sub_408380+294↓j
.text:00408508                 test    ebp, ebp
.text:0040850A                 jz      short loc_408517
.text:0040850C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040850F                 call    FreeLibrary
.text:00408514                 sub     esp, 4
.text:00408517
.text:00408517 loc_408517:                             ; CODE XREF: sub_408380+18A↑j
.text:00408517                 mov     ebp, edi
.text:00408519                 mov     edx, ebp
.text:0040851B                 mov     edi, esi
.text:0040851D                 or      edx, esi
.text:0040851F                 jnz     short loc_40852B
.text:00408521                 mov     eax, [esp+6Ch+arg_4]
.text:00408525                 mov     edi, [eax+30h]
.text:00408528                 mov     ebp, [eax+34h]
.text:0040852B
.text:0040852B loc_40852B:                             ; CODE XREF: sub_408380+19F↑j
.text:0040852B                 mov     [esp+6Ch+lpProcName], ebp
.text:0040852F                 mov     ebx, dword_410050
.text:00408535                 xor     esi, esi
.text:00408537                 mov     [esp+6Ch+var_60], esi
.text:0040853B                 mov     [esp+6Ch+Str], edi
.text:0040853E                 mov     [esp+6Ch+var_64], ebx
.text:00408542                 call    sub_40E110
.text:00408547                 mov     [esp+6Ch+var_3C], eax
.text:0040854B                 mov     ecx, dword_410050
.text:00408551                 mov     [esp+6Ch+lpProcName], ebp
.text:00408555                 mov     [esp+6Ch+var_38], edx
.text:00408559                 shr     ecx, 9
.text:0040855C                 mov     [esp+6Ch+var_44], ecx
.text:00408560                 mov     [esp+6Ch+var_40], 0
.text:00408568                 mov     [esp+6Ch+var_64], ebx
.text:0040856C                 mov     [esp+6Ch+var_60], esi
.text:00408570                 mov     [esp+6Ch+Str], edi
.text:00408573                 call    sub_40E230
.text:00408578                 mov     ebp, edx
.text:0040857A                 or      ebp, eax
.text:0040857C                 jz      short loc_4085E0
.text:0040857E                 mov     ebp, [esp+6Ch+var_3C]
.text:00408582                 mov     esi, [esp+6Ch+var_38]
.text:00408586                 mov     eax, [esp+6Ch+var_44]
.text:0040858A                 mov     [esp+6Ch+var_4C], ebp
.text:0040858E                 mov     ecx, [esp+6Ch+var_40]
.text:00408592                 mov     ebx, [esp+6Ch+var_44]
.text:00408596                 add     [esp+6Ch+var_4C], 1
.text:0040859B                 mov     [esp+6Ch+var_48], esi
.text:0040859F                 mov     edi, [esp+6Ch+var_4C]
.text:004085A3                 adc     [esp+6Ch+var_48], 0
.text:004085A8                 mul     [esp+6Ch+var_4C]
.text:004085AC                 imul    ecx, edi
.text:004085AF                 mov     esi, eax
.text:004085B1                 mov     eax, [esp+6Ch+var_48]
.text:004085B5                 add     edx, ecx
.text:004085B7                 imul    ebx, eax
.text:004085BA                 lea     edi, [ebx+edx]
.text:004085BD
.text:004085BD loc_4085BD:                             ; CODE XREF: sub_408380+287↓j
.text:004085BD                 mov     ebx, [esp+6Ch+arg_4]
.text:004085C1                 mov     [ebx+58h], esi
.text:004085C4                 mov     esi, [esp+6Ch+lpRootPathName]
.text:004085C8                 mov     [ebx+5Ch], edi
.text:004085CB                 mov     [esp+6Ch+Str], esi ; Block
.text:004085CE                 call    free
.text:004085D3
.text:004085D3 loc_4085D3:                             ; CODE XREF: sub_408380+21↑j
.text:004085D3                 add     esp, 5Ch
.text:004085D6                 xor     eax, eax
.text:004085D8                 pop     ebx
.text:004085D9                 pop     esi
.text:004085DA                 pop     edi
.text:004085DB                 pop     ebp
.text:004085DC                 retn
.text:004085DC ; ---------------------------------------------------------------------------
.text:004085DD                 align 10h
.text:004085E0
.text:004085E0 loc_4085E0:                             ; CODE XREF: sub_408380+1FC↑j
.text:004085E0                 mov     eax, [esp+6Ch+var_3C]
.text:004085E4                 mov     edi, [esp+6Ch+var_40]
.text:004085E8                 mov     ecx, [esp+6Ch+var_3C]
.text:004085EC                 mul     [esp+6Ch+var_44]
.text:004085F0                 mov     ebx, [esp+6Ch+var_44]
.text:004085F4                 imul    ecx, edi
.text:004085F7                 mov     ebp, edx
.text:004085F9                 mov     esi, eax
.text:004085FB                 mov     edx, [esp+6Ch+var_38]
.text:004085FF                 add     ebp, ecx
.text:00408601                 imul    ebx, edx
.text:00408604                 lea     edi, [ebx+ebp]
.text:00408607                 jmp     short loc_4085BD
.text:00408609 ; ---------------------------------------------------------------------------
.text:00408609
.text:00408609 loc_408609:                             ; CODE XREF: sub_408380+16E↑j
.text:00408609                 call    GetLastError
.text:0040860E                 xor     esi, esi
.text:00408610                 xor     edi, edi
.text:00408612                 test    eax, eax
.text:00408614                 jnz     loc_408508
.text:0040861A                 jmp     loc_4084F4
.text:0040861A ; ---------------------------------------------------------------------------
.text:0040861F                 align 10h
.text:00408620
.text:00408620 loc_408620:                             ; CODE XREF: sub_408380+116↑j
.text:00408620                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00408624                 lea     ecx, [esp+6Ch+var_20]
.text:00408628                 lea     ebx, [esp+6Ch+var_1C]
.text:0040862C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00408630                 lea     edi, [esp+6Ch+var_24]
.text:00408634                 lea     ebp, [esp+6Ch+var_28]
.text:00408638                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040863C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:00408640                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:00408644                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00408647                 call    sub_40AE50
.text:0040864C                 test    eax, eax
.text:0040864E                 jnz     short loc_408670
.text:00408650                 mov     [esp+6Ch+var_28], 1
.text:00408658                 mov     [esp+6Ch+var_24], 200h
.text:00408660                 mov     [esp+6Ch+var_20], 0
.text:00408668                 mov     [esp+6Ch+var_1C], 0
.text:00408670
.text:00408670 loc_408670:                             ; CODE XREF: sub_408380+2CE↑j
.text:00408670                 mov     ebp, [esp+6Ch+var_24]
.text:00408674                 mov     edi, [esp+6Ch+var_28]
.text:00408678                 mov     eax, [esp+6Ch+arg_4]
.text:0040867C                 imul    ebp, edi
.text:0040867F                 mov     esi, [eax+10h]
.text:00408682                 mov     dword_410050, ebp
.text:00408688                 mov     ds:dword_411190, esi
.text:0040868E                 jmp     loc_40849C
.text:00408693 ; ---------------------------------------------------------------------------
.text:00408693
.text:00408693 loc_408693:                             ; CODE XREF: sub_408380+9D↑j
.text:00408693                                         ; sub_408380+B6↑j ...
.text:00408693                 xor     eax, eax
.text:00408695                 jmp     loc_408470
.text:00408695 ; ---------------------------------------------------------------------------
.text:0040869A                 align 10h
.text:004086A0
.text:004086A0 loc_4086A0:                             ; CODE XREF: sub_408380+AA↑j
.text:004086A0                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:004086A7                 xor     ebp, ebp
.text:004086A9                 call    GetModuleHandleA
.text:004086AE                 sub     esp, 4
.text:004086B1                 mov     edi, eax
.text:004086B3                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004086BB                 mov     [esp+6Ch+Str], eax ; hModule
.text:004086BE                 call    GetProcAddress
.text:004086C3                 sub     esp, 8
.text:004086C6                 mov     edx, eax
.text:004086C8                 test    eax, eax
.text:004086CA                 jz      short loc_4086E4
.text:004086CC                 mov     eax, [esp+6Ch+String1]
.text:004086D0                 lea     ecx, [esp+6Ch+var_18]
.text:004086D4                 mov     [esp+6Ch+lpProcName], ecx
.text:004086D8                 mov     [esp+6Ch+Str], eax
.text:004086DB                 call    edx
.text:004086DD                 sub     esp, 8
.text:004086E0                 test    eax, eax
.text:004086E2                 jnz     short loc_408748
.text:004086E4
.text:004086E4 loc_4086E4:                             ; CODE XREF: sub_408380+34A↑j
.text:004086E4                 mov     edx, ds:Str
.text:004086EA                 test    edx, edx
.text:004086EC                 jz      short loc_408767
.text:004086EE
.text:004086EE loc_4086EE:                             ; CODE XREF: sub_408380+3FA↓j
.text:004086EE                                         ; sub_408380+40C↓j
.text:004086EE                 mov     eax, [esp+6Ch+String1]
.text:004086F2                 test    eax, eax
.text:004086F4                 jz      short loc_4086FF
.text:004086F6                 mov     esi, [esp+6Ch+String1]
.text:004086FA                 cmp     byte ptr [esi], 0
.text:004086FD                 jnz     short loc_40871C
.text:004086FF
.text:004086FF loc_4086FF:                             ; CODE XREF: sub_408380+374↑j
.text:004086FF                                         ; sub_408380+3B0↓j ...
.text:004086FF                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00408702                 call    FreeLibrary
.text:00408707                 sub     esp, 4
.text:0040870A                 test    ebp, ebp
.text:0040870C                 jz      loc_408430
.text:00408712                 mov     ebx, 49h ; 'I'
.text:00408717                 jmp     loc_408430
.text:0040871C ; ---------------------------------------------------------------------------
.text:0040871C
.text:0040871C loc_40871C:                             ; CODE XREF: sub_408380+37D↑j
.text:0040871C                 mov     [esp+6Ch+Str], esi ; Str
.text:0040871F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00408727                 call    strrchr
.text:0040872C                 test    eax, eax
.text:0040872E                 mov     esi, eax
.text:00408730                 jz      short loc_4086FF
.text:00408732                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:00408736                 mov     ecx, ds:Str
.text:0040873C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040873F                 call    strstr
.text:00408744                 test    eax, eax
.text:00408746                 jz      short loc_40874F
.text:00408748
.text:00408748 loc_408748:                             ; CODE XREF: sub_408380+362↑j
.text:00408748                                         ; sub_408380+3E5↓j
.text:00408748                 mov     ebp, 1
.text:0040874D                 jmp     short loc_4086FF
.text:0040874F ; ---------------------------------------------------------------------------
.text:0040874F
.text:0040874F loc_40874F:                             ; CODE XREF: sub_408380+3C6↑j
.text:0040874F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:00408753                 mov     edx, off_410054 ; ".com;.exe;.bat;.cmd"
.text:00408759                 mov     [esp+6Ch+Str], edx ; Str
.text:0040875C                 call    strstr
.text:00408761                 test    eax, eax
.text:00408763                 jz      short loc_4086FF
.text:00408765                 jmp     short loc_408748
.text:00408767 ; ---------------------------------------------------------------------------
.text:00408767
.text:00408767 loc_408767:                             ; CODE XREF: sub_408380+36C↑j
.text:00408767                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0040876E                 call    getenv
.text:00408773                 mov     ds:Str, eax
.text:00408778                 test    eax, eax
.text:0040877A                 jnz     loc_4086EE
.text:00408780                 mov     esi, off_410054 ; ".com;.exe;.bat;.cmd"
.text:00408786                 mov     ds:Str, esi
.text:0040878C                 jmp     loc_4086EE
.text:00408791 ; ---------------------------------------------------------------------------
.text:00408791
.text:00408791 loc_408791:                             ; CODE XREF: sub_408380+81↑j
.text:00408791                                         ; sub_408380+452↓j
.text:00408791                 shld    edi, esi, 8
.text:00408795                 movsx   eax, cl
.text:00408798                 shl     esi, 8
.text:0040879B                 cdq
.text:0040879C                 add     esi, eax
.text:0040879E                 adc     edi, edx
.text:004087A0                 mov     edx, edi
.text:004087A2                 xor     ebx, ebx
.text:004087A4                 and     edx, 0FF000000h
.text:004087AA                 mov     eax, edx
.text:004087AC                 or      eax, ebx
.text:004087AE                 jz      short loc_4087C9
.text:004087B0                 mov     ecx, edx
.text:004087B2                 xor     eax, eax
.text:004087B4                 shr     ecx, 10h
.text:004087B7                 mov     edx, esi
.text:004087B9                 xor     edx, ecx
.text:004087BB                 mov     ecx, edi
.text:004087BD                 xor     ecx, eax
.text:004087BF                 mov     esi, edx
.text:004087C1                 mov     edi, ecx
.text:004087C3                 and     edi, 0FFFFFFh
.text:004087C9
.text:004087C9 loc_4087C9:                             ; CODE XREF: sub_408380+42E↑j
.text:004087C9                 inc     ebp
.text:004087CA                 movzx   ebx, byte ptr [ebp+0]
.text:004087CE                 test    bl, bl
.text:004087D0                 mov     cl, bl
.text:004087D2                 jnz     short loc_408791
.text:004087D4                 mov     eax, esi
.text:004087D6                 mov     edx, edi
.text:004087D8                 jmp     loc_40840B
.text:004087D8 ; ---------------------------------------------------------------------------
.text:004087DD                 align 10h
.text:004087E0
.text:004087E0 loc_4087E0:                             ; CODE XREF: sub_408380+3F↑j
.text:004087E0                                         ; sub_408380+57↑j
.text:004087E0                 mov     edi, [esp+6Ch+lpRootPathName]
.text:004087E4                 mov     ebp, [esp+6Ch+String1]
.text:004087E8                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:004087EC                 mov     [esp+6Ch+Str], ebp ; String1
.text:004087EF                 call    _stricmp
.text:004087F4                 test    eax, eax
.text:004087F6                 jnz     short loc_408810
.text:004087F8                 mov     ebx, [esp+6Ch+arg_4]
.text:004087FC                 mov     dword ptr [ebx+8], 5
.text:00408803                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040880A                 jmp     loc_4083DD
.text:0040880A ; ---------------------------------------------------------------------------
.text:0040880F                 align 10h
.text:00408810
.text:00408810 loc_408810:                             ; CODE XREF: sub_408380+476↑j
.text:00408810                 mov     ebp, [esp+6Ch+String1]
.text:00408814                 xor     esi, esi
.text:00408816                 xor     edi, edi
.text:00408818                 add     ebp, ebx
.text:0040881A                 jz      short loc_408824
.text:0040881C                 movzx   ecx, byte ptr [ebp+0]
.text:00408820                 test    cl, cl
.text:00408822                 jnz     short loc_408837
.text:00408824
.text:00408824 loc_408824:                             ; CODE XREF: sub_408380+49A↑j
.text:00408824                 xor     eax, eax
.text:00408826                 xor     edx, edx
.text:00408828
.text:00408828 loc_408828:                             ; CODE XREF: sub_408380+4FE↓j
.text:00408828                 mov     ebp, [esp+6Ch+arg_4]
.text:0040882C                 mov     [ebp+8], eax
.text:0040882F                 mov     [ebp+0Ch], edx
.text:00408832                 jmp     loc_4083DD
.text:00408837 ; ---------------------------------------------------------------------------
.text:00408837
.text:00408837 loc_408837:                             ; CODE XREF: sub_408380+4A2↑j
.text:00408837                                         ; sub_408380+4F8↓j
.text:00408837                 shld    edi, esi, 8
.text:0040883B                 movsx   eax, cl
.text:0040883E                 shl     esi, 8
.text:00408841                 cdq
.text:00408842                 add     esi, eax
.text:00408844                 adc     edi, edx
.text:00408846                 mov     edx, edi
.text:00408848                 xor     ebx, ebx
.text:0040884A                 and     edx, 0FF000000h
.text:00408850                 mov     eax, edx
.text:00408852                 or      eax, ebx
.text:00408854                 jz      short loc_40886F
.text:00408856                 mov     ecx, edx
.text:00408858                 xor     eax, eax
.text:0040885A                 shr     ecx, 10h
.text:0040885D                 mov     edx, esi
.text:0040885F                 xor     edx, ecx
.text:00408861                 mov     ecx, edi
.text:00408863                 xor     ecx, eax
.text:00408865                 mov     esi, edx
.text:00408867                 mov     edi, ecx
.text:00408869                 and     edi, 0FFFFFFh
.text:0040886F
.text:0040886F loc_40886F:                             ; CODE XREF: sub_408380+4D4↑j
.text:0040886F                 inc     ebp
.text:00408870                 movzx   ebx, byte ptr [ebp+0]
.text:00408874                 test    bl, bl
.text:00408876                 mov     cl, bl
.text:00408878                 jnz     short loc_408837
.text:0040887A                 mov     eax, esi
.text:0040887C                 mov     edx, edi
.text:0040887E                 jmp     short loc_408828
.text:0040887E sub_408380      endp
.text:0040887E
.text:00408880
.text:00408880 ; =============== S U B R O U T I N E =======================================
.text:00408880
.text:00408880
.text:00408880 ; int __cdecl sub_408880(LPCSTR)
.text:00408880 sub_408880      proc near               ; CODE XREF: sub_40A550+CA↓p
.text:00408880
.text:00408880 lpRootPathName  = dword ptr -83Ch
.text:00408880 lpVolumeNameBuffer= dword ptr -838h
.text:00408880 nVolumeNameSize = dword ptr -834h
.text:00408880 lpVolumeSerialNumber= dword ptr -830h
.text:00408880 lpMaximumComponentLength= dword ptr -82Ch
.text:00408880 lpFileSystemFlags= dword ptr -828h
.text:00408880 lpFileSystemNameBuffer= dword ptr -824h
.text:00408880 nFileSystemNameSize= dword ptr -820h
.text:00408880 VolumeSerialNumber= dword ptr -818h
.text:00408880 MaximumComponentLength= dword ptr -814h
.text:00408880 FileSystemFlags = dword ptr -810h
.text:00408880 FileSystemNameBuffer= byte ptr -80Ch
.text:00408880 VolumeNameBuffer= byte ptr -40Ch
.text:00408880 var_4           = dword ptr -4
.text:00408880 arg_0           = dword ptr  4
.text:00408880
.text:00408880                 sub     esp, 83Ch
.text:00408886                 mov     [esp+83Ch+var_4], ebx
.text:0040888D                 mov     ebx, [esp+83Ch+arg_0]
.text:00408894                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:00408897                 call    sub_40A430
.text:0040889C                 mov     [esp+83Ch+lpRootPathName], eax
.text:0040889F                 call    sub_4074B0
.text:004088A4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:004088A7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:004088AB                 mov     ebx, eax
.text:004088AD                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:004088B1                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:004088B5                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:004088B9                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:004088BD                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:004088C1                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:004088C5                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:004088CC                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:004088D0                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:004088D4                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:004088DC                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:004088E4                 call    GetVolumeInformationA
.text:004088E9                 sub     esp, 20h
.text:004088EC                 test    eax, eax
.text:004088EE                 setz    cl
.text:004088F1                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:004088F4                 movzx   edx, cl
.text:004088F7                 dec     edx
.text:004088F8                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:004088FC                 call    free
.text:00408901                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00408905                 mov     ebx, [esp+83Ch+var_4]
.text:0040890C                 add     esp, 83Ch
.text:00408912                 retn
.text:00408912 sub_408880      endp
.text:00408912
.text:00408912 ; ---------------------------------------------------------------------------
.text:00408913                 align 10h
.text:00408920                 push    ebp
.text:00408921                 push    edi
.text:00408922                 xor     edi, edi
.text:00408924                 push    esi
.text:00408925                 xor     esi, esi
.text:00408927                 push    ebx
.text:00408928                 mov     ebp, [esp+14h]
.text:0040892C                 test    ebp, ebp
.text:0040892E                 jz      short loc_408938
.text:00408930                 movzx   ecx, byte ptr [ebp+0]
.text:00408934                 test    cl, cl
.text:00408936                 jnz     short loc_408941
.text:00408938
.text:00408938 loc_408938:                             ; CODE XREF: .text:0040892E↑j
.text:00408938                 xor     eax, eax
.text:0040893A                 xor     edx, edx
.text:0040893C
.text:0040893C loc_40893C:                             ; CODE XREF: .text:00408988↓j
.text:0040893C                 pop     ebx
.text:0040893D                 pop     esi
.text:0040893E                 pop     edi
.text:0040893F                 pop     ebp
.text:00408940                 retn
.text:00408941 ; ---------------------------------------------------------------------------
.text:00408941
.text:00408941 loc_408941:                             ; CODE XREF: .text:00408936↑j
.text:00408941                                         ; .text:00408982↓j
.text:00408941                 shld    edi, esi, 8
.text:00408945                 movsx   eax, cl
.text:00408948                 shl     esi, 8
.text:0040894B                 cdq
.text:0040894C                 add     esi, eax
.text:0040894E                 adc     edi, edx
.text:00408950                 mov     edx, edi
.text:00408952                 xor     ebx, ebx
.text:00408954                 and     edx, 0FF000000h
.text:0040895A                 mov     eax, edx
.text:0040895C                 or      eax, ebx
.text:0040895E                 jz      short loc_408979
.text:00408960                 mov     ecx, edx
.text:00408962                 xor     eax, eax
.text:00408964                 shr     ecx, 10h
.text:00408967                 mov     edx, esi
.text:00408969                 xor     edx, ecx
.text:0040896B                 mov     ecx, edi
.text:0040896D                 xor     ecx, eax
.text:0040896F                 mov     esi, edx
.text:00408971                 mov     edi, ecx
.text:00408973                 and     edi, 0FFFFFFh
.text:00408979
.text:00408979 loc_408979:                             ; CODE XREF: .text:0040895E↑j
.text:00408979                 inc     ebp
.text:0040897A                 movzx   ebx, byte ptr [ebp+0]
.text:0040897E                 test    bl, bl
.text:00408980                 mov     cl, bl
.text:00408982                 jnz     short loc_408941
.text:00408984                 mov     eax, esi
.text:00408986                 mov     edx, edi
.text:00408988                 jmp     short loc_40893C
.text:00408988 ; ---------------------------------------------------------------------------
.text:0040898A                 align 10h
.text:00408990                 sub     esp, 2Ch
.text:00408993                 lea     edx, [esp+24h]
.text:00408997                 lea     ecx, [esp+28h]
.text:0040899B                 mov     [esp+0Ch], edx
.text:0040899F                 lea     edx, [esp+1Ch]
.text:004089A3                 mov     [esp+4], edx
.text:004089A7                 mov     edx, [esp+30h]
.text:004089AB                 mov     [esp+10h], ecx
.text:004089AF                 lea     ecx, [esp+20h]
.text:004089B3                 mov     [esp+8], ecx
.text:004089B7                 mov     [esp], edx
.text:004089BA                 call    sub_40AE50
.text:004089BF                 test    eax, eax
.text:004089C1                 jnz     short loc_4089E3
.text:004089C3                 mov     dword ptr [esp+1Ch], 1
.text:004089CB                 mov     dword ptr [esp+20h], 200h
.text:004089D3                 mov     dword ptr [esp+24h], 0
.text:004089DB                 mov     dword ptr [esp+28h], 0
.text:004089E3
.text:004089E3 loc_4089E3:                             ; CODE XREF: .text:004089C1↑j
.text:004089E3                 mov     eax, [esp+20h]
.text:004089E7                 mov     ecx, [esp+1Ch]
.text:004089EB                 add     esp, 2Ch
.text:004089EE                 imul    eax, ecx
.text:004089F1                 retn
.text:004089F1 ; ---------------------------------------------------------------------------
.text:004089F2                 align 10h
.text:00408A00                 sub     esp, 1Ch
.text:00408A03                 mov     eax, [esp+20h]
.text:00408A07                 mov     [esp+14h], esi
.text:00408A0B                 mov     [esp+18h], edi
.text:00408A0F                 test    eax, eax
.text:00408A11                 jz      short loc_408A50
.text:00408A13                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00408A1B                 mov     [esp], eax
.text:00408A1E                 call    strrchr
.text:00408A23                 test    eax, eax
.text:00408A25                 jz      short loc_408A50
.text:00408A27                 cld
.text:00408A28                 mov     esi, eax
.text:00408A2A                 mov     edi, offset aLnk_0 ; ".lnk"
.text:00408A2F                 mov     ecx, 5
.text:00408A34                 repe cmpsb
.text:00408A36                 setz    dl
.text:00408A39                 movzx   eax, dl
.text:00408A3C                 lea     esi, [esi+0]
.text:00408A40
.text:00408A40 loc_408A40:                             ; CODE XREF: .text:00408A52↓j
.text:00408A40                 mov     esi, [esp+14h]
.text:00408A44                 mov     edi, [esp+18h]
.text:00408A48                 add     esp, 1Ch
.text:00408A4B                 retn
.text:00408A4B ; ---------------------------------------------------------------------------
.text:00408A4C                 align 10h
.text:00408A50
.text:00408A50 loc_408A50:                             ; CODE XREF: .text:00408A11↑j
.text:00408A50                                         ; .text:00408A25↑j
.text:00408A50                 xor     eax, eax
.text:00408A52                 jmp     short loc_408A40
.text:00408A52 ; ---------------------------------------------------------------------------
.text:00408A54                 align 10h
.text:00408A60                 sub     esp, 1Ch
.text:00408A63                 mov     [esp+10h], ebx
.text:00408A67                 mov     ebx, [esp+20h]
.text:00408A6B                 mov     [esp+14h], esi
.text:00408A6F                 mov     [esp+18h], edi
.text:00408A73                 xor     edi, edi
.text:00408A75                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:00408A7C                 call    GetModuleHandleA
.text:00408A81                 sub     esp, 4
.text:00408A84                 mov     esi, eax
.text:00408A86                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00408A8E                 mov     [esp], eax
.text:00408A91                 call    GetProcAddress
.text:00408A96                 sub     esp, 8
.text:00408A99                 test    eax, eax
.text:00408A9B                 jz      short loc_408AB1
.text:00408A9D                 mov     [esp], ebx
.text:00408AA0                 lea     ecx, [esp+0Ch]
.text:00408AA4                 mov     [esp+4], ecx
.text:00408AA8                 call    eax
.text:00408AAA                 sub     esp, 8
.text:00408AAD                 test    eax, eax
.text:00408AAF                 jnz     short loc_408B10
.text:00408AB1
.text:00408AB1 loc_408AB1:                             ; CODE XREF: .text:00408A9B↑j
.text:00408AB1                 mov     eax, ds:Str
.text:00408AB6                 test    eax, eax
.text:00408AB8                 jz      short loc_408B30
.text:00408ABA
.text:00408ABA loc_408ABA:                             ; CODE XREF: .text:00408B43↓j
.text:00408ABA                                         ; .text:00408B55↓j
.text:00408ABA                 test    ebx, ebx
.text:00408ABC                 jz      short loc_408AC3
.text:00408ABE                 cmp     byte ptr [ebx], 0
.text:00408AC1                 jnz     short loc_408AE0
.text:00408AC3
.text:00408AC3 loc_408AC3:                             ; CODE XREF: .text:00408ABC↑j
.text:00408AC3                                         ; .text:00408AF4↓j ...
.text:00408AC3                 mov     [esp], esi
.text:00408AC6                 call    FreeLibrary
.text:00408ACB                 sub     esp, 4
.text:00408ACE                 mov     eax, edi
.text:00408AD0                 mov     ebx, [esp+10h]
.text:00408AD4                 mov     esi, [esp+14h]
.text:00408AD8                 mov     edi, [esp+18h]
.text:00408ADC                 add     esp, 1Ch
.text:00408ADF                 retn
.text:00408AE0 ; ---------------------------------------------------------------------------
.text:00408AE0
.text:00408AE0 loc_408AE0:                             ; CODE XREF: .text:00408AC1↑j
.text:00408AE0                 mov     [esp], ebx
.text:00408AE3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00408AEB                 call    strrchr
.text:00408AF0                 test    eax, eax
.text:00408AF2                 mov     ebx, eax
.text:00408AF4                 jz      short loc_408AC3
.text:00408AF6                 mov     [esp+4], eax
.text:00408AFA                 mov     ecx, ds:Str
.text:00408B00                 mov     [esp], ecx
.text:00408B03                 call    strstr
.text:00408B08                 test    eax, eax
.text:00408B0A                 jz      short loc_408B17
.text:00408B0C                 lea     esi, [esi+0]
.text:00408B10
.text:00408B10 loc_408B10:                             ; CODE XREF: .text:00408AAF↑j
.text:00408B10                                         ; .text:00408B2D↓j
.text:00408B10                 mov     edi, 1
.text:00408B15                 jmp     short loc_408AC3
.text:00408B17 ; ---------------------------------------------------------------------------
.text:00408B17
.text:00408B17 loc_408B17:                             ; CODE XREF: .text:00408B0A↑j
.text:00408B17                 mov     [esp+4], ebx
.text:00408B1B                 mov     ebx, off_410054 ; ".com;.exe;.bat;.cmd"
.text:00408B21                 mov     [esp], ebx
.text:00408B24                 call    strstr
.text:00408B29                 test    eax, eax
.text:00408B2B                 jz      short loc_408AC3
.text:00408B2D                 jmp     short loc_408B10
.text:00408B2D ; ---------------------------------------------------------------------------
.text:00408B2F                 align 10h
.text:00408B30
.text:00408B30 loc_408B30:                             ; CODE XREF: .text:00408AB8↑j
.text:00408B30                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00408B37                 call    getenv
.text:00408B3C                 mov     ds:Str, eax
.text:00408B41                 test    eax, eax
.text:00408B43                 jnz     loc_408ABA
.text:00408B49                 mov     edx, off_410054 ; ".com;.exe;.bat;.cmd"
.text:00408B4F                 mov     ds:Str, edx
.text:00408B55                 jmp     loc_408ABA
.text:00408B55 ; ---------------------------------------------------------------------------
.text:00408B5A                 align 10h
.text:00408B60                 sub     esp, 0Ch
.text:00408B63                 mov     edx, [esp+10h]
.text:00408B67                 mov     [esp], edx
.text:00408B6A                 call    GetFileType
.text:00408B6F                 sub     esp, 4
.text:00408B72                 xor     edx, edx
.text:00408B74                 cmp     eax, 2
.text:00408B77                 jz      short loc_408B90
.text:00408B79                 cmp     eax, 3
.text:00408B7C                 jz      short loc_408B84
.text:00408B7E
.text:00408B7E loc_408B7E:                             ; CODE XREF: .text:00408B89↓j
.text:00408B7E                                         ; .text:00408B95↓j
.text:00408B7E                 mov     eax, edx
.text:00408B80                 add     esp, 0Ch
.text:00408B83                 retn
.text:00408B84 ; ---------------------------------------------------------------------------
.text:00408B84
.text:00408B84 loc_408B84:                             ; CODE XREF: .text:00408B7C↑j
.text:00408B84                 mov     edx, 1000h
.text:00408B89                 jmp     short loc_408B7E
.text:00408B89 ; ---------------------------------------------------------------------------
.text:00408B8B                 align 10h
.text:00408B90
.text:00408B90 loc_408B90:                             ; CODE XREF: .text:00408B77↑j
.text:00408B90                 mov     edx, 2000h
.text:00408B95                 jmp     short loc_408B7E
.text:00408B95 ; ---------------------------------------------------------------------------
.text:00408B97                 align 10h
.text:00408BA0                 mov     ecx, [esp+4]
.text:00408BA4                 xor     edx, edx
.text:00408BA6                 test    cl, 10h
.text:00408BA9                 setz    dl
.text:00408BAC                 dec     edx
.text:00408BAD                 and     edx, 0FFFFC000h
.text:00408BB3                 add     edx, 8000h
.text:00408BB9                 or      edx, 124h
.text:00408BBF                 test    cl, 1
.text:00408BC2                 movzx   eax, dx
.text:00408BC5                 jnz     short locret_408BCC
.text:00408BC7                 or      eax, 92h
.text:00408BCC
.text:00408BCC locret_408BCC:                          ; CODE XREF: .text:00408BC5↑j
.text:00408BCC                 retn
.text:00408BCC ; ---------------------------------------------------------------------------
.text:00408BCD                 align 10h
.text:00408BD0                 sub     esp, 2Ch
.text:00408BD3                 mov     [esp+20h], esi
.text:00408BD7                 mov     esi, [esp+30h]
.text:00408BDB                 mov     [esp+1Ch], ebx
.text:00408BDF                 xor     ebx, ebx
.text:00408BE1                 test    esi, esi
.text:00408BE3                 mov     [esp+24h], edi
.text:00408BE7                 mov     [esp+28h], ebp
.text:00408BEB                 jz      short loc_408C40
.text:00408BED                 cmp     byte ptr [esi], 0
.text:00408BF0                 jnz     short loc_408C44
.text:00408BF2
.text:00408BF2 loc_408BF2:                             ; CODE XREF: .text:00408CAC↓j
.text:00408BF2                                         ; .text:00408CB7↓j
.text:00408BF2                 test    esi, esi
.text:00408BF4                 jz      short loc_408C40
.text:00408BF6                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00408BFE                 mov     [esp], esi
.text:00408C01                 call    strrchr
.text:00408C06                 test    eax, eax
.text:00408C08                 jz      short loc_408C40
.text:00408C0A                 cld
.text:00408C0B                 mov     ecx, 5
.text:00408C10                 mov     esi, eax
.text:00408C12                 mov     edi, offset aLnk_0 ; ".lnk"
.text:00408C17                 repe cmpsb
.text:00408C19                 setz    cl
.text:00408C1C                 movzx   eax, cl
.text:00408C1F                 nop
.text:00408C20
.text:00408C20 loc_408C20:                             ; CODE XREF: .text:00408C42↓j
.text:00408C20                 test    eax, eax
.text:00408C22                 jz      short loc_408C2A
.text:00408C24                 or      ebx, 0A000h
.text:00408C2A
.text:00408C2A loc_408C2A:                             ; CODE XREF: .text:00408C22↑j
.text:00408C2A                 mov     eax, ebx
.text:00408C2C                 mov     esi, [esp+20h]
.text:00408C30                 mov     ebx, [esp+1Ch]
.text:00408C34                 mov     edi, [esp+24h]
.text:00408C38                 mov     ebp, [esp+28h]
.text:00408C3C                 add     esp, 2Ch
.text:00408C3F                 retn
.text:00408C40 ; ---------------------------------------------------------------------------
.text:00408C40
.text:00408C40 loc_408C40:                             ; CODE XREF: .text:00408BEB↑j
.text:00408C40                                         ; .text:00408BF4↑j ...
.text:00408C40                 xor     eax, eax
.text:00408C42                 jmp     short loc_408C20
.text:00408C44 ; ---------------------------------------------------------------------------
.text:00408C44
.text:00408C44 loc_408C44:                             ; CODE XREF: .text:00408BF0↑j
.text:00408C44                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:00408C4B                 call    GetModuleHandleA
.text:00408C50                 sub     esp, 4
.text:00408C53                 mov     ebp, eax
.text:00408C55                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00408C5D                 mov     [esp], eax
.text:00408C60                 call    GetProcAddress
.text:00408C65                 sub     esp, 8
.text:00408C68                 test    eax, eax
.text:00408C6A                 mov     dword ptr [esp+14h], 0
.text:00408C72                 jz      short loc_408C88
.text:00408C74                 mov     [esp], esi
.text:00408C77                 lea     ecx, [esp+18h]
.text:00408C7B                 mov     [esp+4], ecx
.text:00408C7F                 call    eax
.text:00408C81                 sub     esp, 8
.text:00408C84                 test    eax, eax
.text:00408C86                 jnz     short loc_408CE8
.text:00408C88
.text:00408C88 loc_408C88:                             ; CODE XREF: .text:00408C72↑j
.text:00408C88                 mov     edx, ds:Str
.text:00408C8E                 test    edx, edx
.text:00408C90                 jz      short loc_408D10
.text:00408C92
.text:00408C92 loc_408C92:                             ; CODE XREF: .text:00408D23↓j
.text:00408C92                                         ; .text:00408D35↓j
.text:00408C92                 test    esi, esi
.text:00408C94                 jz      short loc_408C9B
.text:00408C96                 cmp     byte ptr [esi], 0
.text:00408C99                 jnz     short loc_408CBC
.text:00408C9B
.text:00408C9B loc_408C9B:                             ; CODE XREF: .text:00408C94↑j
.text:00408C9B                                         ; .text:00408CD0↓j ...
.text:00408C9B                 mov     [esp], ebp
.text:00408C9E                 call    FreeLibrary
.text:00408CA3                 sub     esp, 4
.text:00408CA6                 mov     eax, [esp+14h]
.text:00408CAA                 test    eax, eax
.text:00408CAC                 jz      loc_408BF2
.text:00408CB2                 mov     ebx, 49h ; 'I'
.text:00408CB7                 jmp     loc_408BF2
.text:00408CBC ; ---------------------------------------------------------------------------
.text:00408CBC
.text:00408CBC loc_408CBC:                             ; CODE XREF: .text:00408C99↑j
.text:00408CBC                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00408CC4                 mov     [esp], esi
.text:00408CC7                 call    strrchr
.text:00408CCC                 test    eax, eax
.text:00408CCE                 mov     edi, eax
.text:00408CD0                 jz      short loc_408C9B
.text:00408CD2                 mov     [esp+4], eax
.text:00408CD6                 mov     edx, ds:Str
.text:00408CDC                 mov     [esp], edx
.text:00408CDF                 call    strstr
.text:00408CE4                 test    eax, eax
.text:00408CE6                 jz      short loc_408CF2
.text:00408CE8
.text:00408CE8 loc_408CE8:                             ; CODE XREF: .text:00408C86↑j
.text:00408CE8                                         ; .text:00408D08↓j
.text:00408CE8                 mov     dword ptr [esp+14h], 1
.text:00408CF0                 jmp     short loc_408C9B
.text:00408CF2 ; ---------------------------------------------------------------------------
.text:00408CF2
.text:00408CF2 loc_408CF2:                             ; CODE XREF: .text:00408CE6↑j
.text:00408CF2                 mov     [esp+4], edi
.text:00408CF6                 mov     edi, off_410054 ; ".com;.exe;.bat;.cmd"
.text:00408CFC                 mov     [esp], edi
.text:00408CFF                 call    strstr
.text:00408D04                 test    eax, eax
.text:00408D06                 jz      short loc_408C9B
.text:00408D08                 jmp     short loc_408CE8
.text:00408D08 ; ---------------------------------------------------------------------------
.text:00408D0A                 align 10h
.text:00408D10
.text:00408D10 loc_408D10:                             ; CODE XREF: .text:00408C90↑j
.text:00408D10                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00408D17                 call    getenv
.text:00408D1C                 mov     ds:Str, eax
.text:00408D21                 test    eax, eax
.text:00408D23                 jnz     loc_408C92
.text:00408D29                 mov     ecx, off_410054 ; ".com;.exe;.bat;.cmd"
.text:00408D2F                 mov     ds:Str, ecx
.text:00408D35                 jmp     loc_408C92
.text:00408D35 ; ---------------------------------------------------------------------------
.text:00408D3A                 align 10h
.text:00408D40                 push    esi
.text:00408D41                 push    ebx
.text:00408D42                 sub     esp, 864h
.text:00408D48                 mov     ebx, [esp+870h]
.text:00408D4F                 lea     edx, [esp+830h]
.text:00408D56                 mov     esi, [esp+874h]
.text:00408D5D                 mov     [esp+4], edx
.text:00408D61                 mov     [esp], ebx
.text:00408D64                 call    sub_407BC0
.text:00408D69                 xor     edx, edx
.text:00408D6B                 test    eax, eax
.text:00408D6D                 jz      loc_408E55
.text:00408D73                 mov     ecx, [esp+830h]
.text:00408D7A                 test    cl, 10h
.text:00408D7D                 mov     [esi], ecx
.text:00408D7F                 mov     eax, [esp+834h]
.text:00408D86                 mov     edx, [esp+838h]
.text:00408D8D                 mov     [esi+4], eax
.text:00408D90                 mov     [esi+8], edx
.text:00408D93                 mov     eax, [esp+83Ch]
.text:00408D9A                 mov     edx, [esp+840h]
.text:00408DA1                 mov     [esi+0Ch], eax
.text:00408DA4                 mov     [esi+10h], edx
.text:00408DA7                 mov     edx, [esp+848h]
.text:00408DAE                 mov     eax, [esp+844h]
.text:00408DB5                 mov     [esi+18h], edx
.text:00408DB8                 mov     [esi+14h], eax
.text:00408DBB                 mov     edx, [esp+84Ch]
.text:00408DC2                 mov     [esi+20h], edx
.text:00408DC5                 mov     edx, [esp+850h]
.text:00408DCC                 mov     [esi+24h], edx
.text:00408DCF                 jnz     loc_408E60
.text:00408DD5                 mov     dword ptr [esi+28h], 1
.text:00408DDC
.text:00408DDC loc_408DDC:                             ; CODE XREF: .text:00408E6B↓j
.text:00408DDC                 mov     [esp], ebx
.text:00408DDF                 call    sub_40A430
.text:00408DE4                 mov     [esp], eax
.text:00408DE7                 call    sub_4074B0
.text:00408DEC                 mov     [esp], eax
.text:00408DEF                 lea     edx, [esp+30h]
.text:00408DF3                 mov     ebx, eax
.text:00408DF5                 mov     [esp+18h], edx
.text:00408DF9                 lea     ecx, [esp+2Ch]
.text:00408DFD                 lea     edx, [esp+28h]
.text:00408E01                 mov     [esp+14h], ecx
.text:00408E05                 lea     ecx, [esp+24h]
.text:00408E09                 mov     [esp+10h], edx
.text:00408E0D                 lea     edx, [esp+430h]
.text:00408E14                 mov     [esp+0Ch], ecx
.text:00408E18                 mov     [esp+4], edx
.text:00408E1C                 mov     dword ptr [esp+1Ch], 400h
.text:00408E24                 mov     dword ptr [esp+8], 400h
.text:00408E2C                 call    GetVolumeInformationA
.text:00408E31                 sub     esp, 20h
.text:00408E34                 test    eax, eax
.text:00408E36                 setz    cl
.text:00408E39                 mov     [esp], ebx
.text:00408E3C                 movzx   edx, cl
.text:00408E3F                 dec     edx
.text:00408E40                 and     [esp+24h], edx
.text:00408E44                 call    free
.text:00408E49                 mov     ecx, [esp+24h]
.text:00408E4D                 mov     edx, 1
.text:00408E52                 mov     [esi+1Ch], ecx
.text:00408E55
.text:00408E55 loc_408E55:                             ; CODE XREF: .text:00408D6D↑j
.text:00408E55                 add     esp, 864h
.text:00408E5B                 mov     eax, edx
.text:00408E5D                 pop     ebx
.text:00408E5E                 pop     esi
.text:00408E5F                 retn
.text:00408E60 ; ---------------------------------------------------------------------------
.text:00408E60
.text:00408E60 loc_408E60:                             ; CODE XREF: .text:00408DCF↑j
.text:00408E60                 mov     [esp], ebx
.text:00408E63                 call    sub_407D30
.text:00408E68                 mov     [esi+28h], eax
.text:00408E6B                 jmp     loc_408DDC
.text:00408E70 ; ---------------------------------------------------------------------------
.text:00408E70                 push    ebp
.text:00408E71                 xor     edx, edx
.text:00408E73                 push    edi
.text:00408E74                 push    esi
.text:00408E75                 xor     esi, esi
.text:00408E77                 push    ebx
.text:00408E78                 sub     esp, 1Ch
.text:00408E7B                 mov     ebx, [esp+5Ch]
.text:00408E7F                 mov     ecx, [esp+30h]
.text:00408E83                 mov     edi, [esp+60h]
.text:00408E87                 or      esi, ebx
.text:00408E89                 mov     eax, [esp+4Ch]
.text:00408E8D                 or      edi, edx
.text:00408E8F                 mov     ebx, [esp+64h]
.text:00408E93                 xor     edx, edx
.text:00408E95                 test    cl, 10h
.text:00408E98                 setz    dl
.text:00408E9B                 mov     [ebx+10h], eax
.text:00408E9E                 mov     [ebx+8], edi
.text:00408EA1                 mov     [ebx+0Ch], esi
.text:00408EA4                 dec     edx
.text:00408EA5                 and     edx, 0FFFFC000h
.text:00408EAB                 mov     dword ptr [ebx+14h], 0
.text:00408EB2                 add     edx, 8000h
.text:00408EB8                 or      edx, 124h
.text:00408EBE                 test    cl, 1
.text:00408EC1                 movzx   eax, dx
.text:00408EC4                 jnz     short loc_408ECB
.text:00408EC6                 or      eax, 92h
.text:00408ECB
.text:00408ECB loc_408ECB:                             ; CODE XREF: .text:00408EC4↑j
.text:00408ECB                 mov     ebx, [esp+54h]
.text:00408ECF                 xor     edx, edx
.text:00408ED1                 xor     ebp, ebp
.text:00408ED3                 mov     edi, [esp+50h]
.text:00408ED7                 mov     ecx, [esp+64h]
.text:00408EDB                 mov     esi, edi
.text:00408EDD                 or      [ecx], eax
.text:00408EDF                 mov     edi, ebx
.text:00408EE1                 or      edi, ebp
.text:00408EE3                 mov     ebp, edx
.text:00408EE5                 mov     ebx, [esp+64h]
.text:00408EE9                 or      ebp, esi
.text:00408EEB                 mov     esi, [esp+58h]
.text:00408EEF                 mov     edx, [esp+40h]
.text:00408EF3                 mov     [ebx+30h], edi
.text:00408EF6                 mov     [ebx+18h], esi
.text:00408EF9                 mov     ecx, edx
.text:00408EFB                 xor     esi, esi
.text:00408EFD                 mov     [ebx+34h], ebp
.text:00408F00                 xor     edx, edx
.text:00408F02                 or      esi, ecx
.text:00408F04                 mov     dword ptr [esp+8], 989680h
.text:00408F0C                 mov     ebx, [esp+3Ch]
.text:00408F10                 mov     ecx, esi
.text:00408F12                 mov     dword ptr [esp+0Ch], 0
.text:00408F1A                 or      ebx, edx
.text:00408F1C                 mov     edx, ebx
.text:00408F1E                 sub     edx, 0D53E8000h
.text:00408F24                 sbb     ecx, 19DB1DEh
.text:00408F2A                 mov     [esp+4], ecx
.text:00408F2E                 mov     [esp], edx
.text:00408F31                 call    sub_40E110
.text:00408F36                 mov     edx, eax
.text:00408F38                 mov     ecx, [esp+64h]
.text:00408F3C                 shr     eax, 1Fh
.text:00408F3F                 dec     eax
.text:00408F40                 and     edx, eax
.text:00408F42                 mov     [ecx+38h], edx
.text:00408F45                 mov     [esp], ebx
.text:00408F48                 mov     [esp+4], esi
.text:00408F4C                 mov     dword ptr [esp+8], 989680h
.text:00408F54                 mov     dword ptr [esp+0Ch], 0
.text:00408F5C                 call    sub_40E230
.text:00408F61                 lea     ecx, [eax+eax*4]
.text:00408F64                 lea     esi, [ecx+ecx*4]
.text:00408F67                 mov     eax, [esp+64h]
.text:00408F6B                 shl     esi, 2
.text:00408F6E                 mov     ebx, esi
.text:00408F70                 shr     ebx, 1Fh
.text:00408F73                 dec     ebx
.text:00408F74                 and     ebx, esi
.text:00408F76                 xor     esi, esi
.text:00408F78                 mov     [eax+3Ch], ebx
.text:00408F7B                 mov     edx, [esp+38h]
.text:00408F7F                 mov     dword ptr [esp+8], 989680h
.text:00408F87                 mov     ebx, [esp+34h]
.text:00408F8B                 mov     dword ptr [esp+0Ch], 0
.text:00408F93                 mov     ecx, edx
.text:00408F95                 xor     edx, edx
.text:00408F97                 or      ebx, edx
.text:00408F99                 or      esi, ecx
.text:00408F9B                 mov     edx, ebx
.text:00408F9D                 sub     edx, 0D53E8000h
.text:00408FA3                 mov     ecx, esi
.text:00408FA5                 sbb     ecx, 19DB1DEh
.text:00408FAB                 mov     [esp+4], ecx
.text:00408FAF                 mov     [esp], edx
.text:00408FB2                 call    sub_40E110
.text:00408FB7                 mov     edx, eax
.text:00408FB9                 mov     ecx, [esp+64h]
.text:00408FBD                 shr     eax, 1Fh
.text:00408FC0                 dec     eax
.text:00408FC1                 and     edx, eax
.text:00408FC3                 mov     [ecx+48h], edx
.text:00408FC6                 mov     [esp], ebx
.text:00408FC9                 mov     [esp+4], esi
.text:00408FCD                 mov     dword ptr [esp+8], 989680h
.text:00408FD5                 mov     dword ptr [esp+0Ch], 0
.text:00408FDD                 call    sub_40E230
.text:00408FE2                 lea     edx, [eax+eax*4]
.text:00408FE5                 mov     ebx, [esp+64h]
.text:00408FE9                 lea     ecx, [edx+edx*4]
.text:00408FEC                 shl     ecx, 2
.text:00408FEF                 mov     esi, ecx
.text:00408FF1                 shr     esi, 1Fh
.text:00408FF4                 dec     esi
.text:00408FF5                 and     esi, ecx
.text:00408FF7                 mov     [ebx+4Ch], esi
.text:00408FFA                 mov     edx, [esp+48h]
.text:00408FFE                 xor     esi, esi
.text:00409000                 mov     dword ptr [esp+8], 989680h
.text:00409008                 mov     ebx, [esp+44h]
.text:0040900C                 mov     dword ptr [esp+0Ch], 0
.text:00409014                 mov     ecx, edx
.text:00409016                 xor     edx, edx
.text:00409018                 or      ebx, edx
.text:0040901A                 or      esi, ecx
.text:0040901C                 mov     edx, ebx
.text:0040901E                 sub     edx, 0D53E8000h
.text:00409024                 mov     ecx, esi
.text:00409026                 sbb     ecx, 19DB1DEh
.text:0040902C                 mov     [esp+4], ecx
.text:00409030                 mov     [esp], edx
.text:00409033                 call    sub_40E110
.text:00409038                 mov     edx, eax
.text:0040903A                 mov     ecx, [esp+64h]
.text:0040903E                 shr     eax, 1Fh
.text:00409041                 dec     eax
.text:00409042                 and     edx, eax
.text:00409044                 mov     [ecx+40h], edx
.text:00409047                 mov     [esp+4], esi
.text:0040904B                 mov     dword ptr [esp+8], 989680h
.text:00409053                 mov     dword ptr [esp+0Ch], 0
.text:0040905B                 mov     [esp], ebx
.text:0040905E                 call    sub_40E230
.text:00409063                 lea     edx, [eax+eax*4]
.text:00409066                 lea     esi, [edx+edx*4]
.text:00409069                 mov     eax, [esp+64h]
.text:0040906D                 shl     esi, 2
.text:00409070                 mov     edx, ebp
.text:00409072                 mov     ecx, esi
.text:00409074                 mov     dword ptr [eax+50h], 200h
.text:0040907B                 shr     ecx, 1Fh
.text:0040907E                 dec     ecx
.text:0040907F                 and     ecx, esi
.text:00409081                 test    ebp, ebp
.text:00409083                 mov     [eax+44h], ecx
.text:00409086                 mov     eax, edi
.text:00409088                 js      short loc_4090C2
.text:0040908A
.text:0040908A loc_40908A:                             ; CODE XREF: .text:004090CA↓j
.text:0040908A                 xor     esi, esi
.text:0040908C                 mov     ebp, edi
.text:0040908E                 mov     ecx, eax
.text:00409090                 shrd    ecx, edx, 9
.text:00409094                 mov     ebx, edx
.text:00409096                 and     ebp, 1FFh
.text:0040909C                 mov     eax, esi
.text:0040909E                 sar     ebx, 9
.text:004090A1                 or      eax, ebp
.text:004090A3                 jz      short loc_4090AB
.text:004090A5                 add     ecx, 1
.text:004090A8                 adc     ebx, 0
.text:004090AB
.text:004090AB loc_4090AB:                             ; CODE XREF: .text:004090A3↑j
.text:004090AB                 mov     edx, [esp+64h]
.text:004090AF                 mov     eax, 1
.text:004090B4                 mov     [edx+58h], ecx
.text:004090B7                 mov     [edx+5Ch], ebx
.text:004090BA                 add     esp, 1Ch
.text:004090BD                 pop     ebx
.text:004090BE                 pop     esi
.text:004090BF                 pop     edi
.text:004090C0                 pop     ebp
.text:004090C1                 retn
.text:004090C2 ; ---------------------------------------------------------------------------
.text:004090C2
.text:004090C2 loc_4090C2:                             ; CODE XREF: .text:00409088↑j
.text:004090C2                 add     eax, 1FFh
.text:004090C7                 adc     edx, 0
.text:004090CA                 jmp     short loc_40908A
.text:004090CA ; ---------------------------------------------------------------------------
.text:004090CC                 align 10h
.text:004090D0                 push    ebp
.text:004090D1                 push    edi
.text:004090D2                 xor     edi, edi
.text:004090D4                 push    esi
.text:004090D5                 xor     esi, esi
.text:004090D7                 push    ebx
.text:004090D8                 sub     esp, 0Ch
.text:004090DB                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:004090E2                 call    LoadLibraryA
.text:004090E7                 sub     esp, 4
.text:004090EA                 mov     ebp, eax
.text:004090EC                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:004090F4                 mov     [esp], eax
.text:004090F7                 call    GetProcAddress
.text:004090FC                 sub     esp, 8
.text:004090FF                 test    eax, eax
.text:00409101                 jz      short loc_409132
.text:00409103                 lea     ecx, [esp+8]
.text:00409107                 mov     [esp+4], ecx
.text:0040910B                 mov     ecx, [esp+20h]
.text:0040910F                 mov     [esp], ecx
.text:00409112                 call    eax
.text:00409114                 sub     esp, 8
.text:00409117                 mov     ebx, eax
.text:00409119                 cmp     eax, 0FFFFFFFFh
.text:0040911C                 jz      short loc_40914D
.text:0040911E
.text:0040911E loc_40911E:                             ; CODE XREF: .text:00409156↓j
.text:0040911E                 mov     esi, [esp+8]
.text:00409122                 mov     ecx, ebx
.text:00409124                 xor     edi, edi
.text:00409126                 xor     ebx, ebx
.text:00409128                 mov     edx, esi
.text:0040912A                 mov     esi, ecx
.text:0040912C                 or      esi, edi
.text:0040912E                 mov     edi, ebx
.text:00409130                 or      edi, edx
.text:00409132
.text:00409132 loc_409132:                             ; CODE XREF: .text:00409101↑j
.text:00409132                                         ; .text:00409154↓j
.text:00409132                 test    ebp, ebp
.text:00409134                 jz      short loc_409141
.text:00409136                 mov     [esp], ebp
.text:00409139                 call    FreeLibrary
.text:0040913E                 sub     esp, 4
.text:00409141
.text:00409141 loc_409141:                             ; CODE XREF: .text:00409134↑j
.text:00409141                 add     esp, 0Ch
.text:00409144                 mov     eax, esi
.text:00409146                 mov     edx, edi
.text:00409148                 pop     ebx
.text:00409149                 pop     esi
.text:0040914A                 pop     edi
.text:0040914B                 pop     ebp
.text:0040914C                 retn
.text:0040914D ; ---------------------------------------------------------------------------
.text:0040914D
.text:0040914D loc_40914D:                             ; CODE XREF: .text:0040911C↑j
.text:0040914D                 call    GetLastError
.text:00409152                 test    eax, eax
.text:00409154                 jnz     short loc_409132
.text:00409156                 jmp     short loc_40911E
.text:00409156 ; ---------------------------------------------------------------------------
.text:00409158                 align 10h
.text:00409160
.text:00409160 ; =============== S U B R O U T I N E =======================================
.text:00409160
.text:00409160
.text:00409160 ; int __cdecl sub_409160(LPCSTR lpFileName, int)
.text:00409160 sub_409160      proc near               ; CODE XREF: sub_407010+2691↓p
.text:00409160
.text:00409160 lpRootPathName  = dword ptr -8FCh
.text:00409160 lpVolumeNameBuffer= dword ptr -8F8h
.text:00409160 nVolumeNameSize = dword ptr -8F4h
.text:00409160 lpVolumeSerialNumber= dword ptr -8F0h
.text:00409160 lpMaximumComponentLength= dword ptr -8ECh
.text:00409160 lpFileSystemFlags= dword ptr -8E8h
.text:00409160 lpFileSystemNameBuffer= dword ptr -8E4h
.text:00409160 nFileSystemNameSize= dword ptr -8E0h
.text:00409160 VolumeSerialNumber= dword ptr -8D8h
.text:00409160 MaximumComponentLength= dword ptr -8D4h
.text:00409160 FileSystemFlags = dword ptr -8D0h
.text:00409160 var_8CC         = dword ptr -8CCh
.text:00409160 var_8C8         = dword ptr -8C8h
.text:00409160 var_8C4         = dword ptr -8C4h
.text:00409160 var_8C0         = dword ptr -8C0h
.text:00409160 var_8BC         = dword ptr -8BCh
.text:00409160 var_8B8         = dword ptr -8B8h
.text:00409160 var_8B4         = dword ptr -8B4h
.text:00409160 var_8B0         = dword ptr -8B0h
.text:00409160 var_8AC         = dword ptr -8ACh
.text:00409160 var_8A8         = dword ptr -8A8h
.text:00409160 var_8A4         = dword ptr -8A4h
.text:00409160 var_8A0         = dword ptr -8A0h
.text:00409160 var_89C         = dword ptr -89Ch
.text:00409160 FileSystemNameBuffer= byte ptr -88Ch
.text:00409160 VolumeNameBuffer= byte ptr -48Ch
.text:00409160 var_8C          = dword ptr -8Ch
.text:00409160 var_88          = dword ptr -88h
.text:00409160 var_84          = dword ptr -84h
.text:00409160 var_80          = dword ptr -80h
.text:00409160 var_7C          = dword ptr -7Ch
.text:00409160 var_78          = dword ptr -78h
.text:00409160 var_74          = dword ptr -74h
.text:00409160 var_70          = dword ptr -70h
.text:00409160 var_6C          = dword ptr -6Ch
.text:00409160 var_5C          = dword ptr -5Ch
.text:00409160 var_58          = dword ptr -58h
.text:00409160 var_54          = dword ptr -54h
.text:00409160 var_50          = dword ptr -50h
.text:00409160 var_4C          = dword ptr -4Ch
.text:00409160 var_48          = dword ptr -48h
.text:00409160 var_44          = dword ptr -44h
.text:00409160 var_3C          = dword ptr -3Ch
.text:00409160 var_38          = dword ptr -38h
.text:00409160 var_34          = dword ptr -34h
.text:00409160 lpFileName      = dword ptr  4
.text:00409160 arg_4           = dword ptr  8
.text:00409160
.text:00409160                 push    ebp
.text:00409161                 xor     eax, eax
.text:00409163                 mov     ecx, 0Dh
.text:00409168                 push    edi
.text:00409169                 push    esi
.text:0040916A                 push    ebx
.text:0040916B                 sub     esp, 8ECh
.text:00409171                 lea     edi, [esp+8FCh+var_5C]
.text:00409178                 cld
.text:00409179                 lea     edx, [esp+8FCh+var_8C]
.text:00409180                 rep stosd
.text:00409182                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00409186                 lea     esi, [esp+8FCh+var_5C]
.text:0040918D                 mov     edx, [esp+8FCh+lpFileName]
.text:00409194                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:00409197                 call    sub_407BC0
.text:0040919C                 test    eax, eax
.text:0040919E                 mov     edx, 0FFFFFFFFh
.text:004091A3                 jz      loc_409534
.text:004091A9                 mov     edx, [esp+8FCh+var_88]
.text:004091B0                 mov     ebp, [esp+8FCh+var_84]
.text:004091B7                 mov     edi, [esp+8FCh+var_80]
.text:004091BE                 mov     [esp+8FCh+var_58], edx
.text:004091C5                 mov     ecx, [esp+8FCh+var_7C]
.text:004091CC                 mov     ebx, [esp+8FCh+var_8C]
.text:004091D3                 mov     [esp+8FCh+var_54], ebp
.text:004091DA                 mov     edx, [esp+8FCh+var_78]
.text:004091E1                 mov     ebp, [esp+8FCh+var_74]
.text:004091E8                 mov     [esp+8FCh+var_50], edi
.text:004091EF                 test    bl, 10h
.text:004091F2                 mov     edi, [esp+8FCh+var_70]
.text:004091F9                 mov     [esp+8FCh+var_4C], ecx
.text:00409200                 mov     ecx, [esp+8FCh+var_6C]
.text:00409207                 mov     [esp+8FCh+var_5C], ebx
.text:0040920E                 mov     [esp+8FCh+var_48], edx
.text:00409215                 mov     [esp+8FCh+var_44], ebp
.text:0040921C                 mov     [esp+8FCh+var_3C], edi
.text:00409223                 mov     [esp+8FCh+var_38], ecx
.text:0040922A                 jnz     loc_409550
.text:00409230                 mov     ebx, 1
.text:00409235                 mov     [esp+8FCh+var_34], ebx
.text:0040923C
.text:0040923C loc_40923C:                             ; CODE XREF: sub_409160+406↓j
.text:0040923C                 mov     eax, [esp+8FCh+lpFileName]
.text:00409243                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:00409247                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040924B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040924E                 call    sub_40A430
.text:00409253                 mov     [esp+8FCh+lpRootPathName], eax
.text:00409256                 call    sub_4074B0
.text:0040925B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040925F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00409263                 mov     ebp, eax
.text:00409265                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00409269                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040926D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:00409274                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:00409278                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040927C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:00409280                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00409288                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00409290                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:00409293                 call    GetVolumeInformationA
.text:00409298                 sub     esp, 20h
.text:0040929B                 test    eax, eax
.text:0040929D                 lea     edi, [esp+8FCh+var_8CC]
.text:004092A1                 setz    bl
.text:004092A4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:004092A7                 xor     ebp, ebp
.text:004092A9                 movzx   edx, bl
.text:004092AC                 dec     edx
.text:004092AD                 xor     ebx, ebx
.text:004092AF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:004092B3                 call    free
.text:004092B8                 cld
.text:004092B9                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:004092BD                 mov     [esi+1Ch], ecx
.text:004092C0                 mov     ecx, 0Dh
.text:004092C5                 rep movsd
.text:004092C7                 mov     edi, [esp+8FCh+var_8A0]
.text:004092CB                 mov     edx, [esp+8FCh+var_89C]
.text:004092CF                 mov     ecx, [esp+8FCh+var_8CC]
.text:004092D3                 or      ebp, edi
.text:004092D5                 mov     esi, [esp+8FCh+var_8B0]
.text:004092D9                 mov     edi, [esp+8FCh+arg_4]
.text:004092E0                 or      edx, ebx
.text:004092E2                 mov     [edi+8], edx
.text:004092E5                 xor     edx, edx
.text:004092E7                 test    cl, 10h
.text:004092EA                 setz    dl
.text:004092ED                 mov     [edi+0Ch], ebp
.text:004092F0                 mov     [edi+10h], esi
.text:004092F3                 mov     dword ptr [edi+14h], 0
.text:004092FA                 dec     edx
.text:004092FB                 and     edx, 0FFFFC000h
.text:00409301                 add     edx, 8000h
.text:00409307                 or      edx, 124h
.text:0040930D                 test    cl, 1
.text:00409310                 movzx   eax, dx
.text:00409313                 jnz     short loc_40931A
.text:00409315                 or      eax, 92h
.text:0040931A
.text:0040931A loc_40931A:                             ; CODE XREF: sub_409160+1B3↑j
.text:0040931A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040931E                 xor     edx, edx
.text:00409320                 xor     ebp, ebp
.text:00409322                 mov     edi, [esp+8FCh+var_8AC]
.text:00409326                 mov     ecx, [esp+8FCh+arg_4]
.text:0040932D                 mov     esi, edi
.text:0040932F                 or      [ecx], eax
.text:00409331                 mov     edi, ebx
.text:00409333                 or      edi, ebp
.text:00409335                 mov     ebp, edx
.text:00409337                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040933B                 or      ebp, esi
.text:0040933D                 mov     esi, [esp+8FCh+arg_4]
.text:00409344                 mov     edx, [esp+8FCh+var_8BC]
.text:00409348                 mov     [esi+18h], ebx
.text:0040934B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040934F                 mov     ecx, edx
.text:00409351                 mov     [esi+30h], edi
.text:00409354                 xor     edx, edx
.text:00409356                 mov     [esi+34h], ebp
.text:00409359                 or      ebx, edx
.text:0040935B                 xor     esi, esi
.text:0040935D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00409365                 or      esi, ecx
.text:00409367                 mov     edx, ebx
.text:00409369                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00409371                 sub     edx, 0D53E8000h
.text:00409377                 mov     ecx, esi
.text:00409379                 sbb     ecx, 19DB1DEh
.text:0040937F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00409383                 mov     [esp+8FCh+lpRootPathName], edx
.text:00409386                 call    sub_40E110
.text:0040938B                 mov     edx, eax
.text:0040938D                 mov     ecx, [esp+8FCh+arg_4]
.text:00409394                 shr     eax, 1Fh
.text:00409397                 dec     eax
.text:00409398                 and     edx, eax
.text:0040939A                 mov     [ecx+38h], edx
.text:0040939D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004093A0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004093A4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004093AC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004093B4                 call    sub_40E230
.text:004093B9                 lea     ecx, [eax+eax*4]
.text:004093BC                 lea     ebx, [ecx+ecx*4]
.text:004093BF                 mov     eax, [esp+8FCh+arg_4]
.text:004093C6                 shl     ebx, 2
.text:004093C9                 mov     esi, ebx
.text:004093CB                 shr     esi, 1Fh
.text:004093CE                 dec     esi
.text:004093CF                 and     esi, ebx
.text:004093D1                 mov     [eax+3Ch], esi
.text:004093D4                 mov     edx, [esp+8FCh+var_8C4]
.text:004093D8                 xor     esi, esi
.text:004093DA                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004093E2                 mov     ebx, [esp+8FCh+var_8C8]
.text:004093E6                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004093EE                 mov     ecx, edx
.text:004093F0                 xor     edx, edx
.text:004093F2                 or      ebx, edx
.text:004093F4                 or      esi, ecx
.text:004093F6                 mov     edx, ebx
.text:004093F8                 sub     edx, 0D53E8000h
.text:004093FE                 mov     ecx, esi
.text:00409400                 sbb     ecx, 19DB1DEh
.text:00409406                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040940A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040940D                 call    sub_40E110
.text:00409412                 mov     edx, eax
.text:00409414                 mov     ecx, [esp+8FCh+arg_4]
.text:0040941B                 shr     eax, 1Fh
.text:0040941E                 dec     eax
.text:0040941F                 and     edx, eax
.text:00409421                 mov     [ecx+48h], edx
.text:00409424                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00409427                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040942B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00409433                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040943B                 call    sub_40E230
.text:00409440                 lea     ecx, [eax+eax*4]
.text:00409443                 lea     ebx, [ecx+ecx*4]
.text:00409446                 mov     eax, [esp+8FCh+arg_4]
.text:0040944D                 shl     ebx, 2
.text:00409450                 mov     esi, ebx
.text:00409452                 shr     esi, 1Fh
.text:00409455                 dec     esi
.text:00409456                 and     esi, ebx
.text:00409458                 mov     [eax+4Ch], esi
.text:0040945B                 mov     edx, [esp+8FCh+var_8B4]
.text:0040945F                 xor     esi, esi
.text:00409461                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00409469                 mov     ebx, [esp+8FCh+var_8B8]
.text:0040946D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00409475                 mov     ecx, edx
.text:00409477                 xor     edx, edx
.text:00409479                 or      ebx, edx
.text:0040947B                 or      esi, ecx
.text:0040947D                 mov     edx, ebx
.text:0040947F                 sub     edx, 0D53E8000h
.text:00409485                 mov     ecx, esi
.text:00409487                 sbb     ecx, 19DB1DEh
.text:0040948D                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00409491                 mov     [esp+8FCh+lpRootPathName], edx
.text:00409494                 call    sub_40E110
.text:00409499                 mov     edx, eax
.text:0040949B                 mov     ecx, [esp+8FCh+arg_4]
.text:004094A2                 shr     eax, 1Fh
.text:004094A5                 dec     eax
.text:004094A6                 and     edx, eax
.text:004094A8                 mov     [ecx+40h], edx
.text:004094AB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004094AE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004094B2                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004094BA                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004094C2                 call    sub_40E230
.text:004094C7                 lea     ebx, [eax+eax*4]
.text:004094CA                 mov     esi, [esp+8FCh+arg_4]
.text:004094D1                 lea     edx, [ebx+ebx*4]
.text:004094D4                 shl     edx, 2
.text:004094D7                 mov     eax, edi
.text:004094D9                 mov     ecx, edx
.text:004094DB                 mov     dword ptr [esi+50h], 200h
.text:004094E2                 shr     ecx, 1Fh
.text:004094E5                 dec     ecx
.text:004094E6                 and     ecx, edx
.text:004094E8                 test    ebp, ebp
.text:004094EA                 mov     edx, ebp
.text:004094EC                 mov     [esi+44h], ecx
.text:004094EF                 js      short loc_409541
.text:004094F1
.text:004094F1 loc_4094F1:                             ; CODE XREF: sub_409160+3E9↓j
.text:004094F1                 xor     esi, esi
.text:004094F3                 mov     ebp, edi
.text:004094F5                 mov     ecx, eax
.text:004094F7                 shrd    ecx, edx, 9
.text:004094FB                 mov     ebx, edx
.text:004094FD                 and     ebp, 1FFh
.text:00409503                 mov     eax, esi
.text:00409505                 sar     ebx, 9
.text:00409508                 or      eax, ebp
.text:0040950A                 jz      short loc_409512
.text:0040950C                 add     ecx, 1
.text:0040950F                 adc     ebx, 0
.text:00409512
.text:00409512 loc_409512:                             ; CODE XREF: sub_409160+3AA↑j
.text:00409512                 mov     edx, [esp+8FCh+arg_4]
.text:00409519                 mov     [edx+5Ch], ebx
.text:0040951C                 mov     ebx, [esp+8FCh+lpFileName]
.text:00409523                 mov     [edx+58h], ecx
.text:00409526                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040952A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040952D                 call    sub_408380
.text:00409532                 xor     edx, edx
.text:00409534
.text:00409534 loc_409534:                             ; CODE XREF: sub_409160+43↑j
.text:00409534                 add     esp, 8ECh
.text:0040953A                 mov     eax, edx
.text:0040953C                 pop     ebx
.text:0040953D                 pop     esi
.text:0040953E                 pop     edi
.text:0040953F                 pop     ebp
.text:00409540                 retn
.text:00409541 ; ---------------------------------------------------------------------------
.text:00409541
.text:00409541 loc_409541:                             ; CODE XREF: sub_409160+38F↑j
.text:00409541                 add     eax, 1FFh
.text:00409546                 adc     edx, 0
.text:00409549                 jmp     short loc_4094F1
.text:00409549 ; ---------------------------------------------------------------------------
.text:0040954B                 align 10h
.text:00409550
.text:00409550 loc_409550:                             ; CODE XREF: sub_409160+CA↑j
.text:00409550                 mov     eax, [esp+8FCh+lpFileName]
.text:00409557                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:0040955A                 call    sub_407D30
.text:0040955F                 mov     [esp+8FCh+var_34], eax
.text:00409566                 jmp     loc_40923C
.text:00409566 sub_409160      endp
.text:00409566
.text:00409566 ; ---------------------------------------------------------------------------
.text:0040956B                 align 10h
.text:00409570 ; START OF FUNCTION CHUNK FOR sub_407010
.text:00409570
.text:00409570 loc_409570:                             ; CODE XREF: sub_407010+26↑j
.text:00409570                 cld
.text:00409571                 sub     esp, 2Ch
.text:00409574                 xor     eax, eax
.text:00409576                 mov     [esp+2Ch+var_10], ebx
.text:0040957A                 mov     ecx, 18h
.text:0040957F                 mov     ebx, [esp+2Ch+arg_0]
.text:00409583                 mov     [esp+2Ch+var_C], esi
.text:00409587                 mov     esi, [esp+2Ch+arg_4]
.text:0040958B                 test    ebx, ebx
.text:0040958D                 mov     [esp+2Ch+var_8], edi
.text:00409591                 mov     edi, esi
.text:00409593                 mov     [esp+2Ch+var_4], ebp
.text:00409597                 rep stosd
.text:00409599                 jz      short loc_4095A0
.text:0040959B                 cmp     byte ptr [ebx], 0
.text:0040959E                 jnz     short loc_4095B8
.text:004095A0
.text:004095A0 loc_4095A0:                             ; CODE XREF: sub_407010+2589↑j
.text:004095A0                 xor     edx, edx
.text:004095A2
.text:004095A2 loc_4095A2:                             ; CODE XREF: sub_407010+25BF↓j
.text:004095A2                                         ; sub_407010+2668↓j
.text:004095A2                 mov     ebx, [esp+2Ch+var_10]
.text:004095A6                 mov     eax, edx
.text:004095A8                 mov     esi, [esp+2Ch+var_C]
.text:004095AC                 mov     edi, [esp+2Ch+var_8]
.text:004095B0                 mov     ebp, [esp+2Ch+var_4]
.text:004095B4                 add     esp, 2Ch
.text:004095B7                 retn
.text:004095B8 ; ---------------------------------------------------------------------------
.text:004095B8
.text:004095B8 loc_4095B8:                             ; CODE XREF: sub_407010+258E↑j
.text:004095B8                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:004095C0                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:004095C3                 call    sub_40A350
.text:004095C8                 test    eax, eax
.text:004095CA                 mov     edx, 0FFFFFFFFh
.text:004095CF                 jnz     short loc_4095A2
.text:004095D1                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:004095D4                 call    sub_40A200
.text:004095D9                 mov     [esp+2Ch+lpFileName], eax
.text:004095DC                 call    sub_4074B0
.text:004095E1                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:004095E4                 mov     ebp, eax
.text:004095E6                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:004095EE                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:004095F6                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:004095FE                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00409606                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040960E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00409616                 call    CreateFileA
.text:0040961B                 sub     esp, 1Ch
.text:0040961E                 mov     ebx, eax
.text:00409620                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00409624                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:00409627                 call    sub_407EB0
.text:0040962C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040962F                 mov     edi, eax
.text:00409631                 call    CloseHandle
.text:00409636                 sub     esp, 4
.text:00409639                 cmp     edi, 0FFFFFFFFh
.text:0040963C                 jz      short loc_40969A
.text:0040963E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00409642                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:00409645                 call    sub_408380
.text:0040964A
.text:0040964A loc_40964A:                             ; CODE XREF: sub_407010+2698↓j
.text:0040964A                 mov     edx, [esi]
.text:0040964C                 and     edx, 0F000h
.text:00409652                 cmp     edx, 4000h
.text:00409658                 jz      short loc_40968D
.text:0040965A
.text:0040965A loc_40965A:                             ; CODE XREF: sub_407010+2688↓j
.text:0040965A                 cmp     edi, 0FFFFFFFFh
.text:0040965D                 jz      short loc_40967D
.text:0040965F
.text:0040965F loc_40965F:                             ; CODE XREF: sub_407010+267B↓j
.text:0040965F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:00409666                 call    SetErrorMode
.text:0040966B                 sub     esp, 4
.text:0040966E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:00409671                 call    free
.text:00409676                 mov     edx, edi
.text:00409678                 jmp     loc_4095A2
.text:0040967D ; ---------------------------------------------------------------------------
.text:0040967D
.text:0040967D loc_40967D:                             ; CODE XREF: sub_407010+264D↑j
.text:0040967D                 call    sub_407B60
.text:00409682                 mov     esi, eax
.text:00409684                 call    _errno
.text:00409689                 mov     [eax], esi
.text:0040968B                 jmp     short loc_40965F
.text:0040968D ; ---------------------------------------------------------------------------
.text:0040968D
.text:0040968D loc_40968D:                             ; CODE XREF: sub_407010+2648↑j
.text:0040968D                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:00409690                 call    sub_407D30
.text:00409695                 mov     [esi+18h], eax
.text:00409698                 jmp     short loc_40965A
.text:0040969A ; ---------------------------------------------------------------------------
.text:0040969A
.text:0040969A loc_40969A:                             ; CODE XREF: sub_407010+262C↑j
.text:0040969A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040969E                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:004096A1                 call    sub_409160
.text:004096A6                 mov     edi, eax
.text:004096A8                 jmp     short loc_40964A
.text:004096A8 ; END OF FUNCTION CHUNK FOR sub_407010
.text:004096A8 ; ---------------------------------------------------------------------------
.text:004096AA                 align 10h
.text:004096B0 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:004098CF↓o
.text:004096BC aLu             db '%lu',0              ; DATA XREF: .text:004098DF↓o
.text:004096C0 asc_4096C0      db ' ',0                ; DATA XREF: .text:loc_4099C8↓o
.text:004096C2                 align 10h
.text:004096D0 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:004096D0                                         ; DATA XREF: .text:004099FF↓o
.text:004096F0 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_409A0D↓o
.text:004096FC aServer         db ' Server',0          ; DATA XREF: .text:00409A36↓o
.text:004096FC                                         ; .text:loc_409BAE↓o
.text:00409704 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_409A48↓o
.text:00409715 aDatacenterServ db ' Datacenter Server',0
.text:00409715                                         ; DATA XREF: .text:loc_409A52↓o
.text:00409728 aStandardEditio db ' Standard Edition',0
.text:00409728                                         ; DATA XREF: .text:00409A7A↓o
.text:0040973A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_409A84↓o
.text:00409747 aEnterpriseEdit db ' Enterprise Edition',0
.text:00409747                                         ; DATA XREF: .text:loc_409A8E↓o
.text:0040975B aDatacenterEdit db ' Datacenter Edition',0
.text:0040975B                                         ; DATA XREF: .text:loc_409A98↓o
.text:0040976F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:00409AAB↓o
.text:0040977D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_409AB5↓o
.text:0040977D                                         ; .text:loc_409BC0↓o
.text:0040978B                 align 10h
.text:00409790 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:00409790                                         ; DATA XREF: .text:00409AE2↓o
.text:004097C0 aProducttype    db 'ProductType',0      ; DATA XREF: .text:00409B29↓o
.text:004097CC aWinnt          db 'WINNT',0            ; DATA XREF: .text:00409B64↓o
.text:004097D2 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:00409B7B↓o
.text:004097DB aServernt       db 'SERVERNT',0         ; DATA XREF: .text:00409B92↓o
.text:004097E4                 align 10h
.text:004097F0 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:004097F0                                         ; DATA XREF: .text:00409D07↓o
.text:00409813                 db 1Dh dup(90h)
.text:00409830 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:00409830                                         ; DATA XREF: .text:00409D66↓o
.text:00409856 ; ---------------------------------------------------------------------------
.text:00409856
.text:00409856 loc_409856:                             ; DATA XREF: .text:loc_409DD1↓o
.text:00409856                 and     [ebx+45h], dl
.text:00409859                 add     [eax], ah
.text:0040985B                 push    ebx
.text:0040985C                 push    eax
.text:0040985D                 xor     [eax], eax
.text:0040985F
.text:0040985F loc_40985F:                             ; DATA XREF: .text:loc_409E4B↓o
.text:0040985F                 and     [edi+53h], cl
.text:00409862                 push    edx
.text:00409863                 xor     al, [eax]
.text:00409865                 lea     esi, [esi+0]
.text:00409869                 lea     edi, [edi+0]
.text:00409870                 push    edi
.text:00409871                 push    esi
.text:00409872                 push    ebx
.text:00409873                 sub     esp, 130h
.text:00409879                 mov     ebx, [esp+140h]
.text:00409880                 call    sub_409F80
.text:00409885                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040988A                 cmp     eax, 1
.text:0040988D                 jz      loc_409D30
.text:00409893                 cmp     eax, 1
.text:00409896                 jb      loc_409D06
.text:0040989C                 cmp     eax, 2
.text:0040989F                 jz      loc_409950
.text:004098A5                 cmp     eax, 3
.text:004098A8                 jz      short loc_40990F
.text:004098AA                 lea     esi, [esi+0]
.text:004098B0
.text:004098B0 loc_4098B0:                             ; CODE XREF: .text:00409945↓j
.text:004098B0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004098B6                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004098BC
.text:004098BC loc_4098BC:                             ; CODE XREF: .text:00409D4F↓j
.text:004098BC                 mov     [esp+10h], edx
.text:004098C0                 mov     ebx, [esp+144h]
.text:004098C7                 mov     [esp+0Ch], ecx
.text:004098CB                 mov     [esp+8], eax
.text:004098CF                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:004098D7                 mov     [esp], ebx
.text:004098DA                 call    sprintf
.text:004098DF                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:004098E7                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:004098ED                 mov     ecx, [esp+148h]
.text:004098F4                 mov     [esp+8], edi
.text:004098F8                 mov     [esp], ecx
.text:004098FB                 call    sprintf
.text:00409900                 mov     eax, 1
.text:00409905
.text:00409905 loc_409905:                             ; CODE XREF: .text:00409AFF↓j
.text:00409905                                         ; .text:00409B4C↓j
.text:00409905                 add     esp, 130h
.text:0040990B                 pop     ebx
.text:0040990C                 pop     esi
.text:0040990D                 pop     edi
.text:0040990E                 retn
.text:0040990F ; ---------------------------------------------------------------------------
.text:0040990F
.text:0040990F loc_40990F:                             ; CODE XREF: .text:004098A8↑j
.text:0040990F                 mov     dword ptr [ebx], 7263694Dh
.text:00409915                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040991C                 mov     dword ptr [ebx+8], 69572074h
.text:00409923                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040992A                 mov     dword ptr [ebx+10h], 45432073h
.text:00409931                 mov     word ptr [ebx+14h], 20h ; ' '
.text:00409937                 mov     esi, esi
.text:00409939                 lea     edi, [edi+0]
.text:00409940
.text:00409940 loc_409940:                             ; CODE XREF: .text:004099E8↓j
.text:00409940                                         ; .text:00409D29↓j ...
.text:00409940                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00409945                 jmp     loc_4098B0
.text:00409945 ; ---------------------------------------------------------------------------
.text:0040994A                 align 10h
.text:00409950
.text:00409950 loc_409950:                             ; CODE XREF: .text:0040989F↑j
.text:00409950                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:00409956                 cmp     edx, 3
.text:00409959                 mov     eax, edx
.text:0040995B                 jz      loc_409CC5
.text:00409961
.text:00409961 loc_409961:                             ; CODE XREF: .text:00409CCC↓j
.text:00409961                 cmp     eax, 4
.text:00409964                 jz      loc_409C85
.text:0040996A
.text:0040996A loc_40996A:                             ; CODE XREF: .text:00409C8D↓j
.text:0040996A                 cmp     eax, 4
.text:0040996D                 ja      loc_409BD2
.text:00409973                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00409979                 test    ecx, ecx
.text:0040997B                 jnz     loc_409BD2
.text:00409981                 mov     dword ptr [ebx], 7263694Dh
.text:00409987                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040998E                 mov     dword ptr [ebx+8], 69572074h
.text:00409995                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040999C                 mov     dword ptr [ebx+10h], 544E2073h
.text:004099A3
.text:004099A3 loc_4099A3:                             ; CODE XREF: .text:00409C45↓j
.text:004099A3                 mov     byte ptr [ebx+14h], 0
.text:004099A7
.text:004099A7 loc_4099A7:                             ; CODE XREF: .text:00409BD5↓j
.text:004099A7                                         ; .text:00409BEC↓j ...
.text:004099A7                 mov     esi, dword_410060
.text:004099AD                 test    esi, esi
.text:004099AF                 jz      loc_409AC2
.text:004099B5                 movzx   eax, ds:byte_41125A
.text:004099BC                 cmp     al, 1
.text:004099BE                 jz      loc_409AA2
.text:004099C4                 cmp     al, 3
.text:004099C6                 jz      short loc_4099ED
.text:004099C8
.text:004099C8 loc_4099C8:                             ; CODE XREF: .text:00409A0B↓j
.text:004099C8                                         ; .text:00409A46↓j ...
.text:004099C8                 mov     dword ptr [esp+4], offset asc_4096C0 ; " "
.text:004099D0                 mov     [esp], ebx
.text:004099D3                 call    strcat
.text:004099D8                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:004099E0                 mov     [esp], ebx
.text:004099E3                 call    strcat
.text:004099E8                 jmp     loc_409940
.text:004099ED ; ---------------------------------------------------------------------------
.text:004099ED
.text:004099ED loc_4099ED:                             ; CODE XREF: .text:004099C6↑j
.text:004099ED                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:004099F4                 jz      short loc_409A16
.text:004099F6
.text:004099F6 loc_4099F6:                             ; CODE XREF: .text:00409A22↓j
.text:004099F6                 test    byte ptr ds:word_411258, 2
.text:004099FD                 jz      short loc_409A0D
.text:004099FF                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:00409A06
.text:00409A06 loc_409A06:                             ; CODE XREF: .text:00409A14↓j
.text:00409A06                 call    printf
.text:00409A0B                 jmp     short loc_4099C8
.text:00409A0D ; ---------------------------------------------------------------------------
.text:00409A0D
.text:00409A0D loc_409A0D:                             ; CODE XREF: .text:004099FD↑j
.text:00409A0D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:00409A14                 jmp     short loc_409A06
.text:00409A16 ; ---------------------------------------------------------------------------
.text:00409A16
.text:00409A16 loc_409A16:                             ; CODE XREF: .text:004099F4↑j
.text:00409A16                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409A1B                 cmp     eax, 2
.text:00409A1E                 jz      short loc_409A60
.text:00409A20                 test    eax, eax
.text:00409A22                 jnz     short loc_4099F6
.text:00409A24                 cmp     byte ptr ds:word_411258, 0
.text:00409A2B                 js      short loc_409A52
.text:00409A2D                 test    byte ptr ds:word_411258, 2
.text:00409A34                 jnz     short loc_409A48
.text:00409A36                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00409A3E
.text:00409A3E loc_409A3E:                             ; CODE XREF: .text:00409A50↓j
.text:00409A3E                                         ; .text:00409A5A↓j ...
.text:00409A3E                 mov     [esp], ebx
.text:00409A41                 call    strcat
.text:00409A46                 jmp     short loc_4099C8
.text:00409A48 ; ---------------------------------------------------------------------------
.text:00409A48
.text:00409A48 loc_409A48:                             ; CODE XREF: .text:00409A34↑j
.text:00409A48                                         ; .text:00409BA9↓j
.text:00409A48                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:00409A50                 jmp     short loc_409A3E
.text:00409A52 ; ---------------------------------------------------------------------------
.text:00409A52
.text:00409A52 loc_409A52:                             ; CODE XREF: .text:00409A2B↑j
.text:00409A52                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:00409A5A                 jmp     short loc_409A3E
.text:00409A5A ; ---------------------------------------------------------------------------
.text:00409A5C                 align 10h
.text:00409A60
.text:00409A60 loc_409A60:                             ; CODE XREF: .text:00409A1E↑j
.text:00409A60                 cmp     byte ptr ds:word_411258, 0
.text:00409A67                 js      short loc_409A98
.text:00409A69                 movzx   eax, ds:word_411258
.text:00409A70                 test    al, 2
.text:00409A72                 jnz     short loc_409A8E
.text:00409A74                 cmp     ax, 400h
.text:00409A78                 jz      short loc_409A84
.text:00409A7A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:00409A82                 jmp     short loc_409A3E
.text:00409A84 ; ---------------------------------------------------------------------------
.text:00409A84
.text:00409A84 loc_409A84:                             ; CODE XREF: .text:00409A78↑j
.text:00409A84                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:00409A8C                 jmp     short loc_409A3E
.text:00409A8E ; ---------------------------------------------------------------------------
.text:00409A8E
.text:00409A8E loc_409A8E:                             ; CODE XREF: .text:00409A72↑j
.text:00409A8E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:00409A96                 jmp     short loc_409A3E
.text:00409A98 ; ---------------------------------------------------------------------------
.text:00409A98
.text:00409A98 loc_409A98:                             ; CODE XREF: .text:00409A67↑j
.text:00409A98                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:00409AA0                 jmp     short loc_409A3E
.text:00409AA2 ; ---------------------------------------------------------------------------
.text:00409AA2
.text:00409AA2 loc_409AA2:                             ; CODE XREF: .text:004099BE↑j
.text:00409AA2                 test    byte ptr ds:word_411258+1, 2
.text:00409AA9                 jz      short loc_409AB5
.text:00409AAB                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:00409AB3                 jmp     short loc_409A3E
.text:00409AB5 ; ---------------------------------------------------------------------------
.text:00409AB5
.text:00409AB5 loc_409AB5:                             ; CODE XREF: .text:00409AA9↑j
.text:00409AB5                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00409ABD                 jmp     loc_409A3E
.text:00409AC2 ; ---------------------------------------------------------------------------
.text:00409AC2
.text:00409AC2 loc_409AC2:                             ; CODE XREF: .text:004099AF↑j
.text:00409AC2                 mov     dword ptr [esp+28h], 0FFh
.text:00409ACA                 lea     edx, [esp+2Ch]
.text:00409ACE                 mov     [esp+10h], edx
.text:00409AD2                 mov     dword ptr [esp+0Ch], 1
.text:00409ADA                 mov     dword ptr [esp+8], 0
.text:00409AE2                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:00409AEA                 mov     dword ptr [esp], 80000002h
.text:00409AF1                 call    RegOpenKeyExA
.text:00409AF6                 mov     edi, eax
.text:00409AF8                 sub     esp, 14h
.text:00409AFB                 xor     eax, eax
.text:00409AFD                 test    edi, edi
.text:00409AFF                 jnz     loc_409905
.text:00409B05                 mov     dword ptr [esp+0Ch], 0
.text:00409B0D                 mov     edi, [esp+2Ch]
.text:00409B11                 lea     esi, [esp+28h]
.text:00409B15                 mov     [esp+14h], esi
.text:00409B19                 lea     esi, [esp+30h]
.text:00409B1D                 mov     [esp+10h], esi
.text:00409B21                 mov     dword ptr [esp+8], 0
.text:00409B29                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:00409B31                 mov     [esp], edi
.text:00409B34                 call    RegQueryValueExA
.text:00409B39                 sub     esp, 18h
.text:00409B3C                 test    eax, eax
.text:00409B3E                 jnz     short loc_409B4A
.text:00409B40                 cmp     dword ptr [esp+28h], 0FFh
.text:00409B48                 jbe     short loc_409B51
.text:00409B4A
.text:00409B4A loc_409B4A:                             ; CODE XREF: .text:00409B3E↑j
.text:00409B4A                 xor     eax, eax
.text:00409B4C                 jmp     loc_409905
.text:00409B51 ; ---------------------------------------------------------------------------
.text:00409B51
.text:00409B51 loc_409B51:                             ; CODE XREF: .text:00409B48↑j
.text:00409B51                 mov     edx, [esp+2Ch]
.text:00409B55                 mov     [esp], edx
.text:00409B58                 call    RegCloseKey
.text:00409B5D                 sub     esp, 4
.text:00409B60                 mov     [esp+4], esi
.text:00409B64                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:00409B6B                 call    lstrcmpiA
.text:00409B70                 sub     esp, 8
.text:00409B73                 test    eax, eax
.text:00409B75                 jz      short loc_409BC0
.text:00409B77
.text:00409B77 loc_409B77:                             ; CODE XREF: .text:00409BD0↓j
.text:00409B77                 mov     [esp+4], esi
.text:00409B7B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:00409B82                 call    lstrcmpiA
.text:00409B87                 sub     esp, 8
.text:00409B8A                 test    eax, eax
.text:00409B8C                 jz      short loc_409BAE
.text:00409B8E
.text:00409B8E loc_409B8E:                             ; CODE XREF: .text:00409BBE↓j
.text:00409B8E                 mov     [esp+4], esi
.text:00409B92                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:00409B99                 call    lstrcmpiA
.text:00409B9E                 sub     esp, 8
.text:00409BA1                 test    eax, eax
.text:00409BA3                 jnz     loc_4099C8
.text:00409BA9                 jmp     loc_409A48
.text:00409BAE ; ---------------------------------------------------------------------------
.text:00409BAE
.text:00409BAE loc_409BAE:                             ; CODE XREF: .text:00409B8C↑j
.text:00409BAE                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00409BB6                 mov     [esp], ebx
.text:00409BB9                 call    strcat
.text:00409BBE                 jmp     short loc_409B8E
.text:00409BC0 ; ---------------------------------------------------------------------------
.text:00409BC0
.text:00409BC0 loc_409BC0:                             ; CODE XREF: .text:00409B75↑j
.text:00409BC0                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00409BC8                 mov     [esp], ebx
.text:00409BCB                 call    strcat
.text:00409BD0                 jmp     short loc_409B77
.text:00409BD2 ; ---------------------------------------------------------------------------
.text:00409BD2
.text:00409BD2 loc_409BD2:                             ; CODE XREF: .text:0040996D↑j
.text:00409BD2                                         ; .text:0040997B↑j
.text:00409BD2                 cmp     eax, 5
.text:00409BD5                 jnz     loc_4099A7
.text:00409BDB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409BE0                 cmp     eax, 2
.text:00409BE3                 jz      short loc_409C4A
.text:00409BE5                 cmp     eax, 1
.text:00409BE8                 jz      short loc_409C23
.text:00409BEA                 test    eax, eax
.text:00409BEC                 jnz     loc_4099A7
.text:00409BF2                 mov     dword ptr [ebx], 7263694Dh
.text:00409BF8                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409BFF                 mov     dword ptr [ebx+8], 69572074h
.text:00409C06                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409C0D                 mov     dword ptr [ebx+10h], 30322073h
.text:00409C14                 mov     word ptr [ebx+14h], 3030h
.text:00409C1A                 mov     byte ptr [ebx+16h], 0
.text:00409C1E                 jmp     loc_4099A7
.text:00409C23 ; ---------------------------------------------------------------------------
.text:00409C23
.text:00409C23 loc_409C23:                             ; CODE XREF: .text:00409BE8↑j
.text:00409C23                 mov     dword ptr [ebx], 7263694Dh
.text:00409C29                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409C30                 mov     dword ptr [ebx+8], 69572074h
.text:00409C37                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409C3E                 mov     dword ptr [ebx+10h], 50582073h
.text:00409C45                 jmp     loc_4099A3
.text:00409C4A ; ---------------------------------------------------------------------------
.text:00409C4A
.text:00409C4A loc_409C4A:                             ; CODE XREF: .text:00409BE3↑j
.text:00409C4A                 mov     dword ptr [ebx], 7263694Dh
.text:00409C50                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409C57                 mov     dword ptr [ebx+8], 69572074h
.text:00409C5E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409C65                 mov     dword ptr [ebx+10h], 65532073h
.text:00409C6C                 mov     dword ptr [ebx+14h], 72657672h
.text:00409C73                 mov     dword ptr [ebx+18h], 30303220h
.text:00409C7A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:00409C80                 jmp     loc_4099A7
.text:00409C85 ; ---------------------------------------------------------------------------
.text:00409C85
.text:00409C85 loc_409C85:                             ; CODE XREF: .text:00409964↑j
.text:00409C85                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409C8B                 test    edx, edx
.text:00409C8D                 jnz     loc_40996A
.text:00409C93                 mov     dword ptr [ebx], 7263694Dh
.text:00409C99                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409CA0                 mov     dword ptr [ebx+8], 69572074h
.text:00409CA7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409CAE                 mov     dword ptr [ebx+10h], 544E2073h
.text:00409CB5                 mov     dword ptr [ebx+14h], 302E3420h
.text:00409CBC                 mov     byte ptr [ebx+18h], 0
.text:00409CC0                 jmp     loc_4099A7
.text:00409CC5 ; ---------------------------------------------------------------------------
.text:00409CC5
.text:00409CC5 loc_409CC5:                             ; CODE XREF: .text:0040995B↑j
.text:00409CC5                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:00409CCC                 jnz     loc_409961
.text:00409CD2                 mov     dword ptr [ebx], 7263694Dh
.text:00409CD8                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409CDF                 mov     dword ptr [ebx+8], 69572074h
.text:00409CE6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409CED                 mov     dword ptr [ebx+10h], 544E2073h
.text:00409CF4                 mov     dword ptr [ebx+14h], 352E3320h
.text:00409CFB                 mov     word ptr [ebx+18h], 31h ; '1'
.text:00409D01                 jmp     loc_4099A7
.text:00409D06 ; ---------------------------------------------------------------------------
.text:00409D06
.text:00409D06 loc_409D06:                             ; CODE XREF: .text:00409896↑j
.text:00409D06                 cld
.text:00409D07                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:00409D0C                 mov     ecx, 8
.text:00409D11                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:00409D18                 mov     edi, ebx
.text:00409D1A                 rep movsd
.text:00409D1C                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:00409D23                 mov     [edi+2], dl
.text:00409D26                 mov     [edi], si
.text:00409D29                 jmp     loc_409940
.text:00409D29 ; ---------------------------------------------------------------------------
.text:00409D2E                 align 10h
.text:00409D30
.text:00409D30 loc_409D30:                             ; CODE XREF: .text:0040988D↑j
.text:00409D30                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409D36                 cmp     ecx, 4
.text:00409D39                 jz      loc_409DF0
.text:00409D3F
.text:00409D3F loc_409D3F:                             ; CODE XREF: .text:00409E46↓j
.text:00409D3F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409D45
.text:00409D45 loc_409D45:                             ; CODE XREF: .text:00409DF8↓j
.text:00409D45                 cmp     ecx, 4
.text:00409D48                 jz      short loc_409D54
.text:00409D4A
.text:00409D4A loc_409D4A:                             ; CODE XREF: .text:00409D5C↓j
.text:00409D4A                                         ; .text:00409D61↓j
.text:00409D4A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00409D4F                 jmp     loc_4098BC
.text:00409D54 ; ---------------------------------------------------------------------------
.text:00409D54
.text:00409D54 loc_409D54:                             ; CODE XREF: .text:00409D48↑j
.text:00409D54                 cmp     edx, 0Ah
.text:00409D57                 jz      short loc_409D81
.text:00409D59
.text:00409D59 loc_409D59:                             ; CODE XREF: .text:00409DCF↓j
.text:00409D59                 cmp     ecx, 4
.text:00409D5C                 jnz     short loc_409D4A
.text:00409D5E                 cmp     edx, 5Ah ; 'Z'
.text:00409D61                 jnz     short loc_409D4A
.text:00409D63                 cld
.text:00409D64                 mov     edi, ebx
.text:00409D66                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:00409D6B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:00409D72                 mov     ecx, 9
.text:00409D77                 rep movsd
.text:00409D79                 mov     [edi], bx
.text:00409D7C                 jmp     loc_409940
.text:00409D81 ; ---------------------------------------------------------------------------
.text:00409D81
.text:00409D81 loc_409D81:                             ; CODE XREF: .text:00409D57↑j
.text:00409D81                 mov     dword ptr [ebx], 7263694Dh
.text:00409D87                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409D8E                 mov     dword ptr [ebx+8], 69572074h
.text:00409D95                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409D9C                 mov     dword ptr [ebx+10h], 38392073h
.text:00409DA3                 mov     byte ptr [ebx+14h], 0
.text:00409DA7                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00409DAD                 lea     edi, [edx-7CFh]
.text:00409DB3                 cmp     edi, 0B7h ; '·'
.text:00409DB9                 jbe     short loc_409DE3
.text:00409DBB                 cmp     edx, 886h
.text:00409DC1                 ja      short loc_409DD1
.text:00409DC3
.text:00409DC3 loc_409DC3:                             ; CODE XREF: .text:00409DE1↓j
.text:00409DC3                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409DC9                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409DCF                 jmp     short loc_409D59
.text:00409DD1 ; ---------------------------------------------------------------------------
.text:00409DD1
.text:00409DD1 loc_409DD1:                             ; CODE XREF: .text:00409DC1↑j
.text:00409DD1                 mov     dword ptr [esp+4], offset loc_409856
.text:00409DD9
.text:00409DD9 loc_409DD9:                             ; CODE XREF: .text:00409DEB↓j
.text:00409DD9                 mov     [esp], ebx
.text:00409DDC                 call    strcat
.text:00409DE1                 jmp     short loc_409DC3
.text:00409DE3 ; ---------------------------------------------------------------------------
.text:00409DE3
.text:00409DE3 loc_409DE3:                             ; CODE XREF: .text:00409DB9↑j
.text:00409DE3                 mov     dword ptr [esp+4], 40985Ah
.text:00409DEB                 jmp     short loc_409DD9
.text:00409DEB ; ---------------------------------------------------------------------------
.text:00409DED                 align 10h
.text:00409DF0
.text:00409DF0 loc_409DF0:                             ; CODE XREF: .text:00409D39↑j
.text:00409DF0                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409DF6                 test    edx, edx
.text:00409DF8                 jnz     loc_409D45
.text:00409DFE                 mov     dword ptr [ebx], 7263694Dh
.text:00409E04                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409E0B                 mov     dword ptr [ebx+8], 69572074h
.text:00409E12                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409E19                 mov     dword ptr [ebx+10h], 35392073h
.text:00409E20                 mov     byte ptr [ebx+14h], 0
.text:00409E24                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00409E2A                 lea     ecx, [edx-3B7h]
.text:00409E30                 cmp     ecx, 81h
.text:00409E36                 jbe     short loc_409E5D
.text:00409E38                 cmp     edx, 438h
.text:00409E3E                 ja      short loc_409E4B
.text:00409E40
.text:00409E40 loc_409E40:                             ; CODE XREF: .text:00409E5B↓j
.text:00409E40                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409E46                 jmp     loc_409D3F
.text:00409E4B ; ---------------------------------------------------------------------------
.text:00409E4B
.text:00409E4B loc_409E4B:                             ; CODE XREF: .text:00409E3E↑j
.text:00409E4B                 mov     dword ptr [esp+4], offset loc_40985F
.text:00409E53
.text:00409E53 loc_409E53:                             ; CODE XREF: .text:00409E65↓j
.text:00409E53                 mov     [esp], ebx
.text:00409E56                 call    strcat
.text:00409E5B                 jmp     short loc_409E40
.text:00409E5D ; ---------------------------------------------------------------------------
.text:00409E5D
.text:00409E5D loc_409E5D:                             ; CODE XREF: .text:00409E36↑j
.text:00409E5D                 mov     dword ptr [esp+4], 40985Ah
.text:00409E65                 jmp     short loc_409E53
.text:00409E65 ; ---------------------------------------------------------------------------
.text:00409E67                 align 10h
.text:00409E70
.text:00409E70 ; =============== S U B R O U T I N E =======================================
.text:00409E70
.text:00409E70
.text:00409E70 sub_409E70      proc near               ; CODE XREF: .text:0040A9CE↓p
.text:00409E70                                         ; sub_40AE50+12A↓p
.text:00409E70                 sub     esp, 0Ch
.text:00409E73                 call    sub_409F80
.text:00409E78                 mov     eax, ds:dword_4111B0
.text:00409E7D                 add     esp, 0Ch
.text:00409E80                 retn
.text:00409E80 sub_409E70      endp
.text:00409E80
.text:00409E81 ; ---------------------------------------------------------------------------
.text:00409E81                 jmp     short loc_409E90
.text:00409E81 ; ---------------------------------------------------------------------------
.text:00409E83                 align 10h
.text:00409E90
.text:00409E90 loc_409E90:                             ; CODE XREF: .text:00409E81↑j
.text:00409E90                 sub     esp, 0Ch
.text:00409E93                 call    sub_409F80
.text:00409E98                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00409E9D                 add     esp, 0Ch
.text:00409EA0                 retn
.text:00409EA1 ; ---------------------------------------------------------------------------
.text:00409EA1                 jmp     short loc_409EB0
.text:00409EA1 ; ---------------------------------------------------------------------------
.text:00409EA3                 align 10h
.text:00409EB0
.text:00409EB0 loc_409EB0:                             ; CODE XREF: .text:00409EA1↑j
.text:00409EB0                 sub     esp, 0Ch
.text:00409EB3                 call    sub_409F80
.text:00409EB8                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:00409EBD                 add     esp, 0Ch
.text:00409EC0                 retn
.text:00409EC1 ; ---------------------------------------------------------------------------
.text:00409EC1                 jmp     short loc_409ED0
.text:00409EC1 ; ---------------------------------------------------------------------------
.text:00409EC3                 align 10h
.text:00409ED0
.text:00409ED0 loc_409ED0:                             ; CODE XREF: .text:00409EC1↑j
.text:00409ED0                 sub     esp, 0Ch
.text:00409ED3                 call    sub_409F80
.text:00409ED8                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409EDD                 add     esp, 0Ch
.text:00409EE0                 retn
.text:00409EE1 ; ---------------------------------------------------------------------------
.text:00409EE1                 jmp     short loc_409EF0
.text:00409EE1 ; ---------------------------------------------------------------------------
.text:00409EE3                 align 10h
.text:00409EF0
.text:00409EF0 loc_409EF0:                             ; CODE XREF: .text:00409EE1↑j
.text:00409EF0                 sub     esp, 0Ch
.text:00409EF3                 call    GetVersion
.text:00409EF8                 shr     eax, 10h
.text:00409EFB                 add     esp, 0Ch
.text:00409EFE                 retn
.text:00409EFE ; ---------------------------------------------------------------------------
.text:00409EFF                 align 10h
.text:00409F00                 sub     esp, 0Ch
.text:00409F03                 call    sub_409F80
.text:00409F08                 xor     eax, eax
.text:00409F0A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:00409F11                 setz    al
.text:00409F14                 add     esp, 0Ch
.text:00409F17                 retn
.text:00409F17 ; ---------------------------------------------------------------------------
.text:00409F18                 align 10h
.text:00409F20
.text:00409F20 ; =============== S U B R O U T I N E =======================================
.text:00409F20
.text:00409F20
.text:00409F20 sub_409F20      proc near               ; CODE XREF: .text:loc_407810↑p
.text:00409F20                                         ; .text:loc_40A9B4↓p ...
.text:00409F20                 sub     esp, 0Ch
.text:00409F23                 call    sub_409F80
.text:00409F28                 xor     eax, eax
.text:00409F2A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:00409F31                 setz    al
.text:00409F34                 add     esp, 0Ch
.text:00409F37                 retn
.text:00409F37 sub_409F20      endp
.text:00409F37
.text:00409F37 ; ---------------------------------------------------------------------------
.text:00409F38                 align 10h
.text:00409F40                 sub     esp, 0Ch
.text:00409F43                 call    sub_409F80
.text:00409F48                 xor     eax, eax
.text:00409F4A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:00409F51                 setz    al
.text:00409F54                 add     esp, 0Ch
.text:00409F57                 retn
.text:00409F57 ; ---------------------------------------------------------------------------
.text:00409F58                 align 10h
.text:00409F60                 sub     esp, 0Ch
.text:00409F63                 call    sub_409F80
.text:00409F68                 xor     eax, eax
.text:00409F6A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:00409F71                 setz    al
.text:00409F74                 add     esp, 0Ch
.text:00409F77                 retn
.text:00409F77 ; ---------------------------------------------------------------------------
.text:00409F78                 align 10h
.text:00409F80
.text:00409F80 ; =============== S U B R O U T I N E =======================================
.text:00409F80
.text:00409F80
.text:00409F80 sub_409F80      proc near               ; CODE XREF: .text:00409880↑p
.text:00409F80                                         ; sub_409E70+3↑p ...
.text:00409F80
.text:00409F80 lpVersionInformation= dword ptr -0BCh
.text:00409F80 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:00409F80
.text:00409F80                 sub     esp, 0BCh
.text:00409F86                 mov     edx, ds:dword_411260
.text:00409F8C                 test    edx, edx
.text:00409F8E                 jz      short loc_409FA0
.text:00409F90
.text:00409F90 loc_409F90:                             ; CODE XREF: sub_409F80+7B↓j
.text:00409F90                 mov     edx, 1
.text:00409F95
.text:00409F95 loc_409F95:                             ; CODE XREF: sub_409F80+217↓j
.text:00409F95                 mov     eax, edx
.text:00409F97                 add     esp, 0BCh
.text:00409F9D                 retn
.text:00409F9D ; ---------------------------------------------------------------------------
.text:00409F9E                 align 10h
.text:00409FA0
.text:00409FA0 loc_409FA0:                             ; CODE XREF: sub_409F80+E↑j
.text:00409FA0                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:00409FA7                 mov     edx, 9Ch ; 'œ'
.text:00409FAC                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:00409FB2                 call    GetVersionExA
.text:00409FB7                 sub     esp, 4
.text:00409FBA                 test    eax, eax
.text:00409FBC                 jz      loc_40A174
.text:00409FC2
.text:00409FC2 loc_409FC2:                             ; CODE XREF: sub_409F80+245↓j
.text:00409FC2                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:00409FC9                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00409FCE                 cmp     eax, 1
.text:00409FD1                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00409FD7                 jz      loc_40A0C0
.text:00409FDD                 cmp     eax, 1
.text:00409FE0                 jb      loc_40A0B0
.text:00409FE6                 cmp     eax, 2
.text:00409FE9                 jz      short loc_40A00A
.text:00409FEB                 cmp     eax, 3
.text:00409FEE                 jz      short loc_409FFD
.text:00409FF0
.text:00409FF0 loc_409FF0:                             ; CODE XREF: sub_409F80+88↓j
.text:00409FF0                                         ; sub_409F80+C0↓j ...
.text:00409FF0                 mov     edx, 1
.text:00409FF5                 mov     ds:dword_411260, edx
.text:00409FFB                 jmp     short loc_409F90
.text:00409FFD ; ---------------------------------------------------------------------------
.text:00409FFD
.text:00409FFD loc_409FFD:                             ; CODE XREF: sub_409F80+6E↑j
.text:00409FFD                 mov     ecx, 17h
.text:0040A002
.text:0040A002 loc_40A002:                             ; CODE XREF: sub_409F80+1A7↓j
.text:0040A002                 mov     ds:dword_4111B0, ecx
.text:0040A008                 jmp     short loc_409FF0
.text:0040A00A ; ---------------------------------------------------------------------------
.text:0040A00A
.text:0040A00A loc_40A00A:                             ; CODE XREF: sub_409F80+69↑j
.text:0040A00A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040A00F                 cmp     eax, 3
.text:0040A012                 jz      short loc_40A08B
.text:0040A014                 cmp     eax, 4
.text:0040A017                 jz      short loc_40A07A
.text:0040A019
.text:0040A019 loc_40A019:                             ; CODE XREF: sub_409F80+102↓j
.text:0040A019                 cmp     eax, 4
.text:0040A01C                 ja      short loc_40A042
.text:0040A01E                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040A024                 test    ecx, ecx
.text:0040A026                 jnz     short loc_40A042
.text:0040A028                 mov     edx, 1Eh
.text:0040A02D
.text:0040A02D loc_40A02D:                             ; CODE XREF: sub_409F80+DF↓j
.text:0040A02D                 mov     ds:dword_4111B0, edx
.text:0040A033
.text:0040A033 loc_40A033:                             ; CODE XREF: sub_409F80+C5↓j
.text:0040A033                                         ; sub_409F80+D8↓j ...
.text:0040A033                 movzx   ecx, ds:word_411254
.text:0040A03A                 add     ds:dword_4111B0, ecx
.text:0040A040                 jmp     short loc_409FF0
.text:0040A042 ; ---------------------------------------------------------------------------
.text:0040A042
.text:0040A042 loc_40A042:                             ; CODE XREF: sub_409F80+9C↑j
.text:0040A042                                         ; sub_409F80+A6↑j
.text:0040A042                 cmp     eax, 5
.text:0040A045                 jnz     short loc_40A033
.text:0040A047                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040A04C                 cmp     eax, 2
.text:0040A04F                 jz      short loc_40A06E
.text:0040A051                 cmp     eax, 1
.text:0040A054                 jz      short loc_40A061
.text:0040A056                 test    eax, eax
.text:0040A058                 jnz     short loc_40A033
.text:0040A05A                 mov     edx, 32h ; '2'
.text:0040A05F                 jmp     short loc_40A02D
.text:0040A061 ; ---------------------------------------------------------------------------
.text:0040A061
.text:0040A061 loc_40A061:                             ; CODE XREF: sub_409F80+D4↑j
.text:0040A061                 mov     ecx, 3Ch ; '<'
.text:0040A066
.text:0040A066 loc_40A066:                             ; CODE XREF: sub_409F80+122↓j
.text:0040A066                 mov     ds:dword_4111B0, ecx
.text:0040A06C                 jmp     short loc_40A033
.text:0040A06E ; ---------------------------------------------------------------------------
.text:0040A06E
.text:0040A06E loc_40A06E:                             ; CODE XREF: sub_409F80+CF↑j
.text:0040A06E                 mov     eax, 46h ; 'F'
.text:0040A073
.text:0040A073 loc_40A073:                             ; CODE XREF: sub_409F80+109↓j
.text:0040A073                                         ; sub_409F80+129↓j
.text:0040A073                 mov     ds:dword_4111B0, eax
.text:0040A078                 jmp     short loc_40A033
.text:0040A07A ; ---------------------------------------------------------------------------
.text:0040A07A
.text:0040A07A loc_40A07A:                             ; CODE XREF: sub_409F80+97↑j
.text:0040A07A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040A080                 test    ecx, ecx
.text:0040A082                 jnz     short loc_40A019
.text:0040A084                 mov     eax, 28h ; '('
.text:0040A089                 jmp     short loc_40A073
.text:0040A08B ; ---------------------------------------------------------------------------
.text:0040A08B
.text:0040A08B loc_40A08B:                             ; CODE XREF: sub_409F80+92↑j
.text:0040A08B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040A090                 cmp     eax, 33h ; '3'
.text:0040A093                 jz      short loc_40A0A4
.text:0040A095                 cmp     eax, 5
.text:0040A098                 setz    cl
.text:0040A09B                 movzx   edx, cl
.text:0040A09E                 lea     ecx, [edx+edx*4+1Eh]
.text:0040A0A2                 jmp     short loc_40A066
.text:0040A0A4 ; ---------------------------------------------------------------------------
.text:0040A0A4
.text:0040A0A4 loc_40A0A4:                             ; CODE XREF: sub_409F80+113↑j
.text:0040A0A4                 mov     eax, 24h ; '$'
.text:0040A0A9                 jmp     short loc_40A073
.text:0040A0A9 ; ---------------------------------------------------------------------------
.text:0040A0AB                 align 10h
.text:0040A0B0
.text:0040A0B0 loc_40A0B0:                             ; CODE XREF: sub_409F80+60↑j
.text:0040A0B0                 mov     edx, 2
.text:0040A0B5                 mov     ds:dword_4111B0, edx
.text:0040A0BB                 jmp     loc_409FF0
.text:0040A0C0 ; ---------------------------------------------------------------------------
.text:0040A0C0
.text:0040A0C0 loc_40A0C0:                             ; CODE XREF: sub_409F80+57↑j
.text:0040A0C0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040A0C6                 cmp     ecx, 4
.text:0040A0C9                 jnz     loc_409FF0
.text:0040A0CF                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040A0D4                 test    eax, eax
.text:0040A0D6                 jnz     short loc_40A0FA
.text:0040A0D8                 mov     eax, 0Ah
.text:0040A0DD                 mov     ds:dword_4111B0, eax
.text:0040A0E2                 lea     eax, [edx-3B7h]
.text:0040A0E8                 cmp     eax, 81h
.text:0040A0ED                 ja      short loc_40A165
.text:0040A0EF                 mov     edx, 0Bh
.text:0040A0F4
.text:0040A0F4 loc_40A0F4:                             ; CODE XREF: sub_409F80+1F2↓j
.text:0040A0F4                 mov     ds:dword_4111B0, edx
.text:0040A0FA
.text:0040A0FA loc_40A0FA:                             ; CODE XREF: sub_409F80+156↑j
.text:0040A0FA                                         ; sub_409F80+1EB↓j
.text:0040A0FA                 cmp     ecx, 4
.text:0040A0FD                 jnz     loc_409FF0
.text:0040A103                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040A10A                 jz      short loc_40A12C
.text:0040A10C
.text:0040A10C loc_40A10C:                             ; CODE XREF: sub_409F80+1D4↓j
.text:0040A10C                                         ; sub_409F80+1DC↓j
.text:0040A10C                 cmp     ecx, 4
.text:0040A10F                 jnz     loc_409FF0
.text:0040A115                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040A11C                 jnz     loc_409FF0
.text:0040A122                 mov     ecx, 12h
.text:0040A127                 jmp     loc_40A002
.text:0040A12C ; ---------------------------------------------------------------------------
.text:0040A12C
.text:0040A12C loc_40A12C:                             ; CODE XREF: sub_409F80+18A↑j
.text:0040A12C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040A132                 mov     eax, 0Eh
.text:0040A137                 mov     ds:dword_4111B0, eax
.text:0040A13C                 lea     eax, [edx-7CFh]
.text:0040A142                 cmp     eax, 0B7h ; '·'
.text:0040A147                 ja      short loc_40A156
.text:0040A149                 mov     edx, 0Fh
.text:0040A14E
.text:0040A14E loc_40A14E:                             ; CODE XREF: sub_409F80+1E3↓j
.text:0040A14E                 mov     ds:dword_4111B0, edx
.text:0040A154                 jmp     short loc_40A10C
.text:0040A156 ; ---------------------------------------------------------------------------
.text:0040A156
.text:0040A156 loc_40A156:                             ; CODE XREF: sub_409F80+1C7↑j
.text:0040A156                 cmp     edx, 886h
.text:0040A15C                 jbe     short loc_40A10C
.text:0040A15E                 mov     edx, 10h
.text:0040A163                 jmp     short loc_40A14E
.text:0040A165 ; ---------------------------------------------------------------------------
.text:0040A165
.text:0040A165 loc_40A165:                             ; CODE XREF: sub_409F80+16D↑j
.text:0040A165                 cmp     edx, 438h
.text:0040A16B                 jbe     short loc_40A0FA
.text:0040A16D                 mov     edx, 0Ch
.text:0040A172                 jmp     short loc_40A0F4
.text:0040A174 ; ---------------------------------------------------------------------------
.text:0040A174
.text:0040A174 loc_40A174:                             ; CODE XREF: sub_409F80+3C↑j
.text:0040A174                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040A17C                 xor     edx, edx
.text:0040A17E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0040A182                 mov     dword_410060, edx
.text:0040A188                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040A18B                 call    GetVersionExA
.text:0040A190                 sub     esp, 4
.text:0040A193                 xor     edx, edx
.text:0040A195                 test    eax, eax
.text:0040A197                 jz      loc_409F95
.text:0040A19D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0040A1A1                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0040A1A5                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040A1AB                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040A1AF                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0040A1B5                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0040A1B9                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040A1BF                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0040A1C5                 jmp     loc_409FC2
.text:0040A1C5 sub_409F80      endp
.text:0040A1C5
.text:0040A1C5 ; ---------------------------------------------------------------------------
.text:0040A1CA                 align 10h
.text:0040A1D0
.text:0040A1D0 ; =============== S U B R O U T I N E =======================================
.text:0040A1D0
.text:0040A1D0
.text:0040A1D0 sub_40A1D0      proc near               ; CODE XREF: .text:00407543↑p
.text:0040A1D0                                         ; .text:00407593↑p
.text:0040A1D0
.text:0040A1D0 arg_4           = dword ptr  8
.text:0040A1D0
.text:0040A1D0                 sub     esp, 0Ch
.text:0040A1D3                 mov     edx, [esp+0Ch+arg_4]
.text:0040A1D7                 test    edx, edx
.text:0040A1D9                 jz      short loc_40A1E0
.text:0040A1DB                 add     esp, 0Ch
.text:0040A1DE                 jmp     short sub_40A220
.text:0040A1E0 ; ---------------------------------------------------------------------------
.text:0040A1E0
.text:0040A1E0 loc_40A1E0:                             ; CODE XREF: sub_40A1D0+9↑j
.text:0040A1E0                 call    _errno
.text:0040A1E5                 mov     dword ptr [eax], 16h
.text:0040A1EB                 xor     eax, eax
.text:0040A1ED                 add     esp, 0Ch
.text:0040A1F0                 retn
.text:0040A1F0 sub_40A1D0      endp
.text:0040A1F0
.text:0040A1F1 ; ---------------------------------------------------------------------------
.text:0040A1F1                 jmp     short sub_40A200
.text:0040A1F1 ; ---------------------------------------------------------------------------
.text:0040A1F3                 align 10h
.text:0040A200
.text:0040A200 ; =============== S U B R O U T I N E =======================================
.text:0040A200
.text:0040A200
.text:0040A200 ; int __cdecl sub_40A200(LPCSTR)
.text:0040A200 sub_40A200      proc near               ; CODE XREF: .text:00407738↑p
.text:0040A200                                         ; .text:00407746↑p ...
.text:0040A200
.text:0040A200 lpFileName      = dword ptr -0Ch
.text:0040A200 Destination     = dword ptr -8
.text:0040A200 arg_0           = dword ptr  4
.text:0040A200
.text:0040A200                 sub     esp, 0Ch
.text:0040A203                 mov     edx, [esp+0Ch+arg_0]
.text:0040A207                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040A20F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0040A212                 call    sub_40A220
.text:0040A217                 add     esp, 0Ch
.text:0040A21A                 retn
.text:0040A21A sub_40A200      endp
.text:0040A21A
.text:0040A21A ; ---------------------------------------------------------------------------
.text:0040A21B                 align 10h
.text:0040A220
.text:0040A220 ; =============== S U B R O U T I N E =======================================
.text:0040A220
.text:0040A220
.text:0040A220 ; int __cdecl sub_40A220(LPCSTR lpFileName, char *Destination)
.text:0040A220 sub_40A220      proc near               ; CODE XREF: sub_40A1D0+E↑j
.text:0040A220                                         ; sub_40A200+12↑p
.text:0040A220
.text:0040A220 Size            = dword ptr -2Ch
.text:0040A220 nBufferLength   = dword ptr -28h
.text:0040A220 lpBuffer        = dword ptr -24h
.text:0040A220 lpFilePart      = dword ptr -20h
.text:0040A220 FilePart        = dword ptr -14h
.text:0040A220 lpFileName      = dword ptr  4
.text:0040A220 Destination     = dword ptr  8
.text:0040A220
.text:0040A220                 push    ebp
.text:0040A221                 push    edi
.text:0040A222                 push    esi
.text:0040A223                 push    ebx
.text:0040A224                 sub     esp, 1Ch
.text:0040A227                 mov     edi, [esp+2Ch+lpFileName]
.text:0040A22B                 mov     ebp, [esp+2Ch+Destination]
.text:0040A22F                 test    edi, edi
.text:0040A231                 jz      loc_40A339
.text:0040A237                 cmp     byte ptr [edi], 0
.text:0040A23A                 jz      loc_40A32C
.text:0040A240                 mov     [esp+2Ch+Size], 104h ; Size
.text:0040A247                 call    malloc
.text:0040A24C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040A250                 lea     edx, [esp+2Ch+FilePart]
.text:0040A254                 mov     ebx, eax
.text:0040A256                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040A25A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0040A262                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040A265                 call    GetFullPathNameA
.text:0040A26A                 sub     esp, 10h
.text:0040A26D                 mov     esi, eax
.text:0040A26F                 test    eax, eax
.text:0040A271                 jz      loc_40A31A
.text:0040A277                 cmp     eax, 104h
.text:0040A27C                 jle     short loc_40A28D
.text:0040A27E                 test    ebp, ebp
.text:0040A280                 jz      short loc_40A2E9
.text:0040A282                 call    _errno
.text:0040A287                 mov     dword ptr [eax], 26h ; '&'
.text:0040A28D
.text:0040A28D loc_40A28D:                             ; CODE XREF: sub_40A220+5C↑j
.text:0040A28D                                         ; sub_40A220+F5↓j
.text:0040A28D                 call    _errno
.text:0040A292                 mov     edi, [eax]
.text:0040A294                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040A29C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040A29F                 call    sub_40A350
.text:0040A2A4                 test    eax, eax
.text:0040A2A6                 jnz     short loc_40A2C0
.text:0040A2A8                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040A2AD                 cmp     al, 2Fh ; '/'
.text:0040A2AF                 jz      short loc_40A2C0
.text:0040A2B1                 cmp     al, 5Ch ; '\'
.text:0040A2B3                 jz      short loc_40A2C0
.text:0040A2B5                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0040A2B9                 mov     byte ptr [esi+ebx+1], 0
.text:0040A2BE                 mov     esi, esi
.text:0040A2C0
.text:0040A2C0 loc_40A2C0:                             ; CODE XREF: sub_40A220+86↑j
.text:0040A2C0                                         ; sub_40A220+8F↑j ...
.text:0040A2C0                 call    _errno
.text:0040A2C5                 mov     [eax], edi
.text:0040A2C7                 mov     [esp+2Ch+Size], ebx
.text:0040A2CA                 call    sub_407430
.text:0040A2CF                 test    ebp, ebp
.text:0040A2D1                 mov     eax, ebx
.text:0040A2D3                 jz      short loc_40A2E1
.text:0040A2D5                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0040A2D9                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040A2DC                 call    strcpy
.text:0040A2E1
.text:0040A2E1 loc_40A2E1:                             ; CODE XREF: sub_40A220+B3↑j
.text:0040A2E1                                         ; sub_40A220+10A↓j
.text:0040A2E1                 add     esp, 1Ch
.text:0040A2E4                 pop     ebx
.text:0040A2E5                 pop     esi
.text:0040A2E6                 pop     edi
.text:0040A2E7                 pop     ebp
.text:0040A2E8                 retn
.text:0040A2E9 ; ---------------------------------------------------------------------------
.text:0040A2E9
.text:0040A2E9 loc_40A2E9:                             ; CODE XREF: sub_40A220+60↑j
.text:0040A2E9                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040A2EC                 lea     ecx, [eax+2]
.text:0040A2EF                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0040A2F3                 call    realloc
.text:0040A2F8                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040A2FC                 lea     edx, [esp+2Ch+FilePart]
.text:0040A300                 mov     ebx, eax
.text:0040A302                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040A306                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040A30A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040A30D                 call    GetFullPathNameA
.text:0040A312                 sub     esp, 10h
.text:0040A315                 jmp     loc_40A28D
.text:0040A31A ; ---------------------------------------------------------------------------
.text:0040A31A
.text:0040A31A loc_40A31A:                             ; CODE XREF: sub_40A220+51↑j
.text:0040A31A                 call    sub_407B60
.text:0040A31F                 mov     esi, eax
.text:0040A321                 call    _errno
.text:0040A326                 mov     [eax], esi
.text:0040A328
.text:0040A328 loc_40A328:                             ; CODE XREF: sub_40A220+117↓j
.text:0040A328                                         ; sub_40A220+124↓j
.text:0040A328                 xor     eax, eax
.text:0040A32A                 jmp     short loc_40A2E1
.text:0040A32C ; ---------------------------------------------------------------------------
.text:0040A32C
.text:0040A32C loc_40A32C:                             ; CODE XREF: sub_40A220+1A↑j
.text:0040A32C                 call    _errno
.text:0040A331                 mov     dword ptr [eax], 2
.text:0040A337                 jmp     short loc_40A328
.text:0040A339 ; ---------------------------------------------------------------------------
.text:0040A339
.text:0040A339 loc_40A339:                             ; CODE XREF: sub_40A220+11↑j
.text:0040A339                 call    _errno
.text:0040A33E                 mov     dword ptr [eax], 16h
.text:0040A344                 jmp     short loc_40A328
.text:0040A344 sub_40A220      endp
.text:0040A344
.text:0040A344 ; ---------------------------------------------------------------------------
.text:0040A346                 align 10h
.text:0040A350
.text:0040A350 ; =============== S U B R O U T I N E =======================================
.text:0040A350
.text:0040A350
.text:0040A350 ; int __cdecl sub_40A350(LPCSTR lpFileName, int)
.text:0040A350 sub_40A350      proc near               ; CODE XREF: .text:00407412↑p
.text:0040A350                                         ; sub_407010+25B3↑p ...
.text:0040A350
.text:0040A350 uMode           = dword ptr -1Ch
.text:0040A350 var_10          = dword ptr -10h
.text:0040A350 var_C           = dword ptr -0Ch
.text:0040A350 var_8           = dword ptr -8
.text:0040A350 var_4           = dword ptr -4
.text:0040A350 lpFileName      = dword ptr  4
.text:0040A350 arg_4           = dword ptr  8
.text:0040A350
.text:0040A350                 sub     esp, 1Ch
.text:0040A353                 mov     [esp+1Ch+var_10], ebx
.text:0040A357                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040A35B                 mov     [esp+1Ch+var_4], ebp
.text:0040A35F                 xor     ebp, ebp
.text:0040A361                 test    ebx, ebx
.text:0040A363                 mov     [esp+1Ch+var_C], esi
.text:0040A367                 mov     esi, [esp+1Ch+arg_4]
.text:0040A36B                 mov     [esp+1Ch+var_8], edi
.text:0040A36F                 jz      short loc_40A379
.text:0040A371                 test    esi, 0FFFFFFE8h
.text:0040A377                 jz      short loc_40A3A0
.text:0040A379
.text:0040A379 loc_40A379:                             ; CODE XREF: sub_40A350+1F↑j
.text:0040A379                 call    _errno
.text:0040A37E                 mov     dword ptr [eax], 16h
.text:0040A384
.text:0040A384 loc_40A384:                             ; CODE XREF: sub_40A350+B1↓j
.text:0040A384                 mov     eax, 0FFFFFFFFh
.text:0040A389
.text:0040A389 loc_40A389:                             ; CODE XREF: sub_40A350+86↓j
.text:0040A389                                         ; sub_40A350+A4↓j
.text:0040A389                 mov     ebx, [esp+1Ch+var_10]
.text:0040A38D                 mov     esi, [esp+1Ch+var_C]
.text:0040A391                 mov     edi, [esp+1Ch+var_8]
.text:0040A395                 mov     ebp, [esp+1Ch+var_4]
.text:0040A399                 add     esp, 1Ch
.text:0040A39C                 retn
.text:0040A39C ; ---------------------------------------------------------------------------
.text:0040A39D                 align 10h
.text:0040A3A0
.text:0040A3A0 loc_40A3A0:                             ; CODE XREF: sub_40A350+27↑j
.text:0040A3A0                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0040A3A7                 call    SetErrorMode
.text:0040A3AC                 sub     esp, 4
.text:0040A3AF                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0040A3B2                 call    GetFileAttributesA
.text:0040A3B7                 sub     esp, 4
.text:0040A3BA                 mov     edi, eax
.text:0040A3BC                 cmp     eax, 0FFFFFFFFh
.text:0040A3BF                 jz      short loc_40A403
.text:0040A3C1
.text:0040A3C1 loc_40A3C1:                             ; CODE XREF: sub_40A350+C6↓j
.text:0040A3C1                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0040A3C8                 call    SetErrorMode
.text:0040A3CD                 sub     esp, 4
.text:0040A3D0                 mov     eax, 0FFFFFFFFh
.text:0040A3D5                 inc     ebp
.text:0040A3D6                 jz      short loc_40A389
.text:0040A3D8                 test    esi, 10h
.text:0040A3DE                 jz      short loc_40A3E8
.text:0040A3E0                 test    edi, 10h
.text:0040A3E6                 jz      short loc_40A3F6
.text:0040A3E8
.text:0040A3E8 loc_40A3E8:                             ; CODE XREF: sub_40A350+8E↑j
.text:0040A3E8                 and     esi, 2
.text:0040A3EB                 jz      short loc_40A3F2
.text:0040A3ED                 and     edi, 1
.text:0040A3F0                 jnz     short loc_40A3F6
.text:0040A3F2
.text:0040A3F2 loc_40A3F2:                             ; CODE XREF: sub_40A350+9B↑j
.text:0040A3F2                 xor     eax, eax
.text:0040A3F4                 jmp     short loc_40A389
.text:0040A3F6 ; ---------------------------------------------------------------------------
.text:0040A3F6
.text:0040A3F6 loc_40A3F6:                             ; CODE XREF: sub_40A350+96↑j
.text:0040A3F6                                         ; sub_40A350+A0↑j
.text:0040A3F6                 call    _errno
.text:0040A3FB                 mov     dword ptr [eax], 0Dh
.text:0040A401                 jmp     short loc_40A384
.text:0040A403 ; ---------------------------------------------------------------------------
.text:0040A403
.text:0040A403 loc_40A403:                             ; CODE XREF: sub_40A350+6F↑j
.text:0040A403                 call    sub_407B60
.text:0040A408                 mov     ebp, eax
.text:0040A40A                 call    _errno
.text:0040A40F                 mov     [eax], ebp
.text:0040A411                 mov     ebp, 0FFFFFFFFh
.text:0040A416                 jmp     short loc_40A3C1
.text:0040A416 sub_40A350      endp
.text:0040A416
.text:0040A416 ; ---------------------------------------------------------------------------
.text:0040A418                 align 10h
.text:0040A420 ; const char String[4]
.text:0040A420 String          db ' :/',0              ; DATA XREF: sub_40A430+FA↓o
.text:0040A424                 align 10h
.text:0040A430
.text:0040A430 ; =============== S U B R O U T I N E =======================================
.text:0040A430
.text:0040A430
.text:0040A430 ; int __cdecl sub_40A430(LPCSTR)
.text:0040A430 sub_40A430      proc near               ; CODE XREF: sub_408380+E↑p
.text:0040A430                                         ; sub_408880+17↑p ...
.text:0040A430
.text:0040A430 Str             = dword ptr -1Ch
.text:0040A430 Val             = dword ptr -18h
.text:0040A430 Count           = dword ptr -14h
.text:0040A430 var_10          = dword ptr -10h
.text:0040A430 var_C           = dword ptr -0Ch
.text:0040A430 var_8           = dword ptr -8
.text:0040A430 var_4           = dword ptr -4
.text:0040A430 arg_0           = dword ptr  4
.text:0040A430
.text:0040A430                 sub     esp, 1Ch
.text:0040A433                 mov     edx, [esp+1Ch+arg_0]
.text:0040A437                 mov     [esp+1Ch+var_8], edi
.text:0040A43B                 mov     [esp+1Ch+var_10], ebx
.text:0040A43F                 mov     [esp+1Ch+var_C], esi
.text:0040A443                 mov     [esp+1Ch+var_4], ebp
.text:0040A447                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040A44A                 call    sub_40A200
.text:0040A44F                 test    eax, eax
.text:0040A451                 mov     edi, eax
.text:0040A453                 jz      short loc_40A490
.text:0040A455                 mov     [esp+1Ch+Str], eax ; Str
.text:0040A458                 call    strlen
.text:0040A45D                 cmp     eax, 2
.text:0040A460                 jbe     short loc_40A46C
.text:0040A462                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040A466                 jz      loc_40A520
.text:0040A46C
.text:0040A46C loc_40A46C:                             ; CODE XREF: sub_40A430+30↑j
.text:0040A46C                                         ; sub_40A430+F4↓j
.text:0040A46C                 test    edi, edi
.text:0040A46E                 jz      short loc_40A490
.text:0040A470                 mov     [esp+1Ch+Str], edi ; Str
.text:0040A473                 call    strlen
.text:0040A478                 cmp     eax, 4
.text:0040A47B                 mov     ebp, eax
.text:0040A47D                 jle     short loc_40A490
.text:0040A47F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040A482                 jz      short loc_40A4B0
.text:0040A484                 lea     esi, [esi+0]
.text:0040A48A                 lea     edi, [edi+0]
.text:0040A490
.text:0040A490 loc_40A490:                             ; CODE XREF: sub_40A430+23↑j
.text:0040A490                                         ; sub_40A430+3E↑j ...
.text:0040A490                 xor     esi, esi
.text:0040A492
.text:0040A492 loc_40A492:                             ; CODE XREF: sub_40A430+CD↓j
.text:0040A492                                         ; sub_40A430+115↓j
.text:0040A492                 mov     [esp+1Ch+Str], edi ; Block
.text:0040A495                 call    free
.text:0040A49A                 mov     eax, esi
.text:0040A49C                 mov     ebx, [esp+1Ch+var_10]
.text:0040A4A0                 mov     esi, [esp+1Ch+var_C]
.text:0040A4A4                 mov     edi, [esp+1Ch+var_8]
.text:0040A4A8                 mov     ebp, [esp+1Ch+var_4]
.text:0040A4AC                 add     esp, 1Ch
.text:0040A4AF                 retn
.text:0040A4B0 ; ---------------------------------------------------------------------------
.text:0040A4B0
.text:0040A4B0 loc_40A4B0:                             ; CODE XREF: sub_40A430+52↑j
.text:0040A4B0                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:0040A4B4                 jnz     short loc_40A490
.text:0040A4B6                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040A4BE                 lea     ecx, [edi+2]
.text:0040A4C1                 mov     [esp+1Ch+Str], ecx ; Str
.text:0040A4C4                 call    strchr
.text:0040A4C9                 test    eax, eax
.text:0040A4CB                 jnz     short loc_40A4FF
.text:0040A4CD
.text:0040A4CD loc_40A4CD:                             ; CODE XREF: sub_40A430+E2↓j
.text:0040A4CD                 inc     ebp
.text:0040A4CE
.text:0040A4CE loc_40A4CE:                             ; CODE XREF: sub_40A430+E9↓j
.text:0040A4CE                 mov     [esp+1Ch+Val], 1 ; Size
.text:0040A4D6                 lea     ebx, [ebp+1]
.text:0040A4D9                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040A4DC                 call    calloc
.text:0040A4E1                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040A4E4                 mov     esi, eax
.text:0040A4E6                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040A4EA                 mov     [esp+1Ch+Val], edi ; Source
.text:0040A4EE                 call    strncpy
.text:0040A4F3                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:0040A4F8                 mov     byte ptr [ebp+esi+0], 0
.text:0040A4FD                 jmp     short loc_40A492
.text:0040A4FF ; ---------------------------------------------------------------------------
.text:0040A4FF
.text:0040A4FF loc_40A4FF:                             ; CODE XREF: sub_40A430+9B↑j
.text:0040A4FF                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040A507                 inc     eax
.text:0040A508                 mov     [esp+1Ch+Str], eax ; Str
.text:0040A50B                 call    strchr
.text:0040A510                 test    eax, eax
.text:0040A512                 jz      short loc_40A4CD
.text:0040A514                 sub     eax, edi
.text:0040A516                 lea     ebp, [eax+1]
.text:0040A519                 jmp     short loc_40A4CE
.text:0040A519 ; ---------------------------------------------------------------------------
.text:0040A51B                 align 10h
.text:0040A520
.text:0040A520 loc_40A520:                             ; CODE XREF: sub_40A430+36↑j
.text:0040A520                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:0040A524                 jnz     loc_40A46C
.text:0040A52A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:0040A531                 call    _strdup
.text:0040A536                 movsx   edx, byte ptr [edi]
.text:0040A539                 mov     esi, eax
.text:0040A53B                 mov     [esp+1Ch+Str], edx ; C
.text:0040A53E                 call    toupper
.text:0040A543                 mov     [esi], al
.text:0040A545                 jmp     loc_40A492
.text:0040A545 sub_40A430      endp
.text:0040A545
.text:0040A545 ; ---------------------------------------------------------------------------
.text:0040A54A                 align 10h
.text:0040A550
.text:0040A550 ; =============== S U B R O U T I N E =======================================
.text:0040A550
.text:0040A550
.text:0040A550 sub_40A550      proc near               ; CODE XREF: .text:0040A6A4↓p
.text:0040A550                                         ; .text:0040A788↓p
.text:0040A550
.text:0040A550 Str             = dword ptr -2Ch
.text:0040A550 Val             = dword ptr -28h
.text:0040A550 var_18          = dword ptr -18h
.text:0040A550 var_11          = byte ptr -11h
.text:0040A550 arg_0           = dword ptr  4
.text:0040A550
.text:0040A550                 push    ebp
.text:0040A551                 push    edi
.text:0040A552                 push    esi
.text:0040A553                 push    ebx
.text:0040A554                 sub     esp, 1Ch
.text:0040A557                 mov     edx, [esp+2Ch+arg_0]
.text:0040A55B                 cmp     edx, ds:dword_411280
.text:0040A561                 mov     [esp+2Ch+var_11], 0
.text:0040A566                 jz      loc_40A664
.text:0040A56C                 mov     ebx, ds:dword_411270
.text:0040A572                 test    ebx, ebx
.text:0040A574                 jz      short loc_40A5E2
.text:0040A576
.text:0040A576 loc_40A576:                             ; CODE XREF: sub_40A550+10F↓j
.text:0040A576                 mov     ebx, [esp+2Ch+arg_0]
.text:0040A57A                 xor     edi, edi
.text:0040A57C                 xor     esi, esi
.text:0040A57E                 mov     ebp, offset dword_411298
.text:0040A583                 lea     esi, [esi+0]
.text:0040A589                 lea     edi, [edi+0]
.text:0040A590
.text:0040A590 loc_40A590:                             ; CODE XREF: sub_40A550+60↓j
.text:0040A590                 mov     edx, [ebp+4]
.text:0040A593                 mov     ecx, edi
.text:0040A595                 mov     eax, [ebp+0]
.text:0040A598                 shl     ecx, 4
.text:0040A59B                 mov     [esp+2Ch+var_18], ecx
.text:0040A59F                 mov     ecx, edx
.text:0040A5A1                 xor     eax, ebx
.text:0040A5A3                 xor     ecx, esi
.text:0040A5A5                 or      ecx, eax
.text:0040A5A7                 jz      short loc_40A5D1
.text:0040A5A9                 inc     edi
.text:0040A5AA                 add     ebp, 10h
.text:0040A5AD                 cmp     edi, 20h ; ' '
.text:0040A5B0                 jle     short loc_40A590
.text:0040A5B2
.text:0040A5B2 loc_40A5B2:                             ; CODE XREF: sub_40A550+90↓j
.text:0040A5B2                 movzx   ebx, [esp+2Ch+var_11]
.text:0040A5B7                 mov     eax, [esp+2Ch+arg_0]
.text:0040A5BB                 mov     byte_410070, bl
.text:0040A5C1                 mov     ds:dword_411280, eax
.text:0040A5C6                 movsx   eax, bl
.text:0040A5C9
.text:0040A5C9 loc_40A5C9:                             ; CODE XREF: sub_40A550+11B↓j
.text:0040A5C9                 add     esp, 1Ch
.text:0040A5CC                 pop     ebx
.text:0040A5CD                 pop     esi
.text:0040A5CE                 pop     edi
.text:0040A5CF                 pop     ebp
.text:0040A5D0                 retn
.text:0040A5D1 ; ---------------------------------------------------------------------------
.text:0040A5D1
.text:0040A5D1 loc_40A5D1:                             ; CODE XREF: sub_40A550+57↑j
.text:0040A5D1                 mov     edx, [esp+2Ch+var_18]
.text:0040A5D5                 movzx   eax, byte ptr ds:dword_411290[edx]
.text:0040A5DC                 mov     [esp+2Ch+var_11], al
.text:0040A5E0                 jmp     short loc_40A5B2
.text:0040A5E2 ; ---------------------------------------------------------------------------
.text:0040A5E2
.text:0040A5E2 loc_40A5E2:                             ; CODE XREF: sub_40A550+24↑j
.text:0040A5E2                 mov     [esp+2Ch+Str], 0
.text:0040A5E9                 call    sub_40BC20
.text:0040A5EE                 test    eax, eax
.text:0040A5F0                 mov     ebx, eax
.text:0040A5F2                 jz      short loc_40A64C
.text:0040A5F4                 movzx   ecx, byte ptr [eax]
.text:0040A5F7                 mov     esi, 0FFFFFFF0h
.text:0040A5FC                 test    cl, cl
.text:0040A5FE                 jz      short loc_40A64C
.text:0040A600
.text:0040A600 loc_40A600:                             ; CODE XREF: sub_40A550+FA↓j
.text:0040A600                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:0040A603                 movsx   ebp, cl
.text:0040A606                 add     esi, 10h
.text:0040A609                 mov     ds:dword_411290[esi], ebp
.text:0040A60F                 mov     edi, ebp
.text:0040A611                 sar     edi, 1Fh
.text:0040A614                 mov     ds:dword_411294[esi], edi
.text:0040A61A                 call    sub_408880
.text:0040A61F                 mov     ds:dword_411298[esi], eax
.text:0040A625                 xor     ecx, ecx
.text:0040A627                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040A62A                 mov     ds:dword_41129C[esi], ecx
.text:0040A630                 mov     [esp+2Ch+Val], 0 ; Val
.text:0040A638                 call    strchr
.text:0040A63D                 mov     ebx, eax
.text:0040A63F                 inc     ebx
.text:0040A640                 jz      short loc_40A64C
.text:0040A642                 movzx   edx, byte ptr [eax+1]
.text:0040A646                 test    dl, dl
.text:0040A648                 mov     cl, dl
.text:0040A64A                 jnz     short loc_40A600
.text:0040A64C
.text:0040A64C loc_40A64C:                             ; CODE XREF: sub_40A550+A2↑j
.text:0040A64C                                         ; sub_40A550+AE↑j ...
.text:0040A64C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040A64F                 mov     esi, 1
.text:0040A654                 mov     ds:dword_411270, esi
.text:0040A65A                 call    free
.text:0040A65F                 jmp     loc_40A576
.text:0040A664 ; ---------------------------------------------------------------------------
.text:0040A664
.text:0040A664 loc_40A664:                             ; CODE XREF: sub_40A550+16↑j
.text:0040A664                 movsx   eax, byte_410070
.text:0040A66B                 jmp     loc_40A5C9
.text:0040A66B sub_40A550      endp
.text:0040A66B
.text:0040A66B ; ---------------------------------------------------------------------------
.text:0040A670 dword_40A670    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:0040A670                                         ; DATA XREF: .text:0040A693↓o
.text:0040A670                                         ; .text:0040A773↓o
.text:0040A680 ; ---------------------------------------------------------------------------
.text:0040A680                 sub     esp, 1Ch
.text:0040A683                 mov     [esp+14h], esi
.text:0040A687                 mov     esi, [esp+20h]
.text:0040A68B                 mov     [esp+18h], edi
.text:0040A68F                 mov     [esp+10h], ebx
.text:0040A693                 mov     dword ptr [esp], offset dword_40A670
.text:0040A69A                 call    _strdup
.text:0040A69F                 mov     [esp], esi
.text:0040A6A2                 mov     edi, eax
.text:0040A6A4                 call    sub_40A550
.text:0040A6A9                 mov     [edi], al
.text:0040A6AB                 test    al, al
.text:0040A6AD                 jz      short loc_40A6C1
.text:0040A6AF                 mov     eax, edi
.text:0040A6B1                 mov     ebx, [esp+10h]
.text:0040A6B5                 mov     esi, [esp+14h]
.text:0040A6B9                 mov     edi, [esp+18h]
.text:0040A6BD                 add     esp, 1Ch
.text:0040A6C0                 retn
.text:0040A6C1 ; ---------------------------------------------------------------------------
.text:0040A6C1
.text:0040A6C1 loc_40A6C1:                             ; CODE XREF: .text:0040A6AD↑j
.text:0040A6C1                 mov     [esp], edi
.text:0040A6C4                 call    free
.text:0040A6C9                 mov     dword ptr [esp+4], 0
.text:0040A6D1                 mov     dword ptr [esp], 0
.text:0040A6D8                 call    GetCurrentDirectoryA
.text:0040A6DD                 sub     esp, 8
.text:0040A6E0                 lea     esi, [eax+1]
.text:0040A6E3                 mov     [esp], esi
.text:0040A6E6                 call    malloc
.text:0040A6EB                 mov     [esp+4], eax
.text:0040A6EF                 mov     edi, eax
.text:0040A6F1                 mov     [esp], esi
.text:0040A6F4                 call    GetCurrentDirectoryA
.text:0040A6F9                 sub     esp, 8
.text:0040A6FC                 test    eax, eax
.text:0040A6FE                 jnz     short loc_40A720
.text:0040A700                 mov     dword ptr [esp+20h], 40A674h
.text:0040A708                 mov     ebx, [esp+10h]
.text:0040A70C                 mov     esi, [esp+14h]
.text:0040A710                 mov     edi, [esp+18h]
.text:0040A714                 add     esp, 1Ch
.text:0040A717                 jmp     _strdup
.text:0040A717 ; ---------------------------------------------------------------------------
.text:0040A71C                 align 10h
.text:0040A720
.text:0040A720 loc_40A720:                             ; CODE XREF: .text:0040A6FE↑j
.text:0040A720                 mov     [esp+20h], edi
.text:0040A724                 mov     ebx, [esp+10h]
.text:0040A728                 mov     esi, [esp+14h]
.text:0040A72C                 mov     edi, [esp+18h]
.text:0040A730                 add     esp, 1Ch
.text:0040A733                 jmp     sub_40A430
.text:0040A733 ; ---------------------------------------------------------------------------
.text:0040A738                 align 10h
.text:0040A740                 sub     esp, 7Ch
.text:0040A743                 lea     edx, [esp+10h]
.text:0040A747                 mov     [esp+8], edx
.text:0040A74B                 mov     edx, [esp+80h]
.text:0040A752                 mov     [esp+70h], ebx
.text:0040A756                 mov     [esp+74h], esi
.text:0040A75A                 mov     [esp+4], edx
.text:0040A75E                 mov     [esp+78h], edi
.text:0040A762                 mov     dword ptr [esp], 0
.text:0040A769                 call    sub_40BE30
.text:0040A76E                 xor     edx, edx
.text:0040A770                 inc     eax
.text:0040A771                 jz      short loc_40A795
.text:0040A773                 mov     dword ptr [esp], offset dword_40A670
.text:0040A77A                 mov     esi, [esp+20h]
.text:0040A77E                 call    _strdup
.text:0040A783                 mov     edi, eax
.text:0040A785                 mov     [esp], esi
.text:0040A788                 call    sub_40A550
.text:0040A78D                 mov     [edi], al
.text:0040A78F                 test    al, al
.text:0040A791                 mov     edx, edi
.text:0040A793                 jz      short loc_40A7A7
.text:0040A795
.text:0040A795 loc_40A795:                             ; CODE XREF: .text:0040A771↑j
.text:0040A795                                         ; .text:0040A7F4↓j
.text:0040A795                 mov     ebx, [esp+70h]
.text:0040A799                 mov     eax, edx
.text:0040A79B                 mov     esi, [esp+74h]
.text:0040A79F                 mov     edi, [esp+78h]
.text:0040A7A3                 add     esp, 7Ch
.text:0040A7A6                 retn
.text:0040A7A7 ; ---------------------------------------------------------------------------
.text:0040A7A7
.text:0040A7A7 loc_40A7A7:                             ; CODE XREF: .text:0040A793↑j
.text:0040A7A7                 mov     [esp], edi
.text:0040A7AA                 call    free
.text:0040A7AF                 mov     dword ptr [esp+4], 0
.text:0040A7B7                 mov     dword ptr [esp], 0
.text:0040A7BE                 call    GetCurrentDirectoryA
.text:0040A7C3                 sub     esp, 8
.text:0040A7C6                 lea     esi, [eax+1]
.text:0040A7C9                 mov     [esp], esi
.text:0040A7CC                 call    malloc
.text:0040A7D1                 mov     [esp+4], eax
.text:0040A7D5                 mov     edi, eax
.text:0040A7D7                 mov     [esp], esi
.text:0040A7DA                 call    GetCurrentDirectoryA
.text:0040A7DF                 sub     esp, 8
.text:0040A7E2                 test    eax, eax
.text:0040A7E4                 jnz     short loc_40A7F6
.text:0040A7E6                 mov     dword ptr [esp], 40A674h
.text:0040A7ED                 call    _strdup
.text:0040A7F2
.text:0040A7F2 loc_40A7F2:                             ; CODE XREF: .text:0040A7FE↓j
.text:0040A7F2                 mov     edx, eax
.text:0040A7F4                 jmp     short loc_40A795
.text:0040A7F6 ; ---------------------------------------------------------------------------
.text:0040A7F6
.text:0040A7F6 loc_40A7F6:                             ; CODE XREF: .text:0040A7E4↑j
.text:0040A7F6                 mov     [esp], edi
.text:0040A7F9                 call    sub_40A430
.text:0040A7FE                 jmp     short loc_40A7F2
.text:0040A800
.text:0040A800 ; =============== S U B R O U T I N E =======================================
.text:0040A800
.text:0040A800
.text:0040A800 ; int __cdecl sub_40A800(LPCSTR)
.text:0040A800 sub_40A800      proc near               ; CODE XREF: sub_407D30+12F↑p
.text:0040A800
.text:0040A800 String1         = dword ptr -1Ch
.text:0040A800 String2         = dword ptr -18h
.text:0040A800 var_C           = dword ptr -0Ch
.text:0040A800 var_8           = dword ptr -8
.text:0040A800 var_4           = dword ptr -4
.text:0040A800 arg_0           = dword ptr  4
.text:0040A800
.text:0040A800                 sub     esp, 1Ch
.text:0040A803                 mov     [esp+1Ch+var_4], edi
.text:0040A807                 mov     edi, [esp+1Ch+arg_0]
.text:0040A80B                 mov     [esp+1Ch+var_C], ebx
.text:0040A80F                 mov     [esp+1Ch+var_8], esi
.text:0040A813                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040A816                 call    sub_40A200
.text:0040A81B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040A81E                 mov     esi, eax
.text:0040A820                 call    sub_40A430
.text:0040A825                 mov     [esp+1Ch+String2], eax ; String2
.text:0040A829                 mov     ebx, eax
.text:0040A82B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040A82E                 call    _stricmp
.text:0040A833                 test    eax, eax
.text:0040A835                 setz    dl
.text:0040A838                 test    esi, esi
.text:0040A83A                 movzx   edi, dl
.text:0040A83D                 jz      short loc_40A847
.text:0040A83F                 mov     [esp+1Ch+String1], esi ; Block
.text:0040A842                 call    free
.text:0040A847
.text:0040A847 loc_40A847:                             ; CODE XREF: sub_40A800+3D↑j
.text:0040A847                 test    ebx, ebx
.text:0040A849                 jz      short loc_40A853
.text:0040A84B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040A84E                 call    free
.text:0040A853
.text:0040A853 loc_40A853:                             ; CODE XREF: sub_40A800+49↑j
.text:0040A853                 mov     eax, edi
.text:0040A855                 mov     ebx, [esp+1Ch+var_C]
.text:0040A859                 mov     esi, [esp+1Ch+var_8]
.text:0040A85D                 mov     edi, [esp+1Ch+var_4]
.text:0040A861                 add     esp, 1Ch
.text:0040A864                 retn
.text:0040A864 sub_40A800      endp
.text:0040A864
.text:0040A864 ; ---------------------------------------------------------------------------
.text:0040A865                 align 10h
.text:0040A870 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:0040A8C1↓o
.text:0040A879 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:0040A879                                         ; DATA XREF: .text:0040A8D2↓o
.text:0040A88D ; const CHAR FileName[]
.text:0040A88D FileName        db '\\.\vwin32',0       ; DATA XREF: .text:0040AA1C↓o
.text:0040A88D                                         ; sub_40AE50+17C↓o
.text:0040A898 ; ---------------------------------------------------------------------------
.text:0040A898
.text:0040A898 loc_40A898:                             ; DATA XREF: .text:0040AB32↓o
.text:0040A898                 dec     esi
.text:0040A899                 push    esp
.text:0040A89A                 inc     esi
.text:0040A89B                 push    ebx
.text:0040A89C                 add     [esi+41h], al
.text:0040A89F                 push    esp
.text:0040A8A0                 xor     esi, [edx]
.text:0040A8A2                 add     [esi+41h], al
.text:0040A8A5                 push    esp
.text:0040A8A6                 add     [ebx+44h], al
.text:0040A8A9                 inc     esi
.text:0040A8AA                 push    ebx
.text:0040A8AB
.text:0040A8AB loc_40A8AB:                             ; CODE XREF: sub_40AE50+101↓p
.text:0040A8AB                 add     [ebp+55002674h], cl
.text:0040A8B1                 push    edi
.text:0040A8B2                 push    esi
.text:0040A8B3                 push    ebx
.text:0040A8B4                 sub     esp, 8BCh
.text:0040A8BA                 mov     ebp, [esp+8D0h]
.text:0040A8C1                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:0040A8C8                 call    LoadLibraryA
.text:0040A8CD                 sub     esp, 4
.text:0040A8D0                 mov     edi, eax
.text:0040A8D2                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040A8DA                 mov     [esp], eax
.text:0040A8DD                 call    GetProcAddress
.text:0040A8E2                 sub     esp, 8
.text:0040A8E5                 mov     esi, eax
.text:0040A8E7                 test    ebp, ebp
.text:0040A8E9                 mov     dword ptr [esp+20h], 0
.text:0040A8F1                 jz      loc_40AE31
.text:0040A8F7                 mov     [esp], ebp
.text:0040A8FA                 call    sub_4074B0
.text:0040A8FF                 mov     [esp], eax
.text:0040A902                 mov     ebp, eax
.text:0040A904                 call    strlen
.text:0040A909                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040A90E                 mov     ebx, eax
.text:0040A910                 jz      short loc_40A92C
.text:0040A912                 mov     [esp], ebp
.text:0040A915                 lea     edx, [eax+1]
.text:0040A918                 mov     [esp+4], edx
.text:0040A91C                 call    realloc
.text:0040A921                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040A925                 mov     ebp, eax
.text:0040A927                 mov     byte ptr [ebx+eax+1], 0
.text:0040A92C
.text:0040A92C loc_40A92C:                             ; CODE XREF: .text:0040A910↑j
.text:0040A92C                 mov     dword ptr [esp+1Ch], 400h
.text:0040A934                 lea     edx, [esp+0B0h]
.text:0040A93B                 lea     ebx, [esp+5Ch]
.text:0040A93F                 mov     [esp+18h], edx
.text:0040A943                 lea     ecx, [esp+58h]
.text:0040A947                 lea     edx, [esp+54h]
.text:0040A94B                 mov     [esp+14h], ebx
.text:0040A94F                 lea     eax, [esp+4B0h]
.text:0040A956                 mov     [esp+10h], ecx
.text:0040A95A                 mov     [esp+0Ch], edx
.text:0040A95E                 mov     dword ptr [esp+8], 400h
.text:0040A966                 mov     [esp+4], eax
.text:0040A96A                 mov     [esp], ebp
.text:0040A96D                 call    GetVolumeInformationA
.text:0040A972                 sub     esp, 20h
.text:0040A975                 test    eax, eax
.text:0040A977                 jz      loc_40AE0E
.text:0040A97D                 test    esi, esi
.text:0040A97F                 jz      short loc_40A9A5
.text:0040A981                 mov     [esp], ebp
.text:0040A984                 lea     edx, [esp+48h]
.text:0040A988                 lea     ebx, [esp+40h]
.text:0040A98C                 mov     [esp+0Ch], edx
.text:0040A990                 lea     ecx, [esp+38h]
.text:0040A994                 mov     [esp+8], ebx
.text:0040A998                 mov     [esp+4], ecx
.text:0040A99C                 call    esi
.text:0040A99E                 sub     esp, 10h
.text:0040A9A1                 mov     [esp+20h], eax
.text:0040A9A5
.text:0040A9A5 loc_40A9A5:                             ; CODE XREF: .text:0040A97F↑j
.text:0040A9A5                 test    edi, edi
.text:0040A9A7                 jz      short loc_40A9B4
.text:0040A9A9                 mov     [esp], edi
.text:0040A9AC                 call    FreeLibrary
.text:0040A9B1                 sub     esp, 4
.text:0040A9B4
.text:0040A9B4 loc_40A9B4:                             ; CODE XREF: .text:0040A9A7↑j
.text:0040A9B4                 call    sub_409F20
.text:0040A9B9                 test    eax, eax
.text:0040A9BB                 lea     esi, [esp+28h]
.text:0040A9BF                 jz      loc_40ADF0
.text:0040A9C5                 call    sub_409F20
.text:0040A9CA                 test    eax, eax
.text:0040A9CC                 jz      short loc_40A9DC
.text:0040A9CE                 call    sub_409E70
.text:0040A9D3                 cmp     eax, 0Bh
.text:0040A9D6                 jle     loc_40ADC4
.text:0040A9DC
.text:0040A9DC loc_40A9DC:                             ; CODE XREF: .text:0040A9CC↑j
.text:0040A9DC                 cld
.text:0040A9DD                 xor     eax, eax
.text:0040A9DF                 lea     ebx, [esp+60h]
.text:0040A9E3                 mov     ecx, 7
.text:0040A9E8                 mov     edi, ebx
.text:0040A9EA                 rep stosd
.text:0040A9EC                 mov     dword ptr [esp+18h], 0
.text:0040A9F4                 mov     dword ptr [esp+14h], 4000000h
.text:0040A9FC                 mov     dword ptr [esp+10h], 0
.text:0040AA04                 mov     dword ptr [esp+0Ch], 0
.text:0040AA0C                 mov     dword ptr [esp+8], 0
.text:0040AA14                 mov     dword ptr [esp+4], 0
.text:0040AA1C                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:0040AA23                 call    CreateFileA
.text:0040AA28                 sub     esp, 1Ch
.text:0040AA2B                 mov     edi, eax
.text:0040AA2D                 cmp     eax, 0FFFFFFFFh
.text:0040AA30                 jz      short loc_40AAB0
.text:0040AA32                 mov     [esp+10h], ebx
.text:0040AA36                 lea     edx, [esp+80h]
.text:0040AA3D                 lea     ecx, [esp+24h]
.text:0040AA41                 mov     [esp+70h], edx
.text:0040AA45                 mov     [esp+18h], ecx
.text:0040AA49                 mov     [esp+8], ebx
.text:0040AA4D                 mov     dword ptr [esp+6Ch], 7303h
.text:0040AA55                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0040AA5D                 mov     [esp+64h], ebp
.text:0040AA61                 mov     dword ptr [esp+78h], 1
.text:0040AA69                 mov     dword ptr [esp+1Ch], 0
.text:0040AA71                 mov     dword ptr [esp+14h], 1Ch
.text:0040AA79                 mov     dword ptr [esp+0Ch], 1Ch
.text:0040AA81                 mov     dword ptr [esp+4], 6
.text:0040AA89                 mov     [esp], eax
.text:0040AA8C                 call    DeviceIoControl
.text:0040AA91                 sub     esp, 20h
.text:0040AA94                 mov     ebx, eax
.text:0040AA96                 mov     [esp], edi
.text:0040AA99                 call    CloseHandle
.text:0040AA9E                 sub     esp, 4
.text:0040AAA1                 test    ebx, ebx
.text:0040AAA3                 jz      short loc_40AAB0
.text:0040AAA5                 test    byte ptr [esp+78h], 1
.text:0040AAAA                 jz      loc_40AD90
.text:0040AAB0
.text:0040AAB0 loc_40AAB0:                             ; CODE XREF: .text:0040AA30↑j
.text:0040AAB0                                         ; .text:0040AAA3↑j
.text:0040AAB0                 call    sub_407B60
.text:0040AAB5                 mov     edi, eax
.text:0040AAB7                 call    _errno
.text:0040AABC                 mov     [eax], edi
.text:0040AABE                 xor     eax, eax
.text:0040AAC0
.text:0040AAC0 loc_40AAC0:                             ; CODE XREF: .text:0040ADBF↓j
.text:0040AAC0                                         ; .text:0040ADEB↓j
.text:0040AAC0                 test    eax, eax
.text:0040AAC2                 jnz     short loc_40AAE4
.text:0040AAC4                 mov     dword ptr [esp+34h], 1
.text:0040AACC                 mov     dword ptr [esp+30h], 200h
.text:0040AAD4                 mov     dword ptr [esp+2Ch], 0
.text:0040AADC                 mov     dword ptr [esp+28h], 0
.text:0040AAE4
.text:0040AAE4 loc_40AAE4:                             ; CODE XREF: .text:0040AAC2↑j
.text:0040AAE4                 mov     edx, [esp+30h]
.text:0040AAE8                 mov     edi, [esp+34h]
.text:0040AAEC                 mov     ecx, [esp+20h]
.text:0040AAF0                 imul    edi, edx
.text:0040AAF3                 test    ecx, ecx
.text:0040AAF5                 jnz     short loc_40AB1D
.text:0040AAF7                 mov     eax, [esp+28h]
.text:0040AAFB                 mul     edi
.text:0040AAFD                 mov     esi, eax
.text:0040AAFF                 mov     eax, [esp+2Ch]
.text:0040AB03                 mov     [esp+44h], edx
.text:0040AB07                 mov     [esp+40h], esi
.text:0040AB0B                 mul     edi
.text:0040AB0D                 mov     [esp+48h], eax
.text:0040AB11                 mov     [esp+4Ch], edx
.text:0040AB15                 mov     [esp+38h], eax
.text:0040AB19                 mov     [esp+3Ch], edx
.text:0040AB1D
.text:0040AB1D loc_40AB1D:                             ; CODE XREF: .text:0040AAF5↑j
.text:0040AB1D                 mov     ebx, [esp+5Ch]
.text:0040AB21                 lea     edx, [esp+0B0h]
.text:0040AB28                 mov     ecx, [esp+8D4h]
.text:0040AB2F                 mov     [ecx+48h], ebx
.text:0040AB32                 mov     dword ptr [esp+4], offset loc_40A898
.text:0040AB3A                 mov     [esp], edx
.text:0040AB3D                 call    _stricmp
.text:0040AB42                 test    eax, eax
.text:0040AB44                 jnz     loc_40AD00
.text:0040AB4A                 mov     esi, [esp+8D4h]
.text:0040AB51                 mov     dword ptr [esi], 5346544Eh
.text:0040AB57
.text:0040AB57 loc_40AB57:                             ; CODE XREF: .text:0040AD28↓j
.text:0040AB57                                         ; .text:0040AD55↓j ...
.text:0040AB57                 mov     ebx, [esp+30h]
.text:0040AB5B                 mov     esi, [esp+8D4h]
.text:0040AB62                 mov     [esi+4], ebx
.text:0040AB65                 mov     [esi+8], ebx
.text:0040AB68                 mov     ebx, [esi+8]
.text:0040AB6B                 mov     [esi+0Ch], edi
.text:0040AB6E                 mov     ecx, [esp+44h]
.text:0040AB72                 xor     esi, esi
.text:0040AB74                 mov     [esp+8], ebx
.text:0040AB78                 mov     edx, [esp+40h]
.text:0040AB7C                 mov     [esp+0Ch], esi
.text:0040AB80                 mov     [esp+4], ecx
.text:0040AB84                 mov     [esp], edx
.text:0040AB87                 call    sub_40E110
.text:0040AB8C                 mov     ecx, [esp+8D4h]
.text:0040AB93                 mov     [ecx+10h], eax
.text:0040AB96                 mov     [ecx+14h], edx
.text:0040AB99                 mov     ecx, [esp+4Ch]
.text:0040AB9D                 mov     [esp+8], ebx
.text:0040ABA1                 mov     edx, [esp+48h]
.text:0040ABA5                 mov     [esp+0Ch], esi
.text:0040ABA9                 mov     [esp+4], ecx
.text:0040ABAD                 mov     [esp], edx
.text:0040ABB0                 call    sub_40E110
.text:0040ABB5                 mov     ecx, [esp+8D4h]
.text:0040ABBC                 mov     [ecx+18h], eax
.text:0040ABBF                 mov     [ecx+1Ch], edx
.text:0040ABC2                 mov     ecx, [esp+38h]
.text:0040ABC6                 mov     [esp+8], ebx
.text:0040ABCA                 mov     ebx, [esp+3Ch]
.text:0040ABCE                 mov     [esp+0Ch], esi
.text:0040ABD2                 mov     [esp], ecx
.text:0040ABD5                 mov     [esp+4], ebx
.text:0040ABD9                 call    sub_40E110
.text:0040ABDE                 mov     esi, [esp+8D4h]
.text:0040ABE5                 mov     [esi+20h], eax
.text:0040ABE8                 mov     [esi+24h], edx
.text:0040ABEB                 mov     ecx, [esp+44h]
.text:0040ABEF                 mov     esi, edi
.text:0040ABF1                 mov     [esp+8], esi
.text:0040ABF5                 mov     edx, [esp+40h]
.text:0040ABF9                 xor     edi, edi
.text:0040ABFB                 mov     [esp+0Ch], edi
.text:0040ABFF                 mov     [esp+4], ecx
.text:0040AC03                 mov     [esp], edx
.text:0040AC06                 call    sub_40E110
.text:0040AC0B                 mov     ebx, [esp+8D4h]
.text:0040AC12                 mov     [ebx+28h], eax
.text:0040AC15                 mov     [ebx+2Ch], edx
.text:0040AC18                 mov     ecx, [esp+4Ch]
.text:0040AC1C                 mov     [esp+8], esi
.text:0040AC20                 mov     edx, [esp+48h]
.text:0040AC24                 mov     [esp+0Ch], edi
.text:0040AC28                 mov     [esp+4], ecx
.text:0040AC2C                 mov     [esp], edx
.text:0040AC2F                 call    sub_40E110
.text:0040AC34                 mov     ebx, [esp+8D4h]
.text:0040AC3B                 mov     [ebx+30h], eax
.text:0040AC3E                 mov     [ebx+34h], edx
.text:0040AC41                 mov     ecx, [esp+3Ch]
.text:0040AC45                 mov     [esp+8], esi
.text:0040AC49                 mov     edx, [esp+38h]
.text:0040AC4D                 mov     [esp+0Ch], edi
.text:0040AC51                 mov     [esp+4], ecx
.text:0040AC55                 mov     [esp], edx
.text:0040AC58                 call    sub_40E110
.text:0040AC5D                 mov     edx, [esp+8D4h]
.text:0040AC64                 lea     ecx, [esp+0B0h]
.text:0040AC6B                 mov     [edx+38h], eax
.text:0040AC6E                 mov     esi, [esp+58h]
.text:0040AC72                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:0040AC79                 mov     [edx+110h], esi
.text:0040AC7F                 mov     esi, edx
.text:0040AC81                 add     esi, 4Ch ; 'L'
.text:0040AC84                 movzx   ebx, word ptr [esp+56h]
.text:0040AC89                 movzx   edi, word ptr [esp+54h]
.text:0040AC8E                 mov     [edx+3Ch], ebx
.text:0040AC91                 lea     ebx, [esp+4B0h]
.text:0040AC98                 mov     [edx+40h], edi
.text:0040AC9B                 mov     [esp+4], ecx
.text:0040AC9F                 mov     dword ptr [esp+8], 10h
.text:0040ACA7                 mov     [esp], esi
.text:0040ACAA                 call    strncpy
.text:0040ACAF                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040ACB7                 mov     edi, [esp+8D4h]
.text:0040ACBE                 mov     [esp+4], ebx
.text:0040ACC2                 add     edi, 5Ch ; '\'
.text:0040ACC5                 mov     [esp], edi
.text:0040ACC8                 call    strncpy
.text:0040ACCD                 mov     [esp+4], ebp
.text:0040ACD1                 mov     ebp, [esp+8D4h]
.text:0040ACD8                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040ACE0                 add     ebp, 0B6h ; '¶'
.text:0040ACE6                 mov     [esp], ebp
.text:0040ACE9                 call    strncpy
.text:0040ACEE                 xor     eax, eax
.text:0040ACF0
.text:0040ACF0 loc_40ACF0:                             ; CODE XREF: .text:0040AE2C↓j
.text:0040ACF0                 add     esp, 8BCh
.text:0040ACF6                 pop     ebx
.text:0040ACF7                 pop     esi
.text:0040ACF8                 pop     edi
.text:0040ACF9                 pop     ebp
.text:0040ACFA                 retn
.text:0040ACFA ; ---------------------------------------------------------------------------
.text:0040ACFB                 align 10h
.text:0040AD00
.text:0040AD00 loc_40AD00:                             ; CODE XREF: .text:0040AB44↑j
.text:0040AD00                 mov     dword ptr [esp+4], 40A89Dh
.text:0040AD08                 lea     eax, [esp+0B0h]
.text:0040AD0F                 mov     [esp], eax
.text:0040AD12                 call    _stricmp
.text:0040AD17                 test    eax, eax
.text:0040AD19                 jnz     short loc_40AD2D
.text:0040AD1B                 mov     edx, [esp+8D4h]
.text:0040AD22                 mov     dword ptr [edx], 4008h
.text:0040AD28                 jmp     loc_40AB57
.text:0040AD2D ; ---------------------------------------------------------------------------
.text:0040AD2D
.text:0040AD2D loc_40AD2D:                             ; CODE XREF: .text:0040AD19↑j
.text:0040AD2D                 mov     dword ptr [esp+4], 40A8A3h
.text:0040AD35                 lea     ecx, [esp+0B0h]
.text:0040AD3C                 mov     [esp], ecx
.text:0040AD3F                 call    _stricmp
.text:0040AD44                 test    eax, eax
.text:0040AD46                 jnz     short loc_40AD5A
.text:0040AD48                 mov     ebx, [esp+8D4h]
.text:0040AD4F                 mov     dword ptr [ebx], 4006h
.text:0040AD55                 jmp     loc_40AB57
.text:0040AD5A ; ---------------------------------------------------------------------------
.text:0040AD5A
.text:0040AD5A loc_40AD5A:                             ; CODE XREF: .text:0040AD46↑j
.text:0040AD5A                 mov     dword ptr [esp+4], 40A8A7h
.text:0040AD62                 lea     eax, [esp+0B0h]
.text:0040AD69                 mov     [esp], eax
.text:0040AD6C                 call    _stricmp
.text:0040AD71                 test    eax, eax
.text:0040AD73                 mov     esi, [esp+8D4h]
.text:0040AD7A                 setnz   cl
.text:0040AD7D                 movzx   edx, cl
.text:0040AD80                 dec     edx
.text:0040AD81                 and     edx, 4000h
.text:0040AD87                 mov     [esi], edx
.text:0040AD89                 jmp     loc_40AB57
.text:0040AD89 ; ---------------------------------------------------------------------------
.text:0040AD8E                 align 10h
.text:0040AD90
.text:0040AD90 loc_40AD90:                             ; CODE XREF: .text:0040AAAA↑j
.text:0040AD90                 mov     edi, [esp+84h]
.text:0040AD97                 mov     eax, 1
.text:0040AD9C                 mov     edx, [esp+88h]
.text:0040ADA3                 mov     ecx, [esp+8Ch]
.text:0040ADAA                 mov     ebx, [esp+90h]
.text:0040ADB1                 mov     [esp+34h], edi
.text:0040ADB5                 mov     [esp+30h], edx
.text:0040ADB9                 mov     [esp+2Ch], ecx
.text:0040ADBD                 mov     [esi], ebx
.text:0040ADBF                 jmp     loc_40AAC0
.text:0040ADC4 ; ---------------------------------------------------------------------------
.text:0040ADC4
.text:0040ADC4 loc_40ADC4:                             ; CODE XREF: .text:0040A9D6↑j
.text:0040ADC4                 mov     [esp+10h], esi
.text:0040ADC8                 lea     eax, [esp+2Ch]
.text:0040ADCC                 lea     esi, [esp+30h]
.text:0040ADD0                 mov     [esp+0Ch], eax
.text:0040ADD4                 lea     edi, [esp+34h]
.text:0040ADD8                 mov     [esp+8], esi
.text:0040ADDC                 mov     [esp+4], edi
.text:0040ADE0
.text:0040ADE0 loc_40ADE0:                             ; CODE XREF: .text:0040AE0C↓j
.text:0040ADE0                 mov     [esp], ebp
.text:0040ADE3                 call    GetDiskFreeSpaceA
.text:0040ADE8                 sub     esp, 14h
.text:0040ADEB                 jmp     loc_40AAC0
.text:0040ADF0 ; ---------------------------------------------------------------------------
.text:0040ADF0
.text:0040ADF0 loc_40ADF0:                             ; CODE XREF: .text:0040A9BF↑j
.text:0040ADF0                 mov     [esp+10h], esi
.text:0040ADF4                 lea     ebx, [esp+2Ch]
.text:0040ADF8                 lea     eax, [esp+30h]
.text:0040ADFC                 mov     [esp+0Ch], ebx
.text:0040AE00                 lea     esi, [esp+34h]
.text:0040AE04                 mov     [esp+8], eax
.text:0040AE08                 mov     [esp+4], esi
.text:0040AE0C                 jmp     short loc_40ADE0
.text:0040AE0E ; ---------------------------------------------------------------------------
.text:0040AE0E
.text:0040AE0E loc_40AE0E:                             ; CODE XREF: .text:0040A977↑j
.text:0040AE0E                 mov     [esp], edi
.text:0040AE11                 call    FreeLibrary
.text:0040AE16                 sub     esp, 4
.text:0040AE19                 call    sub_407B60
.text:0040AE1E                 mov     esi, eax
.text:0040AE20                 call    _errno
.text:0040AE25                 mov     [eax], esi
.text:0040AE27
.text:0040AE27 loc_40AE27:                             ; CODE XREF: .text:0040AE47↓j
.text:0040AE27                 mov     eax, 0FFFFFFFFh
.text:0040AE2C                 jmp     loc_40ACF0
.text:0040AE31 ; ---------------------------------------------------------------------------
.text:0040AE31
.text:0040AE31 loc_40AE31:                             ; CODE XREF: .text:0040A8F1↑j
.text:0040AE31                 mov     [esp], edi
.text:0040AE34                 call    FreeLibrary
.text:0040AE39                 sub     esp, 4
.text:0040AE3C                 call    _errno
.text:0040AE41                 mov     dword ptr [eax], 2
.text:0040AE47                 jmp     short loc_40AE27
.text:0040AE47 ; ---------------------------------------------------------------------------
.text:0040AE49                 align 10h
.text:0040AE50
.text:0040AE50 ; =============== S U B R O U T I N E =======================================
.text:0040AE50
.text:0040AE50
.text:0040AE50 ; int __cdecl sub_40AE50(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:0040AE50 sub_40AE50      proc near               ; CODE XREF: sub_408380+2C7↑p
.text:0040AE50                                         ; .text:004089BA↑p
.text:0040AE50
.text:0040AE50 lpFileName      = dword ptr -9Ch
.text:0040AE50 dwDesiredAccess = dword ptr -98h
.text:0040AE50 dwShareMode     = dword ptr -94h
.text:0040AE50 lpSecurityAttributes= dword ptr -90h
.text:0040AE50 dwCreationDisposition= dword ptr -8Ch
.text:0040AE50 dwFlagsAndAttributes= dword ptr -88h
.text:0040AE50 hTemplateFile   = dword ptr -84h
.text:0040AE50 lpOverlapped    = dword ptr -80h
.text:0040AE50 BytesReturned   = dword ptr -70h
.text:0040AE50 InBuffer        = byte ptr -6Ch
.text:0040AE50 var_68          = dword ptr -68h
.text:0040AE50 var_64          = dword ptr -64h
.text:0040AE50 var_60          = dword ptr -60h
.text:0040AE50 var_5C          = dword ptr -5Ch
.text:0040AE50 var_54          = dword ptr -54h
.text:0040AE50 var_4C          = byte ptr -4Ch
.text:0040AE50 var_48          = dword ptr -48h
.text:0040AE50 var_44          = dword ptr -44h
.text:0040AE50 var_40          = dword ptr -40h
.text:0040AE50 var_3C          = dword ptr -3Ch
.text:0040AE50 lpRootPathName  = dword ptr -2Ch
.text:0040AE50 lpSectorsPerCluster= dword ptr -28h
.text:0040AE50 lpBytesPerSector= dword ptr -24h
.text:0040AE50 lpNumberOfFreeClusters= dword ptr -20h
.text:0040AE50 lpTotalNumberOfClusters= dword ptr -1Ch
.text:0040AE50 var_18          = dword ptr -18h
.text:0040AE50 var_14          = dword ptr -14h
.text:0040AE50 var_10          = dword ptr -10h
.text:0040AE50 var_C           = dword ptr -0Ch
.text:0040AE50 var_8           = dword ptr -8
.text:0040AE50 var_4           = dword ptr -4
.text:0040AE50 arg_0           = dword ptr  4
.text:0040AE50 arg_4           = dword ptr  8
.text:0040AE50 arg_8           = dword ptr  0Ch
.text:0040AE50 arg_C           = dword ptr  10h
.text:0040AE50 arg_10          = dword ptr  14h
.text:0040AE50
.text:0040AE50                 sub     esp, 2Ch
.text:0040AE53                 mov     edx, [esp+2Ch+arg_0]
.text:0040AE57                 mov     [esp+2Ch+var_10], ebx
.text:0040AE5B                 mov     ebx, [esp+2Ch+arg_10]
.text:0040AE5F                 mov     [esp+2Ch+var_C], esi
.text:0040AE63                 mov     esi, [esp+2Ch+arg_C]
.text:0040AE67                 mov     [esp+2Ch+var_8], edi
.text:0040AE6B                 mov     edi, [esp+2Ch+arg_8]
.text:0040AE6F                 mov     [esp+2Ch+var_4], ebp
.text:0040AE73                 mov     ebp, [esp+2Ch+arg_4]
.text:0040AE77                 mov     [esp+2Ch+var_14], edx
.text:0040AE7B                 call    sub_409F20
.text:0040AE80                 test    eax, eax
.text:0040AE82                 jz      short loc_40AEB4
.text:0040AE84                 mov     [esp+2Ch+arg_10], ebx
.text:0040AE88                 mov     edx, [esp+2Ch+var_14]
.text:0040AE8C                 mov     ebx, [esp+2Ch+var_10]
.text:0040AE90                 mov     [esp+2Ch+arg_C], esi
.text:0040AE94                 mov     esi, [esp+2Ch+var_C]
.text:0040AE98                 mov     [esp+2Ch+arg_8], edi
.text:0040AE9C                 mov     edi, [esp+2Ch+var_8]
.text:0040AEA0                 mov     [esp+2Ch+arg_4], ebp
.text:0040AEA4                 mov     ebp, [esp+2Ch+var_4]
.text:0040AEA8                 mov     [esp+2Ch+arg_0], edx
.text:0040AEAC                 add     esp, 2Ch
.text:0040AEAF                 jmp     loc_40AF60
.text:0040AEB4 ; ---------------------------------------------------------------------------
.text:0040AEB4
.text:0040AEB4 loc_40AEB4:                             ; CODE XREF: sub_40AE50+32↑j
.text:0040AEB4                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:0040AEB8                 mov     ecx, [esp+2Ch+var_14]
.text:0040AEBC                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:0040AEC0                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:0040AEC4                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:0040AEC8                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040AECB                 call    GetDiskFreeSpaceA
.text:0040AED0                 sub     esp, 14h
.text:0040AED3                 mov     ebx, [esp+2Ch+var_10]
.text:0040AED7                 mov     esi, [esp+2Ch+var_C]
.text:0040AEDB                 mov     edi, [esp+2Ch+var_8]
.text:0040AEDF                 mov     ebp, [esp+2Ch+var_4]
.text:0040AEE3                 add     esp, 2Ch
.text:0040AEE6                 retn
.text:0040AEE6 ; ---------------------------------------------------------------------------
.text:0040AEE7                 align 10h
.text:0040AEF0
.text:0040AEF0 loc_40AEF0:                             ; CODE XREF: .text:0040B15D↓p
.text:0040AEF0                 sub     esp, 1Ch
.text:0040AEF3                 mov     [esp+1Ch+var_4], esi
.text:0040AEF7                 mov     esi, [esp+1Ch+arg_0]
.text:0040AEFB                 mov     [esp+1Ch+var_8], ebx
.text:0040AEFF                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:0040AF02                 call    sub_40A430
.text:0040AF07                 test    eax, eax
.text:0040AF09                 mov     ebx, eax
.text:0040AF0B                 jz      short loc_40AF20
.text:0040AF0D                 cmp     byte ptr [eax], 0
.text:0040AF10                 jz      short loc_40AF20
.text:0040AF12                 test    esi, esi
.text:0040AF14                 jz      short loc_40AF20
.text:0040AF16                 cmp     byte ptr [esi], 0
.text:0040AF19                 jnz     short loc_40AF46
.text:0040AF1B                 nop
.text:0040AF1C                 lea     esi, [esi+0]
.text:0040AF20
.text:0040AF20 loc_40AF20:                             ; CODE XREF: sub_40AE50+BB↑j
.text:0040AF20                                         ; sub_40AE50+C0↑j ...
.text:0040AF20                 call    _errno
.text:0040AF25                 mov     dword ptr [eax], 2
.text:0040AF2B                 mov     esi, 0FFFFFFFFh
.text:0040AF30
.text:0040AF30 loc_40AF30:                             ; CODE XREF: sub_40AE50+108↓j
.text:0040AF30                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:0040AF33                 call    free
.text:0040AF38                 mov     eax, esi
.text:0040AF3A                 mov     ebx, [esp+1Ch+var_8]
.text:0040AF3E                 mov     esi, [esp+1Ch+var_4]
.text:0040AF42                 add     esp, 1Ch
.text:0040AF45                 retn
.text:0040AF46 ; ---------------------------------------------------------------------------
.text:0040AF46
.text:0040AF46 loc_40AF46:                             ; CODE XREF: sub_40AE50+C9↑j
.text:0040AF46                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:0040AF49                 mov     edx, [esp+1Ch+arg_4]
.text:0040AF4D                 mov     [esp+1Ch+var_18], edx
.text:0040AF51                 call    near ptr loc_40A8AB+5
.text:0040AF56                 mov     esi, eax
.text:0040AF58                 jmp     short loc_40AF30
.text:0040AF58 ; ---------------------------------------------------------------------------
.text:0040AF5A                 align 10h
.text:0040AF60
.text:0040AF60 loc_40AF60:                             ; CODE XREF: sub_40AE50+5F↑j
.text:0040AF60                 push    ebp
.text:0040AF61                 push    edi
.text:0040AF62                 push    esi
.text:0040AF63                 push    ebx
.text:0040AF64                 sub     esp, 8Ch
.text:0040AF6A                 mov     ebp, [esp+9Ch+arg_0]
.text:0040AF71                 call    sub_409F20
.text:0040AF76                 test    eax, eax
.text:0040AF78                 jz      short loc_40AF88
.text:0040AF7A                 call    sub_409E70
.text:0040AF7F                 cmp     eax, 0Bh
.text:0040AF82                 jle     loc_40B0B0
.text:0040AF88
.text:0040AF88 loc_40AF88:                             ; CODE XREF: sub_40AE50+128↑j
.text:0040AF88                 cld
.text:0040AF89                 xor     eax, eax
.text:0040AF8B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040AF8F                 mov     ecx, 7
.text:0040AF94                 mov     edi, ebx
.text:0040AF96                 lea     esi, [esp+9Ch+var_4C]
.text:0040AF9A                 rep stosd
.text:0040AF9C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040AFA4                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040AFAC                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:0040AFB4                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040AFBC                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:0040AFC4                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040AFCC                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:0040AFD3                 call    CreateFileA
.text:0040AFD8                 sub     esp, 1Ch
.text:0040AFDB                 mov     edi, eax
.text:0040AFDD                 cmp     eax, 0FFFFFFFFh
.text:0040AFE0                 jz      short loc_40B055
.text:0040AFE2                 mov     [esp+9Ch+var_68], ebp
.text:0040AFE6                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040AFEA                 mov     [esp+9Ch+var_5C], esi
.text:0040AFEE                 mov     [esp+9Ch+var_60], 7303h
.text:0040AFF6                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040AFFE                 mov     [esp+9Ch+var_54], 1
.text:0040B006                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0040B00E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:0040B012                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0040B01A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0040B01E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:0040B026                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0040B02A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:0040B032                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:0040B035                 call    DeviceIoControl
.text:0040B03A                 sub     esp, 20h
.text:0040B03D                 mov     esi, eax
.text:0040B03F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:0040B042                 call    CloseHandle
.text:0040B047                 sub     esp, 4
.text:0040B04A                 test    esi, esi
.text:0040B04C                 jz      short loc_40B055
.text:0040B04E                 test    byte ptr [esp+9Ch+var_54], 1
.text:0040B053                 jz      short loc_40B070
.text:0040B055
.text:0040B055 loc_40B055:                             ; CODE XREF: sub_40AE50+190↑j
.text:0040B055                                         ; sub_40AE50+1FC↑j
.text:0040B055                 call    sub_407B60
.text:0040B05A                 mov     edi, eax
.text:0040B05C                 call    _errno
.text:0040B061                 mov     [eax], edi
.text:0040B063                 xor     eax, eax
.text:0040B065
.text:0040B065 loc_40B065:                             ; CODE XREF: sub_40AE50+25A↓j
.text:0040B065                                         ; sub_40AE50+297↓j
.text:0040B065                 add     esp, 8Ch
.text:0040B06B                 pop     ebx
.text:0040B06C                 pop     esi
.text:0040B06D                 pop     edi
.text:0040B06E                 pop     ebp
.text:0040B06F                 retn
.text:0040B070 ; ---------------------------------------------------------------------------
.text:0040B070
.text:0040B070 loc_40B070:                             ; CODE XREF: sub_40AE50+203↑j
.text:0040B070                 mov     edx, [esp+9Ch+var_48]
.text:0040B074                 mov     eax, 1
.text:0040B079                 mov     ebx, [esp+9Ch+arg_4]
.text:0040B080                 mov     ebp, [esp+9Ch+arg_8]
.text:0040B087                 mov     ecx, [esp+9Ch+arg_C]
.text:0040B08E                 mov     [ebx], edx
.text:0040B090                 mov     edi, [esp+9Ch+var_44]
.text:0040B094                 mov     ebx, [esp+9Ch+arg_10]
.text:0040B09B                 mov     [ebp+0], edi
.text:0040B09E                 mov     esi, [esp+9Ch+var_40]
.text:0040B0A2                 mov     [ecx], esi
.text:0040B0A4                 mov     edx, [esp+9Ch+var_3C]
.text:0040B0A8                 mov     [ebx], edx
.text:0040B0AA                 jmp     short loc_40B065
.text:0040B0AA ; ---------------------------------------------------------------------------
.text:0040B0AC                 align 10h
.text:0040B0B0
.text:0040B0B0 loc_40B0B0:                             ; CODE XREF: sub_40AE50+132↑j
.text:0040B0B0                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:0040B0B3                 mov     eax, [esp+9Ch+arg_C]
.text:0040B0BA                 mov     ecx, [esp+9Ch+arg_10]
.text:0040B0C1                 mov     edx, [esp+9Ch+arg_8]
.text:0040B0C8                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040B0CC                 mov     eax, [esp+9Ch+arg_4]
.text:0040B0D3                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:0040B0D7                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040B0DB                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040B0DF                 call    GetDiskFreeSpaceA
.text:0040B0E4                 sub     esp, 14h
.text:0040B0E7                 jmp     loc_40B065
.text:0040B0E7 sub_40AE50      endp ; sp-analysis failed
.text:0040B0E7
.text:0040B0E7 ; ---------------------------------------------------------------------------
.text:0040B0EC                 align 10h
.text:0040B0F0 aNotset         db 'notset',0           ; DATA XREF: .data:off_410080↓o
.text:0040B0F0                                         ; .data:off_410084↓o
.text:0040B0F7 ; ---------------------------------------------------------------------------
.text:0040B0F7
.text:0040B0F7 loc_40B0F7:                             ; DATA XREF: .text:loc_40B195↓o
.text:0040B0F7                 jb      short loc_40B170
.text:0040B0F9                 add     [eax], ah
.text:0040B0FB                 or      [eax], eax
.text:0040B0FD
.text:0040B0FD loc_40B0FD:                             ; DATA XREF: .text:0040B1E8↓o
.text:0040B0FD                                         ; .text:0040B24E↓o ...
.text:0040B0FD                 add     [eax], ah
.text:0040B0FF                 and     eax, 64252064h
.text:0040B104                 and     [eax], al
.text:0040B106                 lea     esi, [esi+0]
.text:0040B109                 lea     edi, [edi+0]
.text:0040B110                 push    ebp
.text:0040B111                 push    edi
.text:0040B112                 push    esi
.text:0040B113                 push    ebx
.text:0040B114                 sub     esp, 14Ch
.text:0040B11A                 mov     edx, off_410080 ; "notset"
.text:0040B120                 mov     edi, [esp+164h]
.text:0040B127                 mov     ebp, [esp+168h]
.text:0040B12E                 mov     [esp+4], edx
.text:0040B132                 mov     edx, off_410084 ; "notset"
.text:0040B138                 mov     [esp], edx
.text:0040B13B                 call    strcmp
.text:0040B140                 test    eax, eax
.text:0040B142                 jz      loc_40B530
.text:0040B148
.text:0040B148 loc_40B148:                             ; CODE XREF: .text:0040B57C↓j
.text:0040B148                 lea     ebx, [esp+20h]
.text:0040B14C                 lea     esi, [esi+0]
.text:0040B150
.text:0040B150 loc_40B150:                             ; CODE XREF: .text:0040B186↓j
.text:0040B150                 mov     [esp+4], ebx
.text:0040B154                 mov     ecx, off_410084 ; "notset"
.text:0040B15A                 mov     [esp], ecx
.text:0040B15D                 call    loc_40AEF0
.text:0040B162                 test    eax, eax
.text:0040B164                 jns     short loc_40B195
.text:0040B166                 mov     eax, off_410084 ; "notset"
.text:0040B16B                 cmp     byte ptr [eax], 0
.text:0040B16E                 jz      short loc_40B188
.text:0040B170
.text:0040B170 loc_40B170:                             ; CODE XREF: .text:loc_40B0F7↑j
.text:0040B170                 mov     dword ptr [esp+4], 0
.text:0040B178                 mov     [esp], eax
.text:0040B17B                 call    strchr
.text:0040B180                 inc     eax
.text:0040B181                 mov     off_410084, eax ; "notset"
.text:0040B186                 jmp     short loc_40B150
.text:0040B188 ; ---------------------------------------------------------------------------
.text:0040B188
.text:0040B188 loc_40B188:                             ; CODE XREF: .text:0040B16E↑j
.text:0040B188                 xor     eax, eax
.text:0040B18A
.text:0040B18A loc_40B18A:                             ; CODE XREF: .text:0040B34C↓j
.text:0040B18A                 add     esp, 14Ch
.text:0040B190                 pop     ebx
.text:0040B191                 pop     esi
.text:0040B192                 pop     edi
.text:0040B193                 pop     ebp
.text:0040B194                 retn
.text:0040B195 ; ---------------------------------------------------------------------------
.text:0040B195
.text:0040B195 loc_40B195:                             ; CODE XREF: .text:0040B164↑j
.text:0040B195                 mov     dword ptr [edi+0Ch], offset loc_40B0F7
.text:0040B19C                 lea     ecx, [esp+0D6h]
.text:0040B1A3                 lea     edx, [esp+6Ch]
.text:0040B1A7                 mov     [edi+4], ecx
.text:0040B1AA                 lea     ebx, [esp+7Ch]
.text:0040B1AE                 mov     [edi+8], edx
.text:0040B1B1                 mov     [edi], ebx
.text:0040B1B3                 mov     [esp], ebp
.text:0040B1B6                 mov     [esp+4], edi
.text:0040B1BA                 call    ___addmntentstr
.text:0040B1BF                 mov     [esp], ebp
.text:0040B1C2                 mov     dword ptr [esp+4], 40B0FAh
.text:0040B1CA                 call    strspn
.text:0040B1CF                 mov     dword ptr [esp+4], 0
.text:0040B1D7                 mov     ebx, off_410084 ; "notset"
.text:0040B1DD                 lea     esi, [eax+ebp]
.text:0040B1E0                 mov     [esp+1Ch], esi
.text:0040B1E4                 lea     ebp, [esp+1Ch]
.text:0040B1E8                 mov     esi, offset loc_40B0FD
.text:0040B1ED                 mov     [esp], ebx
.text:0040B1F0                 call    strchr
.text:0040B1F5                 mov     dword ptr [esp+4], 40B0FAh
.text:0040B1FD                 inc     eax
.text:0040B1FE                 mov     off_410084, eax ; "notset"
.text:0040B203                 mov     [esp], ebp
.text:0040B206                 call    sub_40BF50
.text:0040B20B                 test    eax, eax
.text:0040B20D                 mov     ebx, eax
.text:0040B20F                 jz      short loc_40B238
.text:0040B211                 mov     edx, eax
.text:0040B213                 mov     ecx, eax
.text:0040B215                 lea     esi, [esi+0]
.text:0040B219                 lea     edi, [edi+0]
.text:0040B220
.text:0040B220 loc_40B220:                             ; CODE XREF: .text:0040B236↓j
.text:0040B220                 movzx   eax, byte ptr [edx]
.text:0040B223                 cmp     al, 5Ch ; '\'
.text:0040B225                 jz      loc_40B4D4
.text:0040B22B
.text:0040B22B loc_40B22B:                             ; CODE XREF: .text:0040B4DC↓j
.text:0040B22B                                         ; .text:0040B4EA↓j ...
.text:0040B22B                 mov     [ecx], al
.text:0040B22D
.text:0040B22D loc_40B22D:                             ; CODE XREF: .text:0040B4FE↓j
.text:0040B22D                 inc     ecx
.text:0040B22E
.text:0040B22E loc_40B22E:                             ; CODE XREF: .text:0040B516↓j
.text:0040B22E                 movzx   eax, byte ptr [edx]
.text:0040B231                 mov     esi, ebx
.text:0040B233                 inc     edx
.text:0040B234                 test    al, al
.text:0040B236                 jnz     short loc_40B220
.text:0040B238
.text:0040B238 loc_40B238:                             ; CODE XREF: .text:0040B20F↑j
.text:0040B238                 mov     [edi], esi
.text:0040B23A                 mov     eax, [esp+1Ch]
.text:0040B23E                 test    eax, eax
.text:0040B240                 jnz     loc_40B4BB
.text:0040B246
.text:0040B246 loc_40B246:                             ; CODE XREF: .text:0040B4CF↓j
.text:0040B246                 mov     dword ptr [esp+4], 40B0FAh
.text:0040B24E                 mov     esi, offset loc_40B0FD
.text:0040B253                 mov     [esp], ebp
.text:0040B256                 call    sub_40BF50
.text:0040B25B                 test    eax, eax
.text:0040B25D                 mov     ebx, eax
.text:0040B25F                 jz      short loc_40B288
.text:0040B261                 mov     edx, eax
.text:0040B263                 mov     ecx, eax
.text:0040B265                 lea     esi, [esi+0]
.text:0040B269                 lea     edi, [edi+0]
.text:0040B270
.text:0040B270 loc_40B270:                             ; CODE XREF: .text:0040B286↓j
.text:0040B270                 movzx   eax, byte ptr [edx]
.text:0040B273                 cmp     al, 5Ch ; '\'
.text:0040B275                 jz      loc_40B463
.text:0040B27B
.text:0040B27B loc_40B27B:                             ; CODE XREF: .text:0040B46B↓j
.text:0040B27B                                         ; .text:0040B479↓j ...
.text:0040B27B                 mov     [ecx], al
.text:0040B27D
.text:0040B27D loc_40B27D:                             ; CODE XREF: .text:0040B48D↓j
.text:0040B27D                 inc     ecx
.text:0040B27E
.text:0040B27E loc_40B27E:                             ; CODE XREF: .text:0040B4A5↓j
.text:0040B27E                 movzx   eax, byte ptr [edx]
.text:0040B281                 mov     esi, ebx
.text:0040B283                 inc     edx
.text:0040B284                 test    al, al
.text:0040B286                 jnz     short loc_40B270
.text:0040B288
.text:0040B288 loc_40B288:                             ; CODE XREF: .text:0040B25F↑j
.text:0040B288                 mov     [edi+4], esi
.text:0040B28B                 mov     eax, [esp+1Ch]
.text:0040B28F                 test    eax, eax
.text:0040B291                 jnz     loc_40B44A
.text:0040B297
.text:0040B297 loc_40B297:                             ; CODE XREF: .text:0040B45E↓j
.text:0040B297                 mov     dword ptr [esp+4], 40B0FAh
.text:0040B29F                 mov     esi, offset loc_40B0FD
.text:0040B2A4                 mov     [esp], ebp
.text:0040B2A7                 call    sub_40BF50
.text:0040B2AC                 test    eax, eax
.text:0040B2AE                 mov     ebx, eax
.text:0040B2B0                 jz      short loc_40B2D8
.text:0040B2B2                 mov     edx, eax
.text:0040B2B4                 mov     ecx, eax
.text:0040B2B6                 lea     esi, [esi+0]
.text:0040B2B9                 lea     edi, [edi+0]
.text:0040B2C0
.text:0040B2C0 loc_40B2C0:                             ; CODE XREF: .text:0040B2D6↓j
.text:0040B2C0                 movzx   eax, byte ptr [edx]
.text:0040B2C3                 cmp     al, 5Ch ; '\'
.text:0040B2C5                 jz      loc_40B3F2
.text:0040B2CB
.text:0040B2CB loc_40B2CB:                             ; CODE XREF: .text:0040B3FA↓j
.text:0040B2CB                                         ; .text:0040B408↓j ...
.text:0040B2CB                 mov     [ecx], al
.text:0040B2CD
.text:0040B2CD loc_40B2CD:                             ; CODE XREF: .text:0040B41C↓j
.text:0040B2CD                 inc     ecx
.text:0040B2CE
.text:0040B2CE loc_40B2CE:                             ; CODE XREF: .text:0040B434↓j
.text:0040B2CE                 movzx   eax, byte ptr [edx]
.text:0040B2D1                 mov     esi, ebx
.text:0040B2D3                 inc     edx
.text:0040B2D4                 test    al, al
.text:0040B2D6                 jnz     short loc_40B2C0
.text:0040B2D8
.text:0040B2D8 loc_40B2D8:                             ; CODE XREF: .text:0040B2B0↑j
.text:0040B2D8                 mov     [edi+8], esi
.text:0040B2DB                 mov     eax, [esp+1Ch]
.text:0040B2DF                 test    eax, eax
.text:0040B2E1                 jnz     loc_40B3D9
.text:0040B2E7
.text:0040B2E7 loc_40B2E7:                             ; CODE XREF: .text:0040B3ED↓j
.text:0040B2E7                 mov     dword ptr [esp+4], 40B0FAh
.text:0040B2EF                 mov     esi, offset loc_40B0FD
.text:0040B2F4                 mov     [esp], ebp
.text:0040B2F7                 call    sub_40BF50
.text:0040B2FC                 test    eax, eax
.text:0040B2FE                 mov     ebx, eax
.text:0040B300                 jz      short loc_40B324
.text:0040B302                 mov     edx, eax
.text:0040B304                 mov     ecx, eax
.text:0040B306                 lea     esi, [esi+0]
.text:0040B309                 lea     edi, [edi+0]
.text:0040B310
.text:0040B310 loc_40B310:                             ; CODE XREF: .text:0040B322↓j
.text:0040B310                 movzx   eax, byte ptr [edx]
.text:0040B313                 cmp     al, 5Ch ; '\'
.text:0040B315                 jz      short loc_40B385
.text:0040B317
.text:0040B317 loc_40B317:                             ; CODE XREF: .text:0040B38D↓j
.text:0040B317                                         ; .text:0040B397↓j ...
.text:0040B317                 mov     [ecx], al
.text:0040B319
.text:0040B319 loc_40B319:                             ; CODE XREF: .text:0040B3AB↓j
.text:0040B319                 inc     ecx
.text:0040B31A
.text:0040B31A loc_40B31A:                             ; CODE XREF: .text:0040B3C3↓j
.text:0040B31A                 movzx   eax, byte ptr [edx]
.text:0040B31D                 mov     esi, ebx
.text:0040B31F                 inc     edx
.text:0040B320                 test    al, al
.text:0040B322                 jnz     short loc_40B310
.text:0040B324
.text:0040B324 loc_40B324:                             ; CODE XREF: .text:0040B300↑j
.text:0040B324                 mov     [edi+0Ch], esi
.text:0040B327                 xor     eax, eax
.text:0040B329                 mov     edx, [esp+1Ch]
.text:0040B32D                 test    edx, edx
.text:0040B32F                 jnz     short loc_40B365
.text:0040B331
.text:0040B331 loc_40B331:                             ; CODE XREF: .text:0040B383↓j
.text:0040B331                 cmp     eax, 1
.text:0040B334                 jz      short loc_40B35C
.text:0040B336                 cmp     eax, 1
.text:0040B339                 jle     short loc_40B351
.text:0040B33B
.text:0040B33B loc_40B33B:                             ; CODE XREF: .text:0040B353↓j
.text:0040B33B                                         ; .text:0040B363↓j
.text:0040B33B                 mov     edx, [esp+160h]
.text:0040B342                 mov     [esp], edx
.text:0040B345                 call    sub_40BEF0
.text:0040B34A                 mov     eax, edi
.text:0040B34C                 jmp     loc_40B18A
.text:0040B351 ; ---------------------------------------------------------------------------
.text:0040B351
.text:0040B351 loc_40B351:                             ; CODE XREF: .text:0040B339↑j
.text:0040B351                 test    eax, eax
.text:0040B353                 jnz     short loc_40B33B
.text:0040B355                 mov     dword ptr [edi+10h], 0
.text:0040B35C
.text:0040B35C loc_40B35C:                             ; CODE XREF: .text:0040B334↑j
.text:0040B35C                 mov     dword ptr [edi+14h], 0
.text:0040B363                 jmp     short loc_40B33B
.text:0040B365 ; ---------------------------------------------------------------------------
.text:0040B365
.text:0040B365 loc_40B365:                             ; CODE XREF: .text:0040B32F↑j
.text:0040B365                 mov     dword ptr [esp+4], 40B0FEh
.text:0040B36D                 lea     esi, [edi+14h]
.text:0040B370                 lea     ebp, [edi+10h]
.text:0040B373                 mov     [esp+0Ch], esi
.text:0040B377                 mov     [esp+8], ebp
.text:0040B37B                 mov     [esp], edx
.text:0040B37E                 call    sscanf
.text:0040B383                 jmp     short loc_40B331
.text:0040B385 ; ---------------------------------------------------------------------------
.text:0040B385
.text:0040B385 loc_40B385:                             ; CODE XREF: .text:0040B315↑j
.text:0040B385                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040B389                 jz      short loc_40B3C8
.text:0040B38B
.text:0040B38B loc_40B38B:                             ; CODE XREF: .text:0040B3CC↓j
.text:0040B38B                                         ; .text:0040B3D2↓j
.text:0040B38B                 cmp     al, 5Ch ; '\'
.text:0040B38D                 jnz     short loc_40B317
.text:0040B38F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040B393                 jz      short loc_40B3B0
.text:0040B395
.text:0040B395 loc_40B395:                             ; CODE XREF: .text:0040B3B4↓j
.text:0040B395                                         ; .text:0040B3BA↓j
.text:0040B395                 cmp     al, 5Ch ; '\'
.text:0040B397                 jnz     loc_40B317
.text:0040B39D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040B3A1                 jnz     loc_40B317
.text:0040B3A7                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040B3AA                 inc     edx
.text:0040B3AB                 jmp     loc_40B319
.text:0040B3B0 ; ---------------------------------------------------------------------------
.text:0040B3B0
.text:0040B3B0 loc_40B3B0:                             ; CODE XREF: .text:0040B393↑j
.text:0040B3B0                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040B3B4                 jnz     short loc_40B395
.text:0040B3B6                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040B3BA                 jnz     short loc_40B395
.text:0040B3BC                 mov     byte ptr [ecx], 9
.text:0040B3BF
.text:0040B3BF loc_40B3BF:                             ; CODE XREF: .text:0040B3D7↓j
.text:0040B3BF                 inc     ecx
.text:0040B3C0                 add     edx, 3
.text:0040B3C3                 jmp     loc_40B31A
.text:0040B3C8 ; ---------------------------------------------------------------------------
.text:0040B3C8
.text:0040B3C8 loc_40B3C8:                             ; CODE XREF: .text:0040B389↑j
.text:0040B3C8                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040B3CC                 jnz     short loc_40B38B
.text:0040B3CE                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040B3D2                 jnz     short loc_40B38B
.text:0040B3D4                 mov     byte ptr [ecx], 20h ; ' '
.text:0040B3D7                 jmp     short loc_40B3BF
.text:0040B3D9 ; ---------------------------------------------------------------------------
.text:0040B3D9
.text:0040B3D9 loc_40B3D9:                             ; CODE XREF: .text:0040B2E1↑j
.text:0040B3D9                 mov     dword ptr [esp+4], 40B0FAh
.text:0040B3E1                 mov     [esp], eax
.text:0040B3E4                 call    strspn
.text:0040B3E9                 add     [esp+1Ch], eax
.text:0040B3ED                 jmp     loc_40B2E7
.text:0040B3F2 ; ---------------------------------------------------------------------------
.text:0040B3F2
.text:0040B3F2 loc_40B3F2:                             ; CODE XREF: .text:0040B2C5↑j
.text:0040B3F2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040B3F6                 jz      short loc_40B439
.text:0040B3F8
.text:0040B3F8 loc_40B3F8:                             ; CODE XREF: .text:0040B43D↓j
.text:0040B3F8                                         ; .text:0040B443↓j
.text:0040B3F8                 cmp     al, 5Ch ; '\'
.text:0040B3FA                 jnz     loc_40B2CB
.text:0040B400                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040B404                 jz      short loc_40B421
.text:0040B406
.text:0040B406 loc_40B406:                             ; CODE XREF: .text:0040B425↓j
.text:0040B406                                         ; .text:0040B42B↓j
.text:0040B406                 cmp     al, 5Ch ; '\'
.text:0040B408                 jnz     loc_40B2CB
.text:0040B40E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040B412                 jnz     loc_40B2CB
.text:0040B418                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040B41B                 inc     edx
.text:0040B41C                 jmp     loc_40B2CD
.text:0040B421 ; ---------------------------------------------------------------------------
.text:0040B421
.text:0040B421 loc_40B421:                             ; CODE XREF: .text:0040B404↑j
.text:0040B421                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040B425                 jnz     short loc_40B406
.text:0040B427                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040B42B                 jnz     short loc_40B406
.text:0040B42D                 mov     byte ptr [ecx], 9
.text:0040B430
.text:0040B430 loc_40B430:                             ; CODE XREF: .text:0040B448↓j
.text:0040B430                 inc     ecx
.text:0040B431                 add     edx, 3
.text:0040B434                 jmp     loc_40B2CE
.text:0040B439 ; ---------------------------------------------------------------------------
.text:0040B439
.text:0040B439 loc_40B439:                             ; CODE XREF: .text:0040B3F6↑j
.text:0040B439                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040B43D                 jnz     short loc_40B3F8
.text:0040B43F                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040B443                 jnz     short loc_40B3F8
.text:0040B445                 mov     byte ptr [ecx], 20h ; ' '
.text:0040B448                 jmp     short loc_40B430
.text:0040B44A ; ---------------------------------------------------------------------------
.text:0040B44A
.text:0040B44A loc_40B44A:                             ; CODE XREF: .text:0040B291↑j
.text:0040B44A                 mov     dword ptr [esp+4], 40B0FAh
.text:0040B452                 mov     [esp], eax
.text:0040B455                 call    strspn
.text:0040B45A                 add     [esp+1Ch], eax
.text:0040B45E                 jmp     loc_40B297
.text:0040B463 ; ---------------------------------------------------------------------------
.text:0040B463
.text:0040B463 loc_40B463:                             ; CODE XREF: .text:0040B275↑j
.text:0040B463                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040B467                 jz      short loc_40B4AA
.text:0040B469
.text:0040B469 loc_40B469:                             ; CODE XREF: .text:0040B4AE↓j
.text:0040B469                                         ; .text:0040B4B4↓j
.text:0040B469                 cmp     al, 5Ch ; '\'
.text:0040B46B                 jnz     loc_40B27B
.text:0040B471                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040B475                 jz      short loc_40B492
.text:0040B477
.text:0040B477 loc_40B477:                             ; CODE XREF: .text:0040B496↓j
.text:0040B477                                         ; .text:0040B49C↓j
.text:0040B477                 cmp     al, 5Ch ; '\'
.text:0040B479                 jnz     loc_40B27B
.text:0040B47F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040B483                 jnz     loc_40B27B
.text:0040B489                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040B48C                 inc     edx
.text:0040B48D                 jmp     loc_40B27D
.text:0040B492 ; ---------------------------------------------------------------------------
.text:0040B492
.text:0040B492 loc_40B492:                             ; CODE XREF: .text:0040B475↑j
.text:0040B492                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040B496                 jnz     short loc_40B477
.text:0040B498                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040B49C                 jnz     short loc_40B477
.text:0040B49E                 mov     byte ptr [ecx], 9
.text:0040B4A1
.text:0040B4A1 loc_40B4A1:                             ; CODE XREF: .text:0040B4B9↓j
.text:0040B4A1                 inc     ecx
.text:0040B4A2                 add     edx, 3
.text:0040B4A5                 jmp     loc_40B27E
.text:0040B4AA ; ---------------------------------------------------------------------------
.text:0040B4AA
.text:0040B4AA loc_40B4AA:                             ; CODE XREF: .text:0040B467↑j
.text:0040B4AA                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040B4AE                 jnz     short loc_40B469
.text:0040B4B0                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040B4B4                 jnz     short loc_40B469
.text:0040B4B6                 mov     byte ptr [ecx], 20h ; ' '
.text:0040B4B9                 jmp     short loc_40B4A1
.text:0040B4BB ; ---------------------------------------------------------------------------
.text:0040B4BB
.text:0040B4BB loc_40B4BB:                             ; CODE XREF: .text:0040B240↑j
.text:0040B4BB                 mov     dword ptr [esp+4], 40B0FAh
.text:0040B4C3                 mov     [esp], eax
.text:0040B4C6                 call    strspn
.text:0040B4CB                 add     [esp+1Ch], eax
.text:0040B4CF                 jmp     loc_40B246
.text:0040B4D4 ; ---------------------------------------------------------------------------
.text:0040B4D4
.text:0040B4D4 loc_40B4D4:                             ; CODE XREF: .text:0040B225↑j
.text:0040B4D4                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040B4D8                 jz      short loc_40B51B
.text:0040B4DA
.text:0040B4DA loc_40B4DA:                             ; CODE XREF: .text:0040B51F↓j
.text:0040B4DA                                         ; .text:0040B525↓j
.text:0040B4DA                 cmp     al, 5Ch ; '\'
.text:0040B4DC                 jnz     loc_40B22B
.text:0040B4E2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040B4E6                 jz      short loc_40B503
.text:0040B4E8
.text:0040B4E8 loc_40B4E8:                             ; CODE XREF: .text:0040B507↓j
.text:0040B4E8                                         ; .text:0040B50D↓j
.text:0040B4E8                 cmp     al, 5Ch ; '\'
.text:0040B4EA                 jnz     loc_40B22B
.text:0040B4F0                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040B4F4                 jnz     loc_40B22B
.text:0040B4FA                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040B4FD                 inc     edx
.text:0040B4FE                 jmp     loc_40B22D
.text:0040B503 ; ---------------------------------------------------------------------------
.text:0040B503
.text:0040B503 loc_40B503:                             ; CODE XREF: .text:0040B4E6↑j
.text:0040B503                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040B507                 jnz     short loc_40B4E8
.text:0040B509                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040B50D                 jnz     short loc_40B4E8
.text:0040B50F                 mov     byte ptr [ecx], 9
.text:0040B512
.text:0040B512 loc_40B512:                             ; CODE XREF: .text:0040B52A↓j
.text:0040B512                 inc     ecx
.text:0040B513                 add     edx, 3
.text:0040B516                 jmp     loc_40B22E
.text:0040B51B ; ---------------------------------------------------------------------------
.text:0040B51B
.text:0040B51B loc_40B51B:                             ; CODE XREF: .text:0040B4D8↑j
.text:0040B51B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040B51F                 jnz     short loc_40B4DA
.text:0040B521                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040B525                 jnz     short loc_40B4DA
.text:0040B527                 mov     byte ptr [ecx], 20h ; ' '
.text:0040B52A                 jmp     short loc_40B512
.text:0040B52A ; ---------------------------------------------------------------------------
.text:0040B52C                 align 10h
.text:0040B530
.text:0040B530 loc_40B530:                             ; CODE XREF: .text:0040B142↑j
.text:0040B530                 mov     dword ptr [esp+4], 0
.text:0040B538                 mov     dword ptr [esp], 0
.text:0040B53F                 call    GetLogicalDriveStringsA
.text:0040B544                 sub     esp, 8
.text:0040B547                 mov     ebx, eax
.text:0040B549                 call    GetProcessHeap
.text:0040B54E                 mov     [esp], eax
.text:0040B551                 mov     [esp+8], ebx
.text:0040B555                 mov     dword ptr [esp+4], 0
.text:0040B55D                 call    HeapAlloc
.text:0040B562                 sub     esp, 0Ch
.text:0040B565                 mov     esi, eax
.text:0040B567                 mov     [esp+4], eax
.text:0040B56B                 mov     [esp], ebx
.text:0040B56E                 call    GetLogicalDriveStringsA
.text:0040B573                 mov     off_410084, esi ; "notset"
.text:0040B579                 sub     esp, 8
.text:0040B57C                 jmp     loc_40B148
.text:0040B57C ; ---------------------------------------------------------------------------
.text:0040B581 ; const char aSSSSDD[]
.text:0040B581 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040B581                                         ; DATA XREF: .text:0040B6C0↓o
.text:0040B581                                         ; ___addmntentstr+F0↓o
.text:0040B594                 align 10h
.text:0040B5A0                 push    esi
.text:0040B5A1                 push    ebx
.text:0040B5A2                 sub     esp, 44h
.text:0040B5A5                 mov     ebx, [esp+54h]
.text:0040B5A9                 mov     esi, [esp+50h]
.text:0040B5AD                 mov     edx, [ebx]
.text:0040B5AF                 mov     [esp+20h], edx
.text:0040B5B3                 mov     ecx, [ebx+4]
.text:0040B5B6                 mov     [esp+24h], ecx
.text:0040B5BA                 mov     edx, [ebx+8]
.text:0040B5BD                 mov     [esp+28h], edx
.text:0040B5C1                 mov     ecx, [ebx+0Ch]
.text:0040B5C4                 mov     [esp+2Ch], ecx
.text:0040B5C8                 mov     edx, [ebx+10h]
.text:0040B5CB                 mov     [esp+30h], edx
.text:0040B5CF                 mov     ecx, [ebx+14h]
.text:0040B5D2                 mov     dword ptr [esp+8], 2
.text:0040B5DA                 mov     dword ptr [esp+4], 0
.text:0040B5E2                 mov     [esp+34h], ecx
.text:0040B5E6                 mov     [esp], esi
.text:0040B5E9                 call    sub_40BEE0
.text:0040B5EE ; ---------------------------------------------------------------------------
.text:0040B5EE                 test    eax, eax
.text:0040B5F0                 mov     edx, 1
.text:0040B5F5                 jnz     loc_40B6F5
.text:0040B5FB                 mov     ebx, [esp+20h]
.text:0040B5FF                 mov     edx, ebx
.text:0040B601                 movzx   eax, byte ptr [ebx]
.text:0040B604                 test    al, al
.text:0040B606                 jz      short loc_40B630
.text:0040B608                 nop
.text:0040B609                 lea     esi, [esi+0]
.text:0040B610
.text:0040B610 loc_40B610:                             ; CODE XREF: .text:0040B62E↓j
.text:0040B610                 cmp     al, 20h ; ' '
.text:0040B612                 jz      loc_40B86A
.text:0040B618                 cmp     al, 9
.text:0040B61A                 jz      loc_40B86A
.text:0040B620                 cmp     al, 5Ch ; '\'
.text:0040B622                 jz      loc_40B86A
.text:0040B628                 inc     ebx
.text:0040B629                 movzx   eax, byte ptr [ebx]
.text:0040B62C                 test    al, al
.text:0040B62E                 jnz     short loc_40B610
.text:0040B630
.text:0040B630 loc_40B630:                             ; CODE XREF: .text:0040B606↑j
.text:0040B630                                         ; .text:0040B86C↓j ...
.text:0040B630                 mov     ebx, [esp+24h]
.text:0040B634                 mov     edx, ebx
.text:0040B636                 movzx   eax, byte ptr [ebx]
.text:0040B639                 test    al, al
.text:0040B63B                 jz      short loc_40B660
.text:0040B63D                 lea     esi, [esi+0]
.text:0040B640
.text:0040B640 loc_40B640:                             ; CODE XREF: .text:0040B65E↓j
.text:0040B640                 cmp     al, 20h ; ' '
.text:0040B642                 jz      loc_40B7EA
.text:0040B648                 cmp     al, 9
.text:0040B64A                 jz      loc_40B7EA
.text:0040B650                 cmp     al, 5Ch ; '\'
.text:0040B652                 jz      loc_40B7EA
.text:0040B658                 inc     ebx
.text:0040B659                 movzx   eax, byte ptr [ebx]
.text:0040B65C                 test    al, al
.text:0040B65E                 jnz     short loc_40B640
.text:0040B660
.text:0040B660 loc_40B660:                             ; CODE XREF: .text:0040B63B↑j
.text:0040B660                                         ; .text:0040B7EC↓j ...
.text:0040B660                 mov     ebx, [esp+28h]
.text:0040B664                 mov     edx, ebx
.text:0040B666                 movzx   eax, byte ptr [ebx]
.text:0040B669                 test    al, al
.text:0040B66B                 jz      short loc_40B690
.text:0040B66D                 lea     esi, [esi+0]
.text:0040B670
.text:0040B670 loc_40B670:                             ; CODE XREF: .text:0040B68E↓j
.text:0040B670                 cmp     al, 20h ; ' '
.text:0040B672                 jz      loc_40B76E
.text:0040B678                 cmp     al, 9
.text:0040B67A                 jz      loc_40B76E
.text:0040B680                 cmp     al, 5Ch ; '\'
.text:0040B682                 jz      loc_40B76E
.text:0040B688                 inc     ebx
.text:0040B689                 movzx   eax, byte ptr [ebx]
.text:0040B68C                 test    al, al
.text:0040B68E                 jnz     short loc_40B670
.text:0040B690
.text:0040B690 loc_40B690:                             ; CODE XREF: .text:0040B66B↑j
.text:0040B690                                         ; .text:0040B770↓j ...
.text:0040B690                 mov     edx, [esp+2Ch]
.text:0040B694                 mov     ebx, edx
.text:0040B696                 movzx   eax, byte ptr [edx]
.text:0040B699                 test    al, al
.text:0040B69B                 jz      short loc_40B6B4
.text:0040B69D                 lea     esi, [esi+0]
.text:0040B6A0
.text:0040B6A0 loc_40B6A0:                             ; CODE XREF: .text:0040B6B2↓j
.text:0040B6A0                 cmp     al, 20h ; ' '
.text:0040B6A2                 jz      short loc_40B6FD
.text:0040B6A4                 cmp     al, 9
.text:0040B6A6                 jz      short loc_40B6FD
.text:0040B6A8                 cmp     al, 5Ch ; '\'
.text:0040B6AA                 jz      short loc_40B6FD
.text:0040B6AC                 inc     ebx
.text:0040B6AD                 movzx   eax, byte ptr [ebx]
.text:0040B6B0                 test    al, al
.text:0040B6B2                 jnz     short loc_40B6A0
.text:0040B6B4
.text:0040B6B4 loc_40B6B4:                             ; CODE XREF: .text:0040B69B↑j
.text:0040B6B4                                         ; .text:0040B6FF↓j ...
.text:0040B6B4                 mov     [esp+14h], edx
.text:0040B6B8                 mov     ecx, [esp+34h]
.text:0040B6BC                 mov     ebx, [esp+30h]
.text:0040B6C0                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040B6C8                 mov     edx, [esp+24h]
.text:0040B6CC                 mov     [esp+1Ch], ecx
.text:0040B6D0                 mov     ecx, [esp+28h]
.text:0040B6D4                 mov     [esp+18h], ebx
.text:0040B6D8                 mov     ebx, [esp+20h]
.text:0040B6DC                 mov     [esp+0Ch], edx
.text:0040B6E0                 mov     [esp+10h], ecx
.text:0040B6E4                 mov     [esp+8], ebx
.text:0040B6E8                 mov     [esp], esi
.text:0040B6EB                 call    fprintf
.text:0040B6F0                 mov     edx, eax
.text:0040B6F2                 shr     edx, 1Fh
.text:0040B6F5
.text:0040B6F5 loc_40B6F5:                             ; CODE XREF: .text:0040B5F5↑j
.text:0040B6F5                 add     esp, 44h
.text:0040B6F8                 mov     eax, edx
.text:0040B6FA                 pop     ebx
.text:0040B6FB                 pop     esi
.text:0040B6FC                 retn
.text:0040B6FD ; ---------------------------------------------------------------------------
.text:0040B6FD
.text:0040B6FD loc_40B6FD:                             ; CODE XREF: .text:0040B6A2↑j
.text:0040B6FD                                         ; .text:0040B6A6↑j ...
.text:0040B6FD                 test    al, al
.text:0040B6FF                 jz      short loc_40B6B4
.text:0040B701                 mov     [esp], edx
.text:0040B704                 mov     ebx, edx
.text:0040B706                 call    strlen
.text:0040B70B                 lea     edx, ds:1[eax*4]
.text:0040B712                 mov     [esp], edx
.text:0040B715                 call    malloc
.text:0040B71A                 mov     [esp+2Ch], eax
.text:0040B71E                 mov     edx, eax
.text:0040B720
.text:0040B720 loc_40B720:                             ; CODE XREF: .text:0040B738↓j
.text:0040B720                 movzx   eax, byte ptr [ebx]
.text:0040B723                 cmp     al, 20h ; ' '
.text:0040B725                 jz      short loc_40B75D
.text:0040B727                 cmp     al, 9
.text:0040B729                 jz      short loc_40B74C
.text:0040B72B                 cmp     al, 5Ch ; '\'
.text:0040B72D                 jz      short loc_40B743
.text:0040B72F                 mov     [edx], al
.text:0040B731
.text:0040B731 loc_40B731:                             ; CODE XREF: .text:0040B74A↓j
.text:0040B731                                         ; .text:0040B75B↓j ...
.text:0040B731                 movzx   ecx, byte ptr [ebx]
.text:0040B734                 inc     edx
.text:0040B735                 inc     ebx
.text:0040B736                 test    cl, cl
.text:0040B738                 jnz     short loc_40B720
.text:0040B73A                 mov     edx, [esp+2Ch]
.text:0040B73E                 jmp     loc_40B6B4
.text:0040B743 ; ---------------------------------------------------------------------------
.text:0040B743
.text:0040B743 loc_40B743:                             ; CODE XREF: .text:0040B72D↑j
.text:0040B743                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B746                 inc     edx
.text:0040B747                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B74A                 jmp     short loc_40B731
.text:0040B74C ; ---------------------------------------------------------------------------
.text:0040B74C
.text:0040B74C loc_40B74C:                             ; CODE XREF: .text:0040B729↑j
.text:0040B74C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B74F                 inc     edx
.text:0040B750                 mov     byte ptr [edx], 30h ; '0'
.text:0040B753                 inc     edx
.text:0040B754                 mov     byte ptr [edx], 31h ; '1'
.text:0040B757                 inc     edx
.text:0040B758                 mov     byte ptr [edx], 32h ; '2'
.text:0040B75B                 jmp     short loc_40B731
.text:0040B75D ; ---------------------------------------------------------------------------
.text:0040B75D
.text:0040B75D loc_40B75D:                             ; CODE XREF: .text:0040B725↑j
.text:0040B75D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B760                 inc     edx
.text:0040B761                 mov     byte ptr [edx], 30h ; '0'
.text:0040B764                 inc     edx
.text:0040B765                 mov     byte ptr [edx], 34h ; '4'
.text:0040B768                 inc     edx
.text:0040B769                 mov     byte ptr [edx], 30h ; '0'
.text:0040B76C                 jmp     short loc_40B731
.text:0040B76E ; ---------------------------------------------------------------------------
.text:0040B76E
.text:0040B76E loc_40B76E:                             ; CODE XREF: .text:0040B672↑j
.text:0040B76E                                         ; .text:0040B67A↑j ...
.text:0040B76E                 test    al, al
.text:0040B770                 jz      loc_40B690
.text:0040B776                 mov     [esp], edx
.text:0040B779                 mov     ebx, edx
.text:0040B77B                 call    strlen
.text:0040B780                 lea     edx, ds:1[eax*4]
.text:0040B787                 mov     [esp], edx
.text:0040B78A                 call    malloc
.text:0040B78F                 mov     [esp+28h], eax
.text:0040B793                 mov     edx, eax
.text:0040B795                 lea     esi, [esi+0]
.text:0040B799                 lea     edi, [edi+0]
.text:0040B7A0
.text:0040B7A0 loc_40B7A0:                             ; CODE XREF: .text:0040B7B8↓j
.text:0040B7A0                 movzx   eax, byte ptr [ebx]
.text:0040B7A3                 cmp     al, 20h ; ' '
.text:0040B7A5                 jz      short loc_40B7D9
.text:0040B7A7                 cmp     al, 9
.text:0040B7A9                 jz      short loc_40B7C8
.text:0040B7AB                 cmp     al, 5Ch ; '\'
.text:0040B7AD                 jz      short loc_40B7BF
.text:0040B7AF                 mov     [edx], al
.text:0040B7B1
.text:0040B7B1 loc_40B7B1:                             ; CODE XREF: .text:0040B7C6↓j
.text:0040B7B1                                         ; .text:0040B7D7↓j ...
.text:0040B7B1                 movzx   ecx, byte ptr [ebx]
.text:0040B7B4                 inc     edx
.text:0040B7B5                 inc     ebx
.text:0040B7B6                 test    cl, cl
.text:0040B7B8                 jnz     short loc_40B7A0
.text:0040B7BA                 jmp     loc_40B690
.text:0040B7BF ; ---------------------------------------------------------------------------
.text:0040B7BF
.text:0040B7BF loc_40B7BF:                             ; CODE XREF: .text:0040B7AD↑j
.text:0040B7BF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B7C2                 inc     edx
.text:0040B7C3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B7C6                 jmp     short loc_40B7B1
.text:0040B7C8 ; ---------------------------------------------------------------------------
.text:0040B7C8
.text:0040B7C8 loc_40B7C8:                             ; CODE XREF: .text:0040B7A9↑j
.text:0040B7C8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B7CB                 inc     edx
.text:0040B7CC                 mov     byte ptr [edx], 30h ; '0'
.text:0040B7CF                 inc     edx
.text:0040B7D0                 mov     byte ptr [edx], 31h ; '1'
.text:0040B7D3                 inc     edx
.text:0040B7D4                 mov     byte ptr [edx], 32h ; '2'
.text:0040B7D7                 jmp     short loc_40B7B1
.text:0040B7D9 ; ---------------------------------------------------------------------------
.text:0040B7D9
.text:0040B7D9 loc_40B7D9:                             ; CODE XREF: .text:0040B7A5↑j
.text:0040B7D9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B7DC                 inc     edx
.text:0040B7DD                 mov     byte ptr [edx], 30h ; '0'
.text:0040B7E0                 inc     edx
.text:0040B7E1                 mov     byte ptr [edx], 34h ; '4'
.text:0040B7E4                 inc     edx
.text:0040B7E5                 mov     byte ptr [edx], 30h ; '0'
.text:0040B7E8                 jmp     short loc_40B7B1
.text:0040B7EA ; ---------------------------------------------------------------------------
.text:0040B7EA
.text:0040B7EA loc_40B7EA:                             ; CODE XREF: .text:0040B642↑j
.text:0040B7EA                                         ; .text:0040B64A↑j ...
.text:0040B7EA                 test    al, al
.text:0040B7EC                 jz      loc_40B660
.text:0040B7F2                 mov     [esp], edx
.text:0040B7F5                 mov     ebx, edx
.text:0040B7F7                 call    strlen
.text:0040B7FC                 lea     edx, ds:1[eax*4]
.text:0040B803                 mov     [esp], edx
.text:0040B806                 call    malloc
.text:0040B80B                 mov     [esp+24h], eax
.text:0040B80F                 mov     edx, eax
.text:0040B811                 jmp     short loc_40B820
.text:0040B811 ; ---------------------------------------------------------------------------
.text:0040B813                 align 10h
.text:0040B820
.text:0040B820 loc_40B820:                             ; CODE XREF: .text:0040B811↑j
.text:0040B820                                         ; .text:0040B838↓j
.text:0040B820                 movzx   eax, byte ptr [ebx]
.text:0040B823                 cmp     al, 20h ; ' '
.text:0040B825                 jz      short loc_40B859
.text:0040B827                 cmp     al, 9
.text:0040B829                 jz      short loc_40B848
.text:0040B82B                 cmp     al, 5Ch ; '\'
.text:0040B82D                 jz      short loc_40B83F
.text:0040B82F                 mov     [edx], al
.text:0040B831
.text:0040B831 loc_40B831:                             ; CODE XREF: .text:0040B846↓j
.text:0040B831                                         ; .text:0040B857↓j ...
.text:0040B831                 movzx   ecx, byte ptr [ebx]
.text:0040B834                 inc     edx
.text:0040B835                 inc     ebx
.text:0040B836                 test    cl, cl
.text:0040B838                 jnz     short loc_40B820
.text:0040B83A                 jmp     loc_40B660
.text:0040B83F ; ---------------------------------------------------------------------------
.text:0040B83F
.text:0040B83F loc_40B83F:                             ; CODE XREF: .text:0040B82D↑j
.text:0040B83F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B842                 inc     edx
.text:0040B843                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B846                 jmp     short loc_40B831
.text:0040B848 ; ---------------------------------------------------------------------------
.text:0040B848
.text:0040B848 loc_40B848:                             ; CODE XREF: .text:0040B829↑j
.text:0040B848                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B84B                 inc     edx
.text:0040B84C                 mov     byte ptr [edx], 30h ; '0'
.text:0040B84F                 inc     edx
.text:0040B850                 mov     byte ptr [edx], 31h ; '1'
.text:0040B853                 inc     edx
.text:0040B854                 mov     byte ptr [edx], 32h ; '2'
.text:0040B857                 jmp     short loc_40B831
.text:0040B859 ; ---------------------------------------------------------------------------
.text:0040B859
.text:0040B859 loc_40B859:                             ; CODE XREF: .text:0040B825↑j
.text:0040B859                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B85C                 inc     edx
.text:0040B85D                 mov     byte ptr [edx], 30h ; '0'
.text:0040B860                 inc     edx
.text:0040B861                 mov     byte ptr [edx], 34h ; '4'
.text:0040B864                 inc     edx
.text:0040B865                 mov     byte ptr [edx], 30h ; '0'
.text:0040B868                 jmp     short loc_40B831
.text:0040B86A ; ---------------------------------------------------------------------------
.text:0040B86A
.text:0040B86A loc_40B86A:                             ; CODE XREF: .text:0040B612↑j
.text:0040B86A                                         ; .text:0040B61A↑j ...
.text:0040B86A                 test    al, al
.text:0040B86C                 jz      loc_40B630
.text:0040B872                 mov     [esp], edx
.text:0040B875                 mov     ebx, edx
.text:0040B877                 call    strlen
.text:0040B87C                 lea     ecx, ds:1[eax*4]
.text:0040B883                 mov     [esp], ecx
.text:0040B886                 call    malloc
.text:0040B88B                 mov     [esp+20h], eax
.text:0040B88F                 mov     edx, eax
.text:0040B891                 jmp     short loc_40B8A0
.text:0040B891 ; ---------------------------------------------------------------------------
.text:0040B893                 align 10h
.text:0040B8A0
.text:0040B8A0 loc_40B8A0:                             ; CODE XREF: .text:0040B891↑j
.text:0040B8A0                                         ; .text:0040B8B8↓j
.text:0040B8A0                 movzx   eax, byte ptr [ebx]
.text:0040B8A3                 cmp     al, 20h ; ' '
.text:0040B8A5                 jz      short loc_40B8D9
.text:0040B8A7                 cmp     al, 9
.text:0040B8A9                 jz      short loc_40B8C8
.text:0040B8AB                 cmp     al, 5Ch ; '\'
.text:0040B8AD                 jz      short loc_40B8BF
.text:0040B8AF                 mov     [edx], al
.text:0040B8B1
.text:0040B8B1 loc_40B8B1:                             ; CODE XREF: .text:0040B8C6↓j
.text:0040B8B1                                         ; .text:0040B8D7↓j ...
.text:0040B8B1                 movzx   ecx, byte ptr [ebx]
.text:0040B8B4                 inc     edx
.text:0040B8B5                 inc     ebx
.text:0040B8B6                 test    cl, cl
.text:0040B8B8                 jnz     short loc_40B8A0
.text:0040B8BA                 jmp     loc_40B630
.text:0040B8BF ; ---------------------------------------------------------------------------
.text:0040B8BF
.text:0040B8BF loc_40B8BF:                             ; CODE XREF: .text:0040B8AD↑j
.text:0040B8BF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B8C2                 inc     edx
.text:0040B8C3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B8C6                 jmp     short loc_40B8B1
.text:0040B8C8 ; ---------------------------------------------------------------------------
.text:0040B8C8
.text:0040B8C8 loc_40B8C8:                             ; CODE XREF: .text:0040B8A9↑j
.text:0040B8C8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B8CB                 inc     edx
.text:0040B8CC                 mov     byte ptr [edx], 30h ; '0'
.text:0040B8CF                 inc     edx
.text:0040B8D0                 mov     byte ptr [edx], 31h ; '1'
.text:0040B8D3                 inc     edx
.text:0040B8D4                 mov     byte ptr [edx], 32h ; '2'
.text:0040B8D7                 jmp     short loc_40B8B1
.text:0040B8D9 ; ---------------------------------------------------------------------------
.text:0040B8D9
.text:0040B8D9 loc_40B8D9:                             ; CODE XREF: .text:0040B8A5↑j
.text:0040B8D9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B8DC                 inc     edx
.text:0040B8DD                 mov     byte ptr [edx], 30h ; '0'
.text:0040B8E0                 inc     edx
.text:0040B8E1                 mov     byte ptr [edx], 34h ; '4'
.text:0040B8E4                 inc     edx
.text:0040B8E5                 mov     byte ptr [edx], 30h ; '0'
.text:0040B8E8                 jmp     short loc_40B8B1
.text:0040B8E8 ; ---------------------------------------------------------------------------
.text:0040B8EA                 align 10h
.text:0040B8F0
.text:0040B8F0 ; =============== S U B R O U T I N E =======================================
.text:0040B8F0
.text:0040B8F0 ; Attributes: info_from_lumina
.text:0040B8F0
.text:0040B8F0 ; int __cdecl __addmntentstr(char *, int)
.text:0040B8F0 ___addmntentstr proc near               ; CODE XREF: .text:0040B1BA↑p
.text:0040B8F0
.text:0040B8F0 Buffer          = dword ptr -4Ch
.text:0040B8F0 Format          = dword ptr -48h
.text:0040B8F0 var_44          = dword ptr -44h
.text:0040B8F0 var_40          = dword ptr -40h
.text:0040B8F0 var_3C          = dword ptr -3Ch
.text:0040B8F0 var_38          = dword ptr -38h
.text:0040B8F0 var_34          = dword ptr -34h
.text:0040B8F0 var_30          = dword ptr -30h
.text:0040B8F0 var_2C          = dword ptr -2Ch
.text:0040B8F0 var_28          = dword ptr -28h
.text:0040B8F0 var_24          = dword ptr -24h
.text:0040B8F0 Str             = dword ptr -20h
.text:0040B8F0 var_1C          = dword ptr -1Ch
.text:0040B8F0 var_18          = dword ptr -18h
.text:0040B8F0 arg_0           = dword ptr  4
.text:0040B8F0 arg_4           = dword ptr  8
.text:0040B8F0
.text:0040B8F0                 push    ebx
.text:0040B8F1                 sub     esp, 48h
.text:0040B8F4                 mov     edx, [esp+4Ch+arg_4]
.text:0040B8F8                 mov     ecx, [edx]
.text:0040B8FA                 mov     [esp+4Ch+var_2C], ecx
.text:0040B8FE                 mov     ebx, [edx+4]
.text:0040B901                 mov     [esp+4Ch+var_28], ebx
.text:0040B905                 mov     ebx, [edx+8]
.text:0040B908                 mov     [esp+4Ch+var_24], ebx
.text:0040B90C                 mov     ebx, [edx+0Ch]
.text:0040B90F                 mov     [esp+4Ch+Str], ebx
.text:0040B913                 mov     ebx, [edx+10h]
.text:0040B916                 mov     [esp+4Ch+var_1C], ebx
.text:0040B91A                 mov     ebx, [edx+14h]
.text:0040B91D                 mov     [esp+4Ch+var_18], ebx
.text:0040B921                 mov     ebx, ecx
.text:0040B923                 movzx   eax, byte ptr [ecx]
.text:0040B926                 test    al, al
.text:0040B928                 jz      loc_40BC11
.text:0040B92E                 mov     esi, esi
.text:0040B930
.text:0040B930 loc_40B930:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040B930                 cmp     al, 20h ; ' '
.text:0040B932                 jz      loc_40BB90
.text:0040B938                 cmp     al, 9
.text:0040B93A                 jz      loc_40BB90
.text:0040B940                 cmp     al, 5Ch ; '\'
.text:0040B942                 jz      loc_40BB90
.text:0040B948                 inc     ebx
.text:0040B949                 movzx   eax, byte ptr [ebx]
.text:0040B94C                 test    al, al
.text:0040B94E                 jnz     short loc_40B930
.text:0040B950
.text:0040B950 loc_40B950:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040B950                                         ; ___addmntentstr+2EA↓j
.text:0040B950                 mov     ebx, [esp+4Ch+var_28]
.text:0040B954                 mov     edx, ebx
.text:0040B956                 movzx   eax, byte ptr [ebx]
.text:0040B959                 test    al, al
.text:0040B95B                 jz      short loc_40B980
.text:0040B95D                 lea     esi, [esi+0]
.text:0040B960
.text:0040B960 loc_40B960:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040B960                 cmp     al, 20h ; ' '
.text:0040B962                 jz      loc_40BB0A
.text:0040B968                 cmp     al, 9
.text:0040B96A                 jz      loc_40BB0A
.text:0040B970                 cmp     al, 5Ch ; '\'
.text:0040B972                 jz      loc_40BB0A
.text:0040B978                 inc     ebx
.text:0040B979                 movzx   eax, byte ptr [ebx]
.text:0040B97C                 test    al, al
.text:0040B97E                 jnz     short loc_40B960
.text:0040B980
.text:0040B980 loc_40B980:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040B980                                         ; ___addmntentstr+21C↓j ...
.text:0040B980                 mov     ebx, [esp+4Ch+var_24]
.text:0040B984                 mov     edx, ebx
.text:0040B986                 movzx   eax, byte ptr [ebx]
.text:0040B989                 test    al, al
.text:0040B98B                 jz      short loc_40B9B0
.text:0040B98D                 lea     esi, [esi+0]
.text:0040B990
.text:0040B990 loc_40B990:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040B990                 cmp     al, 20h ; ' '
.text:0040B992                 jz      loc_40BA8E
.text:0040B998                 cmp     al, 9
.text:0040B99A                 jz      loc_40BA8E
.text:0040B9A0                 cmp     al, 5Ch ; '\'
.text:0040B9A2                 jz      loc_40BA8E
.text:0040B9A8                 inc     ebx
.text:0040B9A9                 movzx   eax, byte ptr [ebx]
.text:0040B9AC                 test    al, al
.text:0040B9AE                 jnz     short loc_40B990
.text:0040B9B0
.text:0040B9B0 loc_40B9B0:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040B9B0                                         ; ___addmntentstr+1A0↓j ...
.text:0040B9B0                 mov     edx, [esp+4Ch+Str]
.text:0040B9B4                 mov     ebx, edx
.text:0040B9B6                 movzx   eax, byte ptr [edx]
.text:0040B9B9                 test    al, al
.text:0040B9BB                 jz      short loc_40B9D4
.text:0040B9BD                 lea     esi, [esi+0]
.text:0040B9C0
.text:0040B9C0 loc_40B9C0:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040B9C0                 cmp     al, 20h ; ' '
.text:0040B9C2                 jz      short loc_40BA1C
.text:0040B9C4                 cmp     al, 9
.text:0040B9C6                 jz      short loc_40BA1C
.text:0040B9C8                 cmp     al, 5Ch ; '\'
.text:0040B9CA                 jz      short loc_40BA1C
.text:0040B9CC                 inc     ebx
.text:0040B9CD                 movzx   eax, byte ptr [ebx]
.text:0040B9D0                 test    al, al
.text:0040B9D2                 jnz     short loc_40B9C0
.text:0040B9D4
.text:0040B9D4 loc_40B9D4:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040B9D4                                         ; ___addmntentstr+12E↓j ...
.text:0040B9D4                 mov     [esp+4Ch+var_38], edx
.text:0040B9D8                 mov     ebx, [esp+4Ch+var_18]
.text:0040B9DC                 mov     ecx, [esp+4Ch+var_1C]
.text:0040B9E0                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040B9E8                 mov     edx, [esp+4Ch+var_2C]
.text:0040B9EC                 mov     [esp+4Ch+var_30], ebx
.text:0040B9F0                 mov     ebx, [esp+4Ch+var_24]
.text:0040B9F4                 mov     [esp+4Ch+var_34], ecx
.text:0040B9F8                 mov     ecx, [esp+4Ch+var_28]
.text:0040B9FC                 mov     [esp+4Ch+var_3C], ebx
.text:0040BA00                 mov     ebx, [esp+4Ch+arg_0]
.text:0040BA04                 mov     [esp+4Ch+var_40], ecx
.text:0040BA08                 mov     [esp+4Ch+var_44], edx
.text:0040BA0C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040BA0F                 call    sprintf
.text:0040BA14                 add     esp, 48h
.text:0040BA17                 shr     eax, 1Fh
.text:0040BA1A                 pop     ebx
.text:0040BA1B                 retn
.text:0040BA1C ; ---------------------------------------------------------------------------
.text:0040BA1C
.text:0040BA1C loc_40BA1C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040BA1C                                         ; ___addmntentstr+D6↑j ...
.text:0040BA1C                 test    al, al
.text:0040BA1E                 jz      short loc_40B9D4
.text:0040BA20                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040BA23                 mov     ebx, edx
.text:0040BA25                 call    strlen
.text:0040BA2A                 lea     edx, ds:1[eax*4]
.text:0040BA31                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040BA34                 call    malloc
.text:0040BA39                 mov     [esp+4Ch+Str], eax
.text:0040BA3D                 mov     edx, eax
.text:0040BA3F                 nop
.text:0040BA40
.text:0040BA40 loc_40BA40:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040BA40                 movzx   eax, byte ptr [ebx]
.text:0040BA43                 cmp     al, 20h ; ' '
.text:0040BA45                 jz      short loc_40BA7D
.text:0040BA47                 cmp     al, 9
.text:0040BA49                 jz      short loc_40BA6C
.text:0040BA4B                 cmp     al, 5Ch ; '\'
.text:0040BA4D                 jz      short loc_40BA63
.text:0040BA4F                 mov     [edx], al
.text:0040BA51
.text:0040BA51 loc_40BA51:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040BA51                                         ; ___addmntentstr+18B↓j ...
.text:0040BA51                 movzx   ecx, byte ptr [ebx]
.text:0040BA54                 inc     edx
.text:0040BA55                 inc     ebx
.text:0040BA56                 test    cl, cl
.text:0040BA58                 jnz     short loc_40BA40
.text:0040BA5A                 mov     edx, [esp+4Ch+Str]
.text:0040BA5E                 jmp     loc_40B9D4
.text:0040BA63 ; ---------------------------------------------------------------------------
.text:0040BA63
.text:0040BA63 loc_40BA63:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040BA63                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BA66                 inc     edx
.text:0040BA67                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BA6A                 jmp     short loc_40BA51
.text:0040BA6C ; ---------------------------------------------------------------------------
.text:0040BA6C
.text:0040BA6C loc_40BA6C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040BA6C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BA6F                 inc     edx
.text:0040BA70                 mov     byte ptr [edx], 30h ; '0'
.text:0040BA73                 inc     edx
.text:0040BA74                 mov     byte ptr [edx], 31h ; '1'
.text:0040BA77                 inc     edx
.text:0040BA78                 mov     byte ptr [edx], 32h ; '2'
.text:0040BA7B                 jmp     short loc_40BA51
.text:0040BA7D ; ---------------------------------------------------------------------------
.text:0040BA7D
.text:0040BA7D loc_40BA7D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040BA7D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BA80                 inc     edx
.text:0040BA81                 mov     byte ptr [edx], 30h ; '0'
.text:0040BA84                 inc     edx
.text:0040BA85                 mov     byte ptr [edx], 34h ; '4'
.text:0040BA88                 inc     edx
.text:0040BA89                 mov     byte ptr [edx], 30h ; '0'
.text:0040BA8C                 jmp     short loc_40BA51
.text:0040BA8E ; ---------------------------------------------------------------------------
.text:0040BA8E
.text:0040BA8E loc_40BA8E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040BA8E                                         ; ___addmntentstr+AA↑j ...
.text:0040BA8E                 test    al, al
.text:0040BA90                 jz      loc_40B9B0
.text:0040BA96                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040BA99                 mov     ebx, edx
.text:0040BA9B                 call    strlen
.text:0040BAA0                 lea     edx, ds:1[eax*4]
.text:0040BAA7                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040BAAA                 call    malloc
.text:0040BAAF                 mov     [esp+4Ch+var_24], eax
.text:0040BAB3                 mov     edx, eax
.text:0040BAB5                 lea     esi, [esi+0]
.text:0040BAB9                 lea     edi, [edi+0]
.text:0040BAC0
.text:0040BAC0 loc_40BAC0:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040BAC0                 movzx   eax, byte ptr [ebx]
.text:0040BAC3                 cmp     al, 20h ; ' '
.text:0040BAC5                 jz      short loc_40BAF9
.text:0040BAC7                 cmp     al, 9
.text:0040BAC9                 jz      short loc_40BAE8
.text:0040BACB                 cmp     al, 5Ch ; '\'
.text:0040BACD                 jz      short loc_40BADF
.text:0040BACF                 mov     [edx], al
.text:0040BAD1
.text:0040BAD1 loc_40BAD1:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040BAD1                                         ; ___addmntentstr+207↓j ...
.text:0040BAD1                 movzx   ecx, byte ptr [ebx]
.text:0040BAD4                 inc     edx
.text:0040BAD5                 inc     ebx
.text:0040BAD6                 test    cl, cl
.text:0040BAD8                 jnz     short loc_40BAC0
.text:0040BADA                 jmp     loc_40B9B0
.text:0040BADF ; ---------------------------------------------------------------------------
.text:0040BADF
.text:0040BADF loc_40BADF:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040BADF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BAE2                 inc     edx
.text:0040BAE3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BAE6                 jmp     short loc_40BAD1
.text:0040BAE8 ; ---------------------------------------------------------------------------
.text:0040BAE8
.text:0040BAE8 loc_40BAE8:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040BAE8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BAEB                 inc     edx
.text:0040BAEC                 mov     byte ptr [edx], 30h ; '0'
.text:0040BAEF                 inc     edx
.text:0040BAF0                 mov     byte ptr [edx], 31h ; '1'
.text:0040BAF3                 inc     edx
.text:0040BAF4                 mov     byte ptr [edx], 32h ; '2'
.text:0040BAF7                 jmp     short loc_40BAD1
.text:0040BAF9 ; ---------------------------------------------------------------------------
.text:0040BAF9
.text:0040BAF9 loc_40BAF9:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040BAF9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BAFC                 inc     edx
.text:0040BAFD                 mov     byte ptr [edx], 30h ; '0'
.text:0040BB00                 inc     edx
.text:0040BB01                 mov     byte ptr [edx], 34h ; '4'
.text:0040BB04                 inc     edx
.text:0040BB05                 mov     byte ptr [edx], 30h ; '0'
.text:0040BB08                 jmp     short loc_40BAD1
.text:0040BB0A ; ---------------------------------------------------------------------------
.text:0040BB0A
.text:0040BB0A loc_40BB0A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040BB0A                                         ; ___addmntentstr+7A↑j ...
.text:0040BB0A                 test    al, al
.text:0040BB0C                 jz      loc_40B980
.text:0040BB12                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040BB15                 mov     ebx, edx
.text:0040BB17                 call    strlen
.text:0040BB1C                 lea     edx, ds:1[eax*4]
.text:0040BB23                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040BB26                 call    malloc
.text:0040BB2B                 mov     [esp+4Ch+var_28], eax
.text:0040BB2F                 mov     edx, eax
.text:0040BB31                 jmp     short loc_40BB40
.text:0040BB31 ; ---------------------------------------------------------------------------
.text:0040BB33                 align 10h
.text:0040BB40
.text:0040BB40 loc_40BB40:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040BB40                                         ; ___addmntentstr+268↓j
.text:0040BB40                 movzx   eax, byte ptr [ebx]
.text:0040BB43                 cmp     al, 20h ; ' '
.text:0040BB45                 jz      short loc_40BB79
.text:0040BB47                 cmp     al, 9
.text:0040BB49                 jz      short loc_40BB68
.text:0040BB4B                 cmp     al, 5Ch ; '\'
.text:0040BB4D                 jz      short loc_40BB5F
.text:0040BB4F                 mov     [edx], al
.text:0040BB51
.text:0040BB51 loc_40BB51:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040BB51                                         ; ___addmntentstr+287↓j ...
.text:0040BB51                 movzx   ecx, byte ptr [ebx]
.text:0040BB54                 inc     edx
.text:0040BB55                 inc     ebx
.text:0040BB56                 test    cl, cl
.text:0040BB58                 jnz     short loc_40BB40
.text:0040BB5A                 jmp     loc_40B980
.text:0040BB5F ; ---------------------------------------------------------------------------
.text:0040BB5F
.text:0040BB5F loc_40BB5F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040BB5F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BB62                 inc     edx
.text:0040BB63                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BB66                 jmp     short loc_40BB51
.text:0040BB68 ; ---------------------------------------------------------------------------
.text:0040BB68
.text:0040BB68 loc_40BB68:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040BB68                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BB6B                 inc     edx
.text:0040BB6C                 mov     byte ptr [edx], 30h ; '0'
.text:0040BB6F                 inc     edx
.text:0040BB70                 mov     byte ptr [edx], 31h ; '1'
.text:0040BB73                 inc     edx
.text:0040BB74                 mov     byte ptr [edx], 32h ; '2'
.text:0040BB77                 jmp     short loc_40BB51
.text:0040BB79 ; ---------------------------------------------------------------------------
.text:0040BB79
.text:0040BB79 loc_40BB79:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040BB79                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BB7C                 inc     edx
.text:0040BB7D                 mov     byte ptr [edx], 30h ; '0'
.text:0040BB80                 inc     edx
.text:0040BB81                 mov     byte ptr [edx], 34h ; '4'
.text:0040BB84                 inc     edx
.text:0040BB85                 mov     byte ptr [edx], 30h ; '0'
.text:0040BB88                 jmp     short loc_40BB51
.text:0040BB88 ; ---------------------------------------------------------------------------
.text:0040BB8A                 align 10h
.text:0040BB90
.text:0040BB90 loc_40BB90:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040BB90                                         ; ___addmntentstr+4A↑j ...
.text:0040BB90                 test    al, al
.text:0040BB92                 jz      loc_40B950
.text:0040BB98                 mov     ebx, [esp+4Ch+var_2C]
.text:0040BB9C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040BB9F                 call    strlen
.text:0040BBA4                 lea     edx, ds:1[eax*4]
.text:0040BBAB                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040BBAE                 call    malloc
.text:0040BBB3                 mov     [esp+4Ch+var_2C], eax
.text:0040BBB7                 mov     edx, eax
.text:0040BBB9                 lea     esi, [esi+0]
.text:0040BBC0
.text:0040BBC0 loc_40BBC0:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040BBC0                 movzx   eax, byte ptr [ebx]
.text:0040BBC3                 cmp     al, 20h ; ' '
.text:0040BBC5                 jz      short loc_40BC00
.text:0040BBC7                 cmp     al, 9
.text:0040BBC9                 jz      short loc_40BBE8
.text:0040BBCB                 cmp     al, 5Ch ; '\'
.text:0040BBCD                 jz      short loc_40BBDF
.text:0040BBCF                 mov     [edx], al
.text:0040BBD1
.text:0040BBD1 loc_40BBD1:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040BBD1                                         ; ___addmntentstr+307↓j ...
.text:0040BBD1                 movzx   ecx, byte ptr [ebx]
.text:0040BBD4                 inc     edx
.text:0040BBD5                 inc     ebx
.text:0040BBD6                 test    cl, cl
.text:0040BBD8                 jnz     short loc_40BBC0
.text:0040BBDA                 jmp     loc_40B950
.text:0040BBDF ; ---------------------------------------------------------------------------
.text:0040BBDF
.text:0040BBDF loc_40BBDF:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040BBDF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BBE2                 inc     edx
.text:0040BBE3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BBE6                 jmp     short loc_40BBD1
.text:0040BBE8 ; ---------------------------------------------------------------------------
.text:0040BBE8
.text:0040BBE8 loc_40BBE8:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040BBE8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BBEB                 inc     edx
.text:0040BBEC                 mov     byte ptr [edx], 30h ; '0'
.text:0040BBEF                 inc     edx
.text:0040BBF0                 mov     byte ptr [edx], 31h ; '1'
.text:0040BBF3                 inc     edx
.text:0040BBF4                 mov     byte ptr [edx], 32h ; '2'
.text:0040BBF7                 jmp     short loc_40BBD1
.text:0040BBF7 ; ---------------------------------------------------------------------------
.text:0040BBF9                 align 10h
.text:0040BC00
.text:0040BC00 loc_40BC00:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040BC00                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BC03                 inc     edx
.text:0040BC04                 mov     byte ptr [edx], 30h ; '0'
.text:0040BC07                 inc     edx
.text:0040BC08                 mov     byte ptr [edx], 34h ; '4'
.text:0040BC0B                 inc     edx
.text:0040BC0C                 mov     byte ptr [edx], 30h ; '0'
.text:0040BC0F                 jmp     short loc_40BBD1
.text:0040BC11 ; ---------------------------------------------------------------------------
.text:0040BC11
.text:0040BC11 loc_40BC11:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040BC11                 movzx   eax, byte ptr [ecx]
.text:0040BC14                 jmp     loc_40BB90
.text:0040BC14 ___addmntentstr endp
.text:0040BC14
.text:0040BC14 ; ---------------------------------------------------------------------------
.text:0040BC19                 align 10h
.text:0040BC20
.text:0040BC20 ; =============== S U B R O U T I N E =======================================
.text:0040BC20
.text:0040BC20
.text:0040BC20 sub_40BC20      proc near               ; CODE XREF: sub_40A550+99↑p
.text:0040BC20
.text:0040BC20 nBufferLength   = dword ptr -1Ch
.text:0040BC20 lpBuffer        = dword ptr -18h
.text:0040BC20 dwBytes         = dword ptr -14h
.text:0040BC20 var_8           = dword ptr -8
.text:0040BC20 var_4           = dword ptr -4
.text:0040BC20
.text:0040BC20                 sub     esp, 1Ch
.text:0040BC23                 mov     [esp+1Ch+var_8], ebx
.text:0040BC27                 mov     [esp+1Ch+var_4], esi
.text:0040BC2B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040BC33                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040BC3A                 call    GetLogicalDriveStringsA
.text:0040BC3F                 sub     esp, 8
.text:0040BC42                 mov     ebx, eax
.text:0040BC44                 call    GetProcessHeap
.text:0040BC49                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040BC4C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040BC50                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040BC58                 call    HeapAlloc
.text:0040BC5D                 sub     esp, 0Ch
.text:0040BC60                 mov     esi, eax
.text:0040BC62                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040BC65                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040BC69                 call    GetLogicalDriveStringsA
.text:0040BC6E                 sub     esp, 8
.text:0040BC71                 mov     eax, esi
.text:0040BC73                 mov     ebx, [esp+1Ch+var_8]
.text:0040BC77                 mov     esi, [esp+1Ch+var_4]
.text:0040BC7B                 add     esp, 1Ch
.text:0040BC7E                 retn
.text:0040BC7E sub_40BC20      endp
.text:0040BC7E
.text:0040BC7F
.text:0040BC7F ; =============== S U B R O U T I N E =======================================
.text:0040BC7F
.text:0040BC7F
.text:0040BC7F ; int __cdecl sub_40BC7F(char *, char *)
.text:0040BC7F sub_40BC7F      proc near               ; DATA XREF: sub_40BC7F:loc_40BD0D↓o
.text:0040BC7F
.text:0040BC7F FileName        = dword ptr -1Ch
.text:0040BC7F Mode            = dword ptr -18h
.text:0040BC7F dwBytes         = dword ptr -14h
.text:0040BC7F arg_0           = dword ptr  4
.text:0040BC7F arg_4           = dword ptr  8
.text:0040BC7F
.text:0040BC7F                 ja      short $+2
.text:0040BC81
.text:0040BC81 loc_40BC81:                             ; CODE XREF: sub_40BC7F↑j
.text:0040BC81                 jmp     short loc_40BC90
.text:0040BC81 ; ---------------------------------------------------------------------------
.text:0040BC83                 align 10h
.text:0040BC90
.text:0040BC90 loc_40BC90:                             ; CODE XREF: sub_40BC7F:loc_40BC81↑j
.text:0040BC90                 push    edi
.text:0040BC91                 push    esi
.text:0040BC92                 push    ebx
.text:0040BC93                 sub     esp, 10h
.text:0040BC96                 mov     ebx, [esp+1Ch+arg_0]
.text:0040BC9A                 mov     edx, [esp+1Ch+arg_4]
.text:0040BC9E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040BCA1                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040BCA5                 call    fopen
.text:0040BCAA                 test    eax, eax
.text:0040BCAC                 mov     edi, eax
.text:0040BCAE                 jz      short loc_40BD0D
.text:0040BCB0
.text:0040BCB0 loc_40BCB0:                             ; CODE XREF: sub_40BC7F+A2↓j
.text:0040BCB0                                         ; sub_40BC7F+AB↓j
.text:0040BCB0                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040BCB8                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040BCBF                 call    GetLogicalDriveStringsA
.text:0040BCC4                 sub     esp, 8
.text:0040BCC7                 mov     esi, eax
.text:0040BCC9                 call    GetProcessHeap
.text:0040BCCE                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040BCD1                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040BCD5                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040BCDD                 call    HeapAlloc
.text:0040BCE2                 sub     esp, 0Ch
.text:0040BCE5                 mov     ebx, eax
.text:0040BCE7                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040BCEA                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040BCEE                 call    GetLogicalDriveStringsA
.text:0040BCF3                 mov     off_410084, ebx ; "notset"
.text:0040BCF9                 sub     esp, 8
.text:0040BCFC                 xor     eax, eax
.text:0040BCFE                 test    ebx, ebx
.text:0040BD00                 setz    al
.text:0040BD03                 add     esp, 10h
.text:0040BD06                 pop     ebx
.text:0040BD07                 dec     eax
.text:0040BD08                 and     eax, edi
.text:0040BD0A                 pop     esi
.text:0040BD0B                 pop     edi
.text:0040BD0C                 retn
.text:0040BD0D ; ---------------------------------------------------------------------------
.text:0040BD0D
.text:0040BD0D loc_40BD0D:                             ; CODE XREF: sub_40BC7F+2F↑j
.text:0040BD0D                 mov     [esp+1Ch+Mode], offset sub_40BC7F ; Mode
.text:0040BD15                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040BD18                 call    fopen
.text:0040BD1D                 test    eax, eax
.text:0040BD1F                 mov     edi, eax
.text:0040BD21                 jnz     short loc_40BCB0
.text:0040BD23                 call    sub_40BFF0
.text:0040BD28                 mov     edi, eax
.text:0040BD2A                 jmp     short loc_40BCB0
.text:0040BD2A sub_40BC7F      endp
.text:0040BD2A
.text:0040BD2A ; ---------------------------------------------------------------------------
.text:0040BD2C                 align 10h
.text:0040BD30                 sub     esp, 0Ch
.text:0040BD33                 mov     eax, [esp+10h]
.text:0040BD37                 test    eax, eax
.text:0040BD39                 jz      short loc_40BD43
.text:0040BD3B                 mov     [esp], eax
.text:0040BD3E                 call    fclose
.text:0040BD43
.text:0040BD43 loc_40BD43:                             ; CODE XREF: .text:0040BD39↑j
.text:0040BD43                 call    GetProcessHeap
.text:0040BD48                 mov     [esp], eax
.text:0040BD4B                 mov     ecx, off_410084 ; "notset"
.text:0040BD51                 mov     dword ptr [esp+4], 0
.text:0040BD59                 mov     [esp+8], ecx
.text:0040BD5D                 call    HeapFree
.text:0040BD62                 mov     edx, off_410080 ; "notset"
.text:0040BD68                 sub     esp, 0Ch
.text:0040BD6B                 mov     eax, 1
.text:0040BD70                 mov     off_410084, edx ; "notset"
.text:0040BD76                 add     esp, 0Ch
.text:0040BD79                 retn
.text:0040BD79 ; ---------------------------------------------------------------------------
.text:0040BD7A                 align 10h
.text:0040BD80                 push    edi
.text:0040BD81                 push    esi
.text:0040BD82                 push    ebx
.text:0040BD83                 sub     esp, 10h
.text:0040BD86                 mov     edi, [esp+24h]
.text:0040BD8A                 mov     [esp], edi
.text:0040BD8D                 call    strlen
.text:0040BD92                 mov     edx, [esp+20h]
.text:0040BD96                 mov     esi, eax
.text:0040BD98                 mov     ebx, [edx+0Ch]
.text:0040BD9B                 nop
.text:0040BD9C                 lea     esi, [esi+0]
.text:0040BDA0
.text:0040BDA0 loc_40BDA0:                             ; CODE XREF: .text:0040BDD1↓j
.text:0040BDA0                 mov     [esp+4], edi
.text:0040BDA4                 mov     [esp], ebx
.text:0040BDA7                 call    strstr
.text:0040BDAC                 test    eax, eax
.text:0040BDAE                 jz      short loc_40BDD3
.text:0040BDB0                 cmp     eax, ebx
.text:0040BDB2                 jz      short loc_40BDD5
.text:0040BDB4                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040BDB8                 jz      short loc_40BDE0
.text:0040BDBA
.text:0040BDBA loc_40BDBA:                             ; CODE XREF: .text:0040BDF0↓j
.text:0040BDBA                 mov     [esp], ebx
.text:0040BDBD                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040BDC5                 call    strchr
.text:0040BDCA                 test    eax, eax
.text:0040BDCC                 mov     ebx, eax
.text:0040BDCE                 jz      short loc_40BDD3
.text:0040BDD0                 inc     ebx
.text:0040BDD1                 jmp     short loc_40BDA0
.text:0040BDD3 ; ---------------------------------------------------------------------------
.text:0040BDD3
.text:0040BDD3 loc_40BDD3:                             ; CODE XREF: .text:0040BDAE↑j
.text:0040BDD3                                         ; .text:0040BDCE↑j
.text:0040BDD3                 xor     eax, eax
.text:0040BDD5
.text:0040BDD5 loc_40BDD5:                             ; CODE XREF: .text:0040BDB2↑j
.text:0040BDD5                                         ; .text:0040BDE6↓j ...
.text:0040BDD5                 add     esp, 10h
.text:0040BDD8                 pop     ebx
.text:0040BDD9                 pop     esi
.text:0040BDDA                 pop     edi
.text:0040BDDB                 retn
.text:0040BDDB ; ---------------------------------------------------------------------------
.text:0040BDDC                 align 10h
.text:0040BDE0
.text:0040BDE0 loc_40BDE0:                             ; CODE XREF: .text:0040BDB8↑j
.text:0040BDE0                 movzx   edx, byte ptr [esi+eax]
.text:0040BDE4                 test    dl, dl
.text:0040BDE6                 jz      short loc_40BDD5
.text:0040BDE8                 cmp     dl, 3Dh ; '='
.text:0040BDEB                 jz      short loc_40BDD5
.text:0040BDED                 cmp     dl, 2Ch ; ','
.text:0040BDF0                 jnz     short loc_40BDBA
.text:0040BDF2                 jmp     short loc_40BDD5
.text:0040BDF2 ; ---------------------------------------------------------------------------
.text:0040BDF4                 align 10h
.text:0040BE00 ; const char aFxstat64BadFil[]
.text:0040BE00 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:0040BE00                                         ; DATA XREF: sub_40BE30+7B↓o
.text:0040BE24                 align 10h
.text:0040BE30
.text:0040BE30 ; =============== S U B R O U T I N E =======================================
.text:0040BE30
.text:0040BE30
.text:0040BE30 ; int __cdecl sub_40BE30(HANDLE hNamedPipe, int, int)
.text:0040BE30 sub_40BE30      proc near               ; CODE XREF: .text:0040A769↑p
.text:0040BE30
.text:0040BE30 FileHandle      = dword ptr -1Ch
.text:0040BE30 var_18          = dword ptr -18h
.text:0040BE30 var_C           = dword ptr -0Ch
.text:0040BE30 var_8           = dword ptr -8
.text:0040BE30 var_4           = dword ptr -4
.text:0040BE30 hNamedPipe      = dword ptr  4
.text:0040BE30 arg_4           = dword ptr  8
.text:0040BE30 arg_8           = dword ptr  0Ch
.text:0040BE30
.text:0040BE30                 sub     esp, 1Ch
.text:0040BE33                 mov     edx, [esp+1Ch+arg_4]
.text:0040BE37                 mov     [esp+1Ch+var_C], ebx
.text:0040BE3B                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040BE3F                 mov     [esp+1Ch+var_8], esi
.text:0040BE43                 mov     esi, [esp+1Ch+arg_8]
.text:0040BE47                 test    ebx, ebx
.text:0040BE49                 mov     [esp+1Ch+var_4], edi
.text:0040BE4D                 jnz     short loc_40BE87
.text:0040BE4F                 test    edx, edx
.text:0040BE51                 js      short loc_40BEA7
.text:0040BE53                 test    esi, esi
.text:0040BE55                 jz      short loc_40BE87
.text:0040BE57                 cld
.text:0040BE58                 mov     eax, ebx
.text:0040BE5A                 mov     edi, esi
.text:0040BE5C                 mov     ecx, 18h
.text:0040BE61                 rep stosd
.text:0040BE63                 mov     [esp+1Ch+arg_4], esi ; int
.text:0040BE67                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040BE6A                 call    _get_osfhandle
.text:0040BE6F                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:0040BE73                 mov     ebx, [esp+1Ch+var_C]
.text:0040BE77                 mov     esi, [esp+1Ch+var_8]
.text:0040BE7B                 mov     edi, [esp+1Ch+var_4]
.text:0040BE7F                 add     esp, 1Ch
.text:0040BE82                 jmp     sub_407EB0
.text:0040BE87 ; ---------------------------------------------------------------------------
.text:0040BE87
.text:0040BE87 loc_40BE87:                             ; CODE XREF: sub_40BE30+1D↑j
.text:0040BE87                                         ; sub_40BE30+25↑j
.text:0040BE87                 call    _errno
.text:0040BE8C                 mov     dword ptr [eax], 16h
.text:0040BE92
.text:0040BE92 loc_40BE92:                             ; CODE XREF: sub_40BE30+92↓j
.text:0040BE92                 mov     ebx, [esp+1Ch+var_C]
.text:0040BE96                 mov     eax, 0FFFFFFFFh
.text:0040BE9B                 mov     esi, [esp+1Ch+var_8]
.text:0040BE9F                 mov     edi, [esp+1Ch+var_4]
.text:0040BEA3                 add     esp, 1Ch
.text:0040BEA6                 retn
.text:0040BEA7 ; ---------------------------------------------------------------------------
.text:0040BEA7
.text:0040BEA7 loc_40BEA7:                             ; CODE XREF: sub_40BE30+21↑j
.text:0040BEA7                 mov     [esp+1Ch+var_18], edx
.text:0040BEAB                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:0040BEB2                 call    printf
.text:0040BEB7                 call    _errno
.text:0040BEBC                 mov     dword ptr [eax], 9
.text:0040BEC2                 jmp     short loc_40BE92
.text:0040BEC2 sub_40BE30      endp
.text:0040BEC2
.text:0040BEC2 ; ---------------------------------------------------------------------------
.text:0040BEC4                 align 20h
.text:0040BEE0
.text:0040BEE0 ; =============== S U B R O U T I N E =======================================
.text:0040BEE0
.text:0040BEE0 ; Attributes: noreturn
.text:0040BEE0
.text:0040BEE0 sub_40BEE0      proc near               ; CODE XREF: .text:0040B5E9↑p
.text:0040BEE0                                         ; sub_40BEE0↓j
.text:0040BEE0                 jmp     short sub_40BEE0
.text:0040BEE0 sub_40BEE0      endp
.text:0040BEE0
.text:0040BEE0 ; ---------------------------------------------------------------------------
.text:0040BEE2                 align 10h
.text:0040BEF0
.text:0040BEF0 ; =============== S U B R O U T I N E =======================================
.text:0040BEF0
.text:0040BEF0
.text:0040BEF0 sub_40BEF0      proc near               ; CODE XREF: .text:0040B345↑p
.text:0040BEF0
.text:0040BEF0 FileHandle      = dword ptr -1Ch
.text:0040BEF0 dwFileOffsetLow = dword ptr -18h
.text:0040BEF0 dwFileOffsetHigh= dword ptr -14h
.text:0040BEF0 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0040BEF0 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0040BEF0 var_8           = dword ptr -8
.text:0040BEF0 var_4           = dword ptr -4
.text:0040BEF0 arg_0           = dword ptr  4
.text:0040BEF0
.text:0040BEF0                 sub     esp, 1Ch
.text:0040BEF3                 mov     edx, [esp+1Ch+arg_0]
.text:0040BEF7                 mov     [esp+1Ch+var_4], esi
.text:0040BEFB                 mov     [esp+1Ch+var_8], ebx
.text:0040BEFF                 mov     ebx, [edx+10h]
.text:0040BF02                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040BF05                 call    _get_osfhandle
.text:0040BF0A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040BF0D                 mov     esi, eax
.text:0040BF0F                 call    _filelengthi64
.text:0040BF14                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0040BF18                 cdq
.text:0040BF19                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0040BF1C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040BF20                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0040BF28                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0040BF30                 call    UnlockFile
.text:0040BF35                 sub     esp, 14h
.text:0040BF38                 mov     ebx, [esp+1Ch+var_8]
.text:0040BF3C                 mov     esi, [esp+1Ch+var_4]
.text:0040BF40                 add     esp, 1Ch
.text:0040BF43                 retn
.text:0040BF43 sub_40BEF0      endp
.text:0040BF43
.text:0040BF43 ; ---------------------------------------------------------------------------
.text:0040BF44                 align 10h
.text:0040BF50
.text:0040BF50 ; =============== S U B R O U T I N E =======================================
.text:0040BF50
.text:0040BF50
.text:0040BF50 ; int __cdecl sub_40BF50(int, char *Control)
.text:0040BF50 sub_40BF50      proc near               ; CODE XREF: .text:0040B206↑p
.text:0040BF50                                         ; .text:0040B256↑p ...
.text:0040BF50
.text:0040BF50 Str             = dword ptr -1Ch
.text:0040BF50 Val             = dword ptr -18h
.text:0040BF50 var_8           = dword ptr -8
.text:0040BF50 var_4           = dword ptr -4
.text:0040BF50 arg_0           = dword ptr  4
.text:0040BF50 Control         = dword ptr  8
.text:0040BF50
.text:0040BF50                 sub     esp, 1Ch
.text:0040BF53                 xor     eax, eax
.text:0040BF55                 mov     edx, [esp+1Ch+Control]
.text:0040BF59                 mov     [esp+1Ch+var_4], esi
.text:0040BF5D                 mov     esi, [esp+1Ch+arg_0]
.text:0040BF61                 mov     [esp+1Ch+var_8], ebx
.text:0040BF65                 mov     ebx, [esi]
.text:0040BF67                 test    ebx, ebx
.text:0040BF69                 jz      short loc_40BF98
.text:0040BF6B                 movzx   eax, byte ptr [edx]
.text:0040BF6E                 test    al, al
.text:0040BF70                 jz      short loc_40BF90
.text:0040BF72                 cmp     byte ptr [edx+1], 0
.text:0040BF76                 jnz     short loc_40BFD0
.text:0040BF78                 movzx   ecx, byte ptr [ebx]
.text:0040BF7B                 mov     edx, ebx
.text:0040BF7D                 cmp     cl, al
.text:0040BF7F                 jz      short loc_40BFC2
.text:0040BF81                 test    cl, cl
.text:0040BF83                 jnz     short loc_40BFA4
.text:0040BF85                 lea     esi, [esi+0]
.text:0040BF89                 lea     edi, [edi+0]
.text:0040BF90
.text:0040BF90 loc_40BF90:                             ; CODE XREF: sub_40BF50+20↑j
.text:0040BF90                                         ; sub_40BF50+74↓j
.text:0040BF90                 mov     dword ptr [esi], 0
.text:0040BF96
.text:0040BF96 loc_40BF96:                             ; CODE XREF: sub_40BF50+7C↓j
.text:0040BF96                 mov     eax, ebx
.text:0040BF98
.text:0040BF98 loc_40BF98:                             ; CODE XREF: sub_40BF50+19↑j
.text:0040BF98                 mov     ebx, [esp+1Ch+var_8]
.text:0040BF9C                 mov     esi, [esp+1Ch+var_4]
.text:0040BFA0                 add     esp, 1Ch
.text:0040BFA3                 retn
.text:0040BFA4 ; ---------------------------------------------------------------------------
.text:0040BFA4
.text:0040BFA4 loc_40BFA4:                             ; CODE XREF: sub_40BF50+33↑j
.text:0040BFA4                 movsx   edx, al
.text:0040BFA7                 mov     [esp+1Ch+Val], edx ; Val
.text:0040BFAB                 lea     edx, [ebx+1]
.text:0040BFAE                 mov     [esp+1Ch+Str], edx ; Str
.text:0040BFB1                 call    strchr
.text:0040BFB6                 lea     esi, [esi+0]
.text:0040BFB9                 lea     edi, [edi+0]
.text:0040BFC0
.text:0040BFC0 loc_40BFC0:                             ; CODE XREF: sub_40BF50+8C↓j
.text:0040BFC0                 mov     edx, eax
.text:0040BFC2
.text:0040BFC2 loc_40BFC2:                             ; CODE XREF: sub_40BF50+2F↑j
.text:0040BFC2                 test    edx, edx
.text:0040BFC4                 jz      short loc_40BF90
.text:0040BFC6                 mov     byte ptr [edx], 0
.text:0040BFC9                 inc     edx
.text:0040BFCA                 mov     [esi], edx
.text:0040BFCC                 jmp     short loc_40BF96
.text:0040BFCC ; ---------------------------------------------------------------------------
.text:0040BFCE                 align 10h
.text:0040BFD0
.text:0040BFD0 loc_40BFD0:                             ; CODE XREF: sub_40BF50+26↑j
.text:0040BFD0                 mov     [esp+1Ch+Val], edx ; Control
.text:0040BFD4                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040BFD7                 call    strpbrk
.text:0040BFDC                 jmp     short loc_40BFC0
.text:0040BFDC sub_40BF50      endp
.text:0040BFDC
.text:0040BFDC ; ---------------------------------------------------------------------------
.text:0040BFDE                 align 10h
.text:0040BFE0 ; const char aTmpf[]
.text:0040BFE0 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40BFF0+20↓o
.text:0040BFE5 ; const char aWBd[]
.text:0040BFE5 aWBd            db 'w+bD',0             ; DATA XREF: sub_40BFF0+5E↓o
.text:0040BFEA                 align 10h
.text:0040BFF0
.text:0040BFF0 ; =============== S U B R O U T I N E =======================================
.text:0040BFF0
.text:0040BFF0
.text:0040BFF0 sub_40BFF0      proc near               ; CODE XREF: sub_40BC7F+A4↑p
.text:0040BFF0
.text:0040BFF0 FileHandle      = dword ptr -13Ch
.text:0040BFF0 Format          = dword ptr -138h
.text:0040BFF0 var_134         = dword ptr -134h
.text:0040BFF0 var_130         = dword ptr -130h
.text:0040BFF0 var_12C         = dword ptr -12Ch
.text:0040BFF0 FileName        = byte ptr -11Ch
.text:0040BFF0 var_8           = dword ptr -8
.text:0040BFF0 var_4           = dword ptr -4
.text:0040BFF0
.text:0040BFF0                 sub     esp, 13Ch
.text:0040BFF6                 mov     [esp+13Ch+var_8], ebx
.text:0040BFFD                 lea     ebx, [esp+13Ch+FileName]
.text:0040C001                 mov     [esp+13Ch+var_4], esi
.text:0040C008                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040C010                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040C018                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040C020                 mov     [esp+13Ch+Format], 104h ; int
.text:0040C028                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040C02B                 call    sub_40C0C0
.text:0040C030                 xor     edx, edx
.text:0040C032                 test    eax, eax
.text:0040C034                 jnz     short loc_40C066
.text:0040C036                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040C039                 mov     [esp+13Ch+Format], 0 ; int
.text:0040C041                 call    sub_40C440
.text:0040C046                 xor     edx, edx
.text:0040C048                 mov     ebx, eax
.text:0040C04A                 test    eax, eax
.text:0040C04C                 js      short loc_40C066
.text:0040C04E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040C056                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040C059                 call    _fdopen
.text:0040C05E                 test    eax, eax
.text:0040C060                 mov     esi, eax
.text:0040C062                 jz      short loc_40C07D
.text:0040C064
.text:0040C064 loc_40C064:                             ; CODE XREF: sub_40BFF0+95↓j
.text:0040C064                 mov     edx, esi
.text:0040C066
.text:0040C066 loc_40C066:                             ; CODE XREF: sub_40BFF0+44↑j
.text:0040C066                                         ; sub_40BFF0+5C↑j
.text:0040C066                 mov     ebx, [esp+13Ch+var_8]
.text:0040C06D                 mov     eax, edx
.text:0040C06F                 mov     esi, [esp+13Ch+var_4]
.text:0040C076                 add     esp, 13Ch
.text:0040C07C                 retn
.text:0040C07D ; ---------------------------------------------------------------------------
.text:0040C07D
.text:0040C07D loc_40C07D:                             ; CODE XREF: sub_40BFF0+72↑j
.text:0040C07D                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040C080                 call    _close
.text:0040C085                 jmp     short loc_40C064
.text:0040C085 sub_40BFF0      endp
.text:0040C085
.text:0040C085 ; ---------------------------------------------------------------------------
.text:0040C087                 align 10h
.text:0040C090 aFile           db 'file',0             ; DATA XREF: sub_40C0C0:loc_40C0EC↓o
.text:0040C095 ; const char aSSxxxxxx[]
.text:0040C095 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_40C0C0+9B↓o
.text:0040C0A5 ; const char aTemp[]
.text:0040C0A5 aTemp           db 'TEMP',0             ; DATA XREF: sub_40C0C0:loc_40C1A2↓o
.text:0040C0A5                                         ; sub_40C0C0:loc_40C1E2↓o ...
.text:0040C0AA ; const char aTmp[]
.text:0040C0AA aTmp            db '/tmp',0             ; DATA XREF: sub_40C0C0+12F↓o
.text:0040C0AA                                         ; sub_40C0C0+141↓o ...
.text:0040C0AF aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_40C0C0:loc_40C260↓o
.text:0040C0B6 aTmp_0          db 'TMP',0              ; DATA XREF: sub_40C0C0:loc_40C2F0↓o
.text:0040C0BA                 align 10h
.text:0040C0C0
.text:0040C0C0 ; =============== S U B R O U T I N E =======================================
.text:0040C0C0
.text:0040C0C0
.text:0040C0C0 ; int __cdecl sub_40C0C0(char *Buffer, int, char *, char *, int)
.text:0040C0C0 sub_40C0C0      proc near               ; CODE XREF: sub_40BFF0+3B↑p
.text:0040C0C0
.text:0040C0C0 Str             = dword ptr -1BCh
.text:0040C0C0 Format          = dword ptr -1B8h
.text:0040C0C0 var_1B4         = dword ptr -1B4h
.text:0040C0C0 var_1B0         = dword ptr -1B0h
.text:0040C0C0 var_1AC         = dword ptr -1ACh
.text:0040C0C0 var_1A8         = dword ptr -1A8h
.text:0040C0C0 var_19C         = dword ptr -19Ch
.text:0040C0C0 var_13C         = dword ptr -13Ch
.text:0040C0C0 var_DC          = dword ptr -0DCh
.text:0040C0C0 var_7C          = dword ptr -7Ch
.text:0040C0C0 Buffer          = dword ptr  4
.text:0040C0C0 arg_4           = dword ptr  8
.text:0040C0C0 arg_8           = dword ptr  0Ch
.text:0040C0C0 arg_C           = dword ptr  10h
.text:0040C0C0 arg_10          = dword ptr  14h
.text:0040C0C0
.text:0040C0C0                 push    ebp
.text:0040C0C1                 push    edi
.text:0040C0C2                 push    esi
.text:0040C0C3                 push    ebx
.text:0040C0C4                 sub     esp, 1ACh
.text:0040C0CA                 mov     eax, [esp+1BCh+arg_C]
.text:0040C0D1                 mov     esi, [esp+1BCh+arg_8]
.text:0040C0D8                 test    eax, eax
.text:0040C0DA                 jz      short loc_40C0EC
.text:0040C0DC                 mov     edx, [esp+1BCh+arg_C]
.text:0040C0E3                 cmp     byte ptr [edx], 0
.text:0040C0E6                 jnz     loc_40C320
.text:0040C0EC
.text:0040C0EC loc_40C0EC:                             ; CODE XREF: sub_40C0C0+1A↑j
.text:0040C0EC                 mov     eax, offset aFile ; "file"
.text:0040C0F1                 mov     ebp, 4
.text:0040C0F6                 mov     [esp+1BCh+arg_C], eax
.text:0040C0FD
.text:0040C0FD loc_40C0FD:                             ; CODE XREF: sub_40C0C0+274↓j
.text:0040C0FD                                         ; sub_40C0C0+27F↓j
.text:0040C0FD                 mov     ebx, [esp+1BCh+arg_10]
.text:0040C104                 test    ebx, ebx
.text:0040C106                 jnz     loc_40C260
.text:0040C10C
.text:0040C10C loc_40C10C:                             ; CODE XREF: sub_40C0C0+21C↓j
.text:0040C10C                                         ; sub_40C0C0+224↓j ...
.text:0040C10C                 test    esi, esi
.text:0040C10E                 jz      loc_40C1A2
.text:0040C114
.text:0040C114 loc_40C114:                             ; CODE XREF: sub_40C0C0+176↓j
.text:0040C114                                         ; sub_40C0C0+19A↓j
.text:0040C114                 mov     [esp+1BCh+Str], esi ; Str
.text:0040C117                 call    strlen
.text:0040C11C                 test    eax, eax
.text:0040C11E                 mov     edx, eax
.text:0040C120                 jz      short loc_40C130
.text:0040C122                 movzx   eax, byte ptr [eax+esi-1]
.text:0040C127                 cmp     al, 2Fh ; '/'
.text:0040C129                 jz      short loc_40C190
.text:0040C12B                 cmp     al, 5Ch ; '\'
.text:0040C12D                 jz      short loc_40C190
.text:0040C12F                 nop
.text:0040C130
.text:0040C130 loc_40C130:                             ; CODE XREF: sub_40C0C0+60↑j
.text:0040C130                                         ; sub_40C0C0+D1↓j ...
.text:0040C130                 lea     edi, [ebp+edx+8]
.text:0040C134                 cmp     [esp+1BCh+arg_4], edi
.text:0040C13B                 jb      short loc_40C178
.text:0040C13D                 mov     [esp+1BCh+var_1AC], ebp
.text:0040C141                 mov     ecx, [esp+1BCh+arg_C]
.text:0040C148                 mov     ebp, [esp+1BCh+Buffer]
.text:0040C14F                 mov     [esp+1BCh+var_1B0], esi
.text:0040C153                 mov     [esp+1BCh+var_1A8], ecx
.text:0040C157                 mov     [esp+1BCh+var_1B4], edx
.text:0040C15B                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0040C163                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0040C166                 call    sprintf
.text:0040C16B                 xor     eax, eax
.text:0040C16D
.text:0040C16D loc_40C16D:                             ; CODE XREF: sub_40C0C0+C8↓j
.text:0040C16D                 add     esp, 1ACh
.text:0040C173                 pop     ebx
.text:0040C174                 pop     esi
.text:0040C175                 pop     edi
.text:0040C176                 pop     ebp
.text:0040C177                 retn
.text:0040C178 ; ---------------------------------------------------------------------------
.text:0040C178
.text:0040C178 loc_40C178:                             ; CODE XREF: sub_40C0C0+7B↑j
.text:0040C178                 call    _errno
.text:0040C17D                 mov     dword ptr [eax], 16h
.text:0040C183
.text:0040C183 loc_40C183:                             ; CODE XREF: sub_40C0C0+187↓j
.text:0040C183                 mov     eax, 0FFFFFFFFh
.text:0040C188                 jmp     short loc_40C16D
.text:0040C188 ; ---------------------------------------------------------------------------
.text:0040C18A                 align 10h
.text:0040C190
.text:0040C190 loc_40C190:                             ; CODE XREF: sub_40C0C0+69↑j
.text:0040C190                                         ; sub_40C0C0+6D↑j ...
.text:0040C190                 dec     edx
.text:0040C191                 jz      short loc_40C130
.text:0040C193                 movzx   eax, byte ptr [edx+esi-1]
.text:0040C198                 cmp     al, 2Fh ; '/'
.text:0040C19A                 jz      short loc_40C190
.text:0040C19C                 cmp     al, 5Ch ; '\'
.text:0040C19E                 jz      short loc_40C190
.text:0040C1A0                 jmp     short loc_40C130
.text:0040C1A2 ; ---------------------------------------------------------------------------
.text:0040C1A2
.text:0040C1A2 loc_40C1A2:                             ; CODE XREF: sub_40C0C0+4E↑j
.text:0040C1A2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040C1A9                 lea     esi, [esp+1BCh+var_13C]
.text:0040C1B0                 call    getenv
.text:0040C1B5                 mov     [esp+1BCh+Format], eax ; char *
.text:0040C1B9                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0040C1BD                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040C1C4                 call    sub_406CF0
.text:0040C1C9                 test    eax, eax
.text:0040C1CB                 jnz     short loc_40C1E2
.text:0040C1CD                 mov     edi, [esp+1BCh+var_13C]
.text:0040C1D4                 and     edi, 0F000h
.text:0040C1DA                 cmp     edi, 4000h
.text:0040C1E0                 jz      short loc_40C24C
.text:0040C1E2
.text:0040C1E2 loc_40C1E2:                             ; CODE XREF: sub_40C0C0+10B↑j
.text:0040C1E2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040C1E9                 call    getenv
.text:0040C1EE                 cld
.text:0040C1EF                 mov     edx, offset aTmp ; "/tmp"
.text:0040C1F4                 mov     esi, eax
.text:0040C1F6                 mov     ecx, 5
.text:0040C1FB                 mov     edi, edx
.text:0040C1FD                 repe cmpsb
.text:0040C1FF                 jz      short loc_40C23C
.text:0040C201                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0040C209                 lea     ecx, [esp+1BCh+var_19C]
.text:0040C20D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040C211                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040C218                 call    sub_406CF0
.text:0040C21D                 test    eax, eax
.text:0040C21F                 jnz     short loc_40C23C
.text:0040C221                 mov     ebx, [esp+1BCh+var_19C]
.text:0040C225                 mov     esi, offset aTmp ; "/tmp"
.text:0040C22A                 and     ebx, 0F000h
.text:0040C230                 cmp     ebx, 4000h
.text:0040C236                 jz      loc_40C114
.text:0040C23C
.text:0040C23C loc_40C23C:                             ; CODE XREF: sub_40C0C0+13F↑j
.text:0040C23C                                         ; sub_40C0C0+15F↑j
.text:0040C23C                 call    _errno
.text:0040C241                 mov     dword ptr [eax], 2
.text:0040C247                 jmp     loc_40C183
.text:0040C24C ; ---------------------------------------------------------------------------
.text:0040C24C
.text:0040C24C loc_40C24C:                             ; CODE XREF: sub_40C0C0+120↑j
.text:0040C24C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040C253                 call    getenv
.text:0040C258                 mov     esi, eax
.text:0040C25A                 jmp     loc_40C114
.text:0040C25A ; ---------------------------------------------------------------------------
.text:0040C25F                 align 10h
.text:0040C260
.text:0040C260 loc_40C260:                             ; CODE XREF: sub_40C0C0+46↑j
.text:0040C260                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0040C267                 call    sub_40C950
.text:0040C26C                 test    eax, eax
.text:0040C26E                 mov     ebx, eax
.text:0040C270                 jz      short loc_40C2F0
.text:0040C272
.text:0040C272 loc_40C272:                             ; CODE XREF: sub_40C0C0+240↓j
.text:0040C272                                         ; sub_40C0C0+256↓j
.text:0040C272                 mov     [esp+1BCh+Format], ebx ; char *
.text:0040C276                 lea     edi, [esp+1BCh+var_7C]
.text:0040C27D                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0040C281                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040C288                 call    sub_406CF0
.text:0040C28D                 test    eax, eax
.text:0040C28F                 jnz     short loc_40C2A6
.text:0040C291                 mov     edx, [esp+1BCh+var_7C]
.text:0040C298                 and     edx, 0F000h
.text:0040C29E                 cmp     edx, 4000h
.text:0040C2A4                 jz      short loc_40C2E9
.text:0040C2A6
.text:0040C2A6 loc_40C2A6:                             ; CODE XREF: sub_40C0C0+1CF↑j
.text:0040C2A6                                         ; sub_40C0C0+25C↓j
.text:0040C2A6                 test    esi, esi
.text:0040C2A8                 jz      short loc_40C2E2
.text:0040C2AA                 mov     [esp+1BCh+Format], esi ; char *
.text:0040C2AE                 lea     ecx, [esp+1BCh+var_DC]
.text:0040C2B5                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040C2B9                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040C2C0                 call    sub_406CF0
.text:0040C2C5                 test    eax, eax
.text:0040C2C7                 jnz     short loc_40C2E2
.text:0040C2C9                 mov     ebx, [esp+1BCh+var_DC]
.text:0040C2D0                 and     ebx, 0F000h
.text:0040C2D6                 cmp     ebx, 4000h
.text:0040C2DC                 jz      loc_40C10C
.text:0040C2E2
.text:0040C2E2 loc_40C2E2:                             ; CODE XREF: sub_40C0C0+1E8↑j
.text:0040C2E2                                         ; sub_40C0C0+207↑j
.text:0040C2E2                 xor     esi, esi
.text:0040C2E4                 jmp     loc_40C10C
.text:0040C2E9 ; ---------------------------------------------------------------------------
.text:0040C2E9
.text:0040C2E9 loc_40C2E9:                             ; CODE XREF: sub_40C0C0+1E4↑j
.text:0040C2E9                 mov     esi, ebx
.text:0040C2EB                 jmp     loc_40C10C
.text:0040C2F0 ; ---------------------------------------------------------------------------
.text:0040C2F0
.text:0040C2F0 loc_40C2F0:                             ; CODE XREF: sub_40C0C0+1B0↑j
.text:0040C2F0                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0040C2F7                 call    sub_40C950
.text:0040C2FC                 test    eax, eax
.text:0040C2FE                 mov     ebx, eax
.text:0040C300                 jnz     loc_40C272
.text:0040C306                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040C30D                 call    sub_40C950
.text:0040C312                 test    eax, eax
.text:0040C314                 mov     ebx, eax
.text:0040C316                 jnz     loc_40C272
.text:0040C31C                 jmp     short loc_40C2A6
.text:0040C31C ; ---------------------------------------------------------------------------
.text:0040C31E                 align 10h
.text:0040C320
.text:0040C320 loc_40C320:                             ; CODE XREF: sub_40C0C0+26↑j
.text:0040C320                 mov     ecx, [esp+1BCh+arg_C]
.text:0040C327                 mov     [esp+1BCh+Str], ecx ; Str
.text:0040C32A                 call    strlen
.text:0040C32F                 cmp     eax, 5
.text:0040C332                 mov     ebp, eax
.text:0040C334                 jbe     loc_40C0FD
.text:0040C33A                 mov     ebp, 5
.text:0040C33F                 jmp     loc_40C0FD
.text:0040C33F sub_40C0C0      endp
.text:0040C33F
.text:0040C33F ; ---------------------------------------------------------------------------
.text:0040C344                 align 10h
.text:0040C350 byte_40C350     db 61h                  ; DATA XREF: sub_40C440+DC↓r
.text:0040C350                                         ; sub_40C440+122↓r ...
.text:0040C351 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0040C38F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_40C440+39↓o
.text:0040C396                 db 1Ah dup(90h)
.text:0040C3B0 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0040C3B0                                         ; DATA XREF: sub_40C440:loc_40C6B8↓o
.text:0040C3CF                 align 10h
.text:0040C3D0 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0040C3D0                                         ; DATA XREF: sub_40C440+405↓o
.text:0040C3FB                 db 15h dup(90h)
.text:0040C410 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0040C410                                         ; DATA XREF: sub_40C440+40D↓o
.text:0040C433                 align 10h
.text:0040C440
.text:0040C440 ; =============== S U B R O U T I N E =======================================
.text:0040C440
.text:0040C440
.text:0040C440 ; int __cdecl sub_40C440(char *FileName, int)
.text:0040C440 sub_40C440      proc near               ; CODE XREF: sub_40BFF0+51↑p
.text:0040C440
.text:0040C440 Str             = dword ptr -9Ch
.text:0040C440 OpenFlag        = dword ptr -98h
.text:0040C440 var_94          = dword ptr -94h
.text:0040C440 var_90          = dword ptr -90h
.text:0040C440 var_8C          = dword ptr -8Ch
.text:0040C440 var_88          = dword ptr -88h
.text:0040C440 var_84          = dword ptr -84h
.text:0040C440 var_80          = dword ptr -80h
.text:0040C440 var_7C          = dword ptr -7Ch
.text:0040C440 FileName        = dword ptr  4
.text:0040C440 arg_4           = dword ptr  8
.text:0040C440
.text:0040C440                 push    ebp
.text:0040C441                 push    edi
.text:0040C442                 push    esi
.text:0040C443                 push    ebx
.text:0040C444                 sub     esp, 8Ch
.text:0040C44A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0040C452                 call    _errno
.text:0040C457                 mov     edx, [eax]
.text:0040C459                 mov     [esp+9Ch+var_8C], edx
.text:0040C45D                 mov     edx, [esp+9Ch+FileName]
.text:0040C464                 mov     [esp+9Ch+Str], edx ; Str
.text:0040C467                 call    strlen
.text:0040C46C                 cmp     eax, 5
.text:0040C46F                 jle     short loc_40C48D
.text:0040C471                 cld
.text:0040C472                 mov     ecx, [esp+9Ch+FileName]
.text:0040C479                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0040C47E                 lea     esi, [eax+ecx-6]
.text:0040C482                 mov     ecx, 7
.text:0040C487                 mov     ebp, esi
.text:0040C489                 repe cmpsb
.text:0040C48B                 jz      short loc_40C4A8
.text:0040C48D
.text:0040C48D loc_40C48D:                             ; CODE XREF: sub_40C440+2F↑j
.text:0040C48D                 call    _errno
.text:0040C492                 mov     dword ptr [eax], 16h
.text:0040C498
.text:0040C498 loc_40C498:                             ; CODE XREF: sub_40C440+295↓j
.text:0040C498                                         ; sub_40C440+2D8↓j ...
.text:0040C498                 mov     eax, 0FFFFFFFFh
.text:0040C49D
.text:0040C49D loc_40C49D:                             ; CODE XREF: sub_40C440+2EF↓j
.text:0040C49D                                         ; sub_40C440+332↓j
.text:0040C49D                 add     esp, 8Ch
.text:0040C4A3                 pop     ebx
.text:0040C4A4                 pop     esi
.text:0040C4A5                 pop     edi
.text:0040C4A6                 pop     ebp
.text:0040C4A7                 retn
.text:0040C4A8 ; ---------------------------------------------------------------------------
.text:0040C4A8
.text:0040C4A8 loc_40C4A8:                             ; CODE XREF: sub_40C440+4B↑j
.text:0040C4A8                 mov     ecx, ds:dword_411494
.text:0040C4AE                 mov     edi, ds:dword_411490
.text:0040C4B4                 mov     eax, ecx
.text:0040C4B6                 or      eax, edi
.text:0040C4B8                 jz      loc_40C7F3
.text:0040C4BE
.text:0040C4BE loc_40C4BE:                             ; CODE XREF: sub_40C440+3F8↓j
.text:0040C4BE                 rdtsc
.text:0040C4C0                 mov     edi, edx
.text:0040C4C2                 mov     esi, eax
.text:0040C4C4                 call    _getpid
.text:0040C4C9                 mov     ebx, eax
.text:0040C4CB                 mov     edx, esi
.text:0040C4CD                 sar     ebx, 1Fh
.text:0040C4D0                 xor     edx, eax
.text:0040C4D2                 mov     ecx, edi
.text:0040C4D4                 xor     ecx, ebx
.text:0040C4D6                 mov     ebx, edx
.text:0040C4D8                 mov     esi, ecx
.text:0040C4DA                 add     ebx, ds:dword_411490
.text:0040C4E0                 adc     esi, ds:dword_411494
.text:0040C4E6                 xor     edi, edi
.text:0040C4E8                 mov     ds:dword_411490, ebx
.text:0040C4EE                 mov     ds:dword_411494, esi
.text:0040C4F4                 lea     esi, [esi+0]
.text:0040C4FA                 lea     edi, [edi+0]
.text:0040C500
.text:0040C500 loc_40C500:                             ; CODE XREF: sub_40C440+2C7↓j
.text:0040C500                 mov     [esp+9Ch+Str], ebx
.text:0040C503                 mov     [esp+9Ch+OpenFlag], esi
.text:0040C507                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040C50F                 mov     [esp+9Ch+var_90], 0
.text:0040C517                 call    sub_40E230
.text:0040C51C                 movzx   ecx, ds:byte_40C350[eax]
.text:0040C523                 mov     [ebp+0], cl
.text:0040C526                 mov     [esp+9Ch+Str], ebx
.text:0040C529                 mov     [esp+9Ch+OpenFlag], esi
.text:0040C52D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040C535                 mov     [esp+9Ch+var_90], 0
.text:0040C53D                 call    sub_40E110
.text:0040C542                 mov     [esp+9Ch+Str], eax
.text:0040C545                 mov     ebx, eax
.text:0040C547                 mov     esi, edx
.text:0040C549                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040C551                 mov     [esp+9Ch+var_90], 0
.text:0040C559                 mov     [esp+9Ch+OpenFlag], edx
.text:0040C55D                 call    sub_40E230
.text:0040C562                 movzx   edx, ds:byte_40C350[eax]
.text:0040C569                 mov     [ebp+1], dl
.text:0040C56C                 mov     [esp+9Ch+Str], ebx
.text:0040C56F                 mov     [esp+9Ch+OpenFlag], esi
.text:0040C573                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040C57B                 mov     [esp+9Ch+var_90], 0
.text:0040C583                 call    sub_40E110
.text:0040C588                 mov     [esp+9Ch+Str], eax
.text:0040C58B                 mov     ebx, eax
.text:0040C58D                 mov     esi, edx
.text:0040C58F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040C597                 mov     [esp+9Ch+var_90], 0
.text:0040C59F                 mov     [esp+9Ch+OpenFlag], edx
.text:0040C5A3                 call    sub_40E230
.text:0040C5A8                 movzx   ecx, ds:byte_40C350[eax]
.text:0040C5AF                 mov     [ebp+2], cl
.text:0040C5B2                 mov     [esp+9Ch+Str], ebx
.text:0040C5B5                 mov     [esp+9Ch+OpenFlag], esi
.text:0040C5B9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040C5C1                 mov     [esp+9Ch+var_90], 0
.text:0040C5C9                 call    sub_40E110
.text:0040C5CE                 mov     [esp+9Ch+Str], eax
.text:0040C5D1                 mov     ebx, eax
.text:0040C5D3                 mov     esi, edx
.text:0040C5D5                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040C5DD                 mov     [esp+9Ch+var_90], 0
.text:0040C5E5                 mov     [esp+9Ch+OpenFlag], edx
.text:0040C5E9                 call    sub_40E230
.text:0040C5EE                 movzx   edx, ds:byte_40C350[eax]
.text:0040C5F5                 mov     [ebp+3], dl
.text:0040C5F8                 mov     [esp+9Ch+Str], ebx
.text:0040C5FB                 mov     [esp+9Ch+OpenFlag], esi
.text:0040C5FF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040C607                 mov     [esp+9Ch+var_90], 0
.text:0040C60F                 call    sub_40E110
.text:0040C614                 mov     [esp+9Ch+Str], eax
.text:0040C617                 mov     ebx, eax
.text:0040C619                 mov     esi, edx
.text:0040C61B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040C623                 mov     [esp+9Ch+var_90], 0
.text:0040C62B                 mov     [esp+9Ch+OpenFlag], edx
.text:0040C62F                 call    sub_40E230
.text:0040C634                 movzx   ecx, ds:byte_40C350[eax]
.text:0040C63B                 mov     [ebp+4], cl
.text:0040C63E                 mov     [esp+9Ch+Str], ebx
.text:0040C641                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040C649                 mov     [esp+9Ch+var_90], 0
.text:0040C651                 mov     [esp+9Ch+OpenFlag], esi
.text:0040C655                 call    sub_40E110
.text:0040C65A                 mov     [esp+9Ch+Str], eax
.text:0040C65D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040C665                 mov     [esp+9Ch+var_90], 0
.text:0040C66D                 mov     [esp+9Ch+OpenFlag], edx
.text:0040C671                 call    sub_40E230
.text:0040C676                 movzx   ebx, ds:byte_40C350[eax]
.text:0040C67D                 mov     [ebp+5], bl
.text:0040C680                 cmp     [esp+9Ch+arg_4], 1
.text:0040C688                 jz      loc_40C7D7
.text:0040C68E                 cmp     [esp+9Ch+arg_4], 1
.text:0040C696                 jle     loc_40C7A0
.text:0040C69C                 cmp     [esp+9Ch+arg_4], 2
.text:0040C6A4                 jz      loc_40C777
.text:0040C6AA                 cmp     [esp+9Ch+arg_4], 3
.text:0040C6B2                 jz      loc_40C734
.text:0040C6B8
.text:0040C6B8 loc_40C6B8:                             ; CODE XREF: sub_40C440+369↓j
.text:0040C6B8                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0040C6BD                 test    ebx, ebx
.text:0040C6BF                 jnz     loc_40C83D
.text:0040C6C5
.text:0040C6C5 loc_40C6C5:                             ; CODE XREF: sub_40C440+354↓j
.text:0040C6C5                 mov     eax, [esp+9Ch+var_88]
.text:0040C6C9                 test    eax, eax
.text:0040C6CB                 jns     short loc_40C720
.text:0040C6CD                 call    _errno
.text:0040C6D2                 cmp     dword ptr [eax], 11h
.text:0040C6D5                 jnz     loc_40C498
.text:0040C6DB
.text:0040C6DB loc_40C6DB:                             ; CODE XREF: sub_40C440+315↓j
.text:0040C6DB                 mov     edx, ds:dword_411490
.text:0040C6E1                 mov     ecx, ds:dword_411494
.text:0040C6E7                 add     edx, 1E61h
.text:0040C6ED                 adc     ecx, 0
.text:0040C6F0                 mov     ebx, edx
.text:0040C6F2                 inc     edi
.text:0040C6F3                 mov     ds:dword_411490, edx
.text:0040C6F9                 cmp     edi, 3A2F8h
.text:0040C6FF                 mov     esi, ecx
.text:0040C701                 mov     ds:dword_411494, ecx
.text:0040C707                 jb      loc_40C500
.text:0040C70D                 call    _errno
.text:0040C712                 mov     dword ptr [eax], 11h
.text:0040C718                 jmp     loc_40C498
.text:0040C718 ; ---------------------------------------------------------------------------
.text:0040C71D                 align 10h
.text:0040C720
.text:0040C720 loc_40C720:                             ; CODE XREF: sub_40C440+28B↑j
.text:0040C720                 call    _errno
.text:0040C725                 mov     esi, [esp+9Ch+var_8C]
.text:0040C729                 mov     [eax], esi
.text:0040C72B                 mov     eax, [esp+9Ch+var_88]
.text:0040C72F                 jmp     loc_40C49D
.text:0040C734 ; ---------------------------------------------------------------------------
.text:0040C734
.text:0040C734 loc_40C734:                             ; CODE XREF: sub_40C440+272↑j
.text:0040C734                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0040C73B                 mov     ecx, [esp+9Ch+FileName]
.text:0040C742                 lea     esi, [esp+9Ch+var_7C]
.text:0040C746                 mov     [esp+9Ch+var_94], esi ; int
.text:0040C74A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0040C74E                 call    sub_407010
.text:0040C753                 test    eax, eax
.text:0040C755                 jns     short loc_40C6DB
.text:0040C757                 call    _errno
.text:0040C75C                 cmp     dword ptr [eax], 2
.text:0040C75F                 jnz     loc_40C498
.text:0040C765                 call    _errno
.text:0040C76A                 mov     ebx, [esp+9Ch+var_8C]
.text:0040C76E                 mov     [eax], ebx
.text:0040C770                 xor     eax, eax
.text:0040C772                 jmp     loc_40C49D
.text:0040C777 ; ---------------------------------------------------------------------------
.text:0040C777
.text:0040C777 loc_40C777:                             ; CODE XREF: sub_40C440+264↑j
.text:0040C777                 mov     [esp+9Ch+OpenFlag], 1C0h ; int
.text:0040C77F                 mov     edx, [esp+9Ch+FileName]
.text:0040C786                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0040C789                 call    sub_40C870
.text:0040C78E                 mov     esi, esi
.text:0040C790
.text:0040C790 loc_40C790:                             ; CODE XREF: sub_40C440+395↓j
.text:0040C790                 mov     [esp+9Ch+var_88], eax
.text:0040C794                 jmp     loc_40C6C5
.text:0040C794 ; ---------------------------------------------------------------------------
.text:0040C799                 align 10h
.text:0040C7A0
.text:0040C7A0 loc_40C7A0:                             ; CODE XREF: sub_40C440+256↑j
.text:0040C7A0                 mov     eax, [esp+9Ch+arg_4]
.text:0040C7A7                 test    eax, eax
.text:0040C7A9                 jnz     loc_40C6B8
.text:0040C7AF                 mov     [esp+9Ch+var_94], 180h
.text:0040C7B7                 mov     esi, [esp+9Ch+FileName]
.text:0040C7BE                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0040C7C6                 mov     [esp+9Ch+Str], esi ; FileName
.text:0040C7C9                 lea     esi, [esi+0]
.text:0040C7D0
.text:0040C7D0 loc_40C7D0:                             ; CODE XREF: sub_40C440+3B1↓j
.text:0040C7D0                 call    _open
.text:0040C7D5                 jmp     short loc_40C790
.text:0040C7D7 ; ---------------------------------------------------------------------------
.text:0040C7D7
.text:0040C7D7 loc_40C7D7:                             ; CODE XREF: sub_40C440+248↑j
.text:0040C7D7                 mov     [esp+9Ch+var_94], 180h
.text:0040C7DF                 mov     ebx, [esp+9Ch+FileName]
.text:0040C7E6                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0040C7EE                 mov     [esp+9Ch+Str], ebx
.text:0040C7F1                 jmp     short loc_40C7D0
.text:0040C7F3 ; ---------------------------------------------------------------------------
.text:0040C7F3
.text:0040C7F3 loc_40C7F3:                             ; CODE XREF: sub_40C440+78↑j
.text:0040C7F3                 mov     [esp+9Ch+OpenFlag], 0
.text:0040C7FB                 lea     ebx, [esp+9Ch+var_84]
.text:0040C7FF                 mov     [esp+9Ch+Str], ebx
.text:0040C802                 call    sub_40C8F0
.text:0040C807                 mov     edi, [esp+9Ch+var_80]
.text:0040C80B                 mov     edx, [esp+9Ch+var_84]
.text:0040C80F                 mov     ecx, edi
.text:0040C811                 mov     ebx, edi
.text:0040C813                 shl     ecx, 10h
.text:0040C816                 sar     ebx, 1Fh
.text:0040C819                 shld    ebx, edi, 10h
.text:0040C81D                 mov     esi, edx
.text:0040C81F                 mov     edi, edx
.text:0040C821                 mov     edx, ecx
.text:0040C823                 sar     edi, 1Fh
.text:0040C826                 xor     edx, esi
.text:0040C828                 mov     ds:dword_411490, edx
.text:0040C82E                 mov     esi, ebx
.text:0040C830                 xor     esi, edi
.text:0040C832                 mov     ds:dword_411494, esi
.text:0040C838                 jmp     loc_40C4BE
.text:0040C83D ; ---------------------------------------------------------------------------
.text:0040C83D
.text:0040C83D loc_40C83D:                             ; CODE XREF: sub_40C440+27F↑j
.text:0040C83D                 mov     [esp+9Ch+var_94], 151h
.text:0040C845                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0040C84D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0040C854                 call    _assert
.text:0040C854 sub_40C440      endp
.text:0040C854
.text:0040C854 ; ---------------------------------------------------------------------------
.text:0040C859                 db 17h dup(90h)
.text:0040C870
.text:0040C870 ; =============== S U B R O U T I N E =======================================
.text:0040C870
.text:0040C870
.text:0040C870 ; int __cdecl sub_40C870(LPCSTR, int)
.text:0040C870 sub_40C870      proc near               ; CODE XREF: sub_40C440+349↑p
.text:0040C870
.text:0040C870 lpPathName      = dword ptr -1Ch
.text:0040C870 lpSecurityAttributes= dword ptr -18h
.text:0040C870 var_8           = dword ptr -8
.text:0040C870 var_4           = dword ptr -4
.text:0040C870 arg_0           = dword ptr  4
.text:0040C870 arg_4           = dword ptr  8
.text:0040C870
.text:0040C870                 sub     esp, 1Ch
.text:0040C873                 mov     [esp+1Ch+var_8], ebx
.text:0040C877                 mov     ebx, [esp+1Ch+arg_0]
.text:0040C87B                 mov     [esp+1Ch+var_4], esi
.text:0040C87F                 mov     esi, [esp+1Ch+arg_4]
.text:0040C883                 test    ebx, ebx
.text:0040C885                 jz      short loc_40C8D5
.text:0040C887                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040C88F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:0040C892                 call    CreateDirectoryA
.text:0040C897                 sub     esp, 8
.text:0040C89A                 test    eax, eax
.text:0040C89C                 jz      short loc_40C8B6
.text:0040C89E                 mov     [esp+1Ch+arg_4], esi
.text:0040C8A2                 mov     esi, [esp+1Ch+var_4]
.text:0040C8A6                 mov     [esp+1Ch+arg_0], ebx
.text:0040C8AA                 mov     ebx, [esp+1Ch+var_8]
.text:0040C8AE                 add     esp, 1Ch
.text:0040C8B1                 jmp     _chmod
.text:0040C8B6 ; ---------------------------------------------------------------------------
.text:0040C8B6
.text:0040C8B6 loc_40C8B6:                             ; CODE XREF: sub_40C870+2C↑j
.text:0040C8B6                 call    sub_407B60
.text:0040C8BB                 mov     esi, eax
.text:0040C8BD                 call    _errno
.text:0040C8C2                 mov     [eax], esi
.text:0040C8C4
.text:0040C8C4 loc_40C8C4:                             ; CODE XREF: sub_40C870+70↓j
.text:0040C8C4                 mov     ebx, [esp+1Ch+var_8]
.text:0040C8C8                 mov     eax, 0FFFFFFFFh
.text:0040C8CD                 mov     esi, [esp+1Ch+var_4]
.text:0040C8D1                 add     esp, 1Ch
.text:0040C8D4                 retn
.text:0040C8D5 ; ---------------------------------------------------------------------------
.text:0040C8D5
.text:0040C8D5 loc_40C8D5:                             ; CODE XREF: sub_40C870+15↑j
.text:0040C8D5                 call    _errno
.text:0040C8DA                 mov     dword ptr [eax], 16h
.text:0040C8E0                 jmp     short loc_40C8C4
.text:0040C8E0 sub_40C870      endp
.text:0040C8E0
.text:0040C8E0 ; ---------------------------------------------------------------------------
.text:0040C8E2                 align 10h
.text:0040C8F0
.text:0040C8F0 ; =============== S U B R O U T I N E =======================================
.text:0040C8F0
.text:0040C8F0
.text:0040C8F0 sub_40C8F0      proc near               ; CODE XREF: sub_40C440+3C2↑p
.text:0040C8F0
.text:0040C8F0 var_1C          = dword ptr -1Ch
.text:0040C8F0 var_18          = dword ptr -18h
.text:0040C8F0 var_C           = dword ptr -0Ch
.text:0040C8F0 var_8           = dword ptr -8
.text:0040C8F0 var_4           = dword ptr -4
.text:0040C8F0 arg_0           = dword ptr  4
.text:0040C8F0 arg_4           = dword ptr  8
.text:0040C8F0
.text:0040C8F0                 sub     esp, 1Ch
.text:0040C8F3                 mov     edx, [esp+1Ch+arg_4]
.text:0040C8F7                 mov     [esp+1Ch+var_4], ebx
.text:0040C8FB                 mov     ebx, [esp+1Ch+arg_0]
.text:0040C8FF                 mov     [esp+1Ch+var_18], edx
.text:0040C903                 lea     edx, [esp+1Ch+var_C]
.text:0040C907                 mov     [esp+1Ch+var_1C], edx
.text:0040C90A                 call    sub_40C970
.text:0040C90F                 test    eax, eax
.text:0040C911                 mov     edx, 0FFFFFFFFh
.text:0040C916                 jnz     short loc_40C93A
.text:0040C918                 mov     ecx, [esp+1Ch+var_C]
.text:0040C91C                 mov     edx, 10624DD3h
.text:0040C921                 mov     [ebx], ecx
.text:0040C923                 mov     ecx, [esp+1Ch+var_8]
.text:0040C927                 mov     eax, ecx
.text:0040C929                 imul    edx
.text:0040C92B                 mov     eax, ecx
.text:0040C92D                 sar     eax, 1Fh
.text:0040C930                 sar     edx, 6
.text:0040C933                 sub     edx, eax
.text:0040C935                 mov     [ebx+4], edx
.text:0040C938                 xor     edx, edx
.text:0040C93A
.text:0040C93A loc_40C93A:                             ; CODE XREF: sub_40C8F0+26↑j
.text:0040C93A                 mov     ebx, [esp+1Ch+var_4]
.text:0040C93E                 mov     eax, edx
.text:0040C940                 add     esp, 1Ch
.text:0040C943                 retn
.text:0040C943 sub_40C8F0      endp
.text:0040C943
.text:0040C943 ; ---------------------------------------------------------------------------
.text:0040C944                 align 10h
.text:0040C950
.text:0040C950 ; =============== S U B R O U T I N E =======================================
.text:0040C950
.text:0040C950
.text:0040C950 sub_40C950      proc near               ; CODE XREF: sub_40C0C0+1A7↑p
.text:0040C950                                         ; sub_40C0C0+237↑p ...
.text:0040C950                 mov     edx, ds:dword_4114A0
.text:0040C956                 test    edx, edx
.text:0040C958                 jnz     short loc_40C960
.text:0040C95A                 jmp     getenv
.text:0040C95A ; ---------------------------------------------------------------------------
.text:0040C95F                 align 10h
.text:0040C960
.text:0040C960 loc_40C960:                             ; CODE XREF: sub_40C950+8↑j
.text:0040C960                 xor     eax, eax
.text:0040C962                 retn
.text:0040C962 sub_40C950      endp
.text:0040C962
.text:0040C962 ; ---------------------------------------------------------------------------
.text:0040C963                 align 10h
.text:0040C970
.text:0040C970 ; =============== S U B R O U T I N E =======================================
.text:0040C970
.text:0040C970
.text:0040C970 sub_40C970      proc near               ; CODE XREF: sub_40C8F0+1A↑p
.text:0040C970
.text:0040C970 lpTimeZoneInformation= dword ptr -0DCh
.text:0040C970 var_D8          = dword ptr -0D8h
.text:0040C970 var_D4          = dword ptr -0D4h
.text:0040C970 var_D0          = dword ptr -0D0h
.text:0040C970 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0040C970 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0040C970 arg_0           = dword ptr  4
.text:0040C970 arg_4           = dword ptr  8
.text:0040C970
.text:0040C970                 push    edi
.text:0040C971                 push    esi
.text:0040C972                 push    ebx
.text:0040C973                 sub     esp, 0D0h
.text:0040C979                 mov     ebx, [esp+0DCh+arg_4]
.text:0040C980                 mov     edi, [esp+0DCh+arg_0]
.text:0040C987                 test    ebx, ebx
.text:0040C989                 jz      short loc_40C9B4
.text:0040C98B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040C98F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0040C992                 call    GetTimeZoneInformation
.text:0040C997                 sub     esp, 4
.text:0040C99A                 cmp     eax, 0FFFFFFFFh
.text:0040C99D                 jz      loc_40CA35
.text:0040C9A3                 xor     ecx, ecx
.text:0040C9A5                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0040C9A9                 cmp     eax, 2
.text:0040C9AC                 setz    cl
.text:0040C9AF                 mov     [ebx], esi
.text:0040C9B1                 mov     [ebx+4], ecx
.text:0040C9B4
.text:0040C9B4 loc_40C9B4:                             ; CODE XREF: sub_40C970+19↑j
.text:0040C9B4                                         ; sub_40C970+E0↓j
.text:0040C9B4                 test    edi, edi
.text:0040C9B6                 jz      short loc_40CA29
.text:0040C9B8                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0040C9BC                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0040C9BF                 call    GetSystemTimeAsFileTime
.text:0040C9C4                 sub     esp, 4
.text:0040C9C7                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0040C9CB                 mov     [esp+0DCh+var_D4], 989680h
.text:0040C9D3                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0040C9D7                 mov     [esp+0DCh+var_D0], 0
.text:0040C9DF                 add     ebx, 2AC18000h
.text:0040C9E5                 adc     esi, 0FE624E21h
.text:0040C9EB                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0040C9EF                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040C9F2                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0040C9F6                 mov     [esp+0DCh+var_D8], esi
.text:0040C9FA                 call    sub_40E110
.text:0040C9FF                 mov     [edi], eax
.text:0040CA01                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040CA04                 mov     [esp+0DCh+var_D4], 989680h
.text:0040CA0C                 mov     [esp+0DCh+var_D0], 0
.text:0040CA14                 mov     [esp+0DCh+var_D8], esi
.text:0040CA18                 call    sub_40E230
.text:0040CA1D                 lea     ebx, [eax+eax*4]
.text:0040CA20                 lea     edx, [ebx+ebx*4]
.text:0040CA23                 shl     edx, 2
.text:0040CA26                 mov     [edi+4], edx
.text:0040CA29
.text:0040CA29 loc_40CA29:                             ; CODE XREF: sub_40C970+46↑j
.text:0040CA29                 add     esp, 0D0h
.text:0040CA2F                 xor     eax, eax
.text:0040CA31                 pop     ebx
.text:0040CA32                 pop     esi
.text:0040CA33                 pop     edi
.text:0040CA34                 retn
.text:0040CA35 ; ---------------------------------------------------------------------------
.text:0040CA35
.text:0040CA35 loc_40CA35:                             ; CODE XREF: sub_40C970+2D↑j
.text:0040CA35                 mov     dword ptr [ebx], 0
.text:0040CA3B                 mov     dword ptr [ebx+4], 0
.text:0040CA42                 call    sub_407B60
.text:0040CA47                 mov     esi, eax
.text:0040CA49                 call    _errno
.text:0040CA4E                 mov     [eax], esi
.text:0040CA50                 jmp     loc_40C9B4
.text:0040CA50 sub_40C970      endp
.text:0040CA50
.text:0040CA50 ; ---------------------------------------------------------------------------
.text:0040CA55                 align 10h
.text:0040CA60                 sub     esp, 0Ch
.text:0040CA63                 mov     [esp+4], ebx
.text:0040CA67                 mov     [esp+8], esi
.text:0040CA6B                 xor     esi, esi
.text:0040CA6D                 call    sub_40CAE0
.text:0040CA72                 mov     ebx, eax
.text:0040CA74                 call    sub_40CAD0
.text:0040CA79                 cmp     ebx, eax
.text:0040CA7B                 jz      short loc_40CA94
.text:0040CA7D
.text:0040CA7D loc_40CA7D:                             ; CODE XREF: .text:0040CAA2↓j
.text:0040CA7D                 mov     esi, 1
.text:0040CA82
.text:0040CA82 loc_40CA82:                             ; CODE XREF: .text:0040CAA4↓j
.text:0040CA82                 mov     ds:dword_4114A0, esi
.text:0040CA88                 mov     ebx, [esp+4]
.text:0040CA8C                 mov     esi, [esp+8]
.text:0040CA90                 add     esp, 0Ch
.text:0040CA93                 retn
.text:0040CA94 ; ---------------------------------------------------------------------------
.text:0040CA94
.text:0040CA94 loc_40CA94:                             ; CODE XREF: .text:0040CA7B↑j
.text:0040CA94                 call    sub_40CAC0
.text:0040CA99                 mov     ebx, eax
.text:0040CA9B                 call    sub_40CAB0
.text:0040CAA0                 cmp     ebx, eax
.text:0040CAA2                 jnz     short loc_40CA7D
.text:0040CAA4                 jmp     short loc_40CA82
.text:0040CAA4 ; ---------------------------------------------------------------------------
.text:0040CAA6                 align 10h
.text:0040CAB0
.text:0040CAB0 ; =============== S U B R O U T I N E =======================================
.text:0040CAB0
.text:0040CAB0
.text:0040CAB0 sub_40CAB0      proc near               ; CODE XREF: .text:0040CA9B↑p
.text:0040CAB0                 xor     eax, eax
.text:0040CAB2                 retn
.text:0040CAB2 sub_40CAB0      endp
.text:0040CAB2
.text:0040CAB2 ; ---------------------------------------------------------------------------
.text:0040CAB3                 align 10h
.text:0040CAC0
.text:0040CAC0 ; =============== S U B R O U T I N E =======================================
.text:0040CAC0
.text:0040CAC0
.text:0040CAC0 sub_40CAC0      proc near               ; CODE XREF: .text:loc_40CA94↑p
.text:0040CAC0                 xor     eax, eax
.text:0040CAC2                 retn
.text:0040CAC2 sub_40CAC0      endp
.text:0040CAC2
.text:0040CAC2 ; ---------------------------------------------------------------------------
.text:0040CAC3                 align 10h
.text:0040CAD0
.text:0040CAD0 ; =============== S U B R O U T I N E =======================================
.text:0040CAD0
.text:0040CAD0
.text:0040CAD0 sub_40CAD0      proc near               ; CODE XREF: .text:0040CA74↑p
.text:0040CAD0                 xor     eax, eax
.text:0040CAD2                 retn
.text:0040CAD2 sub_40CAD0      endp
.text:0040CAD2
.text:0040CAD2 ; ---------------------------------------------------------------------------
.text:0040CAD3                 align 10h
.text:0040CAE0
.text:0040CAE0 ; =============== S U B R O U T I N E =======================================
.text:0040CAE0
.text:0040CAE0
.text:0040CAE0 sub_40CAE0      proc near               ; CODE XREF: .text:0040CA6D↑p
.text:0040CAE0                 xor     eax, eax
.text:0040CAE2                 retn
.text:0040CAE2 sub_40CAE0      endp
.text:0040CAE2
.text:0040CAE2 ; ---------------------------------------------------------------------------
.text:0040CAE3                 align 10h
.text:0040CAF0
.text:0040CAF0 ; =============== S U B R O U T I N E =======================================
.text:0040CAF0
.text:0040CAF0 ; Attributes: thunk
.text:0040CAF0
.text:0040CAF0 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:0040CAF0 OleInitialize   proc near               ; CODE XREF: sub_406DB0+1A↑p
.text:0040CAF0
.text:0040CAF0 pvReserved      = dword ptr  4
.text:0040CAF0
.text:0040CAF0                 jmp     ds:__imp_OleInitialize
.text:0040CAF0 OleInitialize   endp
.text:0040CAF0
.text:0040CAF0 ; ---------------------------------------------------------------------------
.text:0040CAF6                 align 10h
.text:0040CB00
.text:0040CB00 ; =============== S U B R O U T I N E =======================================
.text:0040CB00
.text:0040CB00 ; Attributes: thunk
.text:0040CB00
.text:0040CB00 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:0040CB00 CoCreateInstance proc near              ; CODE XREF: sub_406DB0+52↑p
.text:0040CB00
.text:0040CB00 rclsid          = dword ptr  4
.text:0040CB00 pUnkOuter       = dword ptr  8
.text:0040CB00 dwClsContext    = dword ptr  0Ch
.text:0040CB00 riid            = dword ptr  10h
.text:0040CB00 ppv             = dword ptr  14h
.text:0040CB00
.text:0040CB00                 jmp     ds:__imp_CoCreateInstance
.text:0040CB00 CoCreateInstance endp
.text:0040CB00
.text:0040CB00 ; ---------------------------------------------------------------------------
.text:0040CB06                 align 10h
.text:0040CB10
.text:0040CB10 ; =============== S U B R O U T I N E =======================================
.text:0040CB10
.text:0040CB10 ; Attributes: thunk
.text:0040CB10
.text:0040CB10 ; void __stdcall CoUninitialize()
.text:0040CB10 CoUninitialize  proc near               ; CODE XREF: sub_406DB0+14E↑p
.text:0040CB10                                         ; sub_406DB0+16D↑p
.text:0040CB10                 jmp     ds:__imp_CoUninitialize
.text:0040CB10 CoUninitialize  endp
.text:0040CB10
.text:0040CB10 ; ---------------------------------------------------------------------------
.text:0040CB16                 align 10h
.text:0040CB20                 add     al, 0BAh ; 'º'
.text:0040CB22                 retf
.text:0040CB22 ; ---------------------------------------------------------------------------
.text:0040CB23                 db 7Eh
.text:0040CB24                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:0040CB24                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:0040CB24                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:0040CB24                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:0040CB24                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:0040CB24                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:0040CB24                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:0040CB24                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:0040CB24                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:0040CB24                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:0040CB24                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:0040CB24                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:0040CB24                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:0040CB24                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:0040CB24                 dd 0C4426C00h, 330h, 0
.text:0040CC58                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040CC58                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:0040CC58                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:0040CC58                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:0040CCA8                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040CCA8                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:0040CCA8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:0040CCA8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:0040CCA8                 dd 0BA94B00h, 1Bh, 0
.text:0040CD08                 dd 0C0h, 46000000h, 1Ch, 0
.text:0040CD18                 dd 0C0h, 46000000h, 331h, 0
.text:0040CD28                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040CD28                 dd 312h, 0
.text:0040CD48                 dd 0C0h, 46000000h, 30Eh, 0
.text:0040CD58                 dd 0C0h, 46000000h, 30Dh, 0
.text:0040CD68                 dd 0C0h, 46000000h, 311h, 0
.text:0040CD78                 dd 0C0h, 46000000h, 313h, 0
.text:0040CD88                 dd 0C0h, 46000000h, 30Ch, 0
.text:0040CD98                 dd 0C0h, 46000000h, 30Fh, 0
.text:0040CDA8                 dd 0C0h, 46000000h, 310h, 0
.text:0040CDB8                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040CDB8                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:0040CDE8                 dd 0C0h, 46000000h, 319h, 0
.text:0040CDF8                 dd 0C0h, 46000000h, 315h, 0
.text:0040CE08                 dd 0C0h, 46000000h, 316h, 0
.text:0040CE18                 dd 0C0h, 46000000h, 315h, 0
.text:0040CE28                 dd 0C0h, 46000000h, 2E005h, 0
.text:0040CE38                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040CE38                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0040CE38                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0040CE78                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040CE78                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0040CE78                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0040CE78                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0040CE78                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0040CE78                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0040CE78                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0040CE78                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0040CE78                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0040CE78                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0040CE78                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0040CE78                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040CE78                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0040CE78                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0040CE78                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0040CE78                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040CE78                 dd 2DE81h, 0
.text:0040CFC8                 dd 0C0h, 46000000h, 4 dup(0)
.text:0040CFE0                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0040CFE0                 dd 0
.text:0040CFF8                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040CFF8                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0040CFF8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0040CFF8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0040CFF8                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040CFF8                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0040CFF8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0040CFF8                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0040CFF8                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0040CFF8                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0040CFF8                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0040CFF8                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0040CFF8                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0040CFF8                 dd 10Fh, 0
.text:0040D108                 dd 0C0h, 46000000h, 125h, 0
.text:0040D118                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040D118                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0040D118                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0040D158                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0040D158                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040D158                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0040D158                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0040D158                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0040D1B8                 dd 0C0h, 46000000h, 2E012h, 0
.text:0040D1C8                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0040D1C8                 dd 140h, 0
.text:0040D1E8                 dd 0C0h, 46000000h, 1, 0
.text:0040D1F8                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:0040D1F8                 dd 71D3400h, 13Dh, 0
.text:0040D218                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040D218                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:0040D218                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:0040D218                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:0040D268                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:0040D268                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040D268                 dd 20405h, 0
.text:0040D298                 dd 0C0h, 46000000h, 2040Eh, 0
.text:0040D2A8                 dd 0C0h, 46000000h, 20406h, 0
.text:0040D2B8                 dd 0C0h, 46000000h, 2040Fh, 0
.text:0040D2C8                 dd 0C0h, 46000000h, 110h, 0
.text:0040D2D8                 dd 0C0h, 46000000h, 10Eh, 0
.text:0040D2E8                 dd 0C0h, 46000000h, 123h, 0
.text:0040D2F8                 dd 0C0h, 46000000h, 124h, 0
.text:0040D308                 dd 0C0h, 46000000h, 13h, 0
.text:0040D318                 dd 0C0h, 46000000h, 14h, 0
.text:0040D328                 dd 0C0h, 46000000h, 15h, 0
.text:0040D338                 dd 0C0h, 46000000h, 20400h, 0
.text:0040D348                 dd 0C0h, 46000000h, 121h, 0
.text:0040D358                 dd 0C0h, 46000000h, 122h, 0
.text:0040D368                 dd 0C0h, 46000000h, 2E011h, 0
.text:0040D378                 dd 0C0h, 46000000h, 108h, 0
.text:0040D388                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:0040D388                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040D388                 dd 103h, 0
.text:0040D3B8                 dd 0C0h, 46000000h, 2E000h, 0
.text:0040D3C8                 dd 0C0h, 46000000h, 106h, 0
.text:0040D3D8                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040D3D8                 dd 107h, 0
.text:0040D3F8                 dd 0C0h, 46000000h, 102h, 0
.text:0040D408                 dd 0C0h, 46000000h, 104h, 0
.text:0040D418                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:0040D418                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:0040D418                 dd 105h, 0
.text:0040D448                 dd 0C0h, 46000000h, 13Bh, 0
.text:0040D458                 dd 0C0h, 46000000h, 139h, 0
.text:0040D468                 dd 0C0h, 46000000h, 0Dh, 0
.text:0040D478                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040D478                 dd 101h, 0
.text:0040D498                 dd 0C0h, 46000000h, 100h, 0
.text:0040D4A8                 dd 0C0h, 46000000h, 20404h, 0
.text:0040D4B8                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040D4B8                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:0040D4E8                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:0040D4E8                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:0040D4E8                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:0040D4E8                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:0040D538                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040D538                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:0040D538                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:0040D538                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:0040D538                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040D538                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:0040D5B8                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:0040D5B8                 dd 0Ah, 0
.text:0040D5D8                 dd 0C0h, 46000000h, 2, 0
.text:0040D5E8                 dd 0C0h, 46000000h, 1Dh, 0
.text:0040D5F8                 dd 0C0h, 46000000h, 3, 0
.text:0040D608                 dd 0C0h, 46000000h, 16h, 0
.text:0040D618                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:0040D618                 dd 1608D74Fh, 0Fh, 0
.text:0040D638                 dd 0C0h, 46000000h, 20h, 0
.text:0040D648                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:0040D648                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:0040D648                 dd 0
.text:0040D678                 dd 0C0h, 46000000h, 11Eh, 0
.text:0040D688                 dd 0C0h, 46000000h, 128h, 0
.text:0040D698                 dd 0C0h, 46000000h, 129h, 0
.text:0040D6A8                 dd 0C0h, 46000000h, 118h, 0
.text:0040D6B8                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:0040D6B8                 dd 70474000h, 11Bh, 0
.text:0040D6D8                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:0040D6D8                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040D6D8                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:0040D6D8                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:0040D6D8                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:0040D738                 dd 0C0h, 46000000h, 116h, 0
.text:0040D748                 dd 0C0h, 46000000h, 113h, 0
.text:0040D758                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:0040D758                 dd 119h, 0
.text:0040D778                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:0040D778                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:0040D778                 dd 0
.text:0040D7A8                 dd 0C0h, 46000000h, 11Ch, 0
.text:0040D7B8                 dd 0C0h, 46000000h, 11Dh, 0
.text:0040D7C8                 dd 0C0h, 46000000h, 11Fh, 0
.text:0040D7D8                 dd 0C0h, 46000000h, 112h, 0
.text:0040D7E8                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:0040D7E8                 dd 18E6000h, 120h, 0
.text:0040D808                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:0040D808                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:0040D808                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:0040D848                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:0040D848                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:0040D878                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040D878                 dd 11Ah, 0
.text:0040D898                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:0040D898                 dd 10Ch, 0
.text:0040D8B8                 dd 0C0h, 46000000h
.text:0040D8C0 dword_40D8C0    dd 10Bh, 0              ; DATA XREF: sub_406DB0+75↑o
.text:0040D8C8                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:0040D8C8                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:0040D8C8                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:0040D8C8                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:0040D918                 dd 0C0h, 46000000h, 109h, 0
.text:0040D928                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:0040D928                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:0040D928                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:0040D928                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:0040D928                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:0040D928                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:0040D928                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:0040D928                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:0040D928                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040D928                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:0040D928                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:0040DA08                 dd 0C0h, 46000000h, 138h, 0
.text:0040DA18                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:0040DA18                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:0040DA18                 dd 27h, 0
.text:0040DA48                 dd 0C0h, 46000000h, 8, 0
.text:0040DA58                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:0040DA58                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:0040DA58                 dd 20D00h, 0
.text:0040DA88                 dd 0C0h, 46000000h, 20D03h, 0
.text:0040DA98                 dd 0C0h, 46000000h, 12h, 0
.text:0040DAA8                 dd 0C0h, 46000000h, 4, 0
.text:0040DAB8                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040DAB8                 dd 7, 0
.text:0040DAD8                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040DAD8                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:0040DB08                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040DB08                 dd 126h, 0
.text:0040DB28                 dd 0C0h, 46000000h, 10h, 0
.text:0040DB38                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:0040DB38                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:0040DB68                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:0040DB68                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:0040DB68                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:0040DBA8                 dd 0C0h, 46000000h, 0Bh, 0
.text:0040DBB8                 dd 0C0h, 46000000h, 0Ch, 0
.text:0040DBC8                 dd 0C0h, 46000000h, 26h, 0
.text:0040DBD8                 dd 0C0h, 46000000h, 6, 0
.text:0040DBE8                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:0040DBE8                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:0040DBE8                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:0040DC28                 dd 0C0h, 46000000h, 20403h, 0
.text:0040DC38                 dd 0C0h, 46000000h, 20401h, 0
.text:0040DC48                 dd 0C0h, 46000000h, 20412h, 0
.text:0040DC58                 dd 0C0h, 46000000h, 20402h, 0
.text:0040DC68                 dd 0C0h, 46000000h, 20411h, 0
.text:0040DC78                 dd 0C0h, 46000000h, 2 dup(0)
.text:0040DC88                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040DC88                 dd 10Dh, 0
.text:0040DCA8                 dd 0C0h, 46000000h, 127h, 0
.text:0040DCB8                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040DCB8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:0040DCB8                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:0040DCF8                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:0040DCF8                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:0040DCF8                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:0040DD38                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:0040DD48                 dd 0C0h, 46000000h, 2DE18h, 0
.text:0040DD58                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:0040DD68                 dd 0C0h, 46000000h, 2DE19h, 0
.text:0040DD78                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:0040DD88                 dd 0C0h, 46000000h, 2DE12h, 0
.text:0040DD98                 dd 0C0h, 46000000h, 2DE21h, 0
.text:0040DDA8                 dd 0C0h, 46000000h, 2DE01h, 0
.text:0040DDB8                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:0040DDC8                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:0040DDD8                 dd 0C0h, 46000000h, 2DE02h, 0
.text:0040DDE8                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:0040DDF8                 dd 0C0h, 46000000h, 2DE04h, 0
.text:0040DE08                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:0040DE18                 dd 0C0h, 46000000h, 2DE05h, 0
.text:0040DE28                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:0040DE38                 dd 0C0h, 46000000h, 2DE06h, 0
.text:0040DE48                 dd 0C0h, 46000000h, 2DE13h, 0
.text:0040DE58                 dd 0C0h, 46000000h, 2DE10h, 0
.text:0040DE68                 dd 0C0h, 46000000h, 2DE22h, 0
.text:0040DE78                 dd 0C0h, 46000000h, 2DE09h, 0
.text:0040DE88                 dd 0C0h, 46000000h, 2DE23h, 0
.text:0040DE98                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:0040DEA8                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:0040DEB8                 dd 0C0h, 46000000h, 2DE11h, 0
.text:0040DEC8                 dd 0C0h, 46000000h, 2DE15h, 0
.text:0040DED8                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:0040DEE8                 dd 0C0h, 46000000h, 2DE16h, 0
.text:0040DEF8                 dd 0C0h, 46000000h, 2DE20h, 0
.text:0040DF08                 dd 0C0h, 46000000h, 2DE07h, 0
.text:0040DF18                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:0040DF28                 dd 0C0h, 46000000h, 2DE17h, 0
.text:0040DF38                 dd 0C0h, 46000000h, 2DE14h, 0
.text:0040DF48                 dd 0C0h, 46000000h, 2DE03h, 0
.text:0040DF58                 dd 0C0h, 46000000h, 2DE08h, 0
.text:0040DF68                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:0040DF68                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:0040DF90
.text:0040DF90 ; =============== S U B R O U T I N E =======================================
.text:0040DF90
.text:0040DF90 ; Attributes: thunk
.text:0040DF90
.text:0040DF90 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0040DF90 mbrtowc         proc near               ; CODE XREF: sub_4052E0+757↑p
.text:0040DF90
.text:0040DF90 DstCh           = dword ptr  4
.text:0040DF90 SrcCh           = dword ptr  8
.text:0040DF90 SizeInBytes     = dword ptr  0Ch
.text:0040DF90 State           = dword ptr  10h
.text:0040DF90
.text:0040DF90                 jmp     ds:__imp_mbrtowc
.text:0040DF90 mbrtowc         endp
.text:0040DF90
.text:0040DF90 ; ---------------------------------------------------------------------------
.text:0040DF96                 align 10h
.text:0040DFA0
.text:0040DFA0 ; =============== S U B R O U T I N E =======================================
.text:0040DFA0
.text:0040DFA0 ; Attributes: bp-based frame
.text:0040DFA0
.text:0040DFA0 sub_40DFA0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0040DFA0                 push    ebp
.text:0040DFA1                 mov     ecx, offset dword_411000
.text:0040DFA6                 cmp     ecx, offset dword_411000
.text:0040DFAC                 mov     ebp, esp
.text:0040DFAE                 jnb     short loc_40DFC6
.text:0040DFB0
.text:0040DFB0 loc_40DFB0:                             ; CODE XREF: sub_40DFA0+24↓j
.text:0040DFB0                 mov     edx, [ecx+4]
.text:0040DFB3                 mov     eax, [ecx]
.text:0040DFB5                 add     ecx, 8
.text:0040DFB8                 add     [edx+400000h], eax
.text:0040DFBE                 cmp     ecx, offset dword_411000
.text:0040DFC4                 jb      short loc_40DFB0
.text:0040DFC6
.text:0040DFC6 loc_40DFC6:                             ; CODE XREF: sub_40DFA0+E↑j
.text:0040DFC6                 pop     ebp
.text:0040DFC7                 retn
.text:0040DFC7 sub_40DFA0      endp
.text:0040DFC7
.text:0040DFC7 ; ---------------------------------------------------------------------------
.text:0040DFC8                 align 10h
.text:0040DFD0
.text:0040DFD0 ; =============== S U B R O U T I N E =======================================
.text:0040DFD0
.text:0040DFD0 ; Attributes: bp-based frame
.text:0040DFD0
.text:0040DFD0 sub_40DFD0      proc near               ; CODE XREF: sub_401080+16↑p
.text:0040DFD0                                         ; TopLevelExceptionFilter+D7↑p
.text:0040DFD0                 push    ebp
.text:0040DFD1                 mov     ebp, esp
.text:0040DFD3                 fninit
.text:0040DFD5                 pop     ebp
.text:0040DFD6                 retn
.text:0040DFD6 sub_40DFD0      endp
.text:0040DFD6
.text:0040DFD6 ; ---------------------------------------------------------------------------
.text:0040DFD7                 align 10h
.text:0040DFE0
.text:0040DFE0 ; =============== S U B R O U T I N E =======================================
.text:0040DFE0
.text:0040DFE0 ; Attributes: bp-based frame
.text:0040DFE0
.text:0040DFE0 ; void __cdecl sub_40DFE0()
.text:0040DFE0 sub_40DFE0      proc near               ; DATA XREF: .text:loc_40E029↓o
.text:0040DFE0                                         ; sub_40E070:loc_40E09E↓o
.text:0040DFE0                 push    ebp
.text:0040DFE1                 mov     ebp, esp
.text:0040DFE3                 sub     esp, 8
.text:0040DFE6                 mov     eax, off_4100C4
.text:0040DFEB                 mov     edx, [eax]
.text:0040DFED                 test    edx, edx
.text:0040DFEF                 jnz     short loc_40DFF5
.text:0040DFF1
.text:0040DFF1 loc_40DFF1:                             ; CODE XREF: sub_40DFE0+2C↓j
.text:0040DFF1                 mov     esp, ebp
.text:0040DFF3                 pop     ebp
.text:0040DFF4                 retn
.text:0040DFF5 ; ---------------------------------------------------------------------------
.text:0040DFF5
.text:0040DFF5 loc_40DFF5:                             ; CODE XREF: sub_40DFE0+F↑j
.text:0040DFF5                                         ; sub_40DFE0+2A↓j
.text:0040DFF5                 call    dword ptr [eax]
.text:0040DFF7                 mov     edx, off_4100C4
.text:0040DFFD                 mov     ecx, [edx+4]
.text:0040E000                 lea     eax, [edx+4]
.text:0040E003                 mov     off_4100C4, eax
.text:0040E008                 test    ecx, ecx
.text:0040E00A                 jnz     short loc_40DFF5
.text:0040E00C                 jmp     short loc_40DFF1
.text:0040E00C sub_40DFE0      endp
.text:0040E00C
.text:0040E00C ; ---------------------------------------------------------------------------
.text:0040E00E                 align 10h
.text:0040E010                 push    ebp
.text:0040E011                 mov     ebp, esp
.text:0040E013                 sub     esp, 8
.text:0040E016                 mov     [ebp-4], ebx
.text:0040E019                 mov     eax, ds:dword_40F200
.text:0040E01E                 cmp     eax, 0FFFFFFFFh
.text:0040E021                 jz      short loc_40E04C
.text:0040E023
.text:0040E023 loc_40E023:                             ; CODE XREF: .text:0040E056↓j
.text:0040E023                                         ; .text:0040E069↓j
.text:0040E023                 test    eax, eax
.text:0040E025                 mov     ebx, eax
.text:0040E027                 jnz     short loc_40E040
.text:0040E029
.text:0040E029 loc_40E029:                             ; CODE XREF: .text:0040E04A↓j
.text:0040E029                 mov     dword ptr [esp], offset sub_40DFE0
.text:0040E030                 call    sub_401040
.text:0040E035                 mov     ebx, [ebp-4]
.text:0040E038                 mov     esp, ebp
.text:0040E03A                 pop     ebp
.text:0040E03B                 retn
.text:0040E03B ; ---------------------------------------------------------------------------
.text:0040E03C                 align 10h
.text:0040E040
.text:0040E040 loc_40E040:                             ; CODE XREF: .text:0040E027↑j
.text:0040E040                                         ; .text:0040E048↓j
.text:0040E040                 call    ds:dword_40F200[ebx*4]
.text:0040E047                 dec     ebx
.text:0040E048                 jnz     short loc_40E040
.text:0040E04A                 jmp     short loc_40E029
.text:0040E04C ; ---------------------------------------------------------------------------
.text:0040E04C
.text:0040E04C loc_40E04C:                             ; CODE XREF: .text:0040E021↑j
.text:0040E04C                 mov     ecx, ds:dword_40F204
.text:0040E052                 xor     eax, eax
.text:0040E054                 test    ecx, ecx
.text:0040E056                 jz      short loc_40E023
.text:0040E058                 mov     edx, offset dword_40F200
.text:0040E05D                 lea     esi, [esi+0]
.text:0040E060
.text:0040E060 loc_40E060:                             ; CODE XREF: .text:0040E067↓j
.text:0040E060                 inc     eax
.text:0040E061                 mov     ecx, [edx+eax*4+4]
.text:0040E065                 test    ecx, ecx
.text:0040E067                 jnz     short loc_40E060
.text:0040E069                 jmp     short loc_40E023
.text:0040E069 ; ---------------------------------------------------------------------------
.text:0040E06B                 align 10h
.text:0040E070
.text:0040E070 ; =============== S U B R O U T I N E =======================================
.text:0040E070
.text:0040E070 ; Attributes: bp-based frame
.text:0040E070
.text:0040E070 sub_40E070      proc near               ; CODE XREF: sub_4018C0+19↑p
.text:0040E070
.text:0040E070 var_8           = dword ptr -8
.text:0040E070 var_4           = dword ptr -4
.text:0040E070
.text:0040E070                 push    ebp
.text:0040E071                 mov     ebp, esp
.text:0040E073                 sub     esp, 8
.text:0040E076                 mov     [ebp+var_4], ebx
.text:0040E079                 mov     edx, dword_4100C0
.text:0040E07F                 test    edx, edx
.text:0040E081                 jnz     short loc_40E0AA
.text:0040E083                 mov     eax, ds:dword_40F200
.text:0040E088                 mov     edx, 1
.text:0040E08D                 mov     dword_4100C0, edx
.text:0040E093                 cmp     eax, 0FFFFFFFFh
.text:0040E096                 jz      short loc_40E0BD
.text:0040E098
.text:0040E098 loc_40E098:                             ; CODE XREF: sub_40E070+57↓j
.text:0040E098                                         ; sub_40E070+69↓j
.text:0040E098                 test    eax, eax
.text:0040E09A                 mov     ebx, eax
.text:0040E09C                 jnz     short loc_40E0B1
.text:0040E09E
.text:0040E09E loc_40E09E:                             ; CODE XREF: sub_40E070+4B↓j
.text:0040E09E                 mov     [esp+8+var_8], offset sub_40DFE0 ; void (__cdecl *)()
.text:0040E0A5                 call    sub_401040
.text:0040E0AA
.text:0040E0AA loc_40E0AA:                             ; CODE XREF: sub_40E070+11↑j
.text:0040E0AA                 mov     ebx, [ebp+var_4]
.text:0040E0AD                 mov     esp, ebp
.text:0040E0AF                 pop     ebp
.text:0040E0B0                 retn
.text:0040E0B1 ; ---------------------------------------------------------------------------
.text:0040E0B1
.text:0040E0B1 loc_40E0B1:                             ; CODE XREF: sub_40E070+2C↑j
.text:0040E0B1                                         ; sub_40E070+49↓j
.text:0040E0B1                 call    ds:dword_40F200[ebx*4]
.text:0040E0B8                 dec     ebx
.text:0040E0B9                 jnz     short loc_40E0B1
.text:0040E0BB                 jmp     short loc_40E09E
.text:0040E0BD ; ---------------------------------------------------------------------------
.text:0040E0BD
.text:0040E0BD loc_40E0BD:                             ; CODE XREF: sub_40E070+26↑j
.text:0040E0BD                 mov     ecx, ds:dword_40F204
.text:0040E0C3                 xor     eax, eax
.text:0040E0C5                 test    ecx, ecx
.text:0040E0C7                 jz      short loc_40E098
.text:0040E0C9                 mov     edx, offset dword_40F200
.text:0040E0CE                 mov     esi, esi
.text:0040E0D0
.text:0040E0D0 loc_40E0D0:                             ; CODE XREF: sub_40E070+67↓j
.text:0040E0D0                 inc     eax
.text:0040E0D1                 mov     ebx, [edx+eax*4+4]
.text:0040E0D5                 test    ebx, ebx
.text:0040E0D7                 jnz     short loc_40E0D0
.text:0040E0D9                 jmp     short loc_40E098
.text:0040E0D9 sub_40E070      endp
.text:0040E0D9
.text:0040E0D9 ; ---------------------------------------------------------------------------
.text:0040E0DB                 align 10h
.text:0040E0E0
.text:0040E0E0 ; =============== S U B R O U T I N E =======================================
.text:0040E0E0
.text:0040E0E0 ; Attributes: info_from_lumina
.text:0040E0E0
.text:0040E0E0 ; void *__cdecl _alloca(size_t Size)
.text:0040E0E0 __alloca        proc near               ; CODE XREF: sub_4018C0+14↑p
.text:0040E0E0                 push    ecx
.text:0040E0E1                 mov     ecx, esp
.text:0040E0E3                 add     ecx, 8
.text:0040E0E6
.text:0040E0E6 loc_40E0E6:                             ; CODE XREF: __alloca+1B↓j
.text:0040E0E6                 cmp     eax, 1000h
.text:0040E0EB                 jb      short loc_40E0FD
.text:0040E0ED                 sub     ecx, 1000h
.text:0040E0F3                 or      dword ptr [ecx], 0
.text:0040E0F6                 sub     eax, 1000h
.text:0040E0FB                 jmp     short loc_40E0E6
.text:0040E0FD ; ---------------------------------------------------------------------------
.text:0040E0FD
.text:0040E0FD loc_40E0FD:                             ; CODE XREF: __alloca+B↑j
.text:0040E0FD                 sub     ecx, eax
.text:0040E0FF                 or      dword ptr [ecx], 0
.text:0040E102                 mov     eax, esp
.text:0040E104                 mov     esp, ecx
.text:0040E106                 mov     ecx, [eax]
.text:0040E108                 mov     eax, [eax+4]
.text:0040E10B                 jmp     eax
.text:0040E10B __alloca        endp
.text:0040E10B
.text:0040E10B ; ---------------------------------------------------------------------------
.text:0040E10D                 align 10h
.text:0040E110
.text:0040E110 ; =============== S U B R O U T I N E =======================================
.text:0040E110
.text:0040E110 ; Attributes: bp-based frame
.text:0040E110
.text:0040E110 sub_40E110      proc near               ; CODE XREF: sub_4037D0+2BE↑p
.text:0040E110                                         ; sub_4037D0+36A↑p ...
.text:0040E110
.text:0040E110 var_24          = dword ptr -24h
.text:0040E110 var_20          = dword ptr -20h
.text:0040E110 var_1C          = dword ptr -1Ch
.text:0040E110 var_18          = dword ptr -18h
.text:0040E110 var_14          = dword ptr -14h
.text:0040E110 var_C           = dword ptr -0Ch
.text:0040E110 var_8           = dword ptr -8
.text:0040E110 var_4           = dword ptr -4
.text:0040E110 arg_0           = dword ptr  8
.text:0040E110 arg_4           = dword ptr  0Ch
.text:0040E110 arg_8           = dword ptr  10h
.text:0040E110 arg_C           = dword ptr  14h
.text:0040E110
.text:0040E110                 push    ebp
.text:0040E111                 mov     ebp, esp
.text:0040E113                 sub     esp, 28h
.text:0040E116                 mov     [ebp+var_C], ebx
.text:0040E119                 mov     edx, [ebp+arg_C]
.text:0040E11C                 mov     ecx, [ebp+arg_0]
.text:0040E11F                 mov     [ebp+var_8], esi
.text:0040E122                 mov     eax, [ebp+arg_8]
.text:0040E125                 test    edx, edx
.text:0040E127                 mov     [ebp+var_4], edi
.text:0040E12A                 mov     ebx, [ebp+arg_4]
.text:0040E12D                 mov     esi, eax
.text:0040E12F                 mov     [ebp+var_18], 0
.text:0040E136                 mov     [ebp+var_14], 0
.text:0040E13D                 mov     [ebp+var_1C], ecx
.text:0040E140                 jnz     short loc_40E192
.text:0040E142                 cmp     eax, ebx
.text:0040E144                 jbe     short loc_40E170
.text:0040E146                 mov     eax, ecx
.text:0040E148                 mov     edx, ebx
.text:0040E14A                 div     esi
.text:0040E14C                 mov     edi, eax
.text:0040E14E                 mov     esi, esi
.text:0040E150
.text:0040E150 loc_40E150:                             ; CODE XREF: sub_40E110+88↓j
.text:0040E150                                         ; sub_40E110+A4↓j ...
.text:0040E150                 xor     ecx, ecx
.text:0040E152
.text:0040E152 loc_40E152:                             ; CODE XREF: sub_40E110+80↓j
.text:0040E152                 mov     [ebp+var_18], edi
.text:0040E155                 mov     ebx, [ebp+var_C]
.text:0040E158                 mov     eax, [ebp+var_18]
.text:0040E15B                 mov     [ebp+var_14], ecx
.text:0040E15E                 mov     esi, [ebp+var_8]
.text:0040E161                 mov     edx, [ebp+var_14]
.text:0040E164                 mov     edi, [ebp+var_4]
.text:0040E167                 mov     esp, ebp
.text:0040E169                 pop     ebp
.text:0040E16A                 retn
.text:0040E16A ; ---------------------------------------------------------------------------
.text:0040E16B                 align 10h
.text:0040E170
.text:0040E170 loc_40E170:                             ; CODE XREF: sub_40E110+34↑j
.text:0040E170                 test    eax, eax
.text:0040E172                 jnz     short loc_40E181
.text:0040E174                 mov     eax, 1
.text:0040E179                 xor     ecx, ecx
.text:0040E17B                 xor     edx, edx
.text:0040E17D                 div     ecx
.text:0040E17F                 mov     esi, eax
.text:0040E181
.text:0040E181 loc_40E181:                             ; CODE XREF: sub_40E110+62↑j
.text:0040E181                 mov     eax, ebx
.text:0040E183                 xor     edx, edx
.text:0040E185                 div     esi
.text:0040E187                 mov     ecx, eax
.text:0040E189                 mov     eax, [ebp+var_1C]
.text:0040E18C                 div     esi
.text:0040E18E                 mov     edi, eax
.text:0040E190                 jmp     short loc_40E152
.text:0040E192 ; ---------------------------------------------------------------------------
.text:0040E192
.text:0040E192 loc_40E192:                             ; CODE XREF: sub_40E110+30↑j
.text:0040E192                 cmp     edx, ebx
.text:0040E194                 jbe     short loc_40E1A0
.text:0040E196                 xor     edi, edi
.text:0040E198                 jmp     short loc_40E150
.text:0040E198 ; ---------------------------------------------------------------------------
.text:0040E19A                 align 10h
.text:0040E1A0
.text:0040E1A0 loc_40E1A0:                             ; CODE XREF: sub_40E110+84↑j
.text:0040E1A0                 bsr     eax, edx
.text:0040E1A3                 xor     eax, 1Fh
.text:0040E1A6                 mov     [ebp+var_20], eax
.text:0040E1A9                 jnz     short loc_40E1C0
.text:0040E1AB                 cmp     ebx, edx
.text:0040E1AD                 ja      short loc_40E1B6
.text:0040E1AF                 xor     edi, edi
.text:0040E1B1                 cmp     [ebp+var_1C], esi
.text:0040E1B4                 jb      short loc_40E150
.text:0040E1B6
.text:0040E1B6 loc_40E1B6:                             ; CODE XREF: sub_40E110+9D↑j
.text:0040E1B6                 mov     edi, 1
.text:0040E1BB                 jmp     short loc_40E150
.text:0040E1BB ; ---------------------------------------------------------------------------
.text:0040E1BD                 align 10h
.text:0040E1C0
.text:0040E1C0 loc_40E1C0:                             ; CODE XREF: sub_40E110+99↑j
.text:0040E1C0                 mov     eax, [ebp+var_20]
.text:0040E1C3                 mov     ecx, 20h ; ' '
.text:0040E1C8                 sub     ecx, eax
.text:0040E1CA                 mov     [ebp+var_24], ecx
.text:0040E1CD                 mov     eax, esi
.text:0040E1CF                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040E1D3                 shl     edx, cl
.text:0040E1D5                 mov     edi, edx
.text:0040E1D7                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040E1DB                 mov     edx, ebx
.text:0040E1DD                 shr     eax, cl
.text:0040E1DF                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040E1E3                 or      edi, eax
.text:0040E1E5                 mov     eax, [ebp+var_1C]
.text:0040E1E8                 shl     esi, cl
.text:0040E1EA                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040E1EE                 shr     edx, cl
.text:0040E1F0                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040E1F4                 shl     ebx, cl
.text:0040E1F6                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040E1FA                 shr     eax, cl
.text:0040E1FC                 or      ebx, eax
.text:0040E1FE                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040E202                 mov     eax, ebx
.text:0040E204                 div     edi
.text:0040E206                 mov     ebx, edx
.text:0040E208                 mov     edi, eax
.text:0040E20A                 shl     [ebp+var_1C], cl
.text:0040E20D                 mul     esi
.text:0040E20F                 cmp     edx, ebx
.text:0040E211                 ja      short loc_40E224
.text:0040E213                 cmp     edx, ebx
.text:0040E215                 jnz     loc_40E150
.text:0040E21B                 cmp     eax, [ebp+var_1C]
.text:0040E21E                 jbe     loc_40E150
.text:0040E224
.text:0040E224 loc_40E224:                             ; CODE XREF: sub_40E110+101↑j
.text:0040E224                 dec     edi
.text:0040E225                 jmp     loc_40E150
.text:0040E225 sub_40E110      endp
.text:0040E225
.text:0040E225 ; ---------------------------------------------------------------------------
.text:0040E22A                 align 10h
.text:0040E230
.text:0040E230 ; =============== S U B R O U T I N E =======================================
.text:0040E230
.text:0040E230 ; Attributes: bp-based frame
.text:0040E230
.text:0040E230 sub_40E230      proc near               ; CODE XREF: sub_407EB0+1A5↑p
.text:0040E230                                         ; sub_407EB0+21E↑p ...
.text:0040E230
.text:0040E230 var_34          = dword ptr -34h
.text:0040E230 var_2C          = dword ptr -2Ch
.text:0040E230 var_28          = dword ptr -28h
.text:0040E230 var_24          = dword ptr -24h
.text:0040E230 var_20          = dword ptr -20h
.text:0040E230 var_1C          = dword ptr -1Ch
.text:0040E230 var_18          = dword ptr -18h
.text:0040E230 var_14          = dword ptr -14h
.text:0040E230 arg_0           = dword ptr  8
.text:0040E230 arg_4           = dword ptr  0Ch
.text:0040E230 arg_8           = dword ptr  10h
.text:0040E230 arg_C           = dword ptr  14h
.text:0040E230
.text:0040E230                 push    ebp
.text:0040E231                 mov     ebp, esp
.text:0040E233                 push    edi
.text:0040E234                 push    esi
.text:0040E235                 push    ebx
.text:0040E236                 sub     esp, 2Ch
.text:0040E239                 mov     edx, [ebp+arg_C]
.text:0040E23C                 mov     [ebp+var_20], 0
.text:0040E243                 mov     ecx, [ebp+arg_0]
.text:0040E246                 mov     ebx, [ebp+arg_4]
.text:0040E249                 mov     [ebp+var_1C], 0
.text:0040E250                 mov     eax, [ebp+arg_8]
.text:0040E253                 test    edx, edx
.text:0040E255                 mov     [ebp+var_24], edx
.text:0040E258                 mov     edi, ebx
.text:0040E25A                 mov     esi, eax
.text:0040E25C                 mov     [ebp+var_28], ecx
.text:0040E25F                 jnz     short loc_40E2C0
.text:0040E261                 cmp     eax, ebx
.text:0040E263                 jbe     short loc_40E2A0
.text:0040E265                 mov     eax, ecx
.text:0040E267                 mov     edx, ebx
.text:0040E269                 div     esi
.text:0040E26B
.text:0040E26B loc_40E26B:                             ; CODE XREF: sub_40E230+8B↓j
.text:0040E26B                 mov     [ebp+var_28], edx
.text:0040E26E                 lea     ecx, [ebp+var_18]
.text:0040E271                 test    ecx, ecx
.text:0040E273                 jz      short loc_40E28E
.text:0040E275                 mov     [ebp+var_1C], 0
.text:0040E27C
.text:0040E27C loc_40E27C:                             ; CODE XREF: sub_40E230+DA↓j
.text:0040E27C                 mov     eax, [ebp+var_28]
.text:0040E27F                 mov     [ebp+var_20], eax
.text:0040E282                 mov     edx, [ebp+var_20]
.text:0040E285                 mov     ecx, [ebp+var_1C]
.text:0040E288                 mov     [ebp+var_18], edx
.text:0040E28B                 mov     [ebp+var_14], ecx
.text:0040E28E
.text:0040E28E loc_40E28E:                             ; CODE XREF: sub_40E230+43↑j
.text:0040E28E                                         ; sub_40E230+A7↓j ...
.text:0040E28E                 mov     eax, [ebp+var_18]
.text:0040E291                 mov     edx, [ebp+var_14]
.text:0040E294                 add     esp, 2Ch
.text:0040E297                 pop     ebx
.text:0040E298                 pop     esi
.text:0040E299                 pop     edi
.text:0040E29A                 pop     ebp
.text:0040E29B                 retn
.text:0040E29B ; ---------------------------------------------------------------------------
.text:0040E29C                 align 10h
.text:0040E2A0
.text:0040E2A0 loc_40E2A0:                             ; CODE XREF: sub_40E230+33↑j
.text:0040E2A0                 test    eax, eax
.text:0040E2A2                 jnz     short loc_40E2AF
.text:0040E2A4                 mov     eax, 1
.text:0040E2A9                 xor     edx, edx
.text:0040E2AB                 div     esi
.text:0040E2AD                 mov     esi, eax
.text:0040E2AF
.text:0040E2AF loc_40E2AF:                             ; CODE XREF: sub_40E230+72↑j
.text:0040E2AF                 mov     eax, edi
.text:0040E2B1                 mov     edx, [ebp+var_24]
.text:0040E2B4                 div     esi
.text:0040E2B6                 mov     eax, [ebp+var_28]
.text:0040E2B9                 div     esi
.text:0040E2BB                 jmp     short loc_40E26B
.text:0040E2BB ; ---------------------------------------------------------------------------
.text:0040E2BD                 align 10h
.text:0040E2C0
.text:0040E2C0 loc_40E2C0:                             ; CODE XREF: sub_40E230+2F↑j
.text:0040E2C0                 cmp     [ebp+var_24], ebx
.text:0040E2C3                 jbe     short loc_40E2E0
.text:0040E2C5                 mov     [ebp+var_20], ecx
.text:0040E2C8
.text:0040E2C8 loc_40E2C8:                             ; CODE XREF: sub_40E230+15B↓j
.text:0040E2C8                 mov     [ebp+var_1C], edi
.text:0040E2CB                 mov     eax, [ebp+var_20]
.text:0040E2CE                 mov     edx, [ebp+var_1C]
.text:0040E2D1                 mov     [ebp+var_18], eax
.text:0040E2D4                 mov     [ebp+var_14], edx
.text:0040E2D7                 jmp     short loc_40E28E
.text:0040E2D7 ; ---------------------------------------------------------------------------
.text:0040E2D9                 align 10h
.text:0040E2E0
.text:0040E2E0 loc_40E2E0:                             ; CODE XREF: sub_40E230+93↑j
.text:0040E2E0                 bsr     eax, [ebp+var_24]
.text:0040E2E4                 mov     ebx, eax
.text:0040E2E6                 xor     ebx, 1Fh
.text:0040E2E9                 jnz     short loc_40E310
.text:0040E2EB                 cmp     edi, [ebp+var_24]
.text:0040E2EE                 ja      short loc_40E2F5
.text:0040E2F0                 cmp     [ebp+var_28], esi
.text:0040E2F3                 jb      short loc_40E300
.text:0040E2F5
.text:0040E2F5 loc_40E2F5:                             ; CODE XREF: sub_40E230+BE↑j
.text:0040E2F5                 mov     edx, [ebp+var_28]
.text:0040E2F8                 sub     edx, esi
.text:0040E2FA                 sbb     edi, [ebp+var_24]
.text:0040E2FD                 mov     [ebp+var_28], edx
.text:0040E300
.text:0040E300 loc_40E300:                             ; CODE XREF: sub_40E230+C3↑j
.text:0040E300                 lea     ecx, [ebp+var_18]
.text:0040E303                 test    ecx, ecx
.text:0040E305                 jz      short loc_40E28E
.text:0040E307                 mov     [ebp+var_1C], edi
.text:0040E30A                 jmp     loc_40E27C
.text:0040E30A ; ---------------------------------------------------------------------------
.text:0040E30F                 align 10h
.text:0040E310
.text:0040E310 loc_40E310:                             ; CODE XREF: sub_40E230+B9↑j
.text:0040E310                 mov     edx, [ebp+var_24]
.text:0040E313                 mov     eax, 20h ; ' '
.text:0040E318                 mov     cl, bl
.text:0040E31A                 sub     eax, ebx
.text:0040E31C                 mov     [ebp+var_2C], eax
.text:0040E31F                 shl     edx, cl
.text:0040E321                 mov     eax, esi
.text:0040E323                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040E327                 shr     eax, cl
.text:0040E329                 mov     cl, bl
.text:0040E32B                 shl     esi, cl
.text:0040E32D                 or      edx, eax
.text:0040E32F                 mov     eax, [ebp+var_28]
.text:0040E332                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040E336                 mov     [ebp+var_24], edx
.text:0040E339                 mov     edx, edi
.text:0040E33B                 shr     edx, cl
.text:0040E33D                 mov     cl, bl
.text:0040E33F                 shl     edi, cl
.text:0040E341                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040E345                 shr     eax, cl
.text:0040E347                 or      edi, eax
.text:0040E349                 mov     eax, edi
.text:0040E34B                 mov     cl, bl
.text:0040E34D                 div     [ebp+var_24]
.text:0040E350                 shl     [ebp+var_28], cl
.text:0040E353                 mov     edi, edx
.text:0040E355                 mul     esi
.text:0040E357                 mov     [ebp+var_34], eax
.text:0040E35A                 cmp     edx, edi
.text:0040E35C                 ja      short loc_40E398
.text:0040E35E                 cmp     edx, edi
.text:0040E360                 jz      short loc_40E390
.text:0040E362
.text:0040E362 loc_40E362:                             ; CODE XREF: sub_40E230+166↓j
.text:0040E362                                         ; sub_40E230+173↓j
.text:0040E362                 lea     eax, [ebp+var_18]
.text:0040E365                 test    eax, eax
.text:0040E367                 jz      loc_40E28E
.text:0040E36D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040E371                 mov     eax, [ebp+var_28]
.text:0040E374                 sub     eax, [ebp+var_34]
.text:0040E377                 sbb     edi, edx
.text:0040E379                 mov     [ebp+var_28], eax
.text:0040E37C                 mov     edx, edi
.text:0040E37E                 shl     edx, cl
.text:0040E380                 mov     cl, bl
.text:0040E382                 shr     eax, cl
.text:0040E384                 or      edx, eax
.text:0040E386                 mov     [ebp+var_20], edx
.text:0040E389                 shr     edi, cl
.text:0040E38B                 jmp     loc_40E2C8
.text:0040E390 ; ---------------------------------------------------------------------------
.text:0040E390
.text:0040E390 loc_40E390:                             ; CODE XREF: sub_40E230+130↑j
.text:0040E390                 mov     eax, [ebp+var_28]
.text:0040E393                 cmp     [ebp+var_34], eax
.text:0040E396                 jbe     short loc_40E362
.text:0040E398
.text:0040E398 loc_40E398:                             ; CODE XREF: sub_40E230+12C↑j
.text:0040E398                 mov     ecx, [ebp+var_34]
.text:0040E39B                 sub     ecx, esi
.text:0040E39D                 sbb     edx, [ebp+var_24]
.text:0040E3A0                 mov     [ebp+var_34], ecx
.text:0040E3A3                 jmp     short loc_40E362
.text:0040E3A3 sub_40E230      endp
.text:0040E3A3
.text:0040E3A3 ; ---------------------------------------------------------------------------
.text:0040E3A5                 align 10h
.text:0040E3B0
.text:0040E3B0 ; =============== S U B R O U T I N E =======================================
.text:0040E3B0
.text:0040E3B0 ; Attributes: thunk
.text:0040E3B0
.text:0040E3B0 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:0040E3B0 _chmod          proc near               ; CODE XREF: sub_4018C0+4FE↑p
.text:0040E3B0                                         ; sub_40C870+41↑j
.text:0040E3B0
.text:0040E3B0 FileName        = dword ptr  4
.text:0040E3B0 AccessMode      = dword ptr  8
.text:0040E3B0
.text:0040E3B0                 jmp     ds:__imp__chmod
.text:0040E3B0 _chmod          endp
.text:0040E3B0
.text:0040E3B0 ; ---------------------------------------------------------------------------
.text:0040E3B6                 align 10h
.text:0040E3C0
.text:0040E3C0 ; =============== S U B R O U T I N E =======================================
.text:0040E3C0
.text:0040E3C0 ; Attributes: thunk
.text:0040E3C0
.text:0040E3C0 ; int __cdecl umask(int Mode)
.text:0040E3C0 _umask          proc near               ; CODE XREF: sub_4018C0+284↑p
.text:0040E3C0                                         ; sub_402190+9E↑p ...
.text:0040E3C0
.text:0040E3C0 Mode            = dword ptr  4
.text:0040E3C0
.text:0040E3C0                 jmp     ds:__imp__umask
.text:0040E3C0 _umask          endp
.text:0040E3C0
.text:0040E3C0 ; ---------------------------------------------------------------------------
.text:0040E3C6                 align 10h
.text:0040E3D0
.text:0040E3D0 ; =============== S U B R O U T I N E =======================================
.text:0040E3D0
.text:0040E3D0 ; Attributes: thunk
.text:0040E3D0
.text:0040E3D0 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:0040E3D0 _stricmp        proc near               ; CODE XREF: sub_408380+46F↑p
.text:0040E3D0                                         ; sub_40A800+2E↑p ...
.text:0040E3D0
.text:0040E3D0 String1         = dword ptr  4
.text:0040E3D0 String2         = dword ptr  8
.text:0040E3D0
.text:0040E3D0                 jmp     ds:__imp__stricmp
.text:0040E3D0 _stricmp        endp
.text:0040E3D0
.text:0040E3D0 ; ---------------------------------------------------------------------------
.text:0040E3D6                 align 10h
.text:0040E3E0
.text:0040E3E0 ; =============== S U B R O U T I N E =======================================
.text:0040E3E0
.text:0040E3E0 ; Attributes: thunk
.text:0040E3E0
.text:0040E3E0 ; char *__cdecl strdup(const char *String)
.text:0040E3E0 _strdup         proc near               ; CODE XREF: sub_40A430+101↑p
.text:0040E3E0                                         ; .text:0040A69A↑p ...
.text:0040E3E0
.text:0040E3E0 String          = dword ptr  4
.text:0040E3E0
.text:0040E3E0                 jmp     ds:__imp__strdup
.text:0040E3E0 _strdup         endp
.text:0040E3E0
.text:0040E3E0 ; ---------------------------------------------------------------------------
.text:0040E3E6                 align 10h
.text:0040E3F0
.text:0040E3F0 ; =============== S U B R O U T I N E =======================================
.text:0040E3F0
.text:0040E3F0 ; Attributes: thunk
.text:0040E3F0
.text:0040E3F0 ; int __cdecl getpid()
.text:0040E3F0 _getpid         proc near               ; CODE XREF: sub_40C440+84↑p
.text:0040E3F0                 jmp     ds:__imp__getpid
.text:0040E3F0 _getpid         endp
.text:0040E3F0
.text:0040E3F0 ; ---------------------------------------------------------------------------
.text:0040E3F6                 align 10h
.text:0040E400
.text:0040E400 ; =============== S U B R O U T I N E =======================================
.text:0040E400
.text:0040E400 ; Attributes: info_from_lumina
.text:0040E400
.text:0040E400 ; unsigned __int64 __cdecl strtoull(const char *String, char **EndPtr, int Radix)
.text:0040E400 _strtoull       proc near               ; CODE XREF: sub_4037D0+AD↑p
.text:0040E400
.text:0040E400 C               = dword ptr -3Ch
.text:0040E400 Type            = dword ptr -38h
.text:0040E400 var_34          = dword ptr -34h
.text:0040E400 var_30          = dword ptr -30h
.text:0040E400 var_2C          = dword ptr -2Ch
.text:0040E400 var_28          = dword ptr -28h
.text:0040E400 var_24          = dword ptr -24h
.text:0040E400 var_20          = dword ptr -20h
.text:0040E400 var_1C          = dword ptr -1Ch
.text:0040E400 var_18          = dword ptr -18h
.text:0040E400 String          = dword ptr  4
.text:0040E400 EndPtr          = dword ptr  8
.text:0040E400 Radix           = dword ptr  0Ch
.text:0040E400
.text:0040E400                 push    ebp
.text:0040E401                 push    edi
.text:0040E402                 push    esi
.text:0040E403                 push    ebx
.text:0040E404                 sub     esp, 2Ch
.text:0040E407                 mov     edx, [esp+3Ch+EndPtr]
.text:0040E40B                 test    edx, edx
.text:0040E40D                 jz      short loc_40E419
.text:0040E40F                 mov     eax, [esp+3Ch+String]
.text:0040E413                 mov     ecx, [esp+3Ch+EndPtr]
.text:0040E417                 mov     [ecx], eax
.text:0040E419
.text:0040E419 loc_40E419:                             ; CODE XREF: _strtoull+D↑j
.text:0040E419                 mov     edx, [esp+3Ch+Radix]
.text:0040E41D                 test    edx, edx
.text:0040E41F                 js      short loc_40E42F
.text:0040E421                 cmp     [esp+3Ch+Radix], 1
.text:0040E426                 jz      short loc_40E42F
.text:0040E428                 cmp     [esp+3Ch+Radix], 24h ; '$'
.text:0040E42D                 jle     short loc_40E446
.text:0040E42F
.text:0040E42F loc_40E42F:                             ; CODE XREF: _strtoull+1F↑j
.text:0040E42F                                         ; _strtoull+26↑j
.text:0040E42F                 call    _errno
.text:0040E434                 mov     dword ptr [eax], 21h ; '!'
.text:0040E43A
.text:0040E43A loc_40E43A:                             ; CODE XREF: _strtoull+FF↓j
.text:0040E43A                                         ; _strtoull+109↓j
.text:0040E43A                 xor     eax, eax
.text:0040E43C                 xor     edx, edx
.text:0040E43E
.text:0040E43E loc_40E43E:                             ; CODE XREF: _strtoull+244↓j
.text:0040E43E                                         ; _strtoull+251↓j ...
.text:0040E43E                 add     esp, 2Ch
.text:0040E441                 pop     ebx
.text:0040E442                 pop     esi
.text:0040E443                 pop     edi
.text:0040E444                 pop     ebp
.text:0040E445                 retn
.text:0040E446 ; ---------------------------------------------------------------------------
.text:0040E446
.text:0040E446 loc_40E446:                             ; CODE XREF: _strtoull+2D↑j
.text:0040E446                 mov     ecx, ds:__mb_cur_max
.text:0040E44C                 lea     esi, [esi+0]
.text:0040E450
.text:0040E450 loc_40E450:                             ; CODE XREF: _strtoull+7E↓j
.text:0040E450                 cmp     dword ptr [ecx], 1
.text:0040E453                 mov     esi, [esp+3Ch+String]
.text:0040E457                 movsx   edx, byte ptr [esi]
.text:0040E45A                 jz      loc_40E832
.text:0040E460                 mov     [esp+3Ch+Type], 8 ; Type
.text:0040E468                 mov     [esp+3Ch+C], edx ; C
.text:0040E46B                 call    _isctype
.text:0040E470                 mov     ecx, ds:__mb_cur_max
.text:0040E476
.text:0040E476 loc_40E476:                             ; CODE XREF: _strtoull+445↓j
.text:0040E476                 test    eax, eax
.text:0040E478                 jz      short loc_40E480
.text:0040E47A                 inc     [esp+3Ch+String]
.text:0040E47E                 jmp     short loc_40E450
.text:0040E480 ; ---------------------------------------------------------------------------
.text:0040E480
.text:0040E480 loc_40E480:                             ; CODE XREF: _strtoull+78↑j
.text:0040E480                 mov     esi, [esp+3Ch+String]
.text:0040E484                 xor     ebx, ebx
.text:0040E486                 movzx   edx, byte ptr [esi]
.text:0040E489                 cmp     dl, 2Dh ; '-'
.text:0040E48C                 setz    bl
.text:0040E48F                 test    ebx, ebx
.text:0040E491                 mov     [esp+3Ch+var_20], ebx
.text:0040E495                 jnz     loc_40E822
.text:0040E49B                 cmp     dl, 2Bh ; '+'
.text:0040E49E                 jz      loc_40E822
.text:0040E4A4
.text:0040E4A4 loc_40E4A4:                             ; CODE XREF: _strtoull+42D↓j
.text:0040E4A4                 mov     ebp, [esp+3Ch+Radix]
.text:0040E4A8                 test    ebp, ebp
.text:0040E4AA                 jnz     short loc_40E4BD
.text:0040E4AC                 cmp     dl, 30h ; '0'
.text:0040E4AF                 jz      loc_40E7F9
.text:0040E4B5                 mov     [esp+3Ch+Radix], 0Ah
.text:0040E4BD
.text:0040E4BD loc_40E4BD:                             ; CODE XREF: _strtoull+AA↑j
.text:0040E4BD                                         ; _strtoull+40F↓j ...
.text:0040E4BD                 cmp     [esp+3Ch+Radix], 10h
.text:0040E4C2                 jz      loc_40E7CB
.text:0040E4C8
.text:0040E4C8 loc_40E4C8:                             ; CODE XREF: _strtoull+3CE↓j
.text:0040E4C8                                         ; _strtoull+3E2↓j ...
.text:0040E4C8                 cmp     dword ptr [ecx], 1
.text:0040E4CB                 movsx   ebx, dl
.text:0040E4CE                 jz      loc_40E7B3
.text:0040E4D4                 mov     [esp+3Ch+Type], 4 ; Type
.text:0040E4DC                 mov     [esp+3Ch+C], ebx ; C
.text:0040E4DF                 call    _isctype
.text:0040E4E4                 mov     esi, [esp+3Ch+String]
.text:0040E4E8                 movzx   edx, byte ptr [esi]
.text:0040E4EB
.text:0040E4EB loc_40E4EB:                             ; CODE XREF: _strtoull+3C6↓j
.text:0040E4EB                 test    eax, eax
.text:0040E4ED                 jz      loc_40E71C
.text:0040E4F3                 movsx   eax, dl
.text:0040E4F6                 sub     eax, 30h ; '0'
.text:0040E4F9
.text:0040E4F9 loc_40E4F9:                             ; CODE XREF: _strtoull+34B↓j
.text:0040E4F9                                         ; _strtoull+37C↓j ...
.text:0040E4F9                 inc     [esp+3Ch+String]
.text:0040E4FD                 test    eax, eax
.text:0040E4FF                 js      loc_40E43A
.text:0040E505                 cmp     eax, [esp+3Ch+Radix]
.text:0040E509                 jge     loc_40E43A
.text:0040E50F                 mov     [esp+3Ch+var_1C], eax
.text:0040E513                 mov     edx, eax
.text:0040E515                 sar     edx, 1Fh
.text:0040E518                 mov     [esp+3Ch+var_18], edx
.text:0040E51C                 mov     [esp+3Ch+var_24], 0
.text:0040E524                 lea     esi, [esi+0]
.text:0040E52A                 lea     edi, [edi+0]
.text:0040E530
.text:0040E530 loc_40E530:                             ; CODE XREF: _strtoull+20C↓j
.text:0040E530                 mov     ebp, [esp+3Ch+String]
.text:0040E534                 mov     ebx, ds:__mb_cur_max
.text:0040E53A                 movzx   edx, byte ptr [ebp+0]
.text:0040E53E                 cmp     dword ptr [ebx], 1
.text:0040E541                 movsx   ecx, dl
.text:0040E544                 jz      loc_40E705
.text:0040E54A                 mov     [esp+3Ch+C], ecx ; C
.text:0040E54D                 mov     [esp+3Ch+Type], 4 ; Type
.text:0040E555                 call    _isctype
.text:0040E55A                 mov     ecx, [esp+3Ch+String]
.text:0040E55E                 movzx   edx, byte ptr [ecx]
.text:0040E561
.text:0040E561 loc_40E561:                             ; CODE XREF: _strtoull+317↓j
.text:0040E561                 test    eax, eax
.text:0040E563                 jz      loc_40E670
.text:0040E569                 movsx   edi, dl
.text:0040E56C                 lea     ebp, [edi-30h]
.text:0040E56F
.text:0040E56F loc_40E56F:                             ; CODE XREF: _strtoull+2A3↓j
.text:0040E56F                 test    ebp, ebp
.text:0040E571                 js      loc_40E61B
.text:0040E577                 cmp     ebp, [esp+3Ch+Radix]
.text:0040E57B                 jge     loc_40E61B
.text:0040E581                 mov     [esp+3Ch+C], 0FFFFFFFFh
.text:0040E588                 mov     eax, [esp+3Ch+Radix]
.text:0040E58C                 mov     [esp+3Ch+Type], 0FFFFFFFFh
.text:0040E594                 cdq
.text:0040E595                 mov     esi, eax
.text:0040E597                 mov     [esp+3Ch+var_34], eax
.text:0040E59B                 mov     edi, edx
.text:0040E59D                 mov     [esp+3Ch+var_30], edx
.text:0040E5A1                 call    sub_40E110
.text:0040E5A6                 add     eax, 1
.text:0040E5A9                 adc     edx, 0
.text:0040E5AC                 cmp     [esp+3Ch+var_18], edx
.text:0040E5B0                 ja      short loc_40E600
.text:0040E5B2                 jb      short loc_40E5BA
.text:0040E5B4                 cmp     [esp+3Ch+var_1C], eax
.text:0040E5B8                 ja      short loc_40E600
.text:0040E5BA
.text:0040E5BA loc_40E5BA:                             ; CODE XREF: _strtoull+1B2↑j
.text:0040E5BA                 mov     eax, [esp+3Ch+var_1C]
.text:0040E5BE                 mov     ebx, ebp
.text:0040E5C0                 mul     esi
.text:0040E5C2                 mov     ecx, edx
.text:0040E5C4                 mov     [esp+3Ch+var_2C], eax
.text:0040E5C8                 mov     eax, [esp+3Ch+var_18]
.text:0040E5CC                 mov     [esp+3Ch+var_28], edx
.text:0040E5D0                 imul    eax, esi
.text:0040E5D3                 mov     esi, [esp+3Ch+var_1C]
.text:0040E5D7                 imul    esi, edi
.text:0040E5DA                 add     ecx, eax
.text:0040E5DC                 lea     edi, [esi+ecx]
.text:0040E5DF                 mov     esi, ebp
.text:0040E5E1                 sar     esi, 1Fh
.text:0040E5E4                 add     ebx, [esp+3Ch+var_2C]
.text:0040E5E8                 mov     [esp+3Ch+var_28], edi
.text:0040E5EC                 adc     esi, [esp+3Ch+var_28]
.text:0040E5F0                 cmp     esi, [esp+3Ch+var_18]
.text:0040E5F4                 jb      short loc_40E600
.text:0040E5F6                 ja      short loc_40E611
.text:0040E5F8                 cmp     ebx, [esp+3Ch+var_1C]
.text:0040E5FC                 jnb     short loc_40E611
.text:0040E5FE                 mov     esi, esi
.text:0040E600
.text:0040E600 loc_40E600:                             ; CODE XREF: _strtoull+1B0↑j
.text:0040E600                                         ; _strtoull+1B8↑j ...
.text:0040E600                 mov     [esp+3Ch+var_24], 1
.text:0040E608
.text:0040E608 loc_40E608:                             ; CODE XREF: _strtoull+219↓j
.text:0040E608                 inc     [esp+3Ch+String]
.text:0040E60C                 jmp     loc_40E530
.text:0040E611 ; ---------------------------------------------------------------------------
.text:0040E611
.text:0040E611 loc_40E611:                             ; CODE XREF: _strtoull+1F6↑j
.text:0040E611                                         ; _strtoull+1FC↑j
.text:0040E611                 mov     [esp+3Ch+var_1C], ebx
.text:0040E615                 mov     [esp+3Ch+var_18], esi
.text:0040E619                 jmp     short loc_40E608
.text:0040E61B ; ---------------------------------------------------------------------------
.text:0040E61B
.text:0040E61B loc_40E61B:                             ; CODE XREF: _strtoull+171↑j
.text:0040E61B                                         ; _strtoull+17B↑j
.text:0040E61B                 mov     eax, [esp+3Ch+EndPtr]
.text:0040E61F                 test    eax, eax
.text:0040E621                 jz      short loc_40E62E
.text:0040E623                 mov     ecx, [esp+3Ch+String]
.text:0040E627                 mov     ebp, [esp+3Ch+EndPtr]
.text:0040E62B                 mov     [ebp+0], ecx
.text:0040E62E
.text:0040E62E loc_40E62E:                             ; CODE XREF: _strtoull+221↑j
.text:0040E62E                 mov     esi, [esp+3Ch+var_24]
.text:0040E632                 test    esi, esi
.text:0040E634                 jnz     short loc_40E656
.text:0040E636                 mov     ebx, [esp+3Ch+var_20]
.text:0040E63A                 mov     eax, [esp+3Ch+var_1C]
.text:0040E63E                 mov     edx, [esp+3Ch+var_18]
.text:0040E642                 test    ebx, ebx
.text:0040E644                 jz      loc_40E43E
.text:0040E64A                 neg     eax
.text:0040E64C                 adc     edx, 0
.text:0040E64F                 neg     edx
.text:0040E651                 jmp     loc_40E43E
.text:0040E656 ; ---------------------------------------------------------------------------
.text:0040E656
.text:0040E656 loc_40E656:                             ; CODE XREF: _strtoull+234↑j
.text:0040E656                 call    _errno
.text:0040E65B                 mov     edx, 0FFFFFFFFh
.text:0040E660                 mov     dword ptr [eax], 22h ; '"'
.text:0040E666                 mov     eax, 0FFFFFFFFh
.text:0040E66B                 jmp     loc_40E43E
.text:0040E670 ; ---------------------------------------------------------------------------
.text:0040E670
.text:0040E670 loc_40E670:                             ; CODE XREF: _strtoull+163↑j
.text:0040E670                 mov     ebp, ds:__mb_cur_max
.text:0040E676                 movsx   ecx, dl
.text:0040E679                 cmp     dword ptr [ebp+0], 1
.text:0040E67D                 jz      short loc_40E6F1
.text:0040E67F                 mov     [esp+3Ch+Type], 1 ; Type
.text:0040E687                 mov     [esp+3Ch+C], ecx ; C
.text:0040E68A                 call    _isctype
.text:0040E68F                 mov     ebp, [esp+3Ch+String]
.text:0040E693                 movzx   edx, byte ptr [ebp+0]
.text:0040E697
.text:0040E697 loc_40E697:                             ; CODE XREF: _strtoull+303↓j
.text:0040E697                 test    eax, eax
.text:0040E699                 jz      short loc_40E6A8
.text:0040E69B                 movsx   eax, dl
.text:0040E69E                 sub     eax, 37h ; '7'
.text:0040E6A1
.text:0040E6A1 loc_40E6A1:                             ; CODE XREF: _strtoull+2D4↓j
.text:0040E6A1                                         ; _strtoull+2DB↓j
.text:0040E6A1                 mov     ebp, eax
.text:0040E6A3                 jmp     loc_40E56F
.text:0040E6A8 ; ---------------------------------------------------------------------------
.text:0040E6A8
.text:0040E6A8 loc_40E6A8:                             ; CODE XREF: _strtoull+299↑j
.text:0040E6A8                 mov     ecx, ds:__mb_cur_max
.text:0040E6AE                 movsx   edx, dl
.text:0040E6B1                 cmp     dword ptr [ecx], 1
.text:0040E6B4                 jz      short loc_40E6DD
.text:0040E6B6                 mov     [esp+3Ch+Type], 2 ; Type
.text:0040E6BE                 mov     [esp+3Ch+C], edx ; C
.text:0040E6C1                 call    _isctype
.text:0040E6C6
.text:0040E6C6 loc_40E6C6:                             ; CODE XREF: _strtoull+2EF↓j
.text:0040E6C6                 test    eax, eax
.text:0040E6C8                 jz      short loc_40E6D6
.text:0040E6CA                 mov     edx, [esp+3Ch+String]
.text:0040E6CE                 movsx   eax, byte ptr [edx]
.text:0040E6D1                 sub     eax, 57h ; 'W'
.text:0040E6D4                 jmp     short loc_40E6A1
.text:0040E6D6 ; ---------------------------------------------------------------------------
.text:0040E6D6
.text:0040E6D6 loc_40E6D6:                             ; CODE XREF: _strtoull+2C8↑j
.text:0040E6D6                 mov     eax, 0FFFFFFFFh
.text:0040E6DB                 jmp     short loc_40E6A1
.text:0040E6DD ; ---------------------------------------------------------------------------
.text:0040E6DD
.text:0040E6DD loc_40E6DD:                             ; CODE XREF: _strtoull+2B4↑j
.text:0040E6DD                 mov     edi, ds:_pctype
.text:0040E6E3                 mov     ebx, [edi]
.text:0040E6E5                 movzx   esi, word ptr [ebx+edx*2]
.text:0040E6E9                 and     esi, 2
.text:0040E6EC                 movzx   eax, si
.text:0040E6EF                 jmp     short loc_40E6C6
.text:0040E6F1 ; ---------------------------------------------------------------------------
.text:0040E6F1
.text:0040E6F1 loc_40E6F1:                             ; CODE XREF: _strtoull+27D↑j
.text:0040E6F1                 mov     edi, ds:_pctype
.text:0040E6F7                 mov     ebx, [edi]
.text:0040E6F9                 movzx   esi, word ptr [ebx+ecx*2]
.text:0040E6FD                 and     esi, 1
.text:0040E700                 movzx   eax, si
.text:0040E703                 jmp     short loc_40E697
.text:0040E705 ; ---------------------------------------------------------------------------
.text:0040E705
.text:0040E705 loc_40E705:                             ; CODE XREF: _strtoull+144↑j
.text:0040E705                 mov     ebx, ds:_pctype
.text:0040E70B                 mov     esi, [ebx]
.text:0040E70D                 movzx   edi, word ptr [esi+ecx*2]
.text:0040E711                 and     edi, 4
.text:0040E714                 movzx   eax, di
.text:0040E717                 jmp     loc_40E561
.text:0040E71C ; ---------------------------------------------------------------------------
.text:0040E71C
.text:0040E71C loc_40E71C:                             ; CODE XREF: _strtoull+ED↑j
.text:0040E71C                 mov     ebx, ds:__mb_cur_max
.text:0040E722                 movsx   ecx, dl
.text:0040E725                 cmp     dword ptr [ebx], 1
.text:0040E728                 jz      short loc_40E79F
.text:0040E72A                 mov     [esp+3Ch+C], ecx ; C
.text:0040E72D                 mov     [esp+3Ch+Type], 1 ; Type
.text:0040E735                 call    _isctype
.text:0040E73A                 mov     ecx, [esp+3Ch+String]
.text:0040E73E                 movzx   edx, byte ptr [ecx]
.text:0040E741
.text:0040E741 loc_40E741:                             ; CODE XREF: _strtoull+3B1↓j
.text:0040E741                 test    eax, eax
.text:0040E743                 jz      short loc_40E750
.text:0040E745                 movsx   eax, dl
.text:0040E748                 sub     eax, 37h ; '7'
.text:0040E74B                 jmp     loc_40E4F9
.text:0040E750 ; ---------------------------------------------------------------------------
.text:0040E750
.text:0040E750 loc_40E750:                             ; CODE XREF: _strtoull+343↑j
.text:0040E750                 mov     ebx, ds:__mb_cur_max
.text:0040E756                 movsx   edx, dl
.text:0040E759                 cmp     dword ptr [ebx], 1
.text:0040E75C                 jz      short loc_40E78B
.text:0040E75E                 mov     [esp+3Ch+Type], 2 ; Type
.text:0040E766                 mov     [esp+3Ch+C], edx ; C
.text:0040E769                 call    _isctype
.text:0040E76E
.text:0040E76E loc_40E76E:                             ; CODE XREF: _strtoull+39D↓j
.text:0040E76E                 test    eax, eax
.text:0040E770                 jz      short loc_40E781
.text:0040E772                 mov     ecx, [esp+3Ch+String]
.text:0040E776                 movsx   eax, byte ptr [ecx]
.text:0040E779                 sub     eax, 57h ; 'W'
.text:0040E77C                 jmp     loc_40E4F9
.text:0040E781 ; ---------------------------------------------------------------------------
.text:0040E781
.text:0040E781 loc_40E781:                             ; CODE XREF: _strtoull+370↑j
.text:0040E781                 mov     eax, 0FFFFFFFFh
.text:0040E786                 jmp     loc_40E4F9
.text:0040E78B ; ---------------------------------------------------------------------------
.text:0040E78B
.text:0040E78B loc_40E78B:                             ; CODE XREF: _strtoull+35C↑j
.text:0040E78B                 mov     esi, ds:_pctype
.text:0040E791                 mov     edi, [esi]
.text:0040E793                 movzx   ebp, word ptr [edi+edx*2]
.text:0040E797                 and     ebp, 2
.text:0040E79A                 movzx   eax, bp
.text:0040E79D                 jmp     short loc_40E76E
.text:0040E79F ; ---------------------------------------------------------------------------
.text:0040E79F
.text:0040E79F loc_40E79F:                             ; CODE XREF: _strtoull+328↑j
.text:0040E79F                 mov     esi, ds:_pctype
.text:0040E7A5                 mov     edi, [esi]
.text:0040E7A7                 movzx   ebp, word ptr [edi+ecx*2]
.text:0040E7AB                 and     ebp, 1
.text:0040E7AE                 movzx   eax, bp
.text:0040E7B1                 jmp     short loc_40E741
.text:0040E7B3 ; ---------------------------------------------------------------------------
.text:0040E7B3
.text:0040E7B3 loc_40E7B3:                             ; CODE XREF: _strtoull+CE↑j
.text:0040E7B3                 mov     edi, ds:_pctype
.text:0040E7B9                 mov     ebp, [edi]
.text:0040E7BB                 movzx   ecx, word ptr [ebp+ebx*2+0]
.text:0040E7C0                 and     ecx, 4
.text:0040E7C3                 movzx   eax, cx
.text:0040E7C6                 jmp     loc_40E4EB
.text:0040E7CB ; ---------------------------------------------------------------------------
.text:0040E7CB
.text:0040E7CB loc_40E7CB:                             ; CODE XREF: _strtoull+C2↑j
.text:0040E7CB                 cmp     dl, 30h ; '0'
.text:0040E7CE                 jnz     loc_40E4C8
.text:0040E7D4                 mov     esi, [esp+3Ch+String]
.text:0040E7D8                 movzx   eax, byte ptr [esi+1]
.text:0040E7DC                 cmp     al, 58h ; 'X'
.text:0040E7DE                 jz      short loc_40E7E8
.text:0040E7E0                 cmp     al, 78h ; 'x'
.text:0040E7E2                 jnz     loc_40E4C8
.text:0040E7E8
.text:0040E7E8 loc_40E7E8:                             ; CODE XREF: _strtoull+3DE↑j
.text:0040E7E8                 add     [esp+3Ch+String], 2
.text:0040E7ED                 mov     ebx, [esp+3Ch+String]
.text:0040E7F1                 movzx   edx, byte ptr [ebx]
.text:0040E7F4                 jmp     loc_40E4C8
.text:0040E7F9 ; ---------------------------------------------------------------------------
.text:0040E7F9
.text:0040E7F9 loc_40E7F9:                             ; CODE XREF: _strtoull+AF↑j
.text:0040E7F9                 mov     edi, [esp+3Ch+String]
.text:0040E7FD                 movzx   eax, byte ptr [edi+1]
.text:0040E801                 cmp     al, 58h ; 'X'
.text:0040E803                 jz      short loc_40E815
.text:0040E805                 mov     [esp+3Ch+Radix], 8
.text:0040E80D                 cmp     al, 78h ; 'x'
.text:0040E80F                 jnz     loc_40E4BD
.text:0040E815
.text:0040E815 loc_40E815:                             ; CODE XREF: _strtoull+403↑j
.text:0040E815                 mov     [esp+3Ch+Radix], 10h
.text:0040E81D                 jmp     loc_40E4BD
.text:0040E822 ; ---------------------------------------------------------------------------
.text:0040E822
.text:0040E822 loc_40E822:                             ; CODE XREF: _strtoull+95↑j
.text:0040E822                                         ; _strtoull+9E↑j
.text:0040E822                 inc     [esp+3Ch+String]
.text:0040E826                 mov     eax, [esp+3Ch+String]
.text:0040E82A                 movzx   edx, byte ptr [eax]
.text:0040E82D                 jmp     loc_40E4A4
.text:0040E832 ; ---------------------------------------------------------------------------
.text:0040E832
.text:0040E832 loc_40E832:                             ; CODE XREF: _strtoull+5A↑j
.text:0040E832                 mov     ebp, ds:_pctype
.text:0040E838                 mov     edi, [ebp+0]
.text:0040E83B                 movzx   ebx, word ptr [edi+edx*2]
.text:0040E83F                 and     ebx, 8
.text:0040E842                 movzx   eax, bx
.text:0040E845                 jmp     loc_40E476
.text:0040E845 _strtoull       endp
.text:0040E845
.text:0040E845 ; ---------------------------------------------------------------------------
.text:0040E84A                 align 10h
.text:0040E850                 jmp     ds:__set_app_type
.text:0040E850 ; ---------------------------------------------------------------------------
.text:0040E856                 align 10h
.text:0040E860
.text:0040E860 ; =============== S U B R O U T I N E =======================================
.text:0040E860
.text:0040E860 ; Attributes: thunk
.text:0040E860
.text:0040E860 ; void __cdecl cexit()
.text:0040E860 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:0040E860                 jmp     ds:__imp__cexit
.text:0040E860 _cexit          endp
.text:0040E860
.text:0040E860 ; ---------------------------------------------------------------------------
.text:0040E866                 align 10h
.text:0040E870
.text:0040E870 ; =============== S U B R O U T I N E =======================================
.text:0040E870
.text:0040E870 ; Attributes: thunk
.text:0040E870
.text:0040E870 ; char ***__cdecl _p__environ()
.text:0040E870 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0040E870                 jmp     ds:__imp___p__environ
.text:0040E870 __p__environ    endp
.text:0040E870
.text:0040E870 ; ---------------------------------------------------------------------------
.text:0040E876                 align 10h
.text:0040E880
.text:0040E880 ; =============== S U B R O U T I N E =======================================
.text:0040E880
.text:0040E880 ; Attributes: thunk
.text:0040E880
.text:0040E880 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0040E880 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0040E880                                         ; TopLevelExceptionFilter+88↑p ...
.text:0040E880
.text:0040E880 Signal          = dword ptr  4
.text:0040E880 Function        = dword ptr  8
.text:0040E880
.text:0040E880                 jmp     ds:__imp_signal
.text:0040E880 signal          endp
.text:0040E880
.text:0040E880 ; ---------------------------------------------------------------------------
.text:0040E886                 align 10h
.text:0040E890
.text:0040E890 ; =============== S U B R O U T I N E =======================================
.text:0040E890
.text:0040E890 ; Attributes: thunk
.text:0040E890
.text:0040E890 ; int *__cdecl _p__fmode()
.text:0040E890 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0040E890                 jmp     ds:__imp___p__fmode
.text:0040E890 __p__fmode      endp
.text:0040E890
.text:0040E890 ; ---------------------------------------------------------------------------
.text:0040E896                 align 10h
.text:0040E8A0
.text:0040E8A0 ; =============== S U B R O U T I N E =======================================
.text:0040E8A0
.text:0040E8A0 ; Attributes: thunk
.text:0040E8A0
.text:0040E8A0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0040E8A0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0040E8A0                                         ; sub_401080+90↑p ...
.text:0040E8A0
.text:0040E8A0 FileHandle      = dword ptr  4
.text:0040E8A0 Mode            = dword ptr  8
.text:0040E8A0
.text:0040E8A0                 jmp     ds:__imp__setmode
.text:0040E8A0 _setmode        endp
.text:0040E8A0
.text:0040E8A0 ; ---------------------------------------------------------------------------
.text:0040E8A6                 align 10h
.text:0040E8B0
.text:0040E8B0 ; =============== S U B R O U T I N E =======================================
.text:0040E8B0
.text:0040E8B0 ; Attributes: thunk
.text:0040E8B0
.text:0040E8B0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0040E8B0                 jmp     ds:__imp___getmainargs
.text:0040E8B0 __getmainargs   endp
.text:0040E8B0
.text:0040E8B0 ; ---------------------------------------------------------------------------
.text:0040E8B6                 align 10h
.text:0040E8C0
.text:0040E8C0 ; =============== S U B R O U T I N E =======================================
.text:0040E8C0
.text:0040E8C0 ; Attributes: thunk
.text:0040E8C0
.text:0040E8C0 ; int *__cdecl errno()
.text:0040E8C0 _errno          proc near               ; CODE XREF: sub_4018C0+52D↑p
.text:0040E8C0                                         ; sub_4018C0+564↑p ...
.text:0040E8C0                 jmp     ds:__imp__errno
.text:0040E8C0 _errno          endp
.text:0040E8C0
.text:0040E8C0 ; ---------------------------------------------------------------------------
.text:0040E8C6                 align 10h
.text:0040E8D0
.text:0040E8D0 ; =============== S U B R O U T I N E =======================================
.text:0040E8D0
.text:0040E8D0 ; Attributes: thunk
.text:0040E8D0
.text:0040E8D0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0040E8D0 setlocale       proc near               ; CODE XREF: sub_4018C0+35↑p
.text:0040E8D0
.text:0040E8D0 Category        = dword ptr  4
.text:0040E8D0 Locale          = dword ptr  8
.text:0040E8D0
.text:0040E8D0                 jmp     ds:__imp_setlocale
.text:0040E8D0 setlocale       endp
.text:0040E8D0
.text:0040E8D0 ; ---------------------------------------------------------------------------
.text:0040E8D6                 align 10h
.text:0040E8E0
.text:0040E8E0 ; =============== S U B R O U T I N E =======================================
.text:0040E8E0
.text:0040E8E0 ; Attributes: noreturn thunk
.text:0040E8E0
.text:0040E8E0 ; void __cdecl __noreturn exit(int Code)
.text:0040E8E0 exit            proc near               ; CODE XREF: sub_4018C0:loc_4019B2↑p
.text:0040E8E0                                         ; .text:0040204B↑p ...
.text:0040E8E0
.text:0040E8E0 Code            = dword ptr  4
.text:0040E8E0
.text:0040E8E0                 jmp     ds:__imp_exit
.text:0040E8E0 exit            endp
.text:0040E8E0
.text:0040E8E0 ; ---------------------------------------------------------------------------
.text:0040E8E6                 align 10h
.text:0040E8F0
.text:0040E8F0 ; =============== S U B R O U T I N E =======================================
.text:0040E8F0
.text:0040E8F0 ; Attributes: thunk
.text:0040E8F0
.text:0040E8F0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:0040E8F0 fputs           proc near               ; CODE XREF: sub_4018C0+17C↑p
.text:0040E8F0                                         ; sub_4018C0+19E↑p ...
.text:0040E8F0
.text:0040E8F0 Buffer          = dword ptr  4
.text:0040E8F0 Stream          = dword ptr  8
.text:0040E8F0
.text:0040E8F0                 jmp     ds:__imp_fputs
.text:0040E8F0 fputs           endp
.text:0040E8F0
.text:0040E8F0 ; ---------------------------------------------------------------------------
.text:0040E8F6                 align 10h
.text:0040E900
.text:0040E900 ; =============== S U B R O U T I N E =======================================
.text:0040E900
.text:0040E900 ; Attributes: thunk
.text:0040E900
.text:0040E900 ; int printf(const char *const Format, ...)
.text:0040E900 printf          proc near               ; CODE XREF: sub_4018C0+15A↑p
.text:0040E900                                         ; sub_4018C0+265↑p ...
.text:0040E900
.text:0040E900 Format          = dword ptr  4
.text:0040E900
.text:0040E900                 jmp     ds:__imp_printf
.text:0040E900 printf          endp
.text:0040E900
.text:0040E900 ; ---------------------------------------------------------------------------
.text:0040E906                 align 10h
.text:0040E910
.text:0040E910 ; =============== S U B R O U T I N E =======================================
.text:0040E910
.text:0040E910 ; Attributes: thunk
.text:0040E910
.text:0040E910 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:0040E910 fprintf         proc near               ; CODE XREF: sub_4018C0+E6↑p
.text:0040E910                                         ; sub_4018C0+671↑p ...
.text:0040E910
.text:0040E910 Stream          = dword ptr  4
.text:0040E910 Format          = dword ptr  8
.text:0040E910
.text:0040E910                 jmp     ds:__imp_fprintf
.text:0040E910 fprintf         endp
.text:0040E910
.text:0040E910 ; ---------------------------------------------------------------------------
.text:0040E916                 align 10h
.text:0040E920
.text:0040E920 ; =============== S U B R O U T I N E =======================================
.text:0040E920
.text:0040E920 ; Attributes: thunk
.text:0040E920
.text:0040E920 ; void __cdecl free(void *Block)
.text:0040E920 free            proc near               ; CODE XREF: sub_4026A0+16↑p
.text:0040E920                                         ; sub_406420+112↑p ...
.text:0040E920
.text:0040E920 Block           = dword ptr  4
.text:0040E920
.text:0040E920                 jmp     ds:__imp_free
.text:0040E920 free            endp
.text:0040E920
.text:0040E920 ; ---------------------------------------------------------------------------
.text:0040E926                 align 10h
.text:0040E930
.text:0040E930 ; =============== S U B R O U T I N E =======================================
.text:0040E930
.text:0040E930 ; Attributes: thunk
.text:0040E930
.text:0040E930 ; void *__cdecl malloc(size_t Size)
.text:0040E930 malloc          proc near               ; CODE XREF: sub_402190+5B↑p
.text:0040E930                                         ; sub_402190+13F↑p ...
.text:0040E930
.text:0040E930 Size            = dword ptr  4
.text:0040E930
.text:0040E930                 jmp     ds:__imp_malloc
.text:0040E930 malloc          endp
.text:0040E930
.text:0040E930 ; ---------------------------------------------------------------------------
.text:0040E936                 align 10h
.text:0040E940
.text:0040E940 ; =============== S U B R O U T I N E =======================================
.text:0040E940
.text:0040E940 ; Attributes: thunk
.text:0040E940
.text:0040E940 ; size_t __cdecl strlen(const char *Str)
.text:0040E940 strlen          proc near               ; CODE XREF: sub_402990+2A9↑p
.text:0040E940                                         ; sub_402990+346↑p ...
.text:0040E940
.text:0040E940 Str             = dword ptr  4
.text:0040E940
.text:0040E940                 jmp     ds:__imp_strlen
.text:0040E940 strlen          endp
.text:0040E940
.text:0040E940 ; ---------------------------------------------------------------------------
.text:0040E946                 align 10h
.text:0040E950
.text:0040E950 ; =============== S U B R O U T I N E =======================================
.text:0040E950
.text:0040E950 ; Attributes: thunk
.text:0040E950
.text:0040E950 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:0040E950 strncmp         proc near               ; CODE XREF: sub_402990+23F↑p
.text:0040E950                                         ; sub_402990+699↑p
.text:0040E950
.text:0040E950 Str1            = dword ptr  4
.text:0040E950 Str2            = dword ptr  8
.text:0040E950 MaxCount        = dword ptr  0Ch
.text:0040E950
.text:0040E950                 jmp     ds:__imp_strncmp
.text:0040E950 strncmp         endp
.text:0040E950
.text:0040E950 ; ---------------------------------------------------------------------------
.text:0040E956                 align 10h
.text:0040E960
.text:0040E960 ; =============== S U B R O U T I N E =======================================
.text:0040E960
.text:0040E960 ; Attributes: thunk
.text:0040E960
.text:0040E960 ; char *__cdecl getenv(const char *VarName)
.text:0040E960 getenv          proc near               ; CODE XREF: sub_402990+B57↑p
.text:0040E960                                         ; sub_408380+3EE↑p ...
.text:0040E960
.text:0040E960 VarName         = dword ptr  4
.text:0040E960
.text:0040E960                 jmp     ds:__imp_getenv
.text:0040E960 getenv          endp
.text:0040E960
.text:0040E960 ; ---------------------------------------------------------------------------
.text:0040E966                 align 10h
.text:0040E970
.text:0040E970 ; =============== S U B R O U T I N E =======================================
.text:0040E970
.text:0040E970 ; Attributes: thunk
.text:0040E970
.text:0040E970 ; char *__cdecl strchr(const char *Str, int Val)
.text:0040E970 strchr          proc near               ; CODE XREF: sub_402990+469↑p
.text:0040E970                                         ; sub_402990+53A↑p ...
.text:0040E970
.text:0040E970 Str             = dword ptr  4
.text:0040E970 Val             = dword ptr  8
.text:0040E970
.text:0040E970                 jmp     ds:__imp_strchr
.text:0040E970 strchr          endp
.text:0040E970
.text:0040E970 ; ---------------------------------------------------------------------------
.text:0040E976                 align 10h
.text:0040E980
.text:0040E980 ; =============== S U B R O U T I N E =======================================
.text:0040E980
.text:0040E980 ; Attributes: noreturn thunk
.text:0040E980
.text:0040E980 _assert         proc near               ; CODE XREF: sub_4037D0+C88↑p
.text:0040E980                                         ; sub_404CE0+553↑p ...
.text:0040E980                 jmp     ds:__imp__assert
.text:0040E980 _assert         endp
.text:0040E980
.text:0040E980 ; ---------------------------------------------------------------------------
.text:0040E986                 align 10h
.text:0040E990
.text:0040E990 ; =============== S U B R O U T I N E =======================================
.text:0040E990
.text:0040E990 ; Attributes: thunk
.text:0040E990
.text:0040E990 ; int __cdecl isctype(int C, int Type)
.text:0040E990 _isctype        proc near               ; CODE XREF: sub_4037D0+72↑p
.text:0040E990                                         ; sub_404CE0+5F↑p ...
.text:0040E990
.text:0040E990 C               = dword ptr  4
.text:0040E990 Type            = dword ptr  8
.text:0040E990
.text:0040E990                 jmp     ds:__imp__isctype
.text:0040E990 _isctype        endp
.text:0040E990
.text:0040E990 ; ---------------------------------------------------------------------------
.text:0040E996                 align 10h
.text:0040E9A0
.text:0040E9A0 ; =============== S U B R O U T I N E =======================================
.text:0040E9A0
.text:0040E9A0 ; Attributes: noreturn thunk
.text:0040E9A0
.text:0040E9A0 ; void __cdecl __noreturn abort()
.text:0040E9A0 abort           proc near               ; CODE XREF: sub_4044E0+32↑p
.text:0040E9A0                                         ; sub_404810:loc_4048AC↑p ...
.text:0040E9A0                 jmp     ds:__imp_abort
.text:0040E9A0 abort           endp
.text:0040E9A0
.text:0040E9A0 ; ---------------------------------------------------------------------------
.text:0040E9A6                 align 10h
.text:0040E9B0
.text:0040E9B0 ; =============== S U B R O U T I N E =======================================
.text:0040E9B0
.text:0040E9B0 ; Attributes: thunk
.text:0040E9B0
.text:0040E9B0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:0040E9B0 vfprintf        proc near               ; CODE XREF: sub_404810+C1↑p
.text:0040E9B0                                         ; sub_406910+49↑p ...
.text:0040E9B0
.text:0040E9B0 Stream          = dword ptr  4
.text:0040E9B0 Format          = dword ptr  8
.text:0040E9B0 ArgList         = dword ptr  0Ch
.text:0040E9B0
.text:0040E9B0                 jmp     ds:__imp_vfprintf
.text:0040E9B0 vfprintf        endp
.text:0040E9B0
.text:0040E9B0 ; ---------------------------------------------------------------------------
.text:0040E9B6                 align 10h
.text:0040E9C0
.text:0040E9C0 ; =============== S U B R O U T I N E =======================================
.text:0040E9C0
.text:0040E9C0 ; Attributes: thunk
.text:0040E9C0
.text:0040E9C0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:0040E9C0 _flsbuf         proc near               ; CODE XREF: sub_404810+128↑p
.text:0040E9C0                                         ; sub_404810+13A↑p ...
.text:0040E9C0
.text:0040E9C0 File            = dword ptr  8
.text:0040E9C0
.text:0040E9C0                 jmp     ds:__imp__flsbuf
.text:0040E9C0 _flsbuf         endp
.text:0040E9C0
.text:0040E9C0 ; ---------------------------------------------------------------------------
.text:0040E9C6                 align 10h
.text:0040E9D0
.text:0040E9D0 ; =============== S U B R O U T I N E =======================================
.text:0040E9D0
.text:0040E9D0 ; Attributes: thunk
.text:0040E9D0
.text:0040E9D0 ; int __cdecl fclose(FILE *Stream)
.text:0040E9D0 fclose          proc near               ; CODE XREF: sub_404B90+27↑p
.text:0040E9D0                                         ; .text:0040BD3E↑p
.text:0040E9D0
.text:0040E9D0 Stream          = dword ptr  4
.text:0040E9D0
.text:0040E9D0                 jmp     ds:__imp_fclose
.text:0040E9D0 fclose          endp
.text:0040E9D0
.text:0040E9D0 ; ---------------------------------------------------------------------------
.text:0040E9D6                 align 10h
.text:0040E9E0
.text:0040E9E0 ; =============== S U B R O U T I N E =======================================
.text:0040E9E0
.text:0040E9E0 ; Attributes: thunk
.text:0040E9E0
.text:0040E9E0 ; unsigned int __cdecl strtoul(const char *String, char **EndPtr, int Radix)
.text:0040E9E0 strtoul         proc near               ; CODE XREF: sub_404CE0+94↑p
.text:0040E9E0
.text:0040E9E0 String          = dword ptr  4
.text:0040E9E0 EndPtr          = dword ptr  8
.text:0040E9E0 Radix           = dword ptr  0Ch
.text:0040E9E0
.text:0040E9E0                 jmp     ds:__imp_strtoul
.text:0040E9E0 strtoul         endp
.text:0040E9E0
.text:0040E9E0 ; ---------------------------------------------------------------------------
.text:0040E9E6                 align 10h
.text:0040E9F0
.text:0040E9F0 ; =============== S U B R O U T I N E =======================================
.text:0040E9F0
.text:0040E9F0 ; Attributes: thunk
.text:0040E9F0
.text:0040E9F0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:0040E9F0 iswctype        proc near               ; CODE XREF: sub_4052E0+78B↑p
.text:0040E9F0
.text:0040E9F0 C               = word ptr  4
.text:0040E9F0 Type            = word ptr  8
.text:0040E9F0
.text:0040E9F0                 jmp     ds:__imp_iswctype
.text:0040E9F0 iswctype        endp
.text:0040E9F0
.text:0040E9F0 ; ---------------------------------------------------------------------------
.text:0040E9F6                 align 10h
.text:0040EA00
.text:0040EA00 ; =============== S U B R O U T I N E =======================================
.text:0040EA00
.text:0040EA00 ; Attributes: thunk
.text:0040EA00
.text:0040EA00 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0040EA00 memcpy          proc near               ; CODE XREF: .text:004067D8↑p
.text:0040EA00                                         ; .text:00406821↑p
.text:0040EA00
.text:0040EA00 Src             = dword ptr  8
.text:0040EA00 Size            = dword ptr  0Ch
.text:0040EA00
.text:0040EA00                 jmp     ds:__imp_memcpy
.text:0040EA00 memcpy          endp
.text:0040EA00
.text:0040EA00 ; ---------------------------------------------------------------------------
.text:0040EA06                 align 10h
.text:0040EA10
.text:0040EA10 ; =============== S U B R O U T I N E =======================================
.text:0040EA10
.text:0040EA10 ; Attributes: thunk
.text:0040EA10
.text:0040EA10 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:0040EA10 memset          proc near               ; CODE XREF: .text:00406756↑p
.text:0040EA10
.text:0040EA10 Val             = dword ptr  8
.text:0040EA10 Size            = dword ptr  0Ch
.text:0040EA10
.text:0040EA10                 jmp     ds:__imp_memset
.text:0040EA10 memset          endp
.text:0040EA10
.text:0040EA10 ; ---------------------------------------------------------------------------
.text:0040EA16                 align 10h
.text:0040EA20
.text:0040EA20 ; =============== S U B R O U T I N E =======================================
.text:0040EA20
.text:0040EA20 ; Attributes: thunk
.text:0040EA20
.text:0040EA20 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:0040EA20 calloc          proc near               ; CODE XREF: .text:00406793↑p
.text:0040EA20                                         ; sub_40A430+AC↑p
.text:0040EA20
.text:0040EA20 Count           = dword ptr  4
.text:0040EA20 Size            = dword ptr  8
.text:0040EA20
.text:0040EA20                 jmp     ds:__imp_calloc
.text:0040EA20 calloc          endp
.text:0040EA20
.text:0040EA20 ; ---------------------------------------------------------------------------
.text:0040EA26                 align 10h
.text:0040EA30
.text:0040EA30 ; =============== S U B R O U T I N E =======================================
.text:0040EA30
.text:0040EA30 ; Attributes: thunk
.text:0040EA30
.text:0040EA30 ; void *__cdecl realloc(void *Block, size_t Size)
.text:0040EA30 realloc         proc near               ; CODE XREF: .text:00406690↑p
.text:0040EA30                                         ; sub_4066C0+16↑p ...
.text:0040EA30
.text:0040EA30 Block           = dword ptr  4
.text:0040EA30 Size            = dword ptr  8
.text:0040EA30
.text:0040EA30                 jmp     ds:__imp_realloc
.text:0040EA30 realloc         endp
.text:0040EA30
.text:0040EA30 ; ---------------------------------------------------------------------------
.text:0040EA36                 align 10h
.text:0040EA40
.text:0040EA40 ; =============== S U B R O U T I N E =======================================
.text:0040EA40
.text:0040EA40 ; Attributes: thunk
.text:0040EA40
.text:0040EA40 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:0040EA40 strcmp          proc near               ; CODE XREF: sub_406A14+180↑p
.text:0040EA40                                         ; .text:0040B13B↑p
.text:0040EA40
.text:0040EA40 Str1            = dword ptr  4
.text:0040EA40 Str2            = dword ptr  8
.text:0040EA40
.text:0040EA40                 jmp     ds:__imp_strcmp
.text:0040EA40 strcmp          endp
.text:0040EA40
.text:0040EA40 ; ---------------------------------------------------------------------------
.text:0040EA46                 align 10h
.text:0040EA50
.text:0040EA50 ; =============== S U B R O U T I N E =======================================
.text:0040EA50
.text:0040EA50 ; Attributes: thunk
.text:0040EA50
.text:0040EA50 ; int __cdecl fflush(FILE *Stream)
.text:0040EA50 fflush          proc near               ; CODE XREF: sub_406910+19↑p
.text:0040EA50                                         ; sub_406910+81↑p ...
.text:0040EA50
.text:0040EA50 Stream          = dword ptr  4
.text:0040EA50
.text:0040EA50                 jmp     ds:__imp_fflush
.text:0040EA50 fflush          endp
.text:0040EA50
.text:0040EA50 ; ---------------------------------------------------------------------------
.text:0040EA56                 align 10h
.text:0040EA60
.text:0040EA60 ; =============== S U B R O U T I N E =======================================
.text:0040EA60
.text:0040EA60 ; Attributes: thunk
.text:0040EA60
.text:0040EA60 ; char *__cdecl strerror(int ErrorMessage)
.text:0040EA60 strerror        proc near               ; CODE XREF: sub_406910+A5↑p
.text:0040EA60                                         ; sub_406A14+10F↑p
.text:0040EA60
.text:0040EA60 ErrorMessage    = dword ptr  4
.text:0040EA60
.text:0040EA60                 jmp     ds:__imp_strerror
.text:0040EA60 strerror        endp
.text:0040EA60
.text:0040EA60 ; ---------------------------------------------------------------------------
.text:0040EA66                 align 10h
.text:0040EA70
.text:0040EA70 ; =============== S U B R O U T I N E =======================================
.text:0040EA70
.text:0040EA70 ; Attributes: thunk
.text:0040EA70
.text:0040EA70 ; int __cdecl open_osfhandle(intptr_t OSFileHandle, int Flags)
.text:0040EA70 _open_osfhandle proc near               ; CODE XREF: sub_406BB0+A1↑p
.text:0040EA70
.text:0040EA70 OSFileHandle    = dword ptr  4
.text:0040EA70 Flags           = dword ptr  8
.text:0040EA70
.text:0040EA70                 jmp     ds:__imp__open_osfhandle
.text:0040EA70 _open_osfhandle endp
.text:0040EA70
.text:0040EA70 ; ---------------------------------------------------------------------------
.text:0040EA76                 align 10h
.text:0040EA80
.text:0040EA80 ; =============== S U B R O U T I N E =======================================
.text:0040EA80
.text:0040EA80 ; Attributes: thunk
.text:0040EA80
.text:0040EA80 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:0040EA80 strcat          proc near               ; CODE XREF: sub_406BB0+4D↑p
.text:0040EA80                                         ; sub_406F30+74↑p ...
.text:0040EA80
.text:0040EA80 Destination     = dword ptr  4
.text:0040EA80 Source          = dword ptr  8
.text:0040EA80
.text:0040EA80                 jmp     ds:__imp_strcat
.text:0040EA80 strcat          endp
.text:0040EA80
.text:0040EA80 ; ---------------------------------------------------------------------------
.text:0040EA86                 align 10h
.text:0040EA90
.text:0040EA90 ; =============== S U B R O U T I N E =======================================
.text:0040EA90
.text:0040EA90 ; Attributes: thunk
.text:0040EA90
.text:0040EA90 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:0040EA90 strcpy          proc near               ; CODE XREF: sub_406F30+35↑p
.text:0040EA90                                         ; _win32_longpath+13C↑p ...
.text:0040EA90
.text:0040EA90 Destination     = dword ptr  4
.text:0040EA90 Source          = dword ptr  8
.text:0040EA90
.text:0040EA90                 jmp     ds:__imp_strcpy
.text:0040EA90 strcpy          endp
.text:0040EA90
.text:0040EA90 ; ---------------------------------------------------------------------------
.text:0040EA96                 align 10h
.text:0040EAA0
.text:0040EAA0 ; =============== S U B R O U T I N E =======================================
.text:0040EAA0
.text:0040EAA0 ; Attributes: thunk
.text:0040EAA0
.text:0040EAA0 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:0040EAA0 strrchr         proc near               ; CODE XREF: sub_406F30+49↑p
.text:0040EAA0                                         ; .text:0040766E↑p ...
.text:0040EAA0
.text:0040EAA0 Str             = dword ptr  4
.text:0040EAA0
.text:0040EAA0                 jmp     ds:__imp_strrchr
.text:0040EAA0 strrchr         endp
.text:0040EAA0
.text:0040EAA0 ; ---------------------------------------------------------------------------
.text:0040EAA6                 align 10h
.text:0040EAB0
.text:0040EAB0 ; =============== S U B R O U T I N E =======================================
.text:0040EAB0
.text:0040EAB0 ; Attributes: thunk
.text:0040EAB0
.text:0040EAB0 ; int __cdecl isalpha(int C)
.text:0040EAB0 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:0040EAB0
.text:0040EAB0 C               = dword ptr  4
.text:0040EAB0
.text:0040EAB0                 jmp     ds:__imp_isalpha
.text:0040EAB0 isalpha         endp
.text:0040EAB0
.text:0040EAB0 ; ---------------------------------------------------------------------------
.text:0040EAB6                 align 10h
.text:0040EAC0
.text:0040EAC0 ; =============== S U B R O U T I N E =======================================
.text:0040EAC0
.text:0040EAC0 ; Attributes: thunk
.text:0040EAC0
.text:0040EAC0 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:0040EAC0 _stricmp_0      proc near               ; CODE XREF: .text:00407754↑p
.text:0040EAC0
.text:0040EAC0 String1         = dword ptr  4
.text:0040EAC0 String2         = dword ptr  8
.text:0040EAC0
.text:0040EAC0                 jmp     ds:__imp__stricmp_0
.text:0040EAC0 _stricmp_0      endp
.text:0040EAC0
.text:0040EAC0 ; ---------------------------------------------------------------------------
.text:0040EAC6                 align 10h
.text:0040EAD0
.text:0040EAD0 ; =============== S U B R O U T I N E =======================================
.text:0040EAD0
.text:0040EAD0 ; Attributes: thunk
.text:0040EAD0
.text:0040EAD0 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:0040EAD0 strstr          proc near               ; CODE XREF: sub_408380+3BF↑p
.text:0040EAD0                                         ; sub_408380+3DC↑p ...
.text:0040EAD0
.text:0040EAD0 Str             = dword ptr  4
.text:0040EAD0 SubStr          = dword ptr  8
.text:0040EAD0
.text:0040EAD0                 jmp     ds:__imp_strstr
.text:0040EAD0 strstr          endp
.text:0040EAD0
.text:0040EAD0 ; ---------------------------------------------------------------------------
.text:0040EAD6                 align 10h
.text:0040EAE0
.text:0040EAE0 ; =============== S U B R O U T I N E =======================================
.text:0040EAE0
.text:0040EAE0 ; Attributes: thunk
.text:0040EAE0
.text:0040EAE0 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:0040EAE0 sprintf         proc near               ; CODE XREF: .text:004098DA↑p
.text:0040EAE0                                         ; .text:004098FB↑p ...
.text:0040EAE0
.text:0040EAE0 Buffer          = dword ptr  4
.text:0040EAE0 Format          = dword ptr  8
.text:0040EAE0
.text:0040EAE0                 jmp     ds:__imp_sprintf
.text:0040EAE0 sprintf         endp
.text:0040EAE0
.text:0040EAE0 ; ---------------------------------------------------------------------------
.text:0040EAE6                 align 10h
.text:0040EAF0
.text:0040EAF0 ; =============== S U B R O U T I N E =======================================
.text:0040EAF0
.text:0040EAF0 ; Attributes: thunk
.text:0040EAF0
.text:0040EAF0 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:0040EAF0 strncpy         proc near               ; CODE XREF: sub_40A430+BE↑p
.text:0040EAF0                                         ; .text:0040ACAA↑p ...
.text:0040EAF0
.text:0040EAF0 Destination     = dword ptr  4
.text:0040EAF0 Source          = dword ptr  8
.text:0040EAF0 Count           = dword ptr  0Ch
.text:0040EAF0
.text:0040EAF0                 jmp     ds:__imp_strncpy
.text:0040EAF0 strncpy         endp
.text:0040EAF0
.text:0040EAF0 ; ---------------------------------------------------------------------------
.text:0040EAF6                 align 10h
.text:0040EB00
.text:0040EB00 ; =============== S U B R O U T I N E =======================================
.text:0040EB00
.text:0040EB00 ; Attributes: thunk
.text:0040EB00
.text:0040EB00 ; int __cdecl toupper(int C)
.text:0040EB00 toupper         proc near               ; CODE XREF: sub_40A430+10E↑p
.text:0040EB00
.text:0040EB00 C               = dword ptr  4
.text:0040EB00
.text:0040EB00                 jmp     ds:__imp_toupper
.text:0040EB00 toupper         endp
.text:0040EB00
.text:0040EB00 ; ---------------------------------------------------------------------------
.text:0040EB06                 align 10h
.text:0040EB10
.text:0040EB10 ; =============== S U B R O U T I N E =======================================
.text:0040EB10
.text:0040EB10 ; Attributes: thunk
.text:0040EB10
.text:0040EB10 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:0040EB10 sscanf          proc near               ; CODE XREF: .text:0040B37E↑p
.text:0040EB10
.text:0040EB10 Buffer          = dword ptr  4
.text:0040EB10 Format          = dword ptr  8
.text:0040EB10
.text:0040EB10                 jmp     ds:__imp_sscanf
.text:0040EB10 sscanf          endp
.text:0040EB10
.text:0040EB10 ; ---------------------------------------------------------------------------
.text:0040EB16                 align 10h
.text:0040EB20
.text:0040EB20 ; =============== S U B R O U T I N E =======================================
.text:0040EB20
.text:0040EB20 ; Attributes: thunk
.text:0040EB20
.text:0040EB20 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:0040EB20 strspn          proc near               ; CODE XREF: .text:0040B1CA↑p
.text:0040EB20                                         ; .text:0040B3E4↑p ...
.text:0040EB20
.text:0040EB20 Str             = dword ptr  4
.text:0040EB20 Control         = dword ptr  8
.text:0040EB20
.text:0040EB20                 jmp     ds:__imp_strspn
.text:0040EB20 strspn          endp
.text:0040EB20
.text:0040EB20 ; ---------------------------------------------------------------------------
.text:0040EB26                 align 10h
.text:0040EB30
.text:0040EB30 ; =============== S U B R O U T I N E =======================================
.text:0040EB30
.text:0040EB30 ; Attributes: thunk
.text:0040EB30
.text:0040EB30 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:0040EB30 fopen           proc near               ; CODE XREF: sub_40BC7F+26↑p
.text:0040EB30                                         ; sub_40BC7F+99↑p
.text:0040EB30
.text:0040EB30 FileName        = dword ptr  4
.text:0040EB30 Mode            = dword ptr  8
.text:0040EB30
.text:0040EB30                 jmp     ds:__imp_fopen
.text:0040EB30 fopen           endp
.text:0040EB30
.text:0040EB30 ; ---------------------------------------------------------------------------
.text:0040EB36                 align 10h
.text:0040EB40
.text:0040EB40 ; =============== S U B R O U T I N E =======================================
.text:0040EB40
.text:0040EB40 ; Attributes: thunk
.text:0040EB40
.text:0040EB40 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:0040EB40 _get_osfhandle  proc near               ; CODE XREF: sub_40BE30+3A↑p
.text:0040EB40                                         ; sub_40BEF0+15↑p
.text:0040EB40
.text:0040EB40 FileHandle      = dword ptr  4
.text:0040EB40
.text:0040EB40                 jmp     ds:__imp__get_osfhandle
.text:0040EB40 _get_osfhandle  endp
.text:0040EB40
.text:0040EB40 ; ---------------------------------------------------------------------------
.text:0040EB46                 align 10h
.text:0040EB50
.text:0040EB50 ; =============== S U B R O U T I N E =======================================
.text:0040EB50
.text:0040EB50 ; Attributes: thunk
.text:0040EB50
.text:0040EB50 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:0040EB50 _filelengthi64  proc near               ; CODE XREF: sub_40BEF0+1F↑p
.text:0040EB50
.text:0040EB50 FileHandle      = dword ptr  4
.text:0040EB50
.text:0040EB50                 jmp     ds:__imp__filelengthi64
.text:0040EB50 _filelengthi64  endp
.text:0040EB50
.text:0040EB50 ; ---------------------------------------------------------------------------
.text:0040EB56                 align 10h
.text:0040EB60
.text:0040EB60 ; =============== S U B R O U T I N E =======================================
.text:0040EB60
.text:0040EB60 ; Attributes: thunk
.text:0040EB60
.text:0040EB60 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:0040EB60 strpbrk         proc near               ; CODE XREF: sub_40BF50+87↑p
.text:0040EB60
.text:0040EB60 Str             = dword ptr  4
.text:0040EB60 Control         = dword ptr  8
.text:0040EB60
.text:0040EB60                 jmp     ds:__imp_strpbrk
.text:0040EB60 strpbrk         endp
.text:0040EB60
.text:0040EB60 ; ---------------------------------------------------------------------------
.text:0040EB66                 align 10h
.text:0040EB70
.text:0040EB70 ; =============== S U B R O U T I N E =======================================
.text:0040EB70
.text:0040EB70 ; Attributes: thunk
.text:0040EB70
.text:0040EB70 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:0040EB70 _fdopen         proc near               ; CODE XREF: sub_40BFF0+69↑p
.text:0040EB70
.text:0040EB70 FileHandle      = dword ptr  4
.text:0040EB70 Format          = dword ptr  8
.text:0040EB70
.text:0040EB70                 jmp     ds:__imp__fdopen
.text:0040EB70 _fdopen         endp
.text:0040EB70
.text:0040EB70 ; ---------------------------------------------------------------------------
.text:0040EB76                 align 10h
.text:0040EB80
.text:0040EB80 ; =============== S U B R O U T I N E =======================================
.text:0040EB80
.text:0040EB80 ; Attributes: thunk
.text:0040EB80
.text:0040EB80 ; int __cdecl close(int FileHandle)
.text:0040EB80 _close          proc near               ; CODE XREF: sub_40BFF0+90↑p
.text:0040EB80
.text:0040EB80 FileHandle      = dword ptr  4
.text:0040EB80
.text:0040EB80                 jmp     ds:__imp__close
.text:0040EB80 _close          endp
.text:0040EB80
.text:0040EB80 ; ---------------------------------------------------------------------------
.text:0040EB86                 align 10h
.text:0040EB90
.text:0040EB90 ; =============== S U B R O U T I N E =======================================
.text:0040EB90
.text:0040EB90 ; Attributes: thunk
.text:0040EB90
.text:0040EB90 ; int open(const char *FileName, int OpenFlag, ...)
.text:0040EB90 _open           proc near               ; CODE XREF: sub_40C440:loc_40C7D0↑p
.text:0040EB90
.text:0040EB90 FileName        = dword ptr  4
.text:0040EB90 OpenFlag        = dword ptr  8
.text:0040EB90
.text:0040EB90                 jmp     ds:__imp__open
.text:0040EB90 _open           endp
.text:0040EB90
.text:0040EB90 ; ---------------------------------------------------------------------------
.text:0040EB96                 align 10h
.text:0040EBA0
.text:0040EBA0 ; =============== S U B R O U T I N E =======================================
.text:0040EBA0
.text:0040EBA0 ; Attributes: thunk
.text:0040EBA0
.text:0040EBA0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0040EBA0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0040EBA0
.text:0040EBA0 lpTopLevelExceptionFilter= dword ptr  4
.text:0040EBA0
.text:0040EBA0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0040EBA0 SetUnhandledExceptionFilter endp
.text:0040EBA0
.text:0040EBA0 ; ---------------------------------------------------------------------------
.text:0040EBA6                 align 10h
.text:0040EBB0
.text:0040EBB0 ; =============== S U B R O U T I N E =======================================
.text:0040EBB0
.text:0040EBB0 ; Attributes: noreturn thunk
.text:0040EBB0
.text:0040EBB0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0040EBB0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:0040EBB0
.text:0040EBB0 uExitCode       = dword ptr  4
.text:0040EBB0
.text:0040EBB0                 jmp     ds:__imp_ExitProcess
.text:0040EBB0 ExitProcess     endp
.text:0040EBB0
.text:0040EBB0 ; ---------------------------------------------------------------------------
.text:0040EBB6                 align 10h
.text:0040EBC0
.text:0040EBC0 ; =============== S U B R O U T I N E =======================================
.text:0040EBC0
.text:0040EBC0 ; Attributes: thunk
.text:0040EBC0
.text:0040EBC0 ; HANDLE __stdcall CreateNamedPipeA(LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0040EBC0 CreateNamedPipeA proc near              ; CODE XREF: sub_406BB0+8D↑p
.text:0040EBC0
.text:0040EBC0 lpName          = dword ptr  4
.text:0040EBC0 dwOpenMode      = dword ptr  8
.text:0040EBC0 dwPipeMode      = dword ptr  0Ch
.text:0040EBC0 nMaxInstances   = dword ptr  10h
.text:0040EBC0 nOutBufferSize  = dword ptr  14h
.text:0040EBC0 nInBufferSize   = dword ptr  18h
.text:0040EBC0 nDefaultTimeOut = dword ptr  1Ch
.text:0040EBC0 lpSecurityAttributes= dword ptr  20h
.text:0040EBC0
.text:0040EBC0                 jmp     ds:__imp_CreateNamedPipeA
.text:0040EBC0 CreateNamedPipeA endp
.text:0040EBC0
.text:0040EBC0 ; ---------------------------------------------------------------------------
.text:0040EBC6                 align 10h
.text:0040EBD0
.text:0040EBD0 ; =============== S U B R O U T I N E =======================================
.text:0040EBD0
.text:0040EBD0 ; Attributes: thunk
.text:0040EBD0
.text:0040EBD0 ; BOOL __stdcall AreFileApisANSI()
.text:0040EBD0 AreFileApisANSI proc near               ; CODE XREF: sub_406DB0+89↑p
.text:0040EBD0                 jmp     ds:__imp_AreFileApisANSI
.text:0040EBD0 AreFileApisANSI endp
.text:0040EBD0
.text:0040EBD0 ; ---------------------------------------------------------------------------
.text:0040EBD6                 align 10h
.text:0040EBE0
.text:0040EBE0 ; =============== S U B R O U T I N E =======================================
.text:0040EBE0
.text:0040EBE0 ; Attributes: thunk
.text:0040EBE0
.text:0040EBE0 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:0040EBE0 MultiByteToWideChar proc near           ; CODE XREF: sub_406DB0+BD↑p
.text:0040EBE0
.text:0040EBE0 CodePage        = dword ptr  4
.text:0040EBE0 dwFlags         = dword ptr  8
.text:0040EBE0 lpMultiByteStr  = dword ptr  0Ch
.text:0040EBE0 cbMultiByte     = dword ptr  10h
.text:0040EBE0 lpWideCharStr   = dword ptr  14h
.text:0040EBE0 cchWideChar     = dword ptr  18h
.text:0040EBE0
.text:0040EBE0                 jmp     ds:__imp_MultiByteToWideChar
.text:0040EBE0 MultiByteToWideChar endp
.text:0040EBE0
.text:0040EBE0 ; ---------------------------------------------------------------------------
.text:0040EBE6                 align 10h
.text:0040EBF0
.text:0040EBF0 ; =============== S U B R O U T I N E =======================================
.text:0040EBF0
.text:0040EBF0 ; Attributes: thunk
.text:0040EBF0
.text:0040EBF0 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:0040EBF0 lstrcpyA        proc near               ; CODE XREF: sub_406DB0+128↑p
.text:0040EBF0
.text:0040EBF0 lpString1       = dword ptr  4
.text:0040EBF0 lpString2       = dword ptr  8
.text:0040EBF0
.text:0040EBF0                 jmp     ds:__imp_lstrcpyA
.text:0040EBF0 lstrcpyA        endp
.text:0040EBF0
.text:0040EBF0 ; ---------------------------------------------------------------------------
.text:0040EBF6                 align 10h
.text:0040EC00
.text:0040EC00 ; =============== S U B R O U T I N E =======================================
.text:0040EC00
.text:0040EC00 ; Attributes: thunk
.text:0040EC00
.text:0040EC00 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:0040EC00 SetErrorMode    proc near               ; CODE XREF: sub_406F30+80↑p
.text:0040EC00                                         ; sub_406F30+A9↑p ...
.text:0040EC00
.text:0040EC00 uMode           = dword ptr  4
.text:0040EC00
.text:0040EC00                 jmp     ds:__imp_SetErrorMode
.text:0040EC00 SetErrorMode    endp
.text:0040EC00
.text:0040EC00 ; ---------------------------------------------------------------------------
.text:0040EC06                 align 10h
.text:0040EC10
.text:0040EC10 ; =============== S U B R O U T I N E =======================================
.text:0040EC10
.text:0040EC10 ; Attributes: thunk
.text:0040EC10
.text:0040EC10 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040EC10 FindFirstFileA  proc near               ; CODE XREF: _win32_longpath+CA↑p
.text:0040EC10                                         ; sub_407BC0+CE↑p ...
.text:0040EC10
.text:0040EC10 lpFileName      = dword ptr  4
.text:0040EC10 lpFindFileData  = dword ptr  8
.text:0040EC10
.text:0040EC10                 jmp     ds:__imp_FindFirstFileA
.text:0040EC10 FindFirstFileA  endp
.text:0040EC10
.text:0040EC10 ; ---------------------------------------------------------------------------
.text:0040EC16                 align 10h
.text:0040EC20
.text:0040EC20 ; =============== S U B R O U T I N E =======================================
.text:0040EC20
.text:0040EC20 ; Attributes: thunk
.text:0040EC20
.text:0040EC20 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:0040EC20 FindClose       proc near               ; CODE XREF: _win32_longpath+144↑p
.text:0040EC20                                         ; _win32_longpath+185↑p ...
.text:0040EC20
.text:0040EC20 hFindFile       = dword ptr  4
.text:0040EC20
.text:0040EC20                 jmp     ds:__imp_FindClose
.text:0040EC20 FindClose       endp
.text:0040EC20
.text:0040EC20 ; ---------------------------------------------------------------------------
.text:0040EC26                 align 10h
.text:0040EC30
.text:0040EC30 ; =============== S U B R O U T I N E =======================================
.text:0040EC30
.text:0040EC30 ; Attributes: thunk
.text:0040EC30
.text:0040EC30 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:0040EC30 GetModuleFileNameA proc near            ; CODE XREF: sub_4075D0+1C↑p
.text:0040EC30
.text:0040EC30 hModule         = dword ptr  4
.text:0040EC30 lpFilename      = dword ptr  8
.text:0040EC30 nSize           = dword ptr  0Ch
.text:0040EC30
.text:0040EC30                 jmp     ds:__imp_GetModuleFileNameA
.text:0040EC30 GetModuleFileNameA endp
.text:0040EC30
.text:0040EC30 ; ---------------------------------------------------------------------------
.text:0040EC36                 align 10h
.text:0040EC40
.text:0040EC40 ; =============== S U B R O U T I N E =======================================
.text:0040EC40
.text:0040EC40 ; Attributes: thunk
.text:0040EC40
.text:0040EC40 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:0040EC40 GetModuleHandleA proc near              ; CODE XREF: .text:004077BE↑p
.text:0040EC40                                         ; sub_407BC0+18↑p ...
.text:0040EC40
.text:0040EC40 lpModuleName    = dword ptr  4
.text:0040EC40
.text:0040EC40                 jmp     ds:__imp_GetModuleHandleA
.text:0040EC40 GetModuleHandleA endp
.text:0040EC40
.text:0040EC40 ; ---------------------------------------------------------------------------
.text:0040EC46                 align 10h
.text:0040EC50
.text:0040EC50 ; =============== S U B R O U T I N E =======================================
.text:0040EC50
.text:0040EC50 ; Attributes: thunk
.text:0040EC50
.text:0040EC50 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:0040EC50 GetProcAddress  proc near               ; CODE XREF: .text:004077D1↑p
.text:0040EC50                                         ; sub_407BC0+33↑p ...
.text:0040EC50
.text:0040EC50 hModule         = dword ptr  4
.text:0040EC50 lpProcName      = dword ptr  8
.text:0040EC50
.text:0040EC50                 jmp     ds:__imp_GetProcAddress
.text:0040EC50 GetProcAddress  endp
.text:0040EC50
.text:0040EC50 ; ---------------------------------------------------------------------------
.text:0040EC56                 align 10h
.text:0040EC60
.text:0040EC60 ; =============== S U B R O U T I N E =======================================
.text:0040EC60
.text:0040EC60 ; Attributes: thunk
.text:0040EC60
.text:0040EC60 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:0040EC60 GetShortPathNameA proc near             ; CODE XREF: .text:00407856↑p
.text:0040EC60                                         ; .text:00407880↑p
.text:0040EC60
.text:0040EC60 lpszLongPath    = dword ptr  4
.text:0040EC60 lpszShortPath   = dword ptr  8
.text:0040EC60 cchBuffer       = dword ptr  0Ch
.text:0040EC60
.text:0040EC60                 jmp     ds:__imp_GetShortPathNameA
.text:0040EC60 GetShortPathNameA endp
.text:0040EC60
.text:0040EC60 ; ---------------------------------------------------------------------------
.text:0040EC66                 align 10h
.text:0040EC70
.text:0040EC70 ; =============== S U B R O U T I N E =======================================
.text:0040EC70
.text:0040EC70 ; Attributes: thunk
.text:0040EC70
.text:0040EC70 ; DWORD __stdcall GetLastError()
.text:0040EC70 GetLastError    proc near               ; CODE XREF: sub_407B60+3↑p
.text:0040EC70                                         ; sub_408380:loc_408609↑p ...
.text:0040EC70                 jmp     ds:__imp_GetLastError
.text:0040EC70 GetLastError    endp
.text:0040EC70
.text:0040EC70 ; ---------------------------------------------------------------------------
.text:0040EC76                 align 10h
.text:0040EC80
.text:0040EC80 ; =============== S U B R O U T I N E =======================================
.text:0040EC80
.text:0040EC80 ; Attributes: thunk
.text:0040EC80
.text:0040EC80 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:0040EC80 GetFileAttributesA proc near            ; CODE XREF: sub_407BC0+47↑p
.text:0040EC80                                         ; sub_40A350+62↑p
.text:0040EC80
.text:0040EC80 lpFileName      = dword ptr  4
.text:0040EC80
.text:0040EC80                 jmp     ds:__imp_GetFileAttributesA
.text:0040EC80 GetFileAttributesA endp
.text:0040EC80
.text:0040EC80 ; ---------------------------------------------------------------------------
.text:0040EC86                 align 10h
.text:0040EC90
.text:0040EC90 ; =============== S U B R O U T I N E =======================================
.text:0040EC90
.text:0040EC90 ; Attributes: thunk
.text:0040EC90
.text:0040EC90 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:0040EC90 FreeLibrary     proc near               ; CODE XREF: sub_407BC0+A4↑p
.text:0040EC90                                         ; sub_407D30+11D↑p ...
.text:0040EC90
.text:0040EC90 hLibModule      = dword ptr  4
.text:0040EC90
.text:0040EC90                 jmp     ds:__imp_FreeLibrary
.text:0040EC90 FreeLibrary     endp
.text:0040EC90
.text:0040EC90 ; ---------------------------------------------------------------------------
.text:0040EC96                 align 10h
.text:0040ECA0
.text:0040ECA0 ; =============== S U B R O U T I N E =======================================
.text:0040ECA0
.text:0040ECA0 ; Attributes: thunk
.text:0040ECA0
.text:0040ECA0 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:0040ECA0 LoadLibraryA    proc near               ; CODE XREF: sub_407D30+13↑p
.text:0040ECA0                                         ; sub_408380+134↑p ...
.text:0040ECA0
.text:0040ECA0 lpLibFileName   = dword ptr  4
.text:0040ECA0
.text:0040ECA0                 jmp     ds:__imp_LoadLibraryA
.text:0040ECA0 LoadLibraryA    endp
.text:0040ECA0
.text:0040ECA0 ; ---------------------------------------------------------------------------
.text:0040ECA6                 align 10h
.text:0040ECB0
.text:0040ECB0 ; =============== S U B R O U T I N E =======================================
.text:0040ECB0
.text:0040ECB0 ; Attributes: thunk
.text:0040ECB0
.text:0040ECB0 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040ECB0 FindNextFileA   proc near               ; CODE XREF: sub_407D30+FF↑p
.text:0040ECB0
.text:0040ECB0 hFindFile       = dword ptr  4
.text:0040ECB0 lpFindFileData  = dword ptr  8
.text:0040ECB0
.text:0040ECB0                 jmp     ds:__imp_FindNextFileA
.text:0040ECB0 FindNextFileA   endp
.text:0040ECB0
.text:0040ECB0 ; ---------------------------------------------------------------------------
.text:0040ECB6                 align 10h
.text:0040ECC0
.text:0040ECC0 ; =============== S U B R O U T I N E =======================================
.text:0040ECC0
.text:0040ECC0 ; Attributes: thunk
.text:0040ECC0
.text:0040ECC0 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:0040ECC0 GetFileType     proc near               ; CODE XREF: sub_407EB0+43↑p
.text:0040ECC0                                         ; .text:00408B6A↑p
.text:0040ECC0
.text:0040ECC0 hFile           = dword ptr  4
.text:0040ECC0
.text:0040ECC0                 jmp     ds:__imp_GetFileType
.text:0040ECC0 GetFileType     endp
.text:0040ECC0
.text:0040ECC0 ; ---------------------------------------------------------------------------
.text:0040ECC6                 align 10h
.text:0040ECD0
.text:0040ECD0 ; =============== S U B R O U T I N E =======================================
.text:0040ECD0
.text:0040ECD0 ; Attributes: thunk
.text:0040ECD0
.text:0040ECD0 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:0040ECD0 GetFileInformationByHandle proc near    ; CODE XREF: sub_407EB0+69↑p
.text:0040ECD0
.text:0040ECD0 hFile           = dword ptr  4
.text:0040ECD0 lpFileInformation= dword ptr  8
.text:0040ECD0
.text:0040ECD0                 jmp     ds:__imp_GetFileInformationByHandle
.text:0040ECD0 GetFileInformationByHandle endp
.text:0040ECD0
.text:0040ECD0 ; ---------------------------------------------------------------------------
.text:0040ECD6                 align 10h
.text:0040ECE0
.text:0040ECE0 ; =============== S U B R O U T I N E =======================================
.text:0040ECE0
.text:0040ECE0 ; Attributes: thunk
.text:0040ECE0
.text:0040ECE0 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:0040ECE0 GetFileSize     proc near               ; CODE XREF: sub_407EB0+3F2↑p
.text:0040ECE0
.text:0040ECE0 hFile           = dword ptr  4
.text:0040ECE0 lpFileSizeHigh  = dword ptr  8
.text:0040ECE0
.text:0040ECE0                 jmp     ds:__imp_GetFileSize
.text:0040ECE0 GetFileSize     endp
.text:0040ECE0
.text:0040ECE0 ; ---------------------------------------------------------------------------
.text:0040ECE6                 align 10h
.text:0040ECF0
.text:0040ECF0 ; =============== S U B R O U T I N E =======================================
.text:0040ECF0
.text:0040ECF0 ; Attributes: thunk
.text:0040ECF0
.text:0040ECF0 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:0040ECF0 PeekNamedPipe   proc near               ; CODE XREF: sub_407EB0+439↑p
.text:0040ECF0
.text:0040ECF0 hNamedPipe      = dword ptr  4
.text:0040ECF0 lpBuffer        = dword ptr  8
.text:0040ECF0 nBufferSize     = dword ptr  0Ch
.text:0040ECF0 lpBytesRead     = dword ptr  10h
.text:0040ECF0 lpTotalBytesAvail= dword ptr  14h
.text:0040ECF0 lpBytesLeftThisMessage= dword ptr  18h
.text:0040ECF0
.text:0040ECF0                 jmp     ds:__imp_PeekNamedPipe
.text:0040ECF0 PeekNamedPipe   endp
.text:0040ECF0
.text:0040ECF0 ; ---------------------------------------------------------------------------
.text:0040ECF6                 align 10h
.text:0040ED00
.text:0040ED00 ; =============== S U B R O U T I N E =======================================
.text:0040ED00
.text:0040ED00 ; Attributes: thunk
.text:0040ED00
.text:0040ED00 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:0040ED00 GetDriveTypeA   proc near               ; CODE XREF: sub_408380+4C↑p
.text:0040ED00
.text:0040ED00 lpRootPathName  = dword ptr  4
.text:0040ED00
.text:0040ED00                 jmp     ds:__imp_GetDriveTypeA
.text:0040ED00 GetDriveTypeA   endp
.text:0040ED00
.text:0040ED00 ; ---------------------------------------------------------------------------
.text:0040ED06                 align 10h
.text:0040ED10
.text:0040ED10 ; =============== S U B R O U T I N E =======================================
.text:0040ED10
.text:0040ED10 ; Attributes: thunk
.text:0040ED10
.text:0040ED10 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:0040ED10 GetVolumeInformationA proc near         ; CODE XREF: sub_408880+64↑p
.text:0040ED10                                         ; .text:00408E2C↑p ...
.text:0040ED10
.text:0040ED10 lpRootPathName  = dword ptr  4
.text:0040ED10 lpVolumeNameBuffer= dword ptr  8
.text:0040ED10 nVolumeNameSize = dword ptr  0Ch
.text:0040ED10 lpVolumeSerialNumber= dword ptr  10h
.text:0040ED10 lpMaximumComponentLength= dword ptr  14h
.text:0040ED10 lpFileSystemFlags= dword ptr  18h
.text:0040ED10 lpFileSystemNameBuffer= dword ptr  1Ch
.text:0040ED10 nFileSystemNameSize= dword ptr  20h
.text:0040ED10
.text:0040ED10                 jmp     ds:__imp_GetVolumeInformationA
.text:0040ED10 GetVolumeInformationA endp
.text:0040ED10
.text:0040ED10 ; ---------------------------------------------------------------------------
.text:0040ED16                 align 10h
.text:0040ED20
.text:0040ED20 ; =============== S U B R O U T I N E =======================================
.text:0040ED20
.text:0040ED20 ; Attributes: thunk
.text:0040ED20
.text:0040ED20 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:0040ED20 CreateFileA     proc near               ; CODE XREF: sub_407010+2606↑p
.text:0040ED20                                         ; .text:0040AA23↑p ...
.text:0040ED20
.text:0040ED20 lpFileName      = dword ptr  4
.text:0040ED20 dwDesiredAccess = dword ptr  8
.text:0040ED20 dwShareMode     = dword ptr  0Ch
.text:0040ED20 lpSecurityAttributes= dword ptr  10h
.text:0040ED20 dwCreationDisposition= dword ptr  14h
.text:0040ED20 dwFlagsAndAttributes= dword ptr  18h
.text:0040ED20 hTemplateFile   = dword ptr  1Ch
.text:0040ED20
.text:0040ED20                 jmp     ds:__imp_CreateFileA
.text:0040ED20 CreateFileA     endp
.text:0040ED20
.text:0040ED20 ; ---------------------------------------------------------------------------
.text:0040ED26                 align 10h
.text:0040ED30
.text:0040ED30 ; =============== S U B R O U T I N E =======================================
.text:0040ED30
.text:0040ED30 ; Attributes: thunk
.text:0040ED30
.text:0040ED30 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:0040ED30 CloseHandle     proc near               ; CODE XREF: sub_407010+2621↑p
.text:0040ED30                                         ; .text:0040AA99↑p ...
.text:0040ED30
.text:0040ED30 hObject         = dword ptr  4
.text:0040ED30
.text:0040ED30                 jmp     ds:__imp_CloseHandle
.text:0040ED30 CloseHandle     endp
.text:0040ED30
.text:0040ED30 ; ---------------------------------------------------------------------------
.text:0040ED36                 align 10h
.text:0040ED40
.text:0040ED40 ; =============== S U B R O U T I N E =======================================
.text:0040ED40
.text:0040ED40 ; Attributes: thunk
.text:0040ED40
.text:0040ED40 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:0040ED40 lstrcmpiA       proc near               ; CODE XREF: .text:00409B6B↑p
.text:0040ED40                                         ; .text:00409B82↑p ...
.text:0040ED40
.text:0040ED40 lpString1       = dword ptr  4
.text:0040ED40 lpString2       = dword ptr  8
.text:0040ED40
.text:0040ED40                 jmp     ds:__imp_lstrcmpiA
.text:0040ED40 lstrcmpiA       endp
.text:0040ED40
.text:0040ED40 ; ---------------------------------------------------------------------------
.text:0040ED46                 align 10h
.text:0040ED50
.text:0040ED50 ; =============== S U B R O U T I N E =======================================
.text:0040ED50
.text:0040ED50 ; Attributes: thunk
.text:0040ED50
.text:0040ED50 ; DWORD __stdcall GetVersion()
.text:0040ED50 GetVersion      proc near               ; CODE XREF: .text:00409EF3↑p
.text:0040ED50                 jmp     ds:__imp_GetVersion
.text:0040ED50 GetVersion      endp
.text:0040ED50
.text:0040ED50 ; ---------------------------------------------------------------------------
.text:0040ED56                 align 10h
.text:0040ED60
.text:0040ED60 ; =============== S U B R O U T I N E =======================================
.text:0040ED60
.text:0040ED60 ; Attributes: thunk
.text:0040ED60
.text:0040ED60 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:0040ED60 GetVersionExA   proc near               ; CODE XREF: sub_409F80+32↑p
.text:0040ED60                                         ; sub_409F80+20B↑p
.text:0040ED60
.text:0040ED60 lpVersionInformation= dword ptr  4
.text:0040ED60
.text:0040ED60                 jmp     ds:__imp_GetVersionExA
.text:0040ED60 GetVersionExA   endp
.text:0040ED60
.text:0040ED60 ; ---------------------------------------------------------------------------
.text:0040ED66                 align 10h
.text:0040ED70
.text:0040ED70 ; =============== S U B R O U T I N E =======================================
.text:0040ED70
.text:0040ED70 ; Attributes: thunk
.text:0040ED70
.text:0040ED70 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:0040ED70 GetFullPathNameA proc near              ; CODE XREF: sub_40A220+45↑p
.text:0040ED70                                         ; sub_40A220+ED↑p
.text:0040ED70
.text:0040ED70 lpFileName      = dword ptr  4
.text:0040ED70 nBufferLength   = dword ptr  8
.text:0040ED70 lpBuffer        = dword ptr  0Ch
.text:0040ED70 lpFilePart      = dword ptr  10h
.text:0040ED70
.text:0040ED70                 jmp     ds:__imp_GetFullPathNameA
.text:0040ED70 GetFullPathNameA endp
.text:0040ED70
.text:0040ED70 ; ---------------------------------------------------------------------------
.text:0040ED76                 align 10h
.text:0040ED80
.text:0040ED80 ; =============== S U B R O U T I N E =======================================
.text:0040ED80
.text:0040ED80 ; Attributes: thunk
.text:0040ED80
.text:0040ED80 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040ED80 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040A6D8↑p
.text:0040ED80                                         ; .text:0040A6F4↑p ...
.text:0040ED80
.text:0040ED80 nBufferLength   = dword ptr  4
.text:0040ED80 lpBuffer        = dword ptr  8
.text:0040ED80
.text:0040ED80                 jmp     ds:__imp_GetCurrentDirectoryA
.text:0040ED80 GetCurrentDirectoryA endp
.text:0040ED80
.text:0040ED80 ; ---------------------------------------------------------------------------
.text:0040ED86                 align 10h
.text:0040ED90
.text:0040ED90 ; =============== S U B R O U T I N E =======================================
.text:0040ED90
.text:0040ED90 ; Attributes: thunk
.text:0040ED90
.text:0040ED90 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:0040ED90 DeviceIoControl proc near               ; CODE XREF: .text:0040AA8C↑p
.text:0040ED90                                         ; sub_40AE50+1E5↑p
.text:0040ED90
.text:0040ED90 hDevice         = dword ptr  4
.text:0040ED90 dwIoControlCode = dword ptr  8
.text:0040ED90 lpInBuffer      = dword ptr  0Ch
.text:0040ED90 nInBufferSize   = dword ptr  10h
.text:0040ED90 lpOutBuffer     = dword ptr  14h
.text:0040ED90 nOutBufferSize  = dword ptr  18h
.text:0040ED90 lpBytesReturned = dword ptr  1Ch
.text:0040ED90 lpOverlapped    = dword ptr  20h
.text:0040ED90
.text:0040ED90                 jmp     ds:__imp_DeviceIoControl
.text:0040ED90 DeviceIoControl endp
.text:0040ED90
.text:0040ED90 ; ---------------------------------------------------------------------------
.text:0040ED96                 align 10h
.text:0040EDA0
.text:0040EDA0 ; =============== S U B R O U T I N E =======================================
.text:0040EDA0
.text:0040EDA0 ; Attributes: thunk
.text:0040EDA0
.text:0040EDA0 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:0040EDA0 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:0040ADE3↑p
.text:0040EDA0                                         ; sub_40AE50+7B↑p ...
.text:0040EDA0
.text:0040EDA0 lpRootPathName  = dword ptr  4
.text:0040EDA0 lpSectorsPerCluster= dword ptr  8
.text:0040EDA0 lpBytesPerSector= dword ptr  0Ch
.text:0040EDA0 lpNumberOfFreeClusters= dword ptr  10h
.text:0040EDA0 lpTotalNumberOfClusters= dword ptr  14h
.text:0040EDA0
.text:0040EDA0                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:0040EDA0 GetDiskFreeSpaceA endp
.text:0040EDA0
.text:0040EDA0 ; ---------------------------------------------------------------------------
.text:0040EDA6                 align 10h
.text:0040EDB0
.text:0040EDB0 ; =============== S U B R O U T I N E =======================================
.text:0040EDB0
.text:0040EDB0 ; Attributes: thunk
.text:0040EDB0
.text:0040EDB0 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040EDB0 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040B53F↑p
.text:0040EDB0                                         ; .text:0040B56E↑p ...
.text:0040EDB0
.text:0040EDB0 nBufferLength   = dword ptr  4
.text:0040EDB0 lpBuffer        = dword ptr  8
.text:0040EDB0
.text:0040EDB0                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:0040EDB0 GetLogicalDriveStringsA endp
.text:0040EDB0
.text:0040EDB0 ; ---------------------------------------------------------------------------
.text:0040EDB6                 align 10h
.text:0040EDC0
.text:0040EDC0 ; =============== S U B R O U T I N E =======================================
.text:0040EDC0
.text:0040EDC0 ; Attributes: thunk
.text:0040EDC0
.text:0040EDC0 ; HANDLE __stdcall GetProcessHeap()
.text:0040EDC0 GetProcessHeap  proc near               ; CODE XREF: .text:0040B549↑p
.text:0040EDC0                                         ; sub_40BC20+24↑p ...
.text:0040EDC0                 jmp     ds:__imp_GetProcessHeap
.text:0040EDC0 GetProcessHeap  endp
.text:0040EDC0
.text:0040EDC0 ; ---------------------------------------------------------------------------
.text:0040EDC6                 align 10h
.text:0040EDD0
.text:0040EDD0 ; =============== S U B R O U T I N E =======================================
.text:0040EDD0
.text:0040EDD0 ; Attributes: thunk
.text:0040EDD0
.text:0040EDD0 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:0040EDD0 HeapAlloc       proc near               ; CODE XREF: .text:0040B55D↑p
.text:0040EDD0                                         ; sub_40BC20+38↑p ...
.text:0040EDD0
.text:0040EDD0 hHeap           = dword ptr  4
.text:0040EDD0 dwFlags         = dword ptr  8
.text:0040EDD0 dwBytes         = dword ptr  0Ch
.text:0040EDD0
.text:0040EDD0                 jmp     ds:__imp_HeapAlloc
.text:0040EDD0 HeapAlloc       endp
.text:0040EDD0
.text:0040EDD0 ; ---------------------------------------------------------------------------
.text:0040EDD6                 align 10h
.text:0040EDE0
.text:0040EDE0 ; =============== S U B R O U T I N E =======================================
.text:0040EDE0
.text:0040EDE0 ; Attributes: thunk
.text:0040EDE0
.text:0040EDE0 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:0040EDE0 HeapFree        proc near               ; CODE XREF: .text:0040BD5D↑p
.text:0040EDE0
.text:0040EDE0 hHeap           = dword ptr  4
.text:0040EDE0 dwFlags         = dword ptr  8
.text:0040EDE0 lpMem           = dword ptr  0Ch
.text:0040EDE0
.text:0040EDE0                 jmp     ds:__imp_HeapFree
.text:0040EDE0 HeapFree        endp
.text:0040EDE0
.text:0040EDE0 ; ---------------------------------------------------------------------------
.text:0040EDE6                 align 10h
.text:0040EDF0
.text:0040EDF0 ; =============== S U B R O U T I N E =======================================
.text:0040EDF0
.text:0040EDF0 ; Attributes: thunk
.text:0040EDF0
.text:0040EDF0 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:0040EDF0 UnlockFile      proc near               ; CODE XREF: sub_40BEF0+40↑p
.text:0040EDF0
.text:0040EDF0 hFile           = dword ptr  4
.text:0040EDF0 dwFileOffsetLow = dword ptr  8
.text:0040EDF0 dwFileOffsetHigh= dword ptr  0Ch
.text:0040EDF0 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:0040EDF0 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:0040EDF0
.text:0040EDF0                 jmp     ds:__imp_UnlockFile
.text:0040EDF0 UnlockFile      endp
.text:0040EDF0
.text:0040EDF0 ; ---------------------------------------------------------------------------
.text:0040EDF6                 align 10h
.text:0040EE00
.text:0040EE00 ; =============== S U B R O U T I N E =======================================
.text:0040EE00
.text:0040EE00 ; Attributes: thunk
.text:0040EE00
.text:0040EE00 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0040EE00 CreateDirectoryA proc near              ; CODE XREF: sub_40C870+22↑p
.text:0040EE00
.text:0040EE00 lpPathName      = dword ptr  4
.text:0040EE00 lpSecurityAttributes= dword ptr  8
.text:0040EE00
.text:0040EE00                 jmp     ds:__imp_CreateDirectoryA
.text:0040EE00 CreateDirectoryA endp
.text:0040EE00
.text:0040EE00 ; ---------------------------------------------------------------------------
.text:0040EE06                 align 10h
.text:0040EE10
.text:0040EE10 ; =============== S U B R O U T I N E =======================================
.text:0040EE10
.text:0040EE10 ; Attributes: thunk
.text:0040EE10
.text:0040EE10 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:0040EE10 GetTimeZoneInformation proc near        ; CODE XREF: sub_40C970+22↑p
.text:0040EE10
.text:0040EE10 lpTimeZoneInformation= dword ptr  4
.text:0040EE10
.text:0040EE10                 jmp     ds:__imp_GetTimeZoneInformation
.text:0040EE10 GetTimeZoneInformation endp
.text:0040EE10
.text:0040EE10 ; ---------------------------------------------------------------------------
.text:0040EE16                 align 10h
.text:0040EE20
.text:0040EE20 ; =============== S U B R O U T I N E =======================================
.text:0040EE20
.text:0040EE20 ; Attributes: thunk
.text:0040EE20
.text:0040EE20 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:0040EE20 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_40C970+4F↑p
.text:0040EE20
.text:0040EE20 lpSystemTimeAsFileTime= dword ptr  4
.text:0040EE20
.text:0040EE20                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:0040EE20 GetSystemTimeAsFileTime endp
.text:0040EE20
.text:0040EE20 ; ---------------------------------------------------------------------------
.text:0040EE26                 align 10h
.text:0040EE30
.text:0040EE30 ; =============== S U B R O U T I N E =======================================
.text:0040EE30
.text:0040EE30 ; Attributes: thunk
.text:0040EE30
.text:0040EE30 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:0040EE30 RegOpenKeyExA   proc near               ; CODE XREF: .text:00409AF1↑p
.text:0040EE30
.text:0040EE30 hKey            = dword ptr  4
.text:0040EE30 lpSubKey        = dword ptr  8
.text:0040EE30 ulOptions       = dword ptr  0Ch
.text:0040EE30 samDesired      = dword ptr  10h
.text:0040EE30 phkResult       = dword ptr  14h
.text:0040EE30
.text:0040EE30                 jmp     ds:__imp_RegOpenKeyExA
.text:0040EE30 RegOpenKeyExA   endp
.text:0040EE30
.text:0040EE30 ; ---------------------------------------------------------------------------
.text:0040EE36                 align 10h
.text:0040EE40
.text:0040EE40 ; =============== S U B R O U T I N E =======================================
.text:0040EE40
.text:0040EE40 ; Attributes: thunk
.text:0040EE40
.text:0040EE40 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:0040EE40 RegQueryValueExA proc near              ; CODE XREF: .text:00409B34↑p
.text:0040EE40
.text:0040EE40 hKey            = dword ptr  4
.text:0040EE40 lpValueName     = dword ptr  8
.text:0040EE40 lpReserved      = dword ptr  0Ch
.text:0040EE40 lpType          = dword ptr  10h
.text:0040EE40 lpData          = dword ptr  14h
.text:0040EE40 lpcbData        = dword ptr  18h
.text:0040EE40
.text:0040EE40                 jmp     ds:__imp_RegQueryValueExA
.text:0040EE40 RegQueryValueExA endp
.text:0040EE40
.text:0040EE40 ; ---------------------------------------------------------------------------
.text:0040EE46                 align 10h
.text:0040EE50
.text:0040EE50 ; =============== S U B R O U T I N E =======================================
.text:0040EE50
.text:0040EE50 ; Attributes: thunk
.text:0040EE50
.text:0040EE50 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:0040EE50 RegCloseKey     proc near               ; CODE XREF: .text:00409B58↑p
.text:0040EE50
.text:0040EE50 hKey            = dword ptr  4
.text:0040EE50
.text:0040EE50                 jmp     ds:__imp_RegCloseKey
.text:0040EE50 RegCloseKey     endp
.text:0040EE50
.text:0040EE50 ; ---------------------------------------------------------------------------
.text:0040EE56                 db 2 dup(90h)
.text:0040EE58                 dd 2 dup(0)
.text:0040EE60                 dd 21400h, 0
.text:0040EE68                 dd 0C0h, 46000000h
.text:0040EE70 ; const IID rclsid
.text:0040EE70 rclsid          dd 21401h               ; Data1
.text:0040EE70                                         ; DATA XREF: sub_406DB0+4B↑o
.text:0040EE70                 dw 0                    ; Data2
.text:0040EE70                 dw 0                    ; Data3
.text:0040EE70                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040EE80                 dd 214A0h, 0
.text:0040EE88                 dd 0C0h, 46000000h, 214A1h, 0
.text:0040EE98                 dd 0C0h, 46000000h, 214D0h, 0
.text:0040EEA8                 dd 0C0h, 46000000h, 214D1h, 0
.text:0040EEB8                 dd 0C0h, 46000000h, 214D2h, 0
.text:0040EEC8                 dd 0C0h, 46000000h, 214E1h, 0
.text:0040EED8                 dd 0C0h, 46000000h, 214E2h, 0
.text:0040EEE8                 dd 0C0h, 46000000h, 214E3h, 0
.text:0040EEF8                 dd 0C0h, 46000000h, 214E4h, 0
.text:0040EF08                 dd 0C0h, 46000000h, 21500h, 0
.text:0040EF18                 dd 0C0h, 46000000h, 214E5h, 0
.text:0040EF28                 dd 0C0h, 46000000h, 214E6h, 0
.text:0040EF38                 dd 0C0h, 46000000h, 214E8h, 0
.text:0040EF48                 dd 0C0h, 46000000h, 214E9h, 0
.text:0040EF58                 dd 0C0h, 46000000h, 214EAh, 0
.text:0040EF68                 dd 0C0h, 46000000h, 214EBh, 0
.text:0040EF78                 dd 0C0h, 46000000h
.text:0040EF80 ; const IID riid
.text:0040EF80 riid            dd 214EEh               ; Data1
.text:0040EF80                                         ; DATA XREF: sub_406DB0+2B↑o
.text:0040EF80                 dw 0                    ; Data2
.text:0040EF80                 dw 0                    ; Data3
.text:0040EF80                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040EF90                 dd 214EFh, 0
.text:0040EF98                 dd 0C0h, 46000000h, 214F0h, 0
.text:0040EFA8                 dd 0C0h, 46000000h, 214F1h, 0
.text:0040EFB8                 dd 0C0h, 46000000h, 214F2h, 0
.text:0040EFC8                 dd 0C0h, 46000000h, 214F3h, 0
.text:0040EFD8                 dd 0C0h, 46000000h, 214F4h, 0
.text:0040EFE8                 dd 0C0h, 46000000h, 214F5h, 0
.text:0040EFF8                 dd 0C0h, 46000000h, 214F6h, 0
.text:0040F008                 dd 0C0h, 46000000h, 214F7h, 0
.text:0040F018                 dd 0C0h, 46000000h, 214F8h, 0
.text:0040F028                 dd 0C0h, 46000000h, 214F9h, 0
.text:0040F038                 dd 0C0h, 46000000h, 214FAh, 0
.text:0040F048                 dd 0C0h, 46000000h, 214FBh, 0
.text:0040F058                 dd 0C0h, 46000000h, 214FCh, 0
.text:0040F068                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:0040F068                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:0040F068                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:0040F068                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:0040F068                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040F068                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:0040F068                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:0040F068                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040F068                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:0040F068                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:0040F138                 dd 0C0h, 46000000h, 2DF05h, 0
.text:0040F148                 dd 0C0h, 46000000h, 2DF06h, 0
.text:0040F158                 dd 0C0h, 46000000h, 2DF01h, 0
.text:0040F168                 dd 0C0h, 46000000h, 2DF09h, 0
.text:0040F178                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:0040F178                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:0040F178                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:0040F178                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:0040F178                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:0040F178                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:0040F178                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:0040F200 dword_40F200    dd 0FFFFFFFFh           ; DATA XREF: .text:0040E019↑r
.text:0040F200                                         ; .text:loc_40E040↑r ...
.text:0040F204 dword_40F204    dd 0                    ; DATA XREF: .text:loc_40E04C↑r
.text:0040F204                                         ; sub_40E070:loc_40E0BD↑r
.text:0040F208                 dd 0FFFFFFFFh
.text:0040F20C dword_40F20C    dd 7Dh dup(0)           ; DATA XREF: .data:off_4100C4↓o
.text:0040F400                 dd 300h dup(?)
.text:0040F400 _text           ends
.text:0040F400
.data:00410000 ; Section 2. (virtual address 00010000)
.data:00410000 ; Virtual size                  : 000000E0 (    224.)
.data:00410000 ; Section size in file          : 00000200 (    512.)
.data:00410000 ; Offset to raw data for section: 0000E800
.data:00410000 ; Flags C0000040: Data Readable Writable
.data:00410000 ; Alignment     : default
.data:00410000 ; ===========================================================================
.data:00410000
.data:00410000 ; Segment type: Pure data
.data:00410000 ; Segment permissions: Read/Write
.data:00410000 _data           segment para public 'DATA' use32
.data:00410000                 assume cs:_data
.data:00410000                 ;org 410000h
.data:00410000 dword_410000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00410000                                         ; sub_401080+CC↑r
.data:00410004 dword_410004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00410004                                         ; sub_401080+D4↑r
.data:00410008                 align 10h
.data:00410010 dword_410010    dd 1                    ; DATA XREF: sub_4018C0:loc_401B91↑r
.data:00410010                                         ; sub_4018C0+4AC↑r ...
.data:00410014 dword_410014    dd 1                    ; DATA XREF: sub_403520+11↑r
.data:00410014                                         ; .text:004035C1↑r
.data:00410018 dword_410018    dd 3Fh                  ; DATA XREF: sub_403520+7D↑w
.data:00410018                                         ; .text:0040362D↑w
.data:0041001C                 align 10h
.data:00410020 ; char *Buffer
.data:00410020 Buffer          dd offset aCopyrightC2005
.data:00410020                                         ; DATA XREF: sub_404810+DC↑r
.data:00410020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00410024                 align 10h
.data:00410030 dword_410030    dd 1                    ; DATA XREF: sub_406420+22↑r
.data:00410030                                         ; sub_406420+65↑r ...
.data:00410034 dword_410034    dd 100h                 ; DATA XREF: sub_406420+3F↑o
.data:00410034                                         ; sub_406420+1A2↑r ...
.data:00410038 off_410038      dd offset unk_411040    ; DATA XREF: sub_406420+1AA↑r
.data:0041003C ; void *off_41003C
.data:0041003C off_41003C      dd offset dword_410034  ; DATA XREF: sub_406420+39↑r
.data:0041003C                                         ; sub_406420+60↑w ...
.data:00410040 ; int Code
.data:00410040 Code            dd 1                    ; DATA XREF: sub_4044E0+18↑r
.data:00410040                                         ; sub_404B90+6D↑r ...
.data:00410044                 align 10h
.data:00410050 dword_410050    dd 200h                 ; DATA XREF: sub_407EB0+2ED↑r
.data:00410050                                         ; sub_407EB0+2F8↑r ...
.data:00410054 ; char *off_410054
.data:00410054 off_410054      dd offset aComExeBatCmd ; DATA XREF: sub_408380+3D3↑r
.data:00410054                                         ; sub_408380+400↑r ...
.data:00410054                                         ; ".com;.exe;.bat;.cmd"
.data:00410058                 align 10h
.data:00410060 dword_410060    dd 1                    ; DATA XREF: .text:loc_4099A7↑r
.data:00410060                                         ; sub_409F80+202↑w
.data:00410064                 align 10h
.data:00410070 byte_410070     db 41h                  ; DATA XREF: sub_40A550+6B↑w
.data:00410070                                         ; sub_40A550:loc_40A664↑r
.data:00410071                 align 10h
.data:00410080 off_410080      dd offset aNotset       ; DATA XREF: .text:0040B11A↑r
.data:00410080                                         ; .text:0040BD62↑r
.data:00410080                                         ; "notset"
.data:00410084 off_410084      dd offset aNotset       ; DATA XREF: .text:0040B132↑r
.data:00410084                                         ; .text:0040B154↑r ...
.data:00410084                                         ; "notset"
.data:00410088                 align 10h
.data:00410090 dword_410090    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00410094                 align 10h
.data:004100A0 ; int Mode
.data:004100A0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004100A0                                         ; sub_401080+80↑r ...
.data:004100A4                 align 10h
.data:004100B0 dword_4100B0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004100B0                                         ; sub_401080+BA↑r
.data:004100B4                 align 10h
.data:004100C0 dword_4100C0    dd 0                    ; DATA XREF: sub_40E070+9↑r
.data:004100C0                                         ; sub_40E070+1D↑w
.data:004100C4 off_4100C4      dd offset dword_40F20C  ; DATA XREF: sub_40DFE0+6↑r
.data:004100C4                                         ; sub_40DFE0+17↑r ...
.data:004100C8                 align 1000h
.data:004100C8 _data           ends
.data:004100C8
.bss:00411000 ; Section 3. (virtual address 00011000)
.bss:00411000 ; Virtual size                  : 00000550 (   1360.)
.bss:00411000 ; Section size in file          : 00000000 (      0.)
.bss:00411000 ; Offset to raw data for section: 00000000
.bss:00411000 ; Flags C0000080: Bss Readable Writable
.bss:00411000 ; Alignment     : default
.bss:00411000 ; ===========================================================================
.bss:00411000
.bss:00411000 ; Segment type: Uninitialized
.bss:00411000 ; Segment permissions: Read/Write
.bss:00411000 _bss            segment para public 'BSS' use32
.bss:00411000                 assume cs:_bss
.bss:00411000                 ;org 411000h
.bss:00411000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00411000 dword_411000    dd ?                    ; DATA XREF: sub_403520+9↑o
.bss:00411000                                         ; sub_403520+17↑w ...
.bss:00411004 dword_411004    dd ?                    ; DATA XREF: sub_403520+21↑w
.bss:00411004                                         ; .text:004035D9↑w
.bss:00411008 dword_411008    dd ?                    ; DATA XREF: sub_403520+77↑r
.bss:00411008                                         ; .text:00403627↑r
.bss:0041100C dword_41100C    dd ?                    ; DATA XREF: sub_403520+6B↑r
.bss:0041100C                                         ; .text:0040361B↑r
.bss:00411010                 db    ? ;
.bss:00411011                 db    ? ;
.bss:00411012                 db    ? ;
.bss:00411013                 db    ? ;
.bss:00411014                 db    ? ;
.bss:00411015                 db    ? ;
.bss:00411016                 db    ? ;
.bss:00411017                 db    ? ;
.bss:00411018                 db    ? ;
.bss:00411019                 db    ? ;
.bss:0041101A                 db    ? ;
.bss:0041101B                 db    ? ;
.bss:0041101C                 db    ? ;
.bss:0041101D                 db    ? ;
.bss:0041101E                 db    ? ;
.bss:0041101F                 db    ? ;
.bss:00411020                 db    ? ;
.bss:00411021                 db    ? ;
.bss:00411022                 db    ? ;
.bss:00411023                 db    ? ;
.bss:00411024                 db    ? ;
.bss:00411025                 db    ? ;
.bss:00411026                 db    ? ;
.bss:00411027                 db    ? ;
.bss:00411028                 db    ? ;
.bss:00411029                 db    ? ;
.bss:0041102A                 db    ? ;
.bss:0041102B                 db    ? ;
.bss:0041102C                 db    ? ;
.bss:0041102D                 db    ? ;
.bss:0041102E                 db    ? ;
.bss:0041102F                 db    ? ;
.bss:00411030 ; char *dword_411030
.bss:00411030 dword_411030    dd ?                    ; DATA XREF: .text:00404B64↑w
.bss:00411030                                         ; sub_404B90+58↑r
.bss:00411034                 align 10h
.bss:00411040 unk_411040      db    ? ;               ; DATA XREF: sub_406420+100↑o
.bss:00411040                                         ; .data:off_410038↑o
.bss:00411041                 db    ? ;
.bss:00411042                 db    ? ;
.bss:00411043                 db    ? ;
.bss:00411044                 db    ? ;
.bss:00411045                 db    ? ;
.bss:00411046                 db    ? ;
.bss:00411047                 db    ? ;
.bss:00411048                 db    ? ;
.bss:00411049                 db    ? ;
.bss:0041104A                 db    ? ;
.bss:0041104B                 db    ? ;
.bss:0041104C                 db    ? ;
.bss:0041104D                 db    ? ;
.bss:0041104E                 db    ? ;
.bss:0041104F                 db    ? ;
.bss:00411050                 db    ? ;
.bss:00411051                 db    ? ;
.bss:00411052                 db    ? ;
.bss:00411053                 db    ? ;
.bss:00411054                 db    ? ;
.bss:00411055                 db    ? ;
.bss:00411056                 db    ? ;
.bss:00411057                 db    ? ;
.bss:00411058                 db    ? ;
.bss:00411059                 db    ? ;
.bss:0041105A                 db    ? ;
.bss:0041105B                 db    ? ;
.bss:0041105C                 db    ? ;
.bss:0041105D                 db    ? ;
.bss:0041105E                 db    ? ;
.bss:0041105F                 db    ? ;
.bss:00411060                 db    ? ;
.bss:00411061                 db    ? ;
.bss:00411062                 db    ? ;
.bss:00411063                 db    ? ;
.bss:00411064                 db    ? ;
.bss:00411065                 db    ? ;
.bss:00411066                 db    ? ;
.bss:00411067                 db    ? ;
.bss:00411068                 db    ? ;
.bss:00411069                 db    ? ;
.bss:0041106A                 db    ? ;
.bss:0041106B                 db    ? ;
.bss:0041106C                 db    ? ;
.bss:0041106D                 db    ? ;
.bss:0041106E                 db    ? ;
.bss:0041106F                 db    ? ;
.bss:00411070                 db    ? ;
.bss:00411071                 db    ? ;
.bss:00411072                 db    ? ;
.bss:00411073                 db    ? ;
.bss:00411074                 db    ? ;
.bss:00411075                 db    ? ;
.bss:00411076                 db    ? ;
.bss:00411077                 db    ? ;
.bss:00411078                 db    ? ;
.bss:00411079                 db    ? ;
.bss:0041107A                 db    ? ;
.bss:0041107B                 db    ? ;
.bss:0041107C                 db    ? ;
.bss:0041107D                 db    ? ;
.bss:0041107E                 db    ? ;
.bss:0041107F                 db    ? ;
.bss:00411080                 db    ? ;
.bss:00411081                 db    ? ;
.bss:00411082                 db    ? ;
.bss:00411083                 db    ? ;
.bss:00411084                 db    ? ;
.bss:00411085                 db    ? ;
.bss:00411086                 db    ? ;
.bss:00411087                 db    ? ;
.bss:00411088                 db    ? ;
.bss:00411089                 db    ? ;
.bss:0041108A                 db    ? ;
.bss:0041108B                 db    ? ;
.bss:0041108C                 db    ? ;
.bss:0041108D                 db    ? ;
.bss:0041108E                 db    ? ;
.bss:0041108F                 db    ? ;
.bss:00411090                 db    ? ;
.bss:00411091                 db    ? ;
.bss:00411092                 db    ? ;
.bss:00411093                 db    ? ;
.bss:00411094                 db    ? ;
.bss:00411095                 db    ? ;
.bss:00411096                 db    ? ;
.bss:00411097                 db    ? ;
.bss:00411098                 db    ? ;
.bss:00411099                 db    ? ;
.bss:0041109A                 db    ? ;
.bss:0041109B                 db    ? ;
.bss:0041109C                 db    ? ;
.bss:0041109D                 db    ? ;
.bss:0041109E                 db    ? ;
.bss:0041109F                 db    ? ;
.bss:004110A0                 db    ? ;
.bss:004110A1                 db    ? ;
.bss:004110A2                 db    ? ;
.bss:004110A3                 db    ? ;
.bss:004110A4                 db    ? ;
.bss:004110A5                 db    ? ;
.bss:004110A6                 db    ? ;
.bss:004110A7                 db    ? ;
.bss:004110A8                 db    ? ;
.bss:004110A9                 db    ? ;
.bss:004110AA                 db    ? ;
.bss:004110AB                 db    ? ;
.bss:004110AC                 db    ? ;
.bss:004110AD                 db    ? ;
.bss:004110AE                 db    ? ;
.bss:004110AF                 db    ? ;
.bss:004110B0                 db    ? ;
.bss:004110B1                 db    ? ;
.bss:004110B2                 db    ? ;
.bss:004110B3                 db    ? ;
.bss:004110B4                 db    ? ;
.bss:004110B5                 db    ? ;
.bss:004110B6                 db    ? ;
.bss:004110B7                 db    ? ;
.bss:004110B8                 db    ? ;
.bss:004110B9                 db    ? ;
.bss:004110BA                 db    ? ;
.bss:004110BB                 db    ? ;
.bss:004110BC                 db    ? ;
.bss:004110BD                 db    ? ;
.bss:004110BE                 db    ? ;
.bss:004110BF                 db    ? ;
.bss:004110C0                 db    ? ;
.bss:004110C1                 db    ? ;
.bss:004110C2                 db    ? ;
.bss:004110C3                 db    ? ;
.bss:004110C4                 db    ? ;
.bss:004110C5                 db    ? ;
.bss:004110C6                 db    ? ;
.bss:004110C7                 db    ? ;
.bss:004110C8                 db    ? ;
.bss:004110C9                 db    ? ;
.bss:004110CA                 db    ? ;
.bss:004110CB                 db    ? ;
.bss:004110CC                 db    ? ;
.bss:004110CD                 db    ? ;
.bss:004110CE                 db    ? ;
.bss:004110CF                 db    ? ;
.bss:004110D0                 db    ? ;
.bss:004110D1                 db    ? ;
.bss:004110D2                 db    ? ;
.bss:004110D3                 db    ? ;
.bss:004110D4                 db    ? ;
.bss:004110D5                 db    ? ;
.bss:004110D6                 db    ? ;
.bss:004110D7                 db    ? ;
.bss:004110D8                 db    ? ;
.bss:004110D9                 db    ? ;
.bss:004110DA                 db    ? ;
.bss:004110DB                 db    ? ;
.bss:004110DC                 db    ? ;
.bss:004110DD                 db    ? ;
.bss:004110DE                 db    ? ;
.bss:004110DF                 db    ? ;
.bss:004110E0                 db    ? ;
.bss:004110E1                 db    ? ;
.bss:004110E2                 db    ? ;
.bss:004110E3                 db    ? ;
.bss:004110E4                 db    ? ;
.bss:004110E5                 db    ? ;
.bss:004110E6                 db    ? ;
.bss:004110E7                 db    ? ;
.bss:004110E8                 db    ? ;
.bss:004110E9                 db    ? ;
.bss:004110EA                 db    ? ;
.bss:004110EB                 db    ? ;
.bss:004110EC                 db    ? ;
.bss:004110ED                 db    ? ;
.bss:004110EE                 db    ? ;
.bss:004110EF                 db    ? ;
.bss:004110F0                 db    ? ;
.bss:004110F1                 db    ? ;
.bss:004110F2                 db    ? ;
.bss:004110F3                 db    ? ;
.bss:004110F4                 db    ? ;
.bss:004110F5                 db    ? ;
.bss:004110F6                 db    ? ;
.bss:004110F7                 db    ? ;
.bss:004110F8                 db    ? ;
.bss:004110F9                 db    ? ;
.bss:004110FA                 db    ? ;
.bss:004110FB                 db    ? ;
.bss:004110FC                 db    ? ;
.bss:004110FD                 db    ? ;
.bss:004110FE                 db    ? ;
.bss:004110FF                 db    ? ;
.bss:00411100                 db    ? ;
.bss:00411101                 db    ? ;
.bss:00411102                 db    ? ;
.bss:00411103                 db    ? ;
.bss:00411104                 db    ? ;
.bss:00411105                 db    ? ;
.bss:00411106                 db    ? ;
.bss:00411107                 db    ? ;
.bss:00411108                 db    ? ;
.bss:00411109                 db    ? ;
.bss:0041110A                 db    ? ;
.bss:0041110B                 db    ? ;
.bss:0041110C                 db    ? ;
.bss:0041110D                 db    ? ;
.bss:0041110E                 db    ? ;
.bss:0041110F                 db    ? ;
.bss:00411110                 db    ? ;
.bss:00411111                 db    ? ;
.bss:00411112                 db    ? ;
.bss:00411113                 db    ? ;
.bss:00411114                 db    ? ;
.bss:00411115                 db    ? ;
.bss:00411116                 db    ? ;
.bss:00411117                 db    ? ;
.bss:00411118                 db    ? ;
.bss:00411119                 db    ? ;
.bss:0041111A                 db    ? ;
.bss:0041111B                 db    ? ;
.bss:0041111C                 db    ? ;
.bss:0041111D                 db    ? ;
.bss:0041111E                 db    ? ;
.bss:0041111F                 db    ? ;
.bss:00411120                 db    ? ;
.bss:00411121                 db    ? ;
.bss:00411122                 db    ? ;
.bss:00411123                 db    ? ;
.bss:00411124                 db    ? ;
.bss:00411125                 db    ? ;
.bss:00411126                 db    ? ;
.bss:00411127                 db    ? ;
.bss:00411128                 db    ? ;
.bss:00411129                 db    ? ;
.bss:0041112A                 db    ? ;
.bss:0041112B                 db    ? ;
.bss:0041112C                 db    ? ;
.bss:0041112D                 db    ? ;
.bss:0041112E                 db    ? ;
.bss:0041112F                 db    ? ;
.bss:00411130                 db    ? ;
.bss:00411131                 db    ? ;
.bss:00411132                 db    ? ;
.bss:00411133                 db    ? ;
.bss:00411134                 db    ? ;
.bss:00411135                 db    ? ;
.bss:00411136                 db    ? ;
.bss:00411137                 db    ? ;
.bss:00411138                 db    ? ;
.bss:00411139                 db    ? ;
.bss:0041113A                 db    ? ;
.bss:0041113B                 db    ? ;
.bss:0041113C                 db    ? ;
.bss:0041113D                 db    ? ;
.bss:0041113E                 db    ? ;
.bss:0041113F                 db    ? ;
.bss:00411140 dword_411140    dd ?                    ; DATA XREF: .text:loc_405DB1↑o
.bss:00411140                                         ; .text:loc_405DD0↑o ...
.bss:00411144 dword_411144    dd ?                    ; DATA XREF: .text:loc_405E50↑o
.bss:00411144                                         ; .text:004062D8↑r ...
.bss:00411148 dword_411148    dd ?                    ; DATA XREF: .text:004062D2↑r
.bss:00411148                                         ; sub_406380+2C↑r
.bss:0041114C dword_41114C    dd ?                    ; DATA XREF: .text:004062C6↑r
.bss:0041114C                                         ; sub_406380+22↑r
.bss:00411150 dword_411150    dd ?                    ; DATA XREF: .text:004062E2↑r
.bss:00411150                                         ; sub_406380+36↑r
.bss:00411154 dword_411154    dd ?                    ; DATA XREF: .text:004062F2↑r
.bss:00411154                                         ; sub_406380+4E↑r
.bss:00411158 dword_411158    dd ?                    ; DATA XREF: .text:0040630F↑r
.bss:00411158                                         ; sub_406380+62↑r
.bss:0041115C dword_41115C    dd ?                    ; DATA XREF: .text:00406305↑r
.bss:0041115C                                         ; sub_406380+70↑r
.bss:00411160 dword_411160    dd ?                    ; DATA XREF: .text:004062E8↑r
.bss:00411160                                         ; sub_406380+7A↑r
.bss:00411164                 align 10h
.bss:00411170 ; char *Str1
.bss:00411170 Str1            dd ?                    ; DATA XREF: sub_406A14:loc_406A4D↑w
.bss:00411170                                         ; sub_406A14:loc_406B80↑r
.bss:00411174                 align 10h
.bss:00411180 dword_411180    dd ?                    ; DATA XREF: sub_406A14+2D↑r
.bss:00411180                                         ; sub_406A14+3F↑w
.bss:00411184                 align 10h
.bss:00411190 dword_411190    dd ?                    ; DATA XREF: sub_408380+100↑r
.bss:00411190                                         ; sub_408380+308↑w
.bss:00411194                 align 10h
.bss:004111A0 ; char *Str
.bss:004111A0 Str             dd ?                    ; DATA XREF: sub_408380:loc_4086E4↑r
.bss:004111A0                                         ; sub_408380+3B6↑r ...
.bss:004111A4                 align 10h
.bss:004111B0 dword_4111B0    dd ?                    ; DATA XREF: sub_409E70+8↑r
.bss:004111B0                                         ; sub_409F80:loc_40A002↑w ...
.bss:004111B4                 align 10h
.bss:004111C0 ; struct _OSVERSIONINFOA VersionInformation
.bss:004111C0 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_409F80:loc_409FA0↑o
.bss:004111C0                                         ; sub_409F80+2C↑w ...
.bss:00411254 word_411254     dw ?                    ; DATA XREF: sub_409F80:loc_40A033↑r
.bss:00411256                 align 4
.bss:00411258 word_411258     dw ?                    ; DATA XREF: .text:loc_4099F6↑r
.bss:00411258                                         ; .text:00409A24↑r ...
.bss:0041125A byte_41125A     db ?                    ; DATA XREF: .text:004099B5↑r
.bss:0041125B                 align 10h
.bss:00411260 dword_411260    dd ?                    ; DATA XREF: sub_409F80+6↑r
.bss:00411260                                         ; sub_409F80+75↑w
.bss:00411264                 align 10h
.bss:00411270 dword_411270    dd ?                    ; DATA XREF: sub_40A550+1C↑r
.bss:00411270                                         ; sub_40A550+104↑w
.bss:00411274                 align 10h
.bss:00411280 dword_411280    dd ?                    ; DATA XREF: sub_40A550+B↑r
.bss:00411280                                         ; sub_40A550+71↑w
.bss:00411284                 align 10h
.bss:00411290 dword_411290    dd ?                    ; DATA XREF: sub_40A550+85↑r
.bss:00411290                                         ; sub_40A550+B9↑w
.bss:00411294 dword_411294    dd ?                    ; DATA XREF: sub_40A550+C4↑w
.bss:00411298 dword_411298    dd ?                    ; DATA XREF: sub_40A550+2E↑o
.bss:00411298                                         ; sub_40A550+CF↑w
.bss:0041129C dword_41129C    dd ?                    ; DATA XREF: sub_40A550+DA↑w
.bss:004112A0                 db    ? ;
.bss:004112A1                 db    ? ;
.bss:004112A2                 db    ? ;
.bss:004112A3                 db    ? ;
.bss:004112A4                 db    ? ;
.bss:004112A5                 db    ? ;
.bss:004112A6                 db    ? ;
.bss:004112A7                 db    ? ;
.bss:004112A8                 db    ? ;
.bss:004112A9                 db    ? ;
.bss:004112AA                 db    ? ;
.bss:004112AB                 db    ? ;
.bss:004112AC                 db    ? ;
.bss:004112AD                 db    ? ;
.bss:004112AE                 db    ? ;
.bss:004112AF                 db    ? ;
.bss:004112B0                 db    ? ;
.bss:004112B1                 db    ? ;
.bss:004112B2                 db    ? ;
.bss:004112B3                 db    ? ;
.bss:004112B4                 db    ? ;
.bss:004112B5                 db    ? ;
.bss:004112B6                 db    ? ;
.bss:004112B7                 db    ? ;
.bss:004112B8                 db    ? ;
.bss:004112B9                 db    ? ;
.bss:004112BA                 db    ? ;
.bss:004112BB                 db    ? ;
.bss:004112BC                 db    ? ;
.bss:004112BD                 db    ? ;
.bss:004112BE                 db    ? ;
.bss:004112BF                 db    ? ;
.bss:004112C0                 db    ? ;
.bss:004112C1                 db    ? ;
.bss:004112C2                 db    ? ;
.bss:004112C3                 db    ? ;
.bss:004112C4                 db    ? ;
.bss:004112C5                 db    ? ;
.bss:004112C6                 db    ? ;
.bss:004112C7                 db    ? ;
.bss:004112C8                 db    ? ;
.bss:004112C9                 db    ? ;
.bss:004112CA                 db    ? ;
.bss:004112CB                 db    ? ;
.bss:004112CC                 db    ? ;
.bss:004112CD                 db    ? ;
.bss:004112CE                 db    ? ;
.bss:004112CF                 db    ? ;
.bss:004112D0                 db    ? ;
.bss:004112D1                 db    ? ;
.bss:004112D2                 db    ? ;
.bss:004112D3                 db    ? ;
.bss:004112D4                 db    ? ;
.bss:004112D5                 db    ? ;
.bss:004112D6                 db    ? ;
.bss:004112D7                 db    ? ;
.bss:004112D8                 db    ? ;
.bss:004112D9                 db    ? ;
.bss:004112DA                 db    ? ;
.bss:004112DB                 db    ? ;
.bss:004112DC                 db    ? ;
.bss:004112DD                 db    ? ;
.bss:004112DE                 db    ? ;
.bss:004112DF                 db    ? ;
.bss:004112E0                 db    ? ;
.bss:004112E1                 db    ? ;
.bss:004112E2                 db    ? ;
.bss:004112E3                 db    ? ;
.bss:004112E4                 db    ? ;
.bss:004112E5                 db    ? ;
.bss:004112E6                 db    ? ;
.bss:004112E7                 db    ? ;
.bss:004112E8                 db    ? ;
.bss:004112E9                 db    ? ;
.bss:004112EA                 db    ? ;
.bss:004112EB                 db    ? ;
.bss:004112EC                 db    ? ;
.bss:004112ED                 db    ? ;
.bss:004112EE                 db    ? ;
.bss:004112EF                 db    ? ;
.bss:004112F0                 db    ? ;
.bss:004112F1                 db    ? ;
.bss:004112F2                 db    ? ;
.bss:004112F3                 db    ? ;
.bss:004112F4                 db    ? ;
.bss:004112F5                 db    ? ;
.bss:004112F6                 db    ? ;
.bss:004112F7                 db    ? ;
.bss:004112F8                 db    ? ;
.bss:004112F9                 db    ? ;
.bss:004112FA                 db    ? ;
.bss:004112FB                 db    ? ;
.bss:004112FC                 db    ? ;
.bss:004112FD                 db    ? ;
.bss:004112FE                 db    ? ;
.bss:004112FF                 db    ? ;
.bss:00411300                 db    ? ;
.bss:00411301                 db    ? ;
.bss:00411302                 db    ? ;
.bss:00411303                 db    ? ;
.bss:00411304                 db    ? ;
.bss:00411305                 db    ? ;
.bss:00411306                 db    ? ;
.bss:00411307                 db    ? ;
.bss:00411308                 db    ? ;
.bss:00411309                 db    ? ;
.bss:0041130A                 db    ? ;
.bss:0041130B                 db    ? ;
.bss:0041130C                 db    ? ;
.bss:0041130D                 db    ? ;
.bss:0041130E                 db    ? ;
.bss:0041130F                 db    ? ;
.bss:00411310                 db    ? ;
.bss:00411311                 db    ? ;
.bss:00411312                 db    ? ;
.bss:00411313                 db    ? ;
.bss:00411314                 db    ? ;
.bss:00411315                 db    ? ;
.bss:00411316                 db    ? ;
.bss:00411317                 db    ? ;
.bss:00411318                 db    ? ;
.bss:00411319                 db    ? ;
.bss:0041131A                 db    ? ;
.bss:0041131B                 db    ? ;
.bss:0041131C                 db    ? ;
.bss:0041131D                 db    ? ;
.bss:0041131E                 db    ? ;
.bss:0041131F                 db    ? ;
.bss:00411320                 db    ? ;
.bss:00411321                 db    ? ;
.bss:00411322                 db    ? ;
.bss:00411323                 db    ? ;
.bss:00411324                 db    ? ;
.bss:00411325                 db    ? ;
.bss:00411326                 db    ? ;
.bss:00411327                 db    ? ;
.bss:00411328                 db    ? ;
.bss:00411329                 db    ? ;
.bss:0041132A                 db    ? ;
.bss:0041132B                 db    ? ;
.bss:0041132C                 db    ? ;
.bss:0041132D                 db    ? ;
.bss:0041132E                 db    ? ;
.bss:0041132F                 db    ? ;
.bss:00411330                 db    ? ;
.bss:00411331                 db    ? ;
.bss:00411332                 db    ? ;
.bss:00411333                 db    ? ;
.bss:00411334                 db    ? ;
.bss:00411335                 db    ? ;
.bss:00411336                 db    ? ;
.bss:00411337                 db    ? ;
.bss:00411338                 db    ? ;
.bss:00411339                 db    ? ;
.bss:0041133A                 db    ? ;
.bss:0041133B                 db    ? ;
.bss:0041133C                 db    ? ;
.bss:0041133D                 db    ? ;
.bss:0041133E                 db    ? ;
.bss:0041133F                 db    ? ;
.bss:00411340                 db    ? ;
.bss:00411341                 db    ? ;
.bss:00411342                 db    ? ;
.bss:00411343                 db    ? ;
.bss:00411344                 db    ? ;
.bss:00411345                 db    ? ;
.bss:00411346                 db    ? ;
.bss:00411347                 db    ? ;
.bss:00411348                 db    ? ;
.bss:00411349                 db    ? ;
.bss:0041134A                 db    ? ;
.bss:0041134B                 db    ? ;
.bss:0041134C                 db    ? ;
.bss:0041134D                 db    ? ;
.bss:0041134E                 db    ? ;
.bss:0041134F                 db    ? ;
.bss:00411350                 db    ? ;
.bss:00411351                 db    ? ;
.bss:00411352                 db    ? ;
.bss:00411353                 db    ? ;
.bss:00411354                 db    ? ;
.bss:00411355                 db    ? ;
.bss:00411356                 db    ? ;
.bss:00411357                 db    ? ;
.bss:00411358                 db    ? ;
.bss:00411359                 db    ? ;
.bss:0041135A                 db    ? ;
.bss:0041135B                 db    ? ;
.bss:0041135C                 db    ? ;
.bss:0041135D                 db    ? ;
.bss:0041135E                 db    ? ;
.bss:0041135F                 db    ? ;
.bss:00411360                 db    ? ;
.bss:00411361                 db    ? ;
.bss:00411362                 db    ? ;
.bss:00411363                 db    ? ;
.bss:00411364                 db    ? ;
.bss:00411365                 db    ? ;
.bss:00411366                 db    ? ;
.bss:00411367                 db    ? ;
.bss:00411368                 db    ? ;
.bss:00411369                 db    ? ;
.bss:0041136A                 db    ? ;
.bss:0041136B                 db    ? ;
.bss:0041136C                 db    ? ;
.bss:0041136D                 db    ? ;
.bss:0041136E                 db    ? ;
.bss:0041136F                 db    ? ;
.bss:00411370                 db    ? ;
.bss:00411371                 db    ? ;
.bss:00411372                 db    ? ;
.bss:00411373                 db    ? ;
.bss:00411374                 db    ? ;
.bss:00411375                 db    ? ;
.bss:00411376                 db    ? ;
.bss:00411377                 db    ? ;
.bss:00411378                 db    ? ;
.bss:00411379                 db    ? ;
.bss:0041137A                 db    ? ;
.bss:0041137B                 db    ? ;
.bss:0041137C                 db    ? ;
.bss:0041137D                 db    ? ;
.bss:0041137E                 db    ? ;
.bss:0041137F                 db    ? ;
.bss:00411380                 db    ? ;
.bss:00411381                 db    ? ;
.bss:00411382                 db    ? ;
.bss:00411383                 db    ? ;
.bss:00411384                 db    ? ;
.bss:00411385                 db    ? ;
.bss:00411386                 db    ? ;
.bss:00411387                 db    ? ;
.bss:00411388                 db    ? ;
.bss:00411389                 db    ? ;
.bss:0041138A                 db    ? ;
.bss:0041138B                 db    ? ;
.bss:0041138C                 db    ? ;
.bss:0041138D                 db    ? ;
.bss:0041138E                 db    ? ;
.bss:0041138F                 db    ? ;
.bss:00411390                 db    ? ;
.bss:00411391                 db    ? ;
.bss:00411392                 db    ? ;
.bss:00411393                 db    ? ;
.bss:00411394                 db    ? ;
.bss:00411395                 db    ? ;
.bss:00411396                 db    ? ;
.bss:00411397                 db    ? ;
.bss:00411398                 db    ? ;
.bss:00411399                 db    ? ;
.bss:0041139A                 db    ? ;
.bss:0041139B                 db    ? ;
.bss:0041139C                 db    ? ;
.bss:0041139D                 db    ? ;
.bss:0041139E                 db    ? ;
.bss:0041139F                 db    ? ;
.bss:004113A0                 db    ? ;
.bss:004113A1                 db    ? ;
.bss:004113A2                 db    ? ;
.bss:004113A3                 db    ? ;
.bss:004113A4                 db    ? ;
.bss:004113A5                 db    ? ;
.bss:004113A6                 db    ? ;
.bss:004113A7                 db    ? ;
.bss:004113A8                 db    ? ;
.bss:004113A9                 db    ? ;
.bss:004113AA                 db    ? ;
.bss:004113AB                 db    ? ;
.bss:004113AC                 db    ? ;
.bss:004113AD                 db    ? ;
.bss:004113AE                 db    ? ;
.bss:004113AF                 db    ? ;
.bss:004113B0                 db    ? ;
.bss:004113B1                 db    ? ;
.bss:004113B2                 db    ? ;
.bss:004113B3                 db    ? ;
.bss:004113B4                 db    ? ;
.bss:004113B5                 db    ? ;
.bss:004113B6                 db    ? ;
.bss:004113B7                 db    ? ;
.bss:004113B8                 db    ? ;
.bss:004113B9                 db    ? ;
.bss:004113BA                 db    ? ;
.bss:004113BB                 db    ? ;
.bss:004113BC                 db    ? ;
.bss:004113BD                 db    ? ;
.bss:004113BE                 db    ? ;
.bss:004113BF                 db    ? ;
.bss:004113C0                 db    ? ;
.bss:004113C1                 db    ? ;
.bss:004113C2                 db    ? ;
.bss:004113C3                 db    ? ;
.bss:004113C4                 db    ? ;
.bss:004113C5                 db    ? ;
.bss:004113C6                 db    ? ;
.bss:004113C7                 db    ? ;
.bss:004113C8                 db    ? ;
.bss:004113C9                 db    ? ;
.bss:004113CA                 db    ? ;
.bss:004113CB                 db    ? ;
.bss:004113CC                 db    ? ;
.bss:004113CD                 db    ? ;
.bss:004113CE                 db    ? ;
.bss:004113CF                 db    ? ;
.bss:004113D0                 db    ? ;
.bss:004113D1                 db    ? ;
.bss:004113D2                 db    ? ;
.bss:004113D3                 db    ? ;
.bss:004113D4                 db    ? ;
.bss:004113D5                 db    ? ;
.bss:004113D6                 db    ? ;
.bss:004113D7                 db    ? ;
.bss:004113D8                 db    ? ;
.bss:004113D9                 db    ? ;
.bss:004113DA                 db    ? ;
.bss:004113DB                 db    ? ;
.bss:004113DC                 db    ? ;
.bss:004113DD                 db    ? ;
.bss:004113DE                 db    ? ;
.bss:004113DF                 db    ? ;
.bss:004113E0                 db    ? ;
.bss:004113E1                 db    ? ;
.bss:004113E2                 db    ? ;
.bss:004113E3                 db    ? ;
.bss:004113E4                 db    ? ;
.bss:004113E5                 db    ? ;
.bss:004113E6                 db    ? ;
.bss:004113E7                 db    ? ;
.bss:004113E8                 db    ? ;
.bss:004113E9                 db    ? ;
.bss:004113EA                 db    ? ;
.bss:004113EB                 db    ? ;
.bss:004113EC                 db    ? ;
.bss:004113ED                 db    ? ;
.bss:004113EE                 db    ? ;
.bss:004113EF                 db    ? ;
.bss:004113F0                 db    ? ;
.bss:004113F1                 db    ? ;
.bss:004113F2                 db    ? ;
.bss:004113F3                 db    ? ;
.bss:004113F4                 db    ? ;
.bss:004113F5                 db    ? ;
.bss:004113F6                 db    ? ;
.bss:004113F7                 db    ? ;
.bss:004113F8                 db    ? ;
.bss:004113F9                 db    ? ;
.bss:004113FA                 db    ? ;
.bss:004113FB                 db    ? ;
.bss:004113FC                 db    ? ;
.bss:004113FD                 db    ? ;
.bss:004113FE                 db    ? ;
.bss:004113FF                 db    ? ;
.bss:00411400                 db    ? ;
.bss:00411401                 db    ? ;
.bss:00411402                 db    ? ;
.bss:00411403                 db    ? ;
.bss:00411404                 db    ? ;
.bss:00411405                 db    ? ;
.bss:00411406                 db    ? ;
.bss:00411407                 db    ? ;
.bss:00411408                 db    ? ;
.bss:00411409                 db    ? ;
.bss:0041140A                 db    ? ;
.bss:0041140B                 db    ? ;
.bss:0041140C                 db    ? ;
.bss:0041140D                 db    ? ;
.bss:0041140E                 db    ? ;
.bss:0041140F                 db    ? ;
.bss:00411410                 db    ? ;
.bss:00411411                 db    ? ;
.bss:00411412                 db    ? ;
.bss:00411413                 db    ? ;
.bss:00411414                 db    ? ;
.bss:00411415                 db    ? ;
.bss:00411416                 db    ? ;
.bss:00411417                 db    ? ;
.bss:00411418                 db    ? ;
.bss:00411419                 db    ? ;
.bss:0041141A                 db    ? ;
.bss:0041141B                 db    ? ;
.bss:0041141C                 db    ? ;
.bss:0041141D                 db    ? ;
.bss:0041141E                 db    ? ;
.bss:0041141F                 db    ? ;
.bss:00411420                 db    ? ;
.bss:00411421                 db    ? ;
.bss:00411422                 db    ? ;
.bss:00411423                 db    ? ;
.bss:00411424                 db    ? ;
.bss:00411425                 db    ? ;
.bss:00411426                 db    ? ;
.bss:00411427                 db    ? ;
.bss:00411428                 db    ? ;
.bss:00411429                 db    ? ;
.bss:0041142A                 db    ? ;
.bss:0041142B                 db    ? ;
.bss:0041142C                 db    ? ;
.bss:0041142D                 db    ? ;
.bss:0041142E                 db    ? ;
.bss:0041142F                 db    ? ;
.bss:00411430                 db    ? ;
.bss:00411431                 db    ? ;
.bss:00411432                 db    ? ;
.bss:00411433                 db    ? ;
.bss:00411434                 db    ? ;
.bss:00411435                 db    ? ;
.bss:00411436                 db    ? ;
.bss:00411437                 db    ? ;
.bss:00411438                 db    ? ;
.bss:00411439                 db    ? ;
.bss:0041143A                 db    ? ;
.bss:0041143B                 db    ? ;
.bss:0041143C                 db    ? ;
.bss:0041143D                 db    ? ;
.bss:0041143E                 db    ? ;
.bss:0041143F                 db    ? ;
.bss:00411440                 db    ? ;
.bss:00411441                 db    ? ;
.bss:00411442                 db    ? ;
.bss:00411443                 db    ? ;
.bss:00411444                 db    ? ;
.bss:00411445                 db    ? ;
.bss:00411446                 db    ? ;
.bss:00411447                 db    ? ;
.bss:00411448                 db    ? ;
.bss:00411449                 db    ? ;
.bss:0041144A                 db    ? ;
.bss:0041144B                 db    ? ;
.bss:0041144C                 db    ? ;
.bss:0041144D                 db    ? ;
.bss:0041144E                 db    ? ;
.bss:0041144F                 db    ? ;
.bss:00411450                 db    ? ;
.bss:00411451                 db    ? ;
.bss:00411452                 db    ? ;
.bss:00411453                 db    ? ;
.bss:00411454                 db    ? ;
.bss:00411455                 db    ? ;
.bss:00411456                 db    ? ;
.bss:00411457                 db    ? ;
.bss:00411458                 db    ? ;
.bss:00411459                 db    ? ;
.bss:0041145A                 db    ? ;
.bss:0041145B                 db    ? ;
.bss:0041145C                 db    ? ;
.bss:0041145D                 db    ? ;
.bss:0041145E                 db    ? ;
.bss:0041145F                 db    ? ;
.bss:00411460                 db    ? ;
.bss:00411461                 db    ? ;
.bss:00411462                 db    ? ;
.bss:00411463                 db    ? ;
.bss:00411464                 db    ? ;
.bss:00411465                 db    ? ;
.bss:00411466                 db    ? ;
.bss:00411467                 db    ? ;
.bss:00411468                 db    ? ;
.bss:00411469                 db    ? ;
.bss:0041146A                 db    ? ;
.bss:0041146B                 db    ? ;
.bss:0041146C                 db    ? ;
.bss:0041146D                 db    ? ;
.bss:0041146E                 db    ? ;
.bss:0041146F                 db    ? ;
.bss:00411470                 db    ? ;
.bss:00411471                 db    ? ;
.bss:00411472                 db    ? ;
.bss:00411473                 db    ? ;
.bss:00411474                 db    ? ;
.bss:00411475                 db    ? ;
.bss:00411476                 db    ? ;
.bss:00411477                 db    ? ;
.bss:00411478                 db    ? ;
.bss:00411479                 db    ? ;
.bss:0041147A                 db    ? ;
.bss:0041147B                 db    ? ;
.bss:0041147C                 db    ? ;
.bss:0041147D                 db    ? ;
.bss:0041147E                 db    ? ;
.bss:0041147F                 db    ? ;
.bss:00411480                 db    ? ;
.bss:00411481                 db    ? ;
.bss:00411482                 db    ? ;
.bss:00411483                 db    ? ;
.bss:00411484                 db    ? ;
.bss:00411485                 db    ? ;
.bss:00411486                 db    ? ;
.bss:00411487                 db    ? ;
.bss:00411488                 db    ? ;
.bss:00411489                 db    ? ;
.bss:0041148A                 db    ? ;
.bss:0041148B                 db    ? ;
.bss:0041148C                 db    ? ;
.bss:0041148D                 db    ? ;
.bss:0041148E                 db    ? ;
.bss:0041148F                 db    ? ;
.bss:00411490 dword_411490    dd ?                    ; DATA XREF: sub_40C440+6E↑r
.bss:00411490                                         ; sub_40C440+9A↑r ...
.bss:00411494 dword_411494    dd ?                    ; DATA XREF: sub_40C440:loc_40C4A8↑r
.bss:00411494                                         ; sub_40C440+A0↑r ...
.bss:00411498                 align 10h
.bss:004114A0 dword_4114A0    dd ?                    ; DATA XREF: sub_40C950↑r
.bss:004114A0                                         ; .text:loc_40CA82↑w
.bss:004114A4                 align 10h
.bss:004114B0 dword_4114B0    dd ?                    ; DATA XREF: sub_4018C0+2F↑w
.bss:004114B0                                         ; sub_4018C0+D2↑r ...
.bss:004114B4                 db    ? ;
.bss:004114B5                 db    ? ;
.bss:004114B6                 db    ? ;
.bss:004114B7                 db    ? ;
.bss:004114B8                 db    ? ;
.bss:004114B9                 db    ? ;
.bss:004114BA                 db    ? ;
.bss:004114BB                 db    ? ;
.bss:004114BC                 db    ? ;
.bss:004114BD                 db    ? ;
.bss:004114BE                 db    ? ;
.bss:004114BF                 db    ? ;
.bss:004114C0                 db    ? ;
.bss:004114C1                 db    ? ;
.bss:004114C2                 db    ? ;
.bss:004114C3                 db    ? ;
.bss:004114C4                 db    ? ;
.bss:004114C5                 db    ? ;
.bss:004114C6                 db    ? ;
.bss:004114C7                 db    ? ;
.bss:004114C8                 db    ? ;
.bss:004114C9                 db    ? ;
.bss:004114CA                 db    ? ;
.bss:004114CB                 db    ? ;
.bss:004114CC                 db    ? ;
.bss:004114CD                 db    ? ;
.bss:004114CE                 db    ? ;
.bss:004114CF                 db    ? ;
.bss:004114D0 dword_4114D0    dd ?                    ; DATA XREF: sub_4018C0+B4↑r
.bss:004114D0                                         ; sub_403520+71↑w ...
.bss:004114D4                 align 10h
.bss:004114E0 dword_4114E0    dd ?                    ; CODE XREF: sub_406A14+63↑p
.bss:004114E0                                         ; DATA XREF: sub_406910+1E↑r ...
.bss:004114E4                 align 10h
.bss:004114F0 dword_4114F0    dd ?                    ; DATA XREF: sub_406910+4E↑w
.bss:004114F0                                         ; sub_406A14+AB↑w
.bss:004114F4                 db    ? ;
.bss:004114F5                 db    ? ;
.bss:004114F6                 db    ? ;
.bss:004114F7                 db    ? ;
.bss:004114F8                 db    ? ;
.bss:004114F9                 db    ? ;
.bss:004114FA                 db    ? ;
.bss:004114FB                 db    ? ;
.bss:004114FC                 db    ? ;
.bss:004114FD                 db    ? ;
.bss:004114FE                 db    ? ;
.bss:004114FF                 db    ? ;
.bss:00411500                 db    ? ;
.bss:00411501                 db    ? ;
.bss:00411502                 db    ? ;
.bss:00411503                 db    ? ;
.bss:00411504                 db    ? ;
.bss:00411505                 db    ? ;
.bss:00411506                 db    ? ;
.bss:00411507                 db    ? ;
.bss:00411508                 db    ? ;
.bss:00411509                 db    ? ;
.bss:0041150A                 db    ? ;
.bss:0041150B                 db    ? ;
.bss:0041150C                 db    ? ;
.bss:0041150D                 db    ? ;
.bss:0041150E                 db    ? ;
.bss:0041150F                 db    ? ;
.bss:00411510                 db    ? ;
.bss:00411511                 db    ? ;
.bss:00411512                 db    ? ;
.bss:00411513                 db    ? ;
.bss:00411514                 db    ? ;
.bss:00411515                 db    ? ;
.bss:00411516                 db    ? ;
.bss:00411517                 db    ? ;
.bss:00411518                 db    ? ;
.bss:00411519                 db    ? ;
.bss:0041151A                 db    ? ;
.bss:0041151B                 db    ? ;
.bss:0041151C                 db    ? ;
.bss:0041151D                 db    ? ;
.bss:0041151E                 db    ? ;
.bss:0041151F                 db    ? ;
.bss:00411520 dword_411520    dd ?                    ; DATA XREF: sub_406A14+13↑r
.bss:00411524                 align 1000h
.bss:00411524 _bss            ends
.bss:00411524
.idata:00412000 ; Section 4. (virtual address 00012000)
.idata:00412000 ; Virtual size                  : 00000DA4 (   3492.)
.idata:00412000 ; Section size in file          : 00000E00 (   3584.)
.idata:00412000 ; Offset to raw data for section: 0000EA00
.idata:00412000 ; Flags C0000040: Data Readable Writable
.idata:00412000 ; Alignment     : default
.idata:00412000 ; ===========================================================================
.idata:00412000
.idata:00412000 ; Segment type: Externs
.idata:00412000 ; _idata
.idata:00412000
.idata:00412001
.idata:004122A4 ;
.idata:004122A4 ; Imports from libintl3.dll
.idata:004122A4 ;
.idata:004122A4                 extrn libintl_bindtextdomain:dword
.idata:004122A4                                         ; CODE XREF: sub_4018C0+49↑p
.idata:004122A4                                         ; DATA XREF: sub_4018C0+49↑r ...
.idata:004122A8                 extrn libintl_gettext:dword
.idata:004122A8                                         ; CODE XREF: sub_4018C0+C6↑p
.idata:004122A8                                         ; sub_4018C0+147↑p ...
.idata:004122AC                 extrn libintl_textdomain:dword
.idata:004122AC                                         ; CODE XREF: sub_4018C0+56↑p
.idata:004122AC                                         ; DATA XREF: sub_4018C0+56↑r ...
.idata:004122B0
.idata:004122B8 ;
.idata:004122B8 ; Imports from ADVAPI32.DLL
.idata:004122B8 ;
.idata:004122B8 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004122B8                 extrn __imp_RegCloseKey:dword
.idata:004122B8                                         ; DATA XREF: RegCloseKey↑r
.idata:004122BC ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004122BC                 extrn __imp_RegOpenKeyExA:dword
.idata:004122BC                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004122C0 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004122C0                 extrn __imp_RegQueryValueExA:dword
.idata:004122C0                                         ; DATA XREF: RegQueryValueExA↑r
.idata:004122C4
.idata:004122CC ;
.idata:004122CC ; Imports from KERNEL32.dll
.idata:004122CC ;
.idata:004122CC ; BOOL (__stdcall *AreFileApisANSI)()
.idata:004122CC                 extrn __imp_AreFileApisANSI:dword
.idata:004122CC                                         ; DATA XREF: AreFileApisANSI↑r
.idata:004122D0 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004122D0                 extrn __imp_CloseHandle:dword
.idata:004122D0                                         ; DATA XREF: CloseHandle↑r
.idata:004122D4 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004122D4                 extrn __imp_CreateDirectoryA:dword
.idata:004122D4                                         ; DATA XREF: CreateDirectoryA↑r
.idata:004122D8 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004122D8                 extrn __imp_CreateFileA:dword
.idata:004122D8                                         ; DATA XREF: CreateFileA↑r
.idata:004122DC ; HANDLE (__stdcall *CreateNamedPipeA)(LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004122DC                 extrn __imp_CreateNamedPipeA:dword
.idata:004122DC                                         ; DATA XREF: CreateNamedPipeA↑r
.idata:004122E0 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:004122E0                 extrn __imp_DeviceIoControl:dword
.idata:004122E0                                         ; DATA XREF: DeviceIoControl↑r
.idata:004122E4 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:004122E4                 extrn __imp_ExitProcess:dword
.idata:004122E4                                         ; DATA XREF: ExitProcess↑r
.idata:004122E8 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:004122E8                 extrn __imp_FindClose:dword
.idata:004122E8                                         ; DATA XREF: FindClose↑r
.idata:004122EC ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004122EC                 extrn __imp_FindFirstFileA:dword
.idata:004122EC                                         ; DATA XREF: FindFirstFileA↑r
.idata:004122F0 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004122F0                 extrn __imp_FindNextFileA:dword
.idata:004122F0                                         ; DATA XREF: FindNextFileA↑r
.idata:004122F4 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:004122F4                 extrn __imp_FreeLibrary:dword
.idata:004122F4                                         ; DATA XREF: FreeLibrary↑r
.idata:004122F8 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:004122F8                 extrn __imp_GetCurrentDirectoryA:dword
.idata:004122F8                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:004122FC ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:004122FC                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:004122FC                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:00412300 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:00412300                 extrn __imp_GetDriveTypeA:dword
.idata:00412300                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00412304 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00412304                 extrn __imp_GetFileAttributesA:dword
.idata:00412304                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00412308 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00412308                 extrn __imp_GetFileInformationByHandle:dword
.idata:00412308                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:0041230C ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:0041230C                 extrn __imp_GetFileSize:dword
.idata:0041230C                                         ; DATA XREF: GetFileSize↑r
.idata:00412310 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:00412310                 extrn __imp_GetFileType:dword
.idata:00412310                                         ; DATA XREF: GetFileType↑r
.idata:00412314 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00412314                 extrn __imp_GetFullPathNameA:dword
.idata:00412314                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00412318 ; DWORD (__stdcall *GetLastError)()
.idata:00412318                 extrn __imp_GetLastError:dword
.idata:00412318                                         ; DATA XREF: GetLastError↑r
.idata:0041231C ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041231C                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:0041231C                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:00412320 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:00412320                 extrn __imp_GetModuleFileNameA:dword
.idata:00412320                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00412324 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00412324                 extrn __imp_GetModuleHandleA:dword
.idata:00412324                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00412328 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00412328                 extrn __imp_GetProcAddress:dword
.idata:00412328                                         ; DATA XREF: GetProcAddress↑r
.idata:0041232C ; HANDLE (__stdcall *GetProcessHeap)()
.idata:0041232C                 extrn __imp_GetProcessHeap:dword
.idata:0041232C                                         ; DATA XREF: GetProcessHeap↑r
.idata:00412330 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:00412330                 extrn __imp_GetShortPathNameA:dword
.idata:00412330                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00412334 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00412334                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00412334                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00412338 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00412338                 extrn __imp_GetTimeZoneInformation:dword
.idata:00412338                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:0041233C ; DWORD (__stdcall *GetVersion)()
.idata:0041233C                 extrn __imp_GetVersion:dword
.idata:0041233C                                         ; DATA XREF: GetVersion↑r
.idata:00412340 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00412340                 extrn __imp_GetVersionExA:dword
.idata:00412340                                         ; DATA XREF: GetVersionExA↑r
.idata:00412344 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00412344                 extrn __imp_GetVolumeInformationA:dword
.idata:00412344                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00412348 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00412348                 extrn __imp_HeapAlloc:dword
.idata:00412348                                         ; DATA XREF: HeapAlloc↑r
.idata:0041234C ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0041234C                 extrn __imp_HeapFree:dword
.idata:0041234C                                         ; DATA XREF: HeapFree↑r
.idata:00412350 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:00412350                 extrn __imp_LoadLibraryA:dword
.idata:00412350                                         ; DATA XREF: LoadLibraryA↑r
.idata:00412354 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00412354                 extrn __imp_MultiByteToWideChar:dword
.idata:00412354                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:00412358 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:00412358                 extrn __imp_PeekNamedPipe:dword
.idata:00412358                                         ; DATA XREF: PeekNamedPipe↑r
.idata:0041235C ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0041235C                 extrn __imp_SetErrorMode:dword
.idata:0041235C                                         ; DATA XREF: SetErrorMode↑r
.idata:00412360 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00412360                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00412360                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00412364 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:00412364                 extrn __imp_UnlockFile:dword
.idata:00412364                                         ; DATA XREF: UnlockFile↑r
.idata:00412368 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:00412368                 extrn __imp_lstrcmpiA:dword
.idata:00412368                                         ; DATA XREF: lstrcmpiA↑r
.idata:0041236C ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:0041236C                 extrn __imp_lstrcpyA:dword
.idata:0041236C                                         ; DATA XREF: lstrcpyA↑r
.idata:00412370
.idata:00412378 ;
.idata:00412378 ; Imports from msvcrt.dll
.idata:00412378 ;
.idata:00412378 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:00412378                 extrn __imp__chmod:dword
.idata:00412378                                         ; DATA XREF: _chmod↑r
.idata:0041237C ; int (__cdecl *_getpid)()
.idata:0041237C                 extrn __imp__getpid:dword
.idata:0041237C                                         ; DATA XREF: _getpid↑r
.idata:00412380 ; char *(__cdecl *_strdup)(const char *String)
.idata:00412380                 extrn __imp__strdup:dword
.idata:00412380                                         ; DATA XREF: _strdup↑r
.idata:00412384 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:00412384                 extrn __imp__stricmp:dword
.idata:00412384                                         ; DATA XREF: _stricmp↑r
.idata:00412388 ; int (__cdecl *_umask)(int Mode)
.idata:00412388                 extrn __imp__umask:dword
.idata:00412388                                         ; DATA XREF: _umask↑r
.idata:0041238C
.idata:00412394 ;
.idata:00412394 ; Imports from MSVCP60.DLL
.idata:00412394 ;
.idata:00412394 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00412394                 extrn __imp_mbrtowc:dword
.idata:00412394                                         ; DATA XREF: mbrtowc↑r
.idata:00412398
.idata:004123A0 ;
.idata:004123A0 ; Imports from msvcrt.dll
.idata:004123A0 ;
.idata:004123A0                 extrn __imp___getmainargs:dword
.idata:004123A0                                         ; DATA XREF: __getmainargs↑r
.idata:004123A4 ; int _mb_cur_max
.idata:004123A4                 extrn __mb_cur_max:dword
.idata:004123A4                                         ; DATA XREF: sub_4037D0+58↑r
.idata:004123A4                                         ; sub_404CE0+45↑r ...
.idata:004123A8 ; char ***(__cdecl *__p__environ)()
.idata:004123A8                 extrn __imp___p__environ:dword
.idata:004123A8                                         ; DATA XREF: __p__environ↑r
.idata:004123AC ; int *(__cdecl *__p__fmode)()
.idata:004123AC                 extrn __imp___p__fmode:dword
.idata:004123AC                                         ; DATA XREF: __p__fmode↑r
.idata:004123B0 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004123B0                 extrn __set_app_type:dword
.idata:004123B0                                         ; CODE XREF: start+D↑p
.idata:004123B0                                         ; .text:0040102D↑p
.idata:004123B0                                         ; DATA XREF: ...
.idata:004123B4                 extrn __imp__assert:dword
.idata:004123B4                                         ; DATA XREF: _assert↑r
.idata:004123B8 ; void (__cdecl *_cexit)()
.idata:004123B8                 extrn __imp__cexit:dword
.idata:004123B8                                         ; DATA XREF: _cexit↑r
.idata:004123BC ; int (__cdecl *_close)(int FileHandle)
.idata:004123BC                 extrn __imp__close:dword
.idata:004123BC                                         ; DATA XREF: _close↑r
.idata:004123C0 ; int *(__cdecl *_errno)()
.idata:004123C0                 extrn __imp__errno:dword
.idata:004123C0                                         ; DATA XREF: _errno↑r
.idata:004123C4 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:004123C4                 extrn __imp__fdopen:dword
.idata:004123C4                                         ; DATA XREF: _fdopen↑r
.idata:004123C8 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004123C8                 extrn __imp__filelengthi64:dword
.idata:004123C8                                         ; DATA XREF: _filelengthi64↑r
.idata:004123CC ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004123CC                 extrn __imp__flsbuf:dword
.idata:004123CC                                         ; DATA XREF: _flsbuf↑r
.idata:004123D0 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004123D0                 extrn __imp__get_osfhandle:dword
.idata:004123D0                                         ; DATA XREF: _get_osfhandle↑r
.idata:004123D4 ; FILE iob[]
.idata:004123D4                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004123D4                                         ; sub_401080+75↑r ...
.idata:004123D8 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004123D8                 extrn __imp__isctype:dword
.idata:004123D8                                         ; DATA XREF: _isctype↑r
.idata:004123DC ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004123DC                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004123DC                                         ; DATA XREF: .text:0040106C↑r
.idata:004123E0 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:004123E0                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:004123E4 ; int (__cdecl *_open_osfhandle)(intptr_t OSFileHandle, int Flags)
.idata:004123E4                 extrn __imp__open_osfhandle:dword
.idata:004123E4                                         ; DATA XREF: _open_osfhandle↑r
.idata:004123E8 ; const unsigned __int16 *pctype
.idata:004123E8                 extrn _pctype:dword     ; DATA XREF: sub_4037D0:loc_404422↑r
.idata:004123E8                                         ; sub_404CE0:loc_405200↑r ...
.idata:004123EC ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004123EC                 extrn __imp__setmode:dword
.idata:004123EC                                         ; DATA XREF: _setmode↑r
.idata:004123F0 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:004123F0                 extrn __imp__stricmp_0:dword
.idata:004123F0                                         ; DATA XREF: _stricmp_0↑r
.idata:004123F4 ; void (__cdecl __noreturn *abort)()
.idata:004123F4                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004123F8 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004123F8                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004123F8                                         ; DATA XREF: sub_401040+C↑r
.idata:004123FC ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004123FC                 extrn __imp_calloc:dword
.idata:004123FC                                         ; DATA XREF: calloc↑r
.idata:00412400 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00412400                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:00412404 ; int (__cdecl *fclose)(FILE *Stream)
.idata:00412404                 extrn __imp_fclose:dword
.idata:00412404                                         ; DATA XREF: fclose↑r
.idata:00412408 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00412408                 extrn __imp_fflush:dword
.idata:00412408                                         ; DATA XREF: fflush↑r
.idata:0041240C ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:0041240C                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00412410 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00412410                 extrn __imp_fprintf:dword
.idata:00412410                                         ; DATA XREF: fprintf↑r
.idata:00412414 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:00412414                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00412418 ; void (__cdecl *free)(void *Block)
.idata:00412418                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0041241C ; char *(__cdecl *getenv)(const char *VarName)
.idata:0041241C                 extrn __imp_getenv:dword
.idata:0041241C                                         ; DATA XREF: getenv↑r
.idata:00412420 ; int (__cdecl *isalpha)(int C)
.idata:00412420                 extrn __imp_isalpha:dword
.idata:00412420                                         ; DATA XREF: isalpha↑r
.idata:00412424 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00412424                 extrn __imp_iswctype:dword
.idata:00412424                                         ; DATA XREF: iswctype↑r
.idata:00412428 ; void *(__cdecl *malloc)(size_t Size)
.idata:00412428                 extrn __imp_malloc:dword
.idata:00412428                                         ; DATA XREF: malloc↑r
.idata:0041242C ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0041242C                 extrn __imp_memcpy:dword
.idata:0041242C                                         ; DATA XREF: memcpy↑r
.idata:00412430 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00412430                 extrn __imp_memset:dword
.idata:00412430                                         ; DATA XREF: memset↑r
.idata:00412434 ; int (*printf)(const char *const Format, ...)
.idata:00412434                 extrn __imp_printf:dword
.idata:00412434                                         ; DATA XREF: printf↑r
.idata:00412438 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00412438                 extrn __imp_realloc:dword
.idata:00412438                                         ; DATA XREF: realloc↑r
.idata:0041243C ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0041243C                 extrn __imp_setlocale:dword
.idata:0041243C                                         ; DATA XREF: setlocale↑r
.idata:00412440 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00412440                 extrn __imp_signal:dword
.idata:00412440                                         ; DATA XREF: signal↑r
.idata:00412444 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:00412444                 extrn __imp_sprintf:dword
.idata:00412444                                         ; DATA XREF: sprintf↑r
.idata:00412448 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:00412448                 extrn __imp_sscanf:dword
.idata:00412448                                         ; DATA XREF: sscanf↑r
.idata:0041244C ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:0041244C                 extrn __imp_strcat:dword
.idata:0041244C                                         ; DATA XREF: strcat↑r
.idata:00412450 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00412450                 extrn __imp_strchr:dword
.idata:00412450                                         ; DATA XREF: strchr↑r
.idata:00412454 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00412454                 extrn __imp_strcmp:dword
.idata:00412454                                         ; DATA XREF: strcmp↑r
.idata:00412458 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:00412458                 extrn __imp_strcpy:dword
.idata:00412458                                         ; DATA XREF: strcpy↑r
.idata:0041245C ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0041245C                 extrn __imp_strerror:dword
.idata:0041245C                                         ; DATA XREF: strerror↑r
.idata:00412460 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00412460                 extrn __imp_strlen:dword
.idata:00412460                                         ; DATA XREF: strlen↑r
.idata:00412464 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00412464                 extrn __imp_strncmp:dword
.idata:00412464                                         ; DATA XREF: strncmp↑r
.idata:00412468 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:00412468                 extrn __imp_strncpy:dword
.idata:00412468                                         ; DATA XREF: strncpy↑r
.idata:0041246C ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:0041246C                 extrn __imp_strpbrk:dword
.idata:0041246C                                         ; DATA XREF: strpbrk↑r
.idata:00412470 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:00412470                 extrn __imp_strrchr:dword
.idata:00412470                                         ; DATA XREF: strrchr↑r
.idata:00412474 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:00412474                 extrn __imp_strspn:dword
.idata:00412474                                         ; DATA XREF: strspn↑r
.idata:00412478 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:00412478                 extrn __imp_strstr:dword
.idata:00412478                                         ; DATA XREF: strstr↑r
.idata:0041247C ; unsigned int (__cdecl *strtoul)(const char *String, char **EndPtr, int Radix)
.idata:0041247C                 extrn __imp_strtoul:dword
.idata:0041247C                                         ; DATA XREF: strtoul↑r
.idata:00412480 ; int (__cdecl *toupper)(int C)
.idata:00412480                 extrn __imp_toupper:dword
.idata:00412480                                         ; DATA XREF: toupper↑r
.idata:00412484 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00412484                 extrn __imp_vfprintf:dword
.idata:00412484                                         ; DATA XREF: vfprintf↑r
.idata:00412488
.idata:00412490 ;
.idata:00412490 ; Imports from OLE32.dll
.idata:00412490 ;
.idata:00412490 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:00412490                 extrn __imp_CoCreateInstance:dword
.idata:00412490                                         ; DATA XREF: CoCreateInstance↑r
.idata:00412494 ; void (__stdcall *CoUninitialize)()
.idata:00412494                 extrn __imp_CoUninitialize:dword
.idata:00412494                                         ; DATA XREF: CoUninitialize↑r
.idata:00412498 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:00412498                 extrn __imp_OleInitialize:dword
.idata:00412498                                         ; DATA XREF: OleInitialize↑r
.idata:0041249C
.idata:0041249C
.idata:0041249C
.idata:0041249C                 end start
