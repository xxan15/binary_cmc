.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 7AAA7904FA8BBBAD6E90FC42E2ABE178458F391AFE9324F2B7B93BCEF1419E5D
.text:00401000 ; Input MD5    : 47E840EBA9735D799ADB078AB95E41B0
.text:00401000 ; Input CRC32  : 36061D63
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/du.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A243 (Wed Apr 20 18:41:07 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00018010 (  98320.)
.text:00401000 ; Section size in file          : 00018200 (  98816.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_402250+9C↓p
.text:00401040                                         ; .text:00417C30↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_417BD0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_41A000
.text:004010A2                 mov     edx, dword_41A0C0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_41A004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_41A0E0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_41A0E0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_417BA0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_41A000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_41A004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_402250
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_417BD0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 dword_401280    dd 6C6C61h, 61707061h, 746E6572h, 7A69732Dh, 6C620065h
.text:00401280                                         ; DATA XREF: .text:off_401380↓o
.text:00401280                 dd 2D6B636Fh, 657A6973h, 74796200h, 63007365h, 746E756Fh
.text:00401280                 dd 6E696C2Dh, 6400736Bh, 66657265h, 6E657265h, 64006563h
.text:00401280                 dd 66657265h, 6E657265h, 612D6563h, 736772h, 6C637865h
.text:00401280                 dd 656475h, 6C637865h, 2D656475h, 6D6F7266h, 6C696600h
.text:00401280                 dd 2D307365h, 6D6F7266h, 6D756800h, 722D6E61h, 61646165h
.text:00401280                 dd 656C62h, 6B006973h, 626F6C69h, 73657479h, 78616D00h
.text:00401280                 dd 7065642Dh, 6E006874h, 6C6C75h, 6167656Dh, 65747962h
.text:00401280                 dd 6F6E0073h, 7265642Dh, 72656665h, 65636E65h, 656E6F00h
.text:00401280                 dd 6C69662Dh, 79732D65h, 6D657473h, 70657300h, 74617261h
.text:00401280                 dd 69642D65h, 73007372h, 616D6D75h, 657A6972h
.text:00401358                 db 0
.text:00401359 aTotal          db 'total',0            ; DATA XREF: .text:004014C0↓o
.text:00401359                                         ; sub_402F10:loc_402F47↓o
.text:0040135F aHelp           db 'help',0             ; DATA XREF: .text:004014D0↓o
.text:00401364 aVersion        db 'version',0          ; DATA XREF: .text:004014E0↓o
.text:0040136C                 align 20h
.text:00401380 off_401380      dd offset dword_401280  ; DATA XREF: sub_402250+E8↓o
.text:00401384                 dd 2 dup(0)
.text:0040138C                 dd 61h, 401284h, 2 dup(0)
.text:0040139C                 dd 80h, 401292h, 1, 0
.text:004013AC                 dd 42h, 40129Dh, 2 dup(0)
.text:004013BC                 dd 62h, 4012A3h, 2 dup(0)
.text:004013CC                 dd 6Ch, 4012AFh, 2 dup(0)
.text:004013DC                 dd 4Ch, 4012BBh, 2 dup(0)
.text:004013EC                 dd 44h, 4012CCh, 1, 0
.text:004013FC                 dd 81h, 4012D4h, 1, 0
.text:0040140C                 dd 58h, 4012E1h, 1, 0
.text:0040141C                 dd 82h, 4012EDh, 2 dup(0)
.text:0040142C                 dd 68h, 4012FCh, 2 dup(0)
.text:0040143C                 dd 83h, 4012FFh, 2 dup(0)
.text:0040144C                 dd 6Bh, 401309h, 1, 0
.text:0040145C                 dd 84h, 401313h, 2 dup(0)
.text:0040146C                 dd 30h, 401318h, 2 dup(0)
.text:0040147C                 dd 6Dh, 401322h, 2 dup(0)
.text:0040148C                 dd 50h, 401331h, 2 dup(0)
.text:0040149C                 dd 78h, 401341h, 2 dup(0)
.text:004014AC                 dd 53h, 40134Fh, 2 dup(0)
.text:004014BC                 dd 73h
.text:004014C0                 dd offset aTotal        ; "total"
.text:004014C4                 dd 2 dup(0)
.text:004014CC                 dd 63h
.text:004014D0                 dd offset aHelp         ; "help"
.text:004014D4                 dd 2 dup(0)
.text:004014DC                 dd 0FFFFFF7Eh
.text:004014E0                 dd offset aVersion      ; "version"
.text:004014E4                 dd 2 dup(0)
.text:004014EC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401500 byte_401500     db 2Eh, 0               ; DATA XREF: sub_402250+2F↓o
.text:00401502 ; const char Locale
.text:00401502 Locale          db 0                    ; DATA XREF: sub_402250+5F↓o
.text:00401503                 align 20h
.text:00401520 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401520                                         ; DATA XREF: sub_402250+73↓o
.text:00401543 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_402250+7B↓o
.text:00401543                                         ; sub_402250+88↓o
.text:0040154D ; const char VarName[]
.text:0040154D VarName         db 'DU_BLOCK_SIZE',0    ; DATA XREF: sub_402250+AB↓o
.text:0040155B a0abchhklmsxbDl db '0abchHklmsxB:DLPSX:',0
.text:0040155B                                         ; DATA XREF: sub_402250+F0↓o
.text:0040156F                 align 20h
.text:00401580 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah
.text:00401580                                         ; DATA XREF: sub_402250:loc_4023B7↓o
.text:00401580                                         ; sub_402CA0:loc_402CE0↓o
.text:00401580                 db '  or:  %s [OPTION]... --files0-from=F',0Ah,0
.text:004015C7                 align 20h
.text:004015E0 aSummarizeDiskU db 'Summarize disk usage of each FILE, recursively for directories.',0Ah
.text:004015E0                                         ; DATA XREF: sub_402250+18A↓o
.text:004015E0                                         ; sub_402CA0+63↓o
.text:004015E0                 db 0Ah,0
.text:00401622                 align 20h
.text:00401640 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:00401640                                         ; DATA XREF: sub_402250+1AC↓o
.text:00401640                                         ; sub_402CA0+85↓o
.text:00401640                 db 'ns too.',0Ah,0
.text:0040168A                 align 20h
.text:004016A0 aAAllWriteCount db '  -a, --all             write counts for all files, not just dire'
.text:004016A0                                         ; DATA XREF: sub_402250+1CE↓o
.text:004016A0                                         ; sub_402CA0+A7↓o
.text:004016A0                 db 'ctories',0Ah
.text:004016A0                 db '      --apparent-size   print apparent sizes, rather than disk us'
.text:004016A0                 db 'age; although',0Ah
.text:004016A0                 db '                          the apparent size is usually smaller, i'
.text:004016A0                 db 't may be',0Ah
.text:004016A0                 db '                          larger due to holes in (`sparse',27h,')'
.text:004016A0                 db ' files, internal',0Ah
.text:004016A0                 db '                          fragmentation, indirect blocks, and the'
.text:004016A0                 db ' like',0Ah
.text:004016A0                 db '  -B, --block-size=SIZE use SIZE-byte blocks',0Ah
.text:004016A0                 db '  -b, --bytes           equivalent to `--apparent-size --block-si'
.text:004016A0                 db 'ze=1',27h,0Ah
.text:004016A0                 db '  -c, --total           produce a grand total',0Ah
.text:004016A0                 db '  -D, --dereference-args  dereference FILEs that are symbolic lin'
.text:004016A0                 db 'ks',0Ah,0
.text:004018FC                 align 10h
.text:00401900 aFiles0FromFSum db '      --files0-from=F   summarize disk usage of the NUL-terminate'
.text:00401900                                         ; DATA XREF: sub_402250+1F0↓o
.text:00401900                                         ; sub_402CA0+C9↓o
.text:00401900                 db 'd file',0Ah
.text:00401900                 db '                          names specified in file F',0Ah
.text:00401900                 db '  -H                    like --si, but also evokes a warning; wil'
.text:00401900                 db 'l soon',0Ah
.text:00401900                 db '                          change to be equivalent to --dereferenc'
.text:00401900                 db 'e-args (-D)',0Ah
.text:00401900                 db '  -h, --human-readable  print sizes in human readable format (e.g'
.text:00401900                 db '., 1K 234M 2G)',0Ah
.text:00401900                 db '      --si              like -h, but use powers of 1000 not 1024',0Ah
.text:00401900                 db '  -k                    like --block-size=1K',0Ah
.text:00401900                 db '  -l, --count-links     count sizes many times if hard linked',0Ah
.text:00401900                 db 0
.text:00401B0E                 align 20h
.text:00401B20 aLDereferenceDe db '  -L, --dereference     dereference all symbolic links',0Ah
.text:00401B20                                         ; DATA XREF: sub_402250+212↓o
.text:00401B20                                         ; sub_402CA0+EB↓o
.text:00401B20                 db '  -P, --no-dereference  don',27h,'t follow any symbolic links (th'
.text:00401B20                 db 'is is the default)',0Ah
.text:00401B20                 db '  -0, --null            end each output line with 0 byte rather t'
.text:00401B20                 db 'han newline',0Ah
.text:00401B20                 db '  -S, --separate-dirs   do not include size of subdirectories',0Ah
.text:00401B20                 db '  -s, --summarize       display only a total for each argument',0Ah
.text:00401B20                 db 0
.text:00401C70                 align 20h
.text:00401C80 aXOneFileSystem db '  -x, --one-file-system  skip directories on different file syste'
.text:00401C80                                         ; DATA XREF: sub_402250+234↓o
.text:00401C80                                         ; sub_402CA0+10D↓o
.text:00401C80                 db 'ms',0Ah
.text:00401C80                 db '  -X FILE, --exclude-from=FILE  Exclude files that match any patt'
.text:00401C80                 db 'ern in FILE.',0Ah
.text:00401C80                 db '      --exclude=PATTERN Exclude files that match PATTERN.',0Ah
.text:00401C80                 db '      --max-depth=N     print the total for a directory (or file,'
.text:00401C80                 db ' with --all)',0Ah
.text:00401C80                 db '                          only if it is N or fewer levels below t'
.text:00401C80                 db 'he command',0Ah
.text:00401C80                 db '                          line argument;  --max-depth=0 is the sa'
.text:00401C80                 db 'me as',0Ah
.text:00401C80                 db '                          --summarize',0Ah,0
.text:00401E54                 align 10h
.text:00401E60 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401E60                                         ; DATA XREF: sub_402250+256↓o
.text:00401E60                                         ; sub_402CA0+12F↓o
.text:00401E8D                 align 20h
.text:00401EA0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401EA0                                         ; DATA XREF: sub_402250+278↓o
.text:00401EA0                                         ; sub_402CA0+151↓o
.text:00401ED6                 align 10h
.text:00401EE0 aSizeMayBeOrMay db 0Ah                  ; DATA XREF: sub_402250+29A↓o
.text:00401EE0                                         ; sub_402CA0+173↓o
.text:00401EE0                 db 'SIZE may be (or may be an integer optionally followed by) one of '
.text:00401EE0                 db 'following:',0Ah
.text:00401EE0                 db 'kB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T, P'
.text:00401EE0                 db ', E, Z, Y.',0Ah,0
.text:00401F7A aReportBugsToS  db 0Ah                  ; DATA XREF: sub_402250+2BC↓o
.text:00401F7A                                         ; sub_402CA0+195↓o
.text:00401F7A                 db 'Report bugs to <%s>.',0Ah,0
.text:00401F91 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401F91                                         ; DATA XREF: sub_402250+2C9↓o
.text:00401F91                                         ; sub_402CA0+1A2↓o
.text:00401FA7 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_402250+2F3↓o
.text:00401FB4 aDavidMackenzie db 'David MacKenzie, Paul Eggert',0
.text:00401FB4                                         ; DATA XREF: sub_402250+2FB↓o
.text:00401FD1 aTorbjornGranlu db 'Torbjorn Granlund',0
.text:00401FD1                                         ; DATA XREF: sub_402250+306↓o
.text:00401FE3 a530            db '5.3.0',0            ; DATA XREF: sub_402250+30E↓o
.text:00401FE9 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_402250+316↓o
.text:00401FF7 ; const FILE stru_401FF7
.text:00401FF7 stru_401FF7     FILE <25007564h, 768D0073h, 52415700h, 474E494Eh, 7375203Ah, \
.text:00401FF7                                         ; DATA XREF: sub_402250+31E↓o
.text:00401FF7                                         ; sub_402250+412↓o ...
.text:00401FF7                       2D2D2065h, 202C6973h, 20746F6Eh>
.text:00402017                 db  2Dh ; -
.text:00402018                 db  48h ; H
.text:00402019                 db  3Bh ; ;
.text:0040201A                 db  20h
.text:0040201B                 db  74h ; t
.text:0040201C                 db  68h ; h
.text:0040201D                 db  65h ; e
.text:0040201E                 db  20h
.text:0040201F                 db  6Dh ; m
.text:00402020                 db  65h ; e
.text:00402021                 db  61h ; a
.text:00402022                 db  6Eh ; n
.text:00402023                 db  69h ; i
.text:00402024                 db  6Eh ; n
.text:00402025                 db  67h ; g
.text:00402026                 db  20h
.text:00402027                 db  6Fh ; o
.text:00402028                 db  66h ; f
.text:00402029                 db  20h
.text:0040202A                 db  74h ; t
.text:0040202B                 db  68h ; h
.text:0040202C                 db  65h ; e
.text:0040202D                 db  20h
.text:0040202E                 db  2Dh ; -
.text:0040202F                 db  48h ; H
.text:00402030                 db  20h
.text:00402031                 db  6Fh ; o
.text:00402032                 db  70h ; p
.text:00402033                 db  74h ; t
.text:00402034                 db  69h ; i
.text:00402035                 db  6Fh ; o
.text:00402036                 db  6Eh ; n
.text:00402037                 db  20h
.text:00402038                 db  77h ; w
.text:00402039                 db  69h ; i
.text:0040203A                 db  6Ch ; l
.text:0040203B                 db  6Ch ; l
.text:0040203C                 db  20h
.text:0040203D                 db  73h ; s
.text:0040203E                 db  6Fh ; o
.text:0040203F                 db  6Fh ; o
.text:00402040                 db  6Eh ; n
.text:00402041                 db  0Ah
.text:00402042                 db  63h ; c
.text:00402043                 db  68h ; h
.text:00402044                 db  61h ; a
.text:00402045                 db  6Eh ; n
.text:00402046                 db  67h ; g
.text:00402047                 db  65h ; e
.text:00402048                 db  20h
.text:00402049                 db  74h ; t
.text:0040204A                 db  6Fh ; o
.text:0040204B                 db  20h
.text:0040204C                 db  62h ; b
.text:0040204D                 db  65h ; e
.text:0040204E                 db  20h
.text:0040204F                 db  74h ; t
.text:00402050                 db  68h ; h
.text:00402051                 db  65h ; e
.text:00402052                 db  20h
.text:00402053                 db  73h ; s
.text:00402054                 db  61h ; a
.text:00402055                 db  6Dh ; m
.text:00402056                 db  65h ; e
.text:00402057                 db  20h
.text:00402058                 db  61h ; a
.text:00402059                 db  73h ; s
.text:0040205A                 db  20h
.text:0040205B                 db  74h ; t
.text:0040205C                 db  68h ; h
.text:0040205D                 db  61h ; a
.text:0040205E                 db  74h ; t
.text:0040205F                 db  20h
.text:00402060                 db  6Fh ; o
.text:00402061                 db  66h ; f
.text:00402062                 db  20h
.text:00402063                 db  2Dh ; -
.text:00402064                 db  2Dh ; -
.text:00402065                 db  64h ; d
.text:00402066                 db  65h ; e
.text:00402067                 db  72h ; r
.text:00402068                 db  65h ; e
.text:00402069                 db  66h ; f
.text:0040206A                 db  65h ; e
.text:0040206B                 db  72h ; r
.text:0040206C                 db  65h ; e
.text:0040206D                 db  6Eh ; n
.text:0040206E                 db  63h ; c
.text:0040206F                 db  65h ; e
.text:00402070                 db  2Dh ; -
.text:00402071                 db  61h ; a
.text:00402072                 db  72h ; r
.text:00402073                 db  67h ; g
.text:00402074                 db  73h ; s
.text:00402075                 db  20h
.text:00402076                 db  28h ; (
.text:00402077                 db  2Dh ; -
.text:00402078                 db  44h ; D
.text:00402079                 db  29h ; )
.text:0040207A                 db    0
.text:0040207B aInvalidMaximum db 'invalid maximum depth %s',0
.text:0040207B                                         ; DATA XREF: sub_402250+5B3↓o
.text:00402094 asc_402094      db '-',0                ; DATA XREF: sub_402250+6BC↓o
.text:00402096                 align 10h
.text:004020A0 aCannotReadFile db 'cannot read file names from %s',0
.text:004020A0                                         ; DATA XREF: sub_402250+714↓o
.text:004020BF aInvalidZeroLen db 'invalid zero-length file name',0
.text:004020BF                                         ; DATA XREF: sub_402250+7CB↓o
.text:004020BF                                         ; sub_402250:loc_402A65↓o
.text:004020DD ; const char aSLuS[]
.text:004020DD aSLuS           db '%s:%lu: %s',0       ; DATA XREF: sub_402250+7F7↓o
.text:004020E8 aCannotOpenSFor db 'cannot open %s for reading',0
.text:004020E8                                         ; DATA XREF: sub_402250+8C2↓o
.text:00402103 ; const char aR[]
.text:00402103 aR              db 'r',0                ; DATA XREF: sub_402250:loc_402B47↓o
.text:00402105 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: sub_402250+91F↓o
.text:00402116                 align 10h
.text:00402120 aFileOperandsCa db 'File operands cannot be combined with --files0-from.',0
.text:00402120                                         ; DATA XREF: sub_402250+94A↓o
.text:00402155 ; const char Format[]
.text:00402155 Format          db '%s',0Ah,0           ; DATA XREF: sub_402250+957↓o
.text:00402159                 align 10h
.text:00402160 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00402160                                         ; DATA XREF: sub_402250:loc_402BC4↓o
.text:00402160                                         ; sub_402CA0+C↓o
.text:00402187                 align 20h
.text:004021A0 aWarningSummari_0 db 'warning: summarizing conflicts with --max-depth=%lu',0
.text:004021A0                                         ; DATA XREF: sub_402250:loc_402C18↓o
.text:004021D4                 align 10h
.text:004021E0 aWarningSummari db 'warning: summarizing is the same as using --max-depth=0',0
.text:004021E0                                         ; DATA XREF: sub_402250:loc_402C43↓o
.text:00402218                 align 10h
.text:00402220 aCannotBothSumm db 'cannot both summarize and show all entries',0
.text:00402220                                         ; DATA XREF: sub_402250:loc_402C6D↓o
.text:0040224B                 align 10h
.text:00402250
.text:00402250 ; =============== S U B R O U T I N E =======================================
.text:00402250
.text:00402250 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00402250
.text:00402250 sub_402250      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00402250
.text:00402250 Category        = dword ptr -108h
.text:00402250 Locale          = dword ptr -104h
.text:00402250 FileName        = dword ptr -100h
.text:00402250 var_FC          = byte ptr -0FCh
.text:00402250 Str             = dword ptr -0F8h
.text:00402250 var_F4          = dword ptr -0F4h
.text:00402250 var_F0          = dword ptr -0F0h
.text:00402250 var_EC          = dword ptr -0ECh
.text:00402250 var_DD          = byte ptr -0DDh
.text:00402250 var_DC          = dword ptr -0DCh
.text:00402250 var_D8          = byte ptr -0D8h
.text:00402250 var_C0          = dword ptr -0C0h
.text:00402250 var_BC          = dword ptr -0BCh
.text:00402250 var_B5          = byte ptr -0B5h
.text:00402250 var_B4          = dword ptr -0B4h
.text:00402250 var_B0          = dword ptr -0B0h
.text:00402250 var_AC          = dword ptr -0ACh
.text:00402250 var_A8          = dword ptr -0A8h
.text:00402250 var_A4          = dword ptr -0A4h
.text:00402250 arg_0           = dword ptr  8
.text:00402250 arg_4           = dword ptr  0Ch
.text:00402250
.text:00402250                 push    ebp
.text:00402251                 xor     eax, eax
.text:00402253                 mov     ebp, esp
.text:00402255                 push    edi
.text:00402256                 push    esi
.text:00402257                 push    ebx
.text:00402258                 sub     esp, 0FCh
.text:0040225E                 mov     bl, 1
.text:00402260                 and     esp, 0FFFFFFF0h
.text:00402263                 mov     edi, [ebp+arg_4]
.text:00402266                 mov     esi, [ebp+arg_0]
.text:00402269                 call    __alloca
.text:0040226E                 call    sub_417C70
.text:00402273                 mov     [ebp+var_B5], 0
.text:0040227A                 mov     edx, 110h
.text:0040227F                 mov     eax, offset byte_401500
.text:00402284                 mov     [ebp+var_C0], edx
.text:0040228A                 xor     ecx, ecx
.text:0040228C                 xor     edx, edx
.text:0040228E                 mov     [ebp+var_B0], eax
.text:00402294                 mov     [ebp+var_AC], edx
.text:0040229A                 mov     edx, [edi]
.text:0040229C                 mov     [ebp+var_BC], ecx
.text:004022A2                 mov     [ebp+var_D8], 0
.text:004022A9                 mov     ds:dword_41B610, edx
.text:004022AF                 mov     [esp+108h+Locale], offset Locale ; Locale
.text:004022B7                 mov     [esp+108h+Category], 0 ; Category
.text:004022BE                 call    setlocale
.text:004022C3                 mov     [esp+108h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004022CB                 mov     [esp+108h+Category], offset aCoreutils ; "coreutils"
.text:004022D2                 call    ds:libintl_bindtextdomain
.text:004022D8                 mov     [esp+108h+Category], offset aCoreutils ; "coreutils"
.text:004022DF                 call    ds:libintl_textdomain
.text:004022E5                 mov     [esp+108h+Category], offset sub_40A830 ; void (__cdecl *)()
.text:004022EC                 call    sub_401040
.text:004022F1                 call    sub_408FA0
.text:004022F6                 mov     ds:dword_41B0E0, eax
.text:004022FB                 mov     [esp+108h+Category], offset VarName ; "DU_BLOCK_SIZE"
.text:00402302                 call    getenv
.text:00402307                 mov     [esp+108h+FileName], offset dword_41B0D0 ; int
.text:0040230F                 mov     [esp+108h+Locale], 0 ; char
.text:00402317
.text:00402317 loc_402317:                             ; CODE XREF: sub_402250+363↓j
.text:00402317                 mov     [esp+108h+Category], eax ; char *
.text:0040231A                 call    sub_40A4B0
.text:0040231F                 mov     ds:dword_41B0C0, eax
.text:00402324                 lea     esi, [esi+0]
.text:0040232A                 lea     edi, [edi+0]
.text:00402330
.text:00402330 loc_402330:                             ; CODE XREF: sub_402250+162↓j
.text:00402330                                         ; sub_402250+349↓j ...
.text:00402330                 mov     [esp+108h+Str], 0
.text:00402338                 mov     dword ptr [esp+108h+var_FC], offset off_401380 ; char
.text:00402340                 mov     [esp+108h+FileName], offset a0abchhklmsxbDl ; "0abchHklmsxB:DLPSX:"
.text:00402348                 mov     [esp+108h+Locale], edi
.text:0040234C                 mov     [esp+108h+Category], esi
.text:0040234F                 call    sub_409700
.text:00402354                 cmp     eax, 0FFFFFFFFh
.text:00402357                 jz      loc_402884
.text:0040235D                 cmp     eax, 62h ; 'b'
.text:00402360                 jz      loc_402870
.text:00402366                 cmp     eax, 62h ; 'b'
.text:00402369                 jg      loc_4026D8
.text:0040236F                 cmp     eax, 48h ; 'H'
.text:00402372                 jz      loc_40268D
.text:00402378                 cmp     eax, 48h ; 'H'
.text:0040237B                 jg      loc_4025C4
.text:00402381                 cmp     eax, 30h ; '0'
.text:00402384                 jz      loc_4025B8
.text:0040238A                 cmp     eax, 30h ; '0'
.text:0040238D                 jg      loc_402580
.text:00402393                 cmp     eax, 0FFFFFF7Dh
.text:00402398                 jz      loc_402535
.text:0040239E                 cmp     eax, 0FFFFFF7Eh
.text:004023A3                 jz      short loc_4023B7
.text:004023A5                 lea     esi, [esi+0]
.text:004023A9                 lea     edi, [edi+0]
.text:004023B0
.text:004023B0 loc_4023B0:                             ; CODE XREF: sub_402250+338↓j
.text:004023B0                                         ; sub_402250+38A↓j ...
.text:004023B0                 xor     ebx, ebx
.text:004023B2                 jmp     loc_402330
.text:004023B7 ; ---------------------------------------------------------------------------
.text:004023B7
.text:004023B7 loc_4023B7:                             ; CODE XREF: sub_402250+153↑j
.text:004023B7                 mov     [esp+108h+Category], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n  or: "...
.text:004023BE                 call    ds:libintl_gettext
.text:004023C4                 mov     edi, ds:dword_41B610
.text:004023CA                 mov     [esp+108h+Category], eax ; Format
.text:004023CD                 mov     [esp+108h+FileName], edi
.text:004023D1                 mov     [esp+108h+Locale], edi
.text:004023D5                 call    printf
.text:004023DA                 mov     [esp+108h+Category], offset aSummarizeDiskU ; "Summarize disk usage of each FILE, recu"...
.text:004023E1                 call    ds:libintl_gettext
.text:004023E7                 mov     esi, ds:_iob
.text:004023ED                 add     esi, 20h ; ' '
.text:004023F0                 mov     [esp+108h+Locale], esi ; Stream
.text:004023F4                 mov     [esp+108h+Category], eax ; Buffer
.text:004023F7                 call    fputs
.text:004023FC                 mov     [esp+108h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00402403                 call    ds:libintl_gettext
.text:00402409                 mov     ecx, ds:_iob
.text:0040240F                 add     ecx, 20h ; ' '
.text:00402412                 mov     [esp+108h+Locale], ecx ; Stream
.text:00402416                 mov     [esp+108h+Category], eax ; Buffer
.text:00402419                 call    fputs
.text:0040241E                 mov     [esp+108h+Category], offset aAAllWriteCount ; "  -a, --all             write counts fo"...
.text:00402425                 call    ds:libintl_gettext
.text:0040242B                 mov     ebx, ds:_iob
.text:00402431                 add     ebx, 20h ; ' '
.text:00402434                 mov     [esp+108h+Locale], ebx ; Stream
.text:00402438                 mov     [esp+108h+Category], eax ; Buffer
.text:0040243B                 call    fputs
.text:00402440                 mov     [esp+108h+Category], offset aFiles0FromFSum ; "      --files0-from=F   summarize disk "...
.text:00402447                 call    ds:libintl_gettext
.text:0040244D                 mov     edi, ds:_iob
.text:00402453                 add     edi, 20h ; ' '
.text:00402456                 mov     [esp+108h+Locale], edi ; Stream
.text:0040245A                 mov     [esp+108h+Category], eax ; Buffer
.text:0040245D                 call    fputs
.text:00402462                 mov     [esp+108h+Category], offset aLDereferenceDe ; "  -L, --dereference     dereference all"...
.text:00402469                 call    ds:libintl_gettext
.text:0040246F                 mov     esi, ds:_iob
.text:00402475                 add     esi, 20h ; ' '
.text:00402478                 mov     [esp+108h+Locale], esi ; Stream
.text:0040247C                 mov     [esp+108h+Category], eax ; Buffer
.text:0040247F                 call    fputs
.text:00402484                 mov     [esp+108h+Category], offset aXOneFileSystem ; "  -x, --one-file-system  skip directori"...
.text:0040248B                 call    ds:libintl_gettext
.text:00402491                 mov     ecx, ds:_iob
.text:00402497                 add     ecx, 20h ; ' '
.text:0040249A                 mov     [esp+108h+Locale], ecx ; Stream
.text:0040249E                 mov     [esp+108h+Category], eax ; Buffer
.text:004024A1                 call    fputs
.text:004024A6                 mov     [esp+108h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004024AD                 call    ds:libintl_gettext
.text:004024B3                 mov     ebx, ds:_iob
.text:004024B9                 add     ebx, 20h ; ' '
.text:004024BC                 mov     [esp+108h+Locale], ebx ; Stream
.text:004024C0                 mov     [esp+108h+Category], eax ; Buffer
.text:004024C3                 call    fputs
.text:004024C8                 mov     [esp+108h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:004024CF                 call    ds:libintl_gettext
.text:004024D5                 mov     edi, ds:_iob
.text:004024DB                 add     edi, 20h ; ' '
.text:004024DE                 mov     [esp+108h+Locale], edi ; Stream
.text:004024E2                 mov     [esp+108h+Category], eax ; Buffer
.text:004024E5                 call    fputs
.text:004024EA                 mov     [esp+108h+Category], offset aSizeMayBeOrMay ; "\nSIZE may be (or may be an integer opt"...
.text:004024F1                 call    ds:libintl_gettext
.text:004024F7                 mov     esi, ds:_iob
.text:004024FD                 add     esi, 20h ; ' '
.text:00402500                 mov     [esp+108h+Locale], esi ; Stream
.text:00402504                 mov     [esp+108h+Category], eax ; Buffer
.text:00402507                 call    fputs
.text:0040250C                 mov     [esp+108h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402513                 call    ds:libintl_gettext
.text:00402519                 mov     [esp+108h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402521                 mov     [esp+108h+Category], eax ; Format
.text:00402524                 call    printf
.text:00402529
.text:00402529 loc_402529:                             ; CODE XREF: sub_402250+32E↓j
.text:00402529                 mov     [esp+108h+Category], 0 ; Code
.text:00402530
.text:00402530 loc_402530:                             ; CODE XREF: sub_402250+8AF↓j
.text:00402530                                         ; sub_402250+9A7↓j
.text:00402530                 call    exit
.text:00402535 ; ---------------------------------------------------------------------------
.text:00402535
.text:00402535 loc_402535:                             ; CODE XREF: sub_402250+148↑j
.text:00402535                 mov     [esp+108h+var_EC], 0
.text:0040253D                 mov     edx, ds:_iob
.text:00402543                 mov     [esp+108h+var_F0], offset aJimMeyering ; "Jim Meyering"
.text:0040254B                 mov     [esp+108h+var_F4], offset aDavidMackenzie ; "David MacKenzie, Paul Eggert"
.text:00402553                 add     edx, 20h ; ' '
.text:00402556                 mov     [esp+108h+Str], offset aTorbjornGranlu ; "Torbjorn Granlund"
.text:0040255E                 mov     dword ptr [esp+108h+var_FC], offset a530 ; "5.3.0"
.text:00402566                 mov     [esp+108h+FileName], offset aGnuCoreutils ; "GNU coreutils"
.text:0040256E                 mov     [esp+108h+Locale], offset stru_401FF7 ; FILE *
.text:00402576                 mov     [esp+108h+Category], edx ; FILE *
.text:00402579                 call    sub_408C00
.text:0040257E                 jmp     short loc_402529
.text:00402580 ; ---------------------------------------------------------------------------
.text:00402580
.text:00402580 loc_402580:                             ; CODE XREF: sub_402250+13D↑j
.text:00402580                 cmp     eax, 42h ; 'B'
.text:00402583                 jz      short loc_40259E
.text:00402585                 cmp     eax, 44h ; 'D'
.text:00402588                 jnz     loc_4023B0
.text:0040258E                 mov     edx, 1
.text:00402593
.text:00402593 loc_402593:                             ; CODE XREF: sub_402250+395↓j
.text:00402593                 mov     [ebp+var_C0], edx
.text:00402599                 jmp     loc_402330
.text:0040259E ; ---------------------------------------------------------------------------
.text:0040259E
.text:0040259E loc_40259E:                             ; CODE XREF: sub_402250+333↑j
.text:0040259E                 mov     [esp+108h+FileName], offset dword_41B0D0
.text:004025A6                 mov     eax, ds:dword_41B630
.text:004025AB                 mov     [esp+108h+Locale], 1
.text:004025B3                 jmp     loc_402317
.text:004025B8 ; ---------------------------------------------------------------------------
.text:004025B8
.text:004025B8 loc_4025B8:                             ; CODE XREF: sub_402250+134↑j
.text:004025B8                 mov     ds:byte_41B030, 1
.text:004025BF                 jmp     loc_402330
.text:004025C4 ; ---------------------------------------------------------------------------
.text:004025C4
.text:004025C4 loc_4025C4:                             ; CODE XREF: sub_402250+12B↑j
.text:004025C4                 cmp     eax, 53h ; 'S'
.text:004025C7                 jz      loc_402681
.text:004025CD                 cmp     eax, 53h ; 'S'
.text:004025D0                 jg      short loc_4025F7
.text:004025D2                 cmp     eax, 4Ch ; 'L'
.text:004025D5                 jz      short loc_4025E7
.text:004025D7                 cmp     eax, 50h ; 'P'
.text:004025DA                 jnz     loc_4023B0
.text:004025E0                 mov     edx, 10h
.text:004025E5                 jmp     short loc_402593
.text:004025E7 ; ---------------------------------------------------------------------------
.text:004025E7
.text:004025E7 loc_4025E7:                             ; CODE XREF: sub_402250+385↑j
.text:004025E7                 mov     ecx, 2
.text:004025EC                 mov     [ebp+var_C0], ecx
.text:004025F2                 jmp     loc_402330
.text:004025F7 ; ---------------------------------------------------------------------------
.text:004025F7
.text:004025F7 loc_4025F7:                             ; CODE XREF: sub_402250+380↑j
.text:004025F7                 cmp     eax, 58h ; 'X'
.text:004025FA                 jz      short loc_402611
.text:004025FC                 cmp     eax, 61h ; 'a'
.text:004025FF                 jnz     loc_4023B0
.text:00402605                 mov     ds:byte_41B000, 1
.text:0040260C                 jmp     loc_402330
.text:00402611 ; ---------------------------------------------------------------------------
.text:00402611
.text:00402611 loc_402611:                             ; CODE XREF: sub_402250+3AA↑j
.text:00402611                 mov     [esp+108h+Str], 0Ah ; char
.text:00402619                 mov     edx, ds:dword_41B630
.text:0040261F                 mov     ecx, ds:dword_41B0E0
.text:00402625                 mov     dword ptr [esp+108h+var_FC], 10000000h ; int
.text:0040262D                 mov     [esp+108h+FileName], edx ; FileName
.text:00402631                 mov     [esp+108h+Locale], ecx ; int
.text:00402635                 mov     [esp+108h+Category], offset sub_408FF0 ; int
.text:0040263C                 call    sub_408D70
.text:00402641                 test    eax, eax
.text:00402643                 jz      loc_402330
.text:00402649                 mov     ecx, ds:dword_41B630
.text:0040264F                 mov     [esp+108h+Category], ecx ; char *
.text:00402652                 call    sub_4061B0
.text:00402657                 mov     ebx, eax
.text:00402659                 call    _errno
.text:0040265E                 mov     dword ptr [esp+108h+var_FC], ebx ; char
.text:00402662                 mov     [esp+108h+FileName], (offset stru_401FF7._ptr+3) ; char *
.text:0040266A                 mov     ebx, [eax]
.text:0040266C                 mov     [esp+108h+Locale], ebx ; ErrorMessage
.text:00402670
.text:00402670 loc_402670:                             ; CODE XREF: sub_402250+5D2↓j
.text:00402670                 mov     [esp+108h+Category], 0 ; Code
.text:00402677                 call    sub_40E9E0
.text:0040267C                 jmp     loc_4023B0
.text:00402681 ; ---------------------------------------------------------------------------
.text:00402681
.text:00402681 loc_402681:                             ; CODE XREF: sub_402250+377↑j
.text:00402681                 mov     ds:byte_41B050, 1
.text:00402688                 jmp     loc_402330
.text:0040268D ; ---------------------------------------------------------------------------
.text:0040268D
.text:0040268D loc_40268D:                             ; CODE XREF: sub_402250+122↑j
.text:0040268D                 mov     [esp+108h+Category], (offset stru_401FF7._base+1)
.text:00402694                 call    ds:libintl_gettext
.text:0040269A                 mov     [esp+108h+Locale], 0 ; ErrorMessage
.text:004026A2                 mov     [esp+108h+Category], 0 ; Code
.text:004026A9                 mov     [esp+108h+FileName], eax ; char *
.text:004026AD                 call    sub_40E9E0
.text:004026B2
.text:004026B2 loc_4026B2:                             ; CODE XREF: sub_402250+53D↓j
.text:004026B2                 mov     ecx, 90h
.text:004026B7
.text:004026B7 loc_4026B7:                             ; CODE XREF: sub_402250+4B3↓j
.text:004026B7                 mov     ds:dword_41B0C0, ecx
.text:004026BD                 lea     esi, [esi+0]
.text:004026C0
.text:004026C0 loc_4026C0:                             ; CODE XREF: sub_402250+62F↓j
.text:004026C0                 mov     edx, 1
.text:004026C5
.text:004026C5 loc_4026C5:                             ; CODE XREF: sub_402250+4DB↓j
.text:004026C5                 mov     ds:dword_41B0D0, edx
.text:004026CB
.text:004026CB loc_4026CB:                             ; CODE XREF: sub_402250+4FB↓j
.text:004026CB                 xor     ecx, ecx
.text:004026CD                 mov     ds:dword_41B0D4, ecx
.text:004026D3                 jmp     loc_402330
.text:004026D8 ; ---------------------------------------------------------------------------
.text:004026D8
.text:004026D8 loc_4026D8:                             ; CODE XREF: sub_402250+119↑j
.text:004026D8                 cmp     eax, 73h ; 's'
.text:004026DB                 jz      loc_40285D
.text:004026E1                 cmp     eax, 73h ; 's'
.text:004026E4                 jg      short loc_402750
.text:004026E6                 cmp     eax, 6Bh ; 'k'
.text:004026E9                 jz      short loc_402739
.text:004026EB                 cmp     eax, 6Bh ; 'k'
.text:004026EE                 jg      short loc_402711
.text:004026F0                 cmp     eax, 63h ; 'c'
.text:004026F3                 jz      short loc_402705
.text:004026F5                 cmp     eax, 68h ; 'h'
.text:004026F8                 jnz     loc_4023B0
.text:004026FE                 mov     ecx, 0B0h ; '°'
.text:00402703                 jmp     short loc_4026B7
.text:00402705 ; ---------------------------------------------------------------------------
.text:00402705
.text:00402705 loc_402705:                             ; CODE XREF: sub_402250+4A3↑j
.text:00402705                 mov     ds:byte_41B040, 1
.text:0040270C                 jmp     loc_402330
.text:00402711 ; ---------------------------------------------------------------------------
.text:00402711
.text:00402711 loc_402711:                             ; CODE XREF: sub_402250+49E↑j
.text:00402711                 cmp     eax, 6Ch ; 'l'
.text:00402714                 jz      short loc_40272D
.text:00402716                 cmp     eax, 6Dh ; 'm'
.text:00402719                 jnz     loc_4023B0
.text:0040271F                 xor     eax, eax
.text:00402721                 mov     edx, 100000h
.text:00402726                 mov     ds:dword_41B0C0, eax
.text:0040272B                 jmp     short loc_4026C5
.text:0040272D ; ---------------------------------------------------------------------------
.text:0040272D
.text:0040272D loc_40272D:                             ; CODE XREF: sub_402250+4C4↑j
.text:0040272D                 mov     ds:byte_41B020, 1
.text:00402734                 jmp     loc_402330
.text:00402739 ; ---------------------------------------------------------------------------
.text:00402739
.text:00402739 loc_402739:                             ; CODE XREF: sub_402250+499↑j
.text:00402739                 xor     edx, edx
.text:0040273B                 mov     eax, 400h
.text:00402740                 mov     ds:dword_41B0C0, edx
.text:00402746                 mov     ds:dword_41B0D0, eax
.text:0040274B                 jmp     loc_4026CB
.text:00402750 ; ---------------------------------------------------------------------------
.text:00402750
.text:00402750 loc_402750:                             ; CODE XREF: sub_402250+494↑j
.text:00402750                 cmp     eax, 81h
.text:00402755                 jz      loc_402838
.text:0040275B                 cmp     eax, 81h
.text:00402760                 jg      short loc_402788
.text:00402762                 cmp     eax, 78h ; 'x'
.text:00402765                 jz      short loc_40277C
.text:00402767                 add     eax, 0FFFFFF80h
.text:0040276A                 jnz     loc_4023B0
.text:00402770                 mov     ds:byte_41B010, 1
.text:00402777                 jmp     loc_402330
.text:0040277C ; ---------------------------------------------------------------------------
.text:0040277C
.text:0040277C loc_40277C:                             ; CODE XREF: sub_402250+515↑j
.text:0040277C                 or      [ebp+var_C0], 40h
.text:00402783                 jmp     loc_402330
.text:00402788 ; ---------------------------------------------------------------------------
.text:00402788
.text:00402788 loc_402788:                             ; CODE XREF: sub_402250+510↑j
.text:00402788                 cmp     eax, 83h ; 'ƒ'
.text:0040278D                 jz      loc_4026B2
.text:00402793                 cmp     eax, 83h ; 'ƒ'
.text:00402798                 jl      loc_402827
.text:0040279E                 cmp     eax, 84h ; '„'
.text:004027A3                 jnz     loc_4023B0
.text:004027A9                 mov     [esp+108h+Str], 0 ; Str
.text:004027B1                 mov     ecx, ds:dword_41B630
.text:004027B7                 lea     edx, [ebp+var_B4]
.text:004027BD                 mov     dword ptr [esp+108h+var_FC], edx ; int
.text:004027C1                 mov     [esp+108h+FileName], 0 ; int
.text:004027C9                 mov     [esp+108h+Locale], 0 ; int
.text:004027D1                 mov     [esp+108h+Category], ecx ; int
.text:004027D4                 call    sub_409190
.text:004027D9                 test    eax, eax
.text:004027DB                 jnz     short loc_4027F5
.text:004027DD                 mov     [ebp+var_B5], 1
.text:004027E4                 mov     ecx, [ebp+var_B4]
.text:004027EA                 mov     dword_41A010, ecx
.text:004027F0                 jmp     loc_402330
.text:004027F5 ; ---------------------------------------------------------------------------
.text:004027F5
.text:004027F5 loc_4027F5:                             ; CODE XREF: sub_402250+58B↑j
.text:004027F5                 mov     ebx, ds:dword_41B630
.text:004027FB                 mov     [esp+108h+Category], ebx ; char *
.text:004027FE                 call    sub_40AC10
.text:00402803                 mov     [esp+108h+Category], offset aInvalidMaximum ; "invalid maximum depth %s"
.text:0040280A                 mov     ebx, eax
.text:0040280C                 call    ds:libintl_gettext
.text:00402812                 mov     dword ptr [esp+108h+var_FC], ebx
.text:00402816                 mov     [esp+108h+Locale], 0
.text:0040281E                 mov     [esp+108h+FileName], eax
.text:00402822                 jmp     loc_402670
.text:00402827 ; ---------------------------------------------------------------------------
.text:00402827
.text:00402827 loc_402827:                             ; CODE XREF: sub_402250+548↑j
.text:00402827                 mov     edx, ds:dword_41B630
.text:0040282D                 mov     [ebp+var_BC], edx
.text:00402833                 jmp     loc_402330
.text:00402838 ; ---------------------------------------------------------------------------
.text:00402838
.text:00402838 loc_402838:                             ; CODE XREF: sub_402250+505↑j
.text:00402838                 mov     [esp+108h+FileName], 10000000h
.text:00402840                 mov     edx, ds:dword_41B630
.text:00402846                 mov     ecx, ds:dword_41B0E0
.text:0040284C                 mov     [esp+108h+Locale], edx
.text:00402850                 mov     [esp+108h+Category], ecx
.text:00402853                 call    sub_408FF0
.text:00402858                 jmp     loc_402330
.text:0040285D ; ---------------------------------------------------------------------------
.text:0040285D
.text:0040285D loc_40285D:                             ; CODE XREF: sub_402250+48B↑j
.text:0040285D                 mov     [ebp+var_D8], 1
.text:00402864                 jmp     loc_402330
.text:00402864 ; ---------------------------------------------------------------------------
.text:00402869                 align 10h
.text:00402870
.text:00402870 loc_402870:                             ; CODE XREF: sub_402250+110↑j
.text:00402870                 mov     ds:byte_41B010, 1
.text:00402877                 xor     edx, edx
.text:00402879                 mov     ds:dword_41B0C0, edx
.text:0040287F                 jmp     loc_4026C0
.text:00402884 ; ---------------------------------------------------------------------------
.text:00402884
.text:00402884 loc_402884:                             ; CODE XREF: sub_402250+107↑j
.text:00402884                 test    bl, bl
.text:00402886                 jz      loc_402BC4
.text:0040288C                 cmp     [ebp+var_D8], 0
.text:00402893                 jz      short loc_4028EA
.text:00402895                 cmp     ds:byte_41B000, 0
.text:0040289C                 jnz     loc_402C6D
.text:004028A2                 cmp     [ebp+var_B5], 0
.text:004028A9                 jz      short loc_4028B9
.text:004028AB                 mov     edx, dword_41A010
.text:004028B1                 test    edx, edx
.text:004028B3                 jz      loc_402C43
.text:004028B9
.text:004028B9 loc_4028B9:                             ; CODE XREF: sub_402250+659↑j
.text:004028B9                                         ; sub_402250+A18↓j
.text:004028B9                 cmp     [ebp+var_D8], 0
.text:004028C0                 jz      short loc_4028EA
.text:004028C2                 cmp     [ebp+var_B5], 0
.text:004028C9                 jz      short loc_4028D9
.text:004028CB                 mov     ebx, dword_41A010
.text:004028D1                 test    ebx, ebx
.text:004028D3                 jnz     loc_402C18
.text:004028D9
.text:004028D9 loc_4028D9:                             ; CODE XREF: sub_402250+679↑j
.text:004028D9                 movzx   ebx, [ebp+var_D8]
.text:004028E0                 and     ebx, 1
.text:004028E3                 dec     ebx
.text:004028E4                 and     dword_41A010, ebx
.text:004028EA
.text:004028EA loc_4028EA:                             ; CODE XREF: sub_402250+643↑j
.text:004028EA                                         ; sub_402250+670↑j
.text:004028EA                 mov     eax, [ebp+var_BC]
.text:004028F0                 test    eax, eax
.text:004028F2                 jz      loc_402BFC
.text:004028F8                 mov     eax, dword_41A030
.text:004028FD                 cmp     eax, esi
.text:004028FF                 jl      loc_402B64
.text:00402905                 cld
.text:00402906                 mov     esi, [ebp+var_BC]
.text:0040290C                 mov     edi, offset asc_402094 ; "-"
.text:00402911                 mov     ecx, 2
.text:00402916                 repe cmpsb
.text:00402918                 jnz     loc_402B47
.text:0040291E                 mov     edi, ds:_iob
.text:00402924
.text:00402924 loc_402924:                             ; CODE XREF: sub_402250+90F↓j
.text:00402924                 test    edi, edi
.text:00402926                 jz      loc_402B04
.text:0040292C
.text:0040292C loc_40292C:                             ; CODE XREF: sub_402250+8F2↓j
.text:0040292C                 lea     esi, [ebp+var_A8]
.text:00402932                 mov     [esp+108h+Category], esi
.text:00402935                 call    sub_408570
.text:0040293A                 mov     [esp+108h+Locale], esi ; int
.text:0040293E                 mov     [esp+108h+Category], edi ; FILE *
.text:00402941                 call    sub_4083F0
.text:00402946                 test    al, al
.text:00402948                 jz      short loc_402956
.text:0040294A                 mov     [esp+108h+Category], edi ; Stream
.text:0040294D                 call    fclose
.text:00402952                 test    eax, eax
.text:00402954                 jz      short loc_40298F
.text:00402956
.text:00402956 loc_402956:                             ; CODE XREF: sub_402250+6F8↑j
.text:00402956                 mov     eax, [ebp+var_BC]
.text:0040295C                 mov     [esp+108h+Category], eax ; char *
.text:0040295F                 call    sub_40AC10
.text:00402964                 mov     [esp+108h+Category], offset aCannotReadFile ; "cannot read file names from %s"
.text:0040296B                 mov     edi, eax
.text:0040296D                 call    ds:libintl_gettext
.text:00402973                 mov     dword ptr [esp+108h+var_FC], edi ; char
.text:00402977                 mov     [esp+108h+Locale], 0 ; ErrorMessage
.text:0040297F                 mov     [esp+108h+Category], 1 ; Code
.text:00402986                 mov     [esp+108h+FileName], eax ; char *
.text:0040298A                 call    sub_40E9E0
.text:0040298F
.text:0040298F loc_40298F:                             ; CODE XREF: sub_402250+704↑j
.text:0040298F                 mov     edi, [ebp+var_A4]
.text:00402995
.text:00402995 loc_402995:                             ; CODE XREF: sub_402250+9B7↓j
.text:00402995                                         ; sub_402250+9C3↓j
.text:00402995                 mov     [esp+108h+Str], offset free
.text:0040299D                 mov     dword ptr [esp+108h+var_FC], offset sub_402E90
.text:004029A5                 mov     [esp+108h+FileName], offset sub_402E60
.text:004029AD                 mov     [esp+108h+Locale], 0
.text:004029B5                 mov     [esp+108h+Category], 67h ; 'g'
.text:004029BC                 call    sub_407540
.text:004029C1                 mov     ds:dword_41B0B0, eax
.text:004029C6                 test    eax, eax
.text:004029C8                 jnz     short loc_4029CF
.text:004029CA                 call    sub_40AC60
.text:004029CF ; ---------------------------------------------------------------------------
.text:004029CF
.text:004029CF loc_4029CF:                             ; CODE XREF: sub_402250+778↑j
.text:004029CF                 xor     ebx, ebx
.text:004029D1                 mov     [ebp+var_DC], ebx
.text:004029D7                 xor     ebx, ebx
.text:004029D9
.text:004029D9 loc_4029D9:                             ; CODE XREF: sub_402250+7BF↓j
.text:004029D9                 cmp     [ebp+var_DC], ebx
.text:004029DF                 jz      short loc_4029ED
.text:004029E1                 mov     edx, [edi+ebx*4]
.text:004029E4                 mov     esi, [ebp+var_DC]
.text:004029EA                 mov     [edi+esi*4], edx
.text:004029ED
.text:004029ED loc_4029ED:                             ; CODE XREF: sub_402250+78F↑j
.text:004029ED                 mov     edx, [ebp+var_DC]
.text:004029F3                 mov     eax, [edi+edx*4]
.text:004029F6                 test    eax, eax
.text:004029F8                 jz      loc_402A97
.text:004029FE                 cmp     byte ptr [eax], 0
.text:00402A01                 jz      short loc_402A11
.text:00402A03                 inc     edx
.text:00402A04                 mov     [ebp+var_DC], edx
.text:00402A0A
.text:00402A0A loc_402A0A:                             ; CODE XREF: sub_402250+842↓j
.text:00402A0A                 lea     esi, [ebx+1]
.text:00402A0D
.text:00402A0D loc_402A0D:                             ; CODE XREF: sub_402250+813↓j
.text:00402A0D                 mov     ebx, esi
.text:00402A0F                 jmp     short loc_4029D9
.text:00402A11 ; ---------------------------------------------------------------------------
.text:00402A11
.text:00402A11 loc_402A11:                             ; CODE XREF: sub_402250+7B1↑j
.text:00402A11                 mov     eax, [ebp+var_BC]
.text:00402A17                 test    eax, eax
.text:00402A19                 jz      short loc_402A65
.text:00402A1B                 mov     [esp+108h+Category], offset aInvalidZeroLen ; "invalid zero-length file name"
.text:00402A22                 lea     esi, [ebx+1]
.text:00402A25                 call    ds:libintl_gettext
.text:00402A2B                 mov     ecx, [ebp+var_BC]
.text:00402A31                 mov     ebx, eax
.text:00402A33                 mov     [esp+108h+Category], ecx ; char *
.text:00402A36                 call    sub_4061B0
.text:00402A3B                 mov     dword ptr [esp+108h+var_FC], eax ; char
.text:00402A3F                 mov     [esp+108h+var_F4], ebx
.text:00402A43                 mov     [esp+108h+Str], esi
.text:00402A47                 mov     [esp+108h+FileName], offset aSLuS ; "%s:%lu: %s"
.text:00402A4F                 mov     [esp+108h+Locale], 0 ; ErrorMessage
.text:00402A57                 mov     [esp+108h+Category], 0 ; Code
.text:00402A5E                 call    sub_40E9E0
.text:00402A63                 jmp     short loc_402A0D
.text:00402A65 ; ---------------------------------------------------------------------------
.text:00402A65
.text:00402A65 loc_402A65:                             ; CODE XREF: sub_402250+7C9↑j
.text:00402A65                 mov     [esp+108h+Category], offset aInvalidZeroLen ; "invalid zero-length file name"
.text:00402A6C                 call    ds:libintl_gettext
.text:00402A72                 mov     [esp+108h+FileName], (offset stru_401FF7._ptr+3) ; char *
.text:00402A7A                 mov     [esp+108h+Locale], 0 ; ErrorMessage
.text:00402A82                 mov     [esp+108h+Category], 0 ; Code
.text:00402A89                 mov     dword ptr [esp+108h+var_FC], eax ; char
.text:00402A8D                 call    sub_40E9E0
.text:00402A92                 jmp     loc_402A0A
.text:00402A97 ; ---------------------------------------------------------------------------
.text:00402A97
.text:00402A97 loc_402A97:                             ; CODE XREF: sub_402250+7A8↑j
.text:00402A97                 cmp     [ebp+var_DC], ebx
.text:00402A9D                 mov     [ebp+var_DD], 0
.text:00402AA4                 mov     esi, [ebp+var_C0]
.text:00402AAA                 mov     [esp+108h+Category], edi
.text:00402AAD                 setz    bl
.text:00402AB0                 mov     [esp+108h+Locale], esi
.text:00402AB4                 call    sub_402F10
.text:00402AB9                 test    al, al
.text:00402ABB                 jz      short loc_402AC8
.text:00402ABD                 test    bl, bl
.text:00402ABF                 jz      short loc_402AC8
.text:00402AC1                 mov     [ebp+var_DD], 1
.text:00402AC8
.text:00402AC8 loc_402AC8:                             ; CODE XREF: sub_402250+86B↑j
.text:00402AC8                                         ; sub_402250+86F↑j
.text:00402AC8                 mov     edi, [ebp+var_BC]
.text:00402ACE                 test    edi, edi
.text:00402AD0                 jz      short loc_402AE0
.text:00402AD2                 lea     ebx, [ebp+var_A8]
.text:00402AD8                 mov     [esp+108h+Category], ebx
.text:00402ADB                 call    sub_408620
.text:00402AE0
.text:00402AE0 loc_402AE0:                             ; CODE XREF: sub_402250+880↑j
.text:00402AE0                 mov     ecx, ds:dword_41B0B0
.text:00402AE6                 mov     [esp+108h+Category], ecx ; void *
.text:00402AE9                 call    sub_407820
.text:00402AEE                 xor     [ebp+var_DD], 1
.text:00402AF5                 movzx   edx, [ebp+var_DD]
.text:00402AFC                 mov     [esp+108h+Category], edx
.text:00402AFF                 jmp     loc_402530
.text:00402B04 ; ---------------------------------------------------------------------------
.text:00402B04
.text:00402B04 loc_402B04:                             ; CODE XREF: sub_402250+6D6↑j
.text:00402B04                 mov     esi, [ebp+var_BC]
.text:00402B0A                 mov     [esp+108h+Category], esi ; char *
.text:00402B0D                 call    sub_40AC10
.text:00402B12                 mov     [esp+108h+Category], offset aCannotOpenSFor ; "cannot open %s for reading"
.text:00402B19                 mov     esi, eax
.text:00402B1B                 call    ds:libintl_gettext
.text:00402B21                 mov     ebx, eax
.text:00402B23                 call    _errno
.text:00402B28                 mov     dword ptr [esp+108h+var_FC], esi ; char
.text:00402B2C                 mov     [esp+108h+FileName], ebx ; char *
.text:00402B30                 mov     edx, [eax]
.text:00402B32                 mov     [esp+108h+Category], 1 ; Code
.text:00402B39                 mov     [esp+108h+Locale], edx ; ErrorMessage
.text:00402B3D                 call    sub_40E9E0
.text:00402B42                 jmp     loc_40292C
.text:00402B47 ; ---------------------------------------------------------------------------
.text:00402B47
.text:00402B47 loc_402B47:                             ; CODE XREF: sub_402250+6C8↑j
.text:00402B47                 mov     [esp+108h+Locale], offset aR ; "r"
.text:00402B4F                 mov     ebx, [ebp+var_BC]
.text:00402B55                 mov     [esp+108h+Category], ebx ; FileName
.text:00402B58                 call    fopen
.text:00402B5D                 mov     edi, eax
.text:00402B5F                 jmp     loc_402924
.text:00402B64 ; ---------------------------------------------------------------------------
.text:00402B64
.text:00402B64 loc_402B64:                             ; CODE XREF: sub_402250+6AF↑j
.text:00402B64                 mov     ecx, [edi+eax*4]
.text:00402B67                 mov     [esp+108h+Category], ecx ; char *
.text:00402B6A                 call    sub_40AC10
.text:00402B6F                 mov     [esp+108h+Category], offset aExtraOperandS ; "extra operand %s"
.text:00402B76                 mov     edi, eax
.text:00402B78                 call    ds:libintl_gettext
.text:00402B7E                 mov     dword ptr [esp+108h+var_FC], edi ; char
.text:00402B82                 mov     [esp+108h+Locale], 0 ; ErrorMessage
.text:00402B8A                 mov     [esp+108h+Category], 0 ; Code
.text:00402B91                 mov     [esp+108h+FileName], eax ; char *
.text:00402B95                 call    sub_40E9E0
.text:00402B9A                 mov     [esp+108h+Category], offset aFileOperandsCa ; "File operands cannot be combined with -"...
.text:00402BA1                 call    ds:libintl_gettext
.text:00402BA7                 mov     [esp+108h+Locale], offset Format ; "%s\n"
.text:00402BAF                 mov     esi, ds:_iob
.text:00402BB5                 add     esi, 40h ; '@'
.text:00402BB8                 mov     [esp+108h+FileName], eax
.text:00402BBC                 mov     [esp+108h+Category], esi ; Stream
.text:00402BBF                 call    fprintf
.text:00402BC4
.text:00402BC4 loc_402BC4:                             ; CODE XREF: sub_402250+636↑j
.text:00402BC4                                         ; sub_402250+9F1↓j ...
.text:00402BC4                 mov     [esp+108h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402BCB                 call    ds:libintl_gettext
.text:00402BD1                 mov     ebx, ds:_iob
.text:00402BD7                 mov     ecx, ds:dword_41B610
.text:00402BDD                 add     ebx, 40h ; '@'
.text:00402BE0                 mov     [esp+108h+FileName], ecx
.text:00402BE4                 mov     [esp+108h+Locale], eax ; Format
.text:00402BE8                 mov     [esp+108h+Category], ebx ; Stream
.text:00402BEB                 call    fprintf
.text:00402BF0                 mov     [esp+108h+Category], 1
.text:00402BF7                 jmp     loc_402530
.text:00402BFC ; ---------------------------------------------------------------------------
.text:00402BFC
.text:00402BFC loc_402BFC:                             ; CODE XREF: sub_402250+6A2↑j
.text:00402BFC                 mov     ecx, dword_41A030
.text:00402C02                 cmp     ecx, esi
.text:00402C04                 lea     edi, [edi+ecx*4]
.text:00402C07                 jl      loc_402995
.text:00402C0D                 lea     edi, [ebp+var_B0]
.text:00402C13                 jmp     loc_402995
.text:00402C18 ; ---------------------------------------------------------------------------
.text:00402C18
.text:00402C18 loc_402C18:                             ; CODE XREF: sub_402250+683↑j
.text:00402C18                 mov     [esp+108h+Category], offset aWarningSummari_0 ; "warning: summarizing conflicts with --m"...
.text:00402C1F                 call    ds:libintl_gettext
.text:00402C25                 mov     dword ptr [esp+108h+var_FC], ebx ; char
.text:00402C29                 mov     [esp+108h+Locale], 0 ; ErrorMessage
.text:00402C31                 mov     [esp+108h+Category], 0 ; Code
.text:00402C38                 mov     [esp+108h+FileName], eax ; char *
.text:00402C3C                 call    sub_40E9E0
.text:00402C41                 jmp     short loc_402BC4
.text:00402C43 ; ---------------------------------------------------------------------------
.text:00402C43
.text:00402C43 loc_402C43:                             ; CODE XREF: sub_402250+663↑j
.text:00402C43                 mov     [esp+108h+Category], offset aWarningSummari ; "warning: summarizing is the same as usi"...
.text:00402C4A                 call    ds:libintl_gettext
.text:00402C50                 mov     [esp+108h+Locale], 0 ; ErrorMessage
.text:00402C58                 mov     [esp+108h+Category], 0 ; Code
.text:00402C5F                 mov     [esp+108h+FileName], eax ; char *
.text:00402C63                 call    sub_40E9E0
.text:00402C68                 jmp     loc_4028B9
.text:00402C6D ; ---------------------------------------------------------------------------
.text:00402C6D
.text:00402C6D loc_402C6D:                             ; CODE XREF: sub_402250+64C↑j
.text:00402C6D                 mov     [esp+108h+Category], offset aCannotBothSumm ; "cannot both summarize and show all entr"...
.text:00402C74                 call    ds:libintl_gettext
.text:00402C7A                 mov     [esp+108h+Locale], 0 ; ErrorMessage
.text:00402C82                 mov     [esp+108h+Category], 0 ; Code
.text:00402C89                 mov     [esp+108h+FileName], eax ; char *
.text:00402C8D                 call    sub_40E9E0
.text:00402C92                 jmp     loc_402BC4
.text:00402C92 sub_402250      endp
.text:00402C92
.text:00402C92 ; ---------------------------------------------------------------------------
.text:00402C97                 align 10h
.text:00402CA0
.text:00402CA0 ; =============== S U B R O U T I N E =======================================
.text:00402CA0
.text:00402CA0 ; Attributes: noreturn
.text:00402CA0
.text:00402CA0 ; void __cdecl __noreturn sub_402CA0(int Code)
.text:00402CA0 sub_402CA0      proc near               ; CODE XREF: sub_40E970+A↓p
.text:00402CA0
.text:00402CA0 Stream          = dword ptr -1Ch
.text:00402CA0 Format          = dword ptr -18h
.text:00402CA0 var_14          = dword ptr -14h
.text:00402CA0 Code            = dword ptr  4
.text:00402CA0
.text:00402CA0                 push    ebx
.text:00402CA1                 sub     esp, 18h
.text:00402CA4                 mov     ebx, [esp+1Ch+Code]
.text:00402CA8                 test    ebx, ebx
.text:00402CAA                 jz      short loc_402CE0
.text:00402CAC                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402CB3                 call    ds:libintl_gettext
.text:00402CB9                 mov     edx, ds:_iob
.text:00402CBF                 mov     ecx, ds:dword_41B610
.text:00402CC5                 add     edx, 40h ; '@'
.text:00402CC8                 mov     [esp+1Ch+var_14], ecx
.text:00402CCC                 mov     [esp+1Ch+Format], eax ; Format
.text:00402CD0                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00402CD3                 call    fprintf
.text:00402CD8
.text:00402CD8 loc_402CD8:                             ; CODE XREF: sub_402CA0+1B2↓j
.text:00402CD8                 mov     [esp+1Ch+Stream], ebx ; Code
.text:00402CDB                 call    exit
.text:00402CE0 ; ---------------------------------------------------------------------------
.text:00402CE0
.text:00402CE0 loc_402CE0:                             ; CODE XREF: sub_402CA0+A↑j
.text:00402CE0                 mov     [esp+1Ch+Stream], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n  or: "...
.text:00402CE7                 call    ds:libintl_gettext
.text:00402CED                 mov     ecx, ds:dword_41B610
.text:00402CF3                 mov     [esp+1Ch+Stream], eax ; Format
.text:00402CF6                 mov     [esp+1Ch+var_14], ecx
.text:00402CFA                 mov     [esp+1Ch+Format], ecx
.text:00402CFE                 call    printf
.text:00402D03                 mov     [esp+1Ch+Stream], offset aSummarizeDiskU ; "Summarize disk usage of each FILE, recu"...
.text:00402D0A                 call    ds:libintl_gettext
.text:00402D10                 mov     ecx, ds:_iob
.text:00402D16                 add     ecx, 20h ; ' '
.text:00402D19                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402D1D                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402D20                 call    fputs
.text:00402D25                 mov     [esp+1Ch+Stream], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00402D2C                 call    ds:libintl_gettext
.text:00402D32                 mov     ecx, ds:_iob
.text:00402D38                 add     ecx, 20h ; ' '
.text:00402D3B                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402D3F                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402D42                 call    fputs
.text:00402D47                 mov     [esp+1Ch+Stream], offset aAAllWriteCount ; "  -a, --all             write counts fo"...
.text:00402D4E                 call    ds:libintl_gettext
.text:00402D54                 mov     ecx, ds:_iob
.text:00402D5A                 add     ecx, 20h ; ' '
.text:00402D5D                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402D61                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402D64                 call    fputs
.text:00402D69                 mov     [esp+1Ch+Stream], offset aFiles0FromFSum ; "      --files0-from=F   summarize disk "...
.text:00402D70                 call    ds:libintl_gettext
.text:00402D76                 mov     ecx, ds:_iob
.text:00402D7C                 add     ecx, 20h ; ' '
.text:00402D7F                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402D83                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402D86                 call    fputs
.text:00402D8B                 mov     [esp+1Ch+Stream], offset aLDereferenceDe ; "  -L, --dereference     dereference all"...
.text:00402D92                 call    ds:libintl_gettext
.text:00402D98                 mov     ecx, ds:_iob
.text:00402D9E                 add     ecx, 20h ; ' '
.text:00402DA1                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402DA5                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402DA8                 call    fputs
.text:00402DAD                 mov     [esp+1Ch+Stream], offset aXOneFileSystem ; "  -x, --one-file-system  skip directori"...
.text:00402DB4                 call    ds:libintl_gettext
.text:00402DBA                 mov     ecx, ds:_iob
.text:00402DC0                 add     ecx, 20h ; ' '
.text:00402DC3                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402DC7                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402DCA                 call    fputs
.text:00402DCF                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402DD6                 call    ds:libintl_gettext
.text:00402DDC                 mov     ecx, ds:_iob
.text:00402DE2                 add     ecx, 20h ; ' '
.text:00402DE5                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402DE9                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402DEC                 call    fputs
.text:00402DF1                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402DF8                 call    ds:libintl_gettext
.text:00402DFE                 mov     ecx, ds:_iob
.text:00402E04                 add     ecx, 20h ; ' '
.text:00402E07                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402E0B                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402E0E                 call    fputs
.text:00402E13                 mov     [esp+1Ch+Stream], offset aSizeMayBeOrMay ; "\nSIZE may be (or may be an integer opt"...
.text:00402E1A                 call    ds:libintl_gettext
.text:00402E20                 mov     ecx, ds:_iob
.text:00402E26                 add     ecx, 20h ; ' '
.text:00402E29                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402E2D                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402E30                 call    fputs
.text:00402E35                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402E3C                 call    ds:libintl_gettext
.text:00402E42                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402E4A                 mov     [esp+1Ch+Stream], eax ; Format
.text:00402E4D                 call    printf
.text:00402E52                 jmp     loc_402CD8
.text:00402E52 sub_402CA0      endp
.text:00402E52
.text:00402E52 ; ---------------------------------------------------------------------------
.text:00402E57                 align 10h
.text:00402E60
.text:00402E60 ; =============== S U B R O U T I N E =======================================
.text:00402E60
.text:00402E60
.text:00402E60 sub_402E60      proc near               ; DATA XREF: sub_402250+755↑o
.text:00402E60
.text:00402E60 var_1C          = dword ptr -1Ch
.text:00402E60 var_18          = dword ptr -18h
.text:00402E60 var_14          = dword ptr -14h
.text:00402E60 var_10          = dword ptr -10h
.text:00402E60 arg_0           = dword ptr  4
.text:00402E60 arg_4           = dword ptr  8
.text:00402E60
.text:00402E60                 sub     esp, 1Ch
.text:00402E63                 mov     ecx, [esp+1Ch+arg_0]
.text:00402E67                 mov     edx, [ecx+4]
.text:00402E6A                 mov     eax, [ecx]
.text:00402E6C                 mov     ecx, [esp+1Ch+arg_4]
.text:00402E70                 mov     [esp+1Ch+var_10], 0
.text:00402E78                 mov     [esp+1Ch+var_1C], eax
.text:00402E7B                 mov     [esp+1Ch+var_14], ecx
.text:00402E7F                 mov     [esp+1Ch+var_18], edx
.text:00402E83                 call    sub_417D10
.text:00402E88                 add     esp, 1Ch
.text:00402E8B                 retn
.text:00402E8B sub_402E60      endp
.text:00402E8B
.text:00402E8B ; ---------------------------------------------------------------------------
.text:00402E8C                 align 10h
.text:00402E90
.text:00402E90 ; =============== S U B R O U T I N E =======================================
.text:00402E90
.text:00402E90
.text:00402E90 sub_402E90      proc near               ; DATA XREF: sub_402250+74D↑o
.text:00402E90
.text:00402E90 var_11          = byte ptr -11h
.text:00402E90 var_10          = dword ptr -10h
.text:00402E90 var_C           = dword ptr -0Ch
.text:00402E90 var_8           = dword ptr -8
.text:00402E90 var_4           = dword ptr -4
.text:00402E90 arg_0           = dword ptr  4
.text:00402E90 arg_4           = dword ptr  8
.text:00402E90
.text:00402E90                 sub     esp, 14h
.text:00402E93                 mov     [esp+14h+var_8], edi
.text:00402E97                 mov     edi, [esp+14h+arg_0]
.text:00402E9B                 mov     [esp+14h+var_4], ebp
.text:00402E9F                 mov     ebp, [esp+14h+arg_4]
.text:00402EA3                 mov     [esp+14h+var_C], esi
.text:00402EA7                 mov     [esp+14h+var_10], ebx
.text:00402EAB                 mov     ebx, [edi+4]
.text:00402EAE                 mov     [esp+14h+var_11], 0
.text:00402EB3                 mov     ecx, [edi]
.text:00402EB5                 mov     eax, [ebp+0]
.text:00402EB8                 mov     edx, [ebp+4]
.text:00402EBB                 mov     esi, ebx
.text:00402EBD                 xor     eax, ecx
.text:00402EBF                 xor     esi, edx
.text:00402EC1                 or      esi, eax
.text:00402EC3                 jnz     short loc_402EE0
.text:00402EC5                 mov     edx, [edi+0Ch]
.text:00402EC8                 mov     esi, [edi+8]
.text:00402ECB                 mov     ecx, [ebp+0Ch]
.text:00402ECE                 mov     edi, [ebp+8]
.text:00402ED1                 mov     eax, edx
.text:00402ED3                 xor     eax, ecx
.text:00402ED5                 xor     edi, esi
.text:00402ED7                 or      eax, edi
.text:00402ED9                 jnz     short loc_402EE0
.text:00402EDB                 mov     [esp+14h+var_11], 1
.text:00402EE0
.text:00402EE0 loc_402EE0:                             ; CODE XREF: sub_402E90+33↑j
.text:00402EE0                                         ; sub_402E90+49↑j
.text:00402EE0                 movzx   eax, [esp+14h+var_11]
.text:00402EE5                 mov     ebx, [esp+14h+var_10]
.text:00402EE9                 mov     esi, [esp+14h+var_C]
.text:00402EED                 mov     edi, [esp+14h+var_8]
.text:00402EF1                 mov     ebp, [esp+14h+var_4]
.text:00402EF5                 add     esp, 14h
.text:00402EF8                 retn
.text:00402EF8 sub_402E90      endp
.text:00402EF8
.text:00402EF8 ; ---------------------------------------------------------------------------
.text:00402EF9 ; const char aSC[]
.text:00402EF9 aSC             db 9,'%s%c',0           ; DATA XREF: sub_402F10+B6↓o
.text:00402EFF aFtsReadFailed  db 'fts_read failed',0  ; DATA XREF: sub_402F10:loc_40305E↓o
.text:00402F0F                 align 10h
.text:00402F10
.text:00402F10 ; =============== S U B R O U T I N E =======================================
.text:00402F10
.text:00402F10
.text:00402F10 sub_402F10      proc near               ; CODE XREF: sub_402250+864↑p
.text:00402F10
.text:00402F10 Buffer          = dword ptr -0BCh
.text:00402F10 Stream          = dword ptr -0B8h
.text:00402F10 var_B4          = dword ptr -0B4h
.text:00402F10 var_B0          = dword ptr -0B0h
.text:00402F10 var_AC          = dword ptr -0ACh
.text:00402F10 var_A8          = dword ptr -0A8h
.text:00402F10 var_A4          = dword ptr -0A4h
.text:00402F10 var_A0          = dword ptr -0A0h
.text:00402F10 var_8D          = byte ptr -8Dh
.text:00402F10 var_8C          = byte ptr -8Ch
.text:00402F10 arg_0           = dword ptr  4
.text:00402F10 arg_4           = dword ptr  8
.text:00402F10
.text:00402F10                 push    edi
.text:00402F11                 push    esi
.text:00402F12                 push    ebx
.text:00402F13                 sub     esp, 0B0h
.text:00402F19                 mov     edx, [esp+0BCh+arg_0]
.text:00402F20                 mov     [esp+0BCh+var_8D], 1
.text:00402F25                 mov     ecx, [edx]
.text:00402F27                 test    ecx, ecx
.text:00402F29                 jnz     loc_402FF3
.text:00402F2F
.text:00402F2F loc_402F2F:                             ; CODE XREF: sub_402F10+149↓j
.text:00402F2F                 cmp     ds:byte_41B040, 0
.text:00402F36                 jnz     short loc_402F47
.text:00402F38
.text:00402F38 loc_402F38:                             ; CODE XREF: sub_402F10+DE↓j
.text:00402F38                 movzx   eax, [esp+0BCh+var_8D]
.text:00402F3D                 add     esp, 0B0h
.text:00402F43                 pop     ebx
.text:00402F44                 pop     esi
.text:00402F45                 pop     edi
.text:00402F46                 retn
.text:00402F47 ; ---------------------------------------------------------------------------
.text:00402F47
.text:00402F47 loc_402F47:                             ; CODE XREF: sub_402F10+26↑j
.text:00402F47                 mov     [esp+0BCh+Buffer], offset aTotal ; "total"
.text:00402F4E                 mov     ebx, ds:dword_41B060
.text:00402F54                 mov     esi, ds:dword_41B064
.text:00402F5A                 call    ds:libintl_gettext
.text:00402F60                 mov     [esp+0BCh+Buffer], ebx ; int
.text:00402F63                 mov     ecx, ds:dword_41B0D4
.text:00402F69                 mov     edx, ds:dword_41B0D0
.text:00402F6F                 mov     [esp+0BCh+var_AC], 1 ; int
.text:00402F77                 mov     edi, eax
.text:00402F79                 mov     [esp+0BCh+var_A0], ecx ; int
.text:00402F7D                 mov     ecx, ds:dword_41B0C0
.text:00402F83                 mov     [esp+0BCh+var_A4], edx ; int
.text:00402F87                 lea     edx, [esp+0BCh+var_8C]
.text:00402F8B                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00402F8F                 mov     [esp+0BCh+var_B4], edx ; Buffer
.text:00402F93                 mov     [esp+0BCh+var_A8], 0 ; int
.text:00402F9B                 mov     [esp+0BCh+Stream], esi ; int
.text:00402F9F                 call    sub_409880
.text:00402FA4                 mov     [esp+0BCh+Buffer], eax ; Buffer
.text:00402FA7                 mov     ebx, ds:_iob
.text:00402FAD                 add     ebx, 20h ; ' '
.text:00402FB0                 mov     [esp+0BCh+Stream], ebx ; Stream
.text:00402FB4                 call    fputs
.text:00402FB9                 mov     [esp+0BCh+Stream], edi
.text:00402FBD                 xor     ecx, ecx
.text:00402FBF                 cmp     ds:byte_41B030, 0
.text:00402FC6                 mov     [esp+0BCh+Buffer], offset aSC ; "\t%s%c"
.text:00402FCD                 setnz   cl
.text:00402FD0                 dec     ecx
.text:00402FD1                 and     ecx, 0Ah
.text:00402FD4                 mov     [esp+0BCh+var_B4], ecx
.text:00402FD8                 call    printf
.text:00402FDD                 mov     edi, ds:_iob
.text:00402FE3                 add     edi, 20h ; ' '
.text:00402FE6                 mov     [esp+0BCh+Buffer], edi ; Stream
.text:00402FE9                 call    fflush
.text:00402FEE                 jmp     loc_402F38
.text:00402FF3 ; ---------------------------------------------------------------------------
.text:00402FF3
.text:00402FF3 loc_402FF3:                             ; CODE XREF: sub_402F10+19↑j
.text:00402FF3                 mov     [esp+0BCh+var_B4], 0
.text:00402FFB                 mov     ecx, [esp+0BCh+arg_4]
.text:00403002                 mov     [esp+0BCh+Buffer], edx
.text:00403005                 mov     [esp+0BCh+Stream], ecx
.text:00403009                 call    sub_406440
.text:0040300E                 mov     edi, eax
.text:00403010
.text:00403010 loc_403010:                             ; CODE XREF: sub_402F10+134↓j
.text:00403010                 mov     [esp+0BCh+Buffer], edi ; void *
.text:00403013                 call    sub_403B00
.text:00403018                 test    eax, eax
.text:0040301A                 jz      short loc_403046
.text:0040301C                 mov     [esp+0BCh+Stream], eax
.text:00403020                 xor     ebx, ebx
.text:00403022                 mov     [esp+0BCh+Buffer], edi
.text:00403025                 call    sub_403100
.text:0040302A                 test    al, al
.text:0040302C                 jz      short loc_403040
.text:0040302E                 cmp     [esp+0BCh+var_8D], 0
.text:00403033                 jz      short loc_403040
.text:00403035                 mov     bl, 1
.text:00403037                 mov     esi, esi
.text:00403039                 lea     edi, [edi+0]
.text:00403040
.text:00403040 loc_403040:                             ; CODE XREF: sub_402F10+11C↑j
.text:00403040                                         ; sub_402F10+123↑j
.text:00403040                 mov     [esp+0BCh+var_8D], bl
.text:00403044                 jmp     short loc_403010
.text:00403046 ; ---------------------------------------------------------------------------
.text:00403046
.text:00403046 loc_403046:                             ; CODE XREF: sub_402F10+10A↑j
.text:00403046                 call    _errno
.text:0040304B                 mov     edx, [eax]
.text:0040304D                 test    edx, edx
.text:0040304F                 jnz     short loc_40305E
.text:00403051
.text:00403051 loc_403051:                             ; CODE XREF: sub_402F10+17D↓j
.text:00403051                 mov     [esp+0BCh+Buffer], edi ; void *
.text:00403054                 call    sub_403A00
.text:00403059                 jmp     loc_402F2F
.text:0040305E ; ---------------------------------------------------------------------------
.text:0040305E
.text:0040305E loc_40305E:                             ; CODE XREF: sub_402F10+13F↑j
.text:0040305E                 mov     [esp+0BCh+Buffer], offset aFtsReadFailed ; "fts_read failed"
.text:00403065                 call    ds:libintl_gettext
.text:0040306B                 mov     esi, eax
.text:0040306D                 call    _errno
.text:00403072                 mov     [esp+0BCh+var_B4], esi ; char *
.text:00403076                 mov     ebx, [eax]
.text:00403078                 mov     [esp+0BCh+Buffer], 0 ; Code
.text:0040307F                 mov     [esp+0BCh+Stream], ebx ; ErrorMessage
.text:00403083                 call    sub_40E9E0
.text:00403088                 mov     [esp+0BCh+var_8D], 0
.text:0040308D                 jmp     short loc_403051
.text:0040308D sub_402F10      endp
.text:0040308D
.text:0040308D ; ---------------------------------------------------------------------------
.text:0040308F aCannotReadDire db 'cannot read directory %s',0
.text:0040308F                                         ; DATA XREF: sub_403100+4F7↓o
.text:004030A8 aCannotAccessS  db 'cannot access %s',0 ; DATA XREF: sub_403100+545↓o
.text:004030B9                 align 10h
.text:004030C0 aCoreutils530Sr db '../../coreutils-5.3.0-src/src/du.c',0
.text:004030C0                                         ; DATA XREF: sub_403100+5C2↓o
.text:004030E3 aLevelPrevLevel db 'level == prev_level - 1',0
.text:004030E3                                         ; DATA XREF: sub_403100+5CA↓o
.text:004030FB                 align 10h
.text:00403100
.text:00403100 ; =============== S U B R O U T I N E =======================================
.text:00403100
.text:00403100
.text:00403100 sub_403100      proc near               ; CODE XREF: sub_402F10+115↑p
.text:00403100
.text:00403100 Buffer          = dword ptr -10Ch
.text:00403100 Stream          = dword ptr -108h
.text:00403100 var_104         = dword ptr -104h
.text:00403100 var_100         = byte ptr -100h
.text:00403100 var_FC          = dword ptr -0FCh
.text:00403100 var_F8          = dword ptr -0F8h
.text:00403100 var_F4          = dword ptr -0F4h
.text:00403100 var_F0          = dword ptr -0F0h
.text:00403100 var_E4          = dword ptr -0E4h
.text:00403100 var_E0          = dword ptr -0E0h
.text:00403100 var_D1          = byte ptr -0D1h
.text:00403100 Block           = dword ptr -0D0h
.text:00403100 var_CC          = dword ptr -0CCh
.text:00403100 var_C8          = dword ptr -0C8h
.text:00403100 var_BD          = byte ptr -0BDh
.text:00403100 var_BC          = dword ptr -0BCh
.text:00403100 var_B5          = byte ptr -0B5h
.text:00403100 var_B4          = dword ptr -0B4h
.text:00403100 var_B0          = dword ptr -0B0h
.text:00403100 var_AC          = dword ptr -0ACh
.text:00403100 var_A8          = dword ptr -0A8h
.text:00403100 var_9D          = byte ptr -9Dh
.text:00403100 var_9C          = byte ptr -9Ch
.text:00403100 arg_0           = dword ptr  4
.text:00403100 arg_4           = dword ptr  8
.text:00403100
.text:00403100                 push    ebp
.text:00403101                 push    edi
.text:00403102                 push    esi
.text:00403103                 push    ebx
.text:00403104                 sub     esp, 0FCh
.text:0040310A                 mov     ebp, [esp+10Ch+arg_4]
.text:00403111                 mov     [esp+10Ch+var_B5], 1
.text:00403116                 mov     edx, [ebp+18h]
.text:00403119                 lea     edi, [ebp+50h]
.text:0040311C                 mov     [esp+10Ch+var_BC], edx
.text:00403120                 mov     [esp+10Ch+Stream], edx
.text:00403124                 mov     edx, ds:dword_41B0E0
.text:0040312A                 mov     [esp+10Ch+Buffer], edx
.text:0040312D                 call    sub_408C40
.text:00403132                 mov     [esp+10Ch+var_BD], al
.text:00403136                 test    al, al
.text:00403138                 jnz     loc_403695
.text:0040313E
.text:0040313E loc_40313E:                             ; CODE XREF: sub_403100+5B0↓j
.text:0040313E                 mov     edx, [ebp+44h]
.text:00403141                 movzx   eax, dx
.text:00403144                 cmp     eax, 7
.text:00403147                 jz      loc_403680
.text:0040314D                 cmp     eax, 7
.text:00403150                 jg      loc_403630
.text:00403156                 cmp     eax, 4
.text:00403159                 jz      loc_4035EB
.text:0040315F
.text:0040315F loc_40315F:                             ; CODE XREF: sub_403100+533↓j
.text:0040315F                 mov     [esp+10Ch+var_9D], 1
.text:00403164
.text:00403164 loc_403164:                             ; CODE XREF: sub_403100+529↓j
.text:00403164                 dec     dx
.text:00403166                 jz      loc_4033B0
.text:0040316C                 cmp     [esp+10Ch+var_BD], 0
.text:00403171                 jnz     loc_4033B0
.text:00403177                 cmp     ds:byte_41B020, 0
.text:0040317E                 jnz     short loc_4031A0
.text:00403180                 mov     ebx, [edi]
.text:00403182                 and     ebx, 0F000h
.text:00403188                 cmp     ebx, 4000h
.text:0040318E                 jz      short loc_4031A0
.text:00403190                 cmp     dword ptr [edi+18h], 1
.text:00403194                 ja      loc_40356A
.text:0040319A                 lea     esi, [esi+0]
.text:004031A0
.text:004031A0 loc_4031A0:                             ; CODE XREF: sub_403100+7E↑j
.text:004031A0                                         ; sub_403100+8E↑j ...
.text:004031A0                 cmp     ds:byte_41B010, 0
.text:004031A7                 jz      loc_403550
.text:004031AD                 mov     esi, [edi+30h]
.text:004031B0                 mov     ebx, [edi+34h]
.text:004031B3                 mov     [esp+10Ch+var_AC], esi
.text:004031B7                 mov     [esp+10Ch+var_A8], ebx
.text:004031BB
.text:004031BB loc_4031BB:                             ; CODE XREF: sub_403100+465↓j
.text:004031BB                                         ; sub_403100+4E6↓j
.text:004031BB                 mov     edx, [esp+10Ch+var_A8]
.text:004031BF                 mov     edi, [esp+10Ch+var_AC]
.text:004031C3                 mov     ebx, [ebp+3Ch]
.text:004031C6                 mov     [esp+10Ch+var_B0], edx
.text:004031CA                 mov     edx, ds:dword_41B080
.text:004031D0                 mov     [esp+10Ch+var_B4], edi
.text:004031D4                 test    edx, edx
.text:004031D6                 jz      loc_403510
.text:004031DC                 mov     eax, ds:dword_41B070
.text:004031E1                 cmp     ebx, eax
.text:004031E3                 mov     esi, eax
.text:004031E5                 jz      loc_403500
.text:004031EB                 cmp     ebx, eax
.text:004031ED                 jbe     loc_403479
.text:004031F3                 cmp     edx, ebx
.text:004031F5                 jbe     loc_403428
.text:004031FB
.text:004031FB loc_4031FB:                             ; CODE XREF: sub_403100+374↓j
.text:004031FB                 lea     edx, [eax+1]
.text:004031FE                 cmp     edx, ebx
.text:00403200                 ja      short loc_40322F
.text:00403202                 mov     ecx, ds:dword_41B090
.text:00403208                 mov     eax, ds:dword_41B0A0
.text:0040320D                 lea     esi, [esi+0]
.text:00403210
.text:00403210 loc_403210:                             ; CODE XREF: sub_403100+12D↓j
.text:00403210                 mov     dword ptr [ecx+edx*8], 0
.text:00403217                 xor     esi, esi
.text:00403219                 xor     edi, edi
.text:0040321B                 mov     [ecx+edx*8+4], esi
.text:0040321F                 mov     dword ptr [eax+edx*8], 0
.text:00403226                 mov     [eax+edx*8+4], edi
.text:0040322A                 inc     edx
.text:0040322B                 cmp     edx, ebx
.text:0040322D                 jbe     short loc_403210
.text:0040322F
.text:0040322F loc_40322F:                             ; CODE XREF: sub_403100+100↑j
.text:0040322F                 movzx   eax, ds:byte_41B050
.text:00403236                 mov     [esp+10Ch+var_D1], al
.text:0040323A                 lea     esi, [esi+0]
.text:00403240
.text:00403240 loc_403240:                             ; CODE XREF: sub_403100+3F2↓j
.text:00403240                                         ; sub_403100+40B↓j
.text:00403240                 cmp     [esp+10Ch+var_D1], 0
.text:00403245                 mov     ds:dword_41B070, ebx
.text:0040324B                 jz      loc_403420
.text:00403251                 mov     edx, [ebp+44h]
.text:00403254                 cmp     dx, 6
.text:00403258                 jz      short loc_403276
.text:0040325A                 cmp     dx, 4
.text:0040325E                 jz      short loc_403276
.text:00403260
.text:00403260 loc_403260:                             ; CODE XREF: sub_403100+323↓j
.text:00403260                 mov     ebp, ds:dword_41B090
.text:00403266                 mov     edi, [esp+10Ch+var_AC]
.text:0040326A                 mov     ecx, [esp+10Ch+var_A8]
.text:0040326E                 add     [ebp+ebx*8+0], edi
.text:00403272                 adc     [ebp+ebx*8+4], ecx
.text:00403276
.text:00403276 loc_403276:                             ; CODE XREF: sub_403100+158↑j
.text:00403276                                         ; sub_403100+15E↑j
.text:00403276                 mov     ebp, [esp+10Ch+var_AC]
.text:0040327A                 mov     eax, [esp+10Ch+var_A8]
.text:0040327E                 add     ds:dword_41B060, ebp
.text:00403284                 adc     ds:dword_41B064, eax
.text:0040328A                 cmp     dx, 4
.text:0040328E                 jz      loc_4033B0
.text:00403294                 cmp     [esp+10Ch+var_B5], 0
.text:00403299                 jz      loc_4033B0
.text:0040329F                 cmp     dx, 6
.text:004032A3                 jz      loc_403409
.text:004032A9                 cmp     dx, 4
.text:004032AD                 jz      loc_403409
.text:004032B3
.text:004032B3 loc_4032B3:                             ; CODE XREF: sub_403100+315↓j
.text:004032B3                 cmp     ds:byte_41B000, 0
.text:004032BA                 jz      short loc_4032C4
.text:004032BC                 cmp     ebx, dword_41A010
.text:004032C2                 jbe     short loc_4032CC
.text:004032C4
.text:004032C4 loc_4032C4:                             ; CODE XREF: sub_403100+1BA↑j
.text:004032C4                 test    ebx, ebx
.text:004032C6                 jnz     loc_4033B0
.text:004032CC
.text:004032CC loc_4032CC:                             ; CODE XREF: sub_403100+1C2↑j
.text:004032CC                                         ; sub_403100+30F↓j
.text:004032CC                 mov     [esp+10Ch+var_FC], 1 ; int
.text:004032D4                 mov     ecx, ds:dword_41B0D0
.text:004032DA                 lea     ebp, [esp+10Ch+var_9C]
.text:004032DE                 mov     [esp+10Ch+var_F8], 0 ; int
.text:004032E6                 mov     esi, ds:dword_41B0D4
.text:004032EC                 mov     ebx, ds:dword_41B0C0
.text:004032F2                 mov     [esp+10Ch+var_F4], ecx ; int
.text:004032F6                 mov     edx, [esp+10Ch+var_B4]
.text:004032FA                 mov     edi, [esp+10Ch+var_B0]
.text:004032FE                 mov     [esp+10Ch+var_F0], esi ; int
.text:00403302                 mov     dword ptr [esp+10Ch+var_100], ebx ; int
.text:00403306                 mov     [esp+10Ch+Buffer], edx ; int
.text:00403309                 mov     [esp+10Ch+var_104], ebp ; Buffer
.text:0040330D                 mov     [esp+10Ch+Stream], edi ; int
.text:00403311                 call    sub_409880
.text:00403316                 mov     [esp+10Ch+Buffer], eax ; Buffer
.text:00403319                 mov     ecx, ds:_iob
.text:0040331F                 add     ecx, 20h ; ' '
.text:00403322                 mov     [esp+10Ch+Stream], ecx ; Stream
.text:00403326                 call    fputs
.text:0040332B                 mov     esi, ds:_iob
.text:00403331                 mov     ebx, [esi+24h]
.text:00403334                 dec     ebx
.text:00403335                 mov     [esi+24h], ebx
.text:00403338                 test    ebx, ebx
.text:0040333A                 js      loc_4033EB
.text:00403340                 mov     edi, ds:_iob
.text:00403346                 mov     eax, [edi+20h]
.text:00403349                 mov     byte ptr [eax], 9
.text:0040334C                 inc     dword ptr [edi+20h]
.text:0040334F
.text:0040334F loc_40334F:                             ; CODE XREF: sub_403100+304↓j
.text:0040334F                 mov     ecx, ds:_iob
.text:00403355                 mov     esi, [esp+10Ch+var_BC]
.text:00403359                 add     ecx, 20h ; ' '
.text:0040335C                 mov     [esp+10Ch+Stream], ecx ; Stream
.text:00403360                 mov     [esp+10Ch+Buffer], esi ; Buffer
.text:00403363                 call    fputs
.text:00403368                 mov     ebx, ds:_iob
.text:0040336E                 mov     ebp, [ebx+24h]
.text:00403371                 dec     ebp
.text:00403372                 mov     [ebx+24h], ebp
.text:00403375                 test    ebp, ebp
.text:00403377                 js      short loc_4033C4
.text:00403379                 cmp     ds:byte_41B030, 0
.text:00403380                 mov     edi, ds:_iob
.text:00403386                 mov     ecx, [edi+20h]
.text:00403389                 lea     edx, [ecx+1]
.text:0040338C                 mov     [edi+20h], edx
.text:0040338F                 jnz     short loc_4033C0
.text:00403391                 mov     al, 0Ah
.text:00403393
.text:00403393 loc_403393:                             ; CODE XREF: sub_403100+2C2↓j
.text:00403393                 mov     [ecx], al
.text:00403395
.text:00403395 loc_403395:                             ; CODE XREF: sub_403100+2E9↓j
.text:00403395                 mov     esi, ds:_iob
.text:0040339B                 add     esi, 20h ; ' '
.text:0040339E                 mov     [esp+10Ch+Buffer], esi ; Stream
.text:004033A1                 call    fflush
.text:004033A6                 lea     esi, [esi+0]
.text:004033A9                 lea     edi, [edi+0]
.text:004033B0
.text:004033B0 loc_4033B0:                             ; CODE XREF: sub_403100+66↑j
.text:004033B0                                         ; sub_403100+71↑j ...
.text:004033B0                 movzx   eax, [esp+10Ch+var_9D]
.text:004033B5
.text:004033B5 loc_4033B5:                             ; CODE XREF: sub_403100+575↓j
.text:004033B5                 add     esp, 0FCh
.text:004033BB                 pop     ebx
.text:004033BC                 pop     esi
.text:004033BD                 pop     edi
.text:004033BE                 pop     ebp
.text:004033BF                 retn
.text:004033C0 ; ---------------------------------------------------------------------------
.text:004033C0
.text:004033C0 loc_4033C0:                             ; CODE XREF: sub_403100+28F↑j
.text:004033C0                 xor     eax, eax
.text:004033C2                 jmp     short loc_403393
.text:004033C4 ; ---------------------------------------------------------------------------
.text:004033C4
.text:004033C4 loc_4033C4:                             ; CODE XREF: sub_403100+277↑j
.text:004033C4                 mov     ebp, ds:_iob
.text:004033CA                 xor     ebx, ebx
.text:004033CC                 add     ebp, 20h ; ' '
.text:004033CF                 cmp     ds:byte_41B030, 0
.text:004033D6                 mov     [esp+10Ch+Stream], ebp ; File
.text:004033DA                 setnz   bl
.text:004033DD                 dec     ebx
.text:004033DE                 and     ebx, 0Ah
.text:004033E1                 mov     [esp+10Ch+Buffer], ebx ; Ch
.text:004033E4                 call    _flsbuf
.text:004033E9                 jmp     short loc_403395
.text:004033EB ; ---------------------------------------------------------------------------
.text:004033EB
.text:004033EB loc_4033EB:                             ; CODE XREF: sub_403100+23A↑j
.text:004033EB                 mov     [esp+10Ch+Buffer], 9 ; Ch
.text:004033F2                 mov     edx, ds:_iob
.text:004033F8                 add     edx, 20h ; ' '
.text:004033FB                 mov     [esp+10Ch+Stream], edx ; File
.text:004033FF                 call    _flsbuf
.text:00403404                 jmp     loc_40334F
.text:00403409 ; ---------------------------------------------------------------------------
.text:00403409
.text:00403409 loc_403409:                             ; CODE XREF: sub_403100+1A3↑j
.text:00403409                                         ; sub_403100+1AD↑j
.text:00403409                 cmp     ebx, dword_41A010
.text:0040340F                 jbe     loc_4032CC
.text:00403415                 jmp     loc_4032B3
.text:00403415 ; ---------------------------------------------------------------------------
.text:0040341A                 align 10h
.text:00403420
.text:00403420 loc_403420:                             ; CODE XREF: sub_403100+14B↑j
.text:00403420                 mov     edx, [ebp+44h]
.text:00403423                 jmp     loc_403260
.text:00403428 ; ---------------------------------------------------------------------------
.text:00403428
.text:00403428 loc_403428:                             ; CODE XREF: sub_403100+F5↑j
.text:00403428                 mov     [esp+10Ch+var_104], 10h ; int
.text:00403430                 mov     ecx, ds:dword_41B090
.text:00403436                 lea     edi, [ebx+ebx]
.text:00403439                 mov     [esp+10Ch+Stream], ebx ; int
.text:0040343D                 mov     [esp+10Ch+Buffer], ecx ; void *
.text:00403440                 call    sub_40A980
.text:00403445                 mov     ds:dword_41B090, eax
.text:0040344A                 mov     esi, ds:dword_41B0A0
.text:00403450                 mov     [esp+10Ch+var_104], 10h ; int
.text:00403458                 mov     [esp+10Ch+Stream], ebx ; int
.text:0040345C                 mov     [esp+10Ch+Buffer], esi ; void *
.text:0040345F                 call    sub_40A980
.text:00403464                 mov     ds:dword_41B0A0, eax
.text:00403469                 mov     eax, ds:dword_41B070
.text:0040346E                 mov     ds:dword_41B080, edi
.text:00403474                 jmp     loc_4031FB
.text:00403479 ; ---------------------------------------------------------------------------
.text:00403479
.text:00403479 loc_403479:                             ; CODE XREF: sub_403100+ED↑j
.text:00403479                 lea     edx, [eax-1]
.text:0040347C                 cmp     ebx, edx
.text:0040347E                 jnz     loc_4036BA
.text:00403484                 mov     edx, ds:dword_41B090
.text:0040348A                 mov     ecx, [edx+eax*8]
.text:0040348D                 mov     edi, [edx+eax*8+4]
.text:00403491                 movzx   eax, ds:byte_41B050
.text:00403498                 mov     [esp+10Ch+var_E4], ecx
.text:0040349C                 mov     ecx, [esp+10Ch+var_A8]
.text:004034A0                 mov     [esp+10Ch+var_E0], edi
.text:004034A4                 mov     edi, [esp+10Ch+var_AC]
.text:004034A8                 add     edi, [esp+10Ch+var_E4]
.text:004034AC                 mov     [esp+10Ch+var_D1], al
.text:004034B0                 adc     ecx, [esp+10Ch+var_E0]
.text:004034B4                 test    al, al
.text:004034B6                 mov     [esp+10Ch+var_B4], edi
.text:004034BA                 mov     [esp+10Ch+var_B0], ecx
.text:004034BE                 jnz     short loc_4034F7
.text:004034C0                 mov     eax, ds:dword_41B0A0
.text:004034C5                 mov     ecx, [eax+esi*8]
.text:004034C8                 mov     edi, [eax+esi*8+4]
.text:004034CC                 add     [esp+10Ch+var_B4], ecx
.text:004034D0                 adc     [esp+10Ch+var_B0], edi
.text:004034D4
.text:004034D4 loc_4034D4:                             ; CODE XREF: sub_403100+3FC↓j
.text:004034D4                 mov     ecx, [eax+esi*8]
.text:004034D7                 mov     edi, [eax+esi*8+4]
.text:004034DB                 add     [esp+10Ch+var_E4], ecx
.text:004034DF                 adc     [esp+10Ch+var_E0], edi
.text:004034E3                 mov     edi, [esp+10Ch+var_E4]
.text:004034E7                 add     [eax+ebx*8], edi
.text:004034EA                 mov     edx, [esp+10Ch+var_E0]
.text:004034EE                 adc     [eax+ebx*8+4], edx
.text:004034F2                 jmp     loc_403240
.text:004034F7 ; ---------------------------------------------------------------------------
.text:004034F7
.text:004034F7 loc_4034F7:                             ; CODE XREF: sub_403100+3BE↑j
.text:004034F7                 mov     eax, ds:dword_41B0A0
.text:004034FC                 jmp     short loc_4034D4
.text:004034FC ; ---------------------------------------------------------------------------
.text:004034FE                 align 10h
.text:00403500
.text:00403500 loc_403500:                             ; CODE XREF: sub_403100+E5↑j
.text:00403500                                         ; sub_403100+449↓j
.text:00403500                 movzx   edx, ds:byte_41B050
.text:00403507                 mov     [esp+10Ch+var_D1], dl
.text:0040350B                 jmp     loc_403240
.text:00403510 ; ---------------------------------------------------------------------------
.text:00403510
.text:00403510 loc_403510:                             ; CODE XREF: sub_403100+D6↑j
.text:00403510                 mov     [esp+10Ch+Stream], 8 ; size_t
.text:00403518                 lea     ecx, [ebx+0Ah]
.text:0040351B                 mov     ds:dword_41B080, ecx
.text:00403521                 mov     [esp+10Ch+Buffer], ecx ; size_t
.text:00403524                 call    sub_40AA90
.text:00403529                 mov     ds:dword_41B090, eax
.text:0040352E                 mov     esi, ds:dword_41B080
.text:00403534                 mov     [esp+10Ch+Stream], 8 ; size_t
.text:0040353C                 mov     [esp+10Ch+Buffer], esi ; size_t
.text:0040353F                 call    sub_40AA90
.text:00403544                 mov     ds:dword_41B0A0, eax
.text:00403549                 jmp     short loc_403500
.text:00403549 ; ---------------------------------------------------------------------------
.text:0040354B                 align 10h
.text:00403550
.text:00403550 loc_403550:                             ; CODE XREF: sub_403100+A7↑j
.text:00403550                 mov     ecx, [edi+58h]
.text:00403553                 mov     eax, [edi+5Ch]
.text:00403556                 shld    eax, ecx, 9
.text:0040355A                 shl     ecx, 9
.text:0040355D                 mov     [esp+10Ch+var_AC], ecx
.text:00403561                 mov     [esp+10Ch+var_A8], eax
.text:00403565                 jmp     loc_4031BB
.text:0040356A ; ---------------------------------------------------------------------------
.text:0040356A
.text:0040356A loc_40356A:                             ; CODE XREF: sub_403100+94↑j
.text:0040356A                 mov     edx, [edi+10h]
.text:0040356D                 mov     ecx, [edi+14h]
.text:00403570                 mov     esi, [edi+0Ch]
.text:00403573                 mov     [esp+10Ch+var_CC], edx
.text:00403577                 mov     ebx, [edi+8]
.text:0040357A                 mov     [esp+10Ch+var_C8], ecx
.text:0040357E                 mov     [esp+10Ch+Buffer], 10h ; size_t
.text:00403585                 call    sub_40A950
.text:0040358A                 mov     [eax+4], esi
.text:0040358D                 mov     ecx, [esp+10Ch+var_CC]
.text:00403591                 mov     esi, [esp+10Ch+var_C8]
.text:00403595                 mov     [eax], ebx
.text:00403597                 mov     edx, ds:dword_41B0B0
.text:0040359D                 mov     [eax+8], ecx
.text:004035A0                 mov     [eax+0Ch], esi
.text:004035A3                 mov     [esp+10Ch+Block], eax
.text:004035A7                 mov     [esp+10Ch+Stream], eax
.text:004035AB                 mov     [esp+10Ch+Buffer], edx
.text:004035AE                 call    sub_407A90
.text:004035B3                 test    eax, eax
.text:004035B5                 jz      loc_4036B5
.text:004035BB                 cmp     eax, [esp+10Ch+Block]
.text:004035BF                 jz      loc_4031A0
.text:004035C5                 mov     eax, [esp+10Ch+Block]
.text:004035C9                 mov     [esp+10Ch+Buffer], eax ; Block
.text:004035CC                 call    free
.text:004035D1                 mov     [esp+10Ch+var_AC], 0
.text:004035D9                 mov     [esp+10Ch+var_A8], 0
.text:004035E1                 mov     [esp+10Ch+var_B5], 0
.text:004035E6                 jmp     loc_4031BB
.text:004035EB ; ---------------------------------------------------------------------------
.text:004035EB
.text:004035EB loc_4035EB:                             ; CODE XREF: sub_403100+59↑j
.text:004035EB                 mov     ecx, [esp+10Ch+var_BC]
.text:004035EF                 mov     [esp+10Ch+Buffer], ecx ; char *
.text:004035F2                 call    sub_40AC10
.text:004035F7                 mov     [esp+10Ch+Buffer], offset aCannotReadDire ; "cannot read directory %s"
.text:004035FE                 mov     esi, eax
.text:00403600                 call    ds:libintl_gettext
.text:00403606                 mov     dword ptr [esp+10Ch+var_100], esi ; char
.text:0040360A                 mov     [esp+10Ch+var_104], eax ; char *
.text:0040360E                 mov     edx, [ebp+1Ch]
.text:00403611                 mov     [esp+10Ch+Buffer], 0 ; Code
.text:00403618                 mov     [esp+10Ch+Stream], edx ; ErrorMessage
.text:0040361C                 call    sub_40E9E0
.text:00403621                 mov     [esp+10Ch+var_9D], 0
.text:00403626                 mov     edx, [ebp+44h]
.text:00403629                 jmp     loc_403164
.text:00403629 ; ---------------------------------------------------------------------------
.text:0040362E                 align 10h
.text:00403630
.text:00403630 loc_403630:                             ; CODE XREF: sub_403100+50↑j
.text:00403630                 cmp     eax, 0Ah
.text:00403633                 jnz     loc_40315F
.text:00403639                 mov     eax, [esp+10Ch+var_BC]
.text:0040363D                 mov     [esp+10Ch+Buffer], eax ; char *
.text:00403640                 call    sub_40AC10
.text:00403645                 mov     [esp+10Ch+Buffer], offset aCannotAccessS ; "cannot access %s"
.text:0040364C                 lea     esi, [esi+0]
.text:00403650
.text:00403650 loc_403650:                             ; CODE XREF: sub_403100+593↓j
.text:00403650                 mov     ebx, eax
.text:00403652                 call    ds:libintl_gettext
.text:00403658                 mov     dword ptr [esp+10Ch+var_100], ebx ; char
.text:0040365C                 mov     [esp+10Ch+var_104], eax ; char *
.text:00403660                 mov     esi, [ebp+1Ch]
.text:00403663                 mov     [esp+10Ch+Buffer], 0 ; Code
.text:0040366A                 mov     [esp+10Ch+Stream], esi ; ErrorMessage
.text:0040366E                 call    sub_40E9E0
.text:00403673                 xor     eax, eax
.text:00403675                 jmp     loc_4033B5
.text:00403675 ; ---------------------------------------------------------------------------
.text:0040367A                 align 10h
.text:00403680
.text:00403680 loc_403680:                             ; CODE XREF: sub_403100+47↑j
.text:00403680                 mov     ebx, [esp+10Ch+var_BC]
.text:00403684                 mov     [esp+10Ch+Buffer], ebx ; char *
.text:00403687                 call    sub_40AC10
.text:0040368C                 mov     [esp+10Ch+Buffer], (offset stru_401FF7._ptr+3)
.text:00403693                 jmp     short loc_403650
.text:00403695 ; ---------------------------------------------------------------------------
.text:00403695
.text:00403695 loc_403695:                             ; CODE XREF: sub_403100+38↑j
.text:00403695                 mov     [esp+10Ch+var_104], 4
.text:0040369D                 mov     ecx, [esp+10Ch+arg_0]
.text:004036A4                 mov     [esp+10Ch+Stream], ebp
.text:004036A8                 mov     [esp+10Ch+Buffer], ecx
.text:004036AB                 call    sub_404EB0
.text:004036B0                 jmp     loc_40313E
.text:004036B5 ; ---------------------------------------------------------------------------
.text:004036B5
.text:004036B5 loc_4036B5:                             ; CODE XREF: sub_403100+4B5↑j
.text:004036B5                 call    sub_40AC60
.text:004036BA ; ---------------------------------------------------------------------------
.text:004036BA
.text:004036BA loc_4036BA:                             ; CODE XREF: sub_403100+37E↑j
.text:004036BA                 mov     [esp+10Ch+var_104], 1B6h
.text:004036C2                 mov     [esp+10Ch+Stream], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/du.c"
.text:004036CA                 mov     [esp+10Ch+Buffer], offset aLevelPrevLevel ; "level == prev_level - 1"
.text:004036D1                 call    _assert
.text:004036D1 sub_403100      endp
.text:004036D1
.text:004036D1 ; ---------------------------------------------------------------------------
.text:004036D6                 align 10h
.text:004036E0
.text:004036E0 loc_4036E0:                             ; DATA XREF: sub_4036F0+92↓o
.text:004036E0                                         ; sub_4036F0+E9↓o ...
.text:004036E0                 add     [esi], ch
.text:004036E2                 add     [ebp+0B6h], cl
.text:004036E8                 add     [ebp+27BCh], cl
.text:004036E8 ; ---------------------------------------------------------------------------
.text:004036EE                 dw 0
.text:004036F0
.text:004036F0 ; =============== S U B R O U T I N E =======================================
.text:004036F0
.text:004036F0
.text:004036F0 sub_4036F0      proc near               ; CODE XREF: sub_406440+22↓p
.text:004036F0
.text:004036F0 Size            = dword ptr -3Ch
.text:004036F0 OpenFlag        = dword ptr -38h
.text:004036F0 var_34          = dword ptr -34h
.text:004036F0 var_30          = dword ptr -30h
.text:004036F0 var_2C          = dword ptr -2Ch
.text:004036F0 var_1C          = dword ptr -1Ch
.text:004036F0 var_18          = dword ptr -18h
.text:004036F0 var_14          = dword ptr -14h
.text:004036F0 arg_0           = dword ptr  4
.text:004036F0 arg_4           = dword ptr  8
.text:004036F0 arg_8           = dword ptr  0Ch
.text:004036F0
.text:004036F0                 push    ebp
.text:004036F1                 push    edi
.text:004036F2                 push    esi
.text:004036F3                 push    ebx
.text:004036F4                 sub     esp, 2Ch
.text:004036F7                 mov     ebx, [esp+3Ch+arg_4]
.text:004036FB                 mov     [esp+3Ch+var_1C], 0
.text:00403703                 mov     ebp, [esp+3Ch+arg_0]
.text:00403707                 test    ebx, 0FFFFFE00h
.text:0040370D                 jnz     loc_4039EF
.text:00403713                 mov     [esp+3Ch+Size], 38h ; '8' ; Size
.text:0040371A                 call    malloc
.text:0040371F                 mov     esi, eax
.text:00403721                 xor     eax, eax
.text:00403723                 test    esi, esi
.text:00403725                 jz      loc_403860
.text:0040372B                 cld
.text:0040372C                 mov     eax, [esp+3Ch+var_1C]
.text:00403730                 mov     ecx, 0Eh
.text:00403735                 mov     edi, esi
.text:00403737                 test    bl, 2
.text:0040373A                 rep stosd
.text:0040373C                 mov     [esi+2Ch], ebx
.text:0040373F                 mov     eax, [esp+3Ch+arg_8]
.text:00403743                 mov     [esi+28h], eax
.text:00403746                 jz      short loc_40374E
.text:00403748                 or      ebx, 4
.text:0040374B                 mov     [esi+2Ch], ebx
.text:0040374E
.text:0040374E loc_40374E:                             ; CODE XREF: sub_4036F0+56↑j
.text:0040374E                 mov     [esp+3Ch+Size], ebp
.text:00403751                 call    sub_404D30
.text:00403756                 cmp     eax, 400h
.text:0040375B                 mov     edx, 400h
.text:00403760                 ja      loc_4039E0
.text:00403766
.text:00403766 loc_403766:                             ; CODE XREF: sub_4036F0+2FA↓j
.text:00403766                 mov     [esp+3Ch+OpenFlag], edx
.text:0040376A                 mov     [esp+3Ch+Size], esi
.text:0040376D                 call    sub_404C30
.text:00403772                 test    al, al
.text:00403774                 jz      loc_4038C2
.text:0040377A                 mov     [esp+3Ch+var_34], 0 ; size_t
.text:00403782                 mov     [esp+3Ch+OpenFlag], offset loc_4036E0 ; void *
.text:0040378A                 mov     [esp+3Ch+Size], esi ; int
.text:0040378D                 call    sub_404B70
.text:00403792                 test    eax, eax
.text:00403794                 mov     ebx, eax
.text:00403796                 jz      loc_4038B7
.text:0040379C                 mov     dword ptr [eax+3Ch], 0FFFFFFFFh
.text:004037A3                 mov     eax, [ebp+0]
.text:004037A6                 mov     [esp+3Ch+var_14], 0
.text:004037AE                 mov     [esp+3Ch+var_18], 0
.text:004037B6                 test    eax, eax
.text:004037B8                 jnz     loc_403918
.text:004037BE
.text:004037BE loc_4037BE:                             ; CODE XREF: sub_4036F0+2B0↓j
.text:004037BE                 mov     edi, [esp+3Ch+arg_8]
.text:004037C2                 test    edi, edi
.text:004037C4                 jz      short loc_4037D1
.text:004037C6                 cmp     [esp+3Ch+var_18], 1
.text:004037CB                 ja      loc_4038F7
.text:004037D1
.text:004037D1 loc_4037D1:                             ; CODE XREF: sub_4036F0+D4↑j
.text:004037D1                                         ; sub_4036F0+223↓j
.text:004037D1                 mov     [esp+3Ch+var_34], 0 ; size_t
.text:004037D9                 mov     [esp+3Ch+OpenFlag], offset loc_4036E0 ; void *
.text:004037E1                 mov     [esp+3Ch+Size], esi ; int
.text:004037E4                 call    sub_404B70
.text:004037E9                 mov     [esi], eax
.text:004037EB                 test    eax, eax
.text:004037ED                 jz      loc_4038A3
.text:004037F3                 test    byte ptr [esi+2Dh], 1
.text:004037F7                 mov     edi, [esp+3Ch+var_14]
.text:004037FB                 mov     [eax+8], edi
.text:004037FE                 mov     ecx, [esi]
.text:00403800                 mov     word ptr [ecx+44h], 9
.text:00403806                 jz      loc_4038D0
.text:0040380C                 mov     [esp+3Ch+var_2C], offset free
.text:00403814                 mov     [esp+3Ch+var_30], offset sub_404EF0
.text:0040381C                 mov     [esp+3Ch+var_34], offset sub_404F60
.text:00403824                 mov     [esp+3Ch+OpenFlag], 0
.text:0040382C                 mov     [esp+3Ch+Size], 1Fh
.text:00403833                 call    sub_407540
.text:00403838                 mov     [esi+30h], eax
.text:0040383B                 test    eax, eax
.text:0040383D                 jz      short loc_4038A3
.text:0040383F                 mov     [esp+3Ch+Size], 20h ; ' ' ; Size
.text:00403846                 call    malloc
.text:0040384B                 mov     [esi+34h], eax
.text:0040384E
.text:0040384E loc_40384E:                             ; CODE XREF: sub_4036F0+202↓j
.text:0040384E                 test    byte ptr [esi+2Ch], 4
.text:00403852                 jz      short loc_403868
.text:00403854
.text:00403854 loc_403854:                             ; CODE XREF: sub_4036F0+195↓j
.text:00403854                                         ; sub_4036F0+19B↓j
.text:00403854                 mov     eax, esi
.text:00403856                 lea     esi, [esi+0]
.text:00403859                 lea     edi, [edi+0]
.text:00403860
.text:00403860 loc_403860:                             ; CODE XREF: sub_4036F0+35↑j
.text:00403860                                         ; sub_4036F0+1DC↓j
.text:00403860                 add     esp, 2Ch
.text:00403863                 pop     ebx
.text:00403864                 pop     esi
.text:00403865                 pop     edi
.text:00403866                 pop     ebp
.text:00403867                 retn
.text:00403868 ; ---------------------------------------------------------------------------
.text:00403868
.text:00403868 loc_403868:                             ; CODE XREF: sub_4036F0+162↑j
.text:00403868                 mov     [esp+3Ch+OpenFlag], 0 ; OpenFlag
.text:00403870                 mov     [esp+3Ch+Size], (offset loc_4036E0+1) ; FileName
.text:00403877                 call    _open
.text:0040387C                 test    eax, eax
.text:0040387E                 js      short loc_40388D
.text:00403880
.text:00403880 loc_403880:                             ; CODE XREF: sub_4036F0+1B1↓j
.text:00403880                 mov     [esi+1Ch], eax
.text:00403883                 test    eax, eax
.text:00403885                 jns     short loc_403854
.text:00403887                 or      dword ptr [esi+2Ch], 4
.text:0040388B                 jmp     short loc_403854
.text:0040388D ; ---------------------------------------------------------------------------
.text:0040388D
.text:0040388D loc_40388D:                             ; CODE XREF: sub_4036F0+18E↑j
.text:0040388D                 mov     [esp+3Ch+OpenFlag], 1 ; OpenFlag
.text:00403895                 mov     [esp+3Ch+Size], (offset loc_4036E0+1) ; FileName
.text:0040389C                 call    _open
.text:004038A1                 jmp     short loc_403880
.text:004038A3 ; ---------------------------------------------------------------------------
.text:004038A3
.text:004038A3 loc_4038A3:                             ; CODE XREF: sub_4036F0+FD↑j
.text:004038A3                                         ; sub_4036F0+14D↑j ...
.text:004038A3                 mov     ebp, [esp+3Ch+var_14]
.text:004038A7                 mov     [esp+3Ch+Size], ebp ; void *
.text:004038AA                 call    sub_404C00
.text:004038AF                 mov     [esp+3Ch+Size], ebx ; Block
.text:004038B2                 call    free
.text:004038B7
.text:004038B7 loc_4038B7:                             ; CODE XREF: sub_4036F0+A6↑j
.text:004038B7                 mov     ebx, [esi+18h]
.text:004038BA                 mov     [esp+3Ch+Size], ebx ; Block
.text:004038BD                 call    free
.text:004038C2
.text:004038C2 loc_4038C2:                             ; CODE XREF: sub_4036F0+84↑j
.text:004038C2                 mov     [esp+3Ch+Size], esi ; Block
.text:004038C5                 call    free
.text:004038CA
.text:004038CA loc_4038CA:                             ; CODE XREF: sub_4036F0+30A↓j
.text:004038CA                 xor     eax, eax
.text:004038CC                 jmp     short loc_403860
.text:004038CC ; ---------------------------------------------------------------------------
.text:004038CE                 align 10h
.text:004038D0
.text:004038D0 loc_4038D0:                             ; CODE XREF: sub_4036F0+116↑j
.text:004038D0                 mov     [esp+3Ch+Size], 20h ; ' ' ; Size
.text:004038D7                 call    malloc
.text:004038DC                 mov     [esi+34h], eax
.text:004038DF                 test    eax, eax
.text:004038E1                 jz      short loc_4038A3
.text:004038E3                 mov     [esp+3Ch+Size], eax
.text:004038E6                 call    sub_40ACC0
.text:004038EB                 mov     dword ptr [esi+30h], 0
.text:004038F2                 jmp     loc_40384E
.text:004038F7 ; ---------------------------------------------------------------------------
.text:004038F7
.text:004038F7 loc_4038F7:                             ; CODE XREF: sub_4036F0+DB↑j
.text:004038F7                 mov     [esp+3Ch+Size], esi ; int
.text:004038FA                 mov     edx, [esp+3Ch+var_18]
.text:004038FE                 mov     ebp, [esp+3Ch+var_14]
.text:00403902                 mov     [esp+3Ch+var_34], edx ; void *
.text:00403906                 mov     [esp+3Ch+OpenFlag], ebp ; int
.text:0040390A                 call    sub_404A90
.text:0040390F                 mov     [esp+3Ch+var_14], eax
.text:00403913                 jmp     loc_4037D1
.text:00403918 ; ---------------------------------------------------------------------------
.text:00403918
.text:00403918 loc_403918:                             ; CODE XREF: sub_4036F0+C8↑j
.text:00403918                                         ; sub_4036F0+2AA↓j
.text:00403918                 mov     [esp+3Ch+Size], eax ; Str
.text:0040391B                 call    strlen
.text:00403920                 test    eax, eax
.text:00403922                 jz      loc_4039CF
.text:00403928                 mov     [esp+3Ch+var_34], eax ; size_t
.text:0040392C                 mov     edx, [ebp+0]
.text:0040392F                 mov     [esp+3Ch+Size], esi ; int
.text:00403932                 mov     [esp+3Ch+OpenFlag], edx ; void *
.text:00403936                 call    sub_404B70
.text:0040393B                 test    eax, eax
.text:0040393D                 mov     edi, eax
.text:0040393F                 jz      loc_4038A3
.text:00403945                 mov     dword ptr [eax+3Ch], 0
.text:0040394C                 lea     ecx, [eax+0B8h]
.text:00403952                 mov     edx, [esi+2Ch]
.text:00403955                 mov     [eax+14h], ecx
.text:00403958                 mov     [eax+4], ebx
.text:0040395B                 and     edx, 1
.text:0040395E                 movzx   ecx, dl
.text:00403961                 mov     [esp+3Ch+var_34], ecx
.text:00403965                 mov     [esp+3Ch+OpenFlag], eax
.text:00403969                 mov     [esp+3Ch+Size], esi
.text:0040396C                 call    sub_404940
.text:00403971                 mov     [edi+44h], ax
.text:00403975                 cmp     ax, 5
.text:00403979                 jz      short loc_4039C7
.text:0040397B
.text:0040397B loc_40397B:                             ; CODE XREF: sub_4036F0+2DD↓j
.text:0040397B                 mov     eax, [esp+3Ch+arg_8]
.text:0040397F                 test    eax, eax
.text:00403981                 jz      short loc_4039A5
.text:00403983                 mov     edx, [esp+3Ch+var_14]
.text:00403987                 mov     [esp+3Ch+var_14], edi
.text:0040398B                 mov     [edi+8], edx
.text:0040398E
.text:0040398E loc_40398E:                             ; CODE XREF: sub_4036F0+2CF↓j
.text:0040398E                 inc     [esp+3Ch+var_18]
.text:00403992                 add     ebp, 4
.text:00403995                 mov     eax, [ebp+0]
.text:00403998                 test    eax, eax
.text:0040399A                 jnz     loc_403918
.text:004039A0                 jmp     loc_4037BE
.text:004039A5 ; ---------------------------------------------------------------------------
.text:004039A5
.text:004039A5 loc_4039A5:                             ; CODE XREF: sub_4036F0+291↑j
.text:004039A5                 mov     dword ptr [edi+8], 0
.text:004039AC                 mov     ecx, [esp+3Ch+var_14]
.text:004039B0                 test    ecx, ecx
.text:004039B2                 jz      short loc_4039C1
.text:004039B4                 mov     eax, [esp+3Ch+var_1C]
.text:004039B8                 mov     [eax+8], edi
.text:004039BB
.text:004039BB loc_4039BB:                             ; CODE XREF: sub_4036F0+2D5↓j
.text:004039BB                 mov     [esp+3Ch+var_1C], edi
.text:004039BF                 jmp     short loc_40398E
.text:004039C1 ; ---------------------------------------------------------------------------
.text:004039C1
.text:004039C1 loc_4039C1:                             ; CODE XREF: sub_4036F0+2C2↑j
.text:004039C1                 mov     [esp+3Ch+var_14], edi
.text:004039C5                 jmp     short loc_4039BB
.text:004039C7 ; ---------------------------------------------------------------------------
.text:004039C7
.text:004039C7 loc_4039C7:                             ; CODE XREF: sub_4036F0+289↑j
.text:004039C7                 mov     word ptr [edi+44h], 1
.text:004039CD                 jmp     short loc_40397B
.text:004039CF ; ---------------------------------------------------------------------------
.text:004039CF
.text:004039CF loc_4039CF:                             ; CODE XREF: sub_4036F0+232↑j
.text:004039CF                 call    _errno
.text:004039D4                 mov     dword ptr [eax], 2
.text:004039DA                 jmp     loc_4038A3
.text:004039DA ; ---------------------------------------------------------------------------
.text:004039DF                 align 10h
.text:004039E0
.text:004039E0 loc_4039E0:                             ; CODE XREF: sub_4036F0+70↑j
.text:004039E0                 mov     [esp+3Ch+Size], ebp
.text:004039E3                 call    sub_404D30
.text:004039E8                 mov     edx, eax
.text:004039EA                 jmp     loc_403766
.text:004039EF ; ---------------------------------------------------------------------------
.text:004039EF
.text:004039EF loc_4039EF:                             ; CODE XREF: sub_4036F0+1D↑j
.text:004039EF                 call    _errno
.text:004039F4                 mov     dword ptr [eax], 16h
.text:004039FA                 jmp     loc_4038CA
.text:004039FA sub_4036F0      endp
.text:004039FA
.text:004039FA ; ---------------------------------------------------------------------------
.text:004039FF                 align 10h
.text:00403A00
.text:00403A00 ; =============== S U B R O U T I N E =======================================
.text:00403A00
.text:00403A00
.text:00403A00 ; int __cdecl sub_403A00(void *)
.text:00403A00 sub_403A00      proc near               ; CODE XREF: sub_402F10+144↑p
.text:00403A00
.text:00403A00 Block           = dword ptr -1Ch
.text:00403A00 arg_0           = dword ptr  4
.text:00403A00
.text:00403A00                 push    edi
.text:00403A01                 xor     edi, edi
.text:00403A03                 push    esi
.text:00403A04                 push    ebx
.text:00403A05                 sub     esp, 10h
.text:00403A08                 mov     esi, [esp+1Ch+arg_0]
.text:00403A0C                 mov     eax, [esi]
.text:00403A0E                 test    eax, eax
.text:00403A10                 jz      short loc_403A45
.text:00403A12                 mov     edx, [eax+3Ch]
.text:00403A15                 mov     ebx, eax
.text:00403A17                 test    edx, edx
.text:00403A19                 js      short loc_403A3D
.text:00403A1B                 nop
.text:00403A1C                 lea     esi, [esi+0]
.text:00403A20
.text:00403A20 loc_403A20:                             ; CODE XREF: sub_403A00+3B↓j
.text:00403A20                 mov     eax, [ebx+8]
.text:00403A23                 mov     edx, ebx
.text:00403A25                 test    eax, eax
.text:00403A27                 jnz     short loc_403A2C
.text:00403A29                 mov     eax, [ebx+4]
.text:00403A2C
.text:00403A2C loc_403A2C:                             ; CODE XREF: sub_403A00+27↑j
.text:00403A2C                 mov     [esp+1Ch+Block], edx ; Block
.text:00403A2F                 mov     ebx, eax
.text:00403A31                 call    free
.text:00403A36                 mov     edx, [ebx+3Ch]
.text:00403A39                 test    edx, edx
.text:00403A3B                 jns     short loc_403A20
.text:00403A3D
.text:00403A3D loc_403A3D:                             ; CODE XREF: sub_403A00+19↑j
.text:00403A3D                 mov     [esp+1Ch+Block], ebx ; Block
.text:00403A40                 call    free
.text:00403A45
.text:00403A45 loc_403A45:                             ; CODE XREF: sub_403A00+10↑j
.text:00403A45                 mov     eax, [esi+4]
.text:00403A48                 test    eax, eax
.text:00403A4A                 jnz     loc_403AE6
.text:00403A50
.text:00403A50 loc_403A50:                             ; CODE XREF: sub_403A00+EE↓j
.text:00403A50                 mov     eax, [esi+8]
.text:00403A53                 test    eax, eax
.text:00403A55                 jnz     loc_403AD9
.text:00403A5B
.text:00403A5B loc_403A5B:                             ; CODE XREF: sub_403A00+E1↓j
.text:00403A5B                 mov     ecx, [esi+18h]
.text:00403A5E                 mov     [esp+1Ch+Block], ecx ; Block
.text:00403A61                 call    free
.text:00403A66                 test    byte ptr [esi+2Ch], 4
.text:00403A6A                 jz      short loc_403AB4
.text:00403A6C
.text:00403A6C loc_403A6C:                             ; CODE XREF: sub_403A00+CE↓j
.text:00403A6C                 mov     eax, [esi+30h]
.text:00403A6F                 test    eax, eax
.text:00403A71                 jnz     short loc_403AAA
.text:00403A73
.text:00403A73 loc_403A73:                             ; CODE XREF: sub_403A00+B2↓j
.text:00403A73                 mov     eax, [esi+34h]
.text:00403A76                 test    eax, eax
.text:00403A78                 jnz     short loc_403AA0
.text:00403A7A
.text:00403A7A loc_403A7A:                             ; CODE XREF: sub_403A00+A8↓j
.text:00403A7A                 mov     [esp+1Ch+Block], esi ; Block
.text:00403A7D                 call    free
.text:00403A82                 xor     eax, eax
.text:00403A84                 test    edi, edi
.text:00403A86                 jnz     short loc_403A8F
.text:00403A88
.text:00403A88 loc_403A88:                             ; CODE XREF: sub_403A00+9B↓j
.text:00403A88                 add     esp, 10h
.text:00403A8B                 pop     ebx
.text:00403A8C                 pop     esi
.text:00403A8D                 pop     edi
.text:00403A8E                 retn
.text:00403A8F ; ---------------------------------------------------------------------------
.text:00403A8F
.text:00403A8F loc_403A8F:                             ; CODE XREF: sub_403A00+86↑j
.text:00403A8F                 call    _errno
.text:00403A94                 mov     [eax], edi
.text:00403A96                 mov     eax, 0FFFFFFFFh
.text:00403A9B                 jmp     short loc_403A88
.text:00403A9B ; ---------------------------------------------------------------------------
.text:00403A9D                 align 10h
.text:00403AA0
.text:00403AA0 loc_403AA0:                             ; CODE XREF: sub_403A00+78↑j
.text:00403AA0                 mov     [esp+1Ch+Block], eax ; Block
.text:00403AA3                 call    free
.text:00403AA8                 jmp     short loc_403A7A
.text:00403AAA ; ---------------------------------------------------------------------------
.text:00403AAA
.text:00403AAA loc_403AAA:                             ; CODE XREF: sub_403A00+71↑j
.text:00403AAA                 mov     [esp+1Ch+Block], eax ; void *
.text:00403AAD                 call    sub_407820
.text:00403AB2                 jmp     short loc_403A73
.text:00403AB4 ; ---------------------------------------------------------------------------
.text:00403AB4
.text:00403AB4 loc_403AB4:                             ; CODE XREF: sub_403A00+6A↑j
.text:00403AB4                 mov     ebx, [esi+1Ch]
.text:00403AB7                 mov     [esp+1Ch+Block], ebx
.text:00403ABA                 call    sub_40ACA0
.text:00403ABF                 test    eax, eax
.text:00403AC1                 jnz     short loc_403AD0
.text:00403AC3
.text:00403AC3 loc_403AC3:                             ; CODE XREF: sub_403A00+D7↓j
.text:00403AC3                 mov     edx, [esi+1Ch]
.text:00403AC6                 mov     [esp+1Ch+Block], edx ; FileHandle
.text:00403AC9                 call    _close
.text:00403ACE                 jmp     short loc_403A6C
.text:00403AD0 ; ---------------------------------------------------------------------------
.text:00403AD0
.text:00403AD0 loc_403AD0:                             ; CODE XREF: sub_403A00+C1↑j
.text:00403AD0                 call    _errno
.text:00403AD5                 mov     edi, [eax]
.text:00403AD7                 jmp     short loc_403AC3
.text:00403AD9 ; ---------------------------------------------------------------------------
.text:00403AD9
.text:00403AD9 loc_403AD9:                             ; CODE XREF: sub_403A00+55↑j
.text:00403AD9                 mov     [esp+1Ch+Block], eax ; Block
.text:00403ADC                 call    free
.text:00403AE1                 jmp     loc_403A5B
.text:00403AE6 ; ---------------------------------------------------------------------------
.text:00403AE6
.text:00403AE6 loc_403AE6:                             ; CODE XREF: sub_403A00+4A↑j
.text:00403AE6                 mov     [esp+1Ch+Block], eax ; void *
.text:00403AE9                 call    sub_404C00
.text:00403AEE                 jmp     loc_403A50
.text:00403AEE sub_403A00      endp
.text:00403AEE
.text:00403AEE ; ---------------------------------------------------------------------------
.text:00403AF3 ; const char byte_403AF3
.text:00403AF3 byte_403AF3     db 2Eh                  ; DATA XREF: sub_403B00+399↓o
.text:00403AF3                                         ; sub_4042E0:loc_404810↓o
.text:00403AF4                 dd 768D002Eh, 27BC8D00h, 0
.text:00403B00
.text:00403B00 ; =============== S U B R O U T I N E =======================================
.text:00403B00
.text:00403B00
.text:00403B00 ; int __cdecl sub_403B00(void *)
.text:00403B00 sub_403B00      proc near               ; CODE XREF: sub_402F10+103↑p
.text:00403B00
.text:00403B00 Block           = dword ptr -4Ch
.text:00403B00 Src             = dword ptr -48h
.text:00403B00 Size            = dword ptr -44h
.text:00403B00 FileName        = dword ptr -40h
.text:00403B00 var_3C          = dword ptr -3Ch
.text:00403B00 var_38          = dword ptr -38h
.text:00403B00 var_34          = dword ptr -34h
.text:00403B00 var_30          = dword ptr -30h
.text:00403B00 arg_0           = dword ptr  4
.text:00403B00
.text:00403B00                 push    ebp
.text:00403B01                 push    edi
.text:00403B02                 push    esi
.text:00403B03                 push    ebx
.text:00403B04                 sub     esp, 3Ch
.text:00403B07                 mov     eax, [esp+4Ch+arg_0]
.text:00403B0B                 mov     ebp, [eax]
.text:00403B0D                 test    ebp, ebp
.text:00403B0F                 jz      loc_403D50
.text:00403B15                 mov     edi, [eax+2Ch]
.text:00403B18                 test    edi, 2000h
.text:00403B1E                 jnz     loc_403D50
.text:00403B24                 movzx   ecx, word ptr [ebp+48h]
.text:00403B28                 mov     esi, ebp
.text:00403B2A                 mov     word ptr [ebp+48h], 3
.text:00403B30                 cmp     cx, 1
.text:00403B34                 jz      loc_404160
.text:00403B3A                 cmp     cx, 2
.text:00403B3E                 jz      loc_4040AF
.text:00403B44                 mov     edx, [ebp+44h]
.text:00403B47
.text:00403B47 loc_403B47:                             ; CODE XREF: sub_403B00+5B9↓j
.text:00403B47                 dec     dx
.text:00403B49                 jz      loc_403F00
.text:00403B4F                 nop
.text:00403B50
.text:00403B50 loc_403B50:                             ; CODE XREF: sub_403B00+78↓j
.text:00403B50                 mov     eax, esi
.text:00403B52                 mov     esi, [esi+8]
.text:00403B55                 test    esi, esi
.text:00403B57                 jz      loc_403D57
.text:00403B5D                 mov     [esp+4Ch+Block], eax ; Block
.text:00403B60                 call    free
.text:00403B65                 mov     ebx, [esi+3Ch]
.text:00403B68                 test    ebx, ebx
.text:00403B6A                 jz      loc_403C76
.text:00403B70                 movzx   eax, word ptr [esi+48h]
.text:00403B74                 cmp     ax, 4
.text:00403B78                 jz      short loc_403B50
.text:00403B7A                 cmp     ax, 2
.text:00403B7E                 jz      short loc_403BED
.text:00403B80
.text:00403B80 loc_403B80:                             ; CODE XREF: sub_403B00+113↓j
.text:00403B80                                         ; sub_403B00+527↓j
.text:00403B80                 mov     ebp, [esi+4]
.text:00403B83                 mov     eax, [esp+4Ch+arg_0]
.text:00403B87                 mov     edi, [ebp+24h]
.text:00403B8A                 mov     ecx, [eax+18h]
.text:00403B8D                 mov     edx, [ebp+18h]
.text:00403B90                 add     ecx, edi
.text:00403B92                 cmp     byte ptr [edi+edx-1], 2Fh ; '/'
.text:00403B97                 jz      short loc_403BEA
.text:00403B99
.text:00403B99 loc_403B99:                             ; CODE XREF: sub_403B00+EB↓j
.text:00403B99                 mov     byte ptr [ecx], 2Fh ; '/'
.text:00403B9C                 lea     ebx, [esi+0B8h]
.text:00403BA2                 mov     edi, [esi+40h]
.text:00403BA5                 mov     [esp+4Ch+Src], ebx ; Src
.text:00403BA9                 inc     ecx
.text:00403BAA                 mov     [esp+4Ch+Block], ecx ; void *
.text:00403BAD                 inc     edi
.text:00403BAE                 mov     [esp+4Ch+Size], edi ; Size
.text:00403BB2                 call    memmove
.text:00403BB7                 cmp     word ptr [esi+44h], 1
.text:00403BBC                 jz      short loc_403BD8
.text:00403BBE
.text:00403BBE loc_403BBE:                             ; CODE XREF: sub_403B00+E8↓j
.text:00403BBE                 mov     ebp, [esp+4Ch+arg_0]
.text:00403BC2                 mov     [ebp+0], esi
.text:00403BC5
.text:00403BC5 loc_403BC5:                             ; CODE XREF: sub_403B00+21C↓j
.text:00403BC5                                         ; sub_403B00+67C↓j
.text:00403BC5                 mov     eax, esi
.text:00403BC7                 mov     esi, esi
.text:00403BC9                 lea     edi, [edi+0]
.text:00403BD0
.text:00403BD0 loc_403BD0:                             ; CODE XREF: sub_403B00+252↓j
.text:00403BD0                                         ; sub_403B00+2C1↓j ...
.text:00403BD0                 add     esp, 3Ch
.text:00403BD3                 pop     ebx
.text:00403BD4                 pop     esi
.text:00403BD5                 pop     edi
.text:00403BD6                 pop     ebp
.text:00403BD7                 retn
.text:00403BD8 ; ---------------------------------------------------------------------------
.text:00403BD8
.text:00403BD8 loc_403BD8:                             ; CODE XREF: sub_403B00+BC↑j
.text:00403BD8                 mov     [esp+4Ch+Src], esi ; int
.text:00403BDC                 mov     ecx, [esp+4Ch+arg_0]
.text:00403BE0                 mov     [esp+4Ch+Block], ecx ; Block
.text:00403BE3                 call    sub_404F90
.text:00403BE8                 jmp     short loc_403BBE
.text:00403BEA ; ---------------------------------------------------------------------------
.text:00403BEA
.text:00403BEA loc_403BEA:                             ; CODE XREF: sub_403B00+97↑j
.text:00403BEA                 dec     ecx
.text:00403BEB                 jmp     short loc_403B99
.text:00403BED ; ---------------------------------------------------------------------------
.text:00403BED
.text:00403BED loc_403BED:                             ; CODE XREF: sub_403B00+7E↑j
.text:00403BED                 mov     [esp+4Ch+Size], 1
.text:00403BF5                 mov     ecx, [esp+4Ch+arg_0]
.text:00403BF9                 mov     [esp+4Ch+Src], esi
.text:00403BFD                 mov     [esp+4Ch+Block], ecx
.text:00403C00                 call    sub_404940
.text:00403C05                 mov     [esi+44h], ax
.text:00403C09                 dec     ax
.text:00403C0B                 jz      short loc_403C18
.text:00403C0D
.text:00403C0D loc_403C0D:                             ; CODE XREF: sub_403B00+120↓j
.text:00403C0D                                         ; sub_403B00+14C↓j ...
.text:00403C0D                 mov     word ptr [esi+48h], 3
.text:00403C13                 jmp     loc_403B80
.text:00403C18 ; ---------------------------------------------------------------------------
.text:00403C18
.text:00403C18 loc_403C18:                             ; CODE XREF: sub_403B00+10B↑j
.text:00403C18                 mov     ebx, [esp+4Ch+arg_0]
.text:00403C1C                 test    byte ptr [ebx+2Ch], 4
.text:00403C20                 jnz     short loc_403C0D
.text:00403C22                 mov     [esp+4Ch+Src], 0 ; OpenFlag
.text:00403C2A                 mov     [esp+4Ch+Block], (offset loc_4036E0+1) ; FileName
.text:00403C31                 call    _open
.text:00403C36                 test    eax, eax
.text:00403C38                 js      short loc_403C60
.text:00403C3A
.text:00403C3A loc_403C3A:                             ; CODE XREF: sub_403B00+174↓j
.text:00403C3A                 mov     [esi+20h], eax
.text:00403C3D                 test    eax, eax
.text:00403C3F                 js      short loc_403C4E
.text:00403C41                 movzx   ebp, word ptr [esi+46h]
.text:00403C45                 or      ebp, 2
.text:00403C48                 mov     [esi+46h], bp
.text:00403C4C                 jmp     short loc_403C0D
.text:00403C4E ; ---------------------------------------------------------------------------
.text:00403C4E
.text:00403C4E loc_403C4E:                             ; CODE XREF: sub_403B00+13F↑j
.text:00403C4E                 call    _errno
.text:00403C53                 mov     word ptr [esi+44h], 7
.text:00403C59                 mov     edi, [eax]
.text:00403C5B                 mov     [esi+1Ch], edi
.text:00403C5E                 jmp     short loc_403C0D
.text:00403C60 ; ---------------------------------------------------------------------------
.text:00403C60
.text:00403C60 loc_403C60:                             ; CODE XREF: sub_403B00+138↑j
.text:00403C60                 mov     [esp+4Ch+Src], 1 ; OpenFlag
.text:00403C68                 mov     [esp+4Ch+Block], (offset loc_4036E0+1) ; FileName
.text:00403C6F                 call    _open
.text:00403C74                 jmp     short loc_403C3A
.text:00403C76 ; ---------------------------------------------------------------------------
.text:00403C76
.text:00403C76 loc_403C76:                             ; CODE XREF: sub_403B00+6A↑j
.text:00403C76                 mov     eax, [esp+4Ch+arg_0]
.text:00403C7A                 test    byte ptr [eax+2Ch], 4
.text:00403C7E                 jnz     short loc_403C93
.text:00403C80                 mov     ecx, [eax+1Ch]
.text:00403C83                 mov     [esp+4Ch+Block], ecx
.text:00403C86                 call    sub_40ACA0
.text:00403C8B                 test    eax, eax
.text:00403C8D                 jnz     loc_403D37
.text:00403C93
.text:00403C93 loc_403C93:                             ; CODE XREF: sub_403B00+17E↑j
.text:00403C93                 mov     ebp, [esi+40h]
.text:00403C96                 mov     eax, [esp+4Ch+arg_0]
.text:00403C9A                 mov     [esi+24h], ebp
.text:00403C9D                 inc     ebp
.text:00403C9E                 mov     [esp+4Ch+Size], ebp ; Size
.text:00403CA2                 lea     ebp, [esi+0B8h]
.text:00403CA8                 mov     [esp+4Ch+Src], ebp ; Src
.text:00403CAC                 mov     edx, [eax+18h]
.text:00403CAF                 mov     [esp+4Ch+Block], edx ; void *
.text:00403CB2                 call    memmove
.text:00403CB7                 mov     [esp+4Ch+Src], 2Fh ; '/' ; Ch
.text:00403CBF                 mov     [esp+4Ch+Block], ebp ; Str
.text:00403CC2                 call    strrchr
.text:00403CC7                 test    eax, eax
.text:00403CC9                 mov     edi, eax
.text:00403CCB                 jz      short loc_403CF2
.text:00403CCD                 cmp     eax, ebp
.text:00403CCF                 jz      short loc_403D2F
.text:00403CD1
.text:00403CD1 loc_403CD1:                             ; CODE XREF: sub_403B00+235↓j
.text:00403CD1                 inc     edi
.text:00403CD2                 mov     [esp+4Ch+Block], edi ; Str
.text:00403CD5                 call    strlen
.text:00403CDA                 mov     [esp+4Ch+Src], edi ; Src
.text:00403CDE                 mov     ebx, eax
.text:00403CE0                 lea     ecx, [eax+1]
.text:00403CE3                 mov     [esp+4Ch+Size], ecx ; Size
.text:00403CE7                 mov     [esp+4Ch+Block], ebp ; void *
.text:00403CEA                 call    memmove
.text:00403CEF                 mov     [esi+40h], ebx
.text:00403CF2
.text:00403CF2 loc_403CF2:                             ; CODE XREF: sub_403B00+1CB↑j
.text:00403CF2                                         ; sub_403B00+233↓j
.text:00403CF2                 cmp     word ptr [esi+44h], 1
.text:00403CF7                 mov     eax, [esp+4Ch+arg_0]
.text:00403CFB                 mov     edi, [esi+30h]
.text:00403CFE                 mov     ebx, [esi+34h]
.text:00403D01                 mov     ebp, [eax+18h]
.text:00403D04                 mov     ecx, [esp+4Ch+arg_0]
.text:00403D08                 mov     [esi+18h], ebp
.text:00403D0B                 mov     [esi+14h], ebp
.text:00403D0E                 mov     [ecx+10h], edi
.text:00403D11                 mov     [ecx+14h], ebx
.text:00403D14                 jz      short loc_403D21
.text:00403D16
.text:00403D16 loc_403D16:                             ; CODE XREF: sub_403B00+22D↓j
.text:00403D16                 mov     edx, [esp+4Ch+arg_0]
.text:00403D1A                 mov     [edx], esi
.text:00403D1C                 jmp     loc_403BC5
.text:00403D21 ; ---------------------------------------------------------------------------
.text:00403D21
.text:00403D21 loc_403D21:                             ; CODE XREF: sub_403B00+214↑j
.text:00403D21                 mov     [esp+4Ch+Src], esi ; int
.text:00403D25                 mov     [esp+4Ch+Block], ecx ; Block
.text:00403D28                 call    sub_404F90
.text:00403D2D                 jmp     short loc_403D16
.text:00403D2F ; ---------------------------------------------------------------------------
.text:00403D2F
.text:00403D2F loc_403D2F:                             ; CODE XREF: sub_403B00+1CF↑j
.text:00403D2F                 cmp     byte ptr [ebp+1], 0
.text:00403D33                 jz      short loc_403CF2
.text:00403D35                 jmp     short loc_403CD1
.text:00403D37 ; ---------------------------------------------------------------------------
.text:00403D37
.text:00403D37 loc_403D37:                             ; CODE XREF: sub_403B00+18D↑j
.text:00403D37                 mov     esi, [esp+4Ch+arg_0]
.text:00403D3B                 or      dword ptr [esi+2Ch], 2000h
.text:00403D42                 lea     esi, [esi+0]
.text:00403D49                 lea     edi, [edi+0]
.text:00403D50
.text:00403D50 loc_403D50:                             ; CODE XREF: sub_403B00+F↑j
.text:00403D50                                         ; sub_403B00+1E↑j ...
.text:00403D50                 xor     eax, eax
.text:00403D52                 jmp     loc_403BD0
.text:00403D57 ; ---------------------------------------------------------------------------
.text:00403D57
.text:00403D57 loc_403D57:                             ; CODE XREF: sub_403B00+57↑j
.text:00403D57                 mov     esi, [eax+4]
.text:00403D5A                 mov     [esp+4Ch+Block], eax ; Block
.text:00403D5D                 call    free
.text:00403D62                 cmp     dword ptr [esi+3Ch], 0FFFFFFFFh
.text:00403D66                 jz      loc_403ED7
.text:00403D6C                 mov     ebx, [esp+4Ch+arg_0]
.text:00403D70                 mov     edi, [esi+24h]
.text:00403D73                 mov     eax, [ebx+18h]
.text:00403D76                 mov     byte ptr [edi+eax], 0
.text:00403D7A                 mov     edx, [esi+3Ch]
.text:00403D7D                 test    edx, edx
.text:00403D7F                 jnz     loc_403E30
.text:00403D85                 test    byte ptr [ebx+2Ch], 4
.text:00403D89                 jz      short loc_403E07
.text:00403D8B
.text:00403D8B loc_403D8B:                             ; CODE XREF: sub_403B00+314↓j
.text:00403D8B                                         ; sub_403B00+32B↓j ...
.text:00403D8B                 mov     ebp, [esi+1Ch]
.text:00403D8E                 xor     eax, eax
.text:00403D90                 mov     ebx, 7
.text:00403D95                 test    ebp, ebp
.text:00403D97                 setz    al
.text:00403D9A                 sub     ebx, eax
.text:00403D9C                 test    ebp, ebp
.text:00403D9E                 mov     [esi+44h], bx
.text:00403DA2                 jnz     short loc_403DAF
.text:00403DA4                 mov     edx, [esp+4Ch+arg_0]
.text:00403DA8                 mov     ebx, [edx+30h]
.text:00403DAB                 test    ebx, ebx
.text:00403DAD                 jnz     short loc_403DC6
.text:00403DAF
.text:00403DAF loc_403DAF:                             ; CODE XREF: sub_403B00+2A2↑j
.text:00403DAF                                         ; sub_403B00+305↓j
.text:00403DAF                 mov     ebx, [esp+4Ch+arg_0]
.text:00403DB3                 xor     eax, eax
.text:00403DB5                 test    byte ptr [ebx+2Dh], 20h
.text:00403DB9                 mov     [ebx], esi
.text:00403DBB                 setnz   al
.text:00403DBE                 dec     eax
.text:00403DBF                 and     eax, esi
.text:00403DC1                 jmp     loc_403BD0
.text:00403DC6 ; ---------------------------------------------------------------------------
.text:00403DC6
.text:00403DC6 loc_403DC6:                             ; CODE XREF: sub_403B00+2AD↑j
.text:00403DC6                 lea     edi, [esi+50h]
.text:00403DC9                 mov     ebp, [edi+10h]
.text:00403DCC                 mov     ecx, [edi+14h]
.text:00403DCF                 mov     [esp+4Ch+var_3C], ebp
.text:00403DD3                 mov     [esp+4Ch+var_38], ecx
.text:00403DD7                 mov     edx, [edi+8]
.text:00403DDA                 mov     ebp, [edi+0Ch]
.text:00403DDD                 mov     [esp+4Ch+Block], ebx
.text:00403DE0                 lea     edi, [esp+4Ch+var_3C]
.text:00403DE4                 mov     [esp+4Ch+var_34], edx
.text:00403DE8                 mov     [esp+4Ch+var_30], ebp
.text:00403DEC                 mov     [esp+4Ch+Src], edi
.text:00403DF0                 call    sub_408160
.text:00403DF5                 test    eax, eax
.text:00403DF7                 jz      loc_404181
.text:00403DFD                 mov     [esp+4Ch+Block], eax ; Block
.text:00403E00                 call    free
.text:00403E05                 jmp     short loc_403DAF
.text:00403E07 ; ---------------------------------------------------------------------------
.text:00403E07
.text:00403E07 loc_403E07:                             ; CODE XREF: sub_403B00+289↑j
.text:00403E07                 mov     ecx, [ebx+1Ch]
.text:00403E0A                 mov     [esp+4Ch+Block], ecx
.text:00403E0D                 call    sub_40ACA0
.text:00403E12                 test    eax, eax
.text:00403E14                 jz      loc_403D8B
.text:00403E1A                 call    _errno
.text:00403E1F                 mov     ebp, [eax]
.text:00403E21                 mov     [esi+1Ch], ebp
.text:00403E24
.text:00403E24 loc_403E24:                             ; CODE XREF: sub_403B00+3D2↓j
.text:00403E24                 or      dword ptr [ebx+2Ch], 2000h
.text:00403E2B                 jmp     loc_403D8B
.text:00403E30 ; ---------------------------------------------------------------------------
.text:00403E30
.text:00403E30 loc_403E30:                             ; CODE XREF: sub_403B00+27F↑j
.text:00403E30                 movzx   eax, word ptr [esi+46h]
.text:00403E34                 test    al, 2
.text:00403E36                 jz      short loc_403E91
.text:00403E38                 mov     ebx, [esp+4Ch+arg_0]
.text:00403E3C                 test    byte ptr [ebx+2Ch], 4
.text:00403E40                 jz      short loc_403E52
.text:00403E42
.text:00403E42 loc_403E42:                             ; CODE XREF: sub_403B00+35F↓j
.text:00403E42                                         ; sub_403B00+38F↓j
.text:00403E42                 mov     edx, [esi+20h]
.text:00403E45                 mov     [esp+4Ch+Block], edx ; FileHandle
.text:00403E48                 call    _close
.text:00403E4D                 jmp     loc_403D8B
.text:00403E52 ; ---------------------------------------------------------------------------
.text:00403E52
.text:00403E52 loc_403E52:                             ; CODE XREF: sub_403B00+340↑j
.text:00403E52                 mov     edx, [esi+20h]
.text:00403E55                 mov     [esp+4Ch+Block], edx
.text:00403E58                 call    sub_40ACA0
.text:00403E5D                 test    eax, eax
.text:00403E5F                 jz      short loc_403E42
.text:00403E61                 call    _errno
.text:00403E66                 mov     ebx, [esi+20h]
.text:00403E69                 mov     ebp, [eax]
.text:00403E6B                 mov     [esp+4Ch+Block], ebx ; FileHandle
.text:00403E6E                 call    _close
.text:00403E73                 call    _errno
.text:00403E78                 mov     [eax], ebp
.text:00403E7A                 call    _errno
.text:00403E7F                 mov     ecx, [eax]
.text:00403E81                 mov     edi, [esp+4Ch+arg_0]
.text:00403E85                 mov     [esi+1Ch], ecx
.text:00403E88                 or      dword ptr [edi+2Ch], 2000h
.text:00403E8F                 jmp     short loc_403E42
.text:00403E91 ; ---------------------------------------------------------------------------
.text:00403E91
.text:00403E91 loc_403E91:                             ; CODE XREF: sub_403B00+336↑j
.text:00403E91                 test    al, 1
.text:00403E93                 jnz     loc_403D8B
.text:00403E99                 mov     [esp+4Ch+FileName], offset byte_403AF3 ; FileName
.text:00403EA1                 mov     eax, [esp+4Ch+arg_0]
.text:00403EA5                 mov     [esp+4Ch+Size], 0FFFFFFFFh ; int
.text:00403EAD                 mov     edi, [esi+4]
.text:00403EB0                 mov     [esp+4Ch+Block], eax ; int
.text:00403EB3                 mov     [esp+4Ch+Src], edi ; int
.text:00403EB7                 call    sub_404D70
.text:00403EBC                 test    eax, eax
.text:00403EBE                 jz      loc_403D8B
.text:00403EC4                 call    _errno
.text:00403EC9                 mov     ecx, [eax]
.text:00403ECB                 mov     ebx, [esp+4Ch+arg_0]
.text:00403ECF                 mov     [esi+1Ch], ecx
.text:00403ED2                 jmp     loc_403E24
.text:00403ED7 ; ---------------------------------------------------------------------------
.text:00403ED7
.text:00403ED7 loc_403ED7:                             ; CODE XREF: sub_403B00+266↑j
.text:00403ED7                 mov     [esp+4Ch+Block], esi ; Block
.text:00403EDA                 call    free
.text:00403EDF                 call    _errno
.text:00403EE4                 mov     dword ptr [eax], 0
.text:00403EEA                 mov     esi, [esp+4Ch+arg_0]
.text:00403EEE                 mov     dword ptr [esi], 0
.text:00403EF4                 jmp     loc_403D50
.text:00403EF4 ; ---------------------------------------------------------------------------
.text:00403EF9                 align 10h
.text:00403F00
.text:00403F00 loc_403F00:                             ; CODE XREF: sub_403B00+49↑j
.text:00403F00                 cmp     cx, 4
.text:00403F04                 jz      short loc_403F30
.text:00403F06                 test    edi, 40h
.text:00403F0C                 jz      loc_403FBF
.text:00403F12                 mov     esi, [esp+4Ch+arg_0]
.text:00403F16                 mov     ebx, [ebp+34h]
.text:00403F19                 mov     ecx, [ebp+30h]
.text:00403F1C                 mov     eax, [esi+10h]
.text:00403F1F                 mov     edx, [esi+14h]
.text:00403F22                 mov     esi, ebx
.text:00403F24                 xor     eax, ecx
.text:00403F26                 xor     esi, edx
.text:00403F28                 or      esi, eax
.text:00403F2A                 jz      loc_403FBF
.text:00403F30
.text:00403F30 loc_403F30:                             ; CODE XREF: sub_403B00+404↑j
.text:00403F30                 test    byte ptr [ebp+46h], 2
.text:00403F34                 jnz     short loc_403FAF
.text:00403F36
.text:00403F36 loc_403F36:                             ; CODE XREF: sub_403B00+4BA↓j
.text:00403F36                 mov     ecx, [esp+4Ch+arg_0]
.text:00403F3A                 mov     eax, [ecx+4]
.text:00403F3D                 test    eax, eax
.text:00403F3F                 jnz     short loc_403F9A
.text:00403F41
.text:00403F41 loc_403F41:                             ; CODE XREF: sub_403B00+4AD↓j
.text:00403F41                 mov     word ptr [ebp+44h], 6
.text:00403F47                 mov     edx, [esp+4Ch+arg_0]
.text:00403F4B                 mov     ebx, [edx+30h]
.text:00403F4E
.text:00403F4E loc_403F4E:                             ; CODE XREF: sub_403B00+515↓j
.text:00403F4E                 test    ebx, ebx
.text:00403F50                 jnz     short loc_403F59
.text:00403F52
.text:00403F52 loc_403F52:                             ; CODE XREF: sub_403B00+498↓j
.text:00403F52                                         ; sub_403B00+5E4↓j ...
.text:00403F52                 mov     eax, ebp
.text:00403F54                 jmp     loc_403BD0
.text:00403F59 ; ---------------------------------------------------------------------------
.text:00403F59
.text:00403F59 loc_403F59:                             ; CODE XREF: sub_403B00+450↑j
.text:00403F59                 lea     ecx, [ebp+50h]
.text:00403F5C                 mov     edx, [ecx+10h]
.text:00403F5F                 mov     edi, [ecx+14h]
.text:00403F62                 mov     [esp+4Ch+var_3C], edx
.text:00403F66                 lea     edx, [esp+4Ch+var_3C]
.text:00403F6A                 mov     [esp+4Ch+var_38], edi
.text:00403F6E                 mov     esi, [ecx+8]
.text:00403F71                 mov     edi, [ecx+0Ch]
.text:00403F74                 mov     [esp+4Ch+Src], edx
.text:00403F78                 mov     [esp+4Ch+var_34], esi
.text:00403F7C                 mov     [esp+4Ch+var_30], edi
.text:00403F80                 mov     [esp+4Ch+Block], ebx
.text:00403F83                 call    sub_408160
.text:00403F88                 test    eax, eax
.text:00403F8A                 jz      loc_404181
.text:00403F90                 mov     [esp+4Ch+Block], eax ; Block
.text:00403F93                 call    free
.text:00403F98                 jmp     short loc_403F52
.text:00403F9A ; ---------------------------------------------------------------------------
.text:00403F9A
.text:00403F9A loc_403F9A:                             ; CODE XREF: sub_403B00+43F↑j
.text:00403F9A                 mov     [esp+4Ch+Block], eax ; void *
.text:00403F9D                 call    sub_404C00
.text:00403FA2                 mov     eax, [esp+4Ch+arg_0]
.text:00403FA6                 mov     dword ptr [eax+4], 0
.text:00403FAD                 jmp     short loc_403F41
.text:00403FAF ; ---------------------------------------------------------------------------
.text:00403FAF
.text:00403FAF loc_403FAF:                             ; CODE XREF: sub_403B00+434↑j
.text:00403FAF                 mov     esi, [ebp+20h]
.text:00403FB2                 mov     [esp+4Ch+Block], esi ; FileHandle
.text:00403FB5                 call    _close
.text:00403FBA                 jmp     loc_403F36
.text:00403FBF ; ---------------------------------------------------------------------------
.text:00403FBF
.text:00403FBF loc_403FBF:                             ; CODE XREF: sub_403B00+40C↑j
.text:00403FBF                                         ; sub_403B00+42A↑j
.text:00403FBF                 mov     eax, [esp+4Ch+arg_0]
.text:00403FC3                 mov     edx, [eax+4]
.text:00403FC6                 test    edx, edx
.text:00403FC8                 jz      short loc_403FDA
.text:00403FCA                 test    edi, 1000h
.text:00403FD0                 jnz     loc_40408C
.text:00403FD6
.text:00403FD6 loc_403FD6:                             ; CODE XREF: sub_403B00+5AA↓j
.text:00403FD6                 test    edx, edx
.text:00403FD8                 jnz     short loc_40402C
.text:00403FDA
.text:00403FDA loc_403FDA:                             ; CODE XREF: sub_403B00+4C8↑j
.text:00403FDA                 mov     [esp+4Ch+Src], 3
.text:00403FE2                 mov     esi, [esp+4Ch+arg_0]
.text:00403FE6                 mov     [esp+4Ch+Block], esi
.text:00403FE9                 call    sub_4042E0
.text:00403FEE                 mov     [esi+4], eax
.text:00403FF1                 test    eax, eax
.text:00403FF3                 mov     edx, eax
.text:00403FF5                 jnz     short loc_40401A
.text:00403FF7                 test    byte ptr [esi+2Dh], 20h
.text:00403FFB                 jnz     loc_403D50
.text:00404001                 mov     esi, [ebp+1Ch]
.text:00404004                 test    esi, esi
.text:00404006                 jz      short loc_40400E
.text:00404008                 mov     word ptr [ebp+44h], 7
.text:0040400E
.text:0040400E loc_40400E:                             ; CODE XREF: sub_403B00+506↑j
.text:0040400E                 mov     ecx, [esp+4Ch+arg_0]
.text:00404012                 mov     ebx, [ecx+30h]
.text:00404015                 jmp     loc_403F4E
.text:0040401A ; ---------------------------------------------------------------------------
.text:0040401A
.text:0040401A loc_40401A:                             ; CODE XREF: sub_403B00+4F5↑j
.text:0040401A                                         ; sub_403B00+556↓j ...
.text:0040401A                 mov     ebp, [esp+4Ch+arg_0]
.text:0040401E                 mov     esi, edx
.text:00404020                 mov     dword ptr [ebp+4], 0
.text:00404027                 jmp     loc_403B80
.text:0040402C ; ---------------------------------------------------------------------------
.text:0040402C
.text:0040402C loc_40402C:                             ; CODE XREF: sub_403B00+4D8↑j
.text:0040402C                 mov     esi, [ebp+14h]
.text:0040402F                 mov     [esp+4Ch+Src], ebp ; int
.text:00404033                 mov     ebx, [esp+4Ch+arg_0]
.text:00404037                 mov     [esp+4Ch+Size], 0FFFFFFFFh ; int
.text:0040403F                 mov     [esp+4Ch+FileName], esi ; FileName
.text:00404043                 mov     [esp+4Ch+Block], ebx ; int
.text:00404046                 call    sub_404D70
.text:0040404B                 test    eax, eax
.text:0040404D                 jnz     short loc_404058
.text:0040404F                 mov     eax, [esp+4Ch+arg_0]
.text:00404053                 mov     edx, [eax+4]
.text:00404056                 jmp     short loc_40401A
.text:00404058 ; ---------------------------------------------------------------------------
.text:00404058
.text:00404058 loc_404058:                             ; CODE XREF: sub_403B00+54D↑j
.text:00404058                 call    _errno
.text:0040405D                 movzx   ecx, word ptr [ebp+46h]
.text:00404061                 mov     edx, [eax]
.text:00404063                 or      ecx, 1
.text:00404066                 mov     [ebp+1Ch], edx
.text:00404069                 mov     [ebp+46h], cx
.text:0040406D                 mov     ebp, [esp+4Ch+arg_0]
.text:00404071                 mov     esi, [ebp+4]
.text:00404074                 test    esi, esi
.text:00404076                 mov     edx, esi
.text:00404078                 jz      short loc_40401A
.text:0040407A
.text:0040407A loc_40407A:                             ; CODE XREF: sub_403B00+588↓j
.text:0040407A                 mov     ebx, [esi+4]
.text:0040407D                 mov     edi, [ebx+14h]
.text:00404080                 mov     [esi+14h], edi
.text:00404083                 mov     esi, [esi+8]
.text:00404086                 test    esi, esi
.text:00404088                 jnz     short loc_40407A
.text:0040408A                 jmp     short loc_40401A
.text:0040408C ; ---------------------------------------------------------------------------
.text:0040408C
.text:0040408C loc_40408C:                             ; CODE XREF: sub_403B00+4D0↑j
.text:0040408C                 and     edi, 0FFFFEFFFh
.text:00404092                 mov     [eax+2Ch], edi
.text:00404095                 mov     [esp+4Ch+Block], edx ; void *
.text:00404098                 call    sub_404C00
.text:0040409D                 mov     edi, [esp+4Ch+arg_0]
.text:004040A1                 xor     edx, edx
.text:004040A3                 mov     dword ptr [edi+4], 0
.text:004040AA                 jmp     loc_403FD6
.text:004040AF ; ---------------------------------------------------------------------------
.text:004040AF
.text:004040AF loc_4040AF:                             ; CODE XREF: sub_403B00+3E↑j
.text:004040AF                 mov     edx, [ebp+44h]
.text:004040B2                 lea     ebx, [edx-0Ch]
.text:004040B5                 cmp     bx, 1
.text:004040B9                 ja      loc_403B47
.text:004040BF                 mov     [esp+4Ch+Size], 1
.text:004040C7                 mov     eax, [esp+4Ch+arg_0]
.text:004040CB                 mov     [esp+4Ch+Src], ebp
.text:004040CF                 mov     [esp+4Ch+Block], eax
.text:004040D2                 call    sub_404940
.text:004040D7                 mov     [ebp+44h], ax
.text:004040DB                 dec     ax
.text:004040DD                 jz      short loc_4040FF
.text:004040DF
.text:004040DF loc_4040DF:                             ; CODE XREF: sub_403B00+607↓j
.text:004040DF                                         ; sub_403B00+633↓j ...
.text:004040DF                 cmp     word ptr [ebp+44h], 1
.text:004040E4                 jnz     loc_403F52
.text:004040EA                 mov     [esp+4Ch+Src], ebp ; int
.text:004040EE                 mov     ebx, [esp+4Ch+arg_0]
.text:004040F2                 mov     [esp+4Ch+Block], ebx ; Block
.text:004040F5                 call    sub_404F90
.text:004040FA                 jmp     loc_403F52
.text:004040FF ; ---------------------------------------------------------------------------
.text:004040FF
.text:004040FF loc_4040FF:                             ; CODE XREF: sub_403B00+5DD↑j
.text:004040FF                 mov     edx, [esp+4Ch+arg_0]
.text:00404103                 test    byte ptr [edx+2Ch], 4
.text:00404107                 jnz     short loc_4040DF
.text:00404109                 mov     [esp+4Ch+Src], 0 ; OpenFlag
.text:00404111                 mov     [esp+4Ch+Block], (offset loc_4036E0+1) ; FileName
.text:00404118                 call    _open
.text:0040411D                 test    eax, eax
.text:0040411F                 js      short loc_404147
.text:00404121
.text:00404121 loc_404121:                             ; CODE XREF: sub_403B00+65B↓j
.text:00404121                 mov     [esi+20h], eax
.text:00404124                 test    eax, eax
.text:00404126                 js      short loc_404135
.text:00404128                 movzx   edi, word ptr [esi+46h]
.text:0040412C                 or      edi, 2
.text:0040412F                 mov     [esi+46h], di
.text:00404133                 jmp     short loc_4040DF
.text:00404135 ; ---------------------------------------------------------------------------
.text:00404135
.text:00404135 loc_404135:                             ; CODE XREF: sub_403B00+626↑j
.text:00404135                 call    _errno
.text:0040413A                 mov     word ptr [esi+44h], 7
.text:00404140                 mov     ecx, [eax]
.text:00404142                 mov     [esi+1Ch], ecx
.text:00404145                 jmp     short loc_4040DF
.text:00404147 ; ---------------------------------------------------------------------------
.text:00404147
.text:00404147 loc_404147:                             ; CODE XREF: sub_403B00+61F↑j
.text:00404147                 mov     [esp+4Ch+Src], 1 ; OpenFlag
.text:0040414F                 mov     [esp+4Ch+Block], (offset loc_4036E0+1) ; FileName
.text:00404156                 call    _open
.text:0040415B                 jmp     short loc_404121
.text:0040415B ; ---------------------------------------------------------------------------
.text:0040415D                 align 10h
.text:00404160
.text:00404160 loc_404160:                             ; CODE XREF: sub_403B00+34↑j
.text:00404160                 mov     [esp+4Ch+Size], 0
.text:00404168                 mov     eax, [esp+4Ch+arg_0]
.text:0040416C                 mov     [esp+4Ch+Src], ebp
.text:00404170                 mov     [esp+4Ch+Block], eax
.text:00404173                 call    sub_404940
.text:00404178                 mov     [ebp+44h], ax
.text:0040417C                 jmp     loc_403BC5
.text:00404181 ; ---------------------------------------------------------------------------
.text:00404181
.text:00404181 loc_404181:                             ; CODE XREF: sub_403B00+2F7↑j
.text:00404181                                         ; sub_403B00+48A↑j
.text:00404181                 call    abort
.text:00404181 sub_403B00      endp
.text:00404181
.text:00404181 ; ---------------------------------------------------------------------------
.text:00404186                 align 10h
.text:00404190                 sub     esp, 1Ch
.text:00404193                 mov     [esp+10h], ebx
.text:00404197                 mov     ebx, [esp+24h]
.text:0040419B                 mov     [esp+18h], edi
.text:0040419F                 mov     edi, [esp+20h]
.text:004041A3                 test    ebx, ebx
.text:004041A5                 mov     [esp+14h], esi
.text:004041A9                 jz      short loc_4041B7
.text:004041AB                 cmp     ebx, 1000h
.text:004041B1                 jnz     loc_4042CD
.text:004041B7
.text:004041B7 loc_4041B7:                             ; CODE XREF: .text:004041A9↑j
.text:004041B7                 mov     esi, [edi]
.text:004041B9                 call    _errno
.text:004041BE                 mov     dword ptr [eax], 0
.text:004041C4                 test    byte ptr [edi+2Dh], 20h
.text:004041C8                 jnz     loc_404280
.text:004041CE                 movzx   edx, word ptr [esi+44h]
.text:004041D2                 cmp     dx, 9
.text:004041D6                 jz      loc_4042C5
.text:004041DC                 xor     eax, eax
.text:004041DE                 dec     dx
.text:004041E0                 jnz     short loc_404222
.text:004041E2                 mov     eax, [edi+4]
.text:004041E5                 test    eax, eax
.text:004041E7                 jnz     loc_4042B8
.text:004041ED
.text:004041ED loc_4041ED:                             ; CODE XREF: .text:004042C0↓j
.text:004041ED                 cmp     ebx, 1000h
.text:004041F3                 jz      loc_4042A7
.text:004041F9                 mov     ebx, 1
.text:004041FE
.text:004041FE loc_4041FE:                             ; CODE XREF: .text:004042B3↓j
.text:004041FE                 mov     edx, [esi+3Ch]
.text:00404201                 test    edx, edx
.text:00404203                 jnz     short loc_404213
.text:00404205                 mov     edx, [esi+14h]
.text:00404208                 cmp     byte ptr [edx], 2Fh ; '/'
.text:0040420B                 jz      short loc_404213
.text:0040420D                 test    byte ptr [edi+2Ch], 4
.text:00404211                 jz      short loc_404232
.text:00404213
.text:00404213 loc_404213:                             ; CODE XREF: .text:00404203↑j
.text:00404213                                         ; .text:0040420B↑j
.text:00404213                 mov     [esp+4], ebx
.text:00404217                 mov     [esp], edi
.text:0040421A                 call    sub_4042E0
.text:0040421F                 mov     [edi+4], eax
.text:00404222
.text:00404222 loc_404222:                             ; CODE XREF: .text:004041E0↑j
.text:00404222                                         ; .text:00404272↓j ...
.text:00404222                 mov     ebx, [esp+10h]
.text:00404226                 mov     esi, [esp+14h]
.text:0040422A                 mov     edi, [esp+18h]
.text:0040422E                 add     esp, 1Ch
.text:00404231                 retn
.text:00404232 ; ---------------------------------------------------------------------------
.text:00404232
.text:00404232 loc_404232:                             ; CODE XREF: .text:00404211↑j
.text:00404232                 mov     dword ptr [esp+4], 0
.text:0040423A                 mov     dword ptr [esp], 4036E1h
.text:00404241                 call    _open
.text:00404246                 test    eax, eax
.text:00404248                 mov     esi, eax
.text:0040424A                 js      short loc_404284
.text:0040424C
.text:0040424C loc_40424C:                             ; CODE XREF: .text:0040429C↓j
.text:0040424C                 mov     [esp+4], ebx
.text:00404250                 mov     [esp], edi
.text:00404253                 call    sub_4042E0
.text:00404258                 mov     [edi+4], eax
.text:0040425B                 mov     [esp], esi
.text:0040425E                 call    sub_40ACA0
.text:00404263                 test    eax, eax
.text:00404265                 jnz     short loc_404274
.text:00404267                 mov     [esp], esi
.text:0040426A                 call    _close
.text:0040426F                 mov     eax, [edi+4]
.text:00404272                 jmp     short loc_404222
.text:00404274 ; ---------------------------------------------------------------------------
.text:00404274
.text:00404274 loc_404274:                             ; CODE XREF: .text:00404265↑j
.text:00404274                 mov     [esp], esi
.text:00404277                 call    _close
.text:0040427C                 lea     esi, [esi+0]
.text:00404280
.text:00404280 loc_404280:                             ; CODE XREF: .text:004041C8↑j
.text:00404280                                         ; .text:004042A5↓j ...
.text:00404280                 xor     eax, eax
.text:00404282                 jmp     short loc_404222
.text:00404284 ; ---------------------------------------------------------------------------
.text:00404284
.text:00404284 loc_404284:                             ; CODE XREF: .text:0040424A↑j
.text:00404284                 mov     dword ptr [esp+4], 1
.text:0040428C                 mov     dword ptr [esp], 4036E1h
.text:00404293                 call    _open
.text:00404298                 test    eax, eax
.text:0040429A                 mov     esi, eax
.text:0040429C                 jns     short loc_40424C
.text:0040429E                 mov     dword ptr [edi+4], 0
.text:004042A5                 jmp     short loc_404280
.text:004042A7 ; ---------------------------------------------------------------------------
.text:004042A7
.text:004042A7 loc_4042A7:                             ; CODE XREF: .text:004041F3↑j
.text:004042A7                 or      dword ptr [edi+2Ch], 1000h
.text:004042AE                 mov     ebx, 2
.text:004042B3                 jmp     loc_4041FE
.text:004042B8 ; ---------------------------------------------------------------------------
.text:004042B8
.text:004042B8 loc_4042B8:                             ; CODE XREF: .text:004041E7↑j
.text:004042B8                 mov     [esp], eax
.text:004042BB                 call    sub_404C00
.text:004042C0                 jmp     loc_4041ED
.text:004042C5 ; ---------------------------------------------------------------------------
.text:004042C5
.text:004042C5 loc_4042C5:                             ; CODE XREF: .text:004041D6↑j
.text:004042C5                 mov     eax, [esi+8]
.text:004042C8                 jmp     loc_404222
.text:004042CD ; ---------------------------------------------------------------------------
.text:004042CD
.text:004042CD loc_4042CD:                             ; CODE XREF: .text:004041B1↑j
.text:004042CD                 call    _errno
.text:004042D2                 mov     dword ptr [eax], 16h
.text:004042D8                 jmp     short loc_404280
.text:004042D8 ; ---------------------------------------------------------------------------
.text:004042DA                 align 10h
.text:004042E0
.text:004042E0 ; =============== S U B R O U T I N E =======================================
.text:004042E0
.text:004042E0
.text:004042E0 sub_4042E0      proc near               ; CODE XREF: sub_403B00+4E9↑p
.text:004042E0                                         ; .text:0040421A↑p ...
.text:004042E0
.text:004042E0 Block           = dword ptr -5Ch
.text:004042E0 Src             = dword ptr -58h
.text:004042E0 Size            = dword ptr -54h
.text:004042E0 FileName        = dword ptr -50h
.text:004042E0 var_48          = dword ptr -48h
.text:004042E0 var_44          = dword ptr -44h
.text:004042E0 var_40          = dword ptr -40h
.text:004042E0 var_39          = byte ptr -39h
.text:004042E0 var_38          = dword ptr -38h
.text:004042E0 var_34          = dword ptr -34h
.text:004042E0 var_2E          = byte ptr -2Eh
.text:004042E0 var_2D          = byte ptr -2Dh
.text:004042E0 var_2C          = dword ptr -2Ch
.text:004042E0 var_28          = dword ptr -28h
.text:004042E0 var_24          = dword ptr -24h
.text:004042E0 var_20          = dword ptr -20h
.text:004042E0 var_1C          = dword ptr -1Ch
.text:004042E0 var_18          = dword ptr -18h
.text:004042E0 var_14          = dword ptr -14h
.text:004042E0 arg_0           = dword ptr  4
.text:004042E0 arg_4           = dword ptr  8
.text:004042E0
.text:004042E0                 push    ebp
.text:004042E1                 push    edi
.text:004042E2                 push    esi
.text:004042E3                 push    ebx
.text:004042E4                 sub     esp, 4Ch
.text:004042E7                 mov     ebp, [esp+5Ch+arg_0]
.text:004042EB                 mov     edx, [ebp+0]
.text:004042EE                 mov     ecx, [edx+14h]
.text:004042F1                 mov     [esp+5Ch+var_1C], edx
.text:004042F5                 mov     [esp+5Ch+Block], ecx ; LPCSTR
.text:004042F8                 call    sub_412750
.text:004042FD                 mov     [esp+5Ch+var_24], eax
.text:00404301                 test    eax, eax
.text:00404303                 jz      loc_404915
.text:00404309                 cmp     [esp+5Ch+arg_4], 2
.text:0040430E                 jz      loc_404908
.text:00404314                 mov     edx, [ebp+2Ch]
.text:00404317                 mov     ebx, edx
.text:00404319                 and     ebx, 18h
.text:0040431C                 cmp     ebx, 18h
.text:0040431F                 jz      loc_4048E7
.text:00404325                 mov     [esp+5Ch+var_38], 0FFFFFFFFh
.text:0040432D
.text:0040432D loc_40432D:                             ; CODE XREF: sub_4042E0+630↓j
.text:0040432D                 mov     [esp+5Ch+var_39], 0
.text:00404332
.text:00404332 loc_404332:                             ; CODE XREF: sub_4042E0+623↓j
.text:00404332                 mov     [esp+5Ch+var_2C], 0
.text:0040433A                 mov     eax, [esp+5Ch+var_38]
.text:0040433E                 test    eax, eax
.text:00404340                 jnz     loc_404861
.text:00404346                 cmp     [esp+5Ch+arg_4], 3
.text:0040434B                 mov     [esp+5Ch+var_2D], 0
.text:00404350                 jz      loc_404861
.text:00404356
.text:00404356 loc_404356:                             ; CODE XREF: sub_4042E0+5AA↓j
.text:00404356                                         ; sub_4042E0+5F2↓j
.text:00404356                 mov     ecx, [esp+5Ch+var_1C]
.text:0040435A                 mov     eax, [esp+5Ch+var_1C]
.text:0040435E                 mov     edi, [ecx+24h]
.text:00404361                 mov     esi, [eax+18h]
.text:00404364                 mov     [esp+5Ch+var_40], edi
.text:00404368                 mov     edx, [esp+5Ch+var_40]
.text:0040436C                 cmp     byte ptr [edx+esi-1], 2Fh ; '/'
.text:00404371                 jz      loc_404857
.text:00404377
.text:00404377 loc_404377:                             ; CODE XREF: sub_4042E0+57C↓j
.text:00404377                 test    byte ptr [ebp+2Ch], 4
.text:0040437B                 jz      loc_40484A
.text:00404381                 mov     edx, [esp+5Ch+var_40]
.text:00404385                 mov     ebx, [ebp+18h]
.text:00404388                 add     edx, ebx
.text:0040438A                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040438D                 inc     edx
.text:0040438E                 mov     [esp+5Ch+var_48], edx
.text:00404392
.text:00404392 loc_404392:                             ; CODE XREF: sub_4042E0+572↓j
.text:00404392                 inc     [esp+5Ch+var_40]
.text:00404396                 mov     eax, [esp+5Ch+var_1C]
.text:0040439A                 mov     [esp+5Ch+var_2E], 0
.text:0040439F                 mov     edi, [ebp+20h]
.text:004043A2                 mov     ecx, [esp+5Ch+var_40]
.text:004043A6                 mov     [esp+5Ch+var_20], 0
.text:004043AE                 mov     esi, [eax+3Ch]
.text:004043B1                 mov     [esp+5Ch+var_14], 0
.text:004043B9                 sub     edi, ecx
.text:004043BB                 inc     esi
.text:004043BC                 mov     [esp+5Ch+var_44], edi
.text:004043C0                 mov     [esp+5Ch+var_34], esi
.text:004043C4                 mov     [esp+5Ch+var_18], 0
.text:004043CC                 lea     esi, [esi+0]
.text:004043D0
.text:004043D0 loc_4043D0:                             ; CODE XREF: sub_4042E0+2D1↓j
.text:004043D0                                         ; sub_4042E0+430↓j ...
.text:004043D0                 mov     esi, [esp+5Ch+var_24]
.text:004043D4                 test    esi, esi
.text:004043D6                 jz      loc_40473C
.text:004043DC                 mov     edi, [esp+5Ch+var_24]
.text:004043E0                 mov     [esp+5Ch+Block], edi
.text:004043E3                 call    sub_4113D0
.text:004043E8                 test    eax, eax
.text:004043EA                 mov     edi, eax
.text:004043EC                 jz      loc_404730
.text:004043F2                 test    byte ptr [ebp+2Ch], 20h
.text:004043F6                 jnz     short loc_404402
.text:004043F8                 cmp     byte ptr [edi+0Ch], 2Eh ; '.'
.text:004043FC                 jz      loc_40470C
.text:00404402
.text:00404402 loc_404402:                             ; CODE XREF: sub_4042E0+116↑j
.text:00404402                                         ; sub_4042E0+445↓j
.text:00404402                 lea     ebx, [edi+0Ch]
.text:00404405                 mov     ecx, ebx
.text:00404407                 mov     esi, ebx
.text:00404409                 lea     esi, [esi+0]
.text:00404410
.text:00404410 loc_404410:                             ; CODE XREF: sub_4042E0+145↓j
.text:00404410                 mov     eax, [ecx]
.text:00404412                 add     ecx, 4
.text:00404415                 lea     edx, [eax-1010101h]
.text:0040441B                 not     eax
.text:0040441D                 and     edx, eax
.text:0040441F                 and     edx, 80808080h
.text:00404425                 jz      short loc_404410
.text:00404427                 test    edx, 8080h
.text:0040442D                 jnz     short loc_404435
.text:0040442F                 shr     edx, 10h
.text:00404432                 add     ecx, 2
.text:00404435
.text:00404435 loc_404435:                             ; CODE XREF: sub_4042E0+14D↑j
.text:00404435                 mov     [esp+5Ch+Src], ebx ; void *
.text:00404439                 add     dl, dl
.text:0040443B                 sbb     ecx, 3
.text:0040443E                 sub     ecx, esi
.text:00404440                 mov     [esp+5Ch+Size], ecx ; size_t
.text:00404444                 mov     [esp+5Ch+Block], ebp ; int
.text:00404447                 call    sub_404B70
.text:0040444C                 test    eax, eax
.text:0040444E                 mov     esi, eax
.text:00404450                 jz      loc_4046C7
.text:00404456                 mov     ecx, ebx
.text:00404458                 nop
.text:00404459                 lea     esi, [esi+0]
.text:00404460
.text:00404460 loc_404460:                             ; CODE XREF: sub_4042E0+195↓j
.text:00404460                 mov     eax, [ecx]
.text:00404462                 add     ecx, 4
.text:00404465                 lea     edx, [eax-1010101h]
.text:0040446B                 not     eax
.text:0040446D                 and     edx, eax
.text:0040446F                 and     edx, 80808080h
.text:00404475                 jz      short loc_404460
.text:00404477                 test    edx, 8080h
.text:0040447D                 jnz     short loc_404485
.text:0040447F                 shr     edx, 10h
.text:00404482                 add     ecx, 2
.text:00404485
.text:00404485 loc_404485:                             ; CODE XREF: sub_4042E0+19D↑j
.text:00404485                 add     dl, dl
.text:00404487                 sbb     ecx, 3
.text:0040448A                 sub     ecx, ebx
.text:0040448C                 cmp     ecx, [esp+5Ch+var_44]
.text:00404490                 jb      loc_404513
.text:00404496                 mov     eax, [ebp+18h]
.text:00404499                 mov     ecx, ebx
.text:0040449B                 mov     [esp+5Ch+var_28], eax
.text:0040449F                 nop
.text:004044A0
.text:004044A0 loc_4044A0:                             ; CODE XREF: sub_4042E0+1D5↓j
.text:004044A0                 mov     eax, [ecx]
.text:004044A2                 add     ecx, 4
.text:004044A5                 lea     edx, [eax-1010101h]
.text:004044AB                 not     eax
.text:004044AD                 and     edx, eax
.text:004044AF                 and     edx, 80808080h
.text:004044B5                 jz      short loc_4044A0
.text:004044B7                 test    edx, 8080h
.text:004044BD                 jnz     short loc_4044C5
.text:004044BF                 shr     edx, 10h
.text:004044C2                 add     ecx, 2
.text:004044C5
.text:004044C5 loc_4044C5:                             ; CODE XREF: sub_4042E0+1DD↑j
.text:004044C5                 mov     [esp+5Ch+Block], ebp
.text:004044C8                 add     dl, dl
.text:004044CA                 mov     edx, [esp+5Ch+var_40]
.text:004044CE                 sbb     ecx, 3
.text:004044D1                 sub     ecx, ebx
.text:004044D3                 lea     eax, [edx+ecx+1]
.text:004044D7                 mov     [esp+5Ch+Src], eax
.text:004044DB                 call    sub_404C30
.text:004044E0                 test    al, al
.text:004044E2                 jz      loc_4046C7
.text:004044E8                 mov     eax, [ebp+18h]
.text:004044EB                 cmp     [esp+5Ch+var_28], eax
.text:004044EF                 jz      short loc_404506
.text:004044F1                 test    byte ptr [ebp+2Ch], 4
.text:004044F5                 mov     [esp+5Ch+var_2E], 1
.text:004044FA                 jz      short loc_404506
.text:004044FC                 mov     ecx, [esp+5Ch+var_40]
.text:00404500                 add     eax, ecx
.text:00404502                 mov     [esp+5Ch+var_48], eax
.text:00404506
.text:00404506 loc_404506:                             ; CODE XREF: sub_4042E0+20F↑j
.text:00404506                                         ; sub_4042E0+21A↑j
.text:00404506                 mov     ecx, [ebp+20h]
.text:00404509                 mov     edx, [esp+5Ch+var_40]
.text:0040450D                 sub     ecx, edx
.text:0040450F                 mov     [esp+5Ch+var_44], ecx
.text:00404513
.text:00404513 loc_404513:                             ; CODE XREF: sub_4042E0+1B0↑j
.text:00404513                 mov     ecx, ebx
.text:00404515                 lea     esi, [esi+0]
.text:00404519                 lea     edi, [edi+0]
.text:00404520
.text:00404520 loc_404520:                             ; CODE XREF: sub_4042E0+255↓j
.text:00404520                 mov     eax, [ecx]
.text:00404522                 add     ecx, 4
.text:00404525                 lea     edx, [eax-1010101h]
.text:0040452B                 not     eax
.text:0040452D                 and     edx, eax
.text:0040452F                 and     edx, 80808080h
.text:00404535                 jz      short loc_404520
.text:00404537                 test    edx, 8080h
.text:0040453D                 jnz     short loc_404545
.text:0040453F                 shr     edx, 10h
.text:00404542                 add     ecx, 2
.text:00404545
.text:00404545 loc_404545:                             ; CODE XREF: sub_4042E0+25D↑j
.text:00404545                 add     dl, dl
.text:00404547                 mov     edx, [esp+5Ch+var_40]
.text:0040454B                 sbb     ecx, 3
.text:0040454E                 sub     ecx, ebx
.text:00404550                 add     edx, ecx
.text:00404552                 cmp     edx, [esp+5Ch+var_40]
.text:00404556                 jb      loc_404681
.text:0040455C                 mov     [esi+24h], edx
.text:0040455F                 mov     ebx, [esp+5Ch+var_34]
.text:00404563                 mov     ecx, [ebp+0]
.text:00404566                 mov     [esi+3Ch], ebx
.text:00404569                 mov     ebx, [esp+5Ch+var_2C]
.text:0040456D                 mov     [esi+4], ecx
.text:00404570                 test    ebx, ebx
.text:00404572                 jz      short loc_4045C8
.text:00404574                 mov     edi, [esp+5Ch+var_38]
.text:00404578                 test    edi, edi
.text:0040457A                 jz      short loc_4045C0
.text:0040457C                 mov     word ptr [esi+44h], 0Ah
.text:00404582                 mov     eax, [esp+5Ch+var_2C]
.text:00404586                 mov     [esi+1Ch], eax
.text:00404589
.text:00404589 loc_404589:                             ; CODE XREF: sub_4042E0+2E6↓j
.text:00404589                 mov     ebx, [esp+5Ch+var_1C]
.text:0040458D                 mov     ecx, [ebx+14h]
.text:00404590                 mov     [esi+14h], ecx
.text:00404593
.text:00404593 loc_404593:                             ; CODE XREF: sub_4042E0+315↓j
.text:00404593                                         ; sub_4042E0+34E↓j ...
.text:00404593                 mov     dword ptr [esi+8], 0
.text:0040459A                 mov     edx, [esp+5Ch+var_14]
.text:0040459E                 test    edx, edx
.text:004045A0                 jz      short loc_4045B6
.text:004045A2                 mov     eax, [esp+5Ch+var_20]
.text:004045A6                 mov     [esp+5Ch+var_20], esi
.text:004045AA                 mov     [eax+8], esi
.text:004045AD
.text:004045AD loc_4045AD:                             ; CODE XREF: sub_4042E0+2DE↓j
.text:004045AD                 inc     [esp+5Ch+var_18]
.text:004045B1                 jmp     loc_4043D0
.text:004045B6 ; ---------------------------------------------------------------------------
.text:004045B6
.text:004045B6 loc_4045B6:                             ; CODE XREF: sub_4042E0+2C0↑j
.text:004045B6                 mov     [esp+5Ch+var_20], esi
.text:004045BA                 mov     [esp+5Ch+var_14], esi
.text:004045BE                 jmp     short loc_4045AD
.text:004045C0 ; ---------------------------------------------------------------------------
.text:004045C0
.text:004045C0 loc_4045C0:                             ; CODE XREF: sub_4042E0+29A↑j
.text:004045C0                 mov     word ptr [esi+44h], 0Bh
.text:004045C6                 jmp     short loc_404589
.text:004045C8 ; ---------------------------------------------------------------------------
.text:004045C8
.text:004045C8 loc_4045C8:                             ; CODE XREF: sub_4042E0+292↑j
.text:004045C8                 mov     edx, [esp+5Ch+var_38]
.text:004045CC                 test    edx, edx
.text:004045CE                 jz      short loc_4045E3
.text:004045D0                 cmp     [esp+5Ch+var_39], 0
.text:004045D5                 jz      short loc_4045FF
.text:004045D7                 movzx   eax, byte ptr [edi+0Ah]
.text:004045DB                 cmp     al, 4
.text:004045DD                 jz      short loc_4045FF
.text:004045DF                 test    al, al
.text:004045E1                 jz      short loc_4045FF
.text:004045E3
.text:004045E3 loc_4045E3:                             ; CODE XREF: sub_4042E0+2EE↑j
.text:004045E3                 test    byte ptr [ebp+2Ch], 4
.text:004045E7                 jz      short loc_4045F7
.text:004045E9                 mov     eax, [esi+18h]
.text:004045EC
.text:004045EC loc_4045EC:                             ; CODE XREF: sub_4042E0+31D↓j
.text:004045EC                 mov     [esi+14h], eax
.text:004045EF                 mov     word ptr [esi+44h], 0Bh
.text:004045F5                 jmp     short loc_404593
.text:004045F7 ; ---------------------------------------------------------------------------
.text:004045F7
.text:004045F7 loc_4045F7:                             ; CODE XREF: sub_4042E0+307↑j
.text:004045F7                 lea     eax, [esi+0B8h]
.text:004045FD                 jmp     short loc_4045EC
.text:004045FF ; ---------------------------------------------------------------------------
.text:004045FF
.text:004045FF loc_4045FF:                             ; CODE XREF: sub_4042E0+2F5↑j
.text:004045FF                                         ; sub_4042E0+2FD↑j ...
.text:004045FF                 test    byte ptr [ebp+2Ch], 4
.text:00404603                 jnz     short loc_40465B
.text:00404605                 lea     edi, [esi+0B8h]
.text:0040460B                 mov     [esi+14h], edi
.text:0040460E
.text:0040460E loc_40460E:                             ; CODE XREF: sub_4042E0+39F↓j
.text:0040460E                 mov     [esp+5Ch+Size], 0
.text:00404616                 mov     [esp+5Ch+Src], esi
.text:0040461A                 mov     [esp+5Ch+Block], ebp
.text:0040461D                 call    sub_404940
.text:00404622                 mov     [esi+44h], ax
.text:00404626                 mov     ecx, [esp+5Ch+var_38]
.text:0040462A                 mov     edx, eax
.text:0040462C                 test    ecx, ecx
.text:0040462E                 jz      loc_404593
.text:00404634                 cmp     [esp+5Ch+var_39], 0
.text:00404639                 jz      loc_404593
.text:0040463F                 lea     ebx, [edx-1]
.text:00404642                 cmp     bx, 1
.text:00404646                 jbe     short loc_404652
.text:00404648                 cmp     ax, 5
.text:0040464C                 jnz     loc_404593
.text:00404652
.text:00404652 loc_404652:                             ; CODE XREF: sub_4042E0+366↑j
.text:00404652                 dec     [esp+5Ch+var_38]
.text:00404656                 jmp     loc_404593
.text:0040465B ; ---------------------------------------------------------------------------
.text:0040465B
.text:0040465B loc_40465B:                             ; CODE XREF: sub_4042E0+323↑j
.text:0040465B                 mov     edx, [esi+18h]
.text:0040465E                 lea     ecx, [esi+0B8h]
.text:00404664                 mov     ebx, [esi+40h]
.text:00404667                 mov     edi, [esp+5Ch+var_48]
.text:0040466B                 mov     [esi+14h], edx
.text:0040466E                 inc     ebx
.text:0040466F                 mov     [esp+5Ch+Size], ebx ; Size
.text:00404673                 mov     [esp+5Ch+Src], ecx ; Src
.text:00404677                 mov     [esp+5Ch+Block], edi ; void *
.text:0040467A                 call    memmove
.text:0040467F                 jmp     short loc_40460E
.text:00404681 ; ---------------------------------------------------------------------------
.text:00404681
.text:00404681 loc_404681:                             ; CODE XREF: sub_4042E0+276↑j
.text:00404681                 mov     [esp+5Ch+Block], esi ; Block
.text:00404684                 call    free
.text:00404689                 mov     edx, [esp+5Ch+var_14]
.text:0040468D                 mov     [esp+5Ch+Block], edx ; void *
.text:00404690                 call    sub_404C00
.text:00404695                 mov     esi, [esp+5Ch+var_24]
.text:00404699                 mov     [esp+5Ch+Block], esi ; void *
.text:0040469C                 call    sub_4126E0
.text:004046A1                 or      dword ptr [ebp+2Ch], 2000h
.text:004046A8                 mov     ecx, [esp+5Ch+var_1C]
.text:004046AC                 mov     word ptr [ecx+44h], 7
.text:004046B2                 call    _errno
.text:004046B7                 mov     dword ptr [eax], 26h ; '&'
.text:004046BD
.text:004046BD loc_4046BD:                             ; CODE XREF: sub_4042E0+42A↓j
.text:004046BD                                         ; sub_4042E0+4F6↓j ...
.text:004046BD                 xor     eax, eax
.text:004046BF
.text:004046BF loc_4046BF:                             ; CODE XREF: sub_4042E0+4CE↓j
.text:004046BF                 add     esp, 4Ch
.text:004046C2                 pop     ebx
.text:004046C3                 pop     esi
.text:004046C4                 pop     edi
.text:004046C5                 pop     ebp
.text:004046C6                 retn
.text:004046C7 ; ---------------------------------------------------------------------------
.text:004046C7
.text:004046C7 loc_4046C7:                             ; CODE XREF: sub_4042E0+170↑j
.text:004046C7                                         ; sub_4042E0+202↑j
.text:004046C7                 call    _errno
.text:004046CC                 test    esi, esi
.text:004046CE                 mov     ebx, [eax]
.text:004046D0                 jz      short loc_4046DA
.text:004046D2                 mov     [esp+5Ch+Block], esi ; Block
.text:004046D5                 call    free
.text:004046DA
.text:004046DA loc_4046DA:                             ; CODE XREF: sub_4042E0+3F0↑j
.text:004046DA                 mov     ecx, [esp+5Ch+var_14]
.text:004046DE                 mov     [esp+5Ch+Block], ecx ; void *
.text:004046E1                 call    sub_404C00
.text:004046E6                 mov     edi, [esp+5Ch+var_24]
.text:004046EA                 mov     [esp+5Ch+Block], edi ; void *
.text:004046ED                 call    sub_4126E0
.text:004046F2                 or      dword ptr [ebp+2Ch], 2000h
.text:004046F9                 mov     esi, [esp+5Ch+var_1C]
.text:004046FD                 mov     word ptr [esi+44h], 7
.text:00404703                 call    _errno
.text:00404708                 mov     [eax], ebx
.text:0040470A                 jmp     short loc_4046BD
.text:0040470C ; ---------------------------------------------------------------------------
.text:0040470C
.text:0040470C loc_40470C:                             ; CODE XREF: sub_4042E0+11C↑j
.text:0040470C                 cmp     byte ptr [edi+0Dh], 0
.text:00404710                 jz      loc_4043D0
.text:00404716                 mov     edx, [edi+0Ch]
.text:00404719                 and     edx, 0FFFF00h
.text:0040471F                 cmp     edx, 2E00h
.text:00404725                 jnz     loc_404402
.text:0040472B                 jmp     loc_4043D0
.text:00404730 ; ---------------------------------------------------------------------------
.text:00404730
.text:00404730 loc_404730:                             ; CODE XREF: sub_4042E0+10C↑j
.text:00404730                 mov     ecx, [esp+5Ch+var_24]
.text:00404734                 mov     [esp+5Ch+Block], ecx ; void *
.text:00404737                 call    sub_4126E0
.text:0040473C
.text:0040473C loc_40473C:                             ; CODE XREF: sub_4042E0+F6↑j
.text:0040473C                 cmp     [esp+5Ch+var_2E], 0
.text:00404741                 jnz     loc_404835
.text:00404747
.text:00404747 loc_404747:                             ; CODE XREF: sub_4042E0+565↓j
.text:00404747                 test    byte ptr [ebp+2Ch], 4
.text:0040474B                 jz      short loc_404769
.text:0040474D                 mov     eax, [esp+5Ch+var_40]
.text:00404751                 cmp     eax, [ebp+20h]
.text:00404754                 jz      short loc_40475E
.text:00404756                 mov     edx, [esp+5Ch+var_18]
.text:0040475A                 test    edx, edx
.text:0040475C                 jnz     short loc_404762
.text:0040475E
.text:0040475E loc_40475E:                             ; CODE XREF: sub_4042E0+474↑j
.text:0040475E                 dec     [esp+5Ch+var_48]
.text:00404762
.text:00404762 loc_404762:                             ; CODE XREF: sub_4042E0+47C↑j
.text:00404762                 mov     esi, [esp+5Ch+var_48]
.text:00404766                 mov     byte ptr [esi], 0
.text:00404769
.text:00404769 loc_404769:                             ; CODE XREF: sub_4042E0+46B↑j
.text:00404769                 cmp     [esp+5Ch+var_2D], 0
.text:0040476E                 jz      short loc_404794
.text:00404770                 cmp     [esp+5Ch+arg_4], 1
.text:00404775                 jz      short loc_40477F
.text:00404777                 mov     edi, [esp+5Ch+var_18]
.text:0040477B                 test    edi, edi
.text:0040477D                 jnz     short loc_40479C
.text:0040477F
.text:0040477F loc_40477F:                             ; CODE XREF: sub_4042E0+495↑j
.text:0040477F                 mov     ebx, [esp+5Ch+var_1C]
.text:00404783                 mov     ecx, [ebx+3Ch]
.text:00404786                 test    ecx, ecx
.text:00404788                 jnz     loc_404810
.text:0040478E                 test    byte ptr [ebp+2Ch], 4
.text:00404792                 jz      short loc_4047EB
.text:00404794
.text:00404794 loc_404794:                             ; CODE XREF: sub_4042E0+48E↑j
.text:00404794                                         ; sub_4042E0+518↓j
.text:00404794                 mov     ebx, [esp+5Ch+var_18]
.text:00404798                 test    ebx, ebx
.text:0040479A                 jz      short loc_4047D1
.text:0040479C
.text:0040479C loc_40479C:                             ; CODE XREF: sub_4042E0+49D↑j
.text:0040479C                 mov     eax, [ebp+28h]
.text:0040479F                 test    eax, eax
.text:004047A1                 jz      short loc_4047AA
.text:004047A3                 cmp     [esp+5Ch+var_18], 1
.text:004047A8                 ja      short loc_4047B3
.text:004047AA
.text:004047AA loc_4047AA:                             ; CODE XREF: sub_4042E0+4C1↑j
.text:004047AA                                         ; sub_4042E0+4EF↓j
.text:004047AA                 mov     eax, [esp+5Ch+var_14]
.text:004047AE                 jmp     loc_4046BF
.text:004047B3 ; ---------------------------------------------------------------------------
.text:004047B3
.text:004047B3 loc_4047B3:                             ; CODE XREF: sub_4042E0+4C8↑j
.text:004047B3                 mov     [esp+5Ch+Block], ebp ; int
.text:004047B6                 mov     ebx, [esp+5Ch+var_18]
.text:004047BA                 mov     edi, [esp+5Ch+var_14]
.text:004047BE                 mov     [esp+5Ch+Size], ebx ; void *
.text:004047C2                 mov     [esp+5Ch+Src], edi ; int
.text:004047C6                 call    sub_404A90
.text:004047CB                 mov     [esp+5Ch+var_14], eax
.text:004047CF                 jmp     short loc_4047AA
.text:004047D1 ; ---------------------------------------------------------------------------
.text:004047D1
.text:004047D1 loc_4047D1:                             ; CODE XREF: sub_4042E0+4BA↑j
.text:004047D1                 cmp     [esp+5Ch+arg_4], 3
.text:004047D6                 jnz     loc_4046BD
.text:004047DC                 mov     ebp, [esp+5Ch+var_1C]
.text:004047E0                 mov     word ptr [ebp+44h], 6
.text:004047E6                 jmp     loc_4046BD
.text:004047EB ; ---------------------------------------------------------------------------
.text:004047EB
.text:004047EB loc_4047EB:                             ; CODE XREF: sub_4042E0+4B2↑j
.text:004047EB                 mov     edx, [ebp+1Ch]
.text:004047EE                 mov     [esp+5Ch+Block], edx
.text:004047F1                 call    sub_40ACA0
.text:004047F6
.text:004047F6 loc_4047F6:                             ; CODE XREF: sub_4042E0+553↓j
.text:004047F6                 test    eax, eax
.text:004047F8                 jz      short loc_404794
.text:004047FA                 or      dword ptr [ebp+2Ch], 2000h
.text:00404801                 mov     edi, [esp+5Ch+var_1C]
.text:00404805                 mov     word ptr [edi+44h], 7
.text:0040480B                 jmp     loc_4046BD
.text:00404810 ; ---------------------------------------------------------------------------
.text:00404810
.text:00404810 loc_404810:                             ; CODE XREF: sub_4042E0+4A8↑j
.text:00404810                 mov     [esp+5Ch+FileName], offset byte_403AF3 ; FileName
.text:00404818                 mov     eax, [esp+5Ch+var_1C]
.text:0040481C                 mov     [esp+5Ch+Size], 0FFFFFFFFh ; int
.text:00404824                 mov     esi, [eax+4]
.text:00404827                 mov     [esp+5Ch+Block], ebp ; int
.text:0040482A                 mov     [esp+5Ch+Src], esi ; int
.text:0040482E                 call    sub_404D70
.text:00404833                 jmp     short loc_4047F6
.text:00404835 ; ---------------------------------------------------------------------------
.text:00404835
.text:00404835 loc_404835:                             ; CODE XREF: sub_4042E0+461↑j
.text:00404835                 mov     [esp+5Ch+Block], ebp
.text:00404838                 mov     ebx, [esp+5Ch+var_14]
.text:0040483C                 mov     [esp+5Ch+Src], ebx
.text:00404840                 call    sub_404CC0
.text:00404845                 jmp     loc_404747
.text:0040484A ; ---------------------------------------------------------------------------
.text:0040484A
.text:0040484A loc_40484A:                             ; CODE XREF: sub_4042E0+9B↑j
.text:0040484A                 mov     [esp+5Ch+var_48], 0
.text:00404852                 jmp     loc_404392
.text:00404857 ; ---------------------------------------------------------------------------
.text:00404857
.text:00404857 loc_404857:                             ; CODE XREF: sub_4042E0+91↑j
.text:00404857                 dec     edx
.text:00404858                 mov     [esp+5Ch+var_40], edx
.text:0040485C                 jmp     loc_404377
.text:00404861 ; ---------------------------------------------------------------------------
.text:00404861
.text:00404861 loc_404861:                             ; CODE XREF: sub_4042E0+60↑j
.text:00404861                                         ; sub_4042E0+70↑j
.text:00404861                 mov     [esp+5Ch+FileName], 0 ; FileName
.text:00404869                 mov     edi, [esp+5Ch+var_24]
.text:0040486D                 mov     edx, [esp+5Ch+var_1C]
.text:00404871                 mov     esi, [edi]
.text:00404873                 mov     [esp+5Ch+Src], edx ; int
.text:00404877                 mov     [esp+5Ch+Block], ebp ; int
.text:0040487A                 mov     [esp+5Ch+Size], esi ; int
.text:0040487E                 call    sub_404D70
.text:00404883                 mov     [esp+5Ch+var_2D], 1
.text:00404888                 test    eax, eax
.text:0040488A                 jz      loc_404356
.text:00404890                 mov     ecx, [esp+5Ch+var_38]
.text:00404894                 test    ecx, ecx
.text:00404896                 jz      short loc_40489F
.text:00404898                 cmp     [esp+5Ch+arg_4], 3
.text:0040489D                 jz      short loc_4048D7
.text:0040489F
.text:0040489F loc_40489F:                             ; CODE XREF: sub_4042E0+5B6↑j
.text:0040489F                                         ; sub_4042E0+605↓j
.text:0040489F                 mov     [esp+5Ch+var_2D], 0
.text:004048A4                 mov     ecx, [esp+5Ch+var_1C]
.text:004048A8                 movzx   ebx, word ptr [ecx+46h]
.text:004048AC                 or      ebx, 1
.text:004048AF                 mov     [ecx+46h], bx
.text:004048B3                 call    _errno
.text:004048B8                 mov     edi, [eax]
.text:004048BA                 mov     esi, [esp+5Ch+var_24]
.text:004048BE                 mov     [esp+5Ch+var_2C], edi
.text:004048C2                 mov     [esp+5Ch+Block], esi ; void *
.text:004048C5                 call    sub_4126E0
.text:004048CA                 mov     [esp+5Ch+var_24], 0
.text:004048D2                 jmp     loc_404356
.text:004048D7 ; ---------------------------------------------------------------------------
.text:004048D7
.text:004048D7 loc_4048D7:                             ; CODE XREF: sub_4042E0+5BD↑j
.text:004048D7                 call    _errno
.text:004048DC                 mov     edx, [eax]
.text:004048DE                 mov     ebx, [esp+5Ch+var_1C]
.text:004048E2                 mov     [ebx+1Ch], edx
.text:004048E5                 jmp     short loc_40489F
.text:004048E7 ; ---------------------------------------------------------------------------
.text:004048E7
.text:004048E7 loc_4048E7:                             ; CODE XREF: sub_4042E0+3F↑j
.text:004048E7                 mov     ecx, [esp+5Ch+var_1C]
.text:004048EB                 test    dl, 20h
.text:004048EE                 mov     eax, [ecx+38h]
.text:004048F1                 mov     [esp+5Ch+var_38], eax
.text:004048F5                 jnz     short loc_4048FE
.text:004048F7                 sub     eax, 2
.text:004048FA                 mov     [esp+5Ch+var_38], eax
.text:004048FE
.text:004048FE loc_4048FE:                             ; CODE XREF: sub_4042E0+615↑j
.text:004048FE                 mov     [esp+5Ch+var_39], 1
.text:00404903                 jmp     loc_404332
.text:00404908 ; ---------------------------------------------------------------------------
.text:00404908
.text:00404908 loc_404908:                             ; CODE XREF: sub_4042E0+2E↑j
.text:00404908                 mov     [esp+5Ch+var_38], 0
.text:00404910                 jmp     loc_40432D
.text:00404915 ; ---------------------------------------------------------------------------
.text:00404915
.text:00404915 loc_404915:                             ; CODE XREF: sub_4042E0+23↑j
.text:00404915                 cmp     [esp+5Ch+arg_4], 3
.text:0040491A                 jnz     loc_4046BD
.text:00404920                 mov     edi, [esp+5Ch+var_1C]
.text:00404924                 mov     word ptr [edi+44h], 4
.text:0040492A                 call    _errno
.text:0040492F                 mov     esi, [eax]
.text:00404931                 mov     ecx, [esp+5Ch+var_1C]
.text:00404935                 mov     [ecx+1Ch], esi
.text:00404938                 jmp     loc_4046BD
.text:00404938 sub_4042E0      endp
.text:00404938
.text:00404938 ; ---------------------------------------------------------------------------
.text:0040493D                 align 10h
.text:00404940
.text:00404940 ; =============== S U B R O U T I N E =======================================
.text:00404940
.text:00404940
.text:00404940 sub_404940      proc near               ; CODE XREF: sub_4036F0+27C↑p
.text:00404940                                         ; sub_403B00+100↑p ...
.text:00404940
.text:00404940 var_1C          = dword ptr -1Ch
.text:00404940 var_18          = dword ptr -18h
.text:00404940 var_C           = dword ptr -0Ch
.text:00404940 var_8           = dword ptr -8
.text:00404940 var_4           = dword ptr -4
.text:00404940 arg_0           = dword ptr  4
.text:00404940 arg_4           = dword ptr  8
.text:00404940 arg_8           = byte ptr  0Ch
.text:00404940
.text:00404940                 sub     esp, 1Ch
.text:00404943                 mov     ecx, [esp+1Ch+arg_0]
.text:00404947                 mov     [esp+1Ch+var_C], ebx
.text:0040494B                 mov     [esp+1Ch+var_4], edi
.text:0040494F                 mov     edi, [esp+1Ch+arg_4]
.text:00404953                 mov     [esp+1Ch+var_8], esi
.text:00404957                 test    byte ptr [ecx+2Ch], 2
.text:0040495B                 lea     ebx, [edi+50h]
.text:0040495E                 movzx   edx, [esp+1Ch+arg_8]
.text:00404963                 jnz     short loc_40496D
.text:00404965                 test    dl, dl
.text:00404967                 jz      loc_404A60
.text:0040496D
.text:0040496D loc_40496D:                             ; CODE XREF: sub_404940+23↑j
.text:0040496D                 mov     [esp+1Ch+var_18], ebx ; int
.text:00404971                 mov     edx, [edi+14h]
.text:00404974                 mov     [esp+1Ch+var_1C], edx ; char *
.text:00404977                 call    sub_411A00
.text:0040497C                 test    eax, eax
.text:0040497E                 jnz     loc_404A12
.text:00404984
.text:00404984 loc_404984:                             ; CODE XREF: sub_404940+131↓j
.text:00404984                 mov     edx, [ebx]
.text:00404986                 and     edx, 0F000h
.text:0040498C                 cmp     edx, 4000h
.text:00404992                 jz      short loc_4049C0
.text:00404994                 cmp     edx, 0A000h
.text:0040499A                 mov     eax, 0Ch
.text:0040499F                 jz      short loc_4049B0
.text:004049A1                 xor     ecx, ecx
.text:004049A3                 cmp     edx, 8000h
.text:004049A9                 setz    cl
.text:004049AC                 lea     eax, [ecx+ecx*4+3]
.text:004049B0
.text:004049B0 loc_4049B0:                             ; CODE XREF: sub_404940+5F↑j
.text:004049B0                                         ; sub_404940+AC↓j ...
.text:004049B0                 mov     ebx, [esp+1Ch+var_C]
.text:004049B4                 mov     esi, [esp+1Ch+var_8]
.text:004049B8                 mov     edi, [esp+1Ch+var_4]
.text:004049BC                 add     esp, 1Ch
.text:004049BF                 retn
.text:004049C0 ; ---------------------------------------------------------------------------
.text:004049C0
.text:004049C0 loc_4049C0:                             ; CODE XREF: sub_404940+52↑j
.text:004049C0                 cmp     byte ptr [edi+0B8h], 2Eh ; '.'
.text:004049C7                 mov     esi, [ebx+10h]
.text:004049CA                 mov     ecx, [ebx+14h]
.text:004049CD                 mov     [edi+30h], esi
.text:004049D0                 mov     [edi+34h], ecx
.text:004049D3                 mov     edx, [ebx+8]
.text:004049D6                 mov     esi, [ebx+0Ch]
.text:004049D9                 mov     ecx, [ebx+18h]
.text:004049DC                 mov     [edi+28h], edx
.text:004049DF                 mov     [edi+2Ch], esi
.text:004049E2                 mov     [edi+38h], ecx
.text:004049E5                 jz      short loc_4049EE
.text:004049E7
.text:004049E7 loc_4049E7:                             ; CODE XREF: sub_404940+C9↓j
.text:004049E7                 mov     eax, 1
.text:004049EC                 jmp     short loc_4049B0
.text:004049EE ; ---------------------------------------------------------------------------
.text:004049EE
.text:004049EE loc_4049EE:                             ; CODE XREF: sub_404940+A5↑j
.text:004049EE                 cmp     byte ptr [edi+0B9h], 0
.text:004049F5                 jz      short loc_404A0B
.text:004049F7                 mov     ebx, [edi+0B8h]
.text:004049FD                 and     ebx, 0FFFF00h
.text:00404A03                 cmp     ebx, 2E00h
.text:00404A09                 jnz     short loc_4049E7
.text:00404A0B
.text:00404A0B loc_404A0B:                             ; CODE XREF: sub_404940+B5↑j
.text:00404A0B                 mov     eax, 5
.text:00404A10                 jmp     short loc_4049B0
.text:00404A12 ; ---------------------------------------------------------------------------
.text:00404A12
.text:00404A12 loc_404A12:                             ; CODE XREF: sub_404940+3E↑j
.text:00404A12                 call    _errno
.text:00404A17                 mov     esi, [eax]
.text:00404A19                 mov     [esp+1Ch+var_18], ebx
.text:00404A1D                 mov     ecx, [edi+14h]
.text:00404A20                 mov     [esp+1Ch+var_1C], ecx
.text:00404A23                 call    sub_410AD0
.text:00404A28                 test    eax, eax
.text:00404A2A                 jz      short loc_404A45
.text:00404A2C                 mov     [edi+1Ch], esi
.text:00404A2F
.text:00404A2F loc_404A2F:                             ; CODE XREF: sub_404940+141↓j
.text:00404A2F                 cld
.text:00404A30                 xor     eax, eax
.text:00404A32                 mov     ecx, 1Ah
.text:00404A37                 mov     edi, ebx
.text:00404A39                 rep stosd
.text:00404A3B                 mov     eax, 0Ah
.text:00404A40                 jmp     loc_4049B0
.text:00404A45 ; ---------------------------------------------------------------------------
.text:00404A45
.text:00404A45 loc_404A45:                             ; CODE XREF: sub_404940+EA↑j
.text:00404A45                 call    _errno
.text:00404A4A                 mov     dword ptr [eax], 0
.text:00404A50                 mov     eax, 0Dh
.text:00404A55                 jmp     loc_4049B0
.text:00404A55 ; ---------------------------------------------------------------------------
.text:00404A5A                 align 10h
.text:00404A60
.text:00404A60 loc_404A60:                             ; CODE XREF: sub_404940+27↑j
.text:00404A60                 mov     [esp+1Ch+var_18], ebx
.text:00404A64                 mov     esi, [edi+14h]
.text:00404A67                 mov     [esp+1Ch+var_1C], esi
.text:00404A6A                 call    sub_410AD0
.text:00404A6F                 test    eax, eax
.text:00404A71                 jz      loc_404984
.text:00404A77                 call    _errno
.text:00404A7C                 mov     edx, [eax]
.text:00404A7E                 mov     [edi+1Ch], edx
.text:00404A81                 jmp     short loc_404A2F
.text:00404A81 sub_404940      endp
.text:00404A81
.text:00404A81 ; ---------------------------------------------------------------------------
.text:00404A83                 align 10h
.text:00404A90
.text:00404A90 ; =============== S U B R O U T I N E =======================================
.text:00404A90
.text:00404A90
.text:00404A90 ; int __cdecl sub_404A90(int, int, void *)
.text:00404A90 sub_404A90      proc near               ; CODE XREF: sub_4036F0+21A↑p
.text:00404A90                                         ; sub_4042E0+4E6↑p
.text:00404A90
.text:00404A90 Block           = dword ptr -1Ch
.text:00404A90 Size            = dword ptr -18h
.text:00404A90 var_14          = dword ptr -14h
.text:00404A90 var_10          = dword ptr -10h
.text:00404A90 arg_0           = dword ptr  4
.text:00404A90 arg_4           = dword ptr  8
.text:00404A90 arg_8           = dword ptr  0Ch
.text:00404A90
.text:00404A90                 push    edi
.text:00404A91                 push    esi
.text:00404A92                 push    ebx
.text:00404A93                 sub     esp, 10h
.text:00404A96                 mov     edi, [esp+1Ch+arg_0]
.text:00404A9A                 mov     ebx, [esp+1Ch+arg_8]
.text:00404A9E                 mov     esi, [esp+1Ch+arg_4]
.text:00404AA2                 cmp     ebx, [edi+24h]
.text:00404AA5                 jbe     short loc_404AE0
.text:00404AA7                 lea     eax, [ebx+28h]
.text:00404AAA                 cmp     eax, 3FFFFFFFh
.text:00404AAF                 mov     [edi+24h], eax
.text:00404AB2                 ja      loc_404B52
.text:00404AB8                 shl     eax, 2
.text:00404ABB                 mov     [esp+1Ch+Size], eax ; Size
.text:00404ABF                 mov     edx, [edi+8]
.text:00404AC2                 mov     [esp+1Ch+Block], edx ; Block
.text:00404AC5                 call    realloc
.text:00404ACA                 test    eax, eax
.text:00404ACC                 jz      loc_404B52
.text:00404AD2                 mov     [edi+8], eax
.text:00404AD5                 lea     esi, [esi+0]
.text:00404AD9                 lea     edi, [edi+0]
.text:00404AE0
.text:00404AE0 loc_404AE0:                             ; CODE XREF: sub_404A90+15↑j
.text:00404AE0                 mov     edx, [edi+8]
.text:00404AE3                 test    esi, esi
.text:00404AE5                 mov     eax, esi
.text:00404AE7                 mov     ecx, edx
.text:00404AE9                 jz      short loc_404AFC
.text:00404AEB                 nop
.text:00404AEC                 lea     esi, [esi+0]
.text:00404AF0
.text:00404AF0 loc_404AF0:                             ; CODE XREF: sub_404A90+6A↓j
.text:00404AF0                 mov     [edx], eax
.text:00404AF2                 mov     eax, [eax+8]
.text:00404AF5                 add     edx, 4
.text:00404AF8                 test    eax, eax
.text:00404AFA                 jnz     short loc_404AF0
.text:00404AFC
.text:00404AFC loc_404AFC:                             ; CODE XREF: sub_404A90+59↑j
.text:00404AFC                 mov     esi, [edi+28h]
.text:00404AFF                 mov     [esp+1Ch+Size], ebx ; void *
.text:00404B03                 mov     [esp+1Ch+Block], ecx ; Block
.text:00404B06                 mov     [esp+1Ch+var_10], esi ; int
.text:00404B0A                 mov     [esp+1Ch+var_14], 4 ; size_t
.text:00404B12                 call    sub_412560
.text:00404B17                 mov     edx, [edi+8]
.text:00404B1A                 dec     ebx
.text:00404B1B                 mov     esi, [edx]
.text:00404B1D                 mov     ecx, esi
.text:00404B1F                 jz      short loc_404B42
.text:00404B21                 jmp     short loc_404B30
.text:00404B21 ; ---------------------------------------------------------------------------
.text:00404B23                 align 10h
.text:00404B30
.text:00404B30 loc_404B30:                             ; CODE XREF: sub_404A90+91↑j
.text:00404B30                                         ; sub_404A90+AE↓j
.text:00404B30                 mov     edi, [edx+4]
.text:00404B33                 add     edx, 4
.text:00404B36                 dec     ebx
.text:00404B37                 mov     [ecx+8], edi
.text:00404B3A                 jz      short loc_404B40
.text:00404B3C                 mov     ecx, [edx]
.text:00404B3E                 jmp     short loc_404B30
.text:00404B40 ; ---------------------------------------------------------------------------
.text:00404B40
.text:00404B40 loc_404B40:                             ; CODE XREF: sub_404A90+AA↑j
.text:00404B40                 mov     ecx, [edx]
.text:00404B42
.text:00404B42 loc_404B42:                             ; CODE XREF: sub_404A90+8F↑j
.text:00404B42                 mov     dword ptr [ecx+8], 0
.text:00404B49
.text:00404B49 loc_404B49:                             ; CODE XREF: sub_404A90+DB↓j
.text:00404B49                 add     esp, 10h
.text:00404B4C                 mov     eax, esi
.text:00404B4E                 pop     ebx
.text:00404B4F                 pop     esi
.text:00404B50                 pop     edi
.text:00404B51                 retn
.text:00404B52 ; ---------------------------------------------------------------------------
.text:00404B52
.text:00404B52 loc_404B52:                             ; CODE XREF: sub_404A90+22↑j
.text:00404B52                                         ; sub_404A90+3C↑j
.text:00404B52                 mov     edx, [edi+8]
.text:00404B55                 mov     [esp+1Ch+Block], edx ; Block
.text:00404B58                 call    free
.text:00404B5D                 mov     dword ptr [edi+8], 0
.text:00404B64                 mov     dword ptr [edi+24h], 0
.text:00404B6B                 jmp     short loc_404B49
.text:00404B6B sub_404A90      endp
.text:00404B6B
.text:00404B6B ; ---------------------------------------------------------------------------
.text:00404B6D                 align 10h
.text:00404B70
.text:00404B70 ; =============== S U B R O U T I N E =======================================
.text:00404B70
.text:00404B70
.text:00404B70 ; int __cdecl sub_404B70(int, void *, size_t)
.text:00404B70 sub_404B70      proc near               ; CODE XREF: sub_4036F0+9D↑p
.text:00404B70                                         ; sub_4036F0+F4↑p ...
.text:00404B70
.text:00404B70 Size            = dword ptr -1Ch
.text:00404B70 Src             = dword ptr -18h
.text:00404B70 var_14          = dword ptr -14h
.text:00404B70 var_8           = dword ptr -8
.text:00404B70 var_4           = dword ptr -4
.text:00404B70 arg_0           = dword ptr  4
.text:00404B70 arg_4           = dword ptr  8
.text:00404B70 arg_8           = dword ptr  0Ch
.text:00404B70
.text:00404B70                 sub     esp, 1Ch
.text:00404B73                 mov     [esp+1Ch+var_4], esi
.text:00404B77                 mov     esi, [esp+1Ch+arg_8]
.text:00404B7B                 mov     [esp+1Ch+var_8], ebx
.text:00404B7F                 lea     edx, [esi+0C0h]
.text:00404B85                 mov     [esp+1Ch+Size], edx ; Size
.text:00404B88                 call    malloc
.text:00404B8D                 mov     ebx, eax
.text:00404B8F                 xor     eax, eax
.text:00404B91                 test    ebx, ebx
.text:00404B93                 jz      short loc_404BE8
.text:00404B95                 mov     [esp+1Ch+var_14], esi ; Size
.text:00404B99                 mov     edx, [esp+1Ch+arg_4]
.text:00404B9D                 lea     ecx, [ebx+0B8h]
.text:00404BA3                 mov     [esp+1Ch+Size], ecx ; void *
.text:00404BA6                 mov     [esp+1Ch+Src], edx ; Src
.text:00404BAA                 call    memmove
.text:00404BAF                 mov     [ebx+40h], esi
.text:00404BB2                 mov     ecx, [esp+1Ch+arg_0]
.text:00404BB6                 xor     edx, edx
.text:00404BB8                 mov     [esi+ebx+0B8h], dl
.text:00404BBF                 mov     eax, ebx
.text:00404BC1                 mov     dword ptr [ebx+1Ch], 0
.text:00404BC8                 mov     edx, [ecx+18h]
.text:00404BCB                 mov     word ptr [ebx+46h], 0
.text:00404BD1                 mov     word ptr [ebx+48h], 3
.text:00404BD7                 mov     [ebx+18h], edx
.text:00404BDA                 mov     dword ptr [ebx+0Ch], 0
.text:00404BE1                 mov     dword ptr [ebx+10h], 0
.text:00404BE8
.text:00404BE8 loc_404BE8:                             ; CODE XREF: sub_404B70+23↑j
.text:00404BE8                 mov     ebx, [esp+1Ch+var_8]
.text:00404BEC                 mov     esi, [esp+1Ch+var_4]
.text:00404BF0                 add     esp, 1Ch
.text:00404BF3                 retn
.text:00404BF3 sub_404B70      endp
.text:00404BF3
.text:00404BF3 ; ---------------------------------------------------------------------------
.text:00404BF4                 align 10h
.text:00404C00
.text:00404C00 ; =============== S U B R O U T I N E =======================================
.text:00404C00
.text:00404C00
.text:00404C00 ; int __cdecl sub_404C00(void *)
.text:00404C00 sub_404C00      proc near               ; CODE XREF: sub_4036F0+1BA↑p
.text:00404C00                                         ; sub_403A00+E9↑p ...
.text:00404C00
.text:00404C00 Block           = dword ptr -0Ch
.text:00404C00 arg_0           = dword ptr  4
.text:00404C00
.text:00404C00                 push    ebx
.text:00404C01                 sub     esp, 8
.text:00404C04                 mov     ebx, [esp+0Ch+arg_0]
.text:00404C08                 test    ebx, ebx
.text:00404C0A                 mov     eax, ebx
.text:00404C0C                 jz      short loc_404C21
.text:00404C0E                 mov     esi, esi
.text:00404C10
.text:00404C10 loc_404C10:                             ; CODE XREF: sub_404C00+1F↓j
.text:00404C10                 mov     ebx, [ebx+8]
.text:00404C13                 mov     [esp+0Ch+Block], eax ; Block
.text:00404C16                 call    free
.text:00404C1B                 test    ebx, ebx
.text:00404C1D                 mov     eax, ebx
.text:00404C1F                 jnz     short loc_404C10
.text:00404C21
.text:00404C21 loc_404C21:                             ; CODE XREF: sub_404C00+C↑j
.text:00404C21                 add     esp, 8
.text:00404C24                 pop     ebx
.text:00404C25                 retn
.text:00404C25 sub_404C00      endp
.text:00404C25
.text:00404C25 ; ---------------------------------------------------------------------------
.text:00404C26                 align 10h
.text:00404C30
.text:00404C30 ; =============== S U B R O U T I N E =======================================
.text:00404C30
.text:00404C30
.text:00404C30 sub_404C30      proc near               ; CODE XREF: sub_4036F0+7D↑p
.text:00404C30                                         ; sub_4042E0+1FB↑p
.text:00404C30
.text:00404C30 Block           = dword ptr -0Ch
.text:00404C30 Size            = dword ptr -8
.text:00404C30 var_4           = dword ptr -4
.text:00404C30 arg_0           = dword ptr  4
.text:00404C30 arg_4           = dword ptr  8
.text:00404C30
.text:00404C30                 sub     esp, 0Ch
.text:00404C33                 mov     ecx, [esp+0Ch+arg_4]
.text:00404C37                 mov     [esp+0Ch+var_4], ebx
.text:00404C3B                 mov     ebx, [esp+0Ch+arg_0]
.text:00404C3F                 mov     edx, [ebx+20h]
.text:00404C42                 mov     eax, edx
.text:00404C44                 add     eax, ecx
.text:00404C46                 add     eax, 100h
.text:00404C4B                 cmp     eax, edx
.text:00404C4D                 jnb     short loc_404C83
.text:00404C4F                 mov     eax, [ebx+18h]
.text:00404C52                 test    eax, eax
.text:00404C54                 jnz     short loc_404C72
.text:00404C56
.text:00404C56 loc_404C56:                             ; CODE XREF: sub_404C30+51↓j
.text:00404C56                 mov     dword ptr [ebx+18h], 0
.text:00404C5D                 call    _errno
.text:00404C62                 mov     dword ptr [eax], 26h ; '&'
.text:00404C68
.text:00404C68 loc_404C68:                             ; CODE XREF: sub_404C30+85↓j
.text:00404C68                 xor     eax, eax
.text:00404C6A
.text:00404C6A loc_404C6A:                             ; CODE XREF: sub_404C30+71↓j
.text:00404C6A                 mov     ebx, [esp+0Ch+var_4]
.text:00404C6E                 add     esp, 0Ch
.text:00404C71                 retn
.text:00404C72 ; ---------------------------------------------------------------------------
.text:00404C72
.text:00404C72 loc_404C72:                             ; CODE XREF: sub_404C30+24↑j
.text:00404C72                 mov     [esp+0Ch+Block], eax ; Block
.text:00404C75                 call    free
.text:00404C7A                 mov     dword ptr [ebx+18h], 0
.text:00404C81                 jmp     short loc_404C56
.text:00404C83 ; ---------------------------------------------------------------------------
.text:00404C83
.text:00404C83 loc_404C83:                             ; CODE XREF: sub_404C30+1D↑j
.text:00404C83                 mov     [ebx+20h], eax
.text:00404C86                 mov     [esp+0Ch+Size], eax ; Size
.text:00404C8A                 mov     edx, [ebx+18h]
.text:00404C8D                 mov     [esp+0Ch+Block], edx ; Block
.text:00404C90                 call    realloc
.text:00404C95                 test    eax, eax
.text:00404C97                 jz      short loc_404CA3
.text:00404C99                 mov     [ebx+18h], eax
.text:00404C9C                 mov     eax, 1
.text:00404CA1                 jmp     short loc_404C6A
.text:00404CA3 ; ---------------------------------------------------------------------------
.text:00404CA3
.text:00404CA3 loc_404CA3:                             ; CODE XREF: sub_404C30+67↑j
.text:00404CA3                 mov     edx, [ebx+18h]
.text:00404CA6                 mov     [esp+0Ch+Block], edx ; Block
.text:00404CA9                 call    free
.text:00404CAE                 mov     dword ptr [ebx+18h], 0
.text:00404CB5                 jmp     short loc_404C68
.text:00404CB5 sub_404C30      endp
.text:00404CB5
.text:00404CB5 ; ---------------------------------------------------------------------------
.text:00404CB7                 align 10h
.text:00404CC0
.text:00404CC0 ; =============== S U B R O U T I N E =======================================
.text:00404CC0
.text:00404CC0
.text:00404CC0 sub_404CC0      proc near               ; CODE XREF: sub_4042E0+560↑p
.text:00404CC0
.text:00404CC0 arg_0           = dword ptr  4
.text:00404CC0 arg_4           = dword ptr  8
.text:00404CC0
.text:00404CC0                 push    ebx
.text:00404CC1                 mov     ecx, [esp+4+arg_0]
.text:00404CC5                 mov     edx, [ecx+4]
.text:00404CC8                 mov     ebx, [ecx+18h]
.text:00404CCB                 test    edx, edx
.text:00404CCD                 jz      short loc_404CF2
.text:00404CCF                 nop
.text:00404CD0
.text:00404CD0 loc_404CD0:                             ; CODE XREF: sub_404CC0+30↓j
.text:00404CD0                 mov     ecx, [edx+14h]
.text:00404CD3                 lea     eax, [edx+0B8h]
.text:00404CD9                 cmp     ecx, eax
.text:00404CDB                 jz      short loc_404CE8
.text:00404CDD                 mov     eax, [edx+18h]
.text:00404CE0                 sub     ecx, eax
.text:00404CE2                 lea     eax, [ecx+ebx]
.text:00404CE5                 mov     [edx+14h], eax
.text:00404CE8
.text:00404CE8 loc_404CE8:                             ; CODE XREF: sub_404CC0+1B↑j
.text:00404CE8                 mov     [edx+18h], ebx
.text:00404CEB                 mov     edx, [edx+8]
.text:00404CEE                 test    edx, edx
.text:00404CF0                 jnz     short loc_404CD0
.text:00404CF2
.text:00404CF2 loc_404CF2:                             ; CODE XREF: sub_404CC0+D↑j
.text:00404CF2                 mov     edx, [esp+4+arg_4]
.text:00404CF6                 mov     ecx, [edx+3Ch]
.text:00404CF9                 test    ecx, ecx
.text:00404CFB                 js      short loc_404D2E
.text:00404CFD                 lea     esi, [esi+0]
.text:00404D00
.text:00404D00 loc_404D00:                             ; CODE XREF: sub_404CC0+6C↓j
.text:00404D00                 mov     ecx, [edx+14h]
.text:00404D03                 lea     eax, [edx+0B8h]
.text:00404D09                 cmp     ecx, eax
.text:00404D0B                 jz      short loc_404D18
.text:00404D0D                 mov     eax, [edx+18h]
.text:00404D10                 sub     ecx, eax
.text:00404D12                 lea     eax, [ecx+ebx]
.text:00404D15                 mov     [edx+14h], eax
.text:00404D18
.text:00404D18 loc_404D18:                             ; CODE XREF: sub_404CC0+4B↑j
.text:00404D18                 mov     [edx+18h], ebx
.text:00404D1B                 mov     eax, [edx+8]
.text:00404D1E                 test    eax, eax
.text:00404D20                 jnz     short loc_404D25
.text:00404D22                 mov     eax, [edx+4]
.text:00404D25
.text:00404D25 loc_404D25:                             ; CODE XREF: sub_404CC0+60↑j
.text:00404D25                 mov     ecx, [eax+3Ch]
.text:00404D28                 mov     edx, eax
.text:00404D2A                 test    ecx, ecx
.text:00404D2C                 jns     short loc_404D00
.text:00404D2E
.text:00404D2E loc_404D2E:                             ; CODE XREF: sub_404CC0+3B↑j
.text:00404D2E                 pop     ebx
.text:00404D2F                 retn
.text:00404D2F sub_404CC0      endp
.text:00404D2F
.text:00404D30
.text:00404D30 ; =============== S U B R O U T I N E =======================================
.text:00404D30
.text:00404D30
.text:00404D30 sub_404D30      proc near               ; CODE XREF: sub_4036F0+61↑p
.text:00404D30                                         ; sub_4036F0+2F3↑p
.text:00404D30
.text:00404D30 Str             = dword ptr -0Ch
.text:00404D30 arg_0           = dword ptr  4
.text:00404D30
.text:00404D30                 push    esi
.text:00404D31                 xor     esi, esi
.text:00404D33                 push    ebx
.text:00404D34                 sub     esp, 4
.text:00404D37                 mov     ebx, [esp+0Ch+arg_0]
.text:00404D3B                 mov     eax, [ebx]
.text:00404D3D                 test    eax, eax
.text:00404D3F                 jnz     short loc_404D48
.text:00404D41
.text:00404D41 loc_404D41:                             ; CODE XREF: sub_404D30+2F↓j
.text:00404D41                 pop     edx
.text:00404D42                 lea     eax, [esi+1]
.text:00404D45                 pop     ebx
.text:00404D46                 pop     esi
.text:00404D47                 retn
.text:00404D48 ; ---------------------------------------------------------------------------
.text:00404D48
.text:00404D48 loc_404D48:                             ; CODE XREF: sub_404D30+F↑j
.text:00404D48                                         ; sub_404D30+2D↓j
.text:00404D48                 mov     [esp+0Ch+Str], eax ; Str
.text:00404D4B                 call    strlen
.text:00404D50                 cmp     eax, esi
.text:00404D52                 jbe     short loc_404D56
.text:00404D54                 mov     esi, eax
.text:00404D56
.text:00404D56 loc_404D56:                             ; CODE XREF: sub_404D30+22↑j
.text:00404D56                 add     ebx, 4
.text:00404D59                 mov     eax, [ebx]
.text:00404D5B                 test    eax, eax
.text:00404D5D                 jnz     short loc_404D48
.text:00404D5F                 jmp     short loc_404D41
.text:00404D5F sub_404D30      endp
.text:00404D5F
.text:00404D61 ; ---------------------------------------------------------------------------
.text:00404D61                 jmp     short sub_404D70
.text:00404D61 ; ---------------------------------------------------------------------------
.text:00404D63                 align 10h
.text:00404D70
.text:00404D70 ; =============== S U B R O U T I N E =======================================
.text:00404D70
.text:00404D70
.text:00404D70 ; int __cdecl sub_404D70(int, int, int, char *FileName)
.text:00404D70 sub_404D70      proc near               ; CODE XREF: sub_403B00+3B7↑p
.text:00404D70                                         ; sub_403B00+546↑p ...
.text:00404D70
.text:00404D70 FileHandle      = dword ptr -9Ch
.text:00404D70 OpenFlag        = dword ptr -98h
.text:00404D70 var_8C          = byte ptr -8Ch
.text:00404D70 var_84          = dword ptr -84h
.text:00404D70 var_80          = dword ptr -80h
.text:00404D70 var_7C          = dword ptr -7Ch
.text:00404D70 var_78          = dword ptr -78h
.text:00404D70 var_10          = dword ptr -10h
.text:00404D70 var_C           = dword ptr -0Ch
.text:00404D70 var_8           = dword ptr -8
.text:00404D70 var_4           = dword ptr -4
.text:00404D70 arg_0           = dword ptr  4
.text:00404D70 arg_4           = dword ptr  8
.text:00404D70 arg_8           = dword ptr  0Ch
.text:00404D70 FileName        = dword ptr  10h
.text:00404D70
.text:00404D70                 sub     esp, 9Ch
.text:00404D76                 mov     edx, [esp+9Ch+arg_0]
.text:00404D7D                 mov     [esp+9Ch+var_C], esi
.text:00404D84                 mov     esi, [esp+9Ch+FileName]
.text:00404D8B                 mov     [esp+9Ch+var_8], edi
.text:00404D92                 mov     [esp+9Ch+var_4], ebp
.text:00404D99                 mov     ebp, [esp+9Ch+arg_8]
.text:00404DA0                 mov     [esp+9Ch+var_10], ebx
.text:00404DA7                 test    byte ptr [edx+2Ch], 4
.text:00404DAB                 mov     edi, ebp
.text:00404DAD                 jz      short loc_404DD4
.text:00404DAF                 xor     eax, eax
.text:00404DB1
.text:00404DB1 loc_404DB1:                             ; CODE XREF: sub_404D70+E7↓j
.text:00404DB1                                         ; sub_404D70+125↓j
.text:00404DB1                 mov     ebx, [esp+9Ch+var_10]
.text:00404DB8                 mov     esi, [esp+9Ch+var_C]
.text:00404DBF                 mov     edi, [esp+9Ch+var_8]
.text:00404DC6                 mov     ebp, [esp+9Ch+var_4]
.text:00404DCD                 add     esp, 9Ch
.text:00404DD3                 retn
.text:00404DD4 ; ---------------------------------------------------------------------------
.text:00404DD4
.text:00404DD4 loc_404DD4:                             ; CODE XREF: sub_404D70+3D↑j
.text:00404DD4                 test    ebp, ebp
.text:00404DD6                 js      loc_404E72
.text:00404DDC
.text:00404DDC loc_404DDC:                             ; CODE XREF: sub_404D70+11F↓j
.text:00404DDC                 mov     [esp+9Ch+FileHandle], edi
.text:00404DDF                 lea     edx, [esp+9Ch+var_8C]
.text:00404DE3                 mov     ebx, 0FFFFFFFFh
.text:00404DE8                 mov     [esp+9Ch+OpenFlag], edx
.text:00404DEC                 call    sub_40EC80
.text:00404DF1                 test    eax, eax
.text:00404DF3                 jnz     short loc_404E43
.text:00404DF5                 mov     esi, [esp+9Ch+arg_4]
.text:00404DFC                 mov     eax, [esp+9Ch+var_7C]
.text:00404E00                 mov     edx, [esp+9Ch+var_78]
.text:00404E04                 mov     ebx, [esi+34h]
.text:00404E07                 mov     ecx, [esi+30h]
.text:00404E0A                 mov     esi, ebx
.text:00404E0C                 xor     esi, edx
.text:00404E0E                 xor     eax, ecx
.text:00404E10                 or      esi, eax
.text:00404E12                 jnz     short loc_404E33
.text:00404E14                 mov     edx, [esp+9Ch+arg_4]
.text:00404E1B                 mov     eax, [esp+9Ch+var_84]
.text:00404E1F                 mov     ebx, [edx+2Ch]
.text:00404E22                 mov     ecx, [edx+28h]
.text:00404E25                 mov     edx, [esp+9Ch+var_80]
.text:00404E29                 mov     esi, ebx
.text:00404E2B                 xor     eax, ecx
.text:00404E2D                 xor     esi, edx
.text:00404E2F                 or      esi, eax
.text:00404E31                 jz      short loc_404E66
.text:00404E33
.text:00404E33 loc_404E33:                             ; CODE XREF: sub_404D70+A2↑j
.text:00404E33                 call    _errno
.text:00404E38                 mov     dword ptr [eax], 2
.text:00404E3E                 mov     ebx, 0FFFFFFFFh
.text:00404E43
.text:00404E43 loc_404E43:                             ; CODE XREF: sub_404D70+83↑j
.text:00404E43                                         ; sub_404D70+100↓j
.text:00404E43                 call    _errno
.text:00404E48                 test    ebp, ebp
.text:00404E4A                 mov     esi, [eax]
.text:00404E4C                 js      short loc_404E5C
.text:00404E4E
.text:00404E4E loc_404E4E:                             ; CODE XREF: sub_404D70+F4↓j
.text:00404E4E                 call    _errno
.text:00404E53                 mov     [eax], esi
.text:00404E55                 mov     eax, ebx
.text:00404E57                 jmp     loc_404DB1
.text:00404E5C ; ---------------------------------------------------------------------------
.text:00404E5C
.text:00404E5C loc_404E5C:                             ; CODE XREF: sub_404D70+DC↑j
.text:00404E5C                 mov     [esp+9Ch+FileHandle], edi ; FileHandle
.text:00404E5F                 call    _close
.text:00404E64                 jmp     short loc_404E4E
.text:00404E66 ; ---------------------------------------------------------------------------
.text:00404E66
.text:00404E66 loc_404E66:                             ; CODE XREF: sub_404D70+C1↑j
.text:00404E66                 mov     [esp+9Ch+FileHandle], edi
.text:00404E69                 call    sub_40ACA0
.text:00404E6E                 mov     ebx, eax
.text:00404E70                 jmp     short loc_404E43
.text:00404E72 ; ---------------------------------------------------------------------------
.text:00404E72
.text:00404E72 loc_404E72:                             ; CODE XREF: sub_404D70+66↑j
.text:00404E72                 mov     [esp+9Ch+OpenFlag], 0 ; OpenFlag
.text:00404E7A                 mov     [esp+9Ch+FileHandle], esi ; FileName
.text:00404E7D                 call    _open
.text:00404E82                 test    eax, eax
.text:00404E84                 js      short loc_404E9A
.text:00404E86
.text:00404E86 loc_404E86:                             ; CODE XREF: sub_404D70+13A↓j
.text:00404E86                 mov     edi, eax
.text:00404E88                 test    edi, edi
.text:00404E8A                 mov     eax, 0FFFFFFFFh
.text:00404E8F                 jns     loc_404DDC
.text:00404E95                 jmp     loc_404DB1
.text:00404E9A ; ---------------------------------------------------------------------------
.text:00404E9A
.text:00404E9A loc_404E9A:                             ; CODE XREF: sub_404D70+114↑j
.text:00404E9A                 mov     [esp+9Ch+OpenFlag], 1 ; OpenFlag
.text:00404EA2                 mov     [esp+9Ch+FileHandle], esi ; FileName
.text:00404EA5                 call    _open
.text:00404EAA                 jmp     short loc_404E86
.text:00404EAA sub_404D70      endp
.text:00404EAA
.text:00404EAA ; ---------------------------------------------------------------------------
.text:00404EAC                 align 10h
.text:00404EB0
.text:00404EB0 ; =============== S U B R O U T I N E =======================================
.text:00404EB0
.text:00404EB0
.text:00404EB0 sub_404EB0      proc near               ; CODE XREF: sub_403100+5AB↑p
.text:00404EB0
.text:00404EB0 arg_4           = dword ptr  8
.text:00404EB0 arg_8           = dword ptr  0Ch
.text:00404EB0
.text:00404EB0                 sub     esp, 0Ch
.text:00404EB3                 mov     edx, [esp+0Ch+arg_8]
.text:00404EB7                 cmp     edx, 4
.text:00404EBA                 ja      short loc_404ED0
.text:00404EBC                 mov     ecx, [esp+0Ch+arg_4]
.text:00404EC0                 xor     eax, eax
.text:00404EC2                 mov     [ecx+48h], dx
.text:00404EC6
.text:00404EC6 loc_404EC6:                             ; CODE XREF: sub_404EB0+30↓j
.text:00404EC6                 add     esp, 0Ch
.text:00404EC9                 retn
.text:00404EC9 ; ---------------------------------------------------------------------------
.text:00404ECA                 align 10h
.text:00404ED0
.text:00404ED0 loc_404ED0:                             ; CODE XREF: sub_404EB0+A↑j
.text:00404ED0                 call    _errno
.text:00404ED5                 mov     dword ptr [eax], 16h
.text:00404EDB                 mov     eax, 1
.text:00404EE0                 jmp     short loc_404EC6
.text:00404EE0 sub_404EB0      endp
.text:00404EE0
.text:00404EE0 ; ---------------------------------------------------------------------------
.text:00404EE2                 align 10h
.text:00404EF0
.text:00404EF0 ; =============== S U B R O U T I N E =======================================
.text:00404EF0
.text:00404EF0
.text:00404EF0 sub_404EF0      proc near               ; DATA XREF: sub_4036F0+124↑o
.text:00404EF0
.text:00404EF0 var_11          = byte ptr -11h
.text:00404EF0 var_10          = dword ptr -10h
.text:00404EF0 var_C           = dword ptr -0Ch
.text:00404EF0 var_8           = dword ptr -8
.text:00404EF0 var_4           = dword ptr -4
.text:00404EF0 arg_0           = dword ptr  4
.text:00404EF0 arg_4           = dword ptr  8
.text:00404EF0
.text:00404EF0                 sub     esp, 14h
.text:00404EF3                 mov     [esp+14h+var_8], edi
.text:00404EF7                 mov     edi, [esp+14h+arg_0]
.text:00404EFB                 mov     [esp+14h+var_4], ebp
.text:00404EFF                 mov     ebp, [esp+14h+arg_4]
.text:00404F03                 mov     [esp+14h+var_C], esi
.text:00404F07                 mov     [esp+14h+var_10], ebx
.text:00404F0B                 mov     ebx, [edi+0Ch]
.text:00404F0E                 mov     [esp+14h+var_11], 0
.text:00404F13                 mov     ecx, [edi+8]
.text:00404F16                 mov     eax, [ebp+8]
.text:00404F19                 mov     edx, [ebp+0Ch]
.text:00404F1C                 mov     esi, ebx
.text:00404F1E                 xor     eax, ecx
.text:00404F20                 xor     esi, edx
.text:00404F22                 or      esi, eax
.text:00404F24                 jnz     short loc_404F40
.text:00404F26                 mov     edx, [edi+4]
.text:00404F29                 mov     esi, [edi]
.text:00404F2B                 mov     ecx, [ebp+4]
.text:00404F2E                 mov     edi, [ebp+0]
.text:00404F31                 mov     eax, edx
.text:00404F33                 xor     eax, ecx
.text:00404F35                 xor     edi, esi
.text:00404F37                 or      eax, edi
.text:00404F39                 jnz     short loc_404F40
.text:00404F3B                 mov     [esp+14h+var_11], 1
.text:00404F40
.text:00404F40 loc_404F40:                             ; CODE XREF: sub_404EF0+34↑j
.text:00404F40                                         ; sub_404EF0+49↑j
.text:00404F40                 movzx   eax, [esp+14h+var_11]
.text:00404F45                 mov     ebx, [esp+14h+var_10]
.text:00404F49                 mov     esi, [esp+14h+var_C]
.text:00404F4D                 mov     edi, [esp+14h+var_8]
.text:00404F51                 mov     ebp, [esp+14h+var_4]
.text:00404F55                 add     esp, 14h
.text:00404F58                 retn
.text:00404F58 sub_404EF0      endp
.text:00404F58
.text:00404F58 ; ---------------------------------------------------------------------------
.text:00404F59                 align 10h
.text:00404F60
.text:00404F60 ; =============== S U B R O U T I N E =======================================
.text:00404F60
.text:00404F60
.text:00404F60 sub_404F60      proc near               ; DATA XREF: sub_4036F0+12C↑o
.text:00404F60
.text:00404F60 var_1C          = dword ptr -1Ch
.text:00404F60 var_18          = dword ptr -18h
.text:00404F60 var_14          = dword ptr -14h
.text:00404F60 var_10          = dword ptr -10h
.text:00404F60 arg_0           = dword ptr  4
.text:00404F60 arg_4           = dword ptr  8
.text:00404F60
.text:00404F60                 sub     esp, 1Ch
.text:00404F63                 mov     ecx, [esp+1Ch+arg_0]
.text:00404F67                 mov     edx, [ecx+0Ch]
.text:00404F6A                 mov     eax, [ecx+8]
.text:00404F6D                 mov     ecx, [esp+1Ch+arg_4]
.text:00404F71                 mov     [esp+1Ch+var_10], 0
.text:00404F79                 mov     [esp+1Ch+var_1C], eax
.text:00404F7C                 mov     [esp+1Ch+var_14], ecx
.text:00404F80                 mov     [esp+1Ch+var_18], edx
.text:00404F84                 call    sub_417D10
.text:00404F89                 add     esp, 1Ch
.text:00404F8C                 retn
.text:00404F8C sub_404F60      endp
.text:00404F8C
.text:00404F8C ; ---------------------------------------------------------------------------
.text:00404F8D                 align 10h
.text:00404F90
.text:00404F90 ; =============== S U B R O U T I N E =======================================
.text:00404F90
.text:00404F90
.text:00404F90 ; int __cdecl sub_404F90(void *Block, int)
.text:00404F90 sub_404F90      proc near               ; CODE XREF: sub_403B00+E3↑p
.text:00404F90                                         ; sub_403B00+228↑p ...
.text:00404F90
.text:00404F90 Size            = dword ptr -1Ch
.text:00404F90 var_18          = dword ptr -18h
.text:00404F90 var_10          = dword ptr -10h
.text:00404F90 var_C           = dword ptr -0Ch
.text:00404F90 var_8           = dword ptr -8
.text:00404F90 var_4           = dword ptr -4
.text:00404F90 Block           = dword ptr  4
.text:00404F90 arg_4           = dword ptr  8
.text:00404F90
.text:00404F90                 sub     esp, 1Ch
.text:00404F93                 mov     [esp+1Ch+var_C], esi
.text:00404F97                 mov     esi, [esp+1Ch+Block]
.text:00404F9B                 mov     [esp+1Ch+var_8], edi
.text:00404F9F                 mov     edi, [esp+1Ch+arg_4]
.text:00404FA3                 mov     [esp+1Ch+var_10], ebx
.text:00404FA7                 mov     [esp+1Ch+var_4], ebp
.text:00404FAB                 mov     eax, [esi+30h]
.text:00404FAE                 test    eax, eax
.text:00404FB0                 jnz     short loc_404FF0
.text:00404FB2                 mov     edx, [esi+34h]
.text:00404FB5                 test    edx, edx
.text:00404FB7                 jnz     short loc_404FD0
.text:00404FB9
.text:00404FB9 loc_404FB9:                             ; CODE XREF: sub_404F90+51↓j
.text:00404FB9                                         ; sub_404F90+5B↓j ...
.text:00404FB9                 mov     ebx, [esp+1Ch+var_10]
.text:00404FBD                 mov     esi, [esp+1Ch+var_C]
.text:00404FC1                 mov     edi, [esp+1Ch+var_8]
.text:00404FC5                 mov     ebp, [esp+1Ch+var_4]
.text:00404FC9                 add     esp, 1Ch
.text:00404FCC                 retn
.text:00404FCC ; ---------------------------------------------------------------------------
.text:00404FCD                 align 10h
.text:00404FD0
.text:00404FD0 loc_404FD0:                             ; CODE XREF: sub_404F90+27↑j
.text:00404FD0                 mov     [esp+1Ch+Size], edx
.text:00404FD3                 lea     ebp, [edi+50h]
.text:00404FD6                 mov     [esp+1Ch+var_18], ebp
.text:00404FDA                 call    sub_40AD30
.text:00404FDF                 test    al, al
.text:00404FE1                 jz      short loc_404FB9
.text:00404FE3                 mov     [edi], edi
.text:00404FE5                 mov     word ptr [edi+44h], 2
.text:00404FEB                 jmp     short loc_404FB9
.text:00404FEB ; ---------------------------------------------------------------------------
.text:00404FED                 align 10h
.text:00404FF0
.text:00404FF0 loc_404FF0:                             ; CODE XREF: sub_404F90+20↑j
.text:00404FF0                 mov     [esp+1Ch+Size], 18h ; Size
.text:00404FF7                 lea     ebp, [edi+50h]
.text:00404FFA                 call    malloc
.text:00404FFF                 test    eax, eax
.text:00405001                 mov     ebx, eax
.text:00405003                 jz      short loc_40505D
.text:00405005                 mov     [eax+10h], edi
.text:00405008                 mov     edx, [ebp+10h]
.text:0040500B                 mov     ecx, [ebp+14h]
.text:0040500E                 mov     [eax], edx
.text:00405010                 mov     [eax+4], ecx
.text:00405013                 mov     edx, [ebp+8]
.text:00405016                 mov     ecx, [ebp+0Ch]
.text:00405019                 mov     [eax+8], edx
.text:0040501C                 mov     [eax+0Ch], ecx
.text:0040501F                 mov     [esp+1Ch+var_18], eax
.text:00405023                 mov     edx, [esi+30h]
.text:00405026                 mov     [esp+1Ch+Size], edx
.text:00405029                 call    sub_407A90
.text:0040502E                 test    eax, eax
.text:00405030                 jz      short loc_40505D
.text:00405032                 cmp     eax, ebx
.text:00405034                 jz      short loc_404FB9
.text:00405036                 mov     word ptr [edi+44h], 2
.text:0040503C                 mov     esi, [eax+10h]
.text:0040503F                 mov     [edi], esi
.text:00405041                 mov     esi, [esp+1Ch+var_C]
.text:00405045                 mov     [esp+1Ch+Block], ebx ; Block
.text:00405049                 mov     edi, [esp+1Ch+var_8]
.text:0040504D                 mov     ebx, [esp+1Ch+var_10]
.text:00405051                 mov     ebp, [esp+1Ch+var_4]
.text:00405055                 add     esp, 1Ch
.text:00405058                 jmp     free
.text:0040505D ; ---------------------------------------------------------------------------
.text:0040505D
.text:0040505D loc_40505D:                             ; CODE XREF: sub_404F90+73↑j
.text:0040505D                                         ; sub_404F90+A0↑j
.text:0040505D                 mov     ebx, [esi+30h]
.text:00405060                 mov     [esp+1Ch+Size], ebx ; void *
.text:00405063                 call    sub_407820
.text:00405068                 mov     dword ptr [esi+30h], 0
.text:0040506F                 jmp     loc_404FB9
.text:0040506F sub_404F90      endp
.text:0040506F
.text:0040506F ; ---------------------------------------------------------------------------
.text:00405074                 align 10h
.text:00405080 aLiteral        db 'literal',0          ; DATA XREF: .text:004050C0↓o
.text:00405088 aShell          db 'shell',0            ; DATA XREF: .text:004050C4↓o
.text:0040508E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:004050C8↓o
.text:0040509B aC              db 'c',0                ; DATA XREF: .text:004050CC↓o
.text:0040509D aEscape         db 'escape',0           ; DATA XREF: .text:004050D0↓o
.text:004050A4 aLocale         db 'locale',0           ; DATA XREF: .text:004050D4↓o
.text:004050AB aClocale        db 'clocale',0          ; DATA XREF: .text:004050D8↓o
.text:004050B3                 align 10h
.text:004050C0                 dd offset aLiteral      ; "literal"
.text:004050C4                 dd offset aShell        ; "shell"
.text:004050C8                 dd offset aShellAlways  ; "shell-always"
.text:004050CC                 dd offset aC            ; "c"
.text:004050D0                 dd offset aEscape       ; "escape"
.text:004050D4                 dd offset aLocale       ; "locale"
.text:004050D8                 dd offset aClocale      ; "clocale"
.text:004050DC                 dd 2 dup(0)
.text:004050E4                 dd 1, 2, 3, 4, 5, 6
.text:004050FC asc_4050FC:                             ; DATA XREF: sub_405110+7E↓o
.text:004050FC                                         ; sub_405110+A39↓o ...
.text:004050FC                 text "UTF-16LE", '"',27h,'`'
.text:00405102                 align 10h
.text:00405110
.text:00405110 ; =============== S U B R O U T I N E =======================================
.text:00405110
.text:00405110
.text:00405110 ; int __cdecl sub_405110(int, int, char *Str, int, int, int)
.text:00405110 sub_405110      proc near               ; CODE XREF: sub_405110+43A↓p
.text:00405110                                         ; .text:00405CD3↓p ...
.text:00405110
.text:00405110 C               = dword ptr -4Ch
.text:00405110 Type            = dword ptr -48h
.text:00405110 SizeInBytes     = dword ptr -44h
.text:00405110 State           = dword ptr -40h
.text:00405110 var_3C          = dword ptr -3Ch
.text:00405110 var_38          = dword ptr -38h
.text:00405110 var_34          = dword ptr -34h
.text:00405110 var_30          = dword ptr -30h
.text:00405110 var_29          = byte ptr -29h
.text:00405110 var_28          = dword ptr -28h
.text:00405110 var_22          = byte ptr -22h
.text:00405110 var_21          = byte ptr -21h
.text:00405110 var_20          = dword ptr -20h
.text:00405110 var_1C          = dword ptr -1Ch
.text:00405110 var_18          = mbstate_t ptr -18h
.text:00405110 arg_0           = dword ptr  4
.text:00405110 arg_4           = dword ptr  8
.text:00405110 Str             = dword ptr  0Ch
.text:00405110 arg_C           = dword ptr  10h
.text:00405110 arg_10          = dword ptr  14h
.text:00405110 arg_14          = dword ptr  18h
.text:00405110
.text:00405110                 push    ebp
.text:00405111                 push    edi
.text:00405112                 push    esi
.text:00405113                 push    ebx
.text:00405114                 sub     esp, 3Ch
.text:00405117                 mov     edx, ds:__mb_cur_max
.text:0040511D                 mov     [esp+4Ch+var_34], 0
.text:00405125                 mov     [esp+4Ch+var_1C], 0
.text:0040512D                 cmp     dword ptr [edx], 1
.text:00405130                 mov     [esp+4Ch+var_20], 0
.text:00405138                 mov     [esp+4Ch+var_21], 0
.text:0040513D                 setz    [esp+4Ch+var_22]
.text:00405142                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00405147                 ja      short def_40514D ; jumptable 0040514D default case, cases 0,1
.text:00405149                 mov     edx, [esp+4Ch+arg_10]
.text:0040514D                 jmp     ds:jpt_40514D[edx*4] ; switch jump
.text:0040514D ; ---------------------------------------------------------------------------
.text:00405154 jpt_40514D      dd offset def_40514D    ; DATA XREF: sub_405110+3D↑r
.text:00405154                 dd offset def_40514D    ; jump table for switch statement
.text:00405154                 dd offset loc_405A95
.text:00405154                 dd offset loc_405170
.text:00405154                 dd offset loc_405ABB
.text:00405154                 dd offset loc_405AC5
.text:00405154                 dd offset loc_405AC5
.text:00405170 ; ---------------------------------------------------------------------------
.text:00405170
.text:00405170 loc_405170:                             ; CODE XREF: sub_405110+3D↑j
.text:00405170                                         ; DATA XREF: sub_405110:jpt_40514D↑o
.text:00405170                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040514D case 3
.text:00405174                 cmp     [esp+4Ch+var_34], eax
.text:00405178                 jnb     short loc_405181
.text:0040517A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040517E                 mov     byte ptr [ebx], 22h ; '"'
.text:00405181
.text:00405181 loc_405181:                             ; CODE XREF: sub_405110+68↑j
.text:00405181                 mov     [esp+4Ch+var_34], 1
.text:00405189                 mov     [esp+4Ch+var_21], 1
.text:0040518E                 mov     [esp+4Ch+var_1C], offset asc_4050FC ; "\"'`"
.text:00405196
.text:00405196 loc_405196:                             ; CODE XREF: sub_405110+9A6↓j
.text:00405196                 mov     [esp+4Ch+var_20], 1
.text:0040519E
.text:0040519E def_40514D:                             ; CODE XREF: sub_405110+37↑j
.text:0040519E                                         ; sub_405110+3D↑j ...
.text:0040519E                 xor     ebp, ebp        ; jumptable 0040514D default case, cases 0,1
.text:004051A0
.text:004051A0 loc_4051A0:                             ; CODE XREF: sub_405110+3DB↓j
.text:004051A0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004051A5                 jz      loc_405A87
.text:004051AB                 cmp     ebp, [esp+4Ch+arg_C]
.text:004051AF
.text:004051AF loc_4051AF:                             ; CODE XREF: sub_405110+980↓j
.text:004051AF                 jz      loc_405A1E
.text:004051B5                 cmp     [esp+4Ch+var_21], 0
.text:004051BA                 jz      short loc_405200
.text:004051BC                 mov     esi, [esp+4Ch+var_20]
.text:004051C0                 test    esi, esi
.text:004051C2                 jz      short loc_405200
.text:004051C4                 mov     ecx, [esp+4Ch+var_20]
.text:004051C8                 lea     edi, [ecx+ebp]
.text:004051CB                 cmp     edi, [esp+4Ch+arg_C]
.text:004051CF                 ja      short loc_405200
.text:004051D1                 cld
.text:004051D2                 mov     ebx, [esp+4Ch+Str]
.text:004051D6                 mov     edi, [esp+4Ch+var_1C]
.text:004051DA                 add     ebx, ebp
.text:004051DC                 mov     esi, ebx
.text:004051DE                 cmp     ecx, ecx
.text:004051E0                 repe cmpsb
.text:004051E2                 jnz     short loc_405200
.text:004051E4                 mov     edx, [esp+4Ch+arg_4]
.text:004051E8                 cmp     [esp+4Ch+var_34], edx
.text:004051EC                 jnb     short loc_4051FA
.text:004051EE                 mov     ecx, [esp+4Ch+arg_0]
.text:004051F2                 mov     eax, [esp+4Ch+var_34]
.text:004051F6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004051FA
.text:004051FA loc_4051FA:                             ; CODE XREF: sub_405110+DC↑j
.text:004051FA                 inc     [esp+4Ch+var_34]
.text:004051FE                 mov     esi, esi
.text:00405200
.text:00405200 loc_405200:                             ; CODE XREF: sub_405110+AA↑j
.text:00405200                                         ; sub_405110+B2↑j ...
.text:00405200                 mov     edi, [esp+4Ch+Str]
.text:00405204                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00405209                 movzx   eax, bl
.text:0040520C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040520F                 ja      def_405215      ; jumptable 00405215 default case, cases 1-6,14-31,64
.text:00405215                 jmp     ds:jpt_405215[eax*4] ; switch jump
.text:00405215 ; ---------------------------------------------------------------------------
.text:0040521C jpt_405215      dd offset loc_405418, offset def_405215, offset def_405215
.text:0040521C                                         ; DATA XREF: sub_405110+105↑r
.text:0040521C                 dd offset def_405215, offset def_405215, offset def_405215 ; jump table for switch statement
.text:0040521C                 dd offset def_405215, offset loc_4054F0, offset loc_40550E
.text:0040521C                 dd offset loc_405512, offset loc_405557, offset loc_40555B
.text:0040521C                 dd offset loc_40555F, offset loc_405563, offset def_405215
.text:0040521C                 dd offset def_405215, offset def_405215, offset def_405215
.text:0040521C                 dd offset def_405215, offset def_405215, offset def_405215
.text:0040521C                 dd offset def_405215, offset def_405215, offset def_405215
.text:0040521C                 dd offset def_405215, offset def_405215, offset def_405215
.text:0040521C                 dd offset def_405215, offset def_405215, offset def_405215
.text:0040521C                 dd offset def_405215, offset def_405215, offset loc_4059E8
.text:0040521C                 dd offset loc_4059E8, offset loc_4059E8, offset loc_405A0A
.text:0040521C                 dd offset loc_4059E8, offset def_405612, offset loc_4059E8
.text:0040521C                 dd offset loc_405567, offset loc_4059E8, offset loc_4059E8
.text:0040521C                 dd offset loc_4059E8, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset loc_4059E8
.text:0040521C                 dd offset loc_4059E8, offset loc_4059E8, offset loc_4059E8
.text:0040521C                 dd offset loc_4055CC, offset def_405215, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset loc_4059E8, offset loc_4059E1
.text:0040521C                 dd offset def_405612, offset loc_4059E8, offset def_405612
.text:0040521C                 dd offset loc_4059E8, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset def_405612, offset def_405612, offset def_405612
.text:0040521C                 dd offset loc_4059F8, offset loc_4059E8, offset loc_4059F8
.text:0040521C                 dd offset loc_405A0A
.text:00405418 ; ---------------------------------------------------------------------------
.text:00405418
.text:00405418 loc_405418:                             ; CODE XREF: sub_405110+105↑j
.text:00405418                                         ; DATA XREF: sub_405110:jpt_405215↑o
.text:00405418                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00405215 case 0
.text:0040541D                 lea     eax, [ebp+1]
.text:00405420                 jz      loc_4054D0
.text:00405426                 mov     esi, [esp+4Ch+arg_4]
.text:0040542A                 cmp     [esp+4Ch+var_34], esi
.text:0040542E                 jnb     short loc_40543C
.text:00405430                 mov     eax, [esp+4Ch+arg_0]
.text:00405434                 mov     ebx, [esp+4Ch+var_34]
.text:00405438                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040543C
.text:0040543C loc_40543C:                             ; CODE XREF: sub_405110+31E↑j
.text:0040543C                 inc     [esp+4Ch+var_34]
.text:00405440                 mov     edx, [esp+4Ch+arg_4]
.text:00405444                 cmp     [esp+4Ch+var_34], edx
.text:00405448                 jnb     short loc_405456
.text:0040544A                 mov     edi, [esp+4Ch+arg_0]
.text:0040544E                 mov     ecx, [esp+4Ch+var_34]
.text:00405452                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00405456
.text:00405456 loc_405456:                             ; CODE XREF: sub_405110+338↑j
.text:00405456                 inc     [esp+4Ch+var_34]
.text:0040545A                 mov     esi, [esp+4Ch+arg_4]
.text:0040545E                 cmp     [esp+4Ch+var_34], esi
.text:00405462                 jnb     short loc_405470
.text:00405464                 mov     ebx, [esp+4Ch+arg_0]
.text:00405468                 mov     eax, [esp+4Ch+var_34]
.text:0040546C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00405470
.text:00405470 loc_405470:                             ; CODE XREF: sub_405110+352↑j
.text:00405470                 inc     [esp+4Ch+var_34]
.text:00405474                 mov     bl, 30h ; '0'
.text:00405476                 lea     esi, [esi+0]
.text:00405479                 lea     edi, [edi+0]
.text:00405480
.text:00405480 def_405612:                             ; CODE XREF: sub_405110+105↑j
.text:00405480                                         ; sub_405110+463↓j ...
.text:00405480                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00405215 cases 37,43-58,65-90,93,95,97-122
.text:00405480                                         ; jumptable 00405612 default case, cases 34-38,42-44,46,48-59
.text:00405485                 lea     eax, [ebp+1]
.text:00405488                 jz      short loc_4054D0
.text:0040548A                 mov     cl, bl
.text:0040548C                 mov     edi, [esp+4Ch+arg_14]
.text:00405490                 mov     esi, 1
.text:00405495                 shr     cl, 5
.text:00405498                 movzx   edx, cl
.text:0040549B                 mov     ecx, ebx
.text:0040549D                 and     ecx, 1Fh
.text:004054A0                 shl     esi, cl
.text:004054A2                 test    [edi+edx*4+4], esi
.text:004054A6                 jz      short loc_4054C2
.text:004054A8
.text:004054A8 loc_4054A8:                             ; CODE XREF: sub_405110+3FC↓j
.text:004054A8                 mov     edx, [esp+4Ch+arg_4]
.text:004054AC                 cmp     [esp+4Ch+var_34], edx
.text:004054B0                 jnb     short loc_4054BE
.text:004054B2                 mov     edi, [esp+4Ch+arg_0]
.text:004054B6                 mov     esi, [esp+4Ch+var_34]
.text:004054BA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:004054BE
.text:004054BE loc_4054BE:                             ; CODE XREF: sub_405110+3A0↑j
.text:004054BE                 inc     [esp+4Ch+var_34]
.text:004054C2
.text:004054C2 loc_4054C2:                             ; CODE XREF: sub_405110+396↑j
.text:004054C2                 lea     eax, [ebp+1]
.text:004054C5                 lea     esi, [esi+0]
.text:004054C9                 lea     edi, [edi+0]
.text:004054D0
.text:004054D0 loc_4054D0:                             ; CODE XREF: sub_405110+310↑j
.text:004054D0                                         ; sub_405110+378↑j ...
.text:004054D0                 mov     ebp, [esp+4Ch+arg_4]
.text:004054D4                 cmp     [esp+4Ch+var_34], ebp
.text:004054D8                 jnb     short loc_4054E5
.text:004054DA                 mov     edx, [esp+4Ch+arg_0]
.text:004054DE                 mov     ecx, [esp+4Ch+var_34]
.text:004054E2                 mov     [ecx+edx], bl
.text:004054E5
.text:004054E5 loc_4054E5:                             ; CODE XREF: sub_405110+3C8↑j
.text:004054E5                 inc     [esp+4Ch+var_34]
.text:004054E9                 mov     ebp, eax
.text:004054EB                 jmp     loc_4051A0
.text:004054F0 ; ---------------------------------------------------------------------------
.text:004054F0
.text:004054F0 loc_4054F0:                             ; CODE XREF: sub_405110+105↑j
.text:004054F0                                         ; DATA XREF: sub_405110:jpt_405215↑o
.text:004054F0                 mov     dl, 61h ; 'a'   ; jumptable 00405215 case 7
.text:004054F2                 lea     esi, [esi+0]
.text:004054F9                 lea     edi, [edi+0]
.text:00405500
.text:00405500 loc_405500:                             ; CODE XREF: sub_405110+400↓j
.text:00405500                                         ; sub_405110+409↓j ...
.text:00405500                 cmp     [esp+4Ch+var_21], 0
.text:00405505                 lea     eax, [ebp+1]
.text:00405508                 jz      short loc_4054D0
.text:0040550A                 mov     bl, dl
.text:0040550C                 jmp     short loc_4054A8
.text:0040550E ; ---------------------------------------------------------------------------
.text:0040550E
.text:0040550E loc_40550E:                             ; CODE XREF: sub_405110+105↑j
.text:0040550E                                         ; DATA XREF: sub_405110:jpt_405215↑o
.text:0040550E                 mov     dl, 62h ; 'b'   ; jumptable 00405215 case 8
.text:00405510                 jmp     short loc_405500
.text:00405512 ; ---------------------------------------------------------------------------
.text:00405512
.text:00405512 loc_405512:                             ; CODE XREF: sub_405110+105↑j
.text:00405512                                         ; DATA XREF: sub_405110:jpt_405215↑o
.text:00405512                 mov     dl, 74h ; 't'   ; jumptable 00405215 case 9
.text:00405514
.text:00405514 loc_405514:                             ; CODE XREF: sub_405110+449↓j
.text:00405514                                         ; sub_405110+455↓j ...
.text:00405514                 cmp     [esp+4Ch+arg_10], 1
.text:00405519                 jnz     short loc_405500
.text:0040551B
.text:0040551B loc_40551B:                             ; CODE XREF: sub_405110+45C↓j
.text:0040551B                                         ; sub_405110+4C1↓j ...
.text:0040551B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 004058E2 cases 91,92,94,96,124
.text:00405523                 mov     eax, [esp+4Ch+arg_14]
.text:00405527                 mov     edx, [esp+4Ch+arg_C]
.text:0040552B                 mov     ecx, [esp+4Ch+Str]
.text:0040552F                 mov     ebx, [esp+4Ch+arg_4]
.text:00405533                 mov     [esp+4Ch+var_38], eax ; int
.text:00405537                 mov     ebp, [esp+4Ch+arg_0]
.text:0040553B                 mov     [esp+4Ch+State], edx ; int
.text:0040553F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00405543                 mov     [esp+4Ch+Type], ebx ; int
.text:00405547                 mov     [esp+4Ch+C], ebp ; int
.text:0040554A                 call    sub_405110
.text:0040554F
.text:0040554F loc_40554F:                             ; CODE XREF: sub_405110+972↓j
.text:0040554F                 add     esp, 3Ch
.text:00405552                 pop     ebx
.text:00405553                 pop     esi
.text:00405554                 pop     edi
.text:00405555                 pop     ebp
.text:00405556                 retn
.text:00405557 ; ---------------------------------------------------------------------------
.text:00405557
.text:00405557 loc_405557:                             ; CODE XREF: sub_405110+105↑j
.text:00405557                                         ; DATA XREF: sub_405110:jpt_405215↑o
.text:00405557                 mov     dl, 6Eh ; 'n'   ; jumptable 00405215 case 10
.text:00405559                 jmp     short loc_405514
.text:0040555B ; ---------------------------------------------------------------------------
.text:0040555B
.text:0040555B loc_40555B:                             ; CODE XREF: sub_405110+105↑j
.text:0040555B                                         ; DATA XREF: sub_405110:jpt_405215↑o
.text:0040555B                 mov     dl, 76h ; 'v'   ; jumptable 00405215 case 11
.text:0040555D                 jmp     short loc_405500
.text:0040555F ; ---------------------------------------------------------------------------
.text:0040555F
.text:0040555F loc_40555F:                             ; CODE XREF: sub_405110+105↑j
.text:0040555F                                         ; DATA XREF: sub_405110:jpt_405215↑o
.text:0040555F                 mov     dl, 66h ; 'f'   ; jumptable 00405215 case 12
.text:00405561                 jmp     short loc_405500
.text:00405563 ; ---------------------------------------------------------------------------
.text:00405563
.text:00405563 loc_405563:                             ; CODE XREF: sub_405110+105↑j
.text:00405563                                         ; DATA XREF: sub_405110:jpt_405215↑o
.text:00405563                 mov     dl, 72h ; 'r'   ; jumptable 00405215 case 13
.text:00405565                 jmp     short loc_405514
.text:00405567 ; ---------------------------------------------------------------------------
.text:00405567
.text:00405567 loc_405567:                             ; CODE XREF: sub_405110+105↑j
.text:00405567                                         ; DATA XREF: sub_405110:jpt_405215↑o
.text:00405567                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00405215 case 39
.text:0040556C                 jz      short loc_40551B ; jumptable 004058E2 cases 91,92,94,96,124
.text:0040556E                 cmp     [esp+4Ch+arg_10], 2
.text:00405573                 jnz     def_405612      ; jumptable 00405215 cases 37,43-58,65-90,93,95,97-122
.text:00405573                                         ; jumptable 00405612 default case, cases 34-38,42-44,46,48-59
.text:00405579                 mov     edx, [esp+4Ch+arg_4]
.text:0040557D                 cmp     [esp+4Ch+var_34], edx
.text:00405581                 jnb     short loc_40558F
.text:00405583                 mov     ecx, [esp+4Ch+arg_0]
.text:00405587                 mov     edi, [esp+4Ch+var_34]
.text:0040558B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040558F
.text:0040558F loc_40558F:                             ; CODE XREF: sub_405110+471↑j
.text:0040558F                 inc     [esp+4Ch+var_34]
.text:00405593                 mov     eax, [esp+4Ch+arg_4]
.text:00405597                 cmp     [esp+4Ch+var_34], eax
.text:0040559B                 jnb     short loc_4055A9
.text:0040559D                 mov     esi, [esp+4Ch+arg_0]
.text:004055A1                 mov     edx, [esp+4Ch+var_34]
.text:004055A5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:004055A9
.text:004055A9 loc_4055A9:                             ; CODE XREF: sub_405110+48B↑j
.text:004055A9                 inc     [esp+4Ch+var_34]
.text:004055AD                 mov     edi, [esp+4Ch+arg_4]
.text:004055B1                 cmp     [esp+4Ch+var_34], edi
.text:004055B5                 jnb     short loc_4055C3
.text:004055B7                 mov     ecx, [esp+4Ch+arg_0]
.text:004055BB                 mov     eax, [esp+4Ch+var_34]
.text:004055BF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:004055C3
.text:004055C3 loc_4055C3:                             ; CODE XREF: sub_405110+4A5↑j
.text:004055C3                                         ; sub_405110+5C4↓j ...
.text:004055C3                 inc     [esp+4Ch+var_34]
.text:004055C7                 jmp     def_405612      ; jumptable 00405215 cases 37,43-58,65-90,93,95,97-122
.text:004055C7                                         ; jumptable 00405612 default case, cases 34-38,42-44,46,48-59
.text:004055CC ; ---------------------------------------------------------------------------
.text:004055CC
.text:004055CC loc_4055CC:                             ; CODE XREF: sub_405110+105↑j
.text:004055CC                                         ; DATA XREF: sub_405110:jpt_405215↑o
.text:004055CC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00405215 case 63
.text:004055D1                 jz      loc_40551B      ; jumptable 004058E2 cases 91,92,94,96,124
.text:004055D7                 cmp     [esp+4Ch+arg_10], 3
.text:004055DC                 jnz     def_405612      ; jumptable 00405215 cases 37,43-58,65-90,93,95,97-122
.text:004055DC                                         ; jumptable 00405612 default case, cases 34-38,42-44,46,48-59
.text:004055E2                 lea     edx, [ebp+2]
.text:004055E5                 cmp     edx, [esp+4Ch+arg_C]
.text:004055E9                 jnb     def_405612      ; jumptable 00405215 cases 37,43-58,65-90,93,95,97-122
.text:004055E9                                         ; jumptable 00405612 default case, cases 34-38,42-44,46,48-59
.text:004055EF                 mov     esi, [esp+4Ch+Str]
.text:004055F3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004055F8                 jnz     def_405612      ; jumptable 00405215 cases 37,43-58,65-90,93,95,97-122
.text:004055F8                                         ; jumptable 00405612 default case, cases 34-38,42-44,46,48-59
.text:004055FE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00405603                 movsx   eax, cl
.text:00405606                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00405609                 cmp     eax, 1Dh
.text:0040560C                 ja      def_405612      ; jumptable 00405215 cases 37,43-58,65-90,93,95,97-122
.text:0040560C                                         ; jumptable 00405612 default case, cases 34-38,42-44,46,48-59
.text:00405612                 jmp     ds:jpt_405612[eax*4] ; switch jump
.text:00405612 ; ---------------------------------------------------------------------------
.text:00405619                 align 4
.text:0040561C jpt_405612      dd offset loc_405694    ; DATA XREF: sub_405110+502↑r
.text:0040561C                 dd offset def_405612    ; jump table for switch statement
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset loc_405694
.text:0040561C                 dd offset loc_405694
.text:0040561C                 dd offset loc_405694
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset loc_405694
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset loc_405694
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset def_405612
.text:0040561C                 dd offset loc_405694
.text:0040561C                 dd offset loc_405694
.text:0040561C                 dd offset loc_405694
.text:00405694 ; ---------------------------------------------------------------------------
.text:00405694
.text:00405694 loc_405694:                             ; CODE XREF: sub_405110+502↑j
.text:00405694                                         ; DATA XREF: sub_405110:jpt_405612↑o
.text:00405694                 mov     ebp, edx        ; jumptable 00405612 cases 33,39-41,45,47,60-62
.text:00405696                 mov     bl, cl
.text:00405698                 mov     edx, [esp+4Ch+arg_4]
.text:0040569C                 cmp     [esp+4Ch+var_34], edx
.text:004056A0                 jnb     short loc_4056AE
.text:004056A2                 mov     ecx, [esp+4Ch+arg_0]
.text:004056A6                 mov     edi, [esp+4Ch+var_34]
.text:004056AA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:004056AE
.text:004056AE loc_4056AE:                             ; CODE XREF: sub_405110+590↑j
.text:004056AE                 inc     [esp+4Ch+var_34]
.text:004056B2                 mov     eax, [esp+4Ch+arg_4]
.text:004056B6                 cmp     [esp+4Ch+var_34], eax
.text:004056BA                 jnb     short loc_4056C8
.text:004056BC                 mov     edx, [esp+4Ch+arg_0]
.text:004056C0                 mov     esi, [esp+4Ch+var_34]
.text:004056C4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:004056C8
.text:004056C8 loc_4056C8:                             ; CODE XREF: sub_405110+5AA↑j
.text:004056C8                 inc     [esp+4Ch+var_34]
.text:004056CC                 mov     edi, [esp+4Ch+arg_4]
.text:004056D0                 cmp     [esp+4Ch+var_34], edi
.text:004056D4                 jnb     loc_4055C3
.text:004056DA                 mov     eax, [esp+4Ch+arg_0]
.text:004056DE                 mov     ecx, [esp+4Ch+var_34]
.text:004056E2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:004056E6                 jmp     loc_4055C3
.text:004056E6 ; ---------------------------------------------------------------------------
.text:004056EB                 align 10h
.text:004056F0
.text:004056F0 def_405215:                             ; CODE XREF: sub_405110+FF↑j
.text:004056F0                                         ; sub_405110+105↑j
.text:004056F0                                         ; DATA XREF: ...
.text:004056F0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00405215 default case, cases 1-6,14-31,64
.text:004056F5                 jz      loc_405820
.text:004056FB                 mov     [esp+4Ch+var_28], 1
.text:00405703                 mov     esi, ds:__mb_cur_max
.text:00405709                 movzx   edx, bl
.text:0040570C                 cmp     dword ptr [esi], 1
.text:0040570F                 jz      loc_405804
.text:00405715                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040571D                 mov     [esp+4Ch+C], edx ; C
.text:00405720                 call    _isctype
.text:00405725
.text:00405725 loc_405725:                             ; CODE XREF: sub_405110+705↓j
.text:00405725                 test    eax, eax
.text:00405727                 setnz   [esp+4Ch+var_29]
.text:0040572C
.text:0040572C loc_40572C:                             ; CODE XREF: sub_405110+7A5↓j
.text:0040572C                 cmp     [esp+4Ch+var_21], 0
.text:00405731                 lea     eax, [ebp+1]
.text:00405734                 jz      loc_4054D0
.text:0040573A                 cmp     [esp+4Ch+var_29], 0
.text:0040573F                 jnz     def_405612      ; jumptable 00405215 cases 37,43-58,65-90,93,95,97-122
.text:0040573F                                         ; jumptable 00405612 default case, cases 34-38,42-44,46,48-59
.text:00405745
.text:00405745 loc_405745:                             ; CODE XREF: sub_405110+7AB↓j
.text:00405745                 mov     eax, [esp+4Ch+var_28]
.text:00405749                 lea     edx, [eax+ebp]
.text:0040574C                 lea     esi, [esi+0]
.text:00405750
.text:00405750 loc_405750:                             ; CODE XREF: sub_405110+6EF↓j
.text:00405750                 cmp     [esp+4Ch+var_21], 0
.text:00405755                 jz      short loc_4057D0
.text:00405757                 cmp     [esp+4Ch+var_29], 0
.text:0040575C                 jnz     short loc_4057D0
.text:0040575E                 mov     edi, [esp+4Ch+arg_4]
.text:00405762                 cmp     [esp+4Ch+var_34], edi
.text:00405766                 jnb     short loc_405774
.text:00405768                 mov     esi, [esp+4Ch+arg_0]
.text:0040576C                 mov     eax, [esp+4Ch+var_34]
.text:00405770                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00405774
.text:00405774 loc_405774:                             ; CODE XREF: sub_405110+656↑j
.text:00405774                 inc     [esp+4Ch+var_34]
.text:00405778                 mov     ecx, [esp+4Ch+arg_4]
.text:0040577C                 cmp     [esp+4Ch+var_34], ecx
.text:00405780                 jnb     short loc_405795
.text:00405782                 mov     cl, bl
.text:00405784                 mov     esi, [esp+4Ch+arg_0]
.text:00405788                 mov     edi, [esp+4Ch+var_34]
.text:0040578C                 shr     cl, 6
.text:0040578F                 add     cl, 30h ; '0'
.text:00405792                 mov     [edi+esi], cl
.text:00405795
.text:00405795 loc_405795:                             ; CODE XREF: sub_405110+670↑j
.text:00405795                 inc     [esp+4Ch+var_34]
.text:00405799                 mov     edi, [esp+4Ch+arg_4]
.text:0040579D                 cmp     [esp+4Ch+var_34], edi
.text:004057A1                 jnb     short loc_4057B9
.text:004057A3                 mov     cl, bl
.text:004057A5                 mov     esi, [esp+4Ch+arg_0]
.text:004057A9                 shr     cl, 3
.text:004057AC                 mov     edi, [esp+4Ch+var_34]
.text:004057B0                 and     cl, 7
.text:004057B3                 add     cl, 30h ; '0'
.text:004057B6                 mov     [edi+esi], cl
.text:004057B9
.text:004057B9 loc_4057B9:                             ; CODE XREF: sub_405110+691↑j
.text:004057B9                 inc     [esp+4Ch+var_34]
.text:004057BD                 and     bl, 7
.text:004057C0                 add     bl, 30h ; '0'
.text:004057C3                 lea     esi, [esi+0]
.text:004057C9                 lea     edi, [edi+0]
.text:004057D0
.text:004057D0 loc_4057D0:                             ; CODE XREF: sub_405110+645↑j
.text:004057D0                                         ; sub_405110+64C↑j
.text:004057D0                 lea     eax, [ebp+1]
.text:004057D3                 cmp     edx, eax
.text:004057D5                 jbe     loc_4054D0
.text:004057DB                 mov     ebp, [esp+4Ch+arg_4]
.text:004057DF                 cmp     [esp+4Ch+var_34], ebp
.text:004057E3                 jnb     short loc_4057F0
.text:004057E5                 mov     ecx, [esp+4Ch+arg_0]
.text:004057E9                 mov     edi, [esp+4Ch+var_34]
.text:004057ED                 mov     [edi+ecx], bl
.text:004057F0
.text:004057F0 loc_4057F0:                             ; CODE XREF: sub_405110+6D3↑j
.text:004057F0                 inc     [esp+4Ch+var_34]
.text:004057F4                 mov     ebp, eax
.text:004057F6                 mov     eax, [esp+4Ch+Str]
.text:004057FA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:004057FF                 jmp     loc_405750
.text:00405804 ; ---------------------------------------------------------------------------
.text:00405804
.text:00405804 loc_405804:                             ; CODE XREF: sub_405110+5FF↑j
.text:00405804                 mov     ecx, ds:_pctype
.text:0040580A                 mov     edi, [ecx]
.text:0040580C                 movzx   eax, word ptr [edi+edx*2]
.text:00405810                 and     eax, 157h
.text:00405815                 jmp     loc_405725
.text:00405815 ; ---------------------------------------------------------------------------
.text:0040581A                 align 10h
.text:00405820
.text:00405820 loc_405820:                             ; CODE XREF: sub_405110+5E5↑j
.text:00405820                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00405825                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040582D                 mov     [esp+4Ch+var_28], 0
.text:00405835                 mov     [esp+4Ch+var_29], 1
.text:0040583A                 jz      loc_4059CC
.text:00405840
.text:00405840 loc_405840:                             ; CODE XREF: sub_405110+8CC↓j
.text:00405840                 mov     ecx, [esp+4Ch+arg_C]
.text:00405844                 lea     edx, [esp+4Ch+var_18]
.text:00405848                 mov     edi, [esp+4Ch+Str]
.text:0040584C                 mov     [esp+4Ch+State], edx ; State
.text:00405850                 lea     esi, [esp+4Ch+var_18._State]
.text:00405854                 sub     ecx, ebp
.text:00405856                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040585A                 add     edi, ebp
.text:0040585C                 mov     [esp+4Ch+var_30], edi
.text:00405860                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00405864                 mov     [esp+4Ch+C], esi ; DstCh
.text:00405867                 call    mbrtowc
.text:0040586C                 test    eax, eax
.text:0040586E                 mov     edi, eax
.text:00405870                 jz      short loc_4058B0
.text:00405872                 cmp     eax, 0FFFFFFFFh
.text:00405875                 jz      loc_4059C2
.text:0040587B                 cmp     eax, 0FFFFFFFEh
.text:0040587E                 jz      loc_405982
.text:00405884                 cmp     [esp+4Ch+arg_10], 1
.text:00405889                 jz      short loc_4058C0
.text:0040588B
.text:0040588B loc_40588B:                             ; CODE XREF: sub_405110+7B9↓j
.text:0040588B                                         ; sub_405110+86D↓j
.text:0040588B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00405890                 mov     [esp+4Ch+Type], 157h ; Type
.text:00405898                 mov     [esp+4Ch+C], ecx ; C
.text:0040589B                 call    iswctype
.text:004058A0                 test    eax, eax
.text:004058A2                 jnz     short loc_4058A9
.text:004058A4                 mov     [esp+4Ch+var_29], 0
.text:004058A9
.text:004058A9 loc_4058A9:                             ; CODE XREF: sub_405110+792↑j
.text:004058A9                 mov     [esp+4Ch+var_28], edi
.text:004058AD                 lea     esi, [esi+0]
.text:004058B0
.text:004058B0 loc_4058B0:                             ; CODE XREF: sub_405110+760↑j
.text:004058B0                                         ; sub_405110+87B↓j ...
.text:004058B0                 cmp     [esp+4Ch+var_28], 1
.text:004058B5                 jbe     loc_40572C
.text:004058BB                 jmp     loc_405745
.text:004058C0 ; ---------------------------------------------------------------------------
.text:004058C0
.text:004058C0 loc_4058C0:                             ; CODE XREF: sub_405110+779↑j
.text:004058C0                 cmp     [esp+4Ch+arg_10], eax
.text:004058C4                 mov     edx, 1
.text:004058C9                 jnb     short loc_40588B
.text:004058CB
.text:004058CB loc_4058CB:                             ; CODE XREF: sub_405110+867↓j
.text:004058CB                 mov     ecx, [esp+4Ch+Str]
.text:004058CF                 lea     esi, [edx+ebp]
.text:004058D2                 movsx   eax, byte ptr [esi+ecx]
.text:004058D6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:004058D9                 cmp     eax, 21h
.text:004058DC                 ja      def_4058E2      ; jumptable 004058E2 default case, cases 93,95,97-123
.text:004058E2                 jmp     ds:jpt_4058E2[eax*4] ; switch jump
.text:004058E2 ; ---------------------------------------------------------------------------
.text:004058E9                 align 4
.text:004058EC jpt_4058E2      dd offset loc_40551B    ; DATA XREF: sub_405110+7D2↑r
.text:004058EC                 dd offset loc_40551B    ; jump table for switch statement
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset loc_40551B
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset loc_40551B
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset def_4058E2
.text:004058EC                 dd offset loc_40551B
.text:00405974 ; ---------------------------------------------------------------------------
.text:00405974
.text:00405974 def_4058E2:                             ; CODE XREF: sub_405110+7CC↑j
.text:00405974                                         ; sub_405110+7D2↑j
.text:00405974                                         ; DATA XREF: ...
.text:00405974                 inc     edx             ; jumptable 004058E2 default case, cases 93,95,97-123
.text:00405975                 cmp     edx, edi
.text:00405977                 jb      loc_4058CB
.text:0040597D                 jmp     loc_40588B
.text:00405982 ; ---------------------------------------------------------------------------
.text:00405982
.text:00405982 loc_405982:                             ; CODE XREF: sub_405110+76E↑j
.text:00405982                 cmp     ebp, [esp+4Ch+arg_C]
.text:00405986                 mov     [esp+4Ch+var_29], 0
.text:0040598B                 jnb     loc_4058B0
.text:00405991                 mov     eax, [esp+4Ch+var_30]
.text:00405995                 cmp     byte ptr [eax], 0
.text:00405998                 jz      loc_4058B0
.text:0040599E
.text:0040599E loc_40599E:                             ; CODE XREF: sub_405110+8AB↓j
.text:0040599E                 inc     [esp+4Ch+var_28]
.text:004059A2                 mov     esi, [esp+4Ch+var_28]
.text:004059A6                 lea     eax, [esi+ebp]
.text:004059A9                 cmp     eax, [esp+4Ch+arg_C]
.text:004059AD                 jnb     loc_4058B0
.text:004059B3                 mov     edi, [esp+4Ch+Str]
.text:004059B7                 cmp     byte ptr [eax+edi], 0
.text:004059BB                 jnz     short loc_40599E
.text:004059BD                 jmp     loc_4058B0
.text:004059C2 ; ---------------------------------------------------------------------------
.text:004059C2
.text:004059C2 loc_4059C2:                             ; CODE XREF: sub_405110+765↑j
.text:004059C2                 mov     [esp+4Ch+var_29], 0
.text:004059C7                 jmp     loc_4058B0
.text:004059CC ; ---------------------------------------------------------------------------
.text:004059CC
.text:004059CC loc_4059CC:                             ; CODE XREF: sub_405110+72A↑j
.text:004059CC                 mov     edx, [esp+4Ch+Str]
.text:004059D0                 mov     [esp+4Ch+C], edx ; Str
.text:004059D3                 call    strlen
.text:004059D8                 mov     [esp+4Ch+arg_C], eax
.text:004059DC                 jmp     loc_405840
.text:004059E1 ; ---------------------------------------------------------------------------
.text:004059E1
.text:004059E1 loc_4059E1:                             ; CODE XREF: sub_405110+105↑j
.text:004059E1                                         ; DATA XREF: sub_405110:jpt_405215↑o
.text:004059E1                 mov     dl, bl          ; jumptable 00405215 case 92
.text:004059E3                 jmp     loc_405514
.text:004059E8 ; ---------------------------------------------------------------------------
.text:004059E8
.text:004059E8 loc_4059E8:                             ; CODE XREF: sub_405110+105↑j
.text:004059E8                                         ; sub_405110+902↓j
.text:004059E8                                         ; DATA XREF: ...
.text:004059E8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00405215 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004059ED                 jnz     def_405612      ; jumptable 00405215 cases 37,43-58,65-90,93,95,97-122
.text:004059ED                                         ; jumptable 00405612 default case, cases 34-38,42-44,46,48-59
.text:004059F3                 jmp     loc_40551B      ; jumptable 004058E2 cases 91,92,94,96,124
.text:004059F8 ; ---------------------------------------------------------------------------
.text:004059F8
.text:004059F8 loc_4059F8:                             ; CODE XREF: sub_405110+105↑j
.text:004059F8                                         ; DATA XREF: sub_405110:jpt_405215↑o
.text:004059F8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00405215 cases 123,125
.text:004059FD                 jz      short loc_405A14
.text:004059FF                 cmp     [esp+4Ch+arg_C], 1
.text:00405A04
.text:00405A04 loc_405A04:                             ; CODE XREF: sub_405110+90C↓j
.text:00405A04                 jnz     def_405612      ; jumptable 00405215 cases 37,43-58,65-90,93,95,97-122
.text:00405A04                                         ; jumptable 00405612 default case, cases 34-38,42-44,46,48-59
.text:00405A0A
.text:00405A0A loc_405A0A:                             ; CODE XREF: sub_405110+105↑j
.text:00405A0A                                         ; DATA XREF: sub_405110:jpt_405215↑o
.text:00405A0A                 test    ebp, ebp        ; jumptable 00405215 cases 35,126
.text:00405A0C                 jnz     def_405612      ; jumptable 00405215 cases 37,43-58,65-90,93,95,97-122
.text:00405A0C                                         ; jumptable 00405612 default case, cases 34-38,42-44,46,48-59
.text:00405A12                 jmp     short loc_4059E8 ; jumptable 00405215 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00405A14 ; ---------------------------------------------------------------------------
.text:00405A14
.text:00405A14 loc_405A14:                             ; CODE XREF: sub_405110+8ED↑j
.text:00405A14                 mov     esi, [esp+4Ch+Str]
.text:00405A18                 cmp     byte ptr [esi+1], 0
.text:00405A1C                 jmp     short loc_405A04
.text:00405A1E ; ---------------------------------------------------------------------------
.text:00405A1E
.text:00405A1E loc_405A1E:                             ; CODE XREF: sub_405110:loc_4051AF↑j
.text:00405A1E                 test    ebp, ebp
.text:00405A20                 jnz     short loc_405A2D
.text:00405A22                 cmp     [esp+4Ch+arg_10], 1
.text:00405A27                 jz      loc_40551B      ; jumptable 004058E2 cases 91,92,94,96,124
.text:00405A2D
.text:00405A2D loc_405A2D:                             ; CODE XREF: sub_405110+910↑j
.text:00405A2D                 mov     esi, [esp+4Ch+var_1C]
.text:00405A31                 test    esi, esi
.text:00405A33                 jz      short loc_405A68
.text:00405A35                 mov     edi, [esp+4Ch+var_1C]
.text:00405A39                 movzx   eax, byte ptr [edi]
.text:00405A3C                 test    al, al
.text:00405A3E                 jz      short loc_405A68
.text:00405A40
.text:00405A40 loc_405A40:                             ; CODE XREF: sub_405110+956↓j
.text:00405A40                 mov     ebp, [esp+4Ch+arg_4]
.text:00405A44                 cmp     [esp+4Ch+var_34], ebp
.text:00405A48                 jnb     short loc_405A55
.text:00405A4A                 mov     ecx, [esp+4Ch+arg_0]
.text:00405A4E                 mov     ebx, [esp+4Ch+var_34]
.text:00405A52                 mov     [ebx+ecx], al
.text:00405A55
.text:00405A55 loc_405A55:                             ; CODE XREF: sub_405110+938↑j
.text:00405A55                 inc     [esp+4Ch+var_1C]
.text:00405A59                 inc     [esp+4Ch+var_34]
.text:00405A5D                 mov     edx, [esp+4Ch+var_1C]
.text:00405A61                 movzx   eax, byte ptr [edx]
.text:00405A64                 test    al, al
.text:00405A66                 jnz     short loc_405A40
.text:00405A68
.text:00405A68 loc_405A68:                             ; CODE XREF: sub_405110+923↑j
.text:00405A68                                         ; sub_405110+92E↑j
.text:00405A68                 mov     eax, [esp+4Ch+arg_4]
.text:00405A6C                 cmp     [esp+4Ch+var_34], eax
.text:00405A70                 jnb     short loc_405A7E
.text:00405A72                 mov     edi, [esp+4Ch+arg_0]
.text:00405A76                 mov     esi, [esp+4Ch+var_34]
.text:00405A7A                 mov     byte ptr [esi+edi], 0
.text:00405A7E
.text:00405A7E loc_405A7E:                             ; CODE XREF: sub_405110+960↑j
.text:00405A7E                 mov     eax, [esp+4Ch+var_34]
.text:00405A82                 jmp     loc_40554F
.text:00405A87 ; ---------------------------------------------------------------------------
.text:00405A87
.text:00405A87 loc_405A87:                             ; CODE XREF: sub_405110+95↑j
.text:00405A87                 mov     ebx, [esp+4Ch+Str]
.text:00405A8B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00405A90                 jmp     loc_4051AF
.text:00405A95 ; ---------------------------------------------------------------------------
.text:00405A95
.text:00405A95 loc_405A95:                             ; CODE XREF: sub_405110+3D↑j
.text:00405A95                                         ; DATA XREF: sub_405110:jpt_40514D↑o
.text:00405A95                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040514D case 2
.text:00405A99                 cmp     [esp+4Ch+var_34], edx
.text:00405A9D                 jnb     short loc_405AA6
.text:00405A9F                 mov     ecx, [esp+4Ch+arg_0]
.text:00405AA3                 mov     byte ptr [ecx], 27h ; '''
.text:00405AA6
.text:00405AA6 loc_405AA6:                             ; CODE XREF: sub_405110+98D↑j
.text:00405AA6                 mov     [esp+4Ch+var_34], 1
.text:00405AAE                 mov     [esp+4Ch+var_1C], 4050FEh
.text:00405AB6                 jmp     loc_405196
.text:00405ABB ; ---------------------------------------------------------------------------
.text:00405ABB
.text:00405ABB loc_405ABB:                             ; CODE XREF: sub_405110+3D↑j
.text:00405ABB                                         ; DATA XREF: sub_405110:jpt_40514D↑o
.text:00405ABB                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040514D case 4
.text:00405AC0                 jmp     def_40514D      ; jumptable 0040514D default case, cases 0,1
.text:00405AC5 ; ---------------------------------------------------------------------------
.text:00405AC5
.text:00405AC5 loc_405AC5:                             ; CODE XREF: sub_405110+3D↑j
.text:00405AC5                                         ; DATA XREF: sub_405110:jpt_40514D↑o
.text:00405AC5                 mov     [esp+4Ch+C], 405100h ; jumptable 0040514D cases 5,6
.text:00405ACC                 call    ds:libintl_gettext
.text:00405AD2                 cmp     eax, 405100h
.text:00405AD7                 mov     edi, eax
.text:00405AD9                 jz      short loc_405B50
.text:00405ADB
.text:00405ADB loc_405ADB:                             ; CODE XREF: sub_405110+A45↓j
.text:00405ADB                                         ; sub_405110+A4C↓j
.text:00405ADB                 mov     [esp+4Ch+C], 4050FEh
.text:00405AE2                 call    ds:libintl_gettext
.text:00405AE8                 cmp     eax, 4050FEh
.text:00405AED                 mov     edx, eax
.text:00405AEF                 jz      short loc_405B42
.text:00405AF1
.text:00405AF1 loc_405AF1:                             ; CODE XREF: sub_405110+A37↓j
.text:00405AF1                                         ; sub_405110+A3E↓j
.text:00405AF1                 mov     [esp+4Ch+var_1C], edi
.text:00405AF5                 cmp     byte ptr [edi], 0
.text:00405AF8                 jz      short loc_405B28
.text:00405AFA
.text:00405AFA loc_405AFA:                             ; CODE XREF: sub_405110+A16↓j
.text:00405AFA                 mov     ecx, [esp+4Ch+arg_4]
.text:00405AFE                 cmp     [esp+4Ch+var_34], ecx
.text:00405B02                 jnb     short loc_405B17
.text:00405B04                 mov     ebp, [esp+4Ch+var_1C]
.text:00405B08                 mov     edi, [esp+4Ch+arg_0]
.text:00405B0C                 mov     esi, [esp+4Ch+var_34]
.text:00405B10                 movzx   ebx, byte ptr [ebp+0]
.text:00405B14                 mov     [esi+edi], bl
.text:00405B17
.text:00405B17 loc_405B17:                             ; CODE XREF: sub_405110+9F2↑j
.text:00405B17                 inc     [esp+4Ch+var_1C]
.text:00405B1B                 inc     [esp+4Ch+var_34]
.text:00405B1F                 mov     eax, [esp+4Ch+var_1C]
.text:00405B23                 cmp     byte ptr [eax], 0
.text:00405B26                 jnz     short loc_405AFA
.text:00405B28
.text:00405B28 loc_405B28:                             ; CODE XREF: sub_405110+9E8↑j
.text:00405B28                 mov     [esp+4Ch+var_21], 1
.text:00405B2D                 mov     [esp+4Ch+var_1C], edx
.text:00405B31                 mov     [esp+4Ch+C], edx ; Str
.text:00405B34                 call    strlen
.text:00405B39                 mov     [esp+4Ch+var_20], eax
.text:00405B3D                 jmp     def_40514D      ; jumptable 0040514D default case, cases 0,1
.text:00405B42 ; ---------------------------------------------------------------------------
.text:00405B42
.text:00405B42 loc_405B42:                             ; CODE XREF: sub_405110+9DF↑j
.text:00405B42                 cmp     [esp+4Ch+arg_10], 6
.text:00405B47                 jnz     short loc_405AF1
.text:00405B49                 mov     edx, offset asc_4050FC ; "\"'`"
.text:00405B4E                 jmp     short loc_405AF1
.text:00405B50 ; ---------------------------------------------------------------------------
.text:00405B50
.text:00405B50 loc_405B50:                             ; CODE XREF: sub_405110+9C9↑j
.text:00405B50                 cmp     [esp+4Ch+arg_10], 6
.text:00405B55                 jnz     short loc_405ADB
.text:00405B57                 mov     edi, offset asc_4050FC ; "\"'`"
.text:00405B5C                 jmp     loc_405ADB
.text:00405B5C sub_405110      endp
.text:00405B5C
.text:00405B61 ; ---------------------------------------------------------------------------
.text:00405B61                 jmp     short loc_405B70
.text:00405B61 ; ---------------------------------------------------------------------------
.text:00405B63                 align 10h
.text:00405B70
.text:00405B70 loc_405B70:                             ; CODE XREF: .text:00405B61↑j
.text:00405B70                 sub     esp, 0Ch
.text:00405B73                 mov     [esp+4], ebx
.text:00405B77                 mov     [esp+8], esi
.text:00405B7B                 call    _errno
.text:00405B80                 mov     esi, [eax]
.text:00405B82                 mov     dword ptr [esp], 24h ; '$'
.text:00405B89                 call    sub_40A950
.text:00405B8E                 mov     edx, [esp+10h]
.text:00405B92                 mov     ebx, eax
.text:00405B94                 test    edx, edx
.text:00405B96                 jz      short loc_405BE1
.text:00405B98
.text:00405B98 loc_405B98:                             ; CODE XREF: .text:00405BE6↓j
.text:00405B98                 mov     ecx, [edx]
.text:00405B9A                 mov     [ebx], ecx
.text:00405B9C                 mov     ecx, [edx+4]
.text:00405B9F                 mov     [ebx+4], ecx
.text:00405BA2                 mov     ecx, [edx+8]
.text:00405BA5                 mov     [ebx+8], ecx
.text:00405BA8                 mov     ecx, [edx+0Ch]
.text:00405BAB                 mov     [ebx+0Ch], ecx
.text:00405BAE                 mov     ecx, [edx+10h]
.text:00405BB1                 mov     [ebx+10h], ecx
.text:00405BB4                 mov     ecx, [edx+14h]
.text:00405BB7                 mov     [ebx+14h], ecx
.text:00405BBA                 mov     ecx, [edx+18h]
.text:00405BBD                 mov     [ebx+18h], ecx
.text:00405BC0                 mov     ecx, [edx+1Ch]
.text:00405BC3                 mov     [ebx+1Ch], ecx
.text:00405BC6                 mov     ecx, [edx+20h]
.text:00405BC9                 mov     [ebx+20h], ecx
.text:00405BCC                 call    _errno
.text:00405BD1                 mov     [eax], esi
.text:00405BD3                 mov     esi, [esp+8]
.text:00405BD7                 mov     eax, ebx
.text:00405BD9                 mov     ebx, [esp+4]
.text:00405BDD                 add     esp, 0Ch
.text:00405BE0                 retn
.text:00405BE1 ; ---------------------------------------------------------------------------
.text:00405BE1
.text:00405BE1 loc_405BE1:                             ; CODE XREF: .text:00405B96↑j
.text:00405BE1                 mov     edx, offset dword_41B1F0
.text:00405BE6                 jmp     short loc_405B98
.text:00405BE6 ; ---------------------------------------------------------------------------
.text:00405BE8                 align 10h
.text:00405BF0                 mov     eax, [esp+4]
.text:00405BF4                 test    eax, eax
.text:00405BF6                 jz      short loc_405C00
.text:00405BF8
.text:00405BF8 loc_405BF8:                             ; CODE XREF: .text:00405C05↓j
.text:00405BF8                 mov     eax, [eax]
.text:00405BFA                 retn
.text:00405BFA ; ---------------------------------------------------------------------------
.text:00405BFB                 align 10h
.text:00405C00
.text:00405C00 loc_405C00:                             ; CODE XREF: .text:00405BF6↑j
.text:00405C00                 mov     eax, offset dword_41B1F0
.text:00405C05                 jmp     short loc_405BF8
.text:00405C05 ; ---------------------------------------------------------------------------
.text:00405C07                 align 10h
.text:00405C10                 mov     edx, [esp+4]
.text:00405C14                 test    edx, edx
.text:00405C16                 jz      short loc_405C20
.text:00405C18
.text:00405C18 loc_405C18:                             ; CODE XREF: .text:00405C25↓j
.text:00405C18                 mov     ecx, [esp+8]
.text:00405C1C                 mov     [edx], ecx
.text:00405C1E                 retn
.text:00405C1E ; ---------------------------------------------------------------------------
.text:00405C1F                 align 10h
.text:00405C20
.text:00405C20 loc_405C20:                             ; CODE XREF: .text:00405C16↑j
.text:00405C20                 mov     edx, offset dword_41B1F0
.text:00405C25                 jmp     short loc_405C18
.text:00405C25 ; ---------------------------------------------------------------------------
.text:00405C27                 align 10h
.text:00405C30                 sub     esp, 8
.text:00405C33                 mov     eax, [esp+0Ch]
.text:00405C37                 movzx   ecx, byte ptr [esp+10h]
.text:00405C3C                 mov     [esp], ebx
.text:00405C3F                 mov     ebx, [esp+14h]
.text:00405C43                 mov     [esp+4], esi
.text:00405C47                 mov     dl, cl
.text:00405C49                 shr     dl, 5
.text:00405C4C                 movzx   edx, dl
.text:00405C4F                 shl     edx, 2
.text:00405C52                 test    eax, eax
.text:00405C54                 lea     esi, [edx+eax+4]
.text:00405C58                 jz      short loc_405C80
.text:00405C5A
.text:00405C5A loc_405C5A:                             ; CODE XREF: .text:00405C86↓j
.text:00405C5A                 mov     edx, [esi]
.text:00405C5C                 and     ecx, 1Fh
.text:00405C5F                 and     ebx, 1
.text:00405C62                 mov     eax, edx
.text:00405C64                 shr     eax, cl
.text:00405C66                 and     eax, 1
.text:00405C69                 xor     ebx, eax
.text:00405C6B                 shl     ebx, cl
.text:00405C6D                 xor     edx, ebx
.text:00405C6F                 mov     [esi], edx
.text:00405C71                 mov     ebx, [esp]
.text:00405C74                 mov     esi, [esp+4]
.text:00405C78                 add     esp, 8
.text:00405C7B                 retn
.text:00405C7B ; ---------------------------------------------------------------------------
.text:00405C7C                 align 10h
.text:00405C80
.text:00405C80 loc_405C80:                             ; CODE XREF: .text:00405C58↑j
.text:00405C80                 lea     esi, dword_41B1F4[edx]
.text:00405C86                 jmp     short loc_405C5A
.text:00405C86 ; ---------------------------------------------------------------------------
.text:00405C88                 align 10h
.text:00405C90                 sub     esp, 2Ch
.text:00405C93                 mov     [esp+24h], ebx
.text:00405C97                 mov     ebx, [esp+40h]
.text:00405C9B                 mov     [esp+28h], esi
.text:00405C9F                 test    ebx, ebx
.text:00405CA1                 jz      short loc_405CF0
.text:00405CA3
.text:00405CA3 loc_405CA3:                             ; CODE XREF: .text:00405CF5↓j
.text:00405CA3                 call    _errno
.text:00405CA8                 mov     esi, [eax]
.text:00405CAA                 mov     [esp+14h], ebx
.text:00405CAE                 mov     edx, [ebx]
.text:00405CB0                 mov     ecx, [esp+38h]
.text:00405CB4                 mov     ebx, [esp+3Ch]
.text:00405CB8                 mov     [esp+10h], edx
.text:00405CBC                 mov     edx, [esp+34h]
.text:00405CC0                 mov     [esp+0Ch], ebx
.text:00405CC4                 mov     [esp+8], ecx
.text:00405CC8                 mov     [esp+4], edx
.text:00405CCC                 mov     edx, [esp+30h]
.text:00405CD0                 mov     [esp], edx
.text:00405CD3                 call    sub_405110
.text:00405CD8                 mov     ebx, eax
.text:00405CDA                 call    _errno
.text:00405CDF                 mov     [eax], esi
.text:00405CE1                 mov     esi, [esp+28h]
.text:00405CE5                 mov     eax, ebx
.text:00405CE7                 mov     ebx, [esp+24h]
.text:00405CEB                 add     esp, 2Ch
.text:00405CEE                 retn
.text:00405CEE ; ---------------------------------------------------------------------------
.text:00405CEF                 align 10h
.text:00405CF0
.text:00405CF0 loc_405CF0:                             ; CODE XREF: .text:00405CA1↑j
.text:00405CF0                 mov     ebx, offset dword_41B1F0
.text:00405CF5                 jmp     short loc_405CA3
.text:00405CF5 ; ---------------------------------------------------------------------------
.text:00405CF7                 align 10h
.text:00405D00                 push    ebp
.text:00405D01                 push    edi
.text:00405D02                 push    esi
.text:00405D03                 push    ebx
.text:00405D04                 sub     esp, 2Ch
.text:00405D07                 mov     ebp, [esp+48h]
.text:00405D0B                 call    _errno
.text:00405D10                 mov     edx, [eax]
.text:00405D12                 test    ebp, ebp
.text:00405D14                 mov     ebx, ebp
.text:00405D16                 mov     [esp+28h], edx
.text:00405D1A                 jz      loc_405DD0
.text:00405D20
.text:00405D20 loc_405D20:                             ; CODE XREF: .text:00405DD5↓j
.text:00405D20                 call    _errno
.text:00405D25                 mov     edi, [eax]
.text:00405D27                 mov     esi, ebp
.text:00405D29                 mov     [esp+14h], ebx
.text:00405D2D                 mov     ecx, [ebx]
.text:00405D2F                 mov     dword ptr [esp], 0
.text:00405D36                 mov     edx, [esp+44h]
.text:00405D3A                 mov     dword ptr [esp+4], 0
.text:00405D42                 mov     eax, [esp+40h]
.text:00405D46                 mov     [esp+10h], ecx
.text:00405D4A                 mov     [esp+0Ch], edx
.text:00405D4E                 mov     [esp+8], eax
.text:00405D52                 call    sub_405110
.text:00405D57                 mov     ebx, eax
.text:00405D59                 call    _errno
.text:00405D5E                 mov     [eax], edi
.text:00405D60                 lea     edi, [ebx+1]
.text:00405D63                 mov     [esp], edi
.text:00405D66                 call    sub_40A950
.text:00405D6B                 mov     [esp+24h], eax
.text:00405D6F                 test    ebp, ebp
.text:00405D71                 jz      short loc_405DC2
.text:00405D73
.text:00405D73 loc_405D73:                             ; CODE XREF: .text:00405DC7↓j
.text:00405D73                 call    _errno
.text:00405D78                 mov     ebp, [eax]
.text:00405D7A                 mov     [esp+14h], esi
.text:00405D7E                 mov     ecx, [esi]
.text:00405D80                 mov     [esp+4], edi
.text:00405D84                 mov     edx, [esp+44h]
.text:00405D88                 mov     esi, [esp+24h]
.text:00405D8C                 mov     [esp+10h], ecx
.text:00405D90                 mov     eax, [esp+40h]
.text:00405D94                 mov     [esp+0Ch], edx
.text:00405D98                 mov     [esp], esi
.text:00405D9B                 mov     [esp+8], eax
.text:00405D9F                 call    sub_405110
.text:00405DA4                 call    _errno
.text:00405DA9                 mov     [eax], ebp
.text:00405DAB                 call    _errno
.text:00405DB0                 mov     ebx, [esp+28h]
.text:00405DB4                 mov     [eax], ebx
.text:00405DB6                 mov     eax, [esp+24h]
.text:00405DBA                 add     esp, 2Ch
.text:00405DBD                 pop     ebx
.text:00405DBE                 pop     esi
.text:00405DBF                 pop     edi
.text:00405DC0                 pop     ebp
.text:00405DC1                 retn
.text:00405DC2 ; ---------------------------------------------------------------------------
.text:00405DC2
.text:00405DC2 loc_405DC2:                             ; CODE XREF: .text:00405D71↑j
.text:00405DC2                 mov     esi, offset dword_41B1F0
.text:00405DC7                 jmp     short loc_405D73
.text:00405DC7 ; ---------------------------------------------------------------------------
.text:00405DC9                 align 10h
.text:00405DD0
.text:00405DD0 loc_405DD0:                             ; CODE XREF: .text:00405D1A↑j
.text:00405DD0                 mov     ebx, offset dword_41B1F0
.text:00405DD5                 jmp     loc_405D20
.text:00405DD5 ; ---------------------------------------------------------------------------
.text:00405DDA                 align 10h
.text:00405DE0                 sub     esp, 1Ch
.text:00405DE3                 mov     edx, [esp+24h]
.text:00405DE7                 mov     dword ptr [esp+0Ch], offset dword_41B1F0
.text:00405DEF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405DF7                 mov     [esp+4], edx
.text:00405DFB                 mov     edx, [esp+20h]
.text:00405DFF                 mov     [esp], edx
.text:00405E02                 call    sub_406250
.text:00405E07                 add     esp, 1Ch
.text:00405E0A                 retn
.text:00405E0A ; ---------------------------------------------------------------------------
.text:00405E0B                 align 10h
.text:00405E10                 sub     esp, 1Ch
.text:00405E13                 mov     edx, [esp+20h]
.text:00405E17                 mov     dword ptr [esp+0Ch], offset dword_41B1F0
.text:00405E1F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405E27                 mov     [esp+4], edx
.text:00405E2B                 mov     dword ptr [esp], 0
.text:00405E32                 call    sub_406250
.text:00405E37                 add     esp, 1Ch
.text:00405E3A                 retn
.text:00405E3A ; ---------------------------------------------------------------------------
.text:00405E3B                 align 10h
.text:00405E40
.text:00405E40 ; =============== S U B R O U T I N E =======================================
.text:00405E40
.text:00405E40
.text:00405E40 ; int __cdecl sub_405E40(int, int, char *)
.text:00405E40 sub_405E40      proc near               ; CODE XREF: sub_40ABE0+1A↓p
.text:00405E40                                         ; sub_40AC10+1A↓p ...
.text:00405E40
.text:00405E40 var_BC          = dword ptr -0BCh
.text:00405E40 var_B8          = dword ptr -0B8h
.text:00405E40 var_B4          = dword ptr -0B4h
.text:00405E40 var_B0          = dword ptr -0B0h
.text:00405E40 var_AC          = dword ptr -0ACh
.text:00405E40 var_A8          = dword ptr -0A8h
.text:00405E40 var_A4          = dword ptr -0A4h
.text:00405E40 var_A0          = dword ptr -0A0h
.text:00405E40 var_9C          = dword ptr -9Ch
.text:00405E40 var_98          = dword ptr -98h
.text:00405E40 var_94          = dword ptr -94h
.text:00405E40 var_90          = dword ptr -90h
.text:00405E40 var_8C          = dword ptr -8Ch
.text:00405E40 var_7C          = dword ptr -7Ch
.text:00405E40 var_78          = dword ptr -78h
.text:00405E40 var_74          = dword ptr -74h
.text:00405E40 var_70          = dword ptr -70h
.text:00405E40 var_6C          = dword ptr -6Ch
.text:00405E40 var_68          = dword ptr -68h
.text:00405E40 var_64          = dword ptr -64h
.text:00405E40 var_60          = dword ptr -60h
.text:00405E40 var_5C          = dword ptr -5Ch
.text:00405E40 var_4C          = dword ptr -4Ch
.text:00405E40 var_48          = dword ptr -48h
.text:00405E40 var_44          = dword ptr -44h
.text:00405E40 var_40          = dword ptr -40h
.text:00405E40 var_3C          = dword ptr -3Ch
.text:00405E40 var_38          = dword ptr -38h
.text:00405E40 var_34          = dword ptr -34h
.text:00405E40 var_30          = dword ptr -30h
.text:00405E40 var_2C          = dword ptr -2Ch
.text:00405E40 arg_0           = dword ptr  4
.text:00405E40 arg_4           = dword ptr  8
.text:00405E40 arg_8           = dword ptr  0Ch
.text:00405E40
.text:00405E40                 push    ebp
.text:00405E41                 xor     eax, eax
.text:00405E43                 mov     ecx, 8
.text:00405E48                 push    edi
.text:00405E49                 push    esi
.text:00405E4A                 push    ebx
.text:00405E4B                 sub     esp, 0ACh
.text:00405E51                 mov     ebp, [esp+0BCh+arg_4]
.text:00405E58                 cld
.text:00405E59                 lea     edi, [esp+0BCh+var_A8]
.text:00405E5D                 mov     [esp+0BCh+var_AC], ebp
.text:00405E61                 rep stosd
.text:00405E63                 mov     eax, [esp+0BCh+var_8C]
.text:00405E67                 mov     edi, [esp+0BCh+var_AC]
.text:00405E6B                 mov     esi, [esp+0BCh+var_A8]
.text:00405E6F                 mov     [esp+0BCh+var_5C], eax
.text:00405E73                 mov     ebp, [esp+0BCh+var_A4]
.text:00405E77                 mov     eax, [esp+0BCh+var_AC]
.text:00405E7B                 mov     [esp+0BCh+var_7C], edi
.text:00405E7F                 mov     ecx, [esp+0BCh+var_94]
.text:00405E83                 mov     edi, [esp+0BCh+var_A0]
.text:00405E87                 mov     [esp+0BCh+var_78], esi
.text:00405E8B                 mov     edx, [esp+0BCh+var_90]
.text:00405E8F                 mov     esi, [esp+0BCh+var_9C]
.text:00405E93                 mov     [esp+0BCh+var_4C], eax
.text:00405E97                 mov     ebx, [esp+0BCh+var_98]
.text:00405E9B                 mov     eax, [esp+0BCh+var_A8]
.text:00405E9F                 mov     [esp+0BCh+var_74], ebp
.text:00405EA3                 mov     [esp+0BCh+var_70], edi
.text:00405EA7                 mov     [esp+0BCh+var_6C], esi
.text:00405EAB                 mov     [esp+0BCh+var_68], ebx
.text:00405EAF                 mov     [esp+0BCh+var_64], ecx
.text:00405EB3                 mov     [esp+0BCh+var_60], edx
.text:00405EB7                 mov     [esp+0BCh+var_48], eax
.text:00405EBB                 mov     [esp+0BCh+var_44], ebp
.text:00405EBF                 mov     [esp+0BCh+var_40], edi
.text:00405EC3                 mov     [esp+0BCh+var_3C], esi
.text:00405ECA                 mov     [esp+0BCh+var_38], ebx
.text:00405ED1                 mov     ebx, [esp+0BCh+var_8C]
.text:00405ED5                 mov     [esp+0BCh+var_30], edx
.text:00405EDC                 mov     edx, [esp+0BCh+arg_8]
.text:00405EE3                 mov     [esp+0BCh+var_34], ecx
.text:00405EEA                 lea     ecx, [esp+0BCh+var_4C]
.text:00405EEE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00405EF2                 mov     edx, [esp+0BCh+arg_0]
.text:00405EF9                 mov     [esp+0BCh+var_2C], ebx
.text:00405F00                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00405F04                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00405F0C                 mov     [esp+0BCh+var_BC], edx ; int
.text:00405F0F                 call    sub_406250
.text:00405F14                 add     esp, 0ACh
.text:00405F1A                 pop     ebx
.text:00405F1B                 pop     esi
.text:00405F1C                 pop     edi
.text:00405F1D                 pop     ebp
.text:00405F1E                 retn
.text:00405F1E sub_405E40      endp
.text:00405F1E
.text:00405F1E ; ---------------------------------------------------------------------------
.text:00405F1F                 align 10h
.text:00405F20                 push    ebp
.text:00405F21                 xor     eax, eax
.text:00405F23                 mov     ecx, 8
.text:00405F28                 push    edi
.text:00405F29                 push    esi
.text:00405F2A                 push    ebx
.text:00405F2B                 sub     esp, 0ACh
.text:00405F31                 mov     edx, [esp+0C4h]
.text:00405F38                 cld
.text:00405F39                 lea     edi, [esp+14h]
.text:00405F3D                 mov     [esp+10h], edx
.text:00405F41                 rep stosd
.text:00405F43                 mov     eax, [esp+30h]
.text:00405F47                 mov     ebp, [esp+10h]
.text:00405F4B                 mov     edi, [esp+14h]
.text:00405F4F                 mov     [esp+60h], eax
.text:00405F53                 mov     esi, [esp+20h]
.text:00405F57                 mov     eax, [esp+10h]
.text:00405F5B                 mov     [esp+40h], ebp
.text:00405F5F                 mov     ecx, [esp+28h]
.text:00405F63                 mov     ebp, [esp+18h]
.text:00405F67                 mov     [esp+44h], edi
.text:00405F6B                 mov     edx, [esp+2Ch]
.text:00405F6F                 mov     edi, [esp+1Ch]
.text:00405F73                 mov     [esp+70h], eax
.text:00405F77                 mov     ebx, [esp+24h]
.text:00405F7B                 mov     eax, [esp+14h]
.text:00405F7F                 mov     [esp+48h], ebp
.text:00405F83                 mov     [esp+4Ch], edi
.text:00405F87                 mov     [esp+50h], esi
.text:00405F8B                 mov     [esp+54h], ebx
.text:00405F8F                 mov     [esp+58h], ecx
.text:00405F93                 mov     [esp+5Ch], edx
.text:00405F97                 mov     [esp+74h], eax
.text:00405F9B                 mov     [esp+78h], ebp
.text:00405F9F                 mov     [esp+7Ch], edi
.text:00405FA3                 mov     [esp+80h], esi
.text:00405FAA                 mov     [esp+84h], ebx
.text:00405FB1                 mov     esi, [esp+30h]
.text:00405FB5                 lea     ebx, [esp+70h]
.text:00405FB9                 mov     [esp+8Ch], edx
.text:00405FC0                 mov     edx, [esp+0C8h]
.text:00405FC7                 mov     [esp+88h], ecx
.text:00405FCE                 mov     ecx, [esp+0CCh]
.text:00405FD5                 mov     [esp+4], edx
.text:00405FD9                 mov     edx, [esp+0C0h]
.text:00405FE0                 mov     [esp+90h], esi
.text:00405FE7                 mov     [esp+0Ch], ebx
.text:00405FEB                 mov     [esp+8], ecx
.text:00405FEF                 mov     [esp], edx
.text:00405FF2                 call    sub_406250
.text:00405FF7                 add     esp, 0ACh
.text:00405FFD                 pop     ebx
.text:00405FFE                 pop     esi
.text:00405FFF                 pop     edi
.text:00406000                 pop     ebp
.text:00406001                 retn
.text:00406001 ; ---------------------------------------------------------------------------
.text:00406002                 align 10h
.text:00406010                 push    ebp
.text:00406011                 xor     eax, eax
.text:00406013                 mov     ecx, 8
.text:00406018                 push    edi
.text:00406019                 push    esi
.text:0040601A                 push    ebx
.text:0040601B                 sub     esp, 0ACh
.text:00406021                 mov     edi, [esp+0C0h]
.text:00406028                 cld
.text:00406029                 mov     [esp+10h], edi
.text:0040602D                 lea     edi, [esp+14h]
.text:00406031                 rep stosd
.text:00406033                 mov     eax, [esp+30h]
.text:00406037                 mov     esi, [esp+10h]
.text:0040603B                 mov     ebx, [esp+14h]
.text:0040603F                 mov     [esp+60h], eax
.text:00406043                 mov     ebp, [esp+18h]
.text:00406047                 mov     eax, [esp+10h]
.text:0040604B                 mov     [esp+40h], esi
.text:0040604F                 mov     edi, [esp+1Ch]
.text:00406053                 mov     esi, [esp+20h]
.text:00406057                 mov     [esp+44h], ebx
.text:0040605B                 mov     ecx, [esp+28h]
.text:0040605F                 mov     edx, [esp+2Ch]
.text:00406063                 mov     [esp+70h], eax
.text:00406067                 mov     ebx, [esp+24h]
.text:0040606B                 mov     eax, [esp+14h]
.text:0040606F                 mov     [esp+48h], ebp
.text:00406073                 mov     [esp+4Ch], edi
.text:00406077                 mov     [esp+50h], esi
.text:0040607B                 mov     [esp+54h], ebx
.text:0040607F                 mov     [esp+58h], ecx
.text:00406083                 mov     [esp+5Ch], edx
.text:00406087                 mov     [esp+74h], eax
.text:0040608B                 mov     [esp+78h], ebp
.text:0040608F                 mov     [esp+7Ch], edi
.text:00406093                 mov     [esp+80h], esi
.text:0040609A                 mov     [esp+84h], ebx
.text:004060A1                 mov     [esp+8Ch], edx
.text:004060A8                 lea     edx, [esp+70h]
.text:004060AC                 mov     [esp+88h], ecx
.text:004060B3                 mov     ecx, [esp+30h]
.text:004060B7                 mov     [esp+0Ch], edx
.text:004060BB                 mov     edx, [esp+0C4h]
.text:004060C2                 mov     [esp+90h], ecx
.text:004060C9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004060D1                 mov     [esp+4], edx
.text:004060D5                 mov     dword ptr [esp], 0
.text:004060DC                 call    sub_406250
.text:004060E1                 add     esp, 0ACh
.text:004060E7                 pop     ebx
.text:004060E8                 pop     esi
.text:004060E9                 pop     edi
.text:004060EA                 pop     ebp
.text:004060EB                 retn
.text:004060EB ; ---------------------------------------------------------------------------
.text:004060EC                 align 10h
.text:004060F0                 push    edi
.text:004060F1                 push    esi
.text:004060F2                 push    ebx
.text:004060F3                 sub     esp, 40h
.text:004060F6                 mov     edx, ds:dword_41B1FC
.text:004060FC                 mov     ebx, ds:dword_41B1F0
.text:00406102                 mov     esi, ds:dword_41B1F8
.text:00406108                 mov     edi, ds:dword_41B1F4
.text:0040610E                 mov     [esp+1Ch], edx
.text:00406112                 mov     ecx, ds:dword_41B200
.text:00406118                 mov     edx, ds:dword_41B210
.text:0040611E                 mov     [esp+10h], ebx
.text:00406122                 mov     ebx, ds:dword_41B204
.text:00406128                 mov     [esp+30h], edx
.text:0040612C                 movzx   edx, byte ptr [esp+54h]
.text:00406131                 mov     [esp+18h], esi
.text:00406135                 mov     esi, ds:dword_41B20C
.text:0040613B                 mov     [esp+14h], edi
.text:0040613F                 mov     edi, ds:dword_41B208
.text:00406145                 mov     [esp+20h], ecx
.text:00406149                 mov     cl, dl
.text:0040614B                 shr     cl, 5
.text:0040614E                 mov     [esp+24h], ebx
.text:00406152                 movzx   ebx, cl
.text:00406155                 mov     [esp+2Ch], esi
.text:00406159                 lea     esi, [esp+10h]
.text:0040615D                 mov     [esp+28h], edi
.text:00406161                 lea     edi, [esi+ebx*4]
.text:00406164                 mov     ebx, edx
.text:00406166                 mov     edx, [edi+4]
.text:00406169                 and     ebx, 1Fh
.text:0040616C                 mov     cl, bl
.text:0040616E                 mov     eax, edx
.text:00406170                 shr     eax, cl
.text:00406172                 and     eax, 1
.text:00406175                 xor     eax, 1
.text:00406178                 shl     eax, cl
.text:0040617A                 xor     edx, eax
.text:0040617C                 mov     [edi+4], edx
.text:0040617F                 mov     edx, [esp+50h]
.text:00406183                 mov     [esp+0Ch], esi
.text:00406187                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040618F                 mov     [esp+4], edx
.text:00406193                 mov     dword ptr [esp], 0
.text:0040619A                 call    sub_406250
.text:0040619F                 add     esp, 40h
.text:004061A2                 pop     ebx
.text:004061A3                 pop     esi
.text:004061A4                 pop     edi
.text:004061A5                 retn
.text:004061A5 ; ---------------------------------------------------------------------------
.text:004061A6                 align 10h
.text:004061B0
.text:004061B0 ; =============== S U B R O U T I N E =======================================
.text:004061B0
.text:004061B0
.text:004061B0 ; int __cdecl sub_4061B0(char *)
.text:004061B0 sub_4061B0      proc near               ; CODE XREF: sub_402250+402↑p
.text:004061B0                                         ; sub_402250+7E6↑p ...
.text:004061B0
.text:004061B0 var_4C          = dword ptr -4Ch
.text:004061B0 var_48          = dword ptr -48h
.text:004061B0 var_44          = dword ptr -44h
.text:004061B0 var_40          = dword ptr -40h
.text:004061B0 var_3C          = dword ptr -3Ch
.text:004061B0 var_38          = dword ptr -38h
.text:004061B0 var_34          = dword ptr -34h
.text:004061B0 var_30          = dword ptr -30h
.text:004061B0 var_2C          = dword ptr -2Ch
.text:004061B0 var_28          = dword ptr -28h
.text:004061B0 var_24          = dword ptr -24h
.text:004061B0 var_20          = dword ptr -20h
.text:004061B0 var_1C          = dword ptr -1Ch
.text:004061B0 arg_0           = dword ptr  4
.text:004061B0
.text:004061B0                 sub     esp, 4Ch
.text:004061B3                 mov     ecx, ds:dword_41B1F0
.text:004061B9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:004061C1                 mov     edx, ds:dword_41B1F4
.text:004061C7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:004061CE                 mov     [esp+4Ch+var_3C], ecx
.text:004061D2                 mov     ecx, ds:dword_41B1FC
.text:004061D8                 mov     [esp+4Ch+var_38], edx
.text:004061DC                 mov     edx, ds:dword_41B1F8
.text:004061E2                 mov     [esp+4Ch+var_30], ecx
.text:004061E6                 mov     ecx, ds:dword_41B200
.text:004061EC                 mov     eax, edx
.text:004061EE                 shr     eax, 1Ah
.text:004061F1                 and     eax, 1
.text:004061F4                 xor     eax, 1
.text:004061F7                 mov     [esp+4Ch+var_2C], ecx
.text:004061FB                 shl     eax, 1Ah
.text:004061FE                 mov     ecx, ds:dword_41B204
.text:00406204                 xor     edx, eax
.text:00406206                 mov     [esp+4Ch+var_34], edx
.text:0040620A                 mov     edx, [esp+4Ch+arg_0]
.text:0040620E                 mov     [esp+4Ch+var_28], ecx
.text:00406212                 mov     ecx, ds:dword_41B208
.text:00406218                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040621C                 mov     [esp+4Ch+var_24], ecx
.text:00406220                 mov     ecx, ds:dword_41B20C
.text:00406226                 mov     [esp+4Ch+var_20], ecx
.text:0040622A                 mov     ecx, ds:dword_41B210
.text:00406230                 mov     [esp+4Ch+var_1C], ecx
.text:00406234                 lea     ecx, [esp+4Ch+var_3C]
.text:00406238                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040623C                 call    sub_406250
.text:00406241                 add     esp, 4Ch
.text:00406244                 retn
.text:00406244 sub_4061B0      endp
.text:00406244
.text:00406244 ; ---------------------------------------------------------------------------
.text:00406245                 align 10h
.text:00406250
.text:00406250 ; =============== S U B R O U T I N E =======================================
.text:00406250
.text:00406250
.text:00406250 ; int __cdecl sub_406250(int, char *, int, int)
.text:00406250 sub_406250      proc near               ; CODE XREF: .text:00405E02↑p
.text:00406250                                         ; .text:00405E32↑p ...
.text:00406250
.text:00406250 Block           = dword ptr -2Ch
.text:00406250 var_28          = dword ptr -28h
.text:00406250 Str             = dword ptr -24h
.text:00406250 var_20          = dword ptr -20h
.text:00406250 var_1C          = dword ptr -1Ch
.text:00406250 var_18          = dword ptr -18h
.text:00406250 var_14          = dword ptr -14h
.text:00406250 arg_0           = dword ptr  4
.text:00406250 arg_4           = dword ptr  8
.text:00406250 arg_8           = dword ptr  0Ch
.text:00406250 arg_C           = dword ptr  10h
.text:00406250
.text:00406250                 push    ebp
.text:00406251                 push    edi
.text:00406252                 push    esi
.text:00406253                 push    ebx
.text:00406254                 sub     esp, 1Ch
.text:00406257                 call    _errno
.text:0040625C                 mov     edx, [eax]
.text:0040625E                 mov     eax, [esp+2Ch+arg_0]
.text:00406262                 mov     [esp+2Ch+var_14], edx
.text:00406266                 test    eax, eax
.text:00406268                 js      loc_40640A
.text:0040626E                 mov     eax, [esp+2Ch+arg_0]
.text:00406272                 cmp     dword_41A020, eax
.text:00406278                 ja      short loc_4062F0
.text:0040627A                 mov     esi, eax
.text:0040627C                 inc     esi
.text:0040627D                 cmp     esi, 1FFFFFFFh
.text:00406283                 ja      loc_40640F
.text:00406289                 mov     ebx, off_41A02C
.text:0040628F                 cmp     ebx, offset dword_41A024
.text:00406295                 jz      loc_4063E1
.text:0040629B
.text:0040629B loc_40629B:                             ; CODE XREF: sub_406250+1B5↓j
.text:0040629B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040629E                 lea     ecx, ds:0[esi*8]
.text:004062A5                 mov     ebp, esi
.text:004062A7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:004062AB                 call    sub_40A9E0
.text:004062B0                 mov     off_41A02C, eax
.text:004062B5                 mov     ebx, dword_41A020
.text:004062BB                 sub     ebp, ebx
.text:004062BD                 lea     edi, [eax+ebx*8]
.text:004062C0                 lea     eax, ds:0[ebp*8]
.text:004062C7                 cmp     eax, 7
.text:004062CA                 jbe     short loc_4062E0
.text:004062CC                 test    edi, 4
.text:004062D2                 jz      short loc_4062E0
.text:004062D4                 mov     dword ptr [edi], 0
.text:004062DA                 sub     eax, 4
.text:004062DD                 add     edi, 4
.text:004062E0
.text:004062E0 loc_4062E0:                             ; CODE XREF: sub_406250+7A↑j
.text:004062E0                                         ; sub_406250+82↑j
.text:004062E0                 cld
.text:004062E1                 mov     ecx, eax
.text:004062E3                 shr     ecx, 2
.text:004062E6                 xor     eax, eax
.text:004062E8                 rep stosd
.text:004062EA                 mov     dword_41A020, esi
.text:004062F0
.text:004062F0 loc_4062F0:                             ; CODE XREF: sub_406250+28↑j
.text:004062F0                 mov     esi, off_41A02C
.text:004062F6                 mov     eax, [esp+2Ch+arg_0]
.text:004062FA                 mov     ebp, [esi+eax*8]
.text:004062FD                 mov     edi, [esi+eax*8+4]
.text:00406301                 mov     esi, [esp+2Ch+arg_C]
.text:00406305                 test    esi, esi
.text:00406307                 jz      loc_4063D7
.text:0040630D
.text:0040630D loc_40630D:                             ; CODE XREF: sub_406250+18C↓j
.text:0040630D                 call    _errno
.text:00406312                 mov     ebx, [eax]
.text:00406314                 mov     [esp+2Ch+var_18], esi ; int
.text:00406318                 mov     ecx, [esi]
.text:0040631A                 mov     [esp+2Ch+Block], edi ; int
.text:0040631D                 mov     edx, [esp+2Ch+arg_8]
.text:00406321                 mov     [esp+2Ch+var_28], ebp ; int
.text:00406325                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00406329                 mov     ecx, [esp+2Ch+arg_4]
.text:0040632D                 mov     [esp+2Ch+var_20], edx ; int
.text:00406331                 mov     [esp+2Ch+Str], ecx ; Str
.text:00406335                 call    sub_405110
.text:0040633A                 mov     esi, eax
.text:0040633C                 call    _errno
.text:00406341                 mov     [eax], ebx
.text:00406343                 cmp     ebp, esi
.text:00406345                 ja      short loc_4063BB
.text:00406347                 lea     ebp, [esi+1]
.text:0040634A                 mov     ebx, off_41A02C
.text:00406350                 cmp     edi, offset unk_41B0F0
.text:00406356                 mov     esi, [esp+2Ch+arg_0]
.text:0040635A                 mov     [ebx+esi*8], ebp
.text:0040635D                 jz      short loc_40636D
.text:0040635F                 mov     [esp+2Ch+Block], edi ; Block
.text:00406362                 call    free
.text:00406367                 mov     ebx, off_41A02C
.text:0040636D
.text:0040636D loc_40636D:                             ; CODE XREF: sub_406250+10D↑j
.text:0040636D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00406370                 call    sub_40A950
.text:00406375                 mov     esi, [esp+2Ch+arg_C]
.text:00406379                 mov     edi, eax
.text:0040637B                 mov     eax, [esp+2Ch+arg_0]
.text:0040637F                 test    esi, esi
.text:00406381                 mov     [ebx+eax*8+4], edi
.text:00406385                 jz      short loc_4063D0
.text:00406387
.text:00406387 loc_406387:                             ; CODE XREF: sub_406250+185↓j
.text:00406387                 call    _errno
.text:0040638C                 mov     ebx, [eax]
.text:0040638E                 mov     [esp+2Ch+var_18], esi ; int
.text:00406392                 mov     ecx, [esi]
.text:00406394                 mov     [esp+2Ch+Block], edi ; int
.text:00406397                 mov     edx, [esp+2Ch+arg_8]
.text:0040639B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040639F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004063A3                 mov     ecx, [esp+2Ch+arg_4]
.text:004063A7                 mov     [esp+2Ch+var_20], edx ; int
.text:004063AB                 mov     [esp+2Ch+Str], ecx ; Str
.text:004063AF                 call    sub_405110
.text:004063B4                 call    _errno
.text:004063B9                 mov     [eax], ebx
.text:004063BB
.text:004063BB loc_4063BB:                             ; CODE XREF: sub_406250+F5↑j
.text:004063BB                 call    _errno
.text:004063C0                 mov     ebp, [esp+2Ch+var_14]
.text:004063C4                 mov     [eax], ebp
.text:004063C6                 add     esp, 1Ch
.text:004063C9                 mov     eax, edi
.text:004063CB                 pop     ebx
.text:004063CC                 pop     esi
.text:004063CD                 pop     edi
.text:004063CE                 pop     ebp
.text:004063CF                 retn
.text:004063D0 ; ---------------------------------------------------------------------------
.text:004063D0
.text:004063D0 loc_4063D0:                             ; CODE XREF: sub_406250+135↑j
.text:004063D0                 mov     esi, offset dword_41B1F0
.text:004063D5                 jmp     short loc_406387
.text:004063D7 ; ---------------------------------------------------------------------------
.text:004063D7
.text:004063D7 loc_4063D7:                             ; CODE XREF: sub_406250+B7↑j
.text:004063D7                 mov     esi, offset dword_41B1F0
.text:004063DC                 jmp     loc_40630D
.text:004063E1 ; ---------------------------------------------------------------------------
.text:004063E1
.text:004063E1 loc_4063E1:                             ; CODE XREF: sub_406250+45↑j
.text:004063E1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004063E8                 call    sub_40A950
.text:004063ED                 mov     off_41A02C, eax
.text:004063F2                 mov     edi, dword_41A024
.text:004063F8                 mov     ebx, eax
.text:004063FA                 mov     ecx, off_41A028
.text:00406400                 mov     [eax], edi
.text:00406402                 mov     [eax+4], ecx
.text:00406405                 jmp     loc_40629B
.text:0040640A ; ---------------------------------------------------------------------------
.text:0040640A
.text:0040640A loc_40640A:                             ; CODE XREF: sub_406250+18↑j
.text:0040640A                 call    abort
.text:0040640F ; ---------------------------------------------------------------------------
.text:0040640F
.text:0040640F loc_40640F:                             ; CODE XREF: sub_406250+33↑j
.text:0040640F                 call    sub_40AC60
.text:0040640F sub_406250      endp
.text:0040640F
.text:0040640F ; ---------------------------------------------------------------------------
.text:00406414                 align 10h
.text:00406420
.text:00406420 loc_406420:                             ; DATA XREF: sub_406440+64↓o
.text:00406420                 add     [ecx+6Eh], ch
.text:00406423                 jbe     short loc_406486
.text:00406425                 insb
.text:00406426                 imul    esp, [eax+61h], 6D756772h
.text:0040642E                 outs    dx, byte ptr gs:[esi]
.text:00406430                 jz      short near ptr loc_40646B+1
.text:00406432                 and     ds:768D0073h, ah
.text:00406438                 add     [ebp+27BCh], cl
.text:00406438 ; ---------------------------------------------------------------------------
.text:0040643E                 dw 0
.text:00406440
.text:00406440 ; =============== S U B R O U T I N E =======================================
.text:00406440
.text:00406440
.text:00406440 sub_406440      proc near               ; CODE XREF: sub_402F10+F9↑p
.text:00406440
.text:00406440 Code            = dword ptr -1Ch
.text:00406440 ErrorMessage    = dword ptr -18h
.text:00406440 var_14          = dword ptr -14h
.text:00406440 var_10          = byte ptr -10h
.text:00406440 var_8           = dword ptr -8
.text:00406440 var_4           = dword ptr -4
.text:00406440 arg_0           = dword ptr  4
.text:00406440 arg_4           = dword ptr  8
.text:00406440 arg_8           = dword ptr  0Ch
.text:00406440
.text:00406440                 sub     esp, 1Ch
.text:00406443                 mov     edx, [esp+1Ch+arg_8]
.text:00406447                 mov     [esp+1Ch+var_8], ebx
.text:0040644B                 mov     ebx, [esp+1Ch+arg_0]
.text:0040644F                 mov     [esp+1Ch+var_14], edx
.text:00406453                 mov     edx, [esp+1Ch+arg_4]
.text:00406457                 mov     [esp+1Ch+var_4], esi
.text:0040645B                 mov     [esp+1Ch+Code], ebx
.text:0040645E                 mov     [esp+1Ch+ErrorMessage], edx
.text:00406462                 call    sub_4036F0
.text:00406467                 test    eax, eax
.text:00406469                 mov     esi, eax
.text:0040646B
.text:0040646B loc_40646B:                             ; CODE XREF: .text:00406430↑j
.text:0040646B                 jz      short loc_406480
.text:0040646D
.text:0040646D loc_40646D:                             ; CODE XREF: sub_406440+9B↓j
.text:0040646D                 mov     eax, esi
.text:0040646F                 mov     ebx, [esp+1Ch+var_8]
.text:00406473                 mov     esi, [esp+1Ch+var_4]
.text:00406477                 add     esp, 1Ch
.text:0040647A                 retn
.text:0040647A ; ---------------------------------------------------------------------------
.text:0040647B                 align 10h
.text:00406480
.text:00406480 loc_406480:                             ; CODE XREF: sub_406440:loc_40646B↑j
.text:00406480                 mov     eax, [ebx]
.text:00406482                 xor     edx, edx
.text:00406484                 test    eax, eax
.text:00406486
.text:00406486 loc_406486:                             ; CODE XREF: .text:00406423↑j
.text:00406486                 jz      short loc_4064DD
.text:00406488                 nop
.text:00406489                 lea     esi, [esi+0]
.text:00406490
.text:00406490 loc_406490:                             ; CODE XREF: sub_406440+5E↓j
.text:00406490                 cmp     byte ptr [eax], 0
.text:00406493                 jnz     short loc_406497
.text:00406495                 mov     dl, 1
.text:00406497
.text:00406497 loc_406497:                             ; CODE XREF: sub_406440+53↑j
.text:00406497                 add     ebx, 4
.text:0040649A                 mov     eax, [ebx]
.text:0040649C                 test    eax, eax
.text:0040649E                 jnz     short loc_406490
.text:004064A0                 test    dl, dl
.text:004064A2                 jz      short loc_4064DD
.text:004064A4                 mov     [esp+1Ch+Code], offset loc_406420 ; char *
.text:004064AB                 call    sub_40AC10
.text:004064B0                 mov     [esp+1Ch+Code], 406421h
.text:004064B7                 mov     ebx, eax
.text:004064B9                 call    ds:libintl_gettext
.text:004064BF                 mov     dword ptr [esp+1Ch+var_10], ebx ; char
.text:004064C3                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004064CB                 mov     [esp+1Ch+Code], 1 ; Code
.text:004064D2                 mov     [esp+1Ch+var_14], eax ; char *
.text:004064D6                 call    sub_40E9E0
.text:004064DB                 jmp     short loc_40646D
.text:004064DD ; ---------------------------------------------------------------------------
.text:004064DD
.text:004064DD loc_4064DD:                             ; CODE XREF: sub_406440:loc_406486↑j
.text:004064DD                                         ; sub_406440+62↑j
.text:004064DD                 call    sub_40AC60
.text:004064DD sub_406440      endp
.text:004064DD
.text:004064DD ; ---------------------------------------------------------------------------
.text:004064E2                 align 10h
.text:004064F0
.text:004064F0 ; =============== S U B R O U T I N E =======================================
.text:004064F0
.text:004064F0
.text:004064F0 sub_4064F0      proc near               ; DATA XREF: sub_406670+1B4↓o
.text:004064F0                 sub     eax, 9090002Dh
.text:004064F5                 nop
.text:004064F6                 nop
.text:004064F7                 nop
.text:004064F8                 nop
.text:004064F9                 nop
.text:004064FA                 nop
.text:004064FB                 nop
.text:004064FC                 nop
.text:004064FD                 nop
.text:004064FE                 nop
.text:004064FF                 nop
.text:00406500                 nop
.text:00406501                 nop
.text:00406502                 nop
.text:00406503                 nop
.text:00406504                 nop
.text:00406505                 nop
.text:00406506                 nop
.text:00406507                 nop
.text:00406508                 nop
.text:00406509                 nop
.text:0040650A                 nop
.text:0040650B                 nop
.text:0040650C                 nop
.text:0040650D                 nop
.text:0040650E                 nop
.text:0040650F                 nop
.text:0040650F sub_4064F0      endp
.text:0040650F
.text:00406510
.text:00406510 ; =============== S U B R O U T I N E =======================================
.text:00406510
.text:00406510
.text:00406510 sub_406510      proc near               ; DATA XREF: sub_406670+3CC↓o
.text:00406510                 and     eax, 6F203A73h
.text:00406515                 jo      short loc_40658B
.text:00406517                 imul    ebp, [edi+6Eh], 63256020h
.text:0040651E                 and     eax, 64202773h
.text:00406523                 outsd
.text:00406524                 db      65h
.text:00406524                 jnb     short loc_406595
.text:00406527                 daa
.text:00406528                 jz      short loc_40654A
.text:0040652A                 popa
.text:0040652B                 insb
.text:0040652C                 insb
.text:0040652D                 outsd
.text:0040652E                 ja      short sub_406550
.text:00406530                 popa
.text:00406531                 outsb
.text:00406532                 and     [ecx+72h], ah
.text:00406535                 db      67h
.text:00406535                 jnz     near ptr loc_4065A4+1
.text:00406538                 outs    dx, byte ptr gs:[esi]
.text:0040653A                 jz      short loc_406546
.text:0040653C                 add     [eax-6F6F6F70h], dl
.text:00406542                 nop
.text:00406543                 nop
.text:00406544                 nop
.text:00406545                 nop
.text:00406546
.text:00406546 loc_406546:                             ; CODE XREF: sub_406510+2A↑j
.text:00406546                 nop
.text:00406547                 nop
.text:00406548                 nop
.text:00406549                 nop
.text:0040654A
.text:0040654A loc_40654A:                             ; CODE XREF: sub_406510+18↑j
.text:0040654A                 nop
.text:0040654B                 nop
.text:0040654C                 nop
.text:0040654D                 nop
.text:0040654E                 nop
.text:0040654F                 nop
.text:0040654F sub_406510      endp ; sp-analysis failed
.text:0040654F
.text:00406550
.text:00406550 ; =============== S U B R O U T I N E =======================================
.text:00406550
.text:00406550
.text:00406550 sub_406550      proc near               ; CODE XREF: sub_406510+1E↑j
.text:00406550                                         ; DATA XREF: sub_406670:loc_406AA2↓o
.text:00406550                 and     eax, 6F203A73h
.text:00406555                 jo      short loc_4065CB
.text:00406557                 imul    ebp, [edi+6Eh], 2D2D6020h
.text:0040655E                 and     eax, 64202773h
.text:00406563                 outsd
.text:00406564                 db      65h
.text:00406564                 jnb     short loc_4065D5
.text:00406567                 daa
.text:00406568                 jz      short loc_40658A
.text:0040656A                 popa
.text:0040656B                 insb
.text:0040656C                 insb
.text:0040656D                 outsd
.text:0040656E                 ja      short sub_406590
.text:00406570                 popa
.text:00406571                 outsb
.text:00406572                 and     [ecx+72h], ah
.text:00406575                 db      67h
.text:00406575                 jnz     loc_4065E5
.text:00406578                 outs    dx, byte ptr gs:[esi]
.text:0040657A                 jz      short loc_406586
.text:0040657C                 add     [eax-6F6F6F70h], dl
.text:00406582                 nop
.text:00406583                 nop
.text:00406584                 nop
.text:00406585                 nop
.text:00406586
.text:00406586 loc_406586:                             ; CODE XREF: sub_406550+2A↑j
.text:00406586                 nop
.text:00406587                 nop
.text:00406588                 nop
.text:00406589                 nop
.text:0040658A
.text:0040658A loc_40658A:                             ; CODE XREF: sub_406550+18↑j
.text:0040658A                 nop
.text:0040658B
.text:0040658B loc_40658B:                             ; CODE XREF: sub_406510+5↑j
.text:0040658B                 nop
.text:0040658C                 nop
.text:0040658D                 nop
.text:0040658E                 nop
.text:0040658F                 nop
.text:0040658F sub_406550      endp ; sp-analysis failed
.text:0040658F
.text:00406590
.text:00406590 ; =============== S U B R O U T I N E =======================================
.text:00406590
.text:00406590
.text:00406590 sub_406590      proc near               ; CODE XREF: sub_406550+1E↑j
.text:00406590                                         ; DATA XREF: sub_406670:loc_406B40↓o ...
.text:00406590                 and     eax, 6F203A73h
.text:00406595
.text:00406595 loc_406595:                             ; CODE XREF: sub_406510+14↑j
.text:00406595                 jo      short loc_40660B
.text:00406597                 imul    ebp, [edi+6Eh], 73256020h
.text:0040659E                 daa
.text:0040659F                 and     [edx+65h], dh
.text:004065A2                 jno     short near ptr loc_406618+1
.text:004065A4
.text:004065A4 loc_4065A4:                             ; CODE XREF: sub_406510+25↑j
.text:004065A4                 imul    esi, [edx+65h], 6E612073h
.text:004065AB                 and     [ecx+72h], ah
.text:004065AE                 db      67h
.text:004065AE                 jnz     near ptr loc_40661C+2
.text:004065B1                 outs    dx, byte ptr gs:[esi]
.text:004065B3                 jz      short loc_4065BF
.text:004065B5                 add     [eax-6F6F6F70h], dl
.text:004065BB                 nop
.text:004065BC                 nop
.text:004065BD                 nop
.text:004065BE                 nop
.text:004065BF
.text:004065BF loc_4065BF:                             ; CODE XREF: sub_406590+23↑j
.text:004065BF                 nop
.text:004065C0                 nop
.text:004065C1                 nop
.text:004065C2                 nop
.text:004065C3                 nop
.text:004065C4                 nop
.text:004065C5                 nop
.text:004065C6                 nop
.text:004065C7                 nop
.text:004065C8                 nop
.text:004065C9                 nop
.text:004065CA                 nop
.text:004065CB
.text:004065CB loc_4065CB:                             ; CODE XREF: sub_406550+5↑j
.text:004065CB                 nop
.text:004065CC                 nop
.text:004065CD                 nop
.text:004065CE                 nop
.text:004065CF                 nop
.text:004065CF sub_406590      endp
.text:004065CF
.text:004065D0
.text:004065D0 ; =============== S U B R O U T I N E =======================================
.text:004065D0
.text:004065D0
.text:004065D0 sub_4065D0      proc near               ; DATA XREF: sub_406670+55E↓o
.text:004065D0                 and     eax, 75203A73h
.text:004065D5
.text:004065D5 loc_4065D5:                             ; CODE XREF: sub_406550+14↑j
.text:004065D5                 outsb
.text:004065D6                 jb      short near ptr loc_406637+6
.text:004065D8                 arpl    [edi+67h], bp
.text:004065DB                 outsb
.text:004065DC                 imul    edi, [edx+65h], 706F2064h
.text:004065E3                 jz      short loc_40664E
.text:004065E5
.text:004065E5 loc_4065E5:                             ; CODE XREF: sub_406550+25↑j
.text:004065E5                 outsd
.text:004065E6                 outsb
.text:004065E7                 and     [eax+25h], ah
.text:004065EA                 arpl    ds:0A2773h, sp
.text:004065F0
.text:004065F0 loc_4065F0:                             ; DATA XREF: sub_406670:loc_406C11↓o
.text:004065F0                 add     [eax-6F6F6F70h], dl
.text:004065F6                 nop
.text:004065F7                 nop
.text:004065F8                 nop
.text:004065F9                 nop
.text:004065FA                 nop
.text:004065FB                 nop
.text:004065FC                 nop
.text:004065FD                 nop
.text:004065FE                 nop
.text:004065FF                 nop
.text:00406600                 nop
.text:00406601                 nop
.text:00406602                 nop
.text:00406603                 nop
.text:00406604                 nop
.text:00406605                 nop
.text:00406606                 nop
.text:00406607                 nop
.text:00406608                 nop
.text:00406609                 nop
.text:0040660A                 nop
.text:0040660B
.text:0040660B loc_40660B:                             ; CODE XREF: sub_406590:loc_406595↑j
.text:0040660B                 nop
.text:0040660C                 nop
.text:0040660D                 nop
.text:0040660E                 nop
.text:0040660F                 nop
.text:0040660F sub_4065D0      endp
.text:0040660F
.text:00406610
.text:00406610 ; =============== S U B R O U T I N E =======================================
.text:00406610
.text:00406610
.text:00406610 sub_406610      proc near               ; DATA XREF: sub_406670:loc_406C2A↓o
.text:00406610                 and     eax, 75203A73h
.text:00406615                 outsb
.text:00406616                 jb      short near ptr loc_406677+6
.text:00406618
.text:00406618 loc_406618:                             ; CODE XREF: sub_406590+12↑j
.text:00406618                 arpl    [edi+67h], bp
.text:0040661B                 outsb
.text:0040661C
.text:0040661C loc_40661C:                             ; CODE XREF: sub_406590+1E↑j
.text:0040661C                 imul    edi, [edx+65h], 706F2064h
.text:00406623                 jz      short loc_40668E
.text:00406625                 outsd
.text:00406626                 outsb
.text:00406627                 and     [eax+2Dh], ah
.text:0040662A                 sub     eax, 0A277325h
.text:0040662F                 add     ds:6F203A73h, ah
.text:00406635                 jo      short loc_4066AB
.text:00406637
.text:00406637 loc_406637:                             ; CODE XREF: sub_4065D0+6↑j
.text:00406637                 imul    ebp, [edi+6Eh], 71657220h
.text:0040663E                 jnz     short loc_4066A9
.text:00406640                 jb      short loc_4066A7
.text:00406642                 jnb     short loc_406664
.text:00406644                 popa
.text:00406645                 outsb
.text:00406646                 and     [ecx+72h], ah
.text:00406649                 db      67h
.text:00406649                 jnz     near ptr loc_4066B7+2
.text:0040664C                 outs    dx, byte ptr gs:[esi]
.text:0040664E
.text:0040664E loc_40664E:                             ; CODE XREF: sub_4065D0+13↑j
.text:0040664E                 jz      short sub_406670
.text:00406650                 sub     eax, 6325202Dh
.text:00406655                 or      al, [eax]
.text:00406657                 nop
.text:00406658                 nop
.text:00406659                 nop
.text:0040665A                 nop
.text:0040665B                 nop
.text:0040665C                 nop
.text:0040665D                 nop
.text:0040665E                 nop
.text:0040665F                 nop
.text:00406660                 nop
.text:00406661                 nop
.text:00406662                 nop
.text:00406663                 nop
.text:00406664
.text:00406664 loc_406664:                             ; CODE XREF: sub_406610+32↑j
.text:00406664                 nop
.text:00406665                 nop
.text:00406666                 nop
.text:00406667                 nop
.text:00406668                 nop
.text:00406669                 nop
.text:0040666A                 nop
.text:0040666B                 nop
.text:0040666C                 nop
.text:0040666D                 nop
.text:0040666E                 nop
.text:0040666F                 nop
.text:0040666F sub_406610      endp ; sp-analysis failed
.text:0040666F
.text:00406670
.text:00406670 ; =============== S U B R O U T I N E =======================================
.text:00406670
.text:00406670
.text:00406670 ; int __cdecl sub_406670(char *Str2, size_t MaxCount, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, char *Str, int, int, int, int)
.text:00406670 sub_406670      proc near               ; CODE XREF: sub_406610:loc_40664E↑j
.text:00406670                                         ; DATA XREF: sub_406670:loc_406E83↓o
.text:00406670
.text:00406670 Str2            = dword ptr  4
.text:00406670 MaxCount        = dword ptr  8
.text:00406670 arg_8           = dword ptr  0Ch
.text:00406670 arg_C           = dword ptr  10h
.text:00406670 arg_1C          = dword ptr  20h
.text:00406670 arg_20          = dword ptr  24h
.text:00406670 arg_24          = dword ptr  28h
.text:00406670 arg_28          = dword ptr  2Ch
.text:00406670 arg_2C          = dword ptr  30h
.text:00406670 arg_30          = dword ptr  34h
.text:00406670 arg_34          = dword ptr  38h
.text:00406670 arg_38          = dword ptr  3Ch
.text:00406670 arg_3C          = dword ptr  40h
.text:00406670 arg_40          = dword ptr  44h
.text:00406670 arg_44          = dword ptr  48h
.text:00406670 arg_5C          = dword ptr  60h
.text:00406670 arg_60          = dword ptr  64h
.text:00406670 Str             = dword ptr  68h
.text:00406670 arg_68          = dword ptr  6Ch
.text:00406670 arg_6C          = dword ptr  70h
.text:00406670 arg_70          = dword ptr  74h
.text:00406670 arg_74          = dword ptr  78h
.text:00406670
.text:00406670 ; FUNCTION CHUNK AT .text:004066EB SIZE 00000053 BYTES
.text:00406670 ; FUNCTION CHUNK AT .text:00406754 SIZE 0000014B BYTES
.text:00406670 ; FUNCTION CHUNK AT .text:004068A0 SIZE 0000023A BYTES
.text:00406670 ; FUNCTION CHUNK AT .text:00406AE0 SIZE 00000099 BYTES
.text:00406670 ; FUNCTION CHUNK AT .text:00406B80 SIZE 000000DF BYTES
.text:00406670 ; FUNCTION CHUNK AT .text:00406C60 SIZE 0000025B BYTES
.text:00406670 ; FUNCTION CHUNK AT .text:00406EC0 SIZE 000001AE BYTES
.text:00406670 ; FUNCTION CHUNK AT .text:00407070 SIZE 000000F9 BYTES
.text:00406670 ; FUNCTION CHUNK AT .text:00407170 SIZE 000000CE BYTES
.text:00406670 ; FUNCTION CHUNK AT .text:00407240 SIZE 0000003A BYTES
.text:00406670 ; FUNCTION CHUNK AT .text:00407280 SIZE 0000000B BYTES
.text:00406670 ; FUNCTION CHUNK AT .text:00407290 SIZE 00000019 BYTES
.text:00406670 ; FUNCTION CHUNK AT .text:004072B0 SIZE 00000011 BYTES
.text:00406670
.text:00406670                 and     eax, 6F203A73h
.text:00406675                 jo      short loc_4066EB
.text:00406677
.text:00406677 loc_406677:                             ; CODE XREF: sub_406610+6↑j
.text:00406677                 imul    ebp, [edi+6Eh], 572D6020h
.text:0040667E                 and     ds:64202773h, ah
.text:00406684                 outsd
.text:00406685                 db      65h
.text:00406685                 jnb     short near ptr loc_4066F4+2
.text:00406688                 daa
.text:00406689                 jz      short loc_4066AB
.text:0040668B                 popa
.text:0040668C                 insb
.text:0040668D                 insb
.text:0040668E
.text:0040668E loc_40668E:                             ; CODE XREF: sub_406610+13↑j
.text:0040668E                 outsd
.text:0040668F                 ja      short near ptr sub_4066B0+1
.text:00406691                 popa
.text:00406692                 outsb
.text:00406693                 and     [ecx+72h], ah
.text:00406696                 db      67h
.text:00406696                 jnz     near ptr loc_406705+1
.text:00406699                 outs    dx, byte ptr gs:[esi]
.text:0040669B                 jz      short loc_4066A7
.text:0040669D                 add     [eax-6F6F6F70h], dl
.text:004066A3                 nop
.text:004066A4                 nop
.text:004066A5                 nop
.text:004066A6                 nop
.text:004066A7
.text:004066A7 loc_4066A7:                             ; CODE XREF: sub_406610+30↑j
.text:004066A7                                         ; sub_406670+2B↑j
.text:004066A7                 nop
.text:004066A8                 nop
.text:004066A9
.text:004066A9 loc_4066A9:                             ; CODE XREF: sub_406610+2E↑j
.text:004066A9                 nop
.text:004066AA                 nop
.text:004066AB
.text:004066AB loc_4066AB:                             ; CODE XREF: sub_406610+25↑j
.text:004066AB                                         ; sub_406670+19↑j
.text:004066AB                 nop
.text:004066AC                 nop
.text:004066AD                 nop
.text:004066AE                 nop
.text:004066AF                 nop
.text:004066AF sub_406670      endp ; sp-analysis failed
.text:004066AF
.text:004066B0
.text:004066B0 ; =============== S U B R O U T I N E =======================================
.text:004066B0
.text:004066B0
.text:004066B0 sub_4066B0      proc near               ; CODE XREF: sub_406670+1F↑j
.text:004066B0                                         ; DATA XREF: sub_406670:loc_406F6F↓o
.text:004066B0
.text:004066B0 arg_A4          = dword ptr  0A8h
.text:004066B0 arg_B8          = dword ptr  0BCh
.text:004066B0
.text:004066B0 ; FUNCTION CHUNK AT .text:0040674A SIZE 0000000A BYTES
.text:004066B0
.text:004066B0                 and     eax, 6F203A73h
.text:004066B5                 jo      short loc_40672B
.text:004066B7
.text:004066B7 loc_4066B7:                             ; CODE XREF: sub_406610+39↑j
.text:004066B7                 imul    ebp, [edi+6Eh], 572D6020h
.text:004066BE                 and     ds:69202773h, ah
.text:004066C4                 jnb     short near ptr loc_4066E3+3
.text:004066C6                 popa
.text:004066C7                 insd
.text:004066C8                 bound   ebp, [ecx+67h]
.text:004066CB                 jnz     short near ptr loc_406738+4
.text:004066CD                 jnz     short near ptr loc_406741+1
.text:004066CF                 or      al, [eax]
.text:004066D1
.text:004066D1 loc_4066D1:                             ; DATA XREF: sub_406670+A0F↓o
.text:004066D1                 and     eax, 69203A73h
.text:004066D6                 insb
.text:004066D7                 insb
.text:004066D8                 db      65h, 67h
.text:004066D8                 popa
.text:004066DB                 insb
.text:004066DC                 and     [edi+70h], ch
.text:004066DF                 jz      short loc_40674A
.text:004066E1                 outsd
.text:004066E2                 outsb
.text:004066E3
.text:004066E3 loc_4066E3:                             ; CODE XREF: sub_4066B0+14↑j
.text:004066E3                 and     ds:6325202Dh, ch
.text:004066E9                 or      al, [eax]
.text:004066E9 sub_4066B0      endp ; sp-analysis failed
.text:004066E9
.text:004066EB ; START OF FUNCTION CHUNK FOR sub_406670
.text:004066EB
.text:004066EB loc_4066EB:                             ; CODE XREF: sub_406670+5↑j
.text:004066EB                                         ; DATA XREF: sub_406670:loc_4070B7↓o
.text:004066EB                 and     eax, 69203A73h
.text:004066F0                 outsb
.text:004066F1                 jbe     short loc_406754
.text:004066F3                 insb
.text:004066F4
.text:004066F4 loc_4066F4:                             ; CODE XREF: sub_406670+15↑j
.text:004066F4                 imul    esp, [eax+6Fh], 6F697470h
.text:004066FC                 outsb
.text:004066FD                 and     ds:6325202Dh, ch
.text:00406703                 or      al, [eax]
.text:00406705
.text:00406705 loc_406705:                             ; CODE XREF: sub_406670+26↑j
.text:00406705                                         ; DATA XREF: sub_406670:loc_4070DE↓o
.text:00406705                 and     eax, 6F203A73h
.text:0040670A                 jo      short near ptr loc_40677F+1
.text:0040670C                 imul    ebp, [edi+6Eh], 73256020h
.text:00406713                 daa
.text:00406714                 and     [ecx+73h], ch
.text:00406717                 and     [ecx+6Dh], ah
.text:0040671A                 bound   ebp, [ecx+67h]
.text:0040671D                 jnz     short near ptr loc_40678C+2
.text:0040671F                 jnz     short near ptr loc_406793+1
.text:00406721                 or      al, [eax]
.text:00406723
.text:00406723 loc_406723:                             ; DATA XREF: sub_406670:loc_407290↓o
.text:00406723                 push    eax
.text:00406724                 dec     edi
.text:00406725                 push    ebx
.text:00406726                 dec     ecx
.text:00406727                 pop     eax
.text:00406728                 dec     esp
.text:00406729                 pop     ecx
.text:0040672A                 pop     edi
.text:0040672B
.text:0040672B loc_40672B:                             ; CODE XREF: sub_4066B0+5↑j
.text:0040672B                 inc     ebx
.text:0040672C                 dec     edi
.text:0040672D                 push    edx
.text:0040672E                 push    edx
.text:0040672F                 inc     ebp
.text:00406730                 inc     ebx
.text:00406731                 push    esp
.text:00406732                 add     [ebp+0B6h], cl
.text:00406738
.text:00406738 loc_406738:                             ; CODE XREF: sub_4066B0+1B↑j
.text:00406738                 add     [ebp+27BCh], cl
.text:00406738 ; END OF FUNCTION CHUNK FOR sub_406670
.text:00406738 ; ---------------------------------------------------------------------------
.text:0040673E                 dw 0
.text:00406740 ; ---------------------------------------------------------------------------
.text:00406740
.text:00406740 loc_406740:                             ; CODE XREF: sub_4072D0+5A↓p
.text:00406740                                         ; .text:004073BA↓p ...
.text:00406740                 push    ebp
.text:00406741
.text:00406741 loc_406741:                             ; CODE XREF: sub_4066B0+1D↑j
.text:00406741                 mov     eax, 0FFFFFFFFh
.text:00406746                 push    edi
.text:00406747                 push    esi
.text:00406748                 push    ebx
.text:00406748 ; ---------------------------------------------------------------------------
.text:00406749                 db 83h
.text:0040674A ; ---------------------------------------------------------------------------
.text:0040674A ; START OF FUNCTION CHUNK FOR sub_4066B0
.text:0040674A
.text:0040674A loc_40674A:                             ; CODE XREF: sub_4066B0+2F↑j
.text:0040674A                 in      al, dx
.text:0040674B                 dec     esp
.text:0040674C                 mov     esi, [esp-40h+arg_A4]
.text:00406750                 mov     ebp, [esp-40h+arg_B8]
.text:00406750 ; END OF FUNCTION CHUNK FOR sub_4066B0
.text:00406754 ; START OF FUNCTION CHUNK FOR sub_406670
.text:00406754
.text:00406754 loc_406754:                             ; CODE XREF: sub_406670+81↑j
.text:00406754                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00406757                 mov     ebx, [ebp+4]
.text:0040675A                 setz    dl
.text:0040675D                 movzx   ecx, dl
.text:00406760                 dec     ecx
.text:00406761                 and     ecx, ebx
.text:00406763                 mov     [esp+arg_44], ecx
.text:00406767                 mov     ecx, [esp+arg_5C]
.text:0040676B                 test    ecx, ecx
.text:0040676D                 jle     loc_406897
.text:00406773                 mov     dword ptr [ebp+0Ch], 0
.text:0040677A                 mov     ebx, [ebp+0]
.text:0040677D                 test    ebx, ebx
.text:0040677F
.text:0040677F loc_40677F:                             ; CODE XREF: sub_406670+9A↑j
.text:0040677F                 jz      loc_4072B0
.text:00406785                 mov     edi, [ebp+10h]
.text:00406788                 test    edi, edi
.text:0040678A                 jnz     short loc_4067E3
.text:0040678C
.text:0040678C loc_40678C:                             ; CODE XREF: sub_406670+AD↑j
.text:0040678C                 lea     esi, [esi+0]
.text:00406790
.text:00406790 loc_406790:                             ; CODE XREF: sub_406670+C4C↓j
.text:00406790                 mov     [ebp+24h], ebx
.text:00406793
.text:00406793 loc_406793:                             ; CODE XREF: sub_406670+AF↑j
.text:00406793                 mov     esi, [esp+Str]
.text:00406797                 mov     [ebp+20h], ebx
.text:0040679A                 mov     ecx, [esp+arg_74]
.text:0040679E                 xor     ebx, ebx
.text:004067A0                 mov     dword ptr [ebp+14h], 0
.text:004067A7                 test    ecx, ecx
.text:004067A9                 jz      loc_407290
.text:004067AF
.text:004067AF loc_4067AF:                             ; CODE XREF: sub_406670+C34↓j
.text:004067AF                 mov     ebx, 1
.text:004067B4
.text:004067B4 loc_4067B4:                             ; CODE XREF: sub_406670+C2E↓j
.text:004067B4                 mov     [ebp+1Ch], ebx
.text:004067B7                 mov     ecx, [esp+Str]
.text:004067BB                 movzx   eax, byte ptr [ecx]
.text:004067BE                 cmp     al, 2Dh ; '-'
.text:004067C0                 jz      loc_407280
.text:004067C6                 cmp     al, 2Bh ; '+'
.text:004067C8                 jz      loc_407269
.text:004067CE                 xor     edx, edx
.text:004067D0                 test    ebx, ebx
.text:004067D2                 setz    dl
.text:004067D5                 mov     [ebp+18h], edx
.text:004067D8
.text:004067D8 loc_4067D8:                             ; CODE XREF: sub_406670+C05↓j
.text:004067D8                 mov     [esp+Str], esi
.text:004067DC                 mov     dword ptr [ebp+10h], 1
.text:004067E3
.text:004067E3 loc_4067E3:                             ; CODE XREF: sub_406670+11A↑j
.text:004067E3                 mov     eax, [ebp+14h]
.text:004067E6                 test    eax, eax
.text:004067E8                 jz      short loc_4067F3
.text:004067EA                 cmp     byte ptr [eax], 0
.text:004067ED                 jnz     loc_4068D0
.text:004067F3
.text:004067F3 loc_4067F3:                             ; CODE XREF: sub_406670+178↑j
.text:004067F3                 mov     ebx, [ebp+0]
.text:004067F6                 cmp     [ebp+24h], ebx
.text:004067F9                 jle     short loc_4067FE
.text:004067FB                 mov     [ebp+24h], ebx
.text:004067FE
.text:004067FE loc_4067FE:                             ; CODE XREF: sub_406670+189↑j
.text:004067FE                 cmp     [ebp+20h], ebx
.text:00406801                 jle     short loc_406806
.text:00406803                 mov     [ebp+20h], ebx
.text:00406806
.text:00406806 loc_406806:                             ; CODE XREF: sub_406670+191↑j
.text:00406806                 cmp     dword ptr [ebp+18h], 1
.text:0040680A                 jz      loc_4071E0
.text:00406810
.text:00406810 loc_406810:                             ; CODE XREF: sub_406670+BE3↓j
.text:00406810                 cmp     ebx, [esp+arg_5C]
.text:00406814                 jz      loc_4071C4
.text:0040681A                 cld
.text:0040681B                 mov     ecx, [esp+arg_60]
.text:0040681F                 mov     edx, 3
.text:00406824                 mov     edi, offset sub_4064F0
.text:00406829                 mov     esi, [ecx+ebx*4]
.text:0040682C                 mov     ecx, edx
.text:0040682E                 repe cmpsb
.text:00406830                 jnz     short loc_40686C
.text:00406832                 mov     edx, [ebp+24h]
.text:00406835                 lea     eax, [ebx+1]
.text:00406838                 cmp     [ebp+20h], edx
.text:0040683B                 mov     [ebp+0], eax
.text:0040683E                 jz      loc_4071D8
.text:00406844                 cmp     edx, eax
.text:00406846                 jz      short loc_406860
.text:00406848                 mov     [esp+Str2], ebp
.text:0040684C                 mov     ebx, [esp+arg_60]
.text:00406850                 mov     [esp+0], ebx
.text:00406853                 call    sub_4073F0
.text:00406858                 nop
.text:00406859                 lea     esi, [esi+0]
.text:00406860
.text:00406860 loc_406860:                             ; CODE XREF: sub_406670+1D6↑j
.text:00406860                                         ; sub_406670+B6B↓j
.text:00406860                 mov     eax, [esp+arg_5C]
.text:00406864                 mov     ebx, eax
.text:00406866                 mov     [ebp+24h], eax
.text:00406869                 mov     [ebp+0], eax
.text:0040686C
.text:0040686C loc_40686C:                             ; CODE XREF: sub_406670+1C0↑j
.text:0040686C                 cmp     ebx, [esp+arg_5C]
.text:00406870                 jz      loc_4071C4
.text:00406876                 mov     esi, [esp+arg_60]
.text:0040687A                 mov     eax, [esi+ebx*4]
.text:0040687D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00406880                 jz      short loc_4068A7
.text:00406882
.text:00406882 loc_406882:                             ; CODE XREF: sub_406670+23D↓j
.text:00406882                 mov     edx, [ebp+18h]
.text:00406885                 test    edx, edx
.text:00406887                 jz      short loc_4068A0
.text:00406889                 mov     [ebp+0Ch], eax
.text:0040688C                 lea     edi, [ebx+1]
.text:0040688F                 mov     eax, 1
.text:00406894                 mov     [ebp+0], edi
.text:00406897
.text:00406897 loc_406897:                             ; CODE XREF: sub_406670+FD↑j
.text:00406897                                         ; sub_406670+235↓j ...
.text:00406897                 add     esp, 4Ch
.text:0040689A                 pop     ebx
.text:0040689B                 pop     esi
.text:0040689C                 pop     edi
.text:0040689D                 pop     ebp
.text:0040689E                 retn
.text:0040689E ; END OF FUNCTION CHUNK FOR sub_406670
.text:0040689E ; ---------------------------------------------------------------------------
.text:0040689F                 align 10h
.text:004068A0 ; START OF FUNCTION CHUNK FOR sub_406670
.text:004068A0
.text:004068A0 loc_4068A0:                             ; CODE XREF: sub_406670+217↑j
.text:004068A0                                         ; sub_406670+B5A↓j ...
.text:004068A0                 mov     eax, 0FFFFFFFFh
.text:004068A5                 jmp     short loc_406897
.text:004068A7 ; ---------------------------------------------------------------------------
.text:004068A7
.text:004068A7 loc_4068A7:                             ; CODE XREF: sub_406670+210↑j
.text:004068A7                 movzx   edx, byte ptr [eax+1]
.text:004068AB                 test    dl, dl
.text:004068AD                 jz      short loc_406882
.text:004068AF                 mov     ebx, [esp+arg_68]
.text:004068B3                 xor     ecx, ecx
.text:004068B5                 test    ebx, ebx
.text:004068B7                 jz      short loc_4068C2
.text:004068B9                 cmp     dl, 2Dh ; '-'
.text:004068BC                 jz      loc_4071BA
.text:004068C2
.text:004068C2 loc_4068C2:                             ; CODE XREF: sub_406670+247↑j
.text:004068C2                                         ; sub_406670+B4F↓j
.text:004068C2                 lea     esi, [ecx+eax+1]
.text:004068C6                 mov     [ebp+14h], esi
.text:004068C9                 lea     esi, [esi+0]
.text:004068D0
.text:004068D0 loc_4068D0:                             ; CODE XREF: sub_406670+17D↑j
.text:004068D0                 mov     ecx, [esp+arg_68]
.text:004068D4                 test    ecx, ecx
.text:004068D6                 jz      loc_406C60
.text:004068DC                 mov     edx, [ebp+0]
.text:004068DF                 mov     edi, [esp+arg_60]
.text:004068E3                 mov     eax, [edi+edx*4]
.text:004068E6                 movzx   edx, byte ptr [eax+1]
.text:004068EA                 cmp     dl, 2Dh ; '-'
.text:004068ED                 jz      short loc_406905
.text:004068EF                 mov     ebx, [esp+arg_70]
.text:004068F3                 test    ebx, ebx
.text:004068F5                 jz      loc_406C60
.text:004068FB                 cmp     byte ptr [eax+2], 0
.text:004068FF                 jz      loc_40719A
.text:00406905
.text:00406905 loc_406905:                             ; CODE XREF: sub_406670+27D↑j
.text:00406905                                         ; sub_406670+B45↓j
.text:00406905                 mov     [esp+arg_40], 0
.text:0040690D                 mov     ecx, [ebp+14h]
.text:00406910                 mov     [esp+arg_3C], 0
.text:00406918                 mov     [esp+arg_38], 0
.text:00406920                 mov     edi, ecx
.text:00406922                 mov     [esp+arg_34], 0FFFFFFFFh
.text:0040692A                 movzx   eax, byte ptr [ecx]
.text:0040692D                 test    al, al
.text:0040692F                 jz      short loc_40694C
.text:00406931                 cmp     al, 3Dh ; '='
.text:00406933                 jz      short loc_40694C
.text:00406935                 lea     esi, [esi+0]
.text:00406939                 lea     edi, [edi+0]
.text:00406940
.text:00406940 loc_406940:                             ; CODE XREF: sub_406670+2DA↓j
.text:00406940                 inc     edi
.text:00406941                 movzx   eax, byte ptr [edi]
.text:00406944                 test    al, al
.text:00406946                 jz      short loc_40694C
.text:00406948                 cmp     al, 3Dh ; '='
.text:0040694A                 jnz     short loc_406940
.text:0040694C
.text:0040694C loc_40694C:                             ; CODE XREF: sub_406670+2BF↑j
.text:0040694C                                         ; sub_406670+2C3↑j ...
.text:0040694C                 mov     [esp+arg_30], 0
.text:00406954                 mov     esi, [esp+arg_68]
.text:00406958                 mov     ebx, [esi]
.text:0040695A                 test    ebx, ebx
.text:0040695C                 mov     edx, ebx
.text:0040695E                 jz      loc_406B80
.text:00406964                 lea     esi, [esi+0]
.text:0040696A                 lea     edi, [edi+0]
.text:00406970
.text:00406970 loc_406970:                             ; CODE XREF: sub_406670+32E↓j
.text:00406970                 mov     [esp+Str2], ecx ; Str2
.text:00406974                 mov     ebx, edi
.text:00406976                 sub     ebx, ecx
.text:00406978                 mov     [esp+MaxCount], ebx ; MaxCount
.text:0040697C                 mov     [esp+0], edx    ; Str1
.text:0040697F                 call    strncmp
.text:00406984                 test    eax, eax
.text:00406986                 jz      loc_407116
.text:0040698C
.text:0040698C loc_40698C:                             ; CODE XREF: sub_406670+ADF↓j
.text:0040698C                                         ; sub_406670+AF4↓j ...
.text:0040698C                 inc     [esp+arg_30]
.text:00406990                 add     esi, 10h
.text:00406993                 mov     ecx, [esi]
.text:00406995                 test    ecx, ecx
.text:00406997                 mov     edx, ecx
.text:00406999                 jz      short loc_4069A0
.text:0040699B                 mov     ecx, [ebp+14h]
.text:0040699E                 jmp     short loc_406970
.text:004069A0 ; ---------------------------------------------------------------------------
.text:004069A0
.text:004069A0 loc_4069A0:                             ; CODE XREF: sub_406670+329↑j
.text:004069A0                                         ; sub_406670+B25↓j
.text:004069A0                 mov     esi, [esp+arg_38]
.text:004069A4                 test    esi, esi
.text:004069A6                 jz      short loc_4069B4
.text:004069A8                 mov     edx, [esp+arg_3C]
.text:004069AC                 test    edx, edx
.text:004069AE                 jz      loc_4070C0
.text:004069B4
.text:004069B4 loc_4069B4:                             ; CODE XREF: sub_406670+336↑j
.text:004069B4                 mov     eax, [esp+arg_40]
.text:004069B8                 test    eax, eax
.text:004069BA                 jz      loc_406B80
.text:004069C0                 mov     ecx, [ebp+0]
.text:004069C3                 lea     eax, [ecx+1]
.text:004069C6                 mov     [ebp+0], eax
.text:004069C9                 cmp     byte ptr [edi], 0
.text:004069CC                 jz      loc_406AE0
.text:004069D2                 mov     ecx, [esp+arg_40]
.text:004069D6                 mov     esi, [ecx+4]
.text:004069D9                 test    esi, esi
.text:004069DB                 jz      short loc_406A26
.text:004069DD                 lea     ebx, [edi+1]
.text:004069E0                 mov     [ebp+0Ch], ebx
.text:004069E3
.text:004069E3 loc_4069E3:                             ; CODE XREF: sub_406670+478↓j
.text:004069E3                                         ; sub_406670+494↓j
.text:004069E3                 mov     ebx, [ebp+14h]
.text:004069E6                 mov     [esp+0], ebx    ; Str
.text:004069E9                 call    strlen
.text:004069EE                 add     [ebp+14h], eax
.text:004069F1                 mov     esi, [esp+arg_6C]
.text:004069F5                 test    esi, esi
.text:004069F7                 jz      short loc_406A03
.text:004069F9                 mov     ebp, [esp+arg_34]
.text:004069FD                 mov     ecx, [esp+arg_6C]
.text:00406A01                 mov     [ecx], ebp
.text:00406A03
.text:00406A03 loc_406A03:                             ; CODE XREF: sub_406670+387↑j
.text:00406A03                 mov     eax, [esp+arg_40]
.text:00406A07                 mov     ecx, [eax+8]
.text:00406A0A                 test    ecx, ecx
.text:00406A0C                 jnz     short loc_406A1A
.text:00406A0E                 mov     ecx, [esp+arg_40]
.text:00406A12
.text:00406A12 loc_406A12:                             ; CODE XREF: sub_406670+7F3↓j
.text:00406A12                 mov     eax, [ecx+0Ch]
.text:00406A15                 jmp     loc_406897
.text:00406A1A ; ---------------------------------------------------------------------------
.text:00406A1A
.text:00406A1A loc_406A1A:                             ; CODE XREF: sub_406670+39C↑j
.text:00406A1A                                         ; sub_406670+7E9↓j
.text:00406A1A                 mov     esi, [eax+0Ch]
.text:00406A1D                 xor     eax, eax
.text:00406A1F                 mov     [ecx], esi
.text:00406A21                 jmp     loc_406897
.text:00406A26 ; ---------------------------------------------------------------------------
.text:00406A26
.text:00406A26 loc_406A26:                             ; CODE XREF: sub_406670+36B↑j
.text:00406A26                 mov     edi, [esp+arg_44]
.text:00406A2A                 test    edi, edi
.text:00406A2C                 jz      short loc_406A80
.text:00406A2E                 mov     esi, [esp+arg_60]
.text:00406A32                 mov     edx, [esi+eax*4-4]
.text:00406A36                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00406A3A                 jz      short loc_406AA2
.text:00406A3C                 mov     dword ptr [esp+0], offset sub_406510
.text:00406A43                 call    ds:libintl_gettext
.text:00406A49                 mov     edx, [esp+arg_40]
.text:00406A4D                 mov     edi, [edx]
.text:00406A4F                 mov     [esp+arg_C], edi
.text:00406A53                 mov     ebx, [ebp+0]
.text:00406A56                 mov     edi, [esp+arg_60]
.text:00406A5A                 mov     ecx, [edi+ebx*4-4]
.text:00406A5E                 movsx   esi, byte ptr [ecx]
.text:00406A61                 mov     ecx, ds:_iob
.text:00406A67                 add     ecx, 40h ; '@'
.text:00406A6A                 mov     [esp+arg_8], esi
.text:00406A6E                 mov     ebx, [edi]
.text:00406A70                 mov     [esp+Str2], eax ; Format
.text:00406A74                 mov     [esp+0], ecx    ; Stream
.text:00406A77                 mov     [esp+MaxCount], ebx
.text:00406A7B                 call    fprintf
.text:00406A80
.text:00406A80 loc_406A80:                             ; CODE XREF: sub_406670+3BC↑j
.text:00406A80                                         ; sub_406670+468↓j
.text:00406A80                 mov     ecx, [ebp+14h]
.text:00406A83                 mov     [esp+0], ecx    ; Str
.text:00406A86                 call    strlen
.text:00406A8B                 add     [ebp+14h], eax
.text:00406A8E                 mov     eax, [esp+arg_40]
.text:00406A92                 mov     esi, [eax+0Ch]
.text:00406A95                 mov     [ebp+8], esi
.text:00406A98
.text:00406A98 loc_406A98:                             ; CODE XREF: sub_406670+5B5↓j
.text:00406A98                                         ; sub_406670+80E↓j ...
.text:00406A98                 mov     eax, 3Fh ; '?'
.text:00406A9D                 jmp     loc_406897
.text:00406AA2 ; ---------------------------------------------------------------------------
.text:00406AA2
.text:00406AA2 loc_406AA2:                             ; CODE XREF: sub_406670+3CA↑j
.text:00406AA2                 mov     dword ptr [esp+0], offset sub_406550
.text:00406AA9                 call    ds:libintl_gettext
.text:00406AAF                 mov     edx, [esp+arg_40]
.text:00406AB3                 mov     edi, [esp+arg_60]
.text:00406AB7                 mov     ecx, ds:_iob
.text:00406ABD                 mov     esi, [edx]
.text:00406ABF                 add     ecx, 40h ; '@'
.text:00406AC2                 mov     [esp+arg_8], esi
.text:00406AC6                 mov     ebx, [edi]
.text:00406AC8                 mov     [esp+Str2], eax ; Format
.text:00406ACC                 mov     [esp+0], ecx    ; Stream
.text:00406ACF                 mov     [esp+MaxCount], ebx
.text:00406AD3                 call    fprintf
.text:00406AD8                 jmp     short loc_406A80
.text:00406AD8 ; END OF FUNCTION CHUNK FOR sub_406670
.text:00406AD8 ; ---------------------------------------------------------------------------
.text:00406ADA                 align 10h
.text:00406AE0 ; START OF FUNCTION CHUNK FOR sub_406670
.text:00406AE0
.text:00406AE0 loc_406AE0:                             ; CODE XREF: sub_406670+35C↑j
.text:00406AE0                 mov     ebx, [esp+arg_40]
.text:00406AE4                 cmp     dword ptr [ebx+4], 1
.text:00406AE8                 jnz     loc_4069E3
.text:00406AEE                 cmp     eax, [esp+arg_5C]
.text:00406AF2                 jge     short loc_406B09
.text:00406AF4                 mov     ebx, [esp+arg_60]
.text:00406AF8                 lea     edi, [ecx+2]
.text:00406AFB                 mov     [ebp+0], edi
.text:00406AFE                 mov     esi, [ebx+eax*4]
.text:00406B01                 mov     [ebp+0Ch], esi
.text:00406B04                 jmp     loc_4069E3
.text:00406B09 ; ---------------------------------------------------------------------------
.text:00406B09
.text:00406B09 loc_406B09:                             ; CODE XREF: sub_406670+482↑j
.text:00406B09                 mov     edx, [esp+arg_44]
.text:00406B0D                 test    edx, edx
.text:00406B0F                 jnz     short loc_406B40
.text:00406B11
.text:00406B11 loc_406B11:                             ; CODE XREF: sub_406670+507↓j
.text:00406B11                 mov     edx, [ebp+14h]
.text:00406B14                 mov     [esp+0], edx    ; Str
.text:00406B17                 call    strlen
.text:00406B1C                 add     [ebp+14h], eax
.text:00406B1F                 mov     eax, [esp+arg_40]
.text:00406B23                 mov     edi, [eax+0Ch]
.text:00406B26                 mov     [ebp+8], edi
.text:00406B29
.text:00406B29 loc_406B29:                             ; CODE XREF: sub_406670+892↓j
.text:00406B29                 mov     ebp, [esp+Str]
.text:00406B2D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00406B31                 setnz   bl
.text:00406B34                 movzx   esi, bl
.text:00406B37                 lea     eax, [esi+esi*4+3Ah]
.text:00406B3B                 jmp     loc_406897
.text:00406B40 ; ---------------------------------------------------------------------------
.text:00406B40
.text:00406B40 loc_406B40:                             ; CODE XREF: sub_406670+49F↑j
.text:00406B40                 mov     dword ptr [esp+0], offset sub_406590
.text:00406B47                 call    ds:libintl_gettext
.text:00406B4D                 mov     ecx, [ebp+0]
.text:00406B50                 mov     esi, [esp+arg_60]
.text:00406B54                 mov     ebx, [esi+ecx*4-4]
.text:00406B58                 mov     ecx, ds:_iob
.text:00406B5E                 mov     [esp+arg_8], ebx
.text:00406B62                 mov     edi, [esi]
.text:00406B64                 add     ecx, 40h ; '@'
.text:00406B67                 mov     [esp+Str2], eax ; Format
.text:00406B6B                 mov     [esp+0], ecx    ; Stream
.text:00406B6E                 mov     [esp+MaxCount], edi
.text:00406B72                 call    fprintf
.text:00406B77                 jmp     short loc_406B11
.text:00406B77 ; END OF FUNCTION CHUNK FOR sub_406670
.text:00406B77 ; ---------------------------------------------------------------------------
.text:00406B79                 align 10h
.text:00406B80 ; START OF FUNCTION CHUNK FOR sub_406670
.text:00406B80
.text:00406B80 loc_406B80:                             ; CODE XREF: sub_406670+2EE↑j
.text:00406B80                                         ; sub_406670+34A↑j
.text:00406B80                 mov     eax, [esp+arg_70]
.text:00406B84                 test    eax, eax
.text:00406B86                 jz      short loc_406BB6
.text:00406B88                 mov     ebx, [ebp+0]
.text:00406B8B                 mov     esi, [esp+arg_60]
.text:00406B8F                 mov     edi, [esi+ebx*4]
.text:00406B92                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00406B96                 jz      short loc_406BB9
.text:00406B98                 mov     ecx, [ebp+14h]
.text:00406B9B                 mov     edx, [esp+Str]
.text:00406B9F                 movsx   ebx, byte ptr [ecx]
.text:00406BA2                 mov     [esp+0], edx    ; Str
.text:00406BA5                 mov     [esp+Str2], ebx ; Val
.text:00406BA9                 call    strchr
.text:00406BAE                 test    eax, eax
.text:00406BB0                 jnz     loc_406C60
.text:00406BB6
.text:00406BB6 loc_406BB6:                             ; CODE XREF: sub_406670+516↑j
.text:00406BB6                 mov     ebx, [ebp+0]
.text:00406BB9
.text:00406BB9 loc_406BB9:                             ; CODE XREF: sub_406670+526↑j
.text:00406BB9                 mov     eax, [esp+arg_44]
.text:00406BBD                 test    eax, eax
.text:00406BBF                 jz      short loc_406C11
.text:00406BC1                 mov     esi, [esp+arg_60]
.text:00406BC5                 mov     edi, [esi+ebx*4]
.text:00406BC8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00406BCC                 jz      short loc_406C2A
.text:00406BCE                 mov     dword ptr [esp+0], offset sub_4065D0
.text:00406BD5                 call    ds:libintl_gettext
.text:00406BDB                 mov     edi, [ebp+14h]
.text:00406BDE                 mov     [esp+arg_C], edi
.text:00406BE2                 mov     ebx, [ebp+0]
.text:00406BE5                 mov     edi, [esp+arg_60]
.text:00406BE9                 mov     esi, [edi+ebx*4]
.text:00406BEC                 movsx   ecx, byte ptr [esi]
.text:00406BEF                 mov     esi, ds:_iob
.text:00406BF5                 add     esi, 40h ; '@'
.text:00406BF8                 mov     [esp+arg_8], ecx
.text:00406BFC                 mov     ebx, [edi]
.text:00406BFE                 mov     [esp+Str2], eax ; Format
.text:00406C02                 mov     [esp+0], esi    ; Stream
.text:00406C05                 mov     [esp+MaxCount], ebx
.text:00406C09                 call    fprintf
.text:00406C0E
.text:00406C0E loc_406C0E:                             ; CODE XREF: sub_406670+5ED↓j
.text:00406C0E                 mov     ebx, [ebp+0]
.text:00406C11
.text:00406C11 loc_406C11:                             ; CODE XREF: sub_406670+54F↑j
.text:00406C11                 mov     dword ptr [ebp+14h], offset loc_4065F0
.text:00406C18                 lea     edx, [ebx+1]
.text:00406C1B                 mov     [ebp+0], edx
.text:00406C1E
.text:00406C1E loc_406C1E:                             ; CODE XREF: sub_406670+A69↓j
.text:00406C1E                 mov     dword ptr [ebp+8], 0
.text:00406C25                 jmp     loc_406A98
.text:00406C2A ; ---------------------------------------------------------------------------
.text:00406C2A
.text:00406C2A loc_406C2A:                             ; CODE XREF: sub_406670+55C↑j
.text:00406C2A                 mov     dword ptr [esp+0], offset sub_406610
.text:00406C31                 call    ds:libintl_gettext
.text:00406C37                 mov     ecx, [ebp+14h]
.text:00406C3A                 mov     edi, [esp+arg_60]
.text:00406C3E                 mov     edx, ds:_iob
.text:00406C44                 mov     [esp+arg_8], ecx
.text:00406C48                 mov     ebx, [edi]
.text:00406C4A                 add     edx, 40h ; '@'
.text:00406C4D                 mov     [esp+Str2], eax ; Format
.text:00406C51                 mov     [esp+MaxCount], ebx
.text:00406C55                 mov     [esp+0], edx    ; Stream
.text:00406C58                 call    fprintf
.text:00406C5D                 jmp     short loc_406C0E
.text:00406C5D ; END OF FUNCTION CHUNK FOR sub_406670
.text:00406C5D ; ---------------------------------------------------------------------------
.text:00406C5F                 align 10h
.text:00406C60 ; START OF FUNCTION CHUNK FOR sub_406670
.text:00406C60
.text:00406C60 loc_406C60:                             ; CODE XREF: sub_406670+266↑j
.text:00406C60                                         ; sub_406670+285↑j ...
.text:00406C60                 mov     esi, [ebp+14h]
.text:00406C63                 movzx   ebx, byte ptr [esi]
.text:00406C66                 inc     esi
.text:00406C67                 mov     [ebp+14h], esi
.text:00406C6A                 mov     ecx, [esp+Str]
.text:00406C6E                 movsx   esi, bl
.text:00406C71                 mov     [esp+Str2], esi ; Val
.text:00406C75                 mov     edi, esi
.text:00406C77                 mov     [esp+0], ecx    ; Str
.text:00406C7A                 call    strchr
.text:00406C7F                 mov     ecx, [ebp+14h]
.text:00406C82                 cmp     byte ptr [ecx], 0
.text:00406C85                 jnz     short loc_406C8A
.text:00406C87                 inc     dword ptr [ebp+0]
.text:00406C8A
.text:00406C8A loc_406C8A:                             ; CODE XREF: sub_406670+615↑j
.text:00406C8A                 test    eax, eax
.text:00406C8C                 jz      loc_407070
.text:00406C92                 cmp     bl, 3Ah ; ':'
.text:00406C95                 jz      loc_407070
.text:00406C9B                 cmp     byte ptr [eax], 57h ; 'W'
.text:00406C9E                 jz      loc_406D56
.text:00406CA4                 movzx   edx, byte ptr [eax+1]
.text:00406CA8
.text:00406CA8 loc_406CA8:                             ; CODE XREF: sub_406670+6ED↓j
.text:00406CA8                 cmp     dl, 3Ah ; ':'
.text:00406CAB                 jz      short loc_406CB4
.text:00406CAD
.text:00406CAD loc_406CAD:                             ; CODE XREF: sub_406670+660↓j
.text:00406CAD                 mov     eax, esi
.text:00406CAF                 jmp     loc_406897
.text:00406CB4 ; ---------------------------------------------------------------------------
.text:00406CB4
.text:00406CB4 loc_406CB4:                             ; CODE XREF: sub_406670+63B↑j
.text:00406CB4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00406CB8                 jz      loc_406D41
.text:00406CBE                 cmp     byte ptr [ecx], 0
.text:00406CC1                 jz      short loc_406CD2
.text:00406CC3
.text:00406CC3 loc_406CC3:                             ; CODE XREF: sub_406670+6D4↓j
.text:00406CC3                 inc     dword ptr [ebp+0]
.text:00406CC6                 mov     [ebp+0Ch], ecx
.text:00406CC9
.text:00406CC9 loc_406CC9:                             ; CODE XREF: sub_406670+67B↓j
.text:00406CC9                                         ; sub_406670+696↓j ...
.text:00406CC9                 mov     dword ptr [ebp+14h], 0
.text:00406CD0                 jmp     short loc_406CAD
.text:00406CD2 ; ---------------------------------------------------------------------------
.text:00406CD2
.text:00406CD2 loc_406CD2:                             ; CODE XREF: sub_406670+651↑j
.text:00406CD2                 mov     ecx, [ebp+0]
.text:00406CD5                 cmp     ecx, [esp+arg_5C]
.text:00406CD9                 jz      short loc_406CED
.text:00406CDB                 mov     eax, [esp+arg_60]
.text:00406CDF                 lea     edx, [ecx+1]
.text:00406CE2                 mov     [ebp+0], edx
.text:00406CE5                 mov     ebx, [eax+ecx*4]
.text:00406CE8                 mov     [ebp+0Ch], ebx
.text:00406CEB                 jmp     short loc_406CC9
.text:00406CED ; ---------------------------------------------------------------------------
.text:00406CED
.text:00406CED loc_406CED:                             ; CODE XREF: sub_406670+669↑j
.text:00406CED                 mov     ecx, [esp+arg_44]
.text:00406CF1                 test    ecx, ecx
.text:00406CF3                 jnz     short loc_406D0F
.text:00406CF5
.text:00406CF5 loc_406CF5:                             ; CODE XREF: sub_406670+6CF↓j
.text:00406CF5                 mov     [ebp+8], edi
.text:00406CF8                 mov     edi, [esp+Str]
.text:00406CFC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00406CFF                 jz      short loc_406D08
.text:00406D01                 mov     esi, 3Fh ; '?'
.text:00406D06                 jmp     short loc_406CC9
.text:00406D08 ; ---------------------------------------------------------------------------
.text:00406D08
.text:00406D08 loc_406D08:                             ; CODE XREF: sub_406670+68F↑j
.text:00406D08                 mov     esi, 3Ah ; ':'
.text:00406D0D                 jmp     short loc_406CC9
.text:00406D0F ; ---------------------------------------------------------------------------
.text:00406D0F
.text:00406D0F loc_406D0F:                             ; CODE XREF: sub_406670+683↑j
.text:00406D0F                 mov     dword ptr [esp+0], 406630h
.text:00406D16                 call    ds:libintl_gettext
.text:00406D1C                 mov     [esp+arg_8], edi
.text:00406D20                 mov     ebx, [esp+arg_60]
.text:00406D24                 mov     edx, ds:_iob
.text:00406D2A                 mov     esi, [ebx]
.text:00406D2C                 add     edx, 40h ; '@'
.text:00406D2F                 mov     [esp+Str2], eax ; Format
.text:00406D33                 mov     [esp+MaxCount], esi
.text:00406D37                 mov     [esp+0], edx    ; Stream
.text:00406D3A                 call    fprintf
.text:00406D3F                 jmp     short loc_406CF5
.text:00406D41 ; ---------------------------------------------------------------------------
.text:00406D41
.text:00406D41 loc_406D41:                             ; CODE XREF: sub_406670+648↑j
.text:00406D41                 cmp     byte ptr [ecx], 0
.text:00406D44                 jnz     loc_406CC3
.text:00406D4A                 mov     dword ptr [ebp+0Ch], 0
.text:00406D51                 jmp     loc_406CC9
.text:00406D56 ; ---------------------------------------------------------------------------
.text:00406D56
.text:00406D56 loc_406D56:                             ; CODE XREF: sub_406670+62E↑j
.text:00406D56                 movzx   edx, byte ptr [eax+1]
.text:00406D5A                 cmp     dl, 3Bh ; ';'
.text:00406D5D                 jnz     loc_406CA8
.text:00406D63                 mov     [esp+arg_2C], 0
.text:00406D6B                 mov     [esp+arg_28], 0
.text:00406D73                 mov     [esp+arg_24], 0
.text:00406D7B                 mov     [esp+arg_20], 0
.text:00406D83                 cmp     byte ptr [ecx], 0
.text:00406D86                 jz      loc_406FFB
.text:00406D8C                 inc     dword ptr [ebp+0]
.text:00406D8F                 mov     [ebp+0Ch], ecx
.text:00406D92
.text:00406D92 loc_406D92:                             ; CODE XREF: sub_406670+9A4↓j
.text:00406D92                 mov     edi, [ebp+0Ch]
.text:00406D95                 mov     [ebp+14h], edi
.text:00406D98                 movzx   eax, byte ptr [edi]
.text:00406D9B                 test    al, al
.text:00406D9D                 jz      short loc_406DAF
.text:00406D9F                 cmp     al, 3Dh ; '='
.text:00406DA1                 jz      short loc_406DAF
.text:00406DA3
.text:00406DA3 loc_406DA3:                             ; CODE XREF: sub_406670+73D↓j
.text:00406DA3                 inc     edi
.text:00406DA4                 movzx   eax, byte ptr [edi]
.text:00406DA7                 test    al, al
.text:00406DA9                 jz      short loc_406DAF
.text:00406DAB                 cmp     al, 3Dh ; '='
.text:00406DAD                 jnz     short loc_406DA3
.text:00406DAF
.text:00406DAF loc_406DAF:                             ; CODE XREF: sub_406670+72D↑j
.text:00406DAF                                         ; sub_406670+731↑j ...
.text:00406DAF                 mov     [esp+arg_1C], 0
.text:00406DB7                 mov     esi, [esp+arg_68]
.text:00406DBB                 mov     eax, [esi]
.text:00406DBD                 test    eax, eax
.text:00406DBF                 jz      loc_406F40
.text:00406DC5                 mov     ecx, eax
.text:00406DC7
.text:00406DC7 loc_406DC7:                             ; CODE XREF: sub_406670+783↓j
.text:00406DC7                 mov     ebx, [ebp+14h]
.text:00406DCA                 mov     eax, edi
.text:00406DCC                 mov     [esp+0], ecx    ; Str1
.text:00406DCF                 sub     eax, ebx
.text:00406DD1                 mov     [esp+MaxCount], eax ; MaxCount
.text:00406DD5                 mov     [esp+Str2], ebx ; Str2
.text:00406DD9                 call    strncmp
.text:00406DDE                 test    eax, eax
.text:00406DE0                 jz      loc_406FA7
.text:00406DE6
.text:00406DE6 loc_406DE6:                             ; CODE XREF: sub_406670+95C↓j
.text:00406DE6                                         ; sub_406670+96D↓j
.text:00406DE6                 inc     [esp+arg_1C]
.text:00406DEA                 add     esi, 10h
.text:00406DED                 mov     edx, [esi]
.text:00406DEF                 test    edx, edx
.text:00406DF1                 mov     ecx, edx
.text:00406DF3                 jnz     short loc_406DC7
.text:00406DF5
.text:00406DF5 loc_406DF5:                             ; CODE XREF: sub_406670+986↓j
.text:00406DF5                 mov     esi, [esp+arg_24]
.text:00406DF9                 test    esi, esi
.text:00406DFB                 jz      short loc_406E09
.text:00406DFD                 mov     ebx, [esp+arg_28]
.text:00406E01                 test    ebx, ebx
.text:00406E03                 jz      loc_406F51
.text:00406E09
.text:00406E09 loc_406E09:                             ; CODE XREF: sub_406670+78B↑j
.text:00406E09                 mov     esi, [esp+arg_2C]
.text:00406E0D                 test    esi, esi
.text:00406E0F                 jz      loc_406F40
.text:00406E15                 cmp     byte ptr [edi], 0
.text:00406E18                 jz      loc_406EC0
.text:00406E1E                 mov     ecx, [esp+arg_2C]
.text:00406E22                 mov     ebx, [ecx+4]
.text:00406E25                 test    ebx, ebx
.text:00406E27                 jz      short loc_406E68
.text:00406E29                 lea     edx, [edi+1]
.text:00406E2C                 mov     [ebp+0Ch], edx
.text:00406E2F
.text:00406E2F loc_406E2F:                             ; CODE XREF: sub_406670+858↓j
.text:00406E2F                                         ; sub_406670+877↓j
.text:00406E2F                 mov     edi, [ebp+14h]
.text:00406E32                 mov     [esp+0], edi    ; Str
.text:00406E35                 call    strlen
.text:00406E3A                 add     [ebp+14h], eax
.text:00406E3D                 mov     eax, [esp+arg_6C]
.text:00406E41                 test    eax, eax
.text:00406E43                 jz      short loc_406E50
.text:00406E45                 mov     edx, [esp+arg_20]
.text:00406E49                 mov     ebp, [esp+arg_6C]
.text:00406E4D                 mov     [ebp+0], edx
.text:00406E50
.text:00406E50 loc_406E50:                             ; CODE XREF: sub_406670+7D3↑j
.text:00406E50                 mov     eax, [esp+arg_2C]
.text:00406E54                 mov     ecx, [eax+8]
.text:00406E57                 test    ecx, ecx
.text:00406E59                 jnz     loc_406A1A
.text:00406E5F                 mov     ecx, [esp+arg_2C]
.text:00406E63                 jmp     loc_406A12
.text:00406E68 ; ---------------------------------------------------------------------------
.text:00406E68
.text:00406E68 loc_406E68:                             ; CODE XREF: sub_406670+7B7↑j
.text:00406E68                 mov     eax, [esp+arg_44]
.text:00406E6C                 test    eax, eax
.text:00406E6E                 jnz     short loc_406E83
.text:00406E70
.text:00406E70 loc_406E70:                             ; CODE XREF: sub_406670+849↓j
.text:00406E70                 mov     ecx, [ebp+14h]
.text:00406E73                 mov     [esp+0], ecx    ; Str
.text:00406E76                 call    strlen
.text:00406E7B                 add     [ebp+14h], eax
.text:00406E7E                 jmp     loc_406A98
.text:00406E83 ; ---------------------------------------------------------------------------
.text:00406E83
.text:00406E83 loc_406E83:                             ; CODE XREF: sub_406670+7FE↑j
.text:00406E83                 mov     dword ptr [esp+0], offset sub_406670
.text:00406E8A                 call    ds:libintl_gettext
.text:00406E90                 mov     edx, [esp+arg_2C]
.text:00406E94                 mov     ebx, [esp+arg_60]
.text:00406E98                 mov     edi, [edx]
.text:00406E9A                 mov     [esp+arg_8], edi
.text:00406E9E                 mov     edi, ds:_iob
.text:00406EA4                 mov     esi, [ebx]
.text:00406EA6                 mov     [esp+Str2], eax ; Format
.text:00406EAA                 add     edi, 40h ; '@'
.text:00406EAD                 mov     [esp+MaxCount], esi
.text:00406EB1                 mov     [esp+0], edi    ; Stream
.text:00406EB4                 call    fprintf
.text:00406EB9                 jmp     short loc_406E70
.text:00406EB9 ; END OF FUNCTION CHUNK FOR sub_406670
.text:00406EB9 ; ---------------------------------------------------------------------------
.text:00406EBB                 align 10h
.text:00406EC0 ; START OF FUNCTION CHUNK FOR sub_406670
.text:00406EC0
.text:00406EC0 loc_406EC0:                             ; CODE XREF: sub_406670+7A8↑j
.text:00406EC0                 mov     esi, [esp+arg_2C]
.text:00406EC4                 cmp     dword ptr [esi+4], 1
.text:00406EC8                 jnz     loc_406E2F
.text:00406ECE                 mov     ecx, [ebp+0]
.text:00406ED1                 cmp     ecx, [esp+arg_5C]
.text:00406ED5                 jge     short loc_406EEC
.text:00406ED7                 mov     eax, [esp+arg_60]
.text:00406EDB                 lea     ebx, [ecx+1]
.text:00406EDE                 mov     [ebp+0], ebx
.text:00406EE1                 mov     edi, [eax+ecx*4]
.text:00406EE4                 mov     [ebp+0Ch], edi
.text:00406EE7                 jmp     loc_406E2F
.text:00406EEC ; ---------------------------------------------------------------------------
.text:00406EEC
.text:00406EEC loc_406EEC:                             ; CODE XREF: sub_406670+865↑j
.text:00406EEC                 mov     edx, [esp+arg_44]
.text:00406EF0                 test    edx, edx
.text:00406EF2                 jnz     short loc_406F07
.text:00406EF4
.text:00406EF4 loc_406EF4:                             ; CODE XREF: sub_406670+8CE↓j
.text:00406EF4                 mov     edx, [ebp+14h]
.text:00406EF7                 mov     [esp+0], edx    ; Str
.text:00406EFA                 call    strlen
.text:00406EFF                 add     [ebp+14h], eax
.text:00406F02                 jmp     loc_406B29
.text:00406F07 ; ---------------------------------------------------------------------------
.text:00406F07
.text:00406F07 loc_406F07:                             ; CODE XREF: sub_406670+882↑j
.text:00406F07                 mov     dword ptr [esp+0], offset sub_406590
.text:00406F0E                 call    ds:libintl_gettext
.text:00406F14                 mov     ecx, [ebp+0]
.text:00406F17                 mov     ebx, [esp+arg_60]
.text:00406F1B                 mov     edi, [ebx+ecx*4-4]
.text:00406F1F                 mov     ecx, ds:_iob
.text:00406F25                 mov     [esp+arg_8], edi
.text:00406F29                 mov     esi, [ebx]
.text:00406F2B                 add     ecx, 40h ; '@'
.text:00406F2E                 mov     [esp+Str2], eax ; Format
.text:00406F32                 mov     [esp+0], ecx    ; Stream
.text:00406F35                 mov     [esp+MaxCount], esi
.text:00406F39                 call    fprintf
.text:00406F3E                 jmp     short loc_406EF4
.text:00406F40 ; ---------------------------------------------------------------------------
.text:00406F40
.text:00406F40 loc_406F40:                             ; CODE XREF: sub_406670+74F↑j
.text:00406F40                                         ; sub_406670+79F↑j
.text:00406F40                 mov     dword ptr [ebp+14h], 0
.text:00406F47                 mov     eax, 57h ; 'W'
.text:00406F4C                 jmp     loc_406897
.text:00406F51 ; ---------------------------------------------------------------------------
.text:00406F51
.text:00406F51 loc_406F51:                             ; CODE XREF: sub_406670+793↑j
.text:00406F51                 mov     edi, [esp+arg_44]
.text:00406F55                 test    edi, edi
.text:00406F57                 jnz     short loc_406F6F
.text:00406F59
.text:00406F59 loc_406F59:                             ; CODE XREF: sub_406670+935↓j
.text:00406F59                 mov     edx, [ebp+14h]
.text:00406F5C                 mov     [esp+0], edx    ; Str
.text:00406F5F                 call    strlen
.text:00406F64                 add     [ebp+14h], eax
.text:00406F67                 inc     dword ptr [ebp+0]
.text:00406F6A                 jmp     loc_406A98
.text:00406F6F ; ---------------------------------------------------------------------------
.text:00406F6F
.text:00406F6F loc_406F6F:                             ; CODE XREF: sub_406670+8E7↑j
.text:00406F6F                 mov     dword ptr [esp+0], offset sub_4066B0
.text:00406F76                 call    ds:libintl_gettext
.text:00406F7C                 mov     ecx, [ebp+0]
.text:00406F7F                 mov     ebx, [esp+arg_60]
.text:00406F83                 mov     edi, [ebx+ecx*4]
.text:00406F86                 mov     ecx, ds:_iob
.text:00406F8C                 mov     [esp+arg_8], edi
.text:00406F90                 mov     esi, [ebx]
.text:00406F92                 add     ecx, 40h ; '@'
.text:00406F95                 mov     [esp+Str2], eax ; Format
.text:00406F99                 mov     [esp+0], ecx    ; Stream
.text:00406F9C                 mov     [esp+MaxCount], esi
.text:00406FA0                 call    fprintf
.text:00406FA5                 jmp     short loc_406F59
.text:00406FA7 ; ---------------------------------------------------------------------------
.text:00406FA7
.text:00406FA7 loc_406FA7:                             ; CODE XREF: sub_406670+770↑j
.text:00406FA7                 mov     edx, [ebp+14h]
.text:00406FAA                 mov     ebx, edi
.text:00406FAC                 mov     ecx, [esi]
.text:00406FAE                 sub     ebx, edx
.text:00406FB0                 mov     [esp+0], ecx    ; Str
.text:00406FB3                 call    strlen
.text:00406FB8                 cmp     ebx, eax
.text:00406FBA                 jz      short loc_406FE2
.text:00406FBC                 mov     ebx, [esp+arg_2C]
.text:00406FC0                 test    ebx, ebx
.text:00406FC2                 jz      short loc_406FD1
.text:00406FC4                 mov     [esp+arg_24], 1
.text:00406FCC                 jmp     loc_406DE6
.text:00406FD1 ; ---------------------------------------------------------------------------
.text:00406FD1
.text:00406FD1 loc_406FD1:                             ; CODE XREF: sub_406670+952↑j
.text:00406FD1                 mov     [esp+arg_2C], esi
.text:00406FD5                 mov     ecx, [esp+arg_1C]
.text:00406FD9                 mov     [esp+arg_20], ecx
.text:00406FDD                 jmp     loc_406DE6
.text:00406FE2 ; ---------------------------------------------------------------------------
.text:00406FE2
.text:00406FE2 loc_406FE2:                             ; CODE XREF: sub_406670+94A↑j
.text:00406FE2                 mov     [esp+arg_2C], esi
.text:00406FE6                 mov     eax, [esp+arg_1C]
.text:00406FEA                 mov     [esp+arg_28], 1
.text:00406FF2                 mov     [esp+arg_20], eax
.text:00406FF6                 jmp     loc_406DF5
.text:00406FFB ; ---------------------------------------------------------------------------
.text:00406FFB
.text:00406FFB loc_406FFB:                             ; CODE XREF: sub_406670+716↑j
.text:00406FFB                 mov     edx, [ebp+0]
.text:00406FFE                 cmp     edx, [esp+arg_5C]
.text:00407002                 jz      short loc_407019
.text:00407004                 mov     ebx, [esp+arg_60]
.text:00407008                 lea     esi, [edx+1]
.text:0040700B                 mov     [ebp+0], esi
.text:0040700E                 mov     edi, [ebx+edx*4]
.text:00407011                 mov     [ebp+0Ch], edi
.text:00407014                 jmp     loc_406D92
.text:00407019 ; ---------------------------------------------------------------------------
.text:00407019
.text:00407019 loc_407019:                             ; CODE XREF: sub_406670+992↑j
.text:00407019                 mov     edi, [esp+arg_44]
.text:0040701D                 test    edi, edi
.text:0040701F                 jnz     short loc_40703C
.text:00407021
.text:00407021 loc_407021:                             ; CODE XREF: sub_406670+9FC↓j
.text:00407021                 mov     [ebp+8], esi
.text:00407024                 mov     ebp, [esp+Str]
.text:00407028                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040702C                 jz      short loc_407038
.text:0040702E                 mov     bl, 3Fh ; '?'
.text:00407030
.text:00407030 loc_407030:                             ; CODE XREF: sub_406670+9CA↓j
.text:00407030                 movsx   eax, bl
.text:00407033                 jmp     loc_406897
.text:00407038 ; ---------------------------------------------------------------------------
.text:00407038
.text:00407038 loc_407038:                             ; CODE XREF: sub_406670+9BC↑j
.text:00407038                 mov     bl, 3Ah ; ':'
.text:0040703A                 jmp     short loc_407030
.text:0040703C ; ---------------------------------------------------------------------------
.text:0040703C
.text:0040703C loc_40703C:                             ; CODE XREF: sub_406670+9AF↑j
.text:0040703C                 mov     dword ptr [esp+0], 406630h
.text:00407043                 call    ds:libintl_gettext
.text:00407049                 mov     [esp+arg_8], esi
.text:0040704D                 mov     edx, [esp+arg_60]
.text:00407051                 mov     ecx, ds:_iob
.text:00407057                 mov     ebx, [edx]
.text:00407059                 add     ecx, 40h ; '@'
.text:0040705C                 mov     [esp+Str2], eax ; Format
.text:00407060                 mov     [esp+MaxCount], ebx
.text:00407064                 mov     [esp+0], ecx    ; Stream
.text:00407067                 call    fprintf
.text:0040706C                 jmp     short loc_407021
.text:0040706C ; END OF FUNCTION CHUNK FOR sub_406670
.text:0040706C ; ---------------------------------------------------------------------------
.text:0040706E                 align 10h
.text:00407070 ; START OF FUNCTION CHUNK FOR sub_406670
.text:00407070
.text:00407070 loc_407070:                             ; CODE XREF: sub_406670+61C↑j
.text:00407070                                         ; sub_406670+625↑j
.text:00407070                 mov     eax, [esp+arg_44]
.text:00407074                 test    eax, eax
.text:00407076                 jz      short loc_4070AF
.text:00407078                 mov     ebx, [ebp+1Ch]
.text:0040707B                 test    ebx, ebx
.text:0040707D                 jz      short loc_4070B7
.text:0040707F                 mov     dword ptr [esp+0], offset loc_4066D1
.text:00407086
.text:00407086 loc_407086:                             ; CODE XREF: sub_406670+A4E↓j
.text:00407086                 call    ds:libintl_gettext
.text:0040708C                 mov     [esp+arg_8], esi
.text:00407090                 mov     ebx, [esp+arg_60]
.text:00407094                 mov     edx, ds:_iob
.text:0040709A                 mov     esi, [ebx]
.text:0040709C                 add     edx, 40h ; '@'
.text:0040709F                 mov     [esp+Str2], eax ; Format
.text:004070A3                 mov     [esp+MaxCount], esi
.text:004070A7                 mov     [esp+0], edx    ; Stream
.text:004070AA                 call    fprintf
.text:004070AF
.text:004070AF loc_4070AF:                             ; CODE XREF: sub_406670+A06↑j
.text:004070AF                 mov     [ebp+8], edi
.text:004070B2                 jmp     loc_406A98
.text:004070B7 ; ---------------------------------------------------------------------------
.text:004070B7
.text:004070B7 loc_4070B7:                             ; CODE XREF: sub_406670+A0D↑j
.text:004070B7                 mov     dword ptr [esp+0], offset loc_4066EB
.text:004070BE                 jmp     short loc_407086
.text:004070C0 ; ---------------------------------------------------------------------------
.text:004070C0
.text:004070C0 loc_4070C0:                             ; CODE XREF: sub_406670+33E↑j
.text:004070C0                 mov     edi, [esp+arg_44]
.text:004070C4                 test    edi, edi
.text:004070C6                 jnz     short loc_4070DE
.text:004070C8
.text:004070C8 loc_4070C8:                             ; CODE XREF: sub_406670+AA4↓j
.text:004070C8                 mov     edx, [ebp+14h]
.text:004070CB                 mov     [esp+0], edx    ; Str
.text:004070CE                 call    strlen
.text:004070D3                 add     [ebp+14h], eax
.text:004070D6                 inc     dword ptr [ebp+0]
.text:004070D9                 jmp     loc_406C1E
.text:004070DE ; ---------------------------------------------------------------------------
.text:004070DE
.text:004070DE loc_4070DE:                             ; CODE XREF: sub_406670+A56↑j
.text:004070DE                 mov     dword ptr [esp+0], offset loc_406705
.text:004070E5                 call    ds:libintl_gettext
.text:004070EB                 mov     ebx, [ebp+0]
.text:004070EE                 mov     edi, [esp+arg_60]
.text:004070F2                 mov     ecx, [edi+ebx*4]
.text:004070F5                 mov     ebx, ds:_iob
.text:004070FB                 mov     [esp+arg_8], ecx
.text:004070FF                 mov     esi, [edi]
.text:00407101                 add     ebx, 40h ; '@'
.text:00407104                 mov     [esp+Str2], eax ; Format
.text:00407108                 mov     [esp+0], ebx    ; Stream
.text:0040710B                 mov     [esp+MaxCount], esi
.text:0040710F                 call    fprintf
.text:00407114                 jmp     short loc_4070C8
.text:00407116 ; ---------------------------------------------------------------------------
.text:00407116
.text:00407116 loc_407116:                             ; CODE XREF: sub_406670+316↑j
.text:00407116                 mov     ecx, [ebp+14h]
.text:00407119                 mov     ebx, edi
.text:0040711B                 mov     edx, [esi]
.text:0040711D                 sub     ebx, ecx
.text:0040711F                 mov     [esp+0], edx    ; Str
.text:00407122                 call    strlen
.text:00407127                 cmp     ebx, eax
.text:00407129                 jz      short loc_407181
.text:0040712B                 mov     ebx, [esp+arg_40]
.text:0040712F                 test    ebx, ebx
.text:00407131                 jz      short loc_407170
.text:00407133                 mov     edx, [esp+arg_70]
.text:00407137                 test    edx, edx
.text:00407139                 jnz     short loc_407147
.text:0040713B                 mov     ecx, [esp+arg_40]
.text:0040713F                 mov     ebx, [esi+4]
.text:00407142                 cmp     [ecx+4], ebx
.text:00407145                 jz      short loc_407154
.text:00407147
.text:00407147 loc_407147:                             ; CODE XREF: sub_406670+AC9↑j
.text:00407147                                         ; sub_406670+AEA↓j ...
.text:00407147                 mov     [esp+arg_38], 1
.text:0040714F                 jmp     loc_40698C
.text:00407154 ; ---------------------------------------------------------------------------
.text:00407154
.text:00407154 loc_407154:                             ; CODE XREF: sub_406670+AD5↑j
.text:00407154                 mov     edx, [esi+8]
.text:00407157                 cmp     [ecx+8], edx
.text:0040715A                 jnz     short loc_407147
.text:0040715C                 mov     ebx, [esi+0Ch]
.text:0040715F                 cmp     [ecx+0Ch], ebx
.text:00407162                 jnz     short loc_407147
.text:00407164                 jmp     loc_40698C
.text:00407164 ; END OF FUNCTION CHUNK FOR sub_406670
.text:00407164 ; ---------------------------------------------------------------------------
.text:00407169                 align 10h
.text:00407170 ; START OF FUNCTION CHUNK FOR sub_406670
.text:00407170
.text:00407170 loc_407170:                             ; CODE XREF: sub_406670+AC1↑j
.text:00407170                 mov     [esp+arg_40], esi
.text:00407174                 mov     eax, [esp+arg_30]
.text:00407178                 mov     [esp+arg_34], eax
.text:0040717C                 jmp     loc_40698C
.text:00407181 ; ---------------------------------------------------------------------------
.text:00407181
.text:00407181 loc_407181:                             ; CODE XREF: sub_406670+AB9↑j
.text:00407181                 mov     [esp+arg_40], esi
.text:00407185                 mov     ecx, [esp+arg_30]
.text:00407189                 mov     [esp+arg_3C], 1
.text:00407191                 mov     [esp+arg_34], ecx
.text:00407195                 jmp     loc_4069A0
.text:0040719A ; ---------------------------------------------------------------------------
.text:0040719A
.text:0040719A loc_40719A:                             ; CODE XREF: sub_406670+28F↑j
.text:0040719A                 mov     eax, [esp+Str]
.text:0040719E                 movsx   esi, dl
.text:004071A1                 mov     [esp+Str2], esi ; Val
.text:004071A5                 mov     [esp+0], eax    ; Str
.text:004071A8                 call    strchr
.text:004071AD                 test    eax, eax
.text:004071AF                 jnz     loc_406C60
.text:004071B5                 jmp     loc_406905
.text:004071BA ; ---------------------------------------------------------------------------
.text:004071BA
.text:004071BA loc_4071BA:                             ; CODE XREF: sub_406670+24C↑j
.text:004071BA                 mov     ecx, 1
.text:004071BF                 jmp     loc_4068C2
.text:004071C4 ; ---------------------------------------------------------------------------
.text:004071C4
.text:004071C4 loc_4071C4:                             ; CODE XREF: sub_406670+1A4↑j
.text:004071C4                                         ; sub_406670+200↑j
.text:004071C4                 mov     eax, [ebp+20h]
.text:004071C7                 cmp     eax, [ebp+24h]
.text:004071CA                 jz      loc_4068A0
.text:004071D0                 mov     [ebp+0], eax
.text:004071D3                 jmp     loc_4068A0
.text:004071D8 ; ---------------------------------------------------------------------------
.text:004071D8
.text:004071D8 loc_4071D8:                             ; CODE XREF: sub_406670+1CE↑j
.text:004071D8                 mov     [ebp+20h], eax
.text:004071DB                 jmp     loc_406860
.text:004071E0 ; ---------------------------------------------------------------------------
.text:004071E0
.text:004071E0 loc_4071E0:                             ; CODE XREF: sub_406670+19A↑j
.text:004071E0                 mov     edx, [ebp+20h]
.text:004071E3                 mov     eax, [ebp+24h]
.text:004071E6                 cmp     edx, eax
.text:004071E8                 jz      short loc_407260
.text:004071EA                 cmp     eax, ebx
.text:004071EC                 jz      short loc_407201
.text:004071EE                 mov     [esp+Str2], ebp
.text:004071F2                 mov     ebx, [esp+arg_60]
.text:004071F6                 mov     [esp+0], ebx
.text:004071F9                 call    sub_4073F0
.text:004071FE                 mov     ebx, [ebp+0]
.text:00407201
.text:00407201 loc_407201:                             ; CODE XREF: sub_406670+B7C↑j
.text:00407201                                         ; sub_406670+BF2↓j ...
.text:00407201                 cmp     ebx, [esp+arg_5C]
.text:00407205                 jge     short loc_407250
.text:00407207                 mov     esi, [esp+arg_60]
.text:0040720B                 mov     eax, [esi+ebx*4]
.text:0040720E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00407211                 jz      short loc_407258
.text:00407213                 lea     esi, [esi+0]
.text:00407219                 lea     edi, [edi+0]
.text:00407220
.text:00407220 loc_407220:                             ; CODE XREF: sub_406670+BCC↓j
.text:00407220                                         ; sub_406670+BEC↓j
.text:00407220                 lea     eax, [ebx+1]
.text:00407223                 mov     ebx, eax
.text:00407225                 mov     [ebp+0], eax
.text:00407228                 cmp     eax, [esp+arg_5C]
.text:0040722C                 jge     short loc_407250
.text:0040722E                 mov     edi, [esp+arg_60]
.text:00407232                 mov     edx, [edi+eax*4]
.text:00407235                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00407238                 jz      short loc_407240
.text:0040723A
.text:0040723A loc_40723A:                             ; CODE XREF: sub_406670+BD4↓j
.text:0040723A                 mov     ebx, eax
.text:0040723C                 jmp     short loc_407220
.text:0040723C ; END OF FUNCTION CHUNK FOR sub_406670
.text:0040723C ; ---------------------------------------------------------------------------
.text:0040723E                 align 10h
.text:00407240 ; START OF FUNCTION CHUNK FOR sub_406670
.text:00407240
.text:00407240 loc_407240:                             ; CODE XREF: sub_406670+BC8↑j
.text:00407240                 cmp     byte ptr [edx+1], 0
.text:00407244                 jz      short loc_40723A
.text:00407246                 lea     esi, [esi+0]
.text:00407249                 lea     edi, [edi+0]
.text:00407250
.text:00407250 loc_407250:                             ; CODE XREF: sub_406670+B95↑j
.text:00407250                                         ; sub_406670+BBC↑j ...
.text:00407250                 mov     [ebp+24h], ebx
.text:00407253                 jmp     loc_406810
.text:00407258 ; ---------------------------------------------------------------------------
.text:00407258
.text:00407258 loc_407258:                             ; CODE XREF: sub_406670+BA1↑j
.text:00407258                 cmp     byte ptr [eax+1], 0
.text:0040725C                 jz      short loc_407220
.text:0040725E                 jmp     short loc_407250
.text:00407260 ; ---------------------------------------------------------------------------
.text:00407260
.text:00407260 loc_407260:                             ; CODE XREF: sub_406670+B78↑j
.text:00407260                 cmp     edx, ebx
.text:00407262                 jz      short loc_407201
.text:00407264                 mov     [ebp+20h], ebx
.text:00407267                 jmp     short loc_407201
.text:00407269 ; ---------------------------------------------------------------------------
.text:00407269
.text:00407269 loc_407269:                             ; CODE XREF: sub_406670+158↑j
.text:00407269                 mov     dword ptr [ebp+18h], 0
.text:00407270                 mov     esi, [esp+Str]
.text:00407274
.text:00407274 loc_407274:                             ; CODE XREF: sub_406670+C19↓j
.text:00407274                 inc     esi
.text:00407275                 jmp     loc_4067D8
.text:00407275 ; END OF FUNCTION CHUNK FOR sub_406670
.text:00407275 ; ---------------------------------------------------------------------------
.text:0040727A                 align 10h
.text:00407280 ; START OF FUNCTION CHUNK FOR sub_406670
.text:00407280
.text:00407280 loc_407280:                             ; CODE XREF: sub_406670+150↑j
.text:00407280                 mov     dword ptr [ebp+18h], 2
.text:00407287                 mov     esi, ecx
.text:00407289                 jmp     short loc_407274
.text:00407289 ; END OF FUNCTION CHUNK FOR sub_406670
.text:00407289 ; ---------------------------------------------------------------------------
.text:0040728B                 align 10h
.text:00407290 ; START OF FUNCTION CHUNK FOR sub_406670
.text:00407290
.text:00407290 loc_407290:                             ; CODE XREF: sub_406670+139↑j
.text:00407290                 mov     dword ptr [esp+0], offset loc_406723 ; VarName
.text:00407297                 call    getenv
.text:0040729C                 test    eax, eax
.text:0040729E                 jz      loc_4067B4
.text:004072A4                 jmp     loc_4067AF
.text:004072A4 ; END OF FUNCTION CHUNK FOR sub_406670
.text:004072A4 ; ---------------------------------------------------------------------------
.text:004072A9                 align 10h
.text:004072B0 ; START OF FUNCTION CHUNK FOR sub_406670
.text:004072B0
.text:004072B0 loc_4072B0:                             ; CODE XREF: sub_406670:loc_40677F↑j
.text:004072B0                 mov     dword ptr [ebp+0], 1
.text:004072B7                 mov     ebx, 1
.text:004072BC                 jmp     loc_406790
.text:004072BC ; END OF FUNCTION CHUNK FOR sub_406670
.text:004072C1 ; ---------------------------------------------------------------------------
.text:004072C1                 jmp     short sub_4072D0
.text:004072C1 ; ---------------------------------------------------------------------------
.text:004072C3                 align 10h
.text:004072D0
.text:004072D0 ; =============== S U B R O U T I N E =======================================
.text:004072D0
.text:004072D0
.text:004072D0 sub_4072D0      proc near               ; CODE XREF: .text:004072C1↑j
.text:004072D0                                         ; sub_409700+3A↓p ...
.text:004072D0
.text:004072D0 var_2C          = dword ptr -2Ch
.text:004072D0 var_28          = dword ptr -28h
.text:004072D0 var_24          = dword ptr -24h
.text:004072D0 var_20          = dword ptr -20h
.text:004072D0 var_1C          = dword ptr -1Ch
.text:004072D0 var_18          = dword ptr -18h
.text:004072D0 var_14          = dword ptr -14h
.text:004072D0 var_10          = dword ptr -10h
.text:004072D0 arg_0           = dword ptr  4
.text:004072D0 arg_4           = dword ptr  8
.text:004072D0 arg_8           = dword ptr  0Ch
.text:004072D0 arg_C           = dword ptr  10h
.text:004072D0 arg_10          = dword ptr  14h
.text:004072D0 arg_14          = dword ptr  18h
.text:004072D0 arg_18          = dword ptr  1Ch
.text:004072D0
.text:004072D0                 sub     esp, 2Ch
.text:004072D3                 mov     edx, dword_41A030
.text:004072D9                 mov     [esp+2Ch+var_10], offset dword_41B220
.text:004072E1                 mov     ecx, dword_41A034
.text:004072E7                 mov     ds:dword_41B220, edx
.text:004072ED                 mov     edx, [esp+2Ch+arg_18]
.text:004072F1                 mov     ds:dword_41B224, ecx
.text:004072F7                 mov     ecx, [esp+2Ch+arg_14]
.text:004072FB                 mov     [esp+2Ch+var_14], edx
.text:004072FF                 mov     edx, [esp+2Ch+arg_10]
.text:00407303                 mov     [esp+2Ch+var_18], ecx
.text:00407307                 mov     ecx, [esp+2Ch+arg_C]
.text:0040730B                 mov     [esp+2Ch+var_1C], edx
.text:0040730F                 mov     edx, [esp+2Ch+arg_8]
.text:00407313                 mov     [esp+2Ch+var_20], ecx
.text:00407317                 mov     ecx, [esp+2Ch+arg_4]
.text:0040731B                 mov     [esp+2Ch+var_24], edx
.text:0040731F                 mov     edx, [esp+2Ch+arg_0]
.text:00407323                 mov     [esp+2Ch+var_28], ecx
.text:00407327                 mov     [esp+2Ch+var_2C], edx
.text:0040732A                 call    loc_406740
.text:0040732F                 mov     ecx, ds:dword_41B220
.text:00407335                 mov     dword_41A030, ecx
.text:0040733B                 mov     ecx, ds:dword_41B22C
.text:00407341                 mov     ds:dword_41B630, ecx
.text:00407347                 mov     ecx, ds:dword_41B228
.text:0040734D                 mov     dword_41A038, ecx
.text:00407353                 add     esp, 2Ch
.text:00407356                 retn
.text:00407356 sub_4072D0      endp
.text:00407356
.text:00407356 ; ---------------------------------------------------------------------------
.text:00407357                 align 10h
.text:00407360                 sub     esp, 2Ch
.text:00407363                 mov     edx, dword_41A030
.text:00407369                 mov     dword ptr [esp+1Ch], offset dword_41B220
.text:00407371                 mov     ecx, dword_41A034
.text:00407377                 mov     dword ptr [esp+18h], 1
.text:0040737F                 mov     ds:dword_41B220, edx
.text:00407385                 mov     edx, [esp+38h]
.text:00407389                 mov     ds:dword_41B224, ecx
.text:0040738F                 mov     ecx, [esp+34h]
.text:00407393                 mov     [esp+8], edx
.text:00407397                 mov     edx, [esp+30h]
.text:0040739B                 mov     [esp+4], ecx
.text:0040739F                 mov     dword ptr [esp+14h], 0
.text:004073A7                 mov     dword ptr [esp+10h], 0
.text:004073AF                 mov     dword ptr [esp+0Ch], 0
.text:004073B7                 mov     [esp], edx
.text:004073BA                 call    loc_406740
.text:004073BF                 mov     ecx, ds:dword_41B220
.text:004073C5                 mov     dword_41A030, ecx
.text:004073CB                 mov     ecx, ds:dword_41B22C
.text:004073D1                 mov     ds:dword_41B630, ecx
.text:004073D7                 mov     ecx, ds:dword_41B228
.text:004073DD                 mov     dword_41A038, ecx
.text:004073E3                 add     esp, 2Ch
.text:004073E6                 retn
.text:004073E6 ; ---------------------------------------------------------------------------
.text:004073E7                 align 10h
.text:004073F0
.text:004073F0 ; =============== S U B R O U T I N E =======================================
.text:004073F0
.text:004073F0
.text:004073F0 sub_4073F0      proc near               ; CODE XREF: sub_406670+1E3↑p
.text:004073F0                                         ; sub_406670+B89↑p
.text:004073F0
.text:004073F0 var_2C          = dword ptr -2Ch
.text:004073F0 var_28          = dword ptr -28h
.text:004073F0 var_24          = dword ptr -24h
.text:004073F0 var_20          = dword ptr -20h
.text:004073F0 var_1C          = dword ptr -1Ch
.text:004073F0 var_18          = dword ptr -18h
.text:004073F0 var_14          = dword ptr -14h
.text:004073F0 arg_0           = dword ptr  4
.text:004073F0 arg_4           = dword ptr  8
.text:004073F0
.text:004073F0                 push    ebp
.text:004073F1                 push    edi
.text:004073F2                 push    esi
.text:004073F3                 push    ebx
.text:004073F4                 sub     esp, 1Ch
.text:004073F7                 mov     ecx, [esp+2Ch+arg_4]
.text:004073FB                 mov     eax, [esp+2Ch+arg_4]
.text:004073FF                 mov     ebx, [esp+2Ch+arg_4]
.text:00407403                 mov     edx, [ecx+20h]
.text:00407406                 mov     edi, [esp+2Ch+arg_0]
.text:0040740A                 mov     ecx, [ebx]
.text:0040740C                 mov     [esp+2Ch+var_2C], edx
.text:0040740F                 mov     [esp+2Ch+var_14], edx
.text:00407413                 mov     edx, [eax+24h]
.text:00407416                 mov     [esp+2Ch+var_28], ecx
.text:0040741A                 mov     [esp+2Ch+var_1C], ecx
.text:0040741E                 cmp     ecx, edx
.text:00407420                 mov     [esp+2Ch+var_18], edx
.text:00407424                 jle     short loc_4074A0
.text:00407426                 mov     esi, [esp+2Ch+var_2C]
.text:00407429                 cmp     edx, esi
.text:0040742B                 jle     short loc_4074A0
.text:0040742D                 lea     esi, [esi+0]
.text:00407430
.text:00407430 loc_407430:                             ; CODE XREF: sub_4073F0+A1↓j
.text:00407430                 mov     ebx, [esp+2Ch+var_1C]
.text:00407434                 mov     edx, [esp+2Ch+var_18]
.text:00407438                 mov     ebp, [esp+2Ch+var_18]
.text:0040743C                 mov     eax, [esp+2Ch+var_14]
.text:00407440                 sub     ebx, edx
.text:00407442                 mov     [esp+2Ch+var_20], ebx
.text:00407446                 sub     ebp, eax
.text:00407448                 cmp     ebx, ebp
.text:0040744A                 jle     short loc_4074C5
.text:0040744C                 xor     esi, esi
.text:0040744E                 cmp     esi, ebp
.text:00407450                 jge     short loc_40747D
.text:00407452                 mov     ecx, [esp+2Ch+var_1C]
.text:00407456                 sub     ecx, ebp
.text:00407458                 mov     [esp+2Ch+var_24], ecx
.text:0040745C                 lea     esi, [esi+0]
.text:00407460
.text:00407460 loc_407460:                             ; CODE XREF: sub_4073F0+8B↓j
.text:00407460                 mov     ecx, [esp+2Ch+var_14]
.text:00407464                 mov     edx, [esp+2Ch+var_24]
.text:00407468                 add     ecx, esi
.text:0040746A                 add     edx, esi
.text:0040746C                 mov     ebx, [edi+ecx*4]
.text:0040746F                 mov     eax, [edi+edx*4]
.text:00407472                 inc     esi
.text:00407473                 cmp     esi, ebp
.text:00407475                 mov     [edi+ecx*4], eax
.text:00407478                 mov     [edi+edx*4], ebx
.text:0040747B                 jl      short loc_407460
.text:0040747D
.text:0040747D loc_40747D:                             ; CODE XREF: sub_4073F0+60↑j
.text:0040747D                 sub     [esp+2Ch+var_1C], ebp
.text:00407481
.text:00407481 loc_407481:                             ; CODE XREF: sub_4073F0+107↓j
.text:00407481                 mov     eax, [esp+2Ch+var_18]
.text:00407485                 cmp     [esp+2Ch+var_1C], eax
.text:00407489                 jle     short loc_4074A0
.text:0040748B                 mov     ebp, [esp+2Ch+var_14]
.text:0040748F                 cmp     eax, ebp
.text:00407491                 jg      short loc_407430
.text:00407493                 lea     esi, [esi+0]
.text:00407499                 lea     edi, [edi+0]
.text:004074A0
.text:004074A0 loc_4074A0:                             ; CODE XREF: sub_4073F0+34↑j
.text:004074A0                                         ; sub_4073F0+3B↑j ...
.text:004074A0                 mov     esi, [esp+2Ch+var_28]
.text:004074A4                 mov     ecx, [esp+2Ch+var_18]
.text:004074A8                 mov     eax, [esp+2Ch+var_2C]
.text:004074AB                 mov     edi, [esp+2Ch+arg_4]
.text:004074AF                 mov     edx, [esp+2Ch+var_28]
.text:004074B3                 sub     esi, ecx
.text:004074B5                 add     esi, eax
.text:004074B7                 mov     [edi+20h], esi
.text:004074BA                 mov     [edi+24h], edx
.text:004074BD                 add     esp, 1Ch
.text:004074C0                 pop     ebx
.text:004074C1                 pop     esi
.text:004074C2                 pop     edi
.text:004074C3                 pop     ebp
.text:004074C4                 retn
.text:004074C5 ; ---------------------------------------------------------------------------
.text:004074C5
.text:004074C5 loc_4074C5:                             ; CODE XREF: sub_4073F0+5A↑j
.text:004074C5                 xor     esi, esi
.text:004074C7                 cmp     esi, [esp+2Ch+var_20]
.text:004074CB                 jge     short loc_4074EF
.text:004074CD                 lea     esi, [esi+0]
.text:004074D0
.text:004074D0 loc_4074D0:                             ; CODE XREF: sub_4073F0+FD↓j
.text:004074D0                 mov     ebx, [esp+2Ch+var_14]
.text:004074D4                 mov     ebp, [esp+2Ch+var_18]
.text:004074D8                 add     ebx, esi
.text:004074DA                 add     ebp, esi
.text:004074DC                 mov     edx, [edi+ebx*4]
.text:004074DF                 inc     esi
.text:004074E0                 cmp     esi, [esp+2Ch+var_20]
.text:004074E4                 mov     ecx, [edi+ebp*4]
.text:004074E7                 mov     [edi+ebx*4], ecx
.text:004074EA                 mov     [edi+ebp*4], edx
.text:004074ED                 jl      short loc_4074D0
.text:004074EF
.text:004074EF loc_4074EF:                             ; CODE XREF: sub_4073F0+DB↑j
.text:004074EF                 mov     esi, [esp+2Ch+var_20]
.text:004074F3                 add     [esp+2Ch+var_14], esi
.text:004074F7                 jmp     short loc_407481
.text:004074F7 sub_4073F0      endp
.text:004074F7
.text:004074F7 ; ---------------------------------------------------------------------------
.text:004074F9                 db 17h dup(90h)
.text:00407510 dword_407510    dd 0                    ; DATA XREF: sub_407540+D2↓o
.text:00407510                                         ; sub_407540:loc_407770↓o ...
.text:00407514 dword_407514    dd 3F800000h, 3F4CCCCDh, 3FB4FDF4h, 0
.text:00407514                                         ; DATA XREF: .text:0040812C↓r
.text:00407514                                         ; .text:00408135↓r ...
.text:00407524 flt_407524      dd 0.1                  ; DATA XREF: sub_407540:loc_40758F↓r
.text:00407528 flt_407528      dd 4.2949673e9          ; DATA XREF: sub_407540+101↓r
.text:0040752C flt_40752C      dd 0.89999998           ; DATA XREF: sub_407540+66↓r
.text:00407530 flt_407530      dd 1.1                  ; DATA XREF: sub_407540+7A↓r
.text:00407534                 align 10h
.text:00407540
.text:00407540 ; =============== S U B R O U T I N E =======================================
.text:00407540
.text:00407540
.text:00407540 sub_407540      proc near               ; CODE XREF: sub_402250+76C↑p
.text:00407540                                         ; sub_4036F0+143↑p ...
.text:00407540
.text:00407540 var_44          = qword ptr -44h
.text:00407540 Size            = dword ptr -3Ch
.text:00407540 var_38          = dword ptr -38h
.text:00407540 var_28          = dword ptr -28h
.text:00407540 var_24          = qword ptr -24h
.text:00407540 var_18          = word ptr -18h
.text:00407540 var_16          = word ptr -16h
.text:00407540 var_10          = dword ptr -10h
.text:00407540 var_C           = dword ptr -0Ch
.text:00407540 var_8           = dword ptr -8
.text:00407540 var_4           = dword ptr -4
.text:00407540 arg_0           = dword ptr  4
.text:00407540 arg_4           = dword ptr  8
.text:00407540 arg_8           = dword ptr  0Ch
.text:00407540 arg_C           = dword ptr  10h
.text:00407540 arg_10          = dword ptr  14h
.text:00407540
.text:00407540                 sub     esp, 3Ch
.text:00407543                 mov     [esp+3Ch+var_4], ebp
.text:00407547                 mov     ebp, [esp+3Ch+arg_8]
.text:0040754B                 mov     [esp+3Ch+var_10], ebx
.text:0040754F                 mov     ebx, [esp+3Ch+arg_4]
.text:00407553                 test    ebp, ebp
.text:00407555                 mov     [esp+3Ch+var_C], esi
.text:00407559                 mov     [esp+3Ch+var_8], edi
.text:0040755D                 jz      loc_407621
.text:00407563                 mov     edx, [esp+3Ch+arg_C]
.text:00407567                 test    edx, edx
.text:00407569                 jz      loc_407621
.text:0040756F                 mov     [esp+3Ch+Size], 28h ; '(' ; Size
.text:00407576                 call    malloc
.text:0040757B                 mov     esi, eax
.text:0040757D                 xor     eax, eax
.text:0040757F                 test    esi, esi
.text:00407581                 jz      loc_407623
.text:00407587                 test    ebx, ebx
.text:00407589                 jz      loc_407770
.text:0040758F
.text:0040758F loc_40758F:                             ; CODE XREF: sub_407540+235↓j
.text:0040758F                 fld     ds:flt_407524
.text:00407595                 fld     dword ptr [ebx+8]
.text:00407598                 mov     [esi+14h], ebx
.text:0040759B                 fucom   st(1)
.text:0040759D                 fnstsw  ax
.text:0040759F                 sahf
.text:004075A0                 jbe     loc_407760
.text:004075A6                 fld     ds:flt_40752C
.text:004075AC                 fucomp  st(1)
.text:004075AE                 fnstsw  ax
.text:004075B0                 sahf
.text:004075B1                 jbe     loc_407760
.text:004075B7                 fld     dword ptr [ebx+0Ch]
.text:004075BA                 fld     ds:flt_407530
.text:004075C0                 fxch    st(1)
.text:004075C2                 fucompp
.text:004075C4                 fnstsw  ax
.text:004075C6                 sahf
.text:004075C7                 jbe     loc_407760
.text:004075CD                 fld     dword ptr [ebx]
.text:004075CF                 fldz
.text:004075D1                 fxch    st(1)
.text:004075D3                 fucom   st(1)
.text:004075D5                 fnstsw  ax
.text:004075D7                 fstp    st(1)
.text:004075D9                 sahf
.text:004075DA                 jb      loc_407767
.text:004075E0                 faddp   st(2), st
.text:004075E2                 fld     dword ptr [ebx+4]
.text:004075E5                 fucom   st(2)
.text:004075E7                 fnstsw  ax
.text:004075E9                 sahf
.text:004075EA                 jbe     loc_407767
.text:004075F0                 fld1
.text:004075F2                 fucompp
.text:004075F4                 fnstsw  ax
.text:004075F6                 sahf
.text:004075F7                 jb      loc_407760
.text:004075FD                 fucom   st(1)
.text:004075FF                 fnstsw  ax
.text:00407601                 fstp    st(1)
.text:00407603                 sahf
.text:00407604                 ja      short loc_407637
.text:00407606                 lea     esi, [esi+0]
.text:00407609                 lea     edi, [edi+0]
.text:00407610
.text:00407610 loc_407610:                             ; CODE XREF: sub_407540+222↓j
.text:00407610                 fstp    st
.text:00407612                 mov     dword ptr [esi+14h], offset dword_407510
.text:00407619
.text:00407619 loc_407619:                             ; CODE XREF: sub_407540+155↓j
.text:00407619                                         ; sub_407540+1BF↓j ...
.text:00407619                 mov     [esp+3Ch+Size], esi ; Block
.text:0040761C                 call    free
.text:00407621
.text:00407621 loc_407621:                             ; CODE XREF: sub_407540+1D↑j
.text:00407621                                         ; sub_407540+29↑j
.text:00407621                 xor     eax, eax
.text:00407623
.text:00407623 loc_407623:                             ; CODE XREF: sub_407540+41↑j
.text:00407623                                         ; sub_407540+208↓j
.text:00407623                 mov     ebx, [esp+3Ch+var_10]
.text:00407627                 mov     esi, [esp+3Ch+var_C]
.text:0040762B                 mov     edi, [esp+3Ch+var_8]
.text:0040762F                 mov     ebp, [esp+3Ch+var_4]
.text:00407633                 add     esp, 3Ch
.text:00407636                 retn
.text:00407637 ; ---------------------------------------------------------------------------
.text:00407637
.text:00407637 loc_407637:                             ; CODE XREF: sub_407540+C4↑j
.text:00407637                 cmp     byte ptr [ebx+10h], 0
.text:0040763B                 jnz     loc_407754
.text:00407641                 fld     ds:flt_407528
.text:00407647                 xor     eax, eax
.text:00407649                 mov     ecx, [esp+3Ch+arg_0]
.text:0040764D                 push    eax
.text:0040764E                 push    ecx
.text:0040764F                 fild    [esp+44h+var_44]
.text:00407652                 add     esp, 8
.text:00407655                 fdivrp  st(2), st
.text:00407657                 fxch    st(1)
.text:00407659                 fucom   st(1)
.text:0040765B                 fnstsw  ax
.text:0040765D                 fstp    st(1)
.text:0040765F                 sahf
.text:00407660                 jnb     loc_40774D
.text:00407666                 fnstcw  [esp+3Ch+var_16]
.text:0040766A                 movzx   ebx, [esp+3Ch+var_16]
.text:0040766F                 or      bx, 0C00h
.text:00407674                 mov     [esp+3Ch+var_18], bx
.text:00407679                 fldcw   [esp+3Ch+var_18]
.text:0040767D                 fistp   [esp+3Ch+var_24]
.text:00407681                 fldcw   [esp+3Ch+var_16]
.text:00407685                 mov     edx, dword ptr [esp+3Ch+var_24]
.text:00407689                 mov     [esp+3Ch+arg_0], edx
.text:0040768D
.text:0040768D loc_40768D:                             ; CODE XREF: sub_407540+216↓j
.text:0040768D                 cmp     [esp+3Ch+arg_0], 1FFFFFFFh
.text:00407695                 ja      short loc_407619
.text:00407697                 mov     ecx, [esp+3Ch+arg_0]
.text:0040769B                 cmp     ecx, 9
.text:0040769E                 ja      short loc_4076A5
.text:004076A0                 mov     ecx, 0Ah
.text:004076A5
.text:004076A5 loc_4076A5:                             ; CODE XREF: sub_407540+15E↑j
.text:004076A5                 or      ecx, 1
.text:004076A8
.text:004076A8 loc_4076A8:                             ; CODE XREF: sub_407540+1B4↓j
.text:004076A8                 mov     [esp+3Ch+var_28], 3
.text:004076B0                 mov     edi, 9
.text:004076B5                 cmp     edi, ecx
.text:004076B7                 jnb     short loc_4076E5
.text:004076B9                 xor     edx, edx
.text:004076BB                 mov     eax, ecx
.text:004076BD                 div     [esp+3Ch+var_28]
.text:004076C1                 test    edx, edx
.text:004076C3                 jz      short loc_4076E5
.text:004076C5
.text:004076C5 loc_4076C5:                             ; CODE XREF: sub_407540+1A3↓j
.text:004076C5                 inc     [esp+3Ch+var_28]
.text:004076C9                 mov     edx, [esp+3Ch+var_28]
.text:004076CD                 lea     edi, [edi+edx*4]
.text:004076D0                 inc     edx
.text:004076D1                 cmp     edi, ecx
.text:004076D3                 mov     [esp+3Ch+var_28], edx
.text:004076D7                 jnb     short loc_4076E5
.text:004076D9                 xor     edx, edx
.text:004076DB                 mov     eax, ecx
.text:004076DD                 div     [esp+3Ch+var_28]
.text:004076E1                 test    edx, edx
.text:004076E3                 jnz     short loc_4076C5
.text:004076E5
.text:004076E5 loc_4076E5:                             ; CODE XREF: sub_407540+177↑j
.text:004076E5                                         ; sub_407540+183↑j ...
.text:004076E5                 xor     edx, edx
.text:004076E7                 mov     eax, ecx
.text:004076E9                 div     [esp+3Ch+var_28]
.text:004076ED                 test    edx, edx
.text:004076EF                 jnz     short loc_4076F6
.text:004076F1                 add     ecx, 2
.text:004076F4                 jmp     short loc_4076A8
.text:004076F6 ; ---------------------------------------------------------------------------
.text:004076F6
.text:004076F6 loc_4076F6:                             ; CODE XREF: sub_407540+1AF↑j
.text:004076F6                 mov     [esi+8], ecx
.text:004076F9                 cmp     ecx, 1FFFFFFFh
.text:004076FF                 ja      loc_407619
.text:00407705                 mov     [esp+3Ch+Size], ecx ; Count
.text:00407708                 mov     [esp+3Ch+var_38], 8 ; Size
.text:00407710                 call    calloc
.text:00407715                 mov     [esi+18h], ebp
.text:00407718                 mov     ebx, [esi+8]
.text:0040771B                 mov     ebp, [esp+3Ch+arg_C]
.text:0040771F                 mov     [esi], eax
.text:00407721                 mov     edi, [esp+3Ch+arg_10]
.text:00407725                 lea     ecx, [eax+ebx*8]
.text:00407728                 mov     [esi+4], ecx
.text:0040772B                 mov     eax, esi
.text:0040772D                 mov     dword ptr [esi+0Ch], 0
.text:00407734                 mov     dword ptr [esi+10h], 0
.text:0040773B                 mov     [esi+1Ch], ebp
.text:0040773E                 mov     [esi+20h], edi
.text:00407741                 mov     dword ptr [esi+24h], 0
.text:00407748                 jmp     loc_407623
.text:0040774D ; ---------------------------------------------------------------------------
.text:0040774D
.text:0040774D loc_40774D:                             ; CODE XREF: sub_407540+120↑j
.text:0040774D                 fstp    st
.text:0040774F                 jmp     loc_407619
.text:00407754 ; ---------------------------------------------------------------------------
.text:00407754
.text:00407754 loc_407754:                             ; CODE XREF: sub_407540+FB↑j
.text:00407754                 fstp    st
.text:00407756                 jmp     loc_40768D
.text:00407756 ; ---------------------------------------------------------------------------
.text:0040775B                 align 10h
.text:00407760
.text:00407760 loc_407760:                             ; CODE XREF: sub_407540+60↑j
.text:00407760                                         ; sub_407540+71↑j ...
.text:00407760                 fstp    st
.text:00407762                 jmp     loc_407610
.text:00407767 ; ---------------------------------------------------------------------------
.text:00407767
.text:00407767 loc_407767:                             ; CODE XREF: sub_407540+9A↑j
.text:00407767                                         ; sub_407540+AA↑j
.text:00407767                 fstp    st
.text:00407769                 jmp     short loc_407760
.text:00407769 ; ---------------------------------------------------------------------------
.text:0040776B                 align 10h
.text:00407770
.text:00407770 loc_407770:                             ; CODE XREF: sub_407540+49↑j
.text:00407770                 mov     ebx, offset dword_407510
.text:00407775                 jmp     loc_40758F
.text:00407775 sub_407540      endp
.text:00407775
.text:00407775 ; ---------------------------------------------------------------------------
.text:0040777A                 align 10h
.text:00407780                 push    edi
.text:00407781                 push    esi
.text:00407782                 push    ebx
.text:00407783                 sub     esp, 10h
.text:00407786                 mov     edi, [esp+20h]
.text:0040778A                 mov     esi, [edi]
.text:0040778C                 mov     eax, [edi+4]
.text:0040778F                 cmp     esi, eax
.text:00407791                 jnb     short loc_4077E7
.text:00407793                 lea     esi, [esi+0]
.text:00407799                 lea     edi, [edi+0]
.text:004077A0
.text:004077A0 loc_4077A0:                             ; CODE XREF: .text:004077E5↓j
.text:004077A0                 mov     ecx, [esi]
.text:004077A2                 test    ecx, ecx
.text:004077A4                 jz      short loc_4077E0
.text:004077A6                 mov     ebx, [esi+4]
.text:004077A9                 test    ebx, ebx
.text:004077AB                 jz      short loc_407811
.text:004077AD                 mov     ecx, [edi+20h]
.text:004077B0
.text:004077B0 loc_4077B0:                             ; CODE XREF: .text:004077CA↓j
.text:004077B0                 test    ecx, ecx
.text:004077B2                 jnz     short loc_407805
.text:004077B4
.text:004077B4 loc_4077B4:                             ; CODE XREF: .text:0040780F↓j
.text:004077B4                 mov     dword ptr [ebx], 0
.text:004077BA                 mov     edx, [ebx+4]
.text:004077BD                 mov     eax, [edi+24h]
.text:004077C0                 test    edx, edx
.text:004077C2                 mov     [ebx+4], eax
.text:004077C5                 mov     [edi+24h], ebx
.text:004077C8                 mov     ebx, edx
.text:004077CA                 jnz     short loc_4077B0
.text:004077CC
.text:004077CC loc_4077CC:                             ; CODE XREF: .text:00407814↓j
.text:004077CC                 test    ecx, ecx
.text:004077CE                 jnz     short loc_4077FC
.text:004077D0
.text:004077D0 loc_4077D0:                             ; CODE XREF: .text:00407803↓j
.text:004077D0                 mov     dword ptr [esi+4], 0
.text:004077D7                 mov     eax, [edi+4]
.text:004077DA                 mov     dword ptr [esi], 0
.text:004077E0
.text:004077E0 loc_4077E0:                             ; CODE XREF: .text:004077A4↑j
.text:004077E0                 add     esi, 8
.text:004077E3                 cmp     esi, eax
.text:004077E5                 jb      short loc_4077A0
.text:004077E7
.text:004077E7 loc_4077E7:                             ; CODE XREF: .text:00407791↑j
.text:004077E7                 mov     dword ptr [edi+0Ch], 0
.text:004077EE                 mov     dword ptr [edi+10h], 0
.text:004077F5                 add     esp, 10h
.text:004077F8                 pop     ebx
.text:004077F9                 pop     esi
.text:004077FA                 pop     edi
.text:004077FB                 retn
.text:004077FC ; ---------------------------------------------------------------------------
.text:004077FC
.text:004077FC loc_4077FC:                             ; CODE XREF: .text:004077CE↑j
.text:004077FC                 mov     ebx, [esi]
.text:004077FE                 mov     [esp], ebx
.text:00407801                 call    ecx
.text:00407803                 jmp     short loc_4077D0
.text:00407805 ; ---------------------------------------------------------------------------
.text:00407805
.text:00407805 loc_407805:                             ; CODE XREF: .text:004077B2↑j
.text:00407805                 mov     edx, [ebx]
.text:00407807                 mov     [esp], edx
.text:0040780A                 call    ecx
.text:0040780C                 mov     ecx, [edi+20h]
.text:0040780F                 jmp     short loc_4077B4
.text:00407811 ; ---------------------------------------------------------------------------
.text:00407811
.text:00407811 loc_407811:                             ; CODE XREF: .text:004077AB↑j
.text:00407811                 mov     ecx, [edi+20h]
.text:00407814                 jmp     short loc_4077CC
.text:00407814 ; ---------------------------------------------------------------------------
.text:00407816                 align 10h
.text:00407820
.text:00407820 ; =============== S U B R O U T I N E =======================================
.text:00407820
.text:00407820
.text:00407820 ; int __cdecl sub_407820(void *)
.text:00407820 sub_407820      proc near               ; CODE XREF: sub_402250+899↑p
.text:00407820                                         ; sub_403A00+AD↑p ...
.text:00407820
.text:00407820 Block           = dword ptr -1Ch
.text:00407820 arg_0           = dword ptr  4
.text:00407820
.text:00407820                 push    ebp
.text:00407821                 push    edi
.text:00407822                 push    esi
.text:00407823                 push    ebx
.text:00407824                 sub     esp, 0Ch
.text:00407827                 mov     ebp, [esp+1Ch+arg_0]
.text:0040782B                 mov     eax, [ebp+20h]
.text:0040782E                 test    eax, eax
.text:00407830                 jz      loc_4078FC
.text:00407836                 mov     eax, [ebp+10h]
.text:00407839                 test    eax, eax
.text:0040783B                 jz      loc_4078FC
.text:00407841                 mov     edi, [ebp+0]
.text:00407844                 mov     eax, [ebp+4]
.text:00407847                 cmp     edi, eax
.text:00407849                 jnb     short loc_4078BB
.text:0040784B
.text:0040784B loc_40784B:                             ; CODE XREF: sub_407820+57↓j
.text:0040784B                 mov     edx, [edi]
.text:0040784D                 test    edx, edx
.text:0040784F                 jz      short loc_407872
.text:00407851                 test    edi, edi
.text:00407853                 mov     ebx, edi
.text:00407855                 jz      short loc_407872
.text:00407857                 mov     esi, esi
.text:00407859                 lea     edi, [edi+0]
.text:00407860
.text:00407860 loc_407860:                             ; CODE XREF: sub_407820+4D↓j
.text:00407860                 mov     ecx, [ebx]
.text:00407862                 mov     [esp+1Ch+Block], ecx
.text:00407865                 call    dword ptr [ebp+20h]
.text:00407868                 mov     ebx, [ebx+4]
.text:0040786B                 test    ebx, ebx
.text:0040786D                 jnz     short loc_407860
.text:0040786F                 mov     eax, [ebp+4]
.text:00407872
.text:00407872 loc_407872:                             ; CODE XREF: sub_407820+2F↑j
.text:00407872                                         ; sub_407820+35↑j
.text:00407872                 add     edi, 8
.text:00407875                 cmp     edi, eax
.text:00407877                 jb      short loc_40784B
.text:00407879                 mov     edx, [ebp+0]
.text:0040787C
.text:0040787C loc_40787C:                             ; CODE XREF: sub_407820+E2↓j
.text:0040787C                 cmp     edx, eax
.text:0040787E                 mov     edi, edx
.text:00407880                 jnb     short loc_4078BB
.text:00407882                 lea     esi, [esi+0]
.text:00407889                 lea     edi, [edi+0]
.text:00407890
.text:00407890 loc_407890:                             ; CODE XREF: sub_407820+99↓j
.text:00407890                 mov     ebx, [edi+4]
.text:00407893                 test    ebx, ebx
.text:00407895                 jz      short loc_4078B4
.text:00407897                 mov     esi, esi
.text:00407899                 lea     edi, [edi+0]
.text:004078A0
.text:004078A0 loc_4078A0:                             ; CODE XREF: sub_407820+8F↓j
.text:004078A0                 mov     esi, [ebx+4]
.text:004078A3                 mov     [esp+1Ch+Block], ebx ; Block
.text:004078A6                 call    free
.text:004078AB                 test    esi, esi
.text:004078AD                 mov     ebx, esi
.text:004078AF                 jnz     short loc_4078A0
.text:004078B1                 mov     eax, [ebp+4]
.text:004078B4
.text:004078B4 loc_4078B4:                             ; CODE XREF: sub_407820+75↑j
.text:004078B4                 add     edi, 8
.text:004078B7                 cmp     edi, eax
.text:004078B9                 jb      short loc_407890
.text:004078BB
.text:004078BB loc_4078BB:                             ; CODE XREF: sub_407820+29↑j
.text:004078BB                                         ; sub_407820+60↑j
.text:004078BB                 mov     ebx, [ebp+24h]
.text:004078BE                 test    ebx, ebx
.text:004078C0                 jz      short loc_4078E1
.text:004078C2                 lea     esi, [esi+0]
.text:004078C9                 lea     edi, [edi+0]
.text:004078D0
.text:004078D0 loc_4078D0:                             ; CODE XREF: sub_407820+BF↓j
.text:004078D0                 mov     edi, [ebx+4]
.text:004078D3                 mov     [esp+1Ch+Block], ebx ; Block
.text:004078D6                 call    free
.text:004078DB                 test    edi, edi
.text:004078DD                 mov     ebx, edi
.text:004078DF                 jnz     short loc_4078D0
.text:004078E1
.text:004078E1 loc_4078E1:                             ; CODE XREF: sub_407820+A0↑j
.text:004078E1                 mov     ebx, [ebp+0]
.text:004078E4                 mov     [esp+1Ch+Block], ebx ; Block
.text:004078E7                 call    free
.text:004078EC                 mov     [esp+1Ch+arg_0], ebp ; Block
.text:004078F0                 add     esp, 0Ch
.text:004078F3                 pop     ebx
.text:004078F4                 pop     esi
.text:004078F5                 pop     edi
.text:004078F6                 pop     ebp
.text:004078F7                 jmp     free
.text:004078FC ; ---------------------------------------------------------------------------
.text:004078FC
.text:004078FC loc_4078FC:                             ; CODE XREF: sub_407820+10↑j
.text:004078FC                                         ; sub_407820+1B↑j
.text:004078FC                 mov     edx, [ebp+0]
.text:004078FF                 mov     eax, [ebp+4]
.text:00407902                 jmp     loc_40787C
.text:00407902 sub_407820      endp
.text:00407902
.text:00407902 ; ---------------------------------------------------------------------------
.text:00407907                 align 10h
.text:00407910
.text:00407910 ; =============== S U B R O U T I N E =======================================
.text:00407910
.text:00407910
.text:00407910 sub_407910      proc near               ; CODE XREF: sub_407A90+1B2↓p
.text:00407910                                         ; sub_408160+156↓p
.text:00407910
.text:00407910 Block           = dword ptr -2Ch
.text:00407910 var_28          = dword ptr -28h
.text:00407910 var_24          = dword ptr -24h
.text:00407910 var_20          = dword ptr -20h
.text:00407910 var_1C          = dword ptr -1Ch
.text:00407910 var_18          = dword ptr -18h
.text:00407910 var_14          = dword ptr -14h
.text:00407910 arg_0           = dword ptr  4
.text:00407910 arg_4           = dword ptr  8
.text:00407910
.text:00407910                 push    ebp
.text:00407911                 push    edi
.text:00407912                 push    esi
.text:00407913                 push    ebx
.text:00407914                 sub     esp, 1Ch
.text:00407917                 mov     ebx, [esp+2Ch+arg_0]
.text:0040791B                 mov     edi, [ebx+20h]
.text:0040791E                 mov     [esp+2Ch+var_1C], edi
.text:00407922                 mov     esi, [ebx+1Ch]
.text:00407925                 mov     [esp+2Ch+var_20], esi
.text:00407929                 mov     edx, [ebx+18h]
.text:0040792C                 mov     [esp+2Ch+var_24], edx
.text:00407930                 mov     ecx, [ebx+14h]
.text:00407933                 mov     edx, [esp+2Ch+arg_4]
.text:00407937                 mov     [esp+2Ch+var_28], ecx
.text:0040793B                 mov     [esp+2Ch+Block], edx
.text:0040793E                 call    sub_407540
.text:00407943                 mov     edi, eax
.text:00407945                 xor     eax, eax
.text:00407947                 test    edi, edi
.text:00407949                 jz      loc_407A12
.text:0040794F                 mov     ebp, [esp+2Ch+arg_0]
.text:00407953                 mov     edx, [ebp+0]
.text:00407956                 mov     eax, [ebp+4]
.text:00407959                 mov     ecx, [ebp+24h]
.text:0040795C                 mov     [esp+2Ch+var_14], edx
.text:00407960                 cmp     edx, eax
.text:00407962                 mov     [edi+24h], ecx
.text:00407965                 jnb     short loc_4079DD
.text:00407967                 mov     esi, esi
.text:00407969                 lea     edi, [edi+0]
.text:00407970
.text:00407970 loc_407970:                             ; CODE XREF: sub_407910+C5↓j
.text:00407970                 mov     edx, [esp+2Ch+var_14]
.text:00407974                 mov     ebx, [edx]
.text:00407976                 test    ebx, ebx
.text:00407978                 jz      short loc_4079CC
.text:0040797A                 mov     ebx, edx
.text:0040797C                 lea     esi, [esi+0]
.text:00407980
.text:00407980 loc_407980:                             ; CODE XREF: sub_407910+B3↓j
.text:00407980                 mov     ebp, [ebx]
.text:00407982                 mov     edx, [edi+8]
.text:00407985                 mov     [esp+2Ch+Block], ebp
.text:00407988                 mov     [esp+2Ch+var_28], edx
.text:0040798C                 call    dword ptr [edi+18h]
.text:0040798F                 mov     ecx, [edi]
.text:00407991                 lea     esi, [ecx+eax*8]
.text:00407994                 cmp     esi, [edi+4]
.text:00407997                 jnb     loc_407A73
.text:0040799D                 mov     ecx, [esi]
.text:0040799F                 mov     eax, [ebx+4]
.text:004079A2                 test    ecx, ecx
.text:004079A4                 mov     [esp+2Ch+var_18], eax
.text:004079A8                 jz      loc_407A50
.text:004079AE                 cmp     ebx, [esp+2Ch+var_14]
.text:004079B2                 jz      short loc_407A1A
.text:004079B4                 mov     edx, [esi+4]
.text:004079B7                 mov     [ebx+4], edx
.text:004079BA                 mov     [esi+4], ebx
.text:004079BD
.text:004079BD loc_4079BD:                             ; CODE XREF: sub_407910+12A↓j
.text:004079BD                                         ; sub_407910+149↓j ...
.text:004079BD                 mov     ebx, [esp+2Ch+var_18]
.text:004079C1                 test    ebx, ebx
.text:004079C3                 jnz     short loc_407980
.text:004079C5                 mov     ecx, [esp+2Ch+arg_0]
.text:004079C9                 mov     eax, [ecx+4]
.text:004079CC
.text:004079CC loc_4079CC:                             ; CODE XREF: sub_407910+68↑j
.text:004079CC                 add     [esp+2Ch+var_14], 8
.text:004079D1                 cmp     [esp+2Ch+var_14], eax
.text:004079D5                 jb      short loc_407970
.text:004079D7                 mov     eax, [esp+2Ch+arg_0]
.text:004079DB                 mov     edx, [eax]
.text:004079DD
.text:004079DD loc_4079DD:                             ; CODE XREF: sub_407910+55↑j
.text:004079DD                 mov     [esp+2Ch+Block], edx ; Block
.text:004079E0                 call    free
.text:004079E5                 mov     ebx, [esp+2Ch+arg_0]
.text:004079E9                 mov     ebp, [edi]
.text:004079EB                 mov     ecx, [edi+4]
.text:004079EE                 mov     esi, [edi+8]
.text:004079F1                 mov     edx, [edi+0Ch]
.text:004079F4                 mov     [ebx], ebp
.text:004079F6                 mov     ebp, [edi+24h]
.text:004079F9                 mov     [ebx+4], ecx
.text:004079FC                 mov     [ebx+8], esi
.text:004079FF                 mov     [ebx+0Ch], edx
.text:00407A02                 mov     [ebx+24h], ebp
.text:00407A05                 mov     [esp+2Ch+Block], edi ; Block
.text:00407A08                 call    free
.text:00407A0D                 mov     eax, 1
.text:00407A12
.text:00407A12 loc_407A12:                             ; CODE XREF: sub_407910+39↑j
.text:00407A12                                         ; sub_407910+11D↓j
.text:00407A12                 add     esp, 1Ch
.text:00407A15                 pop     ebx
.text:00407A16                 pop     esi
.text:00407A17                 pop     edi
.text:00407A18                 pop     ebp
.text:00407A19                 retn
.text:00407A1A ; ---------------------------------------------------------------------------
.text:00407A1A
.text:00407A1A loc_407A1A:                             ; CODE XREF: sub_407910+A2↑j
.text:00407A1A                 mov     eax, [edi+24h]
.text:00407A1D                 test    eax, eax
.text:00407A1F                 jz      short loc_407A3C
.text:00407A21                 mov     ebx, [eax+4]
.text:00407A24                 mov     edx, eax
.text:00407A26                 mov     [edi+24h], ebx
.text:00407A29
.text:00407A29 loc_407A29:                             ; CODE XREF: sub_407910+13A↓j
.text:00407A29                 xor     eax, eax
.text:00407A2B                 test    edx, edx
.text:00407A2D                 jz      short loc_407A12
.text:00407A2F                 mov     [edx], ebp
.text:00407A31                 mov     ebp, [esi+4]
.text:00407A34                 mov     [edx+4], ebp
.text:00407A37                 mov     [esi+4], edx
.text:00407A3A                 jmp     short loc_4079BD
.text:00407A3C ; ---------------------------------------------------------------------------
.text:00407A3C
.text:00407A3C loc_407A3C:                             ; CODE XREF: sub_407910+10F↑j
.text:00407A3C                 mov     [esp+2Ch+Block], 8 ; Size
.text:00407A43                 call    malloc
.text:00407A48                 mov     edx, eax
.text:00407A4A                 jmp     short loc_407A29
.text:00407A4A ; ---------------------------------------------------------------------------
.text:00407A4C                 align 10h
.text:00407A50
.text:00407A50 loc_407A50:                             ; CODE XREF: sub_407910+98↑j
.text:00407A50                 inc     dword ptr [edi+0Ch]
.text:00407A53                 cmp     ebx, [esp+2Ch+var_14]
.text:00407A57                 mov     [esi], ebp
.text:00407A59                 jz      loc_4079BD
.text:00407A5F                 mov     dword ptr [ebx], 0
.text:00407A65                 mov     esi, [edi+24h]
.text:00407A68                 mov     [ebx+4], esi
.text:00407A6B                 mov     [edi+24h], ebx
.text:00407A6E                 jmp     loc_4079BD
.text:00407A73 ; ---------------------------------------------------------------------------
.text:00407A73
.text:00407A73 loc_407A73:                             ; CODE XREF: sub_407910+87↑j
.text:00407A73                 call    abort
.text:00407A73 sub_407910      endp
.text:00407A73
.text:00407A73 ; ---------------------------------------------------------------------------
.text:00407A78 flt_407A78      dd 0.1                  ; DATA XREF: sub_407A90+C3↓r
.text:00407A7C flt_407A7C      dd 4.2949673e9          ; DATA XREF: sub_407A90:loc_407C07↓r
.text:00407A80 flt_407A80      dd 0.89999998           ; DATA XREF: sub_407A90+D6↓r
.text:00407A84 flt_407A84      dd 1.1                  ; DATA XREF: sub_407A90+EA↓r
.text:00407A88                 align 10h
.text:00407A90
.text:00407A90 ; =============== S U B R O U T I N E =======================================
.text:00407A90
.text:00407A90
.text:00407A90 sub_407A90      proc near               ; CODE XREF: sub_403100+4AE↑p
.text:00407A90                                         ; sub_404F90+99↑p
.text:00407A90
.text:00407A90 var_34          = qword ptr -34h
.text:00407A90 Size            = dword ptr -2Ch
.text:00407A90 var_28          = dword ptr -28h
.text:00407A90 var_24          = dword ptr -24h
.text:00407A90 var_20          = dword ptr -20h
.text:00407A90 var_1C          = qword ptr -1Ch
.text:00407A90 var_14          = word ptr -14h
.text:00407A90 var_12          = word ptr -12h
.text:00407A90 var_10          = dword ptr -10h
.text:00407A90 var_8           = dword ptr -8
.text:00407A90 var_4           = dword ptr -4
.text:00407A90 arg_0           = dword ptr  4
.text:00407A90 arg_4           = dword ptr  8
.text:00407A90
.text:00407A90                 sub     esp, 2Ch
.text:00407A93                 mov     [esp+2Ch+var_8], ebx
.text:00407A97                 mov     ebx, [esp+2Ch+arg_4]
.text:00407A9B                 mov     [esp+2Ch+var_4], esi
.text:00407A9F                 mov     esi, [esp+2Ch+arg_0]
.text:00407AA3                 test    ebx, ebx
.text:00407AA5                 jz      loc_407C7A
.text:00407AAB                 mov     [esp+2Ch+var_20], 0
.text:00407AB3                 lea     edx, [esp+2Ch+var_10]
.text:00407AB7                 mov     [esp+2Ch+var_24], edx
.text:00407ABB                 mov     [esp+2Ch+var_28], ebx
.text:00407ABF                 mov     [esp+2Ch+Size], esi
.text:00407AC2                 call    sub_4082F0
.text:00407AC7                 test    eax, eax
.text:00407AC9                 jz      short loc_407AD7
.text:00407ACB
.text:00407ACB loc_407ACB:                             ; CODE XREF: sub_407A90+64↓j
.text:00407ACB                                         ; sub_407A90+7A↓j ...
.text:00407ACB                 mov     ebx, [esp+2Ch+var_8]
.text:00407ACF                 mov     esi, [esp+2Ch+var_4]
.text:00407AD3                 add     esp, 2Ch
.text:00407AD6                 retn
.text:00407AD7 ; ---------------------------------------------------------------------------
.text:00407AD7
.text:00407AD7 loc_407AD7:                             ; CODE XREF: sub_407A90+39↑j
.text:00407AD7                 mov     eax, [esp+2Ch+var_10]
.text:00407ADB                 mov     ecx, [eax]
.text:00407ADD                 test    ecx, ecx
.text:00407ADF                 jz      short loc_407B1C
.text:00407AE1                 mov     eax, [esi+24h]
.text:00407AE4                 test    eax, eax
.text:00407AE6                 jz      short loc_407B0C
.text:00407AE8                 mov     edx, [eax+4]
.text:00407AEB                 mov     ecx, eax
.text:00407AED                 mov     [esi+24h], edx
.text:00407AF0
.text:00407AF0 loc_407AF0:                             ; CODE XREF: sub_407A90+8A↓j
.text:00407AF0                 xor     eax, eax
.text:00407AF2                 test    ecx, ecx
.text:00407AF4                 jz      short loc_407ACB
.text:00407AF6                 inc     dword ptr [esi+10h]
.text:00407AF9                 mov     edx, [esp+2Ch+var_10]
.text:00407AFD                 mov     [ecx], ebx
.text:00407AFF                 mov     eax, [edx+4]
.text:00407B02                 mov     [ecx+4], eax
.text:00407B05                 mov     [edx+4], ecx
.text:00407B08
.text:00407B08 loc_407B08:                             ; CODE XREF: sub_407A90+1C2↓j
.text:00407B08                                         ; sub_407A90+1D8↓j
.text:00407B08                 mov     eax, ebx
.text:00407B0A                 jmp     short loc_407ACB
.text:00407B0C ; ---------------------------------------------------------------------------
.text:00407B0C
.text:00407B0C loc_407B0C:                             ; CODE XREF: sub_407A90+56↑j
.text:00407B0C                 mov     [esp+2Ch+Size], 8 ; Size
.text:00407B13                 call    malloc
.text:00407B18                 mov     ecx, eax
.text:00407B1A                 jmp     short loc_407AF0
.text:00407B1C ; ---------------------------------------------------------------------------
.text:00407B1C
.text:00407B1C loc_407B1C:                             ; CODE XREF: sub_407A90+4F↑j
.text:00407B1C                 inc     dword ptr [esi+0Ch]
.text:00407B1F                 xor     edx, edx
.text:00407B21                 mov     [eax], ebx
.text:00407B23                 xor     eax, eax
.text:00407B25                 mov     ecx, [esi+0Ch]
.text:00407B28                 inc     dword ptr [esi+10h]
.text:00407B2B                 push    eax
.text:00407B2C                 push    ecx
.text:00407B2D                 mov     eax, [esi+8]
.text:00407B30                 mov     ecx, [esi+14h]
.text:00407B33                 fild    [esp+34h+var_34]
.text:00407B36                 add     esp, 8
.text:00407B39                 push    edx
.text:00407B3A                 push    eax
.text:00407B3B                 fild    [esp+34h+var_34]
.text:00407B3E                 add     esp, 8
.text:00407B41                 fld     dword ptr [ecx+8]
.text:00407B44                 fmul    st(1), st
.text:00407B46                 fxch    st(2)
.text:00407B48                 fucompp
.text:00407B4A                 fnstsw  ax
.text:00407B4C                 sahf
.text:00407B4D                 jbe     loc_407C66
.text:00407B53                 fld     ds:flt_407A78
.text:00407B59                 fxch    st(1)
.text:00407B5B                 fucom   st(1)
.text:00407B5D                 fnstsw  ax
.text:00407B5F                 sahf
.text:00407B60                 jbe     loc_407C6D
.text:00407B66                 fld     ds:flt_407A80
.text:00407B6C                 fucomp  st(1)
.text:00407B6E                 fnstsw  ax
.text:00407B70                 sahf
.text:00407B71                 jbe     loc_407C6D
.text:00407B77                 fld     dword ptr [ecx+0Ch]
.text:00407B7A                 fld     ds:flt_407A84
.text:00407B80                 fxch    st(1)
.text:00407B82                 fucompp
.text:00407B84                 fnstsw  ax
.text:00407B86                 sahf
.text:00407B87                 jbe     loc_407C6D
.text:00407B8D                 fld     dword ptr [ecx]
.text:00407B8F                 fldz
.text:00407B91                 fxch    st(1)
.text:00407B93                 fucom   st(1)
.text:00407B95                 fnstsw  ax
.text:00407B97                 fstp    st(1)
.text:00407B99                 sahf
.text:00407B9A                 jb      loc_407C76
.text:00407BA0                 faddp   st(2), st
.text:00407BA2                 fld     dword ptr [ecx+4]
.text:00407BA5                 fucom   st(2)
.text:00407BA7                 fnstsw  ax
.text:00407BA9                 sahf
.text:00407BAA                 jbe     loc_407C76
.text:00407BB0                 fld1
.text:00407BB2                 fucompp
.text:00407BB4                 fnstsw  ax
.text:00407BB6                 sahf
.text:00407BB7                 jb      loc_407C6D
.text:00407BBD                 fucompp
.text:00407BBF                 fnstsw  ax
.text:00407BC1                 sahf
.text:00407BC2                 ja      short loc_407BD0
.text:00407BC4
.text:00407BC4 loc_407BC4:                             ; CODE XREF: sub_407A90+1E1↓j
.text:00407BC4                 mov     dword ptr [esi+14h], offset dword_407510
.text:00407BCB                 mov     ecx, offset dword_407510
.text:00407BD0
.text:00407BD0 loc_407BD0:                             ; CODE XREF: sub_407A90+132↑j
.text:00407BD0                 mov     eax, [esi+0Ch]
.text:00407BD3                 xor     edx, edx
.text:00407BD5                 push    edx
.text:00407BD6                 xor     edx, edx
.text:00407BD8                 push    eax
.text:00407BD9                 mov     eax, [esi+8]
.text:00407BDC                 fild    [esp+34h+var_34]
.text:00407BDF                 add     esp, 8
.text:00407BE2                 push    edx
.text:00407BE3                 push    eax
.text:00407BE4                 fild    [esp+34h+var_34]
.text:00407BE7                 add     esp, 8
.text:00407BEA                 fld     dword ptr [ecx+8]
.text:00407BED                 fld     st
.text:00407BEF                 fmul    st, st(2)
.text:00407BF1                 fxch    st(3)
.text:00407BF3                 fucomp  st(3)
.text:00407BF5                 fnstsw  ax
.text:00407BF7                 fstp    st(2)
.text:00407BF9                 sahf
.text:00407BFA                 jbe     short loc_407C64
.text:00407BFC                 cmp     byte ptr [ecx+10h], 0
.text:00407C00                 fmul    dword ptr [ecx+0Ch]
.text:00407C03                 jnz     short loc_407C60
.text:00407C05                 fmulp   st(1), st
.text:00407C07
.text:00407C07 loc_407C07:                             ; CODE XREF: sub_407A90+1D2↓j
.text:00407C07                 fld     ds:flt_407A7C
.text:00407C0D                 fxch    st(1)
.text:00407C0F                 fucom   st(1)
.text:00407C11                 fnstsw  ax
.text:00407C13                 fstp    st(1)
.text:00407C15                 sahf
.text:00407C16                 jnb     short loc_407C57
.text:00407C18                 fnstcw  [esp+2Ch+var_12]
.text:00407C1C                 movzx   edx, [esp+2Ch+var_12]
.text:00407C21                 mov     [esp+2Ch+Size], esi
.text:00407C24                 or      dx, 0C00h
.text:00407C29                 mov     [esp+2Ch+var_14], dx
.text:00407C2E                 fldcw   [esp+2Ch+var_14]
.text:00407C32                 fistp   [esp+2Ch+var_1C]
.text:00407C36                 fldcw   [esp+2Ch+var_12]
.text:00407C3A                 mov     ecx, dword ptr [esp+2Ch+var_1C]
.text:00407C3E                 mov     [esp+2Ch+var_28], ecx
.text:00407C42                 call    sub_407910
.text:00407C47                 test    al, al
.text:00407C49                 setz    dl
.text:00407C4C                 movzx   esi, dl
.text:00407C4F                 dec     esi
.text:00407C50                 and     ebx, esi
.text:00407C52                 jmp     loc_407B08
.text:00407C57 ; ---------------------------------------------------------------------------
.text:00407C57
.text:00407C57 loc_407C57:                             ; CODE XREF: sub_407A90+186↑j
.text:00407C57                 fstp    st
.text:00407C59                 xor     eax, eax
.text:00407C5B                 jmp     loc_407ACB
.text:00407C60 ; ---------------------------------------------------------------------------
.text:00407C60
.text:00407C60 loc_407C60:                             ; CODE XREF: sub_407A90+173↑j
.text:00407C60                 fstp    st(1)
.text:00407C62                 jmp     short loc_407C07
.text:00407C64 ; ---------------------------------------------------------------------------
.text:00407C64
.text:00407C64 loc_407C64:                             ; CODE XREF: sub_407A90+16A↑j
.text:00407C64                 fstp    st
.text:00407C66
.text:00407C66 loc_407C66:                             ; CODE XREF: sub_407A90+BD↑j
.text:00407C66                 fstp    st
.text:00407C68                 jmp     loc_407B08
.text:00407C6D ; ---------------------------------------------------------------------------
.text:00407C6D
.text:00407C6D loc_407C6D:                             ; CODE XREF: sub_407A90+D0↑j
.text:00407C6D                                         ; sub_407A90+E1↑j ...
.text:00407C6D                 fstp    st
.text:00407C6F                 fstp    st
.text:00407C71                 jmp     loc_407BC4
.text:00407C76 ; ---------------------------------------------------------------------------
.text:00407C76
.text:00407C76 loc_407C76:                             ; CODE XREF: sub_407A90+10A↑j
.text:00407C76                                         ; sub_407A90+11A↑j
.text:00407C76                 fstp    st
.text:00407C78                 jmp     short loc_407C6D
.text:00407C7A ; ---------------------------------------------------------------------------
.text:00407C7A
.text:00407C7A loc_407C7A:                             ; CODE XREF: sub_407A90+15↑j
.text:00407C7A                 call    abort
.text:00407C7A sub_407A90      endp
.text:00407C7A
.text:00407C7A ; ---------------------------------------------------------------------------
.text:00407C7F                 align 10h
.text:00407C80                 mov     edx, [esp+4]
.text:00407C84                 mov     eax, [edx+8]
.text:00407C87                 retn
.text:00407C87 ; ---------------------------------------------------------------------------
.text:00407C88                 align 10h
.text:00407C90                 mov     edx, [esp+4]
.text:00407C94                 mov     eax, [edx+0Ch]
.text:00407C97                 retn
.text:00407C97 ; ---------------------------------------------------------------------------
.text:00407C98                 align 10h
.text:00407CA0                 mov     edx, [esp+4]
.text:00407CA4                 mov     eax, [edx+10h]
.text:00407CA7                 retn
.text:00407CA7 ; ---------------------------------------------------------------------------
.text:00407CA8                 align 10h
.text:00407CB0                 push    esi
.text:00407CB1                 xor     esi, esi
.text:00407CB3                 push    ebx
.text:00407CB4                 mov     edx, [esp+0Ch]
.text:00407CB8                 mov     ecx, [edx]
.text:00407CBA                 mov     ebx, [edx+4]
.text:00407CBD                 cmp     ecx, ebx
.text:00407CBF                 jnb     short loc_407D07
.text:00407CC1                 jmp     short loc_407CD0
.text:00407CC1 ; ---------------------------------------------------------------------------
.text:00407CC3                 align 10h
.text:00407CD0
.text:00407CD0 loc_407CD0:                             ; CODE XREF: .text:00407CC1↑j
.text:00407CD0                                         ; .text:00407D05↓j
.text:00407CD0                 mov     edx, [ecx]
.text:00407CD2                 test    edx, edx
.text:00407CD4                 jz      short loc_407D00
.text:00407CD6                 mov     eax, [ecx+4]
.text:00407CD9                 mov     edx, 1
.text:00407CDE                 test    eax, eax
.text:00407CE0                 jz      short loc_407CF8
.text:00407CE2                 lea     esi, [esi+0]
.text:00407CE9                 lea     edi, [edi+0]
.text:00407CF0
.text:00407CF0 loc_407CF0:                             ; CODE XREF: .text:00407CF6↓j
.text:00407CF0                 mov     eax, [eax+4]
.text:00407CF3                 inc     edx
.text:00407CF4                 test    eax, eax
.text:00407CF6                 jnz     short loc_407CF0
.text:00407CF8
.text:00407CF8 loc_407CF8:                             ; CODE XREF: .text:00407CE0↑j
.text:00407CF8                 cmp     edx, esi
.text:00407CFA                 jbe     short loc_407D00
.text:00407CFC                 mov     esi, edx
.text:00407CFE                 mov     esi, esi
.text:00407D00
.text:00407D00 loc_407D00:                             ; CODE XREF: .text:00407CD4↑j
.text:00407D00                                         ; .text:00407CFA↑j
.text:00407D00                 add     ecx, 8
.text:00407D03                 cmp     ecx, ebx
.text:00407D05                 jb      short loc_407CD0
.text:00407D07
.text:00407D07 loc_407D07:                             ; CODE XREF: .text:00407CBF↑j
.text:00407D07                 pop     ebx
.text:00407D08                 mov     eax, esi
.text:00407D0A                 pop     esi
.text:00407D0B                 retn
.text:00407D0B ; ---------------------------------------------------------------------------
.text:00407D0C                 align 10h
.text:00407D10                 push    edi
.text:00407D11                 xor     ecx, ecx
.text:00407D13                 push    esi
.text:00407D14                 xor     esi, esi
.text:00407D16                 push    ebx
.text:00407D17                 mov     edi, [esp+10h]
.text:00407D1B                 mov     edx, [edi]
.text:00407D1D                 mov     ebx, [edi+4]
.text:00407D20                 cmp     edx, ebx
.text:00407D22                 jnb     short loc_407D4F
.text:00407D24                 lea     esi, [esi+0]
.text:00407D2A                 lea     edi, [edi+0]
.text:00407D30
.text:00407D30 loc_407D30:                             ; CODE XREF: .text:00407D4D↓j
.text:00407D30                 mov     eax, [edx]
.text:00407D32                 test    eax, eax
.text:00407D34                 jz      short loc_407D48
.text:00407D36                 mov     eax, [edx+4]
.text:00407D39                 inc     esi
.text:00407D3A                 inc     ecx
.text:00407D3B                 test    eax, eax
.text:00407D3D                 jz      short loc_407D48
.text:00407D3F                 nop
.text:00407D40
.text:00407D40 loc_407D40:                             ; CODE XREF: .text:00407D46↓j
.text:00407D40                 mov     eax, [eax+4]
.text:00407D43                 inc     ecx
.text:00407D44                 test    eax, eax
.text:00407D46                 jnz     short loc_407D40
.text:00407D48
.text:00407D48 loc_407D48:                             ; CODE XREF: .text:00407D34↑j
.text:00407D48                                         ; .text:00407D3D↑j
.text:00407D48                 add     edx, 8
.text:00407D4B                 cmp     edx, ebx
.text:00407D4D                 jb      short loc_407D30
.text:00407D4F
.text:00407D4F loc_407D4F:                             ; CODE XREF: .text:00407D22↑j
.text:00407D4F                 cmp     esi, [edi+0Ch]
.text:00407D52                 jz      short loc_407D5A
.text:00407D54
.text:00407D54 loc_407D54:                             ; CODE XREF: .text:00407D5D↓j
.text:00407D54                 xor     eax, eax
.text:00407D56
.text:00407D56 loc_407D56:                             ; CODE XREF: .text:00407D64↓j
.text:00407D56                 pop     ebx
.text:00407D57                 pop     esi
.text:00407D58                 pop     edi
.text:00407D59                 retn
.text:00407D5A ; ---------------------------------------------------------------------------
.text:00407D5A
.text:00407D5A loc_407D5A:                             ; CODE XREF: .text:00407D52↑j
.text:00407D5A                 cmp     ecx, [edi+10h]
.text:00407D5D                 jnz     short loc_407D54
.text:00407D5F                 mov     eax, 1
.text:00407D64                 jmp     short loc_407D56
.text:00407D64 ; ---------------------------------------------------------------------------
.text:00407D66 aEntriesLu      db '# entries:         %lu',0Ah,0
.text:00407D66                                         ; DATA XREF: .text:00407E5E↓o
.text:00407D7E aBucketsLu      db '# buckets:         %lu',0Ah,0
.text:00407D7E                                         ; DATA XREF: .text:00407E76↓o
.text:00407D96                 db 1Ah dup(90h)
.text:00407DB0 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.text:00407DB0                                         ; DATA XREF: .text:00407EB0↓o
.text:00407DD1 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.text:00407DD1                                         ; DATA XREF: .text:00407ECA↓o
.text:00407DE9                 db 8Dh, 76h, 0
.text:00407DEC flt_407DEC      dd 100.0                ; DATA XREF: .text:00407EA3↓r
.text:00407DF0 ; ---------------------------------------------------------------------------
.text:00407DF0                 push    ebp
.text:00407DF1                 push    edi
.text:00407DF2                 push    esi
.text:00407DF3                 xor     esi, esi
.text:00407DF5                 push    ebx
.text:00407DF6                 sub     esp, 1Ch
.text:00407DF9                 mov     ebx, [esp+30h]
.text:00407DFD                 mov     edi, [esp+34h]
.text:00407E01                 mov     ecx, [ebx+10h]
.text:00407E04                 mov     eax, [ebx+0Ch]
.text:00407E07                 mov     ebp, [ebx+8]
.text:00407E0A                 mov     [esp+18h], ecx
.text:00407E0E                 mov     ecx, [ebx]
.text:00407E10                 mov     [esp+14h], eax
.text:00407E14                 mov     eax, [ebx+4]
.text:00407E17                 cmp     ecx, eax
.text:00407E19                 jnb     short loc_407E57
.text:00407E1B                 mov     ebx, eax
.text:00407E1D                 lea     esi, [esi+0]
.text:00407E20
.text:00407E20 loc_407E20:                             ; CODE XREF: .text:00407E55↓j
.text:00407E20                 mov     edx, [ecx]
.text:00407E22                 test    edx, edx
.text:00407E24                 jz      short loc_407E50
.text:00407E26                 mov     eax, [ecx+4]
.text:00407E29                 mov     edx, 1
.text:00407E2E                 test    eax, eax
.text:00407E30                 jz      short loc_407E48
.text:00407E32                 lea     esi, [esi+0]
.text:00407E39                 lea     edi, [edi+0]
.text:00407E40
.text:00407E40 loc_407E40:                             ; CODE XREF: .text:00407E46↓j
.text:00407E40                 mov     eax, [eax+4]
.text:00407E43                 inc     edx
.text:00407E44                 test    eax, eax
.text:00407E46                 jnz     short loc_407E40
.text:00407E48
.text:00407E48 loc_407E48:                             ; CODE XREF: .text:00407E30↑j
.text:00407E48                 cmp     edx, esi
.text:00407E4A                 jbe     short loc_407E50
.text:00407E4C                 mov     esi, edx
.text:00407E4E                 mov     esi, esi
.text:00407E50
.text:00407E50 loc_407E50:                             ; CODE XREF: .text:00407E24↑j
.text:00407E50                                         ; .text:00407E4A↑j
.text:00407E50                 add     ecx, 8
.text:00407E53                 cmp     ecx, ebx
.text:00407E55                 jb      short loc_407E20
.text:00407E57
.text:00407E57 loc_407E57:                             ; CODE XREF: .text:00407E19↑j
.text:00407E57                 mov     [esp], edi
.text:00407E5A                 mov     edx, [esp+18h]
.text:00407E5E                 mov     dword ptr [esp+4], offset aEntriesLu ; "# entries:         %lu\n"
.text:00407E66                 mov     [esp+8], edx
.text:00407E6A                 call    fprintf
.text:00407E6F                 mov     [esp+8], ebp
.text:00407E73                 mov     [esp], edi
.text:00407E76                 mov     dword ptr [esp+4], offset aBucketsLu ; "# buckets:         %lu\n"
.text:00407E7E                 call    fprintf
.text:00407E83                 mov     ebx, [esp+14h]
.text:00407E87                 xor     eax, eax
.text:00407E89                 mov     ecx, ebp
.text:00407E8B                 push    eax
.text:00407E8C                 xor     ebp, ebp
.text:00407E8E                 push    ebx
.text:00407E8F                 fild    qword ptr [esp]
.text:00407E92                 add     esp, 8
.text:00407E95                 push    ebp
.text:00407E96                 push    ecx
.text:00407E97                 fild    qword ptr [esp]
.text:00407E9A                 fxch    st(1)
.text:00407E9C                 add     esp, 8
.text:00407E9F                 mov     ebx, [esp+14h]
.text:00407EA3                 fmul    ds:flt_407DEC
.text:00407EA9                 mov     [esp], edi
.text:00407EAC                 mov     [esp+8], ebx
.text:00407EB0                 mov     dword ptr [esp+4], offset aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:00407EB8                 fdivrp  st(1), st
.text:00407EBA                 fstp    qword ptr [esp+0Ch]
.text:00407EBE                 call    fprintf
.text:00407EC3                 mov     [esp+8], esi
.text:00407EC7                 mov     [esp], edi
.text:00407ECA                 mov     dword ptr [esp+4], offset aMaxBucketLengt ; "max bucket length: %lu\n"
.text:00407ED2                 call    fprintf
.text:00407ED7                 add     esp, 1Ch
.text:00407EDA                 pop     ebx
.text:00407EDB                 pop     esi
.text:00407EDC                 pop     edi
.text:00407EDD                 pop     ebp
.text:00407EDE                 retn
.text:00407EDE ; ---------------------------------------------------------------------------
.text:00407EDF                 align 10h
.text:00407EE0                 push    edi
.text:00407EE1                 push    esi
.text:00407EE2                 push    ebx
.text:00407EE3                 sub     esp, 10h
.text:00407EE6                 mov     esi, [esp+20h]
.text:00407EEA                 mov     edi, [esp+24h]
.text:00407EEE                 mov     edx, [esi+8]
.text:00407EF1                 mov     [esp], edi
.text:00407EF4                 mov     [esp+4], edx
.text:00407EF8                 call    dword ptr [esi+18h]
.text:00407EFB                 mov     ecx, [esi]
.text:00407EFD                 lea     eax, [ecx+eax*8]
.text:00407F00                 cmp     eax, [esi+4]
.text:00407F03                 jnb     short loc_407F44
.text:00407F05                 mov     ecx, [eax]
.text:00407F07                 test    ecx, ecx
.text:00407F09                 jz      short loc_407F37
.text:00407F0B                 test    eax, eax
.text:00407F0D                 mov     ebx, eax
.text:00407F0F                 jz      short loc_407F37
.text:00407F11                 jmp     short loc_407F20
.text:00407F11 ; ---------------------------------------------------------------------------
.text:00407F13                 align 10h
.text:00407F20
.text:00407F20 loc_407F20:                             ; CODE XREF: .text:00407F11↑j
.text:00407F20                                         ; .text:00407F35↓j
.text:00407F20                 mov     edx, [ebx]
.text:00407F22                 mov     [esp], edi
.text:00407F25                 mov     [esp+4], edx
.text:00407F29                 call    dword ptr [esi+1Ch]
.text:00407F2C                 test    al, al
.text:00407F2E                 jnz     short loc_407F40
.text:00407F30                 mov     ebx, [ebx+4]
.text:00407F33                 test    ebx, ebx
.text:00407F35                 jnz     short loc_407F20
.text:00407F37
.text:00407F37 loc_407F37:                             ; CODE XREF: .text:00407F09↑j
.text:00407F37                                         ; .text:00407F0F↑j
.text:00407F37                 xor     eax, eax
.text:00407F39
.text:00407F39 loc_407F39:                             ; CODE XREF: .text:00407F42↓j
.text:00407F39                 add     esp, 10h
.text:00407F3C                 pop     ebx
.text:00407F3D                 pop     esi
.text:00407F3E                 pop     edi
.text:00407F3F                 retn
.text:00407F40 ; ---------------------------------------------------------------------------
.text:00407F40
.text:00407F40 loc_407F40:                             ; CODE XREF: .text:00407F2E↑j
.text:00407F40                 mov     eax, [ebx]
.text:00407F42                 jmp     short loc_407F39
.text:00407F44 ; ---------------------------------------------------------------------------
.text:00407F44
.text:00407F44 loc_407F44:                             ; CODE XREF: .text:00407F03↑j
.text:00407F44                 call    abort
.text:00407F44 ; ---------------------------------------------------------------------------
.text:00407F49                 align 10h
.text:00407F50                 sub     esp, 0Ch
.text:00407F53                 mov     eax, [esp+10h]
.text:00407F57                 mov     edx, [eax+10h]
.text:00407F5A                 test    edx, edx
.text:00407F5C                 jz      short loc_407F83
.text:00407F5E                 mov     edx, [eax]
.text:00407F60                 mov     ecx, [eax+4]
.text:00407F63                 lea     esi, [esi+0]
.text:00407F69                 lea     edi, [edi+0]
.text:00407F70
.text:00407F70 loc_407F70:                             ; CODE XREF: .text:00407F7D↓j
.text:00407F70                 cmp     edx, ecx
.text:00407F72                 jnb     short loc_407F87
.text:00407F74                 mov     eax, [edx]
.text:00407F76                 test    eax, eax
.text:00407F78                 jnz     short loc_407F7F
.text:00407F7A                 add     edx, 8
.text:00407F7D                 jmp     short loc_407F70
.text:00407F7F ; ---------------------------------------------------------------------------
.text:00407F7F
.text:00407F7F loc_407F7F:                             ; CODE XREF: .text:00407F78↑j
.text:00407F7F                                         ; .text:00407F85↓j
.text:00407F7F                 add     esp, 0Ch
.text:00407F82                 retn
.text:00407F83 ; ---------------------------------------------------------------------------
.text:00407F83
.text:00407F83 loc_407F83:                             ; CODE XREF: .text:00407F5C↑j
.text:00407F83                 xor     eax, eax
.text:00407F85                 jmp     short loc_407F7F
.text:00407F87 ; ---------------------------------------------------------------------------
.text:00407F87
.text:00407F87 loc_407F87:                             ; CODE XREF: .text:00407F72↑j
.text:00407F87                 call    abort
.text:00407F87 ; ---------------------------------------------------------------------------
.text:00407F8C                 align 10h
.text:00407F90                 push    esi
.text:00407F91                 push    ebx
.text:00407F92                 sub     esp, 14h
.text:00407F95                 mov     ebx, [esp+20h]
.text:00407F99                 mov     esi, [esp+24h]
.text:00407F9D                 mov     edx, [ebx+8]
.text:00407FA0                 mov     [esp], esi
.text:00407FA3                 mov     [esp+4], edx
.text:00407FA7                 call    dword ptr [ebx+18h]
.text:00407FAA                 mov     ecx, [ebx]
.text:00407FAC                 lea     edx, [ecx+eax*8]
.text:00407FAF                 mov     ecx, [ebx+4]
.text:00407FB2                 cmp     edx, ecx
.text:00407FB4                 jnb     short loc_408000
.text:00407FB6                 test    edx, edx
.text:00407FB8                 mov     eax, edx
.text:00407FBA                 jz      short loc_407FCB
.text:00407FBC                 lea     esi, [esi+0]
.text:00407FC0
.text:00407FC0 loc_407FC0:                             ; CODE XREF: .text:00407FC9↓j
.text:00407FC0                 cmp     [eax], esi
.text:00407FC2                 jz      short loc_407FF5
.text:00407FC4                 mov     eax, [eax+4]
.text:00407FC7
.text:00407FC7 loc_407FC7:                             ; CODE XREF: .text:00407FFA↓j
.text:00407FC7                 test    eax, eax
.text:00407FC9                 jnz     short loc_407FC0
.text:00407FCB
.text:00407FCB loc_407FCB:                             ; CODE XREF: .text:00407FBA↑j
.text:00407FCB                 add     edx, 8
.text:00407FCE                 cmp     edx, ecx
.text:00407FD0                 jnb     short loc_407FED
.text:00407FD2                 lea     esi, [esi+0]
.text:00407FD9                 lea     edi, [edi+0]
.text:00407FE0
.text:00407FE0 loc_407FE0:                             ; CODE XREF: .text:00407FEB↓j
.text:00407FE0                 mov     eax, [edx]
.text:00407FE2                 test    eax, eax
.text:00407FE4                 jnz     short loc_407FEF
.text:00407FE6                 add     edx, 8
.text:00407FE9                 cmp     edx, ecx
.text:00407FEB                 jb      short loc_407FE0
.text:00407FED
.text:00407FED loc_407FED:                             ; CODE XREF: .text:00407FD0↑j
.text:00407FED                 xor     eax, eax
.text:00407FEF
.text:00407FEF loc_407FEF:                             ; CODE XREF: .text:00407FE4↑j
.text:00407FEF                                         ; .text:00407FFE↓j
.text:00407FEF                 add     esp, 14h
.text:00407FF2                 pop     ebx
.text:00407FF3                 pop     esi
.text:00407FF4                 retn
.text:00407FF5 ; ---------------------------------------------------------------------------
.text:00407FF5
.text:00407FF5 loc_407FF5:                             ; CODE XREF: .text:00407FC2↑j
.text:00407FF5                 mov     eax, [eax+4]
.text:00407FF8                 test    eax, eax
.text:00407FFA                 jz      short loc_407FC7
.text:00407FFC                 mov     eax, [eax]
.text:00407FFE                 jmp     short loc_407FEF
.text:00408000 ; ---------------------------------------------------------------------------
.text:00408000
.text:00408000 loc_408000:                             ; CODE XREF: .text:00407FB4↑j
.text:00408000                 call    abort
.text:00408000 ; ---------------------------------------------------------------------------
.text:00408005                 align 10h
.text:00408010                 push    ebp
.text:00408011                 xor     ecx, ecx
.text:00408013                 push    edi
.text:00408014                 push    esi
.text:00408015                 push    ebx
.text:00408016                 mov     edx, [esp+14h]
.text:0040801A                 mov     ebp, [esp+18h]
.text:0040801E                 mov     edi, [esp+1Ch]
.text:00408022                 mov     ebx, [edx]
.text:00408024                 mov     esi, [edx+4]
.text:00408027                 cmp     ebx, esi
.text:00408029                 jnb     short loc_408060
.text:0040802B                 nop
.text:0040802C                 lea     esi, [esi+0]
.text:00408030
.text:00408030 loc_408030:                             ; CODE XREF: .text:00408057↓j
.text:00408030                 mov     edx, [ebx]
.text:00408032                 test    edx, edx
.text:00408034                 jz      short loc_408052
.text:00408036                 mov     edx, ebx
.text:00408038                 nop
.text:00408039                 lea     esi, [esi+0]
.text:00408040
.text:00408040 loc_408040:                             ; CODE XREF: .text:00408050↓j
.text:00408040                 cmp     ecx, edi
.text:00408042                 jnb     short loc_408060
.text:00408044                 mov     eax, [edx]
.text:00408046                 mov     edx, [edx+4]
.text:00408049                 mov     [ebp+ecx*4+0], eax
.text:0040804D                 inc     ecx
.text:0040804E                 test    edx, edx
.text:00408050                 jnz     short loc_408040
.text:00408052
.text:00408052 loc_408052:                             ; CODE XREF: .text:00408034↑j
.text:00408052                 add     ebx, 8
.text:00408055                 cmp     ebx, esi
.text:00408057                 jb      short loc_408030
.text:00408059                 lea     esi, [esi+0]
.text:00408060
.text:00408060 loc_408060:                             ; CODE XREF: .text:00408029↑j
.text:00408060                                         ; .text:00408042↑j
.text:00408060                 pop     ebx
.text:00408061                 mov     eax, ecx
.text:00408063                 pop     esi
.text:00408064                 pop     edi
.text:00408065                 pop     ebp
.text:00408066                 retn
.text:00408066 ; ---------------------------------------------------------------------------
.text:00408067                 align 10h
.text:00408070                 push    ebp
.text:00408071                 push    edi
.text:00408072                 xor     edi, edi
.text:00408074                 push    esi
.text:00408075                 push    ebx
.text:00408076                 sub     esp, 0Ch
.text:00408079                 mov     edx, [esp+20h]
.text:0040807D                 mov     ebp, [esp+28h]
.text:00408081                 mov     esi, [edx]
.text:00408083                 mov     eax, [edx+4]
.text:00408086                 cmp     esi, eax
.text:00408088                 jnb     short loc_4080D0
.text:0040808A                 lea     esi, [esi+0]
.text:00408090
.text:00408090 loc_408090:                             ; CODE XREF: .text:004080C5↓j
.text:00408090                 mov     ecx, [esi]
.text:00408092                 test    ecx, ecx
.text:00408094                 jz      short loc_4080C0
.text:00408096                 mov     ebx, esi
.text:00408098                 nop
.text:00408099                 lea     esi, [esi+0]
.text:004080A0
.text:004080A0 loc_4080A0:                             ; CODE XREF: .text:004080B7↓j
.text:004080A0                 mov     [esp+4], ebp
.text:004080A4                 mov     edx, [ebx]
.text:004080A6                 mov     [esp], edx
.text:004080A9                 call    dword ptr [esp+24h]
.text:004080AD                 test    al, al
.text:004080AF                 jz      short loc_4080D0
.text:004080B1                 mov     ebx, [ebx+4]
.text:004080B4                 inc     edi
.text:004080B5                 test    ebx, ebx
.text:004080B7                 jnz     short loc_4080A0
.text:004080B9                 mov     ebx, [esp+20h]
.text:004080BD                 mov     eax, [ebx+4]
.text:004080C0
.text:004080C0 loc_4080C0:                             ; CODE XREF: .text:00408094↑j
.text:004080C0                 add     esi, 8
.text:004080C3                 cmp     esi, eax
.text:004080C5                 jb      short loc_408090
.text:004080C7                 mov     esi, esi
.text:004080C9                 lea     edi, [edi+0]
.text:004080D0
.text:004080D0 loc_4080D0:                             ; CODE XREF: .text:00408088↑j
.text:004080D0                                         ; .text:004080AF↑j
.text:004080D0                 add     esp, 0Ch
.text:004080D3                 mov     eax, edi
.text:004080D5                 pop     ebx
.text:004080D6                 pop     esi
.text:004080D7                 pop     edi
.text:004080D8                 pop     ebp
.text:004080D9                 retn
.text:004080D9 ; ---------------------------------------------------------------------------
.text:004080DA                 align 10h
.text:004080E0                 push    esi
.text:004080E1                 push    ebx
.text:004080E2                 mov     ecx, [esp+0Ch]
.text:004080E6                 xor     ebx, ebx
.text:004080E8                 mov     esi, [esp+10h]
.text:004080EC                 movzx   edx, byte ptr [ecx]
.text:004080EF                 test    dl, dl
.text:004080F1                 jz      short loc_40811A
.text:004080F3                 lea     esi, [esi+0]
.text:004080F9                 lea     edi, [edi+0]
.text:00408100
.text:00408100 loc_408100:                             ; CODE XREF: .text:00408118↓j
.text:00408100                 mov     eax, ebx
.text:00408102                 inc     ecx
.text:00408103                 shl     eax, 5
.text:00408106                 sub     eax, ebx
.text:00408108                 movzx   ebx, dl
.text:0040810B                 add     eax, ebx
.text:0040810D                 xor     edx, edx
.text:0040810F                 div     esi
.text:00408111                 mov     ebx, edx
.text:00408113                 movzx   edx, byte ptr [ecx]
.text:00408116                 test    dl, dl
.text:00408118                 jnz     short loc_408100
.text:0040811A
.text:0040811A loc_40811A:                             ; CODE XREF: .text:004080F1↑j
.text:0040811A                 mov     eax, ebx
.text:0040811C                 pop     ebx
.text:0040811D                 pop     esi
.text:0040811E                 retn
.text:0040811E ; ---------------------------------------------------------------------------
.text:0040811F                 align 10h
.text:00408120                 mov     ecx, [esp+4]
.text:00408124                 mov     edx, ds:dword_407510
.text:0040812A                 mov     [ecx], edx
.text:0040812C                 mov     edx, ds:dword_407514
.text:00408132                 mov     [ecx+4], edx
.text:00408135                 mov     edx, ds:dword_407514+4
.text:0040813B                 mov     [ecx+8], edx
.text:0040813E                 mov     edx, ds:dword_407514+8
.text:00408144                 mov     [ecx+0Ch], edx
.text:00408147                 mov     edx, ds:dword_407514+0Ch
.text:0040814D                 mov     [ecx+10h], edx
.text:00408150                 retn
.text:00408150 ; ---------------------------------------------------------------------------
.text:00408151                 align 4
.text:00408154 flt_408154      dd 0.1                  ; DATA XREF: sub_408160+79↓r
.text:00408158 flt_408158      dd 0.89999998           ; DATA XREF: sub_408160+8D↓r
.text:0040815C flt_40815C      dd 1.1                  ; DATA XREF: sub_408160+A1↓r
.text:00408160
.text:00408160 ; =============== S U B R O U T I N E =======================================
.text:00408160
.text:00408160
.text:00408160 sub_408160      proc near               ; CODE XREF: sub_403B00+2F0↑p
.text:00408160                                         ; sub_403B00+483↑p
.text:00408160
.text:00408160 var_34          = qword ptr -34h
.text:00408160 var_2C          = dword ptr -2Ch
.text:00408160 var_28          = dword ptr -28h
.text:00408160 var_24          = dword ptr -24h
.text:00408160 var_20          = dword ptr -20h
.text:00408160 var_1C          = qword ptr -1Ch
.text:00408160 var_14          = word ptr -14h
.text:00408160 var_12          = word ptr -12h
.text:00408160 var_10          = dword ptr -10h
.text:00408160 arg_0           = dword ptr  4
.text:00408160 arg_4           = dword ptr  8
.text:00408160
.text:00408160                 push    esi
.text:00408161                 push    ebx
.text:00408162                 sub     esp, 24h
.text:00408165                 lea     edx, [esp+2Ch+var_10]
.text:00408169                 mov     [esp+2Ch+var_24], edx
.text:0040816D                 mov     ebx, [esp+2Ch+arg_0]
.text:00408171                 mov     edx, [esp+2Ch+arg_4]
.text:00408175                 mov     [esp+2Ch+var_20], 1
.text:0040817D                 mov     [esp+2Ch+var_2C], ebx
.text:00408180                 mov     [esp+2Ch+var_28], edx
.text:00408184                 call    sub_4082F0
.text:00408189                 mov     esi, eax
.text:0040818B                 xor     eax, eax
.text:0040818D                 test    esi, esi
.text:0040818F                 jz      loc_4082C2
.text:00408195                 dec     dword ptr [ebx+10h]
.text:00408198                 mov     ecx, [esp+2Ch+var_10]
.text:0040819C                 mov     edx, [ecx]
.text:0040819E                 test    edx, edx
.text:004081A0                 jnz     loc_4082C0
.text:004081A6                 dec     dword ptr [ebx+0Ch]
.text:004081A9                 xor     eax, eax
.text:004081AB                 xor     edx, edx
.text:004081AD                 mov     ecx, [ebx+0Ch]
.text:004081B0                 push    eax
.text:004081B1                 push    ecx
.text:004081B2                 mov     eax, [ebx+8]
.text:004081B5                 mov     ecx, [ebx+14h]
.text:004081B8                 fild    [esp+34h+var_34]
.text:004081BB                 add     esp, 8
.text:004081BE                 push    edx
.text:004081BF                 push    eax
.text:004081C0                 fild    [esp+34h+var_34]
.text:004081C3                 add     esp, 8
.text:004081C6                 fld     dword ptr [ecx]
.text:004081C8                 fmul    st(1), st
.text:004081CA                 fxch    st(1)
.text:004081CC                 fucomp  st(2)
.text:004081CE                 fnstsw  ax
.text:004081D0                 fstp    st(1)
.text:004081D2                 sahf
.text:004081D3                 jbe     loc_4082D0
.text:004081D9                 fld     ds:flt_408154
.text:004081DF                 fld     dword ptr [ecx+8]
.text:004081E2                 fucom   st(1)
.text:004081E4                 fnstsw  ax
.text:004081E6                 sahf
.text:004081E7                 jbe     loc_4082E0
.text:004081ED                 fld     ds:flt_408158
.text:004081F3                 fucomp  st(1)
.text:004081F5                 fnstsw  ax
.text:004081F7                 sahf
.text:004081F8                 jbe     loc_4082E0
.text:004081FE                 fld     dword ptr [ecx+0Ch]
.text:00408201                 fld     ds:flt_40815C
.text:00408207                 fxch    st(1)
.text:00408209                 fucompp
.text:0040820B                 fnstsw  ax
.text:0040820D                 sahf
.text:0040820E                 jbe     loc_4082E0
.text:00408214                 fldz
.text:00408216                 fxch    st(3)
.text:00408218                 fucom   st(3)
.text:0040821A                 fnstsw  ax
.text:0040821C                 fstp    st(3)
.text:0040821E                 sahf
.text:0040821F                 jb      loc_4082E0
.text:00408225                 fxch    st(1)
.text:00408227                 faddp   st(2), st
.text:00408229                 fld     dword ptr [ecx+4]
.text:0040822C                 fucom   st(2)
.text:0040822E                 fnstsw  ax
.text:00408230                 sahf
.text:00408231                 jbe     loc_4082E0
.text:00408237                 fld1
.text:00408239                 fucompp
.text:0040823B                 fnstsw  ax
.text:0040823D                 sahf
.text:0040823E                 jb      loc_4082D4
.text:00408244                 fucompp
.text:00408246                 fnstsw  ax
.text:00408248                 sahf
.text:00408249                 ja      short loc_40825C
.text:0040824B                 nop
.text:0040824C                 lea     esi, [esi+0]
.text:00408250
.text:00408250 loc_408250:                             ; CODE XREF: sub_408160+178↓j
.text:00408250                 mov     dword ptr [ebx+14h], offset dword_407510
.text:00408257                 mov     ecx, offset dword_407510
.text:0040825C
.text:0040825C loc_40825C:                             ; CODE XREF: sub_408160+E9↑j
.text:0040825C                 mov     eax, [ebx+0Ch]
.text:0040825F                 xor     edx, edx
.text:00408261                 push    edx
.text:00408262                 xor     edx, edx
.text:00408264                 push    eax
.text:00408265                 mov     eax, [ebx+8]
.text:00408268                 fild    [esp+34h+var_34]
.text:0040826B                 add     esp, 8
.text:0040826E                 push    edx
.text:0040826F                 push    eax
.text:00408270                 fild    [esp+34h+var_34]
.text:00408273                 add     esp, 8
.text:00408276                 fld     dword ptr [ecx]
.text:00408278                 fmul    st, st(1)
.text:0040827A                 fucomp  st(2)
.text:0040827C                 fnstsw  ax
.text:0040827E                 fstp    st(1)
.text:00408280                 sahf
.text:00408281                 jbe     short loc_4082D0
.text:00408283                 cmp     byte ptr [ecx+10h], 0
.text:00408287                 jz      short loc_4082C8
.text:00408289                 fmul    dword ptr [ecx+4]
.text:0040828C
.text:0040828C loc_40828C:                             ; CODE XREF: sub_408160+16E↓j
.text:0040828C                 fnstcw  [esp+2Ch+var_12]
.text:00408290                 movzx   ecx, [esp+2Ch+var_12]
.text:00408295                 mov     [esp+2Ch+var_2C], ebx
.text:00408298                 or      cx, 0C00h
.text:0040829D                 mov     [esp+2Ch+var_14], cx
.text:004082A2                 fldcw   [esp+2Ch+var_14]
.text:004082A6                 fistp   [esp+2Ch+var_1C]
.text:004082AA                 fldcw   [esp+2Ch+var_12]
.text:004082AE                 mov     edx, dword ptr [esp+2Ch+var_1C]
.text:004082B2                 mov     [esp+2Ch+var_28], edx
.text:004082B6                 call    sub_407910
.text:004082BB                 nop
.text:004082BC                 lea     esi, [esi+0]
.text:004082C0
.text:004082C0 loc_4082C0:                             ; CODE XREF: sub_408160+40↑j
.text:004082C0                                         ; sub_408160+172↓j
.text:004082C0                 mov     eax, esi
.text:004082C2
.text:004082C2 loc_4082C2:                             ; CODE XREF: sub_408160+2F↑j
.text:004082C2                 add     esp, 24h
.text:004082C5                 pop     ebx
.text:004082C6                 pop     esi
.text:004082C7                 retn
.text:004082C8 ; ---------------------------------------------------------------------------
.text:004082C8
.text:004082C8 loc_4082C8:                             ; CODE XREF: sub_408160+127↑j
.text:004082C8                 fmul    dword ptr [ecx+4]
.text:004082CB                 fmul    dword ptr [ecx+8]
.text:004082CE                 jmp     short loc_40828C
.text:004082D0 ; ---------------------------------------------------------------------------
.text:004082D0
.text:004082D0 loc_4082D0:                             ; CODE XREF: sub_408160+73↑j
.text:004082D0                                         ; sub_408160+121↑j
.text:004082D0                 fstp    st
.text:004082D2                 jmp     short loc_4082C0
.text:004082D4 ; ---------------------------------------------------------------------------
.text:004082D4
.text:004082D4 loc_4082D4:                             ; CODE XREF: sub_408160+DE↑j
.text:004082D4                                         ; sub_408160+182↓j
.text:004082D4                 fstp    st
.text:004082D6                 fstp    st
.text:004082D8                 jmp     loc_408250
.text:004082D8 ; ---------------------------------------------------------------------------
.text:004082DD                 align 10h
.text:004082E0
.text:004082E0 loc_4082E0:                             ; CODE XREF: sub_408160+87↑j
.text:004082E0                                         ; sub_408160+98↑j ...
.text:004082E0                 fstp    st
.text:004082E2                 jmp     short loc_4082D4
.text:004082E2 sub_408160      endp
.text:004082E2
.text:004082E2 ; ---------------------------------------------------------------------------
.text:004082E4                 align 10h
.text:004082F0
.text:004082F0 ; =============== S U B R O U T I N E =======================================
.text:004082F0
.text:004082F0
.text:004082F0 sub_4082F0      proc near               ; CODE XREF: sub_407A90+32↑p
.text:004082F0                                         ; sub_408160+24↑p
.text:004082F0
.text:004082F0 var_1C          = dword ptr -1Ch
.text:004082F0 var_18          = dword ptr -18h
.text:004082F0 var_D           = byte ptr -0Dh
.text:004082F0 arg_0           = dword ptr  4
.text:004082F0 arg_4           = dword ptr  8
.text:004082F0 arg_8           = dword ptr  0Ch
.text:004082F0 arg_C           = byte ptr  10h
.text:004082F0
.text:004082F0                 push    edi
.text:004082F1                 push    esi
.text:004082F2                 push    ebx
.text:004082F3                 sub     esp, 10h
.text:004082F6                 mov     esi, [esp+1Ch+arg_0]
.text:004082FA                 movzx   ecx, [esp+1Ch+arg_C]
.text:004082FF                 mov     edi, [esp+1Ch+arg_4]
.text:00408303                 mov     edx, [esi+8]
.text:00408306                 mov     [esp+1Ch+var_D], cl
.text:0040830A                 mov     [esp+1Ch+var_18], edx
.text:0040830E                 mov     [esp+1Ch+var_1C], edi
.text:00408311                 call    dword ptr [esi+18h]
.text:00408314                 mov     ecx, [esi]
.text:00408316                 lea     ebx, [ecx+eax*8]
.text:00408319                 cmp     ebx, [esi+4]
.text:0040831C                 jnb     loc_4083D3
.text:00408322                 mov     edx, [esp+1Ch+arg_8]
.text:00408326                 xor     eax, eax
.text:00408328                 mov     [edx], ebx
.text:0040832A                 mov     edx, [ebx]
.text:0040832C                 test    edx, edx
.text:0040832E                 jz      short loc_408372
.text:00408330                 mov     [esp+1Ch+var_18], edx
.text:00408334                 mov     [esp+1Ch+var_1C], edi
.text:00408337                 call    dword ptr [esi+1Ch]
.text:0040833A                 test    al, al
.text:0040833C                 jz      short loc_408381
.text:0040833E                 cmp     [esp+1Ch+var_D], 0
.text:00408343                 mov     edi, [ebx]
.text:00408345                 jz      short loc_408370
.text:00408347                 mov     ecx, [ebx+4]
.text:0040834A                 test    ecx, ecx
.text:0040834C                 jz      short loc_408379
.text:0040834E                 mov     eax, [ecx]
.text:00408350                 mov     edx, [ecx+4]
.text:00408353                 mov     [ebx], eax
.text:00408355                 mov     [ebx+4], edx
.text:00408358                 mov     ebx, [esi+24h]
.text:0040835B                 mov     dword ptr [ecx], 0
.text:00408361                 mov     [ecx+4], ebx
.text:00408364                 mov     [esi+24h], ecx
.text:00408367                 mov     esi, esi
.text:00408369                 lea     edi, [edi+0]
.text:00408370
.text:00408370 loc_408370:                             ; CODE XREF: sub_4082F0+55↑j
.text:00408370                                         ; sub_4082F0+8F↓j
.text:00408370                 mov     eax, edi
.text:00408372
.text:00408372 loc_408372:                             ; CODE XREF: sub_4082F0+3E↑j
.text:00408372                                         ; sub_4082F0+BC↓j ...
.text:00408372                 add     esp, 10h
.text:00408375                 pop     ebx
.text:00408376                 pop     esi
.text:00408377                 pop     edi
.text:00408378                 retn
.text:00408379 ; ---------------------------------------------------------------------------
.text:00408379
.text:00408379 loc_408379:                             ; CODE XREF: sub_4082F0+5C↑j
.text:00408379                 mov     dword ptr [ebx], 0
.text:0040837F                 jmp     short loc_408370
.text:00408381 ; ---------------------------------------------------------------------------
.text:00408381
.text:00408381 loc_408381:                             ; CODE XREF: sub_4082F0+4C↑j
.text:00408381                 mov     eax, [ebx+4]
.text:00408384                 test    eax, eax
.text:00408386                 jz      short loc_4083AA
.text:00408388                 nop
.text:00408389                 lea     esi, [esi+0]
.text:00408390
.text:00408390 loc_408390:                             ; CODE XREF: sub_4082F0+B8↓j
.text:00408390                 mov     ecx, [eax]
.text:00408392                 mov     [esp+1Ch+var_1C], edi
.text:00408395                 mov     [esp+1Ch+var_18], ecx
.text:00408399                 call    dword ptr [esi+1Ch]
.text:0040839C                 test    al, al
.text:0040839E                 jnz     short loc_4083AE
.text:004083A0                 mov     ebx, [ebx+4]
.text:004083A3                 mov     eax, [ebx+4]
.text:004083A6                 test    eax, eax
.text:004083A8                 jnz     short loc_408390
.text:004083AA
.text:004083AA loc_4083AA:                             ; CODE XREF: sub_4082F0+96↑j
.text:004083AA                 xor     eax, eax
.text:004083AC                 jmp     short loc_408372
.text:004083AE ; ---------------------------------------------------------------------------
.text:004083AE
.text:004083AE loc_4083AE:                             ; CODE XREF: sub_4082F0+AE↑j
.text:004083AE                 cmp     [esp+1Ch+var_D], 0
.text:004083B3                 mov     edx, [ebx+4]
.text:004083B6                 mov     ecx, [edx]
.text:004083B8                 jz      short loc_4083CF
.text:004083BA                 mov     dword ptr [edx], 0
.text:004083C0                 mov     edi, [edx+4]
.text:004083C3                 mov     [ebx+4], edi
.text:004083C6                 mov     edi, [esi+24h]
.text:004083C9                 mov     [edx+4], edi
.text:004083CC                 mov     [esi+24h], edx
.text:004083CF
.text:004083CF loc_4083CF:                             ; CODE XREF: sub_4082F0+C8↑j
.text:004083CF                 mov     eax, ecx
.text:004083D1                 jmp     short loc_408372
.text:004083D3 ; ---------------------------------------------------------------------------
.text:004083D3
.text:004083D3 loc_4083D3:                             ; CODE XREF: sub_4082F0+2C↑j
.text:004083D3                 call    abort
.text:004083D3 sub_4082F0      endp
.text:004083D3
.text:004083D3 ; ---------------------------------------------------------------------------
.text:004083D8                 db 18h dup(90h)
.text:004083F0
.text:004083F0 ; =============== S U B R O U T I N E =======================================
.text:004083F0
.text:004083F0
.text:004083F0 ; int __cdecl sub_4083F0(FILE *, int)
.text:004083F0 sub_4083F0      proc near               ; CODE XREF: sub_402250+6F1↑p
.text:004083F0
.text:004083F0 Stream          = dword ptr -2Ch
.text:004083F0 var_28          = dword ptr -28h
.text:004083F0 var_18          = dword ptr -18h
.text:004083F0 var_14          = dword ptr -14h
.text:004083F0 arg_0           = dword ptr  4
.text:004083F0 arg_4           = dword ptr  8
.text:004083F0
.text:004083F0                 push    ebp
.text:004083F1                 push    edi
.text:004083F2                 push    esi
.text:004083F3                 push    ebx
.text:004083F4                 sub     esp, 1Ch
.text:004083F7                 mov     edi, [esp+2Ch+arg_4]
.text:004083FB                 mov     ebp, [esp+2Ch+arg_0]
.text:004083FF                 lea     esi, [edi+0Ch]
.text:00408402                 lea     esi, [esi+0]
.text:00408409                 lea     edi, [edi+0]
.text:00408410
.text:00408410 loc_408410:                             ; CODE XREF: sub_4083F0+41↓j
.text:00408410                                         ; sub_4083F0+4B↓j
.text:00408410                 mov     [esp+2Ch+Stream], ebp ; Stream
.text:00408413                 call    fgetc
.text:00408418                 cmp     eax, 0FFFFFFFFh
.text:0040841B                 mov     ebx, eax
.text:0040841D                 jz      short loc_408455
.text:0040841F                 mov     edx, [esi+0Ch]
.text:00408422                 lea     ecx, [edx+1]
.text:00408425                 cmp     ecx, [esi+10h]
.text:00408428                 ja      short loc_408440
.text:0040842A
.text:0040842A loc_40842A:                             ; CODE XREF: sub_4083F0+63↓j
.text:0040842A                 mov     [edx], bl
.text:0040842C                 inc     dword ptr [esi+0Ch]
.text:0040842F                 test    ebx, ebx
.text:00408431                 jnz     short loc_408410
.text:00408433                 mov     [esp+2Ch+Stream], edi
.text:00408436                 call    sub_408670
.text:0040843B                 jmp     short loc_408410
.text:0040843B ; ---------------------------------------------------------------------------
.text:0040843D                 align 10h
.text:00408440
.text:00408440 loc_408440:                             ; CODE XREF: sub_4083F0+38↑j
.text:00408440                 mov     [esp+2Ch+var_28], 1
.text:00408448                 mov     [esp+2Ch+Stream], esi
.text:0040844B                 call    sub_4163E0
.text:00408450                 mov     edx, [esi+0Ch]
.text:00408453                 jmp     short loc_40842A
.text:00408455 ; ---------------------------------------------------------------------------
.text:00408455
.text:00408455 loc_408455:                             ; CODE XREF: sub_4083F0+2D↑j
.text:00408455                 mov     edx, [esi+0Ch]
.text:00408458                 cmp     edx, [esi+8]
.text:0040845B                 jz      short loc_408477
.text:0040845D                 lea     ecx, [edx+1]
.text:00408460                 cmp     ecx, [esi+10h]
.text:00408463                 ja      loc_40854B
.text:00408469
.text:00408469 loc_408469:                             ; CODE XREF: sub_4083F0+16E↓j
.text:00408469                 mov     byte ptr [edx], 0
.text:0040846C                 inc     dword ptr [esi+0Ch]
.text:0040846F                 mov     [esp+2Ch+Stream], edi
.text:00408472                 call    sub_408670
.text:00408477
.text:00408477 loc_408477:                             ; CODE XREF: sub_4083F0+6B↑j
.text:00408477                 lea     ebx, [edi+38h]
.text:0040847A                 mov     edx, [ebx+0Ch]
.text:0040847D                 mov     ecx, [ebx+10h]
.text:00408480                 lea     esi, [edx+4]
.text:00408483                 cmp     esi, ecx
.text:00408485                 ja      loc_408530
.text:0040848B
.text:0040848B loc_40848B:                             ; CODE XREF: sub_4083F0+156↓j
.text:0040848B                 mov     dword ptr [edx], 0
.text:00408491                 mov     esi, [ebx+8]
.text:00408494                 lea     eax, [edx+4]
.text:00408497                 mov     [ebx+0Ch], eax
.text:0040849A                 cmp     eax, esi
.text:0040849C                 mov     [esp+2Ch+var_14], esi
.text:004084A0                 jz      loc_408527
.text:004084A6
.text:004084A6 loc_4084A6:                             ; CODE XREF: sub_4083F0+13B↓j
.text:004084A6                 mov     esi, [ebx+18h]
.text:004084A9                 mov     edx, [ebx+0Ch]
.text:004084AC                 mov     eax, [ebx+4]
.text:004084AF                 add     edx, esi
.text:004084B1                 not     esi
.text:004084B3                 and     edx, esi
.text:004084B5                 mov     [ebx+0Ch], edx
.text:004084B8                 mov     esi, ecx
.text:004084BA                 sub     edx, eax
.text:004084BC                 sub     esi, eax
.text:004084BE                 cmp     edx, esi
.text:004084C0                 jle     short loc_4084C5
.text:004084C2                 mov     [ebx+0Ch], ecx
.text:004084C5
.text:004084C5 loc_4084C5:                             ; CODE XREF: sub_4083F0+D0↑j
.text:004084C5                 mov     ecx, [ebx+0Ch]
.text:004084C8                 mov     edx, [esp+2Ch+var_14]
.text:004084CC                 mov     [ebx+8], ecx
.text:004084CF                 lea     ecx, [edi+64h]
.text:004084D2                 mov     esi, [ecx+8]
.text:004084D5                 mov     [edi+4], edx
.text:004084D8                 mov     edx, [ecx+0Ch]
.text:004084DB                 cmp     edx, esi
.text:004084DD                 jz      short loc_408521
.text:004084DF
.text:004084DF loc_4084DF:                             ; CODE XREF: sub_4083F0+135↓j
.text:004084DF                 mov     ebx, [ecx+18h]
.text:004084E2                 mov     eax, [ecx+4]
.text:004084E5                 add     edx, ebx
.text:004084E7                 not     ebx
.text:004084E9                 and     edx, ebx
.text:004084EB                 mov     ebx, [ecx+10h]
.text:004084EE                 mov     [ecx+0Ch], edx
.text:004084F1                 sub     edx, eax
.text:004084F3                 mov     [esp+2Ch+var_18], ebx
.text:004084F7                 sub     ebx, eax
.text:004084F9                 cmp     edx, ebx
.text:004084FB                 jle     short loc_408504
.text:004084FD                 mov     edx, [esp+2Ch+var_18]
.text:00408501                 mov     [ecx+0Ch], edx
.text:00408504
.text:00408504 loc_408504:                             ; CODE XREF: sub_4083F0+10B↑j
.text:00408504                 mov     [edi+8], esi
.text:00408507                 mov     ebx, [ecx+0Ch]
.text:0040850A                 mov     eax, [ebp+0Ch]
.text:0040850D                 mov     [ecx+8], ebx
.text:00408510                 add     esp, 1Ch
.text:00408513                 shr     eax, 5
.text:00408516                 pop     ebx
.text:00408517                 xor     eax, 1
.text:0040851A                 and     eax, 1
.text:0040851D                 pop     esi
.text:0040851E                 pop     edi
.text:0040851F                 pop     ebp
.text:00408520                 retn
.text:00408521 ; ---------------------------------------------------------------------------
.text:00408521
.text:00408521 loc_408521:                             ; CODE XREF: sub_4083F0+ED↑j
.text:00408521                 or      byte ptr [ecx+28h], 2
.text:00408525                 jmp     short loc_4084DF
.text:00408527 ; ---------------------------------------------------------------------------
.text:00408527
.text:00408527 loc_408527:                             ; CODE XREF: sub_4083F0+B0↑j
.text:00408527                 or      byte ptr [ebx+28h], 2
.text:0040852B                 jmp     loc_4084A6
.text:00408530 ; ---------------------------------------------------------------------------
.text:00408530
.text:00408530 loc_408530:                             ; CODE XREF: sub_4083F0+95↑j
.text:00408530                 mov     [esp+2Ch+var_28], 4
.text:00408538                 mov     [esp+2Ch+Stream], ebx
.text:0040853B                 call    sub_4163E0
.text:00408540                 mov     edx, [ebx+0Ch]
.text:00408543                 mov     ecx, [ebx+10h]
.text:00408546                 jmp     loc_40848B
.text:0040854B ; ---------------------------------------------------------------------------
.text:0040854B
.text:0040854B loc_40854B:                             ; CODE XREF: sub_4083F0+73↑j
.text:0040854B                 mov     [esp+2Ch+var_28], 1
.text:00408553                 mov     [esp+2Ch+Stream], esi
.text:00408556                 call    sub_4163E0
.text:0040855B                 mov     edx, [esi+0Ch]
.text:0040855E                 jmp     loc_408469
.text:0040855E sub_4083F0      endp
.text:0040855E
.text:0040855E ; ---------------------------------------------------------------------------
.text:00408563                 align 10h
.text:00408570
.text:00408570 ; =============== S U B R O U T I N E =======================================
.text:00408570
.text:00408570
.text:00408570 sub_408570      proc near               ; CODE XREF: sub_402250+6E5↑p
.text:00408570
.text:00408570 var_1C          = dword ptr -1Ch
.text:00408570 var_18          = dword ptr -18h
.text:00408570 var_14          = dword ptr -14h
.text:00408570 var_10          = dword ptr -10h
.text:00408570 var_C           = dword ptr -0Ch
.text:00408570 var_4           = dword ptr -4
.text:00408570 arg_0           = dword ptr  4
.text:00408570
.text:00408570                 sub     esp, 1Ch
.text:00408573                 mov     [esp+1Ch+var_4], ebx
.text:00408577                 mov     ebx, [esp+1Ch+arg_0]
.text:0040857B                 lea     edx, [ebx+0Ch]
.text:0040857E                 mov     dword ptr [ebx], 0
.text:00408584                 mov     dword ptr [ebx+4], 0
.text:0040858B                 mov     dword ptr [ebx+8], 0
.text:00408592                 mov     [esp+1Ch+var_1C], edx
.text:00408595                 mov     [esp+1Ch+var_C], offset free
.text:0040859D                 mov     [esp+1Ch+var_10], offset malloc
.text:004085A5                 mov     [esp+1Ch+var_14], 0
.text:004085AD                 mov     [esp+1Ch+var_18], 0
.text:004085B5                 call    sub_4162B0
.text:004085BA                 mov     [esp+1Ch+var_C], offset free
.text:004085C2                 lea     edx, [ebx+38h]
.text:004085C5                 add     ebx, 64h ; 'd'
.text:004085C8                 mov     [esp+1Ch+var_1C], edx
.text:004085CB                 mov     [esp+1Ch+var_10], offset malloc
.text:004085D3                 mov     [esp+1Ch+var_14], 0
.text:004085DB                 mov     [esp+1Ch+var_18], 0
.text:004085E3                 call    sub_4162B0
.text:004085E8                 mov     [esp+1Ch+var_1C], ebx
.text:004085EB                 mov     [esp+1Ch+var_C], offset free
.text:004085F3                 mov     [esp+1Ch+var_10], offset malloc
.text:004085FB                 mov     [esp+1Ch+var_14], 0
.text:00408603                 mov     [esp+1Ch+var_18], 0
.text:0040860B                 call    sub_4162B0
.text:00408610                 mov     ebx, [esp+1Ch+var_4]
.text:00408614                 add     esp, 1Ch
.text:00408617                 retn
.text:00408617 sub_408570      endp
.text:00408617
.text:00408617 ; ---------------------------------------------------------------------------
.text:00408618                 align 10h
.text:00408620
.text:00408620 ; =============== S U B R O U T I N E =======================================
.text:00408620
.text:00408620
.text:00408620 sub_408620      proc near               ; CODE XREF: sub_402250+88B↑p
.text:00408620
.text:00408620 var_C           = dword ptr -0Ch
.text:00408620 var_8           = dword ptr -8
.text:00408620 var_4           = dword ptr -4
.text:00408620 arg_0           = dword ptr  4
.text:00408620
.text:00408620                 sub     esp, 0Ch
.text:00408623                 mov     [esp+0Ch+var_4], ebx
.text:00408627                 mov     ebx, [esp+0Ch+arg_0]
.text:0040862B                 mov     [esp+0Ch+var_8], 0
.text:00408633                 lea     edx, [ebx+0Ch]
.text:00408636                 mov     [esp+0Ch+var_C], edx
.text:00408639                 call    sub_4165D0
.text:0040863E                 mov     [esp+0Ch+var_8], 0
.text:00408646                 lea     edx, [ebx+38h]
.text:00408649                 add     ebx, 64h ; 'd'
.text:0040864C                 mov     [esp+0Ch+var_C], edx
.text:0040864F                 call    sub_4165D0
.text:00408654                 mov     [esp+0Ch+var_C], ebx
.text:00408657                 mov     [esp+0Ch+var_8], 0
.text:0040865F                 call    sub_4165D0
.text:00408664                 mov     ebx, [esp+0Ch+var_4]
.text:00408668                 add     esp, 0Ch
.text:0040866B                 retn
.text:0040866B sub_408620      endp
.text:0040866B
.text:0040866B ; ---------------------------------------------------------------------------
.text:0040866C                 align 10h
.text:00408670
.text:00408670 ; =============== S U B R O U T I N E =======================================
.text:00408670
.text:00408670
.text:00408670 sub_408670      proc near               ; CODE XREF: sub_4083F0+46↑p
.text:00408670                                         ; sub_4083F0+82↑p
.text:00408670
.text:00408670 var_2C          = dword ptr -2Ch
.text:00408670 Src             = dword ptr -28h
.text:00408670 Size            = dword ptr -24h
.text:00408670 var_14          = dword ptr -14h
.text:00408670 arg_0           = dword ptr  4
.text:00408670
.text:00408670                 push    ebp
.text:00408671                 push    edi
.text:00408672                 push    esi
.text:00408673                 push    ebx
.text:00408674                 sub     esp, 1Ch
.text:00408677                 mov     edi, [esp+2Ch+arg_0]
.text:0040867B                 lea     ecx, [edi+0Ch]
.text:0040867E                 mov     edx, [ecx+0Ch]
.text:00408681                 mov     esi, [ecx+8]
.text:00408684                 mov     ebx, edx
.text:00408686                 sub     ebx, esi
.text:00408688                 dec     ebx
.text:00408689                 mov     [esp+2Ch+var_14], ebx
.text:0040868D                 cmp     edx, esi
.text:0040868F                 jz      loc_408735
.text:00408695
.text:00408695 loc_408695:                             ; CODE XREF: sub_408670+C9↓j
.text:00408695                 mov     ebx, [ecx+18h]
.text:00408698                 mov     eax, [ecx+4]
.text:0040869B                 add     edx, ebx
.text:0040869D                 not     ebx
.text:0040869F                 and     edx, ebx
.text:004086A1                 mov     ebx, [ecx+10h]
.text:004086A4                 mov     [ecx+0Ch], edx
.text:004086A7                 sub     edx, eax
.text:004086A9                 mov     ebp, ebx
.text:004086AB                 sub     ebp, eax
.text:004086AD                 cmp     edx, ebp
.text:004086AF                 jle     short loc_4086B4
.text:004086B1                 mov     [ecx+0Ch], ebx
.text:004086B4
.text:004086B4 loc_4086B4:                             ; CODE XREF: sub_408670+3F↑j
.text:004086B4                 mov     edx, [ecx+0Ch]
.text:004086B7                 lea     ebx, [edi+38h]
.text:004086BA                 mov     [ecx+8], edx
.text:004086BD                 mov     edx, [ebx+0Ch]
.text:004086C0                 lea     ecx, [edx+4]
.text:004086C3                 cmp     ecx, [ebx+10h]
.text:004086C6                 ja      short loc_408720
.text:004086C8
.text:004086C8 loc_4086C8:                             ; CODE XREF: sub_408670+C3↓j
.text:004086C8                 mov     [edx], esi
.text:004086CA                 lea     ebp, [edx+4]
.text:004086CD                 mov     [ebx+0Ch], ebp
.text:004086D0                 lea     ebx, [edi+64h]
.text:004086D3                 mov     edx, [ebx+0Ch]
.text:004086D6                 lea     esi, [edx+4]
.text:004086D9                 cmp     esi, [ebx+10h]
.text:004086DC                 ja      short loc_408704
.text:004086DE
.text:004086DE loc_4086DE:                             ; CODE XREF: sub_408670+A7↓j
.text:004086DE                 mov     [esp+2Ch+Size], 4 ; Size
.text:004086E6                 lea     ecx, [esp+2Ch+var_14]
.text:004086EA                 mov     [esp+2Ch+Src], ecx ; Src
.text:004086EE                 mov     [esp+2Ch+var_2C], edx ; void *
.text:004086F1                 call    memcpy
.text:004086F6                 add     dword ptr [ebx+0Ch], 4
.text:004086FA                 inc     dword ptr [edi]
.text:004086FC                 add     esp, 1Ch
.text:004086FF                 pop     ebx
.text:00408700                 pop     esi
.text:00408701                 pop     edi
.text:00408702                 pop     ebp
.text:00408703                 retn
.text:00408704 ; ---------------------------------------------------------------------------
.text:00408704
.text:00408704 loc_408704:                             ; CODE XREF: sub_408670+6C↑j
.text:00408704                 mov     [esp+2Ch+Src], 4
.text:0040870C                 mov     [esp+2Ch+var_2C], ebx
.text:0040870F                 call    sub_4163E0
.text:00408714                 mov     edx, [ebx+0Ch]
.text:00408717                 jmp     short loc_4086DE
.text:00408717 ; ---------------------------------------------------------------------------
.text:00408719                 align 10h
.text:00408720
.text:00408720 loc_408720:                             ; CODE XREF: sub_408670+56↑j
.text:00408720                 mov     [esp+2Ch+Src], 4
.text:00408728                 mov     [esp+2Ch+var_2C], ebx
.text:0040872B                 call    sub_4163E0
.text:00408730                 mov     edx, [ebx+0Ch]
.text:00408733                 jmp     short loc_4086C8
.text:00408735 ; ---------------------------------------------------------------------------
.text:00408735
.text:00408735 loc_408735:                             ; CODE XREF: sub_408670+1F↑j
.text:00408735                 or      byte ptr [ecx+28h], 2
.text:00408739                 jmp     loc_408695
.text:00408739 sub_408670      endp
.text:00408739
.text:00408739 ; ---------------------------------------------------------------------------
.text:0040873E                 align 10h
.text:00408740 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00408740                                         ; DATA XREF: .data:Buffer↓o
.text:00408772 ; const char aSSS[]
.text:00408772 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_408A30+50↓o
.text:0040877E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040877E                                         ; DATA XREF: sub_408A30:loc_408AD1↓o
.text:0040878E                 align 20h
.text:004087A0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:004087A0                                         ; DATA XREF: sub_408A30+100↓o
.text:004087A0                 db 'ere is NO',0Ah
.text:004087A0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:004087A0                 db 'R PURPOSE.',0Ah,0
.text:00408838 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00408838                                         ; DATA XREF: sub_408A30:loc_408B71↓o
.text:0040884F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040884F                                         ; DATA XREF: sub_408A30:loc_408B7D↓o
.text:0040886B                 align 20h
.text:00408880 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00408880                                         ; DATA XREF: sub_408A30:loc_408B89↓o
.text:00408880                 db 'and %s.',0Ah,0
.text:004088A0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:004088A0                                         ; DATA XREF: sub_408A30:loc_408B95↓o
.text:004088A0                 db '%s, and %s.',0Ah,0
.text:004088C4                 align 20h
.text:004088E0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:004088E0                                         ; DATA XREF: sub_408A30:loc_408BA1↓o
.text:004088E0                 db '%s, %s, and %s.',0Ah,0
.text:00408908                 align 20h
.text:00408920 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00408920                                         ; DATA XREF: sub_408A30:loc_408BAD↓o
.text:00408920                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040894C                 align 20h
.text:00408960 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00408960                                         ; DATA XREF: sub_408A30:loc_408BB9↓o
.text:00408960                 db '%s, %s, %s, %s,',0Ah
.text:00408960                 db 'and %s.',0Ah,0
.text:00408990                 align 20h
.text:004089A0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:004089A0                                         ; DATA XREF: sub_408A30:loc_408BC5↓o
.text:004089A0                 db '%s, %s, %s, %s,',0Ah
.text:004089A0                 db '%s, and %s.',0Ah,0
.text:004089D4                 align 10h
.text:004089E0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:004089E0                                         ; DATA XREF: sub_408A30:def_408A9D↓o
.text:004089E0                 db '%s, %s, %s, %s,',0Ah
.text:004089E0                 db '%s, %s, and others.',0Ah,0
.text:00408A1C ; const char aSS[]
.text:00408A1C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_408A30+1B5↓o
.text:00408A23                 align 10h
.text:00408A30
.text:00408A30 ; =============== S U B R O U T I N E =======================================
.text:00408A30
.text:00408A30
.text:00408A30 ; int __cdecl sub_408A30(FILE *, FILE *, int, int, va_list)
.text:00408A30 sub_408A30      proc near               ; CODE XREF: sub_408C00+2A↓p
.text:00408A30
.text:00408A30 Stream          = dword ptr -2Ch
.text:00408A30 Format          = dword ptr -28h
.text:00408A30 ArgList         = dword ptr -24h
.text:00408A30 var_20          = dword ptr -20h
.text:00408A30 var_1C          = dword ptr -1Ch
.text:00408A30 var_14          = dword ptr -14h
.text:00408A30 arg_0           = dword ptr  4
.text:00408A30 arg_4           = dword ptr  8
.text:00408A30 arg_8           = dword ptr  0Ch
.text:00408A30 arg_C           = dword ptr  10h
.text:00408A30 arg_10          = dword ptr  14h
.text:00408A30
.text:00408A30                 push    ebp
.text:00408A31                 push    edi
.text:00408A32                 push    esi
.text:00408A33                 push    ebx
.text:00408A34                 sub     esp, 1Ch
.text:00408A37                 xor     ebx, ebx
.text:00408A39                 mov     edi, [esp+2Ch+arg_10]
.text:00408A3D                 mov     edx, [esp+2Ch+arg_8]
.text:00408A41                 mov     esi, [esp+2Ch+arg_0]
.text:00408A45                 mov     eax, [edi]
.text:00408A47                 mov     ecx, [esp+2Ch+arg_4]
.text:00408A4B                 mov     [esp+2Ch+var_14], edx
.text:00408A4F                 mov     ebp, [esp+2Ch+arg_C]
.text:00408A53                 lea     edx, [edi+4]
.text:00408A56                 test    eax, eax
.text:00408A58                 jz      short loc_408A6C
.text:00408A5A                 lea     esi, [esi+0]
.text:00408A60
.text:00408A60 loc_408A60:                             ; CODE XREF: sub_408A30+3A↓j
.text:00408A60                 mov     eax, edx
.text:00408A62                 inc     ebx
.text:00408A63                 mov     eax, [eax]
.text:00408A65                 add     edx, 4
.text:00408A68                 test    eax, eax
.text:00408A6A                 jnz     short loc_408A60
.text:00408A6C
.text:00408A6C loc_408A6C:                             ; CODE XREF: sub_408A30+28↑j
.text:00408A6C                 test    ecx, ecx
.text:00408A6E                 jz      loc_408BDD
.text:00408A74                 mov     [esp+2Ch+var_1C], ebp
.text:00408A78                 mov     edx, [esp+2Ch+var_14]
.text:00408A7C                 mov     [esp+2Ch+ArgList], ecx
.text:00408A80                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00408A88                 mov     [esp+2Ch+var_20], edx
.text:00408A8C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00408A8F                 call    fprintf
.text:00408A94
.text:00408A94 loc_408A94:                             ; CODE XREF: sub_408A30+1C9↓j
.text:00408A94                 cmp     ebx, 9          ; switch 10 cases
.text:00408A97                 ja      def_408A9D      ; jumptable 00408A9D default case
.text:00408A9D                 jmp     ds:jpt_408A9D[ebx*4] ; switch jump
.text:00408A9D ; ---------------------------------------------------------------------------
.text:00408AA4 jpt_408A9D      dd offset loc_408ACC    ; DATA XREF: sub_408A30+6D↑r
.text:00408AA4                 dd offset loc_408AD1    ; jump table for switch statement
.text:00408AA4                 dd offset loc_408B71
.text:00408AA4                 dd offset loc_408B7D
.text:00408AA4                 dd offset loc_408B89
.text:00408AA4                 dd offset loc_408B95
.text:00408AA4                 dd offset loc_408BA1
.text:00408AA4                 dd offset loc_408BAD
.text:00408AA4                 dd offset loc_408BB9
.text:00408AA4                 dd offset loc_408BC5
.text:00408ACC ; ---------------------------------------------------------------------------
.text:00408ACC
.text:00408ACC loc_408ACC:                             ; CODE XREF: sub_408A30+6D↑j
.text:00408ACC                                         ; DATA XREF: sub_408A30:jpt_408A9D↑o
.text:00408ACC                 call    abort           ; jumptable 00408A9D case 0
.text:00408AD1 ; ---------------------------------------------------------------------------
.text:00408AD1
.text:00408AD1 loc_408AD1:                             ; CODE XREF: sub_408A30+6D↑j
.text:00408AD1                                         ; DATA XREF: sub_408A30:jpt_408A9D↑o
.text:00408AD1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00408A9D case 1
.text:00408AD8                 nop
.text:00408AD9                 lea     esi, [esi+0]
.text:00408AE0
.text:00408AE0 loc_408AE0:                             ; CODE XREF: sub_408A30+148↓j
.text:00408AE0                                         ; sub_408A30+154↓j ...
.text:00408AE0                 call    ds:libintl_gettext
.text:00408AE6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00408AEA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00408AED                 mov     [esp+2Ch+Format], eax ; Format
.text:00408AF1                 call    vfprintf
.text:00408AF6                 mov     ebx, [esi+4]
.text:00408AF9                 dec     ebx
.text:00408AFA                 test    ebx, ebx
.text:00408AFC                 mov     [esi+4], ebx
.text:00408AFF                 js      short loc_408B5F
.text:00408B01                 mov     edi, [esi]
.text:00408B03                 mov     byte ptr [edi], 0Ah
.text:00408B06                 inc     dword ptr [esi]
.text:00408B08
.text:00408B08 loc_408B08:                             ; CODE XREF: sub_408A30+13F↓j
.text:00408B08                 mov     [esp+2Ch+Format], esi ; Stream
.text:00408B0C                 mov     edx, Buffer
.text:00408B12                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00408B15                 call    fputs
.text:00408B1A                 mov     ebp, [esi+4]
.text:00408B1D                 dec     ebp
.text:00408B1E                 test    ebp, ebp
.text:00408B20                 mov     [esi+4], ebp
.text:00408B23                 js      short loc_408B4D
.text:00408B25                 mov     ecx, [esi]
.text:00408B27                 mov     byte ptr [ecx], 0Ah
.text:00408B2A                 inc     dword ptr [esi]
.text:00408B2C
.text:00408B2C loc_408B2C:                             ; CODE XREF: sub_408A30+12D↓j
.text:00408B2C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00408B30                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00408B37                 call    ds:libintl_gettext
.text:00408B3D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00408B41                 add     esp, 1Ch
.text:00408B44                 pop     ebx
.text:00408B45                 pop     esi
.text:00408B46                 pop     edi
.text:00408B47                 pop     ebp
.text:00408B48                 jmp     fputs
.text:00408B4D ; ---------------------------------------------------------------------------
.text:00408B4D
.text:00408B4D loc_408B4D:                             ; CODE XREF: sub_408A30+F3↑j
.text:00408B4D                 mov     [esp+2Ch+Format], esi ; File
.text:00408B51                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00408B58                 call    _flsbuf
.text:00408B5D                 jmp     short loc_408B2C
.text:00408B5F ; ---------------------------------------------------------------------------
.text:00408B5F
.text:00408B5F loc_408B5F:                             ; CODE XREF: sub_408A30+CF↑j
.text:00408B5F                 mov     [esp+2Ch+Format], esi ; File
.text:00408B63                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00408B6A                 call    _flsbuf
.text:00408B6F                 jmp     short loc_408B08
.text:00408B71 ; ---------------------------------------------------------------------------
.text:00408B71
.text:00408B71 loc_408B71:                             ; CODE XREF: sub_408A30+6D↑j
.text:00408B71                                         ; DATA XREF: sub_408A30:jpt_408A9D↑o
.text:00408B71                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00408A9D case 2
.text:00408B78                 jmp     loc_408AE0
.text:00408B7D ; ---------------------------------------------------------------------------
.text:00408B7D
.text:00408B7D loc_408B7D:                             ; CODE XREF: sub_408A30+6D↑j
.text:00408B7D                                         ; DATA XREF: sub_408A30:jpt_408A9D↑o
.text:00408B7D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00408A9D case 3
.text:00408B84                 jmp     loc_408AE0
.text:00408B89 ; ---------------------------------------------------------------------------
.text:00408B89
.text:00408B89 loc_408B89:                             ; CODE XREF: sub_408A30+6D↑j
.text:00408B89                                         ; DATA XREF: sub_408A30:jpt_408A9D↑o
.text:00408B89                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00408A9D case 4
.text:00408B90                 jmp     loc_408AE0
.text:00408B95 ; ---------------------------------------------------------------------------
.text:00408B95
.text:00408B95 loc_408B95:                             ; CODE XREF: sub_408A30+6D↑j
.text:00408B95                                         ; DATA XREF: sub_408A30:jpt_408A9D↑o
.text:00408B95                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00408A9D case 5
.text:00408B9C                 jmp     loc_408AE0
.text:00408BA1 ; ---------------------------------------------------------------------------
.text:00408BA1
.text:00408BA1 loc_408BA1:                             ; CODE XREF: sub_408A30+6D↑j
.text:00408BA1                                         ; DATA XREF: sub_408A30:jpt_408A9D↑o
.text:00408BA1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00408A9D case 6
.text:00408BA8                 jmp     loc_408AE0
.text:00408BAD ; ---------------------------------------------------------------------------
.text:00408BAD
.text:00408BAD loc_408BAD:                             ; CODE XREF: sub_408A30+6D↑j
.text:00408BAD                                         ; DATA XREF: sub_408A30:jpt_408A9D↑o
.text:00408BAD                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00408A9D case 7
.text:00408BB4                 jmp     loc_408AE0
.text:00408BB9 ; ---------------------------------------------------------------------------
.text:00408BB9
.text:00408BB9 loc_408BB9:                             ; CODE XREF: sub_408A30+6D↑j
.text:00408BB9                                         ; DATA XREF: sub_408A30:jpt_408A9D↑o
.text:00408BB9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00408A9D case 8
.text:00408BC0                 jmp     loc_408AE0
.text:00408BC5 ; ---------------------------------------------------------------------------
.text:00408BC5
.text:00408BC5 loc_408BC5:                             ; CODE XREF: sub_408A30+6D↑j
.text:00408BC5                                         ; DATA XREF: sub_408A30:jpt_408A9D↑o
.text:00408BC5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00408A9D case 9
.text:00408BCC                 jmp     loc_408AE0
.text:00408BD1 ; ---------------------------------------------------------------------------
.text:00408BD1
.text:00408BD1 def_408A9D:                             ; CODE XREF: sub_408A30+67↑j
.text:00408BD1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00408A9D default case
.text:00408BD8                 jmp     loc_408AE0
.text:00408BDD ; ---------------------------------------------------------------------------
.text:00408BDD
.text:00408BDD loc_408BDD:                             ; CODE XREF: sub_408A30+3E↑j
.text:00408BDD                 mov     [esp+2Ch+var_20], ebp
.text:00408BE1                 mov     ecx, [esp+2Ch+var_14]
.text:00408BE5                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:00408BED                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00408BF0                 mov     [esp+2Ch+ArgList], ecx
.text:00408BF4                 call    fprintf
.text:00408BF9                 jmp     loc_408A94
.text:00408BF9 sub_408A30      endp
.text:00408BF9
.text:00408BF9 ; ---------------------------------------------------------------------------
.text:00408BFE                 align 10h
.text:00408C00
.text:00408C00 ; =============== S U B R O U T I N E =======================================
.text:00408C00
.text:00408C00
.text:00408C00 ; int __cdecl sub_408C00(FILE *, FILE *, int, int, char)
.text:00408C00 sub_408C00      proc near               ; CODE XREF: sub_402250+329↑p
.text:00408C00
.text:00408C00 var_1C          = dword ptr -1Ch
.text:00408C00 var_18          = dword ptr -18h
.text:00408C00 var_14          = dword ptr -14h
.text:00408C00 var_10          = dword ptr -10h
.text:00408C00 var_C           = dword ptr -0Ch
.text:00408C00 arg_0           = dword ptr  4
.text:00408C00 arg_4           = dword ptr  8
.text:00408C00 arg_8           = dword ptr  0Ch
.text:00408C00 arg_C           = dword ptr  10h
.text:00408C00 arg_10          = byte ptr  14h
.text:00408C00
.text:00408C00                 sub     esp, 1Ch
.text:00408C03                 mov     edx, [esp+1Ch+arg_C]
.text:00408C07                 lea     ecx, [esp+1Ch+arg_10]
.text:00408C0B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:00408C0F                 mov     ecx, [esp+1Ch+arg_8]
.text:00408C13                 mov     [esp+1Ch+var_10], edx ; int
.text:00408C17                 mov     edx, [esp+1Ch+arg_4]
.text:00408C1B                 mov     [esp+1Ch+var_14], ecx ; int
.text:00408C1F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00408C23                 mov     edx, [esp+1Ch+arg_0]
.text:00408C27                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:00408C2A                 call    sub_408A30
.text:00408C2F                 add     esp, 1Ch
.text:00408C32                 retn
.text:00408C32 sub_408C00      endp
.text:00408C32
.text:00408C32 ; ---------------------------------------------------------------------------
.text:00408C33                 align 10h
.text:00408C40
.text:00408C40 ; =============== S U B R O U T I N E =======================================
.text:00408C40
.text:00408C40
.text:00408C40 sub_408C40      proc near               ; CODE XREF: sub_403100+2D↑p
.text:00408C40
.text:00408C40 var_2C          = dword ptr -2Ch
.text:00408C40 var_28          = dword ptr -28h
.text:00408C40 var_24          = dword ptr -24h
.text:00408C40 var_20          = dword ptr -20h
.text:00408C40 var_1C          = dword ptr -1Ch
.text:00408C40 var_15          = byte ptr -15h
.text:00408C40 var_14          = dword ptr -14h
.text:00408C40 arg_0           = dword ptr  4
.text:00408C40 arg_4           = dword ptr  8
.text:00408C40
.text:00408C40                 push    ebp
.text:00408C41                 xor     eax, eax
.text:00408C43                 push    edi
.text:00408C44                 push    esi
.text:00408C45                 push    ebx
.text:00408C46                 sub     esp, 1Ch
.text:00408C49                 mov     edx, [esp+2Ch+arg_0]
.text:00408C4D                 mov     ecx, [edx+8]
.text:00408C50                 mov     [esp+2Ch+var_14], ecx
.text:00408C54                 mov     ebx, [esp+2Ch+var_14]
.text:00408C58                 test    ebx, ebx
.text:00408C5A                 jz      short loc_408CA9
.text:00408C5C                 mov     ebp, [edx]
.text:00408C5E                 xor     edi, edi
.text:00408C60                 mov     edx, [ebp+4]
.text:00408C63                 shr     edx, 1Dh
.text:00408C66                 and     dl, 1
.text:00408C69                 cmp     edi, [esp+2Ch+var_14]
.text:00408C6D                 mov     [esp+2Ch+var_15], dl
.text:00408C71                 jnb     short loc_408CA4
.text:00408C73                 lea     esi, [esi+0]
.text:00408C79                 lea     edi, [edi+0]
.text:00408C80
.text:00408C80 loc_408C80:                             ; CODE XREF: sub_408C40+62↓j
.text:00408C80                 movzx   eax, [esp+2Ch+var_15]
.text:00408C85                 mov     esi, [ebp+edi*8+0]
.text:00408C89                 mov     [esp+2Ch+var_1C], esi
.text:00408C8D                 mov     esi, [ebp+edi*8+4]
.text:00408C91                 mov     ebx, esi
.text:00408C93                 shr     ebx, 1Dh
.text:00408C96                 and     ebx, 1
.text:00408C99                 cmp     eax, ebx
.text:00408C9B                 jz      short loc_408CB1
.text:00408C9D
.text:00408C9D loc_408C9D:                             ; CODE XREF: sub_408C40+E5↓j
.text:00408C9D                                         ; sub_408C40+F2↓j
.text:00408C9D                 inc     edi
.text:00408C9E                 cmp     edi, [esp+2Ch+var_14]
.text:00408CA2                 jb      short loc_408C80
.text:00408CA4
.text:00408CA4 loc_408CA4:                             ; CODE XREF: sub_408C40+31↑j
.text:00408CA4                 movzx   eax, [esp+2Ch+var_15]
.text:00408CA9
.text:00408CA9 loc_408CA9:                             ; CODE XREF: sub_408C40+1A↑j
.text:00408CA9                 add     esp, 1Ch
.text:00408CAC                 pop     ebx
.text:00408CAD                 pop     esi
.text:00408CAE                 pop     edi
.text:00408CAF                 pop     ebp
.text:00408CB0                 retn
.text:00408CB1 ; ---------------------------------------------------------------------------
.text:00408CB1
.text:00408CB1 loc_408CB1:                             ; CODE XREF: sub_408C40+5B↑j
.text:00408CB1                 mov     [esp+2Ch+var_20], offset dword_40D480
.text:00408CB9                 test    esi, 10000000h
.text:00408CBF                 jnz     short loc_408CC9
.text:00408CC1                 mov     [esp+2Ch+var_20], offset sub_409050
.text:00408CC9
.text:00408CC9 loc_408CC9:                             ; CODE XREF: sub_408C40+7F↑j
.text:00408CC9                 mov     [esp+2Ch+var_24], esi
.text:00408CCD                 mov     ecx, [esp+2Ch+var_1C]
.text:00408CD1                 mov     edx, [esp+2Ch+arg_4]
.text:00408CD5                 mov     [esp+2Ch+var_2C], ecx
.text:00408CD8                 mov     [esp+2Ch+var_28], edx
.text:00408CDC                 call    [esp+2Ch+var_20]
.text:00408CE0                 test    eax, eax
.text:00408CE2                 setz    cl
.text:00408CE5                 test    esi, 40000000h
.text:00408CEB                 jnz     short loc_408D30
.text:00408CED                 mov     edx, [esp+2Ch+arg_4]
.text:00408CF1                 movzx   eax, byte ptr [edx]
.text:00408CF4                 test    al, al
.text:00408CF6                 jz      short loc_408D30
.text:00408CF8                 test    cl, cl
.text:00408CFA                 jnz     short loc_408D20
.text:00408CFC                 lea     esi, [esi+0]
.text:00408D00
.text:00408D00 loc_408D00:                             ; CODE XREF: sub_408C40+D2↓j
.text:00408D00                 cmp     al, 2Fh ; '/'
.text:00408D02                 lea     ebx, [edx+1]
.text:00408D05                 jz      short loc_408D40
.text:00408D07
.text:00408D07 loc_408D07:                             ; CODE XREF: sub_408C40+11E↓j
.text:00408D07                                         ; sub_408C40+123↓j
.text:00408D07                 movzx   eax, byte ptr [ebx]
.text:00408D0A                 mov     edx, ebx
.text:00408D0C                 test    al, al
.text:00408D0E                 jz      short loc_408D30
.text:00408D10                 test    cl, cl
.text:00408D12                 jz      short loc_408D00
.text:00408D14                 lea     esi, [esi+0]
.text:00408D1A                 lea     edi, [edi+0]
.text:00408D20
.text:00408D20 loc_408D20:                             ; CODE XREF: sub_408C40+BA↑j
.text:00408D20                                         ; sub_408C40+F8↓j
.text:00408D20                 xor     [esp+2Ch+var_15], 1
.text:00408D25                 jmp     loc_408C9D
.text:00408D25 ; ---------------------------------------------------------------------------
.text:00408D2A                 align 10h
.text:00408D30
.text:00408D30 loc_408D30:                             ; CODE XREF: sub_408C40+AB↑j
.text:00408D30                                         ; sub_408C40+B6↑j ...
.text:00408D30                 test    cl, cl
.text:00408D32                 jz      loc_408C9D
.text:00408D38                 jmp     short loc_408D20
.text:00408D38 ; ---------------------------------------------------------------------------
.text:00408D3A                 align 10h
.text:00408D40
.text:00408D40 loc_408D40:                             ; CODE XREF: sub_408C40+C5↑j
.text:00408D40                 cmp     byte ptr [edx+1], 2Fh ; '/'
.text:00408D44                 jz      short loc_408D60
.text:00408D46                 mov     [esp+2Ch+var_24], esi
.text:00408D4A                 mov     ecx, [esp+2Ch+var_1C]
.text:00408D4E                 mov     [esp+2Ch+var_28], ebx
.text:00408D52                 mov     [esp+2Ch+var_2C], ecx
.text:00408D55                 call    [esp+2Ch+var_20]
.text:00408D59                 test    eax, eax
.text:00408D5B                 setz    cl
.text:00408D5E                 jmp     short loc_408D07
.text:00408D60 ; ---------------------------------------------------------------------------
.text:00408D60
.text:00408D60 loc_408D60:                             ; CODE XREF: sub_408C40+104↑j
.text:00408D60                 lea     ebx, [edx+1]
.text:00408D63                 jmp     short loc_408D07
.text:00408D63 sub_408C40      endp
.text:00408D63
.text:00408D65
.text:00408D65 ; =============== S U B R O U T I N E =======================================
.text:00408D65
.text:00408D65
.text:00408D65 sub_408D65      proc near               ; DATA XREF: sub_408D70:loc_408F63↓o
.text:00408D65                 jb      short $+2
.text:00408D67
.text:00408D67 loc_408D67:                             ; CODE XREF: sub_408D65↑j
.text:00408D67                 mov     esi, esi
.text:00408D69                 lea     edi, [edi+0]
.text:00408D69 sub_408D65      endp
.text:00408D69
.text:00408D70
.text:00408D70 ; =============== S U B R O U T I N E =======================================
.text:00408D70
.text:00408D70
.text:00408D70 ; int __cdecl sub_408D70(int, int, char *FileName, int, char)
.text:00408D70 sub_408D70      proc near               ; CODE XREF: sub_402250+3EC↑p
.text:00408D70
.text:00408D70 C               = dword ptr -2Ch
.text:00408D70 Type            = dword ptr -28h
.text:00408D70 var_24          = dword ptr -24h
.text:00408D70 var_20          = dword ptr -20h
.text:00408D70 var_1C          = dword ptr -1Ch
.text:00408D70 var_16          = byte ptr -16h
.text:00408D70 var_15          = byte ptr -15h
.text:00408D70 var_14          = dword ptr -14h
.text:00408D70 arg_0           = dword ptr  4
.text:00408D70 arg_4           = dword ptr  8
.text:00408D70 FileName        = dword ptr  0Ch
.text:00408D70 arg_C           = dword ptr  10h
.text:00408D70 arg_10          = byte ptr  14h
.text:00408D70
.text:00408D70                 push    ebp
.text:00408D71                 push    edi
.text:00408D72                 push    esi
.text:00408D73                 push    ebx
.text:00408D74                 sub     esp, 1Ch
.text:00408D77                 mov     eax, [esp+2Ch+FileName]
.text:00408D7B                 movzx   ecx, [esp+2Ch+arg_10]
.text:00408D80                 mov     [esp+2Ch+var_16], 0
.text:00408D85                 mov     [esp+2Ch+var_15], cl
.text:00408D89                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00408D8C                 jz      loc_408F87
.text:00408D92
.text:00408D92 loc_408D92:                             ; CODE XREF: sub_408D70+21B↓j
.text:00408D92                                         ; sub_408D70+226↓j
.text:00408D92                 mov     [esp+2Ch+var_14], 0
.text:00408D9A                 xor     ebp, ebp
.text:00408D9C                 xor     edi, edi
.text:00408D9E                 cmp     [esp+2Ch+var_16], 0
.text:00408DA3                 mov     [esp+2Ch+var_20], 0
.text:00408DAB                 jz      loc_408F63
.text:00408DB1                 mov     esi, ds:_iob
.text:00408DB7                 mov     esi, esi
.text:00408DB9                 lea     edi, [edi+0]
.text:00408DC0
.text:00408DC0 loc_408DC0:                             ; CODE XREF: sub_408D70+76↓j
.text:00408DC0                                         ; sub_408D70+20C↓j
.text:00408DC0                 mov     ecx, [esi+4]
.text:00408DC3                 dec     ecx
.text:00408DC4                 test    ecx, ecx
.text:00408DC6                 mov     [esi+4], ecx
.text:00408DC9                 js      loc_408F54
.text:00408DCF                 mov     edx, [esi]
.text:00408DD1                 movzx   ebx, byte ptr [edx]
.text:00408DD4                 inc     edx
.text:00408DD5                 mov     [esi], edx
.text:00408DD7
.text:00408DD7 loc_408DD7:                             ; CODE XREF: sub_408D70+1EE↓j
.text:00408DD7                 cmp     ebx, 0FFFFFFFFh
.text:00408DDA                 jz      short loc_408DFC
.text:00408DDC                 cmp     edi, [esp+2Ch+var_14]
.text:00408DE0                 jz      short loc_408DE8
.text:00408DE2
.text:00408DE2 loc_408DE2:                             ; CODE XREF: sub_408D70+8A↓j
.text:00408DE2                 mov     [edi+ebp], bl
.text:00408DE5                 inc     edi
.text:00408DE6                 jmp     short loc_408DC0
.text:00408DE8 ; ---------------------------------------------------------------------------
.text:00408DE8
.text:00408DE8 loc_408DE8:                             ; CODE XREF: sub_408D70+70↑j
.text:00408DE8                 mov     [esp+2Ch+C], ebp ; void *
.text:00408DEB                 lea     edx, [esp+2Ch+var_14]
.text:00408DEF                 mov     [esp+2Ch+Type], edx ; int
.text:00408DF3                 call    sub_40AA20
.text:00408DF8                 mov     ebp, eax
.text:00408DFA                 jmp     short loc_408DE2
.text:00408DFC ; ---------------------------------------------------------------------------
.text:00408DFC
.text:00408DFC loc_408DFC:                             ; CODE XREF: sub_408D70+6A↑j
.text:00408DFC                 test    byte ptr [esi+0Ch], 20h
.text:00408E00                 jnz     loc_408F44
.text:00408E06
.text:00408E06 loc_408E06:                             ; CODE XREF: sub_408D70+1DF↓j
.text:00408E06                 cmp     [esp+2Ch+var_16], 0
.text:00408E0B                 jz      loc_408F24
.text:00408E11
.text:00408E11 loc_408E11:                             ; CODE XREF: sub_408D70+1BE↓j
.text:00408E11                                         ; sub_408D70+1CF↓j
.text:00408E11                 mov     [esp+2Ch+C], ebp ; void *
.text:00408E14                 lea     ecx, [edi+1]
.text:00408E17                 mov     [esp+2Ch+Type], ecx ; size_t
.text:00408E1B                 call    sub_40A9E0
.text:00408E20                 movzx   ecx, [esp+2Ch+var_15]
.text:00408E25                 xor     edx, edx
.text:00408E27                 test    edi, edi
.text:00408E29                 mov     ebp, eax
.text:00408E2B                 mov     [edi+eax], cl
.text:00408E2E                 lea     eax, [edi+eax]
.text:00408E31                 jz      short loc_408E3E
.text:00408E33                 cmp     [edi+ebp-1], cl
.text:00408E37                 jz      short loc_408E3E
.text:00408E39                 mov     edx, 1
.text:00408E3E
.text:00408E3E loc_408E3E:                             ; CODE XREF: sub_408D70+C1↑j
.text:00408E3E                                         ; sub_408D70+C7↑j
.text:00408E3E                 add     eax, edx
.text:00408E40                 mov     esi, ebp
.text:00408E42                 cmp     ebp, eax
.text:00408E44                 mov     [esp+2Ch+var_1C], eax
.text:00408E48                 mov     edi, ebp
.text:00408E4A                 jnb     short loc_408E64
.text:00408E4C                 lea     esi, [esi+0]
.text:00408E50
.text:00408E50 loc_408E50:                             ; CODE XREF: sub_408D70+F2↓j
.text:00408E50                 movzx   eax, [esp+2Ch+var_15]
.text:00408E55                 cmp     [esi], al
.text:00408E57                 jz      short loc_408E80
.text:00408E59                 lea     eax, [esi+1]
.text:00408E5C
.text:00408E5C loc_408E5C:                             ; CODE XREF: sub_408D70+189↓j
.text:00408E5C                 cmp     eax, [esp+2Ch+var_1C]
.text:00408E60                 mov     esi, eax
.text:00408E62                 jb      short loc_408E50
.text:00408E64
.text:00408E64 loc_408E64:                             ; CODE XREF: sub_408D70+DA↑j
.text:00408E64                 call    _errno
.text:00408E69                 mov     edi, [esp+2Ch+var_20]
.text:00408E6D                 mov     [eax], edi
.text:00408E6F                 xor     eax, eax
.text:00408E71                 test    edi, edi
.text:00408E73                 setz    al
.text:00408E76                 dec     eax
.text:00408E77
.text:00408E77 loc_408E77:                             ; CODE XREF: sub_408D70+212↓j
.text:00408E77                 add     esp, 1Ch
.text:00408E7A                 pop     ebx
.text:00408E7B                 pop     esi
.text:00408E7C                 pop     edi
.text:00408E7D                 pop     ebp
.text:00408E7E                 retn
.text:00408E7E ; ---------------------------------------------------------------------------
.text:00408E7F                 align 10h
.text:00408E80
.text:00408E80 loc_408E80:                             ; CODE XREF: sub_408D70+E7↑j
.text:00408E80                 mov     ebp, ds:__mb_cur_max
.text:00408E86                 mov     ebx, esi
.text:00408E88                 movzx   edx, al
.text:00408E8B                 cmp     dword ptr [ebp+0], 1
.text:00408E8F                 jz      loc_408F12
.text:00408E95                 mov     [esp+2Ch+Type], 8 ; Type
.text:00408E9D                 mov     [esp+2Ch+C], edx ; C
.text:00408EA0                 call    _isctype
.text:00408EA5
.text:00408EA5 loc_408EA5:                             ; CODE XREF: sub_408D70+1B2↓j
.text:00408EA5                 test    eax, eax
.text:00408EA7                 jz      short loc_408EDA
.text:00408EA9                 lea     esi, [esi+0]
.text:00408EB0
.text:00408EB0 loc_408EB0:                             ; CODE XREF: sub_408D70+168↓j
.text:00408EB0                 cmp     ebx, edi
.text:00408EB2                 jz      short loc_408EF4
.text:00408EB4                 movzx   edx, byte ptr [ebx-1]
.text:00408EB8                 mov     ecx, ds:__mb_cur_max
.text:00408EBE                 cmp     dword ptr [ecx], 1
.text:00408EC1                 jz      short loc_408F00
.text:00408EC3                 mov     [esp+2Ch+Type], 8 ; Type
.text:00408ECB                 mov     [esp+2Ch+C], edx ; C
.text:00408ECE                 call    _isctype
.text:00408ED3
.text:00408ED3 loc_408ED3:                             ; CODE XREF: sub_408D70+1A0↓j
.text:00408ED3                 test    eax, eax
.text:00408ED5                 jz      short loc_408EDA
.text:00408ED7                 dec     ebx
.text:00408ED8                 jmp     short loc_408EB0
.text:00408EDA ; ---------------------------------------------------------------------------
.text:00408EDA
.text:00408EDA loc_408EDA:                             ; CODE XREF: sub_408D70+137↑j
.text:00408EDA                                         ; sub_408D70+165↑j
.text:00408EDA                 mov     byte ptr [ebx], 0
.text:00408EDD                 mov     ebx, [esp+2Ch+arg_C]
.text:00408EE1                 mov     [esp+2Ch+Type], edi
.text:00408EE5                 mov     eax, [esp+2Ch+arg_4]
.text:00408EE9                 mov     [esp+2Ch+var_24], ebx
.text:00408EED                 mov     [esp+2Ch+C], eax
.text:00408EF0                 call    [esp+2Ch+arg_0]
.text:00408EF4
.text:00408EF4 loc_408EF4:                             ; CODE XREF: sub_408D70+142↑j
.text:00408EF4                 lea     edi, [esi+1]
.text:00408EF7                 mov     eax, edi
.text:00408EF9                 jmp     loc_408E5C
.text:00408EF9 ; ---------------------------------------------------------------------------
.text:00408EFE                 align 10h
.text:00408F00
.text:00408F00 loc_408F00:                             ; CODE XREF: sub_408D70+151↑j
.text:00408F00                 mov     ecx, ds:_pctype
.text:00408F06                 mov     ebp, [ecx]
.text:00408F08                 movzx   eax, word ptr [ebp+edx*2+0]
.text:00408F0D                 and     eax, 8
.text:00408F10                 jmp     short loc_408ED3
.text:00408F12 ; ---------------------------------------------------------------------------
.text:00408F12
.text:00408F12 loc_408F12:                             ; CODE XREF: sub_408D70+11F↑j
.text:00408F12                 mov     ebp, ds:_pctype
.text:00408F18                 mov     ecx, [ebp+0]
.text:00408F1B                 movzx   eax, word ptr [ecx+edx*2]
.text:00408F1F                 and     eax, 8
.text:00408F22                 jmp     short loc_408EA5
.text:00408F24 ; ---------------------------------------------------------------------------
.text:00408F24
.text:00408F24 loc_408F24:                             ; CODE XREF: sub_408D70+9B↑j
.text:00408F24                 mov     [esp+2Ch+C], esi ; Stream
.text:00408F27                 call    fclose
.text:00408F2C                 test    eax, eax
.text:00408F2E                 jz      loc_408E11
.text:00408F34                 call    _errno
.text:00408F39                 mov     esi, [eax]
.text:00408F3B                 mov     [esp+2Ch+var_20], esi
.text:00408F3F                 jmp     loc_408E11
.text:00408F44 ; ---------------------------------------------------------------------------
.text:00408F44
.text:00408F44 loc_408F44:                             ; CODE XREF: sub_408D70+90↑j
.text:00408F44                 call    _errno
.text:00408F49                 mov     ebx, [eax]
.text:00408F4B                 mov     [esp+2Ch+var_20], ebx
.text:00408F4F                 jmp     loc_408E06
.text:00408F54 ; ---------------------------------------------------------------------------
.text:00408F54
.text:00408F54 loc_408F54:                             ; CODE XREF: sub_408D70+59↑j
.text:00408F54                 mov     [esp+2Ch+C], esi ; File
.text:00408F57                 call    _filbuf
.text:00408F5C                 mov     ebx, eax
.text:00408F5E                 jmp     loc_408DD7
.text:00408F63 ; ---------------------------------------------------------------------------
.text:00408F63
.text:00408F63 loc_408F63:                             ; CODE XREF: sub_408D70+3B↑j
.text:00408F63                 mov     [esp+2Ch+Type], offset sub_408D65 ; Mode
.text:00408F6B                 mov     [esp+2Ch+C], eax ; FileName
.text:00408F6E                 call    fopen
.text:00408F73                 mov     esi, eax
.text:00408F75                 test    esi, esi
.text:00408F77                 mov     eax, 0FFFFFFFFh
.text:00408F7C                 jnz     loc_408DC0
.text:00408F82                 jmp     loc_408E77
.text:00408F87 ; ---------------------------------------------------------------------------
.text:00408F87
.text:00408F87 loc_408F87:                             ; CODE XREF: sub_408D70+1C↑j
.text:00408F87                 cmp     byte ptr [eax+1], 0
.text:00408F8B                 jnz     loc_408D92
.text:00408F91                 mov     [esp+2Ch+var_16], 1
.text:00408F96                 jmp     loc_408D92
.text:00408F96 sub_408D70      endp
.text:00408F96
.text:00408F96 ; ---------------------------------------------------------------------------
.text:00408F9B                 align 10h
.text:00408FA0
.text:00408FA0 ; =============== S U B R O U T I N E =======================================
.text:00408FA0
.text:00408FA0
.text:00408FA0 sub_408FA0      proc near               ; CODE XREF: sub_402250+A1↑p
.text:00408FA0
.text:00408FA0 var_C           = dword ptr -0Ch
.text:00408FA0
.text:00408FA0                 sub     esp, 0Ch
.text:00408FA3                 mov     [esp+0Ch+var_C], 0Ch ; size_t
.text:00408FAA                 call    sub_40AA50
.text:00408FAF                 add     esp, 0Ch
.text:00408FB2                 retn
.text:00408FB2 sub_408FA0      endp
.text:00408FB2
.text:00408FB2 ; ---------------------------------------------------------------------------
.text:00408FB3                 align 10h
.text:00408FC0                 sub     esp, 0Ch
.text:00408FC3                 mov     [esp+8], ebx
.text:00408FC7                 mov     ebx, [esp+10h]
.text:00408FCB                 mov     edx, [ebx]
.text:00408FCD                 mov     [esp], edx
.text:00408FD0                 call    free
.text:00408FD5                 mov     [esp+10h], ebx
.text:00408FD9                 mov     ebx, [esp+8]
.text:00408FDD                 add     esp, 0Ch
.text:00408FE0                 jmp     free
.text:00408FE0 ; ---------------------------------------------------------------------------
.text:00408FE5                 align 10h
.text:00408FF0
.text:00408FF0 ; =============== S U B R O U T I N E =======================================
.text:00408FF0
.text:00408FF0
.text:00408FF0 sub_408FF0      proc near               ; CODE XREF: sub_402250+603↑p
.text:00408FF0                                         ; DATA XREF: sub_402250+3E5↑o
.text:00408FF0
.text:00408FF0 var_1C          = dword ptr -1Ch
.text:00408FF0 var_18          = dword ptr -18h
.text:00408FF0 var_14          = dword ptr -14h
.text:00408FF0 var_4           = dword ptr -4
.text:00408FF0 arg_0           = dword ptr  4
.text:00408FF0 arg_4           = dword ptr  8
.text:00408FF0 arg_8           = dword ptr  0Ch
.text:00408FF0
.text:00408FF0                 sub     esp, 1Ch
.text:00408FF3                 mov     [esp+1Ch+var_4], ebx
.text:00408FF7                 mov     ebx, [esp+1Ch+arg_0]
.text:00408FFB                 mov     ecx, [ebx+8]
.text:00408FFE                 cmp     ecx, [ebx+4]
.text:00409001                 jz      short loc_409023
.text:00409003
.text:00409003 loc_409003:                             ; CODE XREF: sub_408FF0+51↓j
.text:00409003                 mov     eax, [ebx]
.text:00409005                 lea     edx, [eax+ecx*8]
.text:00409008                 lea     eax, [ecx+1]
.text:0040900B                 mov     [ebx+8], eax
.text:0040900E                 mov     ecx, [esp+1Ch+arg_8]
.text:00409012                 mov     ebx, [esp+1Ch+arg_4]
.text:00409016                 mov     [edx+4], ecx
.text:00409019                 mov     [edx], ebx
.text:0040901B                 mov     ebx, [esp+1Ch+var_4]
.text:0040901F                 add     esp, 1Ch
.text:00409022                 retn
.text:00409023 ; ---------------------------------------------------------------------------
.text:00409023
.text:00409023 loc_409023:                             ; CODE XREF: sub_408FF0+11↑j
.text:00409023                 mov     [esp+1Ch+var_14], 8 ; int
.text:0040902B                 lea     edx, [ebx+4]
.text:0040902E                 mov     [esp+1Ch+var_18], edx ; int
.text:00409032                 mov     edx, [ebx]
.text:00409034                 mov     [esp+1Ch+var_1C], edx ; void *
.text:00409037                 call    sub_40AA10
.text:0040903C                 mov     [ebx], eax
.text:0040903E                 mov     ecx, [ebx+8]
.text:00409041                 jmp     short loc_409003
.text:00409041 sub_408FF0      endp
.text:00409041
.text:00409041 ; ---------------------------------------------------------------------------
.text:00409043                 align 10h
.text:00409050
.text:00409050 ; =============== S U B R O U T I N E =======================================
.text:00409050
.text:00409050
.text:00409050 ; int __cdecl sub_409050(char *Str1, char *Str2, int)
.text:00409050 sub_409050      proc near               ; DATA XREF: sub_408C40+81↑o
.text:00409050
.text:00409050 Str             = dword ptr -1Ch
.text:00409050 String2         = dword ptr -18h
.text:00409050 MaxCount        = dword ptr -14h
.text:00409050 var_10          = dword ptr -10h
.text:00409050 var_C           = dword ptr -0Ch
.text:00409050 var_8           = dword ptr -8
.text:00409050 var_4           = dword ptr -4
.text:00409050 Str1            = dword ptr  4
.text:00409050 Str2            = dword ptr  8
.text:00409050 arg_8           = dword ptr  0Ch
.text:00409050
.text:00409050                 sub     esp, 1Ch
.text:00409053                 mov     [esp+1Ch+var_10], ebx
.text:00409057                 mov     ebx, [esp+1Ch+arg_8]
.text:0040905B                 mov     [esp+1Ch+var_C], esi
.text:0040905F                 mov     esi, [esp+1Ch+Str1]
.text:00409063                 test    bl, 8
.text:00409066                 mov     [esp+1Ch+var_8], edi
.text:0040906A                 mov     edi, [esp+1Ch+Str2]
.text:0040906E                 mov     [esp+1Ch+var_4], ebp
.text:00409072                 jnz     short loc_4090B1
.text:00409074                 test    bl, 10h
.text:00409077                 jz      short loc_409091
.text:00409079                 mov     ebx, [esp+1Ch+var_10]
.text:0040907D                 mov     esi, [esp+1Ch+var_C]
.text:00409081                 mov     edi, [esp+1Ch+var_8]
.text:00409085                 mov     ebp, [esp+1Ch+var_4]
.text:00409089                 add     esp, 1Ch
.text:0040908C                 jmp     _stricmp_0
.text:00409091 ; ---------------------------------------------------------------------------
.text:00409091
.text:00409091 loc_409091:                             ; CODE XREF: sub_409050+27↑j
.text:00409091                 mov     [esp+1Ch+Str2], edi ; Str2
.text:00409095                 mov     ebx, [esp+1Ch+var_10]
.text:00409099                 mov     edi, [esp+1Ch+var_8]
.text:0040909D                 mov     [esp+1Ch+Str1], esi ; Str1
.text:004090A1                 mov     ebp, [esp+1Ch+var_4]
.text:004090A5                 mov     esi, [esp+1Ch+var_C]
.text:004090A9                 add     esp, 1Ch
.text:004090AC                 jmp     strcmp
.text:004090B1 ; ---------------------------------------------------------------------------
.text:004090B1
.text:004090B1 loc_4090B1:                             ; CODE XREF: sub_409050+22↑j
.text:004090B1                 mov     [esp+1Ch+Str], esi ; Str
.text:004090B4                 call    strlen
.text:004090B9                 test    bl, 10h
.text:004090BC                 mov     ebp, eax
.text:004090BE                 jz      short loc_409100
.text:004090C0                 mov     [esp+1Ch+MaxCount], eax ; MaxCount
.text:004090C4                 mov     [esp+1Ch+String2], edi ; String2
.text:004090C8                 mov     [esp+1Ch+Str], esi ; String1
.text:004090CB                 call    _strnicmp
.text:004090D0
.text:004090D0 loc_4090D0:                             ; CODE XREF: sub_409050+C0↓j
.text:004090D0                 test    eax, eax
.text:004090D2                 mov     edx, eax
.text:004090D4                 jnz     short loc_4090E6
.text:004090D6                 movsx   edx, byte ptr [ebp+edi+0]
.text:004090DB                 xor     ecx, ecx
.text:004090DD                 cmp     edx, 2Fh ; '/'
.text:004090E0                 setz    cl
.text:004090E3                 dec     ecx
.text:004090E4                 and     edx, ecx
.text:004090E6
.text:004090E6 loc_4090E6:                             ; CODE XREF: sub_409050+84↑j
.text:004090E6                 mov     ebx, [esp+1Ch+var_10]
.text:004090EA                 mov     eax, edx
.text:004090EC                 mov     esi, [esp+1Ch+var_C]
.text:004090F0                 mov     edi, [esp+1Ch+var_8]
.text:004090F4                 mov     ebp, [esp+1Ch+var_4]
.text:004090F8                 add     esp, 1Ch
.text:004090FB                 retn
.text:004090FB ; ---------------------------------------------------------------------------
.text:004090FC                 align 10h
.text:00409100
.text:00409100 loc_409100:                             ; CODE XREF: sub_409050+6E↑j
.text:00409100                 mov     [esp+1Ch+MaxCount], eax ; MaxCount
.text:00409104                 mov     [esp+1Ch+String2], edi ; Str2
.text:00409108                 mov     [esp+1Ch+Str], esi ; Str1
.text:0040910B                 call    strncmp
.text:00409110                 jmp     short loc_4090D0
.text:00409110 sub_409050      endp
.text:00409110
.text:00409110 ; ---------------------------------------------------------------------------
.text:00409112                 align 10h
.text:00409120 aCoreutils530Sr_0 db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00409120                                         ; DATA XREF: sub_409190+544↓o
.text:00409148                 align 20h
.text:00409160 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:00409160                                         ; DATA XREF: sub_409190+54C↓o
.text:00409186                 align 10h
.text:00409190
.text:00409190 ; =============== S U B R O U T I N E =======================================
.text:00409190
.text:00409190
.text:00409190 ; int __cdecl sub_409190(int, int, int, int, char *Str)
.text:00409190 sub_409190      proc near               ; CODE XREF: sub_402250+584↑p
.text:00409190
.text:00409190 C               = dword ptr -3Ch
.text:00409190 Type            = dword ptr -38h
.text:00409190 Radix           = dword ptr -34h
.text:00409190 var_28          = dword ptr -28h
.text:00409190 var_24          = dword ptr -24h
.text:00409190 var_1D          = byte ptr -1Dh
.text:00409190 var_1C          = dword ptr -1Ch
.text:00409190 var_18          = dword ptr -18h
.text:00409190 var_14          = byte ptr -14h
.text:00409190 arg_0           = dword ptr  4
.text:00409190 arg_4           = dword ptr  8
.text:00409190 arg_8           = dword ptr  0Ch
.text:00409190 arg_C           = dword ptr  10h
.text:00409190 Str             = dword ptr  14h
.text:00409190
.text:00409190                 push    ebp
.text:00409191                 push    edi
.text:00409192                 push    esi
.text:00409193                 push    ebx
.text:00409194                 sub     esp, 2Ch
.text:00409197                 mov     ebp, [esp+3Ch+arg_8]
.text:0040919B                 mov     [esp+3Ch+var_1C], 0
.text:004091A3                 mov     esi, [esp+3Ch+arg_0]
.text:004091A7                 cmp     ebp, 24h ; '$'
.text:004091AA                 ja      loc_4096CC
.text:004091B0                 mov     edi, [esp+3Ch+arg_4]
.text:004091B4                 test    edi, edi
.text:004091B6                 jz      loc_4096C3
.text:004091BC
.text:004091BC loc_4091BC:                             ; CODE XREF: sub_409190+537↓j
.text:004091BC                 movzx   edx, byte ptr [esi]
.text:004091BF                 mov     ebx, esi
.text:004091C1                 mov     [esp+3Ch+var_1D], dl
.text:004091C5                 lea     esi, [esi+0]
.text:004091C9                 lea     edi, [edi+0]
.text:004091D0
.text:004091D0 loc_4091D0:                             ; CODE XREF: sub_409190+70↓j
.text:004091D0                 movzx   edx, [esp+3Ch+var_1D]
.text:004091D5                 mov     ecx, ds:__mb_cur_max
.text:004091DB                 cmp     dword ptr [ecx], 1
.text:004091DE                 jz      loc_4096B0
.text:004091E4                 mov     [esp+3Ch+Type], 8 ; Type
.text:004091EC                 mov     [esp+3Ch+C], edx ; C
.text:004091EF                 call    _isctype
.text:004091F4
.text:004091F4 loc_4091F4:                             ; CODE XREF: sub_409190+52E↓j
.text:004091F4                 test    eax, eax
.text:004091F6                 jz      short loc_409202
.text:004091F8                 inc     ebx
.text:004091F9                 movzx   eax, byte ptr [ebx]
.text:004091FC                 mov     [esp+3Ch+var_1D], al
.text:00409200                 jmp     short loc_4091D0
.text:00409202 ; ---------------------------------------------------------------------------
.text:00409202
.text:00409202 loc_409202:                             ; CODE XREF: sub_409190+66↑j
.text:00409202                 cmp     [esp+3Ch+var_1D], 2Dh ; '-'
.text:00409207                 mov     eax, 4
.text:0040920C                 jz      short loc_409265
.text:0040920E                 call    _errno
.text:00409213                 mov     dword ptr [eax], 0
.text:00409219                 mov     [esp+3Ch+Radix], ebp ; Radix
.text:0040921D                 mov     [esp+3Ch+Type], edi ; EndPtr
.text:00409221                 mov     [esp+3Ch+C], esi ; String
.text:00409224                 call    strtoul
.text:00409229                 mov     [esp+3Ch+var_18], eax
.text:0040922D                 mov     eax, [edi]
.text:0040922F                 cmp     eax, esi
.text:00409231                 jz      loc_40967C
.text:00409237                 call    _errno
.text:0040923C                 mov     ebp, [eax]
.text:0040923E                 test    ebp, ebp
.text:00409240                 jnz     loc_40965B
.text:00409246
.text:00409246 loc_409246:                             ; CODE XREF: sub_409190+4DD↓j
.text:00409246                                         ; sub_409190+51A↓j
.text:00409246                 mov     eax, [esp+3Ch+Str]
.text:0040924A                 test    eax, eax
.text:0040924C                 jz      short loc_409257
.text:0040924E                 mov     ecx, [edi]
.text:00409250                 movzx   eax, byte ptr [ecx]
.text:00409253                 test    al, al
.text:00409255                 jnz     short loc_40926D
.text:00409257
.text:00409257 loc_409257:                             ; CODE XREF: sub_409190+BC↑j
.text:00409257                                         ; sub_409190+26C↓j ...
.text:00409257                 mov     edx, [esp+3Ch+var_18]
.text:0040925B                 mov     esi, [esp+3Ch+arg_C]
.text:0040925F                 mov     eax, [esp+3Ch+var_1C]
.text:00409263                 mov     [esi], edx
.text:00409265
.text:00409265 loc_409265:                             ; CODE XREF: sub_409190+7C↑j
.text:00409265                                         ; sub_409190+112↓j ...
.text:00409265                 add     esp, 2Ch
.text:00409268                 pop     ebx
.text:00409269                 pop     esi
.text:0040926A                 pop     edi
.text:0040926B                 pop     ebp
.text:0040926C                 retn
.text:0040926D ; ---------------------------------------------------------------------------
.text:0040926D
.text:0040926D loc_40926D:                             ; CODE XREF: sub_409190+C5↑j
.text:0040926D                 mov     [esp+3Ch+var_24], 1
.text:00409275                 mov     edx, [esp+3Ch+Str]
.text:00409279                 movsx   esi, al
.text:0040927C                 mov     [esp+3Ch+Type], esi ; Val
.text:00409280                 mov     ebx, 400h
.text:00409285                 mov     [esp+3Ch+C], edx ; Str
.text:00409288                 call    strchr
.text:0040928D                 test    eax, eax
.text:0040928F                 jnz     short loc_4092A4
.text:00409291
.text:00409291 def_4092F4:                             ; CODE XREF: sub_409190+162↓j
.text:00409291                                         ; sub_409190+164↓j
.text:00409291                                         ; DATA XREF: ...
.text:00409291                 mov     eax, [esp+3Ch+var_1C] ; jumptable 004092F4 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00409295                 mov     ebx, [esp+3Ch+var_18]
.text:00409299                 mov     edi, [esp+3Ch+arg_C]
.text:0040929D                 or      eax, 2
.text:004092A0                 mov     [edi], ebx
.text:004092A2                 jmp     short loc_409265
.text:004092A4 ; ---------------------------------------------------------------------------
.text:004092A4
.text:004092A4 loc_4092A4:                             ; CODE XREF: sub_409190+FF↑j
.text:004092A4                 mov     [esp+3Ch+Type], 30h ; '0' ; Val
.text:004092AC                 mov     ebp, [esp+3Ch+Str]
.text:004092B0                 mov     [esp+3Ch+C], ebp ; Str
.text:004092B3                 call    strchr
.text:004092B8                 test    eax, eax
.text:004092BA                 jz      loc_409650
.text:004092C0                 mov     ecx, [edi]
.text:004092C2                 mov     [esp+3Ch+var_28], ecx
.text:004092C6                 movsx   eax, byte ptr [ecx+1]
.text:004092CA                 cmp     eax, 44h ; 'D'
.text:004092CD                 jz      loc_409619
.text:004092D3                 cmp     eax, 44h ; 'D'
.text:004092D6                 jg      loc_40962B
.text:004092DC                 cmp     eax, 42h ; 'B'
.text:004092DF                 jz      loc_409619
.text:004092E5
.text:004092E5 loc_4092E5:                             ; CODE XREF: sub_409190+496↓j
.text:004092E5                                         ; sub_409190+49E↓j ...
.text:004092E5                 mov     esi, [esp+3Ch+var_28]
.text:004092E9                 movsx   eax, byte ptr [esi]
.text:004092EC                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:004092EF                 cmp     eax, 35h
.text:004092F2                 ja      short def_4092F4 ; jumptable 004092F4 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:004092F4                 jmp     ds:jpt_4092F4[eax*4] ; switch jump
.text:004092F4 ; ---------------------------------------------------------------------------
.text:004092FB                 align 4
.text:004092FC jpt_4092F4      dd offset loc_40941B, offset def_4092F4, offset def_4092F4
.text:004092FC                                         ; DATA XREF: sub_409190+164↑r
.text:004092FC                 dd offset loc_40942B, offset def_4092F4, offset loc_40951C ; jump table for switch statement
.text:004092FC                 dd offset def_4092F4, offset def_4092F4, offset def_4092F4
.text:004092FC                 dd offset loc_409559, offset def_4092F4, offset loc_40958B
.text:004092FC                 dd offset def_4092F4, offset def_4092F4, offset loc_409465
.text:004092FC                 dd offset def_4092F4, offset def_4092F4, offset def_4092F4
.text:004092FC                 dd offset loc_4095C9, offset def_4092F4, offset def_4092F4
.text:004092FC                 dd offset def_4092F4, offset def_4092F4, offset loc_4094A2
.text:004092FC                 dd offset loc_4094DF, offset def_4092F4, offset def_4092F4
.text:004092FC                 dd offset def_4092F4, offset def_4092F4, offset def_4092F4
.text:004092FC                 dd offset def_4092F4, offset def_4092F4, offset loc_4093D4
.text:004092FC                 dd offset loc_4093E6, offset def_4092F4, offset def_4092F4
.text:004092FC                 dd offset def_4092F4, offset loc_40951C, offset def_4092F4
.text:004092FC                 dd offset def_4092F4, offset def_4092F4, offset loc_409559
.text:004092FC                 dd offset def_4092F4, offset loc_40958B, offset def_4092F4
.text:004092FC                 dd offset def_4092F4, offset def_4092F4, offset def_4092F4
.text:004092FC                 dd offset def_4092F4, offset def_4092F4, offset loc_4095C9
.text:004092FC                 dd offset def_4092F4, offset def_4092F4, offset loc_409606
.text:004093D4 ; ---------------------------------------------------------------------------
.text:004093D4
.text:004093D4 loc_4093D4:                             ; CODE XREF: sub_409190+164↑j
.text:004093D4                                         ; DATA XREF: sub_409190:jpt_4092F4↑o
.text:004093D4                 mov     eax, [esp+3Ch+var_18] ; jumptable 004092F4 case 98
.text:004093D8                 cmp     eax, 7FFFFFh
.text:004093DD                 ja      short loc_40940C
.text:004093DF                 shl     eax, 9
.text:004093E2
.text:004093E2 loc_4093E2:                             ; CODE XREF: sub_409190+299↓j
.text:004093E2                                         ; sub_409190+484↓j
.text:004093E2                 mov     [esp+3Ch+var_18], eax
.text:004093E6
.text:004093E6 loc_4093E6:                             ; CODE XREF: sub_409190+164↑j
.text:004093E6                                         ; DATA XREF: sub_409190:jpt_4092F4↑o
.text:004093E6                 xor     eax, eax        ; jumptable 004092F4 case 99
.text:004093E8
.text:004093E8 loc_4093E8:                             ; CODE XREF: sub_409190+289↓j
.text:004093E8                                         ; sub_409190+2CA↓j ...
.text:004093E8                 or      [esp+3Ch+var_1C], eax
.text:004093EC                 mov     ebp, [esp+3Ch+var_28]
.text:004093F0                 mov     ecx, [esp+3Ch+var_24]
.text:004093F4                 add     ebp, ecx
.text:004093F6                 mov     [edi], ebp
.text:004093F8                 cmp     byte ptr [ebp+0], 0
.text:004093FC                 jz      loc_409257
.text:00409402                 or      [esp+3Ch+var_1C], 2
.text:00409407                 jmp     loc_409257
.text:0040940C ; ---------------------------------------------------------------------------
.text:0040940C
.text:0040940C loc_40940C:                             ; CODE XREF: sub_409190+24D↑j
.text:0040940C                                         ; sub_409190+294↓j ...
.text:0040940C                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00409414                 mov     eax, 1
.text:00409419                 jmp     short loc_4093E8
.text:0040941B ; ---------------------------------------------------------------------------
.text:0040941B
.text:0040941B loc_40941B:                             ; CODE XREF: sub_409190+164↑j
.text:0040941B                                         ; DATA XREF: sub_409190:jpt_4092F4↑o
.text:0040941B                 mov     eax, [esp+3Ch+var_18] ; jumptable 004092F4 case 66
.text:0040941F                 cmp     eax, 3FFFFFh
.text:00409424                 ja      short loc_40940C
.text:00409426                 shl     eax, 0Ah
.text:00409429                 jmp     short loc_4093E2
.text:0040942B ; ---------------------------------------------------------------------------
.text:0040942B
.text:0040942B loc_40942B:                             ; CODE XREF: sub_409190+164↑j
.text:0040942B                                         ; DATA XREF: sub_409190:jpt_4092F4↑o
.text:0040942B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 004092F4 case 69
.text:0040942F                 xor     ebp, ebp
.text:00409431                 mov     esi, 5
.text:00409436
.text:00409436 loc_409436:                             ; CODE XREF: sub_409190+2C8↓j
.text:00409436                 xor     edx, edx
.text:00409438                 mov     eax, 0FFFFFFFFh
.text:0040943D                 div     ebx
.text:0040943F                 mov     edx, [ecx]
.text:00409441                 cmp     eax, edx
.text:00409443                 jnb     short loc_40945C
.text:00409445                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040944B                 mov     eax, 1
.text:00409450
.text:00409450 loc_409450:                             ; CODE XREF: sub_409190+2D3↓j
.text:00409450                 dec     esi
.text:00409451                 or      ebp, eax
.text:00409453                 cmp     esi, 0FFFFFFFFh
.text:00409456                 mov     eax, ebp
.text:00409458                 jnz     short loc_409436
.text:0040945A                 jmp     short loc_4093E8
.text:0040945C ; ---------------------------------------------------------------------------
.text:0040945C
.text:0040945C loc_40945C:                             ; CODE XREF: sub_409190+2B3↑j
.text:0040945C                 imul    edx, ebx
.text:0040945F                 xor     eax, eax
.text:00409461                 mov     [ecx], edx
.text:00409463                 jmp     short loc_409450
.text:00409465 ; ---------------------------------------------------------------------------
.text:00409465
.text:00409465 loc_409465:                             ; CODE XREF: sub_409190+164↑j
.text:00409465                                         ; DATA XREF: sub_409190:jpt_4092F4↑o
.text:00409465                 lea     ecx, [esp+3Ch+var_18] ; jumptable 004092F4 case 80
.text:00409469                 xor     ebp, ebp
.text:0040946B                 mov     esi, 4
.text:00409470
.text:00409470 loc_409470:                             ; CODE XREF: sub_409190+302↓j
.text:00409470                 xor     edx, edx
.text:00409472                 mov     eax, 0FFFFFFFFh
.text:00409477                 div     ebx
.text:00409479                 mov     edx, [ecx]
.text:0040947B                 cmp     eax, edx
.text:0040947D                 jnb     short loc_409499
.text:0040947F                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00409485                 mov     eax, 1
.text:0040948A
.text:0040948A loc_40948A:                             ; CODE XREF: sub_409190+310↓j
.text:0040948A                 dec     esi
.text:0040948B                 or      ebp, eax
.text:0040948D                 cmp     esi, 0FFFFFFFFh
.text:00409490                 mov     eax, ebp
.text:00409492                 jnz     short loc_409470
.text:00409494                 jmp     loc_4093E8
.text:00409499 ; ---------------------------------------------------------------------------
.text:00409499
.text:00409499 loc_409499:                             ; CODE XREF: sub_409190+2ED↑j
.text:00409499                 imul    edx, ebx
.text:0040949C                 xor     eax, eax
.text:0040949E                 mov     [ecx], edx
.text:004094A0                 jmp     short loc_40948A
.text:004094A2 ; ---------------------------------------------------------------------------
.text:004094A2
.text:004094A2 loc_4094A2:                             ; CODE XREF: sub_409190+164↑j
.text:004094A2                                         ; DATA XREF: sub_409190:jpt_4092F4↑o
.text:004094A2                 lea     ecx, [esp+3Ch+var_18] ; jumptable 004092F4 case 89
.text:004094A6                 xor     ebp, ebp
.text:004094A8                 mov     esi, 7
.text:004094AD
.text:004094AD loc_4094AD:                             ; CODE XREF: sub_409190+33F↓j
.text:004094AD                 xor     edx, edx
.text:004094AF                 mov     eax, 0FFFFFFFFh
.text:004094B4                 div     ebx
.text:004094B6                 mov     edx, [ecx]
.text:004094B8                 cmp     eax, edx
.text:004094BA                 jnb     short loc_4094D6
.text:004094BC                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004094C2                 mov     eax, 1
.text:004094C7
.text:004094C7 loc_4094C7:                             ; CODE XREF: sub_409190+34D↓j
.text:004094C7                 dec     esi
.text:004094C8                 or      ebp, eax
.text:004094CA                 cmp     esi, 0FFFFFFFFh
.text:004094CD                 mov     eax, ebp
.text:004094CF                 jnz     short loc_4094AD
.text:004094D1                 jmp     loc_4093E8
.text:004094D6 ; ---------------------------------------------------------------------------
.text:004094D6
.text:004094D6 loc_4094D6:                             ; CODE XREF: sub_409190+32A↑j
.text:004094D6                 imul    edx, ebx
.text:004094D9                 xor     eax, eax
.text:004094DB                 mov     [ecx], edx
.text:004094DD                 jmp     short loc_4094C7
.text:004094DF ; ---------------------------------------------------------------------------
.text:004094DF
.text:004094DF loc_4094DF:                             ; CODE XREF: sub_409190+164↑j
.text:004094DF                                         ; DATA XREF: sub_409190:jpt_4092F4↑o
.text:004094DF                 lea     ecx, [esp+3Ch+var_18] ; jumptable 004092F4 case 90
.text:004094E3                 xor     ebp, ebp
.text:004094E5                 mov     esi, 6
.text:004094EA
.text:004094EA loc_4094EA:                             ; CODE XREF: sub_409190+37C↓j
.text:004094EA                 xor     edx, edx
.text:004094EC                 mov     eax, 0FFFFFFFFh
.text:004094F1                 div     ebx
.text:004094F3                 mov     edx, [ecx]
.text:004094F5                 cmp     eax, edx
.text:004094F7                 jnb     short loc_409513
.text:004094F9                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004094FF                 mov     eax, 1
.text:00409504
.text:00409504 loc_409504:                             ; CODE XREF: sub_409190+38A↓j
.text:00409504                 dec     esi
.text:00409505                 or      ebp, eax
.text:00409507                 cmp     esi, 0FFFFFFFFh
.text:0040950A                 mov     eax, ebp
.text:0040950C                 jnz     short loc_4094EA
.text:0040950E                 jmp     loc_4093E8
.text:00409513 ; ---------------------------------------------------------------------------
.text:00409513
.text:00409513 loc_409513:                             ; CODE XREF: sub_409190+367↑j
.text:00409513                 imul    edx, ebx
.text:00409516                 xor     eax, eax
.text:00409518                 mov     [ecx], edx
.text:0040951A                 jmp     short loc_409504
.text:0040951C ; ---------------------------------------------------------------------------
.text:0040951C
.text:0040951C loc_40951C:                             ; CODE XREF: sub_409190+164↑j
.text:0040951C                                         ; DATA XREF: sub_409190:jpt_4092F4↑o
.text:0040951C                 lea     ecx, [esp+3Ch+var_18] ; jumptable 004092F4 cases 71,103
.text:00409520                 xor     ebp, ebp
.text:00409522                 mov     esi, 2
.text:00409527
.text:00409527 loc_409527:                             ; CODE XREF: sub_409190+3B9↓j
.text:00409527                 xor     edx, edx
.text:00409529                 mov     eax, 0FFFFFFFFh
.text:0040952E                 div     ebx
.text:00409530                 mov     edx, [ecx]
.text:00409532                 cmp     eax, edx
.text:00409534                 jnb     short loc_409550
.text:00409536                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040953C                 mov     eax, 1
.text:00409541
.text:00409541 loc_409541:                             ; CODE XREF: sub_409190+3C7↓j
.text:00409541                 dec     esi
.text:00409542                 or      ebp, eax
.text:00409544                 cmp     esi, 0FFFFFFFFh
.text:00409547                 mov     eax, ebp
.text:00409549                 jnz     short loc_409527
.text:0040954B                 jmp     loc_4093E8
.text:00409550 ; ---------------------------------------------------------------------------
.text:00409550
.text:00409550 loc_409550:                             ; CODE XREF: sub_409190+3A4↑j
.text:00409550                 imul    edx, ebx
.text:00409553                 xor     eax, eax
.text:00409555                 mov     [ecx], edx
.text:00409557                 jmp     short loc_409541
.text:00409559 ; ---------------------------------------------------------------------------
.text:00409559
.text:00409559 loc_409559:                             ; CODE XREF: sub_409190+164↑j
.text:00409559                                         ; DATA XREF: sub_409190:jpt_4092F4↑o
.text:00409559                 xor     edx, edx        ; jumptable 004092F4 cases 75,107
.text:0040955B                 mov     eax, 0FFFFFFFFh
.text:00409560                 div     ebx
.text:00409562                 mov     edx, [esp+3Ch+var_18]
.text:00409566                 cmp     eax, edx
.text:00409568                 jnb     short loc_409580
.text:0040956A                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00409572                 mov     edx, 1
.text:00409577
.text:00409577 loc_409577:                             ; CODE XREF: sub_409190+3F9↓j
.text:00409577                 xor     eax, eax
.text:00409579                 or      eax, edx
.text:0040957B                 jmp     loc_4093E8
.text:00409580 ; ---------------------------------------------------------------------------
.text:00409580
.text:00409580 loc_409580:                             ; CODE XREF: sub_409190+3D8↑j
.text:00409580                 imul    edx, ebx
.text:00409583                 mov     [esp+3Ch+var_18], edx
.text:00409587                 xor     edx, edx
.text:00409589                 jmp     short loc_409577
.text:0040958B ; ---------------------------------------------------------------------------
.text:0040958B
.text:0040958B loc_40958B:                             ; CODE XREF: sub_409190+164↑j
.text:0040958B                                         ; DATA XREF: sub_409190:jpt_4092F4↑o
.text:0040958B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 004092F4 cases 77,109
.text:0040958F                 xor     ebp, ebp
.text:00409591                 mov     esi, 1
.text:00409596
.text:00409596 loc_409596:                             ; CODE XREF: sub_409190+42E↓j
.text:00409596                 xor     edx, edx
.text:00409598                 mov     eax, 0FFFFFFFFh
.text:0040959D                 div     ebx
.text:0040959F                 mov     edx, [ecx]
.text:004095A1                 cmp     eax, edx
.text:004095A3                 jnb     short loc_4095C0
.text:004095A5                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004095AB                 mov     eax, 1
.text:004095B0
.text:004095B0 loc_4095B0:                             ; CODE XREF: sub_409190+437↓j
.text:004095B0                 dec     esi
.text:004095B1                 or      ebp, eax
.text:004095B3                 cmp     esi, 0FFFFFFFFh
.text:004095B6                 mov     eax, ebp
.text:004095B8                 jz      loc_4093E8
.text:004095BE                 jmp     short loc_409596
.text:004095C0 ; ---------------------------------------------------------------------------
.text:004095C0
.text:004095C0 loc_4095C0:                             ; CODE XREF: sub_409190+413↑j
.text:004095C0                 imul    edx, ebx
.text:004095C3                 xor     eax, eax
.text:004095C5                 mov     [ecx], edx
.text:004095C7                 jmp     short loc_4095B0
.text:004095C9 ; ---------------------------------------------------------------------------
.text:004095C9
.text:004095C9 loc_4095C9:                             ; CODE XREF: sub_409190+164↑j
.text:004095C9                                         ; DATA XREF: sub_409190:jpt_4092F4↑o
.text:004095C9                 lea     ecx, [esp+3Ch+var_18] ; jumptable 004092F4 cases 84,116
.text:004095CD                 xor     ebp, ebp
.text:004095CF                 mov     esi, 3
.text:004095D4
.text:004095D4 loc_4095D4:                             ; CODE XREF: sub_409190+466↓j
.text:004095D4                 xor     edx, edx
.text:004095D6                 mov     eax, 0FFFFFFFFh
.text:004095DB                 div     ebx
.text:004095DD                 mov     edx, [ecx]
.text:004095DF                 cmp     eax, edx
.text:004095E1                 jnb     short loc_4095FD
.text:004095E3                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004095E9                 mov     eax, 1
.text:004095EE
.text:004095EE loc_4095EE:                             ; CODE XREF: sub_409190+474↓j
.text:004095EE                 dec     esi
.text:004095EF                 or      ebp, eax
.text:004095F1                 cmp     esi, 0FFFFFFFFh
.text:004095F4                 mov     eax, ebp
.text:004095F6                 jnz     short loc_4095D4
.text:004095F8                 jmp     loc_4093E8
.text:004095FD ; ---------------------------------------------------------------------------
.text:004095FD
.text:004095FD loc_4095FD:                             ; CODE XREF: sub_409190+451↑j
.text:004095FD                 imul    edx, ebx
.text:00409600                 xor     eax, eax
.text:00409602                 mov     [ecx], edx
.text:00409604                 jmp     short loc_4095EE
.text:00409606 ; ---------------------------------------------------------------------------
.text:00409606
.text:00409606 loc_409606:                             ; CODE XREF: sub_409190+164↑j
.text:00409606                                         ; DATA XREF: sub_409190:jpt_4092F4↑o
.text:00409606                 mov     eax, [esp+3Ch+var_18] ; jumptable 004092F4 case 119
.text:0040960A                 test    eax, eax
.text:0040960C                 js      loc_40940C
.text:00409612                 add     eax, eax
.text:00409614                 jmp     loc_4093E2
.text:00409619 ; ---------------------------------------------------------------------------
.text:00409619
.text:00409619 loc_409619:                             ; CODE XREF: sub_409190+13D↑j
.text:00409619                                         ; sub_409190+14F↑j
.text:00409619                 mov     [esp+3Ch+var_24], 2
.text:00409621                 mov     ebx, 3E8h
.text:00409626                 jmp     loc_4092E5
.text:0040962B ; ---------------------------------------------------------------------------
.text:0040962B
.text:0040962B loc_40962B:                             ; CODE XREF: sub_409190+146↑j
.text:0040962B                 cmp     eax, 69h ; 'i'
.text:0040962E                 jnz     loc_4092E5
.text:00409634                 mov     edx, [esp+3Ch+var_28]
.text:00409638                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040963C                 jnz     loc_4092E5
.text:00409642                 mov     [esp+3Ch+var_24], 3
.text:0040964A                 jmp     loc_4092E5
.text:0040964A ; ---------------------------------------------------------------------------
.text:0040964F                 align 10h
.text:00409650
.text:00409650 loc_409650:                             ; CODE XREF: sub_409190+12A↑j
.text:00409650                 mov     eax, [edi]
.text:00409652                 mov     [esp+3Ch+var_28], eax
.text:00409656                 jmp     loc_4092E5
.text:0040965B ; ---------------------------------------------------------------------------
.text:0040965B
.text:0040965B loc_40965B:                             ; CODE XREF: sub_409190+B0↑j
.text:0040965B                 call    _errno
.text:00409660                 cmp     dword ptr [eax], 22h ; '"'
.text:00409663                 jnz     short loc_409672
.text:00409665                 mov     [esp+3Ch+var_1C], 1
.text:0040966D                 jmp     loc_409246
.text:00409672 ; ---------------------------------------------------------------------------
.text:00409672
.text:00409672 loc_409672:                             ; CODE XREF: sub_409190+4D3↑j
.text:00409672                                         ; sub_409190+4F2↓j ...
.text:00409672                 mov     eax, 4
.text:00409677                 jmp     loc_409265
.text:0040967C ; ---------------------------------------------------------------------------
.text:0040967C
.text:0040967C loc_40967C:                             ; CODE XREF: sub_409190+A1↑j
.text:0040967C                 mov     edx, [esp+3Ch+Str]
.text:00409680                 test    edx, edx
.text:00409682                 jz      short loc_409672
.text:00409684                 movzx   eax, byte ptr [eax]
.text:00409687                 test    al, al
.text:00409689                 jz      short loc_409672
.text:0040968B                 mov     ebx, [esp+3Ch+Str]
.text:0040968F                 movsx   esi, al
.text:00409692                 mov     [esp+3Ch+Type], esi ; Val
.text:00409696                 mov     [esp+3Ch+C], ebx ; Str
.text:00409699                 call    strchr
.text:0040969E                 test    eax, eax
.text:004096A0                 jz      short loc_409672
.text:004096A2                 mov     [esp+3Ch+var_18], 1
.text:004096AA                 jmp     loc_409246
.text:004096AA ; ---------------------------------------------------------------------------
.text:004096AF                 align 10h
.text:004096B0
.text:004096B0 loc_4096B0:                             ; CODE XREF: sub_409190+4E↑j
.text:004096B0                 mov     eax, ds:_pctype
.text:004096B5                 mov     ecx, [eax]
.text:004096B7                 movzx   eax, word ptr [ecx+edx*2]
.text:004096BB                 and     eax, 8
.text:004096BE                 jmp     loc_4091F4
.text:004096C3 ; ---------------------------------------------------------------------------
.text:004096C3
.text:004096C3 loc_4096C3:                             ; CODE XREF: sub_409190+26↑j
.text:004096C3                 lea     edi, [esp+3Ch+var_14]
.text:004096C7                 jmp     loc_4091BC
.text:004096CC ; ---------------------------------------------------------------------------
.text:004096CC
.text:004096CC loc_4096CC:                             ; CODE XREF: sub_409190+1A↑j
.text:004096CC                 mov     [esp+3Ch+Radix], 70h ; 'p'
.text:004096D4                 mov     [esp+3Ch+Type], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:004096DC                 mov     [esp+3Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:004096E3                 call    _assert
.text:004096E3 sub_409190      endp
.text:004096E3
.text:004096E3 ; ---------------------------------------------------------------------------
.text:004096E8                 align 20h
.text:00409700
.text:00409700 ; =============== S U B R O U T I N E =======================================
.text:00409700
.text:00409700
.text:00409700 sub_409700      proc near               ; CODE XREF: sub_402250+FF↑p
.text:00409700
.text:00409700 var_1C          = dword ptr -1Ch
.text:00409700 var_18          = dword ptr -18h
.text:00409700 var_14          = dword ptr -14h
.text:00409700 var_10          = dword ptr -10h
.text:00409700 var_C           = dword ptr -0Ch
.text:00409700 var_8           = dword ptr -8
.text:00409700 var_4           = dword ptr -4
.text:00409700 arg_0           = dword ptr  4
.text:00409700 arg_4           = dword ptr  8
.text:00409700 arg_8           = dword ptr  0Ch
.text:00409700 arg_C           = dword ptr  10h
.text:00409700 arg_10          = dword ptr  14h
.text:00409700
.text:00409700                 sub     esp, 1Ch
.text:00409703                 mov     edx, [esp+1Ch+arg_C]
.text:00409707                 mov     [esp+1Ch+var_4], 0
.text:0040970F                 mov     ecx, [esp+1Ch+arg_10]
.text:00409713                 mov     [esp+1Ch+var_8], 0
.text:0040971B                 mov     [esp+1Ch+var_10], edx
.text:0040971F                 mov     edx, [esp+1Ch+arg_4]
.text:00409723                 mov     [esp+1Ch+var_C], ecx
.text:00409727                 mov     ecx, [esp+1Ch+arg_8]
.text:0040972B                 mov     [esp+1Ch+var_18], edx
.text:0040972F                 mov     edx, [esp+1Ch+arg_0]
.text:00409733                 mov     [esp+1Ch+var_14], ecx
.text:00409737                 mov     [esp+1Ch+var_1C], edx
.text:0040973A                 call    sub_4072D0
.text:0040973F                 add     esp, 1Ch
.text:00409742                 retn
.text:00409742 sub_409700      endp
.text:00409742
.text:00409742 ; ---------------------------------------------------------------------------
.text:00409743                 align 10h
.text:00409750                 sub     esp, 2Ch
.text:00409753                 mov     edx, [esp+44h]
.text:00409757                 mov     dword ptr [esp+18h], 0
.text:0040975F                 mov     ecx, [esp+40h]
.text:00409763                 mov     dword ptr [esp+14h], 0
.text:0040976B                 mov     [esp+1Ch], edx
.text:0040976F                 mov     edx, [esp+3Ch]
.text:00409773                 mov     [esp+10h], ecx
.text:00409777                 mov     ecx, [esp+38h]
.text:0040977B                 mov     [esp+0Ch], edx
.text:0040977F                 mov     edx, [esp+34h]
.text:00409783                 mov     [esp+8], ecx
.text:00409787                 mov     [esp+4], edx
.text:0040978B                 mov     edx, [esp+30h]
.text:0040978F                 mov     [esp], edx
.text:00409792                 call    loc_406740
.text:00409797                 add     esp, 2Ch
.text:0040979A                 retn
.text:0040979A ; ---------------------------------------------------------------------------
.text:0040979B                 align 10h
.text:004097A0                 sub     esp, 1Ch
.text:004097A3                 mov     edx, [esp+2Ch]
.text:004097A7                 mov     dword ptr [esp+18h], 0
.text:004097AF                 mov     ecx, [esp+30h]
.text:004097B3                 mov     dword ptr [esp+14h], 1
.text:004097BB                 mov     [esp+0Ch], edx
.text:004097BF                 mov     edx, [esp+24h]
.text:004097C3                 mov     [esp+10h], ecx
.text:004097C7                 mov     ecx, [esp+28h]
.text:004097CB                 mov     [esp+4], edx
.text:004097CF                 mov     edx, [esp+20h]
.text:004097D3                 mov     [esp+8], ecx
.text:004097D7                 mov     [esp], edx
.text:004097DA                 call    sub_4072D0
.text:004097DF                 add     esp, 1Ch
.text:004097E2                 retn
.text:004097E2 ; ---------------------------------------------------------------------------
.text:004097E3                 align 10h
.text:004097F0                 sub     esp, 2Ch
.text:004097F3                 mov     edx, [esp+44h]
.text:004097F7                 mov     dword ptr [esp+18h], 0
.text:004097FF                 mov     ecx, [esp+40h]
.text:00409803                 mov     dword ptr [esp+14h], 1
.text:0040980B                 mov     [esp+1Ch], edx
.text:0040980F                 mov     edx, [esp+3Ch]
.text:00409813                 mov     [esp+10h], ecx
.text:00409817                 mov     ecx, [esp+38h]
.text:0040981B                 mov     [esp+0Ch], edx
.text:0040981F                 mov     edx, [esp+34h]
.text:00409823                 mov     [esp+8], ecx
.text:00409827                 mov     [esp+4], edx
.text:0040982B                 mov     edx, [esp+30h]
.text:0040982F                 mov     [esp], edx
.text:00409832                 call    loc_406740
.text:00409837                 add     esp, 2Ch
.text:0040983A                 retn
.text:0040983A ; ---------------------------------------------------------------------------
.text:0040983B                 align 10h
.text:00409840 byte_409840     db 0                    ; DATA XREF: sub_409880+377↓r
.text:00409841 aKmgtpezy       db 'KMGTPEZY.',0        ; DATA XREF: sub_409880+37↓o
.text:0040984B                 db 0                    ; DATA XREF: sub_409880+8D↓o
.text:0040984C ; const char a0lf[]
.text:0040984C a0lf            db '%.0Lf',0            ; DATA XREF: sub_409880+2B6↓o
.text:00409852 ; const char a1lf[]
.text:00409852 a1lf            db '%.1Lf',0            ; DATA XREF: sub_409880+584↓o
.text:00409858 flt_409858      dd 1.8446744e19         ; DATA XREF: sub_409880:loc_409D20↓r
.text:00409858                                         ; sub_409880:loc_409D2B↓r ...
.text:0040985C                 align 10h
.text:00409860 tbyte_409860    dt 1.8446744073709551615e19
.text:00409860                                         ; DATA XREF: sub_409880+23E↓r
.text:00409860                                         ; sub_409880+51A↓r ...
.text:0040986A                 align 10h
.text:00409870 tbyte_409870    dt 10.0                 ; DATA XREF: sub_409880+5E4↓r
.text:00409870                                         ; sub_409880:loc_409ED0↓r
.text:0040987A                 align 10h
.text:00409880
.text:00409880 ; =============== S U B R O U T I N E =======================================
.text:00409880
.text:00409880
.text:00409880 ; int __cdecl sub_409880(int, int, char *Buffer, int, int, int, int, int)
.text:00409880 sub_409880      proc near               ; CODE XREF: sub_402F10+8F↑p
.text:00409880                                         ; sub_403100+211↑p
.text:00409880
.text:00409880 var_C4          = qword ptr -0C4h
.text:00409880 var_BC          = tbyte ptr -0BCh
.text:00409880 var_B0          = dword ptr -0B0h
.text:00409880 var_9C          = tbyte ptr -9Ch
.text:00409880 var_8C          = dword ptr -8Ch
.text:00409880 var_88          = dword ptr -88h
.text:00409880 var_80          = dword ptr -80h
.text:00409880 var_7C          = tbyte ptr -7Ch
.text:00409880 var_64          = dword ptr -64h
.text:00409880 var_60          = dword ptr -60h
.text:00409880 var_5C          = dword ptr -5Ch
.text:00409880 var_58          = dword ptr -58h
.text:00409880 Size            = dword ptr -54h
.text:00409880 Src             = dword ptr -50h
.text:00409880 var_4C          = dword ptr -4Ch
.text:00409880 var_48          = dword ptr -48h
.text:00409880 var_44          = dword ptr -44h
.text:00409880 var_40          = dword ptr -40h
.text:00409880 var_3C          = dword ptr -3Ch
.text:00409880 var_38          = dword ptr -38h
.text:00409880 var_34          = dword ptr -34h
.text:00409880 var_30          = dword ptr -30h
.text:00409880 var_2C          = qword ptr -2Ch
.text:00409880 var_24          = qword ptr -24h
.text:00409880 arg_0           = dword ptr  4
.text:00409880 arg_4           = dword ptr  8
.text:00409880 Buffer          = dword ptr  0Ch
.text:00409880 arg_C           = dword ptr  10h
.text:00409880 arg_10          = dword ptr  14h
.text:00409880 arg_14          = dword ptr  18h
.text:00409880 arg_18          = dword ptr  1Ch
.text:00409880 arg_1C          = dword ptr  20h
.text:00409880
.text:00409880                 push    ebp
.text:00409881                 push    edi
.text:00409882                 push    esi
.text:00409883                 push    ebx
.text:00409884                 sub     esp, 0ACh
.text:0040988A                 mov     ecx, [esp+0BCh+arg_18]
.text:00409891                 mov     [esp+0BCh+var_44], 0FFFFFFFFh
.text:00409899                 mov     eax, [esp+0BCh+arg_C]
.text:004098A0                 mov     edi, [esp+0BCh+arg_0]
.text:004098A7                 mov     dword ptr [esp+0BCh+var_2C], ecx
.text:004098AE                 mov     esi, [esp+0BCh+arg_4]
.text:004098B5                 xor     ecx, ecx
.text:004098B7                 mov     [esp+0BCh+Src], (offset aKmgtpezy+8) ; "."
.text:004098BF                 and     eax, 3
.text:004098C2                 mov     ebx, [esp+0BCh+arg_1C]
.text:004098C9                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:004098D1                 mov     dword ptr [esp+0BCh+var_24], edi
.text:004098D8                 mov     ebp, [esp+0BCh+Buffer]
.text:004098DF                 mov     dword ptr [esp+0BCh+var_24+4], esi
.text:004098E6                 mov     edi, [esp+0BCh+arg_14]
.text:004098ED                 mov     dword ptr [esp+0BCh+var_2C+4], ebx
.text:004098F4                 mov     esi, [esp+0BCh+arg_10]
.text:004098FB                 setnz   cl
.text:004098FE                 mov     [esp+0BCh+var_30], eax
.text:00409905                 mov     [esp+0BCh+Size], 1
.text:0040990D                 mov     [esp+0BCh+var_5C], offset byte_40984B
.text:00409915                 dec     ecx
.text:00409916                 and     ecx, 0FFFFFFE8h
.text:00409919                 add     ecx, 400h
.text:0040991F                 mov     [esp+0BCh+var_34], ecx
.text:00409926                 call    localeconv
.text:0040992B                 mov     edx, [eax]
.text:0040992D                 mov     ebx, eax
.text:0040992F                 mov     dword ptr [esp+0BCh+var_BC], edx ; Str
.text:00409932                 call    strlen
.text:00409937                 lea     ecx, [eax-1]
.text:0040993A                 cmp     ecx, 1
.text:0040993D                 ja      short loc_409949
.text:0040993F                 mov     [esp+0BCh+Size], eax
.text:00409943                 mov     ecx, [ebx]
.text:00409945                 mov     [esp+0BCh+Src], ecx
.text:00409949
.text:00409949 loc_409949:                             ; CODE XREF: sub_409880+BD↑j
.text:00409949                 mov     eax, [ebx+8]
.text:0040994C                 mov     edx, [ebx+4]
.text:0040994F                 mov     [esp+0BCh+var_58], eax
.text:00409953                 mov     dword ptr [esp+0BCh+var_BC], edx ; Str
.text:00409956                 call    strlen
.text:0040995B                 cmp     eax, 2
.text:0040995E                 ja      short loc_409967
.text:00409960                 mov     ecx, [ebx+4]
.text:00409963                 mov     [esp+0BCh+var_5C], ecx
.text:00409967
.text:00409967 loc_409967:                             ; CODE XREF: sub_409880+DE↑j
.text:00409967                 cmp     dword ptr [esp+0BCh+var_2C+4], edi
.text:0040996E                 lea     ebx, [ebp+74h]
.text:00409971                 mov     [esp+0BCh+var_4C], ebx
.text:00409975                 mov     [esp+0BCh+var_48], ebx
.text:00409979                 ja      loc_40A2B8
.text:0040997F                 jb      short loc_40998E
.text:00409981                 cmp     dword ptr [esp+0BCh+var_2C], esi
.text:00409988                 ja      loc_40A2B8
.text:0040998E
.text:0040998E loc_40998E:                             ; CODE XREF: sub_409880+FF↑j
.text:0040998E                 mov     dword ptr [esp+0BCh+var_BC], esi
.text:00409991                 mov     edx, dword ptr [esp+0BCh+var_2C]
.text:00409998                 mov     ecx, dword ptr [esp+0BCh+var_2C+4]
.text:0040999F                 mov     dword ptr [esp+0BCh+var_BC+4], edi
.text:004099A3                 mov     dword ptr [esp+0BCh+var_BC+8], edx
.text:004099A7                 mov     [esp+0BCh+var_B0], ecx
.text:004099AB                 call    sub_417D10
.text:004099B0                 mov     ebx, edx
.text:004099B2                 or      ebx, eax
.text:004099B4                 jnz     loc_409A60
.text:004099BA                 mov     dword ptr [esp+0BCh+var_BC], esi
.text:004099BD                 mov     edx, dword ptr [esp+0BCh+var_2C]
.text:004099C4                 mov     ebx, dword ptr [esp+0BCh+var_2C+4]
.text:004099CB                 mov     dword ptr [esp+0BCh+var_BC+4], edi
.text:004099CF                 mov     dword ptr [esp+0BCh+var_BC+8], edx
.text:004099D3                 mov     [esp+0BCh+var_B0], ebx
.text:004099D7                 call    sub_417E90
.text:004099DC                 mov     [esp+0BCh+var_B0], edx
.text:004099E0                 mov     ebx, dword ptr [esp+0BCh+var_24]
.text:004099E7                 mov     ecx, [esp+0BCh+var_B0]
.text:004099EB                 mov     dword ptr [esp+0BCh+var_BC+8], eax
.text:004099EF                 mov     eax, dword ptr [esp+0BCh+var_24]
.text:004099F6                 imul    ebx, ecx
.text:004099F9                 mul     dword ptr [esp+0BCh+var_BC+8]
.text:004099FD                 mov     ecx, edx
.text:004099FF                 add     ecx, ebx
.text:00409A01                 mov     [esp+0BCh+var_3C], eax
.text:00409A08                 mov     edx, dword ptr [esp+0BCh+var_24+4]
.text:00409A0F                 mov     ebx, dword ptr [esp+0BCh+var_BC+8]
.text:00409A13                 imul    edx, ebx
.text:00409A16                 mov     ebx, [esp+0BCh+var_3C]
.text:00409A1D                 add     ecx, edx
.text:00409A1F                 mov     [esp+0BCh+var_38], ecx
.text:00409A26                 mov     eax, [esp+0BCh+var_38]
.text:00409A2D                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:00409A30                 mov     dword ptr [esp+0BCh+var_BC+4], eax
.text:00409A34                 call    sub_417E90
.text:00409A39                 mov     ebx, dword ptr [esp+0BCh+var_24+4]
.text:00409A40                 mov     ecx, dword ptr [esp+0BCh+var_24]
.text:00409A47                 xor     ebx, edx
.text:00409A49                 xor     eax, ecx
.text:00409A4B                 or      ebx, eax
.text:00409A4D                 jz      loc_409F28
.text:00409A53                 lea     esi, [esi+0]
.text:00409A59                 lea     edi, [edi+0]
.text:00409A60
.text:00409A60 loc_409A60:                             ; CODE XREF: sub_409880+134↑j
.text:00409A60                                         ; sub_409880+A3C↓j ...
.text:00409A60                 fild    [esp+0BCh+var_2C]
.text:00409A67                 mov     edx, dword ptr [esp+0BCh+var_2C+4]
.text:00409A6E                 test    edx, edx
.text:00409A70                 js      loc_409F1D
.text:00409A76
.text:00409A76 loc_409A76:                             ; CODE XREF: sub_409880+6A3↓j
.text:00409A76                 fild    [esp+0BCh+var_24]
.text:00409A7D                 mov     ecx, dword ptr [esp+0BCh+var_24+4]
.text:00409A84                 test    ecx, ecx
.text:00409A86                 js      loc_409F12
.text:00409A8C
.text:00409A8C loc_409A8C:                             ; CODE XREF: sub_409880+698↓j
.text:00409A8C                 push    edi
.text:00409A8D                 push    esi
.text:00409A8E                 fild    [esp+0C4h+var_C4]
.text:00409A91                 add     esp, 8
.text:00409A94                 test    edi, edi
.text:00409A96                 js      loc_409F07
.text:00409A9C
.text:00409A9C loc_409A9C:                             ; CODE XREF: sub_409880+68D↓j
.text:00409A9C                 test    byte ptr [esp+0BCh+arg_C], 10h
.text:00409AA4                 fdivrp  st(2), st
.text:00409AA6                 fmulp   st(1), st
.text:00409AA8                 fld     st
.text:00409AAA                 fstp    [esp+0BCh+var_7C]
.text:00409AAE                 jnz     loc_409D36
.text:00409AB4                 cmp     [esp+0BCh+var_30], 1
.text:00409ABC                 jz      short loc_409B30
.text:00409ABE                 fld     ds:tbyte_409860
.text:00409AC4                 fucomp  st(1)
.text:00409AC6                 fnstsw  ax
.text:00409AC8                 sahf
.text:00409AC9                 jbe     short loc_409B30
.text:00409ACB                 fstp    [esp+0BCh+var_BC] ; _TBYTE
.text:00409ACE                 xor     ebx, ebx
.text:00409AD0                 call    sub_417FC0
.text:00409AD5                 mov     edi, edx
.text:00409AD7                 xor     ecx, ecx
.text:00409AD9                 mov     edx, [esp+0BCh+var_30]
.text:00409AE0                 mov     esi, eax
.text:00409AE2                 test    edx, edx
.text:00409AE4                 jnz     short loc_409B0C
.text:00409AE6                 push    edi
.text:00409AE7                 push    esi
.text:00409AE8                 fild    [esp+0C4h+var_C4]
.text:00409AEB                 add     esp, 8
.text:00409AEE                 test    edi, edi
.text:00409AF0                 js      loc_409D2B
.text:00409AF6
.text:00409AF6 loc_409AF6:                             ; CODE XREF: sub_409880+4B1↓j
.text:00409AF6                 fld     [esp+0BCh+var_7C]
.text:00409AFA                 fxch    st(1)
.text:00409AFC                 fucompp
.text:00409AFE                 fnstsw  ax
.text:00409B00                 sahf
.text:00409B01                 jp      short loc_409B05
.text:00409B03                 jz      short loc_409B0C
.text:00409B05
.text:00409B05 loc_409B05:                             ; CODE XREF: sub_409880+281↑j
.text:00409B05                 mov     ecx, 1
.text:00409B0A                 xor     ebx, ebx
.text:00409B0C
.text:00409B0C loc_409B0C:                             ; CODE XREF: sub_409880+264↑j
.text:00409B0C                                         ; sub_409880+283↑j
.text:00409B0C                 mov     edx, esi
.text:00409B0E                 add     edx, ecx
.text:00409B10                 mov     esi, edi
.text:00409B12                 adc     esi, ebx
.text:00409B14                 push    esi
.text:00409B15                 push    edx
.text:00409B16                 fild    [esp+0C4h+var_C4]
.text:00409B19                 add     esp, 8
.text:00409B1C                 test    esi, esi
.text:00409B1E                 js      loc_409D20
.text:00409B24                 lea     esi, [esi+0]
.text:00409B2A                 lea     edi, [edi+0]
.text:00409B30
.text:00409B30 loc_409B30:                             ; CODE XREF: sub_409880+23C↑j
.text:00409B30                                         ; sub_409880+249↑j ...
.text:00409B30                 fstp    [esp+0BCh+var_BC+8]
.text:00409B34                 xor     esi, esi
.text:00409B36                 mov     dword ptr [esp+0BCh+var_BC+4], offset a0lf ; "%.0Lf"
.text:00409B3E                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Buffer
.text:00409B41                 call    sprintf
.text:00409B46                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Str
.text:00409B49                 call    strlen
.text:00409B4E                 mov     ebx, eax
.text:00409B50
.text:00409B50 loc_409B50:                             ; CODE XREF: sub_409880+5C7↓j
.text:00409B50                                         ; sub_409880+5D2↓j
.text:00409B50                 mov     dword ptr [esp+0BCh+var_BC+8], ebx ; Size
.text:00409B54                 mov     edi, [esp+0BCh+var_4C]
.text:00409B58                 mov     dword ptr [esp+0BCh+var_BC+4], ebp ; Src
.text:00409B5C                 sub     edi, ebx
.text:00409B5E                 mov     [esp+0BCh+var_48], edi
.text:00409B62                 mov     dword ptr [esp+0BCh+var_BC], edi ; void *
.text:00409B65                 call    memmove
.text:00409B6A                 mov     ebp, [esp+0BCh+var_48]
.text:00409B6E                 add     ebx, ebp
.text:00409B70                 sub     ebx, esi
.text:00409B72
.text:00409B72 loc_409B72:                             ; CODE XREF: sub_409880+97E↓j
.text:00409B72                 test    byte ptr [esp+0BCh+arg_C], 4
.text:00409B7A                 jnz     loc_409CF1
.text:00409B80
.text:00409B80 loc_409B80:                             ; CODE XREF: sub_409880+49B↓j
.text:00409B80                 cmp     byte ptr [esp+0BCh+arg_C], 0
.text:00409B88                 jns     loc_409C40
.text:00409B8E                 mov     esi, [esp+0BCh+var_44]
.text:00409B92                 test    esi, esi
.text:00409B94                 js      loc_409C56
.text:00409B9A
.text:00409B9A loc_409B9A:                             ; CODE XREF: sub_409880+419↓j
.text:00409B9A                                         ; sub_409880+44B↓j ...
.text:00409B9A                 mov     edi, [esp+0BCh+arg_C]
.text:00409BA1                 and     edi, 100h
.text:00409BA7                 or      edi, [esp+0BCh+var_44]
.text:00409BAB                 jz      short loc_409BD0
.text:00409BAD                 test    byte ptr [esp+0BCh+arg_C], 40h
.text:00409BB5                 jz      short loc_409BD0
.text:00409BB7                 mov     esi, [esp+0BCh+var_4C]
.text:00409BBB                 mov     byte ptr [esi], 20h ; ' '
.text:00409BBE                 inc     esi
.text:00409BBF                 mov     [esp+0BCh+var_4C], esi
.text:00409BC3                 lea     esi, [esi+0]
.text:00409BC9                 lea     edi, [edi+0]
.text:00409BD0
.text:00409BD0 loc_409BD0:                             ; CODE XREF: sub_409880+32B↑j
.text:00409BD0                                         ; sub_409880+335↑j
.text:00409BD0                 mov     ecx, [esp+0BCh+var_44]
.text:00409BD4                 test    ecx, ecx
.text:00409BD6                 jz      short loc_409C00
.text:00409BD8                 mov     eax, [esp+0BCh+var_4C]
.text:00409BDC                 inc     [esp+0BCh+var_4C]
.text:00409BE0                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00409BE8                 jnz     short loc_409BF3
.text:00409BEA                 cmp     [esp+0BCh+var_44], 1
.text:00409BEF                 mov     dl, 6Bh ; 'k'
.text:00409BF1                 jz      short loc_409BFE
.text:00409BF3
.text:00409BF3 loc_409BF3:                             ; CODE XREF: sub_409880+368↑j
.text:00409BF3                 mov     ebx, [esp+0BCh+var_44]
.text:00409BF7                 movzx   edx, ds:byte_409840[ebx]
.text:00409BFE
.text:00409BFE loc_409BFE:                             ; CODE XREF: sub_409880+371↑j
.text:00409BFE                 mov     [eax], dl
.text:00409C00
.text:00409C00 loc_409C00:                             ; CODE XREF: sub_409880+356↑j
.text:00409C00                 test    [esp+0BCh+arg_C], 100h
.text:00409C0B                 jz      short loc_409C40
.text:00409C0D                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00409C15                 jz      short loc_409C2C
.text:00409C17                 mov     edx, [esp+0BCh+var_44]
.text:00409C1B                 test    edx, edx
.text:00409C1D                 jz      short loc_409C2C
.text:00409C1F                 mov     ebp, [esp+0BCh+var_4C]
.text:00409C23                 mov     byte ptr [ebp+0], 69h ; 'i'
.text:00409C27                 inc     ebp
.text:00409C28                 mov     [esp+0BCh+var_4C], ebp
.text:00409C2C
.text:00409C2C loc_409C2C:                             ; CODE XREF: sub_409880+395↑j
.text:00409C2C                                         ; sub_409880+39D↑j
.text:00409C2C                 mov     eax, [esp+0BCh+var_4C]
.text:00409C30                 mov     byte ptr [eax], 42h ; 'B'
.text:00409C33                 inc     eax
.text:00409C34                 mov     [esp+0BCh+var_4C], eax
.text:00409C38                 nop
.text:00409C39                 lea     esi, [esi+0]
.text:00409C40
.text:00409C40 loc_409C40:                             ; CODE XREF: sub_409880+308↑j
.text:00409C40                                         ; sub_409880+38B↑j
.text:00409C40                 mov     edi, [esp+0BCh+var_4C]
.text:00409C44                 mov     byte ptr [edi], 0
.text:00409C47                 mov     eax, [esp+0BCh+var_48]
.text:00409C4B                 add     esp, 0ACh
.text:00409C51                 pop     ebx
.text:00409C52                 pop     esi
.text:00409C53                 pop     edi
.text:00409C54                 pop     ebp
.text:00409C55                 retn
.text:00409C56 ; ---------------------------------------------------------------------------
.text:00409C56
.text:00409C56 loc_409C56:                             ; CODE XREF: sub_409880+314↑j
.text:00409C56                 mov     [esp+0BCh+var_88], 0
.text:00409C5E                 mov     ebp, dword ptr [esp+0BCh+var_2C+4]
.text:00409C65                 cmp     [esp+0BCh+var_88], ebp
.text:00409C69                 mov     [esp+0BCh+var_44], 0
.text:00409C71                 mov     [esp+0BCh+var_8C], 1
.text:00409C79                 jnb     short loc_409CDF
.text:00409C7B
.text:00409C7B loc_409C7B:                             ; CODE XREF: sub_409880+46A↓j
.text:00409C7B                 mov     esi, [esp+0BCh+var_34]
.text:00409C82                 xor     edi, edi
.text:00409C84                 lea     esi, [esi+0]
.text:00409C8A                 lea     edi, [edi+0]
.text:00409C90
.text:00409C90 loc_409C90:                             ; CODE XREF: sub_409880+449↓j
.text:00409C90                                         ; sub_409880+458↓j
.text:00409C90                 inc     [esp+0BCh+var_44]
.text:00409C94                 cmp     [esp+0BCh+var_44], 8
.text:00409C99                 jz      loc_409B9A
.text:00409C9F                 mov     eax, [esp+0BCh+var_8C]
.text:00409CA3                 mov     ebp, [esp+0BCh+var_8C]
.text:00409CA7                 mov     ebx, [esp+0BCh+var_88]
.text:00409CAB                 mul     esi
.text:00409CAD                 imul    ebp, edi
.text:00409CB0                 imul    ebx, esi
.text:00409CB3                 mov     ecx, eax
.text:00409CB5                 add     edx, ebp
.text:00409CB7                 lea     ebp, [ebx+edx]
.text:00409CBA                 cmp     ebp, dword ptr [esp+0BCh+var_2C+4]
.text:00409CC1                 mov     [esp+0BCh+var_8C], ecx
.text:00409CC5                 mov     [esp+0BCh+var_88], ebp
.text:00409CC9                 jb      short loc_409C90
.text:00409CCB                 ja      loc_409B9A
.text:00409CD1                 cmp     ecx, dword ptr [esp+0BCh+var_2C]
.text:00409CD8                 jb      short loc_409C90
.text:00409CDA                 jmp     loc_409B9A
.text:00409CDF ; ---------------------------------------------------------------------------
.text:00409CDF
.text:00409CDF loc_409CDF:                             ; CODE XREF: sub_409880+3F9↑j
.text:00409CDF                 mov     ecx, dword ptr [esp+0BCh+var_2C]
.text:00409CE6                 cmp     [esp+0BCh+var_8C], ecx
.text:00409CEA                 jb      short loc_409C7B
.text:00409CEC                 jmp     loc_409B9A
.text:00409CF1 ; ---------------------------------------------------------------------------
.text:00409CF1
.text:00409CF1 loc_409CF1:                             ; CODE XREF: sub_409880+2FA↑j
.text:00409CF1                 mov     eax, [esp+0BCh+var_48]
.text:00409CF5                 mov     edx, [esp+0BCh+var_5C]
.text:00409CF9                 mov     edi, [esp+0BCh+var_58]
.text:00409CFD                 sub     ebx, eax
.text:00409CFF                 mov     dword ptr [esp+0BCh+var_BC+4], ebx ; size_t
.text:00409D03                 mov     ebx, [esp+0BCh+var_48]
.text:00409D07                 mov     [esp+0BCh+var_B0], edx ; char *
.text:00409D0B                 mov     dword ptr [esp+0BCh+var_BC+8], edi ; int
.text:00409D0F                 mov     dword ptr [esp+0BCh+var_BC], ebx ; void *
.text:00409D12                 call    sub_40A5D0
.text:00409D17                 mov     [esp+0BCh+var_48], eax
.text:00409D1B                 jmp     loc_409B80
.text:00409D20 ; ---------------------------------------------------------------------------
.text:00409D20
.text:00409D20 loc_409D20:                             ; CODE XREF: sub_409880+29E↑j
.text:00409D20                 fadd    ds:flt_409858
.text:00409D26                 jmp     loc_409B30
.text:00409D2B ; ---------------------------------------------------------------------------
.text:00409D2B
.text:00409D2B loc_409D2B:                             ; CODE XREF: sub_409880+270↑j
.text:00409D2B                 fadd    ds:flt_409858
.text:00409D31                 jmp     loc_409AF6
.text:00409D36 ; ---------------------------------------------------------------------------
.text:00409D36
.text:00409D36 loc_409D36:                             ; CODE XREF: sub_409880+22E↑j
.text:00409D36                 fstp    st
.text:00409D38                 mov     [esp+0BCh+var_44], 0
.text:00409D40                 mov     ebx, [esp+0BCh+var_34]
.text:00409D47                 xor     eax, eax
.text:00409D49                 push    eax
.text:00409D4A                 fld1
.text:00409D4C                 push    ebx
.text:00409D4D                 fild    [esp+0C4h+var_C4]
.text:00409D50                 add     esp, 8
.text:00409D53                 lea     esi, [esi+0]
.text:00409D59                 lea     edi, [edi+0]
.text:00409D60
.text:00409D60 loc_409D60:                             ; CODE XREF: sub_409880+500↓j
.text:00409D60                 fld     [esp+0BCh+var_7C]
.text:00409D64                 fxch    st(2)
.text:00409D66                 fmul    st, st(1)
.text:00409D68                 inc     [esp+0BCh+var_44]
.text:00409D6C                 fld     st
.text:00409D6E                 fmul    st, st(2)
.text:00409D70                 fxch    st(3)
.text:00409D72                 fucomp  st(3)
.text:00409D74                 fnstsw  ax
.text:00409D76                 fstp    st(2)
.text:00409D78                 sahf
.text:00409D79                 jb      short loc_409D82
.text:00409D7B                 cmp     [esp+0BCh+var_44], 8
.text:00409D80                 jl      short loc_409D60
.text:00409D82
.text:00409D82 loc_409D82:                             ; CODE XREF: sub_409880+4F9↑j
.text:00409D82                 fstp    st
.text:00409D84                 fld     [esp+0BCh+var_7C]
.text:00409D88                 cmp     [esp+0BCh+var_30], 1
.text:00409D90                 fdivrp  st(1), st
.text:00409D92                 fld     st
.text:00409D94                 fstp    [esp+0BCh+var_7C]
.text:00409D98                 jz      short loc_409E00
.text:00409D9A                 fld     ds:tbyte_409860
.text:00409DA0                 fucomp  st(1)
.text:00409DA2                 fnstsw  ax
.text:00409DA4                 sahf
.text:00409DA5                 jbe     short loc_409E00
.text:00409DA7                 fstp    [esp+0BCh+var_BC] ; _TBYTE
.text:00409DAA                 xor     ebx, ebx
.text:00409DAC                 call    sub_417FC0
.text:00409DB1                 mov     edi, edx
.text:00409DB3                 xor     ecx, ecx
.text:00409DB5                 mov     edx, [esp+0BCh+var_30]
.text:00409DBC                 mov     esi, eax
.text:00409DBE                 test    edx, edx
.text:00409DC0                 jnz     short loc_409DE8
.text:00409DC2                 push    edi
.text:00409DC3                 push    esi
.text:00409DC4                 fild    [esp+0C4h+var_C4]
.text:00409DC7                 add     esp, 8
.text:00409DCA                 test    edi, edi
.text:00409DCC                 js      loc_409EFC
.text:00409DD2
.text:00409DD2 loc_409DD2:                             ; CODE XREF: sub_409880+682↓j
.text:00409DD2                 fld     [esp+0BCh+var_7C]
.text:00409DD6                 fxch    st(1)
.text:00409DD8                 fucompp
.text:00409DDA                 fnstsw  ax
.text:00409DDC                 sahf
.text:00409DDD                 jp      short loc_409DE1
.text:00409DDF                 jz      short loc_409DE8
.text:00409DE1
.text:00409DE1 loc_409DE1:                             ; CODE XREF: sub_409880+55D↑j
.text:00409DE1                 mov     ecx, 1
.text:00409DE6                 xor     ebx, ebx
.text:00409DE8
.text:00409DE8 loc_409DE8:                             ; CODE XREF: sub_409880+540↑j
.text:00409DE8                                         ; sub_409880+55F↑j
.text:00409DE8                 mov     edx, esi
.text:00409DEA                 add     edx, ecx
.text:00409DEC                 mov     esi, edi
.text:00409DEE                 adc     esi, ebx
.text:00409DF0                 push    esi
.text:00409DF1                 push    edx
.text:00409DF2                 fild    [esp+0C4h+var_C4]
.text:00409DF5                 add     esp, 8
.text:00409DF8                 test    esi, esi
.text:00409DFA                 js      loc_409EF1
.text:00409E00
.text:00409E00 loc_409E00:                             ; CODE XREF: sub_409880+518↑j
.text:00409E00                                         ; sub_409880+525↑j ...
.text:00409E00                 fstp    [esp+0BCh+var_BC+8]
.text:00409E04                 mov     dword ptr [esp+0BCh+var_BC+4], offset a1lf ; "%.1Lf"
.text:00409E0C                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Buffer
.text:00409E0F                 call    sprintf
.text:00409E14                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Str
.text:00409E17                 call    strlen
.text:00409E1C                 mov     ebx, eax
.text:00409E1E                 mov     esi, [esp+0BCh+Size]
.text:00409E22                 mov     eax, [esp+0BCh+Size]
.text:00409E26                 inc     esi
.text:00409E27                 add     eax, 2
.text:00409E2A                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00409E32                 jnz     short loc_409E3B
.text:00409E34                 mov     eax, [esp+0BCh+Size]
.text:00409E38                 add     eax, 3
.text:00409E3B
.text:00409E3B loc_409E3B:                             ; CODE XREF: sub_409880+5B2↑j
.text:00409E3B                 cmp     eax, ebx
.text:00409E3D                 jb      short loc_409E58
.text:00409E3F                 test    byte ptr [esp+0BCh+arg_C], 8
.text:00409E47                 jz      loc_409B50
.text:00409E4D                 cmp     byte ptr [ebx+ebp-1], 30h ; '0'
.text:00409E52                 jnz     loc_409B50
.text:00409E58
.text:00409E58 loc_409E58:                             ; CODE XREF: sub_409880+5BD↑j
.text:00409E58                 cmp     [esp+0BCh+var_30], 1
.text:00409E60                 fld     [esp+0BCh+var_7C]
.text:00409E64                 fld     ds:tbyte_409870
.text:00409E6A                 fmulp   st(1), st
.text:00409E6C                 jz      short loc_409ED0
.text:00409E6E                 fld     ds:tbyte_409860
.text:00409E74                 fucomp  st(1)
.text:00409E76                 fnstsw  ax
.text:00409E78                 sahf
.text:00409E79                 jbe     short loc_409ED0
.text:00409E7B                 fld     st
.text:00409E7D                 fstp    [esp+0BCh+var_BC] ; _TBYTE
.text:00409E80                 xor     ebx, ebx
.text:00409E82                 fstp    [esp+0BCh+var_9C]
.text:00409E86                 call    sub_417FC0
.text:00409E8B                 fld     [esp+0BCh+var_9C]
.text:00409E8F                 mov     edi, edx
.text:00409E91                 xor     ecx, ecx
.text:00409E93                 mov     edx, [esp+0BCh+var_30]
.text:00409E9A                 mov     esi, eax
.text:00409E9C                 test    edx, edx
.text:00409E9E                 jnz     short loc_409EED
.text:00409EA0                 push    edi
.text:00409EA1                 push    esi
.text:00409EA2                 fild    [esp+0C4h+var_C4]
.text:00409EA5                 add     esp, 8
.text:00409EA8                 test    edi, edi
.text:00409EAA                 js      short loc_409EE5
.text:00409EAC
.text:00409EAC loc_409EAC:                             ; CODE XREF: sub_409880+66B↓j
.text:00409EAC                 fucompp
.text:00409EAE                 fnstsw  ax
.text:00409EB0                 sahf
.text:00409EB1                 jp      short loc_409EB5
.text:00409EB3                 jz      short loc_409EBC
.text:00409EB5
.text:00409EB5 loc_409EB5:                             ; CODE XREF: sub_409880+631↑j
.text:00409EB5                 mov     ecx, 1
.text:00409EBA                 xor     ebx, ebx
.text:00409EBC
.text:00409EBC loc_409EBC:                             ; CODE XREF: sub_409880+633↑j
.text:00409EBC                                         ; sub_409880+66F↓j
.text:00409EBC                 mov     edx, esi
.text:00409EBE                 add     edx, ecx
.text:00409EC0                 mov     esi, edi
.text:00409EC2                 adc     esi, ebx
.text:00409EC4                 push    esi
.text:00409EC5                 push    edx
.text:00409EC6                 fild    [esp+0C4h+var_C4]
.text:00409EC9                 add     esp, 8
.text:00409ECC                 test    esi, esi
.text:00409ECE                 js      short loc_409EDD
.text:00409ED0
.text:00409ED0 loc_409ED0:                             ; CODE XREF: sub_409880+5EC↑j
.text:00409ED0                                         ; sub_409880+5F9↑j ...
.text:00409ED0                 fld     ds:tbyte_409870
.text:00409ED6                 fdivp   st(1), st
.text:00409ED8                 jmp     loc_409B30
.text:00409EDD ; ---------------------------------------------------------------------------
.text:00409EDD
.text:00409EDD loc_409EDD:                             ; CODE XREF: sub_409880+64E↑j
.text:00409EDD                 fadd    ds:flt_409858
.text:00409EE3                 jmp     short loc_409ED0
.text:00409EE5 ; ---------------------------------------------------------------------------
.text:00409EE5
.text:00409EE5 loc_409EE5:                             ; CODE XREF: sub_409880+62A↑j
.text:00409EE5                 fadd    ds:flt_409858
.text:00409EEB                 jmp     short loc_409EAC
.text:00409EED ; ---------------------------------------------------------------------------
.text:00409EED
.text:00409EED loc_409EED:                             ; CODE XREF: sub_409880+61E↑j
.text:00409EED                 fstp    st
.text:00409EEF                 jmp     short loc_409EBC
.text:00409EF1 ; ---------------------------------------------------------------------------
.text:00409EF1
.text:00409EF1 loc_409EF1:                             ; CODE XREF: sub_409880+57A↑j
.text:00409EF1                 fadd    ds:flt_409858
.text:00409EF7                 jmp     loc_409E00
.text:00409EFC ; ---------------------------------------------------------------------------
.text:00409EFC
.text:00409EFC loc_409EFC:                             ; CODE XREF: sub_409880+54C↑j
.text:00409EFC                 fadd    ds:flt_409858
.text:00409F02                 jmp     loc_409DD2
.text:00409F07 ; ---------------------------------------------------------------------------
.text:00409F07
.text:00409F07 loc_409F07:                             ; CODE XREF: sub_409880+216↑j
.text:00409F07                 fadd    ds:flt_409858
.text:00409F0D                 jmp     loc_409A9C
.text:00409F12 ; ---------------------------------------------------------------------------
.text:00409F12
.text:00409F12 loc_409F12:                             ; CODE XREF: sub_409880+206↑j
.text:00409F12                 fadd    ds:flt_409858
.text:00409F18                 jmp     loc_409A8C
.text:00409F1D ; ---------------------------------------------------------------------------
.text:00409F1D
.text:00409F1D loc_409F1D:                             ; CODE XREF: sub_409880+1F0↑j
.text:00409F1D                 fadd    ds:flt_409858
.text:00409F23                 jmp     loc_409A76
.text:00409F28 ; ---------------------------------------------------------------------------
.text:00409F28
.text:00409F28 loc_409F28:                             ; CODE XREF: sub_409880+1CD↑j
.text:00409F28                 mov     [esp+0BCh+var_40], 0
.text:00409F30
.text:00409F30 loc_409F30:                             ; CODE XREF: sub_409880+B5E↓j
.text:00409F30                 xor     ebp, ebp
.text:00409F32
.text:00409F32 loc_409F32:                             ; CODE XREF: sub_409880+B4D↓j
.text:00409F32                                         ; sub_409880+B58↓j ...
.text:00409F32                 test    byte ptr [esp+0BCh+arg_C], 10h
.text:00409F3A                 jz      loc_40A0E7
.text:00409F40                 mov     [esp+0BCh+var_44], 0
.text:00409F48                 xor     edx, edx
.text:00409F4A                 mov     eax, [esp+0BCh+var_34]
.text:00409F51                 cmp     edx, [esp+0BCh+var_38]
.text:00409F58                 ja      loc_40A0E7
.text:00409F5E                 jb      short loc_409F6D
.text:00409F60                 cmp     eax, [esp+0BCh+var_3C]
.text:00409F67                 ja      loc_40A0E7
.text:00409F6D
.text:00409F6D loc_409F6D:                             ; CODE XREF: sub_409880+6DE↑j
.text:00409F6D                 mov     esi, eax
.text:00409F6F                 mov     edi, edx
.text:00409F71
.text:00409F71 loc_409F71:                             ; CODE XREF: sub_409880+7AC↓j
.text:00409F71                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00409F75                 mov     ecx, [esp+0BCh+var_3C]
.text:00409F7C                 mov     eax, [esp+0BCh+var_38]
.text:00409F83                 mov     [esp+0BCh+var_B0], edi
.text:00409F87                 mov     dword ptr [esp+0BCh+var_BC], ecx
.text:00409F8A                 mov     dword ptr [esp+0BCh+var_BC+4], eax
.text:00409F8E                 call    sub_417D10
.text:00409F93                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00409F97                 mov     edx, eax
.text:00409F99                 mov     ebx, [esp+0BCh+var_40]
.text:00409F9D                 mov     [esp+0BCh+var_B0], edi
.text:00409FA1                 shl     edx, 2
.text:00409FA4                 mov     ecx, ebp
.text:00409FA6                 add     edx, eax
.text:00409FA8                 lea     eax, [ebx+edx*2]
.text:00409FAB                 xor     edx, edx
.text:00409FAD                 div     [esp+0BCh+var_34]
.text:00409FB4                 sar     ecx, 1
.text:00409FB6                 lea     ebx, [ecx+edx*2]
.text:00409FB9                 mov     [esp+0BCh+var_80], eax
.text:00409FBD                 mov     ecx, [esp+0BCh+var_38]
.text:00409FC4                 mov     edx, [esp+0BCh+var_3C]
.text:00409FCB                 mov     dword ptr [esp+0BCh+var_BC+4], ecx
.text:00409FCF                 mov     dword ptr [esp+0BCh+var_BC], edx
.text:00409FD2                 call    sub_417E90
.text:00409FD7                 cmp     ebx, [esp+0BCh+var_34]
.text:00409FDE                 mov     [esp+0BCh+var_3C], eax
.text:00409FE5                 mov     ecx, [esp+0BCh+var_80]
.text:00409FE9                 mov     [esp+0BCh+var_38], edx
.text:00409FF0                 mov     [esp+0BCh+var_40], ecx
.text:00409FF4                 jnb     loc_40A2A1
.text:00409FFA                 lea     edx, [ebp+ebx+0]
.text:00409FFE                 test    edx, edx
.text:0040A000                 setnz   bl
.text:0040A003                 movzx   ebp, bl
.text:0040A006
.text:0040A006 loc_40A006:                             ; CODE XREF: sub_409880+A33↓j
.text:0040A006                 inc     [esp+0BCh+var_44]
.text:0040A00A                 xor     ebx, ebx
.text:0040A00C                 mov     eax, [esp+0BCh+var_34]
.text:0040A013                 cmp     ebx, [esp+0BCh+var_38]
.text:0040A01A                 ja      short loc_40A032
.text:0040A01C                 jb      short loc_40A027
.text:0040A01E                 cmp     eax, [esp+0BCh+var_3C]
.text:0040A025                 ja      short loc_40A032
.text:0040A027
.text:0040A027 loc_40A027:                             ; CODE XREF: sub_409880+79C↑j
.text:0040A027                 cmp     [esp+0BCh+var_44], 8
.text:0040A02C                 jl      loc_409F71
.text:0040A032
.text:0040A032 loc_40A032:                             ; CODE XREF: sub_409880+79A↑j
.text:0040A032                                         ; sub_409880+7A5↑j
.text:0040A032                 cmp     [esp+0BCh+var_38], 0
.text:0040A03A                 ja      loc_40A0E7
.text:0040A040                 cmp     [esp+0BCh+var_3C], 9
.text:0040A048                 ja      loc_40A0E7
.text:0040A04E                 cmp     [esp+0BCh+var_30], 1
.text:0040A056                 jz      loc_40A289
.text:0040A05C                 mov     eax, [esp+0BCh+var_30]
.text:0040A063                 test    eax, eax
.text:0040A065                 jnz     short loc_40A07F
.text:0040A067                 test    ebp, ebp
.text:0040A069                 jle     short loc_40A07F
.text:0040A06B
.text:0040A06B loc_40A06B:                             ; CODE XREF: sub_409880+A16↓j
.text:0040A06B                 mov     edx, [esp+0BCh+var_80]
.text:0040A06F                 xor     ebp, ebp
.text:0040A071                 inc     edx
.text:0040A072                 mov     [esp+0BCh+var_40], edx
.text:0040A076                 cmp     edx, 0Ah
.text:0040A079                 jz      loc_40A26C
.text:0040A07F
.text:0040A07F loc_40A07F:                             ; CODE XREF: sub_409880+7E5↑j
.text:0040A07F                                         ; sub_409880+7E9↑j ...
.text:0040A07F                 cmp     [esp+0BCh+var_38], 0
.text:0040A087                 ja      short loc_40A0E7
.text:0040A089                 cmp     [esp+0BCh+var_3C], 9
.text:0040A091                 ja      short loc_40A0E7
.text:0040A093                 mov     ecx, [esp+0BCh+var_40]
.text:0040A097                 test    ecx, ecx
.text:0040A099                 jnz     short loc_40A0A5
.text:0040A09B                 test    byte ptr [esp+0BCh+arg_C], 8
.text:0040A0A3                 jnz     short loc_40A0E7
.text:0040A0A5
.text:0040A0A5 loc_40A0A5:                             ; CODE XREF: sub_409880+819↑j
.text:0040A0A5                 movzx   edx, byte ptr [esp+0BCh+var_40]
.text:0040A0AA                 mov     ecx, [esp+0BCh+var_4C]
.text:0040A0AE                 mov     edi, [esp+0BCh+var_4C]
.text:0040A0B2                 dec     ecx
.text:0040A0B3                 add     dl, 30h ; '0'
.text:0040A0B6                 mov     [esp+0BCh+var_48], ecx
.text:0040A0BA                 mov     [edi-1], dl
.text:0040A0BD                 mov     esi, [esp+0BCh+Size]
.text:0040A0C1                 mov     ebx, [esp+0BCh+Src]
.text:0040A0C5                 sub     [esp+0BCh+var_48], esi
.text:0040A0C9                 mov     dword ptr [esp+0BCh+var_BC+8], esi ; Size
.text:0040A0CD                 mov     dword ptr [esp+0BCh+var_BC+4], ebx ; Src
.text:0040A0D1                 mov     ebp, [esp+0BCh+var_48]
.text:0040A0D5                 mov     dword ptr [esp+0BCh+var_BC], ebp ; void *
.text:0040A0D8                 xor     ebp, ebp
.text:0040A0DA                 call    memcpy
.text:0040A0DF                 mov     [esp+0BCh+var_40], 0
.text:0040A0E7
.text:0040A0E7 loc_40A0E7:                             ; CODE XREF: sub_409880+6BA↑j
.text:0040A0E7                                         ; sub_409880+6D8↑j ...
.text:0040A0E7                 cmp     [esp+0BCh+var_30], 1
.text:0040A0EF                 jz      loc_40A231
.text:0040A0F5                 mov     eax, [esp+0BCh+var_30]
.text:0040A0FC                 test    eax, eax
.text:0040A0FE                 jnz     short loc_40A171
.text:0040A100                 mov     edx, [esp+0BCh+var_40]
.text:0040A104                 add     edx, ebp
.text:0040A106                 test    edx, edx
.text:0040A108                 jle     short loc_40A171
.text:0040A10A
.text:0040A10A loc_40A10A:                             ; CODE XREF: sub_409880:loc_40A25A↓j
.text:0040A10A                 add     [esp+0BCh+var_3C], 1
.text:0040A112                 adc     [esp+0BCh+var_38], 0
.text:0040A11A                 test    byte ptr [esp+0BCh+arg_C], 10h
.text:0040A122                 jz      short loc_40A171
.text:0040A124                 mov     esi, [esp+0BCh+var_34]
.text:0040A12B                 xor     ebx, ebx
.text:0040A12D                 mov     ebp, [esp+0BCh+var_38]
.text:0040A134                 mov     ecx, [esp+0BCh+var_3C]
.text:0040A13B                 xor     ebp, ebx
.text:0040A13D                 xor     esi, ecx
.text:0040A13F                 or      ebp, esi
.text:0040A141                 jnz     short loc_40A171
.text:0040A143                 cmp     [esp+0BCh+var_44], 8
.text:0040A148                 jge     short loc_40A171
.text:0040A14A                 inc     [esp+0BCh+var_44]
.text:0040A14E                 test    byte ptr [esp+0BCh+arg_C], 8
.text:0040A156                 jz      loc_40A203
.text:0040A15C
.text:0040A15C loc_40A15C:                             ; CODE XREF: sub_409880+9AC↓j
.text:0040A15C                 mov     ecx, 1
.text:0040A161                 xor     esi, esi
.text:0040A163                 mov     [esp+0BCh+var_3C], ecx
.text:0040A16A                 mov     [esp+0BCh+var_38], esi
.text:0040A171
.text:0040A171 loc_40A171:                             ; CODE XREF: sub_409880+87E↑j
.text:0040A171                                         ; sub_409880+888↑j ...
.text:0040A171                 mov     ebx, [esp+0BCh+var_48]
.text:0040A175                 lea     esi, [esi+0]
.text:0040A179                 lea     edi, [edi+0]
.text:0040A180
.text:0040A180 loc_40A180:                             ; CODE XREF: sub_409880+97C↓j
.text:0040A180                 mov     dword ptr [esp+0BCh+var_BC+8], 0Ah
.text:0040A188                 mov     ecx, [esp+0BCh+var_38]
.text:0040A18F                 mov     ebp, [esp+0BCh+var_3C]
.text:0040A196                 mov     [esp+0BCh+var_B0], 0
.text:0040A19E                 mov     dword ptr [esp+0BCh+var_BC+4], ecx
.text:0040A1A2                 mov     dword ptr [esp+0BCh+var_BC], ebp
.text:0040A1A5                 call    sub_417D10
.text:0040A1AA                 dec     [esp+0BCh+var_48]
.text:0040A1AE                 add     al, 30h ; '0'
.text:0040A1B0                 mov     esi, [esp+0BCh+var_48]
.text:0040A1B4                 mov     [esi], al
.text:0040A1B6                 mov     edx, [esp+0BCh+var_3C]
.text:0040A1BD                 mov     dword ptr [esp+0BCh+var_BC+8], 0Ah
.text:0040A1C5                 mov     edi, [esp+0BCh+var_38]
.text:0040A1CC                 mov     [esp+0BCh+var_B0], 0
.text:0040A1D4                 mov     dword ptr [esp+0BCh+var_BC], edx
.text:0040A1D7                 mov     dword ptr [esp+0BCh+var_BC+4], edi
.text:0040A1DB                 call    sub_417E90
.text:0040A1E0                 mov     [esp+0BCh+var_38], edx
.text:0040A1E7                 mov     ebp, [esp+0BCh+var_38]
.text:0040A1EE                 mov     [esp+0BCh+var_3C], eax
.text:0040A1F5                 or      ebp, [esp+0BCh+var_3C]
.text:0040A1FC                 jnz     short loc_40A180
.text:0040A1FE                 jmp     loc_409B72
.text:0040A203 ; ---------------------------------------------------------------------------
.text:0040A203
.text:0040A203 loc_40A203:                             ; CODE XREF: sub_409880+8D6↑j
.text:0040A203                 dec     [esp+0BCh+var_48]
.text:0040A207                 mov     edi, [esp+0BCh+var_48]
.text:0040A20B                 mov     byte ptr [edi], 30h ; '0'
.text:0040A20E                 mov     edx, [esp+0BCh+Size]
.text:0040A212                 mov     eax, [esp+0BCh+Src]
.text:0040A216                 mov     dword ptr [esp+0BCh+var_BC+8], edx ; Size
.text:0040A21A                 sub     edi, edx
.text:0040A21C                 mov     [esp+0BCh+var_48], edi
.text:0040A220                 mov     dword ptr [esp+0BCh+var_BC+4], eax ; Src
.text:0040A224                 mov     dword ptr [esp+0BCh+var_BC], edi ; void *
.text:0040A227                 call    memcpy
.text:0040A22C                 jmp     loc_40A15C
.text:0040A231 ; ---------------------------------------------------------------------------
.text:0040A231
.text:0040A231 loc_40A231:                             ; CODE XREF: sub_409880+86F↑j
.text:0040A231                 mov     ebx, [esp+0BCh+var_3C]
.text:0040A238                 mov     ecx, ebp
.text:0040A23A                 mov     esi, ebp
.text:0040A23C                 sar     esi, 1Fh
.text:0040A23F                 xor     ebp, ebp
.text:0040A241                 and     ebx, 1
.text:0040A244                 add     ecx, ebx
.text:0040A246                 adc     esi, ebp
.text:0040A248                 cmp     esi, 0
.text:0040A24B                 ja      short loc_40A252
.text:0040A24D                 cmp     ecx, 0
.text:0040A250                 jbe     short loc_40A265
.text:0040A252
.text:0040A252 loc_40A252:                             ; CODE XREF: sub_409880+9CB↑j
.text:0040A252                 mov     edi, [esp+0BCh+var_40]
.text:0040A256                 inc     edi
.text:0040A257                 cmp     edi, 5
.text:0040A25A
.text:0040A25A loc_40A25A:                             ; CODE XREF: sub_409880+9EA↓j
.text:0040A25A                 jg      loc_40A10A
.text:0040A260                 jmp     loc_40A171
.text:0040A265 ; ---------------------------------------------------------------------------
.text:0040A265
.text:0040A265 loc_40A265:                             ; CODE XREF: sub_409880+9D0↑j
.text:0040A265                 cmp     [esp+0BCh+var_40], 5
.text:0040A26A                 jmp     short loc_40A25A
.text:0040A26C ; ---------------------------------------------------------------------------
.text:0040A26C
.text:0040A26C loc_40A26C:                             ; CODE XREF: sub_409880+7F9↑j
.text:0040A26C                 add     [esp+0BCh+var_3C], 1
.text:0040A274                 mov     [esp+0BCh+var_40], 0
.text:0040A27C                 adc     [esp+0BCh+var_38], 0
.text:0040A284                 jmp     loc_40A07F
.text:0040A289 ; ---------------------------------------------------------------------------
.text:0040A289
.text:0040A289 loc_40A289:                             ; CODE XREF: sub_409880+7D6↑j
.text:0040A289                 mov     edi, [esp+0BCh+var_80]
.text:0040A28D                 and     edi, 1
.text:0040A290                 lea     esi, [edi+ebp]
.text:0040A293                 cmp     esi, 2
.text:0040A296                 jg      loc_40A06B
.text:0040A29C                 jmp     loc_40A07F
.text:0040A2A1 ; ---------------------------------------------------------------------------
.text:0040A2A1
.text:0040A2A1 loc_40A2A1:                             ; CODE XREF: sub_409880+774↑j
.text:0040A2A1                 lea     edx, [ebp+ebx+0]
.text:0040A2A5                 cmp     [esp+0BCh+var_34], edx
.text:0040A2AC                 sbb     ecx, ecx
.text:0040A2AE                 not     ecx
.text:0040A2B0                 lea     ebp, [ecx+3]
.text:0040A2B3                 jmp     loc_40A006
.text:0040A2B8 ; ---------------------------------------------------------------------------
.text:0040A2B8
.text:0040A2B8 loc_40A2B8:                             ; CODE XREF: sub_409880+F9↑j
.text:0040A2B8                                         ; sub_409880+108↑j
.text:0040A2B8                 mov     eax, edi
.text:0040A2BA                 or      eax, esi
.text:0040A2BC                 jz      loc_409A60
.text:0040A2C2                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:0040A2C6                 mov     edx, dword ptr [esp+0BCh+var_2C]
.text:0040A2CD                 mov     ecx, dword ptr [esp+0BCh+var_2C+4]
.text:0040A2D4                 mov     [esp+0BCh+var_B0], edi
.text:0040A2D8                 mov     dword ptr [esp+0BCh+var_BC], edx
.text:0040A2DB                 mov     dword ptr [esp+0BCh+var_BC+4], ecx
.text:0040A2DF                 call    sub_417D10
.text:0040A2E4                 mov     ebx, edx
.text:0040A2E6                 or      ebx, eax
.text:0040A2E8                 jnz     loc_409A60
.text:0040A2EE                 mov     [esp+0BCh+var_B0], edi
.text:0040A2F2                 mov     ebp, dword ptr [esp+0BCh+var_2C+4]
.text:0040A2F9                 mov     edi, dword ptr [esp+0BCh+var_2C]
.text:0040A300                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:0040A304                 mov     dword ptr [esp+0BCh+var_BC+4], ebp
.text:0040A308                 mov     dword ptr [esp+0BCh+var_BC], edi
.text:0040A30B                 call    sub_417E90
.text:0040A310                 mov     dword ptr [esp+0BCh+var_BC+8], eax
.text:0040A314                 mov     ebx, dword ptr [esp+0BCh+var_24]
.text:0040A31B                 mov     ebp, edx
.text:0040A31D                 mov     [esp+0BCh+var_B0], edx
.text:0040A321                 mov     esi, dword ptr [esp+0BCh+var_24+4]
.text:0040A328                 mov     edi, eax
.text:0040A32A                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:0040A32D                 mov     dword ptr [esp+0BCh+var_BC+4], esi
.text:0040A331                 call    sub_417D10
.text:0040A336                 mov     dword ptr [esp+0BCh+var_BC+8], edi
.text:0040A33A                 mov     ebx, eax
.text:0040A33C                 mov     esi, edx
.text:0040A33E                 shld    esi, eax, 2
.text:0040A342                 mov     [esp+0BCh+var_B0], ebp
.text:0040A346                 shl     ebx, 2
.text:0040A349                 add     ebx, eax
.text:0040A34B                 adc     esi, edx
.text:0040A34D                 shld    esi, ebx, 1
.text:0040A351                 add     ebx, ebx
.text:0040A353                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:0040A356                 mov     dword ptr [esp+0BCh+var_BC+4], esi
.text:0040A35A                 call    sub_417D10
.text:0040A35F                 shld    edx, eax, 1
.text:0040A363                 mov     ecx, dword ptr [esp+0BCh+var_24]
.text:0040A36A                 add     eax, eax
.text:0040A36C                 mov     [esp+0BCh+var_64], eax
.text:0040A370                 mov     eax, dword ptr [esp+0BCh+var_24+4]
.text:0040A377                 mov     dword ptr [esp+0BCh+var_BC], ecx
.text:0040A37A                 mov     [esp+0BCh+var_60], edx
.text:0040A37E                 mov     dword ptr [esp+0BCh+var_BC+8], edi
.text:0040A382                 mov     [esp+0BCh+var_B0], ebp
.text:0040A386                 mov     dword ptr [esp+0BCh+var_BC+4], eax
.text:0040A38A                 call    sub_417E90
.text:0040A38F                 mov     [esp+0BCh+var_3C], eax
.text:0040A396                 mov     [esp+0BCh+var_38], edx
.text:0040A39D                 mov     dword ptr [esp+0BCh+var_BC+8], edi
.text:0040A3A1                 mov     [esp+0BCh+var_B0], ebp
.text:0040A3A5                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:0040A3A8                 mov     dword ptr [esp+0BCh+var_BC+4], esi
.text:0040A3AC                 call    sub_417E90
.text:0040A3B1                 cmp     [esp+0BCh+var_60], ebp
.text:0040A3B5                 mov     [esp+0BCh+var_40], eax
.text:0040A3B9                 ja      short loc_40A3E3
.text:0040A3BB                 jb      short loc_40A3C3
.text:0040A3BD                 cmp     [esp+0BCh+var_64], edi
.text:0040A3C1                 jnb     short loc_40A3E3
.text:0040A3C3
.text:0040A3C3 loc_40A3C3:                             ; CODE XREF: sub_409880+B3B↑j
.text:0040A3C3                 cmp     [esp+0BCh+var_60], 0
.text:0040A3C8                 mov     ebp, 1
.text:0040A3CD                 ja      loc_409F32
.text:0040A3D3                 cmp     [esp+0BCh+var_64], 0
.text:0040A3D8                 ja      loc_409F32
.text:0040A3DE                 jmp     loc_409F30
.text:0040A3E3 ; ---------------------------------------------------------------------------
.text:0040A3E3
.text:0040A3E3 loc_40A3E3:                             ; CODE XREF: sub_409880+B39↑j
.text:0040A3E3                                         ; sub_409880+B41↑j
.text:0040A3E3                 cmp     ebp, [esp+0BCh+var_60]
.text:0040A3E7                 ja      short loc_40A3FB
.text:0040A3E9                 jb      short loc_40A3F1
.text:0040A3EB                 cmp     edi, [esp+0BCh+var_64]
.text:0040A3EF                 jnb     short loc_40A3FB
.text:0040A3F1
.text:0040A3F1 loc_40A3F1:                             ; CODE XREF: sub_409880+B69↑j
.text:0040A3F1                 mov     ebp, 3
.text:0040A3F6                 jmp     loc_409F32
.text:0040A3FB ; ---------------------------------------------------------------------------
.text:0040A3FB
.text:0040A3FB loc_40A3FB:                             ; CODE XREF: sub_409880+B67↑j
.text:0040A3FB                                         ; sub_409880+B6F↑j
.text:0040A3FB                 mov     ebp, 2
.text:0040A400                 jmp     loc_409F32
.text:0040A400 sub_409880      endp
.text:0040A400
.text:0040A400 ; ---------------------------------------------------------------------------
.text:0040A405 aHumanReadable  db 'human-readable',0   ; DATA XREF: .text:off_40A418↓o
.text:0040A414 aSi             db 'si',0               ; DATA XREF: .text:0040A41C↓o
.text:0040A417                 align 4
.text:0040A418 off_40A418      dd offset aHumanReadable
.text:0040A418                                         ; DATA XREF: sub_40A6A0+3A↓o
.text:0040A418                                         ; "human-readable"
.text:0040A41C                 dd offset aSi           ; "si"
.text:0040A420                 dd 0
.text:0040A424 dword_40A424    dd 0B0h                 ; DATA XREF: sub_40A6A0+32↓o
.text:0040A424                                         ; sub_40A6A0+54↓r
.text:0040A428                 db 90h
.text:0040A429                 align 4
.text:0040A42C aBlockSize      db 'block size',0       ; DATA XREF: sub_40A4B0:loc_40A512↓o
.text:0040A42C                                         ; sub_40A4B0:loc_40A564↓o ...
.text:0040A437 ; const char aSSTooLarge[]
.text:0040A437 aSSTooLarge     db '%s `%s',27h,' too large',0
.text:0040A437                                         ; DATA XREF: sub_40A4B0+73↓o
.text:0040A449                 align 20h
.text:0040A460 aInvalidCharact db 'invalid character following %s in `%s',27h,0
.text:0040A460                                         ; DATA XREF: sub_40A4B0+C5↓o
.text:0040A487 aInvalidSS      db 'invalid %s `%s',27h,0
.text:0040A487                                         ; DATA XREF: sub_40A4B0+E6↓o
.text:0040A497 ; const char aPosixlyCorrect[]
.text:0040A497 aPosixlyCorrect db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_40A4B0:loc_40A5A0↓o
.text:0040A497                                         ; sub_40A6A0+11A↓o
.text:0040A4A7                 align 10h
.text:0040A4B0
.text:0040A4B0 ; =============== S U B R O U T I N E =======================================
.text:0040A4B0
.text:0040A4B0
.text:0040A4B0 ; int __cdecl sub_40A4B0(char *, char, int)
.text:0040A4B0 sub_40A4B0      proc near               ; CODE XREF: sub_402250+CA↑p
.text:0040A4B0
.text:0040A4B0 VarName         = dword ptr -2Ch
.text:0040A4B0 ErrorMessage    = dword ptr -28h
.text:0040A4B0 var_24          = dword ptr -24h
.text:0040A4B0 var_20          = byte ptr -20h
.text:0040A4B0 var_1C          = dword ptr -1Ch
.text:0040A4B0 var_11          = byte ptr -11h
.text:0040A4B0 var_10          = dword ptr -10h
.text:0040A4B0 var_C           = dword ptr -0Ch
.text:0040A4B0 var_8           = dword ptr -8
.text:0040A4B0 var_4           = dword ptr -4
.text:0040A4B0 arg_0           = dword ptr  4
.text:0040A4B0 arg_4           = byte ptr  8
.text:0040A4B0 arg_8           = dword ptr  0Ch
.text:0040A4B0
.text:0040A4B0                 sub     esp, 2Ch
.text:0040A4B3                 movzx   edx, [esp+2Ch+arg_4]
.text:0040A4B8                 mov     [esp+2Ch+var_C], ebx
.text:0040A4BC                 mov     ebx, [esp+2Ch+arg_8]
.text:0040A4C0                 mov     [esp+2Ch+var_8], esi
.text:0040A4C4                 mov     esi, [esp+2Ch+arg_0]
.text:0040A4C8                 mov     [esp+2Ch+var_11], dl
.text:0040A4CC                 lea     edx, [esp+2Ch+var_10]
.text:0040A4D0                 mov     [esp+2Ch+var_4], edi
.text:0040A4D4                 mov     [esp+2Ch+var_24], edx ; int
.text:0040A4D8                 mov     [esp+2Ch+ErrorMessage], ebx ; int
.text:0040A4DC                 mov     [esp+2Ch+VarName], esi ; char *
.text:0040A4DF                 call    sub_40A6A0
.text:0040A4E4                 mov     edx, [ebx+4]
.text:0040A4E7                 mov     ecx, eax
.text:0040A4E9                 mov     eax, [ebx]
.text:0040A4EB                 mov     edi, edx
.text:0040A4ED                 or      edi, eax
.text:0040A4EF                 jz      loc_40A5A0
.text:0040A4F5
.text:0040A4F5 loc_40A4F5:                             ; CODE XREF: sub_40A4B0+118↓j
.text:0040A4F5                 test    ecx, ecx
.text:0040A4F7                 jz      short loc_40A550
.text:0040A4F9                 cmp     [esp+2Ch+var_11], 0
.text:0040A4FE                 jz      short loc_40A550
.text:0040A500                 cmp     ecx, 3
.text:0040A503                 ja      short loc_40A580
.text:0040A505                 cmp     ecx, 2
.text:0040A508                 jnb     short loc_40A564
.text:0040A50A                 dec     ecx
.text:0040A50B                 jz      short loc_40A512
.text:0040A50D
.text:0040A50D loc_40A50D:                             ; CODE XREF: sub_40A4B0+D3↓j
.text:0040A50D                 call    abort
.text:0040A512 ; ---------------------------------------------------------------------------
.text:0040A512
.text:0040A512 loc_40A512:                             ; CODE XREF: sub_40A4B0+5B↑j
.text:0040A512                 mov     [esp+2Ch+VarName], offset aBlockSize ; "block size"
.text:0040A519                 call    ds:libintl_gettext
.text:0040A51F                 mov     [esp+2Ch+var_1C], esi
.text:0040A523                 mov     [esp+2Ch+var_24], offset aSSTooLarge ; "%s `%s' too large"
.text:0040A52B
.text:0040A52B loc_40A52B:                             ; CODE XREF: sub_40A4B0+CD↓j
.text:0040A52B                                         ; sub_40A4B0+EE↓j
.text:0040A52B                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040A52F                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:0040A537                 mov     ecx, dword_41A050
.text:0040A53D                 mov     [esp+2Ch+VarName], ecx ; Code
.text:0040A540                 call    sub_40E9E0
.text:0040A545                 lea     esi, [esi+0]
.text:0040A549                 lea     edi, [edi+0]
.text:0040A550
.text:0040A550 loc_40A550:                             ; CODE XREF: sub_40A4B0+47↑j
.text:0040A550                                         ; sub_40A4B0+4E↑j
.text:0040A550                 mov     eax, [esp+2Ch+var_10]
.text:0040A554                 mov     ebx, [esp+2Ch+var_C]
.text:0040A558                 mov     esi, [esp+2Ch+var_8]
.text:0040A55C                 mov     edi, [esp+2Ch+var_4]
.text:0040A560                 add     esp, 2Ch
.text:0040A563                 retn
.text:0040A564 ; ---------------------------------------------------------------------------
.text:0040A564
.text:0040A564 loc_40A564:                             ; CODE XREF: sub_40A4B0+58↑j
.text:0040A564                 mov     [esp+2Ch+VarName], offset aBlockSize ; "block size"
.text:0040A56B                 call    ds:libintl_gettext
.text:0040A571                 mov     [esp+2Ch+var_1C], esi
.text:0040A575                 mov     [esp+2Ch+var_24], offset aInvalidCharact ; "invalid character following %s in `%s'"
.text:0040A57D                 jmp     short loc_40A52B
.text:0040A57D ; ---------------------------------------------------------------------------
.text:0040A57F                 align 10h
.text:0040A580
.text:0040A580 loc_40A580:                             ; CODE XREF: sub_40A4B0+53↑j
.text:0040A580                 cmp     ecx, 4
.text:0040A583                 jnz     short loc_40A50D
.text:0040A585                 mov     [esp+2Ch+VarName], offset aBlockSize ; "block size"
.text:0040A58C                 call    ds:libintl_gettext
.text:0040A592                 mov     [esp+2Ch+var_1C], esi
.text:0040A596                 mov     [esp+2Ch+var_24], offset aInvalidSS ; "invalid %s `%s'"
.text:0040A59E                 jmp     short loc_40A52B
.text:0040A5A0 ; ---------------------------------------------------------------------------
.text:0040A5A0
.text:0040A5A0 loc_40A5A0:                             ; CODE XREF: sub_40A4B0+3F↑j
.text:0040A5A0                 mov     [esp+2Ch+VarName], offset aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:0040A5A7                 call    getenv
.text:0040A5AC                 xor     ecx, ecx
.text:0040A5AE                 mov     edx, 200h
.text:0040A5B3                 test    eax, eax
.text:0040A5B5                 jnz     short loc_40A5BE
.text:0040A5B7                 mov     edx, 400h
.text:0040A5BC                 xor     ecx, ecx
.text:0040A5BE
.text:0040A5BE loc_40A5BE:                             ; CODE XREF: sub_40A4B0+105↑j
.text:0040A5BE                 mov     [ebx+4], ecx
.text:0040A5C1                 mov     ecx, 4
.text:0040A5C6                 mov     [ebx], edx
.text:0040A5C8                 jmp     loc_40A4F5
.text:0040A5C8 sub_40A4B0      endp
.text:0040A5C8
.text:0040A5C8 ; ---------------------------------------------------------------------------
.text:0040A5CD                 align 10h
.text:0040A5D0
.text:0040A5D0 ; =============== S U B R O U T I N E =======================================
.text:0040A5D0
.text:0040A5D0
.text:0040A5D0 ; int __cdecl sub_40A5D0(void *, size_t, int, char *)
.text:0040A5D0 sub_40A5D0      proc near               ; CODE XREF: sub_409880+492↑p
.text:0040A5D0
.text:0040A5D0 Str             = dword ptr -6Ch
.text:0040A5D0 Src             = dword ptr -68h
.text:0040A5D0 Size            = dword ptr -64h
.text:0040A5D0 var_50          = dword ptr -50h
.text:0040A5D0 var_4C          = byte ptr -4Ch
.text:0040A5D0 arg_0           = dword ptr  4
.text:0040A5D0 arg_4           = dword ptr  8
.text:0040A5D0 arg_8           = dword ptr  0Ch
.text:0040A5D0 arg_C           = dword ptr  10h
.text:0040A5D0
.text:0040A5D0                 push    ebp
.text:0040A5D1                 push    edi
.text:0040A5D2                 mov     edi, 0FFFFFFFFh
.text:0040A5D7                 push    esi
.text:0040A5D8                 push    ebx
.text:0040A5D9                 sub     esp, 5Ch
.text:0040A5DC                 mov     edx, [esp+6Ch+arg_C]
.text:0040A5E0                 mov     ebx, [esp+6Ch+arg_0]
.text:0040A5E4                 mov     ebp, [esp+6Ch+arg_8]
.text:0040A5E8                 mov     [esp+6Ch+Str], edx ; Str
.text:0040A5EB                 call    strlen
.text:0040A5F0                 mov     [esp+6Ch+var_50], eax
.text:0040A5F4                 mov     esi, [esp+6Ch+arg_4]
.text:0040A5F8                 lea     edx, [esp+6Ch+var_4C]
.text:0040A5FC                 mov     [esp+6Ch+Src], ebx ; Src
.text:0040A600                 mov     [esp+6Ch+Str], edx ; void *
.text:0040A603                 add     ebx, esi
.text:0040A605                 mov     [esp+6Ch+Size], esi ; Size
.text:0040A609                 lea     esi, [esi+0]
.text:0040A610
.text:0040A610 loc_40A610:                             ; CODE XREF: sub_40A5D0+94↓j
.text:0040A610                 call    memcpy
.text:0040A615                 movzx   eax, byte ptr [ebp+0]
.text:0040A619                 test    al, al
.text:0040A61B                 jz      short loc_40A627
.text:0040A61D                 cmp     al, 7Eh ; '~'
.text:0040A61F                 mov     edi, esi
.text:0040A621                 ja      short loc_40A626
.text:0040A623                 movzx   edi, al
.text:0040A626
.text:0040A626 loc_40A626:                             ; CODE XREF: sub_40A5D0+51↑j
.text:0040A626                 inc     ebp
.text:0040A627
.text:0040A627 loc_40A627:                             ; CODE XREF: sub_40A5D0+4B↑j
.text:0040A627                 cmp     esi, edi
.text:0040A629                 jnb     short loc_40A62D
.text:0040A62B                 mov     edi, esi
.text:0040A62D
.text:0040A62D loc_40A62D:                             ; CODE XREF: sub_40A5D0+59↑j
.text:0040A62D                 mov     [esp+6Ch+Size], edi ; Size
.text:0040A631                 sub     esi, edi
.text:0040A633                 lea     ecx, [esp+6Ch+var_4C]
.text:0040A637                 add     ecx, esi
.text:0040A639                 sub     ebx, edi
.text:0040A63B                 mov     [esp+6Ch+Src], ecx ; Src
.text:0040A63F                 mov     [esp+6Ch+Str], ebx ; void *
.text:0040A642                 call    memcpy
.text:0040A647                 test    esi, esi
.text:0040A649                 jz      short loc_40A666
.text:0040A64B                 mov     edx, [esp+6Ch+var_50]
.text:0040A64F                 mov     ecx, [esp+6Ch+var_50]
.text:0040A653                 sub     ebx, edx
.text:0040A655                 mov     [esp+6Ch+Size], ecx
.text:0040A659                 mov     edx, [esp+6Ch+arg_C]
.text:0040A65D                 mov     [esp+6Ch+Str], ebx
.text:0040A660                 mov     [esp+6Ch+Src], edx
.text:0040A664                 jmp     short loc_40A610
.text:0040A666 ; ---------------------------------------------------------------------------
.text:0040A666
.text:0040A666 loc_40A666:                             ; CODE XREF: sub_40A5D0+79↑j
.text:0040A666                 add     esp, 5Ch
.text:0040A669                 mov     eax, ebx
.text:0040A66B                 pop     ebx
.text:0040A66C                 pop     esi
.text:0040A66D                 pop     edi
.text:0040A66E                 pop     ebp
.text:0040A66F                 retn
.text:0040A66F sub_40A5D0      endp
.text:0040A66F
.text:0040A66F ; ---------------------------------------------------------------------------
.text:0040A670 ; const char aEeggkkmmppttyy[]
.text:0040A670 aEeggkkmmppttyy db 'eEgGkKmMpPtTyYzZ0',0
.text:0040A670                                         ; DATA XREF: sub_40A6A0:loc_40A720↓o
.text:0040A682 ; const char aBlockSize_0[]
.text:0040A682 aBlockSize_0    db 'BLOCK_SIZE',0       ; DATA XREF: sub_40A6A0:loc_40A78E↓o
.text:0040A68D ; const char aBlocksize[]
.text:0040A68D aBlocksize      db 'BLOCKSIZE',0        ; DATA XREF: sub_40A6A0+104↓o
.text:0040A697                 align 10h
.text:0040A6A0
.text:0040A6A0 ; =============== S U B R O U T I N E =======================================
.text:0040A6A0
.text:0040A6A0
.text:0040A6A0 ; int __cdecl sub_40A6A0(char *, int, int)
.text:0040A6A0 sub_40A6A0      proc near               ; CODE XREF: sub_40A4B0+2F↑p
.text:0040A6A0
.text:0040A6A0 VarName         = dword ptr -2Ch
.text:0040A6A0 var_28          = dword ptr -28h
.text:0040A6A0 var_24          = dword ptr -24h
.text:0040A6A0 var_20          = dword ptr -20h
.text:0040A6A0 Str             = dword ptr -1Ch
.text:0040A6A0 var_10          = dword ptr -10h
.text:0040A6A0 var_C           = dword ptr -0Ch
.text:0040A6A0 var_8           = dword ptr -8
.text:0040A6A0 var_4           = dword ptr -4
.text:0040A6A0 arg_0           = dword ptr  4
.text:0040A6A0 arg_4           = dword ptr  8
.text:0040A6A0 arg_8           = dword ptr  0Ch
.text:0040A6A0
.text:0040A6A0                 sub     esp, 2Ch
.text:0040A6A3                 mov     [esp+2Ch+var_C], ebx
.text:0040A6A7                 mov     ebx, [esp+2Ch+arg_0]
.text:0040A6AB                 mov     [esp+2Ch+var_8], esi
.text:0040A6AF                 xor     esi, esi
.text:0040A6B1                 test    ebx, ebx
.text:0040A6B3                 mov     [esp+2Ch+var_4], edi
.text:0040A6B7                 mov     edi, [esp+2Ch+arg_4]
.text:0040A6BB                 jz      loc_40A78E
.text:0040A6C1
.text:0040A6C1 loc_40A6C1:                             ; CODE XREF: sub_40A6A0+FE↓j
.text:0040A6C1                                         ; sub_40A6A0+114↓j
.text:0040A6C1                 cmp     byte ptr [ebx], 27h ; '''
.text:0040A6C4                 jz      loc_40A783
.text:0040A6CA
.text:0040A6CA loc_40A6CA:                             ; CODE XREF: sub_40A6A0+E9↓j
.text:0040A6CA                 mov     [esp+2Ch+var_20], 4 ; int
.text:0040A6D2                 mov     [esp+2Ch+var_24], offset dword_40A424 ; int
.text:0040A6DA                 mov     [esp+2Ch+var_28], offset off_40A418 ; int
.text:0040A6E2                 mov     [esp+2Ch+VarName], ebx ; char *
.text:0040A6E5                 call    sub_40E3E0
.text:0040A6EA                 test    eax, eax
.text:0040A6EC                 js      short loc_40A720
.text:0040A6EE                 mov     dword ptr [edi], 1
.text:0040A6F4                 mov     ecx, ds:dword_40A424[eax*4]
.text:0040A6FB                 mov     dword ptr [edi+4], 0
.text:0040A702                 or      esi, ecx
.text:0040A704
.text:0040A704 loc_40A704:                             ; CODE XREF: sub_40A6A0+B9↓j
.text:0040A704                                         ; sub_40A6A0+D3↓j ...
.text:0040A704                 mov     ebx, [esp+2Ch+arg_8]
.text:0040A708                 xor     eax, eax
.text:0040A70A                 mov     [ebx], esi
.text:0040A70C
.text:0040A70C loc_40A70C:                             ; CODE XREF: sub_40A6A0+A6↓j
.text:0040A70C                 mov     ebx, [esp+2Ch+var_C]
.text:0040A710                 mov     esi, [esp+2Ch+var_8]
.text:0040A714                 mov     edi, [esp+2Ch+var_4]
.text:0040A718                 add     esp, 2Ch
.text:0040A71B                 retn
.text:0040A71B ; ---------------------------------------------------------------------------
.text:0040A71C                 align 10h
.text:0040A720
.text:0040A720 loc_40A720:                             ; CODE XREF: sub_40A6A0+4C↑j
.text:0040A720                 mov     [esp+2Ch+Str], offset aEeggkkmmppttyy ; "eEgGkKmMpPtTyYzZ0"
.text:0040A728                 lea     edx, [esp+2Ch+var_10]
.text:0040A72C                 mov     [esp+2Ch+var_20], edi ; int
.text:0040A730                 mov     [esp+2Ch+var_24], 0 ; int
.text:0040A738                 mov     [esp+2Ch+var_28], edx ; int
.text:0040A73C                 mov     [esp+2Ch+VarName], ebx ; int
.text:0040A73F                 call    sub_40D750
.text:0040A744                 test    eax, eax
.text:0040A746                 jnz     short loc_40A70C
.text:0040A748                 nop
.text:0040A749                 lea     esi, [esi+0]
.text:0040A750
.text:0040A750 loc_40A750:                             ; CODE XREF: sub_40A6A0+C2↓j
.text:0040A750                 movzx   ecx, byte ptr [ebx]
.text:0040A753                 sub     cl, 30h ; '0'
.text:0040A756                 cmp     cl, 9
.text:0040A759                 jbe     short loc_40A704
.text:0040A75B                 cmp     ebx, [esp+2Ch+var_10]
.text:0040A75F                 jz      short loc_40A764
.text:0040A761                 inc     ebx
.text:0040A762                 jmp     short loc_40A750
.text:0040A764 ; ---------------------------------------------------------------------------
.text:0040A764
.text:0040A764 loc_40A764:                             ; CODE XREF: sub_40A6A0+BF↑j
.text:0040A764                 or      esi, 80h
.text:0040A76A                 cmp     byte ptr [ebx-1], 42h ; 'B'
.text:0040A76E                 jz      short loc_40A775
.text:0040A770
.text:0040A770 loc_40A770:                             ; CODE XREF: sub_40A6A0+E1↓j
.text:0040A770                 or      esi, 20h
.text:0040A773                 jmp     short loc_40A704
.text:0040A775 ; ---------------------------------------------------------------------------
.text:0040A775
.text:0040A775 loc_40A775:                             ; CODE XREF: sub_40A6A0+CE↑j
.text:0040A775                 or      esi, 100h
.text:0040A77B                 cmp     byte ptr [ebx-2], 69h ; 'i'
.text:0040A77F                 jnz     short loc_40A704
.text:0040A781                 jmp     short loc_40A770
.text:0040A783 ; ---------------------------------------------------------------------------
.text:0040A783
.text:0040A783 loc_40A783:                             ; CODE XREF: sub_40A6A0+24↑j
.text:0040A783                 mov     esi, 4
.text:0040A788                 inc     ebx
.text:0040A789                 jmp     loc_40A6CA
.text:0040A78E ; ---------------------------------------------------------------------------
.text:0040A78E
.text:0040A78E loc_40A78E:                             ; CODE XREF: sub_40A6A0+1B↑j
.text:0040A78E                 mov     [esp+2Ch+VarName], offset aBlockSize_0 ; "BLOCK_SIZE"
.text:0040A795                 call    getenv
.text:0040A79A                 test    eax, eax
.text:0040A79C                 mov     ebx, eax
.text:0040A79E                 jnz     loc_40A6C1
.text:0040A7A4                 mov     [esp+2Ch+VarName], offset aBlocksize ; "BLOCKSIZE"
.text:0040A7AB                 call    getenv
.text:0040A7B0                 test    eax, eax
.text:0040A7B2                 mov     ebx, eax
.text:0040A7B4                 jnz     loc_40A6C1
.text:0040A7BA                 mov     [esp+2Ch+VarName], offset aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:0040A7C1                 call    getenv
.text:0040A7C6                 xor     ecx, ecx
.text:0040A7C8                 mov     edx, 200h
.text:0040A7CD                 test    eax, eax
.text:0040A7CF                 jnz     short loc_40A7D8
.text:0040A7D1                 mov     edx, 400h
.text:0040A7D6                 xor     ecx, ecx
.text:0040A7D8
.text:0040A7D8 loc_40A7D8:                             ; CODE XREF: sub_40A6A0+12F↑j
.text:0040A7D8                 mov     [edi], edx
.text:0040A7DA                 mov     [edi+4], ecx
.text:0040A7DD                 jmp     loc_40A704
.text:0040A7DD sub_40A6A0      endp
.text:0040A7DD
.text:0040A7DD ; ---------------------------------------------------------------------------
.text:0040A7E2                 align 20h
.text:0040A800                 mov     edx, [esp+4]
.text:0040A804                 mov     ds:dword_41B250, edx
.text:0040A80A                 retn
.text:0040A80A ; ---------------------------------------------------------------------------
.text:0040A80B aWriteError     db 'write error',0      ; DATA XREF: sub_40A830:loc_40A879↓o
.text:0040A817 ; const char aSS_0[]
.text:0040A817 aSS_0           db '%s: %s',0           ; DATA XREF: sub_40A830+77↓o
.text:0040A81E ; const char aS_4[]
.text:0040A81E aS_4            db '%s',0               ; DATA XREF: sub_40A830+A0↓o
.text:0040A821 ; ---------------------------------------------------------------------------
.text:0040A821                 jmp     short sub_40A830
.text:0040A821 ; ---------------------------------------------------------------------------
.text:0040A823                 align 10h
.text:0040A830
.text:0040A830 ; =============== S U B R O U T I N E =======================================
.text:0040A830
.text:0040A830
.text:0040A830 ; void __cdecl sub_40A830()
.text:0040A830 sub_40A830      proc near               ; CODE XREF: .text:0040A821↑j
.text:0040A830                                         ; DATA XREF: sub_402250+95↑o
.text:0040A830
.text:0040A830 Stream          = dword ptr -2Ch
.text:0040A830 ErrorMessage    = dword ptr -28h
.text:0040A830 var_24          = dword ptr -24h
.text:0040A830 var_20          = byte ptr -20h
.text:0040A830 var_1C          = dword ptr -1Ch
.text:0040A830 var_9           = byte ptr -9
.text:0040A830
.text:0040A830                 push    esi
.text:0040A831                 push    ebx
.text:0040A832                 sub     esp, 24h
.text:0040A835                 mov     edx, ds:_iob
.text:0040A83B                 mov     ecx, [edx+2Ch]
.text:0040A83E                 lea     esi, [edx+20h]
.text:0040A841                 shr     ecx, 5
.text:0040A844                 mov     bl, cl
.text:0040A846                 mov     ecx, [edx+20h]
.text:0040A849                 and     bl, 1
.text:0040A84C                 cmp     ecx, [esi+8]
.text:0040A84F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040A852                 setz    [esp+2Ch+var_9]
.text:0040A857                 call    fclose
.text:0040A85C                 test    eax, eax
.text:0040A85E                 setnz   al
.text:0040A861                 test    bl, bl
.text:0040A863                 jnz     loc_40A8F3
.text:0040A869                 test    al, al
.text:0040A86B                 jz      short loc_40A8C0
.text:0040A86D
.text:0040A86D loc_40A86D:                             ; CODE XREF: sub_40A830+CD↓j
.text:0040A86D                 call    _errno
.text:0040A872                 mov     esi, [eax]
.text:0040A874
.text:0040A874 loc_40A874:                             ; CODE XREF: sub_40A830+C7↓j
.text:0040A874                 cmp     esi, 9
.text:0040A877                 jz      short loc_40A8E6
.text:0040A879
.text:0040A879 loc_40A879:                             ; CODE XREF: sub_40A830+B8↓j
.text:0040A879                                         ; sub_40A830+C1↓j
.text:0040A879                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:0040A880                 call    ds:libintl_gettext
.text:0040A886                 mov     ebx, eax
.text:0040A888                 mov     eax, ds:dword_41B250
.text:0040A88D                 test    eax, eax
.text:0040A88F                 jz      short loc_40A8C6
.text:0040A891                 mov     [esp+2Ch+Stream], eax ; char *
.text:0040A894                 call    sub_4061B0
.text:0040A899                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040A89D                 mov     edx, dword_41A050
.text:0040A8A3                 mov     [esp+2Ch+var_1C], ebx
.text:0040A8A7                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040A8AF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040A8B3                 mov     [esp+2Ch+Stream], edx ; Code
.text:0040A8B6                 call    sub_40E9E0
.text:0040A8BB                 nop
.text:0040A8BC                 lea     esi, [esi+0]
.text:0040A8C0
.text:0040A8C0 loc_40A8C0:                             ; CODE XREF: sub_40A830+3B↑j
.text:0040A8C0                                         ; sub_40A830+B4↓j ...
.text:0040A8C0                 add     esp, 24h
.text:0040A8C3                 pop     ebx
.text:0040A8C4                 pop     esi
.text:0040A8C5                 retn
.text:0040A8C6 ; ---------------------------------------------------------------------------
.text:0040A8C6
.text:0040A8C6 loc_40A8C6:                             ; CODE XREF: sub_40A830+5F↑j
.text:0040A8C6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040A8CA                 mov     ebx, dword_41A050
.text:0040A8D0                 mov     [esp+2Ch+var_24], offset aS_4 ; "%s"
.text:0040A8D8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040A8DC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040A8DF                 call    sub_40E9E0
.text:0040A8E4                 jmp     short loc_40A8C0
.text:0040A8E6 ; ---------------------------------------------------------------------------
.text:0040A8E6
.text:0040A8E6 loc_40A8E6:                             ; CODE XREF: sub_40A830+47↑j
.text:0040A8E6                 test    bl, bl
.text:0040A8E8                 jnz     short loc_40A879
.text:0040A8EA                 cmp     [esp+2Ch+var_9], 0
.text:0040A8EF                 jnz     short loc_40A8C0
.text:0040A8F1                 jmp     short loc_40A879
.text:0040A8F3 ; ---------------------------------------------------------------------------
.text:0040A8F3
.text:0040A8F3 loc_40A8F3:                             ; CODE XREF: sub_40A830+33↑j
.text:0040A8F3                 xor     esi, esi
.text:0040A8F5                 test    al, al
.text:0040A8F7                 jz      loc_40A874
.text:0040A8FD                 jmp     loc_40A86D
.text:0040A8FD sub_40A830      endp
.text:0040A8FD
.text:0040A8FD ; ---------------------------------------------------------------------------
.text:0040A902                 align 10h
.text:0040A910                 sub     esp, 0Ch
.text:0040A913                 xor     edx, edx
.text:0040A915                 mov     ecx, [esp+14h]
.text:0040A919                 mov     [esp+8], ebx
.text:0040A91D                 mov     eax, 0FFFFFFFFh
.text:0040A922                 mov     ebx, [esp+10h]
.text:0040A926                 div     ecx
.text:0040A928                 cmp     eax, ebx
.text:0040A92A                 jb      short loc_40A949
.text:0040A92C                 mov     edx, ebx
.text:0040A92E                 imul    edx, ecx
.text:0040A931                 mov     [esp], edx
.text:0040A934                 call    malloc
.text:0040A939                 test    eax, eax
.text:0040A93B                 jz      short loc_40A945
.text:0040A93D
.text:0040A93D loc_40A93D:                             ; CODE XREF: .text:0040A947↓j
.text:0040A93D                 mov     ebx, [esp+8]
.text:0040A941                 add     esp, 0Ch
.text:0040A944                 retn
.text:0040A945 ; ---------------------------------------------------------------------------
.text:0040A945
.text:0040A945 loc_40A945:                             ; CODE XREF: .text:0040A93B↑j
.text:0040A945                 test    ebx, ebx
.text:0040A947                 jz      short loc_40A93D
.text:0040A949
.text:0040A949 loc_40A949:                             ; CODE XREF: .text:0040A92A↑j
.text:0040A949                 call    sub_40AC60
.text:0040A949 ; ---------------------------------------------------------------------------
.text:0040A94E                 align 10h
.text:0040A950
.text:0040A950 ; =============== S U B R O U T I N E =======================================
.text:0040A950
.text:0040A950
.text:0040A950 ; int __cdecl sub_40A950(size_t)
.text:0040A950 sub_40A950      proc near               ; CODE XREF: sub_403100+485↑p
.text:0040A950                                         ; .text:00405B89↑p ...
.text:0040A950
.text:0040A950 Size            = dword ptr -0Ch
.text:0040A950 var_4           = dword ptr -4
.text:0040A950 arg_0           = dword ptr  4
.text:0040A950
.text:0040A950                 sub     esp, 0Ch
.text:0040A953                 mov     [esp+0Ch+var_4], ebx
.text:0040A957                 mov     ebx, [esp+0Ch+arg_0]
.text:0040A95B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040A95E                 call    malloc
.text:0040A963                 test    eax, eax
.text:0040A965                 jz      short loc_40A970
.text:0040A967
.text:0040A967 loc_40A967:                             ; CODE XREF: sub_40A950+22↓j
.text:0040A967                 mov     ebx, [esp+0Ch+var_4]
.text:0040A96B                 add     esp, 0Ch
.text:0040A96E                 retn
.text:0040A96E ; ---------------------------------------------------------------------------
.text:0040A96F                 align 10h
.text:0040A970
.text:0040A970 loc_40A970:                             ; CODE XREF: sub_40A950+15↑j
.text:0040A970                 test    ebx, ebx
.text:0040A972                 jz      short loc_40A967
.text:0040A974                 call    sub_40AC60
.text:0040A974 sub_40A950      endp
.text:0040A974
.text:0040A974 ; ---------------------------------------------------------------------------
.text:0040A979                 align 10h
.text:0040A980
.text:0040A980 ; =============== S U B R O U T I N E =======================================
.text:0040A980
.text:0040A980
.text:0040A980 ; int __cdecl sub_40A980(void *, int, int)
.text:0040A980 sub_40A980      proc near               ; CODE XREF: sub_403100+340↑p
.text:0040A980                                         ; sub_403100+35F↑p
.text:0040A980
.text:0040A980 Block           = dword ptr -1Ch
.text:0040A980 Size            = dword ptr -18h
.text:0040A980 var_8           = dword ptr -8
.text:0040A980 var_4           = dword ptr -4
.text:0040A980 arg_0           = dword ptr  4
.text:0040A980 arg_4           = dword ptr  8
.text:0040A980 arg_8           = dword ptr  0Ch
.text:0040A980
.text:0040A980                 sub     esp, 1Ch
.text:0040A983                 xor     edx, edx
.text:0040A985                 mov     eax, 0FFFFFFFFh
.text:0040A98A                 mov     [esp+1Ch+var_8], ebx
.text:0040A98E                 mov     ecx, [esp+1Ch+arg_0]
.text:0040A992                 mov     ebx, [esp+1Ch+arg_8]
.text:0040A996                 mov     [esp+1Ch+var_4], esi
.text:0040A99A                 mov     esi, [esp+1Ch+arg_4]
.text:0040A99E                 div     ebx
.text:0040A9A0                 cmp     eax, esi
.text:0040A9A2                 jb      short loc_40A9D4
.text:0040A9A4                 mov     [esp+1Ch+Block], ecx ; Block
.text:0040A9A7                 mov     edx, esi
.text:0040A9A9                 imul    edx, ebx
.text:0040A9AC                 mov     [esp+1Ch+Size], edx ; Size
.text:0040A9B0                 call    realloc
.text:0040A9B5                 test    eax, eax
.text:0040A9B7                 mov     ecx, eax
.text:0040A9B9                 jz      short loc_40A9D0
.text:0040A9BB
.text:0040A9BB loc_40A9BB:                             ; CODE XREF: sub_40A980+52↓j
.text:0040A9BB                 mov     ebx, [esp+1Ch+var_8]
.text:0040A9BF                 mov     eax, ecx
.text:0040A9C1                 mov     esi, [esp+1Ch+var_4]
.text:0040A9C5                 add     esp, 1Ch
.text:0040A9C8                 retn
.text:0040A9C8 ; ---------------------------------------------------------------------------
.text:0040A9C9                 align 10h
.text:0040A9D0
.text:0040A9D0 loc_40A9D0:                             ; CODE XREF: sub_40A980+39↑j
.text:0040A9D0                 test    esi, esi
.text:0040A9D2                 jz      short loc_40A9BB
.text:0040A9D4
.text:0040A9D4 loc_40A9D4:                             ; CODE XREF: sub_40A980+22↑j
.text:0040A9D4                 call    sub_40AC60
.text:0040A9D4 sub_40A980      endp
.text:0040A9D4
.text:0040A9D4 ; ---------------------------------------------------------------------------
.text:0040A9D9                 align 10h
.text:0040A9E0
.text:0040A9E0 ; =============== S U B R O U T I N E =======================================
.text:0040A9E0
.text:0040A9E0
.text:0040A9E0 ; int __cdecl sub_40A9E0(void *, size_t)
.text:0040A9E0 sub_40A9E0      proc near               ; CODE XREF: sub_406250+5B↑p
.text:0040A9E0                                         ; sub_408D70+AB↑p
.text:0040A9E0
.text:0040A9E0 Block           = dword ptr -0Ch
.text:0040A9E0 Size            = dword ptr -8
.text:0040A9E0 var_4           = dword ptr -4
.text:0040A9E0 arg_0           = dword ptr  4
.text:0040A9E0 arg_4           = dword ptr  8
.text:0040A9E0
.text:0040A9E0                 sub     esp, 0Ch
.text:0040A9E3                 mov     edx, [esp+0Ch+arg_0]
.text:0040A9E7                 mov     [esp+0Ch+var_4], ebx
.text:0040A9EB                 mov     ebx, [esp+0Ch+arg_4]
.text:0040A9EF                 mov     [esp+0Ch+Block], edx ; Block
.text:0040A9F2                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040A9F6                 call    realloc
.text:0040A9FB                 test    eax, eax
.text:0040A9FD                 jz      short loc_40AA07
.text:0040A9FF
.text:0040A9FF loc_40A9FF:                             ; CODE XREF: sub_40A9E0+29↓j
.text:0040A9FF                 mov     ebx, [esp+0Ch+var_4]
.text:0040AA03                 add     esp, 0Ch
.text:0040AA06                 retn
.text:0040AA07 ; ---------------------------------------------------------------------------
.text:0040AA07
.text:0040AA07 loc_40AA07:                             ; CODE XREF: sub_40A9E0+1D↑j
.text:0040AA07                 test    ebx, ebx
.text:0040AA09                 jz      short loc_40A9FF
.text:0040AA0B                 call    sub_40AC60
.text:0040AA0B sub_40A9E0      endp
.text:0040AA0B
.text:0040AA10
.text:0040AA10 ; =============== S U B R O U T I N E =======================================
.text:0040AA10
.text:0040AA10 ; Attributes: thunk
.text:0040AA10
.text:0040AA10 ; int __cdecl sub_40AA10(void *, int, int)
.text:0040AA10 sub_40AA10      proc near               ; CODE XREF: sub_408FF0+47↑p
.text:0040AA10                 jmp     sub_40AB60
.text:0040AA10 sub_40AA10      endp
.text:0040AA10
.text:0040AA10 ; ---------------------------------------------------------------------------
.text:0040AA15                 align 10h
.text:0040AA20
.text:0040AA20 ; =============== S U B R O U T I N E =======================================
.text:0040AA20
.text:0040AA20
.text:0040AA20 ; int __cdecl sub_40AA20(void *, int)
.text:0040AA20 sub_40AA20      proc near               ; CODE XREF: sub_408D70+83↑p
.text:0040AA20
.text:0040AA20 var_C           = dword ptr -0Ch
.text:0040AA20 var_8           = dword ptr -8
.text:0040AA20 var_4           = dword ptr -4
.text:0040AA20 arg_0           = dword ptr  4
.text:0040AA20 arg_4           = dword ptr  8
.text:0040AA20
.text:0040AA20                 sub     esp, 0Ch
.text:0040AA23                 mov     edx, [esp+0Ch+arg_4]
.text:0040AA27                 mov     [esp+0Ch+var_4], 1 ; int
.text:0040AA2F                 mov     [esp+0Ch+var_8], edx ; int
.text:0040AA33                 mov     edx, [esp+0Ch+arg_0]
.text:0040AA37                 mov     [esp+0Ch+var_C], edx ; void *
.text:0040AA3A                 call    sub_40AB60
.text:0040AA3F                 add     esp, 0Ch
.text:0040AA42                 retn
.text:0040AA42 sub_40AA20      endp
.text:0040AA42
.text:0040AA42 ; ---------------------------------------------------------------------------
.text:0040AA43                 align 10h
.text:0040AA50
.text:0040AA50 ; =============== S U B R O U T I N E =======================================
.text:0040AA50
.text:0040AA50
.text:0040AA50 ; int __cdecl sub_40AA50(size_t)
.text:0040AA50 sub_40AA50      proc near               ; CODE XREF: sub_408FA0+A↑p
.text:0040AA50
.text:0040AA50 Size            = dword ptr -1Ch
.text:0040AA50 Val             = dword ptr -18h
.text:0040AA50 var_14          = dword ptr -14h
.text:0040AA50 var_4           = dword ptr -4
.text:0040AA50 arg_0           = dword ptr  4
.text:0040AA50
.text:0040AA50                 sub     esp, 1Ch
.text:0040AA53                 mov     [esp+1Ch+var_4], ebx
.text:0040AA57                 mov     ebx, [esp+1Ch+arg_0]
.text:0040AA5B                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040AA5E                 call    malloc
.text:0040AA63                 test    eax, eax
.text:0040AA65                 jz      short loc_40AA83
.text:0040AA67
.text:0040AA67 loc_40AA67:                             ; CODE XREF: sub_40AA50+35↓j
.text:0040AA67                 mov     [esp+1Ch+var_14], ebx ; Size
.text:0040AA6B                 mov     [esp+1Ch+Val], 0 ; Val
.text:0040AA73                 mov     [esp+1Ch+Size], eax ; void *
.text:0040AA76                 call    memset
.text:0040AA7B                 mov     ebx, [esp+1Ch+var_4]
.text:0040AA7F                 add     esp, 1Ch
.text:0040AA82                 retn
.text:0040AA83 ; ---------------------------------------------------------------------------
.text:0040AA83
.text:0040AA83 loc_40AA83:                             ; CODE XREF: sub_40AA50+15↑j
.text:0040AA83                 test    ebx, ebx
.text:0040AA85                 jz      short loc_40AA67
.text:0040AA87                 call    sub_40AC60
.text:0040AA87 sub_40AA50      endp
.text:0040AA87
.text:0040AA87 ; ---------------------------------------------------------------------------
.text:0040AA8C                 align 10h
.text:0040AA90
.text:0040AA90 ; =============== S U B R O U T I N E =======================================
.text:0040AA90
.text:0040AA90
.text:0040AA90 ; int __cdecl sub_40AA90(size_t, size_t)
.text:0040AA90 sub_40AA90      proc near               ; CODE XREF: sub_403100+424↑p
.text:0040AA90                                         ; sub_403100+43F↑p
.text:0040AA90
.text:0040AA90 Count           = dword ptr -0Ch
.text:0040AA90 Size            = dword ptr -8
.text:0040AA90 var_4           = dword ptr -4
.text:0040AA90 arg_0           = dword ptr  4
.text:0040AA90 arg_4           = dword ptr  8
.text:0040AA90
.text:0040AA90                 sub     esp, 0Ch
.text:0040AA93                 xor     edx, edx
.text:0040AA95                 mov     ecx, [esp+0Ch+arg_4]
.text:0040AA99                 mov     [esp+0Ch+var_4], ebx
.text:0040AA9D                 mov     eax, 0FFFFFFFFh
.text:0040AAA2                 mov     ebx, [esp+0Ch+arg_0]
.text:0040AAA6                 div     ecx
.text:0040AAA8                 cmp     eax, ebx
.text:0040AAAA                 jb      short loc_40AAC8
.text:0040AAAC                 mov     [esp+0Ch+Size], ecx ; Size
.text:0040AAB0                 mov     [esp+0Ch+Count], ebx ; Count
.text:0040AAB3                 call    calloc
.text:0040AAB8                 test    eax, eax
.text:0040AABA                 jz      short loc_40AAC4
.text:0040AABC
.text:0040AABC loc_40AABC:                             ; CODE XREF: sub_40AA90+36↓j
.text:0040AABC                 mov     ebx, [esp+0Ch+var_4]
.text:0040AAC0                 add     esp, 0Ch
.text:0040AAC3                 retn
.text:0040AAC4 ; ---------------------------------------------------------------------------
.text:0040AAC4
.text:0040AAC4 loc_40AAC4:                             ; CODE XREF: sub_40AA90+2A↑j
.text:0040AAC4                 test    ebx, ebx
.text:0040AAC6                 jz      short loc_40AABC
.text:0040AAC8
.text:0040AAC8 loc_40AAC8:                             ; CODE XREF: sub_40AA90+1A↑j
.text:0040AAC8                 call    sub_40AC60
.text:0040AAC8 sub_40AA90      endp
.text:0040AAC8
.text:0040AAC8 ; ---------------------------------------------------------------------------
.text:0040AACD                 align 10h
.text:0040AAD0                 sub     esp, 1Ch
.text:0040AAD3                 mov     [esp+18h], ebx
.text:0040AAD7                 mov     ebx, [esp+24h]
.text:0040AADB                 mov     [esp], ebx
.text:0040AADE                 call    malloc
.text:0040AAE3                 test    eax, eax
.text:0040AAE5                 mov     edx, eax
.text:0040AAE7                 jz      short loc_40AB05
.text:0040AAE9
.text:0040AAE9 loc_40AAE9:                             ; CODE XREF: .text:0040AB07↓j
.text:0040AAE9                 mov     [esp+8], ebx
.text:0040AAED                 mov     ecx, [esp+20h]
.text:0040AAF1                 mov     [esp], edx
.text:0040AAF4                 mov     [esp+4], ecx
.text:0040AAF8                 call    memcpy
.text:0040AAFD                 mov     ebx, [esp+18h]
.text:0040AB01                 add     esp, 1Ch
.text:0040AB04                 retn
.text:0040AB05 ; ---------------------------------------------------------------------------
.text:0040AB05
.text:0040AB05 loc_40AB05:                             ; CODE XREF: .text:0040AAE7↑j
.text:0040AB05                 test    ebx, ebx
.text:0040AB07                 jz      short loc_40AAE9
.text:0040AB09                 call    sub_40AC60
.text:0040AB09 ; ---------------------------------------------------------------------------
.text:0040AB0E                 align 10h
.text:0040AB10                 sub     esp, 1Ch
.text:0040AB13                 mov     [esp+18h], esi
.text:0040AB17                 mov     esi, [esp+20h]
.text:0040AB1B                 mov     [esp+14h], ebx
.text:0040AB1F                 mov     [esp], esi
.text:0040AB22                 call    strlen
.text:0040AB27                 lea     ebx, [eax+1]
.text:0040AB2A                 mov     [esp], ebx
.text:0040AB2D                 call    malloc
.text:0040AB32                 test    eax, eax
.text:0040AB34                 jz      short loc_40AB52
.text:0040AB36
.text:0040AB36 loc_40AB36:                             ; CODE XREF: .text:0040AB54↓j
.text:0040AB36                 mov     [esp+8], ebx
.text:0040AB3A                 mov     [esp+4], esi
.text:0040AB3E                 mov     [esp], eax
.text:0040AB41                 call    memcpy
.text:0040AB46                 mov     ebx, [esp+14h]
.text:0040AB4A                 mov     esi, [esp+18h]
.text:0040AB4E                 add     esp, 1Ch
.text:0040AB51                 retn
.text:0040AB52 ; ---------------------------------------------------------------------------
.text:0040AB52
.text:0040AB52 loc_40AB52:                             ; CODE XREF: .text:0040AB34↑j
.text:0040AB52                 test    ebx, ebx
.text:0040AB54                 jz      short loc_40AB36
.text:0040AB56                 call    sub_40AC60
.text:0040AB56 ; ---------------------------------------------------------------------------
.text:0040AB5B                 align 10h
.text:0040AB60
.text:0040AB60 ; =============== S U B R O U T I N E =======================================
.text:0040AB60
.text:0040AB60
.text:0040AB60 ; int __cdecl sub_40AB60(void *, int, int)
.text:0040AB60 sub_40AB60      proc near               ; CODE XREF: sub_40AA10↑j
.text:0040AB60                                         ; sub_40AA20+1A↑p
.text:0040AB60
.text:0040AB60 Block           = dword ptr -1Ch
.text:0040AB60 Size            = dword ptr -18h
.text:0040AB60 var_C           = dword ptr -0Ch
.text:0040AB60 var_8           = dword ptr -8
.text:0040AB60 var_4           = dword ptr -4
.text:0040AB60 arg_0           = dword ptr  4
.text:0040AB60 arg_4           = dword ptr  8
.text:0040AB60 arg_8           = dword ptr  0Ch
.text:0040AB60
.text:0040AB60                 sub     esp, 1Ch
.text:0040AB63                 mov     [esp+1Ch+var_8], esi
.text:0040AB67                 mov     esi, [esp+1Ch+arg_0]
.text:0040AB6B                 mov     [esp+1Ch+var_4], edi
.text:0040AB6F                 mov     edi, [esp+1Ch+arg_4]
.text:0040AB73                 test    esi, esi
.text:0040AB75                 mov     [esp+1Ch+var_C], ebx
.text:0040AB79                 mov     ecx, [edi]
.text:0040AB7B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040AB7F                 jz      short loc_40ABC0
.text:0040AB81                 xor     edx, edx
.text:0040AB83                 mov     eax, 7FFFFFFFh
.text:0040AB88                 div     ebx
.text:0040AB8A                 cmp     eax, ecx
.text:0040AB8C                 jb      short loc_40ABB9
.text:0040AB8E                 add     ecx, ecx
.text:0040AB90
.text:0040AB90 loc_40AB90:                             ; CODE XREF: sub_40AB60+62↓j
.text:0040AB90                                         ; sub_40AB60+71↓j ...
.text:0040AB90                 mov     [edi], ecx
.text:0040AB92                 imul    ebx, ecx
.text:0040AB95                 mov     [esp+1Ch+Block], esi ; Block
.text:0040AB98                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040AB9C                 call    realloc
.text:0040ABA1                 test    eax, eax
.text:0040ABA3                 jz      short loc_40ABB5
.text:0040ABA5
.text:0040ABA5 loc_40ABA5:                             ; CODE XREF: sub_40AB60+57↓j
.text:0040ABA5                 mov     ebx, [esp+1Ch+var_C]
.text:0040ABA9                 mov     esi, [esp+1Ch+var_8]
.text:0040ABAD                 mov     edi, [esp+1Ch+var_4]
.text:0040ABB1                 add     esp, 1Ch
.text:0040ABB4                 retn
.text:0040ABB5 ; ---------------------------------------------------------------------------
.text:0040ABB5
.text:0040ABB5 loc_40ABB5:                             ; CODE XREF: sub_40AB60+43↑j
.text:0040ABB5                 test    ebx, ebx
.text:0040ABB7                 jz      short loc_40ABA5
.text:0040ABB9
.text:0040ABB9 loc_40ABB9:                             ; CODE XREF: sub_40AB60+2C↑j
.text:0040ABB9                 call    sub_40AC60
.text:0040ABB9 ; ---------------------------------------------------------------------------
.text:0040ABBE                 align 10h
.text:0040ABC0
.text:0040ABC0 loc_40ABC0:                             ; CODE XREF: sub_40AB60+1F↑j
.text:0040ABC0                 test    ecx, ecx
.text:0040ABC2                 jnz     short loc_40AB90
.text:0040ABC4                 xor     edx, edx
.text:0040ABC6                 mov     eax, 40h ; '@'
.text:0040ABCB                 div     ebx
.text:0040ABCD                 test    eax, eax
.text:0040ABCF                 mov     ecx, eax
.text:0040ABD1                 jnz     short loc_40AB90
.text:0040ABD3                 mov     ecx, 1
.text:0040ABD8                 jmp     short loc_40AB90
.text:0040ABD8 sub_40AB60      endp
.text:0040ABD8
.text:0040ABD8 ; ---------------------------------------------------------------------------
.text:0040ABDA                 align 10h
.text:0040ABE0
.text:0040ABE0 ; =============== S U B R O U T I N E =======================================
.text:0040ABE0
.text:0040ABE0
.text:0040ABE0 ; int __cdecl sub_40ABE0(int, char *)
.text:0040ABE0 sub_40ABE0      proc near               ; CODE XREF: .text:0040E530↓p
.text:0040ABE0                                         ; .text:0040E77A↓p
.text:0040ABE0
.text:0040ABE0 var_C           = dword ptr -0Ch
.text:0040ABE0 var_8           = dword ptr -8
.text:0040ABE0 var_4           = dword ptr -4
.text:0040ABE0 arg_0           = dword ptr  4
.text:0040ABE0 arg_4           = dword ptr  8
.text:0040ABE0
.text:0040ABE0                 sub     esp, 0Ch
.text:0040ABE3                 mov     edx, [esp+0Ch+arg_4]
.text:0040ABE7                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040ABEF                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040ABF3                 mov     edx, [esp+0Ch+arg_0]
.text:0040ABF7                 mov     [esp+0Ch+var_C], edx ; int
.text:0040ABFA                 call    sub_405E40
.text:0040ABFF                 add     esp, 0Ch
.text:0040AC02                 retn
.text:0040AC02 sub_40ABE0      endp
.text:0040AC02
.text:0040AC02 ; ---------------------------------------------------------------------------
.text:0040AC03                 align 10h
.text:0040AC10
.text:0040AC10 ; =============== S U B R O U T I N E =======================================
.text:0040AC10
.text:0040AC10
.text:0040AC10 ; int __cdecl sub_40AC10(char *)
.text:0040AC10 sub_40AC10      proc near               ; CODE XREF: sub_402250+5AE↑p
.text:0040AC10                                         ; sub_402250+70F↑p ...
.text:0040AC10
.text:0040AC10 var_C           = dword ptr -0Ch
.text:0040AC10 var_8           = dword ptr -8
.text:0040AC10 var_4           = dword ptr -4
.text:0040AC10 arg_0           = dword ptr  4
.text:0040AC10
.text:0040AC10                 sub     esp, 0Ch
.text:0040AC13                 mov     edx, [esp+0Ch+arg_0]
.text:0040AC17                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040AC1F                 mov     [esp+0Ch+var_C], 0 ; int
.text:0040AC26                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040AC2A                 call    sub_405E40
.text:0040AC2F                 add     esp, 0Ch
.text:0040AC32                 retn
.text:0040AC32 sub_40AC10      endp
.text:0040AC32
.text:0040AC32 ; ---------------------------------------------------------------------------
.text:0040AC33                 align 10h
.text:0040AC40 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_40AC60+3↓o
.text:0040AC51 ; const char aS_1[]
.text:0040AC51 aS_1            db '%s',0               ; DATA XREF: sub_40AC60+10↓o
.text:0040AC54                 align 10h
.text:0040AC60
.text:0040AC60 ; =============== S U B R O U T I N E =======================================
.text:0040AC60
.text:0040AC60 ; Attributes: noreturn
.text:0040AC60
.text:0040AC60 sub_40AC60      proc near               ; CODE XREF: sub_402250+77A↑p
.text:0040AC60                                         ; sub_403100:loc_4036B5↑p ...
.text:0040AC60
.text:0040AC60 Code            = dword ptr -1Ch
.text:0040AC60 ErrorMessage    = dword ptr -18h
.text:0040AC60 var_14          = dword ptr -14h
.text:0040AC60 var_10          = byte ptr -10h
.text:0040AC60
.text:0040AC60                 sub     esp, 1Ch
.text:0040AC63                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040AC6A                 call    ds:libintl_gettext
.text:0040AC70                 mov     [esp+1Ch+var_14], offset aS_1 ; "%s"
.text:0040AC78                 mov     edx, dword_41A050
.text:0040AC7E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:0040AC86                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040AC8A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040AC8D                 call    sub_40E9E0
.text:0040AC92                 call    abort
.text:0040AC92 sub_40AC60      endp
.text:0040AC92
.text:0040AC92 ; ---------------------------------------------------------------------------
.text:0040AC97                 align 10h
.text:0040ACA0
.text:0040ACA0 ; =============== S U B R O U T I N E =======================================
.text:0040ACA0
.text:0040ACA0
.text:0040ACA0 sub_40ACA0      proc near               ; CODE XREF: sub_403A00+BA↑p
.text:0040ACA0                                         ; sub_403B00+186↑p ...
.text:0040ACA0                 sub     esp, 0Ch
.text:0040ACA3                 call    _errno
.text:0040ACA8                 mov     dword ptr [eax], 28h ; '('
.text:0040ACAE                 mov     eax, 0FFFFFFFFh
.text:0040ACB3                 add     esp, 0Ch
.text:0040ACB6                 retn
.text:0040ACB6 sub_40ACA0      endp
.text:0040ACB6
.text:0040ACB6 ; ---------------------------------------------------------------------------
.text:0040ACB7                 align 10h
.text:0040ACC0
.text:0040ACC0 ; =============== S U B R O U T I N E =======================================
.text:0040ACC0
.text:0040ACC0
.text:0040ACC0 sub_40ACC0      proc near               ; CODE XREF: sub_4036F0+1F6↑p
.text:0040ACC0
.text:0040ACC0 arg_0           = dword ptr  4
.text:0040ACC0
.text:0040ACC0                 mov     edx, [esp+arg_0]
.text:0040ACC4                 mov     dword ptr [edx+10h], 0
.text:0040ACCB                 mov     dword ptr [edx+14h], 0
.text:0040ACD2                 mov     dword ptr [edx+18h], 95F616h
.text:0040ACD9                 retn
.text:0040ACD9 sub_40ACC0      endp
.text:0040ACD9
.text:0040ACD9 ; ---------------------------------------------------------------------------
.text:0040ACDA                 align 10h
.text:0040ACE0 aCoreutils530Sr_1 db '../../coreutils-5.3.0-src/lib/cycle-check.c',0
.text:0040ACE0                                         ; DATA XREF: sub_40AD30+CE↓o
.text:0040AD0C aStateMagicCcMa db 'state->magic == CC_MAGIC',0
.text:0040AD0C                                         ; DATA XREF: sub_40AD30+D6↓o
.text:0040AD25                 align 10h
.text:0040AD30
.text:0040AD30 ; =============== S U B R O U T I N E =======================================
.text:0040AD30
.text:0040AD30
.text:0040AD30 sub_40AD30      proc near               ; CODE XREF: sub_404F90+4A↑p
.text:0040AD30
.text:0040AD30 var_1C          = dword ptr -1Ch
.text:0040AD30 var_18          = dword ptr -18h
.text:0040AD30 var_14          = dword ptr -14h
.text:0040AD30 arg_0           = dword ptr  4
.text:0040AD30 arg_4           = dword ptr  8
.text:0040AD30
.text:0040AD30                 push    ebp
.text:0040AD31                 push    edi
.text:0040AD32                 push    esi
.text:0040AD33                 push    ebx
.text:0040AD34                 sub     esp, 0Ch
.text:0040AD37                 mov     edx, [esp+1Ch+arg_0]
.text:0040AD3B                 cmp     dword ptr [edx+18h], 95F616h
.text:0040AD42                 jnz     loc_40ADF6
.text:0040AD48                 mov     edx, [esp+1Ch+arg_0]
.text:0040AD4C                 mov     ebp, [edx+14h]
.text:0040AD4F                 mov     edi, [edx+10h]
.text:0040AD52                 mov     eax, ebp
.text:0040AD54                 or      eax, edi
.text:0040AD56                 jz      short loc_40ADA0
.text:0040AD58                 mov     esi, [esp+1Ch+arg_4]
.text:0040AD5C                 mov     ecx, [esi+8]
.text:0040AD5F                 mov     ebx, [esi+0Ch]
.text:0040AD62                 mov     esi, [esp+1Ch+arg_0]
.text:0040AD66                 mov     eax, [esi]
.text:0040AD68                 mov     edx, [esi+4]
.text:0040AD6B                 mov     esi, ebx
.text:0040AD6D                 xor     eax, ecx
.text:0040AD6F                 xor     esi, edx
.text:0040AD71                 or      esi, eax
.text:0040AD73                 jnz     short loc_40ADA0
.text:0040AD75                 mov     edx, [esp+1Ch+arg_4]
.text:0040AD79                 mov     esi, [esp+1Ch+arg_0]
.text:0040AD7D                 mov     ebx, [edx+14h]
.text:0040AD80                 mov     ecx, [edx+10h]
.text:0040AD83                 mov     eax, [esi+8]
.text:0040AD86                 mov     edx, [esi+0Ch]
.text:0040AD89                 mov     esi, ebx
.text:0040AD8B                 xor     eax, ecx
.text:0040AD8D                 xor     esi, edx
.text:0040AD8F                 or      esi, eax
.text:0040AD91                 mov     edx, 1
.text:0040AD96                 jz      short loc_40ADEC
.text:0040AD98                 nop
.text:0040AD99                 lea     esi, [esi+0]
.text:0040ADA0
.text:0040ADA0 loc_40ADA0:                             ; CODE XREF: sub_40AD30+26↑j
.text:0040ADA0                                         ; sub_40AD30+43↑j
.text:0040ADA0                 mov     ecx, edi
.text:0040ADA2                 mov     ebx, ebp
.text:0040ADA4                 mov     edx, [esp+1Ch+arg_0]
.text:0040ADA8                 add     ecx, 1
.text:0040ADAB                 mov     esi, ecx
.text:0040ADAD                 adc     ebx, 0
.text:0040ADB0                 and     esi, edi
.text:0040ADB2                 mov     edi, ebx
.text:0040ADB4                 mov     [edx+10h], ecx
.text:0040ADB7                 and     edi, ebp
.text:0040ADB9                 or      esi, edi
.text:0040ADBB                 mov     [edx+14h], ebx
.text:0040ADBE                 jnz     short loc_40ADEA
.text:0040ADC0                 mov     ebp, ebx
.text:0040ADC2                 mov     edx, 1
.text:0040ADC7                 or      ebp, ecx
.text:0040ADC9                 jz      short loc_40ADEC
.text:0040ADCB                 mov     ebp, [esp+1Ch+arg_4]
.text:0040ADCF                 mov     ebx, [esp+1Ch+arg_0]
.text:0040ADD3                 mov     edx, [ebp+10h]
.text:0040ADD6                 mov     ecx, [ebp+14h]
.text:0040ADD9                 mov     [ebx+8], edx
.text:0040ADDC                 mov     [ebx+0Ch], ecx
.text:0040ADDF                 mov     esi, [ebp+8]
.text:0040ADE2                 mov     edi, [ebp+0Ch]
.text:0040ADE5                 mov     [ebx], esi
.text:0040ADE7                 mov     [ebx+4], edi
.text:0040ADEA
.text:0040ADEA loc_40ADEA:                             ; CODE XREF: sub_40AD30+8E↑j
.text:0040ADEA                 xor     edx, edx
.text:0040ADEC
.text:0040ADEC loc_40ADEC:                             ; CODE XREF: sub_40AD30+66↑j
.text:0040ADEC                                         ; sub_40AD30+99↑j
.text:0040ADEC                 add     esp, 0Ch
.text:0040ADEF                 mov     eax, edx
.text:0040ADF1                 pop     ebx
.text:0040ADF2                 pop     esi
.text:0040ADF3                 pop     edi
.text:0040ADF4                 pop     ebp
.text:0040ADF5                 retn
.text:0040ADF6 ; ---------------------------------------------------------------------------
.text:0040ADF6
.text:0040ADF6 loc_40ADF6:                             ; CODE XREF: sub_40AD30+12↑j
.text:0040ADF6                 mov     [esp+1Ch+var_14], 45h ; 'E'
.text:0040ADFE                 mov     [esp+1Ch+var_18], offset aCoreutils530Sr_1 ; "../../coreutils-5.3.0-src/lib/cycle-che"...
.text:0040AE06                 mov     [esp+1Ch+var_1C], offset aStateMagicCcMa ; "state->magic == CC_MAGIC"
.text:0040AE0D                 call    _assert
.text:0040AE0D sub_40AD30      endp
.text:0040AE0D
.text:0040AE0D ; ---------------------------------------------------------------------------
.text:0040AE12                 align 10h
.text:0040AE20
.text:0040AE20 ; =============== S U B R O U T I N E =======================================
.text:0040AE20
.text:0040AE20
.text:0040AE20 sub_40AE20      proc near               ; DATA XREF: .text:loc_40B970↓o
.text:0040AE20                                         ; sub_40BAA0:loc_40BB5A↓o ...
.text:0040AE20                 push    eax
.text:0040AE21                 dec     edi
.text:0040AE22                 push    ebx
.text:0040AE23                 dec     ecx
.text:0040AE24                 pop     eax
.text:0040AE25                 dec     esp
.text:0040AE26                 pop     ecx
.text:0040AE27                 pop     edi
.text:0040AE28                 inc     ebx
.text:0040AE29                 dec     edi
.text:0040AE2A                 push    edx
.text:0040AE2B                 push    edx
.text:0040AE2C                 inc     ebp
.text:0040AE2D                 inc     ebx
.text:0040AE2E                 push    esp
.text:0040AE2F
.text:0040AE2F loc_40AE2F:                             ; CODE XREF: .text:0040B230↓p
.text:0040AE2F                                         ; .text:0040B303↓p ...
.text:0040AE2F                 add     [ebp+57h], dl
.text:0040AE2F sub_40AE20      endp ; sp-analysis failed
.text:0040AE2F
.text:0040AE32                 push    esi
.text:0040AE33                 push    ebx
.text:0040AE34                 sub     esp, 85Ch
.text:0040AE3A                 mov     esi, [esp+870h]
.text:0040AE41                 movzx   edx, byte ptr [esp+87Ch]
.text:0040AE49                 mov     ebp, [esp+880h]
.text:0040AE50                 mov     edi, [esp+874h]
.text:0040AE57                 mov     [esp+3Fh], dl
.text:0040AE5B                 movzx   ebx, byte ptr [esi]
.text:0040AE5E                 inc     esi
.text:0040AE5F                 test    bl, bl
.text:0040AE61                 jz      loc_40AFF6
.text:0040AE67                 mov     esi, esi
.text:0040AE69                 lea     edi, [edi+0]
.text:0040AE70
.text:0040AE70 loc_40AE70:                             ; CODE XREF: .text:0040AFF0↓j
.text:0040AE70                 mov     byte ptr [esp+3Eh], 0
.text:0040AE75                 test    ebp, 10h
.text:0040AE7B                 jz      short loc_40AEA7
.text:0040AE7D                 mov     ecx, ds:__mb_cur_max
.text:0040AE83                 movzx   edx, bl
.text:0040AE86                 cmp     dword ptr [ecx], 1
.text:0040AE89                 jz      loc_40BA84
.text:0040AE8F                 mov     dword ptr [esp+4], 1
.text:0040AE97                 mov     [esp], edx
.text:0040AE9A                 call    _isctype
.text:0040AE9F
.text:0040AE9F loc_40AE9F:                             ; CODE XREF: .text:0040BA92↓j
.text:0040AE9F                 test    eax, eax
.text:0040AEA1                 jnz     loc_40BA70
.text:0040AEA7
.text:0040AEA7 loc_40AEA7:                             ; CODE XREF: .text:0040AE7B↑j
.text:0040AEA7                 mov     [esp+3Dh], bl
.text:0040AEAB
.text:0040AEAB loc_40AEAB:                             ; CODE XREF: .text:0040BA7F↓j
.text:0040AEAB                 movzx   ebx, byte ptr [esp+3Dh]
.text:0040AEB0                 movzx   eax, bl
.text:0040AEB3                 sub     eax, 21h ; '!'  ; switch 60 cases
.text:0040AEB6                 cmp     eax, 3Bh
.text:0040AEB9                 ja      def_40AEBF      ; jumptable 0040AEBF default case, cases 34-41,44-46,48-62,65-90
.text:0040AEBF                 jmp     ds:jpt_40AEBF[eax*4] ; switch jump
.text:0040AEBF ; ---------------------------------------------------------------------------
.text:0040AEC6                 align 4
.text:0040AEC8 jpt_40AEBF      dd offset loc_40B4F9, offset def_40AEBF, offset def_40AEBF
.text:0040AEC8                                         ; DATA XREF: .text:0040AEBF↑r
.text:0040AEC8                 dd offset def_40AEBF, offset def_40AEBF, offset def_40AEBF ; jump table for switch statement
.text:0040AEC8                 dd offset def_40AEBF, offset def_40AEBF, offset def_40AEBF
.text:0040AEC8                 dd offset loc_40B083, offset loc_40B4F9, offset def_40AEBF
.text:0040AEC8                 dd offset def_40AEBF, offset def_40AEBF, offset loc_40B450
.text:0040AEC8                 dd offset def_40AEBF, offset def_40AEBF, offset def_40AEBF
.text:0040AEC8                 dd offset def_40AEBF, offset def_40AEBF, offset def_40AEBF
.text:0040AEC8                 dd offset def_40AEBF, offset def_40AEBF, offset def_40AEBF
.text:0040AEC8                 dd offset def_40AEBF, offset def_40AEBF, offset def_40AEBF
.text:0040AEC8                 dd offset def_40AEBF, offset def_40AEBF, offset def_40AEBF
.text:0040AEC8                 dd offset loc_40AFB8, offset loc_40B4F9, offset def_40AEBF
.text:0040AEC8                 dd offset def_40AEBF, offset def_40AEBF, offset def_40AEBF
.text:0040AEC8                 dd offset def_40AEBF, offset def_40AEBF, offset def_40AEBF
.text:0040AEC8                 dd offset def_40AEBF, offset def_40AEBF, offset def_40AEBF
.text:0040AEC8                 dd offset def_40AEBF, offset def_40AEBF, offset def_40AEBF
.text:0040AEC8                 dd offset def_40AEBF, offset def_40AEBF, offset def_40AEBF
.text:0040AEC8                 dd offset def_40AEBF, offset def_40AEBF, offset def_40AEBF
.text:0040AEC8                 dd offset def_40AEBF, offset def_40AEBF, offset def_40AEBF
.text:0040AEC8                 dd offset def_40AEBF, offset def_40AEBF, offset def_40AEBF
.text:0040AEC8                 dd offset def_40AEBF, offset loc_40B550, offset loc_40B993
.text:0040AFB8 ; ---------------------------------------------------------------------------
.text:0040AFB8
.text:0040AFB8 loc_40AFB8:                             ; CODE XREF: .text:0040AEBF↑j
.text:0040AFB8                                         ; DATA XREF: .text:jpt_40AEBF↑o
.text:0040AFB8                 test    ebp, 20h        ; jumptable 0040AEBF case 63
.text:0040AFBE                 jnz     loc_40B040
.text:0040AFC4
.text:0040AFC4 loc_40AFC4:                             ; CODE XREF: .text:0040B043↓j
.text:0040AFC4                                         ; .text:0040B07B↓j
.text:0040AFC4                 cmp     edi, [esp+878h]
.text:0040AFCB                 mov     ecx, 1
.text:0040AFD0                 jz      short loc_40B010
.text:0040AFD2                 movzx   edx, byte ptr [edi]
.text:0040AFD5                 cmp     dl, 2Fh ; '/'
.text:0040AFD8                 jz      short loc_40B030
.text:0040AFDA
.text:0040AFDA loc_40AFDA:                             ; CODE XREF: .text:0040B036↓j
.text:0040AFDA                 cmp     dl, 2Eh ; '.'
.text:0040AFDD                 jz      short loc_40B01D
.text:0040AFDF                 nop
.text:0040AFE0
.text:0040AFE0 loc_40AFE0:                             ; CODE XREF: .text:0040B027↓j
.text:0040AFE0                                         ; .text:loc_40B4A6↓j ...
.text:0040AFE0                 movzx   ebx, byte ptr [esp+3Eh]
.text:0040AFE5                 inc     edi
.text:0040AFE6                 mov     [esp+3Fh], bl
.text:0040AFEA                 movzx   ebx, byte ptr [esi]
.text:0040AFED                 inc     esi
.text:0040AFEE                 test    bl, bl
.text:0040AFF0                 jnz     loc_40AE70
.text:0040AFF6
.text:0040AFF6 loc_40AFF6:                             ; CODE XREF: .text:0040AE61↑j
.text:0040AFF6                 xor     ecx, ecx
.text:0040AFF8                 cmp     edi, [esp+878h]
.text:0040AFFF                 jz      short loc_40B010
.text:0040B001                 and     ebp, 8
.text:0040B004                 jz      short loc_40B00B
.text:0040B006                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040B009
.text:0040B009 loc_40B009:                             ; CODE XREF: .text:0040B30C↓j
.text:0040B009                 jz      short loc_40B010
.text:0040B00B
.text:0040B00B loc_40B00B:                             ; CODE XREF: .text:0040B004↑j
.text:0040B00B                                         ; .text:0040B1B1↓j ...
.text:0040B00B                 mov     ecx, 1
.text:0040B010
.text:0040B010 loc_40B010:                             ; CODE XREF: .text:0040AFD0↑j
.text:0040B010                                         ; .text:0040AFFF↑j ...
.text:0040B010                 add     esp, 85Ch
.text:0040B016                 mov     eax, ecx
.text:0040B018                 pop     ebx
.text:0040B019                 pop     esi
.text:0040B01A                 pop     edi
.text:0040B01B                 pop     ebp
.text:0040B01C                 retn
.text:0040B01D ; ---------------------------------------------------------------------------
.text:0040B01D
.text:0040B01D loc_40B01D:                             ; CODE XREF: .text:0040AFDD↑j
.text:0040B01D                 cmp     byte ptr [esp+3Fh], 0
.text:0040B022
.text:0040B022 loc_40B022:                             ; CODE XREF: .text:0040B707↓j
.text:0040B022                 mov     ecx, 1
.text:0040B027                 jz      short loc_40AFE0
.text:0040B029                 jmp     short loc_40B010
.text:0040B029 ; ---------------------------------------------------------------------------
.text:0040B02B                 align 10h
.text:0040B030
.text:0040B030 loc_40B030:                             ; CODE XREF: .text:0040AFD8↑j
.text:0040B030                 test    ebp, 1
.text:0040B036                 jz      short loc_40AFDA
.text:0040B038                 jmp     short loc_40B010
.text:0040B038 ; ---------------------------------------------------------------------------
.text:0040B03A                 align 10h
.text:0040B040
.text:0040B040 loc_40B040:                             ; CODE XREF: .text:0040AFBE↑j
.text:0040B040                 cmp     byte ptr [esi], 28h ; '('
.text:0040B043                 jnz     loc_40AFC4
.text:0040B049                 movzx   edx, byte ptr [esp+3Fh]
.text:0040B04E                 mov     [esp+14h], ebp
.text:0040B052                 mov     ecx, [esp+878h]
.text:0040B059                 movzx   ebx, byte ptr [esp+3Dh]
.text:0040B05E                 mov     [esp+8], edi
.text:0040B062                 mov     [esp+0Ch], ecx
.text:0040B066                 mov     [esp+10h], edx
.text:0040B06A                 mov     [esp+4], esi
.text:0040B06E                 mov     [esp], ebx
.text:0040B071                 call    sub_40BC50
.text:0040B076                 cmp     eax, 0FFFFFFFFh
.text:0040B079                 mov     ecx, eax
.text:0040B07B                 jz      loc_40AFC4
.text:0040B081                 jmp     short loc_40B010
.text:0040B083 ; ---------------------------------------------------------------------------
.text:0040B083
.text:0040B083 loc_40B083:                             ; CODE XREF: .text:0040AEBF↑j
.text:0040B083                                         ; DATA XREF: .text:jpt_40AEBF↑o
.text:0040B083                 test    ebp, 20h        ; jumptable 0040AEBF case 42
.text:0040B089                 jnz     loc_40B404
.text:0040B08F
.text:0040B08F loc_40B08F:                             ; CODE XREF: .text:0040B407↓j
.text:0040B08F                                         ; .text:0040B445↓j
.text:0040B08F                 cmp     edi, [esp+878h]
.text:0040B096                 jz      short loc_40B0A1
.text:0040B098                 cmp     byte ptr [edi], 2Eh ; '.'
.text:0040B09B                 jz      loc_40B3EF
.text:0040B0A1
.text:0040B0A1 loc_40B0A1:                             ; CODE XREF: .text:0040B096↑j
.text:0040B0A1                                         ; .text:0040B3FF↓j
.text:0040B0A1                 movzx   ebx, byte ptr [esi]
.text:0040B0A4                 inc     esi
.text:0040B0A5                 cmp     bl, 3Fh ; '?'
.text:0040B0A8                 jz      loc_40B391
.text:0040B0AE                 cmp     bl, 2Ah ; '*'
.text:0040B0B1                 jz      loc_40B391
.text:0040B0B7
.text:0040B0B7 loc_40B0B7:                             ; CODE XREF: .text:0040B3A9↓j
.text:0040B0B7                 test    bl, bl
.text:0040B0B9                 jnz     short loc_40B0FF
.text:0040B0BB                 mov     ebx, ebp
.text:0040B0BD                 and     ebx, 1
.text:0040B0C0                 jz      short loc_40B0C9
.text:0040B0C2                 and     ebp, 8
.text:0040B0C5                 jz      short loc_40B0D0
.text:0040B0C7                 xor     ebx, ebx
.text:0040B0C9
.text:0040B0C9 loc_40B0C9:                             ; CODE XREF: .text:0040B0C0↑j
.text:0040B0C9                                         ; .text:0040B0FD↓j
.text:0040B0C9                 mov     ecx, ebx
.text:0040B0CB                 jmp     loc_40B010
.text:0040B0D0 ; ---------------------------------------------------------------------------
.text:0040B0D0
.text:0040B0D0 loc_40B0D0:                             ; CODE XREF: .text:0040B0C5↑j
.text:0040B0D0                 sub     [esp+878h], edi
.text:0040B0D7                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040B0DF                 mov     [esp], edi
.text:0040B0E2                 mov     ebp, [esp+878h]
.text:0040B0E9                 mov     [esp+8], ebp
.text:0040B0ED                 call    memchr
.text:0040B0F2                 test    eax, eax
.text:0040B0F4                 setz    dl
.text:0040B0F7                 movzx   esi, dl
.text:0040B0FA                 dec     esi
.text:0040B0FB                 and     ebx, esi
.text:0040B0FD                 jmp     short loc_40B0C9
.text:0040B0FF ; ---------------------------------------------------------------------------
.text:0040B0FF
.text:0040B0FF loc_40B0FF:                             ; CODE XREF: .text:0040B0B9↑j
.text:0040B0FF                 mov     [esp], edi
.text:0040B102                 mov     edx, [esp+878h]
.text:0040B109                 xor     ecx, ecx
.text:0040B10B                 sub     edx, edi
.text:0040B10D                 test    ebp, 1
.text:0040B113                 setz    cl
.text:0040B116                 mov     [esp+8], edx
.text:0040B11A                 dec     ecx
.text:0040B11B                 and     ecx, 2Fh
.text:0040B11E                 mov     [esp+4], ecx
.text:0040B122                 call    memchr
.text:0040B127                 mov     [esp+38h], eax
.text:0040B12B                 test    eax, eax
.text:0040B12D                 jz      loc_40B381
.text:0040B133
.text:0040B133 loc_40B133:                             ; CODE XREF: .text:0040B38C↓j
.text:0040B133                 cmp     bl, 5Bh ; '['
.text:0040B136                 jz      loc_40B32D
.text:0040B13C                 test    ebp, 20h
.text:0040B142                 jnz     loc_40B311
.text:0040B148
.text:0040B148 loc_40B148:                             ; CODE XREF: .text:0040B31E↓j
.text:0040B148                                         ; .text:0040B327↓j
.text:0040B148                 cmp     bl, 2Fh ; '/'
.text:0040B14B                 jz      loc_40B299
.text:0040B151
.text:0040B151 loc_40B151:                             ; CODE XREF: .text:0040B29F↓j
.text:0040B151                 mov     [esp+34h], ebp
.text:0040B155                 test    ebp, 1
.text:0040B15B                 jnz     short loc_40B166
.text:0040B15D                 mov     edx, ebp
.text:0040B15F                 and     edx, 0FFFFFFFBh
.text:0040B162                 mov     [esp+34h], edx
.text:0040B166
.text:0040B166 loc_40B166:                             ; CODE XREF: .text:0040B15B↑j
.text:0040B166                 movzx   ecx, byte ptr [esp+3Fh]
.text:0040B16B                 cmp     bl, 5Ch ; '\'
.text:0040B16E                 mov     [esp+30h], ecx
.text:0040B172                 jz      loc_40B285
.text:0040B178
.text:0040B178 loc_40B178:                             ; CODE XREF: .text:0040B28B↓j
.text:0040B178                                         ; .text:0040B294↓j
.text:0040B178                 test    ebp, 10h
.text:0040B17E                 jz      short loc_40B1AA
.text:0040B180                 mov     ecx, ds:__mb_cur_max
.text:0040B186                 movzx   edx, bl
.text:0040B189                 cmp     dword ptr [ecx], 1
.text:0040B18C                 jz      loc_40B272
.text:0040B192                 mov     dword ptr [esp+4], 1
.text:0040B19A                 mov     [esp], edx
.text:0040B19D                 call    _isctype
.text:0040B1A2
.text:0040B1A2 loc_40B1A2:                             ; CODE XREF: .text:0040B280↓j
.text:0040B1A2                 test    eax, eax
.text:0040B1A4                 jnz     loc_40B262
.text:0040B1AA
.text:0040B1AA loc_40B1AA:                             ; CODE XREF: .text:0040B17E↑j
.text:0040B1AA                 mov     al, bl
.text:0040B1AC
.text:0040B1AC loc_40B1AC:                             ; CODE XREF: .text:0040B26D↓j
.text:0040B1AC                 dec     esi
.text:0040B1AD                 cmp     edi, [esp+38h]
.text:0040B1B1                 jnb     loc_40B00B
.text:0040B1B7                 movzx   ebx, al
.text:0040B1BA
.text:0040B1BA loc_40B1BA:                             ; CODE XREF: .text:0040B201↓j
.text:0040B1BA                 test    ebp, 10h
.text:0040B1C0                 jz      loc_40B25D
.text:0040B1C6                 movzx   edx, byte ptr [edi]
.text:0040B1C9                 mov     eax, ds:__mb_cur_max
.text:0040B1CE                 movzx   ecx, dl
.text:0040B1D1                 cmp     dword ptr [eax], 1
.text:0040B1D4                 jz      short loc_40B24D
.text:0040B1D6                 mov     dword ptr [esp+4], 1
.text:0040B1DE                 mov     [esp], ecx
.text:0040B1E1                 call    _isctype
.text:0040B1E6                 movzx   edx, byte ptr [edi]
.text:0040B1E9
.text:0040B1E9 loc_40B1E9:                             ; CODE XREF: .text:0040B25B↓j
.text:0040B1E9                 test    eax, eax
.text:0040B1EB                 jnz     short loc_40B240
.text:0040B1ED
.text:0040B1ED loc_40B1ED:                             ; CODE XREF: .text:0040B260↓j
.text:0040B1ED                 movzx   eax, dl
.text:0040B1F0
.text:0040B1F0 loc_40B1F0:                             ; CODE XREF: .text:0040B24B↓j
.text:0040B1F0                 cmp     eax, ebx
.text:0040B1F2                 jz      short loc_40B208
.text:0040B1F4
.text:0040B1F4 loc_40B1F4:                             ; CODE XREF: .text:0040B239↓j
.text:0040B1F4                 mov     dword ptr [esp+30h], 0
.text:0040B1FC                 inc     edi
.text:0040B1FD                 cmp     edi, [esp+38h]
.text:0040B201                 jb      short loc_40B1BA
.text:0040B203                 jmp     loc_40B00B
.text:0040B208 ; ---------------------------------------------------------------------------
.text:0040B208
.text:0040B208 loc_40B208:                             ; CODE XREF: .text:0040B1F2↑j
.text:0040B208                 mov     [esp+4], edi
.text:0040B20C                 xor     ecx, ecx
.text:0040B20E                 mov     edx, [esp+34h]
.text:0040B212                 cmp     dword ptr [esp+30h], 0
.text:0040B217                 mov     [esp], esi
.text:0040B21A                 mov     [esp+10h], edx
.text:0040B21E                 mov     edx, [esp+878h]
.text:0040B225                 setnz   cl
.text:0040B228                 mov     [esp+8], edx
.text:0040B22C                 mov     [esp+0Ch], ecx
.text:0040B230                 call    near ptr loc_40AE2F+1
.text:0040B235                 xor     ecx, ecx
.text:0040B237                 test    eax, eax
.text:0040B239                 jnz     short loc_40B1F4
.text:0040B23B                 jmp     loc_40B010
.text:0040B240 ; ---------------------------------------------------------------------------
.text:0040B240
.text:0040B240 loc_40B240:                             ; CODE XREF: .text:0040B1EB↑j
.text:0040B240                 movzx   ecx, dl
.text:0040B243                 mov     [esp], ecx
.text:0040B246                 call    tolower
.text:0040B24B                 jmp     short loc_40B1F0
.text:0040B24D ; ---------------------------------------------------------------------------
.text:0040B24D
.text:0040B24D loc_40B24D:                             ; CODE XREF: .text:0040B1D4↑j
.text:0040B24D                 mov     eax, ds:_pctype
.text:0040B252                 mov     eax, [eax]
.text:0040B254                 movzx   eax, word ptr [eax+ecx*2]
.text:0040B258                 and     eax, 1
.text:0040B25B                 jmp     short loc_40B1E9
.text:0040B25D ; ---------------------------------------------------------------------------
.text:0040B25D
.text:0040B25D loc_40B25D:                             ; CODE XREF: .text:0040B1C0↑j
.text:0040B25D                 movzx   edx, byte ptr [edi]
.text:0040B260                 jmp     short loc_40B1ED
.text:0040B262 ; ---------------------------------------------------------------------------
.text:0040B262
.text:0040B262 loc_40B262:                             ; CODE XREF: .text:0040B1A4↑j
.text:0040B262                 movzx   edx, bl
.text:0040B265                 mov     [esp], edx
.text:0040B268                 call    tolower
.text:0040B26D                 jmp     loc_40B1AC
.text:0040B272 ; ---------------------------------------------------------------------------
.text:0040B272
.text:0040B272 loc_40B272:                             ; CODE XREF: .text:0040B18C↑j
.text:0040B272                 mov     eax, ds:_pctype
.text:0040B277                 mov     ecx, [eax]
.text:0040B279                 movzx   eax, word ptr [ecx+edx*2]
.text:0040B27D                 and     eax, 1
.text:0040B280                 jmp     loc_40B1A2
.text:0040B285 ; ---------------------------------------------------------------------------
.text:0040B285
.text:0040B285 loc_40B285:                             ; CODE XREF: .text:0040B172↑j
.text:0040B285                 test    ebp, 2
.text:0040B28B                 jnz     loc_40B178
.text:0040B291                 movzx   ebx, byte ptr [esi]
.text:0040B294                 jmp     loc_40B178
.text:0040B299 ; ---------------------------------------------------------------------------
.text:0040B299
.text:0040B299 loc_40B299:                             ; CODE XREF: .text:0040B14B↑j
.text:0040B299                 test    ebp, 1
.text:0040B29F                 jz      loc_40B151
.text:0040B2A5                 cmp     edi, [esp+878h]
.text:0040B2AC                 jnb     loc_40B00B
.text:0040B2B2                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040B2B5                 jz      short loc_40B2CA
.text:0040B2B7
.text:0040B2B7 loc_40B2B7:                             ; CODE XREF: .text:0040B2C8↓j
.text:0040B2B7                 inc     edi
.text:0040B2B8                 cmp     edi, [esp+878h]
.text:0040B2BF                 jnb     loc_40B00B
.text:0040B2C5                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040B2C8                 jnz     short loc_40B2B7
.text:0040B2CA
.text:0040B2CA loc_40B2CA:                             ; CODE XREF: .text:0040B2B5↑j
.text:0040B2CA                 cmp     edi, [esp+878h]
.text:0040B2D1                 jnb     loc_40B00B
.text:0040B2D7                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040B2DA                 jnz     loc_40B00B
.text:0040B2E0                 mov     [esp+10h], ebp
.text:0040B2E4                 mov     ecx, [esp+878h]
.text:0040B2EB                 lea     ebx, [edi+1]
.text:0040B2EE                 mov     [esp+4], ebx
.text:0040B2F2                 shr     ebp, 2
.text:0040B2F5                 and     ebp, 1
.text:0040B2F8                 mov     [esp+8], ecx
.text:0040B2FC                 mov     [esp+0Ch], ebp
.text:0040B300                 mov     [esp], esi
.text:0040B303                 call    near ptr loc_40AE2F+1
.text:0040B308                 xor     ecx, ecx
.text:0040B30A                 test    eax, eax
.text:0040B30C                 jmp     loc_40B009
.text:0040B311 ; ---------------------------------------------------------------------------
.text:0040B311
.text:0040B311 loc_40B311:                             ; CODE XREF: .text:0040B142↑j
.text:0040B311                 cmp     bl, 40h ; '@'
.text:0040B314                 jz      short loc_40B324
.text:0040B316                 cmp     bl, 2Bh ; '+'
.text:0040B319                 jz      short loc_40B324
.text:0040B31B                 cmp     bl, 21h ; '!'
.text:0040B31E                 jnz     loc_40B148
.text:0040B324
.text:0040B324 loc_40B324:                             ; CODE XREF: .text:0040B314↑j
.text:0040B324                                         ; .text:0040B319↑j
.text:0040B324                 cmp     byte ptr [esi], 28h ; '('
.text:0040B327                 jnz     loc_40B148
.text:0040B32D
.text:0040B32D loc_40B32D:                             ; CODE XREF: .text:0040B136↑j
.text:0040B32D                 mov     ebx, ebp
.text:0040B32F                 and     ebp, 1
.text:0040B332                 jnz     short loc_40B337
.text:0040B334                 and     ebx, 0FFFFFFFBh
.text:0040B337
.text:0040B337 loc_40B337:                             ; CODE XREF: .text:0040B332↑j
.text:0040B337                 movzx   eax, byte ptr [esp+3Fh]
.text:0040B33C                 dec     esi
.text:0040B33D                 cmp     edi, [esp+38h]
.text:0040B341                 jnb     loc_40B00B
.text:0040B347
.text:0040B347 loc_40B347:                             ; CODE XREF: .text:0040B37A↓j
.text:0040B347                 mov     [esp+10h], ebx
.text:0040B34B                 mov     ebp, [esp+878h]
.text:0040B352                 movzx   edx, al
.text:0040B355                 mov     [esp+0Ch], edx
.text:0040B359                 mov     [esp+4], edi
.text:0040B35D                 mov     [esp+8], ebp
.text:0040B361                 mov     [esp], esi
.text:0040B364                 call    near ptr loc_40AE2F+1
.text:0040B369                 xor     ecx, ecx
.text:0040B36B                 test    eax, eax
.text:0040B36D                 jz      loc_40B010
.text:0040B373                 inc     edi
.text:0040B374                 xor     eax, eax
.text:0040B376                 cmp     edi, [esp+38h]
.text:0040B37A                 jb      short loc_40B347
.text:0040B37C                 jmp     loc_40B00B
.text:0040B381 ; ---------------------------------------------------------------------------
.text:0040B381
.text:0040B381 loc_40B381:                             ; CODE XREF: .text:0040B12D↑j
.text:0040B381                 mov     ecx, [esp+878h]
.text:0040B388                 mov     [esp+38h], ecx
.text:0040B38C                 jmp     loc_40B133
.text:0040B391 ; ---------------------------------------------------------------------------
.text:0040B391
.text:0040B391 loc_40B391:                             ; CODE XREF: .text:0040B0A8↑j
.text:0040B391                                         ; .text:0040B0B1↑j ...
.text:0040B391                 cmp     byte ptr [esi], 28h ; '('
.text:0040B394                 jz      short loc_40B3D7
.text:0040B396
.text:0040B396 loc_40B396:                             ; CODE XREF: .text:0040B3DD↓j
.text:0040B396                                         ; .text:0040B3E9↓j
.text:0040B396                 cmp     bl, 3Fh ; '?'
.text:0040B399                 jz      short loc_40B3B0
.text:0040B39B
.text:0040B39B loc_40B39B:                             ; CODE XREF: .text:0040B3C8↓j
.text:0040B39B                                         ; .text:0040B3ED↓j
.text:0040B39B                 movzx   ebx, byte ptr [esi]
.text:0040B39E                 inc     esi
.text:0040B39F                 cmp     bl, 3Fh ; '?'
.text:0040B3A2                 jz      short loc_40B391
.text:0040B3A4                 cmp     bl, 2Ah ; '*'
.text:0040B3A7                 jz      short loc_40B391
.text:0040B3A9                 jmp     loc_40B0B7
.text:0040B3A9 ; ---------------------------------------------------------------------------
.text:0040B3AE                 align 10h
.text:0040B3B0
.text:0040B3B0 loc_40B3B0:                             ; CODE XREF: .text:0040B399↑j
.text:0040B3B0                 cmp     edi, [esp+878h]
.text:0040B3B7                 mov     ecx, 1
.text:0040B3BC                 jz      loc_40B010
.text:0040B3C2                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040B3C5                 jz      short loc_40B3CA
.text:0040B3C7
.text:0040B3C7 loc_40B3C7:                             ; CODE XREF: .text:0040B3D0↓j
.text:0040B3C7                 inc     edi
.text:0040B3C8                 jmp     short loc_40B39B
.text:0040B3CA ; ---------------------------------------------------------------------------
.text:0040B3CA
.text:0040B3CA loc_40B3CA:                             ; CODE XREF: .text:0040B3C5↑j
.text:0040B3CA                 test    ebp, 1
.text:0040B3D0                 jz      short loc_40B3C7
.text:0040B3D2                 jmp     loc_40B010
.text:0040B3D7 ; ---------------------------------------------------------------------------
.text:0040B3D7
.text:0040B3D7 loc_40B3D7:                             ; CODE XREF: .text:0040B394↑j
.text:0040B3D7                 test    ebp, 20h
.text:0040B3DD                 jz      short loc_40B396
.text:0040B3DF                 mov     [esp], esi
.text:0040B3E2                 call    sub_40BAA0
.text:0040B3E7                 cmp     eax, esi
.text:0040B3E9                 jz      short loc_40B396
.text:0040B3EB                 mov     esi, eax
.text:0040B3ED                 jmp     short loc_40B39B
.text:0040B3EF ; ---------------------------------------------------------------------------
.text:0040B3EF
.text:0040B3EF loc_40B3EF:                             ; CODE XREF: .text:0040B09B↑j
.text:0040B3EF                 cmp     byte ptr [esp+3Fh], 0
.text:0040B3F4                 mov     ecx, 1
.text:0040B3F9                 jnz     loc_40B010
.text:0040B3FF                 jmp     loc_40B0A1
.text:0040B404 ; ---------------------------------------------------------------------------
.text:0040B404
.text:0040B404 loc_40B404:                             ; CODE XREF: .text:0040B089↑j
.text:0040B404                 cmp     byte ptr [esi], 28h ; '('
.text:0040B407                 jnz     loc_40B08F
.text:0040B40D                 movzx   ecx, byte ptr [esp+3Fh]
.text:0040B412                 mov     [esp+14h], ebp
.text:0040B416                 mov     edx, [esp+878h]
.text:0040B41D                 movzx   ebx, byte ptr [esp+3Dh]
.text:0040B422                 mov     [esp+8], edi
.text:0040B426                 mov     [esp+10h], ecx
.text:0040B42A                 mov     [esp+0Ch], edx
.text:0040B42E                 mov     [esp+4], esi
.text:0040B432                 mov     [esp], ebx
.text:0040B435                 call    sub_40BC50
.text:0040B43A                 cmp     eax, 0FFFFFFFFh
.text:0040B43D                 mov     ecx, eax
.text:0040B43F                 jnz     loc_40B010
.text:0040B445                 jmp     loc_40B08F
.text:0040B445 ; ---------------------------------------------------------------------------
.text:0040B44A                 align 10h
.text:0040B450
.text:0040B450 loc_40B450:                             ; CODE XREF: .text:0040AEBF↑j
.text:0040B450                                         ; DATA XREF: .text:jpt_40AEBF↑o
.text:0040B450                 mov     ebx, ebp        ; jumptable 0040AEBF case 47
.text:0040B452                 and     ebx, 5
.text:0040B455                 cmp     ebx, 5
.text:0040B458                 jz      short loc_40B4D5
.text:0040B45A                 lea     esi, [esi+0]
.text:0040B460
.text:0040B460 def_40AEBF:                             ; CODE XREF: .text:0040AEB9↑j
.text:0040B460                                         ; .text:0040AEBF↑j ...
.text:0040B460                 cmp     edi, [esp+878h] ; jumptable 0040AEBF default case, cases 34-41,44-46,48-62,65-90
.text:0040B467                 jz      loc_40B00B
.text:0040B46D                 movzx   ebx, byte ptr [esp+3Dh]
.text:0040B472                 test    ebp, 10h
.text:0040B478                 jz      short loc_40B4D0
.text:0040B47A                 movzx   edx, byte ptr [edi]
.text:0040B47D                 mov     eax, ds:__mb_cur_max
.text:0040B482                 movzx   ecx, dl
.text:0040B485                 cmp     dword ptr [eax], 1
.text:0040B488                 jz      short loc_40B4C0
.text:0040B48A                 mov     dword ptr [esp+4], 1
.text:0040B492                 mov     [esp], ecx
.text:0040B495                 call    _isctype
.text:0040B49A                 movzx   edx, byte ptr [edi]
.text:0040B49D
.text:0040B49D loc_40B49D:                             ; CODE XREF: .text:0040B4CE↓j
.text:0040B49D                 test    eax, eax
.text:0040B49F                 jnz     short loc_40B4B1
.text:0040B4A1
.text:0040B4A1 loc_40B4A1:                             ; CODE XREF: .text:0040B4D3↓j
.text:0040B4A1                 movzx   eax, dl
.text:0040B4A4
.text:0040B4A4 loc_40B4A4:                             ; CODE XREF: .text:0040B4BC↓j
.text:0040B4A4                 cmp     ebx, eax
.text:0040B4A6
.text:0040B4A6 loc_40B4A6:                             ; CODE XREF: .text:0040BA22↓j
.text:0040B4A6                 jz      loc_40AFE0
.text:0040B4AC                 jmp     loc_40B00B
.text:0040B4B1 ; ---------------------------------------------------------------------------
.text:0040B4B1
.text:0040B4B1 loc_40B4B1:                             ; CODE XREF: .text:0040B49F↑j
.text:0040B4B1                 movzx   ecx, dl
.text:0040B4B4                 mov     [esp], ecx
.text:0040B4B7                 call    tolower
.text:0040B4BC                 jmp     short loc_40B4A4
.text:0040B4BC ; ---------------------------------------------------------------------------
.text:0040B4BE                 align 10h
.text:0040B4C0
.text:0040B4C0 loc_40B4C0:                             ; CODE XREF: .text:0040B488↑j
.text:0040B4C0                 mov     eax, ds:_pctype
.text:0040B4C5                 mov     eax, [eax]
.text:0040B4C7                 movzx   eax, word ptr [eax+ecx*2]
.text:0040B4CB                 and     eax, 1
.text:0040B4CE                 jmp     short loc_40B49D
.text:0040B4D0 ; ---------------------------------------------------------------------------
.text:0040B4D0
.text:0040B4D0 loc_40B4D0:                             ; CODE XREF: .text:0040B478↑j
.text:0040B4D0                 movzx   edx, byte ptr [edi]
.text:0040B4D3                 jmp     short loc_40B4A1
.text:0040B4D5 ; ---------------------------------------------------------------------------
.text:0040B4D5
.text:0040B4D5 loc_40B4D5:                             ; CODE XREF: .text:0040B458↑j
.text:0040B4D5                 cmp     edi, [esp+878h]
.text:0040B4DC                 jz      loc_40B00B
.text:0040B4E2                 movzx   edx, byte ptr [esp+3Dh]
.text:0040B4E7                 cmp     dl, [edi]
.text:0040B4E9                 jnz     loc_40B00B
.text:0040B4EF                 mov     byte ptr [esp+3Eh], 1
.text:0040B4F4                 jmp     loc_40AFE0
.text:0040B4F9 ; ---------------------------------------------------------------------------
.text:0040B4F9
.text:0040B4F9 loc_40B4F9:                             ; CODE XREF: .text:0040AEBF↑j
.text:0040B4F9                                         ; DATA XREF: .text:jpt_40AEBF↑o
.text:0040B4F9                 test    ebp, 20h        ; jumptable 0040AEBF cases 33,43,64
.text:0040B4FF                 jz      def_40AEBF      ; jumptable 0040AEBF default case, cases 34-41,44-46,48-62,65-90
.text:0040B505                 cmp     byte ptr [esi], 28h ; '('
.text:0040B508                 jnz     def_40AEBF      ; jumptable 0040AEBF default case, cases 34-41,44-46,48-62,65-90
.text:0040B50E                 movzx   ecx, byte ptr [esp+3Fh]
.text:0040B513                 mov     [esp+14h], ebp
.text:0040B517                 mov     edx, [esp+878h]
.text:0040B51E                 movzx   ebx, byte ptr [esp+3Dh]
.text:0040B523                 mov     [esp+8], edi
.text:0040B527                 mov     [esp+10h], ecx
.text:0040B52B                 mov     [esp+0Ch], edx
.text:0040B52F                 mov     [esp+4], esi
.text:0040B533                 mov     [esp], ebx
.text:0040B536                 call    sub_40BC50
.text:0040B53B                 cmp     eax, 0FFFFFFFFh
.text:0040B53E                 mov     ecx, eax
.text:0040B540                 jz      def_40AEBF      ; jumptable 0040AEBF default case, cases 34-41,44-46,48-62,65-90
.text:0040B546                 jmp     loc_40B010
.text:0040B546 ; ---------------------------------------------------------------------------
.text:0040B54B                 align 10h
.text:0040B550
.text:0040B550 loc_40B550:                             ; CODE XREF: .text:0040AEBF↑j
.text:0040B550                                         ; DATA XREF: .text:jpt_40AEBF↑o
.text:0040B550                 mov     eax, ds:dword_41B260 ; jumptable 0040AEBF case 91
.text:0040B555                 test    eax, eax
.text:0040B557                 jz      loc_40B970
.text:0040B55D
.text:0040B55D loc_40B55D:                             ; CODE XREF: .text:0040B98E↓j
.text:0040B55D                 cmp     edi, [esp+878h]
.text:0040B564                 mov     ecx, 1
.text:0040B569                 jz      loc_40B010
.text:0040B56F                 movzx   edx, byte ptr [edi]
.text:0040B572                 cmp     dl, 2Eh ; '.'
.text:0040B575                 mov     bl, dl
.text:0040B577                 jz      loc_40B960
.text:0040B57D
.text:0040B57D loc_40B57D:                             ; CODE XREF: .text:0040B965↓j
.text:0040B57D                 cmp     dl, 2Fh ; '/'
.text:0040B580                 jz      loc_40B946
.text:0040B586
.text:0040B586 loc_40B586:                             ; CODE XREF: .text:0040B951↓j
.text:0040B586                 mov     byte ptr [esp+2Fh], 0
.text:0040B58B                 movzx   eax, byte ptr [esi]
.text:0040B58E                 cmp     al, 21h ; '!'
.text:0040B590                 jz      loc_40B93C
.text:0040B596                 mov     ecx, ds:dword_41B260
.text:0040B59C                 test    ecx, ecx
.text:0040B59E                 js      loc_40B934
.text:0040B5A4
.text:0040B5A4 loc_40B5A4:                             ; CODE XREF: .text:0040B936↓j
.text:0040B5A4                                         ; .text:0040B941↓j
.text:0040B5A4                 cmp     byte ptr [esp+2Fh], 0
.text:0040B5A9                 jz      short loc_40B5AC
.text:0040B5AB                 inc     esi
.text:0040B5AC
.text:0040B5AC loc_40B5AC:                             ; CODE XREF: .text:0040B5A9↑j
.text:0040B5AC                 test    ebp, 10h
.text:0040B5B2                 jz      short loc_40B5E1
.text:0040B5B4                 movzx   ecx, bl
.text:0040B5B7                 mov     ebx, ds:__mb_cur_max
.text:0040B5BD                 cmp     dword ptr [ebx], 1
.text:0040B5C0                 jz      loc_40B921
.text:0040B5C6                 mov     dword ptr [esp+4], 1
.text:0040B5CE                 mov     [esp], ecx
.text:0040B5D1                 call    _isctype
.text:0040B5D6                 movzx   edx, byte ptr [edi]
.text:0040B5D9
.text:0040B5D9 loc_40B5D9:                             ; CODE XREF: .text:0040B92F↓j
.text:0040B5D9                 test    eax, eax
.text:0040B5DB                 jnz     loc_40B90D
.text:0040B5E1
.text:0040B5E1 loc_40B5E1:                             ; CODE XREF: .text:0040B5B2↑j
.text:0040B5E1                 mov     [esp+2Eh], dl
.text:0040B5E5
.text:0040B5E5 loc_40B5E5:                             ; CODE XREF: .text:0040B91C↓j
.text:0040B5E5                 movzx   ebx, byte ptr [esi]
.text:0040B5E8                 inc     esi
.text:0040B5E9                 lea     esi, [esi+0]
.text:0040B5F0
.text:0040B5F0 loc_40B5F0:                             ; CODE XREF: .text:0040B67A↓j
.text:0040B5F0                 test    ebp, 2
.text:0040B5F6                 jnz     short loc_40B601
.text:0040B5F8                 cmp     bl, 5Ch ; '\'
.text:0040B5FB                 jz      loc_40B898
.text:0040B601
.text:0040B601 loc_40B601:                             ; CODE XREF: .text:0040B5F6↑j
.text:0040B601                 cmp     bl, 5Bh ; '['
.text:0040B604                 jz      loc_40B801
.text:0040B60A
.text:0040B60A loc_40B60A:                             ; CODE XREF: .text:0040B804↓j
.text:0040B60A                 test    bl, bl
.text:0040B60C                 mov     ecx, 1
.text:0040B611                 jz      loc_40B010
.text:0040B617                 test    ebp, 10h
.text:0040B61D                 jz      short loc_40B649
.text:0040B61F                 mov     ecx, ds:__mb_cur_max
.text:0040B625                 movzx   edx, bl
.text:0040B628                 cmp     dword ptr [ecx], 1
.text:0040B62B                 jz      loc_40B7EE
.text:0040B631                 mov     dword ptr [esp+4], 1
.text:0040B639                 mov     [esp], edx
.text:0040B63C                 call    _isctype
.text:0040B641
.text:0040B641 loc_40B641:                             ; CODE XREF: .text:0040B7FC↓j
.text:0040B641                 test    eax, eax
.text:0040B643                 jnz     loc_40B7DE
.text:0040B649
.text:0040B649 loc_40B649:                             ; CODE XREF: .text:0040B61D↑j
.text:0040B649                 mov     al, bl
.text:0040B64B
.text:0040B64B loc_40B64B:                             ; CODE XREF: .text:0040B7E9↓j
.text:0040B64B                 mov     bl, al
.text:0040B64D
.text:0040B64D loc_40B64D:                             ; CODE XREF: .text:0040B841↓j
.text:0040B64D                 mov     byte ptr [esp+27h], 0
.text:0040B652                 movzx   edx, byte ptr [esi]
.text:0040B655                 cmp     dl, 2Dh ; '-'
.text:0040B658                 mov     cl, dl
.text:0040B65A                 jz      loc_40B7C0
.text:0040B660
.text:0040B660 loc_40B660:                             ; CODE XREF: .text:0040B7C6↓j
.text:0040B660                                         ; .text:0040B7CE↓j ...
.text:0040B660                 cmp     byte ptr [esp+27h], 0
.text:0040B665                 jnz     short loc_40B66D
.text:0040B667                 cmp     bl, [esp+2Eh]
.text:0040B66B                 jz      short loc_40B6D7
.text:0040B66D
.text:0040B66D loc_40B66D:                             ; CODE XREF: .text:0040B665↑j
.text:0040B66D                 inc     esi
.text:0040B66E                 mov     dl, bl
.text:0040B670                 cmp     cl, 2Dh ; '-'
.text:0040B673                 mov     bl, cl
.text:0040B675                 jz      short loc_40B695
.text:0040B677
.text:0040B677 loc_40B677:                             ; CODE XREF: .text:0040B69A↓j
.text:0040B677                                         ; .text:0040B6D2↓j ...
.text:0040B677                 cmp     bl, 5Dh ; ']'
.text:0040B67A                 jnz     loc_40B5F0
.text:0040B680                 cmp     byte ptr [esp+2Fh], 0
.text:0040B685                 mov     ecx, 1
.text:0040B68A                 jnz     loc_40AFE0
.text:0040B690                 jmp     loc_40B010
.text:0040B695 ; ---------------------------------------------------------------------------
.text:0040B695
.text:0040B695 loc_40B695:                             ; CODE XREF: .text:0040B675↑j
.text:0040B695                 movzx   eax, byte ptr [esi]
.text:0040B698                 cmp     al, 5Dh ; ']'
.text:0040B69A                 jz      short loc_40B677
.text:0040B69C                 inc     esi
.text:0040B69D                 mov     bl, al
.text:0040B69F                 test    ebp, 2
.text:0040B6A5                 jnz     short loc_40B6AF
.text:0040B6A7                 cmp     al, 5Ch ; '\'
.text:0040B6A9                 jz      loc_40B7B0
.text:0040B6AF
.text:0040B6AF loc_40B6AF:                             ; CODE XREF: .text:0040B6A5↑j
.text:0040B6AF                                         ; .text:0040B7B4↓j
.text:0040B6AF                 test    bl, bl
.text:0040B6B1                 mov     ecx, 1
.text:0040B6B6                 jz      loc_40B010
.text:0040B6BC                 movzx   ecx, byte ptr [esp+2Eh]
.text:0040B6C1                 movsx   eax, dl
.text:0040B6C4                 cmp     eax, ecx
.text:0040B6C6                 jg      short loc_40B6CE
.text:0040B6C8                 cmp     [esp+2Eh], bl
.text:0040B6CC                 jbe     short loc_40B6D4
.text:0040B6CE
.text:0040B6CE loc_40B6CE:                             ; CODE XREF: .text:0040B6C6↑j
.text:0040B6CE                                         ; .text:0040B88D↓j
.text:0040B6CE                 movzx   ebx, byte ptr [esi]
.text:0040B6D1                 inc     esi
.text:0040B6D2                 jmp     short loc_40B677
.text:0040B6D4 ; ---------------------------------------------------------------------------
.text:0040B6D4
.text:0040B6D4 loc_40B6D4:                             ; CODE XREF: .text:0040B6CC↑j
.text:0040B6D4                                         ; .text:0040B700↓j ...
.text:0040B6D4                 movzx   edx, byte ptr [esi]
.text:0040B6D7
.text:0040B6D7 loc_40B6D7:                             ; CODE XREF: .text:0040B66B↑j
.text:0040B6D7                 inc     esi
.text:0040B6D8                 mov     bl, dl
.text:0040B6DA                 test    dl, dl
.text:0040B6DC                 mov     ecx, 1
.text:0040B6E1                 jz      loc_40B010
.text:0040B6E7                 test    ebp, 2
.text:0040B6ED                 jnz     short loc_40B6F8
.text:0040B6EF                 cmp     dl, 5Ch ; '\'
.text:0040B6F2                 jz      loc_40B7A0
.text:0040B6F8
.text:0040B6F8 loc_40B6F8:                             ; CODE XREF: .text:0040B6ED↑j
.text:0040B6F8                 cmp     dl, 5Bh ; '['
.text:0040B6FB                 jz      short loc_40B710
.text:0040B6FD
.text:0040B6FD loc_40B6FD:                             ; CODE XREF: .text:0040B71D↓j
.text:0040B6FD                                         ; .text:0040B743↓j
.text:0040B6FD                 cmp     bl, 5Dh ; ']'
.text:0040B700                 jnz     short loc_40B6D4
.text:0040B702                 cmp     byte ptr [esp+2Fh], 0
.text:0040B707                 jmp     loc_40B022
.text:0040B707 ; ---------------------------------------------------------------------------
.text:0040B70C                 align 10h
.text:0040B710
.text:0040B710 loc_40B710:                             ; CODE XREF: .text:0040B6FB↑j
.text:0040B710                 movzx   eax, byte ptr [esi]
.text:0040B713                 cmp     al, 3Ah ; ':'
.text:0040B715                 jz      short loc_40B764
.text:0040B717                 cmp     al, 3Dh ; '='
.text:0040B719                 jz      short loc_40B745
.text:0040B71B                 cmp     al, 2Eh ; '.'
.text:0040B71D                 jnz     short loc_40B6FD
.text:0040B71F                 inc     esi
.text:0040B720
.text:0040B720 loc_40B720:                             ; CODE XREF: .text:0040B734↓j
.text:0040B720                                         ; .text:0040B73A↓j
.text:0040B720                 inc     esi
.text:0040B721                 mov     ecx, 1
.text:0040B726                 movzx   ebx, byte ptr [esi]
.text:0040B729                 test    bl, bl
.text:0040B72B                 jz      loc_40B010
.text:0040B731                 cmp     bl, 2Eh ; '.'
.text:0040B734                 jnz     short loc_40B720
.text:0040B736                 cmp     byte ptr [esi+1], 5Dh ; ']'
.text:0040B73A                 jnz     short loc_40B720
.text:0040B73C
.text:0040B73C loc_40B73C:                             ; CODE XREF: .text:0040B75D↓j
.text:0040B73C                                         ; .text:0040B797↓j
.text:0040B73C                 add     esi, 2
.text:0040B73F                 movzx   ebx, byte ptr [esi]
.text:0040B742
.text:0040B742 loc_40B742:                             ; CODE XREF: .text:0040B7A3↓j
.text:0040B742                 inc     esi
.text:0040B743                 jmp     short loc_40B6FD
.text:0040B745 ; ---------------------------------------------------------------------------
.text:0040B745
.text:0040B745 loc_40B745:                             ; CODE XREF: .text:0040B719↑j
.text:0040B745                 inc     esi
.text:0040B746                 cmp     byte ptr [esi], 0
.text:0040B749                 jz      loc_40B00B
.text:0040B74F                 inc     esi
.text:0040B750                 cmp     byte ptr [esi], 3Dh ; '='
.text:0040B753                 jnz     loc_40B00B
.text:0040B759                 cmp     byte ptr [esi+1], 5Dh ; ']'
.text:0040B75D                 jz      short loc_40B73C
.text:0040B75F                 jmp     loc_40B00B
.text:0040B764 ; ---------------------------------------------------------------------------
.text:0040B764
.text:0040B764 loc_40B764:                             ; CODE XREF: .text:0040B715↑j
.text:0040B764                 xor     eax, eax
.text:0040B766                 mov     edx, esi
.text:0040B768
.text:0040B768 loc_40B768:                             ; CODE XREF: .text:0040B788↓j
.text:0040B768                 inc     eax
.text:0040B769                 inc     esi
.text:0040B76A                 cmp     eax, 800h
.text:0040B76F                 movzx   ebx, byte ptr [esi]
.text:0040B772                 mov     ecx, 1
.text:0040B777                 jz      loc_40B010
.text:0040B77D                 cmp     bl, 3Ah ; ':'
.text:0040B780                 jz      short loc_40B791
.text:0040B782
.text:0040B782 loc_40B782:                             ; CODE XREF: .text:0040B795↓j
.text:0040B782                 sub     bl, 61h ; 'a'
.text:0040B785                 cmp     bl, 18h
.text:0040B788                 jbe     short loc_40B768
.text:0040B78A                 mov     esi, edx
.text:0040B78C                 jmp     loc_40B6D4
.text:0040B791 ; ---------------------------------------------------------------------------
.text:0040B791
.text:0040B791 loc_40B791:                             ; CODE XREF: .text:0040B780↑j
.text:0040B791                 cmp     byte ptr [esi+1], 5Dh ; ']'
.text:0040B795                 jnz     short loc_40B782
.text:0040B797                 jmp     short loc_40B73C
.text:0040B797 ; ---------------------------------------------------------------------------
.text:0040B799                 align 10h
.text:0040B7A0
.text:0040B7A0 loc_40B7A0:                             ; CODE XREF: .text:0040B6F2↑j
.text:0040B7A0                 cmp     byte ptr [esi], 0
.text:0040B7A3                 jnz     short loc_40B742
.text:0040B7A5                 jmp     loc_40B00B
.text:0040B7A5 ; ---------------------------------------------------------------------------
.text:0040B7AA                 align 10h
.text:0040B7B0
.text:0040B7B0 loc_40B7B0:                             ; CODE XREF: .text:0040B6A9↑j
.text:0040B7B0                 movzx   ebx, byte ptr [esi]
.text:0040B7B3                 inc     esi
.text:0040B7B4                 jmp     loc_40B6AF
.text:0040B7B4 ; ---------------------------------------------------------------------------
.text:0040B7B9                 align 10h
.text:0040B7C0
.text:0040B7C0 loc_40B7C0:                             ; CODE XREF: .text:0040B65A↑j
.text:0040B7C0                 movzx   eax, byte ptr [esi+1]
.text:0040B7C4                 test    al, al
.text:0040B7C6                 jz      loc_40B660
.text:0040B7CC                 cmp     al, 5Dh ; ']'
.text:0040B7CE                 jz      loc_40B660
.text:0040B7D4                 mov     byte ptr [esp+27h], 1
.text:0040B7D9                 jmp     loc_40B660
.text:0040B7DE ; ---------------------------------------------------------------------------
.text:0040B7DE
.text:0040B7DE loc_40B7DE:                             ; CODE XREF: .text:0040B643↑j
.text:0040B7DE                 movzx   edx, bl
.text:0040B7E1                 mov     [esp], edx
.text:0040B7E4                 call    tolower
.text:0040B7E9                 jmp     loc_40B64B
.text:0040B7EE ; ---------------------------------------------------------------------------
.text:0040B7EE
.text:0040B7EE loc_40B7EE:                             ; CODE XREF: .text:0040B62B↑j
.text:0040B7EE                 mov     eax, ds:_pctype
.text:0040B7F3                 mov     ecx, [eax]
.text:0040B7F5                 movzx   eax, word ptr [ecx+edx*2]
.text:0040B7F9                 and     eax, 1
.text:0040B7FC                 jmp     loc_40B641
.text:0040B801 ; ---------------------------------------------------------------------------
.text:0040B801
.text:0040B801 loc_40B801:                             ; CODE XREF: .text:0040B604↑j
.text:0040B801                 cmp     byte ptr [esi], 3Ah ; ':'
.text:0040B804                 jnz     loc_40B60A
.text:0040B80A                 mov     [esp+28h], esi
.text:0040B80E                 xor     edx, edx
.text:0040B810
.text:0040B810 loc_40B810:                             ; CODE XREF: .text:0040B839↓j
.text:0040B810                 cmp     edx, 800h
.text:0040B816                 mov     ecx, 1
.text:0040B81B                 jz      loc_40B010
.text:0040B821                 inc     esi
.text:0040B822                 movzx   ebx, byte ptr [esi]
.text:0040B825                 cmp     bl, 3Ah ; ':'
.text:0040B828                 jz      short loc_40B846
.text:0040B82A
.text:0040B82A loc_40B82A:                             ; CODE XREF: .text:0040B84A↓j
.text:0040B82A                 mov     cl, bl
.text:0040B82C                 sub     cl, 61h ; 'a'
.text:0040B82F                 cmp     cl, 18h
.text:0040B832                 ja      short loc_40B83B
.text:0040B834                 mov     [esp+edx+40h], bl
.text:0040B838                 inc     edx
.text:0040B839                 jmp     short loc_40B810
.text:0040B83B ; ---------------------------------------------------------------------------
.text:0040B83B
.text:0040B83B loc_40B83B:                             ; CODE XREF: .text:0040B832↑j
.text:0040B83B                 mov     esi, [esp+28h]
.text:0040B83F                 mov     bl, 5Bh ; '['
.text:0040B841                 jmp     loc_40B64D
.text:0040B846 ; ---------------------------------------------------------------------------
.text:0040B846
.text:0040B846 loc_40B846:                             ; CODE XREF: .text:0040B828↑j
.text:0040B846                 cmp     byte ptr [esi+1], 5Dh ; ']'
.text:0040B84A                 jnz     short loc_40B82A
.text:0040B84C                 mov     byte ptr [esp+edx+40h], 0
.text:0040B851                 add     esi, 2
.text:0040B854                 lea     edx, [esp+40h]
.text:0040B858                 mov     [esp], edx
.text:0040B85B                 call    wctype
.text:0040B860                 movzx   ebx, ax
.text:0040B863                 mov     ecx, 1
.text:0040B868                 test    bx, bx
.text:0040B86B                 jz      loc_40B010
.text:0040B871                 movzx   edx, byte ptr [edi]
.text:0040B874                 mov     [esp], edx
.text:0040B877                 call    btowc
.text:0040B87C                 mov     [esp+4], ebx
.text:0040B880                 movzx   ecx, ax
.text:0040B883                 mov     [esp], ecx
.text:0040B886                 call    iswctype
.text:0040B88B                 test    eax, eax
.text:0040B88D                 jz      loc_40B6CE
.text:0040B893                 jmp     loc_40B6D4
.text:0040B898 ; ---------------------------------------------------------------------------
.text:0040B898
.text:0040B898 loc_40B898:                             ; CODE XREF: .text:0040B5FB↑j
.text:0040B898                 movzx   edx, byte ptr [esi]
.text:0040B89B                 mov     ecx, 1
.text:0040B8A0                 test    dl, dl
.text:0040B8A2                 jz      loc_40B010
.text:0040B8A8                 test    ebp, 10h
.text:0040B8AE                 jz      short loc_40B8D5
.text:0040B8B0                 mov     ebx, ds:__mb_cur_max
.text:0040B8B6                 movzx   ecx, dl
.text:0040B8B9                 cmp     dword ptr [ebx], 1
.text:0040B8BC                 jz      short loc_40B8FD
.text:0040B8BE                 mov     dword ptr [esp+4], 1
.text:0040B8C6                 mov     [esp], ecx
.text:0040B8C9                 call    _isctype
.text:0040B8CE                 movzx   edx, byte ptr [esi]
.text:0040B8D1
.text:0040B8D1 loc_40B8D1:                             ; CODE XREF: .text:0040B90B↓j
.text:0040B8D1                 test    eax, eax
.text:0040B8D3                 jnz     short loc_40B8F0
.text:0040B8D5
.text:0040B8D5 loc_40B8D5:                             ; CODE XREF: .text:0040B8AE↑j
.text:0040B8D5                 mov     al, dl
.text:0040B8D7
.text:0040B8D7 loc_40B8D7:                             ; CODE XREF: .text:0040B8FB↓j
.text:0040B8D7                 inc     esi
.text:0040B8D8                 mov     bl, al
.text:0040B8DA                 cmp     al, [esp+2Eh]
.text:0040B8DE                 jnz     loc_40B677
.text:0040B8E4                 jmp     loc_40B6D4
.text:0040B8E4 ; ---------------------------------------------------------------------------
.text:0040B8E9                 align 10h
.text:0040B8F0
.text:0040B8F0 loc_40B8F0:                             ; CODE XREF: .text:0040B8D3↑j
.text:0040B8F0                 movzx   ecx, dl
.text:0040B8F3                 mov     [esp], ecx
.text:0040B8F6                 call    tolower
.text:0040B8FB                 jmp     short loc_40B8D7
.text:0040B8FD ; ---------------------------------------------------------------------------
.text:0040B8FD
.text:0040B8FD loc_40B8FD:                             ; CODE XREF: .text:0040B8BC↑j
.text:0040B8FD                 mov     eax, ds:_pctype
.text:0040B902                 mov     ebx, [eax]
.text:0040B904                 movzx   eax, word ptr [ebx+ecx*2]
.text:0040B908                 and     eax, 1
.text:0040B90B                 jmp     short loc_40B8D1
.text:0040B90D ; ---------------------------------------------------------------------------
.text:0040B90D
.text:0040B90D loc_40B90D:                             ; CODE XREF: .text:0040B5DB↑j
.text:0040B90D                 movzx   ecx, dl
.text:0040B910                 mov     [esp], ecx
.text:0040B913                 call    tolower
.text:0040B918                 mov     [esp+2Eh], al
.text:0040B91C                 jmp     loc_40B5E5
.text:0040B921 ; ---------------------------------------------------------------------------
.text:0040B921
.text:0040B921 loc_40B921:                             ; CODE XREF: .text:0040B5C0↑j
.text:0040B921                 mov     eax, ds:_pctype
.text:0040B926                 mov     ebx, [eax]
.text:0040B928                 movzx   eax, word ptr [ebx+ecx*2]
.text:0040B92C                 and     eax, 1
.text:0040B92F                 jmp     loc_40B5D9
.text:0040B934 ; ---------------------------------------------------------------------------
.text:0040B934
.text:0040B934 loc_40B934:                             ; CODE XREF: .text:0040B59E↑j
.text:0040B934                 cmp     al, 5Eh ; '^'
.text:0040B936                 jnz     loc_40B5A4
.text:0040B93C
.text:0040B93C loc_40B93C:                             ; CODE XREF: .text:0040B590↑j
.text:0040B93C                 mov     byte ptr [esp+2Fh], 1
.text:0040B941                 jmp     loc_40B5A4
.text:0040B946 ; ---------------------------------------------------------------------------
.text:0040B946
.text:0040B946 loc_40B946:                             ; CODE XREF: .text:0040B580↑j
.text:0040B946                 test    ebp, 1
.text:0040B94C                 mov     ecx, 1
.text:0040B951                 jz      loc_40B586
.text:0040B957                 jmp     loc_40B010
.text:0040B957 ; ---------------------------------------------------------------------------
.text:0040B95C                 align 10h
.text:0040B960
.text:0040B960 loc_40B960:                             ; CODE XREF: .text:0040B577↑j
.text:0040B960                 cmp     byte ptr [esp+3Fh], 0
.text:0040B965                 jz      loc_40B57D
.text:0040B96B                 jmp     loc_40B010
.text:0040B970 ; ---------------------------------------------------------------------------
.text:0040B970
.text:0040B970 loc_40B970:                             ; CODE XREF: .text:0040B557↑j
.text:0040B970                 mov     dword ptr [esp], offset sub_40AE20
.text:0040B977                 call    getenv
.text:0040B97C                 test    eax, eax
.text:0040B97E                 setnz   dl
.text:0040B981                 movzx   ecx, dl
.text:0040B984                 lea     ebx, [ecx+ecx-1]
.text:0040B988                 mov     ds:dword_41B260, ebx
.text:0040B98E                 jmp     loc_40B55D
.text:0040B993 ; ---------------------------------------------------------------------------
.text:0040B993
.text:0040B993 loc_40B993:                             ; CODE XREF: .text:0040AEBF↑j
.text:0040B993                                         ; DATA XREF: .text:jpt_40AEBF↑o
.text:0040B993                 test    ebp, 2          ; jumptable 0040AEBF case 92
.text:0040B999                 jnz     short loc_40B9DE
.text:0040B99B                 movzx   ebx, byte ptr [esi]
.text:0040B99E                 mov     ecx, 1
.text:0040B9A3                 inc     esi
.text:0040B9A4                 test    bl, bl
.text:0040B9A6                 jz      loc_40B010
.text:0040B9AC                 test    ebp, 10h
.text:0040B9B2                 jz      short loc_40B9DA
.text:0040B9B4                 mov     ecx, ds:__mb_cur_max
.text:0040B9BA                 movzx   edx, bl
.text:0040B9BD                 cmp     dword ptr [ecx], 1
.text:0040B9C0                 jz      loc_40BA56
.text:0040B9C6                 mov     dword ptr [esp+4], 1
.text:0040B9CE                 mov     [esp], edx
.text:0040B9D1                 call    _isctype
.text:0040B9D6
.text:0040B9D6 loc_40B9D6:                             ; CODE XREF: .text:0040BA64↓j
.text:0040B9D6                 test    eax, eax
.text:0040B9D8                 jnz     short loc_40BA49
.text:0040B9DA
.text:0040B9DA loc_40B9DA:                             ; CODE XREF: .text:0040B9B2↑j
.text:0040B9DA                 mov     al, bl
.text:0040B9DC
.text:0040B9DC loc_40B9DC:                             ; CODE XREF: .text:0040BA54↓j
.text:0040B9DC                 mov     bl, al
.text:0040B9DE
.text:0040B9DE loc_40B9DE:                             ; CODE XREF: .text:0040B999↑j
.text:0040B9DE                 cmp     edi, [esp+878h]
.text:0040B9E5                 jz      loc_40B00B
.text:0040B9EB                 test    ebp, 10h
.text:0040B9F1                 movzx   ebx, bl
.text:0040B9F4                 jz      short loc_40BA44
.text:0040B9F6                 movzx   edx, byte ptr [edi]
.text:0040B9F9                 mov     eax, ds:__mb_cur_max
.text:0040B9FE                 movzx   ecx, dl
.text:0040BA01                 cmp     dword ptr [eax], 1
.text:0040BA04                 jz      short loc_40BA34
.text:0040BA06                 mov     dword ptr [esp+4], 1
.text:0040BA0E                 mov     [esp], ecx
.text:0040BA11                 call    _isctype
.text:0040BA16                 movzx   edx, byte ptr [edi]
.text:0040BA19
.text:0040BA19 loc_40BA19:                             ; CODE XREF: .text:0040BA42↓j
.text:0040BA19                 test    eax, eax
.text:0040BA1B                 jnz     short loc_40BA27
.text:0040BA1D
.text:0040BA1D loc_40BA1D:                             ; CODE XREF: .text:0040BA47↓j
.text:0040BA1D                 movzx   eax, dl
.text:0040BA20
.text:0040BA20 loc_40BA20:                             ; CODE XREF: .text:0040BA32↓j
.text:0040BA20                 cmp     eax, ebx
.text:0040BA22                 jmp     loc_40B4A6
.text:0040BA27 ; ---------------------------------------------------------------------------
.text:0040BA27
.text:0040BA27 loc_40BA27:                             ; CODE XREF: .text:0040BA1B↑j
.text:0040BA27                 movzx   ecx, dl
.text:0040BA2A                 mov     [esp], ecx
.text:0040BA2D                 call    tolower
.text:0040BA32                 jmp     short loc_40BA20
.text:0040BA34 ; ---------------------------------------------------------------------------
.text:0040BA34
.text:0040BA34 loc_40BA34:                             ; CODE XREF: .text:0040BA04↑j
.text:0040BA34                 mov     eax, ds:_pctype
.text:0040BA39                 mov     eax, [eax]
.text:0040BA3B                 movzx   eax, word ptr [eax+ecx*2]
.text:0040BA3F                 and     eax, 1
.text:0040BA42                 jmp     short loc_40BA19
.text:0040BA44 ; ---------------------------------------------------------------------------
.text:0040BA44
.text:0040BA44 loc_40BA44:                             ; CODE XREF: .text:0040B9F4↑j
.text:0040BA44                 movzx   edx, byte ptr [edi]
.text:0040BA47                 jmp     short loc_40BA1D
.text:0040BA49 ; ---------------------------------------------------------------------------
.text:0040BA49
.text:0040BA49 loc_40BA49:                             ; CODE XREF: .text:0040B9D8↑j
.text:0040BA49                 movzx   edx, bl
.text:0040BA4C                 mov     [esp], edx
.text:0040BA4F                 call    tolower
.text:0040BA54                 jmp     short loc_40B9DC
.text:0040BA56 ; ---------------------------------------------------------------------------
.text:0040BA56
.text:0040BA56 loc_40BA56:                             ; CODE XREF: .text:0040B9C0↑j
.text:0040BA56                 mov     eax, ds:_pctype
.text:0040BA5B                 mov     ecx, [eax]
.text:0040BA5D                 movzx   eax, word ptr [ecx+edx*2]
.text:0040BA61                 and     eax, 1
.text:0040BA64                 jmp     loc_40B9D6
.text:0040BA64 ; ---------------------------------------------------------------------------
.text:0040BA69                 align 10h
.text:0040BA70
.text:0040BA70 loc_40BA70:                             ; CODE XREF: .text:0040AEA1↑j
.text:0040BA70                 movzx   edx, bl
.text:0040BA73                 mov     [esp], edx
.text:0040BA76                 call    tolower
.text:0040BA7B                 mov     [esp+3Dh], al
.text:0040BA7F                 jmp     loc_40AEAB
.text:0040BA84 ; ---------------------------------------------------------------------------
.text:0040BA84
.text:0040BA84 loc_40BA84:                             ; CODE XREF: .text:0040AE89↑j
.text:0040BA84                 mov     eax, ds:_pctype
.text:0040BA89                 mov     ecx, [eax]
.text:0040BA8B                 movzx   eax, word ptr [ecx+edx*2]
.text:0040BA8F                 and     eax, 1
.text:0040BA92                 jmp     loc_40AE9F
.text:0040BA92 ; ---------------------------------------------------------------------------
.text:0040BA97                 align 10h
.text:0040BAA0
.text:0040BAA0 ; =============== S U B R O U T I N E =======================================
.text:0040BAA0
.text:0040BAA0
.text:0040BAA0 sub_40BAA0      proc near               ; CODE XREF: .text:0040B3E2↑p
.text:0040BAA0                                         ; sub_40BAA0+5C↓p
.text:0040BAA0
.text:0040BAA0 VarName         = dword ptr -0Ch
.text:0040BAA0 arg_0           = dword ptr  4
.text:0040BAA0
.text:0040BAA0                 push    esi
.text:0040BAA1                 push    ebx
.text:0040BAA2                 sub     esp, 4
.text:0040BAA5                 mov     esi, [esp+0Ch+arg_0]
.text:0040BAA9                 mov     ebx, esi
.text:0040BAAB                 nop
.text:0040BAAC                 lea     esi, [esi+0]
.text:0040BAB0
.text:0040BAB0 loc_40BAB0:                             ; CODE XREF: sub_40BAA0+43↓j
.text:0040BAB0                                         ; sub_40BAA0+63↓j ...
.text:0040BAB0                 inc     ebx
.text:0040BAB1                 mov     ecx, esi
.text:0040BAB3                 movzx   edx, byte ptr [ebx]
.text:0040BAB6                 test    dl, dl
.text:0040BAB8                 jz      short loc_40BAE8
.text:0040BABA                 cmp     dl, 5Bh ; '['
.text:0040BABD                 jz      short loc_40BB05
.text:0040BABF                 cmp     dl, 3Fh ; '?'
.text:0040BAC2                 jz      short loc_40BAF0
.text:0040BAC4                 cmp     dl, 2Ah ; '*'
.text:0040BAC7                 jz      short loc_40BAF0
.text:0040BAC9                 cmp     dl, 2Bh ; '+'
.text:0040BACC                 jz      short loc_40BAF0
.text:0040BACE                 cmp     dl, 40h ; '@'
.text:0040BAD1                 jz      short loc_40BAF0
.text:0040BAD3                 cmp     dl, 21h ; '!'
.text:0040BAD6                 jz      short loc_40BAF0
.text:0040BAD8                 nop
.text:0040BAD9                 lea     esi, [esi+0]
.text:0040BAE0
.text:0040BAE0 loc_40BAE0:                             ; CODE XREF: sub_40BAA0+54↓j
.text:0040BAE0                 cmp     dl, 29h ; ')'
.text:0040BAE3                 jnz     short loc_40BAB0
.text:0040BAE5                 lea     ecx, [ebx+1]
.text:0040BAE8
.text:0040BAE8 loc_40BAE8:                             ; CODE XREF: sub_40BAA0+18↑j
.text:0040BAE8                                         ; sub_40BAA0+95↓j
.text:0040BAE8                 pop     esi
.text:0040BAE9                 mov     eax, ecx
.text:0040BAEB                 pop     ebx
.text:0040BAEC                 pop     esi
.text:0040BAED                 retn
.text:0040BAED ; ---------------------------------------------------------------------------
.text:0040BAEE                 align 10h
.text:0040BAF0
.text:0040BAF0 loc_40BAF0:                             ; CODE XREF: sub_40BAA0+22↑j
.text:0040BAF0                                         ; sub_40BAA0+27↑j ...
.text:0040BAF0                 cmp     byte ptr [ebx+1], 28h ; '('
.text:0040BAF4                 jnz     short loc_40BAE0
.text:0040BAF6                 lea     edx, [ebx+1]
.text:0040BAF9                 mov     [esp+0Ch+VarName], edx
.text:0040BAFC                 call    sub_40BAA0
.text:0040BB01                 mov     ebx, eax
.text:0040BB03                 jmp     short loc_40BAB0
.text:0040BB05 ; ---------------------------------------------------------------------------
.text:0040BB05
.text:0040BB05 loc_40BB05:                             ; CODE XREF: sub_40BAA0+1D↑j
.text:0040BB05                 mov     eax, ds:dword_41B260
.text:0040BB0A                 test    eax, eax
.text:0040BB0C                 jz      short loc_40BB5A
.text:0040BB0E
.text:0040BB0E loc_40BB0E:                             ; CODE XREF: sub_40BAA0+D8↓j
.text:0040BB0E                 inc     ebx
.text:0040BB0F                 movzx   eax, byte ptr [ebx]
.text:0040BB12                 cmp     al, 21h ; '!'
.text:0040BB14                 jz      short loc_40BB54
.text:0040BB16                 mov     ecx, ds:dword_41B260
.text:0040BB1C                 test    ecx, ecx
.text:0040BB1E                 js      short loc_40BB50
.text:0040BB20
.text:0040BB20 loc_40BB20:                             ; CODE XREF: sub_40BAA0+B2↓j
.text:0040BB20                                         ; sub_40BAA0+B8↓j
.text:0040BB20                 cmp     al, 5Dh ; ']'
.text:0040BB22                 jz      short loc_40BB43
.text:0040BB24                 lea     esi, [esi+0]
.text:0040BB2A                 lea     edi, [edi+0]
.text:0040BB30
.text:0040BB30 loc_40BB30:                             ; CODE XREF: sub_40BAA0+9C↓j
.text:0040BB30                                         ; sub_40BAA0+A9↓j
.text:0040BB30                 inc     ebx
.text:0040BB31                 mov     ecx, esi
.text:0040BB33                 test    al, al
.text:0040BB35                 jz      short loc_40BAE8
.text:0040BB37                 movzx   eax, byte ptr [ebx]
.text:0040BB3A                 cmp     al, 5Dh ; ']'
.text:0040BB3C                 jnz     short loc_40BB30
.text:0040BB3E                 jmp     loc_40BAB0
.text:0040BB43 ; ---------------------------------------------------------------------------
.text:0040BB43
.text:0040BB43 loc_40BB43:                             ; CODE XREF: sub_40BAA0+82↑j
.text:0040BB43                 inc     ebx
.text:0040BB44                 movzx   eax, byte ptr [ebx]
.text:0040BB47                 cmp     al, 5Dh ; ']'
.text:0040BB49                 jnz     short loc_40BB30
.text:0040BB4B                 jmp     loc_40BAB0
.text:0040BB50 ; ---------------------------------------------------------------------------
.text:0040BB50
.text:0040BB50 loc_40BB50:                             ; CODE XREF: sub_40BAA0+7E↑j
.text:0040BB50                 cmp     al, 5Eh ; '^'
.text:0040BB52                 jnz     short loc_40BB20
.text:0040BB54
.text:0040BB54 loc_40BB54:                             ; CODE XREF: sub_40BAA0+74↑j
.text:0040BB54                 inc     ebx
.text:0040BB55                 movzx   eax, byte ptr [ebx]
.text:0040BB58                 jmp     short loc_40BB20
.text:0040BB5A ; ---------------------------------------------------------------------------
.text:0040BB5A
.text:0040BB5A loc_40BB5A:                             ; CODE XREF: sub_40BAA0+6C↑j
.text:0040BB5A                 mov     [esp+0Ch+VarName], offset sub_40AE20 ; VarName
.text:0040BB61                 call    getenv
.text:0040BB66                 test    eax, eax
.text:0040BB68                 setnz   dl
.text:0040BB6B                 movzx   ecx, dl
.text:0040BB6E                 lea     edx, [ecx+ecx-1]
.text:0040BB72                 mov     ds:dword_41B260, edx
.text:0040BB78                 jmp     short loc_40BB0E
.text:0040BB78 sub_40BAA0      endp
.text:0040BB78
.text:0040BB78 ; ---------------------------------------------------------------------------
.text:0040BB7A                 align 10h
.text:0040BB80 aInvalidExtende db 'Invalid extended matching operator',0
.text:0040BB80                                         ; DATA XREF: sub_40BC50:def_40BDDB↓o
.text:0040BB80                                         ; sub_40CE00:def_40D000↓o
.text:0040BBA3                 align 20h
.text:0040BBC0 aCoreutils530Sr_2 db '../../coreutils-5.3.0-src/lib/fnmatch_loop.c',0
.text:0040BBC0                                         ; DATA XREF: sub_40BC50+47A↓o
.text:0040BBC0                                         ; sub_40BC50+532↓o ...
.text:0040BBED                 align 20h
.text:0040BC00 aInvalidExtende_0 db '! "Invalid extended matching operator"',0
.text:0040BC00                                         ; DATA XREF: sub_40BC50+482↓o
.text:0040BC00                                         ; sub_40CE00+502↓o
.text:0040BC27 aP1L            db 'p[-1] == L(',27h,')',27h,')',0
.text:0040BC27                                         ; DATA XREF: sub_40BC50+53A↓o
.text:0040BC27                                         ; sub_40CE00+5B8↓o
.text:0040BC37 aListNull       db 'list != NULL',0     ; DATA XREF: sub_40BC50+556↓o
.text:0040BC37                                         ; sub_40CE00+5D4↓o
.text:0040BC44                 align 10h
.text:0040BC50
.text:0040BC50 ; =============== S U B R O U T I N E =======================================
.text:0040BC50
.text:0040BC50
.text:0040BC50 ; int __cdecl sub_40BC50(int, char *, int, int, char, int)
.text:0040BC50 sub_40BC50      proc near               ; CODE XREF: .text:0040B071↑p
.text:0040BC50                                         ; .text:0040B435↑p ...
.text:0040BC50
.text:0040BC50 Str             = dword ptr -3Ch
.text:0040BC50 Source          = dword ptr -38h
.text:0040BC50 var_34          = dword ptr -34h
.text:0040BC50 var_30          = dword ptr -30h
.text:0040BC50 var_2C          = dword ptr -2Ch
.text:0040BC50 var_20          = dword ptr -20h
.text:0040BC50 var_1C          = dword ptr -1Ch
.text:0040BC50 var_15          = byte ptr -15h
.text:0040BC50 var_14          = dword ptr -14h
.text:0040BC50 arg_0           = dword ptr  4
.text:0040BC50 arg_4           = dword ptr  8
.text:0040BC50 arg_8           = dword ptr  0Ch
.text:0040BC50 arg_C           = dword ptr  10h
.text:0040BC50 arg_10          = byte ptr  14h
.text:0040BC50 arg_14          = dword ptr  18h
.text:0040BC50
.text:0040BC50                 push    ebp
.text:0040BC51                 xor     ebp, ebp
.text:0040BC53                 push    edi
.text:0040BC54                 push    esi
.text:0040BC55                 push    ebx
.text:0040BC56                 sub     esp, 2Ch
.text:0040BC59                 lea     edx, [esp+3Ch+var_14]
.text:0040BC5D                 movzx   ecx, [esp+3Ch+arg_10]
.text:0040BC62                 mov     [esp+3Ch+var_1C], edx
.text:0040BC66                 mov     edx, [esp+3Ch+arg_4]
.text:0040BC6A                 mov     [esp+3Ch+var_14], 0
.text:0040BC72                 mov     [esp+3Ch+var_15], cl
.text:0040BC76                 mov     [esp+3Ch+Str], edx ; Str
.text:0040BC79                 call    strlen
.text:0040BC7E                 mov     [esp+3Ch+var_20], eax
.text:0040BC82                 mov     esi, [esp+3Ch+arg_4]
.text:0040BC86                 inc     esi
.text:0040BC87                 mov     edi, esi
.text:0040BC89                 lea     esi, [esi+0]
.text:0040BC90
.text:0040BC90 loc_40BC90:                             ; CODE XREF: sub_40BC50+92↓j
.text:0040BC90                 movzx   eax, byte ptr [esi]
.text:0040BC93                 mov     ecx, 0FFFFFFFFh
.text:0040BC98                 test    al, al
.text:0040BC9A                 jz      loc_40BD4A
.text:0040BCA0                 cmp     al, 5Bh ; '['
.text:0040BCA2                 jz      loc_40C1C5
.text:0040BCA8                 cmp     al, 3Fh ; '?'
.text:0040BCAA                 jz      loc_40C1B2
.text:0040BCB0                 cmp     al, 2Ah ; '*'
.text:0040BCB2                 jz      loc_40C1B2
.text:0040BCB8                 cmp     al, 2Bh ; '+'
.text:0040BCBA                 jz      loc_40C1B2
.text:0040BCC0                 cmp     al, 40h ; '@'
.text:0040BCC2                 jz      loc_40C1B2
.text:0040BCC8                 cmp     al, 21h ; '!'
.text:0040BCCA                 jz      loc_40C1B2
.text:0040BCD0
.text:0040BCD0 loc_40BCD0:                             ; CODE XREF: sub_40BC50+566↓j
.text:0040BCD0                 cmp     al, 29h ; ')'
.text:0040BCD2                 jz      loc_40BD54
.text:0040BCD8                 cmp     al, 7Ch ; '|'
.text:0040BCDA                 lea     edx, [esi+1]
.text:0040BCDD                 jz      short loc_40BCE4
.text:0040BCDF                 nop
.text:0040BCE0
.text:0040BCE0 loc_40BCE0:                             ; CODE XREF: sub_40BC50+96↓j
.text:0040BCE0                                         ; sub_40BC50+F8↓j ...
.text:0040BCE0                 mov     esi, edx
.text:0040BCE2                 jmp     short loc_40BC90
.text:0040BCE4 ; ---------------------------------------------------------------------------
.text:0040BCE4
.text:0040BCE4 loc_40BCE4:                             ; CODE XREF: sub_40BC50+8D↑j
.text:0040BCE4                 test    ebp, ebp
.text:0040BCE6                 jnz     short loc_40BCE0
.text:0040BCE8                 mov     ebx, [esp+3Ch+arg_0]
.text:0040BCEC                 mov     edx, [esp+3Ch+var_20]
.text:0040BCF0                 sub     ebx, 3Fh ; '?'
.text:0040BCF3                 cmp     ebx, 1
.text:0040BCF6                 jbe     short loc_40BCFF
.text:0040BCF8                 mov     ecx, esi
.text:0040BCFA                 sub     ecx, edi
.text:0040BCFC                 lea     edx, [ecx+1]
.text:0040BCFF
.text:0040BCFF loc_40BCFF:                             ; CODE XREF: sub_40BC50+A6↑j
.text:0040BCFF                 cmp     edx, 1F3Bh
.text:0040BD05                 lea     eax, [edx+4]
.text:0040BD08                 mov     ecx, 0FFFFFFFFh
.text:0040BD0D                 ja      short loc_40BD4A
.text:0040BD0F                 mov     [esp+3Ch+Str], eax ; Size
.text:0040BD12                 call    malloc
.text:0040BD17                 mov     [esp+3Ch+Source], edi
.text:0040BD1B                 mov     ecx, esi
.text:0040BD1D                 lea     edx, [eax+4]
.text:0040BD20                 mov     [esp+3Ch+Str], edx
.text:0040BD23                 sub     ecx, edi
.text:0040BD25                 mov     ebx, eax
.text:0040BD27                 mov     [esp+3Ch+var_34], ecx
.text:0040BD2B                 call    sub_4128B0
.text:0040BD30                 mov     byte ptr [eax], 0
.text:0040BD33                 mov     edi, [esp+3Ch+var_1C]
.text:0040BD37                 mov     dword ptr [ebx], 0
.text:0040BD3D                 mov     [esp+3Ch+var_1C], ebx
.text:0040BD41                 mov     [edi], ebx
.text:0040BD43                 lea     edi, [esi+1]
.text:0040BD46                 mov     edx, edi
.text:0040BD48                 jmp     short loc_40BCE0
.text:0040BD4A ; ---------------------------------------------------------------------------
.text:0040BD4A
.text:0040BD4A loc_40BD4A:                             ; CODE XREF: sub_40BC50+4A↑j
.text:0040BD4A                                         ; sub_40BC50+BD↑j ...
.text:0040BD4A                 add     esp, 2Ch
.text:0040BD4D                 mov     eax, ecx
.text:0040BD4F                 pop     ebx
.text:0040BD50                 pop     esi
.text:0040BD51                 pop     edi
.text:0040BD52                 pop     ebp
.text:0040BD53                 retn
.text:0040BD54 ; ---------------------------------------------------------------------------
.text:0040BD54
.text:0040BD54 loc_40BD54:                             ; CODE XREF: sub_40BC50+82↑j
.text:0040BD54                 dec     ebp
.text:0040BD55                 lea     edx, [esi+1]
.text:0040BD58                 cmp     ebp, 0FFFFFFFFh
.text:0040BD5B                 jnz     short loc_40BCE0
.text:0040BD5D                 mov     ebp, [esp+3Ch+arg_0]
.text:0040BD61                 mov     edx, [esp+3Ch+var_20]
.text:0040BD65                 sub     ebp, 3Fh ; '?'
.text:0040BD68                 cmp     ebp, 1
.text:0040BD6B                 jbe     short loc_40BD74
.text:0040BD6D                 mov     ecx, esi
.text:0040BD6F                 sub     ecx, edi
.text:0040BD71                 lea     edx, [ecx+1]
.text:0040BD74
.text:0040BD74 loc_40BD74:                             ; CODE XREF: sub_40BC50+11B↑j
.text:0040BD74                 cmp     edx, 1F3Bh
.text:0040BD7A                 lea     eax, [edx+4]
.text:0040BD7D                 mov     ecx, 0FFFFFFFFh
.text:0040BD82                 ja      short loc_40BD4A
.text:0040BD84                 mov     [esp+3Ch+Str], eax ; Size
.text:0040BD87                 call    malloc
.text:0040BD8C                 mov     [esp+3Ch+Source], edi
.text:0040BD90                 mov     edx, esi
.text:0040BD92                 mov     ebx, eax
.text:0040BD94                 sub     edx, edi
.text:0040BD96                 lea     edi, [eax+4]
.text:0040BD99                 mov     [esp+3Ch+var_34], edx
.text:0040BD9D                 mov     [esp+3Ch+Str], edi
.text:0040BDA0                 call    sub_4128B0
.text:0040BDA5                 mov     byte ptr [eax], 0
.text:0040BDA8                 mov     ebp, [esp+3Ch+var_1C]
.text:0040BDAC                 mov     dword ptr [ebx], 0
.text:0040BDB2                 mov     [ebp+0], ebx
.text:0040BDB5                 mov     edx, [esp+3Ch+var_14]
.text:0040BDB9                 test    edx, edx
.text:0040BDBB                 jz      loc_40C196
.text:0040BDC1                 cmp     byte ptr [esi-1], 29h ; ')'
.text:0040BDC5                 jnz     loc_40C17A
.text:0040BDCB                 mov     eax, [esp+3Ch+arg_0]
.text:0040BDCF                 sub     eax, 21h ; '!'  ; switch 32 cases
.text:0040BDD2                 cmp     eax, 1Fh
.text:0040BDD5                 ja      def_40BDDB      ; jumptable 0040BDDB default case, cases 34-41,44-62
.text:0040BDDB                 jmp     ds:jpt_40BDDB[eax*4] ; switch jump
.text:0040BDDB ; ---------------------------------------------------------------------------
.text:0040BDE2                 align 4
.text:0040BDE4 jpt_40BDDB      dd offset loc_40BFDD    ; DATA XREF: sub_40BC50+18B↑r
.text:0040BDE4                 dd offset def_40BDDB    ; jump table for switch statement
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset loc_40BE64
.text:0040BDE4                 dd offset loc_40BE9B
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset def_40BDDB
.text:0040BDE4                 dd offset loc_40C0E0
.text:0040BDE4                 dd offset loc_40C117
.text:0040BE64 ; ---------------------------------------------------------------------------
.text:0040BE64
.text:0040BE64 loc_40BE64:                             ; CODE XREF: sub_40BC50+18B↑j
.text:0040BE64                                         ; DATA XREF: sub_40BC50:jpt_40BDDB↑o
.text:0040BE64                 movzx   ebp, [esp+3Ch+var_15] ; jumptable 0040BDDB case 42
.text:0040BE69                 mov     [esp+3Ch+Str], esi
.text:0040BE6C                 mov     ecx, [esp+3Ch+arg_C]
.text:0040BE70                 mov     edi, [esp+3Ch+arg_14]
.text:0040BE74                 mov     ebx, [esp+3Ch+arg_8]
.text:0040BE78                 mov     [esp+3Ch+var_34], ecx
.text:0040BE7C                 mov     [esp+3Ch+var_2C], edi
.text:0040BE80                 mov     [esp+3Ch+var_30], ebp
.text:0040BE84                 mov     [esp+3Ch+Source], ebx
.text:0040BE88                 call    near ptr loc_40AE2F+1
.text:0040BE8D                 xor     ecx, ecx
.text:0040BE8F                 test    eax, eax
.text:0040BE91                 jz      loc_40BD4A
.text:0040BE97                 mov     edx, [esp+3Ch+var_14]
.text:0040BE9B
.text:0040BE9B loc_40BE9B:                             ; CODE XREF: sub_40BC50+18B↑j
.text:0040BE9B                                         ; sub_40BC50+341↓j
.text:0040BE9B                                         ; DATA XREF: ...
.text:0040BE9B                 mov     edi, [esp+3Ch+arg_8] ; jumptable 0040BDDB case 43
.text:0040BE9F                 cmp     edi, [esp+3Ch+arg_C]
.text:0040BEA3                 ja      loc_40BF84
.text:0040BEA9                 mov     ebx, [esp+3Ch+arg_14]
.text:0040BEAD                 mov     ebp, [esp+3Ch+arg_14]
.text:0040BEB1                 and     ebx, 1
.text:0040BEB4                 and     ebp, 0FFFFFFFBh
.text:0040BEB7
.text:0040BEB7 loc_40BEB7:                             ; CODE XREF: sub_40BC50+32B↓j
.text:0040BEB7                 test    ebx, ebx
.text:0040BEB9                 mov     eax, [esp+3Ch+arg_14]
.text:0040BEBD                 jnz     short loc_40BEC1
.text:0040BEBF                 mov     eax, ebp
.text:0040BEC1
.text:0040BEC1 loc_40BEC1:                             ; CODE XREF: sub_40BC50+26D↑j
.text:0040BEC1                 movzx   ecx, [esp+3Ch+var_15]
.text:0040BEC6                 mov     [esp+3Ch+var_2C], eax
.text:0040BECA                 mov     [esp+3Ch+var_34], edi
.text:0040BECE                 mov     [esp+3Ch+var_30], ecx
.text:0040BED2                 mov     ecx, [esp+3Ch+arg_8]
.text:0040BED6                 mov     [esp+3Ch+Source], ecx
.text:0040BEDA                 lea     ecx, [edx+4]
.text:0040BEDD                 mov     [esp+3Ch+Str], ecx
.text:0040BEE0                 call    near ptr loc_40AE2F+1
.text:0040BEE5                 test    eax, eax
.text:0040BEE7                 jnz     loc_40BF70
.text:0040BEED                 test    ebx, ebx
.text:0040BEEF                 mov     eax, [esp+3Ch+arg_14]
.text:0040BEF3                 jnz     short loc_40BEF7
.text:0040BEF5                 mov     eax, ebp
.text:0040BEF7
.text:0040BEF7 loc_40BEF7:                             ; CODE XREF: sub_40BC50+2A3↑j
.text:0040BEF7                 cmp     edi, [esp+3Ch+arg_8]
.text:0040BEFB                 mov     [esp+3Ch+var_2C], eax
.text:0040BEFF                 jz      loc_40BFCE
.text:0040BF05                 xor     edx, edx
.text:0040BF07                 cmp     byte ptr [edi-1], 2Fh ; '/'
.text:0040BF0B                 jz      loc_40BFB7
.text:0040BF11
.text:0040BF11 loc_40BF11:                             ; CODE XREF: sub_40BC50+371↓j
.text:0040BF11                                         ; sub_40BC50+379↓j
.text:0040BF11                 movzx   eax, dl
.text:0040BF14
.text:0040BF14 loc_40BF14:                             ; CODE XREF: sub_40BC50+388↓j
.text:0040BF14                 mov     [esp+3Ch+var_30], eax
.text:0040BF18                 mov     edx, [esp+3Ch+arg_C]
.text:0040BF1C                 mov     [esp+3Ch+Source], edi
.text:0040BF20                 mov     [esp+3Ch+Str], esi
.text:0040BF23                 mov     [esp+3Ch+var_34], edx
.text:0040BF27                 call    near ptr loc_40AE2F+1
.text:0040BF2C                 test    eax, eax
.text:0040BF2E                 jz      short loc_40BFA0
.text:0040BF30                 cmp     edi, [esp+3Ch+arg_8]
.text:0040BF34                 jz      short loc_40BF70
.text:0040BF36                 mov     eax, [esp+3Ch+arg_14]
.text:0040BF3A                 test    al, 1
.text:0040BF3C                 jnz     short loc_40BF40
.text:0040BF3E                 mov     eax, ebp
.text:0040BF40
.text:0040BF40 loc_40BF40:                             ; CODE XREF: sub_40BC50+2EC↑j
.text:0040BF40                 mov     [esp+3Ch+var_2C], eax
.text:0040BF44                 xor     edx, edx
.text:0040BF46                 cmp     byte ptr [edi-1], 2Fh ; '/'
.text:0040BF4A                 jz      short loc_40BFA7
.text:0040BF4C
.text:0040BF4C loc_40BF4C:                             ; CODE XREF: sub_40BC50+361↓j
.text:0040BF4C                                         ; sub_40BC50+365↓j
.text:0040BF4C                 mov     [esp+3Ch+Source], edi
.text:0040BF50                 movzx   ecx, dl
.text:0040BF53                 mov     edx, [esp+3Ch+arg_4]
.text:0040BF57                 mov     [esp+3Ch+var_30], ecx
.text:0040BF5B                 mov     ecx, [esp+3Ch+arg_C]
.text:0040BF5F                 dec     edx
.text:0040BF60                 mov     [esp+3Ch+Str], edx
.text:0040BF63                 mov     [esp+3Ch+var_34], ecx
.text:0040BF67                 call    near ptr loc_40AE2F+1
.text:0040BF6C                 test    eax, eax
.text:0040BF6E                 jz      short loc_40BFA0
.text:0040BF70
.text:0040BF70 loc_40BF70:                             ; CODE XREF: sub_40BC50+297↑j
.text:0040BF70                                         ; sub_40BC50+2E4↑j
.text:0040BF70                 inc     edi
.text:0040BF71                 cmp     edi, [esp+3Ch+arg_C]
.text:0040BF75                 ja      short loc_40BF80
.text:0040BF77                 mov     edx, [esp+3Ch+var_14]
.text:0040BF7B                 jmp     loc_40BEB7
.text:0040BF80 ; ---------------------------------------------------------------------------
.text:0040BF80
.text:0040BF80 loc_40BF80:                             ; CODE XREF: sub_40BC50+325↑j
.text:0040BF80                 mov     edx, [esp+3Ch+var_14]
.text:0040BF84
.text:0040BF84 loc_40BF84:                             ; CODE XREF: sub_40BC50+253↑j
.text:0040BF84                 mov     edx, [edx]
.text:0040BF86                 mov     ecx, 1
.text:0040BF8B                 test    edx, edx
.text:0040BF8D                 mov     [esp+3Ch+var_14], edx
.text:0040BF91                 jnz     loc_40BE9B      ; jumptable 0040BDDB case 43
.text:0040BF97                 jmp     loc_40BD4A
.text:0040BF97 ; ---------------------------------------------------------------------------
.text:0040BF9C                 align 10h
.text:0040BFA0
.text:0040BFA0 loc_40BFA0:                             ; CODE XREF: sub_40BC50+2DE↑j
.text:0040BFA0                                         ; sub_40BC50+31E↑j
.text:0040BFA0                 xor     ecx, ecx
.text:0040BFA2                 jmp     loc_40BD4A
.text:0040BFA7 ; ---------------------------------------------------------------------------
.text:0040BFA7
.text:0040BFA7 loc_40BFA7:                             ; CODE XREF: sub_40BC50+2FA↑j
.text:0040BFA7                 mov     ecx, [esp+3Ch+arg_14]
.text:0040BFAB                 and     ecx, 5
.text:0040BFAE                 cmp     ecx, 5
.text:0040BFB1                 jnz     short loc_40BF4C
.text:0040BFB3                 mov     dl, 1
.text:0040BFB5                 jmp     short loc_40BF4C
.text:0040BFB7 ; ---------------------------------------------------------------------------
.text:0040BFB7
.text:0040BFB7 loc_40BFB7:                             ; CODE XREF: sub_40BC50+2BB↑j
.text:0040BFB7                 mov     ecx, [esp+3Ch+arg_14]
.text:0040BFBB                 and     ecx, 5
.text:0040BFBE                 cmp     ecx, 5
.text:0040BFC1                 jnz     loc_40BF11
.text:0040BFC7                 mov     dl, 1
.text:0040BFC9                 jmp     loc_40BF11
.text:0040BFCE ; ---------------------------------------------------------------------------
.text:0040BFCE
.text:0040BFCE loc_40BFCE:                             ; CODE XREF: sub_40BC50+2AF↑j
.text:0040BFCE                 xor     eax, eax
.text:0040BFD0                 cmp     [esp+3Ch+var_15], 0
.text:0040BFD5                 setnz   al
.text:0040BFD8                 jmp     loc_40BF14
.text:0040BFDD ; ---------------------------------------------------------------------------
.text:0040BFDD
.text:0040BFDD loc_40BFDD:                             ; CODE XREF: sub_40BC50+18B↑j
.text:0040BFDD                                         ; DATA XREF: sub_40BC50:jpt_40BDDB↑o
.text:0040BFDD                 mov     edi, [esp+3Ch+arg_8] ; jumptable 0040BDDB case 33
.text:0040BFE1                 cmp     edi, [esp+3Ch+arg_C]
.text:0040BFE5                 ja      loc_40C081
.text:0040BFEB                 mov     ebp, [esp+3Ch+arg_14]
.text:0040BFEF                 and     ebp, 0FFFFFFFBh
.text:0040BFF2
.text:0040BFF2 loc_40BFF2:                             ; CODE XREF: sub_40BC50+42C↓j
.text:0040BFF2                 test    edx, edx
.text:0040BFF4                 mov     ebx, edx
.text:0040BFF6                 jz      short loc_40C030
.text:0040BFF8
.text:0040BFF8 loc_40BFF8:                             ; CODE XREF: sub_40BC50+3DE↓j
.text:0040BFF8                 mov     eax, [esp+3Ch+arg_14]
.text:0040BFFC                 test    al, 1
.text:0040BFFE                 jnz     short loc_40C002
.text:0040C000                 mov     eax, ebp
.text:0040C002
.text:0040C002 loc_40C002:                             ; CODE XREF: sub_40BC50+3AE↑j
.text:0040C002                 movzx   edx, [esp+3Ch+var_15]
.text:0040C007                 mov     [esp+3Ch+var_2C], eax
.text:0040C00B                 mov     ecx, [esp+3Ch+arg_8]
.text:0040C00F                 mov     [esp+3Ch+var_34], edi
.text:0040C013                 mov     [esp+3Ch+var_30], edx
.text:0040C017                 lea     edx, [ebx+4]
.text:0040C01A                 mov     [esp+3Ch+Source], ecx
.text:0040C01E                 mov     [esp+3Ch+Str], edx
.text:0040C021                 call    near ptr loc_40AE2F+1
.text:0040C026                 test    eax, eax
.text:0040C028                 jz      short loc_40C0A7
.text:0040C02A                 mov     ebx, [ebx]
.text:0040C02C                 test    ebx, ebx
.text:0040C02E                 jnz     short loc_40BFF8
.text:0040C030
.text:0040C030 loc_40C030:                             ; CODE XREF: sub_40BC50+3A6↑j
.text:0040C030                                         ; sub_40BC50+45B↓j
.text:0040C030                 mov     eax, [esp+3Ch+arg_14]
.text:0040C034                 test    al, 1
.text:0040C036                 jnz     short loc_40C03A
.text:0040C038                 mov     eax, ebp
.text:0040C03A
.text:0040C03A loc_40C03A:                             ; CODE XREF: sub_40BC50+3E6↑j
.text:0040C03A                 cmp     edi, [esp+3Ch+arg_8]
.text:0040C03E                 mov     [esp+3Ch+var_2C], eax
.text:0040C042                 jz      short loc_40C09B
.text:0040C044                 xor     edx, edx
.text:0040C046                 cmp     byte ptr [edi-1], 2Fh ; '/'
.text:0040C04A                 jz      short loc_40C08B
.text:0040C04C
.text:0040C04C loc_40C04C:                             ; CODE XREF: sub_40BC50+445↓j
.text:0040C04C                                         ; sub_40BC50+449↓j
.text:0040C04C                 movzx   eax, dl
.text:0040C04F
.text:0040C04F loc_40C04F:                             ; CODE XREF: sub_40BC50+455↓j
.text:0040C04F                 mov     [esp+3Ch+var_30], eax
.text:0040C053                 mov     ecx, [esp+3Ch+arg_C]
.text:0040C057                 mov     [esp+3Ch+Source], edi
.text:0040C05B                 mov     [esp+3Ch+Str], esi
.text:0040C05E                 mov     [esp+3Ch+var_34], ecx
.text:0040C062                 call    near ptr loc_40AE2F+1
.text:0040C067                 xor     ecx, ecx
.text:0040C069                 test    eax, eax
.text:0040C06B                 jz      loc_40BD4A
.text:0040C071
.text:0040C071 loc_40C071:                             ; CODE XREF: sub_40BC50+459↓j
.text:0040C071                 inc     edi
.text:0040C072                 cmp     edi, [esp+3Ch+arg_C]
.text:0040C076                 ja      short loc_40C081
.text:0040C078                 mov     edx, [esp+3Ch+var_14]
.text:0040C07C                 jmp     loc_40BFF2
.text:0040C081 ; ---------------------------------------------------------------------------
.text:0040C081
.text:0040C081 loc_40C081:                             ; CODE XREF: sub_40BC50+395↑j
.text:0040C081                                         ; sub_40BC50+426↑j
.text:0040C081                 mov     ecx, 1
.text:0040C086                 jmp     loc_40BD4A
.text:0040C08B ; ---------------------------------------------------------------------------
.text:0040C08B
.text:0040C08B loc_40C08B:                             ; CODE XREF: sub_40BC50+3FA↑j
.text:0040C08B                 mov     ebx, [esp+3Ch+arg_14]
.text:0040C08F                 and     ebx, 5
.text:0040C092                 cmp     ebx, 5
.text:0040C095                 jnz     short loc_40C04C
.text:0040C097                 mov     dl, 1
.text:0040C099                 jmp     short loc_40C04C
.text:0040C09B ; ---------------------------------------------------------------------------
.text:0040C09B
.text:0040C09B loc_40C09B:                             ; CODE XREF: sub_40BC50+3F2↑j
.text:0040C09B                 xor     eax, eax
.text:0040C09D                 cmp     [esp+3Ch+var_15], 0
.text:0040C0A2                 setnz   al
.text:0040C0A5                 jmp     short loc_40C04F
.text:0040C0A7 ; ---------------------------------------------------------------------------
.text:0040C0A7
.text:0040C0A7 loc_40C0A7:                             ; CODE XREF: sub_40BC50+3D8↑j
.text:0040C0A7                 test    ebx, ebx
.text:0040C0A9                 jnz     short loc_40C071
.text:0040C0AB                 jmp     short loc_40C030
.text:0040C0AB ; ---------------------------------------------------------------------------
.text:0040C0AD                 align 10h
.text:0040C0B0
.text:0040C0B0 def_40BDDB:                             ; CODE XREF: sub_40BC50+185↑j
.text:0040C0B0                                         ; sub_40BC50+18B↑j
.text:0040C0B0                                         ; DATA XREF: ...
.text:0040C0B0                 mov     esi, offset aInvalidExtende ; jumptable 0040BDDB default case, cases 34-41,44-62
.text:0040C0B5                 mov     ecx, 0FFFFFFFFh
.text:0040C0BA                 test    esi, esi
.text:0040C0BC                 jz      loc_40BD4A
.text:0040C0C2                 mov     [esp+3Ch+var_34], 493h
.text:0040C0CA                 mov     [esp+3Ch+Source], offset aCoreutils530Sr_2 ; "../../coreutils-5.3.0-src/lib/fnmatch_l"...
.text:0040C0D2                 mov     [esp+3Ch+Str], offset aInvalidExtende_0 ; "! \"Invalid extended matching operator"...
.text:0040C0D9
.text:0040C0D9 loc_40C0D9:                             ; CODE XREF: sub_40BC50+541↓j
.text:0040C0D9                                         ; sub_40BC50+55D↓j
.text:0040C0D9                 call    _assert
.text:0040C0D9 ; ---------------------------------------------------------------------------
.text:0040C0DE                 align 10h
.text:0040C0E0
.text:0040C0E0 loc_40C0E0:                             ; CODE XREF: sub_40BC50+18B↑j
.text:0040C0E0                                         ; DATA XREF: sub_40BC50:jpt_40BDDB↑o
.text:0040C0E0                 movzx   edi, [esp+3Ch+var_15] ; jumptable 0040BDDB case 63
.text:0040C0E5                 mov     [esp+3Ch+Str], esi
.text:0040C0E8                 mov     edx, [esp+3Ch+arg_14]
.text:0040C0EC                 mov     ebp, [esp+3Ch+arg_C]
.text:0040C0F0                 mov     ebx, [esp+3Ch+arg_8]
.text:0040C0F4                 mov     [esp+3Ch+var_2C], edx
.text:0040C0F8                 mov     [esp+3Ch+var_30], edi
.text:0040C0FC                 mov     [esp+3Ch+var_34], ebp
.text:0040C100                 mov     [esp+3Ch+Source], ebx
.text:0040C104                 call    near ptr loc_40AE2F+1
.text:0040C109                 xor     ecx, ecx
.text:0040C10B                 test    eax, eax
.text:0040C10D                 jz      loc_40BD4A
.text:0040C113                 mov     edx, [esp+3Ch+var_14]
.text:0040C117
.text:0040C117 loc_40C117:                             ; CODE XREF: sub_40BC50+18B↑j
.text:0040C117                                         ; sub_40BC50+523↓j
.text:0040C117                                         ; DATA XREF: ...
.text:0040C117                 mov     [esp+3Ch+Source], esi ; jumptable 0040BDDB case 64
.text:0040C11B                 lea     ecx, [edx+4]
.text:0040C11E                 mov     [esp+3Ch+Str], ecx ; Destination
.text:0040C121                 call    strcat
.text:0040C126                 mov     edx, eax
.text:0040C128                 mov     eax, [esp+3Ch+arg_14]
.text:0040C12C                 test    al, 1
.text:0040C12E                 jnz     short loc_40C133
.text:0040C130                 and     eax, 0FFFFFFFBh
.text:0040C133
.text:0040C133 loc_40C133:                             ; CODE XREF: sub_40BC50+4DE↑j
.text:0040C133                 movzx   edi, [esp+3Ch+var_15]
.text:0040C138                 mov     [esp+3Ch+var_2C], eax
.text:0040C13C                 mov     ebp, [esp+3Ch+arg_C]
.text:0040C140                 mov     [esp+3Ch+Str], edx
.text:0040C143                 mov     ebx, [esp+3Ch+arg_8]
.text:0040C147                 mov     [esp+3Ch+var_30], edi
.text:0040C14B                 mov     [esp+3Ch+var_34], ebp
.text:0040C14F                 mov     [esp+3Ch+Source], ebx
.text:0040C153                 call    near ptr loc_40AE2F+1
.text:0040C158                 xor     ecx, ecx
.text:0040C15A                 test    eax, eax
.text:0040C15C                 jz      loc_40BD4A
.text:0040C162                 mov     ecx, [esp+3Ch+var_14]
.text:0040C166                 mov     edx, [ecx]
.text:0040C168                 mov     ecx, 1
.text:0040C16D                 mov     [esp+3Ch+var_14], edx
.text:0040C171                 test    edx, edx
.text:0040C173                 jnz     short loc_40C117 ; jumptable 0040BDDB case 64
.text:0040C175                 jmp     loc_40BD4A
.text:0040C17A ; ---------------------------------------------------------------------------
.text:0040C17A
.text:0040C17A loc_40C17A:                             ; CODE XREF: sub_40BC50+175↑j
.text:0040C17A                 mov     [esp+3Ch+var_34], 439h
.text:0040C182                 mov     [esp+3Ch+Source], offset aCoreutils530Sr_2 ; "../../coreutils-5.3.0-src/lib/fnmatch_l"...
.text:0040C18A                 mov     [esp+3Ch+Str], offset aP1L ; "p[-1] == L(')')"
.text:0040C191                 jmp     loc_40C0D9
.text:0040C196 ; ---------------------------------------------------------------------------
.text:0040C196
.text:0040C196 loc_40C196:                             ; CODE XREF: sub_40BC50+16B↑j
.text:0040C196                 mov     [esp+3Ch+var_34], 438h
.text:0040C19E                 mov     [esp+3Ch+Source], offset aCoreutils530Sr_2 ; "../../coreutils-5.3.0-src/lib/fnmatch_l"...
.text:0040C1A6                 mov     [esp+3Ch+Str], offset aListNull ; "list != NULL"
.text:0040C1AD                 jmp     loc_40C0D9
.text:0040C1B2 ; ---------------------------------------------------------------------------
.text:0040C1B2
.text:0040C1B2 loc_40C1B2:                             ; CODE XREF: sub_40BC50+5A↑j
.text:0040C1B2                                         ; sub_40BC50+62↑j ...
.text:0040C1B2                 cmp     byte ptr [esi+1], 28h ; '('
.text:0040C1B6                 jnz     loc_40BCD0
.text:0040C1BC                 inc     ebp
.text:0040C1BD
.text:0040C1BD loc_40C1BD:                             ; CODE XREF: sub_40BC50+5B5↓j
.text:0040C1BD                                         ; sub_40BC50+5BF↓j
.text:0040C1BD                 lea     edx, [esi+1]
.text:0040C1C0                 jmp     loc_40BCE0
.text:0040C1C5 ; ---------------------------------------------------------------------------
.text:0040C1C5
.text:0040C1C5 loc_40C1C5:                             ; CODE XREF: sub_40BC50+52↑j
.text:0040C1C5                 mov     ebx, ds:dword_41B260
.text:0040C1CB                 test    ebx, ebx
.text:0040C1CD                 jz      short loc_40C21B
.text:0040C1CF
.text:0040C1CF loc_40C1CF:                             ; CODE XREF: sub_40BC50+5E9↓j
.text:0040C1CF                 inc     esi
.text:0040C1D0                 movzx   eax, byte ptr [esi]
.text:0040C1D3                 cmp     al, 21h ; '!'
.text:0040C1D5                 jz      short loc_40C215
.text:0040C1D7                 mov     edx, ds:dword_41B260
.text:0040C1DD                 test    edx, edx
.text:0040C1DF                 js      short loc_40C211
.text:0040C1E1
.text:0040C1E1 loc_40C1E1:                             ; CODE XREF: sub_40BC50+5C3↓j
.text:0040C1E1                                         ; sub_40BC50+5C9↓j
.text:0040C1E1                 cmp     al, 5Dh ; ']'
.text:0040C1E3                 jz      short loc_40C207
.text:0040C1E5                 lea     esi, [esi+0]
.text:0040C1E9                 lea     edi, [edi+0]
.text:0040C1F0
.text:0040C1F0 loc_40C1F0:                             ; CODE XREF: sub_40BC50+5B3↓j
.text:0040C1F0                                         ; sub_40BC50+5BD↓j
.text:0040C1F0                 inc     esi
.text:0040C1F1                 mov     ecx, 0FFFFFFFFh
.text:0040C1F6                 test    al, al
.text:0040C1F8                 jz      loc_40BD4A
.text:0040C1FE                 movzx   eax, byte ptr [esi]
.text:0040C201                 cmp     al, 5Dh ; ']'
.text:0040C203                 jnz     short loc_40C1F0
.text:0040C205                 jmp     short loc_40C1BD
.text:0040C207 ; ---------------------------------------------------------------------------
.text:0040C207
.text:0040C207 loc_40C207:                             ; CODE XREF: sub_40BC50+593↑j
.text:0040C207                 inc     esi
.text:0040C208                 movzx   eax, byte ptr [esi]
.text:0040C20B                 cmp     al, 5Dh ; ']'
.text:0040C20D                 jnz     short loc_40C1F0
.text:0040C20F                 jmp     short loc_40C1BD
.text:0040C211 ; ---------------------------------------------------------------------------
.text:0040C211
.text:0040C211 loc_40C211:                             ; CODE XREF: sub_40BC50+58F↑j
.text:0040C211                 cmp     al, 5Eh ; '^'
.text:0040C213                 jnz     short loc_40C1E1
.text:0040C215
.text:0040C215 loc_40C215:                             ; CODE XREF: sub_40BC50+585↑j
.text:0040C215                 inc     esi
.text:0040C216                 movzx   eax, byte ptr [esi]
.text:0040C219                 jmp     short loc_40C1E1
.text:0040C21B ; ---------------------------------------------------------------------------
.text:0040C21B
.text:0040C21B loc_40C21B:                             ; CODE XREF: sub_40BC50+57D↑j
.text:0040C21B                 mov     [esp+3Ch+Str], offset sub_40AE20 ; VarName
.text:0040C222                 call    getenv
.text:0040C227                 test    eax, eax
.text:0040C229                 setnz   bl
.text:0040C22C                 movzx   ecx, bl
.text:0040C22F                 lea     edx, [ecx+ecx-1]
.text:0040C233                 mov     ds:dword_41B260, edx
.text:0040C239                 jmp     short loc_40C1CF
.text:0040C239 sub_40BC50      endp
.text:0040C239
.text:0040C239 ; ---------------------------------------------------------------------------
.text:0040C23B                 align 10h
.text:0040C240
.text:0040C240 ; =============== S U B R O U T I N E =======================================
.text:0040C240
.text:0040C240
.text:0040C240 sub_40C240      proc near               ; CODE XREF: sub_40C240+39D↓p
.text:0040C240                                         ; sub_40C240+453↓p ...
.text:0040C240
.text:0040C240 C               = word ptr -107Ch
.text:0040C240 Type            = word ptr -1078h
.text:0040C240 var_1074        = dword ptr -1074h
.text:0040C240 var_1070        = dword ptr -1070h
.text:0040C240 var_106C        = byte ptr -106Ch
.text:0040C240 var_1068        = dword ptr -1068h
.text:0040C240 var_1050        = dword ptr -1050h
.text:0040C240 var_1049        = byte ptr -1049h
.text:0040C240 var_1048        = dword ptr -1048h
.text:0040C240 var_1041        = byte ptr -1041h
.text:0040C240 var_1040        = dword ptr -1040h
.text:0040C240 var_103C        = dword ptr -103Ch
.text:0040C240 var_1038        = dword ptr -1038h
.text:0040C240 var_1034        = dword ptr -1034h
.text:0040C240 var_102E        = byte ptr -102Eh
.text:0040C240 var_102D        = byte ptr -102Dh
.text:0040C240 var_102C        = word ptr -102Ch
.text:0040C240 arg_0           = dword ptr  4
.text:0040C240 arg_4           = dword ptr  8
.text:0040C240 arg_8           = dword ptr  0Ch
.text:0040C240 arg_C           = byte ptr  10h
.text:0040C240 arg_10          = dword ptr  14h
.text:0040C240
.text:0040C240                 push    ebp
.text:0040C241                 mov     eax, 106Ch
.text:0040C246                 push    edi
.text:0040C247                 push    esi
.text:0040C248                 push    ebx             ; Size
.text:0040C249                 call    __alloca
.text:0040C24E                 movzx   edx, [esp+107Ch+arg_C]
.text:0040C256                 mov     esi, [esp+107Ch+arg_0]
.text:0040C25D                 mov     ebp, [esp+107Ch+arg_10]
.text:0040C264                 mov     edi, [esp+107Ch+arg_4]
.text:0040C26B                 mov     [esp+107Ch+var_102D], dl
.text:0040C26F                 movzx   edx, word ptr [esi]
.text:0040C272                 add     esi, 2
.text:0040C275                 test    dx, dx
.text:0040C278                 movzx   ebx, dx
.text:0040C27B                 jz      loc_40C3EE
.text:0040C281                 jmp     short loc_40C290
.text:0040C281 ; ---------------------------------------------------------------------------
.text:0040C283                 align 10h
.text:0040C290
.text:0040C290 loc_40C290:                             ; CODE XREF: sub_40C240+41↑j
.text:0040C290                                         ; sub_40C240+1A8↓j
.text:0040C290                 mov     [esp+107Ch+var_102E], 0
.text:0040C295                 test    ebp, 10h
.text:0040C29B                 jnz     loc_40CCE3
.text:0040C2A1
.text:0040C2A1 loc_40C2A1:                             ; CODE XREF: sub_40C240+AAE↓j
.text:0040C2A1                 lea     eax, [ebx-21h]  ; switch 60 cases
.text:0040C2A4                 cmp     eax, 3Bh
.text:0040C2A7                 ja      def_40C2AD      ; jumptable 0040C2AD default case, cases 34-41,44-46,48-62,65-90
.text:0040C2AD                 jmp     ds:jpt_40C2AD[eax*4] ; switch jump
.text:0040C2AD ; ---------------------------------------------------------------------------
.text:0040C2B4 jpt_40C2AD      dd offset loc_40C855, offset def_40C2AD, offset def_40C2AD
.text:0040C2B4                                         ; DATA XREF: sub_40C240+6D↑r
.text:0040C2B4                 dd offset def_40C2AD, offset def_40C2AD, offset def_40C2AD ; jump table for switch statement
.text:0040C2B4                 dd offset def_40C2AD, offset def_40C2AD, offset def_40C2AD
.text:0040C2B4                 dd offset loc_40C470, offset loc_40C855, offset def_40C2AD
.text:0040C2B4                 dd offset def_40C2AD, offset def_40C2AD, offset loc_40C7F0
.text:0040C2B4                 dd offset def_40C2AD, offset def_40C2AD, offset def_40C2AD
.text:0040C2B4                 dd offset def_40C2AD, offset def_40C2AD, offset def_40C2AD
.text:0040C2B4                 dd offset def_40C2AD, offset def_40C2AD, offset def_40C2AD
.text:0040C2B4                 dd offset def_40C2AD, offset def_40C2AD, offset def_40C2AD
.text:0040C2B4                 dd offset def_40C2AD, offset def_40C2AD, offset def_40C2AD
.text:0040C2B4                 dd offset loc_40C3A4, offset loc_40C855, offset def_40C2AD
.text:0040C2B4                 dd offset def_40C2AD, offset def_40C2AD, offset def_40C2AD
.text:0040C2B4                 dd offset def_40C2AD, offset def_40C2AD, offset def_40C2AD
.text:0040C2B4                 dd offset def_40C2AD, offset def_40C2AD, offset def_40C2AD
.text:0040C2B4                 dd offset def_40C2AD, offset def_40C2AD, offset def_40C2AD
.text:0040C2B4                 dd offset def_40C2AD, offset def_40C2AD, offset def_40C2AD
.text:0040C2B4                 dd offset def_40C2AD, offset def_40C2AD, offset def_40C2AD
.text:0040C2B4                 dd offset def_40C2AD, offset def_40C2AD, offset def_40C2AD
.text:0040C2B4                 dd offset def_40C2AD, offset def_40C2AD, offset def_40C2AD
.text:0040C2B4                 dd offset def_40C2AD, offset loc_40C8A0, offset loc_40CC83
.text:0040C3A4 ; ---------------------------------------------------------------------------
.text:0040C3A4
.text:0040C3A4 loc_40C3A4:                             ; CODE XREF: sub_40C240+6D↑j
.text:0040C3A4                                         ; DATA XREF: sub_40C240:jpt_40C2AD↑o
.text:0040C3A4                 test    ebp, 20h        ; jumptable 0040C2AD case 63
.text:0040C3AA                 jnz     loc_40C430
.text:0040C3B0
.text:0040C3B0 loc_40C3B0:                             ; CODE XREF: sub_40C240+1F4↓j
.text:0040C3B0                                         ; sub_40C240+227↓j
.text:0040C3B0                 cmp     edi, [esp+107Ch+arg_8]
.text:0040C3B7                 mov     ecx, 1
.text:0040C3BC                 jz      short loc_40C409
.text:0040C3BE                 movzx   eax, word ptr [edi]
.text:0040C3C1                 cmp     ax, 2Fh ; '/'
.text:0040C3C5                 jz      short loc_40C424
.text:0040C3C7
.text:0040C3C7 loc_40C3C7:                             ; CODE XREF: sub_40C240+1EA↓j
.text:0040C3C7                 cmp     ax, 2Eh ; '.'
.text:0040C3CB                 jz      short loc_40C416
.text:0040C3CD                 lea     esi, [esi+0]
.text:0040C3D0
.text:0040C3D0 loc_40C3D0:                             ; CODE XREF: sub_40C240+1E0↓j
.text:0040C3D0                                         ; sub_40C240:loc_40C81A↓j ...
.text:0040C3D0                 movzx   ecx, word ptr [esi]
.text:0040C3D3                 add     edi, 2
.text:0040C3D6                 add     esi, 2
.text:0040C3D9                 movzx   ebx, [esp+107Ch+var_102E]
.text:0040C3DE                 test    cx, cx
.text:0040C3E1                 mov     [esp+107Ch+var_102D], bl
.text:0040C3E5                 movzx   ebx, cx
.text:0040C3E8                 jnz     loc_40C290
.text:0040C3EE
.text:0040C3EE loc_40C3EE:                             ; CODE XREF: sub_40C240+3B↑j
.text:0040C3EE                 xor     ecx, ecx
.text:0040C3F0                 cmp     edi, [esp+107Ch+arg_8]
.text:0040C3F7                 jz      short loc_40C409
.text:0040C3F9                 and     ebp, 8
.text:0040C3FC                 jz      short loc_40C404
.text:0040C3FE                 cmp     word ptr [edi], 2Fh ; '/'
.text:0040C402
.text:0040C402 loc_40C402:                             ; CODE XREF: sub_40C240+45C↓j
.text:0040C402                 jz      short loc_40C409
.text:0040C404
.text:0040C404 loc_40C404:                             ; CODE XREF: sub_40C240+1BC↑j
.text:0040C404                                         ; sub_40C240+34A↓j ...
.text:0040C404                 mov     ecx, 1
.text:0040C409
.text:0040C409 loc_40C409:                             ; CODE XREF: sub_40C240+17C↑j
.text:0040C409                                         ; sub_40C240+1B7↑j ...
.text:0040C409                 add     esp, 106Ch
.text:0040C40F                 mov     eax, ecx
.text:0040C411                 pop     ebx
.text:0040C412                 pop     esi
.text:0040C413                 pop     edi
.text:0040C414                 pop     ebp
.text:0040C415                 retn
.text:0040C416 ; ---------------------------------------------------------------------------
.text:0040C416
.text:0040C416 loc_40C416:                             ; CODE XREF: sub_40C240+18B↑j
.text:0040C416                 cmp     [esp+107Ch+var_102D], 0
.text:0040C41B
.text:0040C41B loc_40C41B:                             ; CODE XREF: sub_40C240+7E0↓j
.text:0040C41B                 mov     ecx, 1
.text:0040C420                 jz      short loc_40C3D0
.text:0040C422                 jmp     short loc_40C409
.text:0040C424 ; ---------------------------------------------------------------------------
.text:0040C424
.text:0040C424 loc_40C424:                             ; CODE XREF: sub_40C240+185↑j
.text:0040C424                 test    ebp, 1
.text:0040C42A                 jz      short loc_40C3C7
.text:0040C42C                 jmp     short loc_40C409
.text:0040C42C ; ---------------------------------------------------------------------------
.text:0040C42E                 align 10h
.text:0040C430
.text:0040C430 loc_40C430:                             ; CODE XREF: sub_40C240+16A↑j
.text:0040C430                 cmp     word ptr [esi], 28h ; '('
.text:0040C434                 jnz     loc_40C3B0
.text:0040C43A                 movzx   ecx, [esp+107Ch+var_102D]
.text:0040C43F                 mov     [esp+107Ch+var_1068], ebp ; int
.text:0040C443                 mov     eax, [esp+107Ch+arg_8]
.text:0040C44A                 mov     [esp+107Ch+var_1074], edi ; int
.text:0040C44E                 mov     dword ptr [esp+107Ch+Type], esi ; wchar_t *
.text:0040C452                 mov     dword ptr [esp+107Ch+var_106C], ecx ; char
.text:0040C456                 mov     [esp+107Ch+var_1070], eax ; int
.text:0040C45A                 mov     dword ptr [esp+107Ch+C], ebx ; __int16
.text:0040C45D                 call    sub_40CE00
.text:0040C462                 cmp     eax, 0FFFFFFFFh
.text:0040C465                 mov     ecx, eax
.text:0040C467                 jz      loc_40C3B0
.text:0040C46D                 jmp     short loc_40C409
.text:0040C46D ; ---------------------------------------------------------------------------
.text:0040C46F                 align 10h
.text:0040C470
.text:0040C470 loc_40C470:                             ; CODE XREF: sub_40C240+6D↑j
.text:0040C470                                         ; DATA XREF: sub_40C240:jpt_40C2AD↑o
.text:0040C470                 test    ebp, 20h        ; jumptable 0040C2AD case 42
.text:0040C476                 jnz     loc_40C7AD
.text:0040C47C
.text:0040C47C loc_40C47C:                             ; CODE XREF: sub_40C240+571↓j
.text:0040C47C                                         ; sub_40C240+5AA↓j
.text:0040C47C                 cmp     edi, [esp+107Ch+arg_8]
.text:0040C483                 jz      short loc_40C48F
.text:0040C485                 cmp     word ptr [edi], 2Eh ; '.'
.text:0040C489                 jz      loc_40C798
.text:0040C48F
.text:0040C48F loc_40C48F:                             ; CODE XREF: sub_40C240+243↑j
.text:0040C48F                                         ; sub_40C240+568↓j
.text:0040C48F                 movzx   ebx, word ptr [esi]
.text:0040C492                 add     esi, 2
.text:0040C495                 cmp     bx, 3Fh ; '?'
.text:0040C499                 jz      loc_40C730
.text:0040C49F                 cmp     bx, 2Ah ; '*'
.text:0040C4A3                 jz      loc_40C730
.text:0040C4A9
.text:0040C4A9 loc_40C4A9:                             ; CODE XREF: sub_40C240+50E↓j
.text:0040C4A9                 test    bx, bx
.text:0040C4AC                 jnz     short loc_40C4F9
.text:0040C4AE                 mov     ebx, ebp
.text:0040C4B0                 and     ebx, 1
.text:0040C4B3                 jz      short loc_40C4BC
.text:0040C4B5                 and     ebp, 8
.text:0040C4B8                 jz      short loc_40C4C3
.text:0040C4BA                 xor     ebx, ebx
.text:0040C4BC
.text:0040C4BC loc_40C4BC:                             ; CODE XREF: sub_40C240+273↑j
.text:0040C4BC                                         ; sub_40C240+2B7↓j
.text:0040C4BC                 mov     ecx, ebx
.text:0040C4BE                 jmp     loc_40C409
.text:0040C4C3 ; ---------------------------------------------------------------------------
.text:0040C4C3
.text:0040C4C3 loc_40C4C3:                             ; CODE XREF: sub_40C240+278↑j
.text:0040C4C3                 sub     [esp+107Ch+arg_8], edi
.text:0040C4CA                 mov     dword ptr [esp+107Ch+Type], 2Fh ; '/'
.text:0040C4D2                 mov     dword ptr [esp+107Ch+C], edi
.text:0040C4D5                 sar     [esp+107Ch+arg_8], 1
.text:0040C4DC                 mov     ebp, [esp+107Ch+arg_8]
.text:0040C4E3                 mov     [esp+107Ch+var_1074], ebp
.text:0040C4E7                 call    sub_418110
.text:0040C4EC                 test    eax, eax
.text:0040C4EE                 setz    cl
.text:0040C4F1                 movzx   esi, cl
.text:0040C4F4                 dec     esi
.text:0040C4F5                 and     ebx, esi
.text:0040C4F7                 jmp     short loc_40C4BC
.text:0040C4F9 ; ---------------------------------------------------------------------------
.text:0040C4F9
.text:0040C4F9 loc_40C4F9:                             ; CODE XREF: sub_40C240+26C↑j
.text:0040C4F9                 mov     dword ptr [esp+107Ch+C], edi
.text:0040C4FC                 mov     ecx, [esp+107Ch+arg_8]
.text:0040C503                 xor     edx, edx
.text:0040C505                 sub     ecx, edi
.text:0040C507                 sar     ecx, 1
.text:0040C509                 test    ebp, 1
.text:0040C50F                 setz    dl
.text:0040C512                 mov     [esp+107Ch+var_1074], ecx
.text:0040C516                 dec     edx
.text:0040C517                 and     edx, 2Fh
.text:0040C51A                 mov     dword ptr [esp+107Ch+Type], edx
.text:0040C51E                 call    sub_418110
.text:0040C523                 mov     [esp+107Ch+var_1034], eax
.text:0040C527                 test    eax, eax
.text:0040C529                 jz      loc_40C719
.text:0040C52F
.text:0040C52F loc_40C52F:                             ; CODE XREF: sub_40C240+4E4↓j
.text:0040C52F                 cmp     bx, 5Bh ; '['
.text:0040C533                 jz      loc_40C6C1
.text:0040C539                 test    ebp, 20h
.text:0040C53F                 jnz     loc_40C6A1
.text:0040C545
.text:0040C545 loc_40C545:                             ; CODE XREF: sub_40C240+471↓j
.text:0040C545                                         ; sub_40C240+47B↓j
.text:0040C545                 cmp     bx, 2Fh ; '/'
.text:0040C549                 jz      loc_40C624
.text:0040C54F
.text:0040C54F loc_40C54F:                             ; CODE XREF: sub_40C240+3EA↓j
.text:0040C54F                 mov     [esp+107Ch+var_1038], ebp
.text:0040C553                 test    ebp, 1
.text:0040C559                 jnz     short loc_40C564
.text:0040C55B                 mov     eax, ebp
.text:0040C55D                 and     eax, 0FFFFFFFBh
.text:0040C560                 mov     [esp+107Ch+var_1038], eax
.text:0040C564
.text:0040C564 loc_40C564:                             ; CODE XREF: sub_40C240+319↑j
.text:0040C564                 movzx   edx, [esp+107Ch+var_102D]
.text:0040C569                 cmp     bx, 5Ch ; '\'
.text:0040C56D                 mov     [esp+107Ch+var_103C], edx
.text:0040C571                 jz      loc_40C610
.text:0040C577
.text:0040C577 loc_40C577:                             ; CODE XREF: sub_40C240+3D6↓j
.text:0040C577                                         ; sub_40C240+3DF↓j
.text:0040C577                 test    ebp, 10h
.text:0040C57D                 jnz     loc_40C600
.text:0040C583
.text:0040C583 loc_40C583:                             ; CODE XREF: sub_40C240+3CB↓j
.text:0040C583                 sub     esi, 2
.text:0040C586                 cmp     edi, [esp+107Ch+var_1034]
.text:0040C58A                 jnb     loc_40C404
.text:0040C590
.text:0040C590 loc_40C590:                             ; CODE XREF: sub_40C240+36E↓j
.text:0040C590                 test    ebp, 10h
.text:0040C596                 jnz     short loc_40C5F0
.text:0040C598                 movzx   eax, word ptr [edi]
.text:0040C59B
.text:0040C59B loc_40C59B:                             ; CODE XREF: sub_40C240+3BE↓j
.text:0040C59B                 cmp     eax, ebx
.text:0040C59D                 jz      short loc_40C5B5
.text:0040C59F
.text:0040C59F loc_40C59F:                             ; CODE XREF: sub_40C240+3A6↓j
.text:0040C59F                 mov     [esp+107Ch+var_103C], 0
.text:0040C5A7                 add     edi, 2
.text:0040C5AA                 cmp     edi, [esp+107Ch+var_1034]
.text:0040C5AE                 jb      short loc_40C590
.text:0040C5B0                 jmp     loc_40C404
.text:0040C5B5 ; ---------------------------------------------------------------------------
.text:0040C5B5
.text:0040C5B5 loc_40C5B5:                             ; CODE XREF: sub_40C240+35D↑j
.text:0040C5B5                 mov     dword ptr [esp+107Ch+Type], edi
.text:0040C5B9                 xor     ecx, ecx
.text:0040C5BB                 mov     eax, [esp+107Ch+var_1038]
.text:0040C5BF                 cmp     [esp+107Ch+var_103C], 0
.text:0040C5C4                 mov     dword ptr [esp+107Ch+C], esi
.text:0040C5C7                 mov     edx, [esp+107Ch+arg_8]
.text:0040C5CE                 mov     dword ptr [esp+107Ch+var_106C], eax
.text:0040C5D2                 setnz   cl
.text:0040C5D5                 mov     [esp+107Ch+var_1074], edx
.text:0040C5D9                 mov     [esp+107Ch+var_1070], ecx
.text:0040C5DD                 call    sub_40C240
.text:0040C5E2                 xor     ecx, ecx
.text:0040C5E4                 test    eax, eax
.text:0040C5E6                 jnz     short loc_40C59F
.text:0040C5E8                 jmp     loc_40C409
.text:0040C5E8 ; ---------------------------------------------------------------------------
.text:0040C5ED                 align 10h
.text:0040C5F0
.text:0040C5F0 loc_40C5F0:                             ; CODE XREF: sub_40C240+356↑j
.text:0040C5F0                 movzx   ecx, word ptr [edi]
.text:0040C5F3                 mov     dword ptr [esp+107Ch+C], ecx ; C
.text:0040C5F6                 call    towlower
.text:0040C5FB                 movzx   eax, ax
.text:0040C5FE                 jmp     short loc_40C59B
.text:0040C600 ; ---------------------------------------------------------------------------
.text:0040C600
.text:0040C600 loc_40C600:                             ; CODE XREF: sub_40C240+33D↑j
.text:0040C600                 mov     dword ptr [esp+107Ch+C], ebx ; C
.text:0040C603                 call    towlower
.text:0040C608                 movzx   ebx, ax
.text:0040C60B                 jmp     loc_40C583
.text:0040C610 ; ---------------------------------------------------------------------------
.text:0040C610
.text:0040C610 loc_40C610:                             ; CODE XREF: sub_40C240+331↑j
.text:0040C610                 test    ebp, 2
.text:0040C616                 jnz     loc_40C577
.text:0040C61C                 movzx   ebx, word ptr [esi]
.text:0040C61F                 jmp     loc_40C577
.text:0040C624 ; ---------------------------------------------------------------------------
.text:0040C624
.text:0040C624 loc_40C624:                             ; CODE XREF: sub_40C240+309↑j
.text:0040C624                 test    ebp, 1
.text:0040C62A                 jz      loc_40C54F
.text:0040C630                 cmp     edi, [esp+107Ch+arg_8]
.text:0040C637                 jnb     loc_40C404
.text:0040C63D                 cmp     word ptr [edi], 2Fh ; '/'
.text:0040C641                 jz      short loc_40C659
.text:0040C643
.text:0040C643 loc_40C643:                             ; CODE XREF: sub_40C240+417↓j
.text:0040C643                 add     edi, 2
.text:0040C646                 cmp     edi, [esp+107Ch+arg_8]
.text:0040C64D                 jnb     loc_40C404
.text:0040C653                 cmp     word ptr [edi], 2Fh ; '/'
.text:0040C657                 jnz     short loc_40C643
.text:0040C659
.text:0040C659 loc_40C659:                             ; CODE XREF: sub_40C240+401↑j
.text:0040C659                 cmp     edi, [esp+107Ch+arg_8]
.text:0040C660                 jnb     loc_40C404
.text:0040C666                 cmp     word ptr [edi], 2Fh ; '/'
.text:0040C66A                 jnz     loc_40C404
.text:0040C670                 mov     dword ptr [esp+107Ch+var_106C], ebp
.text:0040C674                 mov     ecx, [esp+107Ch+arg_8]
.text:0040C67B                 lea     ebx, [edi+2]
.text:0040C67E                 mov     dword ptr [esp+107Ch+Type], ebx
.text:0040C682                 shr     ebp, 2
.text:0040C685                 and     ebp, 1
.text:0040C688                 mov     [esp+107Ch+var_1074], ecx
.text:0040C68C                 mov     [esp+107Ch+var_1070], ebp
.text:0040C690                 mov     dword ptr [esp+107Ch+C], esi
.text:0040C693                 call    sub_40C240
.text:0040C698                 xor     ecx, ecx
.text:0040C69A                 test    eax, eax
.text:0040C69C                 jmp     loc_40C402
.text:0040C6A1 ; ---------------------------------------------------------------------------
.text:0040C6A1
.text:0040C6A1 loc_40C6A1:                             ; CODE XREF: sub_40C240+2FF↑j
.text:0040C6A1                 cmp     bx, 40h ; '@'
.text:0040C6A5                 jz      short loc_40C6B7
.text:0040C6A7                 cmp     bx, 2Bh ; '+'
.text:0040C6AB                 jz      short loc_40C6B7
.text:0040C6AD                 cmp     bx, 21h ; '!'
.text:0040C6B1                 jnz     loc_40C545
.text:0040C6B7
.text:0040C6B7 loc_40C6B7:                             ; CODE XREF: sub_40C240+465↑j
.text:0040C6B7                                         ; sub_40C240+46B↑j
.text:0040C6B7                 cmp     word ptr [esi], 28h ; '('
.text:0040C6BB                 jnz     loc_40C545
.text:0040C6C1
.text:0040C6C1 loc_40C6C1:                             ; CODE XREF: sub_40C240+2F3↑j
.text:0040C6C1                 mov     ebx, ebp
.text:0040C6C3                 and     ebp, 1
.text:0040C6C6                 jnz     short loc_40C6CB
.text:0040C6C8                 and     ebx, 0FFFFFFFBh
.text:0040C6CB
.text:0040C6CB loc_40C6CB:                             ; CODE XREF: sub_40C240+486↑j
.text:0040C6CB                 movzx   eax, [esp+107Ch+var_102D]
.text:0040C6D0                 sub     esi, 2
.text:0040C6D3                 cmp     edi, [esp+107Ch+var_1034]
.text:0040C6D7                 jnb     loc_40C404
.text:0040C6DD
.text:0040C6DD loc_40C6DD:                             ; CODE XREF: sub_40C240+4D2↓j
.text:0040C6DD                 mov     dword ptr [esp+107Ch+var_106C], ebx
.text:0040C6E1                 movzx   ebp, al
.text:0040C6E4                 mov     eax, [esp+107Ch+arg_8]
.text:0040C6EB                 mov     [esp+107Ch+var_1070], ebp
.text:0040C6EF                 mov     dword ptr [esp+107Ch+Type], edi
.text:0040C6F3                 mov     [esp+107Ch+var_1074], eax
.text:0040C6F7                 mov     dword ptr [esp+107Ch+C], esi
.text:0040C6FA                 call    sub_40C240
.text:0040C6FF                 xor     ecx, ecx
.text:0040C701                 test    eax, eax
.text:0040C703                 jz      loc_40C409
.text:0040C709                 add     edi, 2
.text:0040C70C                 xor     eax, eax
.text:0040C70E                 cmp     edi, [esp+107Ch+var_1034]
.text:0040C712                 jb      short loc_40C6DD
.text:0040C714                 jmp     loc_40C404
.text:0040C719 ; ---------------------------------------------------------------------------
.text:0040C719
.text:0040C719 loc_40C719:                             ; CODE XREF: sub_40C240+2E9↑j
.text:0040C719                 mov     edx, [esp+107Ch+arg_8]
.text:0040C720                 mov     [esp+107Ch+var_1034], edx
.text:0040C724                 jmp     loc_40C52F
.text:0040C724 ; ---------------------------------------------------------------------------
.text:0040C729                 align 10h
.text:0040C730
.text:0040C730 loc_40C730:                             ; CODE XREF: sub_40C240+259↑j
.text:0040C730                                         ; sub_40C240+263↑j ...
.text:0040C730                 cmp     word ptr [esi], 28h ; '('
.text:0040C734                 jz      short loc_40C780
.text:0040C736
.text:0040C736 loc_40C736:                             ; CODE XREF: sub_40C240+546↓j
.text:0040C736                                         ; sub_40C240+552↓j
.text:0040C736                 cmp     bx, 3Fh ; '?'
.text:0040C73A                 jz      short loc_40C753
.text:0040C73C
.text:0040C73C loc_40C73C:                             ; CODE XREF: sub_40C240+52E↓j
.text:0040C73C                                         ; sub_40C240+556↓j
.text:0040C73C                 movzx   ebx, word ptr [esi]
.text:0040C73F                 add     esi, 2
.text:0040C742                 cmp     bx, 3Fh ; '?'
.text:0040C746                 jz      short loc_40C730
.text:0040C748                 cmp     bx, 2Ah ; '*'
.text:0040C74C                 jz      short loc_40C730
.text:0040C74E                 jmp     loc_40C4A9
.text:0040C753 ; ---------------------------------------------------------------------------
.text:0040C753
.text:0040C753 loc_40C753:                             ; CODE XREF: sub_40C240+4FA↑j
.text:0040C753                 cmp     edi, [esp+107Ch+arg_8]
.text:0040C75A                 mov     ecx, 1
.text:0040C75F                 jz      loc_40C409
.text:0040C765                 cmp     word ptr [edi], 2Fh ; '/'
.text:0040C769                 jz      short loc_40C770
.text:0040C76B
.text:0040C76B loc_40C76B:                             ; CODE XREF: sub_40C240+536↓j
.text:0040C76B                 add     edi, 2
.text:0040C76E                 jmp     short loc_40C73C
.text:0040C770 ; ---------------------------------------------------------------------------
.text:0040C770
.text:0040C770 loc_40C770:                             ; CODE XREF: sub_40C240+529↑j
.text:0040C770                 test    ebp, 1
.text:0040C776                 jz      short loc_40C76B
.text:0040C778                 jmp     loc_40C409
.text:0040C778 ; ---------------------------------------------------------------------------
.text:0040C77D                 align 10h
.text:0040C780
.text:0040C780 loc_40C780:                             ; CODE XREF: sub_40C240+4F4↑j
.text:0040C780                 test    ebp, 20h
.text:0040C786                 jz      short loc_40C736
.text:0040C788                 mov     dword ptr [esp+107Ch+C], esi
.text:0040C78B                 call    sub_40CD00
.text:0040C790                 cmp     eax, esi
.text:0040C792                 jz      short loc_40C736
.text:0040C794                 mov     esi, eax
.text:0040C796                 jmp     short loc_40C73C
.text:0040C798 ; ---------------------------------------------------------------------------
.text:0040C798
.text:0040C798 loc_40C798:                             ; CODE XREF: sub_40C240+249↑j
.text:0040C798                 cmp     [esp+107Ch+var_102D], 0
.text:0040C79D                 mov     ecx, 1
.text:0040C7A2                 jnz     loc_40C409
.text:0040C7A8                 jmp     loc_40C48F
.text:0040C7AD ; ---------------------------------------------------------------------------
.text:0040C7AD
.text:0040C7AD loc_40C7AD:                             ; CODE XREF: sub_40C240+236↑j
.text:0040C7AD                 cmp     word ptr [esi], 28h ; '('
.text:0040C7B1                 jnz     loc_40C47C
.text:0040C7B7                 movzx   edx, [esp+107Ch+var_102D]
.text:0040C7BC                 mov     [esp+107Ch+var_1068], ebp ; int
.text:0040C7C0                 mov     ecx, [esp+107Ch+arg_8]
.text:0040C7C7                 mov     [esp+107Ch+var_1074], edi ; int
.text:0040C7CB                 mov     dword ptr [esp+107Ch+Type], esi ; wchar_t *
.text:0040C7CF                 mov     [esp+107Ch+var_1070], ecx ; int
.text:0040C7D3                 mov     dword ptr [esp+107Ch+var_106C], edx ; char
.text:0040C7D7                 mov     dword ptr [esp+107Ch+C], ebx ; __int16
.text:0040C7DA                 call    sub_40CE00
.text:0040C7DF                 cmp     eax, 0FFFFFFFFh
.text:0040C7E2                 mov     ecx, eax
.text:0040C7E4                 jnz     loc_40C409
.text:0040C7EA                 jmp     loc_40C47C
.text:0040C7EA ; ---------------------------------------------------------------------------
.text:0040C7EF                 align 10h
.text:0040C7F0
.text:0040C7F0 loc_40C7F0:                             ; CODE XREF: sub_40C240+6D↑j
.text:0040C7F0                                         ; DATA XREF: sub_40C240:jpt_40C2AD↑o
.text:0040C7F0                 mov     ecx, ebp        ; jumptable 0040C2AD case 47
.text:0040C7F2                 and     ecx, 5
.text:0040C7F5                 cmp     ecx, 5
.text:0040C7F8                 jz      short loc_40C835
.text:0040C7FA                 lea     esi, [esi+0]
.text:0040C800
.text:0040C800 def_40C2AD:                             ; CODE XREF: sub_40C240+67↑j
.text:0040C800                                         ; sub_40C240+6D↑j ...
.text:0040C800                 cmp     edi, [esp+107Ch+arg_8] ; jumptable 0040C2AD default case, cases 34-41,44-46,48-62,65-90
.text:0040C807                 jz      loc_40C404
.text:0040C80D                 test    ebp, 10h
.text:0040C813                 jnz     short loc_40C825
.text:0040C815                 movzx   eax, word ptr [edi]
.text:0040C818
.text:0040C818 loc_40C818:                             ; CODE XREF: sub_40C240+5F3↓j
.text:0040C818                 cmp     ebx, eax
.text:0040C81A
.text:0040C81A loc_40C81A:                             ; CODE XREF: sub_40C240+A81↓j
.text:0040C81A                 jz      loc_40C3D0
.text:0040C820                 jmp     loc_40C404
.text:0040C825 ; ---------------------------------------------------------------------------
.text:0040C825
.text:0040C825 loc_40C825:                             ; CODE XREF: sub_40C240+5D3↑j
.text:0040C825                 movzx   edx, word ptr [edi]
.text:0040C828                 mov     dword ptr [esp+107Ch+C], edx ; C
.text:0040C82B                 call    towlower
.text:0040C830                 movzx   eax, ax
.text:0040C833                 jmp     short loc_40C818
.text:0040C835 ; ---------------------------------------------------------------------------
.text:0040C835
.text:0040C835 loc_40C835:                             ; CODE XREF: sub_40C240+5B8↑j
.text:0040C835                 cmp     edi, [esp+107Ch+arg_8]
.text:0040C83C                 jz      loc_40C404
.text:0040C842                 cmp     [edi], bx
.text:0040C845                 jnz     loc_40C404
.text:0040C84B                 mov     [esp+107Ch+var_102E], 1
.text:0040C850                 jmp     loc_40C3D0
.text:0040C855 ; ---------------------------------------------------------------------------
.text:0040C855
.text:0040C855 loc_40C855:                             ; CODE XREF: sub_40C240+6D↑j
.text:0040C855                                         ; DATA XREF: sub_40C240:jpt_40C2AD↑o
.text:0040C855                 test    ebp, 20h        ; jumptable 0040C2AD cases 33,43,64
.text:0040C85B                 jz      short def_40C2AD ; jumptable 0040C2AD default case, cases 34-41,44-46,48-62,65-90
.text:0040C85D                 cmp     word ptr [esi], 28h ; '('
.text:0040C861                 jnz     short def_40C2AD ; jumptable 0040C2AD default case, cases 34-41,44-46,48-62,65-90
.text:0040C863                 movzx   edx, [esp+107Ch+var_102D]
.text:0040C868                 mov     [esp+107Ch+var_1068], ebp ; int
.text:0040C86C                 mov     ecx, [esp+107Ch+arg_8]
.text:0040C873                 mov     [esp+107Ch+var_1074], edi ; int
.text:0040C877                 mov     dword ptr [esp+107Ch+Type], esi ; wchar_t *
.text:0040C87B                 mov     [esp+107Ch+var_1070], ecx ; int
.text:0040C87F                 mov     dword ptr [esp+107Ch+var_106C], edx ; char
.text:0040C883                 mov     dword ptr [esp+107Ch+C], ebx ; __int16
.text:0040C886                 call    sub_40CE00
.text:0040C88B                 cmp     eax, 0FFFFFFFFh
.text:0040C88E                 mov     ecx, eax
.text:0040C890                 jz      def_40C2AD      ; jumptable 0040C2AD default case, cases 34-41,44-46,48-62,65-90
.text:0040C896                 jmp     loc_40C409
.text:0040C896 ; ---------------------------------------------------------------------------
.text:0040C89B                 align 10h
.text:0040C8A0
.text:0040C8A0 loc_40C8A0:                             ; CODE XREF: sub_40C240+6D↑j
.text:0040C8A0                                         ; DATA XREF: sub_40C240:jpt_40C2AD↑o
.text:0040C8A0                 mov     edx, ds:dword_41B260 ; jumptable 0040C2AD case 91
.text:0040C8A6                 test    edx, edx
.text:0040C8A8                 jz      loc_40CC60
.text:0040C8AE
.text:0040C8AE loc_40C8AE:                             ; CODE XREF: sub_40C240+A3E↓j
.text:0040C8AE                 cmp     edi, [esp+107Ch+arg_8]
.text:0040C8B5                 mov     ecx, 1
.text:0040C8BA                 jz      loc_40C409
.text:0040C8C0                 movzx   eax, word ptr [edi]
.text:0040C8C3                 cmp     ax, 2Eh ; '.'
.text:0040C8C7                 jz      loc_40CC50
.text:0040C8CD
.text:0040C8CD loc_40C8CD:                             ; CODE XREF: sub_40C240+A15↓j
.text:0040C8CD                 cmp     ax, 2Fh ; '/'
.text:0040C8D1                 jz      loc_40CC35
.text:0040C8D7
.text:0040C8D7 loc_40C8D7:                             ; CODE XREF: sub_40C240+A00↓j
.text:0040C8D7                 movzx   edx, word ptr [esi]
.text:0040C8DA                 mov     [esp+107Ch+var_1041], 0
.text:0040C8DF                 cmp     dx, 21h ; '!'
.text:0040C8E3                 jz      loc_40CC2B
.text:0040C8E9                 mov     ebx, ds:dword_41B260
.text:0040C8EF                 test    ebx, ebx
.text:0040C8F1                 js      loc_40CC21
.text:0040C8F7
.text:0040C8F7 loc_40C8F7:                             ; CODE XREF: sub_40C240+9E5↓j
.text:0040C8F7                                         ; sub_40C240+9F0↓j
.text:0040C8F7                 cmp     [esp+107Ch+var_1041], 0
.text:0040C8FC                 jz      short loc_40C901
.text:0040C8FE                 add     esi, 2
.text:0040C901
.text:0040C901 loc_40C901:                             ; CODE XREF: sub_40C240+6BC↑j
.text:0040C901                 movzx   edx, ax
.text:0040C904                 test    ebp, 10h
.text:0040C90A                 mov     [esp+107Ch+var_1040], edx
.text:0040C90E                 jnz     loc_40CC0D
.text:0040C914
.text:0040C914 loc_40C914:                             ; CODE XREF: sub_40C240+9DC↓j
.text:0040C914                 movzx   ebx, word ptr [esi]
.text:0040C917                 add     esi, 2
.text:0040C91A                 lea     esi, [esi+0]
.text:0040C920
.text:0040C920 loc_40C920:                             ; CODE XREF: sub_40C240+74A↓j
.text:0040C920                 test    ebp, 2
.text:0040C926                 jnz     short loc_40C932
.text:0040C928                 cmp     bx, 5Ch ; '\'
.text:0040C92C                 jz      loc_40CBD0
.text:0040C932
.text:0040C932 loc_40C932:                             ; CODE XREF: sub_40C240+6E6↑j
.text:0040C932                 cmp     bx, 5Bh ; '['
.text:0040C936                 jz      loc_40CB21
.text:0040C93C
.text:0040C93C loc_40C93C:                             ; CODE XREF: sub_40C240+8E5↓j
.text:0040C93C                 test    bx, bx
.text:0040C93F                 mov     ecx, 1
.text:0040C944                 jz      loc_40C409
.text:0040C94A                 test    ebp, 10h
.text:0040C950                 jnz     loc_40CB11
.text:0040C956
.text:0040C956 loc_40C956:                             ; CODE XREF: sub_40C240+8DC↓j
.text:0040C956                                         ; sub_40C240+937↓j
.text:0040C956                 movzx   eax, word ptr [esi]
.text:0040C959                 mov     [esp+107Ch+var_1049], 0
.text:0040C95E                 cmp     ax, 2Dh ; '-'
.text:0040C962                 mov     ecx, eax
.text:0040C964                 jz      loc_40CAF0
.text:0040C96A
.text:0040C96A loc_40C96A:                             ; CODE XREF: sub_40C240+8B7↓j
.text:0040C96A                                         ; sub_40C240+8C1↓j ...
.text:0040C96A                 cmp     [esp+107Ch+var_1049], 0
.text:0040C96F                 jnz     short loc_40C978
.text:0040C971                 cmp     bx, word ptr [esp+107Ch+var_1040]
.text:0040C976                 jz      short loc_40C9E9
.text:0040C978
.text:0040C978 loc_40C978:                             ; CODE XREF: sub_40C240+72F↑j
.text:0040C978                 mov     edx, ebx
.text:0040C97A                 add     esi, 2
.text:0040C97D                 movzx   ebx, cx
.text:0040C980                 cmp     bx, 2Dh ; '-'
.text:0040C984                 jz      short loc_40C9A1
.text:0040C986
.text:0040C986 loc_40C986:                             ; CODE XREF: sub_40C240+768↓j
.text:0040C986                                         ; sub_40C240+7A4↓j ...
.text:0040C986                 cmp     bx, 5Dh ; ']'
.text:0040C98A                 jnz     short loc_40C920
.text:0040C98C                 cmp     [esp+107Ch+var_1041], 0
.text:0040C991                 mov     ecx, 1
.text:0040C996                 jnz     loc_40C3D0
.text:0040C99C                 jmp     loc_40C409
.text:0040C9A1 ; ---------------------------------------------------------------------------
.text:0040C9A1
.text:0040C9A1 loc_40C9A1:                             ; CODE XREF: sub_40C240+744↑j
.text:0040C9A1                 movzx   eax, word ptr [esi]
.text:0040C9A4                 cmp     ax, 5Dh ; ']'
.text:0040C9A8                 jz      short loc_40C986
.text:0040C9AA                 add     esi, 2
.text:0040C9AD                 movzx   eax, ax
.text:0040C9B0                 test    ebp, 2
.text:0040C9B6                 jnz     short loc_40C9C2
.text:0040C9B8                 cmp     ax, 5Ch ; '\'
.text:0040C9BC                 jz      loc_40CAE1
.text:0040C9C2
.text:0040C9C2 loc_40C9C2:                             ; CODE XREF: sub_40C240+776↑j
.text:0040C9C2                                         ; sub_40C240+8A7↓j
.text:0040C9C2                 test    ax, ax
.text:0040C9C5                 mov     ecx, 1
.text:0040C9CA                 jz      loc_40C409
.text:0040C9D0                 cmp     dx, word ptr [esp+107Ch+var_1040]
.text:0040C9D5                 ja      short loc_40C9DE
.text:0040C9D7                 cmp     word ptr [esp+107Ch+var_1040], ax
.text:0040C9DC                 jbe     short loc_40C9E6
.text:0040C9DE
.text:0040C9DE loc_40C9DE:                             ; CODE XREF: sub_40C240+795↑j
.text:0040C9DE                                         ; sub_40C240+97F↓j
.text:0040C9DE                 movzx   ebx, word ptr [esi]
.text:0040C9E1                 add     esi, 2
.text:0040C9E4                 jmp     short loc_40C986
.text:0040C9E6 ; ---------------------------------------------------------------------------
.text:0040C9E6
.text:0040C9E6 loc_40C9E6:                             ; CODE XREF: sub_40C240+79C↑j
.text:0040C9E6                                         ; sub_40C240+7D9↓j ...
.text:0040C9E6                 movzx   eax, word ptr [esi]
.text:0040C9E9
.text:0040C9E9 loc_40C9E9:                             ; CODE XREF: sub_40C240+736↑j
.text:0040C9E9                 movzx   ebx, ax
.text:0040C9EC                 add     esi, 2
.text:0040C9EF                 test    bx, bx
.text:0040C9F2                 mov     ecx, 1
.text:0040C9F7                 jz      loc_40C409
.text:0040C9FD                 test    ebp, 2
.text:0040CA03                 jnz     short loc_40CA0F
.text:0040CA05                 cmp     bx, 5Ch ; '\'
.text:0040CA09                 jz      loc_40CAD6
.text:0040CA0F
.text:0040CA0F loc_40CA0F:                             ; CODE XREF: sub_40C240+7C3↑j
.text:0040CA0F                 cmp     bx, 5Bh ; '['
.text:0040CA13                 jz      short loc_40CA25
.text:0040CA15
.text:0040CA15 loc_40CA15:                             ; CODE XREF: sub_40C240+7F8↓j
.text:0040CA15                                         ; sub_40C240+822↓j
.text:0040CA15                 cmp     bx, 5Dh ; ']'
.text:0040CA19                 jnz     short loc_40C9E6
.text:0040CA1B                 cmp     [esp+107Ch+var_1041], 0
.text:0040CA20                 jmp     loc_40C41B
.text:0040CA25 ; ---------------------------------------------------------------------------
.text:0040CA25
.text:0040CA25 loc_40CA25:                             ; CODE XREF: sub_40C240+7D3↑j
.text:0040CA25                 movzx   eax, word ptr [esi]
.text:0040CA28                 cmp     ax, 3Ah ; ':'
.text:0040CA2C                 jz      short loc_40CA94
.text:0040CA2E                 cmp     ax, 3Dh ; '='
.text:0040CA32                 jz      short loc_40CA64
.text:0040CA34                 cmp     ax, 2Eh ; '.'
.text:0040CA38                 jnz     short loc_40CA15
.text:0040CA3A                 add     esi, 2
.text:0040CA3D
.text:0040CA3D loc_40CA3D:                             ; CODE XREF: sub_40C240+810↓j
.text:0040CA3D                                         ; sub_40C240+817↓j
.text:0040CA3D                 add     esi, 2
.text:0040CA40                 movzx   eax, word ptr [esi]
.text:0040CA43                 test    ax, ax
.text:0040CA46                 jz      loc_40C404
.text:0040CA4C                 cmp     ax, 2Eh ; '.'
.text:0040CA50                 jnz     short loc_40CA3D
.text:0040CA52                 cmp     word ptr [esi+2], 5Dh ; ']'
.text:0040CA57                 jnz     short loc_40CA3D
.text:0040CA59
.text:0040CA59 loc_40CA59:                             ; CODE XREF: sub_40C240+84D↓j
.text:0040CA59                                         ; sub_40C240+894↓j
.text:0040CA59                 add     esi, 4
.text:0040CA5C                 movzx   ebx, word ptr [esi]
.text:0040CA5F
.text:0040CA5F loc_40CA5F:                             ; CODE XREF: sub_40C240+89A↓j
.text:0040CA5F                 add     esi, 2
.text:0040CA62                 jmp     short loc_40CA15
.text:0040CA64 ; ---------------------------------------------------------------------------
.text:0040CA64
.text:0040CA64 loc_40CA64:                             ; CODE XREF: sub_40C240+7F2↑j
.text:0040CA64                 add     esi, 2
.text:0040CA67                 mov     ecx, 1
.text:0040CA6C                 movzx   eax, word ptr [esi]
.text:0040CA6F                 test    ax, ax
.text:0040CA72                 jz      loc_40C409
.text:0040CA78                 add     esi, 2
.text:0040CA7B                 movzx   edx, word ptr [esi]
.text:0040CA7E                 cmp     dx, 3Dh ; '='
.text:0040CA82                 jnz     loc_40C404
.text:0040CA88                 cmp     word ptr [esi+2], 5Dh ; ']'
.text:0040CA8D                 jz      short loc_40CA59
.text:0040CA8F                 jmp     loc_40C404
.text:0040CA94 ; ---------------------------------------------------------------------------
.text:0040CA94
.text:0040CA94 loc_40CA94:                             ; CODE XREF: sub_40C240+7EC↑j
.text:0040CA94                 mov     [esp+107Ch+var_1050], esi
.text:0040CA98                 xor     edx, edx
.text:0040CA9A
.text:0040CA9A loc_40CA9A:                             ; CODE XREF: sub_40C240+882↓j
.text:0040CA9A                 add     esi, 2
.text:0040CA9D                 inc     edx
.text:0040CA9E                 cmp     edx, 800h
.text:0040CAA4                 movzx   eax, word ptr [esi]
.text:0040CAA7                 mov     ecx, 1
.text:0040CAAC                 movzx   ebx, ax
.text:0040CAAF                 jz      loc_40C409
.text:0040CAB5                 cmp     ax, 3Ah ; ':'
.text:0040CAB9                 jz      short loc_40CACD
.text:0040CABB
.text:0040CABB loc_40CABB:                             ; CODE XREF: sub_40C240+892↓j
.text:0040CABB                 lea     ecx, [ebx-61h]
.text:0040CABE                 cmp     cx, 18h
.text:0040CAC2                 jbe     short loc_40CA9A
.text:0040CAC4                 mov     esi, [esp+107Ch+var_1050]
.text:0040CAC8                 jmp     loc_40C9E6
.text:0040CACD ; ---------------------------------------------------------------------------
.text:0040CACD
.text:0040CACD loc_40CACD:                             ; CODE XREF: sub_40C240+879↑j
.text:0040CACD                 cmp     word ptr [esi+2], 5Dh ; ']'
.text:0040CAD2                 jnz     short loc_40CABB
.text:0040CAD4                 jmp     short loc_40CA59
.text:0040CAD6 ; ---------------------------------------------------------------------------
.text:0040CAD6
.text:0040CAD6 loc_40CAD6:                             ; CODE XREF: sub_40C240+7C9↑j
.text:0040CAD6                 cmp     word ptr [esi], 0
.text:0040CADA                 jnz     short loc_40CA5F
.text:0040CADC                 jmp     loc_40C404
.text:0040CAE1 ; ---------------------------------------------------------------------------
.text:0040CAE1
.text:0040CAE1 loc_40CAE1:                             ; CODE XREF: sub_40C240+77C↑j
.text:0040CAE1                 movzx   eax, word ptr [esi]
.text:0040CAE4                 add     esi, 2
.text:0040CAE7                 jmp     loc_40C9C2
.text:0040CAE7 ; ---------------------------------------------------------------------------
.text:0040CAEC                 align 10h
.text:0040CAF0
.text:0040CAF0 loc_40CAF0:                             ; CODE XREF: sub_40C240+724↑j
.text:0040CAF0                 movzx   edx, word ptr [esi+2]
.text:0040CAF4                 test    dx, dx
.text:0040CAF7                 jz      loc_40C96A
.text:0040CAFD                 cmp     dx, 5Dh ; ']'
.text:0040CB01                 jz      loc_40C96A
.text:0040CB07                 mov     [esp+107Ch+var_1049], 1
.text:0040CB0C                 jmp     loc_40C96A
.text:0040CB11 ; ---------------------------------------------------------------------------
.text:0040CB11
.text:0040CB11 loc_40CB11:                             ; CODE XREF: sub_40C240+710↑j
.text:0040CB11                 mov     dword ptr [esp+107Ch+C], ebx ; C
.text:0040CB14                 call    towlower
.text:0040CB19                 movzx   ebx, ax
.text:0040CB1C                 jmp     loc_40C956
.text:0040CB21 ; ---------------------------------------------------------------------------
.text:0040CB21
.text:0040CB21 loc_40CB21:                             ; CODE XREF: sub_40C240+6F6↑j
.text:0040CB21                 cmp     word ptr [esi], 3Ah ; ':'
.text:0040CB25                 jnz     loc_40C93C
.text:0040CB2B                 mov     [esp+107Ch+var_1048], esi
.text:0040CB2F                 xor     edx, edx
.text:0040CB31                 jmp     short loc_40CB40
.text:0040CB31 ; ---------------------------------------------------------------------------
.text:0040CB33                 align 10h
.text:0040CB40
.text:0040CB40 loc_40CB40:                             ; CODE XREF: sub_40C240+8F1↑j
.text:0040CB40                                         ; sub_40C240+92C↓j
.text:0040CB40                 cmp     edx, 800h
.text:0040CB46                 mov     ecx, 1
.text:0040CB4B                 jz      loc_40C409
.text:0040CB51                 add     esi, 2
.text:0040CB54                 movzx   ebx, word ptr [esi]
.text:0040CB57                 cmp     bx, 3Ah ; ':'
.text:0040CB5B                 jz      short loc_40CB80
.text:0040CB5D
.text:0040CB5D loc_40CB5D:                             ; CODE XREF: sub_40C240+945↓j
.text:0040CB5D                 lea     ecx, [ebx-61h]
.text:0040CB60                 cmp     cx, 18h
.text:0040CB64                 ja      short loc_40CB6E
.text:0040CB66                 mov     [esp+edx*2+107Ch+var_102C], bx
.text:0040CB6B                 inc     edx
.text:0040CB6C                 jmp     short loc_40CB40
.text:0040CB6E ; ---------------------------------------------------------------------------
.text:0040CB6E
.text:0040CB6E loc_40CB6E:                             ; CODE XREF: sub_40C240+924↑j
.text:0040CB6E                 mov     esi, [esp+107Ch+var_1048]
.text:0040CB72                 mov     ebx, 5Bh ; '['
.text:0040CB77                 jmp     loc_40C956
.text:0040CB77 ; ---------------------------------------------------------------------------
.text:0040CB7C                 align 10h
.text:0040CB80
.text:0040CB80 loc_40CB80:                             ; CODE XREF: sub_40C240+91B↑j
.text:0040CB80                 cmp     word ptr [esi+2], 5Dh ; ']'
.text:0040CB85                 jnz     short loc_40CB5D
.text:0040CB87                 mov     [esp+edx*2+107Ch+var_102C], 0
.text:0040CB8E                 lea     ebx, [esp+107Ch+var_102C]
.text:0040CB92                 add     esi, 4
.text:0040CB95                 mov     dword ptr [esp+107Ch+C], ebx
.text:0040CB98                 call    sub_40D650
.text:0040CB9D                 movzx   eax, ax
.text:0040CBA0                 mov     ecx, 1
.text:0040CBA5                 test    ax, ax
.text:0040CBA8                 jz      loc_40C409
.text:0040CBAE                 mov     dword ptr [esp+107Ch+Type], eax ; Type
.text:0040CBB2                 movzx   edx, word ptr [edi]
.text:0040CBB5                 mov     dword ptr [esp+107Ch+C], edx ; C
.text:0040CBB8                 call    iswctype
.text:0040CBBD                 test    eax, eax
.text:0040CBBF                 jz      loc_40C9DE
.text:0040CBC5                 jmp     loc_40C9E6
.text:0040CBC5 ; ---------------------------------------------------------------------------
.text:0040CBCA                 align 10h
.text:0040CBD0
.text:0040CBD0 loc_40CBD0:                             ; CODE XREF: sub_40C240+6EC↑j
.text:0040CBD0                 movzx   eax, word ptr [esi]
.text:0040CBD3                 mov     ecx, 1
.text:0040CBD8                 test    ax, ax
.text:0040CBDB                 jz      loc_40C409
.text:0040CBE1                 test    ebp, 10h
.text:0040CBE7                 movzx   ebx, ax
.text:0040CBEA                 jnz     short loc_40CC00
.text:0040CBEC
.text:0040CBEC loc_40CBEC:                             ; CODE XREF: sub_40C240+9CB↓j
.text:0040CBEC                 add     esi, 2
.text:0040CBEF                 cmp     bx, word ptr [esp+107Ch+var_1040]
.text:0040CBF4                 jnz     loc_40C986
.text:0040CBFA                 jmp     loc_40C9E6
.text:0040CBFA ; ---------------------------------------------------------------------------
.text:0040CBFF                 align 10h
.text:0040CC00
.text:0040CC00 loc_40CC00:                             ; CODE XREF: sub_40C240+9AA↑j
.text:0040CC00                 mov     dword ptr [esp+107Ch+C], ebx ; C
.text:0040CC03                 call    towlower
.text:0040CC08                 movzx   ebx, ax
.text:0040CC0B                 jmp     short loc_40CBEC
.text:0040CC0D ; ---------------------------------------------------------------------------
.text:0040CC0D
.text:0040CC0D loc_40CC0D:                             ; CODE XREF: sub_40C240+6CE↑j
.text:0040CC0D                 mov     dword ptr [esp+107Ch+C], edx ; C
.text:0040CC10                 call    towlower
.text:0040CC15                 movzx   ecx, ax
.text:0040CC18                 mov     [esp+107Ch+var_1040], ecx
.text:0040CC1C                 jmp     loc_40C914
.text:0040CC21 ; ---------------------------------------------------------------------------
.text:0040CC21
.text:0040CC21 loc_40CC21:                             ; CODE XREF: sub_40C240+6B1↑j
.text:0040CC21                 cmp     dx, 5Eh ; '^'
.text:0040CC25                 jnz     loc_40C8F7
.text:0040CC2B
.text:0040CC2B loc_40CC2B:                             ; CODE XREF: sub_40C240+6A3↑j
.text:0040CC2B                 mov     [esp+107Ch+var_1041], 1
.text:0040CC30                 jmp     loc_40C8F7
.text:0040CC35 ; ---------------------------------------------------------------------------
.text:0040CC35
.text:0040CC35 loc_40CC35:                             ; CODE XREF: sub_40C240+691↑j
.text:0040CC35                 test    ebp, 1
.text:0040CC3B                 mov     ecx, 1
.text:0040CC40                 jz      loc_40C8D7
.text:0040CC46                 jmp     loc_40C409
.text:0040CC46 ; ---------------------------------------------------------------------------
.text:0040CC4B                 align 10h
.text:0040CC50
.text:0040CC50 loc_40CC50:                             ; CODE XREF: sub_40C240+687↑j
.text:0040CC50                 cmp     [esp+107Ch+var_102D], 0
.text:0040CC55                 jz      loc_40C8CD
.text:0040CC5B                 jmp     loc_40C409
.text:0040CC60 ; ---------------------------------------------------------------------------
.text:0040CC60
.text:0040CC60 loc_40CC60:                             ; CODE XREF: sub_40C240+668↑j
.text:0040CC60                 mov     dword ptr [esp+107Ch+C], offset sub_40AE20 ; VarName
.text:0040CC67                 call    getenv
.text:0040CC6C                 test    eax, eax
.text:0040CC6E                 setnz   dl
.text:0040CC71                 movzx   ecx, dl
.text:0040CC74                 lea     ebx, [ecx+ecx-1]
.text:0040CC78                 mov     ds:dword_41B260, ebx
.text:0040CC7E                 jmp     loc_40C8AE
.text:0040CC83 ; ---------------------------------------------------------------------------
.text:0040CC83
.text:0040CC83 loc_40CC83:                             ; CODE XREF: sub_40C240+6D↑j
.text:0040CC83                                         ; DATA XREF: sub_40C240:jpt_40C2AD↑o
.text:0040CC83                 test    ebp, 2          ; jumptable 0040C2AD case 92
.text:0040CC89                 jnz     short loc_40CCA7
.text:0040CC8B                 movzx   ebx, word ptr [esi]
.text:0040CC8E                 mov     ecx, 1
.text:0040CC93                 add     esi, 2
.text:0040CC96                 test    bx, bx
.text:0040CC99                 jz      loc_40C409
.text:0040CC9F                 test    ebp, 10h
.text:0040CCA5                 jnz     short loc_40CCD6
.text:0040CCA7
.text:0040CCA7 loc_40CCA7:                             ; CODE XREF: sub_40C240+A49↑j
.text:0040CCA7                                         ; sub_40C240+AA1↓j
.text:0040CCA7                 cmp     edi, [esp+107Ch+arg_8]
.text:0040CCAE                 jz      loc_40C404
.text:0040CCB4                 test    ebp, 10h
.text:0040CCBA                 jnz     short loc_40CCC6
.text:0040CCBC                 movzx   eax, word ptr [edi]
.text:0040CCBF
.text:0040CCBF loc_40CCBF:                             ; CODE XREF: sub_40C240+A94↓j
.text:0040CCBF                 cmp     eax, ebx
.text:0040CCC1                 jmp     loc_40C81A
.text:0040CCC6 ; ---------------------------------------------------------------------------
.text:0040CCC6
.text:0040CCC6 loc_40CCC6:                             ; CODE XREF: sub_40C240+A7A↑j
.text:0040CCC6                 movzx   edx, word ptr [edi]
.text:0040CCC9                 mov     dword ptr [esp+107Ch+C], edx ; C
.text:0040CCCC                 call    towlower
.text:0040CCD1                 movzx   eax, ax
.text:0040CCD4                 jmp     short loc_40CCBF
.text:0040CCD6 ; ---------------------------------------------------------------------------
.text:0040CCD6
.text:0040CCD6 loc_40CCD6:                             ; CODE XREF: sub_40C240+A65↑j
.text:0040CCD6                 mov     dword ptr [esp+107Ch+C], ebx ; C
.text:0040CCD9                 call    towlower
.text:0040CCDE                 movzx   ebx, ax
.text:0040CCE1                 jmp     short loc_40CCA7
.text:0040CCE3 ; ---------------------------------------------------------------------------
.text:0040CCE3
.text:0040CCE3 loc_40CCE3:                             ; CODE XREF: sub_40C240+5B↑j
.text:0040CCE3                 mov     dword ptr [esp+107Ch+C], ebx ; C
.text:0040CCE6                 call    towlower
.text:0040CCEB                 movzx   ebx, ax
.text:0040CCEE                 jmp     loc_40C2A1
.text:0040CCEE sub_40C240      endp
.text:0040CCEE
.text:0040CCEE ; ---------------------------------------------------------------------------
.text:0040CCF3                 align 10h
.text:0040CD00
.text:0040CD00 ; =============== S U B R O U T I N E =======================================
.text:0040CD00
.text:0040CD00
.text:0040CD00 sub_40CD00      proc near               ; CODE XREF: sub_40C240+54B↑p
.text:0040CD00                                         ; sub_40CD00+6D↓p
.text:0040CD00
.text:0040CD00 VarName         = dword ptr -0Ch
.text:0040CD00 arg_0           = dword ptr  4
.text:0040CD00
.text:0040CD00                 push    esi
.text:0040CD01                 push    ebx
.text:0040CD02                 sub     esp, 4
.text:0040CD05                 mov     esi, [esp+0Ch+arg_0]
.text:0040CD09                 mov     ebx, esi
.text:0040CD0B                 nop
.text:0040CD0C                 lea     esi, [esi+0]
.text:0040CD10
.text:0040CD10 loc_40CD10:                             ; CODE XREF: sub_40CD00+54↓j
.text:0040CD10                                         ; sub_40CD00+74↓j ...
.text:0040CD10                 add     ebx, 2
.text:0040CD13                 mov     ecx, esi
.text:0040CD15                 movzx   edx, word ptr [ebx]
.text:0040CD18                 test    dx, dx
.text:0040CD1B                 jz      short loc_40CD59
.text:0040CD1D                 cmp     dx, 5Bh ; '['
.text:0040CD21                 jz      short loc_40CD76
.text:0040CD23                 cmp     dx, 3Fh ; '?'
.text:0040CD27                 jz      short loc_40CD60
.text:0040CD29                 cmp     dx, 2Ah ; '*'
.text:0040CD2D                 jz      short loc_40CD60
.text:0040CD2F                 cmp     dx, 2Bh ; '+'
.text:0040CD33                 jz      short loc_40CD60
.text:0040CD35                 cmp     dx, 40h ; '@'
.text:0040CD39                 jz      short loc_40CD60
.text:0040CD3B                 cmp     dx, 21h ; '!'
.text:0040CD3F                 jz      short loc_40CD60
.text:0040CD41                 jmp     short loc_40CD50
.text:0040CD41 ; ---------------------------------------------------------------------------
.text:0040CD43                 align 10h
.text:0040CD50
.text:0040CD50 loc_40CD50:                             ; CODE XREF: sub_40CD00+41↑j
.text:0040CD50                                         ; sub_40CD00+65↓j
.text:0040CD50                 cmp     dx, 29h ; ')'
.text:0040CD54                 jnz     short loc_40CD10
.text:0040CD56                 lea     ecx, [ebx+2]
.text:0040CD59
.text:0040CD59 loc_40CD59:                             ; CODE XREF: sub_40CD00+1B↑j
.text:0040CD59                                         ; sub_40CD00+A8↓j
.text:0040CD59                 pop     esi
.text:0040CD5A                 mov     eax, ecx
.text:0040CD5C                 pop     ebx
.text:0040CD5D                 pop     esi
.text:0040CD5E                 retn
.text:0040CD5E ; ---------------------------------------------------------------------------
.text:0040CD5F                 align 10h
.text:0040CD60
.text:0040CD60 loc_40CD60:                             ; CODE XREF: sub_40CD00+27↑j
.text:0040CD60                                         ; sub_40CD00+2D↑j ...
.text:0040CD60                 cmp     word ptr [ebx+2], 28h ; '('
.text:0040CD65                 jnz     short loc_40CD50
.text:0040CD67                 lea     edx, [ebx+2]
.text:0040CD6A                 mov     [esp+0Ch+VarName], edx
.text:0040CD6D                 call    sub_40CD00
.text:0040CD72                 mov     ebx, eax
.text:0040CD74                 jmp     short loc_40CD10
.text:0040CD76 ; ---------------------------------------------------------------------------
.text:0040CD76
.text:0040CD76 loc_40CD76:                             ; CODE XREF: sub_40CD00+21↑j
.text:0040CD76                 mov     eax, ds:dword_41B260
.text:0040CD7B                 test    eax, eax
.text:0040CD7D                 jz      short loc_40CDD7
.text:0040CD7F
.text:0040CD7F loc_40CD7F:                             ; CODE XREF: sub_40CD00+F5↓j
.text:0040CD7F                 add     ebx, 2
.text:0040CD82                 movzx   eax, word ptr [ebx]
.text:0040CD85                 cmp     ax, 21h ; '!'
.text:0040CD89                 jz      short loc_40CDCF
.text:0040CD8B                 mov     ecx, ds:dword_41B260
.text:0040CD91                 test    ecx, ecx
.text:0040CD93                 js      short loc_40CDC9
.text:0040CD95
.text:0040CD95 loc_40CD95:                             ; CODE XREF: sub_40CD00+CD↓j
.text:0040CD95                                         ; sub_40CD00+D5↓j
.text:0040CD95                 cmp     ax, 5Dh ; ']'
.text:0040CD99                 jz      short loc_40CDB8
.text:0040CD9B                 nop
.text:0040CD9C                 lea     esi, [esi+0]
.text:0040CDA0
.text:0040CDA0 loc_40CDA0:                             ; CODE XREF: sub_40CD00+B1↓j
.text:0040CDA0                                         ; sub_40CD00+C2↓j
.text:0040CDA0                 add     ebx, 2
.text:0040CDA3                 mov     ecx, esi
.text:0040CDA5                 test    ax, ax
.text:0040CDA8                 jz      short loc_40CD59
.text:0040CDAA                 movzx   eax, word ptr [ebx]
.text:0040CDAD                 cmp     ax, 5Dh ; ']'
.text:0040CDB1                 jnz     short loc_40CDA0
.text:0040CDB3                 jmp     loc_40CD10
.text:0040CDB8 ; ---------------------------------------------------------------------------
.text:0040CDB8
.text:0040CDB8 loc_40CDB8:                             ; CODE XREF: sub_40CD00+99↑j
.text:0040CDB8                 add     ebx, 2
.text:0040CDBB                 movzx   eax, word ptr [ebx]
.text:0040CDBE                 cmp     ax, 5Dh ; ']'
.text:0040CDC2                 jnz     short loc_40CDA0
.text:0040CDC4                 jmp     loc_40CD10
.text:0040CDC9 ; ---------------------------------------------------------------------------
.text:0040CDC9
.text:0040CDC9 loc_40CDC9:                             ; CODE XREF: sub_40CD00+93↑j
.text:0040CDC9                 cmp     ax, 5Eh ; '^'
.text:0040CDCD                 jnz     short loc_40CD95
.text:0040CDCF
.text:0040CDCF loc_40CDCF:                             ; CODE XREF: sub_40CD00+89↑j
.text:0040CDCF                 add     ebx, 2
.text:0040CDD2                 movzx   eax, word ptr [ebx]
.text:0040CDD5                 jmp     short loc_40CD95
.text:0040CDD7 ; ---------------------------------------------------------------------------
.text:0040CDD7
.text:0040CDD7 loc_40CDD7:                             ; CODE XREF: sub_40CD00+7D↑j
.text:0040CDD7                 mov     [esp+0Ch+VarName], offset sub_40AE20 ; VarName
.text:0040CDDE                 call    getenv
.text:0040CDE3                 test    eax, eax
.text:0040CDE5                 setnz   dl
.text:0040CDE8                 movzx   ecx, dl
.text:0040CDEB                 lea     edx, [ecx+ecx-1]
.text:0040CDEF                 mov     ds:dword_41B260, edx
.text:0040CDF5                 jmp     short loc_40CD7F
.text:0040CDF5 sub_40CD00      endp
.text:0040CDF5
.text:0040CDF5 ; ---------------------------------------------------------------------------
.text:0040CDF7                 align 10h
.text:0040CE00
.text:0040CE00 ; =============== S U B R O U T I N E =======================================
.text:0040CE00
.text:0040CE00
.text:0040CE00 ; int __cdecl sub_40CE00(__int16, wchar_t *, int, int, char, int)
.text:0040CE00 sub_40CE00      proc near               ; CODE XREF: sub_40C240+21D↑p
.text:0040CE00                                         ; sub_40C240+59A↑p ...
.text:0040CE00
.text:0040CE00 String          = dword ptr -3Ch
.text:0040CE00 Source          = dword ptr -38h
.text:0040CE00 var_34          = dword ptr -34h
.text:0040CE00 var_30          = dword ptr -30h
.text:0040CE00 var_2C          = dword ptr -2Ch
.text:0040CE00 var_28          = dword ptr -28h
.text:0040CE00 var_24          = dword ptr -24h
.text:0040CE00 var_20          = dword ptr -20h
.text:0040CE00 var_19          = byte ptr -19h
.text:0040CE00 var_18          = dword ptr -18h
.text:0040CE00 var_14          = dword ptr -14h
.text:0040CE00 arg_0           = word ptr  4
.text:0040CE00 arg_4           = dword ptr  8
.text:0040CE00 arg_8           = dword ptr  0Ch
.text:0040CE00 arg_C           = dword ptr  10h
.text:0040CE00 arg_10          = byte ptr  14h
.text:0040CE00 arg_14          = dword ptr  18h
.text:0040CE00
.text:0040CE00                 push    ebp
.text:0040CE01                 xor     ebp, ebp
.text:0040CE03                 push    edi
.text:0040CE04                 push    esi
.text:0040CE05                 push    ebx
.text:0040CE06                 sub     esp, 2Ch
.text:0040CE09                 lea     edx, [esp+3Ch+var_14]
.text:0040CE0D                 movzx   ebx, [esp+3Ch+arg_0]
.text:0040CE12                 movzx   ecx, [esp+3Ch+arg_10]
.text:0040CE17                 mov     [esp+3Ch+var_24], edx
.text:0040CE1B                 mov     edx, [esp+3Ch+arg_4]
.text:0040CE1F                 mov     [esp+3Ch+var_18], ebx
.text:0040CE23                 mov     [esp+3Ch+var_19], cl
.text:0040CE27                 mov     [esp+3Ch+var_14], 0
.text:0040CE2F                 mov     [esp+3Ch+String], edx ; String
.text:0040CE32                 call    wcslen
.text:0040CE37                 mov     [esp+3Ch+var_28], eax
.text:0040CE3B                 mov     edi, [esp+3Ch+arg_4]
.text:0040CE3F                 add     edi, 2
.text:0040CE42                 mov     [esp+3Ch+var_20], edi
.text:0040CE46                 lea     esi, [esi+0]
.text:0040CE49                 lea     edi, [edi+0]
.text:0040CE50
.text:0040CE50 loc_40CE50:                             ; CODE XREF: sub_40CE00+C2↓j
.text:0040CE50                 movzx   eax, word ptr [edi]
.text:0040CE53                 mov     edx, 0FFFFFFFFh
.text:0040CE58                 test    ax, ax
.text:0040CE5B                 jz      loc_40CF50
.text:0040CE61                 cmp     ax, 5Bh ; '['
.text:0040CE65                 jz      loc_40D3F4
.text:0040CE6B                 cmp     ax, 3Fh ; '?'
.text:0040CE6F                 jz      loc_40D3E0
.text:0040CE75                 cmp     ax, 2Ah ; '*'
.text:0040CE79                 jz      loc_40D3E0
.text:0040CE7F                 cmp     ax, 2Bh ; '+'
.text:0040CE83                 jz      loc_40D3E0
.text:0040CE89                 cmp     ax, 40h ; '@'
.text:0040CE8D                 jz      loc_40D3E0
.text:0040CE93                 cmp     ax, 21h ; '!'
.text:0040CE97                 jz      loc_40D3E0
.text:0040CE9D                 lea     esi, [esi+0]
.text:0040CEA0
.text:0040CEA0 loc_40CEA0:                             ; CODE XREF: sub_40CE00+5E5↓j
.text:0040CEA0                 cmp     ax, 29h ; ')'
.text:0040CEA4                 jz      loc_40CF5A
.text:0040CEAA                 cmp     ax, 7Ch ; '|'
.text:0040CEAE                 lea     edx, [edi+2]
.text:0040CEB1                 jz      short loc_40CEC4
.text:0040CEB3                 lea     esi, [esi+0]
.text:0040CEB9                 lea     edi, [edi+0]
.text:0040CEC0
.text:0040CEC0 loc_40CEC0:                             ; CODE XREF: sub_40CE00+C6↓j
.text:0040CEC0                                         ; sub_40CE00+146↓j ...
.text:0040CEC0                 mov     edi, edx
.text:0040CEC2                 jmp     short loc_40CE50
.text:0040CEC4 ; ---------------------------------------------------------------------------
.text:0040CEC4
.text:0040CEC4 loc_40CEC4:                             ; CODE XREF: sub_40CE00+B1↑j
.text:0040CEC4                 test    ebp, ebp
.text:0040CEC6                 jnz     short loc_40CEC0
.text:0040CEC8                 mov     ecx, [esp+3Ch+var_18]
.text:0040CECC                 mov     edx, [esp+3Ch+var_28]
.text:0040CED0                 sub     ecx, 3Fh ; '?'
.text:0040CED3                 cmp     cx, 1
.text:0040CED7                 jbe     short loc_40CEE6
.text:0040CED9                 mov     ebx, [esp+3Ch+var_20]
.text:0040CEDD                 mov     esi, edi
.text:0040CEDF                 sub     esi, ebx
.text:0040CEE1                 sar     esi, 1
.text:0040CEE3                 lea     edx, [esi+1]
.text:0040CEE6
.text:0040CEE6 loc_40CEE6:                             ; CODE XREF: sub_40CE00+D7↑j
.text:0040CEE6                 test    edx, edx
.text:0040CEE8                 lea     eax, [edx+edx+4]
.text:0040CEEC                 js      short loc_40CF4B
.text:0040CEEE                 cmp     eax, 3
.text:0040CEF1                 jbe     short loc_40CF4B
.text:0040CEF3                 cmp     eax, 1F3Fh
.text:0040CEF8                 ja      short loc_40CF4B
.text:0040CEFA                 mov     [esp+3Ch+String], eax ; Size
.text:0040CEFD                 mov     esi, edi
.text:0040CEFF                 add     edi, 2
.text:0040CF02                 call    malloc
.text:0040CF07                 mov     edx, [esp+3Ch+var_20]
.text:0040CF0B                 mov     ebx, eax
.text:0040CF0D                 sub     esi, edx
.text:0040CF0F                 mov     ecx, esi
.text:0040CF11                 mov     edx, [esp+3Ch+var_20]
.text:0040CF15                 sar     ecx, 1
.text:0040CF17                 mov     [esp+3Ch+var_34], ecx
.text:0040CF1B                 lea     ecx, [eax+4]
.text:0040CF1E                 mov     [esp+3Ch+Source], edx
.text:0040CF22                 mov     [esp+3Ch+String], ecx
.text:0040CF25                 call    sub_4180C0
.text:0040CF2A                 mov     word ptr [esi+eax], 0
.text:0040CF30                 mov     edx, [esp+3Ch+var_24]
.text:0040CF34                 mov     dword ptr [ebx], 0
.text:0040CF3A                 mov     [esp+3Ch+var_24], ebx
.text:0040CF3E                 mov     [edx], ebx
.text:0040CF40                 mov     edx, edi
.text:0040CF42                 mov     [esp+3Ch+var_20], edi
.text:0040CF46                 jmp     loc_40CEC0
.text:0040CF4B ; ---------------------------------------------------------------------------
.text:0040CF4B
.text:0040CF4B loc_40CF4B:                             ; CODE XREF: sub_40CE00+EC↑j
.text:0040CF4B                                         ; sub_40CE00+F1↑j ...
.text:0040CF4B                 mov     edx, 0FFFFFFFFh
.text:0040CF50
.text:0040CF50 loc_40CF50:                             ; CODE XREF: sub_40CE00+5B↑j
.text:0040CF50                                         ; sub_40CE00+2B5↓j ...
.text:0040CF50                 add     esp, 2Ch
.text:0040CF53                 mov     eax, edx
.text:0040CF55                 pop     ebx
.text:0040CF56                 pop     esi
.text:0040CF57                 pop     edi
.text:0040CF58                 pop     ebp
.text:0040CF59                 retn
.text:0040CF5A ; ---------------------------------------------------------------------------
.text:0040CF5A
.text:0040CF5A loc_40CF5A:                             ; CODE XREF: sub_40CE00+A4↑j
.text:0040CF5A                 dec     ebp
.text:0040CF5B                 lea     edx, [edi+2]
.text:0040CF5E                 cmp     ebp, 0FFFFFFFFh
.text:0040CF61                 jnz     loc_40CEC0
.text:0040CF67                 mov     ebp, [esp+3Ch+var_18]
.text:0040CF6B                 mov     edx, [esp+3Ch+var_28]
.text:0040CF6F                 sub     ebp, 3Fh ; '?'
.text:0040CF72                 cmp     bp, 1
.text:0040CF76                 jbe     short loc_40CF85
.text:0040CF78                 mov     eax, [esp+3Ch+var_20]
.text:0040CF7C                 mov     ebx, edi
.text:0040CF7E                 sub     ebx, eax
.text:0040CF80                 sar     ebx, 1
.text:0040CF82                 lea     edx, [ebx+1]
.text:0040CF85
.text:0040CF85 loc_40CF85:                             ; CODE XREF: sub_40CE00+176↑j
.text:0040CF85                 test    edx, edx
.text:0040CF87                 lea     eax, [edx+edx+4]
.text:0040CF8B                 js      short loc_40CF4B
.text:0040CF8D                 cmp     eax, 3
.text:0040CF90                 jbe     short loc_40CF4B
.text:0040CF92                 cmp     eax, 1F3Fh
.text:0040CF97                 ja      short loc_40CF4B
.text:0040CF99                 mov     [esp+3Ch+String], eax ; Size
.text:0040CF9C                 mov     esi, edi
.text:0040CF9E                 call    malloc
.text:0040CFA3                 mov     ebx, eax
.text:0040CFA5                 mov     edx, [esp+3Ch+var_20]
.text:0040CFA9                 mov     eax, [esp+3Ch+var_20]
.text:0040CFAD                 lea     ecx, [ebx+4]
.text:0040CFB0                 mov     [esp+3Ch+String], ecx
.text:0040CFB3                 sub     esi, eax
.text:0040CFB5                 mov     ebp, esi
.text:0040CFB7                 mov     [esp+3Ch+Source], edx
.text:0040CFBB                 sar     ebp, 1
.text:0040CFBD                 mov     [esp+3Ch+var_34], ebp
.text:0040CFC1                 call    sub_4180C0
.text:0040CFC6                 mov     dword ptr [ebx], 0
.text:0040CFCC                 mov     ebp, [esp+3Ch+var_24]
.text:0040CFD0                 mov     word ptr [esi+eax], 0
.text:0040CFD6                 mov     [ebp+0], ebx
.text:0040CFD9                 mov     ecx, [esp+3Ch+var_14]
.text:0040CFDD                 test    ecx, ecx
.text:0040CFDF                 jz      loc_40D3C4
.text:0040CFE5                 cmp     word ptr [edi-2], 29h ; ')'
.text:0040CFEA                 jnz     loc_40D3A8
.text:0040CFF0                 mov     eax, [esp+3Ch+var_18]
.text:0040CFF4                 sub     eax, 21h ; '!'  ; switch 32 cases
.text:0040CFF7                 cmp     eax, 1Fh
.text:0040CFFA                 ja      def_40D000      ; jumptable 0040D000 default case, cases 34-41,44-62
.text:0040D000                 jmp     ds:jpt_40D000[eax*4] ; switch jump
.text:0040D000 ; ---------------------------------------------------------------------------
.text:0040D007                 align 4
.text:0040D008 jpt_40D000      dd offset loc_40D206    ; DATA XREF: sub_40CE00+200↑r
.text:0040D008                 dd offset def_40D000    ; jump table for switch statement
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset loc_40D088
.text:0040D008                 dd offset loc_40D0BF
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset def_40D000
.text:0040D008                 dd offset loc_40D30E
.text:0040D008                 dd offset loc_40D345
.text:0040D088 ; ---------------------------------------------------------------------------
.text:0040D088
.text:0040D088 loc_40D088:                             ; CODE XREF: sub_40CE00+200↑j
.text:0040D088                                         ; DATA XREF: sub_40CE00:jpt_40D000↑o
.text:0040D088                 movzx   ecx, [esp+3Ch+var_19] ; jumptable 0040D000 case 42
.text:0040D08D                 mov     [esp+3Ch+String], edi
.text:0040D090                 mov     edx, [esp+3Ch+arg_14]
.text:0040D094                 mov     ebx, [esp+3Ch+arg_C]
.text:0040D098                 mov     esi, [esp+3Ch+arg_8]
.text:0040D09C                 mov     [esp+3Ch+var_2C], edx
.text:0040D0A0                 mov     [esp+3Ch+var_30], ecx
.text:0040D0A4                 mov     [esp+3Ch+var_34], ebx
.text:0040D0A8                 mov     [esp+3Ch+Source], esi
.text:0040D0AC                 call    sub_40C240
.text:0040D0B1                 xor     edx, edx
.text:0040D0B3                 test    eax, eax
.text:0040D0B5                 jz      loc_40CF50
.text:0040D0BB                 mov     ecx, [esp+3Ch+var_14]
.text:0040D0BF
.text:0040D0BF loc_40D0BF:                             ; CODE XREF: sub_40CE00+200↑j
.text:0040D0BF                                         ; sub_40CE00+3BB↓j
.text:0040D0BF                                         ; DATA XREF: ...
.text:0040D0BF                 mov     ebx, [esp+3Ch+arg_8] ; jumptable 0040D000 case 43
.text:0040D0C3                 cmp     ebx, [esp+3Ch+arg_C]
.text:0040D0C7                 ja      loc_40D1AE
.text:0040D0CD                 mov     ebp, [esp+3Ch+arg_14]
.text:0040D0D1                 mov     esi, [esp+3Ch+arg_14]
.text:0040D0D5                 and     ebp, 1
.text:0040D0D8                 and     esi, 0FFFFFFFBh
.text:0040D0DB
.text:0040D0DB loc_40D0DB:                             ; CODE XREF: sub_40CE00+3A5↓j
.text:0040D0DB                 test    ebp, ebp
.text:0040D0DD                 mov     eax, [esp+3Ch+arg_14]
.text:0040D0E1                 jnz     short loc_40D0E5
.text:0040D0E3                 mov     eax, esi
.text:0040D0E5
.text:0040D0E5 loc_40D0E5:                             ; CODE XREF: sub_40CE00+2E1↑j
.text:0040D0E5                 movzx   edx, [esp+3Ch+var_19]
.text:0040D0EA                 mov     [esp+3Ch+var_2C], eax
.text:0040D0EE                 mov     [esp+3Ch+var_34], ebx
.text:0040D0F2                 mov     [esp+3Ch+var_30], edx
.text:0040D0F6                 mov     edx, [esp+3Ch+arg_8]
.text:0040D0FA                 mov     [esp+3Ch+Source], edx
.text:0040D0FE                 lea     edx, [ecx+4]
.text:0040D101                 mov     [esp+3Ch+String], edx
.text:0040D104                 call    sub_40C240
.text:0040D109                 test    eax, eax
.text:0040D10B                 jnz     loc_40D198
.text:0040D111                 test    ebp, ebp
.text:0040D113                 mov     eax, [esp+3Ch+arg_14]
.text:0040D117                 jnz     short loc_40D11B
.text:0040D119                 mov     eax, esi
.text:0040D11B
.text:0040D11B loc_40D11B:                             ; CODE XREF: sub_40CE00+317↑j
.text:0040D11B                 cmp     ebx, [esp+3Ch+arg_8]
.text:0040D11F                 mov     [esp+3Ch+var_2C], eax
.text:0040D123                 jz      loc_40D1F7
.text:0040D129                 xor     edx, edx
.text:0040D12B                 cmp     word ptr [ebx-2], 2Fh ; '/'
.text:0040D130                 jz      loc_40D1E0
.text:0040D136
.text:0040D136 loc_40D136:                             ; CODE XREF: sub_40CE00+3EA↓j
.text:0040D136                                         ; sub_40CE00+3F2↓j
.text:0040D136                 movzx   eax, dl
.text:0040D139
.text:0040D139 loc_40D139:                             ; CODE XREF: sub_40CE00+401↓j
.text:0040D139                 mov     [esp+3Ch+var_30], eax
.text:0040D13D                 mov     edx, [esp+3Ch+arg_C]
.text:0040D141                 mov     [esp+3Ch+Source], ebx
.text:0040D145                 mov     [esp+3Ch+String], edi
.text:0040D148                 mov     [esp+3Ch+var_34], edx
.text:0040D14C                 call    sub_40C240
.text:0040D151                 test    eax, eax
.text:0040D153                 jz      short loc_40D1C6
.text:0040D155                 cmp     ebx, [esp+3Ch+arg_8]
.text:0040D159                 jz      short loc_40D198
.text:0040D15B                 mov     eax, [esp+3Ch+arg_14]
.text:0040D15F                 test    al, 1
.text:0040D161                 jnz     short loc_40D165
.text:0040D163                 mov     eax, esi
.text:0040D165
.text:0040D165 loc_40D165:                             ; CODE XREF: sub_40CE00+361↑j
.text:0040D165                 mov     [esp+3Ch+var_2C], eax
.text:0040D169                 xor     edx, edx
.text:0040D16B                 cmp     word ptr [ebx-2], 2Fh ; '/'
.text:0040D170                 jz      short loc_40D1D0
.text:0040D172
.text:0040D172 loc_40D172:                             ; CODE XREF: sub_40CE00+3DA↓j
.text:0040D172                                         ; sub_40CE00+3DE↓j
.text:0040D172                 mov     [esp+3Ch+Source], ebx
.text:0040D176                 movzx   ecx, dl
.text:0040D179                 mov     edx, [esp+3Ch+arg_4]
.text:0040D17D                 mov     [esp+3Ch+var_30], ecx
.text:0040D181                 mov     ecx, [esp+3Ch+arg_C]
.text:0040D185                 sub     edx, 2
.text:0040D188                 mov     [esp+3Ch+String], edx
.text:0040D18B                 mov     [esp+3Ch+var_34], ecx
.text:0040D18F                 call    sub_40C240
.text:0040D194                 test    eax, eax
.text:0040D196                 jz      short loc_40D1C6
.text:0040D198
.text:0040D198 loc_40D198:                             ; CODE XREF: sub_40CE00+30B↑j
.text:0040D198                                         ; sub_40CE00+359↑j
.text:0040D198                 add     ebx, 2
.text:0040D19B                 cmp     ebx, [esp+3Ch+arg_C]
.text:0040D19F                 ja      short loc_40D1AA
.text:0040D1A1                 mov     ecx, [esp+3Ch+var_14]
.text:0040D1A5                 jmp     loc_40D0DB
.text:0040D1AA ; ---------------------------------------------------------------------------
.text:0040D1AA
.text:0040D1AA loc_40D1AA:                             ; CODE XREF: sub_40CE00+39F↑j
.text:0040D1AA                 mov     ecx, [esp+3Ch+var_14]
.text:0040D1AE
.text:0040D1AE loc_40D1AE:                             ; CODE XREF: sub_40CE00+2C7↑j
.text:0040D1AE                 mov     ecx, [ecx]
.text:0040D1B0                 mov     edx, 1
.text:0040D1B5                 test    ecx, ecx
.text:0040D1B7                 mov     [esp+3Ch+var_14], ecx
.text:0040D1BB                 jnz     loc_40D0BF      ; jumptable 0040D000 case 43
.text:0040D1C1                 jmp     loc_40CF50
.text:0040D1C6 ; ---------------------------------------------------------------------------
.text:0040D1C6
.text:0040D1C6 loc_40D1C6:                             ; CODE XREF: sub_40CE00+353↑j
.text:0040D1C6                                         ; sub_40CE00+396↑j
.text:0040D1C6                 xor     edx, edx
.text:0040D1C8                 jmp     loc_40CF50
.text:0040D1C8 ; ---------------------------------------------------------------------------
.text:0040D1CD                 align 10h
.text:0040D1D0
.text:0040D1D0 loc_40D1D0:                             ; CODE XREF: sub_40CE00+370↑j
.text:0040D1D0                 mov     ecx, [esp+3Ch+arg_14]
.text:0040D1D4                 and     ecx, 5
.text:0040D1D7                 cmp     ecx, 5
.text:0040D1DA                 jnz     short loc_40D172
.text:0040D1DC                 mov     dl, 1
.text:0040D1DE                 jmp     short loc_40D172
.text:0040D1E0 ; ---------------------------------------------------------------------------
.text:0040D1E0
.text:0040D1E0 loc_40D1E0:                             ; CODE XREF: sub_40CE00+330↑j
.text:0040D1E0                 mov     ecx, [esp+3Ch+arg_14]
.text:0040D1E4                 and     ecx, 5
.text:0040D1E7                 cmp     ecx, 5
.text:0040D1EA                 jnz     loc_40D136
.text:0040D1F0                 mov     dl, 1
.text:0040D1F2                 jmp     loc_40D136
.text:0040D1F7 ; ---------------------------------------------------------------------------
.text:0040D1F7
.text:0040D1F7 loc_40D1F7:                             ; CODE XREF: sub_40CE00+323↑j
.text:0040D1F7                 xor     eax, eax
.text:0040D1F9                 cmp     [esp+3Ch+var_19], 0
.text:0040D1FE                 setnz   al
.text:0040D201                 jmp     loc_40D139
.text:0040D206 ; ---------------------------------------------------------------------------
.text:0040D206
.text:0040D206 loc_40D206:                             ; CODE XREF: sub_40CE00+200↑j
.text:0040D206                                         ; DATA XREF: sub_40CE00:jpt_40D000↑o
.text:0040D206                 mov     ebx, [esp+3Ch+arg_8] ; jumptable 0040D000 case 33
.text:0040D20A                 cmp     ebx, [esp+3Ch+arg_C]
.text:0040D20E                 ja      loc_40D2B1
.text:0040D214                 mov     ebp, [esp+3Ch+arg_14]
.text:0040D218                 and     ebp, 0FFFFFFFBh
.text:0040D21B
.text:0040D21B loc_40D21B:                             ; CODE XREF: sub_40CE00+4AC↓j
.text:0040D21B                 test    ecx, ecx
.text:0040D21D                 mov     esi, ecx
.text:0040D21F                 jz      short loc_40D25D
.text:0040D221
.text:0040D221 loc_40D221:                             ; CODE XREF: sub_40CE00+45B↓j
.text:0040D221                 mov     eax, [esp+3Ch+arg_14]
.text:0040D225                 test    al, 1
.text:0040D227                 jnz     short loc_40D22B
.text:0040D229                 mov     eax, ebp
.text:0040D22B
.text:0040D22B loc_40D22B:                             ; CODE XREF: sub_40CE00+427↑j
.text:0040D22B                 movzx   ecx, [esp+3Ch+var_19]
.text:0040D230                 mov     [esp+3Ch+var_2C], eax
.text:0040D234                 mov     edx, [esp+3Ch+arg_8]
.text:0040D238                 mov     [esp+3Ch+var_34], ebx
.text:0040D23C                 mov     [esp+3Ch+var_30], ecx
.text:0040D240                 lea     ecx, [esi+4]
.text:0040D243                 mov     [esp+3Ch+Source], edx
.text:0040D247                 mov     [esp+3Ch+String], ecx
.text:0040D24A                 call    sub_40C240
.text:0040D24F                 test    eax, eax
.text:0040D251                 jz      loc_40D2D7
.text:0040D257                 mov     esi, [esi]
.text:0040D259                 test    esi, esi
.text:0040D25B                 jnz     short loc_40D221
.text:0040D25D
.text:0040D25D loc_40D25D:                             ; CODE XREF: sub_40CE00+41F↑j
.text:0040D25D                                         ; sub_40CE00+4DB↓j
.text:0040D25D                 mov     eax, [esp+3Ch+arg_14]
.text:0040D261                 test    al, 1
.text:0040D263                 jnz     short loc_40D267
.text:0040D265                 mov     eax, ebp
.text:0040D267
.text:0040D267 loc_40D267:                             ; CODE XREF: sub_40CE00+463↑j
.text:0040D267                 cmp     ebx, [esp+3Ch+arg_8]
.text:0040D26B                 mov     [esp+3Ch+var_2C], eax
.text:0040D26F                 jz      short loc_40D2CB
.text:0040D271                 xor     edx, edx
.text:0040D273                 cmp     word ptr [ebx-2], 2Fh ; '/'
.text:0040D278                 jz      short loc_40D2BB
.text:0040D27A
.text:0040D27A loc_40D27A:                             ; CODE XREF: sub_40CE00+4C5↓j
.text:0040D27A                                         ; sub_40CE00+4C9↓j
.text:0040D27A                 movzx   eax, dl
.text:0040D27D
.text:0040D27D loc_40D27D:                             ; CODE XREF: sub_40CE00+4D5↓j
.text:0040D27D                 mov     [esp+3Ch+var_30], eax
.text:0040D281                 mov     edx, [esp+3Ch+arg_C]
.text:0040D285                 mov     [esp+3Ch+Source], ebx
.text:0040D289                 mov     [esp+3Ch+String], edi
.text:0040D28C                 mov     [esp+3Ch+var_34], edx
.text:0040D290                 call    sub_40C240
.text:0040D295                 xor     edx, edx
.text:0040D297                 test    eax, eax
.text:0040D299                 jz      loc_40CF50
.text:0040D29F
.text:0040D29F loc_40D29F:                             ; CODE XREF: sub_40CE00+4D9↓j
.text:0040D29F                 add     ebx, 2
.text:0040D2A2                 cmp     ebx, [esp+3Ch+arg_C]
.text:0040D2A6                 ja      short loc_40D2B1
.text:0040D2A8                 mov     ecx, [esp+3Ch+var_14]
.text:0040D2AC                 jmp     loc_40D21B
.text:0040D2B1 ; ---------------------------------------------------------------------------
.text:0040D2B1
.text:0040D2B1 loc_40D2B1:                             ; CODE XREF: sub_40CE00+40E↑j
.text:0040D2B1                                         ; sub_40CE00+4A6↑j
.text:0040D2B1                 mov     edx, 1
.text:0040D2B6                 jmp     loc_40CF50
.text:0040D2BB ; ---------------------------------------------------------------------------
.text:0040D2BB
.text:0040D2BB loc_40D2BB:                             ; CODE XREF: sub_40CE00+478↑j
.text:0040D2BB                 mov     esi, [esp+3Ch+arg_14]
.text:0040D2BF                 and     esi, 5
.text:0040D2C2                 cmp     esi, 5
.text:0040D2C5                 jnz     short loc_40D27A
.text:0040D2C7                 mov     dl, 1
.text:0040D2C9                 jmp     short loc_40D27A
.text:0040D2CB ; ---------------------------------------------------------------------------
.text:0040D2CB
.text:0040D2CB loc_40D2CB:                             ; CODE XREF: sub_40CE00+46F↑j
.text:0040D2CB                 xor     eax, eax
.text:0040D2CD                 cmp     [esp+3Ch+var_19], 0
.text:0040D2D2                 setnz   al
.text:0040D2D5                 jmp     short loc_40D27D
.text:0040D2D7 ; ---------------------------------------------------------------------------
.text:0040D2D7
.text:0040D2D7 loc_40D2D7:                             ; CODE XREF: sub_40CE00+451↑j
.text:0040D2D7                 test    esi, esi
.text:0040D2D9                 jnz     short loc_40D29F
.text:0040D2DB                 jmp     short loc_40D25D
.text:0040D2DB ; ---------------------------------------------------------------------------
.text:0040D2DD                 align 10h
.text:0040D2E0
.text:0040D2E0 def_40D000:                             ; CODE XREF: sub_40CE00+1FA↑j
.text:0040D2E0                                         ; sub_40CE00+200↑j
.text:0040D2E0                                         ; DATA XREF: ...
.text:0040D2E0                 mov     edi, offset aInvalidExtende ; jumptable 0040D000 default case, cases 34-41,44-62
.text:0040D2E5                 mov     edx, 0FFFFFFFFh
.text:0040D2EA                 test    edi, edi
.text:0040D2EC                 jz      loc_40CF50
.text:0040D2F2                 mov     [esp+3Ch+var_34], 493h
.text:0040D2FA                 mov     [esp+3Ch+Source], offset aCoreutils530Sr_2 ; "../../coreutils-5.3.0-src/lib/fnmatch_l"...
.text:0040D302                 mov     [esp+3Ch+String], offset aInvalidExtende_0 ; "! \"Invalid extended matching operator"...
.text:0040D309
.text:0040D309 loc_40D309:                             ; CODE XREF: sub_40CE00+5BF↓j
.text:0040D309                                         ; sub_40CE00+5DB↓j
.text:0040D309                 call    _assert
.text:0040D30E ; ---------------------------------------------------------------------------
.text:0040D30E
.text:0040D30E loc_40D30E:                             ; CODE XREF: sub_40CE00+200↑j
.text:0040D30E                                         ; DATA XREF: sub_40CE00:jpt_40D000↑o
.text:0040D30E                 movzx   ebx, [esp+3Ch+var_19] ; jumptable 0040D000 case 63
.text:0040D313                 mov     [esp+3Ch+String], edi
.text:0040D316                 mov     edx, [esp+3Ch+arg_14]
.text:0040D31A                 mov     esi, [esp+3Ch+arg_C]
.text:0040D31E                 mov     ebp, [esp+3Ch+arg_8]
.text:0040D322                 mov     [esp+3Ch+var_2C], edx
.text:0040D326                 mov     [esp+3Ch+var_30], ebx
.text:0040D32A                 mov     [esp+3Ch+var_34], esi
.text:0040D32E                 mov     [esp+3Ch+Source], ebp
.text:0040D332                 call    sub_40C240
.text:0040D337                 xor     edx, edx
.text:0040D339                 test    eax, eax
.text:0040D33B                 jz      loc_40CF50
.text:0040D341                 mov     ecx, [esp+3Ch+var_14]
.text:0040D345
.text:0040D345 loc_40D345:                             ; CODE XREF: sub_40CE00+200↑j
.text:0040D345                                         ; sub_40CE00+5A1↓j
.text:0040D345                                         ; DATA XREF: ...
.text:0040D345                 mov     [esp+3Ch+Source], edi ; jumptable 0040D000 case 64
.text:0040D349                 lea     ebp, [ecx+4]
.text:0040D34C                 mov     [esp+3Ch+String], ebp ; Destination
.text:0040D34F                 call    wcscat
.text:0040D354                 mov     edx, eax
.text:0040D356                 mov     eax, [esp+3Ch+arg_14]
.text:0040D35A                 test    al, 1
.text:0040D35C                 jnz     short loc_40D361
.text:0040D35E                 and     eax, 0FFFFFFFBh
.text:0040D361
.text:0040D361 loc_40D361:                             ; CODE XREF: sub_40CE00+55C↑j
.text:0040D361                 movzx   ebx, [esp+3Ch+var_19]
.text:0040D366                 mov     [esp+3Ch+String], edx
.text:0040D369                 mov     esi, [esp+3Ch+arg_C]
.text:0040D36D                 mov     [esp+3Ch+var_2C], eax
.text:0040D371                 mov     ecx, [esp+3Ch+arg_8]
.text:0040D375                 mov     [esp+3Ch+var_30], ebx
.text:0040D379                 mov     [esp+3Ch+var_34], esi
.text:0040D37D                 mov     [esp+3Ch+Source], ecx
.text:0040D381                 call    sub_40C240
.text:0040D386                 xor     edx, edx
.text:0040D388                 test    eax, eax
.text:0040D38A                 jz      loc_40CF50
.text:0040D390                 mov     edx, [esp+3Ch+var_14]
.text:0040D394                 mov     ecx, [edx]
.text:0040D396                 mov     edx, 1
.text:0040D39B                 mov     [esp+3Ch+var_14], ecx
.text:0040D39F                 test    ecx, ecx
.text:0040D3A1                 jnz     short loc_40D345 ; jumptable 0040D000 case 64
.text:0040D3A3                 jmp     loc_40CF50
.text:0040D3A8 ; ---------------------------------------------------------------------------
.text:0040D3A8
.text:0040D3A8 loc_40D3A8:                             ; CODE XREF: sub_40CE00+1EA↑j
.text:0040D3A8                 mov     [esp+3Ch+var_34], 439h
.text:0040D3B0                 mov     [esp+3Ch+Source], offset aCoreutils530Sr_2 ; "../../coreutils-5.3.0-src/lib/fnmatch_l"...
.text:0040D3B8                 mov     [esp+3Ch+String], offset aP1L ; "p[-1] == L(')')"
.text:0040D3BF                 jmp     loc_40D309
.text:0040D3C4 ; ---------------------------------------------------------------------------
.text:0040D3C4
.text:0040D3C4 loc_40D3C4:                             ; CODE XREF: sub_40CE00+1DF↑j
.text:0040D3C4                 mov     [esp+3Ch+var_34], 438h
.text:0040D3CC                 mov     [esp+3Ch+Source], offset aCoreutils530Sr_2 ; "../../coreutils-5.3.0-src/lib/fnmatch_l"...
.text:0040D3D4                 mov     [esp+3Ch+String], offset aListNull ; "list != NULL"
.text:0040D3DB                 jmp     loc_40D309
.text:0040D3E0 ; ---------------------------------------------------------------------------
.text:0040D3E0
.text:0040D3E0 loc_40D3E0:                             ; CODE XREF: sub_40CE00+6F↑j
.text:0040D3E0                                         ; sub_40CE00+79↑j ...
.text:0040D3E0                 cmp     word ptr [edi+2], 28h ; '('
.text:0040D3E5                 jnz     loc_40CEA0
.text:0040D3EB                 inc     ebp
.text:0040D3EC
.text:0040D3EC loc_40D3EC:                             ; CODE XREF: sub_40CE00+63A↓j
.text:0040D3EC                                         ; sub_40CE00+648↓j
.text:0040D3EC                 lea     edx, [edi+2]
.text:0040D3EF                 jmp     loc_40CEC0
.text:0040D3F4 ; ---------------------------------------------------------------------------
.text:0040D3F4
.text:0040D3F4 loc_40D3F4:                             ; CODE XREF: sub_40CE00+65↑j
.text:0040D3F4                 mov     eax, ds:dword_41B260
.text:0040D3F9                 test    eax, eax
.text:0040D3FB                 jz      short loc_40D458
.text:0040D3FD
.text:0040D3FD loc_40D3FD:                             ; CODE XREF: sub_40CE00+676↓j
.text:0040D3FD                 add     edi, 2
.text:0040D400                 movzx   eax, word ptr [edi]
.text:0040D403                 cmp     ax, 21h ; '!'
.text:0040D407                 jz      short loc_40D450
.text:0040D409                 mov     esi, ds:dword_41B260
.text:0040D40F                 test    esi, esi
.text:0040D411                 js      short loc_40D44A
.text:0040D413
.text:0040D413 loc_40D413:                             ; CODE XREF: sub_40CE00+64E↓j
.text:0040D413                                         ; sub_40CE00+656↓j
.text:0040D413                 cmp     ax, 5Dh ; ']'
.text:0040D417                 jz      short loc_40D43C
.text:0040D419                 lea     esi, [esi+0]
.text:0040D420
.text:0040D420 loc_40D420:                             ; CODE XREF: sub_40CE00+638↓j
.text:0040D420                                         ; sub_40CE00+646↓j
.text:0040D420                 add     edi, 2
.text:0040D423                 mov     edx, 0FFFFFFFFh
.text:0040D428                 test    ax, ax
.text:0040D42B                 jz      loc_40CF50
.text:0040D431                 movzx   eax, word ptr [edi]
.text:0040D434                 cmp     ax, 5Dh ; ']'
.text:0040D438                 jnz     short loc_40D420
.text:0040D43A                 jmp     short loc_40D3EC
.text:0040D43C ; ---------------------------------------------------------------------------
.text:0040D43C
.text:0040D43C loc_40D43C:                             ; CODE XREF: sub_40CE00+617↑j
.text:0040D43C                 add     edi, 2
.text:0040D43F                 movzx   eax, word ptr [edi]
.text:0040D442                 cmp     ax, 5Dh ; ']'
.text:0040D446                 jnz     short loc_40D420
.text:0040D448                 jmp     short loc_40D3EC
.text:0040D44A ; ---------------------------------------------------------------------------
.text:0040D44A
.text:0040D44A loc_40D44A:                             ; CODE XREF: sub_40CE00+611↑j
.text:0040D44A                 cmp     ax, 5Eh ; '^'
.text:0040D44E                 jnz     short loc_40D413
.text:0040D450
.text:0040D450 loc_40D450:                             ; CODE XREF: sub_40CE00+607↑j
.text:0040D450                 add     edi, 2
.text:0040D453                 movzx   eax, word ptr [edi]
.text:0040D456                 jmp     short loc_40D413
.text:0040D458 ; ---------------------------------------------------------------------------
.text:0040D458
.text:0040D458 loc_40D458:                             ; CODE XREF: sub_40CE00+5FB↑j
.text:0040D458                 mov     [esp+3Ch+String], offset sub_40AE20 ; VarName
.text:0040D45F                 call    getenv
.text:0040D464                 test    eax, eax
.text:0040D466                 setnz   cl
.text:0040D469                 movzx   edx, cl
.text:0040D46C                 lea     esi, [edx+edx-1]
.text:0040D470                 mov     ds:dword_41B260, esi
.text:0040D476                 jmp     short loc_40D3FD
.text:0040D476 sub_40CE00      endp
.text:0040D476
.text:0040D476 ; ---------------------------------------------------------------------------
.text:0040D478                 align 10h
.text:0040D480 dword_40D480    dd 8B3CEC83h, 41C3F415h, 24748900h, 24748B30h, 245C8948h
.text:0040D480                                         ; DATA XREF: sub_408C40:loc_408CB1↑o
.text:0040D480                 dd 247C892Ch, 246C8934h, 13A8338h, 548B4D75h, 14894424h
.text:0040D480                 dd 0B242E824h, 74890000h, 7C8B1024h, 0EEC14424h, 245C8B02h
.text:0040D480                 dd 1E68340h, 0C247489h, 89380C8Dh, 8908244Ch, 8904247Ch
.text:0040D480                 dd 59E8241Ch, 89FFFFD9h
.text:0040D4D8                 db 0C2h
.text:0040D4D9 ; ---------------------------------------------------------------------------
.text:0040D4D9
.text:0040D4D9 loc_40D4D9:                             ; CODE XREF: .text:0040D523↓j
.text:0040D4D9                                         ; .text:0040D553↓j ...
.text:0040D4D9                 mov     ebx, [esp+2Ch]
.text:0040D4DD                 mov     eax, edx
.text:0040D4DF                 mov     esi, [esp+30h]
.text:0040D4E3                 mov     edi, [esp+34h]
.text:0040D4E7                 mov     ebp, [esp+38h]
.text:0040D4EB                 add     esp, 3Ch
.text:0040D4EE                 retn
.text:0040D4EF ; ---------------------------------------------------------------------------
.text:0040D4EF                 mov     dword ptr [esp+28h], 0
.text:0040D4F7                 lea     edx, [esp+28h]
.text:0040D4FB                 lea     eax, [esp+40h]
.text:0040D4FF                 mov     [esp+0Ch], edx
.text:0040D503                 mov     dword ptr [esp+8], 0
.text:0040D50B                 mov     [esp+4], eax
.text:0040D50F                 mov     dword ptr [esp], 0
.text:0040D516                 call    mbsrtowcs
.text:0040D51B                 mov     edi, eax
.text:0040D51D                 mov     edx, 0FFFFFFFFh
.text:0040D522                 inc     edi
.text:0040D523                 jz      short loc_40D4D9
.text:0040D525                 mov     dword ptr [esp+8], 0
.text:0040D52D                 lea     ecx, [esp+44h]
.text:0040D531                 lea     ebx, [esp+28h]
.text:0040D535                 mov     [esp+0Ch], ebx
.text:0040D539                 mov     [esp+4], ecx
.text:0040D53D                 mov     dword ptr [esp], 0
.text:0040D544                 call    mbsrtowcs
.text:0040D549                 inc     eax
.text:0040D54A                 mov     edx, 0FFFFFFFFh
.text:0040D54F                 mov     [esp+24h], eax
.text:0040D553                 jz      short loc_40D4D9
.text:0040D555                 lea     ebp, [eax+edi]
.text:0040D558                 cmp     edi, ebp
.text:0040D55A                 ja      loc_40D62C
.text:0040D560                 test    ebp, ebp
.text:0040D562                 js      loc_40D62C
.text:0040D568                 cmp     ebp, 7CFh
.text:0040D56E                 ja      loc_40D614
.text:0040D574                 lea     edx, [ebp+ebp+0]
.text:0040D578                 mov     [esp], edx
.text:0040D57B                 call    malloc
.text:0040D580                 mov     [esp+20h], eax
.text:0040D584
.text:0040D584 loc_40D584:                             ; CODE XREF: .text:0040D626↓j
.text:0040D584                 mov     [esp+8], edi
.text:0040D588                 lea     eax, [esp+28h]
.text:0040D58C                 mov     edx, [esp+20h]
.text:0040D590                 mov     [esp+0Ch], eax
.text:0040D594                 lea     ecx, [esp+40h]
.text:0040D598                 mov     eax, [esp+20h]
.text:0040D59C                 mov     [esp+4], ecx
.text:0040D5A0                 lea     ebx, [edx+edi*2]
.text:0040D5A3                 lea     edi, [esp+28h]
.text:0040D5A7                 mov     [esp], eax
.text:0040D5AA                 call    mbsrtowcs
.text:0040D5AF                 mov     [esp+0Ch], edi
.text:0040D5B3                 mov     edx, [esp+24h]
.text:0040D5B7                 lea     ecx, [esp+44h]
.text:0040D5BB                 mov     [esp+4], ecx
.text:0040D5BF                 mov     [esp], ebx
.text:0040D5C2                 mov     [esp+8], edx
.text:0040D5C6                 call    mbsrtowcs
.text:0040D5CB                 mov     [esp+10h], esi
.text:0040D5CF                 mov     eax, [esp+24h]
.text:0040D5D3                 shr     esi, 2
.text:0040D5D6                 mov     [esp+4], ebx
.text:0040D5DA                 and     esi, 1
.text:0040D5DD                 lea     edi, [ebx+eax*2-2]
.text:0040D5E1                 mov     [esp+0Ch], esi
.text:0040D5E5                 mov     esi, [esp+20h]
.text:0040D5E9                 mov     [esp+8], edi
.text:0040D5ED                 mov     [esp], esi
.text:0040D5F0                 call    sub_40C240
.text:0040D5F5                 cmp     ebp, 7CFh
.text:0040D5FB                 mov     ebx, eax
.text:0040D5FD                 ja      short loc_40D606
.text:0040D5FF
.text:0040D5FF loc_40D5FF:                             ; CODE XREF: .text:0040D612↓j
.text:0040D5FF                 mov     edx, ebx
.text:0040D601                 jmp     loc_40D4D9
.text:0040D606 ; ---------------------------------------------------------------------------
.text:0040D606
.text:0040D606 loc_40D606:                             ; CODE XREF: .text:0040D5FD↑j
.text:0040D606                 mov     ebp, [esp+20h]
.text:0040D60A                 mov     [esp], ebp
.text:0040D60D                 call    free
.text:0040D612                 jmp     short loc_40D5FF
.text:0040D614 ; ---------------------------------------------------------------------------
.text:0040D614
.text:0040D614 loc_40D614:                             ; CODE XREF: .text:0040D56E↑j
.text:0040D614                 lea     ecx, [ebp+ebp+0]
.text:0040D618                 mov     [esp], ecx
.text:0040D61B                 call    malloc
.text:0040D620                 mov     [esp+20h], eax
.text:0040D624                 test    eax, eax
.text:0040D626                 jnz     loc_40D584
.text:0040D62C
.text:0040D62C loc_40D62C:                             ; CODE XREF: .text:0040D55A↑j
.text:0040D62C                                         ; .text:0040D562↑j
.text:0040D62C                 call    _errno
.text:0040D631                 mov     dword ptr [eax], 0Ch
.text:0040D637                 mov     edx, 0FFFFFFFFh
.text:0040D63C                 jmp     loc_40D4D9
.text:0040D641 ; ---------------------------------------------------------------------------
.text:0040D641                 jmp     short sub_40D650
.text:0040D641 ; ---------------------------------------------------------------------------
.text:0040D643                 align 10h
.text:0040D650
.text:0040D650 ; =============== S U B R O U T I N E =======================================
.text:0040D650
.text:0040D650
.text:0040D650 sub_40D650      proc near               ; CODE XREF: sub_40C240+958↑p
.text:0040D650                                         ; .text:0040D641↑j
.text:0040D650
.text:0040D650 name            = dword ptr -82Ch
.text:0040D650 var_81C         = byte ptr -81Ch
.text:0040D650 var_1C          = byte ptr -1Ch
.text:0040D650 arg_0           = dword ptr  4
.text:0040D650
.text:0040D650                 push    esi
.text:0040D651                 push    ebx
.text:0040D652                 sub     esp, 824h
.text:0040D658                 mov     edx, [esp+82Ch+arg_0]
.text:0040D65F                 lea     ecx, [esp+82Ch+var_81C]
.text:0040D663                 mov     esi, ecx
.text:0040D665                 lea     ebx, [esp+82Ch+var_1C]
.text:0040D66C                 movzx   eax, word ptr [edx]
.text:0040D66F                 nop
.text:0040D670
.text:0040D670 loc_40D670:                             ; CODE XREF: sub_40D650+57↓j
.text:0040D670                 movzx   eax, ax
.text:0040D673                 cmp     eax, 5Fh ; '_'
.text:0040D676                 jg      short loc_40D6C4
.text:0040D678                 cmp     eax, 41h ; 'A'
.text:0040D67B                 jge     short loc_40D692
.text:0040D67D                 cmp     eax, 20h ; ' '
.text:0040D680                 jl      short loc_40D6C0
.text:0040D682                 cmp     eax, 23h ; '#'
.text:0040D685                 jle     short loc_40D692
.text:0040D687                 sub     eax, 25h ; '%'
.text:0040D68A                 cmp     eax, 1Ah
.text:0040D68D                 lea     esi, [esi+0]
.text:0040D690
.text:0040D690 loc_40D690:                             ; CODE XREF: sub_40D650+7A↓j
.text:0040D690                 ja      short loc_40D6C0
.text:0040D692
.text:0040D692 loc_40D692:                             ; CODE XREF: sub_40D650+2B↑j
.text:0040D692                                         ; sub_40D650+35↑j
.text:0040D692                 xor     eax, eax
.text:0040D694                 cmp     ecx, ebx
.text:0040D696                 jz      short loc_40D6B7
.text:0040D698                 movzx   eax, byte ptr [edx]
.text:0040D69B                 add     edx, 2
.text:0040D69E                 mov     [ecx], al
.text:0040D6A0                 inc     ecx
.text:0040D6A1                 movzx   eax, word ptr [edx]
.text:0040D6A4                 test    ax, ax
.text:0040D6A7                 jnz     short loc_40D670
.text:0040D6A9                 mov     byte ptr [ecx], 0
.text:0040D6AC                 mov     [esp+82Ch+name], esi ; name
.text:0040D6AF                 call    wctype
.text:0040D6B4                 movzx   eax, ax
.text:0040D6B7
.text:0040D6B7 loc_40D6B7:                             ; CODE XREF: sub_40D650+46↑j
.text:0040D6B7                                         ; sub_40D650+72↓j
.text:0040D6B7                 add     esp, 824h
.text:0040D6BD                 pop     ebx
.text:0040D6BE                 pop     esi
.text:0040D6BF                 retn
.text:0040D6C0 ; ---------------------------------------------------------------------------
.text:0040D6C0
.text:0040D6C0 loc_40D6C0:                             ; CODE XREF: sub_40D650+30↑j
.text:0040D6C0                                         ; sub_40D650:loc_40D690↑j
.text:0040D6C0                 xor     eax, eax
.text:0040D6C2                 jmp     short loc_40D6B7
.text:0040D6C4 ; ---------------------------------------------------------------------------
.text:0040D6C4
.text:0040D6C4 loc_40D6C4:                             ; CODE XREF: sub_40D650+26↑j
.text:0040D6C4                 sub     eax, 61h ; 'a'
.text:0040D6C7                 cmp     eax, 1Dh
.text:0040D6CA                 jmp     short loc_40D690
.text:0040D6CA sub_40D650      endp
.text:0040D6CA
.text:0040D6CA ; ---------------------------------------------------------------------------
.text:0040D6CC                 align 20h
.text:0040D6E0 aCoreutils530Sr_3 db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:0040D6E0                                         ; DATA XREF: sub_40D750+C79↓o
.text:0040D708                 align 20h
.text:0040D720 a0StrtolBaseStr_0 db '0 <= strtol_base && strtol_base <= 36',0
.text:0040D720                                         ; DATA XREF: sub_40D750+C81↓o
.text:0040D746                 align 10h
.text:0040D750
.text:0040D750 ; =============== S U B R O U T I N E =======================================
.text:0040D750
.text:0040D750
.text:0040D750 ; int __cdecl sub_40D750(int, int, int, int, char *Str)
.text:0040D750 sub_40D750      proc near               ; CODE XREF: sub_40A6A0+9F↑p
.text:0040D750
.text:0040D750 C               = dword ptr -13Ch
.text:0040D750 Type            = dword ptr -138h
.text:0040D750 Radix           = dword ptr -134h
.text:0040D750 var_130         = dword ptr -130h
.text:0040D750 var_124         = dword ptr -124h
.text:0040D750 var_120         = dword ptr -120h
.text:0040D750 var_11C         = dword ptr -11Ch
.text:0040D750 var_118         = dword ptr -118h
.text:0040D750 var_114         = dword ptr -114h
.text:0040D750 var_110         = dword ptr -110h
.text:0040D750 var_10C         = dword ptr -10Ch
.text:0040D750 var_108         = dword ptr -108h
.text:0040D750 var_104         = dword ptr -104h
.text:0040D750 var_100         = dword ptr -100h
.text:0040D750 var_F8          = dword ptr -0F8h
.text:0040D750 var_F4          = dword ptr -0F4h
.text:0040D750 var_F0          = dword ptr -0F0h
.text:0040D750 var_EC          = dword ptr -0ECh
.text:0040D750 var_E8          = dword ptr -0E8h
.text:0040D750 var_E4          = dword ptr -0E4h
.text:0040D750 var_E0          = dword ptr -0E0h
.text:0040D750 var_D8          = dword ptr -0D8h
.text:0040D750 var_D4          = dword ptr -0D4h
.text:0040D750 var_D0          = dword ptr -0D0h
.text:0040D750 var_CC          = dword ptr -0CCh
.text:0040D750 var_C8          = dword ptr -0C8h
.text:0040D750 var_C4          = dword ptr -0C4h
.text:0040D750 var_C0          = dword ptr -0C0h
.text:0040D750 var_B8          = dword ptr -0B8h
.text:0040D750 var_B4          = dword ptr -0B4h
.text:0040D750 var_B0          = dword ptr -0B0h
.text:0040D750 var_AC          = dword ptr -0ACh
.text:0040D750 var_A8          = dword ptr -0A8h
.text:0040D750 var_A4          = dword ptr -0A4h
.text:0040D750 var_A0          = dword ptr -0A0h
.text:0040D750 var_98          = dword ptr -98h
.text:0040D750 var_94          = dword ptr -94h
.text:0040D750 var_90          = dword ptr -90h
.text:0040D750 var_8C          = dword ptr -8Ch
.text:0040D750 var_88          = dword ptr -88h
.text:0040D750 var_84          = dword ptr -84h
.text:0040D750 var_80          = dword ptr -80h
.text:0040D750 var_78          = dword ptr -78h
.text:0040D750 var_74          = dword ptr -74h
.text:0040D750 var_70          = dword ptr -70h
.text:0040D750 var_6C          = dword ptr -6Ch
.text:0040D750 var_68          = dword ptr -68h
.text:0040D750 var_64          = dword ptr -64h
.text:0040D750 var_60          = dword ptr -60h
.text:0040D750 var_5C          = dword ptr -5Ch
.text:0040D750 var_58          = dword ptr -58h
.text:0040D750 var_50          = dword ptr -50h
.text:0040D750 var_4C          = dword ptr -4Ch
.text:0040D750 var_48          = dword ptr -48h
.text:0040D750 var_44          = dword ptr -44h
.text:0040D750 var_40          = dword ptr -40h
.text:0040D750 var_3C          = dword ptr -3Ch
.text:0040D750 var_38          = dword ptr -38h
.text:0040D750 var_34          = dword ptr -34h
.text:0040D750 var_30          = dword ptr -30h
.text:0040D750 var_29          = byte ptr -29h
.text:0040D750 var_28          = dword ptr -28h
.text:0040D750 var_24          = dword ptr -24h
.text:0040D750 var_20          = dword ptr -20h
.text:0040D750 var_18          = byte ptr -18h
.text:0040D750 arg_0           = dword ptr  4
.text:0040D750 arg_4           = dword ptr  8
.text:0040D750 arg_8           = dword ptr  0Ch
.text:0040D750 arg_C           = dword ptr  10h
.text:0040D750 Str             = dword ptr  14h
.text:0040D750
.text:0040D750                 push    ebp
.text:0040D751                 xor     eax, eax
.text:0040D753                 push    edi
.text:0040D754                 push    esi
.text:0040D755                 push    ebx
.text:0040D756                 sub     esp, 12Ch
.text:0040D75C                 mov     ebp, [esp+13Ch+arg_8]
.text:0040D763                 mov     [esp+13Ch+var_28], eax
.text:0040D76A                 mov     esi, [esp+13Ch+arg_0]
.text:0040D771                 cmp     ebp, 24h ; '$'
.text:0040D774                 ja      loc_40E3C1
.text:0040D77A                 mov     edi, [esp+13Ch+arg_4]
.text:0040D781                 test    edi, edi
.text:0040D783                 jz      loc_40E3B5
.text:0040D789
.text:0040D789 loc_40D789:                             ; CODE XREF: sub_40D750+C6C↓j
.text:0040D789                 movzx   edx, byte ptr [esi]
.text:0040D78C                 mov     ebx, esi
.text:0040D78E                 mov     [esp+13Ch+var_29], dl
.text:0040D795                 lea     esi, [esi+0]
.text:0040D799                 lea     edi, [edi+0]
.text:0040D7A0
.text:0040D7A0 loc_40D7A0:                             ; CODE XREF: sub_40D750+86↓j
.text:0040D7A0                 movzx   edx, [esp+13Ch+var_29]
.text:0040D7A8                 mov     ecx, ds:__mb_cur_max
.text:0040D7AE                 cmp     dword ptr [ecx], 1
.text:0040D7B1                 jz      loc_40E3A2
.text:0040D7B7                 mov     [esp+13Ch+Type], 8 ; Type
.text:0040D7BF                 mov     [esp+13Ch+C], edx ; C
.text:0040D7C2                 call    _isctype
.text:0040D7C7
.text:0040D7C7 loc_40D7C7:                             ; CODE XREF: sub_40D750+C60↓j
.text:0040D7C7                 test    eax, eax
.text:0040D7C9                 jz      short loc_40D7D8
.text:0040D7CB                 inc     ebx
.text:0040D7CC                 movzx   eax, byte ptr [ebx]
.text:0040D7CF                 mov     [esp+13Ch+var_29], al
.text:0040D7D6                 jmp     short loc_40D7A0
.text:0040D7D8 ; ---------------------------------------------------------------------------
.text:0040D7D8
.text:0040D7D8 loc_40D7D8:                             ; CODE XREF: sub_40D750+79↑j
.text:0040D7D8                 cmp     [esp+13Ch+var_29], 2Dh ; '-'
.text:0040D7E0                 mov     eax, 4
.text:0040D7E5                 jz      short loc_40D862
.text:0040D7E7                 call    _errno
.text:0040D7EC                 mov     dword ptr [eax], 0
.text:0040D7F2                 mov     [esp+13Ch+Radix], ebp ; Radix
.text:0040D7F6                 mov     [esp+13Ch+Type], edi ; EndPtr
.text:0040D7FA                 mov     [esp+13Ch+C], esi ; String
.text:0040D7FD                 call    _strtoull
.text:0040D802                 mov     [esp+13Ch+var_24], eax
.text:0040D809                 mov     eax, [edi]
.text:0040D80B                 mov     [esp+13Ch+var_20], edx
.text:0040D812                 cmp     eax, esi
.text:0040D814                 jz      loc_40E35C
.text:0040D81A                 call    _errno
.text:0040D81F                 mov     ebx, [eax]
.text:0040D821                 test    ebx, ebx
.text:0040D823                 jnz     loc_40E337
.text:0040D829
.text:0040D829 loc_40D829:                             ; CODE XREF: sub_40D750+BFD↓j
.text:0040D829                                         ; sub_40D750+C4D↓j
.text:0040D829                 mov     ebp, [esp+13Ch+Str]
.text:0040D830                 test    ebp, ebp
.text:0040D832                 jz      loc_40E318
.text:0040D838                 mov     ebx, [edi]
.text:0040D83A                 movzx   eax, byte ptr [ebx]
.text:0040D83D                 test    al, al
.text:0040D83F                 jnz     short loc_40D86D
.text:0040D841
.text:0040D841 loc_40D841:                             ; CODE XREF: sub_40D750+312↓j
.text:0040D841                                         ; sub_40D750+320↓j
.text:0040D841                 mov     edx, [esp+13Ch+var_24]
.text:0040D848                 mov     edi, [esp+13Ch+var_20]
.text:0040D84F                 mov     ebx, [esp+13Ch+arg_C]
.text:0040D856                 mov     [ebx], edx
.text:0040D858                 mov     [ebx+4], edi
.text:0040D85B
.text:0040D85B loc_40D85B:                             ; CODE XREF: sub_40D750+BE2↓j
.text:0040D85B                 mov     eax, [esp+13Ch+var_28]
.text:0040D862
.text:0040D862 loc_40D862:                             ; CODE XREF: sub_40D750+95↑j
.text:0040D862                                         ; sub_40D750+16C↓j ...
.text:0040D862                 add     esp, 12Ch
.text:0040D868                 pop     ebx
.text:0040D869                 pop     esi
.text:0040D86A                 pop     edi
.text:0040D86B                 pop     ebp
.text:0040D86C                 retn
.text:0040D86D ; ---------------------------------------------------------------------------
.text:0040D86D
.text:0040D86D loc_40D86D:                             ; CODE XREF: sub_40D750+EF↑j
.text:0040D86D                 mov     esi, [esp+13Ch+Str]
.text:0040D874                 mov     ecx, 1
.text:0040D879                 movsx   ebp, al
.text:0040D87C                 mov     [esp+13Ch+var_30], ecx
.text:0040D883                 mov     ebx, 400h
.text:0040D888                 mov     [esp+13Ch+Type], ebp ; Val
.text:0040D88C                 mov     [esp+13Ch+C], esi ; Str
.text:0040D88F                 call    strchr
.text:0040D894                 test    eax, eax
.text:0040D896                 jnz     short loc_40D8BE
.text:0040D898
.text:0040D898 def_40D909:                             ; CODE XREF: sub_40D750+1B7↓j
.text:0040D898                                         ; sub_40D750+1B9↓j
.text:0040D898                                         ; DATA XREF: ...
.text:0040D898                 mov     eax, [esp+13Ch+var_28] ; jumptable 0040D909 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0040D89F                 mov     esi, [esp+13Ch+var_24]
.text:0040D8A6                 mov     ebp, [esp+13Ch+var_20]
.text:0040D8AD                 mov     edi, [esp+13Ch+arg_C]
.text:0040D8B4                 or      eax, 2
.text:0040D8B7                 mov     [edi], esi
.text:0040D8B9                 mov     [edi+4], ebp
.text:0040D8BC                 jmp     short loc_40D862
.text:0040D8BE ; ---------------------------------------------------------------------------
.text:0040D8BE
.text:0040D8BE loc_40D8BE:                             ; CODE XREF: sub_40D750+146↑j
.text:0040D8BE                 mov     [esp+13Ch+Type], 30h ; '0' ; Val
.text:0040D8C6                 mov     edx, [esp+13Ch+Str]
.text:0040D8CD                 mov     [esp+13Ch+C], edx ; Str
.text:0040D8D0                 call    strchr
.text:0040D8D5                 test    eax, eax
.text:0040D8D7                 jz      loc_40E311
.text:0040D8DD                 mov     edx, [edi]
.text:0040D8DF                 movsx   eax, byte ptr [edx+1]
.text:0040D8E3                 cmp     eax, 44h ; 'D'
.text:0040D8E6                 jz      loc_40E2D7
.text:0040D8EC                 cmp     eax, 44h ; 'D'
.text:0040D8EF                 jg      loc_40E2ED
.text:0040D8F5                 cmp     eax, 42h ; 'B'
.text:0040D8F8                 jz      loc_40E2D7
.text:0040D8FE
.text:0040D8FE loc_40D8FE:                             ; CODE XREF: sub_40D750+B98↓j
.text:0040D8FE                                         ; sub_40D750+BA0↓j ...
.text:0040D8FE                 movsx   eax, byte ptr [edx]
.text:0040D901                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:0040D904                 cmp     eax, 35h
.text:0040D907                 ja      short def_40D909 ; jumptable 0040D909 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0040D909                 jmp     ds:jpt_40D909[eax*4] ; switch jump
.text:0040D909 ; ---------------------------------------------------------------------------
.text:0040D910 jpt_40D909      dd offset loc_40DA94, offset def_40D909, offset def_40D909
.text:0040D910                                         ; DATA XREF: sub_40D750+1B9↑r
.text:0040D910                 dd offset loc_40DAEE, offset def_40D909, offset loc_40DEB7 ; jump table for switch statement
.text:0040D910                 dd offset def_40D909, offset def_40D909, offset def_40D909
.text:0040D910                 dd offset loc_40DFC6, offset def_40D909, offset loc_40E08F
.text:0040D910                 dd offset def_40D909, offset def_40D909, offset loc_40DBFD
.text:0040D910                 dd offset def_40D909, offset def_40D909, offset def_40D909
.text:0040D910                 dd offset loc_40E19E, offset def_40D909, offset def_40D909
.text:0040D910                 dd offset def_40D909, offset def_40D909, offset loc_40DD0C
.text:0040D910                 dd offset loc_40DDDE, offset def_40D909, offset def_40D909
.text:0040D910                 dd offset def_40D909, offset def_40D909, offset def_40D909
.text:0040D910                 dd offset def_40D909, offset def_40D909, offset loc_40D9E8
.text:0040D910                 dd offset loc_40DEB0, offset def_40D909, offset def_40D909
.text:0040D910                 dd offset def_40D909, offset loc_40DEB7, offset def_40D909
.text:0040D910                 dd offset def_40D909, offset def_40D909, offset loc_40DFC6
.text:0040D910                 dd offset def_40D909, offset loc_40E08F, offset def_40D909
.text:0040D910                 dd offset def_40D909, offset def_40D909, offset def_40D909
.text:0040D910                 dd offset def_40D909, offset def_40D909, offset loc_40E19E
.text:0040D910                 dd offset def_40D909, offset def_40D909, offset loc_40E277
.text:0040D9E8 ; ---------------------------------------------------------------------------
.text:0040D9E8
.text:0040D9E8 loc_40D9E8:                             ; CODE XREF: sub_40D750+1B9↑j
.text:0040D9E8                                         ; DATA XREF: sub_40D750:jpt_40D909↑o
.text:0040D9E8                 mov     [esp+13Ch+Radix], 200h ; jumptable 0040D909 case 98
.text:0040D9F0                 lea     ebp, [esp+13Ch+var_24]
.text:0040D9F7                 mov     [esp+13Ch+var_130], 0
.text:0040D9FF                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040DA06                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040DA0E                 call    sub_417E90
.text:0040DA13                 mov     esi, [esp+13Ch+var_20]
.text:0040DA1A                 mov     ecx, [esp+13Ch+var_24]
.text:0040DA21                 cmp     edx, esi
.text:0040DA23                 ja      short loc_40DA2B
.text:0040DA25                 jb      short loc_40DA75
.text:0040DA27                 cmp     eax, ecx
.text:0040DA29                 jb      short loc_40DA75
.text:0040DA2B
.text:0040DA2B loc_40DA2B:                             ; CODE XREF: sub_40D750+2D3↑j
.text:0040DA2B                 mov     esi, [ebp+0]
.text:0040DA2E                 mov     eax, 200h
.text:0040DA33                 mov     ebx, [ebp+4]
.text:0040DA36                 mul     esi
.text:0040DA38                 mov     ecx, ebx
.text:0040DA3A                 shl     ecx, 9
.text:0040DA3D
.text:0040DA3D loc_40DA3D:                             ; CODE XREF: sub_40D750+399↓j
.text:0040DA3D                 mov     esi, edx
.text:0040DA3F                 lea     edx, [ecx+esi]
.text:0040DA42
.text:0040DA42 loc_40DA42:                             ; CODE XREF: sub_40D750+B82↓j
.text:0040DA42                 mov     [ebp+0], eax
.text:0040DA45                 xor     eax, eax
.text:0040DA47                 mov     [ebp+4], edx
.text:0040DA4A
.text:0040DA4A loc_40DA4A:                             ; CODE XREF: sub_40D750+342↓j
.text:0040DA4A                                         ; sub_40D750+459↓j ...
.text:0040DA4A                 mov     edx, [edi]
.text:0040DA4C
.text:0040DA4C loc_40DA4C:                             ; CODE XREF: sub_40D750+762↓j
.text:0040DA4C                 or      [esp+13Ch+var_28], eax
.text:0040DA53                 mov     eax, [esp+13Ch+var_30]
.text:0040DA5A                 lea     ecx, [eax+edx]
.text:0040DA5D                 mov     [edi], ecx
.text:0040DA5F                 cmp     byte ptr [ecx], 0
.text:0040DA62                 jz      loc_40D841
.text:0040DA68                 or      [esp+13Ch+var_28], 2
.text:0040DA70                 jmp     loc_40D841
.text:0040DA75 ; ---------------------------------------------------------------------------
.text:0040DA75
.text:0040DA75 loc_40DA75:                             ; CODE XREF: sub_40D750+2D5↑j
.text:0040DA75                                         ; sub_40D750+2D9↑j ...
.text:0040DA75                 mov     edx, 0FFFFFFFFh
.text:0040DA7A                 mov     ebp, 0FFFFFFFFh
.text:0040DA7F                 mov     eax, 1
.text:0040DA84                 mov     [esp+13Ch+var_24], edx
.text:0040DA8B                 mov     [esp+13Ch+var_20], ebp
.text:0040DA92                 jmp     short loc_40DA4A
.text:0040DA94 ; ---------------------------------------------------------------------------
.text:0040DA94
.text:0040DA94 loc_40DA94:                             ; CODE XREF: sub_40D750+1B9↑j
.text:0040DA94                                         ; DATA XREF: sub_40D750:jpt_40D909↑o
.text:0040DA94                 mov     [esp+13Ch+Radix], 400h ; jumptable 0040D909 case 66
.text:0040DA9C                 lea     ebp, [esp+13Ch+var_24]
.text:0040DAA3                 mov     [esp+13Ch+var_130], 0
.text:0040DAAB                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040DAB2                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040DABA                 call    sub_417E90
.text:0040DABF                 mov     esi, [esp+13Ch+var_20]
.text:0040DAC6                 mov     ecx, [esp+13Ch+var_24]
.text:0040DACD                 cmp     edx, esi
.text:0040DACF                 ja      short loc_40DAD7
.text:0040DAD1                 jb      short loc_40DA75
.text:0040DAD3                 cmp     eax, ecx
.text:0040DAD5                 jb      short loc_40DA75
.text:0040DAD7
.text:0040DAD7 loc_40DAD7:                             ; CODE XREF: sub_40D750+37F↑j
.text:0040DAD7                 mov     esi, [ebp+0]
.text:0040DADA                 mov     eax, 400h
.text:0040DADF                 mov     ebx, [ebp+4]
.text:0040DAE2                 mul     esi
.text:0040DAE4                 mov     ecx, ebx
.text:0040DAE6                 shl     ecx, 0Ah
.text:0040DAE9                 jmp     loc_40DA3D
.text:0040DAEE ; ---------------------------------------------------------------------------
.text:0040DAEE
.text:0040DAEE loc_40DAEE:                             ; CODE XREF: sub_40D750+1B9↑j
.text:0040DAEE                                         ; DATA XREF: sub_40D750:jpt_40D909↑o
.text:0040DAEE                 mov     [esp+13Ch+var_3C], ebx ; jumptable 0040D909 case 69
.text:0040DAF5                 mov     ecx, ebx
.text:0040DAF7                 xor     ebp, ebp
.text:0040DAF9                 mov     [esp+13Ch+var_34], ebp
.text:0040DB00                 sar     ecx, 1Fh
.text:0040DB03                 mov     ebx, [esp+13Ch+var_3C]
.text:0040DB0A                 mov     [esp+13Ch+var_38], ecx
.text:0040DB11                 lea     esi, [esp+13Ch+var_24]
.text:0040DB18                 mov     ebp, 5
.text:0040DB1D                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040DB24                 mov     edx, [esp+13Ch+var_38]
.text:0040DB2B                 mov     [esp+13Ch+Radix], ebx
.text:0040DB2F                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040DB37                 mov     [esp+13Ch+var_130], edx
.text:0040DB3B                 call    sub_417E90
.text:0040DB40                 mov     [esp+13Ch+var_44], eax
.text:0040DB47                 mov     [esp+13Ch+var_40], edx
.text:0040DB4E
.text:0040DB4E loc_40DB4E:                             ; CODE XREF: sub_40D750+450↓j
.text:0040DB4E                 mov     ebx, [esi+4]
.text:0040DB51                 mov     eax, [esi]
.text:0040DB53                 cmp     [esp+13Ch+var_40], ebx
.text:0040DB5A                 mov     [esp+13Ch+var_48], ebx
.text:0040DB61                 mov     [esp+13Ch+var_4C], eax
.text:0040DB68                 ja      short loc_40DBAE
.text:0040DB6A                 mov     ecx, [esp+13Ch+var_48]
.text:0040DB71                 cmp     [esp+13Ch+var_40], ecx
.text:0040DB78                 jb      short loc_40DB83
.text:0040DB7A                 cmp     [esp+13Ch+var_44], eax
.text:0040DB81                 jnb     short loc_40DBAE
.text:0040DB83
.text:0040DB83 loc_40DB83:                             ; CODE XREF: sub_40D750+428↑j
.text:0040DB83                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040DB89                 mov     eax, 1
.text:0040DB8E                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040DB95
.text:0040DB95 loc_40DB95:                             ; CODE XREF: sub_40D750+4AB↓j
.text:0040DB95                 or      [esp+13Ch+var_34], eax
.text:0040DB9C                 dec     ebp
.text:0040DB9D                 cmp     ebp, 0FFFFFFFFh
.text:0040DBA0                 jnz     short loc_40DB4E
.text:0040DBA2                 mov     eax, [esp+13Ch+var_34]
.text:0040DBA9                 jmp     loc_40DA4A
.text:0040DBAE ; ---------------------------------------------------------------------------
.text:0040DBAE
.text:0040DBAE loc_40DBAE:                             ; CODE XREF: sub_40D750+418↑j
.text:0040DBAE                                         ; sub_40D750+431↑j
.text:0040DBAE                 mov     ecx, [esp+13Ch+var_38]
.text:0040DBB5                 mov     eax, [esp+13Ch+var_4C]
.text:0040DBBC                 mov     ebx, [esp+13Ch+var_4C]
.text:0040DBC3                 mul     [esp+13Ch+var_3C]
.text:0040DBCA                 imul    ebx, ecx
.text:0040DBCD                 mov     ecx, edx
.text:0040DBCF                 mov     [esp+13Ch+var_124], eax
.text:0040DBD3                 add     ecx, ebx
.text:0040DBD5                 mov     edx, [esp+13Ch+var_3C]
.text:0040DBDC                 mov     ebx, [esp+13Ch+var_48]
.text:0040DBE3                 imul    edx, ebx
.text:0040DBE6                 mov     ebx, [esp+13Ch+var_124]
.text:0040DBEA                 mov     [esi], ebx
.text:0040DBEC                 add     ecx, edx
.text:0040DBEE                 mov     [esp+13Ch+var_120], ecx
.text:0040DBF2                 mov     eax, [esp+13Ch+var_120]
.text:0040DBF6                 mov     [esi+4], eax
.text:0040DBF9                 xor     eax, eax
.text:0040DBFB                 jmp     short loc_40DB95
.text:0040DBFD ; ---------------------------------------------------------------------------
.text:0040DBFD
.text:0040DBFD loc_40DBFD:                             ; CODE XREF: sub_40D750+1B9↑j
.text:0040DBFD                                         ; DATA XREF: sub_40D750:jpt_40D909↑o
.text:0040DBFD                 mov     [esp+13Ch+var_A4], ebx ; jumptable 0040D909 case 80
.text:0040DC04                 mov     eax, ebx
.text:0040DC06                 xor     ebp, ebp
.text:0040DC08                 mov     [esp+13Ch+var_98], ebp
.text:0040DC0F                 sar     eax, 1Fh
.text:0040DC12                 mov     edx, [esp+13Ch+var_A4]
.text:0040DC19                 mov     [esp+13Ch+var_A0], eax
.text:0040DC20                 lea     esi, [esp+13Ch+var_24]
.text:0040DC27                 mov     ebp, 4
.text:0040DC2C                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040DC33                 mov     ebx, [esp+13Ch+var_A0]
.text:0040DC3A                 mov     [esp+13Ch+Radix], edx
.text:0040DC3E                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040DC46                 mov     [esp+13Ch+var_130], ebx
.text:0040DC4A                 call    sub_417E90
.text:0040DC4F                 mov     [esp+13Ch+var_AC], eax
.text:0040DC56                 mov     [esp+13Ch+var_A8], edx
.text:0040DC5D
.text:0040DC5D loc_40DC5D:                             ; CODE XREF: sub_40D750+55F↓j
.text:0040DC5D                 mov     ebx, [esi+4]
.text:0040DC60                 mov     edx, [esi]
.text:0040DC62                 cmp     [esp+13Ch+var_A8], ebx
.text:0040DC69                 mov     [esp+13Ch+var_B0], ebx
.text:0040DC70                 mov     [esp+13Ch+var_B4], edx
.text:0040DC77                 ja      short loc_40DCBD
.text:0040DC79                 mov     eax, [esp+13Ch+var_B0]
.text:0040DC80                 cmp     [esp+13Ch+var_A8], eax
.text:0040DC87                 jb      short loc_40DC92
.text:0040DC89                 cmp     [esp+13Ch+var_AC], edx
.text:0040DC90                 jnb     short loc_40DCBD
.text:0040DC92
.text:0040DC92 loc_40DC92:                             ; CODE XREF: sub_40D750+537↑j
.text:0040DC92                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040DC98                 mov     eax, 1
.text:0040DC9D                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040DCA4
.text:0040DCA4 loc_40DCA4:                             ; CODE XREF: sub_40D750+5BA↓j
.text:0040DCA4                 or      [esp+13Ch+var_98], eax
.text:0040DCAB                 dec     ebp
.text:0040DCAC                 cmp     ebp, 0FFFFFFFFh
.text:0040DCAF                 jnz     short loc_40DC5D
.text:0040DCB1                 mov     eax, [esp+13Ch+var_98]
.text:0040DCB8                 jmp     loc_40DA4A
.text:0040DCBD ; ---------------------------------------------------------------------------
.text:0040DCBD
.text:0040DCBD loc_40DCBD:                             ; CODE XREF: sub_40D750+527↑j
.text:0040DCBD                                         ; sub_40D750+540↑j
.text:0040DCBD                 mov     ecx, [esp+13Ch+var_A0]
.text:0040DCC4                 mov     eax, [esp+13Ch+var_B4]
.text:0040DCCB                 mov     ebx, [esp+13Ch+var_B4]
.text:0040DCD2                 mul     [esp+13Ch+var_A4]
.text:0040DCD9                 imul    ebx, ecx
.text:0040DCDC                 mov     ecx, edx
.text:0040DCDE                 mov     [esp+13Ch+var_124], eax
.text:0040DCE2                 add     ecx, ebx
.text:0040DCE4                 mov     edx, [esp+13Ch+var_A4]
.text:0040DCEB                 mov     ebx, [esp+13Ch+var_B0]
.text:0040DCF2                 xor     eax, eax
.text:0040DCF4                 imul    edx, ebx
.text:0040DCF7                 add     ecx, edx
.text:0040DCF9                 mov     [esp+13Ch+var_120], ecx
.text:0040DCFD                 mov     ebx, [esp+13Ch+var_120]
.text:0040DD01                 mov     ecx, [esp+13Ch+var_124]
.text:0040DD05                 mov     [esi+4], ebx
.text:0040DD08                 mov     [esi], ecx
.text:0040DD0A                 jmp     short loc_40DCA4
.text:0040DD0C ; ---------------------------------------------------------------------------
.text:0040DD0C
.text:0040DD0C loc_40DD0C:                             ; CODE XREF: sub_40D750+1B9↑j
.text:0040DD0C                                         ; DATA XREF: sub_40D750:jpt_40D909↑o
.text:0040DD0C                 mov     [esp+13Ch+var_E4], ebx ; jumptable 0040D909 case 89
.text:0040DD10                 mov     eax, ebx
.text:0040DD12                 lea     esi, [esp+13Ch+var_24]
.text:0040DD19                 mov     [esp+13Ch+var_D8], 0
.text:0040DD21                 sar     eax, 1Fh
.text:0040DD24                 mov     edx, [esp+13Ch+var_E4]
.text:0040DD28                 mov     [esp+13Ch+var_E0], eax
.text:0040DD2C                 mov     ebp, 7
.text:0040DD31                 mov     ebx, [esp+13Ch+var_E0]
.text:0040DD35                 mov     [esp+13Ch+Radix], edx
.text:0040DD39                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040DD40                 mov     [esp+13Ch+var_130], ebx
.text:0040DD44                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040DD4C                 call    sub_417E90
.text:0040DD51                 mov     [esp+13Ch+var_EC], eax
.text:0040DD55                 mov     [esp+13Ch+var_E8], edx
.text:0040DD59
.text:0040DD59 loc_40DD59:                             ; CODE XREF: sub_40D750+646↓j
.text:0040DD59                 mov     ebx, [esi+4]
.text:0040DD5C                 mov     edx, [esi]
.text:0040DD5E                 cmp     [esp+13Ch+var_E8], ebx
.text:0040DD62                 mov     [esp+13Ch+var_F0], ebx
.text:0040DD66                 mov     [esp+13Ch+var_F4], edx
.text:0040DD6A                 ja      short loc_40DDA1
.text:0040DD6C                 mov     eax, [esp+13Ch+var_F0]
.text:0040DD70                 cmp     [esp+13Ch+var_E8], eax
.text:0040DD74                 jb      short loc_40DD7C
.text:0040DD76                 cmp     [esp+13Ch+var_EC], edx
.text:0040DD7A                 jnb     short loc_40DDA1
.text:0040DD7C
.text:0040DD7C loc_40DD7C:                             ; CODE XREF: sub_40D750+624↑j
.text:0040DD7C                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040DD82                 mov     eax, 1
.text:0040DD87                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040DD8E
.text:0040DD8E loc_40DD8E:                             ; CODE XREF: sub_40D750+68C↓j
.text:0040DD8E                 or      [esp+13Ch+var_D8], eax
.text:0040DD92                 dec     ebp
.text:0040DD93                 cmp     ebp, 0FFFFFFFFh
.text:0040DD96                 jnz     short loc_40DD59
.text:0040DD98                 mov     eax, [esp+13Ch+var_D8]
.text:0040DD9C                 jmp     loc_40DA4A
.text:0040DDA1 ; ---------------------------------------------------------------------------
.text:0040DDA1
.text:0040DDA1 loc_40DDA1:                             ; CODE XREF: sub_40D750+61A↑j
.text:0040DDA1                                         ; sub_40D750+62A↑j
.text:0040DDA1                 mov     ecx, [esp+13Ch+var_E0]
.text:0040DDA5                 mov     eax, [esp+13Ch+var_F4]
.text:0040DDA9                 mov     ebx, [esp+13Ch+var_F4]
.text:0040DDAD                 mul     [esp+13Ch+var_E4]
.text:0040DDB1                 imul    ebx, ecx
.text:0040DDB4                 mov     ecx, edx
.text:0040DDB6                 mov     [esp+13Ch+var_124], eax
.text:0040DDBA                 add     ecx, ebx
.text:0040DDBC                 mov     edx, [esp+13Ch+var_E4]
.text:0040DDC0                 mov     ebx, [esp+13Ch+var_F0]
.text:0040DDC4                 xor     eax, eax
.text:0040DDC6                 imul    edx, ebx
.text:0040DDC9                 add     ecx, edx
.text:0040DDCB                 mov     [esp+13Ch+var_120], ecx
.text:0040DDCF                 mov     ebx, [esp+13Ch+var_120]
.text:0040DDD3                 mov     ecx, [esp+13Ch+var_124]
.text:0040DDD7                 mov     [esi+4], ebx
.text:0040DDDA                 mov     [esi], ecx
.text:0040DDDC                 jmp     short loc_40DD8E
.text:0040DDDE ; ---------------------------------------------------------------------------
.text:0040DDDE
.text:0040DDDE loc_40DDDE:                             ; CODE XREF: sub_40D750+1B9↑j
.text:0040DDDE                                         ; DATA XREF: sub_40D750:jpt_40D909↑o
.text:0040DDDE                 mov     [esp+13Ch+var_104], ebx ; jumptable 0040D909 case 90
.text:0040DDE2                 mov     eax, ebx
.text:0040DDE4                 lea     esi, [esp+13Ch+var_24]
.text:0040DDEB                 mov     [esp+13Ch+var_F8], 0
.text:0040DDF3                 sar     eax, 1Fh
.text:0040DDF6                 mov     edx, [esp+13Ch+var_104]
.text:0040DDFA                 mov     [esp+13Ch+var_100], eax
.text:0040DDFE                 mov     ebp, 6
.text:0040DE03                 mov     ebx, [esp+13Ch+var_100]
.text:0040DE07                 mov     [esp+13Ch+Radix], edx
.text:0040DE0B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040DE12                 mov     [esp+13Ch+var_130], ebx
.text:0040DE16                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040DE1E                 call    sub_417E90
.text:0040DE23                 mov     [esp+13Ch+var_10C], eax
.text:0040DE27                 mov     [esp+13Ch+var_108], edx
.text:0040DE2B
.text:0040DE2B loc_40DE2B:                             ; CODE XREF: sub_40D750+718↓j
.text:0040DE2B                 mov     ebx, [esi+4]
.text:0040DE2E                 mov     edx, [esi]
.text:0040DE30                 cmp     [esp+13Ch+var_108], ebx
.text:0040DE34                 mov     [esp+13Ch+var_110], ebx
.text:0040DE38                 mov     [esp+13Ch+var_114], edx
.text:0040DE3C                 ja      short loc_40DE73
.text:0040DE3E                 mov     eax, [esp+13Ch+var_110]
.text:0040DE42                 cmp     [esp+13Ch+var_108], eax
.text:0040DE46                 jb      short loc_40DE4E
.text:0040DE48                 cmp     [esp+13Ch+var_10C], edx
.text:0040DE4C                 jnb     short loc_40DE73
.text:0040DE4E
.text:0040DE4E loc_40DE4E:                             ; CODE XREF: sub_40D750+6F6↑j
.text:0040DE4E                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040DE54                 mov     eax, 1
.text:0040DE59                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040DE60
.text:0040DE60 loc_40DE60:                             ; CODE XREF: sub_40D750+75E↓j
.text:0040DE60                 or      [esp+13Ch+var_F8], eax
.text:0040DE64                 dec     ebp
.text:0040DE65                 cmp     ebp, 0FFFFFFFFh
.text:0040DE68                 jnz     short loc_40DE2B
.text:0040DE6A                 mov     eax, [esp+13Ch+var_F8]
.text:0040DE6E                 jmp     loc_40DA4A
.text:0040DE73 ; ---------------------------------------------------------------------------
.text:0040DE73
.text:0040DE73 loc_40DE73:                             ; CODE XREF: sub_40D750+6EC↑j
.text:0040DE73                                         ; sub_40D750+6FC↑j
.text:0040DE73                 mov     eax, [esp+13Ch+var_114]
.text:0040DE77                 mov     ebx, [esp+13Ch+var_100]
.text:0040DE7B                 mul     [esp+13Ch+var_104]
.text:0040DE7F                 mov     ecx, edx
.text:0040DE81                 mov     edx, [esp+13Ch+var_104]
.text:0040DE85                 mov     [esp+13Ch+var_124], eax
.text:0040DE89                 mov     eax, [esp+13Ch+var_114]
.text:0040DE8D                 imul    eax, ebx
.text:0040DE90                 mov     ebx, [esp+13Ch+var_110]
.text:0040DE94                 imul    edx, ebx
.text:0040DE97                 add     ecx, eax
.text:0040DE99                 xor     eax, eax
.text:0040DE9B                 add     ecx, edx
.text:0040DE9D                 mov     [esp+13Ch+var_120], ecx
.text:0040DEA1                 mov     ebx, [esp+13Ch+var_120]
.text:0040DEA5                 mov     ecx, [esp+13Ch+var_124]
.text:0040DEA9                 mov     [esi+4], ebx
.text:0040DEAC                 mov     [esi], ecx
.text:0040DEAE                 jmp     short loc_40DE60
.text:0040DEB0 ; ---------------------------------------------------------------------------
.text:0040DEB0
.text:0040DEB0 loc_40DEB0:                             ; CODE XREF: sub_40D750+1B9↑j
.text:0040DEB0                                         ; DATA XREF: sub_40D750:jpt_40D909↑o
.text:0040DEB0                 xor     eax, eax        ; jumptable 0040D909 case 99
.text:0040DEB2                 jmp     loc_40DA4C
.text:0040DEB7 ; ---------------------------------------------------------------------------
.text:0040DEB7
.text:0040DEB7 loc_40DEB7:                             ; CODE XREF: sub_40D750+1B9↑j
.text:0040DEB7                                         ; DATA XREF: sub_40D750:jpt_40D909↑o
.text:0040DEB7                 mov     [esp+13Ch+var_5C], ebx ; jumptable 0040D909 cases 71,103
.text:0040DEBE                 mov     eax, ebx
.text:0040DEC0                 xor     ebp, ebp
.text:0040DEC2                 mov     [esp+13Ch+var_50], ebp
.text:0040DEC9                 sar     eax, 1Fh
.text:0040DECC                 mov     edx, [esp+13Ch+var_5C]
.text:0040DED3                 mov     [esp+13Ch+var_58], eax
.text:0040DEDA                 lea     esi, [esp+13Ch+var_24]
.text:0040DEE1                 mov     ebp, 2
.text:0040DEE6                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040DEED                 mov     ebx, [esp+13Ch+var_58]
.text:0040DEF4                 mov     [esp+13Ch+Radix], edx
.text:0040DEF8                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040DF00                 mov     [esp+13Ch+var_130], ebx
.text:0040DF04                 call    sub_417E90
.text:0040DF09                 mov     [esp+13Ch+var_64], eax
.text:0040DF10                 mov     [esp+13Ch+var_60], edx
.text:0040DF17
.text:0040DF17 loc_40DF17:                             ; CODE XREF: sub_40D750+819↓j
.text:0040DF17                 mov     ebx, [esi+4]
.text:0040DF1A                 mov     edx, [esi]
.text:0040DF1C                 cmp     [esp+13Ch+var_60], ebx
.text:0040DF23                 mov     [esp+13Ch+var_68], ebx
.text:0040DF2A                 mov     [esp+13Ch+var_6C], edx
.text:0040DF31                 ja      short loc_40DF77
.text:0040DF33                 mov     eax, [esp+13Ch+var_68]
.text:0040DF3A                 cmp     [esp+13Ch+var_60], eax
.text:0040DF41                 jb      short loc_40DF4C
.text:0040DF43                 cmp     [esp+13Ch+var_64], edx
.text:0040DF4A                 jnb     short loc_40DF77
.text:0040DF4C
.text:0040DF4C loc_40DF4C:                             ; CODE XREF: sub_40D750+7F1↑j
.text:0040DF4C                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040DF52                 mov     eax, 1
.text:0040DF57                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040DF5E
.text:0040DF5E loc_40DF5E:                             ; CODE XREF: sub_40D750+874↓j
.text:0040DF5E                 or      [esp+13Ch+var_50], eax
.text:0040DF65                 dec     ebp
.text:0040DF66                 cmp     ebp, 0FFFFFFFFh
.text:0040DF69                 jnz     short loc_40DF17
.text:0040DF6B                 mov     eax, [esp+13Ch+var_50]
.text:0040DF72                 jmp     loc_40DA4A
.text:0040DF77 ; ---------------------------------------------------------------------------
.text:0040DF77
.text:0040DF77 loc_40DF77:                             ; CODE XREF: sub_40D750+7E1↑j
.text:0040DF77                                         ; sub_40D750+7FA↑j
.text:0040DF77                 mov     ecx, [esp+13Ch+var_58]
.text:0040DF7E                 mov     eax, [esp+13Ch+var_6C]
.text:0040DF85                 mov     ebx, [esp+13Ch+var_6C]
.text:0040DF8C                 mul     [esp+13Ch+var_5C]
.text:0040DF93                 imul    ebx, ecx
.text:0040DF96                 mov     ecx, edx
.text:0040DF98                 mov     [esp+13Ch+var_124], eax
.text:0040DF9C                 add     ecx, ebx
.text:0040DF9E                 mov     edx, [esp+13Ch+var_5C]
.text:0040DFA5                 mov     ebx, [esp+13Ch+var_68]
.text:0040DFAC                 xor     eax, eax
.text:0040DFAE                 imul    edx, ebx
.text:0040DFB1                 add     ecx, edx
.text:0040DFB3                 mov     [esp+13Ch+var_120], ecx
.text:0040DFB7                 mov     ebx, [esp+13Ch+var_120]
.text:0040DFBB                 mov     ecx, [esp+13Ch+var_124]
.text:0040DFBF                 mov     [esi+4], ebx
.text:0040DFC2                 mov     [esi], ecx
.text:0040DFC4                 jmp     short loc_40DF5E
.text:0040DFC6 ; ---------------------------------------------------------------------------
.text:0040DFC6
.text:0040DFC6 loc_40DFC6:                             ; CODE XREF: sub_40D750+1B9↑j
.text:0040DFC6                                         ; DATA XREF: sub_40D750:jpt_40D909↑o
.text:0040DFC6                 mov     [esp+13Ch+var_74], ebx ; jumptable 0040D909 cases 75,107
.text:0040DFCD                 mov     eax, ebx
.text:0040DFCF                 lea     esi, [esp+13Ch+var_24]
.text:0040DFD6                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040DFDD                 sar     eax, 1Fh
.text:0040DFE0                 mov     edx, [esp+13Ch+var_74]
.text:0040DFE7                 mov     [esp+13Ch+var_70], eax
.text:0040DFEE                 mov     ebx, [esp+13Ch+var_70]
.text:0040DFF5                 mov     [esp+13Ch+Radix], edx
.text:0040DFF9                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040E001                 mov     [esp+13Ch+var_130], ebx
.text:0040E005                 call    sub_417E90
.text:0040E00A                 mov     ebp, [esp+13Ch+var_20]
.text:0040E011                 mov     ecx, [esp+13Ch+var_24]
.text:0040E018                 cmp     edx, ebp
.text:0040E01A                 mov     [esp+13Ch+var_11C], ecx
.text:0040E01E                 mov     [esp+13Ch+var_118], ebp
.text:0040E022                 ja      short loc_40E049
.text:0040E024                 cmp     edx, [esp+13Ch+var_118]
.text:0040E028                 jb      short loc_40E02E
.text:0040E02A                 cmp     eax, ecx
.text:0040E02C                 jnb     short loc_40E049
.text:0040E02E
.text:0040E02E loc_40E02E:                             ; CODE XREF: sub_40D750+8D8↑j
.text:0040E02E                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040E034                 mov     edx, 1
.text:0040E039                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040E040
.text:0040E040 loc_40E040:                             ; CODE XREF: sub_40D750+93D↓j
.text:0040E040                 xor     eax, eax
.text:0040E042                 or      eax, edx
.text:0040E044                 jmp     loc_40DA4A
.text:0040E049 ; ---------------------------------------------------------------------------
.text:0040E049
.text:0040E049 loc_40E049:                             ; CODE XREF: sub_40D750+8D2↑j
.text:0040E049                                         ; sub_40D750+8DC↑j
.text:0040E049                 mov     eax, [esp+13Ch+var_11C]
.text:0040E04D                 mov     ebp, [esp+13Ch+var_11C]
.text:0040E051                 mov     ebx, [esp+13Ch+var_118]
.text:0040E055                 mul     [esp+13Ch+var_74]
.text:0040E05C                 mov     [esp+13Ch+var_124], eax
.text:0040E060                 mov     eax, [esp+13Ch+var_70]
.text:0040E067                 mov     ecx, [esp+13Ch+var_124]
.text:0040E06B                 imul    ebp, eax
.text:0040E06E                 mov     eax, edx
.text:0040E070                 xor     edx, edx
.text:0040E072                 mov     [esi], ecx
.text:0040E074                 add     eax, ebp
.text:0040E076                 mov     ebp, [esp+13Ch+var_74]
.text:0040E07D                 imul    ebp, ebx
.text:0040E080                 add     eax, ebp
.text:0040E082                 mov     [esp+13Ch+var_120], eax
.text:0040E086                 mov     ebp, [esp+13Ch+var_120]
.text:0040E08A                 mov     [esi+4], ebp
.text:0040E08D                 jmp     short loc_40E040
.text:0040E08F ; ---------------------------------------------------------------------------
.text:0040E08F
.text:0040E08F loc_40E08F:                             ; CODE XREF: sub_40D750+1B9↑j
.text:0040E08F                                         ; DATA XREF: sub_40D750:jpt_40D909↑o
.text:0040E08F                 mov     [esp+13Ch+var_84], ebx ; jumptable 0040D909 cases 77,109
.text:0040E096                 mov     eax, ebx
.text:0040E098                 xor     ebp, ebp
.text:0040E09A                 mov     [esp+13Ch+var_78], ebp
.text:0040E0A1                 sar     eax, 1Fh
.text:0040E0A4                 mov     edx, [esp+13Ch+var_84]
.text:0040E0AB                 mov     [esp+13Ch+var_80], eax
.text:0040E0B2                 lea     esi, [esp+13Ch+var_24]
.text:0040E0B9                 mov     ebp, 1
.text:0040E0BE                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040E0C5                 mov     ecx, [esp+13Ch+var_80]
.text:0040E0CC                 mov     [esp+13Ch+Radix], edx
.text:0040E0D0                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040E0D8                 mov     [esp+13Ch+var_130], ecx
.text:0040E0DC                 call    sub_417E90
.text:0040E0E1                 mov     [esp+13Ch+var_8C], eax
.text:0040E0E8                 mov     [esp+13Ch+var_88], edx
.text:0040E0EF
.text:0040E0EF loc_40E0EF:                             ; CODE XREF: sub_40D750+9F1↓j
.text:0040E0EF                 mov     ebx, [esi+4]
.text:0040E0F2                 mov     edx, [esi]
.text:0040E0F4                 cmp     [esp+13Ch+var_88], ebx
.text:0040E0FB                 mov     [esp+13Ch+var_90], ebx
.text:0040E102                 mov     [esp+13Ch+var_94], edx
.text:0040E109                 ja      short loc_40E14F
.text:0040E10B                 mov     eax, [esp+13Ch+var_90]
.text:0040E112                 cmp     [esp+13Ch+var_88], eax
.text:0040E119                 jb      short loc_40E124
.text:0040E11B                 cmp     [esp+13Ch+var_8C], edx
.text:0040E122                 jnb     short loc_40E14F
.text:0040E124
.text:0040E124 loc_40E124:                             ; CODE XREF: sub_40D750+9C9↑j
.text:0040E124                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040E12A                 mov     eax, 1
.text:0040E12F                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040E136
.text:0040E136 loc_40E136:                             ; CODE XREF: sub_40D750+A4C↓j
.text:0040E136                 or      [esp+13Ch+var_78], eax
.text:0040E13D                 dec     ebp
.text:0040E13E                 cmp     ebp, 0FFFFFFFFh
.text:0040E141                 jnz     short loc_40E0EF
.text:0040E143                 mov     eax, [esp+13Ch+var_78]
.text:0040E14A                 jmp     loc_40DA4A
.text:0040E14F ; ---------------------------------------------------------------------------
.text:0040E14F
.text:0040E14F loc_40E14F:                             ; CODE XREF: sub_40D750+9B9↑j
.text:0040E14F                                         ; sub_40D750+9D2↑j
.text:0040E14F                 mov     ecx, [esp+13Ch+var_80]
.text:0040E156                 mov     eax, [esp+13Ch+var_94]
.text:0040E15D                 mov     ebx, [esp+13Ch+var_94]
.text:0040E164                 mul     [esp+13Ch+var_84]
.text:0040E16B                 imul    ebx, ecx
.text:0040E16E                 mov     ecx, edx
.text:0040E170                 mov     [esp+13Ch+var_124], eax
.text:0040E174                 add     ecx, ebx
.text:0040E176                 mov     edx, [esp+13Ch+var_84]
.text:0040E17D                 mov     ebx, [esp+13Ch+var_90]
.text:0040E184                 xor     eax, eax
.text:0040E186                 imul    edx, ebx
.text:0040E189                 add     ecx, edx
.text:0040E18B                 mov     [esp+13Ch+var_120], ecx
.text:0040E18F                 mov     ebx, [esp+13Ch+var_120]
.text:0040E193                 mov     ecx, [esp+13Ch+var_124]
.text:0040E197                 mov     [esi+4], ebx
.text:0040E19A                 mov     [esi], ecx
.text:0040E19C                 jmp     short loc_40E136
.text:0040E19E ; ---------------------------------------------------------------------------
.text:0040E19E
.text:0040E19E loc_40E19E:                             ; CODE XREF: sub_40D750+1B9↑j
.text:0040E19E                                         ; DATA XREF: sub_40D750:jpt_40D909↑o
.text:0040E19E                 mov     [esp+13Ch+var_C4], ebx ; jumptable 0040D909 cases 84,116
.text:0040E1A2                 mov     eax, ebx
.text:0040E1A4                 xor     ebp, ebp
.text:0040E1A6                 mov     [esp+13Ch+var_B8], ebp
.text:0040E1AD                 sar     eax, 1Fh
.text:0040E1B0                 mov     edx, [esp+13Ch+var_C4]
.text:0040E1B4                 mov     [esp+13Ch+var_C0], eax
.text:0040E1B8                 lea     esi, [esp+13Ch+var_24]
.text:0040E1BF                 mov     ebp, 3
.text:0040E1C4                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040E1CB                 mov     ebx, [esp+13Ch+var_C0]
.text:0040E1CF                 mov     [esp+13Ch+Radix], edx
.text:0040E1D3                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040E1DB                 mov     [esp+13Ch+var_130], ebx
.text:0040E1DF                 call    sub_417E90
.text:0040E1E4                 mov     [esp+13Ch+var_CC], eax
.text:0040E1E8                 mov     [esp+13Ch+var_C8], edx
.text:0040E1EC
.text:0040E1EC loc_40E1EC:                             ; CODE XREF: sub_40D750+ADC↓j
.text:0040E1EC                 mov     ebx, [esi+4]
.text:0040E1EF                 mov     edx, [esi]
.text:0040E1F1                 cmp     [esp+13Ch+var_C8], ebx
.text:0040E1F5                 mov     [esp+13Ch+var_D0], ebx
.text:0040E1F9                 mov     [esp+13Ch+var_D4], edx
.text:0040E1FD                 ja      short loc_40E23A
.text:0040E1FF                 mov     eax, [esp+13Ch+var_D0]
.text:0040E203                 cmp     [esp+13Ch+var_C8], eax
.text:0040E207                 jb      short loc_40E20F
.text:0040E209                 cmp     [esp+13Ch+var_CC], edx
.text:0040E20D                 jnb     short loc_40E23A
.text:0040E20F
.text:0040E20F loc_40E20F:                             ; CODE XREF: sub_40D750+AB7↑j
.text:0040E20F                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040E215                 mov     eax, 1
.text:0040E21A                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040E221
.text:0040E221 loc_40E221:                             ; CODE XREF: sub_40D750+B25↓j
.text:0040E221                 or      [esp+13Ch+var_B8], eax
.text:0040E228                 dec     ebp
.text:0040E229                 cmp     ebp, 0FFFFFFFFh
.text:0040E22C                 jnz     short loc_40E1EC
.text:0040E22E                 mov     eax, [esp+13Ch+var_B8]
.text:0040E235                 jmp     loc_40DA4A
.text:0040E23A ; ---------------------------------------------------------------------------
.text:0040E23A
.text:0040E23A loc_40E23A:                             ; CODE XREF: sub_40D750+AAD↑j
.text:0040E23A                                         ; sub_40D750+ABD↑j
.text:0040E23A                 mov     ecx, [esp+13Ch+var_C0]
.text:0040E23E                 mov     eax, [esp+13Ch+var_D4]
.text:0040E242                 mov     ebx, [esp+13Ch+var_D4]
.text:0040E246                 mul     [esp+13Ch+var_C4]
.text:0040E24A                 imul    ebx, ecx
.text:0040E24D                 mov     ecx, edx
.text:0040E24F                 mov     [esp+13Ch+var_124], eax
.text:0040E253                 add     ecx, ebx
.text:0040E255                 mov     edx, [esp+13Ch+var_C4]
.text:0040E259                 mov     ebx, [esp+13Ch+var_D0]
.text:0040E25D                 xor     eax, eax
.text:0040E25F                 imul    edx, ebx
.text:0040E262                 add     ecx, edx
.text:0040E264                 mov     [esp+13Ch+var_120], ecx
.text:0040E268                 mov     ebx, [esp+13Ch+var_120]
.text:0040E26C                 mov     ecx, [esp+13Ch+var_124]
.text:0040E270                 mov     [esi+4], ebx
.text:0040E273                 mov     [esi], ecx
.text:0040E275                 jmp     short loc_40E221
.text:0040E277 ; ---------------------------------------------------------------------------
.text:0040E277
.text:0040E277 loc_40E277:                             ; CODE XREF: sub_40D750+1B9↑j
.text:0040E277                                         ; DATA XREF: sub_40D750:jpt_40D909↑o
.text:0040E277                 mov     [esp+13Ch+Radix], 2 ; jumptable 0040D909 case 119
.text:0040E27F                 lea     ebp, [esp+13Ch+var_24]
.text:0040E286                 mov     [esp+13Ch+var_130], 0
.text:0040E28E                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040E295                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040E29D                 call    sub_417E90
.text:0040E2A2                 mov     esi, [esp+13Ch+var_20]
.text:0040E2A9                 mov     ecx, [esp+13Ch+var_24]
.text:0040E2B0                 cmp     edx, esi
.text:0040E2B2                 ja      short loc_40E2C2
.text:0040E2B4                 jb      loc_40DA75
.text:0040E2BA                 cmp     eax, ecx
.text:0040E2BC                 jb      loc_40DA75
.text:0040E2C2
.text:0040E2C2 loc_40E2C2:                             ; CODE XREF: sub_40D750+B62↑j
.text:0040E2C2                 mov     esi, [ebp+0]
.text:0040E2C5                 mov     eax, 2
.text:0040E2CA                 mov     ecx, [ebp+4]
.text:0040E2CD                 mul     esi
.text:0040E2CF                 lea     edx, [edx+ecx*2]
.text:0040E2D2                 jmp     loc_40DA42
.text:0040E2D7 ; ---------------------------------------------------------------------------
.text:0040E2D7
.text:0040E2D7 loc_40E2D7:                             ; CODE XREF: sub_40D750+196↑j
.text:0040E2D7                                         ; sub_40D750+1A8↑j
.text:0040E2D7                 mov     esi, 2
.text:0040E2DC                 mov     ebx, 3E8h
.text:0040E2E1                 mov     [esp+13Ch+var_30], esi
.text:0040E2E8                 jmp     loc_40D8FE
.text:0040E2ED ; ---------------------------------------------------------------------------
.text:0040E2ED
.text:0040E2ED loc_40E2ED:                             ; CODE XREF: sub_40D750+19F↑j
.text:0040E2ED                 cmp     eax, 69h ; 'i'
.text:0040E2F0                 jnz     loc_40D8FE
.text:0040E2F6                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040E2FA                 jnz     loc_40D8FE
.text:0040E300                 mov     eax, 3
.text:0040E305                 mov     [esp+13Ch+var_30], eax
.text:0040E30C                 jmp     loc_40D8FE
.text:0040E311 ; ---------------------------------------------------------------------------
.text:0040E311
.text:0040E311 loc_40E311:                             ; CODE XREF: sub_40D750+187↑j
.text:0040E311                 mov     edx, [edi]
.text:0040E313                 jmp     loc_40D8FE
.text:0040E318 ; ---------------------------------------------------------------------------
.text:0040E318
.text:0040E318 loc_40E318:                             ; CODE XREF: sub_40D750+E2↑j
.text:0040E318                 mov     edx, [esp+13Ch+var_24]
.text:0040E31F                 mov     ecx, [esp+13Ch+var_20]
.text:0040E326                 mov     edi, [esp+13Ch+arg_C]
.text:0040E32D                 mov     [edi], edx
.text:0040E32F                 mov     [edi+4], ecx
.text:0040E332                 jmp     loc_40D85B
.text:0040E337 ; ---------------------------------------------------------------------------
.text:0040E337
.text:0040E337 loc_40E337:                             ; CODE XREF: sub_40D750+D3↑j
.text:0040E337                 call    _errno
.text:0040E33C                 cmp     dword ptr [eax], 22h ; '"'
.text:0040E33F                 jnz     short loc_40E352
.text:0040E341                 mov     esi, 1
.text:0040E346                 mov     [esp+13Ch+var_28], esi
.text:0040E34D                 jmp     loc_40D829
.text:0040E352 ; ---------------------------------------------------------------------------
.text:0040E352
.text:0040E352 loc_40E352:                             ; CODE XREF: sub_40D750+BEF↑j
.text:0040E352                                         ; sub_40D750+C15↓j ...
.text:0040E352                 mov     eax, 4
.text:0040E357                 jmp     loc_40D862
.text:0040E35C ; ---------------------------------------------------------------------------
.text:0040E35C
.text:0040E35C loc_40E35C:                             ; CODE XREF: sub_40D750+C4↑j
.text:0040E35C                 mov     ebx, [esp+13Ch+Str]
.text:0040E363                 test    ebx, ebx
.text:0040E365                 jz      short loc_40E352
.text:0040E367                 movzx   eax, byte ptr [eax]
.text:0040E36A                 test    al, al
.text:0040E36C                 jz      short loc_40E352
.text:0040E36E                 mov     esi, [esp+13Ch+Str]
.text:0040E375                 movsx   ebp, al
.text:0040E378                 mov     [esp+13Ch+Type], ebp ; Val
.text:0040E37C                 mov     [esp+13Ch+C], esi ; Str
.text:0040E37F                 call    strchr
.text:0040E384                 test    eax, eax
.text:0040E386                 jz      short loc_40E352
.text:0040E388                 mov     ecx, 1
.text:0040E38D                 xor     edx, edx
.text:0040E38F                 mov     [esp+13Ch+var_24], ecx
.text:0040E396                 mov     [esp+13Ch+var_20], edx
.text:0040E39D                 jmp     loc_40D829
.text:0040E3A2 ; ---------------------------------------------------------------------------
.text:0040E3A2
.text:0040E3A2 loc_40E3A2:                             ; CODE XREF: sub_40D750+61↑j
.text:0040E3A2                 mov     eax, ds:_pctype
.text:0040E3A7                 mov     ecx, [eax]
.text:0040E3A9                 movzx   eax, word ptr [ecx+edx*2]
.text:0040E3AD                 and     eax, 8
.text:0040E3B0                 jmp     loc_40D7C7
.text:0040E3B5 ; ---------------------------------------------------------------------------
.text:0040E3B5
.text:0040E3B5 loc_40E3B5:                             ; CODE XREF: sub_40D750+33↑j
.text:0040E3B5                 lea     edi, [esp+13Ch+var_18]
.text:0040E3BC                 jmp     loc_40D789
.text:0040E3C1 ; ---------------------------------------------------------------------------
.text:0040E3C1
.text:0040E3C1 loc_40E3C1:                             ; CODE XREF: sub_40D750+24↑j
.text:0040E3C1                 mov     [esp+13Ch+Radix], 70h ; 'p'
.text:0040E3C9                 mov     [esp+13Ch+Type], offset aCoreutils530Sr_3 ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:0040E3D1                 mov     [esp+13Ch+C], offset a0StrtolBaseStr_0 ; "0 <= strtol_base && strtol_base <= 36"
.text:0040E3D8                 call    _assert
.text:0040E3D8 sub_40D750      endp
.text:0040E3D8
.text:0040E3D8 ; ---------------------------------------------------------------------------
.text:0040E3DD                 align 10h
.text:0040E3E0
.text:0040E3E0 ; =============== S U B R O U T I N E =======================================
.text:0040E3E0
.text:0040E3E0
.text:0040E3E0 ; int __cdecl sub_40E3E0(char *, int, int, int)
.text:0040E3E0 sub_40E3E0      proc near               ; CODE XREF: sub_40A6A0+45↑p
.text:0040E3E0                                         ; .text:0040E732↓p
.text:0040E3E0
.text:0040E3E0 Str             = dword ptr -2Ch
.text:0040E3E0 Str2            = dword ptr -28h
.text:0040E3E0 MaxCount        = dword ptr -24h
.text:0040E3E0 var_20          = dword ptr -20h
.text:0040E3E0 var_19          = byte ptr -19h
.text:0040E3E0 var_18          = dword ptr -18h
.text:0040E3E0 var_14          = dword ptr -14h
.text:0040E3E0 arg_0           = dword ptr  4
.text:0040E3E0 arg_4           = dword ptr  8
.text:0040E3E0 arg_8           = dword ptr  0Ch
.text:0040E3E0 arg_C           = dword ptr  10h
.text:0040E3E0
.text:0040E3E0                 push    ebp
.text:0040E3E1                 push    edi
.text:0040E3E2                 push    esi
.text:0040E3E3                 push    ebx
.text:0040E3E4                 sub     esp, 1Ch
.text:0040E3E7                 xor     ebx, ebx
.text:0040E3E9                 mov     [esp+2Ch+var_18], 0FFFFFFFFh
.text:0040E3F1                 mov     edx, [esp+2Ch+arg_0]
.text:0040E3F5                 mov     ebp, [esp+2Ch+arg_C]
.text:0040E3F9                 mov     [esp+2Ch+var_19], 0
.text:0040E3FE                 mov     [esp+2Ch+Str], edx ; Str
.text:0040E401                 call    strlen
.text:0040E406                 mov     [esp+2Ch+var_14], eax
.text:0040E40A                 mov     ecx, [esp+2Ch+arg_4]
.text:0040E40E                 mov     eax, [ecx]
.text:0040E410                 test    eax, eax
.text:0040E412                 jz      short loc_40E458
.text:0040E414                 mov     [esp+2Ch+var_20], 0
.text:0040E41C                 lea     esi, [esi+0]
.text:0040E420
.text:0040E420 loc_40E420:                             ; CODE XREF: sub_40E3E0+6A↓j
.text:0040E420                 mov     [esp+2Ch+Str], eax ; Str1
.text:0040E423                 mov     esi, [esp+2Ch+var_14]
.text:0040E427                 mov     ecx, [esp+2Ch+arg_0]
.text:0040E42B                 mov     [esp+2Ch+MaxCount], esi ; MaxCount
.text:0040E42F                 mov     [esp+2Ch+Str2], ecx ; Str2
.text:0040E433                 call    strncmp
.text:0040E438                 test    eax, eax
.text:0040E43A                 jz      short loc_40E466
.text:0040E43C
.text:0040E43C loc_40E43C:                             ; CODE XREF: sub_40E3E0+CA↓j
.text:0040E43C                                         ; sub_40E3E0+D1↓j ...
.text:0040E43C                 add     [esp+2Ch+var_20], ebp
.text:0040E440                 inc     ebx
.text:0040E441                 mov     esi, [esp+2Ch+arg_4]
.text:0040E445                 mov     eax, [esi+ebx*4]
.text:0040E448                 test    eax, eax
.text:0040E44A                 jnz     short loc_40E420
.text:0040E44C                 cmp     [esp+2Ch+var_19], 0
.text:0040E451                 mov     edx, 0FFFFFFFEh
.text:0040E456                 jnz     short loc_40E45C
.text:0040E458
.text:0040E458 loc_40E458:                             ; CODE XREF: sub_40E3E0+32↑j
.text:0040E458                 mov     edx, [esp+2Ch+var_18]
.text:0040E45C
.text:0040E45C loc_40E45C:                             ; CODE XREF: sub_40E3E0+76↑j
.text:0040E45C                                         ; sub_40E3E0+9B↓j
.text:0040E45C                 add     esp, 1Ch
.text:0040E45F                 mov     eax, edx
.text:0040E461                 pop     ebx
.text:0040E462                 pop     esi
.text:0040E463                 pop     edi
.text:0040E464                 pop     ebp
.text:0040E465                 retn
.text:0040E466 ; ---------------------------------------------------------------------------
.text:0040E466
.text:0040E466 loc_40E466:                             ; CODE XREF: sub_40E3E0+5A↑j
.text:0040E466                 mov     eax, [esp+2Ch+arg_4]
.text:0040E46A                 mov     edi, [eax+ebx*4]
.text:0040E46D                 mov     [esp+2Ch+Str], edi ; Str
.text:0040E470                 call    strlen
.text:0040E475                 cmp     eax, [esp+2Ch+var_14]
.text:0040E479                 mov     edx, ebx
.text:0040E47B                 jz      short loc_40E45C
.text:0040E47D                 cmp     [esp+2Ch+var_18], 0FFFFFFFFh
.text:0040E482                 jz      short loc_40E4B3
.text:0040E484                 mov     ecx, [esp+2Ch+arg_8]
.text:0040E488                 test    ecx, ecx
.text:0040E48A                 jz      short loc_40E4AC
.text:0040E48C                 cld
.text:0040E48D                 mov     edi, [esp+2Ch+var_18]
.text:0040E491                 mov     ecx, ebp
.text:0040E493                 mov     esi, [esp+2Ch+arg_8]
.text:0040E497                 mov     edx, [esp+2Ch+var_20]
.text:0040E49B                 imul    edi, ebp
.text:0040E49E                 add     esi, edi
.text:0040E4A0                 mov     edi, [esp+2Ch+arg_8]
.text:0040E4A4                 add     edi, edx
.text:0040E4A6                 cmp     ebp, ebp
.text:0040E4A8                 repe cmpsb
.text:0040E4AA                 jz      short loc_40E43C
.text:0040E4AC
.text:0040E4AC loc_40E4AC:                             ; CODE XREF: sub_40E3E0+AA↑j
.text:0040E4AC                 mov     [esp+2Ch+var_19], 1
.text:0040E4B1                 jmp     short loc_40E43C
.text:0040E4B3 ; ---------------------------------------------------------------------------
.text:0040E4B3
.text:0040E4B3 loc_40E4B3:                             ; CODE XREF: sub_40E3E0+A2↑j
.text:0040E4B3                 mov     [esp+2Ch+var_18], ebx
.text:0040E4B7                 jmp     short loc_40E43C
.text:0040E4B7 sub_40E3E0      endp
.text:0040E4B7
.text:0040E4B7 ; ---------------------------------------------------------------------------
.text:0040E4B9 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.text:0040E4B9                                         ; DATA XREF: .text:0040E512↓o
.text:0040E4B9                                         ; .text:0040E75A↓o
.text:0040E4D6 aInvalidArgumen db 'invalid argument %s for %s',0
.text:0040E4D6                                         ; DATA XREF: .text:loc_40E580↓o
.text:0040E4D6                                         ; .text:loc_40E8F6↓o
.text:0040E4F1 ; ---------------------------------------------------------------------------
.text:0040E4F1                 jmp     short loc_40E500
.text:0040E4F1 ; ---------------------------------------------------------------------------
.text:0040E4F3                 align 10h
.text:0040E500
.text:0040E500 loc_40E500:                             ; CODE XREF: .text:0040E4F1↑j
.text:0040E500                 sub     esp, 1Ch
.text:0040E503                 cmp     dword ptr [esp+28h], 0FFFFFFFFh
.text:0040E508                 mov     [esp+14h], ebx
.text:0040E50C                 mov     [esp+18h], esi
.text:0040E510                 jz      short loc_40E580
.text:0040E512                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0040E519
.text:0040E519 loc_40E519:                             ; CODE XREF: .text:0040E587↓j
.text:0040E519                 call    ds:libintl_gettext
.text:0040E51F                 mov     dword ptr [esp], 1
.text:0040E526                 mov     edx, [esp+20h]
.text:0040E52A                 mov     esi, eax
.text:0040E52C                 mov     [esp+4], edx
.text:0040E530                 call    sub_40ABE0
.text:0040E535                 mov     dword ptr [esp+4], 5
.text:0040E53D                 mov     edx, [esp+24h]
.text:0040E541                 mov     ebx, eax
.text:0040E543                 mov     dword ptr [esp], 0
.text:0040E54A                 mov     [esp+8], edx
.text:0040E54E                 call    sub_405E40
.text:0040E553                 mov     [esp+0Ch], eax
.text:0040E557                 mov     [esp+10h], ebx
.text:0040E55B                 mov     [esp+8], esi
.text:0040E55F                 mov     dword ptr [esp+4], 0
.text:0040E567                 mov     dword ptr [esp], 0
.text:0040E56E                 call    sub_40E9E0
.text:0040E573                 mov     ebx, [esp+14h]
.text:0040E577                 mov     esi, [esp+18h]
.text:0040E57B                 add     esp, 1Ch
.text:0040E57E                 retn
.text:0040E57E ; ---------------------------------------------------------------------------
.text:0040E57F                 align 10h
.text:0040E580
.text:0040E580 loc_40E580:                             ; CODE XREF: .text:0040E510↑j
.text:0040E580                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:0040E587                 jmp     short loc_40E519
.text:0040E587 ; ---------------------------------------------------------------------------
.text:0040E589 aValidArguments db 'Valid arguments are:',0
.text:0040E589                                         ; DATA XREF: .text:0040E5D3↓o
.text:0040E589                                         ; .text:0040E7CB↓o
.text:0040E59E ; ---------------------------------------------------------------------------
.text:0040E59E
.text:0040E59E loc_40E59E:                             ; DATA XREF: .text:0040E64D↓o
.text:0040E59E                                         ; .text:loc_40E838↓o
.text:0040E59E                 or      ah, [eax]
.text:0040E5A0                 and     ds:73256020h, ch
.text:0040E5A6                 daa
.text:0040E5A7                 add     [eax], ch
.text:0040E5AA                 pusha
.text:0040E5AB                 and     eax, 90002773h
.text:0040E5B0                 push    ebp
.text:0040E5B1                 push    edi
.text:0040E5B2                 push    esi
.text:0040E5B3                 push    ebx
.text:0040E5B4                 sub     esp, 2Ch
.text:0040E5B7                 mov     ecx, [esp+40h]
.text:0040E5BB                 mov     dword ptr [esp+1Ch], 0
.text:0040E5C3                 mov     eax, [esp+44h]
.text:0040E5C7                 mov     ebp, [esp+48h]
.text:0040E5CB                 mov     [esp+28h], ecx
.text:0040E5CF                 mov     [esp+24h], eax
.text:0040E5D3                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:0040E5DA                 call    ds:libintl_gettext
.text:0040E5E0                 mov     edx, ds:_iob
.text:0040E5E6                 add     edx, 40h ; '@'
.text:0040E5E9                 mov     [esp], edx
.text:0040E5EC                 mov     [esp+4], eax
.text:0040E5F0                 call    fprintf
.text:0040E5F5                 mov     dword ptr [esp+20h], 0
.text:0040E5FD                 mov     edx, [esp+28h]
.text:0040E601                 mov     eax, [edx]
.text:0040E603                 test    eax, eax
.text:0040E605                 jz      short loc_40E685
.text:0040E607                 mov     dword ptr [esp+14h], 0
.text:0040E60F                 mov     esi, [esp+24h]
.text:0040E613                 mov     ebx, eax
.text:0040E615                 mov     [esp+18h], esi
.text:0040E619                 lea     esi, [esi+0]
.text:0040E620
.text:0040E620 loc_40E620:                             ; CODE XREF: .text:0040E683↓j
.text:0040E620                 mov     edi, [esp+20h]
.text:0040E624                 test    edi, edi
.text:0040E626                 jz      short loc_40E643
.text:0040E628                 cld
.text:0040E629                 mov     edi, [esp+24h]
.text:0040E62D                 mov     ecx, ebp
.text:0040E62F                 mov     edx, [esp+14h]
.text:0040E633                 mov     esi, [esp+1Ch]
.text:0040E637                 add     edi, edx
.text:0040E639                 cmp     ebp, ebp
.text:0040E63B                 repe cmpsb
.text:0040E63D                 jz      loc_40E6D0
.text:0040E643
.text:0040E643 loc_40E643:                             ; CODE XREF: .text:0040E626↑j
.text:0040E643                 mov     [esp+8], ebx
.text:0040E647                 mov     ecx, ds:_iob
.text:0040E64D                 mov     dword ptr [esp+4], offset loc_40E59E
.text:0040E655                 add     ecx, 40h ; '@'
.text:0040E658                 mov     [esp], ecx
.text:0040E65B                 call    fprintf
.text:0040E660                 mov     ebx, [esp+18h]
.text:0040E664                 mov     [esp+1Ch], ebx
.text:0040E668
.text:0040E668 loc_40E668:                             ; CODE XREF: .text:0040E6ED↓j
.text:0040E668                 inc     dword ptr [esp+20h]
.text:0040E66C                 mov     eax, [esp+28h]
.text:0040E670                 add     [esp+14h], ebp
.text:0040E674                 mov     edx, [esp+20h]
.text:0040E678                 add     [esp+18h], ebp
.text:0040E67C                 mov     edi, [eax+edx*4]
.text:0040E67F                 test    edi, edi
.text:0040E681                 mov     ebx, edi
.text:0040E683                 jnz     short loc_40E620
.text:0040E685
.text:0040E685 loc_40E685:                             ; CODE XREF: .text:0040E605↑j
.text:0040E685                 mov     ebx, ds:_iob
.text:0040E68B                 mov     ebp, [ebx+44h]
.text:0040E68E                 dec     ebp
.text:0040E68F                 mov     [ebx+44h], ebp
.text:0040E692                 test    ebp, ebp
.text:0040E694                 js      short loc_40E6AD
.text:0040E696                 mov     ecx, ds:_iob
.text:0040E69C                 mov     esi, [ecx+40h]
.text:0040E69F                 mov     byte ptr [esi], 0Ah
.text:0040E6A2                 inc     dword ptr [ecx+40h]
.text:0040E6A5                 add     esp, 2Ch
.text:0040E6A8                 pop     ebx
.text:0040E6A9                 pop     esi
.text:0040E6AA                 pop     edi
.text:0040E6AB                 pop     ebp
.text:0040E6AC                 retn
.text:0040E6AD ; ---------------------------------------------------------------------------
.text:0040E6AD
.text:0040E6AD loc_40E6AD:                             ; CODE XREF: .text:0040E694↑j
.text:0040E6AD                 mov     dword ptr [esp+40h], 0Ah
.text:0040E6B5                 mov     edi, ds:_iob
.text:0040E6BB                 add     edi, 40h ; '@'
.text:0040E6BE                 mov     [esp+44h], edi
.text:0040E6C2                 add     esp, 2Ch
.text:0040E6C5                 pop     ebx
.text:0040E6C6                 pop     esi
.text:0040E6C7                 pop     edi
.text:0040E6C8                 pop     ebp
.text:0040E6C9                 jmp     _flsbuf
.text:0040E6C9 ; ---------------------------------------------------------------------------
.text:0040E6CE                 align 10h
.text:0040E6D0
.text:0040E6D0 loc_40E6D0:                             ; CODE XREF: .text:0040E63D↑j
.text:0040E6D0                 mov     [esp+8], ebx
.text:0040E6D4                 mov     esi, ds:_iob
.text:0040E6DA                 mov     dword ptr [esp+4], 40E5A8h
.text:0040E6E2                 add     esi, 40h ; '@'
.text:0040E6E5                 mov     [esp], esi
.text:0040E6E8                 call    fprintf
.text:0040E6ED                 jmp     loc_40E668
.text:0040E6ED ; ---------------------------------------------------------------------------
.text:0040E6F2                 align 10h
.text:0040E700                 sub     esp, 4Ch
.text:0040E703                 mov     edx, [esp+60h]
.text:0040E707                 mov     [esp+3Ch], ebx
.text:0040E70B                 mov     ebx, [esp+5Ch]
.text:0040E70F                 mov     [esp+40h], esi
.text:0040E713                 mov     esi, [esp+54h]
.text:0040E717                 mov     [esp+48h], ebp
.text:0040E71B                 mov     ebp, [esp+58h]
.text:0040E71F                 mov     [esp+0Ch], edx
.text:0040E723                 mov     [esp+44h], edi
.text:0040E727                 mov     [esp+8], ebx
.text:0040E72B                 mov     [esp+4], ebp
.text:0040E72F                 mov     [esp], esi
.text:0040E732                 call    sub_40E3E0
.text:0040E737                 test    eax, eax
.text:0040E739                 mov     edx, eax
.text:0040E73B                 js      short loc_40E753
.text:0040E73D
.text:0040E73D loc_40E73D:                             ; CODE XREF: .text:0040E8AA↓j
.text:0040E73D                 mov     ebx, [esp+3Ch]
.text:0040E741                 mov     eax, edx
.text:0040E743                 mov     esi, [esp+40h]
.text:0040E747                 mov     edi, [esp+44h]
.text:0040E74B                 mov     ebp, [esp+48h]
.text:0040E74F                 add     esp, 4Ch
.text:0040E752                 retn
.text:0040E753 ; ---------------------------------------------------------------------------
.text:0040E753
.text:0040E753 loc_40E753:                             ; CODE XREF: .text:0040E73B↑j
.text:0040E753                 inc     eax
.text:0040E754                 jz      loc_40E8F6
.text:0040E75A                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0040E761
.text:0040E761 loc_40E761:                             ; CODE XREF: .text:0040E8FD↓j
.text:0040E761                 call    ds:libintl_gettext
.text:0040E767                 mov     dword ptr [esp], 1
.text:0040E76E                 mov     edi, [esp+50h]
.text:0040E772                 mov     [esp+38h], eax
.text:0040E776                 mov     [esp+4], edi
.text:0040E77A                 call    sub_40ABE0
.text:0040E77F                 mov     [esp+34h], eax
.text:0040E783                 mov     [esp+8], esi
.text:0040E787                 mov     dword ptr [esp+4], 5
.text:0040E78F                 mov     dword ptr [esp], 0
.text:0040E796                 call    sub_405E40
.text:0040E79B                 mov     [esp+0Ch], eax
.text:0040E79F                 mov     ecx, [esp+34h]
.text:0040E7A3                 mov     eax, [esp+38h]
.text:0040E7A7                 mov     dword ptr [esp+4], 0
.text:0040E7AF                 mov     [esp+10h], ecx
.text:0040E7B3                 mov     [esp+8], eax
.text:0040E7B7                 mov     dword ptr [esp], 0
.text:0040E7BE                 call    sub_40E9E0
.text:0040E7C3                 mov     dword ptr [esp+2Ch], 0
.text:0040E7CB                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:0040E7D2                 call    ds:libintl_gettext
.text:0040E7D8                 mov     edx, ds:_iob
.text:0040E7DE                 add     edx, 40h ; '@'
.text:0040E7E1                 mov     [esp+4], eax
.text:0040E7E5                 mov     [esp], edx
.text:0040E7E8                 call    fprintf
.text:0040E7ED                 mov     dword ptr [esp+30h], 0
.text:0040E7F5                 mov     eax, [ebp+0]
.text:0040E7F8                 test    eax, eax
.text:0040E7FA                 jz      loc_40E881
.text:0040E800                 mov     [esp+28h], eax
.text:0040E804                 mov     [esp+24h], ebx
.text:0040E808                 mov     dword ptr [esp+20h], 0
.text:0040E810
.text:0040E810 loc_40E810:                             ; CODE XREF: .text:0040E87F↓j
.text:0040E810                 mov     esi, [esp+30h]
.text:0040E814                 test    esi, esi
.text:0040E816                 jz      short loc_40E838
.text:0040E818                 cld
.text:0040E819                 mov     eax, [esp+20h]
.text:0040E81D                 mov     edx, [esp+60h]
.text:0040E821                 mov     esi, [esp+2Ch]
.text:0040E825                 lea     ecx, [eax+ebx]
.text:0040E828                 mov     edi, ecx
.text:0040E82A                 mov     ecx, [esp+60h]
.text:0040E82E                 cmp     edx, edx
.text:0040E830                 repe cmpsb
.text:0040E832                 jz      loc_40E8D0
.text:0040E838
.text:0040E838 loc_40E838:                             ; CODE XREF: .text:0040E816↑j
.text:0040E838                 mov     dword ptr [esp+4], offset loc_40E59E
.text:0040E840                 mov     esi, ds:_iob
.text:0040E846                 mov     ecx, [esp+28h]
.text:0040E84A                 add     esi, 40h ; '@'
.text:0040E84D                 mov     [esp+8], ecx
.text:0040E851                 mov     [esp], esi
.text:0040E854                 call    fprintf
.text:0040E859                 mov     edi, [esp+24h]
.text:0040E85D                 mov     [esp+2Ch], edi
.text:0040E861
.text:0040E861 loc_40E861:                             ; CODE XREF: .text:0040E8F1↓j
.text:0040E861                 inc     dword ptr [esp+30h]
.text:0040E865                 mov     ecx, [esp+60h]
.text:0040E869                 add     [esp+20h], ecx
.text:0040E86D                 mov     esi, [esp+30h]
.text:0040E871                 add     [esp+24h], ecx
.text:0040E875                 mov     edi, [ebp+esi*4+0]
.text:0040E879                 test    edi, edi
.text:0040E87B                 mov     [esp+28h], edi
.text:0040E87F                 jnz     short loc_40E810
.text:0040E881
.text:0040E881 loc_40E881:                             ; CODE XREF: .text:0040E7FA↑j
.text:0040E881                 mov     ebp, ds:_iob
.text:0040E887                 mov     ebx, [ebp+44h]
.text:0040E88A                 dec     ebx
.text:0040E88B                 mov     [ebp+44h], ebx
.text:0040E88E                 test    ebx, ebx
.text:0040E890                 js      short loc_40E8AF
.text:0040E892                 mov     edi, ds:_iob
.text:0040E898                 mov     eax, [edi+40h]
.text:0040E89B                 mov     byte ptr [eax], 0Ah
.text:0040E89E                 inc     dword ptr [edi+40h]
.text:0040E8A1
.text:0040E8A1 loc_40E8A1:                             ; CODE XREF: .text:0040E8C8↓j
.text:0040E8A1                 call    dword ptr [esp+64h]
.text:0040E8A5                 mov     edx, 0FFFFFFFFh
.text:0040E8AA                 jmp     loc_40E73D
.text:0040E8AF ; ---------------------------------------------------------------------------
.text:0040E8AF
.text:0040E8AF loc_40E8AF:                             ; CODE XREF: .text:0040E890↑j
.text:0040E8AF                 mov     dword ptr [esp], 0Ah
.text:0040E8B6                 mov     edx, ds:_iob
.text:0040E8BC                 add     edx, 40h ; '@'
.text:0040E8BF                 mov     [esp+4], edx
.text:0040E8C3                 call    _flsbuf
.text:0040E8C8                 jmp     short loc_40E8A1
.text:0040E8C8 ; ---------------------------------------------------------------------------
.text:0040E8CA                 align 10h
.text:0040E8D0
.text:0040E8D0 loc_40E8D0:                             ; CODE XREF: .text:0040E832↑j
.text:0040E8D0                 mov     dword ptr [esp+4], 40E5A8h
.text:0040E8D8                 mov     edx, ds:_iob
.text:0040E8DE                 mov     eax, [esp+28h]
.text:0040E8E2                 add     edx, 40h ; '@'
.text:0040E8E5                 mov     [esp+8], eax
.text:0040E8E9                 mov     [esp], edx
.text:0040E8EC                 call    fprintf
.text:0040E8F1                 jmp     loc_40E861
.text:0040E8F6 ; ---------------------------------------------------------------------------
.text:0040E8F6
.text:0040E8F6 loc_40E8F6:                             ; CODE XREF: .text:0040E754↑j
.text:0040E8F6                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:0040E8FD                 jmp     loc_40E761
.text:0040E8FD ; ---------------------------------------------------------------------------
.text:0040E902                 align 10h
.text:0040E910                 push    ebp
.text:0040E911                 push    edi
.text:0040E912                 push    esi
.text:0040E913                 push    ebx
.text:0040E914                 sub     esp, 4
.text:0040E917                 mov     ecx, [esp+1Ch]
.text:0040E91B                 mov     dword ptr [esp], 0
.text:0040E922                 mov     ebx, [esp+24h]
.text:0040E926                 mov     edx, [ecx]
.text:0040E928                 test    edx, edx
.text:0040E92A                 jz      short loc_40E955
.text:0040E92C                 cld
.text:0040E92D                 xor     ebp, ebp
.text:0040E92F                 nop
.text:0040E930
.text:0040E930 loc_40E930:                             ; CODE XREF: .text:0040E953↓j
.text:0040E930                 mov     edi, [esp+20h]
.text:0040E934                 mov     ecx, ebx
.text:0040E936                 mov     esi, [esp+18h]
.text:0040E93A                 add     edi, ebp
.text:0040E93C                 cmp     ebx, ebx
.text:0040E93E                 repe cmpsb
.text:0040E940                 jz      short loc_40E95D
.text:0040E942                 inc     dword ptr [esp]
.text:0040E945                 add     ebp, ebx
.text:0040E947                 mov     eax, [esp+1Ch]
.text:0040E94B                 mov     ecx, [esp]
.text:0040E94E                 mov     edi, [eax+ecx*4]
.text:0040E951                 test    edi, edi
.text:0040E953                 jnz     short loc_40E930
.text:0040E955
.text:0040E955 loc_40E955:                             ; CODE XREF: .text:0040E92A↑j
.text:0040E955                 xor     eax, eax
.text:0040E957
.text:0040E957 loc_40E957:                             ; CODE XREF: .text:0040E967↓j
.text:0040E957                 pop     ebp
.text:0040E958                 pop     ebx
.text:0040E959                 pop     esi
.text:0040E95A                 pop     edi
.text:0040E95B                 pop     ebp
.text:0040E95C                 retn
.text:0040E95D ; ---------------------------------------------------------------------------
.text:0040E95D
.text:0040E95D loc_40E95D:                             ; CODE XREF: .text:0040E940↑j
.text:0040E95D                 mov     esi, [esp]
.text:0040E960                 mov     ebx, [esp+1Ch]
.text:0040E964                 mov     eax, [ebx+esi*4]
.text:0040E967                 jmp     short loc_40E957
.text:0040E967 ; ---------------------------------------------------------------------------
.text:0040E969                 align 10h
.text:0040E970
.text:0040E970 ; =============== S U B R O U T I N E =======================================
.text:0040E970
.text:0040E970 ; Attributes: noreturn
.text:0040E970
.text:0040E970 sub_40E970      proc near               ; DATA XREF: .data:0041A060↓o
.text:0040E970
.text:0040E970 Code            = dword ptr -0Ch
.text:0040E970
.text:0040E970                 sub     esp, 0Ch
.text:0040E973                 mov     [esp+0Ch+Code], 1 ; Code
.text:0040E97A                 call    sub_402CA0
.text:0040E97A sub_40E970      endp
.text:0040E97A
.text:0040E97A ; ---------------------------------------------------------------------------
.text:0040E97F                 db  83h ; ƒ
.text:0040E980                 db 0C4h ; Ä
.text:0040E981                 db  0Ch
.text:0040E982                 db 0C3h ; Ã
.text:0040E983                 align 10h
.text:0040E990                 jmp     ds:libintl_bindtextdomain
.text:0040E990 ; ---------------------------------------------------------------------------
.text:0040E996                 align 10h
.text:0040E9A0                 jmp     ds:libintl_textdomain
.text:0040E9A0 ; ---------------------------------------------------------------------------
.text:0040E9A6                 align 10h
.text:0040E9B0                 jmp     ds:libintl_gettext
.text:0040E9B0 ; ---------------------------------------------------------------------------
.text:0040E9B6                 align 10h
.text:0040E9C0 ; const char aS_2[]
.text:0040E9C0 aS_2            db ': %s',0             ; DATA XREF: sub_40E9E0+B8↓o
.text:0040E9C0                                         ; sub_40EAE4+122↓o
.text:0040E9C5 aUnknownSystemE db 'Unknown system error',0
.text:0040E9C5                                         ; DATA XREF: sub_40E9E0:loc_40EAAD↓o
.text:0040E9C5                                         ; sub_40EAE4:loc_40EC1E↓o
.text:0040E9DA ; const char aS_3[]
.text:0040E9DA aS_3            db '%s: ',0             ; DATA XREF: sub_40E9E0:loc_40EAB4↓o
.text:0040E9DF                 align 10h
.text:0040E9E0
.text:0040E9E0 ; =============== S U B R O U T I N E =======================================
.text:0040E9E0
.text:0040E9E0
.text:0040E9E0 ; int __cdecl sub_40E9E0(int Code, int ErrorMessage, char *, char)
.text:0040E9E0 sub_40E9E0      proc near               ; CODE XREF: sub_402250+427↑p
.text:0040E9E0                                         ; sub_402250+45D↑p ...
.text:0040E9E0
.text:0040E9E0 Stream          = dword ptr -1Ch
.text:0040E9E0 Format          = dword ptr -18h
.text:0040E9E0 ArgList         = dword ptr -14h
.text:0040E9E0 Code            = dword ptr  4
.text:0040E9E0 ErrorMessage    = dword ptr  8
.text:0040E9E0 arg_8           = dword ptr  0Ch
.text:0040E9E0 arg_C           = byte ptr  10h
.text:0040E9E0
.text:0040E9E0                 push    esi
.text:0040E9E1                 push    ebx
.text:0040E9E2                 sub     esp, 14h
.text:0040E9E5                 mov     edx, ds:_iob
.text:0040E9EB                 mov     esi, [esp+1Ch+Code]
.text:0040E9EF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:0040E9F3                 add     edx, 20h ; ' '
.text:0040E9F6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040E9F9                 call    fflush
.text:0040E9FE                 mov     eax, ds:dword_41B640
.text:0040EA03                 test    eax, eax
.text:0040EA05                 jz      loc_40EAB4
.text:0040EA0B                 call    eax ; dword_41B640
.text:0040EA0D
.text:0040EA0D loc_40EA0D:                             ; CODE XREF: sub_40E9E0+F7↓j
.text:0040EA0D                 lea     edx, [esp+1Ch+arg_C]
.text:0040EA11                 mov     ecx, [esp+1Ch+arg_8]
.text:0040EA15                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:0040EA19                 mov     edx, ds:_iob
.text:0040EA1F                 mov     [esp+1Ch+Format], ecx ; Format
.text:0040EA23                 add     edx, 40h ; '@'
.text:0040EA26                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040EA29                 call    vfprintf
.text:0040EA2E                 inc     ds:dword_41B650
.text:0040EA34                 test    ebx, ebx
.text:0040EA36                 jnz     short loc_40EA82
.text:0040EA38
.text:0040EA38 loc_40EA38:                             ; CODE XREF: sub_40E9E0+CB↓j
.text:0040EA38                 mov     edx, ds:_iob
.text:0040EA3E                 lea     ecx, [edx+40h]
.text:0040EA41                 mov     ebx, [ecx+4]
.text:0040EA44                 dec     ebx
.text:0040EA45                 test    ebx, ebx
.text:0040EA47                 mov     [ecx+4], ebx
.text:0040EA4A                 js      short loc_40EA70
.text:0040EA4C                 mov     ecx, [edx+40h]
.text:0040EA4F                 mov     byte ptr [ecx], 0Ah
.text:0040EA52                 inc     dword ptr [edx+40h]
.text:0040EA55
.text:0040EA55 loc_40EA55:                             ; CODE XREF: sub_40E9E0+A0↓j
.text:0040EA55                 mov     edx, ds:_iob
.text:0040EA5B                 add     edx, 40h ; '@'
.text:0040EA5E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040EA61                 call    fflush
.text:0040EA66                 test    esi, esi
.text:0040EA68                 jnz     short loc_40EADC
.text:0040EA6A                 add     esp, 14h
.text:0040EA6D                 pop     ebx
.text:0040EA6E                 pop     esi
.text:0040EA6F                 retn
.text:0040EA70 ; ---------------------------------------------------------------------------
.text:0040EA70
.text:0040EA70 loc_40EA70:                             ; CODE XREF: sub_40E9E0+6A↑j
.text:0040EA70                 mov     [esp+1Ch+Format], ecx ; File
.text:0040EA74                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040EA7B                 call    _flsbuf
.text:0040EA80                 jmp     short loc_40EA55
.text:0040EA82 ; ---------------------------------------------------------------------------
.text:0040EA82
.text:0040EA82 loc_40EA82:                             ; CODE XREF: sub_40E9E0+56↑j
.text:0040EA82                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:0040EA85                 call    strerror
.text:0040EA8A                 test    eax, eax
.text:0040EA8C                 jz      short loc_40EAAD
.text:0040EA8E
.text:0040EA8E loc_40EA8E:                             ; CODE XREF: sub_40E9E0+D2↓j
.text:0040EA8E                 mov     [esp+1Ch+ArgList], eax
.text:0040EA92                 mov     ebx, ds:_iob
.text:0040EA98                 mov     [esp+1Ch+Format], offset aS_2 ; ": %s"
.text:0040EAA0                 add     ebx, 40h ; '@'
.text:0040EAA3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:0040EAA6                 call    fprintf
.text:0040EAAB                 jmp     short loc_40EA38
.text:0040EAAD ; ---------------------------------------------------------------------------
.text:0040EAAD
.text:0040EAAD loc_40EAAD:                             ; CODE XREF: sub_40E9E0+AC↑j
.text:0040EAAD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040EAB2                 jmp     short loc_40EA8E
.text:0040EAB4 ; ---------------------------------------------------------------------------
.text:0040EAB4
.text:0040EAB4 loc_40EAB4:                             ; CODE XREF: sub_40E9E0+25↑j
.text:0040EAB4                 mov     [esp+1Ch+Format], offset aS_3 ; "%s: "
.text:0040EABC                 mov     edx, ds:_iob
.text:0040EAC2                 mov     ecx, ds:dword_41B610
.text:0040EAC8                 add     edx, 40h ; '@'
.text:0040EACB                 mov     [esp+1Ch+ArgList], ecx
.text:0040EACF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040EAD2                 call    fprintf
.text:0040EAD7                 jmp     loc_40EA0D
.text:0040EADC ; ---------------------------------------------------------------------------
.text:0040EADC
.text:0040EADC loc_40EADC:                             ; CODE XREF: sub_40E9E0+88↑j
.text:0040EADC                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040EADF                 call    exit
.text:0040EADF sub_40E9E0      endp
.text:0040EADF
.text:0040EAE4
.text:0040EAE4 ; =============== S U B R O U T I N E =======================================
.text:0040EAE4
.text:0040EAE4
.text:0040EAE4 ; int __cdecl sub_40EAE4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:0040EAE4 sub_40EAE4      proc near               ; DATA XREF: sub_40EAE4+77↓o
.text:0040EAE4
.text:0040EAE4 Stream          = dword ptr -28h
.text:0040EAE4 Format          = dword ptr -24h
.text:0040EAE4 ArgList         = dword ptr -20h
.text:0040EAE4 var_1C          = dword ptr -1Ch
.text:0040EAE4 Code            = dword ptr  8
.text:0040EAE4 ErrorMessage    = dword ptr  0Ch
.text:0040EAE4 Str2            = dword ptr  10h
.text:0040EAE4 arg_10          = dword ptr  14h
.text:0040EAE4 arg_14          = dword ptr  18h
.text:0040EAE4 arg_18          = byte ptr  1Ch
.text:0040EAE4
.text:0040EAE4                 and     eax, 64253A73h
.text:0040EAE9                 cmp     ah, [eax]
.text:0040EAEB
.text:0040EAEB loc_40EAEB:                             ; DATA XREF: sub_40EAE4:loc_40EC25↓o
.text:0040EAEB                 add     ds:55003A73h, ah
.text:0040EAF1                 push    edi
.text:0040EAF2                 push    esi
.text:0040EAF3                 push    ebx
.text:0040EAF4                 sub     esp, 1Ch
.text:0040EAF7                 mov     edx, ds:dword_41B680
.text:0040EAFD                 mov     ebp, [esp+28h+Code]
.text:0040EB01                 mov     edi, [esp+28h+ErrorMessage]
.text:0040EB05                 test    edx, edx
.text:0040EB07                 mov     ebx, [esp+28h+Str2]
.text:0040EB0B                 mov     esi, [esp+28h+arg_10]
.text:0040EB0F                 jz      short loc_40EB29
.text:0040EB11                 cmp     ds:dword_41B280, esi
.text:0040EB17                 jz      loc_40EC50
.text:0040EB1D
.text:0040EB1D loc_40EB1D:                             ; CODE XREF: sub_40EAE4+18D↓j
.text:0040EB1D                 mov     ds:Str1, ebx
.text:0040EB23                 mov     ds:dword_41B280, esi
.text:0040EB29
.text:0040EB29 loc_40EB29:                             ; CODE XREF: sub_40EAE4+2B↑j
.text:0040EB29                 mov     edx, ds:_iob
.text:0040EB2F                 add     edx, 20h ; ' '
.text:0040EB32                 mov     [esp+28h+Stream], edx ; Stream
.text:0040EB35                 call    fflush
.text:0040EB3A                 mov     eax, ds:dword_41B640
.text:0040EB3F                 test    eax, eax
.text:0040EB41                 jz      loc_40EC25
.text:0040EB47                 call    eax ; dword_41B640
.text:0040EB49
.text:0040EB49 loc_40EB49:                             ; CODE XREF: sub_40EAE4+164↓j
.text:0040EB49                 test    ebx, ebx
.text:0040EB4B                 jz      short loc_40EB6E
.text:0040EB4D                 mov     [esp+28h+ArgList], ebx
.text:0040EB51                 mov     ebx, ds:_iob
.text:0040EB57                 mov     [esp+28h+var_1C], esi
.text:0040EB5B                 mov     [esp+28h+Format], offset sub_40EAE4 ; Format
.text:0040EB63                 add     ebx, 40h ; '@'
.text:0040EB66                 mov     [esp+28h+Stream], ebx ; Stream
.text:0040EB69                 call    fprintf
.text:0040EB6E
.text:0040EB6E loc_40EB6E:                             ; CODE XREF: sub_40EAE4+67↑j
.text:0040EB6E                 mov     esi, ds:_iob
.text:0040EB74                 lea     edx, [esp+28h+arg_18]
.text:0040EB78                 mov     ecx, [esp+28h+arg_14]
.text:0040EB7C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:0040EB80                 add     esi, 40h ; '@'
.text:0040EB83                 mov     [esp+28h+Format], ecx ; Format
.text:0040EB87                 mov     [esp+28h+Stream], esi ; Stream
.text:0040EB8A                 call    vfprintf
.text:0040EB8F                 inc     ds:dword_41B650
.text:0040EB95                 test    edi, edi
.text:0040EB97                 jnz     short loc_40EBF0
.text:0040EB99
.text:0040EB99 loc_40EB99:                             ; CODE XREF: sub_40EAE4+135↓j
.text:0040EB99                 mov     edx, ds:_iob
.text:0040EB9F                 lea     ecx, [edx+40h]
.text:0040EBA2                 mov     ebx, [ecx+4]
.text:0040EBA5                 dec     ebx
.text:0040EBA6                 test    ebx, ebx
.text:0040EBA8                 mov     [ecx+4], ebx
.text:0040EBAB                 js      short loc_40EBD7
.text:0040EBAD                 mov     esi, [edx+40h]
.text:0040EBB0                 mov     byte ptr [esi], 0Ah
.text:0040EBB3                 inc     dword ptr [edx+40h]
.text:0040EBB6
.text:0040EBB6 loc_40EBB6:                             ; CODE XREF: sub_40EAE4+103↓j
.text:0040EBB6                 mov     ecx, ds:_iob
.text:0040EBBC                 add     ecx, 40h ; '@'
.text:0040EBBF                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040EBC2                 call    fflush
.text:0040EBC7                 test    ebp, ebp
.text:0040EBC9                 jnz     loc_40EC76
.text:0040EBCF
.text:0040EBCF loc_40EBCF:                             ; CODE XREF: sub_40EAE4+173↓j
.text:0040EBCF                                         ; sub_40EAE4+187↓j
.text:0040EBCF                 add     esp, 1Ch
.text:0040EBD2                 pop     ebx
.text:0040EBD3                 pop     esi
.text:0040EBD4                 pop     edi
.text:0040EBD5                 pop     ebp
.text:0040EBD6                 retn
.text:0040EBD7 ; ---------------------------------------------------------------------------
.text:0040EBD7
.text:0040EBD7 loc_40EBD7:                             ; CODE XREF: sub_40EAE4+C7↑j
.text:0040EBD7                 mov     [esp+28h+Format], ecx ; File
.text:0040EBDB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:0040EBE2                 call    _flsbuf
.text:0040EBE7                 jmp     short loc_40EBB6
.text:0040EBE7 ; ---------------------------------------------------------------------------
.text:0040EBE9                 align 10h
.text:0040EBF0
.text:0040EBF0 loc_40EBF0:                             ; CODE XREF: sub_40EAE4+B3↑j
.text:0040EBF0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:0040EBF3                 call    strerror
.text:0040EBF8                 test    eax, eax
.text:0040EBFA                 jz      short loc_40EC1E
.text:0040EBFC
.text:0040EBFC loc_40EBFC:                             ; CODE XREF: sub_40EAE4+13F↓j
.text:0040EBFC                 mov     [esp+28h+ArgList], eax
.text:0040EC00                 mov     edi, ds:_iob
.text:0040EC06                 mov     [esp+28h+Format], offset aS_2 ; ": %s"
.text:0040EC0E                 add     edi, 40h ; '@'
.text:0040EC11                 mov     [esp+28h+Stream], edi ; Stream
.text:0040EC14                 call    fprintf
.text:0040EC19                 jmp     loc_40EB99
.text:0040EC1E ; ---------------------------------------------------------------------------
.text:0040EC1E
.text:0040EC1E loc_40EC1E:                             ; CODE XREF: sub_40EAE4+116↑j
.text:0040EC1E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040EC23                 jmp     short loc_40EBFC
.text:0040EC25 ; ---------------------------------------------------------------------------
.text:0040EC25
.text:0040EC25 loc_40EC25:                             ; CODE XREF: sub_40EAE4+5D↑j
.text:0040EC25                 mov     [esp+28h+Format], (offset loc_40EAEB+1) ; Format
.text:0040EC2D                 mov     ecx, ds:_iob
.text:0040EC33                 mov     edx, ds:dword_41B610
.text:0040EC39                 add     ecx, 40h ; '@'
.text:0040EC3C                 mov     [esp+28h+ArgList], edx
.text:0040EC40                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040EC43                 call    fprintf
.text:0040EC48                 jmp     loc_40EB49
.text:0040EC48 ; ---------------------------------------------------------------------------
.text:0040EC4D                 align 10h
.text:0040EC50
.text:0040EC50 loc_40EC50:                             ; CODE XREF: sub_40EAE4+33↑j
.text:0040EC50                 mov     eax, ds:Str1
.text:0040EC55                 cmp     ebx, eax
.text:0040EC57                 jz      loc_40EBCF
.text:0040EC5D                 mov     [esp+28h+Format], ebx ; Str2
.text:0040EC61                 mov     [esp+28h+Stream], eax ; Str1
.text:0040EC64                 call    strcmp
.text:0040EC69                 test    eax, eax
.text:0040EC6B                 jz      loc_40EBCF
.text:0040EC71                 jmp     loc_40EB1D
.text:0040EC76 ; ---------------------------------------------------------------------------
.text:0040EC76
.text:0040EC76 loc_40EC76:                             ; CODE XREF: sub_40EAE4+E5↑j
.text:0040EC76                 mov     [esp+28h+Stream], ebp ; Code
.text:0040EC79                 call    exit
.text:0040EC79 sub_40EAE4      endp ; sp-analysis failed
.text:0040EC79
.text:0040EC79 ; ---------------------------------------------------------------------------
.text:0040EC7E                 align 10h
.text:0040EC80
.text:0040EC80 ; =============== S U B R O U T I N E =======================================
.text:0040EC80
.text:0040EC80
.text:0040EC80 sub_40EC80      proc near               ; CODE XREF: sub_404D70+7C↑p
.text:0040EC80
.text:0040EC80 hNamedPipe      = dword ptr -0Ch
.text:0040EC80 var_8           = dword ptr -8
.text:0040EC80 var_4           = dword ptr -4
.text:0040EC80 arg_0           = dword ptr  4
.text:0040EC80 arg_4           = dword ptr  8
.text:0040EC80
.text:0040EC80                 sub     esp, 0Ch
.text:0040EC83                 mov     edx, [esp+0Ch+arg_4]
.text:0040EC87                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:0040EC8E                 mov     [esp+0Ch+var_4], edx ; int
.text:0040EC92                 mov     edx, [esp+0Ch+arg_0]
.text:0040EC96                 mov     [esp+0Ch+var_8], edx ; int
.text:0040EC9A                 call    sub_40EEF0
.text:0040EC9F                 add     esp, 0Ch
.text:0040ECA2                 retn
.text:0040ECA2 sub_40EC80      endp
.text:0040ECA2
.text:0040ECA2 ; ---------------------------------------------------------------------------
.text:0040ECA3 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:0040ECA3                                         ; DATA XREF: .text:0040ED8E↓o
.text:0040ECB6 aModeO          db 'mode:      %#o',0Ah,0
.text:0040ECB6                                         ; DATA XREF: .text:0040EDA4↓o
.text:0040ECC6 aUidLd          db 'uid:       %ld',0Ah,0
.text:0040ECC6                                         ; DATA XREF: .text:0040EDB7↓o
.text:0040ECD6 aGidLd          db 'gid:       %ld',0Ah,0
.text:0040ECD6                                         ; DATA XREF: .text:0040EDCA↓o
.text:0040ECE6 aDevLu          db 'dev:       %lu',0Ah,0
.text:0040ECE6                                         ; DATA XREF: .text:0040EDDD↓o
.text:0040ECF6 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:0040ECF6                                         ; DATA XREF: .text:0040EDF0↓o
.text:0040ED06 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:0040ED06                                         ; DATA XREF: .text:0040EE06↓o
.text:0040ED18 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:0040ED18                                         ; DATA XREF: .text:0040EE1D↓o
.text:0040ED27 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:0040ED27                                         ; DATA XREF: .text:0040EE33↓o
.text:0040ED39 aAtimeLdS       db 'atime:     %ld: %s',0
.text:0040ED39                                         ; DATA XREF: .text:0040EE59↓o
.text:0040ED4C aMtimeLdS       db 'mtime:     %ld: %s',0
.text:0040ED4C                                         ; DATA XREF: .text:0040EE7B↓o
.text:0040ED5F aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:0040ED5F                                         ; DATA XREF: .text:0040EE9D↓o
.text:0040ED73                 align 10h
.text:0040ED80                 push    ebx
.text:0040ED81                 sub     esp, 18h
.text:0040ED84                 mov     ebx, [esp+20h]
.text:0040ED88                 mov     edx, [ebx+8]
.text:0040ED8B                 mov     ecx, [ebx+0Ch]
.text:0040ED8E                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:0040ED95                 mov     [esp+4], edx
.text:0040ED99                 mov     [esp+8], ecx
.text:0040ED9D                 call    printf
.text:0040EDA2                 mov     ecx, [ebx]
.text:0040EDA4                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:0040EDAB                 mov     [esp+4], ecx
.text:0040EDAF                 call    printf
.text:0040EDB4                 mov     edx, [ebx+1Ch]
.text:0040EDB7                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:0040EDBE                 mov     [esp+4], edx
.text:0040EDC2                 call    printf
.text:0040EDC7                 mov     ecx, [ebx+20h]
.text:0040EDCA                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:0040EDD1                 mov     [esp+4], ecx
.text:0040EDD5                 call    printf
.text:0040EDDA                 mov     edx, [ebx+10h]
.text:0040EDDD                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:0040EDE4                 mov     [esp+4], edx
.text:0040EDE8                 call    printf
.text:0040EDED                 mov     ecx, [ebx+18h]
.text:0040EDF0                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:0040EDF7                 mov     [esp+4], ecx
.text:0040EDFB                 call    printf
.text:0040EE00                 mov     edx, [ebx+30h]
.text:0040EE03                 mov     ecx, [ebx+34h]
.text:0040EE06                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:0040EE0D                 mov     [esp+4], edx
.text:0040EE11                 mov     [esp+8], ecx
.text:0040EE15                 call    printf
.text:0040EE1A                 mov     ecx, [ebx+50h]
.text:0040EE1D                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:0040EE24                 mov     [esp+4], ecx
.text:0040EE28                 call    printf
.text:0040EE2D                 mov     ecx, [ebx+5Ch]
.text:0040EE30                 mov     edx, [ebx+58h]
.text:0040EE33                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:0040EE3A                 mov     [esp+8], ecx
.text:0040EE3E                 mov     [esp+4], edx
.text:0040EE42                 call    printf
.text:0040EE47                 lea     edx, [ebx+38h]
.text:0040EE4A                 mov     [esp], edx
.text:0040EE4D                 call    ctime
.text:0040EE52                 mov     [esp+8], eax
.text:0040EE56                 mov     ecx, [ebx+38h]
.text:0040EE59                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:0040EE60                 mov     [esp+4], ecx
.text:0040EE64                 call    printf
.text:0040EE69                 lea     edx, [ebx+40h]
.text:0040EE6C                 mov     [esp], edx
.text:0040EE6F                 call    ctime
.text:0040EE74                 mov     [esp+8], eax
.text:0040EE78                 mov     ecx, [ebx+40h]
.text:0040EE7B                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:0040EE82                 mov     [esp+4], ecx
.text:0040EE86                 call    printf
.text:0040EE8B                 lea     edx, [ebx+48h]
.text:0040EE8E                 mov     [esp], edx
.text:0040EE91                 call    ctime
.text:0040EE96                 mov     [esp+8], eax
.text:0040EE9A                 mov     edx, [ebx+48h]
.text:0040EE9D                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:0040EEA4                 mov     [esp+4], edx
.text:0040EEA8                 call    printf
.text:0040EEAD                 add     esp, 18h
.text:0040EEB0                 xor     eax, eax
.text:0040EEB2                 pop     ebx
.text:0040EEB3                 retn
.text:0040EEB3 ; ---------------------------------------------------------------------------
.text:0040EEB4                 align 10h
.text:0040EEC0 ; const char aFxstat64BadFil[]
.text:0040EEC0 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:0040EEC0                                         ; DATA XREF: sub_40EEF0+7B↓o
.text:0040EEE4                 align 10h
.text:0040EEF0
.text:0040EEF0 ; =============== S U B R O U T I N E =======================================
.text:0040EEF0
.text:0040EEF0
.text:0040EEF0 ; int __cdecl sub_40EEF0(HANDLE hNamedPipe, int, int)
.text:0040EEF0 sub_40EEF0      proc near               ; CODE XREF: sub_40EC80+1A↑p
.text:0040EEF0                                         ; .text:004118F9↓p
.text:0040EEF0
.text:0040EEF0 FileHandle      = dword ptr -1Ch
.text:0040EEF0 var_18          = dword ptr -18h
.text:0040EEF0 var_C           = dword ptr -0Ch
.text:0040EEF0 var_8           = dword ptr -8
.text:0040EEF0 var_4           = dword ptr -4
.text:0040EEF0 hNamedPipe      = dword ptr  4
.text:0040EEF0 arg_4           = dword ptr  8
.text:0040EEF0 arg_8           = dword ptr  0Ch
.text:0040EEF0
.text:0040EEF0                 sub     esp, 1Ch
.text:0040EEF3                 mov     edx, [esp+1Ch+arg_4]
.text:0040EEF7                 mov     [esp+1Ch+var_C], ebx
.text:0040EEFB                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040EEFF                 mov     [esp+1Ch+var_8], esi
.text:0040EF03                 mov     esi, [esp+1Ch+arg_8]
.text:0040EF07                 test    ebx, ebx
.text:0040EF09                 mov     [esp+1Ch+var_4], edi
.text:0040EF0D                 jnz     short loc_40EF47
.text:0040EF0F                 test    edx, edx
.text:0040EF11                 js      short loc_40EF67
.text:0040EF13                 test    esi, esi
.text:0040EF15                 jz      short loc_40EF47
.text:0040EF17                 cld
.text:0040EF18                 mov     eax, ebx
.text:0040EF1A                 mov     edi, esi
.text:0040EF1C                 mov     ecx, 18h
.text:0040EF21                 rep stosd
.text:0040EF23                 mov     [esp+1Ch+arg_4], esi ; int
.text:0040EF27                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040EF2A                 call    _get_osfhandle
.text:0040EF2F                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:0040EF33                 mov     ebx, [esp+1Ch+var_C]
.text:0040EF37                 mov     esi, [esp+1Ch+var_8]
.text:0040EF3B                 mov     edi, [esp+1Ch+var_4]
.text:0040EF3F                 add     esp, 1Ch
.text:0040EF42                 jmp     sub_40F2D0
.text:0040EF47 ; ---------------------------------------------------------------------------
.text:0040EF47
.text:0040EF47 loc_40EF47:                             ; CODE XREF: sub_40EEF0+1D↑j
.text:0040EF47                                         ; sub_40EEF0+25↑j
.text:0040EF47                 call    _errno
.text:0040EF4C                 mov     dword ptr [eax], 16h
.text:0040EF52
.text:0040EF52 loc_40EF52:                             ; CODE XREF: sub_40EEF0+92↓j
.text:0040EF52                 mov     ebx, [esp+1Ch+var_C]
.text:0040EF56                 mov     eax, 0FFFFFFFFh
.text:0040EF5B                 mov     esi, [esp+1Ch+var_8]
.text:0040EF5F                 mov     edi, [esp+1Ch+var_4]
.text:0040EF63                 add     esp, 1Ch
.text:0040EF66                 retn
.text:0040EF67 ; ---------------------------------------------------------------------------
.text:0040EF67
.text:0040EF67 loc_40EF67:                             ; CODE XREF: sub_40EEF0+21↑j
.text:0040EF67                 mov     [esp+1Ch+var_18], edx
.text:0040EF6B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:0040EF72                 call    printf
.text:0040EF77                 call    _errno
.text:0040EF7C                 mov     dword ptr [eax], 9
.text:0040EF82                 jmp     short loc_40EF52
.text:0040EF82 sub_40EEF0      endp
.text:0040EF82
.text:0040EF82 ; ---------------------------------------------------------------------------
.text:0040EF84                 align 20h
.text:0040EFA0 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:0040EFA0                                         ; DATA XREF: .data:off_41A074↓o
.text:0040EFB4 ; const CHAR LibFileName[]
.text:0040EFB4 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_40EFE0+11↓o
.text:0040EFB4                                         ; sub_40F150+C↓o ...
.text:0040EFC1 ; const CHAR ProcName[]
.text:0040EFC1 ProcName        db 'GetFileAttributesExA',0
.text:0040EFC1                                         ; DATA XREF: sub_40EFE0+28↓o
.text:0040EFD6                 align 10h
.text:0040EFE0
.text:0040EFE0 ; =============== S U B R O U T I N E =======================================
.text:0040EFE0
.text:0040EFE0
.text:0040EFE0 ; int __cdecl sub_40EFE0(LPCSTR lpFileName, int)
.text:0040EFE0 sub_40EFE0      proc near               ; CODE XREF: .text:00410184↓p
.text:0040EFE0                                         ; sub_410580+37↓p
.text:0040EFE0
.text:0040EFE0 lpModuleName    = dword ptr -18Ch
.text:0040EFE0 lpProcName      = dword ptr -188h
.text:0040EFE0 var_184         = dword ptr -184h
.text:0040EFE0 var_170         = dword ptr -170h
.text:0040EFE0 var_164         = dword ptr -164h
.text:0040EFE0 hModule         = dword ptr -160h
.text:0040EFE0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040EFE0 lpFileName      = dword ptr  4
.text:0040EFE0 arg_4           = dword ptr  8
.text:0040EFE0
.text:0040EFE0                 push    ebp
.text:0040EFE1                 push    edi
.text:0040EFE2                 push    esi
.text:0040EFE3                 push    ebx
.text:0040EFE4                 sub     esp, 17Ch
.text:0040EFEA                 mov     ebx, [esp+18Ch+arg_4]
.text:0040EFF1                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:0040EFF8                 call    GetModuleHandleA
.text:0040EFFD                 sub     esp, 4
.text:0040F000                 mov     [esp+18Ch+hModule], eax
.text:0040F004                 mov     edx, [esp+18Ch+hModule]
.text:0040F008                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:0040F010                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:0040F013                 call    GetProcAddress
.text:0040F018                 sub     esp, 8
.text:0040F01B                 mov     ebp, eax
.text:0040F01D                 mov     eax, [esp+18Ch+lpFileName]
.text:0040F024                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:0040F027                 call    GetFileAttributesA
.text:0040F02C                 sub     esp, 4
.text:0040F02F                 mov     [esp+18Ch+var_164], eax
.text:0040F033                 xor     eax, eax
.text:0040F035                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040F03A                 jz      short loc_40F091
.text:0040F03C                 cld
.text:0040F03D                 mov     ecx, 50h ; 'P'
.text:0040F042                 lea     esi, [esp+18Ch+FindFileData]
.text:0040F046                 mov     edi, esi
.text:0040F048                 test    ebp, ebp
.text:0040F04A                 rep stosd
.text:0040F04C                 mov     [esp+18Ch+var_170], 0
.text:0040F054                 jz      short loc_40F075
.text:0040F056                 mov     [esp+18Ch+var_184], ebx
.text:0040F05A                 mov     ecx, [esp+18Ch+lpFileName]
.text:0040F061                 mov     [esp+18Ch+lpProcName], 0
.text:0040F069                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040F06C                 call    ebp
.text:0040F06E                 sub     esp, 0Ch
.text:0040F071                 mov     [esp+18Ch+var_170], eax
.text:0040F075
.text:0040F075 loc_40F075:                             ; CODE XREF: sub_40EFE0+74↑j
.text:0040F075                 mov     eax, [esp+18Ch+var_170]
.text:0040F079                 test    eax, eax
.text:0040F07B                 jz      short loc_40F0A0
.text:0040F07D
.text:0040F07D loc_40F07D:                             ; CODE XREF: sub_40EFE0+131↓j
.text:0040F07D                                         ; sub_40EFE0+14B↓j
.text:0040F07D                 mov     ebx, [esp+18Ch+hModule]
.text:0040F081                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:0040F084                 call    FreeLibrary
.text:0040F089                 sub     esp, 4
.text:0040F08C                 mov     eax, 1
.text:0040F091
.text:0040F091 loc_40F091:                             ; CODE XREF: sub_40EFE0+5A↑j
.text:0040F091                 add     esp, 17Ch
.text:0040F097                 pop     ebx
.text:0040F098                 pop     esi
.text:0040F099                 pop     edi
.text:0040F09A                 pop     ebp
.text:0040F09B                 retn
.text:0040F09B ; ---------------------------------------------------------------------------
.text:0040F09C                 align 10h
.text:0040F0A0
.text:0040F0A0 loc_40F0A0:                             ; CODE XREF: sub_40EFE0+9B↑j
.text:0040F0A0                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:0040F0A4                 mov     edx, [esp+18Ch+lpFileName]
.text:0040F0AB                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:0040F0AE                 call    FindFirstFileA
.text:0040F0B3                 sub     esp, 8
.text:0040F0B6                 xor     ecx, ecx
.text:0040F0B8                 cmp     eax, 0FFFFFFFFh
.text:0040F0BB                 setnz   cl
.text:0040F0BE                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:0040F0C2                 mov     [ebx], edi
.text:0040F0C4                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:0040F0C8                 mov     [esp+18Ch+var_170], ecx
.text:0040F0CC                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:0040F0D0                 mov     [ebx+8], esi
.text:0040F0D3                 mov     [ebx+4], ecx
.text:0040F0D6                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:0040F0DA                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:0040F0DE                 mov     [ebx+0Ch], ebp
.text:0040F0E1                 mov     [ebx+10h], edi
.text:0040F0E4                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:0040F0E8                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:0040F0EC                 mov     [ebx+18h], esi
.text:0040F0EF                 mov     [ebx+14h], ecx
.text:0040F0F2                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:0040F0F6                 mov     [ebx+1Ch], ebp
.text:0040F0F9                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:0040F0FD                 mov     [ebx+20h], edi
.text:0040F100                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:0040F103                 call    FindClose
.text:0040F108                 sub     esp, 4
.text:0040F10B                 mov     esi, [esp+18Ch+var_170]
.text:0040F10F                 test    esi, esi
.text:0040F111                 jnz     loc_40F07D
.text:0040F117                 cld
.text:0040F118                 mov     eax, [esp+18Ch+var_170]
.text:0040F11C                 mov     ecx, 9
.text:0040F121                 mov     edi, ebx
.text:0040F123                 rep stosd
.text:0040F125                 mov     ebp, [esp+18Ch+var_164]
.text:0040F129                 mov     [ebx], ebp
.text:0040F12B                 jmp     loc_40F07D
.text:0040F12B sub_40EFE0      endp
.text:0040F12B
.text:0040F12B ; ---------------------------------------------------------------------------
.text:0040F130 ; const CHAR aFindfirstfilee[]
.text:0040F130 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_40F150+23↓o
.text:0040F141 ; const char Source[]
.text:0040F141 Source          db '\*',0               ; DATA XREF: sub_40F150:loc_40F1DD↓o
.text:0040F144                 align 10h
.text:0040F150
.text:0040F150 ; =============== S U B R O U T I N E =======================================
.text:0040F150
.text:0040F150
.text:0040F150 ; int __cdecl sub_40F150(char *Str)
.text:0040F150 sub_40F150      proc near               ; CODE XREF: .text:00410283↓p
.text:0040F150                                         ; sub_410580+3FA↓p ...
.text:0040F150
.text:0040F150 lpLibFileName   = dword ptr -18Ch
.text:0040F150 lpProcName      = dword ptr -188h
.text:0040F150 var_184         = dword ptr -184h
.text:0040F150 var_180         = dword ptr -180h
.text:0040F150 var_17C         = dword ptr -17Ch
.text:0040F150 var_178         = dword ptr -178h
.text:0040F150 var_164         = dword ptr -164h
.text:0040F150 hModule         = dword ptr -160h
.text:0040F150 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040F150 Str             = dword ptr  4
.text:0040F150
.text:0040F150                 push    ebp
.text:0040F151                 push    edi
.text:0040F152                 xor     edi, edi
.text:0040F154                 push    esi
.text:0040F155                 push    ebx
.text:0040F156                 sub     esp, 17Ch
.text:0040F15C                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:0040F163                 call    LoadLibraryA
.text:0040F168                 sub     esp, 4
.text:0040F16B                 mov     [esp+18Ch+hModule], eax
.text:0040F16F                 mov     ecx, [esp+18Ch+hModule]
.text:0040F173                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0040F17B                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:0040F17E                 call    GetProcAddress
.text:0040F183                 sub     esp, 8
.text:0040F186                 mov     edx, [esp+18Ch+Str]
.text:0040F18D                 mov     [esp+18Ch+var_164], eax
.text:0040F191                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:0040F194                 call    strlen
.text:0040F199                 lea     edx, [eax+5]
.text:0040F19C                 mov     ebx, eax
.text:0040F19E                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:0040F1A1                 call    malloc
.text:0040F1A6                 mov     esi, eax
.text:0040F1A8                 test    esi, esi
.text:0040F1AA                 mov     eax, 1
.text:0040F1AF                 jz      loc_40F28D
.text:0040F1B5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:0040F1B8                 mov     ebp, [esp+18Ch+Str]
.text:0040F1BF                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:0040F1C3                 call    strcpy
.text:0040F1C8                 movzx   eax, byte ptr [ebx+esi-1]
.text:0040F1CD                 cmp     al, 2Fh ; '/'
.text:0040F1CF                 jz      loc_40F2BB
.text:0040F1D5                 cmp     al, 5Ch ; '\'
.text:0040F1D7                 jz      loc_40F2BB
.text:0040F1DD
.text:0040F1DD loc_40F1DD:                             ; CODE XREF: sub_40F150+170↓j
.text:0040F1DD                 mov     [esp+18Ch+lpProcName], offset Source ; "\\*"
.text:0040F1E5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:0040F1E8                 call    strcat
.text:0040F1ED                 mov     eax, [esp+18Ch+var_164]
.text:0040F1F1                 test    eax, eax
.text:0040F1F3                 jz      loc_40F2B5
.text:0040F1F9                 mov     [esp+18Ch+var_178], 0
.text:0040F201                 lea     ebp, [esp+18Ch+FindFileData]
.text:0040F205                 mov     [esp+18Ch+var_17C], 0
.text:0040F20D                 mov     [esp+18Ch+var_180], 1
.text:0040F215                 mov     [esp+18Ch+var_184], ebp
.text:0040F219                 mov     [esp+18Ch+lpProcName], 0
.text:0040F221                 mov     [esp+18Ch+lpLibFileName], esi
.text:0040F224                 call    [esp+18Ch+var_164]
.text:0040F228                 sub     esp, 18h
.text:0040F22B                 mov     ebx, eax
.text:0040F22D                 cmp     eax, 0FFFFFFFFh
.text:0040F230                 jz      short loc_40F298
.text:0040F232                 lea     esi, [esi+0]
.text:0040F239                 lea     edi, [edi+0]
.text:0040F240
.text:0040F240 loc_40F240:                             ; CODE XREF: sub_40F150+109↓j
.text:0040F240                                         ; sub_40F150+161↓j
.text:0040F240                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:0040F245                 jz      short loc_40F248
.text:0040F247                 inc     edi
.text:0040F248
.text:0040F248 loc_40F248:                             ; CODE XREF: sub_40F150+F5↑j
.text:0040F248                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040F24C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040F24F                 call    FindNextFileA
.text:0040F254                 sub     esp, 8
.text:0040F257                 test    eax, eax
.text:0040F259                 jnz     short loc_40F240
.text:0040F25B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040F25E                 call    FindClose
.text:0040F263                 sub     esp, 4
.text:0040F266                 mov     esi, [esp+18Ch+hModule]
.text:0040F26A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:0040F26D                 call    FreeLibrary
.text:0040F272                 sub     esp, 4
.text:0040F275                 mov     ebx, [esp+18Ch+Str]
.text:0040F27C                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:0040F27F                 call    sub_411990
.text:0040F284                 test    eax, eax
.text:0040F286                 jz      short loc_40F28B
.text:0040F288                 add     edi, 2
.text:0040F28B
.text:0040F28B loc_40F28B:                             ; CODE XREF: sub_40F150+136↑j
.text:0040F28B                 mov     eax, edi
.text:0040F28D
.text:0040F28D loc_40F28D:                             ; CODE XREF: sub_40F150+5F↑j
.text:0040F28D                                         ; sub_40F150+163↓j
.text:0040F28D                 add     esp, 17Ch
.text:0040F293                 pop     ebx
.text:0040F294                 pop     esi
.text:0040F295                 pop     edi
.text:0040F296                 pop     ebp
.text:0040F297                 retn
.text:0040F298 ; ---------------------------------------------------------------------------
.text:0040F298
.text:0040F298 loc_40F298:                             ; CODE XREF: sub_40F150+E0↑j
.text:0040F298                                         ; sub_40F150+169↓j
.text:0040F298                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040F29C                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:0040F29F                 call    FindFirstFileA
.text:0040F2A4                 mov     ebx, eax
.text:0040F2A6                 sub     esp, 8
.text:0040F2A9                 cmp     ebx, 0FFFFFFFFh
.text:0040F2AC                 mov     eax, 2
.text:0040F2B1                 jnz     short loc_40F240
.text:0040F2B3                 jmp     short loc_40F28D
.text:0040F2B5 ; ---------------------------------------------------------------------------
.text:0040F2B5
.text:0040F2B5 loc_40F2B5:                             ; CODE XREF: sub_40F150+A3↑j
.text:0040F2B5                 lea     ebp, [esp+18Ch+FindFileData]
.text:0040F2B9                 jmp     short loc_40F298
.text:0040F2BB ; ---------------------------------------------------------------------------
.text:0040F2BB
.text:0040F2BB loc_40F2BB:                             ; CODE XREF: sub_40F150+7F↑j
.text:0040F2BB                                         ; sub_40F150+87↑j
.text:0040F2BB                 mov     byte ptr [ebx+esi-1], 0
.text:0040F2C0                 jmp     loc_40F1DD
.text:0040F2C0 sub_40F150      endp
.text:0040F2C0
.text:0040F2C0 ; ---------------------------------------------------------------------------
.text:0040F2C5                 align 10h
.text:0040F2D0
.text:0040F2D0 ; =============== S U B R O U T I N E =======================================
.text:0040F2D0
.text:0040F2D0
.text:0040F2D0 ; int __cdecl sub_40F2D0(HANDLE hNamedPipe, int)
.text:0040F2D0 sub_40F2D0      proc near               ; CODE XREF: sub_40EEF0+52↑j
.text:0040F2D0                                         ; sub_410B00-B9↓p
.text:0040F2D0
.text:0040F2D0 hFile           = dword ptr -0ECh
.text:0040F2D0 lpFileInformation= dword ptr -0E8h
.text:0040F2D0 nBufferSize     = dword ptr -0E4h
.text:0040F2D0 lpBytesRead     = dword ptr -0E0h
.text:0040F2D0 lpTotalBytesAvail= dword ptr -0DCh
.text:0040F2D0 lpBytesLeftThisMessage= dword ptr -0D8h
.text:0040F2D0 var_C4          = dword ptr -0C4h
.text:0040F2D0 var_C0          = dword ptr -0C0h
.text:0040F2D0 var_BC          = dword ptr -0BCh
.text:0040F2D0 var_B8          = dword ptr -0B8h
.text:0040F2D0 var_B4          = dword ptr -0B4h
.text:0040F2D0 var_B0          = dword ptr -0B0h
.text:0040F2D0 var_AC          = dword ptr -0ACh
.text:0040F2D0 var_A8          = dword ptr -0A8h
.text:0040F2D0 TotalBytesAvail = dword ptr -0A0h
.text:0040F2D0 var_9C          = dword ptr -9Ch
.text:0040F2D0 var_98          = dword ptr -98h
.text:0040F2D0 var_94          = dword ptr -94h
.text:0040F2D0 var_90          = dword ptr -90h
.text:0040F2D0 var_8C          = dword ptr -8Ch
.text:0040F2D0 var_88          = dword ptr -88h
.text:0040F2D0 var_84          = dword ptr -84h
.text:0040F2D0 var_80          = dword ptr -80h
.text:0040F2D0 var_7C          = dword ptr -7Ch
.text:0040F2D0 var_78          = dword ptr -78h
.text:0040F2D0 var_74          = dword ptr -74h
.text:0040F2D0 var_70          = dword ptr -70h
.text:0040F2D0 var_6C          = dword ptr -6Ch
.text:0040F2D0 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:0040F2D0 hNamedPipe      = dword ptr  4
.text:0040F2D0 arg_4           = dword ptr  8
.text:0040F2D0
.text:0040F2D0                 push    ebp
.text:0040F2D1                 mov     eax, 0FFFFFFFFh
.text:0040F2D6                 push    edi
.text:0040F2D7                 push    esi
.text:0040F2D8                 push    ebx
.text:0040F2D9                 sub     esp, 0DCh
.text:0040F2DF                 mov     esi, [esp+0ECh+hNamedPipe]
.text:0040F2E6                 mov     ebp, [esp+0ECh+arg_4]
.text:0040F2ED                 cmp     esi, 0FFFFFFFFh
.text:0040F2F0                 jz      loc_40F671
.text:0040F2F6                 cld
.text:0040F2F7                 xor     eax, eax
.text:0040F2F9                 lea     ebx, [esp+0ECh+FileInformation]
.text:0040F300                 mov     ecx, 0Dh
.text:0040F305                 mov     edi, ebx
.text:0040F307                 rep stosd
.text:0040F309                 mov     dword ptr [ebp+18h], 1
.text:0040F310                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040F313                 call    GetFileType
.text:0040F318                 sub     esp, 4
.text:0040F31B                 xor     edx, edx
.text:0040F31D                 cmp     eax, 2
.text:0040F320                 jz      loc_40F750
.text:0040F326                 cmp     eax, 3
.text:0040F329                 jz      loc_40F740
.text:0040F32F
.text:0040F32F loc_40F32F:                             ; CODE XREF: sub_40F2D0+475↓j
.text:0040F32F                                         ; sub_40F2D0+485↓j
.text:0040F32F                 or      [ebp+0], edx
.text:0040F332                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:0040F336                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040F339                 call    GetFileInformationByHandle
.text:0040F33E                 sub     esp, 8
.text:0040F341                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:0040F348                 test    ecx, ecx
.text:0040F34A                 jnz     short loc_40F380
.text:0040F34C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040F353                 test    edx, edx
.text:0040F355                 jnz     short loc_40F380
.text:0040F357                 mov     edx, [ebp+0]
.text:0040F35A                 and     edx, 0F000h
.text:0040F360                 cmp     edx, 1000h
.text:0040F366                 jz      loc_40F6D6
.text:0040F36C
.text:0040F36C loc_40F36C:                             ; CODE XREF: sub_40F2D0+459↓j
.text:0040F36C                                         ; sub_40F2D0+465↓j
.text:0040F36C                 test    ecx, ecx
.text:0040F36E                 jnz     short loc_40F380
.text:0040F370                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040F377                 test    edx, edx
.text:0040F379                 jz      loc_40F6B4
.text:0040F37F                 nop
.text:0040F380
.text:0040F380 loc_40F380:                             ; CODE XREF: sub_40F2D0+7A↑j
.text:0040F380                                         ; sub_40F2D0+85↑j ...
.text:0040F380                 cld
.text:0040F381                 mov     esi, ebx
.text:0040F383                 mov     dword ptr [ebp+14h], 0
.text:0040F38A                 lea     edi, [esp+0ECh+var_9C]
.text:0040F38E                 mov     ecx, 0Dh
.text:0040F393                 rep movsd
.text:0040F395                 xor     ebx, ebx
.text:0040F397                 xor     edi, edi
.text:0040F399                 mov     edx, [esp+0ECh+var_6C]
.text:0040F3A0                 mov     esi, [esp+0ECh+var_70]
.text:0040F3A4                 or      edx, ebx
.text:0040F3A6                 mov     ebx, [esp+0ECh+var_9C]
.text:0040F3AA                 mov     [ebp+8], edx
.text:0040F3AD                 or      edi, esi
.text:0040F3AF                 xor     edx, edx
.text:0040F3B1                 mov     [ebp+0Ch], edi
.text:0040F3B4                 test    bl, 10h
.text:0040F3B7                 mov     esi, [esp+0ECh+var_80]
.text:0040F3BB                 setz    dl
.text:0040F3BE                 mov     [ebp+10h], esi
.text:0040F3C1                 dec     edx
.text:0040F3C2                 and     edx, 0FFFFC000h
.text:0040F3C8                 add     edx, 8000h
.text:0040F3CE                 or      edx, 124h
.text:0040F3D4                 test    bl, 1
.text:0040F3D7                 movzx   eax, dx
.text:0040F3DA                 jnz     short loc_40F3E1
.text:0040F3DC                 or      eax, 92h
.text:0040F3E1
.text:0040F3E1 loc_40F3E1:                             ; CODE XREF: sub_40F2D0+10A↑j
.text:0040F3E1                 or      [ebp+0], eax
.text:0040F3E4                 xor     edx, edx
.text:0040F3E6                 mov     ebx, [esp+0ECh+var_7C]
.text:0040F3EA                 mov     ecx, [esp+0ECh+var_78]
.text:0040F3EE                 mov     eax, edx
.text:0040F3F0                 xor     esi, esi
.text:0040F3F2                 mov     edx, [esp+0ECh+var_8C]
.text:0040F3F6                 mov     edi, ebx
.text:0040F3F8                 or      eax, edi
.text:0040F3FA                 mov     [esp+0ECh+var_A8], eax
.text:0040F3FE                 mov     ebx, ecx
.text:0040F400                 mov     edi, [esp+0ECh+var_74]
.text:0040F404                 or      ebx, esi
.text:0040F406                 mov     esi, [esp+0ECh+var_A8]
.text:0040F40A                 mov     [esp+0ECh+var_AC], ebx
.text:0040F40E                 xor     ebx, ebx
.text:0040F410                 mov     ecx, [esp+0ECh+var_AC]
.text:0040F414                 mov     [ebp+34h], esi
.text:0040F417                 mov     esi, [esp+0ECh+var_90]
.text:0040F41B                 mov     [ebp+18h], edi
.text:0040F41E                 xor     edi, edi
.text:0040F420                 or      esi, ebx
.text:0040F422                 mov     [ebp+30h], ecx
.text:0040F425                 or      edi, edx
.text:0040F427                 mov     edx, esi
.text:0040F429                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040F431                 sub     edx, 0D53E8000h
.text:0040F437                 mov     ebx, edi
.text:0040F439                 sbb     ebx, 19DB1DEh
.text:0040F43F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:0040F443                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040F44B                 mov     [esp+0ECh+hFile], edx
.text:0040F44E                 call    sub_417E90
.text:0040F453                 mov     ecx, eax
.text:0040F455                 shr     eax, 1Fh
.text:0040F458                 dec     eax
.text:0040F459                 and     ecx, eax
.text:0040F45B                 mov     [ebp+38h], ecx
.text:0040F45E                 mov     [esp+0ECh+hFile], esi
.text:0040F461                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040F465                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040F46D                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040F475                 call    sub_417D10
.text:0040F47A                 lea     ebx, [eax+eax*4]
.text:0040F47D                 xor     ecx, ecx
.text:0040F47F                 lea     esi, [ebx+ebx*4]
.text:0040F482                 shl     esi, 2
.text:0040F485                 mov     edi, esi
.text:0040F487                 shr     edi, 1Fh
.text:0040F48A                 dec     edi
.text:0040F48B                 and     edi, esi
.text:0040F48D                 mov     [ebp+3Ch], edi
.text:0040F490                 mov     esi, [esp+0ECh+var_98]
.text:0040F494                 xor     edi, edi
.text:0040F496                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040F49E                 mov     edx, [esp+0ECh+var_94]
.text:0040F4A2                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040F4AA                 or      esi, ecx
.text:0040F4AC                 or      edi, edx
.text:0040F4AE                 mov     edx, esi
.text:0040F4B0                 mov     ecx, edi
.text:0040F4B2                 sub     edx, 0D53E8000h
.text:0040F4B8                 sbb     ecx, 19DB1DEh
.text:0040F4BE                 mov     [esp+0ECh+lpFileInformation], ecx
.text:0040F4C2                 mov     [esp+0ECh+hFile], edx
.text:0040F4C5                 call    sub_417E90
.text:0040F4CA                 mov     ebx, eax
.text:0040F4CC                 shr     eax, 1Fh
.text:0040F4CF                 dec     eax
.text:0040F4D0                 and     ebx, eax
.text:0040F4D2                 mov     [ebp+48h], ebx
.text:0040F4D5                 xor     ebx, ebx
.text:0040F4D7                 mov     [esp+0ECh+hFile], esi
.text:0040F4DA                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040F4DE                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040F4E6                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040F4EE                 call    sub_417D10
.text:0040F4F3                 lea     ecx, [eax+eax*4]
.text:0040F4F6                 lea     esi, [ecx+ecx*4]
.text:0040F4F9                 shl     esi, 2
.text:0040F4FC                 mov     edi, esi
.text:0040F4FE                 shr     edi, 1Fh
.text:0040F501                 dec     edi
.text:0040F502                 and     edi, esi
.text:0040F504                 mov     [ebp+4Ch], edi
.text:0040F507                 mov     esi, [esp+0ECh+var_88]
.text:0040F50B                 xor     edi, edi
.text:0040F50D                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040F515                 mov     edx, [esp+0ECh+var_84]
.text:0040F519                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040F521                 or      esi, ebx
.text:0040F523                 or      edi, edx
.text:0040F525                 mov     edx, esi
.text:0040F527                 mov     ebx, edi
.text:0040F529                 sub     edx, 0D53E8000h
.text:0040F52F                 sbb     ebx, 19DB1DEh
.text:0040F535                 mov     [esp+0ECh+lpFileInformation], ebx
.text:0040F539                 mov     [esp+0ECh+hFile], edx
.text:0040F53C                 call    sub_417E90
.text:0040F541                 mov     ecx, eax
.text:0040F543                 shr     eax, 1Fh
.text:0040F546                 dec     eax
.text:0040F547                 and     ecx, eax
.text:0040F549                 mov     [ebp+40h], ecx
.text:0040F54C                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040F550                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040F558                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040F560                 mov     [esp+0ECh+hFile], esi
.text:0040F563                 call    sub_417D10
.text:0040F568                 mov     dword ptr [ebp+50h], 200h
.text:0040F56F                 lea     ebx, [eax+eax*4]
.text:0040F572                 mov     edi, [esp+0ECh+var_A8]
.text:0040F576                 lea     edx, [ebx+ebx*4]
.text:0040F579                 mov     eax, [esp+0ECh+var_AC]
.text:0040F57D                 shl     edx, 2
.text:0040F580                 mov     ecx, edx
.text:0040F582                 shr     ecx, 1Fh
.text:0040F585                 dec     ecx
.text:0040F586                 and     ecx, edx
.text:0040F588                 test    edi, edi
.text:0040F58A                 mov     edx, [esp+0ECh+var_A8]
.text:0040F58E                 mov     [ebp+44h], ecx
.text:0040F591                 js      loc_40F6A7
.text:0040F597
.text:0040F597 loc_40F597:                             ; CODE XREF: sub_40F2D0+3DF↓j
.text:0040F597                 mov     edi, [esp+0ECh+var_AC]
.text:0040F59B                 xor     esi, esi
.text:0040F59D                 mov     ecx, eax
.text:0040F59F                 shrd    ecx, edx, 9
.text:0040F5A3                 mov     ebx, edx
.text:0040F5A5                 mov     eax, esi
.text:0040F5A7                 and     edi, 1FFh
.text:0040F5AD                 sar     ebx, 9
.text:0040F5B0                 or      eax, edi
.text:0040F5B2                 jz      short loc_40F5BA
.text:0040F5B4                 add     ecx, 1
.text:0040F5B7                 adc     ebx, 0
.text:0040F5BA
.text:0040F5BA loc_40F5BA:                             ; CODE XREF: sub_40F2D0+2E2↑j
.text:0040F5BA                 mov     [ebp+5Ch], ebx
.text:0040F5BD                 mov     esi, dword_41A070
.text:0040F5C3                 xor     edi, edi
.text:0040F5C5                 mov     [ebp+58h], ecx
.text:0040F5C8                 mov     ebx, dword_41A070
.text:0040F5CE                 mov     ecx, [esp+0ECh+var_A8]
.text:0040F5D2                 mov     edx, [esp+0ECh+var_AC]
.text:0040F5D6                 mov     [ebp+50h], ebx
.text:0040F5D9                 shr     ebx, 9
.text:0040F5DC                 mov     [esp+0ECh+lpBytesRead], edi
.text:0040F5E0                 mov     [esp+0ECh+lpFileInformation], ecx
.text:0040F5E4                 mov     [esp+0ECh+nBufferSize], esi
.text:0040F5E8                 mov     [esp+0ECh+hFile], edx
.text:0040F5EB                 call    sub_417E90
.text:0040F5F0                 mov     [esp+0ECh+lpBytesRead], edi
.text:0040F5F4                 mov     ecx, [esp+0ECh+var_AC]
.text:0040F5F8                 mov     edi, [esp+0ECh+var_A8]
.text:0040F5FC                 mov     [esp+0ECh+var_BC], ebx
.text:0040F600                 mov     [esp+0ECh+var_B4], eax
.text:0040F604                 mov     [esp+0ECh+var_B0], edx
.text:0040F608                 mov     [esp+0ECh+var_B8], 0
.text:0040F610                 mov     [esp+0ECh+nBufferSize], esi
.text:0040F614                 mov     [esp+0ECh+hFile], ecx
.text:0040F617                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040F61B                 call    sub_417D10
.text:0040F620                 mov     ebx, edx
.text:0040F622                 or      ebx, eax
.text:0040F624                 jz      short loc_40F680
.text:0040F626                 mov     edi, [esp+0ECh+var_B4]
.text:0040F62A                 mov     esi, [esp+0ECh+var_B0]
.text:0040F62E                 mov     eax, [esp+0ECh+var_BC]
.text:0040F632                 mov     [esp+0ECh+var_C4], edi
.text:0040F636                 mov     ecx, [esp+0ECh+var_B8]
.text:0040F63A                 add     [esp+0ECh+var_C4], 1
.text:0040F63F                 mov     [esp+0ECh+var_C0], esi
.text:0040F643                 adc     [esp+0ECh+var_C0], 0
.text:0040F648                 mul     [esp+0ECh+var_C4]
.text:0040F64C                 mov     edi, [esp+0ECh+var_C0]
.text:0040F650                 mov     ebx, edx
.text:0040F652                 mov     edx, [esp+0ECh+var_C4]
.text:0040F656                 mov     esi, eax
.text:0040F658                 mov     eax, ebx
.text:0040F65A                 imul    ecx, edx
.text:0040F65D                 mov     edx, [esp+0ECh+var_BC]
.text:0040F661                 imul    edx, edi
.text:0040F664                 add     eax, ecx
.text:0040F666                 lea     edi, [edx+eax]
.text:0040F669
.text:0040F669 loc_40F669:                             ; CODE XREF: sub_40F2D0+3D5↓j
.text:0040F669                 mov     [ebp+58h], esi
.text:0040F66C                 xor     eax, eax
.text:0040F66E                 mov     [ebp+5Ch], edi
.text:0040F671
.text:0040F671 loc_40F671:                             ; CODE XREF: sub_40F2D0+20↑j
.text:0040F671                 add     esp, 0DCh
.text:0040F677                 pop     ebx
.text:0040F678                 pop     esi
.text:0040F679                 pop     edi
.text:0040F67A                 pop     ebp
.text:0040F67B                 retn
.text:0040F67B ; ---------------------------------------------------------------------------
.text:0040F67C                 align 10h
.text:0040F680
.text:0040F680 loc_40F680:                             ; CODE XREF: sub_40F2D0+354↑j
.text:0040F680                 mov     eax, [esp+0ECh+var_B4]
.text:0040F684                 mov     edi, [esp+0ECh+var_B8]
.text:0040F688                 mov     ebx, [esp+0ECh+var_B4]
.text:0040F68C                 mul     [esp+0ECh+var_BC]
.text:0040F690                 mov     ecx, [esp+0ECh+var_BC]
.text:0040F694                 imul    ebx, edi
.text:0040F697                 mov     esi, eax
.text:0040F699                 mov     eax, [esp+0ECh+var_B0]
.text:0040F69D                 add     edx, ebx
.text:0040F69F                 imul    ecx, eax
.text:0040F6A2                 lea     edi, [ecx+edx]
.text:0040F6A5                 jmp     short loc_40F669
.text:0040F6A7 ; ---------------------------------------------------------------------------
.text:0040F6A7
.text:0040F6A7 loc_40F6A7:                             ; CODE XREF: sub_40F2D0+2C1↑j
.text:0040F6A7                 add     eax, 1FFh
.text:0040F6AC                 adc     edx, 0
.text:0040F6AF                 jmp     loc_40F597
.text:0040F6B4 ; ---------------------------------------------------------------------------
.text:0040F6B4
.text:0040F6B4 loc_40F6B4:                             ; CODE XREF: sub_40F2D0+A9↑j
.text:0040F6B4                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040F6B7                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040F6BE                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:0040F6C2                 call    GetFileSize
.text:0040F6C7                 sub     esp, 8
.text:0040F6CA                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:0040F6D1                 jmp     loc_40F380
.text:0040F6D6 ; ---------------------------------------------------------------------------
.text:0040F6D6
.text:0040F6D6 loc_40F6D6:                             ; CODE XREF: sub_40F2D0+96↑j
.text:0040F6D6                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:0040F6DE                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:0040F6E2                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:0040F6EA                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:0040F6EE                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:0040F6F6                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:0040F6FE                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:0040F706                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:0040F709                 call    PeekNamedPipe
.text:0040F70E                 sub     esp, 18h
.text:0040F711                 test    eax, eax
.text:0040F713                 jz      short loc_40F72E
.text:0040F715                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:0040F719                 xor     eax, eax
.text:0040F71B                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:0040F722                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:0040F729                 jmp     loc_40F36C
.text:0040F72E ; ---------------------------------------------------------------------------
.text:0040F72E
.text:0040F72E loc_40F72E:                             ; CODE XREF: sub_40F2D0+443↑j
.text:0040F72E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:0040F735                 jmp     loc_40F36C
.text:0040F735 ; ---------------------------------------------------------------------------
.text:0040F73A                 align 10h
.text:0040F740
.text:0040F740 loc_40F740:                             ; CODE XREF: sub_40F2D0+59↑j
.text:0040F740                 mov     edx, 1000h
.text:0040F745                 jmp     loc_40F32F
.text:0040F745 ; ---------------------------------------------------------------------------
.text:0040F74A                 align 10h
.text:0040F750
.text:0040F750 loc_40F750:                             ; CODE XREF: sub_40F2D0+50↑j
.text:0040F750                 mov     edx, 2000h
.text:0040F755                 jmp     loc_40F32F
.text:0040F755 sub_40F2D0      endp
.text:0040F755
.text:0040F755 ; ---------------------------------------------------------------------------
.text:0040F75A aLnk            db '.lnk',0             ; DATA XREF: sub_40F7A0+E0↓o
.text:0040F75A                                         ; .text:0040FE4A↓o ...
.text:0040F75F ; const CHAR aKernel32[]
.text:0040F75F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_40F7A0+12D↓o
.text:0040F75F                                         ; .text:004104FB↓o
.text:0040F768 ; const CHAR aGetcompressedf[]
.text:0040F768 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:0040F768                                         ; DATA XREF: sub_40F7A0+13E↓o
.text:0040F768                                         ; .text:0041050C↓o
.text:0040F77F ; const CHAR aGetbinarytypea[]
.text:0040F77F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_40F7A0+333↓o
.text:0040F77F                                         ; .text:0040FEA6↓o ...
.text:0040F78E ; const char aPathext[]
.text:0040F78E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_40F7A0:loc_40FB87↓o
.text:0040F78E                                         ; .text:loc_40FF50↓o ...
.text:0040F796                 align 10h
.text:0040F7A0
.text:0040F7A0 ; =============== S U B R O U T I N E =======================================
.text:0040F7A0
.text:0040F7A0
.text:0040F7A0 ; int __cdecl sub_40F7A0(char *String1, int)
.text:0040F7A0 sub_40F7A0      proc near               ; CODE XREF: sub_410580+3CD↓p
.text:0040F7A0                                         ; sub_410B00-9B↓p
.text:0040F7A0
.text:0040F7A0 Str             = dword ptr -6Ch
.text:0040F7A0 lpProcName      = dword ptr -68h
.text:0040F7A0 var_64          = dword ptr -64h
.text:0040F7A0 var_60          = dword ptr -60h
.text:0040F7A0 var_5C          = dword ptr -5Ch
.text:0040F7A0 var_4C          = dword ptr -4Ch
.text:0040F7A0 var_48          = dword ptr -48h
.text:0040F7A0 var_44          = dword ptr -44h
.text:0040F7A0 var_40          = dword ptr -40h
.text:0040F7A0 var_3C          = dword ptr -3Ch
.text:0040F7A0 var_38          = dword ptr -38h
.text:0040F7A0 lpRootPathName  = dword ptr -30h
.text:0040F7A0 var_2C          = byte ptr -2Ch
.text:0040F7A0 var_28          = dword ptr -28h
.text:0040F7A0 var_24          = dword ptr -24h
.text:0040F7A0 var_20          = dword ptr -20h
.text:0040F7A0 var_1C          = dword ptr -1Ch
.text:0040F7A0 var_18          = byte ptr -18h
.text:0040F7A0 String1         = dword ptr  4
.text:0040F7A0 arg_4           = dword ptr  8
.text:0040F7A0
.text:0040F7A0                 push    ebp
.text:0040F7A1                 push    edi
.text:0040F7A2                 push    esi
.text:0040F7A3                 push    ebx
.text:0040F7A4                 sub     esp, 5Ch
.text:0040F7A7                 mov     edx, [esp+6Ch+String1]
.text:0040F7AB                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040F7AE                 call    sub_4115C0
.text:0040F7B3                 mov     [esp+6Ch+Str], eax
.text:0040F7B6                 call    sub_410FA0
.text:0040F7BB                 mov     [esp+6Ch+lpRootPathName], eax
.text:0040F7BF                 test    eax, eax
.text:0040F7C1                 jz      loc_40F9F3
.text:0040F7C7                 mov     [esp+6Ch+Str], eax ; Str
.text:0040F7CA                 call    strlen
.text:0040F7CF                 mov     edx, [esp+6Ch+arg_4]
.text:0040F7D3                 mov     ebx, eax
.text:0040F7D5                 mov     esi, [edx+0Ch]
.text:0040F7D8                 mov     edi, [edx+8]
.text:0040F7DB                 mov     eax, esi
.text:0040F7DD                 or      eax, edi
.text:0040F7DF                 jz      loc_40FC00
.text:0040F7E5                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:0040F7E9                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:0040F7EC                 call    GetDriveTypeA
.text:0040F7F1                 sub     esp, 4
.text:0040F7F4                 cmp     eax, 4
.text:0040F7F7                 jz      loc_40FC00
.text:0040F7FD
.text:0040F7FD loc_40F7FD:                             ; CODE XREF: sub_40F7A0+48A↓j
.text:0040F7FD                                         ; sub_40F7A0+4B2↓j
.text:0040F7FD                 mov     edx, [esp+6Ch+arg_4]
.text:0040F801                 mov     esi, [edx+14h]
.text:0040F804                 mov     edi, [edx+10h]
.text:0040F807                 mov     ecx, esi
.text:0040F809                 or      ecx, edi
.text:0040F80B                 jnz     short loc_40F835
.text:0040F80D                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:0040F811                 xor     esi, esi
.text:0040F813                 xor     edi, edi
.text:0040F815                 test    ebp, ebp
.text:0040F817                 jz      short loc_40F827
.text:0040F819                 movzx   ebx, byte ptr [ebp+0]
.text:0040F81D                 test    bl, bl
.text:0040F81F                 mov     cl, bl
.text:0040F821                 jnz     loc_40FBB1
.text:0040F827
.text:0040F827 loc_40F827:                             ; CODE XREF: sub_40F7A0+77↑j
.text:0040F827                 xor     eax, eax
.text:0040F829                 xor     edx, edx
.text:0040F82B
.text:0040F82B loc_40F82B:                             ; CODE XREF: sub_40F7A0+458↓j
.text:0040F82B                 mov     ebp, [esp+6Ch+arg_4]
.text:0040F82F                 mov     [ebp+10h], eax
.text:0040F832                 mov     [ebp+14h], edx
.text:0040F835
.text:0040F835 loc_40F835:                             ; CODE XREF: sub_40F7A0+6B↑j
.text:0040F835                 mov     edi, [esp+6Ch+String1]
.text:0040F839                 xor     ebx, ebx
.text:0040F83B                 test    edi, edi
.text:0040F83D                 jz      loc_40FAB3
.text:0040F843                 mov     esi, [esp+6Ch+String1]
.text:0040F847                 cmp     byte ptr [esi], 0
.text:0040F84A                 jnz     loc_40FAC0
.text:0040F850
.text:0040F850 loc_40F850:                             ; CODE XREF: sub_40F7A0+38C↓j
.text:0040F850                                         ; sub_40F7A0+397↓j
.text:0040F850                 mov     ebp, [esp+6Ch+String1]
.text:0040F854                 test    ebp, ebp
.text:0040F856                 jz      loc_40FAB3
.text:0040F85C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040F864                 mov     edi, [esp+6Ch+String1]
.text:0040F868                 mov     [esp+6Ch+Str], edi ; Str
.text:0040F86B                 call    strrchr
.text:0040F870                 test    eax, eax
.text:0040F872                 jz      loc_40FAB3
.text:0040F878                 cld
.text:0040F879                 mov     ecx, 5
.text:0040F87E                 mov     esi, eax
.text:0040F880                 mov     edi, offset aLnk ; ".lnk"
.text:0040F885                 repe cmpsb
.text:0040F887                 setz    cl
.text:0040F88A                 movzx   eax, cl
.text:0040F88D                 lea     esi, [esi+0]
.text:0040F890
.text:0040F890 loc_40F890:                             ; CODE XREF: sub_40F7A0+315↓j
.text:0040F890                 test    eax, eax
.text:0040F892                 jz      short loc_40F89A
.text:0040F894                 or      ebx, 0A000h
.text:0040F89A
.text:0040F89A loc_40F89A:                             ; CODE XREF: sub_40F7A0+F2↑j
.text:0040F89A                 mov     esi, [esp+6Ch+arg_4]
.text:0040F89E                 xor     ecx, ecx
.text:0040F8A0                 mov     edi, ds:dword_41B290
.text:0040F8A6                 or      [esi], ebx
.text:0040F8A8                 mov     ebx, [esi+14h]
.text:0040F8AB                 mov     ebp, [esi+10h]
.text:0040F8AE                 mov     eax, ebx
.text:0040F8B0                 xor     eax, ecx
.text:0040F8B2                 xor     ebp, edi
.text:0040F8B4                 or      eax, ebp
.text:0040F8B6                 jnz     loc_40FA40
.text:0040F8BC
.text:0040F8BC loc_40F8BC:                             ; CODE XREF: sub_40F7A0+30E↓j
.text:0040F8BC                 mov     ecx, dword_41A070
.text:0040F8C2                 xor     esi, esi
.text:0040F8C4                 xor     edi, edi
.text:0040F8C6                 mov     edx, [esp+6Ch+arg_4]
.text:0040F8CA                 mov     [edx+50h], ecx
.text:0040F8CD                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:0040F8D4                 call    LoadLibraryA
.text:0040F8D9                 sub     esp, 4
.text:0040F8DC                 mov     ebp, eax
.text:0040F8DE                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040F8E6                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040F8E9                 call    GetProcAddress
.text:0040F8EE                 sub     esp, 8
.text:0040F8F1                 test    eax, eax
.text:0040F8F3                 jz      short loc_40F928
.text:0040F8F5                 mov     ebx, [esp+6Ch+String1]
.text:0040F8F9                 lea     esi, [esp+6Ch+var_2C]
.text:0040F8FD                 mov     [esp+6Ch+lpProcName], esi
.text:0040F901                 mov     [esp+6Ch+Str], ebx
.text:0040F904                 call    eax
.text:0040F906                 sub     esp, 8
.text:0040F909                 mov     ebx, eax
.text:0040F90B                 cmp     eax, 0FFFFFFFFh
.text:0040F90E                 jz      loc_40FA29
.text:0040F914
.text:0040F914 loc_40F914:                             ; CODE XREF: sub_40F7A0+29A↓j
.text:0040F914                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:0040F918                 mov     ecx, ebx
.text:0040F91A                 xor     edi, edi
.text:0040F91C                 xor     ebx, ebx
.text:0040F91E                 mov     edx, esi
.text:0040F920                 mov     esi, ecx
.text:0040F922                 or      esi, edi
.text:0040F924                 mov     edi, ebx
.text:0040F926                 or      edi, edx
.text:0040F928
.text:0040F928 loc_40F928:                             ; CODE XREF: sub_40F7A0+153↑j
.text:0040F928                                         ; sub_40F7A0+294↓j
.text:0040F928                 test    ebp, ebp
.text:0040F92A                 jz      short loc_40F937
.text:0040F92C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040F92F                 call    FreeLibrary
.text:0040F934                 sub     esp, 4
.text:0040F937
.text:0040F937 loc_40F937:                             ; CODE XREF: sub_40F7A0+18A↑j
.text:0040F937                 mov     ebp, edi
.text:0040F939                 mov     edx, ebp
.text:0040F93B                 mov     edi, esi
.text:0040F93D                 or      edx, esi
.text:0040F93F                 jnz     short loc_40F94B
.text:0040F941                 mov     eax, [esp+6Ch+arg_4]
.text:0040F945                 mov     edi, [eax+30h]
.text:0040F948                 mov     ebp, [eax+34h]
.text:0040F94B
.text:0040F94B loc_40F94B:                             ; CODE XREF: sub_40F7A0+19F↑j
.text:0040F94B                 mov     [esp+6Ch+lpProcName], ebp
.text:0040F94F                 mov     ebx, dword_41A070
.text:0040F955                 xor     esi, esi
.text:0040F957                 mov     [esp+6Ch+var_60], esi
.text:0040F95B                 mov     [esp+6Ch+Str], edi
.text:0040F95E                 mov     [esp+6Ch+var_64], ebx
.text:0040F962                 call    sub_417E90
.text:0040F967                 mov     [esp+6Ch+var_3C], eax
.text:0040F96B                 mov     ecx, dword_41A070
.text:0040F971                 mov     [esp+6Ch+lpProcName], ebp
.text:0040F975                 mov     [esp+6Ch+var_38], edx
.text:0040F979                 shr     ecx, 9
.text:0040F97C                 mov     [esp+6Ch+var_44], ecx
.text:0040F980                 mov     [esp+6Ch+var_40], 0
.text:0040F988                 mov     [esp+6Ch+var_64], ebx
.text:0040F98C                 mov     [esp+6Ch+var_60], esi
.text:0040F990                 mov     [esp+6Ch+Str], edi
.text:0040F993                 call    sub_417D10
.text:0040F998                 mov     ebp, edx
.text:0040F99A                 or      ebp, eax
.text:0040F99C                 jz      short loc_40FA00
.text:0040F99E                 mov     ebp, [esp+6Ch+var_3C]
.text:0040F9A2                 mov     esi, [esp+6Ch+var_38]
.text:0040F9A6                 mov     eax, [esp+6Ch+var_44]
.text:0040F9AA                 mov     [esp+6Ch+var_4C], ebp
.text:0040F9AE                 mov     ecx, [esp+6Ch+var_40]
.text:0040F9B2                 mov     ebx, [esp+6Ch+var_44]
.text:0040F9B6                 add     [esp+6Ch+var_4C], 1
.text:0040F9BB                 mov     [esp+6Ch+var_48], esi
.text:0040F9BF                 mov     edi, [esp+6Ch+var_4C]
.text:0040F9C3                 adc     [esp+6Ch+var_48], 0
.text:0040F9C8                 mul     [esp+6Ch+var_4C]
.text:0040F9CC                 imul    ecx, edi
.text:0040F9CF                 mov     esi, eax
.text:0040F9D1                 mov     eax, [esp+6Ch+var_48]
.text:0040F9D5                 add     edx, ecx
.text:0040F9D7                 imul    ebx, eax
.text:0040F9DA                 lea     edi, [ebx+edx]
.text:0040F9DD
.text:0040F9DD loc_40F9DD:                             ; CODE XREF: sub_40F7A0+287↓j
.text:0040F9DD                 mov     ebx, [esp+6Ch+arg_4]
.text:0040F9E1                 mov     [ebx+58h], esi
.text:0040F9E4                 mov     esi, [esp+6Ch+lpRootPathName]
.text:0040F9E8                 mov     [ebx+5Ch], edi
.text:0040F9EB                 mov     [esp+6Ch+Str], esi ; Block
.text:0040F9EE                 call    free
.text:0040F9F3
.text:0040F9F3 loc_40F9F3:                             ; CODE XREF: sub_40F7A0+21↑j
.text:0040F9F3                 add     esp, 5Ch
.text:0040F9F6                 xor     eax, eax
.text:0040F9F8                 pop     ebx
.text:0040F9F9                 pop     esi
.text:0040F9FA                 pop     edi
.text:0040F9FB                 pop     ebp
.text:0040F9FC                 retn
.text:0040F9FC ; ---------------------------------------------------------------------------
.text:0040F9FD                 align 10h
.text:0040FA00
.text:0040FA00 loc_40FA00:                             ; CODE XREF: sub_40F7A0+1FC↑j
.text:0040FA00                 mov     eax, [esp+6Ch+var_3C]
.text:0040FA04                 mov     edi, [esp+6Ch+var_40]
.text:0040FA08                 mov     ecx, [esp+6Ch+var_3C]
.text:0040FA0C                 mul     [esp+6Ch+var_44]
.text:0040FA10                 mov     ebx, [esp+6Ch+var_44]
.text:0040FA14                 imul    ecx, edi
.text:0040FA17                 mov     ebp, edx
.text:0040FA19                 mov     esi, eax
.text:0040FA1B                 mov     edx, [esp+6Ch+var_38]
.text:0040FA1F                 add     ebp, ecx
.text:0040FA21                 imul    ebx, edx
.text:0040FA24                 lea     edi, [ebx+ebp]
.text:0040FA27                 jmp     short loc_40F9DD
.text:0040FA29 ; ---------------------------------------------------------------------------
.text:0040FA29
.text:0040FA29 loc_40FA29:                             ; CODE XREF: sub_40F7A0+16E↑j
.text:0040FA29                 call    GetLastError
.text:0040FA2E                 xor     esi, esi
.text:0040FA30                 xor     edi, edi
.text:0040FA32                 test    eax, eax
.text:0040FA34                 jnz     loc_40F928
.text:0040FA3A                 jmp     loc_40F914
.text:0040FA3A ; ---------------------------------------------------------------------------
.text:0040FA3F                 align 10h
.text:0040FA40
.text:0040FA40 loc_40FA40:                             ; CODE XREF: sub_40F7A0+116↑j
.text:0040FA40                 mov     edx, [esp+6Ch+lpRootPathName]
.text:0040FA44                 lea     ecx, [esp+6Ch+var_20]
.text:0040FA48                 lea     ebx, [esp+6Ch+var_1C]
.text:0040FA4C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:0040FA50                 lea     edi, [esp+6Ch+var_24]
.text:0040FA54                 lea     ebp, [esp+6Ch+var_28]
.text:0040FA58                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040FA5C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:0040FA60                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:0040FA64                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040FA67                 call    sub_412010
.text:0040FA6C                 test    eax, eax
.text:0040FA6E                 jnz     short loc_40FA90
.text:0040FA70                 mov     [esp+6Ch+var_28], 1
.text:0040FA78                 mov     [esp+6Ch+var_24], 200h
.text:0040FA80                 mov     [esp+6Ch+var_20], 0
.text:0040FA88                 mov     [esp+6Ch+var_1C], 0
.text:0040FA90
.text:0040FA90 loc_40FA90:                             ; CODE XREF: sub_40F7A0+2CE↑j
.text:0040FA90                 mov     ebp, [esp+6Ch+var_24]
.text:0040FA94                 mov     edi, [esp+6Ch+var_28]
.text:0040FA98                 mov     eax, [esp+6Ch+arg_4]
.text:0040FA9C                 imul    ebp, edi
.text:0040FA9F                 mov     esi, [eax+10h]
.text:0040FAA2                 mov     dword_41A070, ebp
.text:0040FAA8                 mov     ds:dword_41B290, esi
.text:0040FAAE                 jmp     loc_40F8BC
.text:0040FAB3 ; ---------------------------------------------------------------------------
.text:0040FAB3
.text:0040FAB3 loc_40FAB3:                             ; CODE XREF: sub_40F7A0+9D↑j
.text:0040FAB3                                         ; sub_40F7A0+B6↑j ...
.text:0040FAB3                 xor     eax, eax
.text:0040FAB5                 jmp     loc_40F890
.text:0040FAB5 ; ---------------------------------------------------------------------------
.text:0040FABA                 align 10h
.text:0040FAC0
.text:0040FAC0 loc_40FAC0:                             ; CODE XREF: sub_40F7A0+AA↑j
.text:0040FAC0                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:0040FAC7                 xor     ebp, ebp
.text:0040FAC9                 call    GetModuleHandleA
.text:0040FACE                 sub     esp, 4
.text:0040FAD1                 mov     edi, eax
.text:0040FAD3                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040FADB                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040FADE                 call    GetProcAddress
.text:0040FAE3                 sub     esp, 8
.text:0040FAE6                 mov     edx, eax
.text:0040FAE8                 test    eax, eax
.text:0040FAEA                 jz      short loc_40FB04
.text:0040FAEC                 mov     eax, [esp+6Ch+String1]
.text:0040FAF0                 lea     ecx, [esp+6Ch+var_18]
.text:0040FAF4                 mov     [esp+6Ch+lpProcName], ecx
.text:0040FAF8                 mov     [esp+6Ch+Str], eax
.text:0040FAFB                 call    edx
.text:0040FAFD                 sub     esp, 8
.text:0040FB00                 test    eax, eax
.text:0040FB02                 jnz     short loc_40FB68
.text:0040FB04
.text:0040FB04 loc_40FB04:                             ; CODE XREF: sub_40F7A0+34A↑j
.text:0040FB04                 mov     edx, ds:Str
.text:0040FB0A                 test    edx, edx
.text:0040FB0C                 jz      short loc_40FB87
.text:0040FB0E
.text:0040FB0E loc_40FB0E:                             ; CODE XREF: sub_40F7A0+3FA↓j
.text:0040FB0E                                         ; sub_40F7A0+40C↓j
.text:0040FB0E                 mov     eax, [esp+6Ch+String1]
.text:0040FB12                 test    eax, eax
.text:0040FB14                 jz      short loc_40FB1F
.text:0040FB16                 mov     esi, [esp+6Ch+String1]
.text:0040FB1A                 cmp     byte ptr [esi], 0
.text:0040FB1D                 jnz     short loc_40FB3C
.text:0040FB1F
.text:0040FB1F loc_40FB1F:                             ; CODE XREF: sub_40F7A0+374↑j
.text:0040FB1F                                         ; sub_40F7A0+3B0↓j ...
.text:0040FB1F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:0040FB22                 call    FreeLibrary
.text:0040FB27                 sub     esp, 4
.text:0040FB2A                 test    ebp, ebp
.text:0040FB2C                 jz      loc_40F850
.text:0040FB32                 mov     ebx, 49h ; 'I'
.text:0040FB37                 jmp     loc_40F850
.text:0040FB3C ; ---------------------------------------------------------------------------
.text:0040FB3C
.text:0040FB3C loc_40FB3C:                             ; CODE XREF: sub_40F7A0+37D↑j
.text:0040FB3C                 mov     [esp+6Ch+Str], esi ; Str
.text:0040FB3F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040FB47                 call    strrchr
.text:0040FB4C                 test    eax, eax
.text:0040FB4E                 mov     esi, eax
.text:0040FB50                 jz      short loc_40FB1F
.text:0040FB52                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:0040FB56                 mov     ecx, ds:Str
.text:0040FB5C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040FB5F                 call    strstr
.text:0040FB64                 test    eax, eax
.text:0040FB66                 jz      short loc_40FB6F
.text:0040FB68
.text:0040FB68 loc_40FB68:                             ; CODE XREF: sub_40F7A0+362↑j
.text:0040FB68                                         ; sub_40F7A0+3E5↓j
.text:0040FB68                 mov     ebp, 1
.text:0040FB6D                 jmp     short loc_40FB1F
.text:0040FB6F ; ---------------------------------------------------------------------------
.text:0040FB6F
.text:0040FB6F loc_40FB6F:                             ; CODE XREF: sub_40F7A0+3C6↑j
.text:0040FB6F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:0040FB73                 mov     edx, off_41A074 ; ".com;.exe;.bat;.cmd"
.text:0040FB79                 mov     [esp+6Ch+Str], edx ; Str
.text:0040FB7C                 call    strstr
.text:0040FB81                 test    eax, eax
.text:0040FB83                 jz      short loc_40FB1F
.text:0040FB85                 jmp     short loc_40FB68
.text:0040FB87 ; ---------------------------------------------------------------------------
.text:0040FB87
.text:0040FB87 loc_40FB87:                             ; CODE XREF: sub_40F7A0+36C↑j
.text:0040FB87                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0040FB8E                 call    getenv
.text:0040FB93                 mov     ds:Str, eax
.text:0040FB98                 test    eax, eax
.text:0040FB9A                 jnz     loc_40FB0E
.text:0040FBA0                 mov     esi, off_41A074 ; ".com;.exe;.bat;.cmd"
.text:0040FBA6                 mov     ds:Str, esi
.text:0040FBAC                 jmp     loc_40FB0E
.text:0040FBB1 ; ---------------------------------------------------------------------------
.text:0040FBB1
.text:0040FBB1 loc_40FBB1:                             ; CODE XREF: sub_40F7A0+81↑j
.text:0040FBB1                                         ; sub_40F7A0+452↓j
.text:0040FBB1                 shld    edi, esi, 8
.text:0040FBB5                 movsx   eax, cl
.text:0040FBB8                 shl     esi, 8
.text:0040FBBB                 cdq
.text:0040FBBC                 add     esi, eax
.text:0040FBBE                 adc     edi, edx
.text:0040FBC0                 mov     edx, edi
.text:0040FBC2                 xor     ebx, ebx
.text:0040FBC4                 and     edx, 0FF000000h
.text:0040FBCA                 mov     eax, edx
.text:0040FBCC                 or      eax, ebx
.text:0040FBCE                 jz      short loc_40FBE9
.text:0040FBD0                 mov     ecx, edx
.text:0040FBD2                 xor     eax, eax
.text:0040FBD4                 shr     ecx, 10h
.text:0040FBD7                 mov     edx, esi
.text:0040FBD9                 xor     edx, ecx
.text:0040FBDB                 mov     ecx, edi
.text:0040FBDD                 xor     ecx, eax
.text:0040FBDF                 mov     esi, edx
.text:0040FBE1                 mov     edi, ecx
.text:0040FBE3                 and     edi, 0FFFFFFh
.text:0040FBE9
.text:0040FBE9 loc_40FBE9:                             ; CODE XREF: sub_40F7A0+42E↑j
.text:0040FBE9                 inc     ebp
.text:0040FBEA                 movzx   ebx, byte ptr [ebp+0]
.text:0040FBEE                 test    bl, bl
.text:0040FBF0                 mov     cl, bl
.text:0040FBF2                 jnz     short loc_40FBB1
.text:0040FBF4                 mov     eax, esi
.text:0040FBF6                 mov     edx, edi
.text:0040FBF8                 jmp     loc_40F82B
.text:0040FBF8 ; ---------------------------------------------------------------------------
.text:0040FBFD                 align 10h
.text:0040FC00
.text:0040FC00 loc_40FC00:                             ; CODE XREF: sub_40F7A0+3F↑j
.text:0040FC00                                         ; sub_40F7A0+57↑j
.text:0040FC00                 mov     edi, [esp+6Ch+lpRootPathName]
.text:0040FC04                 mov     ebp, [esp+6Ch+String1]
.text:0040FC08                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0040FC0C                 mov     [esp+6Ch+Str], ebp ; String1
.text:0040FC0F                 call    _stricmp
.text:0040FC14                 test    eax, eax
.text:0040FC16                 jnz     short loc_40FC30
.text:0040FC18                 mov     ebx, [esp+6Ch+arg_4]
.text:0040FC1C                 mov     dword ptr [ebx+8], 5
.text:0040FC23                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040FC2A                 jmp     loc_40F7FD
.text:0040FC2A ; ---------------------------------------------------------------------------
.text:0040FC2F                 align 10h
.text:0040FC30
.text:0040FC30 loc_40FC30:                             ; CODE XREF: sub_40F7A0+476↑j
.text:0040FC30                 mov     ebp, [esp+6Ch+String1]
.text:0040FC34                 xor     esi, esi
.text:0040FC36                 xor     edi, edi
.text:0040FC38                 add     ebp, ebx
.text:0040FC3A                 jz      short loc_40FC44
.text:0040FC3C                 movzx   ecx, byte ptr [ebp+0]
.text:0040FC40                 test    cl, cl
.text:0040FC42                 jnz     short loc_40FC57
.text:0040FC44
.text:0040FC44 loc_40FC44:                             ; CODE XREF: sub_40F7A0+49A↑j
.text:0040FC44                 xor     eax, eax
.text:0040FC46                 xor     edx, edx
.text:0040FC48
.text:0040FC48 loc_40FC48:                             ; CODE XREF: sub_40F7A0+4FE↓j
.text:0040FC48                 mov     ebp, [esp+6Ch+arg_4]
.text:0040FC4C                 mov     [ebp+8], eax
.text:0040FC4F                 mov     [ebp+0Ch], edx
.text:0040FC52                 jmp     loc_40F7FD
.text:0040FC57 ; ---------------------------------------------------------------------------
.text:0040FC57
.text:0040FC57 loc_40FC57:                             ; CODE XREF: sub_40F7A0+4A2↑j
.text:0040FC57                                         ; sub_40F7A0+4F8↓j
.text:0040FC57                 shld    edi, esi, 8
.text:0040FC5B                 movsx   eax, cl
.text:0040FC5E                 shl     esi, 8
.text:0040FC61                 cdq
.text:0040FC62                 add     esi, eax
.text:0040FC64                 adc     edi, edx
.text:0040FC66                 mov     edx, edi
.text:0040FC68                 xor     ebx, ebx
.text:0040FC6A                 and     edx, 0FF000000h
.text:0040FC70                 mov     eax, edx
.text:0040FC72                 or      eax, ebx
.text:0040FC74                 jz      short loc_40FC8F
.text:0040FC76                 mov     ecx, edx
.text:0040FC78                 xor     eax, eax
.text:0040FC7A                 shr     ecx, 10h
.text:0040FC7D                 mov     edx, esi
.text:0040FC7F                 xor     edx, ecx
.text:0040FC81                 mov     ecx, edi
.text:0040FC83                 xor     ecx, eax
.text:0040FC85                 mov     esi, edx
.text:0040FC87                 mov     edi, ecx
.text:0040FC89                 and     edi, 0FFFFFFh
.text:0040FC8F
.text:0040FC8F loc_40FC8F:                             ; CODE XREF: sub_40F7A0+4D4↑j
.text:0040FC8F                 inc     ebp
.text:0040FC90                 movzx   ebx, byte ptr [ebp+0]
.text:0040FC94                 test    bl, bl
.text:0040FC96                 mov     cl, bl
.text:0040FC98                 jnz     short loc_40FC57
.text:0040FC9A                 mov     eax, esi
.text:0040FC9C                 mov     edx, edi
.text:0040FC9E                 jmp     short loc_40FC48
.text:0040FC9E sub_40F7A0      endp
.text:0040FC9E
.text:0040FCA0
.text:0040FCA0 ; =============== S U B R O U T I N E =======================================
.text:0040FCA0
.text:0040FCA0
.text:0040FCA0 ; int __cdecl sub_40FCA0(LPCSTR)
.text:0040FCA0 sub_40FCA0      proc near               ; CODE XREF: sub_4116E0+CA↓p
.text:0040FCA0
.text:0040FCA0 lpRootPathName  = dword ptr -83Ch
.text:0040FCA0 lpVolumeNameBuffer= dword ptr -838h
.text:0040FCA0 nVolumeNameSize = dword ptr -834h
.text:0040FCA0 lpVolumeSerialNumber= dword ptr -830h
.text:0040FCA0 lpMaximumComponentLength= dword ptr -82Ch
.text:0040FCA0 lpFileSystemFlags= dword ptr -828h
.text:0040FCA0 lpFileSystemNameBuffer= dword ptr -824h
.text:0040FCA0 nFileSystemNameSize= dword ptr -820h
.text:0040FCA0 VolumeSerialNumber= dword ptr -818h
.text:0040FCA0 MaximumComponentLength= dword ptr -814h
.text:0040FCA0 FileSystemFlags = dword ptr -810h
.text:0040FCA0 FileSystemNameBuffer= byte ptr -80Ch
.text:0040FCA0 VolumeNameBuffer= byte ptr -40Ch
.text:0040FCA0 var_4           = dword ptr -4
.text:0040FCA0 arg_0           = dword ptr  4
.text:0040FCA0
.text:0040FCA0                 sub     esp, 83Ch
.text:0040FCA6                 mov     [esp+83Ch+var_4], ebx
.text:0040FCAD                 mov     ebx, [esp+83Ch+arg_0]
.text:0040FCB4                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:0040FCB7                 call    sub_4115C0
.text:0040FCBC                 mov     [esp+83Ch+lpRootPathName], eax
.text:0040FCBF                 call    sub_410FA0
.text:0040FCC4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:0040FCC7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:0040FCCB                 mov     ebx, eax
.text:0040FCCD                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:0040FCD1                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:0040FCD5                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:0040FCD9                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:0040FCDD                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:0040FCE1                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040FCE5                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:0040FCEC                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040FCF0                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:0040FCF4                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040FCFC                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040FD04                 call    GetVolumeInformationA
.text:0040FD09                 sub     esp, 20h
.text:0040FD0C                 test    eax, eax
.text:0040FD0E                 setz    cl
.text:0040FD11                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:0040FD14                 movzx   edx, cl
.text:0040FD17                 dec     edx
.text:0040FD18                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0040FD1C                 call    free
.text:0040FD21                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:0040FD25                 mov     ebx, [esp+83Ch+var_4]
.text:0040FD2C                 add     esp, 83Ch
.text:0040FD32                 retn
.text:0040FD32 sub_40FCA0      endp
.text:0040FD32
.text:0040FD32 ; ---------------------------------------------------------------------------
.text:0040FD33                 align 10h
.text:0040FD40                 push    ebp
.text:0040FD41                 push    edi
.text:0040FD42                 xor     edi, edi
.text:0040FD44                 push    esi
.text:0040FD45                 xor     esi, esi
.text:0040FD47                 push    ebx
.text:0040FD48                 mov     ebp, [esp+14h]
.text:0040FD4C                 test    ebp, ebp
.text:0040FD4E                 jz      short loc_40FD58
.text:0040FD50                 movzx   ecx, byte ptr [ebp+0]
.text:0040FD54                 test    cl, cl
.text:0040FD56                 jnz     short loc_40FD61
.text:0040FD58
.text:0040FD58 loc_40FD58:                             ; CODE XREF: .text:0040FD4E↑j
.text:0040FD58                 xor     eax, eax
.text:0040FD5A                 xor     edx, edx
.text:0040FD5C
.text:0040FD5C loc_40FD5C:                             ; CODE XREF: .text:0040FDA8↓j
.text:0040FD5C                 pop     ebx
.text:0040FD5D                 pop     esi
.text:0040FD5E                 pop     edi
.text:0040FD5F                 pop     ebp
.text:0040FD60                 retn
.text:0040FD61 ; ---------------------------------------------------------------------------
.text:0040FD61
.text:0040FD61 loc_40FD61:                             ; CODE XREF: .text:0040FD56↑j
.text:0040FD61                                         ; .text:0040FDA2↓j
.text:0040FD61                 shld    edi, esi, 8
.text:0040FD65                 movsx   eax, cl
.text:0040FD68                 shl     esi, 8
.text:0040FD6B                 cdq
.text:0040FD6C                 add     esi, eax
.text:0040FD6E                 adc     edi, edx
.text:0040FD70                 mov     edx, edi
.text:0040FD72                 xor     ebx, ebx
.text:0040FD74                 and     edx, 0FF000000h
.text:0040FD7A                 mov     eax, edx
.text:0040FD7C                 or      eax, ebx
.text:0040FD7E                 jz      short loc_40FD99
.text:0040FD80                 mov     ecx, edx
.text:0040FD82                 xor     eax, eax
.text:0040FD84                 shr     ecx, 10h
.text:0040FD87                 mov     edx, esi
.text:0040FD89                 xor     edx, ecx
.text:0040FD8B                 mov     ecx, edi
.text:0040FD8D                 xor     ecx, eax
.text:0040FD8F                 mov     esi, edx
.text:0040FD91                 mov     edi, ecx
.text:0040FD93                 and     edi, 0FFFFFFh
.text:0040FD99
.text:0040FD99 loc_40FD99:                             ; CODE XREF: .text:0040FD7E↑j
.text:0040FD99                 inc     ebp
.text:0040FD9A                 movzx   ebx, byte ptr [ebp+0]
.text:0040FD9E                 test    bl, bl
.text:0040FDA0                 mov     cl, bl
.text:0040FDA2                 jnz     short loc_40FD61
.text:0040FDA4                 mov     eax, esi
.text:0040FDA6                 mov     edx, edi
.text:0040FDA8                 jmp     short loc_40FD5C
.text:0040FDA8 ; ---------------------------------------------------------------------------
.text:0040FDAA                 align 10h
.text:0040FDB0                 sub     esp, 2Ch
.text:0040FDB3                 lea     edx, [esp+24h]
.text:0040FDB7                 lea     ecx, [esp+28h]
.text:0040FDBB                 mov     [esp+0Ch], edx
.text:0040FDBF                 lea     edx, [esp+1Ch]
.text:0040FDC3                 mov     [esp+4], edx
.text:0040FDC7                 mov     edx, [esp+30h]
.text:0040FDCB                 mov     [esp+10h], ecx
.text:0040FDCF                 lea     ecx, [esp+20h]
.text:0040FDD3                 mov     [esp+8], ecx
.text:0040FDD7                 mov     [esp], edx
.text:0040FDDA                 call    sub_412010
.text:0040FDDF                 test    eax, eax
.text:0040FDE1                 jnz     short loc_40FE03
.text:0040FDE3                 mov     dword ptr [esp+1Ch], 1
.text:0040FDEB                 mov     dword ptr [esp+20h], 200h
.text:0040FDF3                 mov     dword ptr [esp+24h], 0
.text:0040FDFB                 mov     dword ptr [esp+28h], 0
.text:0040FE03
.text:0040FE03 loc_40FE03:                             ; CODE XREF: .text:0040FDE1↑j
.text:0040FE03                 mov     eax, [esp+20h]
.text:0040FE07                 mov     ecx, [esp+1Ch]
.text:0040FE0B                 add     esp, 2Ch
.text:0040FE0E                 imul    eax, ecx
.text:0040FE11                 retn
.text:0040FE11 ; ---------------------------------------------------------------------------
.text:0040FE12                 align 10h
.text:0040FE20                 sub     esp, 1Ch
.text:0040FE23                 mov     eax, [esp+20h]
.text:0040FE27                 mov     [esp+14h], esi
.text:0040FE2B                 mov     [esp+18h], edi
.text:0040FE2F                 test    eax, eax
.text:0040FE31                 jz      short loc_40FE70
.text:0040FE33                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040FE3B                 mov     [esp], eax
.text:0040FE3E                 call    strrchr
.text:0040FE43                 test    eax, eax
.text:0040FE45                 jz      short loc_40FE70
.text:0040FE47                 cld
.text:0040FE48                 mov     esi, eax
.text:0040FE4A                 mov     edi, offset aLnk ; ".lnk"
.text:0040FE4F                 mov     ecx, 5
.text:0040FE54                 repe cmpsb
.text:0040FE56                 setz    dl
.text:0040FE59                 movzx   eax, dl
.text:0040FE5C                 lea     esi, [esi+0]
.text:0040FE60
.text:0040FE60 loc_40FE60:                             ; CODE XREF: .text:0040FE72↓j
.text:0040FE60                 mov     esi, [esp+14h]
.text:0040FE64                 mov     edi, [esp+18h]
.text:0040FE68                 add     esp, 1Ch
.text:0040FE6B                 retn
.text:0040FE6B ; ---------------------------------------------------------------------------
.text:0040FE6C                 align 10h
.text:0040FE70
.text:0040FE70 loc_40FE70:                             ; CODE XREF: .text:0040FE31↑j
.text:0040FE70                                         ; .text:0040FE45↑j
.text:0040FE70                 xor     eax, eax
.text:0040FE72                 jmp     short loc_40FE60
.text:0040FE72 ; ---------------------------------------------------------------------------
.text:0040FE74                 align 10h
.text:0040FE80                 sub     esp, 1Ch
.text:0040FE83                 mov     [esp+10h], ebx
.text:0040FE87                 mov     ebx, [esp+20h]
.text:0040FE8B                 mov     [esp+14h], esi
.text:0040FE8F                 mov     [esp+18h], edi
.text:0040FE93                 xor     edi, edi
.text:0040FE95                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040FE9C                 call    GetModuleHandleA
.text:0040FEA1                 sub     esp, 4
.text:0040FEA4                 mov     esi, eax
.text:0040FEA6                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040FEAE                 mov     [esp], eax
.text:0040FEB1                 call    GetProcAddress
.text:0040FEB6                 sub     esp, 8
.text:0040FEB9                 test    eax, eax
.text:0040FEBB                 jz      short loc_40FED1
.text:0040FEBD                 mov     [esp], ebx
.text:0040FEC0                 lea     ecx, [esp+0Ch]
.text:0040FEC4                 mov     [esp+4], ecx
.text:0040FEC8                 call    eax
.text:0040FECA                 sub     esp, 8
.text:0040FECD                 test    eax, eax
.text:0040FECF                 jnz     short loc_40FF30
.text:0040FED1
.text:0040FED1 loc_40FED1:                             ; CODE XREF: .text:0040FEBB↑j
.text:0040FED1                 mov     eax, ds:Str
.text:0040FED6                 test    eax, eax
.text:0040FED8                 jz      short loc_40FF50
.text:0040FEDA
.text:0040FEDA loc_40FEDA:                             ; CODE XREF: .text:0040FF63↓j
.text:0040FEDA                                         ; .text:0040FF75↓j
.text:0040FEDA                 test    ebx, ebx
.text:0040FEDC                 jz      short loc_40FEE3
.text:0040FEDE                 cmp     byte ptr [ebx], 0
.text:0040FEE1                 jnz     short loc_40FF00
.text:0040FEE3
.text:0040FEE3 loc_40FEE3:                             ; CODE XREF: .text:0040FEDC↑j
.text:0040FEE3                                         ; .text:0040FF14↓j ...
.text:0040FEE3                 mov     [esp], esi
.text:0040FEE6                 call    FreeLibrary
.text:0040FEEB                 sub     esp, 4
.text:0040FEEE                 mov     eax, edi
.text:0040FEF0                 mov     ebx, [esp+10h]
.text:0040FEF4                 mov     esi, [esp+14h]
.text:0040FEF8                 mov     edi, [esp+18h]
.text:0040FEFC                 add     esp, 1Ch
.text:0040FEFF                 retn
.text:0040FF00 ; ---------------------------------------------------------------------------
.text:0040FF00
.text:0040FF00 loc_40FF00:                             ; CODE XREF: .text:0040FEE1↑j
.text:0040FF00                 mov     [esp], ebx
.text:0040FF03                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040FF0B                 call    strrchr
.text:0040FF10                 test    eax, eax
.text:0040FF12                 mov     ebx, eax
.text:0040FF14                 jz      short loc_40FEE3
.text:0040FF16                 mov     [esp+4], eax
.text:0040FF1A                 mov     ecx, ds:Str
.text:0040FF20                 mov     [esp], ecx
.text:0040FF23                 call    strstr
.text:0040FF28                 test    eax, eax
.text:0040FF2A                 jz      short loc_40FF37
.text:0040FF2C                 lea     esi, [esi+0]
.text:0040FF30
.text:0040FF30 loc_40FF30:                             ; CODE XREF: .text:0040FECF↑j
.text:0040FF30                                         ; .text:0040FF4D↓j
.text:0040FF30                 mov     edi, 1
.text:0040FF35                 jmp     short loc_40FEE3
.text:0040FF37 ; ---------------------------------------------------------------------------
.text:0040FF37
.text:0040FF37 loc_40FF37:                             ; CODE XREF: .text:0040FF2A↑j
.text:0040FF37                 mov     [esp+4], ebx
.text:0040FF3B                 mov     ebx, off_41A074 ; ".com;.exe;.bat;.cmd"
.text:0040FF41                 mov     [esp], ebx
.text:0040FF44                 call    strstr
.text:0040FF49                 test    eax, eax
.text:0040FF4B                 jz      short loc_40FEE3
.text:0040FF4D                 jmp     short loc_40FF30
.text:0040FF4D ; ---------------------------------------------------------------------------
.text:0040FF4F                 align 10h
.text:0040FF50
.text:0040FF50 loc_40FF50:                             ; CODE XREF: .text:0040FED8↑j
.text:0040FF50                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040FF57                 call    getenv
.text:0040FF5C                 mov     ds:Str, eax
.text:0040FF61                 test    eax, eax
.text:0040FF63                 jnz     loc_40FEDA
.text:0040FF69                 mov     edx, off_41A074 ; ".com;.exe;.bat;.cmd"
.text:0040FF6F                 mov     ds:Str, edx
.text:0040FF75                 jmp     loc_40FEDA
.text:0040FF75 ; ---------------------------------------------------------------------------
.text:0040FF7A                 align 10h
.text:0040FF80                 sub     esp, 0Ch
.text:0040FF83                 mov     edx, [esp+10h]
.text:0040FF87                 mov     [esp], edx
.text:0040FF8A                 call    GetFileType
.text:0040FF8F                 sub     esp, 4
.text:0040FF92                 xor     edx, edx
.text:0040FF94                 cmp     eax, 2
.text:0040FF97                 jz      short loc_40FFB0
.text:0040FF99                 cmp     eax, 3
.text:0040FF9C                 jz      short loc_40FFA4
.text:0040FF9E
.text:0040FF9E loc_40FF9E:                             ; CODE XREF: .text:0040FFA9↓j
.text:0040FF9E                                         ; .text:0040FFB5↓j
.text:0040FF9E                 mov     eax, edx
.text:0040FFA0                 add     esp, 0Ch
.text:0040FFA3                 retn
.text:0040FFA4 ; ---------------------------------------------------------------------------
.text:0040FFA4
.text:0040FFA4 loc_40FFA4:                             ; CODE XREF: .text:0040FF9C↑j
.text:0040FFA4                 mov     edx, 1000h
.text:0040FFA9                 jmp     short loc_40FF9E
.text:0040FFA9 ; ---------------------------------------------------------------------------
.text:0040FFAB                 align 10h
.text:0040FFB0
.text:0040FFB0 loc_40FFB0:                             ; CODE XREF: .text:0040FF97↑j
.text:0040FFB0                 mov     edx, 2000h
.text:0040FFB5                 jmp     short loc_40FF9E
.text:0040FFB5 ; ---------------------------------------------------------------------------
.text:0040FFB7                 align 10h
.text:0040FFC0                 mov     ecx, [esp+4]
.text:0040FFC4                 xor     edx, edx
.text:0040FFC6                 test    cl, 10h
.text:0040FFC9                 setz    dl
.text:0040FFCC                 dec     edx
.text:0040FFCD                 and     edx, 0FFFFC000h
.text:0040FFD3                 add     edx, 8000h
.text:0040FFD9                 or      edx, 124h
.text:0040FFDF                 test    cl, 1
.text:0040FFE2                 movzx   eax, dx
.text:0040FFE5                 jnz     short locret_40FFEC
.text:0040FFE7                 or      eax, 92h
.text:0040FFEC
.text:0040FFEC locret_40FFEC:                          ; CODE XREF: .text:0040FFE5↑j
.text:0040FFEC                 retn
.text:0040FFEC ; ---------------------------------------------------------------------------
.text:0040FFED                 align 10h
.text:0040FFF0                 sub     esp, 2Ch
.text:0040FFF3                 mov     [esp+20h], esi
.text:0040FFF7                 mov     esi, [esp+30h]
.text:0040FFFB                 mov     [esp+1Ch], ebx
.text:0040FFFF                 xor     ebx, ebx
.text:00410001                 test    esi, esi
.text:00410003                 mov     [esp+24h], edi
.text:00410007                 mov     [esp+28h], ebp
.text:0041000B                 jz      short loc_410060
.text:0041000D                 cmp     byte ptr [esi], 0
.text:00410010                 jnz     short loc_410064
.text:00410012
.text:00410012 loc_410012:                             ; CODE XREF: .text:004100CC↓j
.text:00410012                                         ; .text:004100D7↓j
.text:00410012                 test    esi, esi
.text:00410014                 jz      short loc_410060
.text:00410016                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0041001E                 mov     [esp], esi
.text:00410021                 call    strrchr
.text:00410026                 test    eax, eax
.text:00410028                 jz      short loc_410060
.text:0041002A                 cld
.text:0041002B                 mov     ecx, 5
.text:00410030                 mov     esi, eax
.text:00410032                 mov     edi, offset aLnk ; ".lnk"
.text:00410037                 repe cmpsb
.text:00410039                 setz    cl
.text:0041003C                 movzx   eax, cl
.text:0041003F                 nop
.text:00410040
.text:00410040 loc_410040:                             ; CODE XREF: .text:00410062↓j
.text:00410040                 test    eax, eax
.text:00410042                 jz      short loc_41004A
.text:00410044                 or      ebx, 0A000h
.text:0041004A
.text:0041004A loc_41004A:                             ; CODE XREF: .text:00410042↑j
.text:0041004A                 mov     eax, ebx
.text:0041004C                 mov     esi, [esp+20h]
.text:00410050                 mov     ebx, [esp+1Ch]
.text:00410054                 mov     edi, [esp+24h]
.text:00410058                 mov     ebp, [esp+28h]
.text:0041005C                 add     esp, 2Ch
.text:0041005F                 retn
.text:00410060 ; ---------------------------------------------------------------------------
.text:00410060
.text:00410060 loc_410060:                             ; CODE XREF: .text:0041000B↑j
.text:00410060                                         ; .text:00410014↑j ...
.text:00410060                 xor     eax, eax
.text:00410062                 jmp     short loc_410040
.text:00410064 ; ---------------------------------------------------------------------------
.text:00410064
.text:00410064 loc_410064:                             ; CODE XREF: .text:00410010↑j
.text:00410064                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0041006B                 call    GetModuleHandleA
.text:00410070                 sub     esp, 4
.text:00410073                 mov     ebp, eax
.text:00410075                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0041007D                 mov     [esp], eax
.text:00410080                 call    GetProcAddress
.text:00410085                 sub     esp, 8
.text:00410088                 test    eax, eax
.text:0041008A                 mov     dword ptr [esp+14h], 0
.text:00410092                 jz      short loc_4100A8
.text:00410094                 mov     [esp], esi
.text:00410097                 lea     ecx, [esp+18h]
.text:0041009B                 mov     [esp+4], ecx
.text:0041009F                 call    eax
.text:004100A1                 sub     esp, 8
.text:004100A4                 test    eax, eax
.text:004100A6                 jnz     short loc_410108
.text:004100A8
.text:004100A8 loc_4100A8:                             ; CODE XREF: .text:00410092↑j
.text:004100A8                 mov     edx, ds:Str
.text:004100AE                 test    edx, edx
.text:004100B0                 jz      short loc_410130
.text:004100B2
.text:004100B2 loc_4100B2:                             ; CODE XREF: .text:00410143↓j
.text:004100B2                                         ; .text:00410155↓j
.text:004100B2                 test    esi, esi
.text:004100B4                 jz      short loc_4100BB
.text:004100B6                 cmp     byte ptr [esi], 0
.text:004100B9                 jnz     short loc_4100DC
.text:004100BB
.text:004100BB loc_4100BB:                             ; CODE XREF: .text:004100B4↑j
.text:004100BB                                         ; .text:004100F0↓j ...
.text:004100BB                 mov     [esp], ebp
.text:004100BE                 call    FreeLibrary
.text:004100C3                 sub     esp, 4
.text:004100C6                 mov     eax, [esp+14h]
.text:004100CA                 test    eax, eax
.text:004100CC                 jz      loc_410012
.text:004100D2                 mov     ebx, 49h ; 'I'
.text:004100D7                 jmp     loc_410012
.text:004100DC ; ---------------------------------------------------------------------------
.text:004100DC
.text:004100DC loc_4100DC:                             ; CODE XREF: .text:004100B9↑j
.text:004100DC                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:004100E4                 mov     [esp], esi
.text:004100E7                 call    strrchr
.text:004100EC                 test    eax, eax
.text:004100EE                 mov     edi, eax
.text:004100F0                 jz      short loc_4100BB
.text:004100F2                 mov     [esp+4], eax
.text:004100F6                 mov     edx, ds:Str
.text:004100FC                 mov     [esp], edx
.text:004100FF                 call    strstr
.text:00410104                 test    eax, eax
.text:00410106                 jz      short loc_410112
.text:00410108
.text:00410108 loc_410108:                             ; CODE XREF: .text:004100A6↑j
.text:00410108                                         ; .text:00410128↓j
.text:00410108                 mov     dword ptr [esp+14h], 1
.text:00410110                 jmp     short loc_4100BB
.text:00410112 ; ---------------------------------------------------------------------------
.text:00410112
.text:00410112 loc_410112:                             ; CODE XREF: .text:00410106↑j
.text:00410112                 mov     [esp+4], edi
.text:00410116                 mov     edi, off_41A074 ; ".com;.exe;.bat;.cmd"
.text:0041011C                 mov     [esp], edi
.text:0041011F                 call    strstr
.text:00410124                 test    eax, eax
.text:00410126                 jz      short loc_4100BB
.text:00410128                 jmp     short loc_410108
.text:00410128 ; ---------------------------------------------------------------------------
.text:0041012A                 align 10h
.text:00410130
.text:00410130 loc_410130:                             ; CODE XREF: .text:004100B0↑j
.text:00410130                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00410137                 call    getenv
.text:0041013C                 mov     ds:Str, eax
.text:00410141                 test    eax, eax
.text:00410143                 jnz     loc_4100B2
.text:00410149                 mov     ecx, off_41A074 ; ".com;.exe;.bat;.cmd"
.text:0041014F                 mov     ds:Str, ecx
.text:00410155                 jmp     loc_4100B2
.text:00410155 ; ---------------------------------------------------------------------------
.text:0041015A                 align 10h
.text:00410160                 push    esi
.text:00410161                 push    ebx
.text:00410162                 sub     esp, 864h
.text:00410168                 mov     ebx, [esp+870h]
.text:0041016F                 lea     edx, [esp+830h]
.text:00410176                 mov     esi, [esp+874h]
.text:0041017D                 mov     [esp+4], edx
.text:00410181                 mov     [esp], ebx
.text:00410184                 call    sub_40EFE0
.text:00410189                 xor     edx, edx
.text:0041018B                 test    eax, eax
.text:0041018D                 jz      loc_410275
.text:00410193                 mov     ecx, [esp+830h]
.text:0041019A                 test    cl, 10h
.text:0041019D                 mov     [esi], ecx
.text:0041019F                 mov     eax, [esp+834h]
.text:004101A6                 mov     edx, [esp+838h]
.text:004101AD                 mov     [esi+4], eax
.text:004101B0                 mov     [esi+8], edx
.text:004101B3                 mov     eax, [esp+83Ch]
.text:004101BA                 mov     edx, [esp+840h]
.text:004101C1                 mov     [esi+0Ch], eax
.text:004101C4                 mov     [esi+10h], edx
.text:004101C7                 mov     edx, [esp+848h]
.text:004101CE                 mov     eax, [esp+844h]
.text:004101D5                 mov     [esi+18h], edx
.text:004101D8                 mov     [esi+14h], eax
.text:004101DB                 mov     edx, [esp+84Ch]
.text:004101E2                 mov     [esi+20h], edx
.text:004101E5                 mov     edx, [esp+850h]
.text:004101EC                 mov     [esi+24h], edx
.text:004101EF                 jnz     loc_410280
.text:004101F5                 mov     dword ptr [esi+28h], 1
.text:004101FC
.text:004101FC loc_4101FC:                             ; CODE XREF: .text:0041028B↓j
.text:004101FC                 mov     [esp], ebx
.text:004101FF                 call    sub_4115C0
.text:00410204                 mov     [esp], eax
.text:00410207                 call    sub_410FA0
.text:0041020C                 mov     [esp], eax
.text:0041020F                 lea     edx, [esp+30h]
.text:00410213                 mov     ebx, eax
.text:00410215                 mov     [esp+18h], edx
.text:00410219                 lea     ecx, [esp+2Ch]
.text:0041021D                 lea     edx, [esp+28h]
.text:00410221                 mov     [esp+14h], ecx
.text:00410225                 lea     ecx, [esp+24h]
.text:00410229                 mov     [esp+10h], edx
.text:0041022D                 lea     edx, [esp+430h]
.text:00410234                 mov     [esp+0Ch], ecx
.text:00410238                 mov     [esp+4], edx
.text:0041023C                 mov     dword ptr [esp+1Ch], 400h
.text:00410244                 mov     dword ptr [esp+8], 400h
.text:0041024C                 call    GetVolumeInformationA
.text:00410251                 sub     esp, 20h
.text:00410254                 test    eax, eax
.text:00410256                 setz    cl
.text:00410259                 mov     [esp], ebx
.text:0041025C                 movzx   edx, cl
.text:0041025F                 dec     edx
.text:00410260                 and     [esp+24h], edx
.text:00410264                 call    free
.text:00410269                 mov     ecx, [esp+24h]
.text:0041026D                 mov     edx, 1
.text:00410272                 mov     [esi+1Ch], ecx
.text:00410275
.text:00410275 loc_410275:                             ; CODE XREF: .text:0041018D↑j
.text:00410275                 add     esp, 864h
.text:0041027B                 mov     eax, edx
.text:0041027D                 pop     ebx
.text:0041027E                 pop     esi
.text:0041027F                 retn
.text:00410280 ; ---------------------------------------------------------------------------
.text:00410280
.text:00410280 loc_410280:                             ; CODE XREF: .text:004101EF↑j
.text:00410280                 mov     [esp], ebx
.text:00410283                 call    sub_40F150
.text:00410288                 mov     [esi+28h], eax
.text:0041028B                 jmp     loc_4101FC
.text:00410290 ; ---------------------------------------------------------------------------
.text:00410290                 push    ebp
.text:00410291                 xor     edx, edx
.text:00410293                 push    edi
.text:00410294                 push    esi
.text:00410295                 xor     esi, esi
.text:00410297                 push    ebx
.text:00410298                 sub     esp, 1Ch
.text:0041029B                 mov     ebx, [esp+5Ch]
.text:0041029F                 mov     ecx, [esp+30h]
.text:004102A3                 mov     edi, [esp+60h]
.text:004102A7                 or      esi, ebx
.text:004102A9                 mov     eax, [esp+4Ch]
.text:004102AD                 or      edi, edx
.text:004102AF                 mov     ebx, [esp+64h]
.text:004102B3                 xor     edx, edx
.text:004102B5                 test    cl, 10h
.text:004102B8                 setz    dl
.text:004102BB                 mov     [ebx+10h], eax
.text:004102BE                 mov     [ebx+8], edi
.text:004102C1                 mov     [ebx+0Ch], esi
.text:004102C4                 dec     edx
.text:004102C5                 and     edx, 0FFFFC000h
.text:004102CB                 mov     dword ptr [ebx+14h], 0
.text:004102D2                 add     edx, 8000h
.text:004102D8                 or      edx, 124h
.text:004102DE                 test    cl, 1
.text:004102E1                 movzx   eax, dx
.text:004102E4                 jnz     short loc_4102EB
.text:004102E6                 or      eax, 92h
.text:004102EB
.text:004102EB loc_4102EB:                             ; CODE XREF: .text:004102E4↑j
.text:004102EB                 mov     ebx, [esp+54h]
.text:004102EF                 xor     edx, edx
.text:004102F1                 xor     ebp, ebp
.text:004102F3                 mov     edi, [esp+50h]
.text:004102F7                 mov     ecx, [esp+64h]
.text:004102FB                 mov     esi, edi
.text:004102FD                 or      [ecx], eax
.text:004102FF                 mov     edi, ebx
.text:00410301                 or      edi, ebp
.text:00410303                 mov     ebp, edx
.text:00410305                 mov     ebx, [esp+64h]
.text:00410309                 or      ebp, esi
.text:0041030B                 mov     esi, [esp+58h]
.text:0041030F                 mov     edx, [esp+40h]
.text:00410313                 mov     [ebx+30h], edi
.text:00410316                 mov     [ebx+18h], esi
.text:00410319                 mov     ecx, edx
.text:0041031B                 xor     esi, esi
.text:0041031D                 mov     [ebx+34h], ebp
.text:00410320                 xor     edx, edx
.text:00410322                 or      esi, ecx
.text:00410324                 mov     dword ptr [esp+8], 989680h
.text:0041032C                 mov     ebx, [esp+3Ch]
.text:00410330                 mov     ecx, esi
.text:00410332                 mov     dword ptr [esp+0Ch], 0
.text:0041033A                 or      ebx, edx
.text:0041033C                 mov     edx, ebx
.text:0041033E                 sub     edx, 0D53E8000h
.text:00410344                 sbb     ecx, 19DB1DEh
.text:0041034A                 mov     [esp+4], ecx
.text:0041034E                 mov     [esp], edx
.text:00410351                 call    sub_417E90
.text:00410356                 mov     edx, eax
.text:00410358                 mov     ecx, [esp+64h]
.text:0041035C                 shr     eax, 1Fh
.text:0041035F                 dec     eax
.text:00410360                 and     edx, eax
.text:00410362                 mov     [ecx+38h], edx
.text:00410365                 mov     [esp], ebx
.text:00410368                 mov     [esp+4], esi
.text:0041036C                 mov     dword ptr [esp+8], 989680h
.text:00410374                 mov     dword ptr [esp+0Ch], 0
.text:0041037C                 call    sub_417D10
.text:00410381                 lea     ecx, [eax+eax*4]
.text:00410384                 lea     esi, [ecx+ecx*4]
.text:00410387                 mov     eax, [esp+64h]
.text:0041038B                 shl     esi, 2
.text:0041038E                 mov     ebx, esi
.text:00410390                 shr     ebx, 1Fh
.text:00410393                 dec     ebx
.text:00410394                 and     ebx, esi
.text:00410396                 xor     esi, esi
.text:00410398                 mov     [eax+3Ch], ebx
.text:0041039B                 mov     edx, [esp+38h]
.text:0041039F                 mov     dword ptr [esp+8], 989680h
.text:004103A7                 mov     ebx, [esp+34h]
.text:004103AB                 mov     dword ptr [esp+0Ch], 0
.text:004103B3                 mov     ecx, edx
.text:004103B5                 xor     edx, edx
.text:004103B7                 or      ebx, edx
.text:004103B9                 or      esi, ecx
.text:004103BB                 mov     edx, ebx
.text:004103BD                 sub     edx, 0D53E8000h
.text:004103C3                 mov     ecx, esi
.text:004103C5                 sbb     ecx, 19DB1DEh
.text:004103CB                 mov     [esp+4], ecx
.text:004103CF                 mov     [esp], edx
.text:004103D2                 call    sub_417E90
.text:004103D7                 mov     edx, eax
.text:004103D9                 mov     ecx, [esp+64h]
.text:004103DD                 shr     eax, 1Fh
.text:004103E0                 dec     eax
.text:004103E1                 and     edx, eax
.text:004103E3                 mov     [ecx+48h], edx
.text:004103E6                 mov     [esp], ebx
.text:004103E9                 mov     [esp+4], esi
.text:004103ED                 mov     dword ptr [esp+8], 989680h
.text:004103F5                 mov     dword ptr [esp+0Ch], 0
.text:004103FD                 call    sub_417D10
.text:00410402                 lea     edx, [eax+eax*4]
.text:00410405                 mov     ebx, [esp+64h]
.text:00410409                 lea     ecx, [edx+edx*4]
.text:0041040C                 shl     ecx, 2
.text:0041040F                 mov     esi, ecx
.text:00410411                 shr     esi, 1Fh
.text:00410414                 dec     esi
.text:00410415                 and     esi, ecx
.text:00410417                 mov     [ebx+4Ch], esi
.text:0041041A                 mov     edx, [esp+48h]
.text:0041041E                 xor     esi, esi
.text:00410420                 mov     dword ptr [esp+8], 989680h
.text:00410428                 mov     ebx, [esp+44h]
.text:0041042C                 mov     dword ptr [esp+0Ch], 0
.text:00410434                 mov     ecx, edx
.text:00410436                 xor     edx, edx
.text:00410438                 or      ebx, edx
.text:0041043A                 or      esi, ecx
.text:0041043C                 mov     edx, ebx
.text:0041043E                 sub     edx, 0D53E8000h
.text:00410444                 mov     ecx, esi
.text:00410446                 sbb     ecx, 19DB1DEh
.text:0041044C                 mov     [esp+4], ecx
.text:00410450                 mov     [esp], edx
.text:00410453                 call    sub_417E90
.text:00410458                 mov     edx, eax
.text:0041045A                 mov     ecx, [esp+64h]
.text:0041045E                 shr     eax, 1Fh
.text:00410461                 dec     eax
.text:00410462                 and     edx, eax
.text:00410464                 mov     [ecx+40h], edx
.text:00410467                 mov     [esp+4], esi
.text:0041046B                 mov     dword ptr [esp+8], 989680h
.text:00410473                 mov     dword ptr [esp+0Ch], 0
.text:0041047B                 mov     [esp], ebx
.text:0041047E                 call    sub_417D10
.text:00410483                 lea     edx, [eax+eax*4]
.text:00410486                 lea     esi, [edx+edx*4]
.text:00410489                 mov     eax, [esp+64h]
.text:0041048D                 shl     esi, 2
.text:00410490                 mov     edx, ebp
.text:00410492                 mov     ecx, esi
.text:00410494                 mov     dword ptr [eax+50h], 200h
.text:0041049B                 shr     ecx, 1Fh
.text:0041049E                 dec     ecx
.text:0041049F                 and     ecx, esi
.text:004104A1                 test    ebp, ebp
.text:004104A3                 mov     [eax+44h], ecx
.text:004104A6                 mov     eax, edi
.text:004104A8                 js      short loc_4104E2
.text:004104AA
.text:004104AA loc_4104AA:                             ; CODE XREF: .text:004104EA↓j
.text:004104AA                 xor     esi, esi
.text:004104AC                 mov     ebp, edi
.text:004104AE                 mov     ecx, eax
.text:004104B0                 shrd    ecx, edx, 9
.text:004104B4                 mov     ebx, edx
.text:004104B6                 and     ebp, 1FFh
.text:004104BC                 mov     eax, esi
.text:004104BE                 sar     ebx, 9
.text:004104C1                 or      eax, ebp
.text:004104C3                 jz      short loc_4104CB
.text:004104C5                 add     ecx, 1
.text:004104C8                 adc     ebx, 0
.text:004104CB
.text:004104CB loc_4104CB:                             ; CODE XREF: .text:004104C3↑j
.text:004104CB                 mov     edx, [esp+64h]
.text:004104CF                 mov     eax, 1
.text:004104D4                 mov     [edx+58h], ecx
.text:004104D7                 mov     [edx+5Ch], ebx
.text:004104DA                 add     esp, 1Ch
.text:004104DD                 pop     ebx
.text:004104DE                 pop     esi
.text:004104DF                 pop     edi
.text:004104E0                 pop     ebp
.text:004104E1                 retn
.text:004104E2 ; ---------------------------------------------------------------------------
.text:004104E2
.text:004104E2 loc_4104E2:                             ; CODE XREF: .text:004104A8↑j
.text:004104E2                 add     eax, 1FFh
.text:004104E7                 adc     edx, 0
.text:004104EA                 jmp     short loc_4104AA
.text:004104EA ; ---------------------------------------------------------------------------
.text:004104EC                 align 10h
.text:004104F0                 push    ebp
.text:004104F1                 push    edi
.text:004104F2                 xor     edi, edi
.text:004104F4                 push    esi
.text:004104F5                 xor     esi, esi
.text:004104F7                 push    ebx
.text:004104F8                 sub     esp, 0Ch
.text:004104FB                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:00410502                 call    LoadLibraryA
.text:00410507                 sub     esp, 4
.text:0041050A                 mov     ebp, eax
.text:0041050C                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00410514                 mov     [esp], eax
.text:00410517                 call    GetProcAddress
.text:0041051C                 sub     esp, 8
.text:0041051F                 test    eax, eax
.text:00410521                 jz      short loc_410552
.text:00410523                 lea     ecx, [esp+8]
.text:00410527                 mov     [esp+4], ecx
.text:0041052B                 mov     ecx, [esp+20h]
.text:0041052F                 mov     [esp], ecx
.text:00410532                 call    eax
.text:00410534                 sub     esp, 8
.text:00410537                 mov     ebx, eax
.text:00410539                 cmp     eax, 0FFFFFFFFh
.text:0041053C                 jz      short loc_41056D
.text:0041053E
.text:0041053E loc_41053E:                             ; CODE XREF: .text:00410576↓j
.text:0041053E                 mov     esi, [esp+8]
.text:00410542                 mov     ecx, ebx
.text:00410544                 xor     edi, edi
.text:00410546                 xor     ebx, ebx
.text:00410548                 mov     edx, esi
.text:0041054A                 mov     esi, ecx
.text:0041054C                 or      esi, edi
.text:0041054E                 mov     edi, ebx
.text:00410550                 or      edi, edx
.text:00410552
.text:00410552 loc_410552:                             ; CODE XREF: .text:00410521↑j
.text:00410552                                         ; .text:00410574↓j
.text:00410552                 test    ebp, ebp
.text:00410554                 jz      short loc_410561
.text:00410556                 mov     [esp], ebp
.text:00410559                 call    FreeLibrary
.text:0041055E                 sub     esp, 4
.text:00410561
.text:00410561 loc_410561:                             ; CODE XREF: .text:00410554↑j
.text:00410561                 add     esp, 0Ch
.text:00410564                 mov     eax, esi
.text:00410566                 mov     edx, edi
.text:00410568                 pop     ebx
.text:00410569                 pop     esi
.text:0041056A                 pop     edi
.text:0041056B                 pop     ebp
.text:0041056C                 retn
.text:0041056D ; ---------------------------------------------------------------------------
.text:0041056D
.text:0041056D loc_41056D:                             ; CODE XREF: .text:0041053C↑j
.text:0041056D                 call    GetLastError
.text:00410572                 test    eax, eax
.text:00410574                 jnz     short loc_410552
.text:00410576                 jmp     short loc_41053E
.text:00410576 ; ---------------------------------------------------------------------------
.text:00410578                 align 10h
.text:00410580
.text:00410580 ; =============== S U B R O U T I N E =======================================
.text:00410580
.text:00410580
.text:00410580 ; int __cdecl sub_410580(LPCSTR lpFileName, int)
.text:00410580 sub_410580      proc near               ; CODE XREF: sub_410B00-3F↓p
.text:00410580
.text:00410580 lpRootPathName  = dword ptr -8FCh
.text:00410580 lpVolumeNameBuffer= dword ptr -8F8h
.text:00410580 nVolumeNameSize = dword ptr -8F4h
.text:00410580 lpVolumeSerialNumber= dword ptr -8F0h
.text:00410580 lpMaximumComponentLength= dword ptr -8ECh
.text:00410580 lpFileSystemFlags= dword ptr -8E8h
.text:00410580 lpFileSystemNameBuffer= dword ptr -8E4h
.text:00410580 nFileSystemNameSize= dword ptr -8E0h
.text:00410580 VolumeSerialNumber= dword ptr -8D8h
.text:00410580 MaximumComponentLength= dword ptr -8D4h
.text:00410580 FileSystemFlags = dword ptr -8D0h
.text:00410580 var_8CC         = dword ptr -8CCh
.text:00410580 var_8C8         = dword ptr -8C8h
.text:00410580 var_8C4         = dword ptr -8C4h
.text:00410580 var_8C0         = dword ptr -8C0h
.text:00410580 var_8BC         = dword ptr -8BCh
.text:00410580 var_8B8         = dword ptr -8B8h
.text:00410580 var_8B4         = dword ptr -8B4h
.text:00410580 var_8B0         = dword ptr -8B0h
.text:00410580 var_8AC         = dword ptr -8ACh
.text:00410580 var_8A8         = dword ptr -8A8h
.text:00410580 var_8A4         = dword ptr -8A4h
.text:00410580 var_8A0         = dword ptr -8A0h
.text:00410580 var_89C         = dword ptr -89Ch
.text:00410580 FileSystemNameBuffer= byte ptr -88Ch
.text:00410580 VolumeNameBuffer= byte ptr -48Ch
.text:00410580 var_8C          = dword ptr -8Ch
.text:00410580 var_88          = dword ptr -88h
.text:00410580 var_84          = dword ptr -84h
.text:00410580 var_80          = dword ptr -80h
.text:00410580 var_7C          = dword ptr -7Ch
.text:00410580 var_78          = dword ptr -78h
.text:00410580 var_74          = dword ptr -74h
.text:00410580 var_70          = dword ptr -70h
.text:00410580 var_6C          = dword ptr -6Ch
.text:00410580 var_5C          = dword ptr -5Ch
.text:00410580 var_58          = dword ptr -58h
.text:00410580 var_54          = dword ptr -54h
.text:00410580 var_50          = dword ptr -50h
.text:00410580 var_4C          = dword ptr -4Ch
.text:00410580 var_48          = dword ptr -48h
.text:00410580 var_44          = dword ptr -44h
.text:00410580 var_3C          = dword ptr -3Ch
.text:00410580 var_38          = dword ptr -38h
.text:00410580 var_34          = dword ptr -34h
.text:00410580 lpFileName      = dword ptr  4
.text:00410580 arg_4           = dword ptr  8
.text:00410580
.text:00410580                 push    ebp
.text:00410581                 xor     eax, eax
.text:00410583                 mov     ecx, 0Dh
.text:00410588                 push    edi
.text:00410589                 push    esi
.text:0041058A                 push    ebx
.text:0041058B                 sub     esp, 8ECh
.text:00410591                 lea     edi, [esp+8FCh+var_5C]
.text:00410598                 cld
.text:00410599                 lea     edx, [esp+8FCh+var_8C]
.text:004105A0                 rep stosd
.text:004105A2                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:004105A6                 lea     esi, [esp+8FCh+var_5C]
.text:004105AD                 mov     edx, [esp+8FCh+lpFileName]
.text:004105B4                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:004105B7                 call    sub_40EFE0
.text:004105BC                 test    eax, eax
.text:004105BE                 mov     edx, 0FFFFFFFFh
.text:004105C3                 jz      loc_410954
.text:004105C9                 mov     edx, [esp+8FCh+var_88]
.text:004105D0                 mov     ebp, [esp+8FCh+var_84]
.text:004105D7                 mov     edi, [esp+8FCh+var_80]
.text:004105DE                 mov     [esp+8FCh+var_58], edx
.text:004105E5                 mov     ecx, [esp+8FCh+var_7C]
.text:004105EC                 mov     ebx, [esp+8FCh+var_8C]
.text:004105F3                 mov     [esp+8FCh+var_54], ebp
.text:004105FA                 mov     edx, [esp+8FCh+var_78]
.text:00410601                 mov     ebp, [esp+8FCh+var_74]
.text:00410608                 mov     [esp+8FCh+var_50], edi
.text:0041060F                 test    bl, 10h
.text:00410612                 mov     edi, [esp+8FCh+var_70]
.text:00410619                 mov     [esp+8FCh+var_4C], ecx
.text:00410620                 mov     ecx, [esp+8FCh+var_6C]
.text:00410627                 mov     [esp+8FCh+var_5C], ebx
.text:0041062E                 mov     [esp+8FCh+var_48], edx
.text:00410635                 mov     [esp+8FCh+var_44], ebp
.text:0041063C                 mov     [esp+8FCh+var_3C], edi
.text:00410643                 mov     [esp+8FCh+var_38], ecx
.text:0041064A                 jnz     loc_410970
.text:00410650                 mov     ebx, 1
.text:00410655                 mov     [esp+8FCh+var_34], ebx
.text:0041065C
.text:0041065C loc_41065C:                             ; CODE XREF: sub_410580+406↓j
.text:0041065C                 mov     eax, [esp+8FCh+lpFileName]
.text:00410663                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:00410667                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0041066B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0041066E                 call    sub_4115C0
.text:00410673                 mov     [esp+8FCh+lpRootPathName], eax
.text:00410676                 call    sub_410FA0
.text:0041067B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0041067F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00410683                 mov     ebp, eax
.text:00410685                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00410689                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0041068D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:00410694                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:00410698                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0041069C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:004106A0                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:004106A8                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:004106B0                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:004106B3                 call    GetVolumeInformationA
.text:004106B8                 sub     esp, 20h
.text:004106BB                 test    eax, eax
.text:004106BD                 lea     edi, [esp+8FCh+var_8CC]
.text:004106C1                 setz    bl
.text:004106C4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:004106C7                 xor     ebp, ebp
.text:004106C9                 movzx   edx, bl
.text:004106CC                 dec     edx
.text:004106CD                 xor     ebx, ebx
.text:004106CF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:004106D3                 call    free
.text:004106D8                 cld
.text:004106D9                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:004106DD                 mov     [esi+1Ch], ecx
.text:004106E0                 mov     ecx, 0Dh
.text:004106E5                 rep movsd
.text:004106E7                 mov     edi, [esp+8FCh+var_8A0]
.text:004106EB                 mov     edx, [esp+8FCh+var_89C]
.text:004106EF                 mov     ecx, [esp+8FCh+var_8CC]
.text:004106F3                 or      ebp, edi
.text:004106F5                 mov     esi, [esp+8FCh+var_8B0]
.text:004106F9                 mov     edi, [esp+8FCh+arg_4]
.text:00410700                 or      edx, ebx
.text:00410702                 mov     [edi+8], edx
.text:00410705                 xor     edx, edx
.text:00410707                 test    cl, 10h
.text:0041070A                 setz    dl
.text:0041070D                 mov     [edi+0Ch], ebp
.text:00410710                 mov     [edi+10h], esi
.text:00410713                 mov     dword ptr [edi+14h], 0
.text:0041071A                 dec     edx
.text:0041071B                 and     edx, 0FFFFC000h
.text:00410721                 add     edx, 8000h
.text:00410727                 or      edx, 124h
.text:0041072D                 test    cl, 1
.text:00410730                 movzx   eax, dx
.text:00410733                 jnz     short loc_41073A
.text:00410735                 or      eax, 92h
.text:0041073A
.text:0041073A loc_41073A:                             ; CODE XREF: sub_410580+1B3↑j
.text:0041073A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0041073E                 xor     edx, edx
.text:00410740                 xor     ebp, ebp
.text:00410742                 mov     edi, [esp+8FCh+var_8AC]
.text:00410746                 mov     ecx, [esp+8FCh+arg_4]
.text:0041074D                 mov     esi, edi
.text:0041074F                 or      [ecx], eax
.text:00410751                 mov     edi, ebx
.text:00410753                 or      edi, ebp
.text:00410755                 mov     ebp, edx
.text:00410757                 mov     ebx, [esp+8FCh+var_8A4]
.text:0041075B                 or      ebp, esi
.text:0041075D                 mov     esi, [esp+8FCh+arg_4]
.text:00410764                 mov     edx, [esp+8FCh+var_8BC]
.text:00410768                 mov     [esi+18h], ebx
.text:0041076B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0041076F                 mov     ecx, edx
.text:00410771                 mov     [esi+30h], edi
.text:00410774                 xor     edx, edx
.text:00410776                 mov     [esi+34h], ebp
.text:00410779                 or      ebx, edx
.text:0041077B                 xor     esi, esi
.text:0041077D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00410785                 or      esi, ecx
.text:00410787                 mov     edx, ebx
.text:00410789                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00410791                 sub     edx, 0D53E8000h
.text:00410797                 mov     ecx, esi
.text:00410799                 sbb     ecx, 19DB1DEh
.text:0041079F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:004107A3                 mov     [esp+8FCh+lpRootPathName], edx
.text:004107A6                 call    sub_417E90
.text:004107AB                 mov     edx, eax
.text:004107AD                 mov     ecx, [esp+8FCh+arg_4]
.text:004107B4                 shr     eax, 1Fh
.text:004107B7                 dec     eax
.text:004107B8                 and     edx, eax
.text:004107BA                 mov     [ecx+38h], edx
.text:004107BD                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004107C0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004107C4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004107CC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004107D4                 call    sub_417D10
.text:004107D9                 lea     ecx, [eax+eax*4]
.text:004107DC                 lea     ebx, [ecx+ecx*4]
.text:004107DF                 mov     eax, [esp+8FCh+arg_4]
.text:004107E6                 shl     ebx, 2
.text:004107E9                 mov     esi, ebx
.text:004107EB                 shr     esi, 1Fh
.text:004107EE                 dec     esi
.text:004107EF                 and     esi, ebx
.text:004107F1                 mov     [eax+3Ch], esi
.text:004107F4                 mov     edx, [esp+8FCh+var_8C4]
.text:004107F8                 xor     esi, esi
.text:004107FA                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00410802                 mov     ebx, [esp+8FCh+var_8C8]
.text:00410806                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0041080E                 mov     ecx, edx
.text:00410810                 xor     edx, edx
.text:00410812                 or      ebx, edx
.text:00410814                 or      esi, ecx
.text:00410816                 mov     edx, ebx
.text:00410818                 sub     edx, 0D53E8000h
.text:0041081E                 mov     ecx, esi
.text:00410820                 sbb     ecx, 19DB1DEh
.text:00410826                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0041082A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0041082D                 call    sub_417E90
.text:00410832                 mov     edx, eax
.text:00410834                 mov     ecx, [esp+8FCh+arg_4]
.text:0041083B                 shr     eax, 1Fh
.text:0041083E                 dec     eax
.text:0041083F                 and     edx, eax
.text:00410841                 mov     [ecx+48h], edx
.text:00410844                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00410847                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0041084B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00410853                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0041085B                 call    sub_417D10
.text:00410860                 lea     ecx, [eax+eax*4]
.text:00410863                 lea     ebx, [ecx+ecx*4]
.text:00410866                 mov     eax, [esp+8FCh+arg_4]
.text:0041086D                 shl     ebx, 2
.text:00410870                 mov     esi, ebx
.text:00410872                 shr     esi, 1Fh
.text:00410875                 dec     esi
.text:00410876                 and     esi, ebx
.text:00410878                 mov     [eax+4Ch], esi
.text:0041087B                 mov     edx, [esp+8FCh+var_8B4]
.text:0041087F                 xor     esi, esi
.text:00410881                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00410889                 mov     ebx, [esp+8FCh+var_8B8]
.text:0041088D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00410895                 mov     ecx, edx
.text:00410897                 xor     edx, edx
.text:00410899                 or      ebx, edx
.text:0041089B                 or      esi, ecx
.text:0041089D                 mov     edx, ebx
.text:0041089F                 sub     edx, 0D53E8000h
.text:004108A5                 mov     ecx, esi
.text:004108A7                 sbb     ecx, 19DB1DEh
.text:004108AD                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:004108B1                 mov     [esp+8FCh+lpRootPathName], edx
.text:004108B4                 call    sub_417E90
.text:004108B9                 mov     edx, eax
.text:004108BB                 mov     ecx, [esp+8FCh+arg_4]
.text:004108C2                 shr     eax, 1Fh
.text:004108C5                 dec     eax
.text:004108C6                 and     edx, eax
.text:004108C8                 mov     [ecx+40h], edx
.text:004108CB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004108CE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004108D2                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004108DA                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004108E2                 call    sub_417D10
.text:004108E7                 lea     ebx, [eax+eax*4]
.text:004108EA                 mov     esi, [esp+8FCh+arg_4]
.text:004108F1                 lea     edx, [ebx+ebx*4]
.text:004108F4                 shl     edx, 2
.text:004108F7                 mov     eax, edi
.text:004108F9                 mov     ecx, edx
.text:004108FB                 mov     dword ptr [esi+50h], 200h
.text:00410902                 shr     ecx, 1Fh
.text:00410905                 dec     ecx
.text:00410906                 and     ecx, edx
.text:00410908                 test    ebp, ebp
.text:0041090A                 mov     edx, ebp
.text:0041090C                 mov     [esi+44h], ecx
.text:0041090F                 js      short loc_410961
.text:00410911
.text:00410911 loc_410911:                             ; CODE XREF: sub_410580+3E9↓j
.text:00410911                 xor     esi, esi
.text:00410913                 mov     ebp, edi
.text:00410915                 mov     ecx, eax
.text:00410917                 shrd    ecx, edx, 9
.text:0041091B                 mov     ebx, edx
.text:0041091D                 and     ebp, 1FFh
.text:00410923                 mov     eax, esi
.text:00410925                 sar     ebx, 9
.text:00410928                 or      eax, ebp
.text:0041092A                 jz      short loc_410932
.text:0041092C                 add     ecx, 1
.text:0041092F                 adc     ebx, 0
.text:00410932
.text:00410932 loc_410932:                             ; CODE XREF: sub_410580+3AA↑j
.text:00410932                 mov     edx, [esp+8FCh+arg_4]
.text:00410939                 mov     [edx+5Ch], ebx
.text:0041093C                 mov     ebx, [esp+8FCh+lpFileName]
.text:00410943                 mov     [edx+58h], ecx
.text:00410946                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0041094A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0041094D                 call    sub_40F7A0
.text:00410952                 xor     edx, edx
.text:00410954
.text:00410954 loc_410954:                             ; CODE XREF: sub_410580+43↑j
.text:00410954                 add     esp, 8ECh
.text:0041095A                 mov     eax, edx
.text:0041095C                 pop     ebx
.text:0041095D                 pop     esi
.text:0041095E                 pop     edi
.text:0041095F                 pop     ebp
.text:00410960                 retn
.text:00410961 ; ---------------------------------------------------------------------------
.text:00410961
.text:00410961 loc_410961:                             ; CODE XREF: sub_410580+38F↑j
.text:00410961                 add     eax, 1FFh
.text:00410966                 adc     edx, 0
.text:00410969                 jmp     short loc_410911
.text:00410969 ; ---------------------------------------------------------------------------
.text:0041096B                 align 10h
.text:00410970
.text:00410970 loc_410970:                             ; CODE XREF: sub_410580+CA↑j
.text:00410970                 mov     eax, [esp+8FCh+lpFileName]
.text:00410977                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:0041097A                 call    sub_40F150
.text:0041097F                 mov     [esp+8FCh+var_34], eax
.text:00410986                 jmp     loc_41065C
.text:00410986 sub_410580      endp
.text:00410986
.text:00410986 ; ---------------------------------------------------------------------------
.text:0041098B                 align 10h
.text:00410990 ; START OF FUNCTION CHUNK FOR sub_410B00
.text:00410990
.text:00410990 loc_410990:                             ; CODE XREF: sub_410B00+26↓j
.text:00410990                 cld
.text:00410991                 sub     esp, 2Ch
.text:00410994                 xor     eax, eax
.text:00410996                 mov     [esp+2Ch+var_10], ebx
.text:0041099A                 mov     ecx, 18h
.text:0041099F                 mov     ebx, [esp+2Ch+arg_0]
.text:004109A3                 mov     [esp+2Ch+var_C], esi
.text:004109A7                 mov     esi, [esp+2Ch+arg_4]
.text:004109AB                 test    ebx, ebx
.text:004109AD                 mov     [esp+2Ch+var_8], edi
.text:004109B1                 mov     edi, esi
.text:004109B3                 mov     [esp+2Ch+var_4], ebp
.text:004109B7                 rep stosd
.text:004109B9                 jz      short loc_4109C0
.text:004109BB                 cmp     byte ptr [ebx], 0
.text:004109BE                 jnz     short loc_4109D8
.text:004109C0
.text:004109C0 loc_4109C0:                             ; CODE XREF: sub_410B00-147↑j
.text:004109C0                 xor     edx, edx
.text:004109C2
.text:004109C2 loc_4109C2:                             ; CODE XREF: sub_410B00-111↓j
.text:004109C2                                         ; sub_410B00-68↓j
.text:004109C2                 mov     ebx, [esp+2Ch+var_10]
.text:004109C6                 mov     eax, edx
.text:004109C8                 mov     esi, [esp+2Ch+var_C]
.text:004109CC                 mov     edi, [esp+2Ch+var_8]
.text:004109D0                 mov     ebp, [esp+2Ch+var_4]
.text:004109D4                 add     esp, 2Ch
.text:004109D7                 retn
.text:004109D8 ; ---------------------------------------------------------------------------
.text:004109D8
.text:004109D8 loc_4109D8:                             ; CODE XREF: sub_410B00-142↑j
.text:004109D8                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:004109E0                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:004109E3                 call    sub_412D80
.text:004109E8                 test    eax, eax
.text:004109EA                 mov     edx, 0FFFFFFFFh
.text:004109EF                 jnz     short loc_4109C2
.text:004109F1                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:004109F4                 call    sub_412C30
.text:004109F9                 mov     [esp+2Ch+lpFileName], eax
.text:004109FC                 call    sub_410FA0
.text:00410A01                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:00410A04                 mov     ebp, eax
.text:00410A06                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:00410A0E                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:00410A16                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:00410A1E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00410A26                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:00410A2E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00410A36                 call    CreateFileA
.text:00410A3B                 sub     esp, 1Ch
.text:00410A3E                 mov     ebx, eax
.text:00410A40                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00410A44                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:00410A47                 call    sub_40F2D0
.text:00410A4C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:00410A4F                 mov     edi, eax
.text:00410A51                 call    CloseHandle
.text:00410A56                 sub     esp, 4
.text:00410A59                 cmp     edi, 0FFFFFFFFh
.text:00410A5C                 jz      short loc_410ABA
.text:00410A5E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00410A62                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:00410A65                 call    sub_40F7A0
.text:00410A6A
.text:00410A6A loc_410A6A:                             ; CODE XREF: sub_410B00-38↓j
.text:00410A6A                 mov     edx, [esi]
.text:00410A6C                 and     edx, 0F000h
.text:00410A72                 cmp     edx, 4000h
.text:00410A78                 jz      short loc_410AAD
.text:00410A7A
.text:00410A7A loc_410A7A:                             ; CODE XREF: sub_410B00-48↓j
.text:00410A7A                 cmp     edi, 0FFFFFFFFh
.text:00410A7D                 jz      short loc_410A9D
.text:00410A7F
.text:00410A7F loc_410A7F:                             ; CODE XREF: sub_410B00-55↓j
.text:00410A7F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:00410A86                 call    SetErrorMode
.text:00410A8B                 sub     esp, 4
.text:00410A8E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:00410A91                 call    free
.text:00410A96                 mov     edx, edi
.text:00410A98                 jmp     loc_4109C2
.text:00410A9D ; ---------------------------------------------------------------------------
.text:00410A9D
.text:00410A9D loc_410A9D:                             ; CODE XREF: sub_410B00-83↑j
.text:00410A9D                 call    sub_412BE0
.text:00410AA2                 mov     esi, eax
.text:00410AA4                 call    _errno
.text:00410AA9                 mov     [eax], esi
.text:00410AAB                 jmp     short loc_410A7F
.text:00410AAD ; ---------------------------------------------------------------------------
.text:00410AAD
.text:00410AAD loc_410AAD:                             ; CODE XREF: sub_410B00-88↑j
.text:00410AAD                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:00410AB0                 call    sub_40F150
.text:00410AB5                 mov     [esi+18h], eax
.text:00410AB8                 jmp     short loc_410A7A
.text:00410ABA ; ---------------------------------------------------------------------------
.text:00410ABA
.text:00410ABA loc_410ABA:                             ; CODE XREF: sub_410B00-A4↑j
.text:00410ABA                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00410ABE                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:00410AC1                 call    sub_410580
.text:00410AC6                 mov     edi, eax
.text:00410AC8                 jmp     short loc_410A6A
.text:00410AC8 ; END OF FUNCTION CHUNK FOR sub_410B00
.text:00410AC8 ; ---------------------------------------------------------------------------
.text:00410ACA                 align 10h
.text:00410AD0
.text:00410AD0 ; =============== S U B R O U T I N E =======================================
.text:00410AD0
.text:00410AD0
.text:00410AD0 sub_410AD0      proc near               ; CODE XREF: sub_404940+E3↑p
.text:00410AD0                                         ; sub_404940+12A↑p
.text:00410AD0
.text:00410AD0 var_C           = dword ptr -0Ch
.text:00410AD0 var_8           = dword ptr -8
.text:00410AD0 var_4           = dword ptr -4
.text:00410AD0 arg_0           = dword ptr  4
.text:00410AD0 arg_4           = dword ptr  8
.text:00410AD0
.text:00410AD0                 sub     esp, 0Ch
.text:00410AD3                 mov     edx, [esp+0Ch+arg_4]
.text:00410AD7                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:00410ADE                 mov     [esp+0Ch+var_4], edx ; int
.text:00410AE2                 mov     edx, [esp+0Ch+arg_0]
.text:00410AE6                 mov     [esp+0Ch+var_8], edx ; int
.text:00410AEA                 call    sub_410B00
.text:00410AEF                 add     esp, 0Ch
.text:00410AF2                 retn
.text:00410AF2 sub_410AD0      endp
.text:00410AF2
.text:00410AF2 ; ---------------------------------------------------------------------------
.text:00410AF3                 align 10h
.text:00410B00
.text:00410B00 ; =============== S U B R O U T I N E =======================================
.text:00410B00
.text:00410B00
.text:00410B00 ; int __cdecl sub_410B00(LPCSTR, int, int)
.text:00410B00 sub_410B00      proc near               ; CODE XREF: sub_410AD0+1A↑p
.text:00410B00                                         ; sub_4113D0+90↓p ...
.text:00410B00
.text:00410B00 lpFileName      = dword ptr -2Ch
.text:00410B00 dwDesiredAccess = dword ptr -28h
.text:00410B00 dwShareMode     = dword ptr -24h
.text:00410B00 lpSecurityAttributes= dword ptr -20h
.text:00410B00 dwCreationDisposition= dword ptr -1Ch
.text:00410B00 dwFlagsAndAttributes= dword ptr -18h
.text:00410B00 hTemplateFile   = dword ptr -14h
.text:00410B00 var_10          = dword ptr -10h
.text:00410B00 var_C           = dword ptr -0Ch
.text:00410B00 var_8           = dword ptr -8
.text:00410B00 var_4           = dword ptr -4
.text:00410B00 arg_0           = dword ptr  4
.text:00410B00 arg_4           = dword ptr  8
.text:00410B00 arg_8           = dword ptr  0Ch
.text:00410B00
.text:00410B00 ; FUNCTION CHUNK AT .text:00410990 SIZE 0000013A BYTES
.text:00410B00
.text:00410B00                 sub     esp, 0Ch
.text:00410B03                 mov     ecx, [esp+0Ch+arg_0]
.text:00410B07                 mov     edx, [esp+0Ch+arg_4]
.text:00410B0B                 mov     eax, [esp+0Ch+arg_8]
.text:00410B0F                 test    ecx, ecx
.text:00410B11                 jnz     short loc_410B30
.text:00410B13                 test    edx, edx
.text:00410B15                 jz      short loc_410B30
.text:00410B17                 test    eax, eax
.text:00410B19                 jz      short loc_410B30
.text:00410B1B                 mov     [esp+0Ch+arg_4], eax
.text:00410B1F                 mov     [esp+0Ch+arg_0], edx
.text:00410B23                 add     esp, 0Ch
.text:00410B26                 jmp     loc_410990
.text:00410B26 ; ---------------------------------------------------------------------------
.text:00410B2B                 align 10h
.text:00410B30
.text:00410B30 loc_410B30:                             ; CODE XREF: sub_410B00+11↑j
.text:00410B30                                         ; sub_410B00+15↑j ...
.text:00410B30                 call    _errno
.text:00410B35                 mov     dword ptr [eax], 16h
.text:00410B3B                 mov     eax, 0FFFFFFFFh
.text:00410B40                 add     esp, 0Ch
.text:00410B43                 retn
.text:00410B43 sub_410B00      endp
.text:00410B43
.text:00410B43 ; ---------------------------------------------------------------------------
.text:00410B44                 align 10h
.text:00410B50
.text:00410B50 ; =============== S U B R O U T I N E =======================================
.text:00410B50
.text:00410B50 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:00410B50
.text:00410B50 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:00410B50 _win32_longpath proc near               ; CODE XREF: .text:00411314↓p
.text:00410B50
.text:00410B50 C               = dword ptr -278h
.text:00410B50 lpFindFileData  = dword ptr -274h
.text:00410B50 Destination     = byte ptr -268h
.text:00410B50 var_267         = byte ptr -267h
.text:00410B50 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:00410B50 lpFileName      = dword ptr  8
.text:00410B50
.text:00410B50                 push    ebp
.text:00410B51                 xor     eax, eax
.text:00410B53                 push    edi
.text:00410B54                 push    esi
.text:00410B55                 push    ebx
.text:00410B56                 sub     esp, 26Ch
.text:00410B5C                 mov     esi, [esp+278h+lpFileName]
.text:00410B63                 lea     ebp, [esp+278h+Destination]
.text:00410B67                 test    esi, esi
.text:00410B69                 jz      loc_410CC7
.text:00410B6F                 movsx   edx, byte ptr [esi]
.text:00410B72                 mov     [esp+278h+C], edx ; C
.text:00410B75                 call    isalpha
.text:00410B7A                 test    eax, eax
.text:00410B7C                 jz      short loc_410B8F
.text:00410B7E                 mov     eax, [esp+278h+lpFileName]
.text:00410B85                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:00410B89                 jz      loc_410ECB
.text:00410B8F
.text:00410B8F loc_410B8F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:00410B8F                 mov     edx, [esp+278h+lpFileName]
.text:00410B96                 movzx   eax, byte ptr [edx]
.text:00410B99                 cmp     al, 2Fh ; '/'
.text:00410B9B                 jz      loc_410DAB
.text:00410BA1                 cmp     al, 5Ch ; '\'
.text:00410BA3                 jz      loc_410DAB
.text:00410BA9
.text:00410BA9 loc_410BA9:                             ; CODE XREF: _win32_longpath+26E↓j
.text:00410BA9                                         ; _win32_longpath+2B1↓j ...
.text:00410BA9                 mov     [ebp+268h+Destination], 0
.text:00410BAD                 movzx   ebx, byte ptr [esi]
.text:00410BB0                 test    bl, bl
.text:00410BB2                 jz      loc_410CA9
.text:00410BB8                 nop
.text:00410BB9                 lea     esi, [esi+0]
.text:00410BC0
.text:00410BC0 loc_410BC0:                             ; CODE XREF: _win32_longpath+153↓j
.text:00410BC0                 cmp     bl, 2Fh ; '/'
.text:00410BC3                 jz      loc_410D60
.text:00410BC9                 cmp     bl, 5Ch ; '\'
.text:00410BCC                 jz      loc_410D60
.text:00410BD2
.text:00410BD2 loc_410BD2:                             ; CODE XREF: _win32_longpath+21E↓j
.text:00410BD2                                         ; _win32_longpath+22C↓j ...
.text:00410BD2                 cmp     bl, 2Eh ; '.'
.text:00410BD5                 jz      loc_410D00
.text:00410BDB
.text:00410BDB loc_410BDB:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:00410BDB                                         ; _win32_longpath+203↓j
.text:00410BDB                 test    bl, bl
.text:00410BDD                 jz      loc_410CA9
.text:00410BE3                 cmp     bl, 2Fh ; '/'
.text:00410BE6                 jz      short loc_410C02
.text:00410BE8                 cmp     bl, 5Ch ; '\'
.text:00410BEB                 jz      short loc_410C02
.text:00410BED                 lea     esi, [esi+0]
.text:00410BF0
.text:00410BF0 loc_410BF0:                             ; CODE XREF: _win32_longpath+B0↓j
.text:00410BF0                 inc     esi
.text:00410BF1                 movzx   ebx, byte ptr [esi]
.text:00410BF4                 test    bl, bl
.text:00410BF6                 jz      short loc_410C02
.text:00410BF8                 cmp     bl, 2Fh ; '/'
.text:00410BFB                 jz      short loc_410C02
.text:00410BFD                 cmp     bl, 5Ch ; '\'
.text:00410C00                 jnz     short loc_410BF0
.text:00410C02
.text:00410C02 loc_410C02:                             ; CODE XREF: _win32_longpath+96↑j
.text:00410C02                                         ; _win32_longpath+9B↑j ...
.text:00410C02                 mov     byte ptr [esi], 0
.text:00410C05                 lea     edx, [esp+278h+FindFileData]
.text:00410C0C                 mov     eax, [esp+278h+lpFileName]
.text:00410C13                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:00410C17                 mov     [esp+278h+C], eax ; lpFileName
.text:00410C1A                 call    FindFirstFileA
.text:00410C1F                 mov     [esi], bl
.text:00410C21                 sub     esp, 8
.text:00410C24                 mov     edi, eax
.text:00410C26                 cmp     eax, 0FFFFFFFFh
.text:00410C29                 jz      loc_410CEC
.text:00410C2F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:00410C36                 mov     ecx, ebx
.text:00410C38                 nop
.text:00410C39                 lea     esi, [esi+0]
.text:00410C40
.text:00410C40 loc_410C40:                             ; CODE XREF: _win32_longpath+105↓j
.text:00410C40                 mov     eax, [ebx]
.text:00410C42                 add     ebx, 4
.text:00410C45                 lea     edx, [eax-1010101h]
.text:00410C4B                 not     eax
.text:00410C4D                 and     edx, eax
.text:00410C4F                 and     edx, 80808080h
.text:00410C55                 jz      short loc_410C40
.text:00410C57                 test    edx, 8080h
.text:00410C5D                 jnz     short loc_410C65
.text:00410C5F                 shr     edx, 10h
.text:00410C62                 add     ebx, 2
.text:00410C65
.text:00410C65 loc_410C65:                             ; CODE XREF: _win32_longpath+10D↑j
.text:00410C65                 add     dl, dl
.text:00410C67                 sbb     ebx, 3
.text:00410C6A                 sub     ebx, ecx
.text:00410C6C                 lea     ecx, [esp+278h+Destination]
.text:00410C70                 sub     ecx, ebp
.text:00410C72                 add     ecx, 105h
.text:00410C78                 cmp     ecx, ebx
.text:00410C7A                 jle     short loc_410CD2
.text:00410C7C                 mov     [esp+278h+C], ebp ; Destination
.text:00410C7F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:00410C86                 add     ebp, ebx
.text:00410C88                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:00410C8C                 call    strcpy
.text:00410C91                 mov     [esp+278h+C], edi ; hFindFile
.text:00410C94                 call    FindClose
.text:00410C99                 sub     esp, 4
.text:00410C9C
.text:00410C9C loc_410C9C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:00410C9C                 movzx   ecx, byte ptr [esi]
.text:00410C9F                 test    cl, cl
.text:00410CA1                 mov     bl, cl
.text:00410CA3                 jnz     loc_410BC0
.text:00410CA9
.text:00410CA9 loc_410CA9:                             ; CODE XREF: _win32_longpath+62↑j
.text:00410CA9                                         ; _win32_longpath+8D↑j
.text:00410CA9                 mov     esi, [esp+278h+lpFileName]
.text:00410CB0                 lea     ebp, [esp+278h+Destination]
.text:00410CB4                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:00410CB8                 mov     [esp+278h+C], esi ; Destination
.text:00410CBB                 call    strcpy
.text:00410CC0                 mov     eax, [esp+278h+lpFileName]
.text:00410CC7
.text:00410CC7 loc_410CC7:                             ; CODE XREF: _win32_longpath+19↑j
.text:00410CC7                                         ; _win32_longpath+19A↓j
.text:00410CC7                 add     esp, 26Ch
.text:00410CCD                 pop     ebx
.text:00410CCE                 pop     esi
.text:00410CCF                 pop     edi
.text:00410CD0                 pop     ebp
.text:00410CD1                 retn
.text:00410CD2 ; ---------------------------------------------------------------------------
.text:00410CD2
.text:00410CD2 loc_410CD2:                             ; CODE XREF: _win32_longpath+12A↑j
.text:00410CD2                 mov     [esp+278h+C], edi ; hFindFile
.text:00410CD5                 call    FindClose
.text:00410CDA                 sub     esp, 4
.text:00410CDD                 call    _errno
.text:00410CE2                 mov     dword ptr [eax], 22h ; '"'
.text:00410CE8
.text:00410CE8 loc_410CE8:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:00410CE8                 xor     eax, eax
.text:00410CEA                 jmp     short loc_410CC7
.text:00410CEC ; ---------------------------------------------------------------------------
.text:00410CEC
.text:00410CEC loc_410CEC:                             ; CODE XREF: _win32_longpath+D9↑j
.text:00410CEC                 call    _errno
.text:00410CF1                 mov     dword ptr [eax], 16h
.text:00410CF7                 jmp     short loc_410CE8
.text:00410CF7 ; ---------------------------------------------------------------------------
.text:00410CF9                 align 10h
.text:00410D00
.text:00410D00 loc_410D00:                             ; CODE XREF: _win32_longpath+85↑j
.text:00410D00                 movzx   eax, byte ptr [esi+1]
.text:00410D04                 test    al, al
.text:00410D06                 jnz     short loc_410D35
.text:00410D08
.text:00410D08 loc_410D08:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:00410D08                                         ; _win32_longpath+1EB↓j ...
.text:00410D08                 test    bl, bl
.text:00410D0A                 jz      short loc_410D2C
.text:00410D0C                 cmp     bl, 2Fh ; '/'
.text:00410D0F                 jz      short loc_410D2C
.text:00410D11                 cmp     bl, 5Ch ; '\'
.text:00410D14                 jz      short loc_410D2C
.text:00410D16
.text:00410D16 loc_410D16:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:00410D16                 mov     [ebp+268h+Destination], bl
.text:00410D19                 inc     esi
.text:00410D1A                 inc     ebp
.text:00410D1B                 movzx   ebx, byte ptr [esi]
.text:00410D1E                 test    bl, bl
.text:00410D20                 jz      short loc_410D2C
.text:00410D22                 cmp     bl, 2Fh ; '/'
.text:00410D25                 jz      short loc_410D2C
.text:00410D27                 cmp     bl, 5Ch ; '\'
.text:00410D2A                 jnz     short loc_410D16
.text:00410D2C
.text:00410D2C loc_410D2C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:00410D2C                                         ; _win32_longpath+1BF↑j ...
.text:00410D2C                 mov     [ebp+268h+Destination], 0
.text:00410D30                 jmp     loc_410C9C
.text:00410D35 ; ---------------------------------------------------------------------------
.text:00410D35
.text:00410D35 loc_410D35:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:00410D35                 cmp     al, 2Fh ; '/'
.text:00410D37                 jz      short loc_410D08
.text:00410D39                 cmp     al, 5Ch ; '\'
.text:00410D3B                 jz      short loc_410D08
.text:00410D3D                 cmp     al, 2Eh ; '.'
.text:00410D3F                 jnz     loc_410BDB
.text:00410D45                 movzx   eax, byte ptr [esi+2]
.text:00410D49                 test    al, al
.text:00410D4B                 jz      short loc_410D08
.text:00410D4D                 cmp     al, 2Fh ; '/'
.text:00410D4F                 jz      short loc_410D08
.text:00410D51                 cmp     al, 5Ch ; '\'
.text:00410D53                 jnz     loc_410BDB
.text:00410D59                 jmp     short loc_410D08
.text:00410D59 ; ---------------------------------------------------------------------------
.text:00410D5B                 align 10h
.text:00410D60
.text:00410D60 loc_410D60:                             ; CODE XREF: _win32_longpath+73↑j
.text:00410D60                                         ; _win32_longpath+7C↑j
.text:00410D60                 mov     [ebp+268h+Destination], bl
.text:00410D63                 inc     esi
.text:00410D64                 inc     ebp
.text:00410D65                 mov     [ebp+268h+Destination], 0
.text:00410D69                 movzx   ebx, byte ptr [esi]
.text:00410D6C                 test    bl, bl
.text:00410D6E                 jz      loc_410BD2
.text:00410D74                 cmp     bl, 2Fh ; '/'
.text:00410D77                 jz      short loc_410D90
.text:00410D79                 cmp     bl, 5Ch ; '\'
.text:00410D7C                 jnz     loc_410BD2
.text:00410D82                 lea     esi, [esi+0]
.text:00410D89                 lea     edi, [edi+0]
.text:00410D90
.text:00410D90 loc_410D90:                             ; CODE XREF: _win32_longpath+227↑j
.text:00410D90                                         ; _win32_longpath+24F↓j ...
.text:00410D90                 inc     esi
.text:00410D91                 movzx   ebx, byte ptr [esi]
.text:00410D94                 test    bl, bl
.text:00410D96                 jz      loc_410BD2
.text:00410D9C                 cmp     bl, 2Fh ; '/'
.text:00410D9F                 jz      short loc_410D90
.text:00410DA1                 cmp     bl, 5Ch ; '\'
.text:00410DA4                 jz      short loc_410D90
.text:00410DA6                 jmp     loc_410BD2
.text:00410DAB ; ---------------------------------------------------------------------------
.text:00410DAB
.text:00410DAB loc_410DAB:                             ; CODE XREF: _win32_longpath+4B↑j
.text:00410DAB                                         ; _win32_longpath+53↑j
.text:00410DAB                 mov     edi, [esp+278h+lpFileName]
.text:00410DB2                 movzx   edx, byte ptr [edi+1]
.text:00410DB6                 cmp     dl, 2Fh ; '/'
.text:00410DB9                 jz      short loc_410DC4
.text:00410DBB                 cmp     dl, 5Ch ; '\'
.text:00410DBE                 jnz     loc_410BA9
.text:00410DC4
.text:00410DC4 loc_410DC4:                             ; CODE XREF: _win32_longpath+269↑j
.text:00410DC4                 mov     esi, [esp+278h+lpFileName]
.text:00410DCB                 mov     [ebp+268h+Destination], al
.text:00410DCE                 mov     ecx, [esp+278h+lpFileName]
.text:00410DD5                 inc     ebp
.text:00410DD6                 add     esi, 2
.text:00410DD9                 movzx   ebx, byte ptr [ecx+1]
.text:00410DDD                 mov     [ebp+268h+Destination], bl
.text:00410DE0                 inc     ebp
.text:00410DE1                 movzx   eax, byte ptr [ecx+2]
.text:00410DE5                 test    al, al
.text:00410DE7                 jz      loc_410EC3
.text:00410DED                 cmp     al, 2Fh ; '/'
.text:00410DEF                 jz      loc_410EA8
.text:00410DF5                 cmp     al, 5Ch ; '\'
.text:00410DF7                 mov     bl, al
.text:00410DF9                 jz      loc_410EA8
.text:00410DFF
.text:00410DFF loc_410DFF:                             ; CODE XREF: _win32_longpath+36E↓j
.text:00410DFF                                         ; _win32_longpath+376↓j
.text:00410DFF                 test    bl, bl
.text:00410E01                 jz      loc_410BA9
.text:00410E07                 cmp     bl, 2Fh ; '/'
.text:00410E0A                 jz      short loc_410E2B
.text:00410E0C                 cmp     bl, 5Ch ; '\'
.text:00410E0F                 jz      short loc_410E2B
.text:00410E11
.text:00410E11 loc_410E11:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:00410E11                 mov     [ebp+268h+Destination], bl
.text:00410E14                 inc     esi
.text:00410E15                 inc     ebp
.text:00410E16                 movzx   ebx, byte ptr [esi]
.text:00410E19                 test    bl, bl
.text:00410E1B                 jz      loc_410BA9
.text:00410E21                 cmp     bl, 2Fh ; '/'
.text:00410E24                 jz      short loc_410E2B
.text:00410E26                 cmp     bl, 5Ch ; '\'
.text:00410E29                 jnz     short loc_410E11
.text:00410E2B
.text:00410E2B loc_410E2B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:00410E2B                                         ; _win32_longpath+2BF↑j ...
.text:00410E2B                 test    bl, bl
.text:00410E2D                 jz      loc_410BA9
.text:00410E33                 mov     [ebp+268h+Destination], bl
.text:00410E36                 inc     esi
.text:00410E37                 inc     ebp
.text:00410E38                 movzx   ebx, byte ptr [esi]
.text:00410E3B                 test    bl, bl
.text:00410E3D                 jz      loc_410BA9
.text:00410E43                 cmp     bl, 2Fh ; '/'
.text:00410E46                 jz      short loc_410E90
.text:00410E48                 cmp     bl, 5Ch ; '\'
.text:00410E4B                 jz      short loc_410E90
.text:00410E4D
.text:00410E4D loc_410E4D:                             ; CODE XREF: _win32_longpath+356↓j
.text:00410E4D                 test    bl, bl
.text:00410E4F                 jz      loc_410BA9
.text:00410E55                 cmp     bl, 2Fh ; '/'
.text:00410E58                 jz      loc_410BA9
.text:00410E5E                 cmp     bl, 5Ch ; '\'
.text:00410E61                 jz      loc_410BA9
.text:00410E67
.text:00410E67 loc_410E67:                             ; CODE XREF: _win32_longpath+333↓j
.text:00410E67                 mov     [ebp+268h+Destination], bl
.text:00410E6A                 inc     esi
.text:00410E6B                 inc     ebp
.text:00410E6C                 movzx   ebx, byte ptr [esi]
.text:00410E6F                 test    bl, bl
.text:00410E71                 jz      loc_410BA9
.text:00410E77                 cmp     bl, 2Fh ; '/'
.text:00410E7A                 jz      loc_410BA9
.text:00410E80                 cmp     bl, 5Ch ; '\'
.text:00410E83                 jnz     short loc_410E67
.text:00410E85                 jmp     loc_410BA9
.text:00410E85 ; ---------------------------------------------------------------------------
.text:00410E8A                 align 10h
.text:00410E90
.text:00410E90 loc_410E90:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:00410E90                                         ; _win32_longpath+2FB↑j ...
.text:00410E90                 inc     esi
.text:00410E91                 movzx   ebx, byte ptr [esi]
.text:00410E94                 test    bl, bl
.text:00410E96                 jz      loc_410BA9
.text:00410E9C                 cmp     bl, 2Fh ; '/'
.text:00410E9F                 jz      short loc_410E90
.text:00410EA1                 cmp     bl, 5Ch ; '\'
.text:00410EA4                 jz      short loc_410E90
.text:00410EA6                 jmp     short loc_410E4D
.text:00410EA8 ; ---------------------------------------------------------------------------
.text:00410EA8
.text:00410EA8 loc_410EA8:                             ; CODE XREF: _win32_longpath+29F↑j
.text:00410EA8                                         ; _win32_longpath+2A9↑j ...
.text:00410EA8                 inc     esi
.text:00410EA9                 movzx   ebx, byte ptr [esi]
.text:00410EAC                 test    bl, bl
.text:00410EAE                 jz      loc_410BA9
.text:00410EB4                 cmp     bl, 2Fh ; '/'
.text:00410EB7                 jz      short loc_410EA8
.text:00410EB9                 cmp     bl, 5Ch ; '\'
.text:00410EBC                 jz      short loc_410EA8
.text:00410EBE                 jmp     loc_410DFF
.text:00410EC3 ; ---------------------------------------------------------------------------
.text:00410EC3
.text:00410EC3 loc_410EC3:                             ; CODE XREF: _win32_longpath+297↑j
.text:00410EC3                 movzx   ebx, byte ptr [esi]
.text:00410EC6                 jmp     loc_410DFF
.text:00410ECB ; ---------------------------------------------------------------------------
.text:00410ECB
.text:00410ECB loc_410ECB:                             ; CODE XREF: _win32_longpath+39↑j
.text:00410ECB                 movzx   ecx, byte ptr [eax]
.text:00410ECE                 mov     esi, eax
.text:00410ED0                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:00410ED5                 add     esi, 2
.text:00410ED8                 lea     ebp, [esp+12h]
.text:00410EDC                 mov     [esp+278h+Destination], cl
.text:00410EE0                 jmp     loc_410BA9
.text:00410EE0 _win32_longpath endp
.text:00410EE0
.text:00410EE0 ; ---------------------------------------------------------------------------
.text:00410EE5                 align 10h
.text:00410EF0                 sub     esp, 0Ch
.text:00410EF3                 mov     edx, [esp+10h]
.text:00410EF7                 mov     dword ptr [esp+4], 0
.text:00410EFF                 mov     [esp], edx
.text:00410F02                 call    sub_412D80
.text:00410F07                 inc     eax
.text:00410F08                 setnz   dl
.text:00410F0B                 add     esp, 0Ch
.text:00410F0E                 movzx   eax, dl
.text:00410F11                 retn
.text:00410F11 ; ---------------------------------------------------------------------------
.text:00410F12                 align 10h
.text:00410F20
.text:00410F20 ; =============== S U B R O U T I N E =======================================
.text:00410F20
.text:00410F20
.text:00410F20 sub_410F20      proc near               ; CODE XREF: sub_412C50+AA↓p
.text:00410F20                                         ; sub_414800+B4↓p
.text:00410F20
.text:00410F20 arg_0           = dword ptr  4
.text:00410F20
.text:00410F20                 mov     ecx, [esp+arg_0]
.text:00410F24                 mov     edx, ecx
.text:00410F26                 movzx   eax, byte ptr [ecx]
.text:00410F29                 test    al, al
.text:00410F2B                 jz      short loc_410F3C
.text:00410F2D                 lea     esi, [esi+0]
.text:00410F30
.text:00410F30 loc_410F30:                             ; CODE XREF: sub_410F20+1A↓j
.text:00410F30                 cmp     al, 5Ch ; '\'
.text:00410F32                 jz      short loc_410F40
.text:00410F34
.text:00410F34 loc_410F34:                             ; CODE XREF: sub_410F20+23↓j
.text:00410F34                 inc     edx
.text:00410F35                 movzx   eax, byte ptr [edx]
.text:00410F38                 test    al, al
.text:00410F3A                 jnz     short loc_410F30
.text:00410F3C
.text:00410F3C loc_410F3C:                             ; CODE XREF: sub_410F20+B↑j
.text:00410F3C                 mov     eax, ecx
.text:00410F3E                 retn
.text:00410F3E ; ---------------------------------------------------------------------------
.text:00410F3F                 align 10h
.text:00410F40
.text:00410F40 loc_410F40:                             ; CODE XREF: sub_410F20+12↑j
.text:00410F40                 mov     byte ptr [edx], 2Fh ; '/'
.text:00410F43                 jmp     short loc_410F34
.text:00410F43 sub_410F20      endp
.text:00410F43
.text:00410F43 ; ---------------------------------------------------------------------------
.text:00410F45                 align 10h
.text:00410F50                 push    ebx
.text:00410F51                 sub     esp, 8
.text:00410F54                 mov     ebx, [esp+14h]
.text:00410F58                 mov     edx, [esp+10h]
.text:00410F5C                 mov     [esp], ebx
.text:00410F5F                 mov     [esp+4], edx
.text:00410F63                 call    strcpy
.text:00410F68                 movzx   eax, byte ptr [ebx]
.text:00410F6B                 mov     edx, ebx
.text:00410F6D                 test    al, al
.text:00410F6F                 jz      short loc_410F8C
.text:00410F71                 jmp     short loc_410F80
.text:00410F71 ; ---------------------------------------------------------------------------
.text:00410F73                 align 10h
.text:00410F80
.text:00410F80 loc_410F80:                             ; CODE XREF: .text:00410F71↑j
.text:00410F80                                         ; .text:00410F8A↓j
.text:00410F80                 cmp     al, 5Ch ; '\'
.text:00410F82                 jz      short loc_410F93
.text:00410F84
.text:00410F84 loc_410F84:                             ; CODE XREF: .text:00410F96↓j
.text:00410F84                 inc     edx
.text:00410F85                 movzx   eax, byte ptr [edx]
.text:00410F88                 test    al, al
.text:00410F8A                 jnz     short loc_410F80
.text:00410F8C
.text:00410F8C loc_410F8C:                             ; CODE XREF: .text:00410F6F↑j
.text:00410F8C                 add     esp, 8
.text:00410F8F                 xor     eax, eax
.text:00410F91                 pop     ebx
.text:00410F92                 retn
.text:00410F93 ; ---------------------------------------------------------------------------
.text:00410F93
.text:00410F93 loc_410F93:                             ; CODE XREF: .text:00410F82↑j
.text:00410F93                 mov     byte ptr [edx], 2Fh ; '/'
.text:00410F96                 jmp     short loc_410F84
.text:00410F96 ; ---------------------------------------------------------------------------
.text:00410F98                 align 10h
.text:00410FA0
.text:00410FA0 ; =============== S U B R O U T I N E =======================================
.text:00410FA0
.text:00410FA0
.text:00410FA0 sub_410FA0      proc near               ; CODE XREF: sub_40F7A0+16↑p
.text:00410FA0                                         ; sub_40FCA0+1F↑p ...
.text:00410FA0
.text:00410FA0 arg_0           = dword ptr  4
.text:00410FA0
.text:00410FA0                 mov     ecx, [esp+arg_0]
.text:00410FA4                 mov     edx, ecx
.text:00410FA6                 movzx   eax, byte ptr [ecx]
.text:00410FA9                 test    al, al
.text:00410FAB                 jz      short loc_410FBC
.text:00410FAD                 lea     esi, [esi+0]
.text:00410FB0
.text:00410FB0 loc_410FB0:                             ; CODE XREF: sub_410FA0+1A↓j
.text:00410FB0                 cmp     al, 2Fh ; '/'
.text:00410FB2                 jz      short loc_410FC0
.text:00410FB4
.text:00410FB4 loc_410FB4:                             ; CODE XREF: sub_410FA0+23↓j
.text:00410FB4                 inc     edx
.text:00410FB5                 movzx   eax, byte ptr [edx]
.text:00410FB8                 test    al, al
.text:00410FBA                 jnz     short loc_410FB0
.text:00410FBC
.text:00410FBC loc_410FBC:                             ; CODE XREF: sub_410FA0+B↑j
.text:00410FBC                 mov     eax, ecx
.text:00410FBE                 retn
.text:00410FBE ; ---------------------------------------------------------------------------
.text:00410FBF                 align 10h
.text:00410FC0
.text:00410FC0 loc_410FC0:                             ; CODE XREF: sub_410FA0+12↑j
.text:00410FC0                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410FC3                 jmp     short loc_410FB4
.text:00410FC3 sub_410FA0      endp
.text:00410FC3
.text:00410FC3 ; ---------------------------------------------------------------------------
.text:00410FC5                 align 10h
.text:00410FD0                 push    ebx
.text:00410FD1                 sub     esp, 8
.text:00410FD4                 mov     ebx, [esp+14h]
.text:00410FD8                 mov     edx, [esp+10h]
.text:00410FDC                 mov     [esp], ebx
.text:00410FDF                 mov     [esp+4], edx
.text:00410FE3                 call    strcpy
.text:00410FE8                 movzx   eax, byte ptr [ebx]
.text:00410FEB                 mov     edx, ebx
.text:00410FED                 test    al, al
.text:00410FEF                 jz      short loc_41100C
.text:00410FF1                 jmp     short loc_411000
.text:00410FF1 ; ---------------------------------------------------------------------------
.text:00410FF3                 align 10h
.text:00411000
.text:00411000 loc_411000:                             ; CODE XREF: .text:00410FF1↑j
.text:00411000                                         ; .text:0041100A↓j
.text:00411000                 cmp     al, 2Fh ; '/'
.text:00411002                 jz      short loc_411013
.text:00411004
.text:00411004 loc_411004:                             ; CODE XREF: .text:00411016↓j
.text:00411004                 inc     edx
.text:00411005                 movzx   eax, byte ptr [edx]
.text:00411008                 test    al, al
.text:0041100A                 jnz     short loc_411000
.text:0041100C
.text:0041100C loc_41100C:                             ; CODE XREF: .text:00410FEF↑j
.text:0041100C                 add     esp, 8
.text:0041100F                 xor     eax, eax
.text:00411011                 pop     ebx
.text:00411012                 retn
.text:00411013 ; ---------------------------------------------------------------------------
.text:00411013
.text:00411013 loc_411013:                             ; CODE XREF: .text:00411002↑j
.text:00411013                 mov     byte ptr [edx], 5Ch ; '\'
.text:00411016                 jmp     short loc_411004
.text:00411016 ; ---------------------------------------------------------------------------
.text:00411018                 align 10h
.text:00411020                 push    ebx
.text:00411021                 sub     esp, 8
.text:00411024                 mov     ebx, [esp+14h]
.text:00411028                 mov     edx, [esp+10h]
.text:0041102C                 mov     [esp+4], ebx
.text:00411030                 mov     [esp], edx
.text:00411033                 call    sub_412C00
.text:00411038                 movzx   eax, byte ptr [ebx]
.text:0041103B                 mov     edx, ebx
.text:0041103D                 test    al, al
.text:0041103F                 jz      short loc_41105C
.text:00411041                 jmp     short loc_411050
.text:00411041 ; ---------------------------------------------------------------------------
.text:00411043                 align 10h
.text:00411050
.text:00411050 loc_411050:                             ; CODE XREF: .text:00411041↑j
.text:00411050                                         ; .text:0041105A↓j
.text:00411050                 cmp     al, 2Fh ; '/'
.text:00411052                 jz      short loc_411063
.text:00411054
.text:00411054 loc_411054:                             ; CODE XREF: .text:00411066↓j
.text:00411054                 inc     edx
.text:00411055                 movzx   eax, byte ptr [edx]
.text:00411058                 test    al, al
.text:0041105A                 jnz     short loc_411050
.text:0041105C
.text:0041105C loc_41105C:                             ; CODE XREF: .text:0041103F↑j
.text:0041105C                 add     esp, 8
.text:0041105F                 xor     eax, eax
.text:00411061                 pop     ebx
.text:00411062                 retn
.text:00411063 ; ---------------------------------------------------------------------------
.text:00411063
.text:00411063 loc_411063:                             ; CODE XREF: .text:00411052↑j
.text:00411063                 mov     byte ptr [edx], 5Ch ; '\'
.text:00411066                 jmp     short loc_411054
.text:00411066 ; ---------------------------------------------------------------------------
.text:00411068                 align 10h
.text:00411070                 push    ebx
.text:00411071                 sub     esp, 8
.text:00411074                 mov     ebx, [esp+14h]
.text:00411078                 mov     edx, [esp+10h]
.text:0041107C                 mov     [esp], ebx
.text:0041107F                 mov     [esp+4], edx
.text:00411083                 call    sub_412C00
.text:00411088                 movzx   eax, byte ptr [ebx]
.text:0041108B                 mov     edx, ebx
.text:0041108D                 test    al, al
.text:0041108F                 jz      short loc_4110AC
.text:00411091                 jmp     short loc_4110A0
.text:00411091 ; ---------------------------------------------------------------------------
.text:00411093                 align 10h
.text:004110A0
.text:004110A0 loc_4110A0:                             ; CODE XREF: .text:00411091↑j
.text:004110A0                                         ; .text:004110AA↓j
.text:004110A0                 cmp     al, 5Ch ; '\'
.text:004110A2                 jz      short loc_4110B1
.text:004110A4
.text:004110A4 loc_4110A4:                             ; CODE XREF: .text:004110B4↓j
.text:004110A4                 inc     edx
.text:004110A5                 movzx   eax, byte ptr [edx]
.text:004110A8                 test    al, al
.text:004110AA                 jnz     short loc_4110A0
.text:004110AC
.text:004110AC loc_4110AC:                             ; CODE XREF: .text:0041108F↑j
.text:004110AC                 add     esp, 8
.text:004110AF                 pop     ebx
.text:004110B0                 retn
.text:004110B1 ; ---------------------------------------------------------------------------
.text:004110B1
.text:004110B1 loc_4110B1:                             ; CODE XREF: .text:004110A2↑j
.text:004110B1                 mov     byte ptr [edx], 2Fh ; '/'
.text:004110B4                 jmp     short loc_4110A4
.text:004110B4 ; ---------------------------------------------------------------------------
.text:004110B6                 align 10h
.text:004110C0
.text:004110C0 ; =============== S U B R O U T I N E =======================================
.text:004110C0
.text:004110C0
.text:004110C0 ; int __cdecl sub_4110C0(LPSTR)
.text:004110C0 sub_4110C0      proc near               ; CODE XREF: .text:0041114E↓p
.text:004110C0                                         ; .text:0041118E↓p ...
.text:004110C0
.text:004110C0 hModule         = dword ptr -1Ch
.text:004110C0 lpFilename      = dword ptr -18h
.text:004110C0 nSize           = dword ptr -14h
.text:004110C0 arg_0           = dword ptr  4
.text:004110C0
.text:004110C0                 push    esi
.text:004110C1                 push    ebx
.text:004110C2                 sub     esp, 14h
.text:004110C5                 mov     esi, [esp+1Ch+arg_0]
.text:004110C9                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:004110D1                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:004110D8                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:004110DC                 call    GetModuleFileNameA
.text:004110E1                 sub     esp, 0Ch
.text:004110E4                 test    eax, eax
.text:004110E6                 jz      short loc_411128
.text:004110E8                 cmp     eax, 104h
.text:004110ED                 jg      short loc_411119
.text:004110EF
.text:004110EF loc_4110EF:                             ; CODE XREF: sub_4110C0+66↓j
.text:004110EF                                         ; sub_4110C0+78↓j
.text:004110EF                 movzx   eax, byte ptr [esi]
.text:004110F2                 mov     edx, esi
.text:004110F4                 test    al, al
.text:004110F6                 jz      short loc_41110C
.text:004110F8                 nop
.text:004110F9                 lea     esi, [esi+0]
.text:00411100
.text:00411100 loc_411100:                             ; CODE XREF: sub_4110C0+4A↓j
.text:00411100                 cmp     al, 5Ch ; '\'
.text:00411102                 jz      short loc_411114
.text:00411104
.text:00411104 loc_411104:                             ; CODE XREF: sub_4110C0+57↓j
.text:00411104                 inc     edx
.text:00411105                 movzx   eax, byte ptr [edx]
.text:00411108                 test    al, al
.text:0041110A                 jnz     short loc_411100
.text:0041110C
.text:0041110C loc_41110C:                             ; CODE XREF: sub_4110C0+36↑j
.text:0041110C                 add     esp, 14h
.text:0041110F                 mov     eax, esi
.text:00411111                 pop     ebx
.text:00411112                 pop     esi
.text:00411113                 retn
.text:00411114 ; ---------------------------------------------------------------------------
.text:00411114
.text:00411114 loc_411114:                             ; CODE XREF: sub_4110C0+42↑j
.text:00411114                 mov     byte ptr [edx], 2Fh ; '/'
.text:00411117                 jmp     short loc_411104
.text:00411119 ; ---------------------------------------------------------------------------
.text:00411119
.text:00411119 loc_411119:                             ; CODE XREF: sub_4110C0+2D↑j
.text:00411119                 call    _errno
.text:0041111E                 mov     dword ptr [eax], 26h ; '&'
.text:00411124                 xor     esi, esi
.text:00411126                 jmp     short loc_4110EF
.text:00411128 ; ---------------------------------------------------------------------------
.text:00411128
.text:00411128 loc_411128:                             ; CODE XREF: sub_4110C0+26↑j
.text:00411128                 call    sub_412BE0
.text:0041112D                 mov     ebx, eax
.text:0041112F                 xor     esi, esi
.text:00411131                 call    _errno
.text:00411136                 mov     [eax], ebx
.text:00411138                 jmp     short loc_4110EF
.text:00411138 sub_4110C0      endp
.text:00411138
.text:00411138 ; ---------------------------------------------------------------------------
.text:0041113A                 align 10h
.text:00411140                 sub     esp, 0Ch
.text:00411143                 mov     [esp+8], ebx
.text:00411147                 mov     ebx, [esp+10h]
.text:0041114B                 mov     [esp], ebx
.text:0041114E                 call    sub_4110C0
.text:00411153                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0041115B                 mov     [esp], ebx
.text:0041115E                 call    strrchr
.text:00411163                 test    eax, eax
.text:00411165                 jz      short loc_41116A
.text:00411167                 lea     ebx, [eax+1]
.text:0041116A
.text:0041116A loc_41116A:                             ; CODE XREF: .text:00411165↑j
.text:0041116A                 mov     eax, ebx
.text:0041116C                 mov     ebx, [esp+8]
.text:00411170                 add     esp, 0Ch
.text:00411173                 retn
.text:00411173 ; ---------------------------------------------------------------------------
.text:00411174                 align 10h
.text:00411180                 sub     esp, 0Ch
.text:00411183                 mov     [esp+8], ebx
.text:00411187                 mov     ebx, [esp+10h]
.text:0041118B                 mov     [esp], ebx
.text:0041118E                 call    sub_4110C0
.text:00411193                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0041119B                 mov     [esp], ebx
.text:0041119E                 call    strrchr
.text:004111A3                 test    eax, eax
.text:004111A5                 jz      short loc_4111AA
.text:004111A7                 mov     byte ptr [eax], 0
.text:004111AA
.text:004111AA loc_4111AA:                             ; CODE XREF: .text:004111A5↑j
.text:004111AA                 mov     eax, ebx
.text:004111AC                 mov     ebx, [esp+8]
.text:004111B0                 add     esp, 0Ch
.text:004111B3                 retn
.text:004111B3 ; ---------------------------------------------------------------------------
.text:004111B4                 align 10h
.text:004111C0                 sub     esp, 0Ch
.text:004111C3                 mov     [esp+8], ebx
.text:004111C7                 mov     ebx, [esp+10h]
.text:004111CB                 mov     [esp], ebx
.text:004111CE                 call    sub_4110C0
.text:004111D3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004111DB                 mov     [esp], ebx
.text:004111DE                 call    strrchr
.text:004111E3                 test    eax, eax
.text:004111E5                 jz      short loc_4111EA
.text:004111E7                 mov     byte ptr [eax], 0
.text:004111EA
.text:004111EA loc_4111EA:                             ; CODE XREF: .text:004111E5↑j
.text:004111EA                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004111F2                 mov     [esp], ebx
.text:004111F5                 call    strrchr
.text:004111FA                 test    eax, eax
.text:004111FC                 jz      short loc_411201
.text:004111FE                 mov     byte ptr [eax], 0
.text:00411201
.text:00411201 loc_411201:                             ; CODE XREF: .text:004111FC↑j
.text:00411201                 mov     eax, ebx
.text:00411203                 mov     ebx, [esp+8]
.text:00411207                 add     esp, 0Ch
.text:0041120A                 retn
.text:0041120A ; ---------------------------------------------------------------------------
.text:0041120B                 align 10h
.text:00411210                 sub     esp, 1Ch
.text:00411213                 mov     edx, [esp+20h]
.text:00411217                 mov     [esp+10h], ebx
.text:0041121B                 xor     ebx, ebx
.text:0041121D                 mov     [esp+14h], esi
.text:00411221                 mov     [esp+18h], edi
.text:00411225                 mov     [esp], edx
.text:00411228                 call    sub_412C30
.text:0041122D                 mov     edx, [esp+24h]
.text:00411231                 mov     edi, eax
.text:00411233                 mov     [esp], edx
.text:00411236                 call    sub_412C30
.text:0041123B                 mov     [esp+4], eax
.text:0041123F                 mov     esi, eax
.text:00411241                 mov     [esp], edi
.text:00411244                 call    _stricmp_0
.text:00411249                 mov     [esp], edi
.text:0041124C                 test    eax, eax
.text:0041124E                 setz    bl
.text:00411251                 call    free
.text:00411256                 mov     [esp], esi
.text:00411259                 call    free
.text:0041125E                 mov     eax, ebx
.text:00411260                 mov     esi, [esp+14h]
.text:00411264                 mov     ebx, [esp+10h]
.text:00411268                 mov     edi, [esp+18h]
.text:0041126C                 add     esp, 1Ch
.text:0041126F                 retn
.text:00411270 ; ---------------------------------------------------------------------------
.text:00411270                 xor     eax, eax
.text:00411272                 retn
.text:00411272 ; ---------------------------------------------------------------------------
.text:00411273 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:004112A7↓o
.text:00411280 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:004112B6↓o
.text:00411290 ; ---------------------------------------------------------------------------
.text:00411290                 sub     esp, 1Ch
.text:00411293                 mov     [esp+10h], ebx
.text:00411297                 mov     ebx, [esp+20h]
.text:0041129B                 mov     [esp+18h], edi
.text:0041129F                 mov     edi, [esp+24h]
.text:004112A3                 mov     [esp+14h], esi
.text:004112A7                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:004112AE                 call    GetModuleHandleA
.text:004112B3                 sub     esp, 4
.text:004112B6                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:004112BE                 mov     [esp], eax
.text:004112C1                 call    GetProcAddress
.text:004112C6                 sub     esp, 8
.text:004112C9                 test    eax, eax
.text:004112CB                 jz      short loc_4112E3
.text:004112CD                 mov     dword ptr [esp+8], 104h
.text:004112D5                 mov     [esp+4], ebx
.text:004112D9                 mov     [esp], edi
.text:004112DC                 call    eax
.text:004112DE                 sub     esp, 0Ch
.text:004112E1                 mov     esi, eax
.text:004112E3
.text:004112E3 loc_4112E3:                             ; CODE XREF: .text:004112CB↑j
.text:004112E3                 test    esi, esi
.text:004112E5                 jz      short loc_411300
.text:004112E7
.text:004112E7 loc_4112E7:                             ; CODE XREF: .text:0041131B↓j
.text:004112E7                 mov     eax, ebx
.text:004112E9                 mov     esi, [esp+14h]
.text:004112ED                 mov     ebx, [esp+10h]
.text:004112F1                 mov     edi, [esp+18h]
.text:004112F5                 add     esp, 1Ch
.text:004112F8                 retn
.text:004112F8 ; ---------------------------------------------------------------------------
.text:004112F9                 align 10h
.text:00411300
.text:00411300 loc_411300:                             ; CODE XREF: .text:004112E5↑j
.text:00411300                 call    sub_4136C0
.text:00411305                 mov     [esp], ebx
.text:00411308                 mov     [esp+4], edi
.text:0041130C                 call    strcpy
.text:00411311                 mov     [esp], ebx
.text:00411314                 call    _win32_longpath
.text:00411319                 mov     ebx, eax
.text:0041131B                 jmp     short loc_4112E7
.text:0041131B ; ---------------------------------------------------------------------------
.text:0041131D                 align 10h
.text:00411320                 sub     esp, 1Ch
.text:00411323                 mov     [esp+18h], edi
.text:00411327                 mov     edi, [esp+20h]
.text:0041132B                 mov     [esp+10h], ebx
.text:0041132F                 mov     [esp+14h], esi
.text:00411333                 mov     dword ptr [esp+8], 0
.text:0041133B                 mov     dword ptr [esp+4], 0
.text:00411343                 mov     [esp], edi
.text:00411346                 call    GetShortPathNameA
.text:0041134B                 sub     esp, 0Ch
.text:0041134E                 mov     ebx, eax
.text:00411350                 test    eax, eax
.text:00411352                 jz      short loc_4113A0
.text:00411354                 lea     edx, [eax+1]
.text:00411357                 mov     [esp], edx
.text:0041135A                 call    malloc
.text:0041135F                 test    eax, eax
.text:00411361                 mov     esi, eax
.text:00411363                 jz      short loc_4113A0
.text:00411365                 mov     [esp+8], ebx
.text:00411369                 mov     [esp+4], eax
.text:0041136D                 mov     [esp], edi
.text:00411370                 call    GetShortPathNameA
.text:00411375                 sub     esp, 0Ch
.text:00411378                 mov     edx, esi
.text:0041137A                 test    eax, eax
.text:0041137C                 jz      short loc_411392
.text:0041137E                 mov     esi, esi
.text:00411380
.text:00411380 loc_411380:                             ; CODE XREF: .text:004113B0↓j
.text:00411380                 mov     ebx, [esp+10h]
.text:00411384                 mov     eax, edx
.text:00411386                 mov     esi, [esp+14h]
.text:0041138A                 mov     edi, [esp+18h]
.text:0041138E                 add     esp, 1Ch
.text:00411391                 retn
.text:00411392 ; ---------------------------------------------------------------------------
.text:00411392
.text:00411392 loc_411392:                             ; CODE XREF: .text:0041137C↑j
.text:00411392                 mov     [esp], esi
.text:00411395                 call    free
.text:0041139A                 lea     esi, [esi+0]
.text:004113A0
.text:004113A0 loc_4113A0:                             ; CODE XREF: .text:00411352↑j
.text:004113A0                                         ; .text:00411363↑j
.text:004113A0                 call    sub_412BE0
.text:004113A5                 mov     esi, eax
.text:004113A7                 call    _errno
.text:004113AC                 mov     [eax], esi
.text:004113AE                 mov     edx, edi
.text:004113B0                 jmp     short loc_411380
.text:004113B0 ; ---------------------------------------------------------------------------
.text:004113B2                 align 10h
.text:004113C0
.text:004113C0 ; =============== S U B R O U T I N E =======================================
.text:004113C0
.text:004113C0
.text:004113C0 sub_4113C0      proc near               ; DATA XREF: sub_4113D0+186↓o
.text:004113C0                 sub     al, [eax]
.text:004113C2                 lea     esi, [esi+0]
.text:004113C9                 lea     edi, [edi+0]
.text:004113C9 sub_4113C0      endp
.text:004113C9
.text:004113D0
.text:004113D0 ; =============== S U B R O U T I N E =======================================
.text:004113D0
.text:004113D0
.text:004113D0 sub_4113D0      proc near               ; CODE XREF: sub_4042E0+103↑p
.text:004113D0
.text:004113D0 hFindFile       = dword ptr -2DCh
.text:004113D0 lpFindFileData  = dword ptr -2D8h
.text:004113D0 Count           = dword ptr -2D4h
.text:004113D0 Destination     = byte ptr -2CCh
.text:004113D0 var_1BC         = dword ptr -1BCh
.text:004113D0 var_1B4         = dword ptr -1B4h
.text:004113D0 var_1B0         = dword ptr -1B0h
.text:004113D0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:004113D0 arg_0           = dword ptr  4
.text:004113D0
.text:004113D0                 push    ebp
.text:004113D1                 push    edi
.text:004113D2                 push    esi
.text:004113D3                 push    ebx
.text:004113D4                 sub     esp, 2CCh
.text:004113DA                 mov     ebp, [esp+2DCh+arg_0]
.text:004113E1                 test    ebp, ebp
.text:004113E3                 mov     ebx, [ebp+4]
.text:004113E6                 jz      loc_41159D
.text:004113EC                 mov     edx, [ebp+0]
.text:004113EF                 cmp     edx, 0FFFFFFFFh
.text:004113F2                 jz      loc_411527
.text:004113F8                 mov     [esp+2DCh+hFindFile], edx ; hFindFile
.text:004113FB                 lea     ecx, [esp+2DCh+FindFileData]
.text:00411402                 mov     [esp+2DCh+lpFindFileData], ecx ; lpFindFileData
.text:00411406                 call    FindNextFileA
.text:0041140B                 sub     esp, 8
.text:0041140E                 test    eax, eax
.text:00411410                 jz      loc_41151B
.text:00411416
.text:00411416 loc_411416:                             ; CODE XREF: sub_4113D0+1BC↓j
.text:00411416                 mov     [esp+2DCh+Count], 104h ; Count
.text:0041141E                 lea     edi, [esp+2DCh+FindFileData.cFileName]
.text:00411425                 mov     esi, [ebx]
.text:00411427                 mov     [esp+2DCh+lpFindFileData], esi ; Source
.text:0041142B                 lea     esi, [ebx+14h]
.text:0041142E                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00411431                 call    strncpy
.text:00411436                 mov     [esp+2DCh+Count], 104h ; Count
.text:0041143E                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:00411442                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00411445                 call    strncat
.text:0041144A                 mov     [esp+2DCh+lpFindFileData], esi ; int
.text:0041144E                 lea     edx, [esp+2DCh+var_1BC]
.text:00411455                 mov     [esp+2DCh+Count], edx ; int
.text:00411459                 mov     [esp+2DCh+hFindFile], 0 ; LPCSTR
.text:00411460                 call    sub_410B00
.text:00411465                 test    eax, eax
.text:00411467                 jnz     loc_411509
.text:0041146D                 mov     ecx, [esp+2DCh+var_1BC]
.text:00411474                 and     ecx, 0F000h
.text:0041147A                 shr     ecx, 0Ch
.text:0041147D                 mov     [ebx+12h], cl
.text:00411480                 mov     ecx, edi
.text:00411482                 lea     esi, [esi+0]
.text:00411489                 lea     edi, [edi+0]
.text:00411490
.text:00411490 loc_411490:                             ; CODE XREF: sub_4113D0+D5↓j
.text:00411490                 mov     eax, [ecx]
.text:00411492                 add     ecx, 4
.text:00411495                 lea     edx, [eax-1010101h]
.text:0041149B                 not     eax
.text:0041149D                 and     edx, eax
.text:0041149F                 and     edx, 80808080h
.text:004114A5                 jz      short loc_411490
.text:004114A7                 test    edx, 8080h
.text:004114AD                 jnz     short loc_4114B5
.text:004114AF                 shr     edx, 10h
.text:004114B2                 add     ecx, 2
.text:004114B5
.text:004114B5 loc_4114B5:                             ; CODE XREF: sub_4113D0+DD↑j
.text:004114B5                 mov     word ptr [ebx+10h], 110h
.text:004114BB                 add     dl, dl
.text:004114BD                 sbb     ecx, 3
.text:004114C0                 sub     ecx, edi
.text:004114C2                 mov     [ebx+13h], cl
.text:004114C5                 mov     edx, [esp+2DCh+var_1B4]
.text:004114CC                 mov     ecx, [esp+2DCh+var_1B0]
.text:004114D3                 mov     [ebx+8], edx
.text:004114D6                 mov     [ebx+0Ch], ecx
.text:004114D9                 mov     [esp+2DCh+Count], 104h ; Count
.text:004114E1                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:004114E5                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:004114E8                 call    strncpy
.text:004114ED                 inc     dword ptr [ebp+14h]
.text:004114F0                 call    _errno
.text:004114F5                 mov     dword ptr [eax], 0
.text:004114FB                 lea     eax, [ebx+8]
.text:004114FE
.text:004114FE loc_4114FE:                             ; CODE XREF: sub_4113D0+149↓j
.text:004114FE                 add     esp, 2CCh
.text:00411504                 pop     ebx
.text:00411505                 pop     esi
.text:00411506                 pop     edi
.text:00411507                 pop     ebp
.text:00411508                 retn
.text:00411509 ; ---------------------------------------------------------------------------
.text:00411509
.text:00411509 loc_411509:                             ; CODE XREF: sub_4113D0+97↑j
.text:00411509                                         ; sub_4113D0+153↓j ...
.text:00411509                 call    sub_412BE0
.text:0041150E                 mov     ebp, eax
.text:00411510                 call    _errno
.text:00411515                 mov     [eax], ebp
.text:00411517
.text:00411517 loc_411517:                             ; CODE XREF: sub_4113D0+155↓j
.text:00411517                                         ; sub_4113D0+1D8↓j
.text:00411517                 xor     eax, eax
.text:00411519                 jmp     short loc_4114FE
.text:0041151B ; ---------------------------------------------------------------------------
.text:0041151B
.text:0041151B loc_41151B:                             ; CODE XREF: sub_4113D0+40↑j
.text:0041151B                 call    GetLastError
.text:00411520                 cmp     eax, 12h
.text:00411523                 jnz     short loc_411509
.text:00411525                 jmp     short loc_411517
.text:00411527 ; ---------------------------------------------------------------------------
.text:00411527
.text:00411527 loc_411527:                             ; CODE XREF: sub_4113D0+22↑j
.text:00411527                 mov     edx, [ebx]
.text:00411529                 lea     esi, [esp+2DCh+Destination]
.text:0041152D                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00411530                 mov     [esp+2DCh+lpFindFileData], edx ; Source
.text:00411534                 call    strcpy
.text:00411539                 mov     ecx, esi
.text:0041153B                 nop
.text:0041153C                 lea     esi, [esi+0]
.text:00411540
.text:00411540 loc_411540:                             ; CODE XREF: sub_4113D0+184↓j
.text:00411540                 mov     edi, [ecx]
.text:00411542                 add     ecx, 4
.text:00411545                 lea     eax, [edi-1010101h]
.text:0041154B                 not     edi
.text:0041154D                 and     eax, edi
.text:0041154F                 test    eax, 80808080h
.text:00411554                 jz      short loc_411540
.text:00411556                 mov     [esp+2DCh+lpFindFileData], offset sub_4113C0 ; Source
.text:0041155E                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00411561                 call    strcat
.text:00411566                 mov     [esp+2DCh+hFindFile], esi
.text:00411569                 call    sub_410FA0
.text:0041156E                 mov     [esp+2DCh+hFindFile], esi ; lpFileName
.text:00411571                 lea     edx, [esp+2DCh+FindFileData]
.text:00411578                 mov     [esp+2DCh+lpFindFileData], edx ; lpFindFileData
.text:0041157C                 call    FindFirstFileA
.text:00411581                 sub     esp, 8
.text:00411584                 cmp     eax, 0FFFFFFFFh
.text:00411587                 jz      short loc_411591
.text:00411589                 mov     [ebp+0], eax
.text:0041158C                 jmp     loc_411416
.text:00411591 ; ---------------------------------------------------------------------------
.text:00411591
.text:00411591 loc_411591:                             ; CODE XREF: sub_4113D0+1B7↑j
.text:00411591                 mov     dword ptr [ebp+0], 0FFFFFFFFh
.text:00411598                 jmp     loc_411509
.text:0041159D ; ---------------------------------------------------------------------------
.text:0041159D
.text:0041159D loc_41159D:                             ; CODE XREF: sub_4113D0+16↑j
.text:0041159D                 call    _errno
.text:004115A2                 mov     dword ptr [eax], 9
.text:004115A8                 jmp     loc_411517
.text:004115A8 sub_4113D0      endp
.text:004115A8
.text:004115A8 ; ---------------------------------------------------------------------------
.text:004115AD                 align 10h
.text:004115B0 ; const char String[4]
.text:004115B0 String          db ' :/',0              ; DATA XREF: sub_4115C0+FA↓o
.text:004115B4                 align 10h
.text:004115C0
.text:004115C0 ; =============== S U B R O U T I N E =======================================
.text:004115C0
.text:004115C0
.text:004115C0 ; int __cdecl sub_4115C0(LPCSTR)
.text:004115C0 sub_4115C0      proc near               ; CODE XREF: sub_40F7A0+E↑p
.text:004115C0                                         ; sub_40FCA0+17↑p ...
.text:004115C0
.text:004115C0 Str             = dword ptr -1Ch
.text:004115C0 Val             = dword ptr -18h
.text:004115C0 Count           = dword ptr -14h
.text:004115C0 var_10          = dword ptr -10h
.text:004115C0 var_C           = dword ptr -0Ch
.text:004115C0 var_8           = dword ptr -8
.text:004115C0 var_4           = dword ptr -4
.text:004115C0 arg_0           = dword ptr  4
.text:004115C0
.text:004115C0                 sub     esp, 1Ch
.text:004115C3                 mov     edx, [esp+1Ch+arg_0]
.text:004115C7                 mov     [esp+1Ch+var_8], edi
.text:004115CB                 mov     [esp+1Ch+var_10], ebx
.text:004115CF                 mov     [esp+1Ch+var_C], esi
.text:004115D3                 mov     [esp+1Ch+var_4], ebp
.text:004115D7                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:004115DA                 call    sub_412C30
.text:004115DF                 test    eax, eax
.text:004115E1                 mov     edi, eax
.text:004115E3                 jz      short loc_411620
.text:004115E5                 mov     [esp+1Ch+Str], eax ; Str
.text:004115E8                 call    strlen
.text:004115ED                 cmp     eax, 2
.text:004115F0                 jbe     short loc_4115FC
.text:004115F2                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:004115F6                 jz      loc_4116B0
.text:004115FC
.text:004115FC loc_4115FC:                             ; CODE XREF: sub_4115C0+30↑j
.text:004115FC                                         ; sub_4115C0+F4↓j
.text:004115FC                 test    edi, edi
.text:004115FE                 jz      short loc_411620
.text:00411600                 mov     [esp+1Ch+Str], edi ; Str
.text:00411603                 call    strlen
.text:00411608                 cmp     eax, 4
.text:0041160B                 mov     ebp, eax
.text:0041160D                 jle     short loc_411620
.text:0041160F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:00411612                 jz      short loc_411640
.text:00411614                 lea     esi, [esi+0]
.text:0041161A                 lea     edi, [edi+0]
.text:00411620
.text:00411620 loc_411620:                             ; CODE XREF: sub_4115C0+23↑j
.text:00411620                                         ; sub_4115C0+3E↑j ...
.text:00411620                 xor     esi, esi
.text:00411622
.text:00411622 loc_411622:                             ; CODE XREF: sub_4115C0+CD↓j
.text:00411622                                         ; sub_4115C0+115↓j
.text:00411622                 mov     [esp+1Ch+Str], edi ; Block
.text:00411625                 call    free
.text:0041162A                 mov     eax, esi
.text:0041162C                 mov     ebx, [esp+1Ch+var_10]
.text:00411630                 mov     esi, [esp+1Ch+var_C]
.text:00411634                 mov     edi, [esp+1Ch+var_8]
.text:00411638                 mov     ebp, [esp+1Ch+var_4]
.text:0041163C                 add     esp, 1Ch
.text:0041163F                 retn
.text:00411640 ; ---------------------------------------------------------------------------
.text:00411640
.text:00411640 loc_411640:                             ; CODE XREF: sub_4115C0+52↑j
.text:00411640                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:00411644                 jnz     short loc_411620
.text:00411646                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0041164E                 lea     ecx, [edi+2]
.text:00411651                 mov     [esp+1Ch+Str], ecx ; Str
.text:00411654                 call    strchr
.text:00411659                 test    eax, eax
.text:0041165B                 jnz     short loc_41168F
.text:0041165D
.text:0041165D loc_41165D:                             ; CODE XREF: sub_4115C0+E2↓j
.text:0041165D                 inc     ebp
.text:0041165E
.text:0041165E loc_41165E:                             ; CODE XREF: sub_4115C0+E9↓j
.text:0041165E                 mov     [esp+1Ch+Val], 1 ; Size
.text:00411666                 lea     ebx, [ebp+1]
.text:00411669                 mov     [esp+1Ch+Str], ebx ; Count
.text:0041166C                 call    calloc
.text:00411671                 mov     [esp+1Ch+Str], eax ; Destination
.text:00411674                 mov     esi, eax
.text:00411676                 mov     [esp+1Ch+Count], ebx ; Count
.text:0041167A                 mov     [esp+1Ch+Val], edi ; Source
.text:0041167E                 call    strncpy
.text:00411683                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:00411688                 mov     byte ptr [ebp+esi+0], 0
.text:0041168D                 jmp     short loc_411622
.text:0041168F ; ---------------------------------------------------------------------------
.text:0041168F
.text:0041168F loc_41168F:                             ; CODE XREF: sub_4115C0+9B↑j
.text:0041168F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:00411697                 inc     eax
.text:00411698                 mov     [esp+1Ch+Str], eax ; Str
.text:0041169B                 call    strchr
.text:004116A0                 test    eax, eax
.text:004116A2                 jz      short loc_41165D
.text:004116A4                 sub     eax, edi
.text:004116A6                 lea     ebp, [eax+1]
.text:004116A9                 jmp     short loc_41165E
.text:004116A9 ; ---------------------------------------------------------------------------
.text:004116AB                 align 10h
.text:004116B0
.text:004116B0 loc_4116B0:                             ; CODE XREF: sub_4115C0+36↑j
.text:004116B0                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:004116B4                 jnz     loc_4115FC
.text:004116BA                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:004116C1                 call    _strdup
.text:004116C6                 movsx   edx, byte ptr [edi]
.text:004116C9                 mov     esi, eax
.text:004116CB                 mov     [esp+1Ch+Str], edx ; C
.text:004116CE                 call    toupper
.text:004116D3                 mov     [esi], al
.text:004116D5                 jmp     loc_411622
.text:004116D5 sub_4115C0      endp
.text:004116D5
.text:004116D5 ; ---------------------------------------------------------------------------
.text:004116DA                 align 10h
.text:004116E0
.text:004116E0 ; =============== S U B R O U T I N E =======================================
.text:004116E0
.text:004116E0
.text:004116E0 sub_4116E0      proc near               ; CODE XREF: .text:00411834↓p
.text:004116E0                                         ; .text:00411918↓p
.text:004116E0
.text:004116E0 Str             = dword ptr -2Ch
.text:004116E0 Val             = dword ptr -28h
.text:004116E0 var_18          = dword ptr -18h
.text:004116E0 var_11          = byte ptr -11h
.text:004116E0 arg_0           = dword ptr  4
.text:004116E0
.text:004116E0                 push    ebp
.text:004116E1                 push    edi
.text:004116E2                 push    esi
.text:004116E3                 push    ebx
.text:004116E4                 sub     esp, 1Ch
.text:004116E7                 mov     edx, [esp+2Ch+arg_0]
.text:004116EB                 cmp     edx, ds:dword_41B2C0
.text:004116F1                 mov     [esp+2Ch+var_11], 0
.text:004116F6                 jz      loc_4117F4
.text:004116FC                 mov     ebx, ds:dword_41B2B0
.text:00411702                 test    ebx, ebx
.text:00411704                 jz      short loc_411772
.text:00411706
.text:00411706 loc_411706:                             ; CODE XREF: sub_4116E0+10F↓j
.text:00411706                 mov     ebx, [esp+2Ch+arg_0]
.text:0041170A                 xor     edi, edi
.text:0041170C                 xor     esi, esi
.text:0041170E                 mov     ebp, offset dword_41B2D8
.text:00411713                 lea     esi, [esi+0]
.text:00411719                 lea     edi, [edi+0]
.text:00411720
.text:00411720 loc_411720:                             ; CODE XREF: sub_4116E0+60↓j
.text:00411720                 mov     edx, [ebp+4]
.text:00411723                 mov     ecx, edi
.text:00411725                 mov     eax, [ebp+0]
.text:00411728                 shl     ecx, 4
.text:0041172B                 mov     [esp+2Ch+var_18], ecx
.text:0041172F                 mov     ecx, edx
.text:00411731                 xor     eax, ebx
.text:00411733                 xor     ecx, esi
.text:00411735                 or      ecx, eax
.text:00411737                 jz      short loc_411761
.text:00411739                 inc     edi
.text:0041173A                 add     ebp, 10h
.text:0041173D                 cmp     edi, 20h ; ' '
.text:00411740                 jle     short loc_411720
.text:00411742
.text:00411742 loc_411742:                             ; CODE XREF: sub_4116E0+90↓j
.text:00411742                 movzx   ebx, [esp+2Ch+var_11]
.text:00411747                 mov     eax, [esp+2Ch+arg_0]
.text:0041174B                 mov     byte_41A080, bl
.text:00411751                 mov     ds:dword_41B2C0, eax
.text:00411756                 movsx   eax, bl
.text:00411759
.text:00411759 loc_411759:                             ; CODE XREF: sub_4116E0+11B↓j
.text:00411759                 add     esp, 1Ch
.text:0041175C                 pop     ebx
.text:0041175D                 pop     esi
.text:0041175E                 pop     edi
.text:0041175F                 pop     ebp
.text:00411760                 retn
.text:00411761 ; ---------------------------------------------------------------------------
.text:00411761
.text:00411761 loc_411761:                             ; CODE XREF: sub_4116E0+57↑j
.text:00411761                 mov     edx, [esp+2Ch+var_18]
.text:00411765                 movzx   eax, byte ptr ds:dword_41B2D0[edx]
.text:0041176C                 mov     [esp+2Ch+var_11], al
.text:00411770                 jmp     short loc_411742
.text:00411772 ; ---------------------------------------------------------------------------
.text:00411772
.text:00411772 loc_411772:                             ; CODE XREF: sub_4116E0+24↑j
.text:00411772                 mov     [esp+2Ch+Str], 0
.text:00411779                 call    sub_4144A0
.text:0041177E                 test    eax, eax
.text:00411780                 mov     ebx, eax
.text:00411782                 jz      short loc_4117DC
.text:00411784                 movzx   ecx, byte ptr [eax]
.text:00411787                 mov     esi, 0FFFFFFF0h
.text:0041178C                 test    cl, cl
.text:0041178E                 jz      short loc_4117DC
.text:00411790
.text:00411790 loc_411790:                             ; CODE XREF: sub_4116E0+FA↓j
.text:00411790                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:00411793                 movsx   ebp, cl
.text:00411796                 add     esi, 10h
.text:00411799                 mov     ds:dword_41B2D0[esi], ebp
.text:0041179F                 mov     edi, ebp
.text:004117A1                 sar     edi, 1Fh
.text:004117A4                 mov     ds:dword_41B2D4[esi], edi
.text:004117AA                 call    sub_40FCA0
.text:004117AF                 mov     ds:dword_41B2D8[esi], eax
.text:004117B5                 xor     ecx, ecx
.text:004117B7                 mov     [esp+2Ch+Str], ebx ; Str
.text:004117BA                 mov     ds:dword_41B2DC[esi], ecx
.text:004117C0                 mov     [esp+2Ch+Val], 0 ; Val
.text:004117C8                 call    strchr
.text:004117CD                 mov     ebx, eax
.text:004117CF                 inc     ebx
.text:004117D0                 jz      short loc_4117DC
.text:004117D2                 movzx   edx, byte ptr [eax+1]
.text:004117D6                 test    dl, dl
.text:004117D8                 mov     cl, dl
.text:004117DA                 jnz     short loc_411790
.text:004117DC
.text:004117DC loc_4117DC:                             ; CODE XREF: sub_4116E0+A2↑j
.text:004117DC                                         ; sub_4116E0+AE↑j ...
.text:004117DC                 mov     [esp+2Ch+Str], ebx ; Block
.text:004117DF                 mov     esi, 1
.text:004117E4                 mov     ds:dword_41B2B0, esi
.text:004117EA                 call    free
.text:004117EF                 jmp     loc_411706
.text:004117F4 ; ---------------------------------------------------------------------------
.text:004117F4
.text:004117F4 loc_4117F4:                             ; CODE XREF: sub_4116E0+16↑j
.text:004117F4                 movsx   eax, byte_41A080
.text:004117FB                 jmp     loc_411759
.text:004117FB sub_4116E0      endp
.text:004117FB
.text:004117FB ; ---------------------------------------------------------------------------
.text:00411800 dword_411800    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:00411800                                         ; DATA XREF: .text:00411823↓o
.text:00411800                                         ; .text:00411903↓o
.text:00411810 ; ---------------------------------------------------------------------------
.text:00411810                 sub     esp, 1Ch
.text:00411813                 mov     [esp+14h], esi
.text:00411817                 mov     esi, [esp+20h]
.text:0041181B                 mov     [esp+18h], edi
.text:0041181F                 mov     [esp+10h], ebx
.text:00411823                 mov     dword ptr [esp], offset dword_411800
.text:0041182A                 call    _strdup
.text:0041182F                 mov     [esp], esi
.text:00411832                 mov     edi, eax
.text:00411834                 call    sub_4116E0
.text:00411839                 mov     [edi], al
.text:0041183B                 test    al, al
.text:0041183D                 jz      short loc_411851
.text:0041183F                 mov     eax, edi
.text:00411841                 mov     ebx, [esp+10h]
.text:00411845                 mov     esi, [esp+14h]
.text:00411849                 mov     edi, [esp+18h]
.text:0041184D                 add     esp, 1Ch
.text:00411850                 retn
.text:00411851 ; ---------------------------------------------------------------------------
.text:00411851
.text:00411851 loc_411851:                             ; CODE XREF: .text:0041183D↑j
.text:00411851                 mov     [esp], edi
.text:00411854                 call    free
.text:00411859                 mov     dword ptr [esp+4], 0
.text:00411861                 mov     dword ptr [esp], 0
.text:00411868                 call    GetCurrentDirectoryA
.text:0041186D                 sub     esp, 8
.text:00411870                 lea     esi, [eax+1]
.text:00411873                 mov     [esp], esi
.text:00411876                 call    malloc
.text:0041187B                 mov     [esp+4], eax
.text:0041187F                 mov     edi, eax
.text:00411881                 mov     [esp], esi
.text:00411884                 call    GetCurrentDirectoryA
.text:00411889                 sub     esp, 8
.text:0041188C                 test    eax, eax
.text:0041188E                 jnz     short loc_4118B0
.text:00411890                 mov     dword ptr [esp+20h], 411804h
.text:00411898                 mov     ebx, [esp+10h]
.text:0041189C                 mov     esi, [esp+14h]
.text:004118A0                 mov     edi, [esp+18h]
.text:004118A4                 add     esp, 1Ch
.text:004118A7                 jmp     _strdup
.text:004118A7 ; ---------------------------------------------------------------------------
.text:004118AC                 align 10h
.text:004118B0
.text:004118B0 loc_4118B0:                             ; CODE XREF: .text:0041188E↑j
.text:004118B0                 mov     [esp+20h], edi
.text:004118B4                 mov     ebx, [esp+10h]
.text:004118B8                 mov     esi, [esp+14h]
.text:004118BC                 mov     edi, [esp+18h]
.text:004118C0                 add     esp, 1Ch
.text:004118C3                 jmp     sub_4115C0
.text:004118C3 ; ---------------------------------------------------------------------------
.text:004118C8                 align 10h
.text:004118D0                 sub     esp, 7Ch
.text:004118D3                 lea     edx, [esp+10h]
.text:004118D7                 mov     [esp+8], edx
.text:004118DB                 mov     edx, [esp+80h]
.text:004118E2                 mov     [esp+70h], ebx
.text:004118E6                 mov     [esp+74h], esi
.text:004118EA                 mov     [esp+4], edx
.text:004118EE                 mov     [esp+78h], edi
.text:004118F2                 mov     dword ptr [esp], 0
.text:004118F9                 call    sub_40EEF0
.text:004118FE                 xor     edx, edx
.text:00411900                 inc     eax
.text:00411901                 jz      short loc_411925
.text:00411903                 mov     dword ptr [esp], offset dword_411800
.text:0041190A                 mov     esi, [esp+20h]
.text:0041190E                 call    _strdup
.text:00411913                 mov     edi, eax
.text:00411915                 mov     [esp], esi
.text:00411918                 call    sub_4116E0
.text:0041191D                 mov     [edi], al
.text:0041191F                 test    al, al
.text:00411921                 mov     edx, edi
.text:00411923                 jz      short loc_411937
.text:00411925
.text:00411925 loc_411925:                             ; CODE XREF: .text:00411901↑j
.text:00411925                                         ; .text:00411984↓j
.text:00411925                 mov     ebx, [esp+70h]
.text:00411929                 mov     eax, edx
.text:0041192B                 mov     esi, [esp+74h]
.text:0041192F                 mov     edi, [esp+78h]
.text:00411933                 add     esp, 7Ch
.text:00411936                 retn
.text:00411937 ; ---------------------------------------------------------------------------
.text:00411937
.text:00411937 loc_411937:                             ; CODE XREF: .text:00411923↑j
.text:00411937                 mov     [esp], edi
.text:0041193A                 call    free
.text:0041193F                 mov     dword ptr [esp+4], 0
.text:00411947                 mov     dword ptr [esp], 0
.text:0041194E                 call    GetCurrentDirectoryA
.text:00411953                 sub     esp, 8
.text:00411956                 lea     esi, [eax+1]
.text:00411959                 mov     [esp], esi
.text:0041195C                 call    malloc
.text:00411961                 mov     [esp+4], eax
.text:00411965                 mov     edi, eax
.text:00411967                 mov     [esp], esi
.text:0041196A                 call    GetCurrentDirectoryA
.text:0041196F                 sub     esp, 8
.text:00411972                 test    eax, eax
.text:00411974                 jnz     short loc_411986
.text:00411976                 mov     dword ptr [esp], 411804h
.text:0041197D                 call    _strdup
.text:00411982
.text:00411982 loc_411982:                             ; CODE XREF: .text:0041198E↓j
.text:00411982                 mov     edx, eax
.text:00411984                 jmp     short loc_411925
.text:00411986 ; ---------------------------------------------------------------------------
.text:00411986
.text:00411986 loc_411986:                             ; CODE XREF: .text:00411974↑j
.text:00411986                 mov     [esp], edi
.text:00411989                 call    sub_4115C0
.text:0041198E                 jmp     short loc_411982
.text:00411990
.text:00411990 ; =============== S U B R O U T I N E =======================================
.text:00411990
.text:00411990
.text:00411990 ; int __cdecl sub_411990(LPCSTR)
.text:00411990 sub_411990      proc near               ; CODE XREF: sub_40F150+12F↑p
.text:00411990
.text:00411990 String1         = dword ptr -1Ch
.text:00411990 String2         = dword ptr -18h
.text:00411990 var_C           = dword ptr -0Ch
.text:00411990 var_8           = dword ptr -8
.text:00411990 var_4           = dword ptr -4
.text:00411990 arg_0           = dword ptr  4
.text:00411990
.text:00411990                 sub     esp, 1Ch
.text:00411993                 mov     [esp+1Ch+var_4], edi
.text:00411997                 mov     edi, [esp+1Ch+arg_0]
.text:0041199B                 mov     [esp+1Ch+var_C], ebx
.text:0041199F                 mov     [esp+1Ch+var_8], esi
.text:004119A3                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:004119A6                 call    sub_412C30
.text:004119AB                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:004119AE                 mov     esi, eax
.text:004119B0                 call    sub_4115C0
.text:004119B5                 mov     [esp+1Ch+String2], eax ; String2
.text:004119B9                 mov     ebx, eax
.text:004119BB                 mov     [esp+1Ch+String1], esi ; String1
.text:004119BE                 call    _stricmp
.text:004119C3                 test    eax, eax
.text:004119C5                 setz    dl
.text:004119C8                 test    esi, esi
.text:004119CA                 movzx   edi, dl
.text:004119CD                 jz      short loc_4119D7
.text:004119CF                 mov     [esp+1Ch+String1], esi ; Block
.text:004119D2                 call    free
.text:004119D7
.text:004119D7 loc_4119D7:                             ; CODE XREF: sub_411990+3D↑j
.text:004119D7                 test    ebx, ebx
.text:004119D9                 jz      short loc_4119E3
.text:004119DB                 mov     [esp+1Ch+String1], ebx ; Block
.text:004119DE                 call    free
.text:004119E3
.text:004119E3 loc_4119E3:                             ; CODE XREF: sub_411990+49↑j
.text:004119E3                 mov     eax, edi
.text:004119E5                 mov     ebx, [esp+1Ch+var_C]
.text:004119E9                 mov     esi, [esp+1Ch+var_8]
.text:004119ED                 mov     edi, [esp+1Ch+var_4]
.text:004119F1                 add     esp, 1Ch
.text:004119F4                 retn
.text:004119F4 sub_411990      endp
.text:004119F4
.text:004119F4 ; ---------------------------------------------------------------------------
.text:004119F5                 align 10h
.text:00411A00
.text:00411A00 ; =============== S U B R O U T I N E =======================================
.text:00411A00
.text:00411A00
.text:00411A00 ; int __cdecl sub_411A00(char *, int)
.text:00411A00 sub_411A00      proc near               ; CODE XREF: sub_404940+37↑p
.text:00411A00
.text:00411A00 var_C           = dword ptr -0Ch
.text:00411A00 var_8           = dword ptr -8
.text:00411A00 var_4           = dword ptr -4
.text:00411A00 arg_0           = dword ptr  4
.text:00411A00 arg_4           = dword ptr  8
.text:00411A00
.text:00411A00                 sub     esp, 0Ch
.text:00411A03                 mov     edx, [esp+0Ch+arg_4]
.text:00411A07                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:00411A0E                 mov     [esp+0Ch+var_4], edx ; int
.text:00411A12                 mov     edx, [esp+0Ch+arg_0]
.text:00411A16                 mov     [esp+0Ch+var_8], edx ; char *
.text:00411A1A                 call    sub_4122B0
.text:00411A1F                 add     esp, 0Ch
.text:00411A22                 retn
.text:00411A22 sub_411A00      endp
.text:00411A22
.text:00411A22 ; ---------------------------------------------------------------------------
.text:00411A23                 align 10h
.text:00411A30 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:00411A81↓o
.text:00411A39 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:00411A39                                         ; DATA XREF: .text:00411A92↓o
.text:00411A4D ; const CHAR FileName[]
.text:00411A4D FileName        db '\\.\vwin32',0       ; DATA XREF: .text:00411BDC↓o
.text:00411A4D                                         ; sub_412010+17C↓o
.text:00411A58 ; ---------------------------------------------------------------------------
.text:00411A58
.text:00411A58 loc_411A58:                             ; DATA XREF: .text:00411CF2↓o
.text:00411A58                 dec     esi
.text:00411A59                 push    esp
.text:00411A5A                 inc     esi
.text:00411A5B                 push    ebx
.text:00411A5C                 add     [esi+41h], al
.text:00411A5F                 push    esp
.text:00411A60                 xor     esi, [edx]
.text:00411A62                 add     [esi+41h], al
.text:00411A65                 push    esp
.text:00411A66                 add     [ebx+44h], al
.text:00411A69                 inc     esi
.text:00411A6A                 push    ebx
.text:00411A6B
.text:00411A6B loc_411A6B:                             ; CODE XREF: sub_412010+101↓p
.text:00411A6B                 add     [ebp+55002674h], cl
.text:00411A71                 push    edi
.text:00411A72                 push    esi
.text:00411A73                 push    ebx
.text:00411A74                 sub     esp, 8BCh
.text:00411A7A                 mov     ebp, [esp+8D0h]
.text:00411A81                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:00411A88                 call    LoadLibraryA
.text:00411A8D                 sub     esp, 4
.text:00411A90                 mov     edi, eax
.text:00411A92                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:00411A9A                 mov     [esp], eax
.text:00411A9D                 call    GetProcAddress
.text:00411AA2                 sub     esp, 8
.text:00411AA5                 mov     esi, eax
.text:00411AA7                 test    ebp, ebp
.text:00411AA9                 mov     dword ptr [esp+20h], 0
.text:00411AB1                 jz      loc_411FF1
.text:00411AB7                 mov     [esp], ebp
.text:00411ABA                 call    sub_410FA0
.text:00411ABF                 mov     [esp], eax
.text:00411AC2                 mov     ebp, eax
.text:00411AC4                 call    strlen
.text:00411AC9                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:00411ACE                 mov     ebx, eax
.text:00411AD0                 jz      short loc_411AEC
.text:00411AD2                 mov     [esp], ebp
.text:00411AD5                 lea     edx, [eax+1]
.text:00411AD8                 mov     [esp+4], edx
.text:00411ADC                 call    realloc
.text:00411AE1                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00411AE5                 mov     ebp, eax
.text:00411AE7                 mov     byte ptr [ebx+eax+1], 0
.text:00411AEC
.text:00411AEC loc_411AEC:                             ; CODE XREF: .text:00411AD0↑j
.text:00411AEC                 mov     dword ptr [esp+1Ch], 400h
.text:00411AF4                 lea     edx, [esp+0B0h]
.text:00411AFB                 lea     ebx, [esp+5Ch]
.text:00411AFF                 mov     [esp+18h], edx
.text:00411B03                 lea     ecx, [esp+58h]
.text:00411B07                 lea     edx, [esp+54h]
.text:00411B0B                 mov     [esp+14h], ebx
.text:00411B0F                 lea     eax, [esp+4B0h]
.text:00411B16                 mov     [esp+10h], ecx
.text:00411B1A                 mov     [esp+0Ch], edx
.text:00411B1E                 mov     dword ptr [esp+8], 400h
.text:00411B26                 mov     [esp+4], eax
.text:00411B2A                 mov     [esp], ebp
.text:00411B2D                 call    GetVolumeInformationA
.text:00411B32                 sub     esp, 20h
.text:00411B35                 test    eax, eax
.text:00411B37                 jz      loc_411FCE
.text:00411B3D                 test    esi, esi
.text:00411B3F                 jz      short loc_411B65
.text:00411B41                 mov     [esp], ebp
.text:00411B44                 lea     edx, [esp+48h]
.text:00411B48                 lea     ebx, [esp+40h]
.text:00411B4C                 mov     [esp+0Ch], edx
.text:00411B50                 lea     ecx, [esp+38h]
.text:00411B54                 mov     [esp+8], ebx
.text:00411B58                 mov     [esp+4], ecx
.text:00411B5C                 call    esi
.text:00411B5E                 sub     esp, 10h
.text:00411B61                 mov     [esp+20h], eax
.text:00411B65
.text:00411B65 loc_411B65:                             ; CODE XREF: .text:00411B3F↑j
.text:00411B65                 test    edi, edi
.text:00411B67                 jz      short loc_411B74
.text:00411B69                 mov     [esp], edi
.text:00411B6C                 call    FreeLibrary
.text:00411B71                 sub     esp, 4
.text:00411B74
.text:00411B74 loc_411B74:                             ; CODE XREF: .text:00411B67↑j
.text:00411B74                 call    sub_4136C0
.text:00411B79                 test    eax, eax
.text:00411B7B                 lea     esi, [esp+28h]
.text:00411B7F                 jz      loc_411FB0
.text:00411B85                 call    sub_4136C0
.text:00411B8A                 test    eax, eax
.text:00411B8C                 jz      short loc_411B9C
.text:00411B8E                 call    sub_413610
.text:00411B93                 cmp     eax, 0Bh
.text:00411B96                 jle     loc_411F84
.text:00411B9C
.text:00411B9C loc_411B9C:                             ; CODE XREF: .text:00411B8C↑j
.text:00411B9C                 cld
.text:00411B9D                 xor     eax, eax
.text:00411B9F                 lea     ebx, [esp+60h]
.text:00411BA3                 mov     ecx, 7
.text:00411BA8                 mov     edi, ebx
.text:00411BAA                 rep stosd
.text:00411BAC                 mov     dword ptr [esp+18h], 0
.text:00411BB4                 mov     dword ptr [esp+14h], 4000000h
.text:00411BBC                 mov     dword ptr [esp+10h], 0
.text:00411BC4                 mov     dword ptr [esp+0Ch], 0
.text:00411BCC                 mov     dword ptr [esp+8], 0
.text:00411BD4                 mov     dword ptr [esp+4], 0
.text:00411BDC                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:00411BE3                 call    CreateFileA
.text:00411BE8                 sub     esp, 1Ch
.text:00411BEB                 mov     edi, eax
.text:00411BED                 cmp     eax, 0FFFFFFFFh
.text:00411BF0                 jz      short loc_411C70
.text:00411BF2                 mov     [esp+10h], ebx
.text:00411BF6                 lea     edx, [esp+80h]
.text:00411BFD                 lea     ecx, [esp+24h]
.text:00411C01                 mov     [esp+70h], edx
.text:00411C05                 mov     [esp+18h], ecx
.text:00411C09                 mov     [esp+8], ebx
.text:00411C0D                 mov     dword ptr [esp+6Ch], 7303h
.text:00411C15                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:00411C1D                 mov     [esp+64h], ebp
.text:00411C21                 mov     dword ptr [esp+78h], 1
.text:00411C29                 mov     dword ptr [esp+1Ch], 0
.text:00411C31                 mov     dword ptr [esp+14h], 1Ch
.text:00411C39                 mov     dword ptr [esp+0Ch], 1Ch
.text:00411C41                 mov     dword ptr [esp+4], 6
.text:00411C49                 mov     [esp], eax
.text:00411C4C                 call    DeviceIoControl
.text:00411C51                 sub     esp, 20h
.text:00411C54                 mov     ebx, eax
.text:00411C56                 mov     [esp], edi
.text:00411C59                 call    CloseHandle
.text:00411C5E                 sub     esp, 4
.text:00411C61                 test    ebx, ebx
.text:00411C63                 jz      short loc_411C70
.text:00411C65                 test    byte ptr [esp+78h], 1
.text:00411C6A                 jz      loc_411F50
.text:00411C70
.text:00411C70 loc_411C70:                             ; CODE XREF: .text:00411BF0↑j
.text:00411C70                                         ; .text:00411C63↑j
.text:00411C70                 call    sub_412BE0
.text:00411C75                 mov     edi, eax
.text:00411C77                 call    _errno
.text:00411C7C                 mov     [eax], edi
.text:00411C7E                 xor     eax, eax
.text:00411C80
.text:00411C80 loc_411C80:                             ; CODE XREF: .text:00411F7F↓j
.text:00411C80                                         ; .text:00411FAB↓j
.text:00411C80                 test    eax, eax
.text:00411C82                 jnz     short loc_411CA4
.text:00411C84                 mov     dword ptr [esp+34h], 1
.text:00411C8C                 mov     dword ptr [esp+30h], 200h
.text:00411C94                 mov     dword ptr [esp+2Ch], 0
.text:00411C9C                 mov     dword ptr [esp+28h], 0
.text:00411CA4
.text:00411CA4 loc_411CA4:                             ; CODE XREF: .text:00411C82↑j
.text:00411CA4                 mov     edx, [esp+30h]
.text:00411CA8                 mov     edi, [esp+34h]
.text:00411CAC                 mov     ecx, [esp+20h]
.text:00411CB0                 imul    edi, edx
.text:00411CB3                 test    ecx, ecx
.text:00411CB5                 jnz     short loc_411CDD
.text:00411CB7                 mov     eax, [esp+28h]
.text:00411CBB                 mul     edi
.text:00411CBD                 mov     esi, eax
.text:00411CBF                 mov     eax, [esp+2Ch]
.text:00411CC3                 mov     [esp+44h], edx
.text:00411CC7                 mov     [esp+40h], esi
.text:00411CCB                 mul     edi
.text:00411CCD                 mov     [esp+48h], eax
.text:00411CD1                 mov     [esp+4Ch], edx
.text:00411CD5                 mov     [esp+38h], eax
.text:00411CD9                 mov     [esp+3Ch], edx
.text:00411CDD
.text:00411CDD loc_411CDD:                             ; CODE XREF: .text:00411CB5↑j
.text:00411CDD                 mov     ebx, [esp+5Ch]
.text:00411CE1                 lea     edx, [esp+0B0h]
.text:00411CE8                 mov     ecx, [esp+8D4h]
.text:00411CEF                 mov     [ecx+48h], ebx
.text:00411CF2                 mov     dword ptr [esp+4], offset loc_411A58
.text:00411CFA                 mov     [esp], edx
.text:00411CFD                 call    _stricmp
.text:00411D02                 test    eax, eax
.text:00411D04                 jnz     loc_411EC0
.text:00411D0A                 mov     esi, [esp+8D4h]
.text:00411D11                 mov     dword ptr [esi], 5346544Eh
.text:00411D17
.text:00411D17 loc_411D17:                             ; CODE XREF: .text:00411EE8↓j
.text:00411D17                                         ; .text:00411F15↓j ...
.text:00411D17                 mov     ebx, [esp+30h]
.text:00411D1B                 mov     esi, [esp+8D4h]
.text:00411D22                 mov     [esi+4], ebx
.text:00411D25                 mov     [esi+8], ebx
.text:00411D28                 mov     ebx, [esi+8]
.text:00411D2B                 mov     [esi+0Ch], edi
.text:00411D2E                 mov     ecx, [esp+44h]
.text:00411D32                 xor     esi, esi
.text:00411D34                 mov     [esp+8], ebx
.text:00411D38                 mov     edx, [esp+40h]
.text:00411D3C                 mov     [esp+0Ch], esi
.text:00411D40                 mov     [esp+4], ecx
.text:00411D44                 mov     [esp], edx
.text:00411D47                 call    sub_417E90
.text:00411D4C                 mov     ecx, [esp+8D4h]
.text:00411D53                 mov     [ecx+10h], eax
.text:00411D56                 mov     [ecx+14h], edx
.text:00411D59                 mov     ecx, [esp+4Ch]
.text:00411D5D                 mov     [esp+8], ebx
.text:00411D61                 mov     edx, [esp+48h]
.text:00411D65                 mov     [esp+0Ch], esi
.text:00411D69                 mov     [esp+4], ecx
.text:00411D6D                 mov     [esp], edx
.text:00411D70                 call    sub_417E90
.text:00411D75                 mov     ecx, [esp+8D4h]
.text:00411D7C                 mov     [ecx+18h], eax
.text:00411D7F                 mov     [ecx+1Ch], edx
.text:00411D82                 mov     ecx, [esp+38h]
.text:00411D86                 mov     [esp+8], ebx
.text:00411D8A                 mov     ebx, [esp+3Ch]
.text:00411D8E                 mov     [esp+0Ch], esi
.text:00411D92                 mov     [esp], ecx
.text:00411D95                 mov     [esp+4], ebx
.text:00411D99                 call    sub_417E90
.text:00411D9E                 mov     esi, [esp+8D4h]
.text:00411DA5                 mov     [esi+20h], eax
.text:00411DA8                 mov     [esi+24h], edx
.text:00411DAB                 mov     ecx, [esp+44h]
.text:00411DAF                 mov     esi, edi
.text:00411DB1                 mov     [esp+8], esi
.text:00411DB5                 mov     edx, [esp+40h]
.text:00411DB9                 xor     edi, edi
.text:00411DBB                 mov     [esp+0Ch], edi
.text:00411DBF                 mov     [esp+4], ecx
.text:00411DC3                 mov     [esp], edx
.text:00411DC6                 call    sub_417E90
.text:00411DCB                 mov     ebx, [esp+8D4h]
.text:00411DD2                 mov     [ebx+28h], eax
.text:00411DD5                 mov     [ebx+2Ch], edx
.text:00411DD8                 mov     ecx, [esp+4Ch]
.text:00411DDC                 mov     [esp+8], esi
.text:00411DE0                 mov     edx, [esp+48h]
.text:00411DE4                 mov     [esp+0Ch], edi
.text:00411DE8                 mov     [esp+4], ecx
.text:00411DEC                 mov     [esp], edx
.text:00411DEF                 call    sub_417E90
.text:00411DF4                 mov     ebx, [esp+8D4h]
.text:00411DFB                 mov     [ebx+30h], eax
.text:00411DFE                 mov     [ebx+34h], edx
.text:00411E01                 mov     ecx, [esp+3Ch]
.text:00411E05                 mov     [esp+8], esi
.text:00411E09                 mov     edx, [esp+38h]
.text:00411E0D                 mov     [esp+0Ch], edi
.text:00411E11                 mov     [esp+4], ecx
.text:00411E15                 mov     [esp], edx
.text:00411E18                 call    sub_417E90
.text:00411E1D                 mov     edx, [esp+8D4h]
.text:00411E24                 lea     ecx, [esp+0B0h]
.text:00411E2B                 mov     [edx+38h], eax
.text:00411E2E                 mov     esi, [esp+58h]
.text:00411E32                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:00411E39                 mov     [edx+110h], esi
.text:00411E3F                 mov     esi, edx
.text:00411E41                 add     esi, 4Ch ; 'L'
.text:00411E44                 movzx   ebx, word ptr [esp+56h]
.text:00411E49                 movzx   edi, word ptr [esp+54h]
.text:00411E4E                 mov     [edx+3Ch], ebx
.text:00411E51                 lea     ebx, [esp+4B0h]
.text:00411E58                 mov     [edx+40h], edi
.text:00411E5B                 mov     [esp+4], ecx
.text:00411E5F                 mov     dword ptr [esp+8], 10h
.text:00411E67                 mov     [esp], esi
.text:00411E6A                 call    strncpy
.text:00411E6F                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00411E77                 mov     edi, [esp+8D4h]
.text:00411E7E                 mov     [esp+4], ebx
.text:00411E82                 add     edi, 5Ch ; '\'
.text:00411E85                 mov     [esp], edi
.text:00411E88                 call    strncpy
.text:00411E8D                 mov     [esp+4], ebp
.text:00411E91                 mov     ebp, [esp+8D4h]
.text:00411E98                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00411EA0                 add     ebp, 0B6h ; '¶'
.text:00411EA6                 mov     [esp], ebp
.text:00411EA9                 call    strncpy
.text:00411EAE                 xor     eax, eax
.text:00411EB0
.text:00411EB0 loc_411EB0:                             ; CODE XREF: .text:00411FEC↓j
.text:00411EB0                 add     esp, 8BCh
.text:00411EB6                 pop     ebx
.text:00411EB7                 pop     esi
.text:00411EB8                 pop     edi
.text:00411EB9                 pop     ebp
.text:00411EBA                 retn
.text:00411EBA ; ---------------------------------------------------------------------------
.text:00411EBB                 align 10h
.text:00411EC0
.text:00411EC0 loc_411EC0:                             ; CODE XREF: .text:00411D04↑j
.text:00411EC0                 mov     dword ptr [esp+4], 411A5Dh
.text:00411EC8                 lea     eax, [esp+0B0h]
.text:00411ECF                 mov     [esp], eax
.text:00411ED2                 call    _stricmp
.text:00411ED7                 test    eax, eax
.text:00411ED9                 jnz     short loc_411EED
.text:00411EDB                 mov     edx, [esp+8D4h]
.text:00411EE2                 mov     dword ptr [edx], 4008h
.text:00411EE8                 jmp     loc_411D17
.text:00411EED ; ---------------------------------------------------------------------------
.text:00411EED
.text:00411EED loc_411EED:                             ; CODE XREF: .text:00411ED9↑j
.text:00411EED                 mov     dword ptr [esp+4], 411A63h
.text:00411EF5                 lea     ecx, [esp+0B0h]
.text:00411EFC                 mov     [esp], ecx
.text:00411EFF                 call    _stricmp
.text:00411F04                 test    eax, eax
.text:00411F06                 jnz     short loc_411F1A
.text:00411F08                 mov     ebx, [esp+8D4h]
.text:00411F0F                 mov     dword ptr [ebx], 4006h
.text:00411F15                 jmp     loc_411D17
.text:00411F1A ; ---------------------------------------------------------------------------
.text:00411F1A
.text:00411F1A loc_411F1A:                             ; CODE XREF: .text:00411F06↑j
.text:00411F1A                 mov     dword ptr [esp+4], 411A67h
.text:00411F22                 lea     eax, [esp+0B0h]
.text:00411F29                 mov     [esp], eax
.text:00411F2C                 call    _stricmp
.text:00411F31                 test    eax, eax
.text:00411F33                 mov     esi, [esp+8D4h]
.text:00411F3A                 setnz   cl
.text:00411F3D                 movzx   edx, cl
.text:00411F40                 dec     edx
.text:00411F41                 and     edx, 4000h
.text:00411F47                 mov     [esi], edx
.text:00411F49                 jmp     loc_411D17
.text:00411F49 ; ---------------------------------------------------------------------------
.text:00411F4E                 align 10h
.text:00411F50
.text:00411F50 loc_411F50:                             ; CODE XREF: .text:00411C6A↑j
.text:00411F50                 mov     edi, [esp+84h]
.text:00411F57                 mov     eax, 1
.text:00411F5C                 mov     edx, [esp+88h]
.text:00411F63                 mov     ecx, [esp+8Ch]
.text:00411F6A                 mov     ebx, [esp+90h]
.text:00411F71                 mov     [esp+34h], edi
.text:00411F75                 mov     [esp+30h], edx
.text:00411F79                 mov     [esp+2Ch], ecx
.text:00411F7D                 mov     [esi], ebx
.text:00411F7F                 jmp     loc_411C80
.text:00411F84 ; ---------------------------------------------------------------------------
.text:00411F84
.text:00411F84 loc_411F84:                             ; CODE XREF: .text:00411B96↑j
.text:00411F84                 mov     [esp+10h], esi
.text:00411F88                 lea     eax, [esp+2Ch]
.text:00411F8C                 lea     esi, [esp+30h]
.text:00411F90                 mov     [esp+0Ch], eax
.text:00411F94                 lea     edi, [esp+34h]
.text:00411F98                 mov     [esp+8], esi
.text:00411F9C                 mov     [esp+4], edi
.text:00411FA0
.text:00411FA0 loc_411FA0:                             ; CODE XREF: .text:00411FCC↓j
.text:00411FA0                 mov     [esp], ebp
.text:00411FA3                 call    GetDiskFreeSpaceA
.text:00411FA8                 sub     esp, 14h
.text:00411FAB                 jmp     loc_411C80
.text:00411FB0 ; ---------------------------------------------------------------------------
.text:00411FB0
.text:00411FB0 loc_411FB0:                             ; CODE XREF: .text:00411B7F↑j
.text:00411FB0                 mov     [esp+10h], esi
.text:00411FB4                 lea     ebx, [esp+2Ch]
.text:00411FB8                 lea     eax, [esp+30h]
.text:00411FBC                 mov     [esp+0Ch], ebx
.text:00411FC0                 lea     esi, [esp+34h]
.text:00411FC4                 mov     [esp+8], eax
.text:00411FC8                 mov     [esp+4], esi
.text:00411FCC                 jmp     short loc_411FA0
.text:00411FCE ; ---------------------------------------------------------------------------
.text:00411FCE
.text:00411FCE loc_411FCE:                             ; CODE XREF: .text:00411B37↑j
.text:00411FCE                 mov     [esp], edi
.text:00411FD1                 call    FreeLibrary
.text:00411FD6                 sub     esp, 4
.text:00411FD9                 call    sub_412BE0
.text:00411FDE                 mov     esi, eax
.text:00411FE0                 call    _errno
.text:00411FE5                 mov     [eax], esi
.text:00411FE7
.text:00411FE7 loc_411FE7:                             ; CODE XREF: .text:00412007↓j
.text:00411FE7                 mov     eax, 0FFFFFFFFh
.text:00411FEC                 jmp     loc_411EB0
.text:00411FF1 ; ---------------------------------------------------------------------------
.text:00411FF1
.text:00411FF1 loc_411FF1:                             ; CODE XREF: .text:00411AB1↑j
.text:00411FF1                 mov     [esp], edi
.text:00411FF4                 call    FreeLibrary
.text:00411FF9                 sub     esp, 4
.text:00411FFC                 call    _errno
.text:00412001                 mov     dword ptr [eax], 2
.text:00412007                 jmp     short loc_411FE7
.text:00412007 ; ---------------------------------------------------------------------------
.text:00412009                 align 10h
.text:00412010
.text:00412010 ; =============== S U B R O U T I N E =======================================
.text:00412010
.text:00412010
.text:00412010 ; int __cdecl sub_412010(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:00412010 sub_412010      proc near               ; CODE XREF: sub_40F7A0+2C7↑p
.text:00412010                                         ; .text:0040FDDA↑p
.text:00412010
.text:00412010 lpFileName      = dword ptr -9Ch
.text:00412010 dwDesiredAccess = dword ptr -98h
.text:00412010 dwShareMode     = dword ptr -94h
.text:00412010 lpSecurityAttributes= dword ptr -90h
.text:00412010 dwCreationDisposition= dword ptr -8Ch
.text:00412010 dwFlagsAndAttributes= dword ptr -88h
.text:00412010 hTemplateFile   = dword ptr -84h
.text:00412010 lpOverlapped    = dword ptr -80h
.text:00412010 BytesReturned   = dword ptr -70h
.text:00412010 InBuffer        = byte ptr -6Ch
.text:00412010 var_68          = dword ptr -68h
.text:00412010 var_64          = dword ptr -64h
.text:00412010 var_60          = dword ptr -60h
.text:00412010 var_5C          = dword ptr -5Ch
.text:00412010 var_54          = dword ptr -54h
.text:00412010 var_4C          = byte ptr -4Ch
.text:00412010 var_48          = dword ptr -48h
.text:00412010 var_44          = dword ptr -44h
.text:00412010 var_40          = dword ptr -40h
.text:00412010 var_3C          = dword ptr -3Ch
.text:00412010 lpRootPathName  = dword ptr -2Ch
.text:00412010 lpSectorsPerCluster= dword ptr -28h
.text:00412010 lpBytesPerSector= dword ptr -24h
.text:00412010 lpNumberOfFreeClusters= dword ptr -20h
.text:00412010 lpTotalNumberOfClusters= dword ptr -1Ch
.text:00412010 var_18          = dword ptr -18h
.text:00412010 var_14          = dword ptr -14h
.text:00412010 var_10          = dword ptr -10h
.text:00412010 var_C           = dword ptr -0Ch
.text:00412010 var_8           = dword ptr -8
.text:00412010 var_4           = dword ptr -4
.text:00412010 arg_0           = dword ptr  4
.text:00412010 arg_4           = dword ptr  8
.text:00412010 arg_8           = dword ptr  0Ch
.text:00412010 arg_C           = dword ptr  10h
.text:00412010 arg_10          = dword ptr  14h
.text:00412010
.text:00412010                 sub     esp, 2Ch
.text:00412013                 mov     edx, [esp+2Ch+arg_0]
.text:00412017                 mov     [esp+2Ch+var_10], ebx
.text:0041201B                 mov     ebx, [esp+2Ch+arg_10]
.text:0041201F                 mov     [esp+2Ch+var_C], esi
.text:00412023                 mov     esi, [esp+2Ch+arg_C]
.text:00412027                 mov     [esp+2Ch+var_8], edi
.text:0041202B                 mov     edi, [esp+2Ch+arg_8]
.text:0041202F                 mov     [esp+2Ch+var_4], ebp
.text:00412033                 mov     ebp, [esp+2Ch+arg_4]
.text:00412037                 mov     [esp+2Ch+var_14], edx
.text:0041203B                 call    sub_4136C0
.text:00412040                 test    eax, eax
.text:00412042                 jz      short loc_412074
.text:00412044                 mov     [esp+2Ch+arg_10], ebx
.text:00412048                 mov     edx, [esp+2Ch+var_14]
.text:0041204C                 mov     ebx, [esp+2Ch+var_10]
.text:00412050                 mov     [esp+2Ch+arg_C], esi
.text:00412054                 mov     esi, [esp+2Ch+var_C]
.text:00412058                 mov     [esp+2Ch+arg_8], edi
.text:0041205C                 mov     edi, [esp+2Ch+var_8]
.text:00412060                 mov     [esp+2Ch+arg_4], ebp
.text:00412064                 mov     ebp, [esp+2Ch+var_4]
.text:00412068                 mov     [esp+2Ch+arg_0], edx
.text:0041206C                 add     esp, 2Ch
.text:0041206F                 jmp     loc_412120
.text:00412074 ; ---------------------------------------------------------------------------
.text:00412074
.text:00412074 loc_412074:                             ; CODE XREF: sub_412010+32↑j
.text:00412074                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:00412078                 mov     ecx, [esp+2Ch+var_14]
.text:0041207C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:00412080                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:00412084                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:00412088                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0041208B                 call    GetDiskFreeSpaceA
.text:00412090                 sub     esp, 14h
.text:00412093                 mov     ebx, [esp+2Ch+var_10]
.text:00412097                 mov     esi, [esp+2Ch+var_C]
.text:0041209B                 mov     edi, [esp+2Ch+var_8]
.text:0041209F                 mov     ebp, [esp+2Ch+var_4]
.text:004120A3                 add     esp, 2Ch
.text:004120A6                 retn
.text:004120A6 ; ---------------------------------------------------------------------------
.text:004120A7                 align 10h
.text:004120B0
.text:004120B0 loc_4120B0:                             ; CODE XREF: .text:004139DD↓p
.text:004120B0                 sub     esp, 1Ch
.text:004120B3                 mov     [esp+1Ch+var_4], esi
.text:004120B7                 mov     esi, [esp+1Ch+arg_0]
.text:004120BB                 mov     [esp+1Ch+var_8], ebx
.text:004120BF                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:004120C2                 call    sub_4115C0
.text:004120C7                 test    eax, eax
.text:004120C9                 mov     ebx, eax
.text:004120CB                 jz      short loc_4120E0
.text:004120CD                 cmp     byte ptr [eax], 0
.text:004120D0                 jz      short loc_4120E0
.text:004120D2                 test    esi, esi
.text:004120D4                 jz      short loc_4120E0
.text:004120D6                 cmp     byte ptr [esi], 0
.text:004120D9                 jnz     short loc_412106
.text:004120DB                 nop
.text:004120DC                 lea     esi, [esi+0]
.text:004120E0
.text:004120E0 loc_4120E0:                             ; CODE XREF: sub_412010+BB↑j
.text:004120E0                                         ; sub_412010+C0↑j ...
.text:004120E0                 call    _errno
.text:004120E5                 mov     dword ptr [eax], 2
.text:004120EB                 mov     esi, 0FFFFFFFFh
.text:004120F0
.text:004120F0 loc_4120F0:                             ; CODE XREF: sub_412010+108↓j
.text:004120F0                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:004120F3                 call    free
.text:004120F8                 mov     eax, esi
.text:004120FA                 mov     ebx, [esp+1Ch+var_8]
.text:004120FE                 mov     esi, [esp+1Ch+var_4]
.text:00412102                 add     esp, 1Ch
.text:00412105                 retn
.text:00412106 ; ---------------------------------------------------------------------------
.text:00412106
.text:00412106 loc_412106:                             ; CODE XREF: sub_412010+C9↑j
.text:00412106                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:00412109                 mov     edx, [esp+1Ch+arg_4]
.text:0041210D                 mov     [esp+1Ch+var_18], edx
.text:00412111                 call    near ptr loc_411A6B+5
.text:00412116                 mov     esi, eax
.text:00412118                 jmp     short loc_4120F0
.text:00412118 ; ---------------------------------------------------------------------------
.text:0041211A                 align 10h
.text:00412120
.text:00412120 loc_412120:                             ; CODE XREF: sub_412010+5F↑j
.text:00412120                 push    ebp
.text:00412121                 push    edi
.text:00412122                 push    esi
.text:00412123                 push    ebx
.text:00412124                 sub     esp, 8Ch
.text:0041212A                 mov     ebp, [esp+9Ch+arg_0]
.text:00412131                 call    sub_4136C0
.text:00412136                 test    eax, eax
.text:00412138                 jz      short loc_412148
.text:0041213A                 call    sub_413610
.text:0041213F                 cmp     eax, 0Bh
.text:00412142                 jle     loc_412270
.text:00412148
.text:00412148 loc_412148:                             ; CODE XREF: sub_412010+128↑j
.text:00412148                 cld
.text:00412149                 xor     eax, eax
.text:0041214B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0041214F                 mov     ecx, 7
.text:00412154                 mov     edi, ebx
.text:00412156                 lea     esi, [esp+9Ch+var_4C]
.text:0041215A                 rep stosd
.text:0041215C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:00412164                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0041216C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:00412174                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0041217C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:00412184                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0041218C                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:00412193                 call    CreateFileA
.text:00412198                 sub     esp, 1Ch
.text:0041219B                 mov     edi, eax
.text:0041219D                 cmp     eax, 0FFFFFFFFh
.text:004121A0                 jz      short loc_412215
.text:004121A2                 mov     [esp+9Ch+var_68], ebp
.text:004121A6                 lea     ebp, [esp+9Ch+BytesReturned]
.text:004121AA                 mov     [esp+9Ch+var_5C], esi
.text:004121AE                 mov     [esp+9Ch+var_60], 7303h
.text:004121B6                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:004121BE                 mov     [esp+9Ch+var_54], 1
.text:004121C6                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:004121CE                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:004121D2                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:004121DA                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:004121DE                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:004121E6                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:004121EA                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:004121F2                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:004121F5                 call    DeviceIoControl
.text:004121FA                 sub     esp, 20h
.text:004121FD                 mov     esi, eax
.text:004121FF                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:00412202                 call    CloseHandle
.text:00412207                 sub     esp, 4
.text:0041220A                 test    esi, esi
.text:0041220C                 jz      short loc_412215
.text:0041220E                 test    byte ptr [esp+9Ch+var_54], 1
.text:00412213                 jz      short loc_412230
.text:00412215
.text:00412215 loc_412215:                             ; CODE XREF: sub_412010+190↑j
.text:00412215                                         ; sub_412010+1FC↑j
.text:00412215                 call    sub_412BE0
.text:0041221A                 mov     edi, eax
.text:0041221C                 call    _errno
.text:00412221                 mov     [eax], edi
.text:00412223                 xor     eax, eax
.text:00412225
.text:00412225 loc_412225:                             ; CODE XREF: sub_412010+25A↓j
.text:00412225                                         ; sub_412010+297↓j
.text:00412225                 add     esp, 8Ch
.text:0041222B                 pop     ebx
.text:0041222C                 pop     esi
.text:0041222D                 pop     edi
.text:0041222E                 pop     ebp
.text:0041222F                 retn
.text:00412230 ; ---------------------------------------------------------------------------
.text:00412230
.text:00412230 loc_412230:                             ; CODE XREF: sub_412010+203↑j
.text:00412230                 mov     edx, [esp+9Ch+var_48]
.text:00412234                 mov     eax, 1
.text:00412239                 mov     ebx, [esp+9Ch+arg_4]
.text:00412240                 mov     ebp, [esp+9Ch+arg_8]
.text:00412247                 mov     ecx, [esp+9Ch+arg_C]
.text:0041224E                 mov     [ebx], edx
.text:00412250                 mov     edi, [esp+9Ch+var_44]
.text:00412254                 mov     ebx, [esp+9Ch+arg_10]
.text:0041225B                 mov     [ebp+0], edi
.text:0041225E                 mov     esi, [esp+9Ch+var_40]
.text:00412262                 mov     [ecx], esi
.text:00412264                 mov     edx, [esp+9Ch+var_3C]
.text:00412268                 mov     [ebx], edx
.text:0041226A                 jmp     short loc_412225
.text:0041226A ; ---------------------------------------------------------------------------
.text:0041226C                 align 10h
.text:00412270
.text:00412270 loc_412270:                             ; CODE XREF: sub_412010+132↑j
.text:00412270                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:00412273                 mov     eax, [esp+9Ch+arg_C]
.text:0041227A                 mov     ecx, [esp+9Ch+arg_10]
.text:00412281                 mov     edx, [esp+9Ch+arg_8]
.text:00412288                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0041228C                 mov     eax, [esp+9Ch+arg_4]
.text:00412293                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:00412297                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0041229B                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0041229F                 call    GetDiskFreeSpaceA
.text:004122A4                 sub     esp, 14h
.text:004122A7                 jmp     loc_412225
.text:004122A7 sub_412010      endp ; sp-analysis failed
.text:004122A7
.text:004122A7 ; ---------------------------------------------------------------------------
.text:004122AC                 align 10h
.text:004122B0
.text:004122B0 ; =============== S U B R O U T I N E =======================================
.text:004122B0
.text:004122B0
.text:004122B0 ; int __cdecl sub_4122B0(LPCSTR, char *, int)
.text:004122B0 sub_4122B0      proc near               ; CODE XREF: sub_411A00+1A↑p
.text:004122B0                                         ; sub_415880+104↓p ...
.text:004122B0
.text:004122B0 var_13C         = dword ptr -13Ch
.text:004122B0 lpString1       = dword ptr -138h
.text:004122B0 var_134         = dword ptr -134h
.text:004122B0 String1         = byte ptr -12Ch
.text:004122B0 var_10          = dword ptr -10h
.text:004122B0 var_C           = dword ptr -0Ch
.text:004122B0 var_8           = dword ptr -8
.text:004122B0 var_4           = dword ptr -4
.text:004122B0 arg_0           = dword ptr  4
.text:004122B0 arg_4           = dword ptr  8
.text:004122B0 arg_8           = dword ptr  0Ch
.text:004122B0
.text:004122B0                 sub     esp, 13Ch
.text:004122B6                 mov     [esp+13Ch+var_10], ebx
.text:004122BD                 mov     ebx, [esp+13Ch+arg_8]
.text:004122C4                 mov     [esp+13Ch+var_C], esi
.text:004122CB                 mov     esi, [esp+13Ch+arg_4]
.text:004122D2                 mov     [esp+13Ch+var_8], edi
.text:004122D9                 mov     edi, [esp+13Ch+arg_0]
.text:004122E0                 mov     [esp+13Ch+var_4], ebp
.text:004122E7                 mov     [esp+13Ch+var_134], ebx ; int
.text:004122EB                 mov     [esp+13Ch+lpString1], esi ; int
.text:004122EF                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:004122F2                 call    sub_410B00
.text:004122F7                 cmp     eax, 0FFFFFFFFh
.text:004122FA                 mov     edx, eax
.text:004122FC                 jz      short loc_41230E
.text:004122FE                 mov     ecx, [ebx]
.text:00412300                 and     ecx, 0F000h
.text:00412306                 cmp     ecx, 0A000h
.text:0041230C                 jz      short loc_412333
.text:0041230E
.text:0041230E loc_41230E:                             ; CODE XREF: sub_4122B0+4C↑j
.text:0041230E                                         ; sub_4122B0+A1↓j ...
.text:0041230E                 mov     ebx, [esp+13Ch+var_10]
.text:00412315                 mov     eax, edx
.text:00412317                 mov     esi, [esp+13Ch+var_C]
.text:0041231E                 mov     edi, [esp+13Ch+var_8]
.text:00412325                 mov     ebp, [esp+13Ch+var_4]
.text:0041232C                 add     esp, 13Ch
.text:00412332                 retn
.text:00412333 ; ---------------------------------------------------------------------------
.text:00412333
.text:00412333 loc_412333:                             ; CODE XREF: sub_4122B0+5C↑j
.text:00412333                 mov     [esp+13Ch+var_134], 104h
.text:0041233B                 lea     ebp, [esp+13Ch+String1]
.text:0041233F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:00412343                 mov     [esp+13Ch+var_13C], esi ; char *
.text:00412346                 call    sub_414800
.text:0041234B                 inc     eax
.text:0041234C                 mov     edx, 0FFFFFFFFh
.text:00412351                 jz      short loc_41230E
.text:00412353                 mov     [esp+13Ch+var_134], ebx ; int
.text:00412357                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0041235B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0041235E                 call    sub_410B00
.text:00412363                 mov     edx, eax
.text:00412365                 jmp     short loc_41230E
.text:00412365 sub_4122B0      endp
.text:00412365
.text:00412365 ; ---------------------------------------------------------------------------
.text:00412367                 align 10h
.text:00412370
.text:00412370 ; =============== S U B R O U T I N E =======================================
.text:00412370
.text:00412370
.text:00412370 ; int __cdecl sub_412370(void *, void *Src, size_t Size, int, int)
.text:00412370 sub_412370      proc near               ; CODE XREF: sub_412370+72↓p
.text:00412370                                         ; sub_412370+96↓p ...
.text:00412370
.text:00412370 var_3C          = dword ptr -3Ch
.text:00412370 var_38          = dword ptr -38h
.text:00412370 var_34          = dword ptr -34h
.text:00412370 var_30          = dword ptr -30h
.text:00412370 var_2C          = dword ptr -2Ch
.text:00412370 var_28          = dword ptr -28h
.text:00412370 var_24          = dword ptr -24h
.text:00412370 var_20          = dword ptr -20h
.text:00412370 var_1C          = dword ptr -1Ch
.text:00412370 var_18          = dword ptr -18h
.text:00412370 var_14          = dword ptr -14h
.text:00412370 arg_0           = dword ptr  4
.text:00412370 Src             = dword ptr  8
.text:00412370 Size            = dword ptr  0Ch
.text:00412370 arg_C           = dword ptr  10h
.text:00412370 arg_10          = dword ptr  14h
.text:00412370
.text:00412370                 push    ebp
.text:00412371                 push    edi
.text:00412372                 push    esi
.text:00412373                 push    ebx
.text:00412374                 sub     esp, 2Ch
.text:00412377                 mov     edx, [esp+3Ch+arg_0]
.text:0041237B                 mov     ebx, [esp+3Ch+Src]
.text:0041237F                 mov     eax, [esp+3Ch+arg_C]
.text:00412383                 mov     edi, [esp+3Ch+Size]
.text:00412387                 mov     [esp+3Ch+var_14], edx
.text:0041238B                 cmp     ebx, 1
.text:0041238E                 mov     edx, [esp+3Ch+arg_10]
.text:00412392                 mov     [esp+3Ch+var_18], eax
.text:00412396                 mov     [esp+3Ch+var_1C], edx
.text:0041239A                 ja      short loc_4123A4
.text:0041239C                 add     esp, 2Ch
.text:0041239F                 pop     ebx
.text:004123A0                 pop     esi
.text:004123A1                 pop     edi
.text:004123A2                 pop     ebp
.text:004123A3                 retn
.text:004123A4 ; ---------------------------------------------------------------------------
.text:004123A4
.text:004123A4 loc_4123A4:                             ; CODE XREF: sub_412370+2A↑j
.text:004123A4                 mov     [esp+3Ch+var_34], edi ; Size
.text:004123A8                 mov     esi, ebx
.text:004123AA                 mov     ebp, [esp+3Ch+var_14]
.text:004123AE                 shr     esi, 1
.text:004123B0                 mov     eax, ebx
.text:004123B2                 mov     ecx, [esp+3Ch+var_1C]
.text:004123B6                 mov     [esp+3Ch+var_38], esi ; Src
.text:004123BA                 mov     edx, esi
.text:004123BC                 sub     eax, esi
.text:004123BE                 mov     [esp+3Ch+var_24], ebp
.text:004123C2                 imul    edx, edi
.text:004123C5                 mov     ebp, [esp+3Ch+var_14]
.text:004123C9                 mov     [esp+3Ch+var_28], eax
.text:004123CD                 mov     eax, [esp+3Ch+var_14]
.text:004123D1                 add     ebp, edx
.text:004123D3                 mov     [esp+3Ch+var_2C], ecx ; int
.text:004123D7                 mov     edx, [esp+3Ch+var_18]
.text:004123DB                 mov     [esp+3Ch+var_3C], eax ; void *
.text:004123DE                 mov     [esp+3Ch+var_30], edx ; int
.text:004123E2                 call    sub_412370
.text:004123E7                 mov     [esp+3Ch+var_34], edi ; Size
.text:004123EB                 mov     ecx, [esp+3Ch+var_1C]
.text:004123EF                 mov     eax, [esp+3Ch+var_18]
.text:004123F3                 mov     [esp+3Ch+var_3C], ebp ; void *
.text:004123F6                 mov     edx, [esp+3Ch+var_28]
.text:004123FA                 mov     [esp+3Ch+var_2C], ecx ; int
.text:004123FE                 mov     [esp+3Ch+var_30], eax ; int
.text:00412402                 mov     [esp+3Ch+var_38], edx ; Src
.text:00412406                 call    sub_412370
.text:0041240B                 mov     ecx, [esp+3Ch+var_1C]
.text:0041240F                 cmp     edi, 4
.text:00412412                 mov     [esp+3Ch+var_20], ecx
.text:00412416                 jz      loc_4124E2
.text:0041241C
.text:0041241C loc_41241C:                             ; CODE XREF: sub_412370+177↓j
.text:0041241C                 test    esi, esi
.text:0041241E                 jnz     short loc_412450
.text:00412420
.text:00412420 loc_412420:                             ; CODE XREF: sub_412370+EA↓j
.text:00412420                                         ; sub_412370+107↓j ...
.text:00412420                 mov     edx, [esp+3Ch+var_28]
.text:00412424                 sub     ebx, edx
.text:00412426                 imul    ebx, edi
.text:00412429                 mov     edi, [esp+3Ch+var_1C]
.text:0041242D                 mov     [esp+3Ch+Size], ebx ; Size
.text:00412431                 mov     ebx, [esp+3Ch+var_14]
.text:00412435                 mov     [esp+3Ch+Src], edi ; Src
.text:00412439                 mov     [esp+3Ch+arg_0], ebx ; void *
.text:0041243D                 add     esp, 2Ch
.text:00412440                 pop     ebx
.text:00412441                 pop     esi
.text:00412442                 pop     edi
.text:00412443                 pop     ebp
.text:00412444                 jmp     memcpy
.text:00412444 ; ---------------------------------------------------------------------------
.text:00412449                 align 10h
.text:00412450
.text:00412450 loc_412450:                             ; CODE XREF: sub_412370+AE↑j
.text:00412450                 mov     eax, [esp+3Ch+var_28]
.text:00412454                 test    eax, eax
.text:00412456                 jnz     short loc_412480
.text:00412458
.text:00412458 loc_412458:                             ; CODE XREF: sub_412370+151↓j
.text:00412458                                         ; sub_412370+18B↓j ...
.text:00412458                 test    esi, esi
.text:0041245A                 jz      short loc_412420
.text:0041245C                 imul    esi, edi
.text:0041245F                 mov     ebp, [esp+3Ch+var_24]
.text:00412463                 mov     [esp+3Ch+var_38], ebp ; Src
.text:00412467                 mov     [esp+3Ch+var_34], esi ; Size
.text:0041246B                 mov     esi, [esp+3Ch+var_20]
.text:0041246F                 mov     [esp+3Ch+var_3C], esi ; void *
.text:00412472                 call    memcpy
.text:00412477                 jmp     short loc_412420
.text:00412477 ; ---------------------------------------------------------------------------
.text:00412479                 align 10h
.text:00412480
.text:00412480 loc_412480:                             ; CODE XREF: sub_412370+E6↑j
.text:00412480                                         ; sub_412370+14F↓j
.text:00412480                 mov     [esp+3Ch+var_38], ebp
.text:00412484                 mov     ecx, [esp+3Ch+var_24]
.text:00412488                 mov     [esp+3Ch+var_3C], ecx
.text:0041248B                 call    [esp+3Ch+var_18]
.text:0041248F                 test    eax, eax
.text:00412491                 jle     short loc_4124C3
.text:00412493                 mov     [esp+3Ch+var_38], ebp
.text:00412497                 mov     ecx, [esp+3Ch+var_20]
.text:0041249B                 add     ebp, edi
.text:0041249D                 mov     [esp+3Ch+var_34], edi
.text:004124A1                 mov     [esp+3Ch+var_3C], ecx
.text:004124A4                 call    sub_4128B0
.text:004124A9                 dec     [esp+3Ch+var_28]
.text:004124AD
.text:004124AD loc_4124AD:                             ; CODE XREF: sub_412370+170↓j
.text:004124AD                 mov     [esp+3Ch+var_20], eax
.text:004124B1                 test    esi, esi
.text:004124B3                 jz      loc_412420
.text:004124B9                 mov     eax, [esp+3Ch+var_28]
.text:004124BD                 test    eax, eax
.text:004124BF                 jnz     short loc_412480
.text:004124C1                 jmp     short loc_412458
.text:004124C3 ; ---------------------------------------------------------------------------
.text:004124C3
.text:004124C3 loc_4124C3:                             ; CODE XREF: sub_412370+121↑j
.text:004124C3                 mov     [esp+3Ch+var_34], edi
.text:004124C7                 mov     eax, [esp+3Ch+var_24]
.text:004124CB                 dec     esi
.text:004124CC                 mov     edx, [esp+3Ch+var_20]
.text:004124D0                 mov     [esp+3Ch+var_38], eax
.text:004124D4                 mov     [esp+3Ch+var_3C], edx
.text:004124D7                 call    sub_4128B0
.text:004124DC                 add     [esp+3Ch+var_24], edi
.text:004124E0                 jmp     short loc_4124AD
.text:004124E2 ; ---------------------------------------------------------------------------
.text:004124E2
.text:004124E2 loc_4124E2:                             ; CODE XREF: sub_412370+A6↑j
.text:004124E2                 test    byte ptr [esp+3Ch+var_14], 3
.text:004124E7                 jnz     loc_41241C
.text:004124ED                 test    esi, esi
.text:004124EF                 jz      loc_412420
.text:004124F5                 mov     ecx, [esp+3Ch+var_28]
.text:004124F9                 test    ecx, ecx
.text:004124FB                 jz      loc_412458
.text:00412501
.text:00412501 loc_412501:                             ; CODE XREF: sub_412370+1C9↓j
.text:00412501                 mov     [esp+3Ch+var_38], ebp
.text:00412505                 mov     edx, [esp+3Ch+var_24]
.text:00412509                 mov     [esp+3Ch+var_3C], edx
.text:0041250C                 call    [esp+3Ch+var_18]
.text:00412510                 test    eax, eax
.text:00412512                 jle     short loc_412540
.text:00412514                 dec     [esp+3Ch+var_28]
.text:00412518                 mov     ecx, [ebp+0]
.text:0041251B                 add     ebp, 4
.text:0041251E                 mov     edx, [esp+3Ch+var_20]
.text:00412522
.text:00412522 loc_412522:                             ; CODE XREF: sub_412370+1E0↓j
.text:00412522                 mov     [edx], ecx
.text:00412524                 add     edx, 4
.text:00412527                 test    esi, esi
.text:00412529                 mov     [esp+3Ch+var_20], edx
.text:0041252D                 jz      loc_412420
.text:00412533                 mov     edx, [esp+3Ch+var_28]
.text:00412537                 test    edx, edx
.text:00412539                 jnz     short loc_412501
.text:0041253B                 jmp     loc_412458
.text:00412540 ; ---------------------------------------------------------------------------
.text:00412540
.text:00412540 loc_412540:                             ; CODE XREF: sub_412370+1A2↑j
.text:00412540                 mov     eax, [esp+3Ch+var_24]
.text:00412544                 dec     esi
.text:00412545                 mov     edx, [esp+3Ch+var_20]
.text:00412549                 add     [esp+3Ch+var_24], 4
.text:0041254E                 mov     ecx, [eax]
.text:00412550                 jmp     short loc_412522
.text:00412550 sub_412370      endp
.text:00412550
.text:00412550 ; ---------------------------------------------------------------------------
.text:00412552                 align 10h
.text:00412560
.text:00412560 ; =============== S U B R O U T I N E =======================================
.text:00412560
.text:00412560
.text:00412560 ; int __cdecl sub_412560(void *Block, void *, size_t, int)
.text:00412560 sub_412560      proc near               ; CODE XREF: sub_404A90+82↑p
.text:00412560
.text:00412560 Size            = dword ptr -2Ch
.text:00412560 Src             = dword ptr -28h
.text:00412560 var_24          = dword ptr -24h
.text:00412560 var_20          = dword ptr -20h
.text:00412560 var_1C          = dword ptr -1Ch
.text:00412560 var_18          = dword ptr -18h
.text:00412560 var_14          = dword ptr -14h
.text:00412560 var_10          = dword ptr -10h
.text:00412560 var_C           = dword ptr -0Ch
.text:00412560 var_8           = dword ptr -8
.text:00412560 var_4           = dword ptr -4
.text:00412560 Block           = dword ptr  4
.text:00412560 arg_4           = dword ptr  8
.text:00412560 arg_8           = dword ptr  0Ch
.text:00412560 arg_C           = dword ptr  10h
.text:00412560
.text:00412560                 sub     esp, 2Ch
.text:00412563                 mov     edx, [esp+2Ch+Block]
.text:00412567                 mov     [esp+2Ch+var_8], edi
.text:0041256B                 mov     edi, [esp+2Ch+arg_4]
.text:0041256F                 mov     [esp+2Ch+var_C], esi
.text:00412573                 mov     esi, [esp+2Ch+arg_8]
.text:00412577                 mov     [esp+2Ch+var_10], ebx
.text:0041257B                 mov     ebx, edi
.text:0041257D                 imul    ebx, esi
.text:00412580                 mov     [esp+2Ch+var_4], ebp
.text:00412584                 mov     ebp, [esp+2Ch+arg_C]
.text:00412588                 mov     [esp+2Ch+var_14], edx
.text:0041258C                 cmp     ebx, 3FFh
.text:00412592                 jbe     loc_4126A5
.text:00412598                 mov     ecx, ds:dword_41B4D0
.text:0041259E                 test    ecx, ecx
.text:004125A0                 jz      loc_412650
.text:004125A6
.text:004125A6 loc_4125A6:                             ; CODE XREF: sub_412560+12E↓j
.text:004125A6                 xor     edx, edx
.text:004125A8                 mov     eax, ebx
.text:004125AA                 div     ds:dword_41B4E0
.text:004125B0                 cmp     eax, ecx
.text:004125B2                 jbe     short loc_4125E0
.text:004125B4
.text:004125B4 loc_4125B4:                             ; CODE XREF: sub_412560+E7↓j
.text:004125B4                 mov     [esp+2Ch+arg_8], esi
.text:004125B8                 mov     ebx, [esp+2Ch+var_10]
.text:004125BC                 mov     esi, [esp+2Ch+var_14]
.text:004125C0                 mov     [esp+2Ch+arg_C], ebp
.text:004125C4                 mov     ebp, [esp+2Ch+var_4]
.text:004125C8                 mov     [esp+2Ch+arg_4], edi
.text:004125CC                 mov     edi, [esp+2Ch+var_8]
.text:004125D0                 mov     [esp+2Ch+Block], esi
.text:004125D4                 mov     esi, [esp+2Ch+var_C]
.text:004125D8                 add     esp, 2Ch
.text:004125DB                 jmp     __quicksort
.text:004125E0 ; ---------------------------------------------------------------------------
.text:004125E0
.text:004125E0 loc_4125E0:                             ; CODE XREF: sub_412560+52↑j
.text:004125E0                 call    _errno
.text:004125E5                 mov     edx, [eax]
.text:004125E7                 mov     [esp+2Ch+Size], ebx ; Size
.text:004125EA                 mov     [esp+2Ch+var_18], edx
.text:004125EE                 call    malloc
.text:004125F3                 test    eax, eax
.text:004125F5                 mov     ebx, eax
.text:004125F7                 jz      short loc_41263C
.text:004125F9                 call    _errno
.text:004125FE                 mov     ecx, [esp+2Ch+var_18]
.text:00412602                 mov     [eax], ecx
.text:00412604                 mov     [esp+2Ch+Src], edi ; Src
.text:00412608                 mov     edi, [esp+2Ch+var_14]
.text:0041260C                 mov     [esp+2Ch+var_1C], ebx ; int
.text:00412610                 mov     [esp+2Ch+var_20], ebp ; int
.text:00412614                 mov     [esp+2Ch+var_24], esi ; Size
.text:00412618                 mov     [esp+2Ch+Size], edi ; void *
.text:0041261B                 call    sub_412370
.text:00412620                 mov     [esp+2Ch+Block], ebx ; Block
.text:00412624                 mov     esi, [esp+2Ch+var_C]
.text:00412628                 mov     ebx, [esp+2Ch+var_10]
.text:0041262C                 mov     edi, [esp+2Ch+var_8]
.text:00412630                 mov     ebp, [esp+2Ch+var_4]
.text:00412634                 add     esp, 2Ch
.text:00412637                 jmp     free
.text:0041263C ; ---------------------------------------------------------------------------
.text:0041263C
.text:0041263C loc_41263C:                             ; CODE XREF: sub_412560+97↑j
.text:0041263C                 call    _errno
.text:00412641                 mov     ebx, [esp+2Ch+var_18]
.text:00412645                 mov     [eax], ebx
.text:00412647                 jmp     loc_4125B4
.text:00412647 ; ---------------------------------------------------------------------------
.text:0041264C                 align 10h
.text:00412650
.text:00412650 loc_412650:                             ; CODE XREF: sub_412560+40↑j
.text:00412650                 mov     [esp+2Ch+Size], 55h ; 'U'
.text:00412657                 call    _sysconf
.text:0041265C                 mov     ds:dword_41B4D0, eax
.text:00412661                 mov     edx, eax
.text:00412663                 inc     edx
.text:00412664                 jz      short loc_412698
.text:00412666
.text:00412666 loc_412666:                             ; CODE XREF: sub_412560+143↓j
.text:00412666                 mov     eax, ds:dword_41B4D0
.text:0041266B                 test    eax, eax
.text:0041266D                 js      short loc_412693
.text:0041266F
.text:0041266F loc_41266F:                             ; CODE XREF: sub_412560+136↓j
.text:0041266F                 mov     [esp+2Ch+Size], 1Eh
.text:00412676                 sar     eax, 2
.text:00412679                 mov     ds:dword_41B4D0, eax
.text:0041267E                 call    _sysconf
.text:00412683                 mov     ds:dword_41B4E0, eax
.text:00412688                 mov     ecx, ds:dword_41B4D0
.text:0041268E                 jmp     loc_4125A6
.text:00412693 ; ---------------------------------------------------------------------------
.text:00412693
.text:00412693 loc_412693:                             ; CODE XREF: sub_412560+10D↑j
.text:00412693                 add     eax, 3
.text:00412696                 jmp     short loc_41266F
.text:00412698 ; ---------------------------------------------------------------------------
.text:00412698
.text:00412698 loc_412698:                             ; CODE XREF: sub_412560+104↑j
.text:00412698                 mov     ecx, 7FFFFFFFh
.text:0041269D                 mov     ds:dword_41B4D0, ecx
.text:004126A3                 jmp     short loc_412666
.text:004126A5 ; ---------------------------------------------------------------------------
.text:004126A5
.text:004126A5 loc_4126A5:                             ; CODE XREF: sub_412560+32↑j
.text:004126A5                 mov     [esp+2Ch+Size], ebx ; Size
.text:004126A8                 call    malloc
.text:004126AD                 mov     [esp+2Ch+var_1C], eax ; int
.text:004126B1                 mov     eax, [esp+2Ch+var_14]
.text:004126B5                 mov     [esp+2Ch+var_20], ebp ; int
.text:004126B9                 mov     [esp+2Ch+var_24], esi ; Size
.text:004126BD                 mov     [esp+2Ch+Src], edi ; Src
.text:004126C1                 mov     [esp+2Ch+Size], eax ; void *
.text:004126C4                 call    sub_412370
.text:004126C9                 mov     ebx, [esp+2Ch+var_10]
.text:004126CD                 mov     esi, [esp+2Ch+var_C]
.text:004126D1                 mov     edi, [esp+2Ch+var_8]
.text:004126D5                 mov     ebp, [esp+2Ch+var_4]
.text:004126D9                 add     esp, 2Ch
.text:004126DC                 retn
.text:004126DC sub_412560      endp
.text:004126DC
.text:004126DC ; ---------------------------------------------------------------------------
.text:004126DD                 align 10h
.text:004126E0
.text:004126E0 ; =============== S U B R O U T I N E =======================================
.text:004126E0
.text:004126E0
.text:004126E0 ; int __cdecl sub_4126E0(void *)
.text:004126E0 sub_4126E0      proc near               ; CODE XREF: sub_4042E0+3BC↑p
.text:004126E0                                         ; sub_4042E0+40D↑p ...
.text:004126E0
.text:004126E0 Block           = dword ptr -0Ch
.text:004126E0 var_4           = dword ptr -4
.text:004126E0 arg_0           = dword ptr  4
.text:004126E0
.text:004126E0                 sub     esp, 0Ch
.text:004126E3                 mov     [esp+0Ch+var_4], ebx
.text:004126E7                 mov     ebx, [esp+0Ch+arg_0]
.text:004126EB                 test    ebx, ebx
.text:004126ED                 jz      short loc_41272B
.text:004126EF                 cmp     dword ptr [ebx], 0FFFFFFFFh
.text:004126F2                 jz      short loc_412719
.text:004126F4                 mov     [esp+0Ch+Block], ebx
.text:004126F7                 call    sub_415030
.text:004126FC                 mov     edx, [ebx+4]
.text:004126FF                 mov     [esp+0Ch+Block], edx ; Block
.text:00412702                 call    free
.text:00412707                 mov     [esp+0Ch+Block], ebx ; Block
.text:0041270A                 call    free
.text:0041270F                 xor     eax, eax
.text:00412711
.text:00412711 loc_412711:                             ; CODE XREF: sub_4126E0+49↓j
.text:00412711                 mov     ebx, [esp+0Ch+var_4]
.text:00412715                 add     esp, 0Ch
.text:00412718                 retn
.text:00412719 ; ---------------------------------------------------------------------------
.text:00412719
.text:00412719 loc_412719:                             ; CODE XREF: sub_4126E0+12↑j
.text:00412719                 call    _errno
.text:0041271E                 mov     dword ptr [eax], 9
.text:00412724
.text:00412724 loc_412724:                             ; CODE XREF: sub_4126E0+56↓j
.text:00412724                 mov     eax, 0FFFFFFFFh
.text:00412729                 jmp     short loc_412711
.text:0041272B ; ---------------------------------------------------------------------------
.text:0041272B
.text:0041272B loc_41272B:                             ; CODE XREF: sub_4126E0+D↑j
.text:0041272B                 call    _errno
.text:00412730                 mov     dword ptr [eax], 16h
.text:00412736                 jmp     short loc_412724
.text:00412736 sub_4126E0      endp
.text:00412736
.text:00412736 ; ---------------------------------------------------------------------------
.text:00412738                 align 10h
.text:00412740 ; const char asc_412740[2]
.text:00412740 asc_412740      db '\',0                ; DATA XREF: sub_412750+D2↓o
.text:00412742                 align 10h
.text:00412750
.text:00412750 ; =============== S U B R O U T I N E =======================================
.text:00412750
.text:00412750
.text:00412750 ; int __cdecl sub_412750(LPCSTR)
.text:00412750 sub_412750      proc near               ; CODE XREF: sub_4042E0+18↑p
.text:00412750
.text:00412750 lpFileName      = dword ptr -13Ch
.text:00412750 Source          = dword ptr -138h
.text:00412750 Destination     = byte ptr -12Ch
.text:00412750 var_10          = dword ptr -10h
.text:00412750 var_C           = dword ptr -0Ch
.text:00412750 var_8           = dword ptr -8
.text:00412750 var_4           = dword ptr -4
.text:00412750 arg_0           = dword ptr  4
.text:00412750
.text:00412750                 sub     esp, 13Ch
.text:00412756                 mov     [esp+13Ch+var_C], esi
.text:0041275D                 mov     esi, [esp+13Ch+arg_0]
.text:00412764                 mov     [esp+13Ch+var_10], ebx
.text:0041276B                 mov     [esp+13Ch+var_8], edi
.text:00412772                 test    esi, esi
.text:00412774                 mov     [esp+13Ch+var_4], ebp
.text:0041277B                 jz      short loc_412782
.text:0041277D                 cmp     byte ptr [esi], 0
.text:00412780                 jnz     short loc_4127B2
.text:00412782
.text:00412782 loc_412782:                             ; CODE XREF: sub_412750+2B↑j
.text:00412782                 call    _errno
.text:00412787                 mov     dword ptr [eax], 2
.text:0041278D
.text:0041278D loc_41278D:                             ; CODE XREF: sub_412750+139↓j
.text:0041278D                                         ; sub_412750+14C↓j
.text:0041278D                 xor     eax, eax
.text:0041278F
.text:0041278F loc_41278F:                             ; CODE XREF: sub_412750+90↓j
.text:0041278F                                         ; sub_412750+A4↓j ...
.text:0041278F                 mov     ebx, [esp+13Ch+var_10]
.text:00412796                 mov     esi, [esp+13Ch+var_C]
.text:0041279D                 mov     edi, [esp+13Ch+var_8]
.text:004127A4                 mov     ebp, [esp+13Ch+var_4]
.text:004127AB                 add     esp, 13Ch
.text:004127B1                 retn
.text:004127B2 ; ---------------------------------------------------------------------------
.text:004127B2
.text:004127B2 loc_4127B2:                             ; CODE XREF: sub_412750+30↑j
.text:004127B2                 mov     [esp+13Ch+lpFileName], esi ; lpFileName
.text:004127B5                 call    GetFileAttributesA
.text:004127BA                 sub     esp, 4
.text:004127BD                 cmp     eax, 0FFFFFFFFh
.text:004127C0                 jz      loc_41288E
.text:004127C6                 test    al, 10h
.text:004127C8                 jz      loc_41287E
.text:004127CE                 mov     [esp+13Ch+lpFileName], 18h ; Size
.text:004127D5                 call    malloc
.text:004127DA                 mov     ebx, eax
.text:004127DC                 xor     eax, eax
.text:004127DE                 test    ebx, ebx
.text:004127E0                 jz      short loc_41278F
.text:004127E2                 mov     [esp+13Ch+lpFileName], 118h ; Size
.text:004127E9                 call    malloc
.text:004127EE                 mov     edi, eax
.text:004127F0                 xor     eax, eax
.text:004127F2                 test    edi, edi
.text:004127F4                 jz      short loc_41278F
.text:004127F6                 mov     [esp+13Ch+Source], esi ; Source
.text:004127FA                 lea     ebp, [esp+13Ch+Destination]
.text:004127FE                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:00412801                 call    strcpy
.text:00412806                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:00412809                 call    strlen
.text:0041280E                 cmp     byte ptr [eax+esi], 2Fh ; '/'
.text:00412812                 jz      short loc_412840
.text:00412814                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:00412817                 call    strlen
.text:0041281C                 cmp     byte ptr [eax+esi], 5Ch ; '\'
.text:00412820                 jz      short loc_412840
.text:00412822                 mov     [esp+13Ch+Source], offset asc_412740 ; "\\"
.text:0041282A                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:0041282D                 call    strcat
.text:00412832                 lea     esi, [esi+0]
.text:00412839                 lea     edi, [edi+0]
.text:00412840
.text:00412840 loc_412840:                             ; CODE XREF: sub_412750+C2↑j
.text:00412840                                         ; sub_412750+D0↑j
.text:00412840                 mov     [esp+13Ch+lpFileName], esi ; LPCSTR
.text:00412843                 call    sub_412C30
.text:00412848                 mov     [esp+13Ch+lpFileName], eax
.text:0041284B                 call    sub_410FA0
.text:00412850                 mov     [edi], eax
.text:00412852                 mov     eax, ebx
.text:00412854                 mov     [ebx+4], edi
.text:00412857                 mov     dword ptr [ebx], 0FFFFFFFFh
.text:0041285D                 mov     dword ptr [ebx+8], 118h
.text:00412864                 mov     dword ptr [ebx+0Ch], 118h
.text:0041286B                 mov     dword ptr [ebx+10h], 8
.text:00412872                 mov     dword ptr [ebx+14h], 1
.text:00412879                 jmp     loc_41278F
.text:0041287E ; ---------------------------------------------------------------------------
.text:0041287E
.text:0041287E loc_41287E:                             ; CODE XREF: sub_412750+78↑j
.text:0041287E                 call    _errno
.text:00412883                 mov     dword ptr [eax], 14h
.text:00412889                 jmp     loc_41278D
.text:0041288E ; ---------------------------------------------------------------------------
.text:0041288E
.text:0041288E loc_41288E:                             ; CODE XREF: sub_412750+70↑j
.text:0041288E                 call    sub_412BE0
.text:00412893                 mov     esi, eax
.text:00412895                 call    _errno
.text:0041289A                 mov     [eax], esi
.text:0041289C                 jmp     loc_41278D
.text:0041289C sub_412750      endp
.text:0041289C
.text:0041289C ; ---------------------------------------------------------------------------
.text:004128A1                 align 10h
.text:004128B0
.text:004128B0 ; =============== S U B R O U T I N E =======================================
.text:004128B0
.text:004128B0
.text:004128B0 sub_4128B0      proc near               ; CODE XREF: sub_40BC50+DB↑p
.text:004128B0                                         ; sub_40BC50+150↑p ...
.text:004128B0
.text:004128B0 var_1C          = dword ptr -1Ch
.text:004128B0 var_18          = dword ptr -18h
.text:004128B0 var_14          = dword ptr -14h
.text:004128B0 arg_0           = dword ptr  4
.text:004128B0 arg_4           = dword ptr  8
.text:004128B0 arg_8           = dword ptr  0Ch
.text:004128B0
.text:004128B0                 push    edi
.text:004128B1                 push    esi
.text:004128B2                 push    ebx
.text:004128B3                 sub     esp, 10h
.text:004128B6                 mov     edi, [esp+1Ch+arg_8]
.text:004128BA                 mov     esi, [esp+1Ch+arg_0]
.text:004128BE                 mov     ebx, [esp+1Ch+arg_4]
.text:004128C2                 cmp     edi, 0Fh
.text:004128C5                 jbe     short loc_412910
.text:004128C7                 mov     ecx, esi
.text:004128C9                 neg     ecx
.text:004128CB                 and     ecx, 3
.text:004128CE                 sub     edi, ecx
.text:004128D0                 mov     edx, ecx
.text:004128D2                 test    ecx, ecx
.text:004128D4                 jz      short loc_4128EA
.text:004128D6                 lea     esi, [esi+0]
.text:004128D9                 lea     edi, [edi+0]
.text:004128E0
.text:004128E0 loc_4128E0:                             ; CODE XREF: sub_4128B0+38↓j
.text:004128E0                 movzx   ecx, byte ptr [ebx]
.text:004128E3                 inc     ebx
.text:004128E4                 mov     [esi], cl
.text:004128E6                 inc     esi
.text:004128E7                 dec     edx
.text:004128E8                 jnz     short loc_4128E0
.text:004128EA
.text:004128EA loc_4128EA:                             ; CODE XREF: sub_4128B0+24↑j
.text:004128EA                 test    bl, 3
.text:004128ED                 jnz     short loc_412933
.text:004128EF                 mov     [esp+1Ch+var_18], ebx
.text:004128F3                 mov     edx, edi
.text:004128F5                 shr     edx, 2
.text:004128F8                 mov     [esp+1Ch+var_14], edx
.text:004128FC                 mov     [esp+1Ch+var_1C], esi
.text:004128FF                 call    sub_415090
.text:00412904
.text:00412904 loc_412904:                             ; CODE XREF: sub_4128B0+98↓j
.text:00412904                 mov     edx, edi
.text:00412906                 and     edx, 0FFFFFFFCh
.text:00412909                 and     edi, 3
.text:0041290C                 add     ebx, edx
.text:0041290E                 add     esi, edx
.text:00412910
.text:00412910 loc_412910:                             ; CODE XREF: sub_4128B0+15↑j
.text:00412910                 test    edi, edi
.text:00412912                 mov     edx, edi
.text:00412914                 jz      short loc_41292A
.text:00412916                 lea     esi, [esi+0]
.text:00412919                 lea     edi, [edi+0]
.text:00412920
.text:00412920 loc_412920:                             ; CODE XREF: sub_4128B0+78↓j
.text:00412920                 movzx   ecx, byte ptr [ebx]
.text:00412923                 inc     ebx
.text:00412924                 mov     [esi], cl
.text:00412926                 inc     esi
.text:00412927                 dec     edx
.text:00412928                 jnz     short loc_412920
.text:0041292A
.text:0041292A loc_41292A:                             ; CODE XREF: sub_4128B0+64↑j
.text:0041292A                 add     esp, 10h
.text:0041292D                 mov     eax, esi
.text:0041292F                 pop     ebx
.text:00412930                 pop     esi
.text:00412931                 pop     edi
.text:00412932                 retn
.text:00412933 ; ---------------------------------------------------------------------------
.text:00412933
.text:00412933 loc_412933:                             ; CODE XREF: sub_4128B0+3D↑j
.text:00412933                 mov     [esp+1Ch+var_18], ebx
.text:00412937                 mov     ecx, edi
.text:00412939                 shr     ecx, 2
.text:0041293C                 mov     [esp+1Ch+var_14], ecx
.text:00412940                 mov     [esp+1Ch+var_1C], esi
.text:00412943                 call    sub_415190
.text:00412948                 jmp     short loc_412904
.text:00412948 sub_4128B0      endp
.text:00412948
.text:00412948 ; ---------------------------------------------------------------------------
.text:0041294A                 align 10h
.text:00412950
.text:00412950 ; =============== S U B R O U T I N E =======================================
.text:00412950
.text:00412950 ; Attributes: info_from_lumina
.text:00412950
.text:00412950 ___get_errno    proc near               ; CODE XREF: sub_412BE0+B↓p
.text:00412950
.text:00412950 arg_0           = dword ptr  4
.text:00412950
.text:00412950                 mov     eax, [esp+arg_0]
.text:00412954                 cmp     eax, 53h ; 'S'
.text:00412957                 jg      loc_412A50
.text:0041295D                 cmp     eax, 52h ; 'R'
.text:00412960                 jge     short loc_4129B2
.text:00412962                 cmp     eax, 0Fh
.text:00412965                 jz      short loc_412980
.text:00412967                 cmp     eax, 0Fh
.text:0041296A                 jg      short loc_4129E0
.text:0041296C                 cmp     eax, 9
.text:0041296F                 jg      short loc_4129C0
.text:00412971                 cmp     eax, 7
.text:00412974                 jge     short loc_4129B9
.text:00412976                 cmp     eax, 3
.text:00412979                 jg      short loc_41299A
.text:0041297B                 cmp     eax, 2
.text:0041297E                 jl      short loc_412993
.text:00412980
.text:00412980 loc_412980:                             ; CODE XREF: ___get_errno+15↑j
.text:00412980                                         ; ___get_errno+9D↓j ...
.text:00412980                 mov     edx, 2
.text:00412985                 lea     esi, [esi+0]
.text:00412989                 lea     edi, [edi+0]
.text:00412990
.text:00412990 loc_412990:                             ; CODE XREF: ___get_errno+48↓j
.text:00412990                                         ; ___get_errno+59↓j ...
.text:00412990                 mov     eax, edx
.text:00412992                 retn
.text:00412993 ; ---------------------------------------------------------------------------
.text:00412993
.text:00412993 loc_412993:                             ; CODE XREF: ___get_errno+2E↑j
.text:00412993                                         ; ___get_errno+78↓j ...
.text:00412993                 mov     edx, 16h
.text:00412998                 jmp     short loc_412990
.text:0041299A ; ---------------------------------------------------------------------------
.text:0041299A
.text:0041299A loc_41299A:                             ; CODE XREF: ___get_errno+29↑j
.text:0041299A                 cmp     eax, 5
.text:0041299D                 jz      short loc_4129B2
.text:0041299F                 cmp     eax, 5
.text:004129A2                 jg      short loc_4129AB
.text:004129A4                 mov     edx, 18h
.text:004129A9                 jmp     short loc_412990
.text:004129AB ; ---------------------------------------------------------------------------
.text:004129AB
.text:004129AB loc_4129AB:                             ; CODE XREF: ___get_errno+52↑j
.text:004129AB                                         ; ___get_errno+180↓j
.text:004129AB                 mov     edx, 9
.text:004129B0                 jmp     short loc_412990
.text:004129B2 ; ---------------------------------------------------------------------------
.text:004129B2
.text:004129B2 loc_4129B2:                             ; CODE XREF: ___get_errno+10↑j
.text:004129B2                                         ; ___get_errno+4D↑j ...
.text:004129B2                 mov     edx, 0Dh
.text:004129B7                 jmp     short loc_412990
.text:004129B9 ; ---------------------------------------------------------------------------
.text:004129B9
.text:004129B9 loc_4129B9:                             ; CODE XREF: ___get_errno+24↑j
.text:004129B9                                         ; ___get_errno+73↓j ...
.text:004129B9                 mov     edx, 0Ch
.text:004129BE                 jmp     short loc_412990
.text:004129C0 ; ---------------------------------------------------------------------------
.text:004129C0
.text:004129C0 loc_4129C0:                             ; CODE XREF: ___get_errno+1F↑j
.text:004129C0                 cmp     eax, 0Dh
.text:004129C3                 jg      short loc_4129B9
.text:004129C5                 cmp     eax, 0Ch
.text:004129C8                 jge     short loc_412993
.text:004129CA                 cmp     eax, 0Ah
.text:004129CD                 mov     edx, 7
.text:004129D2                 jz      short loc_412990
.text:004129D4                 cmp     eax, 0Bh
.text:004129D7                 jnz     short loc_412993
.text:004129D9
.text:004129D9 loc_4129D9:                             ; CODE XREF: ___get_errno+21A↓j
.text:004129D9                 mov     edx, 8
.text:004129DE                 jmp     short loc_412990
.text:004129E0 ; ---------------------------------------------------------------------------
.text:004129E0
.text:004129E0 loc_4129E0:                             ; CODE XREF: ___get_errno+1A↑j
.text:004129E0                 cmp     eax, 22h ; '"'
.text:004129E3                 jg      short loc_412A14
.text:004129E5                 cmp     eax, 16h
.text:004129E8                 jge     short loc_4129B2
.text:004129EA                 cmp     eax, 12h
.text:004129ED                 jz      short loc_412980
.text:004129EF                 cmp     eax, 12h
.text:004129F2                 jg      short loc_412A05
.text:004129F4                 cmp     eax, 10h
.text:004129F7                 jz      short loc_4129B2
.text:004129F9                 mov     edx, 12h
.text:004129FE                 cmp     eax, 11h
.text:00412A01
.text:00412A01 loc_412A01:                             ; CODE XREF: ___get_errno+172↓j
.text:00412A01                                         ; ___get_errno+24C↓j ...
.text:00412A01                 jnz     short loc_412993
.text:00412A03                 jmp     short loc_412990
.text:00412A05 ; ---------------------------------------------------------------------------
.text:00412A05
.text:00412A05 loc_412A05:                             ; CODE XREF: ___get_errno+A2↑j
.text:00412A05                 cmp     eax, 14h
.text:00412A08                 jle     short loc_4129B2
.text:00412A0A
.text:00412A0A loc_412A0A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:00412A0A                 mov     edx, 10h
.text:00412A0F                 jmp     loc_412990
.text:00412A14 ; ---------------------------------------------------------------------------
.text:00412A14
.text:00412A14 loc_412A14:                             ; CODE XREF: ___get_errno+93↑j
.text:00412A14                 cmp     eax, 41h ; 'A'
.text:00412A17                 jz      short loc_4129B2
.text:00412A19                 cmp     eax, 41h ; 'A'
.text:00412A1C                 jg      short loc_412A31
.text:00412A1E                 cmp     eax, 24h ; '$'
.text:00412A21                 jz      short loc_4129B2
.text:00412A23                 cmp     eax, 35h ; '5'
.text:00412A26                 jnz     loc_412993
.text:00412A2C                 jmp     loc_412980
.text:00412A31 ; ---------------------------------------------------------------------------
.text:00412A31
.text:00412A31 loc_412A31:                             ; CODE XREF: ___get_errno+CC↑j
.text:00412A31                 cmp     eax, 43h ; 'C'
.text:00412A34                 jz      loc_412980
.text:00412A3A                 cmp     eax, 50h ; 'P'
.text:00412A3D                 jnz     loc_412993
.text:00412A43
.text:00412A43 loc_412A43:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00412A43                 mov     edx, 11h
.text:00412A48                 jmp     loc_412990
.text:00412A48 ; ---------------------------------------------------------------------------
.text:00412A4D                 align 10h
.text:00412A50
.text:00412A50 loc_412A50:                             ; CODE XREF: ___get_errno+7↑j
.text:00412A50                 cmp     eax, 0A1h ; '¡'
.text:00412A55                 jz      loc_412980
.text:00412A5B                 cmp     eax, 0A1h ; '¡'
.text:00412A60                 jg      loc_412B10
.text:00412A66                 cmp     eax, 81h
.text:00412A6B                 jg      short loc_412AD5
.text:00412A6D                 cmp     eax, 80h ; '€'
.text:00412A72                 mov     edx, 0Ah
.text:00412A77                 jge     loc_412990
.text:00412A7D                 cmp     eax, 6Ch ; 'l'
.text:00412A80                 jz      loc_4129B2
.text:00412A86                 cmp     eax, 6Ch ; 'l'
.text:00412A89                 jg      short loc_412AA7
.text:00412A8B                 cmp     eax, 57h ; 'W'
.text:00412A8E                 jz      loc_412993
.text:00412A94                 cmp     eax, 59h ; 'Y'
.text:00412A97                 jnz     loc_412993
.text:00412A9D
.text:00412A9D loc_412A9D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:00412A9D                                         ; ___get_errno+23C↓j
.text:00412A9D                 mov     edx, 0Bh
.text:00412AA2                 jmp     loc_412990
.text:00412AA7 ; ---------------------------------------------------------------------------
.text:00412AA7
.text:00412AA7 loc_412AA7:                             ; CODE XREF: ___get_errno+139↑j
.text:00412AA7                 cmp     eax, 70h ; 'p'
.text:00412AAA                 mov     edx, 1Ch
.text:00412AAF                 jz      loc_412990
.text:00412AB5                 cmp     eax, 70h ; 'p'
.text:00412AB8                 jg      short loc_412AC7
.text:00412ABA                 mov     edx, 20h ; ' '
.text:00412ABF                 cmp     eax, 6Dh ; 'm'
.text:00412AC2                 jmp     loc_412A01
.text:00412AC7 ; ---------------------------------------------------------------------------
.text:00412AC7
.text:00412AC7 loc_412AC7:                             ; CODE XREF: ___get_errno+168↑j
.text:00412AC7                 cmp     eax, 72h ; 'r'
.text:00412ACA
.text:00412ACA loc_412ACA:                             ; CODE XREF: ___get_errno+19C↓j
.text:00412ACA                 jnz     loc_412993
.text:00412AD0                 jmp     loc_4129AB
.text:00412AD5 ; ---------------------------------------------------------------------------
.text:00412AD5
.text:00412AD5 loc_412AD5:                             ; CODE XREF: ___get_errno+11B↑j
.text:00412AD5                 cmp     eax, 84h ; '„'
.text:00412ADA                 jz      loc_4129B2
.text:00412AE0                 cmp     eax, 84h ; '„'
.text:00412AE5                 jg      short loc_412AEE
.text:00412AE7                 cmp     eax, 82h ; '‚'
.text:00412AEC                 jmp     short loc_412ACA
.text:00412AEE ; ---------------------------------------------------------------------------
.text:00412AEE
.text:00412AEE loc_412AEE:                             ; CODE XREF: ___get_errno+195↑j
.text:00412AEE                 cmp     eax, 91h ; '‘'
.text:00412AF3                 mov     edx, 29h ; ')'
.text:00412AF8                 jz      loc_412990
.text:00412AFE                 cmp     eax, 9Eh ; 'ž'
.text:00412B03
.text:00412B03 loc_412B03:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00412B03                 jnz     loc_412993
.text:00412B09                 jmp     loc_4129B2
.text:00412B09 ; ---------------------------------------------------------------------------
.text:00412B0E                 align 10h
.text:00412B10
.text:00412B10 loc_412B10:                             ; CODE XREF: ___get_errno+110↑j
.text:00412B10                 cmp     eax, 0CEh ; 'Î'
.text:00412B15                 jz      loc_412980
.text:00412B1B                 cmp     eax, 0CEh ; 'Î'
.text:00412B20                 jg      short loc_412B70
.text:00412B22                 cmp     eax, 0AAh ; 'ª'
.text:00412B27                 jz      loc_412A0A
.text:00412B2D                 cmp     eax, 0AAh ; 'ª'
.text:00412B32                 jg      short loc_412B46
.text:00412B34                 cmp     eax, 0A4h ; '¤'
.text:00412B39                 jz      loc_412A9D
.text:00412B3F                 cmp     eax, 0A7h ; '§'
.text:00412B44                 jmp     short loc_412B03
.text:00412B46 ; ---------------------------------------------------------------------------
.text:00412B46
.text:00412B46 loc_412B46:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00412B46                 cmp     eax, 0B7h ; '·'
.text:00412B4B                 jz      loc_412A43
.text:00412B51                 cmp     eax, 0B7h ; '·'
.text:00412B56                 jl      loc_412993
.text:00412B5C                 sub     eax, 0BCh ; '¼'
.text:00412B61                 cmp     eax, 0Eh
.text:00412B64                 ja      loc_412993
.text:00412B6A                 jmp     loc_4129D9
.text:00412B6A ; ---------------------------------------------------------------------------
.text:00412B6F                 align 10h
.text:00412B70
.text:00412B70 loc_412B70:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00412B70                 cmp     eax, 46Bh
.text:00412B75                 mov     edx, 24h ; '$'
.text:00412B7A                 jz      loc_412990
.text:00412B80                 cmp     eax, 46Bh
.text:00412B85                 jg      short loc_412BA1
.text:00412B87                 cmp     eax, 0D7h ; '×'
.text:00412B8C                 jz      loc_412A9D
.text:00412B92                 mov     edx, 5
.text:00412B97                 cmp     eax, 45Dh
.text:00412B9C                 jmp     loc_412A01
.text:00412BA1 ; ---------------------------------------------------------------------------
.text:00412BA1
.text:00412BA1 loc_412BA1:                             ; CODE XREF: ___get_errno+235↑j
.text:00412BA1                 cmp     eax, 4D5h
.text:00412BA6                 mov     edx, 4
.text:00412BAB                 jz      loc_412990
.text:00412BB1                 cmp     eax, 4D5h
.text:00412BB6                 jg      short loc_412BC7
.text:00412BB8                 mov     edx, 13h
.text:00412BBD                 cmp     eax, 4B0h
.text:00412BC2                 jmp     loc_412A01
.text:00412BC7 ; ---------------------------------------------------------------------------
.text:00412BC7
.text:00412BC7 loc_412BC7:                             ; CODE XREF: ___get_errno+266↑j
.text:00412BC7                 cmp     eax, 718h
.text:00412BCC                 jnz     loc_412993
.text:00412BD2                 jmp     loc_4129B9
.text:00412BD2 ___get_errno    endp
.text:00412BD2
.text:00412BD2 ; ---------------------------------------------------------------------------
.text:00412BD7                 align 10h
.text:00412BE0
.text:00412BE0 ; =============== S U B R O U T I N E =======================================
.text:00412BE0
.text:00412BE0
.text:00412BE0 sub_412BE0      proc near               ; CODE XREF: sub_410B00:loc_410A9D↑p
.text:00412BE0                                         ; sub_4110C0:loc_411128↑p ...
.text:00412BE0
.text:00412BE0 var_C           = dword ptr -0Ch
.text:00412BE0
.text:00412BE0                 sub     esp, 0Ch
.text:00412BE3                 call    GetLastError
.text:00412BE8                 mov     [esp+0Ch+var_C], eax
.text:00412BEB                 call    ___get_errno
.text:00412BF0                 add     esp, 0Ch
.text:00412BF3                 retn
.text:00412BF3 sub_412BE0      endp
.text:00412BF3
.text:00412BF3 ; ---------------------------------------------------------------------------
.text:00412BF4                 align 10h
.text:00412C00
.text:00412C00 ; =============== S U B R O U T I N E =======================================
.text:00412C00
.text:00412C00
.text:00412C00 sub_412C00      proc near               ; CODE XREF: .text:00411033↑p
.text:00412C00                                         ; .text:00411083↑p
.text:00412C00
.text:00412C00 arg_4           = dword ptr  8
.text:00412C00
.text:00412C00                 sub     esp, 0Ch
.text:00412C03                 mov     edx, [esp+0Ch+arg_4]
.text:00412C07                 test    edx, edx
.text:00412C09                 jz      short loc_412C10
.text:00412C0B                 add     esp, 0Ch
.text:00412C0E                 jmp     short sub_412C50
.text:00412C10 ; ---------------------------------------------------------------------------
.text:00412C10
.text:00412C10 loc_412C10:                             ; CODE XREF: sub_412C00+9↑j
.text:00412C10                 call    _errno
.text:00412C15                 mov     dword ptr [eax], 16h
.text:00412C1B                 xor     eax, eax
.text:00412C1D                 add     esp, 0Ch
.text:00412C20                 retn
.text:00412C20 sub_412C00      endp
.text:00412C20
.text:00412C21 ; ---------------------------------------------------------------------------
.text:00412C21                 jmp     short sub_412C30
.text:00412C21 ; ---------------------------------------------------------------------------
.text:00412C23                 align 10h
.text:00412C30
.text:00412C30 ; =============== S U B R O U T I N E =======================================
.text:00412C30
.text:00412C30
.text:00412C30 ; int __cdecl sub_412C30(LPCSTR)
.text:00412C30 sub_412C30      proc near               ; CODE XREF: sub_410B00-10C↑p
.text:00412C30                                         ; .text:00411228↑p ...
.text:00412C30
.text:00412C30 lpFileName      = dword ptr -0Ch
.text:00412C30 Destination     = dword ptr -8
.text:00412C30 arg_0           = dword ptr  4
.text:00412C30
.text:00412C30                 sub     esp, 0Ch
.text:00412C33                 mov     edx, [esp+0Ch+arg_0]
.text:00412C37                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:00412C3F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:00412C42                 call    sub_412C50
.text:00412C47                 add     esp, 0Ch
.text:00412C4A                 retn
.text:00412C4A sub_412C30      endp
.text:00412C4A
.text:00412C4A ; ---------------------------------------------------------------------------
.text:00412C4B                 align 10h
.text:00412C50
.text:00412C50 ; =============== S U B R O U T I N E =======================================
.text:00412C50
.text:00412C50
.text:00412C50 ; int __cdecl sub_412C50(LPCSTR lpFileName, char *Destination)
.text:00412C50 sub_412C50      proc near               ; CODE XREF: sub_412C00+E↑j
.text:00412C50                                         ; sub_412C30+12↑p
.text:00412C50
.text:00412C50 Size            = dword ptr -2Ch
.text:00412C50 nBufferLength   = dword ptr -28h
.text:00412C50 lpBuffer        = dword ptr -24h
.text:00412C50 lpFilePart      = dword ptr -20h
.text:00412C50 FilePart        = dword ptr -14h
.text:00412C50 lpFileName      = dword ptr  4
.text:00412C50 Destination     = dword ptr  8
.text:00412C50
.text:00412C50                 push    ebp
.text:00412C51                 push    edi
.text:00412C52                 push    esi
.text:00412C53                 push    ebx
.text:00412C54                 sub     esp, 1Ch
.text:00412C57                 mov     edi, [esp+2Ch+lpFileName]
.text:00412C5B                 mov     ebp, [esp+2Ch+Destination]
.text:00412C5F                 test    edi, edi
.text:00412C61                 jz      loc_412D69
.text:00412C67                 cmp     byte ptr [edi], 0
.text:00412C6A                 jz      loc_412D5C
.text:00412C70                 mov     [esp+2Ch+Size], 104h ; Size
.text:00412C77                 call    malloc
.text:00412C7C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:00412C80                 lea     edx, [esp+2Ch+FilePart]
.text:00412C84                 mov     ebx, eax
.text:00412C86                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00412C8A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:00412C92                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:00412C95                 call    GetFullPathNameA
.text:00412C9A                 sub     esp, 10h
.text:00412C9D                 mov     esi, eax
.text:00412C9F                 test    eax, eax
.text:00412CA1                 jz      loc_412D4A
.text:00412CA7                 cmp     eax, 104h
.text:00412CAC                 jle     short loc_412CBD
.text:00412CAE                 test    ebp, ebp
.text:00412CB0                 jz      short loc_412D19
.text:00412CB2                 call    _errno
.text:00412CB7                 mov     dword ptr [eax], 26h ; '&'
.text:00412CBD
.text:00412CBD loc_412CBD:                             ; CODE XREF: sub_412C50+5C↑j
.text:00412CBD                                         ; sub_412C50+F5↓j
.text:00412CBD                 call    _errno
.text:00412CC2                 mov     edi, [eax]
.text:00412CC4                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:00412CCC                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:00412CCF                 call    sub_412D80
.text:00412CD4                 test    eax, eax
.text:00412CD6                 jnz     short loc_412CF0
.text:00412CD8                 movzx   eax, byte ptr [esi+ebx-1]
.text:00412CDD                 cmp     al, 2Fh ; '/'
.text:00412CDF                 jz      short loc_412CF0
.text:00412CE1                 cmp     al, 5Ch ; '\'
.text:00412CE3                 jz      short loc_412CF0
.text:00412CE5                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:00412CE9                 mov     byte ptr [esi+ebx+1], 0
.text:00412CEE                 mov     esi, esi
.text:00412CF0
.text:00412CF0 loc_412CF0:                             ; CODE XREF: sub_412C50+86↑j
.text:00412CF0                                         ; sub_412C50+8F↑j ...
.text:00412CF0                 call    _errno
.text:00412CF5                 mov     [eax], edi
.text:00412CF7                 mov     [esp+2Ch+Size], ebx
.text:00412CFA                 call    sub_410F20
.text:00412CFF                 test    ebp, ebp
.text:00412D01                 mov     eax, ebx
.text:00412D03                 jz      short loc_412D11
.text:00412D05                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:00412D09                 mov     [esp+2Ch+Size], ebp ; Destination
.text:00412D0C                 call    strcpy
.text:00412D11
.text:00412D11 loc_412D11:                             ; CODE XREF: sub_412C50+B3↑j
.text:00412D11                                         ; sub_412C50+10A↓j
.text:00412D11                 add     esp, 1Ch
.text:00412D14                 pop     ebx
.text:00412D15                 pop     esi
.text:00412D16                 pop     edi
.text:00412D17                 pop     ebp
.text:00412D18                 retn
.text:00412D19 ; ---------------------------------------------------------------------------
.text:00412D19
.text:00412D19 loc_412D19:                             ; CODE XREF: sub_412C50+60↑j
.text:00412D19                 mov     [esp+2Ch+Size], ebx ; Block
.text:00412D1C                 lea     ecx, [eax+2]
.text:00412D1F                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:00412D23                 call    realloc
.text:00412D28                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:00412D2C                 lea     edx, [esp+2Ch+FilePart]
.text:00412D30                 mov     ebx, eax
.text:00412D32                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00412D36                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:00412D3A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:00412D3D                 call    GetFullPathNameA
.text:00412D42                 sub     esp, 10h
.text:00412D45                 jmp     loc_412CBD
.text:00412D4A ; ---------------------------------------------------------------------------
.text:00412D4A
.text:00412D4A loc_412D4A:                             ; CODE XREF: sub_412C50+51↑j
.text:00412D4A                 call    sub_412BE0
.text:00412D4F                 mov     esi, eax
.text:00412D51                 call    _errno
.text:00412D56                 mov     [eax], esi
.text:00412D58
.text:00412D58 loc_412D58:                             ; CODE XREF: sub_412C50+117↓j
.text:00412D58                                         ; sub_412C50+124↓j
.text:00412D58                 xor     eax, eax
.text:00412D5A                 jmp     short loc_412D11
.text:00412D5C ; ---------------------------------------------------------------------------
.text:00412D5C
.text:00412D5C loc_412D5C:                             ; CODE XREF: sub_412C50+1A↑j
.text:00412D5C                 call    _errno
.text:00412D61                 mov     dword ptr [eax], 2
.text:00412D67                 jmp     short loc_412D58
.text:00412D69 ; ---------------------------------------------------------------------------
.text:00412D69
.text:00412D69 loc_412D69:                             ; CODE XREF: sub_412C50+11↑j
.text:00412D69                 call    _errno
.text:00412D6E                 mov     dword ptr [eax], 16h
.text:00412D74                 jmp     short loc_412D58
.text:00412D74 sub_412C50      endp
.text:00412D74
.text:00412D74 ; ---------------------------------------------------------------------------
.text:00412D76                 align 10h
.text:00412D80
.text:00412D80 ; =============== S U B R O U T I N E =======================================
.text:00412D80
.text:00412D80
.text:00412D80 ; int __cdecl sub_412D80(LPCSTR lpFileName, int)
.text:00412D80 sub_412D80      proc near               ; CODE XREF: sub_410B00-11D↑p
.text:00412D80                                         ; .text:00410F02↑p ...
.text:00412D80
.text:00412D80 uMode           = dword ptr -1Ch
.text:00412D80 var_10          = dword ptr -10h
.text:00412D80 var_C           = dword ptr -0Ch
.text:00412D80 var_8           = dword ptr -8
.text:00412D80 var_4           = dword ptr -4
.text:00412D80 lpFileName      = dword ptr  4
.text:00412D80 arg_4           = dword ptr  8
.text:00412D80
.text:00412D80                 sub     esp, 1Ch
.text:00412D83                 mov     [esp+1Ch+var_10], ebx
.text:00412D87                 mov     ebx, [esp+1Ch+lpFileName]
.text:00412D8B                 mov     [esp+1Ch+var_4], ebp
.text:00412D8F                 xor     ebp, ebp
.text:00412D91                 test    ebx, ebx
.text:00412D93                 mov     [esp+1Ch+var_C], esi
.text:00412D97                 mov     esi, [esp+1Ch+arg_4]
.text:00412D9B                 mov     [esp+1Ch+var_8], edi
.text:00412D9F                 jz      short loc_412DA9
.text:00412DA1                 test    esi, 0FFFFFFE8h
.text:00412DA7                 jz      short loc_412DD0
.text:00412DA9
.text:00412DA9 loc_412DA9:                             ; CODE XREF: sub_412D80+1F↑j
.text:00412DA9                 call    _errno
.text:00412DAE                 mov     dword ptr [eax], 16h
.text:00412DB4
.text:00412DB4 loc_412DB4:                             ; CODE XREF: sub_412D80+B1↓j
.text:00412DB4                 mov     eax, 0FFFFFFFFh
.text:00412DB9
.text:00412DB9 loc_412DB9:                             ; CODE XREF: sub_412D80+86↓j
.text:00412DB9                                         ; sub_412D80+A4↓j
.text:00412DB9                 mov     ebx, [esp+1Ch+var_10]
.text:00412DBD                 mov     esi, [esp+1Ch+var_C]
.text:00412DC1                 mov     edi, [esp+1Ch+var_8]
.text:00412DC5                 mov     ebp, [esp+1Ch+var_4]
.text:00412DC9                 add     esp, 1Ch
.text:00412DCC                 retn
.text:00412DCC ; ---------------------------------------------------------------------------
.text:00412DCD                 align 10h
.text:00412DD0
.text:00412DD0 loc_412DD0:                             ; CODE XREF: sub_412D80+27↑j
.text:00412DD0                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:00412DD7                 call    SetErrorMode
.text:00412DDC                 sub     esp, 4
.text:00412DDF                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:00412DE2                 call    GetFileAttributesA
.text:00412DE7                 sub     esp, 4
.text:00412DEA                 mov     edi, eax
.text:00412DEC                 cmp     eax, 0FFFFFFFFh
.text:00412DEF                 jz      short loc_412E33
.text:00412DF1
.text:00412DF1 loc_412DF1:                             ; CODE XREF: sub_412D80+C6↓j
.text:00412DF1                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:00412DF8                 call    SetErrorMode
.text:00412DFD                 sub     esp, 4
.text:00412E00                 mov     eax, 0FFFFFFFFh
.text:00412E05                 inc     ebp
.text:00412E06                 jz      short loc_412DB9
.text:00412E08                 test    esi, 10h
.text:00412E0E                 jz      short loc_412E18
.text:00412E10                 test    edi, 10h
.text:00412E16                 jz      short loc_412E26
.text:00412E18
.text:00412E18 loc_412E18:                             ; CODE XREF: sub_412D80+8E↑j
.text:00412E18                 and     esi, 2
.text:00412E1B                 jz      short loc_412E22
.text:00412E1D                 and     edi, 1
.text:00412E20                 jnz     short loc_412E26
.text:00412E22
.text:00412E22 loc_412E22:                             ; CODE XREF: sub_412D80+9B↑j
.text:00412E22                 xor     eax, eax
.text:00412E24                 jmp     short loc_412DB9
.text:00412E26 ; ---------------------------------------------------------------------------
.text:00412E26
.text:00412E26 loc_412E26:                             ; CODE XREF: sub_412D80+96↑j
.text:00412E26                                         ; sub_412D80+A0↑j
.text:00412E26                 call    _errno
.text:00412E2B                 mov     dword ptr [eax], 0Dh
.text:00412E31                 jmp     short loc_412DB4
.text:00412E33 ; ---------------------------------------------------------------------------
.text:00412E33
.text:00412E33 loc_412E33:                             ; CODE XREF: sub_412D80+6F↑j
.text:00412E33                 call    sub_412BE0
.text:00412E38                 mov     ebp, eax
.text:00412E3A                 call    _errno
.text:00412E3F                 mov     [eax], ebp
.text:00412E41                 mov     ebp, 0FFFFFFFFh
.text:00412E46                 jmp     short loc_412DF1
.text:00412E46 sub_412D80      endp
.text:00412E46
.text:00412E46 ; ---------------------------------------------------------------------------
.text:00412E48                 align 10h
.text:00412E50 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0041306F↓o
.text:00412E5C aLu             db '%lu',0              ; DATA XREF: .text:0041307F↓o
.text:00412E60 asc_412E60      db ' ',0                ; DATA XREF: .text:loc_413168↓o
.text:00412E62                 align 10h
.text:00412E70 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:00412E70                                         ; DATA XREF: .text:0041319F↓o
.text:00412E90 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_4131AD↓o
.text:00412E9C aServer         db ' Server',0          ; DATA XREF: .text:004131D6↓o
.text:00412E9C                                         ; .text:loc_41334E↓o
.text:00412EA4 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_4131E8↓o
.text:00412EB5 aDatacenterServ db ' Datacenter Server',0
.text:00412EB5                                         ; DATA XREF: .text:loc_4131F2↓o
.text:00412EC8 aStandardEditio db ' Standard Edition',0
.text:00412EC8                                         ; DATA XREF: .text:0041321A↓o
.text:00412EDA aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_413224↓o
.text:00412EE7 aEnterpriseEdit db ' Enterprise Edition',0
.text:00412EE7                                         ; DATA XREF: .text:loc_41322E↓o
.text:00412EFB aDatacenterEdit db ' Datacenter Edition',0
.text:00412EFB                                         ; DATA XREF: .text:loc_413238↓o
.text:00412F0F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0041324B↓o
.text:00412F1D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_413255↓o
.text:00412F1D                                         ; .text:loc_413360↓o
.text:00412F2B                 align 10h
.text:00412F30 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:00412F30                                         ; DATA XREF: .text:00413282↓o
.text:00412F60 aProducttype    db 'ProductType',0      ; DATA XREF: .text:004132C9↓o
.text:00412F6C aWinnt          db 'WINNT',0            ; DATA XREF: .text:00413304↓o
.text:00412F72 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0041331B↓o
.text:00412F7B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:00413332↓o
.text:00412F84                 align 10h
.text:00412F90 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:00412F90                                         ; DATA XREF: .text:004134A7↓o
.text:00412FB3                 db 1Dh dup(90h)
.text:00412FD0 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:00412FD0                                         ; DATA XREF: .text:00413506↓o
.text:00412FF6 ; ---------------------------------------------------------------------------
.text:00412FF6
.text:00412FF6 loc_412FF6:                             ; DATA XREF: .text:loc_413571↓o
.text:00412FF6                 and     [ebx+45h], dl
.text:00412FF9                 add     [eax], ah
.text:00412FFB                 push    ebx
.text:00412FFC                 push    eax
.text:00412FFD                 xor     [eax], eax
.text:00412FFF
.text:00412FFF loc_412FFF:                             ; DATA XREF: .text:loc_4135EB↓o
.text:00412FFF                 and     [edi+53h], cl
.text:00413002                 push    edx
.text:00413003                 xor     al, [eax]
.text:00413005                 lea     esi, [esi+0]
.text:00413009                 lea     edi, [edi+0]
.text:00413010                 push    edi
.text:00413011                 push    esi
.text:00413012                 push    ebx
.text:00413013                 sub     esp, 130h
.text:00413019                 mov     ebx, [esp+140h]
.text:00413020                 call    sub_413720
.text:00413025                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041302A                 cmp     eax, 1
.text:0041302D                 jz      loc_4134D0
.text:00413033                 cmp     eax, 1
.text:00413036                 jb      loc_4134A6
.text:0041303C                 cmp     eax, 2
.text:0041303F                 jz      loc_4130F0
.text:00413045                 cmp     eax, 3
.text:00413048                 jz      short loc_4130AF
.text:0041304A                 lea     esi, [esi+0]
.text:00413050
.text:00413050 loc_413050:                             ; CODE XREF: .text:004130E5↓j
.text:00413050                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00413056                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041305C
.text:0041305C loc_41305C:                             ; CODE XREF: .text:004134EF↓j
.text:0041305C                 mov     [esp+10h], edx
.text:00413060                 mov     ebx, [esp+144h]
.text:00413067                 mov     [esp+0Ch], ecx
.text:0041306B                 mov     [esp+8], eax
.text:0041306F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:00413077                 mov     [esp], ebx
.text:0041307A                 call    sprintf
.text:0041307F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:00413087                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0041308D                 mov     ecx, [esp+148h]
.text:00413094                 mov     [esp+8], edi
.text:00413098                 mov     [esp], ecx
.text:0041309B                 call    sprintf
.text:004130A0                 mov     eax, 1
.text:004130A5
.text:004130A5 loc_4130A5:                             ; CODE XREF: .text:0041329F↓j
.text:004130A5                                         ; .text:004132EC↓j
.text:004130A5                 add     esp, 130h
.text:004130AB                 pop     ebx
.text:004130AC                 pop     esi
.text:004130AD                 pop     edi
.text:004130AE                 retn
.text:004130AF ; ---------------------------------------------------------------------------
.text:004130AF
.text:004130AF loc_4130AF:                             ; CODE XREF: .text:00413048↑j
.text:004130AF                 mov     dword ptr [ebx], 7263694Dh
.text:004130B5                 mov     dword ptr [ebx+4], 666F736Fh
.text:004130BC                 mov     dword ptr [ebx+8], 69572074h
.text:004130C3                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004130CA                 mov     dword ptr [ebx+10h], 45432073h
.text:004130D1                 mov     word ptr [ebx+14h], 20h ; ' '
.text:004130D7                 mov     esi, esi
.text:004130D9                 lea     edi, [edi+0]
.text:004130E0
.text:004130E0 loc_4130E0:                             ; CODE XREF: .text:00413188↓j
.text:004130E0                                         ; .text:004134C9↓j ...
.text:004130E0                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004130E5                 jmp     loc_413050
.text:004130E5 ; ---------------------------------------------------------------------------
.text:004130EA                 align 10h
.text:004130F0
.text:004130F0 loc_4130F0:                             ; CODE XREF: .text:0041303F↑j
.text:004130F0                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:004130F6                 cmp     edx, 3
.text:004130F9                 mov     eax, edx
.text:004130FB                 jz      loc_413465
.text:00413101
.text:00413101 loc_413101:                             ; CODE XREF: .text:0041346C↓j
.text:00413101                 cmp     eax, 4
.text:00413104                 jz      loc_413425
.text:0041310A
.text:0041310A loc_41310A:                             ; CODE XREF: .text:0041342D↓j
.text:0041310A                 cmp     eax, 4
.text:0041310D                 ja      loc_413372
.text:00413113                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00413119                 test    ecx, ecx
.text:0041311B                 jnz     loc_413372
.text:00413121                 mov     dword ptr [ebx], 7263694Dh
.text:00413127                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041312E                 mov     dword ptr [ebx+8], 69572074h
.text:00413135                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041313C                 mov     dword ptr [ebx+10h], 544E2073h
.text:00413143
.text:00413143 loc_413143:                             ; CODE XREF: .text:004133E5↓j
.text:00413143                 mov     byte ptr [ebx+14h], 0
.text:00413147
.text:00413147 loc_413147:                             ; CODE XREF: .text:00413375↓j
.text:00413147                                         ; .text:0041338C↓j ...
.text:00413147                 mov     esi, dword_41A090
.text:0041314D                 test    esi, esi
.text:0041314F                 jz      loc_413262
.text:00413155                 movzx   eax, ds:byte_41B59A
.text:0041315C                 cmp     al, 1
.text:0041315E                 jz      loc_413242
.text:00413164                 cmp     al, 3
.text:00413166                 jz      short loc_41318D
.text:00413168
.text:00413168 loc_413168:                             ; CODE XREF: .text:004131AB↓j
.text:00413168                                         ; .text:004131E6↓j ...
.text:00413168                 mov     dword ptr [esp+4], offset asc_412E60 ; " "
.text:00413170                 mov     [esp], ebx
.text:00413173                 call    strcat
.text:00413178                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:00413180                 mov     [esp], ebx
.text:00413183                 call    strcat
.text:00413188                 jmp     loc_4130E0
.text:0041318D ; ---------------------------------------------------------------------------
.text:0041318D
.text:0041318D loc_41318D:                             ; CODE XREF: .text:00413166↑j
.text:0041318D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:00413194                 jz      short loc_4131B6
.text:00413196
.text:00413196 loc_413196:                             ; CODE XREF: .text:004131C2↓j
.text:00413196                 test    byte ptr ds:word_41B598, 2
.text:0041319D                 jz      short loc_4131AD
.text:0041319F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:004131A6
.text:004131A6 loc_4131A6:                             ; CODE XREF: .text:004131B4↓j
.text:004131A6                 call    printf
.text:004131AB                 jmp     short loc_413168
.text:004131AD ; ---------------------------------------------------------------------------
.text:004131AD
.text:004131AD loc_4131AD:                             ; CODE XREF: .text:0041319D↑j
.text:004131AD                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:004131B4                 jmp     short loc_4131A6
.text:004131B6 ; ---------------------------------------------------------------------------
.text:004131B6
.text:004131B6 loc_4131B6:                             ; CODE XREF: .text:00413194↑j
.text:004131B6                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:004131BB                 cmp     eax, 2
.text:004131BE                 jz      short loc_413200
.text:004131C0                 test    eax, eax
.text:004131C2                 jnz     short loc_413196
.text:004131C4                 cmp     byte ptr ds:word_41B598, 0
.text:004131CB                 js      short loc_4131F2
.text:004131CD                 test    byte ptr ds:word_41B598, 2
.text:004131D4                 jnz     short loc_4131E8
.text:004131D6                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:004131DE
.text:004131DE loc_4131DE:                             ; CODE XREF: .text:004131F0↓j
.text:004131DE                                         ; .text:004131FA↓j ...
.text:004131DE                 mov     [esp], ebx
.text:004131E1                 call    strcat
.text:004131E6                 jmp     short loc_413168
.text:004131E8 ; ---------------------------------------------------------------------------
.text:004131E8
.text:004131E8 loc_4131E8:                             ; CODE XREF: .text:004131D4↑j
.text:004131E8                                         ; .text:00413349↓j
.text:004131E8                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:004131F0                 jmp     short loc_4131DE
.text:004131F2 ; ---------------------------------------------------------------------------
.text:004131F2
.text:004131F2 loc_4131F2:                             ; CODE XREF: .text:004131CB↑j
.text:004131F2                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:004131FA                 jmp     short loc_4131DE
.text:004131FA ; ---------------------------------------------------------------------------
.text:004131FC                 align 10h
.text:00413200
.text:00413200 loc_413200:                             ; CODE XREF: .text:004131BE↑j
.text:00413200                 cmp     byte ptr ds:word_41B598, 0
.text:00413207                 js      short loc_413238
.text:00413209                 movzx   eax, ds:word_41B598
.text:00413210                 test    al, 2
.text:00413212                 jnz     short loc_41322E
.text:00413214                 cmp     ax, 400h
.text:00413218                 jz      short loc_413224
.text:0041321A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:00413222                 jmp     short loc_4131DE
.text:00413224 ; ---------------------------------------------------------------------------
.text:00413224
.text:00413224 loc_413224:                             ; CODE XREF: .text:00413218↑j
.text:00413224                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0041322C                 jmp     short loc_4131DE
.text:0041322E ; ---------------------------------------------------------------------------
.text:0041322E
.text:0041322E loc_41322E:                             ; CODE XREF: .text:00413212↑j
.text:0041322E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:00413236                 jmp     short loc_4131DE
.text:00413238 ; ---------------------------------------------------------------------------
.text:00413238
.text:00413238 loc_413238:                             ; CODE XREF: .text:00413207↑j
.text:00413238                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:00413240                 jmp     short loc_4131DE
.text:00413242 ; ---------------------------------------------------------------------------
.text:00413242
.text:00413242 loc_413242:                             ; CODE XREF: .text:0041315E↑j
.text:00413242                 test    byte ptr ds:word_41B598+1, 2
.text:00413249                 jz      short loc_413255
.text:0041324B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:00413253                 jmp     short loc_4131DE
.text:00413255 ; ---------------------------------------------------------------------------
.text:00413255
.text:00413255 loc_413255:                             ; CODE XREF: .text:00413249↑j
.text:00413255                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0041325D                 jmp     loc_4131DE
.text:00413262 ; ---------------------------------------------------------------------------
.text:00413262
.text:00413262 loc_413262:                             ; CODE XREF: .text:0041314F↑j
.text:00413262                 mov     dword ptr [esp+28h], 0FFh
.text:0041326A                 lea     edx, [esp+2Ch]
.text:0041326E                 mov     [esp+10h], edx
.text:00413272                 mov     dword ptr [esp+0Ch], 1
.text:0041327A                 mov     dword ptr [esp+8], 0
.text:00413282                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0041328A                 mov     dword ptr [esp], 80000002h
.text:00413291                 call    RegOpenKeyExA
.text:00413296                 mov     edi, eax
.text:00413298                 sub     esp, 14h
.text:0041329B                 xor     eax, eax
.text:0041329D                 test    edi, edi
.text:0041329F                 jnz     loc_4130A5
.text:004132A5                 mov     dword ptr [esp+0Ch], 0
.text:004132AD                 mov     edi, [esp+2Ch]
.text:004132B1                 lea     esi, [esp+28h]
.text:004132B5                 mov     [esp+14h], esi
.text:004132B9                 lea     esi, [esp+30h]
.text:004132BD                 mov     [esp+10h], esi
.text:004132C1                 mov     dword ptr [esp+8], 0
.text:004132C9                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:004132D1                 mov     [esp], edi
.text:004132D4                 call    RegQueryValueExA
.text:004132D9                 sub     esp, 18h
.text:004132DC                 test    eax, eax
.text:004132DE                 jnz     short loc_4132EA
.text:004132E0                 cmp     dword ptr [esp+28h], 0FFh
.text:004132E8                 jbe     short loc_4132F1
.text:004132EA
.text:004132EA loc_4132EA:                             ; CODE XREF: .text:004132DE↑j
.text:004132EA                 xor     eax, eax
.text:004132EC                 jmp     loc_4130A5
.text:004132F1 ; ---------------------------------------------------------------------------
.text:004132F1
.text:004132F1 loc_4132F1:                             ; CODE XREF: .text:004132E8↑j
.text:004132F1                 mov     edx, [esp+2Ch]
.text:004132F5                 mov     [esp], edx
.text:004132F8                 call    RegCloseKey
.text:004132FD                 sub     esp, 4
.text:00413300                 mov     [esp+4], esi
.text:00413304                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0041330B                 call    lstrcmpiA
.text:00413310                 sub     esp, 8
.text:00413313                 test    eax, eax
.text:00413315                 jz      short loc_413360
.text:00413317
.text:00413317 loc_413317:                             ; CODE XREF: .text:00413370↓j
.text:00413317                 mov     [esp+4], esi
.text:0041331B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:00413322                 call    lstrcmpiA
.text:00413327                 sub     esp, 8
.text:0041332A                 test    eax, eax
.text:0041332C                 jz      short loc_41334E
.text:0041332E
.text:0041332E loc_41332E:                             ; CODE XREF: .text:0041335E↓j
.text:0041332E                 mov     [esp+4], esi
.text:00413332                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:00413339                 call    lstrcmpiA
.text:0041333E                 sub     esp, 8
.text:00413341                 test    eax, eax
.text:00413343                 jnz     loc_413168
.text:00413349                 jmp     loc_4131E8
.text:0041334E ; ---------------------------------------------------------------------------
.text:0041334E
.text:0041334E loc_41334E:                             ; CODE XREF: .text:0041332C↑j
.text:0041334E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00413356                 mov     [esp], ebx
.text:00413359                 call    strcat
.text:0041335E                 jmp     short loc_41332E
.text:00413360 ; ---------------------------------------------------------------------------
.text:00413360
.text:00413360 loc_413360:                             ; CODE XREF: .text:00413315↑j
.text:00413360                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00413368                 mov     [esp], ebx
.text:0041336B                 call    strcat
.text:00413370                 jmp     short loc_413317
.text:00413372 ; ---------------------------------------------------------------------------
.text:00413372
.text:00413372 loc_413372:                             ; CODE XREF: .text:0041310D↑j
.text:00413372                                         ; .text:0041311B↑j
.text:00413372                 cmp     eax, 5
.text:00413375                 jnz     loc_413147
.text:0041337B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00413380                 cmp     eax, 2
.text:00413383                 jz      short loc_4133EA
.text:00413385                 cmp     eax, 1
.text:00413388                 jz      short loc_4133C3
.text:0041338A                 test    eax, eax
.text:0041338C                 jnz     loc_413147
.text:00413392                 mov     dword ptr [ebx], 7263694Dh
.text:00413398                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041339F                 mov     dword ptr [ebx+8], 69572074h
.text:004133A6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004133AD                 mov     dword ptr [ebx+10h], 30322073h
.text:004133B4                 mov     word ptr [ebx+14h], 3030h
.text:004133BA                 mov     byte ptr [ebx+16h], 0
.text:004133BE                 jmp     loc_413147
.text:004133C3 ; ---------------------------------------------------------------------------
.text:004133C3
.text:004133C3 loc_4133C3:                             ; CODE XREF: .text:00413388↑j
.text:004133C3                 mov     dword ptr [ebx], 7263694Dh
.text:004133C9                 mov     dword ptr [ebx+4], 666F736Fh
.text:004133D0                 mov     dword ptr [ebx+8], 69572074h
.text:004133D7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004133DE                 mov     dword ptr [ebx+10h], 50582073h
.text:004133E5                 jmp     loc_413143
.text:004133EA ; ---------------------------------------------------------------------------
.text:004133EA
.text:004133EA loc_4133EA:                             ; CODE XREF: .text:00413383↑j
.text:004133EA                 mov     dword ptr [ebx], 7263694Dh
.text:004133F0                 mov     dword ptr [ebx+4], 666F736Fh
.text:004133F7                 mov     dword ptr [ebx+8], 69572074h
.text:004133FE                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00413405                 mov     dword ptr [ebx+10h], 65532073h
.text:0041340C                 mov     dword ptr [ebx+14h], 72657672h
.text:00413413                 mov     dword ptr [ebx+18h], 30303220h
.text:0041341A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:00413420                 jmp     loc_413147
.text:00413425 ; ---------------------------------------------------------------------------
.text:00413425
.text:00413425 loc_413425:                             ; CODE XREF: .text:00413104↑j
.text:00413425                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041342B                 test    edx, edx
.text:0041342D                 jnz     loc_41310A
.text:00413433                 mov     dword ptr [ebx], 7263694Dh
.text:00413439                 mov     dword ptr [ebx+4], 666F736Fh
.text:00413440                 mov     dword ptr [ebx+8], 69572074h
.text:00413447                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041344E                 mov     dword ptr [ebx+10h], 544E2073h
.text:00413455                 mov     dword ptr [ebx+14h], 302E3420h
.text:0041345C                 mov     byte ptr [ebx+18h], 0
.text:00413460                 jmp     loc_413147
.text:00413465 ; ---------------------------------------------------------------------------
.text:00413465
.text:00413465 loc_413465:                             ; CODE XREF: .text:004130FB↑j
.text:00413465                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0041346C                 jnz     loc_413101
.text:00413472                 mov     dword ptr [ebx], 7263694Dh
.text:00413478                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041347F                 mov     dword ptr [ebx+8], 69572074h
.text:00413486                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041348D                 mov     dword ptr [ebx+10h], 544E2073h
.text:00413494                 mov     dword ptr [ebx+14h], 352E3320h
.text:0041349B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:004134A1                 jmp     loc_413147
.text:004134A6 ; ---------------------------------------------------------------------------
.text:004134A6
.text:004134A6 loc_4134A6:                             ; CODE XREF: .text:00413036↑j
.text:004134A6                 cld
.text:004134A7                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:004134AC                 mov     ecx, 8
.text:004134B1                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:004134B8                 mov     edi, ebx
.text:004134BA                 rep movsd
.text:004134BC                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:004134C3                 mov     [edi+2], dl
.text:004134C6                 mov     [edi], si
.text:004134C9                 jmp     loc_4130E0
.text:004134C9 ; ---------------------------------------------------------------------------
.text:004134CE                 align 10h
.text:004134D0
.text:004134D0 loc_4134D0:                             ; CODE XREF: .text:0041302D↑j
.text:004134D0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004134D6                 cmp     ecx, 4
.text:004134D9                 jz      loc_413590
.text:004134DF
.text:004134DF loc_4134DF:                             ; CODE XREF: .text:004135E6↓j
.text:004134DF                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004134E5
.text:004134E5 loc_4134E5:                             ; CODE XREF: .text:00413598↓j
.text:004134E5                 cmp     ecx, 4
.text:004134E8                 jz      short loc_4134F4
.text:004134EA
.text:004134EA loc_4134EA:                             ; CODE XREF: .text:004134FC↓j
.text:004134EA                                         ; .text:00413501↓j
.text:004134EA                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004134EF                 jmp     loc_41305C
.text:004134F4 ; ---------------------------------------------------------------------------
.text:004134F4
.text:004134F4 loc_4134F4:                             ; CODE XREF: .text:004134E8↑j
.text:004134F4                 cmp     edx, 0Ah
.text:004134F7                 jz      short loc_413521
.text:004134F9
.text:004134F9 loc_4134F9:                             ; CODE XREF: .text:0041356F↓j
.text:004134F9                 cmp     ecx, 4
.text:004134FC                 jnz     short loc_4134EA
.text:004134FE                 cmp     edx, 5Ah ; 'Z'
.text:00413501                 jnz     short loc_4134EA
.text:00413503                 cld
.text:00413504                 mov     edi, ebx
.text:00413506                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0041350B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:00413512                 mov     ecx, 9
.text:00413517                 rep movsd
.text:00413519                 mov     [edi], bx
.text:0041351C                 jmp     loc_4130E0
.text:00413521 ; ---------------------------------------------------------------------------
.text:00413521
.text:00413521 loc_413521:                             ; CODE XREF: .text:004134F7↑j
.text:00413521                 mov     dword ptr [ebx], 7263694Dh
.text:00413527                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041352E                 mov     dword ptr [ebx+8], 69572074h
.text:00413535                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041353C                 mov     dword ptr [ebx+10h], 38392073h
.text:00413543                 mov     byte ptr [ebx+14h], 0
.text:00413547                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0041354D                 lea     edi, [edx-7CFh]
.text:00413553                 cmp     edi, 0B7h ; '·'
.text:00413559                 jbe     short loc_413583
.text:0041355B                 cmp     edx, 886h
.text:00413561                 ja      short loc_413571
.text:00413563
.text:00413563 loc_413563:                             ; CODE XREF: .text:00413581↓j
.text:00413563                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00413569                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041356F                 jmp     short loc_4134F9
.text:00413571 ; ---------------------------------------------------------------------------
.text:00413571
.text:00413571 loc_413571:                             ; CODE XREF: .text:00413561↑j
.text:00413571                 mov     dword ptr [esp+4], offset loc_412FF6
.text:00413579
.text:00413579 loc_413579:                             ; CODE XREF: .text:0041358B↓j
.text:00413579                 mov     [esp], ebx
.text:0041357C                 call    strcat
.text:00413581                 jmp     short loc_413563
.text:00413583 ; ---------------------------------------------------------------------------
.text:00413583
.text:00413583 loc_413583:                             ; CODE XREF: .text:00413559↑j
.text:00413583                 mov     dword ptr [esp+4], 412FFAh
.text:0041358B                 jmp     short loc_413579
.text:0041358B ; ---------------------------------------------------------------------------
.text:0041358D                 align 10h
.text:00413590
.text:00413590 loc_413590:                             ; CODE XREF: .text:004134D9↑j
.text:00413590                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00413596                 test    edx, edx
.text:00413598                 jnz     loc_4134E5
.text:0041359E                 mov     dword ptr [ebx], 7263694Dh
.text:004135A4                 mov     dword ptr [ebx+4], 666F736Fh
.text:004135AB                 mov     dword ptr [ebx+8], 69572074h
.text:004135B2                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004135B9                 mov     dword ptr [ebx+10h], 35392073h
.text:004135C0                 mov     byte ptr [ebx+14h], 0
.text:004135C4                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:004135CA                 lea     ecx, [edx-3B7h]
.text:004135D0                 cmp     ecx, 81h
.text:004135D6                 jbe     short loc_4135FD
.text:004135D8                 cmp     edx, 438h
.text:004135DE                 ja      short loc_4135EB
.text:004135E0
.text:004135E0 loc_4135E0:                             ; CODE XREF: .text:004135FB↓j
.text:004135E0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004135E6                 jmp     loc_4134DF
.text:004135EB ; ---------------------------------------------------------------------------
.text:004135EB
.text:004135EB loc_4135EB:                             ; CODE XREF: .text:004135DE↑j
.text:004135EB                 mov     dword ptr [esp+4], offset loc_412FFF
.text:004135F3
.text:004135F3 loc_4135F3:                             ; CODE XREF: .text:00413605↓j
.text:004135F3                 mov     [esp], ebx
.text:004135F6                 call    strcat
.text:004135FB                 jmp     short loc_4135E0
.text:004135FD ; ---------------------------------------------------------------------------
.text:004135FD
.text:004135FD loc_4135FD:                             ; CODE XREF: .text:004135D6↑j
.text:004135FD                 mov     dword ptr [esp+4], 412FFAh
.text:00413605                 jmp     short loc_4135F3
.text:00413605 ; ---------------------------------------------------------------------------
.text:00413607                 align 10h
.text:00413610
.text:00413610 ; =============== S U B R O U T I N E =======================================
.text:00413610
.text:00413610
.text:00413610 sub_413610      proc near               ; CODE XREF: .text:00411B8E↑p
.text:00413610                                         ; sub_412010+12A↑p
.text:00413610                 sub     esp, 0Ch
.text:00413613                 call    sub_413720
.text:00413618                 mov     eax, ds:dword_41B4F0
.text:0041361D                 add     esp, 0Ch
.text:00413620                 retn
.text:00413620 sub_413610      endp
.text:00413620
.text:00413621 ; ---------------------------------------------------------------------------
.text:00413621                 jmp     short loc_413630
.text:00413621 ; ---------------------------------------------------------------------------
.text:00413623                 align 10h
.text:00413630
.text:00413630 loc_413630:                             ; CODE XREF: .text:00413621↑j
.text:00413630                 sub     esp, 0Ch
.text:00413633                 call    sub_413720
.text:00413638                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041363D                 add     esp, 0Ch
.text:00413640                 retn
.text:00413641 ; ---------------------------------------------------------------------------
.text:00413641                 jmp     short loc_413650
.text:00413641 ; ---------------------------------------------------------------------------
.text:00413643                 align 10h
.text:00413650
.text:00413650 loc_413650:                             ; CODE XREF: .text:00413641↑j
.text:00413650                 sub     esp, 0Ch
.text:00413653                 call    sub_413720
.text:00413658                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0041365D                 add     esp, 0Ch
.text:00413660                 retn
.text:00413661 ; ---------------------------------------------------------------------------
.text:00413661                 jmp     short loc_413670
.text:00413661 ; ---------------------------------------------------------------------------
.text:00413663                 align 10h
.text:00413670
.text:00413670 loc_413670:                             ; CODE XREF: .text:00413661↑j
.text:00413670                 sub     esp, 0Ch
.text:00413673                 call    sub_413720
.text:00413678                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041367D                 add     esp, 0Ch
.text:00413680                 retn
.text:00413681 ; ---------------------------------------------------------------------------
.text:00413681                 jmp     short loc_413690
.text:00413681 ; ---------------------------------------------------------------------------
.text:00413683                 align 10h
.text:00413690
.text:00413690 loc_413690:                             ; CODE XREF: .text:00413681↑j
.text:00413690                 sub     esp, 0Ch
.text:00413693                 call    GetVersion
.text:00413698                 shr     eax, 10h
.text:0041369B                 add     esp, 0Ch
.text:0041369E                 retn
.text:0041369E ; ---------------------------------------------------------------------------
.text:0041369F                 align 10h
.text:004136A0                 sub     esp, 0Ch
.text:004136A3                 call    sub_413720
.text:004136A8                 xor     eax, eax
.text:004136AA                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:004136B1                 setz    al
.text:004136B4                 add     esp, 0Ch
.text:004136B7                 retn
.text:004136B7 ; ---------------------------------------------------------------------------
.text:004136B8                 align 10h
.text:004136C0
.text:004136C0 ; =============== S U B R O U T I N E =======================================
.text:004136C0
.text:004136C0
.text:004136C0 sub_4136C0      proc near               ; CODE XREF: .text:loc_411300↑p
.text:004136C0                                         ; .text:loc_411B74↑p ...
.text:004136C0                 sub     esp, 0Ch
.text:004136C3                 call    sub_413720
.text:004136C8                 xor     eax, eax
.text:004136CA                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:004136D1                 setz    al
.text:004136D4                 add     esp, 0Ch
.text:004136D7                 retn
.text:004136D7 sub_4136C0      endp
.text:004136D7
.text:004136D7 ; ---------------------------------------------------------------------------
.text:004136D8                 align 10h
.text:004136E0                 sub     esp, 0Ch
.text:004136E3                 call    sub_413720
.text:004136E8                 xor     eax, eax
.text:004136EA                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:004136F1                 setz    al
.text:004136F4                 add     esp, 0Ch
.text:004136F7                 retn
.text:004136F7 ; ---------------------------------------------------------------------------
.text:004136F8                 align 10h
.text:00413700                 sub     esp, 0Ch
.text:00413703                 call    sub_413720
.text:00413708                 xor     eax, eax
.text:0041370A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:00413711                 setz    al
.text:00413714                 add     esp, 0Ch
.text:00413717                 retn
.text:00413717 ; ---------------------------------------------------------------------------
.text:00413718                 align 10h
.text:00413720
.text:00413720 ; =============== S U B R O U T I N E =======================================
.text:00413720
.text:00413720
.text:00413720 sub_413720      proc near               ; CODE XREF: .text:00413020↑p
.text:00413720                                         ; sub_413610+3↑p ...
.text:00413720
.text:00413720 lpVersionInformation= dword ptr -0BCh
.text:00413720 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:00413720
.text:00413720                 sub     esp, 0BCh
.text:00413726                 mov     edx, ds:dword_41B5A0
.text:0041372C                 test    edx, edx
.text:0041372E                 jz      short loc_413740
.text:00413730
.text:00413730 loc_413730:                             ; CODE XREF: sub_413720+7B↓j
.text:00413730                 mov     edx, 1
.text:00413735
.text:00413735 loc_413735:                             ; CODE XREF: sub_413720+217↓j
.text:00413735                 mov     eax, edx
.text:00413737                 add     esp, 0BCh
.text:0041373D                 retn
.text:0041373D ; ---------------------------------------------------------------------------
.text:0041373E                 align 10h
.text:00413740
.text:00413740 loc_413740:                             ; CODE XREF: sub_413720+E↑j
.text:00413740                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:00413747                 mov     edx, 9Ch ; 'œ'
.text:0041374C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:00413752                 call    GetVersionExA
.text:00413757                 sub     esp, 4
.text:0041375A                 test    eax, eax
.text:0041375C                 jz      loc_413914
.text:00413762
.text:00413762 loc_413762:                             ; CODE XREF: sub_413720+245↓j
.text:00413762                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:00413769                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041376E                 cmp     eax, 1
.text:00413771                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00413777                 jz      loc_413860
.text:0041377D                 cmp     eax, 1
.text:00413780                 jb      loc_413850
.text:00413786                 cmp     eax, 2
.text:00413789                 jz      short loc_4137AA
.text:0041378B                 cmp     eax, 3
.text:0041378E                 jz      short loc_41379D
.text:00413790
.text:00413790 loc_413790:                             ; CODE XREF: sub_413720+88↓j
.text:00413790                                         ; sub_413720+C0↓j ...
.text:00413790                 mov     edx, 1
.text:00413795                 mov     ds:dword_41B5A0, edx
.text:0041379B                 jmp     short loc_413730
.text:0041379D ; ---------------------------------------------------------------------------
.text:0041379D
.text:0041379D loc_41379D:                             ; CODE XREF: sub_413720+6E↑j
.text:0041379D                 mov     ecx, 17h
.text:004137A2
.text:004137A2 loc_4137A2:                             ; CODE XREF: sub_413720+1A7↓j
.text:004137A2                 mov     ds:dword_41B4F0, ecx
.text:004137A8                 jmp     short loc_413790
.text:004137AA ; ---------------------------------------------------------------------------
.text:004137AA
.text:004137AA loc_4137AA:                             ; CODE XREF: sub_413720+69↑j
.text:004137AA                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:004137AF                 cmp     eax, 3
.text:004137B2                 jz      short loc_41382B
.text:004137B4                 cmp     eax, 4
.text:004137B7                 jz      short loc_41381A
.text:004137B9
.text:004137B9 loc_4137B9:                             ; CODE XREF: sub_413720+102↓j
.text:004137B9                 cmp     eax, 4
.text:004137BC                 ja      short loc_4137E2
.text:004137BE                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:004137C4                 test    ecx, ecx
.text:004137C6                 jnz     short loc_4137E2
.text:004137C8                 mov     edx, 1Eh
.text:004137CD
.text:004137CD loc_4137CD:                             ; CODE XREF: sub_413720+DF↓j
.text:004137CD                 mov     ds:dword_41B4F0, edx
.text:004137D3
.text:004137D3 loc_4137D3:                             ; CODE XREF: sub_413720+C5↓j
.text:004137D3                                         ; sub_413720+D8↓j ...
.text:004137D3                 movzx   ecx, ds:word_41B594
.text:004137DA                 add     ds:dword_41B4F0, ecx
.text:004137E0                 jmp     short loc_413790
.text:004137E2 ; ---------------------------------------------------------------------------
.text:004137E2
.text:004137E2 loc_4137E2:                             ; CODE XREF: sub_413720+9C↑j
.text:004137E2                                         ; sub_413720+A6↑j
.text:004137E2                 cmp     eax, 5
.text:004137E5                 jnz     short loc_4137D3
.text:004137E7                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:004137EC                 cmp     eax, 2
.text:004137EF                 jz      short loc_41380E
.text:004137F1                 cmp     eax, 1
.text:004137F4                 jz      short loc_413801
.text:004137F6                 test    eax, eax
.text:004137F8                 jnz     short loc_4137D3
.text:004137FA                 mov     edx, 32h ; '2'
.text:004137FF                 jmp     short loc_4137CD
.text:00413801 ; ---------------------------------------------------------------------------
.text:00413801
.text:00413801 loc_413801:                             ; CODE XREF: sub_413720+D4↑j
.text:00413801                 mov     ecx, 3Ch ; '<'
.text:00413806
.text:00413806 loc_413806:                             ; CODE XREF: sub_413720+122↓j
.text:00413806                 mov     ds:dword_41B4F0, ecx
.text:0041380C                 jmp     short loc_4137D3
.text:0041380E ; ---------------------------------------------------------------------------
.text:0041380E
.text:0041380E loc_41380E:                             ; CODE XREF: sub_413720+CF↑j
.text:0041380E                 mov     eax, 46h ; 'F'
.text:00413813
.text:00413813 loc_413813:                             ; CODE XREF: sub_413720+109↓j
.text:00413813                                         ; sub_413720+129↓j
.text:00413813                 mov     ds:dword_41B4F0, eax
.text:00413818                 jmp     short loc_4137D3
.text:0041381A ; ---------------------------------------------------------------------------
.text:0041381A
.text:0041381A loc_41381A:                             ; CODE XREF: sub_413720+97↑j
.text:0041381A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00413820                 test    ecx, ecx
.text:00413822                 jnz     short loc_4137B9
.text:00413824                 mov     eax, 28h ; '('
.text:00413829                 jmp     short loc_413813
.text:0041382B ; ---------------------------------------------------------------------------
.text:0041382B
.text:0041382B loc_41382B:                             ; CODE XREF: sub_413720+92↑j
.text:0041382B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00413830                 cmp     eax, 33h ; '3'
.text:00413833                 jz      short loc_413844
.text:00413835                 cmp     eax, 5
.text:00413838                 setz    cl
.text:0041383B                 movzx   edx, cl
.text:0041383E                 lea     ecx, [edx+edx*4+1Eh]
.text:00413842                 jmp     short loc_413806
.text:00413844 ; ---------------------------------------------------------------------------
.text:00413844
.text:00413844 loc_413844:                             ; CODE XREF: sub_413720+113↑j
.text:00413844                 mov     eax, 24h ; '$'
.text:00413849                 jmp     short loc_413813
.text:00413849 ; ---------------------------------------------------------------------------
.text:0041384B                 align 10h
.text:00413850
.text:00413850 loc_413850:                             ; CODE XREF: sub_413720+60↑j
.text:00413850                 mov     edx, 2
.text:00413855                 mov     ds:dword_41B4F0, edx
.text:0041385B                 jmp     loc_413790
.text:00413860 ; ---------------------------------------------------------------------------
.text:00413860
.text:00413860 loc_413860:                             ; CODE XREF: sub_413720+57↑j
.text:00413860                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00413866                 cmp     ecx, 4
.text:00413869                 jnz     loc_413790
.text:0041386F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00413874                 test    eax, eax
.text:00413876                 jnz     short loc_41389A
.text:00413878                 mov     eax, 0Ah
.text:0041387D                 mov     ds:dword_41B4F0, eax
.text:00413882                 lea     eax, [edx-3B7h]
.text:00413888                 cmp     eax, 81h
.text:0041388D                 ja      short loc_413905
.text:0041388F                 mov     edx, 0Bh
.text:00413894
.text:00413894 loc_413894:                             ; CODE XREF: sub_413720+1F2↓j
.text:00413894                 mov     ds:dword_41B4F0, edx
.text:0041389A
.text:0041389A loc_41389A:                             ; CODE XREF: sub_413720+156↑j
.text:0041389A                                         ; sub_413720+1EB↓j
.text:0041389A                 cmp     ecx, 4
.text:0041389D                 jnz     loc_413790
.text:004138A3                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:004138AA                 jz      short loc_4138CC
.text:004138AC
.text:004138AC loc_4138AC:                             ; CODE XREF: sub_413720+1D4↓j
.text:004138AC                                         ; sub_413720+1DC↓j
.text:004138AC                 cmp     ecx, 4
.text:004138AF                 jnz     loc_413790
.text:004138B5                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:004138BC                 jnz     loc_413790
.text:004138C2                 mov     ecx, 12h
.text:004138C7                 jmp     loc_4137A2
.text:004138CC ; ---------------------------------------------------------------------------
.text:004138CC
.text:004138CC loc_4138CC:                             ; CODE XREF: sub_413720+18A↑j
.text:004138CC                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:004138D2                 mov     eax, 0Eh
.text:004138D7                 mov     ds:dword_41B4F0, eax
.text:004138DC                 lea     eax, [edx-7CFh]
.text:004138E2                 cmp     eax, 0B7h ; '·'
.text:004138E7                 ja      short loc_4138F6
.text:004138E9                 mov     edx, 0Fh
.text:004138EE
.text:004138EE loc_4138EE:                             ; CODE XREF: sub_413720+1E3↓j
.text:004138EE                 mov     ds:dword_41B4F0, edx
.text:004138F4                 jmp     short loc_4138AC
.text:004138F6 ; ---------------------------------------------------------------------------
.text:004138F6
.text:004138F6 loc_4138F6:                             ; CODE XREF: sub_413720+1C7↑j
.text:004138F6                 cmp     edx, 886h
.text:004138FC                 jbe     short loc_4138AC
.text:004138FE                 mov     edx, 10h
.text:00413903                 jmp     short loc_4138EE
.text:00413905 ; ---------------------------------------------------------------------------
.text:00413905
.text:00413905 loc_413905:                             ; CODE XREF: sub_413720+16D↑j
.text:00413905                 cmp     edx, 438h
.text:0041390B                 jbe     short loc_41389A
.text:0041390D                 mov     edx, 0Ch
.text:00413912                 jmp     short loc_413894
.text:00413914 ; ---------------------------------------------------------------------------
.text:00413914
.text:00413914 loc_413914:                             ; CODE XREF: sub_413720+3C↑j
.text:00413914                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0041391C                 xor     edx, edx
.text:0041391E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:00413922                 mov     dword_41A090, edx
.text:00413928                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0041392B                 call    GetVersionExA
.text:00413930                 sub     esp, 4
.text:00413933                 xor     edx, edx
.text:00413935                 test    eax, eax
.text:00413937                 jz      loc_413735
.text:0041393D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:00413941                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:00413945                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0041394B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0041394F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:00413955                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:00413959                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0041395F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:00413965                 jmp     loc_413762
.text:00413965 sub_413720      endp
.text:00413965
.text:00413965 ; ---------------------------------------------------------------------------
.text:0041396A                 align 10h
.text:00413970 aNotset         db 'notset',0           ; DATA XREF: .data:off_41A0A0↓o
.text:00413970                                         ; .data:off_41A0A4↓o
.text:00413977 ; ---------------------------------------------------------------------------
.text:00413977
.text:00413977 loc_413977:                             ; DATA XREF: .text:loc_413A15↓o
.text:00413977                 jb      short loc_4139F0
.text:00413979                 add     [eax], ah
.text:0041397B                 or      [eax], eax
.text:0041397D
.text:0041397D loc_41397D:                             ; DATA XREF: .text:00413A68↓o
.text:0041397D                                         ; .text:00413ACE↓o ...
.text:0041397D                 add     [eax], ah
.text:0041397F                 and     eax, 64252064h
.text:00413984                 and     [eax], al
.text:00413986                 lea     esi, [esi+0]
.text:00413989                 lea     edi, [edi+0]
.text:00413990                 push    ebp
.text:00413991                 push    edi
.text:00413992                 push    esi
.text:00413993                 push    ebx
.text:00413994                 sub     esp, 14Ch
.text:0041399A                 mov     edx, off_41A0A0 ; "notset"
.text:004139A0                 mov     edi, [esp+164h]
.text:004139A7                 mov     ebp, [esp+168h]
.text:004139AE                 mov     [esp+4], edx
.text:004139B2                 mov     edx, off_41A0A4 ; "notset"
.text:004139B8                 mov     [esp], edx
.text:004139BB                 call    strcmp
.text:004139C0                 test    eax, eax
.text:004139C2                 jz      loc_413DB0
.text:004139C8
.text:004139C8 loc_4139C8:                             ; CODE XREF: .text:00413DFC↓j
.text:004139C8                 lea     ebx, [esp+20h]
.text:004139CC                 lea     esi, [esi+0]
.text:004139D0
.text:004139D0 loc_4139D0:                             ; CODE XREF: .text:00413A06↓j
.text:004139D0                 mov     [esp+4], ebx
.text:004139D4                 mov     ecx, off_41A0A4 ; "notset"
.text:004139DA                 mov     [esp], ecx
.text:004139DD                 call    loc_4120B0
.text:004139E2                 test    eax, eax
.text:004139E4                 jns     short loc_413A15
.text:004139E6                 mov     eax, off_41A0A4 ; "notset"
.text:004139EB                 cmp     byte ptr [eax], 0
.text:004139EE                 jz      short loc_413A08
.text:004139F0
.text:004139F0 loc_4139F0:                             ; CODE XREF: .text:loc_413977↑j
.text:004139F0                 mov     dword ptr [esp+4], 0
.text:004139F8                 mov     [esp], eax
.text:004139FB                 call    strchr
.text:00413A00                 inc     eax
.text:00413A01                 mov     off_41A0A4, eax ; "notset"
.text:00413A06                 jmp     short loc_4139D0
.text:00413A08 ; ---------------------------------------------------------------------------
.text:00413A08
.text:00413A08 loc_413A08:                             ; CODE XREF: .text:004139EE↑j
.text:00413A08                 xor     eax, eax
.text:00413A0A
.text:00413A0A loc_413A0A:                             ; CODE XREF: .text:00413BCC↓j
.text:00413A0A                 add     esp, 14Ch
.text:00413A10                 pop     ebx
.text:00413A11                 pop     esi
.text:00413A12                 pop     edi
.text:00413A13                 pop     ebp
.text:00413A14                 retn
.text:00413A15 ; ---------------------------------------------------------------------------
.text:00413A15
.text:00413A15 loc_413A15:                             ; CODE XREF: .text:004139E4↑j
.text:00413A15                 mov     dword ptr [edi+0Ch], offset loc_413977
.text:00413A1C                 lea     ecx, [esp+0D6h]
.text:00413A23                 lea     edx, [esp+6Ch]
.text:00413A27                 mov     [edi+4], ecx
.text:00413A2A                 lea     ebx, [esp+7Ch]
.text:00413A2E                 mov     [edi+8], edx
.text:00413A31                 mov     [edi], ebx
.text:00413A33                 mov     [esp], ebp
.text:00413A36                 mov     [esp+4], edi
.text:00413A3A                 call    ___addmntentstr
.text:00413A3F                 mov     [esp], ebp
.text:00413A42                 mov     dword ptr [esp+4], 41397Ah
.text:00413A4A                 call    strspn
.text:00413A4F                 mov     dword ptr [esp+4], 0
.text:00413A57                 mov     ebx, off_41A0A4 ; "notset"
.text:00413A5D                 lea     esi, [eax+ebp]
.text:00413A60                 mov     [esp+1Ch], esi
.text:00413A64                 lea     ebp, [esp+1Ch]
.text:00413A68                 mov     esi, offset loc_41397D
.text:00413A6D                 mov     [esp], ebx
.text:00413A70                 call    strchr
.text:00413A75                 mov     dword ptr [esp+4], 41397Ah
.text:00413A7D                 inc     eax
.text:00413A7E                 mov     off_41A0A4, eax ; "notset"
.text:00413A83                 mov     [esp], ebp
.text:00413A86                 call    sub_415590
.text:00413A8B                 test    eax, eax
.text:00413A8D                 mov     ebx, eax
.text:00413A8F                 jz      short loc_413AB8
.text:00413A91                 mov     edx, eax
.text:00413A93                 mov     ecx, eax
.text:00413A95                 lea     esi, [esi+0]
.text:00413A99                 lea     edi, [edi+0]
.text:00413AA0
.text:00413AA0 loc_413AA0:                             ; CODE XREF: .text:00413AB6↓j
.text:00413AA0                 movzx   eax, byte ptr [edx]
.text:00413AA3                 cmp     al, 5Ch ; '\'
.text:00413AA5                 jz      loc_413D54
.text:00413AAB
.text:00413AAB loc_413AAB:                             ; CODE XREF: .text:00413D5C↓j
.text:00413AAB                                         ; .text:00413D6A↓j ...
.text:00413AAB                 mov     [ecx], al
.text:00413AAD
.text:00413AAD loc_413AAD:                             ; CODE XREF: .text:00413D7E↓j
.text:00413AAD                 inc     ecx
.text:00413AAE
.text:00413AAE loc_413AAE:                             ; CODE XREF: .text:00413D96↓j
.text:00413AAE                 movzx   eax, byte ptr [edx]
.text:00413AB1                 mov     esi, ebx
.text:00413AB3                 inc     edx
.text:00413AB4                 test    al, al
.text:00413AB6                 jnz     short loc_413AA0
.text:00413AB8
.text:00413AB8 loc_413AB8:                             ; CODE XREF: .text:00413A8F↑j
.text:00413AB8                 mov     [edi], esi
.text:00413ABA                 mov     eax, [esp+1Ch]
.text:00413ABE                 test    eax, eax
.text:00413AC0                 jnz     loc_413D3B
.text:00413AC6
.text:00413AC6 loc_413AC6:                             ; CODE XREF: .text:00413D4F↓j
.text:00413AC6                 mov     dword ptr [esp+4], 41397Ah
.text:00413ACE                 mov     esi, offset loc_41397D
.text:00413AD3                 mov     [esp], ebp
.text:00413AD6                 call    sub_415590
.text:00413ADB                 test    eax, eax
.text:00413ADD                 mov     ebx, eax
.text:00413ADF                 jz      short loc_413B08
.text:00413AE1                 mov     edx, eax
.text:00413AE3                 mov     ecx, eax
.text:00413AE5                 lea     esi, [esi+0]
.text:00413AE9                 lea     edi, [edi+0]
.text:00413AF0
.text:00413AF0 loc_413AF0:                             ; CODE XREF: .text:00413B06↓j
.text:00413AF0                 movzx   eax, byte ptr [edx]
.text:00413AF3                 cmp     al, 5Ch ; '\'
.text:00413AF5                 jz      loc_413CE3
.text:00413AFB
.text:00413AFB loc_413AFB:                             ; CODE XREF: .text:00413CEB↓j
.text:00413AFB                                         ; .text:00413CF9↓j ...
.text:00413AFB                 mov     [ecx], al
.text:00413AFD
.text:00413AFD loc_413AFD:                             ; CODE XREF: .text:00413D0D↓j
.text:00413AFD                 inc     ecx
.text:00413AFE
.text:00413AFE loc_413AFE:                             ; CODE XREF: .text:00413D25↓j
.text:00413AFE                 movzx   eax, byte ptr [edx]
.text:00413B01                 mov     esi, ebx
.text:00413B03                 inc     edx
.text:00413B04                 test    al, al
.text:00413B06                 jnz     short loc_413AF0
.text:00413B08
.text:00413B08 loc_413B08:                             ; CODE XREF: .text:00413ADF↑j
.text:00413B08                 mov     [edi+4], esi
.text:00413B0B                 mov     eax, [esp+1Ch]
.text:00413B0F                 test    eax, eax
.text:00413B11                 jnz     loc_413CCA
.text:00413B17
.text:00413B17 loc_413B17:                             ; CODE XREF: .text:00413CDE↓j
.text:00413B17                 mov     dword ptr [esp+4], 41397Ah
.text:00413B1F                 mov     esi, offset loc_41397D
.text:00413B24                 mov     [esp], ebp
.text:00413B27                 call    sub_415590
.text:00413B2C                 test    eax, eax
.text:00413B2E                 mov     ebx, eax
.text:00413B30                 jz      short loc_413B58
.text:00413B32                 mov     edx, eax
.text:00413B34                 mov     ecx, eax
.text:00413B36                 lea     esi, [esi+0]
.text:00413B39                 lea     edi, [edi+0]
.text:00413B40
.text:00413B40 loc_413B40:                             ; CODE XREF: .text:00413B56↓j
.text:00413B40                 movzx   eax, byte ptr [edx]
.text:00413B43                 cmp     al, 5Ch ; '\'
.text:00413B45                 jz      loc_413C72
.text:00413B4B
.text:00413B4B loc_413B4B:                             ; CODE XREF: .text:00413C7A↓j
.text:00413B4B                                         ; .text:00413C88↓j ...
.text:00413B4B                 mov     [ecx], al
.text:00413B4D
.text:00413B4D loc_413B4D:                             ; CODE XREF: .text:00413C9C↓j
.text:00413B4D                 inc     ecx
.text:00413B4E
.text:00413B4E loc_413B4E:                             ; CODE XREF: .text:00413CB4↓j
.text:00413B4E                 movzx   eax, byte ptr [edx]
.text:00413B51                 mov     esi, ebx
.text:00413B53                 inc     edx
.text:00413B54                 test    al, al
.text:00413B56                 jnz     short loc_413B40
.text:00413B58
.text:00413B58 loc_413B58:                             ; CODE XREF: .text:00413B30↑j
.text:00413B58                 mov     [edi+8], esi
.text:00413B5B                 mov     eax, [esp+1Ch]
.text:00413B5F                 test    eax, eax
.text:00413B61                 jnz     loc_413C59
.text:00413B67
.text:00413B67 loc_413B67:                             ; CODE XREF: .text:00413C6D↓j
.text:00413B67                 mov     dword ptr [esp+4], 41397Ah
.text:00413B6F                 mov     esi, offset loc_41397D
.text:00413B74                 mov     [esp], ebp
.text:00413B77                 call    sub_415590
.text:00413B7C                 test    eax, eax
.text:00413B7E                 mov     ebx, eax
.text:00413B80                 jz      short loc_413BA4
.text:00413B82                 mov     edx, eax
.text:00413B84                 mov     ecx, eax
.text:00413B86                 lea     esi, [esi+0]
.text:00413B89                 lea     edi, [edi+0]
.text:00413B90
.text:00413B90 loc_413B90:                             ; CODE XREF: .text:00413BA2↓j
.text:00413B90                 movzx   eax, byte ptr [edx]
.text:00413B93                 cmp     al, 5Ch ; '\'
.text:00413B95                 jz      short loc_413C05
.text:00413B97
.text:00413B97 loc_413B97:                             ; CODE XREF: .text:00413C0D↓j
.text:00413B97                                         ; .text:00413C17↓j ...
.text:00413B97                 mov     [ecx], al
.text:00413B99
.text:00413B99 loc_413B99:                             ; CODE XREF: .text:00413C2B↓j
.text:00413B99                 inc     ecx
.text:00413B9A
.text:00413B9A loc_413B9A:                             ; CODE XREF: .text:00413C43↓j
.text:00413B9A                 movzx   eax, byte ptr [edx]
.text:00413B9D                 mov     esi, ebx
.text:00413B9F                 inc     edx
.text:00413BA0                 test    al, al
.text:00413BA2                 jnz     short loc_413B90
.text:00413BA4
.text:00413BA4 loc_413BA4:                             ; CODE XREF: .text:00413B80↑j
.text:00413BA4                 mov     [edi+0Ch], esi
.text:00413BA7                 xor     eax, eax
.text:00413BA9                 mov     edx, [esp+1Ch]
.text:00413BAD                 test    edx, edx
.text:00413BAF                 jnz     short loc_413BE5
.text:00413BB1
.text:00413BB1 loc_413BB1:                             ; CODE XREF: .text:00413C03↓j
.text:00413BB1                 cmp     eax, 1
.text:00413BB4                 jz      short loc_413BDC
.text:00413BB6                 cmp     eax, 1
.text:00413BB9                 jle     short loc_413BD1
.text:00413BBB
.text:00413BBB loc_413BBB:                             ; CODE XREF: .text:00413BD3↓j
.text:00413BBB                                         ; .text:00413BE3↓j
.text:00413BBB                 mov     edx, [esp+160h]
.text:00413BC2                 mov     [esp], edx
.text:00413BC5                 call    sub_415530
.text:00413BCA                 mov     eax, edi
.text:00413BCC                 jmp     loc_413A0A
.text:00413BD1 ; ---------------------------------------------------------------------------
.text:00413BD1
.text:00413BD1 loc_413BD1:                             ; CODE XREF: .text:00413BB9↑j
.text:00413BD1                 test    eax, eax
.text:00413BD3                 jnz     short loc_413BBB
.text:00413BD5                 mov     dword ptr [edi+10h], 0
.text:00413BDC
.text:00413BDC loc_413BDC:                             ; CODE XREF: .text:00413BB4↑j
.text:00413BDC                 mov     dword ptr [edi+14h], 0
.text:00413BE3                 jmp     short loc_413BBB
.text:00413BE5 ; ---------------------------------------------------------------------------
.text:00413BE5
.text:00413BE5 loc_413BE5:                             ; CODE XREF: .text:00413BAF↑j
.text:00413BE5                 mov     dword ptr [esp+4], 41397Eh
.text:00413BED                 lea     esi, [edi+14h]
.text:00413BF0                 lea     ebp, [edi+10h]
.text:00413BF3                 mov     [esp+0Ch], esi
.text:00413BF7                 mov     [esp+8], ebp
.text:00413BFB                 mov     [esp], edx
.text:00413BFE                 call    sscanf
.text:00413C03                 jmp     short loc_413BB1
.text:00413C05 ; ---------------------------------------------------------------------------
.text:00413C05
.text:00413C05 loc_413C05:                             ; CODE XREF: .text:00413B95↑j
.text:00413C05                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00413C09                 jz      short loc_413C48
.text:00413C0B
.text:00413C0B loc_413C0B:                             ; CODE XREF: .text:00413C4C↓j
.text:00413C0B                                         ; .text:00413C52↓j
.text:00413C0B                 cmp     al, 5Ch ; '\'
.text:00413C0D                 jnz     short loc_413B97
.text:00413C0F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00413C13                 jz      short loc_413C30
.text:00413C15
.text:00413C15 loc_413C15:                             ; CODE XREF: .text:00413C34↓j
.text:00413C15                                         ; .text:00413C3A↓j
.text:00413C15                 cmp     al, 5Ch ; '\'
.text:00413C17                 jnz     loc_413B97
.text:00413C1D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00413C21                 jnz     loc_413B97
.text:00413C27                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00413C2A                 inc     edx
.text:00413C2B                 jmp     loc_413B99
.text:00413C30 ; ---------------------------------------------------------------------------
.text:00413C30
.text:00413C30 loc_413C30:                             ; CODE XREF: .text:00413C13↑j
.text:00413C30                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00413C34                 jnz     short loc_413C15
.text:00413C36                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00413C3A                 jnz     short loc_413C15
.text:00413C3C                 mov     byte ptr [ecx], 9
.text:00413C3F
.text:00413C3F loc_413C3F:                             ; CODE XREF: .text:00413C57↓j
.text:00413C3F                 inc     ecx
.text:00413C40                 add     edx, 3
.text:00413C43                 jmp     loc_413B9A
.text:00413C48 ; ---------------------------------------------------------------------------
.text:00413C48
.text:00413C48 loc_413C48:                             ; CODE XREF: .text:00413C09↑j
.text:00413C48                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00413C4C                 jnz     short loc_413C0B
.text:00413C4E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00413C52                 jnz     short loc_413C0B
.text:00413C54                 mov     byte ptr [ecx], 20h ; ' '
.text:00413C57                 jmp     short loc_413C3F
.text:00413C59 ; ---------------------------------------------------------------------------
.text:00413C59
.text:00413C59 loc_413C59:                             ; CODE XREF: .text:00413B61↑j
.text:00413C59                 mov     dword ptr [esp+4], 41397Ah
.text:00413C61                 mov     [esp], eax
.text:00413C64                 call    strspn
.text:00413C69                 add     [esp+1Ch], eax
.text:00413C6D                 jmp     loc_413B67
.text:00413C72 ; ---------------------------------------------------------------------------
.text:00413C72
.text:00413C72 loc_413C72:                             ; CODE XREF: .text:00413B45↑j
.text:00413C72                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00413C76                 jz      short loc_413CB9
.text:00413C78
.text:00413C78 loc_413C78:                             ; CODE XREF: .text:00413CBD↓j
.text:00413C78                                         ; .text:00413CC3↓j
.text:00413C78                 cmp     al, 5Ch ; '\'
.text:00413C7A                 jnz     loc_413B4B
.text:00413C80                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00413C84                 jz      short loc_413CA1
.text:00413C86
.text:00413C86 loc_413C86:                             ; CODE XREF: .text:00413CA5↓j
.text:00413C86                                         ; .text:00413CAB↓j
.text:00413C86                 cmp     al, 5Ch ; '\'
.text:00413C88                 jnz     loc_413B4B
.text:00413C8E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00413C92                 jnz     loc_413B4B
.text:00413C98                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00413C9B                 inc     edx
.text:00413C9C                 jmp     loc_413B4D
.text:00413CA1 ; ---------------------------------------------------------------------------
.text:00413CA1
.text:00413CA1 loc_413CA1:                             ; CODE XREF: .text:00413C84↑j
.text:00413CA1                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00413CA5                 jnz     short loc_413C86
.text:00413CA7                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00413CAB                 jnz     short loc_413C86
.text:00413CAD                 mov     byte ptr [ecx], 9
.text:00413CB0
.text:00413CB0 loc_413CB0:                             ; CODE XREF: .text:00413CC8↓j
.text:00413CB0                 inc     ecx
.text:00413CB1                 add     edx, 3
.text:00413CB4                 jmp     loc_413B4E
.text:00413CB9 ; ---------------------------------------------------------------------------
.text:00413CB9
.text:00413CB9 loc_413CB9:                             ; CODE XREF: .text:00413C76↑j
.text:00413CB9                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00413CBD                 jnz     short loc_413C78
.text:00413CBF                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00413CC3                 jnz     short loc_413C78
.text:00413CC5                 mov     byte ptr [ecx], 20h ; ' '
.text:00413CC8                 jmp     short loc_413CB0
.text:00413CCA ; ---------------------------------------------------------------------------
.text:00413CCA
.text:00413CCA loc_413CCA:                             ; CODE XREF: .text:00413B11↑j
.text:00413CCA                 mov     dword ptr [esp+4], 41397Ah
.text:00413CD2                 mov     [esp], eax
.text:00413CD5                 call    strspn
.text:00413CDA                 add     [esp+1Ch], eax
.text:00413CDE                 jmp     loc_413B17
.text:00413CE3 ; ---------------------------------------------------------------------------
.text:00413CE3
.text:00413CE3 loc_413CE3:                             ; CODE XREF: .text:00413AF5↑j
.text:00413CE3                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00413CE7                 jz      short loc_413D2A
.text:00413CE9
.text:00413CE9 loc_413CE9:                             ; CODE XREF: .text:00413D2E↓j
.text:00413CE9                                         ; .text:00413D34↓j
.text:00413CE9                 cmp     al, 5Ch ; '\'
.text:00413CEB                 jnz     loc_413AFB
.text:00413CF1                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00413CF5                 jz      short loc_413D12
.text:00413CF7
.text:00413CF7 loc_413CF7:                             ; CODE XREF: .text:00413D16↓j
.text:00413CF7                                         ; .text:00413D1C↓j
.text:00413CF7                 cmp     al, 5Ch ; '\'
.text:00413CF9                 jnz     loc_413AFB
.text:00413CFF                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00413D03                 jnz     loc_413AFB
.text:00413D09                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00413D0C                 inc     edx
.text:00413D0D                 jmp     loc_413AFD
.text:00413D12 ; ---------------------------------------------------------------------------
.text:00413D12
.text:00413D12 loc_413D12:                             ; CODE XREF: .text:00413CF5↑j
.text:00413D12                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00413D16                 jnz     short loc_413CF7
.text:00413D18                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00413D1C                 jnz     short loc_413CF7
.text:00413D1E                 mov     byte ptr [ecx], 9
.text:00413D21
.text:00413D21 loc_413D21:                             ; CODE XREF: .text:00413D39↓j
.text:00413D21                 inc     ecx
.text:00413D22                 add     edx, 3
.text:00413D25                 jmp     loc_413AFE
.text:00413D2A ; ---------------------------------------------------------------------------
.text:00413D2A
.text:00413D2A loc_413D2A:                             ; CODE XREF: .text:00413CE7↑j
.text:00413D2A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00413D2E                 jnz     short loc_413CE9
.text:00413D30                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00413D34                 jnz     short loc_413CE9
.text:00413D36                 mov     byte ptr [ecx], 20h ; ' '
.text:00413D39                 jmp     short loc_413D21
.text:00413D3B ; ---------------------------------------------------------------------------
.text:00413D3B
.text:00413D3B loc_413D3B:                             ; CODE XREF: .text:00413AC0↑j
.text:00413D3B                 mov     dword ptr [esp+4], 41397Ah
.text:00413D43                 mov     [esp], eax
.text:00413D46                 call    strspn
.text:00413D4B                 add     [esp+1Ch], eax
.text:00413D4F                 jmp     loc_413AC6
.text:00413D54 ; ---------------------------------------------------------------------------
.text:00413D54
.text:00413D54 loc_413D54:                             ; CODE XREF: .text:00413AA5↑j
.text:00413D54                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00413D58                 jz      short loc_413D9B
.text:00413D5A
.text:00413D5A loc_413D5A:                             ; CODE XREF: .text:00413D9F↓j
.text:00413D5A                                         ; .text:00413DA5↓j
.text:00413D5A                 cmp     al, 5Ch ; '\'
.text:00413D5C                 jnz     loc_413AAB
.text:00413D62                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00413D66                 jz      short loc_413D83
.text:00413D68
.text:00413D68 loc_413D68:                             ; CODE XREF: .text:00413D87↓j
.text:00413D68                                         ; .text:00413D8D↓j
.text:00413D68                 cmp     al, 5Ch ; '\'
.text:00413D6A                 jnz     loc_413AAB
.text:00413D70                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00413D74                 jnz     loc_413AAB
.text:00413D7A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00413D7D                 inc     edx
.text:00413D7E                 jmp     loc_413AAD
.text:00413D83 ; ---------------------------------------------------------------------------
.text:00413D83
.text:00413D83 loc_413D83:                             ; CODE XREF: .text:00413D66↑j
.text:00413D83                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00413D87                 jnz     short loc_413D68
.text:00413D89                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00413D8D                 jnz     short loc_413D68
.text:00413D8F                 mov     byte ptr [ecx], 9
.text:00413D92
.text:00413D92 loc_413D92:                             ; CODE XREF: .text:00413DAA↓j
.text:00413D92                 inc     ecx
.text:00413D93                 add     edx, 3
.text:00413D96                 jmp     loc_413AAE
.text:00413D9B ; ---------------------------------------------------------------------------
.text:00413D9B
.text:00413D9B loc_413D9B:                             ; CODE XREF: .text:00413D58↑j
.text:00413D9B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00413D9F                 jnz     short loc_413D5A
.text:00413DA1                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00413DA5                 jnz     short loc_413D5A
.text:00413DA7                 mov     byte ptr [ecx], 20h ; ' '
.text:00413DAA                 jmp     short loc_413D92
.text:00413DAA ; ---------------------------------------------------------------------------
.text:00413DAC                 align 10h
.text:00413DB0
.text:00413DB0 loc_413DB0:                             ; CODE XREF: .text:004139C2↑j
.text:00413DB0                 mov     dword ptr [esp+4], 0
.text:00413DB8                 mov     dword ptr [esp], 0
.text:00413DBF                 call    GetLogicalDriveStringsA
.text:00413DC4                 sub     esp, 8
.text:00413DC7                 mov     ebx, eax
.text:00413DC9                 call    GetProcessHeap
.text:00413DCE                 mov     [esp], eax
.text:00413DD1                 mov     [esp+8], ebx
.text:00413DD5                 mov     dword ptr [esp+4], 0
.text:00413DDD                 call    HeapAlloc
.text:00413DE2                 sub     esp, 0Ch
.text:00413DE5                 mov     esi, eax
.text:00413DE7                 mov     [esp+4], eax
.text:00413DEB                 mov     [esp], ebx
.text:00413DEE                 call    GetLogicalDriveStringsA
.text:00413DF3                 mov     off_41A0A4, esi ; "notset"
.text:00413DF9                 sub     esp, 8
.text:00413DFC                 jmp     loc_4139C8
.text:00413DFC ; ---------------------------------------------------------------------------
.text:00413E01 ; const char aSSSSDD[]
.text:00413E01 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:00413E01                                         ; DATA XREF: .text:00413F40↓o
.text:00413E01                                         ; ___addmntentstr+F0↓o
.text:00413E14                 align 10h
.text:00413E20                 push    esi
.text:00413E21                 push    ebx
.text:00413E22                 sub     esp, 44h
.text:00413E25                 mov     ebx, [esp+54h]
.text:00413E29                 mov     esi, [esp+50h]
.text:00413E2D                 mov     edx, [ebx]
.text:00413E2F                 mov     [esp+20h], edx
.text:00413E33                 mov     ecx, [ebx+4]
.text:00413E36                 mov     [esp+24h], ecx
.text:00413E3A                 mov     edx, [ebx+8]
.text:00413E3D                 mov     [esp+28h], edx
.text:00413E41                 mov     ecx, [ebx+0Ch]
.text:00413E44                 mov     [esp+2Ch], ecx
.text:00413E48                 mov     edx, [ebx+10h]
.text:00413E4B                 mov     [esp+30h], edx
.text:00413E4F                 mov     ecx, [ebx+14h]
.text:00413E52                 mov     dword ptr [esp+8], 2
.text:00413E5A                 mov     dword ptr [esp+4], 0
.text:00413E62                 mov     [esp+34h], ecx
.text:00413E66                 mov     [esp], esi
.text:00413E69                 call    sub_415520
.text:00413E6E ; ---------------------------------------------------------------------------
.text:00413E6E                 test    eax, eax
.text:00413E70                 mov     edx, 1
.text:00413E75                 jnz     loc_413F75
.text:00413E7B                 mov     ebx, [esp+20h]
.text:00413E7F                 mov     edx, ebx
.text:00413E81                 movzx   eax, byte ptr [ebx]
.text:00413E84                 test    al, al
.text:00413E86                 jz      short loc_413EB0
.text:00413E88                 nop
.text:00413E89                 lea     esi, [esi+0]
.text:00413E90
.text:00413E90 loc_413E90:                             ; CODE XREF: .text:00413EAE↓j
.text:00413E90                 cmp     al, 20h ; ' '
.text:00413E92                 jz      loc_4140EA
.text:00413E98                 cmp     al, 9
.text:00413E9A                 jz      loc_4140EA
.text:00413EA0                 cmp     al, 5Ch ; '\'
.text:00413EA2                 jz      loc_4140EA
.text:00413EA8                 inc     ebx
.text:00413EA9                 movzx   eax, byte ptr [ebx]
.text:00413EAC                 test    al, al
.text:00413EAE                 jnz     short loc_413E90
.text:00413EB0
.text:00413EB0 loc_413EB0:                             ; CODE XREF: .text:00413E86↑j
.text:00413EB0                                         ; .text:004140EC↓j ...
.text:00413EB0                 mov     ebx, [esp+24h]
.text:00413EB4                 mov     edx, ebx
.text:00413EB6                 movzx   eax, byte ptr [ebx]
.text:00413EB9                 test    al, al
.text:00413EBB                 jz      short loc_413EE0
.text:00413EBD                 lea     esi, [esi+0]
.text:00413EC0
.text:00413EC0 loc_413EC0:                             ; CODE XREF: .text:00413EDE↓j
.text:00413EC0                 cmp     al, 20h ; ' '
.text:00413EC2                 jz      loc_41406A
.text:00413EC8                 cmp     al, 9
.text:00413ECA                 jz      loc_41406A
.text:00413ED0                 cmp     al, 5Ch ; '\'
.text:00413ED2                 jz      loc_41406A
.text:00413ED8                 inc     ebx
.text:00413ED9                 movzx   eax, byte ptr [ebx]
.text:00413EDC                 test    al, al
.text:00413EDE                 jnz     short loc_413EC0
.text:00413EE0
.text:00413EE0 loc_413EE0:                             ; CODE XREF: .text:00413EBB↑j
.text:00413EE0                                         ; .text:0041406C↓j ...
.text:00413EE0                 mov     ebx, [esp+28h]
.text:00413EE4                 mov     edx, ebx
.text:00413EE6                 movzx   eax, byte ptr [ebx]
.text:00413EE9                 test    al, al
.text:00413EEB                 jz      short loc_413F10
.text:00413EED                 lea     esi, [esi+0]
.text:00413EF0
.text:00413EF0 loc_413EF0:                             ; CODE XREF: .text:00413F0E↓j
.text:00413EF0                 cmp     al, 20h ; ' '
.text:00413EF2                 jz      loc_413FEE
.text:00413EF8                 cmp     al, 9
.text:00413EFA                 jz      loc_413FEE
.text:00413F00                 cmp     al, 5Ch ; '\'
.text:00413F02                 jz      loc_413FEE
.text:00413F08                 inc     ebx
.text:00413F09                 movzx   eax, byte ptr [ebx]
.text:00413F0C                 test    al, al
.text:00413F0E                 jnz     short loc_413EF0
.text:00413F10
.text:00413F10 loc_413F10:                             ; CODE XREF: .text:00413EEB↑j
.text:00413F10                                         ; .text:00413FF0↓j ...
.text:00413F10                 mov     edx, [esp+2Ch]
.text:00413F14                 mov     ebx, edx
.text:00413F16                 movzx   eax, byte ptr [edx]
.text:00413F19                 test    al, al
.text:00413F1B                 jz      short loc_413F34
.text:00413F1D                 lea     esi, [esi+0]
.text:00413F20
.text:00413F20 loc_413F20:                             ; CODE XREF: .text:00413F32↓j
.text:00413F20                 cmp     al, 20h ; ' '
.text:00413F22                 jz      short loc_413F7D
.text:00413F24                 cmp     al, 9
.text:00413F26                 jz      short loc_413F7D
.text:00413F28                 cmp     al, 5Ch ; '\'
.text:00413F2A                 jz      short loc_413F7D
.text:00413F2C                 inc     ebx
.text:00413F2D                 movzx   eax, byte ptr [ebx]
.text:00413F30                 test    al, al
.text:00413F32                 jnz     short loc_413F20
.text:00413F34
.text:00413F34 loc_413F34:                             ; CODE XREF: .text:00413F1B↑j
.text:00413F34                                         ; .text:00413F7F↓j ...
.text:00413F34                 mov     [esp+14h], edx
.text:00413F38                 mov     ecx, [esp+34h]
.text:00413F3C                 mov     ebx, [esp+30h]
.text:00413F40                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:00413F48                 mov     edx, [esp+24h]
.text:00413F4C                 mov     [esp+1Ch], ecx
.text:00413F50                 mov     ecx, [esp+28h]
.text:00413F54                 mov     [esp+18h], ebx
.text:00413F58                 mov     ebx, [esp+20h]
.text:00413F5C                 mov     [esp+0Ch], edx
.text:00413F60                 mov     [esp+10h], ecx
.text:00413F64                 mov     [esp+8], ebx
.text:00413F68                 mov     [esp], esi
.text:00413F6B                 call    fprintf
.text:00413F70                 mov     edx, eax
.text:00413F72                 shr     edx, 1Fh
.text:00413F75
.text:00413F75 loc_413F75:                             ; CODE XREF: .text:00413E75↑j
.text:00413F75                 add     esp, 44h
.text:00413F78                 mov     eax, edx
.text:00413F7A                 pop     ebx
.text:00413F7B                 pop     esi
.text:00413F7C                 retn
.text:00413F7D ; ---------------------------------------------------------------------------
.text:00413F7D
.text:00413F7D loc_413F7D:                             ; CODE XREF: .text:00413F22↑j
.text:00413F7D                                         ; .text:00413F26↑j ...
.text:00413F7D                 test    al, al
.text:00413F7F                 jz      short loc_413F34
.text:00413F81                 mov     [esp], edx
.text:00413F84                 mov     ebx, edx
.text:00413F86                 call    strlen
.text:00413F8B                 lea     edx, ds:1[eax*4]
.text:00413F92                 mov     [esp], edx
.text:00413F95                 call    malloc
.text:00413F9A                 mov     [esp+2Ch], eax
.text:00413F9E                 mov     edx, eax
.text:00413FA0
.text:00413FA0 loc_413FA0:                             ; CODE XREF: .text:00413FB8↓j
.text:00413FA0                 movzx   eax, byte ptr [ebx]
.text:00413FA3                 cmp     al, 20h ; ' '
.text:00413FA5                 jz      short loc_413FDD
.text:00413FA7                 cmp     al, 9
.text:00413FA9                 jz      short loc_413FCC
.text:00413FAB                 cmp     al, 5Ch ; '\'
.text:00413FAD                 jz      short loc_413FC3
.text:00413FAF                 mov     [edx], al
.text:00413FB1
.text:00413FB1 loc_413FB1:                             ; CODE XREF: .text:00413FCA↓j
.text:00413FB1                                         ; .text:00413FDB↓j ...
.text:00413FB1                 movzx   ecx, byte ptr [ebx]
.text:00413FB4                 inc     edx
.text:00413FB5                 inc     ebx
.text:00413FB6                 test    cl, cl
.text:00413FB8                 jnz     short loc_413FA0
.text:00413FBA                 mov     edx, [esp+2Ch]
.text:00413FBE                 jmp     loc_413F34
.text:00413FC3 ; ---------------------------------------------------------------------------
.text:00413FC3
.text:00413FC3 loc_413FC3:                             ; CODE XREF: .text:00413FAD↑j
.text:00413FC3                 mov     byte ptr [edx], 5Ch ; '\'
.text:00413FC6                 inc     edx
.text:00413FC7                 mov     byte ptr [edx], 5Ch ; '\'
.text:00413FCA                 jmp     short loc_413FB1
.text:00413FCC ; ---------------------------------------------------------------------------
.text:00413FCC
.text:00413FCC loc_413FCC:                             ; CODE XREF: .text:00413FA9↑j
.text:00413FCC                 mov     byte ptr [edx], 5Ch ; '\'
.text:00413FCF                 inc     edx
.text:00413FD0                 mov     byte ptr [edx], 30h ; '0'
.text:00413FD3                 inc     edx
.text:00413FD4                 mov     byte ptr [edx], 31h ; '1'
.text:00413FD7                 inc     edx
.text:00413FD8                 mov     byte ptr [edx], 32h ; '2'
.text:00413FDB                 jmp     short loc_413FB1
.text:00413FDD ; ---------------------------------------------------------------------------
.text:00413FDD
.text:00413FDD loc_413FDD:                             ; CODE XREF: .text:00413FA5↑j
.text:00413FDD                 mov     byte ptr [edx], 5Ch ; '\'
.text:00413FE0                 inc     edx
.text:00413FE1                 mov     byte ptr [edx], 30h ; '0'
.text:00413FE4                 inc     edx
.text:00413FE5                 mov     byte ptr [edx], 34h ; '4'
.text:00413FE8                 inc     edx
.text:00413FE9                 mov     byte ptr [edx], 30h ; '0'
.text:00413FEC                 jmp     short loc_413FB1
.text:00413FEE ; ---------------------------------------------------------------------------
.text:00413FEE
.text:00413FEE loc_413FEE:                             ; CODE XREF: .text:00413EF2↑j
.text:00413FEE                                         ; .text:00413EFA↑j ...
.text:00413FEE                 test    al, al
.text:00413FF0                 jz      loc_413F10
.text:00413FF6                 mov     [esp], edx
.text:00413FF9                 mov     ebx, edx
.text:00413FFB                 call    strlen
.text:00414000                 lea     edx, ds:1[eax*4]
.text:00414007                 mov     [esp], edx
.text:0041400A                 call    malloc
.text:0041400F                 mov     [esp+28h], eax
.text:00414013                 mov     edx, eax
.text:00414015                 lea     esi, [esi+0]
.text:00414019                 lea     edi, [edi+0]
.text:00414020
.text:00414020 loc_414020:                             ; CODE XREF: .text:00414038↓j
.text:00414020                 movzx   eax, byte ptr [ebx]
.text:00414023                 cmp     al, 20h ; ' '
.text:00414025                 jz      short loc_414059
.text:00414027                 cmp     al, 9
.text:00414029                 jz      short loc_414048
.text:0041402B                 cmp     al, 5Ch ; '\'
.text:0041402D                 jz      short loc_41403F
.text:0041402F                 mov     [edx], al
.text:00414031
.text:00414031 loc_414031:                             ; CODE XREF: .text:00414046↓j
.text:00414031                                         ; .text:00414057↓j ...
.text:00414031                 movzx   ecx, byte ptr [ebx]
.text:00414034                 inc     edx
.text:00414035                 inc     ebx
.text:00414036                 test    cl, cl
.text:00414038                 jnz     short loc_414020
.text:0041403A                 jmp     loc_413F10
.text:0041403F ; ---------------------------------------------------------------------------
.text:0041403F
.text:0041403F loc_41403F:                             ; CODE XREF: .text:0041402D↑j
.text:0041403F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414042                 inc     edx
.text:00414043                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414046                 jmp     short loc_414031
.text:00414048 ; ---------------------------------------------------------------------------
.text:00414048
.text:00414048 loc_414048:                             ; CODE XREF: .text:00414029↑j
.text:00414048                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041404B                 inc     edx
.text:0041404C                 mov     byte ptr [edx], 30h ; '0'
.text:0041404F                 inc     edx
.text:00414050                 mov     byte ptr [edx], 31h ; '1'
.text:00414053                 inc     edx
.text:00414054                 mov     byte ptr [edx], 32h ; '2'
.text:00414057                 jmp     short loc_414031
.text:00414059 ; ---------------------------------------------------------------------------
.text:00414059
.text:00414059 loc_414059:                             ; CODE XREF: .text:00414025↑j
.text:00414059                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041405C                 inc     edx
.text:0041405D                 mov     byte ptr [edx], 30h ; '0'
.text:00414060                 inc     edx
.text:00414061                 mov     byte ptr [edx], 34h ; '4'
.text:00414064                 inc     edx
.text:00414065                 mov     byte ptr [edx], 30h ; '0'
.text:00414068                 jmp     short loc_414031
.text:0041406A ; ---------------------------------------------------------------------------
.text:0041406A
.text:0041406A loc_41406A:                             ; CODE XREF: .text:00413EC2↑j
.text:0041406A                                         ; .text:00413ECA↑j ...
.text:0041406A                 test    al, al
.text:0041406C                 jz      loc_413EE0
.text:00414072                 mov     [esp], edx
.text:00414075                 mov     ebx, edx
.text:00414077                 call    strlen
.text:0041407C                 lea     edx, ds:1[eax*4]
.text:00414083                 mov     [esp], edx
.text:00414086                 call    malloc
.text:0041408B                 mov     [esp+24h], eax
.text:0041408F                 mov     edx, eax
.text:00414091                 jmp     short loc_4140A0
.text:00414091 ; ---------------------------------------------------------------------------
.text:00414093                 align 10h
.text:004140A0
.text:004140A0 loc_4140A0:                             ; CODE XREF: .text:00414091↑j
.text:004140A0                                         ; .text:004140B8↓j
.text:004140A0                 movzx   eax, byte ptr [ebx]
.text:004140A3                 cmp     al, 20h ; ' '
.text:004140A5                 jz      short loc_4140D9
.text:004140A7                 cmp     al, 9
.text:004140A9                 jz      short loc_4140C8
.text:004140AB                 cmp     al, 5Ch ; '\'
.text:004140AD                 jz      short loc_4140BF
.text:004140AF                 mov     [edx], al
.text:004140B1
.text:004140B1 loc_4140B1:                             ; CODE XREF: .text:004140C6↓j
.text:004140B1                                         ; .text:004140D7↓j ...
.text:004140B1                 movzx   ecx, byte ptr [ebx]
.text:004140B4                 inc     edx
.text:004140B5                 inc     ebx
.text:004140B6                 test    cl, cl
.text:004140B8                 jnz     short loc_4140A0
.text:004140BA                 jmp     loc_413EE0
.text:004140BF ; ---------------------------------------------------------------------------
.text:004140BF
.text:004140BF loc_4140BF:                             ; CODE XREF: .text:004140AD↑j
.text:004140BF                 mov     byte ptr [edx], 5Ch ; '\'
.text:004140C2                 inc     edx
.text:004140C3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004140C6                 jmp     short loc_4140B1
.text:004140C8 ; ---------------------------------------------------------------------------
.text:004140C8
.text:004140C8 loc_4140C8:                             ; CODE XREF: .text:004140A9↑j
.text:004140C8                 mov     byte ptr [edx], 5Ch ; '\'
.text:004140CB                 inc     edx
.text:004140CC                 mov     byte ptr [edx], 30h ; '0'
.text:004140CF                 inc     edx
.text:004140D0                 mov     byte ptr [edx], 31h ; '1'
.text:004140D3                 inc     edx
.text:004140D4                 mov     byte ptr [edx], 32h ; '2'
.text:004140D7                 jmp     short loc_4140B1
.text:004140D9 ; ---------------------------------------------------------------------------
.text:004140D9
.text:004140D9 loc_4140D9:                             ; CODE XREF: .text:004140A5↑j
.text:004140D9                 mov     byte ptr [edx], 5Ch ; '\'
.text:004140DC                 inc     edx
.text:004140DD                 mov     byte ptr [edx], 30h ; '0'
.text:004140E0                 inc     edx
.text:004140E1                 mov     byte ptr [edx], 34h ; '4'
.text:004140E4                 inc     edx
.text:004140E5                 mov     byte ptr [edx], 30h ; '0'
.text:004140E8                 jmp     short loc_4140B1
.text:004140EA ; ---------------------------------------------------------------------------
.text:004140EA
.text:004140EA loc_4140EA:                             ; CODE XREF: .text:00413E92↑j
.text:004140EA                                         ; .text:00413E9A↑j ...
.text:004140EA                 test    al, al
.text:004140EC                 jz      loc_413EB0
.text:004140F2                 mov     [esp], edx
.text:004140F5                 mov     ebx, edx
.text:004140F7                 call    strlen
.text:004140FC                 lea     ecx, ds:1[eax*4]
.text:00414103                 mov     [esp], ecx
.text:00414106                 call    malloc
.text:0041410B                 mov     [esp+20h], eax
.text:0041410F                 mov     edx, eax
.text:00414111                 jmp     short loc_414120
.text:00414111 ; ---------------------------------------------------------------------------
.text:00414113                 align 10h
.text:00414120
.text:00414120 loc_414120:                             ; CODE XREF: .text:00414111↑j
.text:00414120                                         ; .text:00414138↓j
.text:00414120                 movzx   eax, byte ptr [ebx]
.text:00414123                 cmp     al, 20h ; ' '
.text:00414125                 jz      short loc_414159
.text:00414127                 cmp     al, 9
.text:00414129                 jz      short loc_414148
.text:0041412B                 cmp     al, 5Ch ; '\'
.text:0041412D                 jz      short loc_41413F
.text:0041412F                 mov     [edx], al
.text:00414131
.text:00414131 loc_414131:                             ; CODE XREF: .text:00414146↓j
.text:00414131                                         ; .text:00414157↓j ...
.text:00414131                 movzx   ecx, byte ptr [ebx]
.text:00414134                 inc     edx
.text:00414135                 inc     ebx
.text:00414136                 test    cl, cl
.text:00414138                 jnz     short loc_414120
.text:0041413A                 jmp     loc_413EB0
.text:0041413F ; ---------------------------------------------------------------------------
.text:0041413F
.text:0041413F loc_41413F:                             ; CODE XREF: .text:0041412D↑j
.text:0041413F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414142                 inc     edx
.text:00414143                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414146                 jmp     short loc_414131
.text:00414148 ; ---------------------------------------------------------------------------
.text:00414148
.text:00414148 loc_414148:                             ; CODE XREF: .text:00414129↑j
.text:00414148                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041414B                 inc     edx
.text:0041414C                 mov     byte ptr [edx], 30h ; '0'
.text:0041414F                 inc     edx
.text:00414150                 mov     byte ptr [edx], 31h ; '1'
.text:00414153                 inc     edx
.text:00414154                 mov     byte ptr [edx], 32h ; '2'
.text:00414157                 jmp     short loc_414131
.text:00414159 ; ---------------------------------------------------------------------------
.text:00414159
.text:00414159 loc_414159:                             ; CODE XREF: .text:00414125↑j
.text:00414159                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041415C                 inc     edx
.text:0041415D                 mov     byte ptr [edx], 30h ; '0'
.text:00414160                 inc     edx
.text:00414161                 mov     byte ptr [edx], 34h ; '4'
.text:00414164                 inc     edx
.text:00414165                 mov     byte ptr [edx], 30h ; '0'
.text:00414168                 jmp     short loc_414131
.text:00414168 ; ---------------------------------------------------------------------------
.text:0041416A                 align 10h
.text:00414170
.text:00414170 ; =============== S U B R O U T I N E =======================================
.text:00414170
.text:00414170 ; Attributes: info_from_lumina
.text:00414170
.text:00414170 ; int __cdecl __addmntentstr(char *, int)
.text:00414170 ___addmntentstr proc near               ; CODE XREF: .text:00413A3A↑p
.text:00414170
.text:00414170 Buffer          = dword ptr -4Ch
.text:00414170 Format          = dword ptr -48h
.text:00414170 var_44          = dword ptr -44h
.text:00414170 var_40          = dword ptr -40h
.text:00414170 var_3C          = dword ptr -3Ch
.text:00414170 var_38          = dword ptr -38h
.text:00414170 var_34          = dword ptr -34h
.text:00414170 var_30          = dword ptr -30h
.text:00414170 var_2C          = dword ptr -2Ch
.text:00414170 var_28          = dword ptr -28h
.text:00414170 var_24          = dword ptr -24h
.text:00414170 Str             = dword ptr -20h
.text:00414170 var_1C          = dword ptr -1Ch
.text:00414170 var_18          = dword ptr -18h
.text:00414170 arg_0           = dword ptr  4
.text:00414170 arg_4           = dword ptr  8
.text:00414170
.text:00414170                 push    ebx
.text:00414171                 sub     esp, 48h
.text:00414174                 mov     edx, [esp+4Ch+arg_4]
.text:00414178                 mov     ecx, [edx]
.text:0041417A                 mov     [esp+4Ch+var_2C], ecx
.text:0041417E                 mov     ebx, [edx+4]
.text:00414181                 mov     [esp+4Ch+var_28], ebx
.text:00414185                 mov     ebx, [edx+8]
.text:00414188                 mov     [esp+4Ch+var_24], ebx
.text:0041418C                 mov     ebx, [edx+0Ch]
.text:0041418F                 mov     [esp+4Ch+Str], ebx
.text:00414193                 mov     ebx, [edx+10h]
.text:00414196                 mov     [esp+4Ch+var_1C], ebx
.text:0041419A                 mov     ebx, [edx+14h]
.text:0041419D                 mov     [esp+4Ch+var_18], ebx
.text:004141A1                 mov     ebx, ecx
.text:004141A3                 movzx   eax, byte ptr [ecx]
.text:004141A6                 test    al, al
.text:004141A8                 jz      loc_414491
.text:004141AE                 mov     esi, esi
.text:004141B0
.text:004141B0 loc_4141B0:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:004141B0                 cmp     al, 20h ; ' '
.text:004141B2                 jz      loc_414410
.text:004141B8                 cmp     al, 9
.text:004141BA                 jz      loc_414410
.text:004141C0                 cmp     al, 5Ch ; '\'
.text:004141C2                 jz      loc_414410
.text:004141C8                 inc     ebx
.text:004141C9                 movzx   eax, byte ptr [ebx]
.text:004141CC                 test    al, al
.text:004141CE                 jnz     short loc_4141B0
.text:004141D0
.text:004141D0 loc_4141D0:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:004141D0                                         ; ___addmntentstr+2EA↓j
.text:004141D0                 mov     ebx, [esp+4Ch+var_28]
.text:004141D4                 mov     edx, ebx
.text:004141D6                 movzx   eax, byte ptr [ebx]
.text:004141D9                 test    al, al
.text:004141DB                 jz      short loc_414200
.text:004141DD                 lea     esi, [esi+0]
.text:004141E0
.text:004141E0 loc_4141E0:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:004141E0                 cmp     al, 20h ; ' '
.text:004141E2                 jz      loc_41438A
.text:004141E8                 cmp     al, 9
.text:004141EA                 jz      loc_41438A
.text:004141F0                 cmp     al, 5Ch ; '\'
.text:004141F2                 jz      loc_41438A
.text:004141F8                 inc     ebx
.text:004141F9                 movzx   eax, byte ptr [ebx]
.text:004141FC                 test    al, al
.text:004141FE                 jnz     short loc_4141E0
.text:00414200
.text:00414200 loc_414200:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:00414200                                         ; ___addmntentstr+21C↓j ...
.text:00414200                 mov     ebx, [esp+4Ch+var_24]
.text:00414204                 mov     edx, ebx
.text:00414206                 movzx   eax, byte ptr [ebx]
.text:00414209                 test    al, al
.text:0041420B                 jz      short loc_414230
.text:0041420D                 lea     esi, [esi+0]
.text:00414210
.text:00414210 loc_414210:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:00414210                 cmp     al, 20h ; ' '
.text:00414212                 jz      loc_41430E
.text:00414218                 cmp     al, 9
.text:0041421A                 jz      loc_41430E
.text:00414220                 cmp     al, 5Ch ; '\'
.text:00414222                 jz      loc_41430E
.text:00414228                 inc     ebx
.text:00414229                 movzx   eax, byte ptr [ebx]
.text:0041422C                 test    al, al
.text:0041422E                 jnz     short loc_414210
.text:00414230
.text:00414230 loc_414230:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:00414230                                         ; ___addmntentstr+1A0↓j ...
.text:00414230                 mov     edx, [esp+4Ch+Str]
.text:00414234                 mov     ebx, edx
.text:00414236                 movzx   eax, byte ptr [edx]
.text:00414239                 test    al, al
.text:0041423B                 jz      short loc_414254
.text:0041423D                 lea     esi, [esi+0]
.text:00414240
.text:00414240 loc_414240:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:00414240                 cmp     al, 20h ; ' '
.text:00414242                 jz      short loc_41429C
.text:00414244                 cmp     al, 9
.text:00414246                 jz      short loc_41429C
.text:00414248                 cmp     al, 5Ch ; '\'
.text:0041424A                 jz      short loc_41429C
.text:0041424C                 inc     ebx
.text:0041424D                 movzx   eax, byte ptr [ebx]
.text:00414250                 test    al, al
.text:00414252                 jnz     short loc_414240
.text:00414254
.text:00414254 loc_414254:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:00414254                                         ; ___addmntentstr+12E↓j ...
.text:00414254                 mov     [esp+4Ch+var_38], edx
.text:00414258                 mov     ebx, [esp+4Ch+var_18]
.text:0041425C                 mov     ecx, [esp+4Ch+var_1C]
.text:00414260                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:00414268                 mov     edx, [esp+4Ch+var_2C]
.text:0041426C                 mov     [esp+4Ch+var_30], ebx
.text:00414270                 mov     ebx, [esp+4Ch+var_24]
.text:00414274                 mov     [esp+4Ch+var_34], ecx
.text:00414278                 mov     ecx, [esp+4Ch+var_28]
.text:0041427C                 mov     [esp+4Ch+var_3C], ebx
.text:00414280                 mov     ebx, [esp+4Ch+arg_0]
.text:00414284                 mov     [esp+4Ch+var_40], ecx
.text:00414288                 mov     [esp+4Ch+var_44], edx
.text:0041428C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0041428F                 call    sprintf
.text:00414294                 add     esp, 48h
.text:00414297                 shr     eax, 1Fh
.text:0041429A                 pop     ebx
.text:0041429B                 retn
.text:0041429C ; ---------------------------------------------------------------------------
.text:0041429C
.text:0041429C loc_41429C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0041429C                                         ; ___addmntentstr+D6↑j ...
.text:0041429C                 test    al, al
.text:0041429E                 jz      short loc_414254
.text:004142A0                 mov     [esp+4Ch+Buffer], edx ; Str
.text:004142A3                 mov     ebx, edx
.text:004142A5                 call    strlen
.text:004142AA                 lea     edx, ds:1[eax*4]
.text:004142B1                 mov     [esp+4Ch+Buffer], edx ; Size
.text:004142B4                 call    malloc
.text:004142B9                 mov     [esp+4Ch+Str], eax
.text:004142BD                 mov     edx, eax
.text:004142BF                 nop
.text:004142C0
.text:004142C0 loc_4142C0:                             ; CODE XREF: ___addmntentstr+168↓j
.text:004142C0                 movzx   eax, byte ptr [ebx]
.text:004142C3                 cmp     al, 20h ; ' '
.text:004142C5                 jz      short loc_4142FD
.text:004142C7                 cmp     al, 9
.text:004142C9                 jz      short loc_4142EC
.text:004142CB                 cmp     al, 5Ch ; '\'
.text:004142CD                 jz      short loc_4142E3
.text:004142CF                 mov     [edx], al
.text:004142D1
.text:004142D1 loc_4142D1:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:004142D1                                         ; ___addmntentstr+18B↓j ...
.text:004142D1                 movzx   ecx, byte ptr [ebx]
.text:004142D4                 inc     edx
.text:004142D5                 inc     ebx
.text:004142D6                 test    cl, cl
.text:004142D8                 jnz     short loc_4142C0
.text:004142DA                 mov     edx, [esp+4Ch+Str]
.text:004142DE                 jmp     loc_414254
.text:004142E3 ; ---------------------------------------------------------------------------
.text:004142E3
.text:004142E3 loc_4142E3:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:004142E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004142E6                 inc     edx
.text:004142E7                 mov     byte ptr [edx], 5Ch ; '\'
.text:004142EA                 jmp     short loc_4142D1
.text:004142EC ; ---------------------------------------------------------------------------
.text:004142EC
.text:004142EC loc_4142EC:                             ; CODE XREF: ___addmntentstr+159↑j
.text:004142EC                 mov     byte ptr [edx], 5Ch ; '\'
.text:004142EF                 inc     edx
.text:004142F0                 mov     byte ptr [edx], 30h ; '0'
.text:004142F3                 inc     edx
.text:004142F4                 mov     byte ptr [edx], 31h ; '1'
.text:004142F7                 inc     edx
.text:004142F8                 mov     byte ptr [edx], 32h ; '2'
.text:004142FB                 jmp     short loc_4142D1
.text:004142FD ; ---------------------------------------------------------------------------
.text:004142FD
.text:004142FD loc_4142FD:                             ; CODE XREF: ___addmntentstr+155↑j
.text:004142FD                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414300                 inc     edx
.text:00414301                 mov     byte ptr [edx], 30h ; '0'
.text:00414304                 inc     edx
.text:00414305                 mov     byte ptr [edx], 34h ; '4'
.text:00414308                 inc     edx
.text:00414309                 mov     byte ptr [edx], 30h ; '0'
.text:0041430C                 jmp     short loc_4142D1
.text:0041430E ; ---------------------------------------------------------------------------
.text:0041430E
.text:0041430E loc_41430E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0041430E                                         ; ___addmntentstr+AA↑j ...
.text:0041430E                 test    al, al
.text:00414310                 jz      loc_414230
.text:00414316                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00414319                 mov     ebx, edx
.text:0041431B                 call    strlen
.text:00414320                 lea     edx, ds:1[eax*4]
.text:00414327                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041432A                 call    malloc
.text:0041432F                 mov     [esp+4Ch+var_24], eax
.text:00414333                 mov     edx, eax
.text:00414335                 lea     esi, [esi+0]
.text:00414339                 lea     edi, [edi+0]
.text:00414340
.text:00414340 loc_414340:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:00414340                 movzx   eax, byte ptr [ebx]
.text:00414343                 cmp     al, 20h ; ' '
.text:00414345                 jz      short loc_414379
.text:00414347                 cmp     al, 9
.text:00414349                 jz      short loc_414368
.text:0041434B                 cmp     al, 5Ch ; '\'
.text:0041434D                 jz      short loc_41435F
.text:0041434F                 mov     [edx], al
.text:00414351
.text:00414351 loc_414351:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:00414351                                         ; ___addmntentstr+207↓j ...
.text:00414351                 movzx   ecx, byte ptr [ebx]
.text:00414354                 inc     edx
.text:00414355                 inc     ebx
.text:00414356                 test    cl, cl
.text:00414358                 jnz     short loc_414340
.text:0041435A                 jmp     loc_414230
.text:0041435F ; ---------------------------------------------------------------------------
.text:0041435F
.text:0041435F loc_41435F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0041435F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414362                 inc     edx
.text:00414363                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414366                 jmp     short loc_414351
.text:00414368 ; ---------------------------------------------------------------------------
.text:00414368
.text:00414368 loc_414368:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:00414368                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041436B                 inc     edx
.text:0041436C                 mov     byte ptr [edx], 30h ; '0'
.text:0041436F                 inc     edx
.text:00414370                 mov     byte ptr [edx], 31h ; '1'
.text:00414373                 inc     edx
.text:00414374                 mov     byte ptr [edx], 32h ; '2'
.text:00414377                 jmp     short loc_414351
.text:00414379 ; ---------------------------------------------------------------------------
.text:00414379
.text:00414379 loc_414379:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:00414379                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041437C                 inc     edx
.text:0041437D                 mov     byte ptr [edx], 30h ; '0'
.text:00414380                 inc     edx
.text:00414381                 mov     byte ptr [edx], 34h ; '4'
.text:00414384                 inc     edx
.text:00414385                 mov     byte ptr [edx], 30h ; '0'
.text:00414388                 jmp     short loc_414351
.text:0041438A ; ---------------------------------------------------------------------------
.text:0041438A
.text:0041438A loc_41438A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0041438A                                         ; ___addmntentstr+7A↑j ...
.text:0041438A                 test    al, al
.text:0041438C                 jz      loc_414200
.text:00414392                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00414395                 mov     ebx, edx
.text:00414397                 call    strlen
.text:0041439C                 lea     edx, ds:1[eax*4]
.text:004143A3                 mov     [esp+4Ch+Buffer], edx ; Size
.text:004143A6                 call    malloc
.text:004143AB                 mov     [esp+4Ch+var_28], eax
.text:004143AF                 mov     edx, eax
.text:004143B1                 jmp     short loc_4143C0
.text:004143B1 ; ---------------------------------------------------------------------------
.text:004143B3                 align 10h
.text:004143C0
.text:004143C0 loc_4143C0:                             ; CODE XREF: ___addmntentstr+241↑j
.text:004143C0                                         ; ___addmntentstr+268↓j
.text:004143C0                 movzx   eax, byte ptr [ebx]
.text:004143C3                 cmp     al, 20h ; ' '
.text:004143C5                 jz      short loc_4143F9
.text:004143C7                 cmp     al, 9
.text:004143C9                 jz      short loc_4143E8
.text:004143CB                 cmp     al, 5Ch ; '\'
.text:004143CD                 jz      short loc_4143DF
.text:004143CF                 mov     [edx], al
.text:004143D1
.text:004143D1 loc_4143D1:                             ; CODE XREF: ___addmntentstr+276↓j
.text:004143D1                                         ; ___addmntentstr+287↓j ...
.text:004143D1                 movzx   ecx, byte ptr [ebx]
.text:004143D4                 inc     edx
.text:004143D5                 inc     ebx
.text:004143D6                 test    cl, cl
.text:004143D8                 jnz     short loc_4143C0
.text:004143DA                 jmp     loc_414200
.text:004143DF ; ---------------------------------------------------------------------------
.text:004143DF
.text:004143DF loc_4143DF:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:004143DF                 mov     byte ptr [edx], 5Ch ; '\'
.text:004143E2                 inc     edx
.text:004143E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004143E6                 jmp     short loc_4143D1
.text:004143E8 ; ---------------------------------------------------------------------------
.text:004143E8
.text:004143E8 loc_4143E8:                             ; CODE XREF: ___addmntentstr+259↑j
.text:004143E8                 mov     byte ptr [edx], 5Ch ; '\'
.text:004143EB                 inc     edx
.text:004143EC                 mov     byte ptr [edx], 30h ; '0'
.text:004143EF                 inc     edx
.text:004143F0                 mov     byte ptr [edx], 31h ; '1'
.text:004143F3                 inc     edx
.text:004143F4                 mov     byte ptr [edx], 32h ; '2'
.text:004143F7                 jmp     short loc_4143D1
.text:004143F9 ; ---------------------------------------------------------------------------
.text:004143F9
.text:004143F9 loc_4143F9:                             ; CODE XREF: ___addmntentstr+255↑j
.text:004143F9                 mov     byte ptr [edx], 5Ch ; '\'
.text:004143FC                 inc     edx
.text:004143FD                 mov     byte ptr [edx], 30h ; '0'
.text:00414400                 inc     edx
.text:00414401                 mov     byte ptr [edx], 34h ; '4'
.text:00414404                 inc     edx
.text:00414405                 mov     byte ptr [edx], 30h ; '0'
.text:00414408                 jmp     short loc_4143D1
.text:00414408 ; ---------------------------------------------------------------------------
.text:0041440A                 align 10h
.text:00414410
.text:00414410 loc_414410:                             ; CODE XREF: ___addmntentstr+42↑j
.text:00414410                                         ; ___addmntentstr+4A↑j ...
.text:00414410                 test    al, al
.text:00414412                 jz      loc_4141D0
.text:00414418                 mov     ebx, [esp+4Ch+var_2C]
.text:0041441C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0041441F                 call    strlen
.text:00414424                 lea     edx, ds:1[eax*4]
.text:0041442B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041442E                 call    malloc
.text:00414433                 mov     [esp+4Ch+var_2C], eax
.text:00414437                 mov     edx, eax
.text:00414439                 lea     esi, [esi+0]
.text:00414440
.text:00414440 loc_414440:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:00414440                 movzx   eax, byte ptr [ebx]
.text:00414443                 cmp     al, 20h ; ' '
.text:00414445                 jz      short loc_414480
.text:00414447                 cmp     al, 9
.text:00414449                 jz      short loc_414468
.text:0041444B                 cmp     al, 5Ch ; '\'
.text:0041444D                 jz      short loc_41445F
.text:0041444F                 mov     [edx], al
.text:00414451
.text:00414451 loc_414451:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:00414451                                         ; ___addmntentstr+307↓j ...
.text:00414451                 movzx   ecx, byte ptr [ebx]
.text:00414454                 inc     edx
.text:00414455                 inc     ebx
.text:00414456                 test    cl, cl
.text:00414458                 jnz     short loc_414440
.text:0041445A                 jmp     loc_4141D0
.text:0041445F ; ---------------------------------------------------------------------------
.text:0041445F
.text:0041445F loc_41445F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0041445F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414462                 inc     edx
.text:00414463                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414466                 jmp     short loc_414451
.text:00414468 ; ---------------------------------------------------------------------------
.text:00414468
.text:00414468 loc_414468:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:00414468                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041446B                 inc     edx
.text:0041446C                 mov     byte ptr [edx], 30h ; '0'
.text:0041446F                 inc     edx
.text:00414470                 mov     byte ptr [edx], 31h ; '1'
.text:00414473                 inc     edx
.text:00414474                 mov     byte ptr [edx], 32h ; '2'
.text:00414477                 jmp     short loc_414451
.text:00414477 ; ---------------------------------------------------------------------------
.text:00414479                 align 10h
.text:00414480
.text:00414480 loc_414480:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:00414480                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414483                 inc     edx
.text:00414484                 mov     byte ptr [edx], 30h ; '0'
.text:00414487                 inc     edx
.text:00414488                 mov     byte ptr [edx], 34h ; '4'
.text:0041448B                 inc     edx
.text:0041448C                 mov     byte ptr [edx], 30h ; '0'
.text:0041448F                 jmp     short loc_414451
.text:00414491 ; ---------------------------------------------------------------------------
.text:00414491
.text:00414491 loc_414491:                             ; CODE XREF: ___addmntentstr+38↑j
.text:00414491                 movzx   eax, byte ptr [ecx]
.text:00414494                 jmp     loc_414410
.text:00414494 ___addmntentstr endp
.text:00414494
.text:00414494 ; ---------------------------------------------------------------------------
.text:00414499                 align 10h
.text:004144A0
.text:004144A0 ; =============== S U B R O U T I N E =======================================
.text:004144A0
.text:004144A0
.text:004144A0 sub_4144A0      proc near               ; CODE XREF: sub_4116E0+99↑p
.text:004144A0
.text:004144A0 nBufferLength   = dword ptr -1Ch
.text:004144A0 lpBuffer        = dword ptr -18h
.text:004144A0 dwBytes         = dword ptr -14h
.text:004144A0 var_8           = dword ptr -8
.text:004144A0 var_4           = dword ptr -4
.text:004144A0
.text:004144A0                 sub     esp, 1Ch
.text:004144A3                 mov     [esp+1Ch+var_8], ebx
.text:004144A7                 mov     [esp+1Ch+var_4], esi
.text:004144AB                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:004144B3                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:004144BA                 call    GetLogicalDriveStringsA
.text:004144BF                 sub     esp, 8
.text:004144C2                 mov     ebx, eax
.text:004144C4                 call    GetProcessHeap
.text:004144C9                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:004144CC                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:004144D0                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:004144D8                 call    HeapAlloc
.text:004144DD                 sub     esp, 0Ch
.text:004144E0                 mov     esi, eax
.text:004144E2                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:004144E5                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:004144E9                 call    GetLogicalDriveStringsA
.text:004144EE                 sub     esp, 8
.text:004144F1                 mov     eax, esi
.text:004144F3                 mov     ebx, [esp+1Ch+var_8]
.text:004144F7                 mov     esi, [esp+1Ch+var_4]
.text:004144FB                 add     esp, 1Ch
.text:004144FE                 retn
.text:004144FE sub_4144A0      endp
.text:004144FE
.text:004144FF
.text:004144FF ; =============== S U B R O U T I N E =======================================
.text:004144FF
.text:004144FF
.text:004144FF ; int __cdecl sub_4144FF(char *, char *)
.text:004144FF sub_4144FF      proc near               ; DATA XREF: sub_4144FF:loc_41458D↓o
.text:004144FF
.text:004144FF FileName        = dword ptr -1Ch
.text:004144FF Mode            = dword ptr -18h
.text:004144FF dwBytes         = dword ptr -14h
.text:004144FF arg_0           = dword ptr  4
.text:004144FF arg_4           = dword ptr  8
.text:004144FF
.text:004144FF                 ja      short $+2
.text:00414501
.text:00414501 loc_414501:                             ; CODE XREF: sub_4144FF↑j
.text:00414501                 jmp     short loc_414510
.text:00414501 ; ---------------------------------------------------------------------------
.text:00414503                 align 10h
.text:00414510
.text:00414510 loc_414510:                             ; CODE XREF: sub_4144FF:loc_414501↑j
.text:00414510                 push    edi
.text:00414511                 push    esi
.text:00414512                 push    ebx
.text:00414513                 sub     esp, 10h
.text:00414516                 mov     ebx, [esp+1Ch+arg_0]
.text:0041451A                 mov     edx, [esp+1Ch+arg_4]
.text:0041451E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:00414521                 mov     [esp+1Ch+Mode], edx ; Mode
.text:00414525                 call    fopen
.text:0041452A                 test    eax, eax
.text:0041452C                 mov     edi, eax
.text:0041452E                 jz      short loc_41458D
.text:00414530
.text:00414530 loc_414530:                             ; CODE XREF: sub_4144FF+A2↓j
.text:00414530                                         ; sub_4144FF+AB↓j
.text:00414530                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:00414538                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0041453F                 call    GetLogicalDriveStringsA
.text:00414544                 sub     esp, 8
.text:00414547                 mov     esi, eax
.text:00414549                 call    GetProcessHeap
.text:0041454E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:00414551                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:00414555                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0041455D                 call    HeapAlloc
.text:00414562                 sub     esp, 0Ch
.text:00414565                 mov     ebx, eax
.text:00414567                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0041456A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0041456E                 call    GetLogicalDriveStringsA
.text:00414573                 mov     off_41A0A4, ebx ; "notset"
.text:00414579                 sub     esp, 8
.text:0041457C                 xor     eax, eax
.text:0041457E                 test    ebx, ebx
.text:00414580                 setz    al
.text:00414583                 add     esp, 10h
.text:00414586                 pop     ebx
.text:00414587                 dec     eax
.text:00414588                 and     eax, edi
.text:0041458A                 pop     esi
.text:0041458B                 pop     edi
.text:0041458C                 retn
.text:0041458D ; ---------------------------------------------------------------------------
.text:0041458D
.text:0041458D loc_41458D:                             ; CODE XREF: sub_4144FF+2F↑j
.text:0041458D                 mov     [esp+1Ch+Mode], offset sub_4144FF ; Mode
.text:00414595                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:00414598                 call    fopen
.text:0041459D                 test    eax, eax
.text:0041459F                 mov     edi, eax
.text:004145A1                 jnz     short loc_414530
.text:004145A3                 call    sub_415630
.text:004145A8                 mov     edi, eax
.text:004145AA                 jmp     short loc_414530
.text:004145AA sub_4144FF      endp
.text:004145AA
.text:004145AA ; ---------------------------------------------------------------------------
.text:004145AC                 align 10h
.text:004145B0                 sub     esp, 0Ch
.text:004145B3                 mov     eax, [esp+10h]
.text:004145B7                 test    eax, eax
.text:004145B9                 jz      short loc_4145C3
.text:004145BB                 mov     [esp], eax
.text:004145BE                 call    fclose
.text:004145C3
.text:004145C3 loc_4145C3:                             ; CODE XREF: .text:004145B9↑j
.text:004145C3                 call    GetProcessHeap
.text:004145C8                 mov     [esp], eax
.text:004145CB                 mov     ecx, off_41A0A4 ; "notset"
.text:004145D1                 mov     dword ptr [esp+4], 0
.text:004145D9                 mov     [esp+8], ecx
.text:004145DD                 call    HeapFree
.text:004145E2                 mov     edx, off_41A0A0 ; "notset"
.text:004145E8                 sub     esp, 0Ch
.text:004145EB                 mov     eax, 1
.text:004145F0                 mov     off_41A0A4, edx ; "notset"
.text:004145F6                 add     esp, 0Ch
.text:004145F9                 retn
.text:004145F9 ; ---------------------------------------------------------------------------
.text:004145FA                 align 10h
.text:00414600                 push    edi
.text:00414601                 push    esi
.text:00414602                 push    ebx
.text:00414603                 sub     esp, 10h
.text:00414606                 mov     edi, [esp+24h]
.text:0041460A                 mov     [esp], edi
.text:0041460D                 call    strlen
.text:00414612                 mov     edx, [esp+20h]
.text:00414616                 mov     esi, eax
.text:00414618                 mov     ebx, [edx+0Ch]
.text:0041461B                 nop
.text:0041461C                 lea     esi, [esi+0]
.text:00414620
.text:00414620 loc_414620:                             ; CODE XREF: .text:00414651↓j
.text:00414620                 mov     [esp+4], edi
.text:00414624                 mov     [esp], ebx
.text:00414627                 call    strstr
.text:0041462C                 test    eax, eax
.text:0041462E                 jz      short loc_414653
.text:00414630                 cmp     eax, ebx
.text:00414632                 jz      short loc_414655
.text:00414634                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:00414638                 jz      short loc_414660
.text:0041463A
.text:0041463A loc_41463A:                             ; CODE XREF: .text:00414670↓j
.text:0041463A                 mov     [esp], ebx
.text:0041463D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:00414645                 call    strchr
.text:0041464A                 test    eax, eax
.text:0041464C                 mov     ebx, eax
.text:0041464E                 jz      short loc_414653
.text:00414650                 inc     ebx
.text:00414651                 jmp     short loc_414620
.text:00414653 ; ---------------------------------------------------------------------------
.text:00414653
.text:00414653 loc_414653:                             ; CODE XREF: .text:0041462E↑j
.text:00414653                                         ; .text:0041464E↑j
.text:00414653                 xor     eax, eax
.text:00414655
.text:00414655 loc_414655:                             ; CODE XREF: .text:00414632↑j
.text:00414655                                         ; .text:00414666↓j ...
.text:00414655                 add     esp, 10h
.text:00414658                 pop     ebx
.text:00414659                 pop     esi
.text:0041465A                 pop     edi
.text:0041465B                 retn
.text:0041465B ; ---------------------------------------------------------------------------
.text:0041465C                 align 10h
.text:00414660
.text:00414660 loc_414660:                             ; CODE XREF: .text:00414638↑j
.text:00414660                 movzx   edx, byte ptr [esi+eax]
.text:00414664                 test    dl, dl
.text:00414666                 jz      short loc_414655
.text:00414668                 cmp     dl, 3Dh ; '='
.text:0041466B                 jz      short loc_414655
.text:0041466D                 cmp     dl, 2Ch ; ','
.text:00414670                 jnz     short loc_41463A
.text:00414672                 jmp     short loc_414655
.text:00414672 ; ---------------------------------------------------------------------------
.text:00414674                 align 10h
.text:00414680
.text:00414680 ; =============== S U B R O U T I N E =======================================
.text:00414680
.text:00414680
.text:00414680 ; int __cdecl sub_414680(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:00414680 sub_414680      proc near               ; CODE XREF: sub_414800+93↓p
.text:00414680
.text:00414680 pvReserved      = dword ptr -35Ch
.text:00414680 pUnkOuter       = dword ptr -358h
.text:00414680 dwClsContext    = dword ptr -354h
.text:00414680 riid            = dword ptr -350h
.text:00414680 ppv             = dword ptr -34Ch
.text:00414680 cchWideChar     = dword ptr -348h
.text:00414680 var_334         = byte ptr -334h
.text:00414680 var_330         = dword ptr -330h
.text:00414680 String2         = byte ptr -32Ch
.text:00414680 WideCharStr     = word ptr -21Ch
.text:00414680 lpMultiByteStr  = dword ptr  4
.text:00414680 lpString1       = dword ptr  8
.text:00414680
.text:00414680                 push    edi
.text:00414681                 push    esi
.text:00414682                 push    ebx
.text:00414683                 sub     esp, 350h
.text:00414689                 mov     edi, [esp+35Ch+lpString1]
.text:00414690                 mov     byte ptr [edi], 0
.text:00414693                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0041469A                 call    OleInitialize
.text:0041469F                 sub     esp, 4
.text:004146A2                 cmp     eax, 1
.text:004146A5                 ja      loc_4147DF
.text:004146AB                 mov     [esp+35Ch+riid], offset riid ; riid
.text:004146B3                 lea     ecx, [esp+35Ch+var_330]
.text:004146B7                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:004146BB                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:004146C3                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:004146CB                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:004146D2                 call    CoCreateInstance
.text:004146D7                 sub     esp, 14h
.text:004146DA                 test    eax, eax
.text:004146DC                 js      loc_4147DF
.text:004146E2                 mov     ebx, [esp+35Ch+var_330]
.text:004146E6                 lea     edx, [esp+35Ch+var_334]
.text:004146EA                 mov     esi, [ebx]
.text:004146EC                 mov     [esp+35Ch+dwClsContext], edx
.text:004146F0                 mov     [esp+35Ch+pvReserved], ebx
.text:004146F3                 xor     ebx, ebx
.text:004146F5                 mov     [esp+35Ch+pUnkOuter], offset dword_417490
.text:004146FD                 call    dword ptr [esi]
.text:004146FF                 sub     esp, 0Ch
.text:00414702                 lea     esi, [esp+35Ch+WideCharStr]
.text:00414709                 call    AreFileApisANSI
.text:0041470E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:00414716                 test    eax, eax
.text:00414718                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0041471F                 setz    bl
.text:00414722                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00414726                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0041472E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:00414732                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0041473A                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0041473D                 call    MultiByteToWideChar
.text:00414742                 sub     esp, 18h
.text:00414745                 test    eax, eax
.text:00414747                 js      loc_4147DF
.text:0041474D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:00414751                 mov     ebx, [edx]
.text:00414753                 mov     [esp+35Ch+dwClsContext], 0
.text:0041475B                 mov     [esp+35Ch+pUnkOuter], esi
.text:0041475F                 mov     [esp+35Ch+pvReserved], edx
.text:00414762                 call    dword ptr [ebx+14h]
.text:00414765                 sub     esp, 0Ch
.text:00414768                 test    eax, eax
.text:0041476A                 js      short loc_4147DF
.text:0041476C                 mov     ebx, [esp+35Ch+var_330]
.text:00414770                 lea     esi, [esp+35Ch+String2]
.text:00414774                 mov     ecx, [ebx]
.text:00414776                 mov     [esp+35Ch+pvReserved], ebx
.text:00414779                 mov     [esp+35Ch+ppv], 0
.text:00414781                 mov     [esp+35Ch+riid], 0
.text:00414789                 mov     [esp+35Ch+dwClsContext], 104h
.text:00414791                 mov     [esp+35Ch+pUnkOuter], esi
.text:00414795                 call    dword ptr [ecx+0Ch]
.text:00414798                 sub     esp, 14h
.text:0041479B                 mov     ebx, eax
.text:0041479D                 test    eax, eax
.text:0041479F                 js      short loc_4147DF
.text:004147A1                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:004147A5                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:004147A8                 call    lstrcpyA
.text:004147AD                 sub     esp, 8
.text:004147B0                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:004147B4                 mov     ecx, [edi]
.text:004147B6                 mov     [esp+35Ch+pvReserved], edi
.text:004147B9                 call    dword ptr [ecx+8]
.text:004147BC                 sub     esp, 4
.text:004147BF                 mov     edx, [esp+35Ch+var_330]
.text:004147C3                 mov     esi, [edx]
.text:004147C5                 mov     [esp+35Ch+pvReserved], edx
.text:004147C8                 call    dword ptr [esi+8]
.text:004147CB                 sub     esp, 4
.text:004147CE                 call    CoUninitialize
.text:004147D3                 mov     eax, ebx
.text:004147D5
.text:004147D5 loc_4147D5:                             ; CODE XREF: sub_414680+177↓j
.text:004147D5                 add     esp, 350h
.text:004147DB                 pop     ebx
.text:004147DC                 pop     esi
.text:004147DD                 pop     edi
.text:004147DE                 retn
.text:004147DF ; ---------------------------------------------------------------------------
.text:004147DF
.text:004147DF loc_4147DF:                             ; CODE XREF: sub_414680+25↑j
.text:004147DF                                         ; sub_414680+5C↑j ...
.text:004147DF                 call    sub_412BE0
.text:004147E4                 mov     edi, eax
.text:004147E6                 call    _errno
.text:004147EB                 mov     [eax], edi
.text:004147ED                 call    CoUninitialize
.text:004147F2                 mov     eax, 0FFFFFFFFh
.text:004147F7                 jmp     short loc_4147D5
.text:004147F7 sub_414680      endp
.text:004147F7
.text:004147F7 ; ---------------------------------------------------------------------------
.text:004147F9 ; const char aLnk_0[]
.text:004147F9 aLnk_0          db '.lnk',0             ; DATA XREF: sub_414800+53↓o
.text:004147F9                                         ; sub_414800:loc_414865↓o
.text:004147FE                 align 10h
.text:00414800
.text:00414800 ; =============== S U B R O U T I N E =======================================
.text:00414800
.text:00414800
.text:00414800 ; int __cdecl sub_414800(char *, LPSTR lpString1)
.text:00414800 sub_414800      proc near               ; CODE XREF: sub_4122B0+96↑p
.text:00414800
.text:00414800 Str             = dword ptr -1Ch
.text:00414800 Source          = dword ptr -18h
.text:00414800 Destination     = dword ptr -14h
.text:00414800 arg_0           = dword ptr  4
.text:00414800 lpString1       = dword ptr  8
.text:00414800
.text:00414800                 push    ebp
.text:00414801                 push    edi
.text:00414802                 push    esi
.text:00414803                 push    ebx
.text:00414804                 sub     esp, 0Ch
.text:00414807                 mov     ebx, [esp+1Ch+arg_0]
.text:0041480B                 mov     ebp, [esp+1Ch+lpString1]
.text:0041480F                 mov     [esp+1Ch+Str], ebx ; Str
.text:00414812                 call    strlen
.text:00414817                 add     eax, 5
.text:0041481A                 mov     [esp+1Ch+Str], eax ; Size
.text:0041481D                 call    malloc
.text:00414822                 mov     [esp+1Ch+Destination], eax
.text:00414826                 test    eax, eax
.text:00414828                 jz      loc_4148D0
.text:0041482E                 mov     [esp+1Ch+Source], ebx ; Source
.text:00414832                 mov     [esp+1Ch+Str], eax ; Destination
.text:00414835                 call    strcpy
.text:0041483A                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:00414842                 mov     eax, [esp+1Ch+Destination]
.text:00414846                 mov     [esp+1Ch+Str], eax ; Str
.text:00414849                 call    strrchr
.text:0041484E                 test    eax, eax
.text:00414850                 jz      short loc_414865
.text:00414852                 cld
.text:00414853                 mov     ebx, offset aLnk_0 ; ".lnk"
.text:00414858                 mov     ecx, 5
.text:0041485D                 mov     esi, eax
.text:0041485F                 mov     edi, ebx
.text:00414861                 repe cmpsb
.text:00414863                 jz      short loc_414879
.text:00414865
.text:00414865 loc_414865:                             ; CODE XREF: sub_414800+50↑j
.text:00414865                 mov     [esp+1Ch+Source], offset aLnk_0 ; ".lnk"
.text:0041486D                 mov     edx, [esp+1Ch+Destination]
.text:00414871                 mov     [esp+1Ch+Str], edx ; Destination
.text:00414874                 call    strcat
.text:00414879
.text:00414879 loc_414879:                             ; CODE XREF: sub_414800+63↑j
.text:00414879                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:00414880                 call    SetErrorMode
.text:00414885                 sub     esp, 4
.text:00414888                 mov     ebx, [esp+1Ch+Destination]
.text:0041488C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:00414890                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:00414893                 call    sub_414680
.text:00414898                 mov     [esp+1Ch+Str], ebx ; Block
.text:0041489B                 mov     esi, eax
.text:0041489D                 call    free
.text:004148A2                 mov     [esp+1Ch+Str], 0 ; uMode
.text:004148A9                 call    SetErrorMode
.text:004148AE                 sub     esp, 4
.text:004148B1                 mov     [esp+1Ch+Str], ebp
.text:004148B4                 call    sub_410F20
.text:004148B9                 inc     esi
.text:004148BA                 jz      short loc_4148D0
.text:004148BC                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:004148C0                 add     esp, 0Ch
.text:004148C3                 pop     ebx
.text:004148C4                 pop     esi
.text:004148C5                 pop     edi
.text:004148C6                 pop     ebp
.text:004148C7                 jmp     strlen
.text:004148C7 ; ---------------------------------------------------------------------------
.text:004148CC                 align 10h
.text:004148D0
.text:004148D0 loc_4148D0:                             ; CODE XREF: sub_414800+28↑j
.text:004148D0                                         ; sub_414800+BA↑j
.text:004148D0                 add     esp, 0Ch
.text:004148D3                 mov     eax, 0FFFFFFFFh
.text:004148D8                 pop     ebx
.text:004148D9                 pop     esi
.text:004148DA                 pop     edi
.text:004148DB                 pop     ebp
.text:004148DC                 retn
.text:004148DC sub_414800      endp
.text:004148DC
.text:004148DC ; ---------------------------------------------------------------------------
.text:004148DD                 align 10h
.text:004148E0
.text:004148E0 ; =============== S U B R O U T I N E =======================================
.text:004148E0
.text:004148E0 ; Attributes: info_from_lumina
.text:004148E0
.text:004148E0 __quicksort     proc near               ; CODE XREF: sub_412560+7B↑j
.text:004148E0
.text:004148E0 var_14C         = dword ptr -14Ch
.text:004148E0 var_148         = dword ptr -148h
.text:004148E0 var_13C         = dword ptr -13Ch
.text:004148E0 var_135         = byte ptr -135h
.text:004148E0 var_134         = dword ptr -134h
.text:004148E0 var_130         = dword ptr -130h
.text:004148E0 var_12C         = dword ptr -12Ch
.text:004148E0 var_128         = dword ptr -128h
.text:004148E0 var_124         = dword ptr -124h
.text:004148E0 var_120         = dword ptr -120h
.text:004148E0 var_11C         = byte ptr -11Ch
.text:004148E0 var_114         = byte ptr -114h
.text:004148E0 arg_0           = dword ptr  4
.text:004148E0 arg_4           = dword ptr  8
.text:004148E0 arg_8           = dword ptr  0Ch
.text:004148E0 arg_C           = dword ptr  10h
.text:004148E0
.text:004148E0                 push    ebp
.text:004148E1                 push    edi
.text:004148E2                 push    esi
.text:004148E3                 push    ebx
.text:004148E4                 sub     esp, 13Ch
.text:004148EA                 mov     eax, [esp+14Ch+arg_4]
.text:004148F1                 mov     ecx, [esp+14Ch+arg_8]
.text:004148F8                 shl     ecx, 2
.text:004148FB                 test    eax, eax
.text:004148FD                 mov     [esp+14Ch+var_120], ecx
.text:00414901                 jz      loc_414A5C
.text:00414907                 lea     ecx, [eax-1]
.text:0041490A                 cmp     eax, 4
.text:0041490D                 mov     [esp+14Ch+var_13C], ecx
.text:00414911                 jbe     short loc_414946
.text:00414913                 mov     edi, [esp+14Ch+arg_8]
.text:0041491A                 lea     ebx, [esp+14Ch+var_114]
.text:0041491E                 mov     edx, [esp+14Ch+var_13C]
.text:00414922                 mov     [esp+14Ch+var_12C], ebx
.text:00414926                 mov     ebp, [esp+14Ch+arg_0]
.text:0041492D                 lea     eax, [esp+14Ch+var_11C]
.text:00414931                 imul    edi, edx
.text:00414934                 mov     [esp+14Ch+var_124], ebp
.text:00414938                 add     edi, ebp
.text:0041493A                 cmp     eax, ebx
.text:0041493C                 mov     [esp+14Ch+var_128], edi
.text:00414940                 jb      loc_414A8F
.text:00414946
.text:00414946 loc_414946:                             ; CODE XREF: __quicksort+31↑j
.text:00414946                                         ; __quicksort+313↓j
.text:00414946                 mov     ebx, [esp+14Ch+arg_8]
.text:0041494D                 mov     edx, [esp+14Ch+var_13C]
.text:00414951                 mov     ecx, [esp+14Ch+arg_0]
.text:00414958                 mov     esi, [esp+14Ch+arg_0]
.text:0041495F                 imul    ebx, edx
.text:00414962                 mov     edi, [esp+14Ch+var_120]
.text:00414966                 add     ebx, ecx
.text:00414968                 mov     [esp+14Ch+var_134], ebx
.text:0041496C                 lea     ebx, [edi+esi]
.text:0041496F                 cmp     ebx, [esp+14Ch+var_134]
.text:00414973                 jbe     short loc_414979
.text:00414975                 mov     ebx, [esp+14Ch+var_134]
.text:00414979
.text:00414979 loc_414979:                             ; CODE XREF: __quicksort+93↑j
.text:00414979                 mov     ebp, [esp+14Ch+arg_8]
.text:00414980                 lea     edi, [ebp+esi+0]
.text:00414984                 cmp     edi, ebx
.text:00414986                 mov     ebp, edi
.text:00414988                 jbe     loc_414A67
.text:0041498E
.text:0041498E loc_41498E:                             ; CODE XREF: __quicksort+1A6↓j
.text:0041498E                 cmp     esi, [esp+14Ch+arg_0]
.text:00414995                 jz      short loc_4149B6
.text:00414997                 mov     edi, [esp+14Ch+arg_8]
.text:0041499E                 mov     ebx, esi
.text:004149A0                 mov     ecx, [esp+14Ch+arg_0]
.text:004149A7
.text:004149A7 loc_4149A7:                             ; CODE XREF: __quicksort+D4↓j
.text:004149A7                 movzx   edx, byte ptr [ebx]
.text:004149AA                 movzx   eax, byte ptr [ecx]
.text:004149AD                 mov     [ebx], al
.text:004149AF                 inc     ebx
.text:004149B0                 mov     [ecx], dl
.text:004149B2                 inc     ecx
.text:004149B3                 dec     edi
.text:004149B4                 jnz     short loc_4149A7
.text:004149B6
.text:004149B6 loc_4149B6:                             ; CODE XREF: __quicksort+B5↑j
.text:004149B6                 mov     esi, [esp+14Ch+arg_8]
.text:004149BD                 lea     edi, [esi+ebp]
.text:004149C0                 cmp     edi, [esp+14Ch+var_134]
.text:004149C4                 ja      loc_414A5C
.text:004149CA
.text:004149CA loc_4149CA:                             ; CODE XREF: __quicksort+176↓j
.text:004149CA                 mov     esi, edi
.text:004149CC                 lea     esi, [esi+0]
.text:004149D0
.text:004149D0 loc_4149D0:                             ; CODE XREF: __quicksort+109↓j
.text:004149D0                 mov     [esp+14Ch+var_14C], edi
.text:004149D3                 mov     ebx, [esp+14Ch+arg_8]
.text:004149DA                 sub     esi, ebx
.text:004149DC                 mov     [esp+14Ch+var_148], esi
.text:004149E0                 call    [esp+14Ch+arg_C]
.text:004149E7                 test    eax, eax
.text:004149E9                 js      short loc_4149D0
.text:004149EB                 mov     edx, [esp+14Ch+arg_8]
.text:004149F2                 mov     eax, [esp+14Ch+arg_8]
.text:004149F9                 add     esi, edx
.text:004149FB                 cmp     esi, edi
.text:004149FD                 lea     ebp, [eax+edi]
.text:00414A00                 jz      short loc_414A50
.text:00414A02                 lea     ebx, [ebp-1]
.text:00414A05                 cmp     ebx, edi
.text:00414A07                 jb      short loc_414A50
.text:00414A09                 lea     esi, [esi+0]
.text:00414A10
.text:00414A10 loc_414A10:                             ; CODE XREF: __quicksort+16E↓j
.text:00414A10                 movzx   ecx, byte ptr [ebx]
.text:00414A13                 mov     edx, ebx
.text:00414A15                 mov     eax, [esp+14Ch+arg_8]
.text:00414A1C                 mov     [esp+14Ch+var_135], cl
.text:00414A20                 sub     edx, eax
.text:00414A22                 cmp     edx, esi
.text:00414A24                 mov     ecx, ebx
.text:00414A26                 jb      short loc_414A44
.text:00414A28                 nop
.text:00414A29                 lea     esi, [esi+0]
.text:00414A30
.text:00414A30 loc_414A30:                             ; CODE XREF: __quicksort+162↓j
.text:00414A30                 movzx   eax, byte ptr [edx]
.text:00414A33                 mov     [ecx], al
.text:00414A35                 mov     eax, [esp+14Ch+arg_8]
.text:00414A3C                 mov     ecx, edx
.text:00414A3E                 sub     edx, eax
.text:00414A40                 cmp     edx, esi
.text:00414A42                 jnb     short loc_414A30
.text:00414A44
.text:00414A44 loc_414A44:                             ; CODE XREF: __quicksort+146↑j
.text:00414A44                 movzx   eax, [esp+14Ch+var_135]
.text:00414A49                 dec     ebx
.text:00414A4A                 cmp     ebx, edi
.text:00414A4C                 mov     [ecx], al
.text:00414A4E                 jnb     short loc_414A10
.text:00414A50
.text:00414A50 loc_414A50:                             ; CODE XREF: __quicksort+120↑j
.text:00414A50                                         ; __quicksort+127↑j
.text:00414A50                 cmp     ebp, [esp+14Ch+var_134]
.text:00414A54                 mov     edi, ebp
.text:00414A56                 jbe     loc_4149CA
.text:00414A5C
.text:00414A5C loc_414A5C:                             ; CODE XREF: __quicksort+21↑j
.text:00414A5C                                         ; __quicksort+E4↑j
.text:00414A5C                 add     esp, 13Ch
.text:00414A62                 pop     ebx
.text:00414A63                 pop     esi
.text:00414A64                 pop     edi
.text:00414A65                 pop     ebp
.text:00414A66                 retn
.text:00414A67 ; ---------------------------------------------------------------------------
.text:00414A67
.text:00414A67 loc_414A67:                             ; CODE XREF: __quicksort+A8↑j
.text:00414A67                                         ; __quicksort+1A4↓j
.text:00414A67                 mov     [esp+14Ch+var_148], esi
.text:00414A6B                 mov     [esp+14Ch+var_14C], edi
.text:00414A6E                 call    [esp+14Ch+arg_C]
.text:00414A75                 test    eax, eax
.text:00414A77                 js      short loc_414A8B
.text:00414A79
.text:00414A79 loc_414A79:                             ; CODE XREF: __quicksort+1AD↓j
.text:00414A79                 mov     ecx, [esp+14Ch+arg_8]
.text:00414A80                 add     edi, ecx
.text:00414A82                 cmp     edi, ebx
.text:00414A84                 jbe     short loc_414A67
.text:00414A86                 jmp     loc_41498E
.text:00414A8B ; ---------------------------------------------------------------------------
.text:00414A8B
.text:00414A8B loc_414A8B:                             ; CODE XREF: __quicksort+197↑j
.text:00414A8B                 mov     esi, edi
.text:00414A8D                 jmp     short loc_414A79
.text:00414A8F ; ---------------------------------------------------------------------------
.text:00414A8F
.text:00414A8F loc_414A8F:                             ; CODE XREF: __quicksort+60↑j
.text:00414A8F                                         ; __quicksort+30D↓j
.text:00414A8F                 mov     eax, [esp+14Ch+var_128]
.text:00414A93                 xor     edx, edx
.text:00414A95                 mov     ebp, [esp+14Ch+var_124]
.text:00414A99                 mov     edi, [esp+14Ch+arg_8]
.text:00414AA0                 mov     ebx, [esp+14Ch+var_124]
.text:00414AA4                 sub     eax, ebp
.text:00414AA6                 div     [esp+14Ch+arg_8]
.text:00414AAD                 mov     ecx, [esp+14Ch+var_124]
.text:00414AB1                 mov     [esp+14Ch+var_148], ecx
.text:00414AB5                 shr     eax, 1
.text:00414AB7                 imul    eax, edi
.text:00414ABA                 add     eax, ebx
.text:00414ABC                 mov     [esp+14Ch+var_130], eax
.text:00414AC0                 mov     esi, [esp+14Ch+var_130]
.text:00414AC4                 mov     [esp+14Ch+var_14C], esi
.text:00414AC7                 call    [esp+14Ch+arg_C]
.text:00414ACE                 test    eax, eax
.text:00414AD0                 js      loc_414CD4
.text:00414AD6
.text:00414AD6 loc_414AD6:                             ; CODE XREF: __quicksort+412↓j
.text:00414AD6                 mov     edx, [esp+14Ch+var_130]
.text:00414ADA                 mov     eax, [esp+14Ch+var_128]
.text:00414ADE                 mov     [esp+14Ch+var_148], edx
.text:00414AE2                 mov     [esp+14Ch+var_14C], eax
.text:00414AE5                 call    [esp+14Ch+arg_C]
.text:00414AEC                 test    eax, eax
.text:00414AEE                 js      loc_414C75
.text:00414AF4
.text:00414AF4 loc_414AF4:                             ; CODE XREF: __quicksort+3CB↓j
.text:00414AF4                                         ; __quicksort+3EF↓j
.text:00414AF4                 mov     edi, [esp+14Ch+arg_8]
.text:00414AFB                 mov     ebp, [esp+14Ch+var_124]
.text:00414AFF                 mov     ebx, [esp+14Ch+arg_8]
.text:00414B06                 add     ebp, edi
.text:00414B08                 mov     edi, [esp+14Ch+var_128]
.text:00414B0C                 sub     edi, ebx
.text:00414B0E                 mov     esi, esi
.text:00414B10
.text:00414B10 loc_414B10:                             ; CODE XREF: __quicksort+2C7↓j
.text:00414B10                                         ; __quicksort+390↓j
.text:00414B10                 mov     [esp+14Ch+var_14C], ebp
.text:00414B13                 mov     esi, [esp+14Ch+var_130]
.text:00414B17                 mov     [esp+14Ch+var_148], esi
.text:00414B1B                 call    [esp+14Ch+arg_C]
.text:00414B22                 test    eax, eax
.text:00414B24                 js      loc_414C67
.text:00414B2A                 lea     esi, [esi+0]
.text:00414B30
.text:00414B30 loc_414B30:                             ; CODE XREF: __quicksort+26F↓j
.text:00414B30                 mov     [esp+14Ch+var_148], edi
.text:00414B34                 mov     eax, [esp+14Ch+var_130]
.text:00414B38                 mov     [esp+14Ch+var_14C], eax
.text:00414B3B                 call    [esp+14Ch+arg_C]
.text:00414B42                 test    eax, eax
.text:00414B44                 jns     short loc_414B51
.text:00414B46                 mov     ecx, [esp+14Ch+arg_8]
.text:00414B4D                 sub     edi, ecx
.text:00414B4F                 jmp     short loc_414B30
.text:00414B51 ; ---------------------------------------------------------------------------
.text:00414B51
.text:00414B51 loc_414B51:                             ; CODE XREF: __quicksort+264↑j
.text:00414B51                 cmp     ebp, edi
.text:00414B53                 jnb     loc_414C4E
.text:00414B59                 mov     esi, [esp+14Ch+arg_8]
.text:00414B60                 mov     ebx, ebp
.text:00414B62                 mov     ecx, edi
.text:00414B64                 lea     esi, [esi+0]
.text:00414B6A                 lea     edi, [edi+0]
.text:00414B70
.text:00414B70 loc_414B70:                             ; CODE XREF: __quicksort+29D↓j
.text:00414B70                 movzx   edx, byte ptr [ebx]
.text:00414B73                 movzx   eax, byte ptr [ecx]
.text:00414B76                 mov     [ebx], al
.text:00414B78                 inc     ebx
.text:00414B79                 mov     [ecx], dl
.text:00414B7B                 inc     ecx
.text:00414B7C                 dec     esi
.text:00414B7D                 jnz     short loc_414B70
.text:00414B7F                 cmp     [esp+14Ch+var_130], ebp
.text:00414B83                 jz      loc_414C45
.text:00414B89                 cmp     [esp+14Ch+var_130], edi
.text:00414B8D                 jz      loc_414C3C
.text:00414B93
.text:00414B93 loc_414B93:                             ; CODE XREF: __quicksort+360↓j
.text:00414B93                                         ; __quicksort+369↓j
.text:00414B93                 mov     edx, [esp+14Ch+arg_8]
.text:00414B9A                 mov     ebx, [esp+14Ch+arg_8]
.text:00414BA1                 add     ebp, edx
.text:00414BA3                 sub     edi, ebx
.text:00414BA5
.text:00414BA5 loc_414BA5:                             ; CODE XREF: __quicksort+370↓j
.text:00414BA5                 cmp     ebp, edi
.text:00414BA7                 jbe     loc_414B10
.text:00414BAD
.text:00414BAD loc_414BAD:                             ; CODE XREF: __quicksort+382↓j
.text:00414BAD                 mov     esi, [esp+14Ch+var_124]
.text:00414BB1                 mov     eax, edi
.text:00414BB3                 sub     eax, esi
.text:00414BB5                 cmp     eax, [esp+14Ch+var_120]
.text:00414BB9                 ja      short loc_414BF8
.text:00414BBB                 mov     [esp+14Ch+var_124], ebp
.text:00414BBF                 mov     edi, [esp+14Ch+var_128]
.text:00414BC3                 sub     edi, ebp
.text:00414BC5                 cmp     edi, [esp+14Ch+var_120]
.text:00414BC9                 ja      short loc_414BE5
.text:00414BCB                 sub     [esp+14Ch+var_12C], 8
.text:00414BD0                 mov     edx, [esp+14Ch+var_12C]
.text:00414BD4                 mov     ecx, [esp+14Ch+var_12C]
.text:00414BD8                 mov     ebx, [edx]
.text:00414BDA                 mov     ebp, [ecx+4]
.text:00414BDD                 mov     [esp+14Ch+var_124], ebx
.text:00414BE1                 mov     [esp+14Ch+var_128], ebp
.text:00414BE5
.text:00414BE5 loc_414BE5:                             ; CODE XREF: __quicksort+2E9↑j
.text:00414BE5                                         ; __quicksort+340↓j ...
.text:00414BE5                 lea     eax, [esp+14Ch+var_11C]
.text:00414BE9                 cmp     eax, [esp+14Ch+var_12C]
.text:00414BED                 jb      loc_414A8F
.text:00414BF3                 jmp     loc_414946
.text:00414BF8 ; ---------------------------------------------------------------------------
.text:00414BF8
.text:00414BF8 loc_414BF8:                             ; CODE XREF: __quicksort+2D9↑j
.text:00414BF8                 mov     edx, [esp+14Ch+var_128]
.text:00414BFC                 sub     edx, ebp
.text:00414BFE                 cmp     edx, [esp+14Ch+var_120]
.text:00414C02                 jbe     short loc_414C36
.text:00414C04                 cmp     eax, edx
.text:00414C06                 jle     short loc_414C22
.text:00414C08                 mov     ecx, [esp+14Ch+var_12C]
.text:00414C0C                 mov     ebx, [esp+14Ch+var_124]
.text:00414C10                 mov     [esp+14Ch+var_124], ebp
.text:00414C14                 mov     [ecx+4], edi
.text:00414C17                 mov     [ecx], ebx
.text:00414C19                 add     ecx, 8
.text:00414C1C                 mov     [esp+14Ch+var_12C], ecx
.text:00414C20                 jmp     short loc_414BE5
.text:00414C22 ; ---------------------------------------------------------------------------
.text:00414C22
.text:00414C22 loc_414C22:                             ; CODE XREF: __quicksort+326↑j
.text:00414C22                 mov     esi, [esp+14Ch+var_12C]
.text:00414C26                 mov     [esi], ebp
.text:00414C28                 mov     ebp, [esp+14Ch+var_128]
.text:00414C2C                 mov     [esi+4], ebp
.text:00414C2F                 add     esi, 8
.text:00414C32                 mov     [esp+14Ch+var_12C], esi
.text:00414C36
.text:00414C36 loc_414C36:                             ; CODE XREF: __quicksort+322↑j
.text:00414C36                 mov     [esp+14Ch+var_128], edi
.text:00414C3A                 jmp     short loc_414BE5
.text:00414C3C ; ---------------------------------------------------------------------------
.text:00414C3C
.text:00414C3C loc_414C3C:                             ; CODE XREF: __quicksort+2AD↑j
.text:00414C3C                 mov     [esp+14Ch+var_130], ebp
.text:00414C40                 jmp     loc_414B93
.text:00414C45 ; ---------------------------------------------------------------------------
.text:00414C45
.text:00414C45 loc_414C45:                             ; CODE XREF: __quicksort+2A3↑j
.text:00414C45                 mov     [esp+14Ch+var_130], edi
.text:00414C49                 jmp     loc_414B93
.text:00414C4E ; ---------------------------------------------------------------------------
.text:00414C4E
.text:00414C4E loc_414C4E:                             ; CODE XREF: __quicksort+273↑j
.text:00414C4E                 cmp     ebp, edi
.text:00414C50                 jnz     loc_414BA5
.text:00414C56                 mov     esi, [esp+14Ch+arg_8]
.text:00414C5D                 lea     ebp, [esi+edi]
.text:00414C60                 sub     edi, esi
.text:00414C62                 jmp     loc_414BAD
.text:00414C67 ; ---------------------------------------------------------------------------
.text:00414C67
.text:00414C67 loc_414C67:                             ; CODE XREF: __quicksort+244↑j
.text:00414C67                 mov     edx, [esp+14Ch+arg_8]
.text:00414C6E                 add     ebp, edx
.text:00414C70                 jmp     loc_414B10
.text:00414C75 ; ---------------------------------------------------------------------------
.text:00414C75
.text:00414C75 loc_414C75:                             ; CODE XREF: __quicksort+20E↑j
.text:00414C75                 mov     esi, [esp+14Ch+arg_8]
.text:00414C7C                 mov     ebx, [esp+14Ch+var_130]
.text:00414C80                 mov     ecx, [esp+14Ch+var_128]
.text:00414C84
.text:00414C84 loc_414C84:                             ; CODE XREF: __quicksort+3B1↓j
.text:00414C84                 movzx   edx, byte ptr [ebx]
.text:00414C87                 movzx   eax, byte ptr [ecx]
.text:00414C8A                 mov     [ebx], al
.text:00414C8C                 inc     ebx
.text:00414C8D                 mov     [ecx], dl
.text:00414C8F                 inc     ecx
.text:00414C90                 dec     esi
.text:00414C91                 jnz     short loc_414C84
.text:00414C93                 mov     ecx, [esp+14Ch+var_124]
.text:00414C97                 mov     esi, [esp+14Ch+var_130]
.text:00414C9B                 mov     [esp+14Ch+var_148], ecx
.text:00414C9F                 mov     [esp+14Ch+var_14C], esi
.text:00414CA2                 call    [esp+14Ch+arg_C]
.text:00414CA9                 test    eax, eax
.text:00414CAB                 jns     loc_414AF4
.text:00414CB1                 mov     esi, [esp+14Ch+arg_8]
.text:00414CB8                 mov     ebx, [esp+14Ch+var_130]
.text:00414CBC                 mov     ecx, [esp+14Ch+var_124]
.text:00414CC0
.text:00414CC0 loc_414CC0:                             ; CODE XREF: __quicksort+3ED↓j
.text:00414CC0                 movzx   edx, byte ptr [ebx]
.text:00414CC3                 movzx   eax, byte ptr [ecx]
.text:00414CC6                 mov     [ebx], al
.text:00414CC8                 inc     ebx
.text:00414CC9                 mov     [ecx], dl
.text:00414CCB                 inc     ecx
.text:00414CCC                 dec     esi
.text:00414CCD                 jnz     short loc_414CC0
.text:00414CCF                 jmp     loc_414AF4
.text:00414CD4 ; ---------------------------------------------------------------------------
.text:00414CD4
.text:00414CD4 loc_414CD4:                             ; CODE XREF: __quicksort+1F0↑j
.text:00414CD4                 mov     esi, [esp+14Ch+arg_8]
.text:00414CDB                 mov     ebx, [esp+14Ch+var_130]
.text:00414CDF                 mov     ecx, [esp+14Ch+var_124]
.text:00414CE3
.text:00414CE3 loc_414CE3:                             ; CODE XREF: __quicksort+410↓j
.text:00414CE3                 movzx   edx, byte ptr [ebx]
.text:00414CE6                 movzx   eax, byte ptr [ecx]
.text:00414CE9                 mov     [ebx], al
.text:00414CEB                 inc     ebx
.text:00414CEC                 mov     [ecx], dl
.text:00414CEE                 inc     ecx
.text:00414CEF                 dec     esi
.text:00414CF0                 jnz     short loc_414CE3
.text:00414CF2                 jmp     loc_414AD6
.text:00414CF2 __quicksort     endp
.text:00414CF2
.text:00414CF2 ; ---------------------------------------------------------------------------
.text:00414CF7                 align 10h
.text:00414D00
.text:00414D00 ; =============== S U B R O U T I N E =======================================
.text:00414D00
.text:00414D00 ; Attributes: info_from_lumina
.text:00414D00
.text:00414D00 _sysconf        proc near               ; CODE XREF: sub_412560+F7↑p
.text:00414D00                                         ; sub_412560+11E↑p
.text:00414D00
.text:00414D00 arg_0           = dword ptr  4
.text:00414D00
.text:00414D00                 sub     esp, 0Ch
.text:00414D03                 mov     eax, [esp+0Ch+arg_0]
.text:00414D07                 cmp     eax, 83h        ; switch 132 cases
.text:00414D0C                 ja      def_414D12      ; jumptable 67026652 default case, cases 50,56
.text:00414D0C                                         ; jumptable 00414D12 default case, cases 50,56
.text:00414D12                 jmp     ds:jpt_414D12[eax*4] ; switch jump
.text:00414D12 ; ---------------------------------------------------------------------------
.text:00414D19                 align 4
.text:00414D1C jpt_414D12      dd offset loc_414F54, offset loc_414F54, offset loc_414F54
.text:00414D1C                                         ; DATA XREF: _sysconf+12↑r
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C ; jump table for switch statement
.text:00414D1C                 dd offset loc_414F5B, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_415008, offset loc_414F40
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_414F77, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset def_414D12
.text:00414D1C                 dd offset loc_41501C, offset loc_414F7E, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset def_414D12
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_414F85, offset loc_414F85, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_414F8C
.text:00414D1C                 dd offset loc_414F94, offset loc_414F9C, offset loc_414FA4
.text:00414D1C                 dd offset loc_414FBA, offset loc_414FAC, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_414FB3
.text:00414D1C                 dd offset loc_414FE0, offset loc_414FEA, offset loc_414FBA
.text:00414D1C                 dd offset loc_414FC1, offset loc_414FC8, offset loc_414FC8
.text:00414D1C                 dd offset loc_414FCF, offset loc_414FD9, offset loc_414FF4
.text:00414D1C                 dd offset loc_414FE0, offset loc_414FEA, offset loc_414FF4
.text:00414D1C                 dd offset loc_414FFE, offset loc_415008, offset loc_414F40
.text:00414D1C                 dd offset loc_414F40, offset loc_415012, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414D1C                 dd offset loc_41501C, offset loc_41501C, offset loc_41501C
.text:00414F2C ; ---------------------------------------------------------------------------
.text:00414F2C
.text:00414F2C def_414D12:                             ; CODE XREF: _sysconf+C↑j
.text:00414F2C                                         ; _sysconf+12↑j
.text:00414F2C                                         ; DATA XREF: ...
.text:00414F2C                 call    _errno          ; jumptable 67026652 default case, cases 50,56
.text:00414F2C                                         ; jumptable 00414D12 default case, cases 50,56
.text:00414F31                 mov     dword ptr [eax], 16h
.text:00414F37                 mov     esi, esi
.text:00414F39                 lea     edi, [edi+0]
.text:00414F40
.text:00414F40 loc_414F40:                             ; CODE XREF: _sysconf+12↑j
.text:00414F40                                         ; _sysconf+327↓j
.text:00414F40                                         ; DATA XREF: ...
.text:00414F40                 mov     eax, 0FFFFFFFFh ; jumptable 67026652 cases 41,116,117
.text:00414F40                                         ; jumptable 00414D12 cases 41,116,117
.text:00414F45                 lea     esi, [esi+0]
.text:00414F49                 lea     edi, [edi+0]
.text:00414F50
.text:00414F50 loc_414F50:                             ; CODE XREF: _sysconf+259↓j
.text:00414F50                                         ; _sysconf+26C↓j ...
.text:00414F50                 add     esp, 0Ch
.text:00414F53                 retn
.text:00414F54 ; ---------------------------------------------------------------------------
.text:00414F54
.text:00414F54 loc_414F54:                             ; CODE XREF: _sysconf+12↑j
.text:00414F54                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414F54                 mov     eax, 989680h    ; jumptable 67026652 cases 0-2
.text:00414F54                                         ; jumptable 00414D12 cases 0-2
.text:00414F59                 jmp     short loc_414F50
.text:00414F5B ; ---------------------------------------------------------------------------
.text:00414F5B
.text:00414F5B loc_414F5B:                             ; CODE XREF: _sysconf+12↑j
.text:00414F5B                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414F5B                 call    sub_415830      ; jumptable 67026652 case 6
.text:00414F5B                                         ; jumptable 00414D12 case 6
.text:00414F60                 cmp     eax, 6
.text:00414F63                 mov     edx, 6
.text:00414F68                 jg      short loc_414F6E
.text:00414F6A
.text:00414F6A loc_414F6A:                             ; CODE XREF: _sysconf+275↓j
.text:00414F6A                 mov     eax, edx
.text:00414F6C                 jmp     short loc_414F50
.text:00414F6E ; ---------------------------------------------------------------------------
.text:00414F6E
.text:00414F6E loc_414F6E:                             ; CODE XREF: _sysconf+268↑j
.text:00414F6E                 call    sub_415830
.text:00414F73                 mov     edx, eax
.text:00414F75                 jmp     short loc_414F6A
.text:00414F77 ; ---------------------------------------------------------------------------
.text:00414F77
.text:00414F77 loc_414F77:                             ; CODE XREF: _sysconf+12↑j
.text:00414F77                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414F77                 mov     eax, 800h       ; jumptable 67026652 case 45
.text:00414F77                                         ; jumptable 00414D12 case 45
.text:00414F7C                 jmp     short loc_414F50
.text:00414F7E ; ---------------------------------------------------------------------------
.text:00414F7E
.text:00414F7E loc_414F7E:                             ; CODE XREF: _sysconf+12↑j
.text:00414F7E                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414F7E                 mov     eax, 1          ; jumptable 67026652 case 52
.text:00414F7E                                         ; jumptable 00414D12 case 52
.text:00414F83                 jmp     short loc_414F50
.text:00414F85 ; ---------------------------------------------------------------------------
.text:00414F85
.text:00414F85 loc_414F85:                             ; CODE XREF: _sysconf+12↑j
.text:00414F85                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414F85                 mov     eax, 400h       ; jumptable 67026652 cases 69,70
.text:00414F85                                         ; jumptable 00414D12 cases 69,70
.text:00414F8A                 jmp     short loc_414F50
.text:00414F8C ; ---------------------------------------------------------------------------
.text:00414F8C
.text:00414F8C loc_414F8C:                             ; CODE XREF: _sysconf+12↑j
.text:00414F8C                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414F8C                 add     esp, 0Ch        ; jumptable 67026652 case 83
.text:00414F8C                                         ; jumptable 00414D12 case 83
.text:00414F8F                 jmp     sub_415720
.text:00414F94 ; ---------------------------------------------------------------------------
.text:00414F94
.text:00414F94 loc_414F94:                             ; CODE XREF: _sysconf+12↑j
.text:00414F94                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414F94                 add     esp, 0Ch        ; jumptable 67026652 case 84
.text:00414F94                                         ; jumptable 00414D12 case 84
.text:00414F97                 jmp     sub_4156D0
.text:00414F9C ; ---------------------------------------------------------------------------
.text:00414F9C
.text:00414F9C loc_414F9C:                             ; CODE XREF: _sysconf+12↑j
.text:00414F9C                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414F9C                 add     esp, 0Ch        ; jumptable 67026652 case 85
.text:00414F9C                                         ; jumptable 00414D12 case 85
.text:00414F9F                 jmp     sub_415770
.text:00414FA4 ; ---------------------------------------------------------------------------
.text:00414FA4
.text:00414FA4 loc_414FA4:                             ; CODE XREF: _sysconf+12↑j
.text:00414FA4                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414FA4                 add     esp, 0Ch        ; jumptable 67026652 case 86
.text:00414FA4                                         ; jumptable 00414D12 case 86
.text:00414FA7                 jmp     sub_4157D0
.text:00414FAC ; ---------------------------------------------------------------------------
.text:00414FAC
.text:00414FAC loc_414FAC:                             ; CODE XREF: _sysconf+12↑j
.text:00414FAC                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414FAC                 mov     eax, 200h       ; jumptable 67026652 case 88
.text:00414FAC                                         ; jumptable 00414D12 case 88
.text:00414FB1                 jmp     short loc_414F50
.text:00414FB3 ; ---------------------------------------------------------------------------
.text:00414FB3
.text:00414FB3 loc_414FB3:                             ; CODE XREF: _sysconf+12↑j
.text:00414FB3                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414FB3                 mov     eax, 8          ; jumptable 67026652 case 101
.text:00414FB3                                         ; jumptable 00414D12 case 101
.text:00414FB8                 jmp     short loc_414F50
.text:00414FBA ; ---------------------------------------------------------------------------
.text:00414FBA
.text:00414FBA loc_414FBA:                             ; CODE XREF: _sysconf+12↑j
.text:00414FBA                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414FBA                 mov     eax, 7FFFFFFFh  ; jumptable 67026652 cases 87,104
.text:00414FBA                                         ; jumptable 00414D12 cases 87,104
.text:00414FBF                 jmp     short loc_414F50
.text:00414FC1 ; ---------------------------------------------------------------------------
.text:00414FC1
.text:00414FC1 loc_414FC1:                             ; CODE XREF: _sysconf+12↑j
.text:00414FC1                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414FC1                 mov     eax, 80000000h  ; jumptable 67026652 case 105
.text:00414FC1                                         ; jumptable 00414D12 case 105
.text:00414FC6                 jmp     short loc_414F50
.text:00414FC8 ; ---------------------------------------------------------------------------
.text:00414FC8
.text:00414FC8 loc_414FC8:                             ; CODE XREF: _sysconf+12↑j
.text:00414FC8                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414FC8                 mov     eax, 20h ; ' '  ; jumptable 67026652 cases 106,107
.text:00414FC8                                         ; jumptable 00414D12 cases 106,107
.text:00414FCD                 jmp     short loc_414F50
.text:00414FCF ; ---------------------------------------------------------------------------
.text:00414FCF
.text:00414FCF loc_414FCF:                             ; CODE XREF: _sysconf+12↑j
.text:00414FCF                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414FCF                 mov     eax, 2          ; jumptable 67026652 case 108
.text:00414FCF                                         ; jumptable 00414D12 case 108
.text:00414FD4                 jmp     loc_414F50
.text:00414FD9 ; ---------------------------------------------------------------------------
.text:00414FD9
.text:00414FD9 loc_414FD9:                             ; CODE XREF: _sysconf+12↑j
.text:00414FD9                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414FD9                 xor     eax, eax        ; jumptable 67026652 case 109
.text:00414FD9                                         ; jumptable 00414D12 case 109
.text:00414FDB                 jmp     loc_414F50
.text:00414FE0 ; ---------------------------------------------------------------------------
.text:00414FE0
.text:00414FE0 loc_414FE0:                             ; CODE XREF: _sysconf+12↑j
.text:00414FE0                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414FE0                 mov     eax, 7Fh        ; jumptable 67026652 cases 102,111
.text:00414FE0                                         ; jumptable 00414D12 cases 102,111
.text:00414FE5                 jmp     loc_414F50
.text:00414FEA ; ---------------------------------------------------------------------------
.text:00414FEA
.text:00414FEA loc_414FEA:                             ; CODE XREF: _sysconf+12↑j
.text:00414FEA                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414FEA                 mov     eax, 0FFFFFF80h ; jumptable 67026652 cases 103,112
.text:00414FEA                                         ; jumptable 00414D12 cases 103,112
.text:00414FEF                 jmp     loc_414F50
.text:00414FF4 ; ---------------------------------------------------------------------------
.text:00414FF4
.text:00414FF4 loc_414FF4:                             ; CODE XREF: _sysconf+12↑j
.text:00414FF4                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414FF4                 mov     eax, 7FFFh      ; jumptable 67026652 cases 110,113
.text:00414FF4                                         ; jumptable 00414D12 cases 110,113
.text:00414FF9                 jmp     loc_414F50
.text:00414FFE ; ---------------------------------------------------------------------------
.text:00414FFE
.text:00414FFE loc_414FFE:                             ; CODE XREF: _sysconf+12↑j
.text:00414FFE                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00414FFE                 mov     eax, 0FFFF8000h ; jumptable 67026652 case 114
.text:00414FFE                                         ; jumptable 00414D12 case 114
.text:00415003                 jmp     loc_414F50
.text:00415008 ; ---------------------------------------------------------------------------
.text:00415008
.text:00415008 loc_415008:                             ; CODE XREF: _sysconf+12↑j
.text:00415008                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00415008                 mov     eax, 0FFh       ; jumptable 67026652 cases 40,115
.text:00415008                                         ; jumptable 00414D12 cases 40,115
.text:0041500D                 jmp     loc_414F50
.text:00415012 ; ---------------------------------------------------------------------------
.text:00415012
.text:00415012 loc_415012:                             ; CODE XREF: _sysconf+12↑j
.text:00415012                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:00415012                 mov     eax, 0FFFFh     ; jumptable 67026652 case 118
.text:00415012                                         ; jumptable 00414D12 case 118
.text:00415017                 jmp     loc_414F50
.text:0041501C ; ---------------------------------------------------------------------------
.text:0041501C
.text:0041501C loc_41501C:                             ; CODE XREF: _sysconf+12↑j
.text:0041501C                                         ; DATA XREF: _sysconf:jpt_414D12↑o
.text:0041501C                 call    _errno          ; jumptable 67026652 cases 3-5,7-39,42-44,46-49,51,53-55,57-68,71-82,89-100,119-131
.text:0041501C                                         ; jumptable 00414D12 cases 3-5,7-39,42-44,46-49,51,53-55,57-68,71-82,89-100,119-131
.text:00415021                 mov     dword ptr [eax], 28h ; '('
.text:00415027                 jmp     loc_414F40      ; jumptable 67026652 cases 41,116,117
.text:00415027 _sysconf        endp                    ; jumptable 00414D12 cases 41,116,117
.text:00415027
.text:00415027 ; ---------------------------------------------------------------------------
.text:0041502C                 align 10h
.text:00415030
.text:00415030 ; =============== S U B R O U T I N E =======================================
.text:00415030
.text:00415030
.text:00415030 sub_415030      proc near               ; CODE XREF: sub_4126E0+17↑p
.text:00415030
.text:00415030 hFindFile       = dword ptr -0Ch
.text:00415030 var_8           = dword ptr -8
.text:00415030 var_4           = dword ptr -4
.text:00415030 arg_0           = dword ptr  4
.text:00415030
.text:00415030                 sub     esp, 0Ch
.text:00415033                 mov     [esp+0Ch+var_4], esi
.text:00415037                 mov     esi, [esp+0Ch+arg_0]
.text:0041503B                 mov     [esp+0Ch+var_8], ebx
.text:0041503F                 test    esi, esi
.text:00415041                 jz      short loc_415082
.text:00415043                 mov     eax, [esi]
.text:00415045                 cmp     eax, 0FFFFFFFFh
.text:00415048                 jz      short loc_41505F
.text:0041504A                 mov     [esp+0Ch+hFindFile], eax ; hFindFile
.text:0041504D                 call    FindClose
.text:00415052                 sub     esp, 4
.text:00415055                 test    eax, eax
.text:00415057                 jz      short loc_415072
.text:00415059
.text:00415059 loc_415059:                             ; CODE XREF: sub_415030+50↓j
.text:00415059                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0041505F
.text:0041505F loc_41505F:                             ; CODE XREF: sub_415030+18↑j
.text:0041505F                 mov     dword ptr [esi+14h], 1
.text:00415066
.text:00415066 loc_415066:                             ; CODE XREF: sub_415030+5D↓j
.text:00415066                 mov     ebx, [esp+0Ch+var_8]
.text:0041506A                 mov     esi, [esp+0Ch+var_4]
.text:0041506E                 add     esp, 0Ch
.text:00415071                 retn
.text:00415072 ; ---------------------------------------------------------------------------
.text:00415072
.text:00415072 loc_415072:                             ; CODE XREF: sub_415030+27↑j
.text:00415072                 call    sub_412BE0
.text:00415077                 mov     ebx, eax
.text:00415079                 call    _errno
.text:0041507E                 mov     [eax], ebx
.text:00415080                 jmp     short loc_415059
.text:00415082 ; ---------------------------------------------------------------------------
.text:00415082
.text:00415082 loc_415082:                             ; CODE XREF: sub_415030+11↑j
.text:00415082                 call    _errno
.text:00415087                 mov     dword ptr [eax], 16h
.text:0041508D                 jmp     short loc_415066
.text:0041508D sub_415030      endp
.text:0041508D
.text:0041508D ; ---------------------------------------------------------------------------
.text:0041508F                 align 10h
.text:00415090
.text:00415090 ; =============== S U B R O U T I N E =======================================
.text:00415090
.text:00415090
.text:00415090 sub_415090      proc near               ; CODE XREF: sub_4128B0+4F↑p
.text:00415090
.text:00415090 var_8           = dword ptr -8
.text:00415090 var_4           = dword ptr -4
.text:00415090 arg_0           = dword ptr  4
.text:00415090 arg_4           = dword ptr  8
.text:00415090 arg_8           = dword ptr  0Ch
.text:00415090
.text:00415090                 sub     esp, 8
.text:00415093                 mov     ecx, [esp+8+arg_0]
.text:00415097                 mov     [esp+8+var_8], ebx
.text:0041509A                 mov     ebx, [esp+8+arg_8]
.text:0041509E                 mov     [esp+8+var_4], esi
.text:004150A2                 mov     edx, [esp+8+arg_4]
.text:004150A6                 mov     eax, ebx
.text:004150A8                 and     eax, 7
.text:004150AB                 cmp     eax, 7          ; switch 8 cases
.text:004150AE                 ja      short def_4150B0 ; jumptable 004150B0 default case
.text:004150B0                 jmp     ds:jpt_4150B0[eax*4] ; switch jump
.text:004150B0 ; ---------------------------------------------------------------------------
.text:004150B7                 align 4
.text:004150B8 jpt_4150B0      dd offset loc_41513A    ; DATA XREF: sub_415090+20↑r
.text:004150B8                 dd offset loc_415141    ; jump table for switch statement
.text:004150B8                 dd offset loc_4150D8
.text:004150B8                 dd offset loc_415149
.text:004150B8                 dd offset loc_415156
.text:004150B8                 dd offset loc_415163
.text:004150B8                 dd offset loc_415170
.text:004150B8                 dd offset loc_41517D
.text:004150D8 ; ---------------------------------------------------------------------------
.text:004150D8
.text:004150D8 loc_4150D8:                             ; CODE XREF: sub_415090+20↑j
.text:004150D8                                         ; DATA XREF: sub_415090:jpt_4150B0↑o
.text:004150D8                 mov     eax, [edx]      ; jumptable 004150B0 case 2
.text:004150DA                 sub     ecx, 1Ch
.text:004150DD                 add     ebx, 6
.text:004150E0                 sub     edx, 18h
.text:004150E3                 lea     esi, [esi+0]
.text:004150E9                 lea     edi, [edi+0]
.text:004150F0
.text:004150F0 loc_4150F0:                             ; CODE XREF: sub_415090+A8↓j
.text:004150F0                 mov     esi, [edx+1Ch]
.text:004150F3                 add     edx, 20h ; ' '
.text:004150F6                 mov     [ecx+1Ch], eax
.text:004150F9                 add     ecx, 20h ; ' '
.text:004150FC                 sub     ebx, 8
.text:004150FF                 jnz     short def_4150B0 ; jumptable 004150B0 default case
.text:00415101                 mov     [ecx], esi
.text:00415103                 mov     ebx, [esp+8+var_8]
.text:00415106                 mov     esi, [esp+8+var_4]
.text:0041510A                 add     esp, 8
.text:0041510D                 retn
.text:0041510D ; ---------------------------------------------------------------------------
.text:0041510E                 align 10h
.text:00415110
.text:00415110 def_4150B0:                             ; CODE XREF: sub_415090+1E↑j
.text:00415110                                         ; sub_415090+6F↑j ...
.text:00415110                 mov     eax, [edx]      ; jumptable 004150B0 default case
.text:00415112                 mov     [ecx], esi
.text:00415114
.text:00415114 loc_415114:                             ; CODE XREF: sub_415090+AF↓j
.text:00415114                 mov     esi, [edx+4]
.text:00415117                 mov     [ecx+4], eax
.text:0041511A
.text:0041511A loc_41511A:                             ; CODE XREF: sub_415090+F6↓j
.text:0041511A                 mov     eax, [edx+8]
.text:0041511D                 mov     [ecx+8], esi
.text:00415120
.text:00415120 loc_415120:                             ; CODE XREF: sub_415090+EB↓j
.text:00415120                 mov     esi, [edx+0Ch]
.text:00415123                 mov     [ecx+0Ch], eax
.text:00415126
.text:00415126 loc_415126:                             ; CODE XREF: sub_415090+DE↓j
.text:00415126                 mov     eax, [edx+10h]
.text:00415129                 mov     [ecx+10h], esi
.text:0041512C
.text:0041512C loc_41512C:                             ; CODE XREF: sub_415090+D1↓j
.text:0041512C                 mov     esi, [edx+14h]
.text:0041512F                 mov     [ecx+14h], eax
.text:00415132
.text:00415132 loc_415132:                             ; CODE XREF: sub_415090+C4↓j
.text:00415132                 mov     eax, [edx+18h]
.text:00415135                 mov     [ecx+18h], esi
.text:00415138                 jmp     short loc_4150F0
.text:0041513A ; ---------------------------------------------------------------------------
.text:0041513A
.text:0041513A loc_41513A:                             ; CODE XREF: sub_415090+20↑j
.text:0041513A                                         ; DATA XREF: sub_415090:jpt_4150B0↑o
.text:0041513A                 mov     eax, [edx]      ; jumptable 004150B0 case 0
.text:0041513C                 sub     ecx, 4
.text:0041513F                 jmp     short loc_415114
.text:00415141 ; ---------------------------------------------------------------------------
.text:00415141
.text:00415141 loc_415141:                             ; CODE XREF: sub_415090+20↑j
.text:00415141                                         ; DATA XREF: sub_415090:jpt_4150B0↑o
.text:00415141                 mov     esi, [edx]      ; jumptable 004150B0 case 1
.text:00415143                 dec     ebx
.text:00415144                 add     edx, 4
.text:00415147                 jmp     short def_4150B0 ; jumptable 004150B0 default case
.text:00415149 ; ---------------------------------------------------------------------------
.text:00415149
.text:00415149 loc_415149:                             ; CODE XREF: sub_415090+20↑j
.text:00415149                                         ; DATA XREF: sub_415090:jpt_4150B0↑o
.text:00415149                 mov     esi, [edx]      ; jumptable 004150B0 case 3
.text:0041514B                 sub     ecx, 18h
.text:0041514E                 add     ebx, 5
.text:00415151                 sub     edx, 14h
.text:00415154                 jmp     short loc_415132
.text:00415156 ; ---------------------------------------------------------------------------
.text:00415156
.text:00415156 loc_415156:                             ; CODE XREF: sub_415090+20↑j
.text:00415156                                         ; DATA XREF: sub_415090:jpt_4150B0↑o
.text:00415156                 mov     eax, [edx]      ; jumptable 004150B0 case 4
.text:00415158                 sub     ecx, 14h
.text:0041515B                 add     ebx, 4
.text:0041515E                 sub     edx, 10h
.text:00415161                 jmp     short loc_41512C
.text:00415163 ; ---------------------------------------------------------------------------
.text:00415163
.text:00415163 loc_415163:                             ; CODE XREF: sub_415090+20↑j
.text:00415163                                         ; DATA XREF: sub_415090:jpt_4150B0↑o
.text:00415163                 mov     esi, [edx]      ; jumptable 004150B0 case 5
.text:00415165                 sub     ecx, 10h
.text:00415168                 add     ebx, 3
.text:0041516B                 sub     edx, 0Ch
.text:0041516E                 jmp     short loc_415126
.text:00415170 ; ---------------------------------------------------------------------------
.text:00415170
.text:00415170 loc_415170:                             ; CODE XREF: sub_415090+20↑j
.text:00415170                                         ; DATA XREF: sub_415090:jpt_4150B0↑o
.text:00415170                 mov     eax, [edx]      ; jumptable 004150B0 case 6
.text:00415172                 sub     ecx, 0Ch
.text:00415175                 add     ebx, 2
.text:00415178                 sub     edx, 8
.text:0041517B                 jmp     short loc_415120
.text:0041517D ; ---------------------------------------------------------------------------
.text:0041517D
.text:0041517D loc_41517D:                             ; CODE XREF: sub_415090+20↑j
.text:0041517D                                         ; DATA XREF: sub_415090:jpt_4150B0↑o
.text:0041517D                 mov     esi, [edx]      ; jumptable 004150B0 case 7
.text:0041517F                 sub     ecx, 8
.text:00415182                 inc     ebx
.text:00415183                 sub     edx, 4
.text:00415186                 jmp     short loc_41511A
.text:00415186 sub_415090      endp
.text:00415186
.text:00415186 ; ---------------------------------------------------------------------------
.text:00415188                 align 10h
.text:00415190
.text:00415190 ; =============== S U B R O U T I N E =======================================
.text:00415190
.text:00415190
.text:00415190 sub_415190      proc near               ; CODE XREF: sub_4128B0+93↑p
.text:00415190
.text:00415190 var_1C          = dword ptr -1Ch
.text:00415190 var_18          = dword ptr -18h
.text:00415190 var_14          = dword ptr -14h
.text:00415190 arg_0           = dword ptr  4
.text:00415190 arg_4           = dword ptr  8
.text:00415190 arg_8           = dword ptr  0Ch
.text:00415190
.text:00415190                 push    ebp
.text:00415191                 push    edi
.text:00415192                 push    esi
.text:00415193                 push    ebx
.text:00415194                 sub     esp, 0Ch
.text:00415197                 mov     edx, [esp+1Ch+arg_4]
.text:0041519B                 mov     [esp+1Ch+var_14], 20h ; ' '
.text:004151A3                 mov     eax, [esp+1Ch+arg_8]
.text:004151A7                 mov     esi, [esp+1Ch+arg_0]
.text:004151AB                 mov     ecx, edx
.text:004151AD                 and     ecx, 3
.text:004151B0                 and     eax, 3
.text:004151B3                 shl     ecx, 3
.text:004151B6                 and     edx, 0FFFFFFFCh
.text:004151B9                 sub     [esp+1Ch+var_14], ecx
.text:004151BD                 cmp     eax, 1
.text:004151C0                 mov     [esp+1Ch+var_18], ecx
.text:004151C4                 jz      loc_4152B0
.text:004151CA                 cmp     eax, 1
.text:004151CD                 jb      loc_4152A0
.text:004151D3                 cmp     eax, 2
.text:004151D6                 jz      loc_415284
.text:004151DC                 cmp     eax, 3
.text:004151DF                 jz      loc_415273
.text:004151E5
.text:004151E5 loc_4151E5:                             ; CODE XREF: sub_415190+C7↓j
.text:004151E5                                         ; sub_415190+12C↓j
.text:004151E5                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:004151EA                 mov     eax, edi
.text:004151EC                 mov     ebx, [edx]
.text:004151EE                 shr     ebp, cl
.text:004151F0                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:004151F5                 shl     eax, cl
.text:004151F7                 or      ebp, eax
.text:004151F9                 mov     [esi], ebp
.text:004151FB
.text:004151FB loc_4151FB:                             ; CODE XREF: sub_415190+11B↓j
.text:004151FB                 mov     ecx, [edx+4]
.text:004151FE                 mov     ebp, ebx
.text:00415200                 mov     [esp+1Ch+var_1C], ecx
.text:00415203                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00415208                 shr     edi, cl
.text:0041520A                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041520F                 shl     ebp, cl
.text:00415211                 or      edi, ebp
.text:00415213                 mov     [esi+4], edi
.text:00415216
.text:00415216 loc_415216:                             ; CODE XREF: sub_415190+F2↓j
.text:00415216                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041521B                 mov     edi, [esp+1Ch+var_1C]
.text:0041521E                 mov     ebp, [edx+8]
.text:00415221                 shr     ebx, cl
.text:00415223                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00415228                 shl     edi, cl
.text:0041522A                 or      ebx, edi
.text:0041522C                 mov     [esi+8], ebx
.text:0041522F
.text:0041522F loc_41522F:                             ; CODE XREF: sub_415190+107↓j
.text:0041522F                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00415234                 mov     ebx, ebp
.text:00415236                 mov     edi, [edx+0Ch]
.text:00415239                 add     edx, 10h
.text:0041523C                 shr     [esp+1Ch+var_1C], cl
.text:0041523F                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00415244                 shl     ebx, cl
.text:00415246                 or      [esp+1Ch+var_1C], ebx
.text:00415249                 mov     ebx, [esp+1Ch+var_1C]
.text:0041524C                 mov     [esi+0Ch], ebx
.text:0041524F                 add     esi, 10h
.text:00415252                 sub     [esp+1Ch+arg_8], 4
.text:00415257                 jnz     short loc_4151E5
.text:00415259                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041525E                 shr     ebp, cl
.text:00415260                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00415265                 shl     edi, cl
.text:00415267                 or      ebp, edi
.text:00415269                 mov     [esi], ebp
.text:0041526B                 add     esp, 0Ch
.text:0041526E                 pop     ebx
.text:0041526F                 pop     esi
.text:00415270                 pop     edi
.text:00415271                 pop     ebp
.text:00415272                 retn
.text:00415273 ; ---------------------------------------------------------------------------
.text:00415273
.text:00415273 loc_415273:                             ; CODE XREF: sub_415190+4F↑j
.text:00415273                 inc     [esp+1Ch+arg_8]
.text:00415277                 sub     esi, 8
.text:0041527A                 mov     eax, [edx+4]
.text:0041527D                 mov     ebx, [edx]
.text:0041527F                 mov     [esp+1Ch+var_1C], eax
.text:00415282                 jmp     short loc_415216
.text:00415284 ; ---------------------------------------------------------------------------
.text:00415284
.text:00415284 loc_415284:                             ; CODE XREF: sub_415190+46↑j
.text:00415284                 add     [esp+1Ch+arg_8], 2
.text:00415289                 sub     esi, 0Ch
.text:0041528C                 mov     ecx, [edx]
.text:0041528E                 mov     ebp, [edx+4]
.text:00415291                 sub     edx, 4
.text:00415294                 mov     [esp+1Ch+var_1C], ecx
.text:00415297                 jmp     short loc_41522F
.text:00415297 ; ---------------------------------------------------------------------------
.text:00415299                 align 10h
.text:004152A0
.text:004152A0 loc_4152A0:                             ; CODE XREF: sub_415190+3D↑j
.text:004152A0                 mov     edi, [edx]
.text:004152A2                 sub     esi, 4
.text:004152A5                 mov     ebx, [edx+4]
.text:004152A8                 add     edx, 4
.text:004152AB                 jmp     loc_4151FB
.text:004152B0 ; ---------------------------------------------------------------------------
.text:004152B0
.text:004152B0 loc_4152B0:                             ; CODE XREF: sub_415190+34↑j
.text:004152B0                 dec     [esp+1Ch+arg_8]
.text:004152B4                 mov     ebp, [edx]
.text:004152B6                 mov     edi, [edx+4]
.text:004152B9                 add     edx, 8
.text:004152BC                 jmp     loc_4151E5
.text:004152BC sub_415190      endp
.text:004152BC
.text:004152C1 ; ---------------------------------------------------------------------------
.text:004152C1                 jmp     short loc_4152D0
.text:004152C1 ; ---------------------------------------------------------------------------
.text:004152C3                 align 10h
.text:004152D0
.text:004152D0 loc_4152D0:                             ; CODE XREF: .text:004152C1↑j
.text:004152D0                 sub     esp, 8
.text:004152D3                 mov     ecx, [esp+0Ch]
.text:004152D7                 mov     [esp+4], esi
.text:004152DB                 mov     esi, [esp+14h]
.text:004152DF                 mov     [esp], ebx
.text:004152E2                 mov     edx, [esp+10h]
.text:004152E6                 mov     eax, esi
.text:004152E8                 and     eax, 7
.text:004152EB                 cmp     eax, 7          ; switch 8 cases
.text:004152EE                 ja      short def_4152F0 ; jumptable 004152F0 default case
.text:004152F0                 jmp     ds:jpt_4152F0[eax*4] ; switch jump
.text:004152F0 ; ---------------------------------------------------------------------------
.text:004152F7                 align 4
.text:004152F8 jpt_4152F0      dd offset loc_41537C    ; DATA XREF: .text:004152F0↑r
.text:004152F8                 dd offset loc_415387    ; jump table for switch statement
.text:004152F8                 dd offset loc_415318
.text:004152F8                 dd offset loc_415393
.text:004152F8                 dd offset loc_4153A1
.text:004152F8                 dd offset loc_4153AF
.text:004152F8                 dd offset loc_4153BD
.text:004152F8                 dd offset loc_4153CB
.text:00415318 ; ---------------------------------------------------------------------------
.text:00415318
.text:00415318 loc_415318:                             ; CODE XREF: .text:004152F0↑j
.text:00415318                                         ; DATA XREF: .text:jpt_4152F0↑o
.text:00415318                 sub     edx, 8          ; jumptable 004152F0 case 2
.text:0041531B                 sub     ecx, 4
.text:0041531E                 mov     eax, [edx+4]
.text:00415321                 add     esi, 6
.text:00415324                 lea     esi, [esi+0]
.text:0041532A                 lea     edi, [edi+0]
.text:00415330
.text:00415330 loc_415330:                             ; CODE XREF: .text:0041537A↓j
.text:00415330                 mov     ebx, [edx]
.text:00415332                 sub     edx, 20h ; ' '
.text:00415335                 mov     [ecx], eax
.text:00415337                 sub     ecx, 20h ; ' '
.text:0041533A                 sub     esi, 8
.text:0041533D                 jnz     short def_4152F0 ; jumptable 004152F0 default case
.text:0041533F                 mov     [ecx+1Ch], ebx
.text:00415342                 mov     ebx, [esp]
.text:00415345                 mov     esi, [esp+4]
.text:00415349                 add     esp, 8
.text:0041534C                 retn
.text:0041534C ; ---------------------------------------------------------------------------
.text:0041534D                 align 10h
.text:00415350
.text:00415350 def_4152F0:                             ; CODE XREF: .text:004152EE↑j
.text:00415350                                         ; .text:0041533D↑j ...
.text:00415350                 mov     eax, [edx+1Ch]  ; jumptable 004152F0 default case
.text:00415353                 mov     [ecx+1Ch], ebx
.text:00415356
.text:00415356 loc_415356:                             ; CODE XREF: .text:00415385↓j
.text:00415356                 mov     ebx, [edx+18h]
.text:00415359                 mov     [ecx+18h], eax
.text:0041535C
.text:0041535C loc_41535C:                             ; CODE XREF: .text:004153D5↓j
.text:0041535C                 mov     eax, [edx+14h]
.text:0041535F                 mov     [ecx+14h], ebx
.text:00415362
.text:00415362 loc_415362:                             ; CODE XREF: .text:004153C9↓j
.text:00415362                 mov     ebx, [edx+10h]
.text:00415365                 mov     [ecx+10h], eax
.text:00415368
.text:00415368 loc_415368:                             ; CODE XREF: .text:004153BB↓j
.text:00415368                 mov     eax, [edx+0Ch]
.text:0041536B                 mov     [ecx+0Ch], ebx
.text:0041536E
.text:0041536E loc_41536E:                             ; CODE XREF: .text:004153AD↓j
.text:0041536E                 mov     ebx, [edx+8]
.text:00415371                 mov     [ecx+8], eax
.text:00415374
.text:00415374 loc_415374:                             ; CODE XREF: .text:0041539F↓j
.text:00415374                 mov     eax, [edx+4]
.text:00415377                 mov     [ecx+4], ebx
.text:0041537A                 jmp     short loc_415330
.text:0041537C ; ---------------------------------------------------------------------------
.text:0041537C
.text:0041537C loc_41537C:                             ; CODE XREF: .text:004152F0↑j
.text:0041537C                                         ; DATA XREF: .text:jpt_4152F0↑o
.text:0041537C                 sub     edx, 20h ; ' '  ; jumptable 004152F0 case 0
.text:0041537F                 sub     ecx, 1Ch
.text:00415382                 mov     eax, [edx+1Ch]
.text:00415385                 jmp     short loc_415356
.text:00415387 ; ---------------------------------------------------------------------------
.text:00415387
.text:00415387 loc_415387:                             ; CODE XREF: .text:004152F0↑j
.text:00415387                                         ; DATA XREF: .text:jpt_4152F0↑o
.text:00415387                 sub     edx, 24h ; '$'  ; jumptable 004152F0 case 1
.text:0041538A                 sub     ecx, 20h ; ' '
.text:0041538D                 mov     ebx, [edx+20h]
.text:00415390                 dec     esi
.text:00415391                 jmp     short def_4152F0 ; jumptable 004152F0 default case
.text:00415393 ; ---------------------------------------------------------------------------
.text:00415393
.text:00415393 loc_415393:                             ; CODE XREF: .text:004152F0↑j
.text:00415393                                         ; DATA XREF: .text:jpt_4152F0↑o
.text:00415393                 sub     edx, 0Ch        ; jumptable 004152F0 case 3
.text:00415396                 sub     ecx, 8
.text:00415399                 mov     ebx, [edx+8]
.text:0041539C                 add     esi, 5
.text:0041539F                 jmp     short loc_415374
.text:004153A1 ; ---------------------------------------------------------------------------
.text:004153A1
.text:004153A1 loc_4153A1:                             ; CODE XREF: .text:004152F0↑j
.text:004153A1                                         ; DATA XREF: .text:jpt_4152F0↑o
.text:004153A1                 sub     edx, 10h        ; jumptable 004152F0 case 4
.text:004153A4                 sub     ecx, 0Ch
.text:004153A7                 mov     eax, [edx+0Ch]
.text:004153AA                 add     esi, 4
.text:004153AD                 jmp     short loc_41536E
.text:004153AF ; ---------------------------------------------------------------------------
.text:004153AF
.text:004153AF loc_4153AF:                             ; CODE XREF: .text:004152F0↑j
.text:004153AF                                         ; DATA XREF: .text:jpt_4152F0↑o
.text:004153AF                 sub     edx, 14h        ; jumptable 004152F0 case 5
.text:004153B2                 sub     ecx, 10h
.text:004153B5                 mov     ebx, [edx+10h]
.text:004153B8                 add     esi, 3
.text:004153BB                 jmp     short loc_415368
.text:004153BD ; ---------------------------------------------------------------------------
.text:004153BD
.text:004153BD loc_4153BD:                             ; CODE XREF: .text:004152F0↑j
.text:004153BD                                         ; DATA XREF: .text:jpt_4152F0↑o
.text:004153BD                 sub     edx, 18h        ; jumptable 004152F0 case 6
.text:004153C0                 sub     ecx, 14h
.text:004153C3                 mov     eax, [edx+14h]
.text:004153C6                 add     esi, 2
.text:004153C9                 jmp     short loc_415362
.text:004153CB ; ---------------------------------------------------------------------------
.text:004153CB
.text:004153CB loc_4153CB:                             ; CODE XREF: .text:004152F0↑j
.text:004153CB                                         ; DATA XREF: .text:jpt_4152F0↑o
.text:004153CB                 sub     edx, 1Ch        ; jumptable 004152F0 case 7
.text:004153CE                 sub     ecx, 18h
.text:004153D1                 mov     ebx, [edx+18h]
.text:004153D4                 inc     esi
.text:004153D5                 jmp     short loc_41535C
.text:004153D5 ; ---------------------------------------------------------------------------
.text:004153D7                 align 10h
.text:004153E0                 push    ebp
.text:004153E1                 push    edi
.text:004153E2                 push    esi
.text:004153E3                 push    ebx
.text:004153E4                 sub     esp, 8
.text:004153E7                 mov     edx, [esp+20h]
.text:004153EB                 mov     dword ptr [esp+4], 20h ; ' '
.text:004153F3                 mov     eax, [esp+24h]
.text:004153F7                 mov     ecx, edx
.text:004153F9                 and     ecx, 3
.text:004153FC                 and     eax, 3
.text:004153FF                 shl     ecx, 3
.text:00415402                 sub     [esp+4], ecx
.text:00415406                 and     edx, 0FFFFFFFCh
.text:00415409                 add     edx, 4
.text:0041540C                 mov     [esp], ecx
.text:0041540F                 cmp     eax, 1
.text:00415412                 jz      loc_415508
.text:00415418                 cmp     eax, 1
.text:0041541B                 jb      loc_4154F5
.text:00415421                 cmp     eax, 2
.text:00415424                 jz      loc_4154E0
.text:0041542A                 cmp     eax, 3
.text:0041542D                 jz      loc_4154CC
.text:00415433
.text:00415433 loc_415433:                             ; CODE XREF: .text:004154AC↓j
.text:00415433                                         ; .text:0041551A↓j
.text:00415433                 movzx   ecx, byte ptr [esp]
.text:00415437                 mov     eax, edi
.text:00415439                 mov     ebx, [esp+1Ch]
.text:0041543D                 mov     esi, [edx+0Ch]
.text:00415440                 shr     eax, cl
.text:00415442                 movzx   ecx, byte ptr [esp+4]
.text:00415447                 shl     ebp, cl
.text:00415449                 or      eax, ebp
.text:0041544B                 mov     [ebx+0Ch], eax
.text:0041544E
.text:0041544E loc_41544E:                             ; CODE XREF: .text:00415503↓j
.text:0041544E                 movzx   ecx, byte ptr [esp]
.text:00415452                 mov     ebp, esi
.text:00415454                 mov     ebx, [edx+8]
.text:00415457                 shr     ebp, cl
.text:00415459                 movzx   ecx, byte ptr [esp+4]
.text:0041545E                 shl     edi, cl
.text:00415460                 or      ebp, edi
.text:00415462                 mov     edi, [esp+1Ch]
.text:00415466                 mov     [edi+8], ebp
.text:00415469
.text:00415469 loc_415469:                             ; CODE XREF: .text:004154DE↓j
.text:00415469                 movzx   ecx, byte ptr [esp]
.text:0041546D                 mov     edi, ebx
.text:0041546F                 mov     ebp, [edx+4]
.text:00415472                 shr     edi, cl
.text:00415474                 movzx   ecx, byte ptr [esp+4]
.text:00415479                 shl     esi, cl
.text:0041547B                 or      edi, esi
.text:0041547D                 mov     esi, [esp+1Ch]
.text:00415481                 mov     [esi+4], edi
.text:00415484
.text:00415484 loc_415484:                             ; CODE XREF: .text:004154F3↓j
.text:00415484                 movzx   ecx, byte ptr [esp]
.text:00415488                 mov     esi, ebp
.text:0041548A                 mov     edi, [edx]
.text:0041548C                 sub     edx, 10h
.text:0041548F                 shr     esi, cl
.text:00415491                 movzx   ecx, byte ptr [esp+4]
.text:00415496                 shl     ebx, cl
.text:00415498                 or      esi, ebx
.text:0041549A                 mov     ebx, [esp+1Ch]
.text:0041549E                 mov     [ebx], esi
.text:004154A0                 sub     ebx, 10h
.text:004154A3                 sub     dword ptr [esp+24h], 4
.text:004154A8                 mov     [esp+1Ch], ebx
.text:004154AC                 jnz     short loc_415433
.text:004154AE                 movzx   ecx, byte ptr [esp]
.text:004154B2                 mov     edx, [esp+1Ch]
.text:004154B6                 shr     edi, cl
.text:004154B8                 movzx   ecx, byte ptr [esp+4]
.text:004154BD                 shl     ebp, cl
.text:004154BF                 or      edi, ebp
.text:004154C1                 mov     [edx+0Ch], edi
.text:004154C4                 add     esp, 8
.text:004154C7                 pop     ebx
.text:004154C8                 pop     esi
.text:004154C9                 pop     edi
.text:004154CA                 pop     ebp
.text:004154CB                 retn
.text:004154CC ; ---------------------------------------------------------------------------
.text:004154CC
.text:004154CC loc_4154CC:                             ; CODE XREF: .text:0041542D↑j
.text:004154CC                 sub     dword ptr [esp+1Ch], 8
.text:004154D1                 sub     edx, 10h
.text:004154D4                 inc     dword ptr [esp+24h]
.text:004154D8                 mov     esi, [edx+0Ch]
.text:004154DB                 mov     ebx, [edx+8]
.text:004154DE                 jmp     short loc_415469
.text:004154E0 ; ---------------------------------------------------------------------------
.text:004154E0
.text:004154E0 loc_4154E0:                             ; CODE XREF: .text:00415424↑j
.text:004154E0                 sub     dword ptr [esp+1Ch], 4
.text:004154E5                 sub     edx, 0Ch
.text:004154E8                 add     dword ptr [esp+24h], 2
.text:004154ED                 mov     ebx, [edx+8]
.text:004154F0                 mov     ebp, [edx+4]
.text:004154F3                 jmp     short loc_415484
.text:004154F5 ; ---------------------------------------------------------------------------
.text:004154F5
.text:004154F5 loc_4154F5:                             ; CODE XREF: .text:0041541B↑j
.text:004154F5                 sub     dword ptr [esp+1Ch], 0Ch
.text:004154FA                 sub     edx, 14h
.text:004154FD                 mov     edi, [edx+10h]
.text:00415500                 mov     esi, [edx+0Ch]
.text:00415503                 jmp     loc_41544E
.text:00415508 ; ---------------------------------------------------------------------------
.text:00415508
.text:00415508 loc_415508:                             ; CODE XREF: .text:00415412↑j
.text:00415508                 sub     dword ptr [esp+1Ch], 10h
.text:0041550D                 sub     edx, 18h
.text:00415510                 dec     dword ptr [esp+24h]
.text:00415514                 mov     ebp, [edx+14h]
.text:00415517                 mov     edi, [edx+10h]
.text:0041551A                 jmp     loc_415433
.text:0041551A ; ---------------------------------------------------------------------------
.text:0041551F                 align 10h
.text:00415520
.text:00415520 ; =============== S U B R O U T I N E =======================================
.text:00415520
.text:00415520 ; Attributes: noreturn
.text:00415520
.text:00415520 sub_415520      proc near               ; CODE XREF: .text:00413E69↑p
.text:00415520                                         ; sub_415520↓j
.text:00415520                 jmp     short sub_415520
.text:00415520 sub_415520      endp
.text:00415520
.text:00415520 ; ---------------------------------------------------------------------------
.text:00415522                 align 10h
.text:00415530
.text:00415530 ; =============== S U B R O U T I N E =======================================
.text:00415530
.text:00415530
.text:00415530 sub_415530      proc near               ; CODE XREF: .text:00413BC5↑p
.text:00415530
.text:00415530 FileHandle      = dword ptr -1Ch
.text:00415530 dwFileOffsetLow = dword ptr -18h
.text:00415530 dwFileOffsetHigh= dword ptr -14h
.text:00415530 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:00415530 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:00415530 var_8           = dword ptr -8
.text:00415530 var_4           = dword ptr -4
.text:00415530 arg_0           = dword ptr  4
.text:00415530
.text:00415530                 sub     esp, 1Ch
.text:00415533                 mov     edx, [esp+1Ch+arg_0]
.text:00415537                 mov     [esp+1Ch+var_4], esi
.text:0041553B                 mov     [esp+1Ch+var_8], ebx
.text:0041553F                 mov     ebx, [edx+10h]
.text:00415542                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:00415545                 call    _get_osfhandle
.text:0041554A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0041554D                 mov     esi, eax
.text:0041554F                 call    _filelengthi64
.text:00415554                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:00415558                 cdq
.text:00415559                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0041555C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:00415560                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:00415568                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:00415570                 call    UnlockFile
.text:00415575                 sub     esp, 14h
.text:00415578                 mov     ebx, [esp+1Ch+var_8]
.text:0041557C                 mov     esi, [esp+1Ch+var_4]
.text:00415580                 add     esp, 1Ch
.text:00415583                 retn
.text:00415583 sub_415530      endp
.text:00415583
.text:00415583 ; ---------------------------------------------------------------------------
.text:00415584                 align 10h
.text:00415590
.text:00415590 ; =============== S U B R O U T I N E =======================================
.text:00415590
.text:00415590
.text:00415590 ; int __cdecl sub_415590(int, char *Control)
.text:00415590 sub_415590      proc near               ; CODE XREF: .text:00413A86↑p
.text:00415590                                         ; .text:00413AD6↑p ...
.text:00415590
.text:00415590 Str             = dword ptr -1Ch
.text:00415590 Val             = dword ptr -18h
.text:00415590 var_8           = dword ptr -8
.text:00415590 var_4           = dword ptr -4
.text:00415590 arg_0           = dword ptr  4
.text:00415590 Control         = dword ptr  8
.text:00415590
.text:00415590                 sub     esp, 1Ch
.text:00415593                 xor     eax, eax
.text:00415595                 mov     edx, [esp+1Ch+Control]
.text:00415599                 mov     [esp+1Ch+var_4], esi
.text:0041559D                 mov     esi, [esp+1Ch+arg_0]
.text:004155A1                 mov     [esp+1Ch+var_8], ebx
.text:004155A5                 mov     ebx, [esi]
.text:004155A7                 test    ebx, ebx
.text:004155A9                 jz      short loc_4155D8
.text:004155AB                 movzx   eax, byte ptr [edx]
.text:004155AE                 test    al, al
.text:004155B0                 jz      short loc_4155D0
.text:004155B2                 cmp     byte ptr [edx+1], 0
.text:004155B6                 jnz     short loc_415610
.text:004155B8                 movzx   ecx, byte ptr [ebx]
.text:004155BB                 mov     edx, ebx
.text:004155BD                 cmp     cl, al
.text:004155BF                 jz      short loc_415602
.text:004155C1                 test    cl, cl
.text:004155C3                 jnz     short loc_4155E4
.text:004155C5                 lea     esi, [esi+0]
.text:004155C9                 lea     edi, [edi+0]
.text:004155D0
.text:004155D0 loc_4155D0:                             ; CODE XREF: sub_415590+20↑j
.text:004155D0                                         ; sub_415590+74↓j
.text:004155D0                 mov     dword ptr [esi], 0
.text:004155D6
.text:004155D6 loc_4155D6:                             ; CODE XREF: sub_415590+7C↓j
.text:004155D6                 mov     eax, ebx
.text:004155D8
.text:004155D8 loc_4155D8:                             ; CODE XREF: sub_415590+19↑j
.text:004155D8                 mov     ebx, [esp+1Ch+var_8]
.text:004155DC                 mov     esi, [esp+1Ch+var_4]
.text:004155E0                 add     esp, 1Ch
.text:004155E3                 retn
.text:004155E4 ; ---------------------------------------------------------------------------
.text:004155E4
.text:004155E4 loc_4155E4:                             ; CODE XREF: sub_415590+33↑j
.text:004155E4                 movsx   edx, al
.text:004155E7                 mov     [esp+1Ch+Val], edx ; Val
.text:004155EB                 lea     edx, [ebx+1]
.text:004155EE                 mov     [esp+1Ch+Str], edx ; Str
.text:004155F1                 call    strchr
.text:004155F6                 lea     esi, [esi+0]
.text:004155F9                 lea     edi, [edi+0]
.text:00415600
.text:00415600 loc_415600:                             ; CODE XREF: sub_415590+8C↓j
.text:00415600                 mov     edx, eax
.text:00415602
.text:00415602 loc_415602:                             ; CODE XREF: sub_415590+2F↑j
.text:00415602                 test    edx, edx
.text:00415604                 jz      short loc_4155D0
.text:00415606                 mov     byte ptr [edx], 0
.text:00415609                 inc     edx
.text:0041560A                 mov     [esi], edx
.text:0041560C                 jmp     short loc_4155D6
.text:0041560C ; ---------------------------------------------------------------------------
.text:0041560E                 align 10h
.text:00415610
.text:00415610 loc_415610:                             ; CODE XREF: sub_415590+26↑j
.text:00415610                 mov     [esp+1Ch+Val], edx ; Control
.text:00415614                 mov     [esp+1Ch+Str], ebx ; Str
.text:00415617                 call    strpbrk
.text:0041561C                 jmp     short loc_415600
.text:0041561C sub_415590      endp
.text:0041561C
.text:0041561C ; ---------------------------------------------------------------------------
.text:0041561E                 align 10h
.text:00415620 ; const char aTmpf[]
.text:00415620 aTmpf           db 'tmpf',0             ; DATA XREF: sub_415630+20↓o
.text:00415625 ; const char aWBd[]
.text:00415625 aWBd            db 'w+bD',0             ; DATA XREF: sub_415630+5E↓o
.text:0041562A                 align 10h
.text:00415630
.text:00415630 ; =============== S U B R O U T I N E =======================================
.text:00415630
.text:00415630
.text:00415630 sub_415630      proc near               ; CODE XREF: sub_4144FF+A4↑p
.text:00415630
.text:00415630 FileHandle      = dword ptr -13Ch
.text:00415630 Format          = dword ptr -138h
.text:00415630 var_134         = dword ptr -134h
.text:00415630 var_130         = dword ptr -130h
.text:00415630 var_12C         = dword ptr -12Ch
.text:00415630 Buffer          = byte ptr -11Ch
.text:00415630 var_8           = dword ptr -8
.text:00415630 var_4           = dword ptr -4
.text:00415630
.text:00415630                 sub     esp, 13Ch
.text:00415636                 mov     [esp+13Ch+var_8], ebx
.text:0041563D                 lea     ebx, [esp+13Ch+Buffer]
.text:00415641                 mov     [esp+13Ch+var_4], esi
.text:00415648                 mov     [esp+13Ch+var_12C], 0 ; int
.text:00415650                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:00415658                 mov     [esp+13Ch+var_134], 0 ; char *
.text:00415660                 mov     [esp+13Ch+Format], 104h ; int
.text:00415668                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0041566B                 call    sub_415880
.text:00415670                 xor     edx, edx
.text:00415672                 test    eax, eax
.text:00415674                 jnz     short loc_4156A6
.text:00415676                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:00415679                 mov     [esp+13Ch+Format], 0 ; int
.text:00415681                 call    sub_415C00
.text:00415686                 xor     edx, edx
.text:00415688                 mov     ebx, eax
.text:0041568A                 test    eax, eax
.text:0041568C                 js      short loc_4156A6
.text:0041568E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:00415696                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:00415699                 call    _fdopen
.text:0041569E                 test    eax, eax
.text:004156A0                 mov     esi, eax
.text:004156A2                 jz      short loc_4156BD
.text:004156A4
.text:004156A4 loc_4156A4:                             ; CODE XREF: sub_415630+95↓j
.text:004156A4                 mov     edx, esi
.text:004156A6
.text:004156A6 loc_4156A6:                             ; CODE XREF: sub_415630+44↑j
.text:004156A6                                         ; sub_415630+5C↑j
.text:004156A6                 mov     ebx, [esp+13Ch+var_8]
.text:004156AD                 mov     eax, edx
.text:004156AF                 mov     esi, [esp+13Ch+var_4]
.text:004156B6                 add     esp, 13Ch
.text:004156BC                 retn
.text:004156BD ; ---------------------------------------------------------------------------
.text:004156BD
.text:004156BD loc_4156BD:                             ; CODE XREF: sub_415630+72↑j
.text:004156BD                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:004156C0                 call    _close_0
.text:004156C5                 jmp     short loc_4156A4
.text:004156C5 sub_415630      endp
.text:004156C5
.text:004156C5 ; ---------------------------------------------------------------------------
.text:004156C7                 align 10h
.text:004156D0
.text:004156D0 ; =============== S U B R O U T I N E =======================================
.text:004156D0
.text:004156D0
.text:004156D0 sub_4156D0      proc near               ; CODE XREF: _sysconf+297↑j
.text:004156D0
.text:004156D0 lpSystemInfo    = dword ptr -0Ch
.text:004156D0 var_4           = dword ptr -4
.text:004156D0
.text:004156D0                 sub     esp, 0Ch
.text:004156D3                 mov     [esp+0Ch+var_4], edi
.text:004156D7                 mov     edi, ds:dword_41B5B0
.text:004156DD                 test    edi, edi
.text:004156DF                 mov     eax, edi
.text:004156E1                 jz      short loc_4156F0
.text:004156E3
.text:004156E3 loc_4156E3:                             ; CODE XREF: sub_4156D0+48↓j
.text:004156E3                 mov     eax, [edi+14h]
.text:004156E6                 mov     edi, [esp+0Ch+var_4]
.text:004156EA                 add     esp, 0Ch
.text:004156ED                 retn
.text:004156ED ; ---------------------------------------------------------------------------
.text:004156EE                 align 10h
.text:004156F0
.text:004156F0 loc_4156F0:                             ; CODE XREF: sub_4156D0+11↑j
.text:004156F0                 cld
.text:004156F1                 mov     edi, offset SystemInfo
.text:004156F6                 mov     ecx, 9
.text:004156FB                 mov     ds:dword_41B5B0, edi
.text:00415701                 rep stosd
.text:00415703                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:0041570A                 call    GetSystemInfo
.text:0041570F                 mov     edi, ds:dword_41B5B0
.text:00415715                 sub     esp, 4
.text:00415718                 jmp     short loc_4156E3
.text:00415718 sub_4156D0      endp
.text:00415718
.text:00415718 ; ---------------------------------------------------------------------------
.text:0041571A                 align 10h
.text:00415720
.text:00415720 ; =============== S U B R O U T I N E =======================================
.text:00415720
.text:00415720
.text:00415720 sub_415720      proc near               ; CODE XREF: _sysconf+28F↑j
.text:00415720
.text:00415720 lpSystemInfo    = dword ptr -0Ch
.text:00415720 var_4           = dword ptr -4
.text:00415720
.text:00415720                 sub     esp, 0Ch
.text:00415723                 mov     [esp+0Ch+var_4], edi
.text:00415727                 mov     edi, ds:dword_41B5B0
.text:0041572D                 test    edi, edi
.text:0041572F                 mov     eax, edi
.text:00415731                 jz      short loc_415740
.text:00415733
.text:00415733 loc_415733:                             ; CODE XREF: sub_415720+48↓j
.text:00415733                 mov     eax, [edi+14h]
.text:00415736                 mov     edi, [esp+0Ch+var_4]
.text:0041573A                 add     esp, 0Ch
.text:0041573D                 retn
.text:0041573D ; ---------------------------------------------------------------------------
.text:0041573E                 align 10h
.text:00415740
.text:00415740 loc_415740:                             ; CODE XREF: sub_415720+11↑j
.text:00415740                 cld
.text:00415741                 mov     edi, offset SystemInfo
.text:00415746                 mov     ecx, 9
.text:0041574B                 mov     ds:dword_41B5B0, edi
.text:00415751                 rep stosd
.text:00415753                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:0041575A                 call    GetSystemInfo
.text:0041575F                 mov     edi, ds:dword_41B5B0
.text:00415765                 sub     esp, 4
.text:00415768                 jmp     short loc_415733
.text:00415768 sub_415720      endp
.text:00415768
.text:00415768 ; ---------------------------------------------------------------------------
.text:0041576A                 align 10h
.text:00415770
.text:00415770 ; =============== S U B R O U T I N E =======================================
.text:00415770
.text:00415770
.text:00415770 sub_415770      proc near               ; CODE XREF: _sysconf+29F↑j
.text:00415770
.text:00415770 lpSystemInfo    = dword ptr -0Ch
.text:00415770 var_4           = dword ptr -4
.text:00415770
.text:00415770                 sub     esp, 0Ch
.text:00415773                 mov     [esp+0Ch+var_4], edi
.text:00415777                 mov     edi, ds:dword_41B5B0
.text:0041577D                 test    edi, edi
.text:0041577F                 mov     eax, edi
.text:00415781                 jz      short loc_415798
.text:00415783
.text:00415783 loc_415783:                             ; CODE XREF: sub_415770+50↓j
.text:00415783                 mov     eax, [edi+0Ch]
.text:00415786                 xor     edx, edx
.text:00415788                 mov     ecx, [edi+8]
.text:0041578B                 sub     eax, ecx
.text:0041578D                 div     dword ptr [edi+4]
.text:00415790                 mov     edi, [esp+0Ch+var_4]
.text:00415794                 add     esp, 0Ch
.text:00415797                 retn
.text:00415798 ; ---------------------------------------------------------------------------
.text:00415798
.text:00415798 loc_415798:                             ; CODE XREF: sub_415770+11↑j
.text:00415798                 cld
.text:00415799                 mov     edi, offset SystemInfo
.text:0041579E                 mov     ecx, 9
.text:004157A3                 mov     ds:dword_41B5B0, edi
.text:004157A9                 rep stosd
.text:004157AB                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:004157B2                 call    GetSystemInfo
.text:004157B7                 mov     edi, ds:dword_41B5B0
.text:004157BD                 sub     esp, 4
.text:004157C0                 jmp     short loc_415783
.text:004157C0 sub_415770      endp
.text:004157C0
.text:004157C0 ; ---------------------------------------------------------------------------
.text:004157C2                 align 10h
.text:004157D0
.text:004157D0 ; =============== S U B R O U T I N E =======================================
.text:004157D0
.text:004157D0
.text:004157D0 sub_4157D0      proc near               ; CODE XREF: _sysconf+2A7↑j
.text:004157D0
.text:004157D0 lpSystemInfo    = dword ptr -0Ch
.text:004157D0 var_4           = dword ptr -4
.text:004157D0
.text:004157D0                 sub     esp, 0Ch
.text:004157D3                 mov     [esp+0Ch+var_4], edi
.text:004157D7                 mov     edi, ds:dword_41B5B0
.text:004157DD                 test    edi, edi
.text:004157DF                 mov     eax, edi
.text:004157E1                 jz      short loc_4157F8
.text:004157E3
.text:004157E3 loc_4157E3:                             ; CODE XREF: sub_4157D0+50↓j
.text:004157E3                 mov     edx, [edi+8]
.text:004157E6                 mov     eax, [edi+0Ch]
.text:004157E9                 sub     eax, edx
.text:004157EB                 xor     edx, edx
.text:004157ED                 div     dword ptr [edi+4]
.text:004157F0                 mov     edi, [esp+0Ch+var_4]
.text:004157F4                 add     esp, 0Ch
.text:004157F7                 retn
.text:004157F8 ; ---------------------------------------------------------------------------
.text:004157F8
.text:004157F8 loc_4157F8:                             ; CODE XREF: sub_4157D0+11↑j
.text:004157F8                 cld
.text:004157F9                 mov     edi, offset SystemInfo
.text:004157FE                 mov     ecx, 9
.text:00415803                 mov     ds:dword_41B5B0, edi
.text:00415809                 rep stosd
.text:0041580B                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:00415812                 call    GetSystemInfo
.text:00415817                 mov     edi, ds:dword_41B5B0
.text:0041581D                 sub     esp, 4
.text:00415820                 jmp     short loc_4157E3
.text:00415820 sub_4157D0      endp
.text:00415820
.text:00415820 ; ---------------------------------------------------------------------------
.text:00415822                 align 10h
.text:00415830
.text:00415830 ; =============== S U B R O U T I N E =======================================
.text:00415830
.text:00415830
.text:00415830 sub_415830      proc near               ; CODE XREF: _sysconf:loc_414F5B↑p
.text:00415830                                         ; _sysconf:loc_414F6E↑p
.text:00415830                 mov     edx, 40h ; '@'
.text:00415835                 mov     eax, 40h ; '@'
.text:0041583A                 mov     ds:dword_41B690, edx
.text:00415840                 retn
.text:00415840 sub_415830      endp
.text:00415840
.text:00415840 ; ---------------------------------------------------------------------------
.text:00415841                 align 10h
.text:00415850 aFile           db 'file',0             ; DATA XREF: sub_415880:loc_4158AC↓o
.text:00415855 ; const char aSSxxxxxx[]
.text:00415855 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_415880+9B↓o
.text:00415865 ; const char aTemp[]
.text:00415865 aTemp           db 'TEMP',0             ; DATA XREF: sub_415880:loc_415962↓o
.text:00415865                                         ; sub_415880:loc_4159A2↓o ...
.text:0041586A ; const char aTmp[]
.text:0041586A aTmp            db '/tmp',0             ; DATA XREF: sub_415880+12F↓o
.text:0041586A                                         ; sub_415880+141↓o ...
.text:0041586F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_415880:loc_415A20↓o
.text:00415876 aTmp_0          db 'TMP',0              ; DATA XREF: sub_415880:loc_415AB0↓o
.text:0041587A                 align 10h
.text:00415880
.text:00415880 ; =============== S U B R O U T I N E =======================================
.text:00415880
.text:00415880
.text:00415880 ; int __cdecl sub_415880(char *Buffer, int, char *, char *, int)
.text:00415880 sub_415880      proc near               ; CODE XREF: sub_415630+3B↑p
.text:00415880
.text:00415880 Str             = dword ptr -1BCh
.text:00415880 Format          = dword ptr -1B8h
.text:00415880 var_1B4         = dword ptr -1B4h
.text:00415880 var_1B0         = dword ptr -1B0h
.text:00415880 var_1AC         = dword ptr -1ACh
.text:00415880 var_1A8         = dword ptr -1A8h
.text:00415880 var_19C         = dword ptr -19Ch
.text:00415880 var_13C         = dword ptr -13Ch
.text:00415880 var_DC          = dword ptr -0DCh
.text:00415880 var_7C          = dword ptr -7Ch
.text:00415880 Buffer          = dword ptr  4
.text:00415880 arg_4           = dword ptr  8
.text:00415880 arg_8           = dword ptr  0Ch
.text:00415880 arg_C           = dword ptr  10h
.text:00415880 arg_10          = dword ptr  14h
.text:00415880
.text:00415880                 push    ebp
.text:00415881                 push    edi
.text:00415882                 push    esi
.text:00415883                 push    ebx
.text:00415884                 sub     esp, 1ACh
.text:0041588A                 mov     eax, [esp+1BCh+arg_C]
.text:00415891                 mov     esi, [esp+1BCh+arg_8]
.text:00415898                 test    eax, eax
.text:0041589A                 jz      short loc_4158AC
.text:0041589C                 mov     edx, [esp+1BCh+arg_C]
.text:004158A3                 cmp     byte ptr [edx], 0
.text:004158A6                 jnz     loc_415AE0
.text:004158AC
.text:004158AC loc_4158AC:                             ; CODE XREF: sub_415880+1A↑j
.text:004158AC                 mov     eax, offset aFile ; "file"
.text:004158B1                 mov     ebp, 4
.text:004158B6                 mov     [esp+1BCh+arg_C], eax
.text:004158BD
.text:004158BD loc_4158BD:                             ; CODE XREF: sub_415880+274↓j
.text:004158BD                                         ; sub_415880+27F↓j
.text:004158BD                 mov     ebx, [esp+1BCh+arg_10]
.text:004158C4                 test    ebx, ebx
.text:004158C6                 jnz     loc_415A20
.text:004158CC
.text:004158CC loc_4158CC:                             ; CODE XREF: sub_415880+21C↓j
.text:004158CC                                         ; sub_415880+224↓j ...
.text:004158CC                 test    esi, esi
.text:004158CE                 jz      loc_415962
.text:004158D4
.text:004158D4 loc_4158D4:                             ; CODE XREF: sub_415880+176↓j
.text:004158D4                                         ; sub_415880+19A↓j
.text:004158D4                 mov     [esp+1BCh+Str], esi ; Str
.text:004158D7                 call    strlen
.text:004158DC                 test    eax, eax
.text:004158DE                 mov     edx, eax
.text:004158E0                 jz      short loc_4158F0
.text:004158E2                 movzx   eax, byte ptr [eax+esi-1]
.text:004158E7                 cmp     al, 2Fh ; '/'
.text:004158E9                 jz      short loc_415950
.text:004158EB                 cmp     al, 5Ch ; '\'
.text:004158ED                 jz      short loc_415950
.text:004158EF                 nop
.text:004158F0
.text:004158F0 loc_4158F0:                             ; CODE XREF: sub_415880+60↑j
.text:004158F0                                         ; sub_415880+D1↓j ...
.text:004158F0                 lea     edi, [ebp+edx+8]
.text:004158F4                 cmp     [esp+1BCh+arg_4], edi
.text:004158FB                 jb      short loc_415938
.text:004158FD                 mov     [esp+1BCh+var_1AC], ebp
.text:00415901                 mov     ecx, [esp+1BCh+arg_C]
.text:00415908                 mov     ebp, [esp+1BCh+Buffer]
.text:0041590F                 mov     [esp+1BCh+var_1B0], esi
.text:00415913                 mov     [esp+1BCh+var_1A8], ecx
.text:00415917                 mov     [esp+1BCh+var_1B4], edx
.text:0041591B                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:00415923                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:00415926                 call    sprintf
.text:0041592B                 xor     eax, eax
.text:0041592D
.text:0041592D loc_41592D:                             ; CODE XREF: sub_415880+C8↓j
.text:0041592D                 add     esp, 1ACh
.text:00415933                 pop     ebx
.text:00415934                 pop     esi
.text:00415935                 pop     edi
.text:00415936                 pop     ebp
.text:00415937                 retn
.text:00415938 ; ---------------------------------------------------------------------------
.text:00415938
.text:00415938 loc_415938:                             ; CODE XREF: sub_415880+7B↑j
.text:00415938                 call    _errno
.text:0041593D                 mov     dword ptr [eax], 16h
.text:00415943
.text:00415943 loc_415943:                             ; CODE XREF: sub_415880+187↓j
.text:00415943                 mov     eax, 0FFFFFFFFh
.text:00415948                 jmp     short loc_41592D
.text:00415948 ; ---------------------------------------------------------------------------
.text:0041594A                 align 10h
.text:00415950
.text:00415950 loc_415950:                             ; CODE XREF: sub_415880+69↑j
.text:00415950                                         ; sub_415880+6D↑j ...
.text:00415950                 dec     edx
.text:00415951                 jz      short loc_4158F0
.text:00415953                 movzx   eax, byte ptr [edx+esi-1]
.text:00415958                 cmp     al, 2Fh ; '/'
.text:0041595A                 jz      short loc_415950
.text:0041595C                 cmp     al, 5Ch ; '\'
.text:0041595E                 jz      short loc_415950
.text:00415960                 jmp     short loc_4158F0
.text:00415962 ; ---------------------------------------------------------------------------
.text:00415962
.text:00415962 loc_415962:                             ; CODE XREF: sub_415880+4E↑j
.text:00415962                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00415969                 lea     esi, [esp+1BCh+var_13C]
.text:00415970                 call    getenv
.text:00415975                 mov     [esp+1BCh+Format], eax ; char *
.text:00415979                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0041597D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00415984                 call    sub_4122B0
.text:00415989                 test    eax, eax
.text:0041598B                 jnz     short loc_4159A2
.text:0041598D                 mov     edi, [esp+1BCh+var_13C]
.text:00415994                 and     edi, 0F000h
.text:0041599A                 cmp     edi, 4000h
.text:004159A0                 jz      short loc_415A0C
.text:004159A2
.text:004159A2 loc_4159A2:                             ; CODE XREF: sub_415880+10B↑j
.text:004159A2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:004159A9                 call    getenv
.text:004159AE                 cld
.text:004159AF                 mov     edx, offset aTmp ; "/tmp"
.text:004159B4                 mov     esi, eax
.text:004159B6                 mov     ecx, 5
.text:004159BB                 mov     edi, edx
.text:004159BD                 repe cmpsb
.text:004159BF                 jz      short loc_4159FC
.text:004159C1                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:004159C9                 lea     ecx, [esp+1BCh+var_19C]
.text:004159CD                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:004159D1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:004159D8                 call    sub_4122B0
.text:004159DD                 test    eax, eax
.text:004159DF                 jnz     short loc_4159FC
.text:004159E1                 mov     ebx, [esp+1BCh+var_19C]
.text:004159E5                 mov     esi, offset aTmp ; "/tmp"
.text:004159EA                 and     ebx, 0F000h
.text:004159F0                 cmp     ebx, 4000h
.text:004159F6                 jz      loc_4158D4
.text:004159FC
.text:004159FC loc_4159FC:                             ; CODE XREF: sub_415880+13F↑j
.text:004159FC                                         ; sub_415880+15F↑j
.text:004159FC                 call    _errno
.text:00415A01                 mov     dword ptr [eax], 2
.text:00415A07                 jmp     loc_415943
.text:00415A0C ; ---------------------------------------------------------------------------
.text:00415A0C
.text:00415A0C loc_415A0C:                             ; CODE XREF: sub_415880+120↑j
.text:00415A0C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00415A13                 call    getenv
.text:00415A18                 mov     esi, eax
.text:00415A1A                 jmp     loc_4158D4
.text:00415A1A ; ---------------------------------------------------------------------------
.text:00415A1F                 align 10h
.text:00415A20
.text:00415A20 loc_415A20:                             ; CODE XREF: sub_415880+46↑j
.text:00415A20                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:00415A27                 call    sub_416110
.text:00415A2C                 test    eax, eax
.text:00415A2E                 mov     ebx, eax
.text:00415A30                 jz      short loc_415AB0
.text:00415A32
.text:00415A32 loc_415A32:                             ; CODE XREF: sub_415880+240↓j
.text:00415A32                                         ; sub_415880+256↓j
.text:00415A32                 mov     [esp+1BCh+Format], ebx ; char *
.text:00415A36                 lea     edi, [esp+1BCh+var_7C]
.text:00415A3D                 mov     [esp+1BCh+var_1B4], edi ; int
.text:00415A41                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00415A48                 call    sub_4122B0
.text:00415A4D                 test    eax, eax
.text:00415A4F                 jnz     short loc_415A66
.text:00415A51                 mov     edx, [esp+1BCh+var_7C]
.text:00415A58                 and     edx, 0F000h
.text:00415A5E                 cmp     edx, 4000h
.text:00415A64                 jz      short loc_415AA9
.text:00415A66
.text:00415A66 loc_415A66:                             ; CODE XREF: sub_415880+1CF↑j
.text:00415A66                                         ; sub_415880+25C↓j
.text:00415A66                 test    esi, esi
.text:00415A68                 jz      short loc_415AA2
.text:00415A6A                 mov     [esp+1BCh+Format], esi ; char *
.text:00415A6E                 lea     ecx, [esp+1BCh+var_DC]
.text:00415A75                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00415A79                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00415A80                 call    sub_4122B0
.text:00415A85                 test    eax, eax
.text:00415A87                 jnz     short loc_415AA2
.text:00415A89                 mov     ebx, [esp+1BCh+var_DC]
.text:00415A90                 and     ebx, 0F000h
.text:00415A96                 cmp     ebx, 4000h
.text:00415A9C                 jz      loc_4158CC
.text:00415AA2
.text:00415AA2 loc_415AA2:                             ; CODE XREF: sub_415880+1E8↑j
.text:00415AA2                                         ; sub_415880+207↑j
.text:00415AA2                 xor     esi, esi
.text:00415AA4                 jmp     loc_4158CC
.text:00415AA9 ; ---------------------------------------------------------------------------
.text:00415AA9
.text:00415AA9 loc_415AA9:                             ; CODE XREF: sub_415880+1E4↑j
.text:00415AA9                 mov     esi, ebx
.text:00415AAB                 jmp     loc_4158CC
.text:00415AB0 ; ---------------------------------------------------------------------------
.text:00415AB0
.text:00415AB0 loc_415AB0:                             ; CODE XREF: sub_415880+1B0↑j
.text:00415AB0                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:00415AB7                 call    sub_416110
.text:00415ABC                 test    eax, eax
.text:00415ABE                 mov     ebx, eax
.text:00415AC0                 jnz     loc_415A32
.text:00415AC6                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00415ACD                 call    sub_416110
.text:00415AD2                 test    eax, eax
.text:00415AD4                 mov     ebx, eax
.text:00415AD6                 jnz     loc_415A32
.text:00415ADC                 jmp     short loc_415A66
.text:00415ADC ; ---------------------------------------------------------------------------
.text:00415ADE                 align 10h
.text:00415AE0
.text:00415AE0 loc_415AE0:                             ; CODE XREF: sub_415880+26↑j
.text:00415AE0                 mov     ecx, [esp+1BCh+arg_C]
.text:00415AE7                 mov     [esp+1BCh+Str], ecx ; Str
.text:00415AEA                 call    strlen
.text:00415AEF                 cmp     eax, 5
.text:00415AF2                 mov     ebp, eax
.text:00415AF4                 jbe     loc_4158BD
.text:00415AFA                 mov     ebp, 5
.text:00415AFF                 jmp     loc_4158BD
.text:00415AFF sub_415880      endp
.text:00415AFF
.text:00415AFF ; ---------------------------------------------------------------------------
.text:00415B04                 align 10h
.text:00415B10 byte_415B10     db 61h                  ; DATA XREF: sub_415C00+DC↓r
.text:00415B10                                         ; sub_415C00+122↓r ...
.text:00415B11 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:00415B4F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_415C00+39↓o
.text:00415B56                 db 1Ah dup(90h)
.text:00415B70 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:00415B70                                         ; DATA XREF: sub_415C00:loc_415E78↓o
.text:00415B8F                 align 10h
.text:00415B90 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:00415B90                                         ; DATA XREF: sub_415C00+405↓o
.text:00415BBB                 db 15h dup(90h)
.text:00415BD0 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:00415BD0                                         ; DATA XREF: sub_415C00+40D↓o
.text:00415BF3                 align 10h
.text:00415C00
.text:00415C00 ; =============== S U B R O U T I N E =======================================
.text:00415C00
.text:00415C00
.text:00415C00 ; int __cdecl sub_415C00(char *FileName, int)
.text:00415C00 sub_415C00      proc near               ; CODE XREF: sub_415630+51↑p
.text:00415C00
.text:00415C00 Str             = dword ptr -9Ch
.text:00415C00 OpenFlag        = dword ptr -98h
.text:00415C00 var_94          = dword ptr -94h
.text:00415C00 var_90          = dword ptr -90h
.text:00415C00 var_8C          = dword ptr -8Ch
.text:00415C00 var_88          = dword ptr -88h
.text:00415C00 var_84          = dword ptr -84h
.text:00415C00 var_80          = dword ptr -80h
.text:00415C00 var_7C          = dword ptr -7Ch
.text:00415C00 FileName        = dword ptr  4
.text:00415C00 arg_4           = dword ptr  8
.text:00415C00
.text:00415C00                 push    ebp
.text:00415C01                 push    edi
.text:00415C02                 push    esi
.text:00415C03                 push    ebx
.text:00415C04                 sub     esp, 8Ch
.text:00415C0A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:00415C12                 call    _errno
.text:00415C17                 mov     edx, [eax]
.text:00415C19                 mov     [esp+9Ch+var_8C], edx
.text:00415C1D                 mov     edx, [esp+9Ch+FileName]
.text:00415C24                 mov     [esp+9Ch+Str], edx ; Str
.text:00415C27                 call    strlen
.text:00415C2C                 cmp     eax, 5
.text:00415C2F                 jle     short loc_415C4D
.text:00415C31                 cld
.text:00415C32                 mov     ecx, [esp+9Ch+FileName]
.text:00415C39                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:00415C3E                 lea     esi, [eax+ecx-6]
.text:00415C42                 mov     ecx, 7
.text:00415C47                 mov     ebp, esi
.text:00415C49                 repe cmpsb
.text:00415C4B                 jz      short loc_415C68
.text:00415C4D
.text:00415C4D loc_415C4D:                             ; CODE XREF: sub_415C00+2F↑j
.text:00415C4D                 call    _errno
.text:00415C52                 mov     dword ptr [eax], 16h
.text:00415C58
.text:00415C58 loc_415C58:                             ; CODE XREF: sub_415C00+295↓j
.text:00415C58                                         ; sub_415C00+2D8↓j ...
.text:00415C58                 mov     eax, 0FFFFFFFFh
.text:00415C5D
.text:00415C5D loc_415C5D:                             ; CODE XREF: sub_415C00+2EF↓j
.text:00415C5D                                         ; sub_415C00+332↓j
.text:00415C5D                 add     esp, 8Ch
.text:00415C63                 pop     ebx
.text:00415C64                 pop     esi
.text:00415C65                 pop     edi
.text:00415C66                 pop     ebp
.text:00415C67                 retn
.text:00415C68 ; ---------------------------------------------------------------------------
.text:00415C68
.text:00415C68 loc_415C68:                             ; CODE XREF: sub_415C00+4B↑j
.text:00415C68                 mov     ecx, ds:dword_41B5F4
.text:00415C6E                 mov     edi, ds:dword_41B5F0
.text:00415C74                 mov     eax, ecx
.text:00415C76                 or      eax, edi
.text:00415C78                 jz      loc_415FB3
.text:00415C7E
.text:00415C7E loc_415C7E:                             ; CODE XREF: sub_415C00+3F8↓j
.text:00415C7E                 rdtsc
.text:00415C80                 mov     edi, edx
.text:00415C82                 mov     esi, eax
.text:00415C84                 call    _getpid
.text:00415C89                 mov     ebx, eax
.text:00415C8B                 mov     edx, esi
.text:00415C8D                 sar     ebx, 1Fh
.text:00415C90                 xor     edx, eax
.text:00415C92                 mov     ecx, edi
.text:00415C94                 xor     ecx, ebx
.text:00415C96                 mov     ebx, edx
.text:00415C98                 mov     esi, ecx
.text:00415C9A                 add     ebx, ds:dword_41B5F0
.text:00415CA0                 adc     esi, ds:dword_41B5F4
.text:00415CA6                 xor     edi, edi
.text:00415CA8                 mov     ds:dword_41B5F0, ebx
.text:00415CAE                 mov     ds:dword_41B5F4, esi
.text:00415CB4                 lea     esi, [esi+0]
.text:00415CBA                 lea     edi, [edi+0]
.text:00415CC0
.text:00415CC0 loc_415CC0:                             ; CODE XREF: sub_415C00+2C7↓j
.text:00415CC0                 mov     [esp+9Ch+Str], ebx
.text:00415CC3                 mov     [esp+9Ch+OpenFlag], esi
.text:00415CC7                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00415CCF                 mov     [esp+9Ch+var_90], 0
.text:00415CD7                 call    sub_417D10
.text:00415CDC                 movzx   ecx, ds:byte_415B10[eax]
.text:00415CE3                 mov     [ebp+0], cl
.text:00415CE6                 mov     [esp+9Ch+Str], ebx
.text:00415CE9                 mov     [esp+9Ch+OpenFlag], esi
.text:00415CED                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00415CF5                 mov     [esp+9Ch+var_90], 0
.text:00415CFD                 call    sub_417E90
.text:00415D02                 mov     [esp+9Ch+Str], eax
.text:00415D05                 mov     ebx, eax
.text:00415D07                 mov     esi, edx
.text:00415D09                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00415D11                 mov     [esp+9Ch+var_90], 0
.text:00415D19                 mov     [esp+9Ch+OpenFlag], edx
.text:00415D1D                 call    sub_417D10
.text:00415D22                 movzx   edx, ds:byte_415B10[eax]
.text:00415D29                 mov     [ebp+1], dl
.text:00415D2C                 mov     [esp+9Ch+Str], ebx
.text:00415D2F                 mov     [esp+9Ch+OpenFlag], esi
.text:00415D33                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00415D3B                 mov     [esp+9Ch+var_90], 0
.text:00415D43                 call    sub_417E90
.text:00415D48                 mov     [esp+9Ch+Str], eax
.text:00415D4B                 mov     ebx, eax
.text:00415D4D                 mov     esi, edx
.text:00415D4F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00415D57                 mov     [esp+9Ch+var_90], 0
.text:00415D5F                 mov     [esp+9Ch+OpenFlag], edx
.text:00415D63                 call    sub_417D10
.text:00415D68                 movzx   ecx, ds:byte_415B10[eax]
.text:00415D6F                 mov     [ebp+2], cl
.text:00415D72                 mov     [esp+9Ch+Str], ebx
.text:00415D75                 mov     [esp+9Ch+OpenFlag], esi
.text:00415D79                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00415D81                 mov     [esp+9Ch+var_90], 0
.text:00415D89                 call    sub_417E90
.text:00415D8E                 mov     [esp+9Ch+Str], eax
.text:00415D91                 mov     ebx, eax
.text:00415D93                 mov     esi, edx
.text:00415D95                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00415D9D                 mov     [esp+9Ch+var_90], 0
.text:00415DA5                 mov     [esp+9Ch+OpenFlag], edx
.text:00415DA9                 call    sub_417D10
.text:00415DAE                 movzx   edx, ds:byte_415B10[eax]
.text:00415DB5                 mov     [ebp+3], dl
.text:00415DB8                 mov     [esp+9Ch+Str], ebx
.text:00415DBB                 mov     [esp+9Ch+OpenFlag], esi
.text:00415DBF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00415DC7                 mov     [esp+9Ch+var_90], 0
.text:00415DCF                 call    sub_417E90
.text:00415DD4                 mov     [esp+9Ch+Str], eax
.text:00415DD7                 mov     ebx, eax
.text:00415DD9                 mov     esi, edx
.text:00415DDB                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00415DE3                 mov     [esp+9Ch+var_90], 0
.text:00415DEB                 mov     [esp+9Ch+OpenFlag], edx
.text:00415DEF                 call    sub_417D10
.text:00415DF4                 movzx   ecx, ds:byte_415B10[eax]
.text:00415DFB                 mov     [ebp+4], cl
.text:00415DFE                 mov     [esp+9Ch+Str], ebx
.text:00415E01                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00415E09                 mov     [esp+9Ch+var_90], 0
.text:00415E11                 mov     [esp+9Ch+OpenFlag], esi
.text:00415E15                 call    sub_417E90
.text:00415E1A                 mov     [esp+9Ch+Str], eax
.text:00415E1D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00415E25                 mov     [esp+9Ch+var_90], 0
.text:00415E2D                 mov     [esp+9Ch+OpenFlag], edx
.text:00415E31                 call    sub_417D10
.text:00415E36                 movzx   ebx, ds:byte_415B10[eax]
.text:00415E3D                 mov     [ebp+5], bl
.text:00415E40                 cmp     [esp+9Ch+arg_4], 1
.text:00415E48                 jz      loc_415F97
.text:00415E4E                 cmp     [esp+9Ch+arg_4], 1
.text:00415E56                 jle     loc_415F60
.text:00415E5C                 cmp     [esp+9Ch+arg_4], 2
.text:00415E64                 jz      loc_415F37
.text:00415E6A                 cmp     [esp+9Ch+arg_4], 3
.text:00415E72                 jz      loc_415EF4
.text:00415E78
.text:00415E78 loc_415E78:                             ; CODE XREF: sub_415C00+369↓j
.text:00415E78                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:00415E7D                 test    ebx, ebx
.text:00415E7F                 jnz     loc_415FFD
.text:00415E85
.text:00415E85 loc_415E85:                             ; CODE XREF: sub_415C00+354↓j
.text:00415E85                 mov     eax, [esp+9Ch+var_88]
.text:00415E89                 test    eax, eax
.text:00415E8B                 jns     short loc_415EE0
.text:00415E8D                 call    _errno
.text:00415E92                 cmp     dword ptr [eax], 11h
.text:00415E95                 jnz     loc_415C58
.text:00415E9B
.text:00415E9B loc_415E9B:                             ; CODE XREF: sub_415C00+315↓j
.text:00415E9B                 mov     edx, ds:dword_41B5F0
.text:00415EA1                 mov     ecx, ds:dword_41B5F4
.text:00415EA7                 add     edx, 1E61h
.text:00415EAD                 adc     ecx, 0
.text:00415EB0                 mov     ebx, edx
.text:00415EB2                 inc     edi
.text:00415EB3                 mov     ds:dword_41B5F0, edx
.text:00415EB9                 cmp     edi, 3A2F8h
.text:00415EBF                 mov     esi, ecx
.text:00415EC1                 mov     ds:dword_41B5F4, ecx
.text:00415EC7                 jb      loc_415CC0
.text:00415ECD                 call    _errno
.text:00415ED2                 mov     dword ptr [eax], 11h
.text:00415ED8                 jmp     loc_415C58
.text:00415ED8 ; ---------------------------------------------------------------------------
.text:00415EDD                 align 10h
.text:00415EE0
.text:00415EE0 loc_415EE0:                             ; CODE XREF: sub_415C00+28B↑j
.text:00415EE0                 call    _errno
.text:00415EE5                 mov     esi, [esp+9Ch+var_8C]
.text:00415EE9                 mov     [eax], esi
.text:00415EEB                 mov     eax, [esp+9Ch+var_88]
.text:00415EEF                 jmp     loc_415C5D
.text:00415EF4 ; ---------------------------------------------------------------------------
.text:00415EF4
.text:00415EF4 loc_415EF4:                             ; CODE XREF: sub_415C00+272↑j
.text:00415EF4                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:00415EFB                 mov     ecx, [esp+9Ch+FileName]
.text:00415F02                 lea     esi, [esp+9Ch+var_7C]
.text:00415F06                 mov     [esp+9Ch+var_94], esi ; int
.text:00415F0A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:00415F0E                 call    sub_410B00
.text:00415F13                 test    eax, eax
.text:00415F15                 jns     short loc_415E9B
.text:00415F17                 call    _errno
.text:00415F1C                 cmp     dword ptr [eax], 2
.text:00415F1F                 jnz     loc_415C58
.text:00415F25                 call    _errno
.text:00415F2A                 mov     ebx, [esp+9Ch+var_8C]
.text:00415F2E                 mov     [eax], ebx
.text:00415F30                 xor     eax, eax
.text:00415F32                 jmp     loc_415C5D
.text:00415F37 ; ---------------------------------------------------------------------------
.text:00415F37
.text:00415F37 loc_415F37:                             ; CODE XREF: sub_415C00+264↑j
.text:00415F37                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:00415F3F                 mov     edx, [esp+9Ch+FileName]
.text:00415F46                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:00415F49                 call    sub_416030
.text:00415F4E                 mov     esi, esi
.text:00415F50
.text:00415F50 loc_415F50:                             ; CODE XREF: sub_415C00+395↓j
.text:00415F50                 mov     [esp+9Ch+var_88], eax
.text:00415F54                 jmp     loc_415E85
.text:00415F54 ; ---------------------------------------------------------------------------
.text:00415F59                 align 10h
.text:00415F60
.text:00415F60 loc_415F60:                             ; CODE XREF: sub_415C00+256↑j
.text:00415F60                 mov     eax, [esp+9Ch+arg_4]
.text:00415F67                 test    eax, eax
.text:00415F69                 jnz     loc_415E78
.text:00415F6F                 mov     [esp+9Ch+var_94], 180h
.text:00415F77                 mov     esi, [esp+9Ch+FileName]
.text:00415F7E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:00415F86                 mov     [esp+9Ch+Str], esi ; FileName
.text:00415F89                 lea     esi, [esi+0]
.text:00415F90
.text:00415F90 loc_415F90:                             ; CODE XREF: sub_415C00+3B1↓j
.text:00415F90                 call    _open_0
.text:00415F95                 jmp     short loc_415F50
.text:00415F97 ; ---------------------------------------------------------------------------
.text:00415F97
.text:00415F97 loc_415F97:                             ; CODE XREF: sub_415C00+248↑j
.text:00415F97                 mov     [esp+9Ch+var_94], 180h
.text:00415F9F                 mov     ebx, [esp+9Ch+FileName]
.text:00415FA6                 mov     [esp+9Ch+OpenFlag], 8502h
.text:00415FAE                 mov     [esp+9Ch+Str], ebx
.text:00415FB1                 jmp     short loc_415F90
.text:00415FB3 ; ---------------------------------------------------------------------------
.text:00415FB3
.text:00415FB3 loc_415FB3:                             ; CODE XREF: sub_415C00+78↑j
.text:00415FB3                 mov     [esp+9Ch+OpenFlag], 0
.text:00415FBB                 lea     ebx, [esp+9Ch+var_84]
.text:00415FBF                 mov     [esp+9Ch+Str], ebx
.text:00415FC2                 call    sub_4160B0
.text:00415FC7                 mov     edi, [esp+9Ch+var_80]
.text:00415FCB                 mov     edx, [esp+9Ch+var_84]
.text:00415FCF                 mov     ecx, edi
.text:00415FD1                 mov     ebx, edi
.text:00415FD3                 shl     ecx, 10h
.text:00415FD6                 sar     ebx, 1Fh
.text:00415FD9                 shld    ebx, edi, 10h
.text:00415FDD                 mov     esi, edx
.text:00415FDF                 mov     edi, edx
.text:00415FE1                 mov     edx, ecx
.text:00415FE3                 sar     edi, 1Fh
.text:00415FE6                 xor     edx, esi
.text:00415FE8                 mov     ds:dword_41B5F0, edx
.text:00415FEE                 mov     esi, ebx
.text:00415FF0                 xor     esi, edi
.text:00415FF2                 mov     ds:dword_41B5F4, esi
.text:00415FF8                 jmp     loc_415C7E
.text:00415FFD ; ---------------------------------------------------------------------------
.text:00415FFD
.text:00415FFD loc_415FFD:                             ; CODE XREF: sub_415C00+27F↑j
.text:00415FFD                 mov     [esp+9Ch+var_94], 151h
.text:00416005                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0041600D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:00416014                 call    _assert
.text:00416014 sub_415C00      endp
.text:00416014
.text:00416014 ; ---------------------------------------------------------------------------
.text:00416019                 db 17h dup(90h)
.text:00416030
.text:00416030 ; =============== S U B R O U T I N E =======================================
.text:00416030
.text:00416030
.text:00416030 ; int __cdecl sub_416030(LPCSTR, int AccessMode)
.text:00416030 sub_416030      proc near               ; CODE XREF: sub_415C00+349↑p
.text:00416030
.text:00416030 lpPathName      = dword ptr -1Ch
.text:00416030 lpSecurityAttributes= dword ptr -18h
.text:00416030 var_8           = dword ptr -8
.text:00416030 var_4           = dword ptr -4
.text:00416030 arg_0           = dword ptr  4
.text:00416030 AccessMode      = dword ptr  8
.text:00416030
.text:00416030                 sub     esp, 1Ch
.text:00416033                 mov     [esp+1Ch+var_8], ebx
.text:00416037                 mov     ebx, [esp+1Ch+arg_0]
.text:0041603B                 mov     [esp+1Ch+var_4], esi
.text:0041603F                 mov     esi, [esp+1Ch+AccessMode]
.text:00416043                 test    ebx, ebx
.text:00416045                 jz      short loc_416095
.text:00416047                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0041604F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:00416052                 call    CreateDirectoryA
.text:00416057                 sub     esp, 8
.text:0041605A                 test    eax, eax
.text:0041605C                 jz      short loc_416076
.text:0041605E                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:00416062                 mov     esi, [esp+1Ch+var_4]
.text:00416066                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0041606A                 mov     ebx, [esp+1Ch+var_8]
.text:0041606E                 add     esp, 1Ch
.text:00416071                 jmp     _chmod
.text:00416076 ; ---------------------------------------------------------------------------
.text:00416076
.text:00416076 loc_416076:                             ; CODE XREF: sub_416030+2C↑j
.text:00416076                 call    sub_412BE0
.text:0041607B                 mov     esi, eax
.text:0041607D                 call    _errno
.text:00416082                 mov     [eax], esi
.text:00416084
.text:00416084 loc_416084:                             ; CODE XREF: sub_416030+70↓j
.text:00416084                 mov     ebx, [esp+1Ch+var_8]
.text:00416088                 mov     eax, 0FFFFFFFFh
.text:0041608D                 mov     esi, [esp+1Ch+var_4]
.text:00416091                 add     esp, 1Ch
.text:00416094                 retn
.text:00416095 ; ---------------------------------------------------------------------------
.text:00416095
.text:00416095 loc_416095:                             ; CODE XREF: sub_416030+15↑j
.text:00416095                 call    _errno
.text:0041609A                 mov     dword ptr [eax], 16h
.text:004160A0                 jmp     short loc_416084
.text:004160A0 sub_416030      endp
.text:004160A0
.text:004160A0 ; ---------------------------------------------------------------------------
.text:004160A2                 align 10h
.text:004160B0
.text:004160B0 ; =============== S U B R O U T I N E =======================================
.text:004160B0
.text:004160B0
.text:004160B0 sub_4160B0      proc near               ; CODE XREF: sub_415C00+3C2↑p
.text:004160B0
.text:004160B0 var_1C          = dword ptr -1Ch
.text:004160B0 var_18          = dword ptr -18h
.text:004160B0 var_C           = dword ptr -0Ch
.text:004160B0 var_8           = dword ptr -8
.text:004160B0 var_4           = dword ptr -4
.text:004160B0 arg_0           = dword ptr  4
.text:004160B0 arg_4           = dword ptr  8
.text:004160B0
.text:004160B0                 sub     esp, 1Ch
.text:004160B3                 mov     edx, [esp+1Ch+arg_4]
.text:004160B7                 mov     [esp+1Ch+var_4], ebx
.text:004160BB                 mov     ebx, [esp+1Ch+arg_0]
.text:004160BF                 mov     [esp+1Ch+var_18], edx
.text:004160C3                 lea     edx, [esp+1Ch+var_C]
.text:004160C7                 mov     [esp+1Ch+var_1C], edx
.text:004160CA                 call    sub_416130
.text:004160CF                 test    eax, eax
.text:004160D1                 mov     edx, 0FFFFFFFFh
.text:004160D6                 jnz     short loc_4160FA
.text:004160D8                 mov     ecx, [esp+1Ch+var_C]
.text:004160DC                 mov     edx, 10624DD3h
.text:004160E1                 mov     [ebx], ecx
.text:004160E3                 mov     ecx, [esp+1Ch+var_8]
.text:004160E7                 mov     eax, ecx
.text:004160E9                 imul    edx
.text:004160EB                 mov     eax, ecx
.text:004160ED                 sar     eax, 1Fh
.text:004160F0                 sar     edx, 6
.text:004160F3                 sub     edx, eax
.text:004160F5                 mov     [ebx+4], edx
.text:004160F8                 xor     edx, edx
.text:004160FA
.text:004160FA loc_4160FA:                             ; CODE XREF: sub_4160B0+26↑j
.text:004160FA                 mov     ebx, [esp+1Ch+var_4]
.text:004160FE                 mov     eax, edx
.text:00416100                 add     esp, 1Ch
.text:00416103                 retn
.text:00416103 sub_4160B0      endp
.text:00416103
.text:00416103 ; ---------------------------------------------------------------------------
.text:00416104                 align 10h
.text:00416110
.text:00416110 ; =============== S U B R O U T I N E =======================================
.text:00416110
.text:00416110
.text:00416110 sub_416110      proc near               ; CODE XREF: sub_415880+1A7↑p
.text:00416110                                         ; sub_415880+237↑p ...
.text:00416110                 mov     edx, ds:dword_41B600
.text:00416116                 test    edx, edx
.text:00416118                 jnz     short loc_416120
.text:0041611A                 jmp     getenv
.text:0041611A ; ---------------------------------------------------------------------------
.text:0041611F                 align 10h
.text:00416120
.text:00416120 loc_416120:                             ; CODE XREF: sub_416110+8↑j
.text:00416120                 xor     eax, eax
.text:00416122                 retn
.text:00416122 sub_416110      endp
.text:00416122
.text:00416122 ; ---------------------------------------------------------------------------
.text:00416123                 align 10h
.text:00416130
.text:00416130 ; =============== S U B R O U T I N E =======================================
.text:00416130
.text:00416130
.text:00416130 sub_416130      proc near               ; CODE XREF: sub_4160B0+1A↑p
.text:00416130
.text:00416130 lpTimeZoneInformation= dword ptr -0DCh
.text:00416130 var_D8          = dword ptr -0D8h
.text:00416130 var_D4          = dword ptr -0D4h
.text:00416130 var_D0          = dword ptr -0D0h
.text:00416130 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:00416130 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:00416130 arg_0           = dword ptr  4
.text:00416130 arg_4           = dword ptr  8
.text:00416130
.text:00416130                 push    edi
.text:00416131                 push    esi
.text:00416132                 push    ebx
.text:00416133                 sub     esp, 0D0h
.text:00416139                 mov     ebx, [esp+0DCh+arg_4]
.text:00416140                 mov     edi, [esp+0DCh+arg_0]
.text:00416147                 test    ebx, ebx
.text:00416149                 jz      short loc_416174
.text:0041614B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0041614F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:00416152                 call    GetTimeZoneInformation
.text:00416157                 sub     esp, 4
.text:0041615A                 cmp     eax, 0FFFFFFFFh
.text:0041615D                 jz      loc_4161F5
.text:00416163                 xor     ecx, ecx
.text:00416165                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:00416169                 cmp     eax, 2
.text:0041616C                 setz    cl
.text:0041616F                 mov     [ebx], esi
.text:00416171                 mov     [ebx+4], ecx
.text:00416174
.text:00416174 loc_416174:                             ; CODE XREF: sub_416130+19↑j
.text:00416174                                         ; sub_416130+E0↓j
.text:00416174                 test    edi, edi
.text:00416176                 jz      short loc_4161E9
.text:00416178                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0041617C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0041617F                 call    GetSystemTimeAsFileTime
.text:00416184                 sub     esp, 4
.text:00416187                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0041618B                 mov     [esp+0DCh+var_D4], 989680h
.text:00416193                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:00416197                 mov     [esp+0DCh+var_D0], 0
.text:0041619F                 add     ebx, 2AC18000h
.text:004161A5                 adc     esi, 0FE624E21h
.text:004161AB                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:004161AF                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:004161B2                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:004161B6                 mov     [esp+0DCh+var_D8], esi
.text:004161BA                 call    sub_417E90
.text:004161BF                 mov     [edi], eax
.text:004161C1                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:004161C4                 mov     [esp+0DCh+var_D4], 989680h
.text:004161CC                 mov     [esp+0DCh+var_D0], 0
.text:004161D4                 mov     [esp+0DCh+var_D8], esi
.text:004161D8                 call    sub_417D10
.text:004161DD                 lea     ebx, [eax+eax*4]
.text:004161E0                 lea     edx, [ebx+ebx*4]
.text:004161E3                 shl     edx, 2
.text:004161E6                 mov     [edi+4], edx
.text:004161E9
.text:004161E9 loc_4161E9:                             ; CODE XREF: sub_416130+46↑j
.text:004161E9                 add     esp, 0D0h
.text:004161EF                 xor     eax, eax
.text:004161F1                 pop     ebx
.text:004161F2                 pop     esi
.text:004161F3                 pop     edi
.text:004161F4                 retn
.text:004161F5 ; ---------------------------------------------------------------------------
.text:004161F5
.text:004161F5 loc_4161F5:                             ; CODE XREF: sub_416130+2D↑j
.text:004161F5                 mov     dword ptr [ebx], 0
.text:004161FB                 mov     dword ptr [ebx+4], 0
.text:00416202                 call    sub_412BE0
.text:00416207                 mov     esi, eax
.text:00416209                 call    _errno
.text:0041620E                 mov     [eax], esi
.text:00416210                 jmp     loc_416174
.text:00416210 sub_416130      endp
.text:00416210
.text:00416210 ; ---------------------------------------------------------------------------
.text:00416215                 align 10h
.text:00416220                 sub     esp, 0Ch
.text:00416223                 mov     [esp+4], ebx
.text:00416227                 mov     [esp+8], esi
.text:0041622B                 xor     esi, esi
.text:0041622D                 call    sub_4162A0
.text:00416232                 mov     ebx, eax
.text:00416234                 call    sub_416290
.text:00416239                 cmp     ebx, eax
.text:0041623B                 jz      short loc_416254
.text:0041623D
.text:0041623D loc_41623D:                             ; CODE XREF: .text:00416262↓j
.text:0041623D                 mov     esi, 1
.text:00416242
.text:00416242 loc_416242:                             ; CODE XREF: .text:00416264↓j
.text:00416242                 mov     ds:dword_41B600, esi
.text:00416248                 mov     ebx, [esp+4]
.text:0041624C                 mov     esi, [esp+8]
.text:00416250                 add     esp, 0Ch
.text:00416253                 retn
.text:00416254 ; ---------------------------------------------------------------------------
.text:00416254
.text:00416254 loc_416254:                             ; CODE XREF: .text:0041623B↑j
.text:00416254                 call    sub_416280
.text:00416259                 mov     ebx, eax
.text:0041625B                 call    sub_416270
.text:00416260                 cmp     ebx, eax
.text:00416262                 jnz     short loc_41623D
.text:00416264                 jmp     short loc_416242
.text:00416264 ; ---------------------------------------------------------------------------
.text:00416266                 align 10h
.text:00416270
.text:00416270 ; =============== S U B R O U T I N E =======================================
.text:00416270
.text:00416270
.text:00416270 sub_416270      proc near               ; CODE XREF: .text:0041625B↑p
.text:00416270                 xor     eax, eax
.text:00416272                 retn
.text:00416272 sub_416270      endp
.text:00416272
.text:00416272 ; ---------------------------------------------------------------------------
.text:00416273                 align 10h
.text:00416280
.text:00416280 ; =============== S U B R O U T I N E =======================================
.text:00416280
.text:00416280
.text:00416280 sub_416280      proc near               ; CODE XREF: .text:loc_416254↑p
.text:00416280                 xor     eax, eax
.text:00416282                 retn
.text:00416282 sub_416280      endp
.text:00416282
.text:00416282 ; ---------------------------------------------------------------------------
.text:00416283                 align 10h
.text:00416290
.text:00416290 ; =============== S U B R O U T I N E =======================================
.text:00416290
.text:00416290
.text:00416290 sub_416290      proc near               ; CODE XREF: .text:00416234↑p
.text:00416290                 xor     eax, eax
.text:00416292                 retn
.text:00416292 sub_416290      endp
.text:00416292
.text:00416292 ; ---------------------------------------------------------------------------
.text:00416293                 align 10h
.text:004162A0
.text:004162A0 ; =============== S U B R O U T I N E =======================================
.text:004162A0
.text:004162A0
.text:004162A0 sub_4162A0      proc near               ; CODE XREF: .text:0041622D↑p
.text:004162A0                 xor     eax, eax
.text:004162A2                 retn
.text:004162A2 sub_4162A0      endp
.text:004162A2
.text:004162A2 ; ---------------------------------------------------------------------------
.text:004162A3                 align 10h
.text:004162B0
.text:004162B0 ; =============== S U B R O U T I N E =======================================
.text:004162B0
.text:004162B0 ; Attributes: bp-based frame
.text:004162B0
.text:004162B0 sub_4162B0      proc near               ; CODE XREF: sub_408570+45↑p
.text:004162B0                                         ; sub_408570+73↑p ...
.text:004162B0
.text:004162B0 arg_0           = dword ptr  8
.text:004162B0 arg_4           = dword ptr  0Ch
.text:004162B0 arg_8           = dword ptr  10h
.text:004162B0 arg_C           = dword ptr  14h
.text:004162B0 arg_10          = dword ptr  18h
.text:004162B0
.text:004162B0                 push    ebp
.text:004162B1                 mov     ebp, esp
.text:004162B3                 push    esi
.text:004162B4                 push    ebx
.text:004162B5                 mov     edx, [ebp+arg_8]
.text:004162B8                 mov     esi, [ebp+arg_0]
.text:004162BB                 mov     ecx, [ebp+arg_4]
.text:004162BE                 mov     ebx, [ebp+arg_C]
.text:004162C1                 test    edx, edx
.text:004162C3                 jnz     short loc_4162CA
.text:004162C5                 mov     edx, 8
.text:004162CA
.text:004162CA loc_4162CA:                             ; CODE XREF: sub_4162B0+13↑j
.text:004162CA                 test    ecx, ecx
.text:004162CC                 jnz     short loc_4162D3
.text:004162CE                 mov     ecx, 0FE8h
.text:004162D3
.text:004162D3 loc_4162D3:                             ; CODE XREF: sub_4162B0+1C↑j
.text:004162D3                 mov     eax, [ebp+arg_10]
.text:004162D6                 sub     esp, 0Ch
.text:004162D9                 mov     [esi+20h], eax
.text:004162DC                 mov     [esi+1Ch], ebx
.text:004162DF                 lea     eax, [edx-1]
.text:004162E2                 mov     [esi], ecx
.text:004162E4                 mov     [esi+18h], eax
.text:004162E7                 mov     al, [esi+28h]
.text:004162EA                 and     eax, 0FFFFFFFEh
.text:004162ED                 mov     [esi+28h], al
.text:004162F0                 push    ecx
.text:004162F1                 call    ebx
.text:004162F3                 mov     ebx, eax
.text:004162F5                 add     esp, 10h
.text:004162F8                 mov     [esi+4], eax
.text:004162FB                 test    eax, eax
.text:004162FD                 jz      short loc_416330
.text:004162FF
.text:004162FF loc_4162FF:                             ; CODE XREF: .text:00416336↓j
.text:004162FF                 lea     eax, [ebx+8]
.text:00416302                 mov     edx, [esi]
.text:00416304                 mov     [esi+8], eax
.text:00416307                 mov     [esi+0Ch], eax
.text:0041630A                 mov     eax, ebx
.text:0041630C                 add     eax, edx
.text:0041630E                 mov     [ebx], eax
.text:00416310                 mov     [esi+10h], eax
.text:00416313                 mov     dword ptr [ebx+4], 0
.text:0041631A                 and     byte ptr [esi+28h], 0F9h
.text:0041631E                 lea     esp, [ebp-8]
.text:00416321                 mov     eax, 1
.text:00416326                 pop     ebx
.text:00416327                 pop     esi
.text:00416328                 pop     ebp
.text:00416329                 retn
.text:00416329 ; ---------------------------------------------------------------------------
.text:0041632A                 align 10h
.text:00416330
.text:00416330 loc_416330:                             ; CODE XREF: sub_4162B0+4D↑j
.text:00416330                 call    off_41A0B0
.text:00416330 sub_4162B0      endp
.text:00416330
.text:00416336 ; ---------------------------------------------------------------------------
.text:00416336                 jmp     short loc_4162FF
.text:00416336 ; ---------------------------------------------------------------------------
.text:00416338                 align 10h
.text:00416340                 push    ebp
.text:00416341                 mov     ebp, esp
.text:00416343                 push    edi
.text:00416344                 push    esi
.text:00416345                 push    ebx
.text:00416346                 sub     esp, 0Ch
.text:00416349                 mov     edx, [ebp+10h]
.text:0041634C                 mov     esi, [ebp+8]
.text:0041634F                 mov     ecx, [ebp+0Ch]
.text:00416352                 mov     ebx, [ebp+14h]
.text:00416355                 mov     edi, [ebp+1Ch]
.text:00416358                 test    edx, edx
.text:0041635A                 jnz     short loc_416361
.text:0041635C                 mov     edx, 8
.text:00416361
.text:00416361 loc_416361:                             ; CODE XREF: .text:0041635A↑j
.text:00416361                 test    ecx, ecx
.text:00416363                 jnz     short loc_41636A
.text:00416365                 mov     ecx, 0FE8h
.text:0041636A
.text:0041636A loc_41636A:                             ; CODE XREF: .text:00416363↑j
.text:0041636A                 mov     eax, [ebp+18h]
.text:0041636D                 mov     [esi+1Ch], ebx
.text:00416370                 mov     [esi+20h], eax
.text:00416373                 mov     [esi], ecx
.text:00416375                 lea     eax, [edx-1]
.text:00416378                 mov     [esi+24h], edi
.text:0041637B                 mov     [esi+18h], eax
.text:0041637E                 mov     al, [esi+28h]
.text:00416381                 or      eax, 1
.text:00416384                 mov     [esi+28h], al
.text:00416387                 and     eax, 1
.text:0041638A                 jz      short loc_4163D8
.text:0041638C                 push    eax
.text:0041638D                 push    eax
.text:0041638E                 push    ecx
.text:0041638F                 push    edi
.text:00416390
.text:00416390 loc_416390:                             ; CODE XREF: .text:004163DC↓j
.text:00416390                 call    ebx
.text:00416392                 mov     ebx, eax
.text:00416394                 add     esp, 10h
.text:00416397                 mov     [esi+4], eax
.text:0041639A                 test    eax, eax
.text:0041639C                 jz      short loc_4163D0
.text:0041639E
.text:0041639E loc_41639E:                             ; CODE XREF: .text:004163D6↓j
.text:0041639E                 lea     eax, [ebx+8]
.text:004163A1                 mov     ecx, [esi]
.text:004163A3                 mov     [esi+8], eax
.text:004163A6                 mov     [esi+0Ch], eax
.text:004163A9                 mov     eax, ebx
.text:004163AB                 add     eax, ecx
.text:004163AD                 mov     [ebx], eax
.text:004163AF                 mov     [esi+10h], eax
.text:004163B2                 mov     dword ptr [ebx+4], 0
.text:004163B9                 and     byte ptr [esi+28h], 0F9h
.text:004163BD                 lea     esp, [ebp-0Ch]
.text:004163C0                 mov     eax, 1
.text:004163C5                 pop     ebx
.text:004163C6                 pop     esi
.text:004163C7                 pop     edi
.text:004163C8                 pop     ebp
.text:004163C9                 retn
.text:004163C9 ; ---------------------------------------------------------------------------
.text:004163CA                 align 10h
.text:004163D0
.text:004163D0 loc_4163D0:                             ; CODE XREF: .text:0041639C↑j
.text:004163D0                 call    off_41A0B0
.text:004163D6 ; ---------------------------------------------------------------------------
.text:004163D6                 jmp     short loc_41639E
.text:004163D8 ; ---------------------------------------------------------------------------
.text:004163D8
.text:004163D8 loc_4163D8:                             ; CODE XREF: .text:0041638A↑j
.text:004163D8                 sub     esp, 0Ch
.text:004163DB                 push    ecx
.text:004163DC                 jmp     short loc_416390
.text:004163DC ; ---------------------------------------------------------------------------
.text:004163DE                 align 10h
.text:004163E0
.text:004163E0 ; =============== S U B R O U T I N E =======================================
.text:004163E0
.text:004163E0 ; Attributes: bp-based frame
.text:004163E0
.text:004163E0 sub_4163E0      proc near               ; CODE XREF: sub_4083F0+5B↑p
.text:004163E0                                         ; sub_4083F0+14B↑p ...
.text:004163E0
.text:004163E0 var_14          = dword ptr -14h
.text:004163E0 var_10          = dword ptr -10h
.text:004163E0 arg_0           = dword ptr  8
.text:004163E0 arg_4           = dword ptr  0Ch
.text:004163E0
.text:004163E0                 push    ebp
.text:004163E1                 mov     ebp, esp
.text:004163E3                 push    edi
.text:004163E4                 push    esi
.text:004163E5                 push    ebx
.text:004163E6                 sub     esp, 0Ch
.text:004163E9                 mov     esi, [ebp+arg_0]
.text:004163EC                 mov     ebx, [ebp+arg_4]
.text:004163EF                 mov     eax, [esi+4]
.text:004163F2                 mov     edi, [esi+0Ch]
.text:004163F5                 mov     [ebp+var_10], eax
.text:004163F8                 mov     eax, [esi+8]
.text:004163FB                 sub     edi, eax
.text:004163FD                 mov     edx, edi
.text:004163FF                 mov     eax, edi
.text:00416401                 sar     eax, 3
.text:00416404                 add     edx, ebx
.text:00416406                 lea     eax, [eax+edx+64h]
.text:0041640A                 mov     [ebp+var_14], eax
.text:0041640D                 mov     eax, [esi]
.text:0041640F                 cmp     [ebp+var_14], eax
.text:00416412                 jge     short loc_416417
.text:00416414                 mov     [ebp+var_14], eax
.text:00416417
.text:00416417 loc_416417:                             ; CODE XREF: sub_4163E0+32↑j
.text:00416417                 test    byte ptr [esi+28h], 1
.text:0041641B                 jz      loc_4164FE
.text:00416421                 mov     edx, [ebp+var_14]
.text:00416424                 push    ecx
.text:00416425                 push    ecx
.text:00416426                 push    edx
.text:00416427                 mov     eax, [esi+24h]
.text:0041642A                 push    eax
.text:0041642B
.text:0041642B loc_41642B:                             ; CODE XREF: sub_4163E0+125↓j
.text:0041642B                 call    dword ptr [esi+1Ch]
.text:0041642E                 mov     ebx, eax
.text:00416430                 add     esp, 10h
.text:00416433                 test    eax, eax
.text:00416435                 jz      loc_4164F3
.text:0041643B
.text:0041643B loc_41643B:                             ; CODE XREF: sub_4163E0+119↓j
.text:0041643B                 mov     edx, [ebp+var_10]
.text:0041643E                 mov     [esi+4], ebx
.text:00416441                 mov     [ebx+4], edx
.text:00416444                 mov     edx, [ebp+var_14]
.text:00416447                 lea     eax, [edx+ebx]
.text:0041644A                 mov     [esi+10h], eax
.text:0041644D                 mov     [ebx], eax
.text:0041644F                 mov     eax, [esi+18h]
.text:00416452                 inc     eax
.text:00416453                 cmp     eax, 7
.text:00416456                 jle     loc_4164EC
.text:0041645C                 mov     eax, edi
.text:0041645E                 shr     eax, 2
.text:00416461                 mov     edx, eax
.text:00416463                 dec     edx
.text:00416464                 js      loc_4164E7
.text:0041646A                 mov     ecx, [esi+8]
.text:0041646D                 lea     esi, [esi+0]
.text:00416470
.text:00416470 loc_416470:                             ; CODE XREF: sub_4163E0+98↓j
.text:00416470                 mov     eax, [ecx+edx*4]
.text:00416473                 mov     [ebx+edx*4+8], eax
.text:00416477                 dec     edx
.text:00416478                 jns     short loc_416470
.text:0041647A
.text:0041647A loc_41647A:                             ; CODE XREF: sub_4163E0+10A↓j
.text:0041647A                 mov     eax, edi
.text:0041647C                 and     eax, 0FFFFFFFCh
.text:0041647F
.text:0041647F loc_41647F:                             ; CODE XREF: sub_4163E0+111↓j
.text:0041647F                 mov     edx, eax
.text:00416481                 cmp     eax, edi
.text:00416483                 jge     short loc_416499
.text:00416485
.text:00416485 loc_416485:                             ; CODE XREF: sub_4163E0+B4↓j
.text:00416485                 mov     al, [edx+ecx]
.text:00416488                 mov     [ebx+edx+8], al
.text:0041648C                 inc     edx
.text:0041648D                 cmp     edx, edi
.text:0041648F                 jge     short loc_416496
.text:00416491                 mov     ecx, [esi+8]
.text:00416494                 jmp     short loc_416485
.text:00416496 ; ---------------------------------------------------------------------------
.text:00416496
.text:00416496 loc_416496:                             ; CODE XREF: sub_4163E0+AF↑j
.text:00416496                 mov     ecx, [esi+8]
.text:00416499
.text:00416499 loc_416499:                             ; CODE XREF: sub_4163E0+A3↑j
.text:00416499                 mov     eax, [ebp+var_10]
.text:0041649C                 add     eax, 8
.text:0041649F                 cmp     ecx, eax
.text:004164A1                 jz      short loc_4164BA
.text:004164A3
.text:004164A3 loc_4164A3:                             ; CODE XREF: sub_4163E0+DE↓j
.text:004164A3                                         ; sub_4163E0+FC↓j
.text:004164A3                 and     byte ptr [esi+28h], 0FDh
.text:004164A7                 lea     eax, [ebx+8]
.text:004164AA                 mov     [esi+8], eax
.text:004164AD                 add     eax, edi
.text:004164AF                 mov     [esi+0Ch], eax
.text:004164B2                 lea     esp, [ebp-0Ch]
.text:004164B5                 pop     ebx
.text:004164B6                 pop     esi
.text:004164B7                 pop     edi
.text:004164B8                 pop     ebp
.text:004164B9                 retn
.text:004164BA ; ---------------------------------------------------------------------------
.text:004164BA
.text:004164BA loc_4164BA:                             ; CODE XREF: sub_4163E0+C1↑j
.text:004164BA                 test    byte ptr [esi+28h], 2
.text:004164BE                 jnz     short loc_4164A3
.text:004164C0                 mov     edx, [ebp+var_10]
.text:004164C3                 mov     eax, [edx+4]
.text:004164C6                 mov     [ebx+4], eax
.text:004164C9                 test    byte ptr [esi+28h], 1
.text:004164CD                 jz      short loc_4164DE
.text:004164CF                 push    eax
.text:004164D0                 push    eax
.text:004164D1                 push    edx
.text:004164D2                 mov     eax, [esi+24h]
.text:004164D5                 push    eax
.text:004164D6
.text:004164D6 loc_4164D6:                             ; CODE XREF: sub_4163E0+105↓j
.text:004164D6                 call    dword ptr [esi+20h]
.text:004164D9                 add     esp, 10h
.text:004164DC                 jmp     short loc_4164A3
.text:004164DE ; ---------------------------------------------------------------------------
.text:004164DE
.text:004164DE loc_4164DE:                             ; CODE XREF: sub_4163E0+ED↑j
.text:004164DE                 sub     esp, 0Ch
.text:004164E1                 mov     eax, [ebp+var_10]
.text:004164E4                 push    eax
.text:004164E5                 jmp     short loc_4164D6
.text:004164E7 ; ---------------------------------------------------------------------------
.text:004164E7
.text:004164E7 loc_4164E7:                             ; CODE XREF: sub_4163E0+84↑j
.text:004164E7                 mov     ecx, [esi+8]
.text:004164EA                 jmp     short loc_41647A
.text:004164EC ; ---------------------------------------------------------------------------
.text:004164EC
.text:004164EC loc_4164EC:                             ; CODE XREF: sub_4163E0+76↑j
.text:004164EC                 xor     eax, eax
.text:004164EE                 mov     ecx, [esi+8]
.text:004164F1                 jmp     short loc_41647F
.text:004164F3 ; ---------------------------------------------------------------------------
.text:004164F3
.text:004164F3 loc_4164F3:                             ; CODE XREF: sub_4163E0+55↑j
.text:004164F3                 call    off_41A0B0
.text:004164F9 ; ---------------------------------------------------------------------------
.text:004164F9                 jmp     loc_41643B
.text:004164FE ; ---------------------------------------------------------------------------
.text:004164FE
.text:004164FE loc_4164FE:                             ; CODE XREF: sub_4163E0+3B↑j
.text:004164FE                 sub     esp, 0Ch
.text:00416501                 mov     eax, [ebp+var_14]
.text:00416504                 push    eax
.text:00416505                 jmp     loc_41642B
.text:00416505 sub_4163E0      endp ; sp-analysis failed
.text:00416505
.text:00416505 ; ---------------------------------------------------------------------------
.text:0041650A                 align 10h
.text:00416510                 push    ebp
.text:00416511                 mov     ebp, esp
.text:00416513                 mov     eax, [ebp+8]
.text:00416516                 mov     edx, [ebp+0Ch]
.text:00416519                 mov     eax, [eax+4]
.text:0041651C                 test    eax, eax
.text:0041651E                 jz      short loc_416533
.text:00416520                 cmp     eax, edx
.text:00416522                 jb      short loc_41653F
.text:00416524
.text:00416524 loc_416524:                             ; CODE XREF: .text:0041652D↓j
.text:00416524                                         ; .text:00416531↓j ...
.text:00416524                 mov     eax, [eax+4]
.text:00416527                 test    eax, eax
.text:00416529                 jz      short loc_416533
.text:0041652B                 cmp     eax, edx
.text:0041652D                 jnb     short loc_416524
.text:0041652F                 cmp     [eax], edx
.text:00416531                 jb      short loc_416524
.text:00416533
.text:00416533 loc_416533:                             ; CODE XREF: .text:0041651E↑j
.text:00416533                                         ; .text:00416529↑j ...
.text:00416533                 test    eax, eax
.text:00416535                 pop     ebp
.text:00416536                 setnz   al
.text:00416539                 and     eax, 0FFh
.text:0041653E                 retn
.text:0041653F ; ---------------------------------------------------------------------------
.text:0041653F
.text:0041653F loc_41653F:                             ; CODE XREF: .text:00416522↑j
.text:0041653F                 cmp     [eax], edx
.text:00416541                 jb      short loc_416524
.text:00416543                 jmp     short loc_416533
.text:00416543 ; ---------------------------------------------------------------------------
.text:00416545                 align 10h
.text:00416550                 push    ebp
.text:00416551                 mov     ebp, esp
.text:00416553                 push    edi
.text:00416554                 push    esi
.text:00416555                 push    ebx
.text:00416556                 sub     esp, 0Ch
.text:00416559                 mov     ebx, [ebp+8]
.text:0041655C                 mov     edi, [ebp+0Ch]
.text:0041655F                 mov     edx, [ebx+4]
.text:00416562                 test    edx, edx
.text:00416564                 jz      short loc_4165AE
.text:00416566                 cmp     edx, edi
.text:00416568                 jb      short loc_4165BA
.text:0041656A                 lea     esi, [esi+0]
.text:00416570
.text:00416570 loc_416570:                             ; CODE XREF: .text:00416592↓j
.text:00416570                                         ; .text:00416596↓j ...
.text:00416570                 mov     esi, [edx+4]
.text:00416573                 test    byte ptr [ebx+28h], 1
.text:00416577                 jz      short loc_4165B4
.text:00416579                 push    eax
.text:0041657A                 push    eax
.text:0041657B                 push    edx
.text:0041657C                 mov     eax, [ebx+24h]
.text:0041657F                 push    eax
.text:00416580
.text:00416580 loc_416580:                             ; CODE XREF: .text:004165B8↓j
.text:00416580                 call    dword ptr [ebx+20h]
.text:00416583                 add     esp, 10h
.text:00416586                 mov     edx, esi
.text:00416588                 or      byte ptr [ebx+28h], 2
.text:0041658C                 test    esi, esi
.text:0041658E                 jz      short loc_4165AE
.text:00416590                 cmp     esi, edi
.text:00416592                 jnb     short loc_416570
.text:00416594                 cmp     [esi], edi
.text:00416596                 jb      short loc_416570
.text:00416598
.text:00416598 loc_416598:                             ; CODE XREF: .text:004165BE↓j
.text:00416598                 mov     [ebx+0Ch], edi
.text:0041659B                 mov     [ebx+8], edi
.text:0041659E                 mov     eax, [edx]
.text:004165A0                 mov     [ebx+4], edx
.text:004165A3                 mov     [ebx+10h], eax
.text:004165A6
.text:004165A6 loc_4165A6:                             ; CODE XREF: .text:004165B0↓j
.text:004165A6                 lea     esp, [ebp-0Ch]
.text:004165A9                 pop     ebx
.text:004165AA                 pop     esi
.text:004165AB                 pop     edi
.text:004165AC                 pop     ebp
.text:004165AD                 retn
.text:004165AE ; ---------------------------------------------------------------------------
.text:004165AE
.text:004165AE loc_4165AE:                             ; CODE XREF: .text:00416564↑j
.text:004165AE                                         ; .text:0041658E↑j
.text:004165AE                 test    edi, edi
.text:004165B0                 jz      short loc_4165A6
.text:004165B2                 jmp     short loc_4165C0
.text:004165B4 ; ---------------------------------------------------------------------------
.text:004165B4
.text:004165B4 loc_4165B4:                             ; CODE XREF: .text:00416577↑j
.text:004165B4                 sub     esp, 0Ch
.text:004165B7                 push    edx
.text:004165B8                 jmp     short loc_416580
.text:004165BA ; ---------------------------------------------------------------------------
.text:004165BA
.text:004165BA loc_4165BA:                             ; CODE XREF: .text:00416568↑j
.text:004165BA                 cmp     [edx], edi
.text:004165BC                 jb      short loc_416570
.text:004165BE                 jmp     short loc_416598
.text:004165C0 ; ---------------------------------------------------------------------------
.text:004165C0
.text:004165C0 loc_4165C0:                             ; CODE XREF: .text:004165B2↑j
.text:004165C0                 call    abort
.text:004165C0 ; ---------------------------------------------------------------------------
.text:004165C5                 align 10h
.text:004165D0
.text:004165D0 ; =============== S U B R O U T I N E =======================================
.text:004165D0
.text:004165D0 ; Attributes: bp-based frame
.text:004165D0
.text:004165D0 sub_4165D0      proc near               ; CODE XREF: sub_408620+19↑p
.text:004165D0                                         ; sub_408620+2F↑p ...
.text:004165D0
.text:004165D0 arg_0           = dword ptr  8
.text:004165D0 arg_4           = dword ptr  0Ch
.text:004165D0
.text:004165D0                 push    ebp
.text:004165D1                 mov     ebp, esp
.text:004165D3                 push    edi
.text:004165D4                 push    esi
.text:004165D5                 push    ebx
.text:004165D6                 sub     esp, 0Ch
.text:004165D9                 mov     ebx, [ebp+arg_0]
.text:004165DC                 mov     edi, [ebp+arg_4]
.text:004165DF                 mov     edx, [ebx+4]
.text:004165E2                 test    edx, edx
.text:004165E4                 jz      short loc_41662E
.text:004165E6                 cmp     edx, edi
.text:004165E8                 jb      short loc_41663A
.text:004165EA                 lea     esi, [esi+0]
.text:004165F0
.text:004165F0 loc_4165F0:                             ; CODE XREF: sub_4165D0+42↓j
.text:004165F0                                         ; sub_4165D0+46↓j ...
.text:004165F0                 mov     esi, [edx+4]
.text:004165F3                 test    byte ptr [ebx+28h], 1
.text:004165F7                 jz      short loc_416634
.text:004165F9                 push    eax
.text:004165FA                 push    eax
.text:004165FB                 push    edx
.text:004165FC                 mov     eax, [ebx+24h]
.text:004165FF                 push    eax
.text:00416600
.text:00416600 loc_416600:                             ; CODE XREF: sub_4165D0+68↓j
.text:00416600                 call    dword ptr [ebx+20h]
.text:00416603                 add     esp, 10h
.text:00416606                 mov     edx, esi
.text:00416608                 or      byte ptr [ebx+28h], 2
.text:0041660C                 test    esi, esi
.text:0041660E                 jz      short loc_41662E
.text:00416610                 cmp     esi, edi
.text:00416612                 jnb     short loc_4165F0
.text:00416614                 cmp     [esi], edi
.text:00416616                 jb      short loc_4165F0
.text:00416618
.text:00416618 loc_416618:                             ; CODE XREF: sub_4165D0+6E↓j
.text:00416618                 mov     [ebx+0Ch], edi
.text:0041661B                 mov     [ebx+8], edi
.text:0041661E                 mov     eax, [edx]
.text:00416620                 mov     [ebx+4], edx
.text:00416623                 mov     [ebx+10h], eax
.text:00416626
.text:00416626 loc_416626:                             ; CODE XREF: sub_4165D0+60↓j
.text:00416626                 lea     esp, [ebp-0Ch]
.text:00416629                 pop     ebx
.text:0041662A                 pop     esi
.text:0041662B                 pop     edi
.text:0041662C                 pop     ebp
.text:0041662D                 retn
.text:0041662E ; ---------------------------------------------------------------------------
.text:0041662E
.text:0041662E loc_41662E:                             ; CODE XREF: sub_4165D0+14↑j
.text:0041662E                                         ; sub_4165D0+3E↑j
.text:0041662E                 test    edi, edi
.text:00416630                 jz      short loc_416626
.text:00416632                 jmp     short loc_416640
.text:00416634 ; ---------------------------------------------------------------------------
.text:00416634
.text:00416634 loc_416634:                             ; CODE XREF: sub_4165D0+27↑j
.text:00416634                 sub     esp, 0Ch
.text:00416637                 push    edx
.text:00416638                 jmp     short loc_416600
.text:0041663A ; ---------------------------------------------------------------------------
.text:0041663A
.text:0041663A loc_41663A:                             ; CODE XREF: sub_4165D0+18↑j
.text:0041663A                 cmp     [edx], edi
.text:0041663C                 jb      short loc_4165F0
.text:0041663E                 jmp     short loc_416618
.text:00416640 ; ---------------------------------------------------------------------------
.text:00416640
.text:00416640 loc_416640:                             ; CODE XREF: sub_4165D0+62↑j
.text:00416640                 call    abort
.text:00416640 sub_4165D0      endp
.text:00416640
.text:00416640 ; ---------------------------------------------------------------------------
.text:00416645                 align 10h
.text:00416650                 push    ebp
.text:00416651                 xor     ecx, ecx
.text:00416653                 mov     ebp, esp
.text:00416655                 mov     eax, [ebp+8]
.text:00416658                 mov     edx, [eax+4]
.text:0041665B                 test    edx, edx
.text:0041665D                 jz      short loc_41666D
.text:0041665F                 nop
.text:00416660
.text:00416660 loc_416660:                             ; CODE XREF: .text:0041666B↓j
.text:00416660                 mov     eax, [edx]
.text:00416662                 sub     eax, edx
.text:00416664                 mov     edx, [edx+4]
.text:00416667                 add     ecx, eax
.text:00416669                 test    edx, edx
.text:0041666B                 jnz     short loc_416660
.text:0041666D
.text:0041666D loc_41666D:                             ; CODE XREF: .text:0041665D↑j
.text:0041666D                 mov     eax, ecx
.text:0041666F                 pop     ebp
.text:00416670                 retn
.text:00416670 ; ---------------------------------------------------------------------------
.text:00416671 aMemoryExhauste_0 db 'memory exhausted',0Ah,0
.text:00416671                                         ; DATA XREF: sub_416690+12↓o
.text:00416683                 align 10h
.text:00416690
.text:00416690 ; =============== S U B R O U T I N E =======================================
.text:00416690
.text:00416690 ; Attributes: noreturn bp-based frame
.text:00416690
.text:00416690 sub_416690      proc near               ; CODE XREF: sub_4162B0:loc_416330↑p
.text:00416690                                         ; .text:loc_4163D0↑p ...
.text:00416690                 push    ebp
.text:00416691                 mov     ebp, esp
.text:00416693                 push    ecx
.text:00416694                 push    ecx
.text:00416695                 mov     eax, ds:_iob
.text:0041669A                 add     eax, 40h ; '@'
.text:0041669D                 push    eax             ; Stream
.text:0041669E                 push    11h             ; ElementCount
.text:004166A0                 push    1               ; ElementSize
.text:004166A2                 push    offset aMemoryExhauste_0 ; "memory exhausted\n"
.text:004166A7                 call    fwrite
.text:004166AC                 mov     eax, Code
.text:004166B1                 pop     edx
.text:004166B2                 push    eax             ; Code
.text:004166B3                 call    exit
.text:004166B3 sub_416690      endp
.text:004166B3
.text:004166B3 ; ---------------------------------------------------------------------------
.text:004166B8                 align 10h
.text:004166C0
.text:004166C0 ; =============== S U B R O U T I N E =======================================
.text:004166C0
.text:004166C0 ; Attributes: thunk
.text:004166C0
.text:004166C0 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:004166C0 OleInitialize   proc near               ; CODE XREF: sub_414680+1A↑p
.text:004166C0                 jmp     ds:__imp_OleInitialize
.text:004166C0 OleInitialize   endp
.text:004166C0
.text:004166C0 ; ---------------------------------------------------------------------------
.text:004166C6                 align 10h
.text:004166D0
.text:004166D0 ; =============== S U B R O U T I N E =======================================
.text:004166D0
.text:004166D0 ; Attributes: thunk
.text:004166D0
.text:004166D0 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:004166D0 CoCreateInstance proc near              ; CODE XREF: sub_414680+52↑p
.text:004166D0
.text:004166D0 rclsid          = dword ptr  4
.text:004166D0 pUnkOuter       = dword ptr  8
.text:004166D0 dwClsContext    = dword ptr  0Ch
.text:004166D0 riid            = dword ptr  10h
.text:004166D0 ppv             = dword ptr  14h
.text:004166D0
.text:004166D0                 jmp     ds:__imp_CoCreateInstance
.text:004166D0 CoCreateInstance endp
.text:004166D0
.text:004166D0 ; ---------------------------------------------------------------------------
.text:004166D6                 align 10h
.text:004166E0
.text:004166E0 ; =============== S U B R O U T I N E =======================================
.text:004166E0
.text:004166E0 ; Attributes: thunk
.text:004166E0
.text:004166E0 ; void __stdcall CoUninitialize()
.text:004166E0 CoUninitialize  proc near               ; CODE XREF: sub_414680+14E↑p
.text:004166E0                                         ; sub_414680+16D↑p
.text:004166E0                 jmp     ds:__imp_CoUninitialize
.text:004166E0 CoUninitialize  endp
.text:004166E0
.text:004166E0 ; ---------------------------------------------------------------------------
.text:004166E6                 align 10h
.text:004166F0                 add     al, 0BAh ; 'º'
.text:004166F2                 retf
.text:004166F2 ; ---------------------------------------------------------------------------
.text:004166F3                 db 7Eh
.text:004166F4                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:004166F4                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:004166F4                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:004166F4                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:004166F4                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:004166F4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:004166F4                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:004166F4                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:004166F4                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:004166F4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:004166F4                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:004166F4                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:004166F4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:004166F4                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:004166F4                 dd 0C4426C00h, 330h, 0
.text:00416828                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00416828                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:00416828                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:00416828                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:00416878                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00416878                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:00416878                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:00416878                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:00416878                 dd 0BA94B00h, 1Bh, 0
.text:004168D8                 dd 0C0h, 46000000h, 1Ch, 0
.text:004168E8                 dd 0C0h, 46000000h, 331h, 0
.text:004168F8                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004168F8                 dd 312h, 0
.text:00416918                 dd 0C0h, 46000000h, 30Eh, 0
.text:00416928                 dd 0C0h, 46000000h, 30Dh, 0
.text:00416938                 dd 0C0h, 46000000h, 311h, 0
.text:00416948                 dd 0C0h, 46000000h, 313h, 0
.text:00416958                 dd 0C0h, 46000000h, 30Ch, 0
.text:00416968                 dd 0C0h, 46000000h, 30Fh, 0
.text:00416978                 dd 0C0h, 46000000h, 310h, 0
.text:00416988                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00416988                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:004169B8                 dd 0C0h, 46000000h, 319h, 0
.text:004169C8                 dd 0C0h, 46000000h, 315h, 0
.text:004169D8                 dd 0C0h, 46000000h, 316h, 0
.text:004169E8                 dd 0C0h, 46000000h, 315h, 0
.text:004169F8                 dd 0C0h, 46000000h, 2E005h, 0
.text:00416A08                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00416A08                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:00416A08                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:00416A48                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00416A48                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:00416A48                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:00416A48                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:00416A48                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:00416A48                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:00416A48                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:00416A48                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:00416A48                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:00416A48                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:00416A48                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:00416A48                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00416A48                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:00416A48                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:00416A48                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:00416A48                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00416A48                 dd 2DE81h, 0
.text:00416B98                 dd 0C0h, 46000000h, 4 dup(0)
.text:00416BB0                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:00416BB0                 dd 0
.text:00416BC8                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00416BC8                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:00416BC8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:00416BC8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:00416BC8                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00416BC8                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:00416BC8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:00416BC8                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:00416BC8                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:00416BC8                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:00416BC8                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:00416BC8                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:00416BC8                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:00416BC8                 dd 10Fh, 0
.text:00416CD8                 dd 0C0h, 46000000h, 125h, 0
.text:00416CE8                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00416CE8                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:00416CE8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:00416D28                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:00416D28                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00416D28                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:00416D28                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:00416D28                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:00416D88                 dd 0C0h, 46000000h, 2E012h, 0
.text:00416D98                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:00416D98                 dd 140h, 0
.text:00416DB8                 dd 0C0h, 46000000h, 1, 0
.text:00416DC8                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:00416DC8                 dd 71D3400h, 13Dh, 0
.text:00416DE8                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00416DE8                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:00416DE8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:00416DE8                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:00416E38                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:00416E38                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00416E38                 dd 20405h, 0
.text:00416E68                 dd 0C0h, 46000000h, 2040Eh, 0
.text:00416E78                 dd 0C0h, 46000000h, 20406h, 0
.text:00416E88                 dd 0C0h, 46000000h, 2040Fh, 0
.text:00416E98                 dd 0C0h, 46000000h, 110h, 0
.text:00416EA8                 dd 0C0h, 46000000h, 10Eh, 0
.text:00416EB8                 dd 0C0h, 46000000h, 123h, 0
.text:00416EC8                 dd 0C0h, 46000000h, 124h, 0
.text:00416ED8                 dd 0C0h, 46000000h, 13h, 0
.text:00416EE8                 dd 0C0h, 46000000h, 14h, 0
.text:00416EF8                 dd 0C0h, 46000000h, 15h, 0
.text:00416F08                 dd 0C0h, 46000000h, 20400h, 0
.text:00416F18                 dd 0C0h, 46000000h, 121h, 0
.text:00416F28                 dd 0C0h, 46000000h, 122h, 0
.text:00416F38                 dd 0C0h, 46000000h, 2E011h, 0
.text:00416F48                 dd 0C0h, 46000000h, 108h, 0
.text:00416F58                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:00416F58                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00416F58                 dd 103h, 0
.text:00416F88                 dd 0C0h, 46000000h, 2E000h, 0
.text:00416F98                 dd 0C0h, 46000000h, 106h, 0
.text:00416FA8                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00416FA8                 dd 107h, 0
.text:00416FC8                 dd 0C0h, 46000000h, 102h, 0
.text:00416FD8                 dd 0C0h, 46000000h, 104h, 0
.text:00416FE8                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:00416FE8                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:00416FE8                 dd 105h, 0
.text:00417018                 dd 0C0h, 46000000h, 13Bh, 0
.text:00417028                 dd 0C0h, 46000000h, 139h, 0
.text:00417038                 dd 0C0h, 46000000h, 0Dh, 0
.text:00417048                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00417048                 dd 101h, 0
.text:00417068                 dd 0C0h, 46000000h, 100h, 0
.text:00417078                 dd 0C0h, 46000000h, 20404h, 0
.text:00417088                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00417088                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:004170B8                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:004170B8                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:004170B8                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:004170B8                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:00417108                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00417108                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:00417108                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:00417108                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:00417108                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00417108                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:00417188                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:00417188                 dd 0Ah, 0
.text:004171A8                 dd 0C0h, 46000000h, 2, 0
.text:004171B8                 dd 0C0h, 46000000h, 1Dh, 0
.text:004171C8                 dd 0C0h, 46000000h, 3, 0
.text:004171D8                 dd 0C0h, 46000000h, 16h, 0
.text:004171E8                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:004171E8                 dd 1608D74Fh, 0Fh, 0
.text:00417208                 dd 0C0h, 46000000h, 20h, 0
.text:00417218                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:00417218                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:00417218                 dd 0
.text:00417248                 dd 0C0h, 46000000h, 11Eh, 0
.text:00417258                 dd 0C0h, 46000000h, 128h, 0
.text:00417268                 dd 0C0h, 46000000h, 129h, 0
.text:00417278                 dd 0C0h, 46000000h, 118h, 0
.text:00417288                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:00417288                 dd 70474000h, 11Bh, 0
.text:004172A8                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:004172A8                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:004172A8                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:004172A8                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:004172A8                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:00417308                 dd 0C0h, 46000000h, 116h, 0
.text:00417318                 dd 0C0h, 46000000h, 113h, 0
.text:00417328                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:00417328                 dd 119h, 0
.text:00417348                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:00417348                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:00417348                 dd 0
.text:00417378                 dd 0C0h, 46000000h, 11Ch, 0
.text:00417388                 dd 0C0h, 46000000h, 11Dh, 0
.text:00417398                 dd 0C0h, 46000000h, 11Fh, 0
.text:004173A8                 dd 0C0h, 46000000h, 112h, 0
.text:004173B8                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:004173B8                 dd 18E6000h, 120h, 0
.text:004173D8                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:004173D8                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:004173D8                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:00417418                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:00417418                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:00417448                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00417448                 dd 11Ah, 0
.text:00417468                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:00417468                 dd 10Ch, 0
.text:00417488                 dd 0C0h, 46000000h
.text:00417490 dword_417490    dd 10Bh, 0              ; DATA XREF: sub_414680+75↑o
.text:00417498                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:00417498                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:00417498                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:00417498                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:004174E8                 dd 0C0h, 46000000h, 109h, 0
.text:004174F8                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:004174F8                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:004174F8                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:004174F8                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:004174F8                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:004174F8                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:004174F8                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:004174F8                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:004174F8                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:004174F8                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:004174F8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:004175D8                 dd 0C0h, 46000000h, 138h, 0
.text:004175E8                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:004175E8                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:004175E8                 dd 27h, 0
.text:00417618                 dd 0C0h, 46000000h, 8, 0
.text:00417628                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:00417628                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:00417628                 dd 20D00h, 0
.text:00417658                 dd 0C0h, 46000000h, 20D03h, 0
.text:00417668                 dd 0C0h, 46000000h, 12h, 0
.text:00417678                 dd 0C0h, 46000000h, 4, 0
.text:00417688                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00417688                 dd 7, 0
.text:004176A8                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004176A8                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:004176D8                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004176D8                 dd 126h, 0
.text:004176F8                 dd 0C0h, 46000000h, 10h, 0
.text:00417708                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:00417708                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:00417738                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:00417738                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:00417738                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:00417778                 dd 0C0h, 46000000h, 0Bh, 0
.text:00417788                 dd 0C0h, 46000000h, 0Ch, 0
.text:00417798                 dd 0C0h, 46000000h, 26h, 0
.text:004177A8                 dd 0C0h, 46000000h, 6, 0
.text:004177B8                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:004177B8                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:004177B8                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:004177F8                 dd 0C0h, 46000000h, 20403h, 0
.text:00417808                 dd 0C0h, 46000000h, 20401h, 0
.text:00417818                 dd 0C0h, 46000000h, 20412h, 0
.text:00417828                 dd 0C0h, 46000000h, 20402h, 0
.text:00417838                 dd 0C0h, 46000000h, 20411h, 0
.text:00417848                 dd 0C0h, 46000000h, 2 dup(0)
.text:00417858                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00417858                 dd 10Dh, 0
.text:00417878                 dd 0C0h, 46000000h, 127h, 0
.text:00417888                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00417888                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:00417888                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:004178C8                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:004178C8                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:004178C8                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:00417908                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:00417918                 dd 0C0h, 46000000h, 2DE18h, 0
.text:00417928                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:00417938                 dd 0C0h, 46000000h, 2DE19h, 0
.text:00417948                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:00417958                 dd 0C0h, 46000000h, 2DE12h, 0
.text:00417968                 dd 0C0h, 46000000h, 2DE21h, 0
.text:00417978                 dd 0C0h, 46000000h, 2DE01h, 0
.text:00417988                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:00417998                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:004179A8                 dd 0C0h, 46000000h, 2DE02h, 0
.text:004179B8                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:004179C8                 dd 0C0h, 46000000h, 2DE04h, 0
.text:004179D8                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:004179E8                 dd 0C0h, 46000000h, 2DE05h, 0
.text:004179F8                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:00417A08                 dd 0C0h, 46000000h, 2DE06h, 0
.text:00417A18                 dd 0C0h, 46000000h, 2DE13h, 0
.text:00417A28                 dd 0C0h, 46000000h, 2DE10h, 0
.text:00417A38                 dd 0C0h, 46000000h, 2DE22h, 0
.text:00417A48                 dd 0C0h, 46000000h, 2DE09h, 0
.text:00417A58                 dd 0C0h, 46000000h, 2DE23h, 0
.text:00417A68                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:00417A78                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:00417A88                 dd 0C0h, 46000000h, 2DE11h, 0
.text:00417A98                 dd 0C0h, 46000000h, 2DE15h, 0
.text:00417AA8                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:00417AB8                 dd 0C0h, 46000000h, 2DE16h, 0
.text:00417AC8                 dd 0C0h, 46000000h, 2DE20h, 0
.text:00417AD8                 dd 0C0h, 46000000h, 2DE07h, 0
.text:00417AE8                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:00417AF8                 dd 0C0h, 46000000h, 2DE17h, 0
.text:00417B08                 dd 0C0h, 46000000h, 2DE14h, 0
.text:00417B18                 dd 0C0h, 46000000h, 2DE03h, 0
.text:00417B28                 dd 0C0h, 46000000h, 2DE08h, 0
.text:00417B38                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:00417B38                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:00417B60
.text:00417B60 ; =============== S U B R O U T I N E =======================================
.text:00417B60
.text:00417B60 ; Attributes: thunk
.text:00417B60
.text:00417B60 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00417B60 mbrtowc         proc near               ; CODE XREF: sub_405110+757↑p
.text:00417B60
.text:00417B60 DstCh           = dword ptr  4
.text:00417B60 SrcCh           = dword ptr  8
.text:00417B60 SizeInBytes     = dword ptr  0Ch
.text:00417B60 State           = dword ptr  10h
.text:00417B60
.text:00417B60                 jmp     ds:__imp_mbrtowc
.text:00417B60 mbrtowc         endp
.text:00417B60
.text:00417B60 ; ---------------------------------------------------------------------------
.text:00417B66                 align 10h
.text:00417B70
.text:00417B70 ; =============== S U B R O U T I N E =======================================
.text:00417B70
.text:00417B70 ; Attributes: thunk
.text:00417B70
.text:00417B70 ; size_t __cdecl mbsrtowcs(wchar_t *Dest, const char **PSrc, size_t Count, mbstate_t *State)
.text:00417B70 mbsrtowcs       proc near               ; CODE XREF: .text:0040D516↑p
.text:00417B70                                         ; .text:0040D544↑p ...
.text:00417B70
.text:00417B70 Dest            = dword ptr  4
.text:00417B70 PSrc            = dword ptr  8
.text:00417B70 Count           = dword ptr  0Ch
.text:00417B70 State           = dword ptr  10h
.text:00417B70
.text:00417B70                 jmp     ds:__imp_mbsrtowcs
.text:00417B70 mbsrtowcs       endp
.text:00417B70
.text:00417B70 ; ---------------------------------------------------------------------------
.text:00417B76                 align 10h
.text:00417B80
.text:00417B80 ; =============== S U B R O U T I N E =======================================
.text:00417B80
.text:00417B80 ; Attributes: thunk
.text:00417B80
.text:00417B80 ; wint_t __cdecl btowc(int Ch)
.text:00417B80 btowc           proc near               ; CODE XREF: .text:0040B877↑p
.text:00417B80                 jmp     ds:__imp_btowc
.text:00417B80 btowc           endp
.text:00417B80
.text:00417B80 ; ---------------------------------------------------------------------------
.text:00417B86                 align 10h
.text:00417B90
.text:00417B90 ; =============== S U B R O U T I N E =======================================
.text:00417B90
.text:00417B90 ; Attributes: thunk
.text:00417B90
.text:00417B90 ; wctype_t __cdecl wctype(const char *name)
.text:00417B90 wctype          proc near               ; CODE XREF: .text:0040B85B↑p
.text:00417B90                                         ; sub_40D650+5F↑p
.text:00417B90
.text:00417B90 name            = dword ptr  4
.text:00417B90
.text:00417B90                 jmp     ds:__imp_wctype
.text:00417B90 wctype          endp
.text:00417B90
.text:00417B90 ; ---------------------------------------------------------------------------
.text:00417B96                 align 10h
.text:00417BA0
.text:00417BA0 ; =============== S U B R O U T I N E =======================================
.text:00417BA0
.text:00417BA0 ; Attributes: bp-based frame
.text:00417BA0
.text:00417BA0 sub_417BA0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00417BA0                 push    ebp
.text:00417BA1                 mov     ecx, offset byte_41B000
.text:00417BA6                 cmp     ecx, offset byte_41B000
.text:00417BAC                 mov     ebp, esp
.text:00417BAE                 jnb     short loc_417BC6
.text:00417BB0
.text:00417BB0 loc_417BB0:                             ; CODE XREF: sub_417BA0+24↓j
.text:00417BB0                 mov     edx, [ecx+4]
.text:00417BB3                 mov     eax, [ecx]
.text:00417BB5                 add     ecx, 8
.text:00417BB8                 add     [edx+400000h], eax
.text:00417BBE                 cmp     ecx, offset byte_41B000
.text:00417BC4                 jb      short loc_417BB0
.text:00417BC6
.text:00417BC6 loc_417BC6:                             ; CODE XREF: sub_417BA0+E↑j
.text:00417BC6                 pop     ebp
.text:00417BC7                 retn
.text:00417BC7 sub_417BA0      endp
.text:00417BC7
.text:00417BC7 ; ---------------------------------------------------------------------------
.text:00417BC8                 align 10h
.text:00417BD0
.text:00417BD0 ; =============== S U B R O U T I N E =======================================
.text:00417BD0
.text:00417BD0 ; Attributes: bp-based frame
.text:00417BD0
.text:00417BD0 sub_417BD0      proc near               ; CODE XREF: sub_401080+16↑p
.text:00417BD0                                         ; TopLevelExceptionFilter+D7↑p
.text:00417BD0                 push    ebp
.text:00417BD1                 mov     ebp, esp
.text:00417BD3                 fninit
.text:00417BD5                 pop     ebp
.text:00417BD6                 retn
.text:00417BD6 sub_417BD0      endp
.text:00417BD6
.text:00417BD6 ; ---------------------------------------------------------------------------
.text:00417BD7                 align 10h
.text:00417BE0
.text:00417BE0 ; =============== S U B R O U T I N E =======================================
.text:00417BE0
.text:00417BE0 ; Attributes: bp-based frame
.text:00417BE0
.text:00417BE0 ; void __cdecl sub_417BE0()
.text:00417BE0 sub_417BE0      proc near               ; DATA XREF: .text:loc_417C29↓o
.text:00417BE0                                         ; sub_417C70:loc_417C9E↓o
.text:00417BE0                 push    ebp
.text:00417BE1                 mov     ebp, esp
.text:00417BE3                 sub     esp, 8
.text:00417BE6                 mov     eax, off_41A0F4
.text:00417BEB                 mov     edx, [eax]
.text:00417BED                 test    edx, edx
.text:00417BEF                 jnz     short loc_417BF5
.text:00417BF1
.text:00417BF1 loc_417BF1:                             ; CODE XREF: sub_417BE0+2C↓j
.text:00417BF1                 mov     esp, ebp
.text:00417BF3                 pop     ebp
.text:00417BF4                 retn
.text:00417BF5 ; ---------------------------------------------------------------------------
.text:00417BF5
.text:00417BF5 loc_417BF5:                             ; CODE XREF: sub_417BE0+F↑j
.text:00417BF5                                         ; sub_417BE0+2A↓j
.text:00417BF5                 call    dword ptr [eax]
.text:00417BF7                 mov     edx, off_41A0F4
.text:00417BFD                 mov     ecx, [edx+4]
.text:00417C00                 lea     eax, [edx+4]
.text:00417C03                 mov     off_41A0F4, eax
.text:00417C08                 test    ecx, ecx
.text:00417C0A                 jnz     short loc_417BF5
.text:00417C0C                 jmp     short loc_417BF1
.text:00417C0C sub_417BE0      endp
.text:00417C0C
.text:00417C0C ; ---------------------------------------------------------------------------
.text:00417C0E                 align 10h
.text:00417C10                 push    ebp
.text:00417C11                 mov     ebp, esp
.text:00417C13                 sub     esp, 8
.text:00417C16                 mov     [ebp-4], ebx
.text:00417C19                 mov     eax, ds:dword_419000
.text:00417C1E                 cmp     eax, 0FFFFFFFFh
.text:00417C21                 jz      short loc_417C4C
.text:00417C23
.text:00417C23 loc_417C23:                             ; CODE XREF: .text:00417C56↓j
.text:00417C23                                         ; .text:00417C69↓j
.text:00417C23                 test    eax, eax
.text:00417C25                 mov     ebx, eax
.text:00417C27                 jnz     short loc_417C40
.text:00417C29
.text:00417C29 loc_417C29:                             ; CODE XREF: .text:00417C4A↓j
.text:00417C29                 mov     dword ptr [esp], offset sub_417BE0
.text:00417C30                 call    sub_401040
.text:00417C35                 mov     ebx, [ebp-4]
.text:00417C38                 mov     esp, ebp
.text:00417C3A                 pop     ebp
.text:00417C3B                 retn
.text:00417C3B ; ---------------------------------------------------------------------------
.text:00417C3C                 align 10h
.text:00417C40
.text:00417C40 loc_417C40:                             ; CODE XREF: .text:00417C27↑j
.text:00417C40                                         ; .text:00417C48↓j
.text:00417C40                 call    ds:dword_419000[ebx*4]
.text:00417C47                 dec     ebx
.text:00417C48                 jnz     short loc_417C40
.text:00417C4A                 jmp     short loc_417C29
.text:00417C4C ; ---------------------------------------------------------------------------
.text:00417C4C
.text:00417C4C loc_417C4C:                             ; CODE XREF: .text:00417C21↑j
.text:00417C4C                 mov     ecx, ds:dword_419004
.text:00417C52                 xor     eax, eax
.text:00417C54                 test    ecx, ecx
.text:00417C56                 jz      short loc_417C23
.text:00417C58                 mov     edx, offset dword_419000
.text:00417C5D                 lea     esi, [esi+0]
.text:00417C60
.text:00417C60 loc_417C60:                             ; CODE XREF: .text:00417C67↓j
.text:00417C60                 inc     eax
.text:00417C61                 mov     ecx, [edx+eax*4+4]
.text:00417C65                 test    ecx, ecx
.text:00417C67                 jnz     short loc_417C60
.text:00417C69                 jmp     short loc_417C23
.text:00417C69 ; ---------------------------------------------------------------------------
.text:00417C6B                 align 10h
.text:00417C70
.text:00417C70 ; =============== S U B R O U T I N E =======================================
.text:00417C70
.text:00417C70 ; Attributes: bp-based frame
.text:00417C70
.text:00417C70 sub_417C70      proc near               ; CODE XREF: sub_402250+1E↑p
.text:00417C70
.text:00417C70 var_8           = dword ptr -8
.text:00417C70 var_4           = dword ptr -4
.text:00417C70
.text:00417C70                 push    ebp
.text:00417C71                 mov     ebp, esp
.text:00417C73                 sub     esp, 8
.text:00417C76                 mov     [ebp+var_4], ebx
.text:00417C79                 mov     edx, dword_41A0F0
.text:00417C7F                 test    edx, edx
.text:00417C81                 jnz     short loc_417CAA
.text:00417C83                 mov     eax, ds:dword_419000
.text:00417C88                 mov     edx, 1
.text:00417C8D                 mov     dword_41A0F0, edx
.text:00417C93                 cmp     eax, 0FFFFFFFFh
.text:00417C96                 jz      short loc_417CBD
.text:00417C98
.text:00417C98 loc_417C98:                             ; CODE XREF: sub_417C70+57↓j
.text:00417C98                                         ; sub_417C70+69↓j
.text:00417C98                 test    eax, eax
.text:00417C9A                 mov     ebx, eax
.text:00417C9C                 jnz     short loc_417CB1
.text:00417C9E
.text:00417C9E loc_417C9E:                             ; CODE XREF: sub_417C70+4B↓j
.text:00417C9E                 mov     [esp+8+var_8], offset sub_417BE0 ; void (__cdecl *)()
.text:00417CA5                 call    sub_401040
.text:00417CAA
.text:00417CAA loc_417CAA:                             ; CODE XREF: sub_417C70+11↑j
.text:00417CAA                 mov     ebx, [ebp+var_4]
.text:00417CAD                 mov     esp, ebp
.text:00417CAF                 pop     ebp
.text:00417CB0                 retn
.text:00417CB1 ; ---------------------------------------------------------------------------
.text:00417CB1
.text:00417CB1 loc_417CB1:                             ; CODE XREF: sub_417C70+2C↑j
.text:00417CB1                                         ; sub_417C70+49↓j
.text:00417CB1                 call    ds:dword_419000[ebx*4]
.text:00417CB8                 dec     ebx
.text:00417CB9                 jnz     short loc_417CB1
.text:00417CBB                 jmp     short loc_417C9E
.text:00417CBD ; ---------------------------------------------------------------------------
.text:00417CBD
.text:00417CBD loc_417CBD:                             ; CODE XREF: sub_417C70+26↑j
.text:00417CBD                 mov     ecx, ds:dword_419004
.text:00417CC3                 xor     eax, eax
.text:00417CC5                 test    ecx, ecx
.text:00417CC7                 jz      short loc_417C98
.text:00417CC9                 mov     edx, offset dword_419000
.text:00417CCE                 mov     esi, esi
.text:00417CD0
.text:00417CD0 loc_417CD0:                             ; CODE XREF: sub_417C70+67↓j
.text:00417CD0                 inc     eax
.text:00417CD1                 mov     ebx, [edx+eax*4+4]
.text:00417CD5                 test    ebx, ebx
.text:00417CD7                 jnz     short loc_417CD0
.text:00417CD9                 jmp     short loc_417C98
.text:00417CD9 sub_417C70      endp
.text:00417CD9
.text:00417CD9 ; ---------------------------------------------------------------------------
.text:00417CDB                 align 10h
.text:00417CE0
.text:00417CE0 ; =============== S U B R O U T I N E =======================================
.text:00417CE0
.text:00417CE0 ; Attributes: info_from_lumina
.text:00417CE0
.text:00417CE0 ; void *__cdecl _alloca(size_t Size)
.text:00417CE0 __alloca        proc near               ; CODE XREF: sub_402250+19↑p
.text:00417CE0                                         ; sub_40C240+9↑p
.text:00417CE0                 push    ecx
.text:00417CE1                 mov     ecx, esp
.text:00417CE3                 add     ecx, 8
.text:00417CE6
.text:00417CE6 loc_417CE6:                             ; CODE XREF: __alloca+1B↓j
.text:00417CE6                 cmp     eax, 1000h
.text:00417CEB                 jb      short loc_417CFD
.text:00417CED                 sub     ecx, 1000h
.text:00417CF3                 or      dword ptr [ecx], 0
.text:00417CF6                 sub     eax, 1000h
.text:00417CFB                 jmp     short loc_417CE6
.text:00417CFD ; ---------------------------------------------------------------------------
.text:00417CFD
.text:00417CFD loc_417CFD:                             ; CODE XREF: __alloca+B↑j
.text:00417CFD                 sub     ecx, eax
.text:00417CFF                 or      dword ptr [ecx], 0
.text:00417D02                 mov     eax, esp
.text:00417D04                 mov     esp, ecx
.text:00417D06                 mov     ecx, [eax]
.text:00417D08                 mov     eax, [eax+4]
.text:00417D0B                 jmp     eax
.text:00417D0B __alloca        endp
.text:00417D0B
.text:00417D0B ; ---------------------------------------------------------------------------
.text:00417D0D                 align 10h
.text:00417D10
.text:00417D10 ; =============== S U B R O U T I N E =======================================
.text:00417D10
.text:00417D10 ; Attributes: bp-based frame
.text:00417D10
.text:00417D10 sub_417D10      proc near               ; CODE XREF: sub_402E60+23↑p
.text:00417D10                                         ; sub_404F60+24↑p ...
.text:00417D10
.text:00417D10 var_34          = dword ptr -34h
.text:00417D10 var_2C          = dword ptr -2Ch
.text:00417D10 var_28          = dword ptr -28h
.text:00417D10 var_24          = dword ptr -24h
.text:00417D10 var_20          = dword ptr -20h
.text:00417D10 var_1C          = dword ptr -1Ch
.text:00417D10 var_18          = dword ptr -18h
.text:00417D10 var_14          = dword ptr -14h
.text:00417D10 arg_0           = dword ptr  8
.text:00417D10 arg_4           = dword ptr  0Ch
.text:00417D10 arg_8           = dword ptr  10h
.text:00417D10 arg_C           = dword ptr  14h
.text:00417D10
.text:00417D10                 push    ebp
.text:00417D11                 mov     ebp, esp
.text:00417D13                 push    edi
.text:00417D14                 push    esi
.text:00417D15                 push    ebx
.text:00417D16                 sub     esp, 2Ch
.text:00417D19                 mov     edx, [ebp+arg_C]
.text:00417D1C                 mov     [ebp+var_20], 0
.text:00417D23                 mov     ecx, [ebp+arg_0]
.text:00417D26                 mov     ebx, [ebp+arg_4]
.text:00417D29                 mov     [ebp+var_1C], 0
.text:00417D30                 mov     eax, [ebp+arg_8]
.text:00417D33                 test    edx, edx
.text:00417D35                 mov     [ebp+var_24], edx
.text:00417D38                 mov     edi, ebx
.text:00417D3A                 mov     esi, eax
.text:00417D3C                 mov     [ebp+var_28], ecx
.text:00417D3F                 jnz     short loc_417DA0
.text:00417D41                 cmp     eax, ebx
.text:00417D43                 jbe     short loc_417D80
.text:00417D45                 mov     eax, ecx
.text:00417D47                 mov     edx, ebx
.text:00417D49                 div     esi
.text:00417D4B
.text:00417D4B loc_417D4B:                             ; CODE XREF: sub_417D10+8B↓j
.text:00417D4B                 mov     [ebp+var_28], edx
.text:00417D4E                 lea     ecx, [ebp+var_18]
.text:00417D51                 test    ecx, ecx
.text:00417D53                 jz      short loc_417D6E
.text:00417D55                 mov     [ebp+var_1C], 0
.text:00417D5C
.text:00417D5C loc_417D5C:                             ; CODE XREF: sub_417D10+DA↓j
.text:00417D5C                 mov     eax, [ebp+var_28]
.text:00417D5F                 mov     [ebp+var_20], eax
.text:00417D62                 mov     edx, [ebp+var_20]
.text:00417D65                 mov     ecx, [ebp+var_1C]
.text:00417D68                 mov     [ebp+var_18], edx
.text:00417D6B                 mov     [ebp+var_14], ecx
.text:00417D6E
.text:00417D6E loc_417D6E:                             ; CODE XREF: sub_417D10+43↑j
.text:00417D6E                                         ; sub_417D10+A7↓j ...
.text:00417D6E                 mov     eax, [ebp+var_18]
.text:00417D71                 mov     edx, [ebp+var_14]
.text:00417D74                 add     esp, 2Ch
.text:00417D77                 pop     ebx
.text:00417D78                 pop     esi
.text:00417D79                 pop     edi
.text:00417D7A                 pop     ebp
.text:00417D7B                 retn
.text:00417D7B ; ---------------------------------------------------------------------------
.text:00417D7C                 align 10h
.text:00417D80
.text:00417D80 loc_417D80:                             ; CODE XREF: sub_417D10+33↑j
.text:00417D80                 test    eax, eax
.text:00417D82                 jnz     short loc_417D8F
.text:00417D84                 mov     eax, 1
.text:00417D89                 xor     edx, edx
.text:00417D8B                 div     esi
.text:00417D8D                 mov     esi, eax
.text:00417D8F
.text:00417D8F loc_417D8F:                             ; CODE XREF: sub_417D10+72↑j
.text:00417D8F                 mov     eax, edi
.text:00417D91                 mov     edx, [ebp+var_24]
.text:00417D94                 div     esi
.text:00417D96                 mov     eax, [ebp+var_28]
.text:00417D99                 div     esi
.text:00417D9B                 jmp     short loc_417D4B
.text:00417D9B ; ---------------------------------------------------------------------------
.text:00417D9D                 align 10h
.text:00417DA0
.text:00417DA0 loc_417DA0:                             ; CODE XREF: sub_417D10+2F↑j
.text:00417DA0                 cmp     [ebp+var_24], ebx
.text:00417DA3                 jbe     short loc_417DC0
.text:00417DA5                 mov     [ebp+var_20], ecx
.text:00417DA8
.text:00417DA8 loc_417DA8:                             ; CODE XREF: sub_417D10+15B↓j
.text:00417DA8                 mov     [ebp+var_1C], edi
.text:00417DAB                 mov     eax, [ebp+var_20]
.text:00417DAE                 mov     edx, [ebp+var_1C]
.text:00417DB1                 mov     [ebp+var_18], eax
.text:00417DB4                 mov     [ebp+var_14], edx
.text:00417DB7                 jmp     short loc_417D6E
.text:00417DB7 ; ---------------------------------------------------------------------------
.text:00417DB9                 align 10h
.text:00417DC0
.text:00417DC0 loc_417DC0:                             ; CODE XREF: sub_417D10+93↑j
.text:00417DC0                 bsr     eax, [ebp+var_24]
.text:00417DC4                 mov     ebx, eax
.text:00417DC6                 xor     ebx, 1Fh
.text:00417DC9                 jnz     short loc_417DF0
.text:00417DCB                 cmp     edi, [ebp+var_24]
.text:00417DCE                 ja      short loc_417DD5
.text:00417DD0                 cmp     [ebp+var_28], esi
.text:00417DD3                 jb      short loc_417DE0
.text:00417DD5
.text:00417DD5 loc_417DD5:                             ; CODE XREF: sub_417D10+BE↑j
.text:00417DD5                 mov     edx, [ebp+var_28]
.text:00417DD8                 sub     edx, esi
.text:00417DDA                 sbb     edi, [ebp+var_24]
.text:00417DDD                 mov     [ebp+var_28], edx
.text:00417DE0
.text:00417DE0 loc_417DE0:                             ; CODE XREF: sub_417D10+C3↑j
.text:00417DE0                 lea     ecx, [ebp+var_18]
.text:00417DE3                 test    ecx, ecx
.text:00417DE5                 jz      short loc_417D6E
.text:00417DE7                 mov     [ebp+var_1C], edi
.text:00417DEA                 jmp     loc_417D5C
.text:00417DEA ; ---------------------------------------------------------------------------
.text:00417DEF                 align 10h
.text:00417DF0
.text:00417DF0 loc_417DF0:                             ; CODE XREF: sub_417D10+B9↑j
.text:00417DF0                 mov     edx, [ebp+var_24]
.text:00417DF3                 mov     eax, 20h ; ' '
.text:00417DF8                 mov     cl, bl
.text:00417DFA                 sub     eax, ebx
.text:00417DFC                 mov     [ebp+var_2C], eax
.text:00417DFF                 shl     edx, cl
.text:00417E01                 mov     eax, esi
.text:00417E03                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00417E07                 shr     eax, cl
.text:00417E09                 mov     cl, bl
.text:00417E0B                 shl     esi, cl
.text:00417E0D                 or      edx, eax
.text:00417E0F                 mov     eax, [ebp+var_28]
.text:00417E12                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00417E16                 mov     [ebp+var_24], edx
.text:00417E19                 mov     edx, edi
.text:00417E1B                 shr     edx, cl
.text:00417E1D                 mov     cl, bl
.text:00417E1F                 shl     edi, cl
.text:00417E21                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00417E25                 shr     eax, cl
.text:00417E27                 or      edi, eax
.text:00417E29                 mov     eax, edi
.text:00417E2B                 mov     cl, bl
.text:00417E2D                 div     [ebp+var_24]
.text:00417E30                 shl     [ebp+var_28], cl
.text:00417E33                 mov     edi, edx
.text:00417E35                 mul     esi
.text:00417E37                 mov     [ebp+var_34], eax
.text:00417E3A                 cmp     edx, edi
.text:00417E3C                 ja      short loc_417E78
.text:00417E3E                 cmp     edx, edi
.text:00417E40                 jz      short loc_417E70
.text:00417E42
.text:00417E42 loc_417E42:                             ; CODE XREF: sub_417D10+166↓j
.text:00417E42                                         ; sub_417D10+173↓j
.text:00417E42                 lea     eax, [ebp+var_18]
.text:00417E45                 test    eax, eax
.text:00417E47                 jz      loc_417D6E
.text:00417E4D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00417E51                 mov     eax, [ebp+var_28]
.text:00417E54                 sub     eax, [ebp+var_34]
.text:00417E57                 sbb     edi, edx
.text:00417E59                 mov     [ebp+var_28], eax
.text:00417E5C                 mov     edx, edi
.text:00417E5E                 shl     edx, cl
.text:00417E60                 mov     cl, bl
.text:00417E62                 shr     eax, cl
.text:00417E64                 or      edx, eax
.text:00417E66                 mov     [ebp+var_20], edx
.text:00417E69                 shr     edi, cl
.text:00417E6B                 jmp     loc_417DA8
.text:00417E70 ; ---------------------------------------------------------------------------
.text:00417E70
.text:00417E70 loc_417E70:                             ; CODE XREF: sub_417D10+130↑j
.text:00417E70                 mov     eax, [ebp+var_28]
.text:00417E73                 cmp     [ebp+var_34], eax
.text:00417E76                 jbe     short loc_417E42
.text:00417E78
.text:00417E78 loc_417E78:                             ; CODE XREF: sub_417D10+12C↑j
.text:00417E78                 mov     ecx, [ebp+var_34]
.text:00417E7B                 sub     ecx, esi
.text:00417E7D                 sbb     edx, [ebp+var_24]
.text:00417E80                 mov     [ebp+var_34], ecx
.text:00417E83                 jmp     short loc_417E42
.text:00417E83 sub_417D10      endp
.text:00417E83
.text:00417E83 ; ---------------------------------------------------------------------------
.text:00417E85                 align 10h
.text:00417E90
.text:00417E90 ; =============== S U B R O U T I N E =======================================
.text:00417E90
.text:00417E90 ; Attributes: bp-based frame
.text:00417E90
.text:00417E90 sub_417E90      proc near               ; CODE XREF: sub_409880+157↑p
.text:00417E90                                         ; sub_409880+1B4↑p ...
.text:00417E90
.text:00417E90 var_24          = dword ptr -24h
.text:00417E90 var_20          = dword ptr -20h
.text:00417E90 var_1C          = dword ptr -1Ch
.text:00417E90 var_18          = dword ptr -18h
.text:00417E90 var_14          = dword ptr -14h
.text:00417E90 var_C           = dword ptr -0Ch
.text:00417E90 var_8           = dword ptr -8
.text:00417E90 var_4           = dword ptr -4
.text:00417E90 arg_0           = dword ptr  8
.text:00417E90 arg_4           = dword ptr  0Ch
.text:00417E90 arg_8           = dword ptr  10h
.text:00417E90 arg_C           = dword ptr  14h
.text:00417E90
.text:00417E90                 push    ebp
.text:00417E91                 mov     ebp, esp
.text:00417E93                 sub     esp, 28h
.text:00417E96                 mov     [ebp+var_C], ebx
.text:00417E99                 mov     edx, [ebp+arg_C]
.text:00417E9C                 mov     ecx, [ebp+arg_0]
.text:00417E9F                 mov     [ebp+var_8], esi
.text:00417EA2                 mov     eax, [ebp+arg_8]
.text:00417EA5                 test    edx, edx
.text:00417EA7                 mov     [ebp+var_4], edi
.text:00417EAA                 mov     ebx, [ebp+arg_4]
.text:00417EAD                 mov     esi, eax
.text:00417EAF                 mov     [ebp+var_18], 0
.text:00417EB6                 mov     [ebp+var_14], 0
.text:00417EBD                 mov     [ebp+var_1C], ecx
.text:00417EC0                 jnz     short loc_417F12
.text:00417EC2                 cmp     eax, ebx
.text:00417EC4                 jbe     short loc_417EF0
.text:00417EC6                 mov     eax, ecx
.text:00417EC8                 mov     edx, ebx
.text:00417ECA                 div     esi
.text:00417ECC                 mov     edi, eax
.text:00417ECE                 mov     esi, esi
.text:00417ED0
.text:00417ED0 loc_417ED0:                             ; CODE XREF: sub_417E90+88↓j
.text:00417ED0                                         ; sub_417E90+A4↓j ...
.text:00417ED0                 xor     ecx, ecx
.text:00417ED2
.text:00417ED2 loc_417ED2:                             ; CODE XREF: sub_417E90+80↓j
.text:00417ED2                 mov     [ebp+var_18], edi
.text:00417ED5                 mov     ebx, [ebp+var_C]
.text:00417ED8                 mov     eax, [ebp+var_18]
.text:00417EDB                 mov     [ebp+var_14], ecx
.text:00417EDE                 mov     esi, [ebp+var_8]
.text:00417EE1                 mov     edx, [ebp+var_14]
.text:00417EE4                 mov     edi, [ebp+var_4]
.text:00417EE7                 mov     esp, ebp
.text:00417EE9                 pop     ebp
.text:00417EEA                 retn
.text:00417EEA ; ---------------------------------------------------------------------------
.text:00417EEB                 align 10h
.text:00417EF0
.text:00417EF0 loc_417EF0:                             ; CODE XREF: sub_417E90+34↑j
.text:00417EF0                 test    eax, eax
.text:00417EF2                 jnz     short loc_417F01
.text:00417EF4                 mov     eax, 1
.text:00417EF9                 xor     ecx, ecx
.text:00417EFB                 xor     edx, edx
.text:00417EFD                 div     ecx
.text:00417EFF                 mov     esi, eax
.text:00417F01
.text:00417F01 loc_417F01:                             ; CODE XREF: sub_417E90+62↑j
.text:00417F01                 mov     eax, ebx
.text:00417F03                 xor     edx, edx
.text:00417F05                 div     esi
.text:00417F07                 mov     ecx, eax
.text:00417F09                 mov     eax, [ebp+var_1C]
.text:00417F0C                 div     esi
.text:00417F0E                 mov     edi, eax
.text:00417F10                 jmp     short loc_417ED2
.text:00417F12 ; ---------------------------------------------------------------------------
.text:00417F12
.text:00417F12 loc_417F12:                             ; CODE XREF: sub_417E90+30↑j
.text:00417F12                 cmp     edx, ebx
.text:00417F14                 jbe     short loc_417F20
.text:00417F16                 xor     edi, edi
.text:00417F18                 jmp     short loc_417ED0
.text:00417F18 ; ---------------------------------------------------------------------------
.text:00417F1A                 align 10h
.text:00417F20
.text:00417F20 loc_417F20:                             ; CODE XREF: sub_417E90+84↑j
.text:00417F20                 bsr     eax, edx
.text:00417F23                 xor     eax, 1Fh
.text:00417F26                 mov     [ebp+var_20], eax
.text:00417F29                 jnz     short loc_417F40
.text:00417F2B                 cmp     ebx, edx
.text:00417F2D                 ja      short loc_417F36
.text:00417F2F                 xor     edi, edi
.text:00417F31                 cmp     [ebp+var_1C], esi
.text:00417F34                 jb      short loc_417ED0
.text:00417F36
.text:00417F36 loc_417F36:                             ; CODE XREF: sub_417E90+9D↑j
.text:00417F36                 mov     edi, 1
.text:00417F3B                 jmp     short loc_417ED0
.text:00417F3B ; ---------------------------------------------------------------------------
.text:00417F3D                 align 10h
.text:00417F40
.text:00417F40 loc_417F40:                             ; CODE XREF: sub_417E90+99↑j
.text:00417F40                 mov     eax, [ebp+var_20]
.text:00417F43                 mov     ecx, 20h ; ' '
.text:00417F48                 sub     ecx, eax
.text:00417F4A                 mov     [ebp+var_24], ecx
.text:00417F4D                 mov     eax, esi
.text:00417F4F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00417F53                 shl     edx, cl
.text:00417F55                 mov     edi, edx
.text:00417F57                 movzx   ecx, byte ptr [ebp+var_24]
.text:00417F5B                 mov     edx, ebx
.text:00417F5D                 shr     eax, cl
.text:00417F5F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00417F63                 or      edi, eax
.text:00417F65                 mov     eax, [ebp+var_1C]
.text:00417F68                 shl     esi, cl
.text:00417F6A                 movzx   ecx, byte ptr [ebp+var_24]
.text:00417F6E                 shr     edx, cl
.text:00417F70                 movzx   ecx, byte ptr [ebp+var_20]
.text:00417F74                 shl     ebx, cl
.text:00417F76                 movzx   ecx, byte ptr [ebp+var_24]
.text:00417F7A                 shr     eax, cl
.text:00417F7C                 or      ebx, eax
.text:00417F7E                 movzx   ecx, byte ptr [ebp+var_20]
.text:00417F82                 mov     eax, ebx
.text:00417F84                 div     edi
.text:00417F86                 mov     ebx, edx
.text:00417F88                 mov     edi, eax
.text:00417F8A                 shl     [ebp+var_1C], cl
.text:00417F8D                 mul     esi
.text:00417F8F                 cmp     edx, ebx
.text:00417F91                 ja      short loc_417FA4
.text:00417F93                 cmp     edx, ebx
.text:00417F95                 jnz     loc_417ED0
.text:00417F9B                 cmp     eax, [ebp+var_1C]
.text:00417F9E                 jbe     loc_417ED0
.text:00417FA4
.text:00417FA4 loc_417FA4:                             ; CODE XREF: sub_417E90+101↑j
.text:00417FA4                 dec     edi
.text:00417FA5                 jmp     loc_417ED0
.text:00417FA5 sub_417E90      endp
.text:00417FA5
.text:00417FA5 ; ---------------------------------------------------------------------------
.text:00417FAA                 align 10h
.text:00417FB0 flt_417FB0      dd 2.3283064e-10        ; DATA XREF: sub_417FC0+2B↓r
.text:00417FB4 flt_417FB4      dd 1.8446744e19         ; DATA XREF: sub_417FC0:loc_418054↓r
.text:00417FB8                 align 10h
.text:00417FC0
.text:00417FC0 ; =============== S U B R O U T I N E =======================================
.text:00417FC0
.text:00417FC0 ; Attributes: bp-based frame
.text:00417FC0
.text:00417FC0 ; int __cdecl sub_417FC0(_TBYTE)
.text:00417FC0 sub_417FC0      proc near               ; CODE XREF: sub_409880+250↑p
.text:00417FC0                                         ; sub_409880+52C↑p ...
.text:00417FC0
.text:00417FC0 var_20          = qword ptr -20h
.text:00417FC0 var_18          = qword ptr -18h
.text:00417FC0 var_C           = word ptr -0Ch
.text:00417FC0 var_A           = word ptr -0Ah
.text:00417FC0 var_4           = dword ptr -4
.text:00417FC0 arg_0           = tbyte ptr  8
.text:00417FC0
.text:00417FC0                 push    ebp
.text:00417FC1                 fldz
.text:00417FC3                 mov     ebp, esp
.text:00417FC5                 sub     esp, 18h
.text:00417FC8                 fld     [ebp+arg_0]
.text:00417FCB                 fxch    st(1)
.text:00417FCD                 mov     [ebp+var_4], ebx
.text:00417FD0                 fucom   st(1)
.text:00417FD2                 fnstsw  ax
.text:00417FD4                 sahf
.text:00417FD5                 jbe     short loc_417FE6
.text:00417FD7                 fstp    st
.text:00417FD9                 fstp    st
.text:00417FDB                 xor     eax, eax
.text:00417FDD                 xor     edx, edx
.text:00417FDF
.text:00417FDF loc_417FDF:                             ; CODE XREF: sub_417FC0+7A↓j
.text:00417FDF                 mov     ebx, [ebp+var_4]
.text:00417FE2                 mov     esp, ebp
.text:00417FE4                 pop     ebp
.text:00417FE5                 retn
.text:00417FE6 ; ---------------------------------------------------------------------------
.text:00417FE6
.text:00417FE6 loc_417FE6:                             ; CODE XREF: sub_417FC0+15↑j
.text:00417FE6                 fnstcw  [ebp+var_A]
.text:00417FE9                 xor     ecx, ecx
.text:00417FEB                 fld     ds:flt_417FB0
.text:00417FF1                 movzx   eax, [ebp+var_A]
.text:00417FF5                 fmul    st, st(2)
.text:00417FF7                 or      ax, 0C00h
.text:00417FFB                 mov     [ebp+var_C], ax
.text:00417FFF                 fldcw   [ebp+var_C]
.text:00418002                 fistp   [ebp+var_18]
.text:00418005                 fldcw   [ebp+var_A]
.text:00418008                 mov     eax, dword ptr [ebp+var_18]
.text:0041800B                 mov     ebx, eax
.text:0041800D                 push    eax
.text:0041800E                 push    ecx
.text:0041800F                 fild    [esp+20h+var_20]
.text:00418012                 add     esp, 8
.text:00418015                 test    eax, eax
.text:00418017                 js      short loc_418054
.text:00418019
.text:00418019 loc_418019:                             ; CODE XREF: sub_417FC0+9A↓j
.text:00418019                 fsubp   st(2), st
.text:0041801B                 fucomp  st(1)
.text:0041801D                 fnstsw  ax
.text:0041801F                 sahf
.text:00418020                 jbe     short loc_418040
.text:00418022                 fchs
.text:00418024                 xor     edx, edx
.text:00418026                 fldcw   [ebp+var_C]
.text:00418029                 fistp   [ebp+var_18]
.text:0041802C                 fldcw   [ebp+var_A]
.text:0041802F                 mov     eax, dword ptr [ebp+var_18]
.text:00418032                 sub     ecx, eax
.text:00418034                 sbb     ebx, edx
.text:00418036
.text:00418036 loc_418036:                             ; CODE XREF: sub_417FC0+92↓j
.text:00418036                 mov     eax, ecx
.text:00418038                 mov     edx, ebx
.text:0041803A                 jmp     short loc_417FDF
.text:0041803A ; ---------------------------------------------------------------------------
.text:0041803C                 align 10h
.text:00418040
.text:00418040 loc_418040:                             ; CODE XREF: sub_417FC0+60↑j
.text:00418040                 fldcw   [ebp+var_C]
.text:00418043                 fistp   [ebp+var_18]
.text:00418046                 fldcw   [ebp+var_A]
.text:00418049                 xor     edx, edx
.text:0041804B                 mov     eax, dword ptr [ebp+var_18]
.text:0041804E                 add     ecx, eax
.text:00418050                 adc     ebx, edx
.text:00418052                 jmp     short loc_418036
.text:00418054 ; ---------------------------------------------------------------------------
.text:00418054
.text:00418054 loc_418054:                             ; CODE XREF: sub_417FC0+57↑j
.text:00418054                 fadd    ds:flt_417FB4
.text:0041805A                 jmp     short loc_418019
.text:0041805A sub_417FC0      endp
.text:0041805A
.text:0041805A ; ---------------------------------------------------------------------------
.text:0041805C                 align 10h
.text:00418060
.text:00418060 ; =============== S U B R O U T I N E =======================================
.text:00418060
.text:00418060 ; Attributes: thunk
.text:00418060
.text:00418060 ; int __cdecl close(int FileHandle)
.text:00418060 _close          proc near               ; CODE XREF: sub_403A00+C9↑p
.text:00418060                                         ; sub_403B00+348↑p ...
.text:00418060
.text:00418060 FileHandle      = dword ptr  4
.text:00418060
.text:00418060                 jmp     ds:__imp__close
.text:00418060 _close          endp
.text:00418060
.text:00418060 ; ---------------------------------------------------------------------------
.text:00418066                 align 10h
.text:00418070
.text:00418070 ; =============== S U B R O U T I N E =======================================
.text:00418070
.text:00418070 ; Attributes: thunk
.text:00418070
.text:00418070 ; int open(const char *FileName, int OpenFlag, ...)
.text:00418070 _open           proc near               ; CODE XREF: sub_4036F0+187↑p
.text:00418070                                         ; sub_4036F0+1AC↑p ...
.text:00418070
.text:00418070 FileName        = dword ptr  4
.text:00418070 OpenFlag        = dword ptr  8
.text:00418070
.text:00418070                 jmp     ds:__imp__open
.text:00418070 _open           endp
.text:00418070
.text:00418070 ; ---------------------------------------------------------------------------
.text:00418076                 align 10h
.text:00418080
.text:00418080 ; =============== S U B R O U T I N E =======================================
.text:00418080
.text:00418080 ; Attributes: thunk
.text:00418080
.text:00418080 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:00418080 _stricmp        proc near               ; CODE XREF: sub_40F7A0+46F↑p
.text:00418080                                         ; sub_411990+2E↑p ...
.text:00418080
.text:00418080 String1         = dword ptr  4
.text:00418080 String2         = dword ptr  8
.text:00418080
.text:00418080                 jmp     ds:__imp__stricmp
.text:00418080 _stricmp        endp
.text:00418080
.text:00418080 ; ---------------------------------------------------------------------------
.text:00418086                 align 10h
.text:00418090
.text:00418090 ; =============== S U B R O U T I N E =======================================
.text:00418090
.text:00418090 ; Attributes: thunk
.text:00418090
.text:00418090 ; char *__cdecl strdup(const char *String)
.text:00418090 _strdup         proc near               ; CODE XREF: sub_4115C0+101↑p
.text:00418090                                         ; .text:0041182A↑p ...
.text:00418090
.text:00418090 String          = dword ptr  4
.text:00418090
.text:00418090                 jmp     ds:__imp__strdup
.text:00418090 _strdup         endp
.text:00418090
.text:00418090 ; ---------------------------------------------------------------------------
.text:00418096                 align 10h
.text:004180A0
.text:004180A0 ; =============== S U B R O U T I N E =======================================
.text:004180A0
.text:004180A0 ; Attributes: thunk
.text:004180A0
.text:004180A0 ; int __cdecl getpid()
.text:004180A0 _getpid         proc near               ; CODE XREF: sub_415C00+84↑p
.text:004180A0                 jmp     ds:__imp__getpid
.text:004180A0 _getpid         endp
.text:004180A0
.text:004180A0 ; ---------------------------------------------------------------------------
.text:004180A6                 align 10h
.text:004180B0
.text:004180B0 ; =============== S U B R O U T I N E =======================================
.text:004180B0
.text:004180B0 ; Attributes: thunk
.text:004180B0
.text:004180B0 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:004180B0 _chmod          proc near               ; CODE XREF: sub_416030+41↑j
.text:004180B0
.text:004180B0 FileName        = dword ptr  4
.text:004180B0 AccessMode      = dword ptr  8
.text:004180B0
.text:004180B0                 jmp     ds:__imp__chmod
.text:004180B0 _chmod          endp
.text:004180B0
.text:004180B0 ; ---------------------------------------------------------------------------
.text:004180B6                 align 10h
.text:004180C0
.text:004180C0 ; =============== S U B R O U T I N E =======================================
.text:004180C0
.text:004180C0
.text:004180C0 sub_4180C0      proc near               ; CODE XREF: sub_40CE00+125↑p
.text:004180C0                                         ; sub_40CE00+1C1↑p
.text:004180C0
.text:004180C0 var_8           = dword ptr -8
.text:004180C0 var_4           = dword ptr -4
.text:004180C0 arg_0           = dword ptr  4
.text:004180C0 arg_4           = dword ptr  8
.text:004180C0 arg_8           = dword ptr  0Ch
.text:004180C0
.text:004180C0                 sub     esp, 8
.text:004180C3                 mov     ecx, [esp+8+arg_4]
.text:004180C7                 mov     [esp+8+var_8], ebx
.text:004180CA                 mov     ebx, [esp+8+arg_0]
.text:004180CE                 mov     [esp+8+var_4], esi
.text:004180D2                 mov     edx, [esp+8+arg_8]
.text:004180D6                 test    ebx, ebx
.text:004180D8                 mov     esi, ebx
.text:004180DA                 jz      short loc_4180FF
.text:004180DC                 test    ecx, ecx
.text:004180DE                 jz      short loc_4180FF
.text:004180E0                 test    edx, edx
.text:004180E2                 jz      short loc_4180FF
.text:004180E4                 lea     esi, [esi+0]
.text:004180EA                 lea     edi, [edi+0]
.text:004180F0
.text:004180F0 loc_4180F0:                             ; CODE XREF: sub_4180C0+3D↓j
.text:004180F0                 movzx   eax, word ptr [ecx]
.text:004180F3                 add     ecx, 2
.text:004180F6                 mov     [ebx], ax
.text:004180F9                 add     ebx, 2
.text:004180FC                 dec     edx
.text:004180FD                 jnz     short loc_4180F0
.text:004180FF
.text:004180FF loc_4180FF:                             ; CODE XREF: sub_4180C0+1A↑j
.text:004180FF                                         ; sub_4180C0+1E↑j ...
.text:004180FF                 mov     eax, esi
.text:00418101                 mov     ebx, [esp+8+var_8]
.text:00418104                 mov     esi, [esp+8+var_4]
.text:00418108                 add     esp, 8
.text:0041810B                 retn
.text:0041810B sub_4180C0      endp
.text:0041810B
.text:0041810B ; ---------------------------------------------------------------------------
.text:0041810C                 align 10h
.text:00418110
.text:00418110 ; =============== S U B R O U T I N E =======================================
.text:00418110
.text:00418110
.text:00418110 sub_418110      proc near               ; CODE XREF: sub_40C240+2A7↑p
.text:00418110                                         ; sub_40C240+2DE↑p
.text:00418110
.text:00418110 arg_0           = dword ptr  4
.text:00418110 arg_4           = word ptr  8
.text:00418110 arg_8           = dword ptr  0Ch
.text:00418110
.text:00418110                 movzx   ecx, [esp+arg_4]
.text:00418115                 mov     eax, [esp+arg_0]
.text:00418119                 mov     edx, [esp+arg_8]
.text:0041811D                 test    eax, eax
.text:0041811F                 jz      short loc_41813B
.text:00418121                 test    edx, edx
.text:00418123                 jz      short loc_41813B
.text:00418125                 lea     esi, [esi+0]
.text:00418129                 lea     edi, [edi+0]
.text:00418130
.text:00418130 loc_418130:                             ; CODE XREF: sub_418110+29↓j
.text:00418130                 cmp     [eax], cx
.text:00418133                 jz      short locret_41813D
.text:00418135                 add     eax, 2
.text:00418138                 dec     edx
.text:00418139                 jnz     short loc_418130
.text:0041813B
.text:0041813B loc_41813B:                             ; CODE XREF: sub_418110+F↑j
.text:0041813B                                         ; sub_418110+13↑j
.text:0041813B                 xor     eax, eax
.text:0041813D
.text:0041813D locret_41813D:                          ; CODE XREF: sub_418110+23↑j
.text:0041813D                 retn
.text:0041813D sub_418110      endp
.text:0041813D
.text:0041813D ; ---------------------------------------------------------------------------
.text:0041813E                 align 10h
.text:00418140
.text:00418140 ; =============== S U B R O U T I N E =======================================
.text:00418140
.text:00418140 ; Attributes: info_from_lumina
.text:00418140
.text:00418140 ; unsigned __int64 __cdecl strtoull(const char *String, char **EndPtr, int Radix)
.text:00418140 _strtoull       proc near               ; CODE XREF: sub_40D750+AD↑p
.text:00418140
.text:00418140 C               = dword ptr -3Ch
.text:00418140 Type            = dword ptr -38h
.text:00418140 var_34          = dword ptr -34h
.text:00418140 var_30          = dword ptr -30h
.text:00418140 var_2C          = dword ptr -2Ch
.text:00418140 var_28          = dword ptr -28h
.text:00418140 var_24          = dword ptr -24h
.text:00418140 var_20          = dword ptr -20h
.text:00418140 var_1C          = dword ptr -1Ch
.text:00418140 var_18          = dword ptr -18h
.text:00418140 String          = dword ptr  4
.text:00418140 EndPtr          = dword ptr  8
.text:00418140 Radix           = dword ptr  0Ch
.text:00418140
.text:00418140                 push    ebp
.text:00418141                 push    edi
.text:00418142                 push    esi
.text:00418143                 push    ebx
.text:00418144                 sub     esp, 2Ch
.text:00418147                 mov     edx, [esp+3Ch+EndPtr]
.text:0041814B                 test    edx, edx
.text:0041814D                 jz      short loc_418159
.text:0041814F                 mov     eax, [esp+3Ch+String]
.text:00418153                 mov     ecx, [esp+3Ch+EndPtr]
.text:00418157                 mov     [ecx], eax
.text:00418159
.text:00418159 loc_418159:                             ; CODE XREF: _strtoull+D↑j
.text:00418159                 mov     edx, [esp+3Ch+Radix]
.text:0041815D                 test    edx, edx
.text:0041815F                 js      short loc_41816F
.text:00418161                 cmp     [esp+3Ch+Radix], 1
.text:00418166                 jz      short loc_41816F
.text:00418168                 cmp     [esp+3Ch+Radix], 24h ; '$'
.text:0041816D                 jle     short loc_418186
.text:0041816F
.text:0041816F loc_41816F:                             ; CODE XREF: _strtoull+1F↑j
.text:0041816F                                         ; _strtoull+26↑j
.text:0041816F                 call    _errno
.text:00418174                 mov     dword ptr [eax], 21h ; '!'
.text:0041817A
.text:0041817A loc_41817A:                             ; CODE XREF: _strtoull+FF↓j
.text:0041817A                                         ; _strtoull+109↓j
.text:0041817A                 xor     eax, eax
.text:0041817C                 xor     edx, edx
.text:0041817E
.text:0041817E loc_41817E:                             ; CODE XREF: _strtoull+244↓j
.text:0041817E                                         ; _strtoull+251↓j ...
.text:0041817E                 add     esp, 2Ch
.text:00418181                 pop     ebx
.text:00418182                 pop     esi
.text:00418183                 pop     edi
.text:00418184                 pop     ebp
.text:00418185                 retn
.text:00418186 ; ---------------------------------------------------------------------------
.text:00418186
.text:00418186 loc_418186:                             ; CODE XREF: _strtoull+2D↑j
.text:00418186                 mov     ecx, ds:__mb_cur_max
.text:0041818C                 lea     esi, [esi+0]
.text:00418190
.text:00418190 loc_418190:                             ; CODE XREF: _strtoull+7E↓j
.text:00418190                 cmp     dword ptr [ecx], 1
.text:00418193                 mov     esi, [esp+3Ch+String]
.text:00418197                 movsx   edx, byte ptr [esi]
.text:0041819A                 jz      loc_418572
.text:004181A0                 mov     [esp+3Ch+Type], 8 ; Type
.text:004181A8                 mov     [esp+3Ch+C], edx ; C
.text:004181AB                 call    _isctype
.text:004181B0                 mov     ecx, ds:__mb_cur_max
.text:004181B6
.text:004181B6 loc_4181B6:                             ; CODE XREF: _strtoull+445↓j
.text:004181B6                 test    eax, eax
.text:004181B8                 jz      short loc_4181C0
.text:004181BA                 inc     [esp+3Ch+String]
.text:004181BE                 jmp     short loc_418190
.text:004181C0 ; ---------------------------------------------------------------------------
.text:004181C0
.text:004181C0 loc_4181C0:                             ; CODE XREF: _strtoull+78↑j
.text:004181C0                 mov     esi, [esp+3Ch+String]
.text:004181C4                 xor     ebx, ebx
.text:004181C6                 movzx   edx, byte ptr [esi]
.text:004181C9                 cmp     dl, 2Dh ; '-'
.text:004181CC                 setz    bl
.text:004181CF                 test    ebx, ebx
.text:004181D1                 mov     [esp+3Ch+var_20], ebx
.text:004181D5                 jnz     loc_418562
.text:004181DB                 cmp     dl, 2Bh ; '+'
.text:004181DE                 jz      loc_418562
.text:004181E4
.text:004181E4 loc_4181E4:                             ; CODE XREF: _strtoull+42D↓j
.text:004181E4                 mov     ebp, [esp+3Ch+Radix]
.text:004181E8                 test    ebp, ebp
.text:004181EA                 jnz     short loc_4181FD
.text:004181EC                 cmp     dl, 30h ; '0'
.text:004181EF                 jz      loc_418539
.text:004181F5                 mov     [esp+3Ch+Radix], 0Ah
.text:004181FD
.text:004181FD loc_4181FD:                             ; CODE XREF: _strtoull+AA↑j
.text:004181FD                                         ; _strtoull+40F↓j ...
.text:004181FD                 cmp     [esp+3Ch+Radix], 10h
.text:00418202                 jz      loc_41850B
.text:00418208
.text:00418208 loc_418208:                             ; CODE XREF: _strtoull+3CE↓j
.text:00418208                                         ; _strtoull+3E2↓j ...
.text:00418208                 cmp     dword ptr [ecx], 1
.text:0041820B                 movsx   ebx, dl
.text:0041820E                 jz      loc_4184F3
.text:00418214                 mov     [esp+3Ch+Type], 4 ; Type
.text:0041821C                 mov     [esp+3Ch+C], ebx ; C
.text:0041821F                 call    _isctype
.text:00418224                 mov     esi, [esp+3Ch+String]
.text:00418228                 movzx   edx, byte ptr [esi]
.text:0041822B
.text:0041822B loc_41822B:                             ; CODE XREF: _strtoull+3C6↓j
.text:0041822B                 test    eax, eax
.text:0041822D                 jz      loc_41845C
.text:00418233                 movsx   eax, dl
.text:00418236                 sub     eax, 30h ; '0'
.text:00418239
.text:00418239 loc_418239:                             ; CODE XREF: _strtoull+34B↓j
.text:00418239                                         ; _strtoull+37C↓j ...
.text:00418239                 inc     [esp+3Ch+String]
.text:0041823D                 test    eax, eax
.text:0041823F                 js      loc_41817A
.text:00418245                 cmp     eax, [esp+3Ch+Radix]
.text:00418249                 jge     loc_41817A
.text:0041824F                 mov     [esp+3Ch+var_1C], eax
.text:00418253                 mov     edx, eax
.text:00418255                 sar     edx, 1Fh
.text:00418258                 mov     [esp+3Ch+var_18], edx
.text:0041825C                 mov     [esp+3Ch+var_24], 0
.text:00418264                 lea     esi, [esi+0]
.text:0041826A                 lea     edi, [edi+0]
.text:00418270
.text:00418270 loc_418270:                             ; CODE XREF: _strtoull+20C↓j
.text:00418270                 mov     ebp, [esp+3Ch+String]
.text:00418274                 mov     ebx, ds:__mb_cur_max
.text:0041827A                 movzx   edx, byte ptr [ebp+0]
.text:0041827E                 cmp     dword ptr [ebx], 1
.text:00418281                 movsx   ecx, dl
.text:00418284                 jz      loc_418445
.text:0041828A                 mov     [esp+3Ch+C], ecx ; C
.text:0041828D                 mov     [esp+3Ch+Type], 4 ; Type
.text:00418295                 call    _isctype
.text:0041829A                 mov     ecx, [esp+3Ch+String]
.text:0041829E                 movzx   edx, byte ptr [ecx]
.text:004182A1
.text:004182A1 loc_4182A1:                             ; CODE XREF: _strtoull+317↓j
.text:004182A1                 test    eax, eax
.text:004182A3                 jz      loc_4183B0
.text:004182A9                 movsx   edi, dl
.text:004182AC                 lea     ebp, [edi-30h]
.text:004182AF
.text:004182AF loc_4182AF:                             ; CODE XREF: _strtoull+2A3↓j
.text:004182AF                 test    ebp, ebp
.text:004182B1                 js      loc_41835B
.text:004182B7                 cmp     ebp, [esp+3Ch+Radix]
.text:004182BB                 jge     loc_41835B
.text:004182C1                 mov     [esp+3Ch+C], 0FFFFFFFFh
.text:004182C8                 mov     eax, [esp+3Ch+Radix]
.text:004182CC                 mov     [esp+3Ch+Type], 0FFFFFFFFh
.text:004182D4                 cdq
.text:004182D5                 mov     esi, eax
.text:004182D7                 mov     [esp+3Ch+var_34], eax
.text:004182DB                 mov     edi, edx
.text:004182DD                 mov     [esp+3Ch+var_30], edx
.text:004182E1                 call    sub_417E90
.text:004182E6                 add     eax, 1
.text:004182E9                 adc     edx, 0
.text:004182EC                 cmp     [esp+3Ch+var_18], edx
.text:004182F0                 ja      short loc_418340
.text:004182F2                 jb      short loc_4182FA
.text:004182F4                 cmp     [esp+3Ch+var_1C], eax
.text:004182F8                 ja      short loc_418340
.text:004182FA
.text:004182FA loc_4182FA:                             ; CODE XREF: _strtoull+1B2↑j
.text:004182FA                 mov     eax, [esp+3Ch+var_1C]
.text:004182FE                 mov     ebx, ebp
.text:00418300                 mul     esi
.text:00418302                 mov     ecx, edx
.text:00418304                 mov     [esp+3Ch+var_2C], eax
.text:00418308                 mov     eax, [esp+3Ch+var_18]
.text:0041830C                 mov     [esp+3Ch+var_28], edx
.text:00418310                 imul    eax, esi
.text:00418313                 mov     esi, [esp+3Ch+var_1C]
.text:00418317                 imul    esi, edi
.text:0041831A                 add     ecx, eax
.text:0041831C                 lea     edi, [esi+ecx]
.text:0041831F                 mov     esi, ebp
.text:00418321                 sar     esi, 1Fh
.text:00418324                 add     ebx, [esp+3Ch+var_2C]
.text:00418328                 mov     [esp+3Ch+var_28], edi
.text:0041832C                 adc     esi, [esp+3Ch+var_28]
.text:00418330                 cmp     esi, [esp+3Ch+var_18]
.text:00418334                 jb      short loc_418340
.text:00418336                 ja      short loc_418351
.text:00418338                 cmp     ebx, [esp+3Ch+var_1C]
.text:0041833C                 jnb     short loc_418351
.text:0041833E                 mov     esi, esi
.text:00418340
.text:00418340 loc_418340:                             ; CODE XREF: _strtoull+1B0↑j
.text:00418340                                         ; _strtoull+1B8↑j ...
.text:00418340                 mov     [esp+3Ch+var_24], 1
.text:00418348
.text:00418348 loc_418348:                             ; CODE XREF: _strtoull+219↓j
.text:00418348                 inc     [esp+3Ch+String]
.text:0041834C                 jmp     loc_418270
.text:00418351 ; ---------------------------------------------------------------------------
.text:00418351
.text:00418351 loc_418351:                             ; CODE XREF: _strtoull+1F6↑j
.text:00418351                                         ; _strtoull+1FC↑j
.text:00418351                 mov     [esp+3Ch+var_1C], ebx
.text:00418355                 mov     [esp+3Ch+var_18], esi
.text:00418359                 jmp     short loc_418348
.text:0041835B ; ---------------------------------------------------------------------------
.text:0041835B
.text:0041835B loc_41835B:                             ; CODE XREF: _strtoull+171↑j
.text:0041835B                                         ; _strtoull+17B↑j
.text:0041835B                 mov     eax, [esp+3Ch+EndPtr]
.text:0041835F                 test    eax, eax
.text:00418361                 jz      short loc_41836E
.text:00418363                 mov     ecx, [esp+3Ch+String]
.text:00418367                 mov     ebp, [esp+3Ch+EndPtr]
.text:0041836B                 mov     [ebp+0], ecx
.text:0041836E
.text:0041836E loc_41836E:                             ; CODE XREF: _strtoull+221↑j
.text:0041836E                 mov     esi, [esp+3Ch+var_24]
.text:00418372                 test    esi, esi
.text:00418374                 jnz     short loc_418396
.text:00418376                 mov     ebx, [esp+3Ch+var_20]
.text:0041837A                 mov     eax, [esp+3Ch+var_1C]
.text:0041837E                 mov     edx, [esp+3Ch+var_18]
.text:00418382                 test    ebx, ebx
.text:00418384                 jz      loc_41817E
.text:0041838A                 neg     eax
.text:0041838C                 adc     edx, 0
.text:0041838F                 neg     edx
.text:00418391                 jmp     loc_41817E
.text:00418396 ; ---------------------------------------------------------------------------
.text:00418396
.text:00418396 loc_418396:                             ; CODE XREF: _strtoull+234↑j
.text:00418396                 call    _errno
.text:0041839B                 mov     edx, 0FFFFFFFFh
.text:004183A0                 mov     dword ptr [eax], 22h ; '"'
.text:004183A6                 mov     eax, 0FFFFFFFFh
.text:004183AB                 jmp     loc_41817E
.text:004183B0 ; ---------------------------------------------------------------------------
.text:004183B0
.text:004183B0 loc_4183B0:                             ; CODE XREF: _strtoull+163↑j
.text:004183B0                 mov     ebp, ds:__mb_cur_max
.text:004183B6                 movsx   ecx, dl
.text:004183B9                 cmp     dword ptr [ebp+0], 1
.text:004183BD                 jz      short loc_418431
.text:004183BF                 mov     [esp+3Ch+Type], 1 ; Type
.text:004183C7                 mov     [esp+3Ch+C], ecx ; C
.text:004183CA                 call    _isctype
.text:004183CF                 mov     ebp, [esp+3Ch+String]
.text:004183D3                 movzx   edx, byte ptr [ebp+0]
.text:004183D7
.text:004183D7 loc_4183D7:                             ; CODE XREF: _strtoull+303↓j
.text:004183D7                 test    eax, eax
.text:004183D9                 jz      short loc_4183E8
.text:004183DB                 movsx   eax, dl
.text:004183DE                 sub     eax, 37h ; '7'
.text:004183E1
.text:004183E1 loc_4183E1:                             ; CODE XREF: _strtoull+2D4↓j
.text:004183E1                                         ; _strtoull+2DB↓j
.text:004183E1                 mov     ebp, eax
.text:004183E3                 jmp     loc_4182AF
.text:004183E8 ; ---------------------------------------------------------------------------
.text:004183E8
.text:004183E8 loc_4183E8:                             ; CODE XREF: _strtoull+299↑j
.text:004183E8                 mov     ecx, ds:__mb_cur_max
.text:004183EE                 movsx   edx, dl
.text:004183F1                 cmp     dword ptr [ecx], 1
.text:004183F4                 jz      short loc_41841D
.text:004183F6                 mov     [esp+3Ch+Type], 2 ; Type
.text:004183FE                 mov     [esp+3Ch+C], edx ; C
.text:00418401                 call    _isctype
.text:00418406
.text:00418406 loc_418406:                             ; CODE XREF: _strtoull+2EF↓j
.text:00418406                 test    eax, eax
.text:00418408                 jz      short loc_418416
.text:0041840A                 mov     edx, [esp+3Ch+String]
.text:0041840E                 movsx   eax, byte ptr [edx]
.text:00418411                 sub     eax, 57h ; 'W'
.text:00418414                 jmp     short loc_4183E1
.text:00418416 ; ---------------------------------------------------------------------------
.text:00418416
.text:00418416 loc_418416:                             ; CODE XREF: _strtoull+2C8↑j
.text:00418416                 mov     eax, 0FFFFFFFFh
.text:0041841B                 jmp     short loc_4183E1
.text:0041841D ; ---------------------------------------------------------------------------
.text:0041841D
.text:0041841D loc_41841D:                             ; CODE XREF: _strtoull+2B4↑j
.text:0041841D                 mov     edi, ds:_pctype
.text:00418423                 mov     ebx, [edi]
.text:00418425                 movzx   esi, word ptr [ebx+edx*2]
.text:00418429                 and     esi, 2
.text:0041842C                 movzx   eax, si
.text:0041842F                 jmp     short loc_418406
.text:00418431 ; ---------------------------------------------------------------------------
.text:00418431
.text:00418431 loc_418431:                             ; CODE XREF: _strtoull+27D↑j
.text:00418431                 mov     edi, ds:_pctype
.text:00418437                 mov     ebx, [edi]
.text:00418439                 movzx   esi, word ptr [ebx+ecx*2]
.text:0041843D                 and     esi, 1
.text:00418440                 movzx   eax, si
.text:00418443                 jmp     short loc_4183D7
.text:00418445 ; ---------------------------------------------------------------------------
.text:00418445
.text:00418445 loc_418445:                             ; CODE XREF: _strtoull+144↑j
.text:00418445                 mov     ebx, ds:_pctype
.text:0041844B                 mov     esi, [ebx]
.text:0041844D                 movzx   edi, word ptr [esi+ecx*2]
.text:00418451                 and     edi, 4
.text:00418454                 movzx   eax, di
.text:00418457                 jmp     loc_4182A1
.text:0041845C ; ---------------------------------------------------------------------------
.text:0041845C
.text:0041845C loc_41845C:                             ; CODE XREF: _strtoull+ED↑j
.text:0041845C                 mov     ebx, ds:__mb_cur_max
.text:00418462                 movsx   ecx, dl
.text:00418465                 cmp     dword ptr [ebx], 1
.text:00418468                 jz      short loc_4184DF
.text:0041846A                 mov     [esp+3Ch+C], ecx ; C
.text:0041846D                 mov     [esp+3Ch+Type], 1 ; Type
.text:00418475                 call    _isctype
.text:0041847A                 mov     ecx, [esp+3Ch+String]
.text:0041847E                 movzx   edx, byte ptr [ecx]
.text:00418481
.text:00418481 loc_418481:                             ; CODE XREF: _strtoull+3B1↓j
.text:00418481                 test    eax, eax
.text:00418483                 jz      short loc_418490
.text:00418485                 movsx   eax, dl
.text:00418488                 sub     eax, 37h ; '7'
.text:0041848B                 jmp     loc_418239
.text:00418490 ; ---------------------------------------------------------------------------
.text:00418490
.text:00418490 loc_418490:                             ; CODE XREF: _strtoull+343↑j
.text:00418490                 mov     ebx, ds:__mb_cur_max
.text:00418496                 movsx   edx, dl
.text:00418499                 cmp     dword ptr [ebx], 1
.text:0041849C                 jz      short loc_4184CB
.text:0041849E                 mov     [esp+3Ch+Type], 2 ; Type
.text:004184A6                 mov     [esp+3Ch+C], edx ; C
.text:004184A9                 call    _isctype
.text:004184AE
.text:004184AE loc_4184AE:                             ; CODE XREF: _strtoull+39D↓j
.text:004184AE                 test    eax, eax
.text:004184B0                 jz      short loc_4184C1
.text:004184B2                 mov     ecx, [esp+3Ch+String]
.text:004184B6                 movsx   eax, byte ptr [ecx]
.text:004184B9                 sub     eax, 57h ; 'W'
.text:004184BC                 jmp     loc_418239
.text:004184C1 ; ---------------------------------------------------------------------------
.text:004184C1
.text:004184C1 loc_4184C1:                             ; CODE XREF: _strtoull+370↑j
.text:004184C1                 mov     eax, 0FFFFFFFFh
.text:004184C6                 jmp     loc_418239
.text:004184CB ; ---------------------------------------------------------------------------
.text:004184CB
.text:004184CB loc_4184CB:                             ; CODE XREF: _strtoull+35C↑j
.text:004184CB                 mov     esi, ds:_pctype
.text:004184D1                 mov     edi, [esi]
.text:004184D3                 movzx   ebp, word ptr [edi+edx*2]
.text:004184D7                 and     ebp, 2
.text:004184DA                 movzx   eax, bp
.text:004184DD                 jmp     short loc_4184AE
.text:004184DF ; ---------------------------------------------------------------------------
.text:004184DF
.text:004184DF loc_4184DF:                             ; CODE XREF: _strtoull+328↑j
.text:004184DF                 mov     esi, ds:_pctype
.text:004184E5                 mov     edi, [esi]
.text:004184E7                 movzx   ebp, word ptr [edi+ecx*2]
.text:004184EB                 and     ebp, 1
.text:004184EE                 movzx   eax, bp
.text:004184F1                 jmp     short loc_418481
.text:004184F3 ; ---------------------------------------------------------------------------
.text:004184F3
.text:004184F3 loc_4184F3:                             ; CODE XREF: _strtoull+CE↑j
.text:004184F3                 mov     edi, ds:_pctype
.text:004184F9                 mov     ebp, [edi]
.text:004184FB                 movzx   ecx, word ptr [ebp+ebx*2+0]
.text:00418500                 and     ecx, 4
.text:00418503                 movzx   eax, cx
.text:00418506                 jmp     loc_41822B
.text:0041850B ; ---------------------------------------------------------------------------
.text:0041850B
.text:0041850B loc_41850B:                             ; CODE XREF: _strtoull+C2↑j
.text:0041850B                 cmp     dl, 30h ; '0'
.text:0041850E                 jnz     loc_418208
.text:00418514                 mov     esi, [esp+3Ch+String]
.text:00418518                 movzx   eax, byte ptr [esi+1]
.text:0041851C                 cmp     al, 58h ; 'X'
.text:0041851E                 jz      short loc_418528
.text:00418520                 cmp     al, 78h ; 'x'
.text:00418522                 jnz     loc_418208
.text:00418528
.text:00418528 loc_418528:                             ; CODE XREF: _strtoull+3DE↑j
.text:00418528                 add     [esp+3Ch+String], 2
.text:0041852D                 mov     ebx, [esp+3Ch+String]
.text:00418531                 movzx   edx, byte ptr [ebx]
.text:00418534                 jmp     loc_418208
.text:00418539 ; ---------------------------------------------------------------------------
.text:00418539
.text:00418539 loc_418539:                             ; CODE XREF: _strtoull+AF↑j
.text:00418539                 mov     edi, [esp+3Ch+String]
.text:0041853D                 movzx   eax, byte ptr [edi+1]
.text:00418541                 cmp     al, 58h ; 'X'
.text:00418543                 jz      short loc_418555
.text:00418545                 mov     [esp+3Ch+Radix], 8
.text:0041854D                 cmp     al, 78h ; 'x'
.text:0041854F                 jnz     loc_4181FD
.text:00418555
.text:00418555 loc_418555:                             ; CODE XREF: _strtoull+403↑j
.text:00418555                 mov     [esp+3Ch+Radix], 10h
.text:0041855D                 jmp     loc_4181FD
.text:00418562 ; ---------------------------------------------------------------------------
.text:00418562
.text:00418562 loc_418562:                             ; CODE XREF: _strtoull+95↑j
.text:00418562                                         ; _strtoull+9E↑j
.text:00418562                 inc     [esp+3Ch+String]
.text:00418566                 mov     eax, [esp+3Ch+String]
.text:0041856A                 movzx   edx, byte ptr [eax]
.text:0041856D                 jmp     loc_4181E4
.text:00418572 ; ---------------------------------------------------------------------------
.text:00418572
.text:00418572 loc_418572:                             ; CODE XREF: _strtoull+5A↑j
.text:00418572                 mov     ebp, ds:_pctype
.text:00418578                 mov     edi, [ebp+0]
.text:0041857B                 movzx   ebx, word ptr [edi+edx*2]
.text:0041857F                 and     ebx, 8
.text:00418582                 movzx   eax, bx
.text:00418585                 jmp     loc_4181B6
.text:00418585 _strtoull       endp
.text:00418585
.text:00418585 ; ---------------------------------------------------------------------------
.text:0041858A                 align 10h
.text:00418590                 jmp     ds:__set_app_type
.text:00418590 ; ---------------------------------------------------------------------------
.text:00418596                 align 10h
.text:004185A0
.text:004185A0 ; =============== S U B R O U T I N E =======================================
.text:004185A0
.text:004185A0 ; Attributes: thunk
.text:004185A0
.text:004185A0 ; void __cdecl cexit()
.text:004185A0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:004185A0                 jmp     ds:__imp__cexit
.text:004185A0 _cexit          endp
.text:004185A0
.text:004185A0 ; ---------------------------------------------------------------------------
.text:004185A6                 align 10h
.text:004185B0
.text:004185B0 ; =============== S U B R O U T I N E =======================================
.text:004185B0
.text:004185B0 ; Attributes: thunk
.text:004185B0
.text:004185B0 ; char ***__cdecl _p__environ()
.text:004185B0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:004185B0                 jmp     ds:__imp___p__environ
.text:004185B0 __p__environ    endp
.text:004185B0
.text:004185B0 ; ---------------------------------------------------------------------------
.text:004185B6                 align 10h
.text:004185C0
.text:004185C0 ; =============== S U B R O U T I N E =======================================
.text:004185C0
.text:004185C0 ; Attributes: thunk
.text:004185C0
.text:004185C0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:004185C0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:004185C0                                         ; TopLevelExceptionFilter+88↑p ...
.text:004185C0
.text:004185C0 Signal          = dword ptr  4
.text:004185C0 Function        = dword ptr  8
.text:004185C0
.text:004185C0                 jmp     ds:__imp_signal
.text:004185C0 signal          endp
.text:004185C0
.text:004185C0 ; ---------------------------------------------------------------------------
.text:004185C6                 align 10h
.text:004185D0
.text:004185D0 ; =============== S U B R O U T I N E =======================================
.text:004185D0
.text:004185D0 ; Attributes: thunk
.text:004185D0
.text:004185D0 ; int *__cdecl _p__fmode()
.text:004185D0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:004185D0                 jmp     ds:__imp___p__fmode
.text:004185D0 __p__fmode      endp
.text:004185D0
.text:004185D0 ; ---------------------------------------------------------------------------
.text:004185D6                 align 10h
.text:004185E0
.text:004185E0 ; =============== S U B R O U T I N E =======================================
.text:004185E0
.text:004185E0 ; Attributes: thunk
.text:004185E0
.text:004185E0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:004185E0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:004185E0                                         ; sub_401080+90↑p ...
.text:004185E0
.text:004185E0 FileHandle      = dword ptr  4
.text:004185E0 Mode            = dword ptr  8
.text:004185E0
.text:004185E0                 jmp     ds:__imp__setmode
.text:004185E0 _setmode        endp
.text:004185E0
.text:004185E0 ; ---------------------------------------------------------------------------
.text:004185E6                 align 10h
.text:004185F0
.text:004185F0 ; =============== S U B R O U T I N E =======================================
.text:004185F0
.text:004185F0 ; Attributes: thunk
.text:004185F0
.text:004185F0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004185F0                 jmp     ds:__imp___getmainargs
.text:004185F0 __getmainargs   endp
.text:004185F0
.text:004185F0 ; ---------------------------------------------------------------------------
.text:004185F6                 align 10h
.text:00418600
.text:00418600 ; =============== S U B R O U T I N E =======================================
.text:00418600
.text:00418600 ; Attributes: thunk
.text:00418600
.text:00418600 ; int __cdecl fclose(FILE *Stream)
.text:00418600 fclose          proc near               ; CODE XREF: sub_402250+6FD↑p
.text:00418600                                         ; sub_408D70+1B7↑p ...
.text:00418600
.text:00418600 Stream          = dword ptr  4
.text:00418600
.text:00418600                 jmp     ds:__imp_fclose
.text:00418600 fclose          endp
.text:00418600
.text:00418600 ; ---------------------------------------------------------------------------
.text:00418606                 align 10h
.text:00418610
.text:00418610 ; =============== S U B R O U T I N E =======================================
.text:00418610
.text:00418610 ; Attributes: thunk
.text:00418610
.text:00418610 ; char *__cdecl getenv(const char *VarName)
.text:00418610 getenv          proc near               ; CODE XREF: sub_402250+B2↑p
.text:00418610                                         ; sub_406670+C27↑p ...
.text:00418610
.text:00418610 VarName         = dword ptr  4
.text:00418610
.text:00418610                 jmp     ds:__imp_getenv
.text:00418610 getenv          endp
.text:00418610
.text:00418610 ; ---------------------------------------------------------------------------
.text:00418616                 align 10h
.text:00418620
.text:00418620 ; =============== S U B R O U T I N E =======================================
.text:00418620
.text:00418620 ; Attributes: thunk
.text:00418620
.text:00418620 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00418620 setlocale       proc near               ; CODE XREF: sub_402250+6E↑p
.text:00418620
.text:00418620 Category        = dword ptr  4
.text:00418620 Locale          = dword ptr  8
.text:00418620
.text:00418620                 jmp     ds:__imp_setlocale
.text:00418620 setlocale       endp
.text:00418620
.text:00418620 ; ---------------------------------------------------------------------------
.text:00418626                 align 10h
.text:00418630
.text:00418630 ; =============== S U B R O U T I N E =======================================
.text:00418630
.text:00418630 ; Attributes: thunk
.text:00418630
.text:00418630 ; int *__cdecl errno()
.text:00418630 _errno          proc near               ; CODE XREF: sub_402250+409↑p
.text:00418630                                         ; sub_402250+8D3↑p ...
.text:00418630                 jmp     ds:__imp__errno
.text:00418630 _errno          endp
.text:00418630
.text:00418630 ; ---------------------------------------------------------------------------
.text:00418636                 align 10h
.text:00418640
.text:00418640 ; =============== S U B R O U T I N E =======================================
.text:00418640
.text:00418640 ; Attributes: noreturn thunk
.text:00418640
.text:00418640 _assert         proc near               ; CODE XREF: sub_403100+5D1↑p
.text:00418640                                         ; sub_409190+553↑p ...
.text:00418640                 jmp     ds:__imp__assert
.text:00418640 _assert         endp
.text:00418640
.text:00418640 ; ---------------------------------------------------------------------------
.text:00418646                 align 10h
.text:00418650
.text:00418650 ; =============== S U B R O U T I N E =======================================
.text:00418650
.text:00418650 ; Attributes: thunk
.text:00418650
.text:00418650 ; int __cdecl fflush(FILE *Stream)
.text:00418650 fflush          proc near               ; CODE XREF: sub_402F10+D9↑p
.text:00418650                                         ; sub_403100+2A1↑p ...
.text:00418650
.text:00418650 Stream          = dword ptr  4
.text:00418650
.text:00418650                 jmp     ds:__imp_fflush
.text:00418650 fflush          endp
.text:00418650
.text:00418650 ; ---------------------------------------------------------------------------
.text:00418656                 align 10h
.text:00418660
.text:00418660 ; =============== S U B R O U T I N E =======================================
.text:00418660
.text:00418660 ; Attributes: thunk
.text:00418660
.text:00418660 ; void __cdecl free(void *Block)
.text:00418660 free            proc near               ; CODE XREF: sub_403100+4CC↑p
.text:00418660                                         ; sub_4036F0+1C2↑p ...
.text:00418660
.text:00418660 Block           = dword ptr  4
.text:00418660
.text:00418660                 jmp     ds:__imp_free
.text:00418660 free            endp
.text:00418660
.text:00418660 ; ---------------------------------------------------------------------------
.text:00418666                 align 10h
.text:00418670
.text:00418670 ; =============== S U B R O U T I N E =======================================
.text:00418670
.text:00418670 ; Attributes: noreturn thunk
.text:00418670
.text:00418670 ; void __cdecl __noreturn exit(int Code)
.text:00418670 exit            proc near               ; CODE XREF: sub_402250:loc_402530↑p
.text:00418670                                         ; sub_402CA0+3B↑p ...
.text:00418670
.text:00418670 Code            = dword ptr  4
.text:00418670
.text:00418670                 jmp     ds:__imp_exit
.text:00418670 exit            endp
.text:00418670
.text:00418670 ; ---------------------------------------------------------------------------
.text:00418676                 align 10h
.text:00418680
.text:00418680 ; =============== S U B R O U T I N E =======================================
.text:00418680
.text:00418680 ; Attributes: thunk
.text:00418680
.text:00418680 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00418680 fputs           proc near               ; CODE XREF: sub_402250+1A7↑p
.text:00418680                                         ; sub_402250+1C9↑p ...
.text:00418680
.text:00418680 Buffer          = dword ptr  4
.text:00418680 Stream          = dword ptr  8
.text:00418680
.text:00418680                 jmp     ds:__imp_fputs
.text:00418680 fputs           endp
.text:00418680
.text:00418680 ; ---------------------------------------------------------------------------
.text:00418686                 align 10h
.text:00418690
.text:00418690 ; =============== S U B R O U T I N E =======================================
.text:00418690
.text:00418690 ; Attributes: thunk
.text:00418690
.text:00418690 ; int printf(const char *const Format, ...)
.text:00418690 printf          proc near               ; CODE XREF: sub_402250+185↑p
.text:00418690                                         ; sub_402250+2D4↑p ...
.text:00418690
.text:00418690 Format          = dword ptr  4
.text:00418690
.text:00418690                 jmp     ds:__imp_printf
.text:00418690 printf          endp
.text:00418690
.text:00418690 ; ---------------------------------------------------------------------------
.text:00418696                 align 10h
.text:004186A0
.text:004186A0 ; =============== S U B R O U T I N E =======================================
.text:004186A0
.text:004186A0 ; Attributes: thunk
.text:004186A0
.text:004186A0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:004186A0 fprintf         proc near               ; CODE XREF: sub_402250+96F↑p
.text:004186A0                                         ; sub_402250+99B↑p ...
.text:004186A0
.text:004186A0 Stream          = dword ptr  4
.text:004186A0 Format          = dword ptr  8
.text:004186A0
.text:004186A0                 jmp     ds:__imp_fprintf
.text:004186A0 fprintf         endp
.text:004186A0
.text:004186A0 ; ---------------------------------------------------------------------------
.text:004186A6                 align 10h
.text:004186B0
.text:004186B0 ; =============== S U B R O U T I N E =======================================
.text:004186B0
.text:004186B0 ; Attributes: thunk
.text:004186B0
.text:004186B0 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:004186B0 fopen           proc near               ; CODE XREF: sub_402250+908↑p
.text:004186B0                                         ; sub_408D70+1FE↑p ...
.text:004186B0
.text:004186B0 FileName        = dword ptr  4
.text:004186B0 Mode            = dword ptr  8
.text:004186B0
.text:004186B0                 jmp     ds:__imp_fopen
.text:004186B0 fopen           endp
.text:004186B0
.text:004186B0 ; ---------------------------------------------------------------------------
.text:004186B6                 align 10h
.text:004186C0
.text:004186C0 ; =============== S U B R O U T I N E =======================================
.text:004186C0
.text:004186C0 ; Attributes: thunk
.text:004186C0
.text:004186C0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:004186C0 _flsbuf         proc near               ; CODE XREF: sub_403100+2E4↑p
.text:004186C0                                         ; sub_403100+2FF↑p ...
.text:004186C0
.text:004186C0 File            = dword ptr  8
.text:004186C0
.text:004186C0                 jmp     ds:__imp__flsbuf
.text:004186C0 _flsbuf         endp
.text:004186C0
.text:004186C0 ; ---------------------------------------------------------------------------
.text:004186C6                 align 10h
.text:004186D0
.text:004186D0 ; =============== S U B R O U T I N E =======================================
.text:004186D0
.text:004186D0 ; Attributes: thunk
.text:004186D0
.text:004186D0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:004186D0 realloc         proc near               ; CODE XREF: sub_404A90+35↑p
.text:004186D0                                         ; sub_404C30+60↑p ...
.text:004186D0
.text:004186D0 Block           = dword ptr  4
.text:004186D0 Size            = dword ptr  8
.text:004186D0
.text:004186D0                 jmp     ds:__imp_realloc
.text:004186D0 realloc         endp
.text:004186D0
.text:004186D0 ; ---------------------------------------------------------------------------
.text:004186D6                 align 10h
.text:004186E0
.text:004186E0 ; =============== S U B R O U T I N E =======================================
.text:004186E0
.text:004186E0 ; Attributes: thunk
.text:004186E0
.text:004186E0 ; void *__cdecl memmove(void *, const void *Src, size_t Size)
.text:004186E0 memmove         proc near               ; CODE XREF: sub_403B00+B2↑p
.text:004186E0                                         ; sub_403B00+1B2↑p ...
.text:004186E0
.text:004186E0 Src             = dword ptr  8
.text:004186E0 Size            = dword ptr  0Ch
.text:004186E0
.text:004186E0                 jmp     ds:__imp_memmove
.text:004186E0 memmove         endp
.text:004186E0
.text:004186E0 ; ---------------------------------------------------------------------------
.text:004186E6                 align 10h
.text:004186F0
.text:004186F0 ; =============== S U B R O U T I N E =======================================
.text:004186F0
.text:004186F0 ; Attributes: thunk
.text:004186F0
.text:004186F0 ; size_t __cdecl strlen(const char *Str)
.text:004186F0 strlen          proc near               ; CODE XREF: sub_4036F0+22B↑p
.text:004186F0                                         ; sub_403B00+1D5↑p ...
.text:004186F0
.text:004186F0 Str             = dword ptr  4
.text:004186F0
.text:004186F0                 jmp     ds:__imp_strlen
.text:004186F0 strlen          endp
.text:004186F0
.text:004186F0 ; ---------------------------------------------------------------------------
.text:004186F6                 align 10h
.text:00418700
.text:00418700 ; =============== S U B R O U T I N E =======================================
.text:00418700
.text:00418700 ; Attributes: noreturn thunk
.text:00418700
.text:00418700 ; void __cdecl __noreturn abort()
.text:00418700 abort           proc near               ; CODE XREF: sub_403B00:loc_404181↑p
.text:00418700                                         ; sub_406250:loc_40640A↑p ...
.text:00418700                 jmp     ds:__imp_abort
.text:00418700 abort           endp
.text:00418700
.text:00418700 ; ---------------------------------------------------------------------------
.text:00418706                 align 10h
.text:00418710
.text:00418710 ; =============== S U B R O U T I N E =======================================
.text:00418710
.text:00418710 ; Attributes: thunk
.text:00418710
.text:00418710 ; void *__cdecl malloc(size_t Size)
.text:00418710 malloc          proc near               ; CODE XREF: sub_4036F0+2A↑p
.text:00418710                                         ; sub_4036F0+156↑p ...
.text:00418710
.text:00418710 Size            = dword ptr  4
.text:00418710
.text:00418710                 jmp     ds:__imp_malloc
.text:00418710 malloc          endp
.text:00418710
.text:00418710 ; ---------------------------------------------------------------------------
.text:00418716                 align 10h
.text:00418720
.text:00418720 ; =============== S U B R O U T I N E =======================================
.text:00418720
.text:00418720 ; Attributes: thunk
.text:00418720
.text:00418720 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:00418720 strrchr         proc near               ; CODE XREF: sub_403B00+1C2↑p
.text:00418720                                         ; sub_40F7A0+CB↑p ...
.text:00418720
.text:00418720 Str             = dword ptr  4
.text:00418720
.text:00418720                 jmp     ds:__imp_strrchr
.text:00418720 strrchr         endp
.text:00418720
.text:00418720 ; ---------------------------------------------------------------------------
.text:00418726                 align 10h
.text:00418730
.text:00418730 ; =============== S U B R O U T I N E =======================================
.text:00418730
.text:00418730 ; Attributes: thunk
.text:00418730
.text:00418730 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00418730 iswctype        proc near               ; CODE XREF: sub_405110+78B↑p
.text:00418730                                         ; .text:0040B886↑p ...
.text:00418730
.text:00418730 C               = word ptr  4
.text:00418730 Type            = word ptr  8
.text:00418730
.text:00418730                 jmp     ds:__imp_iswctype
.text:00418730 iswctype        endp
.text:00418730
.text:00418730 ; ---------------------------------------------------------------------------
.text:00418736                 align 10h
.text:00418740
.text:00418740 ; =============== S U B R O U T I N E =======================================
.text:00418740
.text:00418740 ; Attributes: thunk
.text:00418740
.text:00418740 ; int __cdecl isctype(int C, int Type)
.text:00418740 _isctype        proc near               ; CODE XREF: sub_405110+610↑p
.text:00418740                                         ; sub_408D70+130↑p ...
.text:00418740
.text:00418740 C               = dword ptr  4
.text:00418740 Type            = dword ptr  8
.text:00418740
.text:00418740                 jmp     ds:__imp__isctype
.text:00418740 _isctype        endp
.text:00418740
.text:00418740 ; ---------------------------------------------------------------------------
.text:00418746                 align 10h
.text:00418750
.text:00418750 ; =============== S U B R O U T I N E =======================================
.text:00418750
.text:00418750 ; Attributes: thunk
.text:00418750
.text:00418750 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00418750 strncmp         proc near               ; CODE XREF: sub_406670+30F↑p
.text:00418750                                         ; sub_406670+769↑p ...
.text:00418750
.text:00418750 Str1            = dword ptr  4
.text:00418750 Str2            = dword ptr  8
.text:00418750 MaxCount        = dword ptr  0Ch
.text:00418750
.text:00418750                 jmp     ds:__imp_strncmp
.text:00418750 strncmp         endp
.text:00418750
.text:00418750 ; ---------------------------------------------------------------------------
.text:00418756                 align 10h
.text:00418760
.text:00418760 ; =============== S U B R O U T I N E =======================================
.text:00418760
.text:00418760 ; Attributes: thunk
.text:00418760
.text:00418760 ; char *__cdecl strchr(const char *Str, int Val)
.text:00418760 strchr          proc near               ; CODE XREF: sub_406670+539↑p
.text:00418760                                         ; sub_406670+60A↑p ...
.text:00418760
.text:00418760 Str             = dword ptr  4
.text:00418760 Val             = dword ptr  8
.text:00418760
.text:00418760                 jmp     ds:__imp_strchr
.text:00418760 strchr          endp
.text:00418760
.text:00418760 ; ---------------------------------------------------------------------------
.text:00418766                 align 10h
.text:00418770
.text:00418770 ; =============== S U B R O U T I N E =======================================
.text:00418770
.text:00418770 ; Attributes: thunk
.text:00418770
.text:00418770 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00418770 calloc          proc near               ; CODE XREF: sub_407540+1D0↑p
.text:00418770                                         ; sub_40AA90+23↑p ...
.text:00418770
.text:00418770 Count           = dword ptr  4
.text:00418770 Size            = dword ptr  8
.text:00418770
.text:00418770                 jmp     ds:__imp_calloc
.text:00418770 calloc          endp
.text:00418770
.text:00418770 ; ---------------------------------------------------------------------------
.text:00418776                 align 10h
.text:00418780
.text:00418780 ; =============== S U B R O U T I N E =======================================
.text:00418780
.text:00418780 ; Attributes: thunk
.text:00418780
.text:00418780 ; int __cdecl fgetc(FILE *Stream)
.text:00418780 fgetc           proc near               ; CODE XREF: sub_4083F0+23↑p
.text:00418780
.text:00418780 Stream          = dword ptr  4
.text:00418780
.text:00418780                 jmp     ds:__imp_fgetc
.text:00418780 fgetc           endp
.text:00418780
.text:00418780 ; ---------------------------------------------------------------------------
.text:00418786                 align 10h
.text:00418790
.text:00418790 ; =============== S U B R O U T I N E =======================================
.text:00418790
.text:00418790 ; Attributes: thunk
.text:00418790
.text:00418790 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00418790 memcpy          proc near               ; CODE XREF: sub_408670+81↑p
.text:00418790                                         ; sub_409880+85A↑p ...
.text:00418790
.text:00418790 Src             = dword ptr  8
.text:00418790 Size            = dword ptr  0Ch
.text:00418790
.text:00418790                 jmp     ds:__imp_memcpy
.text:00418790 memcpy          endp
.text:00418790
.text:00418790 ; ---------------------------------------------------------------------------
.text:00418796                 align 10h
.text:004187A0
.text:004187A0 ; =============== S U B R O U T I N E =======================================
.text:004187A0
.text:004187A0 ; Attributes: thunk
.text:004187A0
.text:004187A0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:004187A0 vfprintf        proc near               ; CODE XREF: sub_408A30+C1↑p
.text:004187A0                                         ; sub_40E9E0+49↑p ...
.text:004187A0
.text:004187A0 Stream          = dword ptr  4
.text:004187A0 Format          = dword ptr  8
.text:004187A0 ArgList         = dword ptr  0Ch
.text:004187A0
.text:004187A0                 jmp     ds:__imp_vfprintf
.text:004187A0 vfprintf        endp
.text:004187A0
.text:004187A0 ; ---------------------------------------------------------------------------
.text:004187A6                 align 10h
.text:004187B0
.text:004187B0 ; =============== S U B R O U T I N E =======================================
.text:004187B0
.text:004187B0 ; Attributes: thunk
.text:004187B0
.text:004187B0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:004187B0 strcmp          proc near               ; CODE XREF: sub_409050+5C↑j
.text:004187B0                                         ; sub_40EAE4+180↑p ...
.text:004187B0
.text:004187B0 Str1            = dword ptr  4
.text:004187B0 Str2            = dword ptr  8
.text:004187B0
.text:004187B0                 jmp     ds:__imp_strcmp
.text:004187B0 strcmp          endp
.text:004187B0
.text:004187B0 ; ---------------------------------------------------------------------------
.text:004187B6                 align 10h
.text:004187C0
.text:004187C0 ; =============== S U B R O U T I N E =======================================
.text:004187C0
.text:004187C0 ; Attributes: thunk
.text:004187C0
.text:004187C0 ; int __cdecl strnicmp(const char *String1, const char *String2, size_t MaxCount)
.text:004187C0 _strnicmp       proc near               ; CODE XREF: sub_409050+7B↑p
.text:004187C0
.text:004187C0 String1         = dword ptr  4
.text:004187C0 String2         = dword ptr  8
.text:004187C0 MaxCount        = dword ptr  0Ch
.text:004187C0
.text:004187C0                 jmp     ds:__imp__strnicmp
.text:004187C0 _strnicmp       endp
.text:004187C0
.text:004187C0 ; ---------------------------------------------------------------------------
.text:004187C6                 align 10h
.text:004187D0
.text:004187D0 ; =============== S U B R O U T I N E =======================================
.text:004187D0
.text:004187D0 ; Attributes: thunk
.text:004187D0
.text:004187D0 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:004187D0 _stricmp_0      proc near               ; CODE XREF: sub_409050+3C↑j
.text:004187D0                                         ; .text:00411244↑p
.text:004187D0
.text:004187D0 String1         = dword ptr  4
.text:004187D0 String2         = dword ptr  8
.text:004187D0
.text:004187D0                 jmp     ds:__imp__stricmp_0
.text:004187D0 _stricmp_0      endp
.text:004187D0
.text:004187D0 ; ---------------------------------------------------------------------------
.text:004187D6                 align 10h
.text:004187E0
.text:004187E0 ; =============== S U B R O U T I N E =======================================
.text:004187E0
.text:004187E0 ; Attributes: thunk
.text:004187E0
.text:004187E0 ; int __cdecl filbuf(FILE *File)
.text:004187E0 _filbuf         proc near               ; CODE XREF: sub_408D70+1E7↑p
.text:004187E0
.text:004187E0 File            = dword ptr  4
.text:004187E0
.text:004187E0                 jmp     ds:__imp__filbuf
.text:004187E0 _filbuf         endp
.text:004187E0
.text:004187E0 ; ---------------------------------------------------------------------------
.text:004187E6                 align 10h
.text:004187F0
.text:004187F0 ; =============== S U B R O U T I N E =======================================
.text:004187F0
.text:004187F0 ; Attributes: thunk
.text:004187F0
.text:004187F0 ; unsigned int __cdecl strtoul(const char *String, char **EndPtr, int Radix)
.text:004187F0 strtoul         proc near               ; CODE XREF: sub_409190+94↑p
.text:004187F0
.text:004187F0 String          = dword ptr  4
.text:004187F0 EndPtr          = dword ptr  8
.text:004187F0 Radix           = dword ptr  0Ch
.text:004187F0
.text:004187F0                 jmp     ds:__imp_strtoul
.text:004187F0 strtoul         endp
.text:004187F0
.text:004187F0 ; ---------------------------------------------------------------------------
.text:004187F6                 align 10h
.text:00418800
.text:00418800 ; =============== S U B R O U T I N E =======================================
.text:00418800
.text:00418800 ; Attributes: thunk
.text:00418800
.text:00418800 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00418800 sprintf         proc near               ; CODE XREF: sub_409880+2C1↑p
.text:00418800                                         ; sub_409880+58F↑p ...
.text:00418800
.text:00418800 Buffer          = dword ptr  4
.text:00418800 Format          = dword ptr  8
.text:00418800
.text:00418800                 jmp     ds:__imp_sprintf
.text:00418800 sprintf         endp
.text:00418800
.text:00418800 ; ---------------------------------------------------------------------------
.text:00418806                 align 10h
.text:00418810
.text:00418810 ; =============== S U B R O U T I N E =======================================
.text:00418810
.text:00418810 ; Attributes: thunk
.text:00418810
.text:00418810 ; struct lconv *__cdecl localeconv()
.text:00418810 localeconv      proc near               ; CODE XREF: sub_409880+A6↑p
.text:00418810                 jmp     ds:__imp_localeconv
.text:00418810 localeconv      endp
.text:00418810
.text:00418810 ; ---------------------------------------------------------------------------
.text:00418816                 align 10h
.text:00418820
.text:00418820 ; =============== S U B R O U T I N E =======================================
.text:00418820
.text:00418820 ; Attributes: thunk
.text:00418820
.text:00418820 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00418820 memset          proc near               ; CODE XREF: sub_40AA50+26↑p
.text:00418820
.text:00418820 Val             = dword ptr  8
.text:00418820 Size            = dword ptr  0Ch
.text:00418820
.text:00418820                 jmp     ds:__imp_memset
.text:00418820 memset          endp
.text:00418820
.text:00418820 ; ---------------------------------------------------------------------------
.text:00418826                 align 10h
.text:00418830
.text:00418830 ; =============== S U B R O U T I N E =======================================
.text:00418830
.text:00418830 ; Attributes: thunk
.text:00418830
.text:00418830 ; wchar_t *__cdecl wcscat(wchar_t *Destination, const wchar_t *Source)
.text:00418830 wcscat          proc near               ; CODE XREF: sub_40CE00+54F↑p
.text:00418830
.text:00418830 Destination     = dword ptr  4
.text:00418830 Source          = dword ptr  8
.text:00418830
.text:00418830                 jmp     ds:__imp_wcscat
.text:00418830 wcscat          endp
.text:00418830
.text:00418830 ; ---------------------------------------------------------------------------
.text:00418836                 align 10h
.text:00418840
.text:00418840 ; =============== S U B R O U T I N E =======================================
.text:00418840
.text:00418840 ; Attributes: thunk
.text:00418840
.text:00418840 ; size_t __cdecl wcslen(const wchar_t *String)
.text:00418840 wcslen          proc near               ; CODE XREF: sub_40CE00+32↑p
.text:00418840
.text:00418840 String          = dword ptr  4
.text:00418840
.text:00418840                 jmp     ds:__imp_wcslen
.text:00418840 wcslen          endp
.text:00418840
.text:00418840 ; ---------------------------------------------------------------------------
.text:00418846                 align 10h
.text:00418850
.text:00418850 ; =============== S U B R O U T I N E =======================================
.text:00418850
.text:00418850 ; Attributes: thunk
.text:00418850
.text:00418850 ; wint_t __cdecl towlower(wint_t C)
.text:00418850 towlower        proc near               ; CODE XREF: sub_40C240+3B6↑p
.text:00418850                                         ; sub_40C240+3C3↑p ...
.text:00418850
.text:00418850 C               = word ptr  4
.text:00418850
.text:00418850                 jmp     ds:__imp_towlower
.text:00418850 towlower        endp
.text:00418850
.text:00418850 ; ---------------------------------------------------------------------------
.text:00418856                 align 10h
.text:00418860
.text:00418860 ; =============== S U B R O U T I N E =======================================
.text:00418860
.text:00418860 ; Attributes: thunk
.text:00418860
.text:00418860 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:00418860 strcat          proc near               ; CODE XREF: sub_40BC50+4D1↑p
.text:00418860                                         ; sub_40F150+98↑p ...
.text:00418860
.text:00418860 Destination     = dword ptr  4
.text:00418860 Source          = dword ptr  8
.text:00418860
.text:00418860                 jmp     ds:__imp_strcat
.text:00418860 strcat          endp
.text:00418860
.text:00418860 ; ---------------------------------------------------------------------------
.text:00418866                 align 10h
.text:00418870
.text:00418870 ; =============== S U B R O U T I N E =======================================
.text:00418870
.text:00418870 ; Attributes: thunk
.text:00418870
.text:00418870 ; void *__cdecl memchr(const void *Buf, int Val, size_t MaxCount)
.text:00418870 memchr          proc near               ; CODE XREF: .text:0040B0ED↑p
.text:00418870                                         ; .text:0040B122↑p
.text:00418870
.text:00418870 Buf             = dword ptr  4
.text:00418870 Val             = dword ptr  8
.text:00418870 MaxCount        = dword ptr  0Ch
.text:00418870
.text:00418870                 jmp     ds:__imp_memchr
.text:00418870 memchr          endp
.text:00418870
.text:00418870 ; ---------------------------------------------------------------------------
.text:00418876                 align 10h
.text:00418880
.text:00418880 ; =============== S U B R O U T I N E =======================================
.text:00418880
.text:00418880 ; Attributes: thunk
.text:00418880
.text:00418880 ; int __cdecl tolower(int C)
.text:00418880 tolower         proc near               ; CODE XREF: .text:0040B246↑p
.text:00418880                                         ; .text:0040B268↑p ...
.text:00418880
.text:00418880 C               = dword ptr  4
.text:00418880
.text:00418880                 jmp     ds:__imp_tolower
.text:00418880 tolower         endp
.text:00418880
.text:00418880 ; ---------------------------------------------------------------------------
.text:00418886                 align 10h
.text:00418890
.text:00418890 ; =============== S U B R O U T I N E =======================================
.text:00418890
.text:00418890 ; Attributes: thunk
.text:00418890
.text:00418890 ; char *__cdecl strerror(int ErrorMessage)
.text:00418890 strerror        proc near               ; CODE XREF: sub_40E9E0+A5↑p
.text:00418890                                         ; sub_40EAE4+10F↑p
.text:00418890
.text:00418890 ErrorMessage    = dword ptr  4
.text:00418890
.text:00418890                 jmp     ds:__imp_strerror
.text:00418890 strerror        endp
.text:00418890
.text:00418890 ; ---------------------------------------------------------------------------
.text:00418896                 align 10h
.text:004188A0
.text:004188A0 ; =============== S U B R O U T I N E =======================================
.text:004188A0
.text:004188A0 ; Attributes: thunk
.text:004188A0
.text:004188A0 ; char *__cdecl ctime(const __time32_t *const Time)
.text:004188A0 ctime           proc near               ; CODE XREF: .text:0040EE4D↑p
.text:004188A0                                         ; .text:0040EE6F↑p ...
.text:004188A0
.text:004188A0 Time            = dword ptr  4
.text:004188A0
.text:004188A0                 jmp     ds:__imp_ctime
.text:004188A0 ctime           endp
.text:004188A0
.text:004188A0 ; ---------------------------------------------------------------------------
.text:004188A6                 align 10h
.text:004188B0
.text:004188B0 ; =============== S U B R O U T I N E =======================================
.text:004188B0
.text:004188B0 ; Attributes: thunk
.text:004188B0
.text:004188B0 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:004188B0 _get_osfhandle  proc near               ; CODE XREF: sub_40EEF0+3A↑p
.text:004188B0                                         ; sub_415530+15↑p
.text:004188B0
.text:004188B0 FileHandle      = dword ptr  4
.text:004188B0
.text:004188B0                 jmp     ds:__imp__get_osfhandle
.text:004188B0 _get_osfhandle  endp
.text:004188B0
.text:004188B0 ; ---------------------------------------------------------------------------
.text:004188B6                 align 10h
.text:004188C0
.text:004188C0 ; =============== S U B R O U T I N E =======================================
.text:004188C0
.text:004188C0 ; Attributes: thunk
.text:004188C0
.text:004188C0 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:004188C0 strcpy          proc near               ; CODE XREF: sub_40F150+73↑p
.text:004188C0                                         ; _win32_longpath+13C↑p ...
.text:004188C0
.text:004188C0 Destination     = dword ptr  4
.text:004188C0 Source          = dword ptr  8
.text:004188C0
.text:004188C0                 jmp     ds:__imp_strcpy
.text:004188C0 strcpy          endp
.text:004188C0
.text:004188C0 ; ---------------------------------------------------------------------------
.text:004188C6                 align 10h
.text:004188D0
.text:004188D0 ; =============== S U B R O U T I N E =======================================
.text:004188D0
.text:004188D0 ; Attributes: thunk
.text:004188D0
.text:004188D0 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:004188D0 strstr          proc near               ; CODE XREF: sub_40F7A0+3BF↑p
.text:004188D0                                         ; sub_40F7A0+3DC↑p ...
.text:004188D0
.text:004188D0 Str             = dword ptr  4
.text:004188D0 SubStr          = dword ptr  8
.text:004188D0
.text:004188D0                 jmp     ds:__imp_strstr
.text:004188D0 strstr          endp
.text:004188D0
.text:004188D0 ; ---------------------------------------------------------------------------
.text:004188D6                 align 10h
.text:004188E0
.text:004188E0 ; =============== S U B R O U T I N E =======================================
.text:004188E0
.text:004188E0 ; Attributes: thunk
.text:004188E0
.text:004188E0 ; int __cdecl isalpha(int C)
.text:004188E0 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:004188E0
.text:004188E0 C               = dword ptr  4
.text:004188E0
.text:004188E0                 jmp     ds:__imp_isalpha
.text:004188E0 isalpha         endp
.text:004188E0
.text:004188E0 ; ---------------------------------------------------------------------------
.text:004188E6                 align 10h
.text:004188F0
.text:004188F0 ; =============== S U B R O U T I N E =======================================
.text:004188F0
.text:004188F0 ; Attributes: thunk
.text:004188F0
.text:004188F0 ; char *__cdecl strncat(char *Destination, const char *Source, size_t Count)
.text:004188F0 strncat         proc near               ; CODE XREF: sub_4113D0+75↑p
.text:004188F0
.text:004188F0 Destination     = dword ptr  4
.text:004188F0 Source          = dword ptr  8
.text:004188F0 Count           = dword ptr  0Ch
.text:004188F0
.text:004188F0                 jmp     ds:__imp_strncat
.text:004188F0 strncat         endp
.text:004188F0
.text:004188F0 ; ---------------------------------------------------------------------------
.text:004188F6                 align 10h
.text:00418900
.text:00418900 ; =============== S U B R O U T I N E =======================================
.text:00418900
.text:00418900 ; Attributes: thunk
.text:00418900
.text:00418900 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:00418900 strncpy         proc near               ; CODE XREF: sub_4113D0+61↑p
.text:00418900                                         ; sub_4113D0+118↑p ...
.text:00418900
.text:00418900 Destination     = dword ptr  4
.text:00418900 Source          = dword ptr  8
.text:00418900 Count           = dword ptr  0Ch
.text:00418900
.text:00418900                 jmp     ds:__imp_strncpy
.text:00418900 strncpy         endp
.text:00418900
.text:00418900 ; ---------------------------------------------------------------------------
.text:00418906                 align 10h
.text:00418910
.text:00418910 ; =============== S U B R O U T I N E =======================================
.text:00418910
.text:00418910 ; Attributes: thunk
.text:00418910
.text:00418910 ; int __cdecl toupper(int C)
.text:00418910 toupper         proc near               ; CODE XREF: sub_4115C0+10E↑p
.text:00418910
.text:00418910 C               = dword ptr  4
.text:00418910
.text:00418910                 jmp     ds:__imp_toupper
.text:00418910 toupper         endp
.text:00418910
.text:00418910 ; ---------------------------------------------------------------------------
.text:00418916                 align 10h
.text:00418920
.text:00418920 ; =============== S U B R O U T I N E =======================================
.text:00418920
.text:00418920 ; Attributes: thunk
.text:00418920
.text:00418920 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:00418920 sscanf          proc near               ; CODE XREF: .text:00413BFE↑p
.text:00418920
.text:00418920 Buffer          = dword ptr  4
.text:00418920 Format          = dword ptr  8
.text:00418920
.text:00418920                 jmp     ds:__imp_sscanf
.text:00418920 sscanf          endp
.text:00418920
.text:00418920 ; ---------------------------------------------------------------------------
.text:00418926                 align 10h
.text:00418930
.text:00418930 ; =============== S U B R O U T I N E =======================================
.text:00418930
.text:00418930 ; Attributes: thunk
.text:00418930
.text:00418930 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:00418930 strspn          proc near               ; CODE XREF: .text:00413A4A↑p
.text:00418930                                         ; .text:00413C64↑p ...
.text:00418930
.text:00418930 Str             = dword ptr  4
.text:00418930 Control         = dword ptr  8
.text:00418930
.text:00418930                 jmp     ds:__imp_strspn
.text:00418930 strspn          endp
.text:00418930
.text:00418930 ; ---------------------------------------------------------------------------
.text:00418936                 align 10h
.text:00418940
.text:00418940 ; =============== S U B R O U T I N E =======================================
.text:00418940
.text:00418940 ; Attributes: thunk
.text:00418940
.text:00418940 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:00418940 _filelengthi64  proc near               ; CODE XREF: sub_415530+1F↑p
.text:00418940
.text:00418940 FileHandle      = dword ptr  4
.text:00418940
.text:00418940                 jmp     ds:__imp__filelengthi64
.text:00418940 _filelengthi64  endp
.text:00418940
.text:00418940 ; ---------------------------------------------------------------------------
.text:00418946                 align 10h
.text:00418950
.text:00418950 ; =============== S U B R O U T I N E =======================================
.text:00418950
.text:00418950 ; Attributes: thunk
.text:00418950
.text:00418950 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:00418950 strpbrk         proc near               ; CODE XREF: sub_415590+87↑p
.text:00418950
.text:00418950 Str             = dword ptr  4
.text:00418950 Control         = dword ptr  8
.text:00418950
.text:00418950                 jmp     ds:__imp_strpbrk
.text:00418950 strpbrk         endp
.text:00418950
.text:00418950 ; ---------------------------------------------------------------------------
.text:00418956                 align 10h
.text:00418960
.text:00418960 ; =============== S U B R O U T I N E =======================================
.text:00418960
.text:00418960 ; Attributes: thunk
.text:00418960
.text:00418960 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:00418960 _fdopen         proc near               ; CODE XREF: sub_415630+69↑p
.text:00418960
.text:00418960 FileHandle      = dword ptr  4
.text:00418960 Format          = dword ptr  8
.text:00418960
.text:00418960                 jmp     ds:__imp__fdopen
.text:00418960 _fdopen         endp
.text:00418960
.text:00418960 ; ---------------------------------------------------------------------------
.text:00418966                 align 10h
.text:00418970
.text:00418970 ; =============== S U B R O U T I N E =======================================
.text:00418970
.text:00418970 ; Attributes: thunk
.text:00418970
.text:00418970 ; int __cdecl close_0(int FileHandle)
.text:00418970 _close_0        proc near               ; CODE XREF: sub_415630+90↑p
.text:00418970
.text:00418970 FileHandle      = dword ptr  4
.text:00418970
.text:00418970                 jmp     ds:__imp__close_0
.text:00418970 _close_0        endp
.text:00418970
.text:00418970 ; ---------------------------------------------------------------------------
.text:00418976                 align 10h
.text:00418980
.text:00418980 ; =============== S U B R O U T I N E =======================================
.text:00418980
.text:00418980 ; Attributes: thunk
.text:00418980
.text:00418980 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:00418980 _open_0         proc near               ; CODE XREF: sub_415C00:loc_415F90↑p
.text:00418980
.text:00418980 FileName        = dword ptr  4
.text:00418980 OpenFlag        = dword ptr  8
.text:00418980
.text:00418980                 jmp     ds:__imp__open_0
.text:00418980 _open_0         endp
.text:00418980
.text:00418980 ; ---------------------------------------------------------------------------
.text:00418986                 align 10h
.text:00418990
.text:00418990 ; =============== S U B R O U T I N E =======================================
.text:00418990
.text:00418990 ; Attributes: thunk
.text:00418990
.text:00418990 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00418990 fwrite          proc near               ; CODE XREF: sub_416690+17↑p
.text:00418990
.text:00418990 Buffer          = dword ptr  4
.text:00418990 ElementSize     = dword ptr  8
.text:00418990 ElementCount    = dword ptr  0Ch
.text:00418990 Stream          = dword ptr  10h
.text:00418990
.text:00418990                 jmp     ds:__imp_fwrite
.text:00418990 fwrite          endp
.text:00418990
.text:00418990 ; ---------------------------------------------------------------------------
.text:00418996                 align 10h
.text:004189A0
.text:004189A0 ; =============== S U B R O U T I N E =======================================
.text:004189A0
.text:004189A0 ; Attributes: thunk
.text:004189A0
.text:004189A0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004189A0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004189A0
.text:004189A0 lpTopLevelExceptionFilter= dword ptr  4
.text:004189A0
.text:004189A0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004189A0 SetUnhandledExceptionFilter endp
.text:004189A0
.text:004189A0 ; ---------------------------------------------------------------------------
.text:004189A6                 align 10h
.text:004189B0
.text:004189B0 ; =============== S U B R O U T I N E =======================================
.text:004189B0
.text:004189B0 ; Attributes: noreturn thunk
.text:004189B0
.text:004189B0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:004189B0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:004189B0
.text:004189B0 uExitCode       = dword ptr  4
.text:004189B0
.text:004189B0                 jmp     ds:__imp_ExitProcess
.text:004189B0 ExitProcess     endp
.text:004189B0
.text:004189B0 ; ---------------------------------------------------------------------------
.text:004189B6                 align 10h
.text:004189C0
.text:004189C0 ; =============== S U B R O U T I N E =======================================
.text:004189C0
.text:004189C0 ; Attributes: thunk
.text:004189C0
.text:004189C0 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:004189C0 GetModuleHandleA proc near              ; CODE XREF: sub_40EFE0+18↑p
.text:004189C0                                         ; sub_40F7A0+329↑p ...
.text:004189C0
.text:004189C0 lpModuleName    = dword ptr  4
.text:004189C0
.text:004189C0                 jmp     ds:__imp_GetModuleHandleA
.text:004189C0 GetModuleHandleA endp
.text:004189C0
.text:004189C0 ; ---------------------------------------------------------------------------
.text:004189C6                 align 10h
.text:004189D0
.text:004189D0 ; =============== S U B R O U T I N E =======================================
.text:004189D0
.text:004189D0 ; Attributes: thunk
.text:004189D0
.text:004189D0 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:004189D0 GetProcAddress  proc near               ; CODE XREF: sub_40EFE0+33↑p
.text:004189D0                                         ; sub_40F150+2E↑p ...
.text:004189D0
.text:004189D0 hModule         = dword ptr  4
.text:004189D0 lpProcName      = dword ptr  8
.text:004189D0
.text:004189D0                 jmp     ds:__imp_GetProcAddress
.text:004189D0 GetProcAddress  endp
.text:004189D0
.text:004189D0 ; ---------------------------------------------------------------------------
.text:004189D6                 align 10h
.text:004189E0
.text:004189E0 ; =============== S U B R O U T I N E =======================================
.text:004189E0
.text:004189E0 ; Attributes: thunk
.text:004189E0
.text:004189E0 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:004189E0 GetFileAttributesA proc near            ; CODE XREF: sub_40EFE0+47↑p
.text:004189E0                                         ; sub_412750+65↑p ...
.text:004189E0
.text:004189E0 lpFileName      = dword ptr  4
.text:004189E0
.text:004189E0                 jmp     ds:__imp_GetFileAttributesA
.text:004189E0 GetFileAttributesA endp
.text:004189E0
.text:004189E0 ; ---------------------------------------------------------------------------
.text:004189E6                 align 10h
.text:004189F0
.text:004189F0 ; =============== S U B R O U T I N E =======================================
.text:004189F0
.text:004189F0 ; Attributes: thunk
.text:004189F0
.text:004189F0 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:004189F0 FreeLibrary     proc near               ; CODE XREF: sub_40EFE0+A4↑p
.text:004189F0                                         ; sub_40F150+11D↑p ...
.text:004189F0
.text:004189F0 hLibModule      = dword ptr  4
.text:004189F0
.text:004189F0                 jmp     ds:__imp_FreeLibrary
.text:004189F0 FreeLibrary     endp
.text:004189F0
.text:004189F0 ; ---------------------------------------------------------------------------
.text:004189F6                 align 10h
.text:00418A00
.text:00418A00 ; =============== S U B R O U T I N E =======================================
.text:00418A00
.text:00418A00 ; Attributes: thunk
.text:00418A00
.text:00418A00 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:00418A00 FindFirstFileA  proc near               ; CODE XREF: sub_40EFE0+CE↑p
.text:00418A00                                         ; sub_40F150+14F↑p ...
.text:00418A00
.text:00418A00 lpFileName      = dword ptr  4
.text:00418A00 lpFindFileData  = dword ptr  8
.text:00418A00
.text:00418A00                 jmp     ds:__imp_FindFirstFileA
.text:00418A00 FindFirstFileA  endp
.text:00418A00
.text:00418A00 ; ---------------------------------------------------------------------------
.text:00418A06                 align 10h
.text:00418A10
.text:00418A10 ; =============== S U B R O U T I N E =======================================
.text:00418A10
.text:00418A10 ; Attributes: thunk
.text:00418A10
.text:00418A10 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:00418A10 FindClose       proc near               ; CODE XREF: sub_40EFE0+123↑p
.text:00418A10                                         ; sub_40F150+10E↑p ...
.text:00418A10
.text:00418A10 hFindFile       = dword ptr  4
.text:00418A10
.text:00418A10                 jmp     ds:__imp_FindClose
.text:00418A10 FindClose       endp
.text:00418A10
.text:00418A10 ; ---------------------------------------------------------------------------
.text:00418A16                 align 10h
.text:00418A20
.text:00418A20 ; =============== S U B R O U T I N E =======================================
.text:00418A20
.text:00418A20 ; Attributes: thunk
.text:00418A20
.text:00418A20 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:00418A20 LoadLibraryA    proc near               ; CODE XREF: sub_40F150+13↑p
.text:00418A20                                         ; sub_40F7A0+134↑p ...
.text:00418A20
.text:00418A20 lpLibFileName   = dword ptr  4
.text:00418A20
.text:00418A20                 jmp     ds:__imp_LoadLibraryA
.text:00418A20 LoadLibraryA    endp
.text:00418A20
.text:00418A20 ; ---------------------------------------------------------------------------
.text:00418A26                 align 10h
.text:00418A30
.text:00418A30 ; =============== S U B R O U T I N E =======================================
.text:00418A30
.text:00418A30 ; Attributes: thunk
.text:00418A30
.text:00418A30 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:00418A30 FindNextFileA   proc near               ; CODE XREF: sub_40F150+FF↑p
.text:00418A30                                         ; sub_4113D0+36↑p
.text:00418A30
.text:00418A30 hFindFile       = dword ptr  4
.text:00418A30 lpFindFileData  = dword ptr  8
.text:00418A30
.text:00418A30                 jmp     ds:__imp_FindNextFileA
.text:00418A30 FindNextFileA   endp
.text:00418A30
.text:00418A30 ; ---------------------------------------------------------------------------
.text:00418A36                 align 10h
.text:00418A40
.text:00418A40 ; =============== S U B R O U T I N E =======================================
.text:00418A40
.text:00418A40 ; Attributes: thunk
.text:00418A40
.text:00418A40 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:00418A40 GetFileType     proc near               ; CODE XREF: sub_40F2D0+43↑p
.text:00418A40                                         ; .text:0040FF8A↑p
.text:00418A40
.text:00418A40 hFile           = dword ptr  4
.text:00418A40
.text:00418A40                 jmp     ds:__imp_GetFileType
.text:00418A40 GetFileType     endp
.text:00418A40
.text:00418A40 ; ---------------------------------------------------------------------------
.text:00418A46                 align 10h
.text:00418A50
.text:00418A50 ; =============== S U B R O U T I N E =======================================
.text:00418A50
.text:00418A50 ; Attributes: thunk
.text:00418A50
.text:00418A50 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:00418A50 GetFileInformationByHandle proc near    ; CODE XREF: sub_40F2D0+69↑p
.text:00418A50
.text:00418A50 hFile           = dword ptr  4
.text:00418A50 lpFileInformation= dword ptr  8
.text:00418A50
.text:00418A50                 jmp     ds:__imp_GetFileInformationByHandle
.text:00418A50 GetFileInformationByHandle endp
.text:00418A50
.text:00418A50 ; ---------------------------------------------------------------------------
.text:00418A56                 align 10h
.text:00418A60
.text:00418A60 ; =============== S U B R O U T I N E =======================================
.text:00418A60
.text:00418A60 ; Attributes: thunk
.text:00418A60
.text:00418A60 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:00418A60 GetFileSize     proc near               ; CODE XREF: sub_40F2D0+3F2↑p
.text:00418A60
.text:00418A60 hFile           = dword ptr  4
.text:00418A60 lpFileSizeHigh  = dword ptr  8
.text:00418A60
.text:00418A60                 jmp     ds:__imp_GetFileSize
.text:00418A60 GetFileSize     endp
.text:00418A60
.text:00418A60 ; ---------------------------------------------------------------------------
.text:00418A66                 align 10h
.text:00418A70
.text:00418A70 ; =============== S U B R O U T I N E =======================================
.text:00418A70
.text:00418A70 ; Attributes: thunk
.text:00418A70
.text:00418A70 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:00418A70 PeekNamedPipe   proc near               ; CODE XREF: sub_40F2D0+439↑p
.text:00418A70
.text:00418A70 hNamedPipe      = dword ptr  4
.text:00418A70 lpBuffer        = dword ptr  8
.text:00418A70 nBufferSize     = dword ptr  0Ch
.text:00418A70 lpBytesRead     = dword ptr  10h
.text:00418A70 lpTotalBytesAvail= dword ptr  14h
.text:00418A70 lpBytesLeftThisMessage= dword ptr  18h
.text:00418A70
.text:00418A70                 jmp     ds:__imp_PeekNamedPipe
.text:00418A70 PeekNamedPipe   endp
.text:00418A70
.text:00418A70 ; ---------------------------------------------------------------------------
.text:00418A76                 align 10h
.text:00418A80
.text:00418A80 ; =============== S U B R O U T I N E =======================================
.text:00418A80
.text:00418A80 ; Attributes: thunk
.text:00418A80
.text:00418A80 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:00418A80 GetDriveTypeA   proc near               ; CODE XREF: sub_40F7A0+4C↑p
.text:00418A80
.text:00418A80 lpRootPathName  = dword ptr  4
.text:00418A80
.text:00418A80                 jmp     ds:__imp_GetDriveTypeA
.text:00418A80 GetDriveTypeA   endp
.text:00418A80
.text:00418A80 ; ---------------------------------------------------------------------------
.text:00418A86                 align 10h
.text:00418A90
.text:00418A90 ; =============== S U B R O U T I N E =======================================
.text:00418A90
.text:00418A90 ; Attributes: thunk
.text:00418A90
.text:00418A90 ; DWORD __stdcall GetLastError()
.text:00418A90 GetLastError    proc near               ; CODE XREF: sub_40F7A0:loc_40FA29↑p
.text:00418A90                                         ; .text:loc_41056D↑p ...
.text:00418A90                 jmp     ds:__imp_GetLastError
.text:00418A90 GetLastError    endp
.text:00418A90
.text:00418A90 ; ---------------------------------------------------------------------------
.text:00418A96                 align 10h
.text:00418AA0
.text:00418AA0 ; =============== S U B R O U T I N E =======================================
.text:00418AA0
.text:00418AA0 ; Attributes: thunk
.text:00418AA0
.text:00418AA0 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:00418AA0 GetVolumeInformationA proc near         ; CODE XREF: sub_40FCA0+64↑p
.text:00418AA0                                         ; .text:0041024C↑p ...
.text:00418AA0
.text:00418AA0 lpRootPathName  = dword ptr  4
.text:00418AA0 lpVolumeNameBuffer= dword ptr  8
.text:00418AA0 nVolumeNameSize = dword ptr  0Ch
.text:00418AA0 lpVolumeSerialNumber= dword ptr  10h
.text:00418AA0 lpMaximumComponentLength= dword ptr  14h
.text:00418AA0 lpFileSystemFlags= dword ptr  18h
.text:00418AA0 lpFileSystemNameBuffer= dword ptr  1Ch
.text:00418AA0 nFileSystemNameSize= dword ptr  20h
.text:00418AA0
.text:00418AA0                 jmp     ds:__imp_GetVolumeInformationA
.text:00418AA0 GetVolumeInformationA endp
.text:00418AA0
.text:00418AA0 ; ---------------------------------------------------------------------------
.text:00418AA6                 align 10h
.text:00418AB0
.text:00418AB0 ; =============== S U B R O U T I N E =======================================
.text:00418AB0
.text:00418AB0 ; Attributes: thunk
.text:00418AB0
.text:00418AB0 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:00418AB0 CreateFileA     proc near               ; CODE XREF: sub_410B00-CA↑p
.text:00418AB0                                         ; .text:00411BE3↑p ...
.text:00418AB0
.text:00418AB0 lpFileName      = dword ptr  4
.text:00418AB0 dwDesiredAccess = dword ptr  8
.text:00418AB0 dwShareMode     = dword ptr  0Ch
.text:00418AB0 lpSecurityAttributes= dword ptr  10h
.text:00418AB0 dwCreationDisposition= dword ptr  14h
.text:00418AB0 dwFlagsAndAttributes= dword ptr  18h
.text:00418AB0 hTemplateFile   = dword ptr  1Ch
.text:00418AB0
.text:00418AB0                 jmp     ds:__imp_CreateFileA
.text:00418AB0 CreateFileA     endp
.text:00418AB0
.text:00418AB0 ; ---------------------------------------------------------------------------
.text:00418AB6                 align 10h
.text:00418AC0
.text:00418AC0 ; =============== S U B R O U T I N E =======================================
.text:00418AC0
.text:00418AC0 ; Attributes: thunk
.text:00418AC0
.text:00418AC0 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:00418AC0 CloseHandle     proc near               ; CODE XREF: sub_410B00-AF↑p
.text:00418AC0                                         ; .text:00411C59↑p ...
.text:00418AC0
.text:00418AC0 hObject         = dword ptr  4
.text:00418AC0
.text:00418AC0                 jmp     ds:__imp_CloseHandle
.text:00418AC0 CloseHandle     endp
.text:00418AC0
.text:00418AC0 ; ---------------------------------------------------------------------------
.text:00418AC6                 align 10h
.text:00418AD0
.text:00418AD0 ; =============== S U B R O U T I N E =======================================
.text:00418AD0
.text:00418AD0 ; Attributes: thunk
.text:00418AD0
.text:00418AD0 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:00418AD0 SetErrorMode    proc near               ; CODE XREF: sub_410B00-7A↑p
.text:00418AD0                                         ; sub_412D80+57↑p ...
.text:00418AD0
.text:00418AD0 uMode           = dword ptr  4
.text:00418AD0
.text:00418AD0                 jmp     ds:__imp_SetErrorMode
.text:00418AD0 SetErrorMode    endp
.text:00418AD0
.text:00418AD0 ; ---------------------------------------------------------------------------
.text:00418AD6                 align 10h
.text:00418AE0
.text:00418AE0 ; =============== S U B R O U T I N E =======================================
.text:00418AE0
.text:00418AE0 ; Attributes: thunk
.text:00418AE0
.text:00418AE0 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00418AE0 GetModuleFileNameA proc near            ; CODE XREF: sub_4110C0+1C↑p
.text:00418AE0
.text:00418AE0 hModule         = dword ptr  4
.text:00418AE0 lpFilename      = dword ptr  8
.text:00418AE0 nSize           = dword ptr  0Ch
.text:00418AE0
.text:00418AE0                 jmp     ds:__imp_GetModuleFileNameA
.text:00418AE0 GetModuleFileNameA endp
.text:00418AE0
.text:00418AE0 ; ---------------------------------------------------------------------------
.text:00418AE6                 align 10h
.text:00418AF0
.text:00418AF0 ; =============== S U B R O U T I N E =======================================
.text:00418AF0
.text:00418AF0 ; Attributes: thunk
.text:00418AF0
.text:00418AF0 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:00418AF0 GetShortPathNameA proc near             ; CODE XREF: .text:00411346↑p
.text:00418AF0                                         ; .text:00411370↑p
.text:00418AF0
.text:00418AF0 lpszLongPath    = dword ptr  4
.text:00418AF0 lpszShortPath   = dword ptr  8
.text:00418AF0 cchBuffer       = dword ptr  0Ch
.text:00418AF0
.text:00418AF0                 jmp     ds:__imp_GetShortPathNameA
.text:00418AF0 GetShortPathNameA endp
.text:00418AF0
.text:00418AF0 ; ---------------------------------------------------------------------------
.text:00418AF6                 align 10h
.text:00418B00
.text:00418B00 ; =============== S U B R O U T I N E =======================================
.text:00418B00
.text:00418B00 ; Attributes: thunk
.text:00418B00
.text:00418B00 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00418B00 GetCurrentDirectoryA proc near          ; CODE XREF: .text:00411868↑p
.text:00418B00                                         ; .text:00411884↑p ...
.text:00418B00
.text:00418B00 nBufferLength   = dword ptr  4
.text:00418B00 lpBuffer        = dword ptr  8
.text:00418B00
.text:00418B00                 jmp     ds:__imp_GetCurrentDirectoryA
.text:00418B00 GetCurrentDirectoryA endp
.text:00418B00
.text:00418B00 ; ---------------------------------------------------------------------------
.text:00418B06                 align 10h
.text:00418B10
.text:00418B10 ; =============== S U B R O U T I N E =======================================
.text:00418B10
.text:00418B10 ; Attributes: thunk
.text:00418B10
.text:00418B10 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:00418B10 DeviceIoControl proc near               ; CODE XREF: .text:00411C4C↑p
.text:00418B10                                         ; sub_412010+1E5↑p
.text:00418B10
.text:00418B10 hDevice         = dword ptr  4
.text:00418B10 dwIoControlCode = dword ptr  8
.text:00418B10 lpInBuffer      = dword ptr  0Ch
.text:00418B10 nInBufferSize   = dword ptr  10h
.text:00418B10 lpOutBuffer     = dword ptr  14h
.text:00418B10 nOutBufferSize  = dword ptr  18h
.text:00418B10 lpBytesReturned = dword ptr  1Ch
.text:00418B10 lpOverlapped    = dword ptr  20h
.text:00418B10
.text:00418B10                 jmp     ds:__imp_DeviceIoControl
.text:00418B10 DeviceIoControl endp
.text:00418B10
.text:00418B10 ; ---------------------------------------------------------------------------
.text:00418B16                 align 10h
.text:00418B20
.text:00418B20 ; =============== S U B R O U T I N E =======================================
.text:00418B20
.text:00418B20 ; Attributes: thunk
.text:00418B20
.text:00418B20 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:00418B20 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:00411FA3↑p
.text:00418B20                                         ; sub_412010+7B↑p ...
.text:00418B20
.text:00418B20 lpRootPathName  = dword ptr  4
.text:00418B20 lpSectorsPerCluster= dword ptr  8
.text:00418B20 lpBytesPerSector= dword ptr  0Ch
.text:00418B20 lpNumberOfFreeClusters= dword ptr  10h
.text:00418B20 lpTotalNumberOfClusters= dword ptr  14h
.text:00418B20
.text:00418B20                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:00418B20 GetDiskFreeSpaceA endp
.text:00418B20
.text:00418B20 ; ---------------------------------------------------------------------------
.text:00418B26                 align 10h
.text:00418B30
.text:00418B30 ; =============== S U B R O U T I N E =======================================
.text:00418B30
.text:00418B30 ; Attributes: thunk
.text:00418B30
.text:00418B30 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:00418B30 GetFullPathNameA proc near              ; CODE XREF: sub_412C50+45↑p
.text:00418B30                                         ; sub_412C50+ED↑p
.text:00418B30
.text:00418B30 lpFileName      = dword ptr  4
.text:00418B30 nBufferLength   = dword ptr  8
.text:00418B30 lpBuffer        = dword ptr  0Ch
.text:00418B30 lpFilePart      = dword ptr  10h
.text:00418B30
.text:00418B30                 jmp     ds:__imp_GetFullPathNameA
.text:00418B30 GetFullPathNameA endp
.text:00418B30
.text:00418B30 ; ---------------------------------------------------------------------------
.text:00418B36                 align 10h
.text:00418B40
.text:00418B40 ; =============== S U B R O U T I N E =======================================
.text:00418B40
.text:00418B40 ; Attributes: thunk
.text:00418B40
.text:00418B40 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:00418B40 lstrcmpiA       proc near               ; CODE XREF: .text:0041330B↑p
.text:00418B40                                         ; .text:00413322↑p ...
.text:00418B40
.text:00418B40 lpString1       = dword ptr  4
.text:00418B40 lpString2       = dword ptr  8
.text:00418B40
.text:00418B40                 jmp     ds:__imp_lstrcmpiA
.text:00418B40 lstrcmpiA       endp
.text:00418B40
.text:00418B40 ; ---------------------------------------------------------------------------
.text:00418B46                 align 10h
.text:00418B50
.text:00418B50 ; =============== S U B R O U T I N E =======================================
.text:00418B50
.text:00418B50 ; Attributes: thunk
.text:00418B50
.text:00418B50 ; DWORD __stdcall GetVersion()
.text:00418B50 GetVersion      proc near               ; CODE XREF: .text:00413693↑p
.text:00418B50                 jmp     ds:__imp_GetVersion
.text:00418B50 GetVersion      endp
.text:00418B50
.text:00418B50 ; ---------------------------------------------------------------------------
.text:00418B56                 align 10h
.text:00418B60
.text:00418B60 ; =============== S U B R O U T I N E =======================================
.text:00418B60
.text:00418B60 ; Attributes: thunk
.text:00418B60
.text:00418B60 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:00418B60 GetVersionExA   proc near               ; CODE XREF: sub_413720+32↑p
.text:00418B60                                         ; sub_413720+20B↑p
.text:00418B60
.text:00418B60 lpVersionInformation= dword ptr  4
.text:00418B60
.text:00418B60                 jmp     ds:__imp_GetVersionExA
.text:00418B60 GetVersionExA   endp
.text:00418B60
.text:00418B60 ; ---------------------------------------------------------------------------
.text:00418B66                 align 10h
.text:00418B70
.text:00418B70 ; =============== S U B R O U T I N E =======================================
.text:00418B70
.text:00418B70 ; Attributes: thunk
.text:00418B70
.text:00418B70 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00418B70 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:00413DBF↑p
.text:00418B70                                         ; .text:00413DEE↑p ...
.text:00418B70
.text:00418B70 nBufferLength   = dword ptr  4
.text:00418B70 lpBuffer        = dword ptr  8
.text:00418B70
.text:00418B70                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:00418B70 GetLogicalDriveStringsA endp
.text:00418B70
.text:00418B70 ; ---------------------------------------------------------------------------
.text:00418B76                 align 10h
.text:00418B80
.text:00418B80 ; =============== S U B R O U T I N E =======================================
.text:00418B80
.text:00418B80 ; Attributes: thunk
.text:00418B80
.text:00418B80 ; HANDLE __stdcall GetProcessHeap()
.text:00418B80 GetProcessHeap  proc near               ; CODE XREF: .text:00413DC9↑p
.text:00418B80                                         ; sub_4144A0+24↑p ...
.text:00418B80                 jmp     ds:__imp_GetProcessHeap
.text:00418B80 GetProcessHeap  endp
.text:00418B80
.text:00418B80 ; ---------------------------------------------------------------------------
.text:00418B86                 align 10h
.text:00418B90
.text:00418B90 ; =============== S U B R O U T I N E =======================================
.text:00418B90
.text:00418B90 ; Attributes: thunk
.text:00418B90
.text:00418B90 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:00418B90 HeapAlloc       proc near               ; CODE XREF: .text:00413DDD↑p
.text:00418B90                                         ; sub_4144A0+38↑p ...
.text:00418B90
.text:00418B90 hHeap           = dword ptr  4
.text:00418B90 dwFlags         = dword ptr  8
.text:00418B90 dwBytes         = dword ptr  0Ch
.text:00418B90
.text:00418B90                 jmp     ds:__imp_HeapAlloc
.text:00418B90 HeapAlloc       endp
.text:00418B90
.text:00418B90 ; ---------------------------------------------------------------------------
.text:00418B96                 align 10h
.text:00418BA0
.text:00418BA0 ; =============== S U B R O U T I N E =======================================
.text:00418BA0
.text:00418BA0 ; Attributes: thunk
.text:00418BA0
.text:00418BA0 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:00418BA0 HeapFree        proc near               ; CODE XREF: .text:004145DD↑p
.text:00418BA0
.text:00418BA0 hHeap           = dword ptr  4
.text:00418BA0 dwFlags         = dword ptr  8
.text:00418BA0 lpMem           = dword ptr  0Ch
.text:00418BA0
.text:00418BA0                 jmp     ds:__imp_HeapFree
.text:00418BA0 HeapFree        endp
.text:00418BA0
.text:00418BA0 ; ---------------------------------------------------------------------------
.text:00418BA6                 align 10h
.text:00418BB0
.text:00418BB0 ; =============== S U B R O U T I N E =======================================
.text:00418BB0
.text:00418BB0 ; Attributes: thunk
.text:00418BB0
.text:00418BB0 ; BOOL __stdcall AreFileApisANSI()
.text:00418BB0 AreFileApisANSI proc near               ; CODE XREF: sub_414680+89↑p
.text:00418BB0                 jmp     ds:__imp_AreFileApisANSI
.text:00418BB0 AreFileApisANSI endp
.text:00418BB0
.text:00418BB0 ; ---------------------------------------------------------------------------
.text:00418BB6                 align 10h
.text:00418BC0
.text:00418BC0 ; =============== S U B R O U T I N E =======================================
.text:00418BC0
.text:00418BC0 ; Attributes: thunk
.text:00418BC0
.text:00418BC0 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:00418BC0 MultiByteToWideChar proc near           ; CODE XREF: sub_414680+BD↑p
.text:00418BC0
.text:00418BC0 CodePage        = dword ptr  4
.text:00418BC0 dwFlags         = dword ptr  8
.text:00418BC0 lpMultiByteStr  = dword ptr  0Ch
.text:00418BC0 cbMultiByte     = dword ptr  10h
.text:00418BC0 lpWideCharStr   = dword ptr  14h
.text:00418BC0 cchWideChar     = dword ptr  18h
.text:00418BC0
.text:00418BC0                 jmp     ds:__imp_MultiByteToWideChar
.text:00418BC0 MultiByteToWideChar endp
.text:00418BC0
.text:00418BC0 ; ---------------------------------------------------------------------------
.text:00418BC6                 align 10h
.text:00418BD0
.text:00418BD0 ; =============== S U B R O U T I N E =======================================
.text:00418BD0
.text:00418BD0 ; Attributes: thunk
.text:00418BD0
.text:00418BD0 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:00418BD0 lstrcpyA        proc near               ; CODE XREF: sub_414680+128↑p
.text:00418BD0
.text:00418BD0 lpString1       = dword ptr  4
.text:00418BD0 lpString2       = dword ptr  8
.text:00418BD0
.text:00418BD0                 jmp     ds:__imp_lstrcpyA
.text:00418BD0 lstrcpyA        endp
.text:00418BD0
.text:00418BD0 ; ---------------------------------------------------------------------------
.text:00418BD6                 align 10h
.text:00418BE0
.text:00418BE0 ; =============== S U B R O U T I N E =======================================
.text:00418BE0
.text:00418BE0 ; Attributes: thunk
.text:00418BE0
.text:00418BE0 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00418BE0 UnlockFile      proc near               ; CODE XREF: sub_415530+40↑p
.text:00418BE0
.text:00418BE0 hFile           = dword ptr  4
.text:00418BE0 dwFileOffsetLow = dword ptr  8
.text:00418BE0 dwFileOffsetHigh= dword ptr  0Ch
.text:00418BE0 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00418BE0 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00418BE0
.text:00418BE0                 jmp     ds:__imp_UnlockFile
.text:00418BE0 UnlockFile      endp
.text:00418BE0
.text:00418BE0 ; ---------------------------------------------------------------------------
.text:00418BE6                 align 10h
.text:00418BF0
.text:00418BF0 ; =============== S U B R O U T I N E =======================================
.text:00418BF0
.text:00418BF0 ; Attributes: thunk
.text:00418BF0
.text:00418BF0 ; void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
.text:00418BF0 GetSystemInfo   proc near               ; CODE XREF: sub_4156D0+3A↑p
.text:00418BF0                                         ; sub_415720+3A↑p ...
.text:00418BF0
.text:00418BF0 lpSystemInfo    = dword ptr  4
.text:00418BF0
.text:00418BF0                 jmp     ds:__imp_GetSystemInfo
.text:00418BF0 GetSystemInfo   endp
.text:00418BF0
.text:00418BF0 ; ---------------------------------------------------------------------------
.text:00418BF6                 align 10h
.text:00418C00
.text:00418C00 ; =============== S U B R O U T I N E =======================================
.text:00418C00
.text:00418C00 ; Attributes: thunk
.text:00418C00
.text:00418C00 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:00418C00 CreateDirectoryA proc near              ; CODE XREF: sub_416030+22↑p
.text:00418C00
.text:00418C00 lpPathName      = dword ptr  4
.text:00418C00 lpSecurityAttributes= dword ptr  8
.text:00418C00
.text:00418C00                 jmp     ds:__imp_CreateDirectoryA
.text:00418C00 CreateDirectoryA endp
.text:00418C00
.text:00418C00 ; ---------------------------------------------------------------------------
.text:00418C06                 align 10h
.text:00418C10
.text:00418C10 ; =============== S U B R O U T I N E =======================================
.text:00418C10
.text:00418C10 ; Attributes: thunk
.text:00418C10
.text:00418C10 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:00418C10 GetTimeZoneInformation proc near        ; CODE XREF: sub_416130+22↑p
.text:00418C10
.text:00418C10 lpTimeZoneInformation= dword ptr  4
.text:00418C10
.text:00418C10                 jmp     ds:__imp_GetTimeZoneInformation
.text:00418C10 GetTimeZoneInformation endp
.text:00418C10
.text:00418C10 ; ---------------------------------------------------------------------------
.text:00418C16                 align 10h
.text:00418C20
.text:00418C20 ; =============== S U B R O U T I N E =======================================
.text:00418C20
.text:00418C20 ; Attributes: thunk
.text:00418C20
.text:00418C20 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:00418C20 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_416130+4F↑p
.text:00418C20
.text:00418C20 lpSystemTimeAsFileTime= dword ptr  4
.text:00418C20
.text:00418C20                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:00418C20 GetSystemTimeAsFileTime endp
.text:00418C20
.text:00418C20 ; ---------------------------------------------------------------------------
.text:00418C26                 align 10h
.text:00418C30
.text:00418C30 ; =============== S U B R O U T I N E =======================================
.text:00418C30
.text:00418C30 ; Attributes: thunk
.text:00418C30
.text:00418C30 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:00418C30 RegOpenKeyExA   proc near               ; CODE XREF: .text:00413291↑p
.text:00418C30
.text:00418C30 hKey            = dword ptr  4
.text:00418C30 lpSubKey        = dword ptr  8
.text:00418C30 ulOptions       = dword ptr  0Ch
.text:00418C30 samDesired      = dword ptr  10h
.text:00418C30 phkResult       = dword ptr  14h
.text:00418C30
.text:00418C30                 jmp     ds:__imp_RegOpenKeyExA
.text:00418C30 RegOpenKeyExA   endp
.text:00418C30
.text:00418C30 ; ---------------------------------------------------------------------------
.text:00418C36                 align 10h
.text:00418C40
.text:00418C40 ; =============== S U B R O U T I N E =======================================
.text:00418C40
.text:00418C40 ; Attributes: thunk
.text:00418C40
.text:00418C40 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:00418C40 RegQueryValueExA proc near              ; CODE XREF: .text:004132D4↑p
.text:00418C40
.text:00418C40 hKey            = dword ptr  4
.text:00418C40 lpValueName     = dword ptr  8
.text:00418C40 lpReserved      = dword ptr  0Ch
.text:00418C40 lpType          = dword ptr  10h
.text:00418C40 lpData          = dword ptr  14h
.text:00418C40 lpcbData        = dword ptr  18h
.text:00418C40
.text:00418C40                 jmp     ds:__imp_RegQueryValueExA
.text:00418C40 RegQueryValueExA endp
.text:00418C40
.text:00418C40 ; ---------------------------------------------------------------------------
.text:00418C46                 align 10h
.text:00418C50
.text:00418C50 ; =============== S U B R O U T I N E =======================================
.text:00418C50
.text:00418C50 ; Attributes: thunk
.text:00418C50
.text:00418C50 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:00418C50 RegCloseKey     proc near               ; CODE XREF: .text:004132F8↑p
.text:00418C50
.text:00418C50 hKey            = dword ptr  4
.text:00418C50
.text:00418C50                 jmp     ds:__imp_RegCloseKey
.text:00418C50 RegCloseKey     endp
.text:00418C50
.text:00418C50 ; ---------------------------------------------------------------------------
.text:00418C56                 db 2 dup(90h)
.text:00418C58                 dd 2 dup(0)
.text:00418C60                 dd 21400h, 0
.text:00418C68                 dd 0C0h, 46000000h
.text:00418C70 ; const IID rclsid
.text:00418C70 rclsid          dd 21401h               ; Data1
.text:00418C70                                         ; DATA XREF: sub_414680+4B↑o
.text:00418C70                 dw 0                    ; Data2
.text:00418C70                 dw 0                    ; Data3
.text:00418C70                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00418C80                 dd 214A0h, 0
.text:00418C88                 dd 0C0h, 46000000h, 214A1h, 0
.text:00418C98                 dd 0C0h, 46000000h, 214D0h, 0
.text:00418CA8                 dd 0C0h, 46000000h, 214D1h, 0
.text:00418CB8                 dd 0C0h, 46000000h, 214D2h, 0
.text:00418CC8                 dd 0C0h, 46000000h, 214E1h, 0
.text:00418CD8                 dd 0C0h, 46000000h, 214E2h, 0
.text:00418CE8                 dd 0C0h, 46000000h, 214E3h, 0
.text:00418CF8                 dd 0C0h, 46000000h, 214E4h, 0
.text:00418D08                 dd 0C0h, 46000000h, 21500h, 0
.text:00418D18                 dd 0C0h, 46000000h, 214E5h, 0
.text:00418D28                 dd 0C0h, 46000000h, 214E6h, 0
.text:00418D38                 dd 0C0h, 46000000h, 214E8h, 0
.text:00418D48                 dd 0C0h, 46000000h, 214E9h, 0
.text:00418D58                 dd 0C0h, 46000000h, 214EAh, 0
.text:00418D68                 dd 0C0h, 46000000h, 214EBh, 0
.text:00418D78                 dd 0C0h, 46000000h
.text:00418D80 ; const IID riid
.text:00418D80 riid            dd 214EEh               ; Data1
.text:00418D80                                         ; DATA XREF: sub_414680+2B↑o
.text:00418D80                 dw 0                    ; Data2
.text:00418D80                 dw 0                    ; Data3
.text:00418D80                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00418D90                 dd 214EFh, 0
.text:00418D98                 dd 0C0h, 46000000h, 214F0h, 0
.text:00418DA8                 dd 0C0h, 46000000h, 214F1h, 0
.text:00418DB8                 dd 0C0h, 46000000h, 214F2h, 0
.text:00418DC8                 dd 0C0h, 46000000h, 214F3h, 0
.text:00418DD8                 dd 0C0h, 46000000h, 214F4h, 0
.text:00418DE8                 dd 0C0h, 46000000h, 214F5h, 0
.text:00418DF8                 dd 0C0h, 46000000h, 214F6h, 0
.text:00418E08                 dd 0C0h, 46000000h, 214F7h, 0
.text:00418E18                 dd 0C0h, 46000000h, 214F8h, 0
.text:00418E28                 dd 0C0h, 46000000h, 214F9h, 0
.text:00418E38                 dd 0C0h, 46000000h, 214FAh, 0
.text:00418E48                 dd 0C0h, 46000000h, 214FBh, 0
.text:00418E58                 dd 0C0h, 46000000h, 214FCh, 0
.text:00418E68                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:00418E68                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:00418E68                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:00418E68                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:00418E68                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00418E68                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:00418E68                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:00418E68                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00418E68                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:00418E68                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:00418F38                 dd 0C0h, 46000000h, 2DF05h, 0
.text:00418F48                 dd 0C0h, 46000000h, 2DF06h, 0
.text:00418F58                 dd 0C0h, 46000000h, 2DF01h, 0
.text:00418F68                 dd 0C0h, 46000000h, 2DF09h, 0
.text:00418F78                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:00418F78                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:00418F78                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:00418F78                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:00418F78                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:00418F78                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:00418F78                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:00419000 dword_419000    dd 0FFFFFFFFh           ; DATA XREF: .text:00417C19↑r
.text:00419000                                         ; .text:loc_417C40↑r ...
.text:00419004 dword_419004    dd 0                    ; DATA XREF: .text:loc_417C4C↑r
.text:00419004                                         ; sub_417C70:loc_417CBD↑r
.text:00419008                 dd 0FFFFFFFFh
.text:0041900C dword_41900C    dd 7Dh dup(0)           ; DATA XREF: .data:off_41A0F4↓o
.text:00419200                 dd 380h dup(?)
.text:00419200 _text           ends
.text:00419200
.data:0041A000 ; Section 2. (virtual address 0001A000)
.data:0041A000 ; Virtual size                  : 00000110 (    272.)
.data:0041A000 ; Section size in file          : 00000200 (    512.)
.data:0041A000 ; Offset to raw data for section: 00018600
.data:0041A000 ; Flags C0000040: Data Readable Writable
.data:0041A000 ; Alignment     : default
.data:0041A000 ; ===========================================================================
.data:0041A000
.data:0041A000 ; Segment type: Pure data
.data:0041A000 ; Segment permissions: Read/Write
.data:0041A000 _data           segment para public 'DATA' use32
.data:0041A000                 assume cs:_data
.data:0041A000                 ;org 41A000h
.data:0041A000 dword_41A000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:0041A000                                         ; sub_401080+CC↑r
.data:0041A004 dword_41A004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:0041A004                                         ; sub_401080+D4↑r
.data:0041A008                 align 10h
.data:0041A010 ; char dword_41A010[]
.data:0041A010 dword_41A010    dd 0FFFFFFFFh           ; DATA XREF: sub_402250+59A↑w
.data:0041A010                                         ; sub_402250+65B↑r ...
.data:0041A014                 align 10h
.data:0041A020 dword_41A020    dd 1                    ; DATA XREF: sub_406250+22↑r
.data:0041A020                                         ; sub_406250+65↑r ...
.data:0041A024 dword_41A024    dd 100h                 ; DATA XREF: sub_406250+3F↑o
.data:0041A024                                         ; sub_406250+1A2↑r ...
.data:0041A028 off_41A028      dd offset unk_41B0F0    ; DATA XREF: sub_406250+1AA↑r
.data:0041A02C ; void *off_41A02C
.data:0041A02C off_41A02C      dd offset dword_41A024  ; DATA XREF: sub_406250+39↑r
.data:0041A02C                                         ; sub_406250+60↑w ...
.data:0041A030 dword_41A030    dd 1                    ; DATA XREF: sub_402250+6A8↑r
.data:0041A030                                         ; sub_402250:loc_402BFC↑r ...
.data:0041A034 dword_41A034    dd 1                    ; DATA XREF: sub_4072D0+11↑r
.data:0041A034                                         ; .text:00407371↑r
.data:0041A038 dword_41A038    dd 3Fh                  ; DATA XREF: sub_4072D0+7D↑w
.data:0041A038                                         ; .text:004073DD↑w
.data:0041A03C                 align 10h
.data:0041A040 ; char *Buffer
.data:0041A040 Buffer          dd offset aCopyrightC2005
.data:0041A040                                         ; DATA XREF: sub_408A30+DC↑r
.data:0041A040                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:0041A044                 align 10h
.data:0041A050 ; int dword_41A050
.data:0041A050 dword_41A050    dd 1                    ; DATA XREF: sub_40A4B0+87↑r
.data:0041A050                                         ; sub_40A830+6D↑r ...
.data:0041A054                 align 10h
.data:0041A060                 dd offset sub_40E970
.data:0041A064                 align 10h
.data:0041A070 dword_41A070    dd 200h                 ; DATA XREF: sub_40F2D0+2ED↑r
.data:0041A070                                         ; sub_40F2D0+2F8↑r ...
.data:0041A074 ; char *off_41A074
.data:0041A074 off_41A074      dd offset aComExeBatCmd ; DATA XREF: sub_40F7A0+3D3↑r
.data:0041A074                                         ; sub_40F7A0+400↑r ...
.data:0041A074                                         ; ".com;.exe;.bat;.cmd"
.data:0041A078                 align 10h
.data:0041A080 byte_41A080     db 41h                  ; DATA XREF: sub_4116E0+6B↑w
.data:0041A080                                         ; sub_4116E0:loc_4117F4↑r
.data:0041A081                 align 10h
.data:0041A090 dword_41A090    dd 1                    ; DATA XREF: .text:loc_413147↑r
.data:0041A090                                         ; sub_413720+202↑w
.data:0041A094                 align 10h
.data:0041A0A0 off_41A0A0      dd offset aNotset       ; DATA XREF: .text:0041399A↑r
.data:0041A0A0                                         ; .text:004145E2↑r
.data:0041A0A0                                         ; "notset"
.data:0041A0A4 off_41A0A4      dd offset aNotset       ; DATA XREF: .text:004139B2↑r
.data:0041A0A4                                         ; .text:004139D4↑r ...
.data:0041A0A4                                         ; "notset"
.data:0041A0A8                 align 10h
.data:0041A0B0 off_41A0B0      dd offset sub_416690    ; DATA XREF: sub_4162B0:loc_416330↑r
.data:0041A0B0                                         ; .text:loc_4163D0↑r ...
.data:0041A0B4 ; int Code
.data:0041A0B4 Code            dd 1                    ; DATA XREF: sub_416690+1C↑r
.data:0041A0B8                 align 10h
.data:0041A0C0 dword_41A0C0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:0041A0C4                 align 10h
.data:0041A0D0 ; int Mode
.data:0041A0D0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:0041A0D0                                         ; sub_401080+80↑r ...
.data:0041A0D4                 align 10h
.data:0041A0E0 dword_41A0E0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:0041A0E0                                         ; sub_401080+BA↑r
.data:0041A0E4                 align 10h
.data:0041A0F0 dword_41A0F0    dd 0                    ; DATA XREF: sub_417C70+9↑r
.data:0041A0F0                                         ; sub_417C70+1D↑w
.data:0041A0F4 off_41A0F4      dd offset dword_41900C  ; DATA XREF: sub_417BE0+6↑r
.data:0041A0F4                                         ; sub_417BE0+17↑r ...
.data:0041A0F8                 align 1000h
.data:0041A0F8 _data           ends
.data:0041A0F8
.bss:0041B000 ; Section 3. (virtual address 0001B000)
.bss:0041B000 ; Virtual size                  : 000006D0 (   1744.)
.bss:0041B000 ; Section size in file          : 00000000 (      0.)
.bss:0041B000 ; Offset to raw data for section: 00000000
.bss:0041B000 ; Flags C0000080: Bss Readable Writable
.bss:0041B000 ; Alignment     : default
.bss:0041B000 ; ===========================================================================
.bss:0041B000
.bss:0041B000 ; Segment type: Uninitialized
.bss:0041B000 ; Segment permissions: Read/Write
.bss:0041B000 _bss            segment para public 'BSS' use32
.bss:0041B000                 assume cs:_bss
.bss:0041B000                 ;org 41B000h
.bss:0041B000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0041B000 byte_41B000     db ?                    ; DATA XREF: sub_402250+3B5↑w
.bss:0041B000                                         ; sub_402250+645↑r ...
.bss:0041B001                 align 10h
.bss:0041B010 byte_41B010     db ?                    ; DATA XREF: sub_402250+520↑w
.bss:0041B010                                         ; sub_402250:loc_402870↑w ...
.bss:0041B011                 align 10h
.bss:0041B020 byte_41B020     db ?                    ; DATA XREF: sub_402250:loc_40272D↑w
.bss:0041B020                                         ; sub_403100+77↑r
.bss:0041B021                 align 10h
.bss:0041B030 byte_41B030     db ?                    ; DATA XREF: sub_402250:loc_4025B8↑w
.bss:0041B030                                         ; sub_402F10+AF↑r ...
.bss:0041B031                 align 10h
.bss:0041B040 byte_41B040     db ?                    ; DATA XREF: sub_402250:loc_402705↑w
.bss:0041B040                                         ; sub_402F10:loc_402F2F↑r
.bss:0041B041                 align 10h
.bss:0041B050 byte_41B050     db ?                    ; DATA XREF: sub_402250:loc_402681↑w
.bss:0041B050                                         ; sub_403100:loc_40322F↑r ...
.bss:0041B051                 align 10h
.bss:0041B060 ; int dword_41B060
.bss:0041B060 dword_41B060    dd ?                    ; DATA XREF: sub_402F10+3E↑r
.bss:0041B060                                         ; sub_403100+17E↑w
.bss:0041B064 ; int dword_41B064
.bss:0041B064 dword_41B064    dd ?                    ; DATA XREF: sub_402F10+44↑r
.bss:0041B064                                         ; sub_403100+184↑w
.bss:0041B068                 align 10h
.bss:0041B070 dword_41B070    dd ?                    ; DATA XREF: sub_403100+DC↑r
.bss:0041B070                                         ; sub_403100+145↑w ...
.bss:0041B074                 align 10h
.bss:0041B080 ; size_t dword_41B080
.bss:0041B080 dword_41B080    dd ?                    ; DATA XREF: sub_403100+CA↑r
.bss:0041B080                                         ; sub_403100+36E↑w ...
.bss:0041B084                 align 10h
.bss:0041B090 ; void *dword_41B090
.bss:0041B090 dword_41B090    dd ?                    ; DATA XREF: sub_403100+102↑r
.bss:0041B090                                         ; sub_403100:loc_403260↑r ...
.bss:0041B094                 align 10h
.bss:0041B0A0 ; void *dword_41B0A0
.bss:0041B0A0 dword_41B0A0    dd ?                    ; DATA XREF: sub_403100+108↑r
.bss:0041B0A0                                         ; sub_403100+34A↑r ...
.bss:0041B0A4                 align 10h
.bss:0041B0B0 ; void *dword_41B0B0
.bss:0041B0B0 dword_41B0B0    dd ?                    ; DATA XREF: sub_402250+771↑w
.bss:0041B0B0                                         ; sub_402250:loc_402AE0↑r ...
.bss:0041B0B4                 align 10h
.bss:0041B0C0 ; int dword_41B0C0
.bss:0041B0C0 dword_41B0C0    dd ?                    ; DATA XREF: sub_402250+CF↑w
.bss:0041B0C0                                         ; sub_402250:loc_4026B7↑w ...
.bss:0041B0C4                 align 10h
.bss:0041B0D0 ; int dword_41B0D0
.bss:0041B0D0 dword_41B0D0    dd ?                    ; DATA XREF: sub_402250+B7↑o
.bss:0041B0D0                                         ; sub_402250:loc_40259E↑o ...
.bss:0041B0D4 ; int dword_41B0D4
.bss:0041B0D4 dword_41B0D4    dd ?                    ; DATA XREF: sub_402250+47D↑w
.bss:0041B0D4                                         ; sub_402F10+53↑r ...
.bss:0041B0D8                 align 10h
.bss:0041B0E0 ; int dword_41B0E0
.bss:0041B0E0 dword_41B0E0    dd ?                    ; DATA XREF: sub_402250+A6↑w
.bss:0041B0E0                                         ; sub_402250+3CF↑r ...
.bss:0041B0E4                 align 10h
.bss:0041B0F0 unk_41B0F0      db    ? ;               ; DATA XREF: sub_406250+100↑o
.bss:0041B0F0                                         ; .data:off_41A028↑o
.bss:0041B0F1                 db    ? ;
.bss:0041B0F2                 db    ? ;
.bss:0041B0F3                 db    ? ;
.bss:0041B0F4                 db    ? ;
.bss:0041B0F5                 db    ? ;
.bss:0041B0F6                 db    ? ;
.bss:0041B0F7                 db    ? ;
.bss:0041B0F8                 db    ? ;
.bss:0041B0F9                 db    ? ;
.bss:0041B0FA                 db    ? ;
.bss:0041B0FB                 db    ? ;
.bss:0041B0FC                 db    ? ;
.bss:0041B0FD                 db    ? ;
.bss:0041B0FE                 db    ? ;
.bss:0041B0FF                 db    ? ;
.bss:0041B100                 db    ? ;
.bss:0041B101                 db    ? ;
.bss:0041B102                 db    ? ;
.bss:0041B103                 db    ? ;
.bss:0041B104                 db    ? ;
.bss:0041B105                 db    ? ;
.bss:0041B106                 db    ? ;
.bss:0041B107                 db    ? ;
.bss:0041B108                 db    ? ;
.bss:0041B109                 db    ? ;
.bss:0041B10A                 db    ? ;
.bss:0041B10B                 db    ? ;
.bss:0041B10C                 db    ? ;
.bss:0041B10D                 db    ? ;
.bss:0041B10E                 db    ? ;
.bss:0041B10F                 db    ? ;
.bss:0041B110                 db    ? ;
.bss:0041B111                 db    ? ;
.bss:0041B112                 db    ? ;
.bss:0041B113                 db    ? ;
.bss:0041B114                 db    ? ;
.bss:0041B115                 db    ? ;
.bss:0041B116                 db    ? ;
.bss:0041B117                 db    ? ;
.bss:0041B118                 db    ? ;
.bss:0041B119                 db    ? ;
.bss:0041B11A                 db    ? ;
.bss:0041B11B                 db    ? ;
.bss:0041B11C                 db    ? ;
.bss:0041B11D                 db    ? ;
.bss:0041B11E                 db    ? ;
.bss:0041B11F                 db    ? ;
.bss:0041B120                 db    ? ;
.bss:0041B121                 db    ? ;
.bss:0041B122                 db    ? ;
.bss:0041B123                 db    ? ;
.bss:0041B124                 db    ? ;
.bss:0041B125                 db    ? ;
.bss:0041B126                 db    ? ;
.bss:0041B127                 db    ? ;
.bss:0041B128                 db    ? ;
.bss:0041B129                 db    ? ;
.bss:0041B12A                 db    ? ;
.bss:0041B12B                 db    ? ;
.bss:0041B12C                 db    ? ;
.bss:0041B12D                 db    ? ;
.bss:0041B12E                 db    ? ;
.bss:0041B12F                 db    ? ;
.bss:0041B130                 db    ? ;
.bss:0041B131                 db    ? ;
.bss:0041B132                 db    ? ;
.bss:0041B133                 db    ? ;
.bss:0041B134                 db    ? ;
.bss:0041B135                 db    ? ;
.bss:0041B136                 db    ? ;
.bss:0041B137                 db    ? ;
.bss:0041B138                 db    ? ;
.bss:0041B139                 db    ? ;
.bss:0041B13A                 db    ? ;
.bss:0041B13B                 db    ? ;
.bss:0041B13C                 db    ? ;
.bss:0041B13D                 db    ? ;
.bss:0041B13E                 db    ? ;
.bss:0041B13F                 db    ? ;
.bss:0041B140                 db    ? ;
.bss:0041B141                 db    ? ;
.bss:0041B142                 db    ? ;
.bss:0041B143                 db    ? ;
.bss:0041B144                 db    ? ;
.bss:0041B145                 db    ? ;
.bss:0041B146                 db    ? ;
.bss:0041B147                 db    ? ;
.bss:0041B148                 db    ? ;
.bss:0041B149                 db    ? ;
.bss:0041B14A                 db    ? ;
.bss:0041B14B                 db    ? ;
.bss:0041B14C                 db    ? ;
.bss:0041B14D                 db    ? ;
.bss:0041B14E                 db    ? ;
.bss:0041B14F                 db    ? ;
.bss:0041B150                 db    ? ;
.bss:0041B151                 db    ? ;
.bss:0041B152                 db    ? ;
.bss:0041B153                 db    ? ;
.bss:0041B154                 db    ? ;
.bss:0041B155                 db    ? ;
.bss:0041B156                 db    ? ;
.bss:0041B157                 db    ? ;
.bss:0041B158                 db    ? ;
.bss:0041B159                 db    ? ;
.bss:0041B15A                 db    ? ;
.bss:0041B15B                 db    ? ;
.bss:0041B15C                 db    ? ;
.bss:0041B15D                 db    ? ;
.bss:0041B15E                 db    ? ;
.bss:0041B15F                 db    ? ;
.bss:0041B160                 db    ? ;
.bss:0041B161                 db    ? ;
.bss:0041B162                 db    ? ;
.bss:0041B163                 db    ? ;
.bss:0041B164                 db    ? ;
.bss:0041B165                 db    ? ;
.bss:0041B166                 db    ? ;
.bss:0041B167                 db    ? ;
.bss:0041B168                 db    ? ;
.bss:0041B169                 db    ? ;
.bss:0041B16A                 db    ? ;
.bss:0041B16B                 db    ? ;
.bss:0041B16C                 db    ? ;
.bss:0041B16D                 db    ? ;
.bss:0041B16E                 db    ? ;
.bss:0041B16F                 db    ? ;
.bss:0041B170                 db    ? ;
.bss:0041B171                 db    ? ;
.bss:0041B172                 db    ? ;
.bss:0041B173                 db    ? ;
.bss:0041B174                 db    ? ;
.bss:0041B175                 db    ? ;
.bss:0041B176                 db    ? ;
.bss:0041B177                 db    ? ;
.bss:0041B178                 db    ? ;
.bss:0041B179                 db    ? ;
.bss:0041B17A                 db    ? ;
.bss:0041B17B                 db    ? ;
.bss:0041B17C                 db    ? ;
.bss:0041B17D                 db    ? ;
.bss:0041B17E                 db    ? ;
.bss:0041B17F                 db    ? ;
.bss:0041B180                 db    ? ;
.bss:0041B181                 db    ? ;
.bss:0041B182                 db    ? ;
.bss:0041B183                 db    ? ;
.bss:0041B184                 db    ? ;
.bss:0041B185                 db    ? ;
.bss:0041B186                 db    ? ;
.bss:0041B187                 db    ? ;
.bss:0041B188                 db    ? ;
.bss:0041B189                 db    ? ;
.bss:0041B18A                 db    ? ;
.bss:0041B18B                 db    ? ;
.bss:0041B18C                 db    ? ;
.bss:0041B18D                 db    ? ;
.bss:0041B18E                 db    ? ;
.bss:0041B18F                 db    ? ;
.bss:0041B190                 db    ? ;
.bss:0041B191                 db    ? ;
.bss:0041B192                 db    ? ;
.bss:0041B193                 db    ? ;
.bss:0041B194                 db    ? ;
.bss:0041B195                 db    ? ;
.bss:0041B196                 db    ? ;
.bss:0041B197                 db    ? ;
.bss:0041B198                 db    ? ;
.bss:0041B199                 db    ? ;
.bss:0041B19A                 db    ? ;
.bss:0041B19B                 db    ? ;
.bss:0041B19C                 db    ? ;
.bss:0041B19D                 db    ? ;
.bss:0041B19E                 db    ? ;
.bss:0041B19F                 db    ? ;
.bss:0041B1A0                 db    ? ;
.bss:0041B1A1                 db    ? ;
.bss:0041B1A2                 db    ? ;
.bss:0041B1A3                 db    ? ;
.bss:0041B1A4                 db    ? ;
.bss:0041B1A5                 db    ? ;
.bss:0041B1A6                 db    ? ;
.bss:0041B1A7                 db    ? ;
.bss:0041B1A8                 db    ? ;
.bss:0041B1A9                 db    ? ;
.bss:0041B1AA                 db    ? ;
.bss:0041B1AB                 db    ? ;
.bss:0041B1AC                 db    ? ;
.bss:0041B1AD                 db    ? ;
.bss:0041B1AE                 db    ? ;
.bss:0041B1AF                 db    ? ;
.bss:0041B1B0                 db    ? ;
.bss:0041B1B1                 db    ? ;
.bss:0041B1B2                 db    ? ;
.bss:0041B1B3                 db    ? ;
.bss:0041B1B4                 db    ? ;
.bss:0041B1B5                 db    ? ;
.bss:0041B1B6                 db    ? ;
.bss:0041B1B7                 db    ? ;
.bss:0041B1B8                 db    ? ;
.bss:0041B1B9                 db    ? ;
.bss:0041B1BA                 db    ? ;
.bss:0041B1BB                 db    ? ;
.bss:0041B1BC                 db    ? ;
.bss:0041B1BD                 db    ? ;
.bss:0041B1BE                 db    ? ;
.bss:0041B1BF                 db    ? ;
.bss:0041B1C0                 db    ? ;
.bss:0041B1C1                 db    ? ;
.bss:0041B1C2                 db    ? ;
.bss:0041B1C3                 db    ? ;
.bss:0041B1C4                 db    ? ;
.bss:0041B1C5                 db    ? ;
.bss:0041B1C6                 db    ? ;
.bss:0041B1C7                 db    ? ;
.bss:0041B1C8                 db    ? ;
.bss:0041B1C9                 db    ? ;
.bss:0041B1CA                 db    ? ;
.bss:0041B1CB                 db    ? ;
.bss:0041B1CC                 db    ? ;
.bss:0041B1CD                 db    ? ;
.bss:0041B1CE                 db    ? ;
.bss:0041B1CF                 db    ? ;
.bss:0041B1D0                 db    ? ;
.bss:0041B1D1                 db    ? ;
.bss:0041B1D2                 db    ? ;
.bss:0041B1D3                 db    ? ;
.bss:0041B1D4                 db    ? ;
.bss:0041B1D5                 db    ? ;
.bss:0041B1D6                 db    ? ;
.bss:0041B1D7                 db    ? ;
.bss:0041B1D8                 db    ? ;
.bss:0041B1D9                 db    ? ;
.bss:0041B1DA                 db    ? ;
.bss:0041B1DB                 db    ? ;
.bss:0041B1DC                 db    ? ;
.bss:0041B1DD                 db    ? ;
.bss:0041B1DE                 db    ? ;
.bss:0041B1DF                 db    ? ;
.bss:0041B1E0                 db    ? ;
.bss:0041B1E1                 db    ? ;
.bss:0041B1E2                 db    ? ;
.bss:0041B1E3                 db    ? ;
.bss:0041B1E4                 db    ? ;
.bss:0041B1E5                 db    ? ;
.bss:0041B1E6                 db    ? ;
.bss:0041B1E7                 db    ? ;
.bss:0041B1E8                 db    ? ;
.bss:0041B1E9                 db    ? ;
.bss:0041B1EA                 db    ? ;
.bss:0041B1EB                 db    ? ;
.bss:0041B1EC                 db    ? ;
.bss:0041B1ED                 db    ? ;
.bss:0041B1EE                 db    ? ;
.bss:0041B1EF                 db    ? ;
.bss:0041B1F0 dword_41B1F0    dd ?                    ; DATA XREF: .text:loc_405BE1↑o
.bss:0041B1F0                                         ; .text:loc_405C00↑o ...
.bss:0041B1F4 dword_41B1F4    dd ?                    ; DATA XREF: .text:loc_405C80↑o
.bss:0041B1F4                                         ; .text:00406108↑r ...
.bss:0041B1F8 dword_41B1F8    dd ?                    ; DATA XREF: .text:00406102↑r
.bss:0041B1F8                                         ; sub_4061B0+2C↑r
.bss:0041B1FC dword_41B1FC    dd ?                    ; DATA XREF: .text:004060F6↑r
.bss:0041B1FC                                         ; sub_4061B0+22↑r
.bss:0041B200 dword_41B200    dd ?                    ; DATA XREF: .text:00406112↑r
.bss:0041B200                                         ; sub_4061B0+36↑r
.bss:0041B204 dword_41B204    dd ?                    ; DATA XREF: .text:00406122↑r
.bss:0041B204                                         ; sub_4061B0+4E↑r
.bss:0041B208 dword_41B208    dd ?                    ; DATA XREF: .text:0040613F↑r
.bss:0041B208                                         ; sub_4061B0+62↑r
.bss:0041B20C dword_41B20C    dd ?                    ; DATA XREF: .text:00406135↑r
.bss:0041B20C                                         ; sub_4061B0+70↑r
.bss:0041B210 dword_41B210    dd ?                    ; DATA XREF: .text:00406118↑r
.bss:0041B210                                         ; sub_4061B0+7A↑r
.bss:0041B214                 align 10h
.bss:0041B220 dword_41B220    dd ?                    ; DATA XREF: sub_4072D0+9↑o
.bss:0041B220                                         ; sub_4072D0+17↑w ...
.bss:0041B224 dword_41B224    dd ?                    ; DATA XREF: sub_4072D0+21↑w
.bss:0041B224                                         ; .text:00407389↑w
.bss:0041B228 dword_41B228    dd ?                    ; DATA XREF: sub_4072D0+77↑r
.bss:0041B228                                         ; .text:004073D7↑r
.bss:0041B22C dword_41B22C    dd ?                    ; DATA XREF: sub_4072D0+6B↑r
.bss:0041B22C                                         ; .text:004073CB↑r
.bss:0041B230                 db    ? ;
.bss:0041B231                 db    ? ;
.bss:0041B232                 db    ? ;
.bss:0041B233                 db    ? ;
.bss:0041B234                 db    ? ;
.bss:0041B235                 db    ? ;
.bss:0041B236                 db    ? ;
.bss:0041B237                 db    ? ;
.bss:0041B238                 db    ? ;
.bss:0041B239                 db    ? ;
.bss:0041B23A                 db    ? ;
.bss:0041B23B                 db    ? ;
.bss:0041B23C                 db    ? ;
.bss:0041B23D                 db    ? ;
.bss:0041B23E                 db    ? ;
.bss:0041B23F                 db    ? ;
.bss:0041B240                 db    ? ;
.bss:0041B241                 db    ? ;
.bss:0041B242                 db    ? ;
.bss:0041B243                 db    ? ;
.bss:0041B244                 db    ? ;
.bss:0041B245                 db    ? ;
.bss:0041B246                 db    ? ;
.bss:0041B247                 db    ? ;
.bss:0041B248                 db    ? ;
.bss:0041B249                 db    ? ;
.bss:0041B24A                 db    ? ;
.bss:0041B24B                 db    ? ;
.bss:0041B24C                 db    ? ;
.bss:0041B24D                 db    ? ;
.bss:0041B24E                 db    ? ;
.bss:0041B24F                 db    ? ;
.bss:0041B250 ; char *dword_41B250
.bss:0041B250 dword_41B250    dd ?                    ; DATA XREF: .text:0040A804↑w
.bss:0041B250                                         ; sub_40A830+58↑r
.bss:0041B254                 align 10h
.bss:0041B260 dword_41B260    dd ?                    ; DATA XREF: .text:loc_40B550↑r
.bss:0041B260                                         ; .text:0040B596↑r ...
.bss:0041B264                 align 10h
.bss:0041B270 ; char *Str1
.bss:0041B270 Str1            dd ?                    ; DATA XREF: sub_40EAE4:loc_40EB1D↑w
.bss:0041B270                                         ; sub_40EAE4:loc_40EC50↑r
.bss:0041B274                 align 10h
.bss:0041B280 dword_41B280    dd ?                    ; DATA XREF: sub_40EAE4+2D↑r
.bss:0041B280                                         ; sub_40EAE4+3F↑w
.bss:0041B284                 align 10h
.bss:0041B290 dword_41B290    dd ?                    ; DATA XREF: sub_40F7A0+100↑r
.bss:0041B290                                         ; sub_40F7A0+308↑w
.bss:0041B294                 align 10h
.bss:0041B2A0 ; char *Str
.bss:0041B2A0 Str             dd ?                    ; DATA XREF: sub_40F7A0:loc_40FB04↑r
.bss:0041B2A0                                         ; sub_40F7A0+3B6↑r ...
.bss:0041B2A4                 align 10h
.bss:0041B2B0 dword_41B2B0    dd ?                    ; DATA XREF: sub_4116E0+1C↑r
.bss:0041B2B0                                         ; sub_4116E0+104↑w
.bss:0041B2B4                 align 10h
.bss:0041B2C0 dword_41B2C0    dd ?                    ; DATA XREF: sub_4116E0+B↑r
.bss:0041B2C0                                         ; sub_4116E0+71↑w
.bss:0041B2C4                 align 10h
.bss:0041B2D0 dword_41B2D0    dd ?                    ; DATA XREF: sub_4116E0+85↑r
.bss:0041B2D0                                         ; sub_4116E0+B9↑w
.bss:0041B2D4 dword_41B2D4    dd ?                    ; DATA XREF: sub_4116E0+C4↑w
.bss:0041B2D8 dword_41B2D8    dd ?                    ; DATA XREF: sub_4116E0+2E↑o
.bss:0041B2D8                                         ; sub_4116E0+CF↑w
.bss:0041B2DC dword_41B2DC    dd ?                    ; DATA XREF: sub_4116E0+DA↑w
.bss:0041B2E0                 db    ? ;
.bss:0041B2E1                 db    ? ;
.bss:0041B2E2                 db    ? ;
.bss:0041B2E3                 db    ? ;
.bss:0041B2E4                 db    ? ;
.bss:0041B2E5                 db    ? ;
.bss:0041B2E6                 db    ? ;
.bss:0041B2E7                 db    ? ;
.bss:0041B2E8                 db    ? ;
.bss:0041B2E9                 db    ? ;
.bss:0041B2EA                 db    ? ;
.bss:0041B2EB                 db    ? ;
.bss:0041B2EC                 db    ? ;
.bss:0041B2ED                 db    ? ;
.bss:0041B2EE                 db    ? ;
.bss:0041B2EF                 db    ? ;
.bss:0041B2F0                 db    ? ;
.bss:0041B2F1                 db    ? ;
.bss:0041B2F2                 db    ? ;
.bss:0041B2F3                 db    ? ;
.bss:0041B2F4                 db    ? ;
.bss:0041B2F5                 db    ? ;
.bss:0041B2F6                 db    ? ;
.bss:0041B2F7                 db    ? ;
.bss:0041B2F8                 db    ? ;
.bss:0041B2F9                 db    ? ;
.bss:0041B2FA                 db    ? ;
.bss:0041B2FB                 db    ? ;
.bss:0041B2FC                 db    ? ;
.bss:0041B2FD                 db    ? ;
.bss:0041B2FE                 db    ? ;
.bss:0041B2FF                 db    ? ;
.bss:0041B300                 db    ? ;
.bss:0041B301                 db    ? ;
.bss:0041B302                 db    ? ;
.bss:0041B303                 db    ? ;
.bss:0041B304                 db    ? ;
.bss:0041B305                 db    ? ;
.bss:0041B306                 db    ? ;
.bss:0041B307                 db    ? ;
.bss:0041B308                 db    ? ;
.bss:0041B309                 db    ? ;
.bss:0041B30A                 db    ? ;
.bss:0041B30B                 db    ? ;
.bss:0041B30C                 db    ? ;
.bss:0041B30D                 db    ? ;
.bss:0041B30E                 db    ? ;
.bss:0041B30F                 db    ? ;
.bss:0041B310                 db    ? ;
.bss:0041B311                 db    ? ;
.bss:0041B312                 db    ? ;
.bss:0041B313                 db    ? ;
.bss:0041B314                 db    ? ;
.bss:0041B315                 db    ? ;
.bss:0041B316                 db    ? ;
.bss:0041B317                 db    ? ;
.bss:0041B318                 db    ? ;
.bss:0041B319                 db    ? ;
.bss:0041B31A                 db    ? ;
.bss:0041B31B                 db    ? ;
.bss:0041B31C                 db    ? ;
.bss:0041B31D                 db    ? ;
.bss:0041B31E                 db    ? ;
.bss:0041B31F                 db    ? ;
.bss:0041B320                 db    ? ;
.bss:0041B321                 db    ? ;
.bss:0041B322                 db    ? ;
.bss:0041B323                 db    ? ;
.bss:0041B324                 db    ? ;
.bss:0041B325                 db    ? ;
.bss:0041B326                 db    ? ;
.bss:0041B327                 db    ? ;
.bss:0041B328                 db    ? ;
.bss:0041B329                 db    ? ;
.bss:0041B32A                 db    ? ;
.bss:0041B32B                 db    ? ;
.bss:0041B32C                 db    ? ;
.bss:0041B32D                 db    ? ;
.bss:0041B32E                 db    ? ;
.bss:0041B32F                 db    ? ;
.bss:0041B330                 db    ? ;
.bss:0041B331                 db    ? ;
.bss:0041B332                 db    ? ;
.bss:0041B333                 db    ? ;
.bss:0041B334                 db    ? ;
.bss:0041B335                 db    ? ;
.bss:0041B336                 db    ? ;
.bss:0041B337                 db    ? ;
.bss:0041B338                 db    ? ;
.bss:0041B339                 db    ? ;
.bss:0041B33A                 db    ? ;
.bss:0041B33B                 db    ? ;
.bss:0041B33C                 db    ? ;
.bss:0041B33D                 db    ? ;
.bss:0041B33E                 db    ? ;
.bss:0041B33F                 db    ? ;
.bss:0041B340                 db    ? ;
.bss:0041B341                 db    ? ;
.bss:0041B342                 db    ? ;
.bss:0041B343                 db    ? ;
.bss:0041B344                 db    ? ;
.bss:0041B345                 db    ? ;
.bss:0041B346                 db    ? ;
.bss:0041B347                 db    ? ;
.bss:0041B348                 db    ? ;
.bss:0041B349                 db    ? ;
.bss:0041B34A                 db    ? ;
.bss:0041B34B                 db    ? ;
.bss:0041B34C                 db    ? ;
.bss:0041B34D                 db    ? ;
.bss:0041B34E                 db    ? ;
.bss:0041B34F                 db    ? ;
.bss:0041B350                 db    ? ;
.bss:0041B351                 db    ? ;
.bss:0041B352                 db    ? ;
.bss:0041B353                 db    ? ;
.bss:0041B354                 db    ? ;
.bss:0041B355                 db    ? ;
.bss:0041B356                 db    ? ;
.bss:0041B357                 db    ? ;
.bss:0041B358                 db    ? ;
.bss:0041B359                 db    ? ;
.bss:0041B35A                 db    ? ;
.bss:0041B35B                 db    ? ;
.bss:0041B35C                 db    ? ;
.bss:0041B35D                 db    ? ;
.bss:0041B35E                 db    ? ;
.bss:0041B35F                 db    ? ;
.bss:0041B360                 db    ? ;
.bss:0041B361                 db    ? ;
.bss:0041B362                 db    ? ;
.bss:0041B363                 db    ? ;
.bss:0041B364                 db    ? ;
.bss:0041B365                 db    ? ;
.bss:0041B366                 db    ? ;
.bss:0041B367                 db    ? ;
.bss:0041B368                 db    ? ;
.bss:0041B369                 db    ? ;
.bss:0041B36A                 db    ? ;
.bss:0041B36B                 db    ? ;
.bss:0041B36C                 db    ? ;
.bss:0041B36D                 db    ? ;
.bss:0041B36E                 db    ? ;
.bss:0041B36F                 db    ? ;
.bss:0041B370                 db    ? ;
.bss:0041B371                 db    ? ;
.bss:0041B372                 db    ? ;
.bss:0041B373                 db    ? ;
.bss:0041B374                 db    ? ;
.bss:0041B375                 db    ? ;
.bss:0041B376                 db    ? ;
.bss:0041B377                 db    ? ;
.bss:0041B378                 db    ? ;
.bss:0041B379                 db    ? ;
.bss:0041B37A                 db    ? ;
.bss:0041B37B                 db    ? ;
.bss:0041B37C                 db    ? ;
.bss:0041B37D                 db    ? ;
.bss:0041B37E                 db    ? ;
.bss:0041B37F                 db    ? ;
.bss:0041B380                 db    ? ;
.bss:0041B381                 db    ? ;
.bss:0041B382                 db    ? ;
.bss:0041B383                 db    ? ;
.bss:0041B384                 db    ? ;
.bss:0041B385                 db    ? ;
.bss:0041B386                 db    ? ;
.bss:0041B387                 db    ? ;
.bss:0041B388                 db    ? ;
.bss:0041B389                 db    ? ;
.bss:0041B38A                 db    ? ;
.bss:0041B38B                 db    ? ;
.bss:0041B38C                 db    ? ;
.bss:0041B38D                 db    ? ;
.bss:0041B38E                 db    ? ;
.bss:0041B38F                 db    ? ;
.bss:0041B390                 db    ? ;
.bss:0041B391                 db    ? ;
.bss:0041B392                 db    ? ;
.bss:0041B393                 db    ? ;
.bss:0041B394                 db    ? ;
.bss:0041B395                 db    ? ;
.bss:0041B396                 db    ? ;
.bss:0041B397                 db    ? ;
.bss:0041B398                 db    ? ;
.bss:0041B399                 db    ? ;
.bss:0041B39A                 db    ? ;
.bss:0041B39B                 db    ? ;
.bss:0041B39C                 db    ? ;
.bss:0041B39D                 db    ? ;
.bss:0041B39E                 db    ? ;
.bss:0041B39F                 db    ? ;
.bss:0041B3A0                 db    ? ;
.bss:0041B3A1                 db    ? ;
.bss:0041B3A2                 db    ? ;
.bss:0041B3A3                 db    ? ;
.bss:0041B3A4                 db    ? ;
.bss:0041B3A5                 db    ? ;
.bss:0041B3A6                 db    ? ;
.bss:0041B3A7                 db    ? ;
.bss:0041B3A8                 db    ? ;
.bss:0041B3A9                 db    ? ;
.bss:0041B3AA                 db    ? ;
.bss:0041B3AB                 db    ? ;
.bss:0041B3AC                 db    ? ;
.bss:0041B3AD                 db    ? ;
.bss:0041B3AE                 db    ? ;
.bss:0041B3AF                 db    ? ;
.bss:0041B3B0                 db    ? ;
.bss:0041B3B1                 db    ? ;
.bss:0041B3B2                 db    ? ;
.bss:0041B3B3                 db    ? ;
.bss:0041B3B4                 db    ? ;
.bss:0041B3B5                 db    ? ;
.bss:0041B3B6                 db    ? ;
.bss:0041B3B7                 db    ? ;
.bss:0041B3B8                 db    ? ;
.bss:0041B3B9                 db    ? ;
.bss:0041B3BA                 db    ? ;
.bss:0041B3BB                 db    ? ;
.bss:0041B3BC                 db    ? ;
.bss:0041B3BD                 db    ? ;
.bss:0041B3BE                 db    ? ;
.bss:0041B3BF                 db    ? ;
.bss:0041B3C0                 db    ? ;
.bss:0041B3C1                 db    ? ;
.bss:0041B3C2                 db    ? ;
.bss:0041B3C3                 db    ? ;
.bss:0041B3C4                 db    ? ;
.bss:0041B3C5                 db    ? ;
.bss:0041B3C6                 db    ? ;
.bss:0041B3C7                 db    ? ;
.bss:0041B3C8                 db    ? ;
.bss:0041B3C9                 db    ? ;
.bss:0041B3CA                 db    ? ;
.bss:0041B3CB                 db    ? ;
.bss:0041B3CC                 db    ? ;
.bss:0041B3CD                 db    ? ;
.bss:0041B3CE                 db    ? ;
.bss:0041B3CF                 db    ? ;
.bss:0041B3D0                 db    ? ;
.bss:0041B3D1                 db    ? ;
.bss:0041B3D2                 db    ? ;
.bss:0041B3D3                 db    ? ;
.bss:0041B3D4                 db    ? ;
.bss:0041B3D5                 db    ? ;
.bss:0041B3D6                 db    ? ;
.bss:0041B3D7                 db    ? ;
.bss:0041B3D8                 db    ? ;
.bss:0041B3D9                 db    ? ;
.bss:0041B3DA                 db    ? ;
.bss:0041B3DB                 db    ? ;
.bss:0041B3DC                 db    ? ;
.bss:0041B3DD                 db    ? ;
.bss:0041B3DE                 db    ? ;
.bss:0041B3DF                 db    ? ;
.bss:0041B3E0                 db    ? ;
.bss:0041B3E1                 db    ? ;
.bss:0041B3E2                 db    ? ;
.bss:0041B3E3                 db    ? ;
.bss:0041B3E4                 db    ? ;
.bss:0041B3E5                 db    ? ;
.bss:0041B3E6                 db    ? ;
.bss:0041B3E7                 db    ? ;
.bss:0041B3E8                 db    ? ;
.bss:0041B3E9                 db    ? ;
.bss:0041B3EA                 db    ? ;
.bss:0041B3EB                 db    ? ;
.bss:0041B3EC                 db    ? ;
.bss:0041B3ED                 db    ? ;
.bss:0041B3EE                 db    ? ;
.bss:0041B3EF                 db    ? ;
.bss:0041B3F0                 db    ? ;
.bss:0041B3F1                 db    ? ;
.bss:0041B3F2                 db    ? ;
.bss:0041B3F3                 db    ? ;
.bss:0041B3F4                 db    ? ;
.bss:0041B3F5                 db    ? ;
.bss:0041B3F6                 db    ? ;
.bss:0041B3F7                 db    ? ;
.bss:0041B3F8                 db    ? ;
.bss:0041B3F9                 db    ? ;
.bss:0041B3FA                 db    ? ;
.bss:0041B3FB                 db    ? ;
.bss:0041B3FC                 db    ? ;
.bss:0041B3FD                 db    ? ;
.bss:0041B3FE                 db    ? ;
.bss:0041B3FF                 db    ? ;
.bss:0041B400                 db    ? ;
.bss:0041B401                 db    ? ;
.bss:0041B402                 db    ? ;
.bss:0041B403                 db    ? ;
.bss:0041B404                 db    ? ;
.bss:0041B405                 db    ? ;
.bss:0041B406                 db    ? ;
.bss:0041B407                 db    ? ;
.bss:0041B408                 db    ? ;
.bss:0041B409                 db    ? ;
.bss:0041B40A                 db    ? ;
.bss:0041B40B                 db    ? ;
.bss:0041B40C                 db    ? ;
.bss:0041B40D                 db    ? ;
.bss:0041B40E                 db    ? ;
.bss:0041B40F                 db    ? ;
.bss:0041B410                 db    ? ;
.bss:0041B411                 db    ? ;
.bss:0041B412                 db    ? ;
.bss:0041B413                 db    ? ;
.bss:0041B414                 db    ? ;
.bss:0041B415                 db    ? ;
.bss:0041B416                 db    ? ;
.bss:0041B417                 db    ? ;
.bss:0041B418                 db    ? ;
.bss:0041B419                 db    ? ;
.bss:0041B41A                 db    ? ;
.bss:0041B41B                 db    ? ;
.bss:0041B41C                 db    ? ;
.bss:0041B41D                 db    ? ;
.bss:0041B41E                 db    ? ;
.bss:0041B41F                 db    ? ;
.bss:0041B420                 db    ? ;
.bss:0041B421                 db    ? ;
.bss:0041B422                 db    ? ;
.bss:0041B423                 db    ? ;
.bss:0041B424                 db    ? ;
.bss:0041B425                 db    ? ;
.bss:0041B426                 db    ? ;
.bss:0041B427                 db    ? ;
.bss:0041B428                 db    ? ;
.bss:0041B429                 db    ? ;
.bss:0041B42A                 db    ? ;
.bss:0041B42B                 db    ? ;
.bss:0041B42C                 db    ? ;
.bss:0041B42D                 db    ? ;
.bss:0041B42E                 db    ? ;
.bss:0041B42F                 db    ? ;
.bss:0041B430                 db    ? ;
.bss:0041B431                 db    ? ;
.bss:0041B432                 db    ? ;
.bss:0041B433                 db    ? ;
.bss:0041B434                 db    ? ;
.bss:0041B435                 db    ? ;
.bss:0041B436                 db    ? ;
.bss:0041B437                 db    ? ;
.bss:0041B438                 db    ? ;
.bss:0041B439                 db    ? ;
.bss:0041B43A                 db    ? ;
.bss:0041B43B                 db    ? ;
.bss:0041B43C                 db    ? ;
.bss:0041B43D                 db    ? ;
.bss:0041B43E                 db    ? ;
.bss:0041B43F                 db    ? ;
.bss:0041B440                 db    ? ;
.bss:0041B441                 db    ? ;
.bss:0041B442                 db    ? ;
.bss:0041B443                 db    ? ;
.bss:0041B444                 db    ? ;
.bss:0041B445                 db    ? ;
.bss:0041B446                 db    ? ;
.bss:0041B447                 db    ? ;
.bss:0041B448                 db    ? ;
.bss:0041B449                 db    ? ;
.bss:0041B44A                 db    ? ;
.bss:0041B44B                 db    ? ;
.bss:0041B44C                 db    ? ;
.bss:0041B44D                 db    ? ;
.bss:0041B44E                 db    ? ;
.bss:0041B44F                 db    ? ;
.bss:0041B450                 db    ? ;
.bss:0041B451                 db    ? ;
.bss:0041B452                 db    ? ;
.bss:0041B453                 db    ? ;
.bss:0041B454                 db    ? ;
.bss:0041B455                 db    ? ;
.bss:0041B456                 db    ? ;
.bss:0041B457                 db    ? ;
.bss:0041B458                 db    ? ;
.bss:0041B459                 db    ? ;
.bss:0041B45A                 db    ? ;
.bss:0041B45B                 db    ? ;
.bss:0041B45C                 db    ? ;
.bss:0041B45D                 db    ? ;
.bss:0041B45E                 db    ? ;
.bss:0041B45F                 db    ? ;
.bss:0041B460                 db    ? ;
.bss:0041B461                 db    ? ;
.bss:0041B462                 db    ? ;
.bss:0041B463                 db    ? ;
.bss:0041B464                 db    ? ;
.bss:0041B465                 db    ? ;
.bss:0041B466                 db    ? ;
.bss:0041B467                 db    ? ;
.bss:0041B468                 db    ? ;
.bss:0041B469                 db    ? ;
.bss:0041B46A                 db    ? ;
.bss:0041B46B                 db    ? ;
.bss:0041B46C                 db    ? ;
.bss:0041B46D                 db    ? ;
.bss:0041B46E                 db    ? ;
.bss:0041B46F                 db    ? ;
.bss:0041B470                 db    ? ;
.bss:0041B471                 db    ? ;
.bss:0041B472                 db    ? ;
.bss:0041B473                 db    ? ;
.bss:0041B474                 db    ? ;
.bss:0041B475                 db    ? ;
.bss:0041B476                 db    ? ;
.bss:0041B477                 db    ? ;
.bss:0041B478                 db    ? ;
.bss:0041B479                 db    ? ;
.bss:0041B47A                 db    ? ;
.bss:0041B47B                 db    ? ;
.bss:0041B47C                 db    ? ;
.bss:0041B47D                 db    ? ;
.bss:0041B47E                 db    ? ;
.bss:0041B47F                 db    ? ;
.bss:0041B480                 db    ? ;
.bss:0041B481                 db    ? ;
.bss:0041B482                 db    ? ;
.bss:0041B483                 db    ? ;
.bss:0041B484                 db    ? ;
.bss:0041B485                 db    ? ;
.bss:0041B486                 db    ? ;
.bss:0041B487                 db    ? ;
.bss:0041B488                 db    ? ;
.bss:0041B489                 db    ? ;
.bss:0041B48A                 db    ? ;
.bss:0041B48B                 db    ? ;
.bss:0041B48C                 db    ? ;
.bss:0041B48D                 db    ? ;
.bss:0041B48E                 db    ? ;
.bss:0041B48F                 db    ? ;
.bss:0041B490                 db    ? ;
.bss:0041B491                 db    ? ;
.bss:0041B492                 db    ? ;
.bss:0041B493                 db    ? ;
.bss:0041B494                 db    ? ;
.bss:0041B495                 db    ? ;
.bss:0041B496                 db    ? ;
.bss:0041B497                 db    ? ;
.bss:0041B498                 db    ? ;
.bss:0041B499                 db    ? ;
.bss:0041B49A                 db    ? ;
.bss:0041B49B                 db    ? ;
.bss:0041B49C                 db    ? ;
.bss:0041B49D                 db    ? ;
.bss:0041B49E                 db    ? ;
.bss:0041B49F                 db    ? ;
.bss:0041B4A0                 db    ? ;
.bss:0041B4A1                 db    ? ;
.bss:0041B4A2                 db    ? ;
.bss:0041B4A3                 db    ? ;
.bss:0041B4A4                 db    ? ;
.bss:0041B4A5                 db    ? ;
.bss:0041B4A6                 db    ? ;
.bss:0041B4A7                 db    ? ;
.bss:0041B4A8                 db    ? ;
.bss:0041B4A9                 db    ? ;
.bss:0041B4AA                 db    ? ;
.bss:0041B4AB                 db    ? ;
.bss:0041B4AC                 db    ? ;
.bss:0041B4AD                 db    ? ;
.bss:0041B4AE                 db    ? ;
.bss:0041B4AF                 db    ? ;
.bss:0041B4B0                 db    ? ;
.bss:0041B4B1                 db    ? ;
.bss:0041B4B2                 db    ? ;
.bss:0041B4B3                 db    ? ;
.bss:0041B4B4                 db    ? ;
.bss:0041B4B5                 db    ? ;
.bss:0041B4B6                 db    ? ;
.bss:0041B4B7                 db    ? ;
.bss:0041B4B8                 db    ? ;
.bss:0041B4B9                 db    ? ;
.bss:0041B4BA                 db    ? ;
.bss:0041B4BB                 db    ? ;
.bss:0041B4BC                 db    ? ;
.bss:0041B4BD                 db    ? ;
.bss:0041B4BE                 db    ? ;
.bss:0041B4BF                 db    ? ;
.bss:0041B4C0                 db    ? ;
.bss:0041B4C1                 db    ? ;
.bss:0041B4C2                 db    ? ;
.bss:0041B4C3                 db    ? ;
.bss:0041B4C4                 db    ? ;
.bss:0041B4C5                 db    ? ;
.bss:0041B4C6                 db    ? ;
.bss:0041B4C7                 db    ? ;
.bss:0041B4C8                 db    ? ;
.bss:0041B4C9                 db    ? ;
.bss:0041B4CA                 db    ? ;
.bss:0041B4CB                 db    ? ;
.bss:0041B4CC                 db    ? ;
.bss:0041B4CD                 db    ? ;
.bss:0041B4CE                 db    ? ;
.bss:0041B4CF                 db    ? ;
.bss:0041B4D0 dword_41B4D0    dd ?                    ; DATA XREF: sub_412560+38↑r
.bss:0041B4D0                                         ; sub_412560+FC↑w ...
.bss:0041B4D4                 align 10h
.bss:0041B4E0 dword_41B4E0    dd ?                    ; DATA XREF: sub_412560+4A↑r
.bss:0041B4E0                                         ; sub_412560+123↑w
.bss:0041B4E4                 align 10h
.bss:0041B4F0 dword_41B4F0    dd ?                    ; DATA XREF: sub_413610+8↑r
.bss:0041B4F0                                         ; sub_413720:loc_4137A2↑w ...
.bss:0041B4F4                 align 10h
.bss:0041B500 ; struct _OSVERSIONINFOA VersionInformation
.bss:0041B500 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_413720:loc_413740↑o
.bss:0041B500                                         ; sub_413720+2C↑w ...
.bss:0041B594 word_41B594     dw ?                    ; DATA XREF: sub_413720:loc_4137D3↑r
.bss:0041B596                 align 4
.bss:0041B598 word_41B598     dw ?                    ; DATA XREF: .text:loc_413196↑r
.bss:0041B598                                         ; .text:004131C4↑r ...
.bss:0041B59A byte_41B59A     db ?                    ; DATA XREF: .text:00413155↑r
.bss:0041B59B                 align 10h
.bss:0041B5A0 dword_41B5A0    dd ?                    ; DATA XREF: sub_413720+6↑r
.bss:0041B5A0                                         ; sub_413720+75↑w
.bss:0041B5A4                 align 10h
.bss:0041B5B0 dword_41B5B0    dd ?                    ; DATA XREF: sub_4156D0+7↑r
.bss:0041B5B0                                         ; sub_4156D0+2B↑w ...
.bss:0041B5B4                 align 10h
.bss:0041B5C0 ; struct _SYSTEM_INFO SystemInfo
.bss:0041B5C0 SystemInfo      _SYSTEM_INFO <?>        ; DATA XREF: sub_4156D0+21↑o
.bss:0041B5C0                                         ; sub_4156D0+33↑o ...
.bss:0041B5E4                 align 10h
.bss:0041B5F0 dword_41B5F0    dd ?                    ; DATA XREF: sub_415C00+6E↑r
.bss:0041B5F0                                         ; sub_415C00+9A↑r ...
.bss:0041B5F4 dword_41B5F4    dd ?                    ; DATA XREF: sub_415C00:loc_415C68↑r
.bss:0041B5F4                                         ; sub_415C00+A0↑r ...
.bss:0041B5F8                 align 10h
.bss:0041B600 dword_41B600    dd ?                    ; DATA XREF: sub_416110↑r
.bss:0041B600                                         ; .text:loc_416242↑w
.bss:0041B604                 align 10h
.bss:0041B610 dword_41B610    dd ?                    ; DATA XREF: sub_402250+59↑w
.bss:0041B610                                         ; sub_402250+174↑r ...
.bss:0041B614                 db    ? ;
.bss:0041B615                 db    ? ;
.bss:0041B616                 db    ? ;
.bss:0041B617                 db    ? ;
.bss:0041B618                 db    ? ;
.bss:0041B619                 db    ? ;
.bss:0041B61A                 db    ? ;
.bss:0041B61B                 db    ? ;
.bss:0041B61C                 db    ? ;
.bss:0041B61D                 db    ? ;
.bss:0041B61E                 db    ? ;
.bss:0041B61F                 db    ? ;
.bss:0041B620                 db    ? ;
.bss:0041B621                 db    ? ;
.bss:0041B622                 db    ? ;
.bss:0041B623                 db    ? ;
.bss:0041B624                 db    ? ;
.bss:0041B625                 db    ? ;
.bss:0041B626                 db    ? ;
.bss:0041B627                 db    ? ;
.bss:0041B628                 db    ? ;
.bss:0041B629                 db    ? ;
.bss:0041B62A                 db    ? ;
.bss:0041B62B                 db    ? ;
.bss:0041B62C                 db    ? ;
.bss:0041B62D                 db    ? ;
.bss:0041B62E                 db    ? ;
.bss:0041B62F                 db    ? ;
.bss:0041B630 ; char *dword_41B630
.bss:0041B630 dword_41B630    dd ?                    ; DATA XREF: sub_402250+356↑r
.bss:0041B630                                         ; sub_402250+3C9↑r ...
.bss:0041B634                 align 10h
.bss:0041B640 dword_41B640    dd ?                    ; CODE XREF: sub_40EAE4+63↑p
.bss:0041B640                                         ; DATA XREF: sub_40E9E0+1E↑r ...
.bss:0041B644                 align 10h
.bss:0041B650 dword_41B650    dd ?                    ; DATA XREF: sub_40E9E0+4E↑w
.bss:0041B650                                         ; sub_40EAE4+AB↑w
.bss:0041B654                 align 40h
.bss:0041B680 dword_41B680    dd ?                    ; DATA XREF: sub_40EAE4+13↑r
.bss:0041B684                 align 10h
.bss:0041B690 dword_41B690    dd ?                    ; DATA XREF: sub_415830+A↑w
.bss:0041B694                 align 1000h
.bss:0041B694 _bss            ends
.bss:0041B694
.idata:0041C000 ; Section 4. (virtual address 0001C000)
.idata:0041C000 ; Virtual size                  : 00000F0C (   3852.)
.idata:0041C000 ; Section size in file          : 00001000 (   4096.)
.idata:0041C000 ; Offset to raw data for section: 00018800
.idata:0041C000 ; Flags C0000040: Data Readable Writable
.idata:0041C000 ; Alignment     : default
.idata:0041C000 ; ===========================================================================
.idata:0041C000
.idata:0041C000 ; Segment type: Externs
.idata:0041C000 ; _idata
.idata:0041C000
.idata:0041C001
.idata:0041C2E4 ;
.idata:0041C2E4 ; Imports from libintl3.dll
.idata:0041C2E4 ;
.idata:0041C2E4                 extrn libintl_bindtextdomain:dword
.idata:0041C2E4                                         ; CODE XREF: sub_402250+82↑p
.idata:0041C2E4                                         ; DATA XREF: sub_402250+82↑r ...
.idata:0041C2E8                 extrn libintl_gettext:dword
.idata:0041C2E8                                         ; CODE XREF: sub_402250+16E↑p
.idata:0041C2E8                                         ; sub_402250+191↑p ...
.idata:0041C2EC                 extrn libintl_textdomain:dword
.idata:0041C2EC                                         ; CODE XREF: sub_402250+8F↑p
.idata:0041C2EC                                         ; DATA XREF: sub_402250+8F↑r ...
.idata:0041C2F0
.idata:0041C2F8 ;
.idata:0041C2F8 ; Imports from ADVAPI32.DLL
.idata:0041C2F8 ;
.idata:0041C2F8 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:0041C2F8                 extrn __imp_RegCloseKey:dword
.idata:0041C2F8                                         ; DATA XREF: RegCloseKey↑r
.idata:0041C2FC ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:0041C2FC                 extrn __imp_RegOpenKeyExA:dword
.idata:0041C2FC                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:0041C300 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:0041C300                 extrn __imp_RegQueryValueExA:dword
.idata:0041C300                                         ; DATA XREF: RegQueryValueExA↑r
.idata:0041C304
.idata:0041C30C ;
.idata:0041C30C ; Imports from KERNEL32.dll
.idata:0041C30C ;
.idata:0041C30C ; BOOL (__stdcall *AreFileApisANSI)()
.idata:0041C30C                 extrn __imp_AreFileApisANSI:dword
.idata:0041C30C                                         ; DATA XREF: AreFileApisANSI↑r
.idata:0041C310 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:0041C310                 extrn __imp_CloseHandle:dword
.idata:0041C310                                         ; DATA XREF: CloseHandle↑r
.idata:0041C314 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:0041C314                 extrn __imp_CreateDirectoryA:dword
.idata:0041C314                                         ; DATA XREF: CreateDirectoryA↑r
.idata:0041C318 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:0041C318                 extrn __imp_CreateFileA:dword
.idata:0041C318                                         ; DATA XREF: CreateFileA↑r
.idata:0041C31C ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:0041C31C                 extrn __imp_DeviceIoControl:dword
.idata:0041C31C                                         ; DATA XREF: DeviceIoControl↑r
.idata:0041C320 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0041C320                 extrn __imp_ExitProcess:dword
.idata:0041C320                                         ; DATA XREF: ExitProcess↑r
.idata:0041C324 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:0041C324                 extrn __imp_FindClose:dword
.idata:0041C324                                         ; DATA XREF: FindClose↑r
.idata:0041C328 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0041C328                 extrn __imp_FindFirstFileA:dword
.idata:0041C328                                         ; DATA XREF: FindFirstFileA↑r
.idata:0041C32C ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0041C32C                 extrn __imp_FindNextFileA:dword
.idata:0041C32C                                         ; DATA XREF: FindNextFileA↑r
.idata:0041C330 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:0041C330                 extrn __imp_FreeLibrary:dword
.idata:0041C330                                         ; DATA XREF: FreeLibrary↑r
.idata:0041C334 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041C334                 extrn __imp_GetCurrentDirectoryA:dword
.idata:0041C334                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:0041C338 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:0041C338                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:0041C338                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:0041C33C ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:0041C33C                 extrn __imp_GetDriveTypeA:dword
.idata:0041C33C                                         ; DATA XREF: GetDriveTypeA↑r
.idata:0041C340 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:0041C340                 extrn __imp_GetFileAttributesA:dword
.idata:0041C340                                         ; DATA XREF: GetFileAttributesA↑r
.idata:0041C344 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:0041C344                 extrn __imp_GetFileInformationByHandle:dword
.idata:0041C344                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:0041C348 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:0041C348                 extrn __imp_GetFileSize:dword
.idata:0041C348                                         ; DATA XREF: GetFileSize↑r
.idata:0041C34C ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:0041C34C                 extrn __imp_GetFileType:dword
.idata:0041C34C                                         ; DATA XREF: GetFileType↑r
.idata:0041C350 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:0041C350                 extrn __imp_GetFullPathNameA:dword
.idata:0041C350                                         ; DATA XREF: GetFullPathNameA↑r
.idata:0041C354 ; DWORD (__stdcall *GetLastError)()
.idata:0041C354                 extrn __imp_GetLastError:dword
.idata:0041C354                                         ; DATA XREF: GetLastError↑r
.idata:0041C358 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041C358                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:0041C358                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:0041C35C ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:0041C35C                 extrn __imp_GetModuleFileNameA:dword
.idata:0041C35C                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:0041C360 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:0041C360                 extrn __imp_GetModuleHandleA:dword
.idata:0041C360                                         ; DATA XREF: GetModuleHandleA↑r
.idata:0041C364 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:0041C364                 extrn __imp_GetProcAddress:dword
.idata:0041C364                                         ; DATA XREF: GetProcAddress↑r
.idata:0041C368 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:0041C368                 extrn __imp_GetProcessHeap:dword
.idata:0041C368                                         ; DATA XREF: GetProcessHeap↑r
.idata:0041C36C ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:0041C36C                 extrn __imp_GetShortPathNameA:dword
.idata:0041C36C                                         ; DATA XREF: GetShortPathNameA↑r
.idata:0041C370 ; void (__stdcall *GetSystemInfo)(LPSYSTEM_INFO lpSystemInfo)
.idata:0041C370                 extrn __imp_GetSystemInfo:dword
.idata:0041C370                                         ; DATA XREF: GetSystemInfo↑r
.idata:0041C374 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:0041C374                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:0041C374                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:0041C378 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:0041C378                 extrn __imp_GetTimeZoneInformation:dword
.idata:0041C378                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:0041C37C ; DWORD (__stdcall *GetVersion)()
.idata:0041C37C                 extrn __imp_GetVersion:dword
.idata:0041C37C                                         ; DATA XREF: GetVersion↑r
.idata:0041C380 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:0041C380                 extrn __imp_GetVersionExA:dword
.idata:0041C380                                         ; DATA XREF: GetVersionExA↑r
.idata:0041C384 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:0041C384                 extrn __imp_GetVolumeInformationA:dword
.idata:0041C384                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:0041C388 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:0041C388                 extrn __imp_HeapAlloc:dword
.idata:0041C388                                         ; DATA XREF: HeapAlloc↑r
.idata:0041C38C ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0041C38C                 extrn __imp_HeapFree:dword
.idata:0041C38C                                         ; DATA XREF: HeapFree↑r
.idata:0041C390 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:0041C390                 extrn __imp_LoadLibraryA:dword
.idata:0041C390                                         ; DATA XREF: LoadLibraryA↑r
.idata:0041C394 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:0041C394                 extrn __imp_MultiByteToWideChar:dword
.idata:0041C394                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:0041C398 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:0041C398                 extrn __imp_PeekNamedPipe:dword
.idata:0041C398                                         ; DATA XREF: PeekNamedPipe↑r
.idata:0041C39C ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0041C39C                 extrn __imp_SetErrorMode:dword
.idata:0041C39C                                         ; DATA XREF: SetErrorMode↑r
.idata:0041C3A0 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0041C3A0                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0041C3A0                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0041C3A4 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:0041C3A4                 extrn __imp_UnlockFile:dword
.idata:0041C3A4                                         ; DATA XREF: UnlockFile↑r
.idata:0041C3A8 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:0041C3A8                 extrn __imp_lstrcmpiA:dword
.idata:0041C3A8                                         ; DATA XREF: lstrcmpiA↑r
.idata:0041C3AC ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:0041C3AC                 extrn __imp_lstrcpyA:dword
.idata:0041C3AC                                         ; DATA XREF: lstrcpyA↑r
.idata:0041C3B0
.idata:0041C3B8 ;
.idata:0041C3B8 ; Imports from msvcrt.dll
.idata:0041C3B8 ;
.idata:0041C3B8 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:0041C3B8                 extrn __imp__chmod:dword
.idata:0041C3B8                                         ; DATA XREF: _chmod↑r
.idata:0041C3BC ; int (__cdecl *_close)(int FileHandle)
.idata:0041C3BC                 extrn __imp__close:dword
.idata:0041C3BC                                         ; DATA XREF: _close↑r
.idata:0041C3C0 ; int (__cdecl *_getpid)()
.idata:0041C3C0                 extrn __imp__getpid:dword
.idata:0041C3C0                                         ; DATA XREF: _getpid↑r
.idata:0041C3C4 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:0041C3C4                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:0041C3C8 ; char *(__cdecl *_strdup)(const char *String)
.idata:0041C3C8                 extrn __imp__strdup:dword
.idata:0041C3C8                                         ; DATA XREF: _strdup↑r
.idata:0041C3CC ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:0041C3CC                 extrn __imp__stricmp:dword
.idata:0041C3CC                                         ; DATA XREF: _stricmp↑r
.idata:0041C3D0
.idata:0041C3D8 ;
.idata:0041C3D8 ; Imports from MSVCP60.DLL
.idata:0041C3D8 ;
.idata:0041C3D8 ; wint_t (__cdecl *btowc)(int Ch)
.idata:0041C3D8                 extrn __imp_btowc:dword ; DATA XREF: btowc↑r
.idata:0041C3DC ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0041C3DC                 extrn __imp_mbrtowc:dword
.idata:0041C3DC                                         ; DATA XREF: mbrtowc↑r
.idata:0041C3E0 ; size_t (__cdecl *mbsrtowcs)(wchar_t *Dest, const char **PSrc, size_t Count, mbstate_t *State)
.idata:0041C3E0                 extrn __imp_mbsrtowcs:dword
.idata:0041C3E0                                         ; DATA XREF: mbsrtowcs↑r
.idata:0041C3E4 ; wctype_t (__cdecl *wctype)(const char *name)
.idata:0041C3E4                 extrn __imp_wctype:dword
.idata:0041C3E4                                         ; DATA XREF: wctype↑r
.idata:0041C3E8
.idata:0041C3F0 ;
.idata:0041C3F0 ; Imports from msvcrt.dll
.idata:0041C3F0 ;
.idata:0041C3F0                 extrn __imp___getmainargs:dword
.idata:0041C3F0                                         ; DATA XREF: __getmainargs↑r
.idata:0041C3F4 ; int _mb_cur_max
.idata:0041C3F4                 extrn __mb_cur_max:dword
.idata:0041C3F4                                         ; DATA XREF: sub_405110+7↑r
.idata:0041C3F4                                         ; sub_405110+5F3↑r ...
.idata:0041C3F8 ; char ***(__cdecl *__p__environ)()
.idata:0041C3F8                 extrn __imp___p__environ:dword
.idata:0041C3F8                                         ; DATA XREF: __p__environ↑r
.idata:0041C3FC ; int *(__cdecl *__p__fmode)()
.idata:0041C3FC                 extrn __imp___p__fmode:dword
.idata:0041C3FC                                         ; DATA XREF: __p__fmode↑r
.idata:0041C400 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0041C400                 extrn __set_app_type:dword
.idata:0041C400                                         ; CODE XREF: start+D↑p
.idata:0041C400                                         ; .text:0040102D↑p
.idata:0041C400                                         ; DATA XREF: ...
.idata:0041C404                 extrn __imp__assert:dword
.idata:0041C404                                         ; DATA XREF: _assert↑r
.idata:0041C408 ; void (__cdecl *_cexit)()
.idata:0041C408                 extrn __imp__cexit:dword
.idata:0041C408                                         ; DATA XREF: _cexit↑r
.idata:0041C40C ; int (__cdecl *_close_0)(int FileHandle)
.idata:0041C40C                 extrn __imp__close_0:dword
.idata:0041C40C                                         ; DATA XREF: _close_0↑r
.idata:0041C410 ; int *(__cdecl *_errno)()
.idata:0041C410                 extrn __imp__errno:dword
.idata:0041C410                                         ; DATA XREF: _errno↑r
.idata:0041C414 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:0041C414                 extrn __imp__fdopen:dword
.idata:0041C414                                         ; DATA XREF: _fdopen↑r
.idata:0041C418 ; int (__cdecl *_filbuf)(FILE *File)
.idata:0041C418                 extrn __imp__filbuf:dword
.idata:0041C418                                         ; DATA XREF: _filbuf↑r
.idata:0041C41C ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:0041C41C                 extrn __imp__filelengthi64:dword
.idata:0041C41C                                         ; DATA XREF: _filelengthi64↑r
.idata:0041C420 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0041C420                 extrn __imp__flsbuf:dword
.idata:0041C420                                         ; DATA XREF: _flsbuf↑r
.idata:0041C424 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:0041C424                 extrn __imp__get_osfhandle:dword
.idata:0041C424                                         ; DATA XREF: _get_osfhandle↑r
.idata:0041C428 ; FILE iob[]
.idata:0041C428                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0041C428                                         ; sub_401080+75↑r ...
.idata:0041C42C ; int (__cdecl *_isctype)(int C, int Type)
.idata:0041C42C                 extrn __imp__isctype:dword
.idata:0041C42C                                         ; DATA XREF: _isctype↑r
.idata:0041C430 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0041C430                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0041C430                                         ; DATA XREF: .text:0040106C↑r
.idata:0041C434 ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:0041C434                 extrn __imp__open_0:dword
.idata:0041C434                                         ; DATA XREF: _open_0↑r
.idata:0041C438 ; const unsigned __int16 *pctype
.idata:0041C438                 extrn _pctype:dword     ; DATA XREF: sub_405110:loc_405804↑r
.idata:0041C438                                         ; sub_408D70:loc_408F00↑r ...
.idata:0041C43C ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0041C43C                 extrn __imp__setmode:dword
.idata:0041C43C                                         ; DATA XREF: _setmode↑r
.idata:0041C440 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:0041C440                 extrn __imp__stricmp_0:dword
.idata:0041C440                                         ; DATA XREF: _stricmp_0↑r
.idata:0041C444 ; int (__cdecl *_strnicmp)(const char *String1, const char *String2, size_t MaxCount)
.idata:0041C444                 extrn __imp__strnicmp:dword
.idata:0041C444                                         ; DATA XREF: _strnicmp↑r
.idata:0041C448 ; void (__cdecl __noreturn *abort)()
.idata:0041C448                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0041C44C ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0041C44C                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0041C44C                                         ; DATA XREF: sub_401040+C↑r
.idata:0041C450 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0041C450                 extrn __imp_calloc:dword
.idata:0041C450                                         ; DATA XREF: calloc↑r
.idata:0041C454 ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:0041C454                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:0041C458 ; void (__cdecl __noreturn *exit)(int Code)
.idata:0041C458                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0041C45C ; int (__cdecl *fclose)(FILE *Stream)
.idata:0041C45C                 extrn __imp_fclose:dword
.idata:0041C45C                                         ; DATA XREF: fclose↑r
.idata:0041C460 ; int (__cdecl *fflush)(FILE *Stream)
.idata:0041C460                 extrn __imp_fflush:dword
.idata:0041C460                                         ; DATA XREF: fflush↑r
.idata:0041C464 ; int (__cdecl *fgetc)(FILE *Stream)
.idata:0041C464                 extrn __imp_fgetc:dword ; DATA XREF: fgetc↑r
.idata:0041C468 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:0041C468                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:0041C46C ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0041C46C                 extrn __imp_fprintf:dword
.idata:0041C46C                                         ; DATA XREF: fprintf↑r
.idata:0041C470 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0041C470                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0041C474 ; void (__cdecl *free)(void *Block)
.idata:0041C474                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0041C478 ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:0041C478                 extrn __imp_fwrite:dword
.idata:0041C478                                         ; DATA XREF: fwrite↑r
.idata:0041C47C ; char *(__cdecl *getenv)(const char *VarName)
.idata:0041C47C                 extrn __imp_getenv:dword
.idata:0041C47C                                         ; DATA XREF: getenv↑r
.idata:0041C480 ; int (__cdecl *isalpha)(int C)
.idata:0041C480                 extrn __imp_isalpha:dword
.idata:0041C480                                         ; DATA XREF: isalpha↑r
.idata:0041C484 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0041C484                 extrn __imp_iswctype:dword
.idata:0041C484                                         ; DATA XREF: iswctype↑r
.idata:0041C488 ; struct lconv *(__cdecl *localeconv)()
.idata:0041C488                 extrn __imp_localeconv:dword
.idata:0041C488                                         ; DATA XREF: localeconv↑r
.idata:0041C48C ; void *(__cdecl *malloc)(size_t Size)
.idata:0041C48C                 extrn __imp_malloc:dword
.idata:0041C48C                                         ; DATA XREF: malloc↑r
.idata:0041C490 ; void *(__cdecl *memchr)(const void *Buf, int Val, size_t MaxCount)
.idata:0041C490                 extrn __imp_memchr:dword
.idata:0041C490                                         ; DATA XREF: memchr↑r
.idata:0041C494 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0041C494                 extrn __imp_memcpy:dword
.idata:0041C494                                         ; DATA XREF: memcpy↑r
.idata:0041C498 ; void *(__cdecl *memmove)(void *, const void *Src, size_t Size)
.idata:0041C498                 extrn __imp_memmove:dword
.idata:0041C498                                         ; DATA XREF: memmove↑r
.idata:0041C49C ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0041C49C                 extrn __imp_memset:dword
.idata:0041C49C                                         ; DATA XREF: memset↑r
.idata:0041C4A0 ; int (*printf)(const char *const Format, ...)
.idata:0041C4A0                 extrn __imp_printf:dword
.idata:0041C4A0                                         ; DATA XREF: printf↑r
.idata:0041C4A4 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0041C4A4                 extrn __imp_realloc:dword
.idata:0041C4A4                                         ; DATA XREF: realloc↑r
.idata:0041C4A8 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0041C4A8                 extrn __imp_setlocale:dword
.idata:0041C4A8                                         ; DATA XREF: setlocale↑r
.idata:0041C4AC ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0041C4AC                 extrn __imp_signal:dword
.idata:0041C4AC                                         ; DATA XREF: signal↑r
.idata:0041C4B0 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:0041C4B0                 extrn __imp_sprintf:dword
.idata:0041C4B0                                         ; DATA XREF: sprintf↑r
.idata:0041C4B4 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:0041C4B4                 extrn __imp_sscanf:dword
.idata:0041C4B4                                         ; DATA XREF: sscanf↑r
.idata:0041C4B8 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:0041C4B8                 extrn __imp_strcat:dword
.idata:0041C4B8                                         ; DATA XREF: strcat↑r
.idata:0041C4BC ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0041C4BC                 extrn __imp_strchr:dword
.idata:0041C4BC                                         ; DATA XREF: strchr↑r
.idata:0041C4C0 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0041C4C0                 extrn __imp_strcmp:dword
.idata:0041C4C0                                         ; DATA XREF: strcmp↑r
.idata:0041C4C4 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:0041C4C4                 extrn __imp_strcpy:dword
.idata:0041C4C4                                         ; DATA XREF: strcpy↑r
.idata:0041C4C8 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0041C4C8                 extrn __imp_strerror:dword
.idata:0041C4C8                                         ; DATA XREF: strerror↑r
.idata:0041C4CC ; size_t (__cdecl *strlen)(const char *Str)
.idata:0041C4CC                 extrn __imp_strlen:dword
.idata:0041C4CC                                         ; DATA XREF: strlen↑r
.idata:0041C4D0 ; char *(__cdecl *strncat)(char *Destination, const char *Source, size_t Count)
.idata:0041C4D0                 extrn __imp_strncat:dword
.idata:0041C4D0                                         ; DATA XREF: strncat↑r
.idata:0041C4D4 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0041C4D4                 extrn __imp_strncmp:dword
.idata:0041C4D4                                         ; DATA XREF: strncmp↑r
.idata:0041C4D8 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:0041C4D8                 extrn __imp_strncpy:dword
.idata:0041C4D8                                         ; DATA XREF: strncpy↑r
.idata:0041C4DC ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:0041C4DC                 extrn __imp_strpbrk:dword
.idata:0041C4DC                                         ; DATA XREF: strpbrk↑r
.idata:0041C4E0 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:0041C4E0                 extrn __imp_strrchr:dword
.idata:0041C4E0                                         ; DATA XREF: strrchr↑r
.idata:0041C4E4 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:0041C4E4                 extrn __imp_strspn:dword
.idata:0041C4E4                                         ; DATA XREF: strspn↑r
.idata:0041C4E8 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:0041C4E8                 extrn __imp_strstr:dword
.idata:0041C4E8                                         ; DATA XREF: strstr↑r
.idata:0041C4EC ; unsigned int (__cdecl *strtoul)(const char *String, char **EndPtr, int Radix)
.idata:0041C4EC                 extrn __imp_strtoul:dword
.idata:0041C4EC                                         ; DATA XREF: strtoul↑r
.idata:0041C4F0 ; int (__cdecl *tolower)(int C)
.idata:0041C4F0                 extrn __imp_tolower:dword
.idata:0041C4F0                                         ; DATA XREF: tolower↑r
.idata:0041C4F4 ; int (__cdecl *toupper)(int C)
.idata:0041C4F4                 extrn __imp_toupper:dword
.idata:0041C4F4                                         ; DATA XREF: toupper↑r
.idata:0041C4F8 ; wint_t (__cdecl *towlower)(wint_t C)
.idata:0041C4F8                 extrn __imp_towlower:dword
.idata:0041C4F8                                         ; DATA XREF: towlower↑r
.idata:0041C4FC ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0041C4FC                 extrn __imp_vfprintf:dword
.idata:0041C4FC                                         ; DATA XREF: vfprintf↑r
.idata:0041C500 ; wchar_t *(__cdecl *wcscat)(wchar_t *Destination, const wchar_t *Source)
.idata:0041C500                 extrn __imp_wcscat:dword
.idata:0041C500                                         ; DATA XREF: wcscat↑r
.idata:0041C504 ; size_t (__cdecl *wcslen)(const wchar_t *String)
.idata:0041C504                 extrn __imp_wcslen:dword
.idata:0041C504                                         ; DATA XREF: wcslen↑r
.idata:0041C508
.idata:0041C510 ;
.idata:0041C510 ; Imports from OLE32.dll
.idata:0041C510 ;
.idata:0041C510 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:0041C510                 extrn __imp_CoCreateInstance:dword
.idata:0041C510                                         ; DATA XREF: CoCreateInstance↑r
.idata:0041C514 ; void (__stdcall *CoUninitialize)()
.idata:0041C514                 extrn __imp_CoUninitialize:dword
.idata:0041C514                                         ; DATA XREF: CoUninitialize↑r
.idata:0041C518 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:0041C518                 extrn __imp_OleInitialize:dword
.idata:0041C518                                         ; DATA XREF: OleInitialize↑r
.idata:0041C51C
.idata:0041C51C
.idata:0041C51C
.idata:0041C51C                 end start
