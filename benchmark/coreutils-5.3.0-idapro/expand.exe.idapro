.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 649769E733C3A74BBE19F3C408EDADD594AA32B573B35CC8754A5C6FA42AF139
.text:00401000 ; Input MD5    : A1F4D814F4D0A4CEC33710779ECF36C3
.text:00401000 ; Input CRC32  : 859D382C
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/expand.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A255 (Wed Apr 20 18:41:25 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00004E30 (  20016.)
.text:00401000 ; Section size in file          : 00005000 (  20480.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4016B0+68↓p
.text:00401040                                         ; .text:00405940↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_4058E0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406060
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406080, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406080
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_4058B0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4016B0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_4058E0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char byte_401280[]
.text:00401280 byte_401280     db 2Dh, 0               ; DATA XREF: sub_4016B0+499↓o
.text:00401280                                         ; .data:off_406010↓o
.text:00401282 aTabs           db 'tabs',0             ; DATA XREF: .text:off_4012A0↓o
.text:00401287 aInitial        db 'initial',0          ; DATA XREF: .text:004012B0↓o
.text:0040128F aHelp           db 'help',0             ; DATA XREF: .text:004012C0↓o
.text:00401294 aVersion        db 'version',0          ; DATA XREF: .text:004012D0↓o
.text:0040129C                 align 10h
.text:004012A0 off_4012A0      dd offset aTabs         ; DATA XREF: sub_4016B0+AE↓o
.text:004012A0                                         ; "tabs"
.text:004012A4                 dd 1, 0
.text:004012AC                 dd 74h
.text:004012B0                 dd offset aInitial      ; "initial"
.text:004012B4                 dd 2 dup(0)
.text:004012BC                 dd 69h
.text:004012C0                 dd offset aHelp         ; "help"
.text:004012C4                 dd 2 dup(0)
.text:004012CC                 dd 0FFFFFF7Eh
.text:004012D0                 dd offset aVersion      ; "version"
.text:004012D4                 dd 2 dup(0)
.text:004012DC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004012F0 ; const char Locale
.text:004012F0 Locale          db 0                    ; DATA XREF: sub_4016B0+25↓o
.text:004012F1                 db 0EBh, 0Dh, 90h
.text:004012F4                 align 10h
.text:00401300 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401300                                         ; DATA XREF: sub_4016B0+3F↓o
.text:00401323 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4016B0+47↓o
.text:00401323                                         ; sub_4016B0+54↓o
.text:0040132D ; const char aIt0123456789[]
.text:0040132D aIt0123456789   db 'it:,0123456789',0   ; DATA XREF: sub_4016B0+B9↓o
.text:0040133C                 align 10h
.text:00401340 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.text:00401340                                         ; DATA XREF: sub_4016B0:loc_4017E4↓o
.text:00401340                                         ; .text:loc_401C80↓o
.text:00401361                 align 20h
.text:00401380 aConvertTabsInE db 'Convert tabs in each FILE to spaces, writing to standard output.',0Ah
.text:00401380                                         ; DATA XREF: sub_4016B0+153↓o
.text:00401380                                         ; .text:00401C9F↓o
.text:00401380                 db 'With no FILE, or when FILE is -, read standard input.',0Ah
.text:00401380                 db 0Ah,0
.text:004013F9                 align 10h
.text:00401400 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:00401400                                         ; DATA XREF: sub_4016B0+175↓o
.text:00401400                                         ; .text:00401CC1↓o
.text:00401400                 db 'ns too.',0Ah,0
.text:0040144A                 align 20h
.text:00401460 aIInitialDoNotC db '  -i, --initial       do not convert tabs after non blanks',0Ah
.text:00401460                                         ; DATA XREF: sub_4016B0+197↓o
.text:00401460                                         ; .text:00401CE3↓o
.text:00401460                 db '  -t, --tabs=NUMBER   have tabs NUMBER characters apart, not 8',0Ah
.text:00401460                 db 0
.text:004014DB                 align 10h
.text:004014E0 aTTabsListUseCo db '  -t, --tabs=LIST     use comma separated list of explicit tab po'
.text:004014E0                                         ; DATA XREF: sub_4016B0+1B9↓o
.text:004014E0                                         ; .text:00401D05↓o
.text:004014E0                 db 'sitions',0Ah,0
.text:0040152A                 align 20h
.text:00401540 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401540                                         ; DATA XREF: sub_4016B0+1DB↓o
.text:00401540                                         ; .text:00401D27↓o
.text:0040156D                 align 20h
.text:00401580 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401580                                         ; DATA XREF: sub_4016B0+1FD↓o
.text:00401580                                         ; .text:00401D49↓o
.text:004015B6 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4016B0+21F↓o
.text:004015B6                                         ; .text:00401D6B↓o
.text:004015B6                 db 'Report bugs to <%s>.',0Ah,0
.text:004015CD aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004015CD                                         ; DATA XREF: sub_4016B0+22C↓o
.text:004015CD                                         ; .text:00401D78↓o
.text:004015E3 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_4016B0+256↓o
.text:004015F3 a530            db '5.3.0',0            ; DATA XREF: sub_4016B0+25E↓o
.text:004015F9 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4016B0+269↓o
.text:00401607 ; const FILE stru_401607
.text:00401607 stru_401607     FILE <61707865h, 9000646Eh, 90909090h, 90909090h, 90909090h, \
.text:00401607                                         ; DATA XREF: sub_4016B0+271↓o
.text:00401607                       90909090h, 79725490h, 73256020h>
.text:00401627                 db  20h
.text:00401628                 db  2Dh ; -
.text:00401629                 db  2Dh ; -
.text:0040162A                 db  68h ; h
.text:0040162B                 db  65h ; e
.text:0040162C                 db  6Ch ; l
.text:0040162D                 db  70h ; p
.text:0040162E                 db  27h ; '
.text:0040162F                 db  20h
.text:00401630                 db  66h ; f
.text:00401631                 db  6Fh ; o
.text:00401632                 db  72h ; r
.text:00401633                 db  20h
.text:00401634                 db  6Dh ; m
.text:00401635                 db  6Fh ; o
.text:00401636                 db  72h ; r
.text:00401637                 db  65h ; e
.text:00401638                 db  20h
.text:00401639                 db  69h ; i
.text:0040163A                 db  6Eh ; n
.text:0040163B                 db  66h ; f
.text:0040163C                 db  6Fh ; o
.text:0040163D                 db  72h ; r
.text:0040163E                 db  6Dh ; m
.text:0040163F                 db  61h ; a
.text:00401640                 db  74h ; t
.text:00401641                 db  69h ; i
.text:00401642                 db  6Fh ; o
.text:00401643                 db  6Eh ; n
.text:00401644                 db  2Eh ; .
.text:00401645                 db  0Ah
.text:00401646                 db    0
.text:00401647 aTabSizesMustBe db 'tab sizes must be ascending',0
.text:00401647                                         ; DATA XREF: sub_4016B0:loc_401A93↓o
.text:00401663 aTabSizeCannotB db 'tab size cannot be 0',0
.text:00401663                                         ; DATA XREF: sub_4016B0:loc_401B90↓o
.text:00401678                 align 10h
.text:00401680 aListOptionIsOb db '`-LIST',27h,' option is obsolete; use `-t LIST',27h,0
.text:00401680                                         ; DATA XREF: sub_4016B0:loc_401C09↓o
.text:004016AA                 align 10h
.text:004016B0
.text:004016B0 ; =============== S U B R O U T I N E =======================================
.text:004016B0
.text:004016B0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004016B0
.text:004016B0 sub_4016B0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004016B0
.text:004016B0 Category        = dword ptr -48h
.text:004016B0 Locale          = dword ptr -44h
.text:004016B0 var_40          = dword ptr -40h
.text:004016B0 var_3C          = byte ptr -3Ch
.text:004016B0 var_38          = byte ptr -38h
.text:004016B0 var_34          = dword ptr -34h
.text:004016B0 var_28          = dword ptr -28h
.text:004016B0 var_24          = dword ptr -24h
.text:004016B0 var_1C          = dword ptr -1Ch
.text:004016B0 var_18          = dword ptr -18h
.text:004016B0 var_12          = byte ptr -12h
.text:004016B0 var_11          = byte ptr -11h
.text:004016B0 arg_0           = dword ptr  8
.text:004016B0 arg_4           = dword ptr  0Ch
.text:004016B0
.text:004016B0                 push    ebp
.text:004016B1                 xor     eax, eax
.text:004016B3                 mov     ebp, esp
.text:004016B5                 push    edi
.text:004016B6                 push    esi
.text:004016B7                 push    ebx
.text:004016B8                 sub     esp, 3Ch
.text:004016BB                 and     esp, 0FFFFFFF0h
.text:004016BE                 call    __alloca
.text:004016C3                 call    sub_405980
.text:004016C8                 mov     [ebp+var_11], 0
.text:004016CC                 mov     eax, [ebp+arg_4]
.text:004016CF                 mov     [ebp+var_12], 0
.text:004016D3                 mov     edi, [eax]
.text:004016D5                 mov     [esp+48h+Locale], offset Locale ; Locale
.text:004016DD                 mov     [esp+48h+Category], 0 ; Category
.text:004016E4                 mov     ds:dword_407220, edi
.text:004016EA                 call    setlocale
.text:004016EF                 mov     [esp+48h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004016F7                 mov     [esp+48h+Category], offset aCoreutils ; "coreutils"
.text:004016FE                 call    ds:__imp_libintl_bindtextdomain
.text:00401704                 mov     [esp+48h+Category], offset aCoreutils ; "coreutils"
.text:0040170B                 call    ds:libintl_textdomain
.text:00401711                 mov     [esp+48h+Category], offset sub_403C80 ; void (__cdecl *)()
.text:00401718                 call    sub_401040
.text:0040171D                 mov     ds:byte_407070, 0
.text:00401724                 xor     ecx, ecx
.text:00401726                 xor     edx, edx
.text:00401728                 mov     ds:dword_407080, ecx
.text:0040172E                 xor     eax, eax
.text:00401730                 mov     ds:byte_407010, 1
.text:00401737                 mov     ds:dword_407030, edx
.text:0040173D                 mov     ds:dword_407050, eax
.text:00401742                 lea     esi, [esi+0]
.text:00401749                 lea     edi, [edi+0]
.text:00401750
.text:00401750 loc_401750:                             ; CODE XREF: sub_4016B0+12F↓j
.text:00401750                                         ; sub_4016B0+2E7↓j ...
.text:00401750                 mov     dword ptr [esp+48h+var_38], 0 ; int
.text:00401758                 mov     ecx, [ebp+arg_0]
.text:0040175B                 mov     eax, [ebp+arg_4]
.text:0040175E                 mov     dword ptr [esp+48h+var_3C], offset off_4012A0 ; char
.text:00401766                 mov     [esp+48h+Category], ecx ; int
.text:00401769                 mov     [esp+48h+var_40], offset aIt0123456789 ; "it:,0123456789"
.text:00401771                 mov     [esp+48h+Locale], eax ; int
.text:00401775                 call    sub_403B10
.text:0040177A                 cmp     eax, 0FFFFFFFFh
.text:0040177D                 mov     ecx, eax
.text:0040177F                 jz      loc_401A0C
.text:00401785                 cmp     ecx, 2Ch ; ','
.text:00401788                 jz      loc_4019B0
.text:0040178E                 cmp     ecx, 2Ch ; ','
.text:00401791                 jg      loc_401933
.text:00401797                 cmp     ecx, 0FFFFFF7Dh
.text:0040179D                 jz      loc_4018F8
.text:004017A3                 cmp     ecx, 0FFFFFF7Eh
.text:004017A9                 jz      short loc_4017E4
.text:004017AB
.text:004017AB loc_4017AB:                             ; CODE XREF: sub_4016B0+290↓j
.text:004017AB                                         ; sub_4016B0+2D3↓j
.text:004017AB                 cmp     [ebp+var_11], 0
.text:004017AF                 jnz     short loc_4017B9
.text:004017B1                 mov     [ebp+var_11], 1
.text:004017B5                 xor     ebx, ebx
.text:004017B7                 xor     esi, esi
.text:004017B9
.text:004017B9 loc_4017B9:                             ; CODE XREF: sub_4016B0+FF↑j
.text:004017B9                 mov     edx, ebx
.text:004017BB                 mov     edi, esi
.text:004017BD                 shl     edx, 2
.text:004017C0                 shld    edi, ebx, 2
.text:004017C4                 mov     eax, ecx
.text:004017C6                 add     ebx, edx
.text:004017C8                 adc     esi, edi
.text:004017CA                 cdq
.text:004017CB                 shld    esi, ebx, 1
.text:004017CF                 add     ebx, ebx
.text:004017D1                 add     ebx, ecx
.text:004017D3                 adc     esi, edx
.text:004017D5                 add     ebx, 0FFFFFFD0h
.text:004017D8                 adc     esi, 0FFFFFFFFh
.text:004017DB
.text:004017DB loc_4017DB:                             ; CODE XREF: sub_4016B0+32C↓j
.text:004017DB                 mov     [ebp+var_12], 1
.text:004017DF                 jmp     loc_401750
.text:004017E4 ; ---------------------------------------------------------------------------
.text:004017E4
.text:004017E4 loc_4017E4:                             ; CODE XREF: sub_4016B0+F9↑j
.text:004017E4                 mov     [esp+48h+Category], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:004017EB                 call    ds:libintl_gettext
.text:004017F1                 mov     edi, ds:dword_407220
.text:004017F7                 mov     [esp+48h+Category], eax ; Format
.text:004017FA                 mov     [esp+48h+Locale], edi
.text:004017FE                 call    printf
.text:00401803                 mov     [esp+48h+Category], offset aConvertTabsInE ; "Convert tabs in each FILE to spaces, wr"...
.text:0040180A                 call    ds:libintl_gettext
.text:00401810                 mov     esi, ds:_iob
.text:00401816                 add     esi, 20h ; ' '
.text:00401819                 mov     [esp+48h+Locale], esi ; Stream
.text:0040181D                 mov     [esp+48h+Category], eax ; Buffer
.text:00401820                 call    fputs
.text:00401825                 mov     [esp+48h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:0040182C                 call    ds:libintl_gettext
.text:00401832                 mov     ebx, ds:_iob
.text:00401838                 add     ebx, 20h ; ' '
.text:0040183B                 mov     [esp+48h+Locale], ebx ; Stream
.text:0040183F                 mov     [esp+48h+Category], eax ; Buffer
.text:00401842                 call    fputs
.text:00401847                 mov     [esp+48h+Category], offset aIInitialDoNotC ; "  -i, --initial       do not convert ta"...
.text:0040184E                 call    ds:libintl_gettext
.text:00401854                 mov     ecx, ds:_iob
.text:0040185A                 add     ecx, 20h ; ' '
.text:0040185D                 mov     [esp+48h+Locale], ecx ; Stream
.text:00401861                 mov     [esp+48h+Category], eax ; Buffer
.text:00401864                 call    fputs
.text:00401869                 mov     [esp+48h+Category], offset aTTabsListUseCo ; "  -t, --tabs=LIST     use comma separat"...
.text:00401870                 call    ds:libintl_gettext
.text:00401876                 mov     edi, ds:_iob
.text:0040187C                 add     edi, 20h ; ' '
.text:0040187F                 mov     [esp+48h+Locale], edi ; Stream
.text:00401883                 mov     [esp+48h+Category], eax ; Buffer
.text:00401886                 call    fputs
.text:0040188B                 mov     [esp+48h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401892                 call    ds:libintl_gettext
.text:00401898                 mov     esi, ds:_iob
.text:0040189E                 add     esi, 20h ; ' '
.text:004018A1                 mov     [esp+48h+Locale], esi ; Stream
.text:004018A5                 mov     [esp+48h+Category], eax ; Buffer
.text:004018A8                 call    fputs
.text:004018AD                 mov     [esp+48h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:004018B4                 call    ds:libintl_gettext
.text:004018BA                 mov     ebx, ds:_iob
.text:004018C0                 add     ebx, 20h ; ' '
.text:004018C3                 mov     [esp+48h+Locale], ebx ; Stream
.text:004018C7                 mov     [esp+48h+Category], eax ; Buffer
.text:004018CA                 call    fputs
.text:004018CF                 mov     [esp+48h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004018D6                 call    ds:libintl_gettext
.text:004018DC                 mov     [esp+48h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004018E4                 mov     [esp+48h+Category], eax ; Format
.text:004018E7                 call    printf
.text:004018EC
.text:004018EC loc_4018EC:                             ; CODE XREF: sub_4016B0+281↓j
.text:004018EC                 mov     [esp+48h+Category], 0 ; Code
.text:004018F3
.text:004018F3 loc_4018F3:                             ; CODE XREF: sub_4016B0+2C9↓j
.text:004018F3                                         ; sub_4016B0+47D↓j
.text:004018F3                 call    exit
.text:004018F8 ; ---------------------------------------------------------------------------
.text:004018F8
.text:004018F8 loc_4018F8:                             ; CODE XREF: sub_4016B0+ED↑j
.text:004018F8                 mov     [esp+48h+var_34], 0
.text:00401900                 mov     edx, ds:_iob
.text:00401906                 mov     dword ptr [esp+48h+var_38], offset aDavidMackenzie ; "David MacKenzie"
.text:0040190E                 mov     dword ptr [esp+48h+var_3C], offset a530 ; "5.3.0"
.text:00401916                 add     edx, 20h ; ' '
.text:00401919                 mov     [esp+48h+var_40], offset aGnuCoreutils ; "GNU coreutils"
.text:00401921                 mov     [esp+48h+Locale], offset stru_401607 ; FILE *
.text:00401929                 mov     [esp+48h+Category], edx ; FILE *
.text:0040192C                 call    sub_403AD0
.text:00401931                 jmp     short loc_4018EC
.text:00401933 ; ---------------------------------------------------------------------------
.text:00401933
.text:00401933 loc_401933:                             ; CODE XREF: sub_4016B0+E1↑j
.text:00401933                 cmp     ecx, 69h ; 'i'
.text:00401936                 jz      short loc_4019A0
.text:00401938                 cmp     ecx, 69h ; 'i'
.text:0040193B                 jg      short loc_401980
.text:0040193D                 cmp     ecx, 3Fh ; '?'
.text:00401940                 jnz     loc_4017AB
.text:00401946
.text:00401946 loc_401946:                             ; CODE XREF: sub_4016B0+57E↓j
.text:00401946                 mov     [esp+48h+Category], (offset stru_401607._bufsiz+1)
.text:0040194D                 call    ds:libintl_gettext
.text:00401953                 mov     ebx, ds:_iob
.text:00401959                 mov     esi, ds:dword_407220
.text:0040195F                 add     ebx, 40h ; '@'
.text:00401962                 mov     [esp+48h+var_40], esi
.text:00401966                 mov     [esp+48h+Locale], eax ; Format
.text:0040196A                 mov     [esp+48h+Category], ebx ; Stream
.text:0040196D                 call    fprintf
.text:00401972                 mov     [esp+48h+Category], 1
.text:00401979                 jmp     loc_4018F3
.text:00401979 ; ---------------------------------------------------------------------------
.text:0040197E                 align 10h
.text:00401980
.text:00401980 loc_401980:                             ; CODE XREF: sub_4016B0+28B↑j
.text:00401980                 cmp     ecx, 74h ; 't'
.text:00401983                 jnz     loc_4017AB
.text:00401989                 mov     edx, ds:dword_407240
.text:0040198F                 mov     [esp+48h+Category], edx ; char *
.text:00401992                 call    sub_401DF0
.text:00401997                 jmp     loc_401750
.text:00401997 ; ---------------------------------------------------------------------------
.text:0040199C                 align 10h
.text:004019A0
.text:004019A0 loc_4019A0:                             ; CODE XREF: sub_4016B0+286↑j
.text:004019A0                 mov     ds:byte_407010, 0
.text:004019A7                 jmp     loc_401750
.text:004019A7 ; ---------------------------------------------------------------------------
.text:004019AC                 align 10h
.text:004019B0
.text:004019B0 loc_4019B0:                             ; CODE XREF: sub_4016B0+D8↑j
.text:004019B0                 cmp     [ebp+var_11], 0
.text:004019B4                 jz      short loc_4019D8
.text:004019B6                 mov     edi, ds:dword_407050
.text:004019BC                 cmp     edi, ds:dword_407040
.text:004019C2                 jz      short loc_4019E1
.text:004019C4
.text:004019C4 loc_4019C4:                             ; CODE XREF: sub_4016B0+35A↓j
.text:004019C4                 mov     edx, ds:dword_407030
.text:004019CA                 mov     [edx+edi*8], ebx
.text:004019CD                 mov     [edx+edi*8+4], esi
.text:004019D1                 inc     edi
.text:004019D2                 mov     ds:dword_407050, edi
.text:004019D8
.text:004019D8 loc_4019D8:                             ; CODE XREF: sub_4016B0+304↑j
.text:004019D8                 mov     [ebp+var_11], 0
.text:004019DC                 jmp     loc_4017DB
.text:004019E1 ; ---------------------------------------------------------------------------
.text:004019E1
.text:004019E1 loc_4019E1:                             ; CODE XREF: sub_4016B0+312↑j
.text:004019E1                 mov     [esp+48h+var_40], 8 ; int
.text:004019E9                 mov     ecx, ds:dword_407030
.text:004019EF                 mov     [esp+48h+Locale], offset dword_407040 ; int
.text:004019F7                 mov     [esp+48h+Category], ecx ; void *
.text:004019FA                 call    sub_403EF0
.text:004019FF                 mov     ds:dword_407030, eax
.text:00401A04                 mov     edi, ds:dword_407050
.text:00401A0A                 jmp     short loc_4019C4
.text:00401A0C ; ---------------------------------------------------------------------------
.text:00401A0C
.text:00401A0C loc_401A0C:                             ; CODE XREF: sub_4016B0+CF↑j
.text:00401A0C                 cmp     [ebp+var_12], 0
.text:00401A10                 jz      short loc_401A22
.text:00401A12                 call    sub_4035B0
.text:00401A17                 cmp     eax, 30DAFh
.text:00401A1C                 jg      loc_401C09
.text:00401A22
.text:00401A22 loc_401A22:                             ; CODE XREF: sub_4016B0+360↑j
.text:00401A22                 cmp     [ebp+var_11], 0
.text:00401A26                 jz      loc_401BF5
.text:00401A2C                 mov     edi, ds:dword_407050
.text:00401A32                 cmp     edi, ds:dword_407040
.text:00401A38                 jz      loc_401BC7
.text:00401A3E
.text:00401A3E loc_401A3E:                             ; CODE XREF: sub_4016B0+540↓j
.text:00401A3E                 mov     ecx, ds:dword_407030
.text:00401A44                 mov     [ecx+edi*8], ebx
.text:00401A47                 mov     [ecx+edi*8+4], esi
.text:00401A4B                 inc     edi
.text:00401A4C                 mov     [ebp+var_1C], ecx
.text:00401A4F                 mov     ds:dword_407050, edi
.text:00401A55
.text:00401A55 loc_401A55:                             ; CODE XREF: sub_4016B0+554↓j
.text:00401A55                 mov     [ebp+var_18], 0
.text:00401A5C                 cmp     [ebp+var_18], edi
.text:00401A5F                 mov     [ebp+var_28], 0
.text:00401A66                 mov     [ebp+var_24], 0
.text:00401A6D                 jnb     short loc_401AE4
.text:00401A6F                 nop
.text:00401A70
.text:00401A70 loc_401A70:                             ; CODE XREF: sub_4016B0+42C↓j
.text:00401A70                 mov     esi, [ebp+var_1C]
.text:00401A73                 mov     ecx, [ebp+var_18]
.text:00401A76                 mov     edx, [esi+ecx*8+4]
.text:00401A7A                 mov     eax, [esi+ecx*8]
.text:00401A7D                 mov     esi, edx
.text:00401A7F                 or      esi, eax
.text:00401A81                 jz      loc_401B90
.text:00401A87
.text:00401A87 loc_401A87:                             ; CODE XREF: sub_4016B0+512↓j
.text:00401A87                 cmp     edx, [ebp+var_24]
.text:00401A8A                 ja      short loc_401AD0
.text:00401A8C                 jb      short loc_401A93
.text:00401A8E                 cmp     eax, [ebp+var_28]
.text:00401A91                 ja      short loc_401AD0
.text:00401A93
.text:00401A93 loc_401A93:                             ; CODE XREF: sub_4016B0+3DC↑j
.text:00401A93                 mov     [esp+48h+Category], offset aTabSizesMustBe ; "tab sizes must be ascending"
.text:00401A9A                 call    ds:libintl_gettext
.text:00401AA0                 mov     [esp+48h+Locale], 0 ; ErrorMessage
.text:00401AA8                 mov     [esp+48h+Category], 1 ; Code
.text:00401AAF                 mov     [esp+48h+var_40], eax ; char *
.text:00401AB3                 call    sub_405510
.text:00401AB8                 mov     ebx, [ebp+var_18]
.text:00401ABB                 mov     esi, [ebp+var_1C]
.text:00401ABE                 mov     eax, [esi+ebx*8]
.text:00401AC1                 mov     edx, [esi+ebx*8+4]
.text:00401AC5                 lea     esi, [esi+0]
.text:00401AC9                 lea     edi, [edi+0]
.text:00401AD0
.text:00401AD0 loc_401AD0:                             ; CODE XREF: sub_4016B0+3DA↑j
.text:00401AD0                                         ; sub_4016B0+3E1↑j
.text:00401AD0                 inc     [ebp+var_18]
.text:00401AD3                 mov     [ebp+var_28], eax
.text:00401AD6                 mov     [ebp+var_24], edx
.text:00401AD9                 cmp     [ebp+var_18], edi
.text:00401ADC                 jb      short loc_401A70
.text:00401ADE                 mov     edi, ds:dword_407050
.text:00401AE4
.text:00401AE4 loc_401AE4:                             ; CODE XREF: sub_4016B0+3BD↑j
.text:00401AE4                 test    edi, edi
.text:00401AE6                 jnz     short loc_401B65
.text:00401AE8                 mov     eax, 8
.text:00401AED                 mov     ds:dword_407020, eax
.text:00401AF2
.text:00401AF2 loc_401AF2:                             ; CODE XREF: sub_4016B0+4C0↓j
.text:00401AF2                 xor     ebx, ebx
.text:00401AF4                 mov     ds:dword_407024, ebx
.text:00401AFA
.text:00401AFA loc_401AFA:                             ; CODE XREF: sub_4016B0+4D9↓j
.text:00401AFA                 mov     edi, dword_406020
.text:00401B00                 mov     eax, [ebp+arg_4]
.text:00401B03                 cmp     edi, [ebp+arg_0]
.text:00401B06                 lea     edx, [eax+edi*4]
.text:00401B09                 jl      short loc_401B10
.text:00401B0B                 mov     edx, offset off_406010
.text:00401B10
.text:00401B10 loc_401B10:                             ; CODE XREF: sub_4016B0+459↑j
.text:00401B10                 mov     ds:dword_407060, edx
.text:00401B16                 call    sub_4020A0
.text:00401B1B                 cmp     ds:byte_407070, 0
.text:00401B22                 jnz     short loc_401B32
.text:00401B24
.text:00401B24 loc_401B24:                             ; CODE XREF: sub_4016B0+492↓j
.text:00401B24                                         ; sub_4016B0+4B3↓j
.text:00401B24                 mov     esi, ds:dword_407080
.text:00401B2A                 mov     [esp+48h+Category], esi
.text:00401B2D                 jmp     loc_4018F3
.text:00401B32 ; ---------------------------------------------------------------------------
.text:00401B32
.text:00401B32 loc_401B32:                             ; CODE XREF: sub_4016B0+472↑j
.text:00401B32                 mov     edx, ds:_iob
.text:00401B38                 mov     [esp+48h+Category], edx ; Stream
.text:00401B3B                 call    fclose
.text:00401B40                 test    eax, eax
.text:00401B42                 jz      short loc_401B24
.text:00401B44                 call    _errno
.text:00401B49                 mov     [esp+48h+var_40], offset byte_401280 ; char *
.text:00401B51                 mov     ecx, [eax]
.text:00401B53                 mov     [esp+48h+Category], 1 ; Code
.text:00401B5A                 mov     [esp+48h+Locale], ecx ; ErrorMessage
.text:00401B5E                 call    sub_405510
.text:00401B63                 jmp     short loc_401B24
.text:00401B65 ; ---------------------------------------------------------------------------
.text:00401B65
.text:00401B65 loc_401B65:                             ; CODE XREF: sub_4016B0+436↑j
.text:00401B65                 dec     edi
.text:00401B66                 jz      short loc_401B72
.text:00401B68                 xor     esi, esi
.text:00401B6A                 mov     ds:dword_407020, esi
.text:00401B70                 jmp     short loc_401AF2
.text:00401B72 ; ---------------------------------------------------------------------------
.text:00401B72
.text:00401B72 loc_401B72:                             ; CODE XREF: sub_4016B0+4B6↑j
.text:00401B72                 mov     ecx, ds:dword_407030
.text:00401B78                 mov     edi, [ecx+4]
.text:00401B7B                 mov     edx, [ecx]
.text:00401B7D                 mov     ds:dword_407024, edi
.text:00401B83                 mov     ds:dword_407020, edx
.text:00401B89                 jmp     loc_401AFA
.text:00401B89 ; ---------------------------------------------------------------------------
.text:00401B8E                 align 10h
.text:00401B90
.text:00401B90 loc_401B90:                             ; CODE XREF: sub_4016B0+3D1↑j
.text:00401B90                 mov     [esp+48h+Category], offset aTabSizeCannotB ; "tab size cannot be 0"
.text:00401B97                 call    ds:libintl_gettext
.text:00401B9D                 mov     [esp+48h+Locale], 0 ; ErrorMessage
.text:00401BA5                 mov     [esp+48h+Category], 1 ; Code
.text:00401BAC                 mov     [esp+48h+var_40], eax ; char *
.text:00401BB0                 call    sub_405510
.text:00401BB5                 mov     ebx, [ebp+var_18]
.text:00401BB8                 mov     esi, [ebp+var_1C]
.text:00401BBB                 mov     eax, [esi+ebx*8]
.text:00401BBE                 mov     edx, [esi+ebx*8+4]
.text:00401BC2                 jmp     loc_401A87
.text:00401BC7 ; ---------------------------------------------------------------------------
.text:00401BC7
.text:00401BC7 loc_401BC7:                             ; CODE XREF: sub_4016B0+388↑j
.text:00401BC7                 mov     [esp+48h+var_40], 8 ; int
.text:00401BCF                 mov     edi, ds:dword_407030
.text:00401BD5                 mov     [esp+48h+Locale], offset dword_407040 ; int
.text:00401BDD                 mov     [esp+48h+Category], edi ; void *
.text:00401BE0                 call    sub_403EF0
.text:00401BE5                 mov     ds:dword_407030, eax
.text:00401BEA                 mov     edi, ds:dword_407050
.text:00401BF0                 jmp     loc_401A3E
.text:00401BF5 ; ---------------------------------------------------------------------------
.text:00401BF5
.text:00401BF5 loc_401BF5:                             ; CODE XREF: sub_4016B0+376↑j
.text:00401BF5                 mov     edx, ds:dword_407030
.text:00401BFB                 mov     edi, ds:dword_407050
.text:00401C01                 mov     [ebp+var_1C], edx
.text:00401C04                 jmp     loc_401A55
.text:00401C09 ; ---------------------------------------------------------------------------
.text:00401C09
.text:00401C09 loc_401C09:                             ; CODE XREF: sub_4016B0+36C↑j
.text:00401C09                 mov     [esp+48h+Category], offset aListOptionIsOb ; "`-LIST' option is obsolete; use `-t LIS"...
.text:00401C10                 call    ds:libintl_gettext
.text:00401C16                 mov     [esp+48h+Locale], 0 ; ErrorMessage
.text:00401C1E                 mov     [esp+48h+Category], 0 ; Code
.text:00401C25                 mov     [esp+48h+var_40], eax ; char *
.text:00401C29                 call    sub_405510
.text:00401C2E                 jmp     loc_401946
.text:00401C2E sub_4016B0      endp
.text:00401C2E
.text:00401C2E ; ---------------------------------------------------------------------------
.text:00401C33                 align 10h
.text:00401C40                 push    ebx
.text:00401C41                 sub     esp, 18h
.text:00401C44                 mov     ebx, [esp+20h]
.text:00401C48                 test    ebx, ebx
.text:00401C4A                 jz      short loc_401C80
.text:00401C4C                 mov     dword ptr [esp], (offset stru_401607._bufsiz+1)
.text:00401C53                 call    ds:libintl_gettext
.text:00401C59                 mov     edx, ds:_iob
.text:00401C5F                 mov     ecx, ds:dword_407220
.text:00401C65                 add     edx, 40h ; '@'
.text:00401C68                 mov     [esp+8], ecx
.text:00401C6C                 mov     [esp+4], eax
.text:00401C70                 mov     [esp], edx
.text:00401C73                 call    fprintf
.text:00401C78
.text:00401C78 loc_401C78:                             ; CODE XREF: .text:00401D88↓j
.text:00401C78                 mov     [esp], ebx
.text:00401C7B                 call    exit
.text:00401C80 ; ---------------------------------------------------------------------------
.text:00401C80
.text:00401C80 loc_401C80:                             ; CODE XREF: .text:00401C4A↑j
.text:00401C80                 mov     dword ptr [esp], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:00401C87                 call    ds:libintl_gettext
.text:00401C8D                 mov     ecx, ds:dword_407220
.text:00401C93                 mov     [esp], eax
.text:00401C96                 mov     [esp+4], ecx
.text:00401C9A                 call    printf
.text:00401C9F                 mov     dword ptr [esp], offset aConvertTabsInE ; "Convert tabs in each FILE to spaces, wr"...
.text:00401CA6                 call    ds:libintl_gettext
.text:00401CAC                 mov     ecx, ds:_iob
.text:00401CB2                 add     ecx, 20h ; ' '
.text:00401CB5                 mov     [esp+4], ecx
.text:00401CB9                 mov     [esp], eax
.text:00401CBC                 call    fputs
.text:00401CC1                 mov     dword ptr [esp], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401CC8                 call    ds:libintl_gettext
.text:00401CCE                 mov     ecx, ds:_iob
.text:00401CD4                 add     ecx, 20h ; ' '
.text:00401CD7                 mov     [esp+4], ecx
.text:00401CDB                 mov     [esp], eax
.text:00401CDE                 call    fputs
.text:00401CE3                 mov     dword ptr [esp], offset aIInitialDoNotC ; "  -i, --initial       do not convert ta"...
.text:00401CEA                 call    ds:libintl_gettext
.text:00401CF0                 mov     ecx, ds:_iob
.text:00401CF6                 add     ecx, 20h ; ' '
.text:00401CF9                 mov     [esp+4], ecx
.text:00401CFD                 mov     [esp], eax
.text:00401D00                 call    fputs
.text:00401D05                 mov     dword ptr [esp], offset aTTabsListUseCo ; "  -t, --tabs=LIST     use comma separat"...
.text:00401D0C                 call    ds:libintl_gettext
.text:00401D12                 mov     ecx, ds:_iob
.text:00401D18                 add     ecx, 20h ; ' '
.text:00401D1B                 mov     [esp+4], ecx
.text:00401D1F                 mov     [esp], eax
.text:00401D22                 call    fputs
.text:00401D27                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401D2E                 call    ds:libintl_gettext
.text:00401D34                 mov     ecx, ds:_iob
.text:00401D3A                 add     ecx, 20h ; ' '
.text:00401D3D                 mov     [esp+4], ecx
.text:00401D41                 mov     [esp], eax
.text:00401D44                 call    fputs
.text:00401D49                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401D50                 call    ds:libintl_gettext
.text:00401D56                 mov     ecx, ds:_iob
.text:00401D5C                 add     ecx, 20h ; ' '
.text:00401D5F                 mov     [esp+4], ecx
.text:00401D63                 mov     [esp], eax
.text:00401D66                 call    fputs
.text:00401D6B                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401D72                 call    ds:libintl_gettext
.text:00401D78                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401D80                 mov     [esp], eax
.text:00401D83                 call    printf
.text:00401D88                 jmp     loc_401C78
.text:00401D88 ; ---------------------------------------------------------------------------
.text:00401D8D ; const char Control[]
.text:00401D8D Control         db '0123456789',0       ; DATA XREF: sub_401DF0:loc_401EE0↓o
.text:00401D98 aTabStopIsTooLa db 'tab stop is too large %s',0
.text:00401D98                                         ; DATA XREF: sub_401DF0+120↓o
.text:00401DB1                 db 0EBh, 0Dh, 90h
.text:00401DB4                 align 10h
.text:00401DC0 aTabSizeContain db 'tab size contains invalid character(s): %s',0
.text:00401DC0                                         ; DATA XREF: sub_401DF0+1EB↓o
.text:00401DEB                 align 10h
.text:00401DF0
.text:00401DF0 ; =============== S U B R O U T I N E =======================================
.text:00401DF0
.text:00401DF0
.text:00401DF0 ; int __cdecl sub_401DF0(char *)
.text:00401DF0 sub_401DF0      proc near               ; CODE XREF: sub_4016B0+2E2↑p
.text:00401DF0
.text:00401DF0 Str             = dword ptr -4Ch
.text:00401DF0 Control         = dword ptr -48h
.text:00401DF0 var_44          = dword ptr -44h
.text:00401DF0 var_40          = byte ptr -40h
.text:00401DF0 var_34          = dword ptr -34h
.text:00401DF0 var_30          = dword ptr -30h
.text:00401DF0 var_2C          = dword ptr -2Ch
.text:00401DF0 var_28          = dword ptr -28h
.text:00401DF0 var_24          = dword ptr -24h
.text:00401DF0 var_1D          = byte ptr -1Dh
.text:00401DF0 var_1C          = dword ptr -1Ch
.text:00401DF0 var_15          = byte ptr -15h
.text:00401DF0 arg_0           = dword ptr  4
.text:00401DF0
.text:00401DF0                 push    ebp
.text:00401DF1                 push    edi
.text:00401DF2                 push    esi
.text:00401DF3                 push    ebx
.text:00401DF4                 sub     esp, 3Ch
.text:00401DF7                 mov     esi, [esp+4Ch+arg_0]
.text:00401DFB                 mov     [esp+4Ch+var_15], 0
.text:00401E00                 mov     [esp+4Ch+var_1D], 1
.text:00401E05                 movzx   eax, byte ptr [esi]
.text:00401E08                 test    al, al
.text:00401E0A                 jz      loc_401FA0
.text:00401E10
.text:00401E10 loc_401E10:                             ; CODE XREF: sub_401DF0+16E↓j
.text:00401E10                 cmp     al, 2Ch ; ','
.text:00401E12                 jz      loc_402012
.text:00401E18                 movzx   edx, al
.text:00401E1B                 cmp     dl, 20h ; ' '
.text:00401E1E                 jz      loc_402012
.text:00401E24                 cmp     dl, 9
.text:00401E27                 jz      loc_402012
.text:00401E2D                 movsx   edx, al
.text:00401E30                 mov     [esp+4Ch+var_24], edx
.text:00401E34                 sub     edx, 30h ; '0'
.text:00401E37                 cmp     edx, 9
.text:00401E3A                 ja      loc_401FD3
.text:00401E40                 cmp     [esp+4Ch+var_15], 0
.text:00401E45                 jnz     short loc_401E54
.text:00401E47                 mov     [esp+4Ch+var_15], 1
.text:00401E4C                 xor     edi, edi
.text:00401E4E                 xor     ebp, ebp
.text:00401E50                 mov     [esp+4Ch+var_1C], esi
.text:00401E54
.text:00401E54 loc_401E54:                             ; CODE XREF: sub_401DF0+55↑j
.text:00401E54                 mov     edx, edi
.text:00401E56                 mov     ebx, ebp
.text:00401E58                 shl     edx, 2
.text:00401E5B                 mov     [esp+4Ch+var_34], edx
.text:00401E5F                 shld    ebx, edi, 2
.text:00401E63                 add     [esp+4Ch+var_34], edi
.text:00401E67                 mov     [esp+4Ch+var_30], ebx
.text:00401E6B                 mov     ebx, [esp+4Ch+var_24]
.text:00401E6F                 mov     ecx, [esp+4Ch+var_34]
.text:00401E73                 adc     [esp+4Ch+var_30], ebp
.text:00401E77                 mov     edx, ebx
.text:00401E79                 sar     edx, 1Fh
.text:00401E7C                 mov     [esp+4Ch+var_2C], ebx
.text:00401E80                 mov     eax, [esp+4Ch+var_30]
.text:00401E84                 mov     [esp+4Ch+var_28], edx
.text:00401E88                 shld    eax, ecx, 1
.text:00401E8C                 add     ecx, ecx
.text:00401E8E                 mov     [esp+4Ch+var_34], ecx
.text:00401E92                 mov     ecx, [esp+4Ch+var_34]
.text:00401E96                 add     [esp+4Ch+var_2C], ecx
.text:00401E9A                 mov     [esp+4Ch+var_30], eax
.text:00401E9E                 mov     ebx, [esp+4Ch+var_30]
.text:00401EA2                 adc     [esp+4Ch+var_28], ebx
.text:00401EA6                 add     [esp+4Ch+var_2C], 0FFFFFFD0h
.text:00401EAB                 adc     [esp+4Ch+var_28], 0FFFFFFFFh
.text:00401EB0                 cmp     ebp, 19999999h
.text:00401EB6                 ja      short loc_401EE0
.text:00401EB8                 jb      short loc_401EC2
.text:00401EBA                 cmp     edi, 99999999h
.text:00401EC0                 ja      short loc_401EE0
.text:00401EC2
.text:00401EC2 loc_401EC2:                             ; CODE XREF: sub_401DF0+C8↑j
.text:00401EC2                 mov     edi, [esp+4Ch+var_30]
.text:00401EC6                 cmp     [esp+4Ch+var_28], edi
.text:00401ECA                 jb      short loc_401EE0
.text:00401ECC                 ja      loc_401F50
.text:00401ED2                 mov     ebp, [esp+4Ch+var_34]
.text:00401ED6                 cmp     [esp+4Ch+var_2C], ebp
.text:00401EDA                 jnb     short loc_401F50
.text:00401EDC                 lea     esi, [esi+0]
.text:00401EE0
.text:00401EE0 loc_401EE0:                             ; CODE XREF: sub_401DF0+C6↑j
.text:00401EE0                                         ; sub_401DF0+D0↑j ...
.text:00401EE0                 mov     [esp+4Ch+Control], offset Control ; "0123456789"
.text:00401EE8                 mov     ebx, [esp+4Ch+var_1C]
.text:00401EEC                 mov     [esp+4Ch+Str], ebx ; Str
.text:00401EEF                 call    strspn
.text:00401EF4                 mov     [esp+4Ch+Control], eax ; int
.text:00401EF8                 mov     ebp, eax
.text:00401EFA                 mov     eax, [esp+4Ch+var_1C]
.text:00401EFE                 mov     [esp+4Ch+Str], eax ; void *
.text:00401F01                 call    sub_403DC0
.text:00401F06                 mov     [esp+4Ch+Str], eax ; char *
.text:00401F09                 mov     edi, eax
.text:00401F0B                 call    sub_403D90
.text:00401F10                 mov     [esp+4Ch+Str], offset aTabStopIsTooLa ; "tab stop is too large %s"
.text:00401F17                 mov     esi, eax
.text:00401F19                 call    ds:libintl_gettext
.text:00401F1F                 mov     dword ptr [esp+4Ch+var_40], esi ; char
.text:00401F23                 mov     [esp+4Ch+Control], 0 ; ErrorMessage
.text:00401F2B                 mov     [esp+4Ch+Str], 0 ; Code
.text:00401F32                 mov     [esp+4Ch+var_44], eax ; char *
.text:00401F36                 call    sub_405510
.text:00401F3B                 mov     [esp+4Ch+Str], edi ; Block
.text:00401F3E                 call    free
.text:00401F43                 mov     [esp+4Ch+var_1D], 0
.text:00401F48                 mov     ecx, [esp+4Ch+var_1C]
.text:00401F4C                 lea     esi, [ebp+ecx-1]
.text:00401F50
.text:00401F50 loc_401F50:                             ; CODE XREF: sub_401DF0+DC↑j
.text:00401F50                                         ; sub_401DF0+EA↑j
.text:00401F50                 mov     edi, [esp+4Ch+var_2C]
.text:00401F54                 mov     ebp, [esp+4Ch+var_28]
.text:00401F58
.text:00401F58 loc_401F58:                             ; CODE XREF: sub_401DF0+250↓j
.text:00401F58                 inc     esi
.text:00401F59                 movzx   eax, byte ptr [esi]
.text:00401F5C                 test    al, al
.text:00401F5E                 jnz     loc_401E10
.text:00401F64                 cmp     [esp+4Ch+var_1D], 0
.text:00401F69                 jz      loc_402006
.text:00401F6F                 cmp     [esp+4Ch+var_15], 0
.text:00401F74                 jz      short loc_401FA0
.text:00401F76                 mov     edx, ds:dword_407050
.text:00401F7C                 cmp     edx, ds:dword_407040
.text:00401F82                 jz      short loc_401FA8
.text:00401F84
.text:00401F84 loc_401F84:                             ; CODE XREF: sub_401DF0+1E1↓j
.text:00401F84                 mov     esi, ds:dword_407030
.text:00401F8A                 lea     ecx, [edx+1]
.text:00401F8D                 mov     ds:dword_407050, ecx
.text:00401F93                 mov     [esi+edx*8], edi
.text:00401F96                 mov     [esi+edx*8+4], ebp
.text:00401F9A                 lea     esi, [esi+0]
.text:00401FA0
.text:00401FA0 loc_401FA0:                             ; CODE XREF: sub_401DF0+1A↑j
.text:00401FA0                                         ; sub_401DF0+184↑j
.text:00401FA0                 add     esp, 3Ch
.text:00401FA3                 pop     ebx
.text:00401FA4                 pop     esi
.text:00401FA5                 pop     edi
.text:00401FA6                 pop     ebp
.text:00401FA7                 retn
.text:00401FA8 ; ---------------------------------------------------------------------------
.text:00401FA8
.text:00401FA8 loc_401FA8:                             ; CODE XREF: sub_401DF0+192↑j
.text:00401FA8                 mov     [esp+4Ch+var_44], 8 ; int
.text:00401FB0                 mov     edx, ds:dword_407030
.text:00401FB6                 mov     [esp+4Ch+Control], offset dword_407040 ; int
.text:00401FBE                 mov     [esp+4Ch+Str], edx ; void *
.text:00401FC1                 call    sub_403EF0
.text:00401FC6                 mov     ds:dword_407030, eax
.text:00401FCB                 mov     edx, ds:dword_407050
.text:00401FD1                 jmp     short loc_401F84
.text:00401FD3 ; ---------------------------------------------------------------------------
.text:00401FD3
.text:00401FD3 loc_401FD3:                             ; CODE XREF: sub_401DF0+4A↑j
.text:00401FD3                 mov     [esp+4Ch+Str], esi ; char *
.text:00401FD6                 call    sub_403D90
.text:00401FDB                 mov     [esp+4Ch+Str], offset aTabSizeContain ; "tab size contains invalid character(s):"...
.text:00401FE2                 mov     ebp, eax
.text:00401FE4                 call    ds:libintl_gettext
.text:00401FEA                 mov     dword ptr [esp+4Ch+var_40], ebp ; char
.text:00401FEE                 mov     [esp+4Ch+Control], 0 ; ErrorMessage
.text:00401FF6                 mov     [esp+4Ch+Str], 0 ; Code
.text:00401FFD                 mov     [esp+4Ch+var_44], eax ; char *
.text:00402001                 call    sub_405510
.text:00402006
.text:00402006 loc_402006:                             ; CODE XREF: sub_401DF0+179↑j
.text:00402006                 mov     [esp+4Ch+Str], 1 ; Code
.text:0040200D                 call    exit
.text:00402012 ; ---------------------------------------------------------------------------
.text:00402012
.text:00402012 loc_402012:                             ; CODE XREF: sub_401DF0+22↑j
.text:00402012                                         ; sub_401DF0+2E↑j ...
.text:00402012                 cmp     [esp+4Ch+var_15], 0
.text:00402017                 jz      short loc_40203B
.text:00402019                 mov     edx, ds:dword_407050
.text:0040201F                 cmp     edx, ds:dword_407040
.text:00402025                 jz      short loc_402045
.text:00402027
.text:00402027 loc_402027:                             ; CODE XREF: sub_401DF0+27E↓j
.text:00402027                 mov     ecx, ds:dword_407030
.text:0040202D                 mov     [ecx+edx*8], edi
.text:00402030                 mov     [ecx+edx*8+4], ebp
.text:00402034                 inc     edx
.text:00402035                 mov     ds:dword_407050, edx
.text:0040203B
.text:0040203B loc_40203B:                             ; CODE XREF: sub_401DF0+227↑j
.text:0040203B                 mov     [esp+4Ch+var_15], 0
.text:00402040                 jmp     loc_401F58
.text:00402045 ; ---------------------------------------------------------------------------
.text:00402045
.text:00402045 loc_402045:                             ; CODE XREF: sub_401DF0+235↑j
.text:00402045                 mov     [esp+4Ch+var_44], 8 ; int
.text:0040204D                 mov     edx, ds:dword_407030
.text:00402053                 mov     [esp+4Ch+Control], offset dword_407040 ; int
.text:0040205B                 mov     [esp+4Ch+Str], edx ; void *
.text:0040205E                 call    sub_403EF0
.text:00402063                 mov     ds:dword_407030, eax
.text:00402068                 mov     edx, ds:dword_407050
.text:0040206E                 jmp     short loc_402027
.text:0040206E sub_401DF0      endp
.text:0040206E
.text:0040206E ; ---------------------------------------------------------------------------
.text:00402070 aWriteError     db 'write error',0      ; DATA XREF: sub_4020A0+111↓o
.text:00402070                                         ; sub_4020A0+26B↓o
.text:0040207C aInputLineIsToo db 'input line is too long',0
.text:0040207C                                         ; DATA XREF: sub_4020A0:loc_4021F2↓o
.text:0040207C                                         ; sub_4020A0:loc_40228C↓o
.text:00402093                 align 10h
.text:004020A0
.text:004020A0 ; =============== S U B R O U T I N E =======================================
.text:004020A0
.text:004020A0
.text:004020A0 sub_4020A0      proc near               ; CODE XREF: sub_4016B0+466↑p
.text:004020A0
.text:004020A0 FileHandle      = dword ptr -3Ch
.text:004020A0 File            = dword ptr -38h
.text:004020A0 var_34          = dword ptr -34h
.text:004020A0 var_30          = byte ptr -30h
.text:004020A0 var_2C          = dword ptr -2Ch
.text:004020A0 var_28          = dword ptr -28h
.text:004020A0 var_20          = dword ptr -20h
.text:004020A0 var_19          = byte ptr -19h
.text:004020A0 var_18          = dword ptr -18h
.text:004020A0
.text:004020A0                 push    ebp
.text:004020A1                 push    edi
.text:004020A2                 push    esi
.text:004020A3                 push    ebx
.text:004020A4                 sub     esp, 2Ch
.text:004020A7                 mov     [esp+3Ch+FileHandle], 0 ; FILE *
.text:004020AE                 call    sub_402460
.text:004020B3                 mov     [esp+3Ch+var_18], eax
.text:004020B7                 test    eax, eax
.text:004020B9                 jz      loc_4021E0
.text:004020BF                 mov     ecx, [eax+10h]
.text:004020C2                 mov     [esp+3Ch+FileHandle], ecx ; FileHandle
.text:004020C5                 call    _isatty
.text:004020CA                 test    eax, eax
.text:004020CC                 jz      loc_40240B
.text:004020D2
.text:004020D2 loc_4020D2:                             ; CODE XREF: sub_4020A0+F3↓j
.text:004020D2                                         ; sub_4020A0+390↓j ...
.text:004020D2                 mov     [esp+3Ch+var_19], 1
.text:004020D7                 xor     edi, edi
.text:004020D9                 xor     ebp, ebp
.text:004020DB                 mov     [esp+3Ch+var_20], 0
.text:004020E3                 lea     esi, [esi+0]
.text:004020E9                 lea     edi, [edi+0]
.text:004020F0
.text:004020F0 loc_4020F0:                             ; CODE XREF: sub_4020A0+ED↓j
.text:004020F0                                         ; sub_4020A0+312↓j ...
.text:004020F0                 mov     edx, [esp+3Ch+var_18]
.text:004020F4                 mov     esi, [edx+4]
.text:004020F7                 dec     esi
.text:004020F8                 mov     [edx+4], esi
.text:004020FB                 test    esi, esi
.text:004020FD                 js      loc_4023F8
.text:00402103                 mov     ecx, [edx]
.text:00402105                 movzx   esi, byte ptr [ecx]
.text:00402108                 inc     ecx
.text:00402109                 mov     [edx], ecx
.text:0040210B
.text:0040210B loc_40210B:                             ; CODE XREF: sub_4020A0+366↓j
.text:0040210B                 test    esi, esi
.text:0040210D                 js      loc_402389
.text:00402113
.text:00402113 loc_402113:                             ; CODE XREF: sub_4020A0+2FB↓j
.text:00402113                 cmp     [esp+3Ch+var_19], 0
.text:00402118                 jz      short loc_402165
.text:0040211A                 cmp     esi, 9
.text:0040211D                 jz      loc_402240
.text:00402123                 cmp     esi, 8
.text:00402126                 jz      loc_40221C
.text:0040212C                 add     edi, 1
.text:0040212F                 adc     ebp, 0
.text:00402132                 mov     eax, ebp
.text:00402134                 or      eax, edi
.text:00402136                 jz      loc_4021F2
.text:0040213C
.text:0040213C loc_40213C:                             ; CODE XREF: sub_4020A0+177↓j
.text:0040213C                                         ; sub_4020A0+18E↓j ...
.text:0040213C                 movzx   edx, [esp+3Ch+var_19]
.text:00402141                 xor     ecx, ecx
.text:00402143                 cmp     esi, 20h ; ' '
.text:00402146                 movzx   eax, ds:byte_407010
.text:0040214D                 jz      loc_4021E8
.text:00402153                 cmp     esi, 9
.text:00402156                 jz      loc_4021E8
.text:0040215C
.text:0040215C loc_40215C:                             ; CODE XREF: sub_4020A0+14D↓j
.text:0040215C                 or      eax, ecx
.text:0040215E                 test    eax, edx
.text:00402160                 setnz   [esp+3Ch+var_19]
.text:00402165
.text:00402165 loc_402165:                             ; CODE XREF: sub_4020A0+78↑j
.text:00402165                 test    esi, esi
.text:00402167                 js      short loc_4021E0
.text:00402169                 mov     edx, ds:_iob
.text:0040216F                 mov     ecx, [edx+24h]
.text:00402172                 dec     ecx
.text:00402173                 mov     [edx+24h], ecx
.text:00402176                 test    ecx, ecx
.text:00402178                 js      short loc_402198
.text:0040217A                 mov     ebx, ds:_iob
.text:00402180                 mov     edx, esi
.text:00402182                 mov     eax, [ebx+20h]
.text:00402185                 mov     [eax], dl
.text:00402187                 inc     dword ptr [ebx+20h]
.text:0040218A
.text:0040218A loc_40218A:                             ; CODE XREF: sub_4020A0+10F↓j
.text:0040218A                                         ; sub_4020A0+13B↓j
.text:0040218A                 cmp     esi, 0Ah
.text:0040218D                 jnz     loc_4020F0
.text:00402193                 jmp     loc_4020D2
.text:00402198 ; ---------------------------------------------------------------------------
.text:00402198
.text:00402198 loc_402198:                             ; CODE XREF: sub_4020A0+D8↑j
.text:00402198                 mov     [esp+3Ch+FileHandle], esi ; Ch
.text:0040219B                 mov     ecx, ds:_iob
.text:004021A1                 add     ecx, 20h ; ' '
.text:004021A4                 mov     [esp+3Ch+File], ecx ; File
.text:004021A8                 call    _flsbuf
.text:004021AD                 test    eax, eax
.text:004021AF                 jns     short loc_40218A
.text:004021B1                 mov     [esp+3Ch+FileHandle], offset aWriteError ; "write error"
.text:004021B8                 call    ds:libintl_gettext
.text:004021BE                 mov     ebx, eax
.text:004021C0                 call    _errno
.text:004021C5                 mov     [esp+3Ch+var_34], ebx ; char *
.text:004021C9                 mov     ebx, [eax]
.text:004021CB                 mov     [esp+3Ch+FileHandle], 1 ; Code
.text:004021D2                 mov     [esp+3Ch+File], ebx ; ErrorMessage
.text:004021D6                 call    sub_405510
.text:004021DB                 jmp     short loc_40218A
.text:004021DB ; ---------------------------------------------------------------------------
.text:004021DD                 align 10h
.text:004021E0
.text:004021E0 loc_4021E0:                             ; CODE XREF: sub_4020A0+19↑j
.text:004021E0                                         ; sub_4020A0+C7↑j
.text:004021E0                 add     esp, 2Ch
.text:004021E3                 pop     ebx
.text:004021E4                 pop     esi
.text:004021E5                 pop     edi
.text:004021E6                 pop     ebp
.text:004021E7                 retn
.text:004021E8 ; ---------------------------------------------------------------------------
.text:004021E8
.text:004021E8 loc_4021E8:                             ; CODE XREF: sub_4020A0+AD↑j
.text:004021E8                                         ; sub_4020A0+B6↑j
.text:004021E8                 mov     ecx, 1
.text:004021ED                 jmp     loc_40215C
.text:004021F2 ; ---------------------------------------------------------------------------
.text:004021F2
.text:004021F2 loc_4021F2:                             ; CODE XREF: sub_4020A0+96↑j
.text:004021F2                 mov     [esp+3Ch+FileHandle], offset aInputLineIsToo ; "input line is too long"
.text:004021F9                 call    ds:libintl_gettext
.text:004021FF                 mov     [esp+3Ch+File], 0 ; ErrorMessage
.text:00402207                 mov     [esp+3Ch+FileHandle], 1 ; Code
.text:0040220E                 mov     [esp+3Ch+var_34], eax ; char *
.text:00402212                 call    sub_405510
.text:00402217                 jmp     loc_40213C
.text:0040221C ; ---------------------------------------------------------------------------
.text:0040221C
.text:0040221C loc_40221C:                             ; CODE XREF: sub_4020A0+86↑j
.text:0040221C                 mov     ecx, ebp
.text:0040221E                 or      ecx, edi
.text:00402220                 jz      short loc_402228
.text:00402222                 add     edi, 0FFFFFFFFh
.text:00402225                 adc     ebp, 0FFFFFFFFh
.text:00402228
.text:00402228 loc_402228:                             ; CODE XREF: sub_4020A0+180↑j
.text:00402228                 mov     ebx, [esp+3Ch+var_20]
.text:0040222C                 test    ebx, ebx
.text:0040222E                 jz      loc_40213C
.text:00402234                 dec     [esp+3Ch+var_20]
.text:00402238                 jmp     loc_40213C
.text:00402238 ; ---------------------------------------------------------------------------
.text:0040223D                 align 10h
.text:00402240
.text:00402240 loc_402240:                             ; CODE XREF: sub_4020A0+7D↑j
.text:00402240                 mov     esi, ds:dword_407024
.text:00402246                 mov     ebx, ds:dword_407020
.text:0040224C                 mov     eax, esi
.text:0040224E                 or      eax, ebx
.text:00402250                 jz      loc_402342
.text:00402256                 mov     [esp+3Ch+var_34], ebx
.text:0040225A                 mov     dword ptr [esp+3Ch+var_30], esi ; char
.text:0040225E                 mov     [esp+3Ch+FileHandle], edi
.text:00402261                 mov     [esp+3Ch+File], ebp
.text:00402265                 call    sub_4059F0
.text:0040226A                 sub     ebx, eax
.text:0040226C                 mov     [esp+3Ch+var_2C], ebx
.text:00402270                 sbb     esi, edx
.text:00402272                 add     [esp+3Ch+var_2C], edi
.text:00402276                 mov     [esp+3Ch+var_28], esi
.text:0040227A                 adc     [esp+3Ch+var_28], ebp
.text:0040227E
.text:0040227E loc_40227E:                             ; CODE XREF: sub_4020A0+2D8↓j
.text:0040227E                 cmp     [esp+3Ch+var_28], ebp
.text:00402282                 ja      short loc_4022C0
.text:00402284                 jb      short loc_40228C
.text:00402286                 cmp     [esp+3Ch+var_2C], edi
.text:0040228A                 jnb     short loc_4022C0
.text:0040228C
.text:0040228C loc_40228C:                             ; CODE XREF: sub_4020A0+1E4↑j
.text:0040228C                 mov     [esp+3Ch+FileHandle], offset aInputLineIsToo ; "input line is too long"
.text:00402293                 call    ds:libintl_gettext
.text:00402299                 mov     [esp+3Ch+File], 0 ; ErrorMessage
.text:004022A1                 mov     [esp+3Ch+var_34], eax ; char *
.text:004022A5
.text:004022A5 loc_4022A5:                             ; CODE XREF: sub_4020A0+289↓j
.text:004022A5                 mov     [esp+3Ch+FileHandle], 1 ; Code
.text:004022AC                 call    sub_405510
.text:004022B1                 jmp     short loc_4022C0
.text:004022B1 ; ---------------------------------------------------------------------------
.text:004022B3                 align 10h
.text:004022C0
.text:004022C0 loc_4022C0:                             ; CODE XREF: sub_4020A0+1E2↑j
.text:004022C0                                         ; sub_4020A0+1EA↑j ...
.text:004022C0                 add     edi, 1
.text:004022C3                 adc     ebp, 0
.text:004022C6                 cmp     ebp, [esp+3Ch+var_28]
.text:004022CA                 jnb     short loc_402330
.text:004022CC
.text:004022CC loc_4022CC:                             ; CODE XREF: sub_4020A0+296↓j
.text:004022CC                 mov     ecx, ds:_iob
.text:004022D2                 mov     esi, [ecx+24h]
.text:004022D5                 dec     esi
.text:004022D6                 mov     [ecx+24h], esi
.text:004022D9                 test    esi, esi
.text:004022DB                 js      short loc_4022EE
.text:004022DD                 mov     ebx, ds:_iob
.text:004022E3                 mov     eax, [ebx+20h]
.text:004022E6                 mov     byte ptr [eax], 20h ; ' '
.text:004022E9                 inc     dword ptr [ebx+20h]
.text:004022EC                 jmp     short loc_4022C0
.text:004022EE ; ---------------------------------------------------------------------------
.text:004022EE
.text:004022EE loc_4022EE:                             ; CODE XREF: sub_4020A0+23B↑j
.text:004022EE                 mov     [esp+3Ch+FileHandle], 20h ; ' ' ; Ch
.text:004022F5                 mov     edx, ds:_iob
.text:004022FB                 add     edx, 20h ; ' '
.text:004022FE                 mov     [esp+3Ch+File], edx ; File
.text:00402302                 call    _flsbuf
.text:00402307                 test    eax, eax
.text:00402309                 jns     short loc_4022C0
.text:0040230B                 mov     [esp+3Ch+FileHandle], offset aWriteError ; "write error"
.text:00402312                 call    ds:libintl_gettext
.text:00402318                 mov     esi, eax
.text:0040231A                 call    _errno
.text:0040231F                 mov     [esp+3Ch+var_34], esi
.text:00402323                 mov     esi, [eax]
.text:00402325                 mov     [esp+3Ch+File], esi
.text:00402329                 jmp     loc_4022A5
.text:00402329 ; ---------------------------------------------------------------------------
.text:0040232E                 align 10h
.text:00402330
.text:00402330 loc_402330:                             ; CODE XREF: sub_4020A0+22A↑j
.text:00402330                 ja      short loc_402338
.text:00402332                 cmp     edi, [esp+3Ch+var_2C]
.text:00402336                 jb      short loc_4022CC
.text:00402338
.text:00402338 loc_402338:                             ; CODE XREF: sub_4020A0:loc_402330↑j
.text:00402338                 mov     esi, 20h ; ' '
.text:0040233D                 jmp     loc_40213C
.text:00402342 ; ---------------------------------------------------------------------------
.text:00402342
.text:00402342 loc_402342:                             ; CODE XREF: sub_4020A0+1B0↑j
.text:00402342                 mov     ebx, ds:dword_407050
.text:00402348                 mov     ecx, ds:dword_407030
.text:0040234E                 mov     esi, esi
.text:00402350
.text:00402350 loc_402350:                             ; CODE XREF: sub_4020A0+2C8↓j
.text:00402350                                         ; sub_4020A0+2CE↓j
.text:00402350                 cmp     [esp+3Ch+var_20], ebx
.text:00402354                 jz      short loc_40237D
.text:00402356                 mov     esi, [esp+3Ch+var_20]
.text:0040235A                 mov     edx, [ecx+esi*8+4]
.text:0040235E                 mov     eax, [ecx+esi*8]
.text:00402361                 inc     esi
.text:00402362                 cmp     ebp, edx
.text:00402364                 mov     [esp+3Ch+var_20], esi
.text:00402368                 ja      short loc_402350
.text:0040236A                 jb      short loc_402370
.text:0040236C                 cmp     edi, eax
.text:0040236E                 jnb     short loc_402350
.text:00402370
.text:00402370 loc_402370:                             ; CODE XREF: sub_4020A0+2CA↑j
.text:00402370                                         ; sub_4020A0+2E7↓j
.text:00402370                 mov     [esp+3Ch+var_2C], eax
.text:00402374                 mov     [esp+3Ch+var_28], edx
.text:00402378                 jmp     loc_40227E
.text:0040237D ; ---------------------------------------------------------------------------
.text:0040237D
.text:0040237D loc_40237D:                             ; CODE XREF: sub_4020A0+2B4↑j
.text:0040237D                 mov     eax, edi
.text:0040237F                 mov     edx, ebp
.text:00402381                 add     eax, 1
.text:00402384                 adc     edx, 0
.text:00402387                 jmp     short loc_402370
.text:00402389 ; ---------------------------------------------------------------------------
.text:00402389
.text:00402389 loc_402389:                             ; CODE XREF: sub_4020A0+6D↑j
.text:00402389                 mov     ebx, [esp+3Ch+var_18]
.text:0040238D                 mov     [esp+3Ch+FileHandle], ebx ; FILE *
.text:00402390                 call    sub_402460
.text:00402395                 mov     [esp+3Ch+var_18], eax
.text:00402399                 test    eax, eax
.text:0040239B                 jz      loc_402113
.text:004023A1                 mov     esi, [esp+3Ch+var_18]
.text:004023A5                 mov     ecx, [esi+10h]
.text:004023A8                 mov     [esp+3Ch+FileHandle], ecx ; FileHandle
.text:004023AB                 call    _isatty
.text:004023B0                 test    eax, eax
.text:004023B2                 jnz     loc_4020F0
.text:004023B8                 mov     [esp+3Ch+File], 8000h ; Mode
.text:004023C0                 mov     ebx, [esi+10h]
.text:004023C3                 mov     [esp+3Ch+FileHandle], ebx ; FileHandle
.text:004023C6                 call    _setmode
.text:004023CB                 mov     [esp+3Ch+FileHandle], 1 ; FileHandle
.text:004023D2                 call    _isatty
.text:004023D7                 test    eax, eax
.text:004023D9                 jnz     loc_4020F0
.text:004023DF                 mov     [esp+3Ch+File], 8000h ; Mode
.text:004023E7                 mov     [esp+3Ch+FileHandle], 1 ; FileHandle
.text:004023EE                 call    _setmode
.text:004023F3                 jmp     loc_4020F0
.text:004023F8 ; ---------------------------------------------------------------------------
.text:004023F8
.text:004023F8 loc_4023F8:                             ; CODE XREF: sub_4020A0+5D↑j
.text:004023F8                 mov     edx, [esp+3Ch+var_18]
.text:004023FC                 mov     [esp+3Ch+FileHandle], edx ; File
.text:004023FF                 call    _filbuf
.text:00402404                 mov     esi, eax
.text:00402406                 jmp     loc_40210B
.text:0040240B ; ---------------------------------------------------------------------------
.text:0040240B
.text:0040240B loc_40240B:                             ; CODE XREF: sub_4020A0+2C↑j
.text:0040240B                 mov     [esp+3Ch+File], 8000h ; Mode
.text:00402413                 mov     eax, [esp+3Ch+var_18]
.text:00402417                 mov     edx, [eax+10h]
.text:0040241A                 mov     [esp+3Ch+FileHandle], edx ; FileHandle
.text:0040241D                 call    _setmode
.text:00402422                 mov     [esp+3Ch+FileHandle], 1 ; FileHandle
.text:00402429                 call    _isatty
.text:0040242E                 test    eax, eax
.text:00402430                 jnz     loc_4020D2
.text:00402436                 mov     [esp+3Ch+File], 8000h ; Mode
.text:0040243E                 mov     [esp+3Ch+FileHandle], 1 ; FileHandle
.text:00402445                 call    _setmode
.text:0040244A                 jmp     loc_4020D2
.text:0040244A sub_4020A0      endp
.text:0040244A
.text:0040244A ; ---------------------------------------------------------------------------
.text:0040244F ; const char aR[2]
.text:0040244F aR              db 'r',0                ; DATA XREF: sub_402460:loc_4024AD↓o
.text:00402451 ; const char aS_2[]
.text:00402451 aS_2            db '%s',0               ; DATA XREF: sub_402460:loc_4024E0↓o
.text:00402451                                         ; sub_402460+E8↓o
.text:00402454                 align 10h
.text:00402460
.text:00402460 ; =============== S U B R O U T I N E =======================================
.text:00402460
.text:00402460
.text:00402460 ; int __cdecl sub_402460(FILE *)
.text:00402460 sub_402460      proc near               ; CODE XREF: sub_4020A0+E↑p
.text:00402460                                         ; sub_4020A0+2F0↑p
.text:00402460
.text:00402460 Stream          = dword ptr -1Ch
.text:00402460 Mode            = dword ptr -18h
.text:00402460 var_14          = dword ptr -14h
.text:00402460 var_10          = byte ptr -10h
.text:00402460 arg_0           = dword ptr  4
.text:00402460
.text:00402460                 push    esi
.text:00402461                 push    ebx
.text:00402462                 sub     esp, 14h
.text:00402465                 mov     ebx, [esp+1Ch+arg_0]
.text:00402469                 test    ebx, ebx
.text:0040246B                 jz      short loc_402493
.text:0040246D                 test    byte ptr [ebx+0Ch], 20h
.text:00402471                 jnz     loc_402543
.text:00402477
.text:00402477 loc_402477:                             ; CODE XREF: sub_402460+117↓j
.text:00402477                 cmp     ebx, ds:_iob
.text:0040247D                 jz      loc_402536
.text:00402483                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00402486                 call    fclose
.text:0040248B                 test    eax, eax
.text:0040248D                 jnz     loc_402525
.text:00402493
.text:00402493 loc_402493:                             ; CODE XREF: sub_402460+B↑j
.text:00402493                                         ; sub_402460+A5↓j ...
.text:00402493                 mov     ecx, ds:dword_407060
.text:00402499                 mov     esi, [ecx]
.text:0040249B                 add     ecx, 4
.text:0040249E                 mov     ds:dword_407060, ecx
.text:004024A4                 test    esi, esi
.text:004024A6                 jz      short loc_402521
.text:004024A8                 cmp     byte ptr [esi], 2Dh ; '-'
.text:004024AB                 jz      short loc_402507
.text:004024AD
.text:004024AD loc_4024AD:                             ; CODE XREF: sub_402460+AB↓j
.text:004024AD                 mov     [esp+1Ch+Mode], offset aR ; "r"
.text:004024B5                 mov     [esp+1Ch+Stream], esi ; FileName
.text:004024B8                 call    fopen
.text:004024BD                 test    eax, eax
.text:004024BF                 mov     ebx, eax
.text:004024C1                 jz      short loc_4024D1
.text:004024C3                 mov     ds:dword_407000, esi
.text:004024C9                 mov     eax, ebx
.text:004024CB
.text:004024CB loc_4024CB:                             ; CODE XREF: sub_402460+BF↓j
.text:004024CB                                         ; sub_402460+C3↓j
.text:004024CB                 add     esp, 14h
.text:004024CE                 pop     ebx
.text:004024CF                 pop     esi
.text:004024D0                 retn
.text:004024D1 ; ---------------------------------------------------------------------------
.text:004024D1
.text:004024D1 loc_4024D1:                             ; CODE XREF: sub_402460+61↑j
.text:004024D1                 call    _errno
.text:004024D6                 mov     dword ptr [esp+1Ch+var_10], esi ; char
.text:004024DA                 lea     esi, [esi+0]
.text:004024E0
.text:004024E0 loc_4024E0:                             ; CODE XREF: sub_402460+D4↓j
.text:004024E0                 mov     [esp+1Ch+var_14], offset aS_2 ; "%s"
.text:004024E8                 mov     esi, 1
.text:004024ED                 mov     edx, [eax]
.text:004024EF                 mov     [esp+1Ch+Stream], 0 ; Code
.text:004024F6                 mov     [esp+1Ch+Mode], edx ; ErrorMessage
.text:004024FA                 call    sub_405510
.text:004024FF                 mov     ds:dword_407080, esi
.text:00402505                 jmp     short loc_402493
.text:00402507 ; ---------------------------------------------------------------------------
.text:00402507
.text:00402507 loc_402507:                             ; CODE XREF: sub_402460+4B↑j
.text:00402507                 cmp     byte ptr [esi+1], 0
.text:0040250B                 jnz     short loc_4024AD
.text:0040250D                 mov     ds:byte_407070, 1
.text:00402514                 mov     eax, ds:_iob
.text:00402519                 mov     ds:dword_407000, esi
.text:0040251F                 jmp     short loc_4024CB
.text:00402521 ; ---------------------------------------------------------------------------
.text:00402521
.text:00402521 loc_402521:                             ; CODE XREF: sub_402460+46↑j
.text:00402521                 xor     eax, eax
.text:00402523                 jmp     short loc_4024CB
.text:00402525 ; ---------------------------------------------------------------------------
.text:00402525
.text:00402525 loc_402525:                             ; CODE XREF: sub_402460+2D↑j
.text:00402525                 call    _errno
.text:0040252A                 mov     ebx, ds:dword_407000
.text:00402530                 mov     dword ptr [esp+1Ch+var_10], ebx
.text:00402534                 jmp     short loc_4024E0
.text:00402536 ; ---------------------------------------------------------------------------
.text:00402536
.text:00402536 loc_402536:                             ; CODE XREF: sub_402460+1D↑j
.text:00402536                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00402539                 call    clearerr
.text:0040253E                 jmp     loc_402493
.text:00402543 ; ---------------------------------------------------------------------------
.text:00402543
.text:00402543 loc_402543:                             ; CODE XREF: sub_402460+11↑j
.text:00402543                 call    _errno
.text:00402548                 mov     [esp+1Ch+var_14], offset aS_2 ; "%s"
.text:00402550                 mov     ecx, ds:dword_407000
.text:00402556                 mov     dword ptr [esp+1Ch+var_10], ecx ; char
.text:0040255A                 mov     edx, [eax]
.text:0040255C                 mov     [esp+1Ch+Stream], 0 ; Code
.text:00402563                 mov     [esp+1Ch+Mode], edx ; ErrorMessage
.text:00402567                 call    sub_405510
.text:0040256C                 mov     edx, 1
.text:00402571                 mov     ds:dword_407080, edx
.text:00402577                 jmp     loc_402477
.text:00402577 sub_402460      endp
.text:00402577
.text:00402577 ; ---------------------------------------------------------------------------
.text:0040257C                 align 10h
.text:00402580 dword_402580    dd 90002D2Dh, 7 dup(90909090h)
.text:00402580                                         ; DATA XREF: sub_4027D0+E4↓o
.text:004025A0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004025A0                                         ; DATA XREF: sub_4027D0+2FC↓o
.text:004025CD                 align 20h
.text:004025E0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004025E0                                         ; DATA XREF: sub_4027D0:loc_402B32↓o
.text:0040260D                 align 20h
.text:00402620 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00402620                                         ; DATA XREF: sub_4027D0:loc_402BD0↓o
.text:00402620                                         ; sub_4027D0:loc_402F97↓o
.text:00402646                 align 20h
.text:00402660 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00402660                                         ; DATA XREF: sub_4027D0+48E↓o
.text:00402680 dword_402680    dd 90909000h, 7 dup(90909090h)
.text:00402680                                         ; DATA XREF: sub_4027D0:loc_402CA1↓o
.text:004026A0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:004026A0                                         ; DATA XREF: sub_4027D0:loc_402CBA↓o
.text:004026C0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:004026C0                                         ; DATA XREF: sub_4027D0:loc_402D9F↓o
.text:004026C0                                         ; sub_4027D0:loc_4030CC↓o
.text:004026E7                 align 20h
.text:00402700 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402700                                         ; DATA XREF: sub_4027D0:loc_402F13↓o
.text:0040272E                 align 20h
.text:00402740 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00402740                                         ; DATA XREF: sub_4027D0:loc_402FFF↓o
.text:00402761 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00402761                                         ; DATA XREF: sub_4027D0+93F↓o
.text:0040277B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040277B                                         ; DATA XREF: sub_4027D0:loc_403147↓o
.text:00402795 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00402795                                         ; DATA XREF: sub_4027D0:loc_40316E↓o
.text:004027B3 ; const char VarName[]
.text:004027B3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_4027D0:loc_403320↓o
.text:004027C3                 align 10h
.text:004027D0
.text:004027D0 ; =============== S U B R O U T I N E =======================================
.text:004027D0
.text:004027D0
.text:004027D0 ; int __cdecl sub_4027D0(int, int, char *Str, int, int, int, int, int)
.text:004027D0 sub_4027D0      proc near               ; CODE XREF: sub_403360+5A↓p
.text:004027D0                                         ; .text:0040344A↓p ...
.text:004027D0
.text:004027D0 Str1            = dword ptr -5Ch
.text:004027D0 Str2            = dword ptr -58h
.text:004027D0 MaxCount        = dword ptr -54h
.text:004027D0 var_50          = dword ptr -50h
.text:004027D0 var_4C          = dword ptr -4Ch
.text:004027D0 var_3C          = dword ptr -3Ch
.text:004027D0 var_38          = dword ptr -38h
.text:004027D0 var_34          = dword ptr -34h
.text:004027D0 var_30          = dword ptr -30h
.text:004027D0 var_2C          = dword ptr -2Ch
.text:004027D0 var_28          = dword ptr -28h
.text:004027D0 var_24          = dword ptr -24h
.text:004027D0 var_20          = dword ptr -20h
.text:004027D0 var_1C          = dword ptr -1Ch
.text:004027D0 var_18          = dword ptr -18h
.text:004027D0 var_14          = dword ptr -14h
.text:004027D0 arg_0           = dword ptr  4
.text:004027D0 arg_4           = dword ptr  8
.text:004027D0 Str             = dword ptr  0Ch
.text:004027D0 arg_C           = dword ptr  10h
.text:004027D0 arg_10          = dword ptr  14h
.text:004027D0 arg_14          = dword ptr  18h
.text:004027D0 arg_18          = dword ptr  1Ch
.text:004027D0 arg_1C          = dword ptr  20h
.text:004027D0
.text:004027D0                 push    ebp
.text:004027D1                 mov     eax, 0FFFFFFFFh
.text:004027D6                 push    edi
.text:004027D7                 push    esi
.text:004027D8                 push    ebx
.text:004027D9                 sub     esp, 4Ch
.text:004027DC                 mov     esi, [esp+5Ch+Str]
.text:004027E0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004027E4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004027E7                 mov     ebx, [ebp+4]
.text:004027EA                 setz    dl
.text:004027ED                 movzx   ecx, dl
.text:004027F0                 dec     ecx
.text:004027F1                 and     ecx, ebx
.text:004027F3                 mov     [esp+5Ch+var_14], ecx
.text:004027F7                 mov     ecx, [esp+5Ch+arg_0]
.text:004027FB                 test    ecx, ecx
.text:004027FD                 jle     loc_402927
.text:00402803                 mov     dword ptr [ebp+0Ch], 0
.text:0040280A                 mov     ebx, [ebp+0]
.text:0040280D                 test    ebx, ebx
.text:0040280F                 jz      loc_403340
.text:00402815                 mov     edi, [ebp+10h]
.text:00402818                 test    edi, edi
.text:0040281A                 jnz     short loc_402873
.text:0040281C                 lea     esi, [esi+0]
.text:00402820
.text:00402820 loc_402820:                             ; CODE XREF: sub_4027D0+B7C↓j
.text:00402820                 mov     [ebp+24h], ebx
.text:00402823                 mov     esi, [esp+5Ch+Str]
.text:00402827                 mov     [ebp+20h], ebx
.text:0040282A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040282E                 xor     ebx, ebx
.text:00402830                 mov     dword ptr [ebp+14h], 0
.text:00402837                 test    ecx, ecx
.text:00402839                 jz      loc_403320
.text:0040283F
.text:0040283F loc_40283F:                             ; CODE XREF: sub_4027D0+B64↓j
.text:0040283F                 mov     ebx, 1
.text:00402844
.text:00402844 loc_402844:                             ; CODE XREF: sub_4027D0+B5E↓j
.text:00402844                 mov     [ebp+1Ch], ebx
.text:00402847                 mov     ecx, [esp+5Ch+Str]
.text:0040284B                 movzx   eax, byte ptr [ecx]
.text:0040284E                 cmp     al, 2Dh ; '-'
.text:00402850                 jz      loc_403310
.text:00402856                 cmp     al, 2Bh ; '+'
.text:00402858                 jz      loc_4032F9
.text:0040285E                 xor     edx, edx
.text:00402860                 test    ebx, ebx
.text:00402862                 setz    dl
.text:00402865                 mov     [ebp+18h], edx
.text:00402868
.text:00402868 loc_402868:                             ; CODE XREF: sub_4027D0+B35↓j
.text:00402868                 mov     [esp+5Ch+Str], esi
.text:0040286C                 mov     dword ptr [ebp+10h], 1
.text:00402873
.text:00402873 loc_402873:                             ; CODE XREF: sub_4027D0+4A↑j
.text:00402873                 mov     eax, [ebp+14h]
.text:00402876                 test    eax, eax
.text:00402878                 jz      short loc_402883
.text:0040287A                 cmp     byte ptr [eax], 0
.text:0040287D                 jnz     loc_402960
.text:00402883
.text:00402883 loc_402883:                             ; CODE XREF: sub_4027D0+A8↑j
.text:00402883                 mov     ebx, [ebp+0]
.text:00402886                 cmp     [ebp+24h], ebx
.text:00402889                 jle     short loc_40288E
.text:0040288B                 mov     [ebp+24h], ebx
.text:0040288E
.text:0040288E loc_40288E:                             ; CODE XREF: sub_4027D0+B9↑j
.text:0040288E                 cmp     [ebp+20h], ebx
.text:00402891                 jle     short loc_402896
.text:00402893                 mov     [ebp+20h], ebx
.text:00402896
.text:00402896 loc_402896:                             ; CODE XREF: sub_4027D0+C1↑j
.text:00402896                 cmp     dword ptr [ebp+18h], 1
.text:0040289A                 jz      loc_403270
.text:004028A0
.text:004028A0 loc_4028A0:                             ; CODE XREF: sub_4027D0+B13↓j
.text:004028A0                 cmp     ebx, [esp+5Ch+arg_0]
.text:004028A4                 jz      loc_403254
.text:004028AA                 cld
.text:004028AB                 mov     ecx, [esp+5Ch+arg_4]
.text:004028AF                 mov     edx, 3
.text:004028B4                 mov     edi, offset dword_402580
.text:004028B9                 mov     esi, [ecx+ebx*4]
.text:004028BC                 mov     ecx, edx
.text:004028BE                 repe cmpsb
.text:004028C0                 jnz     short loc_4028FC
.text:004028C2                 mov     edx, [ebp+24h]
.text:004028C5                 lea     eax, [ebx+1]
.text:004028C8                 cmp     [ebp+20h], edx
.text:004028CB                 mov     [ebp+0], eax
.text:004028CE                 jz      loc_403268
.text:004028D4                 cmp     edx, eax
.text:004028D6                 jz      short loc_4028F0
.text:004028D8                 mov     [esp+5Ch+Str2], ebp
.text:004028DC                 mov     ebx, [esp+5Ch+arg_4]
.text:004028E0                 mov     [esp+5Ch+Str1], ebx
.text:004028E3                 call    sub_403480
.text:004028E8                 nop
.text:004028E9                 lea     esi, [esi+0]
.text:004028F0
.text:004028F0 loc_4028F0:                             ; CODE XREF: sub_4027D0+106↑j
.text:004028F0                                         ; sub_4027D0+A9B↓j
.text:004028F0                 mov     eax, [esp+5Ch+arg_0]
.text:004028F4                 mov     ebx, eax
.text:004028F6                 mov     [ebp+24h], eax
.text:004028F9                 mov     [ebp+0], eax
.text:004028FC
.text:004028FC loc_4028FC:                             ; CODE XREF: sub_4027D0+F0↑j
.text:004028FC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402900                 jz      loc_403254
.text:00402906                 mov     esi, [esp+5Ch+arg_4]
.text:0040290A                 mov     eax, [esi+ebx*4]
.text:0040290D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402910                 jz      short loc_402937
.text:00402912
.text:00402912 loc_402912:                             ; CODE XREF: sub_4027D0+16D↓j
.text:00402912                 mov     edx, [ebp+18h]
.text:00402915                 test    edx, edx
.text:00402917                 jz      short loc_402930
.text:00402919                 mov     [ebp+0Ch], eax
.text:0040291C                 lea     edi, [ebx+1]
.text:0040291F                 mov     eax, 1
.text:00402924                 mov     [ebp+0], edi
.text:00402927
.text:00402927 loc_402927:                             ; CODE XREF: sub_4027D0+2D↑j
.text:00402927                                         ; sub_4027D0+165↓j ...
.text:00402927                 add     esp, 4Ch
.text:0040292A                 pop     ebx
.text:0040292B                 pop     esi
.text:0040292C                 pop     edi
.text:0040292D                 pop     ebp
.text:0040292E                 retn
.text:0040292E ; ---------------------------------------------------------------------------
.text:0040292F                 align 10h
.text:00402930
.text:00402930 loc_402930:                             ; CODE XREF: sub_4027D0+147↑j
.text:00402930                                         ; sub_4027D0+A8A↓j ...
.text:00402930                 mov     eax, 0FFFFFFFFh
.text:00402935                 jmp     short loc_402927
.text:00402937 ; ---------------------------------------------------------------------------
.text:00402937
.text:00402937 loc_402937:                             ; CODE XREF: sub_4027D0+140↑j
.text:00402937                 movzx   edx, byte ptr [eax+1]
.text:0040293B                 test    dl, dl
.text:0040293D                 jz      short loc_402912
.text:0040293F                 mov     ebx, [esp+5Ch+arg_C]
.text:00402943                 xor     ecx, ecx
.text:00402945                 test    ebx, ebx
.text:00402947                 jz      short loc_402952
.text:00402949                 cmp     dl, 2Dh ; '-'
.text:0040294C                 jz      loc_40324A
.text:00402952
.text:00402952 loc_402952:                             ; CODE XREF: sub_4027D0+177↑j
.text:00402952                                         ; sub_4027D0+A7F↓j
.text:00402952                 lea     esi, [ecx+eax+1]
.text:00402956                 mov     [ebp+14h], esi
.text:00402959                 lea     esi, [esi+0]
.text:00402960
.text:00402960 loc_402960:                             ; CODE XREF: sub_4027D0+AD↑j
.text:00402960                 mov     ecx, [esp+5Ch+arg_C]
.text:00402964                 test    ecx, ecx
.text:00402966                 jz      loc_402CF0
.text:0040296C                 mov     edx, [ebp+0]
.text:0040296F                 mov     edi, [esp+5Ch+arg_4]
.text:00402973                 mov     eax, [edi+edx*4]
.text:00402976                 movzx   edx, byte ptr [eax+1]
.text:0040297A                 cmp     dl, 2Dh ; '-'
.text:0040297D                 jz      short loc_402995
.text:0040297F                 mov     ebx, [esp+5Ch+arg_14]
.text:00402983                 test    ebx, ebx
.text:00402985                 jz      loc_402CF0
.text:0040298B                 cmp     byte ptr [eax+2], 0
.text:0040298F                 jz      loc_40322A
.text:00402995
.text:00402995 loc_402995:                             ; CODE XREF: sub_4027D0+1AD↑j
.text:00402995                                         ; sub_4027D0+A75↓j
.text:00402995                 mov     [esp+5Ch+var_18], 0
.text:0040299D                 mov     ecx, [ebp+14h]
.text:004029A0                 mov     [esp+5Ch+var_1C], 0
.text:004029A8                 mov     [esp+5Ch+var_20], 0
.text:004029B0                 mov     edi, ecx
.text:004029B2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:004029BA                 movzx   eax, byte ptr [ecx]
.text:004029BD                 test    al, al
.text:004029BF                 jz      short loc_4029DC
.text:004029C1                 cmp     al, 3Dh ; '='
.text:004029C3                 jz      short loc_4029DC
.text:004029C5                 lea     esi, [esi+0]
.text:004029C9                 lea     edi, [edi+0]
.text:004029D0
.text:004029D0 loc_4029D0:                             ; CODE XREF: sub_4027D0+20A↓j
.text:004029D0                 inc     edi
.text:004029D1                 movzx   eax, byte ptr [edi]
.text:004029D4                 test    al, al
.text:004029D6                 jz      short loc_4029DC
.text:004029D8                 cmp     al, 3Dh ; '='
.text:004029DA                 jnz     short loc_4029D0
.text:004029DC
.text:004029DC loc_4029DC:                             ; CODE XREF: sub_4027D0+1EF↑j
.text:004029DC                                         ; sub_4027D0+1F3↑j ...
.text:004029DC                 mov     [esp+5Ch+var_28], 0
.text:004029E4                 mov     esi, [esp+5Ch+arg_C]
.text:004029E8                 mov     ebx, [esi]
.text:004029EA                 test    ebx, ebx
.text:004029EC                 mov     edx, ebx
.text:004029EE                 jz      loc_402C10
.text:004029F4                 lea     esi, [esi+0]
.text:004029FA                 lea     edi, [edi+0]
.text:00402A00
.text:00402A00 loc_402A00:                             ; CODE XREF: sub_4027D0+25E↓j
.text:00402A00                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00402A04                 mov     ebx, edi
.text:00402A06                 sub     ebx, ecx
.text:00402A08                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00402A0C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00402A0F                 call    strncmp
.text:00402A14                 test    eax, eax
.text:00402A16                 jz      loc_4031A6
.text:00402A1C
.text:00402A1C loc_402A1C:                             ; CODE XREF: sub_4027D0+A0F↓j
.text:00402A1C                                         ; sub_4027D0+A24↓j ...
.text:00402A1C                 inc     [esp+5Ch+var_28]
.text:00402A20                 add     esi, 10h
.text:00402A23                 mov     ecx, [esi]
.text:00402A25                 test    ecx, ecx
.text:00402A27                 mov     edx, ecx
.text:00402A29                 jz      short loc_402A30
.text:00402A2B                 mov     ecx, [ebp+14h]
.text:00402A2E                 jmp     short loc_402A00
.text:00402A30 ; ---------------------------------------------------------------------------
.text:00402A30
.text:00402A30 loc_402A30:                             ; CODE XREF: sub_4027D0+259↑j
.text:00402A30                                         ; sub_4027D0+A55↓j
.text:00402A30                 mov     esi, [esp+5Ch+var_20]
.text:00402A34                 test    esi, esi
.text:00402A36                 jz      short loc_402A44
.text:00402A38                 mov     edx, [esp+5Ch+var_1C]
.text:00402A3C                 test    edx, edx
.text:00402A3E                 jz      loc_403150
.text:00402A44
.text:00402A44 loc_402A44:                             ; CODE XREF: sub_4027D0+266↑j
.text:00402A44                 mov     eax, [esp+5Ch+var_18]
.text:00402A48                 test    eax, eax
.text:00402A4A                 jz      loc_402C10
.text:00402A50                 mov     ecx, [ebp+0]
.text:00402A53                 lea     eax, [ecx+1]
.text:00402A56                 mov     [ebp+0], eax
.text:00402A59                 cmp     byte ptr [edi], 0
.text:00402A5C                 jz      loc_402B70
.text:00402A62                 mov     ecx, [esp+5Ch+var_18]
.text:00402A66                 mov     esi, [ecx+4]
.text:00402A69                 test    esi, esi
.text:00402A6B                 jz      short loc_402AB6
.text:00402A6D                 lea     ebx, [edi+1]
.text:00402A70                 mov     [ebp+0Ch], ebx
.text:00402A73
.text:00402A73 loc_402A73:                             ; CODE XREF: sub_4027D0+3A8↓j
.text:00402A73                                         ; sub_4027D0+3C4↓j
.text:00402A73                 mov     ebx, [ebp+14h]
.text:00402A76                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00402A79                 call    strlen
.text:00402A7E                 add     [ebp+14h], eax
.text:00402A81                 mov     esi, [esp+5Ch+arg_10]
.text:00402A85                 test    esi, esi
.text:00402A87                 jz      short loc_402A93
.text:00402A89                 mov     ebp, [esp+5Ch+var_24]
.text:00402A8D                 mov     ecx, [esp+5Ch+arg_10]
.text:00402A91                 mov     [ecx], ebp
.text:00402A93
.text:00402A93 loc_402A93:                             ; CODE XREF: sub_4027D0+2B7↑j
.text:00402A93                 mov     eax, [esp+5Ch+var_18]
.text:00402A97                 mov     ecx, [eax+8]
.text:00402A9A                 test    ecx, ecx
.text:00402A9C                 jnz     short loc_402AAA
.text:00402A9E                 mov     ecx, [esp+5Ch+var_18]
.text:00402AA2
.text:00402AA2 loc_402AA2:                             ; CODE XREF: sub_4027D0+723↓j
.text:00402AA2                 mov     eax, [ecx+0Ch]
.text:00402AA5                 jmp     loc_402927
.text:00402AAA ; ---------------------------------------------------------------------------
.text:00402AAA
.text:00402AAA loc_402AAA:                             ; CODE XREF: sub_4027D0+2CC↑j
.text:00402AAA                                         ; sub_4027D0+719↓j
.text:00402AAA                 mov     esi, [eax+0Ch]
.text:00402AAD                 xor     eax, eax
.text:00402AAF                 mov     [ecx], esi
.text:00402AB1                 jmp     loc_402927
.text:00402AB6 ; ---------------------------------------------------------------------------
.text:00402AB6
.text:00402AB6 loc_402AB6:                             ; CODE XREF: sub_4027D0+29B↑j
.text:00402AB6                 mov     edi, [esp+5Ch+var_14]
.text:00402ABA                 test    edi, edi
.text:00402ABC                 jz      short loc_402B10
.text:00402ABE                 mov     esi, [esp+5Ch+arg_4]
.text:00402AC2                 mov     edx, [esi+eax*4-4]
.text:00402AC6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00402ACA                 jz      short loc_402B32
.text:00402ACC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00402AD3                 call    ds:libintl_gettext
.text:00402AD9                 mov     edx, [esp+5Ch+var_18]
.text:00402ADD                 mov     edi, [edx]
.text:00402ADF                 mov     [esp+5Ch+var_4C], edi
.text:00402AE3                 mov     ebx, [ebp+0]
.text:00402AE6                 mov     edi, [esp+5Ch+arg_4]
.text:00402AEA                 mov     ecx, [edi+ebx*4-4]
.text:00402AEE                 movsx   esi, byte ptr [ecx]
.text:00402AF1                 mov     ecx, ds:_iob
.text:00402AF7                 add     ecx, 40h ; '@'
.text:00402AFA                 mov     [esp+5Ch+var_50], esi
.text:00402AFE                 mov     ebx, [edi]
.text:00402B00                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402B04                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402B07                 mov     [esp+5Ch+MaxCount], ebx
.text:00402B0B                 call    fprintf
.text:00402B10
.text:00402B10 loc_402B10:                             ; CODE XREF: sub_4027D0+2EC↑j
.text:00402B10                                         ; sub_4027D0+398↓j
.text:00402B10                 mov     ecx, [ebp+14h]
.text:00402B13                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402B16                 call    strlen
.text:00402B1B                 add     [ebp+14h], eax
.text:00402B1E                 mov     eax, [esp+5Ch+var_18]
.text:00402B22                 mov     esi, [eax+0Ch]
.text:00402B25                 mov     [ebp+8], esi
.text:00402B28
.text:00402B28 loc_402B28:                             ; CODE XREF: sub_4027D0+4E5↓j
.text:00402B28                                         ; sub_4027D0+73E↓j ...
.text:00402B28                 mov     eax, 3Fh ; '?'
.text:00402B2D                 jmp     loc_402927
.text:00402B32 ; ---------------------------------------------------------------------------
.text:00402B32
.text:00402B32 loc_402B32:                             ; CODE XREF: sub_4027D0+2FA↑j
.text:00402B32                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00402B39                 call    ds:libintl_gettext
.text:00402B3F                 mov     edx, [esp+5Ch+var_18]
.text:00402B43                 mov     edi, [esp+5Ch+arg_4]
.text:00402B47                 mov     ecx, ds:_iob
.text:00402B4D                 mov     esi, [edx]
.text:00402B4F                 add     ecx, 40h ; '@'
.text:00402B52                 mov     [esp+5Ch+var_50], esi
.text:00402B56                 mov     ebx, [edi]
.text:00402B58                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402B5C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402B5F                 mov     [esp+5Ch+MaxCount], ebx
.text:00402B63                 call    fprintf
.text:00402B68                 jmp     short loc_402B10
.text:00402B68 ; ---------------------------------------------------------------------------
.text:00402B6A                 align 10h
.text:00402B70
.text:00402B70 loc_402B70:                             ; CODE XREF: sub_4027D0+28C↑j
.text:00402B70                 mov     ebx, [esp+5Ch+var_18]
.text:00402B74                 cmp     dword ptr [ebx+4], 1
.text:00402B78                 jnz     loc_402A73
.text:00402B7E                 cmp     eax, [esp+5Ch+arg_0]
.text:00402B82                 jge     short loc_402B99
.text:00402B84                 mov     ebx, [esp+5Ch+arg_4]
.text:00402B88                 lea     edi, [ecx+2]
.text:00402B8B                 mov     [ebp+0], edi
.text:00402B8E                 mov     esi, [ebx+eax*4]
.text:00402B91                 mov     [ebp+0Ch], esi
.text:00402B94                 jmp     loc_402A73
.text:00402B99 ; ---------------------------------------------------------------------------
.text:00402B99
.text:00402B99 loc_402B99:                             ; CODE XREF: sub_4027D0+3B2↑j
.text:00402B99                 mov     edx, [esp+5Ch+var_14]
.text:00402B9D                 test    edx, edx
.text:00402B9F                 jnz     short loc_402BD0
.text:00402BA1
.text:00402BA1 loc_402BA1:                             ; CODE XREF: sub_4027D0+437↓j
.text:00402BA1                 mov     edx, [ebp+14h]
.text:00402BA4                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402BA7                 call    strlen
.text:00402BAC                 add     [ebp+14h], eax
.text:00402BAF                 mov     eax, [esp+5Ch+var_18]
.text:00402BB3                 mov     edi, [eax+0Ch]
.text:00402BB6                 mov     [ebp+8], edi
.text:00402BB9
.text:00402BB9 loc_402BB9:                             ; CODE XREF: sub_4027D0+7C2↓j
.text:00402BB9                 mov     ebp, [esp+5Ch+Str]
.text:00402BBD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402BC1                 setnz   bl
.text:00402BC4                 movzx   esi, bl
.text:00402BC7                 lea     eax, [esi+esi*4+3Ah]
.text:00402BCB                 jmp     loc_402927
.text:00402BD0 ; ---------------------------------------------------------------------------
.text:00402BD0
.text:00402BD0 loc_402BD0:                             ; CODE XREF: sub_4027D0+3CF↑j
.text:00402BD0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402BD7                 call    ds:libintl_gettext
.text:00402BDD                 mov     ecx, [ebp+0]
.text:00402BE0                 mov     esi, [esp+5Ch+arg_4]
.text:00402BE4                 mov     ebx, [esi+ecx*4-4]
.text:00402BE8                 mov     ecx, ds:_iob
.text:00402BEE                 mov     [esp+5Ch+var_50], ebx
.text:00402BF2                 mov     edi, [esi]
.text:00402BF4                 add     ecx, 40h ; '@'
.text:00402BF7                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402BFB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402BFE                 mov     [esp+5Ch+MaxCount], edi
.text:00402C02                 call    fprintf
.text:00402C07                 jmp     short loc_402BA1
.text:00402C07 ; ---------------------------------------------------------------------------
.text:00402C09                 align 10h
.text:00402C10
.text:00402C10 loc_402C10:                             ; CODE XREF: sub_4027D0+21E↑j
.text:00402C10                                         ; sub_4027D0+27A↑j
.text:00402C10                 mov     eax, [esp+5Ch+arg_14]
.text:00402C14                 test    eax, eax
.text:00402C16                 jz      short loc_402C46
.text:00402C18                 mov     ebx, [ebp+0]
.text:00402C1B                 mov     esi, [esp+5Ch+arg_4]
.text:00402C1F                 mov     edi, [esi+ebx*4]
.text:00402C22                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402C26                 jz      short loc_402C49
.text:00402C28                 mov     ecx, [ebp+14h]
.text:00402C2B                 mov     edx, [esp+5Ch+Str]
.text:00402C2F                 movsx   ebx, byte ptr [ecx]
.text:00402C32                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402C35                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00402C39                 call    strchr
.text:00402C3E                 test    eax, eax
.text:00402C40                 jnz     loc_402CF0
.text:00402C46
.text:00402C46 loc_402C46:                             ; CODE XREF: sub_4027D0+446↑j
.text:00402C46                 mov     ebx, [ebp+0]
.text:00402C49
.text:00402C49 loc_402C49:                             ; CODE XREF: sub_4027D0+456↑j
.text:00402C49                 mov     eax, [esp+5Ch+var_14]
.text:00402C4D                 test    eax, eax
.text:00402C4F                 jz      short loc_402CA1
.text:00402C51                 mov     esi, [esp+5Ch+arg_4]
.text:00402C55                 mov     edi, [esi+ebx*4]
.text:00402C58                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402C5C                 jz      short loc_402CBA
.text:00402C5E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00402C65                 call    ds:libintl_gettext
.text:00402C6B                 mov     edi, [ebp+14h]
.text:00402C6E                 mov     [esp+5Ch+var_4C], edi
.text:00402C72                 mov     ebx, [ebp+0]
.text:00402C75                 mov     edi, [esp+5Ch+arg_4]
.text:00402C79                 mov     esi, [edi+ebx*4]
.text:00402C7C                 movsx   ecx, byte ptr [esi]
.text:00402C7F                 mov     esi, ds:_iob
.text:00402C85                 add     esi, 40h ; '@'
.text:00402C88                 mov     [esp+5Ch+var_50], ecx
.text:00402C8C                 mov     ebx, [edi]
.text:00402C8E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402C92                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00402C95                 mov     [esp+5Ch+MaxCount], ebx
.text:00402C99                 call    fprintf
.text:00402C9E
.text:00402C9E loc_402C9E:                             ; CODE XREF: sub_4027D0+51D↓j
.text:00402C9E                 mov     ebx, [ebp+0]
.text:00402CA1
.text:00402CA1 loc_402CA1:                             ; CODE XREF: sub_4027D0+47F↑j
.text:00402CA1                 mov     dword ptr [ebp+14h], offset dword_402680
.text:00402CA8                 lea     edx, [ebx+1]
.text:00402CAB                 mov     [ebp+0], edx
.text:00402CAE
.text:00402CAE loc_402CAE:                             ; CODE XREF: sub_4027D0+999↓j
.text:00402CAE                 mov     dword ptr [ebp+8], 0
.text:00402CB5                 jmp     loc_402B28
.text:00402CBA ; ---------------------------------------------------------------------------
.text:00402CBA
.text:00402CBA loc_402CBA:                             ; CODE XREF: sub_4027D0+48C↑j
.text:00402CBA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00402CC1                 call    ds:libintl_gettext
.text:00402CC7                 mov     ecx, [ebp+14h]
.text:00402CCA                 mov     edi, [esp+5Ch+arg_4]
.text:00402CCE                 mov     edx, ds:_iob
.text:00402CD4                 mov     [esp+5Ch+var_50], ecx
.text:00402CD8                 mov     ebx, [edi]
.text:00402CDA                 add     edx, 40h ; '@'
.text:00402CDD                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402CE1                 mov     [esp+5Ch+MaxCount], ebx
.text:00402CE5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402CE8                 call    fprintf
.text:00402CED                 jmp     short loc_402C9E
.text:00402CED ; ---------------------------------------------------------------------------
.text:00402CEF                 align 10h
.text:00402CF0
.text:00402CF0 loc_402CF0:                             ; CODE XREF: sub_4027D0+196↑j
.text:00402CF0                                         ; sub_4027D0+1B5↑j ...
.text:00402CF0                 mov     esi, [ebp+14h]
.text:00402CF3                 movzx   ebx, byte ptr [esi]
.text:00402CF6                 inc     esi
.text:00402CF7                 mov     [ebp+14h], esi
.text:00402CFA                 mov     ecx, [esp+5Ch+Str]
.text:00402CFE                 movsx   esi, bl
.text:00402D01                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402D05                 mov     edi, esi
.text:00402D07                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402D0A                 call    strchr
.text:00402D0F                 mov     ecx, [ebp+14h]
.text:00402D12                 cmp     byte ptr [ecx], 0
.text:00402D15                 jnz     short loc_402D1A
.text:00402D17                 inc     dword ptr [ebp+0]
.text:00402D1A
.text:00402D1A loc_402D1A:                             ; CODE XREF: sub_4027D0+545↑j
.text:00402D1A                 test    eax, eax
.text:00402D1C                 jz      loc_403100
.text:00402D22                 cmp     bl, 3Ah ; ':'
.text:00402D25                 jz      loc_403100
.text:00402D2B                 cmp     byte ptr [eax], 57h ; 'W'
.text:00402D2E                 jz      loc_402DE6
.text:00402D34                 movzx   edx, byte ptr [eax+1]
.text:00402D38
.text:00402D38 loc_402D38:                             ; CODE XREF: sub_4027D0+61D↓j
.text:00402D38                 cmp     dl, 3Ah ; ':'
.text:00402D3B                 jz      short loc_402D44
.text:00402D3D
.text:00402D3D loc_402D3D:                             ; CODE XREF: sub_4027D0+590↓j
.text:00402D3D                 mov     eax, esi
.text:00402D3F                 jmp     loc_402927
.text:00402D44 ; ---------------------------------------------------------------------------
.text:00402D44
.text:00402D44 loc_402D44:                             ; CODE XREF: sub_4027D0+56B↑j
.text:00402D44                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402D48                 jz      loc_402DD1
.text:00402D4E                 cmp     byte ptr [ecx], 0
.text:00402D51                 jz      short loc_402D62
.text:00402D53
.text:00402D53 loc_402D53:                             ; CODE XREF: sub_4027D0+604↓j
.text:00402D53                 inc     dword ptr [ebp+0]
.text:00402D56                 mov     [ebp+0Ch], ecx
.text:00402D59
.text:00402D59 loc_402D59:                             ; CODE XREF: sub_4027D0+5AB↓j
.text:00402D59                                         ; sub_4027D0+5C6↓j ...
.text:00402D59                 mov     dword ptr [ebp+14h], 0
.text:00402D60                 jmp     short loc_402D3D
.text:00402D62 ; ---------------------------------------------------------------------------
.text:00402D62
.text:00402D62 loc_402D62:                             ; CODE XREF: sub_4027D0+581↑j
.text:00402D62                 mov     ecx, [ebp+0]
.text:00402D65                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402D69                 jz      short loc_402D7D
.text:00402D6B                 mov     eax, [esp+5Ch+arg_4]
.text:00402D6F                 lea     edx, [ecx+1]
.text:00402D72                 mov     [ebp+0], edx
.text:00402D75                 mov     ebx, [eax+ecx*4]
.text:00402D78                 mov     [ebp+0Ch], ebx
.text:00402D7B                 jmp     short loc_402D59
.text:00402D7D ; ---------------------------------------------------------------------------
.text:00402D7D
.text:00402D7D loc_402D7D:                             ; CODE XREF: sub_4027D0+599↑j
.text:00402D7D                 mov     ecx, [esp+5Ch+var_14]
.text:00402D81                 test    ecx, ecx
.text:00402D83                 jnz     short loc_402D9F
.text:00402D85
.text:00402D85 loc_402D85:                             ; CODE XREF: sub_4027D0+5FF↓j
.text:00402D85                 mov     [ebp+8], edi
.text:00402D88                 mov     edi, [esp+5Ch+Str]
.text:00402D8C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00402D8F                 jz      short loc_402D98
.text:00402D91                 mov     esi, 3Fh ; '?'
.text:00402D96                 jmp     short loc_402D59
.text:00402D98 ; ---------------------------------------------------------------------------
.text:00402D98
.text:00402D98 loc_402D98:                             ; CODE XREF: sub_4027D0+5BF↑j
.text:00402D98                 mov     esi, 3Ah ; ':'
.text:00402D9D                 jmp     short loc_402D59
.text:00402D9F ; ---------------------------------------------------------------------------
.text:00402D9F
.text:00402D9F loc_402D9F:                             ; CODE XREF: sub_4027D0+5B3↑j
.text:00402D9F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402DA6                 call    ds:libintl_gettext
.text:00402DAC                 mov     [esp+5Ch+var_50], edi
.text:00402DB0                 mov     ebx, [esp+5Ch+arg_4]
.text:00402DB4                 mov     edx, ds:_iob
.text:00402DBA                 mov     esi, [ebx]
.text:00402DBC                 add     edx, 40h ; '@'
.text:00402DBF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402DC3                 mov     [esp+5Ch+MaxCount], esi
.text:00402DC7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402DCA                 call    fprintf
.text:00402DCF                 jmp     short loc_402D85
.text:00402DD1 ; ---------------------------------------------------------------------------
.text:00402DD1
.text:00402DD1 loc_402DD1:                             ; CODE XREF: sub_4027D0+578↑j
.text:00402DD1                 cmp     byte ptr [ecx], 0
.text:00402DD4                 jnz     loc_402D53
.text:00402DDA                 mov     dword ptr [ebp+0Ch], 0
.text:00402DE1                 jmp     loc_402D59
.text:00402DE6 ; ---------------------------------------------------------------------------
.text:00402DE6
.text:00402DE6 loc_402DE6:                             ; CODE XREF: sub_4027D0+55E↑j
.text:00402DE6                 movzx   edx, byte ptr [eax+1]
.text:00402DEA                 cmp     dl, 3Bh ; ';'
.text:00402DED                 jnz     loc_402D38
.text:00402DF3                 mov     [esp+5Ch+var_2C], 0
.text:00402DFB                 mov     [esp+5Ch+var_30], 0
.text:00402E03                 mov     [esp+5Ch+var_34], 0
.text:00402E0B                 mov     [esp+5Ch+var_38], 0
.text:00402E13                 cmp     byte ptr [ecx], 0
.text:00402E16                 jz      loc_40308B
.text:00402E1C                 inc     dword ptr [ebp+0]
.text:00402E1F                 mov     [ebp+0Ch], ecx
.text:00402E22
.text:00402E22 loc_402E22:                             ; CODE XREF: sub_4027D0+8D4↓j
.text:00402E22                 mov     edi, [ebp+0Ch]
.text:00402E25                 mov     [ebp+14h], edi
.text:00402E28                 movzx   eax, byte ptr [edi]
.text:00402E2B                 test    al, al
.text:00402E2D                 jz      short loc_402E3F
.text:00402E2F                 cmp     al, 3Dh ; '='
.text:00402E31                 jz      short loc_402E3F
.text:00402E33
.text:00402E33 loc_402E33:                             ; CODE XREF: sub_4027D0+66D↓j
.text:00402E33                 inc     edi
.text:00402E34                 movzx   eax, byte ptr [edi]
.text:00402E37                 test    al, al
.text:00402E39                 jz      short loc_402E3F
.text:00402E3B                 cmp     al, 3Dh ; '='
.text:00402E3D                 jnz     short loc_402E33
.text:00402E3F
.text:00402E3F loc_402E3F:                             ; CODE XREF: sub_4027D0+65D↑j
.text:00402E3F                                         ; sub_4027D0+661↑j ...
.text:00402E3F                 mov     [esp+5Ch+var_3C], 0
.text:00402E47                 mov     esi, [esp+5Ch+arg_C]
.text:00402E4B                 mov     eax, [esi]
.text:00402E4D                 test    eax, eax
.text:00402E4F                 jz      loc_402FD0
.text:00402E55                 mov     ecx, eax
.text:00402E57
.text:00402E57 loc_402E57:                             ; CODE XREF: sub_4027D0+6B3↓j
.text:00402E57                 mov     ebx, [ebp+14h]
.text:00402E5A                 mov     eax, edi
.text:00402E5C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:00402E5F                 sub     eax, ebx
.text:00402E61                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402E65                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402E69                 call    strncmp
.text:00402E6E                 test    eax, eax
.text:00402E70                 jz      loc_403037
.text:00402E76
.text:00402E76 loc_402E76:                             ; CODE XREF: sub_4027D0+88C↓j
.text:00402E76                                         ; sub_4027D0+89D↓j
.text:00402E76                 inc     [esp+5Ch+var_3C]
.text:00402E7A                 add     esi, 10h
.text:00402E7D                 mov     edx, [esi]
.text:00402E7F                 test    edx, edx
.text:00402E81                 mov     ecx, edx
.text:00402E83                 jnz     short loc_402E57
.text:00402E85
.text:00402E85 loc_402E85:                             ; CODE XREF: sub_4027D0+8B6↓j
.text:00402E85                 mov     esi, [esp+5Ch+var_34]
.text:00402E89                 test    esi, esi
.text:00402E8B                 jz      short loc_402E99
.text:00402E8D                 mov     ebx, [esp+5Ch+var_30]
.text:00402E91                 test    ebx, ebx
.text:00402E93                 jz      loc_402FE1
.text:00402E99
.text:00402E99 loc_402E99:                             ; CODE XREF: sub_4027D0+6BB↑j
.text:00402E99                 mov     esi, [esp+5Ch+var_2C]
.text:00402E9D                 test    esi, esi
.text:00402E9F                 jz      loc_402FD0
.text:00402EA5                 cmp     byte ptr [edi], 0
.text:00402EA8                 jz      loc_402F50
.text:00402EAE                 mov     ecx, [esp+5Ch+var_2C]
.text:00402EB2                 mov     ebx, [ecx+4]
.text:00402EB5                 test    ebx, ebx
.text:00402EB7                 jz      short loc_402EF8
.text:00402EB9                 lea     edx, [edi+1]
.text:00402EBC                 mov     [ebp+0Ch], edx
.text:00402EBF
.text:00402EBF loc_402EBF:                             ; CODE XREF: sub_4027D0+788↓j
.text:00402EBF                                         ; sub_4027D0+7A7↓j
.text:00402EBF                 mov     edi, [ebp+14h]
.text:00402EC2                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402EC5                 call    strlen
.text:00402ECA                 add     [ebp+14h], eax
.text:00402ECD                 mov     eax, [esp+5Ch+arg_10]
.text:00402ED1                 test    eax, eax
.text:00402ED3                 jz      short loc_402EE0
.text:00402ED5                 mov     edx, [esp+5Ch+var_38]
.text:00402ED9                 mov     ebp, [esp+5Ch+arg_10]
.text:00402EDD                 mov     [ebp+0], edx
.text:00402EE0
.text:00402EE0 loc_402EE0:                             ; CODE XREF: sub_4027D0+703↑j
.text:00402EE0                 mov     eax, [esp+5Ch+var_2C]
.text:00402EE4                 mov     ecx, [eax+8]
.text:00402EE7                 test    ecx, ecx
.text:00402EE9                 jnz     loc_402AAA
.text:00402EEF                 mov     ecx, [esp+5Ch+var_2C]
.text:00402EF3                 jmp     loc_402AA2
.text:00402EF8 ; ---------------------------------------------------------------------------
.text:00402EF8
.text:00402EF8 loc_402EF8:                             ; CODE XREF: sub_4027D0+6E7↑j
.text:00402EF8                 mov     eax, [esp+5Ch+var_14]
.text:00402EFC                 test    eax, eax
.text:00402EFE                 jnz     short loc_402F13
.text:00402F00
.text:00402F00 loc_402F00:                             ; CODE XREF: sub_4027D0+779↓j
.text:00402F00                 mov     ecx, [ebp+14h]
.text:00402F03                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402F06                 call    strlen
.text:00402F0B                 add     [ebp+14h], eax
.text:00402F0E                 jmp     loc_402B28
.text:00402F13 ; ---------------------------------------------------------------------------
.text:00402F13
.text:00402F13 loc_402F13:                             ; CODE XREF: sub_4027D0+72E↑j
.text:00402F13                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:00402F1A                 call    ds:libintl_gettext
.text:00402F20                 mov     edx, [esp+5Ch+var_2C]
.text:00402F24                 mov     ebx, [esp+5Ch+arg_4]
.text:00402F28                 mov     edi, [edx]
.text:00402F2A                 mov     [esp+5Ch+var_50], edi
.text:00402F2E                 mov     edi, ds:_iob
.text:00402F34                 mov     esi, [ebx]
.text:00402F36                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402F3A                 add     edi, 40h ; '@'
.text:00402F3D                 mov     [esp+5Ch+MaxCount], esi
.text:00402F41                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402F44                 call    fprintf
.text:00402F49                 jmp     short loc_402F00
.text:00402F49 ; ---------------------------------------------------------------------------
.text:00402F4B                 align 10h
.text:00402F50
.text:00402F50 loc_402F50:                             ; CODE XREF: sub_4027D0+6D8↑j
.text:00402F50                 mov     esi, [esp+5Ch+var_2C]
.text:00402F54                 cmp     dword ptr [esi+4], 1
.text:00402F58                 jnz     loc_402EBF
.text:00402F5E                 mov     ecx, [ebp+0]
.text:00402F61                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402F65                 jge     short loc_402F7C
.text:00402F67                 mov     eax, [esp+5Ch+arg_4]
.text:00402F6B                 lea     ebx, [ecx+1]
.text:00402F6E                 mov     [ebp+0], ebx
.text:00402F71                 mov     edi, [eax+ecx*4]
.text:00402F74                 mov     [ebp+0Ch], edi
.text:00402F77                 jmp     loc_402EBF
.text:00402F7C ; ---------------------------------------------------------------------------
.text:00402F7C
.text:00402F7C loc_402F7C:                             ; CODE XREF: sub_4027D0+795↑j
.text:00402F7C                 mov     edx, [esp+5Ch+var_14]
.text:00402F80                 test    edx, edx
.text:00402F82                 jnz     short loc_402F97
.text:00402F84
.text:00402F84 loc_402F84:                             ; CODE XREF: sub_4027D0+7FE↓j
.text:00402F84                 mov     edx, [ebp+14h]
.text:00402F87                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402F8A                 call    strlen
.text:00402F8F                 add     [ebp+14h], eax
.text:00402F92                 jmp     loc_402BB9
.text:00402F97 ; ---------------------------------------------------------------------------
.text:00402F97
.text:00402F97 loc_402F97:                             ; CODE XREF: sub_4027D0+7B2↑j
.text:00402F97                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402F9E                 call    ds:libintl_gettext
.text:00402FA4                 mov     ecx, [ebp+0]
.text:00402FA7                 mov     ebx, [esp+5Ch+arg_4]
.text:00402FAB                 mov     edi, [ebx+ecx*4-4]
.text:00402FAF                 mov     ecx, ds:_iob
.text:00402FB5                 mov     [esp+5Ch+var_50], edi
.text:00402FB9                 mov     esi, [ebx]
.text:00402FBB                 add     ecx, 40h ; '@'
.text:00402FBE                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402FC2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402FC5                 mov     [esp+5Ch+MaxCount], esi
.text:00402FC9                 call    fprintf
.text:00402FCE                 jmp     short loc_402F84
.text:00402FD0 ; ---------------------------------------------------------------------------
.text:00402FD0
.text:00402FD0 loc_402FD0:                             ; CODE XREF: sub_4027D0+67F↑j
.text:00402FD0                                         ; sub_4027D0+6CF↑j
.text:00402FD0                 mov     dword ptr [ebp+14h], 0
.text:00402FD7                 mov     eax, 57h ; 'W'
.text:00402FDC                 jmp     loc_402927
.text:00402FE1 ; ---------------------------------------------------------------------------
.text:00402FE1
.text:00402FE1 loc_402FE1:                             ; CODE XREF: sub_4027D0+6C3↑j
.text:00402FE1                 mov     edi, [esp+5Ch+var_14]
.text:00402FE5                 test    edi, edi
.text:00402FE7                 jnz     short loc_402FFF
.text:00402FE9
.text:00402FE9 loc_402FE9:                             ; CODE XREF: sub_4027D0+865↓j
.text:00402FE9                 mov     edx, [ebp+14h]
.text:00402FEC                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402FEF                 call    strlen
.text:00402FF4                 add     [ebp+14h], eax
.text:00402FF7                 inc     dword ptr [ebp+0]
.text:00402FFA                 jmp     loc_402B28
.text:00402FFF ; ---------------------------------------------------------------------------
.text:00402FFF
.text:00402FFF loc_402FFF:                             ; CODE XREF: sub_4027D0+817↑j
.text:00402FFF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00403006                 call    ds:libintl_gettext
.text:0040300C                 mov     ecx, [ebp+0]
.text:0040300F                 mov     ebx, [esp+5Ch+arg_4]
.text:00403013                 mov     edi, [ebx+ecx*4]
.text:00403016                 mov     ecx, ds:_iob
.text:0040301C                 mov     [esp+5Ch+var_50], edi
.text:00403020                 mov     esi, [ebx]
.text:00403022                 add     ecx, 40h ; '@'
.text:00403025                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403029                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040302C                 mov     [esp+5Ch+MaxCount], esi
.text:00403030                 call    fprintf
.text:00403035                 jmp     short loc_402FE9
.text:00403037 ; ---------------------------------------------------------------------------
.text:00403037
.text:00403037 loc_403037:                             ; CODE XREF: sub_4027D0+6A0↑j
.text:00403037                 mov     edx, [ebp+14h]
.text:0040303A                 mov     ebx, edi
.text:0040303C                 mov     ecx, [esi]
.text:0040303E                 sub     ebx, edx
.text:00403040                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403043                 call    strlen
.text:00403048                 cmp     ebx, eax
.text:0040304A                 jz      short loc_403072
.text:0040304C                 mov     ebx, [esp+5Ch+var_2C]
.text:00403050                 test    ebx, ebx
.text:00403052                 jz      short loc_403061
.text:00403054                 mov     [esp+5Ch+var_34], 1
.text:0040305C                 jmp     loc_402E76
.text:00403061 ; ---------------------------------------------------------------------------
.text:00403061
.text:00403061 loc_403061:                             ; CODE XREF: sub_4027D0+882↑j
.text:00403061                 mov     [esp+5Ch+var_2C], esi
.text:00403065                 mov     ecx, [esp+5Ch+var_3C]
.text:00403069                 mov     [esp+5Ch+var_38], ecx
.text:0040306D                 jmp     loc_402E76
.text:00403072 ; ---------------------------------------------------------------------------
.text:00403072
.text:00403072 loc_403072:                             ; CODE XREF: sub_4027D0+87A↑j
.text:00403072                 mov     [esp+5Ch+var_2C], esi
.text:00403076                 mov     eax, [esp+5Ch+var_3C]
.text:0040307A                 mov     [esp+5Ch+var_30], 1
.text:00403082                 mov     [esp+5Ch+var_38], eax
.text:00403086                 jmp     loc_402E85
.text:0040308B ; ---------------------------------------------------------------------------
.text:0040308B
.text:0040308B loc_40308B:                             ; CODE XREF: sub_4027D0+646↑j
.text:0040308B                 mov     edx, [ebp+0]
.text:0040308E                 cmp     edx, [esp+5Ch+arg_0]
.text:00403092                 jz      short loc_4030A9
.text:00403094                 mov     ebx, [esp+5Ch+arg_4]
.text:00403098                 lea     esi, [edx+1]
.text:0040309B                 mov     [ebp+0], esi
.text:0040309E                 mov     edi, [ebx+edx*4]
.text:004030A1                 mov     [ebp+0Ch], edi
.text:004030A4                 jmp     loc_402E22
.text:004030A9 ; ---------------------------------------------------------------------------
.text:004030A9
.text:004030A9 loc_4030A9:                             ; CODE XREF: sub_4027D0+8C2↑j
.text:004030A9                 mov     edi, [esp+5Ch+var_14]
.text:004030AD                 test    edi, edi
.text:004030AF                 jnz     short loc_4030CC
.text:004030B1
.text:004030B1 loc_4030B1:                             ; CODE XREF: sub_4027D0+92C↓j
.text:004030B1                 mov     [ebp+8], esi
.text:004030B4                 mov     ebp, [esp+5Ch+Str]
.text:004030B8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004030BC                 jz      short loc_4030C8
.text:004030BE                 mov     bl, 3Fh ; '?'
.text:004030C0
.text:004030C0 loc_4030C0:                             ; CODE XREF: sub_4027D0+8FA↓j
.text:004030C0                 movsx   eax, bl
.text:004030C3                 jmp     loc_402927
.text:004030C8 ; ---------------------------------------------------------------------------
.text:004030C8
.text:004030C8 loc_4030C8:                             ; CODE XREF: sub_4027D0+8EC↑j
.text:004030C8                 mov     bl, 3Ah ; ':'
.text:004030CA                 jmp     short loc_4030C0
.text:004030CC ; ---------------------------------------------------------------------------
.text:004030CC
.text:004030CC loc_4030CC:                             ; CODE XREF: sub_4027D0+8DF↑j
.text:004030CC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004030D3                 call    ds:libintl_gettext
.text:004030D9                 mov     [esp+5Ch+var_50], esi
.text:004030DD                 mov     edx, [esp+5Ch+arg_4]
.text:004030E1                 mov     ecx, ds:_iob
.text:004030E7                 mov     ebx, [edx]
.text:004030E9                 add     ecx, 40h ; '@'
.text:004030EC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004030F0                 mov     [esp+5Ch+MaxCount], ebx
.text:004030F4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004030F7                 call    fprintf
.text:004030FC                 jmp     short loc_4030B1
.text:004030FC ; ---------------------------------------------------------------------------
.text:004030FE                 align 10h
.text:00403100
.text:00403100 loc_403100:                             ; CODE XREF: sub_4027D0+54C↑j
.text:00403100                                         ; sub_4027D0+555↑j
.text:00403100                 mov     eax, [esp+5Ch+var_14]
.text:00403104                 test    eax, eax
.text:00403106                 jz      short loc_40313F
.text:00403108                 mov     ebx, [ebp+1Ch]
.text:0040310B                 test    ebx, ebx
.text:0040310D                 jz      short loc_403147
.text:0040310F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00403116
.text:00403116 loc_403116:                             ; CODE XREF: sub_4027D0+97E↓j
.text:00403116                 call    ds:libintl_gettext
.text:0040311C                 mov     [esp+5Ch+var_50], esi
.text:00403120                 mov     ebx, [esp+5Ch+arg_4]
.text:00403124                 mov     edx, ds:_iob
.text:0040312A                 mov     esi, [ebx]
.text:0040312C                 add     edx, 40h ; '@'
.text:0040312F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403133                 mov     [esp+5Ch+MaxCount], esi
.text:00403137                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040313A                 call    fprintf
.text:0040313F
.text:0040313F loc_40313F:                             ; CODE XREF: sub_4027D0+936↑j
.text:0040313F                 mov     [ebp+8], edi
.text:00403142                 jmp     loc_402B28
.text:00403147 ; ---------------------------------------------------------------------------
.text:00403147
.text:00403147 loc_403147:                             ; CODE XREF: sub_4027D0+93D↑j
.text:00403147                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040314E                 jmp     short loc_403116
.text:00403150 ; ---------------------------------------------------------------------------
.text:00403150
.text:00403150 loc_403150:                             ; CODE XREF: sub_4027D0+26E↑j
.text:00403150                 mov     edi, [esp+5Ch+var_14]
.text:00403154                 test    edi, edi
.text:00403156                 jnz     short loc_40316E
.text:00403158
.text:00403158 loc_403158:                             ; CODE XREF: sub_4027D0+9D4↓j
.text:00403158                 mov     edx, [ebp+14h]
.text:0040315B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040315E                 call    strlen
.text:00403163                 add     [ebp+14h], eax
.text:00403166                 inc     dword ptr [ebp+0]
.text:00403169                 jmp     loc_402CAE
.text:0040316E ; ---------------------------------------------------------------------------
.text:0040316E
.text:0040316E loc_40316E:                             ; CODE XREF: sub_4027D0+986↑j
.text:0040316E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00403175                 call    ds:libintl_gettext
.text:0040317B                 mov     ebx, [ebp+0]
.text:0040317E                 mov     edi, [esp+5Ch+arg_4]
.text:00403182                 mov     ecx, [edi+ebx*4]
.text:00403185                 mov     ebx, ds:_iob
.text:0040318B                 mov     [esp+5Ch+var_50], ecx
.text:0040318F                 mov     esi, [edi]
.text:00403191                 add     ebx, 40h ; '@'
.text:00403194                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403198                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040319B                 mov     [esp+5Ch+MaxCount], esi
.text:0040319F                 call    fprintf
.text:004031A4                 jmp     short loc_403158
.text:004031A6 ; ---------------------------------------------------------------------------
.text:004031A6
.text:004031A6 loc_4031A6:                             ; CODE XREF: sub_4027D0+246↑j
.text:004031A6                 mov     ecx, [ebp+14h]
.text:004031A9                 mov     ebx, edi
.text:004031AB                 mov     edx, [esi]
.text:004031AD                 sub     ebx, ecx
.text:004031AF                 mov     [esp+5Ch+Str1], edx ; Str
.text:004031B2                 call    strlen
.text:004031B7                 cmp     ebx, eax
.text:004031B9                 jz      short loc_403211
.text:004031BB                 mov     ebx, [esp+5Ch+var_18]
.text:004031BF                 test    ebx, ebx
.text:004031C1                 jz      short loc_403200
.text:004031C3                 mov     edx, [esp+5Ch+arg_14]
.text:004031C7                 test    edx, edx
.text:004031C9                 jnz     short loc_4031D7
.text:004031CB                 mov     ecx, [esp+5Ch+var_18]
.text:004031CF                 mov     ebx, [esi+4]
.text:004031D2                 cmp     [ecx+4], ebx
.text:004031D5                 jz      short loc_4031E4
.text:004031D7
.text:004031D7 loc_4031D7:                             ; CODE XREF: sub_4027D0+9F9↑j
.text:004031D7                                         ; sub_4027D0+A1A↓j ...
.text:004031D7                 mov     [esp+5Ch+var_20], 1
.text:004031DF                 jmp     loc_402A1C
.text:004031E4 ; ---------------------------------------------------------------------------
.text:004031E4
.text:004031E4 loc_4031E4:                             ; CODE XREF: sub_4027D0+A05↑j
.text:004031E4                 mov     edx, [esi+8]
.text:004031E7                 cmp     [ecx+8], edx
.text:004031EA                 jnz     short loc_4031D7
.text:004031EC                 mov     ebx, [esi+0Ch]
.text:004031EF                 cmp     [ecx+0Ch], ebx
.text:004031F2                 jnz     short loc_4031D7
.text:004031F4                 jmp     loc_402A1C
.text:004031F4 ; ---------------------------------------------------------------------------
.text:004031F9                 align 10h
.text:00403200
.text:00403200 loc_403200:                             ; CODE XREF: sub_4027D0+9F1↑j
.text:00403200                 mov     [esp+5Ch+var_18], esi
.text:00403204                 mov     eax, [esp+5Ch+var_28]
.text:00403208                 mov     [esp+5Ch+var_24], eax
.text:0040320C                 jmp     loc_402A1C
.text:00403211 ; ---------------------------------------------------------------------------
.text:00403211
.text:00403211 loc_403211:                             ; CODE XREF: sub_4027D0+9E9↑j
.text:00403211                 mov     [esp+5Ch+var_18], esi
.text:00403215                 mov     ecx, [esp+5Ch+var_28]
.text:00403219                 mov     [esp+5Ch+var_1C], 1
.text:00403221                 mov     [esp+5Ch+var_24], ecx
.text:00403225                 jmp     loc_402A30
.text:0040322A ; ---------------------------------------------------------------------------
.text:0040322A
.text:0040322A loc_40322A:                             ; CODE XREF: sub_4027D0+1BF↑j
.text:0040322A                 mov     eax, [esp+5Ch+Str]
.text:0040322E                 movsx   esi, dl
.text:00403231                 mov     [esp+5Ch+Str2], esi ; Val
.text:00403235                 mov     [esp+5Ch+Str1], eax ; Str
.text:00403238                 call    strchr
.text:0040323D                 test    eax, eax
.text:0040323F                 jnz     loc_402CF0
.text:00403245                 jmp     loc_402995
.text:0040324A ; ---------------------------------------------------------------------------
.text:0040324A
.text:0040324A loc_40324A:                             ; CODE XREF: sub_4027D0+17C↑j
.text:0040324A                 mov     ecx, 1
.text:0040324F                 jmp     loc_402952
.text:00403254 ; ---------------------------------------------------------------------------
.text:00403254
.text:00403254 loc_403254:                             ; CODE XREF: sub_4027D0+D4↑j
.text:00403254                                         ; sub_4027D0+130↑j
.text:00403254                 mov     eax, [ebp+20h]
.text:00403257                 cmp     eax, [ebp+24h]
.text:0040325A                 jz      loc_402930
.text:00403260                 mov     [ebp+0], eax
.text:00403263                 jmp     loc_402930
.text:00403268 ; ---------------------------------------------------------------------------
.text:00403268
.text:00403268 loc_403268:                             ; CODE XREF: sub_4027D0+FE↑j
.text:00403268                 mov     [ebp+20h], eax
.text:0040326B                 jmp     loc_4028F0
.text:00403270 ; ---------------------------------------------------------------------------
.text:00403270
.text:00403270 loc_403270:                             ; CODE XREF: sub_4027D0+CA↑j
.text:00403270                 mov     edx, [ebp+20h]
.text:00403273                 mov     eax, [ebp+24h]
.text:00403276                 cmp     edx, eax
.text:00403278                 jz      short loc_4032F0
.text:0040327A                 cmp     eax, ebx
.text:0040327C                 jz      short loc_403291
.text:0040327E                 mov     [esp+5Ch+Str2], ebp
.text:00403282                 mov     ebx, [esp+5Ch+arg_4]
.text:00403286                 mov     [esp+5Ch+Str1], ebx
.text:00403289                 call    sub_403480
.text:0040328E                 mov     ebx, [ebp+0]
.text:00403291
.text:00403291 loc_403291:                             ; CODE XREF: sub_4027D0+AAC↑j
.text:00403291                                         ; sub_4027D0+B22↓j ...
.text:00403291                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403295                 jge     short loc_4032E0
.text:00403297                 mov     esi, [esp+5Ch+arg_4]
.text:0040329B                 mov     eax, [esi+ebx*4]
.text:0040329E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004032A1                 jz      short loc_4032E8
.text:004032A3                 lea     esi, [esi+0]
.text:004032A9                 lea     edi, [edi+0]
.text:004032B0
.text:004032B0 loc_4032B0:                             ; CODE XREF: sub_4027D0+AFC↓j
.text:004032B0                                         ; sub_4027D0+B1C↓j
.text:004032B0                 lea     eax, [ebx+1]
.text:004032B3                 mov     ebx, eax
.text:004032B5                 mov     [ebp+0], eax
.text:004032B8                 cmp     eax, [esp+5Ch+arg_0]
.text:004032BC                 jge     short loc_4032E0
.text:004032BE                 mov     edi, [esp+5Ch+arg_4]
.text:004032C2                 mov     edx, [edi+eax*4]
.text:004032C5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:004032C8                 jz      short loc_4032D0
.text:004032CA
.text:004032CA loc_4032CA:                             ; CODE XREF: sub_4027D0+B04↓j
.text:004032CA                 mov     ebx, eax
.text:004032CC                 jmp     short loc_4032B0
.text:004032CC ; ---------------------------------------------------------------------------
.text:004032CE                 align 10h
.text:004032D0
.text:004032D0 loc_4032D0:                             ; CODE XREF: sub_4027D0+AF8↑j
.text:004032D0                 cmp     byte ptr [edx+1], 0
.text:004032D4                 jz      short loc_4032CA
.text:004032D6                 lea     esi, [esi+0]
.text:004032D9                 lea     edi, [edi+0]
.text:004032E0
.text:004032E0 loc_4032E0:                             ; CODE XREF: sub_4027D0+AC5↑j
.text:004032E0                                         ; sub_4027D0+AEC↑j ...
.text:004032E0                 mov     [ebp+24h], ebx
.text:004032E3                 jmp     loc_4028A0
.text:004032E8 ; ---------------------------------------------------------------------------
.text:004032E8
.text:004032E8 loc_4032E8:                             ; CODE XREF: sub_4027D0+AD1↑j
.text:004032E8                 cmp     byte ptr [eax+1], 0
.text:004032EC                 jz      short loc_4032B0
.text:004032EE                 jmp     short loc_4032E0
.text:004032F0 ; ---------------------------------------------------------------------------
.text:004032F0
.text:004032F0 loc_4032F0:                             ; CODE XREF: sub_4027D0+AA8↑j
.text:004032F0                 cmp     edx, ebx
.text:004032F2                 jz      short loc_403291
.text:004032F4                 mov     [ebp+20h], ebx
.text:004032F7                 jmp     short loc_403291
.text:004032F9 ; ---------------------------------------------------------------------------
.text:004032F9
.text:004032F9 loc_4032F9:                             ; CODE XREF: sub_4027D0+88↑j
.text:004032F9                 mov     dword ptr [ebp+18h], 0
.text:00403300                 mov     esi, [esp+5Ch+Str]
.text:00403304
.text:00403304 loc_403304:                             ; CODE XREF: sub_4027D0+B49↓j
.text:00403304                 inc     esi
.text:00403305                 jmp     loc_402868
.text:00403305 ; ---------------------------------------------------------------------------
.text:0040330A                 align 10h
.text:00403310
.text:00403310 loc_403310:                             ; CODE XREF: sub_4027D0+80↑j
.text:00403310                 mov     dword ptr [ebp+18h], 2
.text:00403317                 mov     esi, ecx
.text:00403319                 jmp     short loc_403304
.text:00403319 ; ---------------------------------------------------------------------------
.text:0040331B                 align 10h
.text:00403320
.text:00403320 loc_403320:                             ; CODE XREF: sub_4027D0+69↑j
.text:00403320                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00403327                 call    getenv
.text:0040332C                 test    eax, eax
.text:0040332E                 jz      loc_402844
.text:00403334                 jmp     loc_40283F
.text:00403334 ; ---------------------------------------------------------------------------
.text:00403339                 align 10h
.text:00403340
.text:00403340 loc_403340:                             ; CODE XREF: sub_4027D0+3F↑j
.text:00403340                 mov     dword ptr [ebp+0], 1
.text:00403347                 mov     ebx, 1
.text:0040334C                 jmp     loc_402820
.text:0040334C sub_4027D0      endp
.text:0040334C
.text:00403351 ; ---------------------------------------------------------------------------
.text:00403351                 jmp     short sub_403360
.text:00403351 ; ---------------------------------------------------------------------------
.text:00403353                 align 10h
.text:00403360
.text:00403360 ; =============== S U B R O U T I N E =======================================
.text:00403360
.text:00403360
.text:00403360 ; int __cdecl sub_403360(int, int, char *, int, int, int, int)
.text:00403360 sub_403360      proc near               ; CODE XREF: .text:00403351↑j
.text:00403360                                         ; sub_403B10+3A↓p ...
.text:00403360
.text:00403360 var_2C          = dword ptr -2Ch
.text:00403360 var_28          = dword ptr -28h
.text:00403360 Str             = dword ptr -24h
.text:00403360 var_20          = dword ptr -20h
.text:00403360 var_1C          = dword ptr -1Ch
.text:00403360 var_18          = dword ptr -18h
.text:00403360 var_14          = dword ptr -14h
.text:00403360 var_10          = dword ptr -10h
.text:00403360 arg_0           = dword ptr  4
.text:00403360 arg_4           = dword ptr  8
.text:00403360 arg_8           = dword ptr  0Ch
.text:00403360 arg_C           = dword ptr  10h
.text:00403360 arg_10          = dword ptr  14h
.text:00403360 arg_14          = dword ptr  18h
.text:00403360 arg_18          = dword ptr  1Ch
.text:00403360
.text:00403360                 sub     esp, 2Ch
.text:00403363                 mov     edx, dword_406020
.text:00403369                 mov     [esp+2Ch+var_10], offset dword_407090 ; int
.text:00403371                 mov     ecx, dword_406024
.text:00403377                 mov     ds:dword_407090, edx
.text:0040337D                 mov     edx, [esp+2Ch+arg_18]
.text:00403381                 mov     ds:dword_407094, ecx
.text:00403387                 mov     ecx, [esp+2Ch+arg_14]
.text:0040338B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040338F                 mov     edx, [esp+2Ch+arg_10]
.text:00403393                 mov     [esp+2Ch+var_18], ecx ; int
.text:00403397                 mov     ecx, [esp+2Ch+arg_C]
.text:0040339B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040339F                 mov     edx, [esp+2Ch+arg_8]
.text:004033A3                 mov     [esp+2Ch+var_20], ecx ; int
.text:004033A7                 mov     ecx, [esp+2Ch+arg_4]
.text:004033AB                 mov     [esp+2Ch+Str], edx ; Str
.text:004033AF                 mov     edx, [esp+2Ch+arg_0]
.text:004033B3                 mov     [esp+2Ch+var_28], ecx ; int
.text:004033B7                 mov     [esp+2Ch+var_2C], edx ; int
.text:004033BA                 call    sub_4027D0
.text:004033BF                 mov     ecx, ds:dword_407090
.text:004033C5                 mov     dword_406020, ecx
.text:004033CB                 mov     ecx, ds:dword_40709C
.text:004033D1                 mov     ds:dword_407240, ecx
.text:004033D7                 mov     ecx, ds:dword_407098
.text:004033DD                 mov     dword_406028, ecx
.text:004033E3                 add     esp, 2Ch
.text:004033E6                 retn
.text:004033E6 sub_403360      endp
.text:004033E6
.text:004033E6 ; ---------------------------------------------------------------------------
.text:004033E7                 align 10h
.text:004033F0                 sub     esp, 2Ch
.text:004033F3                 mov     edx, dword_406020
.text:004033F9                 mov     dword ptr [esp+1Ch], offset dword_407090
.text:00403401                 mov     ecx, dword_406024
.text:00403407                 mov     dword ptr [esp+18h], 1
.text:0040340F                 mov     ds:dword_407090, edx
.text:00403415                 mov     edx, [esp+38h]
.text:00403419                 mov     ds:dword_407094, ecx
.text:0040341F                 mov     ecx, [esp+34h]
.text:00403423                 mov     [esp+8], edx
.text:00403427                 mov     edx, [esp+30h]
.text:0040342B                 mov     [esp+4], ecx
.text:0040342F                 mov     dword ptr [esp+14h], 0
.text:00403437                 mov     dword ptr [esp+10h], 0
.text:0040343F                 mov     dword ptr [esp+0Ch], 0
.text:00403447                 mov     [esp], edx
.text:0040344A                 call    sub_4027D0
.text:0040344F                 mov     ecx, ds:dword_407090
.text:00403455                 mov     dword_406020, ecx
.text:0040345B                 mov     ecx, ds:dword_40709C
.text:00403461                 mov     ds:dword_407240, ecx
.text:00403467                 mov     ecx, ds:dword_407098
.text:0040346D                 mov     dword_406028, ecx
.text:00403473                 add     esp, 2Ch
.text:00403476                 retn
.text:00403476 ; ---------------------------------------------------------------------------
.text:00403477                 align 10h
.text:00403480
.text:00403480 ; =============== S U B R O U T I N E =======================================
.text:00403480
.text:00403480
.text:00403480 sub_403480      proc near               ; CODE XREF: sub_4027D0+113↑p
.text:00403480                                         ; sub_4027D0+AB9↑p
.text:00403480
.text:00403480 var_2C          = dword ptr -2Ch
.text:00403480 var_28          = dword ptr -28h
.text:00403480 var_24          = dword ptr -24h
.text:00403480 var_20          = dword ptr -20h
.text:00403480 var_1C          = dword ptr -1Ch
.text:00403480 var_18          = dword ptr -18h
.text:00403480 var_14          = dword ptr -14h
.text:00403480 arg_0           = dword ptr  4
.text:00403480 arg_4           = dword ptr  8
.text:00403480
.text:00403480                 push    ebp
.text:00403481                 push    edi
.text:00403482                 push    esi
.text:00403483                 push    ebx
.text:00403484                 sub     esp, 1Ch
.text:00403487                 mov     ecx, [esp+2Ch+arg_4]
.text:0040348B                 mov     eax, [esp+2Ch+arg_4]
.text:0040348F                 mov     ebx, [esp+2Ch+arg_4]
.text:00403493                 mov     edx, [ecx+20h]
.text:00403496                 mov     edi, [esp+2Ch+arg_0]
.text:0040349A                 mov     ecx, [ebx]
.text:0040349C                 mov     [esp+2Ch+var_2C], edx
.text:0040349F                 mov     [esp+2Ch+var_14], edx
.text:004034A3                 mov     edx, [eax+24h]
.text:004034A6                 mov     [esp+2Ch+var_28], ecx
.text:004034AA                 mov     [esp+2Ch+var_1C], ecx
.text:004034AE                 cmp     ecx, edx
.text:004034B0                 mov     [esp+2Ch+var_18], edx
.text:004034B4                 jle     short loc_403530
.text:004034B6                 mov     esi, [esp+2Ch+var_2C]
.text:004034B9                 cmp     edx, esi
.text:004034BB                 jle     short loc_403530
.text:004034BD                 lea     esi, [esi+0]
.text:004034C0
.text:004034C0 loc_4034C0:                             ; CODE XREF: sub_403480+A1↓j
.text:004034C0                 mov     ebx, [esp+2Ch+var_1C]
.text:004034C4                 mov     edx, [esp+2Ch+var_18]
.text:004034C8                 mov     ebp, [esp+2Ch+var_18]
.text:004034CC                 mov     eax, [esp+2Ch+var_14]
.text:004034D0                 sub     ebx, edx
.text:004034D2                 mov     [esp+2Ch+var_20], ebx
.text:004034D6                 sub     ebp, eax
.text:004034D8                 cmp     ebx, ebp
.text:004034DA                 jle     short loc_403555
.text:004034DC                 xor     esi, esi
.text:004034DE                 cmp     esi, ebp
.text:004034E0                 jge     short loc_40350D
.text:004034E2                 mov     ecx, [esp+2Ch+var_1C]
.text:004034E6                 sub     ecx, ebp
.text:004034E8                 mov     [esp+2Ch+var_24], ecx
.text:004034EC                 lea     esi, [esi+0]
.text:004034F0
.text:004034F0 loc_4034F0:                             ; CODE XREF: sub_403480+8B↓j
.text:004034F0                 mov     ecx, [esp+2Ch+var_14]
.text:004034F4                 mov     edx, [esp+2Ch+var_24]
.text:004034F8                 add     ecx, esi
.text:004034FA                 add     edx, esi
.text:004034FC                 mov     ebx, [edi+ecx*4]
.text:004034FF                 mov     eax, [edi+edx*4]
.text:00403502                 inc     esi
.text:00403503                 cmp     esi, ebp
.text:00403505                 mov     [edi+ecx*4], eax
.text:00403508                 mov     [edi+edx*4], ebx
.text:0040350B                 jl      short loc_4034F0
.text:0040350D
.text:0040350D loc_40350D:                             ; CODE XREF: sub_403480+60↑j
.text:0040350D                 sub     [esp+2Ch+var_1C], ebp
.text:00403511
.text:00403511 loc_403511:                             ; CODE XREF: sub_403480+107↓j
.text:00403511                 mov     eax, [esp+2Ch+var_18]
.text:00403515                 cmp     [esp+2Ch+var_1C], eax
.text:00403519                 jle     short loc_403530
.text:0040351B                 mov     ebp, [esp+2Ch+var_14]
.text:0040351F                 cmp     eax, ebp
.text:00403521                 jg      short loc_4034C0
.text:00403523                 lea     esi, [esi+0]
.text:00403529                 lea     edi, [edi+0]
.text:00403530
.text:00403530 loc_403530:                             ; CODE XREF: sub_403480+34↑j
.text:00403530                                         ; sub_403480+3B↑j ...
.text:00403530                 mov     esi, [esp+2Ch+var_28]
.text:00403534                 mov     ecx, [esp+2Ch+var_18]
.text:00403538                 mov     eax, [esp+2Ch+var_2C]
.text:0040353B                 mov     edi, [esp+2Ch+arg_4]
.text:0040353F                 mov     edx, [esp+2Ch+var_28]
.text:00403543                 sub     esi, ecx
.text:00403545                 add     esi, eax
.text:00403547                 mov     [edi+20h], esi
.text:0040354A                 mov     [edi+24h], edx
.text:0040354D                 add     esp, 1Ch
.text:00403550                 pop     ebx
.text:00403551                 pop     esi
.text:00403552                 pop     edi
.text:00403553                 pop     ebp
.text:00403554                 retn
.text:00403555 ; ---------------------------------------------------------------------------
.text:00403555
.text:00403555 loc_403555:                             ; CODE XREF: sub_403480+5A↑j
.text:00403555                 xor     esi, esi
.text:00403557                 cmp     esi, [esp+2Ch+var_20]
.text:0040355B                 jge     short loc_40357F
.text:0040355D                 lea     esi, [esi+0]
.text:00403560
.text:00403560 loc_403560:                             ; CODE XREF: sub_403480+FD↓j
.text:00403560                 mov     ebx, [esp+2Ch+var_14]
.text:00403564                 mov     ebp, [esp+2Ch+var_18]
.text:00403568                 add     ebx, esi
.text:0040356A                 add     ebp, esi
.text:0040356C                 mov     edx, [edi+ebx*4]
.text:0040356F                 inc     esi
.text:00403570                 cmp     esi, [esp+2Ch+var_20]
.text:00403574                 mov     ecx, [edi+ebp*4]
.text:00403577                 mov     [edi+ebx*4], ecx
.text:0040357A                 mov     [edi+ebp*4], edx
.text:0040357D                 jl      short loc_403560
.text:0040357F
.text:0040357F loc_40357F:                             ; CODE XREF: sub_403480+DB↑j
.text:0040357F                 mov     esi, [esp+2Ch+var_20]
.text:00403583                 add     [esp+2Ch+var_14], esi
.text:00403587                 jmp     short loc_403511
.text:00403587 sub_403480      endp
.text:00403587
.text:00403587 ; ---------------------------------------------------------------------------
.text:00403589                 align 20h
.text:004035A0 ; const char aPosix2Version[]
.text:004035A0 aPosix2Version  db '_POSIX2_VERSION',0  ; DATA XREF: sub_4035B0+C↓o
.text:004035B0
.text:004035B0 ; =============== S U B R O U T I N E =======================================
.text:004035B0
.text:004035B0
.text:004035B0 sub_4035B0      proc near               ; CODE XREF: sub_4016B0+362↑p
.text:004035B0
.text:004035B0 VarName         = dword ptr -1Ch
.text:004035B0 EndPtr          = dword ptr -18h
.text:004035B0 Radix           = dword ptr -14h
.text:004035B0 var_8           = dword ptr -8
.text:004035B0 var_4           = dword ptr -4
.text:004035B0
.text:004035B0                 sub     esp, 1Ch
.text:004035B3                 mov     [esp+1Ch+var_4], ebx
.text:004035B7                 mov     ebx, 30A29h
.text:004035BC                 mov     [esp+1Ch+VarName], offset aPosix2Version ; "_POSIX2_VERSION"
.text:004035C3                 call    getenv
.text:004035C8                 test    eax, eax
.text:004035CA                 jz      short loc_4035D1
.text:004035CC                 cmp     byte ptr [eax], 0
.text:004035CF                 jnz     short loc_4035E0
.text:004035D1
.text:004035D1 loc_4035D1:                             ; CODE XREF: sub_4035B0+1A↑j
.text:004035D1                                         ; sub_4035B0+4F↓j ...
.text:004035D1                 mov     eax, ebx
.text:004035D3                 mov     ebx, [esp+1Ch+var_4]
.text:004035D7                 add     esp, 1Ch
.text:004035DA                 retn
.text:004035DA ; ---------------------------------------------------------------------------
.text:004035DB                 align 10h
.text:004035E0
.text:004035E0 loc_4035E0:                             ; CODE XREF: sub_4035B0+1F↑j
.text:004035E0                 mov     [esp+1Ch+Radix], 0Ah ; Radix
.text:004035E8                 lea     ecx, [esp+1Ch+var_8]
.text:004035EC                 mov     [esp+1Ch+EndPtr], ecx ; EndPtr
.text:004035F0                 mov     [esp+1Ch+VarName], eax ; String
.text:004035F3                 call    strtol
.text:004035F8                 mov     ecx, [esp+1Ch+var_8]
.text:004035FC                 cmp     byte ptr [ecx], 0
.text:004035FF                 jnz     short loc_4035D1
.text:00403601                 mov     ebx, eax
.text:00403603                 jmp     short loc_4035D1
.text:00403603 sub_4035B0      endp
.text:00403603
.text:00403603 ; ---------------------------------------------------------------------------
.text:00403605                 align 10h
.text:00403610 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00403610                                         ; DATA XREF: .data:Buffer↓o
.text:00403642 ; const char Format[]
.text:00403642 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_403900+50↓o
.text:0040364E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040364E                                         ; DATA XREF: sub_403900:loc_4039A1↓o
.text:0040365E                 db 12h dup(90h)
.text:00403670 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00403670                                         ; DATA XREF: sub_403900+100↓o
.text:00403670                 db 'ere is NO',0Ah
.text:00403670                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00403670                 db 'R PURPOSE.',0Ah,0
.text:00403708 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00403708                                         ; DATA XREF: sub_403900:loc_403A41↓o
.text:0040371F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040371F                                         ; DATA XREF: sub_403900:loc_403A4D↓o
.text:0040373B                 db 15h dup(90h)
.text:00403750 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00403750                                         ; DATA XREF: sub_403900:loc_403A59↓o
.text:00403750                 db 'and %s.',0Ah,0
.text:00403770 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00403770                                         ; DATA XREF: sub_403900:loc_403A65↓o
.text:00403770                 db '%s, and %s.',0Ah,0
.text:00403794                 db 1Ch dup(90h)
.text:004037B0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:004037B0                                         ; DATA XREF: sub_403900:loc_403A71↓o
.text:004037B0                 db '%s, %s, and %s.',0Ah,0
.text:004037D8                 db 18h dup(90h)
.text:004037F0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:004037F0                                         ; DATA XREF: sub_403900:loc_403A7D↓o
.text:004037F0                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040381C                 db 14h dup(90h)
.text:00403830 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00403830                                         ; DATA XREF: sub_403900:loc_403A89↓o
.text:00403830                 db '%s, %s, %s, %s,',0Ah
.text:00403830                 db 'and %s.',0Ah,0
.text:00403860                 db 10h dup(90h)
.text:00403870 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00403870                                         ; DATA XREF: sub_403900:loc_403A95↓o
.text:00403870                 db '%s, %s, %s, %s,',0Ah
.text:00403870                 db '%s, and %s.',0Ah,0
.text:004038A4                 align 10h
.text:004038B0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:004038B0                                         ; DATA XREF: sub_403900:def_40396D↓o
.text:004038B0                 db '%s, %s, %s, %s,',0Ah
.text:004038B0                 db '%s, %s, and others.',0Ah,0
.text:004038EC ; const char aSS[]
.text:004038EC aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_403900+1B5↓o
.text:004038F3                 align 10h
.text:00403900
.text:00403900 ; =============== S U B R O U T I N E =======================================
.text:00403900
.text:00403900
.text:00403900 ; int __cdecl sub_403900(FILE *, FILE *, int, int, va_list)
.text:00403900 sub_403900      proc near               ; CODE XREF: sub_403AD0+2A↓p
.text:00403900
.text:00403900 Stream          = dword ptr -2Ch
.text:00403900 Format          = dword ptr -28h
.text:00403900 ArgList         = dword ptr -24h
.text:00403900 var_20          = dword ptr -20h
.text:00403900 var_1C          = dword ptr -1Ch
.text:00403900 var_14          = dword ptr -14h
.text:00403900 arg_0           = dword ptr  4
.text:00403900 arg_4           = dword ptr  8
.text:00403900 arg_8           = dword ptr  0Ch
.text:00403900 arg_C           = dword ptr  10h
.text:00403900 arg_10          = dword ptr  14h
.text:00403900
.text:00403900                 push    ebp
.text:00403901                 push    edi
.text:00403902                 push    esi
.text:00403903                 push    ebx
.text:00403904                 sub     esp, 1Ch
.text:00403907                 xor     ebx, ebx
.text:00403909                 mov     edi, [esp+2Ch+arg_10]
.text:0040390D                 mov     edx, [esp+2Ch+arg_8]
.text:00403911                 mov     esi, [esp+2Ch+arg_0]
.text:00403915                 mov     eax, [edi]
.text:00403917                 mov     ecx, [esp+2Ch+arg_4]
.text:0040391B                 mov     [esp+2Ch+var_14], edx
.text:0040391F                 mov     ebp, [esp+2Ch+arg_C]
.text:00403923                 lea     edx, [edi+4]
.text:00403926                 test    eax, eax
.text:00403928                 jz      short loc_40393C
.text:0040392A                 lea     esi, [esi+0]
.text:00403930
.text:00403930 loc_403930:                             ; CODE XREF: sub_403900+3A↓j
.text:00403930                 mov     eax, edx
.text:00403932                 inc     ebx
.text:00403933                 mov     eax, [eax]
.text:00403935                 add     edx, 4
.text:00403938                 test    eax, eax
.text:0040393A                 jnz     short loc_403930
.text:0040393C
.text:0040393C loc_40393C:                             ; CODE XREF: sub_403900+28↑j
.text:0040393C                 test    ecx, ecx
.text:0040393E                 jz      loc_403AAD
.text:00403944                 mov     [esp+2Ch+var_1C], ebp
.text:00403948                 mov     edx, [esp+2Ch+var_14]
.text:0040394C                 mov     [esp+2Ch+ArgList], ecx
.text:00403950                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00403958                 mov     [esp+2Ch+var_20], edx
.text:0040395C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040395F                 call    fprintf
.text:00403964
.text:00403964 loc_403964:                             ; CODE XREF: sub_403900+1C9↓j
.text:00403964                 cmp     ebx, 9          ; switch 10 cases
.text:00403967                 ja      def_40396D      ; jumptable 0040396D default case
.text:0040396D                 jmp     ds:jpt_40396D[ebx*4] ; switch jump
.text:0040396D ; ---------------------------------------------------------------------------
.text:00403974 jpt_40396D      dd offset loc_40399C    ; DATA XREF: sub_403900+6D↑r
.text:00403974                 dd offset loc_4039A1    ; jump table for switch statement
.text:00403974                 dd offset loc_403A41
.text:00403974                 dd offset loc_403A4D
.text:00403974                 dd offset loc_403A59
.text:00403974                 dd offset loc_403A65
.text:00403974                 dd offset loc_403A71
.text:00403974                 dd offset loc_403A7D
.text:00403974                 dd offset loc_403A89
.text:00403974                 dd offset loc_403A95
.text:0040399C ; ---------------------------------------------------------------------------
.text:0040399C
.text:0040399C loc_40399C:                             ; CODE XREF: sub_403900+6D↑j
.text:0040399C                                         ; DATA XREF: sub_403900:jpt_40396D↑o
.text:0040399C                 call    abort           ; jumptable 0040396D case 0
.text:004039A1 ; ---------------------------------------------------------------------------
.text:004039A1
.text:004039A1 loc_4039A1:                             ; CODE XREF: sub_403900+6D↑j
.text:004039A1                                         ; DATA XREF: sub_403900:jpt_40396D↑o
.text:004039A1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040396D case 1
.text:004039A8                 nop
.text:004039A9                 lea     esi, [esi+0]
.text:004039B0
.text:004039B0 loc_4039B0:                             ; CODE XREF: sub_403900+148↓j
.text:004039B0                                         ; sub_403900+154↓j ...
.text:004039B0                 call    ds:libintl_gettext
.text:004039B6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004039BA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004039BD                 mov     [esp+2Ch+Format], eax ; Format
.text:004039C1                 call    vfprintf
.text:004039C6                 mov     ebx, [esi+4]
.text:004039C9                 dec     ebx
.text:004039CA                 test    ebx, ebx
.text:004039CC                 mov     [esi+4], ebx
.text:004039CF                 js      short loc_403A2F
.text:004039D1                 mov     edi, [esi]
.text:004039D3                 mov     byte ptr [edi], 0Ah
.text:004039D6                 inc     dword ptr [esi]
.text:004039D8
.text:004039D8 loc_4039D8:                             ; CODE XREF: sub_403900+13F↓j
.text:004039D8                 mov     [esp+2Ch+Format], esi ; Stream
.text:004039DC                 mov     edx, Buffer
.text:004039E2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:004039E5                 call    fputs
.text:004039EA                 mov     ebp, [esi+4]
.text:004039ED                 dec     ebp
.text:004039EE                 test    ebp, ebp
.text:004039F0                 mov     [esi+4], ebp
.text:004039F3                 js      short loc_403A1D
.text:004039F5                 mov     ecx, [esi]
.text:004039F7                 mov     byte ptr [ecx], 0Ah
.text:004039FA                 inc     dword ptr [esi]
.text:004039FC
.text:004039FC loc_4039FC:                             ; CODE XREF: sub_403900+12D↓j
.text:004039FC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00403A00                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00403A07                 call    ds:libintl_gettext
.text:00403A0D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00403A11                 add     esp, 1Ch
.text:00403A14                 pop     ebx
.text:00403A15                 pop     esi
.text:00403A16                 pop     edi
.text:00403A17                 pop     ebp
.text:00403A18                 jmp     fputs
.text:00403A1D ; ---------------------------------------------------------------------------
.text:00403A1D
.text:00403A1D loc_403A1D:                             ; CODE XREF: sub_403900+F3↑j
.text:00403A1D                 mov     [esp+2Ch+Format], esi ; File
.text:00403A21                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403A28                 call    _flsbuf
.text:00403A2D                 jmp     short loc_4039FC
.text:00403A2F ; ---------------------------------------------------------------------------
.text:00403A2F
.text:00403A2F loc_403A2F:                             ; CODE XREF: sub_403900+CF↑j
.text:00403A2F                 mov     [esp+2Ch+Format], esi ; File
.text:00403A33                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403A3A                 call    _flsbuf
.text:00403A3F                 jmp     short loc_4039D8
.text:00403A41 ; ---------------------------------------------------------------------------
.text:00403A41
.text:00403A41 loc_403A41:                             ; CODE XREF: sub_403900+6D↑j
.text:00403A41                                         ; DATA XREF: sub_403900:jpt_40396D↑o
.text:00403A41                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040396D case 2
.text:00403A48                 jmp     loc_4039B0
.text:00403A4D ; ---------------------------------------------------------------------------
.text:00403A4D
.text:00403A4D loc_403A4D:                             ; CODE XREF: sub_403900+6D↑j
.text:00403A4D                                         ; DATA XREF: sub_403900:jpt_40396D↑o
.text:00403A4D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040396D case 3
.text:00403A54                 jmp     loc_4039B0
.text:00403A59 ; ---------------------------------------------------------------------------
.text:00403A59
.text:00403A59 loc_403A59:                             ; CODE XREF: sub_403900+6D↑j
.text:00403A59                                         ; DATA XREF: sub_403900:jpt_40396D↑o
.text:00403A59                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040396D case 4
.text:00403A60                 jmp     loc_4039B0
.text:00403A65 ; ---------------------------------------------------------------------------
.text:00403A65
.text:00403A65 loc_403A65:                             ; CODE XREF: sub_403900+6D↑j
.text:00403A65                                         ; DATA XREF: sub_403900:jpt_40396D↑o
.text:00403A65                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040396D case 5
.text:00403A6C                 jmp     loc_4039B0
.text:00403A71 ; ---------------------------------------------------------------------------
.text:00403A71
.text:00403A71 loc_403A71:                             ; CODE XREF: sub_403900+6D↑j
.text:00403A71                                         ; DATA XREF: sub_403900:jpt_40396D↑o
.text:00403A71                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040396D case 6
.text:00403A78                 jmp     loc_4039B0
.text:00403A7D ; ---------------------------------------------------------------------------
.text:00403A7D
.text:00403A7D loc_403A7D:                             ; CODE XREF: sub_403900+6D↑j
.text:00403A7D                                         ; DATA XREF: sub_403900:jpt_40396D↑o
.text:00403A7D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040396D case 7
.text:00403A84                 jmp     loc_4039B0
.text:00403A89 ; ---------------------------------------------------------------------------
.text:00403A89
.text:00403A89 loc_403A89:                             ; CODE XREF: sub_403900+6D↑j
.text:00403A89                                         ; DATA XREF: sub_403900:jpt_40396D↑o
.text:00403A89                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040396D case 8
.text:00403A90                 jmp     loc_4039B0
.text:00403A95 ; ---------------------------------------------------------------------------
.text:00403A95
.text:00403A95 loc_403A95:                             ; CODE XREF: sub_403900+6D↑j
.text:00403A95                                         ; DATA XREF: sub_403900:jpt_40396D↑o
.text:00403A95                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040396D case 9
.text:00403A9C                 jmp     loc_4039B0
.text:00403AA1 ; ---------------------------------------------------------------------------
.text:00403AA1
.text:00403AA1 def_40396D:                             ; CODE XREF: sub_403900+67↑j
.text:00403AA1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040396D default case
.text:00403AA8                 jmp     loc_4039B0
.text:00403AAD ; ---------------------------------------------------------------------------
.text:00403AAD
.text:00403AAD loc_403AAD:                             ; CODE XREF: sub_403900+3E↑j
.text:00403AAD                 mov     [esp+2Ch+var_20], ebp
.text:00403AB1                 mov     ecx, [esp+2Ch+var_14]
.text:00403AB5                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:00403ABD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403AC0                 mov     [esp+2Ch+ArgList], ecx
.text:00403AC4                 call    fprintf
.text:00403AC9                 jmp     loc_403964
.text:00403AC9 sub_403900      endp
.text:00403AC9
.text:00403AC9 ; ---------------------------------------------------------------------------
.text:00403ACE                 align 10h
.text:00403AD0
.text:00403AD0 ; =============== S U B R O U T I N E =======================================
.text:00403AD0
.text:00403AD0
.text:00403AD0 ; int __cdecl sub_403AD0(FILE *, FILE *, int, int, char)
.text:00403AD0 sub_403AD0      proc near               ; CODE XREF: sub_4016B0+27C↑p
.text:00403AD0
.text:00403AD0 var_1C          = dword ptr -1Ch
.text:00403AD0 var_18          = dword ptr -18h
.text:00403AD0 var_14          = dword ptr -14h
.text:00403AD0 var_10          = dword ptr -10h
.text:00403AD0 var_C           = dword ptr -0Ch
.text:00403AD0 arg_0           = dword ptr  4
.text:00403AD0 arg_4           = dword ptr  8
.text:00403AD0 arg_8           = dword ptr  0Ch
.text:00403AD0 arg_C           = dword ptr  10h
.text:00403AD0 arg_10          = byte ptr  14h
.text:00403AD0
.text:00403AD0                 sub     esp, 1Ch
.text:00403AD3                 mov     edx, [esp+1Ch+arg_C]
.text:00403AD7                 lea     ecx, [esp+1Ch+arg_10]
.text:00403ADB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:00403ADF                 mov     ecx, [esp+1Ch+arg_8]
.text:00403AE3                 mov     [esp+1Ch+var_10], edx ; int
.text:00403AE7                 mov     edx, [esp+1Ch+arg_4]
.text:00403AEB                 mov     [esp+1Ch+var_14], ecx ; int
.text:00403AEF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00403AF3                 mov     edx, [esp+1Ch+arg_0]
.text:00403AF7                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:00403AFA                 call    sub_403900
.text:00403AFF                 add     esp, 1Ch
.text:00403B02                 retn
.text:00403B02 sub_403AD0      endp
.text:00403B02
.text:00403B02 ; ---------------------------------------------------------------------------
.text:00403B03                 align 10h
.text:00403B10
.text:00403B10 ; =============== S U B R O U T I N E =======================================
.text:00403B10
.text:00403B10
.text:00403B10 ; int __cdecl sub_403B10(int, int, char *, int, int)
.text:00403B10 sub_403B10      proc near               ; CODE XREF: sub_4016B0+C5↑p
.text:00403B10
.text:00403B10 var_1C          = dword ptr -1Ch
.text:00403B10 var_18          = dword ptr -18h
.text:00403B10 var_14          = dword ptr -14h
.text:00403B10 var_10          = dword ptr -10h
.text:00403B10 var_C           = dword ptr -0Ch
.text:00403B10 var_8           = dword ptr -8
.text:00403B10 var_4           = dword ptr -4
.text:00403B10 arg_0           = dword ptr  4
.text:00403B10 arg_4           = dword ptr  8
.text:00403B10 arg_8           = dword ptr  0Ch
.text:00403B10 arg_C           = dword ptr  10h
.text:00403B10 arg_10          = dword ptr  14h
.text:00403B10
.text:00403B10                 sub     esp, 1Ch
.text:00403B13                 mov     edx, [esp+1Ch+arg_C]
.text:00403B17                 mov     [esp+1Ch+var_4], 0 ; int
.text:00403B1F                 mov     ecx, [esp+1Ch+arg_10]
.text:00403B23                 mov     [esp+1Ch+var_8], 0 ; int
.text:00403B2B                 mov     [esp+1Ch+var_10], edx ; int
.text:00403B2F                 mov     edx, [esp+1Ch+arg_4]
.text:00403B33                 mov     [esp+1Ch+var_C], ecx ; int
.text:00403B37                 mov     ecx, [esp+1Ch+arg_8]
.text:00403B3B                 mov     [esp+1Ch+var_18], edx ; int
.text:00403B3F                 mov     edx, [esp+1Ch+arg_0]
.text:00403B43                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00403B47                 mov     [esp+1Ch+var_1C], edx ; int
.text:00403B4A                 call    sub_403360
.text:00403B4F                 add     esp, 1Ch
.text:00403B52                 retn
.text:00403B52 sub_403B10      endp
.text:00403B52
.text:00403B52 ; ---------------------------------------------------------------------------
.text:00403B53                 align 10h
.text:00403B60                 sub     esp, 2Ch
.text:00403B63                 mov     edx, [esp+44h]
.text:00403B67                 mov     dword ptr [esp+18h], 0
.text:00403B6F                 mov     ecx, [esp+40h]
.text:00403B73                 mov     dword ptr [esp+14h], 0
.text:00403B7B                 mov     [esp+1Ch], edx
.text:00403B7F                 mov     edx, [esp+3Ch]
.text:00403B83                 mov     [esp+10h], ecx
.text:00403B87                 mov     ecx, [esp+38h]
.text:00403B8B                 mov     [esp+0Ch], edx
.text:00403B8F                 mov     edx, [esp+34h]
.text:00403B93                 mov     [esp+8], ecx
.text:00403B97                 mov     [esp+4], edx
.text:00403B9B                 mov     edx, [esp+30h]
.text:00403B9F                 mov     [esp], edx
.text:00403BA2                 call    sub_4027D0
.text:00403BA7                 add     esp, 2Ch
.text:00403BAA                 retn
.text:00403BAA ; ---------------------------------------------------------------------------
.text:00403BAB                 align 10h
.text:00403BB0                 sub     esp, 1Ch
.text:00403BB3                 mov     edx, [esp+2Ch]
.text:00403BB7                 mov     dword ptr [esp+18h], 0
.text:00403BBF                 mov     ecx, [esp+30h]
.text:00403BC3                 mov     dword ptr [esp+14h], 1
.text:00403BCB                 mov     [esp+0Ch], edx
.text:00403BCF                 mov     edx, [esp+24h]
.text:00403BD3                 mov     [esp+10h], ecx
.text:00403BD7                 mov     ecx, [esp+28h]
.text:00403BDB                 mov     [esp+4], edx
.text:00403BDF                 mov     edx, [esp+20h]
.text:00403BE3                 mov     [esp+8], ecx
.text:00403BE7                 mov     [esp], edx
.text:00403BEA                 call    sub_403360
.text:00403BEF                 add     esp, 1Ch
.text:00403BF2                 retn
.text:00403BF2 ; ---------------------------------------------------------------------------
.text:00403BF3                 align 10h
.text:00403C00                 sub     esp, 2Ch
.text:00403C03                 mov     edx, [esp+44h]
.text:00403C07                 mov     dword ptr [esp+18h], 0
.text:00403C0F                 mov     ecx, [esp+40h]
.text:00403C13                 mov     dword ptr [esp+14h], 1
.text:00403C1B                 mov     [esp+1Ch], edx
.text:00403C1F                 mov     edx, [esp+3Ch]
.text:00403C23                 mov     [esp+10h], ecx
.text:00403C27                 mov     ecx, [esp+38h]
.text:00403C2B                 mov     [esp+0Ch], edx
.text:00403C2F                 mov     edx, [esp+34h]
.text:00403C33                 mov     [esp+8], ecx
.text:00403C37                 mov     [esp+4], edx
.text:00403C3B                 mov     edx, [esp+30h]
.text:00403C3F                 mov     [esp], edx
.text:00403C42                 call    sub_4027D0
.text:00403C47                 add     esp, 2Ch
.text:00403C4A                 retn
.text:00403C4A ; ---------------------------------------------------------------------------
.text:00403C4B                 align 10h
.text:00403C50                 mov     edx, [esp+4]
.text:00403C54                 mov     ds:dword_4070C0, edx
.text:00403C5A                 retn
.text:00403C5A ; ---------------------------------------------------------------------------
.text:00403C5B aWriteError_0   db 'write error',0      ; DATA XREF: sub_403C80:loc_403CC9↓o
.text:00403C67 ; const char aSS_0[]
.text:00403C67 aSS_0           db '%s: %s',0           ; DATA XREF: sub_403C80+77↓o
.text:00403C6E ; const char aS_1[]
.text:00403C6E aS_1            db '%s',0               ; DATA XREF: sub_403C80+A0↓o
.text:00403C71 ; ---------------------------------------------------------------------------
.text:00403C71                 jmp     short sub_403C80
.text:00403C71 ; ---------------------------------------------------------------------------
.text:00403C73                 align 10h
.text:00403C80
.text:00403C80 ; =============== S U B R O U T I N E =======================================
.text:00403C80
.text:00403C80
.text:00403C80 ; void __cdecl sub_403C80()
.text:00403C80 sub_403C80      proc near               ; CODE XREF: .text:00403C71↑j
.text:00403C80                                         ; DATA XREF: sub_4016B0+61↑o
.text:00403C80
.text:00403C80 Stream          = dword ptr -2Ch
.text:00403C80 ErrorMessage    = dword ptr -28h
.text:00403C80 var_24          = dword ptr -24h
.text:00403C80 var_20          = byte ptr -20h
.text:00403C80 var_1C          = dword ptr -1Ch
.text:00403C80 var_9           = byte ptr -9
.text:00403C80
.text:00403C80                 push    esi
.text:00403C81                 push    ebx
.text:00403C82                 sub     esp, 24h
.text:00403C85                 mov     edx, ds:_iob
.text:00403C8B                 mov     ecx, [edx+2Ch]
.text:00403C8E                 lea     esi, [edx+20h]
.text:00403C91                 shr     ecx, 5
.text:00403C94                 mov     bl, cl
.text:00403C96                 mov     ecx, [edx+20h]
.text:00403C99                 and     bl, 1
.text:00403C9C                 cmp     ecx, [esi+8]
.text:00403C9F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403CA2                 setz    [esp+2Ch+var_9]
.text:00403CA7                 call    fclose
.text:00403CAC                 test    eax, eax
.text:00403CAE                 setnz   al
.text:00403CB1                 test    bl, bl
.text:00403CB3                 jnz     loc_403D43
.text:00403CB9                 test    al, al
.text:00403CBB                 jz      short loc_403D10
.text:00403CBD
.text:00403CBD loc_403CBD:                             ; CODE XREF: sub_403C80+CD↓j
.text:00403CBD                 call    _errno
.text:00403CC2                 mov     esi, [eax]
.text:00403CC4
.text:00403CC4 loc_403CC4:                             ; CODE XREF: sub_403C80+C7↓j
.text:00403CC4                 cmp     esi, 9
.text:00403CC7                 jz      short loc_403D36
.text:00403CC9
.text:00403CC9 loc_403CC9:                             ; CODE XREF: sub_403C80+B8↓j
.text:00403CC9                                         ; sub_403C80+C1↓j
.text:00403CC9                 mov     [esp+2Ch+Stream], offset aWriteError_0 ; "write error"
.text:00403CD0                 call    ds:libintl_gettext
.text:00403CD6                 mov     ebx, eax
.text:00403CD8                 mov     eax, ds:dword_4070C0
.text:00403CDD                 test    eax, eax
.text:00403CDF                 jz      short loc_403D16
.text:00403CE1                 mov     [esp+2Ch+Stream], eax ; char *
.text:00403CE4                 call    sub_4051F0
.text:00403CE9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00403CED                 mov     edx, Code
.text:00403CF3                 mov     [esp+2Ch+var_1C], ebx
.text:00403CF7                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:00403CFF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403D03                 mov     [esp+2Ch+Stream], edx ; Code
.text:00403D06                 call    sub_405510
.text:00403D0B                 nop
.text:00403D0C                 lea     esi, [esi+0]
.text:00403D10
.text:00403D10 loc_403D10:                             ; CODE XREF: sub_403C80+3B↑j
.text:00403D10                                         ; sub_403C80+B4↓j ...
.text:00403D10                 add     esp, 24h
.text:00403D13                 pop     ebx
.text:00403D14                 pop     esi
.text:00403D15                 retn
.text:00403D16 ; ---------------------------------------------------------------------------
.text:00403D16
.text:00403D16 loc_403D16:                             ; CODE XREF: sub_403C80+5F↑j
.text:00403D16                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00403D1A                 mov     ebx, Code
.text:00403D20                 mov     [esp+2Ch+var_24], offset aS_1 ; "%s"
.text:00403D28                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403D2C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00403D2F                 call    sub_405510
.text:00403D34                 jmp     short loc_403D10
.text:00403D36 ; ---------------------------------------------------------------------------
.text:00403D36
.text:00403D36 loc_403D36:                             ; CODE XREF: sub_403C80+47↑j
.text:00403D36                 test    bl, bl
.text:00403D38                 jnz     short loc_403CC9
.text:00403D3A                 cmp     [esp+2Ch+var_9], 0
.text:00403D3F                 jnz     short loc_403D10
.text:00403D41                 jmp     short loc_403CC9
.text:00403D43 ; ---------------------------------------------------------------------------
.text:00403D43
.text:00403D43 loc_403D43:                             ; CODE XREF: sub_403C80+33↑j
.text:00403D43                 xor     esi, esi
.text:00403D45                 test    al, al
.text:00403D47                 jz      loc_403CC4
.text:00403D4D                 jmp     loc_403CBD
.text:00403D4D sub_403C80      endp
.text:00403D4D
.text:00403D4D ; ---------------------------------------------------------------------------
.text:00403D52                 align 10h
.text:00403D60                 sub     esp, 0Ch
.text:00403D63                 mov     edx, [esp+14h]
.text:00403D67                 mov     dword ptr [esp+4], 5
.text:00403D6F                 mov     [esp+8], edx
.text:00403D73                 mov     edx, [esp+10h]
.text:00403D77                 mov     [esp], edx
.text:00403D7A                 call    sub_404E80
.text:00403D7F                 add     esp, 0Ch
.text:00403D82                 retn
.text:00403D82 ; ---------------------------------------------------------------------------
.text:00403D83                 align 10h
.text:00403D90
.text:00403D90 ; =============== S U B R O U T I N E =======================================
.text:00403D90
.text:00403D90
.text:00403D90 ; int __cdecl sub_403D90(char *)
.text:00403D90 sub_403D90      proc near               ; CODE XREF: sub_401DF0+11B↑p
.text:00403D90                                         ; sub_401DF0+1E6↑p
.text:00403D90
.text:00403D90 var_C           = dword ptr -0Ch
.text:00403D90 var_8           = dword ptr -8
.text:00403D90 var_4           = dword ptr -4
.text:00403D90 arg_0           = dword ptr  4
.text:00403D90
.text:00403D90                 sub     esp, 0Ch
.text:00403D93                 mov     edx, [esp+0Ch+arg_0]
.text:00403D97                 mov     [esp+0Ch+var_8], 5 ; int
.text:00403D9F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00403DA6                 mov     [esp+0Ch+var_4], edx ; char *
.text:00403DAA                 call    sub_404E80
.text:00403DAF                 add     esp, 0Ch
.text:00403DB2                 retn
.text:00403DB2 sub_403D90      endp
.text:00403DB2
.text:00403DB2 ; ---------------------------------------------------------------------------
.text:00403DB3                 align 10h
.text:00403DC0
.text:00403DC0 ; =============== S U B R O U T I N E =======================================
.text:00403DC0
.text:00403DC0
.text:00403DC0 ; int __cdecl sub_403DC0(void *, int)
.text:00403DC0 sub_403DC0      proc near               ; CODE XREF: sub_401DF0+111↑p
.text:00403DC0
.text:00403DC0 var_C           = dword ptr -0Ch
.text:00403DC0 var_8           = dword ptr -8
.text:00403DC0 arg_0           = dword ptr  4
.text:00403DC0 arg_4           = dword ptr  8
.text:00403DC0
.text:00403DC0                 sub     esp, 0Ch
.text:00403DC3                 mov     edx, [esp+0Ch+arg_4]
.text:00403DC7                 mov     [esp+0Ch+var_8], edx ; int
.text:00403DCB                 mov     edx, [esp+0Ch+arg_0]
.text:00403DCF                 mov     [esp+0Ch+var_C], edx ; void *
.text:00403DD2                 call    sub_4057B0
.text:00403DD7                 test    eax, eax
.text:00403DD9                 jz      short loc_403DDF
.text:00403DDB                 add     esp, 0Ch
.text:00403DDE                 retn
.text:00403DDF ; ---------------------------------------------------------------------------
.text:00403DDF
.text:00403DDF loc_403DDF:                             ; CODE XREF: sub_403DC0+19↑j
.text:00403DDF                 call    sub_405480
.text:00403DDF sub_403DC0      endp
.text:00403DDF
.text:00403DDF ; ---------------------------------------------------------------------------
.text:00403DE4                 align 10h
.text:00403DF0
.text:00403DF0 ; =============== S U B R O U T I N E =======================================
.text:00403DF0
.text:00403DF0
.text:00403DF0 sub_403DF0      proc near
.text:00403DF0
.text:00403DF0 Size            = dword ptr -0Ch
.text:00403DF0 var_4           = dword ptr -4
.text:00403DF0 arg_0           = dword ptr  4
.text:00403DF0 arg_4           = dword ptr  8
.text:00403DF0
.text:00403DF0                 sub     esp, 0Ch
.text:00403DF3                 xor     edx, edx
.text:00403DF5                 mov     ecx, [esp+0Ch+arg_4]
.text:00403DF9                 mov     [esp+0Ch+var_4], ebx
.text:00403DFD                 mov     eax, 0FFFFFFFFh
.text:00403E02                 mov     ebx, [esp+0Ch+arg_0]
.text:00403E06                 div     ecx
.text:00403E08                 cmp     eax, ebx
.text:00403E0A                 jb      short loc_403E29
.text:00403E0C                 mov     edx, ebx
.text:00403E0E                 imul    edx, ecx
.text:00403E11                 mov     [esp+0Ch+Size], edx ; Size
.text:00403E14                 call    malloc
.text:00403E19                 test    eax, eax
.text:00403E1B                 jz      short loc_403E25
.text:00403E1D
.text:00403E1D loc_403E1D:                             ; CODE XREF: sub_403DF0+37↓j
.text:00403E1D                 mov     ebx, [esp+0Ch+var_4]
.text:00403E21                 add     esp, 0Ch
.text:00403E24                 retn
.text:00403E25 ; ---------------------------------------------------------------------------
.text:00403E25
.text:00403E25 loc_403E25:                             ; CODE XREF: sub_403DF0+2B↑j
.text:00403E25                 test    ebx, ebx
.text:00403E27                 jz      short loc_403E1D
.text:00403E29
.text:00403E29 loc_403E29:                             ; CODE XREF: sub_403DF0+1A↑j
.text:00403E29                 call    sub_405480
.text:00403E29 sub_403DF0      endp
.text:00403E29
.text:00403E29 ; ---------------------------------------------------------------------------
.text:00403E2E                 align 10h
.text:00403E30
.text:00403E30 ; =============== S U B R O U T I N E =======================================
.text:00403E30
.text:00403E30
.text:00403E30 ; int __cdecl sub_403E30(size_t)
.text:00403E30 sub_403E30      proc near               ; CODE XREF: .text:00404BC9↓p
.text:00403E30                                         ; .text:00404DA6↓p ...
.text:00403E30
.text:00403E30 Size            = dword ptr -0Ch
.text:00403E30 var_4           = dword ptr -4
.text:00403E30 arg_0           = dword ptr  4
.text:00403E30
.text:00403E30                 sub     esp, 0Ch
.text:00403E33                 mov     [esp+0Ch+var_4], ebx
.text:00403E37                 mov     ebx, [esp+0Ch+arg_0]
.text:00403E3B                 mov     [esp+0Ch+Size], ebx ; Size
.text:00403E3E                 call    malloc
.text:00403E43                 test    eax, eax
.text:00403E45                 jz      short loc_403E50
.text:00403E47
.text:00403E47 loc_403E47:                             ; CODE XREF: sub_403E30+22↓j
.text:00403E47                 mov     ebx, [esp+0Ch+var_4]
.text:00403E4B                 add     esp, 0Ch
.text:00403E4E                 retn
.text:00403E4E ; ---------------------------------------------------------------------------
.text:00403E4F                 align 10h
.text:00403E50
.text:00403E50 loc_403E50:                             ; CODE XREF: sub_403E30+15↑j
.text:00403E50                 test    ebx, ebx
.text:00403E52                 jz      short loc_403E47
.text:00403E54                 call    sub_405480
.text:00403E54 sub_403E30      endp
.text:00403E54
.text:00403E54 ; ---------------------------------------------------------------------------
.text:00403E59                 align 10h
.text:00403E60                 sub     esp, 1Ch
.text:00403E63                 xor     edx, edx
.text:00403E65                 mov     eax, 0FFFFFFFFh
.text:00403E6A                 mov     [esp+14h], ebx
.text:00403E6E                 mov     ecx, [esp+20h]
.text:00403E72                 mov     ebx, [esp+28h]
.text:00403E76                 mov     [esp+18h], esi
.text:00403E7A                 mov     esi, [esp+24h]
.text:00403E7E                 div     ebx
.text:00403E80                 cmp     eax, esi
.text:00403E82                 jb      short loc_403EB4
.text:00403E84                 mov     [esp], ecx
.text:00403E87                 mov     edx, esi
.text:00403E89                 imul    edx, ebx
.text:00403E8C                 mov     [esp+4], edx
.text:00403E90                 call    realloc
.text:00403E95                 test    eax, eax
.text:00403E97                 mov     ecx, eax
.text:00403E99                 jz      short loc_403EB0
.text:00403E9B
.text:00403E9B loc_403E9B:                             ; CODE XREF: .text:00403EB2↓j
.text:00403E9B                 mov     ebx, [esp+14h]
.text:00403E9F                 mov     eax, ecx
.text:00403EA1                 mov     esi, [esp+18h]
.text:00403EA5                 add     esp, 1Ch
.text:00403EA8                 retn
.text:00403EA8 ; ---------------------------------------------------------------------------
.text:00403EA9                 align 10h
.text:00403EB0
.text:00403EB0 loc_403EB0:                             ; CODE XREF: .text:00403E99↑j
.text:00403EB0                 test    esi, esi
.text:00403EB2                 jz      short loc_403E9B
.text:00403EB4
.text:00403EB4 loc_403EB4:                             ; CODE XREF: .text:00403E82↑j
.text:00403EB4                 call    sub_405480
.text:00403EB4 ; ---------------------------------------------------------------------------
.text:00403EB9                 align 10h
.text:00403EC0
.text:00403EC0 ; =============== S U B R O U T I N E =======================================
.text:00403EC0
.text:00403EC0
.text:00403EC0 ; int __cdecl sub_403EC0(void *, size_t)
.text:00403EC0 sub_403EC0      proc near               ; CODE XREF: sub_405290+5B↓p
.text:00403EC0
.text:00403EC0 Block           = dword ptr -0Ch
.text:00403EC0 Size            = dword ptr -8
.text:00403EC0 var_4           = dword ptr -4
.text:00403EC0 arg_0           = dword ptr  4
.text:00403EC0 arg_4           = dword ptr  8
.text:00403EC0
.text:00403EC0                 sub     esp, 0Ch
.text:00403EC3                 mov     edx, [esp+0Ch+arg_0]
.text:00403EC7                 mov     [esp+0Ch+var_4], ebx
.text:00403ECB                 mov     ebx, [esp+0Ch+arg_4]
.text:00403ECF                 mov     [esp+0Ch+Block], edx ; Block
.text:00403ED2                 mov     [esp+0Ch+Size], ebx ; Size
.text:00403ED6                 call    realloc
.text:00403EDB                 test    eax, eax
.text:00403EDD                 jz      short loc_403EE7
.text:00403EDF
.text:00403EDF loc_403EDF:                             ; CODE XREF: sub_403EC0+29↓j
.text:00403EDF                 mov     ebx, [esp+0Ch+var_4]
.text:00403EE3                 add     esp, 0Ch
.text:00403EE6                 retn
.text:00403EE7 ; ---------------------------------------------------------------------------
.text:00403EE7
.text:00403EE7 loc_403EE7:                             ; CODE XREF: sub_403EC0+1D↑j
.text:00403EE7                 test    ebx, ebx
.text:00403EE9                 jz      short loc_403EDF
.text:00403EEB                 call    sub_405480
.text:00403EEB sub_403EC0      endp
.text:00403EEB
.text:00403EF0
.text:00403EF0 ; =============== S U B R O U T I N E =======================================
.text:00403EF0
.text:00403EF0 ; Attributes: thunk
.text:00403EF0
.text:00403EF0 ; int __cdecl sub_403EF0(void *, int, int)
.text:00403EF0 sub_403EF0      proc near               ; CODE XREF: sub_4016B0+34A↑p
.text:00403EF0                                         ; sub_4016B0+530↑p ...
.text:00403EF0                 jmp     sub_404040
.text:00403EF0 sub_403EF0      endp
.text:00403EF0
.text:00403EF0 ; ---------------------------------------------------------------------------
.text:00403EF5                 align 10h
.text:00403F00                 sub     esp, 0Ch
.text:00403F03                 mov     edx, [esp+14h]
.text:00403F07                 mov     dword ptr [esp+8], 1
.text:00403F0F                 mov     [esp+4], edx
.text:00403F13                 mov     edx, [esp+10h]
.text:00403F17                 mov     [esp], edx
.text:00403F1A                 call    sub_404040
.text:00403F1F                 add     esp, 0Ch
.text:00403F22                 retn
.text:00403F22 ; ---------------------------------------------------------------------------
.text:00403F23                 align 10h
.text:00403F30                 sub     esp, 1Ch
.text:00403F33                 mov     [esp+18h], ebx
.text:00403F37                 mov     ebx, [esp+20h]
.text:00403F3B                 mov     [esp], ebx
.text:00403F3E                 call    malloc
.text:00403F43                 test    eax, eax
.text:00403F45                 jz      short loc_403F63
.text:00403F47
.text:00403F47 loc_403F47:                             ; CODE XREF: .text:00403F65↓j
.text:00403F47                 mov     [esp+8], ebx
.text:00403F4B                 mov     dword ptr [esp+4], 0
.text:00403F53                 mov     [esp], eax
.text:00403F56                 call    memset
.text:00403F5B                 mov     ebx, [esp+18h]
.text:00403F5F                 add     esp, 1Ch
.text:00403F62                 retn
.text:00403F63 ; ---------------------------------------------------------------------------
.text:00403F63
.text:00403F63 loc_403F63:                             ; CODE XREF: .text:00403F45↑j
.text:00403F63                 test    ebx, ebx
.text:00403F65                 jz      short loc_403F47
.text:00403F67                 call    sub_405480
.text:00403F67 ; ---------------------------------------------------------------------------
.text:00403F6C                 align 10h
.text:00403F70                 sub     esp, 0Ch
.text:00403F73                 xor     edx, edx
.text:00403F75                 mov     ecx, [esp+14h]
.text:00403F79                 mov     [esp+8], ebx
.text:00403F7D                 mov     eax, 0FFFFFFFFh
.text:00403F82                 mov     ebx, [esp+10h]
.text:00403F86                 div     ecx
.text:00403F88                 cmp     eax, ebx
.text:00403F8A                 jb      short loc_403FA8
.text:00403F8C                 mov     [esp+4], ecx
.text:00403F90                 mov     [esp], ebx
.text:00403F93                 call    calloc
.text:00403F98                 test    eax, eax
.text:00403F9A                 jz      short loc_403FA4
.text:00403F9C
.text:00403F9C loc_403F9C:                             ; CODE XREF: .text:00403FA6↓j
.text:00403F9C                 mov     ebx, [esp+8]
.text:00403FA0                 add     esp, 0Ch
.text:00403FA3                 retn
.text:00403FA4 ; ---------------------------------------------------------------------------
.text:00403FA4
.text:00403FA4 loc_403FA4:                             ; CODE XREF: .text:00403F9A↑j
.text:00403FA4                 test    ebx, ebx
.text:00403FA6                 jz      short loc_403F9C
.text:00403FA8
.text:00403FA8 loc_403FA8:                             ; CODE XREF: .text:00403F8A↑j
.text:00403FA8                 call    sub_405480
.text:00403FA8 ; ---------------------------------------------------------------------------
.text:00403FAD                 align 10h
.text:00403FB0                 sub     esp, 1Ch
.text:00403FB3                 mov     [esp+18h], ebx
.text:00403FB7                 mov     ebx, [esp+24h]
.text:00403FBB                 mov     [esp], ebx
.text:00403FBE                 call    malloc
.text:00403FC3                 test    eax, eax
.text:00403FC5                 mov     edx, eax
.text:00403FC7                 jz      short loc_403FE5
.text:00403FC9
.text:00403FC9 loc_403FC9:                             ; CODE XREF: .text:00403FE7↓j
.text:00403FC9                 mov     [esp+8], ebx
.text:00403FCD                 mov     ecx, [esp+20h]
.text:00403FD1                 mov     [esp], edx
.text:00403FD4                 mov     [esp+4], ecx
.text:00403FD8                 call    memcpy
.text:00403FDD                 mov     ebx, [esp+18h]
.text:00403FE1                 add     esp, 1Ch
.text:00403FE4                 retn
.text:00403FE5 ; ---------------------------------------------------------------------------
.text:00403FE5
.text:00403FE5 loc_403FE5:                             ; CODE XREF: .text:00403FC7↑j
.text:00403FE5                 test    ebx, ebx
.text:00403FE7                 jz      short loc_403FC9
.text:00403FE9                 call    sub_405480
.text:00403FE9 ; ---------------------------------------------------------------------------
.text:00403FEE                 align 10h
.text:00403FF0                 sub     esp, 1Ch
.text:00403FF3                 mov     [esp+18h], esi
.text:00403FF7                 mov     esi, [esp+20h]
.text:00403FFB                 mov     [esp+14h], ebx
.text:00403FFF                 mov     [esp], esi
.text:00404002                 call    strlen
.text:00404007                 lea     ebx, [eax+1]
.text:0040400A                 mov     [esp], ebx
.text:0040400D                 call    malloc
.text:00404012                 test    eax, eax
.text:00404014                 jz      short loc_404032
.text:00404016
.text:00404016 loc_404016:                             ; CODE XREF: .text:00404034↓j
.text:00404016                 mov     [esp+8], ebx
.text:0040401A                 mov     [esp+4], esi
.text:0040401E                 mov     [esp], eax
.text:00404021                 call    memcpy
.text:00404026                 mov     ebx, [esp+14h]
.text:0040402A                 mov     esi, [esp+18h]
.text:0040402E                 add     esp, 1Ch
.text:00404031                 retn
.text:00404032 ; ---------------------------------------------------------------------------
.text:00404032
.text:00404032 loc_404032:                             ; CODE XREF: .text:00404014↑j
.text:00404032                 test    ebx, ebx
.text:00404034                 jz      short loc_404016
.text:00404036                 call    sub_405480
.text:00404036 ; ---------------------------------------------------------------------------
.text:0040403B                 align 10h
.text:00404040
.text:00404040 ; =============== S U B R O U T I N E =======================================
.text:00404040
.text:00404040
.text:00404040 ; int __cdecl sub_404040(void *, int, int)
.text:00404040 sub_404040      proc near               ; CODE XREF: sub_403EF0↑j
.text:00404040                                         ; .text:00403F1A↑p
.text:00404040
.text:00404040 Block           = dword ptr -1Ch
.text:00404040 Size            = dword ptr -18h
.text:00404040 var_C           = dword ptr -0Ch
.text:00404040 var_8           = dword ptr -8
.text:00404040 var_4           = dword ptr -4
.text:00404040 arg_0           = dword ptr  4
.text:00404040 arg_4           = dword ptr  8
.text:00404040 arg_8           = dword ptr  0Ch
.text:00404040
.text:00404040                 sub     esp, 1Ch
.text:00404043                 mov     [esp+1Ch+var_8], esi
.text:00404047                 mov     esi, [esp+1Ch+arg_0]
.text:0040404B                 mov     [esp+1Ch+var_4], edi
.text:0040404F                 mov     edi, [esp+1Ch+arg_4]
.text:00404053                 test    esi, esi
.text:00404055                 mov     [esp+1Ch+var_C], ebx
.text:00404059                 mov     ecx, [edi]
.text:0040405B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040405F                 jz      short loc_4040A0
.text:00404061                 xor     edx, edx
.text:00404063                 mov     eax, 7FFFFFFFh
.text:00404068                 div     ebx
.text:0040406A                 cmp     eax, ecx
.text:0040406C                 jb      short loc_404099
.text:0040406E                 add     ecx, ecx
.text:00404070
.text:00404070 loc_404070:                             ; CODE XREF: sub_404040+62↓j
.text:00404070                                         ; sub_404040+71↓j ...
.text:00404070                 mov     [edi], ecx
.text:00404072                 imul    ebx, ecx
.text:00404075                 mov     [esp+1Ch+Block], esi ; Block
.text:00404078                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040407C                 call    realloc
.text:00404081                 test    eax, eax
.text:00404083                 jz      short loc_404095
.text:00404085
.text:00404085 loc_404085:                             ; CODE XREF: sub_404040+57↓j
.text:00404085                 mov     ebx, [esp+1Ch+var_C]
.text:00404089                 mov     esi, [esp+1Ch+var_8]
.text:0040408D                 mov     edi, [esp+1Ch+var_4]
.text:00404091                 add     esp, 1Ch
.text:00404094                 retn
.text:00404095 ; ---------------------------------------------------------------------------
.text:00404095
.text:00404095 loc_404095:                             ; CODE XREF: sub_404040+43↑j
.text:00404095                 test    ebx, ebx
.text:00404097                 jz      short loc_404085
.text:00404099
.text:00404099 loc_404099:                             ; CODE XREF: sub_404040+2C↑j
.text:00404099                 call    sub_405480
.text:00404099 ; ---------------------------------------------------------------------------
.text:0040409E                 align 10h
.text:004040A0
.text:004040A0 loc_4040A0:                             ; CODE XREF: sub_404040+1F↑j
.text:004040A0                 test    ecx, ecx
.text:004040A2                 jnz     short loc_404070
.text:004040A4                 xor     edx, edx
.text:004040A6                 mov     eax, 40h ; '@'
.text:004040AB                 div     ebx
.text:004040AD                 test    eax, eax
.text:004040AF                 mov     ecx, eax
.text:004040B1                 jnz     short loc_404070
.text:004040B3                 mov     ecx, 1
.text:004040B8                 jmp     short loc_404070
.text:004040B8 sub_404040      endp
.text:004040B8
.text:004040B8 ; ---------------------------------------------------------------------------
.text:004040BA                 align 10h
.text:004040C0 aLiteral        db 'literal',0          ; DATA XREF: .text:00404100↓o
.text:004040C8 aShell          db 'shell',0            ; DATA XREF: .text:00404104↓o
.text:004040CE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00404108↓o
.text:004040DB aC              db 'c',0                ; DATA XREF: .text:0040410C↓o
.text:004040DD aEscape         db 'escape',0           ; DATA XREF: .text:00404110↓o
.text:004040E4 aLocale         db 'locale',0           ; DATA XREF: .text:00404114↓o
.text:004040EB aClocale        db 'clocale',0          ; DATA XREF: .text:00404118↓o
.text:004040F3                 align 10h
.text:00404100                 dd offset aLiteral      ; "literal"
.text:00404104                 dd offset aShell        ; "shell"
.text:00404108                 dd offset aShellAlways  ; "shell-always"
.text:0040410C                 dd offset aC            ; "c"
.text:00404110                 dd offset aEscape       ; "escape"
.text:00404114                 dd offset aLocale       ; "locale"
.text:00404118                 dd offset aClocale      ; "clocale"
.text:0040411C                 dd 2 dup(0)
.text:00404124                 dd 1, 2, 3, 4, 5, 6
.text:0040413C asc_40413C:                             ; DATA XREF: sub_404150+7E↓o
.text:0040413C                                         ; sub_404150+A39↓o ...
.text:0040413C                 text "UTF-16LE", '"',27h,'`'
.text:00404142                 align 10h
.text:00404150
.text:00404150 ; =============== S U B R O U T I N E =======================================
.text:00404150
.text:00404150
.text:00404150 ; int __cdecl sub_404150(int, int, char *Str, int, int, int)
.text:00404150 sub_404150      proc near               ; CODE XREF: sub_404150+43A↓p
.text:00404150                                         ; .text:00404D13↓p ...
.text:00404150
.text:00404150 C               = dword ptr -4Ch
.text:00404150 Type            = dword ptr -48h
.text:00404150 SizeInBytes     = dword ptr -44h
.text:00404150 State           = dword ptr -40h
.text:00404150 var_3C          = dword ptr -3Ch
.text:00404150 var_38          = dword ptr -38h
.text:00404150 var_34          = dword ptr -34h
.text:00404150 var_30          = dword ptr -30h
.text:00404150 var_29          = byte ptr -29h
.text:00404150 var_28          = dword ptr -28h
.text:00404150 var_22          = byte ptr -22h
.text:00404150 var_21          = byte ptr -21h
.text:00404150 var_20          = dword ptr -20h
.text:00404150 var_1C          = dword ptr -1Ch
.text:00404150 var_18          = mbstate_t ptr -18h
.text:00404150 arg_0           = dword ptr  4
.text:00404150 arg_4           = dword ptr  8
.text:00404150 Str             = dword ptr  0Ch
.text:00404150 arg_C           = dword ptr  10h
.text:00404150 arg_10          = dword ptr  14h
.text:00404150 arg_14          = dword ptr  18h
.text:00404150
.text:00404150                 push    ebp
.text:00404151                 push    edi
.text:00404152                 push    esi
.text:00404153                 push    ebx
.text:00404154                 sub     esp, 3Ch
.text:00404157                 mov     edx, ds:__mb_cur_max
.text:0040415D                 mov     [esp+4Ch+var_34], 0
.text:00404165                 mov     [esp+4Ch+var_1C], 0
.text:0040416D                 cmp     dword ptr [edx], 1
.text:00404170                 mov     [esp+4Ch+var_20], 0
.text:00404178                 mov     [esp+4Ch+var_21], 0
.text:0040417D                 setz    [esp+4Ch+var_22]
.text:00404182                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00404187                 ja      short def_40418D ; jumptable 0040418D default case, cases 0,1
.text:00404189                 mov     edx, [esp+4Ch+arg_10]
.text:0040418D                 jmp     ds:jpt_40418D[edx*4] ; switch jump
.text:0040418D ; ---------------------------------------------------------------------------
.text:00404194 jpt_40418D      dd offset def_40418D    ; DATA XREF: sub_404150+3D↑r
.text:00404194                 dd offset def_40418D    ; jump table for switch statement
.text:00404194                 dd offset loc_404AD5
.text:00404194                 dd offset loc_4041B0
.text:00404194                 dd offset loc_404AFB
.text:00404194                 dd offset loc_404B05
.text:00404194                 dd offset loc_404B05
.text:004041B0 ; ---------------------------------------------------------------------------
.text:004041B0
.text:004041B0 loc_4041B0:                             ; CODE XREF: sub_404150+3D↑j
.text:004041B0                                         ; DATA XREF: sub_404150:jpt_40418D↑o
.text:004041B0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040418D case 3
.text:004041B4                 cmp     [esp+4Ch+var_34], eax
.text:004041B8                 jnb     short loc_4041C1
.text:004041BA                 mov     ebx, [esp+4Ch+arg_0]
.text:004041BE                 mov     byte ptr [ebx], 22h ; '"'
.text:004041C1
.text:004041C1 loc_4041C1:                             ; CODE XREF: sub_404150+68↑j
.text:004041C1                 mov     [esp+4Ch+var_34], 1
.text:004041C9                 mov     [esp+4Ch+var_21], 1
.text:004041CE                 mov     [esp+4Ch+var_1C], offset asc_40413C ; "\"'`"
.text:004041D6
.text:004041D6 loc_4041D6:                             ; CODE XREF: sub_404150+9A6↓j
.text:004041D6                 mov     [esp+4Ch+var_20], 1
.text:004041DE
.text:004041DE def_40418D:                             ; CODE XREF: sub_404150+37↑j
.text:004041DE                                         ; sub_404150+3D↑j ...
.text:004041DE                 xor     ebp, ebp        ; jumptable 0040418D default case, cases 0,1
.text:004041E0
.text:004041E0 loc_4041E0:                             ; CODE XREF: sub_404150+3DB↓j
.text:004041E0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004041E5                 jz      loc_404AC7
.text:004041EB                 cmp     ebp, [esp+4Ch+arg_C]
.text:004041EF
.text:004041EF loc_4041EF:                             ; CODE XREF: sub_404150+980↓j
.text:004041EF                 jz      loc_404A5E
.text:004041F5                 cmp     [esp+4Ch+var_21], 0
.text:004041FA                 jz      short loc_404240
.text:004041FC                 mov     esi, [esp+4Ch+var_20]
.text:00404200                 test    esi, esi
.text:00404202                 jz      short loc_404240
.text:00404204                 mov     ecx, [esp+4Ch+var_20]
.text:00404208                 lea     edi, [ecx+ebp]
.text:0040420B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040420F                 ja      short loc_404240
.text:00404211                 cld
.text:00404212                 mov     ebx, [esp+4Ch+Str]
.text:00404216                 mov     edi, [esp+4Ch+var_1C]
.text:0040421A                 add     ebx, ebp
.text:0040421C                 mov     esi, ebx
.text:0040421E                 cmp     ecx, ecx
.text:00404220                 repe cmpsb
.text:00404222                 jnz     short loc_404240
.text:00404224                 mov     edx, [esp+4Ch+arg_4]
.text:00404228                 cmp     [esp+4Ch+var_34], edx
.text:0040422C                 jnb     short loc_40423A
.text:0040422E                 mov     ecx, [esp+4Ch+arg_0]
.text:00404232                 mov     eax, [esp+4Ch+var_34]
.text:00404236                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040423A
.text:0040423A loc_40423A:                             ; CODE XREF: sub_404150+DC↑j
.text:0040423A                 inc     [esp+4Ch+var_34]
.text:0040423E                 mov     esi, esi
.text:00404240
.text:00404240 loc_404240:                             ; CODE XREF: sub_404150+AA↑j
.text:00404240                                         ; sub_404150+B2↑j ...
.text:00404240                 mov     edi, [esp+4Ch+Str]
.text:00404244                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00404249                 movzx   eax, bl
.text:0040424C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040424F                 ja      def_404255      ; jumptable 00404255 default case, cases 1-6,14-31,64
.text:00404255                 jmp     ds:jpt_404255[eax*4] ; switch jump
.text:00404255 ; ---------------------------------------------------------------------------
.text:0040425C jpt_404255      dd offset loc_404458, offset def_404255, offset def_404255
.text:0040425C                                         ; DATA XREF: sub_404150+105↑r
.text:0040425C                 dd offset def_404255, offset def_404255, offset def_404255 ; jump table for switch statement
.text:0040425C                 dd offset def_404255, offset loc_404530, offset loc_40454E
.text:0040425C                 dd offset loc_404552, offset loc_404597, offset loc_40459B
.text:0040425C                 dd offset loc_40459F, offset loc_4045A3, offset def_404255
.text:0040425C                 dd offset def_404255, offset def_404255, offset def_404255
.text:0040425C                 dd offset def_404255, offset def_404255, offset def_404255
.text:0040425C                 dd offset def_404255, offset def_404255, offset def_404255
.text:0040425C                 dd offset def_404255, offset def_404255, offset def_404255
.text:0040425C                 dd offset def_404255, offset def_404255, offset def_404255
.text:0040425C                 dd offset def_404255, offset def_404255, offset loc_404A28
.text:0040425C                 dd offset loc_404A28, offset loc_404A28, offset loc_404A4A
.text:0040425C                 dd offset loc_404A28, offset def_404652, offset loc_404A28
.text:0040425C                 dd offset loc_4045A7, offset loc_404A28, offset loc_404A28
.text:0040425C                 dd offset loc_404A28, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset loc_404A28
.text:0040425C                 dd offset loc_404A28, offset loc_404A28, offset loc_404A28
.text:0040425C                 dd offset loc_40460C, offset def_404255, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset loc_404A28, offset loc_404A21
.text:0040425C                 dd offset def_404652, offset loc_404A28, offset def_404652
.text:0040425C                 dd offset loc_404A28, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset def_404652, offset def_404652, offset def_404652
.text:0040425C                 dd offset loc_404A38, offset loc_404A28, offset loc_404A38
.text:0040425C                 dd offset loc_404A4A
.text:00404458 ; ---------------------------------------------------------------------------
.text:00404458
.text:00404458 loc_404458:                             ; CODE XREF: sub_404150+105↑j
.text:00404458                                         ; DATA XREF: sub_404150:jpt_404255↑o
.text:00404458                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00404255 case 0
.text:0040445D                 lea     eax, [ebp+1]
.text:00404460                 jz      loc_404510
.text:00404466                 mov     esi, [esp+4Ch+arg_4]
.text:0040446A                 cmp     [esp+4Ch+var_34], esi
.text:0040446E                 jnb     short loc_40447C
.text:00404470                 mov     eax, [esp+4Ch+arg_0]
.text:00404474                 mov     ebx, [esp+4Ch+var_34]
.text:00404478                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040447C
.text:0040447C loc_40447C:                             ; CODE XREF: sub_404150+31E↑j
.text:0040447C                 inc     [esp+4Ch+var_34]
.text:00404480                 mov     edx, [esp+4Ch+arg_4]
.text:00404484                 cmp     [esp+4Ch+var_34], edx
.text:00404488                 jnb     short loc_404496
.text:0040448A                 mov     edi, [esp+4Ch+arg_0]
.text:0040448E                 mov     ecx, [esp+4Ch+var_34]
.text:00404492                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00404496
.text:00404496 loc_404496:                             ; CODE XREF: sub_404150+338↑j
.text:00404496                 inc     [esp+4Ch+var_34]
.text:0040449A                 mov     esi, [esp+4Ch+arg_4]
.text:0040449E                 cmp     [esp+4Ch+var_34], esi
.text:004044A2                 jnb     short loc_4044B0
.text:004044A4                 mov     ebx, [esp+4Ch+arg_0]
.text:004044A8                 mov     eax, [esp+4Ch+var_34]
.text:004044AC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:004044B0
.text:004044B0 loc_4044B0:                             ; CODE XREF: sub_404150+352↑j
.text:004044B0                 inc     [esp+4Ch+var_34]
.text:004044B4                 mov     bl, 30h ; '0'
.text:004044B6                 lea     esi, [esi+0]
.text:004044B9                 lea     edi, [edi+0]
.text:004044C0
.text:004044C0 def_404652:                             ; CODE XREF: sub_404150+105↑j
.text:004044C0                                         ; sub_404150+463↓j ...
.text:004044C0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00404255 cases 37,43-58,65-90,93,95,97-122
.text:004044C0                                         ; jumptable 00404652 default case, cases 34-38,42-44,46,48-59
.text:004044C5                 lea     eax, [ebp+1]
.text:004044C8                 jz      short loc_404510
.text:004044CA                 mov     cl, bl
.text:004044CC                 mov     edi, [esp+4Ch+arg_14]
.text:004044D0                 mov     esi, 1
.text:004044D5                 shr     cl, 5
.text:004044D8                 movzx   edx, cl
.text:004044DB                 mov     ecx, ebx
.text:004044DD                 and     ecx, 1Fh
.text:004044E0                 shl     esi, cl
.text:004044E2                 test    [edi+edx*4+4], esi
.text:004044E6                 jz      short loc_404502
.text:004044E8
.text:004044E8 loc_4044E8:                             ; CODE XREF: sub_404150+3FC↓j
.text:004044E8                 mov     edx, [esp+4Ch+arg_4]
.text:004044EC                 cmp     [esp+4Ch+var_34], edx
.text:004044F0                 jnb     short loc_4044FE
.text:004044F2                 mov     edi, [esp+4Ch+arg_0]
.text:004044F6                 mov     esi, [esp+4Ch+var_34]
.text:004044FA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:004044FE
.text:004044FE loc_4044FE:                             ; CODE XREF: sub_404150+3A0↑j
.text:004044FE                 inc     [esp+4Ch+var_34]
.text:00404502
.text:00404502 loc_404502:                             ; CODE XREF: sub_404150+396↑j
.text:00404502                 lea     eax, [ebp+1]
.text:00404505                 lea     esi, [esi+0]
.text:00404509                 lea     edi, [edi+0]
.text:00404510
.text:00404510 loc_404510:                             ; CODE XREF: sub_404150+310↑j
.text:00404510                                         ; sub_404150+378↑j ...
.text:00404510                 mov     ebp, [esp+4Ch+arg_4]
.text:00404514                 cmp     [esp+4Ch+var_34], ebp
.text:00404518                 jnb     short loc_404525
.text:0040451A                 mov     edx, [esp+4Ch+arg_0]
.text:0040451E                 mov     ecx, [esp+4Ch+var_34]
.text:00404522                 mov     [ecx+edx], bl
.text:00404525
.text:00404525 loc_404525:                             ; CODE XREF: sub_404150+3C8↑j
.text:00404525                 inc     [esp+4Ch+var_34]
.text:00404529                 mov     ebp, eax
.text:0040452B                 jmp     loc_4041E0
.text:00404530 ; ---------------------------------------------------------------------------
.text:00404530
.text:00404530 loc_404530:                             ; CODE XREF: sub_404150+105↑j
.text:00404530                                         ; DATA XREF: sub_404150:jpt_404255↑o
.text:00404530                 mov     dl, 61h ; 'a'   ; jumptable 00404255 case 7
.text:00404532                 lea     esi, [esi+0]
.text:00404539                 lea     edi, [edi+0]
.text:00404540
.text:00404540 loc_404540:                             ; CODE XREF: sub_404150+400↓j
.text:00404540                                         ; sub_404150+409↓j ...
.text:00404540                 cmp     [esp+4Ch+var_21], 0
.text:00404545                 lea     eax, [ebp+1]
.text:00404548                 jz      short loc_404510
.text:0040454A                 mov     bl, dl
.text:0040454C                 jmp     short loc_4044E8
.text:0040454E ; ---------------------------------------------------------------------------
.text:0040454E
.text:0040454E loc_40454E:                             ; CODE XREF: sub_404150+105↑j
.text:0040454E                                         ; DATA XREF: sub_404150:jpt_404255↑o
.text:0040454E                 mov     dl, 62h ; 'b'   ; jumptable 00404255 case 8
.text:00404550                 jmp     short loc_404540
.text:00404552 ; ---------------------------------------------------------------------------
.text:00404552
.text:00404552 loc_404552:                             ; CODE XREF: sub_404150+105↑j
.text:00404552                                         ; DATA XREF: sub_404150:jpt_404255↑o
.text:00404552                 mov     dl, 74h ; 't'   ; jumptable 00404255 case 9
.text:00404554
.text:00404554 loc_404554:                             ; CODE XREF: sub_404150+449↓j
.text:00404554                                         ; sub_404150+455↓j ...
.text:00404554                 cmp     [esp+4Ch+arg_10], 1
.text:00404559                 jnz     short loc_404540
.text:0040455B
.text:0040455B loc_40455B:                             ; CODE XREF: sub_404150+45C↓j
.text:0040455B                                         ; sub_404150+4C1↓j ...
.text:0040455B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404922 cases 91,92,94,96,124
.text:00404563                 mov     eax, [esp+4Ch+arg_14]
.text:00404567                 mov     edx, [esp+4Ch+arg_C]
.text:0040456B                 mov     ecx, [esp+4Ch+Str]
.text:0040456F                 mov     ebx, [esp+4Ch+arg_4]
.text:00404573                 mov     [esp+4Ch+var_38], eax ; int
.text:00404577                 mov     ebp, [esp+4Ch+arg_0]
.text:0040457B                 mov     [esp+4Ch+State], edx ; int
.text:0040457F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00404583                 mov     [esp+4Ch+Type], ebx ; int
.text:00404587                 mov     [esp+4Ch+C], ebp ; int
.text:0040458A                 call    sub_404150
.text:0040458F
.text:0040458F loc_40458F:                             ; CODE XREF: sub_404150+972↓j
.text:0040458F                 add     esp, 3Ch
.text:00404592                 pop     ebx
.text:00404593                 pop     esi
.text:00404594                 pop     edi
.text:00404595                 pop     ebp
.text:00404596                 retn
.text:00404597 ; ---------------------------------------------------------------------------
.text:00404597
.text:00404597 loc_404597:                             ; CODE XREF: sub_404150+105↑j
.text:00404597                                         ; DATA XREF: sub_404150:jpt_404255↑o
.text:00404597                 mov     dl, 6Eh ; 'n'   ; jumptable 00404255 case 10
.text:00404599                 jmp     short loc_404554
.text:0040459B ; ---------------------------------------------------------------------------
.text:0040459B
.text:0040459B loc_40459B:                             ; CODE XREF: sub_404150+105↑j
.text:0040459B                                         ; DATA XREF: sub_404150:jpt_404255↑o
.text:0040459B                 mov     dl, 76h ; 'v'   ; jumptable 00404255 case 11
.text:0040459D                 jmp     short loc_404540
.text:0040459F ; ---------------------------------------------------------------------------
.text:0040459F
.text:0040459F loc_40459F:                             ; CODE XREF: sub_404150+105↑j
.text:0040459F                                         ; DATA XREF: sub_404150:jpt_404255↑o
.text:0040459F                 mov     dl, 66h ; 'f'   ; jumptable 00404255 case 12
.text:004045A1                 jmp     short loc_404540
.text:004045A3 ; ---------------------------------------------------------------------------
.text:004045A3
.text:004045A3 loc_4045A3:                             ; CODE XREF: sub_404150+105↑j
.text:004045A3                                         ; DATA XREF: sub_404150:jpt_404255↑o
.text:004045A3                 mov     dl, 72h ; 'r'   ; jumptable 00404255 case 13
.text:004045A5                 jmp     short loc_404554
.text:004045A7 ; ---------------------------------------------------------------------------
.text:004045A7
.text:004045A7 loc_4045A7:                             ; CODE XREF: sub_404150+105↑j
.text:004045A7                                         ; DATA XREF: sub_404150:jpt_404255↑o
.text:004045A7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404255 case 39
.text:004045AC                 jz      short loc_40455B ; jumptable 00404922 cases 91,92,94,96,124
.text:004045AE                 cmp     [esp+4Ch+arg_10], 2
.text:004045B3                 jnz     def_404652      ; jumptable 00404255 cases 37,43-58,65-90,93,95,97-122
.text:004045B3                                         ; jumptable 00404652 default case, cases 34-38,42-44,46,48-59
.text:004045B9                 mov     edx, [esp+4Ch+arg_4]
.text:004045BD                 cmp     [esp+4Ch+var_34], edx
.text:004045C1                 jnb     short loc_4045CF
.text:004045C3                 mov     ecx, [esp+4Ch+arg_0]
.text:004045C7                 mov     edi, [esp+4Ch+var_34]
.text:004045CB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:004045CF
.text:004045CF loc_4045CF:                             ; CODE XREF: sub_404150+471↑j
.text:004045CF                 inc     [esp+4Ch+var_34]
.text:004045D3                 mov     eax, [esp+4Ch+arg_4]
.text:004045D7                 cmp     [esp+4Ch+var_34], eax
.text:004045DB                 jnb     short loc_4045E9
.text:004045DD                 mov     esi, [esp+4Ch+arg_0]
.text:004045E1                 mov     edx, [esp+4Ch+var_34]
.text:004045E5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:004045E9
.text:004045E9 loc_4045E9:                             ; CODE XREF: sub_404150+48B↑j
.text:004045E9                 inc     [esp+4Ch+var_34]
.text:004045ED                 mov     edi, [esp+4Ch+arg_4]
.text:004045F1                 cmp     [esp+4Ch+var_34], edi
.text:004045F5                 jnb     short loc_404603
.text:004045F7                 mov     ecx, [esp+4Ch+arg_0]
.text:004045FB                 mov     eax, [esp+4Ch+var_34]
.text:004045FF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00404603
.text:00404603 loc_404603:                             ; CODE XREF: sub_404150+4A5↑j
.text:00404603                                         ; sub_404150+5C4↓j ...
.text:00404603                 inc     [esp+4Ch+var_34]
.text:00404607                 jmp     def_404652      ; jumptable 00404255 cases 37,43-58,65-90,93,95,97-122
.text:00404607                                         ; jumptable 00404652 default case, cases 34-38,42-44,46,48-59
.text:0040460C ; ---------------------------------------------------------------------------
.text:0040460C
.text:0040460C loc_40460C:                             ; CODE XREF: sub_404150+105↑j
.text:0040460C                                         ; DATA XREF: sub_404150:jpt_404255↑o
.text:0040460C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404255 case 63
.text:00404611                 jz      loc_40455B      ; jumptable 00404922 cases 91,92,94,96,124
.text:00404617                 cmp     [esp+4Ch+arg_10], 3
.text:0040461C                 jnz     def_404652      ; jumptable 00404255 cases 37,43-58,65-90,93,95,97-122
.text:0040461C                                         ; jumptable 00404652 default case, cases 34-38,42-44,46,48-59
.text:00404622                 lea     edx, [ebp+2]
.text:00404625                 cmp     edx, [esp+4Ch+arg_C]
.text:00404629                 jnb     def_404652      ; jumptable 00404255 cases 37,43-58,65-90,93,95,97-122
.text:00404629                                         ; jumptable 00404652 default case, cases 34-38,42-44,46,48-59
.text:0040462F                 mov     esi, [esp+4Ch+Str]
.text:00404633                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00404638                 jnz     def_404652      ; jumptable 00404255 cases 37,43-58,65-90,93,95,97-122
.text:00404638                                         ; jumptable 00404652 default case, cases 34-38,42-44,46,48-59
.text:0040463E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00404643                 movsx   eax, cl
.text:00404646                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00404649                 cmp     eax, 1Dh
.text:0040464C                 ja      def_404652      ; jumptable 00404255 cases 37,43-58,65-90,93,95,97-122
.text:0040464C                                         ; jumptable 00404652 default case, cases 34-38,42-44,46,48-59
.text:00404652                 jmp     ds:jpt_404652[eax*4] ; switch jump
.text:00404652 ; ---------------------------------------------------------------------------
.text:00404659                 align 4
.text:0040465C jpt_404652      dd offset loc_4046D4    ; DATA XREF: sub_404150+502↑r
.text:0040465C                 dd offset def_404652    ; jump table for switch statement
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset loc_4046D4
.text:0040465C                 dd offset loc_4046D4
.text:0040465C                 dd offset loc_4046D4
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset loc_4046D4
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset loc_4046D4
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset def_404652
.text:0040465C                 dd offset loc_4046D4
.text:0040465C                 dd offset loc_4046D4
.text:0040465C                 dd offset loc_4046D4
.text:004046D4 ; ---------------------------------------------------------------------------
.text:004046D4
.text:004046D4 loc_4046D4:                             ; CODE XREF: sub_404150+502↑j
.text:004046D4                                         ; DATA XREF: sub_404150:jpt_404652↑o
.text:004046D4                 mov     ebp, edx        ; jumptable 00404652 cases 33,39-41,45,47,60-62
.text:004046D6                 mov     bl, cl
.text:004046D8                 mov     edx, [esp+4Ch+arg_4]
.text:004046DC                 cmp     [esp+4Ch+var_34], edx
.text:004046E0                 jnb     short loc_4046EE
.text:004046E2                 mov     ecx, [esp+4Ch+arg_0]
.text:004046E6                 mov     edi, [esp+4Ch+var_34]
.text:004046EA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:004046EE
.text:004046EE loc_4046EE:                             ; CODE XREF: sub_404150+590↑j
.text:004046EE                 inc     [esp+4Ch+var_34]
.text:004046F2                 mov     eax, [esp+4Ch+arg_4]
.text:004046F6                 cmp     [esp+4Ch+var_34], eax
.text:004046FA                 jnb     short loc_404708
.text:004046FC                 mov     edx, [esp+4Ch+arg_0]
.text:00404700                 mov     esi, [esp+4Ch+var_34]
.text:00404704                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00404708
.text:00404708 loc_404708:                             ; CODE XREF: sub_404150+5AA↑j
.text:00404708                 inc     [esp+4Ch+var_34]
.text:0040470C                 mov     edi, [esp+4Ch+arg_4]
.text:00404710                 cmp     [esp+4Ch+var_34], edi
.text:00404714                 jnb     loc_404603
.text:0040471A                 mov     eax, [esp+4Ch+arg_0]
.text:0040471E                 mov     ecx, [esp+4Ch+var_34]
.text:00404722                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00404726                 jmp     loc_404603
.text:00404726 ; ---------------------------------------------------------------------------
.text:0040472B                 align 10h
.text:00404730
.text:00404730 def_404255:                             ; CODE XREF: sub_404150+FF↑j
.text:00404730                                         ; sub_404150+105↑j
.text:00404730                                         ; DATA XREF: ...
.text:00404730                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00404255 default case, cases 1-6,14-31,64
.text:00404735                 jz      loc_404860
.text:0040473B                 mov     [esp+4Ch+var_28], 1
.text:00404743                 mov     esi, ds:__mb_cur_max
.text:00404749                 movzx   edx, bl
.text:0040474C                 cmp     dword ptr [esi], 1
.text:0040474F                 jz      loc_404844
.text:00404755                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040475D                 mov     [esp+4Ch+C], edx ; C
.text:00404760                 call    _isctype
.text:00404765
.text:00404765 loc_404765:                             ; CODE XREF: sub_404150+705↓j
.text:00404765                 test    eax, eax
.text:00404767                 setnz   [esp+4Ch+var_29]
.text:0040476C
.text:0040476C loc_40476C:                             ; CODE XREF: sub_404150+7A5↓j
.text:0040476C                 cmp     [esp+4Ch+var_21], 0
.text:00404771                 lea     eax, [ebp+1]
.text:00404774                 jz      loc_404510
.text:0040477A                 cmp     [esp+4Ch+var_29], 0
.text:0040477F                 jnz     def_404652      ; jumptable 00404255 cases 37,43-58,65-90,93,95,97-122
.text:0040477F                                         ; jumptable 00404652 default case, cases 34-38,42-44,46,48-59
.text:00404785
.text:00404785 loc_404785:                             ; CODE XREF: sub_404150+7AB↓j
.text:00404785                 mov     eax, [esp+4Ch+var_28]
.text:00404789                 lea     edx, [eax+ebp]
.text:0040478C                 lea     esi, [esi+0]
.text:00404790
.text:00404790 loc_404790:                             ; CODE XREF: sub_404150+6EF↓j
.text:00404790                 cmp     [esp+4Ch+var_21], 0
.text:00404795                 jz      short loc_404810
.text:00404797                 cmp     [esp+4Ch+var_29], 0
.text:0040479C                 jnz     short loc_404810
.text:0040479E                 mov     edi, [esp+4Ch+arg_4]
.text:004047A2                 cmp     [esp+4Ch+var_34], edi
.text:004047A6                 jnb     short loc_4047B4
.text:004047A8                 mov     esi, [esp+4Ch+arg_0]
.text:004047AC                 mov     eax, [esp+4Ch+var_34]
.text:004047B0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:004047B4
.text:004047B4 loc_4047B4:                             ; CODE XREF: sub_404150+656↑j
.text:004047B4                 inc     [esp+4Ch+var_34]
.text:004047B8                 mov     ecx, [esp+4Ch+arg_4]
.text:004047BC                 cmp     [esp+4Ch+var_34], ecx
.text:004047C0                 jnb     short loc_4047D5
.text:004047C2                 mov     cl, bl
.text:004047C4                 mov     esi, [esp+4Ch+arg_0]
.text:004047C8                 mov     edi, [esp+4Ch+var_34]
.text:004047CC                 shr     cl, 6
.text:004047CF                 add     cl, 30h ; '0'
.text:004047D2                 mov     [edi+esi], cl
.text:004047D5
.text:004047D5 loc_4047D5:                             ; CODE XREF: sub_404150+670↑j
.text:004047D5                 inc     [esp+4Ch+var_34]
.text:004047D9                 mov     edi, [esp+4Ch+arg_4]
.text:004047DD                 cmp     [esp+4Ch+var_34], edi
.text:004047E1                 jnb     short loc_4047F9
.text:004047E3                 mov     cl, bl
.text:004047E5                 mov     esi, [esp+4Ch+arg_0]
.text:004047E9                 shr     cl, 3
.text:004047EC                 mov     edi, [esp+4Ch+var_34]
.text:004047F0                 and     cl, 7
.text:004047F3                 add     cl, 30h ; '0'
.text:004047F6                 mov     [edi+esi], cl
.text:004047F9
.text:004047F9 loc_4047F9:                             ; CODE XREF: sub_404150+691↑j
.text:004047F9                 inc     [esp+4Ch+var_34]
.text:004047FD                 and     bl, 7
.text:00404800                 add     bl, 30h ; '0'
.text:00404803                 lea     esi, [esi+0]
.text:00404809                 lea     edi, [edi+0]
.text:00404810
.text:00404810 loc_404810:                             ; CODE XREF: sub_404150+645↑j
.text:00404810                                         ; sub_404150+64C↑j
.text:00404810                 lea     eax, [ebp+1]
.text:00404813                 cmp     edx, eax
.text:00404815                 jbe     loc_404510
.text:0040481B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040481F                 cmp     [esp+4Ch+var_34], ebp
.text:00404823                 jnb     short loc_404830
.text:00404825                 mov     ecx, [esp+4Ch+arg_0]
.text:00404829                 mov     edi, [esp+4Ch+var_34]
.text:0040482D                 mov     [edi+ecx], bl
.text:00404830
.text:00404830 loc_404830:                             ; CODE XREF: sub_404150+6D3↑j
.text:00404830                 inc     [esp+4Ch+var_34]
.text:00404834                 mov     ebp, eax
.text:00404836                 mov     eax, [esp+4Ch+Str]
.text:0040483A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040483F                 jmp     loc_404790
.text:00404844 ; ---------------------------------------------------------------------------
.text:00404844
.text:00404844 loc_404844:                             ; CODE XREF: sub_404150+5FF↑j
.text:00404844                 mov     ecx, ds:_pctype
.text:0040484A                 mov     edi, [ecx]
.text:0040484C                 movzx   eax, word ptr [edi+edx*2]
.text:00404850                 and     eax, 157h
.text:00404855                 jmp     loc_404765
.text:00404855 ; ---------------------------------------------------------------------------
.text:0040485A                 align 10h
.text:00404860
.text:00404860 loc_404860:                             ; CODE XREF: sub_404150+5E5↑j
.text:00404860                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404865                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040486D                 mov     [esp+4Ch+var_28], 0
.text:00404875                 mov     [esp+4Ch+var_29], 1
.text:0040487A                 jz      loc_404A0C
.text:00404880
.text:00404880 loc_404880:                             ; CODE XREF: sub_404150+8CC↓j
.text:00404880                 mov     ecx, [esp+4Ch+arg_C]
.text:00404884                 lea     edx, [esp+4Ch+var_18]
.text:00404888                 mov     edi, [esp+4Ch+Str]
.text:0040488C                 mov     [esp+4Ch+State], edx ; State
.text:00404890                 lea     esi, [esp+4Ch+var_18._State]
.text:00404894                 sub     ecx, ebp
.text:00404896                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040489A                 add     edi, ebp
.text:0040489C                 mov     [esp+4Ch+var_30], edi
.text:004048A0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:004048A4                 mov     [esp+4Ch+C], esi ; DstCh
.text:004048A7                 call    mbrtowc
.text:004048AC                 test    eax, eax
.text:004048AE                 mov     edi, eax
.text:004048B0                 jz      short loc_4048F0
.text:004048B2                 cmp     eax, 0FFFFFFFFh
.text:004048B5                 jz      loc_404A02
.text:004048BB                 cmp     eax, 0FFFFFFFEh
.text:004048BE                 jz      loc_4049C2
.text:004048C4                 cmp     [esp+4Ch+arg_10], 1
.text:004048C9                 jz      short loc_404900
.text:004048CB
.text:004048CB loc_4048CB:                             ; CODE XREF: sub_404150+7B9↓j
.text:004048CB                                         ; sub_404150+86D↓j
.text:004048CB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:004048D0                 mov     [esp+4Ch+Type], 157h ; Type
.text:004048D8                 mov     [esp+4Ch+C], ecx ; C
.text:004048DB                 call    iswctype
.text:004048E0                 test    eax, eax
.text:004048E2                 jnz     short loc_4048E9
.text:004048E4                 mov     [esp+4Ch+var_29], 0
.text:004048E9
.text:004048E9 loc_4048E9:                             ; CODE XREF: sub_404150+792↑j
.text:004048E9                 mov     [esp+4Ch+var_28], edi
.text:004048ED                 lea     esi, [esi+0]
.text:004048F0
.text:004048F0 loc_4048F0:                             ; CODE XREF: sub_404150+760↑j
.text:004048F0                                         ; sub_404150+87B↓j ...
.text:004048F0                 cmp     [esp+4Ch+var_28], 1
.text:004048F5                 jbe     loc_40476C
.text:004048FB                 jmp     loc_404785
.text:00404900 ; ---------------------------------------------------------------------------
.text:00404900
.text:00404900 loc_404900:                             ; CODE XREF: sub_404150+779↑j
.text:00404900                 cmp     [esp+4Ch+arg_10], eax
.text:00404904                 mov     edx, 1
.text:00404909                 jnb     short loc_4048CB
.text:0040490B
.text:0040490B loc_40490B:                             ; CODE XREF: sub_404150+867↓j
.text:0040490B                 mov     ecx, [esp+4Ch+Str]
.text:0040490F                 lea     esi, [edx+ebp]
.text:00404912                 movsx   eax, byte ptr [esi+ecx]
.text:00404916                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00404919                 cmp     eax, 21h
.text:0040491C                 ja      def_404922      ; jumptable 00404922 default case, cases 93,95,97-123
.text:00404922                 jmp     ds:jpt_404922[eax*4] ; switch jump
.text:00404922 ; ---------------------------------------------------------------------------
.text:00404929                 align 4
.text:0040492C jpt_404922      dd offset loc_40455B    ; DATA XREF: sub_404150+7D2↑r
.text:0040492C                 dd offset loc_40455B    ; jump table for switch statement
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset loc_40455B
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset loc_40455B
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset def_404922
.text:0040492C                 dd offset loc_40455B
.text:004049B4 ; ---------------------------------------------------------------------------
.text:004049B4
.text:004049B4 def_404922:                             ; CODE XREF: sub_404150+7CC↑j
.text:004049B4                                         ; sub_404150+7D2↑j
.text:004049B4                                         ; DATA XREF: ...
.text:004049B4                 inc     edx             ; jumptable 00404922 default case, cases 93,95,97-123
.text:004049B5                 cmp     edx, edi
.text:004049B7                 jb      loc_40490B
.text:004049BD                 jmp     loc_4048CB
.text:004049C2 ; ---------------------------------------------------------------------------
.text:004049C2
.text:004049C2 loc_4049C2:                             ; CODE XREF: sub_404150+76E↑j
.text:004049C2                 cmp     ebp, [esp+4Ch+arg_C]
.text:004049C6                 mov     [esp+4Ch+var_29], 0
.text:004049CB                 jnb     loc_4048F0
.text:004049D1                 mov     eax, [esp+4Ch+var_30]
.text:004049D5                 cmp     byte ptr [eax], 0
.text:004049D8                 jz      loc_4048F0
.text:004049DE
.text:004049DE loc_4049DE:                             ; CODE XREF: sub_404150+8AB↓j
.text:004049DE                 inc     [esp+4Ch+var_28]
.text:004049E2                 mov     esi, [esp+4Ch+var_28]
.text:004049E6                 lea     eax, [esi+ebp]
.text:004049E9                 cmp     eax, [esp+4Ch+arg_C]
.text:004049ED                 jnb     loc_4048F0
.text:004049F3                 mov     edi, [esp+4Ch+Str]
.text:004049F7                 cmp     byte ptr [eax+edi], 0
.text:004049FB                 jnz     short loc_4049DE
.text:004049FD                 jmp     loc_4048F0
.text:00404A02 ; ---------------------------------------------------------------------------
.text:00404A02
.text:00404A02 loc_404A02:                             ; CODE XREF: sub_404150+765↑j
.text:00404A02                 mov     [esp+4Ch+var_29], 0
.text:00404A07                 jmp     loc_4048F0
.text:00404A0C ; ---------------------------------------------------------------------------
.text:00404A0C
.text:00404A0C loc_404A0C:                             ; CODE XREF: sub_404150+72A↑j
.text:00404A0C                 mov     edx, [esp+4Ch+Str]
.text:00404A10                 mov     [esp+4Ch+C], edx ; Str
.text:00404A13                 call    strlen
.text:00404A18                 mov     [esp+4Ch+arg_C], eax
.text:00404A1C                 jmp     loc_404880
.text:00404A21 ; ---------------------------------------------------------------------------
.text:00404A21
.text:00404A21 loc_404A21:                             ; CODE XREF: sub_404150+105↑j
.text:00404A21                                         ; DATA XREF: sub_404150:jpt_404255↑o
.text:00404A21                 mov     dl, bl          ; jumptable 00404255 case 92
.text:00404A23                 jmp     loc_404554
.text:00404A28 ; ---------------------------------------------------------------------------
.text:00404A28
.text:00404A28 loc_404A28:                             ; CODE XREF: sub_404150+105↑j
.text:00404A28                                         ; sub_404150+902↓j
.text:00404A28                                         ; DATA XREF: ...
.text:00404A28                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404255 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404A2D                 jnz     def_404652      ; jumptable 00404255 cases 37,43-58,65-90,93,95,97-122
.text:00404A2D                                         ; jumptable 00404652 default case, cases 34-38,42-44,46,48-59
.text:00404A33                 jmp     loc_40455B      ; jumptable 00404922 cases 91,92,94,96,124
.text:00404A38 ; ---------------------------------------------------------------------------
.text:00404A38
.text:00404A38 loc_404A38:                             ; CODE XREF: sub_404150+105↑j
.text:00404A38                                         ; DATA XREF: sub_404150:jpt_404255↑o
.text:00404A38                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00404255 cases 123,125
.text:00404A3D                 jz      short loc_404A54
.text:00404A3F                 cmp     [esp+4Ch+arg_C], 1
.text:00404A44
.text:00404A44 loc_404A44:                             ; CODE XREF: sub_404150+90C↓j
.text:00404A44                 jnz     def_404652      ; jumptable 00404255 cases 37,43-58,65-90,93,95,97-122
.text:00404A44                                         ; jumptable 00404652 default case, cases 34-38,42-44,46,48-59
.text:00404A4A
.text:00404A4A loc_404A4A:                             ; CODE XREF: sub_404150+105↑j
.text:00404A4A                                         ; DATA XREF: sub_404150:jpt_404255↑o
.text:00404A4A                 test    ebp, ebp        ; jumptable 00404255 cases 35,126
.text:00404A4C                 jnz     def_404652      ; jumptable 00404255 cases 37,43-58,65-90,93,95,97-122
.text:00404A4C                                         ; jumptable 00404652 default case, cases 34-38,42-44,46,48-59
.text:00404A52                 jmp     short loc_404A28 ; jumptable 00404255 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404A54 ; ---------------------------------------------------------------------------
.text:00404A54
.text:00404A54 loc_404A54:                             ; CODE XREF: sub_404150+8ED↑j
.text:00404A54                 mov     esi, [esp+4Ch+Str]
.text:00404A58                 cmp     byte ptr [esi+1], 0
.text:00404A5C                 jmp     short loc_404A44
.text:00404A5E ; ---------------------------------------------------------------------------
.text:00404A5E
.text:00404A5E loc_404A5E:                             ; CODE XREF: sub_404150:loc_4041EF↑j
.text:00404A5E                 test    ebp, ebp
.text:00404A60                 jnz     short loc_404A6D
.text:00404A62                 cmp     [esp+4Ch+arg_10], 1
.text:00404A67                 jz      loc_40455B      ; jumptable 00404922 cases 91,92,94,96,124
.text:00404A6D
.text:00404A6D loc_404A6D:                             ; CODE XREF: sub_404150+910↑j
.text:00404A6D                 mov     esi, [esp+4Ch+var_1C]
.text:00404A71                 test    esi, esi
.text:00404A73                 jz      short loc_404AA8
.text:00404A75                 mov     edi, [esp+4Ch+var_1C]
.text:00404A79                 movzx   eax, byte ptr [edi]
.text:00404A7C                 test    al, al
.text:00404A7E                 jz      short loc_404AA8
.text:00404A80
.text:00404A80 loc_404A80:                             ; CODE XREF: sub_404150+956↓j
.text:00404A80                 mov     ebp, [esp+4Ch+arg_4]
.text:00404A84                 cmp     [esp+4Ch+var_34], ebp
.text:00404A88                 jnb     short loc_404A95
.text:00404A8A                 mov     ecx, [esp+4Ch+arg_0]
.text:00404A8E                 mov     ebx, [esp+4Ch+var_34]
.text:00404A92                 mov     [ebx+ecx], al
.text:00404A95
.text:00404A95 loc_404A95:                             ; CODE XREF: sub_404150+938↑j
.text:00404A95                 inc     [esp+4Ch+var_1C]
.text:00404A99                 inc     [esp+4Ch+var_34]
.text:00404A9D                 mov     edx, [esp+4Ch+var_1C]
.text:00404AA1                 movzx   eax, byte ptr [edx]
.text:00404AA4                 test    al, al
.text:00404AA6                 jnz     short loc_404A80
.text:00404AA8
.text:00404AA8 loc_404AA8:                             ; CODE XREF: sub_404150+923↑j
.text:00404AA8                                         ; sub_404150+92E↑j
.text:00404AA8                 mov     eax, [esp+4Ch+arg_4]
.text:00404AAC                 cmp     [esp+4Ch+var_34], eax
.text:00404AB0                 jnb     short loc_404ABE
.text:00404AB2                 mov     edi, [esp+4Ch+arg_0]
.text:00404AB6                 mov     esi, [esp+4Ch+var_34]
.text:00404ABA                 mov     byte ptr [esi+edi], 0
.text:00404ABE
.text:00404ABE loc_404ABE:                             ; CODE XREF: sub_404150+960↑j
.text:00404ABE                 mov     eax, [esp+4Ch+var_34]
.text:00404AC2                 jmp     loc_40458F
.text:00404AC7 ; ---------------------------------------------------------------------------
.text:00404AC7
.text:00404AC7 loc_404AC7:                             ; CODE XREF: sub_404150+95↑j
.text:00404AC7                 mov     ebx, [esp+4Ch+Str]
.text:00404ACB                 cmp     byte ptr [ebp+ebx+0], 0
.text:00404AD0                 jmp     loc_4041EF
.text:00404AD5 ; ---------------------------------------------------------------------------
.text:00404AD5
.text:00404AD5 loc_404AD5:                             ; CODE XREF: sub_404150+3D↑j
.text:00404AD5                                         ; DATA XREF: sub_404150:jpt_40418D↑o
.text:00404AD5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040418D case 2
.text:00404AD9                 cmp     [esp+4Ch+var_34], edx
.text:00404ADD                 jnb     short loc_404AE6
.text:00404ADF                 mov     ecx, [esp+4Ch+arg_0]
.text:00404AE3                 mov     byte ptr [ecx], 27h ; '''
.text:00404AE6
.text:00404AE6 loc_404AE6:                             ; CODE XREF: sub_404150+98D↑j
.text:00404AE6                 mov     [esp+4Ch+var_34], 1
.text:00404AEE                 mov     [esp+4Ch+var_1C], 40413Eh
.text:00404AF6                 jmp     loc_4041D6
.text:00404AFB ; ---------------------------------------------------------------------------
.text:00404AFB
.text:00404AFB loc_404AFB:                             ; CODE XREF: sub_404150+3D↑j
.text:00404AFB                                         ; DATA XREF: sub_404150:jpt_40418D↑o
.text:00404AFB                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040418D case 4
.text:00404B00                 jmp     def_40418D      ; jumptable 0040418D default case, cases 0,1
.text:00404B05 ; ---------------------------------------------------------------------------
.text:00404B05
.text:00404B05 loc_404B05:                             ; CODE XREF: sub_404150+3D↑j
.text:00404B05                                         ; DATA XREF: sub_404150:jpt_40418D↑o
.text:00404B05                 mov     [esp+4Ch+C], 404140h ; jumptable 0040418D cases 5,6
.text:00404B0C                 call    ds:libintl_gettext
.text:00404B12                 cmp     eax, 404140h
.text:00404B17                 mov     edi, eax
.text:00404B19                 jz      short loc_404B90
.text:00404B1B
.text:00404B1B loc_404B1B:                             ; CODE XREF: sub_404150+A45↓j
.text:00404B1B                                         ; sub_404150+A4C↓j
.text:00404B1B                 mov     [esp+4Ch+C], 40413Eh
.text:00404B22                 call    ds:libintl_gettext
.text:00404B28                 cmp     eax, 40413Eh
.text:00404B2D                 mov     edx, eax
.text:00404B2F                 jz      short loc_404B82
.text:00404B31
.text:00404B31 loc_404B31:                             ; CODE XREF: sub_404150+A37↓j
.text:00404B31                                         ; sub_404150+A3E↓j
.text:00404B31                 mov     [esp+4Ch+var_1C], edi
.text:00404B35                 cmp     byte ptr [edi], 0
.text:00404B38                 jz      short loc_404B68
.text:00404B3A
.text:00404B3A loc_404B3A:                             ; CODE XREF: sub_404150+A16↓j
.text:00404B3A                 mov     ecx, [esp+4Ch+arg_4]
.text:00404B3E                 cmp     [esp+4Ch+var_34], ecx
.text:00404B42                 jnb     short loc_404B57
.text:00404B44                 mov     ebp, [esp+4Ch+var_1C]
.text:00404B48                 mov     edi, [esp+4Ch+arg_0]
.text:00404B4C                 mov     esi, [esp+4Ch+var_34]
.text:00404B50                 movzx   ebx, byte ptr [ebp+0]
.text:00404B54                 mov     [esi+edi], bl
.text:00404B57
.text:00404B57 loc_404B57:                             ; CODE XREF: sub_404150+9F2↑j
.text:00404B57                 inc     [esp+4Ch+var_1C]
.text:00404B5B                 inc     [esp+4Ch+var_34]
.text:00404B5F                 mov     eax, [esp+4Ch+var_1C]
.text:00404B63                 cmp     byte ptr [eax], 0
.text:00404B66                 jnz     short loc_404B3A
.text:00404B68
.text:00404B68 loc_404B68:                             ; CODE XREF: sub_404150+9E8↑j
.text:00404B68                 mov     [esp+4Ch+var_21], 1
.text:00404B6D                 mov     [esp+4Ch+var_1C], edx
.text:00404B71                 mov     [esp+4Ch+C], edx ; Str
.text:00404B74                 call    strlen
.text:00404B79                 mov     [esp+4Ch+var_20], eax
.text:00404B7D                 jmp     def_40418D      ; jumptable 0040418D default case, cases 0,1
.text:00404B82 ; ---------------------------------------------------------------------------
.text:00404B82
.text:00404B82 loc_404B82:                             ; CODE XREF: sub_404150+9DF↑j
.text:00404B82                 cmp     [esp+4Ch+arg_10], 6
.text:00404B87                 jnz     short loc_404B31
.text:00404B89                 mov     edx, offset asc_40413C ; "\"'`"
.text:00404B8E                 jmp     short loc_404B31
.text:00404B90 ; ---------------------------------------------------------------------------
.text:00404B90
.text:00404B90 loc_404B90:                             ; CODE XREF: sub_404150+9C9↑j
.text:00404B90                 cmp     [esp+4Ch+arg_10], 6
.text:00404B95                 jnz     short loc_404B1B
.text:00404B97                 mov     edi, offset asc_40413C ; "\"'`"
.text:00404B9C                 jmp     loc_404B1B
.text:00404B9C sub_404150      endp
.text:00404B9C
.text:00404BA1 ; ---------------------------------------------------------------------------
.text:00404BA1                 jmp     short loc_404BB0
.text:00404BA1 ; ---------------------------------------------------------------------------
.text:00404BA3                 align 10h
.text:00404BB0
.text:00404BB0 loc_404BB0:                             ; CODE XREF: .text:00404BA1↑j
.text:00404BB0                 sub     esp, 0Ch
.text:00404BB3                 mov     [esp+4], ebx
.text:00404BB7                 mov     [esp+8], esi
.text:00404BBB                 call    _errno
.text:00404BC0                 mov     esi, [eax]
.text:00404BC2                 mov     dword ptr [esp], 24h ; '$'
.text:00404BC9                 call    sub_403E30
.text:00404BCE                 mov     edx, [esp+10h]
.text:00404BD2                 mov     ebx, eax
.text:00404BD4                 test    edx, edx
.text:00404BD6                 jz      short loc_404C21
.text:00404BD8
.text:00404BD8 loc_404BD8:                             ; CODE XREF: .text:00404C26↓j
.text:00404BD8                 mov     ecx, [edx]
.text:00404BDA                 mov     [ebx], ecx
.text:00404BDC                 mov     ecx, [edx+4]
.text:00404BDF                 mov     [ebx+4], ecx
.text:00404BE2                 mov     ecx, [edx+8]
.text:00404BE5                 mov     [ebx+8], ecx
.text:00404BE8                 mov     ecx, [edx+0Ch]
.text:00404BEB                 mov     [ebx+0Ch], ecx
.text:00404BEE                 mov     ecx, [edx+10h]
.text:00404BF1                 mov     [ebx+10h], ecx
.text:00404BF4                 mov     ecx, [edx+14h]
.text:00404BF7                 mov     [ebx+14h], ecx
.text:00404BFA                 mov     ecx, [edx+18h]
.text:00404BFD                 mov     [ebx+18h], ecx
.text:00404C00                 mov     ecx, [edx+1Ch]
.text:00404C03                 mov     [ebx+1Ch], ecx
.text:00404C06                 mov     ecx, [edx+20h]
.text:00404C09                 mov     [ebx+20h], ecx
.text:00404C0C                 call    _errno
.text:00404C11                 mov     [eax], esi
.text:00404C13                 mov     esi, [esp+8]
.text:00404C17                 mov     eax, ebx
.text:00404C19                 mov     ebx, [esp+4]
.text:00404C1D                 add     esp, 0Ch
.text:00404C20                 retn
.text:00404C21 ; ---------------------------------------------------------------------------
.text:00404C21
.text:00404C21 loc_404C21:                             ; CODE XREF: .text:00404BD6↑j
.text:00404C21                 mov     edx, offset dword_4071D0
.text:00404C26                 jmp     short loc_404BD8
.text:00404C26 ; ---------------------------------------------------------------------------
.text:00404C28                 align 10h
.text:00404C30                 mov     eax, [esp+4]
.text:00404C34                 test    eax, eax
.text:00404C36                 jz      short loc_404C40
.text:00404C38
.text:00404C38 loc_404C38:                             ; CODE XREF: .text:00404C45↓j
.text:00404C38                 mov     eax, [eax]
.text:00404C3A                 retn
.text:00404C3A ; ---------------------------------------------------------------------------
.text:00404C3B                 align 10h
.text:00404C40
.text:00404C40 loc_404C40:                             ; CODE XREF: .text:00404C36↑j
.text:00404C40                 mov     eax, offset dword_4071D0
.text:00404C45                 jmp     short loc_404C38
.text:00404C45 ; ---------------------------------------------------------------------------
.text:00404C47                 align 10h
.text:00404C50                 mov     edx, [esp+4]
.text:00404C54                 test    edx, edx
.text:00404C56                 jz      short loc_404C60
.text:00404C58
.text:00404C58 loc_404C58:                             ; CODE XREF: .text:00404C65↓j
.text:00404C58                 mov     ecx, [esp+8]
.text:00404C5C                 mov     [edx], ecx
.text:00404C5E                 retn
.text:00404C5E ; ---------------------------------------------------------------------------
.text:00404C5F                 align 10h
.text:00404C60
.text:00404C60 loc_404C60:                             ; CODE XREF: .text:00404C56↑j
.text:00404C60                 mov     edx, offset dword_4071D0
.text:00404C65                 jmp     short loc_404C58
.text:00404C65 ; ---------------------------------------------------------------------------
.text:00404C67                 align 10h
.text:00404C70                 sub     esp, 8
.text:00404C73                 mov     eax, [esp+0Ch]
.text:00404C77                 movzx   ecx, byte ptr [esp+10h]
.text:00404C7C                 mov     [esp], ebx
.text:00404C7F                 mov     ebx, [esp+14h]
.text:00404C83                 mov     [esp+4], esi
.text:00404C87                 mov     dl, cl
.text:00404C89                 shr     dl, 5
.text:00404C8C                 movzx   edx, dl
.text:00404C8F                 shl     edx, 2
.text:00404C92                 test    eax, eax
.text:00404C94                 lea     esi, [edx+eax+4]
.text:00404C98                 jz      short loc_404CC0
.text:00404C9A
.text:00404C9A loc_404C9A:                             ; CODE XREF: .text:00404CC6↓j
.text:00404C9A                 mov     edx, [esi]
.text:00404C9C                 and     ecx, 1Fh
.text:00404C9F                 and     ebx, 1
.text:00404CA2                 mov     eax, edx
.text:00404CA4                 shr     eax, cl
.text:00404CA6                 and     eax, 1
.text:00404CA9                 xor     ebx, eax
.text:00404CAB                 shl     ebx, cl
.text:00404CAD                 xor     edx, ebx
.text:00404CAF                 mov     [esi], edx
.text:00404CB1                 mov     ebx, [esp]
.text:00404CB4                 mov     esi, [esp+4]
.text:00404CB8                 add     esp, 8
.text:00404CBB                 retn
.text:00404CBB ; ---------------------------------------------------------------------------
.text:00404CBC                 align 10h
.text:00404CC0
.text:00404CC0 loc_404CC0:                             ; CODE XREF: .text:00404C98↑j
.text:00404CC0                 lea     esi, dword_4071D4[edx]
.text:00404CC6                 jmp     short loc_404C9A
.text:00404CC6 ; ---------------------------------------------------------------------------
.text:00404CC8                 align 10h
.text:00404CD0                 sub     esp, 2Ch
.text:00404CD3                 mov     [esp+24h], ebx
.text:00404CD7                 mov     ebx, [esp+40h]
.text:00404CDB                 mov     [esp+28h], esi
.text:00404CDF                 test    ebx, ebx
.text:00404CE1                 jz      short loc_404D30
.text:00404CE3
.text:00404CE3 loc_404CE3:                             ; CODE XREF: .text:00404D35↓j
.text:00404CE3                 call    _errno
.text:00404CE8                 mov     esi, [eax]
.text:00404CEA                 mov     [esp+14h], ebx
.text:00404CEE                 mov     edx, [ebx]
.text:00404CF0                 mov     ecx, [esp+38h]
.text:00404CF4                 mov     ebx, [esp+3Ch]
.text:00404CF8                 mov     [esp+10h], edx
.text:00404CFC                 mov     edx, [esp+34h]
.text:00404D00                 mov     [esp+0Ch], ebx
.text:00404D04                 mov     [esp+8], ecx
.text:00404D08                 mov     [esp+4], edx
.text:00404D0C                 mov     edx, [esp+30h]
.text:00404D10                 mov     [esp], edx
.text:00404D13                 call    sub_404150
.text:00404D18                 mov     ebx, eax
.text:00404D1A                 call    _errno
.text:00404D1F                 mov     [eax], esi
.text:00404D21                 mov     esi, [esp+28h]
.text:00404D25                 mov     eax, ebx
.text:00404D27                 mov     ebx, [esp+24h]
.text:00404D2B                 add     esp, 2Ch
.text:00404D2E                 retn
.text:00404D2E ; ---------------------------------------------------------------------------
.text:00404D2F                 align 10h
.text:00404D30
.text:00404D30 loc_404D30:                             ; CODE XREF: .text:00404CE1↑j
.text:00404D30                 mov     ebx, offset dword_4071D0
.text:00404D35                 jmp     short loc_404CE3
.text:00404D35 ; ---------------------------------------------------------------------------
.text:00404D37                 align 10h
.text:00404D40                 push    ebp
.text:00404D41                 push    edi
.text:00404D42                 push    esi
.text:00404D43                 push    ebx
.text:00404D44                 sub     esp, 2Ch
.text:00404D47                 mov     ebp, [esp+48h]
.text:00404D4B                 call    _errno
.text:00404D50                 mov     edx, [eax]
.text:00404D52                 test    ebp, ebp
.text:00404D54                 mov     ebx, ebp
.text:00404D56                 mov     [esp+28h], edx
.text:00404D5A                 jz      loc_404E10
.text:00404D60
.text:00404D60 loc_404D60:                             ; CODE XREF: .text:00404E15↓j
.text:00404D60                 call    _errno
.text:00404D65                 mov     edi, [eax]
.text:00404D67                 mov     esi, ebp
.text:00404D69                 mov     [esp+14h], ebx
.text:00404D6D                 mov     ecx, [ebx]
.text:00404D6F                 mov     dword ptr [esp], 0
.text:00404D76                 mov     edx, [esp+44h]
.text:00404D7A                 mov     dword ptr [esp+4], 0
.text:00404D82                 mov     eax, [esp+40h]
.text:00404D86                 mov     [esp+10h], ecx
.text:00404D8A                 mov     [esp+0Ch], edx
.text:00404D8E                 mov     [esp+8], eax
.text:00404D92                 call    sub_404150
.text:00404D97                 mov     ebx, eax
.text:00404D99                 call    _errno
.text:00404D9E                 mov     [eax], edi
.text:00404DA0                 lea     edi, [ebx+1]
.text:00404DA3                 mov     [esp], edi
.text:00404DA6                 call    sub_403E30
.text:00404DAB                 mov     [esp+24h], eax
.text:00404DAF                 test    ebp, ebp
.text:00404DB1                 jz      short loc_404E02
.text:00404DB3
.text:00404DB3 loc_404DB3:                             ; CODE XREF: .text:00404E07↓j
.text:00404DB3                 call    _errno
.text:00404DB8                 mov     ebp, [eax]
.text:00404DBA                 mov     [esp+14h], esi
.text:00404DBE                 mov     ecx, [esi]
.text:00404DC0                 mov     [esp+4], edi
.text:00404DC4                 mov     edx, [esp+44h]
.text:00404DC8                 mov     esi, [esp+24h]
.text:00404DCC                 mov     [esp+10h], ecx
.text:00404DD0                 mov     eax, [esp+40h]
.text:00404DD4                 mov     [esp+0Ch], edx
.text:00404DD8                 mov     [esp], esi
.text:00404DDB                 mov     [esp+8], eax
.text:00404DDF                 call    sub_404150
.text:00404DE4                 call    _errno
.text:00404DE9                 mov     [eax], ebp
.text:00404DEB                 call    _errno
.text:00404DF0                 mov     ebx, [esp+28h]
.text:00404DF4                 mov     [eax], ebx
.text:00404DF6                 mov     eax, [esp+24h]
.text:00404DFA                 add     esp, 2Ch
.text:00404DFD                 pop     ebx
.text:00404DFE                 pop     esi
.text:00404DFF                 pop     edi
.text:00404E00                 pop     ebp
.text:00404E01                 retn
.text:00404E02 ; ---------------------------------------------------------------------------
.text:00404E02
.text:00404E02 loc_404E02:                             ; CODE XREF: .text:00404DB1↑j
.text:00404E02                 mov     esi, offset dword_4071D0
.text:00404E07                 jmp     short loc_404DB3
.text:00404E07 ; ---------------------------------------------------------------------------
.text:00404E09                 align 10h
.text:00404E10
.text:00404E10 loc_404E10:                             ; CODE XREF: .text:00404D5A↑j
.text:00404E10                 mov     ebx, offset dword_4071D0
.text:00404E15                 jmp     loc_404D60
.text:00404E15 ; ---------------------------------------------------------------------------
.text:00404E1A                 align 10h
.text:00404E20                 sub     esp, 1Ch
.text:00404E23                 mov     edx, [esp+24h]
.text:00404E27                 mov     dword ptr [esp+0Ch], offset dword_4071D0
.text:00404E2F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404E37                 mov     [esp+4], edx
.text:00404E3B                 mov     edx, [esp+20h]
.text:00404E3F                 mov     [esp], edx
.text:00404E42                 call    sub_405290
.text:00404E47                 add     esp, 1Ch
.text:00404E4A                 retn
.text:00404E4A ; ---------------------------------------------------------------------------
.text:00404E4B                 align 10h
.text:00404E50                 sub     esp, 1Ch
.text:00404E53                 mov     edx, [esp+20h]
.text:00404E57                 mov     dword ptr [esp+0Ch], offset dword_4071D0
.text:00404E5F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404E67                 mov     [esp+4], edx
.text:00404E6B                 mov     dword ptr [esp], 0
.text:00404E72                 call    sub_405290
.text:00404E77                 add     esp, 1Ch
.text:00404E7A                 retn
.text:00404E7A ; ---------------------------------------------------------------------------
.text:00404E7B                 align 10h
.text:00404E80
.text:00404E80 ; =============== S U B R O U T I N E =======================================
.text:00404E80
.text:00404E80
.text:00404E80 ; int __cdecl sub_404E80(int, int, char *)
.text:00404E80 sub_404E80      proc near               ; CODE XREF: .text:00403D7A↑p
.text:00404E80                                         ; sub_403D90+1A↑p
.text:00404E80
.text:00404E80 var_BC          = dword ptr -0BCh
.text:00404E80 var_B8          = dword ptr -0B8h
.text:00404E80 var_B4          = dword ptr -0B4h
.text:00404E80 var_B0          = dword ptr -0B0h
.text:00404E80 var_AC          = dword ptr -0ACh
.text:00404E80 var_A8          = dword ptr -0A8h
.text:00404E80 var_A4          = dword ptr -0A4h
.text:00404E80 var_A0          = dword ptr -0A0h
.text:00404E80 var_9C          = dword ptr -9Ch
.text:00404E80 var_98          = dword ptr -98h
.text:00404E80 var_94          = dword ptr -94h
.text:00404E80 var_90          = dword ptr -90h
.text:00404E80 var_8C          = dword ptr -8Ch
.text:00404E80 var_7C          = dword ptr -7Ch
.text:00404E80 var_78          = dword ptr -78h
.text:00404E80 var_74          = dword ptr -74h
.text:00404E80 var_70          = dword ptr -70h
.text:00404E80 var_6C          = dword ptr -6Ch
.text:00404E80 var_68          = dword ptr -68h
.text:00404E80 var_64          = dword ptr -64h
.text:00404E80 var_60          = dword ptr -60h
.text:00404E80 var_5C          = dword ptr -5Ch
.text:00404E80 var_4C          = dword ptr -4Ch
.text:00404E80 var_48          = dword ptr -48h
.text:00404E80 var_44          = dword ptr -44h
.text:00404E80 var_40          = dword ptr -40h
.text:00404E80 var_3C          = dword ptr -3Ch
.text:00404E80 var_38          = dword ptr -38h
.text:00404E80 var_34          = dword ptr -34h
.text:00404E80 var_30          = dword ptr -30h
.text:00404E80 var_2C          = dword ptr -2Ch
.text:00404E80 arg_0           = dword ptr  4
.text:00404E80 arg_4           = dword ptr  8
.text:00404E80 arg_8           = dword ptr  0Ch
.text:00404E80
.text:00404E80                 push    ebp
.text:00404E81                 xor     eax, eax
.text:00404E83                 mov     ecx, 8
.text:00404E88                 push    edi
.text:00404E89                 push    esi
.text:00404E8A                 push    ebx
.text:00404E8B                 sub     esp, 0ACh
.text:00404E91                 mov     ebp, [esp+0BCh+arg_4]
.text:00404E98                 cld
.text:00404E99                 lea     edi, [esp+0BCh+var_A8]
.text:00404E9D                 mov     [esp+0BCh+var_AC], ebp
.text:00404EA1                 rep stosd
.text:00404EA3                 mov     eax, [esp+0BCh+var_8C]
.text:00404EA7                 mov     edi, [esp+0BCh+var_AC]
.text:00404EAB                 mov     esi, [esp+0BCh+var_A8]
.text:00404EAF                 mov     [esp+0BCh+var_5C], eax
.text:00404EB3                 mov     ebp, [esp+0BCh+var_A4]
.text:00404EB7                 mov     eax, [esp+0BCh+var_AC]
.text:00404EBB                 mov     [esp+0BCh+var_7C], edi
.text:00404EBF                 mov     ecx, [esp+0BCh+var_94]
.text:00404EC3                 mov     edi, [esp+0BCh+var_A0]
.text:00404EC7                 mov     [esp+0BCh+var_78], esi
.text:00404ECB                 mov     edx, [esp+0BCh+var_90]
.text:00404ECF                 mov     esi, [esp+0BCh+var_9C]
.text:00404ED3                 mov     [esp+0BCh+var_4C], eax
.text:00404ED7                 mov     ebx, [esp+0BCh+var_98]
.text:00404EDB                 mov     eax, [esp+0BCh+var_A8]
.text:00404EDF                 mov     [esp+0BCh+var_74], ebp
.text:00404EE3                 mov     [esp+0BCh+var_70], edi
.text:00404EE7                 mov     [esp+0BCh+var_6C], esi
.text:00404EEB                 mov     [esp+0BCh+var_68], ebx
.text:00404EEF                 mov     [esp+0BCh+var_64], ecx
.text:00404EF3                 mov     [esp+0BCh+var_60], edx
.text:00404EF7                 mov     [esp+0BCh+var_48], eax
.text:00404EFB                 mov     [esp+0BCh+var_44], ebp
.text:00404EFF                 mov     [esp+0BCh+var_40], edi
.text:00404F03                 mov     [esp+0BCh+var_3C], esi
.text:00404F0A                 mov     [esp+0BCh+var_38], ebx
.text:00404F11                 mov     ebx, [esp+0BCh+var_8C]
.text:00404F15                 mov     [esp+0BCh+var_30], edx
.text:00404F1C                 mov     edx, [esp+0BCh+arg_8]
.text:00404F23                 mov     [esp+0BCh+var_34], ecx
.text:00404F2A                 lea     ecx, [esp+0BCh+var_4C]
.text:00404F2E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00404F32                 mov     edx, [esp+0BCh+arg_0]
.text:00404F39                 mov     [esp+0BCh+var_2C], ebx
.text:00404F40                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00404F44                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00404F4C                 mov     [esp+0BCh+var_BC], edx ; int
.text:00404F4F                 call    sub_405290
.text:00404F54                 add     esp, 0ACh
.text:00404F5A                 pop     ebx
.text:00404F5B                 pop     esi
.text:00404F5C                 pop     edi
.text:00404F5D                 pop     ebp
.text:00404F5E                 retn
.text:00404F5E sub_404E80      endp
.text:00404F5E
.text:00404F5E ; ---------------------------------------------------------------------------
.text:00404F5F                 align 10h
.text:00404F60                 push    ebp
.text:00404F61                 xor     eax, eax
.text:00404F63                 mov     ecx, 8
.text:00404F68                 push    edi
.text:00404F69                 push    esi
.text:00404F6A                 push    ebx
.text:00404F6B                 sub     esp, 0ACh
.text:00404F71                 mov     edx, [esp+0C4h]
.text:00404F78                 cld
.text:00404F79                 lea     edi, [esp+14h]
.text:00404F7D                 mov     [esp+10h], edx
.text:00404F81                 rep stosd
.text:00404F83                 mov     eax, [esp+30h]
.text:00404F87                 mov     ebp, [esp+10h]
.text:00404F8B                 mov     edi, [esp+14h]
.text:00404F8F                 mov     [esp+60h], eax
.text:00404F93                 mov     esi, [esp+20h]
.text:00404F97                 mov     eax, [esp+10h]
.text:00404F9B                 mov     [esp+40h], ebp
.text:00404F9F                 mov     ecx, [esp+28h]
.text:00404FA3                 mov     ebp, [esp+18h]
.text:00404FA7                 mov     [esp+44h], edi
.text:00404FAB                 mov     edx, [esp+2Ch]
.text:00404FAF                 mov     edi, [esp+1Ch]
.text:00404FB3                 mov     [esp+70h], eax
.text:00404FB7                 mov     ebx, [esp+24h]
.text:00404FBB                 mov     eax, [esp+14h]
.text:00404FBF                 mov     [esp+48h], ebp
.text:00404FC3                 mov     [esp+4Ch], edi
.text:00404FC7                 mov     [esp+50h], esi
.text:00404FCB                 mov     [esp+54h], ebx
.text:00404FCF                 mov     [esp+58h], ecx
.text:00404FD3                 mov     [esp+5Ch], edx
.text:00404FD7                 mov     [esp+74h], eax
.text:00404FDB                 mov     [esp+78h], ebp
.text:00404FDF                 mov     [esp+7Ch], edi
.text:00404FE3                 mov     [esp+80h], esi
.text:00404FEA                 mov     [esp+84h], ebx
.text:00404FF1                 mov     esi, [esp+30h]
.text:00404FF5                 lea     ebx, [esp+70h]
.text:00404FF9                 mov     [esp+8Ch], edx
.text:00405000                 mov     edx, [esp+0C8h]
.text:00405007                 mov     [esp+88h], ecx
.text:0040500E                 mov     ecx, [esp+0CCh]
.text:00405015                 mov     [esp+4], edx
.text:00405019                 mov     edx, [esp+0C0h]
.text:00405020                 mov     [esp+90h], esi
.text:00405027                 mov     [esp+0Ch], ebx
.text:0040502B                 mov     [esp+8], ecx
.text:0040502F                 mov     [esp], edx
.text:00405032                 call    sub_405290
.text:00405037                 add     esp, 0ACh
.text:0040503D                 pop     ebx
.text:0040503E                 pop     esi
.text:0040503F                 pop     edi
.text:00405040                 pop     ebp
.text:00405041                 retn
.text:00405041 ; ---------------------------------------------------------------------------
.text:00405042                 align 10h
.text:00405050                 push    ebp
.text:00405051                 xor     eax, eax
.text:00405053                 mov     ecx, 8
.text:00405058                 push    edi
.text:00405059                 push    esi
.text:0040505A                 push    ebx
.text:0040505B                 sub     esp, 0ACh
.text:00405061                 mov     edi, [esp+0C0h]
.text:00405068                 cld
.text:00405069                 mov     [esp+10h], edi
.text:0040506D                 lea     edi, [esp+14h]
.text:00405071                 rep stosd
.text:00405073                 mov     eax, [esp+30h]
.text:00405077                 mov     esi, [esp+10h]
.text:0040507B                 mov     ebx, [esp+14h]
.text:0040507F                 mov     [esp+60h], eax
.text:00405083                 mov     ebp, [esp+18h]
.text:00405087                 mov     eax, [esp+10h]
.text:0040508B                 mov     [esp+40h], esi
.text:0040508F                 mov     edi, [esp+1Ch]
.text:00405093                 mov     esi, [esp+20h]
.text:00405097                 mov     [esp+44h], ebx
.text:0040509B                 mov     ecx, [esp+28h]
.text:0040509F                 mov     edx, [esp+2Ch]
.text:004050A3                 mov     [esp+70h], eax
.text:004050A7                 mov     ebx, [esp+24h]
.text:004050AB                 mov     eax, [esp+14h]
.text:004050AF                 mov     [esp+48h], ebp
.text:004050B3                 mov     [esp+4Ch], edi
.text:004050B7                 mov     [esp+50h], esi
.text:004050BB                 mov     [esp+54h], ebx
.text:004050BF                 mov     [esp+58h], ecx
.text:004050C3                 mov     [esp+5Ch], edx
.text:004050C7                 mov     [esp+74h], eax
.text:004050CB                 mov     [esp+78h], ebp
.text:004050CF                 mov     [esp+7Ch], edi
.text:004050D3                 mov     [esp+80h], esi
.text:004050DA                 mov     [esp+84h], ebx
.text:004050E1                 mov     [esp+8Ch], edx
.text:004050E8                 lea     edx, [esp+70h]
.text:004050EC                 mov     [esp+88h], ecx
.text:004050F3                 mov     ecx, [esp+30h]
.text:004050F7                 mov     [esp+0Ch], edx
.text:004050FB                 mov     edx, [esp+0C4h]
.text:00405102                 mov     [esp+90h], ecx
.text:00405109                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405111                 mov     [esp+4], edx
.text:00405115                 mov     dword ptr [esp], 0
.text:0040511C                 call    sub_405290
.text:00405121                 add     esp, 0ACh
.text:00405127                 pop     ebx
.text:00405128                 pop     esi
.text:00405129                 pop     edi
.text:0040512A                 pop     ebp
.text:0040512B                 retn
.text:0040512B ; ---------------------------------------------------------------------------
.text:0040512C                 align 10h
.text:00405130                 push    edi
.text:00405131                 push    esi
.text:00405132                 push    ebx
.text:00405133                 sub     esp, 40h
.text:00405136                 mov     edx, ds:dword_4071DC
.text:0040513C                 mov     ebx, ds:dword_4071D0
.text:00405142                 mov     esi, ds:dword_4071D8
.text:00405148                 mov     edi, ds:dword_4071D4
.text:0040514E                 mov     [esp+1Ch], edx
.text:00405152                 mov     ecx, ds:dword_4071E0
.text:00405158                 mov     edx, ds:dword_4071F0
.text:0040515E                 mov     [esp+10h], ebx
.text:00405162                 mov     ebx, ds:dword_4071E4
.text:00405168                 mov     [esp+30h], edx
.text:0040516C                 movzx   edx, byte ptr [esp+54h]
.text:00405171                 mov     [esp+18h], esi
.text:00405175                 mov     esi, ds:dword_4071EC
.text:0040517B                 mov     [esp+14h], edi
.text:0040517F                 mov     edi, ds:dword_4071E8
.text:00405185                 mov     [esp+20h], ecx
.text:00405189                 mov     cl, dl
.text:0040518B                 shr     cl, 5
.text:0040518E                 mov     [esp+24h], ebx
.text:00405192                 movzx   ebx, cl
.text:00405195                 mov     [esp+2Ch], esi
.text:00405199                 lea     esi, [esp+10h]
.text:0040519D                 mov     [esp+28h], edi
.text:004051A1                 lea     edi, [esi+ebx*4]
.text:004051A4                 mov     ebx, edx
.text:004051A6                 mov     edx, [edi+4]
.text:004051A9                 and     ebx, 1Fh
.text:004051AC                 mov     cl, bl
.text:004051AE                 mov     eax, edx
.text:004051B0                 shr     eax, cl
.text:004051B2                 and     eax, 1
.text:004051B5                 xor     eax, 1
.text:004051B8                 shl     eax, cl
.text:004051BA                 xor     edx, eax
.text:004051BC                 mov     [edi+4], edx
.text:004051BF                 mov     edx, [esp+50h]
.text:004051C3                 mov     [esp+0Ch], esi
.text:004051C7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004051CF                 mov     [esp+4], edx
.text:004051D3                 mov     dword ptr [esp], 0
.text:004051DA                 call    sub_405290
.text:004051DF                 add     esp, 40h
.text:004051E2                 pop     ebx
.text:004051E3                 pop     esi
.text:004051E4                 pop     edi
.text:004051E5                 retn
.text:004051E5 ; ---------------------------------------------------------------------------
.text:004051E6                 align 10h
.text:004051F0
.text:004051F0 ; =============== S U B R O U T I N E =======================================
.text:004051F0
.text:004051F0
.text:004051F0 ; int __cdecl sub_4051F0(char *)
.text:004051F0 sub_4051F0      proc near               ; CODE XREF: sub_403C80+64↑p
.text:004051F0
.text:004051F0 var_4C          = dword ptr -4Ch
.text:004051F0 var_48          = dword ptr -48h
.text:004051F0 var_44          = dword ptr -44h
.text:004051F0 var_40          = dword ptr -40h
.text:004051F0 var_3C          = dword ptr -3Ch
.text:004051F0 var_38          = dword ptr -38h
.text:004051F0 var_34          = dword ptr -34h
.text:004051F0 var_30          = dword ptr -30h
.text:004051F0 var_2C          = dword ptr -2Ch
.text:004051F0 var_28          = dword ptr -28h
.text:004051F0 var_24          = dword ptr -24h
.text:004051F0 var_20          = dword ptr -20h
.text:004051F0 var_1C          = dword ptr -1Ch
.text:004051F0 arg_0           = dword ptr  4
.text:004051F0
.text:004051F0                 sub     esp, 4Ch
.text:004051F3                 mov     ecx, ds:dword_4071D0
.text:004051F9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00405201                 mov     edx, ds:dword_4071D4
.text:00405207                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040520E                 mov     [esp+4Ch+var_3C], ecx
.text:00405212                 mov     ecx, ds:dword_4071DC
.text:00405218                 mov     [esp+4Ch+var_38], edx
.text:0040521C                 mov     edx, ds:dword_4071D8
.text:00405222                 mov     [esp+4Ch+var_30], ecx
.text:00405226                 mov     ecx, ds:dword_4071E0
.text:0040522C                 mov     eax, edx
.text:0040522E                 shr     eax, 1Ah
.text:00405231                 and     eax, 1
.text:00405234                 xor     eax, 1
.text:00405237                 mov     [esp+4Ch+var_2C], ecx
.text:0040523B                 shl     eax, 1Ah
.text:0040523E                 mov     ecx, ds:dword_4071E4
.text:00405244                 xor     edx, eax
.text:00405246                 mov     [esp+4Ch+var_34], edx
.text:0040524A                 mov     edx, [esp+4Ch+arg_0]
.text:0040524E                 mov     [esp+4Ch+var_28], ecx
.text:00405252                 mov     ecx, ds:dword_4071E8
.text:00405258                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040525C                 mov     [esp+4Ch+var_24], ecx
.text:00405260                 mov     ecx, ds:dword_4071EC
.text:00405266                 mov     [esp+4Ch+var_20], ecx
.text:0040526A                 mov     ecx, ds:dword_4071F0
.text:00405270                 mov     [esp+4Ch+var_1C], ecx
.text:00405274                 lea     ecx, [esp+4Ch+var_3C]
.text:00405278                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040527C                 call    sub_405290
.text:00405281                 add     esp, 4Ch
.text:00405284                 retn
.text:00405284 sub_4051F0      endp
.text:00405284
.text:00405284 ; ---------------------------------------------------------------------------
.text:00405285                 align 10h
.text:00405290
.text:00405290 ; =============== S U B R O U T I N E =======================================
.text:00405290
.text:00405290
.text:00405290 ; int __cdecl sub_405290(int, char *, int, int)
.text:00405290 sub_405290      proc near               ; CODE XREF: .text:00404E42↑p
.text:00405290                                         ; .text:00404E72↑p ...
.text:00405290
.text:00405290 Block           = dword ptr -2Ch
.text:00405290 var_28          = dword ptr -28h
.text:00405290 Str             = dword ptr -24h
.text:00405290 var_20          = dword ptr -20h
.text:00405290 var_1C          = dword ptr -1Ch
.text:00405290 var_18          = dword ptr -18h
.text:00405290 var_14          = dword ptr -14h
.text:00405290 arg_0           = dword ptr  4
.text:00405290 arg_4           = dword ptr  8
.text:00405290 arg_8           = dword ptr  0Ch
.text:00405290 arg_C           = dword ptr  10h
.text:00405290
.text:00405290                 push    ebp
.text:00405291                 push    edi
.text:00405292                 push    esi
.text:00405293                 push    ebx
.text:00405294                 sub     esp, 1Ch
.text:00405297                 call    _errno
.text:0040529C                 mov     edx, [eax]
.text:0040529E                 mov     eax, [esp+2Ch+arg_0]
.text:004052A2                 mov     [esp+2Ch+var_14], edx
.text:004052A6                 test    eax, eax
.text:004052A8                 js      loc_40544A
.text:004052AE                 mov     eax, [esp+2Ch+arg_0]
.text:004052B2                 cmp     dword_406050, eax
.text:004052B8                 ja      short loc_405330
.text:004052BA                 mov     esi, eax
.text:004052BC                 inc     esi
.text:004052BD                 cmp     esi, 1FFFFFFFh
.text:004052C3                 ja      loc_40544F
.text:004052C9                 mov     ebx, off_40605C
.text:004052CF                 cmp     ebx, offset dword_406054
.text:004052D5                 jz      loc_405421
.text:004052DB
.text:004052DB loc_4052DB:                             ; CODE XREF: sub_405290+1B5↓j
.text:004052DB                 mov     [esp+2Ch+Block], ebx ; void *
.text:004052DE                 lea     ecx, ds:0[esi*8]
.text:004052E5                 mov     ebp, esi
.text:004052E7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:004052EB                 call    sub_403EC0
.text:004052F0                 mov     off_40605C, eax
.text:004052F5                 mov     ebx, dword_406050
.text:004052FB                 sub     ebp, ebx
.text:004052FD                 lea     edi, [eax+ebx*8]
.text:00405300                 lea     eax, ds:0[ebp*8]
.text:00405307                 cmp     eax, 7
.text:0040530A                 jbe     short loc_405320
.text:0040530C                 test    edi, 4
.text:00405312                 jz      short loc_405320
.text:00405314                 mov     dword ptr [edi], 0
.text:0040531A                 sub     eax, 4
.text:0040531D                 add     edi, 4
.text:00405320
.text:00405320 loc_405320:                             ; CODE XREF: sub_405290+7A↑j
.text:00405320                                         ; sub_405290+82↑j
.text:00405320                 cld
.text:00405321                 mov     ecx, eax
.text:00405323                 shr     ecx, 2
.text:00405326                 xor     eax, eax
.text:00405328                 rep stosd
.text:0040532A                 mov     dword_406050, esi
.text:00405330
.text:00405330 loc_405330:                             ; CODE XREF: sub_405290+28↑j
.text:00405330                 mov     esi, off_40605C
.text:00405336                 mov     eax, [esp+2Ch+arg_0]
.text:0040533A                 mov     ebp, [esi+eax*8]
.text:0040533D                 mov     edi, [esi+eax*8+4]
.text:00405341                 mov     esi, [esp+2Ch+arg_C]
.text:00405345                 test    esi, esi
.text:00405347                 jz      loc_405417
.text:0040534D
.text:0040534D loc_40534D:                             ; CODE XREF: sub_405290+18C↓j
.text:0040534D                 call    _errno
.text:00405352                 mov     ebx, [eax]
.text:00405354                 mov     [esp+2Ch+var_18], esi ; int
.text:00405358                 mov     ecx, [esi]
.text:0040535A                 mov     [esp+2Ch+Block], edi ; int
.text:0040535D                 mov     edx, [esp+2Ch+arg_8]
.text:00405361                 mov     [esp+2Ch+var_28], ebp ; int
.text:00405365                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405369                 mov     ecx, [esp+2Ch+arg_4]
.text:0040536D                 mov     [esp+2Ch+var_20], edx ; int
.text:00405371                 mov     [esp+2Ch+Str], ecx ; Str
.text:00405375                 call    sub_404150
.text:0040537A                 mov     esi, eax
.text:0040537C                 call    _errno
.text:00405381                 mov     [eax], ebx
.text:00405383                 cmp     ebp, esi
.text:00405385                 ja      short loc_4053FB
.text:00405387                 lea     ebp, [esi+1]
.text:0040538A                 mov     ebx, off_40605C
.text:00405390                 cmp     edi, offset unk_4070D0
.text:00405396                 mov     esi, [esp+2Ch+arg_0]
.text:0040539A                 mov     [ebx+esi*8], ebp
.text:0040539D                 jz      short loc_4053AD
.text:0040539F                 mov     [esp+2Ch+Block], edi ; Block
.text:004053A2                 call    free
.text:004053A7                 mov     ebx, off_40605C
.text:004053AD
.text:004053AD loc_4053AD:                             ; CODE XREF: sub_405290+10D↑j
.text:004053AD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:004053B0                 call    sub_403E30
.text:004053B5                 mov     esi, [esp+2Ch+arg_C]
.text:004053B9                 mov     edi, eax
.text:004053BB                 mov     eax, [esp+2Ch+arg_0]
.text:004053BF                 test    esi, esi
.text:004053C1                 mov     [ebx+eax*8+4], edi
.text:004053C5                 jz      short loc_405410
.text:004053C7
.text:004053C7 loc_4053C7:                             ; CODE XREF: sub_405290+185↓j
.text:004053C7                 call    _errno
.text:004053CC                 mov     ebx, [eax]
.text:004053CE                 mov     [esp+2Ch+var_18], esi ; int
.text:004053D2                 mov     ecx, [esi]
.text:004053D4                 mov     [esp+2Ch+Block], edi ; int
.text:004053D7                 mov     edx, [esp+2Ch+arg_8]
.text:004053DB                 mov     [esp+2Ch+var_28], ebp ; int
.text:004053DF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004053E3                 mov     ecx, [esp+2Ch+arg_4]
.text:004053E7                 mov     [esp+2Ch+var_20], edx ; int
.text:004053EB                 mov     [esp+2Ch+Str], ecx ; Str
.text:004053EF                 call    sub_404150
.text:004053F4                 call    _errno
.text:004053F9                 mov     [eax], ebx
.text:004053FB
.text:004053FB loc_4053FB:                             ; CODE XREF: sub_405290+F5↑j
.text:004053FB                 call    _errno
.text:00405400                 mov     ebp, [esp+2Ch+var_14]
.text:00405404                 mov     [eax], ebp
.text:00405406                 add     esp, 1Ch
.text:00405409                 mov     eax, edi
.text:0040540B                 pop     ebx
.text:0040540C                 pop     esi
.text:0040540D                 pop     edi
.text:0040540E                 pop     ebp
.text:0040540F                 retn
.text:00405410 ; ---------------------------------------------------------------------------
.text:00405410
.text:00405410 loc_405410:                             ; CODE XREF: sub_405290+135↑j
.text:00405410                 mov     esi, offset dword_4071D0
.text:00405415                 jmp     short loc_4053C7
.text:00405417 ; ---------------------------------------------------------------------------
.text:00405417
.text:00405417 loc_405417:                             ; CODE XREF: sub_405290+B7↑j
.text:00405417                 mov     esi, offset dword_4071D0
.text:0040541C                 jmp     loc_40534D
.text:00405421 ; ---------------------------------------------------------------------------
.text:00405421
.text:00405421 loc_405421:                             ; CODE XREF: sub_405290+45↑j
.text:00405421                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00405428                 call    sub_403E30
.text:0040542D                 mov     off_40605C, eax
.text:00405432                 mov     edi, dword_406054
.text:00405438                 mov     ebx, eax
.text:0040543A                 mov     ecx, off_406058
.text:00405440                 mov     [eax], edi
.text:00405442                 mov     [eax+4], ecx
.text:00405445                 jmp     loc_4052DB
.text:0040544A ; ---------------------------------------------------------------------------
.text:0040544A
.text:0040544A loc_40544A:                             ; CODE XREF: sub_405290+18↑j
.text:0040544A                 call    abort
.text:0040544F ; ---------------------------------------------------------------------------
.text:0040544F
.text:0040544F loc_40544F:                             ; CODE XREF: sub_405290+33↑j
.text:0040544F                 call    sub_405480
.text:0040544F sub_405290      endp
.text:0040544F
.text:0040544F ; ---------------------------------------------------------------------------
.text:00405454                 align 10h
.text:00405460
.text:00405460 loc_405460:                             ; DATA XREF: sub_405480+3↓o
.text:00405460                 insd
.text:00405461                 db      65h
.text:00405461                 insd
.text:00405463                 outsd
.text:00405464                 jb      short loc_4054DF
.text:00405466                 and     [ebp+78h], ah
.text:00405469                 push    74737561h
.text:0040546E
.text:0040546E loc_40546E:                             ; DATA XREF: sub_405480+10↓o
.text:0040546E                 db      65h
.text:0040546E                 add     fs:0B68D0073h, ah
.text:0040546E ; ---------------------------------------------------------------------------
.text:00405476                 dw 0
.text:00405478                 align 10h
.text:00405480
.text:00405480 ; =============== S U B R O U T I N E =======================================
.text:00405480
.text:00405480 ; Attributes: noreturn
.text:00405480
.text:00405480 sub_405480      proc near               ; CODE XREF: sub_403DC0:loc_403DDF↑p
.text:00405480                                         ; sub_403DF0:loc_403E29↑p ...
.text:00405480
.text:00405480 Code            = dword ptr -1Ch
.text:00405480 ErrorMessage    = dword ptr -18h
.text:00405480 var_14          = dword ptr -14h
.text:00405480 var_10          = byte ptr -10h
.text:00405480
.text:00405480                 sub     esp, 1Ch
.text:00405483                 mov     [esp+1Ch+Code], offset loc_405460
.text:0040548A                 call    ds:libintl_gettext
.text:00405490                 mov     [esp+1Ch+var_14], (offset loc_40546E+3) ; char *
.text:00405498                 mov     edx, Code
.text:0040549E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004054A6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:004054AA                 mov     [esp+1Ch+Code], edx ; Code
.text:004054AD                 call    sub_405510
.text:004054B2                 call    abort
.text:004054B2 sub_405480      endp
.text:004054B2
.text:004054B2 ; ---------------------------------------------------------------------------
.text:004054B7                 align 10h
.text:004054C0
.text:004054C0 ; =============== S U B R O U T I N E =======================================
.text:004054C0
.text:004054C0 ; Attributes: thunk
.text:004054C0
.text:004054C0 libintl_bindtextdomain proc near
.text:004054C0                 jmp     ds:__imp_libintl_bindtextdomain
.text:004054C0 libintl_bindtextdomain endp
.text:004054C0
.text:004054C0 ; ---------------------------------------------------------------------------
.text:004054C6                 align 10h
.text:004054D0                 jmp     ds:libintl_textdomain
.text:004054D0 ; ---------------------------------------------------------------------------
.text:004054D6                 db 2 dup(90h)
.text:004054D8                 dd 0
.text:004054DC                 db 3 dup(0)
.text:004054DF ; ---------------------------------------------------------------------------
.text:004054DF
.text:004054DF loc_4054DF:                             ; CODE XREF: .text:00405464↑j
.text:004054DF                 add     bh, bh
.text:004054E1                 and     eax, offset libintl_gettext
.text:004054E6                 nop
.text:004054E7                 nop
.text:004054E7 ; ---------------------------------------------------------------------------
.text:004054E8                 dd 2 dup(0)
.text:004054F0 ; const char aS[]
.text:004054F0 aS              db ': %s',0             ; DATA XREF: sub_405510+B8↓o
.text:004054F0                                         ; sub_405614+122↓o
.text:004054F5 aUnknownSystemE db 'Unknown system error',0
.text:004054F5                                         ; DATA XREF: sub_405510:loc_4055DD↓o
.text:004054F5                                         ; sub_405614:loc_40574E↓o
.text:0040550A ; const char aS_0[]
.text:0040550A aS_0            db '%s: ',0             ; DATA XREF: sub_405510:loc_4055E4↓o
.text:0040550F                 align 10h
.text:00405510
.text:00405510 ; =============== S U B R O U T I N E =======================================
.text:00405510
.text:00405510
.text:00405510 ; int __cdecl sub_405510(int Code, int ErrorMessage, char *, char)
.text:00405510 sub_405510      proc near               ; CODE XREF: sub_4016B0+403↑p
.text:00405510                                         ; sub_4016B0+4AE↑p ...
.text:00405510
.text:00405510 Stream          = dword ptr -1Ch
.text:00405510 Format          = dword ptr -18h
.text:00405510 ArgList         = dword ptr -14h
.text:00405510 Code            = dword ptr  4
.text:00405510 ErrorMessage    = dword ptr  8
.text:00405510 arg_8           = dword ptr  0Ch
.text:00405510 arg_C           = byte ptr  10h
.text:00405510
.text:00405510                 push    esi
.text:00405511                 push    ebx
.text:00405512                 sub     esp, 14h
.text:00405515                 mov     edx, ds:_iob
.text:0040551B                 mov     esi, [esp+1Ch+Code]
.text:0040551F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00405523                 add     edx, 20h ; ' '
.text:00405526                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405529                 call    fflush
.text:0040552E                 mov     eax, ds:dword_407250
.text:00405533                 test    eax, eax
.text:00405535                 jz      loc_4055E4
.text:0040553B                 call    eax ; dword_407250
.text:0040553D
.text:0040553D loc_40553D:                             ; CODE XREF: sub_405510+F7↓j
.text:0040553D                 lea     edx, [esp+1Ch+arg_C]
.text:00405541                 mov     ecx, [esp+1Ch+arg_8]
.text:00405545                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00405549                 mov     edx, ds:_iob
.text:0040554F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00405553                 add     edx, 40h ; '@'
.text:00405556                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405559                 call    vfprintf
.text:0040555E                 inc     ds:dword_407260
.text:00405564                 test    ebx, ebx
.text:00405566                 jnz     short loc_4055B2
.text:00405568
.text:00405568 loc_405568:                             ; CODE XREF: sub_405510+CB↓j
.text:00405568                 mov     edx, ds:_iob
.text:0040556E                 lea     ecx, [edx+40h]
.text:00405571                 mov     ebx, [ecx+4]
.text:00405574                 dec     ebx
.text:00405575                 test    ebx, ebx
.text:00405577                 mov     [ecx+4], ebx
.text:0040557A                 js      short loc_4055A0
.text:0040557C                 mov     ecx, [edx+40h]
.text:0040557F                 mov     byte ptr [ecx], 0Ah
.text:00405582                 inc     dword ptr [edx+40h]
.text:00405585
.text:00405585 loc_405585:                             ; CODE XREF: sub_405510+A0↓j
.text:00405585                 mov     edx, ds:_iob
.text:0040558B                 add     edx, 40h ; '@'
.text:0040558E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405591                 call    fflush
.text:00405596                 test    esi, esi
.text:00405598                 jnz     short loc_40560C
.text:0040559A                 add     esp, 14h
.text:0040559D                 pop     ebx
.text:0040559E                 pop     esi
.text:0040559F                 retn
.text:004055A0 ; ---------------------------------------------------------------------------
.text:004055A0
.text:004055A0 loc_4055A0:                             ; CODE XREF: sub_405510+6A↑j
.text:004055A0                 mov     [esp+1Ch+Format], ecx ; File
.text:004055A4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:004055AB                 call    _flsbuf
.text:004055B0                 jmp     short loc_405585
.text:004055B2 ; ---------------------------------------------------------------------------
.text:004055B2
.text:004055B2 loc_4055B2:                             ; CODE XREF: sub_405510+56↑j
.text:004055B2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004055B5                 call    strerror
.text:004055BA                 test    eax, eax
.text:004055BC                 jz      short loc_4055DD
.text:004055BE
.text:004055BE loc_4055BE:                             ; CODE XREF: sub_405510+D2↓j
.text:004055BE                 mov     [esp+1Ch+ArgList], eax
.text:004055C2                 mov     ebx, ds:_iob
.text:004055C8                 mov     [esp+1Ch+Format], offset aS ; ": %s"
.text:004055D0                 add     ebx, 40h ; '@'
.text:004055D3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004055D6                 call    fprintf
.text:004055DB                 jmp     short loc_405568
.text:004055DD ; ---------------------------------------------------------------------------
.text:004055DD
.text:004055DD loc_4055DD:                             ; CODE XREF: sub_405510+AC↑j
.text:004055DD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004055E2                 jmp     short loc_4055BE
.text:004055E4 ; ---------------------------------------------------------------------------
.text:004055E4
.text:004055E4 loc_4055E4:                             ; CODE XREF: sub_405510+25↑j
.text:004055E4                 mov     [esp+1Ch+Format], offset aS_0 ; "%s: "
.text:004055EC                 mov     edx, ds:_iob
.text:004055F2                 mov     ecx, ds:dword_407220
.text:004055F8                 add     edx, 40h ; '@'
.text:004055FB                 mov     [esp+1Ch+ArgList], ecx
.text:004055FF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405602                 call    fprintf
.text:00405607                 jmp     loc_40553D
.text:0040560C ; ---------------------------------------------------------------------------
.text:0040560C
.text:0040560C loc_40560C:                             ; CODE XREF: sub_405510+88↑j
.text:0040560C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040560F                 call    exit
.text:0040560F sub_405510      endp
.text:0040560F
.text:00405614
.text:00405614 ; =============== S U B R O U T I N E =======================================
.text:00405614
.text:00405614
.text:00405614 ; int __cdecl sub_405614(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00405614 sub_405614      proc near               ; DATA XREF: sub_405614+77↓o
.text:00405614
.text:00405614 Stream          = dword ptr -28h
.text:00405614 Format          = dword ptr -24h
.text:00405614 ArgList         = dword ptr -20h
.text:00405614 var_1C          = dword ptr -1Ch
.text:00405614 Code            = dword ptr  8
.text:00405614 ErrorMessage    = dword ptr  0Ch
.text:00405614 Str2            = dword ptr  10h
.text:00405614 arg_10          = dword ptr  14h
.text:00405614 arg_14          = dword ptr  18h
.text:00405614 arg_18          = byte ptr  1Ch
.text:00405614
.text:00405614                 and     eax, 64253A73h
.text:00405619                 cmp     ah, [eax]
.text:0040561B
.text:0040561B loc_40561B:                             ; DATA XREF: sub_405614:loc_405755↓o
.text:0040561B                 add     ds:55003A73h, ah
.text:00405621                 push    edi
.text:00405622                 push    esi
.text:00405623                 push    ebx
.text:00405624                 sub     esp, 1Ch
.text:00405627                 mov     edx, ds:dword_407290
.text:0040562D                 mov     ebp, [esp+28h+Code]
.text:00405631                 mov     edi, [esp+28h+ErrorMessage]
.text:00405635                 test    edx, edx
.text:00405637                 mov     ebx, [esp+28h+Str2]
.text:0040563B                 mov     esi, [esp+28h+arg_10]
.text:0040563F                 jz      short loc_405659
.text:00405641                 cmp     ds:dword_407210, esi
.text:00405647                 jz      loc_405780
.text:0040564D
.text:0040564D loc_40564D:                             ; CODE XREF: sub_405614+18D↓j
.text:0040564D                 mov     ds:Str1, ebx
.text:00405653                 mov     ds:dword_407210, esi
.text:00405659
.text:00405659 loc_405659:                             ; CODE XREF: sub_405614+2B↑j
.text:00405659                 mov     edx, ds:_iob
.text:0040565F                 add     edx, 20h ; ' '
.text:00405662                 mov     [esp+28h+Stream], edx ; Stream
.text:00405665                 call    fflush
.text:0040566A                 mov     eax, ds:dword_407250
.text:0040566F                 test    eax, eax
.text:00405671                 jz      loc_405755
.text:00405677                 call    eax ; dword_407250
.text:00405679
.text:00405679 loc_405679:                             ; CODE XREF: sub_405614+164↓j
.text:00405679                 test    ebx, ebx
.text:0040567B                 jz      short loc_40569E
.text:0040567D                 mov     [esp+28h+ArgList], ebx
.text:00405681                 mov     ebx, ds:_iob
.text:00405687                 mov     [esp+28h+var_1C], esi
.text:0040568B                 mov     [esp+28h+Format], offset sub_405614 ; Format
.text:00405693                 add     ebx, 40h ; '@'
.text:00405696                 mov     [esp+28h+Stream], ebx ; Stream
.text:00405699                 call    fprintf
.text:0040569E
.text:0040569E loc_40569E:                             ; CODE XREF: sub_405614+67↑j
.text:0040569E                 mov     esi, ds:_iob
.text:004056A4                 lea     edx, [esp+28h+arg_18]
.text:004056A8                 mov     ecx, [esp+28h+arg_14]
.text:004056AC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004056B0                 add     esi, 40h ; '@'
.text:004056B3                 mov     [esp+28h+Format], ecx ; Format
.text:004056B7                 mov     [esp+28h+Stream], esi ; Stream
.text:004056BA                 call    vfprintf
.text:004056BF                 inc     ds:dword_407260
.text:004056C5                 test    edi, edi
.text:004056C7                 jnz     short loc_405720
.text:004056C9
.text:004056C9 loc_4056C9:                             ; CODE XREF: sub_405614+135↓j
.text:004056C9                 mov     edx, ds:_iob
.text:004056CF                 lea     ecx, [edx+40h]
.text:004056D2                 mov     ebx, [ecx+4]
.text:004056D5                 dec     ebx
.text:004056D6                 test    ebx, ebx
.text:004056D8                 mov     [ecx+4], ebx
.text:004056DB                 js      short loc_405707
.text:004056DD                 mov     esi, [edx+40h]
.text:004056E0                 mov     byte ptr [esi], 0Ah
.text:004056E3                 inc     dword ptr [edx+40h]
.text:004056E6
.text:004056E6 loc_4056E6:                             ; CODE XREF: sub_405614+103↓j
.text:004056E6                 mov     ecx, ds:_iob
.text:004056EC                 add     ecx, 40h ; '@'
.text:004056EF                 mov     [esp+28h+Stream], ecx ; Stream
.text:004056F2                 call    fflush
.text:004056F7                 test    ebp, ebp
.text:004056F9                 jnz     loc_4057A6
.text:004056FF
.text:004056FF loc_4056FF:                             ; CODE XREF: sub_405614+173↓j
.text:004056FF                                         ; sub_405614+187↓j
.text:004056FF                 add     esp, 1Ch
.text:00405702                 pop     ebx
.text:00405703                 pop     esi
.text:00405704                 pop     edi
.text:00405705                 pop     ebp
.text:00405706                 retn
.text:00405707 ; ---------------------------------------------------------------------------
.text:00405707
.text:00405707 loc_405707:                             ; CODE XREF: sub_405614+C7↑j
.text:00405707                 mov     [esp+28h+Format], ecx ; File
.text:0040570B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00405712                 call    _flsbuf
.text:00405717                 jmp     short loc_4056E6
.text:00405717 ; ---------------------------------------------------------------------------
.text:00405719                 align 10h
.text:00405720
.text:00405720 loc_405720:                             ; CODE XREF: sub_405614+B3↑j
.text:00405720                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00405723                 call    strerror
.text:00405728                 test    eax, eax
.text:0040572A                 jz      short loc_40574E
.text:0040572C
.text:0040572C loc_40572C:                             ; CODE XREF: sub_405614+13F↓j
.text:0040572C                 mov     [esp+28h+ArgList], eax
.text:00405730                 mov     edi, ds:_iob
.text:00405736                 mov     [esp+28h+Format], offset aS ; ": %s"
.text:0040573E                 add     edi, 40h ; '@'
.text:00405741                 mov     [esp+28h+Stream], edi ; Stream
.text:00405744                 call    fprintf
.text:00405749                 jmp     loc_4056C9
.text:0040574E ; ---------------------------------------------------------------------------
.text:0040574E
.text:0040574E loc_40574E:                             ; CODE XREF: sub_405614+116↑j
.text:0040574E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405753                 jmp     short loc_40572C
.text:00405755 ; ---------------------------------------------------------------------------
.text:00405755
.text:00405755 loc_405755:                             ; CODE XREF: sub_405614+5D↑j
.text:00405755                 mov     [esp+28h+Format], (offset loc_40561B+1) ; Format
.text:0040575D                 mov     ecx, ds:_iob
.text:00405763                 mov     edx, ds:dword_407220
.text:00405769                 add     ecx, 40h ; '@'
.text:0040576C                 mov     [esp+28h+ArgList], edx
.text:00405770                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405773                 call    fprintf
.text:00405778                 jmp     loc_405679
.text:00405778 ; ---------------------------------------------------------------------------
.text:0040577D                 align 10h
.text:00405780
.text:00405780 loc_405780:                             ; CODE XREF: sub_405614+33↑j
.text:00405780                 mov     eax, ds:Str1
.text:00405785                 cmp     ebx, eax
.text:00405787                 jz      loc_4056FF
.text:0040578D                 mov     [esp+28h+Format], ebx ; Str2
.text:00405791                 mov     [esp+28h+Stream], eax ; Str1
.text:00405794                 call    strcmp
.text:00405799                 test    eax, eax
.text:0040579B                 jz      loc_4056FF
.text:004057A1                 jmp     loc_40564D
.text:004057A6 ; ---------------------------------------------------------------------------
.text:004057A6
.text:004057A6 loc_4057A6:                             ; CODE XREF: sub_405614+E5↑j
.text:004057A6                 mov     [esp+28h+Stream], ebp ; Code
.text:004057A9                 call    exit
.text:004057A9 sub_405614      endp ; sp-analysis failed
.text:004057A9
.text:004057A9 ; ---------------------------------------------------------------------------
.text:004057AE                 align 10h
.text:004057B0
.text:004057B0 ; =============== S U B R O U T I N E =======================================
.text:004057B0
.text:004057B0
.text:004057B0 ; int __cdecl sub_4057B0(void *, int)
.text:004057B0 sub_4057B0      proc near               ; CODE XREF: sub_403DC0+12↑p
.text:004057B0
.text:004057B0 Size            = dword ptr -1Ch
.text:004057B0 Src             = dword ptr -18h
.text:004057B0 var_14          = dword ptr -14h
.text:004057B0 var_8           = dword ptr -8
.text:004057B0 var_4           = dword ptr -4
.text:004057B0 arg_0           = dword ptr  4
.text:004057B0 arg_4           = dword ptr  8
.text:004057B0
.text:004057B0                 sub     esp, 1Ch
.text:004057B3                 mov     edx, [esp+1Ch+arg_4]
.text:004057B7                 mov     [esp+1Ch+var_4], esi
.text:004057BB                 mov     esi, [esp+1Ch+arg_0]
.text:004057BF                 mov     [esp+1Ch+var_8], ebx
.text:004057C3                 mov     [esp+1Ch+Src], edx
.text:004057C7                 mov     [esp+1Ch+Size], esi
.text:004057CA                 call    sub_405810
.text:004057CF                 lea     edx, [eax+1]
.text:004057D2                 mov     ebx, eax
.text:004057D4                 mov     [esp+1Ch+Size], edx ; Size
.text:004057D7                 call    malloc
.text:004057DC                 xor     edx, edx
.text:004057DE                 test    eax, eax
.text:004057E0                 jz      short loc_4057F8
.text:004057E2                 mov     byte ptr [ebx+eax], 0
.text:004057E6                 mov     [esp+1Ch+var_14], ebx ; Size
.text:004057EA                 mov     [esp+1Ch+Src], esi ; Src
.text:004057EE                 mov     [esp+1Ch+Size], eax ; void *
.text:004057F1                 call    memcpy
.text:004057F6                 mov     edx, eax
.text:004057F8
.text:004057F8 loc_4057F8:                             ; CODE XREF: sub_4057B0+30↑j
.text:004057F8                 mov     ebx, [esp+1Ch+var_8]
.text:004057FC                 mov     eax, edx
.text:004057FE                 mov     esi, [esp+1Ch+var_4]
.text:00405802                 add     esp, 1Ch
.text:00405805                 retn
.text:00405805 sub_4057B0      endp
.text:00405805
.text:00405805 ; ---------------------------------------------------------------------------
.text:00405806                 align 10h
.text:00405810
.text:00405810 ; =============== S U B R O U T I N E =======================================
.text:00405810
.text:00405810
.text:00405810 sub_405810      proc near               ; CODE XREF: sub_4057B0+1A↑p
.text:00405810
.text:00405810 arg_0           = dword ptr  4
.text:00405810 arg_4           = dword ptr  8
.text:00405810
.text:00405810                 push    esi
.text:00405811                 xor     edx, edx
.text:00405813                 push    ebx
.text:00405814                 mov     ecx, [esp+8+arg_4]
.text:00405818                 mov     esi, [esp+8+arg_0]
.text:0040581C                 test    ecx, ecx
.text:0040581E                 lea     ebx, [ecx+esi]
.text:00405821                 jz      short loc_405897
.text:00405823                 cmp     ebx, esi
.text:00405825                 mov     eax, esi
.text:00405827                 sbb     edx, edx
.text:00405829                 or      ebx, edx
.text:0040582B                 test    esi, 3
.text:00405831                 jz      short loc_40584A
.text:00405833                 lea     esi, [esi+0]
.text:00405839                 lea     edi, [edi+0]
.text:00405840
.text:00405840 loc_405840:                             ; CODE XREF: sub_405810+38↓j
.text:00405840                 cmp     byte ptr [eax], 0
.text:00405843                 jz      short loc_40588D
.text:00405845                 inc     eax
.text:00405846                 test    al, 3
.text:00405848                 jnz     short loc_405840
.text:0040584A
.text:0040584A loc_40584A:                             ; CODE XREF: sub_405810+21↑j
.text:0040584A                 cmp     eax, ebx
.text:0040584C                 mov     edx, eax
.text:0040584E                 jnb     short loc_40588D
.text:00405850
.text:00405850 loc_405850:                             ; CODE XREF: sub_405810+7B↓j
.text:00405850                 mov     eax, [edx]
.text:00405852                 add     edx, 4
.text:00405855                 sub     eax, 1010101h
.text:0040585A                 test    eax, 80808080h
.text:0040585F                 jz      short loc_405887
.text:00405861                 cmp     byte ptr [edx-4], 0
.text:00405865                 lea     ecx, [edx-4]
.text:00405868                 mov     eax, ecx
.text:0040586A                 jz      short loc_40588D
.text:0040586C                 cmp     byte ptr [ecx+1], 0
.text:00405870                 lea     eax, [edx-3]
.text:00405873                 jz      short loc_40588D
.text:00405875                 cmp     byte ptr [ecx+2], 0
.text:00405879                 lea     eax, [edx-2]
.text:0040587C                 jz      short loc_40588D
.text:0040587E                 cmp     byte ptr [ecx+3], 0
.text:00405882                 lea     eax, [edx-1]
.text:00405885                 jz      short loc_40588D
.text:00405887
.text:00405887 loc_405887:                             ; CODE XREF: sub_405810+4F↑j
.text:00405887                 cmp     edx, ebx
.text:00405889                 mov     eax, ebx
.text:0040588B                 jb      short loc_405850
.text:0040588D
.text:0040588D loc_40588D:                             ; CODE XREF: sub_405810+33↑j
.text:0040588D                                         ; sub_405810+3E↑j ...
.text:0040588D                 cmp     eax, ebx
.text:0040588F                 jbe     short loc_405893
.text:00405891                 mov     eax, ebx
.text:00405893
.text:00405893 loc_405893:                             ; CODE XREF: sub_405810+7F↑j
.text:00405893                 mov     edx, eax
.text:00405895                 sub     edx, esi
.text:00405897
.text:00405897 loc_405897:                             ; CODE XREF: sub_405810+11↑j
.text:00405897                 pop     ebx
.text:00405898                 mov     eax, edx
.text:0040589A                 pop     esi
.text:0040589B                 retn
.text:0040589B sub_405810      endp
.text:0040589B
.text:0040589B ; ---------------------------------------------------------------------------
.text:0040589C                 align 10h
.text:004058A0
.text:004058A0 ; =============== S U B R O U T I N E =======================================
.text:004058A0
.text:004058A0 ; Attributes: thunk
.text:004058A0
.text:004058A0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:004058A0 mbrtowc         proc near               ; CODE XREF: sub_404150+757↑p
.text:004058A0
.text:004058A0 DstCh           = dword ptr  4
.text:004058A0 SrcCh           = dword ptr  8
.text:004058A0 SizeInBytes     = dword ptr  0Ch
.text:004058A0 State           = dword ptr  10h
.text:004058A0
.text:004058A0                 jmp     ds:__imp_mbrtowc
.text:004058A0 mbrtowc         endp
.text:004058A0
.text:004058A0 ; ---------------------------------------------------------------------------
.text:004058A6                 align 10h
.text:004058B0
.text:004058B0 ; =============== S U B R O U T I N E =======================================
.text:004058B0
.text:004058B0 ; Attributes: bp-based frame
.text:004058B0
.text:004058B0 sub_4058B0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:004058B0                 push    ebp
.text:004058B1                 mov     ecx, offset dword_407000
.text:004058B6                 cmp     ecx, offset dword_407000
.text:004058BC                 mov     ebp, esp
.text:004058BE                 jnb     short loc_4058D6
.text:004058C0
.text:004058C0 loc_4058C0:                             ; CODE XREF: sub_4058B0+24↓j
.text:004058C0                 mov     edx, [ecx+4]
.text:004058C3                 mov     eax, [ecx]
.text:004058C5                 add     ecx, 8
.text:004058C8                 add     [edx+400000h], eax
.text:004058CE                 cmp     ecx, offset dword_407000
.text:004058D4                 jb      short loc_4058C0
.text:004058D6
.text:004058D6 loc_4058D6:                             ; CODE XREF: sub_4058B0+E↑j
.text:004058D6                 pop     ebp
.text:004058D7                 retn
.text:004058D7 sub_4058B0      endp
.text:004058D7
.text:004058D7 ; ---------------------------------------------------------------------------
.text:004058D8                 align 10h
.text:004058E0
.text:004058E0 ; =============== S U B R O U T I N E =======================================
.text:004058E0
.text:004058E0 ; Attributes: bp-based frame
.text:004058E0
.text:004058E0 sub_4058E0      proc near               ; CODE XREF: sub_401080+16↑p
.text:004058E0                                         ; TopLevelExceptionFilter+D7↑p
.text:004058E0                 push    ebp
.text:004058E1                 mov     ebp, esp
.text:004058E3                 fninit
.text:004058E5                 pop     ebp
.text:004058E6                 retn
.text:004058E6 sub_4058E0      endp
.text:004058E6
.text:004058E6 ; ---------------------------------------------------------------------------
.text:004058E7                 align 10h
.text:004058F0
.text:004058F0 ; =============== S U B R O U T I N E =======================================
.text:004058F0
.text:004058F0 ; Attributes: bp-based frame
.text:004058F0
.text:004058F0 ; void __cdecl sub_4058F0()
.text:004058F0 sub_4058F0      proc near               ; DATA XREF: .text:loc_405939↓o
.text:004058F0                                         ; sub_405980:loc_4059AE↓o
.text:004058F0                 push    ebp
.text:004058F1                 mov     ebp, esp
.text:004058F3                 sub     esp, 8
.text:004058F6                 mov     eax, off_406094
.text:004058FB                 mov     edx, [eax]
.text:004058FD                 test    edx, edx
.text:004058FF                 jnz     short loc_405905
.text:00405901
.text:00405901 loc_405901:                             ; CODE XREF: sub_4058F0+2C↓j
.text:00405901                 mov     esp, ebp
.text:00405903                 pop     ebp
.text:00405904                 retn
.text:00405905 ; ---------------------------------------------------------------------------
.text:00405905
.text:00405905 loc_405905:                             ; CODE XREF: sub_4058F0+F↑j
.text:00405905                                         ; sub_4058F0+2A↓j
.text:00405905                 call    dword ptr [eax]
.text:00405907                 mov     edx, off_406094
.text:0040590D                 mov     ecx, [edx+4]
.text:00405910                 lea     eax, [edx+4]
.text:00405913                 mov     off_406094, eax
.text:00405918                 test    ecx, ecx
.text:0040591A                 jnz     short loc_405905
.text:0040591C                 jmp     short loc_405901
.text:0040591C sub_4058F0      endp
.text:0040591C
.text:0040591C ; ---------------------------------------------------------------------------
.text:0040591E                 align 10h
.text:00405920                 push    ebp
.text:00405921                 mov     ebp, esp
.text:00405923                 sub     esp, 8
.text:00405926                 mov     [ebp-4], ebx
.text:00405929                 mov     eax, ds:dword_405E20
.text:0040592E                 cmp     eax, 0FFFFFFFFh
.text:00405931                 jz      short loc_40595C
.text:00405933
.text:00405933 loc_405933:                             ; CODE XREF: .text:00405966↓j
.text:00405933                                         ; .text:00405979↓j
.text:00405933                 test    eax, eax
.text:00405935                 mov     ebx, eax
.text:00405937                 jnz     short loc_405950
.text:00405939
.text:00405939 loc_405939:                             ; CODE XREF: .text:0040595A↓j
.text:00405939                 mov     dword ptr [esp], offset sub_4058F0
.text:00405940                 call    sub_401040
.text:00405945                 mov     ebx, [ebp-4]
.text:00405948                 mov     esp, ebp
.text:0040594A                 pop     ebp
.text:0040594B                 retn
.text:0040594B ; ---------------------------------------------------------------------------
.text:0040594C                 align 10h
.text:00405950
.text:00405950 loc_405950:                             ; CODE XREF: .text:00405937↑j
.text:00405950                                         ; .text:00405958↓j
.text:00405950                 call    ds:dword_405E20[ebx*4]
.text:00405957                 dec     ebx
.text:00405958                 jnz     short loc_405950
.text:0040595A                 jmp     short loc_405939
.text:0040595C ; ---------------------------------------------------------------------------
.text:0040595C
.text:0040595C loc_40595C:                             ; CODE XREF: .text:00405931↑j
.text:0040595C                 mov     ecx, ds:dword_405E24
.text:00405962                 xor     eax, eax
.text:00405964                 test    ecx, ecx
.text:00405966                 jz      short loc_405933
.text:00405968                 mov     edx, offset dword_405E20
.text:0040596D                 lea     esi, [esi+0]
.text:00405970
.text:00405970 loc_405970:                             ; CODE XREF: .text:00405977↓j
.text:00405970                 inc     eax
.text:00405971                 mov     ecx, [edx+eax*4+4]
.text:00405975                 test    ecx, ecx
.text:00405977                 jnz     short loc_405970
.text:00405979                 jmp     short loc_405933
.text:00405979 ; ---------------------------------------------------------------------------
.text:0040597B                 align 10h
.text:00405980
.text:00405980 ; =============== S U B R O U T I N E =======================================
.text:00405980
.text:00405980 ; Attributes: bp-based frame
.text:00405980
.text:00405980 sub_405980      proc near               ; CODE XREF: sub_4016B0+13↑p
.text:00405980
.text:00405980 var_8           = dword ptr -8
.text:00405980 var_4           = dword ptr -4
.text:00405980
.text:00405980                 push    ebp
.text:00405981                 mov     ebp, esp
.text:00405983                 sub     esp, 8
.text:00405986                 mov     [ebp+var_4], ebx
.text:00405989                 mov     edx, dword_406090
.text:0040598F                 test    edx, edx
.text:00405991                 jnz     short loc_4059BA
.text:00405993                 mov     eax, ds:dword_405E20
.text:00405998                 mov     edx, 1
.text:0040599D                 mov     dword_406090, edx
.text:004059A3                 cmp     eax, 0FFFFFFFFh
.text:004059A6                 jz      short loc_4059CD
.text:004059A8
.text:004059A8 loc_4059A8:                             ; CODE XREF: sub_405980+57↓j
.text:004059A8                                         ; sub_405980+69↓j
.text:004059A8                 test    eax, eax
.text:004059AA                 mov     ebx, eax
.text:004059AC                 jnz     short loc_4059C1
.text:004059AE
.text:004059AE loc_4059AE:                             ; CODE XREF: sub_405980+4B↓j
.text:004059AE                 mov     [esp+8+var_8], offset sub_4058F0 ; void (__cdecl *)()
.text:004059B5                 call    sub_401040
.text:004059BA
.text:004059BA loc_4059BA:                             ; CODE XREF: sub_405980+11↑j
.text:004059BA                 mov     ebx, [ebp+var_4]
.text:004059BD                 mov     esp, ebp
.text:004059BF                 pop     ebp
.text:004059C0                 retn
.text:004059C1 ; ---------------------------------------------------------------------------
.text:004059C1
.text:004059C1 loc_4059C1:                             ; CODE XREF: sub_405980+2C↑j
.text:004059C1                                         ; sub_405980+49↓j
.text:004059C1                 call    ds:dword_405E20[ebx*4]
.text:004059C8                 dec     ebx
.text:004059C9                 jnz     short loc_4059C1
.text:004059CB                 jmp     short loc_4059AE
.text:004059CD ; ---------------------------------------------------------------------------
.text:004059CD
.text:004059CD loc_4059CD:                             ; CODE XREF: sub_405980+26↑j
.text:004059CD                 mov     ecx, ds:dword_405E24
.text:004059D3                 xor     eax, eax
.text:004059D5                 test    ecx, ecx
.text:004059D7                 jz      short loc_4059A8
.text:004059D9                 mov     edx, offset dword_405E20
.text:004059DE                 mov     esi, esi
.text:004059E0
.text:004059E0 loc_4059E0:                             ; CODE XREF: sub_405980+67↓j
.text:004059E0                 inc     eax
.text:004059E1                 mov     ebx, [edx+eax*4+4]
.text:004059E5                 test    ebx, ebx
.text:004059E7                 jnz     short loc_4059E0
.text:004059E9                 jmp     short loc_4059A8
.text:004059E9 sub_405980      endp
.text:004059E9
.text:004059E9 ; ---------------------------------------------------------------------------
.text:004059EB                 align 10h
.text:004059F0
.text:004059F0 ; =============== S U B R O U T I N E =======================================
.text:004059F0
.text:004059F0 ; Attributes: bp-based frame
.text:004059F0
.text:004059F0 sub_4059F0      proc near               ; CODE XREF: sub_4020A0+1C5↑p
.text:004059F0
.text:004059F0 var_34          = dword ptr -34h
.text:004059F0 var_2C          = dword ptr -2Ch
.text:004059F0 var_28          = dword ptr -28h
.text:004059F0 var_24          = dword ptr -24h
.text:004059F0 var_20          = dword ptr -20h
.text:004059F0 var_1C          = dword ptr -1Ch
.text:004059F0 var_18          = dword ptr -18h
.text:004059F0 var_14          = dword ptr -14h
.text:004059F0 arg_0           = dword ptr  8
.text:004059F0 arg_4           = dword ptr  0Ch
.text:004059F0 arg_8           = dword ptr  10h
.text:004059F0 arg_C           = dword ptr  14h
.text:004059F0
.text:004059F0                 push    ebp
.text:004059F1                 mov     ebp, esp
.text:004059F3                 push    edi
.text:004059F4                 push    esi
.text:004059F5                 push    ebx
.text:004059F6                 sub     esp, 2Ch
.text:004059F9                 mov     edx, [ebp+arg_C]
.text:004059FC                 mov     [ebp+var_20], 0
.text:00405A03                 mov     ecx, [ebp+arg_0]
.text:00405A06                 mov     ebx, [ebp+arg_4]
.text:00405A09                 mov     [ebp+var_1C], 0
.text:00405A10                 mov     eax, [ebp+arg_8]
.text:00405A13                 test    edx, edx
.text:00405A15                 mov     [ebp+var_24], edx
.text:00405A18                 mov     edi, ebx
.text:00405A1A                 mov     esi, eax
.text:00405A1C                 mov     [ebp+var_28], ecx
.text:00405A1F                 jnz     short loc_405A80
.text:00405A21                 cmp     eax, ebx
.text:00405A23                 jbe     short loc_405A60
.text:00405A25                 mov     eax, ecx
.text:00405A27                 mov     edx, ebx
.text:00405A29                 div     esi
.text:00405A2B
.text:00405A2B loc_405A2B:                             ; CODE XREF: sub_4059F0+8B↓j
.text:00405A2B                 mov     [ebp+var_28], edx
.text:00405A2E                 lea     ecx, [ebp+var_18]
.text:00405A31                 test    ecx, ecx
.text:00405A33                 jz      short loc_405A4E
.text:00405A35                 mov     [ebp+var_1C], 0
.text:00405A3C
.text:00405A3C loc_405A3C:                             ; CODE XREF: sub_4059F0+DA↓j
.text:00405A3C                 mov     eax, [ebp+var_28]
.text:00405A3F                 mov     [ebp+var_20], eax
.text:00405A42                 mov     edx, [ebp+var_20]
.text:00405A45                 mov     ecx, [ebp+var_1C]
.text:00405A48                 mov     [ebp+var_18], edx
.text:00405A4B                 mov     [ebp+var_14], ecx
.text:00405A4E
.text:00405A4E loc_405A4E:                             ; CODE XREF: sub_4059F0+43↑j
.text:00405A4E                                         ; sub_4059F0+A7↓j ...
.text:00405A4E                 mov     eax, [ebp+var_18]
.text:00405A51                 mov     edx, [ebp+var_14]
.text:00405A54                 add     esp, 2Ch
.text:00405A57                 pop     ebx
.text:00405A58                 pop     esi
.text:00405A59                 pop     edi
.text:00405A5A                 pop     ebp
.text:00405A5B                 retn
.text:00405A5B ; ---------------------------------------------------------------------------
.text:00405A5C                 align 10h
.text:00405A60
.text:00405A60 loc_405A60:                             ; CODE XREF: sub_4059F0+33↑j
.text:00405A60                 test    eax, eax
.text:00405A62                 jnz     short loc_405A6F
.text:00405A64                 mov     eax, 1
.text:00405A69                 xor     edx, edx
.text:00405A6B                 div     esi
.text:00405A6D                 mov     esi, eax
.text:00405A6F
.text:00405A6F loc_405A6F:                             ; CODE XREF: sub_4059F0+72↑j
.text:00405A6F                 mov     eax, edi
.text:00405A71                 mov     edx, [ebp+var_24]
.text:00405A74                 div     esi
.text:00405A76                 mov     eax, [ebp+var_28]
.text:00405A79                 div     esi
.text:00405A7B                 jmp     short loc_405A2B
.text:00405A7B ; ---------------------------------------------------------------------------
.text:00405A7D                 align 10h
.text:00405A80
.text:00405A80 loc_405A80:                             ; CODE XREF: sub_4059F0+2F↑j
.text:00405A80                 cmp     [ebp+var_24], ebx
.text:00405A83                 jbe     short loc_405AA0
.text:00405A85                 mov     [ebp+var_20], ecx
.text:00405A88
.text:00405A88 loc_405A88:                             ; CODE XREF: sub_4059F0+15B↓j
.text:00405A88                 mov     [ebp+var_1C], edi
.text:00405A8B                 mov     eax, [ebp+var_20]
.text:00405A8E                 mov     edx, [ebp+var_1C]
.text:00405A91                 mov     [ebp+var_18], eax
.text:00405A94                 mov     [ebp+var_14], edx
.text:00405A97                 jmp     short loc_405A4E
.text:00405A97 ; ---------------------------------------------------------------------------
.text:00405A99                 align 10h
.text:00405AA0
.text:00405AA0 loc_405AA0:                             ; CODE XREF: sub_4059F0+93↑j
.text:00405AA0                 bsr     eax, [ebp+var_24]
.text:00405AA4                 mov     ebx, eax
.text:00405AA6                 xor     ebx, 1Fh
.text:00405AA9                 jnz     short loc_405AD0
.text:00405AAB                 cmp     edi, [ebp+var_24]
.text:00405AAE                 ja      short loc_405AB5
.text:00405AB0                 cmp     [ebp+var_28], esi
.text:00405AB3                 jb      short loc_405AC0
.text:00405AB5
.text:00405AB5 loc_405AB5:                             ; CODE XREF: sub_4059F0+BE↑j
.text:00405AB5                 mov     edx, [ebp+var_28]
.text:00405AB8                 sub     edx, esi
.text:00405ABA                 sbb     edi, [ebp+var_24]
.text:00405ABD                 mov     [ebp+var_28], edx
.text:00405AC0
.text:00405AC0 loc_405AC0:                             ; CODE XREF: sub_4059F0+C3↑j
.text:00405AC0                 lea     ecx, [ebp+var_18]
.text:00405AC3                 test    ecx, ecx
.text:00405AC5                 jz      short loc_405A4E
.text:00405AC7                 mov     [ebp+var_1C], edi
.text:00405ACA                 jmp     loc_405A3C
.text:00405ACA ; ---------------------------------------------------------------------------
.text:00405ACF                 align 10h
.text:00405AD0
.text:00405AD0 loc_405AD0:                             ; CODE XREF: sub_4059F0+B9↑j
.text:00405AD0                 mov     edx, [ebp+var_24]
.text:00405AD3                 mov     eax, 20h ; ' '
.text:00405AD8                 mov     cl, bl
.text:00405ADA                 sub     eax, ebx
.text:00405ADC                 mov     [ebp+var_2C], eax
.text:00405ADF                 shl     edx, cl
.text:00405AE1                 mov     eax, esi
.text:00405AE3                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00405AE7                 shr     eax, cl
.text:00405AE9                 mov     cl, bl
.text:00405AEB                 shl     esi, cl
.text:00405AED                 or      edx, eax
.text:00405AEF                 mov     eax, [ebp+var_28]
.text:00405AF2                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00405AF6                 mov     [ebp+var_24], edx
.text:00405AF9                 mov     edx, edi
.text:00405AFB                 shr     edx, cl
.text:00405AFD                 mov     cl, bl
.text:00405AFF                 shl     edi, cl
.text:00405B01                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00405B05                 shr     eax, cl
.text:00405B07                 or      edi, eax
.text:00405B09                 mov     eax, edi
.text:00405B0B                 mov     cl, bl
.text:00405B0D                 div     [ebp+var_24]
.text:00405B10                 shl     [ebp+var_28], cl
.text:00405B13                 mov     edi, edx
.text:00405B15                 mul     esi
.text:00405B17                 mov     [ebp+var_34], eax
.text:00405B1A                 cmp     edx, edi
.text:00405B1C                 ja      short loc_405B58
.text:00405B1E                 cmp     edx, edi
.text:00405B20                 jz      short loc_405B50
.text:00405B22
.text:00405B22 loc_405B22:                             ; CODE XREF: sub_4059F0+166↓j
.text:00405B22                                         ; sub_4059F0+173↓j
.text:00405B22                 lea     eax, [ebp+var_18]
.text:00405B25                 test    eax, eax
.text:00405B27                 jz      loc_405A4E
.text:00405B2D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00405B31                 mov     eax, [ebp+var_28]
.text:00405B34                 sub     eax, [ebp+var_34]
.text:00405B37                 sbb     edi, edx
.text:00405B39                 mov     [ebp+var_28], eax
.text:00405B3C                 mov     edx, edi
.text:00405B3E                 shl     edx, cl
.text:00405B40                 mov     cl, bl
.text:00405B42                 shr     eax, cl
.text:00405B44                 or      edx, eax
.text:00405B46                 mov     [ebp+var_20], edx
.text:00405B49                 shr     edi, cl
.text:00405B4B                 jmp     loc_405A88
.text:00405B50 ; ---------------------------------------------------------------------------
.text:00405B50
.text:00405B50 loc_405B50:                             ; CODE XREF: sub_4059F0+130↑j
.text:00405B50                 mov     eax, [ebp+var_28]
.text:00405B53                 cmp     [ebp+var_34], eax
.text:00405B56                 jbe     short loc_405B22
.text:00405B58
.text:00405B58 loc_405B58:                             ; CODE XREF: sub_4059F0+12C↑j
.text:00405B58                 mov     ecx, [ebp+var_34]
.text:00405B5B                 sub     ecx, esi
.text:00405B5D                 sbb     edx, [ebp+var_24]
.text:00405B60                 mov     [ebp+var_34], ecx
.text:00405B63                 jmp     short loc_405B22
.text:00405B63 sub_4059F0      endp
.text:00405B63
.text:00405B63 ; ---------------------------------------------------------------------------
.text:00405B65                 align 10h
.text:00405B70
.text:00405B70 ; =============== S U B R O U T I N E =======================================
.text:00405B70
.text:00405B70 ; Attributes: info_from_lumina
.text:00405B70
.text:00405B70 ; void *__cdecl _alloca(size_t Size)
.text:00405B70 __alloca        proc near               ; CODE XREF: sub_4016B0+E↑p
.text:00405B70                 push    ecx
.text:00405B71                 mov     ecx, esp
.text:00405B73                 add     ecx, 8
.text:00405B76
.text:00405B76 loc_405B76:                             ; CODE XREF: __alloca+1B↓j
.text:00405B76                 cmp     eax, 1000h
.text:00405B7B                 jb      short loc_405B8D
.text:00405B7D                 sub     ecx, 1000h
.text:00405B83                 or      dword ptr [ecx], 0
.text:00405B86                 sub     eax, 1000h
.text:00405B8B                 jmp     short loc_405B76
.text:00405B8D ; ---------------------------------------------------------------------------
.text:00405B8D
.text:00405B8D loc_405B8D:                             ; CODE XREF: __alloca+B↑j
.text:00405B8D                 sub     ecx, eax
.text:00405B8F                 or      dword ptr [ecx], 0
.text:00405B92                 mov     eax, esp
.text:00405B94                 mov     esp, ecx
.text:00405B96                 mov     ecx, [eax]
.text:00405B98                 mov     eax, [eax+4]
.text:00405B9B                 jmp     eax
.text:00405B9B __alloca        endp
.text:00405B9B
.text:00405B9B ; ---------------------------------------------------------------------------
.text:00405B9D                 align 10h
.text:00405BA0
.text:00405BA0 ; =============== S U B R O U T I N E =======================================
.text:00405BA0
.text:00405BA0 ; Attributes: thunk
.text:00405BA0
.text:00405BA0 ; int __cdecl isatty(int FileHandle)
.text:00405BA0 _isatty         proc near               ; CODE XREF: sub_4020A0+25↑p
.text:00405BA0                                         ; sub_4020A0+30B↑p ...
.text:00405BA0
.text:00405BA0 FileHandle      = dword ptr  4
.text:00405BA0
.text:00405BA0                 jmp     ds:__imp__isatty
.text:00405BA0 _isatty         endp
.text:00405BA0
.text:00405BA0 ; ---------------------------------------------------------------------------
.text:00405BA6                 align 10h
.text:00405BB0                 jmp     ds:__set_app_type
.text:00405BB0 ; ---------------------------------------------------------------------------
.text:00405BB6                 align 10h
.text:00405BC0
.text:00405BC0 ; =============== S U B R O U T I N E =======================================
.text:00405BC0
.text:00405BC0 ; Attributes: thunk
.text:00405BC0
.text:00405BC0 ; void __cdecl cexit()
.text:00405BC0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00405BC0                 jmp     ds:__imp__cexit
.text:00405BC0 _cexit          endp
.text:00405BC0
.text:00405BC0 ; ---------------------------------------------------------------------------
.text:00405BC6                 align 10h
.text:00405BD0
.text:00405BD0 ; =============== S U B R O U T I N E =======================================
.text:00405BD0
.text:00405BD0 ; Attributes: thunk
.text:00405BD0
.text:00405BD0 ; char ***__cdecl _p__environ()
.text:00405BD0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00405BD0                 jmp     ds:__imp___p__environ
.text:00405BD0 __p__environ    endp
.text:00405BD0
.text:00405BD0 ; ---------------------------------------------------------------------------
.text:00405BD6                 align 10h
.text:00405BE0
.text:00405BE0 ; =============== S U B R O U T I N E =======================================
.text:00405BE0
.text:00405BE0 ; Attributes: thunk
.text:00405BE0
.text:00405BE0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00405BE0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00405BE0                                         ; TopLevelExceptionFilter+88↑p ...
.text:00405BE0
.text:00405BE0 Signal          = dword ptr  4
.text:00405BE0 Function        = dword ptr  8
.text:00405BE0
.text:00405BE0                 jmp     ds:__imp_signal
.text:00405BE0 signal          endp
.text:00405BE0
.text:00405BE0 ; ---------------------------------------------------------------------------
.text:00405BE6                 align 10h
.text:00405BF0
.text:00405BF0 ; =============== S U B R O U T I N E =======================================
.text:00405BF0
.text:00405BF0 ; Attributes: thunk
.text:00405BF0
.text:00405BF0 ; int *__cdecl _p__fmode()
.text:00405BF0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00405BF0                 jmp     ds:__imp___p__fmode
.text:00405BF0 __p__fmode      endp
.text:00405BF0
.text:00405BF0 ; ---------------------------------------------------------------------------
.text:00405BF6                 align 10h
.text:00405C00
.text:00405C00 ; =============== S U B R O U T I N E =======================================
.text:00405C00
.text:00405C00 ; Attributes: thunk
.text:00405C00
.text:00405C00 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00405C00 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00405C00                                         ; sub_401080+90↑p ...
.text:00405C00
.text:00405C00 FileHandle      = dword ptr  4
.text:00405C00 Mode            = dword ptr  8
.text:00405C00
.text:00405C00                 jmp     ds:__imp__setmode
.text:00405C00 _setmode        endp
.text:00405C00
.text:00405C00 ; ---------------------------------------------------------------------------
.text:00405C06                 align 10h
.text:00405C10
.text:00405C10 ; =============== S U B R O U T I N E =======================================
.text:00405C10
.text:00405C10 ; Attributes: thunk
.text:00405C10
.text:00405C10 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00405C10                 jmp     ds:__imp___getmainargs
.text:00405C10 __getmainargs   endp
.text:00405C10
.text:00405C10 ; ---------------------------------------------------------------------------
.text:00405C16                 align 10h
.text:00405C20
.text:00405C20 ; =============== S U B R O U T I N E =======================================
.text:00405C20
.text:00405C20 ; Attributes: thunk
.text:00405C20
.text:00405C20 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00405C20 setlocale       proc near               ; CODE XREF: sub_4016B0+3A↑p
.text:00405C20
.text:00405C20 Category        = dword ptr  4
.text:00405C20 Locale          = dword ptr  8
.text:00405C20
.text:00405C20                 jmp     ds:__imp_setlocale
.text:00405C20 setlocale       endp
.text:00405C20
.text:00405C20 ; ---------------------------------------------------------------------------
.text:00405C26                 align 10h
.text:00405C30
.text:00405C30 ; =============== S U B R O U T I N E =======================================
.text:00405C30
.text:00405C30 ; Attributes: thunk
.text:00405C30
.text:00405C30 ; int __cdecl fclose(FILE *Stream)
.text:00405C30 fclose          proc near               ; CODE XREF: sub_4016B0+48B↑p
.text:00405C30                                         ; sub_402460+26↑p ...
.text:00405C30
.text:00405C30 Stream          = dword ptr  4
.text:00405C30
.text:00405C30                 jmp     ds:__imp_fclose
.text:00405C30 fclose          endp
.text:00405C30
.text:00405C30 ; ---------------------------------------------------------------------------
.text:00405C36                 align 10h
.text:00405C40
.text:00405C40 ; =============== S U B R O U T I N E =======================================
.text:00405C40
.text:00405C40 ; Attributes: thunk
.text:00405C40
.text:00405C40 ; void __cdecl clearerr(FILE *Stream)
.text:00405C40 clearerr        proc near               ; CODE XREF: sub_402460+D9↑p
.text:00405C40
.text:00405C40 Stream          = dword ptr  4
.text:00405C40
.text:00405C40                 jmp     ds:__imp_clearerr
.text:00405C40 clearerr        endp
.text:00405C40
.text:00405C40 ; ---------------------------------------------------------------------------
.text:00405C46                 align 10h
.text:00405C50
.text:00405C50 ; =============== S U B R O U T I N E =======================================
.text:00405C50
.text:00405C50 ; Attributes: thunk
.text:00405C50
.text:00405C50 ; int *__cdecl errno()
.text:00405C50 _errno          proc near               ; CODE XREF: sub_4016B0+494↑p
.text:00405C50                                         ; sub_4020A0+120↑p ...
.text:00405C50                 jmp     ds:__imp__errno
.text:00405C50 _errno          endp
.text:00405C50
.text:00405C50 ; ---------------------------------------------------------------------------
.text:00405C56                 align 10h
.text:00405C60
.text:00405C60 ; =============== S U B R O U T I N E =======================================
.text:00405C60
.text:00405C60 ; Attributes: thunk
.text:00405C60
.text:00405C60 ; void __cdecl free(void *Block)
.text:00405C60 free            proc near               ; CODE XREF: sub_401DF0+14E↑p
.text:00405C60                                         ; sub_405290+112↑p
.text:00405C60
.text:00405C60 Block           = dword ptr  4
.text:00405C60
.text:00405C60                 jmp     ds:__imp_free
.text:00405C60 free            endp
.text:00405C60
.text:00405C60 ; ---------------------------------------------------------------------------
.text:00405C66                 align 10h
.text:00405C70
.text:00405C70 ; =============== S U B R O U T I N E =======================================
.text:00405C70
.text:00405C70 ; Attributes: thunk
.text:00405C70
.text:00405C70 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:00405C70 strspn          proc near               ; CODE XREF: sub_401DF0+FF↑p
.text:00405C70
.text:00405C70 Str             = dword ptr  4
.text:00405C70 Control         = dword ptr  8
.text:00405C70
.text:00405C70                 jmp     ds:__imp_strspn
.text:00405C70 strspn          endp
.text:00405C70
.text:00405C70 ; ---------------------------------------------------------------------------
.text:00405C76                 align 10h
.text:00405C80
.text:00405C80 ; =============== S U B R O U T I N E =======================================
.text:00405C80
.text:00405C80 ; Attributes: noreturn thunk
.text:00405C80
.text:00405C80 ; void __cdecl __noreturn exit(int Code)
.text:00405C80 exit            proc near               ; CODE XREF: sub_4016B0:loc_4018F3↑p
.text:00405C80                                         ; .text:00401C7B↑p ...
.text:00405C80
.text:00405C80 Code            = dword ptr  4
.text:00405C80
.text:00405C80                 jmp     ds:__imp_exit
.text:00405C80 exit            endp
.text:00405C80
.text:00405C80 ; ---------------------------------------------------------------------------
.text:00405C86                 align 10h
.text:00405C90
.text:00405C90 ; =============== S U B R O U T I N E =======================================
.text:00405C90
.text:00405C90 ; Attributes: thunk
.text:00405C90
.text:00405C90 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00405C90 fputs           proc near               ; CODE XREF: sub_4016B0+170↑p
.text:00405C90                                         ; sub_4016B0+192↑p ...
.text:00405C90
.text:00405C90 Buffer          = dword ptr  4
.text:00405C90 Stream          = dword ptr  8
.text:00405C90
.text:00405C90                 jmp     ds:__imp_fputs
.text:00405C90 fputs           endp
.text:00405C90
.text:00405C90 ; ---------------------------------------------------------------------------
.text:00405C96                 align 10h
.text:00405CA0
.text:00405CA0 ; =============== S U B R O U T I N E =======================================
.text:00405CA0
.text:00405CA0 ; Attributes: thunk
.text:00405CA0
.text:00405CA0 ; int printf(const char *const Format, ...)
.text:00405CA0 printf          proc near               ; CODE XREF: sub_4016B0+14E↑p
.text:00405CA0                                         ; sub_4016B0+237↑p ...
.text:00405CA0
.text:00405CA0 Format          = dword ptr  4
.text:00405CA0
.text:00405CA0                 jmp     ds:__imp_printf
.text:00405CA0 printf          endp
.text:00405CA0
.text:00405CA0 ; ---------------------------------------------------------------------------
.text:00405CA6                 align 10h
.text:00405CB0
.text:00405CB0 ; =============== S U B R O U T I N E =======================================
.text:00405CB0
.text:00405CB0 ; Attributes: thunk
.text:00405CB0
.text:00405CB0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00405CB0 fprintf         proc near               ; CODE XREF: sub_4016B0+2BD↑p
.text:00405CB0                                         ; .text:00401C73↑p ...
.text:00405CB0
.text:00405CB0 Stream          = dword ptr  4
.text:00405CB0 Format          = dword ptr  8
.text:00405CB0
.text:00405CB0                 jmp     ds:__imp_fprintf
.text:00405CB0 fprintf         endp
.text:00405CB0
.text:00405CB0 ; ---------------------------------------------------------------------------
.text:00405CB6                 align 10h
.text:00405CC0
.text:00405CC0 ; =============== S U B R O U T I N E =======================================
.text:00405CC0
.text:00405CC0 ; Attributes: thunk
.text:00405CC0
.text:00405CC0 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00405CC0 fopen           proc near               ; CODE XREF: sub_402460+58↑p
.text:00405CC0
.text:00405CC0 FileName        = dword ptr  4
.text:00405CC0 Mode            = dword ptr  8
.text:00405CC0
.text:00405CC0                 jmp     ds:__imp_fopen
.text:00405CC0 fopen           endp
.text:00405CC0
.text:00405CC0 ; ---------------------------------------------------------------------------
.text:00405CC6                 align 10h
.text:00405CD0
.text:00405CD0 ; =============== S U B R O U T I N E =======================================
.text:00405CD0
.text:00405CD0 ; Attributes: thunk
.text:00405CD0
.text:00405CD0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00405CD0 _flsbuf         proc near               ; CODE XREF: sub_4020A0+108↑p
.text:00405CD0                                         ; sub_4020A0+262↑p ...
.text:00405CD0
.text:00405CD0 File            = dword ptr  8
.text:00405CD0
.text:00405CD0                 jmp     ds:__imp__flsbuf
.text:00405CD0 _flsbuf         endp
.text:00405CD0
.text:00405CD0 ; ---------------------------------------------------------------------------
.text:00405CD6                 align 10h
.text:00405CE0
.text:00405CE0 ; =============== S U B R O U T I N E =======================================
.text:00405CE0
.text:00405CE0 ; Attributes: thunk
.text:00405CE0
.text:00405CE0 ; int __cdecl filbuf(FILE *File)
.text:00405CE0 _filbuf         proc near               ; CODE XREF: sub_4020A0+35F↑p
.text:00405CE0
.text:00405CE0 File            = dword ptr  4
.text:00405CE0
.text:00405CE0                 jmp     ds:__imp__filbuf
.text:00405CE0 _filbuf         endp
.text:00405CE0
.text:00405CE0 ; ---------------------------------------------------------------------------
.text:00405CE6                 align 10h
.text:00405CF0
.text:00405CF0 ; =============== S U B R O U T I N E =======================================
.text:00405CF0
.text:00405CF0 ; Attributes: thunk
.text:00405CF0
.text:00405CF0 ; size_t __cdecl strlen(const char *Str)
.text:00405CF0 strlen          proc near               ; CODE XREF: sub_4027D0+2A9↑p
.text:00405CF0                                         ; sub_4027D0+346↑p ...
.text:00405CF0
.text:00405CF0 Str             = dword ptr  4
.text:00405CF0
.text:00405CF0                 jmp     ds:__imp_strlen
.text:00405CF0 strlen          endp
.text:00405CF0
.text:00405CF0 ; ---------------------------------------------------------------------------
.text:00405CF6                 align 10h
.text:00405D00
.text:00405D00 ; =============== S U B R O U T I N E =======================================
.text:00405D00
.text:00405D00 ; Attributes: thunk
.text:00405D00
.text:00405D00 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00405D00 strncmp         proc near               ; CODE XREF: sub_4027D0+23F↑p
.text:00405D00                                         ; sub_4027D0+699↑p
.text:00405D00
.text:00405D00 Str1            = dword ptr  4
.text:00405D00 Str2            = dword ptr  8
.text:00405D00 MaxCount        = dword ptr  0Ch
.text:00405D00
.text:00405D00                 jmp     ds:__imp_strncmp
.text:00405D00 strncmp         endp
.text:00405D00
.text:00405D00 ; ---------------------------------------------------------------------------
.text:00405D06                 align 10h
.text:00405D10
.text:00405D10 ; =============== S U B R O U T I N E =======================================
.text:00405D10
.text:00405D10 ; Attributes: thunk
.text:00405D10
.text:00405D10 ; char *__cdecl getenv(const char *VarName)
.text:00405D10 getenv          proc near               ; CODE XREF: sub_4027D0+B57↑p
.text:00405D10                                         ; sub_4035B0+13↑p
.text:00405D10
.text:00405D10 VarName         = dword ptr  4
.text:00405D10
.text:00405D10                 jmp     ds:__imp_getenv
.text:00405D10 getenv          endp
.text:00405D10
.text:00405D10 ; ---------------------------------------------------------------------------
.text:00405D16                 align 10h
.text:00405D20
.text:00405D20 ; =============== S U B R O U T I N E =======================================
.text:00405D20
.text:00405D20 ; Attributes: thunk
.text:00405D20
.text:00405D20 ; char *__cdecl strchr(const char *Str, int Val)
.text:00405D20 strchr          proc near               ; CODE XREF: sub_4027D0+469↑p
.text:00405D20                                         ; sub_4027D0+53A↑p ...
.text:00405D20
.text:00405D20 Str             = dword ptr  4
.text:00405D20 Val             = dword ptr  8
.text:00405D20
.text:00405D20                 jmp     ds:__imp_strchr
.text:00405D20 strchr          endp
.text:00405D20
.text:00405D20 ; ---------------------------------------------------------------------------
.text:00405D26                 align 10h
.text:00405D30
.text:00405D30 ; =============== S U B R O U T I N E =======================================
.text:00405D30
.text:00405D30 ; Attributes: thunk
.text:00405D30
.text:00405D30 ; int __cdecl strtol(const char *String, char **EndPtr, int Radix)
.text:00405D30 strtol          proc near               ; CODE XREF: sub_4035B0+43↑p
.text:00405D30
.text:00405D30 String          = dword ptr  4
.text:00405D30 EndPtr          = dword ptr  8
.text:00405D30 Radix           = dword ptr  0Ch
.text:00405D30
.text:00405D30                 jmp     ds:__imp_strtol
.text:00405D30 strtol          endp
.text:00405D30
.text:00405D30 ; ---------------------------------------------------------------------------
.text:00405D36                 align 10h
.text:00405D40
.text:00405D40 ; =============== S U B R O U T I N E =======================================
.text:00405D40
.text:00405D40 ; Attributes: thunk
.text:00405D40
.text:00405D40 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00405D40 vfprintf        proc near               ; CODE XREF: sub_403900+C1↑p
.text:00405D40                                         ; sub_405510+49↑p ...
.text:00405D40
.text:00405D40 Stream          = dword ptr  4
.text:00405D40 Format          = dword ptr  8
.text:00405D40 ArgList         = dword ptr  0Ch
.text:00405D40
.text:00405D40                 jmp     ds:__imp_vfprintf
.text:00405D40 vfprintf        endp
.text:00405D40
.text:00405D40 ; ---------------------------------------------------------------------------
.text:00405D46                 align 10h
.text:00405D50
.text:00405D50 ; =============== S U B R O U T I N E =======================================
.text:00405D50
.text:00405D50 ; Attributes: noreturn thunk
.text:00405D50
.text:00405D50 ; void __cdecl __noreturn abort()
.text:00405D50 abort           proc near               ; CODE XREF: sub_403900:loc_40399C↑p
.text:00405D50                                         ; sub_405290:loc_40544A↑p ...
.text:00405D50                 jmp     ds:__imp_abort
.text:00405D50 abort           endp
.text:00405D50
.text:00405D50 ; ---------------------------------------------------------------------------
.text:00405D56                 align 10h
.text:00405D60
.text:00405D60 ; =============== S U B R O U T I N E =======================================
.text:00405D60
.text:00405D60 ; Attributes: thunk
.text:00405D60
.text:00405D60 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00405D60 memcpy          proc near               ; CODE XREF: .text:00403FD8↑p
.text:00405D60                                         ; .text:00404021↑p ...
.text:00405D60
.text:00405D60 Src             = dword ptr  8
.text:00405D60 Size            = dword ptr  0Ch
.text:00405D60
.text:00405D60                 jmp     ds:__imp_memcpy
.text:00405D60 memcpy          endp
.text:00405D60
.text:00405D60 ; ---------------------------------------------------------------------------
.text:00405D66                 align 10h
.text:00405D70
.text:00405D70 ; =============== S U B R O U T I N E =======================================
.text:00405D70
.text:00405D70 ; Attributes: thunk
.text:00405D70
.text:00405D70 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00405D70 memset          proc near               ; CODE XREF: .text:00403F56↑p
.text:00405D70
.text:00405D70 Val             = dword ptr  8
.text:00405D70 Size            = dword ptr  0Ch
.text:00405D70
.text:00405D70                 jmp     ds:__imp_memset
.text:00405D70 memset          endp
.text:00405D70
.text:00405D70 ; ---------------------------------------------------------------------------
.text:00405D76                 align 10h
.text:00405D80
.text:00405D80 ; =============== S U B R O U T I N E =======================================
.text:00405D80
.text:00405D80 ; Attributes: thunk
.text:00405D80
.text:00405D80 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00405D80 calloc          proc near               ; CODE XREF: .text:00403F93↑p
.text:00405D80
.text:00405D80 Count           = dword ptr  4
.text:00405D80 Size            = dword ptr  8
.text:00405D80
.text:00405D80                 jmp     ds:__imp_calloc
.text:00405D80 calloc          endp
.text:00405D80
.text:00405D80 ; ---------------------------------------------------------------------------
.text:00405D86                 align 10h
.text:00405D90
.text:00405D90 ; =============== S U B R O U T I N E =======================================
.text:00405D90
.text:00405D90 ; Attributes: thunk
.text:00405D90
.text:00405D90 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00405D90 realloc         proc near               ; CODE XREF: .text:00403E90↑p
.text:00405D90                                         ; sub_403EC0+16↑p ...
.text:00405D90
.text:00405D90 Block           = dword ptr  4
.text:00405D90 Size            = dword ptr  8
.text:00405D90
.text:00405D90                 jmp     ds:__imp_realloc
.text:00405D90 realloc         endp
.text:00405D90
.text:00405D90 ; ---------------------------------------------------------------------------
.text:00405D96                 align 10h
.text:00405DA0
.text:00405DA0 ; =============== S U B R O U T I N E =======================================
.text:00405DA0
.text:00405DA0 ; Attributes: thunk
.text:00405DA0
.text:00405DA0 ; void *__cdecl malloc(size_t Size)
.text:00405DA0 malloc          proc near               ; CODE XREF: sub_403DF0+24↑p
.text:00405DA0                                         ; sub_403E30+E↑p ...
.text:00405DA0
.text:00405DA0 Size            = dword ptr  4
.text:00405DA0
.text:00405DA0                 jmp     ds:__imp_malloc
.text:00405DA0 malloc          endp
.text:00405DA0
.text:00405DA0 ; ---------------------------------------------------------------------------
.text:00405DA6                 align 10h
.text:00405DB0
.text:00405DB0 ; =============== S U B R O U T I N E =======================================
.text:00405DB0
.text:00405DB0 ; Attributes: thunk
.text:00405DB0
.text:00405DB0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00405DB0 iswctype        proc near               ; CODE XREF: sub_404150+78B↑p
.text:00405DB0
.text:00405DB0 C               = word ptr  4
.text:00405DB0 Type            = word ptr  8
.text:00405DB0
.text:00405DB0                 jmp     ds:__imp_iswctype
.text:00405DB0 iswctype        endp
.text:00405DB0
.text:00405DB0 ; ---------------------------------------------------------------------------
.text:00405DB6                 align 10h
.text:00405DC0
.text:00405DC0 ; =============== S U B R O U T I N E =======================================
.text:00405DC0
.text:00405DC0 ; Attributes: thunk
.text:00405DC0
.text:00405DC0 ; int __cdecl isctype(int C, int Type)
.text:00405DC0 _isctype        proc near               ; CODE XREF: sub_404150+610↑p
.text:00405DC0
.text:00405DC0 C               = dword ptr  4
.text:00405DC0 Type            = dword ptr  8
.text:00405DC0
.text:00405DC0                 jmp     ds:__imp__isctype
.text:00405DC0 _isctype        endp
.text:00405DC0
.text:00405DC0 ; ---------------------------------------------------------------------------
.text:00405DC6                 align 10h
.text:00405DD0
.text:00405DD0 ; =============== S U B R O U T I N E =======================================
.text:00405DD0
.text:00405DD0 ; Attributes: thunk
.text:00405DD0
.text:00405DD0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00405DD0 strcmp          proc near               ; CODE XREF: sub_405614+180↑p
.text:00405DD0
.text:00405DD0 Str1            = dword ptr  4
.text:00405DD0 Str2            = dword ptr  8
.text:00405DD0
.text:00405DD0                 jmp     ds:__imp_strcmp
.text:00405DD0 strcmp          endp
.text:00405DD0
.text:00405DD0 ; ---------------------------------------------------------------------------
.text:00405DD6                 align 10h
.text:00405DE0
.text:00405DE0 ; =============== S U B R O U T I N E =======================================
.text:00405DE0
.text:00405DE0 ; Attributes: thunk
.text:00405DE0
.text:00405DE0 ; int __cdecl fflush(FILE *Stream)
.text:00405DE0 fflush          proc near               ; CODE XREF: sub_405510+19↑p
.text:00405DE0                                         ; sub_405510+81↑p ...
.text:00405DE0
.text:00405DE0 Stream          = dword ptr  4
.text:00405DE0
.text:00405DE0                 jmp     ds:__imp_fflush
.text:00405DE0 fflush          endp
.text:00405DE0
.text:00405DE0 ; ---------------------------------------------------------------------------
.text:00405DE6                 align 10h
.text:00405DF0
.text:00405DF0 ; =============== S U B R O U T I N E =======================================
.text:00405DF0
.text:00405DF0 ; Attributes: thunk
.text:00405DF0
.text:00405DF0 ; char *__cdecl strerror(int ErrorMessage)
.text:00405DF0 strerror        proc near               ; CODE XREF: sub_405510+A5↑p
.text:00405DF0                                         ; sub_405614+10F↑p
.text:00405DF0
.text:00405DF0 ErrorMessage    = dword ptr  4
.text:00405DF0
.text:00405DF0                 jmp     ds:__imp_strerror
.text:00405DF0 strerror        endp
.text:00405DF0
.text:00405DF0 ; ---------------------------------------------------------------------------
.text:00405DF6                 align 10h
.text:00405E00
.text:00405E00 ; =============== S U B R O U T I N E =======================================
.text:00405E00
.text:00405E00 ; Attributes: thunk
.text:00405E00
.text:00405E00 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00405E00 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00405E00
.text:00405E00 lpTopLevelExceptionFilter= dword ptr  4
.text:00405E00
.text:00405E00                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00405E00 SetUnhandledExceptionFilter endp
.text:00405E00
.text:00405E00 ; ---------------------------------------------------------------------------
.text:00405E06                 align 10h
.text:00405E10
.text:00405E10 ; =============== S U B R O U T I N E =======================================
.text:00405E10
.text:00405E10 ; Attributes: noreturn thunk
.text:00405E10
.text:00405E10 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00405E10 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00405E10
.text:00405E10 uExitCode       = dword ptr  4
.text:00405E10
.text:00405E10                 jmp     ds:__imp_ExitProcess
.text:00405E10 ExitProcess     endp
.text:00405E10
.text:00405E10 ; ---------------------------------------------------------------------------
.text:00405E16                 align 10h
.text:00405E20 dword_405E20    dd 0FFFFFFFFh           ; DATA XREF: .text:00405929↑r
.text:00405E20                                         ; .text:loc_405950↑r ...
.text:00405E24 dword_405E24    dd 0                    ; DATA XREF: .text:loc_40595C↑r
.text:00405E24                                         ; sub_405980:loc_4059CD↑r
.text:00405E28                 dd 0FFFFFFFFh
.text:00405E2C dword_405E2C    dd 75h dup(0)           ; DATA XREF: .data:off_406094↓o
.text:00405E2C _text           ends
.text:00405E2C
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000B0 (    176.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00005400
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 off_406010      dd offset byte_401280   ; DATA XREF: sub_4016B0+45B↑o
.data:00406014                 align 10h
.data:00406020 dword_406020    dd 1                    ; DATA XREF: sub_4016B0:loc_401AFA↑r
.data:00406020                                         ; sub_403360+3↑r ...
.data:00406024 dword_406024    dd 1                    ; DATA XREF: sub_403360+11↑r
.data:00406024                                         ; .text:00403401↑r
.data:00406028 dword_406028    dd 3Fh                  ; DATA XREF: sub_403360+7D↑w
.data:00406028                                         ; .text:0040346D↑w
.data:0040602C                 align 10h
.data:00406030 ; char *Buffer
.data:00406030 Buffer          dd offset aCopyrightC2005
.data:00406030                                         ; DATA XREF: sub_403900+DC↑r
.data:00406030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406034                 align 10h
.data:00406040 ; int Code
.data:00406040 Code            dd 1                    ; DATA XREF: sub_403C80+6D↑r
.data:00406040                                         ; sub_403C80+9A↑r ...
.data:00406044                 align 10h
.data:00406050 dword_406050    dd 1                    ; DATA XREF: sub_405290+22↑r
.data:00406050                                         ; sub_405290+65↑r ...
.data:00406054 dword_406054    dd 100h                 ; DATA XREF: sub_405290+3F↑o
.data:00406054                                         ; sub_405290+1A2↑r ...
.data:00406058 off_406058      dd offset unk_4070D0    ; DATA XREF: sub_405290+1AA↑r
.data:0040605C ; void *off_40605C
.data:0040605C off_40605C      dd offset dword_406054  ; DATA XREF: sub_405290+39↑r
.data:0040605C                                         ; sub_405290+60↑w ...
.data:00406060 dword_406060    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406064                 align 10h
.data:00406070 ; int Mode
.data:00406070 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406070                                         ; sub_401080+80↑r ...
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406080                                         ; sub_401080+BA↑r
.data:00406084                 align 10h
.data:00406090 dword_406090    dd 0                    ; DATA XREF: sub_405980+9↑r
.data:00406090                                         ; sub_405980+1D↑w
.data:00406094 off_406094      dd offset dword_405E2C  ; DATA XREF: sub_4058F0+6↑r
.data:00406094                                         ; sub_4058F0+17↑r ...
.data:00406098                 align 1000h
.data:00406098 _data           ends
.data:00406098
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 000002C0 (    704.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 ; char dword_407000[]
.bss:00407000 dword_407000    dd ?                    ; DATA XREF: sub_402460+63↑w
.bss:00407000                                         ; sub_402460+B9↑w ...
.bss:00407004                 align 10h
.bss:00407010 byte_407010     db ?                    ; DATA XREF: sub_4016B0+80↑w
.bss:00407010                                         ; sub_4016B0:loc_4019A0↑w ...
.bss:00407011                 align 10h
.bss:00407020 dword_407020    dd ?                    ; DATA XREF: sub_4016B0+43D↑w
.bss:00407020                                         ; sub_4016B0+4BA↑w ...
.bss:00407024 ; char dword_407024[]
.bss:00407024 dword_407024    dd ?                    ; DATA XREF: sub_4016B0+444↑w
.bss:00407024                                         ; sub_4016B0+4CD↑w ...
.bss:00407028                 align 10h
.bss:00407030 ; void *dword_407030
.bss:00407030 dword_407030    dd ?                    ; DATA XREF: sub_4016B0+87↑w
.bss:00407030                                         ; sub_4016B0:loc_4019C4↑r ...
.bss:00407034                 align 10h
.bss:00407040 dword_407040    dd ?                    ; DATA XREF: sub_4016B0+30C↑r
.bss:00407040                                         ; sub_4016B0+33F↑o ...
.bss:00407044                 align 10h
.bss:00407050 dword_407050    dd ?                    ; DATA XREF: sub_4016B0+8D↑w
.bss:00407050                                         ; sub_4016B0+306↑r ...
.bss:00407054                 align 10h
.bss:00407060 dword_407060    dd ?                    ; DATA XREF: sub_4016B0:loc_401B10↑w
.bss:00407060                                         ; sub_402460:loc_402493↑r ...
.bss:00407064                 align 10h
.bss:00407070 byte_407070     db ?                    ; DATA XREF: sub_4016B0+6D↑w
.bss:00407070                                         ; sub_4016B0+46B↑r ...
.bss:00407071                 align 10h
.bss:00407080 dword_407080    dd ?                    ; DATA XREF: sub_4016B0+78↑w
.bss:00407080                                         ; sub_4016B0:loc_401B24↑r ...
.bss:00407084                 align 10h
.bss:00407090 dword_407090    dd ?                    ; DATA XREF: sub_403360+9↑o
.bss:00407090                                         ; sub_403360+17↑w ...
.bss:00407094 dword_407094    dd ?                    ; DATA XREF: sub_403360+21↑w
.bss:00407094                                         ; .text:00403419↑w
.bss:00407098 dword_407098    dd ?                    ; DATA XREF: sub_403360+77↑r
.bss:00407098                                         ; .text:00403467↑r
.bss:0040709C dword_40709C    dd ?                    ; DATA XREF: sub_403360+6B↑r
.bss:0040709C                                         ; .text:0040345B↑r
.bss:004070A0                 align 40h
.bss:004070C0 ; char *dword_4070C0
.bss:004070C0 dword_4070C0    dd ?                    ; DATA XREF: .text:00403C54↑w
.bss:004070C0                                         ; sub_403C80+58↑r
.bss:004070C4                 align 10h
.bss:004070D0 unk_4070D0      db    ? ;               ; DATA XREF: sub_405290+100↑o
.bss:004070D0                                         ; .data:off_406058↑o
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140                 db    ? ;
.bss:00407141                 db    ? ;
.bss:00407142                 db    ? ;
.bss:00407143                 db    ? ;
.bss:00407144                 db    ? ;
.bss:00407145                 db    ? ;
.bss:00407146                 db    ? ;
.bss:00407147                 db    ? ;
.bss:00407148                 db    ? ;
.bss:00407149                 db    ? ;
.bss:0040714A                 db    ? ;
.bss:0040714B                 db    ? ;
.bss:0040714C                 db    ? ;
.bss:0040714D                 db    ? ;
.bss:0040714E                 db    ? ;
.bss:0040714F                 db    ? ;
.bss:00407150                 db    ? ;
.bss:00407151                 db    ? ;
.bss:00407152                 db    ? ;
.bss:00407153                 db    ? ;
.bss:00407154                 db    ? ;
.bss:00407155                 db    ? ;
.bss:00407156                 db    ? ;
.bss:00407157                 db    ? ;
.bss:00407158                 db    ? ;
.bss:00407159                 db    ? ;
.bss:0040715A                 db    ? ;
.bss:0040715B                 db    ? ;
.bss:0040715C                 db    ? ;
.bss:0040715D                 db    ? ;
.bss:0040715E                 db    ? ;
.bss:0040715F                 db    ? ;
.bss:00407160                 db    ? ;
.bss:00407161                 db    ? ;
.bss:00407162                 db    ? ;
.bss:00407163                 db    ? ;
.bss:00407164                 db    ? ;
.bss:00407165                 db    ? ;
.bss:00407166                 db    ? ;
.bss:00407167                 db    ? ;
.bss:00407168                 db    ? ;
.bss:00407169                 db    ? ;
.bss:0040716A                 db    ? ;
.bss:0040716B                 db    ? ;
.bss:0040716C                 db    ? ;
.bss:0040716D                 db    ? ;
.bss:0040716E                 db    ? ;
.bss:0040716F                 db    ? ;
.bss:00407170                 db    ? ;
.bss:00407171                 db    ? ;
.bss:00407172                 db    ? ;
.bss:00407173                 db    ? ;
.bss:00407174                 db    ? ;
.bss:00407175                 db    ? ;
.bss:00407176                 db    ? ;
.bss:00407177                 db    ? ;
.bss:00407178                 db    ? ;
.bss:00407179                 db    ? ;
.bss:0040717A                 db    ? ;
.bss:0040717B                 db    ? ;
.bss:0040717C                 db    ? ;
.bss:0040717D                 db    ? ;
.bss:0040717E                 db    ? ;
.bss:0040717F                 db    ? ;
.bss:00407180                 db    ? ;
.bss:00407181                 db    ? ;
.bss:00407182                 db    ? ;
.bss:00407183                 db    ? ;
.bss:00407184                 db    ? ;
.bss:00407185                 db    ? ;
.bss:00407186                 db    ? ;
.bss:00407187                 db    ? ;
.bss:00407188                 db    ? ;
.bss:00407189                 db    ? ;
.bss:0040718A                 db    ? ;
.bss:0040718B                 db    ? ;
.bss:0040718C                 db    ? ;
.bss:0040718D                 db    ? ;
.bss:0040718E                 db    ? ;
.bss:0040718F                 db    ? ;
.bss:00407190                 db    ? ;
.bss:00407191                 db    ? ;
.bss:00407192                 db    ? ;
.bss:00407193                 db    ? ;
.bss:00407194                 db    ? ;
.bss:00407195                 db    ? ;
.bss:00407196                 db    ? ;
.bss:00407197                 db    ? ;
.bss:00407198                 db    ? ;
.bss:00407199                 db    ? ;
.bss:0040719A                 db    ? ;
.bss:0040719B                 db    ? ;
.bss:0040719C                 db    ? ;
.bss:0040719D                 db    ? ;
.bss:0040719E                 db    ? ;
.bss:0040719F                 db    ? ;
.bss:004071A0                 db    ? ;
.bss:004071A1                 db    ? ;
.bss:004071A2                 db    ? ;
.bss:004071A3                 db    ? ;
.bss:004071A4                 db    ? ;
.bss:004071A5                 db    ? ;
.bss:004071A6                 db    ? ;
.bss:004071A7                 db    ? ;
.bss:004071A8                 db    ? ;
.bss:004071A9                 db    ? ;
.bss:004071AA                 db    ? ;
.bss:004071AB                 db    ? ;
.bss:004071AC                 db    ? ;
.bss:004071AD                 db    ? ;
.bss:004071AE                 db    ? ;
.bss:004071AF                 db    ? ;
.bss:004071B0                 db    ? ;
.bss:004071B1                 db    ? ;
.bss:004071B2                 db    ? ;
.bss:004071B3                 db    ? ;
.bss:004071B4                 db    ? ;
.bss:004071B5                 db    ? ;
.bss:004071B6                 db    ? ;
.bss:004071B7                 db    ? ;
.bss:004071B8                 db    ? ;
.bss:004071B9                 db    ? ;
.bss:004071BA                 db    ? ;
.bss:004071BB                 db    ? ;
.bss:004071BC                 db    ? ;
.bss:004071BD                 db    ? ;
.bss:004071BE                 db    ? ;
.bss:004071BF                 db    ? ;
.bss:004071C0                 db    ? ;
.bss:004071C1                 db    ? ;
.bss:004071C2                 db    ? ;
.bss:004071C3                 db    ? ;
.bss:004071C4                 db    ? ;
.bss:004071C5                 db    ? ;
.bss:004071C6                 db    ? ;
.bss:004071C7                 db    ? ;
.bss:004071C8                 db    ? ;
.bss:004071C9                 db    ? ;
.bss:004071CA                 db    ? ;
.bss:004071CB                 db    ? ;
.bss:004071CC                 db    ? ;
.bss:004071CD                 db    ? ;
.bss:004071CE                 db    ? ;
.bss:004071CF                 db    ? ;
.bss:004071D0 dword_4071D0    dd ?                    ; DATA XREF: .text:loc_404C21↑o
.bss:004071D0                                         ; .text:loc_404C40↑o ...
.bss:004071D4 dword_4071D4    dd ?                    ; DATA XREF: .text:loc_404CC0↑o
.bss:004071D4                                         ; .text:00405148↑r ...
.bss:004071D8 dword_4071D8    dd ?                    ; DATA XREF: .text:00405142↑r
.bss:004071D8                                         ; sub_4051F0+2C↑r
.bss:004071DC dword_4071DC    dd ?                    ; DATA XREF: .text:00405136↑r
.bss:004071DC                                         ; sub_4051F0+22↑r
.bss:004071E0 dword_4071E0    dd ?                    ; DATA XREF: .text:00405152↑r
.bss:004071E0                                         ; sub_4051F0+36↑r
.bss:004071E4 dword_4071E4    dd ?                    ; DATA XREF: .text:00405162↑r
.bss:004071E4                                         ; sub_4051F0+4E↑r
.bss:004071E8 dword_4071E8    dd ?                    ; DATA XREF: .text:0040517F↑r
.bss:004071E8                                         ; sub_4051F0+62↑r
.bss:004071EC dword_4071EC    dd ?                    ; DATA XREF: .text:00405175↑r
.bss:004071EC                                         ; sub_4051F0+70↑r
.bss:004071F0 dword_4071F0    dd ?                    ; DATA XREF: .text:00405158↑r
.bss:004071F0                                         ; sub_4051F0+7A↑r
.bss:004071F4                 align 10h
.bss:00407200 ; char *Str1
.bss:00407200 Str1            dd ?                    ; DATA XREF: sub_405614:loc_40564D↑w
.bss:00407200                                         ; sub_405614:loc_405780↑r
.bss:00407204                 align 10h
.bss:00407210 dword_407210    dd ?                    ; DATA XREF: sub_405614+2D↑r
.bss:00407210                                         ; sub_405614+3F↑w
.bss:00407214                 align 10h
.bss:00407220 dword_407220    dd ?                    ; DATA XREF: sub_4016B0+34↑w
.bss:00407220                                         ; sub_4016B0+141↑r ...
.bss:00407224                 align 20h
.bss:00407240 ; char *dword_407240
.bss:00407240 dword_407240    dd ?                    ; DATA XREF: sub_4016B0+2D9↑r
.bss:00407240                                         ; sub_403360+71↑w ...
.bss:00407244                 align 10h
.bss:00407250 dword_407250    dd ?                    ; CODE XREF: sub_405614+63↑p
.bss:00407250                                         ; DATA XREF: sub_405510+1E↑r ...
.bss:00407254                 align 10h
.bss:00407260 dword_407260    dd ?                    ; DATA XREF: sub_405510+4E↑w
.bss:00407260                                         ; sub_405614+AB↑w
.bss:00407264                 db    ? ;
.bss:00407265                 db    ? ;
.bss:00407266                 db    ? ;
.bss:00407267                 db    ? ;
.bss:00407268                 db    ? ;
.bss:00407269                 db    ? ;
.bss:0040726A                 db    ? ;
.bss:0040726B                 db    ? ;
.bss:0040726C                 db    ? ;
.bss:0040726D                 db    ? ;
.bss:0040726E                 db    ? ;
.bss:0040726F                 db    ? ;
.bss:00407270                 db    ? ;
.bss:00407271                 db    ? ;
.bss:00407272                 db    ? ;
.bss:00407273                 db    ? ;
.bss:00407274                 db    ? ;
.bss:00407275                 db    ? ;
.bss:00407276                 db    ? ;
.bss:00407277                 db    ? ;
.bss:00407278                 db    ? ;
.bss:00407279                 db    ? ;
.bss:0040727A                 db    ? ;
.bss:0040727B                 db    ? ;
.bss:0040727C                 db    ? ;
.bss:0040727D                 db    ? ;
.bss:0040727E                 db    ? ;
.bss:0040727F                 db    ? ;
.bss:00407280                 db    ? ;
.bss:00407281                 db    ? ;
.bss:00407282                 db    ? ;
.bss:00407283                 db    ? ;
.bss:00407284                 db    ? ;
.bss:00407285                 db    ? ;
.bss:00407286                 db    ? ;
.bss:00407287                 db    ? ;
.bss:00407288                 db    ? ;
.bss:00407289                 db    ? ;
.bss:0040728A                 db    ? ;
.bss:0040728B                 db    ? ;
.bss:0040728C                 db    ? ;
.bss:0040728D                 db    ? ;
.bss:0040728E                 db    ? ;
.bss:0040728F                 db    ? ;
.bss:00407290 dword_407290    dd ?                    ; DATA XREF: sub_405614+13↑r
.bss:00407294                 align 1000h
.bss:00407294 _bss            ends
.bss:00407294
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 000005E0 (   1504.)
.idata:00408000 ; Section size in file          : 00000600 (   1536.)
.idata:00408000 ; Offset to raw data for section: 00005600
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:00408168 ;
.idata:00408168 ; Imports from libintl3.dll
.idata:00408168 ;
.idata:00408168                 extrn __imp_libintl_bindtextdomain:dword
.idata:00408168                                         ; CODE XREF: sub_4016B0+4E↑p
.idata:00408168                                         ; DATA XREF: sub_4016B0+4E↑r ...
.idata:0040816C                 extrn libintl_gettext:dword
.idata:0040816C                                         ; CODE XREF: sub_4016B0+13B↑p
.idata:0040816C                                         ; sub_4016B0+15A↑p ...
.idata:00408170                 extrn libintl_textdomain:dword
.idata:00408170                                         ; CODE XREF: sub_4016B0+5B↑p
.idata:00408170                                         ; DATA XREF: sub_4016B0+5B↑r ...
.idata:00408174
.idata:0040817C ;
.idata:0040817C ; Imports from KERNEL32.dll
.idata:0040817C ;
.idata:0040817C ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040817C                 extrn __imp_ExitProcess:dword
.idata:0040817C                                         ; DATA XREF: ExitProcess↑r
.idata:00408180 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00408180                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00408180                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00408184
.idata:0040818C ;
.idata:0040818C ; Imports from msvcrt.dll
.idata:0040818C ;
.idata:0040818C ; int (__cdecl *_isatty)(int FileHandle)
.idata:0040818C                 extrn __imp__isatty:dword
.idata:0040818C                                         ; DATA XREF: _isatty↑r
.idata:00408190
.idata:00408198 ;
.idata:00408198 ; Imports from MSVCP60.DLL
.idata:00408198 ;
.idata:00408198 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00408198                 extrn __imp_mbrtowc:dword
.idata:00408198                                         ; DATA XREF: mbrtowc↑r
.idata:0040819C
.idata:004081A4 ;
.idata:004081A4 ; Imports from msvcrt.dll
.idata:004081A4 ;
.idata:004081A4                 extrn __imp___getmainargs:dword
.idata:004081A4                                         ; DATA XREF: __getmainargs↑r
.idata:004081A8 ; int _mb_cur_max
.idata:004081A8                 extrn __mb_cur_max:dword
.idata:004081A8                                         ; DATA XREF: sub_404150+7↑r
.idata:004081A8                                         ; sub_404150+5F3↑r
.idata:004081AC ; char ***(__cdecl *__p__environ)()
.idata:004081AC                 extrn __imp___p__environ:dword
.idata:004081AC                                         ; DATA XREF: __p__environ↑r
.idata:004081B0 ; int *(__cdecl *__p__fmode)()
.idata:004081B0                 extrn __imp___p__fmode:dword
.idata:004081B0                                         ; DATA XREF: __p__fmode↑r
.idata:004081B4 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004081B4                 extrn __set_app_type:dword
.idata:004081B4                                         ; CODE XREF: start+D↑p
.idata:004081B4                                         ; .text:0040102D↑p
.idata:004081B4                                         ; DATA XREF: ...
.idata:004081B8 ; void (__cdecl *_cexit)()
.idata:004081B8                 extrn __imp__cexit:dword
.idata:004081B8                                         ; DATA XREF: _cexit↑r
.idata:004081BC ; int *(__cdecl *_errno)()
.idata:004081BC                 extrn __imp__errno:dword
.idata:004081BC                                         ; DATA XREF: _errno↑r
.idata:004081C0 ; int (__cdecl *_filbuf)(FILE *File)
.idata:004081C0                 extrn __imp__filbuf:dword
.idata:004081C0                                         ; DATA XREF: _filbuf↑r
.idata:004081C4 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004081C4                 extrn __imp__flsbuf:dword
.idata:004081C4                                         ; DATA XREF: _flsbuf↑r
.idata:004081C8 ; FILE iob[]
.idata:004081C8                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004081C8                                         ; sub_401080+75↑r ...
.idata:004081CC ; int (__cdecl *_isctype)(int C, int Type)
.idata:004081CC                 extrn __imp__isctype:dword
.idata:004081CC                                         ; DATA XREF: _isctype↑r
.idata:004081D0 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004081D0                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004081D0                                         ; DATA XREF: .text:0040106C↑r
.idata:004081D4 ; const unsigned __int16 *pctype
.idata:004081D4                 extrn _pctype:dword     ; DATA XREF: sub_404150:loc_404844↑r
.idata:004081D8 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004081D8                 extrn __imp__setmode:dword
.idata:004081D8                                         ; DATA XREF: _setmode↑r
.idata:004081DC ; void (__cdecl __noreturn *abort)()
.idata:004081DC                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004081E0 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004081E0                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004081E0                                         ; DATA XREF: sub_401040+C↑r
.idata:004081E4 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004081E4                 extrn __imp_calloc:dword
.idata:004081E4                                         ; DATA XREF: calloc↑r
.idata:004081E8 ; void (__cdecl *clearerr)(FILE *Stream)
.idata:004081E8                 extrn __imp_clearerr:dword
.idata:004081E8                                         ; DATA XREF: clearerr↑r
.idata:004081EC ; void (__cdecl __noreturn *exit)(int Code)
.idata:004081EC                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004081F0 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004081F0                 extrn __imp_fclose:dword
.idata:004081F0                                         ; DATA XREF: fclose↑r
.idata:004081F4 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004081F4                 extrn __imp_fflush:dword
.idata:004081F4                                         ; DATA XREF: fflush↑r
.idata:004081F8 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:004081F8                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:004081FC ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004081FC                 extrn __imp_fprintf:dword
.idata:004081FC                                         ; DATA XREF: fprintf↑r
.idata:00408200 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:00408200                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00408204 ; void (__cdecl *free)(void *Block)
.idata:00408204                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00408208 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00408208                 extrn __imp_getenv:dword
.idata:00408208                                         ; DATA XREF: getenv↑r
.idata:0040820C ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0040820C                 extrn __imp_iswctype:dword
.idata:0040820C                                         ; DATA XREF: iswctype↑r
.idata:00408210 ; void *(__cdecl *malloc)(size_t Size)
.idata:00408210                 extrn __imp_malloc:dword
.idata:00408210                                         ; DATA XREF: malloc↑r
.idata:00408214 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00408214                 extrn __imp_memcpy:dword
.idata:00408214                                         ; DATA XREF: memcpy↑r
.idata:00408218 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00408218                 extrn __imp_memset:dword
.idata:00408218                                         ; DATA XREF: memset↑r
.idata:0040821C ; int (*printf)(const char *const Format, ...)
.idata:0040821C                 extrn __imp_printf:dword
.idata:0040821C                                         ; DATA XREF: printf↑r
.idata:00408220 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00408220                 extrn __imp_realloc:dword
.idata:00408220                                         ; DATA XREF: realloc↑r
.idata:00408224 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00408224                 extrn __imp_setlocale:dword
.idata:00408224                                         ; DATA XREF: setlocale↑r
.idata:00408228 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00408228                 extrn __imp_signal:dword
.idata:00408228                                         ; DATA XREF: signal↑r
.idata:0040822C ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0040822C                 extrn __imp_strchr:dword
.idata:0040822C                                         ; DATA XREF: strchr↑r
.idata:00408230 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00408230                 extrn __imp_strcmp:dword
.idata:00408230                                         ; DATA XREF: strcmp↑r
.idata:00408234 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00408234                 extrn __imp_strerror:dword
.idata:00408234                                         ; DATA XREF: strerror↑r
.idata:00408238 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00408238                 extrn __imp_strlen:dword
.idata:00408238                                         ; DATA XREF: strlen↑r
.idata:0040823C ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0040823C                 extrn __imp_strncmp:dword
.idata:0040823C                                         ; DATA XREF: strncmp↑r
.idata:00408240 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:00408240                 extrn __imp_strspn:dword
.idata:00408240                                         ; DATA XREF: strspn↑r
.idata:00408244 ; int (__cdecl *strtol)(const char *String, char **EndPtr, int Radix)
.idata:00408244                 extrn __imp_strtol:dword
.idata:00408244                                         ; DATA XREF: strtol↑r
.idata:00408248 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00408248                 extrn __imp_vfprintf:dword
.idata:00408248                                         ; DATA XREF: vfprintf↑r
.idata:0040824C
.idata:0040824C
.idata:0040824C
.idata:0040824C                 end start
