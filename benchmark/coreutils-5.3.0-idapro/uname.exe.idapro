.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : A869CE535802C69700A0739744BF649921FC061D195049F69FC9815A2ABF87CA
.text:00401000 ; Input MD5    : 775DDD65BA2434CEF58D199DCC928750
.text:00401000 ; Input CRC32  : 3DB8AAB5
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/uname.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A274 (Wed Apr 20 18:41:56 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00006400 (  25600.)
.text:00401000 ; Section size in file          : 00006400 (  25600.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401800+6C↓p
.text:00401040                                         ; sub_406AD0+48↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_406F60
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_408000
.text:004010A2                 mov     edx, dword_408090
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_408004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4080B0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4080B0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_406F30
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_408000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_408004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401800
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_406F60
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 unk_401280      db  61h ; a             ; DATA XREF: .text:off_401320↓o
.text:00401281                 db 2 dup(6Ch), 0
.text:00401284 aKernelName     db 'kernel-name',0      ; DATA XREF: .text:00401330↓o
.text:00401290 aSysname        db 'sysname',0          ; DATA XREF: .text:00401340↓o
.text:00401298 aNodename       db 'nodename',0         ; DATA XREF: .text:00401350↓o
.text:004012A1 aKernelRelease  db 'kernel-release',0   ; DATA XREF: .text:00401360↓o
.text:004012B0 aRelease        db 'release',0          ; DATA XREF: .text:00401370↓o
.text:004012B8 aKernelVersion  db 'kernel-version',0   ; DATA XREF: .text:00401380↓o
.text:004012C7 aMachine        db 'machine',0          ; DATA XREF: .text:00401390↓o
.text:004012CF aProcessor      db 'processor',0        ; DATA XREF: .text:004013A0↓o
.text:004012D9 aHardwarePlatfo db 'hardware-platform',0
.text:004012D9                                         ; DATA XREF: .text:004013B0↓o
.text:004012EB aOperatingSyste db 'operating-system',0 ; DATA XREF: .text:004013C0↓o
.text:004012FC aHelp           db 'help',0             ; DATA XREF: .text:004013D0↓o
.text:00401301 aVersion        db 'version',0          ; DATA XREF: .text:004013E0↓o
.text:00401309                 align 20h
.text:00401320 off_401320      dd offset unk_401280    ; DATA XREF: sub_401800+88↓o
.text:00401324                 dd 2 dup(0)
.text:0040132C                 dd 61h
.text:00401330                 dd offset aKernelName   ; "kernel-name"
.text:00401334                 dd 2 dup(0)
.text:0040133C                 dd 73h
.text:00401340                 dd offset aSysname      ; "sysname"
.text:00401344                 dd 2 dup(0)
.text:0040134C                 dd 73h
.text:00401350                 dd offset aNodename     ; "nodename"
.text:00401354                 dd 2 dup(0)
.text:0040135C                 dd 6Eh
.text:00401360                 dd offset aKernelRelease ; "kernel-release"
.text:00401364                 dd 2 dup(0)
.text:0040136C                 dd 72h
.text:00401370                 dd offset aRelease      ; "release"
.text:00401374                 dd 2 dup(0)
.text:0040137C                 dd 72h
.text:00401380                 dd offset aKernelVersion ; "kernel-version"
.text:00401384                 dd 2 dup(0)
.text:0040138C                 dd 76h
.text:00401390                 dd offset aMachine      ; "machine"
.text:00401394                 dd 2 dup(0)
.text:0040139C                 dd 6Dh
.text:004013A0                 dd offset aProcessor    ; "processor"
.text:004013A4                 dd 2 dup(0)
.text:004013AC                 dd 70h
.text:004013B0                 dd offset aHardwarePlatfo ; "hardware-platform"
.text:004013B4                 dd 2 dup(0)
.text:004013BC                 dd 69h
.text:004013C0                 dd offset aOperatingSyste ; "operating-system"
.text:004013C4                 dd 2 dup(0)
.text:004013CC                 dd 6Fh
.text:004013D0                 dd offset aHelp         ; "help"
.text:004013D4                 dd 2 dup(0)
.text:004013DC                 dd 0FFFFFF7Eh
.text:004013E0                 dd offset aVersion      ; "version"
.text:004013E4                 dd 2 dup(0)
.text:004013EC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401400 ; const char Buffer[]
.text:00401400 Buffer          db 'unknown',0          ; DATA XREF: sub_401800+357↓o
.text:00401400                                         ; sub_401800+43D↓o
.text:00401408 ; const char Locale
.text:00401408 Locale          db 0                    ; DATA XREF: sub_401800+29↓o
.text:00401409                 align 20h
.text:00401420 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401420                                         ; DATA XREF: sub_401800+43↓o
.text:00401443 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401800+4B↓o
.text:00401443                                         ; sub_401800+58↓o
.text:0040144D ; const char aAsnrvmpio[]
.text:0040144D aAsnrvmpio      db 'asnrvmpio',0        ; DATA XREF: sub_401800+90↓o
.text:00401457                 align 10h
.text:00401460 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401460                                         ; DATA XREF: sub_401800:loc_4018DC↓o
.text:00401460                                         ; .text:00401F5F↓o
.text:00401487 aUsageSOption   db 'Usage: %s [OPTION]...',0Ah,0
.text:00401487                                         ; DATA XREF: sub_401800+12E↓o
.text:00401487                                         ; .text:loc_401F93↓o
.text:0040149E                 align 10h
.text:004014A0 aPrintCertainSy db 'Print certain system information.  With no OPTION, same as -s.',0Ah
.text:004014A0                                         ; DATA XREF: sub_401800+14D↓o
.text:004014A0                                         ; .text:00401FB2↓o
.text:004014A0                 db 0Ah
.text:004014A0                 db '  -a, --all                print all information, in the followin'
.text:004014A0                 db 'g order:',0Ah
.text:004014A0                 db '  -s, --kernel-name        print the kernel name',0Ah
.text:004014A0                 db '  -n, --nodename           print the network node hostname',0Ah
.text:004014A0                 db '  -r, --kernel-release     print the kernel release',0Ah,0
.text:004015CB                 align 20h
.text:004015E0 aVKernelVersion db '  -v, --kernel-version     print the kernel version',0Ah
.text:004015E0                                         ; DATA XREF: sub_401800+16F↓o
.text:004015E0                                         ; .text:00401FD4↓o
.text:004015E0                 db '  -m, --machine            print the machine hardware name',0Ah
.text:004015E0                 db '  -p, --processor          print the processor type',0Ah
.text:004015E0                 db '  -i, --hardware-platform  print the hardware platform',0Ah
.text:004015E0                 db '  -o, --operating-system   print the operating system',0Ah,0
.text:004016F1                 db 0EBh, 0Dh, 90h
.text:004016F4                 align 10h
.text:00401700 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401700                                         ; DATA XREF: sub_401800+191↓o
.text:00401700                                         ; .text:00401FF6↓o
.text:0040172D                 align 20h
.text:00401740 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401740                                         ; DATA XREF: sub_401800+1B3↓o
.text:00401740                                         ; .text:00402018↓o
.text:00401776 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401800+1D5↓o
.text:00401776                                         ; .text:0040203A↓o
.text:00401776                 db 'Report bugs to <%s>.',0Ah,0
.text:0040178D aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040178D                                         ; DATA XREF: sub_401800+1E2↓o
.text:0040178D                                         ; .text:00402047↓o
.text:004017A3 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401800+20C↓o
.text:004017B3 a530            db '5.3.0',0            ; DATA XREF: sub_401800+214↓o
.text:004017B9 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401800+21F↓o
.text:004017C7 ; const FILE stru_4017C7
.text:004017C7 stru_4017C7     FILE <6D616E75h, 78650065h, 20617274h, 7265706Fh, 20646E61h, \
.text:004017C7                                         ; DATA XREF: sub_401800+227↓o
.text:004017C7                                         ; sub_401800+2C4↓o
.text:004017C7                       4D007325h, 57476E69h, 6E616300h>
.text:004017E7                 db  6Eh ; n
.text:004017E8                 db  6Fh ; o
.text:004017E9                 db  74h ; t
.text:004017EA                 db  20h
.text:004017EB                 db  67h ; g
.text:004017EC                 db  65h ; e
.text:004017ED                 db  74h ; t
.text:004017EE                 db  20h
.text:004017EF                 db  73h ; s
.text:004017F0                 db  79h ; y
.text:004017F1                 db  73h ; s
.text:004017F2                 db  74h ; t
.text:004017F3                 db  65h ; e
.text:004017F4                 db  6Dh ; m
.text:004017F5                 db  20h
.text:004017F6                 db  6Eh ; n
.text:004017F7                 db  61h ; a
.text:004017F8                 db  6Dh ; m
.text:004017F9                 db  65h ; e
.text:004017FA                 db    0
.text:004017FB                 align 10h
.text:00401800
.text:00401800 ; =============== S U B R O U T I N E =======================================
.text:00401800
.text:00401800 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401800
.text:00401800 sub_401800      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401800
.text:00401800 Category        = dword ptr -1438h
.text:00401800 Locale          = dword ptr -1434h
.text:00401800 var_1430        = dword ptr -1430h
.text:00401800 var_142C        = byte ptr -142Ch
.text:00401800 var_1428        = byte ptr -1428h
.text:00401800 var_1424        = dword ptr -1424h
.text:00401800 Buffer          = byte ptr -1418h
.text:00401800 var_1018        = byte ptr -1018h
.text:00401800 var_C18         = byte ptr -0C18h
.text:00401800 var_818         = byte ptr -818h
.text:00401800 var_418         = byte ptr -418h
.text:00401800 arg_0           = dword ptr  8
.text:00401800 arg_4           = dword ptr  0Ch
.text:00401800
.text:00401800                 push    ebp
.text:00401801                 mov     eax, 142Ch
.text:00401806                 mov     ebp, esp
.text:00401808                 push    edi
.text:00401809                 push    esi
.text:0040180A                 push    ebx             ; Size
.text:0040180B                 call    __alloca
.text:00401810                 mov     ebx, [ebp+arg_4]
.text:00401813                 and     esp, 0FFFFFFF0h
.text:00401816                 xor     eax, eax
.text:00401818                 call    __alloca
.text:0040181D                 mov     edi, [ebp+arg_0]
.text:00401820                 xor     esi, esi
.text:00401822                 call    sub_407000
.text:00401827                 mov     edx, [ebx]
.text:00401829                 mov     [esp+1438h+Locale], offset Locale ; Locale
.text:00401831                 mov     [esp+1438h+Category], 0 ; Category
.text:00401838                 mov     ds:dword_409390, edx
.text:0040183E                 call    setlocale
.text:00401843                 mov     [esp+1438h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:0040184B                 mov     [esp+1438h+Category], offset aCoreutils ; "coreutils"
.text:00401852                 call    ds:__imp_libintl_bindtextdomain
.text:00401858                 mov     [esp+1438h+Category], offset aCoreutils ; "coreutils"
.text:0040185F                 call    ds:libintl_textdomain
.text:00401865                 mov     [esp+1438h+Category], offset sub_403750 ; void (__cdecl *)()
.text:0040186C                 call    sub_401040
.text:00401871                 jmp     short loc_401880
.text:00401871 ; ---------------------------------------------------------------------------
.text:00401873                 align 10h
.text:00401880
.text:00401880 loc_401880:                             ; CODE XREF: sub_401800+71↑j
.text:00401880                                         ; sub_401800+DA↓j ...
.text:00401880                 mov     dword ptr [esp+1438h+var_1428], 0 ; int
.text:00401888                 mov     dword ptr [esp+1438h+var_142C], offset off_401320 ; char
.text:00401890                 mov     [esp+1438h+var_1430], offset aAsnrvmpio ; "asnrvmpio"
.text:00401898                 mov     [esp+1438h+Locale], ebx ; int
.text:0040189C                 mov     [esp+1438h+Category], edi ; int
.text:0040189F                 call    sub_4035E0
.text:004018A4                 cmp     eax, 0FFFFFFFFh
.text:004018A7                 jz      loc_401AB0
.text:004018AD                 cmp     eax, 6Eh ; 'n'
.text:004018B0                 jz      loc_401AA8
.text:004018B6                 cmp     eax, 6Eh ; 'n'
.text:004018B9                 jg      loc_401A50
.text:004018BF                 cmp     eax, 61h ; 'a'
.text:004018C2                 jz      loc_401A40
.text:004018C8                 cmp     eax, 61h ; 'a'
.text:004018CB                 jle     short loc_40191C
.text:004018CD                 cmp     eax, 69h ; 'i'
.text:004018D0                 jz      short loc_401914
.text:004018D2                 cmp     eax, 6Dh ; 'm'
.text:004018D5                 jnz     short loc_4018DC
.text:004018D7                 or      esi, 10h
.text:004018DA                 jmp     short loc_401880
.text:004018DC ; ---------------------------------------------------------------------------
.text:004018DC
.text:004018DC loc_4018DC:                             ; CODE XREF: sub_401800+D5↑j
.text:004018DC                                         ; sub_401800+12C↓j ...
.text:004018DC                 mov     [esp+1438h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004018E3                 call    ds:libintl_gettext
.text:004018E9                 mov     ebx, ds:_iob
.text:004018EF                 mov     ecx, ds:dword_409390
.text:004018F5                 add     ebx, 40h ; '@'
.text:004018F8                 mov     [esp+1438h+var_1430], ecx
.text:004018FC                 mov     [esp+1438h+Locale], eax ; Format
.text:00401900                 mov     [esp+1438h+Category], ebx ; Stream
.text:00401903                 call    fprintf
.text:00401908                 mov     [esp+1438h+Category], 1 ; Code
.text:0040190F
.text:0040190F loc_40190F:                             ; CODE XREF: sub_401800+1F9↓j
.text:0040190F                 call    exit
.text:00401914 ; ---------------------------------------------------------------------------
.text:00401914
.text:00401914 loc_401914:                             ; CODE XREF: sub_401800+D0↑j
.text:00401914                 or      esi, 40h
.text:00401917                 jmp     loc_401880
.text:0040191C ; ---------------------------------------------------------------------------
.text:0040191C
.text:0040191C loc_40191C:                             ; CODE XREF: sub_401800+CB↑j
.text:0040191C                 cmp     eax, 0FFFFFF7Dh
.text:00401921                 jz      loc_4019FE
.text:00401927                 cmp     eax, 0FFFFFF7Eh
.text:0040192C                 jnz     short loc_4018DC
.text:0040192E                 mov     [esp+1438h+Category], offset aUsageSOption ; "Usage: %s [OPTION]...\n"
.text:00401935                 call    ds:libintl_gettext
.text:0040193B                 mov     ecx, ds:dword_409390
.text:00401941                 mov     [esp+1438h+Category], eax ; Format
.text:00401944                 mov     [esp+1438h+Locale], ecx
.text:00401948                 call    printf
.text:0040194D                 mov     [esp+1438h+Category], offset aPrintCertainSy ; "Print certain system information.  With"...
.text:00401954                 call    ds:libintl_gettext
.text:0040195A                 mov     edi, ds:_iob
.text:00401960                 add     edi, 20h ; ' '
.text:00401963                 mov     [esp+1438h+Locale], edi ; Stream
.text:00401967                 mov     [esp+1438h+Category], eax ; Buffer
.text:0040196A                 call    fputs
.text:0040196F                 mov     [esp+1438h+Category], offset aVKernelVersion ; "  -v, --kernel-version     print the ke"...
.text:00401976                 call    ds:libintl_gettext
.text:0040197C                 mov     esi, ds:_iob
.text:00401982                 add     esi, 20h ; ' '
.text:00401985                 mov     [esp+1438h+Locale], esi ; Stream
.text:00401989                 mov     [esp+1438h+Category], eax ; Buffer
.text:0040198C                 call    fputs
.text:00401991                 mov     [esp+1438h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401998                 call    ds:libintl_gettext
.text:0040199E                 mov     ebx, ds:_iob
.text:004019A4                 add     ebx, 20h ; ' '
.text:004019A7                 mov     [esp+1438h+Locale], ebx ; Stream
.text:004019AB                 mov     [esp+1438h+Category], eax ; Buffer
.text:004019AE                 call    fputs
.text:004019B3                 mov     [esp+1438h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:004019BA                 call    ds:libintl_gettext
.text:004019C0                 mov     ecx, ds:_iob
.text:004019C6                 add     ecx, 20h ; ' '
.text:004019C9                 mov     [esp+1438h+Locale], ecx ; Stream
.text:004019CD                 mov     [esp+1438h+Category], eax ; Buffer
.text:004019D0                 call    fputs
.text:004019D5                 mov     [esp+1438h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004019DC                 call    ds:libintl_gettext
.text:004019E2                 mov     [esp+1438h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004019EA                 mov     [esp+1438h+Category], eax ; Format
.text:004019ED                 call    printf
.text:004019F2
.text:004019F2 loc_4019F2:                             ; CODE XREF: sub_401800+237↓j
.text:004019F2                                         ; sub_401800+3D9↓j ...
.text:004019F2                 mov     [esp+1438h+Category], 0
.text:004019F9                 jmp     loc_40190F
.text:004019FE ; ---------------------------------------------------------------------------
.text:004019FE
.text:004019FE loc_4019FE:                             ; CODE XREF: sub_401800+121↑j
.text:004019FE                 mov     [esp+1438h+var_1424], 0
.text:00401A06                 mov     edx, ds:_iob
.text:00401A0C                 mov     dword ptr [esp+1438h+var_1428], offset aDavidMackenzie ; "David MacKenzie"
.text:00401A14                 mov     dword ptr [esp+1438h+var_142C], offset a530 ; "5.3.0"
.text:00401A1C                 add     edx, 20h ; ' '
.text:00401A1F                 mov     [esp+1438h+var_1430], offset aGnuCoreutils ; "GNU coreutils"
.text:00401A27                 mov     [esp+1438h+Locale], offset stru_4017C7 ; FILE *
.text:00401A2F                 mov     [esp+1438h+Category], edx ; FILE *
.text:00401A32                 call    sub_4035A0
.text:00401A37                 jmp     short loc_4019F2
.text:00401A37 ; ---------------------------------------------------------------------------
.text:00401A39                 align 10h
.text:00401A40
.text:00401A40 loc_401A40:                             ; CODE XREF: sub_401800+C2↑j
.text:00401A40                 mov     esi, 0FFFFFFFFh
.text:00401A45                 jmp     loc_401880
.text:00401A45 ; ---------------------------------------------------------------------------
.text:00401A4A                 align 10h
.text:00401A50
.text:00401A50 loc_401A50:                             ; CODE XREF: sub_401800+B9↑j
.text:00401A50                 cmp     eax, 72h ; 'r'
.text:00401A53                 jz      short loc_401AA0
.text:00401A55                 cmp     eax, 72h ; 'r'
.text:00401A58                 jg      short loc_401A80
.text:00401A5A                 cmp     eax, 6Fh ; 'o'
.text:00401A5D                 jz      short loc_401A70
.text:00401A5F                 cmp     eax, 70h ; 'p'
.text:00401A62                 jnz     loc_4018DC
.text:00401A68                 or      esi, 20h
.text:00401A6B                 jmp     loc_401880
.text:00401A70 ; ---------------------------------------------------------------------------
.text:00401A70
.text:00401A70 loc_401A70:                             ; CODE XREF: sub_401800+25D↑j
.text:00401A70                 or      esi, 80h
.text:00401A76                 jmp     loc_401880
.text:00401A76 ; ---------------------------------------------------------------------------
.text:00401A7B                 align 10h
.text:00401A80
.text:00401A80 loc_401A80:                             ; CODE XREF: sub_401800+258↑j
.text:00401A80                 cmp     eax, 73h ; 's'
.text:00401A83                 jz      short loc_401A96
.text:00401A85                 cmp     eax, 76h ; 'v'
.text:00401A88                 jnz     loc_4018DC
.text:00401A8E                 or      esi, 8
.text:00401A91                 jmp     loc_401880
.text:00401A96 ; ---------------------------------------------------------------------------
.text:00401A96
.text:00401A96 loc_401A96:                             ; CODE XREF: sub_401800+283↑j
.text:00401A96                 or      esi, 1
.text:00401A99                 jmp     loc_401880
.text:00401A99 ; ---------------------------------------------------------------------------
.text:00401A9E                 align 10h
.text:00401AA0
.text:00401AA0 loc_401AA0:                             ; CODE XREF: sub_401800+253↑j
.text:00401AA0                 or      esi, 4
.text:00401AA3                 jmp     loc_401880
.text:00401AA8 ; ---------------------------------------------------------------------------
.text:00401AA8
.text:00401AA8 loc_401AA8:                             ; CODE XREF: sub_401800+B0↑j
.text:00401AA8                 or      esi, 2
.text:00401AAB                 jmp     loc_401880
.text:00401AB0 ; ---------------------------------------------------------------------------
.text:00401AB0
.text:00401AB0 loc_401AB0:                             ; CODE XREF: sub_401800+A7↑j
.text:00401AB0                 mov     eax, dword_408010
.text:00401AB5                 cmp     edi, eax
.text:00401AB7                 jz      short loc_401AF4
.text:00401AB9                 mov     edi, [ebx+eax*4]
.text:00401ABC                 mov     [esp+1438h+Category], edi ; char *
.text:00401ABF                 call    sub_4030B0
.text:00401AC4                 mov     [esp+1438h+Category], (offset stru_4017C7._cnt+2)
.text:00401ACB                 mov     esi, eax
.text:00401ACD                 call    ds:libintl_gettext
.text:00401AD3                 mov     dword ptr [esp+1438h+var_142C], esi ; char
.text:00401AD7                 mov     [esp+1438h+Locale], 0 ; ErrorMessage
.text:00401ADF                 mov     [esp+1438h+Category], 0 ; Code
.text:00401AE6                 mov     [esp+1438h+var_1430], eax ; char *
.text:00401AEA                 call    sub_404F50
.text:00401AEF                 jmp     loc_4018DC
.text:00401AF4 ; ---------------------------------------------------------------------------
.text:00401AF4
.text:00401AF4 loc_401AF4:                             ; CODE XREF: sub_401800+2B7↑j
.text:00401AF4                 test    esi, esi
.text:00401AF6                 jnz     short loc_401AFD
.text:00401AF8                 mov     esi, 1
.text:00401AFD
.text:00401AFD loc_401AFD:                             ; CODE XREF: sub_401800+2F6↑j
.text:00401AFD                 test    esi, 1Fh
.text:00401B03                 jnz     loc_401CC4
.text:00401B09
.text:00401B09 loc_401B09:                             ; CODE XREF: sub_401800+635↓j
.text:00401B09                                         ; sub_401800+686↓j
.text:00401B09                 test    esi, 20h
.text:00401B0F                 jnz     loc_401C35
.text:00401B15
.text:00401B15 loc_401B15:                             ; CODE XREF: sub_401800+4A4↓j
.text:00401B15                 test    esi, 40h
.text:00401B1B                 jz      short loc_401B6A
.text:00401B1D                 cmp     ds:byte_409000, 0
.text:00401B24                 jz      short loc_401B4A
.text:00401B26                 mov     ecx, ds:_iob
.text:00401B2C                 mov     ebx, [ecx+24h]
.text:00401B2F                 dec     ebx
.text:00401B30                 mov     [ecx+24h], ebx
.text:00401B33                 test    ebx, ebx
.text:00401B35                 js      loc_401C17
.text:00401B3B                 mov     edi, ds:_iob
.text:00401B41                 mov     eax, [edi+20h]
.text:00401B44                 mov     byte ptr [eax], 20h ; ' '
.text:00401B47                 inc     dword ptr [edi+20h]
.text:00401B4A
.text:00401B4A loc_401B4A:                             ; CODE XREF: sub_401800+324↑j
.text:00401B4A                                         ; sub_401800+430↓j
.text:00401B4A                 mov     ds:byte_409000, 1
.text:00401B51                 mov     ebx, ds:_iob
.text:00401B57                 mov     [esp+1438h+Category], offset Buffer ; "unknown"
.text:00401B5E                 add     ebx, 20h ; ' '
.text:00401B61                 mov     [esp+1438h+Locale], ebx ; Stream
.text:00401B65                 call    fputs
.text:00401B6A
.text:00401B6A loc_401B6A:                             ; CODE XREF: sub_401800+31B↑j
.text:00401B6A                 mov     ecx, esi
.text:00401B6C                 test    cl, cl
.text:00401B6E                 jns     short loc_401BB9
.text:00401B70                 cmp     ds:byte_409000, 0
.text:00401B77                 jz      short loc_401B99
.text:00401B79                 mov     edi, ds:_iob
.text:00401B7F                 mov     esi, [edi+24h]
.text:00401B82                 dec     esi
.text:00401B83                 mov     [edi+24h], esi
.text:00401B86                 test    esi, esi
.text:00401B88                 js      short loc_401BFC
.text:00401B8A                 mov     ebx, ds:_iob
.text:00401B90                 mov     eax, [ebx+20h]
.text:00401B93                 mov     byte ptr [eax], 20h ; ' '
.text:00401B96                 inc     dword ptr [ebx+20h]
.text:00401B99
.text:00401B99 loc_401B99:                             ; CODE XREF: sub_401800+377↑j
.text:00401B99                                         ; sub_401800+415↓j
.text:00401B99                 mov     ds:byte_409000, 1
.text:00401BA0                 mov     ecx, ds:_iob
.text:00401BA6                 mov     [esp+1438h+Category], (offset stru_4017C7._charbuf+3) ; Buffer
.text:00401BAD                 add     ecx, 20h ; ' '
.text:00401BB0                 mov     [esp+1438h+Locale], ecx ; Stream
.text:00401BB4                 call    fputs
.text:00401BB9
.text:00401BB9 loc_401BB9:                             ; CODE XREF: sub_401800+36E↑j
.text:00401BB9                 mov     edi, ds:_iob
.text:00401BBF                 mov     esi, [edi+24h]
.text:00401BC2                 dec     esi
.text:00401BC3                 mov     [edi+24h], esi
.text:00401BC6                 test    esi, esi
.text:00401BC8                 js      short loc_401BDE
.text:00401BCA                 mov     ebx, ds:_iob
.text:00401BD0                 mov     eax, [ebx+20h]
.text:00401BD3                 mov     byte ptr [eax], 0Ah
.text:00401BD6                 inc     dword ptr [ebx+20h]
.text:00401BD9                 jmp     loc_4019F2
.text:00401BDE ; ---------------------------------------------------------------------------
.text:00401BDE
.text:00401BDE loc_401BDE:                             ; CODE XREF: sub_401800+3C8↑j
.text:00401BDE                 mov     [esp+1438h+Category], 0Ah ; Ch
.text:00401BE5                 mov     edx, ds:_iob
.text:00401BEB                 add     edx, 20h ; ' '
.text:00401BEE                 mov     [esp+1438h+Locale], edx ; File
.text:00401BF2                 call    _flsbuf
.text:00401BF7                 jmp     loc_4019F2
.text:00401BFC ; ---------------------------------------------------------------------------
.text:00401BFC
.text:00401BFC loc_401BFC:                             ; CODE XREF: sub_401800+388↑j
.text:00401BFC                 mov     [esp+1438h+Category], 20h ; ' ' ; Ch
.text:00401C03                 mov     edx, ds:_iob
.text:00401C09                 add     edx, 20h ; ' '
.text:00401C0C                 mov     [esp+1438h+Locale], edx ; File
.text:00401C10                 call    _flsbuf
.text:00401C15                 jmp     short loc_401B99
.text:00401C17 ; ---------------------------------------------------------------------------
.text:00401C17
.text:00401C17 loc_401C17:                             ; CODE XREF: sub_401800+335↑j
.text:00401C17                 mov     [esp+1438h+Category], 20h ; ' ' ; Ch
.text:00401C1E                 mov     edx, ds:_iob
.text:00401C24                 add     edx, 20h ; ' '
.text:00401C27                 mov     [esp+1438h+Locale], edx ; File
.text:00401C2B                 call    _flsbuf
.text:00401C30                 jmp     loc_401B4A
.text:00401C35 ; ---------------------------------------------------------------------------
.text:00401C35
.text:00401C35 loc_401C35:                             ; CODE XREF: sub_401800+30F↑j
.text:00401C35                 mov     [esp+1438h+var_1430], 101h
.text:00401C3D                 mov     ebx, offset Buffer ; "unknown"
.text:00401C42                 mov     [esp+1438h+Locale], offset unk_409010
.text:00401C4A                 mov     [esp+1438h+Category], 6
.text:00401C51                 call    sub_4051F0
.text:00401C56                 test    eax, eax
.text:00401C58                 js      short loc_401C5F
.text:00401C5A                 mov     ebx, offset unk_409010
.text:00401C5F
.text:00401C5F loc_401C5F:                             ; CODE XREF: sub_401800+458↑j
.text:00401C5F                 cmp     ds:byte_409000, 0
.text:00401C66                 jz      short loc_401C88
.text:00401C68                 mov     edx, ds:_iob
.text:00401C6E                 mov     edi, [edx+24h]
.text:00401C71                 dec     edi
.text:00401C72                 mov     [edx+24h], edi
.text:00401C75                 test    edi, edi
.text:00401C77                 js      short loc_401CA9
.text:00401C79                 mov     ecx, ds:_iob
.text:00401C7F                 mov     eax, [ecx+20h]
.text:00401C82                 mov     byte ptr [eax], 20h ; ' '
.text:00401C85                 inc     dword ptr [ecx+20h]
.text:00401C88
.text:00401C88 loc_401C88:                             ; CODE XREF: sub_401800+466↑j
.text:00401C88                                         ; sub_401800+4C2↓j
.text:00401C88                 mov     ds:byte_409000, 1
.text:00401C8F                 mov     edx, ds:_iob
.text:00401C95                 mov     [esp+1438h+Category], ebx ; Buffer
.text:00401C98                 add     edx, 20h ; ' '
.text:00401C9B                 mov     [esp+1438h+Locale], edx ; Stream
.text:00401C9F                 call    fputs
.text:00401CA4                 jmp     loc_401B15
.text:00401CA9 ; ---------------------------------------------------------------------------
.text:00401CA9
.text:00401CA9 loc_401CA9:                             ; CODE XREF: sub_401800+477↑j
.text:00401CA9                 mov     [esp+1438h+Category], 20h ; ' ' ; Ch
.text:00401CB0                 mov     edi, ds:_iob
.text:00401CB6                 add     edi, 20h ; ' '
.text:00401CB9                 mov     [esp+1438h+Locale], edi ; File
.text:00401CBD                 call    _flsbuf
.text:00401CC2                 jmp     short loc_401C88
.text:00401CC4 ; ---------------------------------------------------------------------------
.text:00401CC4
.text:00401CC4 loc_401CC4:                             ; CODE XREF: sub_401800+303↑j
.text:00401CC4                 lea     edi, [ebp+Buffer]
.text:00401CCA                 mov     [esp+1438h+Category], edi ; char *
.text:00401CCD                 call    sub_4054A0
.text:00401CD2                 inc     eax
.text:00401CD3                 jz      loc_401F1E
.text:00401CD9
.text:00401CD9 loc_401CD9:                             ; CODE XREF: sub_401800+748↓j
.text:00401CD9                 test    esi, 1
.text:00401CDF                 jz      short loc_401D2A
.text:00401CE1                 cmp     ds:byte_409000, 0
.text:00401CE8                 jz      short loc_401D0E
.text:00401CEA                 mov     ecx, ds:_iob
.text:00401CF0                 mov     ebx, [ecx+24h]
.text:00401CF3                 dec     ebx
.text:00401CF4                 mov     [ecx+24h], ebx
.text:00401CF7                 test    ebx, ebx
.text:00401CF9                 js      loc_401F00
.text:00401CFF                 mov     ebx, ds:_iob
.text:00401D05                 mov     eax, [ebx+20h]
.text:00401D08                 mov     byte ptr [eax], 20h ; ' '
.text:00401D0B                 inc     dword ptr [ebx+20h]
.text:00401D0E
.text:00401D0E loc_401D0E:                             ; CODE XREF: sub_401800+4E8↑j
.text:00401D0E                                         ; sub_401800+719↓j
.text:00401D0E                 mov     ds:byte_409000, 1
.text:00401D15                 mov     ecx, ds:_iob
.text:00401D1B                 mov     [esp+1438h+Category], edi ; Buffer
.text:00401D1E                 add     ecx, 20h ; ' '
.text:00401D21                 mov     [esp+1438h+Locale], ecx ; Stream
.text:00401D25                 call    fputs
.text:00401D2A
.text:00401D2A loc_401D2A:                             ; CODE XREF: sub_401800+4DF↑j
.text:00401D2A                 test    esi, 2
.text:00401D30                 jz      short loc_401D81
.text:00401D32                 cmp     ds:byte_409000, 0
.text:00401D39                 lea     ebx, [ebp+var_1018]
.text:00401D3F                 jz      short loc_401D65
.text:00401D41                 mov     edx, ds:_iob
.text:00401D47                 mov     edi, [edx+24h]
.text:00401D4A                 dec     edi
.text:00401D4B                 mov     [edx+24h], edi
.text:00401D4E                 test    edi, edi
.text:00401D50                 js      loc_401EE2
.text:00401D56                 mov     ecx, ds:_iob
.text:00401D5C                 mov     eax, [ecx+20h]
.text:00401D5F                 mov     byte ptr [eax], 20h ; ' '
.text:00401D62                 inc     dword ptr [ecx+20h]
.text:00401D65
.text:00401D65 loc_401D65:                             ; CODE XREF: sub_401800+53F↑j
.text:00401D65                                         ; sub_401800+6FB↓j
.text:00401D65                 mov     ds:byte_409000, 1
.text:00401D6C                 mov     edx, ds:_iob
.text:00401D72                 mov     [esp+1438h+Category], ebx ; Buffer
.text:00401D75                 add     edx, 20h ; ' '
.text:00401D78                 mov     [esp+1438h+Locale], edx ; Stream
.text:00401D7C                 call    fputs
.text:00401D81
.text:00401D81 loc_401D81:                             ; CODE XREF: sub_401800+530↑j
.text:00401D81                 test    esi, 4
.text:00401D87                 jz      short loc_401DD8
.text:00401D89                 cmp     ds:byte_409000, 0
.text:00401D90                 lea     ebx, [ebp+var_C18]
.text:00401D96                 jz      short loc_401DBC
.text:00401D98                 mov     edi, ds:_iob
.text:00401D9E                 mov     ecx, [edi+24h]
.text:00401DA1                 dec     ecx
.text:00401DA2                 mov     [edi+24h], ecx
.text:00401DA5                 test    ecx, ecx
.text:00401DA7                 js      loc_401EC4
.text:00401DAD                 mov     ecx, ds:_iob
.text:00401DB3                 mov     eax, [ecx+20h]
.text:00401DB6                 mov     byte ptr [eax], 20h ; ' '
.text:00401DB9                 inc     dword ptr [ecx+20h]
.text:00401DBC
.text:00401DBC loc_401DBC:                             ; CODE XREF: sub_401800+596↑j
.text:00401DBC                                         ; sub_401800+6DD↓j
.text:00401DBC                 mov     ds:byte_409000, 1
.text:00401DC3                 mov     edi, ds:_iob
.text:00401DC9                 mov     [esp+1438h+Category], ebx ; Buffer
.text:00401DCC                 add     edi, 20h ; ' '
.text:00401DCF                 mov     [esp+1438h+Locale], edi ; Stream
.text:00401DD3                 call    fputs
.text:00401DD8
.text:00401DD8 loc_401DD8:                             ; CODE XREF: sub_401800+587↑j
.text:00401DD8                 test    esi, 8
.text:00401DDE                 jz      short loc_401E2F
.text:00401DE0                 cmp     ds:byte_409000, 0
.text:00401DE7                 lea     ebx, [ebp+var_818]
.text:00401DED                 jz      short loc_401E13
.text:00401DEF                 mov     edx, ds:_iob
.text:00401DF5                 mov     ecx, [edx+24h]
.text:00401DF8                 dec     ecx
.text:00401DF9                 mov     [edx+24h], ecx
.text:00401DFC                 test    ecx, ecx
.text:00401DFE                 js      loc_401EA6
.text:00401E04                 mov     edi, ds:_iob
.text:00401E0A                 mov     eax, [edi+20h]
.text:00401E0D                 mov     byte ptr [eax], 20h ; ' '
.text:00401E10                 inc     dword ptr [edi+20h]
.text:00401E13
.text:00401E13 loc_401E13:                             ; CODE XREF: sub_401800+5ED↑j
.text:00401E13                                         ; sub_401800+6BF↓j
.text:00401E13                 mov     ds:byte_409000, 1
.text:00401E1A                 mov     edx, ds:_iob
.text:00401E20                 mov     [esp+1438h+Category], ebx ; Buffer
.text:00401E23                 add     edx, 20h ; ' '
.text:00401E26                 mov     [esp+1438h+Locale], edx ; Stream
.text:00401E2A                 call    fputs
.text:00401E2F
.text:00401E2F loc_401E2F:                             ; CODE XREF: sub_401800+5DE↑j
.text:00401E2F                 test    esi, 10h
.text:00401E35                 jz      loc_401B09
.text:00401E3B                 cmp     ds:byte_409000, 0
.text:00401E42                 lea     ebx, [ebp+var_418]
.text:00401E48                 jz      short loc_401E6A
.text:00401E4A                 mov     ecx, ds:_iob
.text:00401E50                 mov     edi, [ecx+24h]
.text:00401E53                 dec     edi
.text:00401E54                 mov     [ecx+24h], edi
.text:00401E57                 test    edi, edi
.text:00401E59                 js      short loc_401E8B
.text:00401E5B                 mov     edi, ds:_iob
.text:00401E61                 mov     eax, [edi+20h]
.text:00401E64                 mov     byte ptr [eax], 20h ; ' '
.text:00401E67                 inc     dword ptr [edi+20h]
.text:00401E6A
.text:00401E6A loc_401E6A:                             ; CODE XREF: sub_401800+648↑j
.text:00401E6A                                         ; sub_401800+6A4↓j
.text:00401E6A                 mov     ds:byte_409000, 1
.text:00401E71                 mov     ecx, ds:_iob
.text:00401E77                 mov     [esp+1438h+Category], ebx ; Buffer
.text:00401E7A                 add     ecx, 20h ; ' '
.text:00401E7D                 mov     [esp+1438h+Locale], ecx ; Stream
.text:00401E81                 call    fputs
.text:00401E86                 jmp     loc_401B09
.text:00401E8B ; ---------------------------------------------------------------------------
.text:00401E8B
.text:00401E8B loc_401E8B:                             ; CODE XREF: sub_401800+659↑j
.text:00401E8B                 mov     [esp+1438h+Category], 20h ; ' ' ; Ch
.text:00401E92                 mov     edx, ds:_iob
.text:00401E98                 add     edx, 20h ; ' '
.text:00401E9B                 mov     [esp+1438h+Locale], edx ; File
.text:00401E9F                 call    _flsbuf
.text:00401EA4                 jmp     short loc_401E6A
.text:00401EA6 ; ---------------------------------------------------------------------------
.text:00401EA6
.text:00401EA6 loc_401EA6:                             ; CODE XREF: sub_401800+5FE↑j
.text:00401EA6                 mov     [esp+1438h+Category], 20h ; ' ' ; Ch
.text:00401EAD                 mov     ecx, ds:_iob
.text:00401EB3                 add     ecx, 20h ; ' '
.text:00401EB6                 mov     [esp+1438h+Locale], ecx ; File
.text:00401EBA                 call    _flsbuf
.text:00401EBF                 jmp     loc_401E13
.text:00401EC4 ; ---------------------------------------------------------------------------
.text:00401EC4
.text:00401EC4 loc_401EC4:                             ; CODE XREF: sub_401800+5A7↑j
.text:00401EC4                 mov     [esp+1438h+Category], 20h ; ' ' ; Ch
.text:00401ECB                 mov     edx, ds:_iob
.text:00401ED1                 add     edx, 20h ; ' '
.text:00401ED4                 mov     [esp+1438h+Locale], edx ; File
.text:00401ED8                 call    _flsbuf
.text:00401EDD                 jmp     loc_401DBC
.text:00401EE2 ; ---------------------------------------------------------------------------
.text:00401EE2
.text:00401EE2 loc_401EE2:                             ; CODE XREF: sub_401800+550↑j
.text:00401EE2                 mov     [esp+1438h+Category], 20h ; ' ' ; Ch
.text:00401EE9                 mov     edi, ds:_iob
.text:00401EEF                 add     edi, 20h ; ' '
.text:00401EF2                 mov     [esp+1438h+Locale], edi ; File
.text:00401EF6                 call    _flsbuf
.text:00401EFB                 jmp     loc_401D65
.text:00401F00 ; ---------------------------------------------------------------------------
.text:00401F00
.text:00401F00 loc_401F00:                             ; CODE XREF: sub_401800+4F9↑j
.text:00401F00                 mov     [esp+1438h+Category], 20h ; ' ' ; Ch
.text:00401F07                 mov     edx, ds:_iob
.text:00401F0D                 add     edx, 20h ; ' '
.text:00401F10                 mov     [esp+1438h+Locale], edx ; File
.text:00401F14                 call    _flsbuf
.text:00401F19                 jmp     loc_401D0E
.text:00401F1E ; ---------------------------------------------------------------------------
.text:00401F1E
.text:00401F1E loc_401F1E:                             ; CODE XREF: sub_401800+4D3↑j
.text:00401F1E                 mov     [esp+1438h+Category], (offset stru_4017C7._tmpfname+1)
.text:00401F25                 call    ds:libintl_gettext
.text:00401F2B                 mov     ebx, eax
.text:00401F2D                 call    _errno
.text:00401F32                 mov     [esp+1438h+var_1430], ebx ; char *
.text:00401F36                 mov     edx, [eax]
.text:00401F38                 mov     [esp+1438h+Category], 1 ; Code
.text:00401F3F                 mov     [esp+1438h+Locale], edx ; ErrorMessage
.text:00401F43                 call    sub_404F50
.text:00401F48                 jmp     loc_401CD9
.text:00401F48 sub_401800      endp
.text:00401F48
.text:00401F48 ; ---------------------------------------------------------------------------
.text:00401F4D                 align 10h
.text:00401F50                 sub     esp, 1Ch
.text:00401F53                 mov     [esp+18h], ebx
.text:00401F57                 mov     ebx, [esp+20h]
.text:00401F5B                 test    ebx, ebx
.text:00401F5D                 jz      short loc_401F93
.text:00401F5F                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401F66                 call    ds:libintl_gettext
.text:00401F6C                 mov     edx, ds:_iob
.text:00401F72                 mov     ecx, ds:dword_409390
.text:00401F78                 add     edx, 40h ; '@'
.text:00401F7B                 mov     [esp+8], ecx
.text:00401F7F                 mov     [esp+4], eax
.text:00401F83                 mov     [esp], edx
.text:00401F86                 call    fprintf
.text:00401F8B
.text:00401F8B loc_401F8B:                             ; CODE XREF: .text:00402057↓j
.text:00401F8B                 mov     [esp], ebx
.text:00401F8E                 call    exit
.text:00401F93 ; ---------------------------------------------------------------------------
.text:00401F93
.text:00401F93 loc_401F93:                             ; CODE XREF: .text:00401F5D↑j
.text:00401F93                 mov     dword ptr [esp], offset aUsageSOption ; "Usage: %s [OPTION]...\n"
.text:00401F9A                 call    ds:libintl_gettext
.text:00401FA0                 mov     ecx, ds:dword_409390
.text:00401FA6                 mov     [esp], eax
.text:00401FA9                 mov     [esp+4], ecx
.text:00401FAD                 call    printf
.text:00401FB2                 mov     dword ptr [esp], offset aPrintCertainSy ; "Print certain system information.  With"...
.text:00401FB9                 call    ds:libintl_gettext
.text:00401FBF                 mov     ecx, ds:_iob
.text:00401FC5                 add     ecx, 20h ; ' '
.text:00401FC8                 mov     [esp+4], ecx
.text:00401FCC                 mov     [esp], eax
.text:00401FCF                 call    fputs
.text:00401FD4                 mov     dword ptr [esp], offset aVKernelVersion ; "  -v, --kernel-version     print the ke"...
.text:00401FDB                 call    ds:libintl_gettext
.text:00401FE1                 mov     ecx, ds:_iob
.text:00401FE7                 add     ecx, 20h ; ' '
.text:00401FEA                 mov     [esp+4], ecx
.text:00401FEE                 mov     [esp], eax
.text:00401FF1                 call    fputs
.text:00401FF6                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401FFD                 call    ds:libintl_gettext
.text:00402003                 mov     ecx, ds:_iob
.text:00402009                 add     ecx, 20h ; ' '
.text:0040200C                 mov     [esp+4], ecx
.text:00402010                 mov     [esp], eax
.text:00402013                 call    fputs
.text:00402018                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:0040201F                 call    ds:libintl_gettext
.text:00402025                 mov     ecx, ds:_iob
.text:0040202B                 add     ecx, 20h ; ' '
.text:0040202E                 mov     [esp+4], ecx
.text:00402032                 mov     [esp], eax
.text:00402035                 call    fputs
.text:0040203A                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402041                 call    ds:libintl_gettext
.text:00402047                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040204F                 mov     [esp], eax
.text:00402052                 call    printf
.text:00402057                 jmp     loc_401F8B
.text:00402057 ; ---------------------------------------------------------------------------
.text:0040205C                 align 10h
.text:00402060 dword_402060    dd 90002D2Dh, 7 dup(90909090h)
.text:00402060                                         ; DATA XREF: sub_4022B0+E4↓o
.text:00402080 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402080                                         ; DATA XREF: sub_4022B0+2FC↓o
.text:004020AD                 align 20h
.text:004020C0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004020C0                                         ; DATA XREF: sub_4022B0:loc_402612↓o
.text:004020ED                 align 20h
.text:00402100 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00402100                                         ; DATA XREF: sub_4022B0:loc_4026B0↓o
.text:00402100                                         ; sub_4022B0:loc_402A77↓o
.text:00402126                 align 20h
.text:00402140 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00402140                                         ; DATA XREF: sub_4022B0+48E↓o
.text:00402160 dword_402160    dd 90909000h, 7 dup(90909090h)
.text:00402160                                         ; DATA XREF: sub_4022B0:loc_402781↓o
.text:00402180 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00402180                                         ; DATA XREF: sub_4022B0:loc_40279A↓o
.text:004021A0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:004021A0                                         ; DATA XREF: sub_4022B0:loc_40287F↓o
.text:004021A0                                         ; sub_4022B0:loc_402BAC↓o
.text:004021C7                 align 20h
.text:004021E0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004021E0                                         ; DATA XREF: sub_4022B0:loc_4029F3↓o
.text:0040220E                 align 20h
.text:00402220 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00402220                                         ; DATA XREF: sub_4022B0:loc_402ADF↓o
.text:00402241 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00402241                                         ; DATA XREF: sub_4022B0+93F↓o
.text:0040225B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040225B                                         ; DATA XREF: sub_4022B0:loc_402C27↓o
.text:00402275 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00402275                                         ; DATA XREF: sub_4022B0:loc_402C4E↓o
.text:00402293 ; const char VarName[]
.text:00402293 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_4022B0:loc_402E00↓o
.text:004022A3                 align 10h
.text:004022B0
.text:004022B0 ; =============== S U B R O U T I N E =======================================
.text:004022B0
.text:004022B0
.text:004022B0 ; int __cdecl sub_4022B0(int, int, char *Str, int, int, int, int, int)
.text:004022B0 sub_4022B0      proc near               ; CODE XREF: sub_402E40+5A↓p
.text:004022B0                                         ; .text:00402F2A↓p ...
.text:004022B0
.text:004022B0 Str1            = dword ptr -5Ch
.text:004022B0 Str2            = dword ptr -58h
.text:004022B0 MaxCount        = dword ptr -54h
.text:004022B0 var_50          = dword ptr -50h
.text:004022B0 var_4C          = dword ptr -4Ch
.text:004022B0 var_3C          = dword ptr -3Ch
.text:004022B0 var_38          = dword ptr -38h
.text:004022B0 var_34          = dword ptr -34h
.text:004022B0 var_30          = dword ptr -30h
.text:004022B0 var_2C          = dword ptr -2Ch
.text:004022B0 var_28          = dword ptr -28h
.text:004022B0 var_24          = dword ptr -24h
.text:004022B0 var_20          = dword ptr -20h
.text:004022B0 var_1C          = dword ptr -1Ch
.text:004022B0 var_18          = dword ptr -18h
.text:004022B0 var_14          = dword ptr -14h
.text:004022B0 arg_0           = dword ptr  4
.text:004022B0 arg_4           = dword ptr  8
.text:004022B0 Str             = dword ptr  0Ch
.text:004022B0 arg_C           = dword ptr  10h
.text:004022B0 arg_10          = dword ptr  14h
.text:004022B0 arg_14          = dword ptr  18h
.text:004022B0 arg_18          = dword ptr  1Ch
.text:004022B0 arg_1C          = dword ptr  20h
.text:004022B0
.text:004022B0                 push    ebp
.text:004022B1                 mov     eax, 0FFFFFFFFh
.text:004022B6                 push    edi
.text:004022B7                 push    esi
.text:004022B8                 push    ebx
.text:004022B9                 sub     esp, 4Ch
.text:004022BC                 mov     esi, [esp+5Ch+Str]
.text:004022C0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004022C4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004022C7                 mov     ebx, [ebp+4]
.text:004022CA                 setz    dl
.text:004022CD                 movzx   ecx, dl
.text:004022D0                 dec     ecx
.text:004022D1                 and     ecx, ebx
.text:004022D3                 mov     [esp+5Ch+var_14], ecx
.text:004022D7                 mov     ecx, [esp+5Ch+arg_0]
.text:004022DB                 test    ecx, ecx
.text:004022DD                 jle     loc_402407
.text:004022E3                 mov     dword ptr [ebp+0Ch], 0
.text:004022EA                 mov     ebx, [ebp+0]
.text:004022ED                 test    ebx, ebx
.text:004022EF                 jz      loc_402E20
.text:004022F5                 mov     edi, [ebp+10h]
.text:004022F8                 test    edi, edi
.text:004022FA                 jnz     short loc_402353
.text:004022FC                 lea     esi, [esi+0]
.text:00402300
.text:00402300 loc_402300:                             ; CODE XREF: sub_4022B0+B7C↓j
.text:00402300                 mov     [ebp+24h], ebx
.text:00402303                 mov     esi, [esp+5Ch+Str]
.text:00402307                 mov     [ebp+20h], ebx
.text:0040230A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040230E                 xor     ebx, ebx
.text:00402310                 mov     dword ptr [ebp+14h], 0
.text:00402317                 test    ecx, ecx
.text:00402319                 jz      loc_402E00
.text:0040231F
.text:0040231F loc_40231F:                             ; CODE XREF: sub_4022B0+B64↓j
.text:0040231F                 mov     ebx, 1
.text:00402324
.text:00402324 loc_402324:                             ; CODE XREF: sub_4022B0+B5E↓j
.text:00402324                 mov     [ebp+1Ch], ebx
.text:00402327                 mov     ecx, [esp+5Ch+Str]
.text:0040232B                 movzx   eax, byte ptr [ecx]
.text:0040232E                 cmp     al, 2Dh ; '-'
.text:00402330                 jz      loc_402DF0
.text:00402336                 cmp     al, 2Bh ; '+'
.text:00402338                 jz      loc_402DD9
.text:0040233E                 xor     edx, edx
.text:00402340                 test    ebx, ebx
.text:00402342                 setz    dl
.text:00402345                 mov     [ebp+18h], edx
.text:00402348
.text:00402348 loc_402348:                             ; CODE XREF: sub_4022B0+B35↓j
.text:00402348                 mov     [esp+5Ch+Str], esi
.text:0040234C                 mov     dword ptr [ebp+10h], 1
.text:00402353
.text:00402353 loc_402353:                             ; CODE XREF: sub_4022B0+4A↑j
.text:00402353                 mov     eax, [ebp+14h]
.text:00402356                 test    eax, eax
.text:00402358                 jz      short loc_402363
.text:0040235A                 cmp     byte ptr [eax], 0
.text:0040235D                 jnz     loc_402440
.text:00402363
.text:00402363 loc_402363:                             ; CODE XREF: sub_4022B0+A8↑j
.text:00402363                 mov     ebx, [ebp+0]
.text:00402366                 cmp     [ebp+24h], ebx
.text:00402369                 jle     short loc_40236E
.text:0040236B                 mov     [ebp+24h], ebx
.text:0040236E
.text:0040236E loc_40236E:                             ; CODE XREF: sub_4022B0+B9↑j
.text:0040236E                 cmp     [ebp+20h], ebx
.text:00402371                 jle     short loc_402376
.text:00402373                 mov     [ebp+20h], ebx
.text:00402376
.text:00402376 loc_402376:                             ; CODE XREF: sub_4022B0+C1↑j
.text:00402376                 cmp     dword ptr [ebp+18h], 1
.text:0040237A                 jz      loc_402D50
.text:00402380
.text:00402380 loc_402380:                             ; CODE XREF: sub_4022B0+B13↓j
.text:00402380                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402384                 jz      loc_402D34
.text:0040238A                 cld
.text:0040238B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040238F                 mov     edx, 3
.text:00402394                 mov     edi, offset dword_402060
.text:00402399                 mov     esi, [ecx+ebx*4]
.text:0040239C                 mov     ecx, edx
.text:0040239E                 repe cmpsb
.text:004023A0                 jnz     short loc_4023DC
.text:004023A2                 mov     edx, [ebp+24h]
.text:004023A5                 lea     eax, [ebx+1]
.text:004023A8                 cmp     [ebp+20h], edx
.text:004023AB                 mov     [ebp+0], eax
.text:004023AE                 jz      loc_402D48
.text:004023B4                 cmp     edx, eax
.text:004023B6                 jz      short loc_4023D0
.text:004023B8                 mov     [esp+5Ch+Str2], ebp
.text:004023BC                 mov     ebx, [esp+5Ch+arg_4]
.text:004023C0                 mov     [esp+5Ch+Str1], ebx
.text:004023C3                 call    sub_402F60
.text:004023C8                 nop
.text:004023C9                 lea     esi, [esi+0]
.text:004023D0
.text:004023D0 loc_4023D0:                             ; CODE XREF: sub_4022B0+106↑j
.text:004023D0                                         ; sub_4022B0+A9B↓j
.text:004023D0                 mov     eax, [esp+5Ch+arg_0]
.text:004023D4                 mov     ebx, eax
.text:004023D6                 mov     [ebp+24h], eax
.text:004023D9                 mov     [ebp+0], eax
.text:004023DC
.text:004023DC loc_4023DC:                             ; CODE XREF: sub_4022B0+F0↑j
.text:004023DC                 cmp     ebx, [esp+5Ch+arg_0]
.text:004023E0                 jz      loc_402D34
.text:004023E6                 mov     esi, [esp+5Ch+arg_4]
.text:004023EA                 mov     eax, [esi+ebx*4]
.text:004023ED                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004023F0                 jz      short loc_402417
.text:004023F2
.text:004023F2 loc_4023F2:                             ; CODE XREF: sub_4022B0+16D↓j
.text:004023F2                 mov     edx, [ebp+18h]
.text:004023F5                 test    edx, edx
.text:004023F7                 jz      short loc_402410
.text:004023F9                 mov     [ebp+0Ch], eax
.text:004023FC                 lea     edi, [ebx+1]
.text:004023FF                 mov     eax, 1
.text:00402404                 mov     [ebp+0], edi
.text:00402407
.text:00402407 loc_402407:                             ; CODE XREF: sub_4022B0+2D↑j
.text:00402407                                         ; sub_4022B0+165↓j ...
.text:00402407                 add     esp, 4Ch
.text:0040240A                 pop     ebx
.text:0040240B                 pop     esi
.text:0040240C                 pop     edi
.text:0040240D                 pop     ebp
.text:0040240E                 retn
.text:0040240E ; ---------------------------------------------------------------------------
.text:0040240F                 align 10h
.text:00402410
.text:00402410 loc_402410:                             ; CODE XREF: sub_4022B0+147↑j
.text:00402410                                         ; sub_4022B0+A8A↓j ...
.text:00402410                 mov     eax, 0FFFFFFFFh
.text:00402415                 jmp     short loc_402407
.text:00402417 ; ---------------------------------------------------------------------------
.text:00402417
.text:00402417 loc_402417:                             ; CODE XREF: sub_4022B0+140↑j
.text:00402417                 movzx   edx, byte ptr [eax+1]
.text:0040241B                 test    dl, dl
.text:0040241D                 jz      short loc_4023F2
.text:0040241F                 mov     ebx, [esp+5Ch+arg_C]
.text:00402423                 xor     ecx, ecx
.text:00402425                 test    ebx, ebx
.text:00402427                 jz      short loc_402432
.text:00402429                 cmp     dl, 2Dh ; '-'
.text:0040242C                 jz      loc_402D2A
.text:00402432
.text:00402432 loc_402432:                             ; CODE XREF: sub_4022B0+177↑j
.text:00402432                                         ; sub_4022B0+A7F↓j
.text:00402432                 lea     esi, [ecx+eax+1]
.text:00402436                 mov     [ebp+14h], esi
.text:00402439                 lea     esi, [esi+0]
.text:00402440
.text:00402440 loc_402440:                             ; CODE XREF: sub_4022B0+AD↑j
.text:00402440                 mov     ecx, [esp+5Ch+arg_C]
.text:00402444                 test    ecx, ecx
.text:00402446                 jz      loc_4027D0
.text:0040244C                 mov     edx, [ebp+0]
.text:0040244F                 mov     edi, [esp+5Ch+arg_4]
.text:00402453                 mov     eax, [edi+edx*4]
.text:00402456                 movzx   edx, byte ptr [eax+1]
.text:0040245A                 cmp     dl, 2Dh ; '-'
.text:0040245D                 jz      short loc_402475
.text:0040245F                 mov     ebx, [esp+5Ch+arg_14]
.text:00402463                 test    ebx, ebx
.text:00402465                 jz      loc_4027D0
.text:0040246B                 cmp     byte ptr [eax+2], 0
.text:0040246F                 jz      loc_402D0A
.text:00402475
.text:00402475 loc_402475:                             ; CODE XREF: sub_4022B0+1AD↑j
.text:00402475                                         ; sub_4022B0+A75↓j
.text:00402475                 mov     [esp+5Ch+var_18], 0
.text:0040247D                 mov     ecx, [ebp+14h]
.text:00402480                 mov     [esp+5Ch+var_1C], 0
.text:00402488                 mov     [esp+5Ch+var_20], 0
.text:00402490                 mov     edi, ecx
.text:00402492                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040249A                 movzx   eax, byte ptr [ecx]
.text:0040249D                 test    al, al
.text:0040249F                 jz      short loc_4024BC
.text:004024A1                 cmp     al, 3Dh ; '='
.text:004024A3                 jz      short loc_4024BC
.text:004024A5                 lea     esi, [esi+0]
.text:004024A9                 lea     edi, [edi+0]
.text:004024B0
.text:004024B0 loc_4024B0:                             ; CODE XREF: sub_4022B0+20A↓j
.text:004024B0                 inc     edi
.text:004024B1                 movzx   eax, byte ptr [edi]
.text:004024B4                 test    al, al
.text:004024B6                 jz      short loc_4024BC
.text:004024B8                 cmp     al, 3Dh ; '='
.text:004024BA                 jnz     short loc_4024B0
.text:004024BC
.text:004024BC loc_4024BC:                             ; CODE XREF: sub_4022B0+1EF↑j
.text:004024BC                                         ; sub_4022B0+1F3↑j ...
.text:004024BC                 mov     [esp+5Ch+var_28], 0
.text:004024C4                 mov     esi, [esp+5Ch+arg_C]
.text:004024C8                 mov     ebx, [esi]
.text:004024CA                 test    ebx, ebx
.text:004024CC                 mov     edx, ebx
.text:004024CE                 jz      loc_4026F0
.text:004024D4                 lea     esi, [esi+0]
.text:004024DA                 lea     edi, [edi+0]
.text:004024E0
.text:004024E0 loc_4024E0:                             ; CODE XREF: sub_4022B0+25E↓j
.text:004024E0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:004024E4                 mov     ebx, edi
.text:004024E6                 sub     ebx, ecx
.text:004024E8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:004024EC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004024EF                 call    strncmp
.text:004024F4                 test    eax, eax
.text:004024F6                 jz      loc_402C86
.text:004024FC
.text:004024FC loc_4024FC:                             ; CODE XREF: sub_4022B0+A0F↓j
.text:004024FC                                         ; sub_4022B0+A24↓j ...
.text:004024FC                 inc     [esp+5Ch+var_28]
.text:00402500                 add     esi, 10h
.text:00402503                 mov     ecx, [esi]
.text:00402505                 test    ecx, ecx
.text:00402507                 mov     edx, ecx
.text:00402509                 jz      short loc_402510
.text:0040250B                 mov     ecx, [ebp+14h]
.text:0040250E                 jmp     short loc_4024E0
.text:00402510 ; ---------------------------------------------------------------------------
.text:00402510
.text:00402510 loc_402510:                             ; CODE XREF: sub_4022B0+259↑j
.text:00402510                                         ; sub_4022B0+A55↓j
.text:00402510                 mov     esi, [esp+5Ch+var_20]
.text:00402514                 test    esi, esi
.text:00402516                 jz      short loc_402524
.text:00402518                 mov     edx, [esp+5Ch+var_1C]
.text:0040251C                 test    edx, edx
.text:0040251E                 jz      loc_402C30
.text:00402524
.text:00402524 loc_402524:                             ; CODE XREF: sub_4022B0+266↑j
.text:00402524                 mov     eax, [esp+5Ch+var_18]
.text:00402528                 test    eax, eax
.text:0040252A                 jz      loc_4026F0
.text:00402530                 mov     ecx, [ebp+0]
.text:00402533                 lea     eax, [ecx+1]
.text:00402536                 mov     [ebp+0], eax
.text:00402539                 cmp     byte ptr [edi], 0
.text:0040253C                 jz      loc_402650
.text:00402542                 mov     ecx, [esp+5Ch+var_18]
.text:00402546                 mov     esi, [ecx+4]
.text:00402549                 test    esi, esi
.text:0040254B                 jz      short loc_402596
.text:0040254D                 lea     ebx, [edi+1]
.text:00402550                 mov     [ebp+0Ch], ebx
.text:00402553
.text:00402553 loc_402553:                             ; CODE XREF: sub_4022B0+3A8↓j
.text:00402553                                         ; sub_4022B0+3C4↓j
.text:00402553                 mov     ebx, [ebp+14h]
.text:00402556                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00402559                 call    strlen
.text:0040255E                 add     [ebp+14h], eax
.text:00402561                 mov     esi, [esp+5Ch+arg_10]
.text:00402565                 test    esi, esi
.text:00402567                 jz      short loc_402573
.text:00402569                 mov     ebp, [esp+5Ch+var_24]
.text:0040256D                 mov     ecx, [esp+5Ch+arg_10]
.text:00402571                 mov     [ecx], ebp
.text:00402573
.text:00402573 loc_402573:                             ; CODE XREF: sub_4022B0+2B7↑j
.text:00402573                 mov     eax, [esp+5Ch+var_18]
.text:00402577                 mov     ecx, [eax+8]
.text:0040257A                 test    ecx, ecx
.text:0040257C                 jnz     short loc_40258A
.text:0040257E                 mov     ecx, [esp+5Ch+var_18]
.text:00402582
.text:00402582 loc_402582:                             ; CODE XREF: sub_4022B0+723↓j
.text:00402582                 mov     eax, [ecx+0Ch]
.text:00402585                 jmp     loc_402407
.text:0040258A ; ---------------------------------------------------------------------------
.text:0040258A
.text:0040258A loc_40258A:                             ; CODE XREF: sub_4022B0+2CC↑j
.text:0040258A                                         ; sub_4022B0+719↓j
.text:0040258A                 mov     esi, [eax+0Ch]
.text:0040258D                 xor     eax, eax
.text:0040258F                 mov     [ecx], esi
.text:00402591                 jmp     loc_402407
.text:00402596 ; ---------------------------------------------------------------------------
.text:00402596
.text:00402596 loc_402596:                             ; CODE XREF: sub_4022B0+29B↑j
.text:00402596                 mov     edi, [esp+5Ch+var_14]
.text:0040259A                 test    edi, edi
.text:0040259C                 jz      short loc_4025F0
.text:0040259E                 mov     esi, [esp+5Ch+arg_4]
.text:004025A2                 mov     edx, [esi+eax*4-4]
.text:004025A6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:004025AA                 jz      short loc_402612
.text:004025AC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:004025B3                 call    ds:libintl_gettext
.text:004025B9                 mov     edx, [esp+5Ch+var_18]
.text:004025BD                 mov     edi, [edx]
.text:004025BF                 mov     [esp+5Ch+var_4C], edi
.text:004025C3                 mov     ebx, [ebp+0]
.text:004025C6                 mov     edi, [esp+5Ch+arg_4]
.text:004025CA                 mov     ecx, [edi+ebx*4-4]
.text:004025CE                 movsx   esi, byte ptr [ecx]
.text:004025D1                 mov     ecx, ds:_iob
.text:004025D7                 add     ecx, 40h ; '@'
.text:004025DA                 mov     [esp+5Ch+var_50], esi
.text:004025DE                 mov     ebx, [edi]
.text:004025E0                 mov     [esp+5Ch+Str2], eax ; Format
.text:004025E4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004025E7                 mov     [esp+5Ch+MaxCount], ebx
.text:004025EB                 call    fprintf
.text:004025F0
.text:004025F0 loc_4025F0:                             ; CODE XREF: sub_4022B0+2EC↑j
.text:004025F0                                         ; sub_4022B0+398↓j
.text:004025F0                 mov     ecx, [ebp+14h]
.text:004025F3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004025F6                 call    strlen
.text:004025FB                 add     [ebp+14h], eax
.text:004025FE                 mov     eax, [esp+5Ch+var_18]
.text:00402602                 mov     esi, [eax+0Ch]
.text:00402605                 mov     [ebp+8], esi
.text:00402608
.text:00402608 loc_402608:                             ; CODE XREF: sub_4022B0+4E5↓j
.text:00402608                                         ; sub_4022B0+73E↓j ...
.text:00402608                 mov     eax, 3Fh ; '?'
.text:0040260D                 jmp     loc_402407
.text:00402612 ; ---------------------------------------------------------------------------
.text:00402612
.text:00402612 loc_402612:                             ; CODE XREF: sub_4022B0+2FA↑j
.text:00402612                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00402619                 call    ds:libintl_gettext
.text:0040261F                 mov     edx, [esp+5Ch+var_18]
.text:00402623                 mov     edi, [esp+5Ch+arg_4]
.text:00402627                 mov     ecx, ds:_iob
.text:0040262D                 mov     esi, [edx]
.text:0040262F                 add     ecx, 40h ; '@'
.text:00402632                 mov     [esp+5Ch+var_50], esi
.text:00402636                 mov     ebx, [edi]
.text:00402638                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040263C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040263F                 mov     [esp+5Ch+MaxCount], ebx
.text:00402643                 call    fprintf
.text:00402648                 jmp     short loc_4025F0
.text:00402648 ; ---------------------------------------------------------------------------
.text:0040264A                 align 10h
.text:00402650
.text:00402650 loc_402650:                             ; CODE XREF: sub_4022B0+28C↑j
.text:00402650                 mov     ebx, [esp+5Ch+var_18]
.text:00402654                 cmp     dword ptr [ebx+4], 1
.text:00402658                 jnz     loc_402553
.text:0040265E                 cmp     eax, [esp+5Ch+arg_0]
.text:00402662                 jge     short loc_402679
.text:00402664                 mov     ebx, [esp+5Ch+arg_4]
.text:00402668                 lea     edi, [ecx+2]
.text:0040266B                 mov     [ebp+0], edi
.text:0040266E                 mov     esi, [ebx+eax*4]
.text:00402671                 mov     [ebp+0Ch], esi
.text:00402674                 jmp     loc_402553
.text:00402679 ; ---------------------------------------------------------------------------
.text:00402679
.text:00402679 loc_402679:                             ; CODE XREF: sub_4022B0+3B2↑j
.text:00402679                 mov     edx, [esp+5Ch+var_14]
.text:0040267D                 test    edx, edx
.text:0040267F                 jnz     short loc_4026B0
.text:00402681
.text:00402681 loc_402681:                             ; CODE XREF: sub_4022B0+437↓j
.text:00402681                 mov     edx, [ebp+14h]
.text:00402684                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402687                 call    strlen
.text:0040268C                 add     [ebp+14h], eax
.text:0040268F                 mov     eax, [esp+5Ch+var_18]
.text:00402693                 mov     edi, [eax+0Ch]
.text:00402696                 mov     [ebp+8], edi
.text:00402699
.text:00402699 loc_402699:                             ; CODE XREF: sub_4022B0+7C2↓j
.text:00402699                 mov     ebp, [esp+5Ch+Str]
.text:0040269D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004026A1                 setnz   bl
.text:004026A4                 movzx   esi, bl
.text:004026A7                 lea     eax, [esi+esi*4+3Ah]
.text:004026AB                 jmp     loc_402407
.text:004026B0 ; ---------------------------------------------------------------------------
.text:004026B0
.text:004026B0 loc_4026B0:                             ; CODE XREF: sub_4022B0+3CF↑j
.text:004026B0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004026B7                 call    ds:libintl_gettext
.text:004026BD                 mov     ecx, [ebp+0]
.text:004026C0                 mov     esi, [esp+5Ch+arg_4]
.text:004026C4                 mov     ebx, [esi+ecx*4-4]
.text:004026C8                 mov     ecx, ds:_iob
.text:004026CE                 mov     [esp+5Ch+var_50], ebx
.text:004026D2                 mov     edi, [esi]
.text:004026D4                 add     ecx, 40h ; '@'
.text:004026D7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004026DB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004026DE                 mov     [esp+5Ch+MaxCount], edi
.text:004026E2                 call    fprintf
.text:004026E7                 jmp     short loc_402681
.text:004026E7 ; ---------------------------------------------------------------------------
.text:004026E9                 align 10h
.text:004026F0
.text:004026F0 loc_4026F0:                             ; CODE XREF: sub_4022B0+21E↑j
.text:004026F0                                         ; sub_4022B0+27A↑j
.text:004026F0                 mov     eax, [esp+5Ch+arg_14]
.text:004026F4                 test    eax, eax
.text:004026F6                 jz      short loc_402726
.text:004026F8                 mov     ebx, [ebp+0]
.text:004026FB                 mov     esi, [esp+5Ch+arg_4]
.text:004026FF                 mov     edi, [esi+ebx*4]
.text:00402702                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402706                 jz      short loc_402729
.text:00402708                 mov     ecx, [ebp+14h]
.text:0040270B                 mov     edx, [esp+5Ch+Str]
.text:0040270F                 movsx   ebx, byte ptr [ecx]
.text:00402712                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402715                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00402719                 call    strchr
.text:0040271E                 test    eax, eax
.text:00402720                 jnz     loc_4027D0
.text:00402726
.text:00402726 loc_402726:                             ; CODE XREF: sub_4022B0+446↑j
.text:00402726                 mov     ebx, [ebp+0]
.text:00402729
.text:00402729 loc_402729:                             ; CODE XREF: sub_4022B0+456↑j
.text:00402729                 mov     eax, [esp+5Ch+var_14]
.text:0040272D                 test    eax, eax
.text:0040272F                 jz      short loc_402781
.text:00402731                 mov     esi, [esp+5Ch+arg_4]
.text:00402735                 mov     edi, [esi+ebx*4]
.text:00402738                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040273C                 jz      short loc_40279A
.text:0040273E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00402745                 call    ds:libintl_gettext
.text:0040274B                 mov     edi, [ebp+14h]
.text:0040274E                 mov     [esp+5Ch+var_4C], edi
.text:00402752                 mov     ebx, [ebp+0]
.text:00402755                 mov     edi, [esp+5Ch+arg_4]
.text:00402759                 mov     esi, [edi+ebx*4]
.text:0040275C                 movsx   ecx, byte ptr [esi]
.text:0040275F                 mov     esi, ds:_iob
.text:00402765                 add     esi, 40h ; '@'
.text:00402768                 mov     [esp+5Ch+var_50], ecx
.text:0040276C                 mov     ebx, [edi]
.text:0040276E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402772                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00402775                 mov     [esp+5Ch+MaxCount], ebx
.text:00402779                 call    fprintf
.text:0040277E
.text:0040277E loc_40277E:                             ; CODE XREF: sub_4022B0+51D↓j
.text:0040277E                 mov     ebx, [ebp+0]
.text:00402781
.text:00402781 loc_402781:                             ; CODE XREF: sub_4022B0+47F↑j
.text:00402781                 mov     dword ptr [ebp+14h], offset dword_402160
.text:00402788                 lea     edx, [ebx+1]
.text:0040278B                 mov     [ebp+0], edx
.text:0040278E
.text:0040278E loc_40278E:                             ; CODE XREF: sub_4022B0+999↓j
.text:0040278E                 mov     dword ptr [ebp+8], 0
.text:00402795                 jmp     loc_402608
.text:0040279A ; ---------------------------------------------------------------------------
.text:0040279A
.text:0040279A loc_40279A:                             ; CODE XREF: sub_4022B0+48C↑j
.text:0040279A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:004027A1                 call    ds:libintl_gettext
.text:004027A7                 mov     ecx, [ebp+14h]
.text:004027AA                 mov     edi, [esp+5Ch+arg_4]
.text:004027AE                 mov     edx, ds:_iob
.text:004027B4                 mov     [esp+5Ch+var_50], ecx
.text:004027B8                 mov     ebx, [edi]
.text:004027BA                 add     edx, 40h ; '@'
.text:004027BD                 mov     [esp+5Ch+Str2], eax ; Format
.text:004027C1                 mov     [esp+5Ch+MaxCount], ebx
.text:004027C5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004027C8                 call    fprintf
.text:004027CD                 jmp     short loc_40277E
.text:004027CD ; ---------------------------------------------------------------------------
.text:004027CF                 align 10h
.text:004027D0
.text:004027D0 loc_4027D0:                             ; CODE XREF: sub_4022B0+196↑j
.text:004027D0                                         ; sub_4022B0+1B5↑j ...
.text:004027D0                 mov     esi, [ebp+14h]
.text:004027D3                 movzx   ebx, byte ptr [esi]
.text:004027D6                 inc     esi
.text:004027D7                 mov     [ebp+14h], esi
.text:004027DA                 mov     ecx, [esp+5Ch+Str]
.text:004027DE                 movsx   esi, bl
.text:004027E1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004027E5                 mov     edi, esi
.text:004027E7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004027EA                 call    strchr
.text:004027EF                 mov     ecx, [ebp+14h]
.text:004027F2                 cmp     byte ptr [ecx], 0
.text:004027F5                 jnz     short loc_4027FA
.text:004027F7                 inc     dword ptr [ebp+0]
.text:004027FA
.text:004027FA loc_4027FA:                             ; CODE XREF: sub_4022B0+545↑j
.text:004027FA                 test    eax, eax
.text:004027FC                 jz      loc_402BE0
.text:00402802                 cmp     bl, 3Ah ; ':'
.text:00402805                 jz      loc_402BE0
.text:0040280B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040280E                 jz      loc_4028C6
.text:00402814                 movzx   edx, byte ptr [eax+1]
.text:00402818
.text:00402818 loc_402818:                             ; CODE XREF: sub_4022B0+61D↓j
.text:00402818                 cmp     dl, 3Ah ; ':'
.text:0040281B                 jz      short loc_402824
.text:0040281D
.text:0040281D loc_40281D:                             ; CODE XREF: sub_4022B0+590↓j
.text:0040281D                 mov     eax, esi
.text:0040281F                 jmp     loc_402407
.text:00402824 ; ---------------------------------------------------------------------------
.text:00402824
.text:00402824 loc_402824:                             ; CODE XREF: sub_4022B0+56B↑j
.text:00402824                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402828                 jz      loc_4028B1
.text:0040282E                 cmp     byte ptr [ecx], 0
.text:00402831                 jz      short loc_402842
.text:00402833
.text:00402833 loc_402833:                             ; CODE XREF: sub_4022B0+604↓j
.text:00402833                 inc     dword ptr [ebp+0]
.text:00402836                 mov     [ebp+0Ch], ecx
.text:00402839
.text:00402839 loc_402839:                             ; CODE XREF: sub_4022B0+5AB↓j
.text:00402839                                         ; sub_4022B0+5C6↓j ...
.text:00402839                 mov     dword ptr [ebp+14h], 0
.text:00402840                 jmp     short loc_40281D
.text:00402842 ; ---------------------------------------------------------------------------
.text:00402842
.text:00402842 loc_402842:                             ; CODE XREF: sub_4022B0+581↑j
.text:00402842                 mov     ecx, [ebp+0]
.text:00402845                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402849                 jz      short loc_40285D
.text:0040284B                 mov     eax, [esp+5Ch+arg_4]
.text:0040284F                 lea     edx, [ecx+1]
.text:00402852                 mov     [ebp+0], edx
.text:00402855                 mov     ebx, [eax+ecx*4]
.text:00402858                 mov     [ebp+0Ch], ebx
.text:0040285B                 jmp     short loc_402839
.text:0040285D ; ---------------------------------------------------------------------------
.text:0040285D
.text:0040285D loc_40285D:                             ; CODE XREF: sub_4022B0+599↑j
.text:0040285D                 mov     ecx, [esp+5Ch+var_14]
.text:00402861                 test    ecx, ecx
.text:00402863                 jnz     short loc_40287F
.text:00402865
.text:00402865 loc_402865:                             ; CODE XREF: sub_4022B0+5FF↓j
.text:00402865                 mov     [ebp+8], edi
.text:00402868                 mov     edi, [esp+5Ch+Str]
.text:0040286C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040286F                 jz      short loc_402878
.text:00402871                 mov     esi, 3Fh ; '?'
.text:00402876                 jmp     short loc_402839
.text:00402878 ; ---------------------------------------------------------------------------
.text:00402878
.text:00402878 loc_402878:                             ; CODE XREF: sub_4022B0+5BF↑j
.text:00402878                 mov     esi, 3Ah ; ':'
.text:0040287D                 jmp     short loc_402839
.text:0040287F ; ---------------------------------------------------------------------------
.text:0040287F
.text:0040287F loc_40287F:                             ; CODE XREF: sub_4022B0+5B3↑j
.text:0040287F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402886                 call    ds:libintl_gettext
.text:0040288C                 mov     [esp+5Ch+var_50], edi
.text:00402890                 mov     ebx, [esp+5Ch+arg_4]
.text:00402894                 mov     edx, ds:_iob
.text:0040289A                 mov     esi, [ebx]
.text:0040289C                 add     edx, 40h ; '@'
.text:0040289F                 mov     [esp+5Ch+Str2], eax ; Format
.text:004028A3                 mov     [esp+5Ch+MaxCount], esi
.text:004028A7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004028AA                 call    fprintf
.text:004028AF                 jmp     short loc_402865
.text:004028B1 ; ---------------------------------------------------------------------------
.text:004028B1
.text:004028B1 loc_4028B1:                             ; CODE XREF: sub_4022B0+578↑j
.text:004028B1                 cmp     byte ptr [ecx], 0
.text:004028B4                 jnz     loc_402833
.text:004028BA                 mov     dword ptr [ebp+0Ch], 0
.text:004028C1                 jmp     loc_402839
.text:004028C6 ; ---------------------------------------------------------------------------
.text:004028C6
.text:004028C6 loc_4028C6:                             ; CODE XREF: sub_4022B0+55E↑j
.text:004028C6                 movzx   edx, byte ptr [eax+1]
.text:004028CA                 cmp     dl, 3Bh ; ';'
.text:004028CD                 jnz     loc_402818
.text:004028D3                 mov     [esp+5Ch+var_2C], 0
.text:004028DB                 mov     [esp+5Ch+var_30], 0
.text:004028E3                 mov     [esp+5Ch+var_34], 0
.text:004028EB                 mov     [esp+5Ch+var_38], 0
.text:004028F3                 cmp     byte ptr [ecx], 0
.text:004028F6                 jz      loc_402B6B
.text:004028FC                 inc     dword ptr [ebp+0]
.text:004028FF                 mov     [ebp+0Ch], ecx
.text:00402902
.text:00402902 loc_402902:                             ; CODE XREF: sub_4022B0+8D4↓j
.text:00402902                 mov     edi, [ebp+0Ch]
.text:00402905                 mov     [ebp+14h], edi
.text:00402908                 movzx   eax, byte ptr [edi]
.text:0040290B                 test    al, al
.text:0040290D                 jz      short loc_40291F
.text:0040290F                 cmp     al, 3Dh ; '='
.text:00402911                 jz      short loc_40291F
.text:00402913
.text:00402913 loc_402913:                             ; CODE XREF: sub_4022B0+66D↓j
.text:00402913                 inc     edi
.text:00402914                 movzx   eax, byte ptr [edi]
.text:00402917                 test    al, al
.text:00402919                 jz      short loc_40291F
.text:0040291B                 cmp     al, 3Dh ; '='
.text:0040291D                 jnz     short loc_402913
.text:0040291F
.text:0040291F loc_40291F:                             ; CODE XREF: sub_4022B0+65D↑j
.text:0040291F                                         ; sub_4022B0+661↑j ...
.text:0040291F                 mov     [esp+5Ch+var_3C], 0
.text:00402927                 mov     esi, [esp+5Ch+arg_C]
.text:0040292B                 mov     eax, [esi]
.text:0040292D                 test    eax, eax
.text:0040292F                 jz      loc_402AB0
.text:00402935                 mov     ecx, eax
.text:00402937
.text:00402937 loc_402937:                             ; CODE XREF: sub_4022B0+6B3↓j
.text:00402937                 mov     ebx, [ebp+14h]
.text:0040293A                 mov     eax, edi
.text:0040293C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040293F                 sub     eax, ebx
.text:00402941                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402945                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402949                 call    strncmp
.text:0040294E                 test    eax, eax
.text:00402950                 jz      loc_402B17
.text:00402956
.text:00402956 loc_402956:                             ; CODE XREF: sub_4022B0+88C↓j
.text:00402956                                         ; sub_4022B0+89D↓j
.text:00402956                 inc     [esp+5Ch+var_3C]
.text:0040295A                 add     esi, 10h
.text:0040295D                 mov     edx, [esi]
.text:0040295F                 test    edx, edx
.text:00402961                 mov     ecx, edx
.text:00402963                 jnz     short loc_402937
.text:00402965
.text:00402965 loc_402965:                             ; CODE XREF: sub_4022B0+8B6↓j
.text:00402965                 mov     esi, [esp+5Ch+var_34]
.text:00402969                 test    esi, esi
.text:0040296B                 jz      short loc_402979
.text:0040296D                 mov     ebx, [esp+5Ch+var_30]
.text:00402971                 test    ebx, ebx
.text:00402973                 jz      loc_402AC1
.text:00402979
.text:00402979 loc_402979:                             ; CODE XREF: sub_4022B0+6BB↑j
.text:00402979                 mov     esi, [esp+5Ch+var_2C]
.text:0040297D                 test    esi, esi
.text:0040297F                 jz      loc_402AB0
.text:00402985                 cmp     byte ptr [edi], 0
.text:00402988                 jz      loc_402A30
.text:0040298E                 mov     ecx, [esp+5Ch+var_2C]
.text:00402992                 mov     ebx, [ecx+4]
.text:00402995                 test    ebx, ebx
.text:00402997                 jz      short loc_4029D8
.text:00402999                 lea     edx, [edi+1]
.text:0040299C                 mov     [ebp+0Ch], edx
.text:0040299F
.text:0040299F loc_40299F:                             ; CODE XREF: sub_4022B0+788↓j
.text:0040299F                                         ; sub_4022B0+7A7↓j
.text:0040299F                 mov     edi, [ebp+14h]
.text:004029A2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004029A5                 call    strlen
.text:004029AA                 add     [ebp+14h], eax
.text:004029AD                 mov     eax, [esp+5Ch+arg_10]
.text:004029B1                 test    eax, eax
.text:004029B3                 jz      short loc_4029C0
.text:004029B5                 mov     edx, [esp+5Ch+var_38]
.text:004029B9                 mov     ebp, [esp+5Ch+arg_10]
.text:004029BD                 mov     [ebp+0], edx
.text:004029C0
.text:004029C0 loc_4029C0:                             ; CODE XREF: sub_4022B0+703↑j
.text:004029C0                 mov     eax, [esp+5Ch+var_2C]
.text:004029C4                 mov     ecx, [eax+8]
.text:004029C7                 test    ecx, ecx
.text:004029C9                 jnz     loc_40258A
.text:004029CF                 mov     ecx, [esp+5Ch+var_2C]
.text:004029D3                 jmp     loc_402582
.text:004029D8 ; ---------------------------------------------------------------------------
.text:004029D8
.text:004029D8 loc_4029D8:                             ; CODE XREF: sub_4022B0+6E7↑j
.text:004029D8                 mov     eax, [esp+5Ch+var_14]
.text:004029DC                 test    eax, eax
.text:004029DE                 jnz     short loc_4029F3
.text:004029E0
.text:004029E0 loc_4029E0:                             ; CODE XREF: sub_4022B0+779↓j
.text:004029E0                 mov     ecx, [ebp+14h]
.text:004029E3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004029E6                 call    strlen
.text:004029EB                 add     [ebp+14h], eax
.text:004029EE                 jmp     loc_402608
.text:004029F3 ; ---------------------------------------------------------------------------
.text:004029F3
.text:004029F3 loc_4029F3:                             ; CODE XREF: sub_4022B0+72E↑j
.text:004029F3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004029FA                 call    ds:libintl_gettext
.text:00402A00                 mov     edx, [esp+5Ch+var_2C]
.text:00402A04                 mov     ebx, [esp+5Ch+arg_4]
.text:00402A08                 mov     edi, [edx]
.text:00402A0A                 mov     [esp+5Ch+var_50], edi
.text:00402A0E                 mov     edi, ds:_iob
.text:00402A14                 mov     esi, [ebx]
.text:00402A16                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402A1A                 add     edi, 40h ; '@'
.text:00402A1D                 mov     [esp+5Ch+MaxCount], esi
.text:00402A21                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402A24                 call    fprintf
.text:00402A29                 jmp     short loc_4029E0
.text:00402A29 ; ---------------------------------------------------------------------------
.text:00402A2B                 align 10h
.text:00402A30
.text:00402A30 loc_402A30:                             ; CODE XREF: sub_4022B0+6D8↑j
.text:00402A30                 mov     esi, [esp+5Ch+var_2C]
.text:00402A34                 cmp     dword ptr [esi+4], 1
.text:00402A38                 jnz     loc_40299F
.text:00402A3E                 mov     ecx, [ebp+0]
.text:00402A41                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402A45                 jge     short loc_402A5C
.text:00402A47                 mov     eax, [esp+5Ch+arg_4]
.text:00402A4B                 lea     ebx, [ecx+1]
.text:00402A4E                 mov     [ebp+0], ebx
.text:00402A51                 mov     edi, [eax+ecx*4]
.text:00402A54                 mov     [ebp+0Ch], edi
.text:00402A57                 jmp     loc_40299F
.text:00402A5C ; ---------------------------------------------------------------------------
.text:00402A5C
.text:00402A5C loc_402A5C:                             ; CODE XREF: sub_4022B0+795↑j
.text:00402A5C                 mov     edx, [esp+5Ch+var_14]
.text:00402A60                 test    edx, edx
.text:00402A62                 jnz     short loc_402A77
.text:00402A64
.text:00402A64 loc_402A64:                             ; CODE XREF: sub_4022B0+7FE↓j
.text:00402A64                 mov     edx, [ebp+14h]
.text:00402A67                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402A6A                 call    strlen
.text:00402A6F                 add     [ebp+14h], eax
.text:00402A72                 jmp     loc_402699
.text:00402A77 ; ---------------------------------------------------------------------------
.text:00402A77
.text:00402A77 loc_402A77:                             ; CODE XREF: sub_4022B0+7B2↑j
.text:00402A77                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402A7E                 call    ds:libintl_gettext
.text:00402A84                 mov     ecx, [ebp+0]
.text:00402A87                 mov     ebx, [esp+5Ch+arg_4]
.text:00402A8B                 mov     edi, [ebx+ecx*4-4]
.text:00402A8F                 mov     ecx, ds:_iob
.text:00402A95                 mov     [esp+5Ch+var_50], edi
.text:00402A99                 mov     esi, [ebx]
.text:00402A9B                 add     ecx, 40h ; '@'
.text:00402A9E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402AA2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402AA5                 mov     [esp+5Ch+MaxCount], esi
.text:00402AA9                 call    fprintf
.text:00402AAE                 jmp     short loc_402A64
.text:00402AB0 ; ---------------------------------------------------------------------------
.text:00402AB0
.text:00402AB0 loc_402AB0:                             ; CODE XREF: sub_4022B0+67F↑j
.text:00402AB0                                         ; sub_4022B0+6CF↑j
.text:00402AB0                 mov     dword ptr [ebp+14h], 0
.text:00402AB7                 mov     eax, 57h ; 'W'
.text:00402ABC                 jmp     loc_402407
.text:00402AC1 ; ---------------------------------------------------------------------------
.text:00402AC1
.text:00402AC1 loc_402AC1:                             ; CODE XREF: sub_4022B0+6C3↑j
.text:00402AC1                 mov     edi, [esp+5Ch+var_14]
.text:00402AC5                 test    edi, edi
.text:00402AC7                 jnz     short loc_402ADF
.text:00402AC9
.text:00402AC9 loc_402AC9:                             ; CODE XREF: sub_4022B0+865↓j
.text:00402AC9                 mov     edx, [ebp+14h]
.text:00402ACC                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402ACF                 call    strlen
.text:00402AD4                 add     [ebp+14h], eax
.text:00402AD7                 inc     dword ptr [ebp+0]
.text:00402ADA                 jmp     loc_402608
.text:00402ADF ; ---------------------------------------------------------------------------
.text:00402ADF
.text:00402ADF loc_402ADF:                             ; CODE XREF: sub_4022B0+817↑j
.text:00402ADF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402AE6                 call    ds:libintl_gettext
.text:00402AEC                 mov     ecx, [ebp+0]
.text:00402AEF                 mov     ebx, [esp+5Ch+arg_4]
.text:00402AF3                 mov     edi, [ebx+ecx*4]
.text:00402AF6                 mov     ecx, ds:_iob
.text:00402AFC                 mov     [esp+5Ch+var_50], edi
.text:00402B00                 mov     esi, [ebx]
.text:00402B02                 add     ecx, 40h ; '@'
.text:00402B05                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402B09                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402B0C                 mov     [esp+5Ch+MaxCount], esi
.text:00402B10                 call    fprintf
.text:00402B15                 jmp     short loc_402AC9
.text:00402B17 ; ---------------------------------------------------------------------------
.text:00402B17
.text:00402B17 loc_402B17:                             ; CODE XREF: sub_4022B0+6A0↑j
.text:00402B17                 mov     edx, [ebp+14h]
.text:00402B1A                 mov     ebx, edi
.text:00402B1C                 mov     ecx, [esi]
.text:00402B1E                 sub     ebx, edx
.text:00402B20                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402B23                 call    strlen
.text:00402B28                 cmp     ebx, eax
.text:00402B2A                 jz      short loc_402B52
.text:00402B2C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402B30                 test    ebx, ebx
.text:00402B32                 jz      short loc_402B41
.text:00402B34                 mov     [esp+5Ch+var_34], 1
.text:00402B3C                 jmp     loc_402956
.text:00402B41 ; ---------------------------------------------------------------------------
.text:00402B41
.text:00402B41 loc_402B41:                             ; CODE XREF: sub_4022B0+882↑j
.text:00402B41                 mov     [esp+5Ch+var_2C], esi
.text:00402B45                 mov     ecx, [esp+5Ch+var_3C]
.text:00402B49                 mov     [esp+5Ch+var_38], ecx
.text:00402B4D                 jmp     loc_402956
.text:00402B52 ; ---------------------------------------------------------------------------
.text:00402B52
.text:00402B52 loc_402B52:                             ; CODE XREF: sub_4022B0+87A↑j
.text:00402B52                 mov     [esp+5Ch+var_2C], esi
.text:00402B56                 mov     eax, [esp+5Ch+var_3C]
.text:00402B5A                 mov     [esp+5Ch+var_30], 1
.text:00402B62                 mov     [esp+5Ch+var_38], eax
.text:00402B66                 jmp     loc_402965
.text:00402B6B ; ---------------------------------------------------------------------------
.text:00402B6B
.text:00402B6B loc_402B6B:                             ; CODE XREF: sub_4022B0+646↑j
.text:00402B6B                 mov     edx, [ebp+0]
.text:00402B6E                 cmp     edx, [esp+5Ch+arg_0]
.text:00402B72                 jz      short loc_402B89
.text:00402B74                 mov     ebx, [esp+5Ch+arg_4]
.text:00402B78                 lea     esi, [edx+1]
.text:00402B7B                 mov     [ebp+0], esi
.text:00402B7E                 mov     edi, [ebx+edx*4]
.text:00402B81                 mov     [ebp+0Ch], edi
.text:00402B84                 jmp     loc_402902
.text:00402B89 ; ---------------------------------------------------------------------------
.text:00402B89
.text:00402B89 loc_402B89:                             ; CODE XREF: sub_4022B0+8C2↑j
.text:00402B89                 mov     edi, [esp+5Ch+var_14]
.text:00402B8D                 test    edi, edi
.text:00402B8F                 jnz     short loc_402BAC
.text:00402B91
.text:00402B91 loc_402B91:                             ; CODE XREF: sub_4022B0+92C↓j
.text:00402B91                 mov     [ebp+8], esi
.text:00402B94                 mov     ebp, [esp+5Ch+Str]
.text:00402B98                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402B9C                 jz      short loc_402BA8
.text:00402B9E                 mov     bl, 3Fh ; '?'
.text:00402BA0
.text:00402BA0 loc_402BA0:                             ; CODE XREF: sub_4022B0+8FA↓j
.text:00402BA0                 movsx   eax, bl
.text:00402BA3                 jmp     loc_402407
.text:00402BA8 ; ---------------------------------------------------------------------------
.text:00402BA8
.text:00402BA8 loc_402BA8:                             ; CODE XREF: sub_4022B0+8EC↑j
.text:00402BA8                 mov     bl, 3Ah ; ':'
.text:00402BAA                 jmp     short loc_402BA0
.text:00402BAC ; ---------------------------------------------------------------------------
.text:00402BAC
.text:00402BAC loc_402BAC:                             ; CODE XREF: sub_4022B0+8DF↑j
.text:00402BAC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402BB3                 call    ds:libintl_gettext
.text:00402BB9                 mov     [esp+5Ch+var_50], esi
.text:00402BBD                 mov     edx, [esp+5Ch+arg_4]
.text:00402BC1                 mov     ecx, ds:_iob
.text:00402BC7                 mov     ebx, [edx]
.text:00402BC9                 add     ecx, 40h ; '@'
.text:00402BCC                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402BD0                 mov     [esp+5Ch+MaxCount], ebx
.text:00402BD4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402BD7                 call    fprintf
.text:00402BDC                 jmp     short loc_402B91
.text:00402BDC ; ---------------------------------------------------------------------------
.text:00402BDE                 align 10h
.text:00402BE0
.text:00402BE0 loc_402BE0:                             ; CODE XREF: sub_4022B0+54C↑j
.text:00402BE0                                         ; sub_4022B0+555↑j
.text:00402BE0                 mov     eax, [esp+5Ch+var_14]
.text:00402BE4                 test    eax, eax
.text:00402BE6                 jz      short loc_402C1F
.text:00402BE8                 mov     ebx, [ebp+1Ch]
.text:00402BEB                 test    ebx, ebx
.text:00402BED                 jz      short loc_402C27
.text:00402BEF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402BF6
.text:00402BF6 loc_402BF6:                             ; CODE XREF: sub_4022B0+97E↓j
.text:00402BF6                 call    ds:libintl_gettext
.text:00402BFC                 mov     [esp+5Ch+var_50], esi
.text:00402C00                 mov     ebx, [esp+5Ch+arg_4]
.text:00402C04                 mov     edx, ds:_iob
.text:00402C0A                 mov     esi, [ebx]
.text:00402C0C                 add     edx, 40h ; '@'
.text:00402C0F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402C13                 mov     [esp+5Ch+MaxCount], esi
.text:00402C17                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402C1A                 call    fprintf
.text:00402C1F
.text:00402C1F loc_402C1F:                             ; CODE XREF: sub_4022B0+936↑j
.text:00402C1F                 mov     [ebp+8], edi
.text:00402C22                 jmp     loc_402608
.text:00402C27 ; ---------------------------------------------------------------------------
.text:00402C27
.text:00402C27 loc_402C27:                             ; CODE XREF: sub_4022B0+93D↑j
.text:00402C27                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00402C2E                 jmp     short loc_402BF6
.text:00402C30 ; ---------------------------------------------------------------------------
.text:00402C30
.text:00402C30 loc_402C30:                             ; CODE XREF: sub_4022B0+26E↑j
.text:00402C30                 mov     edi, [esp+5Ch+var_14]
.text:00402C34                 test    edi, edi
.text:00402C36                 jnz     short loc_402C4E
.text:00402C38
.text:00402C38 loc_402C38:                             ; CODE XREF: sub_4022B0+9D4↓j
.text:00402C38                 mov     edx, [ebp+14h]
.text:00402C3B                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402C3E                 call    strlen
.text:00402C43                 add     [ebp+14h], eax
.text:00402C46                 inc     dword ptr [ebp+0]
.text:00402C49                 jmp     loc_40278E
.text:00402C4E ; ---------------------------------------------------------------------------
.text:00402C4E
.text:00402C4E loc_402C4E:                             ; CODE XREF: sub_4022B0+986↑j
.text:00402C4E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402C55                 call    ds:libintl_gettext
.text:00402C5B                 mov     ebx, [ebp+0]
.text:00402C5E                 mov     edi, [esp+5Ch+arg_4]
.text:00402C62                 mov     ecx, [edi+ebx*4]
.text:00402C65                 mov     ebx, ds:_iob
.text:00402C6B                 mov     [esp+5Ch+var_50], ecx
.text:00402C6F                 mov     esi, [edi]
.text:00402C71                 add     ebx, 40h ; '@'
.text:00402C74                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402C78                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00402C7B                 mov     [esp+5Ch+MaxCount], esi
.text:00402C7F                 call    fprintf
.text:00402C84                 jmp     short loc_402C38
.text:00402C86 ; ---------------------------------------------------------------------------
.text:00402C86
.text:00402C86 loc_402C86:                             ; CODE XREF: sub_4022B0+246↑j
.text:00402C86                 mov     ecx, [ebp+14h]
.text:00402C89                 mov     ebx, edi
.text:00402C8B                 mov     edx, [esi]
.text:00402C8D                 sub     ebx, ecx
.text:00402C8F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402C92                 call    strlen
.text:00402C97                 cmp     ebx, eax
.text:00402C99                 jz      short loc_402CF1
.text:00402C9B                 mov     ebx, [esp+5Ch+var_18]
.text:00402C9F                 test    ebx, ebx
.text:00402CA1                 jz      short loc_402CE0
.text:00402CA3                 mov     edx, [esp+5Ch+arg_14]
.text:00402CA7                 test    edx, edx
.text:00402CA9                 jnz     short loc_402CB7
.text:00402CAB                 mov     ecx, [esp+5Ch+var_18]
.text:00402CAF                 mov     ebx, [esi+4]
.text:00402CB2                 cmp     [ecx+4], ebx
.text:00402CB5                 jz      short loc_402CC4
.text:00402CB7
.text:00402CB7 loc_402CB7:                             ; CODE XREF: sub_4022B0+9F9↑j
.text:00402CB7                                         ; sub_4022B0+A1A↓j ...
.text:00402CB7                 mov     [esp+5Ch+var_20], 1
.text:00402CBF                 jmp     loc_4024FC
.text:00402CC4 ; ---------------------------------------------------------------------------
.text:00402CC4
.text:00402CC4 loc_402CC4:                             ; CODE XREF: sub_4022B0+A05↑j
.text:00402CC4                 mov     edx, [esi+8]
.text:00402CC7                 cmp     [ecx+8], edx
.text:00402CCA                 jnz     short loc_402CB7
.text:00402CCC                 mov     ebx, [esi+0Ch]
.text:00402CCF                 cmp     [ecx+0Ch], ebx
.text:00402CD2                 jnz     short loc_402CB7
.text:00402CD4                 jmp     loc_4024FC
.text:00402CD4 ; ---------------------------------------------------------------------------
.text:00402CD9                 align 10h
.text:00402CE0
.text:00402CE0 loc_402CE0:                             ; CODE XREF: sub_4022B0+9F1↑j
.text:00402CE0                 mov     [esp+5Ch+var_18], esi
.text:00402CE4                 mov     eax, [esp+5Ch+var_28]
.text:00402CE8                 mov     [esp+5Ch+var_24], eax
.text:00402CEC                 jmp     loc_4024FC
.text:00402CF1 ; ---------------------------------------------------------------------------
.text:00402CF1
.text:00402CF1 loc_402CF1:                             ; CODE XREF: sub_4022B0+9E9↑j
.text:00402CF1                 mov     [esp+5Ch+var_18], esi
.text:00402CF5                 mov     ecx, [esp+5Ch+var_28]
.text:00402CF9                 mov     [esp+5Ch+var_1C], 1
.text:00402D01                 mov     [esp+5Ch+var_24], ecx
.text:00402D05                 jmp     loc_402510
.text:00402D0A ; ---------------------------------------------------------------------------
.text:00402D0A
.text:00402D0A loc_402D0A:                             ; CODE XREF: sub_4022B0+1BF↑j
.text:00402D0A                 mov     eax, [esp+5Ch+Str]
.text:00402D0E                 movsx   esi, dl
.text:00402D11                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402D15                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402D18                 call    strchr
.text:00402D1D                 test    eax, eax
.text:00402D1F                 jnz     loc_4027D0
.text:00402D25                 jmp     loc_402475
.text:00402D2A ; ---------------------------------------------------------------------------
.text:00402D2A
.text:00402D2A loc_402D2A:                             ; CODE XREF: sub_4022B0+17C↑j
.text:00402D2A                 mov     ecx, 1
.text:00402D2F                 jmp     loc_402432
.text:00402D34 ; ---------------------------------------------------------------------------
.text:00402D34
.text:00402D34 loc_402D34:                             ; CODE XREF: sub_4022B0+D4↑j
.text:00402D34                                         ; sub_4022B0+130↑j
.text:00402D34                 mov     eax, [ebp+20h]
.text:00402D37                 cmp     eax, [ebp+24h]
.text:00402D3A                 jz      loc_402410
.text:00402D40                 mov     [ebp+0], eax
.text:00402D43                 jmp     loc_402410
.text:00402D48 ; ---------------------------------------------------------------------------
.text:00402D48
.text:00402D48 loc_402D48:                             ; CODE XREF: sub_4022B0+FE↑j
.text:00402D48                 mov     [ebp+20h], eax
.text:00402D4B                 jmp     loc_4023D0
.text:00402D50 ; ---------------------------------------------------------------------------
.text:00402D50
.text:00402D50 loc_402D50:                             ; CODE XREF: sub_4022B0+CA↑j
.text:00402D50                 mov     edx, [ebp+20h]
.text:00402D53                 mov     eax, [ebp+24h]
.text:00402D56                 cmp     edx, eax
.text:00402D58                 jz      short loc_402DD0
.text:00402D5A                 cmp     eax, ebx
.text:00402D5C                 jz      short loc_402D71
.text:00402D5E                 mov     [esp+5Ch+Str2], ebp
.text:00402D62                 mov     ebx, [esp+5Ch+arg_4]
.text:00402D66                 mov     [esp+5Ch+Str1], ebx
.text:00402D69                 call    sub_402F60
.text:00402D6E                 mov     ebx, [ebp+0]
.text:00402D71
.text:00402D71 loc_402D71:                             ; CODE XREF: sub_4022B0+AAC↑j
.text:00402D71                                         ; sub_4022B0+B22↓j ...
.text:00402D71                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402D75                 jge     short loc_402DC0
.text:00402D77                 mov     esi, [esp+5Ch+arg_4]
.text:00402D7B                 mov     eax, [esi+ebx*4]
.text:00402D7E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402D81                 jz      short loc_402DC8
.text:00402D83                 lea     esi, [esi+0]
.text:00402D89                 lea     edi, [edi+0]
.text:00402D90
.text:00402D90 loc_402D90:                             ; CODE XREF: sub_4022B0+AFC↓j
.text:00402D90                                         ; sub_4022B0+B1C↓j
.text:00402D90                 lea     eax, [ebx+1]
.text:00402D93                 mov     ebx, eax
.text:00402D95                 mov     [ebp+0], eax
.text:00402D98                 cmp     eax, [esp+5Ch+arg_0]
.text:00402D9C                 jge     short loc_402DC0
.text:00402D9E                 mov     edi, [esp+5Ch+arg_4]
.text:00402DA2                 mov     edx, [edi+eax*4]
.text:00402DA5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402DA8                 jz      short loc_402DB0
.text:00402DAA
.text:00402DAA loc_402DAA:                             ; CODE XREF: sub_4022B0+B04↓j
.text:00402DAA                 mov     ebx, eax
.text:00402DAC                 jmp     short loc_402D90
.text:00402DAC ; ---------------------------------------------------------------------------
.text:00402DAE                 align 10h
.text:00402DB0
.text:00402DB0 loc_402DB0:                             ; CODE XREF: sub_4022B0+AF8↑j
.text:00402DB0                 cmp     byte ptr [edx+1], 0
.text:00402DB4                 jz      short loc_402DAA
.text:00402DB6                 lea     esi, [esi+0]
.text:00402DB9                 lea     edi, [edi+0]
.text:00402DC0
.text:00402DC0 loc_402DC0:                             ; CODE XREF: sub_4022B0+AC5↑j
.text:00402DC0                                         ; sub_4022B0+AEC↑j ...
.text:00402DC0                 mov     [ebp+24h], ebx
.text:00402DC3                 jmp     loc_402380
.text:00402DC8 ; ---------------------------------------------------------------------------
.text:00402DC8
.text:00402DC8 loc_402DC8:                             ; CODE XREF: sub_4022B0+AD1↑j
.text:00402DC8                 cmp     byte ptr [eax+1], 0
.text:00402DCC                 jz      short loc_402D90
.text:00402DCE                 jmp     short loc_402DC0
.text:00402DD0 ; ---------------------------------------------------------------------------
.text:00402DD0
.text:00402DD0 loc_402DD0:                             ; CODE XREF: sub_4022B0+AA8↑j
.text:00402DD0                 cmp     edx, ebx
.text:00402DD2                 jz      short loc_402D71
.text:00402DD4                 mov     [ebp+20h], ebx
.text:00402DD7                 jmp     short loc_402D71
.text:00402DD9 ; ---------------------------------------------------------------------------
.text:00402DD9
.text:00402DD9 loc_402DD9:                             ; CODE XREF: sub_4022B0+88↑j
.text:00402DD9                 mov     dword ptr [ebp+18h], 0
.text:00402DE0                 mov     esi, [esp+5Ch+Str]
.text:00402DE4
.text:00402DE4 loc_402DE4:                             ; CODE XREF: sub_4022B0+B49↓j
.text:00402DE4                 inc     esi
.text:00402DE5                 jmp     loc_402348
.text:00402DE5 ; ---------------------------------------------------------------------------
.text:00402DEA                 align 10h
.text:00402DF0
.text:00402DF0 loc_402DF0:                             ; CODE XREF: sub_4022B0+80↑j
.text:00402DF0                 mov     dword ptr [ebp+18h], 2
.text:00402DF7                 mov     esi, ecx
.text:00402DF9                 jmp     short loc_402DE4
.text:00402DF9 ; ---------------------------------------------------------------------------
.text:00402DFB                 align 10h
.text:00402E00
.text:00402E00 loc_402E00:                             ; CODE XREF: sub_4022B0+69↑j
.text:00402E00                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402E07                 call    getenv
.text:00402E0C                 test    eax, eax
.text:00402E0E                 jz      loc_402324
.text:00402E14                 jmp     loc_40231F
.text:00402E14 ; ---------------------------------------------------------------------------
.text:00402E19                 align 10h
.text:00402E20
.text:00402E20 loc_402E20:                             ; CODE XREF: sub_4022B0+3F↑j
.text:00402E20                 mov     dword ptr [ebp+0], 1
.text:00402E27                 mov     ebx, 1
.text:00402E2C                 jmp     loc_402300
.text:00402E2C sub_4022B0      endp
.text:00402E2C
.text:00402E31 ; ---------------------------------------------------------------------------
.text:00402E31                 jmp     short sub_402E40
.text:00402E31 ; ---------------------------------------------------------------------------
.text:00402E33                 align 10h
.text:00402E40
.text:00402E40 ; =============== S U B R O U T I N E =======================================
.text:00402E40
.text:00402E40
.text:00402E40 ; int __cdecl sub_402E40(int, int, char *, int, int, int, int)
.text:00402E40 sub_402E40      proc near               ; CODE XREF: .text:00402E31↑j
.text:00402E40                                         ; sub_4035E0+3A↓p ...
.text:00402E40
.text:00402E40 var_2C          = dword ptr -2Ch
.text:00402E40 var_28          = dword ptr -28h
.text:00402E40 Str             = dword ptr -24h
.text:00402E40 var_20          = dword ptr -20h
.text:00402E40 var_1C          = dword ptr -1Ch
.text:00402E40 var_18          = dword ptr -18h
.text:00402E40 var_14          = dword ptr -14h
.text:00402E40 var_10          = dword ptr -10h
.text:00402E40 arg_0           = dword ptr  4
.text:00402E40 arg_4           = dword ptr  8
.text:00402E40 arg_8           = dword ptr  0Ch
.text:00402E40 arg_C           = dword ptr  10h
.text:00402E40 arg_10          = dword ptr  14h
.text:00402E40 arg_14          = dword ptr  18h
.text:00402E40 arg_18          = dword ptr  1Ch
.text:00402E40
.text:00402E40                 sub     esp, 2Ch
.text:00402E43                 mov     edx, dword_408010
.text:00402E49                 mov     [esp+2Ch+var_10], offset dword_409120 ; int
.text:00402E51                 mov     ecx, dword_408014
.text:00402E57                 mov     ds:dword_409120, edx
.text:00402E5D                 mov     edx, [esp+2Ch+arg_18]
.text:00402E61                 mov     ds:dword_409124, ecx
.text:00402E67                 mov     ecx, [esp+2Ch+arg_14]
.text:00402E6B                 mov     [esp+2Ch+var_14], edx ; int
.text:00402E6F                 mov     edx, [esp+2Ch+arg_10]
.text:00402E73                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402E77                 mov     ecx, [esp+2Ch+arg_C]
.text:00402E7B                 mov     [esp+2Ch+var_1C], edx ; int
.text:00402E7F                 mov     edx, [esp+2Ch+arg_8]
.text:00402E83                 mov     [esp+2Ch+var_20], ecx ; int
.text:00402E87                 mov     ecx, [esp+2Ch+arg_4]
.text:00402E8B                 mov     [esp+2Ch+Str], edx ; Str
.text:00402E8F                 mov     edx, [esp+2Ch+arg_0]
.text:00402E93                 mov     [esp+2Ch+var_28], ecx ; int
.text:00402E97                 mov     [esp+2Ch+var_2C], edx ; int
.text:00402E9A                 call    sub_4022B0
.text:00402E9F                 mov     ecx, ds:dword_409120
.text:00402EA5                 mov     dword_408010, ecx
.text:00402EAB                 mov     ecx, ds:dword_40912C
.text:00402EB1                 mov     ds:dword_4093B0, ecx
.text:00402EB7                 mov     ecx, ds:dword_409128
.text:00402EBD                 mov     dword_408018, ecx
.text:00402EC3                 add     esp, 2Ch
.text:00402EC6                 retn
.text:00402EC6 sub_402E40      endp
.text:00402EC6
.text:00402EC6 ; ---------------------------------------------------------------------------
.text:00402EC7                 align 10h
.text:00402ED0                 sub     esp, 2Ch
.text:00402ED3                 mov     edx, dword_408010
.text:00402ED9                 mov     dword ptr [esp+1Ch], offset dword_409120
.text:00402EE1                 mov     ecx, dword_408014
.text:00402EE7                 mov     dword ptr [esp+18h], 1
.text:00402EEF                 mov     ds:dword_409120, edx
.text:00402EF5                 mov     edx, [esp+38h]
.text:00402EF9                 mov     ds:dword_409124, ecx
.text:00402EFF                 mov     ecx, [esp+34h]
.text:00402F03                 mov     [esp+8], edx
.text:00402F07                 mov     edx, [esp+30h]
.text:00402F0B                 mov     [esp+4], ecx
.text:00402F0F                 mov     dword ptr [esp+14h], 0
.text:00402F17                 mov     dword ptr [esp+10h], 0
.text:00402F1F                 mov     dword ptr [esp+0Ch], 0
.text:00402F27                 mov     [esp], edx
.text:00402F2A                 call    sub_4022B0
.text:00402F2F                 mov     ecx, ds:dword_409120
.text:00402F35                 mov     dword_408010, ecx
.text:00402F3B                 mov     ecx, ds:dword_40912C
.text:00402F41                 mov     ds:dword_4093B0, ecx
.text:00402F47                 mov     ecx, ds:dword_409128
.text:00402F4D                 mov     dword_408018, ecx
.text:00402F53                 add     esp, 2Ch
.text:00402F56                 retn
.text:00402F56 ; ---------------------------------------------------------------------------
.text:00402F57                 align 10h
.text:00402F60
.text:00402F60 ; =============== S U B R O U T I N E =======================================
.text:00402F60
.text:00402F60
.text:00402F60 sub_402F60      proc near               ; CODE XREF: sub_4022B0+113↑p
.text:00402F60                                         ; sub_4022B0+AB9↑p
.text:00402F60
.text:00402F60 var_2C          = dword ptr -2Ch
.text:00402F60 var_28          = dword ptr -28h
.text:00402F60 var_24          = dword ptr -24h
.text:00402F60 var_20          = dword ptr -20h
.text:00402F60 var_1C          = dword ptr -1Ch
.text:00402F60 var_18          = dword ptr -18h
.text:00402F60 var_14          = dword ptr -14h
.text:00402F60 arg_0           = dword ptr  4
.text:00402F60 arg_4           = dword ptr  8
.text:00402F60
.text:00402F60                 push    ebp
.text:00402F61                 push    edi
.text:00402F62                 push    esi
.text:00402F63                 push    ebx
.text:00402F64                 sub     esp, 1Ch
.text:00402F67                 mov     ecx, [esp+2Ch+arg_4]
.text:00402F6B                 mov     eax, [esp+2Ch+arg_4]
.text:00402F6F                 mov     ebx, [esp+2Ch+arg_4]
.text:00402F73                 mov     edx, [ecx+20h]
.text:00402F76                 mov     edi, [esp+2Ch+arg_0]
.text:00402F7A                 mov     ecx, [ebx]
.text:00402F7C                 mov     [esp+2Ch+var_2C], edx
.text:00402F7F                 mov     [esp+2Ch+var_14], edx
.text:00402F83                 mov     edx, [eax+24h]
.text:00402F86                 mov     [esp+2Ch+var_28], ecx
.text:00402F8A                 mov     [esp+2Ch+var_1C], ecx
.text:00402F8E                 cmp     ecx, edx
.text:00402F90                 mov     [esp+2Ch+var_18], edx
.text:00402F94                 jle     short loc_403010
.text:00402F96                 mov     esi, [esp+2Ch+var_2C]
.text:00402F99                 cmp     edx, esi
.text:00402F9B                 jle     short loc_403010
.text:00402F9D                 lea     esi, [esi+0]
.text:00402FA0
.text:00402FA0 loc_402FA0:                             ; CODE XREF: sub_402F60+A1↓j
.text:00402FA0                 mov     ebx, [esp+2Ch+var_1C]
.text:00402FA4                 mov     edx, [esp+2Ch+var_18]
.text:00402FA8                 mov     ebp, [esp+2Ch+var_18]
.text:00402FAC                 mov     eax, [esp+2Ch+var_14]
.text:00402FB0                 sub     ebx, edx
.text:00402FB2                 mov     [esp+2Ch+var_20], ebx
.text:00402FB6                 sub     ebp, eax
.text:00402FB8                 cmp     ebx, ebp
.text:00402FBA                 jle     short loc_403035
.text:00402FBC                 xor     esi, esi
.text:00402FBE                 cmp     esi, ebp
.text:00402FC0                 jge     short loc_402FED
.text:00402FC2                 mov     ecx, [esp+2Ch+var_1C]
.text:00402FC6                 sub     ecx, ebp
.text:00402FC8                 mov     [esp+2Ch+var_24], ecx
.text:00402FCC                 lea     esi, [esi+0]
.text:00402FD0
.text:00402FD0 loc_402FD0:                             ; CODE XREF: sub_402F60+8B↓j
.text:00402FD0                 mov     ecx, [esp+2Ch+var_14]
.text:00402FD4                 mov     edx, [esp+2Ch+var_24]
.text:00402FD8                 add     ecx, esi
.text:00402FDA                 add     edx, esi
.text:00402FDC                 mov     ebx, [edi+ecx*4]
.text:00402FDF                 mov     eax, [edi+edx*4]
.text:00402FE2                 inc     esi
.text:00402FE3                 cmp     esi, ebp
.text:00402FE5                 mov     [edi+ecx*4], eax
.text:00402FE8                 mov     [edi+edx*4], ebx
.text:00402FEB                 jl      short loc_402FD0
.text:00402FED
.text:00402FED loc_402FED:                             ; CODE XREF: sub_402F60+60↑j
.text:00402FED                 sub     [esp+2Ch+var_1C], ebp
.text:00402FF1
.text:00402FF1 loc_402FF1:                             ; CODE XREF: sub_402F60+107↓j
.text:00402FF1                 mov     eax, [esp+2Ch+var_18]
.text:00402FF5                 cmp     [esp+2Ch+var_1C], eax
.text:00402FF9                 jle     short loc_403010
.text:00402FFB                 mov     ebp, [esp+2Ch+var_14]
.text:00402FFF                 cmp     eax, ebp
.text:00403001                 jg      short loc_402FA0
.text:00403003                 lea     esi, [esi+0]
.text:00403009                 lea     edi, [edi+0]
.text:00403010
.text:00403010 loc_403010:                             ; CODE XREF: sub_402F60+34↑j
.text:00403010                                         ; sub_402F60+3B↑j ...
.text:00403010                 mov     esi, [esp+2Ch+var_28]
.text:00403014                 mov     ecx, [esp+2Ch+var_18]
.text:00403018                 mov     eax, [esp+2Ch+var_2C]
.text:0040301B                 mov     edi, [esp+2Ch+arg_4]
.text:0040301F                 mov     edx, [esp+2Ch+var_28]
.text:00403023                 sub     esi, ecx
.text:00403025                 add     esi, eax
.text:00403027                 mov     [edi+20h], esi
.text:0040302A                 mov     [edi+24h], edx
.text:0040302D                 add     esp, 1Ch
.text:00403030                 pop     ebx
.text:00403031                 pop     esi
.text:00403032                 pop     edi
.text:00403033                 pop     ebp
.text:00403034                 retn
.text:00403035 ; ---------------------------------------------------------------------------
.text:00403035
.text:00403035 loc_403035:                             ; CODE XREF: sub_402F60+5A↑j
.text:00403035                 xor     esi, esi
.text:00403037                 cmp     esi, [esp+2Ch+var_20]
.text:0040303B                 jge     short loc_40305F
.text:0040303D                 lea     esi, [esi+0]
.text:00403040
.text:00403040 loc_403040:                             ; CODE XREF: sub_402F60+FD↓j
.text:00403040                 mov     ebx, [esp+2Ch+var_14]
.text:00403044                 mov     ebp, [esp+2Ch+var_18]
.text:00403048                 add     ebx, esi
.text:0040304A                 add     ebp, esi
.text:0040304C                 mov     edx, [edi+ebx*4]
.text:0040304F                 inc     esi
.text:00403050                 cmp     esi, [esp+2Ch+var_20]
.text:00403054                 mov     ecx, [edi+ebp*4]
.text:00403057                 mov     [edi+ebx*4], ecx
.text:0040305A                 mov     [edi+ebp*4], edx
.text:0040305D                 jl      short loc_403040
.text:0040305F
.text:0040305F loc_40305F:                             ; CODE XREF: sub_402F60+DB↑j
.text:0040305F                 mov     esi, [esp+2Ch+var_20]
.text:00403063                 add     [esp+2Ch+var_14], esi
.text:00403067                 jmp     short loc_402FF1
.text:00403067 sub_402F60      endp
.text:00403067
.text:00403067 ; ---------------------------------------------------------------------------
.text:00403069                 align 20h
.text:00403080                 sub     esp, 0Ch
.text:00403083                 mov     edx, [esp+14h]
.text:00403087                 mov     dword ptr [esp+4], 5
.text:0040308F                 mov     [esp+8], edx
.text:00403093                 mov     edx, [esp+10h]
.text:00403097                 mov     [esp], edx
.text:0040309A                 call    sub_4045F0
.text:0040309F                 add     esp, 0Ch
.text:004030A2                 retn
.text:004030A2 ; ---------------------------------------------------------------------------
.text:004030A3                 align 10h
.text:004030B0
.text:004030B0 ; =============== S U B R O U T I N E =======================================
.text:004030B0
.text:004030B0
.text:004030B0 ; int __cdecl sub_4030B0(char *)
.text:004030B0 sub_4030B0      proc near               ; CODE XREF: sub_401800+2BF↑p
.text:004030B0
.text:004030B0 var_C           = dword ptr -0Ch
.text:004030B0 var_8           = dword ptr -8
.text:004030B0 var_4           = dword ptr -4
.text:004030B0 arg_0           = dword ptr  4
.text:004030B0
.text:004030B0                 sub     esp, 0Ch
.text:004030B3                 mov     edx, [esp+0Ch+arg_0]
.text:004030B7                 mov     [esp+0Ch+var_8], 5 ; int
.text:004030BF                 mov     [esp+0Ch+var_C], 0 ; int
.text:004030C6                 mov     [esp+0Ch+var_4], edx ; char *
.text:004030CA                 call    sub_4045F0
.text:004030CF                 add     esp, 0Ch
.text:004030D2                 retn
.text:004030D2 sub_4030B0      endp
.text:004030D2
.text:004030D2 ; ---------------------------------------------------------------------------
.text:004030D3                 align 10h
.text:004030E0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:004030E0                                         ; DATA XREF: .data:off_408020↓o
.text:00403112 ; const char Format[]
.text:00403112 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_4033D0+50↓o
.text:0040311E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040311E                                         ; DATA XREF: sub_4033D0:loc_403471↓o
.text:0040312E                 align 20h
.text:00403140 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00403140                                         ; DATA XREF: sub_4033D0+100↓o
.text:00403140                 db 'ere is NO',0Ah
.text:00403140                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00403140                 db 'R PURPOSE.',0Ah,0
.text:004031D8 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:004031D8                                         ; DATA XREF: sub_4033D0:loc_403511↓o
.text:004031EF aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:004031EF                                         ; DATA XREF: sub_4033D0:loc_40351D↓o
.text:0040320B                 align 20h
.text:00403220 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00403220                                         ; DATA XREF: sub_4033D0:loc_403529↓o
.text:00403220                 db 'and %s.',0Ah,0
.text:00403240 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00403240                                         ; DATA XREF: sub_4033D0:loc_403535↓o
.text:00403240                 db '%s, and %s.',0Ah,0
.text:00403264                 align 20h
.text:00403280 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00403280                                         ; DATA XREF: sub_4033D0:loc_403541↓o
.text:00403280                 db '%s, %s, and %s.',0Ah,0
.text:004032A8                 align 20h
.text:004032C0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:004032C0                                         ; DATA XREF: sub_4033D0:loc_40354D↓o
.text:004032C0                 db '%s, %s, %s, and %s.',0Ah,0
.text:004032EC                 align 20h
.text:00403300 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00403300                                         ; DATA XREF: sub_4033D0:loc_403559↓o
.text:00403300                 db '%s, %s, %s, %s,',0Ah
.text:00403300                 db 'and %s.',0Ah,0
.text:00403330                 align 20h
.text:00403340 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00403340                                         ; DATA XREF: sub_4033D0:loc_403565↓o
.text:00403340                 db '%s, %s, %s, %s,',0Ah
.text:00403340                 db '%s, and %s.',0Ah,0
.text:00403374                 align 10h
.text:00403380 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00403380                                         ; DATA XREF: sub_4033D0:def_40343D↓o
.text:00403380                 db '%s, %s, %s, %s,',0Ah
.text:00403380                 db '%s, %s, and others.',0Ah,0
.text:004033BC ; const char aSS[]
.text:004033BC aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_4033D0+1B5↓o
.text:004033C3                 align 10h
.text:004033D0
.text:004033D0 ; =============== S U B R O U T I N E =======================================
.text:004033D0
.text:004033D0
.text:004033D0 ; int __cdecl sub_4033D0(FILE *, FILE *, int, int, va_list)
.text:004033D0 sub_4033D0      proc near               ; CODE XREF: sub_4035A0+2A↓p
.text:004033D0
.text:004033D0 Stream          = dword ptr -2Ch
.text:004033D0 Format          = dword ptr -28h
.text:004033D0 ArgList         = dword ptr -24h
.text:004033D0 var_20          = dword ptr -20h
.text:004033D0 var_1C          = dword ptr -1Ch
.text:004033D0 var_14          = dword ptr -14h
.text:004033D0 arg_0           = dword ptr  4
.text:004033D0 arg_4           = dword ptr  8
.text:004033D0 arg_8           = dword ptr  0Ch
.text:004033D0 arg_C           = dword ptr  10h
.text:004033D0 arg_10          = dword ptr  14h
.text:004033D0
.text:004033D0                 push    ebp
.text:004033D1                 push    edi
.text:004033D2                 push    esi
.text:004033D3                 push    ebx
.text:004033D4                 sub     esp, 1Ch
.text:004033D7                 xor     ebx, ebx
.text:004033D9                 mov     edi, [esp+2Ch+arg_10]
.text:004033DD                 mov     edx, [esp+2Ch+arg_8]
.text:004033E1                 mov     esi, [esp+2Ch+arg_0]
.text:004033E5                 mov     eax, [edi]
.text:004033E7                 mov     ecx, [esp+2Ch+arg_4]
.text:004033EB                 mov     [esp+2Ch+var_14], edx
.text:004033EF                 mov     ebp, [esp+2Ch+arg_C]
.text:004033F3                 lea     edx, [edi+4]
.text:004033F6                 test    eax, eax
.text:004033F8                 jz      short loc_40340C
.text:004033FA                 lea     esi, [esi+0]
.text:00403400
.text:00403400 loc_403400:                             ; CODE XREF: sub_4033D0+3A↓j
.text:00403400                 mov     eax, edx
.text:00403402                 inc     ebx
.text:00403403                 mov     eax, [eax]
.text:00403405                 add     edx, 4
.text:00403408                 test    eax, eax
.text:0040340A                 jnz     short loc_403400
.text:0040340C
.text:0040340C loc_40340C:                             ; CODE XREF: sub_4033D0+28↑j
.text:0040340C                 test    ecx, ecx
.text:0040340E                 jz      loc_40357D
.text:00403414                 mov     [esp+2Ch+var_1C], ebp
.text:00403418                 mov     edx, [esp+2Ch+var_14]
.text:0040341C                 mov     [esp+2Ch+ArgList], ecx
.text:00403420                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00403428                 mov     [esp+2Ch+var_20], edx
.text:0040342C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040342F                 call    fprintf
.text:00403434
.text:00403434 loc_403434:                             ; CODE XREF: sub_4033D0+1C9↓j
.text:00403434                 cmp     ebx, 9          ; switch 10 cases
.text:00403437                 ja      def_40343D      ; jumptable 0040343D default case
.text:0040343D                 jmp     ds:jpt_40343D[ebx*4] ; switch jump
.text:0040343D ; ---------------------------------------------------------------------------
.text:00403444 jpt_40343D      dd offset loc_40346C    ; DATA XREF: sub_4033D0+6D↑r
.text:00403444                 dd offset loc_403471    ; jump table for switch statement
.text:00403444                 dd offset loc_403511
.text:00403444                 dd offset loc_40351D
.text:00403444                 dd offset loc_403529
.text:00403444                 dd offset loc_403535
.text:00403444                 dd offset loc_403541
.text:00403444                 dd offset loc_40354D
.text:00403444                 dd offset loc_403559
.text:00403444                 dd offset loc_403565
.text:0040346C ; ---------------------------------------------------------------------------
.text:0040346C
.text:0040346C loc_40346C:                             ; CODE XREF: sub_4033D0+6D↑j
.text:0040346C                                         ; DATA XREF: sub_4033D0:jpt_40343D↑o
.text:0040346C                 call    abort           ; jumptable 0040343D case 0
.text:00403471 ; ---------------------------------------------------------------------------
.text:00403471
.text:00403471 loc_403471:                             ; CODE XREF: sub_4033D0+6D↑j
.text:00403471                                         ; DATA XREF: sub_4033D0:jpt_40343D↑o
.text:00403471                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040343D case 1
.text:00403478                 nop
.text:00403479                 lea     esi, [esi+0]
.text:00403480
.text:00403480 loc_403480:                             ; CODE XREF: sub_4033D0+148↓j
.text:00403480                                         ; sub_4033D0+154↓j ...
.text:00403480                 call    ds:libintl_gettext
.text:00403486                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040348A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040348D                 mov     [esp+2Ch+Format], eax ; Format
.text:00403491                 call    vfprintf
.text:00403496                 mov     ebx, [esi+4]
.text:00403499                 dec     ebx
.text:0040349A                 test    ebx, ebx
.text:0040349C                 mov     [esi+4], ebx
.text:0040349F                 js      short loc_4034FF
.text:004034A1                 mov     edi, [esi]
.text:004034A3                 mov     byte ptr [edi], 0Ah
.text:004034A6                 inc     dword ptr [esi]
.text:004034A8
.text:004034A8 loc_4034A8:                             ; CODE XREF: sub_4033D0+13F↓j
.text:004034A8                 mov     [esp+2Ch+Format], esi ; Stream
.text:004034AC                 mov     edx, off_408020 ; "Copyright (C) 2005 Free Software Founda"...
.text:004034B2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:004034B5                 call    fputs
.text:004034BA                 mov     ebp, [esi+4]
.text:004034BD                 dec     ebp
.text:004034BE                 test    ebp, ebp
.text:004034C0                 mov     [esi+4], ebp
.text:004034C3                 js      short loc_4034ED
.text:004034C5                 mov     ecx, [esi]
.text:004034C7                 mov     byte ptr [ecx], 0Ah
.text:004034CA                 inc     dword ptr [esi]
.text:004034CC
.text:004034CC loc_4034CC:                             ; CODE XREF: sub_4033D0+12D↓j
.text:004034CC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:004034D0                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:004034D7                 call    ds:libintl_gettext
.text:004034DD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:004034E1                 add     esp, 1Ch
.text:004034E4                 pop     ebx
.text:004034E5                 pop     esi
.text:004034E6                 pop     edi
.text:004034E7                 pop     ebp
.text:004034E8                 jmp     fputs
.text:004034ED ; ---------------------------------------------------------------------------
.text:004034ED
.text:004034ED loc_4034ED:                             ; CODE XREF: sub_4033D0+F3↑j
.text:004034ED                 mov     [esp+2Ch+Format], esi ; File
.text:004034F1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004034F8                 call    _flsbuf
.text:004034FD                 jmp     short loc_4034CC
.text:004034FF ; ---------------------------------------------------------------------------
.text:004034FF
.text:004034FF loc_4034FF:                             ; CODE XREF: sub_4033D0+CF↑j
.text:004034FF                 mov     [esp+2Ch+Format], esi ; File
.text:00403503                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040350A                 call    _flsbuf
.text:0040350F                 jmp     short loc_4034A8
.text:00403511 ; ---------------------------------------------------------------------------
.text:00403511
.text:00403511 loc_403511:                             ; CODE XREF: sub_4033D0+6D↑j
.text:00403511                                         ; DATA XREF: sub_4033D0:jpt_40343D↑o
.text:00403511                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040343D case 2
.text:00403518                 jmp     loc_403480
.text:0040351D ; ---------------------------------------------------------------------------
.text:0040351D
.text:0040351D loc_40351D:                             ; CODE XREF: sub_4033D0+6D↑j
.text:0040351D                                         ; DATA XREF: sub_4033D0:jpt_40343D↑o
.text:0040351D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040343D case 3
.text:00403524                 jmp     loc_403480
.text:00403529 ; ---------------------------------------------------------------------------
.text:00403529
.text:00403529 loc_403529:                             ; CODE XREF: sub_4033D0+6D↑j
.text:00403529                                         ; DATA XREF: sub_4033D0:jpt_40343D↑o
.text:00403529                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040343D case 4
.text:00403530                 jmp     loc_403480
.text:00403535 ; ---------------------------------------------------------------------------
.text:00403535
.text:00403535 loc_403535:                             ; CODE XREF: sub_4033D0+6D↑j
.text:00403535                                         ; DATA XREF: sub_4033D0:jpt_40343D↑o
.text:00403535                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040343D case 5
.text:0040353C                 jmp     loc_403480
.text:00403541 ; ---------------------------------------------------------------------------
.text:00403541
.text:00403541 loc_403541:                             ; CODE XREF: sub_4033D0+6D↑j
.text:00403541                                         ; DATA XREF: sub_4033D0:jpt_40343D↑o
.text:00403541                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040343D case 6
.text:00403548                 jmp     loc_403480
.text:0040354D ; ---------------------------------------------------------------------------
.text:0040354D
.text:0040354D loc_40354D:                             ; CODE XREF: sub_4033D0+6D↑j
.text:0040354D                                         ; DATA XREF: sub_4033D0:jpt_40343D↑o
.text:0040354D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040343D case 7
.text:00403554                 jmp     loc_403480
.text:00403559 ; ---------------------------------------------------------------------------
.text:00403559
.text:00403559 loc_403559:                             ; CODE XREF: sub_4033D0+6D↑j
.text:00403559                                         ; DATA XREF: sub_4033D0:jpt_40343D↑o
.text:00403559                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040343D case 8
.text:00403560                 jmp     loc_403480
.text:00403565 ; ---------------------------------------------------------------------------
.text:00403565
.text:00403565 loc_403565:                             ; CODE XREF: sub_4033D0+6D↑j
.text:00403565                                         ; DATA XREF: sub_4033D0:jpt_40343D↑o
.text:00403565                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040343D case 9
.text:0040356C                 jmp     loc_403480
.text:00403571 ; ---------------------------------------------------------------------------
.text:00403571
.text:00403571 def_40343D:                             ; CODE XREF: sub_4033D0+67↑j
.text:00403571                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040343D default case
.text:00403578                 jmp     loc_403480
.text:0040357D ; ---------------------------------------------------------------------------
.text:0040357D
.text:0040357D loc_40357D:                             ; CODE XREF: sub_4033D0+3E↑j
.text:0040357D                 mov     [esp+2Ch+var_20], ebp
.text:00403581                 mov     ecx, [esp+2Ch+var_14]
.text:00403585                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040358D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403590                 mov     [esp+2Ch+ArgList], ecx
.text:00403594                 call    fprintf
.text:00403599                 jmp     loc_403434
.text:00403599 sub_4033D0      endp
.text:00403599
.text:00403599 ; ---------------------------------------------------------------------------
.text:0040359E                 align 10h
.text:004035A0
.text:004035A0 ; =============== S U B R O U T I N E =======================================
.text:004035A0
.text:004035A0
.text:004035A0 ; int __cdecl sub_4035A0(FILE *, FILE *, int, int, char)
.text:004035A0 sub_4035A0      proc near               ; CODE XREF: sub_401800+232↑p
.text:004035A0
.text:004035A0 var_1C          = dword ptr -1Ch
.text:004035A0 var_18          = dword ptr -18h
.text:004035A0 var_14          = dword ptr -14h
.text:004035A0 var_10          = dword ptr -10h
.text:004035A0 var_C           = dword ptr -0Ch
.text:004035A0 arg_0           = dword ptr  4
.text:004035A0 arg_4           = dword ptr  8
.text:004035A0 arg_8           = dword ptr  0Ch
.text:004035A0 arg_C           = dword ptr  10h
.text:004035A0 arg_10          = byte ptr  14h
.text:004035A0
.text:004035A0                 sub     esp, 1Ch
.text:004035A3                 mov     edx, [esp+1Ch+arg_C]
.text:004035A7                 lea     ecx, [esp+1Ch+arg_10]
.text:004035AB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:004035AF                 mov     ecx, [esp+1Ch+arg_8]
.text:004035B3                 mov     [esp+1Ch+var_10], edx ; int
.text:004035B7                 mov     edx, [esp+1Ch+arg_4]
.text:004035BB                 mov     [esp+1Ch+var_14], ecx ; int
.text:004035BF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:004035C3                 mov     edx, [esp+1Ch+arg_0]
.text:004035C7                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:004035CA                 call    sub_4033D0
.text:004035CF                 add     esp, 1Ch
.text:004035D2                 retn
.text:004035D2 sub_4035A0      endp
.text:004035D2
.text:004035D2 ; ---------------------------------------------------------------------------
.text:004035D3                 align 10h
.text:004035E0
.text:004035E0 ; =============== S U B R O U T I N E =======================================
.text:004035E0
.text:004035E0
.text:004035E0 ; int __cdecl sub_4035E0(int, int, char *, int, int)
.text:004035E0 sub_4035E0      proc near               ; CODE XREF: sub_401800+9F↑p
.text:004035E0
.text:004035E0 var_1C          = dword ptr -1Ch
.text:004035E0 var_18          = dword ptr -18h
.text:004035E0 var_14          = dword ptr -14h
.text:004035E0 var_10          = dword ptr -10h
.text:004035E0 var_C           = dword ptr -0Ch
.text:004035E0 var_8           = dword ptr -8
.text:004035E0 var_4           = dword ptr -4
.text:004035E0 arg_0           = dword ptr  4
.text:004035E0 arg_4           = dword ptr  8
.text:004035E0 arg_8           = dword ptr  0Ch
.text:004035E0 arg_C           = dword ptr  10h
.text:004035E0 arg_10          = dword ptr  14h
.text:004035E0
.text:004035E0                 sub     esp, 1Ch
.text:004035E3                 mov     edx, [esp+1Ch+arg_C]
.text:004035E7                 mov     [esp+1Ch+var_4], 0 ; int
.text:004035EF                 mov     ecx, [esp+1Ch+arg_10]
.text:004035F3                 mov     [esp+1Ch+var_8], 0 ; int
.text:004035FB                 mov     [esp+1Ch+var_10], edx ; int
.text:004035FF                 mov     edx, [esp+1Ch+arg_4]
.text:00403603                 mov     [esp+1Ch+var_C], ecx ; int
.text:00403607                 mov     ecx, [esp+1Ch+arg_8]
.text:0040360B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040360F                 mov     edx, [esp+1Ch+arg_0]
.text:00403613                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00403617                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040361A                 call    sub_402E40
.text:0040361F                 add     esp, 1Ch
.text:00403622                 retn
.text:00403622 sub_4035E0      endp
.text:00403622
.text:00403622 ; ---------------------------------------------------------------------------
.text:00403623                 align 10h
.text:00403630                 sub     esp, 2Ch
.text:00403633                 mov     edx, [esp+44h]
.text:00403637                 mov     dword ptr [esp+18h], 0
.text:0040363F                 mov     ecx, [esp+40h]
.text:00403643                 mov     dword ptr [esp+14h], 0
.text:0040364B                 mov     [esp+1Ch], edx
.text:0040364F                 mov     edx, [esp+3Ch]
.text:00403653                 mov     [esp+10h], ecx
.text:00403657                 mov     ecx, [esp+38h]
.text:0040365B                 mov     [esp+0Ch], edx
.text:0040365F                 mov     edx, [esp+34h]
.text:00403663                 mov     [esp+8], ecx
.text:00403667                 mov     [esp+4], edx
.text:0040366B                 mov     edx, [esp+30h]
.text:0040366F                 mov     [esp], edx
.text:00403672                 call    sub_4022B0
.text:00403677                 add     esp, 2Ch
.text:0040367A                 retn
.text:0040367A ; ---------------------------------------------------------------------------
.text:0040367B                 align 10h
.text:00403680                 sub     esp, 1Ch
.text:00403683                 mov     edx, [esp+2Ch]
.text:00403687                 mov     dword ptr [esp+18h], 0
.text:0040368F                 mov     ecx, [esp+30h]
.text:00403693                 mov     dword ptr [esp+14h], 1
.text:0040369B                 mov     [esp+0Ch], edx
.text:0040369F                 mov     edx, [esp+24h]
.text:004036A3                 mov     [esp+10h], ecx
.text:004036A7                 mov     ecx, [esp+28h]
.text:004036AB                 mov     [esp+4], edx
.text:004036AF                 mov     edx, [esp+20h]
.text:004036B3                 mov     [esp+8], ecx
.text:004036B7                 mov     [esp], edx
.text:004036BA                 call    sub_402E40
.text:004036BF                 add     esp, 1Ch
.text:004036C2                 retn
.text:004036C2 ; ---------------------------------------------------------------------------
.text:004036C3                 align 10h
.text:004036D0                 sub     esp, 2Ch
.text:004036D3                 mov     edx, [esp+44h]
.text:004036D7                 mov     dword ptr [esp+18h], 0
.text:004036DF                 mov     ecx, [esp+40h]
.text:004036E3                 mov     dword ptr [esp+14h], 1
.text:004036EB                 mov     [esp+1Ch], edx
.text:004036EF                 mov     edx, [esp+3Ch]
.text:004036F3                 mov     [esp+10h], ecx
.text:004036F7                 mov     ecx, [esp+38h]
.text:004036FB                 mov     [esp+0Ch], edx
.text:004036FF                 mov     edx, [esp+34h]
.text:00403703                 mov     [esp+8], ecx
.text:00403707                 mov     [esp+4], edx
.text:0040370B                 mov     edx, [esp+30h]
.text:0040370F                 mov     [esp], edx
.text:00403712                 call    sub_4022B0
.text:00403717                 add     esp, 2Ch
.text:0040371A                 retn
.text:0040371A ; ---------------------------------------------------------------------------
.text:0040371B                 align 10h
.text:00403720                 mov     edx, [esp+4]
.text:00403724                 mov     ds:dword_409150, edx
.text:0040372A                 retn
.text:0040372A ; ---------------------------------------------------------------------------
.text:0040372B aWriteError     db 'write error',0      ; DATA XREF: sub_403750:loc_403799↓o
.text:00403737 ; const char aSS_0[]
.text:00403737 aSS_0           db '%s: %s',0           ; DATA XREF: sub_403750+77↓o
.text:0040373E ; const char aS_2[]
.text:0040373E aS_2            db '%s',0               ; DATA XREF: sub_403750+A0↓o
.text:00403741 ; ---------------------------------------------------------------------------
.text:00403741                 jmp     short sub_403750
.text:00403741 ; ---------------------------------------------------------------------------
.text:00403743                 align 10h
.text:00403750
.text:00403750 ; =============== S U B R O U T I N E =======================================
.text:00403750
.text:00403750
.text:00403750 ; void __cdecl sub_403750()
.text:00403750 sub_403750      proc near               ; CODE XREF: .text:00403741↑j
.text:00403750                                         ; DATA XREF: sub_401800+65↑o
.text:00403750
.text:00403750 Stream          = dword ptr -2Ch
.text:00403750 ErrorMessage    = dword ptr -28h
.text:00403750 var_24          = dword ptr -24h
.text:00403750 var_20          = byte ptr -20h
.text:00403750 var_1C          = dword ptr -1Ch
.text:00403750 var_9           = byte ptr -9
.text:00403750
.text:00403750                 push    esi
.text:00403751                 push    ebx
.text:00403752                 sub     esp, 24h
.text:00403755                 mov     edx, ds:_iob
.text:0040375B                 mov     ecx, [edx+2Ch]
.text:0040375E                 lea     esi, [edx+20h]
.text:00403761                 shr     ecx, 5
.text:00403764                 mov     bl, cl
.text:00403766                 mov     ecx, [edx+20h]
.text:00403769                 and     bl, 1
.text:0040376C                 cmp     ecx, [esi+8]
.text:0040376F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403772                 setz    [esp+2Ch+var_9]
.text:00403777                 call    fclose
.text:0040377C                 test    eax, eax
.text:0040377E                 setnz   al
.text:00403781                 test    bl, bl
.text:00403783                 jnz     loc_403813
.text:00403789                 test    al, al
.text:0040378B                 jz      short loc_4037E0
.text:0040378D
.text:0040378D loc_40378D:                             ; CODE XREF: sub_403750+CD↓j
.text:0040378D                 call    _errno
.text:00403792                 mov     esi, [eax]
.text:00403794
.text:00403794 loc_403794:                             ; CODE XREF: sub_403750+C7↓j
.text:00403794                 cmp     esi, 9
.text:00403797                 jz      short loc_403806
.text:00403799
.text:00403799 loc_403799:                             ; CODE XREF: sub_403750+B8↓j
.text:00403799                                         ; sub_403750+C1↓j
.text:00403799                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:004037A0                 call    ds:libintl_gettext
.text:004037A6                 mov     ebx, eax
.text:004037A8                 mov     eax, ds:dword_409150
.text:004037AD                 test    eax, eax
.text:004037AF                 jz      short loc_4037E6
.text:004037B1                 mov     [esp+2Ch+Stream], eax ; char *
.text:004037B4                 call    sub_404960
.text:004037B9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:004037BD                 mov     edx, Code
.text:004037C3                 mov     [esp+2Ch+var_1C], ebx
.text:004037C7                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:004037CF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004037D3                 mov     [esp+2Ch+Stream], edx ; Code
.text:004037D6                 call    sub_404F50
.text:004037DB                 nop
.text:004037DC                 lea     esi, [esi+0]
.text:004037E0
.text:004037E0 loc_4037E0:                             ; CODE XREF: sub_403750+3B↑j
.text:004037E0                                         ; sub_403750+B4↓j ...
.text:004037E0                 add     esp, 24h
.text:004037E3                 pop     ebx
.text:004037E4                 pop     esi
.text:004037E5                 retn
.text:004037E6 ; ---------------------------------------------------------------------------
.text:004037E6
.text:004037E6 loc_4037E6:                             ; CODE XREF: sub_403750+5F↑j
.text:004037E6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:004037EA                 mov     ebx, Code
.text:004037F0                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:004037F8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004037FC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:004037FF                 call    sub_404F50
.text:00403804                 jmp     short loc_4037E0
.text:00403806 ; ---------------------------------------------------------------------------
.text:00403806
.text:00403806 loc_403806:                             ; CODE XREF: sub_403750+47↑j
.text:00403806                 test    bl, bl
.text:00403808                 jnz     short loc_403799
.text:0040380A                 cmp     [esp+2Ch+var_9], 0
.text:0040380F                 jnz     short loc_4037E0
.text:00403811                 jmp     short loc_403799
.text:00403813 ; ---------------------------------------------------------------------------
.text:00403813
.text:00403813 loc_403813:                             ; CODE XREF: sub_403750+33↑j
.text:00403813                 xor     esi, esi
.text:00403815                 test    al, al
.text:00403817                 jz      loc_403794
.text:0040381D                 jmp     loc_40378D
.text:0040381D sub_403750      endp
.text:0040381D
.text:0040381D ; ---------------------------------------------------------------------------
.text:00403822                 align 10h
.text:00403830 aLiteral        db 'literal',0          ; DATA XREF: .text:00403870↓o
.text:00403838 aShell          db 'shell',0            ; DATA XREF: .text:00403874↓o
.text:0040383E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00403878↓o
.text:0040384B aC              db 'c',0                ; DATA XREF: .text:0040387C↓o
.text:0040384D aEscape         db 'escape',0           ; DATA XREF: .text:00403880↓o
.text:00403854 aLocale         db 'locale',0           ; DATA XREF: .text:00403884↓o
.text:0040385B aClocale        db 'clocale',0          ; DATA XREF: .text:00403888↓o
.text:00403863                 align 10h
.text:00403870                 dd offset aLiteral      ; "literal"
.text:00403874                 dd offset aShell        ; "shell"
.text:00403878                 dd offset aShellAlways  ; "shell-always"
.text:0040387C                 dd offset aC            ; "c"
.text:00403880                 dd offset aEscape       ; "escape"
.text:00403884                 dd offset aLocale       ; "locale"
.text:00403888                 dd offset aClocale      ; "clocale"
.text:0040388C                 dd 2 dup(0)
.text:00403894                 dd 1, 2, 3, 4, 5, 6
.text:004038AC asc_4038AC:                             ; DATA XREF: sub_4038C0+7E↓o
.text:004038AC                                         ; sub_4038C0+A39↓o ...
.text:004038AC                 text "UTF-16LE", '"',27h,'`'
.text:004038B2                 align 10h
.text:004038C0
.text:004038C0 ; =============== S U B R O U T I N E =======================================
.text:004038C0
.text:004038C0
.text:004038C0 ; int __cdecl sub_4038C0(int, int, char *Str, int, int, int)
.text:004038C0 sub_4038C0      proc near               ; CODE XREF: sub_4038C0+43A↓p
.text:004038C0                                         ; .text:00404483↓p ...
.text:004038C0
.text:004038C0 C               = dword ptr -4Ch
.text:004038C0 Type            = dword ptr -48h
.text:004038C0 SizeInBytes     = dword ptr -44h
.text:004038C0 State           = dword ptr -40h
.text:004038C0 var_3C          = dword ptr -3Ch
.text:004038C0 var_38          = dword ptr -38h
.text:004038C0 var_34          = dword ptr -34h
.text:004038C0 var_30          = dword ptr -30h
.text:004038C0 var_29          = byte ptr -29h
.text:004038C0 var_28          = dword ptr -28h
.text:004038C0 var_22          = byte ptr -22h
.text:004038C0 var_21          = byte ptr -21h
.text:004038C0 var_20          = dword ptr -20h
.text:004038C0 var_1C          = dword ptr -1Ch
.text:004038C0 var_18          = mbstate_t ptr -18h
.text:004038C0 arg_0           = dword ptr  4
.text:004038C0 arg_4           = dword ptr  8
.text:004038C0 Str             = dword ptr  0Ch
.text:004038C0 arg_C           = dword ptr  10h
.text:004038C0 arg_10          = dword ptr  14h
.text:004038C0 arg_14          = dword ptr  18h
.text:004038C0
.text:004038C0                 push    ebp
.text:004038C1                 push    edi
.text:004038C2                 push    esi
.text:004038C3                 push    ebx
.text:004038C4                 sub     esp, 3Ch
.text:004038C7                 mov     edx, ds:__mb_cur_max
.text:004038CD                 mov     [esp+4Ch+var_34], 0
.text:004038D5                 mov     [esp+4Ch+var_1C], 0
.text:004038DD                 cmp     dword ptr [edx], 1
.text:004038E0                 mov     [esp+4Ch+var_20], 0
.text:004038E8                 mov     [esp+4Ch+var_21], 0
.text:004038ED                 setz    [esp+4Ch+var_22]
.text:004038F2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:004038F7                 ja      short def_4038FD ; jumptable 004038FD default case, cases 0,1
.text:004038F9                 mov     edx, [esp+4Ch+arg_10]
.text:004038FD                 jmp     ds:jpt_4038FD[edx*4] ; switch jump
.text:004038FD ; ---------------------------------------------------------------------------
.text:00403904 jpt_4038FD      dd offset def_4038FD    ; DATA XREF: sub_4038C0+3D↑r
.text:00403904                 dd offset def_4038FD    ; jump table for switch statement
.text:00403904                 dd offset loc_404245
.text:00403904                 dd offset loc_403920
.text:00403904                 dd offset loc_40426B
.text:00403904                 dd offset loc_404275
.text:00403904                 dd offset loc_404275
.text:00403920 ; ---------------------------------------------------------------------------
.text:00403920
.text:00403920 loc_403920:                             ; CODE XREF: sub_4038C0+3D↑j
.text:00403920                                         ; DATA XREF: sub_4038C0:jpt_4038FD↑o
.text:00403920                 mov     eax, [esp+4Ch+arg_4] ; jumptable 004038FD case 3
.text:00403924                 cmp     [esp+4Ch+var_34], eax
.text:00403928                 jnb     short loc_403931
.text:0040392A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040392E                 mov     byte ptr [ebx], 22h ; '"'
.text:00403931
.text:00403931 loc_403931:                             ; CODE XREF: sub_4038C0+68↑j
.text:00403931                 mov     [esp+4Ch+var_34], 1
.text:00403939                 mov     [esp+4Ch+var_21], 1
.text:0040393E                 mov     [esp+4Ch+var_1C], offset asc_4038AC ; "\"'`"
.text:00403946
.text:00403946 loc_403946:                             ; CODE XREF: sub_4038C0+9A6↓j
.text:00403946                 mov     [esp+4Ch+var_20], 1
.text:0040394E
.text:0040394E def_4038FD:                             ; CODE XREF: sub_4038C0+37↑j
.text:0040394E                                         ; sub_4038C0+3D↑j ...
.text:0040394E                 xor     ebp, ebp        ; jumptable 004038FD default case, cases 0,1
.text:00403950
.text:00403950 loc_403950:                             ; CODE XREF: sub_4038C0+3DB↓j
.text:00403950                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403955                 jz      loc_404237
.text:0040395B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040395F
.text:0040395F loc_40395F:                             ; CODE XREF: sub_4038C0+980↓j
.text:0040395F                 jz      loc_4041CE
.text:00403965                 cmp     [esp+4Ch+var_21], 0
.text:0040396A                 jz      short loc_4039B0
.text:0040396C                 mov     esi, [esp+4Ch+var_20]
.text:00403970                 test    esi, esi
.text:00403972                 jz      short loc_4039B0
.text:00403974                 mov     ecx, [esp+4Ch+var_20]
.text:00403978                 lea     edi, [ecx+ebp]
.text:0040397B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040397F                 ja      short loc_4039B0
.text:00403981                 cld
.text:00403982                 mov     ebx, [esp+4Ch+Str]
.text:00403986                 mov     edi, [esp+4Ch+var_1C]
.text:0040398A                 add     ebx, ebp
.text:0040398C                 mov     esi, ebx
.text:0040398E                 cmp     ecx, ecx
.text:00403990                 repe cmpsb
.text:00403992                 jnz     short loc_4039B0
.text:00403994                 mov     edx, [esp+4Ch+arg_4]
.text:00403998                 cmp     [esp+4Ch+var_34], edx
.text:0040399C                 jnb     short loc_4039AA
.text:0040399E                 mov     ecx, [esp+4Ch+arg_0]
.text:004039A2                 mov     eax, [esp+4Ch+var_34]
.text:004039A6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004039AA
.text:004039AA loc_4039AA:                             ; CODE XREF: sub_4038C0+DC↑j
.text:004039AA                 inc     [esp+4Ch+var_34]
.text:004039AE                 mov     esi, esi
.text:004039B0
.text:004039B0 loc_4039B0:                             ; CODE XREF: sub_4038C0+AA↑j
.text:004039B0                                         ; sub_4038C0+B2↑j ...
.text:004039B0                 mov     edi, [esp+4Ch+Str]
.text:004039B4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004039B9                 movzx   eax, bl
.text:004039BC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004039BF                 ja      def_4039C5      ; jumptable 004039C5 default case, cases 1-6,14-31,64
.text:004039C5                 jmp     ds:jpt_4039C5[eax*4] ; switch jump
.text:004039C5 ; ---------------------------------------------------------------------------
.text:004039CC jpt_4039C5      dd offset loc_403BC8, offset def_4039C5, offset def_4039C5
.text:004039CC                                         ; DATA XREF: sub_4038C0+105↑r
.text:004039CC                 dd offset def_4039C5, offset def_4039C5, offset def_4039C5 ; jump table for switch statement
.text:004039CC                 dd offset def_4039C5, offset loc_403CA0, offset loc_403CBE
.text:004039CC                 dd offset loc_403CC2, offset loc_403D07, offset loc_403D0B
.text:004039CC                 dd offset loc_403D0F, offset loc_403D13, offset def_4039C5
.text:004039CC                 dd offset def_4039C5, offset def_4039C5, offset def_4039C5
.text:004039CC                 dd offset def_4039C5, offset def_4039C5, offset def_4039C5
.text:004039CC                 dd offset def_4039C5, offset def_4039C5, offset def_4039C5
.text:004039CC                 dd offset def_4039C5, offset def_4039C5, offset def_4039C5
.text:004039CC                 dd offset def_4039C5, offset def_4039C5, offset def_4039C5
.text:004039CC                 dd offset def_4039C5, offset def_4039C5, offset loc_404198
.text:004039CC                 dd offset loc_404198, offset loc_404198, offset loc_4041BA
.text:004039CC                 dd offset loc_404198, offset def_403DC2, offset loc_404198
.text:004039CC                 dd offset loc_403D17, offset loc_404198, offset loc_404198
.text:004039CC                 dd offset loc_404198, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset loc_404198
.text:004039CC                 dd offset loc_404198, offset loc_404198, offset loc_404198
.text:004039CC                 dd offset loc_403D7C, offset def_4039C5, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset loc_404198, offset loc_404191
.text:004039CC                 dd offset def_403DC2, offset loc_404198, offset def_403DC2
.text:004039CC                 dd offset loc_404198, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset def_403DC2, offset def_403DC2, offset def_403DC2
.text:004039CC                 dd offset loc_4041A8, offset loc_404198, offset loc_4041A8
.text:004039CC                 dd offset loc_4041BA
.text:00403BC8 ; ---------------------------------------------------------------------------
.text:00403BC8
.text:00403BC8 loc_403BC8:                             ; CODE XREF: sub_4038C0+105↑j
.text:00403BC8                                         ; DATA XREF: sub_4038C0:jpt_4039C5↑o
.text:00403BC8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004039C5 case 0
.text:00403BCD                 lea     eax, [ebp+1]
.text:00403BD0                 jz      loc_403C80
.text:00403BD6                 mov     esi, [esp+4Ch+arg_4]
.text:00403BDA                 cmp     [esp+4Ch+var_34], esi
.text:00403BDE                 jnb     short loc_403BEC
.text:00403BE0                 mov     eax, [esp+4Ch+arg_0]
.text:00403BE4                 mov     ebx, [esp+4Ch+var_34]
.text:00403BE8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00403BEC
.text:00403BEC loc_403BEC:                             ; CODE XREF: sub_4038C0+31E↑j
.text:00403BEC                 inc     [esp+4Ch+var_34]
.text:00403BF0                 mov     edx, [esp+4Ch+arg_4]
.text:00403BF4                 cmp     [esp+4Ch+var_34], edx
.text:00403BF8                 jnb     short loc_403C06
.text:00403BFA                 mov     edi, [esp+4Ch+arg_0]
.text:00403BFE                 mov     ecx, [esp+4Ch+var_34]
.text:00403C02                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00403C06
.text:00403C06 loc_403C06:                             ; CODE XREF: sub_4038C0+338↑j
.text:00403C06                 inc     [esp+4Ch+var_34]
.text:00403C0A                 mov     esi, [esp+4Ch+arg_4]
.text:00403C0E                 cmp     [esp+4Ch+var_34], esi
.text:00403C12                 jnb     short loc_403C20
.text:00403C14                 mov     ebx, [esp+4Ch+arg_0]
.text:00403C18                 mov     eax, [esp+4Ch+var_34]
.text:00403C1C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00403C20
.text:00403C20 loc_403C20:                             ; CODE XREF: sub_4038C0+352↑j
.text:00403C20                 inc     [esp+4Ch+var_34]
.text:00403C24                 mov     bl, 30h ; '0'
.text:00403C26                 lea     esi, [esi+0]
.text:00403C29                 lea     edi, [edi+0]
.text:00403C30
.text:00403C30 def_403DC2:                             ; CODE XREF: sub_4038C0+105↑j
.text:00403C30                                         ; sub_4038C0+463↓j ...
.text:00403C30                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004039C5 cases 37,43-58,65-90,93,95,97-122
.text:00403C30                                         ; jumptable 00403DC2 default case, cases 34-38,42-44,46,48-59
.text:00403C35                 lea     eax, [ebp+1]
.text:00403C38                 jz      short loc_403C80
.text:00403C3A                 mov     cl, bl
.text:00403C3C                 mov     edi, [esp+4Ch+arg_14]
.text:00403C40                 mov     esi, 1
.text:00403C45                 shr     cl, 5
.text:00403C48                 movzx   edx, cl
.text:00403C4B                 mov     ecx, ebx
.text:00403C4D                 and     ecx, 1Fh
.text:00403C50                 shl     esi, cl
.text:00403C52                 test    [edi+edx*4+4], esi
.text:00403C56                 jz      short loc_403C72
.text:00403C58
.text:00403C58 loc_403C58:                             ; CODE XREF: sub_4038C0+3FC↓j
.text:00403C58                 mov     edx, [esp+4Ch+arg_4]
.text:00403C5C                 cmp     [esp+4Ch+var_34], edx
.text:00403C60                 jnb     short loc_403C6E
.text:00403C62                 mov     edi, [esp+4Ch+arg_0]
.text:00403C66                 mov     esi, [esp+4Ch+var_34]
.text:00403C6A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00403C6E
.text:00403C6E loc_403C6E:                             ; CODE XREF: sub_4038C0+3A0↑j
.text:00403C6E                 inc     [esp+4Ch+var_34]
.text:00403C72
.text:00403C72 loc_403C72:                             ; CODE XREF: sub_4038C0+396↑j
.text:00403C72                 lea     eax, [ebp+1]
.text:00403C75                 lea     esi, [esi+0]
.text:00403C79                 lea     edi, [edi+0]
.text:00403C80
.text:00403C80 loc_403C80:                             ; CODE XREF: sub_4038C0+310↑j
.text:00403C80                                         ; sub_4038C0+378↑j ...
.text:00403C80                 mov     ebp, [esp+4Ch+arg_4]
.text:00403C84                 cmp     [esp+4Ch+var_34], ebp
.text:00403C88                 jnb     short loc_403C95
.text:00403C8A                 mov     edx, [esp+4Ch+arg_0]
.text:00403C8E                 mov     ecx, [esp+4Ch+var_34]
.text:00403C92                 mov     [ecx+edx], bl
.text:00403C95
.text:00403C95 loc_403C95:                             ; CODE XREF: sub_4038C0+3C8↑j
.text:00403C95                 inc     [esp+4Ch+var_34]
.text:00403C99                 mov     ebp, eax
.text:00403C9B                 jmp     loc_403950
.text:00403CA0 ; ---------------------------------------------------------------------------
.text:00403CA0
.text:00403CA0 loc_403CA0:                             ; CODE XREF: sub_4038C0+105↑j
.text:00403CA0                                         ; DATA XREF: sub_4038C0:jpt_4039C5↑o
.text:00403CA0                 mov     dl, 61h ; 'a'   ; jumptable 004039C5 case 7
.text:00403CA2                 lea     esi, [esi+0]
.text:00403CA9                 lea     edi, [edi+0]
.text:00403CB0
.text:00403CB0 loc_403CB0:                             ; CODE XREF: sub_4038C0+400↓j
.text:00403CB0                                         ; sub_4038C0+409↓j ...
.text:00403CB0                 cmp     [esp+4Ch+var_21], 0
.text:00403CB5                 lea     eax, [ebp+1]
.text:00403CB8                 jz      short loc_403C80
.text:00403CBA                 mov     bl, dl
.text:00403CBC                 jmp     short loc_403C58
.text:00403CBE ; ---------------------------------------------------------------------------
.text:00403CBE
.text:00403CBE loc_403CBE:                             ; CODE XREF: sub_4038C0+105↑j
.text:00403CBE                                         ; DATA XREF: sub_4038C0:jpt_4039C5↑o
.text:00403CBE                 mov     dl, 62h ; 'b'   ; jumptable 004039C5 case 8
.text:00403CC0                 jmp     short loc_403CB0
.text:00403CC2 ; ---------------------------------------------------------------------------
.text:00403CC2
.text:00403CC2 loc_403CC2:                             ; CODE XREF: sub_4038C0+105↑j
.text:00403CC2                                         ; DATA XREF: sub_4038C0:jpt_4039C5↑o
.text:00403CC2                 mov     dl, 74h ; 't'   ; jumptable 004039C5 case 9
.text:00403CC4
.text:00403CC4 loc_403CC4:                             ; CODE XREF: sub_4038C0+449↓j
.text:00403CC4                                         ; sub_4038C0+455↓j ...
.text:00403CC4                 cmp     [esp+4Ch+arg_10], 1
.text:00403CC9                 jnz     short loc_403CB0
.text:00403CCB
.text:00403CCB loc_403CCB:                             ; CODE XREF: sub_4038C0+45C↓j
.text:00403CCB                                         ; sub_4038C0+4C1↓j ...
.text:00403CCB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404092 cases 91,92,94,96,124
.text:00403CD3                 mov     eax, [esp+4Ch+arg_14]
.text:00403CD7                 mov     edx, [esp+4Ch+arg_C]
.text:00403CDB                 mov     ecx, [esp+4Ch+Str]
.text:00403CDF                 mov     ebx, [esp+4Ch+arg_4]
.text:00403CE3                 mov     [esp+4Ch+var_38], eax ; int
.text:00403CE7                 mov     ebp, [esp+4Ch+arg_0]
.text:00403CEB                 mov     [esp+4Ch+State], edx ; int
.text:00403CEF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00403CF3                 mov     [esp+4Ch+Type], ebx ; int
.text:00403CF7                 mov     [esp+4Ch+C], ebp ; int
.text:00403CFA                 call    sub_4038C0
.text:00403CFF
.text:00403CFF loc_403CFF:                             ; CODE XREF: sub_4038C0+972↓j
.text:00403CFF                 add     esp, 3Ch
.text:00403D02                 pop     ebx
.text:00403D03                 pop     esi
.text:00403D04                 pop     edi
.text:00403D05                 pop     ebp
.text:00403D06                 retn
.text:00403D07 ; ---------------------------------------------------------------------------
.text:00403D07
.text:00403D07 loc_403D07:                             ; CODE XREF: sub_4038C0+105↑j
.text:00403D07                                         ; DATA XREF: sub_4038C0:jpt_4039C5↑o
.text:00403D07                 mov     dl, 6Eh ; 'n'   ; jumptable 004039C5 case 10
.text:00403D09                 jmp     short loc_403CC4
.text:00403D0B ; ---------------------------------------------------------------------------
.text:00403D0B
.text:00403D0B loc_403D0B:                             ; CODE XREF: sub_4038C0+105↑j
.text:00403D0B                                         ; DATA XREF: sub_4038C0:jpt_4039C5↑o
.text:00403D0B                 mov     dl, 76h ; 'v'   ; jumptable 004039C5 case 11
.text:00403D0D                 jmp     short loc_403CB0
.text:00403D0F ; ---------------------------------------------------------------------------
.text:00403D0F
.text:00403D0F loc_403D0F:                             ; CODE XREF: sub_4038C0+105↑j
.text:00403D0F                                         ; DATA XREF: sub_4038C0:jpt_4039C5↑o
.text:00403D0F                 mov     dl, 66h ; 'f'   ; jumptable 004039C5 case 12
.text:00403D11                 jmp     short loc_403CB0
.text:00403D13 ; ---------------------------------------------------------------------------
.text:00403D13
.text:00403D13 loc_403D13:                             ; CODE XREF: sub_4038C0+105↑j
.text:00403D13                                         ; DATA XREF: sub_4038C0:jpt_4039C5↑o
.text:00403D13                 mov     dl, 72h ; 'r'   ; jumptable 004039C5 case 13
.text:00403D15                 jmp     short loc_403CC4
.text:00403D17 ; ---------------------------------------------------------------------------
.text:00403D17
.text:00403D17 loc_403D17:                             ; CODE XREF: sub_4038C0+105↑j
.text:00403D17                                         ; DATA XREF: sub_4038C0:jpt_4039C5↑o
.text:00403D17                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004039C5 case 39
.text:00403D1C                 jz      short loc_403CCB ; jumptable 00404092 cases 91,92,94,96,124
.text:00403D1E                 cmp     [esp+4Ch+arg_10], 2
.text:00403D23                 jnz     def_403DC2      ; jumptable 004039C5 cases 37,43-58,65-90,93,95,97-122
.text:00403D23                                         ; jumptable 00403DC2 default case, cases 34-38,42-44,46,48-59
.text:00403D29                 mov     edx, [esp+4Ch+arg_4]
.text:00403D2D                 cmp     [esp+4Ch+var_34], edx
.text:00403D31                 jnb     short loc_403D3F
.text:00403D33                 mov     ecx, [esp+4Ch+arg_0]
.text:00403D37                 mov     edi, [esp+4Ch+var_34]
.text:00403D3B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00403D3F
.text:00403D3F loc_403D3F:                             ; CODE XREF: sub_4038C0+471↑j
.text:00403D3F                 inc     [esp+4Ch+var_34]
.text:00403D43                 mov     eax, [esp+4Ch+arg_4]
.text:00403D47                 cmp     [esp+4Ch+var_34], eax
.text:00403D4B                 jnb     short loc_403D59
.text:00403D4D                 mov     esi, [esp+4Ch+arg_0]
.text:00403D51                 mov     edx, [esp+4Ch+var_34]
.text:00403D55                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403D59
.text:00403D59 loc_403D59:                             ; CODE XREF: sub_4038C0+48B↑j
.text:00403D59                 inc     [esp+4Ch+var_34]
.text:00403D5D                 mov     edi, [esp+4Ch+arg_4]
.text:00403D61                 cmp     [esp+4Ch+var_34], edi
.text:00403D65                 jnb     short loc_403D73
.text:00403D67                 mov     ecx, [esp+4Ch+arg_0]
.text:00403D6B                 mov     eax, [esp+4Ch+var_34]
.text:00403D6F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00403D73
.text:00403D73 loc_403D73:                             ; CODE XREF: sub_4038C0+4A5↑j
.text:00403D73                                         ; sub_4038C0+5C4↓j ...
.text:00403D73                 inc     [esp+4Ch+var_34]
.text:00403D77                 jmp     def_403DC2      ; jumptable 004039C5 cases 37,43-58,65-90,93,95,97-122
.text:00403D77                                         ; jumptable 00403DC2 default case, cases 34-38,42-44,46,48-59
.text:00403D7C ; ---------------------------------------------------------------------------
.text:00403D7C
.text:00403D7C loc_403D7C:                             ; CODE XREF: sub_4038C0+105↑j
.text:00403D7C                                         ; DATA XREF: sub_4038C0:jpt_4039C5↑o
.text:00403D7C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004039C5 case 63
.text:00403D81                 jz      loc_403CCB      ; jumptable 00404092 cases 91,92,94,96,124
.text:00403D87                 cmp     [esp+4Ch+arg_10], 3
.text:00403D8C                 jnz     def_403DC2      ; jumptable 004039C5 cases 37,43-58,65-90,93,95,97-122
.text:00403D8C                                         ; jumptable 00403DC2 default case, cases 34-38,42-44,46,48-59
.text:00403D92                 lea     edx, [ebp+2]
.text:00403D95                 cmp     edx, [esp+4Ch+arg_C]
.text:00403D99                 jnb     def_403DC2      ; jumptable 004039C5 cases 37,43-58,65-90,93,95,97-122
.text:00403D99                                         ; jumptable 00403DC2 default case, cases 34-38,42-44,46,48-59
.text:00403D9F                 mov     esi, [esp+4Ch+Str]
.text:00403DA3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00403DA8                 jnz     def_403DC2      ; jumptable 004039C5 cases 37,43-58,65-90,93,95,97-122
.text:00403DA8                                         ; jumptable 00403DC2 default case, cases 34-38,42-44,46,48-59
.text:00403DAE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00403DB3                 movsx   eax, cl
.text:00403DB6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00403DB9                 cmp     eax, 1Dh
.text:00403DBC                 ja      def_403DC2      ; jumptable 004039C5 cases 37,43-58,65-90,93,95,97-122
.text:00403DBC                                         ; jumptable 00403DC2 default case, cases 34-38,42-44,46,48-59
.text:00403DC2                 jmp     ds:jpt_403DC2[eax*4] ; switch jump
.text:00403DC2 ; ---------------------------------------------------------------------------
.text:00403DC9                 align 4
.text:00403DCC jpt_403DC2      dd offset loc_403E44    ; DATA XREF: sub_4038C0+502↑r
.text:00403DCC                 dd offset def_403DC2    ; jump table for switch statement
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset loc_403E44
.text:00403DCC                 dd offset loc_403E44
.text:00403DCC                 dd offset loc_403E44
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset loc_403E44
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset loc_403E44
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset def_403DC2
.text:00403DCC                 dd offset loc_403E44
.text:00403DCC                 dd offset loc_403E44
.text:00403DCC                 dd offset loc_403E44
.text:00403E44 ; ---------------------------------------------------------------------------
.text:00403E44
.text:00403E44 loc_403E44:                             ; CODE XREF: sub_4038C0+502↑j
.text:00403E44                                         ; DATA XREF: sub_4038C0:jpt_403DC2↑o
.text:00403E44                 mov     ebp, edx        ; jumptable 00403DC2 cases 33,39-41,45,47,60-62
.text:00403E46                 mov     bl, cl
.text:00403E48                 mov     edx, [esp+4Ch+arg_4]
.text:00403E4C                 cmp     [esp+4Ch+var_34], edx
.text:00403E50                 jnb     short loc_403E5E
.text:00403E52                 mov     ecx, [esp+4Ch+arg_0]
.text:00403E56                 mov     edi, [esp+4Ch+var_34]
.text:00403E5A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00403E5E
.text:00403E5E loc_403E5E:                             ; CODE XREF: sub_4038C0+590↑j
.text:00403E5E                 inc     [esp+4Ch+var_34]
.text:00403E62                 mov     eax, [esp+4Ch+arg_4]
.text:00403E66                 cmp     [esp+4Ch+var_34], eax
.text:00403E6A                 jnb     short loc_403E78
.text:00403E6C                 mov     edx, [esp+4Ch+arg_0]
.text:00403E70                 mov     esi, [esp+4Ch+var_34]
.text:00403E74                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00403E78
.text:00403E78 loc_403E78:                             ; CODE XREF: sub_4038C0+5AA↑j
.text:00403E78                 inc     [esp+4Ch+var_34]
.text:00403E7C                 mov     edi, [esp+4Ch+arg_4]
.text:00403E80                 cmp     [esp+4Ch+var_34], edi
.text:00403E84                 jnb     loc_403D73
.text:00403E8A                 mov     eax, [esp+4Ch+arg_0]
.text:00403E8E                 mov     ecx, [esp+4Ch+var_34]
.text:00403E92                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00403E96                 jmp     loc_403D73
.text:00403E96 ; ---------------------------------------------------------------------------
.text:00403E9B                 align 10h
.text:00403EA0
.text:00403EA0 def_4039C5:                             ; CODE XREF: sub_4038C0+FF↑j
.text:00403EA0                                         ; sub_4038C0+105↑j
.text:00403EA0                                         ; DATA XREF: ...
.text:00403EA0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004039C5 default case, cases 1-6,14-31,64
.text:00403EA5                 jz      loc_403FD0
.text:00403EAB                 mov     [esp+4Ch+var_28], 1
.text:00403EB3                 mov     esi, ds:__mb_cur_max
.text:00403EB9                 movzx   edx, bl
.text:00403EBC                 cmp     dword ptr [esi], 1
.text:00403EBF                 jz      loc_403FB4
.text:00403EC5                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403ECD                 mov     [esp+4Ch+C], edx ; C
.text:00403ED0                 call    _isctype
.text:00403ED5
.text:00403ED5 loc_403ED5:                             ; CODE XREF: sub_4038C0+705↓j
.text:00403ED5                 test    eax, eax
.text:00403ED7                 setnz   [esp+4Ch+var_29]
.text:00403EDC
.text:00403EDC loc_403EDC:                             ; CODE XREF: sub_4038C0+7A5↓j
.text:00403EDC                 cmp     [esp+4Ch+var_21], 0
.text:00403EE1                 lea     eax, [ebp+1]
.text:00403EE4                 jz      loc_403C80
.text:00403EEA                 cmp     [esp+4Ch+var_29], 0
.text:00403EEF                 jnz     def_403DC2      ; jumptable 004039C5 cases 37,43-58,65-90,93,95,97-122
.text:00403EEF                                         ; jumptable 00403DC2 default case, cases 34-38,42-44,46,48-59
.text:00403EF5
.text:00403EF5 loc_403EF5:                             ; CODE XREF: sub_4038C0+7AB↓j
.text:00403EF5                 mov     eax, [esp+4Ch+var_28]
.text:00403EF9                 lea     edx, [eax+ebp]
.text:00403EFC                 lea     esi, [esi+0]
.text:00403F00
.text:00403F00 loc_403F00:                             ; CODE XREF: sub_4038C0+6EF↓j
.text:00403F00                 cmp     [esp+4Ch+var_21], 0
.text:00403F05                 jz      short loc_403F80
.text:00403F07                 cmp     [esp+4Ch+var_29], 0
.text:00403F0C                 jnz     short loc_403F80
.text:00403F0E                 mov     edi, [esp+4Ch+arg_4]
.text:00403F12                 cmp     [esp+4Ch+var_34], edi
.text:00403F16                 jnb     short loc_403F24
.text:00403F18                 mov     esi, [esp+4Ch+arg_0]
.text:00403F1C                 mov     eax, [esp+4Ch+var_34]
.text:00403F20                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00403F24
.text:00403F24 loc_403F24:                             ; CODE XREF: sub_4038C0+656↑j
.text:00403F24                 inc     [esp+4Ch+var_34]
.text:00403F28                 mov     ecx, [esp+4Ch+arg_4]
.text:00403F2C                 cmp     [esp+4Ch+var_34], ecx
.text:00403F30                 jnb     short loc_403F45
.text:00403F32                 mov     cl, bl
.text:00403F34                 mov     esi, [esp+4Ch+arg_0]
.text:00403F38                 mov     edi, [esp+4Ch+var_34]
.text:00403F3C                 shr     cl, 6
.text:00403F3F                 add     cl, 30h ; '0'
.text:00403F42                 mov     [edi+esi], cl
.text:00403F45
.text:00403F45 loc_403F45:                             ; CODE XREF: sub_4038C0+670↑j
.text:00403F45                 inc     [esp+4Ch+var_34]
.text:00403F49                 mov     edi, [esp+4Ch+arg_4]
.text:00403F4D                 cmp     [esp+4Ch+var_34], edi
.text:00403F51                 jnb     short loc_403F69
.text:00403F53                 mov     cl, bl
.text:00403F55                 mov     esi, [esp+4Ch+arg_0]
.text:00403F59                 shr     cl, 3
.text:00403F5C                 mov     edi, [esp+4Ch+var_34]
.text:00403F60                 and     cl, 7
.text:00403F63                 add     cl, 30h ; '0'
.text:00403F66                 mov     [edi+esi], cl
.text:00403F69
.text:00403F69 loc_403F69:                             ; CODE XREF: sub_4038C0+691↑j
.text:00403F69                 inc     [esp+4Ch+var_34]
.text:00403F6D                 and     bl, 7
.text:00403F70                 add     bl, 30h ; '0'
.text:00403F73                 lea     esi, [esi+0]
.text:00403F79                 lea     edi, [edi+0]
.text:00403F80
.text:00403F80 loc_403F80:                             ; CODE XREF: sub_4038C0+645↑j
.text:00403F80                                         ; sub_4038C0+64C↑j
.text:00403F80                 lea     eax, [ebp+1]
.text:00403F83                 cmp     edx, eax
.text:00403F85                 jbe     loc_403C80
.text:00403F8B                 mov     ebp, [esp+4Ch+arg_4]
.text:00403F8F                 cmp     [esp+4Ch+var_34], ebp
.text:00403F93                 jnb     short loc_403FA0
.text:00403F95                 mov     ecx, [esp+4Ch+arg_0]
.text:00403F99                 mov     edi, [esp+4Ch+var_34]
.text:00403F9D                 mov     [edi+ecx], bl
.text:00403FA0
.text:00403FA0 loc_403FA0:                             ; CODE XREF: sub_4038C0+6D3↑j
.text:00403FA0                 inc     [esp+4Ch+var_34]
.text:00403FA4                 mov     ebp, eax
.text:00403FA6                 mov     eax, [esp+4Ch+Str]
.text:00403FAA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00403FAF                 jmp     loc_403F00
.text:00403FB4 ; ---------------------------------------------------------------------------
.text:00403FB4
.text:00403FB4 loc_403FB4:                             ; CODE XREF: sub_4038C0+5FF↑j
.text:00403FB4                 mov     ecx, ds:_pctype
.text:00403FBA                 mov     edi, [ecx]
.text:00403FBC                 movzx   eax, word ptr [edi+edx*2]
.text:00403FC0                 and     eax, 157h
.text:00403FC5                 jmp     loc_403ED5
.text:00403FC5 ; ---------------------------------------------------------------------------
.text:00403FCA                 align 10h
.text:00403FD0
.text:00403FD0 loc_403FD0:                             ; CODE XREF: sub_4038C0+5E5↑j
.text:00403FD0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403FD5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00403FDD                 mov     [esp+4Ch+var_28], 0
.text:00403FE5                 mov     [esp+4Ch+var_29], 1
.text:00403FEA                 jz      loc_40417C
.text:00403FF0
.text:00403FF0 loc_403FF0:                             ; CODE XREF: sub_4038C0+8CC↓j
.text:00403FF0                 mov     ecx, [esp+4Ch+arg_C]
.text:00403FF4                 lea     edx, [esp+4Ch+var_18]
.text:00403FF8                 mov     edi, [esp+4Ch+Str]
.text:00403FFC                 mov     [esp+4Ch+State], edx ; State
.text:00404000                 lea     esi, [esp+4Ch+var_18._State]
.text:00404004                 sub     ecx, ebp
.text:00404006                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040400A                 add     edi, ebp
.text:0040400C                 mov     [esp+4Ch+var_30], edi
.text:00404010                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00404014                 mov     [esp+4Ch+C], esi ; DstCh
.text:00404017                 call    mbrtowc
.text:0040401C                 test    eax, eax
.text:0040401E                 mov     edi, eax
.text:00404020                 jz      short loc_404060
.text:00404022                 cmp     eax, 0FFFFFFFFh
.text:00404025                 jz      loc_404172
.text:0040402B                 cmp     eax, 0FFFFFFFEh
.text:0040402E                 jz      loc_404132
.text:00404034                 cmp     [esp+4Ch+arg_10], 1
.text:00404039                 jz      short loc_404070
.text:0040403B
.text:0040403B loc_40403B:                             ; CODE XREF: sub_4038C0+7B9↓j
.text:0040403B                                         ; sub_4038C0+86D↓j
.text:0040403B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00404040                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404048                 mov     [esp+4Ch+C], ecx ; C
.text:0040404B                 call    iswctype
.text:00404050                 test    eax, eax
.text:00404052                 jnz     short loc_404059
.text:00404054                 mov     [esp+4Ch+var_29], 0
.text:00404059
.text:00404059 loc_404059:                             ; CODE XREF: sub_4038C0+792↑j
.text:00404059                 mov     [esp+4Ch+var_28], edi
.text:0040405D                 lea     esi, [esi+0]
.text:00404060
.text:00404060 loc_404060:                             ; CODE XREF: sub_4038C0+760↑j
.text:00404060                                         ; sub_4038C0+87B↓j ...
.text:00404060                 cmp     [esp+4Ch+var_28], 1
.text:00404065                 jbe     loc_403EDC
.text:0040406B                 jmp     loc_403EF5
.text:00404070 ; ---------------------------------------------------------------------------
.text:00404070
.text:00404070 loc_404070:                             ; CODE XREF: sub_4038C0+779↑j
.text:00404070                 cmp     [esp+4Ch+arg_10], eax
.text:00404074                 mov     edx, 1
.text:00404079                 jnb     short loc_40403B
.text:0040407B
.text:0040407B loc_40407B:                             ; CODE XREF: sub_4038C0+867↓j
.text:0040407B                 mov     ecx, [esp+4Ch+Str]
.text:0040407F                 lea     esi, [edx+ebp]
.text:00404082                 movsx   eax, byte ptr [esi+ecx]
.text:00404086                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00404089                 cmp     eax, 21h
.text:0040408C                 ja      def_404092      ; jumptable 00404092 default case, cases 93,95,97-123
.text:00404092                 jmp     ds:jpt_404092[eax*4] ; switch jump
.text:00404092 ; ---------------------------------------------------------------------------
.text:00404099                 align 4
.text:0040409C jpt_404092      dd offset loc_403CCB    ; DATA XREF: sub_4038C0+7D2↑r
.text:0040409C                 dd offset loc_403CCB    ; jump table for switch statement
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset loc_403CCB
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset loc_403CCB
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset def_404092
.text:0040409C                 dd offset loc_403CCB
.text:00404124 ; ---------------------------------------------------------------------------
.text:00404124
.text:00404124 def_404092:                             ; CODE XREF: sub_4038C0+7CC↑j
.text:00404124                                         ; sub_4038C0+7D2↑j
.text:00404124                                         ; DATA XREF: ...
.text:00404124                 inc     edx             ; jumptable 00404092 default case, cases 93,95,97-123
.text:00404125                 cmp     edx, edi
.text:00404127                 jb      loc_40407B
.text:0040412D                 jmp     loc_40403B
.text:00404132 ; ---------------------------------------------------------------------------
.text:00404132
.text:00404132 loc_404132:                             ; CODE XREF: sub_4038C0+76E↑j
.text:00404132                 cmp     ebp, [esp+4Ch+arg_C]
.text:00404136                 mov     [esp+4Ch+var_29], 0
.text:0040413B                 jnb     loc_404060
.text:00404141                 mov     eax, [esp+4Ch+var_30]
.text:00404145                 cmp     byte ptr [eax], 0
.text:00404148                 jz      loc_404060
.text:0040414E
.text:0040414E loc_40414E:                             ; CODE XREF: sub_4038C0+8AB↓j
.text:0040414E                 inc     [esp+4Ch+var_28]
.text:00404152                 mov     esi, [esp+4Ch+var_28]
.text:00404156                 lea     eax, [esi+ebp]
.text:00404159                 cmp     eax, [esp+4Ch+arg_C]
.text:0040415D                 jnb     loc_404060
.text:00404163                 mov     edi, [esp+4Ch+Str]
.text:00404167                 cmp     byte ptr [eax+edi], 0
.text:0040416B                 jnz     short loc_40414E
.text:0040416D                 jmp     loc_404060
.text:00404172 ; ---------------------------------------------------------------------------
.text:00404172
.text:00404172 loc_404172:                             ; CODE XREF: sub_4038C0+765↑j
.text:00404172                 mov     [esp+4Ch+var_29], 0
.text:00404177                 jmp     loc_404060
.text:0040417C ; ---------------------------------------------------------------------------
.text:0040417C
.text:0040417C loc_40417C:                             ; CODE XREF: sub_4038C0+72A↑j
.text:0040417C                 mov     edx, [esp+4Ch+Str]
.text:00404180                 mov     [esp+4Ch+C], edx ; Str
.text:00404183                 call    strlen
.text:00404188                 mov     [esp+4Ch+arg_C], eax
.text:0040418C                 jmp     loc_403FF0
.text:00404191 ; ---------------------------------------------------------------------------
.text:00404191
.text:00404191 loc_404191:                             ; CODE XREF: sub_4038C0+105↑j
.text:00404191                                         ; DATA XREF: sub_4038C0:jpt_4039C5↑o
.text:00404191                 mov     dl, bl          ; jumptable 004039C5 case 92
.text:00404193                 jmp     loc_403CC4
.text:00404198 ; ---------------------------------------------------------------------------
.text:00404198
.text:00404198 loc_404198:                             ; CODE XREF: sub_4038C0+105↑j
.text:00404198                                         ; sub_4038C0+902↓j
.text:00404198                                         ; DATA XREF: ...
.text:00404198                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004039C5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040419D                 jnz     def_403DC2      ; jumptable 004039C5 cases 37,43-58,65-90,93,95,97-122
.text:0040419D                                         ; jumptable 00403DC2 default case, cases 34-38,42-44,46,48-59
.text:004041A3                 jmp     loc_403CCB      ; jumptable 00404092 cases 91,92,94,96,124
.text:004041A8 ; ---------------------------------------------------------------------------
.text:004041A8
.text:004041A8 loc_4041A8:                             ; CODE XREF: sub_4038C0+105↑j
.text:004041A8                                         ; DATA XREF: sub_4038C0:jpt_4039C5↑o
.text:004041A8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004039C5 cases 123,125
.text:004041AD                 jz      short loc_4041C4
.text:004041AF                 cmp     [esp+4Ch+arg_C], 1
.text:004041B4
.text:004041B4 loc_4041B4:                             ; CODE XREF: sub_4038C0+90C↓j
.text:004041B4                 jnz     def_403DC2      ; jumptable 004039C5 cases 37,43-58,65-90,93,95,97-122
.text:004041B4                                         ; jumptable 00403DC2 default case, cases 34-38,42-44,46,48-59
.text:004041BA
.text:004041BA loc_4041BA:                             ; CODE XREF: sub_4038C0+105↑j
.text:004041BA                                         ; DATA XREF: sub_4038C0:jpt_4039C5↑o
.text:004041BA                 test    ebp, ebp        ; jumptable 004039C5 cases 35,126
.text:004041BC                 jnz     def_403DC2      ; jumptable 004039C5 cases 37,43-58,65-90,93,95,97-122
.text:004041BC                                         ; jumptable 00403DC2 default case, cases 34-38,42-44,46,48-59
.text:004041C2                 jmp     short loc_404198 ; jumptable 004039C5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004041C4 ; ---------------------------------------------------------------------------
.text:004041C4
.text:004041C4 loc_4041C4:                             ; CODE XREF: sub_4038C0+8ED↑j
.text:004041C4                 mov     esi, [esp+4Ch+Str]
.text:004041C8                 cmp     byte ptr [esi+1], 0
.text:004041CC                 jmp     short loc_4041B4
.text:004041CE ; ---------------------------------------------------------------------------
.text:004041CE
.text:004041CE loc_4041CE:                             ; CODE XREF: sub_4038C0:loc_40395F↑j
.text:004041CE                 test    ebp, ebp
.text:004041D0                 jnz     short loc_4041DD
.text:004041D2                 cmp     [esp+4Ch+arg_10], 1
.text:004041D7                 jz      loc_403CCB      ; jumptable 00404092 cases 91,92,94,96,124
.text:004041DD
.text:004041DD loc_4041DD:                             ; CODE XREF: sub_4038C0+910↑j
.text:004041DD                 mov     esi, [esp+4Ch+var_1C]
.text:004041E1                 test    esi, esi
.text:004041E3                 jz      short loc_404218
.text:004041E5                 mov     edi, [esp+4Ch+var_1C]
.text:004041E9                 movzx   eax, byte ptr [edi]
.text:004041EC                 test    al, al
.text:004041EE                 jz      short loc_404218
.text:004041F0
.text:004041F0 loc_4041F0:                             ; CODE XREF: sub_4038C0+956↓j
.text:004041F0                 mov     ebp, [esp+4Ch+arg_4]
.text:004041F4                 cmp     [esp+4Ch+var_34], ebp
.text:004041F8                 jnb     short loc_404205
.text:004041FA                 mov     ecx, [esp+4Ch+arg_0]
.text:004041FE                 mov     ebx, [esp+4Ch+var_34]
.text:00404202                 mov     [ebx+ecx], al
.text:00404205
.text:00404205 loc_404205:                             ; CODE XREF: sub_4038C0+938↑j
.text:00404205                 inc     [esp+4Ch+var_1C]
.text:00404209                 inc     [esp+4Ch+var_34]
.text:0040420D                 mov     edx, [esp+4Ch+var_1C]
.text:00404211                 movzx   eax, byte ptr [edx]
.text:00404214                 test    al, al
.text:00404216                 jnz     short loc_4041F0
.text:00404218
.text:00404218 loc_404218:                             ; CODE XREF: sub_4038C0+923↑j
.text:00404218                                         ; sub_4038C0+92E↑j
.text:00404218                 mov     eax, [esp+4Ch+arg_4]
.text:0040421C                 cmp     [esp+4Ch+var_34], eax
.text:00404220                 jnb     short loc_40422E
.text:00404222                 mov     edi, [esp+4Ch+arg_0]
.text:00404226                 mov     esi, [esp+4Ch+var_34]
.text:0040422A                 mov     byte ptr [esi+edi], 0
.text:0040422E
.text:0040422E loc_40422E:                             ; CODE XREF: sub_4038C0+960↑j
.text:0040422E                 mov     eax, [esp+4Ch+var_34]
.text:00404232                 jmp     loc_403CFF
.text:00404237 ; ---------------------------------------------------------------------------
.text:00404237
.text:00404237 loc_404237:                             ; CODE XREF: sub_4038C0+95↑j
.text:00404237                 mov     ebx, [esp+4Ch+Str]
.text:0040423B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00404240                 jmp     loc_40395F
.text:00404245 ; ---------------------------------------------------------------------------
.text:00404245
.text:00404245 loc_404245:                             ; CODE XREF: sub_4038C0+3D↑j
.text:00404245                                         ; DATA XREF: sub_4038C0:jpt_4038FD↑o
.text:00404245                 mov     edx, [esp+4Ch+arg_4] ; jumptable 004038FD case 2
.text:00404249                 cmp     [esp+4Ch+var_34], edx
.text:0040424D                 jnb     short loc_404256
.text:0040424F                 mov     ecx, [esp+4Ch+arg_0]
.text:00404253                 mov     byte ptr [ecx], 27h ; '''
.text:00404256
.text:00404256 loc_404256:                             ; CODE XREF: sub_4038C0+98D↑j
.text:00404256                 mov     [esp+4Ch+var_34], 1
.text:0040425E                 mov     [esp+4Ch+var_1C], 4038AEh
.text:00404266                 jmp     loc_403946
.text:0040426B ; ---------------------------------------------------------------------------
.text:0040426B
.text:0040426B loc_40426B:                             ; CODE XREF: sub_4038C0+3D↑j
.text:0040426B                                         ; DATA XREF: sub_4038C0:jpt_4038FD↑o
.text:0040426B                 mov     [esp+4Ch+var_21], 1 ; jumptable 004038FD case 4
.text:00404270                 jmp     def_4038FD      ; jumptable 004038FD default case, cases 0,1
.text:00404275 ; ---------------------------------------------------------------------------
.text:00404275
.text:00404275 loc_404275:                             ; CODE XREF: sub_4038C0+3D↑j
.text:00404275                                         ; DATA XREF: sub_4038C0:jpt_4038FD↑o
.text:00404275                 mov     [esp+4Ch+C], 4038B0h ; jumptable 004038FD cases 5,6
.text:0040427C                 call    ds:libintl_gettext
.text:00404282                 cmp     eax, 4038B0h
.text:00404287                 mov     edi, eax
.text:00404289                 jz      short loc_404300
.text:0040428B
.text:0040428B loc_40428B:                             ; CODE XREF: sub_4038C0+A45↓j
.text:0040428B                                         ; sub_4038C0+A4C↓j
.text:0040428B                 mov     [esp+4Ch+C], 4038AEh
.text:00404292                 call    ds:libintl_gettext
.text:00404298                 cmp     eax, 4038AEh
.text:0040429D                 mov     edx, eax
.text:0040429F                 jz      short loc_4042F2
.text:004042A1
.text:004042A1 loc_4042A1:                             ; CODE XREF: sub_4038C0+A37↓j
.text:004042A1                                         ; sub_4038C0+A3E↓j
.text:004042A1                 mov     [esp+4Ch+var_1C], edi
.text:004042A5                 cmp     byte ptr [edi], 0
.text:004042A8                 jz      short loc_4042D8
.text:004042AA
.text:004042AA loc_4042AA:                             ; CODE XREF: sub_4038C0+A16↓j
.text:004042AA                 mov     ecx, [esp+4Ch+arg_4]
.text:004042AE                 cmp     [esp+4Ch+var_34], ecx
.text:004042B2                 jnb     short loc_4042C7
.text:004042B4                 mov     ebp, [esp+4Ch+var_1C]
.text:004042B8                 mov     edi, [esp+4Ch+arg_0]
.text:004042BC                 mov     esi, [esp+4Ch+var_34]
.text:004042C0                 movzx   ebx, byte ptr [ebp+0]
.text:004042C4                 mov     [esi+edi], bl
.text:004042C7
.text:004042C7 loc_4042C7:                             ; CODE XREF: sub_4038C0+9F2↑j
.text:004042C7                 inc     [esp+4Ch+var_1C]
.text:004042CB                 inc     [esp+4Ch+var_34]
.text:004042CF                 mov     eax, [esp+4Ch+var_1C]
.text:004042D3                 cmp     byte ptr [eax], 0
.text:004042D6                 jnz     short loc_4042AA
.text:004042D8
.text:004042D8 loc_4042D8:                             ; CODE XREF: sub_4038C0+9E8↑j
.text:004042D8                 mov     [esp+4Ch+var_21], 1
.text:004042DD                 mov     [esp+4Ch+var_1C], edx
.text:004042E1                 mov     [esp+4Ch+C], edx ; Str
.text:004042E4                 call    strlen
.text:004042E9                 mov     [esp+4Ch+var_20], eax
.text:004042ED                 jmp     def_4038FD      ; jumptable 004038FD default case, cases 0,1
.text:004042F2 ; ---------------------------------------------------------------------------
.text:004042F2
.text:004042F2 loc_4042F2:                             ; CODE XREF: sub_4038C0+9DF↑j
.text:004042F2                 cmp     [esp+4Ch+arg_10], 6
.text:004042F7                 jnz     short loc_4042A1
.text:004042F9                 mov     edx, offset asc_4038AC ; "\"'`"
.text:004042FE                 jmp     short loc_4042A1
.text:00404300 ; ---------------------------------------------------------------------------
.text:00404300
.text:00404300 loc_404300:                             ; CODE XREF: sub_4038C0+9C9↑j
.text:00404300                 cmp     [esp+4Ch+arg_10], 6
.text:00404305                 jnz     short loc_40428B
.text:00404307                 mov     edi, offset asc_4038AC ; "\"'`"
.text:0040430C                 jmp     loc_40428B
.text:0040430C sub_4038C0      endp
.text:0040430C
.text:00404311 ; ---------------------------------------------------------------------------
.text:00404311                 jmp     short loc_404320
.text:00404311 ; ---------------------------------------------------------------------------
.text:00404313                 align 10h
.text:00404320
.text:00404320 loc_404320:                             ; CODE XREF: .text:00404311↑j
.text:00404320                 sub     esp, 0Ch
.text:00404323                 mov     [esp+4], ebx
.text:00404327                 mov     [esp+8], esi
.text:0040432B                 call    _errno
.text:00404330                 mov     esi, [eax]
.text:00404332                 mov     dword ptr [esp], 24h ; '$'
.text:00404339                 call    sub_404C10
.text:0040433E                 mov     edx, [esp+10h]
.text:00404342                 mov     ebx, eax
.text:00404344                 test    edx, edx
.text:00404346                 jz      short loc_404391
.text:00404348
.text:00404348 loc_404348:                             ; CODE XREF: .text:00404396↓j
.text:00404348                 mov     ecx, [edx]
.text:0040434A                 mov     [ebx], ecx
.text:0040434C                 mov     ecx, [edx+4]
.text:0040434F                 mov     [ebx+4], ecx
.text:00404352                 mov     ecx, [edx+8]
.text:00404355                 mov     [ebx+8], ecx
.text:00404358                 mov     ecx, [edx+0Ch]
.text:0040435B                 mov     [ebx+0Ch], ecx
.text:0040435E                 mov     ecx, [edx+10h]
.text:00404361                 mov     [ebx+10h], ecx
.text:00404364                 mov     ecx, [edx+14h]
.text:00404367                 mov     [ebx+14h], ecx
.text:0040436A                 mov     ecx, [edx+18h]
.text:0040436D                 mov     [ebx+18h], ecx
.text:00404370                 mov     ecx, [edx+1Ch]
.text:00404373                 mov     [ebx+1Ch], ecx
.text:00404376                 mov     ecx, [edx+20h]
.text:00404379                 mov     [ebx+20h], ecx
.text:0040437C                 call    _errno
.text:00404381                 mov     [eax], esi
.text:00404383                 mov     esi, [esp+8]
.text:00404387                 mov     eax, ebx
.text:00404389                 mov     ebx, [esp+4]
.text:0040438D                 add     esp, 0Ch
.text:00404390                 retn
.text:00404391 ; ---------------------------------------------------------------------------
.text:00404391
.text:00404391 loc_404391:                             ; CODE XREF: .text:00404346↑j
.text:00404391                 mov     edx, offset dword_409260
.text:00404396                 jmp     short loc_404348
.text:00404396 ; ---------------------------------------------------------------------------
.text:00404398                 align 10h
.text:004043A0                 mov     eax, [esp+4]
.text:004043A4                 test    eax, eax
.text:004043A6                 jz      short loc_4043B0
.text:004043A8
.text:004043A8 loc_4043A8:                             ; CODE XREF: .text:004043B5↓j
.text:004043A8                 mov     eax, [eax]
.text:004043AA                 retn
.text:004043AA ; ---------------------------------------------------------------------------
.text:004043AB                 align 10h
.text:004043B0
.text:004043B0 loc_4043B0:                             ; CODE XREF: .text:004043A6↑j
.text:004043B0                 mov     eax, offset dword_409260
.text:004043B5                 jmp     short loc_4043A8
.text:004043B5 ; ---------------------------------------------------------------------------
.text:004043B7                 align 10h
.text:004043C0                 mov     edx, [esp+4]
.text:004043C4                 test    edx, edx
.text:004043C6                 jz      short loc_4043D0
.text:004043C8
.text:004043C8 loc_4043C8:                             ; CODE XREF: .text:004043D5↓j
.text:004043C8                 mov     ecx, [esp+8]
.text:004043CC                 mov     [edx], ecx
.text:004043CE                 retn
.text:004043CE ; ---------------------------------------------------------------------------
.text:004043CF                 align 10h
.text:004043D0
.text:004043D0 loc_4043D0:                             ; CODE XREF: .text:004043C6↑j
.text:004043D0                 mov     edx, offset dword_409260
.text:004043D5                 jmp     short loc_4043C8
.text:004043D5 ; ---------------------------------------------------------------------------
.text:004043D7                 align 10h
.text:004043E0                 sub     esp, 8
.text:004043E3                 mov     eax, [esp+0Ch]
.text:004043E7                 movzx   ecx, byte ptr [esp+10h]
.text:004043EC                 mov     [esp], ebx
.text:004043EF                 mov     ebx, [esp+14h]
.text:004043F3                 mov     [esp+4], esi
.text:004043F7                 mov     dl, cl
.text:004043F9                 shr     dl, 5
.text:004043FC                 movzx   edx, dl
.text:004043FF                 shl     edx, 2
.text:00404402                 test    eax, eax
.text:00404404                 lea     esi, [edx+eax+4]
.text:00404408                 jz      short loc_404430
.text:0040440A
.text:0040440A loc_40440A:                             ; CODE XREF: .text:00404436↓j
.text:0040440A                 mov     edx, [esi]
.text:0040440C                 and     ecx, 1Fh
.text:0040440F                 and     ebx, 1
.text:00404412                 mov     eax, edx
.text:00404414                 shr     eax, cl
.text:00404416                 and     eax, 1
.text:00404419                 xor     ebx, eax
.text:0040441B                 shl     ebx, cl
.text:0040441D                 xor     edx, ebx
.text:0040441F                 mov     [esi], edx
.text:00404421                 mov     ebx, [esp]
.text:00404424                 mov     esi, [esp+4]
.text:00404428                 add     esp, 8
.text:0040442B                 retn
.text:0040442B ; ---------------------------------------------------------------------------
.text:0040442C                 align 10h
.text:00404430
.text:00404430 loc_404430:                             ; CODE XREF: .text:00404408↑j
.text:00404430                 lea     esi, dword_409264[edx]
.text:00404436                 jmp     short loc_40440A
.text:00404436 ; ---------------------------------------------------------------------------
.text:00404438                 align 10h
.text:00404440                 sub     esp, 2Ch
.text:00404443                 mov     [esp+24h], ebx
.text:00404447                 mov     ebx, [esp+40h]
.text:0040444B                 mov     [esp+28h], esi
.text:0040444F                 test    ebx, ebx
.text:00404451                 jz      short loc_4044A0
.text:00404453
.text:00404453 loc_404453:                             ; CODE XREF: .text:004044A5↓j
.text:00404453                 call    _errno
.text:00404458                 mov     esi, [eax]
.text:0040445A                 mov     [esp+14h], ebx
.text:0040445E                 mov     edx, [ebx]
.text:00404460                 mov     ecx, [esp+38h]
.text:00404464                 mov     ebx, [esp+3Ch]
.text:00404468                 mov     [esp+10h], edx
.text:0040446C                 mov     edx, [esp+34h]
.text:00404470                 mov     [esp+0Ch], ebx
.text:00404474                 mov     [esp+8], ecx
.text:00404478                 mov     [esp+4], edx
.text:0040447C                 mov     edx, [esp+30h]
.text:00404480                 mov     [esp], edx
.text:00404483                 call    sub_4038C0
.text:00404488                 mov     ebx, eax
.text:0040448A                 call    _errno
.text:0040448F                 mov     [eax], esi
.text:00404491                 mov     esi, [esp+28h]
.text:00404495                 mov     eax, ebx
.text:00404497                 mov     ebx, [esp+24h]
.text:0040449B                 add     esp, 2Ch
.text:0040449E                 retn
.text:0040449E ; ---------------------------------------------------------------------------
.text:0040449F                 align 10h
.text:004044A0
.text:004044A0 loc_4044A0:                             ; CODE XREF: .text:00404451↑j
.text:004044A0                 mov     ebx, offset dword_409260
.text:004044A5                 jmp     short loc_404453
.text:004044A5 ; ---------------------------------------------------------------------------
.text:004044A7                 align 10h
.text:004044B0                 push    ebp
.text:004044B1                 push    edi
.text:004044B2                 push    esi
.text:004044B3                 push    ebx
.text:004044B4                 sub     esp, 2Ch
.text:004044B7                 mov     ebp, [esp+48h]
.text:004044BB                 call    _errno
.text:004044C0                 mov     edx, [eax]
.text:004044C2                 test    ebp, ebp
.text:004044C4                 mov     ebx, ebp
.text:004044C6                 mov     [esp+28h], edx
.text:004044CA                 jz      loc_404580
.text:004044D0
.text:004044D0 loc_4044D0:                             ; CODE XREF: .text:00404585↓j
.text:004044D0                 call    _errno
.text:004044D5                 mov     edi, [eax]
.text:004044D7                 mov     esi, ebp
.text:004044D9                 mov     [esp+14h], ebx
.text:004044DD                 mov     ecx, [ebx]
.text:004044DF                 mov     dword ptr [esp], 0
.text:004044E6                 mov     edx, [esp+44h]
.text:004044EA                 mov     dword ptr [esp+4], 0
.text:004044F2                 mov     eax, [esp+40h]
.text:004044F6                 mov     [esp+10h], ecx
.text:004044FA                 mov     [esp+0Ch], edx
.text:004044FE                 mov     [esp+8], eax
.text:00404502                 call    sub_4038C0
.text:00404507                 mov     ebx, eax
.text:00404509                 call    _errno
.text:0040450E                 mov     [eax], edi
.text:00404510                 lea     edi, [ebx+1]
.text:00404513                 mov     [esp], edi
.text:00404516                 call    sub_404C10
.text:0040451B                 mov     [esp+24h], eax
.text:0040451F                 test    ebp, ebp
.text:00404521                 jz      short loc_404572
.text:00404523
.text:00404523 loc_404523:                             ; CODE XREF: .text:00404577↓j
.text:00404523                 call    _errno
.text:00404528                 mov     ebp, [eax]
.text:0040452A                 mov     [esp+14h], esi
.text:0040452E                 mov     ecx, [esi]
.text:00404530                 mov     [esp+4], edi
.text:00404534                 mov     edx, [esp+44h]
.text:00404538                 mov     esi, [esp+24h]
.text:0040453C                 mov     [esp+10h], ecx
.text:00404540                 mov     eax, [esp+40h]
.text:00404544                 mov     [esp+0Ch], edx
.text:00404548                 mov     [esp], esi
.text:0040454B                 mov     [esp+8], eax
.text:0040454F                 call    sub_4038C0
.text:00404554                 call    _errno
.text:00404559                 mov     [eax], ebp
.text:0040455B                 call    _errno
.text:00404560                 mov     ebx, [esp+28h]
.text:00404564                 mov     [eax], ebx
.text:00404566                 mov     eax, [esp+24h]
.text:0040456A                 add     esp, 2Ch
.text:0040456D                 pop     ebx
.text:0040456E                 pop     esi
.text:0040456F                 pop     edi
.text:00404570                 pop     ebp
.text:00404571                 retn
.text:00404572 ; ---------------------------------------------------------------------------
.text:00404572
.text:00404572 loc_404572:                             ; CODE XREF: .text:00404521↑j
.text:00404572                 mov     esi, offset dword_409260
.text:00404577                 jmp     short loc_404523
.text:00404577 ; ---------------------------------------------------------------------------
.text:00404579                 align 10h
.text:00404580
.text:00404580 loc_404580:                             ; CODE XREF: .text:004044CA↑j
.text:00404580                 mov     ebx, offset dword_409260
.text:00404585                 jmp     loc_4044D0
.text:00404585 ; ---------------------------------------------------------------------------
.text:0040458A                 align 10h
.text:00404590                 sub     esp, 1Ch
.text:00404593                 mov     edx, [esp+24h]
.text:00404597                 mov     dword ptr [esp+0Ch], offset dword_409260
.text:0040459F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004045A7                 mov     [esp+4], edx
.text:004045AB                 mov     edx, [esp+20h]
.text:004045AF                 mov     [esp], edx
.text:004045B2                 call    sub_404A00
.text:004045B7                 add     esp, 1Ch
.text:004045BA                 retn
.text:004045BA ; ---------------------------------------------------------------------------
.text:004045BB                 align 10h
.text:004045C0                 sub     esp, 1Ch
.text:004045C3                 mov     edx, [esp+20h]
.text:004045C7                 mov     dword ptr [esp+0Ch], offset dword_409260
.text:004045CF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004045D7                 mov     [esp+4], edx
.text:004045DB                 mov     dword ptr [esp], 0
.text:004045E2                 call    sub_404A00
.text:004045E7                 add     esp, 1Ch
.text:004045EA                 retn
.text:004045EA ; ---------------------------------------------------------------------------
.text:004045EB                 align 10h
.text:004045F0
.text:004045F0 ; =============== S U B R O U T I N E =======================================
.text:004045F0
.text:004045F0
.text:004045F0 ; int __cdecl sub_4045F0(int, int, char *)
.text:004045F0 sub_4045F0      proc near               ; CODE XREF: .text:0040309A↑p
.text:004045F0                                         ; sub_4030B0+1A↑p
.text:004045F0
.text:004045F0 var_BC          = dword ptr -0BCh
.text:004045F0 var_B8          = dword ptr -0B8h
.text:004045F0 var_B4          = dword ptr -0B4h
.text:004045F0 var_B0          = dword ptr -0B0h
.text:004045F0 var_AC          = dword ptr -0ACh
.text:004045F0 var_A8          = dword ptr -0A8h
.text:004045F0 var_A4          = dword ptr -0A4h
.text:004045F0 var_A0          = dword ptr -0A0h
.text:004045F0 var_9C          = dword ptr -9Ch
.text:004045F0 var_98          = dword ptr -98h
.text:004045F0 var_94          = dword ptr -94h
.text:004045F0 var_90          = dword ptr -90h
.text:004045F0 var_8C          = dword ptr -8Ch
.text:004045F0 var_7C          = dword ptr -7Ch
.text:004045F0 var_78          = dword ptr -78h
.text:004045F0 var_74          = dword ptr -74h
.text:004045F0 var_70          = dword ptr -70h
.text:004045F0 var_6C          = dword ptr -6Ch
.text:004045F0 var_68          = dword ptr -68h
.text:004045F0 var_64          = dword ptr -64h
.text:004045F0 var_60          = dword ptr -60h
.text:004045F0 var_5C          = dword ptr -5Ch
.text:004045F0 var_4C          = dword ptr -4Ch
.text:004045F0 var_48          = dword ptr -48h
.text:004045F0 var_44          = dword ptr -44h
.text:004045F0 var_40          = dword ptr -40h
.text:004045F0 var_3C          = dword ptr -3Ch
.text:004045F0 var_38          = dword ptr -38h
.text:004045F0 var_34          = dword ptr -34h
.text:004045F0 var_30          = dword ptr -30h
.text:004045F0 var_2C          = dword ptr -2Ch
.text:004045F0 arg_0           = dword ptr  4
.text:004045F0 arg_4           = dword ptr  8
.text:004045F0 arg_8           = dword ptr  0Ch
.text:004045F0
.text:004045F0                 push    ebp
.text:004045F1                 xor     eax, eax
.text:004045F3                 mov     ecx, 8
.text:004045F8                 push    edi
.text:004045F9                 push    esi
.text:004045FA                 push    ebx
.text:004045FB                 sub     esp, 0ACh
.text:00404601                 mov     ebp, [esp+0BCh+arg_4]
.text:00404608                 cld
.text:00404609                 lea     edi, [esp+0BCh+var_A8]
.text:0040460D                 mov     [esp+0BCh+var_AC], ebp
.text:00404611                 rep stosd
.text:00404613                 mov     eax, [esp+0BCh+var_8C]
.text:00404617                 mov     edi, [esp+0BCh+var_AC]
.text:0040461B                 mov     esi, [esp+0BCh+var_A8]
.text:0040461F                 mov     [esp+0BCh+var_5C], eax
.text:00404623                 mov     ebp, [esp+0BCh+var_A4]
.text:00404627                 mov     eax, [esp+0BCh+var_AC]
.text:0040462B                 mov     [esp+0BCh+var_7C], edi
.text:0040462F                 mov     ecx, [esp+0BCh+var_94]
.text:00404633                 mov     edi, [esp+0BCh+var_A0]
.text:00404637                 mov     [esp+0BCh+var_78], esi
.text:0040463B                 mov     edx, [esp+0BCh+var_90]
.text:0040463F                 mov     esi, [esp+0BCh+var_9C]
.text:00404643                 mov     [esp+0BCh+var_4C], eax
.text:00404647                 mov     ebx, [esp+0BCh+var_98]
.text:0040464B                 mov     eax, [esp+0BCh+var_A8]
.text:0040464F                 mov     [esp+0BCh+var_74], ebp
.text:00404653                 mov     [esp+0BCh+var_70], edi
.text:00404657                 mov     [esp+0BCh+var_6C], esi
.text:0040465B                 mov     [esp+0BCh+var_68], ebx
.text:0040465F                 mov     [esp+0BCh+var_64], ecx
.text:00404663                 mov     [esp+0BCh+var_60], edx
.text:00404667                 mov     [esp+0BCh+var_48], eax
.text:0040466B                 mov     [esp+0BCh+var_44], ebp
.text:0040466F                 mov     [esp+0BCh+var_40], edi
.text:00404673                 mov     [esp+0BCh+var_3C], esi
.text:0040467A                 mov     [esp+0BCh+var_38], ebx
.text:00404681                 mov     ebx, [esp+0BCh+var_8C]
.text:00404685                 mov     [esp+0BCh+var_30], edx
.text:0040468C                 mov     edx, [esp+0BCh+arg_8]
.text:00404693                 mov     [esp+0BCh+var_34], ecx
.text:0040469A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040469E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:004046A2                 mov     edx, [esp+0BCh+arg_0]
.text:004046A9                 mov     [esp+0BCh+var_2C], ebx
.text:004046B0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:004046B4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:004046BC                 mov     [esp+0BCh+var_BC], edx ; int
.text:004046BF                 call    sub_404A00
.text:004046C4                 add     esp, 0ACh
.text:004046CA                 pop     ebx
.text:004046CB                 pop     esi
.text:004046CC                 pop     edi
.text:004046CD                 pop     ebp
.text:004046CE                 retn
.text:004046CE sub_4045F0      endp
.text:004046CE
.text:004046CE ; ---------------------------------------------------------------------------
.text:004046CF                 align 10h
.text:004046D0                 push    ebp
.text:004046D1                 xor     eax, eax
.text:004046D3                 mov     ecx, 8
.text:004046D8                 push    edi
.text:004046D9                 push    esi
.text:004046DA                 push    ebx
.text:004046DB                 sub     esp, 0ACh
.text:004046E1                 mov     edx, [esp+0C4h]
.text:004046E8                 cld
.text:004046E9                 lea     edi, [esp+14h]
.text:004046ED                 mov     [esp+10h], edx
.text:004046F1                 rep stosd
.text:004046F3                 mov     eax, [esp+30h]
.text:004046F7                 mov     ebp, [esp+10h]
.text:004046FB                 mov     edi, [esp+14h]
.text:004046FF                 mov     [esp+60h], eax
.text:00404703                 mov     esi, [esp+20h]
.text:00404707                 mov     eax, [esp+10h]
.text:0040470B                 mov     [esp+40h], ebp
.text:0040470F                 mov     ecx, [esp+28h]
.text:00404713                 mov     ebp, [esp+18h]
.text:00404717                 mov     [esp+44h], edi
.text:0040471B                 mov     edx, [esp+2Ch]
.text:0040471F                 mov     edi, [esp+1Ch]
.text:00404723                 mov     [esp+70h], eax
.text:00404727                 mov     ebx, [esp+24h]
.text:0040472B                 mov     eax, [esp+14h]
.text:0040472F                 mov     [esp+48h], ebp
.text:00404733                 mov     [esp+4Ch], edi
.text:00404737                 mov     [esp+50h], esi
.text:0040473B                 mov     [esp+54h], ebx
.text:0040473F                 mov     [esp+58h], ecx
.text:00404743                 mov     [esp+5Ch], edx
.text:00404747                 mov     [esp+74h], eax
.text:0040474B                 mov     [esp+78h], ebp
.text:0040474F                 mov     [esp+7Ch], edi
.text:00404753                 mov     [esp+80h], esi
.text:0040475A                 mov     [esp+84h], ebx
.text:00404761                 mov     esi, [esp+30h]
.text:00404765                 lea     ebx, [esp+70h]
.text:00404769                 mov     [esp+8Ch], edx
.text:00404770                 mov     edx, [esp+0C8h]
.text:00404777                 mov     [esp+88h], ecx
.text:0040477E                 mov     ecx, [esp+0CCh]
.text:00404785                 mov     [esp+4], edx
.text:00404789                 mov     edx, [esp+0C0h]
.text:00404790                 mov     [esp+90h], esi
.text:00404797                 mov     [esp+0Ch], ebx
.text:0040479B                 mov     [esp+8], ecx
.text:0040479F                 mov     [esp], edx
.text:004047A2                 call    sub_404A00
.text:004047A7                 add     esp, 0ACh
.text:004047AD                 pop     ebx
.text:004047AE                 pop     esi
.text:004047AF                 pop     edi
.text:004047B0                 pop     ebp
.text:004047B1                 retn
.text:004047B1 ; ---------------------------------------------------------------------------
.text:004047B2                 align 10h
.text:004047C0                 push    ebp
.text:004047C1                 xor     eax, eax
.text:004047C3                 mov     ecx, 8
.text:004047C8                 push    edi
.text:004047C9                 push    esi
.text:004047CA                 push    ebx
.text:004047CB                 sub     esp, 0ACh
.text:004047D1                 mov     edi, [esp+0C0h]
.text:004047D8                 cld
.text:004047D9                 mov     [esp+10h], edi
.text:004047DD                 lea     edi, [esp+14h]
.text:004047E1                 rep stosd
.text:004047E3                 mov     eax, [esp+30h]
.text:004047E7                 mov     esi, [esp+10h]
.text:004047EB                 mov     ebx, [esp+14h]
.text:004047EF                 mov     [esp+60h], eax
.text:004047F3                 mov     ebp, [esp+18h]
.text:004047F7                 mov     eax, [esp+10h]
.text:004047FB                 mov     [esp+40h], esi
.text:004047FF                 mov     edi, [esp+1Ch]
.text:00404803                 mov     esi, [esp+20h]
.text:00404807                 mov     [esp+44h], ebx
.text:0040480B                 mov     ecx, [esp+28h]
.text:0040480F                 mov     edx, [esp+2Ch]
.text:00404813                 mov     [esp+70h], eax
.text:00404817                 mov     ebx, [esp+24h]
.text:0040481B                 mov     eax, [esp+14h]
.text:0040481F                 mov     [esp+48h], ebp
.text:00404823                 mov     [esp+4Ch], edi
.text:00404827                 mov     [esp+50h], esi
.text:0040482B                 mov     [esp+54h], ebx
.text:0040482F                 mov     [esp+58h], ecx
.text:00404833                 mov     [esp+5Ch], edx
.text:00404837                 mov     [esp+74h], eax
.text:0040483B                 mov     [esp+78h], ebp
.text:0040483F                 mov     [esp+7Ch], edi
.text:00404843                 mov     [esp+80h], esi
.text:0040484A                 mov     [esp+84h], ebx
.text:00404851                 mov     [esp+8Ch], edx
.text:00404858                 lea     edx, [esp+70h]
.text:0040485C                 mov     [esp+88h], ecx
.text:00404863                 mov     ecx, [esp+30h]
.text:00404867                 mov     [esp+0Ch], edx
.text:0040486B                 mov     edx, [esp+0C4h]
.text:00404872                 mov     [esp+90h], ecx
.text:00404879                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404881                 mov     [esp+4], edx
.text:00404885                 mov     dword ptr [esp], 0
.text:0040488C                 call    sub_404A00
.text:00404891                 add     esp, 0ACh
.text:00404897                 pop     ebx
.text:00404898                 pop     esi
.text:00404899                 pop     edi
.text:0040489A                 pop     ebp
.text:0040489B                 retn
.text:0040489B ; ---------------------------------------------------------------------------
.text:0040489C                 align 10h
.text:004048A0                 push    edi
.text:004048A1                 push    esi
.text:004048A2                 push    ebx
.text:004048A3                 sub     esp, 40h
.text:004048A6                 mov     edx, ds:dword_40926C
.text:004048AC                 mov     ebx, ds:dword_409260
.text:004048B2                 mov     esi, ds:dword_409268
.text:004048B8                 mov     edi, ds:dword_409264
.text:004048BE                 mov     [esp+1Ch], edx
.text:004048C2                 mov     ecx, ds:dword_409270
.text:004048C8                 mov     edx, ds:dword_409280
.text:004048CE                 mov     [esp+10h], ebx
.text:004048D2                 mov     ebx, ds:dword_409274
.text:004048D8                 mov     [esp+30h], edx
.text:004048DC                 movzx   edx, byte ptr [esp+54h]
.text:004048E1                 mov     [esp+18h], esi
.text:004048E5                 mov     esi, ds:dword_40927C
.text:004048EB                 mov     [esp+14h], edi
.text:004048EF                 mov     edi, ds:dword_409278
.text:004048F5                 mov     [esp+20h], ecx
.text:004048F9                 mov     cl, dl
.text:004048FB                 shr     cl, 5
.text:004048FE                 mov     [esp+24h], ebx
.text:00404902                 movzx   ebx, cl
.text:00404905                 mov     [esp+2Ch], esi
.text:00404909                 lea     esi, [esp+10h]
.text:0040490D                 mov     [esp+28h], edi
.text:00404911                 lea     edi, [esi+ebx*4]
.text:00404914                 mov     ebx, edx
.text:00404916                 mov     edx, [edi+4]
.text:00404919                 and     ebx, 1Fh
.text:0040491C                 mov     cl, bl
.text:0040491E                 mov     eax, edx
.text:00404920                 shr     eax, cl
.text:00404922                 and     eax, 1
.text:00404925                 xor     eax, 1
.text:00404928                 shl     eax, cl
.text:0040492A                 xor     edx, eax
.text:0040492C                 mov     [edi+4], edx
.text:0040492F                 mov     edx, [esp+50h]
.text:00404933                 mov     [esp+0Ch], esi
.text:00404937                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040493F                 mov     [esp+4], edx
.text:00404943                 mov     dword ptr [esp], 0
.text:0040494A                 call    sub_404A00
.text:0040494F                 add     esp, 40h
.text:00404952                 pop     ebx
.text:00404953                 pop     esi
.text:00404954                 pop     edi
.text:00404955                 retn
.text:00404955 ; ---------------------------------------------------------------------------
.text:00404956                 align 10h
.text:00404960
.text:00404960 ; =============== S U B R O U T I N E =======================================
.text:00404960
.text:00404960
.text:00404960 ; int __cdecl sub_404960(char *)
.text:00404960 sub_404960      proc near               ; CODE XREF: sub_403750+64↑p
.text:00404960
.text:00404960 var_4C          = dword ptr -4Ch
.text:00404960 var_48          = dword ptr -48h
.text:00404960 var_44          = dword ptr -44h
.text:00404960 var_40          = dword ptr -40h
.text:00404960 var_3C          = dword ptr -3Ch
.text:00404960 var_38          = dword ptr -38h
.text:00404960 var_34          = dword ptr -34h
.text:00404960 var_30          = dword ptr -30h
.text:00404960 var_2C          = dword ptr -2Ch
.text:00404960 var_28          = dword ptr -28h
.text:00404960 var_24          = dword ptr -24h
.text:00404960 var_20          = dword ptr -20h
.text:00404960 var_1C          = dword ptr -1Ch
.text:00404960 arg_0           = dword ptr  4
.text:00404960
.text:00404960                 sub     esp, 4Ch
.text:00404963                 mov     ecx, ds:dword_409260
.text:00404969                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00404971                 mov     edx, ds:dword_409264
.text:00404977                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040497E                 mov     [esp+4Ch+var_3C], ecx
.text:00404982                 mov     ecx, ds:dword_40926C
.text:00404988                 mov     [esp+4Ch+var_38], edx
.text:0040498C                 mov     edx, ds:dword_409268
.text:00404992                 mov     [esp+4Ch+var_30], ecx
.text:00404996                 mov     ecx, ds:dword_409270
.text:0040499C                 mov     eax, edx
.text:0040499E                 shr     eax, 1Ah
.text:004049A1                 and     eax, 1
.text:004049A4                 xor     eax, 1
.text:004049A7                 mov     [esp+4Ch+var_2C], ecx
.text:004049AB                 shl     eax, 1Ah
.text:004049AE                 mov     ecx, ds:dword_409274
.text:004049B4                 xor     edx, eax
.text:004049B6                 mov     [esp+4Ch+var_34], edx
.text:004049BA                 mov     edx, [esp+4Ch+arg_0]
.text:004049BE                 mov     [esp+4Ch+var_28], ecx
.text:004049C2                 mov     ecx, ds:dword_409278
.text:004049C8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004049CC                 mov     [esp+4Ch+var_24], ecx
.text:004049D0                 mov     ecx, ds:dword_40927C
.text:004049D6                 mov     [esp+4Ch+var_20], ecx
.text:004049DA                 mov     ecx, ds:dword_409280
.text:004049E0                 mov     [esp+4Ch+var_1C], ecx
.text:004049E4                 lea     ecx, [esp+4Ch+var_3C]
.text:004049E8                 mov     [esp+4Ch+var_40], ecx ; int
.text:004049EC                 call    sub_404A00
.text:004049F1                 add     esp, 4Ch
.text:004049F4                 retn
.text:004049F4 sub_404960      endp
.text:004049F4
.text:004049F4 ; ---------------------------------------------------------------------------
.text:004049F5                 align 10h
.text:00404A00
.text:00404A00 ; =============== S U B R O U T I N E =======================================
.text:00404A00
.text:00404A00
.text:00404A00 ; int __cdecl sub_404A00(int, char *, int, int)
.text:00404A00 sub_404A00      proc near               ; CODE XREF: .text:004045B2↑p
.text:00404A00                                         ; .text:004045E2↑p ...
.text:00404A00
.text:00404A00 Block           = dword ptr -2Ch
.text:00404A00 var_28          = dword ptr -28h
.text:00404A00 Str             = dword ptr -24h
.text:00404A00 var_20          = dword ptr -20h
.text:00404A00 var_1C          = dword ptr -1Ch
.text:00404A00 var_18          = dword ptr -18h
.text:00404A00 var_14          = dword ptr -14h
.text:00404A00 arg_0           = dword ptr  4
.text:00404A00 arg_4           = dword ptr  8
.text:00404A00 arg_8           = dword ptr  0Ch
.text:00404A00 arg_C           = dword ptr  10h
.text:00404A00
.text:00404A00                 push    ebp
.text:00404A01                 push    edi
.text:00404A02                 push    esi
.text:00404A03                 push    ebx
.text:00404A04                 sub     esp, 1Ch
.text:00404A07                 call    _errno
.text:00404A0C                 mov     edx, [eax]
.text:00404A0E                 mov     eax, [esp+2Ch+arg_0]
.text:00404A12                 mov     [esp+2Ch+var_14], edx
.text:00404A16                 test    eax, eax
.text:00404A18                 js      loc_404BBA
.text:00404A1E                 mov     eax, [esp+2Ch+arg_0]
.text:00404A22                 cmp     dword_408030, eax
.text:00404A28                 ja      short loc_404AA0
.text:00404A2A                 mov     esi, eax
.text:00404A2C                 inc     esi
.text:00404A2D                 cmp     esi, 1FFFFFFFh
.text:00404A33                 ja      loc_404BBF
.text:00404A39                 mov     ebx, off_40803C
.text:00404A3F                 cmp     ebx, offset dword_408034
.text:00404A45                 jz      loc_404B91
.text:00404A4B
.text:00404A4B loc_404A4B:                             ; CODE XREF: sub_404A00+1B5↓j
.text:00404A4B                 mov     [esp+2Ch+Block], ebx ; void *
.text:00404A4E                 lea     ecx, ds:0[esi*8]
.text:00404A55                 mov     ebp, esi
.text:00404A57                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00404A5B                 call    sub_404CA0
.text:00404A60                 mov     off_40803C, eax
.text:00404A65                 mov     ebx, dword_408030
.text:00404A6B                 sub     ebp, ebx
.text:00404A6D                 lea     edi, [eax+ebx*8]
.text:00404A70                 lea     eax, ds:0[ebp*8]
.text:00404A77                 cmp     eax, 7
.text:00404A7A                 jbe     short loc_404A90
.text:00404A7C                 test    edi, 4
.text:00404A82                 jz      short loc_404A90
.text:00404A84                 mov     dword ptr [edi], 0
.text:00404A8A                 sub     eax, 4
.text:00404A8D                 add     edi, 4
.text:00404A90
.text:00404A90 loc_404A90:                             ; CODE XREF: sub_404A00+7A↑j
.text:00404A90                                         ; sub_404A00+82↑j
.text:00404A90                 cld
.text:00404A91                 mov     ecx, eax
.text:00404A93                 shr     ecx, 2
.text:00404A96                 xor     eax, eax
.text:00404A98                 rep stosd
.text:00404A9A                 mov     dword_408030, esi
.text:00404AA0
.text:00404AA0 loc_404AA0:                             ; CODE XREF: sub_404A00+28↑j
.text:00404AA0                 mov     esi, off_40803C
.text:00404AA6                 mov     eax, [esp+2Ch+arg_0]
.text:00404AAA                 mov     ebp, [esi+eax*8]
.text:00404AAD                 mov     edi, [esi+eax*8+4]
.text:00404AB1                 mov     esi, [esp+2Ch+arg_C]
.text:00404AB5                 test    esi, esi
.text:00404AB7                 jz      loc_404B87
.text:00404ABD
.text:00404ABD loc_404ABD:                             ; CODE XREF: sub_404A00+18C↓j
.text:00404ABD                 call    _errno
.text:00404AC2                 mov     ebx, [eax]
.text:00404AC4                 mov     [esp+2Ch+var_18], esi ; int
.text:00404AC8                 mov     ecx, [esi]
.text:00404ACA                 mov     [esp+2Ch+Block], edi ; int
.text:00404ACD                 mov     edx, [esp+2Ch+arg_8]
.text:00404AD1                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404AD5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404AD9                 mov     ecx, [esp+2Ch+arg_4]
.text:00404ADD                 mov     [esp+2Ch+var_20], edx ; int
.text:00404AE1                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404AE5                 call    sub_4038C0
.text:00404AEA                 mov     esi, eax
.text:00404AEC                 call    _errno
.text:00404AF1                 mov     [eax], ebx
.text:00404AF3                 cmp     ebp, esi
.text:00404AF5                 ja      short loc_404B6B
.text:00404AF7                 lea     ebp, [esi+1]
.text:00404AFA                 mov     ebx, off_40803C
.text:00404B00                 cmp     edi, offset unk_409160
.text:00404B06                 mov     esi, [esp+2Ch+arg_0]
.text:00404B0A                 mov     [ebx+esi*8], ebp
.text:00404B0D                 jz      short loc_404B1D
.text:00404B0F                 mov     [esp+2Ch+Block], edi ; Block
.text:00404B12                 call    free
.text:00404B17                 mov     ebx, off_40803C
.text:00404B1D
.text:00404B1D loc_404B1D:                             ; CODE XREF: sub_404A00+10D↑j
.text:00404B1D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00404B20                 call    sub_404C10
.text:00404B25                 mov     esi, [esp+2Ch+arg_C]
.text:00404B29                 mov     edi, eax
.text:00404B2B                 mov     eax, [esp+2Ch+arg_0]
.text:00404B2F                 test    esi, esi
.text:00404B31                 mov     [ebx+eax*8+4], edi
.text:00404B35                 jz      short loc_404B80
.text:00404B37
.text:00404B37 loc_404B37:                             ; CODE XREF: sub_404A00+185↓j
.text:00404B37                 call    _errno
.text:00404B3C                 mov     ebx, [eax]
.text:00404B3E                 mov     [esp+2Ch+var_18], esi ; int
.text:00404B42                 mov     ecx, [esi]
.text:00404B44                 mov     [esp+2Ch+Block], edi ; int
.text:00404B47                 mov     edx, [esp+2Ch+arg_8]
.text:00404B4B                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404B4F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404B53                 mov     ecx, [esp+2Ch+arg_4]
.text:00404B57                 mov     [esp+2Ch+var_20], edx ; int
.text:00404B5B                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404B5F                 call    sub_4038C0
.text:00404B64                 call    _errno
.text:00404B69                 mov     [eax], ebx
.text:00404B6B
.text:00404B6B loc_404B6B:                             ; CODE XREF: sub_404A00+F5↑j
.text:00404B6B                 call    _errno
.text:00404B70                 mov     ebp, [esp+2Ch+var_14]
.text:00404B74                 mov     [eax], ebp
.text:00404B76                 add     esp, 1Ch
.text:00404B79                 mov     eax, edi
.text:00404B7B                 pop     ebx
.text:00404B7C                 pop     esi
.text:00404B7D                 pop     edi
.text:00404B7E                 pop     ebp
.text:00404B7F                 retn
.text:00404B80 ; ---------------------------------------------------------------------------
.text:00404B80
.text:00404B80 loc_404B80:                             ; CODE XREF: sub_404A00+135↑j
.text:00404B80                 mov     esi, offset dword_409260
.text:00404B85                 jmp     short loc_404B37
.text:00404B87 ; ---------------------------------------------------------------------------
.text:00404B87
.text:00404B87 loc_404B87:                             ; CODE XREF: sub_404A00+B7↑j
.text:00404B87                 mov     esi, offset dword_409260
.text:00404B8C                 jmp     loc_404ABD
.text:00404B91 ; ---------------------------------------------------------------------------
.text:00404B91
.text:00404B91 loc_404B91:                             ; CODE XREF: sub_404A00+45↑j
.text:00404B91                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00404B98                 call    sub_404C10
.text:00404B9D                 mov     off_40803C, eax
.text:00404BA2                 mov     edi, dword_408034
.text:00404BA8                 mov     ebx, eax
.text:00404BAA                 mov     ecx, off_408038
.text:00404BB0                 mov     [eax], edi
.text:00404BB2                 mov     [eax+4], ecx
.text:00404BB5                 jmp     loc_404A4B
.text:00404BBA ; ---------------------------------------------------------------------------
.text:00404BBA
.text:00404BBA loc_404BBA:                             ; CODE XREF: sub_404A00+18↑j
.text:00404BBA                 call    abort
.text:00404BBF ; ---------------------------------------------------------------------------
.text:00404BBF
.text:00404BBF loc_404BBF:                             ; CODE XREF: sub_404A00+33↑j
.text:00404BBF                 call    sub_404EC0
.text:00404BBF sub_404A00      endp
.text:00404BBF
.text:00404BBF ; ---------------------------------------------------------------------------
.text:00404BC4                 align 10h
.text:00404BD0
.text:00404BD0 ; =============== S U B R O U T I N E =======================================
.text:00404BD0
.text:00404BD0
.text:00404BD0 sub_404BD0      proc near
.text:00404BD0
.text:00404BD0 Size            = dword ptr -0Ch
.text:00404BD0 var_4           = dword ptr -4
.text:00404BD0 arg_0           = dword ptr  4
.text:00404BD0 arg_4           = dword ptr  8
.text:00404BD0
.text:00404BD0                 sub     esp, 0Ch
.text:00404BD3                 xor     edx, edx
.text:00404BD5                 mov     ecx, [esp+0Ch+arg_4]
.text:00404BD9                 mov     [esp+0Ch+var_4], ebx
.text:00404BDD                 mov     eax, 0FFFFFFFFh
.text:00404BE2                 mov     ebx, [esp+0Ch+arg_0]
.text:00404BE6                 div     ecx
.text:00404BE8                 cmp     eax, ebx
.text:00404BEA                 jb      short loc_404C09
.text:00404BEC                 mov     edx, ebx
.text:00404BEE                 imul    edx, ecx
.text:00404BF1                 mov     [esp+0Ch+Size], edx ; Size
.text:00404BF4                 call    malloc
.text:00404BF9                 test    eax, eax
.text:00404BFB                 jz      short loc_404C05
.text:00404BFD
.text:00404BFD loc_404BFD:                             ; CODE XREF: sub_404BD0+37↓j
.text:00404BFD                 mov     ebx, [esp+0Ch+var_4]
.text:00404C01                 add     esp, 0Ch
.text:00404C04                 retn
.text:00404C05 ; ---------------------------------------------------------------------------
.text:00404C05
.text:00404C05 loc_404C05:                             ; CODE XREF: sub_404BD0+2B↑j
.text:00404C05                 test    ebx, ebx
.text:00404C07                 jz      short loc_404BFD
.text:00404C09
.text:00404C09 loc_404C09:                             ; CODE XREF: sub_404BD0+1A↑j
.text:00404C09                 call    sub_404EC0
.text:00404C09 sub_404BD0      endp
.text:00404C09
.text:00404C09 ; ---------------------------------------------------------------------------
.text:00404C0E                 align 10h
.text:00404C10
.text:00404C10 ; =============== S U B R O U T I N E =======================================
.text:00404C10
.text:00404C10
.text:00404C10 ; int __cdecl sub_404C10(size_t)
.text:00404C10 sub_404C10      proc near               ; CODE XREF: .text:00404339↑p
.text:00404C10                                         ; .text:00404516↑p ...
.text:00404C10
.text:00404C10 Size            = dword ptr -0Ch
.text:00404C10 var_4           = dword ptr -4
.text:00404C10 arg_0           = dword ptr  4
.text:00404C10
.text:00404C10                 sub     esp, 0Ch
.text:00404C13                 mov     [esp+0Ch+var_4], ebx
.text:00404C17                 mov     ebx, [esp+0Ch+arg_0]
.text:00404C1B                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404C1E                 call    malloc
.text:00404C23                 test    eax, eax
.text:00404C25                 jz      short loc_404C30
.text:00404C27
.text:00404C27 loc_404C27:                             ; CODE XREF: sub_404C10+22↓j
.text:00404C27                 mov     ebx, [esp+0Ch+var_4]
.text:00404C2B                 add     esp, 0Ch
.text:00404C2E                 retn
.text:00404C2E ; ---------------------------------------------------------------------------
.text:00404C2F                 align 10h
.text:00404C30
.text:00404C30 loc_404C30:                             ; CODE XREF: sub_404C10+15↑j
.text:00404C30                 test    ebx, ebx
.text:00404C32                 jz      short loc_404C27
.text:00404C34                 call    sub_404EC0
.text:00404C34 sub_404C10      endp
.text:00404C34
.text:00404C34 ; ---------------------------------------------------------------------------
.text:00404C39                 align 10h
.text:00404C40                 sub     esp, 1Ch
.text:00404C43                 xor     edx, edx
.text:00404C45                 mov     eax, 0FFFFFFFFh
.text:00404C4A                 mov     [esp+14h], ebx
.text:00404C4E                 mov     ecx, [esp+20h]
.text:00404C52                 mov     ebx, [esp+28h]
.text:00404C56                 mov     [esp+18h], esi
.text:00404C5A                 mov     esi, [esp+24h]
.text:00404C5E                 div     ebx
.text:00404C60                 cmp     eax, esi
.text:00404C62                 jb      short loc_404C94
.text:00404C64                 mov     [esp], ecx
.text:00404C67                 mov     edx, esi
.text:00404C69                 imul    edx, ebx
.text:00404C6C                 mov     [esp+4], edx
.text:00404C70                 call    realloc
.text:00404C75                 test    eax, eax
.text:00404C77                 mov     ecx, eax
.text:00404C79                 jz      short loc_404C90
.text:00404C7B
.text:00404C7B loc_404C7B:                             ; CODE XREF: .text:00404C92↓j
.text:00404C7B                 mov     ebx, [esp+14h]
.text:00404C7F                 mov     eax, ecx
.text:00404C81                 mov     esi, [esp+18h]
.text:00404C85                 add     esp, 1Ch
.text:00404C88                 retn
.text:00404C88 ; ---------------------------------------------------------------------------
.text:00404C89                 align 10h
.text:00404C90
.text:00404C90 loc_404C90:                             ; CODE XREF: .text:00404C79↑j
.text:00404C90                 test    esi, esi
.text:00404C92                 jz      short loc_404C7B
.text:00404C94
.text:00404C94 loc_404C94:                             ; CODE XREF: .text:00404C62↑j
.text:00404C94                 call    sub_404EC0
.text:00404C94 ; ---------------------------------------------------------------------------
.text:00404C99                 align 10h
.text:00404CA0
.text:00404CA0 ; =============== S U B R O U T I N E =======================================
.text:00404CA0
.text:00404CA0
.text:00404CA0 ; int __cdecl sub_404CA0(void *, size_t)
.text:00404CA0 sub_404CA0      proc near               ; CODE XREF: sub_404A00+5B↑p
.text:00404CA0
.text:00404CA0 Block           = dword ptr -0Ch
.text:00404CA0 Size            = dword ptr -8
.text:00404CA0 var_4           = dword ptr -4
.text:00404CA0 arg_0           = dword ptr  4
.text:00404CA0 arg_4           = dword ptr  8
.text:00404CA0
.text:00404CA0                 sub     esp, 0Ch
.text:00404CA3                 mov     edx, [esp+0Ch+arg_0]
.text:00404CA7                 mov     [esp+0Ch+var_4], ebx
.text:00404CAB                 mov     ebx, [esp+0Ch+arg_4]
.text:00404CAF                 mov     [esp+0Ch+Block], edx ; Block
.text:00404CB2                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404CB6                 call    realloc
.text:00404CBB                 test    eax, eax
.text:00404CBD                 jz      short loc_404CC7
.text:00404CBF
.text:00404CBF loc_404CBF:                             ; CODE XREF: sub_404CA0+29↓j
.text:00404CBF                 mov     ebx, [esp+0Ch+var_4]
.text:00404CC3                 add     esp, 0Ch
.text:00404CC6                 retn
.text:00404CC7 ; ---------------------------------------------------------------------------
.text:00404CC7
.text:00404CC7 loc_404CC7:                             ; CODE XREF: sub_404CA0+1D↑j
.text:00404CC7                 test    ebx, ebx
.text:00404CC9                 jz      short loc_404CBF
.text:00404CCB                 call    sub_404EC0
.text:00404CCB sub_404CA0      endp
.text:00404CCB
.text:00404CD0 ; ---------------------------------------------------------------------------
.text:00404CD0                 jmp     sub_404E20
.text:00404CD0 ; ---------------------------------------------------------------------------
.text:00404CD5                 align 10h
.text:00404CE0                 sub     esp, 0Ch
.text:00404CE3                 mov     edx, [esp+14h]
.text:00404CE7                 mov     dword ptr [esp+8], 1
.text:00404CEF                 mov     [esp+4], edx
.text:00404CF3                 mov     edx, [esp+10h]
.text:00404CF7                 mov     [esp], edx
.text:00404CFA                 call    sub_404E20
.text:00404CFF                 add     esp, 0Ch
.text:00404D02                 retn
.text:00404D02 ; ---------------------------------------------------------------------------
.text:00404D03                 align 10h
.text:00404D10                 sub     esp, 1Ch
.text:00404D13                 mov     [esp+18h], ebx
.text:00404D17                 mov     ebx, [esp+20h]
.text:00404D1B                 mov     [esp], ebx
.text:00404D1E                 call    malloc
.text:00404D23                 test    eax, eax
.text:00404D25                 jz      short loc_404D43
.text:00404D27
.text:00404D27 loc_404D27:                             ; CODE XREF: .text:00404D45↓j
.text:00404D27                 mov     [esp+8], ebx
.text:00404D2B                 mov     dword ptr [esp+4], 0
.text:00404D33                 mov     [esp], eax
.text:00404D36                 call    memset
.text:00404D3B                 mov     ebx, [esp+18h]
.text:00404D3F                 add     esp, 1Ch
.text:00404D42                 retn
.text:00404D43 ; ---------------------------------------------------------------------------
.text:00404D43
.text:00404D43 loc_404D43:                             ; CODE XREF: .text:00404D25↑j
.text:00404D43                 test    ebx, ebx
.text:00404D45                 jz      short loc_404D27
.text:00404D47                 call    sub_404EC0
.text:00404D47 ; ---------------------------------------------------------------------------
.text:00404D4C                 align 10h
.text:00404D50                 sub     esp, 0Ch
.text:00404D53                 xor     edx, edx
.text:00404D55                 mov     ecx, [esp+14h]
.text:00404D59                 mov     [esp+8], ebx
.text:00404D5D                 mov     eax, 0FFFFFFFFh
.text:00404D62                 mov     ebx, [esp+10h]
.text:00404D66                 div     ecx
.text:00404D68                 cmp     eax, ebx
.text:00404D6A                 jb      short loc_404D88
.text:00404D6C                 mov     [esp+4], ecx
.text:00404D70                 mov     [esp], ebx
.text:00404D73                 call    calloc
.text:00404D78                 test    eax, eax
.text:00404D7A                 jz      short loc_404D84
.text:00404D7C
.text:00404D7C loc_404D7C:                             ; CODE XREF: .text:00404D86↓j
.text:00404D7C                 mov     ebx, [esp+8]
.text:00404D80                 add     esp, 0Ch
.text:00404D83                 retn
.text:00404D84 ; ---------------------------------------------------------------------------
.text:00404D84
.text:00404D84 loc_404D84:                             ; CODE XREF: .text:00404D7A↑j
.text:00404D84                 test    ebx, ebx
.text:00404D86                 jz      short loc_404D7C
.text:00404D88
.text:00404D88 loc_404D88:                             ; CODE XREF: .text:00404D6A↑j
.text:00404D88                 call    sub_404EC0
.text:00404D88 ; ---------------------------------------------------------------------------
.text:00404D8D                 align 10h
.text:00404D90                 sub     esp, 1Ch
.text:00404D93                 mov     [esp+18h], ebx
.text:00404D97                 mov     ebx, [esp+24h]
.text:00404D9B                 mov     [esp], ebx
.text:00404D9E                 call    malloc
.text:00404DA3                 test    eax, eax
.text:00404DA5                 mov     edx, eax
.text:00404DA7                 jz      short loc_404DC5
.text:00404DA9
.text:00404DA9 loc_404DA9:                             ; CODE XREF: .text:00404DC7↓j
.text:00404DA9                 mov     [esp+8], ebx
.text:00404DAD                 mov     ecx, [esp+20h]
.text:00404DB1                 mov     [esp], edx
.text:00404DB4                 mov     [esp+4], ecx
.text:00404DB8                 call    memcpy
.text:00404DBD                 mov     ebx, [esp+18h]
.text:00404DC1                 add     esp, 1Ch
.text:00404DC4                 retn
.text:00404DC5 ; ---------------------------------------------------------------------------
.text:00404DC5
.text:00404DC5 loc_404DC5:                             ; CODE XREF: .text:00404DA7↑j
.text:00404DC5                 test    ebx, ebx
.text:00404DC7                 jz      short loc_404DA9
.text:00404DC9                 call    sub_404EC0
.text:00404DC9 ; ---------------------------------------------------------------------------
.text:00404DCE                 align 10h
.text:00404DD0                 sub     esp, 1Ch
.text:00404DD3                 mov     [esp+18h], esi
.text:00404DD7                 mov     esi, [esp+20h]
.text:00404DDB                 mov     [esp+14h], ebx
.text:00404DDF                 mov     [esp], esi
.text:00404DE2                 call    strlen
.text:00404DE7                 lea     ebx, [eax+1]
.text:00404DEA                 mov     [esp], ebx
.text:00404DED                 call    malloc
.text:00404DF2                 test    eax, eax
.text:00404DF4                 jz      short loc_404E12
.text:00404DF6
.text:00404DF6 loc_404DF6:                             ; CODE XREF: .text:00404E14↓j
.text:00404DF6                 mov     [esp+8], ebx
.text:00404DFA                 mov     [esp+4], esi
.text:00404DFE                 mov     [esp], eax
.text:00404E01                 call    memcpy
.text:00404E06                 mov     ebx, [esp+14h]
.text:00404E0A                 mov     esi, [esp+18h]
.text:00404E0E                 add     esp, 1Ch
.text:00404E11                 retn
.text:00404E12 ; ---------------------------------------------------------------------------
.text:00404E12
.text:00404E12 loc_404E12:                             ; CODE XREF: .text:00404DF4↑j
.text:00404E12                 test    ebx, ebx
.text:00404E14                 jz      short loc_404DF6
.text:00404E16                 call    sub_404EC0
.text:00404E16 ; ---------------------------------------------------------------------------
.text:00404E1B                 align 10h
.text:00404E20
.text:00404E20 ; =============== S U B R O U T I N E =======================================
.text:00404E20
.text:00404E20
.text:00404E20 ; int __cdecl sub_404E20(void *, int, int)
.text:00404E20 sub_404E20      proc near               ; CODE XREF: .text:00404CD0↑j
.text:00404E20                                         ; .text:00404CFA↑p
.text:00404E20
.text:00404E20 Block           = dword ptr -1Ch
.text:00404E20 Size            = dword ptr -18h
.text:00404E20 var_C           = dword ptr -0Ch
.text:00404E20 var_8           = dword ptr -8
.text:00404E20 var_4           = dword ptr -4
.text:00404E20 arg_0           = dword ptr  4
.text:00404E20 arg_4           = dword ptr  8
.text:00404E20 arg_8           = dword ptr  0Ch
.text:00404E20
.text:00404E20                 sub     esp, 1Ch
.text:00404E23                 mov     [esp+1Ch+var_8], esi
.text:00404E27                 mov     esi, [esp+1Ch+arg_0]
.text:00404E2B                 mov     [esp+1Ch+var_4], edi
.text:00404E2F                 mov     edi, [esp+1Ch+arg_4]
.text:00404E33                 test    esi, esi
.text:00404E35                 mov     [esp+1Ch+var_C], ebx
.text:00404E39                 mov     ecx, [edi]
.text:00404E3B                 mov     ebx, [esp+1Ch+arg_8]
.text:00404E3F                 jz      short loc_404E80
.text:00404E41                 xor     edx, edx
.text:00404E43                 mov     eax, 7FFFFFFFh
.text:00404E48                 div     ebx
.text:00404E4A                 cmp     eax, ecx
.text:00404E4C                 jb      short loc_404E79
.text:00404E4E                 add     ecx, ecx
.text:00404E50
.text:00404E50 loc_404E50:                             ; CODE XREF: sub_404E20+62↓j
.text:00404E50                                         ; sub_404E20+71↓j ...
.text:00404E50                 mov     [edi], ecx
.text:00404E52                 imul    ebx, ecx
.text:00404E55                 mov     [esp+1Ch+Block], esi ; Block
.text:00404E58                 mov     [esp+1Ch+Size], ebx ; Size
.text:00404E5C                 call    realloc
.text:00404E61                 test    eax, eax
.text:00404E63                 jz      short loc_404E75
.text:00404E65
.text:00404E65 loc_404E65:                             ; CODE XREF: sub_404E20+57↓j
.text:00404E65                 mov     ebx, [esp+1Ch+var_C]
.text:00404E69                 mov     esi, [esp+1Ch+var_8]
.text:00404E6D                 mov     edi, [esp+1Ch+var_4]
.text:00404E71                 add     esp, 1Ch
.text:00404E74                 retn
.text:00404E75 ; ---------------------------------------------------------------------------
.text:00404E75
.text:00404E75 loc_404E75:                             ; CODE XREF: sub_404E20+43↑j
.text:00404E75                 test    ebx, ebx
.text:00404E77                 jz      short loc_404E65
.text:00404E79
.text:00404E79 loc_404E79:                             ; CODE XREF: sub_404E20+2C↑j
.text:00404E79                 call    sub_404EC0
.text:00404E79 ; ---------------------------------------------------------------------------
.text:00404E7E                 align 10h
.text:00404E80
.text:00404E80 loc_404E80:                             ; CODE XREF: sub_404E20+1F↑j
.text:00404E80                 test    ecx, ecx
.text:00404E82                 jnz     short loc_404E50
.text:00404E84                 xor     edx, edx
.text:00404E86                 mov     eax, 40h ; '@'
.text:00404E8B                 div     ebx
.text:00404E8D                 test    eax, eax
.text:00404E8F                 mov     ecx, eax
.text:00404E91                 jnz     short loc_404E50
.text:00404E93                 mov     ecx, 1
.text:00404E98                 jmp     short loc_404E50
.text:00404E98 sub_404E20      endp
.text:00404E98
.text:00404E98 ; ---------------------------------------------------------------------------
.text:00404E9A                 align 10h
.text:00404EA0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_404EC0+3↓o
.text:00404EB1 ; const char aS[]
.text:00404EB1 aS              db '%s',0               ; DATA XREF: sub_404EC0+10↓o
.text:00404EB4                 align 10h
.text:00404EC0
.text:00404EC0 ; =============== S U B R O U T I N E =======================================
.text:00404EC0
.text:00404EC0 ; Attributes: noreturn
.text:00404EC0
.text:00404EC0 sub_404EC0      proc near               ; CODE XREF: sub_404A00:loc_404BBF↑p
.text:00404EC0                                         ; sub_404BD0:loc_404C09↑p ...
.text:00404EC0
.text:00404EC0 Code            = dword ptr -1Ch
.text:00404EC0 ErrorMessage    = dword ptr -18h
.text:00404EC0 var_14          = dword ptr -14h
.text:00404EC0 var_10          = byte ptr -10h
.text:00404EC0
.text:00404EC0                 sub     esp, 1Ch
.text:00404EC3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00404ECA                 call    ds:libintl_gettext
.text:00404ED0                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:00404ED8                 mov     edx, Code
.text:00404EDE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404EE6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00404EEA                 mov     [esp+1Ch+Code], edx ; Code
.text:00404EED                 call    sub_404F50
.text:00404EF2                 call    abort
.text:00404EF2 sub_404EC0      endp
.text:00404EF2
.text:00404EF2 ; ---------------------------------------------------------------------------
.text:00404EF7                 align 10h
.text:00404F00
.text:00404F00 ; =============== S U B R O U T I N E =======================================
.text:00404F00
.text:00404F00 ; Attributes: thunk
.text:00404F00
.text:00404F00 libintl_bindtextdomain proc near
.text:00404F00                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404F00 libintl_bindtextdomain endp
.text:00404F00
.text:00404F00 ; ---------------------------------------------------------------------------
.text:00404F06                 align 10h
.text:00404F10                 jmp     ds:libintl_textdomain
.text:00404F10 ; ---------------------------------------------------------------------------
.text:00404F16                 align 10h
.text:00404F20                 jmp     ds:libintl_gettext
.text:00404F20 ; ---------------------------------------------------------------------------
.text:00404F26                 align 10h
.text:00404F30 ; const char aS_0[]
.text:00404F30 aS_0            db ': %s',0             ; DATA XREF: sub_404F50+B8↓o
.text:00404F30                                         ; sub_405054+122↓o
.text:00404F35 aUnknownSystemE db 'Unknown system error',0
.text:00404F35                                         ; DATA XREF: sub_404F50:loc_40501D↓o
.text:00404F35                                         ; sub_405054:loc_40518E↓o
.text:00404F4A ; const char aS_1[]
.text:00404F4A aS_1            db '%s: ',0             ; DATA XREF: sub_404F50:loc_405024↓o
.text:00404F4F                 align 10h
.text:00404F50
.text:00404F50 ; =============== S U B R O U T I N E =======================================
.text:00404F50
.text:00404F50
.text:00404F50 ; int __cdecl sub_404F50(int Code, int ErrorMessage, char *, char)
.text:00404F50 sub_404F50      proc near               ; CODE XREF: sub_401800+2EA↑p
.text:00404F50                                         ; sub_401800+743↑p ...
.text:00404F50
.text:00404F50 Stream          = dword ptr -1Ch
.text:00404F50 Format          = dword ptr -18h
.text:00404F50 ArgList         = dword ptr -14h
.text:00404F50 Code            = dword ptr  4
.text:00404F50 ErrorMessage    = dword ptr  8
.text:00404F50 arg_8           = dword ptr  0Ch
.text:00404F50 arg_C           = byte ptr  10h
.text:00404F50
.text:00404F50                 push    esi
.text:00404F51                 push    ebx
.text:00404F52                 sub     esp, 14h
.text:00404F55                 mov     edx, ds:_iob
.text:00404F5B                 mov     esi, [esp+1Ch+Code]
.text:00404F5F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00404F63                 add     edx, 20h ; ' '
.text:00404F66                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404F69                 call    fflush
.text:00404F6E                 mov     eax, ds:dword_4093C0
.text:00404F73                 test    eax, eax
.text:00404F75                 jz      loc_405024
.text:00404F7B                 call    eax ; dword_4093C0
.text:00404F7D
.text:00404F7D loc_404F7D:                             ; CODE XREF: sub_404F50+F7↓j
.text:00404F7D                 lea     edx, [esp+1Ch+arg_C]
.text:00404F81                 mov     ecx, [esp+1Ch+arg_8]
.text:00404F85                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404F89                 mov     edx, ds:_iob
.text:00404F8F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404F93                 add     edx, 40h ; '@'
.text:00404F96                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404F99                 call    vfprintf
.text:00404F9E                 inc     ds:dword_4093D0
.text:00404FA4                 test    ebx, ebx
.text:00404FA6                 jnz     short loc_404FF2
.text:00404FA8
.text:00404FA8 loc_404FA8:                             ; CODE XREF: sub_404F50+CB↓j
.text:00404FA8                 mov     edx, ds:_iob
.text:00404FAE                 lea     ecx, [edx+40h]
.text:00404FB1                 mov     ebx, [ecx+4]
.text:00404FB4                 dec     ebx
.text:00404FB5                 test    ebx, ebx
.text:00404FB7                 mov     [ecx+4], ebx
.text:00404FBA                 js      short loc_404FE0
.text:00404FBC                 mov     ecx, [edx+40h]
.text:00404FBF                 mov     byte ptr [ecx], 0Ah
.text:00404FC2                 inc     dword ptr [edx+40h]
.text:00404FC5
.text:00404FC5 loc_404FC5:                             ; CODE XREF: sub_404F50+A0↓j
.text:00404FC5                 mov     edx, ds:_iob
.text:00404FCB                 add     edx, 40h ; '@'
.text:00404FCE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404FD1                 call    fflush
.text:00404FD6                 test    esi, esi
.text:00404FD8                 jnz     short loc_40504C
.text:00404FDA                 add     esp, 14h
.text:00404FDD                 pop     ebx
.text:00404FDE                 pop     esi
.text:00404FDF                 retn
.text:00404FE0 ; ---------------------------------------------------------------------------
.text:00404FE0
.text:00404FE0 loc_404FE0:                             ; CODE XREF: sub_404F50+6A↑j
.text:00404FE0                 mov     [esp+1Ch+Format], ecx ; File
.text:00404FE4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00404FEB                 call    _flsbuf
.text:00404FF0                 jmp     short loc_404FC5
.text:00404FF2 ; ---------------------------------------------------------------------------
.text:00404FF2
.text:00404FF2 loc_404FF2:                             ; CODE XREF: sub_404F50+56↑j
.text:00404FF2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00404FF5                 call    strerror
.text:00404FFA                 test    eax, eax
.text:00404FFC                 jz      short loc_40501D
.text:00404FFE
.text:00404FFE loc_404FFE:                             ; CODE XREF: sub_404F50+D2↓j
.text:00404FFE                 mov     [esp+1Ch+ArgList], eax
.text:00405002                 mov     ebx, ds:_iob
.text:00405008                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00405010                 add     ebx, 40h ; '@'
.text:00405013                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00405016                 call    fprintf
.text:0040501B                 jmp     short loc_404FA8
.text:0040501D ; ---------------------------------------------------------------------------
.text:0040501D
.text:0040501D loc_40501D:                             ; CODE XREF: sub_404F50+AC↑j
.text:0040501D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405022                 jmp     short loc_404FFE
.text:00405024 ; ---------------------------------------------------------------------------
.text:00405024
.text:00405024 loc_405024:                             ; CODE XREF: sub_404F50+25↑j
.text:00405024                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:0040502C                 mov     edx, ds:_iob
.text:00405032                 mov     ecx, ds:dword_409390
.text:00405038                 add     edx, 40h ; '@'
.text:0040503B                 mov     [esp+1Ch+ArgList], ecx
.text:0040503F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405042                 call    fprintf
.text:00405047                 jmp     loc_404F7D
.text:0040504C ; ---------------------------------------------------------------------------
.text:0040504C
.text:0040504C loc_40504C:                             ; CODE XREF: sub_404F50+88↑j
.text:0040504C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040504F                 call    exit
.text:0040504F sub_404F50      endp
.text:0040504F
.text:00405054
.text:00405054 ; =============== S U B R O U T I N E =======================================
.text:00405054
.text:00405054
.text:00405054 ; int __cdecl sub_405054(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00405054 sub_405054      proc near               ; DATA XREF: sub_405054+77↓o
.text:00405054
.text:00405054 Stream          = dword ptr -28h
.text:00405054 Format          = dword ptr -24h
.text:00405054 ArgList         = dword ptr -20h
.text:00405054 var_1C          = dword ptr -1Ch
.text:00405054 Code            = dword ptr  8
.text:00405054 ErrorMessage    = dword ptr  0Ch
.text:00405054 Str2            = dword ptr  10h
.text:00405054 arg_10          = dword ptr  14h
.text:00405054 arg_14          = dword ptr  18h
.text:00405054 arg_18          = byte ptr  1Ch
.text:00405054
.text:00405054                 and     eax, 64253A73h
.text:00405059                 cmp     ah, [eax]
.text:0040505B
.text:0040505B loc_40505B:                             ; DATA XREF: sub_405054:loc_405195↓o
.text:0040505B                 add     ds:55003A73h, ah
.text:00405061                 push    edi
.text:00405062                 push    esi
.text:00405063                 push    ebx
.text:00405064                 sub     esp, 1Ch
.text:00405067                 mov     edx, ds:dword_409400
.text:0040506D                 mov     ebp, [esp+28h+Code]
.text:00405071                 mov     edi, [esp+28h+ErrorMessage]
.text:00405075                 test    edx, edx
.text:00405077                 mov     ebx, [esp+28h+Str2]
.text:0040507B                 mov     esi, [esp+28h+arg_10]
.text:0040507F                 jz      short loc_405099
.text:00405081                 cmp     ds:dword_4092A0, esi
.text:00405087                 jz      loc_4051C0
.text:0040508D
.text:0040508D loc_40508D:                             ; CODE XREF: sub_405054+18D↓j
.text:0040508D                 mov     ds:Str1, ebx
.text:00405093                 mov     ds:dword_4092A0, esi
.text:00405099
.text:00405099 loc_405099:                             ; CODE XREF: sub_405054+2B↑j
.text:00405099                 mov     edx, ds:_iob
.text:0040509F                 add     edx, 20h ; ' '
.text:004050A2                 mov     [esp+28h+Stream], edx ; Stream
.text:004050A5                 call    fflush
.text:004050AA                 mov     eax, ds:dword_4093C0
.text:004050AF                 test    eax, eax
.text:004050B1                 jz      loc_405195
.text:004050B7                 call    eax ; dword_4093C0
.text:004050B9
.text:004050B9 loc_4050B9:                             ; CODE XREF: sub_405054+164↓j
.text:004050B9                 test    ebx, ebx
.text:004050BB                 jz      short loc_4050DE
.text:004050BD                 mov     [esp+28h+ArgList], ebx
.text:004050C1                 mov     ebx, ds:_iob
.text:004050C7                 mov     [esp+28h+var_1C], esi
.text:004050CB                 mov     [esp+28h+Format], offset sub_405054 ; Format
.text:004050D3                 add     ebx, 40h ; '@'
.text:004050D6                 mov     [esp+28h+Stream], ebx ; Stream
.text:004050D9                 call    fprintf
.text:004050DE
.text:004050DE loc_4050DE:                             ; CODE XREF: sub_405054+67↑j
.text:004050DE                 mov     esi, ds:_iob
.text:004050E4                 lea     edx, [esp+28h+arg_18]
.text:004050E8                 mov     ecx, [esp+28h+arg_14]
.text:004050EC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004050F0                 add     esi, 40h ; '@'
.text:004050F3                 mov     [esp+28h+Format], ecx ; Format
.text:004050F7                 mov     [esp+28h+Stream], esi ; Stream
.text:004050FA                 call    vfprintf
.text:004050FF                 inc     ds:dword_4093D0
.text:00405105                 test    edi, edi
.text:00405107                 jnz     short loc_405160
.text:00405109
.text:00405109 loc_405109:                             ; CODE XREF: sub_405054+135↓j
.text:00405109                 mov     edx, ds:_iob
.text:0040510F                 lea     ecx, [edx+40h]
.text:00405112                 mov     ebx, [ecx+4]
.text:00405115                 dec     ebx
.text:00405116                 test    ebx, ebx
.text:00405118                 mov     [ecx+4], ebx
.text:0040511B                 js      short loc_405147
.text:0040511D                 mov     esi, [edx+40h]
.text:00405120                 mov     byte ptr [esi], 0Ah
.text:00405123                 inc     dword ptr [edx+40h]
.text:00405126
.text:00405126 loc_405126:                             ; CODE XREF: sub_405054+103↓j
.text:00405126                 mov     ecx, ds:_iob
.text:0040512C                 add     ecx, 40h ; '@'
.text:0040512F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405132                 call    fflush
.text:00405137                 test    ebp, ebp
.text:00405139                 jnz     loc_4051E6
.text:0040513F
.text:0040513F loc_40513F:                             ; CODE XREF: sub_405054+173↓j
.text:0040513F                                         ; sub_405054+187↓j
.text:0040513F                 add     esp, 1Ch
.text:00405142                 pop     ebx
.text:00405143                 pop     esi
.text:00405144                 pop     edi
.text:00405145                 pop     ebp
.text:00405146                 retn
.text:00405147 ; ---------------------------------------------------------------------------
.text:00405147
.text:00405147 loc_405147:                             ; CODE XREF: sub_405054+C7↑j
.text:00405147                 mov     [esp+28h+Format], ecx ; File
.text:0040514B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00405152                 call    _flsbuf
.text:00405157                 jmp     short loc_405126
.text:00405157 ; ---------------------------------------------------------------------------
.text:00405159                 align 10h
.text:00405160
.text:00405160 loc_405160:                             ; CODE XREF: sub_405054+B3↑j
.text:00405160                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00405163                 call    strerror
.text:00405168                 test    eax, eax
.text:0040516A                 jz      short loc_40518E
.text:0040516C
.text:0040516C loc_40516C:                             ; CODE XREF: sub_405054+13F↓j
.text:0040516C                 mov     [esp+28h+ArgList], eax
.text:00405170                 mov     edi, ds:_iob
.text:00405176                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:0040517E                 add     edi, 40h ; '@'
.text:00405181                 mov     [esp+28h+Stream], edi ; Stream
.text:00405184                 call    fprintf
.text:00405189                 jmp     loc_405109
.text:0040518E ; ---------------------------------------------------------------------------
.text:0040518E
.text:0040518E loc_40518E:                             ; CODE XREF: sub_405054+116↑j
.text:0040518E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405193                 jmp     short loc_40516C
.text:00405195 ; ---------------------------------------------------------------------------
.text:00405195
.text:00405195 loc_405195:                             ; CODE XREF: sub_405054+5D↑j
.text:00405195                 mov     [esp+28h+Format], (offset loc_40505B+1) ; Format
.text:0040519D                 mov     ecx, ds:_iob
.text:004051A3                 mov     edx, ds:dword_409390
.text:004051A9                 add     ecx, 40h ; '@'
.text:004051AC                 mov     [esp+28h+ArgList], edx
.text:004051B0                 mov     [esp+28h+Stream], ecx ; Stream
.text:004051B3                 call    fprintf
.text:004051B8                 jmp     loc_4050B9
.text:004051B8 ; ---------------------------------------------------------------------------
.text:004051BD                 align 10h
.text:004051C0
.text:004051C0 loc_4051C0:                             ; CODE XREF: sub_405054+33↑j
.text:004051C0                 mov     eax, ds:Str1
.text:004051C5                 cmp     ebx, eax
.text:004051C7                 jz      loc_40513F
.text:004051CD                 mov     [esp+28h+Format], ebx ; Str2
.text:004051D1                 mov     [esp+28h+Stream], eax ; Str1
.text:004051D4                 call    strcmp
.text:004051D9                 test    eax, eax
.text:004051DB                 jz      loc_40513F
.text:004051E1                 jmp     loc_40508D
.text:004051E6 ; ---------------------------------------------------------------------------
.text:004051E6
.text:004051E6 loc_4051E6:                             ; CODE XREF: sub_405054+E5↑j
.text:004051E6                 mov     [esp+28h+Stream], ebp ; Code
.text:004051E9                 call    exit
.text:004051E9 sub_405054      endp ; sp-analysis failed
.text:004051E9
.text:004051E9 ; ---------------------------------------------------------------------------
.text:004051EE                 align 10h
.text:004051F0
.text:004051F0 ; =============== S U B R O U T I N E =======================================
.text:004051F0
.text:004051F0
.text:004051F0 sub_4051F0      proc near               ; CODE XREF: sub_401800+451↑p
.text:004051F0
.text:004051F0 Destination     = dword ptr -1C2Ch
.text:004051F0 Source          = dword ptr -1C28h
.text:004051F0 Count           = dword ptr -1C24h
.text:004051F0 var_1C1C        = byte ptr -1C1Ch
.text:004051F0 var_181C        = byte ptr -181Ch
.text:004051F0 var_141C        = byte ptr -141Ch
.text:004051F0 var_101C        = byte ptr -101Ch
.text:004051F0 var_C1C         = byte ptr -0C1Ch
.text:004051F0 var_81C         = byte ptr -81Ch
.text:004051F0 var_41C         = byte ptr -41Ch
.text:004051F0 var_10          = dword ptr -10h
.text:004051F0 var_C           = dword ptr -0Ch
.text:004051F0 var_8           = dword ptr -8
.text:004051F0 var_4           = dword ptr -4
.text:004051F0 arg_0           = dword ptr  4
.text:004051F0 Str             = dword ptr  8
.text:004051F0 arg_8           = dword ptr  0Ch
.text:004051F0
.text:004051F0                 mov     eax, 1C2Ch
.text:004051F5                 call    __alloca
.text:004051FA                 mov     [esp+1C2Ch+var_10], ebx
.text:00405201                 mov     ebx, [esp+1C2Ch+arg_0]
.text:00405208                 mov     [esp+1C2Ch+var_C], esi
.text:0040520F                 mov     esi, [esp+1C2Ch+arg_8]
.text:00405216                 cmp     ebx, 0Ah
.text:00405219                 mov     [esp+1C2Ch+var_8], edi
.text:00405220                 mov     edi, [esp+1C2Ch+Str]
.text:00405227                 mov     [esp+1C2Ch+var_4], ebp
.text:0040522E                 jg      loc_405332
.text:00405234                 cmp     ebx, 7
.text:00405237                 jge     loc_405325
.text:0040523D                 cmp     ebx, 1
.text:00405240                 jl      loc_405320
.text:00405246                 cmp     ebx, 5
.text:00405249                 jle     short loc_4052A3
.text:0040524B                 lea     ebp, [esp+1C2Ch+var_1C1C]
.text:0040524F                 lea     edx, [esp+1C2Ch+var_181C]
.text:00405256                 mov     [esp+1C2Ch+Source], ebp
.text:0040525A                 mov     [esp+1C2Ch+Destination], edx
.text:0040525D                 call    sub_4056E0
.text:00405262
.text:00405262 loc_405262:                             ; CODE XREF: sub_4051F0+C7↓j
.text:00405262                                         ; DATA XREF: sub_4051F0:jpt_4052B7↓o
.text:00405262                 mov     [esp+1C2Ch+Count], esi ; jumptable 004052B7 case 1
.text:00405266                 mov     [esp+1C2Ch+Source], ebp ; Source
.text:0040526A
.text:0040526A loc_40526A:                             ; CODE XREF: sub_4051F0+F7↓j
.text:0040526A                 mov     [esp+1C2Ch+Destination], edi ; Destination
.text:0040526D                 call    strncpy
.text:00405272                 mov     [esp+1C2Ch+Destination], eax ; Str
.text:00405275                 call    strlen
.text:0040527A                 lea     esi, [esi+0]
.text:00405280
.text:00405280 loc_405280:                             ; CODE XREF: sub_4051F0+105↓j
.text:00405280                                         ; sub_4051F0:loc_405320↓j ...
.text:00405280                 mov     ebx, [esp+1C2Ch+var_10]
.text:00405287                 mov     esi, [esp+1C2Ch+var_C]
.text:0040528E                 mov     edi, [esp+1C2Ch+var_8]
.text:00405295                 mov     ebp, [esp+1C2Ch+var_4]
.text:0040529C                 add     esp, 1C2Ch
.text:004052A2                 retn
.text:004052A3 ; ---------------------------------------------------------------------------
.text:004052A3
.text:004052A3 loc_4052A3:                             ; CODE XREF: sub_4051F0+59↑j
.text:004052A3                 lea     ebp, [esp+1C2Ch+var_141C]
.text:004052AA                 mov     [esp+1C2Ch+Destination], ebp ; char *
.text:004052AD                 call    sub_4054A0
.text:004052B2                 cmp     ebx, 5          ; switch 6 cases
.text:004052B5                 ja      short def_4052B7 ; jumptable 004052B7 default case, case 0
.text:004052B7                 jmp     ds:jpt_4052B7[ebx*4] ; switch jump
.text:004052B7 ; ---------------------------------------------------------------------------
.text:004052BE                 align 10h
.text:004052C0 jpt_4052B7      dd offset def_4052B7    ; DATA XREF: sub_4051F0+C7↑r
.text:004052C0                 dd offset loc_405262    ; jump table for switch statement
.text:004052C0                 dd offset loc_4052D8
.text:004052C0                 dd offset loc_4052F7
.text:004052C0                 dd offset loc_405304
.text:004052C0                 dd offset loc_405311
.text:004052D8 ; ---------------------------------------------------------------------------
.text:004052D8
.text:004052D8 loc_4052D8:                             ; CODE XREF: sub_4051F0+C7↑j
.text:004052D8                                         ; DATA XREF: sub_4051F0:jpt_4052B7↑o
.text:004052D8                 mov     [esp+1C2Ch+Count], esi ; jumptable 004052B7 case 2
.text:004052DC                 lea     eax, [esp+1C2Ch+var_101C]
.text:004052E3
.text:004052E3 loc_4052E3:                             ; CODE XREF: sub_4051F0+112↓j
.text:004052E3                                         ; sub_4051F0+11F↓j ...
.text:004052E3                 mov     [esp+1C2Ch+Source], eax
.text:004052E7                 jmp     short loc_40526A
.text:004052E7 ; ---------------------------------------------------------------------------
.text:004052E9                 align 10h
.text:004052F0
.text:004052F0 def_4052B7:                             ; CODE XREF: sub_4051F0+C5↑j
.text:004052F0                                         ; sub_4051F0+C7↑j ...
.text:004052F0                 mov     eax, 0FFFFFFFFh ; jumptable 004052B7 default case, case 0
.text:004052F5                 jmp     short loc_405280
.text:004052F7 ; ---------------------------------------------------------------------------
.text:004052F7
.text:004052F7 loc_4052F7:                             ; CODE XREF: sub_4051F0+C7↑j
.text:004052F7                                         ; DATA XREF: sub_4051F0:jpt_4052B7↑o
.text:004052F7                 mov     [esp+1C2Ch+Count], esi ; jumptable 004052B7 case 3
.text:004052FB                 lea     eax, [esp+1C2Ch+var_C1C]
.text:00405302                 jmp     short loc_4052E3
.text:00405304 ; ---------------------------------------------------------------------------
.text:00405304
.text:00405304 loc_405304:                             ; CODE XREF: sub_4051F0+C7↑j
.text:00405304                                         ; DATA XREF: sub_4051F0:jpt_4052B7↑o
.text:00405304                 mov     [esp+1C2Ch+Count], esi ; jumptable 004052B7 case 4
.text:00405308                 lea     eax, [esp+1C2Ch+var_81C]
.text:0040530F                 jmp     short loc_4052E3
.text:00405311 ; ---------------------------------------------------------------------------
.text:00405311
.text:00405311 loc_405311:                             ; CODE XREF: sub_4051F0+C7↑j
.text:00405311                                         ; DATA XREF: sub_4051F0:jpt_4052B7↑o
.text:00405311                 mov     [esp+1C2Ch+Count], esi ; jumptable 004052B7 case 5
.text:00405315                 lea     eax, [esp+1C2Ch+var_41C]
.text:0040531C                 jmp     short loc_4052E3
.text:0040531C ; ---------------------------------------------------------------------------
.text:0040531E                 align 10h
.text:00405320
.text:00405320 loc_405320:                             ; CODE XREF: sub_4051F0+50↑j
.text:00405320                                         ; sub_4051F0+158↓j ...
.text:00405320                 jmp     loc_405280
.text:00405325 ; ---------------------------------------------------------------------------
.text:00405325
.text:00405325 loc_405325:                             ; CODE XREF: sub_4051F0+47↑j
.text:00405325                                         ; sub_4051F0+15A↓j ...
.text:00405325                 call    _errno
.text:0040532A                 mov     dword ptr [eax], 28h ; '('
.text:00405330                 jmp     short def_4052B7 ; jumptable 004052B7 default case, case 0
.text:00405332 ; ---------------------------------------------------------------------------
.text:00405332
.text:00405332 loc_405332:                             ; CODE XREF: sub_4051F0+3E↑j
.text:00405332                 cmp     ebx, 102h
.text:00405338                 jz      short loc_40535A
.text:0040533A                 cmp     ebx, 102h
.text:00405340                 jg      short loc_405350
.text:00405342                 lea     edx, [ebx-64h]
.text:00405345                 cmp     edx, 0Ah
.text:00405348                 ja      short loc_405320
.text:0040534A                 jmp     short loc_405325
.text:0040534A ; ---------------------------------------------------------------------------
.text:0040534C                 align 10h
.text:00405350
.text:00405350 loc_405350:                             ; CODE XREF: sub_4051F0+150↑j
.text:00405350                 cmp     ebx, 109h
.text:00405356                 jnz     short loc_405320
.text:00405358                 jmp     short loc_405325
.text:0040535A ; ---------------------------------------------------------------------------
.text:0040535A
.text:0040535A loc_40535A:                             ; CODE XREF: sub_4051F0+148↑j
.text:0040535A                 mov     [esp+1C2Ch+Destination], edi ; Str
.text:0040535D                 call    strlen
.text:00405362                 mov     [esp+1C2Ch+Source], eax
.text:00405366                 mov     [esp+1C2Ch+Destination], edi
.text:00405369                 call    sub_405620
.text:0040536E                 jmp     loc_405280
.text:0040536E sub_4051F0      endp
.text:0040536E
.text:0040536E ; ---------------------------------------------------------------------------
.text:00405373                 align 10h
.text:00405380                 mov     eax, 142Ch
.text:00405385                 call    __alloca
.text:0040538A                 mov     [esp+141Ch], ebx
.text:00405391                 mov     ebx, [esp+1430h]
.text:00405398                 mov     [esp+1424h], edi
.text:0040539F                 lea     edi, [esp+10h]
.text:004053A3                 mov     [esp+1420h], esi
.text:004053AA                 mov     esi, [esp+1438h]
.text:004053B1                 mov     [esp+1428h], ebp
.text:004053B8                 mov     ebp, [esp+1434h]
.text:004053BF                 mov     [esp], edi
.text:004053C2                 call    sub_4054A0
.text:004053C7                 cmp     ebx, 5          ; switch 6 cases
.text:004053CA                 ja      short def_4053CC ; jumptable 004053CC default case, case 0
.text:004053CC                 jmp     ds:jpt_4053CC[ebx*4] ; switch jump
.text:004053CC ; ---------------------------------------------------------------------------
.text:004053D3                 align 4
.text:004053D4 jpt_4053CC      dd offset def_4053CC    ; DATA XREF: .text:004053CC↑r
.text:004053D4                 dd offset loc_4053F0    ; jump table for switch statement
.text:004053D4                 dd offset loc_405440
.text:004053D4                 dd offset loc_405456
.text:004053D4                 dd offset loc_405463
.text:004053D4                 dd offset loc_405470
.text:004053EC                 align 10h
.text:004053F0
.text:004053F0 loc_4053F0:                             ; CODE XREF: .text:004053CC↑j
.text:004053F0                                         ; DATA XREF: .text:jpt_4053CC↑o
.text:004053F0                 mov     [esp+8], esi    ; jumptable 004053CC case 1
.text:004053F4                 mov     [esp+4], edi
.text:004053F8                 nop
.text:004053F9                 lea     esi, [esi+0]
.text:00405400
.text:00405400 loc_405400:                             ; CODE XREF: .text:00405454↓j
.text:00405400                 mov     [esp], ebp
.text:00405403                 call    strncpy
.text:00405408                 mov     [esp], eax
.text:0040540B                 call    strlen
.text:00405410
.text:00405410 loc_405410:                             ; CODE XREF: .text:00405438↓j
.text:00405410                 mov     ebx, [esp+141Ch]
.text:00405417                 mov     esi, [esp+1420h]
.text:0040541E                 mov     edi, [esp+1424h]
.text:00405425                 mov     ebp, [esp+1428h]
.text:0040542C                 add     esp, 142Ch
.text:00405432                 retn
.text:00405433 ; ---------------------------------------------------------------------------
.text:00405433
.text:00405433 def_4053CC:                             ; CODE XREF: .text:004053CA↑j
.text:00405433                                         ; .text:004053CC↑j
.text:00405433                                         ; DATA XREF: ...
.text:00405433                 mov     eax, 0FFFFFFFFh ; jumptable 004053CC default case, case 0
.text:00405438                 jmp     short loc_405410
.text:00405438 ; ---------------------------------------------------------------------------
.text:0040543A                 align 10h
.text:00405440
.text:00405440 loc_405440:                             ; CODE XREF: .text:004053CC↑j
.text:00405440                                         ; DATA XREF: .text:jpt_4053CC↑o
.text:00405440                 mov     [esp+8], esi    ; jumptable 004053CC case 2
.text:00405444                 lea     eax, [esp+410h]
.text:0040544B                 nop
.text:0040544C                 lea     esi, [esi+0]
.text:00405450
.text:00405450 loc_405450:                             ; CODE XREF: .text:00405461↓j
.text:00405450                                         ; .text:0040546E↓j ...
.text:00405450                 mov     [esp+4], eax
.text:00405454                 jmp     short loc_405400
.text:00405456 ; ---------------------------------------------------------------------------
.text:00405456
.text:00405456 loc_405456:                             ; CODE XREF: .text:004053CC↑j
.text:00405456                                         ; DATA XREF: .text:jpt_4053CC↑o
.text:00405456                 mov     [esp+8], esi    ; jumptable 004053CC case 3
.text:0040545A                 lea     eax, [esp+810h]
.text:00405461                 jmp     short loc_405450
.text:00405463 ; ---------------------------------------------------------------------------
.text:00405463
.text:00405463 loc_405463:                             ; CODE XREF: .text:004053CC↑j
.text:00405463                                         ; DATA XREF: .text:jpt_4053CC↑o
.text:00405463                 mov     [esp+8], esi    ; jumptable 004053CC case 4
.text:00405467                 lea     eax, [esp+0C10h]
.text:0040546E                 jmp     short loc_405450
.text:00405470 ; ---------------------------------------------------------------------------
.text:00405470
.text:00405470 loc_405470:                             ; CODE XREF: .text:004053CC↑j
.text:00405470                                         ; DATA XREF: .text:jpt_4053CC↑o
.text:00405470                 mov     [esp+8], esi    ; jumptable 004053CC case 5
.text:00405474                 lea     eax, [esp+1010h]
.text:0040547B                 jmp     short loc_405450
.text:0040547B ; ---------------------------------------------------------------------------
.text:0040547D                 align 10h
.text:00405480 ; const char Source[]
.text:00405480 Source          db 'windows32',0        ; DATA XREF: sub_4054A0+6F↓o
.text:0040548A ; const char aUnknown_0[]
.text:0040548A aUnknown_0      db 'unknown',0          ; DATA XREF: sub_4054A0+C1↓o
.text:0040548A                                         ; sub_4054A0+110↓o ...
.text:00405492 ; const char aI386Pc[]
.text:00405492 aI386Pc         db 'i386-pc',0          ; DATA XREF: sub_4054A0+DB↓o
.text:0040549A ; const char aWin32[]
.text:0040549A aWin32          db 'win32',0            ; DATA XREF: sub_4054A0+F8↓o
.text:004054A0
.text:004054A0 ; =============== S U B R O U T I N E =======================================
.text:004054A0
.text:004054A0
.text:004054A0 ; int __cdecl sub_4054A0(char *)
.text:004054A0 sub_4054A0      proc near               ; CODE XREF: sub_401800+4CD↑p
.text:004054A0                                         ; sub_4051F0+BD↑p ...
.text:004054A0
.text:004054A0 Destination     = dword ptr -41Ch
.text:004054A0 Source          = dword ptr -418h
.text:004054A0 Count           = dword ptr -414h
.text:004054A0 var_40C         = byte ptr -40Ch
.text:004054A0 arg_0           = dword ptr  4
.text:004054A0
.text:004054A0                 push    edi
.text:004054A1                 push    esi
.text:004054A2                 push    ebx
.text:004054A3                 sub     esp, 410h
.text:004054A9                 mov     esi, [esp+41Ch+arg_0]
.text:004054B0                 test    esi, esi
.text:004054B2                 jz      loc_405613
.text:004054B8                 call    _errno
.text:004054BD                 lea     edx, [esi+400h]
.text:004054C3                 mov     ebx, [eax]
.text:004054C5                 mov     [esp+41Ch+Source], 400h ; int
.text:004054CD                 mov     [esp+41Ch+Destination], edx ; char *
.text:004054D0                 call    sub_4067E0
.text:004054D5                 test    eax, eax
.text:004054D7                 js      loc_4055E0
.text:004054DD
.text:004054DD loc_4054DD:                             ; CODE XREF: sub_4054A0+15B↓j
.text:004054DD                 mov     [esp+41Ch+Destination], esi ; Destination
.text:004054E0                 lea     edi, [esi+0C00h]
.text:004054E6                 lea     ebx, [esi+800h]
.text:004054EC                 mov     [esp+41Ch+Count], edi ; char *
.text:004054F0                 mov     [esp+41Ch+Source], ebx ; char *
.text:004054F4                 call    sub_405E80
.text:004054F9                 test    eax, eax
.text:004054FB                 jz      loc_405590
.text:00405501
.text:00405501 loc_405501:                             ; CODE XREF: sub_4054A0+138↓j
.text:00405501                 mov     [esp+41Ch+Count], 400h ; Count
.text:00405509                 lea     ebx, [esi+1000h]
.text:0040550F                 mov     [esp+41Ch+Source], offset Source ; "windows32"
.text:00405517                 mov     [esp+41Ch+Destination], esi ; Destination
.text:0040551A                 call    strncpy
.text:0040551F                 mov     [esp+41Ch+Destination], ebx
.text:00405522                 lea     edx, [esp+41Ch+var_40C]
.text:00405526                 mov     [esp+41Ch+Source], edx
.text:0040552A                 call    sub_4056E0
.text:0040552F                 test    eax, eax
.text:00405531                 jz      short loc_405573
.text:00405533
.text:00405533 loc_405533:                             ; CODE XREF: sub_4054A0+EB↓j
.text:00405533                 mov     [esp+41Ch+Source], 400h ; int
.text:0040553B                 lea     ebx, [esi+1400h]
.text:00405541                 mov     [esp+41Ch+Destination], ebx ; LPSTR
.text:00405544                 call    sub_405B10
.text:00405549                 test    eax, eax
.text:0040554B                 js      short loc_405559
.text:0040554D
.text:0040554D loc_40554D:                             ; CODE XREF: sub_4054A0+D1↓j
.text:0040554D                 xor     eax, eax
.text:0040554F
.text:0040554F loc_40554F:                             ; CODE XREF: sub_4054A0+165↓j
.text:0040554F                 add     esp, 410h
.text:00405555                 pop     ebx
.text:00405556                 pop     esi
.text:00405557                 pop     edi
.text:00405558                 retn
.text:00405559 ; ---------------------------------------------------------------------------
.text:00405559
.text:00405559 loc_405559:                             ; CODE XREF: sub_4054A0+AB↑j
.text:00405559                 mov     [esp+41Ch+Count], 400h ; Count
.text:00405561                 mov     [esp+41Ch+Source], offset aUnknown_0 ; "unknown"
.text:00405569                 mov     [esp+41Ch+Destination], ebx ; Destination
.text:0040556C                 call    strncpy
.text:00405571                 jmp     short loc_40554D
.text:00405573 ; ---------------------------------------------------------------------------
.text:00405573
.text:00405573 loc_405573:                             ; CODE XREF: sub_4054A0+91↑j
.text:00405573                 mov     [esp+41Ch+Count], 400h ; Count
.text:0040557B                 mov     [esp+41Ch+Source], offset aI386Pc ; "i386-pc"
.text:00405583                 mov     [esp+41Ch+Destination], ebx ; Destination
.text:00405586                 call    strncpy
.text:0040558B                 jmp     short loc_405533
.text:0040558B ; ---------------------------------------------------------------------------
.text:0040558D                 align 10h
.text:00405590
.text:00405590 loc_405590:                             ; CODE XREF: sub_4054A0+5B↑j
.text:00405590                 mov     [esp+41Ch+Count], 400h ; Count
.text:00405598                 mov     [esp+41Ch+Source], offset aWin32 ; "win32"
.text:004055A0                 mov     [esp+41Ch+Destination], esi ; Destination
.text:004055A3                 call    strncpy
.text:004055A8                 mov     [esp+41Ch+Count], 400h ; Count
.text:004055B0                 mov     [esp+41Ch+Source], offset aUnknown_0 ; "unknown"
.text:004055B8                 mov     [esp+41Ch+Destination], ebx ; Destination
.text:004055BB                 call    strncpy
.text:004055C0                 mov     [esp+41Ch+Count], 400h ; Count
.text:004055C8                 mov     [esp+41Ch+Source], offset aUnknown_0 ; "unknown"
.text:004055D0                 mov     [esp+41Ch+Destination], edi ; Destination
.text:004055D3                 call    strncpy
.text:004055D8                 jmp     loc_405501
.text:004055D8 ; ---------------------------------------------------------------------------
.text:004055DD                 align 10h
.text:004055E0
.text:004055E0 loc_4055E0:                             ; CODE XREF: sub_4054A0+37↑j
.text:004055E0                 call    _errno
.text:004055E5                 cmp     dword ptr [eax], 28h ; '('
.text:004055E8                 jz      short loc_40560A
.text:004055EA                 call    _errno
.text:004055EF                 cmp     dword ptr [eax], 26h ; '&'
.text:004055F2                 jnz     short loc_405600
.text:004055F4
.text:004055F4 loc_4055F4:                             ; CODE XREF: sub_4054A0+171↓j
.text:004055F4                 call    _errno
.text:004055F9                 mov     [eax], ebx
.text:004055FB                 jmp     loc_4054DD
.text:00405600 ; ---------------------------------------------------------------------------
.text:00405600
.text:00405600 loc_405600:                             ; CODE XREF: sub_4054A0+152↑j
.text:00405600                                         ; sub_4054A0+17E↓j
.text:00405600                 mov     eax, 0FFFFFFFFh
.text:00405605                 jmp     loc_40554F
.text:0040560A ; ---------------------------------------------------------------------------
.text:0040560A
.text:0040560A loc_40560A:                             ; CODE XREF: sub_4054A0+148↑j
.text:0040560A                 mov     byte ptr [esi+400h], 0
.text:00405611                 jmp     short loc_4055F4
.text:00405613 ; ---------------------------------------------------------------------------
.text:00405613
.text:00405613 loc_405613:                             ; CODE XREF: sub_4054A0+12↑j
.text:00405613                 call    _errno
.text:00405618                 mov     dword ptr [eax], 16h
.text:0040561E                 jmp     short loc_405600
.text:0040561E sub_4054A0      endp
.text:0040561E
.text:00405620
.text:00405620 ; =============== S U B R O U T I N E =======================================
.text:00405620
.text:00405620
.text:00405620 sub_405620      proc near               ; CODE XREF: sub_4051F0+179↑p
.text:00405620                 sub     esp, 0Ch
.text:00405623                 call    _errno
.text:00405628                 mov     dword ptr [eax], 28h ; '('
.text:0040562E                 mov     eax, 0FFFFFFFFh
.text:00405633                 add     esp, 0Ch
.text:00405636                 retn
.text:00405636 sub_405620      endp
.text:00405636
.text:00405636 ; ---------------------------------------------------------------------------
.text:00405637                 align 10h
.text:00405640 aCyrixinstead   db 'CyrixInstead',0     ; DATA XREF: .data:Str2↓o
.text:0040564D aCentaurhauls   db 'CentaurHauls',0     ; DATA XREF: .data:off_408054↓o
.text:0040565A aRiseriserise   db 'RiseRiseRise',0     ; DATA XREF: .data:off_408058↓o
.text:00405667 aGenuineintel   db 'GenuineIntel',0     ; DATA XREF: .data:off_40805C↓o
.text:00405674 aAuthenticamd   db 'AuthenticAMD',0     ; DATA XREF: .data:off_408060↓o
.text:00405681 aGenuinetmx86   db 'GenuineTMx86',0     ; DATA XREF: .data:off_408064↓o
.text:0040568E aGeodeByNsc     db 'Geode by NSC',0     ; DATA XREF: .data:off_408068↓o
.text:0040569B aUmcUmcUmc      db 'UMC UMC UMC ',0     ; DATA XREF: .data:off_40806C↓o
.text:004056A8 aAmdIsbetter    db 'AMD ISBETTER',0     ; DATA XREF: .data:off_408070↓o
.text:004056B5 aDei            db 'DEI         ',0     ; DATA XREF: .data:off_408074↓o
.text:004056C2 aNexgenerationa db 'NexGenerationAMD',0 ; DATA XREF: .data:off_408078↓o
.text:004056D3 aNexgendriven   db 'NexGenDriven',0     ; DATA XREF: .data:off_40807C↓o
.text:004056E0
.text:004056E0 ; =============== S U B R O U T I N E =======================================
.text:004056E0
.text:004056E0
.text:004056E0 sub_4056E0      proc near               ; CODE XREF: sub_4051F0+6D↑p
.text:004056E0                                         ; sub_4054A0+8A↑p
.text:004056E0
.text:004056E0 lpSystemInfo    = dword ptr -5Ch
.text:004056E0 Str2            = dword ptr -58h
.text:004056E0 Str1            = byte ptr -4Ch
.text:004056E0 var_48          = dword ptr -48h
.text:004056E0 var_44          = dword ptr -44h
.text:004056E0 var_40          = byte ptr -40h
.text:004056E0 SystemInfo      = _SYSTEM_INFO ptr -3Ch
.text:004056E0 arg_0           = dword ptr  4
.text:004056E0 arg_4           = dword ptr  8
.text:004056E0
.text:004056E0                 push    edi
.text:004056E1                 xor     eax, eax
.text:004056E3                 mov     ecx, 9
.text:004056E8                 push    esi
.text:004056E9                 push    ebx
.text:004056EA                 sub     esp, 50h
.text:004056ED                 lea     edi, [esp+5Ch+SystemInfo]
.text:004056F1                 cld
.text:004056F2                 mov     ebx, [esp+5Ch+arg_0]
.text:004056F6                 lea     edx, [esp+5Ch+SystemInfo]
.text:004056FA                 mov     esi, [esp+5Ch+arg_4]
.text:004056FE                 rep stosd
.text:00405700                 mov     [esp+5Ch+lpSystemInfo], edx ; lpSystemInfo
.text:00405703                 call    GetSystemInfo
.text:00405708                 sub     esp, 4
.text:0040570B                 mov     edx, dword ptr [esp+5Ch+SystemInfo.anonymous_0]
.text:0040570F                 movzx   ecx, [esp+5Ch+SystemInfo.wProcessorLevel]
.text:00405714                 movzx   eax, dx
.text:00405717                 cmp     eax, 5
.text:0040571A                 jz      loc_405AC0
.text:00405720                 cmp     eax, 5
.text:00405723                 jg      loc_405A38
.text:00405729                 cmp     eax, 2
.text:0040572C                 jz      loc_405A27
.text:00405732                 cmp     eax, 2
.text:00405735                 jg      loc_405A00
.text:0040573B                 test    eax, eax
.text:0040573D                 jz      loc_4059E9
.text:00405743                 dec     eax
.text:00405744                 jz      loc_4059D7
.text:0040574A                 lea     esi, [esi+0]
.text:00405750
.text:00405750 loc_405750:                             ; CODE XREF: sub_4056E0+328↓j
.text:00405750                                         ; sub_4056E0+36A↓j ...
.text:00405750                 mov     dword ptr [ebx], 6E6B6E75h
.text:00405756                 mov     dword ptr [ebx+4], 6E776Fh
.text:0040575D                 lea     esi, [esi+0]
.text:00405760
.text:00405760 loc_405760:                             ; CODE XREF: sub_4056E0+304↓j
.text:00405760                                         ; sub_4056E0+316↓j ...
.text:00405760                 test    dx, dx
.text:00405763                 jnz     short loc_4057C7
.text:00405765                 lea     eax, [ecx-3]    ; switch 13 cases
.text:00405768                 cmp     eax, 0Ch
.text:0040576B                 ja      def_405771      ; jumptable 00405771 default case, cases 8-14
.text:00405771                 jmp     ds:jpt_405771[eax*4] ; switch jump
.text:00405771 ; ---------------------------------------------------------------------------
.text:00405778 jpt_405771      dd offset loc_4057AC    ; DATA XREF: sub_4056E0+91↑r
.text:00405778                 dd offset loc_4059A0    ; jump table for switch statement
.text:00405778                 dd offset loc_4059AB
.text:00405778                 dd offset loc_4059B6
.text:00405778                 dd offset loc_4059CC
.text:00405778                 dd offset def_405771
.text:00405778                 dd offset def_405771
.text:00405778                 dd offset def_405771
.text:00405778                 dd offset def_405771
.text:00405778                 dd offset def_405771
.text:00405778                 dd offset def_405771
.text:00405778                 dd offset def_405771
.text:00405778                 dd offset loc_4059CC
.text:004057AC ; ---------------------------------------------------------------------------
.text:004057AC
.text:004057AC loc_4057AC:                             ; CODE XREF: sub_4056E0+91↑j
.text:004057AC                                         ; DATA XREF: sub_4056E0:jpt_405771↑o
.text:004057AC                 mov     dword ptr [ebx], 36383369h ; jumptable 00405771 case 3
.text:004057B2                 lea     esi, [esi+0]
.text:004057B9                 lea     edi, [edi+0]
.text:004057C0
.text:004057C0 loc_4057C0:                             ; CODE XREF: sub_4056E0+2C6↓j
.text:004057C0                                         ; sub_4056E0+2D1↓j ...
.text:004057C0                 mov     dword ptr [ebx+4], 63702Dh
.text:004057C7
.text:004057C7 loc_4057C7:                             ; CODE XREF: sub_4056E0+83↑j
.text:004057C7                 mov     [esp+5Ch+var_40], 0
.text:004057CC                 xor     eax, eax
.text:004057CE                 lea     edi, [esp+5Ch+Str1]
.text:004057D2                 cpuid
.text:004057D4                 mov     [esp+5Ch+var_48], edx
.text:004057D8                 mov     edx, Str2
.text:004057DE                 mov     ds:dword_4092B0, eax
.text:004057E3                 mov     dword ptr [esp+5Ch+Str1], ebx
.text:004057E7                 mov     [esp+5Ch+var_44], ecx
.text:004057EB                 mov     [esp+5Ch+Str2], edx ; Str2
.text:004057EF                 mov     [esp+5Ch+lpSystemInfo], edi ; Str1
.text:004057F2                 call    strcmp
.text:004057F7                 test    eax, eax
.text:004057F9                 jnz     short loc_405813
.text:004057FB                 mov     dword ptr [esi], 69727943h
.text:00405801                 mov     word ptr [esi+4], 78h ; 'x'
.text:00405807
.text:00405807 loc_405807:                             ; CODE XREF: sub_4056E0+156↓j
.text:00405807                                         ; sub_4056E0+178↓j ...
.text:00405807                 add     esp, 50h
.text:0040580A                 mov     eax, 1
.text:0040580F                 pop     ebx
.text:00405810                 pop     esi
.text:00405811                 pop     edi
.text:00405812                 retn
.text:00405813 ; ---------------------------------------------------------------------------
.text:00405813
.text:00405813 loc_405813:                             ; CODE XREF: sub_4056E0+119↑j
.text:00405813                 mov     [esp+5Ch+lpSystemInfo], edi ; Str1
.text:00405816                 mov     ecx, off_408054 ; "CentaurHauls"
.text:0040581C                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00405820                 call    strcmp
.text:00405825                 test    eax, eax
.text:00405827                 jnz     short loc_405838
.text:00405829                 mov     dword ptr [esi], 746E6543h
.text:0040582F                 mov     dword ptr [esi+4], 727561h
.text:00405836                 jmp     short loc_405807
.text:00405838 ; ---------------------------------------------------------------------------
.text:00405838
.text:00405838 loc_405838:                             ; CODE XREF: sub_4056E0+147↑j
.text:00405838                 mov     [esp+5Ch+lpSystemInfo], edi ; Str1
.text:0040583B                 mov     ebx, off_408058 ; "RiseRiseRise"
.text:00405841                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00405845                 call    strcmp
.text:0040584A                 test    eax, eax
.text:0040584C                 jnz     short loc_40585A
.text:0040584E                 mov     dword ptr [esi], 65736952h
.text:00405854                 mov     byte ptr [esi+4], 0
.text:00405858                 jmp     short loc_405807
.text:0040585A ; ---------------------------------------------------------------------------
.text:0040585A
.text:0040585A loc_40585A:                             ; CODE XREF: sub_4056E0+16C↑j
.text:0040585A                 mov     [esp+5Ch+lpSystemInfo], edi ; Str1
.text:0040585D                 mov     edx, off_40805C ; "GenuineIntel"
.text:00405863                 mov     [esp+5Ch+Str2], edx ; Str2
.text:00405867                 call    strcmp
.text:0040586C                 test    eax, eax
.text:0040586E                 jnz     short loc_40587E
.text:00405870                 mov     dword ptr [esi], 65746E49h
.text:00405876                 mov     word ptr [esi+4], 6Ch ; 'l'
.text:0040587C                 jmp     short loc_405807
.text:0040587E ; ---------------------------------------------------------------------------
.text:0040587E
.text:0040587E loc_40587E:                             ; CODE XREF: sub_4056E0+18E↑j
.text:0040587E                 mov     [esp+5Ch+lpSystemInfo], edi ; Str1
.text:00405881                 mov     ecx, off_408060 ; "AuthenticAMD"
.text:00405887                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:0040588B                 call    strcmp
.text:00405890                 test    eax, eax
.text:00405892                 jnz     short loc_40589F
.text:00405894
.text:00405894 loc_405894:                             ; CODE XREF: sub_4056E0+249↓j
.text:00405894                                         ; sub_4056E0+263↓j ...
.text:00405894                 mov     dword ptr [esi], 444D41h
.text:0040589A                 jmp     loc_405807
.text:0040589F ; ---------------------------------------------------------------------------
.text:0040589F
.text:0040589F loc_40589F:                             ; CODE XREF: sub_4056E0+1B2↑j
.text:0040589F                 mov     [esp+5Ch+lpSystemInfo], edi ; Str1
.text:004058A2                 mov     ebx, off_408064 ; "GenuineTMx86"
.text:004058A8                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:004058AC                 call    strcmp
.text:004058B1                 test    eax, eax
.text:004058B3                 jnz     short loc_4058CD
.text:004058B5                 mov     dword ptr [esi], 6E617254h
.text:004058BB                 mov     dword ptr [esi+4], 74656D73h
.text:004058C2                 mov     word ptr [esi+8], 61h ; 'a'
.text:004058C8                 jmp     loc_405807
.text:004058CD ; ---------------------------------------------------------------------------
.text:004058CD
.text:004058CD loc_4058CD:                             ; CODE XREF: sub_4056E0+1D3↑j
.text:004058CD                 mov     [esp+5Ch+lpSystemInfo], edi ; Str1
.text:004058D0                 mov     edx, off_408068 ; "Geode by NSC"
.text:004058D6                 mov     [esp+5Ch+Str2], edx ; Str2
.text:004058DA                 call    strcmp
.text:004058DF                 test    eax, eax
.text:004058E1                 jnz     short loc_4058F4
.text:004058E3                 mov     dword ptr [esi], 646F6547h
.text:004058E9                 mov     word ptr [esi+4], 65h ; 'e'
.text:004058EF                 jmp     loc_405807
.text:004058F4 ; ---------------------------------------------------------------------------
.text:004058F4
.text:004058F4 loc_4058F4:                             ; CODE XREF: sub_4056E0+201↑j
.text:004058F4                 mov     [esp+5Ch+lpSystemInfo], edi ; Str1
.text:004058F7                 mov     ecx, off_40806C ; "UMC UMC UMC "
.text:004058FD                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00405901                 call    strcmp
.text:00405906                 test    eax, eax
.text:00405908                 jnz     short loc_405915
.text:0040590A                 mov     dword ptr [esi], 434D55h
.text:00405910                 jmp     loc_405807
.text:00405915 ; ---------------------------------------------------------------------------
.text:00405915
.text:00405915 loc_405915:                             ; CODE XREF: sub_4056E0+228↑j
.text:00405915                 mov     [esp+5Ch+lpSystemInfo], edi ; Str1
.text:00405918                 mov     ebx, off_408070 ; "AMD ISBETTER"
.text:0040591E                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00405922                 call    strcmp
.text:00405927                 test    eax, eax
.text:00405929                 jz      loc_405894
.text:0040592F                 mov     [esp+5Ch+lpSystemInfo], edi ; Str1
.text:00405932                 mov     edx, off_408074 ; "DEI         "
.text:00405938                 mov     [esp+5Ch+Str2], edx ; Str2
.text:0040593C                 call    strcmp
.text:00405941                 test    eax, eax
.text:00405943                 jz      loc_405894
.text:00405949                 mov     [esp+5Ch+lpSystemInfo], edi ; Str1
.text:0040594C                 mov     ecx, off_408078 ; "NexGenerationAMD"
.text:00405952                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00405956                 call    strcmp
.text:0040595B                 test    eax, eax
.text:0040595D                 jz      loc_405894
.text:00405963                 mov     [esp+5Ch+lpSystemInfo], edi ; Str1
.text:00405966                 mov     ebx, off_40807C ; "NexGenDriven"
.text:0040596C                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00405970                 call    strcmp
.text:00405975                 test    eax, eax
.text:00405977                 jnz     short loc_40598E
.text:00405979                 mov     dword ptr [esi], 4778654Eh
.text:0040597F                 mov     word ptr [esi+4], 6E65h
.text:00405985                 mov     byte ptr [esi+6], 0
.text:00405989                 jmp     loc_405807
.text:0040598E ; ---------------------------------------------------------------------------
.text:0040598E
.text:0040598E loc_40598E:                             ; CODE XREF: sub_4056E0+297↑j
.text:0040598E                 mov     dword ptr [esi], 6E6B6E55h
.text:00405994                 mov     dword ptr [esi+4], 6E776Fh
.text:0040599B                 jmp     loc_405807
.text:004059A0 ; ---------------------------------------------------------------------------
.text:004059A0
.text:004059A0 loc_4059A0:                             ; CODE XREF: sub_4056E0+91↑j
.text:004059A0                                         ; DATA XREF: sub_4056E0:jpt_405771↑o
.text:004059A0                 mov     dword ptr [ebx], 36383469h ; jumptable 00405771 case 4
.text:004059A6                 jmp     loc_4057C0
.text:004059AB ; ---------------------------------------------------------------------------
.text:004059AB
.text:004059AB loc_4059AB:                             ; CODE XREF: sub_4056E0+91↑j
.text:004059AB                                         ; DATA XREF: sub_4056E0:jpt_405771↑o
.text:004059AB                 mov     dword ptr [ebx], 36383569h ; jumptable 00405771 case 5
.text:004059B1                 jmp     loc_4057C0
.text:004059B6 ; ---------------------------------------------------------------------------
.text:004059B6
.text:004059B6 loc_4059B6:                             ; CODE XREF: sub_4056E0+91↑j
.text:004059B6                                         ; DATA XREF: sub_4056E0:jpt_405771↑o
.text:004059B6                 mov     dword ptr [ebx], 36383669h ; jumptable 00405771 case 6
.text:004059BC                 jmp     loc_4057C0
.text:004059C1 ; ---------------------------------------------------------------------------
.text:004059C1
.text:004059C1 def_405771:                             ; CODE XREF: sub_4056E0+8B↑j
.text:004059C1                                         ; sub_4056E0+91↑j
.text:004059C1                                         ; DATA XREF: ...
.text:004059C1                 mov     dword ptr [ebx], 36387869h ; jumptable 00405771 default case, cases 8-14
.text:004059C7                 jmp     loc_4057C0
.text:004059CC ; ---------------------------------------------------------------------------
.text:004059CC
.text:004059CC loc_4059CC:                             ; CODE XREF: sub_4056E0+91↑j
.text:004059CC                                         ; DATA XREF: sub_4056E0:jpt_405771↑o
.text:004059CC                 mov     dword ptr [ebx], 36383769h ; jumptable 00405771 cases 7,15
.text:004059D2                 jmp     loc_4057C0
.text:004059D7 ; ---------------------------------------------------------------------------
.text:004059D7
.text:004059D7 loc_4059D7:                             ; CODE XREF: sub_4056E0+64↑j
.text:004059D7                 mov     dword ptr [ebx], 7370696Dh
.text:004059DD                 lea     esi, [esi+0]
.text:004059E0
.text:004059E0 loc_4059E0:                             ; CODE XREF: sub_4056E0+388↓j
.text:004059E0                                         ; sub_4056E0+3D6↓j
.text:004059E0                 mov     byte ptr [ebx+4], 0
.text:004059E4                 jmp     loc_405760
.text:004059E9 ; ---------------------------------------------------------------------------
.text:004059E9
.text:004059E9 loc_4059E9:                             ; CODE XREF: sub_4056E0+5D↑j
.text:004059E9                 mov     dword ptr [ebx], 36387869h
.text:004059EF                 mov     dword ptr [ebx+4], 63702Dh
.text:004059F6                 jmp     loc_405760
.text:004059F6 ; ---------------------------------------------------------------------------
.text:004059FB                 align 10h
.text:00405A00
.text:00405A00 loc_405A00:                             ; CODE XREF: sub_4056E0+55↑j
.text:00405A00                 cmp     eax, 3
.text:00405A03                 jz      short loc_405A1C
.text:00405A05                 cmp     eax, 4
.text:00405A08                 jnz     loc_405750
.text:00405A0E                 mov     word ptr [ebx], 6873h
.text:00405A13                 mov     byte ptr [ebx+2], 0
.text:00405A17                 jmp     loc_405760
.text:00405A1C ; ---------------------------------------------------------------------------
.text:00405A1C
.text:00405A1C loc_405A1C:                             ; CODE XREF: sub_4056E0+323↑j
.text:00405A1C                 mov     dword ptr [ebx], 637070h
.text:00405A22                 jmp     loc_405760
.text:00405A27 ; ---------------------------------------------------------------------------
.text:00405A27
.text:00405A27 loc_405A27:                             ; CODE XREF: sub_4056E0+4C↑j
.text:00405A27                 mov     dword ptr [ebx], 68706C61h
.text:00405A2D                 mov     word ptr [ebx+4], 61h ; 'a'
.text:00405A33                 jmp     loc_405760
.text:00405A38 ; ---------------------------------------------------------------------------
.text:00405A38
.text:00405A38 loc_405A38:                             ; CODE XREF: sub_4056E0+43↑j
.text:00405A38                 cmp     eax, 8
.text:00405A3B                 jz      short loc_405AB0
.text:00405A3D                 cmp     eax, 8
.text:00405A40                 jg      short loc_405A70
.text:00405A42                 cmp     eax, 6
.text:00405A45                 jz      short loc_405A62
.text:00405A47                 cmp     eax, 7
.text:00405A4A                 jnz     loc_405750
.text:00405A50                 mov     dword ptr [ebx], 68706C61h
.text:00405A56                 mov     dword ptr [ebx+4], 343661h
.text:00405A5D                 jmp     loc_405760
.text:00405A62 ; ---------------------------------------------------------------------------
.text:00405A62
.text:00405A62 loc_405A62:                             ; CODE XREF: sub_4056E0+365↑j
.text:00405A62                 mov     dword ptr [ebx], 34364149h
.text:00405A68                 jmp     loc_4059E0
.text:00405A68 ; ---------------------------------------------------------------------------
.text:00405A6D                 align 10h
.text:00405A70
.text:00405A70 loc_405A70:                             ; CODE XREF: sub_4056E0+360↑j
.text:00405A70                 cmp     eax, 0Ah
.text:00405A73                 jz      short loc_405A8F
.text:00405A75                 cmp     eax, 0Ah
.text:00405A78                 jge     loc_405750
.text:00405A7E                 mov     dword ptr [ebx], 36646D61h
.text:00405A84                 mov     word ptr [ebx+4], 34h ; '4'
.text:00405A8A                 jmp     loc_405760
.text:00405A8F ; ---------------------------------------------------------------------------
.text:00405A8F
.text:00405A8F loc_405A8F:                             ; CODE XREF: sub_4056E0+393↑j
.text:00405A8F                 mov     dword ptr [ebx], 32334149h
.text:00405A95                 mov     dword ptr [ebx+4], 206E6F20h
.text:00405A9C                 mov     dword ptr [ebx+8], 366E6957h
.text:00405AA3                 mov     word ptr [ebx+0Ch], 34h ; '4'
.text:00405AA9                 jmp     loc_405760
.text:00405AA9 ; ---------------------------------------------------------------------------
.text:00405AAE                 align 10h
.text:00405AB0
.text:00405AB0 loc_405AB0:                             ; CODE XREF: sub_4056E0+35B↑j
.text:00405AB0                 mov     dword ptr [ebx], 6C69736Dh
.text:00405AB6                 jmp     loc_4059E0
.text:00405AB6 ; ---------------------------------------------------------------------------
.text:00405ABB                 align 10h
.text:00405AC0
.text:00405AC0 loc_405AC0:                             ; CODE XREF: sub_4056E0+3A↑j
.text:00405AC0                 mov     dword ptr [ebx], 6D7261h
.text:00405AC6                 jmp     loc_405760
.text:00405AC6 sub_4056E0      endp
.text:00405AC6
.text:00405AC6 ; ---------------------------------------------------------------------------
.text:00405ACB                 align 10h
.text:00405AD0                 sub     esp, 10h
.text:00405AD3                 xor     eax, eax
.text:00405AD5                 mov     [esp+8], edi
.text:00405AD9                 mov     edi, [esp+14h]
.text:00405ADD                 mov     [esp], ebx
.text:00405AE0                 mov     [esp+4], esi
.text:00405AE4                 cpuid
.text:00405AE6                 mov     [esp+0Ch], ebp
.text:00405AEA                 mov     esi, edx
.text:00405AEC                 mov     ds:dword_4092B0, eax
.text:00405AF1                 mov     [edi], ebx
.text:00405AF3                 mov     [edi+4], esi
.text:00405AF6                 mov     [edi+8], ecx
.text:00405AF9                 mov     byte ptr [edi+0Ch], 0
.text:00405AFD                 mov     ebx, [esp]
.text:00405B00                 mov     esi, [esp+4]
.text:00405B04                 mov     edi, [esp+8]
.text:00405B08                 mov     ebp, [esp+0Ch]
.text:00405B0C                 add     esp, 10h
.text:00405B0F                 retn
.text:00405B10
.text:00405B10 ; =============== S U B R O U T I N E =======================================
.text:00405B10
.text:00405B10
.text:00405B10 ; int __cdecl sub_405B10(LPSTR, int)
.text:00405B10 sub_405B10      proc near               ; CODE XREF: sub_4054A0+A4↑p
.text:00405B10
.text:00405B10 var_12C         = dword ptr -12Ch
.text:00405B10 var_128         = dword ptr -128h
.text:00405B10 arg_0           = dword ptr  4
.text:00405B10 arg_4           = dword ptr  8
.text:00405B10
.text:00405B10                 sub     esp, 12Ch
.text:00405B16                 mov     edx, [esp+12Ch+arg_4]
.text:00405B1D                 mov     [esp+12Ch+var_128], edx ; int
.text:00405B21                 mov     edx, [esp+12Ch+arg_0]
.text:00405B28                 mov     [esp+12Ch+var_12C], edx ; LPSTR
.text:00405B2B                 call    sub_405B70
.text:00405B30                 xor     eax, eax
.text:00405B32                 add     esp, 12Ch
.text:00405B38                 retn
.text:00405B38 sub_405B10      endp
.text:00405B38
.text:00405B38 ; ---------------------------------------------------------------------------
.text:00405B39 ; const CHAR LibFileName[]
.text:00405B39 LibFileName     db 'netapi32.dll',0     ; DATA XREF: sub_405B70+8↓o
.text:00405B46 ; const CHAR ProcName[]
.text:00405B46 ProcName        db 'NetApiBufferFree',0 ; DATA XREF: sub_405B70+29↓o
.text:00405B57 ; const CHAR aNetwkstagetinf[]
.text:00405B57 aNetwkstagetinf db 'NetWkstaGetInfo',0  ; DATA XREF: sub_405B70+3E↓o
.text:00405B67                 align 10h
.text:00405B70
.text:00405B70 ; =============== S U B R O U T I N E =======================================
.text:00405B70
.text:00405B70
.text:00405B70 ; int __cdecl sub_405B70(LPSTR, int)
.text:00405B70 sub_405B70      proc near               ; CODE XREF: sub_405B10+1B↑p
.text:00405B70
.text:00405B70 lpLibFileName   = dword ptr -3Ch
.text:00405B70 lpProcName      = dword ptr -38h
.text:00405B70 lpWideCharStr   = dword ptr -34h
.text:00405B70 cchWideChar     = dword ptr -30h
.text:00405B70 lpMultiByteStr  = dword ptr -2Ch
.text:00405B70 cbMultiByte     = dword ptr -28h
.text:00405B70 lpDefaultChar   = dword ptr -24h
.text:00405B70 lpUsedDefaultChar= dword ptr -20h
.text:00405B70 var_10          = dword ptr -10h
.text:00405B70 arg_0           = dword ptr  4
.text:00405B70 arg_4           = dword ptr  8
.text:00405B70
.text:00405B70                 push    edi
.text:00405B71                 push    esi
.text:00405B72                 push    ebx
.text:00405B73                 sub     esp, 30h
.text:00405B76                 xor     ebx, ebx
.text:00405B78                 mov     [esp+3Ch+lpLibFileName], offset LibFileName ; "netapi32.dll"
.text:00405B7F                 call    LoadLibraryA
.text:00405B84                 sub     esp, 4
.text:00405B87                 mov     esi, eax
.text:00405B89                 test    eax, eax
.text:00405B8B                 mov     [esp+3Ch+var_10], 0
.text:00405B93                 jz      loc_405C17
.text:00405B99                 mov     [esp+3Ch+lpProcName], offset ProcName ; "NetApiBufferFree"
.text:00405BA1                 mov     [esp+3Ch+lpLibFileName], eax ; hModule
.text:00405BA4                 call    GetProcAddress
.text:00405BA9                 sub     esp, 8
.text:00405BAC                 mov     edi, eax
.text:00405BAE                 mov     [esp+3Ch+lpProcName], offset aNetwkstagetinf ; "NetWkstaGetInfo"
.text:00405BB6                 mov     [esp+3Ch+lpLibFileName], esi ; hModule
.text:00405BB9                 call    GetProcAddress
.text:00405BBE                 sub     esp, 8
.text:00405BC1                 test    eax, eax
.text:00405BC3                 jz      loc_405CA4
.text:00405BC9                 test    edi, edi
.text:00405BCB                 jz      loc_405CA4
.text:00405BD1                 mov     [esp+3Ch+lpProcName], 64h ; 'd'
.text:00405BD9                 lea     ecx, [esp+3Ch+var_10]
.text:00405BDD                 mov     [esp+3Ch+lpWideCharStr], ecx
.text:00405BE1                 mov     [esp+3Ch+lpLibFileName], 0
.text:00405BE8                 call    eax
.text:00405BEA                 sub     esp, 0Ch
.text:00405BED                 mov     ebx, eax
.text:00405BEF                 test    eax, eax
.text:00405BF1                 jz      short loc_405C44
.text:00405BF3                 cmp     eax, 5
.text:00405BF6                 jz      short loc_405C37
.text:00405BF8                 cmp     eax, 7Ch ; '|'
.text:00405BFB                 jz      short loc_405C20
.text:00405BFD                 lea     esi, [esi+0]
.text:00405C00
.text:00405C00 loc_405C00:                             ; CODE XREF: sub_405B70+C5↓j
.text:00405C00                                         ; sub_405B70+12F↓j
.text:00405C00                 mov     ecx, [esp+3Ch+var_10]
.text:00405C04                 mov     [esp+3Ch+lpLibFileName], ecx
.text:00405C07                 call    edi
.text:00405C09                 sub     esp, 4
.text:00405C0C                 mov     [esp+3Ch+lpLibFileName], esi ; hLibModule
.text:00405C0F                 call    FreeLibrary
.text:00405C14                 sub     esp, 4
.text:00405C17
.text:00405C17 loc_405C17:                             ; CODE XREF: sub_405B70+23↑j
.text:00405C17                 add     esp, 30h
.text:00405C1A                 mov     eax, ebx
.text:00405C1C                 pop     ebx
.text:00405C1D                 pop     esi
.text:00405C1E                 pop     edi
.text:00405C1F                 retn
.text:00405C20 ; ---------------------------------------------------------------------------
.text:00405C20
.text:00405C20 loc_405C20:                             ; CODE XREF: sub_405B70+8B↑j
.text:00405C20                 call    _errno
.text:00405C25                 mov     dword ptr [eax], 16h
.text:00405C2B                 nop
.text:00405C2C                 lea     esi, [esi+0]
.text:00405C30
.text:00405C30 loc_405C30:                             ; CODE XREF: sub_405B70+D2↓j
.text:00405C30                                         ; sub_405B70+142↓j
.text:00405C30                 mov     ebx, 0FFFFFFFFh
.text:00405C35                 jmp     short loc_405C00
.text:00405C37 ; ---------------------------------------------------------------------------
.text:00405C37
.text:00405C37 loc_405C37:                             ; CODE XREF: sub_405B70+86↑j
.text:00405C37                 call    _errno
.text:00405C3C                 mov     dword ptr [eax], 0Dh
.text:00405C42                 jmp     short loc_405C30
.text:00405C44 ; ---------------------------------------------------------------------------
.text:00405C44
.text:00405C44 loc_405C44:                             ; CODE XREF: sub_405B70+81↑j
.text:00405C44                 mov     edx, ds:_iob
.text:00405C4A                 add     edx, 40h ; '@'
.text:00405C4D                 mov     [esp+3Ch+lpLibFileName], edx ; Stream
.text:00405C50                 call    fflush
.text:00405C55                 mov     [esp+3Ch+lpUsedDefaultChar], 0 ; lpUsedDefaultChar
.text:00405C5D                 mov     ecx, [esp+3Ch+arg_4]
.text:00405C61                 mov     edx, [esp+3Ch+arg_0]
.text:00405C65                 mov     [esp+3Ch+lpDefaultChar], 0 ; lpDefaultChar
.text:00405C6D                 mov     [esp+3Ch+cbMultiByte], ecx ; cbMultiByte
.text:00405C71                 mov     ecx, [esp+3Ch+var_10]
.text:00405C75                 mov     [esp+3Ch+lpMultiByteStr], edx ; lpMultiByteStr
.text:00405C79                 mov     [esp+3Ch+cchWideChar], 0FFFFFFFFh ; cchWideChar
.text:00405C81                 mov     edx, [ecx+8]
.text:00405C84                 mov     [esp+3Ch+lpProcName], 0 ; dwFlags
.text:00405C8C                 mov     [esp+3Ch+lpLibFileName], 0 ; CodePage
.text:00405C93                 mov     [esp+3Ch+lpWideCharStr], edx ; lpWideCharStr
.text:00405C97                 call    WideCharToMultiByte
.text:00405C9C                 sub     esp, 20h
.text:00405C9F                 jmp     loc_405C00
.text:00405CA4 ; ---------------------------------------------------------------------------
.text:00405CA4
.text:00405CA4 loc_405CA4:                             ; CODE XREF: sub_405B70+53↑j
.text:00405CA4                                         ; sub_405B70+5B↑j
.text:00405CA4                 call    sub_406AA0
.text:00405CA9                 mov     ebx, eax
.text:00405CAB                 call    _errno
.text:00405CB0                 mov     [eax], ebx
.text:00405CB2                 jmp     loc_405C30
.text:00405CB2 sub_405B70      endp
.text:00405CB2
.text:00405CB2 ; ---------------------------------------------------------------------------
.text:00405CB7                 align 10h
.text:00405CC0 ; const char aLuLuLu[]
.text:00405CC0 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: sub_405E80+5F↓o
.text:00405CCC ; const char aLu[]
.text:00405CCC aLu             db '%lu',0              ; DATA XREF: sub_405E80+6F↓o
.text:00405CD0 ; const char asc_405CD0[]
.text:00405CD0 asc_405CD0      db ' ',0                ; DATA XREF: sub_405E80:loc_405FD8↓o
.text:00405CD2                 align 10h
.text:00405CE0 ; const char aServer40Enterp[]
.text:00405CE0 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:00405CE0                                         ; DATA XREF: sub_405E80+18F↓o
.text:00405D00 aServer40       db 'Server 4.0 ',0      ; DATA XREF: sub_405E80:loc_40601D↓o
.text:00405D0C ; const char aServer[]
.text:00405D0C aServer         db ' Server',0          ; DATA XREF: sub_405E80+1C6↓o
.text:00405D0C                                         ; sub_405E80:loc_4061BE↓o
.text:00405D14 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: sub_405E80:loc_406058↓o
.text:00405D25 aDatacenterServ db ' Datacenter Server',0
.text:00405D25                                         ; DATA XREF: sub_405E80:loc_406062↓o
.text:00405D38 aStandardEditio db ' Standard Edition',0
.text:00405D38                                         ; DATA XREF: sub_405E80+20A↓o
.text:00405D4A aWebEdition     db ' Web Edition',0     ; DATA XREF: sub_405E80:loc_406094↓o
.text:00405D57 aEnterpriseEdit db ' Enterprise Edition',0
.text:00405D57                                         ; DATA XREF: sub_405E80:loc_40609E↓o
.text:00405D6B aDatacenterEdit db ' Datacenter Edition',0
.text:00405D6B                                         ; DATA XREF: sub_405E80:loc_4060A8↓o
.text:00405D7F aHomeEdition    db ' Home Edition',0    ; DATA XREF: sub_405E80+23B↓o
.text:00405D8D ; const char aProfessional[]
.text:00405D8D aProfessional   db ' Professional',0    ; DATA XREF: sub_405E80:loc_4060C5↓o
.text:00405D8D                                         ; sub_405E80:loc_4061D0↓o
.text:00405D9B                 align 10h
.text:00405DA0 ; const CHAR SubKey[]
.text:00405DA0 SubKey          db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:00405DA0                                         ; DATA XREF: sub_405E80+272↓o
.text:00405DD0 ; const CHAR ValueName[]
.text:00405DD0 ValueName       db 'ProductType',0      ; DATA XREF: sub_405E80+2B9↓o
.text:00405DDC ; const CHAR String1[]
.text:00405DDC String1         db 'WINNT',0            ; DATA XREF: sub_405E80+2F4↓o
.text:00405DE2 ; const CHAR aLanmannt[]
.text:00405DE2 aLanmannt       db 'LANMANNT',0         ; DATA XREF: sub_405E80+30B↓o
.text:00405DEB ; const CHAR aServernt[]
.text:00405DEB aServernt       db 'SERVERNT',0         ; DATA XREF: sub_405E80+322↓o
.text:00405DF4                 align 10h
.text:00405E00 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:00405E00                                         ; DATA XREF: sub_405E80+497↓o
.text:00405E23                 align 20h
.text:00405E40 dword_405E40    dd 7263694Dh, 666F736Fh, 69572074h, 776F646Eh, 694D2073h
.text:00405E40                                         ; DATA XREF: sub_405E80+4F6↓o
.text:00405E40                 dd 6E656C6Ch, 6D75696Eh, 69644520h, 6E6F6974h
.text:00405E64 word_405E64     dw 20h                  ; DATA XREF: sub_405E80+4FB↓r
.text:00405E66 ; const char aSe[4]
.text:00405E66 aSe             db ' SE',0              ; DATA XREF: sub_405E80:loc_4063E1↓o
.text:00405E6A aSp1            db ' SP1',0             ; DATA XREF: sub_405E80:loc_4063F3↓o
.text:00405E6A                                         ; sub_405E80:loc_40646D↓o
.text:00405E6F ; const char aOsr2[]
.text:00405E6F aOsr2           db ' OSR2',0            ; DATA XREF: sub_405E80:loc_40645B↓o
.text:00405E75                 align 10h
.text:00405E80
.text:00405E80 ; =============== S U B R O U T I N E =======================================
.text:00405E80
.text:00405E80
.text:00405E80 ; int __cdecl sub_405E80(char *Destination, char *, char *)
.text:00405E80 sub_405E80      proc near               ; CODE XREF: sub_4054A0+54↑p
.text:00405E80
.text:00405E80 Buffer          = dword ptr -13Ch
.text:00405E80 Format          = dword ptr -138h
.text:00405E80 ulOptions       = dword ptr -134h
.text:00405E80 samDesired      = dword ptr -130h
.text:00405E80 phkResult       = dword ptr -12Ch
.text:00405E80 lpcbData        = dword ptr -128h
.text:00405E80 cbData          = dword ptr -114h
.text:00405E80 hKey            = dword ptr -110h
.text:00405E80 Data            = byte ptr -10Ch
.text:00405E80 Destination     = dword ptr  4
.text:00405E80 arg_4           = dword ptr  8
.text:00405E80 arg_8           = dword ptr  0Ch
.text:00405E80
.text:00405E80                 push    edi
.text:00405E81                 push    esi
.text:00405E82                 push    ebx
.text:00405E83                 sub     esp, 130h
.text:00405E89                 mov     ebx, [esp+13Ch+Destination]
.text:00405E90                 call    sub_406590
.text:00405E95                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00405E9A                 cmp     eax, 1
.text:00405E9D                 jz      loc_406340
.text:00405EA3                 cmp     eax, 1
.text:00405EA6                 jb      loc_406316
.text:00405EAC                 cmp     eax, 2
.text:00405EAF                 jz      loc_405F60
.text:00405EB5                 cmp     eax, 3
.text:00405EB8                 jz      short loc_405F1F
.text:00405EBA                 lea     esi, [esi+0]
.text:00405EC0
.text:00405EC0 loc_405EC0:                             ; CODE XREF: sub_405E80+D5↓j
.text:00405EC0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00405EC6                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00405ECC
.text:00405ECC loc_405ECC:                             ; CODE XREF: sub_405E80+4DF↓j
.text:00405ECC                 mov     [esp+13Ch+phkResult], edx
.text:00405ED0                 mov     ebx, [esp+13Ch+arg_4]
.text:00405ED7                 mov     [esp+13Ch+samDesired], ecx
.text:00405EDB                 mov     [esp+13Ch+ulOptions], eax
.text:00405EDF                 mov     [esp+13Ch+Format], offset aLuLuLu ; "%lu.%lu.%lu"
.text:00405EE7                 mov     [esp+13Ch+Buffer], ebx ; Buffer
.text:00405EEA                 call    sprintf
.text:00405EEF                 mov     [esp+13Ch+Format], offset aLu ; "%lu"
.text:00405EF7                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:00405EFD                 mov     ecx, [esp+13Ch+arg_8]
.text:00405F04                 mov     [esp+13Ch+ulOptions], edi
.text:00405F08                 mov     [esp+13Ch+Buffer], ecx ; Buffer
.text:00405F0B                 call    sprintf
.text:00405F10                 mov     eax, 1
.text:00405F15
.text:00405F15 loc_405F15:                             ; CODE XREF: sub_405E80+28F↓j
.text:00405F15                                         ; sub_405E80+2DC↓j
.text:00405F15                 add     esp, 130h
.text:00405F1B                 pop     ebx
.text:00405F1C                 pop     esi
.text:00405F1D                 pop     edi
.text:00405F1E                 retn
.text:00405F1F ; ---------------------------------------------------------------------------
.text:00405F1F
.text:00405F1F loc_405F1F:                             ; CODE XREF: sub_405E80+38↑j
.text:00405F1F                 mov     dword ptr [ebx], 7263694Dh
.text:00405F25                 mov     dword ptr [ebx+4], 666F736Fh
.text:00405F2C                 mov     dword ptr [ebx+8], 69572074h
.text:00405F33                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00405F3A                 mov     dword ptr [ebx+10h], 45432073h
.text:00405F41                 mov     word ptr [ebx+14h], 20h ; ' '
.text:00405F47                 mov     esi, esi
.text:00405F49                 lea     edi, [edi+0]
.text:00405F50
.text:00405F50 loc_405F50:                             ; CODE XREF: sub_405E80+178↓j
.text:00405F50                                         ; sub_405E80+4B9↓j ...
.text:00405F50                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00405F55                 jmp     loc_405EC0
.text:00405F55 ; ---------------------------------------------------------------------------
.text:00405F5A                 align 10h
.text:00405F60
.text:00405F60 loc_405F60:                             ; CODE XREF: sub_405E80+2F↑j
.text:00405F60                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:00405F66                 cmp     edx, 3
.text:00405F69                 mov     eax, edx
.text:00405F6B                 jz      loc_4062D5
.text:00405F71
.text:00405F71 loc_405F71:                             ; CODE XREF: sub_405E80+45C↓j
.text:00405F71                 cmp     eax, 4
.text:00405F74                 jz      loc_406295
.text:00405F7A
.text:00405F7A loc_405F7A:                             ; CODE XREF: sub_405E80+41D↓j
.text:00405F7A                 cmp     eax, 4
.text:00405F7D                 ja      loc_4061E2
.text:00405F83                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00405F89                 test    ecx, ecx
.text:00405F8B                 jnz     loc_4061E2
.text:00405F91                 mov     dword ptr [ebx], 7263694Dh
.text:00405F97                 mov     dword ptr [ebx+4], 666F736Fh
.text:00405F9E                 mov     dword ptr [ebx+8], 69572074h
.text:00405FA5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00405FAC                 mov     dword ptr [ebx+10h], 544E2073h
.text:00405FB3
.text:00405FB3 loc_405FB3:                             ; CODE XREF: sub_405E80+3D5↓j
.text:00405FB3                 mov     byte ptr [ebx+14h], 0
.text:00405FB7
.text:00405FB7 loc_405FB7:                             ; CODE XREF: sub_405E80+365↓j
.text:00405FB7                                         ; sub_405E80+37C↓j ...
.text:00405FB7                 mov     esi, dword_408080
.text:00405FBD                 test    esi, esi
.text:00405FBF                 jz      loc_4060D2
.text:00405FC5                 movzx   eax, ds:byte_40936A
.text:00405FCC                 cmp     al, 1
.text:00405FCE                 jz      loc_4060B2
.text:00405FD4                 cmp     al, 3
.text:00405FD6                 jz      short loc_405FFD
.text:00405FD8
.text:00405FD8 loc_405FD8:                             ; CODE XREF: sub_405E80+19B↓j
.text:00405FD8                                         ; sub_405E80+1D6↓j ...
.text:00405FD8                 mov     [esp+13Ch+Format], offset asc_405CD0 ; " "
.text:00405FE0                 mov     [esp+13Ch+Buffer], ebx ; Destination
.text:00405FE3                 call    strcat
.text:00405FE8                 mov     [esp+13Ch+Format], offset VersionInformation.szCSDVersion ; Source
.text:00405FF0                 mov     [esp+13Ch+Buffer], ebx ; Destination
.text:00405FF3                 call    strcat
.text:00405FF8                 jmp     loc_405F50
.text:00405FFD ; ---------------------------------------------------------------------------
.text:00405FFD
.text:00405FFD loc_405FFD:                             ; CODE XREF: sub_405E80+156↑j
.text:00405FFD                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:00406004                 jz      short loc_406026
.text:00406006
.text:00406006 loc_406006:                             ; CODE XREF: sub_405E80+1B2↓j
.text:00406006                 test    byte ptr ds:word_409368, 2
.text:0040600D                 jz      short loc_40601D
.text:0040600F                 mov     [esp+13Ch+Buffer], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:00406016
.text:00406016 loc_406016:                             ; CODE XREF: sub_405E80+1A4↓j
.text:00406016                 call    printf
.text:0040601B                 jmp     short loc_405FD8
.text:0040601D ; ---------------------------------------------------------------------------
.text:0040601D
.text:0040601D loc_40601D:                             ; CODE XREF: sub_405E80+18D↑j
.text:0040601D                 mov     [esp+13Ch+Buffer], offset aServer40 ; "Server 4.0 "
.text:00406024                 jmp     short loc_406016
.text:00406026 ; ---------------------------------------------------------------------------
.text:00406026
.text:00406026 loc_406026:                             ; CODE XREF: sub_405E80+184↑j
.text:00406026                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040602B                 cmp     eax, 2
.text:0040602E                 jz      short loc_406070
.text:00406030                 test    eax, eax
.text:00406032                 jnz     short loc_406006
.text:00406034                 cmp     byte ptr ds:word_409368, 0
.text:0040603B                 js      short loc_406062
.text:0040603D                 test    byte ptr ds:word_409368, 2
.text:00406044                 jnz     short loc_406058
.text:00406046                 mov     [esp+13Ch+Format], offset aServer ; " Server"
.text:0040604E
.text:0040604E loc_40604E:                             ; CODE XREF: sub_405E80+1E0↓j
.text:0040604E                                         ; sub_405E80+1EA↓j ...
.text:0040604E                 mov     [esp+13Ch+Buffer], ebx ; Destination
.text:00406051                 call    strcat
.text:00406056                 jmp     short loc_405FD8
.text:00406058 ; ---------------------------------------------------------------------------
.text:00406058
.text:00406058 loc_406058:                             ; CODE XREF: sub_405E80+1C4↑j
.text:00406058                                         ; sub_405E80+339↓j
.text:00406058                 mov     [esp+13Ch+Format], offset aAdvancedServer ; " Advanced Server"
.text:00406060                 jmp     short loc_40604E
.text:00406062 ; ---------------------------------------------------------------------------
.text:00406062
.text:00406062 loc_406062:                             ; CODE XREF: sub_405E80+1BB↑j
.text:00406062                 mov     [esp+13Ch+Format], offset aDatacenterServ ; " Datacenter Server"
.text:0040606A                 jmp     short loc_40604E
.text:0040606A ; ---------------------------------------------------------------------------
.text:0040606C                 align 10h
.text:00406070
.text:00406070 loc_406070:                             ; CODE XREF: sub_405E80+1AE↑j
.text:00406070                 cmp     byte ptr ds:word_409368, 0
.text:00406077                 js      short loc_4060A8
.text:00406079                 movzx   eax, ds:word_409368
.text:00406080                 test    al, 2
.text:00406082                 jnz     short loc_40609E
.text:00406084                 cmp     ax, 400h
.text:00406088                 jz      short loc_406094
.text:0040608A                 mov     [esp+13Ch+Format], offset aStandardEditio ; " Standard Edition"
.text:00406092                 jmp     short loc_40604E
.text:00406094 ; ---------------------------------------------------------------------------
.text:00406094
.text:00406094 loc_406094:                             ; CODE XREF: sub_405E80+208↑j
.text:00406094                 mov     [esp+13Ch+Format], offset aWebEdition ; " Web Edition"
.text:0040609C                 jmp     short loc_40604E
.text:0040609E ; ---------------------------------------------------------------------------
.text:0040609E
.text:0040609E loc_40609E:                             ; CODE XREF: sub_405E80+202↑j
.text:0040609E                 mov     [esp+13Ch+Format], offset aEnterpriseEdit ; " Enterprise Edition"
.text:004060A6                 jmp     short loc_40604E
.text:004060A8 ; ---------------------------------------------------------------------------
.text:004060A8
.text:004060A8 loc_4060A8:                             ; CODE XREF: sub_405E80+1F7↑j
.text:004060A8                 mov     [esp+13Ch+Format], offset aDatacenterEdit ; " Datacenter Edition"
.text:004060B0                 jmp     short loc_40604E
.text:004060B2 ; ---------------------------------------------------------------------------
.text:004060B2
.text:004060B2 loc_4060B2:                             ; CODE XREF: sub_405E80+14E↑j
.text:004060B2                 test    byte ptr ds:word_409368+1, 2
.text:004060B9                 jz      short loc_4060C5
.text:004060BB                 mov     [esp+13Ch+Format], offset aHomeEdition ; " Home Edition"
.text:004060C3                 jmp     short loc_40604E
.text:004060C5 ; ---------------------------------------------------------------------------
.text:004060C5
.text:004060C5 loc_4060C5:                             ; CODE XREF: sub_405E80+239↑j
.text:004060C5                 mov     [esp+13Ch+Format], offset aProfessional ; " Professional"
.text:004060CD                 jmp     loc_40604E
.text:004060D2 ; ---------------------------------------------------------------------------
.text:004060D2
.text:004060D2 loc_4060D2:                             ; CODE XREF: sub_405E80+13F↑j
.text:004060D2                 mov     [esp+13Ch+cbData], 0FFh
.text:004060DA                 lea     edx, [esp+13Ch+hKey]
.text:004060DE                 mov     [esp+13Ch+phkResult], edx ; phkResult
.text:004060E2                 mov     [esp+13Ch+samDesired], 1 ; samDesired
.text:004060EA                 mov     [esp+13Ch+ulOptions], 0 ; ulOptions
.text:004060F2                 mov     [esp+13Ch+Format], offset SubKey ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:004060FA                 mov     [esp+13Ch+Buffer], 80000002h ; hKey
.text:00406101                 call    RegOpenKeyExA
.text:00406106                 mov     edi, eax
.text:00406108                 sub     esp, 14h
.text:0040610B                 xor     eax, eax
.text:0040610D                 test    edi, edi
.text:0040610F                 jnz     loc_405F15
.text:00406115                 mov     [esp+13Ch+samDesired], 0 ; lpType
.text:0040611D                 mov     edi, [esp+13Ch+hKey]
.text:00406121                 lea     esi, [esp+13Ch+cbData]
.text:00406125                 mov     [esp+13Ch+lpcbData], esi ; lpcbData
.text:00406129                 lea     esi, [esp+13Ch+Data]
.text:0040612D                 mov     [esp+13Ch+phkResult], esi ; lpData
.text:00406131                 mov     [esp+13Ch+ulOptions], 0 ; lpReserved
.text:00406139                 mov     [esp+13Ch+Format], offset ValueName ; "ProductType"
.text:00406141                 mov     [esp+13Ch+Buffer], edi ; hKey
.text:00406144                 call    RegQueryValueExA
.text:00406149                 sub     esp, 18h
.text:0040614C                 test    eax, eax
.text:0040614E                 jnz     short loc_40615A
.text:00406150                 cmp     [esp+13Ch+cbData], 0FFh
.text:00406158                 jbe     short loc_406161
.text:0040615A
.text:0040615A loc_40615A:                             ; CODE XREF: sub_405E80+2CE↑j
.text:0040615A                 xor     eax, eax
.text:0040615C                 jmp     loc_405F15
.text:00406161 ; ---------------------------------------------------------------------------
.text:00406161
.text:00406161 loc_406161:                             ; CODE XREF: sub_405E80+2D8↑j
.text:00406161                 mov     edx, [esp+13Ch+hKey]
.text:00406165                 mov     [esp+13Ch+Buffer], edx ; hKey
.text:00406168                 call    RegCloseKey
.text:0040616D                 sub     esp, 4
.text:00406170                 mov     [esp+13Ch+Format], esi ; lpString2
.text:00406174                 mov     [esp+13Ch+Buffer], offset String1 ; "WINNT"
.text:0040617B                 call    lstrcmpiA
.text:00406180                 sub     esp, 8
.text:00406183                 test    eax, eax
.text:00406185                 jz      short loc_4061D0
.text:00406187
.text:00406187 loc_406187:                             ; CODE XREF: sub_405E80+360↓j
.text:00406187                 mov     [esp+13Ch+Format], esi ; lpString2
.text:0040618B                 mov     [esp+13Ch+Buffer], offset aLanmannt ; "LANMANNT"
.text:00406192                 call    lstrcmpiA
.text:00406197                 sub     esp, 8
.text:0040619A                 test    eax, eax
.text:0040619C                 jz      short loc_4061BE
.text:0040619E
.text:0040619E loc_40619E:                             ; CODE XREF: sub_405E80+34E↓j
.text:0040619E                 mov     [esp+13Ch+Format], esi ; lpString2
.text:004061A2                 mov     [esp+13Ch+Buffer], offset aServernt ; "SERVERNT"
.text:004061A9                 call    lstrcmpiA
.text:004061AE                 sub     esp, 8
.text:004061B1                 test    eax, eax
.text:004061B3                 jnz     loc_405FD8
.text:004061B9                 jmp     loc_406058
.text:004061BE ; ---------------------------------------------------------------------------
.text:004061BE
.text:004061BE loc_4061BE:                             ; CODE XREF: sub_405E80+31C↑j
.text:004061BE                 mov     [esp+13Ch+Format], offset aServer ; " Server"
.text:004061C6                 mov     [esp+13Ch+Buffer], ebx ; Destination
.text:004061C9                 call    strcat
.text:004061CE                 jmp     short loc_40619E
.text:004061D0 ; ---------------------------------------------------------------------------
.text:004061D0
.text:004061D0 loc_4061D0:                             ; CODE XREF: sub_405E80+305↑j
.text:004061D0                 mov     [esp+13Ch+Format], offset aProfessional ; " Professional"
.text:004061D8                 mov     [esp+13Ch+Buffer], ebx ; Destination
.text:004061DB                 call    strcat
.text:004061E0                 jmp     short loc_406187
.text:004061E2 ; ---------------------------------------------------------------------------
.text:004061E2
.text:004061E2 loc_4061E2:                             ; CODE XREF: sub_405E80+FD↑j
.text:004061E2                                         ; sub_405E80+10B↑j
.text:004061E2                 cmp     eax, 5
.text:004061E5                 jnz     loc_405FB7
.text:004061EB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:004061F0                 cmp     eax, 2
.text:004061F3                 jz      short loc_40625A
.text:004061F5                 cmp     eax, 1
.text:004061F8                 jz      short loc_406233
.text:004061FA                 test    eax, eax
.text:004061FC                 jnz     loc_405FB7
.text:00406202                 mov     dword ptr [ebx], 7263694Dh
.text:00406208                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040620F                 mov     dword ptr [ebx+8], 69572074h
.text:00406216                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040621D                 mov     dword ptr [ebx+10h], 30322073h
.text:00406224                 mov     word ptr [ebx+14h], 3030h
.text:0040622A                 mov     byte ptr [ebx+16h], 0
.text:0040622E                 jmp     loc_405FB7
.text:00406233 ; ---------------------------------------------------------------------------
.text:00406233
.text:00406233 loc_406233:                             ; CODE XREF: sub_405E80+378↑j
.text:00406233                 mov     dword ptr [ebx], 7263694Dh
.text:00406239                 mov     dword ptr [ebx+4], 666F736Fh
.text:00406240                 mov     dword ptr [ebx+8], 69572074h
.text:00406247                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040624E                 mov     dword ptr [ebx+10h], 50582073h
.text:00406255                 jmp     loc_405FB3
.text:0040625A ; ---------------------------------------------------------------------------
.text:0040625A
.text:0040625A loc_40625A:                             ; CODE XREF: sub_405E80+373↑j
.text:0040625A                 mov     dword ptr [ebx], 7263694Dh
.text:00406260                 mov     dword ptr [ebx+4], 666F736Fh
.text:00406267                 mov     dword ptr [ebx+8], 69572074h
.text:0040626E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00406275                 mov     dword ptr [ebx+10h], 65532073h
.text:0040627C                 mov     dword ptr [ebx+14h], 72657672h
.text:00406283                 mov     dword ptr [ebx+18h], 30303220h
.text:0040628A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:00406290                 jmp     loc_405FB7
.text:00406295 ; ---------------------------------------------------------------------------
.text:00406295
.text:00406295 loc_406295:                             ; CODE XREF: sub_405E80+F4↑j
.text:00406295                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040629B                 test    edx, edx
.text:0040629D                 jnz     loc_405F7A
.text:004062A3                 mov     dword ptr [ebx], 7263694Dh
.text:004062A9                 mov     dword ptr [ebx+4], 666F736Fh
.text:004062B0                 mov     dword ptr [ebx+8], 69572074h
.text:004062B7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004062BE                 mov     dword ptr [ebx+10h], 544E2073h
.text:004062C5                 mov     dword ptr [ebx+14h], 302E3420h
.text:004062CC                 mov     byte ptr [ebx+18h], 0
.text:004062D0                 jmp     loc_405FB7
.text:004062D5 ; ---------------------------------------------------------------------------
.text:004062D5
.text:004062D5 loc_4062D5:                             ; CODE XREF: sub_405E80+EB↑j
.text:004062D5                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:004062DC                 jnz     loc_405F71
.text:004062E2                 mov     dword ptr [ebx], 7263694Dh
.text:004062E8                 mov     dword ptr [ebx+4], 666F736Fh
.text:004062EF                 mov     dword ptr [ebx+8], 69572074h
.text:004062F6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004062FD                 mov     dword ptr [ebx+10h], 544E2073h
.text:00406304                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040630B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:00406311                 jmp     loc_405FB7
.text:00406316 ; ---------------------------------------------------------------------------
.text:00406316
.text:00406316 loc_406316:                             ; CODE XREF: sub_405E80+26↑j
.text:00406316                 cld
.text:00406317                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0040631C                 mov     ecx, 8
.text:00406321                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:00406328                 mov     edi, ebx
.text:0040632A                 rep movsd
.text:0040632C                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:00406333                 mov     [edi+2], dl
.text:00406336                 mov     [edi], si
.text:00406339                 jmp     loc_405F50
.text:00406339 ; ---------------------------------------------------------------------------
.text:0040633E                 align 10h
.text:00406340
.text:00406340 loc_406340:                             ; CODE XREF: sub_405E80+1D↑j
.text:00406340                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00406346                 cmp     ecx, 4
.text:00406349                 jz      loc_406400
.text:0040634F
.text:0040634F loc_40634F:                             ; CODE XREF: sub_405E80+5D6↓j
.text:0040634F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00406355
.text:00406355 loc_406355:                             ; CODE XREF: sub_405E80+588↓j
.text:00406355                 cmp     ecx, 4
.text:00406358                 jz      short loc_406364
.text:0040635A
.text:0040635A loc_40635A:                             ; CODE XREF: sub_405E80+4EC↓j
.text:0040635A                                         ; sub_405E80+4F1↓j
.text:0040635A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040635F                 jmp     loc_405ECC
.text:00406364 ; ---------------------------------------------------------------------------
.text:00406364
.text:00406364 loc_406364:                             ; CODE XREF: sub_405E80+4D8↑j
.text:00406364                 cmp     edx, 0Ah
.text:00406367                 jz      short loc_406391
.text:00406369
.text:00406369 loc_406369:                             ; CODE XREF: sub_405E80+55F↓j
.text:00406369                 cmp     ecx, 4
.text:0040636C                 jnz     short loc_40635A
.text:0040636E                 cmp     edx, 5Ah ; 'Z'
.text:00406371                 jnz     short loc_40635A
.text:00406373                 cld
.text:00406374                 mov     edi, ebx
.text:00406376                 mov     esi, offset dword_405E40
.text:0040637B                 movzx   ebx, ds:word_405E64
.text:00406382                 mov     ecx, 9
.text:00406387                 rep movsd
.text:00406389                 mov     [edi], bx
.text:0040638C                 jmp     loc_405F50
.text:00406391 ; ---------------------------------------------------------------------------
.text:00406391
.text:00406391 loc_406391:                             ; CODE XREF: sub_405E80+4E7↑j
.text:00406391                 mov     dword ptr [ebx], 7263694Dh
.text:00406397                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040639E                 mov     dword ptr [ebx+8], 69572074h
.text:004063A5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004063AC                 mov     dword ptr [ebx+10h], 38392073h
.text:004063B3                 mov     byte ptr [ebx+14h], 0
.text:004063B7                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:004063BD                 lea     edi, [edx-7CFh]
.text:004063C3                 cmp     edi, 0B7h ; '·'
.text:004063C9                 jbe     short loc_4063F3
.text:004063CB                 cmp     edx, 886h
.text:004063D1                 ja      short loc_4063E1
.text:004063D3
.text:004063D3 loc_4063D3:                             ; CODE XREF: sub_405E80+571↓j
.text:004063D3                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004063D9                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004063DF                 jmp     short loc_406369
.text:004063E1 ; ---------------------------------------------------------------------------
.text:004063E1
.text:004063E1 loc_4063E1:                             ; CODE XREF: sub_405E80+551↑j
.text:004063E1                 mov     [esp+13Ch+Format], offset aSe ; " SE"
.text:004063E9
.text:004063E9 loc_4063E9:                             ; CODE XREF: sub_405E80+57B↓j
.text:004063E9                 mov     [esp+13Ch+Buffer], ebx ; Destination
.text:004063EC                 call    strcat
.text:004063F1                 jmp     short loc_4063D3
.text:004063F3 ; ---------------------------------------------------------------------------
.text:004063F3
.text:004063F3 loc_4063F3:                             ; CODE XREF: sub_405E80+549↑j
.text:004063F3                 mov     [esp+13Ch+Format], offset aSp1 ; " SP1"
.text:004063FB                 jmp     short loc_4063E9
.text:004063FB ; ---------------------------------------------------------------------------
.text:004063FD                 align 10h
.text:00406400
.text:00406400 loc_406400:                             ; CODE XREF: sub_405E80+4C9↑j
.text:00406400                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00406406                 test    edx, edx
.text:00406408                 jnz     loc_406355
.text:0040640E                 mov     dword ptr [ebx], 7263694Dh
.text:00406414                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040641B                 mov     dword ptr [ebx+8], 69572074h
.text:00406422                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00406429                 mov     dword ptr [ebx+10h], 35392073h
.text:00406430                 mov     byte ptr [ebx+14h], 0
.text:00406434                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040643A                 lea     ecx, [edx-3B7h]
.text:00406440                 cmp     ecx, 81h
.text:00406446                 jbe     short loc_40646D
.text:00406448                 cmp     edx, 438h
.text:0040644E                 ja      short loc_40645B
.text:00406450
.text:00406450 loc_406450:                             ; CODE XREF: sub_405E80+5EB↓j
.text:00406450                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00406456                 jmp     loc_40634F
.text:0040645B ; ---------------------------------------------------------------------------
.text:0040645B
.text:0040645B loc_40645B:                             ; CODE XREF: sub_405E80+5CE↑j
.text:0040645B                 mov     [esp+13Ch+Format], offset aOsr2 ; " OSR2"
.text:00406463
.text:00406463 loc_406463:                             ; CODE XREF: sub_405E80+5F5↓j
.text:00406463                 mov     [esp+13Ch+Buffer], ebx ; Destination
.text:00406466                 call    strcat
.text:0040646B                 jmp     short loc_406450
.text:0040646D ; ---------------------------------------------------------------------------
.text:0040646D
.text:0040646D loc_40646D:                             ; CODE XREF: sub_405E80+5C6↑j
.text:0040646D                 mov     [esp+13Ch+Format], offset aSp1 ; " SP1"
.text:00406475                 jmp     short loc_406463
.text:00406475 sub_405E80      endp
.text:00406475
.text:00406475 ; ---------------------------------------------------------------------------
.text:00406477                 align 10h
.text:00406480                 sub     esp, 0Ch
.text:00406483                 call    sub_406590
.text:00406488                 mov     eax, ds:dword_4092C0
.text:0040648D                 add     esp, 0Ch
.text:00406490                 retn
.text:00406491 ; ---------------------------------------------------------------------------
.text:00406491                 jmp     short loc_4064A0
.text:00406491 ; ---------------------------------------------------------------------------
.text:00406493                 align 10h
.text:004064A0
.text:004064A0 loc_4064A0:                             ; CODE XREF: .text:00406491↑j
.text:004064A0                 sub     esp, 0Ch
.text:004064A3                 call    sub_406590
.text:004064A8                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004064AD                 add     esp, 0Ch
.text:004064B0                 retn
.text:004064B1 ; ---------------------------------------------------------------------------
.text:004064B1                 jmp     short loc_4064C0
.text:004064B1 ; ---------------------------------------------------------------------------
.text:004064B3                 align 10h
.text:004064C0
.text:004064C0 loc_4064C0:                             ; CODE XREF: .text:004064B1↑j
.text:004064C0                 sub     esp, 0Ch
.text:004064C3                 call    sub_406590
.text:004064C8                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:004064CD                 add     esp, 0Ch
.text:004064D0                 retn
.text:004064D1 ; ---------------------------------------------------------------------------
.text:004064D1                 jmp     short loc_4064E0
.text:004064D1 ; ---------------------------------------------------------------------------
.text:004064D3                 align 10h
.text:004064E0
.text:004064E0 loc_4064E0:                             ; CODE XREF: .text:004064D1↑j
.text:004064E0                 sub     esp, 0Ch
.text:004064E3                 call    sub_406590
.text:004064E8                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:004064ED                 add     esp, 0Ch
.text:004064F0                 retn
.text:004064F1 ; ---------------------------------------------------------------------------
.text:004064F1                 jmp     short loc_406500
.text:004064F1 ; ---------------------------------------------------------------------------
.text:004064F3                 align 10h
.text:00406500
.text:00406500 loc_406500:                             ; CODE XREF: .text:004064F1↑j
.text:00406500                 sub     esp, 0Ch
.text:00406503                 call    GetVersion
.text:00406508                 shr     eax, 10h
.text:0040650B                 add     esp, 0Ch
.text:0040650E                 retn
.text:0040650E ; ---------------------------------------------------------------------------
.text:0040650F                 align 10h
.text:00406510                 sub     esp, 0Ch
.text:00406513                 call    sub_406590
.text:00406518                 xor     eax, eax
.text:0040651A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:00406521                 setz    al
.text:00406524                 add     esp, 0Ch
.text:00406527                 retn
.text:00406527 ; ---------------------------------------------------------------------------
.text:00406528                 align 10h
.text:00406530                 sub     esp, 0Ch
.text:00406533                 call    sub_406590
.text:00406538                 xor     eax, eax
.text:0040653A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:00406541                 setz    al
.text:00406544                 add     esp, 0Ch
.text:00406547                 retn
.text:00406547 ; ---------------------------------------------------------------------------
.text:00406548                 align 10h
.text:00406550                 sub     esp, 0Ch
.text:00406553                 call    sub_406590
.text:00406558                 xor     eax, eax
.text:0040655A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:00406561                 setz    al
.text:00406564                 add     esp, 0Ch
.text:00406567                 retn
.text:00406567 ; ---------------------------------------------------------------------------
.text:00406568                 align 10h
.text:00406570                 sub     esp, 0Ch
.text:00406573                 call    sub_406590
.text:00406578                 xor     eax, eax
.text:0040657A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:00406581                 setz    al
.text:00406584                 add     esp, 0Ch
.text:00406587                 retn
.text:00406587 ; ---------------------------------------------------------------------------
.text:00406588                 align 10h
.text:00406590
.text:00406590 ; =============== S U B R O U T I N E =======================================
.text:00406590
.text:00406590
.text:00406590 sub_406590      proc near               ; CODE XREF: sub_405E80+10↑p
.text:00406590                                         ; .text:00406483↑p ...
.text:00406590
.text:00406590 lpVersionInformation= dword ptr -0BCh
.text:00406590 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:00406590
.text:00406590                 sub     esp, 0BCh
.text:00406596                 mov     edx, ds:dword_409370
.text:0040659C                 test    edx, edx
.text:0040659E                 jz      short loc_4065B0
.text:004065A0
.text:004065A0 loc_4065A0:                             ; CODE XREF: sub_406590+7B↓j
.text:004065A0                 mov     edx, 1
.text:004065A5
.text:004065A5 loc_4065A5:                             ; CODE XREF: sub_406590+217↓j
.text:004065A5                 mov     eax, edx
.text:004065A7                 add     esp, 0BCh
.text:004065AD                 retn
.text:004065AD ; ---------------------------------------------------------------------------
.text:004065AE                 align 10h
.text:004065B0
.text:004065B0 loc_4065B0:                             ; CODE XREF: sub_406590+E↑j
.text:004065B0                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:004065B7                 mov     edx, 9Ch ; 'œ'
.text:004065BC                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:004065C2                 call    GetVersionExA
.text:004065C7                 sub     esp, 4
.text:004065CA                 test    eax, eax
.text:004065CC                 jz      loc_406784
.text:004065D2
.text:004065D2 loc_4065D2:                             ; CODE XREF: sub_406590+245↓j
.text:004065D2                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:004065D9                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004065DE                 cmp     eax, 1
.text:004065E1                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:004065E7                 jz      loc_4066D0
.text:004065ED                 cmp     eax, 1
.text:004065F0                 jb      loc_4066C0
.text:004065F6                 cmp     eax, 2
.text:004065F9                 jz      short loc_40661A
.text:004065FB                 cmp     eax, 3
.text:004065FE                 jz      short loc_40660D
.text:00406600
.text:00406600 loc_406600:                             ; CODE XREF: sub_406590+88↓j
.text:00406600                                         ; sub_406590+C0↓j ...
.text:00406600                 mov     edx, 1
.text:00406605                 mov     ds:dword_409370, edx
.text:0040660B                 jmp     short loc_4065A0
.text:0040660D ; ---------------------------------------------------------------------------
.text:0040660D
.text:0040660D loc_40660D:                             ; CODE XREF: sub_406590+6E↑j
.text:0040660D                 mov     ecx, 17h
.text:00406612
.text:00406612 loc_406612:                             ; CODE XREF: sub_406590+1A7↓j
.text:00406612                 mov     ds:dword_4092C0, ecx
.text:00406618                 jmp     short loc_406600
.text:0040661A ; ---------------------------------------------------------------------------
.text:0040661A
.text:0040661A loc_40661A:                             ; CODE XREF: sub_406590+69↑j
.text:0040661A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040661F                 cmp     eax, 3
.text:00406622                 jz      short loc_40669B
.text:00406624                 cmp     eax, 4
.text:00406627                 jz      short loc_40668A
.text:00406629
.text:00406629 loc_406629:                             ; CODE XREF: sub_406590+102↓j
.text:00406629                 cmp     eax, 4
.text:0040662C                 ja      short loc_406652
.text:0040662E                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00406634                 test    ecx, ecx
.text:00406636                 jnz     short loc_406652
.text:00406638                 mov     edx, 1Eh
.text:0040663D
.text:0040663D loc_40663D:                             ; CODE XREF: sub_406590+DF↓j
.text:0040663D                 mov     ds:dword_4092C0, edx
.text:00406643
.text:00406643 loc_406643:                             ; CODE XREF: sub_406590+C5↓j
.text:00406643                                         ; sub_406590+D8↓j ...
.text:00406643                 movzx   ecx, ds:word_409364
.text:0040664A                 add     ds:dword_4092C0, ecx
.text:00406650                 jmp     short loc_406600
.text:00406652 ; ---------------------------------------------------------------------------
.text:00406652
.text:00406652 loc_406652:                             ; CODE XREF: sub_406590+9C↑j
.text:00406652                                         ; sub_406590+A6↑j
.text:00406652                 cmp     eax, 5
.text:00406655                 jnz     short loc_406643
.text:00406657                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040665C                 cmp     eax, 2
.text:0040665F                 jz      short loc_40667E
.text:00406661                 cmp     eax, 1
.text:00406664                 jz      short loc_406671
.text:00406666                 test    eax, eax
.text:00406668                 jnz     short loc_406643
.text:0040666A                 mov     edx, 32h ; '2'
.text:0040666F                 jmp     short loc_40663D
.text:00406671 ; ---------------------------------------------------------------------------
.text:00406671
.text:00406671 loc_406671:                             ; CODE XREF: sub_406590+D4↑j
.text:00406671                 mov     ecx, 3Ch ; '<'
.text:00406676
.text:00406676 loc_406676:                             ; CODE XREF: sub_406590+122↓j
.text:00406676                 mov     ds:dword_4092C0, ecx
.text:0040667C                 jmp     short loc_406643
.text:0040667E ; ---------------------------------------------------------------------------
.text:0040667E
.text:0040667E loc_40667E:                             ; CODE XREF: sub_406590+CF↑j
.text:0040667E                 mov     eax, 46h ; 'F'
.text:00406683
.text:00406683 loc_406683:                             ; CODE XREF: sub_406590+109↓j
.text:00406683                                         ; sub_406590+129↓j
.text:00406683                 mov     ds:dword_4092C0, eax
.text:00406688                 jmp     short loc_406643
.text:0040668A ; ---------------------------------------------------------------------------
.text:0040668A
.text:0040668A loc_40668A:                             ; CODE XREF: sub_406590+97↑j
.text:0040668A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00406690                 test    ecx, ecx
.text:00406692                 jnz     short loc_406629
.text:00406694                 mov     eax, 28h ; '('
.text:00406699                 jmp     short loc_406683
.text:0040669B ; ---------------------------------------------------------------------------
.text:0040669B
.text:0040669B loc_40669B:                             ; CODE XREF: sub_406590+92↑j
.text:0040669B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:004066A0                 cmp     eax, 33h ; '3'
.text:004066A3                 jz      short loc_4066B4
.text:004066A5                 cmp     eax, 5
.text:004066A8                 setz    cl
.text:004066AB                 movzx   edx, cl
.text:004066AE                 lea     ecx, [edx+edx*4+1Eh]
.text:004066B2                 jmp     short loc_406676
.text:004066B4 ; ---------------------------------------------------------------------------
.text:004066B4
.text:004066B4 loc_4066B4:                             ; CODE XREF: sub_406590+113↑j
.text:004066B4                 mov     eax, 24h ; '$'
.text:004066B9                 jmp     short loc_406683
.text:004066B9 ; ---------------------------------------------------------------------------
.text:004066BB                 align 10h
.text:004066C0
.text:004066C0 loc_4066C0:                             ; CODE XREF: sub_406590+60↑j
.text:004066C0                 mov     edx, 2
.text:004066C5                 mov     ds:dword_4092C0, edx
.text:004066CB                 jmp     loc_406600
.text:004066D0 ; ---------------------------------------------------------------------------
.text:004066D0
.text:004066D0 loc_4066D0:                             ; CODE XREF: sub_406590+57↑j
.text:004066D0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004066D6                 cmp     ecx, 4
.text:004066D9                 jnz     loc_406600
.text:004066DF                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:004066E4                 test    eax, eax
.text:004066E6                 jnz     short loc_40670A
.text:004066E8                 mov     eax, 0Ah
.text:004066ED                 mov     ds:dword_4092C0, eax
.text:004066F2                 lea     eax, [edx-3B7h]
.text:004066F8                 cmp     eax, 81h
.text:004066FD                 ja      short loc_406775
.text:004066FF                 mov     edx, 0Bh
.text:00406704
.text:00406704 loc_406704:                             ; CODE XREF: sub_406590+1F2↓j
.text:00406704                 mov     ds:dword_4092C0, edx
.text:0040670A
.text:0040670A loc_40670A:                             ; CODE XREF: sub_406590+156↑j
.text:0040670A                                         ; sub_406590+1EB↓j
.text:0040670A                 cmp     ecx, 4
.text:0040670D                 jnz     loc_406600
.text:00406713                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040671A                 jz      short loc_40673C
.text:0040671C
.text:0040671C loc_40671C:                             ; CODE XREF: sub_406590+1D4↓j
.text:0040671C                                         ; sub_406590+1DC↓j
.text:0040671C                 cmp     ecx, 4
.text:0040671F                 jnz     loc_406600
.text:00406725                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040672C                 jnz     loc_406600
.text:00406732                 mov     ecx, 12h
.text:00406737                 jmp     loc_406612
.text:0040673C ; ---------------------------------------------------------------------------
.text:0040673C
.text:0040673C loc_40673C:                             ; CODE XREF: sub_406590+18A↑j
.text:0040673C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00406742                 mov     eax, 0Eh
.text:00406747                 mov     ds:dword_4092C0, eax
.text:0040674C                 lea     eax, [edx-7CFh]
.text:00406752                 cmp     eax, 0B7h ; '·'
.text:00406757                 ja      short loc_406766
.text:00406759                 mov     edx, 0Fh
.text:0040675E
.text:0040675E loc_40675E:                             ; CODE XREF: sub_406590+1E3↓j
.text:0040675E                 mov     ds:dword_4092C0, edx
.text:00406764                 jmp     short loc_40671C
.text:00406766 ; ---------------------------------------------------------------------------
.text:00406766
.text:00406766 loc_406766:                             ; CODE XREF: sub_406590+1C7↑j
.text:00406766                 cmp     edx, 886h
.text:0040676C                 jbe     short loc_40671C
.text:0040676E                 mov     edx, 10h
.text:00406773                 jmp     short loc_40675E
.text:00406775 ; ---------------------------------------------------------------------------
.text:00406775
.text:00406775 loc_406775:                             ; CODE XREF: sub_406590+16D↑j
.text:00406775                 cmp     edx, 438h
.text:0040677B                 jbe     short loc_40670A
.text:0040677D                 mov     edx, 0Ch
.text:00406782                 jmp     short loc_406704
.text:00406784 ; ---------------------------------------------------------------------------
.text:00406784
.text:00406784 loc_406784:                             ; CODE XREF: sub_406590+3C↑j
.text:00406784                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040678C                 xor     edx, edx
.text:0040678E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:00406792                 mov     dword_408080, edx
.text:00406798                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040679B                 call    GetVersionExA
.text:004067A0                 sub     esp, 4
.text:004067A3                 xor     edx, edx
.text:004067A5                 test    eax, eax
.text:004067A7                 jz      loc_4065A5
.text:004067AD                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:004067B1                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:004067B5                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:004067BB                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:004067BF                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:004067C5                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:004067C9                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:004067CF                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:004067D5                 jmp     loc_4065D2
.text:004067D5 sub_406590      endp
.text:004067D5
.text:004067D5 ; ---------------------------------------------------------------------------
.text:004067DA                 align 10h
.text:004067E0
.text:004067E0 ; =============== S U B R O U T I N E =======================================
.text:004067E0
.text:004067E0
.text:004067E0 ; int __cdecl sub_4067E0(char *, int)
.text:004067E0 sub_4067E0      proc near               ; CODE XREF: sub_4054A0+30↑p
.text:004067E0
.text:004067E0 name            = dword ptr -0Ch
.text:004067E0 namelen         = dword ptr -8
.text:004067E0 arg_0           = dword ptr  4
.text:004067E0 arg_4           = dword ptr  8
.text:004067E0
.text:004067E0                 sub     esp, 0Ch
.text:004067E3                 call    sub_406AD0
.text:004067E8                 inc     eax
.text:004067E9                 mov     edx, 0FFFFFFFFh
.text:004067EE                 jz      short loc_406808
.text:004067F0                 mov     edx, [esp+0Ch+arg_4]
.text:004067F4                 mov     [esp+0Ch+namelen], edx ; namelen
.text:004067F8                 mov     edx, [esp+0Ch+arg_0]
.text:004067FC                 mov     [esp+0Ch+name], edx ; name
.text:004067FF                 call    gethostname
.text:00406804                 sub     esp, 8
.text:00406807                 cdq
.text:00406808
.text:00406808 loc_406808:                             ; CODE XREF: sub_4067E0+E↑j
.text:00406808                 mov     eax, edx
.text:0040680A                 add     esp, 0Ch
.text:0040680D                 retn
.text:0040680D sub_4067E0      endp
.text:0040680D
.text:0040680D ; ---------------------------------------------------------------------------
.text:0040680E                 align 10h
.text:00406810
.text:00406810 ; =============== S U B R O U T I N E =======================================
.text:00406810
.text:00406810 ; Attributes: info_from_lumina
.text:00406810
.text:00406810 ___get_errno    proc near               ; CODE XREF: sub_406AA0+B↓p
.text:00406810                                         ; sub_406AD0+5D↓p
.text:00406810
.text:00406810 arg_0           = dword ptr  4
.text:00406810
.text:00406810                 mov     eax, [esp+arg_0]
.text:00406814                 cmp     eax, 53h ; 'S'
.text:00406817                 jg      loc_406910
.text:0040681D                 cmp     eax, 52h ; 'R'
.text:00406820                 jge     short loc_406872
.text:00406822                 cmp     eax, 0Fh
.text:00406825                 jz      short loc_406840
.text:00406827                 cmp     eax, 0Fh
.text:0040682A                 jg      short loc_4068A0
.text:0040682C                 cmp     eax, 9
.text:0040682F                 jg      short loc_406880
.text:00406831                 cmp     eax, 7
.text:00406834                 jge     short loc_406879
.text:00406836                 cmp     eax, 3
.text:00406839                 jg      short loc_40685A
.text:0040683B                 cmp     eax, 2
.text:0040683E                 jl      short loc_406853
.text:00406840
.text:00406840 loc_406840:                             ; CODE XREF: ___get_errno+15↑j
.text:00406840                                         ; ___get_errno+9D↓j ...
.text:00406840                 mov     edx, 2
.text:00406845                 lea     esi, [esi+0]
.text:00406849                 lea     edi, [edi+0]
.text:00406850
.text:00406850 loc_406850:                             ; CODE XREF: ___get_errno+48↓j
.text:00406850                                         ; ___get_errno+59↓j ...
.text:00406850                 mov     eax, edx
.text:00406852                 retn
.text:00406853 ; ---------------------------------------------------------------------------
.text:00406853
.text:00406853 loc_406853:                             ; CODE XREF: ___get_errno+2E↑j
.text:00406853                                         ; ___get_errno+78↓j ...
.text:00406853                 mov     edx, 16h
.text:00406858                 jmp     short loc_406850
.text:0040685A ; ---------------------------------------------------------------------------
.text:0040685A
.text:0040685A loc_40685A:                             ; CODE XREF: ___get_errno+29↑j
.text:0040685A                 cmp     eax, 5
.text:0040685D                 jz      short loc_406872
.text:0040685F                 cmp     eax, 5
.text:00406862                 jg      short loc_40686B
.text:00406864                 mov     edx, 18h
.text:00406869                 jmp     short loc_406850
.text:0040686B ; ---------------------------------------------------------------------------
.text:0040686B
.text:0040686B loc_40686B:                             ; CODE XREF: ___get_errno+52↑j
.text:0040686B                                         ; ___get_errno+180↓j
.text:0040686B                 mov     edx, 9
.text:00406870                 jmp     short loc_406850
.text:00406872 ; ---------------------------------------------------------------------------
.text:00406872
.text:00406872 loc_406872:                             ; CODE XREF: ___get_errno+10↑j
.text:00406872                                         ; ___get_errno+4D↑j ...
.text:00406872                 mov     edx, 0Dh
.text:00406877                 jmp     short loc_406850
.text:00406879 ; ---------------------------------------------------------------------------
.text:00406879
.text:00406879 loc_406879:                             ; CODE XREF: ___get_errno+24↑j
.text:00406879                                         ; ___get_errno+73↓j ...
.text:00406879                 mov     edx, 0Ch
.text:0040687E                 jmp     short loc_406850
.text:00406880 ; ---------------------------------------------------------------------------
.text:00406880
.text:00406880 loc_406880:                             ; CODE XREF: ___get_errno+1F↑j
.text:00406880                 cmp     eax, 0Dh
.text:00406883                 jg      short loc_406879
.text:00406885                 cmp     eax, 0Ch
.text:00406888                 jge     short loc_406853
.text:0040688A                 cmp     eax, 0Ah
.text:0040688D                 mov     edx, 7
.text:00406892                 jz      short loc_406850
.text:00406894                 cmp     eax, 0Bh
.text:00406897                 jnz     short loc_406853
.text:00406899
.text:00406899 loc_406899:                             ; CODE XREF: ___get_errno+21A↓j
.text:00406899                 mov     edx, 8
.text:0040689E                 jmp     short loc_406850
.text:004068A0 ; ---------------------------------------------------------------------------
.text:004068A0
.text:004068A0 loc_4068A0:                             ; CODE XREF: ___get_errno+1A↑j
.text:004068A0                 cmp     eax, 22h ; '"'
.text:004068A3                 jg      short loc_4068D4
.text:004068A5                 cmp     eax, 16h
.text:004068A8                 jge     short loc_406872
.text:004068AA                 cmp     eax, 12h
.text:004068AD                 jz      short loc_406840
.text:004068AF                 cmp     eax, 12h
.text:004068B2                 jg      short loc_4068C5
.text:004068B4                 cmp     eax, 10h
.text:004068B7                 jz      short loc_406872
.text:004068B9                 mov     edx, 12h
.text:004068BE                 cmp     eax, 11h
.text:004068C1
.text:004068C1 loc_4068C1:                             ; CODE XREF: ___get_errno+172↓j
.text:004068C1                                         ; ___get_errno+24C↓j ...
.text:004068C1                 jnz     short loc_406853
.text:004068C3                 jmp     short loc_406850
.text:004068C5 ; ---------------------------------------------------------------------------
.text:004068C5
.text:004068C5 loc_4068C5:                             ; CODE XREF: ___get_errno+A2↑j
.text:004068C5                 cmp     eax, 14h
.text:004068C8                 jle     short loc_406872
.text:004068CA
.text:004068CA loc_4068CA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:004068CA                 mov     edx, 10h
.text:004068CF                 jmp     loc_406850
.text:004068D4 ; ---------------------------------------------------------------------------
.text:004068D4
.text:004068D4 loc_4068D4:                             ; CODE XREF: ___get_errno+93↑j
.text:004068D4                 cmp     eax, 41h ; 'A'
.text:004068D7                 jz      short loc_406872
.text:004068D9                 cmp     eax, 41h ; 'A'
.text:004068DC                 jg      short loc_4068F1
.text:004068DE                 cmp     eax, 24h ; '$'
.text:004068E1                 jz      short loc_406872
.text:004068E3                 cmp     eax, 35h ; '5'
.text:004068E6                 jnz     loc_406853
.text:004068EC                 jmp     loc_406840
.text:004068F1 ; ---------------------------------------------------------------------------
.text:004068F1
.text:004068F1 loc_4068F1:                             ; CODE XREF: ___get_errno+CC↑j
.text:004068F1                 cmp     eax, 43h ; 'C'
.text:004068F4                 jz      loc_406840
.text:004068FA                 cmp     eax, 50h ; 'P'
.text:004068FD                 jnz     loc_406853
.text:00406903
.text:00406903 loc_406903:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00406903                 mov     edx, 11h
.text:00406908                 jmp     loc_406850
.text:00406908 ; ---------------------------------------------------------------------------
.text:0040690D                 align 10h
.text:00406910
.text:00406910 loc_406910:                             ; CODE XREF: ___get_errno+7↑j
.text:00406910                 cmp     eax, 0A1h ; '¡'
.text:00406915                 jz      loc_406840
.text:0040691B                 cmp     eax, 0A1h ; '¡'
.text:00406920                 jg      loc_4069D0
.text:00406926                 cmp     eax, 81h
.text:0040692B                 jg      short loc_406995
.text:0040692D                 cmp     eax, 80h ; '€'
.text:00406932                 mov     edx, 0Ah
.text:00406937                 jge     loc_406850
.text:0040693D                 cmp     eax, 6Ch ; 'l'
.text:00406940                 jz      loc_406872
.text:00406946                 cmp     eax, 6Ch ; 'l'
.text:00406949                 jg      short loc_406967
.text:0040694B                 cmp     eax, 57h ; 'W'
.text:0040694E                 jz      loc_406853
.text:00406954                 cmp     eax, 59h ; 'Y'
.text:00406957                 jnz     loc_406853
.text:0040695D
.text:0040695D loc_40695D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040695D                                         ; ___get_errno+23C↓j
.text:0040695D                 mov     edx, 0Bh
.text:00406962                 jmp     loc_406850
.text:00406967 ; ---------------------------------------------------------------------------
.text:00406967
.text:00406967 loc_406967:                             ; CODE XREF: ___get_errno+139↑j
.text:00406967                 cmp     eax, 70h ; 'p'
.text:0040696A                 mov     edx, 1Ch
.text:0040696F                 jz      loc_406850
.text:00406975                 cmp     eax, 70h ; 'p'
.text:00406978                 jg      short loc_406987
.text:0040697A                 mov     edx, 20h ; ' '
.text:0040697F                 cmp     eax, 6Dh ; 'm'
.text:00406982                 jmp     loc_4068C1
.text:00406987 ; ---------------------------------------------------------------------------
.text:00406987
.text:00406987 loc_406987:                             ; CODE XREF: ___get_errno+168↑j
.text:00406987                 cmp     eax, 72h ; 'r'
.text:0040698A
.text:0040698A loc_40698A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040698A                 jnz     loc_406853
.text:00406990                 jmp     loc_40686B
.text:00406995 ; ---------------------------------------------------------------------------
.text:00406995
.text:00406995 loc_406995:                             ; CODE XREF: ___get_errno+11B↑j
.text:00406995                 cmp     eax, 84h ; '„'
.text:0040699A                 jz      loc_406872
.text:004069A0                 cmp     eax, 84h ; '„'
.text:004069A5                 jg      short loc_4069AE
.text:004069A7                 cmp     eax, 82h ; '‚'
.text:004069AC                 jmp     short loc_40698A
.text:004069AE ; ---------------------------------------------------------------------------
.text:004069AE
.text:004069AE loc_4069AE:                             ; CODE XREF: ___get_errno+195↑j
.text:004069AE                 cmp     eax, 91h ; '‘'
.text:004069B3                 mov     edx, 29h ; ')'
.text:004069B8                 jz      loc_406850
.text:004069BE                 cmp     eax, 9Eh ; 'ž'
.text:004069C3
.text:004069C3 loc_4069C3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:004069C3                 jnz     loc_406853
.text:004069C9                 jmp     loc_406872
.text:004069C9 ; ---------------------------------------------------------------------------
.text:004069CE                 align 10h
.text:004069D0
.text:004069D0 loc_4069D0:                             ; CODE XREF: ___get_errno+110↑j
.text:004069D0                 cmp     eax, 0CEh ; 'Î'
.text:004069D5                 jz      loc_406840
.text:004069DB                 cmp     eax, 0CEh ; 'Î'
.text:004069E0                 jg      short loc_406A30
.text:004069E2                 cmp     eax, 0AAh ; 'ª'
.text:004069E7                 jz      loc_4068CA
.text:004069ED                 cmp     eax, 0AAh ; 'ª'
.text:004069F2                 jg      short loc_406A06
.text:004069F4                 cmp     eax, 0A4h ; '¤'
.text:004069F9                 jz      loc_40695D
.text:004069FF                 cmp     eax, 0A7h ; '§'
.text:00406A04                 jmp     short loc_4069C3
.text:00406A06 ; ---------------------------------------------------------------------------
.text:00406A06
.text:00406A06 loc_406A06:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00406A06                 cmp     eax, 0B7h ; '·'
.text:00406A0B                 jz      loc_406903
.text:00406A11                 cmp     eax, 0B7h ; '·'
.text:00406A16                 jl      loc_406853
.text:00406A1C                 sub     eax, 0BCh ; '¼'
.text:00406A21                 cmp     eax, 0Eh
.text:00406A24                 ja      loc_406853
.text:00406A2A                 jmp     loc_406899
.text:00406A2A ; ---------------------------------------------------------------------------
.text:00406A2F                 align 10h
.text:00406A30
.text:00406A30 loc_406A30:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00406A30                 cmp     eax, 46Bh
.text:00406A35                 mov     edx, 24h ; '$'
.text:00406A3A                 jz      loc_406850
.text:00406A40                 cmp     eax, 46Bh
.text:00406A45                 jg      short loc_406A61
.text:00406A47                 cmp     eax, 0D7h ; '×'
.text:00406A4C                 jz      loc_40695D
.text:00406A52                 mov     edx, 5
.text:00406A57                 cmp     eax, 45Dh
.text:00406A5C                 jmp     loc_4068C1
.text:00406A61 ; ---------------------------------------------------------------------------
.text:00406A61
.text:00406A61 loc_406A61:                             ; CODE XREF: ___get_errno+235↑j
.text:00406A61                 cmp     eax, 4D5h
.text:00406A66                 mov     edx, 4
.text:00406A6B                 jz      loc_406850
.text:00406A71                 cmp     eax, 4D5h
.text:00406A76                 jg      short loc_406A87
.text:00406A78                 mov     edx, 13h
.text:00406A7D                 cmp     eax, 4B0h
.text:00406A82                 jmp     loc_4068C1
.text:00406A87 ; ---------------------------------------------------------------------------
.text:00406A87
.text:00406A87 loc_406A87:                             ; CODE XREF: ___get_errno+266↑j
.text:00406A87                 cmp     eax, 718h
.text:00406A8C                 jnz     loc_406853
.text:00406A92                 jmp     loc_406879
.text:00406A92 ___get_errno    endp
.text:00406A92
.text:00406A92 ; ---------------------------------------------------------------------------
.text:00406A97                 align 10h
.text:00406AA0
.text:00406AA0 ; =============== S U B R O U T I N E =======================================
.text:00406AA0
.text:00406AA0
.text:00406AA0 sub_406AA0      proc near               ; CODE XREF: sub_405B70:loc_405CA4↑p
.text:00406AA0                                         ; sub_406B50:loc_406B68↓p
.text:00406AA0
.text:00406AA0 var_C           = dword ptr -0Ch
.text:00406AA0
.text:00406AA0                 sub     esp, 0Ch
.text:00406AA3                 call    GetLastError
.text:00406AA8                 mov     [esp+0Ch+var_C], eax
.text:00406AAB                 call    ___get_errno
.text:00406AB0                 add     esp, 0Ch
.text:00406AB3                 retn
.text:00406AB3 sub_406AA0      endp
.text:00406AB3
.text:00406AB3 ; ---------------------------------------------------------------------------
.text:00406AB4                 align 10h
.text:00406AC0 aWsastartup     db 'WSAStartup',0       ; DATA XREF: sub_406AD0+6B↓o
.text:00406ACB                 align 10h
.text:00406AD0
.text:00406AD0 ; =============== S U B R O U T I N E =======================================
.text:00406AD0
.text:00406AD0
.text:00406AD0 sub_406AD0      proc near               ; CODE XREF: sub_4067E0+3↑p
.text:00406AD0
.text:00406AD0 wVersionRequested= word ptr -1ACh
.text:00406AD0 lpWSAData       = dword ptr -1A8h
.text:00406AD0 WSAData         = WSAData ptr -19Ch
.text:00406AD0 var_4           = dword ptr -4
.text:00406AD0
.text:00406AD0                 sub     esp, 1ACh
.text:00406AD6                 mov     eax, ds:dword_409380
.text:00406ADB                 mov     [esp+1ACh+var_4], ebx
.text:00406AE2                 test    eax, eax
.text:00406AE4                 jz      short loc_406AF6
.text:00406AE6
.text:00406AE6 loc_406AE6:                             ; CODE XREF: sub_406AD0+58↓j
.text:00406AE6                 xor     eax, eax
.text:00406AE8
.text:00406AE8 loc_406AE8:                             ; CODE XREF: sub_406AD0+7C↓j
.text:00406AE8                 mov     ebx, [esp+1ACh+var_4]
.text:00406AEF                 add     esp, 1ACh
.text:00406AF5                 retn
.text:00406AF6 ; ---------------------------------------------------------------------------
.text:00406AF6
.text:00406AF6 loc_406AF6:                             ; CODE XREF: sub_406AD0+14↑j
.text:00406AF6                 mov     dword ptr [esp+1ACh+wVersionRequested], 1 ; wVersionRequested
.text:00406AFD                 lea     edx, [esp+1ACh+WSAData]
.text:00406B01                 mov     [esp+1ACh+lpWSAData], edx ; lpWSAData
.text:00406B05                 call    WSAStartup
.text:00406B0A                 sub     esp, 8
.text:00406B0D                 test    eax, eax
.text:00406B0F                 jnz     short loc_406B2A
.text:00406B11                 mov     dword ptr [esp+1ACh+wVersionRequested], offset sub_406B50 ; void (__cdecl *)()
.text:00406B18                 call    sub_401040
.text:00406B1D                 mov     ecx, 1
.text:00406B22                 mov     ds:dword_409380, ecx
.text:00406B28                 jmp     short loc_406AE6
.text:00406B2A ; ---------------------------------------------------------------------------
.text:00406B2A
.text:00406B2A loc_406B2A:                             ; CODE XREF: sub_406AD0+3F↑j
.text:00406B2A                 mov     dword ptr [esp+1ACh+wVersionRequested], eax
.text:00406B2D                 call    ___get_errno
.text:00406B32                 mov     ebx, eax
.text:00406B34                 call    _errno
.text:00406B39                 mov     [eax], ebx
.text:00406B3B                 mov     dword ptr [esp+1ACh+wVersionRequested], offset aWsastartup ; "WSAStartup"
.text:00406B42                 call    sub_406BA0
.text:00406B47                 mov     eax, 0FFFFFFFFh
.text:00406B4C                 jmp     short loc_406AE8
.text:00406B4C sub_406AD0      endp
.text:00406B4C
.text:00406B4C ; ---------------------------------------------------------------------------
.text:00406B4E                 align 10h
.text:00406B50
.text:00406B50 ; =============== S U B R O U T I N E =======================================
.text:00406B50
.text:00406B50
.text:00406B50 ; void __cdecl sub_406B50()
.text:00406B50 sub_406B50      proc near               ; DATA XREF: sub_406AD0+41↑o
.text:00406B50
.text:00406B50 var_4           = dword ptr -4
.text:00406B50
.text:00406B50                 sub     esp, 0Ch
.text:00406B53                 mov     [esp+0Ch+var_4], ebx
.text:00406B57                 call    WSACleanup
.text:00406B5C                 test    eax, eax
.text:00406B5E                 jz      short loc_406B68
.text:00406B60
.text:00406B60 loc_406B60:                             ; CODE XREF: sub_406B50+26↓j
.text:00406B60                 mov     ebx, [esp+0Ch+var_4]
.text:00406B64                 add     esp, 0Ch
.text:00406B67                 retn
.text:00406B68 ; ---------------------------------------------------------------------------
.text:00406B68
.text:00406B68 loc_406B68:                             ; CODE XREF: sub_406B50+E↑j
.text:00406B68                 call    sub_406AA0
.text:00406B6D                 mov     ebx, eax
.text:00406B6F                 call    _errno
.text:00406B74                 mov     [eax], ebx
.text:00406B76                 jmp     short loc_406B60
.text:00406B76 sub_406B50      endp
.text:00406B76
.text:00406B76 ; ---------------------------------------------------------------------------
.text:00406B78                 align 10h
.text:00406B80 ; const char aSSocketErrorDS[]
.text:00406B80 aSSocketErrorDS db '%s: Socket error %d: %s',0Ah,0
.text:00406B80                                         ; DATA XREF: sub_406BA0+27↓o
.text:00406B99                 align 10h
.text:00406BA0
.text:00406BA0 ; =============== S U B R O U T I N E =======================================
.text:00406BA0
.text:00406BA0
.text:00406BA0 sub_406BA0      proc near               ; CODE XREF: sub_406AD0+72↑p
.text:00406BA0
.text:00406BA0 Stream          = dword ptr -1Ch
.text:00406BA0 Format          = dword ptr -18h
.text:00406BA0 var_14          = dword ptr -14h
.text:00406BA0 var_10          = dword ptr -10h
.text:00406BA0 var_C           = dword ptr -0Ch
.text:00406BA0 var_4           = dword ptr -4
.text:00406BA0 arg_0           = dword ptr  4
.text:00406BA0
.text:00406BA0                 sub     esp, 1Ch
.text:00406BA3                 mov     [esp+1Ch+var_4], ebx
.text:00406BA7                 call    WSAGetLastError
.text:00406BAC                 mov     [esp+1Ch+Stream], eax ; DWORD
.text:00406BAF                 call    sub_406C00
.text:00406BB4                 mov     ebx, eax
.text:00406BB6                 call    WSAGetLastError
.text:00406BBB                 mov     [esp+1Ch+var_10], eax
.text:00406BBF                 mov     edx, [esp+1Ch+arg_0]
.text:00406BC3                 mov     [esp+1Ch+var_C], ebx
.text:00406BC7                 mov     [esp+1Ch+Format], offset aSSocketErrorDS ; "%s: Socket error %d: %s\n"
.text:00406BCF                 mov     [esp+1Ch+var_14], edx
.text:00406BD3                 mov     edx, ds:_iob
.text:00406BD9                 add     edx, 40h ; '@'
.text:00406BDC                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00406BDF                 call    fprintf
.text:00406BE4                 mov     [esp+1Ch+Stream], ebx ; hMem
.text:00406BE7                 call    LocalFree
.text:00406BEC                 sub     esp, 4
.text:00406BEF                 mov     ebx, [esp+1Ch+var_4]
.text:00406BF3                 add     esp, 1Ch
.text:00406BF6                 retn
.text:00406BF6 sub_406BA0      endp
.text:00406BF6
.text:00406BF6 ; ---------------------------------------------------------------------------
.text:00406BF7                 align 10h
.text:00406C00
.text:00406C00 ; =============== S U B R O U T I N E =======================================
.text:00406C00
.text:00406C00
.text:00406C00 ; int __cdecl sub_406C00(DWORD)
.text:00406C00 sub_406C00      proc near               ; CODE XREF: sub_406BA0+F↑p
.text:00406C00
.text:00406C00 dwFlags         = dword ptr -2Ch
.text:00406C00 lpSource        = dword ptr -28h
.text:00406C00 dwMessageId     = dword ptr -24h
.text:00406C00 dwLanguageId    = dword ptr -20h
.text:00406C00 lpBuffer        = dword ptr -1Ch
.text:00406C00 nSize           = dword ptr -18h
.text:00406C00 Arguments       = dword ptr -14h
.text:00406C00 Buffer          = byte ptr -4
.text:00406C00 arg_0           = dword ptr  4
.text:00406C00
.text:00406C00                 sub     esp, 2Ch
.text:00406C03                 lea     edx, [esp+2Ch+Buffer]
.text:00406C07                 mov     [esp+2Ch+lpBuffer], edx ; lpBuffer
.text:00406C0B                 mov     edx, [esp+2Ch+arg_0]
.text:00406C0F                 mov     [esp+2Ch+Arguments], 0 ; Arguments
.text:00406C17                 mov     [esp+2Ch+nSize], 0 ; nSize
.text:00406C1F                 mov     [esp+2Ch+dwLanguageId], 400h ; dwLanguageId
.text:00406C27                 mov     [esp+2Ch+dwMessageId], edx ; dwMessageId
.text:00406C2B                 mov     [esp+2Ch+lpSource], 0 ; lpSource
.text:00406C33                 mov     [esp+2Ch+dwFlags], 13FFh ; dwFlags
.text:00406C3A                 call    FormatMessageA
.text:00406C3F                 sub     esp, 1Ch
.text:00406C42                 mov     eax, dword ptr [esp+2Ch+Buffer]
.text:00406C46                 add     esp, 2Ch
.text:00406C49                 retn
.text:00406C49 sub_406C00      endp
.text:00406C49
.text:00406C49 ; ---------------------------------------------------------------------------
.text:00406C4A aSWindowsErrorL db '%s: Windows error %ld: %s',0Ah,0
.text:00406C4A                                         ; DATA XREF: .text:00406CC6↓o
.text:00406C4A                                         ; .text:00406D59↓o ...
.text:00406C65                 align 10h
.text:00406C70                 sub     esp, 2Ch
.text:00406C73                 lea     ecx, [esp+20h]
.text:00406C77                 mov     [esp+28h], esi
.text:00406C7B                 mov     esi, [esp+34h]
.text:00406C7F                 mov     [esp+10h], ecx
.text:00406C83                 mov     [esp+24h], ebx
.text:00406C87                 mov     [esp+8], esi
.text:00406C8B                 mov     dword ptr [esp+18h], 0
.text:00406C93                 mov     dword ptr [esp+14h], 0
.text:00406C9B                 mov     dword ptr [esp+0Ch], 400h
.text:00406CA3                 mov     dword ptr [esp+4], 0
.text:00406CAB                 mov     dword ptr [esp], 13FFh
.text:00406CB2                 call    FormatMessageA
.text:00406CB7                 sub     esp, 1Ch
.text:00406CBA                 mov     edx, [esp+30h]
.text:00406CBE                 mov     [esp+0Ch], esi
.text:00406CC2                 mov     ebx, [esp+20h]
.text:00406CC6                 mov     dword ptr [esp+4], offset aSWindowsErrorL ; "%s: Windows error %ld: %s\n"
.text:00406CCE                 mov     [esp+8], edx
.text:00406CD2                 mov     edx, ds:_iob
.text:00406CD8                 mov     [esp+10h], ebx
.text:00406CDC                 add     edx, 40h ; '@'
.text:00406CDF                 mov     [esp], edx
.text:00406CE2                 call    fprintf
.text:00406CE7                 mov     [esp], ebx
.text:00406CEA                 call    LocalFree
.text:00406CEF                 sub     esp, 4
.text:00406CF2                 mov     ebx, [esp+24h]
.text:00406CF6                 mov     esi, [esp+28h]
.text:00406CFA                 add     esp, 2Ch
.text:00406CFD                 retn
.text:00406CFD ; ---------------------------------------------------------------------------
.text:00406CFE                 align 10h
.text:00406D00                 sub     esp, 2Ch
.text:00406D03                 mov     [esp+24h], ebx
.text:00406D07                 mov     [esp+28h], esi
.text:00406D0B                 call    GetLastError
.text:00406D10                 mov     [esp+8], eax
.text:00406D14                 lea     ecx, [esp+20h]
.text:00406D18                 mov     esi, eax
.text:00406D1A                 mov     [esp+10h], ecx
.text:00406D1E                 mov     dword ptr [esp+18h], 0
.text:00406D26                 mov     dword ptr [esp+14h], 0
.text:00406D2E                 mov     dword ptr [esp+0Ch], 400h
.text:00406D36                 mov     dword ptr [esp+4], 0
.text:00406D3E                 mov     dword ptr [esp], 13FFh
.text:00406D45                 call    FormatMessageA
.text:00406D4A                 sub     esp, 1Ch
.text:00406D4D                 mov     edx, [esp+30h]
.text:00406D51                 mov     [esp+0Ch], esi
.text:00406D55                 mov     ebx, [esp+20h]
.text:00406D59                 mov     dword ptr [esp+4], offset aSWindowsErrorL ; "%s: Windows error %ld: %s\n"
.text:00406D61                 mov     [esp+8], edx
.text:00406D65                 mov     edx, ds:_iob
.text:00406D6B                 mov     [esp+10h], ebx
.text:00406D6F                 add     edx, 40h ; '@'
.text:00406D72                 mov     [esp], edx
.text:00406D75                 call    fprintf
.text:00406D7A                 mov     [esp], ebx
.text:00406D7D                 call    LocalFree
.text:00406D82                 sub     esp, 4
.text:00406D85                 mov     ebx, [esp+24h]
.text:00406D89                 mov     esi, [esp+28h]
.text:00406D8D                 add     esp, 2Ch
.text:00406D90                 retn
.text:00406D90 ; ---------------------------------------------------------------------------
.text:00406D91 aNtdllDll       db 'ntdll.dll',0        ; DATA XREF: .text:00406DC3↓o
.text:00406D91                                         ; .text:00406E1B↓o
.text:00406D9B aRtlntstatustod db 'RtlNtStatusToDosError',0
.text:00406D9B                                         ; DATA XREF: .text:00406DD2↓o
.text:00406D9B                                         ; .text:00406E2A↓o
.text:00406DB1 ; ---------------------------------------------------------------------------
.text:00406DB1                 jmp     short loc_406DC0
.text:00406DB1 ; ---------------------------------------------------------------------------
.text:00406DB3                 align 10h
.text:00406DC0
.text:00406DC0 loc_406DC0:                             ; CODE XREF: .text:00406DB1↑j
.text:00406DC0                 sub     esp, 0Ch
.text:00406DC3                 mov     dword ptr [esp], offset aNtdllDll ; "ntdll.dll"
.text:00406DCA                 call    GetModuleHandleA
.text:00406DCF                 sub     esp, 4
.text:00406DD2                 mov     dword ptr [esp+4], offset aRtlntstatustod ; "RtlNtStatusToDosError"
.text:00406DDA                 mov     [esp], eax
.text:00406DDD                 call    GetProcAddress
.text:00406DE2                 sub     esp, 8
.text:00406DE5                 test    eax, eax
.text:00406DE7                 jz      short loc_406E00
.text:00406DE9                 mov     ecx, [esp+10h]
.text:00406DED                 mov     [esp], ecx
.text:00406DF0                 call    eax
.text:00406DF2                 sub     esp, 4
.text:00406DF5                 mov     [esp], eax
.text:00406DF8                 call    SetLastError
.text:00406DFD                 sub     esp, 4
.text:00406E00
.text:00406E00 loc_406E00:                             ; CODE XREF: .text:00406DE7↑j
.text:00406E00                 add     esp, 0Ch
.text:00406E03                 retn
.text:00406E03 ; ---------------------------------------------------------------------------
.text:00406E04                 align 10h
.text:00406E10                 sub     esp, 2Ch
.text:00406E13                 mov     [esp+24h], ebx
.text:00406E17                 mov     [esp+28h], esi
.text:00406E1B                 mov     dword ptr [esp], offset aNtdllDll ; "ntdll.dll"
.text:00406E22                 call    GetModuleHandleA
.text:00406E27                 sub     esp, 4
.text:00406E2A                 mov     dword ptr [esp+4], offset aRtlntstatustod ; "RtlNtStatusToDosError"
.text:00406E32                 mov     [esp], eax
.text:00406E35                 call    GetProcAddress
.text:00406E3A                 sub     esp, 8
.text:00406E3D                 test    eax, eax
.text:00406E3F                 jz      loc_406EC6
.text:00406E45                 mov     ebx, [esp+34h]
.text:00406E49                 mov     [esp], ebx
.text:00406E4C                 call    eax
.text:00406E4E                 sub     esp, 4
.text:00406E51                 mov     esi, eax
.text:00406E53                 lea     ecx, [esp+20h]
.text:00406E57                 mov     [esp+10h], ecx
.text:00406E5B                 mov     dword ptr [esp+18h], 0
.text:00406E63                 mov     dword ptr [esp+14h], 0
.text:00406E6B                 mov     dword ptr [esp+0Ch], 400h
.text:00406E73                 mov     [esp+8], eax
.text:00406E77                 mov     dword ptr [esp+4], 0
.text:00406E7F                 mov     dword ptr [esp], 13FFh
.text:00406E86                 call    FormatMessageA
.text:00406E8B                 sub     esp, 1Ch
.text:00406E8E                 mov     edx, [esp+30h]
.text:00406E92                 mov     [esp+0Ch], esi
.text:00406E96                 mov     ebx, [esp+20h]
.text:00406E9A                 mov     dword ptr [esp+4], offset aSWindowsErrorL ; "%s: Windows error %ld: %s\n"
.text:00406EA2                 mov     [esp+8], edx
.text:00406EA6                 mov     edx, ds:_iob
.text:00406EAC                 mov     [esp+10h], ebx
.text:00406EB0                 add     edx, 40h ; '@'
.text:00406EB3                 mov     [esp], edx
.text:00406EB6                 call    fprintf
.text:00406EBB                 mov     [esp], ebx
.text:00406EBE                 call    LocalFree
.text:00406EC3                 sub     esp, 4
.text:00406EC6
.text:00406EC6 loc_406EC6:                             ; CODE XREF: .text:00406E3F↑j
.text:00406EC6                 mov     ebx, [esp+24h]
.text:00406ECA                 mov     esi, [esp+28h]
.text:00406ECE                 add     esp, 2Ch
.text:00406ED1                 retn
.text:00406ED1 ; ---------------------------------------------------------------------------
.text:00406ED2                 align 10h
.text:00406EE0
.text:00406EE0 ; =============== S U B R O U T I N E =======================================
.text:00406EE0
.text:00406EE0 ; Attributes: thunk
.text:00406EE0
.text:00406EE0 ; int __stdcall gethostname(char *name, int namelen)
.text:00406EE0 gethostname     proc near               ; CODE XREF: sub_4067E0+1F↑p
.text:00406EE0
.text:00406EE0 name            = dword ptr  4
.text:00406EE0 namelen         = dword ptr  8
.text:00406EE0
.text:00406EE0                 jmp     ds:__imp_gethostname
.text:00406EE0 gethostname     endp
.text:00406EE0
.text:00406EE0 ; ---------------------------------------------------------------------------
.text:00406EE6                 align 10h
.text:00406EF0
.text:00406EF0 ; =============== S U B R O U T I N E =======================================
.text:00406EF0
.text:00406EF0 ; Attributes: thunk
.text:00406EF0
.text:00406EF0 ; int __stdcall WSAStartup(WORD wVersionRequested, LPWSADATA lpWSAData)
.text:00406EF0 WSAStartup      proc near               ; CODE XREF: sub_406AD0+35↑p
.text:00406EF0
.text:00406EF0 wVersionRequested= word ptr  4
.text:00406EF0 lpWSAData       = dword ptr  8
.text:00406EF0
.text:00406EF0                 jmp     ds:__imp_WSAStartup
.text:00406EF0 WSAStartup      endp
.text:00406EF0
.text:00406EF0 ; ---------------------------------------------------------------------------
.text:00406EF6                 align 10h
.text:00406F00
.text:00406F00 ; =============== S U B R O U T I N E =======================================
.text:00406F00
.text:00406F00 ; Attributes: thunk
.text:00406F00
.text:00406F00 ; int __stdcall WSACleanup()
.text:00406F00 WSACleanup      proc near               ; CODE XREF: sub_406B50+7↑p
.text:00406F00                 jmp     ds:__imp_WSACleanup
.text:00406F00 WSACleanup      endp
.text:00406F00
.text:00406F00 ; ---------------------------------------------------------------------------
.text:00406F06                 align 10h
.text:00406F10
.text:00406F10 ; =============== S U B R O U T I N E =======================================
.text:00406F10
.text:00406F10 ; Attributes: thunk
.text:00406F10
.text:00406F10 ; int __stdcall WSAGetLastError()
.text:00406F10 WSAGetLastError proc near               ; CODE XREF: sub_406BA0+7↑p
.text:00406F10                                         ; sub_406BA0+16↑p
.text:00406F10                 jmp     ds:__imp_WSAGetLastError
.text:00406F10 WSAGetLastError endp
.text:00406F10
.text:00406F10 ; ---------------------------------------------------------------------------
.text:00406F16                 align 10h
.text:00406F20
.text:00406F20 ; =============== S U B R O U T I N E =======================================
.text:00406F20
.text:00406F20 ; Attributes: thunk
.text:00406F20
.text:00406F20 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00406F20 mbrtowc         proc near               ; CODE XREF: sub_4038C0+757↑p
.text:00406F20
.text:00406F20 DstCh           = dword ptr  4
.text:00406F20 SrcCh           = dword ptr  8
.text:00406F20 SizeInBytes     = dword ptr  0Ch
.text:00406F20 State           = dword ptr  10h
.text:00406F20
.text:00406F20                 jmp     ds:__imp_mbrtowc
.text:00406F20 mbrtowc         endp
.text:00406F20
.text:00406F20 ; ---------------------------------------------------------------------------
.text:00406F26                 align 10h
.text:00406F30
.text:00406F30 ; =============== S U B R O U T I N E =======================================
.text:00406F30
.text:00406F30 ; Attributes: bp-based frame
.text:00406F30
.text:00406F30 sub_406F30      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00406F30                 push    ebp
.text:00406F31                 mov     ecx, offset byte_409000
.text:00406F36                 cmp     ecx, offset byte_409000
.text:00406F3C                 mov     ebp, esp
.text:00406F3E                 jnb     short loc_406F56
.text:00406F40
.text:00406F40 loc_406F40:                             ; CODE XREF: sub_406F30+24↓j
.text:00406F40                 mov     edx, [ecx+4]
.text:00406F43                 mov     eax, [ecx]
.text:00406F45                 add     ecx, 8
.text:00406F48                 add     [edx+400000h], eax
.text:00406F4E                 cmp     ecx, offset byte_409000
.text:00406F54                 jb      short loc_406F40
.text:00406F56
.text:00406F56 loc_406F56:                             ; CODE XREF: sub_406F30+E↑j
.text:00406F56                 pop     ebp
.text:00406F57                 retn
.text:00406F57 sub_406F30      endp
.text:00406F57
.text:00406F57 ; ---------------------------------------------------------------------------
.text:00406F58                 align 10h
.text:00406F60
.text:00406F60 ; =============== S U B R O U T I N E =======================================
.text:00406F60
.text:00406F60 ; Attributes: bp-based frame
.text:00406F60
.text:00406F60 sub_406F60      proc near               ; CODE XREF: sub_401080+16↑p
.text:00406F60                                         ; TopLevelExceptionFilter+D7↑p
.text:00406F60                 push    ebp
.text:00406F61                 mov     ebp, esp
.text:00406F63                 fninit
.text:00406F65                 pop     ebp
.text:00406F66                 retn
.text:00406F66 sub_406F60      endp
.text:00406F66
.text:00406F66 ; ---------------------------------------------------------------------------
.text:00406F67                 align 10h
.text:00406F70
.text:00406F70 ; =============== S U B R O U T I N E =======================================
.text:00406F70
.text:00406F70 ; Attributes: bp-based frame
.text:00406F70
.text:00406F70 ; void __cdecl sub_406F70()
.text:00406F70 sub_406F70      proc near               ; DATA XREF: .text:loc_406FB9↓o
.text:00406F70                                         ; sub_407000:loc_40702E↓o
.text:00406F70                 push    ebp
.text:00406F71                 mov     ebp, esp
.text:00406F73                 sub     esp, 8
.text:00406F76                 mov     eax, off_4080C4
.text:00406F7B                 mov     edx, [eax]
.text:00406F7D                 test    edx, edx
.text:00406F7F                 jnz     short loc_406F85
.text:00406F81
.text:00406F81 loc_406F81:                             ; CODE XREF: sub_406F70+2C↓j
.text:00406F81                 mov     esp, ebp
.text:00406F83                 pop     ebp
.text:00406F84                 retn
.text:00406F85 ; ---------------------------------------------------------------------------
.text:00406F85
.text:00406F85 loc_406F85:                             ; CODE XREF: sub_406F70+F↑j
.text:00406F85                                         ; sub_406F70+2A↓j
.text:00406F85                 call    dword ptr [eax]
.text:00406F87                 mov     edx, off_4080C4
.text:00406F8D                 mov     ecx, [edx+4]
.text:00406F90                 lea     eax, [edx+4]
.text:00406F93                 mov     off_4080C4, eax
.text:00406F98                 test    ecx, ecx
.text:00406F9A                 jnz     short loc_406F85
.text:00406F9C                 jmp     short loc_406F81
.text:00406F9C sub_406F70      endp
.text:00406F9C
.text:00406F9C ; ---------------------------------------------------------------------------
.text:00406F9E                 align 10h
.text:00406FA0                 push    ebp
.text:00406FA1                 mov     ebp, esp
.text:00406FA3                 sub     esp, 8
.text:00406FA6                 mov     [ebp-4], ebx
.text:00406FA9                 mov     eax, ds:dword_4073F0
.text:00406FAE                 cmp     eax, 0FFFFFFFFh
.text:00406FB1                 jz      short loc_406FDC
.text:00406FB3
.text:00406FB3 loc_406FB3:                             ; CODE XREF: .text:00406FE6↓j
.text:00406FB3                                         ; .text:00406FF9↓j
.text:00406FB3                 test    eax, eax
.text:00406FB5                 mov     ebx, eax
.text:00406FB7                 jnz     short loc_406FD0
.text:00406FB9
.text:00406FB9 loc_406FB9:                             ; CODE XREF: .text:00406FDA↓j
.text:00406FB9                 mov     dword ptr [esp], offset sub_406F70
.text:00406FC0                 call    sub_401040
.text:00406FC5                 mov     ebx, [ebp-4]
.text:00406FC8                 mov     esp, ebp
.text:00406FCA                 pop     ebp
.text:00406FCB                 retn
.text:00406FCB ; ---------------------------------------------------------------------------
.text:00406FCC                 align 10h
.text:00406FD0
.text:00406FD0 loc_406FD0:                             ; CODE XREF: .text:00406FB7↑j
.text:00406FD0                                         ; .text:00406FD8↓j
.text:00406FD0                 call    ds:dword_4073F0[ebx*4]
.text:00406FD7                 dec     ebx
.text:00406FD8                 jnz     short loc_406FD0
.text:00406FDA                 jmp     short loc_406FB9
.text:00406FDC ; ---------------------------------------------------------------------------
.text:00406FDC
.text:00406FDC loc_406FDC:                             ; CODE XREF: .text:00406FB1↑j
.text:00406FDC                 mov     ecx, ds:dword_4073F4
.text:00406FE2                 xor     eax, eax
.text:00406FE4                 test    ecx, ecx
.text:00406FE6                 jz      short loc_406FB3
.text:00406FE8                 mov     edx, offset dword_4073F0
.text:00406FED                 lea     esi, [esi+0]
.text:00406FF0
.text:00406FF0 loc_406FF0:                             ; CODE XREF: .text:00406FF7↓j
.text:00406FF0                 inc     eax
.text:00406FF1                 mov     ecx, [edx+eax*4+4]
.text:00406FF5                 test    ecx, ecx
.text:00406FF7                 jnz     short loc_406FF0
.text:00406FF9                 jmp     short loc_406FB3
.text:00406FF9 ; ---------------------------------------------------------------------------
.text:00406FFB                 align 10h
.text:00407000
.text:00407000 ; =============== S U B R O U T I N E =======================================
.text:00407000
.text:00407000 ; Attributes: bp-based frame
.text:00407000
.text:00407000 sub_407000      proc near               ; CODE XREF: sub_401800+22↑p
.text:00407000
.text:00407000 var_8           = dword ptr -8
.text:00407000 var_4           = dword ptr -4
.text:00407000
.text:00407000                 push    ebp
.text:00407001                 mov     ebp, esp
.text:00407003                 sub     esp, 8
.text:00407006                 mov     [ebp+var_4], ebx
.text:00407009                 mov     edx, dword_4080C0
.text:0040700F                 test    edx, edx
.text:00407011                 jnz     short loc_40703A
.text:00407013                 mov     eax, ds:dword_4073F0
.text:00407018                 mov     edx, 1
.text:0040701D                 mov     dword_4080C0, edx
.text:00407023                 cmp     eax, 0FFFFFFFFh
.text:00407026                 jz      short loc_40704D
.text:00407028
.text:00407028 loc_407028:                             ; CODE XREF: sub_407000+57↓j
.text:00407028                                         ; sub_407000+69↓j
.text:00407028                 test    eax, eax
.text:0040702A                 mov     ebx, eax
.text:0040702C                 jnz     short loc_407041
.text:0040702E
.text:0040702E loc_40702E:                             ; CODE XREF: sub_407000+4B↓j
.text:0040702E                 mov     [esp+8+var_8], offset sub_406F70 ; void (__cdecl *)()
.text:00407035                 call    sub_401040
.text:0040703A
.text:0040703A loc_40703A:                             ; CODE XREF: sub_407000+11↑j
.text:0040703A                 mov     ebx, [ebp+var_4]
.text:0040703D                 mov     esp, ebp
.text:0040703F                 pop     ebp
.text:00407040                 retn
.text:00407041 ; ---------------------------------------------------------------------------
.text:00407041
.text:00407041 loc_407041:                             ; CODE XREF: sub_407000+2C↑j
.text:00407041                                         ; sub_407000+49↓j
.text:00407041                 call    ds:dword_4073F0[ebx*4]
.text:00407048                 dec     ebx
.text:00407049                 jnz     short loc_407041
.text:0040704B                 jmp     short loc_40702E
.text:0040704D ; ---------------------------------------------------------------------------
.text:0040704D
.text:0040704D loc_40704D:                             ; CODE XREF: sub_407000+26↑j
.text:0040704D                 mov     ecx, ds:dword_4073F4
.text:00407053                 xor     eax, eax
.text:00407055                 test    ecx, ecx
.text:00407057                 jz      short loc_407028
.text:00407059                 mov     edx, offset dword_4073F0
.text:0040705E                 mov     esi, esi
.text:00407060
.text:00407060 loc_407060:                             ; CODE XREF: sub_407000+67↓j
.text:00407060                 inc     eax
.text:00407061                 mov     ebx, [edx+eax*4+4]
.text:00407065                 test    ebx, ebx
.text:00407067                 jnz     short loc_407060
.text:00407069                 jmp     short loc_407028
.text:00407069 sub_407000      endp
.text:00407069
.text:00407069 ; ---------------------------------------------------------------------------
.text:0040706B                 align 10h
.text:00407070
.text:00407070 ; =============== S U B R O U T I N E =======================================
.text:00407070
.text:00407070 ; Attributes: info_from_lumina
.text:00407070
.text:00407070 ; void *__cdecl _alloca(size_t Size)
.text:00407070 __alloca        proc near               ; CODE XREF: sub_401800+B↑p
.text:00407070                                         ; sub_401800+18↑p ...
.text:00407070                 push    ecx
.text:00407071                 mov     ecx, esp
.text:00407073                 add     ecx, 8
.text:00407076
.text:00407076 loc_407076:                             ; CODE XREF: __alloca+1B↓j
.text:00407076                 cmp     eax, 1000h
.text:0040707B                 jb      short loc_40708D
.text:0040707D                 sub     ecx, 1000h
.text:00407083                 or      dword ptr [ecx], 0
.text:00407086                 sub     eax, 1000h
.text:0040708B                 jmp     short loc_407076
.text:0040708D ; ---------------------------------------------------------------------------
.text:0040708D
.text:0040708D loc_40708D:                             ; CODE XREF: __alloca+B↑j
.text:0040708D                 sub     ecx, eax
.text:0040708F                 or      dword ptr [ecx], 0
.text:00407092                 mov     eax, esp
.text:00407094                 mov     esp, ecx
.text:00407096                 mov     ecx, [eax]
.text:00407098                 mov     eax, [eax+4]
.text:0040709B                 jmp     eax
.text:0040709B __alloca        endp
.text:0040709B
.text:0040709B ; ---------------------------------------------------------------------------
.text:0040709D                 align 10h
.text:004070A0                 jmp     ds:__set_app_type
.text:004070A0 ; ---------------------------------------------------------------------------
.text:004070A6                 align 10h
.text:004070B0
.text:004070B0 ; =============== S U B R O U T I N E =======================================
.text:004070B0
.text:004070B0 ; Attributes: thunk
.text:004070B0
.text:004070B0 ; void __cdecl cexit()
.text:004070B0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:004070B0                 jmp     ds:__imp__cexit
.text:004070B0 _cexit          endp
.text:004070B0
.text:004070B0 ; ---------------------------------------------------------------------------
.text:004070B6                 align 10h
.text:004070C0
.text:004070C0 ; =============== S U B R O U T I N E =======================================
.text:004070C0
.text:004070C0 ; Attributes: thunk
.text:004070C0
.text:004070C0 ; char ***__cdecl _p__environ()
.text:004070C0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:004070C0                 jmp     ds:__imp___p__environ
.text:004070C0 __p__environ    endp
.text:004070C0
.text:004070C0 ; ---------------------------------------------------------------------------
.text:004070C6                 align 10h
.text:004070D0
.text:004070D0 ; =============== S U B R O U T I N E =======================================
.text:004070D0
.text:004070D0 ; Attributes: thunk
.text:004070D0
.text:004070D0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:004070D0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:004070D0                                         ; TopLevelExceptionFilter+88↑p ...
.text:004070D0
.text:004070D0 Signal          = dword ptr  4
.text:004070D0 Function        = dword ptr  8
.text:004070D0
.text:004070D0                 jmp     ds:__imp_signal
.text:004070D0 signal          endp
.text:004070D0
.text:004070D0 ; ---------------------------------------------------------------------------
.text:004070D6                 align 10h
.text:004070E0
.text:004070E0 ; =============== S U B R O U T I N E =======================================
.text:004070E0
.text:004070E0 ; Attributes: thunk
.text:004070E0
.text:004070E0 ; int *__cdecl _p__fmode()
.text:004070E0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:004070E0                 jmp     ds:__imp___p__fmode
.text:004070E0 __p__fmode      endp
.text:004070E0
.text:004070E0 ; ---------------------------------------------------------------------------
.text:004070E6                 align 10h
.text:004070F0
.text:004070F0 ; =============== S U B R O U T I N E =======================================
.text:004070F0
.text:004070F0 ; Attributes: thunk
.text:004070F0
.text:004070F0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:004070F0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:004070F0                                         ; sub_401080+90↑p ...
.text:004070F0
.text:004070F0 FileHandle      = dword ptr  4
.text:004070F0 Mode            = dword ptr  8
.text:004070F0
.text:004070F0                 jmp     ds:__imp__setmode
.text:004070F0 _setmode        endp
.text:004070F0
.text:004070F0 ; ---------------------------------------------------------------------------
.text:004070F6                 align 10h
.text:00407100
.text:00407100 ; =============== S U B R O U T I N E =======================================
.text:00407100
.text:00407100 ; Attributes: thunk
.text:00407100
.text:00407100 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00407100                 jmp     ds:__imp___getmainargs
.text:00407100 __getmainargs   endp
.text:00407100
.text:00407100 ; ---------------------------------------------------------------------------
.text:00407106                 align 10h
.text:00407110
.text:00407110 ; =============== S U B R O U T I N E =======================================
.text:00407110
.text:00407110 ; Attributes: thunk
.text:00407110
.text:00407110 ; int *__cdecl errno()
.text:00407110 _errno          proc near               ; CODE XREF: sub_401800+72D↑p
.text:00407110                                         ; sub_403750:loc_40378D↑p ...
.text:00407110                 jmp     ds:__imp__errno
.text:00407110 _errno          endp
.text:00407110
.text:00407110 ; ---------------------------------------------------------------------------
.text:00407116                 align 10h
.text:00407120
.text:00407120 ; =============== S U B R O U T I N E =======================================
.text:00407120
.text:00407120 ; Attributes: thunk
.text:00407120
.text:00407120 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00407120 setlocale       proc near               ; CODE XREF: sub_401800+3E↑p
.text:00407120
.text:00407120 Category        = dword ptr  4
.text:00407120 Locale          = dword ptr  8
.text:00407120
.text:00407120                 jmp     ds:__imp_setlocale
.text:00407120 setlocale       endp
.text:00407120
.text:00407120 ; ---------------------------------------------------------------------------
.text:00407126                 align 10h
.text:00407130
.text:00407130 ; =============== S U B R O U T I N E =======================================
.text:00407130
.text:00407130 ; Attributes: noreturn thunk
.text:00407130
.text:00407130 ; void __cdecl __noreturn exit(int Code)
.text:00407130 exit            proc near               ; CODE XREF: sub_401800:loc_40190F↑p
.text:00407130                                         ; .text:00401F8E↑p ...
.text:00407130
.text:00407130 Code            = dword ptr  4
.text:00407130
.text:00407130                 jmp     ds:__imp_exit
.text:00407130 exit            endp
.text:00407130
.text:00407130 ; ---------------------------------------------------------------------------
.text:00407136                 align 10h
.text:00407140
.text:00407140 ; =============== S U B R O U T I N E =======================================
.text:00407140
.text:00407140 ; Attributes: thunk
.text:00407140
.text:00407140 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00407140 fputs           proc near               ; CODE XREF: sub_401800+16A↑p
.text:00407140                                         ; sub_401800+18C↑p ...
.text:00407140
.text:00407140 Buffer          = dword ptr  4
.text:00407140 Stream          = dword ptr  8
.text:00407140
.text:00407140                 jmp     ds:__imp_fputs
.text:00407140 fputs           endp
.text:00407140
.text:00407140 ; ---------------------------------------------------------------------------
.text:00407146                 align 10h
.text:00407150
.text:00407150 ; =============== S U B R O U T I N E =======================================
.text:00407150
.text:00407150 ; Attributes: thunk
.text:00407150
.text:00407150 ; int printf(const char *const Format, ...)
.text:00407150 printf          proc near               ; CODE XREF: sub_401800+148↑p
.text:00407150                                         ; sub_401800+1ED↑p ...
.text:00407150
.text:00407150 Format          = dword ptr  4
.text:00407150
.text:00407150                 jmp     ds:__imp_printf
.text:00407150 printf          endp
.text:00407150
.text:00407150 ; ---------------------------------------------------------------------------
.text:00407156                 align 10h
.text:00407160
.text:00407160 ; =============== S U B R O U T I N E =======================================
.text:00407160
.text:00407160 ; Attributes: thunk
.text:00407160
.text:00407160 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00407160 fprintf         proc near               ; CODE XREF: sub_401800+103↑p
.text:00407160                                         ; .text:00401F86↑p ...
.text:00407160
.text:00407160 Stream          = dword ptr  4
.text:00407160 Format          = dword ptr  8
.text:00407160
.text:00407160                 jmp     ds:__imp_fprintf
.text:00407160 fprintf         endp
.text:00407160
.text:00407160 ; ---------------------------------------------------------------------------
.text:00407166                 align 10h
.text:00407170
.text:00407170 ; =============== S U B R O U T I N E =======================================
.text:00407170
.text:00407170 ; Attributes: thunk
.text:00407170
.text:00407170 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00407170 _flsbuf         proc near               ; CODE XREF: sub_401800+3F2↑p
.text:00407170                                         ; sub_401800+410↑p ...
.text:00407170
.text:00407170 File            = dword ptr  8
.text:00407170
.text:00407170                 jmp     ds:__imp__flsbuf
.text:00407170 _flsbuf         endp
.text:00407170
.text:00407170 ; ---------------------------------------------------------------------------
.text:00407176                 align 10h
.text:00407180
.text:00407180 ; =============== S U B R O U T I N E =======================================
.text:00407180
.text:00407180 ; Attributes: thunk
.text:00407180
.text:00407180 ; size_t __cdecl strlen(const char *Str)
.text:00407180 strlen          proc near               ; CODE XREF: sub_4022B0+2A9↑p
.text:00407180                                         ; sub_4022B0+346↑p ...
.text:00407180
.text:00407180 Str             = dword ptr  4
.text:00407180
.text:00407180                 jmp     ds:__imp_strlen
.text:00407180 strlen          endp
.text:00407180
.text:00407180 ; ---------------------------------------------------------------------------
.text:00407186                 align 10h
.text:00407190
.text:00407190 ; =============== S U B R O U T I N E =======================================
.text:00407190
.text:00407190 ; Attributes: thunk
.text:00407190
.text:00407190 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00407190 strncmp         proc near               ; CODE XREF: sub_4022B0+23F↑p
.text:00407190                                         ; sub_4022B0+699↑p
.text:00407190
.text:00407190 Str1            = dword ptr  4
.text:00407190 Str2            = dword ptr  8
.text:00407190 MaxCount        = dword ptr  0Ch
.text:00407190
.text:00407190                 jmp     ds:__imp_strncmp
.text:00407190 strncmp         endp
.text:00407190
.text:00407190 ; ---------------------------------------------------------------------------
.text:00407196                 align 10h
.text:004071A0
.text:004071A0 ; =============== S U B R O U T I N E =======================================
.text:004071A0
.text:004071A0 ; Attributes: thunk
.text:004071A0
.text:004071A0 ; char *__cdecl getenv(const char *VarName)
.text:004071A0 getenv          proc near               ; CODE XREF: sub_4022B0+B57↑p
.text:004071A0
.text:004071A0 VarName         = dword ptr  4
.text:004071A0
.text:004071A0                 jmp     ds:__imp_getenv
.text:004071A0 getenv          endp
.text:004071A0
.text:004071A0 ; ---------------------------------------------------------------------------
.text:004071A6                 align 10h
.text:004071B0
.text:004071B0 ; =============== S U B R O U T I N E =======================================
.text:004071B0
.text:004071B0 ; Attributes: thunk
.text:004071B0
.text:004071B0 ; char *__cdecl strchr(const char *Str, int Val)
.text:004071B0 strchr          proc near               ; CODE XREF: sub_4022B0+469↑p
.text:004071B0                                         ; sub_4022B0+53A↑p ...
.text:004071B0
.text:004071B0 Str             = dword ptr  4
.text:004071B0 Val             = dword ptr  8
.text:004071B0
.text:004071B0                 jmp     ds:__imp_strchr
.text:004071B0 strchr          endp
.text:004071B0
.text:004071B0 ; ---------------------------------------------------------------------------
.text:004071B6                 align 10h
.text:004071C0
.text:004071C0 ; =============== S U B R O U T I N E =======================================
.text:004071C0
.text:004071C0 ; Attributes: thunk
.text:004071C0
.text:004071C0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:004071C0 vfprintf        proc near               ; CODE XREF: sub_4033D0+C1↑p
.text:004071C0                                         ; sub_404F50+49↑p ...
.text:004071C0
.text:004071C0 Stream          = dword ptr  4
.text:004071C0 Format          = dword ptr  8
.text:004071C0 ArgList         = dword ptr  0Ch
.text:004071C0
.text:004071C0                 jmp     ds:__imp_vfprintf
.text:004071C0 vfprintf        endp
.text:004071C0
.text:004071C0 ; ---------------------------------------------------------------------------
.text:004071C6                 align 10h
.text:004071D0
.text:004071D0 ; =============== S U B R O U T I N E =======================================
.text:004071D0
.text:004071D0 ; Attributes: noreturn thunk
.text:004071D0
.text:004071D0 ; void __cdecl __noreturn abort()
.text:004071D0 abort           proc near               ; CODE XREF: sub_4033D0:loc_40346C↑p
.text:004071D0                                         ; sub_404A00:loc_404BBA↑p ...
.text:004071D0                 jmp     ds:__imp_abort
.text:004071D0 abort           endp
.text:004071D0
.text:004071D0 ; ---------------------------------------------------------------------------
.text:004071D6                 align 10h
.text:004071E0
.text:004071E0 ; =============== S U B R O U T I N E =======================================
.text:004071E0
.text:004071E0 ; Attributes: thunk
.text:004071E0
.text:004071E0 ; int __cdecl fclose(FILE *Stream)
.text:004071E0 fclose          proc near               ; CODE XREF: sub_403750+27↑p
.text:004071E0
.text:004071E0 Stream          = dword ptr  4
.text:004071E0
.text:004071E0                 jmp     ds:__imp_fclose
.text:004071E0 fclose          endp
.text:004071E0
.text:004071E0 ; ---------------------------------------------------------------------------
.text:004071E6                 align 10h
.text:004071F0
.text:004071F0 ; =============== S U B R O U T I N E =======================================
.text:004071F0
.text:004071F0 ; Attributes: thunk
.text:004071F0
.text:004071F0 ; void __cdecl free(void *Block)
.text:004071F0 free            proc near               ; CODE XREF: sub_404A00+112↑p
.text:004071F0
.text:004071F0 Block           = dword ptr  4
.text:004071F0
.text:004071F0                 jmp     ds:__imp_free
.text:004071F0 free            endp
.text:004071F0
.text:004071F0 ; ---------------------------------------------------------------------------
.text:004071F6                 align 10h
.text:00407200
.text:00407200 ; =============== S U B R O U T I N E =======================================
.text:00407200
.text:00407200 ; Attributes: thunk
.text:00407200
.text:00407200 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00407200 iswctype        proc near               ; CODE XREF: sub_4038C0+78B↑p
.text:00407200
.text:00407200 C               = word ptr  4
.text:00407200 Type            = word ptr  8
.text:00407200
.text:00407200                 jmp     ds:__imp_iswctype
.text:00407200 iswctype        endp
.text:00407200
.text:00407200 ; ---------------------------------------------------------------------------
.text:00407206                 align 10h
.text:00407210
.text:00407210 ; =============== S U B R O U T I N E =======================================
.text:00407210
.text:00407210 ; Attributes: thunk
.text:00407210
.text:00407210 ; int __cdecl isctype(int C, int Type)
.text:00407210 _isctype        proc near               ; CODE XREF: sub_4038C0+610↑p
.text:00407210
.text:00407210 C               = dword ptr  4
.text:00407210 Type            = dword ptr  8
.text:00407210
.text:00407210                 jmp     ds:__imp__isctype
.text:00407210 _isctype        endp
.text:00407210
.text:00407210 ; ---------------------------------------------------------------------------
.text:00407216                 align 10h
.text:00407220
.text:00407220 ; =============== S U B R O U T I N E =======================================
.text:00407220
.text:00407220 ; Attributes: thunk
.text:00407220
.text:00407220 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00407220 memcpy          proc near               ; CODE XREF: .text:00404DB8↑p
.text:00407220                                         ; .text:00404E01↑p
.text:00407220
.text:00407220 Src             = dword ptr  8
.text:00407220 Size            = dword ptr  0Ch
.text:00407220
.text:00407220                 jmp     ds:__imp_memcpy
.text:00407220 memcpy          endp
.text:00407220
.text:00407220 ; ---------------------------------------------------------------------------
.text:00407226                 align 10h
.text:00407230
.text:00407230 ; =============== S U B R O U T I N E =======================================
.text:00407230
.text:00407230 ; Attributes: thunk
.text:00407230
.text:00407230 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00407230 memset          proc near               ; CODE XREF: .text:00404D36↑p
.text:00407230
.text:00407230 Val             = dword ptr  8
.text:00407230 Size            = dword ptr  0Ch
.text:00407230
.text:00407230                 jmp     ds:__imp_memset
.text:00407230 memset          endp
.text:00407230
.text:00407230 ; ---------------------------------------------------------------------------
.text:00407236                 align 10h
.text:00407240
.text:00407240 ; =============== S U B R O U T I N E =======================================
.text:00407240
.text:00407240 ; Attributes: thunk
.text:00407240
.text:00407240 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00407240 calloc          proc near               ; CODE XREF: .text:00404D73↑p
.text:00407240
.text:00407240 Count           = dword ptr  4
.text:00407240 Size            = dword ptr  8
.text:00407240
.text:00407240                 jmp     ds:__imp_calloc
.text:00407240 calloc          endp
.text:00407240
.text:00407240 ; ---------------------------------------------------------------------------
.text:00407246                 align 10h
.text:00407250
.text:00407250 ; =============== S U B R O U T I N E =======================================
.text:00407250
.text:00407250 ; Attributes: thunk
.text:00407250
.text:00407250 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00407250 realloc         proc near               ; CODE XREF: .text:00404C70↑p
.text:00407250                                         ; sub_404CA0+16↑p ...
.text:00407250
.text:00407250 Block           = dword ptr  4
.text:00407250 Size            = dword ptr  8
.text:00407250
.text:00407250                 jmp     ds:__imp_realloc
.text:00407250 realloc         endp
.text:00407250
.text:00407250 ; ---------------------------------------------------------------------------
.text:00407256                 align 10h
.text:00407260
.text:00407260 ; =============== S U B R O U T I N E =======================================
.text:00407260
.text:00407260 ; Attributes: thunk
.text:00407260
.text:00407260 ; void *__cdecl malloc(size_t Size)
.text:00407260 malloc          proc near               ; CODE XREF: sub_404BD0+24↑p
.text:00407260                                         ; sub_404C10+E↑p ...
.text:00407260
.text:00407260 Size            = dword ptr  4
.text:00407260
.text:00407260                 jmp     ds:__imp_malloc
.text:00407260 malloc          endp
.text:00407260
.text:00407260 ; ---------------------------------------------------------------------------
.text:00407266                 align 10h
.text:00407270
.text:00407270 ; =============== S U B R O U T I N E =======================================
.text:00407270
.text:00407270 ; Attributes: thunk
.text:00407270
.text:00407270 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00407270 strcmp          proc near               ; CODE XREF: sub_405054+180↑p
.text:00407270                                         ; sub_4056E0+112↑p ...
.text:00407270
.text:00407270 Str1            = dword ptr  4
.text:00407270 Str2            = dword ptr  8
.text:00407270
.text:00407270                 jmp     ds:__imp_strcmp
.text:00407270 strcmp          endp
.text:00407270
.text:00407270 ; ---------------------------------------------------------------------------
.text:00407276                 align 10h
.text:00407280
.text:00407280 ; =============== S U B R O U T I N E =======================================
.text:00407280
.text:00407280 ; Attributes: thunk
.text:00407280
.text:00407280 ; int __cdecl fflush(FILE *Stream)
.text:00407280 fflush          proc near               ; CODE XREF: sub_404F50+19↑p
.text:00407280                                         ; sub_404F50+81↑p ...
.text:00407280
.text:00407280 Stream          = dword ptr  4
.text:00407280
.text:00407280                 jmp     ds:__imp_fflush
.text:00407280 fflush          endp
.text:00407280
.text:00407280 ; ---------------------------------------------------------------------------
.text:00407286                 align 10h
.text:00407290
.text:00407290 ; =============== S U B R O U T I N E =======================================
.text:00407290
.text:00407290 ; Attributes: thunk
.text:00407290
.text:00407290 ; char *__cdecl strerror(int ErrorMessage)
.text:00407290 strerror        proc near               ; CODE XREF: sub_404F50+A5↑p
.text:00407290                                         ; sub_405054+10F↑p
.text:00407290
.text:00407290 ErrorMessage    = dword ptr  4
.text:00407290
.text:00407290                 jmp     ds:__imp_strerror
.text:00407290 strerror        endp
.text:00407290
.text:00407290 ; ---------------------------------------------------------------------------
.text:00407296                 align 10h
.text:004072A0
.text:004072A0 ; =============== S U B R O U T I N E =======================================
.text:004072A0
.text:004072A0 ; Attributes: thunk
.text:004072A0
.text:004072A0 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:004072A0 strncpy         proc near               ; CODE XREF: sub_4051F0+7D↑p
.text:004072A0                                         ; .text:00405403↑p ...
.text:004072A0
.text:004072A0 Destination     = dword ptr  4
.text:004072A0 Source          = dword ptr  8
.text:004072A0 Count           = dword ptr  0Ch
.text:004072A0
.text:004072A0                 jmp     ds:__imp_strncpy
.text:004072A0 strncpy         endp
.text:004072A0
.text:004072A0 ; ---------------------------------------------------------------------------
.text:004072A6                 align 10h
.text:004072B0
.text:004072B0 ; =============== S U B R O U T I N E =======================================
.text:004072B0
.text:004072B0 ; Attributes: thunk
.text:004072B0
.text:004072B0 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:004072B0 sprintf         proc near               ; CODE XREF: sub_405E80+6A↑p
.text:004072B0                                         ; sub_405E80+8B↑p
.text:004072B0
.text:004072B0 Buffer          = dword ptr  4
.text:004072B0 Format          = dword ptr  8
.text:004072B0
.text:004072B0                 jmp     ds:__imp_sprintf
.text:004072B0 sprintf         endp
.text:004072B0
.text:004072B0 ; ---------------------------------------------------------------------------
.text:004072B6                 align 10h
.text:004072C0
.text:004072C0 ; =============== S U B R O U T I N E =======================================
.text:004072C0
.text:004072C0 ; Attributes: thunk
.text:004072C0
.text:004072C0 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:004072C0 strcat          proc near               ; CODE XREF: sub_405E80+163↑p
.text:004072C0                                         ; sub_405E80+173↑p ...
.text:004072C0
.text:004072C0 Destination     = dword ptr  4
.text:004072C0 Source          = dword ptr  8
.text:004072C0
.text:004072C0                 jmp     ds:__imp_strcat
.text:004072C0 strcat          endp
.text:004072C0
.text:004072C0 ; ---------------------------------------------------------------------------
.text:004072C6                 align 10h
.text:004072D0
.text:004072D0 ; =============== S U B R O U T I N E =======================================
.text:004072D0
.text:004072D0 ; Attributes: thunk
.text:004072D0
.text:004072D0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004072D0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004072D0
.text:004072D0 lpTopLevelExceptionFilter= dword ptr  4
.text:004072D0
.text:004072D0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004072D0 SetUnhandledExceptionFilter endp
.text:004072D0
.text:004072D0 ; ---------------------------------------------------------------------------
.text:004072D6                 align 10h
.text:004072E0
.text:004072E0 ; =============== S U B R O U T I N E =======================================
.text:004072E0
.text:004072E0 ; Attributes: noreturn thunk
.text:004072E0
.text:004072E0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:004072E0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:004072E0
.text:004072E0 uExitCode       = dword ptr  4
.text:004072E0
.text:004072E0                 jmp     ds:__imp_ExitProcess
.text:004072E0 ExitProcess     endp
.text:004072E0
.text:004072E0 ; ---------------------------------------------------------------------------
.text:004072E6                 align 10h
.text:004072F0
.text:004072F0 ; =============== S U B R O U T I N E =======================================
.text:004072F0
.text:004072F0 ; Attributes: thunk
.text:004072F0
.text:004072F0 ; void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
.text:004072F0 GetSystemInfo   proc near               ; CODE XREF: sub_4056E0+23↑p
.text:004072F0
.text:004072F0 lpSystemInfo    = dword ptr  4
.text:004072F0
.text:004072F0                 jmp     ds:__imp_GetSystemInfo
.text:004072F0 GetSystemInfo   endp
.text:004072F0
.text:004072F0 ; ---------------------------------------------------------------------------
.text:004072F6                 align 10h
.text:00407300
.text:00407300 ; =============== S U B R O U T I N E =======================================
.text:00407300
.text:00407300 ; Attributes: thunk
.text:00407300
.text:00407300 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:00407300 LoadLibraryA    proc near               ; CODE XREF: sub_405B70+F↑p
.text:00407300
.text:00407300 lpLibFileName   = dword ptr  4
.text:00407300
.text:00407300                 jmp     ds:__imp_LoadLibraryA
.text:00407300 LoadLibraryA    endp
.text:00407300
.text:00407300 ; ---------------------------------------------------------------------------
.text:00407306                 align 10h
.text:00407310
.text:00407310 ; =============== S U B R O U T I N E =======================================
.text:00407310
.text:00407310 ; Attributes: thunk
.text:00407310
.text:00407310 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:00407310 GetProcAddress  proc near               ; CODE XREF: sub_405B70+34↑p
.text:00407310                                         ; sub_405B70+49↑p ...
.text:00407310
.text:00407310 hModule         = dword ptr  4
.text:00407310 lpProcName      = dword ptr  8
.text:00407310
.text:00407310                 jmp     ds:__imp_GetProcAddress
.text:00407310 GetProcAddress  endp
.text:00407310
.text:00407310 ; ---------------------------------------------------------------------------
.text:00407316                 align 10h
.text:00407320
.text:00407320 ; =============== S U B R O U T I N E =======================================
.text:00407320
.text:00407320 ; Attributes: thunk
.text:00407320
.text:00407320 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:00407320 FreeLibrary     proc near               ; CODE XREF: sub_405B70+9F↑p
.text:00407320
.text:00407320 hLibModule      = dword ptr  4
.text:00407320
.text:00407320                 jmp     ds:__imp_FreeLibrary
.text:00407320 FreeLibrary     endp
.text:00407320
.text:00407320 ; ---------------------------------------------------------------------------
.text:00407326                 align 10h
.text:00407330
.text:00407330 ; =============== S U B R O U T I N E =======================================
.text:00407330
.text:00407330 ; Attributes: thunk
.text:00407330
.text:00407330 ; int __stdcall WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar)
.text:00407330 WideCharToMultiByte proc near           ; CODE XREF: sub_405B70+127↑p
.text:00407330
.text:00407330 CodePage        = dword ptr  4
.text:00407330 dwFlags         = dword ptr  8
.text:00407330 lpWideCharStr   = dword ptr  0Ch
.text:00407330 cchWideChar     = dword ptr  10h
.text:00407330 lpMultiByteStr  = dword ptr  14h
.text:00407330 cbMultiByte     = dword ptr  18h
.text:00407330 lpDefaultChar   = dword ptr  1Ch
.text:00407330 lpUsedDefaultChar= dword ptr  20h
.text:00407330
.text:00407330                 jmp     ds:__imp_WideCharToMultiByte
.text:00407330 WideCharToMultiByte endp
.text:00407330
.text:00407330 ; ---------------------------------------------------------------------------
.text:00407336                 align 10h
.text:00407340
.text:00407340 ; =============== S U B R O U T I N E =======================================
.text:00407340
.text:00407340 ; Attributes: thunk
.text:00407340
.text:00407340 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:00407340 lstrcmpiA       proc near               ; CODE XREF: sub_405E80+2FB↑p
.text:00407340                                         ; sub_405E80+312↑p ...
.text:00407340
.text:00407340 lpString1       = dword ptr  4
.text:00407340 lpString2       = dword ptr  8
.text:00407340
.text:00407340                 jmp     ds:__imp_lstrcmpiA
.text:00407340 lstrcmpiA       endp
.text:00407340
.text:00407340 ; ---------------------------------------------------------------------------
.text:00407346                 align 10h
.text:00407350
.text:00407350 ; =============== S U B R O U T I N E =======================================
.text:00407350
.text:00407350 ; Attributes: thunk
.text:00407350
.text:00407350 ; DWORD __stdcall GetVersion()
.text:00407350 GetVersion      proc near               ; CODE XREF: .text:00406503↑p
.text:00407350                 jmp     ds:__imp_GetVersion
.text:00407350 GetVersion      endp
.text:00407350
.text:00407350 ; ---------------------------------------------------------------------------
.text:00407356                 align 10h
.text:00407360
.text:00407360 ; =============== S U B R O U T I N E =======================================
.text:00407360
.text:00407360 ; Attributes: thunk
.text:00407360
.text:00407360 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:00407360 GetVersionExA   proc near               ; CODE XREF: sub_406590+32↑p
.text:00407360                                         ; sub_406590+20B↑p
.text:00407360
.text:00407360 lpVersionInformation= dword ptr  4
.text:00407360
.text:00407360                 jmp     ds:__imp_GetVersionExA
.text:00407360 GetVersionExA   endp
.text:00407360
.text:00407360 ; ---------------------------------------------------------------------------
.text:00407366                 align 10h
.text:00407370
.text:00407370 ; =============== S U B R O U T I N E =======================================
.text:00407370
.text:00407370 ; Attributes: thunk
.text:00407370
.text:00407370 ; DWORD __stdcall GetLastError()
.text:00407370 GetLastError    proc near               ; CODE XREF: sub_406AA0+3↑p
.text:00407370                                         ; .text:00406D0B↑p
.text:00407370                 jmp     ds:__imp_GetLastError
.text:00407370 GetLastError    endp
.text:00407370
.text:00407370 ; ---------------------------------------------------------------------------
.text:00407376                 align 10h
.text:00407380
.text:00407380 ; =============== S U B R O U T I N E =======================================
.text:00407380
.text:00407380 ; Attributes: thunk
.text:00407380
.text:00407380 ; HLOCAL __stdcall LocalFree(HLOCAL hMem)
.text:00407380 LocalFree       proc near               ; CODE XREF: sub_406BA0+47↑p
.text:00407380                                         ; .text:00406CEA↑p ...
.text:00407380
.text:00407380 hMem            = dword ptr  4
.text:00407380
.text:00407380                 jmp     ds:__imp_LocalFree
.text:00407380 LocalFree       endp
.text:00407380
.text:00407380 ; ---------------------------------------------------------------------------
.text:00407386                 align 10h
.text:00407390
.text:00407390 ; =============== S U B R O U T I N E =======================================
.text:00407390
.text:00407390 ; Attributes: thunk
.text:00407390
.text:00407390 ; DWORD __stdcall FormatMessageA(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments)
.text:00407390 FormatMessageA  proc near               ; CODE XREF: sub_406C00+3A↑p
.text:00407390                                         ; .text:00406CB2↑p ...
.text:00407390
.text:00407390 dwFlags         = dword ptr  4
.text:00407390 lpSource        = dword ptr  8
.text:00407390 dwMessageId     = dword ptr  0Ch
.text:00407390 dwLanguageId    = dword ptr  10h
.text:00407390 lpBuffer        = dword ptr  14h
.text:00407390 nSize           = dword ptr  18h
.text:00407390 Arguments       = dword ptr  1Ch
.text:00407390
.text:00407390                 jmp     ds:__imp_FormatMessageA
.text:00407390 FormatMessageA  endp
.text:00407390
.text:00407390 ; ---------------------------------------------------------------------------
.text:00407396                 align 10h
.text:004073A0
.text:004073A0 ; =============== S U B R O U T I N E =======================================
.text:004073A0
.text:004073A0 ; Attributes: thunk
.text:004073A0
.text:004073A0 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:004073A0 GetModuleHandleA proc near              ; CODE XREF: .text:00406DCA↑p
.text:004073A0                                         ; .text:00406E22↑p
.text:004073A0
.text:004073A0 lpModuleName    = dword ptr  4
.text:004073A0
.text:004073A0                 jmp     ds:__imp_GetModuleHandleA
.text:004073A0 GetModuleHandleA endp
.text:004073A0
.text:004073A0 ; ---------------------------------------------------------------------------
.text:004073A6                 align 10h
.text:004073B0
.text:004073B0 ; =============== S U B R O U T I N E =======================================
.text:004073B0
.text:004073B0 ; Attributes: thunk
.text:004073B0
.text:004073B0 ; void __stdcall SetLastError(DWORD dwErrCode)
.text:004073B0 SetLastError    proc near               ; CODE XREF: .text:00406DF8↑p
.text:004073B0
.text:004073B0 dwErrCode       = dword ptr  4
.text:004073B0
.text:004073B0                 jmp     ds:__imp_SetLastError
.text:004073B0 SetLastError    endp
.text:004073B0
.text:004073B0 ; ---------------------------------------------------------------------------
.text:004073B6                 align 10h
.text:004073C0
.text:004073C0 ; =============== S U B R O U T I N E =======================================
.text:004073C0
.text:004073C0 ; Attributes: thunk
.text:004073C0
.text:004073C0 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:004073C0 RegOpenKeyExA   proc near               ; CODE XREF: sub_405E80+281↑p
.text:004073C0
.text:004073C0 hKey            = dword ptr  4
.text:004073C0 lpSubKey        = dword ptr  8
.text:004073C0 ulOptions       = dword ptr  0Ch
.text:004073C0 samDesired      = dword ptr  10h
.text:004073C0 phkResult       = dword ptr  14h
.text:004073C0
.text:004073C0                 jmp     ds:__imp_RegOpenKeyExA
.text:004073C0 RegOpenKeyExA   endp
.text:004073C0
.text:004073C0 ; ---------------------------------------------------------------------------
.text:004073C6                 align 10h
.text:004073D0
.text:004073D0 ; =============== S U B R O U T I N E =======================================
.text:004073D0
.text:004073D0 ; Attributes: thunk
.text:004073D0
.text:004073D0 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:004073D0 RegQueryValueExA proc near              ; CODE XREF: sub_405E80+2C4↑p
.text:004073D0
.text:004073D0 hKey            = dword ptr  4
.text:004073D0 lpValueName     = dword ptr  8
.text:004073D0 lpReserved      = dword ptr  0Ch
.text:004073D0 lpType          = dword ptr  10h
.text:004073D0 lpData          = dword ptr  14h
.text:004073D0 lpcbData        = dword ptr  18h
.text:004073D0
.text:004073D0                 jmp     ds:__imp_RegQueryValueExA
.text:004073D0 RegQueryValueExA endp
.text:004073D0
.text:004073D0 ; ---------------------------------------------------------------------------
.text:004073D6                 align 10h
.text:004073E0
.text:004073E0 ; =============== S U B R O U T I N E =======================================
.text:004073E0
.text:004073E0 ; Attributes: thunk
.text:004073E0
.text:004073E0 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:004073E0 RegCloseKey     proc near               ; CODE XREF: sub_405E80+2E8↑p
.text:004073E0
.text:004073E0 hKey            = dword ptr  4
.text:004073E0
.text:004073E0                 jmp     ds:__imp_RegCloseKey
.text:004073E0 RegCloseKey     endp
.text:004073E0
.text:004073E0 ; ---------------------------------------------------------------------------
.text:004073E6                 align 10h
.text:004073F0 dword_4073F0    dd 0FFFFFFFFh           ; DATA XREF: .text:00406FA9↑r
.text:004073F0                                         ; .text:loc_406FD0↑r ...
.text:004073F4 dword_4073F4    dd 0                    ; DATA XREF: .text:loc_406FDC↑r
.text:004073F4                                         ; sub_407000:loc_40704D↑r
.text:004073F8                 dd 0FFFFFFFFh
.text:004073FC dword_4073FC    dd 0                    ; DATA XREF: .data:off_4080C4↓o
.text:00407400                 dd 300h dup(?)
.text:00407400 _text           ends
.text:00407400
.data:00408000 ; Section 2. (virtual address 00008000)
.data:00408000 ; Virtual size                  : 000000E0 (    224.)
.data:00408000 ; Section size in file          : 00000200 (    512.)
.data:00408000 ; Offset to raw data for section: 00006800
.data:00408000 ; Flags C0000040: Data Readable Writable
.data:00408000 ; Alignment     : default
.data:00408000 ; ===========================================================================
.data:00408000
.data:00408000 ; Segment type: Pure data
.data:00408000 ; Segment permissions: Read/Write
.data:00408000 _data           segment para public 'DATA' use32
.data:00408000                 assume cs:_data
.data:00408000                 ;org 408000h
.data:00408000 dword_408000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00408000                                         ; sub_401080+CC↑r
.data:00408004 dword_408004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00408004                                         ; sub_401080+D4↑r
.data:00408008                 align 10h
.data:00408010 dword_408010    dd 1                    ; DATA XREF: sub_401800:loc_401AB0↑r
.data:00408010                                         ; sub_402E40+3↑r ...
.data:00408014 dword_408014    dd 1                    ; DATA XREF: sub_402E40+11↑r
.data:00408014                                         ; .text:00402EE1↑r
.data:00408018 dword_408018    dd 3Fh                  ; DATA XREF: sub_402E40+7D↑w
.data:00408018                                         ; .text:00402F4D↑w
.data:0040801C                 align 10h
.data:00408020 ; char *off_408020
.data:00408020 off_408020      dd offset aCopyrightC2005
.data:00408020                                         ; DATA XREF: sub_4033D0+DC↑r
.data:00408020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00408024                 align 10h
.data:00408030 dword_408030    dd 1                    ; DATA XREF: sub_404A00+22↑r
.data:00408030                                         ; sub_404A00+65↑r ...
.data:00408034 dword_408034    dd 100h                 ; DATA XREF: sub_404A00+3F↑o
.data:00408034                                         ; sub_404A00+1A2↑r ...
.data:00408038 off_408038      dd offset unk_409160    ; DATA XREF: sub_404A00+1AA↑r
.data:0040803C ; void *off_40803C
.data:0040803C off_40803C      dd offset dword_408034  ; DATA XREF: sub_404A00+39↑r
.data:0040803C                                         ; sub_404A00+60↑w ...
.data:00408040 ; int Code
.data:00408040 Code            dd 1                    ; DATA XREF: sub_403750+6D↑r
.data:00408040                                         ; sub_403750+9A↑r ...
.data:00408044                 align 10h
.data:00408050 ; char *Str2
.data:00408050 Str2            dd offset aCyrixinstead ; DATA XREF: sub_4056E0+F8↑r
.data:00408050                                         ; "CyrixInstead"
.data:00408054 ; char *off_408054
.data:00408054 off_408054      dd offset aCentaurhauls ; DATA XREF: sub_4056E0+136↑r
.data:00408054                                         ; "CentaurHauls"
.data:00408058 ; char *off_408058
.data:00408058 off_408058      dd offset aRiseriserise ; DATA XREF: sub_4056E0+15B↑r
.data:00408058                                         ; "RiseRiseRise"
.data:0040805C ; char *off_40805C
.data:0040805C off_40805C      dd offset aGenuineintel ; DATA XREF: sub_4056E0+17D↑r
.data:0040805C                                         ; "GenuineIntel"
.data:00408060 ; char *off_408060
.data:00408060 off_408060      dd offset aAuthenticamd ; DATA XREF: sub_4056E0+1A1↑r
.data:00408060                                         ; "AuthenticAMD"
.data:00408064 ; char *off_408064
.data:00408064 off_408064      dd offset aGenuinetmx86 ; DATA XREF: sub_4056E0+1C2↑r
.data:00408064                                         ; "GenuineTMx86"
.data:00408068 ; char *off_408068
.data:00408068 off_408068      dd offset aGeodeByNsc   ; DATA XREF: sub_4056E0+1F0↑r
.data:00408068                                         ; "Geode by NSC"
.data:0040806C ; char *off_40806C
.data:0040806C off_40806C      dd offset aUmcUmcUmc    ; DATA XREF: sub_4056E0+217↑r
.data:0040806C                                         ; "UMC UMC UMC "
.data:00408070 ; char *off_408070
.data:00408070 off_408070      dd offset aAmdIsbetter  ; DATA XREF: sub_4056E0+238↑r
.data:00408070                                         ; "AMD ISBETTER"
.data:00408074 ; char *off_408074
.data:00408074 off_408074      dd offset aDei          ; DATA XREF: sub_4056E0+252↑r
.data:00408074                                         ; "DEI         "
.data:00408078 ; char *off_408078
.data:00408078 off_408078      dd offset aNexgenerationa
.data:00408078                                         ; DATA XREF: sub_4056E0+26C↑r
.data:00408078                                         ; "NexGenerationAMD"
.data:0040807C ; char *off_40807C
.data:0040807C off_40807C      dd offset aNexgendriven ; DATA XREF: sub_4056E0+286↑r
.data:0040807C                                         ; "NexGenDriven"
.data:00408080 dword_408080    dd 1                    ; DATA XREF: sub_405E80:loc_405FB7↑r
.data:00408080                                         ; sub_406590+202↑w
.data:00408084                 align 10h
.data:00408090 dword_408090    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00408094                 align 10h
.data:004080A0 ; int Mode
.data:004080A0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004080A0                                         ; sub_401080+80↑r ...
.data:004080A4                 align 10h
.data:004080B0 dword_4080B0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004080B0                                         ; sub_401080+BA↑r
.data:004080B4                 align 10h
.data:004080C0 dword_4080C0    dd 0                    ; DATA XREF: sub_407000+9↑r
.data:004080C0                                         ; sub_407000+1D↑w
.data:004080C4 off_4080C4      dd offset dword_4073FC  ; DATA XREF: sub_406F70+6↑r
.data:004080C4                                         ; sub_406F70+17↑r ...
.data:004080C8                 align 1000h
.data:004080C8 _data           ends
.data:004080C8
.bss:00409000 ; Section 3. (virtual address 00009000)
.bss:00409000 ; Virtual size                  : 00000430 (   1072.)
.bss:00409000 ; Section size in file          : 00000000 (      0.)
.bss:00409000 ; Offset to raw data for section: 00000000
.bss:00409000 ; Flags C0000080: Bss Readable Writable
.bss:00409000 ; Alignment     : default
.bss:00409000 ; ===========================================================================
.bss:00409000
.bss:00409000 ; Segment type: Uninitialized
.bss:00409000 ; Segment permissions: Read/Write
.bss:00409000 _bss            segment para public 'BSS' use32
.bss:00409000                 assume cs:_bss
.bss:00409000                 ;org 409000h
.bss:00409000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00409000 byte_409000     db ?                    ; DATA XREF: sub_401800+31D↑r
.bss:00409000                                         ; sub_401800:loc_401B4A↑w ...
.bss:00409001                 align 10h
.bss:00409010 unk_409010      db    ? ;               ; DATA XREF: sub_401800+442↑o
.bss:00409010                                         ; sub_401800+45A↑o
.bss:00409011                 db    ? ;
.bss:00409012                 db    ? ;
.bss:00409013                 db    ? ;
.bss:00409014                 db    ? ;
.bss:00409015                 db    ? ;
.bss:00409016                 db    ? ;
.bss:00409017                 db    ? ;
.bss:00409018                 db    ? ;
.bss:00409019                 db    ? ;
.bss:0040901A                 db    ? ;
.bss:0040901B                 db    ? ;
.bss:0040901C                 db    ? ;
.bss:0040901D                 db    ? ;
.bss:0040901E                 db    ? ;
.bss:0040901F                 db    ? ;
.bss:00409020                 db    ? ;
.bss:00409021                 db    ? ;
.bss:00409022                 db    ? ;
.bss:00409023                 db    ? ;
.bss:00409024                 db    ? ;
.bss:00409025                 db    ? ;
.bss:00409026                 db    ? ;
.bss:00409027                 db    ? ;
.bss:00409028                 db    ? ;
.bss:00409029                 db    ? ;
.bss:0040902A                 db    ? ;
.bss:0040902B                 db    ? ;
.bss:0040902C                 db    ? ;
.bss:0040902D                 db    ? ;
.bss:0040902E                 db    ? ;
.bss:0040902F                 db    ? ;
.bss:00409030                 db    ? ;
.bss:00409031                 db    ? ;
.bss:00409032                 db    ? ;
.bss:00409033                 db    ? ;
.bss:00409034                 db    ? ;
.bss:00409035                 db    ? ;
.bss:00409036                 db    ? ;
.bss:00409037                 db    ? ;
.bss:00409038                 db    ? ;
.bss:00409039                 db    ? ;
.bss:0040903A                 db    ? ;
.bss:0040903B                 db    ? ;
.bss:0040903C                 db    ? ;
.bss:0040903D                 db    ? ;
.bss:0040903E                 db    ? ;
.bss:0040903F                 db    ? ;
.bss:00409040                 db    ? ;
.bss:00409041                 db    ? ;
.bss:00409042                 db    ? ;
.bss:00409043                 db    ? ;
.bss:00409044                 db    ? ;
.bss:00409045                 db    ? ;
.bss:00409046                 db    ? ;
.bss:00409047                 db    ? ;
.bss:00409048                 db    ? ;
.bss:00409049                 db    ? ;
.bss:0040904A                 db    ? ;
.bss:0040904B                 db    ? ;
.bss:0040904C                 db    ? ;
.bss:0040904D                 db    ? ;
.bss:0040904E                 db    ? ;
.bss:0040904F                 db    ? ;
.bss:00409050                 db    ? ;
.bss:00409051                 db    ? ;
.bss:00409052                 db    ? ;
.bss:00409053                 db    ? ;
.bss:00409054                 db    ? ;
.bss:00409055                 db    ? ;
.bss:00409056                 db    ? ;
.bss:00409057                 db    ? ;
.bss:00409058                 db    ? ;
.bss:00409059                 db    ? ;
.bss:0040905A                 db    ? ;
.bss:0040905B                 db    ? ;
.bss:0040905C                 db    ? ;
.bss:0040905D                 db    ? ;
.bss:0040905E                 db    ? ;
.bss:0040905F                 db    ? ;
.bss:00409060                 db    ? ;
.bss:00409061                 db    ? ;
.bss:00409062                 db    ? ;
.bss:00409063                 db    ? ;
.bss:00409064                 db    ? ;
.bss:00409065                 db    ? ;
.bss:00409066                 db    ? ;
.bss:00409067                 db    ? ;
.bss:00409068                 db    ? ;
.bss:00409069                 db    ? ;
.bss:0040906A                 db    ? ;
.bss:0040906B                 db    ? ;
.bss:0040906C                 db    ? ;
.bss:0040906D                 db    ? ;
.bss:0040906E                 db    ? ;
.bss:0040906F                 db    ? ;
.bss:00409070                 db    ? ;
.bss:00409071                 db    ? ;
.bss:00409072                 db    ? ;
.bss:00409073                 db    ? ;
.bss:00409074                 db    ? ;
.bss:00409075                 db    ? ;
.bss:00409076                 db    ? ;
.bss:00409077                 db    ? ;
.bss:00409078                 db    ? ;
.bss:00409079                 db    ? ;
.bss:0040907A                 db    ? ;
.bss:0040907B                 db    ? ;
.bss:0040907C                 db    ? ;
.bss:0040907D                 db    ? ;
.bss:0040907E                 db    ? ;
.bss:0040907F                 db    ? ;
.bss:00409080                 db    ? ;
.bss:00409081                 db    ? ;
.bss:00409082                 db    ? ;
.bss:00409083                 db    ? ;
.bss:00409084                 db    ? ;
.bss:00409085                 db    ? ;
.bss:00409086                 db    ? ;
.bss:00409087                 db    ? ;
.bss:00409088                 db    ? ;
.bss:00409089                 db    ? ;
.bss:0040908A                 db    ? ;
.bss:0040908B                 db    ? ;
.bss:0040908C                 db    ? ;
.bss:0040908D                 db    ? ;
.bss:0040908E                 db    ? ;
.bss:0040908F                 db    ? ;
.bss:00409090                 db    ? ;
.bss:00409091                 db    ? ;
.bss:00409092                 db    ? ;
.bss:00409093                 db    ? ;
.bss:00409094                 db    ? ;
.bss:00409095                 db    ? ;
.bss:00409096                 db    ? ;
.bss:00409097                 db    ? ;
.bss:00409098                 db    ? ;
.bss:00409099                 db    ? ;
.bss:0040909A                 db    ? ;
.bss:0040909B                 db    ? ;
.bss:0040909C                 db    ? ;
.bss:0040909D                 db    ? ;
.bss:0040909E                 db    ? ;
.bss:0040909F                 db    ? ;
.bss:004090A0                 db    ? ;
.bss:004090A1                 db    ? ;
.bss:004090A2                 db    ? ;
.bss:004090A3                 db    ? ;
.bss:004090A4                 db    ? ;
.bss:004090A5                 db    ? ;
.bss:004090A6                 db    ? ;
.bss:004090A7                 db    ? ;
.bss:004090A8                 db    ? ;
.bss:004090A9                 db    ? ;
.bss:004090AA                 db    ? ;
.bss:004090AB                 db    ? ;
.bss:004090AC                 db    ? ;
.bss:004090AD                 db    ? ;
.bss:004090AE                 db    ? ;
.bss:004090AF                 db    ? ;
.bss:004090B0                 db    ? ;
.bss:004090B1                 db    ? ;
.bss:004090B2                 db    ? ;
.bss:004090B3                 db    ? ;
.bss:004090B4                 db    ? ;
.bss:004090B5                 db    ? ;
.bss:004090B6                 db    ? ;
.bss:004090B7                 db    ? ;
.bss:004090B8                 db    ? ;
.bss:004090B9                 db    ? ;
.bss:004090BA                 db    ? ;
.bss:004090BB                 db    ? ;
.bss:004090BC                 db    ? ;
.bss:004090BD                 db    ? ;
.bss:004090BE                 db    ? ;
.bss:004090BF                 db    ? ;
.bss:004090C0                 db    ? ;
.bss:004090C1                 db    ? ;
.bss:004090C2                 db    ? ;
.bss:004090C3                 db    ? ;
.bss:004090C4                 db    ? ;
.bss:004090C5                 db    ? ;
.bss:004090C6                 db    ? ;
.bss:004090C7                 db    ? ;
.bss:004090C8                 db    ? ;
.bss:004090C9                 db    ? ;
.bss:004090CA                 db    ? ;
.bss:004090CB                 db    ? ;
.bss:004090CC                 db    ? ;
.bss:004090CD                 db    ? ;
.bss:004090CE                 db    ? ;
.bss:004090CF                 db    ? ;
.bss:004090D0                 db    ? ;
.bss:004090D1                 db    ? ;
.bss:004090D2                 db    ? ;
.bss:004090D3                 db    ? ;
.bss:004090D4                 db    ? ;
.bss:004090D5                 db    ? ;
.bss:004090D6                 db    ? ;
.bss:004090D7                 db    ? ;
.bss:004090D8                 db    ? ;
.bss:004090D9                 db    ? ;
.bss:004090DA                 db    ? ;
.bss:004090DB                 db    ? ;
.bss:004090DC                 db    ? ;
.bss:004090DD                 db    ? ;
.bss:004090DE                 db    ? ;
.bss:004090DF                 db    ? ;
.bss:004090E0                 db    ? ;
.bss:004090E1                 db    ? ;
.bss:004090E2                 db    ? ;
.bss:004090E3                 db    ? ;
.bss:004090E4                 db    ? ;
.bss:004090E5                 db    ? ;
.bss:004090E6                 db    ? ;
.bss:004090E7                 db    ? ;
.bss:004090E8                 db    ? ;
.bss:004090E9                 db    ? ;
.bss:004090EA                 db    ? ;
.bss:004090EB                 db    ? ;
.bss:004090EC                 db    ? ;
.bss:004090ED                 db    ? ;
.bss:004090EE                 db    ? ;
.bss:004090EF                 db    ? ;
.bss:004090F0                 db    ? ;
.bss:004090F1                 db    ? ;
.bss:004090F2                 db    ? ;
.bss:004090F3                 db    ? ;
.bss:004090F4                 db    ? ;
.bss:004090F5                 db    ? ;
.bss:004090F6                 db    ? ;
.bss:004090F7                 db    ? ;
.bss:004090F8                 db    ? ;
.bss:004090F9                 db    ? ;
.bss:004090FA                 db    ? ;
.bss:004090FB                 db    ? ;
.bss:004090FC                 db    ? ;
.bss:004090FD                 db    ? ;
.bss:004090FE                 db    ? ;
.bss:004090FF                 db    ? ;
.bss:00409100                 db    ? ;
.bss:00409101                 db    ? ;
.bss:00409102                 db    ? ;
.bss:00409103                 db    ? ;
.bss:00409104                 db    ? ;
.bss:00409105                 db    ? ;
.bss:00409106                 db    ? ;
.bss:00409107                 db    ? ;
.bss:00409108                 db    ? ;
.bss:00409109                 db    ? ;
.bss:0040910A                 db    ? ;
.bss:0040910B                 db    ? ;
.bss:0040910C                 db    ? ;
.bss:0040910D                 db    ? ;
.bss:0040910E                 db    ? ;
.bss:0040910F                 db    ? ;
.bss:00409110                 db    ? ;
.bss:00409111                 db    ? ;
.bss:00409112                 db    ? ;
.bss:00409113                 db    ? ;
.bss:00409114                 db    ? ;
.bss:00409115                 db    ? ;
.bss:00409116                 db    ? ;
.bss:00409117                 db    ? ;
.bss:00409118                 db    ? ;
.bss:00409119                 db    ? ;
.bss:0040911A                 db    ? ;
.bss:0040911B                 db    ? ;
.bss:0040911C                 db    ? ;
.bss:0040911D                 db    ? ;
.bss:0040911E                 db    ? ;
.bss:0040911F                 db    ? ;
.bss:00409120 dword_409120    dd ?                    ; DATA XREF: sub_402E40+9↑o
.bss:00409120                                         ; sub_402E40+17↑w ...
.bss:00409124 dword_409124    dd ?                    ; DATA XREF: sub_402E40+21↑w
.bss:00409124                                         ; .text:00402EF9↑w
.bss:00409128 dword_409128    dd ?                    ; DATA XREF: sub_402E40+77↑r
.bss:00409128                                         ; .text:00402F47↑r
.bss:0040912C dword_40912C    dd ?                    ; DATA XREF: sub_402E40+6B↑r
.bss:0040912C                                         ; .text:00402F3B↑r
.bss:00409130                 db    ? ;
.bss:00409131                 db    ? ;
.bss:00409132                 db    ? ;
.bss:00409133                 db    ? ;
.bss:00409134                 db    ? ;
.bss:00409135                 db    ? ;
.bss:00409136                 db    ? ;
.bss:00409137                 db    ? ;
.bss:00409138                 db    ? ;
.bss:00409139                 db    ? ;
.bss:0040913A                 db    ? ;
.bss:0040913B                 db    ? ;
.bss:0040913C                 db    ? ;
.bss:0040913D                 db    ? ;
.bss:0040913E                 db    ? ;
.bss:0040913F                 db    ? ;
.bss:00409140                 db    ? ;
.bss:00409141                 db    ? ;
.bss:00409142                 db    ? ;
.bss:00409143                 db    ? ;
.bss:00409144                 db    ? ;
.bss:00409145                 db    ? ;
.bss:00409146                 db    ? ;
.bss:00409147                 db    ? ;
.bss:00409148                 db    ? ;
.bss:00409149                 db    ? ;
.bss:0040914A                 db    ? ;
.bss:0040914B                 db    ? ;
.bss:0040914C                 db    ? ;
.bss:0040914D                 db    ? ;
.bss:0040914E                 db    ? ;
.bss:0040914F                 db    ? ;
.bss:00409150 ; char *dword_409150
.bss:00409150 dword_409150    dd ?                    ; DATA XREF: .text:00403724↑w
.bss:00409150                                         ; sub_403750+58↑r
.bss:00409154                 align 10h
.bss:00409160 unk_409160      db    ? ;               ; DATA XREF: sub_404A00+100↑o
.bss:00409160                                         ; .data:off_408038↑o
.bss:00409161                 db    ? ;
.bss:00409162                 db    ? ;
.bss:00409163                 db    ? ;
.bss:00409164                 db    ? ;
.bss:00409165                 db    ? ;
.bss:00409166                 db    ? ;
.bss:00409167                 db    ? ;
.bss:00409168                 db    ? ;
.bss:00409169                 db    ? ;
.bss:0040916A                 db    ? ;
.bss:0040916B                 db    ? ;
.bss:0040916C                 db    ? ;
.bss:0040916D                 db    ? ;
.bss:0040916E                 db    ? ;
.bss:0040916F                 db    ? ;
.bss:00409170                 db    ? ;
.bss:00409171                 db    ? ;
.bss:00409172                 db    ? ;
.bss:00409173                 db    ? ;
.bss:00409174                 db    ? ;
.bss:00409175                 db    ? ;
.bss:00409176                 db    ? ;
.bss:00409177                 db    ? ;
.bss:00409178                 db    ? ;
.bss:00409179                 db    ? ;
.bss:0040917A                 db    ? ;
.bss:0040917B                 db    ? ;
.bss:0040917C                 db    ? ;
.bss:0040917D                 db    ? ;
.bss:0040917E                 db    ? ;
.bss:0040917F                 db    ? ;
.bss:00409180                 db    ? ;
.bss:00409181                 db    ? ;
.bss:00409182                 db    ? ;
.bss:00409183                 db    ? ;
.bss:00409184                 db    ? ;
.bss:00409185                 db    ? ;
.bss:00409186                 db    ? ;
.bss:00409187                 db    ? ;
.bss:00409188                 db    ? ;
.bss:00409189                 db    ? ;
.bss:0040918A                 db    ? ;
.bss:0040918B                 db    ? ;
.bss:0040918C                 db    ? ;
.bss:0040918D                 db    ? ;
.bss:0040918E                 db    ? ;
.bss:0040918F                 db    ? ;
.bss:00409190                 db    ? ;
.bss:00409191                 db    ? ;
.bss:00409192                 db    ? ;
.bss:00409193                 db    ? ;
.bss:00409194                 db    ? ;
.bss:00409195                 db    ? ;
.bss:00409196                 db    ? ;
.bss:00409197                 db    ? ;
.bss:00409198                 db    ? ;
.bss:00409199                 db    ? ;
.bss:0040919A                 db    ? ;
.bss:0040919B                 db    ? ;
.bss:0040919C                 db    ? ;
.bss:0040919D                 db    ? ;
.bss:0040919E                 db    ? ;
.bss:0040919F                 db    ? ;
.bss:004091A0                 db    ? ;
.bss:004091A1                 db    ? ;
.bss:004091A2                 db    ? ;
.bss:004091A3                 db    ? ;
.bss:004091A4                 db    ? ;
.bss:004091A5                 db    ? ;
.bss:004091A6                 db    ? ;
.bss:004091A7                 db    ? ;
.bss:004091A8                 db    ? ;
.bss:004091A9                 db    ? ;
.bss:004091AA                 db    ? ;
.bss:004091AB                 db    ? ;
.bss:004091AC                 db    ? ;
.bss:004091AD                 db    ? ;
.bss:004091AE                 db    ? ;
.bss:004091AF                 db    ? ;
.bss:004091B0                 db    ? ;
.bss:004091B1                 db    ? ;
.bss:004091B2                 db    ? ;
.bss:004091B3                 db    ? ;
.bss:004091B4                 db    ? ;
.bss:004091B5                 db    ? ;
.bss:004091B6                 db    ? ;
.bss:004091B7                 db    ? ;
.bss:004091B8                 db    ? ;
.bss:004091B9                 db    ? ;
.bss:004091BA                 db    ? ;
.bss:004091BB                 db    ? ;
.bss:004091BC                 db    ? ;
.bss:004091BD                 db    ? ;
.bss:004091BE                 db    ? ;
.bss:004091BF                 db    ? ;
.bss:004091C0                 db    ? ;
.bss:004091C1                 db    ? ;
.bss:004091C2                 db    ? ;
.bss:004091C3                 db    ? ;
.bss:004091C4                 db    ? ;
.bss:004091C5                 db    ? ;
.bss:004091C6                 db    ? ;
.bss:004091C7                 db    ? ;
.bss:004091C8                 db    ? ;
.bss:004091C9                 db    ? ;
.bss:004091CA                 db    ? ;
.bss:004091CB                 db    ? ;
.bss:004091CC                 db    ? ;
.bss:004091CD                 db    ? ;
.bss:004091CE                 db    ? ;
.bss:004091CF                 db    ? ;
.bss:004091D0                 db    ? ;
.bss:004091D1                 db    ? ;
.bss:004091D2                 db    ? ;
.bss:004091D3                 db    ? ;
.bss:004091D4                 db    ? ;
.bss:004091D5                 db    ? ;
.bss:004091D6                 db    ? ;
.bss:004091D7                 db    ? ;
.bss:004091D8                 db    ? ;
.bss:004091D9                 db    ? ;
.bss:004091DA                 db    ? ;
.bss:004091DB                 db    ? ;
.bss:004091DC                 db    ? ;
.bss:004091DD                 db    ? ;
.bss:004091DE                 db    ? ;
.bss:004091DF                 db    ? ;
.bss:004091E0                 db    ? ;
.bss:004091E1                 db    ? ;
.bss:004091E2                 db    ? ;
.bss:004091E3                 db    ? ;
.bss:004091E4                 db    ? ;
.bss:004091E5                 db    ? ;
.bss:004091E6                 db    ? ;
.bss:004091E7                 db    ? ;
.bss:004091E8                 db    ? ;
.bss:004091E9                 db    ? ;
.bss:004091EA                 db    ? ;
.bss:004091EB                 db    ? ;
.bss:004091EC                 db    ? ;
.bss:004091ED                 db    ? ;
.bss:004091EE                 db    ? ;
.bss:004091EF                 db    ? ;
.bss:004091F0                 db    ? ;
.bss:004091F1                 db    ? ;
.bss:004091F2                 db    ? ;
.bss:004091F3                 db    ? ;
.bss:004091F4                 db    ? ;
.bss:004091F5                 db    ? ;
.bss:004091F6                 db    ? ;
.bss:004091F7                 db    ? ;
.bss:004091F8                 db    ? ;
.bss:004091F9                 db    ? ;
.bss:004091FA                 db    ? ;
.bss:004091FB                 db    ? ;
.bss:004091FC                 db    ? ;
.bss:004091FD                 db    ? ;
.bss:004091FE                 db    ? ;
.bss:004091FF                 db    ? ;
.bss:00409200                 db    ? ;
.bss:00409201                 db    ? ;
.bss:00409202                 db    ? ;
.bss:00409203                 db    ? ;
.bss:00409204                 db    ? ;
.bss:00409205                 db    ? ;
.bss:00409206                 db    ? ;
.bss:00409207                 db    ? ;
.bss:00409208                 db    ? ;
.bss:00409209                 db    ? ;
.bss:0040920A                 db    ? ;
.bss:0040920B                 db    ? ;
.bss:0040920C                 db    ? ;
.bss:0040920D                 db    ? ;
.bss:0040920E                 db    ? ;
.bss:0040920F                 db    ? ;
.bss:00409210                 db    ? ;
.bss:00409211                 db    ? ;
.bss:00409212                 db    ? ;
.bss:00409213                 db    ? ;
.bss:00409214                 db    ? ;
.bss:00409215                 db    ? ;
.bss:00409216                 db    ? ;
.bss:00409217                 db    ? ;
.bss:00409218                 db    ? ;
.bss:00409219                 db    ? ;
.bss:0040921A                 db    ? ;
.bss:0040921B                 db    ? ;
.bss:0040921C                 db    ? ;
.bss:0040921D                 db    ? ;
.bss:0040921E                 db    ? ;
.bss:0040921F                 db    ? ;
.bss:00409220                 db    ? ;
.bss:00409221                 db    ? ;
.bss:00409222                 db    ? ;
.bss:00409223                 db    ? ;
.bss:00409224                 db    ? ;
.bss:00409225                 db    ? ;
.bss:00409226                 db    ? ;
.bss:00409227                 db    ? ;
.bss:00409228                 db    ? ;
.bss:00409229                 db    ? ;
.bss:0040922A                 db    ? ;
.bss:0040922B                 db    ? ;
.bss:0040922C                 db    ? ;
.bss:0040922D                 db    ? ;
.bss:0040922E                 db    ? ;
.bss:0040922F                 db    ? ;
.bss:00409230                 db    ? ;
.bss:00409231                 db    ? ;
.bss:00409232                 db    ? ;
.bss:00409233                 db    ? ;
.bss:00409234                 db    ? ;
.bss:00409235                 db    ? ;
.bss:00409236                 db    ? ;
.bss:00409237                 db    ? ;
.bss:00409238                 db    ? ;
.bss:00409239                 db    ? ;
.bss:0040923A                 db    ? ;
.bss:0040923B                 db    ? ;
.bss:0040923C                 db    ? ;
.bss:0040923D                 db    ? ;
.bss:0040923E                 db    ? ;
.bss:0040923F                 db    ? ;
.bss:00409240                 db    ? ;
.bss:00409241                 db    ? ;
.bss:00409242                 db    ? ;
.bss:00409243                 db    ? ;
.bss:00409244                 db    ? ;
.bss:00409245                 db    ? ;
.bss:00409246                 db    ? ;
.bss:00409247                 db    ? ;
.bss:00409248                 db    ? ;
.bss:00409249                 db    ? ;
.bss:0040924A                 db    ? ;
.bss:0040924B                 db    ? ;
.bss:0040924C                 db    ? ;
.bss:0040924D                 db    ? ;
.bss:0040924E                 db    ? ;
.bss:0040924F                 db    ? ;
.bss:00409250                 db    ? ;
.bss:00409251                 db    ? ;
.bss:00409252                 db    ? ;
.bss:00409253                 db    ? ;
.bss:00409254                 db    ? ;
.bss:00409255                 db    ? ;
.bss:00409256                 db    ? ;
.bss:00409257                 db    ? ;
.bss:00409258                 db    ? ;
.bss:00409259                 db    ? ;
.bss:0040925A                 db    ? ;
.bss:0040925B                 db    ? ;
.bss:0040925C                 db    ? ;
.bss:0040925D                 db    ? ;
.bss:0040925E                 db    ? ;
.bss:0040925F                 db    ? ;
.bss:00409260 dword_409260    dd ?                    ; DATA XREF: .text:loc_404391↑o
.bss:00409260                                         ; .text:loc_4043B0↑o ...
.bss:00409264 dword_409264    dd ?                    ; DATA XREF: .text:loc_404430↑o
.bss:00409264                                         ; .text:004048B8↑r ...
.bss:00409268 dword_409268    dd ?                    ; DATA XREF: .text:004048B2↑r
.bss:00409268                                         ; sub_404960+2C↑r
.bss:0040926C dword_40926C    dd ?                    ; DATA XREF: .text:004048A6↑r
.bss:0040926C                                         ; sub_404960+22↑r
.bss:00409270 dword_409270    dd ?                    ; DATA XREF: .text:004048C2↑r
.bss:00409270                                         ; sub_404960+36↑r
.bss:00409274 dword_409274    dd ?                    ; DATA XREF: .text:004048D2↑r
.bss:00409274                                         ; sub_404960+4E↑r
.bss:00409278 dword_409278    dd ?                    ; DATA XREF: .text:004048EF↑r
.bss:00409278                                         ; sub_404960+62↑r
.bss:0040927C dword_40927C    dd ?                    ; DATA XREF: .text:004048E5↑r
.bss:0040927C                                         ; sub_404960+70↑r
.bss:00409280 dword_409280    dd ?                    ; DATA XREF: .text:004048C8↑r
.bss:00409280                                         ; sub_404960+7A↑r
.bss:00409284                 align 10h
.bss:00409290 ; char *Str1
.bss:00409290 Str1            dd ?                    ; DATA XREF: sub_405054:loc_40508D↑w
.bss:00409290                                         ; sub_405054:loc_4051C0↑r
.bss:00409294                 align 10h
.bss:004092A0 dword_4092A0    dd ?                    ; DATA XREF: sub_405054+2D↑r
.bss:004092A0                                         ; sub_405054+3F↑w
.bss:004092A4                 align 10h
.bss:004092B0 dword_4092B0    dd ?                    ; DATA XREF: sub_4056E0+FE↑w
.bss:004092B0                                         ; .text:00405AEC↑w
.bss:004092B4                 align 10h
.bss:004092C0 dword_4092C0    dd ?                    ; DATA XREF: .text:00406488↑r
.bss:004092C0                                         ; sub_406590:loc_406612↑w ...
.bss:004092C4                 align 10h
.bss:004092D0 ; struct _OSVERSIONINFOA VersionInformation
.bss:004092D0 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_406590:loc_4065B0↑o
.bss:004092D0                                         ; sub_406590+2C↑w ...
.bss:00409364 word_409364     dw ?                    ; DATA XREF: sub_406590:loc_406643↑r
.bss:00409366                 align 4
.bss:00409368 word_409368     dw ?                    ; DATA XREF: sub_405E80:loc_406006↑r
.bss:00409368                                         ; sub_405E80+1B4↑r ...
.bss:0040936A byte_40936A     db ?                    ; DATA XREF: sub_405E80+145↑r
.bss:0040936B                 align 10h
.bss:00409370 dword_409370    dd ?                    ; DATA XREF: sub_406590+6↑r
.bss:00409370                                         ; sub_406590+75↑w
.bss:00409374                 align 10h
.bss:00409380 dword_409380    dd ?                    ; DATA XREF: sub_406AD0+6↑r
.bss:00409380                                         ; sub_406AD0+52↑w
.bss:00409384                 align 10h
.bss:00409390 dword_409390    dd ?                    ; DATA XREF: sub_401800+38↑w
.bss:00409390                                         ; sub_401800+EF↑r ...
.bss:00409394                 db    ? ;
.bss:00409395                 db    ? ;
.bss:00409396                 db    ? ;
.bss:00409397                 db    ? ;
.bss:00409398                 db    ? ;
.bss:00409399                 db    ? ;
.bss:0040939A                 db    ? ;
.bss:0040939B                 db    ? ;
.bss:0040939C                 db    ? ;
.bss:0040939D                 db    ? ;
.bss:0040939E                 db    ? ;
.bss:0040939F                 db    ? ;
.bss:004093A0                 db    ? ;
.bss:004093A1                 db    ? ;
.bss:004093A2                 db    ? ;
.bss:004093A3                 db    ? ;
.bss:004093A4                 db    ? ;
.bss:004093A5                 db    ? ;
.bss:004093A6                 db    ? ;
.bss:004093A7                 db    ? ;
.bss:004093A8                 db    ? ;
.bss:004093A9                 db    ? ;
.bss:004093AA                 db    ? ;
.bss:004093AB                 db    ? ;
.bss:004093AC                 db    ? ;
.bss:004093AD                 db    ? ;
.bss:004093AE                 db    ? ;
.bss:004093AF                 db    ? ;
.bss:004093B0 dword_4093B0    dd ?                    ; DATA XREF: sub_402E40+71↑w
.bss:004093B0                                         ; .text:00402F41↑w
.bss:004093B4                 align 10h
.bss:004093C0 dword_4093C0    dd ?                    ; CODE XREF: sub_405054+63↑p
.bss:004093C0                                         ; DATA XREF: sub_404F50+1E↑r ...
.bss:004093C4                 align 10h
.bss:004093D0 dword_4093D0    dd ?                    ; DATA XREF: sub_404F50+4E↑w
.bss:004093D0                                         ; sub_405054+AB↑w
.bss:004093D4                 align 40h
.bss:00409400 dword_409400    dd ?                    ; DATA XREF: sub_405054+13↑r
.bss:00409404                 align 1000h
.bss:00409404 _bss            ends
.bss:00409404
.idata:0040A000 ; Section 4. (virtual address 0000A000)
.idata:0040A000 ; Virtual size                  : 00000814 (   2068.)
.idata:0040A000 ; Section size in file          : 00000A00 (   2560.)
.idata:0040A000 ; Offset to raw data for section: 00006A00
.idata:0040A000 ; Flags C0000040: Data Readable Writable
.idata:0040A000 ; Alignment     : default
.idata:0040A000 ; ===========================================================================
.idata:0040A000
.idata:0040A000 ; Segment type: Externs
.idata:0040A000 ; _idata
.idata:0040A000
.idata:0040A001
.idata:0040A1C8 ;
.idata:0040A1C8 ; Imports from libintl3.dll
.idata:0040A1C8 ;
.idata:0040A1C8                 extrn __imp_libintl_bindtextdomain:dword
.idata:0040A1C8                                         ; CODE XREF: sub_401800+52↑p
.idata:0040A1C8                                         ; DATA XREF: sub_401800+52↑r ...
.idata:0040A1CC                 extrn libintl_gettext:dword
.idata:0040A1CC                                         ; CODE XREF: sub_401800+E3↑p
.idata:0040A1CC                                         ; sub_401800+135↑p ...
.idata:0040A1D0                 extrn libintl_textdomain:dword
.idata:0040A1D0                                         ; CODE XREF: sub_401800+5F↑p
.idata:0040A1D0                                         ; DATA XREF: sub_401800+5F↑r ...
.idata:0040A1D4
.idata:0040A1DC ;
.idata:0040A1DC ; Imports from ADVAPI32.DLL
.idata:0040A1DC ;
.idata:0040A1DC ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:0040A1DC                 extrn __imp_RegCloseKey:dword
.idata:0040A1DC                                         ; DATA XREF: RegCloseKey↑r
.idata:0040A1E0 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:0040A1E0                 extrn __imp_RegOpenKeyExA:dword
.idata:0040A1E0                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:0040A1E4 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:0040A1E4                 extrn __imp_RegQueryValueExA:dword
.idata:0040A1E4                                         ; DATA XREF: RegQueryValueExA↑r
.idata:0040A1E8
.idata:0040A1F0 ;
.idata:0040A1F0 ; Imports from KERNEL32.dll
.idata:0040A1F0 ;
.idata:0040A1F0 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040A1F0                 extrn __imp_ExitProcess:dword
.idata:0040A1F0                                         ; DATA XREF: ExitProcess↑r
.idata:0040A1F4 ; DWORD (__stdcall *FormatMessageA)(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments)
.idata:0040A1F4                 extrn __imp_FormatMessageA:dword
.idata:0040A1F4                                         ; DATA XREF: FormatMessageA↑r
.idata:0040A1F8 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:0040A1F8                 extrn __imp_FreeLibrary:dword
.idata:0040A1F8                                         ; DATA XREF: FreeLibrary↑r
.idata:0040A1FC ; DWORD (__stdcall *GetLastError)()
.idata:0040A1FC                 extrn __imp_GetLastError:dword
.idata:0040A1FC                                         ; DATA XREF: GetLastError↑r
.idata:0040A200 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:0040A200                 extrn __imp_GetModuleHandleA:dword
.idata:0040A200                                         ; DATA XREF: GetModuleHandleA↑r
.idata:0040A204 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:0040A204                 extrn __imp_GetProcAddress:dword
.idata:0040A204                                         ; DATA XREF: GetProcAddress↑r
.idata:0040A208 ; void (__stdcall *GetSystemInfo)(LPSYSTEM_INFO lpSystemInfo)
.idata:0040A208                 extrn __imp_GetSystemInfo:dword
.idata:0040A208                                         ; DATA XREF: GetSystemInfo↑r
.idata:0040A20C ; DWORD (__stdcall *GetVersion)()
.idata:0040A20C                 extrn __imp_GetVersion:dword
.idata:0040A20C                                         ; DATA XREF: GetVersion↑r
.idata:0040A210 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:0040A210                 extrn __imp_GetVersionExA:dword
.idata:0040A210                                         ; DATA XREF: GetVersionExA↑r
.idata:0040A214 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:0040A214                 extrn __imp_LoadLibraryA:dword
.idata:0040A214                                         ; DATA XREF: LoadLibraryA↑r
.idata:0040A218 ; HLOCAL (__stdcall *LocalFree)(HLOCAL hMem)
.idata:0040A218                 extrn __imp_LocalFree:dword
.idata:0040A218                                         ; DATA XREF: LocalFree↑r
.idata:0040A21C ; void (__stdcall *SetLastError)(DWORD dwErrCode)
.idata:0040A21C                 extrn __imp_SetLastError:dword
.idata:0040A21C                                         ; DATA XREF: SetLastError↑r
.idata:0040A220 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0040A220                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0040A220                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0040A224 ; int (__stdcall *WideCharToMultiByte)(UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar)
.idata:0040A224                 extrn __imp_WideCharToMultiByte:dword
.idata:0040A224                                         ; DATA XREF: WideCharToMultiByte↑r
.idata:0040A228 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:0040A228                 extrn __imp_lstrcmpiA:dword
.idata:0040A228                                         ; DATA XREF: lstrcmpiA↑r
.idata:0040A22C
.idata:0040A234 ;
.idata:0040A234 ; Imports from MSVCP60.DLL
.idata:0040A234 ;
.idata:0040A234 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040A234                 extrn __imp_mbrtowc:dword
.idata:0040A234                                         ; DATA XREF: mbrtowc↑r
.idata:0040A238
.idata:0040A240 ;
.idata:0040A240 ; Imports from msvcrt.dll
.idata:0040A240 ;
.idata:0040A240                 extrn __imp___getmainargs:dword
.idata:0040A240                                         ; DATA XREF: __getmainargs↑r
.idata:0040A244 ; int _mb_cur_max
.idata:0040A244                 extrn __mb_cur_max:dword
.idata:0040A244                                         ; DATA XREF: sub_4038C0+7↑r
.idata:0040A244                                         ; sub_4038C0+5F3↑r
.idata:0040A248 ; char ***(__cdecl *__p__environ)()
.idata:0040A248                 extrn __imp___p__environ:dword
.idata:0040A248                                         ; DATA XREF: __p__environ↑r
.idata:0040A24C ; int *(__cdecl *__p__fmode)()
.idata:0040A24C                 extrn __imp___p__fmode:dword
.idata:0040A24C                                         ; DATA XREF: __p__fmode↑r
.idata:0040A250 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0040A250                 extrn __set_app_type:dword
.idata:0040A250                                         ; CODE XREF: start+D↑p
.idata:0040A250                                         ; .text:0040102D↑p
.idata:0040A250                                         ; DATA XREF: ...
.idata:0040A254 ; void (__cdecl *_cexit)()
.idata:0040A254                 extrn __imp__cexit:dword
.idata:0040A254                                         ; DATA XREF: _cexit↑r
.idata:0040A258 ; int *(__cdecl *_errno)()
.idata:0040A258                 extrn __imp__errno:dword
.idata:0040A258                                         ; DATA XREF: _errno↑r
.idata:0040A25C ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0040A25C                 extrn __imp__flsbuf:dword
.idata:0040A25C                                         ; DATA XREF: _flsbuf↑r
.idata:0040A260 ; FILE iob[]
.idata:0040A260                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0040A260                                         ; sub_401080+75↑r ...
.idata:0040A264 ; int (__cdecl *_isctype)(int C, int Type)
.idata:0040A264                 extrn __imp__isctype:dword
.idata:0040A264                                         ; DATA XREF: _isctype↑r
.idata:0040A268 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0040A268                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0040A268                                         ; DATA XREF: .text:0040106C↑r
.idata:0040A26C ; const unsigned __int16 *pctype
.idata:0040A26C                 extrn _pctype:dword     ; DATA XREF: sub_4038C0:loc_403FB4↑r
.idata:0040A270 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0040A270                 extrn __imp__setmode:dword
.idata:0040A270                                         ; DATA XREF: _setmode↑r
.idata:0040A274 ; void (__cdecl __noreturn *abort)()
.idata:0040A274                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0040A278 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0040A278                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0040A278                                         ; DATA XREF: sub_401040+C↑r
.idata:0040A27C ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0040A27C                 extrn __imp_calloc:dword
.idata:0040A27C                                         ; DATA XREF: calloc↑r
.idata:0040A280 ; void (__cdecl __noreturn *exit)(int Code)
.idata:0040A280                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0040A284 ; int (__cdecl *fclose)(FILE *Stream)
.idata:0040A284                 extrn __imp_fclose:dword
.idata:0040A284                                         ; DATA XREF: fclose↑r
.idata:0040A288 ; int (__cdecl *fflush)(FILE *Stream)
.idata:0040A288                 extrn __imp_fflush:dword
.idata:0040A288                                         ; DATA XREF: fflush↑r
.idata:0040A28C ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0040A28C                 extrn __imp_fprintf:dword
.idata:0040A28C                                         ; DATA XREF: fprintf↑r
.idata:0040A290 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0040A290                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0040A294 ; void (__cdecl *free)(void *Block)
.idata:0040A294                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0040A298 ; char *(__cdecl *getenv)(const char *VarName)
.idata:0040A298                 extrn __imp_getenv:dword
.idata:0040A298                                         ; DATA XREF: getenv↑r
.idata:0040A29C ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0040A29C                 extrn __imp_iswctype:dword
.idata:0040A29C                                         ; DATA XREF: iswctype↑r
.idata:0040A2A0 ; void *(__cdecl *malloc)(size_t Size)
.idata:0040A2A0                 extrn __imp_malloc:dword
.idata:0040A2A0                                         ; DATA XREF: malloc↑r
.idata:0040A2A4 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0040A2A4                 extrn __imp_memcpy:dword
.idata:0040A2A4                                         ; DATA XREF: memcpy↑r
.idata:0040A2A8 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0040A2A8                 extrn __imp_memset:dword
.idata:0040A2A8                                         ; DATA XREF: memset↑r
.idata:0040A2AC ; int (*printf)(const char *const Format, ...)
.idata:0040A2AC                 extrn __imp_printf:dword
.idata:0040A2AC                                         ; DATA XREF: printf↑r
.idata:0040A2B0 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0040A2B0                 extrn __imp_realloc:dword
.idata:0040A2B0                                         ; DATA XREF: realloc↑r
.idata:0040A2B4 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0040A2B4                 extrn __imp_setlocale:dword
.idata:0040A2B4                                         ; DATA XREF: setlocale↑r
.idata:0040A2B8 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0040A2B8                 extrn __imp_signal:dword
.idata:0040A2B8                                         ; DATA XREF: signal↑r
.idata:0040A2BC ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:0040A2BC                 extrn __imp_sprintf:dword
.idata:0040A2BC                                         ; DATA XREF: sprintf↑r
.idata:0040A2C0 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:0040A2C0                 extrn __imp_strcat:dword
.idata:0040A2C0                                         ; DATA XREF: strcat↑r
.idata:0040A2C4 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0040A2C4                 extrn __imp_strchr:dword
.idata:0040A2C4                                         ; DATA XREF: strchr↑r
.idata:0040A2C8 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0040A2C8                 extrn __imp_strcmp:dword
.idata:0040A2C8                                         ; DATA XREF: strcmp↑r
.idata:0040A2CC ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0040A2CC                 extrn __imp_strerror:dword
.idata:0040A2CC                                         ; DATA XREF: strerror↑r
.idata:0040A2D0 ; size_t (__cdecl *strlen)(const char *Str)
.idata:0040A2D0                 extrn __imp_strlen:dword
.idata:0040A2D0                                         ; DATA XREF: strlen↑r
.idata:0040A2D4 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0040A2D4                 extrn __imp_strncmp:dword
.idata:0040A2D4                                         ; DATA XREF: strncmp↑r
.idata:0040A2D8 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:0040A2D8                 extrn __imp_strncpy:dword
.idata:0040A2D8                                         ; DATA XREF: strncpy↑r
.idata:0040A2DC ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0040A2DC                 extrn __imp_vfprintf:dword
.idata:0040A2DC                                         ; DATA XREF: vfprintf↑r
.idata:0040A2E0
.idata:0040A2E8 ;
.idata:0040A2E8 ; Imports from WSOCK32.DLL
.idata:0040A2E8 ;
.idata:0040A2E8 ; int (__stdcall *WSACleanup)()
.idata:0040A2E8                 extrn __imp_WSACleanup:dword
.idata:0040A2E8                                         ; DATA XREF: WSACleanup↑r
.idata:0040A2EC ; int (__stdcall *WSAGetLastError)()
.idata:0040A2EC                 extrn __imp_WSAGetLastError:dword
.idata:0040A2EC                                         ; DATA XREF: WSAGetLastError↑r
.idata:0040A2F0 ; int (__stdcall *WSAStartup)(WORD wVersionRequested, LPWSADATA lpWSAData)
.idata:0040A2F0                 extrn __imp_WSAStartup:dword
.idata:0040A2F0                                         ; DATA XREF: WSAStartup↑r
.idata:0040A2F4 ; int (__stdcall *gethostname)(char *name, int namelen)
.idata:0040A2F4                 extrn __imp_gethostname:dword
.idata:0040A2F4                                         ; DATA XREF: gethostname↑r
.idata:0040A2F8
.idata:0040A2F8
.idata:0040A2F8
.idata:0040A2F8                 end start
