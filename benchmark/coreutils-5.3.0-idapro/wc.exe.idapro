.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : FF06F5DDE6F0FA5E0D6B5FE3DB498A3D6EA428CB2541585E94D66A4657F6EA62
.text:00401000 ; Input MD5    : 74D9D594E327A55A5D99DC8CC340E32E
.text:00401000 ; Input CRC32  : E155589D
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/wc.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A263 (Wed Apr 20 18:41:39 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00016320 (  90912.)
.text:00401000 ; Section size in file          : 00016400 (  91136.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4016B0+67↓p
.text:00401040                                         ; .text:00416550↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_4164F0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_418000
.text:004010A2                 mov     edx, dword_418110
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_418004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_418130, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_418130
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_4164C0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_418000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_418004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4016B0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_4164F0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aBytes          db 'bytes',0            ; DATA XREF: .text:off_4012C0↓o
.text:00401286 aChars          db 'chars',0            ; DATA XREF: .text:004012D0↓o
.text:0040128C aLines          db 'lines',0            ; DATA XREF: .text:004012E0↓o
.text:00401292 aWords          db 'words',0            ; DATA XREF: .text:004012F0↓o
.text:00401298 aMaxLineLength  db 'max-line-length',0  ; DATA XREF: .text:00401300↓o
.text:004012A8 aHelp           db 'help',0             ; DATA XREF: .text:00401310↓o
.text:004012AD aVersion        db 'version',0          ; DATA XREF: .text:00401320↓o
.text:004012B5                 align 10h
.text:004012C0 off_4012C0      dd offset aBytes        ; DATA XREF: sub_4016B0+EB↓o
.text:004012C0                                         ; "bytes"
.text:004012C4                 dd 2 dup(0)
.text:004012CC                 dd 63h
.text:004012D0                 dd offset aChars        ; "chars"
.text:004012D4                 dd 2 dup(0)
.text:004012DC                 dd 6Dh
.text:004012E0                 dd offset aLines        ; "lines"
.text:004012E4                 dd 2 dup(0)
.text:004012EC                 dd 6Ch
.text:004012F0                 dd offset aWords        ; "words"
.text:004012F4                 dd 2 dup(0)
.text:004012FC                 dd 77h
.text:00401300                 dd offset aMaxLineLength ; "max-line-length"
.text:00401304                 dd 2 dup(0)
.text:0040130C                 dd 4Ch
.text:00401310                 dd offset aHelp         ; "help"
.text:00401314                 dd 2 dup(0)
.text:0040131C                 dd 0FFFFFF7Eh
.text:00401320                 dd offset aVersion      ; "version"
.text:00401324                 dd 2 dup(0)
.text:0040132C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401340 aS_0            db ' %*s',0             ; DATA XREF: sub_401EC0+160↓o
.text:00401340                                         ; sub_401EC0+19C↓o ...
.text:00401345 ; const char Locale
.text:00401345 Locale          db 0                    ; DATA XREF: sub_4016B0+24↓o
.text:00401346                 align 20h
.text:00401360 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401360                                         ; DATA XREF: sub_4016B0+3E↓o
.text:00401383 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4016B0+46↓o
.text:00401383                                         ; sub_4016B0+53↓o
.text:0040138D ; const char aCllmw[]
.text:0040138D aCllmw          db 'clLmw',0            ; DATA XREF: sub_4016B0+F3↓o
.text:00401393                 align 10h
.text:004013A0 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:004013A0                                         ; DATA XREF: sub_4016B0:loc_4017F2↓o
.text:004013A0                                         ; .text:00401DBF↓o
.text:004013C7 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_4016B0+18F↓o
.text:004013D7 aPaulRubin      db 'Paul Rubin',0       ; DATA XREF: sub_4016B0+197↓o
.text:004013E2 a530            db '5.3.0',0            ; DATA XREF: sub_4016B0+1A2↓o
.text:004013E8 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4016B0+1AA↓o
.text:004013F6 ; const FILE stru_4013F6
.text:004013F6 stru_4013F6     FILE <8D006377h, 26B4h, 73550000h, 3A656761h, 20732520h, 54504F5Bh, \
.text:004013F6                                         ; DATA XREF: sub_4016B0+1B2↓o
.text:004013F6                                         ; sub_4016B0:loc_40187B↓o ...
.text:004013F6                       5D4E4F49h, 202E2E2Eh>
.text:00401416                 db  5Bh ; [
.text:00401417                 db  46h ; F
.text:00401418                 db  49h ; I
.text:00401419                 db  4Ch ; L
.text:0040141A                 db  45h ; E
.text:0040141B                 db  5Dh ; ]
.text:0040141C                 db  2Eh ; .
.text:0040141D                 db  2Eh ; .
.text:0040141E                 db  2Eh ; .
.text:0040141F                 db  0Ah
.text:00401420                 db    0
.text:00401421                 align 20h
.text:00401440 aPrintNewlineWo db 'Print newline, word, and byte counts for each FILE, and a total l'
.text:00401440                                         ; DATA XREF: sub_4016B0+1EA↓o
.text:00401440                                         ; .text:00401E12↓o
.text:00401440                 db 'ine if',0Ah
.text:00401440                 db 'more than one FILE is specified.  With no FILE, or when FILE is -'
.text:00401440                 db ',',0Ah
.text:00401440                 db 'read standard input.',0Ah
.text:00401440                 db '  -c, --bytes            print the byte counts',0Ah
.text:00401440                 db '  -m, --chars            print the character counts',0Ah
.text:00401440                 db '  -l, --lines            print the newline counts',0Ah,0
.text:00401576                 align 10h
.text:00401580 aLMaxLineLength db '  -L, --max-line-length  print the length of the longest line',0Ah
.text:00401580                                         ; DATA XREF: sub_4016B0+20C↓o
.text:00401580                                         ; .text:00401E34↓o
.text:00401580                 db '  -w, --words            print the word counts',0Ah,0
.text:004015EE                 align 20h
.text:00401600 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401600                                         ; DATA XREF: sub_4016B0+22E↓o
.text:00401600                                         ; .text:00401E56↓o
.text:0040162D                 align 20h
.text:00401640 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401640                                         ; DATA XREF: sub_4016B0+250↓o
.text:00401640                                         ; .text:00401E78↓o
.text:00401676 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4016B0+272↓o
.text:00401676                                         ; .text:00401E9A↓o
.text:00401676                 db 'Report bugs to <%s>.',0Ah,0
.text:0040168D aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040168D                                         ; DATA XREF: sub_4016B0+27F↓o
.text:0040168D                                         ; .text:00401EA7↓o
.text:004016A3 ; const char asc_4016A3[]
.text:004016A3 asc_4016A3      db '-',0                ; DATA XREF: sub_4016B0+39F↓o
.text:004016A3                                         ; sub_4016B0+44E↓o ...
.text:004016A5 aTotal          db 'total',0            ; DATA XREF: sub_4016B0:loc_401BB2↓o
.text:004016AB ; const char aS[]
.text:004016AB aS              db '%s',0               ; DATA XREF: sub_4016B0+5CB↓o
.text:004016AB                                         ; sub_4020F0+174↓o ...
.text:004016AE                 align 10h
.text:004016B0
.text:004016B0 ; =============== S U B R O U T I N E =======================================
.text:004016B0
.text:004016B0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004016B0
.text:004016B0 sub_4016B0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004016B0
.text:004016B0 Category        = dword ptr -78h
.text:004016B0 Locale          = dword ptr -74h
.text:004016B0 var_70          = dword ptr -70h
.text:004016B0 var_6C          = byte ptr -6Ch
.text:004016B0 var_68          = byte ptr -68h
.text:004016B0 var_64          = dword ptr -64h
.text:004016B0 var_60          = dword ptr -60h
.text:004016B0 var_5C          = dword ptr -5Ch
.text:004016B0 var_58          = dword ptr -58h
.text:004016B0 var_54          = dword ptr -54h
.text:004016B0 var_50          = dword ptr -50h
.text:004016B0 var_48          = dword ptr -48h
.text:004016B0 var_40          = dword ptr -40h
.text:004016B0 var_3C          = dword ptr -3Ch
.text:004016B0 var_38          = dword ptr -38h
.text:004016B0 var_31          = byte ptr -31h
.text:004016B0 var_30          = dword ptr -30h
.text:004016B0 var_29          = byte ptr -29h
.text:004016B0 var_28          = dword ptr -28h
.text:004016B0 var_24          = dword ptr -24h
.text:004016B0 var_20          = dword ptr -20h
.text:004016B0 Block           = dword ptr -1Ch
.text:004016B0 var_18          = dword ptr -18h
.text:004016B0 var_14          = dword ptr -14h
.text:004016B0 var_D           = byte ptr -0Dh
.text:004016B0 arg_0           = dword ptr  8
.text:004016B0 arg_4           = dword ptr  0Ch
.text:004016B0
.text:004016B0                 push    ebp
.text:004016B1                 xor     eax, eax
.text:004016B3                 mov     ebp, esp
.text:004016B5                 push    edi
.text:004016B6                 xor     edi, edi
.text:004016B8                 push    esi
.text:004016B9                 push    ebx
.text:004016BA                 sub     esp, 6Ch
.text:004016BD                 xor     ebx, ebx
.text:004016BF                 and     esp, 0FFFFFFF0h
.text:004016C2                 mov     esi, [ebp+arg_0]
.text:004016C5                 call    __alloca
.text:004016CA                 call    sub_416590
.text:004016CF                 mov     eax, [ebp+arg_4]
.text:004016D2                 mov     ecx, [eax]
.text:004016D4                 mov     [esp+78h+Locale], offset Locale ; Locale
.text:004016DC                 mov     [esp+78h+Category], 0 ; Category
.text:004016E3                 mov     ds:dword_419570, ecx
.text:004016E9                 call    setlocale
.text:004016EE                 mov     [esp+78h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004016F6                 mov     [esp+78h+Category], offset aCoreutils ; "coreutils"
.text:004016FD                 call    ds:__imp_libintl_bindtextdomain
.text:00401703                 mov     [esp+78h+Category], offset aCoreutils ; "coreutils"
.text:0040170A                 call    ds:libintl_textdomain
.text:00401710                 mov     [esp+78h+Category], offset sub_4041D0 ; void (__cdecl *)()
.text:00401717                 call    sub_401040
.text:0040171C                 mov     ds:dword_419040, edi
.text:00401722                 xor     edx, edx
.text:00401724                 xor     ecx, ecx
.text:00401726                 mov     ds:dword_419034, edx
.text:0040172C                 xor     edi, edi
.text:0040172E                 xor     eax, eax
.text:00401730                 mov     ds:dword_419044, ebx
.text:00401736                 xor     edx, edx
.text:00401738                 xor     ebx, ebx
.text:0040173A                 mov     ds:dword_419030, ecx
.text:00401740                 xor     ecx, ecx
.text:00401742                 mov     ds:dword_419000, edx
.text:00401748                 xor     edx, edx
.text:0040174A                 mov     ds:byte_419080, 0
.text:00401751                 mov     ds:byte_419070, 0
.text:00401758                 mov     ds:byte_419060, 0
.text:0040175F                 mov     ds:byte_419050, 0
.text:00401766                 mov     ds:byte_419090, 0
.text:0040176D                 mov     ds:dword_419020, edi
.text:00401773                 mov     ds:dword_419024, ebx
.text:00401779                 mov     ds:dword_419010, eax
.text:0040177E                 mov     ds:dword_419014, ecx
.text:00401784                 mov     ds:dword_419004, edx
.text:0040178A                 lea     esi, [esi+0]
.text:00401790
.text:00401790 loc_401790:                             ; CODE XREF: sub_4016B0+140↓j
.text:00401790                                         ; sub_4016B0+2AE↓j ...
.text:00401790                 mov     dword ptr [esp+78h+var_68], 0 ; int
.text:00401798                 mov     eax, [ebp+arg_4]
.text:0040179B                 mov     dword ptr [esp+78h+var_6C], offset off_4012C0 ; char
.text:004017A3                 mov     [esp+78h+var_70], offset aCllmw ; "clLmw"
.text:004017AB                 mov     [esp+78h+Locale], eax ; int
.text:004017AF                 mov     [esp+78h+Category], esi ; int
.text:004017B2                 call    sub_404060
.text:004017B7                 cmp     eax, 0FFFFFFFFh
.text:004017BA                 jz      loc_401990
.text:004017C0                 cmp     eax, 63h ; 'c'
.text:004017C3                 jz      loc_401984
.text:004017C9                 cmp     eax, 63h ; 'c'
.text:004017CC                 jg      loc_401944
.text:004017D2                 cmp     eax, 0FFFFFF7Eh
.text:004017D7                 jz      loc_40187B
.text:004017DD                 cmp     eax, 0FFFFFF7Eh
.text:004017E2                 jle     short loc_40182A
.text:004017E4                 cmp     eax, 4Ch ; 'L'
.text:004017E7                 jnz     short loc_4017F2
.text:004017E9                 mov     ds:byte_419090, 1
.text:004017F0                 jmp     short loc_401790
.text:004017F2 ; ---------------------------------------------------------------------------
.text:004017F2
.text:004017F2 loc_4017F2:                             ; CODE XREF: sub_4016B0+137↑j
.text:004017F2                                         ; sub_4016B0+17F↓j ...
.text:004017F2                 mov     [esp+78h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004017F9                 call    ds:libintl_gettext
.text:004017FF                 mov     ebx, ds:_iob
.text:00401805                 mov     edi, ds:dword_419570
.text:0040180B                 add     ebx, 40h ; '@'
.text:0040180E                 mov     [esp+78h+var_70], edi
.text:00401812                 mov     [esp+78h+Locale], eax ; Format
.text:00401816                 mov     [esp+78h+Category], ebx ; Stream
.text:00401819                 call    fprintf
.text:0040181E                 mov     [esp+78h+Category], 1 ; Code
.text:00401825
.text:00401825 loc_401825:                             ; CODE XREF: sub_4016B0+1C9↓j
.text:00401825                                         ; sub_4016B0+4CC↓j
.text:00401825                 call    exit
.text:0040182A ; ---------------------------------------------------------------------------
.text:0040182A
.text:0040182A loc_40182A:                             ; CODE XREF: sub_4016B0+132↑j
.text:0040182A                 cmp     eax, 0FFFFFF7Dh
.text:0040182F                 jnz     short loc_4017F2
.text:00401831                 mov     [esp+78h+var_60], 0
.text:00401839                 mov     edx, ds:_iob
.text:0040183F                 mov     [esp+78h+var_64], offset aDavidMackenzie ; "David MacKenzie"
.text:00401847                 mov     dword ptr [esp+78h+var_68], offset aPaulRubin ; "Paul Rubin"
.text:0040184F                 add     edx, 20h ; ' '
.text:00401852                 mov     dword ptr [esp+78h+var_6C], offset a530 ; "5.3.0"
.text:0040185A                 mov     [esp+78h+var_70], offset aGnuCoreutils ; "GNU coreutils"
.text:00401862                 mov     [esp+78h+Locale], offset stru_4013F6 ; FILE *
.text:0040186A                 mov     [esp+78h+Category], edx ; FILE *
.text:0040186D                 call    sub_404020
.text:00401872
.text:00401872 loc_401872:                             ; CODE XREF: sub_4016B0+28F↓j
.text:00401872                 mov     [esp+78h+Category], 0
.text:00401879                 jmp     short loc_401825
.text:0040187B ; ---------------------------------------------------------------------------
.text:0040187B
.text:0040187B loc_40187B:                             ; CODE XREF: sub_4016B0+127↑j
.text:0040187B                 mov     [esp+78h+Category], (offset stru_4013F6._base+2)
.text:00401882                 call    ds:libintl_gettext
.text:00401888                 mov     esi, ds:dword_419570
.text:0040188E                 mov     [esp+78h+Category], eax ; Format
.text:00401891                 mov     [esp+78h+Locale], esi
.text:00401895                 call    printf
.text:0040189A                 mov     [esp+78h+Category], offset aPrintNewlineWo ; "Print newline, word, and byte counts fo"...
.text:004018A1                 call    ds:libintl_gettext
.text:004018A7                 mov     ecx, ds:_iob
.text:004018AD                 add     ecx, 20h ; ' '
.text:004018B0                 mov     [esp+78h+Locale], ecx ; Stream
.text:004018B4                 mov     [esp+78h+Category], eax ; Buffer
.text:004018B7                 call    fputs
.text:004018BC                 mov     [esp+78h+Category], offset aLMaxLineLength ; "  -L, --max-line-length  print the leng"...
.text:004018C3                 call    ds:libintl_gettext
.text:004018C9                 mov     edi, ds:_iob
.text:004018CF                 add     edi, 20h ; ' '
.text:004018D2                 mov     [esp+78h+Locale], edi ; Stream
.text:004018D6                 mov     [esp+78h+Category], eax ; Buffer
.text:004018D9                 call    fputs
.text:004018DE                 mov     [esp+78h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004018E5                 call    ds:libintl_gettext
.text:004018EB                 mov     ebx, ds:_iob
.text:004018F1                 add     ebx, 20h ; ' '
.text:004018F4                 mov     [esp+78h+Locale], ebx ; Stream
.text:004018F8                 mov     [esp+78h+Category], eax ; Buffer
.text:004018FB                 call    fputs
.text:00401900                 mov     [esp+78h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401907                 call    ds:libintl_gettext
.text:0040190D                 mov     esi, ds:_iob
.text:00401913                 add     esi, 20h ; ' '
.text:00401916                 mov     [esp+78h+Locale], esi ; Stream
.text:0040191A                 mov     [esp+78h+Category], eax ; Buffer
.text:0040191D                 call    fputs
.text:00401922                 mov     [esp+78h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401929                 call    ds:libintl_gettext
.text:0040192F                 mov     [esp+78h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401937                 mov     [esp+78h+Category], eax ; Format
.text:0040193A                 call    printf
.text:0040193F                 jmp     loc_401872
.text:00401944 ; ---------------------------------------------------------------------------
.text:00401944
.text:00401944 loc_401944:                             ; CODE XREF: sub_4016B0+11C↑j
.text:00401944                 cmp     eax, 6Dh ; 'm'
.text:00401947                 jz      short loc_401978
.text:00401949                 cmp     eax, 6Dh ; 'm'
.text:0040194C                 jg      short loc_401963
.text:0040194E                 cmp     eax, 6Ch ; 'l'
.text:00401951                 jnz     loc_4017F2
.text:00401957                 mov     ds:byte_419050, 1
.text:0040195E                 jmp     loc_401790
.text:00401963 ; ---------------------------------------------------------------------------
.text:00401963
.text:00401963 loc_401963:                             ; CODE XREF: sub_4016B0+29C↑j
.text:00401963                 cmp     eax, 77h ; 'w'
.text:00401966                 jnz     loc_4017F2
.text:0040196C                 mov     ds:byte_419060, 1
.text:00401973                 jmp     loc_401790
.text:00401978 ; ---------------------------------------------------------------------------
.text:00401978
.text:00401978 loc_401978:                             ; CODE XREF: sub_4016B0+297↑j
.text:00401978                 mov     ds:byte_419070, 1
.text:0040197F                 jmp     loc_401790
.text:00401984 ; ---------------------------------------------------------------------------
.text:00401984
.text:00401984 loc_401984:                             ; CODE XREF: sub_4016B0+113↑j
.text:00401984                 mov     ds:byte_419080, 1
.text:0040198B                 jmp     loc_401790
.text:00401990 ; ---------------------------------------------------------------------------
.text:00401990
.text:00401990 loc_401990:                             ; CODE XREF: sub_4016B0+10A↑j
.text:00401990                 xor     edx, edx
.text:00401992                 cmp     ds:byte_419060, 0
.text:00401999                 jnz     short loc_4019A4
.text:0040199B                 cmp     ds:byte_419050, 0
.text:004019A2                 jz      short loc_4019A9
.text:004019A4
.text:004019A4 loc_4019A4:                             ; CODE XREF: sub_4016B0+2E9↑j
.text:004019A4                 mov     edx, 1
.text:004019A9
.text:004019A9 loc_4019A9:                             ; CODE XREF: sub_4016B0+2F2↑j
.text:004019A9                 movzx   edi, ds:byte_419070
.text:004019B0                 movzx   ebx, ds:byte_419080
.text:004019B7                 movzx   ecx, ds:byte_419090
.text:004019BE                 or      edx, edi
.text:004019C0                 or      edx, ebx
.text:004019C2                 or      edx, ecx
.text:004019C4                 jnz     short loc_4019DB
.text:004019C6                 mov     ds:byte_419080, 1
.text:004019CD                 mov     ds:byte_419060, 1
.text:004019D4                 mov     ds:byte_419050, 1
.text:004019DB
.text:004019DB loc_4019DB:                             ; CODE XREF: sub_4016B0+314↑j
.text:004019DB                 mov     eax, dword_418010
.text:004019E0                 sub     esi, eax
.text:004019E2                 mov     [ebp+var_14], esi
.text:004019E5                 jnz     short loc_4019EE
.text:004019E7                 mov     [ebp+var_14], 1
.text:004019EE
.text:004019EE loc_4019EE:                             ; CODE XREF: sub_4016B0+335↑j
.text:004019EE                 mov     [esp+78h+Locale], 70h ; 'p'
.text:004019F6                 mov     ecx, [ebp+arg_4]
.text:004019F9                 mov     esi, [ebp+var_14]
.text:004019FC                 lea     edx, [ecx+eax*4]
.text:004019FF                 mov     [ebp+var_18], edx
.text:00401A02                 mov     [esp+78h+Category], esi
.text:00401A05                 call    sub_4042B0
.text:00401A0A                 cmp     [ebp+var_14], 1
.text:00401A0E                 mov     [ebp+Block], eax
.text:00401A11                 jz      loc_401D70
.text:00401A17
.text:00401A17 loc_401A17:                             ; CODE XREF: sub_4016B0+6EC↓j
.text:00401A17                 mov     [ebp+var_20], 0
.text:00401A1E                 mov     edx, [ebp+var_14]
.text:00401A21                 cmp     [ebp+var_20], edx
.text:00401A24                 jge     short loc_401A8F
.text:00401A26                 mov     [ebp+var_3C], 0
.text:00401A2D                 mov     ebx, [ebp+Block]
.text:00401A30                 add     ebx, 8
.text:00401A33                 mov     [ebp+var_38], ebx
.text:00401A36
.text:00401A36 loc_401A36:                             ; CODE XREF: sub_4016B0+3DD↓j
.text:00401A36                 mov     esi, [ebp+var_20]
.text:00401A39                 mov     eax, [ebp+var_18]
.text:00401A3C                 mov     edi, [eax+esi*4]
.text:00401A3F                 mov     [ebp+var_40], edi
.text:00401A42                 test    edi, edi
.text:00401A44                 jz      short loc_401A5E
.text:00401A46                 cld
.text:00401A47                 mov     esi, [ebp+var_40]
.text:00401A4A                 mov     edx, 2
.text:00401A4F                 mov     edi, offset asc_4016A3 ; "-"
.text:00401A54                 mov     ecx, edx
.text:00401A56                 repe cmpsb
.text:00401A58                 jnz     loc_401D59
.text:00401A5E
.text:00401A5E loc_401A5E:                             ; CODE XREF: sub_4016B0+394↑j
.text:00401A5E                 mov     [esp+78h+Locale], ebx
.text:00401A62                 mov     [esp+78h+Category], 0
.text:00401A69                 call    sub_405D50
.text:00401A6E
.text:00401A6E loc_401A6E:                             ; CODE XREF: sub_4016B0+6BB↓j
.text:00401A6E                 inc     [ebp+var_20]
.text:00401A71                 add     ebx, 70h ; 'p'
.text:00401A74                 mov     edi, [ebp+var_3C]
.text:00401A77                 add     [ebp+var_38], 70h ; 'p'
.text:00401A7B                 mov     ecx, [ebp+Block]
.text:00401A7E                 mov     esi, [ebp+var_14]
.text:00401A81                 mov     [ecx+edi], eax
.text:00401A84                 add     edi, 70h ; 'p'
.text:00401A87                 cmp     [ebp+var_20], esi
.text:00401A8A                 mov     [ebp+var_3C], edi
.text:00401A8D                 jl      short loc_401A36
.text:00401A8F
.text:00401A8F loc_401A8F:                             ; CODE XREF: sub_4016B0+374↑j
.text:00401A8F                                         ; sub_4016B0+6FB↓j
.text:00401A8F                 mov     eax, [ebp+Block]
.text:00401A92                 mov     edi, 1
.text:00401A97                 mov     edx, [eax]
.text:00401A99                 test    edx, edx
.text:00401A9B                 jle     loc_401CC4
.text:00401AA1
.text:00401AA1 loc_401AA1:                             ; CODE XREF: sub_4016B0+68A↓j
.text:00401AA1                                         ; sub_4016B0+693↓j
.text:00401AA1                 mov     ds:dword_4190A0, edi
.text:00401AA7                 mov     eax, dword_418010
.text:00401AAC                 mov     esi, [ebp+arg_4]
.text:00401AAF                 mov     edi, [esi+eax*4]
.text:00401AB2                 test    edi, edi
.text:00401AB4                 jz      loc_401C9A
.text:00401ABA                 mov     [ebp+var_28], 0
.text:00401AC1                 mov     ecx, [ebp+var_14]
.text:00401AC4                 cmp     [ebp+var_28], ecx
.text:00401AC7                 mov     [ebp+var_D], 1
.text:00401ACB                 jge     loc_401B56
.text:00401AD1
.text:00401AD1 loc_401AD1:                             ; CODE XREF: sub_4016B0+4A1↓j
.text:00401AD1                 mov     [ebp+var_29], 0
.text:00401AD5                 mov     edx, [ebp+var_28]
.text:00401AD8                 cld
.text:00401AD9                 mov     ecx, [ebp+arg_4]
.text:00401ADC                 mov     edi, [ebp+var_28]
.text:00401ADF                 mov     esi, [ebp+var_28]
.text:00401AE2                 add     eax, edx
.text:00401AE4                 mov     ebx, [ecx+eax*4]
.text:00401AE7                 shl     edi, 3
.text:00401AEA                 mov     eax, [ebp+Block]
.text:00401AED                 mov     ecx, 2
.text:00401AF2                 sub     edi, esi
.text:00401AF4                 shl     edi, 4
.text:00401AF7                 mov     esi, ebx
.text:00401AF9                 add     edi, eax
.text:00401AFB                 mov     [ebp+var_30], edi
.text:00401AFE                 mov     edi, offset asc_4016A3 ; "-"
.text:00401B03                 repe cmpsb
.text:00401B05                 jnz     loc_401C30
.text:00401B0B                 mov     ds:byte_4190B0, 1
.text:00401B12                 mov     edi, [ebp+var_30]
.text:00401B15                 mov     [esp+78h+Locale], ebx
.text:00401B19                 mov     [esp+78h+Category], 0
.text:00401B20                 mov     [esp+78h+var_70], edi
.text:00401B24                 call    sub_4020F0
.text:00401B29                 movzx   eax, al
.text:00401B2C
.text:00401B2C loc_401B2C:                             ; CODE XREF: sub_4016B0+5BD↓j
.text:00401B2C                 test    al, al
.text:00401B2E                 jz      short loc_401B3A
.text:00401B30                 cmp     [ebp+var_D], 0
.text:00401B34                 jz      short loc_401B3A
.text:00401B36                 mov     [ebp+var_29], 1
.text:00401B3A
.text:00401B3A loc_401B3A:                             ; CODE XREF: sub_4016B0+47E↑j
.text:00401B3A                                         ; sub_4016B0+484↑j ...
.text:00401B3A                 inc     [ebp+var_28]
.text:00401B3D                 mov     eax, [ebp+var_14]
.text:00401B40                 movzx   ecx, [ebp+var_29]
.text:00401B44                 cmp     [ebp+var_28], eax
.text:00401B47                 mov     [ebp+var_D], cl
.text:00401B4A                 jge     short loc_401B56
.text:00401B4C                 mov     eax, dword_418010
.text:00401B51                 jmp     loc_401AD1
.text:00401B56 ; ---------------------------------------------------------------------------
.text:00401B56
.text:00401B56 loc_401B56:                             ; CODE XREF: sub_4016B0+41B↑j
.text:00401B56                                         ; sub_4016B0+49A↑j
.text:00401B56                 cmp     [ebp+var_14], 1
.text:00401B5A                 jg      short loc_401BB2
.text:00401B5C
.text:00401B5C loc_401B5C:                             ; CODE XREF: sub_4016B0+57B↓j
.text:00401B5C                                         ; sub_4016B0+60F↓j
.text:00401B5C                 mov     eax, [ebp+Block]
.text:00401B5F                 mov     [esp+78h+Category], eax ; Block
.text:00401B62                 call    free
.text:00401B67                 cmp     ds:byte_4190B0, 0
.text:00401B6E                 jnz     short loc_401B81
.text:00401B70
.text:00401B70 loc_401B70:                             ; CODE XREF: sub_4016B0+4DF↓j
.text:00401B70                                         ; sub_4016B0+500↓j
.text:00401B70                 xor     edx, edx
.text:00401B72                 cmp     [ebp+var_D], 0
.text:00401B76                 setz    dl
.text:00401B79                 mov     [esp+78h+Category], edx
.text:00401B7C                 jmp     loc_401825
.text:00401B81 ; ---------------------------------------------------------------------------
.text:00401B81
.text:00401B81 loc_401B81:                             ; CODE XREF: sub_4016B0+4BE↑j
.text:00401B81                 mov     [esp+78h+Category], 0 ; FileHandle
.text:00401B88                 call    _close
.text:00401B8D                 test    eax, eax
.text:00401B8F                 jz      short loc_401B70
.text:00401B91                 call    _errno
.text:00401B96                 mov     [esp+78h+var_70], offset asc_4016A3 ; "-"
.text:00401B9E                 mov     esi, [eax]
.text:00401BA0                 mov     [esp+78h+Category], 1 ; Code
.text:00401BA7                 mov     [esp+78h+Locale], esi ; ErrorMessage
.text:00401BAB                 call    sub_405AB0
.text:00401BB0                 jmp     short loc_401B70
.text:00401BB2 ; ---------------------------------------------------------------------------
.text:00401BB2
.text:00401BB2 loc_401BB2:                             ; CODE XREF: sub_4016B0+4AA↑j
.text:00401BB2                 mov     [esp+78h+Category], offset aTotal ; "total"
.text:00401BB9                 call    ds:libintl_gettext
.text:00401BBF                 mov     ecx, ds:dword_419040
.text:00401BC5                 mov     ebx, ds:dword_419044
.text:00401BCB                 mov     edx, ds:dword_419030
.text:00401BD1                 mov     [esp+78h+var_58], ecx
.text:00401BD5                 mov     edi, ds:dword_419034
.text:00401BDB                 mov     esi, ds:dword_419020
.text:00401BE1                 mov     [esp+78h+var_54], ebx
.text:00401BE5                 mov     ecx, ds:dword_419024
.text:00401BEB                 mov     ebx, ds:dword_419010
.text:00401BF1                 mov     [esp+78h+var_60], edx
.text:00401BF5                 mov     edx, ds:dword_419000
.text:00401BFB                 mov     [esp+78h+var_5C], edi
.text:00401BFF                 mov     edi, ds:dword_419014
.text:00401C05                 mov     dword ptr [esp+78h+var_68], esi
.text:00401C09                 mov     esi, ds:dword_419004
.text:00401C0F                 mov     [esp+78h+var_50], eax
.text:00401C13                 mov     [esp+78h+var_64], ecx
.text:00401C17                 mov     [esp+78h+var_70], ebx
.text:00401C1B                 mov     dword ptr [esp+78h+var_6C], edi
.text:00401C1F                 mov     [esp+78h+Category], edx
.text:00401C22                 mov     [esp+78h+Locale], esi
.text:00401C26                 call    sub_401EC0
.text:00401C2B                 jmp     loc_401B5C
.text:00401C30 ; ---------------------------------------------------------------------------
.text:00401C30
.text:00401C30 loc_401C30:                             ; CODE XREF: sub_4016B0+455↑j
.text:00401C30                 mov     [esp+78h+Locale], 0 ; OpenFlag
.text:00401C38                 mov     [esp+78h+Category], ebx ; FileName
.text:00401C3B                 call    _open
.text:00401C40                 cmp     eax, 0FFFFFFFFh
.text:00401C43                 mov     esi, eax
.text:00401C45                 jz      short loc_401C72
.text:00401C47                 mov     [esp+78h+Locale], ebx
.text:00401C4B                 mov     ecx, [ebp+var_30]
.text:00401C4E                 mov     [esp+78h+Category], eax
.text:00401C51                 mov     [esp+78h+var_70], ecx
.text:00401C55                 call    sub_4020F0
.text:00401C5A                 mov     [ebp+var_31], al
.text:00401C5D                 mov     [esp+78h+Category], esi ; FileHandle
.text:00401C60                 call    _close
.text:00401C65                 test    eax, eax
.text:00401C67                 jnz     short loc_401C72
.text:00401C69                 movzx   eax, [ebp+var_31]
.text:00401C6D                 jmp     loc_401B2C
.text:00401C72 ; ---------------------------------------------------------------------------
.text:00401C72
.text:00401C72 loc_401C72:                             ; CODE XREF: sub_4016B0+595↑j
.text:00401C72                                         ; sub_4016B0+5B7↑j
.text:00401C72                 call    _errno
.text:00401C77                 mov     dword ptr [esp+78h+var_6C], ebx ; char
.text:00401C7B                 mov     [esp+78h+var_70], offset aS ; "%s"
.text:00401C83                 mov     ebx, [eax]
.text:00401C85                 mov     [esp+78h+Category], 0 ; Code
.text:00401C8C                 mov     [esp+78h+Locale], ebx ; ErrorMessage
.text:00401C90                 call    sub_405AB0
.text:00401C95                 jmp     loc_401B3A
.text:00401C9A ; ---------------------------------------------------------------------------
.text:00401C9A
.text:00401C9A loc_401C9A:                             ; CODE XREF: sub_4016B0+404↑j
.text:00401C9A                 mov     ds:byte_4190B0, 1
.text:00401CA1                 mov     edx, [ebp+Block]
.text:00401CA4                 mov     [esp+78h+Locale], 0
.text:00401CAC                 mov     [esp+78h+Category], 0
.text:00401CB3                 mov     [esp+78h+var_70], edx
.text:00401CB7                 call    sub_4020F0
.text:00401CBC                 mov     [ebp+var_D], al
.text:00401CBF                 jmp     loc_401B5C
.text:00401CC4 ; ---------------------------------------------------------------------------
.text:00401CC4
.text:00401CC4 loc_401CC4:                             ; CODE XREF: sub_4016B0+3EB↑j
.text:00401CC4                 mov     [ebp+var_24], 1
.text:00401CCB                 mov     ebx, [ebp+var_14]
.text:00401CCE                 xor     edx, edx
.text:00401CD0                 xor     ecx, ecx
.text:00401CD2                 test    ebx, ebx
.text:00401CD4                 jle     short loc_401D48
.text:00401CD6                 mov     ebx, [ebp+var_14]
.text:00401CD9                 xor     esi, esi
.text:00401CDB                 mov     [ebp+var_48], ebx
.text:00401CDE
.text:00401CDE loc_401CDE:                             ; CODE XREF: sub_4016B0+655↓j
.text:00401CDE                 mov     ebx, [ebp+Block]
.text:00401CE1                 mov     eax, [ebx+esi]
.text:00401CE4                 test    eax, eax
.text:00401CE6                 jnz     short loc_401CFF
.text:00401CE8                 mov     eax, [ebx+esi+8]
.text:00401CEC                 and     eax, 0F000h
.text:00401CF1                 cmp     eax, 8000h
.text:00401CF6                 jz      short loc_401D4F
.text:00401CF8                 mov     [ebp+var_24], 7
.text:00401CFF
.text:00401CFF loc_401CFF:                             ; CODE XREF: sub_4016B0+636↑j
.text:00401CFF                                         ; sub_4016B0+6A7↓j
.text:00401CFF                 add     esi, 70h ; 'p'
.text:00401D02                 dec     [ebp+var_48]
.text:00401D05                 jnz     short loc_401CDE
.text:00401D07                 cmp     ecx, 0
.text:00401D0A                 jbe     short loc_401D48
.text:00401D0C
.text:00401D0C loc_401D0C:                             ; CODE XREF: sub_4016B0+680↓j
.text:00401D0C                                         ; sub_4016B0+685↓j ...
.text:00401D0C                 mov     [esp+78h+Locale], ecx
.text:00401D10                 inc     edi
.text:00401D11                 mov     [esp+78h+var_70], 0Ah
.text:00401D19                 mov     dword ptr [esp+78h+var_6C], 0
.text:00401D21                 mov     [esp+78h+Category], edx
.text:00401D24                 call    sub_416600
.text:00401D29                 mov     ecx, edx
.text:00401D2B                 cmp     ecx, 0
.text:00401D2E                 mov     edx, eax
.text:00401D30                 ja      short loc_401D0C
.text:00401D32                 cmp     eax, 9
.text:00401D35                 ja      short loc_401D0C
.text:00401D37
.text:00401D37 loc_401D37:                             ; CODE XREF: sub_4016B0+69D↓j
.text:00401D37                 cmp     edi, [ebp+var_24]
.text:00401D3A                 jge     loc_401AA1
.text:00401D40                 mov     edi, [ebp+var_24]
.text:00401D43                 jmp     loc_401AA1
.text:00401D48 ; ---------------------------------------------------------------------------
.text:00401D48
.text:00401D48 loc_401D48:                             ; CODE XREF: sub_4016B0+624↑j
.text:00401D48                                         ; sub_4016B0+65A↑j
.text:00401D48                 cmp     edx, 9
.text:00401D4B                 ja      short loc_401D0C
.text:00401D4D                 jmp     short loc_401D37
.text:00401D4F ; ---------------------------------------------------------------------------
.text:00401D4F
.text:00401D4F loc_401D4F:                             ; CODE XREF: sub_4016B0+646↑j
.text:00401D4F                 add     edx, [ebx+esi+38h]
.text:00401D53                 adc     ecx, [ebx+esi+3Ch]
.text:00401D57                 jmp     short loc_401CFF
.text:00401D59 ; ---------------------------------------------------------------------------
.text:00401D59
.text:00401D59 loc_401D59:                             ; CODE XREF: sub_4016B0+3A8↑j
.text:00401D59                 mov     edi, [ebp+var_38]
.text:00401D5C                 mov     ecx, [ebp+var_40]
.text:00401D5F                 mov     [esp+78h+Locale], edi ; int
.text:00401D63                 mov     [esp+78h+Category], ecx ; char *
.text:00401D66                 call    sub_408860
.text:00401D6B                 jmp     loc_401A6E
.text:00401D70 ; ---------------------------------------------------------------------------
.text:00401D70
.text:00401D70 loc_401D70:                             ; CODE XREF: sub_4016B0+361↑j
.text:00401D70                 movzx   ebx, ds:byte_419050
.text:00401D77                 movzx   ecx, ds:byte_419060
.text:00401D7E                 movzx   esi, ds:byte_419070
.text:00401D85                 movzx   edi, ds:byte_419080
.text:00401D8C                 movzx   eax, ds:byte_419090
.text:00401D93                 add     ebx, ecx
.text:00401D95                 add     ebx, esi
.text:00401D97                 add     ebx, edi
.text:00401D99                 add     ebx, eax
.text:00401D9B                 dec     ebx
.text:00401D9C                 jnz     loc_401A17
.text:00401DA2                 mov     ebx, [ebp+Block]
.text:00401DA5                 mov     dword ptr [ebx], 1
.text:00401DAB                 jmp     loc_401A8F
.text:00401DAB sub_4016B0      endp
.text:00401DAB
.text:00401DB0 ; ---------------------------------------------------------------------------
.text:00401DB0                 sub     esp, 1Ch
.text:00401DB3                 mov     [esp+18h], ebx
.text:00401DB7                 mov     ebx, [esp+20h]
.text:00401DBB                 test    ebx, ebx
.text:00401DBD                 jz      short loc_401DF3
.text:00401DBF                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401DC6                 call    ds:libintl_gettext
.text:00401DCC                 mov     edx, ds:_iob
.text:00401DD2                 mov     ecx, ds:dword_419570
.text:00401DD8                 add     edx, 40h ; '@'
.text:00401DDB                 mov     [esp+8], ecx
.text:00401DDF                 mov     [esp+4], eax
.text:00401DE3                 mov     [esp], edx
.text:00401DE6                 call    fprintf
.text:00401DEB
.text:00401DEB loc_401DEB:                             ; CODE XREF: .text:00401EB7↓j
.text:00401DEB                 mov     [esp], ebx
.text:00401DEE                 call    exit
.text:00401DF3 ; ---------------------------------------------------------------------------
.text:00401DF3
.text:00401DF3 loc_401DF3:                             ; CODE XREF: .text:00401DBD↑j
.text:00401DF3                 mov     dword ptr [esp], (offset stru_4013F6._base+2)
.text:00401DFA                 call    ds:libintl_gettext
.text:00401E00                 mov     ecx, ds:dword_419570
.text:00401E06                 mov     [esp], eax
.text:00401E09                 mov     [esp+4], ecx
.text:00401E0D                 call    printf
.text:00401E12                 mov     dword ptr [esp], offset aPrintNewlineWo ; "Print newline, word, and byte counts fo"...
.text:00401E19                 call    ds:libintl_gettext
.text:00401E1F                 mov     ecx, ds:_iob
.text:00401E25                 add     ecx, 20h ; ' '
.text:00401E28                 mov     [esp+4], ecx
.text:00401E2C                 mov     [esp], eax
.text:00401E2F                 call    fputs
.text:00401E34                 mov     dword ptr [esp], offset aLMaxLineLength ; "  -L, --max-line-length  print the leng"...
.text:00401E3B                 call    ds:libintl_gettext
.text:00401E41                 mov     ecx, ds:_iob
.text:00401E47                 add     ecx, 20h ; ' '
.text:00401E4A                 mov     [esp+4], ecx
.text:00401E4E                 mov     [esp], eax
.text:00401E51                 call    fputs
.text:00401E56                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401E5D                 call    ds:libintl_gettext
.text:00401E63                 mov     ecx, ds:_iob
.text:00401E69                 add     ecx, 20h ; ' '
.text:00401E6C                 mov     [esp+4], ecx
.text:00401E70                 mov     [esp], eax
.text:00401E73                 call    fputs
.text:00401E78                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401E7F                 call    ds:libintl_gettext
.text:00401E85                 mov     ecx, ds:_iob
.text:00401E8B                 add     ecx, 20h ; ' '
.text:00401E8E                 mov     [esp+4], ecx
.text:00401E92                 mov     [esp], eax
.text:00401E95                 call    fputs
.text:00401E9A                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401EA1                 call    ds:libintl_gettext
.text:00401EA7                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401EAF                 mov     [esp], eax
.text:00401EB2                 call    printf
.text:00401EB7                 jmp     loc_401DEB
.text:00401EB7 ; ---------------------------------------------------------------------------
.text:00401EBC ; const char Format[4]
.text:00401EBC Format          db ' %s',0              ; DATA XREF: sub_401EC0+AA↓o
.text:00401EC0
.text:00401EC0 ; =============== S U B R O U T I N E =======================================
.text:00401EC0
.text:00401EC0
.text:00401EC0 sub_401EC0      proc near               ; CODE XREF: sub_4016B0+576↑p
.text:00401EC0                                         ; sub_4020F0+21B↓p
.text:00401EC0
.text:00401EC0 Format          = dword ptr -6Ch
.text:00401EC0 File            = dword ptr -68h
.text:00401EC0 var_64          = dword ptr -64h
.text:00401EC0 var_54          = dword ptr -54h
.text:00401EC0 var_50          = dword ptr -50h
.text:00401EC0 var_4C          = dword ptr -4Ch
.text:00401EC0 var_48          = dword ptr -48h
.text:00401EC0 var_44          = dword ptr -44h
.text:00401EC0 var_40          = dword ptr -40h
.text:00401EC0 var_3C          = byte ptr -3Ch
.text:00401EC0 arg_0           = dword ptr  4
.text:00401EC0 arg_4           = dword ptr  8
.text:00401EC0 arg_8           = dword ptr  0Ch
.text:00401EC0 arg_C           = dword ptr  10h
.text:00401EC0 arg_10          = dword ptr  14h
.text:00401EC0 arg_14          = dword ptr  18h
.text:00401EC0 arg_18          = dword ptr  1Ch
.text:00401EC0 arg_1C          = dword ptr  20h
.text:00401EC0 arg_20          = dword ptr  24h
.text:00401EC0 arg_24          = dword ptr  28h
.text:00401EC0 arg_28          = dword ptr  2Ch
.text:00401EC0
.text:00401EC0                 push    ebp
.text:00401EC1                 push    edi
.text:00401EC2                 mov     edi, (offset aS_0+1) ; "%*s"
.text:00401EC7                 push    esi
.text:00401EC8                 push    ebx
.text:00401EC9                 sub     esp, 5Ch
.text:00401ECC                 mov     ebp, [esp+6Ch+arg_10]
.text:00401ED3                 cmp     ds:byte_419050, 0
.text:00401EDA                 mov     eax, [esp+6Ch+arg_14]
.text:00401EE1                 mov     edx, [esp+6Ch+arg_0]
.text:00401EE5                 mov     [esp+6Ch+var_44], ebp
.text:00401EE9                 mov     ecx, [esp+6Ch+arg_4]
.text:00401EED                 mov     ebp, [esp+6Ch+arg_18]
.text:00401EF4                 mov     [esp+6Ch+var_40], eax
.text:00401EF8                 mov     ebx, [esp+6Ch+arg_8]
.text:00401EFC                 mov     eax, [esp+6Ch+arg_1C]
.text:00401F03                 mov     [esp+6Ch+var_4C], ebp
.text:00401F07                 mov     esi, [esp+6Ch+arg_C]
.text:00401F0B                 mov     ebp, [esp+6Ch+arg_20]
.text:00401F12                 mov     [esp+6Ch+var_48], eax
.text:00401F16                 mov     eax, [esp+6Ch+arg_24]
.text:00401F1D                 mov     [esp+6Ch+var_54], ebp
.text:00401F21                 mov     ebp, [esp+6Ch+arg_28]
.text:00401F28                 mov     [esp+6Ch+var_50], eax
.text:00401F2C                 jnz     loc_4020A4
.text:00401F32
.text:00401F32 loc_401F32:                             ; CODE XREF: sub_401EC0+213↓j
.text:00401F32                 cmp     ds:byte_419060, 0
.text:00401F39                 jnz     loc_402070
.text:00401F3F
.text:00401F3F loc_401F3F:                             ; CODE XREF: sub_401EC0+1DF↓j
.text:00401F3F                 cmp     ds:byte_419070, 0
.text:00401F46                 jnz     loc_402033
.text:00401F4C
.text:00401F4C loc_401F4C:                             ; CODE XREF: sub_401EC0+1AA↓j
.text:00401F4C                 cmp     ds:byte_419080, 0
.text:00401F53                 jnz     loc_401FF7
.text:00401F59
.text:00401F59 loc_401F59:                             ; CODE XREF: sub_401EC0+16E↓j
.text:00401F59                 cmp     ds:byte_419090, 0
.text:00401F60                 jnz     short loc_401FC0
.text:00401F62
.text:00401F62 loc_401F62:                             ; CODE XREF: sub_401EC0+132↓j
.text:00401F62                 test    ebp, ebp
.text:00401F64                 jz      short loc_401F76
.text:00401F66                 mov     [esp+6Ch+File], ebp
.text:00401F6A                 mov     [esp+6Ch+Format], offset Format ; " %s"
.text:00401F71                 call    printf
.text:00401F76
.text:00401F76 loc_401F76:                             ; CODE XREF: sub_401EC0+A4↑j
.text:00401F76                 mov     ebp, ds:_iob
.text:00401F7C                 mov     edi, [ebp+24h]
.text:00401F7F                 dec     edi
.text:00401F80                 mov     [ebp+24h], edi
.text:00401F83                 test    edi, edi
.text:00401F85                 js      short loc_401FA0
.text:00401F87                 mov     ebx, ds:_iob
.text:00401F8D                 mov     eax, [ebx+20h]
.text:00401F90                 mov     byte ptr [eax], 0Ah
.text:00401F93                 inc     dword ptr [ebx+20h]
.text:00401F96
.text:00401F96 loc_401F96:                             ; CODE XREF: sub_401EC0+F9↓j
.text:00401F96                 add     esp, 5Ch
.text:00401F99                 pop     ebx
.text:00401F9A                 pop     esi
.text:00401F9B                 pop     edi
.text:00401F9C                 pop     ebp
.text:00401F9D                 retn
.text:00401F9D ; ---------------------------------------------------------------------------
.text:00401F9E                 align 10h
.text:00401FA0
.text:00401FA0 loc_401FA0:                             ; CODE XREF: sub_401EC0+C5↑j
.text:00401FA0                 mov     [esp+6Ch+Format], 0Ah ; Ch
.text:00401FA7                 mov     esi, ds:_iob
.text:00401FAD                 add     esi, 20h ; ' '
.text:00401FB0                 mov     [esp+6Ch+File], esi ; File
.text:00401FB4                 call    _flsbuf
.text:00401FB9                 jmp     short loc_401F96
.text:00401FB9 ; ---------------------------------------------------------------------------
.text:00401FBB                 align 10h
.text:00401FC0
.text:00401FC0 loc_401FC0:                             ; CODE XREF: sub_401EC0+A0↑j
.text:00401FC0                 mov     ecx, [esp+6Ch+var_54]
.text:00401FC4                 lea     edx, [esp+6Ch+var_3C]
.text:00401FC8                 mov     esi, [esp+6Ch+var_50]
.text:00401FCC                 mov     [esp+6Ch+var_64], edx
.text:00401FD0                 mov     [esp+6Ch+Format], ecx
.text:00401FD3                 mov     [esp+6Ch+File], esi
.text:00401FD7                 call    sub_4045F0
.text:00401FDC                 mov     [esp+6Ch+var_64], eax
.text:00401FE0                 mov     ebx, ds:dword_4190A0
.text:00401FE6                 mov     [esp+6Ch+Format], edi ; Format
.text:00401FE9                 mov     [esp+6Ch+File], ebx
.text:00401FED                 call    printf
.text:00401FF2                 jmp     loc_401F62
.text:00401FF7 ; ---------------------------------------------------------------------------
.text:00401FF7
.text:00401FF7 loc_401FF7:                             ; CODE XREF: sub_401EC0+93↑j
.text:00401FF7                 mov     ecx, [esp+6Ch+var_4C]
.text:00401FFB                 lea     edx, [esp+6Ch+var_3C]
.text:00401FFF                 mov     esi, [esp+6Ch+var_48]
.text:00402003                 mov     [esp+6Ch+var_64], edx
.text:00402007                 mov     [esp+6Ch+Format], ecx
.text:0040200A                 mov     [esp+6Ch+File], esi
.text:0040200E                 call    sub_4045F0
.text:00402013                 mov     [esp+6Ch+var_64], eax
.text:00402017                 mov     ebx, ds:dword_4190A0
.text:0040201D                 mov     [esp+6Ch+Format], edi ; Format
.text:00402020                 mov     edi, offset aS_0 ; " %*s"
.text:00402025                 mov     [esp+6Ch+File], ebx
.text:00402029                 call    printf
.text:0040202E                 jmp     loc_401F59
.text:00402033 ; ---------------------------------------------------------------------------
.text:00402033
.text:00402033 loc_402033:                             ; CODE XREF: sub_401EC0+86↑j
.text:00402033                 mov     ecx, [esp+6Ch+var_44]
.text:00402037                 lea     edx, [esp+6Ch+var_3C]
.text:0040203B                 mov     esi, [esp+6Ch+var_40]
.text:0040203F                 mov     [esp+6Ch+var_64], edx
.text:00402043                 mov     [esp+6Ch+Format], ecx
.text:00402046                 mov     [esp+6Ch+File], esi
.text:0040204A                 call    sub_4045F0
.text:0040204F                 mov     [esp+6Ch+var_64], eax
.text:00402053                 mov     ebx, ds:dword_4190A0
.text:00402059                 mov     [esp+6Ch+Format], edi ; Format
.text:0040205C                 mov     edi, offset aS_0 ; " %*s"
.text:00402061                 mov     [esp+6Ch+File], ebx
.text:00402065                 call    printf
.text:0040206A                 jmp     loc_401F4C
.text:0040206A ; ---------------------------------------------------------------------------
.text:0040206F                 align 10h
.text:00402070
.text:00402070 loc_402070:                             ; CODE XREF: sub_401EC0+79↑j
.text:00402070                 mov     [esp+6Ch+Format], ebx
.text:00402073                 lea     edx, [esp+6Ch+var_3C]
.text:00402077                 mov     [esp+6Ch+var_64], edx
.text:0040207B                 mov     [esp+6Ch+File], esi
.text:0040207F                 call    sub_4045F0
.text:00402084                 mov     [esp+6Ch+var_64], eax
.text:00402088                 mov     ecx, ds:dword_4190A0
.text:0040208E                 mov     [esp+6Ch+Format], edi ; Format
.text:00402091                 mov     edi, offset aS_0 ; " %*s"
.text:00402096                 mov     [esp+6Ch+File], ecx
.text:0040209A                 call    printf
.text:0040209F                 jmp     loc_401F3F
.text:004020A4 ; ---------------------------------------------------------------------------
.text:004020A4
.text:004020A4 loc_4020A4:                             ; CODE XREF: sub_401EC0+6C↑j
.text:004020A4                 mov     [esp+6Ch+Format], edx
.text:004020A7                 lea     eax, [esp+6Ch+var_3C]
.text:004020AB                 mov     [esp+6Ch+File], ecx
.text:004020AF                 mov     [esp+6Ch+var_64], eax
.text:004020B3                 call    sub_4045F0
.text:004020B8                 mov     [esp+6Ch+var_64], eax
.text:004020BC                 mov     edx, ds:dword_4190A0
.text:004020C2                 mov     [esp+6Ch+Format], edi ; Format
.text:004020C5                 mov     edi, offset aS_0 ; " %*s"
.text:004020CA                 mov     [esp+6Ch+File], edx
.text:004020CE                 call    printf
.text:004020D3                 jmp     loc_401F32
.text:004020D3 sub_401EC0      endp
.text:004020D3
.text:004020D3 ; ---------------------------------------------------------------------------
.text:004020D8 ; const char aSS[]
.text:004020D8 aSS             db '%s:%s',0            ; DATA XREF: sub_4020F0+639↓o
.text:004020DE aStandardInput  db 'standard input',0   ; DATA XREF: sub_4020F0:loc_402B17↓o
.text:004020ED                 align 10h
.text:004020F0
.text:004020F0 ; =============== S U B R O U T I N E =======================================
.text:004020F0
.text:004020F0
.text:004020F0 sub_4020F0      proc near               ; CODE XREF: sub_4016B0+474↑p
.text:004020F0                                         ; sub_4016B0+5A5↑p ...
.text:004020F0
.text:004020F0 FileHandle      = dword ptr -40ECh
.text:004020F0 ErrorMessage    = dword ptr -40E8h
.text:004020F0 SizeInBytes     = dword ptr -40E4h
.text:004020F0 State           = dword ptr -40E0h
.text:004020F0 var_40DC        = dword ptr -40DCh
.text:004020F0 var_40D8        = dword ptr -40D8h
.text:004020F0 var_40D4        = dword ptr -40D4h
.text:004020F0 var_40D0        = dword ptr -40D0h
.text:004020F0 var_40CC        = dword ptr -40CCh
.text:004020F0 var_40C8        = dword ptr -40C8h
.text:004020F0 var_40C4        = dword ptr -40C4h
.text:004020F0 var_40BC        = dword ptr -40BCh
.text:004020F0 var_40B8        = dword ptr -40B8h
.text:004020F0 var_40B1        = byte ptr -40B1h
.text:004020F0 var_40B0        = dword ptr -40B0h
.text:004020F0 var_40AC        = dword ptr -40ACh
.text:004020F0 var_40A8        = dword ptr -40A8h
.text:004020F0 var_40A4        = dword ptr -40A4h
.text:004020F0 var_40A0        = dword ptr -40A0h
.text:004020F0 var_4095        = byte ptr -4095h
.text:004020F0 var_4094        = byte ptr -4094h
.text:004020F0 var_408E        = byte ptr -408Eh
.text:004020F0 var_408D        = byte ptr -408Dh
.text:004020F0 var_408C        = dword ptr -408Ch
.text:004020F0 var_4088        = dword ptr -4088h
.text:004020F0 var_4084        = dword ptr -4084h
.text:004020F0 var_4080        = dword ptr -4080h
.text:004020F0 var_407C        = dword ptr -407Ch
.text:004020F0 var_4078        = dword ptr -4078h
.text:004020F0 var_4074        = dword ptr -4074h
.text:004020F0 var_4070        = dword ptr -4070h
.text:004020F0 var_406C        = dword ptr -406Ch
.text:004020F0 var_4068        = dword ptr -4068h
.text:004020F0 var_4061        = byte ptr -4061h
.text:004020F0 var_4060        = mbstate_t ptr -4060h
.text:004020F0 DstCh           = word ptr -402Eh
.text:004020F0 SrcCh           = byte ptr -402Ch
.text:004020F0 arg_0           = dword ptr  4
.text:004020F0 arg_4           = dword ptr  8
.text:004020F0 arg_8           = dword ptr  0Ch
.text:004020F0
.text:004020F0                 push    ebp
.text:004020F1                 mov     eax, 40DCh
.text:004020F6                 push    edi
.text:004020F7                 push    esi
.text:004020F8                 push    ebx             ; Size
.text:004020F9                 call    __alloca
.text:004020FE                 mov     [esp+40ECh+var_4061], 1
.text:00402106                 mov     edx, [esp+40ECh+arg_4]
.text:0040210D                 mov     esi, [esp+40ECh+arg_8]
.text:00402114                 mov     dword ptr [esp+40ECh+var_4094], edx
.text:00402118                 test    edx, edx
.text:0040211A                 jz      loc_402B17
.text:00402120
.text:00402120 loc_402120:                             ; CODE XREF: sub_4020F0+A38↓j
.text:00402120                 mov     [esp+40ECh+var_408C], 0
.text:00402128                 mov     edx, ds:__mb_cur_max
.text:0040212E                 xor     eax, eax
.text:00402130                 mov     [esp+40ECh+var_4088], 0
.text:00402138                 xor     ecx, ecx
.text:0040213A                 mov     [esp+40ECh+var_4084], 0
.text:00402142                 cmp     dword ptr [edx], 1
.text:00402145                 mov     [esp+40ECh+var_4080], 0
.text:0040214D                 mov     [esp+40ECh+var_407C], 0
.text:00402155                 mov     [esp+40ECh+var_4078], 0
.text:0040215D                 mov     [esp+40ECh+var_4074], 0
.text:00402165                 mov     [esp+40ECh+var_4070], 0
.text:0040216D                 mov     [esp+40ECh+var_406C], eax
.text:00402174                 mov     [esp+40ECh+var_4068], ecx
.text:0040217B                 jle     loc_402AF3
.text:00402181                 movzx   ecx, ds:byte_419080
.text:00402188                 movzx   ebx, ds:byte_419070
.text:0040218F                 mov     [esp+40ECh+var_408D], cl
.text:00402193                 mov     [esp+40ECh+var_408E], bl
.text:00402197
.text:00402197 loc_402197:                             ; CODE XREF: sub_4020F0+A22↓j
.text:00402197                 xor     ebx, ebx
.text:00402199                 cmp     ds:byte_419090, 0
.text:004021A0                 jnz     short loc_4021AB
.text:004021A2                 cmp     ds:byte_419060, 0
.text:004021A9                 jz      short loc_4021AD
.text:004021AB
.text:004021AB loc_4021AB:                             ; CODE XREF: sub_4020F0+B0↑j
.text:004021AB                 mov     bl, 1
.text:004021AD
.text:004021AD loc_4021AD:                             ; CODE XREF: sub_4020F0+B9↑j
.text:004021AD                 mov     edi, [esp+40ECh+arg_0]
.text:004021B4                 mov     [esp+40ECh+FileHandle], edi ; FileHandle
.text:004021B7                 call    _isatty
.text:004021BC                 test    eax, eax
.text:004021BE                 jz      loc_402AD7
.text:004021C4
.text:004021C4 loc_4021C4:                             ; CODE XREF: sub_4020F0+9FE↓j
.text:004021C4                 test    bl, bl
.text:004021C6                 jnz     loc_402442
.text:004021CC                 cmp     ds:byte_419050, 0
.text:004021D3                 jnz     loc_402442
.text:004021D9                 cmp     [esp+40ECh+var_408E], 0
.text:004021DE                 jnz     loc_402442
.text:004021E4                 cmp     [esp+40ECh+var_408D], 0
.text:004021E9                 jz      loc_402442
.text:004021EF                 mov     eax, [esi]
.text:004021F1                 test    eax, eax
.text:004021F3                 jle     short loc_40220D
.text:004021F5                 mov     eax, [esp+40ECh+arg_0]
.text:004021FC                 lea     edx, [esi+8]
.text:004021FF                 mov     [esp+40ECh+ErrorMessage], edx
.text:00402203                 mov     [esp+40ECh+FileHandle], eax
.text:00402206                 call    sub_405D50
.text:0040220B                 mov     [esi], eax
.text:0040220D
.text:0040220D loc_40220D:                             ; CODE XREF: sub_4020F0+103↑j
.text:0040220D                 test    eax, eax
.text:0040220F                 jnz     short loc_402226
.text:00402211                 mov     ebx, [esi+8]
.text:00402214                 and     ebx, 0F000h
.text:0040221A                 cmp     ebx, 8000h
.text:00402220                 jz      loc_4023A6
.text:00402226
.text:00402226 loc_402226:                             ; CODE XREF: sub_4020F0+11F↑j
.text:00402226                                         ; sub_4020F0+16D↓j ...
.text:00402226                 mov     [esp+40ECh+SizeInBytes], 4000h
.text:0040222E                 mov     eax, [esp+40ECh+arg_0]
.text:00402235                 lea     edi, [esp+40ECh+SrcCh]
.text:0040223C                 mov     [esp+40ECh+ErrorMessage], edi
.text:00402240                 mov     [esp+40ECh+FileHandle], eax
.text:00402243                 call    sub_404580
.text:00402248                 test    eax, eax
.text:0040224A                 mov     edi, eax
.text:0040224C                 jz      short loc_40228E
.text:0040224E                 cmp     edi, 0FFFFFFFFh
.text:00402251                 jz      short loc_40225F
.text:00402253                 xor     ecx, ecx
.text:00402255                 add     [esp+40ECh+var_4084], edi
.text:00402259                 adc     [esp+40ECh+var_4080], ecx
.text:0040225D                 jmp     short loc_402226
.text:0040225F ; ---------------------------------------------------------------------------
.text:0040225F
.text:0040225F loc_40225F:                             ; CODE XREF: sub_4020F0+161↑j
.text:0040225F                                         ; sub_4020F0+996↓j
.text:0040225F                 call    _errno
.text:00402264                 mov     [esp+40ECh+SizeInBytes], offset aS ; "%s"
.text:0040226C                 mov     ecx, dword ptr [esp+40ECh+var_4094]
.text:00402270                 mov     [esp+40ECh+State], ecx ; char
.text:00402274                 mov     edi, [eax]
.text:00402276                 mov     [esp+40ECh+FileHandle], 0 ; Code
.text:0040227D                 mov     [esp+40ECh+ErrorMessage], edi ; ErrorMessage
.text:00402281                 call    sub_405AB0
.text:00402286                 mov     [esp+40ECh+var_4061], 0
.text:0040228E
.text:0040228E loc_40228E:                             ; CODE XREF: sub_4020F0+15C↑j
.text:0040228E                                         ; sub_4020F0+338↓j ...
.text:0040228E                 movzx   eax, [esp+40ECh+var_408E]
.text:00402293                 cmp     al, ds:byte_419070
.text:00402299                 jnb     short loc_4022AB
.text:0040229B                 mov     ebx, [esp+40ECh+var_4084]
.text:0040229F                 mov     edi, [esp+40ECh+var_4080]
.text:004022A3                 mov     [esp+40ECh+var_407C], ebx
.text:004022A7                 mov     [esp+40ECh+var_4078], edi
.text:004022AB
.text:004022AB loc_4022AB:                             ; CODE XREF: sub_4020F0+1A9↑j
.text:004022AB                 mov     ecx, [esp+40ECh+var_408C]
.text:004022AF                 mov     ebx, [esp+40ECh+var_4088]
.text:004022B3                 mov     edi, [esp+40ECh+var_4084]
.text:004022B7                 mov     [esp+40ECh+var_40CC], ecx
.text:004022BB                 mov     ebp, [esp+40ECh+var_4080]
.text:004022BF                 mov     eax, [esp+40ECh+arg_4]
.text:004022C6                 mov     [esp+40ECh+var_40C8], ebx
.text:004022CA                 mov     edx, [esp+40ECh+var_407C]
.text:004022CE                 mov     esi, [esp+40ECh+var_4078]
.text:004022D2                 mov     [esp+40ECh+var_40D4], edi
.text:004022D6                 mov     ecx, [esp+40ECh+var_4074]
.text:004022DA                 mov     ebx, [esp+40ECh+var_4070]
.text:004022DE                 mov     [esp+40ECh+var_40D0], ebp
.text:004022E2                 mov     edi, [esp+40ECh+var_406C]
.text:004022E9                 mov     ebp, [esp+40ECh+var_4068]
.text:004022F0                 mov     [esp+40ECh+var_40C4], eax
.text:004022F4                 mov     [esp+40ECh+var_40DC], edx
.text:004022F8                 mov     [esp+40ECh+var_40D8], esi
.text:004022FC                 mov     [esp+40ECh+SizeInBytes], ecx
.text:00402300                 mov     [esp+40ECh+State], ebx
.text:00402304                 mov     [esp+40ECh+FileHandle], edi
.text:00402307                 mov     [esp+40ECh+ErrorMessage], ebp
.text:0040230B                 call    sub_401EC0
.text:00402310                 mov     edx, [esp+40ECh+var_406C]
.text:00402317                 mov     esi, [esp+40ECh+var_4068]
.text:0040231E                 mov     ecx, [esp+40ECh+var_4074]
.text:00402322                 add     ds:dword_419000, edx
.text:00402328                 mov     ebx, [esp+40ECh+var_4070]
.text:0040232C                 mov     edi, [esp+40ECh+var_407C]
.text:00402330                 adc     ds:dword_419004, esi
.text:00402336                 mov     ebp, [esp+40ECh+var_4078]
.text:0040233A                 mov     edx, [esp+40ECh+var_4084]
.text:0040233E                 add     ds:dword_419010, ecx
.text:00402344                 mov     esi, [esp+40ECh+var_4080]
.text:00402348                 mov     ecx, ds:dword_419044
.text:0040234E                 adc     ds:dword_419014, ebx
.text:00402354                 mov     eax, ds:dword_419040
.text:00402359                 add     ds:dword_419020, edi
.text:0040235F                 adc     ds:dword_419024, ebp
.text:00402365                 add     ds:dword_419030, edx
.text:0040236B                 adc     ds:dword_419034, esi
.text:00402371                 cmp     [esp+40ECh+var_4088], ecx
.text:00402375                 jb      short loc_402393
.text:00402377                 ja      short loc_40237F
.text:00402379                 cmp     [esp+40ECh+var_408C], eax
.text:0040237D                 jbe     short loc_402393
.text:0040237F
.text:0040237F loc_40237F:                             ; CODE XREF: sub_4020F0+287↑j
.text:0040237F                 mov     edx, [esp+40ECh+var_408C]
.text:00402383                 mov     esi, [esp+40ECh+var_4088]
.text:00402387                 mov     ds:dword_419040, edx
.text:0040238D                 mov     ds:dword_419044, esi
.text:00402393
.text:00402393 loc_402393:                             ; CODE XREF: sub_4020F0+285↑j
.text:00402393                                         ; sub_4020F0+28D↑j
.text:00402393                 movzx   eax, [esp+40ECh+var_4061]
.text:0040239B                 add     esp, 40DCh
.text:004023A1                 pop     ebx
.text:004023A2                 pop     esi
.text:004023A3                 pop     edi
.text:004023A4                 pop     ebp
.text:004023A5                 retn
.text:004023A6 ; ---------------------------------------------------------------------------
.text:004023A6
.text:004023A6 loc_4023A6:                             ; CODE XREF: sub_4020F0+130↑j
.text:004023A6                 mov     [esp+40ECh+State], 1 ; Origin
.text:004023AE                 mov     esi, [esp+40ECh+arg_0]
.text:004023B5                 mov     [esp+40ECh+ErrorMessage], 0 ; Offset
.text:004023BD                 mov     [esp+40ECh+SizeInBytes], 0
.text:004023C5                 mov     [esp+40ECh+FileHandle], esi ; FileHandle
.text:004023C8                 call    _lseeki64
.text:004023CD                 mov     ecx, eax
.text:004023CF                 mov     ebx, eax
.text:004023D1                 and     ecx, edx
.text:004023D3                 inc     ecx
.text:004023D4                 mov     esi, edx
.text:004023D6                 jz      loc_402226
.text:004023DC                 mov     [esp+40ECh+State], 2 ; Origin
.text:004023E4                 mov     ebp, [esp+40ECh+arg_0]
.text:004023EB                 mov     [esp+40ECh+ErrorMessage], 0 ; Offset
.text:004023F3                 mov     [esp+40ECh+SizeInBytes], 0
.text:004023FB                 mov     [esp+40ECh+FileHandle], ebp ; FileHandle
.text:004023FE                 call    _lseeki64
.text:00402403                 mov     ecx, edx
.text:00402405                 mov     edi, eax
.text:00402407                 and     edi, ecx
.text:00402409                 inc     edi
.text:0040240A                 mov     edx, eax
.text:0040240C                 jz      loc_402226
.text:00402412                 cmp     ecx, esi
.text:00402414                 jl      short loc_40242D
.text:00402416                 jg      short loc_40241C
.text:00402418                 cmp     eax, ebx
.text:0040241A                 jb      short loc_40242D
.text:0040241C
.text:0040241C loc_40241C:                             ; CODE XREF: sub_4020F0+326↑j
.text:0040241C                 sub     edx, ebx
.text:0040241E                 sbb     ecx, esi
.text:00402420                 mov     [esp+40ECh+var_4084], edx
.text:00402424                 mov     [esp+40ECh+var_4080], ecx
.text:00402428                 jmp     loc_40228E
.text:0040242D ; ---------------------------------------------------------------------------
.text:0040242D
.text:0040242D loc_40242D:                             ; CODE XREF: sub_4020F0+324↑j
.text:0040242D                                         ; sub_4020F0+32A↑j
.text:0040242D                 mov     [esp+40ECh+var_4084], 0
.text:00402435                 mov     [esp+40ECh+var_4080], 0
.text:0040243D                 jmp     loc_40228E
.text:00402442 ; ---------------------------------------------------------------------------
.text:00402442
.text:00402442 loc_402442:                             ; CODE XREF: sub_4020F0+D6↑j
.text:00402442                                         ; sub_4020F0+E3↑j ...
.text:00402442                 cmp     [esp+40ECh+var_408E], 0
.text:00402447                 setz    al
.text:0040244A                 xor     bl, 1
.text:0040244D                 and     eax, ebx
.text:0040244F                 test    al, 1
.text:00402451                 jnz     loc_402A50
.text:00402457                 mov     edi, ds:__mb_cur_max
.text:0040245D                 cmp     dword ptr [edi], 1
.text:00402460                 jle     loc_4027FA
.text:00402466                 mov     [esp+40ECh+var_4095], 0
.text:0040246B                 xor     ebp, ebp
.text:0040246D                 xor     ebx, ebx
.text:0040246F                 mov     [esp+40ECh+var_40A4], 0
.text:00402477                 mov     [esp+40ECh+var_40A0], 0
.text:0040247F                 mov     [esp+40ECh+var_40AC], 0
.text:00402487                 mov     [esp+40ECh+var_40A8], 0
.text:0040248F                 mov     [esp+40ECh+var_40B0], 0
.text:00402497                 mov     [esp+40ECh+var_4060._Wchar], ebp
.text:0040249E
.text:0040249E loc_40249E:                             ; CODE XREF: sub_4020F0+540↓j
.text:0040249E                 mov     edi, [esp+40ECh+arg_0]
.text:004024A5                 mov     edx, 4000h
.text:004024AA                 lea     ecx, [esp+40ECh+SrcCh]
.text:004024B1                 sub     edx, ebx
.text:004024B3                 add     ecx, ebx
.text:004024B5                 mov     [esp+40ECh+SizeInBytes], edx
.text:004024B9                 mov     [esp+40ECh+FileHandle], edi
.text:004024BC                 mov     [esp+40ECh+ErrorMessage], ecx
.text:004024C0                 call    sub_404580
.text:004024C5                 test    eax, eax
.text:004024C7                 mov     edi, eax
.text:004024C9                 jz      loc_4027C0
.text:004024CF                 cmp     edi, 0FFFFFFFFh
.text:004024D2                 jz      loc_402791
.text:004024D8                 xor     ecx, ecx
.text:004024DA                 lea     ebp, [esp+40ECh+SrcCh]
.text:004024E1                 add     [esp+40ECh+var_4084], edi
.text:004024E5                 adc     [esp+40ECh+var_4080], ecx
.text:004024E9                 add     edi, ebx
.text:004024EB                 nop
.text:004024EC                 lea     esi, [esi+0]
.text:004024F0
.text:004024F0 loc_4024F0:                             ; CODE XREF: sub_4020F0+538↓j
.text:004024F0                 mov     [esp+40ECh+SizeInBytes], edi ; SizeInBytes
.text:004024F4                 lea     eax, [esp+40ECh+DstCh]
.text:004024FB                 mov     ebx, [esp+40ECh+var_4060._Wchar]
.text:00402502                 mov     [esp+40ECh+ErrorMessage], ebp ; SrcCh
.text:00402506                 lea     esi, [esp+40ECh+var_4060]
.text:0040250D                 mov     [esp+40ECh+State], esi ; State
.text:00402511                 mov     [esp+40ECh+FileHandle], eax ; DstCh
.text:00402514                 call    mbrtowc
.text:00402519                 cmp     eax, 0FFFFFFFEh
.text:0040251C                 jz      loc_402756
.text:00402522                 cmp     eax, 0FFFFFFFFh
.text:00402525                 jz      loc_4026B7
.text:0040252B                 test    eax, eax
.text:0040252D                 jnz     short loc_40253E
.text:0040252F                 xor     ecx, ecx
.text:00402531                 mov     eax, 1
.text:00402536                 mov     [esp+40ECh+DstCh], cx
.text:0040253E
.text:0040253E loc_40253E:                             ; CODE XREF: sub_4020F0+43D↑j
.text:0040253E                 movzx   edx, [esp+40ECh+DstCh]
.text:00402546                 add     ebp, eax
.text:00402548                 sub     edi, eax
.text:0040254A                 add     [esp+40ECh+var_407C], 1
.text:0040254F                 movzx   eax, dx
.text:00402552                 adc     [esp+40ECh+var_4078], 0
.text:00402557                 sub     eax, 9          ; switch 24 cases
.text:0040255A                 cmp     eax, 17h
.text:0040255D                 ja      def_402563      ; jumptable 00402563 default case, cases 14-31
.text:00402563                 jmp     ds:jpt_402563[eax*4] ; switch jump
.text:00402563 ; ---------------------------------------------------------------------------
.text:0040256A                 align 4
.text:0040256C jpt_402563      dd offset loc_402635    ; DATA XREF: sub_4020F0+473↑r
.text:0040256C                 dd offset loc_4025CC    ; jump table for switch statement
.text:0040256C                 dd offset loc_402612
.text:0040256C                 dd offset loc_4025DC
.text:0040256C                 dd offset loc_4025DC
.text:0040256C                 dd offset def_402563
.text:0040256C                 dd offset def_402563
.text:0040256C                 dd offset def_402563
.text:0040256C                 dd offset def_402563
.text:0040256C                 dd offset def_402563
.text:0040256C                 dd offset def_402563
.text:0040256C                 dd offset def_402563
.text:0040256C                 dd offset def_402563
.text:0040256C                 dd offset def_402563
.text:0040256C                 dd offset def_402563
.text:0040256C                 dd offset def_402563
.text:0040256C                 dd offset def_402563
.text:0040256C                 dd offset def_402563
.text:0040256C                 dd offset def_402563
.text:0040256C                 dd offset def_402563
.text:0040256C                 dd offset def_402563
.text:0040256C                 dd offset def_402563
.text:0040256C                 dd offset def_402563
.text:0040256C                 dd offset loc_4026B0
.text:004025CC ; ---------------------------------------------------------------------------
.text:004025CC
.text:004025CC loc_4025CC:                             ; CODE XREF: sub_4020F0+473↑j
.text:004025CC                                         ; DATA XREF: sub_4020F0:jpt_402563↑o
.text:004025CC                 add     [esp+40ECh+var_406C], 1 ; jumptable 00402563 case 10
.text:004025D4                 adc     [esp+40ECh+var_4068], 0
.text:004025DC
.text:004025DC loc_4025DC:                             ; CODE XREF: sub_4020F0+473↑j
.text:004025DC                                         ; DATA XREF: sub_4020F0:jpt_402563↑o
.text:004025DC                 mov     edx, [esp+40ECh+var_4088] ; jumptable 00402563 cases 12,13
.text:004025E0                 cmp     [esp+40ECh+var_40A0], edx
.text:004025E4                 jb      short loc_402602
.text:004025E6                 ja      short loc_4025F2
.text:004025E8                 mov     ebx, [esp+40ECh+var_408C]
.text:004025EC                 cmp     [esp+40ECh+var_40A4], ebx
.text:004025F0                 jbe     short loc_402602
.text:004025F2
.text:004025F2 loc_4025F2:                             ; CODE XREF: sub_4020F0+4F6↑j
.text:004025F2                 mov     ecx, [esp+40ECh+var_40A4]
.text:004025F6                 mov     esi, [esp+40ECh+var_40A0]
.text:004025FA                 mov     [esp+40ECh+var_408C], ecx
.text:004025FE                 mov     [esp+40ECh+var_4088], esi
.text:00402602
.text:00402602 loc_402602:                             ; CODE XREF: sub_4020F0+4F4↑j
.text:00402602                                         ; sub_4020F0+500↑j
.text:00402602                 mov     [esp+40ECh+var_40A4], 0
.text:0040260A                 mov     [esp+40ECh+var_40A0], 0
.text:00402612
.text:00402612 loc_402612:                             ; CODE XREF: sub_4020F0+473↑j
.text:00402612                                         ; sub_4020F0+560↓j ...
.text:00402612                 movzx   ecx, [esp+40ECh+var_4095] ; jumptable 00402563 case 11
.text:00402617                 xor     esi, esi
.text:00402619                 mov     [esp+40ECh+var_4095], 0
.text:0040261E                 add     [esp+40ECh+var_4074], ecx
.text:00402622                 adc     [esp+40ECh+var_4070], esi
.text:00402626
.text:00402626 loc_402626:                             ; CODE XREF: sub_4020F0+577↓j
.text:00402626                                         ; sub_4020F0+5BB↓j ...
.text:00402626                 test    edi, edi
.text:00402628                 jnz     loc_4024F0
.text:0040262E
.text:0040262E loc_40262E:                             ; CODE XREF: sub_4020F0+66F↓j
.text:0040262E                                         ; sub_4020F0+694↓j
.text:0040262E                 mov     ebx, edi
.text:00402630                 jmp     loc_40249E
.text:00402635 ; ---------------------------------------------------------------------------
.text:00402635
.text:00402635 loc_402635:                             ; CODE XREF: sub_4020F0+473↑j
.text:00402635                                         ; DATA XREF: sub_4020F0:jpt_402563↑o
.text:00402635                 mov     edx, [esp+40ECh+var_40A4] ; jumptable 00402563 case 9
.text:00402639                 xor     ebx, ebx
.text:0040263B                 and     edx, 7
.text:0040263E                 sub     [esp+40ECh+var_40A4], edx
.text:00402642                 sbb     [esp+40ECh+var_40A0], ebx
.text:00402646                 add     [esp+40ECh+var_40A4], 8
.text:0040264B
.text:0040264B loc_40264B:                             ; CODE XREF: sub_4020F0+5C5↓j
.text:0040264B                 adc     [esp+40ECh+var_40A0], 0
.text:00402650                 jmp     short loc_402612 ; jumptable 00402563 case 11
.text:00402652 ; ---------------------------------------------------------------------------
.text:00402652
.text:00402652 def_402563:                             ; CODE XREF: sub_4020F0+46D↑j
.text:00402652                                         ; sub_4020F0+473↑j
.text:00402652                                         ; DATA XREF: ...
.text:00402652                 mov     [esp+40ECh+ErrorMessage], 157h ; jumptable 00402563 default case, cases 14-31
.text:0040265A                 movzx   ebx, dx
.text:0040265D                 mov     [esp+40ECh+FileHandle], ebx ; C
.text:00402660                 call    iswctype
.text:00402665                 test    eax, eax
.text:00402667                 jz      short loc_402626
.text:00402669                 movzx   edx, [esp+40ECh+DstCh]
.text:00402671                 mov     [esp+40ECh+FileHandle], edx
.text:00402674                 call    sub_409110
.text:00402679                 test    eax, eax
.text:0040267B                 jle     short loc_402686
.text:0040267D                 cdq
.text:0040267E                 add     [esp+40ECh+var_40A4], eax
.text:00402682                 adc     [esp+40ECh+var_40A0], edx
.text:00402686
.text:00402686 loc_402686:                             ; CODE XREF: sub_4020F0+58B↑j
.text:00402686                 movzx   esi, [esp+40ECh+DstCh]
.text:0040268E                 mov     [esp+40ECh+ErrorMessage], 8 ; Type
.text:00402696                 mov     [esp+40ECh+FileHandle], esi ; C
.text:00402699                 call    iswctype
.text:0040269E                 test    eax, eax
.text:004026A0                 jnz     loc_402612      ; jumptable 00402563 case 11
.text:004026A6                 mov     [esp+40ECh+var_4095], 1
.text:004026AB                 jmp     loc_402626
.text:004026B0 ; ---------------------------------------------------------------------------
.text:004026B0
.text:004026B0 loc_4026B0:                             ; CODE XREF: sub_4020F0+473↑j
.text:004026B0                                         ; DATA XREF: sub_4020F0:jpt_402563↑o
.text:004026B0                 add     [esp+40ECh+var_40A4], 1 ; jumptable 00402563 case 32
.text:004026B5                 jmp     short loc_40264B
.text:004026B7 ; ---------------------------------------------------------------------------
.text:004026B7
.text:004026B7 loc_4026B7:                             ; CODE XREF: sub_4020F0+435↑j
.text:004026B7                 mov     ebx, [esp+40ECh+var_406C]
.text:004026BE                 mov     esi, [esp+40ECh+var_4068]
.text:004026C5                 mov     eax, [esp+40ECh+var_40A8]
.text:004026C9                 mov     ecx, [esp+40ECh+var_40AC]
.text:004026CD                 add     ebx, 1
.text:004026D0                 adc     esi, 0
.text:004026D3                 xor     eax, esi
.text:004026D5                 xor     ecx, ebx
.text:004026D7                 or      eax, ecx
.text:004026D9                 jnz     short loc_4026E8
.text:004026DB                 call    _errno
.text:004026E0                 mov     ecx, [esp+40ECh+var_40B0]
.text:004026E4                 cmp     [eax], ecx
.text:004026E6                 jz      short loc_40274F
.text:004026E8
.text:004026E8 loc_4026E8:                             ; CODE XREF: sub_4020F0+5E9↑j
.text:004026E8                 mov     [esp+40ECh+var_40AC], ebx
.text:004026EC                 lea     ebx, [esp+40ECh+var_4060._Byte]
.text:004026F3                 mov     [esp+40ECh+var_40A8], esi
.text:004026F7                 call    _errno
.text:004026FC                 mov     esi, [eax]
.text:004026FE                 mov     [esp+40ECh+SizeInBytes], ebx
.text:00402702                 mov     edx, [esp+40ECh+var_40AC]
.text:00402706                 mov     ecx, [esp+40ECh+var_40A8]
.text:0040270A                 mov     [esp+40ECh+var_40B0], esi
.text:0040270E                 mov     [esp+40ECh+FileHandle], edx
.text:00402711                 mov     [esp+40ECh+ErrorMessage], ecx
.text:00402715                 call    sub_4045F0
.text:0040271A                 mov     esi, eax
.text:0040271C                 call    _errno
.text:00402721                 mov     [esp+40ECh+var_40DC], esi
.text:00402725                 mov     esi, dword ptr [esp+40ECh+var_4094]
.text:00402729                 mov     [esp+40ECh+SizeInBytes], offset aSS ; "%s:%s"
.text:00402731                 mov     [esp+40ECh+State], esi ; char
.text:00402735                 mov     ebx, [eax]
.text:00402737                 mov     [esp+40ECh+FileHandle], 0 ; Code
.text:0040273E                 mov     [esp+40ECh+ErrorMessage], ebx ; ErrorMessage
.text:00402742                 call    sub_405AB0
.text:00402747                 mov     [esp+40ECh+var_4061], 0
.text:0040274F
.text:0040274F loc_40274F:                             ; CODE XREF: sub_4020F0+5F6↑j
.text:0040274F                 inc     ebp
.text:00402750                 dec     edi
.text:00402751                 jmp     loc_402626
.text:00402756 ; ---------------------------------------------------------------------------
.text:00402756
.text:00402756 loc_402756:                             ; CODE XREF: sub_4020F0+42C↑j
.text:00402756                 mov     [esp+40ECh+var_4060._Wchar], ebx
.text:0040275D                 test    edi, edi
.text:0040275F                 jz      loc_40262E
.text:00402765                 cmp     edi, 4000h
.text:0040276B                 jz      short loc_402789
.text:0040276D
.text:0040276D loc_40276D:                             ; CODE XREF: sub_4020F0+69F↓j
.text:0040276D                 mov     [esp+40ECh+ErrorMessage], ebp ; Src
.text:00402771                 lea     ebp, [esp+40ECh+SrcCh]
.text:00402778                 mov     [esp+40ECh+SizeInBytes], edi ; Size
.text:0040277C                 mov     [esp+40ECh+FileHandle], ebp ; void *
.text:0040277F                 call    memmove
.text:00402784                 jmp     loc_40262E
.text:00402789 ; ---------------------------------------------------------------------------
.text:00402789
.text:00402789 loc_402789:                             ; CODE XREF: sub_4020F0+67B↑j
.text:00402789                 inc     ebp
.text:0040278A                 mov     edi, 3FFFh
.text:0040278F                 jmp     short loc_40276D
.text:00402791 ; ---------------------------------------------------------------------------
.text:00402791
.text:00402791 loc_402791:                             ; CODE XREF: sub_4020F0+3E2↑j
.text:00402791                 call    _errno
.text:00402796                 mov     [esp+40ECh+SizeInBytes], offset aS ; "%s"
.text:0040279E                 mov     ebx, dword ptr [esp+40ECh+var_4094]
.text:004027A2                 mov     [esp+40ECh+State], ebx ; char
.text:004027A6                 mov     edx, [eax]
.text:004027A8                 mov     [esp+40ECh+FileHandle], 0 ; Code
.text:004027AF                 mov     [esp+40ECh+ErrorMessage], edx ; ErrorMessage
.text:004027B3                 call    sub_405AB0
.text:004027B8                 mov     [esp+40ECh+var_4061], 0
.text:004027C0
.text:004027C0 loc_4027C0:                             ; CODE XREF: sub_4020F0+3D9↑j
.text:004027C0                 mov     eax, [esp+40ECh+var_4088]
.text:004027C4                 cmp     [esp+40ECh+var_40A0], eax
.text:004027C8                 jb      short loc_4027E6
.text:004027CA                 ja      short loc_4027D6
.text:004027CC                 mov     ebx, [esp+40ECh+var_408C]
.text:004027D0                 cmp     [esp+40ECh+var_40A4], ebx
.text:004027D4                 jbe     short loc_4027E6
.text:004027D6
.text:004027D6 loc_4027D6:                             ; CODE XREF: sub_4020F0+6DA↑j
.text:004027D6                 mov     ebp, [esp+40ECh+var_40A4]
.text:004027DA                 mov     esi, [esp+40ECh+var_40A0]
.text:004027DE                 mov     [esp+40ECh+var_408C], ebp
.text:004027E2                 mov     [esp+40ECh+var_4088], esi
.text:004027E6
.text:004027E6 loc_4027E6:                             ; CODE XREF: sub_4020F0+6D8↑j
.text:004027E6                                         ; sub_4020F0+6E4↑j
.text:004027E6                 movzx   eax, [esp+40ECh+var_4095]
.text:004027EB
.text:004027EB loc_4027EB:                             ; CODE XREF: sub_4020F0+958↓j
.text:004027EB                 xor     ebp, ebp
.text:004027ED                 add     [esp+40ECh+var_4074], eax
.text:004027F1                 adc     [esp+40ECh+var_4070], ebp
.text:004027F5                 jmp     loc_40228E
.text:004027FA ; ---------------------------------------------------------------------------
.text:004027FA
.text:004027FA loc_4027FA:                             ; CODE XREF: sub_4020F0+370↑j
.text:004027FA                 mov     [esp+40ECh+var_40B1], 0
.text:004027FF                 mov     [esp+40ECh+var_40BC], 0
.text:00402807                 mov     [esp+40ECh+var_40B8], 0
.text:0040280F
.text:0040280F loc_40280F:                             ; CODE XREF: sub_4020F0+84B↓j
.text:0040280F                 mov     [esp+40ECh+SizeInBytes], 4000h
.text:00402817                 mov     edi, [esp+40ECh+arg_0]
.text:0040281E                 lea     eax, [esp+40ECh+SrcCh]
.text:00402825                 mov     [esp+40ECh+ErrorMessage], eax
.text:00402829                 mov     [esp+40ECh+FileHandle], edi
.text:0040282C                 call    sub_404580
.text:00402831                 test    eax, eax
.text:00402833                 mov     edi, eax
.text:00402835                 jz      loc_402A1D
.text:0040283B                 cmp     edi, 0FFFFFFFFh
.text:0040283E                 lea     ebx, [esp+40ECh+SrcCh]
.text:00402845                 jz      loc_4029EE
.text:0040284B                 xor     esi, esi
.text:0040284D                 add     [esp+40ECh+var_4084], edi
.text:00402851                 adc     [esp+40ECh+var_4080], esi
.text:00402855                 lea     esi, [esi+0]
.text:00402859                 lea     edi, [edi+0]
.text:00402860
.text:00402860 loc_402860:                             ; CODE XREF: sub_4020F0+845↓j
.text:00402860                 movsx   eax, byte ptr [ebx]
.text:00402863                 inc     ebx
.text:00402864                 sub     eax, 9          ; switch 24 cases
.text:00402867                 cmp     eax, 17h
.text:0040286A                 ja      def_402870      ; jumptable 00402870 default case, cases 14-31
.text:00402870                 jmp     ds:jpt_402870[eax*4] ; switch jump
.text:00402870 ; ---------------------------------------------------------------------------
.text:00402877                 align 4
.text:00402878 jpt_402870      dd offset loc_402940    ; DATA XREF: sub_4020F0+780↑r
.text:00402878                 dd offset loc_4028D8    ; jump table for switch statement
.text:00402878                 dd offset loc_402920
.text:00402878                 dd offset loc_4028E8
.text:00402878                 dd offset loc_4028E8
.text:00402878                 dd offset def_402870
.text:00402878                 dd offset def_402870
.text:00402878                 dd offset def_402870
.text:00402878                 dd offset def_402870
.text:00402878                 dd offset def_402870
.text:00402878                 dd offset def_402870
.text:00402878                 dd offset def_402870
.text:00402878                 dd offset def_402870
.text:00402878                 dd offset def_402870
.text:00402878                 dd offset def_402870
.text:00402878                 dd offset def_402870
.text:00402878                 dd offset def_402870
.text:00402878                 dd offset def_402870
.text:00402878                 dd offset def_402870
.text:00402878                 dd offset def_402870
.text:00402878                 dd offset def_402870
.text:00402878                 dd offset def_402870
.text:00402878                 dd offset def_402870
.text:00402878                 dd offset loc_4029E4
.text:004028D8 ; ---------------------------------------------------------------------------
.text:004028D8
.text:004028D8 loc_4028D8:                             ; CODE XREF: sub_4020F0+780↑j
.text:004028D8                                         ; DATA XREF: sub_4020F0:jpt_402870↑o
.text:004028D8                 add     [esp+40ECh+var_406C], 1 ; jumptable 00402870 case 10
.text:004028E0                 adc     [esp+40ECh+var_4068], 0
.text:004028E8
.text:004028E8 loc_4028E8:                             ; CODE XREF: sub_4020F0+780↑j
.text:004028E8                                         ; DATA XREF: sub_4020F0:jpt_402870↑o
.text:004028E8                 mov     ecx, [esp+40ECh+var_4088] ; jumptable 00402870 cases 12,13
.text:004028EC                 cmp     [esp+40ECh+var_40B8], ecx
.text:004028F0                 jb      short loc_40290E
.text:004028F2                 ja      short loc_4028FE
.text:004028F4                 mov     edx, [esp+40ECh+var_408C]
.text:004028F8                 cmp     [esp+40ECh+var_40BC], edx
.text:004028FC                 jbe     short loc_40290E
.text:004028FE
.text:004028FE loc_4028FE:                             ; CODE XREF: sub_4020F0+802↑j
.text:004028FE                 mov     ebp, [esp+40ECh+var_40BC]
.text:00402902                 mov     esi, [esp+40ECh+var_40B8]
.text:00402906                 mov     [esp+40ECh+var_408C], ebp
.text:0040290A                 mov     [esp+40ECh+var_4088], esi
.text:0040290E
.text:0040290E loc_40290E:                             ; CODE XREF: sub_4020F0+800↑j
.text:0040290E                                         ; sub_4020F0+80C↑j
.text:0040290E                 mov     [esp+40ECh+var_40BC], 0
.text:00402916                 mov     [esp+40ECh+var_40B8], 0
.text:0040291E                 mov     esi, esi
.text:00402920
.text:00402920 loc_402920:                             ; CODE XREF: sub_4020F0+780↑j
.text:00402920                                         ; sub_4020F0+86B↓j ...
.text:00402920                 movzx   ebp, [esp+40ECh+var_40B1] ; jumptable 00402870 case 11
.text:00402925                 xor     esi, esi
.text:00402927                 mov     [esp+40ECh+var_40B1], 0
.text:0040292C                 add     [esp+40ECh+var_4074], ebp
.text:00402930                 adc     [esp+40ECh+var_4070], esi
.text:00402934
.text:00402934 loc_402934:                             ; CODE XREF: sub_4020F0+891↓j
.text:00402934                                         ; sub_4020F0+8C9↓j
.text:00402934                 dec     edi
.text:00402935                 jnz     loc_402860
.text:0040293B                 jmp     loc_40280F
.text:00402940 ; ---------------------------------------------------------------------------
.text:00402940
.text:00402940 loc_402940:                             ; CODE XREF: sub_4020F0+780↑j
.text:00402940                                         ; DATA XREF: sub_4020F0:jpt_402870↑o
.text:00402940                 mov     edx, [esp+40ECh+var_40BC] ; jumptable 00402870 case 9
.text:00402944                 xor     ecx, ecx
.text:00402946                 and     edx, 7
.text:00402949                 sub     [esp+40ECh+var_40BC], edx
.text:0040294D                 sbb     [esp+40ECh+var_40B8], ecx
.text:00402951                 add     [esp+40ECh+var_40BC], 8
.text:00402956
.text:00402956 loc_402956:                             ; CODE XREF: sub_4020F0+8F9↓j
.text:00402956                 adc     [esp+40ECh+var_40B8], 0
.text:0040295B                 jmp     short loc_402920 ; jumptable 00402870 case 11
.text:0040295B ; ---------------------------------------------------------------------------
.text:0040295D                 align 10h
.text:00402960
.text:00402960 def_402870:                             ; CODE XREF: sub_4020F0+77A↑j
.text:00402960                                         ; sub_4020F0+780↑j
.text:00402960                                         ; DATA XREF: ...
.text:00402960                 movzx   edx, byte ptr [ebx-1] ; jumptable 00402870 default case, cases 14-31
.text:00402964                 mov     ecx, ds:__mb_cur_max
.text:0040296A                 cmp     dword ptr [ecx], 1
.text:0040296D                 jz      short loc_4029D0
.text:0040296F                 mov     [esp+40ECh+ErrorMessage], 157h ; Type
.text:00402977                 mov     [esp+40ECh+FileHandle], edx ; C
.text:0040297A                 call    _isctype
.text:0040297F
.text:0040297F loc_40297F:                             ; CODE XREF: sub_4020F0+8F2↓j
.text:0040297F                 test    eax, eax
.text:00402981                 jz      short loc_402934
.text:00402983                 add     [esp+40ECh+var_40BC], 1
.text:00402988                 mov     ecx, ds:__mb_cur_max
.text:0040298E                 adc     [esp+40ECh+var_40B8], 0
.text:00402993                 cmp     dword ptr [ecx], 1
.text:00402996                 movzx   edx, byte ptr [ebx-1]
.text:0040299A                 jz      short loc_4029BE
.text:0040299C                 mov     [esp+40ECh+ErrorMessage], 8 ; Type
.text:004029A4                 mov     [esp+40ECh+FileHandle], edx ; C
.text:004029A7                 call    _isctype
.text:004029AC
.text:004029AC loc_4029AC:                             ; CODE XREF: sub_4020F0+8DE↓j
.text:004029AC                 test    eax, eax
.text:004029AE                 jnz     loc_402920      ; jumptable 00402870 case 11
.text:004029B4                 mov     [esp+40ECh+var_40B1], 1
.text:004029B9                 jmp     loc_402934
.text:004029BE ; ---------------------------------------------------------------------------
.text:004029BE
.text:004029BE loc_4029BE:                             ; CODE XREF: sub_4020F0+8AA↑j
.text:004029BE                 mov     ebp, ds:_pctype
.text:004029C4                 mov     esi, [ebp+0]
.text:004029C7                 movzx   eax, word ptr [esi+edx*2]
.text:004029CB                 and     eax, 8
.text:004029CE                 jmp     short loc_4029AC
.text:004029D0 ; ---------------------------------------------------------------------------
.text:004029D0
.text:004029D0 loc_4029D0:                             ; CODE XREF: sub_4020F0+87D↑j
.text:004029D0                 mov     ebp, ds:_pctype
.text:004029D6                 mov     esi, [ebp+0]
.text:004029D9                 movzx   eax, word ptr [esi+edx*2]
.text:004029DD                 and     eax, 157h
.text:004029E2                 jmp     short loc_40297F
.text:004029E4 ; ---------------------------------------------------------------------------
.text:004029E4
.text:004029E4 loc_4029E4:                             ; CODE XREF: sub_4020F0+780↑j
.text:004029E4                                         ; DATA XREF: sub_4020F0:jpt_402870↑o
.text:004029E4                 add     [esp+40ECh+var_40BC], 1 ; jumptable 00402870 case 32
.text:004029E9                 jmp     loc_402956
.text:004029EE ; ---------------------------------------------------------------------------
.text:004029EE
.text:004029EE loc_4029EE:                             ; CODE XREF: sub_4020F0+755↑j
.text:004029EE                 call    _errno
.text:004029F3                 mov     [esp+40ECh+SizeInBytes], offset aS ; "%s"
.text:004029FB                 mov     ebx, dword ptr [esp+40ECh+var_4094]
.text:004029FF                 mov     [esp+40ECh+State], ebx ; char
.text:00402A03                 mov     edx, [eax]
.text:00402A05                 mov     [esp+40ECh+FileHandle], 0 ; Code
.text:00402A0C                 mov     [esp+40ECh+ErrorMessage], edx ; ErrorMessage
.text:00402A10                 call    sub_405AB0
.text:00402A15                 mov     [esp+40ECh+var_4061], 0
.text:00402A1D
.text:00402A1D loc_402A1D:                             ; CODE XREF: sub_4020F0+745↑j
.text:00402A1D                 mov     ebx, [esp+40ECh+var_4088]
.text:00402A21                 cmp     [esp+40ECh+var_40B8], ebx
.text:00402A25                 jb      short loc_402A43
.text:00402A27                 ja      short loc_402A33
.text:00402A29                 mov     ecx, [esp+40ECh+var_408C]
.text:00402A2D                 cmp     [esp+40ECh+var_40BC], ecx
.text:00402A31                 jbe     short loc_402A43
.text:00402A33
.text:00402A33 loc_402A33:                             ; CODE XREF: sub_4020F0+937↑j
.text:00402A33                 mov     edx, [esp+40ECh+var_40BC]
.text:00402A37                 mov     esi, [esp+40ECh+var_40B8]
.text:00402A3B                 mov     [esp+40ECh+var_408C], edx
.text:00402A3F                 mov     [esp+40ECh+var_4088], esi
.text:00402A43
.text:00402A43 loc_402A43:                             ; CODE XREF: sub_4020F0+935↑j
.text:00402A43                                         ; sub_4020F0+941↑j
.text:00402A43                 movzx   eax, [esp+40ECh+var_40B1]
.text:00402A48                 jmp     loc_4027EB
.text:00402A48 ; ---------------------------------------------------------------------------
.text:00402A4D                 align 10h
.text:00402A50
.text:00402A50 loc_402A50:                             ; CODE XREF: sub_4020F0+361↑j
.text:00402A50                                         ; sub_4020F0+9E2↓j
.text:00402A50                 mov     [esp+40ECh+SizeInBytes], 4000h
.text:00402A58                 mov     ecx, [esp+40ECh+arg_0]
.text:00402A5F                 lea     esi, [esp+40ECh+SrcCh]
.text:00402A66                 mov     [esp+40ECh+ErrorMessage], esi
.text:00402A6A                 mov     [esp+40ECh+FileHandle], ecx
.text:00402A6D                 call    sub_404580
.text:00402A72                 test    eax, eax
.text:00402A74                 mov     edi, eax
.text:00402A76                 jz      loc_40228E
.text:00402A7C                 cmp     edi, 0FFFFFFFFh
.text:00402A7F                 lea     edx, [esp+40ECh+SrcCh]
.text:00402A86                 jz      loc_40225F
.text:00402A8C                 lea     esi, [esi+0]
.text:00402A90
.text:00402A90 loc_402A90:                             ; CODE XREF: sub_4020F0+9D6↓j
.text:00402A90                 mov     [esp+40ECh+FileHandle], edx ; Buf
.text:00402A93                 lea     ebp, [esp+40ECh+SrcCh]
.text:00402A9A                 add     ebp, edi
.text:00402A9C                 mov     [esp+40ECh+ErrorMessage], 0Ah ; Val
.text:00402AA4                 sub     ebp, edx
.text:00402AA6                 mov     [esp+40ECh+SizeInBytes], ebp ; MaxCount
.text:00402AAA                 call    memchr
.text:00402AAF                 test    eax, eax
.text:00402AB1                 mov     edx, eax
.text:00402AB3                 jz      short loc_402AC8
.text:00402AB5                 inc     edx
.text:00402AB6                 add     [esp+40ECh+var_406C], 1
.text:00402ABE                 adc     [esp+40ECh+var_4068], 0
.text:00402AC6                 jmp     short loc_402A90
.text:00402AC8 ; ---------------------------------------------------------------------------
.text:00402AC8
.text:00402AC8 loc_402AC8:                             ; CODE XREF: sub_4020F0+9C3↑j
.text:00402AC8                 xor     ebx, ebx
.text:00402ACA                 add     [esp+40ECh+var_4084], edi
.text:00402ACE                 adc     [esp+40ECh+var_4080], ebx
.text:00402AD2                 jmp     loc_402A50
.text:00402AD7 ; ---------------------------------------------------------------------------
.text:00402AD7
.text:00402AD7 loc_402AD7:                             ; CODE XREF: sub_4020F0+CE↑j
.text:00402AD7                 mov     [esp+40ECh+ErrorMessage], 8000h ; Mode
.text:00402ADF                 mov     ebp, [esp+40ECh+arg_0]
.text:00402AE6                 mov     [esp+40ECh+FileHandle], ebp ; FileHandle
.text:00402AE9                 call    _setmode
.text:00402AEE                 jmp     loc_4021C4
.text:00402AF3 ; ---------------------------------------------------------------------------
.text:00402AF3
.text:00402AF3 loc_402AF3:                             ; CODE XREF: sub_4020F0+8B↑j
.text:00402AF3                 xor     eax, eax
.text:00402AF5                 cmp     ds:byte_419070, 0
.text:00402AFC                 jnz     short loc_402B07
.text:00402AFE                 cmp     ds:byte_419080, 0
.text:00402B05                 jz      short loc_402B09
.text:00402B07
.text:00402B07 loc_402B07:                             ; CODE XREF: sub_4020F0+A0C↑j
.text:00402B07                 mov     al, 1
.text:00402B09
.text:00402B09 loc_402B09:                             ; CODE XREF: sub_4020F0+A15↑j
.text:00402B09                 mov     [esp+40ECh+var_408D], al
.text:00402B0D                 mov     [esp+40ECh+var_408E], 0
.text:00402B12                 jmp     loc_402197
.text:00402B17 ; ---------------------------------------------------------------------------
.text:00402B17
.text:00402B17 loc_402B17:                             ; CODE XREF: sub_4020F0+2A↑j
.text:00402B17                 mov     [esp+40ECh+FileHandle], offset aStandardInput ; "standard input"
.text:00402B1E                 call    ds:libintl_gettext
.text:00402B24                 mov     dword ptr [esp+40ECh+var_4094], eax
.text:00402B28                 jmp     loc_402120
.text:00402B28 sub_4020F0      endp
.text:00402B28
.text:00402B28 ; ---------------------------------------------------------------------------
.text:00402B2D                 align 20h
.text:00402B40 dword_402B40    dd 90002D2Dh, 7 dup(90909090h)
.text:00402B40                                         ; DATA XREF: sub_402D90+E4↓o
.text:00402B60 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402B60                                         ; DATA XREF: sub_402D90+2FC↓o
.text:00402B8D                 align 20h
.text:00402BA0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402BA0                                         ; DATA XREF: sub_402D90:loc_4030F2↓o
.text:00402BCD                 align 20h
.text:00402BE0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00402BE0                                         ; DATA XREF: sub_402D90:loc_403190↓o
.text:00402BE0                                         ; sub_402D90:loc_403557↓o
.text:00402C06                 align 20h
.text:00402C20 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00402C20                                         ; DATA XREF: sub_402D90+48E↓o
.text:00402C40 dword_402C40    dd 90909000h, 7 dup(90909090h)
.text:00402C40                                         ; DATA XREF: sub_402D90:loc_403261↓o
.text:00402C60 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00402C60                                         ; DATA XREF: sub_402D90:loc_40327A↓o
.text:00402C80 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00402C80                                         ; DATA XREF: sub_402D90:loc_40335F↓o
.text:00402C80                                         ; sub_402D90:loc_40368C↓o
.text:00402CA7                 align 20h
.text:00402CC0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402CC0                                         ; DATA XREF: sub_402D90:loc_4034D3↓o
.text:00402CEE                 align 20h
.text:00402D00 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00402D00                                         ; DATA XREF: sub_402D90:loc_4035BF↓o
.text:00402D21 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00402D21                                         ; DATA XREF: sub_402D90+93F↓o
.text:00402D3B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00402D3B                                         ; DATA XREF: sub_402D90:loc_403707↓o
.text:00402D55 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00402D55                                         ; DATA XREF: sub_402D90:loc_40372E↓o
.text:00402D73 ; const char VarName[]
.text:00402D73 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_402D90:loc_4038E0↓o
.text:00402D83                 align 10h
.text:00402D90
.text:00402D90 ; =============== S U B R O U T I N E =======================================
.text:00402D90
.text:00402D90
.text:00402D90 ; int __cdecl sub_402D90(int, int, char *Str, int, int, int, int, int)
.text:00402D90 sub_402D90      proc near               ; CODE XREF: sub_403920+5A↓p
.text:00402D90                                         ; .text:00403A0A↓p ...
.text:00402D90
.text:00402D90 Str1            = dword ptr -5Ch
.text:00402D90 Str2            = dword ptr -58h
.text:00402D90 MaxCount        = dword ptr -54h
.text:00402D90 var_50          = dword ptr -50h
.text:00402D90 var_4C          = dword ptr -4Ch
.text:00402D90 var_3C          = dword ptr -3Ch
.text:00402D90 var_38          = dword ptr -38h
.text:00402D90 var_34          = dword ptr -34h
.text:00402D90 var_30          = dword ptr -30h
.text:00402D90 var_2C          = dword ptr -2Ch
.text:00402D90 var_28          = dword ptr -28h
.text:00402D90 var_24          = dword ptr -24h
.text:00402D90 var_20          = dword ptr -20h
.text:00402D90 var_1C          = dword ptr -1Ch
.text:00402D90 var_18          = dword ptr -18h
.text:00402D90 var_14          = dword ptr -14h
.text:00402D90 arg_0           = dword ptr  4
.text:00402D90 arg_4           = dword ptr  8
.text:00402D90 Str             = dword ptr  0Ch
.text:00402D90 arg_C           = dword ptr  10h
.text:00402D90 arg_10          = dword ptr  14h
.text:00402D90 arg_14          = dword ptr  18h
.text:00402D90 arg_18          = dword ptr  1Ch
.text:00402D90 arg_1C          = dword ptr  20h
.text:00402D90
.text:00402D90                 push    ebp
.text:00402D91                 mov     eax, 0FFFFFFFFh
.text:00402D96                 push    edi
.text:00402D97                 push    esi
.text:00402D98                 push    ebx
.text:00402D99                 sub     esp, 4Ch
.text:00402D9C                 mov     esi, [esp+5Ch+Str]
.text:00402DA0                 mov     ebp, [esp+5Ch+arg_1C]
.text:00402DA4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00402DA7                 mov     ebx, [ebp+4]
.text:00402DAA                 setz    dl
.text:00402DAD                 movzx   ecx, dl
.text:00402DB0                 dec     ecx
.text:00402DB1                 and     ecx, ebx
.text:00402DB3                 mov     [esp+5Ch+var_14], ecx
.text:00402DB7                 mov     ecx, [esp+5Ch+arg_0]
.text:00402DBB                 test    ecx, ecx
.text:00402DBD                 jle     loc_402EE7
.text:00402DC3                 mov     dword ptr [ebp+0Ch], 0
.text:00402DCA                 mov     ebx, [ebp+0]
.text:00402DCD                 test    ebx, ebx
.text:00402DCF                 jz      loc_403900
.text:00402DD5                 mov     edi, [ebp+10h]
.text:00402DD8                 test    edi, edi
.text:00402DDA                 jnz     short loc_402E33
.text:00402DDC                 lea     esi, [esi+0]
.text:00402DE0
.text:00402DE0 loc_402DE0:                             ; CODE XREF: sub_402D90+B7C↓j
.text:00402DE0                 mov     [ebp+24h], ebx
.text:00402DE3                 mov     esi, [esp+5Ch+Str]
.text:00402DE7                 mov     [ebp+20h], ebx
.text:00402DEA                 mov     ecx, [esp+5Ch+arg_18]
.text:00402DEE                 xor     ebx, ebx
.text:00402DF0                 mov     dword ptr [ebp+14h], 0
.text:00402DF7                 test    ecx, ecx
.text:00402DF9                 jz      loc_4038E0
.text:00402DFF
.text:00402DFF loc_402DFF:                             ; CODE XREF: sub_402D90+B64↓j
.text:00402DFF                 mov     ebx, 1
.text:00402E04
.text:00402E04 loc_402E04:                             ; CODE XREF: sub_402D90+B5E↓j
.text:00402E04                 mov     [ebp+1Ch], ebx
.text:00402E07                 mov     ecx, [esp+5Ch+Str]
.text:00402E0B                 movzx   eax, byte ptr [ecx]
.text:00402E0E                 cmp     al, 2Dh ; '-'
.text:00402E10                 jz      loc_4038D0
.text:00402E16                 cmp     al, 2Bh ; '+'
.text:00402E18                 jz      loc_4038B9
.text:00402E1E                 xor     edx, edx
.text:00402E20                 test    ebx, ebx
.text:00402E22                 setz    dl
.text:00402E25                 mov     [ebp+18h], edx
.text:00402E28
.text:00402E28 loc_402E28:                             ; CODE XREF: sub_402D90+B35↓j
.text:00402E28                 mov     [esp+5Ch+Str], esi
.text:00402E2C                 mov     dword ptr [ebp+10h], 1
.text:00402E33
.text:00402E33 loc_402E33:                             ; CODE XREF: sub_402D90+4A↑j
.text:00402E33                 mov     eax, [ebp+14h]
.text:00402E36                 test    eax, eax
.text:00402E38                 jz      short loc_402E43
.text:00402E3A                 cmp     byte ptr [eax], 0
.text:00402E3D                 jnz     loc_402F20
.text:00402E43
.text:00402E43 loc_402E43:                             ; CODE XREF: sub_402D90+A8↑j
.text:00402E43                 mov     ebx, [ebp+0]
.text:00402E46                 cmp     [ebp+24h], ebx
.text:00402E49                 jle     short loc_402E4E
.text:00402E4B                 mov     [ebp+24h], ebx
.text:00402E4E
.text:00402E4E loc_402E4E:                             ; CODE XREF: sub_402D90+B9↑j
.text:00402E4E                 cmp     [ebp+20h], ebx
.text:00402E51                 jle     short loc_402E56
.text:00402E53                 mov     [ebp+20h], ebx
.text:00402E56
.text:00402E56 loc_402E56:                             ; CODE XREF: sub_402D90+C1↑j
.text:00402E56                 cmp     dword ptr [ebp+18h], 1
.text:00402E5A                 jz      loc_403830
.text:00402E60
.text:00402E60 loc_402E60:                             ; CODE XREF: sub_402D90+B13↓j
.text:00402E60                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402E64                 jz      loc_403814
.text:00402E6A                 cld
.text:00402E6B                 mov     ecx, [esp+5Ch+arg_4]
.text:00402E6F                 mov     edx, 3
.text:00402E74                 mov     edi, offset dword_402B40
.text:00402E79                 mov     esi, [ecx+ebx*4]
.text:00402E7C                 mov     ecx, edx
.text:00402E7E                 repe cmpsb
.text:00402E80                 jnz     short loc_402EBC
.text:00402E82                 mov     edx, [ebp+24h]
.text:00402E85                 lea     eax, [ebx+1]
.text:00402E88                 cmp     [ebp+20h], edx
.text:00402E8B                 mov     [ebp+0], eax
.text:00402E8E                 jz      loc_403828
.text:00402E94                 cmp     edx, eax
.text:00402E96                 jz      short loc_402EB0
.text:00402E98                 mov     [esp+5Ch+Str2], ebp
.text:00402E9C                 mov     ebx, [esp+5Ch+arg_4]
.text:00402EA0                 mov     [esp+5Ch+Str1], ebx
.text:00402EA3                 call    sub_403A40
.text:00402EA8                 nop
.text:00402EA9                 lea     esi, [esi+0]
.text:00402EB0
.text:00402EB0 loc_402EB0:                             ; CODE XREF: sub_402D90+106↑j
.text:00402EB0                                         ; sub_402D90+A9B↓j
.text:00402EB0                 mov     eax, [esp+5Ch+arg_0]
.text:00402EB4                 mov     ebx, eax
.text:00402EB6                 mov     [ebp+24h], eax
.text:00402EB9                 mov     [ebp+0], eax
.text:00402EBC
.text:00402EBC loc_402EBC:                             ; CODE XREF: sub_402D90+F0↑j
.text:00402EBC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402EC0                 jz      loc_403814
.text:00402EC6                 mov     esi, [esp+5Ch+arg_4]
.text:00402ECA                 mov     eax, [esi+ebx*4]
.text:00402ECD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402ED0                 jz      short loc_402EF7
.text:00402ED2
.text:00402ED2 loc_402ED2:                             ; CODE XREF: sub_402D90+16D↓j
.text:00402ED2                 mov     edx, [ebp+18h]
.text:00402ED5                 test    edx, edx
.text:00402ED7                 jz      short loc_402EF0
.text:00402ED9                 mov     [ebp+0Ch], eax
.text:00402EDC                 lea     edi, [ebx+1]
.text:00402EDF                 mov     eax, 1
.text:00402EE4                 mov     [ebp+0], edi
.text:00402EE7
.text:00402EE7 loc_402EE7:                             ; CODE XREF: sub_402D90+2D↑j
.text:00402EE7                                         ; sub_402D90+165↓j ...
.text:00402EE7                 add     esp, 4Ch
.text:00402EEA                 pop     ebx
.text:00402EEB                 pop     esi
.text:00402EEC                 pop     edi
.text:00402EED                 pop     ebp
.text:00402EEE                 retn
.text:00402EEE ; ---------------------------------------------------------------------------
.text:00402EEF                 align 10h
.text:00402EF0
.text:00402EF0 loc_402EF0:                             ; CODE XREF: sub_402D90+147↑j
.text:00402EF0                                         ; sub_402D90+A8A↓j ...
.text:00402EF0                 mov     eax, 0FFFFFFFFh
.text:00402EF5                 jmp     short loc_402EE7
.text:00402EF7 ; ---------------------------------------------------------------------------
.text:00402EF7
.text:00402EF7 loc_402EF7:                             ; CODE XREF: sub_402D90+140↑j
.text:00402EF7                 movzx   edx, byte ptr [eax+1]
.text:00402EFB                 test    dl, dl
.text:00402EFD                 jz      short loc_402ED2
.text:00402EFF                 mov     ebx, [esp+5Ch+arg_C]
.text:00402F03                 xor     ecx, ecx
.text:00402F05                 test    ebx, ebx
.text:00402F07                 jz      short loc_402F12
.text:00402F09                 cmp     dl, 2Dh ; '-'
.text:00402F0C                 jz      loc_40380A
.text:00402F12
.text:00402F12 loc_402F12:                             ; CODE XREF: sub_402D90+177↑j
.text:00402F12                                         ; sub_402D90+A7F↓j
.text:00402F12                 lea     esi, [ecx+eax+1]
.text:00402F16                 mov     [ebp+14h], esi
.text:00402F19                 lea     esi, [esi+0]
.text:00402F20
.text:00402F20 loc_402F20:                             ; CODE XREF: sub_402D90+AD↑j
.text:00402F20                 mov     ecx, [esp+5Ch+arg_C]
.text:00402F24                 test    ecx, ecx
.text:00402F26                 jz      loc_4032B0
.text:00402F2C                 mov     edx, [ebp+0]
.text:00402F2F                 mov     edi, [esp+5Ch+arg_4]
.text:00402F33                 mov     eax, [edi+edx*4]
.text:00402F36                 movzx   edx, byte ptr [eax+1]
.text:00402F3A                 cmp     dl, 2Dh ; '-'
.text:00402F3D                 jz      short loc_402F55
.text:00402F3F                 mov     ebx, [esp+5Ch+arg_14]
.text:00402F43                 test    ebx, ebx
.text:00402F45                 jz      loc_4032B0
.text:00402F4B                 cmp     byte ptr [eax+2], 0
.text:00402F4F                 jz      loc_4037EA
.text:00402F55
.text:00402F55 loc_402F55:                             ; CODE XREF: sub_402D90+1AD↑j
.text:00402F55                                         ; sub_402D90+A75↓j
.text:00402F55                 mov     [esp+5Ch+var_18], 0
.text:00402F5D                 mov     ecx, [ebp+14h]
.text:00402F60                 mov     [esp+5Ch+var_1C], 0
.text:00402F68                 mov     [esp+5Ch+var_20], 0
.text:00402F70                 mov     edi, ecx
.text:00402F72                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00402F7A                 movzx   eax, byte ptr [ecx]
.text:00402F7D                 test    al, al
.text:00402F7F                 jz      short loc_402F9C
.text:00402F81                 cmp     al, 3Dh ; '='
.text:00402F83                 jz      short loc_402F9C
.text:00402F85                 lea     esi, [esi+0]
.text:00402F89                 lea     edi, [edi+0]
.text:00402F90
.text:00402F90 loc_402F90:                             ; CODE XREF: sub_402D90+20A↓j
.text:00402F90                 inc     edi
.text:00402F91                 movzx   eax, byte ptr [edi]
.text:00402F94                 test    al, al
.text:00402F96                 jz      short loc_402F9C
.text:00402F98                 cmp     al, 3Dh ; '='
.text:00402F9A                 jnz     short loc_402F90
.text:00402F9C
.text:00402F9C loc_402F9C:                             ; CODE XREF: sub_402D90+1EF↑j
.text:00402F9C                                         ; sub_402D90+1F3↑j ...
.text:00402F9C                 mov     [esp+5Ch+var_28], 0
.text:00402FA4                 mov     esi, [esp+5Ch+arg_C]
.text:00402FA8                 mov     ebx, [esi]
.text:00402FAA                 test    ebx, ebx
.text:00402FAC                 mov     edx, ebx
.text:00402FAE                 jz      loc_4031D0
.text:00402FB4                 lea     esi, [esi+0]
.text:00402FBA                 lea     edi, [edi+0]
.text:00402FC0
.text:00402FC0 loc_402FC0:                             ; CODE XREF: sub_402D90+25E↓j
.text:00402FC0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00402FC4                 mov     ebx, edi
.text:00402FC6                 sub     ebx, ecx
.text:00402FC8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00402FCC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00402FCF                 call    strncmp
.text:00402FD4                 test    eax, eax
.text:00402FD6                 jz      loc_403766
.text:00402FDC
.text:00402FDC loc_402FDC:                             ; CODE XREF: sub_402D90+A0F↓j
.text:00402FDC                                         ; sub_402D90+A24↓j ...
.text:00402FDC                 inc     [esp+5Ch+var_28]
.text:00402FE0                 add     esi, 10h
.text:00402FE3                 mov     ecx, [esi]
.text:00402FE5                 test    ecx, ecx
.text:00402FE7                 mov     edx, ecx
.text:00402FE9                 jz      short loc_402FF0
.text:00402FEB                 mov     ecx, [ebp+14h]
.text:00402FEE                 jmp     short loc_402FC0
.text:00402FF0 ; ---------------------------------------------------------------------------
.text:00402FF0
.text:00402FF0 loc_402FF0:                             ; CODE XREF: sub_402D90+259↑j
.text:00402FF0                                         ; sub_402D90+A55↓j
.text:00402FF0                 mov     esi, [esp+5Ch+var_20]
.text:00402FF4                 test    esi, esi
.text:00402FF6                 jz      short loc_403004
.text:00402FF8                 mov     edx, [esp+5Ch+var_1C]
.text:00402FFC                 test    edx, edx
.text:00402FFE                 jz      loc_403710
.text:00403004
.text:00403004 loc_403004:                             ; CODE XREF: sub_402D90+266↑j
.text:00403004                 mov     eax, [esp+5Ch+var_18]
.text:00403008                 test    eax, eax
.text:0040300A                 jz      loc_4031D0
.text:00403010                 mov     ecx, [ebp+0]
.text:00403013                 lea     eax, [ecx+1]
.text:00403016                 mov     [ebp+0], eax
.text:00403019                 cmp     byte ptr [edi], 0
.text:0040301C                 jz      loc_403130
.text:00403022                 mov     ecx, [esp+5Ch+var_18]
.text:00403026                 mov     esi, [ecx+4]
.text:00403029                 test    esi, esi
.text:0040302B                 jz      short loc_403076
.text:0040302D                 lea     ebx, [edi+1]
.text:00403030                 mov     [ebp+0Ch], ebx
.text:00403033
.text:00403033 loc_403033:                             ; CODE XREF: sub_402D90+3A8↓j
.text:00403033                                         ; sub_402D90+3C4↓j
.text:00403033                 mov     ebx, [ebp+14h]
.text:00403036                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00403039                 call    strlen
.text:0040303E                 add     [ebp+14h], eax
.text:00403041                 mov     esi, [esp+5Ch+arg_10]
.text:00403045                 test    esi, esi
.text:00403047                 jz      short loc_403053
.text:00403049                 mov     ebp, [esp+5Ch+var_24]
.text:0040304D                 mov     ecx, [esp+5Ch+arg_10]
.text:00403051                 mov     [ecx], ebp
.text:00403053
.text:00403053 loc_403053:                             ; CODE XREF: sub_402D90+2B7↑j
.text:00403053                 mov     eax, [esp+5Ch+var_18]
.text:00403057                 mov     ecx, [eax+8]
.text:0040305A                 test    ecx, ecx
.text:0040305C                 jnz     short loc_40306A
.text:0040305E                 mov     ecx, [esp+5Ch+var_18]
.text:00403062
.text:00403062 loc_403062:                             ; CODE XREF: sub_402D90+723↓j
.text:00403062                 mov     eax, [ecx+0Ch]
.text:00403065                 jmp     loc_402EE7
.text:0040306A ; ---------------------------------------------------------------------------
.text:0040306A
.text:0040306A loc_40306A:                             ; CODE XREF: sub_402D90+2CC↑j
.text:0040306A                                         ; sub_402D90+719↓j
.text:0040306A                 mov     esi, [eax+0Ch]
.text:0040306D                 xor     eax, eax
.text:0040306F                 mov     [ecx], esi
.text:00403071                 jmp     loc_402EE7
.text:00403076 ; ---------------------------------------------------------------------------
.text:00403076
.text:00403076 loc_403076:                             ; CODE XREF: sub_402D90+29B↑j
.text:00403076                 mov     edi, [esp+5Ch+var_14]
.text:0040307A                 test    edi, edi
.text:0040307C                 jz      short loc_4030D0
.text:0040307E                 mov     esi, [esp+5Ch+arg_4]
.text:00403082                 mov     edx, [esi+eax*4-4]
.text:00403086                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040308A                 jz      short loc_4030F2
.text:0040308C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00403093                 call    ds:libintl_gettext
.text:00403099                 mov     edx, [esp+5Ch+var_18]
.text:0040309D                 mov     edi, [edx]
.text:0040309F                 mov     [esp+5Ch+var_4C], edi
.text:004030A3                 mov     ebx, [ebp+0]
.text:004030A6                 mov     edi, [esp+5Ch+arg_4]
.text:004030AA                 mov     ecx, [edi+ebx*4-4]
.text:004030AE                 movsx   esi, byte ptr [ecx]
.text:004030B1                 mov     ecx, ds:_iob
.text:004030B7                 add     ecx, 40h ; '@'
.text:004030BA                 mov     [esp+5Ch+var_50], esi
.text:004030BE                 mov     ebx, [edi]
.text:004030C0                 mov     [esp+5Ch+Str2], eax ; Format
.text:004030C4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004030C7                 mov     [esp+5Ch+MaxCount], ebx
.text:004030CB                 call    fprintf
.text:004030D0
.text:004030D0 loc_4030D0:                             ; CODE XREF: sub_402D90+2EC↑j
.text:004030D0                                         ; sub_402D90+398↓j
.text:004030D0                 mov     ecx, [ebp+14h]
.text:004030D3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004030D6                 call    strlen
.text:004030DB                 add     [ebp+14h], eax
.text:004030DE                 mov     eax, [esp+5Ch+var_18]
.text:004030E2                 mov     esi, [eax+0Ch]
.text:004030E5                 mov     [ebp+8], esi
.text:004030E8
.text:004030E8 loc_4030E8:                             ; CODE XREF: sub_402D90+4E5↓j
.text:004030E8                                         ; sub_402D90+73E↓j ...
.text:004030E8                 mov     eax, 3Fh ; '?'
.text:004030ED                 jmp     loc_402EE7
.text:004030F2 ; ---------------------------------------------------------------------------
.text:004030F2
.text:004030F2 loc_4030F2:                             ; CODE XREF: sub_402D90+2FA↑j
.text:004030F2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:004030F9                 call    ds:libintl_gettext
.text:004030FF                 mov     edx, [esp+5Ch+var_18]
.text:00403103                 mov     edi, [esp+5Ch+arg_4]
.text:00403107                 mov     ecx, ds:_iob
.text:0040310D                 mov     esi, [edx]
.text:0040310F                 add     ecx, 40h ; '@'
.text:00403112                 mov     [esp+5Ch+var_50], esi
.text:00403116                 mov     ebx, [edi]
.text:00403118                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040311C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040311F                 mov     [esp+5Ch+MaxCount], ebx
.text:00403123                 call    fprintf
.text:00403128                 jmp     short loc_4030D0
.text:00403128 ; ---------------------------------------------------------------------------
.text:0040312A                 align 10h
.text:00403130
.text:00403130 loc_403130:                             ; CODE XREF: sub_402D90+28C↑j
.text:00403130                 mov     ebx, [esp+5Ch+var_18]
.text:00403134                 cmp     dword ptr [ebx+4], 1
.text:00403138                 jnz     loc_403033
.text:0040313E                 cmp     eax, [esp+5Ch+arg_0]
.text:00403142                 jge     short loc_403159
.text:00403144                 mov     ebx, [esp+5Ch+arg_4]
.text:00403148                 lea     edi, [ecx+2]
.text:0040314B                 mov     [ebp+0], edi
.text:0040314E                 mov     esi, [ebx+eax*4]
.text:00403151                 mov     [ebp+0Ch], esi
.text:00403154                 jmp     loc_403033
.text:00403159 ; ---------------------------------------------------------------------------
.text:00403159
.text:00403159 loc_403159:                             ; CODE XREF: sub_402D90+3B2↑j
.text:00403159                 mov     edx, [esp+5Ch+var_14]
.text:0040315D                 test    edx, edx
.text:0040315F                 jnz     short loc_403190
.text:00403161
.text:00403161 loc_403161:                             ; CODE XREF: sub_402D90+437↓j
.text:00403161                 mov     edx, [ebp+14h]
.text:00403164                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403167                 call    strlen
.text:0040316C                 add     [ebp+14h], eax
.text:0040316F                 mov     eax, [esp+5Ch+var_18]
.text:00403173                 mov     edi, [eax+0Ch]
.text:00403176                 mov     [ebp+8], edi
.text:00403179
.text:00403179 loc_403179:                             ; CODE XREF: sub_402D90+7C2↓j
.text:00403179                 mov     ebp, [esp+5Ch+Str]
.text:0040317D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00403181                 setnz   bl
.text:00403184                 movzx   esi, bl
.text:00403187                 lea     eax, [esi+esi*4+3Ah]
.text:0040318B                 jmp     loc_402EE7
.text:00403190 ; ---------------------------------------------------------------------------
.text:00403190
.text:00403190 loc_403190:                             ; CODE XREF: sub_402D90+3CF↑j
.text:00403190                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00403197                 call    ds:libintl_gettext
.text:0040319D                 mov     ecx, [ebp+0]
.text:004031A0                 mov     esi, [esp+5Ch+arg_4]
.text:004031A4                 mov     ebx, [esi+ecx*4-4]
.text:004031A8                 mov     ecx, ds:_iob
.text:004031AE                 mov     [esp+5Ch+var_50], ebx
.text:004031B2                 mov     edi, [esi]
.text:004031B4                 add     ecx, 40h ; '@'
.text:004031B7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004031BB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004031BE                 mov     [esp+5Ch+MaxCount], edi
.text:004031C2                 call    fprintf
.text:004031C7                 jmp     short loc_403161
.text:004031C7 ; ---------------------------------------------------------------------------
.text:004031C9                 align 10h
.text:004031D0
.text:004031D0 loc_4031D0:                             ; CODE XREF: sub_402D90+21E↑j
.text:004031D0                                         ; sub_402D90+27A↑j
.text:004031D0                 mov     eax, [esp+5Ch+arg_14]
.text:004031D4                 test    eax, eax
.text:004031D6                 jz      short loc_403206
.text:004031D8                 mov     ebx, [ebp+0]
.text:004031DB                 mov     esi, [esp+5Ch+arg_4]
.text:004031DF                 mov     edi, [esi+ebx*4]
.text:004031E2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004031E6                 jz      short loc_403209
.text:004031E8                 mov     ecx, [ebp+14h]
.text:004031EB                 mov     edx, [esp+5Ch+Str]
.text:004031EF                 movsx   ebx, byte ptr [ecx]
.text:004031F2                 mov     [esp+5Ch+Str1], edx ; Str
.text:004031F5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:004031F9                 call    strchr
.text:004031FE                 test    eax, eax
.text:00403200                 jnz     loc_4032B0
.text:00403206
.text:00403206 loc_403206:                             ; CODE XREF: sub_402D90+446↑j
.text:00403206                 mov     ebx, [ebp+0]
.text:00403209
.text:00403209 loc_403209:                             ; CODE XREF: sub_402D90+456↑j
.text:00403209                 mov     eax, [esp+5Ch+var_14]
.text:0040320D                 test    eax, eax
.text:0040320F                 jz      short loc_403261
.text:00403211                 mov     esi, [esp+5Ch+arg_4]
.text:00403215                 mov     edi, [esi+ebx*4]
.text:00403218                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040321C                 jz      short loc_40327A
.text:0040321E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00403225                 call    ds:libintl_gettext
.text:0040322B                 mov     edi, [ebp+14h]
.text:0040322E                 mov     [esp+5Ch+var_4C], edi
.text:00403232                 mov     ebx, [ebp+0]
.text:00403235                 mov     edi, [esp+5Ch+arg_4]
.text:00403239                 mov     esi, [edi+ebx*4]
.text:0040323C                 movsx   ecx, byte ptr [esi]
.text:0040323F                 mov     esi, ds:_iob
.text:00403245                 add     esi, 40h ; '@'
.text:00403248                 mov     [esp+5Ch+var_50], ecx
.text:0040324C                 mov     ebx, [edi]
.text:0040324E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403252                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00403255                 mov     [esp+5Ch+MaxCount], ebx
.text:00403259                 call    fprintf
.text:0040325E
.text:0040325E loc_40325E:                             ; CODE XREF: sub_402D90+51D↓j
.text:0040325E                 mov     ebx, [ebp+0]
.text:00403261
.text:00403261 loc_403261:                             ; CODE XREF: sub_402D90+47F↑j
.text:00403261                 mov     dword ptr [ebp+14h], offset dword_402C40
.text:00403268                 lea     edx, [ebx+1]
.text:0040326B                 mov     [ebp+0], edx
.text:0040326E
.text:0040326E loc_40326E:                             ; CODE XREF: sub_402D90+999↓j
.text:0040326E                 mov     dword ptr [ebp+8], 0
.text:00403275                 jmp     loc_4030E8
.text:0040327A ; ---------------------------------------------------------------------------
.text:0040327A
.text:0040327A loc_40327A:                             ; CODE XREF: sub_402D90+48C↑j
.text:0040327A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00403281                 call    ds:libintl_gettext
.text:00403287                 mov     ecx, [ebp+14h]
.text:0040328A                 mov     edi, [esp+5Ch+arg_4]
.text:0040328E                 mov     edx, ds:_iob
.text:00403294                 mov     [esp+5Ch+var_50], ecx
.text:00403298                 mov     ebx, [edi]
.text:0040329A                 add     edx, 40h ; '@'
.text:0040329D                 mov     [esp+5Ch+Str2], eax ; Format
.text:004032A1                 mov     [esp+5Ch+MaxCount], ebx
.text:004032A5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004032A8                 call    fprintf
.text:004032AD                 jmp     short loc_40325E
.text:004032AD ; ---------------------------------------------------------------------------
.text:004032AF                 align 10h
.text:004032B0
.text:004032B0 loc_4032B0:                             ; CODE XREF: sub_402D90+196↑j
.text:004032B0                                         ; sub_402D90+1B5↑j ...
.text:004032B0                 mov     esi, [ebp+14h]
.text:004032B3                 movzx   ebx, byte ptr [esi]
.text:004032B6                 inc     esi
.text:004032B7                 mov     [ebp+14h], esi
.text:004032BA                 mov     ecx, [esp+5Ch+Str]
.text:004032BE                 movsx   esi, bl
.text:004032C1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004032C5                 mov     edi, esi
.text:004032C7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004032CA                 call    strchr
.text:004032CF                 mov     ecx, [ebp+14h]
.text:004032D2                 cmp     byte ptr [ecx], 0
.text:004032D5                 jnz     short loc_4032DA
.text:004032D7                 inc     dword ptr [ebp+0]
.text:004032DA
.text:004032DA loc_4032DA:                             ; CODE XREF: sub_402D90+545↑j
.text:004032DA                 test    eax, eax
.text:004032DC                 jz      loc_4036C0
.text:004032E2                 cmp     bl, 3Ah ; ':'
.text:004032E5                 jz      loc_4036C0
.text:004032EB                 cmp     byte ptr [eax], 57h ; 'W'
.text:004032EE                 jz      loc_4033A6
.text:004032F4                 movzx   edx, byte ptr [eax+1]
.text:004032F8
.text:004032F8 loc_4032F8:                             ; CODE XREF: sub_402D90+61D↓j
.text:004032F8                 cmp     dl, 3Ah ; ':'
.text:004032FB                 jz      short loc_403304
.text:004032FD
.text:004032FD loc_4032FD:                             ; CODE XREF: sub_402D90+590↓j
.text:004032FD                 mov     eax, esi
.text:004032FF                 jmp     loc_402EE7
.text:00403304 ; ---------------------------------------------------------------------------
.text:00403304
.text:00403304 loc_403304:                             ; CODE XREF: sub_402D90+56B↑j
.text:00403304                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00403308                 jz      loc_403391
.text:0040330E                 cmp     byte ptr [ecx], 0
.text:00403311                 jz      short loc_403322
.text:00403313
.text:00403313 loc_403313:                             ; CODE XREF: sub_402D90+604↓j
.text:00403313                 inc     dword ptr [ebp+0]
.text:00403316                 mov     [ebp+0Ch], ecx
.text:00403319
.text:00403319 loc_403319:                             ; CODE XREF: sub_402D90+5AB↓j
.text:00403319                                         ; sub_402D90+5C6↓j ...
.text:00403319                 mov     dword ptr [ebp+14h], 0
.text:00403320                 jmp     short loc_4032FD
.text:00403322 ; ---------------------------------------------------------------------------
.text:00403322
.text:00403322 loc_403322:                             ; CODE XREF: sub_402D90+581↑j
.text:00403322                 mov     ecx, [ebp+0]
.text:00403325                 cmp     ecx, [esp+5Ch+arg_0]
.text:00403329                 jz      short loc_40333D
.text:0040332B                 mov     eax, [esp+5Ch+arg_4]
.text:0040332F                 lea     edx, [ecx+1]
.text:00403332                 mov     [ebp+0], edx
.text:00403335                 mov     ebx, [eax+ecx*4]
.text:00403338                 mov     [ebp+0Ch], ebx
.text:0040333B                 jmp     short loc_403319
.text:0040333D ; ---------------------------------------------------------------------------
.text:0040333D
.text:0040333D loc_40333D:                             ; CODE XREF: sub_402D90+599↑j
.text:0040333D                 mov     ecx, [esp+5Ch+var_14]
.text:00403341                 test    ecx, ecx
.text:00403343                 jnz     short loc_40335F
.text:00403345
.text:00403345 loc_403345:                             ; CODE XREF: sub_402D90+5FF↓j
.text:00403345                 mov     [ebp+8], edi
.text:00403348                 mov     edi, [esp+5Ch+Str]
.text:0040334C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040334F                 jz      short loc_403358
.text:00403351                 mov     esi, 3Fh ; '?'
.text:00403356                 jmp     short loc_403319
.text:00403358 ; ---------------------------------------------------------------------------
.text:00403358
.text:00403358 loc_403358:                             ; CODE XREF: sub_402D90+5BF↑j
.text:00403358                 mov     esi, 3Ah ; ':'
.text:0040335D                 jmp     short loc_403319
.text:0040335F ; ---------------------------------------------------------------------------
.text:0040335F
.text:0040335F loc_40335F:                             ; CODE XREF: sub_402D90+5B3↑j
.text:0040335F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00403366                 call    ds:libintl_gettext
.text:0040336C                 mov     [esp+5Ch+var_50], edi
.text:00403370                 mov     ebx, [esp+5Ch+arg_4]
.text:00403374                 mov     edx, ds:_iob
.text:0040337A                 mov     esi, [ebx]
.text:0040337C                 add     edx, 40h ; '@'
.text:0040337F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403383                 mov     [esp+5Ch+MaxCount], esi
.text:00403387                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040338A                 call    fprintf
.text:0040338F                 jmp     short loc_403345
.text:00403391 ; ---------------------------------------------------------------------------
.text:00403391
.text:00403391 loc_403391:                             ; CODE XREF: sub_402D90+578↑j
.text:00403391                 cmp     byte ptr [ecx], 0
.text:00403394                 jnz     loc_403313
.text:0040339A                 mov     dword ptr [ebp+0Ch], 0
.text:004033A1                 jmp     loc_403319
.text:004033A6 ; ---------------------------------------------------------------------------
.text:004033A6
.text:004033A6 loc_4033A6:                             ; CODE XREF: sub_402D90+55E↑j
.text:004033A6                 movzx   edx, byte ptr [eax+1]
.text:004033AA                 cmp     dl, 3Bh ; ';'
.text:004033AD                 jnz     loc_4032F8
.text:004033B3                 mov     [esp+5Ch+var_2C], 0
.text:004033BB                 mov     [esp+5Ch+var_30], 0
.text:004033C3                 mov     [esp+5Ch+var_34], 0
.text:004033CB                 mov     [esp+5Ch+var_38], 0
.text:004033D3                 cmp     byte ptr [ecx], 0
.text:004033D6                 jz      loc_40364B
.text:004033DC                 inc     dword ptr [ebp+0]
.text:004033DF                 mov     [ebp+0Ch], ecx
.text:004033E2
.text:004033E2 loc_4033E2:                             ; CODE XREF: sub_402D90+8D4↓j
.text:004033E2                 mov     edi, [ebp+0Ch]
.text:004033E5                 mov     [ebp+14h], edi
.text:004033E8                 movzx   eax, byte ptr [edi]
.text:004033EB                 test    al, al
.text:004033ED                 jz      short loc_4033FF
.text:004033EF                 cmp     al, 3Dh ; '='
.text:004033F1                 jz      short loc_4033FF
.text:004033F3
.text:004033F3 loc_4033F3:                             ; CODE XREF: sub_402D90+66D↓j
.text:004033F3                 inc     edi
.text:004033F4                 movzx   eax, byte ptr [edi]
.text:004033F7                 test    al, al
.text:004033F9                 jz      short loc_4033FF
.text:004033FB                 cmp     al, 3Dh ; '='
.text:004033FD                 jnz     short loc_4033F3
.text:004033FF
.text:004033FF loc_4033FF:                             ; CODE XREF: sub_402D90+65D↑j
.text:004033FF                                         ; sub_402D90+661↑j ...
.text:004033FF                 mov     [esp+5Ch+var_3C], 0
.text:00403407                 mov     esi, [esp+5Ch+arg_C]
.text:0040340B                 mov     eax, [esi]
.text:0040340D                 test    eax, eax
.text:0040340F                 jz      loc_403590
.text:00403415                 mov     ecx, eax
.text:00403417
.text:00403417 loc_403417:                             ; CODE XREF: sub_402D90+6B3↓j
.text:00403417                 mov     ebx, [ebp+14h]
.text:0040341A                 mov     eax, edi
.text:0040341C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040341F                 sub     eax, ebx
.text:00403421                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00403425                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00403429                 call    strncmp
.text:0040342E                 test    eax, eax
.text:00403430                 jz      loc_4035F7
.text:00403436
.text:00403436 loc_403436:                             ; CODE XREF: sub_402D90+88C↓j
.text:00403436                                         ; sub_402D90+89D↓j
.text:00403436                 inc     [esp+5Ch+var_3C]
.text:0040343A                 add     esi, 10h
.text:0040343D                 mov     edx, [esi]
.text:0040343F                 test    edx, edx
.text:00403441                 mov     ecx, edx
.text:00403443                 jnz     short loc_403417
.text:00403445
.text:00403445 loc_403445:                             ; CODE XREF: sub_402D90+8B6↓j
.text:00403445                 mov     esi, [esp+5Ch+var_34]
.text:00403449                 test    esi, esi
.text:0040344B                 jz      short loc_403459
.text:0040344D                 mov     ebx, [esp+5Ch+var_30]
.text:00403451                 test    ebx, ebx
.text:00403453                 jz      loc_4035A1
.text:00403459
.text:00403459 loc_403459:                             ; CODE XREF: sub_402D90+6BB↑j
.text:00403459                 mov     esi, [esp+5Ch+var_2C]
.text:0040345D                 test    esi, esi
.text:0040345F                 jz      loc_403590
.text:00403465                 cmp     byte ptr [edi], 0
.text:00403468                 jz      loc_403510
.text:0040346E                 mov     ecx, [esp+5Ch+var_2C]
.text:00403472                 mov     ebx, [ecx+4]
.text:00403475                 test    ebx, ebx
.text:00403477                 jz      short loc_4034B8
.text:00403479                 lea     edx, [edi+1]
.text:0040347C                 mov     [ebp+0Ch], edx
.text:0040347F
.text:0040347F loc_40347F:                             ; CODE XREF: sub_402D90+788↓j
.text:0040347F                                         ; sub_402D90+7A7↓j
.text:0040347F                 mov     edi, [ebp+14h]
.text:00403482                 mov     [esp+5Ch+Str1], edi ; Str
.text:00403485                 call    strlen
.text:0040348A                 add     [ebp+14h], eax
.text:0040348D                 mov     eax, [esp+5Ch+arg_10]
.text:00403491                 test    eax, eax
.text:00403493                 jz      short loc_4034A0
.text:00403495                 mov     edx, [esp+5Ch+var_38]
.text:00403499                 mov     ebp, [esp+5Ch+arg_10]
.text:0040349D                 mov     [ebp+0], edx
.text:004034A0
.text:004034A0 loc_4034A0:                             ; CODE XREF: sub_402D90+703↑j
.text:004034A0                 mov     eax, [esp+5Ch+var_2C]
.text:004034A4                 mov     ecx, [eax+8]
.text:004034A7                 test    ecx, ecx
.text:004034A9                 jnz     loc_40306A
.text:004034AF                 mov     ecx, [esp+5Ch+var_2C]
.text:004034B3                 jmp     loc_403062
.text:004034B8 ; ---------------------------------------------------------------------------
.text:004034B8
.text:004034B8 loc_4034B8:                             ; CODE XREF: sub_402D90+6E7↑j
.text:004034B8                 mov     eax, [esp+5Ch+var_14]
.text:004034BC                 test    eax, eax
.text:004034BE                 jnz     short loc_4034D3
.text:004034C0
.text:004034C0 loc_4034C0:                             ; CODE XREF: sub_402D90+779↓j
.text:004034C0                 mov     ecx, [ebp+14h]
.text:004034C3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004034C6                 call    strlen
.text:004034CB                 add     [ebp+14h], eax
.text:004034CE                 jmp     loc_4030E8
.text:004034D3 ; ---------------------------------------------------------------------------
.text:004034D3
.text:004034D3 loc_4034D3:                             ; CODE XREF: sub_402D90+72E↑j
.text:004034D3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004034DA                 call    ds:libintl_gettext
.text:004034E0                 mov     edx, [esp+5Ch+var_2C]
.text:004034E4                 mov     ebx, [esp+5Ch+arg_4]
.text:004034E8                 mov     edi, [edx]
.text:004034EA                 mov     [esp+5Ch+var_50], edi
.text:004034EE                 mov     edi, ds:_iob
.text:004034F4                 mov     esi, [ebx]
.text:004034F6                 mov     [esp+5Ch+Str2], eax ; Format
.text:004034FA                 add     edi, 40h ; '@'
.text:004034FD                 mov     [esp+5Ch+MaxCount], esi
.text:00403501                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00403504                 call    fprintf
.text:00403509                 jmp     short loc_4034C0
.text:00403509 ; ---------------------------------------------------------------------------
.text:0040350B                 align 10h
.text:00403510
.text:00403510 loc_403510:                             ; CODE XREF: sub_402D90+6D8↑j
.text:00403510                 mov     esi, [esp+5Ch+var_2C]
.text:00403514                 cmp     dword ptr [esi+4], 1
.text:00403518                 jnz     loc_40347F
.text:0040351E                 mov     ecx, [ebp+0]
.text:00403521                 cmp     ecx, [esp+5Ch+arg_0]
.text:00403525                 jge     short loc_40353C
.text:00403527                 mov     eax, [esp+5Ch+arg_4]
.text:0040352B                 lea     ebx, [ecx+1]
.text:0040352E                 mov     [ebp+0], ebx
.text:00403531                 mov     edi, [eax+ecx*4]
.text:00403534                 mov     [ebp+0Ch], edi
.text:00403537                 jmp     loc_40347F
.text:0040353C ; ---------------------------------------------------------------------------
.text:0040353C
.text:0040353C loc_40353C:                             ; CODE XREF: sub_402D90+795↑j
.text:0040353C                 mov     edx, [esp+5Ch+var_14]
.text:00403540                 test    edx, edx
.text:00403542                 jnz     short loc_403557
.text:00403544
.text:00403544 loc_403544:                             ; CODE XREF: sub_402D90+7FE↓j
.text:00403544                 mov     edx, [ebp+14h]
.text:00403547                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040354A                 call    strlen
.text:0040354F                 add     [ebp+14h], eax
.text:00403552                 jmp     loc_403179
.text:00403557 ; ---------------------------------------------------------------------------
.text:00403557
.text:00403557 loc_403557:                             ; CODE XREF: sub_402D90+7B2↑j
.text:00403557                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040355E                 call    ds:libintl_gettext
.text:00403564                 mov     ecx, [ebp+0]
.text:00403567                 mov     ebx, [esp+5Ch+arg_4]
.text:0040356B                 mov     edi, [ebx+ecx*4-4]
.text:0040356F                 mov     ecx, ds:_iob
.text:00403575                 mov     [esp+5Ch+var_50], edi
.text:00403579                 mov     esi, [ebx]
.text:0040357B                 add     ecx, 40h ; '@'
.text:0040357E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403582                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403585                 mov     [esp+5Ch+MaxCount], esi
.text:00403589                 call    fprintf
.text:0040358E                 jmp     short loc_403544
.text:00403590 ; ---------------------------------------------------------------------------
.text:00403590
.text:00403590 loc_403590:                             ; CODE XREF: sub_402D90+67F↑j
.text:00403590                                         ; sub_402D90+6CF↑j
.text:00403590                 mov     dword ptr [ebp+14h], 0
.text:00403597                 mov     eax, 57h ; 'W'
.text:0040359C                 jmp     loc_402EE7
.text:004035A1 ; ---------------------------------------------------------------------------
.text:004035A1
.text:004035A1 loc_4035A1:                             ; CODE XREF: sub_402D90+6C3↑j
.text:004035A1                 mov     edi, [esp+5Ch+var_14]
.text:004035A5                 test    edi, edi
.text:004035A7                 jnz     short loc_4035BF
.text:004035A9
.text:004035A9 loc_4035A9:                             ; CODE XREF: sub_402D90+865↓j
.text:004035A9                 mov     edx, [ebp+14h]
.text:004035AC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004035AF                 call    strlen
.text:004035B4                 add     [ebp+14h], eax
.text:004035B7                 inc     dword ptr [ebp+0]
.text:004035BA                 jmp     loc_4030E8
.text:004035BF ; ---------------------------------------------------------------------------
.text:004035BF
.text:004035BF loc_4035BF:                             ; CODE XREF: sub_402D90+817↑j
.text:004035BF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004035C6                 call    ds:libintl_gettext
.text:004035CC                 mov     ecx, [ebp+0]
.text:004035CF                 mov     ebx, [esp+5Ch+arg_4]
.text:004035D3                 mov     edi, [ebx+ecx*4]
.text:004035D6                 mov     ecx, ds:_iob
.text:004035DC                 mov     [esp+5Ch+var_50], edi
.text:004035E0                 mov     esi, [ebx]
.text:004035E2                 add     ecx, 40h ; '@'
.text:004035E5                 mov     [esp+5Ch+Str2], eax ; Format
.text:004035E9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004035EC                 mov     [esp+5Ch+MaxCount], esi
.text:004035F0                 call    fprintf
.text:004035F5                 jmp     short loc_4035A9
.text:004035F7 ; ---------------------------------------------------------------------------
.text:004035F7
.text:004035F7 loc_4035F7:                             ; CODE XREF: sub_402D90+6A0↑j
.text:004035F7                 mov     edx, [ebp+14h]
.text:004035FA                 mov     ebx, edi
.text:004035FC                 mov     ecx, [esi]
.text:004035FE                 sub     ebx, edx
.text:00403600                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403603                 call    strlen
.text:00403608                 cmp     ebx, eax
.text:0040360A                 jz      short loc_403632
.text:0040360C                 mov     ebx, [esp+5Ch+var_2C]
.text:00403610                 test    ebx, ebx
.text:00403612                 jz      short loc_403621
.text:00403614                 mov     [esp+5Ch+var_34], 1
.text:0040361C                 jmp     loc_403436
.text:00403621 ; ---------------------------------------------------------------------------
.text:00403621
.text:00403621 loc_403621:                             ; CODE XREF: sub_402D90+882↑j
.text:00403621                 mov     [esp+5Ch+var_2C], esi
.text:00403625                 mov     ecx, [esp+5Ch+var_3C]
.text:00403629                 mov     [esp+5Ch+var_38], ecx
.text:0040362D                 jmp     loc_403436
.text:00403632 ; ---------------------------------------------------------------------------
.text:00403632
.text:00403632 loc_403632:                             ; CODE XREF: sub_402D90+87A↑j
.text:00403632                 mov     [esp+5Ch+var_2C], esi
.text:00403636                 mov     eax, [esp+5Ch+var_3C]
.text:0040363A                 mov     [esp+5Ch+var_30], 1
.text:00403642                 mov     [esp+5Ch+var_38], eax
.text:00403646                 jmp     loc_403445
.text:0040364B ; ---------------------------------------------------------------------------
.text:0040364B
.text:0040364B loc_40364B:                             ; CODE XREF: sub_402D90+646↑j
.text:0040364B                 mov     edx, [ebp+0]
.text:0040364E                 cmp     edx, [esp+5Ch+arg_0]
.text:00403652                 jz      short loc_403669
.text:00403654                 mov     ebx, [esp+5Ch+arg_4]
.text:00403658                 lea     esi, [edx+1]
.text:0040365B                 mov     [ebp+0], esi
.text:0040365E                 mov     edi, [ebx+edx*4]
.text:00403661                 mov     [ebp+0Ch], edi
.text:00403664                 jmp     loc_4033E2
.text:00403669 ; ---------------------------------------------------------------------------
.text:00403669
.text:00403669 loc_403669:                             ; CODE XREF: sub_402D90+8C2↑j
.text:00403669                 mov     edi, [esp+5Ch+var_14]
.text:0040366D                 test    edi, edi
.text:0040366F                 jnz     short loc_40368C
.text:00403671
.text:00403671 loc_403671:                             ; CODE XREF: sub_402D90+92C↓j
.text:00403671                 mov     [ebp+8], esi
.text:00403674                 mov     ebp, [esp+5Ch+Str]
.text:00403678                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040367C                 jz      short loc_403688
.text:0040367E                 mov     bl, 3Fh ; '?'
.text:00403680
.text:00403680 loc_403680:                             ; CODE XREF: sub_402D90+8FA↓j
.text:00403680                 movsx   eax, bl
.text:00403683                 jmp     loc_402EE7
.text:00403688 ; ---------------------------------------------------------------------------
.text:00403688
.text:00403688 loc_403688:                             ; CODE XREF: sub_402D90+8EC↑j
.text:00403688                 mov     bl, 3Ah ; ':'
.text:0040368A                 jmp     short loc_403680
.text:0040368C ; ---------------------------------------------------------------------------
.text:0040368C
.text:0040368C loc_40368C:                             ; CODE XREF: sub_402D90+8DF↑j
.text:0040368C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00403693                 call    ds:libintl_gettext
.text:00403699                 mov     [esp+5Ch+var_50], esi
.text:0040369D                 mov     edx, [esp+5Ch+arg_4]
.text:004036A1                 mov     ecx, ds:_iob
.text:004036A7                 mov     ebx, [edx]
.text:004036A9                 add     ecx, 40h ; '@'
.text:004036AC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004036B0                 mov     [esp+5Ch+MaxCount], ebx
.text:004036B4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004036B7                 call    fprintf
.text:004036BC                 jmp     short loc_403671
.text:004036BC ; ---------------------------------------------------------------------------
.text:004036BE                 align 10h
.text:004036C0
.text:004036C0 loc_4036C0:                             ; CODE XREF: sub_402D90+54C↑j
.text:004036C0                                         ; sub_402D90+555↑j
.text:004036C0                 mov     eax, [esp+5Ch+var_14]
.text:004036C4                 test    eax, eax
.text:004036C6                 jz      short loc_4036FF
.text:004036C8                 mov     ebx, [ebp+1Ch]
.text:004036CB                 test    ebx, ebx
.text:004036CD                 jz      short loc_403707
.text:004036CF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:004036D6
.text:004036D6 loc_4036D6:                             ; CODE XREF: sub_402D90+97E↓j
.text:004036D6                 call    ds:libintl_gettext
.text:004036DC                 mov     [esp+5Ch+var_50], esi
.text:004036E0                 mov     ebx, [esp+5Ch+arg_4]
.text:004036E4                 mov     edx, ds:_iob
.text:004036EA                 mov     esi, [ebx]
.text:004036EC                 add     edx, 40h ; '@'
.text:004036EF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004036F3                 mov     [esp+5Ch+MaxCount], esi
.text:004036F7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004036FA                 call    fprintf
.text:004036FF
.text:004036FF loc_4036FF:                             ; CODE XREF: sub_402D90+936↑j
.text:004036FF                 mov     [ebp+8], edi
.text:00403702                 jmp     loc_4030E8
.text:00403707 ; ---------------------------------------------------------------------------
.text:00403707
.text:00403707 loc_403707:                             ; CODE XREF: sub_402D90+93D↑j
.text:00403707                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040370E                 jmp     short loc_4036D6
.text:00403710 ; ---------------------------------------------------------------------------
.text:00403710
.text:00403710 loc_403710:                             ; CODE XREF: sub_402D90+26E↑j
.text:00403710                 mov     edi, [esp+5Ch+var_14]
.text:00403714                 test    edi, edi
.text:00403716                 jnz     short loc_40372E
.text:00403718
.text:00403718 loc_403718:                             ; CODE XREF: sub_402D90+9D4↓j
.text:00403718                 mov     edx, [ebp+14h]
.text:0040371B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040371E                 call    strlen
.text:00403723                 add     [ebp+14h], eax
.text:00403726                 inc     dword ptr [ebp+0]
.text:00403729                 jmp     loc_40326E
.text:0040372E ; ---------------------------------------------------------------------------
.text:0040372E
.text:0040372E loc_40372E:                             ; CODE XREF: sub_402D90+986↑j
.text:0040372E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00403735                 call    ds:libintl_gettext
.text:0040373B                 mov     ebx, [ebp+0]
.text:0040373E                 mov     edi, [esp+5Ch+arg_4]
.text:00403742                 mov     ecx, [edi+ebx*4]
.text:00403745                 mov     ebx, ds:_iob
.text:0040374B                 mov     [esp+5Ch+var_50], ecx
.text:0040374F                 mov     esi, [edi]
.text:00403751                 add     ebx, 40h ; '@'
.text:00403754                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403758                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040375B                 mov     [esp+5Ch+MaxCount], esi
.text:0040375F                 call    fprintf
.text:00403764                 jmp     short loc_403718
.text:00403766 ; ---------------------------------------------------------------------------
.text:00403766
.text:00403766 loc_403766:                             ; CODE XREF: sub_402D90+246↑j
.text:00403766                 mov     ecx, [ebp+14h]
.text:00403769                 mov     ebx, edi
.text:0040376B                 mov     edx, [esi]
.text:0040376D                 sub     ebx, ecx
.text:0040376F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403772                 call    strlen
.text:00403777                 cmp     ebx, eax
.text:00403779                 jz      short loc_4037D1
.text:0040377B                 mov     ebx, [esp+5Ch+var_18]
.text:0040377F                 test    ebx, ebx
.text:00403781                 jz      short loc_4037C0
.text:00403783                 mov     edx, [esp+5Ch+arg_14]
.text:00403787                 test    edx, edx
.text:00403789                 jnz     short loc_403797
.text:0040378B                 mov     ecx, [esp+5Ch+var_18]
.text:0040378F                 mov     ebx, [esi+4]
.text:00403792                 cmp     [ecx+4], ebx
.text:00403795                 jz      short loc_4037A4
.text:00403797
.text:00403797 loc_403797:                             ; CODE XREF: sub_402D90+9F9↑j
.text:00403797                                         ; sub_402D90+A1A↓j ...
.text:00403797                 mov     [esp+5Ch+var_20], 1
.text:0040379F                 jmp     loc_402FDC
.text:004037A4 ; ---------------------------------------------------------------------------
.text:004037A4
.text:004037A4 loc_4037A4:                             ; CODE XREF: sub_402D90+A05↑j
.text:004037A4                 mov     edx, [esi+8]
.text:004037A7                 cmp     [ecx+8], edx
.text:004037AA                 jnz     short loc_403797
.text:004037AC                 mov     ebx, [esi+0Ch]
.text:004037AF                 cmp     [ecx+0Ch], ebx
.text:004037B2                 jnz     short loc_403797
.text:004037B4                 jmp     loc_402FDC
.text:004037B4 ; ---------------------------------------------------------------------------
.text:004037B9                 align 10h
.text:004037C0
.text:004037C0 loc_4037C0:                             ; CODE XREF: sub_402D90+9F1↑j
.text:004037C0                 mov     [esp+5Ch+var_18], esi
.text:004037C4                 mov     eax, [esp+5Ch+var_28]
.text:004037C8                 mov     [esp+5Ch+var_24], eax
.text:004037CC                 jmp     loc_402FDC
.text:004037D1 ; ---------------------------------------------------------------------------
.text:004037D1
.text:004037D1 loc_4037D1:                             ; CODE XREF: sub_402D90+9E9↑j
.text:004037D1                 mov     [esp+5Ch+var_18], esi
.text:004037D5                 mov     ecx, [esp+5Ch+var_28]
.text:004037D9                 mov     [esp+5Ch+var_1C], 1
.text:004037E1                 mov     [esp+5Ch+var_24], ecx
.text:004037E5                 jmp     loc_402FF0
.text:004037EA ; ---------------------------------------------------------------------------
.text:004037EA
.text:004037EA loc_4037EA:                             ; CODE XREF: sub_402D90+1BF↑j
.text:004037EA                 mov     eax, [esp+5Ch+Str]
.text:004037EE                 movsx   esi, dl
.text:004037F1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004037F5                 mov     [esp+5Ch+Str1], eax ; Str
.text:004037F8                 call    strchr
.text:004037FD                 test    eax, eax
.text:004037FF                 jnz     loc_4032B0
.text:00403805                 jmp     loc_402F55
.text:0040380A ; ---------------------------------------------------------------------------
.text:0040380A
.text:0040380A loc_40380A:                             ; CODE XREF: sub_402D90+17C↑j
.text:0040380A                 mov     ecx, 1
.text:0040380F                 jmp     loc_402F12
.text:00403814 ; ---------------------------------------------------------------------------
.text:00403814
.text:00403814 loc_403814:                             ; CODE XREF: sub_402D90+D4↑j
.text:00403814                                         ; sub_402D90+130↑j
.text:00403814                 mov     eax, [ebp+20h]
.text:00403817                 cmp     eax, [ebp+24h]
.text:0040381A                 jz      loc_402EF0
.text:00403820                 mov     [ebp+0], eax
.text:00403823                 jmp     loc_402EF0
.text:00403828 ; ---------------------------------------------------------------------------
.text:00403828
.text:00403828 loc_403828:                             ; CODE XREF: sub_402D90+FE↑j
.text:00403828                 mov     [ebp+20h], eax
.text:0040382B                 jmp     loc_402EB0
.text:00403830 ; ---------------------------------------------------------------------------
.text:00403830
.text:00403830 loc_403830:                             ; CODE XREF: sub_402D90+CA↑j
.text:00403830                 mov     edx, [ebp+20h]
.text:00403833                 mov     eax, [ebp+24h]
.text:00403836                 cmp     edx, eax
.text:00403838                 jz      short loc_4038B0
.text:0040383A                 cmp     eax, ebx
.text:0040383C                 jz      short loc_403851
.text:0040383E                 mov     [esp+5Ch+Str2], ebp
.text:00403842                 mov     ebx, [esp+5Ch+arg_4]
.text:00403846                 mov     [esp+5Ch+Str1], ebx
.text:00403849                 call    sub_403A40
.text:0040384E                 mov     ebx, [ebp+0]
.text:00403851
.text:00403851 loc_403851:                             ; CODE XREF: sub_402D90+AAC↑j
.text:00403851                                         ; sub_402D90+B22↓j ...
.text:00403851                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403855                 jge     short loc_4038A0
.text:00403857                 mov     esi, [esp+5Ch+arg_4]
.text:0040385B                 mov     eax, [esi+ebx*4]
.text:0040385E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403861                 jz      short loc_4038A8
.text:00403863                 lea     esi, [esi+0]
.text:00403869                 lea     edi, [edi+0]
.text:00403870
.text:00403870 loc_403870:                             ; CODE XREF: sub_402D90+AFC↓j
.text:00403870                                         ; sub_402D90+B1C↓j
.text:00403870                 lea     eax, [ebx+1]
.text:00403873                 mov     ebx, eax
.text:00403875                 mov     [ebp+0], eax
.text:00403878                 cmp     eax, [esp+5Ch+arg_0]
.text:0040387C                 jge     short loc_4038A0
.text:0040387E                 mov     edi, [esp+5Ch+arg_4]
.text:00403882                 mov     edx, [edi+eax*4]
.text:00403885                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00403888                 jz      short loc_403890
.text:0040388A
.text:0040388A loc_40388A:                             ; CODE XREF: sub_402D90+B04↓j
.text:0040388A                 mov     ebx, eax
.text:0040388C                 jmp     short loc_403870
.text:0040388C ; ---------------------------------------------------------------------------
.text:0040388E                 align 10h
.text:00403890
.text:00403890 loc_403890:                             ; CODE XREF: sub_402D90+AF8↑j
.text:00403890                 cmp     byte ptr [edx+1], 0
.text:00403894                 jz      short loc_40388A
.text:00403896                 lea     esi, [esi+0]
.text:00403899                 lea     edi, [edi+0]
.text:004038A0
.text:004038A0 loc_4038A0:                             ; CODE XREF: sub_402D90+AC5↑j
.text:004038A0                                         ; sub_402D90+AEC↑j ...
.text:004038A0                 mov     [ebp+24h], ebx
.text:004038A3                 jmp     loc_402E60
.text:004038A8 ; ---------------------------------------------------------------------------
.text:004038A8
.text:004038A8 loc_4038A8:                             ; CODE XREF: sub_402D90+AD1↑j
.text:004038A8                 cmp     byte ptr [eax+1], 0
.text:004038AC                 jz      short loc_403870
.text:004038AE                 jmp     short loc_4038A0
.text:004038B0 ; ---------------------------------------------------------------------------
.text:004038B0
.text:004038B0 loc_4038B0:                             ; CODE XREF: sub_402D90+AA8↑j
.text:004038B0                 cmp     edx, ebx
.text:004038B2                 jz      short loc_403851
.text:004038B4                 mov     [ebp+20h], ebx
.text:004038B7                 jmp     short loc_403851
.text:004038B9 ; ---------------------------------------------------------------------------
.text:004038B9
.text:004038B9 loc_4038B9:                             ; CODE XREF: sub_402D90+88↑j
.text:004038B9                 mov     dword ptr [ebp+18h], 0
.text:004038C0                 mov     esi, [esp+5Ch+Str]
.text:004038C4
.text:004038C4 loc_4038C4:                             ; CODE XREF: sub_402D90+B49↓j
.text:004038C4                 inc     esi
.text:004038C5                 jmp     loc_402E28
.text:004038C5 ; ---------------------------------------------------------------------------
.text:004038CA                 align 10h
.text:004038D0
.text:004038D0 loc_4038D0:                             ; CODE XREF: sub_402D90+80↑j
.text:004038D0                 mov     dword ptr [ebp+18h], 2
.text:004038D7                 mov     esi, ecx
.text:004038D9                 jmp     short loc_4038C4
.text:004038D9 ; ---------------------------------------------------------------------------
.text:004038DB                 align 10h
.text:004038E0
.text:004038E0 loc_4038E0:                             ; CODE XREF: sub_402D90+69↑j
.text:004038E0                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:004038E7                 call    getenv
.text:004038EC                 test    eax, eax
.text:004038EE                 jz      loc_402E04
.text:004038F4                 jmp     loc_402DFF
.text:004038F4 ; ---------------------------------------------------------------------------
.text:004038F9                 align 10h
.text:00403900
.text:00403900 loc_403900:                             ; CODE XREF: sub_402D90+3F↑j
.text:00403900                 mov     dword ptr [ebp+0], 1
.text:00403907                 mov     ebx, 1
.text:0040390C                 jmp     loc_402DE0
.text:0040390C sub_402D90      endp
.text:0040390C
.text:00403911 ; ---------------------------------------------------------------------------
.text:00403911                 jmp     short sub_403920
.text:00403911 ; ---------------------------------------------------------------------------
.text:00403913                 align 10h
.text:00403920
.text:00403920 ; =============== S U B R O U T I N E =======================================
.text:00403920
.text:00403920
.text:00403920 ; int __cdecl sub_403920(int, int, char *, int, int, int, int)
.text:00403920 sub_403920      proc near               ; CODE XREF: .text:00403911↑j
.text:00403920                                         ; sub_404060+3A↓p ...
.text:00403920
.text:00403920 var_2C          = dword ptr -2Ch
.text:00403920 var_28          = dword ptr -28h
.text:00403920 Str             = dword ptr -24h
.text:00403920 var_20          = dword ptr -20h
.text:00403920 var_1C          = dword ptr -1Ch
.text:00403920 var_18          = dword ptr -18h
.text:00403920 var_14          = dword ptr -14h
.text:00403920 var_10          = dword ptr -10h
.text:00403920 arg_0           = dword ptr  4
.text:00403920 arg_4           = dword ptr  8
.text:00403920 arg_8           = dword ptr  0Ch
.text:00403920 arg_C           = dword ptr  10h
.text:00403920 arg_10          = dword ptr  14h
.text:00403920 arg_14          = dword ptr  18h
.text:00403920 arg_18          = dword ptr  1Ch
.text:00403920
.text:00403920                 sub     esp, 2Ch
.text:00403923                 mov     edx, dword_418010
.text:00403929                 mov     [esp+2Ch+var_10], offset dword_4190C0 ; int
.text:00403931                 mov     ecx, dword_418014
.text:00403937                 mov     ds:dword_4190C0, edx
.text:0040393D                 mov     edx, [esp+2Ch+arg_18]
.text:00403941                 mov     ds:dword_4190C4, ecx
.text:00403947                 mov     ecx, [esp+2Ch+arg_14]
.text:0040394B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040394F                 mov     edx, [esp+2Ch+arg_10]
.text:00403953                 mov     [esp+2Ch+var_18], ecx ; int
.text:00403957                 mov     ecx, [esp+2Ch+arg_C]
.text:0040395B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040395F                 mov     edx, [esp+2Ch+arg_8]
.text:00403963                 mov     [esp+2Ch+var_20], ecx ; int
.text:00403967                 mov     ecx, [esp+2Ch+arg_4]
.text:0040396B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040396F                 mov     edx, [esp+2Ch+arg_0]
.text:00403973                 mov     [esp+2Ch+var_28], ecx ; int
.text:00403977                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040397A                 call    sub_402D90
.text:0040397F                 mov     ecx, ds:dword_4190C0
.text:00403985                 mov     dword_418010, ecx
.text:0040398B                 mov     ecx, ds:dword_4190CC
.text:00403991                 mov     ds:dword_419590, ecx
.text:00403997                 mov     ecx, ds:dword_4190C8
.text:0040399D                 mov     dword_418018, ecx
.text:004039A3                 add     esp, 2Ch
.text:004039A6                 retn
.text:004039A6 sub_403920      endp
.text:004039A6
.text:004039A6 ; ---------------------------------------------------------------------------
.text:004039A7                 align 10h
.text:004039B0                 sub     esp, 2Ch
.text:004039B3                 mov     edx, dword_418010
.text:004039B9                 mov     dword ptr [esp+1Ch], offset dword_4190C0
.text:004039C1                 mov     ecx, dword_418014
.text:004039C7                 mov     dword ptr [esp+18h], 1
.text:004039CF                 mov     ds:dword_4190C0, edx
.text:004039D5                 mov     edx, [esp+38h]
.text:004039D9                 mov     ds:dword_4190C4, ecx
.text:004039DF                 mov     ecx, [esp+34h]
.text:004039E3                 mov     [esp+8], edx
.text:004039E7                 mov     edx, [esp+30h]
.text:004039EB                 mov     [esp+4], ecx
.text:004039EF                 mov     dword ptr [esp+14h], 0
.text:004039F7                 mov     dword ptr [esp+10h], 0
.text:004039FF                 mov     dword ptr [esp+0Ch], 0
.text:00403A07                 mov     [esp], edx
.text:00403A0A                 call    sub_402D90
.text:00403A0F                 mov     ecx, ds:dword_4190C0
.text:00403A15                 mov     dword_418010, ecx
.text:00403A1B                 mov     ecx, ds:dword_4190CC
.text:00403A21                 mov     ds:dword_419590, ecx
.text:00403A27                 mov     ecx, ds:dword_4190C8
.text:00403A2D                 mov     dword_418018, ecx
.text:00403A33                 add     esp, 2Ch
.text:00403A36                 retn
.text:00403A36 ; ---------------------------------------------------------------------------
.text:00403A37                 align 10h
.text:00403A40
.text:00403A40 ; =============== S U B R O U T I N E =======================================
.text:00403A40
.text:00403A40
.text:00403A40 sub_403A40      proc near               ; CODE XREF: sub_402D90+113↑p
.text:00403A40                                         ; sub_402D90+AB9↑p
.text:00403A40
.text:00403A40 var_2C          = dword ptr -2Ch
.text:00403A40 var_28          = dword ptr -28h
.text:00403A40 var_24          = dword ptr -24h
.text:00403A40 var_20          = dword ptr -20h
.text:00403A40 var_1C          = dword ptr -1Ch
.text:00403A40 var_18          = dword ptr -18h
.text:00403A40 var_14          = dword ptr -14h
.text:00403A40 arg_0           = dword ptr  4
.text:00403A40 arg_4           = dword ptr  8
.text:00403A40
.text:00403A40                 push    ebp
.text:00403A41                 push    edi
.text:00403A42                 push    esi
.text:00403A43                 push    ebx
.text:00403A44                 sub     esp, 1Ch
.text:00403A47                 mov     ecx, [esp+2Ch+arg_4]
.text:00403A4B                 mov     eax, [esp+2Ch+arg_4]
.text:00403A4F                 mov     ebx, [esp+2Ch+arg_4]
.text:00403A53                 mov     edx, [ecx+20h]
.text:00403A56                 mov     edi, [esp+2Ch+arg_0]
.text:00403A5A                 mov     ecx, [ebx]
.text:00403A5C                 mov     [esp+2Ch+var_2C], edx
.text:00403A5F                 mov     [esp+2Ch+var_14], edx
.text:00403A63                 mov     edx, [eax+24h]
.text:00403A66                 mov     [esp+2Ch+var_28], ecx
.text:00403A6A                 mov     [esp+2Ch+var_1C], ecx
.text:00403A6E                 cmp     ecx, edx
.text:00403A70                 mov     [esp+2Ch+var_18], edx
.text:00403A74                 jle     short loc_403AF0
.text:00403A76                 mov     esi, [esp+2Ch+var_2C]
.text:00403A79                 cmp     edx, esi
.text:00403A7B                 jle     short loc_403AF0
.text:00403A7D                 lea     esi, [esi+0]
.text:00403A80
.text:00403A80 loc_403A80:                             ; CODE XREF: sub_403A40+A1↓j
.text:00403A80                 mov     ebx, [esp+2Ch+var_1C]
.text:00403A84                 mov     edx, [esp+2Ch+var_18]
.text:00403A88                 mov     ebp, [esp+2Ch+var_18]
.text:00403A8C                 mov     eax, [esp+2Ch+var_14]
.text:00403A90                 sub     ebx, edx
.text:00403A92                 mov     [esp+2Ch+var_20], ebx
.text:00403A96                 sub     ebp, eax
.text:00403A98                 cmp     ebx, ebp
.text:00403A9A                 jle     short loc_403B15
.text:00403A9C                 xor     esi, esi
.text:00403A9E                 cmp     esi, ebp
.text:00403AA0                 jge     short loc_403ACD
.text:00403AA2                 mov     ecx, [esp+2Ch+var_1C]
.text:00403AA6                 sub     ecx, ebp
.text:00403AA8                 mov     [esp+2Ch+var_24], ecx
.text:00403AAC                 lea     esi, [esi+0]
.text:00403AB0
.text:00403AB0 loc_403AB0:                             ; CODE XREF: sub_403A40+8B↓j
.text:00403AB0                 mov     ecx, [esp+2Ch+var_14]
.text:00403AB4                 mov     edx, [esp+2Ch+var_24]
.text:00403AB8                 add     ecx, esi
.text:00403ABA                 add     edx, esi
.text:00403ABC                 mov     ebx, [edi+ecx*4]
.text:00403ABF                 mov     eax, [edi+edx*4]
.text:00403AC2                 inc     esi
.text:00403AC3                 cmp     esi, ebp
.text:00403AC5                 mov     [edi+ecx*4], eax
.text:00403AC8                 mov     [edi+edx*4], ebx
.text:00403ACB                 jl      short loc_403AB0
.text:00403ACD
.text:00403ACD loc_403ACD:                             ; CODE XREF: sub_403A40+60↑j
.text:00403ACD                 sub     [esp+2Ch+var_1C], ebp
.text:00403AD1
.text:00403AD1 loc_403AD1:                             ; CODE XREF: sub_403A40+107↓j
.text:00403AD1                 mov     eax, [esp+2Ch+var_18]
.text:00403AD5                 cmp     [esp+2Ch+var_1C], eax
.text:00403AD9                 jle     short loc_403AF0
.text:00403ADB                 mov     ebp, [esp+2Ch+var_14]
.text:00403ADF                 cmp     eax, ebp
.text:00403AE1                 jg      short loc_403A80
.text:00403AE3                 lea     esi, [esi+0]
.text:00403AE9                 lea     edi, [edi+0]
.text:00403AF0
.text:00403AF0 loc_403AF0:                             ; CODE XREF: sub_403A40+34↑j
.text:00403AF0                                         ; sub_403A40+3B↑j ...
.text:00403AF0                 mov     esi, [esp+2Ch+var_28]
.text:00403AF4                 mov     ecx, [esp+2Ch+var_18]
.text:00403AF8                 mov     eax, [esp+2Ch+var_2C]
.text:00403AFB                 mov     edi, [esp+2Ch+arg_4]
.text:00403AFF                 mov     edx, [esp+2Ch+var_28]
.text:00403B03                 sub     esi, ecx
.text:00403B05                 add     esi, eax
.text:00403B07                 mov     [edi+20h], esi
.text:00403B0A                 mov     [edi+24h], edx
.text:00403B0D                 add     esp, 1Ch
.text:00403B10                 pop     ebx
.text:00403B11                 pop     esi
.text:00403B12                 pop     edi
.text:00403B13                 pop     ebp
.text:00403B14                 retn
.text:00403B15 ; ---------------------------------------------------------------------------
.text:00403B15
.text:00403B15 loc_403B15:                             ; CODE XREF: sub_403A40+5A↑j
.text:00403B15                 xor     esi, esi
.text:00403B17                 cmp     esi, [esp+2Ch+var_20]
.text:00403B1B                 jge     short loc_403B3F
.text:00403B1D                 lea     esi, [esi+0]
.text:00403B20
.text:00403B20 loc_403B20:                             ; CODE XREF: sub_403A40+FD↓j
.text:00403B20                 mov     ebx, [esp+2Ch+var_14]
.text:00403B24                 mov     ebp, [esp+2Ch+var_18]
.text:00403B28                 add     ebx, esi
.text:00403B2A                 add     ebp, esi
.text:00403B2C                 mov     edx, [edi+ebx*4]
.text:00403B2F                 inc     esi
.text:00403B30                 cmp     esi, [esp+2Ch+var_20]
.text:00403B34                 mov     ecx, [edi+ebp*4]
.text:00403B37                 mov     [edi+ebx*4], ecx
.text:00403B3A                 mov     [edi+ebp*4], edx
.text:00403B3D                 jl      short loc_403B20
.text:00403B3F
.text:00403B3F loc_403B3F:                             ; CODE XREF: sub_403A40+DB↑j
.text:00403B3F                 mov     esi, [esp+2Ch+var_20]
.text:00403B43                 add     [esp+2Ch+var_14], esi
.text:00403B47                 jmp     short loc_403AD1
.text:00403B47 sub_403A40      endp
.text:00403B47
.text:00403B47 ; ---------------------------------------------------------------------------
.text:00403B49                 align 20h
.text:00403B60 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00403B60                                         ; DATA XREF: .data:Buffer↓o
.text:00403B92 ; const char aSSS[]
.text:00403B92 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_403E50+50↓o
.text:00403B9E aWrittenByS     db 'Written by %s.',0Ah,0
.text:00403B9E                                         ; DATA XREF: sub_403E50:loc_403EF1↓o
.text:00403BAE                 align 20h
.text:00403BC0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00403BC0                                         ; DATA XREF: sub_403E50+100↓o
.text:00403BC0                 db 'ere is NO',0Ah
.text:00403BC0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00403BC0                 db 'R PURPOSE.',0Ah,0
.text:00403C58 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00403C58                                         ; DATA XREF: sub_403E50:loc_403F91↓o
.text:00403C6F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00403C6F                                         ; DATA XREF: sub_403E50:loc_403F9D↓o
.text:00403C8B                 align 20h
.text:00403CA0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00403CA0                                         ; DATA XREF: sub_403E50:loc_403FA9↓o
.text:00403CA0                 db 'and %s.',0Ah,0
.text:00403CC0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00403CC0                                         ; DATA XREF: sub_403E50:loc_403FB5↓o
.text:00403CC0                 db '%s, and %s.',0Ah,0
.text:00403CE4                 align 20h
.text:00403D00 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00403D00                                         ; DATA XREF: sub_403E50:loc_403FC1↓o
.text:00403D00                 db '%s, %s, and %s.',0Ah,0
.text:00403D28                 align 20h
.text:00403D40 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00403D40                                         ; DATA XREF: sub_403E50:loc_403FCD↓o
.text:00403D40                 db '%s, %s, %s, and %s.',0Ah,0
.text:00403D6C                 align 20h
.text:00403D80 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00403D80                                         ; DATA XREF: sub_403E50:loc_403FD9↓o
.text:00403D80                 db '%s, %s, %s, %s,',0Ah
.text:00403D80                 db 'and %s.',0Ah,0
.text:00403DB0                 align 20h
.text:00403DC0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00403DC0                                         ; DATA XREF: sub_403E50:loc_403FE5↓o
.text:00403DC0                 db '%s, %s, %s, %s,',0Ah
.text:00403DC0                 db '%s, and %s.',0Ah,0
.text:00403DF4                 align 10h
.text:00403E00 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00403E00                                         ; DATA XREF: sub_403E50:def_403EBD↓o
.text:00403E00                 db '%s, %s, %s, %s,',0Ah
.text:00403E00                 db '%s, %s, and others.',0Ah,0
.text:00403E3C ; const char aSS_0[]
.text:00403E3C aSS_0           db '%s %s',0Ah,0        ; DATA XREF: sub_403E50+1B5↓o
.text:00403E43                 align 10h
.text:00403E50
.text:00403E50 ; =============== S U B R O U T I N E =======================================
.text:00403E50
.text:00403E50
.text:00403E50 ; int __cdecl sub_403E50(FILE *, FILE *, int, int, va_list)
.text:00403E50 sub_403E50      proc near               ; CODE XREF: sub_404020+2A↓p
.text:00403E50
.text:00403E50 Stream          = dword ptr -2Ch
.text:00403E50 Format          = dword ptr -28h
.text:00403E50 ArgList         = dword ptr -24h
.text:00403E50 var_20          = dword ptr -20h
.text:00403E50 var_1C          = dword ptr -1Ch
.text:00403E50 var_14          = dword ptr -14h
.text:00403E50 arg_0           = dword ptr  4
.text:00403E50 arg_4           = dword ptr  8
.text:00403E50 arg_8           = dword ptr  0Ch
.text:00403E50 arg_C           = dword ptr  10h
.text:00403E50 arg_10          = dword ptr  14h
.text:00403E50
.text:00403E50                 push    ebp
.text:00403E51                 push    edi
.text:00403E52                 push    esi
.text:00403E53                 push    ebx
.text:00403E54                 sub     esp, 1Ch
.text:00403E57                 xor     ebx, ebx
.text:00403E59                 mov     edi, [esp+2Ch+arg_10]
.text:00403E5D                 mov     edx, [esp+2Ch+arg_8]
.text:00403E61                 mov     esi, [esp+2Ch+arg_0]
.text:00403E65                 mov     eax, [edi]
.text:00403E67                 mov     ecx, [esp+2Ch+arg_4]
.text:00403E6B                 mov     [esp+2Ch+var_14], edx
.text:00403E6F                 mov     ebp, [esp+2Ch+arg_C]
.text:00403E73                 lea     edx, [edi+4]
.text:00403E76                 test    eax, eax
.text:00403E78                 jz      short loc_403E8C
.text:00403E7A                 lea     esi, [esi+0]
.text:00403E80
.text:00403E80 loc_403E80:                             ; CODE XREF: sub_403E50+3A↓j
.text:00403E80                 mov     eax, edx
.text:00403E82                 inc     ebx
.text:00403E83                 mov     eax, [eax]
.text:00403E85                 add     edx, 4
.text:00403E88                 test    eax, eax
.text:00403E8A                 jnz     short loc_403E80
.text:00403E8C
.text:00403E8C loc_403E8C:                             ; CODE XREF: sub_403E50+28↑j
.text:00403E8C                 test    ecx, ecx
.text:00403E8E                 jz      loc_403FFD
.text:00403E94                 mov     [esp+2Ch+var_1C], ebp
.text:00403E98                 mov     edx, [esp+2Ch+var_14]
.text:00403E9C                 mov     [esp+2Ch+ArgList], ecx
.text:00403EA0                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00403EA8                 mov     [esp+2Ch+var_20], edx
.text:00403EAC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403EAF                 call    fprintf
.text:00403EB4
.text:00403EB4 loc_403EB4:                             ; CODE XREF: sub_403E50+1C9↓j
.text:00403EB4                 cmp     ebx, 9          ; switch 10 cases
.text:00403EB7                 ja      def_403EBD      ; jumptable 00403EBD default case
.text:00403EBD                 jmp     ds:jpt_403EBD[ebx*4] ; switch jump
.text:00403EBD ; ---------------------------------------------------------------------------
.text:00403EC4 jpt_403EBD      dd offset loc_403EEC    ; DATA XREF: sub_403E50+6D↑r
.text:00403EC4                 dd offset loc_403EF1    ; jump table for switch statement
.text:00403EC4                 dd offset loc_403F91
.text:00403EC4                 dd offset loc_403F9D
.text:00403EC4                 dd offset loc_403FA9
.text:00403EC4                 dd offset loc_403FB5
.text:00403EC4                 dd offset loc_403FC1
.text:00403EC4                 dd offset loc_403FCD
.text:00403EC4                 dd offset loc_403FD9
.text:00403EC4                 dd offset loc_403FE5
.text:00403EEC ; ---------------------------------------------------------------------------
.text:00403EEC
.text:00403EEC loc_403EEC:                             ; CODE XREF: sub_403E50+6D↑j
.text:00403EEC                                         ; DATA XREF: sub_403E50:jpt_403EBD↑o
.text:00403EEC                 call    abort           ; jumptable 00403EBD case 0
.text:00403EF1 ; ---------------------------------------------------------------------------
.text:00403EF1
.text:00403EF1 loc_403EF1:                             ; CODE XREF: sub_403E50+6D↑j
.text:00403EF1                                         ; DATA XREF: sub_403E50:jpt_403EBD↑o
.text:00403EF1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00403EBD case 1
.text:00403EF8                 nop
.text:00403EF9                 lea     esi, [esi+0]
.text:00403F00
.text:00403F00 loc_403F00:                             ; CODE XREF: sub_403E50+148↓j
.text:00403F00                                         ; sub_403E50+154↓j ...
.text:00403F00                 call    ds:libintl_gettext
.text:00403F06                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00403F0A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403F0D                 mov     [esp+2Ch+Format], eax ; Format
.text:00403F11                 call    vfprintf
.text:00403F16                 mov     ebx, [esi+4]
.text:00403F19                 dec     ebx
.text:00403F1A                 test    ebx, ebx
.text:00403F1C                 mov     [esi+4], ebx
.text:00403F1F                 js      short loc_403F7F
.text:00403F21                 mov     edi, [esi]
.text:00403F23                 mov     byte ptr [edi], 0Ah
.text:00403F26                 inc     dword ptr [esi]
.text:00403F28
.text:00403F28 loc_403F28:                             ; CODE XREF: sub_403E50+13F↓j
.text:00403F28                 mov     [esp+2Ch+Format], esi ; Stream
.text:00403F2C                 mov     edx, Buffer
.text:00403F32                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00403F35                 call    fputs
.text:00403F3A                 mov     ebp, [esi+4]
.text:00403F3D                 dec     ebp
.text:00403F3E                 test    ebp, ebp
.text:00403F40                 mov     [esi+4], ebp
.text:00403F43                 js      short loc_403F6D
.text:00403F45                 mov     ecx, [esi]
.text:00403F47                 mov     byte ptr [ecx], 0Ah
.text:00403F4A                 inc     dword ptr [esi]
.text:00403F4C
.text:00403F4C loc_403F4C:                             ; CODE XREF: sub_403E50+12D↓j
.text:00403F4C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00403F50                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00403F57                 call    ds:libintl_gettext
.text:00403F5D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00403F61                 add     esp, 1Ch
.text:00403F64                 pop     ebx
.text:00403F65                 pop     esi
.text:00403F66                 pop     edi
.text:00403F67                 pop     ebp
.text:00403F68                 jmp     fputs
.text:00403F6D ; ---------------------------------------------------------------------------
.text:00403F6D
.text:00403F6D loc_403F6D:                             ; CODE XREF: sub_403E50+F3↑j
.text:00403F6D                 mov     [esp+2Ch+Format], esi ; File
.text:00403F71                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403F78                 call    _flsbuf
.text:00403F7D                 jmp     short loc_403F4C
.text:00403F7F ; ---------------------------------------------------------------------------
.text:00403F7F
.text:00403F7F loc_403F7F:                             ; CODE XREF: sub_403E50+CF↑j
.text:00403F7F                 mov     [esp+2Ch+Format], esi ; File
.text:00403F83                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403F8A                 call    _flsbuf
.text:00403F8F                 jmp     short loc_403F28
.text:00403F91 ; ---------------------------------------------------------------------------
.text:00403F91
.text:00403F91 loc_403F91:                             ; CODE XREF: sub_403E50+6D↑j
.text:00403F91                                         ; DATA XREF: sub_403E50:jpt_403EBD↑o
.text:00403F91                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00403EBD case 2
.text:00403F98                 jmp     loc_403F00
.text:00403F9D ; ---------------------------------------------------------------------------
.text:00403F9D
.text:00403F9D loc_403F9D:                             ; CODE XREF: sub_403E50+6D↑j
.text:00403F9D                                         ; DATA XREF: sub_403E50:jpt_403EBD↑o
.text:00403F9D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00403EBD case 3
.text:00403FA4                 jmp     loc_403F00
.text:00403FA9 ; ---------------------------------------------------------------------------
.text:00403FA9
.text:00403FA9 loc_403FA9:                             ; CODE XREF: sub_403E50+6D↑j
.text:00403FA9                                         ; DATA XREF: sub_403E50:jpt_403EBD↑o
.text:00403FA9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00403EBD case 4
.text:00403FB0                 jmp     loc_403F00
.text:00403FB5 ; ---------------------------------------------------------------------------
.text:00403FB5
.text:00403FB5 loc_403FB5:                             ; CODE XREF: sub_403E50+6D↑j
.text:00403FB5                                         ; DATA XREF: sub_403E50:jpt_403EBD↑o
.text:00403FB5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00403EBD case 5
.text:00403FBC                 jmp     loc_403F00
.text:00403FC1 ; ---------------------------------------------------------------------------
.text:00403FC1
.text:00403FC1 loc_403FC1:                             ; CODE XREF: sub_403E50+6D↑j
.text:00403FC1                                         ; DATA XREF: sub_403E50:jpt_403EBD↑o
.text:00403FC1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00403EBD case 6
.text:00403FC8                 jmp     loc_403F00
.text:00403FCD ; ---------------------------------------------------------------------------
.text:00403FCD
.text:00403FCD loc_403FCD:                             ; CODE XREF: sub_403E50+6D↑j
.text:00403FCD                                         ; DATA XREF: sub_403E50:jpt_403EBD↑o
.text:00403FCD                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00403EBD case 7
.text:00403FD4                 jmp     loc_403F00
.text:00403FD9 ; ---------------------------------------------------------------------------
.text:00403FD9
.text:00403FD9 loc_403FD9:                             ; CODE XREF: sub_403E50+6D↑j
.text:00403FD9                                         ; DATA XREF: sub_403E50:jpt_403EBD↑o
.text:00403FD9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00403EBD case 8
.text:00403FE0                 jmp     loc_403F00
.text:00403FE5 ; ---------------------------------------------------------------------------
.text:00403FE5
.text:00403FE5 loc_403FE5:                             ; CODE XREF: sub_403E50+6D↑j
.text:00403FE5                                         ; DATA XREF: sub_403E50:jpt_403EBD↑o
.text:00403FE5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00403EBD case 9
.text:00403FEC                 jmp     loc_403F00
.text:00403FF1 ; ---------------------------------------------------------------------------
.text:00403FF1
.text:00403FF1 def_403EBD:                             ; CODE XREF: sub_403E50+67↑j
.text:00403FF1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00403EBD default case
.text:00403FF8                 jmp     loc_403F00
.text:00403FFD ; ---------------------------------------------------------------------------
.text:00403FFD
.text:00403FFD loc_403FFD:                             ; CODE XREF: sub_403E50+3E↑j
.text:00403FFD                 mov     [esp+2Ch+var_20], ebp
.text:00404001                 mov     ecx, [esp+2Ch+var_14]
.text:00404005                 mov     [esp+2Ch+Format], offset aSS_0 ; "%s %s\n"
.text:0040400D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404010                 mov     [esp+2Ch+ArgList], ecx
.text:00404014                 call    fprintf
.text:00404019                 jmp     loc_403EB4
.text:00404019 sub_403E50      endp
.text:00404019
.text:00404019 ; ---------------------------------------------------------------------------
.text:0040401E                 align 10h
.text:00404020
.text:00404020 ; =============== S U B R O U T I N E =======================================
.text:00404020
.text:00404020
.text:00404020 ; int __cdecl sub_404020(FILE *, FILE *, int, int, char)
.text:00404020 sub_404020      proc near               ; CODE XREF: sub_4016B0+1BD↑p
.text:00404020
.text:00404020 var_1C          = dword ptr -1Ch
.text:00404020 var_18          = dword ptr -18h
.text:00404020 var_14          = dword ptr -14h
.text:00404020 var_10          = dword ptr -10h
.text:00404020 var_C           = dword ptr -0Ch
.text:00404020 arg_0           = dword ptr  4
.text:00404020 arg_4           = dword ptr  8
.text:00404020 arg_8           = dword ptr  0Ch
.text:00404020 arg_C           = dword ptr  10h
.text:00404020 arg_10          = byte ptr  14h
.text:00404020
.text:00404020                 sub     esp, 1Ch
.text:00404023                 mov     edx, [esp+1Ch+arg_C]
.text:00404027                 lea     ecx, [esp+1Ch+arg_10]
.text:0040402B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040402F                 mov     ecx, [esp+1Ch+arg_8]
.text:00404033                 mov     [esp+1Ch+var_10], edx ; int
.text:00404037                 mov     edx, [esp+1Ch+arg_4]
.text:0040403B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040403F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00404043                 mov     edx, [esp+1Ch+arg_0]
.text:00404047                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040404A                 call    sub_403E50
.text:0040404F                 add     esp, 1Ch
.text:00404052                 retn
.text:00404052 sub_404020      endp
.text:00404052
.text:00404052 ; ---------------------------------------------------------------------------
.text:00404053                 align 10h
.text:00404060
.text:00404060 ; =============== S U B R O U T I N E =======================================
.text:00404060
.text:00404060
.text:00404060 ; int __cdecl sub_404060(int, int, char *, int, int)
.text:00404060 sub_404060      proc near               ; CODE XREF: sub_4016B0+102↑p
.text:00404060
.text:00404060 var_1C          = dword ptr -1Ch
.text:00404060 var_18          = dword ptr -18h
.text:00404060 var_14          = dword ptr -14h
.text:00404060 var_10          = dword ptr -10h
.text:00404060 var_C           = dword ptr -0Ch
.text:00404060 var_8           = dword ptr -8
.text:00404060 var_4           = dword ptr -4
.text:00404060 arg_0           = dword ptr  4
.text:00404060 arg_4           = dword ptr  8
.text:00404060 arg_8           = dword ptr  0Ch
.text:00404060 arg_C           = dword ptr  10h
.text:00404060 arg_10          = dword ptr  14h
.text:00404060
.text:00404060                 sub     esp, 1Ch
.text:00404063                 mov     edx, [esp+1Ch+arg_C]
.text:00404067                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040406F                 mov     ecx, [esp+1Ch+arg_10]
.text:00404073                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040407B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040407F                 mov     edx, [esp+1Ch+arg_4]
.text:00404083                 mov     [esp+1Ch+var_C], ecx ; int
.text:00404087                 mov     ecx, [esp+1Ch+arg_8]
.text:0040408B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040408F                 mov     edx, [esp+1Ch+arg_0]
.text:00404093                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00404097                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040409A                 call    sub_403920
.text:0040409F                 add     esp, 1Ch
.text:004040A2                 retn
.text:004040A2 sub_404060      endp
.text:004040A2
.text:004040A2 ; ---------------------------------------------------------------------------
.text:004040A3                 align 10h
.text:004040B0                 sub     esp, 2Ch
.text:004040B3                 mov     edx, [esp+44h]
.text:004040B7                 mov     dword ptr [esp+18h], 0
.text:004040BF                 mov     ecx, [esp+40h]
.text:004040C3                 mov     dword ptr [esp+14h], 0
.text:004040CB                 mov     [esp+1Ch], edx
.text:004040CF                 mov     edx, [esp+3Ch]
.text:004040D3                 mov     [esp+10h], ecx
.text:004040D7                 mov     ecx, [esp+38h]
.text:004040DB                 mov     [esp+0Ch], edx
.text:004040DF                 mov     edx, [esp+34h]
.text:004040E3                 mov     [esp+8], ecx
.text:004040E7                 mov     [esp+4], edx
.text:004040EB                 mov     edx, [esp+30h]
.text:004040EF                 mov     [esp], edx
.text:004040F2                 call    sub_402D90
.text:004040F7                 add     esp, 2Ch
.text:004040FA                 retn
.text:004040FA ; ---------------------------------------------------------------------------
.text:004040FB                 align 10h
.text:00404100                 sub     esp, 1Ch
.text:00404103                 mov     edx, [esp+2Ch]
.text:00404107                 mov     dword ptr [esp+18h], 0
.text:0040410F                 mov     ecx, [esp+30h]
.text:00404113                 mov     dword ptr [esp+14h], 1
.text:0040411B                 mov     [esp+0Ch], edx
.text:0040411F                 mov     edx, [esp+24h]
.text:00404123                 mov     [esp+10h], ecx
.text:00404127                 mov     ecx, [esp+28h]
.text:0040412B                 mov     [esp+4], edx
.text:0040412F                 mov     edx, [esp+20h]
.text:00404133                 mov     [esp+8], ecx
.text:00404137                 mov     [esp], edx
.text:0040413A                 call    sub_403920
.text:0040413F                 add     esp, 1Ch
.text:00404142                 retn
.text:00404142 ; ---------------------------------------------------------------------------
.text:00404143                 align 10h
.text:00404150                 sub     esp, 2Ch
.text:00404153                 mov     edx, [esp+44h]
.text:00404157                 mov     dword ptr [esp+18h], 0
.text:0040415F                 mov     ecx, [esp+40h]
.text:00404163                 mov     dword ptr [esp+14h], 1
.text:0040416B                 mov     [esp+1Ch], edx
.text:0040416F                 mov     edx, [esp+3Ch]
.text:00404173                 mov     [esp+10h], ecx
.text:00404177                 mov     ecx, [esp+38h]
.text:0040417B                 mov     [esp+0Ch], edx
.text:0040417F                 mov     edx, [esp+34h]
.text:00404183                 mov     [esp+8], ecx
.text:00404187                 mov     [esp+4], edx
.text:0040418B                 mov     edx, [esp+30h]
.text:0040418F                 mov     [esp], edx
.text:00404192                 call    sub_402D90
.text:00404197                 add     esp, 2Ch
.text:0040419A                 retn
.text:0040419A ; ---------------------------------------------------------------------------
.text:0040419B                 align 10h
.text:004041A0                 mov     edx, [esp+4]
.text:004041A4                 mov     ds:dword_4190F0, edx
.text:004041AA                 retn
.text:004041AA ; ---------------------------------------------------------------------------
.text:004041AB aWriteError     db 'write error',0      ; DATA XREF: sub_4041D0:loc_404219↓o
.text:004041B7 ; const char aSS_1[]
.text:004041B7 aSS_1           db '%s: %s',0           ; DATA XREF: sub_4041D0+77↓o
.text:004041BE ; const char aS_4[]
.text:004041BE aS_4            db '%s',0               ; DATA XREF: sub_4041D0+A0↓o
.text:004041C1 ; ---------------------------------------------------------------------------
.text:004041C1                 jmp     short sub_4041D0
.text:004041C1 ; ---------------------------------------------------------------------------
.text:004041C3                 align 10h
.text:004041D0
.text:004041D0 ; =============== S U B R O U T I N E =======================================
.text:004041D0
.text:004041D0
.text:004041D0 ; void __cdecl sub_4041D0()
.text:004041D0 sub_4041D0      proc near               ; CODE XREF: .text:004041C1↑j
.text:004041D0                                         ; DATA XREF: sub_4016B0+60↑o
.text:004041D0
.text:004041D0 Stream          = dword ptr -2Ch
.text:004041D0 ErrorMessage    = dword ptr -28h
.text:004041D0 var_24          = dword ptr -24h
.text:004041D0 var_20          = byte ptr -20h
.text:004041D0 var_1C          = dword ptr -1Ch
.text:004041D0 var_9           = byte ptr -9
.text:004041D0
.text:004041D0                 push    esi
.text:004041D1                 push    ebx
.text:004041D2                 sub     esp, 24h
.text:004041D5                 mov     edx, ds:_iob
.text:004041DB                 mov     ecx, [edx+2Ch]
.text:004041DE                 lea     esi, [edx+20h]
.text:004041E1                 shr     ecx, 5
.text:004041E4                 mov     bl, cl
.text:004041E6                 mov     ecx, [edx+20h]
.text:004041E9                 and     bl, 1
.text:004041EC                 cmp     ecx, [esi+8]
.text:004041EF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004041F2                 setz    [esp+2Ch+var_9]
.text:004041F7                 call    fclose
.text:004041FC                 test    eax, eax
.text:004041FE                 setnz   al
.text:00404201                 test    bl, bl
.text:00404203                 jnz     loc_404293
.text:00404209                 test    al, al
.text:0040420B                 jz      short loc_404260
.text:0040420D
.text:0040420D loc_40420D:                             ; CODE XREF: sub_4041D0+CD↓j
.text:0040420D                 call    _errno
.text:00404212                 mov     esi, [eax]
.text:00404214
.text:00404214 loc_404214:                             ; CODE XREF: sub_4041D0+C7↓j
.text:00404214                 cmp     esi, 9
.text:00404217                 jz      short loc_404286
.text:00404219
.text:00404219 loc_404219:                             ; CODE XREF: sub_4041D0+B8↓j
.text:00404219                                         ; sub_4041D0+C1↓j
.text:00404219                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00404220                 call    ds:libintl_gettext
.text:00404226                 mov     ebx, eax
.text:00404228                 mov     eax, ds:dword_4190F0
.text:0040422D                 test    eax, eax
.text:0040422F                 jz      short loc_404266
.text:00404231                 mov     [esp+2Ch+Stream], eax ; char *
.text:00404234                 call    sub_405790
.text:00404239                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040423D                 mov     edx, Code
.text:00404243                 mov     [esp+2Ch+var_1C], ebx
.text:00404247                 mov     [esp+2Ch+var_24], offset aSS_1 ; "%s: %s"
.text:0040424F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00404253                 mov     [esp+2Ch+Stream], edx ; Code
.text:00404256                 call    sub_405AB0
.text:0040425B                 nop
.text:0040425C                 lea     esi, [esi+0]
.text:00404260
.text:00404260 loc_404260:                             ; CODE XREF: sub_4041D0+3B↑j
.text:00404260                                         ; sub_4041D0+B4↓j ...
.text:00404260                 add     esp, 24h
.text:00404263                 pop     ebx
.text:00404264                 pop     esi
.text:00404265                 retn
.text:00404266 ; ---------------------------------------------------------------------------
.text:00404266
.text:00404266 loc_404266:                             ; CODE XREF: sub_4041D0+5F↑j
.text:00404266                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040426A                 mov     ebx, Code
.text:00404270                 mov     [esp+2Ch+var_24], offset aS_4 ; "%s"
.text:00404278                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040427C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040427F                 call    sub_405AB0
.text:00404284                 jmp     short loc_404260
.text:00404286 ; ---------------------------------------------------------------------------
.text:00404286
.text:00404286 loc_404286:                             ; CODE XREF: sub_4041D0+47↑j
.text:00404286                 test    bl, bl
.text:00404288                 jnz     short loc_404219
.text:0040428A                 cmp     [esp+2Ch+var_9], 0
.text:0040428F                 jnz     short loc_404260
.text:00404291                 jmp     short loc_404219
.text:00404293 ; ---------------------------------------------------------------------------
.text:00404293
.text:00404293 loc_404293:                             ; CODE XREF: sub_4041D0+33↑j
.text:00404293                 xor     esi, esi
.text:00404295                 test    al, al
.text:00404297                 jz      loc_404214
.text:0040429D                 jmp     loc_40420D
.text:0040429D sub_4041D0      endp
.text:0040429D
.text:0040429D ; ---------------------------------------------------------------------------
.text:004042A2                 align 10h
.text:004042B0
.text:004042B0 ; =============== S U B R O U T I N E =======================================
.text:004042B0
.text:004042B0
.text:004042B0 sub_4042B0      proc near               ; CODE XREF: sub_4016B0+355↑p
.text:004042B0
.text:004042B0 Size            = dword ptr -0Ch
.text:004042B0 var_4           = dword ptr -4
.text:004042B0 arg_0           = dword ptr  4
.text:004042B0 arg_4           = dword ptr  8
.text:004042B0
.text:004042B0                 sub     esp, 0Ch
.text:004042B3                 xor     edx, edx
.text:004042B5                 mov     ecx, [esp+0Ch+arg_4]
.text:004042B9                 mov     [esp+0Ch+var_4], ebx
.text:004042BD                 mov     eax, 0FFFFFFFFh
.text:004042C2                 mov     ebx, [esp+0Ch+arg_0]
.text:004042C6                 div     ecx
.text:004042C8                 cmp     eax, ebx
.text:004042CA                 jb      short loc_4042E9
.text:004042CC                 mov     edx, ebx
.text:004042CE                 imul    edx, ecx
.text:004042D1                 mov     [esp+0Ch+Size], edx ; Size
.text:004042D4                 call    malloc
.text:004042D9                 test    eax, eax
.text:004042DB                 jz      short loc_4042E5
.text:004042DD
.text:004042DD loc_4042DD:                             ; CODE XREF: sub_4042B0+37↓j
.text:004042DD                 mov     ebx, [esp+0Ch+var_4]
.text:004042E1                 add     esp, 0Ch
.text:004042E4                 retn
.text:004042E5 ; ---------------------------------------------------------------------------
.text:004042E5
.text:004042E5 loc_4042E5:                             ; CODE XREF: sub_4042B0+2B↑j
.text:004042E5                 test    ebx, ebx
.text:004042E7                 jz      short loc_4042DD
.text:004042E9
.text:004042E9 loc_4042E9:                             ; CODE XREF: sub_4042B0+1A↑j
.text:004042E9                 call    sub_405A20
.text:004042E9 sub_4042B0      endp
.text:004042E9
.text:004042E9 ; ---------------------------------------------------------------------------
.text:004042EE                 align 10h
.text:004042F0
.text:004042F0 ; =============== S U B R O U T I N E =======================================
.text:004042F0
.text:004042F0
.text:004042F0 ; int __cdecl sub_4042F0(size_t)
.text:004042F0 sub_4042F0      proc near               ; CODE XREF: .text:00405169↓p
.text:004042F0                                         ; .text:00405346↓p ...
.text:004042F0
.text:004042F0 Size            = dword ptr -0Ch
.text:004042F0 var_4           = dword ptr -4
.text:004042F0 arg_0           = dword ptr  4
.text:004042F0
.text:004042F0                 sub     esp, 0Ch
.text:004042F3                 mov     [esp+0Ch+var_4], ebx
.text:004042F7                 mov     ebx, [esp+0Ch+arg_0]
.text:004042FB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004042FE                 call    malloc
.text:00404303                 test    eax, eax
.text:00404305                 jz      short loc_404310
.text:00404307
.text:00404307 loc_404307:                             ; CODE XREF: sub_4042F0+22↓j
.text:00404307                 mov     ebx, [esp+0Ch+var_4]
.text:0040430B                 add     esp, 0Ch
.text:0040430E                 retn
.text:0040430E ; ---------------------------------------------------------------------------
.text:0040430F                 align 10h
.text:00404310
.text:00404310 loc_404310:                             ; CODE XREF: sub_4042F0+15↑j
.text:00404310                 test    ebx, ebx
.text:00404312                 jz      short loc_404307
.text:00404314                 call    sub_405A20
.text:00404314 sub_4042F0      endp
.text:00404314
.text:00404314 ; ---------------------------------------------------------------------------
.text:00404319                 align 10h
.text:00404320                 sub     esp, 1Ch
.text:00404323                 xor     edx, edx
.text:00404325                 mov     eax, 0FFFFFFFFh
.text:0040432A                 mov     [esp+14h], ebx
.text:0040432E                 mov     ecx, [esp+20h]
.text:00404332                 mov     ebx, [esp+28h]
.text:00404336                 mov     [esp+18h], esi
.text:0040433A                 mov     esi, [esp+24h]
.text:0040433E                 div     ebx
.text:00404340                 cmp     eax, esi
.text:00404342                 jb      short loc_404374
.text:00404344                 mov     [esp], ecx
.text:00404347                 mov     edx, esi
.text:00404349                 imul    edx, ebx
.text:0040434C                 mov     [esp+4], edx
.text:00404350                 call    realloc
.text:00404355                 test    eax, eax
.text:00404357                 mov     ecx, eax
.text:00404359                 jz      short loc_404370
.text:0040435B
.text:0040435B loc_40435B:                             ; CODE XREF: .text:00404372↓j
.text:0040435B                 mov     ebx, [esp+14h]
.text:0040435F                 mov     eax, ecx
.text:00404361                 mov     esi, [esp+18h]
.text:00404365                 add     esp, 1Ch
.text:00404368                 retn
.text:00404368 ; ---------------------------------------------------------------------------
.text:00404369                 align 10h
.text:00404370
.text:00404370 loc_404370:                             ; CODE XREF: .text:00404359↑j
.text:00404370                 test    esi, esi
.text:00404372                 jz      short loc_40435B
.text:00404374
.text:00404374 loc_404374:                             ; CODE XREF: .text:00404342↑j
.text:00404374                 call    sub_405A20
.text:00404374 ; ---------------------------------------------------------------------------
.text:00404379                 align 10h
.text:00404380
.text:00404380 ; =============== S U B R O U T I N E =======================================
.text:00404380
.text:00404380
.text:00404380 ; int __cdecl sub_404380(void *, size_t)
.text:00404380 sub_404380      proc near               ; CODE XREF: sub_405830+5B↓p
.text:00404380
.text:00404380 Block           = dword ptr -0Ch
.text:00404380 Size            = dword ptr -8
.text:00404380 var_4           = dword ptr -4
.text:00404380 arg_0           = dword ptr  4
.text:00404380 arg_4           = dword ptr  8
.text:00404380
.text:00404380                 sub     esp, 0Ch
.text:00404383                 mov     edx, [esp+0Ch+arg_0]
.text:00404387                 mov     [esp+0Ch+var_4], ebx
.text:0040438B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040438F                 mov     [esp+0Ch+Block], edx ; Block
.text:00404392                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404396                 call    realloc
.text:0040439B                 test    eax, eax
.text:0040439D                 jz      short loc_4043A7
.text:0040439F
.text:0040439F loc_40439F:                             ; CODE XREF: sub_404380+29↓j
.text:0040439F                 mov     ebx, [esp+0Ch+var_4]
.text:004043A3                 add     esp, 0Ch
.text:004043A6                 retn
.text:004043A7 ; ---------------------------------------------------------------------------
.text:004043A7
.text:004043A7 loc_4043A7:                             ; CODE XREF: sub_404380+1D↑j
.text:004043A7                 test    ebx, ebx
.text:004043A9                 jz      short loc_40439F
.text:004043AB                 call    sub_405A20
.text:004043AB sub_404380      endp
.text:004043AB
.text:004043B0 ; ---------------------------------------------------------------------------
.text:004043B0                 jmp     sub_404500
.text:004043B0 ; ---------------------------------------------------------------------------
.text:004043B5                 align 10h
.text:004043C0                 sub     esp, 0Ch
.text:004043C3                 mov     edx, [esp+14h]
.text:004043C7                 mov     dword ptr [esp+8], 1
.text:004043CF                 mov     [esp+4], edx
.text:004043D3                 mov     edx, [esp+10h]
.text:004043D7                 mov     [esp], edx
.text:004043DA                 call    sub_404500
.text:004043DF                 add     esp, 0Ch
.text:004043E2                 retn
.text:004043E2 ; ---------------------------------------------------------------------------
.text:004043E3                 align 10h
.text:004043F0                 sub     esp, 1Ch
.text:004043F3                 mov     [esp+18h], ebx
.text:004043F7                 mov     ebx, [esp+20h]
.text:004043FB                 mov     [esp], ebx
.text:004043FE                 call    malloc
.text:00404403                 test    eax, eax
.text:00404405                 jz      short loc_404423
.text:00404407
.text:00404407 loc_404407:                             ; CODE XREF: .text:00404425↓j
.text:00404407                 mov     [esp+8], ebx
.text:0040440B                 mov     dword ptr [esp+4], 0
.text:00404413                 mov     [esp], eax
.text:00404416                 call    memset
.text:0040441B                 mov     ebx, [esp+18h]
.text:0040441F                 add     esp, 1Ch
.text:00404422                 retn
.text:00404423 ; ---------------------------------------------------------------------------
.text:00404423
.text:00404423 loc_404423:                             ; CODE XREF: .text:00404405↑j
.text:00404423                 test    ebx, ebx
.text:00404425                 jz      short loc_404407
.text:00404427                 call    sub_405A20
.text:00404427 ; ---------------------------------------------------------------------------
.text:0040442C                 align 10h
.text:00404430                 sub     esp, 0Ch
.text:00404433                 xor     edx, edx
.text:00404435                 mov     ecx, [esp+14h]
.text:00404439                 mov     [esp+8], ebx
.text:0040443D                 mov     eax, 0FFFFFFFFh
.text:00404442                 mov     ebx, [esp+10h]
.text:00404446                 div     ecx
.text:00404448                 cmp     eax, ebx
.text:0040444A                 jb      short loc_404468
.text:0040444C                 mov     [esp+4], ecx
.text:00404450                 mov     [esp], ebx
.text:00404453                 call    calloc
.text:00404458                 test    eax, eax
.text:0040445A                 jz      short loc_404464
.text:0040445C
.text:0040445C loc_40445C:                             ; CODE XREF: .text:00404466↓j
.text:0040445C                 mov     ebx, [esp+8]
.text:00404460                 add     esp, 0Ch
.text:00404463                 retn
.text:00404464 ; ---------------------------------------------------------------------------
.text:00404464
.text:00404464 loc_404464:                             ; CODE XREF: .text:0040445A↑j
.text:00404464                 test    ebx, ebx
.text:00404466                 jz      short loc_40445C
.text:00404468
.text:00404468 loc_404468:                             ; CODE XREF: .text:0040444A↑j
.text:00404468                 call    sub_405A20
.text:00404468 ; ---------------------------------------------------------------------------
.text:0040446D                 align 10h
.text:00404470                 sub     esp, 1Ch
.text:00404473                 mov     [esp+18h], ebx
.text:00404477                 mov     ebx, [esp+24h]
.text:0040447B                 mov     [esp], ebx
.text:0040447E                 call    malloc
.text:00404483                 test    eax, eax
.text:00404485                 mov     edx, eax
.text:00404487                 jz      short loc_4044A5
.text:00404489
.text:00404489 loc_404489:                             ; CODE XREF: .text:004044A7↓j
.text:00404489                 mov     [esp+8], ebx
.text:0040448D                 mov     ecx, [esp+20h]
.text:00404491                 mov     [esp], edx
.text:00404494                 mov     [esp+4], ecx
.text:00404498                 call    memcpy
.text:0040449D                 mov     ebx, [esp+18h]
.text:004044A1                 add     esp, 1Ch
.text:004044A4                 retn
.text:004044A5 ; ---------------------------------------------------------------------------
.text:004044A5
.text:004044A5 loc_4044A5:                             ; CODE XREF: .text:00404487↑j
.text:004044A5                 test    ebx, ebx
.text:004044A7                 jz      short loc_404489
.text:004044A9                 call    sub_405A20
.text:004044A9 ; ---------------------------------------------------------------------------
.text:004044AE                 align 10h
.text:004044B0                 sub     esp, 1Ch
.text:004044B3                 mov     [esp+18h], esi
.text:004044B7                 mov     esi, [esp+20h]
.text:004044BB                 mov     [esp+14h], ebx
.text:004044BF                 mov     [esp], esi
.text:004044C2                 call    strlen
.text:004044C7                 lea     ebx, [eax+1]
.text:004044CA                 mov     [esp], ebx
.text:004044CD                 call    malloc
.text:004044D2                 test    eax, eax
.text:004044D4                 jz      short loc_4044F2
.text:004044D6
.text:004044D6 loc_4044D6:                             ; CODE XREF: .text:004044F4↓j
.text:004044D6                 mov     [esp+8], ebx
.text:004044DA                 mov     [esp+4], esi
.text:004044DE                 mov     [esp], eax
.text:004044E1                 call    memcpy
.text:004044E6                 mov     ebx, [esp+14h]
.text:004044EA                 mov     esi, [esp+18h]
.text:004044EE                 add     esp, 1Ch
.text:004044F1                 retn
.text:004044F2 ; ---------------------------------------------------------------------------
.text:004044F2
.text:004044F2 loc_4044F2:                             ; CODE XREF: .text:004044D4↑j
.text:004044F2                 test    ebx, ebx
.text:004044F4                 jz      short loc_4044D6
.text:004044F6                 call    sub_405A20
.text:004044F6 ; ---------------------------------------------------------------------------
.text:004044FB                 align 10h
.text:00404500
.text:00404500 ; =============== S U B R O U T I N E =======================================
.text:00404500
.text:00404500
.text:00404500 ; int __cdecl sub_404500(void *, int, int)
.text:00404500 sub_404500      proc near               ; CODE XREF: .text:004043B0↑j
.text:00404500                                         ; .text:004043DA↑p
.text:00404500
.text:00404500 Block           = dword ptr -1Ch
.text:00404500 Size            = dword ptr -18h
.text:00404500 var_C           = dword ptr -0Ch
.text:00404500 var_8           = dword ptr -8
.text:00404500 var_4           = dword ptr -4
.text:00404500 arg_0           = dword ptr  4
.text:00404500 arg_4           = dword ptr  8
.text:00404500 arg_8           = dword ptr  0Ch
.text:00404500
.text:00404500                 sub     esp, 1Ch
.text:00404503                 mov     [esp+1Ch+var_8], esi
.text:00404507                 mov     esi, [esp+1Ch+arg_0]
.text:0040450B                 mov     [esp+1Ch+var_4], edi
.text:0040450F                 mov     edi, [esp+1Ch+arg_4]
.text:00404513                 test    esi, esi
.text:00404515                 mov     [esp+1Ch+var_C], ebx
.text:00404519                 mov     ecx, [edi]
.text:0040451B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040451F                 jz      short loc_404560
.text:00404521                 xor     edx, edx
.text:00404523                 mov     eax, 7FFFFFFFh
.text:00404528                 div     ebx
.text:0040452A                 cmp     eax, ecx
.text:0040452C                 jb      short loc_404559
.text:0040452E                 add     ecx, ecx
.text:00404530
.text:00404530 loc_404530:                             ; CODE XREF: sub_404500+62↓j
.text:00404530                                         ; sub_404500+71↓j ...
.text:00404530                 mov     [edi], ecx
.text:00404532                 imul    ebx, ecx
.text:00404535                 mov     [esp+1Ch+Block], esi ; Block
.text:00404538                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040453C                 call    realloc
.text:00404541                 test    eax, eax
.text:00404543                 jz      short loc_404555
.text:00404545
.text:00404545 loc_404545:                             ; CODE XREF: sub_404500+57↓j
.text:00404545                 mov     ebx, [esp+1Ch+var_C]
.text:00404549                 mov     esi, [esp+1Ch+var_8]
.text:0040454D                 mov     edi, [esp+1Ch+var_4]
.text:00404551                 add     esp, 1Ch
.text:00404554                 retn
.text:00404555 ; ---------------------------------------------------------------------------
.text:00404555
.text:00404555 loc_404555:                             ; CODE XREF: sub_404500+43↑j
.text:00404555                 test    ebx, ebx
.text:00404557                 jz      short loc_404545
.text:00404559
.text:00404559 loc_404559:                             ; CODE XREF: sub_404500+2C↑j
.text:00404559                 call    sub_405A20
.text:00404559 ; ---------------------------------------------------------------------------
.text:0040455E                 align 10h
.text:00404560
.text:00404560 loc_404560:                             ; CODE XREF: sub_404500+1F↑j
.text:00404560                 test    ecx, ecx
.text:00404562                 jnz     short loc_404530
.text:00404564                 xor     edx, edx
.text:00404566                 mov     eax, 40h ; '@'
.text:0040456B                 div     ebx
.text:0040456D                 test    eax, eax
.text:0040456F                 mov     ecx, eax
.text:00404571                 jnz     short loc_404530
.text:00404573                 mov     ecx, 1
.text:00404578                 jmp     short loc_404530
.text:00404578 sub_404500      endp
.text:00404578
.text:00404578 ; ---------------------------------------------------------------------------
.text:0040457A                 align 10h
.text:00404580
.text:00404580 ; =============== S U B R O U T I N E =======================================
.text:00404580
.text:00404580
.text:00404580 sub_404580      proc near               ; CODE XREF: sub_4020F0+153↑p
.text:00404580                                         ; sub_4020F0+3D0↑p ...
.text:00404580
.text:00404580 FileHandle      = dword ptr -1Ch
.text:00404580 DstBuf          = dword ptr -18h
.text:00404580 MaxCharCount    = dword ptr -14h
.text:00404580 arg_0           = dword ptr  4
.text:00404580 arg_4           = dword ptr  8
.text:00404580 arg_8           = dword ptr  0Ch
.text:00404580
.text:00404580                 push    ebp
.text:00404581                 push    edi
.text:00404582                 push    esi
.text:00404583                 push    ebx
.text:00404584                 sub     esp, 0Ch
.text:00404587                 mov     ebp, [esp+1Ch+arg_0]
.text:0040458B                 mov     edi, [esp+1Ch+arg_4]
.text:0040458F                 mov     ebx, [esp+1Ch+arg_8]
.text:00404593                 lea     esi, [esi+0]
.text:00404599                 lea     edi, [edi+0]
.text:004045A0
.text:004045A0 loc_4045A0:                             ; CODE XREF: sub_404580+3E↓j
.text:004045A0                                         ; sub_404580+57↓j
.text:004045A0                 mov     [esp+1Ch+MaxCharCount], ebx ; MaxCharCount
.text:004045A4                 mov     [esp+1Ch+DstBuf], edi ; DstBuf
.text:004045A8                 mov     [esp+1Ch+FileHandle], ebp ; FileHandle
.text:004045AB                 call    _read
.text:004045B0                 test    eax, eax
.text:004045B2                 mov     esi, eax
.text:004045B4                 jns     short loc_4045D9
.text:004045B6                 call    _errno
.text:004045BB                 cmp     dword ptr [eax], 4
.text:004045BE                 jz      short loc_4045A0
.text:004045C0                 call    _errno
.text:004045C5                 cmp     dword ptr [eax], 16h
.text:004045C8                 jnz     short loc_4045D9
.text:004045CA                 cmp     ebx, 7FFFE000h
.text:004045D0                 jbe     short loc_4045D9
.text:004045D2                 mov     ebx, 7FFFE000h
.text:004045D7                 jmp     short loc_4045A0
.text:004045D9 ; ---------------------------------------------------------------------------
.text:004045D9
.text:004045D9 loc_4045D9:                             ; CODE XREF: sub_404580+34↑j
.text:004045D9                                         ; sub_404580+48↑j ...
.text:004045D9                 add     esp, 0Ch
.text:004045DC                 mov     eax, esi
.text:004045DE                 pop     ebx
.text:004045DF                 pop     esi
.text:004045E0                 pop     edi
.text:004045E1                 pop     ebp
.text:004045E2                 retn
.text:004045E2 sub_404580      endp
.text:004045E2
.text:004045E2 ; ---------------------------------------------------------------------------
.text:004045E3                 align 10h
.text:004045F0
.text:004045F0 ; =============== S U B R O U T I N E =======================================
.text:004045F0
.text:004045F0
.text:004045F0 sub_4045F0      proc near               ; CODE XREF: sub_401EC0+117↑p
.text:004045F0                                         ; sub_401EC0+14E↑p ...
.text:004045F0
.text:004045F0 var_1C          = dword ptr -1Ch
.text:004045F0 var_18          = dword ptr -18h
.text:004045F0 var_14          = dword ptr -14h
.text:004045F0 var_10          = dword ptr -10h
.text:004045F0 arg_0           = dword ptr  4
.text:004045F0 arg_4           = dword ptr  8
.text:004045F0 arg_8           = dword ptr  0Ch
.text:004045F0
.text:004045F0                 push    edi
.text:004045F1                 push    esi
.text:004045F2                 push    ebx
.text:004045F3                 sub     esp, 10h
.text:004045F6                 mov     edx, [esp+1Ch+arg_8]
.text:004045FA                 mov     ebx, [esp+1Ch+arg_0]
.text:004045FE                 mov     esi, [esp+1Ch+arg_4]
.text:00404602                 lea     edi, [edx+15h]
.text:00404605                 mov     byte ptr [edx+15h], 0
.text:00404609                 lea     esi, [esi+0]
.text:00404610
.text:00404610 loc_404610:                             ; CODE XREF: sub_4045F0+63↓j
.text:00404610                 mov     [esp+1Ch+var_1C], ebx
.text:00404613                 dec     edi
.text:00404614                 mov     [esp+1Ch+var_18], esi
.text:00404618                 mov     [esp+1Ch+var_14], 0Ah
.text:00404620                 mov     [esp+1Ch+var_10], 0
.text:00404628                 call    sub_416750
.text:0040462D                 add     al, 30h ; '0'
.text:0040462F                 mov     [edi], al
.text:00404631                 mov     [esp+1Ch+var_1C], ebx
.text:00404634                 mov     [esp+1Ch+var_18], esi
.text:00404638                 mov     [esp+1Ch+var_14], 0Ah
.text:00404640                 mov     [esp+1Ch+var_10], 0
.text:00404648                 call    sub_416600
.text:0040464D                 mov     ebx, eax
.text:0040464F                 mov     esi, edx
.text:00404651                 or      edx, ebx
.text:00404653                 jnz     short loc_404610
.text:00404655                 add     esp, 10h
.text:00404658                 mov     eax, edi
.text:0040465A                 pop     ebx
.text:0040465B                 pop     esi
.text:0040465C                 pop     edi
.text:0040465D                 retn
.text:0040465D sub_4045F0      endp
.text:0040465D
.text:0040465D ; ---------------------------------------------------------------------------
.text:0040465E                 align 10h
.text:00404660 aLiteral        db 'literal',0          ; DATA XREF: .text:004046A0↓o
.text:00404668 aShell          db 'shell',0            ; DATA XREF: .text:004046A4↓o
.text:0040466E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:004046A8↓o
.text:0040467B aC              db 'c',0                ; DATA XREF: .text:004046AC↓o
.text:0040467D aEscape         db 'escape',0           ; DATA XREF: .text:004046B0↓o
.text:00404684 aLocale         db 'locale',0           ; DATA XREF: .text:004046B4↓o
.text:0040468B aClocale        db 'clocale',0          ; DATA XREF: .text:004046B8↓o
.text:00404693                 align 10h
.text:004046A0                 dd offset aLiteral      ; "literal"
.text:004046A4                 dd offset aShell        ; "shell"
.text:004046A8                 dd offset aShellAlways  ; "shell-always"
.text:004046AC                 dd offset aC            ; "c"
.text:004046B0                 dd offset aEscape       ; "escape"
.text:004046B4                 dd offset aLocale       ; "locale"
.text:004046B8                 dd offset aClocale      ; "clocale"
.text:004046BC                 dd 2 dup(0)
.text:004046C4                 dd 1, 2, 3, 4, 5, 6
.text:004046DC asc_4046DC:                             ; DATA XREF: sub_4046F0+7E↓o
.text:004046DC                                         ; sub_4046F0+A39↓o ...
.text:004046DC                 text "UTF-16LE", '"',27h,'`'
.text:004046E2                 align 10h
.text:004046F0
.text:004046F0 ; =============== S U B R O U T I N E =======================================
.text:004046F0
.text:004046F0
.text:004046F0 ; int __cdecl sub_4046F0(int, int, char *Str, int, int, int)
.text:004046F0 sub_4046F0      proc near               ; CODE XREF: sub_4046F0+43A↓p
.text:004046F0                                         ; .text:004052B3↓p ...
.text:004046F0
.text:004046F0 C               = dword ptr -4Ch
.text:004046F0 Type            = dword ptr -48h
.text:004046F0 SizeInBytes     = dword ptr -44h
.text:004046F0 State           = dword ptr -40h
.text:004046F0 var_3C          = dword ptr -3Ch
.text:004046F0 var_38          = dword ptr -38h
.text:004046F0 var_34          = dword ptr -34h
.text:004046F0 var_30          = dword ptr -30h
.text:004046F0 var_29          = byte ptr -29h
.text:004046F0 var_28          = dword ptr -28h
.text:004046F0 var_22          = byte ptr -22h
.text:004046F0 var_21          = byte ptr -21h
.text:004046F0 var_20          = dword ptr -20h
.text:004046F0 var_1C          = dword ptr -1Ch
.text:004046F0 var_18          = mbstate_t ptr -18h
.text:004046F0 arg_0           = dword ptr  4
.text:004046F0 arg_4           = dword ptr  8
.text:004046F0 Str             = dword ptr  0Ch
.text:004046F0 arg_C           = dword ptr  10h
.text:004046F0 arg_10          = dword ptr  14h
.text:004046F0 arg_14          = dword ptr  18h
.text:004046F0
.text:004046F0                 push    ebp
.text:004046F1                 push    edi
.text:004046F2                 push    esi
.text:004046F3                 push    ebx
.text:004046F4                 sub     esp, 3Ch
.text:004046F7                 mov     edx, ds:__mb_cur_max
.text:004046FD                 mov     [esp+4Ch+var_34], 0
.text:00404705                 mov     [esp+4Ch+var_1C], 0
.text:0040470D                 cmp     dword ptr [edx], 1
.text:00404710                 mov     [esp+4Ch+var_20], 0
.text:00404718                 mov     [esp+4Ch+var_21], 0
.text:0040471D                 setz    [esp+4Ch+var_22]
.text:00404722                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00404727                 ja      short def_40472D ; jumptable 0040472D default case, cases 0,1
.text:00404729                 mov     edx, [esp+4Ch+arg_10]
.text:0040472D                 jmp     ds:jpt_40472D[edx*4] ; switch jump
.text:0040472D ; ---------------------------------------------------------------------------
.text:00404734 jpt_40472D      dd offset def_40472D    ; DATA XREF: sub_4046F0+3D↑r
.text:00404734                 dd offset def_40472D    ; jump table for switch statement
.text:00404734                 dd offset loc_405075
.text:00404734                 dd offset loc_404750
.text:00404734                 dd offset loc_40509B
.text:00404734                 dd offset loc_4050A5
.text:00404734                 dd offset loc_4050A5
.text:00404750 ; ---------------------------------------------------------------------------
.text:00404750
.text:00404750 loc_404750:                             ; CODE XREF: sub_4046F0+3D↑j
.text:00404750                                         ; DATA XREF: sub_4046F0:jpt_40472D↑o
.text:00404750                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040472D case 3
.text:00404754                 cmp     [esp+4Ch+var_34], eax
.text:00404758                 jnb     short loc_404761
.text:0040475A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040475E                 mov     byte ptr [ebx], 22h ; '"'
.text:00404761
.text:00404761 loc_404761:                             ; CODE XREF: sub_4046F0+68↑j
.text:00404761                 mov     [esp+4Ch+var_34], 1
.text:00404769                 mov     [esp+4Ch+var_21], 1
.text:0040476E                 mov     [esp+4Ch+var_1C], offset asc_4046DC ; "\"'`"
.text:00404776
.text:00404776 loc_404776:                             ; CODE XREF: sub_4046F0+9A6↓j
.text:00404776                 mov     [esp+4Ch+var_20], 1
.text:0040477E
.text:0040477E def_40472D:                             ; CODE XREF: sub_4046F0+37↑j
.text:0040477E                                         ; sub_4046F0+3D↑j ...
.text:0040477E                 xor     ebp, ebp        ; jumptable 0040472D default case, cases 0,1
.text:00404780
.text:00404780 loc_404780:                             ; CODE XREF: sub_4046F0+3DB↓j
.text:00404780                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404785                 jz      loc_405067
.text:0040478B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040478F
.text:0040478F loc_40478F:                             ; CODE XREF: sub_4046F0+980↓j
.text:0040478F                 jz      loc_404FFE
.text:00404795                 cmp     [esp+4Ch+var_21], 0
.text:0040479A                 jz      short loc_4047E0
.text:0040479C                 mov     esi, [esp+4Ch+var_20]
.text:004047A0                 test    esi, esi
.text:004047A2                 jz      short loc_4047E0
.text:004047A4                 mov     ecx, [esp+4Ch+var_20]
.text:004047A8                 lea     edi, [ecx+ebp]
.text:004047AB                 cmp     edi, [esp+4Ch+arg_C]
.text:004047AF                 ja      short loc_4047E0
.text:004047B1                 cld
.text:004047B2                 mov     ebx, [esp+4Ch+Str]
.text:004047B6                 mov     edi, [esp+4Ch+var_1C]
.text:004047BA                 add     ebx, ebp
.text:004047BC                 mov     esi, ebx
.text:004047BE                 cmp     ecx, ecx
.text:004047C0                 repe cmpsb
.text:004047C2                 jnz     short loc_4047E0
.text:004047C4                 mov     edx, [esp+4Ch+arg_4]
.text:004047C8                 cmp     [esp+4Ch+var_34], edx
.text:004047CC                 jnb     short loc_4047DA
.text:004047CE                 mov     ecx, [esp+4Ch+arg_0]
.text:004047D2                 mov     eax, [esp+4Ch+var_34]
.text:004047D6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004047DA
.text:004047DA loc_4047DA:                             ; CODE XREF: sub_4046F0+DC↑j
.text:004047DA                 inc     [esp+4Ch+var_34]
.text:004047DE                 mov     esi, esi
.text:004047E0
.text:004047E0 loc_4047E0:                             ; CODE XREF: sub_4046F0+AA↑j
.text:004047E0                                         ; sub_4046F0+B2↑j ...
.text:004047E0                 mov     edi, [esp+4Ch+Str]
.text:004047E4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004047E9                 movzx   eax, bl
.text:004047EC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004047EF                 ja      def_4047F5      ; jumptable 004047F5 default case, cases 1-6,14-31,64
.text:004047F5                 jmp     ds:jpt_4047F5[eax*4] ; switch jump
.text:004047F5 ; ---------------------------------------------------------------------------
.text:004047FC jpt_4047F5      dd offset loc_4049F8, offset def_4047F5, offset def_4047F5
.text:004047FC                                         ; DATA XREF: sub_4046F0+105↑r
.text:004047FC                 dd offset def_4047F5, offset def_4047F5, offset def_4047F5 ; jump table for switch statement
.text:004047FC                 dd offset def_4047F5, offset loc_404AD0, offset loc_404AEE
.text:004047FC                 dd offset loc_404AF2, offset loc_404B37, offset loc_404B3B
.text:004047FC                 dd offset loc_404B3F, offset loc_404B43, offset def_4047F5
.text:004047FC                 dd offset def_4047F5, offset def_4047F5, offset def_4047F5
.text:004047FC                 dd offset def_4047F5, offset def_4047F5, offset def_4047F5
.text:004047FC                 dd offset def_4047F5, offset def_4047F5, offset def_4047F5
.text:004047FC                 dd offset def_4047F5, offset def_4047F5, offset def_4047F5
.text:004047FC                 dd offset def_4047F5, offset def_4047F5, offset def_4047F5
.text:004047FC                 dd offset def_4047F5, offset def_4047F5, offset loc_404FC8
.text:004047FC                 dd offset loc_404FC8, offset loc_404FC8, offset loc_404FEA
.text:004047FC                 dd offset loc_404FC8, offset def_404BF2, offset loc_404FC8
.text:004047FC                 dd offset loc_404B47, offset loc_404FC8, offset loc_404FC8
.text:004047FC                 dd offset loc_404FC8, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset loc_404FC8
.text:004047FC                 dd offset loc_404FC8, offset loc_404FC8, offset loc_404FC8
.text:004047FC                 dd offset loc_404BAC, offset def_4047F5, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset loc_404FC8, offset loc_404FC1
.text:004047FC                 dd offset def_404BF2, offset loc_404FC8, offset def_404BF2
.text:004047FC                 dd offset loc_404FC8, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset def_404BF2, offset def_404BF2, offset def_404BF2
.text:004047FC                 dd offset loc_404FD8, offset loc_404FC8, offset loc_404FD8
.text:004047FC                 dd offset loc_404FEA
.text:004049F8 ; ---------------------------------------------------------------------------
.text:004049F8
.text:004049F8 loc_4049F8:                             ; CODE XREF: sub_4046F0+105↑j
.text:004049F8                                         ; DATA XREF: sub_4046F0:jpt_4047F5↑o
.text:004049F8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004047F5 case 0
.text:004049FD                 lea     eax, [ebp+1]
.text:00404A00                 jz      loc_404AB0
.text:00404A06                 mov     esi, [esp+4Ch+arg_4]
.text:00404A0A                 cmp     [esp+4Ch+var_34], esi
.text:00404A0E                 jnb     short loc_404A1C
.text:00404A10                 mov     eax, [esp+4Ch+arg_0]
.text:00404A14                 mov     ebx, [esp+4Ch+var_34]
.text:00404A18                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00404A1C
.text:00404A1C loc_404A1C:                             ; CODE XREF: sub_4046F0+31E↑j
.text:00404A1C                 inc     [esp+4Ch+var_34]
.text:00404A20                 mov     edx, [esp+4Ch+arg_4]
.text:00404A24                 cmp     [esp+4Ch+var_34], edx
.text:00404A28                 jnb     short loc_404A36
.text:00404A2A                 mov     edi, [esp+4Ch+arg_0]
.text:00404A2E                 mov     ecx, [esp+4Ch+var_34]
.text:00404A32                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00404A36
.text:00404A36 loc_404A36:                             ; CODE XREF: sub_4046F0+338↑j
.text:00404A36                 inc     [esp+4Ch+var_34]
.text:00404A3A                 mov     esi, [esp+4Ch+arg_4]
.text:00404A3E                 cmp     [esp+4Ch+var_34], esi
.text:00404A42                 jnb     short loc_404A50
.text:00404A44                 mov     ebx, [esp+4Ch+arg_0]
.text:00404A48                 mov     eax, [esp+4Ch+var_34]
.text:00404A4C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00404A50
.text:00404A50 loc_404A50:                             ; CODE XREF: sub_4046F0+352↑j
.text:00404A50                 inc     [esp+4Ch+var_34]
.text:00404A54                 mov     bl, 30h ; '0'
.text:00404A56                 lea     esi, [esi+0]
.text:00404A59                 lea     edi, [edi+0]
.text:00404A60
.text:00404A60 def_404BF2:                             ; CODE XREF: sub_4046F0+105↑j
.text:00404A60                                         ; sub_4046F0+463↓j ...
.text:00404A60                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004047F5 cases 37,43-58,65-90,93,95,97-122
.text:00404A60                                         ; jumptable 00404BF2 default case, cases 34-38,42-44,46,48-59
.text:00404A65                 lea     eax, [ebp+1]
.text:00404A68                 jz      short loc_404AB0
.text:00404A6A                 mov     cl, bl
.text:00404A6C                 mov     edi, [esp+4Ch+arg_14]
.text:00404A70                 mov     esi, 1
.text:00404A75                 shr     cl, 5
.text:00404A78                 movzx   edx, cl
.text:00404A7B                 mov     ecx, ebx
.text:00404A7D                 and     ecx, 1Fh
.text:00404A80                 shl     esi, cl
.text:00404A82                 test    [edi+edx*4+4], esi
.text:00404A86                 jz      short loc_404AA2
.text:00404A88
.text:00404A88 loc_404A88:                             ; CODE XREF: sub_4046F0+3FC↓j
.text:00404A88                 mov     edx, [esp+4Ch+arg_4]
.text:00404A8C                 cmp     [esp+4Ch+var_34], edx
.text:00404A90                 jnb     short loc_404A9E
.text:00404A92                 mov     edi, [esp+4Ch+arg_0]
.text:00404A96                 mov     esi, [esp+4Ch+var_34]
.text:00404A9A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00404A9E
.text:00404A9E loc_404A9E:                             ; CODE XREF: sub_4046F0+3A0↑j
.text:00404A9E                 inc     [esp+4Ch+var_34]
.text:00404AA2
.text:00404AA2 loc_404AA2:                             ; CODE XREF: sub_4046F0+396↑j
.text:00404AA2                 lea     eax, [ebp+1]
.text:00404AA5                 lea     esi, [esi+0]
.text:00404AA9                 lea     edi, [edi+0]
.text:00404AB0
.text:00404AB0 loc_404AB0:                             ; CODE XREF: sub_4046F0+310↑j
.text:00404AB0                                         ; sub_4046F0+378↑j ...
.text:00404AB0                 mov     ebp, [esp+4Ch+arg_4]
.text:00404AB4                 cmp     [esp+4Ch+var_34], ebp
.text:00404AB8                 jnb     short loc_404AC5
.text:00404ABA                 mov     edx, [esp+4Ch+arg_0]
.text:00404ABE                 mov     ecx, [esp+4Ch+var_34]
.text:00404AC2                 mov     [ecx+edx], bl
.text:00404AC5
.text:00404AC5 loc_404AC5:                             ; CODE XREF: sub_4046F0+3C8↑j
.text:00404AC5                 inc     [esp+4Ch+var_34]
.text:00404AC9                 mov     ebp, eax
.text:00404ACB                 jmp     loc_404780
.text:00404AD0 ; ---------------------------------------------------------------------------
.text:00404AD0
.text:00404AD0 loc_404AD0:                             ; CODE XREF: sub_4046F0+105↑j
.text:00404AD0                                         ; DATA XREF: sub_4046F0:jpt_4047F5↑o
.text:00404AD0                 mov     dl, 61h ; 'a'   ; jumptable 004047F5 case 7
.text:00404AD2                 lea     esi, [esi+0]
.text:00404AD9                 lea     edi, [edi+0]
.text:00404AE0
.text:00404AE0 loc_404AE0:                             ; CODE XREF: sub_4046F0+400↓j
.text:00404AE0                                         ; sub_4046F0+409↓j ...
.text:00404AE0                 cmp     [esp+4Ch+var_21], 0
.text:00404AE5                 lea     eax, [ebp+1]
.text:00404AE8                 jz      short loc_404AB0
.text:00404AEA                 mov     bl, dl
.text:00404AEC                 jmp     short loc_404A88
.text:00404AEE ; ---------------------------------------------------------------------------
.text:00404AEE
.text:00404AEE loc_404AEE:                             ; CODE XREF: sub_4046F0+105↑j
.text:00404AEE                                         ; DATA XREF: sub_4046F0:jpt_4047F5↑o
.text:00404AEE                 mov     dl, 62h ; 'b'   ; jumptable 004047F5 case 8
.text:00404AF0                 jmp     short loc_404AE0
.text:00404AF2 ; ---------------------------------------------------------------------------
.text:00404AF2
.text:00404AF2 loc_404AF2:                             ; CODE XREF: sub_4046F0+105↑j
.text:00404AF2                                         ; DATA XREF: sub_4046F0:jpt_4047F5↑o
.text:00404AF2                 mov     dl, 74h ; 't'   ; jumptable 004047F5 case 9
.text:00404AF4
.text:00404AF4 loc_404AF4:                             ; CODE XREF: sub_4046F0+449↓j
.text:00404AF4                                         ; sub_4046F0+455↓j ...
.text:00404AF4                 cmp     [esp+4Ch+arg_10], 1
.text:00404AF9                 jnz     short loc_404AE0
.text:00404AFB
.text:00404AFB loc_404AFB:                             ; CODE XREF: sub_4046F0+45C↓j
.text:00404AFB                                         ; sub_4046F0+4C1↓j ...
.text:00404AFB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404EC2 cases 91,92,94,96,124
.text:00404B03                 mov     eax, [esp+4Ch+arg_14]
.text:00404B07                 mov     edx, [esp+4Ch+arg_C]
.text:00404B0B                 mov     ecx, [esp+4Ch+Str]
.text:00404B0F                 mov     ebx, [esp+4Ch+arg_4]
.text:00404B13                 mov     [esp+4Ch+var_38], eax ; int
.text:00404B17                 mov     ebp, [esp+4Ch+arg_0]
.text:00404B1B                 mov     [esp+4Ch+State], edx ; int
.text:00404B1F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00404B23                 mov     [esp+4Ch+Type], ebx ; int
.text:00404B27                 mov     [esp+4Ch+C], ebp ; int
.text:00404B2A                 call    sub_4046F0
.text:00404B2F
.text:00404B2F loc_404B2F:                             ; CODE XREF: sub_4046F0+972↓j
.text:00404B2F                 add     esp, 3Ch
.text:00404B32                 pop     ebx
.text:00404B33                 pop     esi
.text:00404B34                 pop     edi
.text:00404B35                 pop     ebp
.text:00404B36                 retn
.text:00404B37 ; ---------------------------------------------------------------------------
.text:00404B37
.text:00404B37 loc_404B37:                             ; CODE XREF: sub_4046F0+105↑j
.text:00404B37                                         ; DATA XREF: sub_4046F0:jpt_4047F5↑o
.text:00404B37                 mov     dl, 6Eh ; 'n'   ; jumptable 004047F5 case 10
.text:00404B39                 jmp     short loc_404AF4
.text:00404B3B ; ---------------------------------------------------------------------------
.text:00404B3B
.text:00404B3B loc_404B3B:                             ; CODE XREF: sub_4046F0+105↑j
.text:00404B3B                                         ; DATA XREF: sub_4046F0:jpt_4047F5↑o
.text:00404B3B                 mov     dl, 76h ; 'v'   ; jumptable 004047F5 case 11
.text:00404B3D                 jmp     short loc_404AE0
.text:00404B3F ; ---------------------------------------------------------------------------
.text:00404B3F
.text:00404B3F loc_404B3F:                             ; CODE XREF: sub_4046F0+105↑j
.text:00404B3F                                         ; DATA XREF: sub_4046F0:jpt_4047F5↑o
.text:00404B3F                 mov     dl, 66h ; 'f'   ; jumptable 004047F5 case 12
.text:00404B41                 jmp     short loc_404AE0
.text:00404B43 ; ---------------------------------------------------------------------------
.text:00404B43
.text:00404B43 loc_404B43:                             ; CODE XREF: sub_4046F0+105↑j
.text:00404B43                                         ; DATA XREF: sub_4046F0:jpt_4047F5↑o
.text:00404B43                 mov     dl, 72h ; 'r'   ; jumptable 004047F5 case 13
.text:00404B45                 jmp     short loc_404AF4
.text:00404B47 ; ---------------------------------------------------------------------------
.text:00404B47
.text:00404B47 loc_404B47:                             ; CODE XREF: sub_4046F0+105↑j
.text:00404B47                                         ; DATA XREF: sub_4046F0:jpt_4047F5↑o
.text:00404B47                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004047F5 case 39
.text:00404B4C                 jz      short loc_404AFB ; jumptable 00404EC2 cases 91,92,94,96,124
.text:00404B4E                 cmp     [esp+4Ch+arg_10], 2
.text:00404B53                 jnz     def_404BF2      ; jumptable 004047F5 cases 37,43-58,65-90,93,95,97-122
.text:00404B53                                         ; jumptable 00404BF2 default case, cases 34-38,42-44,46,48-59
.text:00404B59                 mov     edx, [esp+4Ch+arg_4]
.text:00404B5D                 cmp     [esp+4Ch+var_34], edx
.text:00404B61                 jnb     short loc_404B6F
.text:00404B63                 mov     ecx, [esp+4Ch+arg_0]
.text:00404B67                 mov     edi, [esp+4Ch+var_34]
.text:00404B6B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00404B6F
.text:00404B6F loc_404B6F:                             ; CODE XREF: sub_4046F0+471↑j
.text:00404B6F                 inc     [esp+4Ch+var_34]
.text:00404B73                 mov     eax, [esp+4Ch+arg_4]
.text:00404B77                 cmp     [esp+4Ch+var_34], eax
.text:00404B7B                 jnb     short loc_404B89
.text:00404B7D                 mov     esi, [esp+4Ch+arg_0]
.text:00404B81                 mov     edx, [esp+4Ch+var_34]
.text:00404B85                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00404B89
.text:00404B89 loc_404B89:                             ; CODE XREF: sub_4046F0+48B↑j
.text:00404B89                 inc     [esp+4Ch+var_34]
.text:00404B8D                 mov     edi, [esp+4Ch+arg_4]
.text:00404B91                 cmp     [esp+4Ch+var_34], edi
.text:00404B95                 jnb     short loc_404BA3
.text:00404B97                 mov     ecx, [esp+4Ch+arg_0]
.text:00404B9B                 mov     eax, [esp+4Ch+var_34]
.text:00404B9F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00404BA3
.text:00404BA3 loc_404BA3:                             ; CODE XREF: sub_4046F0+4A5↑j
.text:00404BA3                                         ; sub_4046F0+5C4↓j ...
.text:00404BA3                 inc     [esp+4Ch+var_34]
.text:00404BA7                 jmp     def_404BF2      ; jumptable 004047F5 cases 37,43-58,65-90,93,95,97-122
.text:00404BA7                                         ; jumptable 00404BF2 default case, cases 34-38,42-44,46,48-59
.text:00404BAC ; ---------------------------------------------------------------------------
.text:00404BAC
.text:00404BAC loc_404BAC:                             ; CODE XREF: sub_4046F0+105↑j
.text:00404BAC                                         ; DATA XREF: sub_4046F0:jpt_4047F5↑o
.text:00404BAC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004047F5 case 63
.text:00404BB1                 jz      loc_404AFB      ; jumptable 00404EC2 cases 91,92,94,96,124
.text:00404BB7                 cmp     [esp+4Ch+arg_10], 3
.text:00404BBC                 jnz     def_404BF2      ; jumptable 004047F5 cases 37,43-58,65-90,93,95,97-122
.text:00404BBC                                         ; jumptable 00404BF2 default case, cases 34-38,42-44,46,48-59
.text:00404BC2                 lea     edx, [ebp+2]
.text:00404BC5                 cmp     edx, [esp+4Ch+arg_C]
.text:00404BC9                 jnb     def_404BF2      ; jumptable 004047F5 cases 37,43-58,65-90,93,95,97-122
.text:00404BC9                                         ; jumptable 00404BF2 default case, cases 34-38,42-44,46,48-59
.text:00404BCF                 mov     esi, [esp+4Ch+Str]
.text:00404BD3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00404BD8                 jnz     def_404BF2      ; jumptable 004047F5 cases 37,43-58,65-90,93,95,97-122
.text:00404BD8                                         ; jumptable 00404BF2 default case, cases 34-38,42-44,46,48-59
.text:00404BDE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00404BE3                 movsx   eax, cl
.text:00404BE6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00404BE9                 cmp     eax, 1Dh
.text:00404BEC                 ja      def_404BF2      ; jumptable 004047F5 cases 37,43-58,65-90,93,95,97-122
.text:00404BEC                                         ; jumptable 00404BF2 default case, cases 34-38,42-44,46,48-59
.text:00404BF2                 jmp     ds:jpt_404BF2[eax*4] ; switch jump
.text:00404BF2 ; ---------------------------------------------------------------------------
.text:00404BF9                 align 4
.text:00404BFC jpt_404BF2      dd offset loc_404C74    ; DATA XREF: sub_4046F0+502↑r
.text:00404BFC                 dd offset def_404BF2    ; jump table for switch statement
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset loc_404C74
.text:00404BFC                 dd offset loc_404C74
.text:00404BFC                 dd offset loc_404C74
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset loc_404C74
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset loc_404C74
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset def_404BF2
.text:00404BFC                 dd offset loc_404C74
.text:00404BFC                 dd offset loc_404C74
.text:00404BFC                 dd offset loc_404C74
.text:00404C74 ; ---------------------------------------------------------------------------
.text:00404C74
.text:00404C74 loc_404C74:                             ; CODE XREF: sub_4046F0+502↑j
.text:00404C74                                         ; DATA XREF: sub_4046F0:jpt_404BF2↑o
.text:00404C74                 mov     ebp, edx        ; jumptable 00404BF2 cases 33,39-41,45,47,60-62
.text:00404C76                 mov     bl, cl
.text:00404C78                 mov     edx, [esp+4Ch+arg_4]
.text:00404C7C                 cmp     [esp+4Ch+var_34], edx
.text:00404C80                 jnb     short loc_404C8E
.text:00404C82                 mov     ecx, [esp+4Ch+arg_0]
.text:00404C86                 mov     edi, [esp+4Ch+var_34]
.text:00404C8A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00404C8E
.text:00404C8E loc_404C8E:                             ; CODE XREF: sub_4046F0+590↑j
.text:00404C8E                 inc     [esp+4Ch+var_34]
.text:00404C92                 mov     eax, [esp+4Ch+arg_4]
.text:00404C96                 cmp     [esp+4Ch+var_34], eax
.text:00404C9A                 jnb     short loc_404CA8
.text:00404C9C                 mov     edx, [esp+4Ch+arg_0]
.text:00404CA0                 mov     esi, [esp+4Ch+var_34]
.text:00404CA4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00404CA8
.text:00404CA8 loc_404CA8:                             ; CODE XREF: sub_4046F0+5AA↑j
.text:00404CA8                 inc     [esp+4Ch+var_34]
.text:00404CAC                 mov     edi, [esp+4Ch+arg_4]
.text:00404CB0                 cmp     [esp+4Ch+var_34], edi
.text:00404CB4                 jnb     loc_404BA3
.text:00404CBA                 mov     eax, [esp+4Ch+arg_0]
.text:00404CBE                 mov     ecx, [esp+4Ch+var_34]
.text:00404CC2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00404CC6                 jmp     loc_404BA3
.text:00404CC6 ; ---------------------------------------------------------------------------
.text:00404CCB                 align 10h
.text:00404CD0
.text:00404CD0 def_4047F5:                             ; CODE XREF: sub_4046F0+FF↑j
.text:00404CD0                                         ; sub_4046F0+105↑j
.text:00404CD0                                         ; DATA XREF: ...
.text:00404CD0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004047F5 default case, cases 1-6,14-31,64
.text:00404CD5                 jz      loc_404E00
.text:00404CDB                 mov     [esp+4Ch+var_28], 1
.text:00404CE3                 mov     esi, ds:__mb_cur_max
.text:00404CE9                 movzx   edx, bl
.text:00404CEC                 cmp     dword ptr [esi], 1
.text:00404CEF                 jz      loc_404DE4
.text:00404CF5                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404CFD                 mov     [esp+4Ch+C], edx ; C
.text:00404D00                 call    _isctype
.text:00404D05
.text:00404D05 loc_404D05:                             ; CODE XREF: sub_4046F0+705↓j
.text:00404D05                 test    eax, eax
.text:00404D07                 setnz   [esp+4Ch+var_29]
.text:00404D0C
.text:00404D0C loc_404D0C:                             ; CODE XREF: sub_4046F0+7A5↓j
.text:00404D0C                 cmp     [esp+4Ch+var_21], 0
.text:00404D11                 lea     eax, [ebp+1]
.text:00404D14                 jz      loc_404AB0
.text:00404D1A                 cmp     [esp+4Ch+var_29], 0
.text:00404D1F                 jnz     def_404BF2      ; jumptable 004047F5 cases 37,43-58,65-90,93,95,97-122
.text:00404D1F                                         ; jumptable 00404BF2 default case, cases 34-38,42-44,46,48-59
.text:00404D25
.text:00404D25 loc_404D25:                             ; CODE XREF: sub_4046F0+7AB↓j
.text:00404D25                 mov     eax, [esp+4Ch+var_28]
.text:00404D29                 lea     edx, [eax+ebp]
.text:00404D2C                 lea     esi, [esi+0]
.text:00404D30
.text:00404D30 loc_404D30:                             ; CODE XREF: sub_4046F0+6EF↓j
.text:00404D30                 cmp     [esp+4Ch+var_21], 0
.text:00404D35                 jz      short loc_404DB0
.text:00404D37                 cmp     [esp+4Ch+var_29], 0
.text:00404D3C                 jnz     short loc_404DB0
.text:00404D3E                 mov     edi, [esp+4Ch+arg_4]
.text:00404D42                 cmp     [esp+4Ch+var_34], edi
.text:00404D46                 jnb     short loc_404D54
.text:00404D48                 mov     esi, [esp+4Ch+arg_0]
.text:00404D4C                 mov     eax, [esp+4Ch+var_34]
.text:00404D50                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00404D54
.text:00404D54 loc_404D54:                             ; CODE XREF: sub_4046F0+656↑j
.text:00404D54                 inc     [esp+4Ch+var_34]
.text:00404D58                 mov     ecx, [esp+4Ch+arg_4]
.text:00404D5C                 cmp     [esp+4Ch+var_34], ecx
.text:00404D60                 jnb     short loc_404D75
.text:00404D62                 mov     cl, bl
.text:00404D64                 mov     esi, [esp+4Ch+arg_0]
.text:00404D68                 mov     edi, [esp+4Ch+var_34]
.text:00404D6C                 shr     cl, 6
.text:00404D6F                 add     cl, 30h ; '0'
.text:00404D72                 mov     [edi+esi], cl
.text:00404D75
.text:00404D75 loc_404D75:                             ; CODE XREF: sub_4046F0+670↑j
.text:00404D75                 inc     [esp+4Ch+var_34]
.text:00404D79                 mov     edi, [esp+4Ch+arg_4]
.text:00404D7D                 cmp     [esp+4Ch+var_34], edi
.text:00404D81                 jnb     short loc_404D99
.text:00404D83                 mov     cl, bl
.text:00404D85                 mov     esi, [esp+4Ch+arg_0]
.text:00404D89                 shr     cl, 3
.text:00404D8C                 mov     edi, [esp+4Ch+var_34]
.text:00404D90                 and     cl, 7
.text:00404D93                 add     cl, 30h ; '0'
.text:00404D96                 mov     [edi+esi], cl
.text:00404D99
.text:00404D99 loc_404D99:                             ; CODE XREF: sub_4046F0+691↑j
.text:00404D99                 inc     [esp+4Ch+var_34]
.text:00404D9D                 and     bl, 7
.text:00404DA0                 add     bl, 30h ; '0'
.text:00404DA3                 lea     esi, [esi+0]
.text:00404DA9                 lea     edi, [edi+0]
.text:00404DB0
.text:00404DB0 loc_404DB0:                             ; CODE XREF: sub_4046F0+645↑j
.text:00404DB0                                         ; sub_4046F0+64C↑j
.text:00404DB0                 lea     eax, [ebp+1]
.text:00404DB3                 cmp     edx, eax
.text:00404DB5                 jbe     loc_404AB0
.text:00404DBB                 mov     ebp, [esp+4Ch+arg_4]
.text:00404DBF                 cmp     [esp+4Ch+var_34], ebp
.text:00404DC3                 jnb     short loc_404DD0
.text:00404DC5                 mov     ecx, [esp+4Ch+arg_0]
.text:00404DC9                 mov     edi, [esp+4Ch+var_34]
.text:00404DCD                 mov     [edi+ecx], bl
.text:00404DD0
.text:00404DD0 loc_404DD0:                             ; CODE XREF: sub_4046F0+6D3↑j
.text:00404DD0                 inc     [esp+4Ch+var_34]
.text:00404DD4                 mov     ebp, eax
.text:00404DD6                 mov     eax, [esp+4Ch+Str]
.text:00404DDA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00404DDF                 jmp     loc_404D30
.text:00404DE4 ; ---------------------------------------------------------------------------
.text:00404DE4
.text:00404DE4 loc_404DE4:                             ; CODE XREF: sub_4046F0+5FF↑j
.text:00404DE4                 mov     ecx, ds:_pctype
.text:00404DEA                 mov     edi, [ecx]
.text:00404DEC                 movzx   eax, word ptr [edi+edx*2]
.text:00404DF0                 and     eax, 157h
.text:00404DF5                 jmp     loc_404D05
.text:00404DF5 ; ---------------------------------------------------------------------------
.text:00404DFA                 align 10h
.text:00404E00
.text:00404E00 loc_404E00:                             ; CODE XREF: sub_4046F0+5E5↑j
.text:00404E00                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404E05                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00404E0D                 mov     [esp+4Ch+var_28], 0
.text:00404E15                 mov     [esp+4Ch+var_29], 1
.text:00404E1A                 jz      loc_404FAC
.text:00404E20
.text:00404E20 loc_404E20:                             ; CODE XREF: sub_4046F0+8CC↓j
.text:00404E20                 mov     ecx, [esp+4Ch+arg_C]
.text:00404E24                 lea     edx, [esp+4Ch+var_18]
.text:00404E28                 mov     edi, [esp+4Ch+Str]
.text:00404E2C                 mov     [esp+4Ch+State], edx ; State
.text:00404E30                 lea     esi, [esp+4Ch+var_18._State]
.text:00404E34                 sub     ecx, ebp
.text:00404E36                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00404E3A                 add     edi, ebp
.text:00404E3C                 mov     [esp+4Ch+var_30], edi
.text:00404E40                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00404E44                 mov     [esp+4Ch+C], esi ; DstCh
.text:00404E47                 call    mbrtowc
.text:00404E4C                 test    eax, eax
.text:00404E4E                 mov     edi, eax
.text:00404E50                 jz      short loc_404E90
.text:00404E52                 cmp     eax, 0FFFFFFFFh
.text:00404E55                 jz      loc_404FA2
.text:00404E5B                 cmp     eax, 0FFFFFFFEh
.text:00404E5E                 jz      loc_404F62
.text:00404E64                 cmp     [esp+4Ch+arg_10], 1
.text:00404E69                 jz      short loc_404EA0
.text:00404E6B
.text:00404E6B loc_404E6B:                             ; CODE XREF: sub_4046F0+7B9↓j
.text:00404E6B                                         ; sub_4046F0+86D↓j
.text:00404E6B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00404E70                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404E78                 mov     [esp+4Ch+C], ecx ; C
.text:00404E7B                 call    iswctype
.text:00404E80                 test    eax, eax
.text:00404E82                 jnz     short loc_404E89
.text:00404E84                 mov     [esp+4Ch+var_29], 0
.text:00404E89
.text:00404E89 loc_404E89:                             ; CODE XREF: sub_4046F0+792↑j
.text:00404E89                 mov     [esp+4Ch+var_28], edi
.text:00404E8D                 lea     esi, [esi+0]
.text:00404E90
.text:00404E90 loc_404E90:                             ; CODE XREF: sub_4046F0+760↑j
.text:00404E90                                         ; sub_4046F0+87B↓j ...
.text:00404E90                 cmp     [esp+4Ch+var_28], 1
.text:00404E95                 jbe     loc_404D0C
.text:00404E9B                 jmp     loc_404D25
.text:00404EA0 ; ---------------------------------------------------------------------------
.text:00404EA0
.text:00404EA0 loc_404EA0:                             ; CODE XREF: sub_4046F0+779↑j
.text:00404EA0                 cmp     [esp+4Ch+arg_10], eax
.text:00404EA4                 mov     edx, 1
.text:00404EA9                 jnb     short loc_404E6B
.text:00404EAB
.text:00404EAB loc_404EAB:                             ; CODE XREF: sub_4046F0+867↓j
.text:00404EAB                 mov     ecx, [esp+4Ch+Str]
.text:00404EAF                 lea     esi, [edx+ebp]
.text:00404EB2                 movsx   eax, byte ptr [esi+ecx]
.text:00404EB6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00404EB9                 cmp     eax, 21h
.text:00404EBC                 ja      def_404EC2      ; jumptable 00404EC2 default case, cases 93,95,97-123
.text:00404EC2                 jmp     ds:jpt_404EC2[eax*4] ; switch jump
.text:00404EC2 ; ---------------------------------------------------------------------------
.text:00404EC9                 align 4
.text:00404ECC jpt_404EC2      dd offset loc_404AFB    ; DATA XREF: sub_4046F0+7D2↑r
.text:00404ECC                 dd offset loc_404AFB    ; jump table for switch statement
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset loc_404AFB
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset loc_404AFB
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset def_404EC2
.text:00404ECC                 dd offset loc_404AFB
.text:00404F54 ; ---------------------------------------------------------------------------
.text:00404F54
.text:00404F54 def_404EC2:                             ; CODE XREF: sub_4046F0+7CC↑j
.text:00404F54                                         ; sub_4046F0+7D2↑j
.text:00404F54                                         ; DATA XREF: ...
.text:00404F54                 inc     edx             ; jumptable 00404EC2 default case, cases 93,95,97-123
.text:00404F55                 cmp     edx, edi
.text:00404F57                 jb      loc_404EAB
.text:00404F5D                 jmp     loc_404E6B
.text:00404F62 ; ---------------------------------------------------------------------------
.text:00404F62
.text:00404F62 loc_404F62:                             ; CODE XREF: sub_4046F0+76E↑j
.text:00404F62                 cmp     ebp, [esp+4Ch+arg_C]
.text:00404F66                 mov     [esp+4Ch+var_29], 0
.text:00404F6B                 jnb     loc_404E90
.text:00404F71                 mov     eax, [esp+4Ch+var_30]
.text:00404F75                 cmp     byte ptr [eax], 0
.text:00404F78                 jz      loc_404E90
.text:00404F7E
.text:00404F7E loc_404F7E:                             ; CODE XREF: sub_4046F0+8AB↓j
.text:00404F7E                 inc     [esp+4Ch+var_28]
.text:00404F82                 mov     esi, [esp+4Ch+var_28]
.text:00404F86                 lea     eax, [esi+ebp]
.text:00404F89                 cmp     eax, [esp+4Ch+arg_C]
.text:00404F8D                 jnb     loc_404E90
.text:00404F93                 mov     edi, [esp+4Ch+Str]
.text:00404F97                 cmp     byte ptr [eax+edi], 0
.text:00404F9B                 jnz     short loc_404F7E
.text:00404F9D                 jmp     loc_404E90
.text:00404FA2 ; ---------------------------------------------------------------------------
.text:00404FA2
.text:00404FA2 loc_404FA2:                             ; CODE XREF: sub_4046F0+765↑j
.text:00404FA2                 mov     [esp+4Ch+var_29], 0
.text:00404FA7                 jmp     loc_404E90
.text:00404FAC ; ---------------------------------------------------------------------------
.text:00404FAC
.text:00404FAC loc_404FAC:                             ; CODE XREF: sub_4046F0+72A↑j
.text:00404FAC                 mov     edx, [esp+4Ch+Str]
.text:00404FB0                 mov     [esp+4Ch+C], edx ; Str
.text:00404FB3                 call    strlen
.text:00404FB8                 mov     [esp+4Ch+arg_C], eax
.text:00404FBC                 jmp     loc_404E20
.text:00404FC1 ; ---------------------------------------------------------------------------
.text:00404FC1
.text:00404FC1 loc_404FC1:                             ; CODE XREF: sub_4046F0+105↑j
.text:00404FC1                                         ; DATA XREF: sub_4046F0:jpt_4047F5↑o
.text:00404FC1                 mov     dl, bl          ; jumptable 004047F5 case 92
.text:00404FC3                 jmp     loc_404AF4
.text:00404FC8 ; ---------------------------------------------------------------------------
.text:00404FC8
.text:00404FC8 loc_404FC8:                             ; CODE XREF: sub_4046F0+105↑j
.text:00404FC8                                         ; sub_4046F0+902↓j
.text:00404FC8                                         ; DATA XREF: ...
.text:00404FC8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004047F5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404FCD                 jnz     def_404BF2      ; jumptable 004047F5 cases 37,43-58,65-90,93,95,97-122
.text:00404FCD                                         ; jumptable 00404BF2 default case, cases 34-38,42-44,46,48-59
.text:00404FD3                 jmp     loc_404AFB      ; jumptable 00404EC2 cases 91,92,94,96,124
.text:00404FD8 ; ---------------------------------------------------------------------------
.text:00404FD8
.text:00404FD8 loc_404FD8:                             ; CODE XREF: sub_4046F0+105↑j
.text:00404FD8                                         ; DATA XREF: sub_4046F0:jpt_4047F5↑o
.text:00404FD8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004047F5 cases 123,125
.text:00404FDD                 jz      short loc_404FF4
.text:00404FDF                 cmp     [esp+4Ch+arg_C], 1
.text:00404FE4
.text:00404FE4 loc_404FE4:                             ; CODE XREF: sub_4046F0+90C↓j
.text:00404FE4                 jnz     def_404BF2      ; jumptable 004047F5 cases 37,43-58,65-90,93,95,97-122
.text:00404FE4                                         ; jumptable 00404BF2 default case, cases 34-38,42-44,46,48-59
.text:00404FEA
.text:00404FEA loc_404FEA:                             ; CODE XREF: sub_4046F0+105↑j
.text:00404FEA                                         ; DATA XREF: sub_4046F0:jpt_4047F5↑o
.text:00404FEA                 test    ebp, ebp        ; jumptable 004047F5 cases 35,126
.text:00404FEC                 jnz     def_404BF2      ; jumptable 004047F5 cases 37,43-58,65-90,93,95,97-122
.text:00404FEC                                         ; jumptable 00404BF2 default case, cases 34-38,42-44,46,48-59
.text:00404FF2                 jmp     short loc_404FC8 ; jumptable 004047F5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404FF4 ; ---------------------------------------------------------------------------
.text:00404FF4
.text:00404FF4 loc_404FF4:                             ; CODE XREF: sub_4046F0+8ED↑j
.text:00404FF4                 mov     esi, [esp+4Ch+Str]
.text:00404FF8                 cmp     byte ptr [esi+1], 0
.text:00404FFC                 jmp     short loc_404FE4
.text:00404FFE ; ---------------------------------------------------------------------------
.text:00404FFE
.text:00404FFE loc_404FFE:                             ; CODE XREF: sub_4046F0:loc_40478F↑j
.text:00404FFE                 test    ebp, ebp
.text:00405000                 jnz     short loc_40500D
.text:00405002                 cmp     [esp+4Ch+arg_10], 1
.text:00405007                 jz      loc_404AFB      ; jumptable 00404EC2 cases 91,92,94,96,124
.text:0040500D
.text:0040500D loc_40500D:                             ; CODE XREF: sub_4046F0+910↑j
.text:0040500D                 mov     esi, [esp+4Ch+var_1C]
.text:00405011                 test    esi, esi
.text:00405013                 jz      short loc_405048
.text:00405015                 mov     edi, [esp+4Ch+var_1C]
.text:00405019                 movzx   eax, byte ptr [edi]
.text:0040501C                 test    al, al
.text:0040501E                 jz      short loc_405048
.text:00405020
.text:00405020 loc_405020:                             ; CODE XREF: sub_4046F0+956↓j
.text:00405020                 mov     ebp, [esp+4Ch+arg_4]
.text:00405024                 cmp     [esp+4Ch+var_34], ebp
.text:00405028                 jnb     short loc_405035
.text:0040502A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040502E                 mov     ebx, [esp+4Ch+var_34]
.text:00405032                 mov     [ebx+ecx], al
.text:00405035
.text:00405035 loc_405035:                             ; CODE XREF: sub_4046F0+938↑j
.text:00405035                 inc     [esp+4Ch+var_1C]
.text:00405039                 inc     [esp+4Ch+var_34]
.text:0040503D                 mov     edx, [esp+4Ch+var_1C]
.text:00405041                 movzx   eax, byte ptr [edx]
.text:00405044                 test    al, al
.text:00405046                 jnz     short loc_405020
.text:00405048
.text:00405048 loc_405048:                             ; CODE XREF: sub_4046F0+923↑j
.text:00405048                                         ; sub_4046F0+92E↑j
.text:00405048                 mov     eax, [esp+4Ch+arg_4]
.text:0040504C                 cmp     [esp+4Ch+var_34], eax
.text:00405050                 jnb     short loc_40505E
.text:00405052                 mov     edi, [esp+4Ch+arg_0]
.text:00405056                 mov     esi, [esp+4Ch+var_34]
.text:0040505A                 mov     byte ptr [esi+edi], 0
.text:0040505E
.text:0040505E loc_40505E:                             ; CODE XREF: sub_4046F0+960↑j
.text:0040505E                 mov     eax, [esp+4Ch+var_34]
.text:00405062                 jmp     loc_404B2F
.text:00405067 ; ---------------------------------------------------------------------------
.text:00405067
.text:00405067 loc_405067:                             ; CODE XREF: sub_4046F0+95↑j
.text:00405067                 mov     ebx, [esp+4Ch+Str]
.text:0040506B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00405070                 jmp     loc_40478F
.text:00405075 ; ---------------------------------------------------------------------------
.text:00405075
.text:00405075 loc_405075:                             ; CODE XREF: sub_4046F0+3D↑j
.text:00405075                                         ; DATA XREF: sub_4046F0:jpt_40472D↑o
.text:00405075                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040472D case 2
.text:00405079                 cmp     [esp+4Ch+var_34], edx
.text:0040507D                 jnb     short loc_405086
.text:0040507F                 mov     ecx, [esp+4Ch+arg_0]
.text:00405083                 mov     byte ptr [ecx], 27h ; '''
.text:00405086
.text:00405086 loc_405086:                             ; CODE XREF: sub_4046F0+98D↑j
.text:00405086                 mov     [esp+4Ch+var_34], 1
.text:0040508E                 mov     [esp+4Ch+var_1C], 4046DEh
.text:00405096                 jmp     loc_404776
.text:0040509B ; ---------------------------------------------------------------------------
.text:0040509B
.text:0040509B loc_40509B:                             ; CODE XREF: sub_4046F0+3D↑j
.text:0040509B                                         ; DATA XREF: sub_4046F0:jpt_40472D↑o
.text:0040509B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040472D case 4
.text:004050A0                 jmp     def_40472D      ; jumptable 0040472D default case, cases 0,1
.text:004050A5 ; ---------------------------------------------------------------------------
.text:004050A5
.text:004050A5 loc_4050A5:                             ; CODE XREF: sub_4046F0+3D↑j
.text:004050A5                                         ; DATA XREF: sub_4046F0:jpt_40472D↑o
.text:004050A5                 mov     [esp+4Ch+C], 4046E0h ; jumptable 0040472D cases 5,6
.text:004050AC                 call    ds:libintl_gettext
.text:004050B2                 cmp     eax, 4046E0h
.text:004050B7                 mov     edi, eax
.text:004050B9                 jz      short loc_405130
.text:004050BB
.text:004050BB loc_4050BB:                             ; CODE XREF: sub_4046F0+A45↓j
.text:004050BB                                         ; sub_4046F0+A4C↓j
.text:004050BB                 mov     [esp+4Ch+C], 4046DEh
.text:004050C2                 call    ds:libintl_gettext
.text:004050C8                 cmp     eax, 4046DEh
.text:004050CD                 mov     edx, eax
.text:004050CF                 jz      short loc_405122
.text:004050D1
.text:004050D1 loc_4050D1:                             ; CODE XREF: sub_4046F0+A37↓j
.text:004050D1                                         ; sub_4046F0+A3E↓j
.text:004050D1                 mov     [esp+4Ch+var_1C], edi
.text:004050D5                 cmp     byte ptr [edi], 0
.text:004050D8                 jz      short loc_405108
.text:004050DA
.text:004050DA loc_4050DA:                             ; CODE XREF: sub_4046F0+A16↓j
.text:004050DA                 mov     ecx, [esp+4Ch+arg_4]
.text:004050DE                 cmp     [esp+4Ch+var_34], ecx
.text:004050E2                 jnb     short loc_4050F7
.text:004050E4                 mov     ebp, [esp+4Ch+var_1C]
.text:004050E8                 mov     edi, [esp+4Ch+arg_0]
.text:004050EC                 mov     esi, [esp+4Ch+var_34]
.text:004050F0                 movzx   ebx, byte ptr [ebp+0]
.text:004050F4                 mov     [esi+edi], bl
.text:004050F7
.text:004050F7 loc_4050F7:                             ; CODE XREF: sub_4046F0+9F2↑j
.text:004050F7                 inc     [esp+4Ch+var_1C]
.text:004050FB                 inc     [esp+4Ch+var_34]
.text:004050FF                 mov     eax, [esp+4Ch+var_1C]
.text:00405103                 cmp     byte ptr [eax], 0
.text:00405106                 jnz     short loc_4050DA
.text:00405108
.text:00405108 loc_405108:                             ; CODE XREF: sub_4046F0+9E8↑j
.text:00405108                 mov     [esp+4Ch+var_21], 1
.text:0040510D                 mov     [esp+4Ch+var_1C], edx
.text:00405111                 mov     [esp+4Ch+C], edx ; Str
.text:00405114                 call    strlen
.text:00405119                 mov     [esp+4Ch+var_20], eax
.text:0040511D                 jmp     def_40472D      ; jumptable 0040472D default case, cases 0,1
.text:00405122 ; ---------------------------------------------------------------------------
.text:00405122
.text:00405122 loc_405122:                             ; CODE XREF: sub_4046F0+9DF↑j
.text:00405122                 cmp     [esp+4Ch+arg_10], 6
.text:00405127                 jnz     short loc_4050D1
.text:00405129                 mov     edx, offset asc_4046DC ; "\"'`"
.text:0040512E                 jmp     short loc_4050D1
.text:00405130 ; ---------------------------------------------------------------------------
.text:00405130
.text:00405130 loc_405130:                             ; CODE XREF: sub_4046F0+9C9↑j
.text:00405130                 cmp     [esp+4Ch+arg_10], 6
.text:00405135                 jnz     short loc_4050BB
.text:00405137                 mov     edi, offset asc_4046DC ; "\"'`"
.text:0040513C                 jmp     loc_4050BB
.text:0040513C sub_4046F0      endp
.text:0040513C
.text:00405141 ; ---------------------------------------------------------------------------
.text:00405141                 jmp     short loc_405150
.text:00405141 ; ---------------------------------------------------------------------------
.text:00405143                 align 10h
.text:00405150
.text:00405150 loc_405150:                             ; CODE XREF: .text:00405141↑j
.text:00405150                 sub     esp, 0Ch
.text:00405153                 mov     [esp+4], ebx
.text:00405157                 mov     [esp+8], esi
.text:0040515B                 call    _errno
.text:00405160                 mov     esi, [eax]
.text:00405162                 mov     dword ptr [esp], 24h ; '$'
.text:00405169                 call    sub_4042F0
.text:0040516E                 mov     edx, [esp+10h]
.text:00405172                 mov     ebx, eax
.text:00405174                 test    edx, edx
.text:00405176                 jz      short loc_4051C1
.text:00405178
.text:00405178 loc_405178:                             ; CODE XREF: .text:004051C6↓j
.text:00405178                 mov     ecx, [edx]
.text:0040517A                 mov     [ebx], ecx
.text:0040517C                 mov     ecx, [edx+4]
.text:0040517F                 mov     [ebx+4], ecx
.text:00405182                 mov     ecx, [edx+8]
.text:00405185                 mov     [ebx+8], ecx
.text:00405188                 mov     ecx, [edx+0Ch]
.text:0040518B                 mov     [ebx+0Ch], ecx
.text:0040518E                 mov     ecx, [edx+10h]
.text:00405191                 mov     [ebx+10h], ecx
.text:00405194                 mov     ecx, [edx+14h]
.text:00405197                 mov     [ebx+14h], ecx
.text:0040519A                 mov     ecx, [edx+18h]
.text:0040519D                 mov     [ebx+18h], ecx
.text:004051A0                 mov     ecx, [edx+1Ch]
.text:004051A3                 mov     [ebx+1Ch], ecx
.text:004051A6                 mov     ecx, [edx+20h]
.text:004051A9                 mov     [ebx+20h], ecx
.text:004051AC                 call    _errno
.text:004051B1                 mov     [eax], esi
.text:004051B3                 mov     esi, [esp+8]
.text:004051B7                 mov     eax, ebx
.text:004051B9                 mov     ebx, [esp+4]
.text:004051BD                 add     esp, 0Ch
.text:004051C0                 retn
.text:004051C1 ; ---------------------------------------------------------------------------
.text:004051C1
.text:004051C1 loc_4051C1:                             ; CODE XREF: .text:00405176↑j
.text:004051C1                 mov     edx, offset dword_419200
.text:004051C6                 jmp     short loc_405178
.text:004051C6 ; ---------------------------------------------------------------------------
.text:004051C8                 align 10h
.text:004051D0                 mov     eax, [esp+4]
.text:004051D4                 test    eax, eax
.text:004051D6                 jz      short loc_4051E0
.text:004051D8
.text:004051D8 loc_4051D8:                             ; CODE XREF: .text:004051E5↓j
.text:004051D8                 mov     eax, [eax]
.text:004051DA                 retn
.text:004051DA ; ---------------------------------------------------------------------------
.text:004051DB                 align 10h
.text:004051E0
.text:004051E0 loc_4051E0:                             ; CODE XREF: .text:004051D6↑j
.text:004051E0                 mov     eax, offset dword_419200
.text:004051E5                 jmp     short loc_4051D8
.text:004051E5 ; ---------------------------------------------------------------------------
.text:004051E7                 align 10h
.text:004051F0                 mov     edx, [esp+4]
.text:004051F4                 test    edx, edx
.text:004051F6                 jz      short loc_405200
.text:004051F8
.text:004051F8 loc_4051F8:                             ; CODE XREF: .text:00405205↓j
.text:004051F8                 mov     ecx, [esp+8]
.text:004051FC                 mov     [edx], ecx
.text:004051FE                 retn
.text:004051FE ; ---------------------------------------------------------------------------
.text:004051FF                 align 10h
.text:00405200
.text:00405200 loc_405200:                             ; CODE XREF: .text:004051F6↑j
.text:00405200                 mov     edx, offset dword_419200
.text:00405205                 jmp     short loc_4051F8
.text:00405205 ; ---------------------------------------------------------------------------
.text:00405207                 align 10h
.text:00405210                 sub     esp, 8
.text:00405213                 mov     eax, [esp+0Ch]
.text:00405217                 movzx   ecx, byte ptr [esp+10h]
.text:0040521C                 mov     [esp], ebx
.text:0040521F                 mov     ebx, [esp+14h]
.text:00405223                 mov     [esp+4], esi
.text:00405227                 mov     dl, cl
.text:00405229                 shr     dl, 5
.text:0040522C                 movzx   edx, dl
.text:0040522F                 shl     edx, 2
.text:00405232                 test    eax, eax
.text:00405234                 lea     esi, [edx+eax+4]
.text:00405238                 jz      short loc_405260
.text:0040523A
.text:0040523A loc_40523A:                             ; CODE XREF: .text:00405266↓j
.text:0040523A                 mov     edx, [esi]
.text:0040523C                 and     ecx, 1Fh
.text:0040523F                 and     ebx, 1
.text:00405242                 mov     eax, edx
.text:00405244                 shr     eax, cl
.text:00405246                 and     eax, 1
.text:00405249                 xor     ebx, eax
.text:0040524B                 shl     ebx, cl
.text:0040524D                 xor     edx, ebx
.text:0040524F                 mov     [esi], edx
.text:00405251                 mov     ebx, [esp]
.text:00405254                 mov     esi, [esp+4]
.text:00405258                 add     esp, 8
.text:0040525B                 retn
.text:0040525B ; ---------------------------------------------------------------------------
.text:0040525C                 align 10h
.text:00405260
.text:00405260 loc_405260:                             ; CODE XREF: .text:00405238↑j
.text:00405260                 lea     esi, dword_419204[edx]
.text:00405266                 jmp     short loc_40523A
.text:00405266 ; ---------------------------------------------------------------------------
.text:00405268                 align 10h
.text:00405270                 sub     esp, 2Ch
.text:00405273                 mov     [esp+24h], ebx
.text:00405277                 mov     ebx, [esp+40h]
.text:0040527B                 mov     [esp+28h], esi
.text:0040527F                 test    ebx, ebx
.text:00405281                 jz      short loc_4052D0
.text:00405283
.text:00405283 loc_405283:                             ; CODE XREF: .text:004052D5↓j
.text:00405283                 call    _errno
.text:00405288                 mov     esi, [eax]
.text:0040528A                 mov     [esp+14h], ebx
.text:0040528E                 mov     edx, [ebx]
.text:00405290                 mov     ecx, [esp+38h]
.text:00405294                 mov     ebx, [esp+3Ch]
.text:00405298                 mov     [esp+10h], edx
.text:0040529C                 mov     edx, [esp+34h]
.text:004052A0                 mov     [esp+0Ch], ebx
.text:004052A4                 mov     [esp+8], ecx
.text:004052A8                 mov     [esp+4], edx
.text:004052AC                 mov     edx, [esp+30h]
.text:004052B0                 mov     [esp], edx
.text:004052B3                 call    sub_4046F0
.text:004052B8                 mov     ebx, eax
.text:004052BA                 call    _errno
.text:004052BF                 mov     [eax], esi
.text:004052C1                 mov     esi, [esp+28h]
.text:004052C5                 mov     eax, ebx
.text:004052C7                 mov     ebx, [esp+24h]
.text:004052CB                 add     esp, 2Ch
.text:004052CE                 retn
.text:004052CE ; ---------------------------------------------------------------------------
.text:004052CF                 align 10h
.text:004052D0
.text:004052D0 loc_4052D0:                             ; CODE XREF: .text:00405281↑j
.text:004052D0                 mov     ebx, offset dword_419200
.text:004052D5                 jmp     short loc_405283
.text:004052D5 ; ---------------------------------------------------------------------------
.text:004052D7                 align 10h
.text:004052E0                 push    ebp
.text:004052E1                 push    edi
.text:004052E2                 push    esi
.text:004052E3                 push    ebx
.text:004052E4                 sub     esp, 2Ch
.text:004052E7                 mov     ebp, [esp+48h]
.text:004052EB                 call    _errno
.text:004052F0                 mov     edx, [eax]
.text:004052F2                 test    ebp, ebp
.text:004052F4                 mov     ebx, ebp
.text:004052F6                 mov     [esp+28h], edx
.text:004052FA                 jz      loc_4053B0
.text:00405300
.text:00405300 loc_405300:                             ; CODE XREF: .text:004053B5↓j
.text:00405300                 call    _errno
.text:00405305                 mov     edi, [eax]
.text:00405307                 mov     esi, ebp
.text:00405309                 mov     [esp+14h], ebx
.text:0040530D                 mov     ecx, [ebx]
.text:0040530F                 mov     dword ptr [esp], 0
.text:00405316                 mov     edx, [esp+44h]
.text:0040531A                 mov     dword ptr [esp+4], 0
.text:00405322                 mov     eax, [esp+40h]
.text:00405326                 mov     [esp+10h], ecx
.text:0040532A                 mov     [esp+0Ch], edx
.text:0040532E                 mov     [esp+8], eax
.text:00405332                 call    sub_4046F0
.text:00405337                 mov     ebx, eax
.text:00405339                 call    _errno
.text:0040533E                 mov     [eax], edi
.text:00405340                 lea     edi, [ebx+1]
.text:00405343                 mov     [esp], edi
.text:00405346                 call    sub_4042F0
.text:0040534B                 mov     [esp+24h], eax
.text:0040534F                 test    ebp, ebp
.text:00405351                 jz      short loc_4053A2
.text:00405353
.text:00405353 loc_405353:                             ; CODE XREF: .text:004053A7↓j
.text:00405353                 call    _errno
.text:00405358                 mov     ebp, [eax]
.text:0040535A                 mov     [esp+14h], esi
.text:0040535E                 mov     ecx, [esi]
.text:00405360                 mov     [esp+4], edi
.text:00405364                 mov     edx, [esp+44h]
.text:00405368                 mov     esi, [esp+24h]
.text:0040536C                 mov     [esp+10h], ecx
.text:00405370                 mov     eax, [esp+40h]
.text:00405374                 mov     [esp+0Ch], edx
.text:00405378                 mov     [esp], esi
.text:0040537B                 mov     [esp+8], eax
.text:0040537F                 call    sub_4046F0
.text:00405384                 call    _errno
.text:00405389                 mov     [eax], ebp
.text:0040538B                 call    _errno
.text:00405390                 mov     ebx, [esp+28h]
.text:00405394                 mov     [eax], ebx
.text:00405396                 mov     eax, [esp+24h]
.text:0040539A                 add     esp, 2Ch
.text:0040539D                 pop     ebx
.text:0040539E                 pop     esi
.text:0040539F                 pop     edi
.text:004053A0                 pop     ebp
.text:004053A1                 retn
.text:004053A2 ; ---------------------------------------------------------------------------
.text:004053A2
.text:004053A2 loc_4053A2:                             ; CODE XREF: .text:00405351↑j
.text:004053A2                 mov     esi, offset dword_419200
.text:004053A7                 jmp     short loc_405353
.text:004053A7 ; ---------------------------------------------------------------------------
.text:004053A9                 align 10h
.text:004053B0
.text:004053B0 loc_4053B0:                             ; CODE XREF: .text:004052FA↑j
.text:004053B0                 mov     ebx, offset dword_419200
.text:004053B5                 jmp     loc_405300
.text:004053B5 ; ---------------------------------------------------------------------------
.text:004053BA                 align 10h
.text:004053C0                 sub     esp, 1Ch
.text:004053C3                 mov     edx, [esp+24h]
.text:004053C7                 mov     dword ptr [esp+0Ch], offset dword_419200
.text:004053CF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004053D7                 mov     [esp+4], edx
.text:004053DB                 mov     edx, [esp+20h]
.text:004053DF                 mov     [esp], edx
.text:004053E2                 call    sub_405830
.text:004053E7                 add     esp, 1Ch
.text:004053EA                 retn
.text:004053EA ; ---------------------------------------------------------------------------
.text:004053EB                 align 10h
.text:004053F0                 sub     esp, 1Ch
.text:004053F3                 mov     edx, [esp+20h]
.text:004053F7                 mov     dword ptr [esp+0Ch], offset dword_419200
.text:004053FF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405407                 mov     [esp+4], edx
.text:0040540B                 mov     dword ptr [esp], 0
.text:00405412                 call    sub_405830
.text:00405417                 add     esp, 1Ch
.text:0040541A                 retn
.text:0040541A ; ---------------------------------------------------------------------------
.text:0040541B                 align 10h
.text:00405420                 push    ebp
.text:00405421                 xor     eax, eax
.text:00405423                 mov     ecx, 8
.text:00405428                 push    edi
.text:00405429                 push    esi
.text:0040542A                 push    ebx
.text:0040542B                 sub     esp, 0ACh
.text:00405431                 mov     ebp, [esp+0C4h]
.text:00405438                 cld
.text:00405439                 lea     edi, [esp+14h]
.text:0040543D                 mov     [esp+10h], ebp
.text:00405441                 rep stosd
.text:00405443                 mov     eax, [esp+30h]
.text:00405447                 mov     edi, [esp+10h]
.text:0040544B                 mov     esi, [esp+14h]
.text:0040544F                 mov     [esp+60h], eax
.text:00405453                 mov     ebp, [esp+18h]
.text:00405457                 mov     eax, [esp+10h]
.text:0040545B                 mov     [esp+40h], edi
.text:0040545F                 mov     ecx, [esp+28h]
.text:00405463                 mov     edi, [esp+1Ch]
.text:00405467                 mov     [esp+44h], esi
.text:0040546B                 mov     edx, [esp+2Ch]
.text:0040546F                 mov     esi, [esp+20h]
.text:00405473                 mov     [esp+70h], eax
.text:00405477                 mov     ebx, [esp+24h]
.text:0040547B                 mov     eax, [esp+14h]
.text:0040547F                 mov     [esp+48h], ebp
.text:00405483                 mov     [esp+4Ch], edi
.text:00405487                 mov     [esp+50h], esi
.text:0040548B                 mov     [esp+54h], ebx
.text:0040548F                 mov     [esp+58h], ecx
.text:00405493                 mov     [esp+5Ch], edx
.text:00405497                 mov     [esp+74h], eax
.text:0040549B                 mov     [esp+78h], ebp
.text:0040549F                 mov     [esp+7Ch], edi
.text:004054A3                 mov     [esp+80h], esi
.text:004054AA                 mov     [esp+84h], ebx
.text:004054B1                 mov     ebx, [esp+30h]
.text:004054B5                 mov     [esp+8Ch], edx
.text:004054BC                 mov     edx, [esp+0C8h]
.text:004054C3                 mov     [esp+88h], ecx
.text:004054CA                 lea     ecx, [esp+70h]
.text:004054CE                 mov     [esp+4], edx
.text:004054D2                 mov     edx, [esp+0C0h]
.text:004054D9                 mov     [esp+90h], ebx
.text:004054E0                 mov     [esp+0Ch], ecx
.text:004054E4                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004054EC                 mov     [esp], edx
.text:004054EF                 call    sub_405830
.text:004054F4                 add     esp, 0ACh
.text:004054FA                 pop     ebx
.text:004054FB                 pop     esi
.text:004054FC                 pop     edi
.text:004054FD                 pop     ebp
.text:004054FE                 retn
.text:004054FE ; ---------------------------------------------------------------------------
.text:004054FF                 align 10h
.text:00405500                 push    ebp
.text:00405501                 xor     eax, eax
.text:00405503                 mov     ecx, 8
.text:00405508                 push    edi
.text:00405509                 push    esi
.text:0040550A                 push    ebx
.text:0040550B                 sub     esp, 0ACh
.text:00405511                 mov     edx, [esp+0C4h]
.text:00405518                 cld
.text:00405519                 lea     edi, [esp+14h]
.text:0040551D                 mov     [esp+10h], edx
.text:00405521                 rep stosd
.text:00405523                 mov     eax, [esp+30h]
.text:00405527                 mov     ebp, [esp+10h]
.text:0040552B                 mov     edi, [esp+14h]
.text:0040552F                 mov     [esp+60h], eax
.text:00405533                 mov     esi, [esp+20h]
.text:00405537                 mov     eax, [esp+10h]
.text:0040553B                 mov     [esp+40h], ebp
.text:0040553F                 mov     ecx, [esp+28h]
.text:00405543                 mov     ebp, [esp+18h]
.text:00405547                 mov     [esp+44h], edi
.text:0040554B                 mov     edx, [esp+2Ch]
.text:0040554F                 mov     edi, [esp+1Ch]
.text:00405553                 mov     [esp+70h], eax
.text:00405557                 mov     ebx, [esp+24h]
.text:0040555B                 mov     eax, [esp+14h]
.text:0040555F                 mov     [esp+48h], ebp
.text:00405563                 mov     [esp+4Ch], edi
.text:00405567                 mov     [esp+50h], esi
.text:0040556B                 mov     [esp+54h], ebx
.text:0040556F                 mov     [esp+58h], ecx
.text:00405573                 mov     [esp+5Ch], edx
.text:00405577                 mov     [esp+74h], eax
.text:0040557B                 mov     [esp+78h], ebp
.text:0040557F                 mov     [esp+7Ch], edi
.text:00405583                 mov     [esp+80h], esi
.text:0040558A                 mov     [esp+84h], ebx
.text:00405591                 mov     esi, [esp+30h]
.text:00405595                 lea     ebx, [esp+70h]
.text:00405599                 mov     [esp+8Ch], edx
.text:004055A0                 mov     edx, [esp+0C8h]
.text:004055A7                 mov     [esp+88h], ecx
.text:004055AE                 mov     ecx, [esp+0CCh]
.text:004055B5                 mov     [esp+4], edx
.text:004055B9                 mov     edx, [esp+0C0h]
.text:004055C0                 mov     [esp+90h], esi
.text:004055C7                 mov     [esp+0Ch], ebx
.text:004055CB                 mov     [esp+8], ecx
.text:004055CF                 mov     [esp], edx
.text:004055D2                 call    sub_405830
.text:004055D7                 add     esp, 0ACh
.text:004055DD                 pop     ebx
.text:004055DE                 pop     esi
.text:004055DF                 pop     edi
.text:004055E0                 pop     ebp
.text:004055E1                 retn
.text:004055E1 ; ---------------------------------------------------------------------------
.text:004055E2                 align 10h
.text:004055F0                 push    ebp
.text:004055F1                 xor     eax, eax
.text:004055F3                 mov     ecx, 8
.text:004055F8                 push    edi
.text:004055F9                 push    esi
.text:004055FA                 push    ebx
.text:004055FB                 sub     esp, 0ACh
.text:00405601                 mov     edi, [esp+0C0h]
.text:00405608                 cld
.text:00405609                 mov     [esp+10h], edi
.text:0040560D                 lea     edi, [esp+14h]
.text:00405611                 rep stosd
.text:00405613                 mov     eax, [esp+30h]
.text:00405617                 mov     esi, [esp+10h]
.text:0040561B                 mov     ebx, [esp+14h]
.text:0040561F                 mov     [esp+60h], eax
.text:00405623                 mov     ebp, [esp+18h]
.text:00405627                 mov     eax, [esp+10h]
.text:0040562B                 mov     [esp+40h], esi
.text:0040562F                 mov     edi, [esp+1Ch]
.text:00405633                 mov     esi, [esp+20h]
.text:00405637                 mov     [esp+44h], ebx
.text:0040563B                 mov     ecx, [esp+28h]
.text:0040563F                 mov     edx, [esp+2Ch]
.text:00405643                 mov     [esp+70h], eax
.text:00405647                 mov     ebx, [esp+24h]
.text:0040564B                 mov     eax, [esp+14h]
.text:0040564F                 mov     [esp+48h], ebp
.text:00405653                 mov     [esp+4Ch], edi
.text:00405657                 mov     [esp+50h], esi
.text:0040565B                 mov     [esp+54h], ebx
.text:0040565F                 mov     [esp+58h], ecx
.text:00405663                 mov     [esp+5Ch], edx
.text:00405667                 mov     [esp+74h], eax
.text:0040566B                 mov     [esp+78h], ebp
.text:0040566F                 mov     [esp+7Ch], edi
.text:00405673                 mov     [esp+80h], esi
.text:0040567A                 mov     [esp+84h], ebx
.text:00405681                 mov     [esp+8Ch], edx
.text:00405688                 lea     edx, [esp+70h]
.text:0040568C                 mov     [esp+88h], ecx
.text:00405693                 mov     ecx, [esp+30h]
.text:00405697                 mov     [esp+0Ch], edx
.text:0040569B                 mov     edx, [esp+0C4h]
.text:004056A2                 mov     [esp+90h], ecx
.text:004056A9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004056B1                 mov     [esp+4], edx
.text:004056B5                 mov     dword ptr [esp], 0
.text:004056BC                 call    sub_405830
.text:004056C1                 add     esp, 0ACh
.text:004056C7                 pop     ebx
.text:004056C8                 pop     esi
.text:004056C9                 pop     edi
.text:004056CA                 pop     ebp
.text:004056CB                 retn
.text:004056CB ; ---------------------------------------------------------------------------
.text:004056CC                 align 10h
.text:004056D0                 push    edi
.text:004056D1                 push    esi
.text:004056D2                 push    ebx
.text:004056D3                 sub     esp, 40h
.text:004056D6                 mov     edx, ds:dword_41920C
.text:004056DC                 mov     ebx, ds:dword_419200
.text:004056E2                 mov     esi, ds:dword_419208
.text:004056E8                 mov     edi, ds:dword_419204
.text:004056EE                 mov     [esp+1Ch], edx
.text:004056F2                 mov     ecx, ds:dword_419210
.text:004056F8                 mov     edx, ds:dword_419220
.text:004056FE                 mov     [esp+10h], ebx
.text:00405702                 mov     ebx, ds:dword_419214
.text:00405708                 mov     [esp+30h], edx
.text:0040570C                 movzx   edx, byte ptr [esp+54h]
.text:00405711                 mov     [esp+18h], esi
.text:00405715                 mov     esi, ds:dword_41921C
.text:0040571B                 mov     [esp+14h], edi
.text:0040571F                 mov     edi, ds:dword_419218
.text:00405725                 mov     [esp+20h], ecx
.text:00405729                 mov     cl, dl
.text:0040572B                 shr     cl, 5
.text:0040572E                 mov     [esp+24h], ebx
.text:00405732                 movzx   ebx, cl
.text:00405735                 mov     [esp+2Ch], esi
.text:00405739                 lea     esi, [esp+10h]
.text:0040573D                 mov     [esp+28h], edi
.text:00405741                 lea     edi, [esi+ebx*4]
.text:00405744                 mov     ebx, edx
.text:00405746                 mov     edx, [edi+4]
.text:00405749                 and     ebx, 1Fh
.text:0040574C                 mov     cl, bl
.text:0040574E                 mov     eax, edx
.text:00405750                 shr     eax, cl
.text:00405752                 and     eax, 1
.text:00405755                 xor     eax, 1
.text:00405758                 shl     eax, cl
.text:0040575A                 xor     edx, eax
.text:0040575C                 mov     [edi+4], edx
.text:0040575F                 mov     edx, [esp+50h]
.text:00405763                 mov     [esp+0Ch], esi
.text:00405767                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040576F                 mov     [esp+4], edx
.text:00405773                 mov     dword ptr [esp], 0
.text:0040577A                 call    sub_405830
.text:0040577F                 add     esp, 40h
.text:00405782                 pop     ebx
.text:00405783                 pop     esi
.text:00405784                 pop     edi
.text:00405785                 retn
.text:00405785 ; ---------------------------------------------------------------------------
.text:00405786                 align 10h
.text:00405790
.text:00405790 ; =============== S U B R O U T I N E =======================================
.text:00405790
.text:00405790
.text:00405790 ; int __cdecl sub_405790(char *)
.text:00405790 sub_405790      proc near               ; CODE XREF: sub_4041D0+64↑p
.text:00405790
.text:00405790 var_4C          = dword ptr -4Ch
.text:00405790 var_48          = dword ptr -48h
.text:00405790 var_44          = dword ptr -44h
.text:00405790 var_40          = dword ptr -40h
.text:00405790 var_3C          = dword ptr -3Ch
.text:00405790 var_38          = dword ptr -38h
.text:00405790 var_34          = dword ptr -34h
.text:00405790 var_30          = dword ptr -30h
.text:00405790 var_2C          = dword ptr -2Ch
.text:00405790 var_28          = dword ptr -28h
.text:00405790 var_24          = dword ptr -24h
.text:00405790 var_20          = dword ptr -20h
.text:00405790 var_1C          = dword ptr -1Ch
.text:00405790 arg_0           = dword ptr  4
.text:00405790
.text:00405790                 sub     esp, 4Ch
.text:00405793                 mov     ecx, ds:dword_419200
.text:00405799                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:004057A1                 mov     edx, ds:dword_419204
.text:004057A7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:004057AE                 mov     [esp+4Ch+var_3C], ecx
.text:004057B2                 mov     ecx, ds:dword_41920C
.text:004057B8                 mov     [esp+4Ch+var_38], edx
.text:004057BC                 mov     edx, ds:dword_419208
.text:004057C2                 mov     [esp+4Ch+var_30], ecx
.text:004057C6                 mov     ecx, ds:dword_419210
.text:004057CC                 mov     eax, edx
.text:004057CE                 shr     eax, 1Ah
.text:004057D1                 and     eax, 1
.text:004057D4                 xor     eax, 1
.text:004057D7                 mov     [esp+4Ch+var_2C], ecx
.text:004057DB                 shl     eax, 1Ah
.text:004057DE                 mov     ecx, ds:dword_419214
.text:004057E4                 xor     edx, eax
.text:004057E6                 mov     [esp+4Ch+var_34], edx
.text:004057EA                 mov     edx, [esp+4Ch+arg_0]
.text:004057EE                 mov     [esp+4Ch+var_28], ecx
.text:004057F2                 mov     ecx, ds:dword_419218
.text:004057F8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004057FC                 mov     [esp+4Ch+var_24], ecx
.text:00405800                 mov     ecx, ds:dword_41921C
.text:00405806                 mov     [esp+4Ch+var_20], ecx
.text:0040580A                 mov     ecx, ds:dword_419220
.text:00405810                 mov     [esp+4Ch+var_1C], ecx
.text:00405814                 lea     ecx, [esp+4Ch+var_3C]
.text:00405818                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040581C                 call    sub_405830
.text:00405821                 add     esp, 4Ch
.text:00405824                 retn
.text:00405824 sub_405790      endp
.text:00405824
.text:00405824 ; ---------------------------------------------------------------------------
.text:00405825                 align 10h
.text:00405830
.text:00405830 ; =============== S U B R O U T I N E =======================================
.text:00405830
.text:00405830
.text:00405830 ; int __cdecl sub_405830(int, char *, int, int)
.text:00405830 sub_405830      proc near               ; CODE XREF: .text:004053E2↑p
.text:00405830                                         ; .text:00405412↑p ...
.text:00405830
.text:00405830 Block           = dword ptr -2Ch
.text:00405830 var_28          = dword ptr -28h
.text:00405830 Str             = dword ptr -24h
.text:00405830 var_20          = dword ptr -20h
.text:00405830 var_1C          = dword ptr -1Ch
.text:00405830 var_18          = dword ptr -18h
.text:00405830 var_14          = dword ptr -14h
.text:00405830 arg_0           = dword ptr  4
.text:00405830 arg_4           = dword ptr  8
.text:00405830 arg_8           = dword ptr  0Ch
.text:00405830 arg_C           = dword ptr  10h
.text:00405830
.text:00405830                 push    ebp
.text:00405831                 push    edi
.text:00405832                 push    esi
.text:00405833                 push    ebx
.text:00405834                 sub     esp, 1Ch
.text:00405837                 call    _errno
.text:0040583C                 mov     edx, [eax]
.text:0040583E                 mov     eax, [esp+2Ch+arg_0]
.text:00405842                 mov     [esp+2Ch+var_14], edx
.text:00405846                 test    eax, eax
.text:00405848                 js      loc_4059EA
.text:0040584E                 mov     eax, [esp+2Ch+arg_0]
.text:00405852                 cmp     dword_418040, eax
.text:00405858                 ja      short loc_4058D0
.text:0040585A                 mov     esi, eax
.text:0040585C                 inc     esi
.text:0040585D                 cmp     esi, 1FFFFFFFh
.text:00405863                 ja      loc_4059EF
.text:00405869                 mov     ebx, off_41804C
.text:0040586F                 cmp     ebx, offset dword_418044
.text:00405875                 jz      loc_4059C1
.text:0040587B
.text:0040587B loc_40587B:                             ; CODE XREF: sub_405830+1B5↓j
.text:0040587B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040587E                 lea     ecx, ds:0[esi*8]
.text:00405885                 mov     ebp, esi
.text:00405887                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040588B                 call    sub_404380
.text:00405890                 mov     off_41804C, eax
.text:00405895                 mov     ebx, dword_418040
.text:0040589B                 sub     ebp, ebx
.text:0040589D                 lea     edi, [eax+ebx*8]
.text:004058A0                 lea     eax, ds:0[ebp*8]
.text:004058A7                 cmp     eax, 7
.text:004058AA                 jbe     short loc_4058C0
.text:004058AC                 test    edi, 4
.text:004058B2                 jz      short loc_4058C0
.text:004058B4                 mov     dword ptr [edi], 0
.text:004058BA                 sub     eax, 4
.text:004058BD                 add     edi, 4
.text:004058C0
.text:004058C0 loc_4058C0:                             ; CODE XREF: sub_405830+7A↑j
.text:004058C0                                         ; sub_405830+82↑j
.text:004058C0                 cld
.text:004058C1                 mov     ecx, eax
.text:004058C3                 shr     ecx, 2
.text:004058C6                 xor     eax, eax
.text:004058C8                 rep stosd
.text:004058CA                 mov     dword_418040, esi
.text:004058D0
.text:004058D0 loc_4058D0:                             ; CODE XREF: sub_405830+28↑j
.text:004058D0                 mov     esi, off_41804C
.text:004058D6                 mov     eax, [esp+2Ch+arg_0]
.text:004058DA                 mov     ebp, [esi+eax*8]
.text:004058DD                 mov     edi, [esi+eax*8+4]
.text:004058E1                 mov     esi, [esp+2Ch+arg_C]
.text:004058E5                 test    esi, esi
.text:004058E7                 jz      loc_4059B7
.text:004058ED
.text:004058ED loc_4058ED:                             ; CODE XREF: sub_405830+18C↓j
.text:004058ED                 call    _errno
.text:004058F2                 mov     ebx, [eax]
.text:004058F4                 mov     [esp+2Ch+var_18], esi ; int
.text:004058F8                 mov     ecx, [esi]
.text:004058FA                 mov     [esp+2Ch+Block], edi ; int
.text:004058FD                 mov     edx, [esp+2Ch+arg_8]
.text:00405901                 mov     [esp+2Ch+var_28], ebp ; int
.text:00405905                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405909                 mov     ecx, [esp+2Ch+arg_4]
.text:0040590D                 mov     [esp+2Ch+var_20], edx ; int
.text:00405911                 mov     [esp+2Ch+Str], ecx ; Str
.text:00405915                 call    sub_4046F0
.text:0040591A                 mov     esi, eax
.text:0040591C                 call    _errno
.text:00405921                 mov     [eax], ebx
.text:00405923                 cmp     ebp, esi
.text:00405925                 ja      short loc_40599B
.text:00405927                 lea     ebp, [esi+1]
.text:0040592A                 mov     ebx, off_41804C
.text:00405930                 cmp     edi, offset unk_419100
.text:00405936                 mov     esi, [esp+2Ch+arg_0]
.text:0040593A                 mov     [ebx+esi*8], ebp
.text:0040593D                 jz      short loc_40594D
.text:0040593F                 mov     [esp+2Ch+Block], edi ; Block
.text:00405942                 call    free
.text:00405947                 mov     ebx, off_41804C
.text:0040594D
.text:0040594D loc_40594D:                             ; CODE XREF: sub_405830+10D↑j
.text:0040594D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00405950                 call    sub_4042F0
.text:00405955                 mov     esi, [esp+2Ch+arg_C]
.text:00405959                 mov     edi, eax
.text:0040595B                 mov     eax, [esp+2Ch+arg_0]
.text:0040595F                 test    esi, esi
.text:00405961                 mov     [ebx+eax*8+4], edi
.text:00405965                 jz      short loc_4059B0
.text:00405967
.text:00405967 loc_405967:                             ; CODE XREF: sub_405830+185↓j
.text:00405967                 call    _errno
.text:0040596C                 mov     ebx, [eax]
.text:0040596E                 mov     [esp+2Ch+var_18], esi ; int
.text:00405972                 mov     ecx, [esi]
.text:00405974                 mov     [esp+2Ch+Block], edi ; int
.text:00405977                 mov     edx, [esp+2Ch+arg_8]
.text:0040597B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040597F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405983                 mov     ecx, [esp+2Ch+arg_4]
.text:00405987                 mov     [esp+2Ch+var_20], edx ; int
.text:0040598B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040598F                 call    sub_4046F0
.text:00405994                 call    _errno
.text:00405999                 mov     [eax], ebx
.text:0040599B
.text:0040599B loc_40599B:                             ; CODE XREF: sub_405830+F5↑j
.text:0040599B                 call    _errno
.text:004059A0                 mov     ebp, [esp+2Ch+var_14]
.text:004059A4                 mov     [eax], ebp
.text:004059A6                 add     esp, 1Ch
.text:004059A9                 mov     eax, edi
.text:004059AB                 pop     ebx
.text:004059AC                 pop     esi
.text:004059AD                 pop     edi
.text:004059AE                 pop     ebp
.text:004059AF                 retn
.text:004059B0 ; ---------------------------------------------------------------------------
.text:004059B0
.text:004059B0 loc_4059B0:                             ; CODE XREF: sub_405830+135↑j
.text:004059B0                 mov     esi, offset dword_419200
.text:004059B5                 jmp     short loc_405967
.text:004059B7 ; ---------------------------------------------------------------------------
.text:004059B7
.text:004059B7 loc_4059B7:                             ; CODE XREF: sub_405830+B7↑j
.text:004059B7                 mov     esi, offset dword_419200
.text:004059BC                 jmp     loc_4058ED
.text:004059C1 ; ---------------------------------------------------------------------------
.text:004059C1
.text:004059C1 loc_4059C1:                             ; CODE XREF: sub_405830+45↑j
.text:004059C1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004059C8                 call    sub_4042F0
.text:004059CD                 mov     off_41804C, eax
.text:004059D2                 mov     edi, dword_418044
.text:004059D8                 mov     ebx, eax
.text:004059DA                 mov     ecx, off_418048
.text:004059E0                 mov     [eax], edi
.text:004059E2                 mov     [eax+4], ecx
.text:004059E5                 jmp     loc_40587B
.text:004059EA ; ---------------------------------------------------------------------------
.text:004059EA
.text:004059EA loc_4059EA:                             ; CODE XREF: sub_405830+18↑j
.text:004059EA                 call    abort
.text:004059EF ; ---------------------------------------------------------------------------
.text:004059EF
.text:004059EF loc_4059EF:                             ; CODE XREF: sub_405830+33↑j
.text:004059EF                 call    sub_405A20
.text:004059EF sub_405830      endp
.text:004059EF
.text:004059EF ; ---------------------------------------------------------------------------
.text:004059F4                 align 10h
.text:00405A00 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_405A20+3↓o
.text:00405A11 ; const char aS_1[]
.text:00405A11 aS_1            db '%s',0               ; DATA XREF: sub_405A20+10↓o
.text:00405A14                 align 10h
.text:00405A20
.text:00405A20 ; =============== S U B R O U T I N E =======================================
.text:00405A20
.text:00405A20 ; Attributes: noreturn
.text:00405A20
.text:00405A20 sub_405A20      proc near               ; CODE XREF: sub_4042B0:loc_4042E9↑p
.text:00405A20                                         ; sub_4042F0+24↑p ...
.text:00405A20
.text:00405A20 Code            = dword ptr -1Ch
.text:00405A20 ErrorMessage    = dword ptr -18h
.text:00405A20 var_14          = dword ptr -14h
.text:00405A20 var_10          = byte ptr -10h
.text:00405A20
.text:00405A20                 sub     esp, 1Ch
.text:00405A23                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00405A2A                 call    ds:libintl_gettext
.text:00405A30                 mov     [esp+1Ch+var_14], offset aS_1 ; "%s"
.text:00405A38                 mov     edx, Code
.text:00405A3E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00405A46                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00405A4A                 mov     [esp+1Ch+Code], edx ; Code
.text:00405A4D                 call    sub_405AB0
.text:00405A52                 call    abort
.text:00405A52 sub_405A20      endp
.text:00405A52
.text:00405A52 ; ---------------------------------------------------------------------------
.text:00405A57                 align 10h
.text:00405A60
.text:00405A60 ; =============== S U B R O U T I N E =======================================
.text:00405A60
.text:00405A60 ; Attributes: thunk
.text:00405A60
.text:00405A60 libintl_bindtextdomain proc near
.text:00405A60                 jmp     ds:__imp_libintl_bindtextdomain
.text:00405A60 libintl_bindtextdomain endp
.text:00405A60
.text:00405A60 ; ---------------------------------------------------------------------------
.text:00405A66                 align 10h
.text:00405A70                 jmp     ds:libintl_textdomain
.text:00405A70 ; ---------------------------------------------------------------------------
.text:00405A76                 align 10h
.text:00405A80                 jmp     ds:libintl_gettext
.text:00405A80 ; ---------------------------------------------------------------------------
.text:00405A86                 align 10h
.text:00405A90 ; const char aS_2[]
.text:00405A90 aS_2            db ': %s',0             ; DATA XREF: sub_405AB0+B8↓o
.text:00405A90                                         ; sub_405BB4+122↓o
.text:00405A95 aUnknownSystemE db 'Unknown system error',0
.text:00405A95                                         ; DATA XREF: sub_405AB0:loc_405B7D↓o
.text:00405A95                                         ; sub_405BB4:loc_405CEE↓o
.text:00405AAA ; const char aS_3[]
.text:00405AAA aS_3            db '%s: ',0             ; DATA XREF: sub_405AB0:loc_405B84↓o
.text:00405AAF                 align 10h
.text:00405AB0
.text:00405AB0 ; =============== S U B R O U T I N E =======================================
.text:00405AB0
.text:00405AB0
.text:00405AB0 ; int __cdecl sub_405AB0(int Code, int ErrorMessage, char *, char)
.text:00405AB0 sub_405AB0      proc near               ; CODE XREF: sub_4016B0+4FB↑p
.text:00405AB0                                         ; sub_4016B0+5E0↑p ...
.text:00405AB0
.text:00405AB0 Stream          = dword ptr -1Ch
.text:00405AB0 Format          = dword ptr -18h
.text:00405AB0 ArgList         = dword ptr -14h
.text:00405AB0 Code            = dword ptr  4
.text:00405AB0 ErrorMessage    = dword ptr  8
.text:00405AB0 arg_8           = dword ptr  0Ch
.text:00405AB0 arg_C           = byte ptr  10h
.text:00405AB0
.text:00405AB0                 push    esi
.text:00405AB1                 push    ebx
.text:00405AB2                 sub     esp, 14h
.text:00405AB5                 mov     edx, ds:_iob
.text:00405ABB                 mov     esi, [esp+1Ch+Code]
.text:00405ABF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00405AC3                 add     edx, 20h ; ' '
.text:00405AC6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405AC9                 call    fflush
.text:00405ACE                 mov     eax, ds:dword_4195A0
.text:00405AD3                 test    eax, eax
.text:00405AD5                 jz      loc_405B84
.text:00405ADB                 call    eax ; dword_4195A0
.text:00405ADD
.text:00405ADD loc_405ADD:                             ; CODE XREF: sub_405AB0+F7↓j
.text:00405ADD                 lea     edx, [esp+1Ch+arg_C]
.text:00405AE1                 mov     ecx, [esp+1Ch+arg_8]
.text:00405AE5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00405AE9                 mov     edx, ds:_iob
.text:00405AEF                 mov     [esp+1Ch+Format], ecx ; Format
.text:00405AF3                 add     edx, 40h ; '@'
.text:00405AF6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405AF9                 call    vfprintf
.text:00405AFE                 inc     ds:dword_4195B0
.text:00405B04                 test    ebx, ebx
.text:00405B06                 jnz     short loc_405B52
.text:00405B08
.text:00405B08 loc_405B08:                             ; CODE XREF: sub_405AB0+CB↓j
.text:00405B08                 mov     edx, ds:_iob
.text:00405B0E                 lea     ecx, [edx+40h]
.text:00405B11                 mov     ebx, [ecx+4]
.text:00405B14                 dec     ebx
.text:00405B15                 test    ebx, ebx
.text:00405B17                 mov     [ecx+4], ebx
.text:00405B1A                 js      short loc_405B40
.text:00405B1C                 mov     ecx, [edx+40h]
.text:00405B1F                 mov     byte ptr [ecx], 0Ah
.text:00405B22                 inc     dword ptr [edx+40h]
.text:00405B25
.text:00405B25 loc_405B25:                             ; CODE XREF: sub_405AB0+A0↓j
.text:00405B25                 mov     edx, ds:_iob
.text:00405B2B                 add     edx, 40h ; '@'
.text:00405B2E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405B31                 call    fflush
.text:00405B36                 test    esi, esi
.text:00405B38                 jnz     short loc_405BAC
.text:00405B3A                 add     esp, 14h
.text:00405B3D                 pop     ebx
.text:00405B3E                 pop     esi
.text:00405B3F                 retn
.text:00405B40 ; ---------------------------------------------------------------------------
.text:00405B40
.text:00405B40 loc_405B40:                             ; CODE XREF: sub_405AB0+6A↑j
.text:00405B40                 mov     [esp+1Ch+Format], ecx ; File
.text:00405B44                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00405B4B                 call    _flsbuf
.text:00405B50                 jmp     short loc_405B25
.text:00405B52 ; ---------------------------------------------------------------------------
.text:00405B52
.text:00405B52 loc_405B52:                             ; CODE XREF: sub_405AB0+56↑j
.text:00405B52                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00405B55                 call    strerror
.text:00405B5A                 test    eax, eax
.text:00405B5C                 jz      short loc_405B7D
.text:00405B5E
.text:00405B5E loc_405B5E:                             ; CODE XREF: sub_405AB0+D2↓j
.text:00405B5E                 mov     [esp+1Ch+ArgList], eax
.text:00405B62                 mov     ebx, ds:_iob
.text:00405B68                 mov     [esp+1Ch+Format], offset aS_2 ; ": %s"
.text:00405B70                 add     ebx, 40h ; '@'
.text:00405B73                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00405B76                 call    fprintf
.text:00405B7B                 jmp     short loc_405B08
.text:00405B7D ; ---------------------------------------------------------------------------
.text:00405B7D
.text:00405B7D loc_405B7D:                             ; CODE XREF: sub_405AB0+AC↑j
.text:00405B7D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405B82                 jmp     short loc_405B5E
.text:00405B84 ; ---------------------------------------------------------------------------
.text:00405B84
.text:00405B84 loc_405B84:                             ; CODE XREF: sub_405AB0+25↑j
.text:00405B84                 mov     [esp+1Ch+Format], offset aS_3 ; "%s: "
.text:00405B8C                 mov     edx, ds:_iob
.text:00405B92                 mov     ecx, ds:dword_419570
.text:00405B98                 add     edx, 40h ; '@'
.text:00405B9B                 mov     [esp+1Ch+ArgList], ecx
.text:00405B9F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405BA2                 call    fprintf
.text:00405BA7                 jmp     loc_405ADD
.text:00405BAC ; ---------------------------------------------------------------------------
.text:00405BAC
.text:00405BAC loc_405BAC:                             ; CODE XREF: sub_405AB0+88↑j
.text:00405BAC                 mov     [esp+1Ch+Stream], esi ; Code
.text:00405BAF                 call    exit
.text:00405BAF sub_405AB0      endp
.text:00405BAF
.text:00405BB4
.text:00405BB4 ; =============== S U B R O U T I N E =======================================
.text:00405BB4
.text:00405BB4
.text:00405BB4 ; int __cdecl sub_405BB4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00405BB4 sub_405BB4      proc near               ; DATA XREF: sub_405BB4+77↓o
.text:00405BB4
.text:00405BB4 Stream          = dword ptr -28h
.text:00405BB4 Format          = dword ptr -24h
.text:00405BB4 ArgList         = dword ptr -20h
.text:00405BB4 var_1C          = dword ptr -1Ch
.text:00405BB4 Code            = dword ptr  8
.text:00405BB4 ErrorMessage    = dword ptr  0Ch
.text:00405BB4 Str2            = dword ptr  10h
.text:00405BB4 arg_10          = dword ptr  14h
.text:00405BB4 arg_14          = dword ptr  18h
.text:00405BB4 arg_18          = byte ptr  1Ch
.text:00405BB4
.text:00405BB4                 and     eax, 64253A73h
.text:00405BB9                 cmp     ah, [eax]
.text:00405BBB
.text:00405BBB loc_405BBB:                             ; DATA XREF: sub_405BB4:loc_405CF5↓o
.text:00405BBB                 add     ds:55003A73h, ah
.text:00405BC1                 push    edi
.text:00405BC2                 push    esi
.text:00405BC3                 push    ebx
.text:00405BC4                 sub     esp, 1Ch
.text:00405BC7                 mov     edx, ds:dword_4195E0
.text:00405BCD                 mov     ebp, [esp+28h+Code]
.text:00405BD1                 mov     edi, [esp+28h+ErrorMessage]
.text:00405BD5                 test    edx, edx
.text:00405BD7                 mov     ebx, [esp+28h+Str2]
.text:00405BDB                 mov     esi, [esp+28h+arg_10]
.text:00405BDF                 jz      short loc_405BF9
.text:00405BE1                 cmp     ds:dword_419240, esi
.text:00405BE7                 jz      loc_405D20
.text:00405BED
.text:00405BED loc_405BED:                             ; CODE XREF: sub_405BB4+18D↓j
.text:00405BED                 mov     ds:Str1, ebx
.text:00405BF3                 mov     ds:dword_419240, esi
.text:00405BF9
.text:00405BF9 loc_405BF9:                             ; CODE XREF: sub_405BB4+2B↑j
.text:00405BF9                 mov     edx, ds:_iob
.text:00405BFF                 add     edx, 20h ; ' '
.text:00405C02                 mov     [esp+28h+Stream], edx ; Stream
.text:00405C05                 call    fflush
.text:00405C0A                 mov     eax, ds:dword_4195A0
.text:00405C0F                 test    eax, eax
.text:00405C11                 jz      loc_405CF5
.text:00405C17                 call    eax ; dword_4195A0
.text:00405C19
.text:00405C19 loc_405C19:                             ; CODE XREF: sub_405BB4+164↓j
.text:00405C19                 test    ebx, ebx
.text:00405C1B                 jz      short loc_405C3E
.text:00405C1D                 mov     [esp+28h+ArgList], ebx
.text:00405C21                 mov     ebx, ds:_iob
.text:00405C27                 mov     [esp+28h+var_1C], esi
.text:00405C2B                 mov     [esp+28h+Format], offset sub_405BB4 ; Format
.text:00405C33                 add     ebx, 40h ; '@'
.text:00405C36                 mov     [esp+28h+Stream], ebx ; Stream
.text:00405C39                 call    fprintf
.text:00405C3E
.text:00405C3E loc_405C3E:                             ; CODE XREF: sub_405BB4+67↑j
.text:00405C3E                 mov     esi, ds:_iob
.text:00405C44                 lea     edx, [esp+28h+arg_18]
.text:00405C48                 mov     ecx, [esp+28h+arg_14]
.text:00405C4C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00405C50                 add     esi, 40h ; '@'
.text:00405C53                 mov     [esp+28h+Format], ecx ; Format
.text:00405C57                 mov     [esp+28h+Stream], esi ; Stream
.text:00405C5A                 call    vfprintf
.text:00405C5F                 inc     ds:dword_4195B0
.text:00405C65                 test    edi, edi
.text:00405C67                 jnz     short loc_405CC0
.text:00405C69
.text:00405C69 loc_405C69:                             ; CODE XREF: sub_405BB4+135↓j
.text:00405C69                 mov     edx, ds:_iob
.text:00405C6F                 lea     ecx, [edx+40h]
.text:00405C72                 mov     ebx, [ecx+4]
.text:00405C75                 dec     ebx
.text:00405C76                 test    ebx, ebx
.text:00405C78                 mov     [ecx+4], ebx
.text:00405C7B                 js      short loc_405CA7
.text:00405C7D                 mov     esi, [edx+40h]
.text:00405C80                 mov     byte ptr [esi], 0Ah
.text:00405C83                 inc     dword ptr [edx+40h]
.text:00405C86
.text:00405C86 loc_405C86:                             ; CODE XREF: sub_405BB4+103↓j
.text:00405C86                 mov     ecx, ds:_iob
.text:00405C8C                 add     ecx, 40h ; '@'
.text:00405C8F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405C92                 call    fflush
.text:00405C97                 test    ebp, ebp
.text:00405C99                 jnz     loc_405D46
.text:00405C9F
.text:00405C9F loc_405C9F:                             ; CODE XREF: sub_405BB4+173↓j
.text:00405C9F                                         ; sub_405BB4+187↓j
.text:00405C9F                 add     esp, 1Ch
.text:00405CA2                 pop     ebx
.text:00405CA3                 pop     esi
.text:00405CA4                 pop     edi
.text:00405CA5                 pop     ebp
.text:00405CA6                 retn
.text:00405CA7 ; ---------------------------------------------------------------------------
.text:00405CA7
.text:00405CA7 loc_405CA7:                             ; CODE XREF: sub_405BB4+C7↑j
.text:00405CA7                 mov     [esp+28h+Format], ecx ; File
.text:00405CAB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00405CB2                 call    _flsbuf
.text:00405CB7                 jmp     short loc_405C86
.text:00405CB7 ; ---------------------------------------------------------------------------
.text:00405CB9                 align 10h
.text:00405CC0
.text:00405CC0 loc_405CC0:                             ; CODE XREF: sub_405BB4+B3↑j
.text:00405CC0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00405CC3                 call    strerror
.text:00405CC8                 test    eax, eax
.text:00405CCA                 jz      short loc_405CEE
.text:00405CCC
.text:00405CCC loc_405CCC:                             ; CODE XREF: sub_405BB4+13F↓j
.text:00405CCC                 mov     [esp+28h+ArgList], eax
.text:00405CD0                 mov     edi, ds:_iob
.text:00405CD6                 mov     [esp+28h+Format], offset aS_2 ; ": %s"
.text:00405CDE                 add     edi, 40h ; '@'
.text:00405CE1                 mov     [esp+28h+Stream], edi ; Stream
.text:00405CE4                 call    fprintf
.text:00405CE9                 jmp     loc_405C69
.text:00405CEE ; ---------------------------------------------------------------------------
.text:00405CEE
.text:00405CEE loc_405CEE:                             ; CODE XREF: sub_405BB4+116↑j
.text:00405CEE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405CF3                 jmp     short loc_405CCC
.text:00405CF5 ; ---------------------------------------------------------------------------
.text:00405CF5
.text:00405CF5 loc_405CF5:                             ; CODE XREF: sub_405BB4+5D↑j
.text:00405CF5                 mov     [esp+28h+Format], (offset loc_405BBB+1) ; Format
.text:00405CFD                 mov     ecx, ds:_iob
.text:00405D03                 mov     edx, ds:dword_419570
.text:00405D09                 add     ecx, 40h ; '@'
.text:00405D0C                 mov     [esp+28h+ArgList], edx
.text:00405D10                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405D13                 call    fprintf
.text:00405D18                 jmp     loc_405C19
.text:00405D18 ; ---------------------------------------------------------------------------
.text:00405D1D                 align 10h
.text:00405D20
.text:00405D20 loc_405D20:                             ; CODE XREF: sub_405BB4+33↑j
.text:00405D20                 mov     eax, ds:Str1
.text:00405D25                 cmp     ebx, eax
.text:00405D27                 jz      loc_405C9F
.text:00405D2D                 mov     [esp+28h+Format], ebx ; Str2
.text:00405D31                 mov     [esp+28h+Stream], eax ; Str1
.text:00405D34                 call    strcmp
.text:00405D39                 test    eax, eax
.text:00405D3B                 jz      loc_405C9F
.text:00405D41                 jmp     loc_405BED
.text:00405D46 ; ---------------------------------------------------------------------------
.text:00405D46
.text:00405D46 loc_405D46:                             ; CODE XREF: sub_405BB4+E5↑j
.text:00405D46                 mov     [esp+28h+Stream], ebp ; Code
.text:00405D49                 call    exit
.text:00405D49 sub_405BB4      endp ; sp-analysis failed
.text:00405D49
.text:00405D49 ; ---------------------------------------------------------------------------
.text:00405D4E                 align 10h
.text:00405D50
.text:00405D50 ; =============== S U B R O U T I N E =======================================
.text:00405D50
.text:00405D50
.text:00405D50 sub_405D50      proc near               ; CODE XREF: sub_4016B0+3B9↑p
.text:00405D50                                         ; sub_4020F0+116↑p
.text:00405D50
.text:00405D50 hNamedPipe      = dword ptr -0Ch
.text:00405D50 var_8           = dword ptr -8
.text:00405D50 var_4           = dword ptr -4
.text:00405D50 arg_0           = dword ptr  4
.text:00405D50 arg_4           = dword ptr  8
.text:00405D50
.text:00405D50                 sub     esp, 0Ch
.text:00405D53                 mov     edx, [esp+0Ch+arg_4]
.text:00405D57                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:00405D5E                 mov     [esp+0Ch+var_4], edx ; int
.text:00405D62                 mov     edx, [esp+0Ch+arg_0]
.text:00405D66                 mov     [esp+0Ch+var_8], edx ; int
.text:00405D6A                 call    sub_405FC0
.text:00405D6F                 add     esp, 0Ch
.text:00405D72                 retn
.text:00405D72 sub_405D50      endp
.text:00405D72
.text:00405D72 ; ---------------------------------------------------------------------------
.text:00405D73 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:00405D73                                         ; DATA XREF: .text:00405E5E↓o
.text:00405D86 aModeO          db 'mode:      %#o',0Ah,0
.text:00405D86                                         ; DATA XREF: .text:00405E74↓o
.text:00405D96 aUidLd          db 'uid:       %ld',0Ah,0
.text:00405D96                                         ; DATA XREF: .text:00405E87↓o
.text:00405DA6 aGidLd          db 'gid:       %ld',0Ah,0
.text:00405DA6                                         ; DATA XREF: .text:00405E9A↓o
.text:00405DB6 aDevLu          db 'dev:       %lu',0Ah,0
.text:00405DB6                                         ; DATA XREF: .text:00405EAD↓o
.text:00405DC6 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:00405DC6                                         ; DATA XREF: .text:00405EC0↓o
.text:00405DD6 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:00405DD6                                         ; DATA XREF: .text:00405ED6↓o
.text:00405DE8 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:00405DE8                                         ; DATA XREF: .text:00405EED↓o
.text:00405DF7 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:00405DF7                                         ; DATA XREF: .text:00405F03↓o
.text:00405E09 aAtimeLdS       db 'atime:     %ld: %s',0
.text:00405E09                                         ; DATA XREF: .text:00405F29↓o
.text:00405E1C aMtimeLdS       db 'mtime:     %ld: %s',0
.text:00405E1C                                         ; DATA XREF: .text:00405F4B↓o
.text:00405E2F aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:00405E2F                                         ; DATA XREF: .text:00405F6D↓o
.text:00405E43                 align 10h
.text:00405E50                 push    ebx
.text:00405E51                 sub     esp, 18h
.text:00405E54                 mov     ebx, [esp+20h]
.text:00405E58                 mov     edx, [ebx+8]
.text:00405E5B                 mov     ecx, [ebx+0Ch]
.text:00405E5E                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:00405E65                 mov     [esp+4], edx
.text:00405E69                 mov     [esp+8], ecx
.text:00405E6D                 call    printf
.text:00405E72                 mov     ecx, [ebx]
.text:00405E74                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:00405E7B                 mov     [esp+4], ecx
.text:00405E7F                 call    printf
.text:00405E84                 mov     edx, [ebx+1Ch]
.text:00405E87                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:00405E8E                 mov     [esp+4], edx
.text:00405E92                 call    printf
.text:00405E97                 mov     ecx, [ebx+20h]
.text:00405E9A                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:00405EA1                 mov     [esp+4], ecx
.text:00405EA5                 call    printf
.text:00405EAA                 mov     edx, [ebx+10h]
.text:00405EAD                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:00405EB4                 mov     [esp+4], edx
.text:00405EB8                 call    printf
.text:00405EBD                 mov     ecx, [ebx+18h]
.text:00405EC0                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:00405EC7                 mov     [esp+4], ecx
.text:00405ECB                 call    printf
.text:00405ED0                 mov     edx, [ebx+30h]
.text:00405ED3                 mov     ecx, [ebx+34h]
.text:00405ED6                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:00405EDD                 mov     [esp+4], edx
.text:00405EE1                 mov     [esp+8], ecx
.text:00405EE5                 call    printf
.text:00405EEA                 mov     ecx, [ebx+50h]
.text:00405EED                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:00405EF4                 mov     [esp+4], ecx
.text:00405EF8                 call    printf
.text:00405EFD                 mov     ecx, [ebx+5Ch]
.text:00405F00                 mov     edx, [ebx+58h]
.text:00405F03                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:00405F0A                 mov     [esp+8], ecx
.text:00405F0E                 mov     [esp+4], edx
.text:00405F12                 call    printf
.text:00405F17                 lea     edx, [ebx+38h]
.text:00405F1A                 mov     [esp], edx
.text:00405F1D                 call    ctime
.text:00405F22                 mov     [esp+8], eax
.text:00405F26                 mov     ecx, [ebx+38h]
.text:00405F29                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:00405F30                 mov     [esp+4], ecx
.text:00405F34                 call    printf
.text:00405F39                 lea     edx, [ebx+40h]
.text:00405F3C                 mov     [esp], edx
.text:00405F3F                 call    ctime
.text:00405F44                 mov     [esp+8], eax
.text:00405F48                 mov     ecx, [ebx+40h]
.text:00405F4B                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:00405F52                 mov     [esp+4], ecx
.text:00405F56                 call    printf
.text:00405F5B                 lea     edx, [ebx+48h]
.text:00405F5E                 mov     [esp], edx
.text:00405F61                 call    ctime
.text:00405F66                 mov     [esp+8], eax
.text:00405F6A                 mov     edx, [ebx+48h]
.text:00405F6D                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:00405F74                 mov     [esp+4], edx
.text:00405F78                 call    printf
.text:00405F7D                 add     esp, 18h
.text:00405F80                 xor     eax, eax
.text:00405F82                 pop     ebx
.text:00405F83                 retn
.text:00405F83 ; ---------------------------------------------------------------------------
.text:00405F84                 align 10h
.text:00405F90 ; const char aFxstat64BadFil[]
.text:00405F90 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:00405F90                                         ; DATA XREF: sub_405FC0+7B↓o
.text:00405FB4                 align 10h
.text:00405FC0
.text:00405FC0 ; =============== S U B R O U T I N E =======================================
.text:00405FC0
.text:00405FC0
.text:00405FC0 ; int __cdecl sub_405FC0(HANDLE hNamedPipe, int, int)
.text:00405FC0 sub_405FC0      proc near               ; CODE XREF: sub_405D50+1A↑p
.text:00405FC0                                         ; .text:00408759↓p
.text:00405FC0
.text:00405FC0 FileHandle      = dword ptr -1Ch
.text:00405FC0 var_18          = dword ptr -18h
.text:00405FC0 var_C           = dword ptr -0Ch
.text:00405FC0 var_8           = dword ptr -8
.text:00405FC0 var_4           = dword ptr -4
.text:00405FC0 hNamedPipe      = dword ptr  4
.text:00405FC0 arg_4           = dword ptr  8
.text:00405FC0 arg_8           = dword ptr  0Ch
.text:00405FC0
.text:00405FC0                 sub     esp, 1Ch
.text:00405FC3                 mov     edx, [esp+1Ch+arg_4]
.text:00405FC7                 mov     [esp+1Ch+var_C], ebx
.text:00405FCB                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:00405FCF                 mov     [esp+1Ch+var_8], esi
.text:00405FD3                 mov     esi, [esp+1Ch+arg_8]
.text:00405FD7                 test    ebx, ebx
.text:00405FD9                 mov     [esp+1Ch+var_4], edi
.text:00405FDD                 jnz     short loc_406017
.text:00405FDF                 test    edx, edx
.text:00405FE1                 js      short loc_406037
.text:00405FE3                 test    esi, esi
.text:00405FE5                 jz      short loc_406017
.text:00405FE7                 cld
.text:00405FE8                 mov     eax, ebx
.text:00405FEA                 mov     edi, esi
.text:00405FEC                 mov     ecx, 18h
.text:00405FF1                 rep stosd
.text:00405FF3                 mov     [esp+1Ch+arg_4], esi ; int
.text:00405FF7                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:00405FFA                 call    _get_osfhandle
.text:00405FFF                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:00406003                 mov     ebx, [esp+1Ch+var_C]
.text:00406007                 mov     esi, [esp+1Ch+var_8]
.text:0040600B                 mov     edi, [esp+1Ch+var_4]
.text:0040600F                 add     esp, 1Ch
.text:00406012                 jmp     sub_4063A0
.text:00406017 ; ---------------------------------------------------------------------------
.text:00406017
.text:00406017 loc_406017:                             ; CODE XREF: sub_405FC0+1D↑j
.text:00406017                                         ; sub_405FC0+25↑j
.text:00406017                 call    _errno
.text:0040601C                 mov     dword ptr [eax], 16h
.text:00406022
.text:00406022 loc_406022:                             ; CODE XREF: sub_405FC0+92↓j
.text:00406022                 mov     ebx, [esp+1Ch+var_C]
.text:00406026                 mov     eax, 0FFFFFFFFh
.text:0040602B                 mov     esi, [esp+1Ch+var_8]
.text:0040602F                 mov     edi, [esp+1Ch+var_4]
.text:00406033                 add     esp, 1Ch
.text:00406036                 retn
.text:00406037 ; ---------------------------------------------------------------------------
.text:00406037
.text:00406037 loc_406037:                             ; CODE XREF: sub_405FC0+21↑j
.text:00406037                 mov     [esp+1Ch+var_18], edx
.text:0040603B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:00406042                 call    printf
.text:00406047                 call    _errno
.text:0040604C                 mov     dword ptr [eax], 9
.text:00406052                 jmp     short loc_406022
.text:00406052 sub_405FC0      endp
.text:00406052
.text:00406052 ; ---------------------------------------------------------------------------
.text:00406054                 db 1Ch dup(90h)
.text:00406070 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:00406070                                         ; DATA XREF: .data:off_418054↓o
.text:00406084 ; const CHAR LibFileName[]
.text:00406084 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_4060B0+11↓o
.text:00406084                                         ; sub_406220+C↓o ...
.text:00406091 ; const CHAR ProcName[]
.text:00406091 ProcName        db 'GetFileAttributesExA',0
.text:00406091                                         ; DATA XREF: sub_4060B0+28↓o
.text:004060A6                 align 10h
.text:004060B0
.text:004060B0 ; =============== S U B R O U T I N E =======================================
.text:004060B0
.text:004060B0
.text:004060B0 ; int __cdecl sub_4060B0(LPCSTR lpFileName, int)
.text:004060B0 sub_4060B0      proc near               ; CODE XREF: .text:00407254↓p
.text:004060B0                                         ; sub_407650+37↓p
.text:004060B0
.text:004060B0 lpModuleName    = dword ptr -18Ch
.text:004060B0 lpProcName      = dword ptr -188h
.text:004060B0 var_184         = dword ptr -184h
.text:004060B0 var_170         = dword ptr -170h
.text:004060B0 var_164         = dword ptr -164h
.text:004060B0 hModule         = dword ptr -160h
.text:004060B0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:004060B0 lpFileName      = dword ptr  4
.text:004060B0 arg_4           = dword ptr  8
.text:004060B0
.text:004060B0                 push    ebp
.text:004060B1                 push    edi
.text:004060B2                 push    esi
.text:004060B3                 push    ebx
.text:004060B4                 sub     esp, 17Ch
.text:004060BA                 mov     ebx, [esp+18Ch+arg_4]
.text:004060C1                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:004060C8                 call    GetModuleHandleA
.text:004060CD                 sub     esp, 4
.text:004060D0                 mov     [esp+18Ch+hModule], eax
.text:004060D4                 mov     edx, [esp+18Ch+hModule]
.text:004060D8                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:004060E0                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:004060E3                 call    GetProcAddress
.text:004060E8                 sub     esp, 8
.text:004060EB                 mov     ebp, eax
.text:004060ED                 mov     eax, [esp+18Ch+lpFileName]
.text:004060F4                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:004060F7                 call    GetFileAttributesA
.text:004060FC                 sub     esp, 4
.text:004060FF                 mov     [esp+18Ch+var_164], eax
.text:00406103                 xor     eax, eax
.text:00406105                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040610A                 jz      short loc_406161
.text:0040610C                 cld
.text:0040610D                 mov     ecx, 50h ; 'P'
.text:00406112                 lea     esi, [esp+18Ch+FindFileData]
.text:00406116                 mov     edi, esi
.text:00406118                 test    ebp, ebp
.text:0040611A                 rep stosd
.text:0040611C                 mov     [esp+18Ch+var_170], 0
.text:00406124                 jz      short loc_406145
.text:00406126                 mov     [esp+18Ch+var_184], ebx
.text:0040612A                 mov     ecx, [esp+18Ch+lpFileName]
.text:00406131                 mov     [esp+18Ch+lpProcName], 0
.text:00406139                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040613C                 call    ebp
.text:0040613E                 sub     esp, 0Ch
.text:00406141                 mov     [esp+18Ch+var_170], eax
.text:00406145
.text:00406145 loc_406145:                             ; CODE XREF: sub_4060B0+74↑j
.text:00406145                 mov     eax, [esp+18Ch+var_170]
.text:00406149                 test    eax, eax
.text:0040614B                 jz      short loc_406170
.text:0040614D
.text:0040614D loc_40614D:                             ; CODE XREF: sub_4060B0+131↓j
.text:0040614D                                         ; sub_4060B0+14B↓j
.text:0040614D                 mov     ebx, [esp+18Ch+hModule]
.text:00406151                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:00406154                 call    FreeLibrary
.text:00406159                 sub     esp, 4
.text:0040615C                 mov     eax, 1
.text:00406161
.text:00406161 loc_406161:                             ; CODE XREF: sub_4060B0+5A↑j
.text:00406161                 add     esp, 17Ch
.text:00406167                 pop     ebx
.text:00406168                 pop     esi
.text:00406169                 pop     edi
.text:0040616A                 pop     ebp
.text:0040616B                 retn
.text:0040616B ; ---------------------------------------------------------------------------
.text:0040616C                 align 10h
.text:00406170
.text:00406170 loc_406170:                             ; CODE XREF: sub_4060B0+9B↑j
.text:00406170                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:00406174                 mov     edx, [esp+18Ch+lpFileName]
.text:0040617B                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:0040617E                 call    FindFirstFileA
.text:00406183                 sub     esp, 8
.text:00406186                 xor     ecx, ecx
.text:00406188                 cmp     eax, 0FFFFFFFFh
.text:0040618B                 setnz   cl
.text:0040618E                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:00406192                 mov     [ebx], edi
.text:00406194                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:00406198                 mov     [esp+18Ch+var_170], ecx
.text:0040619C                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:004061A0                 mov     [ebx+8], esi
.text:004061A3                 mov     [ebx+4], ecx
.text:004061A6                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:004061AA                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:004061AE                 mov     [ebx+0Ch], ebp
.text:004061B1                 mov     [ebx+10h], edi
.text:004061B4                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:004061B8                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:004061BC                 mov     [ebx+18h], esi
.text:004061BF                 mov     [ebx+14h], ecx
.text:004061C2                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:004061C6                 mov     [ebx+1Ch], ebp
.text:004061C9                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:004061CD                 mov     [ebx+20h], edi
.text:004061D0                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:004061D3                 call    FindClose
.text:004061D8                 sub     esp, 4
.text:004061DB                 mov     esi, [esp+18Ch+var_170]
.text:004061DF                 test    esi, esi
.text:004061E1                 jnz     loc_40614D
.text:004061E7                 cld
.text:004061E8                 mov     eax, [esp+18Ch+var_170]
.text:004061EC                 mov     ecx, 9
.text:004061F1                 mov     edi, ebx
.text:004061F3                 rep stosd
.text:004061F5                 mov     ebp, [esp+18Ch+var_164]
.text:004061F9                 mov     [ebx], ebp
.text:004061FB                 jmp     loc_40614D
.text:004061FB sub_4060B0      endp
.text:004061FB
.text:004061FB ; ---------------------------------------------------------------------------
.text:00406200 ; const CHAR aFindfirstfilee[]
.text:00406200 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_406220+23↓o
.text:00406211 ; const char Source[]
.text:00406211 Source          db '\*',0               ; DATA XREF: sub_406220:loc_4062AD↓o
.text:00406214                 align 10h
.text:00406220
.text:00406220 ; =============== S U B R O U T I N E =======================================
.text:00406220
.text:00406220
.text:00406220 ; int __cdecl sub_406220(char *Str)
.text:00406220 sub_406220      proc near               ; CODE XREF: .text:00407353↓p
.text:00406220                                         ; sub_407650+3FA↓p ...
.text:00406220
.text:00406220 lpLibFileName   = dword ptr -18Ch
.text:00406220 lpProcName      = dword ptr -188h
.text:00406220 var_184         = dword ptr -184h
.text:00406220 var_180         = dword ptr -180h
.text:00406220 var_17C         = dword ptr -17Ch
.text:00406220 var_178         = dword ptr -178h
.text:00406220 var_164         = dword ptr -164h
.text:00406220 hModule         = dword ptr -160h
.text:00406220 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00406220 Str             = dword ptr  4
.text:00406220
.text:00406220                 push    ebp
.text:00406221                 push    edi
.text:00406222                 xor     edi, edi
.text:00406224                 push    esi
.text:00406225                 push    ebx
.text:00406226                 sub     esp, 17Ch
.text:0040622C                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:00406233                 call    LoadLibraryA
.text:00406238                 sub     esp, 4
.text:0040623B                 mov     [esp+18Ch+hModule], eax
.text:0040623F                 mov     ecx, [esp+18Ch+hModule]
.text:00406243                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0040624B                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:0040624E                 call    GetProcAddress
.text:00406253                 sub     esp, 8
.text:00406256                 mov     edx, [esp+18Ch+Str]
.text:0040625D                 mov     [esp+18Ch+var_164], eax
.text:00406261                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:00406264                 call    strlen
.text:00406269                 lea     edx, [eax+5]
.text:0040626C                 mov     ebx, eax
.text:0040626E                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:00406271                 call    malloc
.text:00406276                 mov     esi, eax
.text:00406278                 test    esi, esi
.text:0040627A                 mov     eax, 1
.text:0040627F                 jz      loc_40635D
.text:00406285                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00406288                 mov     ebp, [esp+18Ch+Str]
.text:0040628F                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:00406293                 call    strcpy
.text:00406298                 movzx   eax, byte ptr [ebx+esi-1]
.text:0040629D                 cmp     al, 2Fh ; '/'
.text:0040629F                 jz      loc_40638B
.text:004062A5                 cmp     al, 5Ch ; '\'
.text:004062A7                 jz      loc_40638B
.text:004062AD
.text:004062AD loc_4062AD:                             ; CODE XREF: sub_406220+170↓j
.text:004062AD                 mov     [esp+18Ch+lpProcName], offset Source ; "\\*"
.text:004062B5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:004062B8                 call    strcat
.text:004062BD                 mov     eax, [esp+18Ch+var_164]
.text:004062C1                 test    eax, eax
.text:004062C3                 jz      loc_406385
.text:004062C9                 mov     [esp+18Ch+var_178], 0
.text:004062D1                 lea     ebp, [esp+18Ch+FindFileData]
.text:004062D5                 mov     [esp+18Ch+var_17C], 0
.text:004062DD                 mov     [esp+18Ch+var_180], 1
.text:004062E5                 mov     [esp+18Ch+var_184], ebp
.text:004062E9                 mov     [esp+18Ch+lpProcName], 0
.text:004062F1                 mov     [esp+18Ch+lpLibFileName], esi
.text:004062F4                 call    [esp+18Ch+var_164]
.text:004062F8                 sub     esp, 18h
.text:004062FB                 mov     ebx, eax
.text:004062FD                 cmp     eax, 0FFFFFFFFh
.text:00406300                 jz      short loc_406368
.text:00406302                 lea     esi, [esi+0]
.text:00406309                 lea     edi, [edi+0]
.text:00406310
.text:00406310 loc_406310:                             ; CODE XREF: sub_406220+109↓j
.text:00406310                                         ; sub_406220+161↓j
.text:00406310                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:00406315                 jz      short loc_406318
.text:00406317                 inc     edi
.text:00406318
.text:00406318 loc_406318:                             ; CODE XREF: sub_406220+F5↑j
.text:00406318                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040631C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040631F                 call    FindNextFileA
.text:00406324                 sub     esp, 8
.text:00406327                 test    eax, eax
.text:00406329                 jnz     short loc_406310
.text:0040632B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040632E                 call    FindClose
.text:00406333                 sub     esp, 4
.text:00406336                 mov     esi, [esp+18Ch+hModule]
.text:0040633A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:0040633D                 call    FreeLibrary
.text:00406342                 sub     esp, 4
.text:00406345                 mov     ebx, [esp+18Ch+Str]
.text:0040634C                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:0040634F                 call    sub_4087F0
.text:00406354                 test    eax, eax
.text:00406356                 jz      short loc_40635B
.text:00406358                 add     edi, 2
.text:0040635B
.text:0040635B loc_40635B:                             ; CODE XREF: sub_406220+136↑j
.text:0040635B                 mov     eax, edi
.text:0040635D
.text:0040635D loc_40635D:                             ; CODE XREF: sub_406220+5F↑j
.text:0040635D                                         ; sub_406220+163↓j
.text:0040635D                 add     esp, 17Ch
.text:00406363                 pop     ebx
.text:00406364                 pop     esi
.text:00406365                 pop     edi
.text:00406366                 pop     ebp
.text:00406367                 retn
.text:00406368 ; ---------------------------------------------------------------------------
.text:00406368
.text:00406368 loc_406368:                             ; CODE XREF: sub_406220+E0↑j
.text:00406368                                         ; sub_406220+169↓j
.text:00406368                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040636C                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:0040636F                 call    FindFirstFileA
.text:00406374                 mov     ebx, eax
.text:00406376                 sub     esp, 8
.text:00406379                 cmp     ebx, 0FFFFFFFFh
.text:0040637C                 mov     eax, 2
.text:00406381                 jnz     short loc_406310
.text:00406383                 jmp     short loc_40635D
.text:00406385 ; ---------------------------------------------------------------------------
.text:00406385
.text:00406385 loc_406385:                             ; CODE XREF: sub_406220+A3↑j
.text:00406385                 lea     ebp, [esp+18Ch+FindFileData]
.text:00406389                 jmp     short loc_406368
.text:0040638B ; ---------------------------------------------------------------------------
.text:0040638B
.text:0040638B loc_40638B:                             ; CODE XREF: sub_406220+7F↑j
.text:0040638B                                         ; sub_406220+87↑j
.text:0040638B                 mov     byte ptr [ebx+esi-1], 0
.text:00406390                 jmp     loc_4062AD
.text:00406390 sub_406220      endp
.text:00406390
.text:00406390 ; ---------------------------------------------------------------------------
.text:00406395                 align 10h
.text:004063A0
.text:004063A0 ; =============== S U B R O U T I N E =======================================
.text:004063A0
.text:004063A0
.text:004063A0 ; int __cdecl sub_4063A0(HANDLE hNamedPipe, int)
.text:004063A0 sub_4063A0      proc near               ; CODE XREF: sub_405FC0+52↑j
.text:004063A0                                         ; sub_40B1F0-36D9↓p
.text:004063A0
.text:004063A0 hFile           = dword ptr -0ECh
.text:004063A0 lpFileInformation= dword ptr -0E8h
.text:004063A0 nBufferSize     = dword ptr -0E4h
.text:004063A0 lpBytesRead     = dword ptr -0E0h
.text:004063A0 lpTotalBytesAvail= dword ptr -0DCh
.text:004063A0 lpBytesLeftThisMessage= dword ptr -0D8h
.text:004063A0 var_C4          = dword ptr -0C4h
.text:004063A0 var_C0          = dword ptr -0C0h
.text:004063A0 var_BC          = dword ptr -0BCh
.text:004063A0 var_B8          = dword ptr -0B8h
.text:004063A0 var_B4          = dword ptr -0B4h
.text:004063A0 var_B0          = dword ptr -0B0h
.text:004063A0 var_AC          = dword ptr -0ACh
.text:004063A0 var_A8          = dword ptr -0A8h
.text:004063A0 TotalBytesAvail = dword ptr -0A0h
.text:004063A0 var_9C          = dword ptr -9Ch
.text:004063A0 var_98          = dword ptr -98h
.text:004063A0 var_94          = dword ptr -94h
.text:004063A0 var_90          = dword ptr -90h
.text:004063A0 var_8C          = dword ptr -8Ch
.text:004063A0 var_88          = dword ptr -88h
.text:004063A0 var_84          = dword ptr -84h
.text:004063A0 var_80          = dword ptr -80h
.text:004063A0 var_7C          = dword ptr -7Ch
.text:004063A0 var_78          = dword ptr -78h
.text:004063A0 var_74          = dword ptr -74h
.text:004063A0 var_70          = dword ptr -70h
.text:004063A0 var_6C          = dword ptr -6Ch
.text:004063A0 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:004063A0 hNamedPipe      = dword ptr  4
.text:004063A0 arg_4           = dword ptr  8
.text:004063A0
.text:004063A0                 push    ebp
.text:004063A1                 mov     eax, 0FFFFFFFFh
.text:004063A6                 push    edi
.text:004063A7                 push    esi
.text:004063A8                 push    ebx
.text:004063A9                 sub     esp, 0DCh
.text:004063AF                 mov     esi, [esp+0ECh+hNamedPipe]
.text:004063B6                 mov     ebp, [esp+0ECh+arg_4]
.text:004063BD                 cmp     esi, 0FFFFFFFFh
.text:004063C0                 jz      loc_406741
.text:004063C6                 cld
.text:004063C7                 xor     eax, eax
.text:004063C9                 lea     ebx, [esp+0ECh+FileInformation]
.text:004063D0                 mov     ecx, 0Dh
.text:004063D5                 mov     edi, ebx
.text:004063D7                 rep stosd
.text:004063D9                 mov     dword ptr [ebp+18h], 1
.text:004063E0                 mov     [esp+0ECh+hFile], esi ; hFile
.text:004063E3                 call    GetFileType
.text:004063E8                 sub     esp, 4
.text:004063EB                 xor     edx, edx
.text:004063ED                 cmp     eax, 2
.text:004063F0                 jz      loc_406820
.text:004063F6                 cmp     eax, 3
.text:004063F9                 jz      loc_406810
.text:004063FF
.text:004063FF loc_4063FF:                             ; CODE XREF: sub_4063A0+475↓j
.text:004063FF                                         ; sub_4063A0+485↓j
.text:004063FF                 or      [ebp+0], edx
.text:00406402                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:00406406                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00406409                 call    GetFileInformationByHandle
.text:0040640E                 sub     esp, 8
.text:00406411                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00406418                 test    ecx, ecx
.text:0040641A                 jnz     short loc_406450
.text:0040641C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00406423                 test    edx, edx
.text:00406425                 jnz     short loc_406450
.text:00406427                 mov     edx, [ebp+0]
.text:0040642A                 and     edx, 0F000h
.text:00406430                 cmp     edx, 1000h
.text:00406436                 jz      loc_4067A6
.text:0040643C
.text:0040643C loc_40643C:                             ; CODE XREF: sub_4063A0+459↓j
.text:0040643C                                         ; sub_4063A0+465↓j
.text:0040643C                 test    ecx, ecx
.text:0040643E                 jnz     short loc_406450
.text:00406440                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00406447                 test    edx, edx
.text:00406449                 jz      loc_406784
.text:0040644F                 nop
.text:00406450
.text:00406450 loc_406450:                             ; CODE XREF: sub_4063A0+7A↑j
.text:00406450                                         ; sub_4063A0+85↑j ...
.text:00406450                 cld
.text:00406451                 mov     esi, ebx
.text:00406453                 mov     dword ptr [ebp+14h], 0
.text:0040645A                 lea     edi, [esp+0ECh+var_9C]
.text:0040645E                 mov     ecx, 0Dh
.text:00406463                 rep movsd
.text:00406465                 xor     ebx, ebx
.text:00406467                 xor     edi, edi
.text:00406469                 mov     edx, [esp+0ECh+var_6C]
.text:00406470                 mov     esi, [esp+0ECh+var_70]
.text:00406474                 or      edx, ebx
.text:00406476                 mov     ebx, [esp+0ECh+var_9C]
.text:0040647A                 mov     [ebp+8], edx
.text:0040647D                 or      edi, esi
.text:0040647F                 xor     edx, edx
.text:00406481                 mov     [ebp+0Ch], edi
.text:00406484                 test    bl, 10h
.text:00406487                 mov     esi, [esp+0ECh+var_80]
.text:0040648B                 setz    dl
.text:0040648E                 mov     [ebp+10h], esi
.text:00406491                 dec     edx
.text:00406492                 and     edx, 0FFFFC000h
.text:00406498                 add     edx, 8000h
.text:0040649E                 or      edx, 124h
.text:004064A4                 test    bl, 1
.text:004064A7                 movzx   eax, dx
.text:004064AA                 jnz     short loc_4064B1
.text:004064AC                 or      eax, 92h
.text:004064B1
.text:004064B1 loc_4064B1:                             ; CODE XREF: sub_4063A0+10A↑j
.text:004064B1                 or      [ebp+0], eax
.text:004064B4                 xor     edx, edx
.text:004064B6                 mov     ebx, [esp+0ECh+var_7C]
.text:004064BA                 mov     ecx, [esp+0ECh+var_78]
.text:004064BE                 mov     eax, edx
.text:004064C0                 xor     esi, esi
.text:004064C2                 mov     edx, [esp+0ECh+var_8C]
.text:004064C6                 mov     edi, ebx
.text:004064C8                 or      eax, edi
.text:004064CA                 mov     [esp+0ECh+var_A8], eax
.text:004064CE                 mov     ebx, ecx
.text:004064D0                 mov     edi, [esp+0ECh+var_74]
.text:004064D4                 or      ebx, esi
.text:004064D6                 mov     esi, [esp+0ECh+var_A8]
.text:004064DA                 mov     [esp+0ECh+var_AC], ebx
.text:004064DE                 xor     ebx, ebx
.text:004064E0                 mov     ecx, [esp+0ECh+var_AC]
.text:004064E4                 mov     [ebp+34h], esi
.text:004064E7                 mov     esi, [esp+0ECh+var_90]
.text:004064EB                 mov     [ebp+18h], edi
.text:004064EE                 xor     edi, edi
.text:004064F0                 or      esi, ebx
.text:004064F2                 mov     [ebp+30h], ecx
.text:004064F5                 or      edi, edx
.text:004064F7                 mov     edx, esi
.text:004064F9                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00406501                 sub     edx, 0D53E8000h
.text:00406507                 mov     ebx, edi
.text:00406509                 sbb     ebx, 19DB1DEh
.text:0040650F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00406513                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040651B                 mov     [esp+0ECh+hFile], edx
.text:0040651E                 call    sub_416600
.text:00406523                 mov     ecx, eax
.text:00406525                 shr     eax, 1Fh
.text:00406528                 dec     eax
.text:00406529                 and     ecx, eax
.text:0040652B                 mov     [ebp+38h], ecx
.text:0040652E                 mov     [esp+0ECh+hFile], esi
.text:00406531                 mov     [esp+0ECh+lpFileInformation], edi
.text:00406535                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040653D                 mov     [esp+0ECh+lpBytesRead], 0
.text:00406545                 call    sub_416750
.text:0040654A                 lea     ebx, [eax+eax*4]
.text:0040654D                 xor     ecx, ecx
.text:0040654F                 lea     esi, [ebx+ebx*4]
.text:00406552                 shl     esi, 2
.text:00406555                 mov     edi, esi
.text:00406557                 shr     edi, 1Fh
.text:0040655A                 dec     edi
.text:0040655B                 and     edi, esi
.text:0040655D                 mov     [ebp+3Ch], edi
.text:00406560                 mov     esi, [esp+0ECh+var_98]
.text:00406564                 xor     edi, edi
.text:00406566                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040656E                 mov     edx, [esp+0ECh+var_94]
.text:00406572                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040657A                 or      esi, ecx
.text:0040657C                 or      edi, edx
.text:0040657E                 mov     edx, esi
.text:00406580                 mov     ecx, edi
.text:00406582                 sub     edx, 0D53E8000h
.text:00406588                 sbb     ecx, 19DB1DEh
.text:0040658E                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00406592                 mov     [esp+0ECh+hFile], edx
.text:00406595                 call    sub_416600
.text:0040659A                 mov     ebx, eax
.text:0040659C                 shr     eax, 1Fh
.text:0040659F                 dec     eax
.text:004065A0                 and     ebx, eax
.text:004065A2                 mov     [ebp+48h], ebx
.text:004065A5                 xor     ebx, ebx
.text:004065A7                 mov     [esp+0ECh+hFile], esi
.text:004065AA                 mov     [esp+0ECh+lpFileInformation], edi
.text:004065AE                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004065B6                 mov     [esp+0ECh+lpBytesRead], 0
.text:004065BE                 call    sub_416750
.text:004065C3                 lea     ecx, [eax+eax*4]
.text:004065C6                 lea     esi, [ecx+ecx*4]
.text:004065C9                 shl     esi, 2
.text:004065CC                 mov     edi, esi
.text:004065CE                 shr     edi, 1Fh
.text:004065D1                 dec     edi
.text:004065D2                 and     edi, esi
.text:004065D4                 mov     [ebp+4Ch], edi
.text:004065D7                 mov     esi, [esp+0ECh+var_88]
.text:004065DB                 xor     edi, edi
.text:004065DD                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004065E5                 mov     edx, [esp+0ECh+var_84]
.text:004065E9                 mov     [esp+0ECh+lpBytesRead], 0
.text:004065F1                 or      esi, ebx
.text:004065F3                 or      edi, edx
.text:004065F5                 mov     edx, esi
.text:004065F7                 mov     ebx, edi
.text:004065F9                 sub     edx, 0D53E8000h
.text:004065FF                 sbb     ebx, 19DB1DEh
.text:00406605                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00406609                 mov     [esp+0ECh+hFile], edx
.text:0040660C                 call    sub_416600
.text:00406611                 mov     ecx, eax
.text:00406613                 shr     eax, 1Fh
.text:00406616                 dec     eax
.text:00406617                 and     ecx, eax
.text:00406619                 mov     [ebp+40h], ecx
.text:0040661C                 mov     [esp+0ECh+lpFileInformation], edi
.text:00406620                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00406628                 mov     [esp+0ECh+lpBytesRead], 0
.text:00406630                 mov     [esp+0ECh+hFile], esi
.text:00406633                 call    sub_416750
.text:00406638                 mov     dword ptr [ebp+50h], 200h
.text:0040663F                 lea     ebx, [eax+eax*4]
.text:00406642                 mov     edi, [esp+0ECh+var_A8]
.text:00406646                 lea     edx, [ebx+ebx*4]
.text:00406649                 mov     eax, [esp+0ECh+var_AC]
.text:0040664D                 shl     edx, 2
.text:00406650                 mov     ecx, edx
.text:00406652                 shr     ecx, 1Fh
.text:00406655                 dec     ecx
.text:00406656                 and     ecx, edx
.text:00406658                 test    edi, edi
.text:0040665A                 mov     edx, [esp+0ECh+var_A8]
.text:0040665E                 mov     [ebp+44h], ecx
.text:00406661                 js      loc_406777
.text:00406667
.text:00406667 loc_406667:                             ; CODE XREF: sub_4063A0+3DF↓j
.text:00406667                 mov     edi, [esp+0ECh+var_AC]
.text:0040666B                 xor     esi, esi
.text:0040666D                 mov     ecx, eax
.text:0040666F                 shrd    ecx, edx, 9
.text:00406673                 mov     ebx, edx
.text:00406675                 mov     eax, esi
.text:00406677                 and     edi, 1FFh
.text:0040667D                 sar     ebx, 9
.text:00406680                 or      eax, edi
.text:00406682                 jz      short loc_40668A
.text:00406684                 add     ecx, 1
.text:00406687                 adc     ebx, 0
.text:0040668A
.text:0040668A loc_40668A:                             ; CODE XREF: sub_4063A0+2E2↑j
.text:0040668A                 mov     [ebp+5Ch], ebx
.text:0040668D                 mov     esi, dword_418050
.text:00406693                 xor     edi, edi
.text:00406695                 mov     [ebp+58h], ecx
.text:00406698                 mov     ebx, dword_418050
.text:0040669E                 mov     ecx, [esp+0ECh+var_A8]
.text:004066A2                 mov     edx, [esp+0ECh+var_AC]
.text:004066A6                 mov     [ebp+50h], ebx
.text:004066A9                 shr     ebx, 9
.text:004066AC                 mov     [esp+0ECh+lpBytesRead], edi
.text:004066B0                 mov     [esp+0ECh+lpFileInformation], ecx
.text:004066B4                 mov     [esp+0ECh+nBufferSize], esi
.text:004066B8                 mov     [esp+0ECh+hFile], edx
.text:004066BB                 call    sub_416600
.text:004066C0                 mov     [esp+0ECh+lpBytesRead], edi
.text:004066C4                 mov     ecx, [esp+0ECh+var_AC]
.text:004066C8                 mov     edi, [esp+0ECh+var_A8]
.text:004066CC                 mov     [esp+0ECh+var_BC], ebx
.text:004066D0                 mov     [esp+0ECh+var_B4], eax
.text:004066D4                 mov     [esp+0ECh+var_B0], edx
.text:004066D8                 mov     [esp+0ECh+var_B8], 0
.text:004066E0                 mov     [esp+0ECh+nBufferSize], esi
.text:004066E4                 mov     [esp+0ECh+hFile], ecx
.text:004066E7                 mov     [esp+0ECh+lpFileInformation], edi
.text:004066EB                 call    sub_416750
.text:004066F0                 mov     ebx, edx
.text:004066F2                 or      ebx, eax
.text:004066F4                 jz      short loc_406750
.text:004066F6                 mov     edi, [esp+0ECh+var_B4]
.text:004066FA                 mov     esi, [esp+0ECh+var_B0]
.text:004066FE                 mov     eax, [esp+0ECh+var_BC]
.text:00406702                 mov     [esp+0ECh+var_C4], edi
.text:00406706                 mov     ecx, [esp+0ECh+var_B8]
.text:0040670A                 add     [esp+0ECh+var_C4], 1
.text:0040670F                 mov     [esp+0ECh+var_C0], esi
.text:00406713                 adc     [esp+0ECh+var_C0], 0
.text:00406718                 mul     [esp+0ECh+var_C4]
.text:0040671C                 mov     edi, [esp+0ECh+var_C0]
.text:00406720                 mov     ebx, edx
.text:00406722                 mov     edx, [esp+0ECh+var_C4]
.text:00406726                 mov     esi, eax
.text:00406728                 mov     eax, ebx
.text:0040672A                 imul    ecx, edx
.text:0040672D                 mov     edx, [esp+0ECh+var_BC]
.text:00406731                 imul    edx, edi
.text:00406734                 add     eax, ecx
.text:00406736                 lea     edi, [edx+eax]
.text:00406739
.text:00406739 loc_406739:                             ; CODE XREF: sub_4063A0+3D5↓j
.text:00406739                 mov     [ebp+58h], esi
.text:0040673C                 xor     eax, eax
.text:0040673E                 mov     [ebp+5Ch], edi
.text:00406741
.text:00406741 loc_406741:                             ; CODE XREF: sub_4063A0+20↑j
.text:00406741                 add     esp, 0DCh
.text:00406747                 pop     ebx
.text:00406748                 pop     esi
.text:00406749                 pop     edi
.text:0040674A                 pop     ebp
.text:0040674B                 retn
.text:0040674B ; ---------------------------------------------------------------------------
.text:0040674C                 align 10h
.text:00406750
.text:00406750 loc_406750:                             ; CODE XREF: sub_4063A0+354↑j
.text:00406750                 mov     eax, [esp+0ECh+var_B4]
.text:00406754                 mov     edi, [esp+0ECh+var_B8]
.text:00406758                 mov     ebx, [esp+0ECh+var_B4]
.text:0040675C                 mul     [esp+0ECh+var_BC]
.text:00406760                 mov     ecx, [esp+0ECh+var_BC]
.text:00406764                 imul    ebx, edi
.text:00406767                 mov     esi, eax
.text:00406769                 mov     eax, [esp+0ECh+var_B0]
.text:0040676D                 add     edx, ebx
.text:0040676F                 imul    ecx, eax
.text:00406772                 lea     edi, [ecx+edx]
.text:00406775                 jmp     short loc_406739
.text:00406777 ; ---------------------------------------------------------------------------
.text:00406777
.text:00406777 loc_406777:                             ; CODE XREF: sub_4063A0+2C1↑j
.text:00406777                 add     eax, 1FFh
.text:0040677C                 adc     edx, 0
.text:0040677F                 jmp     loc_406667
.text:00406784 ; ---------------------------------------------------------------------------
.text:00406784
.text:00406784 loc_406784:                             ; CODE XREF: sub_4063A0+A9↑j
.text:00406784                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00406787                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040678E                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:00406792                 call    GetFileSize
.text:00406797                 sub     esp, 8
.text:0040679A                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:004067A1                 jmp     loc_406450
.text:004067A6 ; ---------------------------------------------------------------------------
.text:004067A6
.text:004067A6 loc_4067A6:                             ; CODE XREF: sub_4063A0+96↑j
.text:004067A6                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:004067AE                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:004067B2                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:004067BA                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:004067BE                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:004067C6                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:004067CE                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:004067D6                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:004067D9                 call    PeekNamedPipe
.text:004067DE                 sub     esp, 18h
.text:004067E1                 test    eax, eax
.text:004067E3                 jz      short loc_4067FE
.text:004067E5                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:004067E9                 xor     eax, eax
.text:004067EB                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:004067F2                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:004067F9                 jmp     loc_40643C
.text:004067FE ; ---------------------------------------------------------------------------
.text:004067FE
.text:004067FE loc_4067FE:                             ; CODE XREF: sub_4063A0+443↑j
.text:004067FE                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00406805                 jmp     loc_40643C
.text:00406805 ; ---------------------------------------------------------------------------
.text:0040680A                 align 10h
.text:00406810
.text:00406810 loc_406810:                             ; CODE XREF: sub_4063A0+59↑j
.text:00406810                 mov     edx, 1000h
.text:00406815                 jmp     loc_4063FF
.text:00406815 ; ---------------------------------------------------------------------------
.text:0040681A                 align 10h
.text:00406820
.text:00406820 loc_406820:                             ; CODE XREF: sub_4063A0+50↑j
.text:00406820                 mov     edx, 2000h
.text:00406825                 jmp     loc_4063FF
.text:00406825 sub_4063A0      endp
.text:00406825
.text:00406825 ; ---------------------------------------------------------------------------
.text:0040682A aLnk_0          db '.lnk',0             ; DATA XREF: sub_406870+E0↓o
.text:0040682A                                         ; .text:00406F1A↓o ...
.text:0040682F ; const CHAR aKernel32[]
.text:0040682F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_406870+12D↓o
.text:0040682F                                         ; .text:004075CB↓o
.text:00406838 ; const CHAR aGetcompressedf[]
.text:00406838 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00406838                                         ; DATA XREF: sub_406870+13E↓o
.text:00406838                                         ; .text:004075DC↓o
.text:0040684F ; const CHAR aGetbinarytypea[]
.text:0040684F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_406870+333↓o
.text:0040684F                                         ; .text:00406F76↓o ...
.text:0040685E ; const char aPathext[]
.text:0040685E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_406870:loc_406C57↓o
.text:0040685E                                         ; .text:loc_407020↓o ...
.text:00406866                 align 10h
.text:00406870
.text:00406870 ; =============== S U B R O U T I N E =======================================
.text:00406870
.text:00406870
.text:00406870 ; int __cdecl sub_406870(char *String1, int)
.text:00406870 sub_406870      proc near               ; CODE XREF: sub_407650+3CD↓p
.text:00406870                                         ; sub_40B1F0-36BB↓p
.text:00406870
.text:00406870 Str             = dword ptr -6Ch
.text:00406870 lpProcName      = dword ptr -68h
.text:00406870 var_64          = dword ptr -64h
.text:00406870 var_60          = dword ptr -60h
.text:00406870 var_5C          = dword ptr -5Ch
.text:00406870 var_4C          = dword ptr -4Ch
.text:00406870 var_48          = dword ptr -48h
.text:00406870 var_44          = dword ptr -44h
.text:00406870 var_40          = dword ptr -40h
.text:00406870 var_3C          = dword ptr -3Ch
.text:00406870 var_38          = dword ptr -38h
.text:00406870 lpRootPathName  = dword ptr -30h
.text:00406870 var_2C          = byte ptr -2Ch
.text:00406870 var_28          = dword ptr -28h
.text:00406870 var_24          = dword ptr -24h
.text:00406870 var_20          = dword ptr -20h
.text:00406870 var_1C          = dword ptr -1Ch
.text:00406870 var_18          = byte ptr -18h
.text:00406870 String1         = dword ptr  4
.text:00406870 arg_4           = dword ptr  8
.text:00406870
.text:00406870                 push    ebp
.text:00406871                 push    edi
.text:00406872                 push    esi
.text:00406873                 push    ebx
.text:00406874                 sub     esp, 5Ch
.text:00406877                 mov     edx, [esp+6Ch+String1]
.text:0040687B                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040687E                 call    sub_408420
.text:00406883                 mov     [esp+6Ch+Str], eax
.text:00406886                 call    sub_407FF0
.text:0040688B                 mov     [esp+6Ch+lpRootPathName], eax
.text:0040688F                 test    eax, eax
.text:00406891                 jz      loc_406AC3
.text:00406897                 mov     [esp+6Ch+Str], eax ; Str
.text:0040689A                 call    strlen
.text:0040689F                 mov     edx, [esp+6Ch+arg_4]
.text:004068A3                 mov     ebx, eax
.text:004068A5                 mov     esi, [edx+0Ch]
.text:004068A8                 mov     edi, [edx+8]
.text:004068AB                 mov     eax, esi
.text:004068AD                 or      eax, edi
.text:004068AF                 jz      loc_406CD0
.text:004068B5                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:004068B9                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:004068BC                 call    GetDriveTypeA
.text:004068C1                 sub     esp, 4
.text:004068C4                 cmp     eax, 4
.text:004068C7                 jz      loc_406CD0
.text:004068CD
.text:004068CD loc_4068CD:                             ; CODE XREF: sub_406870+48A↓j
.text:004068CD                                         ; sub_406870+4B2↓j
.text:004068CD                 mov     edx, [esp+6Ch+arg_4]
.text:004068D1                 mov     esi, [edx+14h]
.text:004068D4                 mov     edi, [edx+10h]
.text:004068D7                 mov     ecx, esi
.text:004068D9                 or      ecx, edi
.text:004068DB                 jnz     short loc_406905
.text:004068DD                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:004068E1                 xor     esi, esi
.text:004068E3                 xor     edi, edi
.text:004068E5                 test    ebp, ebp
.text:004068E7                 jz      short loc_4068F7
.text:004068E9                 movzx   ebx, byte ptr [ebp+0]
.text:004068ED                 test    bl, bl
.text:004068EF                 mov     cl, bl
.text:004068F1                 jnz     loc_406C81
.text:004068F7
.text:004068F7 loc_4068F7:                             ; CODE XREF: sub_406870+77↑j
.text:004068F7                 xor     eax, eax
.text:004068F9                 xor     edx, edx
.text:004068FB
.text:004068FB loc_4068FB:                             ; CODE XREF: sub_406870+458↓j
.text:004068FB                 mov     ebp, [esp+6Ch+arg_4]
.text:004068FF                 mov     [ebp+10h], eax
.text:00406902                 mov     [ebp+14h], edx
.text:00406905
.text:00406905 loc_406905:                             ; CODE XREF: sub_406870+6B↑j
.text:00406905                 mov     edi, [esp+6Ch+String1]
.text:00406909                 xor     ebx, ebx
.text:0040690B                 test    edi, edi
.text:0040690D                 jz      loc_406B83
.text:00406913                 mov     esi, [esp+6Ch+String1]
.text:00406917                 cmp     byte ptr [esi], 0
.text:0040691A                 jnz     loc_406B90
.text:00406920
.text:00406920 loc_406920:                             ; CODE XREF: sub_406870+38C↓j
.text:00406920                                         ; sub_406870+397↓j
.text:00406920                 mov     ebp, [esp+6Ch+String1]
.text:00406924                 test    ebp, ebp
.text:00406926                 jz      loc_406B83
.text:0040692C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00406934                 mov     edi, [esp+6Ch+String1]
.text:00406938                 mov     [esp+6Ch+Str], edi ; Str
.text:0040693B                 call    strrchr
.text:00406940                 test    eax, eax
.text:00406942                 jz      loc_406B83
.text:00406948                 cld
.text:00406949                 mov     ecx, 5
.text:0040694E                 mov     esi, eax
.text:00406950                 mov     edi, offset aLnk_0 ; ".lnk"
.text:00406955                 repe cmpsb
.text:00406957                 setz    cl
.text:0040695A                 movzx   eax, cl
.text:0040695D                 lea     esi, [esi+0]
.text:00406960
.text:00406960 loc_406960:                             ; CODE XREF: sub_406870+315↓j
.text:00406960                 test    eax, eax
.text:00406962                 jz      short loc_40696A
.text:00406964                 or      ebx, 0A000h
.text:0040696A
.text:0040696A loc_40696A:                             ; CODE XREF: sub_406870+F2↑j
.text:0040696A                 mov     esi, [esp+6Ch+arg_4]
.text:0040696E                 xor     ecx, ecx
.text:00406970                 mov     edi, ds:dword_419250
.text:00406976                 or      [esi], ebx
.text:00406978                 mov     ebx, [esi+14h]
.text:0040697B                 mov     ebp, [esi+10h]
.text:0040697E                 mov     eax, ebx
.text:00406980                 xor     eax, ecx
.text:00406982                 xor     ebp, edi
.text:00406984                 or      eax, ebp
.text:00406986                 jnz     loc_406B10
.text:0040698C
.text:0040698C loc_40698C:                             ; CODE XREF: sub_406870+30E↓j
.text:0040698C                 mov     ecx, dword_418050
.text:00406992                 xor     esi, esi
.text:00406994                 xor     edi, edi
.text:00406996                 mov     edx, [esp+6Ch+arg_4]
.text:0040699A                 mov     [edx+50h], ecx
.text:0040699D                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:004069A4                 call    LoadLibraryA
.text:004069A9                 sub     esp, 4
.text:004069AC                 mov     ebp, eax
.text:004069AE                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:004069B6                 mov     [esp+6Ch+Str], eax ; hModule
.text:004069B9                 call    GetProcAddress
.text:004069BE                 sub     esp, 8
.text:004069C1                 test    eax, eax
.text:004069C3                 jz      short loc_4069F8
.text:004069C5                 mov     ebx, [esp+6Ch+String1]
.text:004069C9                 lea     esi, [esp+6Ch+var_2C]
.text:004069CD                 mov     [esp+6Ch+lpProcName], esi
.text:004069D1                 mov     [esp+6Ch+Str], ebx
.text:004069D4                 call    eax
.text:004069D6                 sub     esp, 8
.text:004069D9                 mov     ebx, eax
.text:004069DB                 cmp     eax, 0FFFFFFFFh
.text:004069DE                 jz      loc_406AF9
.text:004069E4
.text:004069E4 loc_4069E4:                             ; CODE XREF: sub_406870+29A↓j
.text:004069E4                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:004069E8                 mov     ecx, ebx
.text:004069EA                 xor     edi, edi
.text:004069EC                 xor     ebx, ebx
.text:004069EE                 mov     edx, esi
.text:004069F0                 mov     esi, ecx
.text:004069F2                 or      esi, edi
.text:004069F4                 mov     edi, ebx
.text:004069F6                 or      edi, edx
.text:004069F8
.text:004069F8 loc_4069F8:                             ; CODE XREF: sub_406870+153↑j
.text:004069F8                                         ; sub_406870+294↓j
.text:004069F8                 test    ebp, ebp
.text:004069FA                 jz      short loc_406A07
.text:004069FC                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:004069FF                 call    FreeLibrary
.text:00406A04                 sub     esp, 4
.text:00406A07
.text:00406A07 loc_406A07:                             ; CODE XREF: sub_406870+18A↑j
.text:00406A07                 mov     ebp, edi
.text:00406A09                 mov     edx, ebp
.text:00406A0B                 mov     edi, esi
.text:00406A0D                 or      edx, esi
.text:00406A0F                 jnz     short loc_406A1B
.text:00406A11                 mov     eax, [esp+6Ch+arg_4]
.text:00406A15                 mov     edi, [eax+30h]
.text:00406A18                 mov     ebp, [eax+34h]
.text:00406A1B
.text:00406A1B loc_406A1B:                             ; CODE XREF: sub_406870+19F↑j
.text:00406A1B                 mov     [esp+6Ch+lpProcName], ebp
.text:00406A1F                 mov     ebx, dword_418050
.text:00406A25                 xor     esi, esi
.text:00406A27                 mov     [esp+6Ch+var_60], esi
.text:00406A2B                 mov     [esp+6Ch+Str], edi
.text:00406A2E                 mov     [esp+6Ch+var_64], ebx
.text:00406A32                 call    sub_416600
.text:00406A37                 mov     [esp+6Ch+var_3C], eax
.text:00406A3B                 mov     ecx, dword_418050
.text:00406A41                 mov     [esp+6Ch+lpProcName], ebp
.text:00406A45                 mov     [esp+6Ch+var_38], edx
.text:00406A49                 shr     ecx, 9
.text:00406A4C                 mov     [esp+6Ch+var_44], ecx
.text:00406A50                 mov     [esp+6Ch+var_40], 0
.text:00406A58                 mov     [esp+6Ch+var_64], ebx
.text:00406A5C                 mov     [esp+6Ch+var_60], esi
.text:00406A60                 mov     [esp+6Ch+Str], edi
.text:00406A63                 call    sub_416750
.text:00406A68                 mov     ebp, edx
.text:00406A6A                 or      ebp, eax
.text:00406A6C                 jz      short loc_406AD0
.text:00406A6E                 mov     ebp, [esp+6Ch+var_3C]
.text:00406A72                 mov     esi, [esp+6Ch+var_38]
.text:00406A76                 mov     eax, [esp+6Ch+var_44]
.text:00406A7A                 mov     [esp+6Ch+var_4C], ebp
.text:00406A7E                 mov     ecx, [esp+6Ch+var_40]
.text:00406A82                 mov     ebx, [esp+6Ch+var_44]
.text:00406A86                 add     [esp+6Ch+var_4C], 1
.text:00406A8B                 mov     [esp+6Ch+var_48], esi
.text:00406A8F                 mov     edi, [esp+6Ch+var_4C]
.text:00406A93                 adc     [esp+6Ch+var_48], 0
.text:00406A98                 mul     [esp+6Ch+var_4C]
.text:00406A9C                 imul    ecx, edi
.text:00406A9F                 mov     esi, eax
.text:00406AA1                 mov     eax, [esp+6Ch+var_48]
.text:00406AA5                 add     edx, ecx
.text:00406AA7                 imul    ebx, eax
.text:00406AAA                 lea     edi, [ebx+edx]
.text:00406AAD
.text:00406AAD loc_406AAD:                             ; CODE XREF: sub_406870+287↓j
.text:00406AAD                 mov     ebx, [esp+6Ch+arg_4]
.text:00406AB1                 mov     [ebx+58h], esi
.text:00406AB4                 mov     esi, [esp+6Ch+lpRootPathName]
.text:00406AB8                 mov     [ebx+5Ch], edi
.text:00406ABB                 mov     [esp+6Ch+Str], esi ; Block
.text:00406ABE                 call    free
.text:00406AC3
.text:00406AC3 loc_406AC3:                             ; CODE XREF: sub_406870+21↑j
.text:00406AC3                 add     esp, 5Ch
.text:00406AC6                 xor     eax, eax
.text:00406AC8                 pop     ebx
.text:00406AC9                 pop     esi
.text:00406ACA                 pop     edi
.text:00406ACB                 pop     ebp
.text:00406ACC                 retn
.text:00406ACC ; ---------------------------------------------------------------------------
.text:00406ACD                 align 10h
.text:00406AD0
.text:00406AD0 loc_406AD0:                             ; CODE XREF: sub_406870+1FC↑j
.text:00406AD0                 mov     eax, [esp+6Ch+var_3C]
.text:00406AD4                 mov     edi, [esp+6Ch+var_40]
.text:00406AD8                 mov     ecx, [esp+6Ch+var_3C]
.text:00406ADC                 mul     [esp+6Ch+var_44]
.text:00406AE0                 mov     ebx, [esp+6Ch+var_44]
.text:00406AE4                 imul    ecx, edi
.text:00406AE7                 mov     ebp, edx
.text:00406AE9                 mov     esi, eax
.text:00406AEB                 mov     edx, [esp+6Ch+var_38]
.text:00406AEF                 add     ebp, ecx
.text:00406AF1                 imul    ebx, edx
.text:00406AF4                 lea     edi, [ebx+ebp]
.text:00406AF7                 jmp     short loc_406AAD
.text:00406AF9 ; ---------------------------------------------------------------------------
.text:00406AF9
.text:00406AF9 loc_406AF9:                             ; CODE XREF: sub_406870+16E↑j
.text:00406AF9                 call    GetLastError
.text:00406AFE                 xor     esi, esi
.text:00406B00                 xor     edi, edi
.text:00406B02                 test    eax, eax
.text:00406B04                 jnz     loc_4069F8
.text:00406B0A                 jmp     loc_4069E4
.text:00406B0A ; ---------------------------------------------------------------------------
.text:00406B0F                 align 10h
.text:00406B10
.text:00406B10 loc_406B10:                             ; CODE XREF: sub_406870+116↑j
.text:00406B10                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00406B14                 lea     ecx, [esp+6Ch+var_20]
.text:00406B18                 lea     ebx, [esp+6Ch+var_1C]
.text:00406B1C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00406B20                 lea     edi, [esp+6Ch+var_24]
.text:00406B24                 lea     ebp, [esp+6Ch+var_28]
.text:00406B28                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:00406B2C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:00406B30                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:00406B34                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00406B37                 call    sub_408E70
.text:00406B3C                 test    eax, eax
.text:00406B3E                 jnz     short loc_406B60
.text:00406B40                 mov     [esp+6Ch+var_28], 1
.text:00406B48                 mov     [esp+6Ch+var_24], 200h
.text:00406B50                 mov     [esp+6Ch+var_20], 0
.text:00406B58                 mov     [esp+6Ch+var_1C], 0
.text:00406B60
.text:00406B60 loc_406B60:                             ; CODE XREF: sub_406870+2CE↑j
.text:00406B60                 mov     ebp, [esp+6Ch+var_24]
.text:00406B64                 mov     edi, [esp+6Ch+var_28]
.text:00406B68                 mov     eax, [esp+6Ch+arg_4]
.text:00406B6C                 imul    ebp, edi
.text:00406B6F                 mov     esi, [eax+10h]
.text:00406B72                 mov     dword_418050, ebp
.text:00406B78                 mov     ds:dword_419250, esi
.text:00406B7E                 jmp     loc_40698C
.text:00406B83 ; ---------------------------------------------------------------------------
.text:00406B83
.text:00406B83 loc_406B83:                             ; CODE XREF: sub_406870+9D↑j
.text:00406B83                                         ; sub_406870+B6↑j ...
.text:00406B83                 xor     eax, eax
.text:00406B85                 jmp     loc_406960
.text:00406B85 ; ---------------------------------------------------------------------------
.text:00406B8A                 align 10h
.text:00406B90
.text:00406B90 loc_406B90:                             ; CODE XREF: sub_406870+AA↑j
.text:00406B90                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:00406B97                 xor     ebp, ebp
.text:00406B99                 call    GetModuleHandleA
.text:00406B9E                 sub     esp, 4
.text:00406BA1                 mov     edi, eax
.text:00406BA3                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00406BAB                 mov     [esp+6Ch+Str], eax ; hModule
.text:00406BAE                 call    GetProcAddress
.text:00406BB3                 sub     esp, 8
.text:00406BB6                 mov     edx, eax
.text:00406BB8                 test    eax, eax
.text:00406BBA                 jz      short loc_406BD4
.text:00406BBC                 mov     eax, [esp+6Ch+String1]
.text:00406BC0                 lea     ecx, [esp+6Ch+var_18]
.text:00406BC4                 mov     [esp+6Ch+lpProcName], ecx
.text:00406BC8                 mov     [esp+6Ch+Str], eax
.text:00406BCB                 call    edx
.text:00406BCD                 sub     esp, 8
.text:00406BD0                 test    eax, eax
.text:00406BD2                 jnz     short loc_406C38
.text:00406BD4
.text:00406BD4 loc_406BD4:                             ; CODE XREF: sub_406870+34A↑j
.text:00406BD4                 mov     edx, ds:Str
.text:00406BDA                 test    edx, edx
.text:00406BDC                 jz      short loc_406C57
.text:00406BDE
.text:00406BDE loc_406BDE:                             ; CODE XREF: sub_406870+3FA↓j
.text:00406BDE                                         ; sub_406870+40C↓j
.text:00406BDE                 mov     eax, [esp+6Ch+String1]
.text:00406BE2                 test    eax, eax
.text:00406BE4                 jz      short loc_406BEF
.text:00406BE6                 mov     esi, [esp+6Ch+String1]
.text:00406BEA                 cmp     byte ptr [esi], 0
.text:00406BED                 jnz     short loc_406C0C
.text:00406BEF
.text:00406BEF loc_406BEF:                             ; CODE XREF: sub_406870+374↑j
.text:00406BEF                                         ; sub_406870+3B0↓j ...
.text:00406BEF                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00406BF2                 call    FreeLibrary
.text:00406BF7                 sub     esp, 4
.text:00406BFA                 test    ebp, ebp
.text:00406BFC                 jz      loc_406920
.text:00406C02                 mov     ebx, 49h ; 'I'
.text:00406C07                 jmp     loc_406920
.text:00406C0C ; ---------------------------------------------------------------------------
.text:00406C0C
.text:00406C0C loc_406C0C:                             ; CODE XREF: sub_406870+37D↑j
.text:00406C0C                 mov     [esp+6Ch+Str], esi ; Str
.text:00406C0F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00406C17                 call    strrchr
.text:00406C1C                 test    eax, eax
.text:00406C1E                 mov     esi, eax
.text:00406C20                 jz      short loc_406BEF
.text:00406C22                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:00406C26                 mov     ecx, ds:Str
.text:00406C2C                 mov     [esp+6Ch+Str], ecx ; Str
.text:00406C2F                 call    strstr
.text:00406C34                 test    eax, eax
.text:00406C36                 jz      short loc_406C3F
.text:00406C38
.text:00406C38 loc_406C38:                             ; CODE XREF: sub_406870+362↑j
.text:00406C38                                         ; sub_406870+3E5↓j
.text:00406C38                 mov     ebp, 1
.text:00406C3D                 jmp     short loc_406BEF
.text:00406C3F ; ---------------------------------------------------------------------------
.text:00406C3F
.text:00406C3F loc_406C3F:                             ; CODE XREF: sub_406870+3C6↑j
.text:00406C3F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:00406C43                 mov     edx, off_418054 ; ".com;.exe;.bat;.cmd"
.text:00406C49                 mov     [esp+6Ch+Str], edx ; Str
.text:00406C4C                 call    strstr
.text:00406C51                 test    eax, eax
.text:00406C53                 jz      short loc_406BEF
.text:00406C55                 jmp     short loc_406C38
.text:00406C57 ; ---------------------------------------------------------------------------
.text:00406C57
.text:00406C57 loc_406C57:                             ; CODE XREF: sub_406870+36C↑j
.text:00406C57                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:00406C5E                 call    getenv
.text:00406C63                 mov     ds:Str, eax
.text:00406C68                 test    eax, eax
.text:00406C6A                 jnz     loc_406BDE
.text:00406C70                 mov     esi, off_418054 ; ".com;.exe;.bat;.cmd"
.text:00406C76                 mov     ds:Str, esi
.text:00406C7C                 jmp     loc_406BDE
.text:00406C81 ; ---------------------------------------------------------------------------
.text:00406C81
.text:00406C81 loc_406C81:                             ; CODE XREF: sub_406870+81↑j
.text:00406C81                                         ; sub_406870+452↓j
.text:00406C81                 shld    edi, esi, 8
.text:00406C85                 movsx   eax, cl
.text:00406C88                 shl     esi, 8
.text:00406C8B                 cdq
.text:00406C8C                 add     esi, eax
.text:00406C8E                 adc     edi, edx
.text:00406C90                 mov     edx, edi
.text:00406C92                 xor     ebx, ebx
.text:00406C94                 and     edx, 0FF000000h
.text:00406C9A                 mov     eax, edx
.text:00406C9C                 or      eax, ebx
.text:00406C9E                 jz      short loc_406CB9
.text:00406CA0                 mov     ecx, edx
.text:00406CA2                 xor     eax, eax
.text:00406CA4                 shr     ecx, 10h
.text:00406CA7                 mov     edx, esi
.text:00406CA9                 xor     edx, ecx
.text:00406CAB                 mov     ecx, edi
.text:00406CAD                 xor     ecx, eax
.text:00406CAF                 mov     esi, edx
.text:00406CB1                 mov     edi, ecx
.text:00406CB3                 and     edi, 0FFFFFFh
.text:00406CB9
.text:00406CB9 loc_406CB9:                             ; CODE XREF: sub_406870+42E↑j
.text:00406CB9                 inc     ebp
.text:00406CBA                 movzx   ebx, byte ptr [ebp+0]
.text:00406CBE                 test    bl, bl
.text:00406CC0                 mov     cl, bl
.text:00406CC2                 jnz     short loc_406C81
.text:00406CC4                 mov     eax, esi
.text:00406CC6                 mov     edx, edi
.text:00406CC8                 jmp     loc_4068FB
.text:00406CC8 ; ---------------------------------------------------------------------------
.text:00406CCD                 align 10h
.text:00406CD0
.text:00406CD0 loc_406CD0:                             ; CODE XREF: sub_406870+3F↑j
.text:00406CD0                                         ; sub_406870+57↑j
.text:00406CD0                 mov     edi, [esp+6Ch+lpRootPathName]
.text:00406CD4                 mov     ebp, [esp+6Ch+String1]
.text:00406CD8                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:00406CDC                 mov     [esp+6Ch+Str], ebp ; String1
.text:00406CDF                 call    _stricmp
.text:00406CE4                 test    eax, eax
.text:00406CE6                 jnz     short loc_406D00
.text:00406CE8                 mov     ebx, [esp+6Ch+arg_4]
.text:00406CEC                 mov     dword ptr [ebx+8], 5
.text:00406CF3                 mov     dword ptr [ebx+0Ch], 50000h
.text:00406CFA                 jmp     loc_4068CD
.text:00406CFA ; ---------------------------------------------------------------------------
.text:00406CFF                 align 10h
.text:00406D00
.text:00406D00 loc_406D00:                             ; CODE XREF: sub_406870+476↑j
.text:00406D00                 mov     ebp, [esp+6Ch+String1]
.text:00406D04                 xor     esi, esi
.text:00406D06                 xor     edi, edi
.text:00406D08                 add     ebp, ebx
.text:00406D0A                 jz      short loc_406D14
.text:00406D0C                 movzx   ecx, byte ptr [ebp+0]
.text:00406D10                 test    cl, cl
.text:00406D12                 jnz     short loc_406D27
.text:00406D14
.text:00406D14 loc_406D14:                             ; CODE XREF: sub_406870+49A↑j
.text:00406D14                 xor     eax, eax
.text:00406D16                 xor     edx, edx
.text:00406D18
.text:00406D18 loc_406D18:                             ; CODE XREF: sub_406870+4FE↓j
.text:00406D18                 mov     ebp, [esp+6Ch+arg_4]
.text:00406D1C                 mov     [ebp+8], eax
.text:00406D1F                 mov     [ebp+0Ch], edx
.text:00406D22                 jmp     loc_4068CD
.text:00406D27 ; ---------------------------------------------------------------------------
.text:00406D27
.text:00406D27 loc_406D27:                             ; CODE XREF: sub_406870+4A2↑j
.text:00406D27                                         ; sub_406870+4F8↓j
.text:00406D27                 shld    edi, esi, 8
.text:00406D2B                 movsx   eax, cl
.text:00406D2E                 shl     esi, 8
.text:00406D31                 cdq
.text:00406D32                 add     esi, eax
.text:00406D34                 adc     edi, edx
.text:00406D36                 mov     edx, edi
.text:00406D38                 xor     ebx, ebx
.text:00406D3A                 and     edx, 0FF000000h
.text:00406D40                 mov     eax, edx
.text:00406D42                 or      eax, ebx
.text:00406D44                 jz      short loc_406D5F
.text:00406D46                 mov     ecx, edx
.text:00406D48                 xor     eax, eax
.text:00406D4A                 shr     ecx, 10h
.text:00406D4D                 mov     edx, esi
.text:00406D4F                 xor     edx, ecx
.text:00406D51                 mov     ecx, edi
.text:00406D53                 xor     ecx, eax
.text:00406D55                 mov     esi, edx
.text:00406D57                 mov     edi, ecx
.text:00406D59                 and     edi, 0FFFFFFh
.text:00406D5F
.text:00406D5F loc_406D5F:                             ; CODE XREF: sub_406870+4D4↑j
.text:00406D5F                 inc     ebp
.text:00406D60                 movzx   ebx, byte ptr [ebp+0]
.text:00406D64                 test    bl, bl
.text:00406D66                 mov     cl, bl
.text:00406D68                 jnz     short loc_406D27
.text:00406D6A                 mov     eax, esi
.text:00406D6C                 mov     edx, edi
.text:00406D6E                 jmp     short loc_406D18
.text:00406D6E sub_406870      endp
.text:00406D6E
.text:00406D70
.text:00406D70 ; =============== S U B R O U T I N E =======================================
.text:00406D70
.text:00406D70
.text:00406D70 ; int __cdecl sub_406D70(LPCSTR)
.text:00406D70 sub_406D70      proc near               ; CODE XREF: sub_408540+CA↓p
.text:00406D70
.text:00406D70 lpRootPathName  = dword ptr -83Ch
.text:00406D70 lpVolumeNameBuffer= dword ptr -838h
.text:00406D70 nVolumeNameSize = dword ptr -834h
.text:00406D70 lpVolumeSerialNumber= dword ptr -830h
.text:00406D70 lpMaximumComponentLength= dword ptr -82Ch
.text:00406D70 lpFileSystemFlags= dword ptr -828h
.text:00406D70 lpFileSystemNameBuffer= dword ptr -824h
.text:00406D70 nFileSystemNameSize= dword ptr -820h
.text:00406D70 VolumeSerialNumber= dword ptr -818h
.text:00406D70 MaximumComponentLength= dword ptr -814h
.text:00406D70 FileSystemFlags = dword ptr -810h
.text:00406D70 FileSystemNameBuffer= byte ptr -80Ch
.text:00406D70 VolumeNameBuffer= byte ptr -40Ch
.text:00406D70 var_4           = dword ptr -4
.text:00406D70 arg_0           = dword ptr  4
.text:00406D70
.text:00406D70                 sub     esp, 83Ch
.text:00406D76                 mov     [esp+83Ch+var_4], ebx
.text:00406D7D                 mov     ebx, [esp+83Ch+arg_0]
.text:00406D84                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:00406D87                 call    sub_408420
.text:00406D8C                 mov     [esp+83Ch+lpRootPathName], eax
.text:00406D8F                 call    sub_407FF0
.text:00406D94                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:00406D97                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:00406D9B                 mov     ebx, eax
.text:00406D9D                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:00406DA1                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:00406DA5                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:00406DA9                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:00406DAD                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:00406DB1                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00406DB5                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:00406DBC                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00406DC0                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:00406DC4                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00406DCC                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00406DD4                 call    GetVolumeInformationA
.text:00406DD9                 sub     esp, 20h
.text:00406DDC                 test    eax, eax
.text:00406DDE                 setz    cl
.text:00406DE1                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:00406DE4                 movzx   edx, cl
.text:00406DE7                 dec     edx
.text:00406DE8                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:00406DEC                 call    free
.text:00406DF1                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00406DF5                 mov     ebx, [esp+83Ch+var_4]
.text:00406DFC                 add     esp, 83Ch
.text:00406E02                 retn
.text:00406E02 sub_406D70      endp
.text:00406E02
.text:00406E02 ; ---------------------------------------------------------------------------
.text:00406E03                 align 10h
.text:00406E10                 push    ebp
.text:00406E11                 push    edi
.text:00406E12                 xor     edi, edi
.text:00406E14                 push    esi
.text:00406E15                 xor     esi, esi
.text:00406E17                 push    ebx
.text:00406E18                 mov     ebp, [esp+14h]
.text:00406E1C                 test    ebp, ebp
.text:00406E1E                 jz      short loc_406E28
.text:00406E20                 movzx   ecx, byte ptr [ebp+0]
.text:00406E24                 test    cl, cl
.text:00406E26                 jnz     short loc_406E31
.text:00406E28
.text:00406E28 loc_406E28:                             ; CODE XREF: .text:00406E1E↑j
.text:00406E28                 xor     eax, eax
.text:00406E2A                 xor     edx, edx
.text:00406E2C
.text:00406E2C loc_406E2C:                             ; CODE XREF: .text:00406E78↓j
.text:00406E2C                 pop     ebx
.text:00406E2D                 pop     esi
.text:00406E2E                 pop     edi
.text:00406E2F                 pop     ebp
.text:00406E30                 retn
.text:00406E31 ; ---------------------------------------------------------------------------
.text:00406E31
.text:00406E31 loc_406E31:                             ; CODE XREF: .text:00406E26↑j
.text:00406E31                                         ; .text:00406E72↓j
.text:00406E31                 shld    edi, esi, 8
.text:00406E35                 movsx   eax, cl
.text:00406E38                 shl     esi, 8
.text:00406E3B                 cdq
.text:00406E3C                 add     esi, eax
.text:00406E3E                 adc     edi, edx
.text:00406E40                 mov     edx, edi
.text:00406E42                 xor     ebx, ebx
.text:00406E44                 and     edx, 0FF000000h
.text:00406E4A                 mov     eax, edx
.text:00406E4C                 or      eax, ebx
.text:00406E4E                 jz      short loc_406E69
.text:00406E50                 mov     ecx, edx
.text:00406E52                 xor     eax, eax
.text:00406E54                 shr     ecx, 10h
.text:00406E57                 mov     edx, esi
.text:00406E59                 xor     edx, ecx
.text:00406E5B                 mov     ecx, edi
.text:00406E5D                 xor     ecx, eax
.text:00406E5F                 mov     esi, edx
.text:00406E61                 mov     edi, ecx
.text:00406E63                 and     edi, 0FFFFFFh
.text:00406E69
.text:00406E69 loc_406E69:                             ; CODE XREF: .text:00406E4E↑j
.text:00406E69                 inc     ebp
.text:00406E6A                 movzx   ebx, byte ptr [ebp+0]
.text:00406E6E                 test    bl, bl
.text:00406E70                 mov     cl, bl
.text:00406E72                 jnz     short loc_406E31
.text:00406E74                 mov     eax, esi
.text:00406E76                 mov     edx, edi
.text:00406E78                 jmp     short loc_406E2C
.text:00406E78 ; ---------------------------------------------------------------------------
.text:00406E7A                 align 10h
.text:00406E80                 sub     esp, 2Ch
.text:00406E83                 lea     edx, [esp+24h]
.text:00406E87                 lea     ecx, [esp+28h]
.text:00406E8B                 mov     [esp+0Ch], edx
.text:00406E8F                 lea     edx, [esp+1Ch]
.text:00406E93                 mov     [esp+4], edx
.text:00406E97                 mov     edx, [esp+30h]
.text:00406E9B                 mov     [esp+10h], ecx
.text:00406E9F                 lea     ecx, [esp+20h]
.text:00406EA3                 mov     [esp+8], ecx
.text:00406EA7                 mov     [esp], edx
.text:00406EAA                 call    sub_408E70
.text:00406EAF                 test    eax, eax
.text:00406EB1                 jnz     short loc_406ED3
.text:00406EB3                 mov     dword ptr [esp+1Ch], 1
.text:00406EBB                 mov     dword ptr [esp+20h], 200h
.text:00406EC3                 mov     dword ptr [esp+24h], 0
.text:00406ECB                 mov     dword ptr [esp+28h], 0
.text:00406ED3
.text:00406ED3 loc_406ED3:                             ; CODE XREF: .text:00406EB1↑j
.text:00406ED3                 mov     eax, [esp+20h]
.text:00406ED7                 mov     ecx, [esp+1Ch]
.text:00406EDB                 add     esp, 2Ch
.text:00406EDE                 imul    eax, ecx
.text:00406EE1                 retn
.text:00406EE1 ; ---------------------------------------------------------------------------
.text:00406EE2                 align 10h
.text:00406EF0                 sub     esp, 1Ch
.text:00406EF3                 mov     eax, [esp+20h]
.text:00406EF7                 mov     [esp+14h], esi
.text:00406EFB                 mov     [esp+18h], edi
.text:00406EFF                 test    eax, eax
.text:00406F01                 jz      short loc_406F40
.text:00406F03                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00406F0B                 mov     [esp], eax
.text:00406F0E                 call    strrchr
.text:00406F13                 test    eax, eax
.text:00406F15                 jz      short loc_406F40
.text:00406F17                 cld
.text:00406F18                 mov     esi, eax
.text:00406F1A                 mov     edi, offset aLnk_0 ; ".lnk"
.text:00406F1F                 mov     ecx, 5
.text:00406F24                 repe cmpsb
.text:00406F26                 setz    dl
.text:00406F29                 movzx   eax, dl
.text:00406F2C                 lea     esi, [esi+0]
.text:00406F30
.text:00406F30 loc_406F30:                             ; CODE XREF: .text:00406F42↓j
.text:00406F30                 mov     esi, [esp+14h]
.text:00406F34                 mov     edi, [esp+18h]
.text:00406F38                 add     esp, 1Ch
.text:00406F3B                 retn
.text:00406F3B ; ---------------------------------------------------------------------------
.text:00406F3C                 align 10h
.text:00406F40
.text:00406F40 loc_406F40:                             ; CODE XREF: .text:00406F01↑j
.text:00406F40                                         ; .text:00406F15↑j
.text:00406F40                 xor     eax, eax
.text:00406F42                 jmp     short loc_406F30
.text:00406F42 ; ---------------------------------------------------------------------------
.text:00406F44                 align 10h
.text:00406F50                 sub     esp, 1Ch
.text:00406F53                 mov     [esp+10h], ebx
.text:00406F57                 mov     ebx, [esp+20h]
.text:00406F5B                 mov     [esp+14h], esi
.text:00406F5F                 mov     [esp+18h], edi
.text:00406F63                 xor     edi, edi
.text:00406F65                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:00406F6C                 call    GetModuleHandleA
.text:00406F71                 sub     esp, 4
.text:00406F74                 mov     esi, eax
.text:00406F76                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00406F7E                 mov     [esp], eax
.text:00406F81                 call    GetProcAddress
.text:00406F86                 sub     esp, 8
.text:00406F89                 test    eax, eax
.text:00406F8B                 jz      short loc_406FA1
.text:00406F8D                 mov     [esp], ebx
.text:00406F90                 lea     ecx, [esp+0Ch]
.text:00406F94                 mov     [esp+4], ecx
.text:00406F98                 call    eax
.text:00406F9A                 sub     esp, 8
.text:00406F9D                 test    eax, eax
.text:00406F9F                 jnz     short loc_407000
.text:00406FA1
.text:00406FA1 loc_406FA1:                             ; CODE XREF: .text:00406F8B↑j
.text:00406FA1                 mov     eax, ds:Str
.text:00406FA6                 test    eax, eax
.text:00406FA8                 jz      short loc_407020
.text:00406FAA
.text:00406FAA loc_406FAA:                             ; CODE XREF: .text:00407033↓j
.text:00406FAA                                         ; .text:00407045↓j
.text:00406FAA                 test    ebx, ebx
.text:00406FAC                 jz      short loc_406FB3
.text:00406FAE                 cmp     byte ptr [ebx], 0
.text:00406FB1                 jnz     short loc_406FD0
.text:00406FB3
.text:00406FB3 loc_406FB3:                             ; CODE XREF: .text:00406FAC↑j
.text:00406FB3                                         ; .text:00406FE4↓j ...
.text:00406FB3                 mov     [esp], esi
.text:00406FB6                 call    FreeLibrary
.text:00406FBB                 sub     esp, 4
.text:00406FBE                 mov     eax, edi
.text:00406FC0                 mov     ebx, [esp+10h]
.text:00406FC4                 mov     esi, [esp+14h]
.text:00406FC8                 mov     edi, [esp+18h]
.text:00406FCC                 add     esp, 1Ch
.text:00406FCF                 retn
.text:00406FD0 ; ---------------------------------------------------------------------------
.text:00406FD0
.text:00406FD0 loc_406FD0:                             ; CODE XREF: .text:00406FB1↑j
.text:00406FD0                 mov     [esp], ebx
.text:00406FD3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00406FDB                 call    strrchr
.text:00406FE0                 test    eax, eax
.text:00406FE2                 mov     ebx, eax
.text:00406FE4                 jz      short loc_406FB3
.text:00406FE6                 mov     [esp+4], eax
.text:00406FEA                 mov     ecx, ds:Str
.text:00406FF0                 mov     [esp], ecx
.text:00406FF3                 call    strstr
.text:00406FF8                 test    eax, eax
.text:00406FFA                 jz      short loc_407007
.text:00406FFC                 lea     esi, [esi+0]
.text:00407000
.text:00407000 loc_407000:                             ; CODE XREF: .text:00406F9F↑j
.text:00407000                                         ; .text:0040701D↓j
.text:00407000                 mov     edi, 1
.text:00407005                 jmp     short loc_406FB3
.text:00407007 ; ---------------------------------------------------------------------------
.text:00407007
.text:00407007 loc_407007:                             ; CODE XREF: .text:00406FFA↑j
.text:00407007                 mov     [esp+4], ebx
.text:0040700B                 mov     ebx, off_418054 ; ".com;.exe;.bat;.cmd"
.text:00407011                 mov     [esp], ebx
.text:00407014                 call    strstr
.text:00407019                 test    eax, eax
.text:0040701B                 jz      short loc_406FB3
.text:0040701D                 jmp     short loc_407000
.text:0040701D ; ---------------------------------------------------------------------------
.text:0040701F                 align 10h
.text:00407020
.text:00407020 loc_407020:                             ; CODE XREF: .text:00406FA8↑j
.text:00407020                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00407027                 call    getenv
.text:0040702C                 mov     ds:Str, eax
.text:00407031                 test    eax, eax
.text:00407033                 jnz     loc_406FAA
.text:00407039                 mov     edx, off_418054 ; ".com;.exe;.bat;.cmd"
.text:0040703F                 mov     ds:Str, edx
.text:00407045                 jmp     loc_406FAA
.text:00407045 ; ---------------------------------------------------------------------------
.text:0040704A                 align 10h
.text:00407050                 sub     esp, 0Ch
.text:00407053                 mov     edx, [esp+10h]
.text:00407057                 mov     [esp], edx
.text:0040705A                 call    GetFileType
.text:0040705F                 sub     esp, 4
.text:00407062                 xor     edx, edx
.text:00407064                 cmp     eax, 2
.text:00407067                 jz      short loc_407080
.text:00407069                 cmp     eax, 3
.text:0040706C                 jz      short loc_407074
.text:0040706E
.text:0040706E loc_40706E:                             ; CODE XREF: .text:00407079↓j
.text:0040706E                                         ; .text:00407085↓j
.text:0040706E                 mov     eax, edx
.text:00407070                 add     esp, 0Ch
.text:00407073                 retn
.text:00407074 ; ---------------------------------------------------------------------------
.text:00407074
.text:00407074 loc_407074:                             ; CODE XREF: .text:0040706C↑j
.text:00407074                 mov     edx, 1000h
.text:00407079                 jmp     short loc_40706E
.text:00407079 ; ---------------------------------------------------------------------------
.text:0040707B                 align 10h
.text:00407080
.text:00407080 loc_407080:                             ; CODE XREF: .text:00407067↑j
.text:00407080                 mov     edx, 2000h
.text:00407085                 jmp     short loc_40706E
.text:00407085 ; ---------------------------------------------------------------------------
.text:00407087                 align 10h
.text:00407090                 mov     ecx, [esp+4]
.text:00407094                 xor     edx, edx
.text:00407096                 test    cl, 10h
.text:00407099                 setz    dl
.text:0040709C                 dec     edx
.text:0040709D                 and     edx, 0FFFFC000h
.text:004070A3                 add     edx, 8000h
.text:004070A9                 or      edx, 124h
.text:004070AF                 test    cl, 1
.text:004070B2                 movzx   eax, dx
.text:004070B5                 jnz     short locret_4070BC
.text:004070B7                 or      eax, 92h
.text:004070BC
.text:004070BC locret_4070BC:                          ; CODE XREF: .text:004070B5↑j
.text:004070BC                 retn
.text:004070BC ; ---------------------------------------------------------------------------
.text:004070BD                 align 10h
.text:004070C0                 sub     esp, 2Ch
.text:004070C3                 mov     [esp+20h], esi
.text:004070C7                 mov     esi, [esp+30h]
.text:004070CB                 mov     [esp+1Ch], ebx
.text:004070CF                 xor     ebx, ebx
.text:004070D1                 test    esi, esi
.text:004070D3                 mov     [esp+24h], edi
.text:004070D7                 mov     [esp+28h], ebp
.text:004070DB                 jz      short loc_407130
.text:004070DD                 cmp     byte ptr [esi], 0
.text:004070E0                 jnz     short loc_407134
.text:004070E2
.text:004070E2 loc_4070E2:                             ; CODE XREF: .text:0040719C↓j
.text:004070E2                                         ; .text:004071A7↓j
.text:004070E2                 test    esi, esi
.text:004070E4                 jz      short loc_407130
.text:004070E6                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:004070EE                 mov     [esp], esi
.text:004070F1                 call    strrchr
.text:004070F6                 test    eax, eax
.text:004070F8                 jz      short loc_407130
.text:004070FA                 cld
.text:004070FB                 mov     ecx, 5
.text:00407100                 mov     esi, eax
.text:00407102                 mov     edi, offset aLnk_0 ; ".lnk"
.text:00407107                 repe cmpsb
.text:00407109                 setz    cl
.text:0040710C                 movzx   eax, cl
.text:0040710F                 nop
.text:00407110
.text:00407110 loc_407110:                             ; CODE XREF: .text:00407132↓j
.text:00407110                 test    eax, eax
.text:00407112                 jz      short loc_40711A
.text:00407114                 or      ebx, 0A000h
.text:0040711A
.text:0040711A loc_40711A:                             ; CODE XREF: .text:00407112↑j
.text:0040711A                 mov     eax, ebx
.text:0040711C                 mov     esi, [esp+20h]
.text:00407120                 mov     ebx, [esp+1Ch]
.text:00407124                 mov     edi, [esp+24h]
.text:00407128                 mov     ebp, [esp+28h]
.text:0040712C                 add     esp, 2Ch
.text:0040712F                 retn
.text:00407130 ; ---------------------------------------------------------------------------
.text:00407130
.text:00407130 loc_407130:                             ; CODE XREF: .text:004070DB↑j
.text:00407130                                         ; .text:004070E4↑j ...
.text:00407130                 xor     eax, eax
.text:00407132                 jmp     short loc_407110
.text:00407134 ; ---------------------------------------------------------------------------
.text:00407134
.text:00407134 loc_407134:                             ; CODE XREF: .text:004070E0↑j
.text:00407134                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040713B                 call    GetModuleHandleA
.text:00407140                 sub     esp, 4
.text:00407143                 mov     ebp, eax
.text:00407145                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040714D                 mov     [esp], eax
.text:00407150                 call    GetProcAddress
.text:00407155                 sub     esp, 8
.text:00407158                 test    eax, eax
.text:0040715A                 mov     dword ptr [esp+14h], 0
.text:00407162                 jz      short loc_407178
.text:00407164                 mov     [esp], esi
.text:00407167                 lea     ecx, [esp+18h]
.text:0040716B                 mov     [esp+4], ecx
.text:0040716F                 call    eax
.text:00407171                 sub     esp, 8
.text:00407174                 test    eax, eax
.text:00407176                 jnz     short loc_4071D8
.text:00407178
.text:00407178 loc_407178:                             ; CODE XREF: .text:00407162↑j
.text:00407178                 mov     edx, ds:Str
.text:0040717E                 test    edx, edx
.text:00407180                 jz      short loc_407200
.text:00407182
.text:00407182 loc_407182:                             ; CODE XREF: .text:00407213↓j
.text:00407182                                         ; .text:00407225↓j
.text:00407182                 test    esi, esi
.text:00407184                 jz      short loc_40718B
.text:00407186                 cmp     byte ptr [esi], 0
.text:00407189                 jnz     short loc_4071AC
.text:0040718B
.text:0040718B loc_40718B:                             ; CODE XREF: .text:00407184↑j
.text:0040718B                                         ; .text:004071C0↓j ...
.text:0040718B                 mov     [esp], ebp
.text:0040718E                 call    FreeLibrary
.text:00407193                 sub     esp, 4
.text:00407196                 mov     eax, [esp+14h]
.text:0040719A                 test    eax, eax
.text:0040719C                 jz      loc_4070E2
.text:004071A2                 mov     ebx, 49h ; 'I'
.text:004071A7                 jmp     loc_4070E2
.text:004071AC ; ---------------------------------------------------------------------------
.text:004071AC
.text:004071AC loc_4071AC:                             ; CODE XREF: .text:00407189↑j
.text:004071AC                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:004071B4                 mov     [esp], esi
.text:004071B7                 call    strrchr
.text:004071BC                 test    eax, eax
.text:004071BE                 mov     edi, eax
.text:004071C0                 jz      short loc_40718B
.text:004071C2                 mov     [esp+4], eax
.text:004071C6                 mov     edx, ds:Str
.text:004071CC                 mov     [esp], edx
.text:004071CF                 call    strstr
.text:004071D4                 test    eax, eax
.text:004071D6                 jz      short loc_4071E2
.text:004071D8
.text:004071D8 loc_4071D8:                             ; CODE XREF: .text:00407176↑j
.text:004071D8                                         ; .text:004071F8↓j
.text:004071D8                 mov     dword ptr [esp+14h], 1
.text:004071E0                 jmp     short loc_40718B
.text:004071E2 ; ---------------------------------------------------------------------------
.text:004071E2
.text:004071E2 loc_4071E2:                             ; CODE XREF: .text:004071D6↑j
.text:004071E2                 mov     [esp+4], edi
.text:004071E6                 mov     edi, off_418054 ; ".com;.exe;.bat;.cmd"
.text:004071EC                 mov     [esp], edi
.text:004071EF                 call    strstr
.text:004071F4                 test    eax, eax
.text:004071F6                 jz      short loc_40718B
.text:004071F8                 jmp     short loc_4071D8
.text:004071F8 ; ---------------------------------------------------------------------------
.text:004071FA                 align 10h
.text:00407200
.text:00407200 loc_407200:                             ; CODE XREF: .text:00407180↑j
.text:00407200                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00407207                 call    getenv
.text:0040720C                 mov     ds:Str, eax
.text:00407211                 test    eax, eax
.text:00407213                 jnz     loc_407182
.text:00407219                 mov     ecx, off_418054 ; ".com;.exe;.bat;.cmd"
.text:0040721F                 mov     ds:Str, ecx
.text:00407225                 jmp     loc_407182
.text:00407225 ; ---------------------------------------------------------------------------
.text:0040722A                 align 10h
.text:00407230                 push    esi
.text:00407231                 push    ebx
.text:00407232                 sub     esp, 864h
.text:00407238                 mov     ebx, [esp+870h]
.text:0040723F                 lea     edx, [esp+830h]
.text:00407246                 mov     esi, [esp+874h]
.text:0040724D                 mov     [esp+4], edx
.text:00407251                 mov     [esp], ebx
.text:00407254                 call    sub_4060B0
.text:00407259                 xor     edx, edx
.text:0040725B                 test    eax, eax
.text:0040725D                 jz      loc_407345
.text:00407263                 mov     ecx, [esp+830h]
.text:0040726A                 test    cl, 10h
.text:0040726D                 mov     [esi], ecx
.text:0040726F                 mov     eax, [esp+834h]
.text:00407276                 mov     edx, [esp+838h]
.text:0040727D                 mov     [esi+4], eax
.text:00407280                 mov     [esi+8], edx
.text:00407283                 mov     eax, [esp+83Ch]
.text:0040728A                 mov     edx, [esp+840h]
.text:00407291                 mov     [esi+0Ch], eax
.text:00407294                 mov     [esi+10h], edx
.text:00407297                 mov     edx, [esp+848h]
.text:0040729E                 mov     eax, [esp+844h]
.text:004072A5                 mov     [esi+18h], edx
.text:004072A8                 mov     [esi+14h], eax
.text:004072AB                 mov     edx, [esp+84Ch]
.text:004072B2                 mov     [esi+20h], edx
.text:004072B5                 mov     edx, [esp+850h]
.text:004072BC                 mov     [esi+24h], edx
.text:004072BF                 jnz     loc_407350
.text:004072C5                 mov     dword ptr [esi+28h], 1
.text:004072CC
.text:004072CC loc_4072CC:                             ; CODE XREF: .text:0040735B↓j
.text:004072CC                 mov     [esp], ebx
.text:004072CF                 call    sub_408420
.text:004072D4                 mov     [esp], eax
.text:004072D7                 call    sub_407FF0
.text:004072DC                 mov     [esp], eax
.text:004072DF                 lea     edx, [esp+30h]
.text:004072E3                 mov     ebx, eax
.text:004072E5                 mov     [esp+18h], edx
.text:004072E9                 lea     ecx, [esp+2Ch]
.text:004072ED                 lea     edx, [esp+28h]
.text:004072F1                 mov     [esp+14h], ecx
.text:004072F5                 lea     ecx, [esp+24h]
.text:004072F9                 mov     [esp+10h], edx
.text:004072FD                 lea     edx, [esp+430h]
.text:00407304                 mov     [esp+0Ch], ecx
.text:00407308                 mov     [esp+4], edx
.text:0040730C                 mov     dword ptr [esp+1Ch], 400h
.text:00407314                 mov     dword ptr [esp+8], 400h
.text:0040731C                 call    GetVolumeInformationA
.text:00407321                 sub     esp, 20h
.text:00407324                 test    eax, eax
.text:00407326                 setz    cl
.text:00407329                 mov     [esp], ebx
.text:0040732C                 movzx   edx, cl
.text:0040732F                 dec     edx
.text:00407330                 and     [esp+24h], edx
.text:00407334                 call    free
.text:00407339                 mov     ecx, [esp+24h]
.text:0040733D                 mov     edx, 1
.text:00407342                 mov     [esi+1Ch], ecx
.text:00407345
.text:00407345 loc_407345:                             ; CODE XREF: .text:0040725D↑j
.text:00407345                 add     esp, 864h
.text:0040734B                 mov     eax, edx
.text:0040734D                 pop     ebx
.text:0040734E                 pop     esi
.text:0040734F                 retn
.text:00407350 ; ---------------------------------------------------------------------------
.text:00407350
.text:00407350 loc_407350:                             ; CODE XREF: .text:004072BF↑j
.text:00407350                 mov     [esp], ebx
.text:00407353                 call    sub_406220
.text:00407358                 mov     [esi+28h], eax
.text:0040735B                 jmp     loc_4072CC
.text:00407360 ; ---------------------------------------------------------------------------
.text:00407360                 push    ebp
.text:00407361                 xor     edx, edx
.text:00407363                 push    edi
.text:00407364                 push    esi
.text:00407365                 xor     esi, esi
.text:00407367                 push    ebx
.text:00407368                 sub     esp, 1Ch
.text:0040736B                 mov     ebx, [esp+5Ch]
.text:0040736F                 mov     ecx, [esp+30h]
.text:00407373                 mov     edi, [esp+60h]
.text:00407377                 or      esi, ebx
.text:00407379                 mov     eax, [esp+4Ch]
.text:0040737D                 or      edi, edx
.text:0040737F                 mov     ebx, [esp+64h]
.text:00407383                 xor     edx, edx
.text:00407385                 test    cl, 10h
.text:00407388                 setz    dl
.text:0040738B                 mov     [ebx+10h], eax
.text:0040738E                 mov     [ebx+8], edi
.text:00407391                 mov     [ebx+0Ch], esi
.text:00407394                 dec     edx
.text:00407395                 and     edx, 0FFFFC000h
.text:0040739B                 mov     dword ptr [ebx+14h], 0
.text:004073A2                 add     edx, 8000h
.text:004073A8                 or      edx, 124h
.text:004073AE                 test    cl, 1
.text:004073B1                 movzx   eax, dx
.text:004073B4                 jnz     short loc_4073BB
.text:004073B6                 or      eax, 92h
.text:004073BB
.text:004073BB loc_4073BB:                             ; CODE XREF: .text:004073B4↑j
.text:004073BB                 mov     ebx, [esp+54h]
.text:004073BF                 xor     edx, edx
.text:004073C1                 xor     ebp, ebp
.text:004073C3                 mov     edi, [esp+50h]
.text:004073C7                 mov     ecx, [esp+64h]
.text:004073CB                 mov     esi, edi
.text:004073CD                 or      [ecx], eax
.text:004073CF                 mov     edi, ebx
.text:004073D1                 or      edi, ebp
.text:004073D3                 mov     ebp, edx
.text:004073D5                 mov     ebx, [esp+64h]
.text:004073D9                 or      ebp, esi
.text:004073DB                 mov     esi, [esp+58h]
.text:004073DF                 mov     edx, [esp+40h]
.text:004073E3                 mov     [ebx+30h], edi
.text:004073E6                 mov     [ebx+18h], esi
.text:004073E9                 mov     ecx, edx
.text:004073EB                 xor     esi, esi
.text:004073ED                 mov     [ebx+34h], ebp
.text:004073F0                 xor     edx, edx
.text:004073F2                 or      esi, ecx
.text:004073F4                 mov     dword ptr [esp+8], 989680h
.text:004073FC                 mov     ebx, [esp+3Ch]
.text:00407400                 mov     ecx, esi
.text:00407402                 mov     dword ptr [esp+0Ch], 0
.text:0040740A                 or      ebx, edx
.text:0040740C                 mov     edx, ebx
.text:0040740E                 sub     edx, 0D53E8000h
.text:00407414                 sbb     ecx, 19DB1DEh
.text:0040741A                 mov     [esp+4], ecx
.text:0040741E                 mov     [esp], edx
.text:00407421                 call    sub_416600
.text:00407426                 mov     edx, eax
.text:00407428                 mov     ecx, [esp+64h]
.text:0040742C                 shr     eax, 1Fh
.text:0040742F                 dec     eax
.text:00407430                 and     edx, eax
.text:00407432                 mov     [ecx+38h], edx
.text:00407435                 mov     [esp], ebx
.text:00407438                 mov     [esp+4], esi
.text:0040743C                 mov     dword ptr [esp+8], 989680h
.text:00407444                 mov     dword ptr [esp+0Ch], 0
.text:0040744C                 call    sub_416750
.text:00407451                 lea     ecx, [eax+eax*4]
.text:00407454                 lea     esi, [ecx+ecx*4]
.text:00407457                 mov     eax, [esp+64h]
.text:0040745B                 shl     esi, 2
.text:0040745E                 mov     ebx, esi
.text:00407460                 shr     ebx, 1Fh
.text:00407463                 dec     ebx
.text:00407464                 and     ebx, esi
.text:00407466                 xor     esi, esi
.text:00407468                 mov     [eax+3Ch], ebx
.text:0040746B                 mov     edx, [esp+38h]
.text:0040746F                 mov     dword ptr [esp+8], 989680h
.text:00407477                 mov     ebx, [esp+34h]
.text:0040747B                 mov     dword ptr [esp+0Ch], 0
.text:00407483                 mov     ecx, edx
.text:00407485                 xor     edx, edx
.text:00407487                 or      ebx, edx
.text:00407489                 or      esi, ecx
.text:0040748B                 mov     edx, ebx
.text:0040748D                 sub     edx, 0D53E8000h
.text:00407493                 mov     ecx, esi
.text:00407495                 sbb     ecx, 19DB1DEh
.text:0040749B                 mov     [esp+4], ecx
.text:0040749F                 mov     [esp], edx
.text:004074A2                 call    sub_416600
.text:004074A7                 mov     edx, eax
.text:004074A9                 mov     ecx, [esp+64h]
.text:004074AD                 shr     eax, 1Fh
.text:004074B0                 dec     eax
.text:004074B1                 and     edx, eax
.text:004074B3                 mov     [ecx+48h], edx
.text:004074B6                 mov     [esp], ebx
.text:004074B9                 mov     [esp+4], esi
.text:004074BD                 mov     dword ptr [esp+8], 989680h
.text:004074C5                 mov     dword ptr [esp+0Ch], 0
.text:004074CD                 call    sub_416750
.text:004074D2                 lea     edx, [eax+eax*4]
.text:004074D5                 mov     ebx, [esp+64h]
.text:004074D9                 lea     ecx, [edx+edx*4]
.text:004074DC                 shl     ecx, 2
.text:004074DF                 mov     esi, ecx
.text:004074E1                 shr     esi, 1Fh
.text:004074E4                 dec     esi
.text:004074E5                 and     esi, ecx
.text:004074E7                 mov     [ebx+4Ch], esi
.text:004074EA                 mov     edx, [esp+48h]
.text:004074EE                 xor     esi, esi
.text:004074F0                 mov     dword ptr [esp+8], 989680h
.text:004074F8                 mov     ebx, [esp+44h]
.text:004074FC                 mov     dword ptr [esp+0Ch], 0
.text:00407504                 mov     ecx, edx
.text:00407506                 xor     edx, edx
.text:00407508                 or      ebx, edx
.text:0040750A                 or      esi, ecx
.text:0040750C                 mov     edx, ebx
.text:0040750E                 sub     edx, 0D53E8000h
.text:00407514                 mov     ecx, esi
.text:00407516                 sbb     ecx, 19DB1DEh
.text:0040751C                 mov     [esp+4], ecx
.text:00407520                 mov     [esp], edx
.text:00407523                 call    sub_416600
.text:00407528                 mov     edx, eax
.text:0040752A                 mov     ecx, [esp+64h]
.text:0040752E                 shr     eax, 1Fh
.text:00407531                 dec     eax
.text:00407532                 and     edx, eax
.text:00407534                 mov     [ecx+40h], edx
.text:00407537                 mov     [esp+4], esi
.text:0040753B                 mov     dword ptr [esp+8], 989680h
.text:00407543                 mov     dword ptr [esp+0Ch], 0
.text:0040754B                 mov     [esp], ebx
.text:0040754E                 call    sub_416750
.text:00407553                 lea     edx, [eax+eax*4]
.text:00407556                 lea     esi, [edx+edx*4]
.text:00407559                 mov     eax, [esp+64h]
.text:0040755D                 shl     esi, 2
.text:00407560                 mov     edx, ebp
.text:00407562                 mov     ecx, esi
.text:00407564                 mov     dword ptr [eax+50h], 200h
.text:0040756B                 shr     ecx, 1Fh
.text:0040756E                 dec     ecx
.text:0040756F                 and     ecx, esi
.text:00407571                 test    ebp, ebp
.text:00407573                 mov     [eax+44h], ecx
.text:00407576                 mov     eax, edi
.text:00407578                 js      short loc_4075B2
.text:0040757A
.text:0040757A loc_40757A:                             ; CODE XREF: .text:004075BA↓j
.text:0040757A                 xor     esi, esi
.text:0040757C                 mov     ebp, edi
.text:0040757E                 mov     ecx, eax
.text:00407580                 shrd    ecx, edx, 9
.text:00407584                 mov     ebx, edx
.text:00407586                 and     ebp, 1FFh
.text:0040758C                 mov     eax, esi
.text:0040758E                 sar     ebx, 9
.text:00407591                 or      eax, ebp
.text:00407593                 jz      short loc_40759B
.text:00407595                 add     ecx, 1
.text:00407598                 adc     ebx, 0
.text:0040759B
.text:0040759B loc_40759B:                             ; CODE XREF: .text:00407593↑j
.text:0040759B                 mov     edx, [esp+64h]
.text:0040759F                 mov     eax, 1
.text:004075A4                 mov     [edx+58h], ecx
.text:004075A7                 mov     [edx+5Ch], ebx
.text:004075AA                 add     esp, 1Ch
.text:004075AD                 pop     ebx
.text:004075AE                 pop     esi
.text:004075AF                 pop     edi
.text:004075B0                 pop     ebp
.text:004075B1                 retn
.text:004075B2 ; ---------------------------------------------------------------------------
.text:004075B2
.text:004075B2 loc_4075B2:                             ; CODE XREF: .text:00407578↑j
.text:004075B2                 add     eax, 1FFh
.text:004075B7                 adc     edx, 0
.text:004075BA                 jmp     short loc_40757A
.text:004075BA ; ---------------------------------------------------------------------------
.text:004075BC                 align 10h
.text:004075C0                 push    ebp
.text:004075C1                 push    edi
.text:004075C2                 xor     edi, edi
.text:004075C4                 push    esi
.text:004075C5                 xor     esi, esi
.text:004075C7                 push    ebx
.text:004075C8                 sub     esp, 0Ch
.text:004075CB                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:004075D2                 call    LoadLibraryA
.text:004075D7                 sub     esp, 4
.text:004075DA                 mov     ebp, eax
.text:004075DC                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:004075E4                 mov     [esp], eax
.text:004075E7                 call    GetProcAddress
.text:004075EC                 sub     esp, 8
.text:004075EF                 test    eax, eax
.text:004075F1                 jz      short loc_407622
.text:004075F3                 lea     ecx, [esp+8]
.text:004075F7                 mov     [esp+4], ecx
.text:004075FB                 mov     ecx, [esp+20h]
.text:004075FF                 mov     [esp], ecx
.text:00407602                 call    eax
.text:00407604                 sub     esp, 8
.text:00407607                 mov     ebx, eax
.text:00407609                 cmp     eax, 0FFFFFFFFh
.text:0040760C                 jz      short loc_40763D
.text:0040760E
.text:0040760E loc_40760E:                             ; CODE XREF: .text:00407646↓j
.text:0040760E                 mov     esi, [esp+8]
.text:00407612                 mov     ecx, ebx
.text:00407614                 xor     edi, edi
.text:00407616                 xor     ebx, ebx
.text:00407618                 mov     edx, esi
.text:0040761A                 mov     esi, ecx
.text:0040761C                 or      esi, edi
.text:0040761E                 mov     edi, ebx
.text:00407620                 or      edi, edx
.text:00407622
.text:00407622 loc_407622:                             ; CODE XREF: .text:004075F1↑j
.text:00407622                                         ; .text:00407644↓j
.text:00407622                 test    ebp, ebp
.text:00407624                 jz      short loc_407631
.text:00407626                 mov     [esp], ebp
.text:00407629                 call    FreeLibrary
.text:0040762E                 sub     esp, 4
.text:00407631
.text:00407631 loc_407631:                             ; CODE XREF: .text:00407624↑j
.text:00407631                 add     esp, 0Ch
.text:00407634                 mov     eax, esi
.text:00407636                 mov     edx, edi
.text:00407638                 pop     ebx
.text:00407639                 pop     esi
.text:0040763A                 pop     edi
.text:0040763B                 pop     ebp
.text:0040763C                 retn
.text:0040763D ; ---------------------------------------------------------------------------
.text:0040763D
.text:0040763D loc_40763D:                             ; CODE XREF: .text:0040760C↑j
.text:0040763D                 call    GetLastError
.text:00407642                 test    eax, eax
.text:00407644                 jnz     short loc_407622
.text:00407646                 jmp     short loc_40760E
.text:00407646 ; ---------------------------------------------------------------------------
.text:00407648                 align 10h
.text:00407650
.text:00407650 ; =============== S U B R O U T I N E =======================================
.text:00407650
.text:00407650
.text:00407650 ; int __cdecl sub_407650(LPCSTR lpFileName, int)
.text:00407650 sub_407650      proc near               ; CODE XREF: sub_40B1F0-365F↓p
.text:00407650
.text:00407650 lpRootPathName  = dword ptr -8FCh
.text:00407650 lpVolumeNameBuffer= dword ptr -8F8h
.text:00407650 nVolumeNameSize = dword ptr -8F4h
.text:00407650 lpVolumeSerialNumber= dword ptr -8F0h
.text:00407650 lpMaximumComponentLength= dword ptr -8ECh
.text:00407650 lpFileSystemFlags= dword ptr -8E8h
.text:00407650 lpFileSystemNameBuffer= dword ptr -8E4h
.text:00407650 nFileSystemNameSize= dword ptr -8E0h
.text:00407650 VolumeSerialNumber= dword ptr -8D8h
.text:00407650 MaximumComponentLength= dword ptr -8D4h
.text:00407650 FileSystemFlags = dword ptr -8D0h
.text:00407650 var_8CC         = dword ptr -8CCh
.text:00407650 var_8C8         = dword ptr -8C8h
.text:00407650 var_8C4         = dword ptr -8C4h
.text:00407650 var_8C0         = dword ptr -8C0h
.text:00407650 var_8BC         = dword ptr -8BCh
.text:00407650 var_8B8         = dword ptr -8B8h
.text:00407650 var_8B4         = dword ptr -8B4h
.text:00407650 var_8B0         = dword ptr -8B0h
.text:00407650 var_8AC         = dword ptr -8ACh
.text:00407650 var_8A8         = dword ptr -8A8h
.text:00407650 var_8A4         = dword ptr -8A4h
.text:00407650 var_8A0         = dword ptr -8A0h
.text:00407650 var_89C         = dword ptr -89Ch
.text:00407650 FileSystemNameBuffer= byte ptr -88Ch
.text:00407650 VolumeNameBuffer= byte ptr -48Ch
.text:00407650 var_8C          = dword ptr -8Ch
.text:00407650 var_88          = dword ptr -88h
.text:00407650 var_84          = dword ptr -84h
.text:00407650 var_80          = dword ptr -80h
.text:00407650 var_7C          = dword ptr -7Ch
.text:00407650 var_78          = dword ptr -78h
.text:00407650 var_74          = dword ptr -74h
.text:00407650 var_70          = dword ptr -70h
.text:00407650 var_6C          = dword ptr -6Ch
.text:00407650 var_5C          = dword ptr -5Ch
.text:00407650 var_58          = dword ptr -58h
.text:00407650 var_54          = dword ptr -54h
.text:00407650 var_50          = dword ptr -50h
.text:00407650 var_4C          = dword ptr -4Ch
.text:00407650 var_48          = dword ptr -48h
.text:00407650 var_44          = dword ptr -44h
.text:00407650 var_3C          = dword ptr -3Ch
.text:00407650 var_38          = dword ptr -38h
.text:00407650 var_34          = dword ptr -34h
.text:00407650 lpFileName      = dword ptr  4
.text:00407650 arg_4           = dword ptr  8
.text:00407650
.text:00407650                 push    ebp
.text:00407651                 xor     eax, eax
.text:00407653                 mov     ecx, 0Dh
.text:00407658                 push    edi
.text:00407659                 push    esi
.text:0040765A                 push    ebx
.text:0040765B                 sub     esp, 8ECh
.text:00407661                 lea     edi, [esp+8FCh+var_5C]
.text:00407668                 cld
.text:00407669                 lea     edx, [esp+8FCh+var_8C]
.text:00407670                 rep stosd
.text:00407672                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00407676                 lea     esi, [esp+8FCh+var_5C]
.text:0040767D                 mov     edx, [esp+8FCh+lpFileName]
.text:00407684                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:00407687                 call    sub_4060B0
.text:0040768C                 test    eax, eax
.text:0040768E                 mov     edx, 0FFFFFFFFh
.text:00407693                 jz      loc_407A24
.text:00407699                 mov     edx, [esp+8FCh+var_88]
.text:004076A0                 mov     ebp, [esp+8FCh+var_84]
.text:004076A7                 mov     edi, [esp+8FCh+var_80]
.text:004076AE                 mov     [esp+8FCh+var_58], edx
.text:004076B5                 mov     ecx, [esp+8FCh+var_7C]
.text:004076BC                 mov     ebx, [esp+8FCh+var_8C]
.text:004076C3                 mov     [esp+8FCh+var_54], ebp
.text:004076CA                 mov     edx, [esp+8FCh+var_78]
.text:004076D1                 mov     ebp, [esp+8FCh+var_74]
.text:004076D8                 mov     [esp+8FCh+var_50], edi
.text:004076DF                 test    bl, 10h
.text:004076E2                 mov     edi, [esp+8FCh+var_70]
.text:004076E9                 mov     [esp+8FCh+var_4C], ecx
.text:004076F0                 mov     ecx, [esp+8FCh+var_6C]
.text:004076F7                 mov     [esp+8FCh+var_5C], ebx
.text:004076FE                 mov     [esp+8FCh+var_48], edx
.text:00407705                 mov     [esp+8FCh+var_44], ebp
.text:0040770C                 mov     [esp+8FCh+var_3C], edi
.text:00407713                 mov     [esp+8FCh+var_38], ecx
.text:0040771A                 jnz     loc_407A40
.text:00407720                 mov     ebx, 1
.text:00407725                 mov     [esp+8FCh+var_34], ebx
.text:0040772C
.text:0040772C loc_40772C:                             ; CODE XREF: sub_407650+406↓j
.text:0040772C                 mov     eax, [esp+8FCh+lpFileName]
.text:00407733                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:00407737                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040773B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040773E                 call    sub_408420
.text:00407743                 mov     [esp+8FCh+lpRootPathName], eax
.text:00407746                 call    sub_407FF0
.text:0040774B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040774F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00407753                 mov     ebp, eax
.text:00407755                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00407759                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040775D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:00407764                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:00407768                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040776C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:00407770                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00407778                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00407780                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:00407783                 call    GetVolumeInformationA
.text:00407788                 sub     esp, 20h
.text:0040778B                 test    eax, eax
.text:0040778D                 lea     edi, [esp+8FCh+var_8CC]
.text:00407791                 setz    bl
.text:00407794                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:00407797                 xor     ebp, ebp
.text:00407799                 movzx   edx, bl
.text:0040779C                 dec     edx
.text:0040779D                 xor     ebx, ebx
.text:0040779F                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:004077A3                 call    free
.text:004077A8                 cld
.text:004077A9                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:004077AD                 mov     [esi+1Ch], ecx
.text:004077B0                 mov     ecx, 0Dh
.text:004077B5                 rep movsd
.text:004077B7                 mov     edi, [esp+8FCh+var_8A0]
.text:004077BB                 mov     edx, [esp+8FCh+var_89C]
.text:004077BF                 mov     ecx, [esp+8FCh+var_8CC]
.text:004077C3                 or      ebp, edi
.text:004077C5                 mov     esi, [esp+8FCh+var_8B0]
.text:004077C9                 mov     edi, [esp+8FCh+arg_4]
.text:004077D0                 or      edx, ebx
.text:004077D2                 mov     [edi+8], edx
.text:004077D5                 xor     edx, edx
.text:004077D7                 test    cl, 10h
.text:004077DA                 setz    dl
.text:004077DD                 mov     [edi+0Ch], ebp
.text:004077E0                 mov     [edi+10h], esi
.text:004077E3                 mov     dword ptr [edi+14h], 0
.text:004077EA                 dec     edx
.text:004077EB                 and     edx, 0FFFFC000h
.text:004077F1                 add     edx, 8000h
.text:004077F7                 or      edx, 124h
.text:004077FD                 test    cl, 1
.text:00407800                 movzx   eax, dx
.text:00407803                 jnz     short loc_40780A
.text:00407805                 or      eax, 92h
.text:0040780A
.text:0040780A loc_40780A:                             ; CODE XREF: sub_407650+1B3↑j
.text:0040780A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040780E                 xor     edx, edx
.text:00407810                 xor     ebp, ebp
.text:00407812                 mov     edi, [esp+8FCh+var_8AC]
.text:00407816                 mov     ecx, [esp+8FCh+arg_4]
.text:0040781D                 mov     esi, edi
.text:0040781F                 or      [ecx], eax
.text:00407821                 mov     edi, ebx
.text:00407823                 or      edi, ebp
.text:00407825                 mov     ebp, edx
.text:00407827                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040782B                 or      ebp, esi
.text:0040782D                 mov     esi, [esp+8FCh+arg_4]
.text:00407834                 mov     edx, [esp+8FCh+var_8BC]
.text:00407838                 mov     [esi+18h], ebx
.text:0040783B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040783F                 mov     ecx, edx
.text:00407841                 mov     [esi+30h], edi
.text:00407844                 xor     edx, edx
.text:00407846                 mov     [esi+34h], ebp
.text:00407849                 or      ebx, edx
.text:0040784B                 xor     esi, esi
.text:0040784D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00407855                 or      esi, ecx
.text:00407857                 mov     edx, ebx
.text:00407859                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00407861                 sub     edx, 0D53E8000h
.text:00407867                 mov     ecx, esi
.text:00407869                 sbb     ecx, 19DB1DEh
.text:0040786F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00407873                 mov     [esp+8FCh+lpRootPathName], edx
.text:00407876                 call    sub_416600
.text:0040787B                 mov     edx, eax
.text:0040787D                 mov     ecx, [esp+8FCh+arg_4]
.text:00407884                 shr     eax, 1Fh
.text:00407887                 dec     eax
.text:00407888                 and     edx, eax
.text:0040788A                 mov     [ecx+38h], edx
.text:0040788D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00407890                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00407894                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040789C                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004078A4                 call    sub_416750
.text:004078A9                 lea     ecx, [eax+eax*4]
.text:004078AC                 lea     ebx, [ecx+ecx*4]
.text:004078AF                 mov     eax, [esp+8FCh+arg_4]
.text:004078B6                 shl     ebx, 2
.text:004078B9                 mov     esi, ebx
.text:004078BB                 shr     esi, 1Fh
.text:004078BE                 dec     esi
.text:004078BF                 and     esi, ebx
.text:004078C1                 mov     [eax+3Ch], esi
.text:004078C4                 mov     edx, [esp+8FCh+var_8C4]
.text:004078C8                 xor     esi, esi
.text:004078CA                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004078D2                 mov     ebx, [esp+8FCh+var_8C8]
.text:004078D6                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004078DE                 mov     ecx, edx
.text:004078E0                 xor     edx, edx
.text:004078E2                 or      ebx, edx
.text:004078E4                 or      esi, ecx
.text:004078E6                 mov     edx, ebx
.text:004078E8                 sub     edx, 0D53E8000h
.text:004078EE                 mov     ecx, esi
.text:004078F0                 sbb     ecx, 19DB1DEh
.text:004078F6                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:004078FA                 mov     [esp+8FCh+lpRootPathName], edx
.text:004078FD                 call    sub_416600
.text:00407902                 mov     edx, eax
.text:00407904                 mov     ecx, [esp+8FCh+arg_4]
.text:0040790B                 shr     eax, 1Fh
.text:0040790E                 dec     eax
.text:0040790F                 and     edx, eax
.text:00407911                 mov     [ecx+48h], edx
.text:00407914                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00407917                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040791B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00407923                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040792B                 call    sub_416750
.text:00407930                 lea     ecx, [eax+eax*4]
.text:00407933                 lea     ebx, [ecx+ecx*4]
.text:00407936                 mov     eax, [esp+8FCh+arg_4]
.text:0040793D                 shl     ebx, 2
.text:00407940                 mov     esi, ebx
.text:00407942                 shr     esi, 1Fh
.text:00407945                 dec     esi
.text:00407946                 and     esi, ebx
.text:00407948                 mov     [eax+4Ch], esi
.text:0040794B                 mov     edx, [esp+8FCh+var_8B4]
.text:0040794F                 xor     esi, esi
.text:00407951                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00407959                 mov     ebx, [esp+8FCh+var_8B8]
.text:0040795D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00407965                 mov     ecx, edx
.text:00407967                 xor     edx, edx
.text:00407969                 or      ebx, edx
.text:0040796B                 or      esi, ecx
.text:0040796D                 mov     edx, ebx
.text:0040796F                 sub     edx, 0D53E8000h
.text:00407975                 mov     ecx, esi
.text:00407977                 sbb     ecx, 19DB1DEh
.text:0040797D                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00407981                 mov     [esp+8FCh+lpRootPathName], edx
.text:00407984                 call    sub_416600
.text:00407989                 mov     edx, eax
.text:0040798B                 mov     ecx, [esp+8FCh+arg_4]
.text:00407992                 shr     eax, 1Fh
.text:00407995                 dec     eax
.text:00407996                 and     edx, eax
.text:00407998                 mov     [ecx+40h], edx
.text:0040799B                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040799E                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004079A2                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004079AA                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004079B2                 call    sub_416750
.text:004079B7                 lea     ebx, [eax+eax*4]
.text:004079BA                 mov     esi, [esp+8FCh+arg_4]
.text:004079C1                 lea     edx, [ebx+ebx*4]
.text:004079C4                 shl     edx, 2
.text:004079C7                 mov     eax, edi
.text:004079C9                 mov     ecx, edx
.text:004079CB                 mov     dword ptr [esi+50h], 200h
.text:004079D2                 shr     ecx, 1Fh
.text:004079D5                 dec     ecx
.text:004079D6                 and     ecx, edx
.text:004079D8                 test    ebp, ebp
.text:004079DA                 mov     edx, ebp
.text:004079DC                 mov     [esi+44h], ecx
.text:004079DF                 js      short loc_407A31
.text:004079E1
.text:004079E1 loc_4079E1:                             ; CODE XREF: sub_407650+3E9↓j
.text:004079E1                 xor     esi, esi
.text:004079E3                 mov     ebp, edi
.text:004079E5                 mov     ecx, eax
.text:004079E7                 shrd    ecx, edx, 9
.text:004079EB                 mov     ebx, edx
.text:004079ED                 and     ebp, 1FFh
.text:004079F3                 mov     eax, esi
.text:004079F5                 sar     ebx, 9
.text:004079F8                 or      eax, ebp
.text:004079FA                 jz      short loc_407A02
.text:004079FC                 add     ecx, 1
.text:004079FF                 adc     ebx, 0
.text:00407A02
.text:00407A02 loc_407A02:                             ; CODE XREF: sub_407650+3AA↑j
.text:00407A02                 mov     edx, [esp+8FCh+arg_4]
.text:00407A09                 mov     [edx+5Ch], ebx
.text:00407A0C                 mov     ebx, [esp+8FCh+lpFileName]
.text:00407A13                 mov     [edx+58h], ecx
.text:00407A16                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00407A1A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:00407A1D                 call    sub_406870
.text:00407A22                 xor     edx, edx
.text:00407A24
.text:00407A24 loc_407A24:                             ; CODE XREF: sub_407650+43↑j
.text:00407A24                 add     esp, 8ECh
.text:00407A2A                 mov     eax, edx
.text:00407A2C                 pop     ebx
.text:00407A2D                 pop     esi
.text:00407A2E                 pop     edi
.text:00407A2F                 pop     ebp
.text:00407A30                 retn
.text:00407A31 ; ---------------------------------------------------------------------------
.text:00407A31
.text:00407A31 loc_407A31:                             ; CODE XREF: sub_407650+38F↑j
.text:00407A31                 add     eax, 1FFh
.text:00407A36                 adc     edx, 0
.text:00407A39                 jmp     short loc_4079E1
.text:00407A39 ; ---------------------------------------------------------------------------
.text:00407A3B                 align 10h
.text:00407A40
.text:00407A40 loc_407A40:                             ; CODE XREF: sub_407650+CA↑j
.text:00407A40                 mov     eax, [esp+8FCh+lpFileName]
.text:00407A47                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:00407A4A                 call    sub_406220
.text:00407A4F                 mov     [esp+8FCh+var_34], eax
.text:00407A56                 jmp     loc_40772C
.text:00407A56 sub_407650      endp
.text:00407A56
.text:00407A56 ; ---------------------------------------------------------------------------
.text:00407A5B                 align 10h
.text:00407A60 ; START OF FUNCTION CHUNK FOR sub_40B1F0
.text:00407A60
.text:00407A60 loc_407A60:                             ; CODE XREF: sub_40B1F0+26↓j
.text:00407A60                 cld
.text:00407A61                 sub     esp, 2Ch
.text:00407A64                 xor     eax, eax
.text:00407A66                 mov     [esp+2Ch+var_10], ebx
.text:00407A6A                 mov     ecx, 18h
.text:00407A6F                 mov     ebx, [esp+2Ch+arg_0]
.text:00407A73                 mov     [esp+2Ch+var_C], esi
.text:00407A77                 mov     esi, [esp+2Ch+arg_4]
.text:00407A7B                 test    ebx, ebx
.text:00407A7D                 mov     [esp+2Ch+var_8], edi
.text:00407A81                 mov     edi, esi
.text:00407A83                 mov     [esp+2Ch+var_4], ebp
.text:00407A87                 rep stosd
.text:00407A89                 jz      short loc_407A90
.text:00407A8B                 cmp     byte ptr [ebx], 0
.text:00407A8E                 jnz     short loc_407AA8
.text:00407A90
.text:00407A90 loc_407A90:                             ; CODE XREF: sub_40B1F0-3767↑j
.text:00407A90                 xor     edx, edx
.text:00407A92
.text:00407A92 loc_407A92:                             ; CODE XREF: sub_40B1F0-3731↓j
.text:00407A92                                         ; sub_40B1F0-3688↓j
.text:00407A92                 mov     ebx, [esp+2Ch+var_10]
.text:00407A96                 mov     eax, edx
.text:00407A98                 mov     esi, [esp+2Ch+var_C]
.text:00407A9C                 mov     edi, [esp+2Ch+var_8]
.text:00407AA0                 mov     ebp, [esp+2Ch+var_4]
.text:00407AA4                 add     esp, 2Ch
.text:00407AA7                 retn
.text:00407AA8 ; ---------------------------------------------------------------------------
.text:00407AA8
.text:00407AA8 loc_407AA8:                             ; CODE XREF: sub_40B1F0-3762↑j
.text:00407AA8                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:00407AB0                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:00407AB3                 call    sub_409690
.text:00407AB8                 test    eax, eax
.text:00407ABA                 mov     edx, 0FFFFFFFFh
.text:00407ABF                 jnz     short loc_407A92
.text:00407AC1                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:00407AC4                 call    sub_409540
.text:00407AC9                 mov     [esp+2Ch+lpFileName], eax
.text:00407ACC                 call    sub_407FF0
.text:00407AD1                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:00407AD4                 mov     ebp, eax
.text:00407AD6                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:00407ADE                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:00407AE6                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:00407AEE                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00407AF6                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:00407AFE                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00407B06                 call    CreateFileA
.text:00407B0B                 sub     esp, 1Ch
.text:00407B0E                 mov     ebx, eax
.text:00407B10                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00407B14                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:00407B17                 call    sub_4063A0
.text:00407B1C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:00407B1F                 mov     edi, eax
.text:00407B21                 call    CloseHandle
.text:00407B26                 sub     esp, 4
.text:00407B29                 cmp     edi, 0FFFFFFFFh
.text:00407B2C                 jz      short loc_407B8A
.text:00407B2E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00407B32                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:00407B35                 call    sub_406870
.text:00407B3A
.text:00407B3A loc_407B3A:                             ; CODE XREF: sub_40B1F0-3658↓j
.text:00407B3A                 mov     edx, [esi]
.text:00407B3C                 and     edx, 0F000h
.text:00407B42                 cmp     edx, 4000h
.text:00407B48                 jz      short loc_407B7D
.text:00407B4A
.text:00407B4A loc_407B4A:                             ; CODE XREF: sub_40B1F0-3668↓j
.text:00407B4A                 cmp     edi, 0FFFFFFFFh
.text:00407B4D                 jz      short loc_407B6D
.text:00407B4F
.text:00407B4F loc_407B4F:                             ; CODE XREF: sub_40B1F0-3675↓j
.text:00407B4F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:00407B56                 call    SetErrorMode
.text:00407B5B                 sub     esp, 4
.text:00407B5E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:00407B61                 call    free
.text:00407B66                 mov     edx, edi
.text:00407B68                 jmp     loc_407A92
.text:00407B6D ; ---------------------------------------------------------------------------
.text:00407B6D
.text:00407B6D loc_407B6D:                             ; CODE XREF: sub_40B1F0-36A3↑j
.text:00407B6D                 call    sub_4094F0
.text:00407B72                 mov     esi, eax
.text:00407B74                 call    _errno
.text:00407B79                 mov     [eax], esi
.text:00407B7B                 jmp     short loc_407B4F
.text:00407B7D ; ---------------------------------------------------------------------------
.text:00407B7D
.text:00407B7D loc_407B7D:                             ; CODE XREF: sub_40B1F0-36A8↑j
.text:00407B7D                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:00407B80                 call    sub_406220
.text:00407B85                 mov     [esi+18h], eax
.text:00407B88                 jmp     short loc_407B4A
.text:00407B8A ; ---------------------------------------------------------------------------
.text:00407B8A
.text:00407B8A loc_407B8A:                             ; CODE XREF: sub_40B1F0-36C4↑j
.text:00407B8A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00407B8E                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:00407B91                 call    sub_407650
.text:00407B96                 mov     edi, eax
.text:00407B98                 jmp     short loc_407B3A
.text:00407B98 ; END OF FUNCTION CHUNK FOR sub_40B1F0
.text:00407B98 ; ---------------------------------------------------------------------------
.text:00407B9A                 align 10h
.text:00407BA0
.text:00407BA0 ; =============== S U B R O U T I N E =======================================
.text:00407BA0
.text:00407BA0 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:00407BA0
.text:00407BA0 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:00407BA0 _win32_longpath proc near               ; CODE XREF: .text:00408364↓p
.text:00407BA0
.text:00407BA0 C               = dword ptr -278h
.text:00407BA0 lpFindFileData  = dword ptr -274h
.text:00407BA0 Destination     = byte ptr -268h
.text:00407BA0 var_267         = byte ptr -267h
.text:00407BA0 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:00407BA0 lpFileName      = dword ptr  8
.text:00407BA0
.text:00407BA0                 push    ebp
.text:00407BA1                 xor     eax, eax
.text:00407BA3                 push    edi
.text:00407BA4                 push    esi
.text:00407BA5                 push    ebx
.text:00407BA6                 sub     esp, 26Ch
.text:00407BAC                 mov     esi, [esp+278h+lpFileName]
.text:00407BB3                 lea     ebp, [esp+278h+Destination]
.text:00407BB7                 test    esi, esi
.text:00407BB9                 jz      loc_407D17
.text:00407BBF                 movsx   edx, byte ptr [esi]
.text:00407BC2                 mov     [esp+278h+C], edx ; C
.text:00407BC5                 call    isalpha
.text:00407BCA                 test    eax, eax
.text:00407BCC                 jz      short loc_407BDF
.text:00407BCE                 mov     eax, [esp+278h+lpFileName]
.text:00407BD5                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:00407BD9                 jz      loc_407F1B
.text:00407BDF
.text:00407BDF loc_407BDF:                             ; CODE XREF: _win32_longpath+2C↑j
.text:00407BDF                 mov     edx, [esp+278h+lpFileName]
.text:00407BE6                 movzx   eax, byte ptr [edx]
.text:00407BE9                 cmp     al, 2Fh ; '/'
.text:00407BEB                 jz      loc_407DFB
.text:00407BF1                 cmp     al, 5Ch ; '\'
.text:00407BF3                 jz      loc_407DFB
.text:00407BF9
.text:00407BF9 loc_407BF9:                             ; CODE XREF: _win32_longpath+26E↓j
.text:00407BF9                                         ; _win32_longpath+2B1↓j ...
.text:00407BF9                 mov     [ebp+268h+Destination], 0
.text:00407BFD                 movzx   ebx, byte ptr [esi]
.text:00407C00                 test    bl, bl
.text:00407C02                 jz      loc_407CF9
.text:00407C08                 nop
.text:00407C09                 lea     esi, [esi+0]
.text:00407C10
.text:00407C10 loc_407C10:                             ; CODE XREF: _win32_longpath+153↓j
.text:00407C10                 cmp     bl, 2Fh ; '/'
.text:00407C13                 jz      loc_407DB0
.text:00407C19                 cmp     bl, 5Ch ; '\'
.text:00407C1C                 jz      loc_407DB0
.text:00407C22
.text:00407C22 loc_407C22:                             ; CODE XREF: _win32_longpath+21E↓j
.text:00407C22                                         ; _win32_longpath+22C↓j ...
.text:00407C22                 cmp     bl, 2Eh ; '.'
.text:00407C25                 jz      loc_407D50
.text:00407C2B
.text:00407C2B loc_407C2B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:00407C2B                                         ; _win32_longpath+203↓j
.text:00407C2B                 test    bl, bl
.text:00407C2D                 jz      loc_407CF9
.text:00407C33                 cmp     bl, 2Fh ; '/'
.text:00407C36                 jz      short loc_407C52
.text:00407C38                 cmp     bl, 5Ch ; '\'
.text:00407C3B                 jz      short loc_407C52
.text:00407C3D                 lea     esi, [esi+0]
.text:00407C40
.text:00407C40 loc_407C40:                             ; CODE XREF: _win32_longpath+B0↓j
.text:00407C40                 inc     esi
.text:00407C41                 movzx   ebx, byte ptr [esi]
.text:00407C44                 test    bl, bl
.text:00407C46                 jz      short loc_407C52
.text:00407C48                 cmp     bl, 2Fh ; '/'
.text:00407C4B                 jz      short loc_407C52
.text:00407C4D                 cmp     bl, 5Ch ; '\'
.text:00407C50                 jnz     short loc_407C40
.text:00407C52
.text:00407C52 loc_407C52:                             ; CODE XREF: _win32_longpath+96↑j
.text:00407C52                                         ; _win32_longpath+9B↑j ...
.text:00407C52                 mov     byte ptr [esi], 0
.text:00407C55                 lea     edx, [esp+278h+FindFileData]
.text:00407C5C                 mov     eax, [esp+278h+lpFileName]
.text:00407C63                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:00407C67                 mov     [esp+278h+C], eax ; lpFileName
.text:00407C6A                 call    FindFirstFileA
.text:00407C6F                 mov     [esi], bl
.text:00407C71                 sub     esp, 8
.text:00407C74                 mov     edi, eax
.text:00407C76                 cmp     eax, 0FFFFFFFFh
.text:00407C79                 jz      loc_407D3C
.text:00407C7F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:00407C86                 mov     ecx, ebx
.text:00407C88                 nop
.text:00407C89                 lea     esi, [esi+0]
.text:00407C90
.text:00407C90 loc_407C90:                             ; CODE XREF: _win32_longpath+105↓j
.text:00407C90                 mov     eax, [ebx]
.text:00407C92                 add     ebx, 4
.text:00407C95                 lea     edx, [eax-1010101h]
.text:00407C9B                 not     eax
.text:00407C9D                 and     edx, eax
.text:00407C9F                 and     edx, 80808080h
.text:00407CA5                 jz      short loc_407C90
.text:00407CA7                 test    edx, 8080h
.text:00407CAD                 jnz     short loc_407CB5
.text:00407CAF                 shr     edx, 10h
.text:00407CB2                 add     ebx, 2
.text:00407CB5
.text:00407CB5 loc_407CB5:                             ; CODE XREF: _win32_longpath+10D↑j
.text:00407CB5                 add     dl, dl
.text:00407CB7                 sbb     ebx, 3
.text:00407CBA                 sub     ebx, ecx
.text:00407CBC                 lea     ecx, [esp+278h+Destination]
.text:00407CC0                 sub     ecx, ebp
.text:00407CC2                 add     ecx, 105h
.text:00407CC8                 cmp     ecx, ebx
.text:00407CCA                 jle     short loc_407D22
.text:00407CCC                 mov     [esp+278h+C], ebp ; Destination
.text:00407CCF                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:00407CD6                 add     ebp, ebx
.text:00407CD8                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:00407CDC                 call    strcpy
.text:00407CE1                 mov     [esp+278h+C], edi ; hFindFile
.text:00407CE4                 call    FindClose
.text:00407CE9                 sub     esp, 4
.text:00407CEC
.text:00407CEC loc_407CEC:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:00407CEC                 movzx   ecx, byte ptr [esi]
.text:00407CEF                 test    cl, cl
.text:00407CF1                 mov     bl, cl
.text:00407CF3                 jnz     loc_407C10
.text:00407CF9
.text:00407CF9 loc_407CF9:                             ; CODE XREF: _win32_longpath+62↑j
.text:00407CF9                                         ; _win32_longpath+8D↑j
.text:00407CF9                 mov     esi, [esp+278h+lpFileName]
.text:00407D00                 lea     ebp, [esp+278h+Destination]
.text:00407D04                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:00407D08                 mov     [esp+278h+C], esi ; Destination
.text:00407D0B                 call    strcpy
.text:00407D10                 mov     eax, [esp+278h+lpFileName]
.text:00407D17
.text:00407D17 loc_407D17:                             ; CODE XREF: _win32_longpath+19↑j
.text:00407D17                                         ; _win32_longpath+19A↓j
.text:00407D17                 add     esp, 26Ch
.text:00407D1D                 pop     ebx
.text:00407D1E                 pop     esi
.text:00407D1F                 pop     edi
.text:00407D20                 pop     ebp
.text:00407D21                 retn
.text:00407D22 ; ---------------------------------------------------------------------------
.text:00407D22
.text:00407D22 loc_407D22:                             ; CODE XREF: _win32_longpath+12A↑j
.text:00407D22                 mov     [esp+278h+C], edi ; hFindFile
.text:00407D25                 call    FindClose
.text:00407D2A                 sub     esp, 4
.text:00407D2D                 call    _errno
.text:00407D32                 mov     dword ptr [eax], 22h ; '"'
.text:00407D38
.text:00407D38 loc_407D38:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:00407D38                 xor     eax, eax
.text:00407D3A                 jmp     short loc_407D17
.text:00407D3C ; ---------------------------------------------------------------------------
.text:00407D3C
.text:00407D3C loc_407D3C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:00407D3C                 call    _errno
.text:00407D41                 mov     dword ptr [eax], 16h
.text:00407D47                 jmp     short loc_407D38
.text:00407D47 ; ---------------------------------------------------------------------------
.text:00407D49                 align 10h
.text:00407D50
.text:00407D50 loc_407D50:                             ; CODE XREF: _win32_longpath+85↑j
.text:00407D50                 movzx   eax, byte ptr [esi+1]
.text:00407D54                 test    al, al
.text:00407D56                 jnz     short loc_407D85
.text:00407D58
.text:00407D58 loc_407D58:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:00407D58                                         ; _win32_longpath+1EB↓j ...
.text:00407D58                 test    bl, bl
.text:00407D5A                 jz      short loc_407D7C
.text:00407D5C                 cmp     bl, 2Fh ; '/'
.text:00407D5F                 jz      short loc_407D7C
.text:00407D61                 cmp     bl, 5Ch ; '\'
.text:00407D64                 jz      short loc_407D7C
.text:00407D66
.text:00407D66 loc_407D66:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:00407D66                 mov     [ebp+268h+Destination], bl
.text:00407D69                 inc     esi
.text:00407D6A                 inc     ebp
.text:00407D6B                 movzx   ebx, byte ptr [esi]
.text:00407D6E                 test    bl, bl
.text:00407D70                 jz      short loc_407D7C
.text:00407D72                 cmp     bl, 2Fh ; '/'
.text:00407D75                 jz      short loc_407D7C
.text:00407D77                 cmp     bl, 5Ch ; '\'
.text:00407D7A                 jnz     short loc_407D66
.text:00407D7C
.text:00407D7C loc_407D7C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:00407D7C                                         ; _win32_longpath+1BF↑j ...
.text:00407D7C                 mov     [ebp+268h+Destination], 0
.text:00407D80                 jmp     loc_407CEC
.text:00407D85 ; ---------------------------------------------------------------------------
.text:00407D85
.text:00407D85 loc_407D85:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:00407D85                 cmp     al, 2Fh ; '/'
.text:00407D87                 jz      short loc_407D58
.text:00407D89                 cmp     al, 5Ch ; '\'
.text:00407D8B                 jz      short loc_407D58
.text:00407D8D                 cmp     al, 2Eh ; '.'
.text:00407D8F                 jnz     loc_407C2B
.text:00407D95                 movzx   eax, byte ptr [esi+2]
.text:00407D99                 test    al, al
.text:00407D9B                 jz      short loc_407D58
.text:00407D9D                 cmp     al, 2Fh ; '/'
.text:00407D9F                 jz      short loc_407D58
.text:00407DA1                 cmp     al, 5Ch ; '\'
.text:00407DA3                 jnz     loc_407C2B
.text:00407DA9                 jmp     short loc_407D58
.text:00407DA9 ; ---------------------------------------------------------------------------
.text:00407DAB                 align 10h
.text:00407DB0
.text:00407DB0 loc_407DB0:                             ; CODE XREF: _win32_longpath+73↑j
.text:00407DB0                                         ; _win32_longpath+7C↑j
.text:00407DB0                 mov     [ebp+268h+Destination], bl
.text:00407DB3                 inc     esi
.text:00407DB4                 inc     ebp
.text:00407DB5                 mov     [ebp+268h+Destination], 0
.text:00407DB9                 movzx   ebx, byte ptr [esi]
.text:00407DBC                 test    bl, bl
.text:00407DBE                 jz      loc_407C22
.text:00407DC4                 cmp     bl, 2Fh ; '/'
.text:00407DC7                 jz      short loc_407DE0
.text:00407DC9                 cmp     bl, 5Ch ; '\'
.text:00407DCC                 jnz     loc_407C22
.text:00407DD2                 lea     esi, [esi+0]
.text:00407DD9                 lea     edi, [edi+0]
.text:00407DE0
.text:00407DE0 loc_407DE0:                             ; CODE XREF: _win32_longpath+227↑j
.text:00407DE0                                         ; _win32_longpath+24F↓j ...
.text:00407DE0                 inc     esi
.text:00407DE1                 movzx   ebx, byte ptr [esi]
.text:00407DE4                 test    bl, bl
.text:00407DE6                 jz      loc_407C22
.text:00407DEC                 cmp     bl, 2Fh ; '/'
.text:00407DEF                 jz      short loc_407DE0
.text:00407DF1                 cmp     bl, 5Ch ; '\'
.text:00407DF4                 jz      short loc_407DE0
.text:00407DF6                 jmp     loc_407C22
.text:00407DFB ; ---------------------------------------------------------------------------
.text:00407DFB
.text:00407DFB loc_407DFB:                             ; CODE XREF: _win32_longpath+4B↑j
.text:00407DFB                                         ; _win32_longpath+53↑j
.text:00407DFB                 mov     edi, [esp+278h+lpFileName]
.text:00407E02                 movzx   edx, byte ptr [edi+1]
.text:00407E06                 cmp     dl, 2Fh ; '/'
.text:00407E09                 jz      short loc_407E14
.text:00407E0B                 cmp     dl, 5Ch ; '\'
.text:00407E0E                 jnz     loc_407BF9
.text:00407E14
.text:00407E14 loc_407E14:                             ; CODE XREF: _win32_longpath+269↑j
.text:00407E14                 mov     esi, [esp+278h+lpFileName]
.text:00407E1B                 mov     [ebp+268h+Destination], al
.text:00407E1E                 mov     ecx, [esp+278h+lpFileName]
.text:00407E25                 inc     ebp
.text:00407E26                 add     esi, 2
.text:00407E29                 movzx   ebx, byte ptr [ecx+1]
.text:00407E2D                 mov     [ebp+268h+Destination], bl
.text:00407E30                 inc     ebp
.text:00407E31                 movzx   eax, byte ptr [ecx+2]
.text:00407E35                 test    al, al
.text:00407E37                 jz      loc_407F13
.text:00407E3D                 cmp     al, 2Fh ; '/'
.text:00407E3F                 jz      loc_407EF8
.text:00407E45                 cmp     al, 5Ch ; '\'
.text:00407E47                 mov     bl, al
.text:00407E49                 jz      loc_407EF8
.text:00407E4F
.text:00407E4F loc_407E4F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:00407E4F                                         ; _win32_longpath+376↓j
.text:00407E4F                 test    bl, bl
.text:00407E51                 jz      loc_407BF9
.text:00407E57                 cmp     bl, 2Fh ; '/'
.text:00407E5A                 jz      short loc_407E7B
.text:00407E5C                 cmp     bl, 5Ch ; '\'
.text:00407E5F                 jz      short loc_407E7B
.text:00407E61
.text:00407E61 loc_407E61:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:00407E61                 mov     [ebp+268h+Destination], bl
.text:00407E64                 inc     esi
.text:00407E65                 inc     ebp
.text:00407E66                 movzx   ebx, byte ptr [esi]
.text:00407E69                 test    bl, bl
.text:00407E6B                 jz      loc_407BF9
.text:00407E71                 cmp     bl, 2Fh ; '/'
.text:00407E74                 jz      short loc_407E7B
.text:00407E76                 cmp     bl, 5Ch ; '\'
.text:00407E79                 jnz     short loc_407E61
.text:00407E7B
.text:00407E7B loc_407E7B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:00407E7B                                         ; _win32_longpath+2BF↑j ...
.text:00407E7B                 test    bl, bl
.text:00407E7D                 jz      loc_407BF9
.text:00407E83                 mov     [ebp+268h+Destination], bl
.text:00407E86                 inc     esi
.text:00407E87                 inc     ebp
.text:00407E88                 movzx   ebx, byte ptr [esi]
.text:00407E8B                 test    bl, bl
.text:00407E8D                 jz      loc_407BF9
.text:00407E93                 cmp     bl, 2Fh ; '/'
.text:00407E96                 jz      short loc_407EE0
.text:00407E98                 cmp     bl, 5Ch ; '\'
.text:00407E9B                 jz      short loc_407EE0
.text:00407E9D
.text:00407E9D loc_407E9D:                             ; CODE XREF: _win32_longpath+356↓j
.text:00407E9D                 test    bl, bl
.text:00407E9F                 jz      loc_407BF9
.text:00407EA5                 cmp     bl, 2Fh ; '/'
.text:00407EA8                 jz      loc_407BF9
.text:00407EAE                 cmp     bl, 5Ch ; '\'
.text:00407EB1                 jz      loc_407BF9
.text:00407EB7
.text:00407EB7 loc_407EB7:                             ; CODE XREF: _win32_longpath+333↓j
.text:00407EB7                 mov     [ebp+268h+Destination], bl
.text:00407EBA                 inc     esi
.text:00407EBB                 inc     ebp
.text:00407EBC                 movzx   ebx, byte ptr [esi]
.text:00407EBF                 test    bl, bl
.text:00407EC1                 jz      loc_407BF9
.text:00407EC7                 cmp     bl, 2Fh ; '/'
.text:00407ECA                 jz      loc_407BF9
.text:00407ED0                 cmp     bl, 5Ch ; '\'
.text:00407ED3                 jnz     short loc_407EB7
.text:00407ED5                 jmp     loc_407BF9
.text:00407ED5 ; ---------------------------------------------------------------------------
.text:00407EDA                 align 10h
.text:00407EE0
.text:00407EE0 loc_407EE0:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:00407EE0                                         ; _win32_longpath+2FB↑j ...
.text:00407EE0                 inc     esi
.text:00407EE1                 movzx   ebx, byte ptr [esi]
.text:00407EE4                 test    bl, bl
.text:00407EE6                 jz      loc_407BF9
.text:00407EEC                 cmp     bl, 2Fh ; '/'
.text:00407EEF                 jz      short loc_407EE0
.text:00407EF1                 cmp     bl, 5Ch ; '\'
.text:00407EF4                 jz      short loc_407EE0
.text:00407EF6                 jmp     short loc_407E9D
.text:00407EF8 ; ---------------------------------------------------------------------------
.text:00407EF8
.text:00407EF8 loc_407EF8:                             ; CODE XREF: _win32_longpath+29F↑j
.text:00407EF8                                         ; _win32_longpath+2A9↑j ...
.text:00407EF8                 inc     esi
.text:00407EF9                 movzx   ebx, byte ptr [esi]
.text:00407EFC                 test    bl, bl
.text:00407EFE                 jz      loc_407BF9
.text:00407F04                 cmp     bl, 2Fh ; '/'
.text:00407F07                 jz      short loc_407EF8
.text:00407F09                 cmp     bl, 5Ch ; '\'
.text:00407F0C                 jz      short loc_407EF8
.text:00407F0E                 jmp     loc_407E4F
.text:00407F13 ; ---------------------------------------------------------------------------
.text:00407F13
.text:00407F13 loc_407F13:                             ; CODE XREF: _win32_longpath+297↑j
.text:00407F13                 movzx   ebx, byte ptr [esi]
.text:00407F16                 jmp     loc_407E4F
.text:00407F1B ; ---------------------------------------------------------------------------
.text:00407F1B
.text:00407F1B loc_407F1B:                             ; CODE XREF: _win32_longpath+39↑j
.text:00407F1B                 movzx   ecx, byte ptr [eax]
.text:00407F1E                 mov     esi, eax
.text:00407F20                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:00407F25                 add     esi, 2
.text:00407F28                 lea     ebp, [esp+12h]
.text:00407F2C                 mov     [esp+278h+Destination], cl
.text:00407F30                 jmp     loc_407BF9
.text:00407F30 _win32_longpath endp
.text:00407F30
.text:00407F30 ; ---------------------------------------------------------------------------
.text:00407F35                 align 10h
.text:00407F40                 sub     esp, 0Ch
.text:00407F43                 mov     edx, [esp+10h]
.text:00407F47                 mov     dword ptr [esp+4], 0
.text:00407F4F                 mov     [esp], edx
.text:00407F52                 call    sub_409690
.text:00407F57                 inc     eax
.text:00407F58                 setnz   dl
.text:00407F5B                 add     esp, 0Ch
.text:00407F5E                 movzx   eax, dl
.text:00407F61                 retn
.text:00407F61 ; ---------------------------------------------------------------------------
.text:00407F62                 align 10h
.text:00407F70
.text:00407F70 ; =============== S U B R O U T I N E =======================================
.text:00407F70
.text:00407F70
.text:00407F70 sub_407F70      proc near               ; CODE XREF: sub_409560+AA↓p
.text:00407F70                                         ; sub_40B110+B4↓p
.text:00407F70
.text:00407F70 arg_0           = dword ptr  4
.text:00407F70
.text:00407F70                 mov     ecx, [esp+arg_0]
.text:00407F74                 mov     edx, ecx
.text:00407F76                 movzx   eax, byte ptr [ecx]
.text:00407F79                 test    al, al
.text:00407F7B                 jz      short loc_407F8C
.text:00407F7D                 lea     esi, [esi+0]
.text:00407F80
.text:00407F80 loc_407F80:                             ; CODE XREF: sub_407F70+1A↓j
.text:00407F80                 cmp     al, 5Ch ; '\'
.text:00407F82                 jz      short loc_407F90
.text:00407F84
.text:00407F84 loc_407F84:                             ; CODE XREF: sub_407F70+23↓j
.text:00407F84                 inc     edx
.text:00407F85                 movzx   eax, byte ptr [edx]
.text:00407F88                 test    al, al
.text:00407F8A                 jnz     short loc_407F80
.text:00407F8C
.text:00407F8C loc_407F8C:                             ; CODE XREF: sub_407F70+B↑j
.text:00407F8C                 mov     eax, ecx
.text:00407F8E                 retn
.text:00407F8E ; ---------------------------------------------------------------------------
.text:00407F8F                 align 10h
.text:00407F90
.text:00407F90 loc_407F90:                             ; CODE XREF: sub_407F70+12↑j
.text:00407F90                 mov     byte ptr [edx], 2Fh ; '/'
.text:00407F93                 jmp     short loc_407F84
.text:00407F93 sub_407F70      endp
.text:00407F93
.text:00407F93 ; ---------------------------------------------------------------------------
.text:00407F95                 align 10h
.text:00407FA0                 push    ebx
.text:00407FA1                 sub     esp, 8
.text:00407FA4                 mov     ebx, [esp+14h]
.text:00407FA8                 mov     edx, [esp+10h]
.text:00407FAC                 mov     [esp], ebx
.text:00407FAF                 mov     [esp+4], edx
.text:00407FB3                 call    strcpy
.text:00407FB8                 movzx   eax, byte ptr [ebx]
.text:00407FBB                 mov     edx, ebx
.text:00407FBD                 test    al, al
.text:00407FBF                 jz      short loc_407FDC
.text:00407FC1                 jmp     short loc_407FD0
.text:00407FC1 ; ---------------------------------------------------------------------------
.text:00407FC3                 align 10h
.text:00407FD0
.text:00407FD0 loc_407FD0:                             ; CODE XREF: .text:00407FC1↑j
.text:00407FD0                                         ; .text:00407FDA↓j
.text:00407FD0                 cmp     al, 5Ch ; '\'
.text:00407FD2                 jz      short loc_407FE3
.text:00407FD4
.text:00407FD4 loc_407FD4:                             ; CODE XREF: .text:00407FE6↓j
.text:00407FD4                 inc     edx
.text:00407FD5                 movzx   eax, byte ptr [edx]
.text:00407FD8                 test    al, al
.text:00407FDA                 jnz     short loc_407FD0
.text:00407FDC
.text:00407FDC loc_407FDC:                             ; CODE XREF: .text:00407FBF↑j
.text:00407FDC                 add     esp, 8
.text:00407FDF                 xor     eax, eax
.text:00407FE1                 pop     ebx
.text:00407FE2                 retn
.text:00407FE3 ; ---------------------------------------------------------------------------
.text:00407FE3
.text:00407FE3 loc_407FE3:                             ; CODE XREF: .text:00407FD2↑j
.text:00407FE3                 mov     byte ptr [edx], 2Fh ; '/'
.text:00407FE6                 jmp     short loc_407FD4
.text:00407FE6 ; ---------------------------------------------------------------------------
.text:00407FE8                 align 10h
.text:00407FF0
.text:00407FF0 ; =============== S U B R O U T I N E =======================================
.text:00407FF0
.text:00407FF0
.text:00407FF0 sub_407FF0      proc near               ; CODE XREF: sub_406870+16↑p
.text:00407FF0                                         ; sub_406D70+1F↑p ...
.text:00407FF0
.text:00407FF0 arg_0           = dword ptr  4
.text:00407FF0
.text:00407FF0                 mov     ecx, [esp+arg_0]
.text:00407FF4                 mov     edx, ecx
.text:00407FF6                 movzx   eax, byte ptr [ecx]
.text:00407FF9                 test    al, al
.text:00407FFB                 jz      short loc_40800C
.text:00407FFD                 lea     esi, [esi+0]
.text:00408000
.text:00408000 loc_408000:                             ; CODE XREF: sub_407FF0+1A↓j
.text:00408000                 cmp     al, 2Fh ; '/'
.text:00408002                 jz      short loc_408010
.text:00408004
.text:00408004 loc_408004:                             ; CODE XREF: sub_407FF0+23↓j
.text:00408004                 inc     edx
.text:00408005                 movzx   eax, byte ptr [edx]
.text:00408008                 test    al, al
.text:0040800A                 jnz     short loc_408000
.text:0040800C
.text:0040800C loc_40800C:                             ; CODE XREF: sub_407FF0+B↑j
.text:0040800C                 mov     eax, ecx
.text:0040800E                 retn
.text:0040800E ; ---------------------------------------------------------------------------
.text:0040800F                 align 10h
.text:00408010
.text:00408010 loc_408010:                             ; CODE XREF: sub_407FF0+12↑j
.text:00408010                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408013                 jmp     short loc_408004
.text:00408013 sub_407FF0      endp
.text:00408013
.text:00408013 ; ---------------------------------------------------------------------------
.text:00408015                 align 10h
.text:00408020                 push    ebx
.text:00408021                 sub     esp, 8
.text:00408024                 mov     ebx, [esp+14h]
.text:00408028                 mov     edx, [esp+10h]
.text:0040802C                 mov     [esp], ebx
.text:0040802F                 mov     [esp+4], edx
.text:00408033                 call    strcpy
.text:00408038                 movzx   eax, byte ptr [ebx]
.text:0040803B                 mov     edx, ebx
.text:0040803D                 test    al, al
.text:0040803F                 jz      short loc_40805C
.text:00408041                 jmp     short loc_408050
.text:00408041 ; ---------------------------------------------------------------------------
.text:00408043                 align 10h
.text:00408050
.text:00408050 loc_408050:                             ; CODE XREF: .text:00408041↑j
.text:00408050                                         ; .text:0040805A↓j
.text:00408050                 cmp     al, 2Fh ; '/'
.text:00408052                 jz      short loc_408063
.text:00408054
.text:00408054 loc_408054:                             ; CODE XREF: .text:00408066↓j
.text:00408054                 inc     edx
.text:00408055                 movzx   eax, byte ptr [edx]
.text:00408058                 test    al, al
.text:0040805A                 jnz     short loc_408050
.text:0040805C
.text:0040805C loc_40805C:                             ; CODE XREF: .text:0040803F↑j
.text:0040805C                 add     esp, 8
.text:0040805F                 xor     eax, eax
.text:00408061                 pop     ebx
.text:00408062                 retn
.text:00408063 ; ---------------------------------------------------------------------------
.text:00408063
.text:00408063 loc_408063:                             ; CODE XREF: .text:00408052↑j
.text:00408063                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408066                 jmp     short loc_408054
.text:00408066 ; ---------------------------------------------------------------------------
.text:00408068                 align 10h
.text:00408070                 push    ebx
.text:00408071                 sub     esp, 8
.text:00408074                 mov     ebx, [esp+14h]
.text:00408078                 mov     edx, [esp+10h]
.text:0040807C                 mov     [esp+4], ebx
.text:00408080                 mov     [esp], edx
.text:00408083                 call    sub_409510
.text:00408088                 movzx   eax, byte ptr [ebx]
.text:0040808B                 mov     edx, ebx
.text:0040808D                 test    al, al
.text:0040808F                 jz      short loc_4080AC
.text:00408091                 jmp     short loc_4080A0
.text:00408091 ; ---------------------------------------------------------------------------
.text:00408093                 align 10h
.text:004080A0
.text:004080A0 loc_4080A0:                             ; CODE XREF: .text:00408091↑j
.text:004080A0                                         ; .text:004080AA↓j
.text:004080A0                 cmp     al, 2Fh ; '/'
.text:004080A2                 jz      short loc_4080B3
.text:004080A4
.text:004080A4 loc_4080A4:                             ; CODE XREF: .text:004080B6↓j
.text:004080A4                 inc     edx
.text:004080A5                 movzx   eax, byte ptr [edx]
.text:004080A8                 test    al, al
.text:004080AA                 jnz     short loc_4080A0
.text:004080AC
.text:004080AC loc_4080AC:                             ; CODE XREF: .text:0040808F↑j
.text:004080AC                 add     esp, 8
.text:004080AF                 xor     eax, eax
.text:004080B1                 pop     ebx
.text:004080B2                 retn
.text:004080B3 ; ---------------------------------------------------------------------------
.text:004080B3
.text:004080B3 loc_4080B3:                             ; CODE XREF: .text:004080A2↑j
.text:004080B3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004080B6                 jmp     short loc_4080A4
.text:004080B6 ; ---------------------------------------------------------------------------
.text:004080B8                 align 10h
.text:004080C0                 push    ebx
.text:004080C1                 sub     esp, 8
.text:004080C4                 mov     ebx, [esp+14h]
.text:004080C8                 mov     edx, [esp+10h]
.text:004080CC                 mov     [esp], ebx
.text:004080CF                 mov     [esp+4], edx
.text:004080D3                 call    sub_409510
.text:004080D8                 movzx   eax, byte ptr [ebx]
.text:004080DB                 mov     edx, ebx
.text:004080DD                 test    al, al
.text:004080DF                 jz      short loc_4080FC
.text:004080E1                 jmp     short loc_4080F0
.text:004080E1 ; ---------------------------------------------------------------------------
.text:004080E3                 align 10h
.text:004080F0
.text:004080F0 loc_4080F0:                             ; CODE XREF: .text:004080E1↑j
.text:004080F0                                         ; .text:004080FA↓j
.text:004080F0                 cmp     al, 5Ch ; '\'
.text:004080F2                 jz      short loc_408101
.text:004080F4
.text:004080F4 loc_4080F4:                             ; CODE XREF: .text:00408104↓j
.text:004080F4                 inc     edx
.text:004080F5                 movzx   eax, byte ptr [edx]
.text:004080F8                 test    al, al
.text:004080FA                 jnz     short loc_4080F0
.text:004080FC
.text:004080FC loc_4080FC:                             ; CODE XREF: .text:004080DF↑j
.text:004080FC                 add     esp, 8
.text:004080FF                 pop     ebx
.text:00408100                 retn
.text:00408101 ; ---------------------------------------------------------------------------
.text:00408101
.text:00408101 loc_408101:                             ; CODE XREF: .text:004080F2↑j
.text:00408101                 mov     byte ptr [edx], 2Fh ; '/'
.text:00408104                 jmp     short loc_4080F4
.text:00408104 ; ---------------------------------------------------------------------------
.text:00408106                 align 10h
.text:00408110
.text:00408110 ; =============== S U B R O U T I N E =======================================
.text:00408110
.text:00408110
.text:00408110 ; int __cdecl sub_408110(LPSTR)
.text:00408110 sub_408110      proc near               ; CODE XREF: .text:0040819E↓p
.text:00408110                                         ; .text:004081DE↓p ...
.text:00408110
.text:00408110 hModule         = dword ptr -1Ch
.text:00408110 lpFilename      = dword ptr -18h
.text:00408110 nSize           = dword ptr -14h
.text:00408110 arg_0           = dword ptr  4
.text:00408110
.text:00408110                 push    esi
.text:00408111                 push    ebx
.text:00408112                 sub     esp, 14h
.text:00408115                 mov     esi, [esp+1Ch+arg_0]
.text:00408119                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:00408121                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:00408128                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040812C                 call    GetModuleFileNameA
.text:00408131                 sub     esp, 0Ch
.text:00408134                 test    eax, eax
.text:00408136                 jz      short loc_408178
.text:00408138                 cmp     eax, 104h
.text:0040813D                 jg      short loc_408169
.text:0040813F
.text:0040813F loc_40813F:                             ; CODE XREF: sub_408110+66↓j
.text:0040813F                                         ; sub_408110+78↓j
.text:0040813F                 movzx   eax, byte ptr [esi]
.text:00408142                 mov     edx, esi
.text:00408144                 test    al, al
.text:00408146                 jz      short loc_40815C
.text:00408148                 nop
.text:00408149                 lea     esi, [esi+0]
.text:00408150
.text:00408150 loc_408150:                             ; CODE XREF: sub_408110+4A↓j
.text:00408150                 cmp     al, 5Ch ; '\'
.text:00408152                 jz      short loc_408164
.text:00408154
.text:00408154 loc_408154:                             ; CODE XREF: sub_408110+57↓j
.text:00408154                 inc     edx
.text:00408155                 movzx   eax, byte ptr [edx]
.text:00408158                 test    al, al
.text:0040815A                 jnz     short loc_408150
.text:0040815C
.text:0040815C loc_40815C:                             ; CODE XREF: sub_408110+36↑j
.text:0040815C                 add     esp, 14h
.text:0040815F                 mov     eax, esi
.text:00408161                 pop     ebx
.text:00408162                 pop     esi
.text:00408163                 retn
.text:00408164 ; ---------------------------------------------------------------------------
.text:00408164
.text:00408164 loc_408164:                             ; CODE XREF: sub_408110+42↑j
.text:00408164                 mov     byte ptr [edx], 2Fh ; '/'
.text:00408167                 jmp     short loc_408154
.text:00408169 ; ---------------------------------------------------------------------------
.text:00408169
.text:00408169 loc_408169:                             ; CODE XREF: sub_408110+2D↑j
.text:00408169                 call    _errno
.text:0040816E                 mov     dword ptr [eax], 26h ; '&'
.text:00408174                 xor     esi, esi
.text:00408176                 jmp     short loc_40813F
.text:00408178 ; ---------------------------------------------------------------------------
.text:00408178
.text:00408178 loc_408178:                             ; CODE XREF: sub_408110+26↑j
.text:00408178                 call    sub_4094F0
.text:0040817D                 mov     ebx, eax
.text:0040817F                 xor     esi, esi
.text:00408181                 call    _errno
.text:00408186                 mov     [eax], ebx
.text:00408188                 jmp     short loc_40813F
.text:00408188 sub_408110      endp
.text:00408188
.text:00408188 ; ---------------------------------------------------------------------------
.text:0040818A                 align 10h
.text:00408190                 sub     esp, 0Ch
.text:00408193                 mov     [esp+8], ebx
.text:00408197                 mov     ebx, [esp+10h]
.text:0040819B                 mov     [esp], ebx
.text:0040819E                 call    sub_408110
.text:004081A3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004081AB                 mov     [esp], ebx
.text:004081AE                 call    strrchr
.text:004081B3                 test    eax, eax
.text:004081B5                 jz      short loc_4081BA
.text:004081B7                 lea     ebx, [eax+1]
.text:004081BA
.text:004081BA loc_4081BA:                             ; CODE XREF: .text:004081B5↑j
.text:004081BA                 mov     eax, ebx
.text:004081BC                 mov     ebx, [esp+8]
.text:004081C0                 add     esp, 0Ch
.text:004081C3                 retn
.text:004081C3 ; ---------------------------------------------------------------------------
.text:004081C4                 align 10h
.text:004081D0                 sub     esp, 0Ch
.text:004081D3                 mov     [esp+8], ebx
.text:004081D7                 mov     ebx, [esp+10h]
.text:004081DB                 mov     [esp], ebx
.text:004081DE                 call    sub_408110
.text:004081E3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004081EB                 mov     [esp], ebx
.text:004081EE                 call    strrchr
.text:004081F3                 test    eax, eax
.text:004081F5                 jz      short loc_4081FA
.text:004081F7                 mov     byte ptr [eax], 0
.text:004081FA
.text:004081FA loc_4081FA:                             ; CODE XREF: .text:004081F5↑j
.text:004081FA                 mov     eax, ebx
.text:004081FC                 mov     ebx, [esp+8]
.text:00408200                 add     esp, 0Ch
.text:00408203                 retn
.text:00408203 ; ---------------------------------------------------------------------------
.text:00408204                 align 10h
.text:00408210                 sub     esp, 0Ch
.text:00408213                 mov     [esp+8], ebx
.text:00408217                 mov     ebx, [esp+10h]
.text:0040821B                 mov     [esp], ebx
.text:0040821E                 call    sub_408110
.text:00408223                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040822B                 mov     [esp], ebx
.text:0040822E                 call    strrchr
.text:00408233                 test    eax, eax
.text:00408235                 jz      short loc_40823A
.text:00408237                 mov     byte ptr [eax], 0
.text:0040823A
.text:0040823A loc_40823A:                             ; CODE XREF: .text:00408235↑j
.text:0040823A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00408242                 mov     [esp], ebx
.text:00408245                 call    strrchr
.text:0040824A                 test    eax, eax
.text:0040824C                 jz      short loc_408251
.text:0040824E                 mov     byte ptr [eax], 0
.text:00408251
.text:00408251 loc_408251:                             ; CODE XREF: .text:0040824C↑j
.text:00408251                 mov     eax, ebx
.text:00408253                 mov     ebx, [esp+8]
.text:00408257                 add     esp, 0Ch
.text:0040825A                 retn
.text:0040825A ; ---------------------------------------------------------------------------
.text:0040825B                 align 10h
.text:00408260                 sub     esp, 1Ch
.text:00408263                 mov     edx, [esp+20h]
.text:00408267                 mov     [esp+10h], ebx
.text:0040826B                 xor     ebx, ebx
.text:0040826D                 mov     [esp+14h], esi
.text:00408271                 mov     [esp+18h], edi
.text:00408275                 mov     [esp], edx
.text:00408278                 call    sub_409540
.text:0040827D                 mov     edx, [esp+24h]
.text:00408281                 mov     edi, eax
.text:00408283                 mov     [esp], edx
.text:00408286                 call    sub_409540
.text:0040828B                 mov     [esp+4], eax
.text:0040828F                 mov     esi, eax
.text:00408291                 mov     [esp], edi
.text:00408294                 call    _stricmp_0
.text:00408299                 mov     [esp], edi
.text:0040829C                 test    eax, eax
.text:0040829E                 setz    bl
.text:004082A1                 call    free
.text:004082A6                 mov     [esp], esi
.text:004082A9                 call    free
.text:004082AE                 mov     eax, ebx
.text:004082B0                 mov     esi, [esp+14h]
.text:004082B4                 mov     ebx, [esp+10h]
.text:004082B8                 mov     edi, [esp+18h]
.text:004082BC                 add     esp, 1Ch
.text:004082BF                 retn
.text:004082C0 ; ---------------------------------------------------------------------------
.text:004082C0                 xor     eax, eax
.text:004082C2                 retn
.text:004082C2 ; ---------------------------------------------------------------------------
.text:004082C3 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:004082F7↓o
.text:004082D0 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:00408306↓o
.text:004082E0 ; ---------------------------------------------------------------------------
.text:004082E0                 sub     esp, 1Ch
.text:004082E3                 mov     [esp+10h], ebx
.text:004082E7                 mov     ebx, [esp+20h]
.text:004082EB                 mov     [esp+18h], edi
.text:004082EF                 mov     edi, [esp+24h]
.text:004082F3                 mov     [esp+14h], esi
.text:004082F7                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:004082FE                 call    GetModuleHandleA
.text:00408303                 sub     esp, 4
.text:00408306                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040830E                 mov     [esp], eax
.text:00408311                 call    GetProcAddress
.text:00408316                 sub     esp, 8
.text:00408319                 test    eax, eax
.text:0040831B                 jz      short loc_408333
.text:0040831D                 mov     dword ptr [esp+8], 104h
.text:00408325                 mov     [esp+4], ebx
.text:00408329                 mov     [esp], edi
.text:0040832C                 call    eax
.text:0040832E                 sub     esp, 0Ch
.text:00408331                 mov     esi, eax
.text:00408333
.text:00408333 loc_408333:                             ; CODE XREF: .text:0040831B↑j
.text:00408333                 test    esi, esi
.text:00408335                 jz      short loc_408350
.text:00408337
.text:00408337 loc_408337:                             ; CODE XREF: .text:0040836B↓j
.text:00408337                 mov     eax, ebx
.text:00408339                 mov     esi, [esp+14h]
.text:0040833D                 mov     ebx, [esp+10h]
.text:00408341                 mov     edi, [esp+18h]
.text:00408345                 add     esp, 1Ch
.text:00408348                 retn
.text:00408348 ; ---------------------------------------------------------------------------
.text:00408349                 align 10h
.text:00408350
.text:00408350 loc_408350:                             ; CODE XREF: .text:00408335↑j
.text:00408350                 call    sub_409FD0
.text:00408355                 mov     [esp], ebx
.text:00408358                 mov     [esp+4], edi
.text:0040835C                 call    strcpy
.text:00408361                 mov     [esp], ebx
.text:00408364                 call    _win32_longpath
.text:00408369                 mov     ebx, eax
.text:0040836B                 jmp     short loc_408337
.text:0040836B ; ---------------------------------------------------------------------------
.text:0040836D                 align 10h
.text:00408370                 sub     esp, 1Ch
.text:00408373                 mov     [esp+18h], edi
.text:00408377                 mov     edi, [esp+20h]
.text:0040837B                 mov     [esp+10h], ebx
.text:0040837F                 mov     [esp+14h], esi
.text:00408383                 mov     dword ptr [esp+8], 0
.text:0040838B                 mov     dword ptr [esp+4], 0
.text:00408393                 mov     [esp], edi
.text:00408396                 call    GetShortPathNameA
.text:0040839B                 sub     esp, 0Ch
.text:0040839E                 mov     ebx, eax
.text:004083A0                 test    eax, eax
.text:004083A2                 jz      short loc_4083F0
.text:004083A4                 lea     edx, [eax+1]
.text:004083A7                 mov     [esp], edx
.text:004083AA                 call    malloc
.text:004083AF                 test    eax, eax
.text:004083B1                 mov     esi, eax
.text:004083B3                 jz      short loc_4083F0
.text:004083B5                 mov     [esp+8], ebx
.text:004083B9                 mov     [esp+4], eax
.text:004083BD                 mov     [esp], edi
.text:004083C0                 call    GetShortPathNameA
.text:004083C5                 sub     esp, 0Ch
.text:004083C8                 mov     edx, esi
.text:004083CA                 test    eax, eax
.text:004083CC                 jz      short loc_4083E2
.text:004083CE                 mov     esi, esi
.text:004083D0
.text:004083D0 loc_4083D0:                             ; CODE XREF: .text:00408400↓j
.text:004083D0                 mov     ebx, [esp+10h]
.text:004083D4                 mov     eax, edx
.text:004083D6                 mov     esi, [esp+14h]
.text:004083DA                 mov     edi, [esp+18h]
.text:004083DE                 add     esp, 1Ch
.text:004083E1                 retn
.text:004083E2 ; ---------------------------------------------------------------------------
.text:004083E2
.text:004083E2 loc_4083E2:                             ; CODE XREF: .text:004083CC↑j
.text:004083E2                 mov     [esp], esi
.text:004083E5                 call    free
.text:004083EA                 lea     esi, [esi+0]
.text:004083F0
.text:004083F0 loc_4083F0:                             ; CODE XREF: .text:004083A2↑j
.text:004083F0                                         ; .text:004083B3↑j
.text:004083F0                 call    sub_4094F0
.text:004083F5                 mov     esi, eax
.text:004083F7                 call    _errno
.text:004083FC                 mov     [eax], esi
.text:004083FE                 mov     edx, edi
.text:00408400                 jmp     short loc_4083D0
.text:00408400 ; ---------------------------------------------------------------------------
.text:00408402                 align 10h
.text:00408410 ; const char String[4]
.text:00408410 String          db ' :/',0              ; DATA XREF: sub_408420+FA↓o
.text:00408414                 align 10h
.text:00408420
.text:00408420 ; =============== S U B R O U T I N E =======================================
.text:00408420
.text:00408420
.text:00408420 ; int __cdecl sub_408420(LPCSTR)
.text:00408420 sub_408420      proc near               ; CODE XREF: sub_406870+E↑p
.text:00408420                                         ; sub_406D70+17↑p ...
.text:00408420
.text:00408420 Str             = dword ptr -1Ch
.text:00408420 Val             = dword ptr -18h
.text:00408420 Count           = dword ptr -14h
.text:00408420 var_10          = dword ptr -10h
.text:00408420 var_C           = dword ptr -0Ch
.text:00408420 var_8           = dword ptr -8
.text:00408420 var_4           = dword ptr -4
.text:00408420 arg_0           = dword ptr  4
.text:00408420
.text:00408420                 sub     esp, 1Ch
.text:00408423                 mov     edx, [esp+1Ch+arg_0]
.text:00408427                 mov     [esp+1Ch+var_8], edi
.text:0040842B                 mov     [esp+1Ch+var_10], ebx
.text:0040842F                 mov     [esp+1Ch+var_C], esi
.text:00408433                 mov     [esp+1Ch+var_4], ebp
.text:00408437                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040843A                 call    sub_409540
.text:0040843F                 test    eax, eax
.text:00408441                 mov     edi, eax
.text:00408443                 jz      short loc_408480
.text:00408445                 mov     [esp+1Ch+Str], eax ; Str
.text:00408448                 call    strlen
.text:0040844D                 cmp     eax, 2
.text:00408450                 jbe     short loc_40845C
.text:00408452                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00408456                 jz      loc_408510
.text:0040845C
.text:0040845C loc_40845C:                             ; CODE XREF: sub_408420+30↑j
.text:0040845C                                         ; sub_408420+F4↓j
.text:0040845C                 test    edi, edi
.text:0040845E                 jz      short loc_408480
.text:00408460                 mov     [esp+1Ch+Str], edi ; Str
.text:00408463                 call    strlen
.text:00408468                 cmp     eax, 4
.text:0040846B                 mov     ebp, eax
.text:0040846D                 jle     short loc_408480
.text:0040846F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:00408472                 jz      short loc_4084A0
.text:00408474                 lea     esi, [esi+0]
.text:0040847A                 lea     edi, [edi+0]
.text:00408480
.text:00408480 loc_408480:                             ; CODE XREF: sub_408420+23↑j
.text:00408480                                         ; sub_408420+3E↑j ...
.text:00408480                 xor     esi, esi
.text:00408482
.text:00408482 loc_408482:                             ; CODE XREF: sub_408420+CD↓j
.text:00408482                                         ; sub_408420+115↓j
.text:00408482                 mov     [esp+1Ch+Str], edi ; Block
.text:00408485                 call    free
.text:0040848A                 mov     eax, esi
.text:0040848C                 mov     ebx, [esp+1Ch+var_10]
.text:00408490                 mov     esi, [esp+1Ch+var_C]
.text:00408494                 mov     edi, [esp+1Ch+var_8]
.text:00408498                 mov     ebp, [esp+1Ch+var_4]
.text:0040849C                 add     esp, 1Ch
.text:0040849F                 retn
.text:004084A0 ; ---------------------------------------------------------------------------
.text:004084A0
.text:004084A0 loc_4084A0:                             ; CODE XREF: sub_408420+52↑j
.text:004084A0                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:004084A4                 jnz     short loc_408480
.text:004084A6                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:004084AE                 lea     ecx, [edi+2]
.text:004084B1                 mov     [esp+1Ch+Str], ecx ; Str
.text:004084B4                 call    strchr
.text:004084B9                 test    eax, eax
.text:004084BB                 jnz     short loc_4084EF
.text:004084BD
.text:004084BD loc_4084BD:                             ; CODE XREF: sub_408420+E2↓j
.text:004084BD                 inc     ebp
.text:004084BE
.text:004084BE loc_4084BE:                             ; CODE XREF: sub_408420+E9↓j
.text:004084BE                 mov     [esp+1Ch+Val], 1 ; Size
.text:004084C6                 lea     ebx, [ebp+1]
.text:004084C9                 mov     [esp+1Ch+Str], ebx ; Count
.text:004084CC                 call    calloc
.text:004084D1                 mov     [esp+1Ch+Str], eax ; Destination
.text:004084D4                 mov     esi, eax
.text:004084D6                 mov     [esp+1Ch+Count], ebx ; Count
.text:004084DA                 mov     [esp+1Ch+Val], edi ; Source
.text:004084DE                 call    strncpy
.text:004084E3                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:004084E8                 mov     byte ptr [ebp+esi+0], 0
.text:004084ED                 jmp     short loc_408482
.text:004084EF ; ---------------------------------------------------------------------------
.text:004084EF
.text:004084EF loc_4084EF:                             ; CODE XREF: sub_408420+9B↑j
.text:004084EF                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:004084F7                 inc     eax
.text:004084F8                 mov     [esp+1Ch+Str], eax ; Str
.text:004084FB                 call    strchr
.text:00408500                 test    eax, eax
.text:00408502                 jz      short loc_4084BD
.text:00408504                 sub     eax, edi
.text:00408506                 lea     ebp, [eax+1]
.text:00408509                 jmp     short loc_4084BE
.text:00408509 ; ---------------------------------------------------------------------------
.text:0040850B                 align 10h
.text:00408510
.text:00408510 loc_408510:                             ; CODE XREF: sub_408420+36↑j
.text:00408510                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:00408514                 jnz     loc_40845C
.text:0040851A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:00408521                 call    _strdup
.text:00408526                 movsx   edx, byte ptr [edi]
.text:00408529                 mov     esi, eax
.text:0040852B                 mov     [esp+1Ch+Str], edx ; C
.text:0040852E                 call    toupper
.text:00408533                 mov     [esi], al
.text:00408535                 jmp     loc_408482
.text:00408535 sub_408420      endp
.text:00408535
.text:00408535 ; ---------------------------------------------------------------------------
.text:0040853A                 align 10h
.text:00408540
.text:00408540 ; =============== S U B R O U T I N E =======================================
.text:00408540
.text:00408540
.text:00408540 sub_408540      proc near               ; CODE XREF: .text:00408694↓p
.text:00408540                                         ; .text:00408778↓p
.text:00408540
.text:00408540 Str             = dword ptr -2Ch
.text:00408540 Val             = dword ptr -28h
.text:00408540 var_18          = dword ptr -18h
.text:00408540 var_11          = byte ptr -11h
.text:00408540 arg_0           = dword ptr  4
.text:00408540
.text:00408540                 push    ebp
.text:00408541                 push    edi
.text:00408542                 push    esi
.text:00408543                 push    ebx
.text:00408544                 sub     esp, 1Ch
.text:00408547                 mov     edx, [esp+2Ch+arg_0]
.text:0040854B                 cmp     edx, ds:dword_419280
.text:00408551                 mov     [esp+2Ch+var_11], 0
.text:00408556                 jz      loc_408654
.text:0040855C                 mov     ebx, ds:dword_419270
.text:00408562                 test    ebx, ebx
.text:00408564                 jz      short loc_4085D2
.text:00408566
.text:00408566 loc_408566:                             ; CODE XREF: sub_408540+10F↓j
.text:00408566                 mov     ebx, [esp+2Ch+arg_0]
.text:0040856A                 xor     edi, edi
.text:0040856C                 xor     esi, esi
.text:0040856E                 mov     ebp, offset dword_419298
.text:00408573                 lea     esi, [esi+0]
.text:00408579                 lea     edi, [edi+0]
.text:00408580
.text:00408580 loc_408580:                             ; CODE XREF: sub_408540+60↓j
.text:00408580                 mov     edx, [ebp+4]
.text:00408583                 mov     ecx, edi
.text:00408585                 mov     eax, [ebp+0]
.text:00408588                 shl     ecx, 4
.text:0040858B                 mov     [esp+2Ch+var_18], ecx
.text:0040858F                 mov     ecx, edx
.text:00408591                 xor     eax, ebx
.text:00408593                 xor     ecx, esi
.text:00408595                 or      ecx, eax
.text:00408597                 jz      short loc_4085C1
.text:00408599                 inc     edi
.text:0040859A                 add     ebp, 10h
.text:0040859D                 cmp     edi, 20h ; ' '
.text:004085A0                 jle     short loc_408580
.text:004085A2
.text:004085A2 loc_4085A2:                             ; CODE XREF: sub_408540+90↓j
.text:004085A2                 movzx   ebx, [esp+2Ch+var_11]
.text:004085A7                 mov     eax, [esp+2Ch+arg_0]
.text:004085AB                 mov     byte_418060, bl
.text:004085B1                 mov     ds:dword_419280, eax
.text:004085B6                 movsx   eax, bl
.text:004085B9
.text:004085B9 loc_4085B9:                             ; CODE XREF: sub_408540+11B↓j
.text:004085B9                 add     esp, 1Ch
.text:004085BC                 pop     ebx
.text:004085BD                 pop     esi
.text:004085BE                 pop     edi
.text:004085BF                 pop     ebp
.text:004085C0                 retn
.text:004085C1 ; ---------------------------------------------------------------------------
.text:004085C1
.text:004085C1 loc_4085C1:                             ; CODE XREF: sub_408540+57↑j
.text:004085C1                 mov     edx, [esp+2Ch+var_18]
.text:004085C5                 movzx   eax, byte ptr ds:dword_419290[edx]
.text:004085CC                 mov     [esp+2Ch+var_11], al
.text:004085D0                 jmp     short loc_4085A2
.text:004085D2 ; ---------------------------------------------------------------------------
.text:004085D2
.text:004085D2 loc_4085D2:                             ; CODE XREF: sub_408540+24↑j
.text:004085D2                 mov     [esp+2Ch+Str], 0
.text:004085D9                 call    sub_40ADB0
.text:004085DE                 test    eax, eax
.text:004085E0                 mov     ebx, eax
.text:004085E2                 jz      short loc_40863C
.text:004085E4                 movzx   ecx, byte ptr [eax]
.text:004085E7                 mov     esi, 0FFFFFFF0h
.text:004085EC                 test    cl, cl
.text:004085EE                 jz      short loc_40863C
.text:004085F0
.text:004085F0 loc_4085F0:                             ; CODE XREF: sub_408540+FA↓j
.text:004085F0                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:004085F3                 movsx   ebp, cl
.text:004085F6                 add     esi, 10h
.text:004085F9                 mov     ds:dword_419290[esi], ebp
.text:004085FF                 mov     edi, ebp
.text:00408601                 sar     edi, 1Fh
.text:00408604                 mov     ds:dword_419294[esi], edi
.text:0040860A                 call    sub_406D70
.text:0040860F                 mov     ds:dword_419298[esi], eax
.text:00408615                 xor     ecx, ecx
.text:00408617                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040861A                 mov     ds:dword_41929C[esi], ecx
.text:00408620                 mov     [esp+2Ch+Val], 0 ; Val
.text:00408628                 call    strchr
.text:0040862D                 mov     ebx, eax
.text:0040862F                 inc     ebx
.text:00408630                 jz      short loc_40863C
.text:00408632                 movzx   edx, byte ptr [eax+1]
.text:00408636                 test    dl, dl
.text:00408638                 mov     cl, dl
.text:0040863A                 jnz     short loc_4085F0
.text:0040863C
.text:0040863C loc_40863C:                             ; CODE XREF: sub_408540+A2↑j
.text:0040863C                                         ; sub_408540+AE↑j ...
.text:0040863C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040863F                 mov     esi, 1
.text:00408644                 mov     ds:dword_419270, esi
.text:0040864A                 call    free
.text:0040864F                 jmp     loc_408566
.text:00408654 ; ---------------------------------------------------------------------------
.text:00408654
.text:00408654 loc_408654:                             ; CODE XREF: sub_408540+16↑j
.text:00408654                 movsx   eax, byte_418060
.text:0040865B                 jmp     loc_4085B9
.text:0040865B sub_408540      endp
.text:0040865B
.text:0040865B ; ---------------------------------------------------------------------------
.text:00408660 dword_408660    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:00408660                                         ; DATA XREF: .text:00408683↓o
.text:00408660                                         ; .text:00408763↓o
.text:00408670 ; ---------------------------------------------------------------------------
.text:00408670                 sub     esp, 1Ch
.text:00408673                 mov     [esp+14h], esi
.text:00408677                 mov     esi, [esp+20h]
.text:0040867B                 mov     [esp+18h], edi
.text:0040867F                 mov     [esp+10h], ebx
.text:00408683                 mov     dword ptr [esp], offset dword_408660
.text:0040868A                 call    _strdup
.text:0040868F                 mov     [esp], esi
.text:00408692                 mov     edi, eax
.text:00408694                 call    sub_408540
.text:00408699                 mov     [edi], al
.text:0040869B                 test    al, al
.text:0040869D                 jz      short loc_4086B1
.text:0040869F                 mov     eax, edi
.text:004086A1                 mov     ebx, [esp+10h]
.text:004086A5                 mov     esi, [esp+14h]
.text:004086A9                 mov     edi, [esp+18h]
.text:004086AD                 add     esp, 1Ch
.text:004086B0                 retn
.text:004086B1 ; ---------------------------------------------------------------------------
.text:004086B1
.text:004086B1 loc_4086B1:                             ; CODE XREF: .text:0040869D↑j
.text:004086B1                 mov     [esp], edi
.text:004086B4                 call    free
.text:004086B9                 mov     dword ptr [esp+4], 0
.text:004086C1                 mov     dword ptr [esp], 0
.text:004086C8                 call    GetCurrentDirectoryA
.text:004086CD                 sub     esp, 8
.text:004086D0                 lea     esi, [eax+1]
.text:004086D3                 mov     [esp], esi
.text:004086D6                 call    malloc
.text:004086DB                 mov     [esp+4], eax
.text:004086DF                 mov     edi, eax
.text:004086E1                 mov     [esp], esi
.text:004086E4                 call    GetCurrentDirectoryA
.text:004086E9                 sub     esp, 8
.text:004086EC                 test    eax, eax
.text:004086EE                 jnz     short loc_408710
.text:004086F0                 mov     dword ptr [esp+20h], 408664h
.text:004086F8                 mov     ebx, [esp+10h]
.text:004086FC                 mov     esi, [esp+14h]
.text:00408700                 mov     edi, [esp+18h]
.text:00408704                 add     esp, 1Ch
.text:00408707                 jmp     _strdup
.text:00408707 ; ---------------------------------------------------------------------------
.text:0040870C                 align 10h
.text:00408710
.text:00408710 loc_408710:                             ; CODE XREF: .text:004086EE↑j
.text:00408710                 mov     [esp+20h], edi
.text:00408714                 mov     ebx, [esp+10h]
.text:00408718                 mov     esi, [esp+14h]
.text:0040871C                 mov     edi, [esp+18h]
.text:00408720                 add     esp, 1Ch
.text:00408723                 jmp     sub_408420
.text:00408723 ; ---------------------------------------------------------------------------
.text:00408728                 align 10h
.text:00408730                 sub     esp, 7Ch
.text:00408733                 lea     edx, [esp+10h]
.text:00408737                 mov     [esp+8], edx
.text:0040873B                 mov     edx, [esp+80h]
.text:00408742                 mov     [esp+70h], ebx
.text:00408746                 mov     [esp+74h], esi
.text:0040874A                 mov     [esp+4], edx
.text:0040874E                 mov     [esp+78h], edi
.text:00408752                 mov     dword ptr [esp], 0
.text:00408759                 call    sub_405FC0
.text:0040875E                 xor     edx, edx
.text:00408760                 inc     eax
.text:00408761                 jz      short loc_408785
.text:00408763                 mov     dword ptr [esp], offset dword_408660
.text:0040876A                 mov     esi, [esp+20h]
.text:0040876E                 call    _strdup
.text:00408773                 mov     edi, eax
.text:00408775                 mov     [esp], esi
.text:00408778                 call    sub_408540
.text:0040877D                 mov     [edi], al
.text:0040877F                 test    al, al
.text:00408781                 mov     edx, edi
.text:00408783                 jz      short loc_408797
.text:00408785
.text:00408785 loc_408785:                             ; CODE XREF: .text:00408761↑j
.text:00408785                                         ; .text:004087E4↓j
.text:00408785                 mov     ebx, [esp+70h]
.text:00408789                 mov     eax, edx
.text:0040878B                 mov     esi, [esp+74h]
.text:0040878F                 mov     edi, [esp+78h]
.text:00408793                 add     esp, 7Ch
.text:00408796                 retn
.text:00408797 ; ---------------------------------------------------------------------------
.text:00408797
.text:00408797 loc_408797:                             ; CODE XREF: .text:00408783↑j
.text:00408797                 mov     [esp], edi
.text:0040879A                 call    free
.text:0040879F                 mov     dword ptr [esp+4], 0
.text:004087A7                 mov     dword ptr [esp], 0
.text:004087AE                 call    GetCurrentDirectoryA
.text:004087B3                 sub     esp, 8
.text:004087B6                 lea     esi, [eax+1]
.text:004087B9                 mov     [esp], esi
.text:004087BC                 call    malloc
.text:004087C1                 mov     [esp+4], eax
.text:004087C5                 mov     edi, eax
.text:004087C7                 mov     [esp], esi
.text:004087CA                 call    GetCurrentDirectoryA
.text:004087CF                 sub     esp, 8
.text:004087D2                 test    eax, eax
.text:004087D4                 jnz     short loc_4087E6
.text:004087D6                 mov     dword ptr [esp], 408664h
.text:004087DD                 call    _strdup
.text:004087E2
.text:004087E2 loc_4087E2:                             ; CODE XREF: .text:004087EE↓j
.text:004087E2                 mov     edx, eax
.text:004087E4                 jmp     short loc_408785
.text:004087E6 ; ---------------------------------------------------------------------------
.text:004087E6
.text:004087E6 loc_4087E6:                             ; CODE XREF: .text:004087D4↑j
.text:004087E6                 mov     [esp], edi
.text:004087E9                 call    sub_408420
.text:004087EE                 jmp     short loc_4087E2
.text:004087F0
.text:004087F0 ; =============== S U B R O U T I N E =======================================
.text:004087F0
.text:004087F0
.text:004087F0 ; int __cdecl sub_4087F0(LPCSTR)
.text:004087F0 sub_4087F0      proc near               ; CODE XREF: sub_406220+12F↑p
.text:004087F0
.text:004087F0 String1         = dword ptr -1Ch
.text:004087F0 String2         = dword ptr -18h
.text:004087F0 var_C           = dword ptr -0Ch
.text:004087F0 var_8           = dword ptr -8
.text:004087F0 var_4           = dword ptr -4
.text:004087F0 arg_0           = dword ptr  4
.text:004087F0
.text:004087F0                 sub     esp, 1Ch
.text:004087F3                 mov     [esp+1Ch+var_4], edi
.text:004087F7                 mov     edi, [esp+1Ch+arg_0]
.text:004087FB                 mov     [esp+1Ch+var_C], ebx
.text:004087FF                 mov     [esp+1Ch+var_8], esi
.text:00408803                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:00408806                 call    sub_409540
.text:0040880B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040880E                 mov     esi, eax
.text:00408810                 call    sub_408420
.text:00408815                 mov     [esp+1Ch+String2], eax ; String2
.text:00408819                 mov     ebx, eax
.text:0040881B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040881E                 call    _stricmp
.text:00408823                 test    eax, eax
.text:00408825                 setz    dl
.text:00408828                 test    esi, esi
.text:0040882A                 movzx   edi, dl
.text:0040882D                 jz      short loc_408837
.text:0040882F                 mov     [esp+1Ch+String1], esi ; Block
.text:00408832                 call    free
.text:00408837
.text:00408837 loc_408837:                             ; CODE XREF: sub_4087F0+3D↑j
.text:00408837                 test    ebx, ebx
.text:00408839                 jz      short loc_408843
.text:0040883B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040883E                 call    free
.text:00408843
.text:00408843 loc_408843:                             ; CODE XREF: sub_4087F0+49↑j
.text:00408843                 mov     eax, edi
.text:00408845                 mov     ebx, [esp+1Ch+var_C]
.text:00408849                 mov     esi, [esp+1Ch+var_8]
.text:0040884D                 mov     edi, [esp+1Ch+var_4]
.text:00408851                 add     esp, 1Ch
.text:00408854                 retn
.text:00408854 sub_4087F0      endp
.text:00408854
.text:00408854 ; ---------------------------------------------------------------------------
.text:00408855                 align 10h
.text:00408860
.text:00408860 ; =============== S U B R O U T I N E =======================================
.text:00408860
.text:00408860
.text:00408860 ; int __cdecl sub_408860(char *, int)
.text:00408860 sub_408860      proc near               ; CODE XREF: sub_4016B0+6B6↑p
.text:00408860
.text:00408860 var_C           = dword ptr -0Ch
.text:00408860 var_8           = dword ptr -8
.text:00408860 var_4           = dword ptr -4
.text:00408860 arg_0           = dword ptr  4
.text:00408860 arg_4           = dword ptr  8
.text:00408860
.text:00408860                 sub     esp, 0Ch
.text:00408863                 mov     edx, [esp+0Ch+arg_4]
.text:00408867                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040886E                 mov     [esp+0Ch+var_4], edx ; int
.text:00408872                 mov     edx, [esp+0Ch+arg_0]
.text:00408876                 mov     [esp+0Ch+var_8], edx ; char *
.text:0040887A                 call    sub_4091A0
.text:0040887F                 add     esp, 0Ch
.text:00408882                 retn
.text:00408882 sub_408860      endp
.text:00408882
.text:00408882 ; ---------------------------------------------------------------------------
.text:00408883                 align 10h
.text:00408890 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:004088E1↓o
.text:00408899 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:00408899                                         ; DATA XREF: .text:004088F2↓o
.text:004088AD ; const CHAR FileName[]
.text:004088AD FileName        db '\\.\vwin32',0       ; DATA XREF: .text:00408A3C↓o
.text:004088AD                                         ; sub_408E70+17C↓o
.text:004088B8 ; ---------------------------------------------------------------------------
.text:004088B8
.text:004088B8 loc_4088B8:                             ; DATA XREF: .text:00408B52↓o
.text:004088B8                 dec     esi
.text:004088B9                 push    esp
.text:004088BA                 inc     esi
.text:004088BB                 push    ebx
.text:004088BC                 add     [esi+41h], al
.text:004088BF                 push    esp
.text:004088C0                 xor     esi, [edx]
.text:004088C2                 add     [esi+41h], al
.text:004088C5                 push    esp
.text:004088C6                 add     [ebx+44h], al
.text:004088C9                 inc     esi
.text:004088CA                 push    ebx
.text:004088CB
.text:004088CB loc_4088CB:                             ; CODE XREF: sub_408E70+101↓p
.text:004088CB                 add     [ebp+55002674h], cl
.text:004088D1                 push    edi
.text:004088D2                 push    esi
.text:004088D3                 push    ebx
.text:004088D4                 sub     esp, 8BCh
.text:004088DA                 mov     ebp, [esp+8D0h]
.text:004088E1                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:004088E8                 call    LoadLibraryA
.text:004088ED                 sub     esp, 4
.text:004088F0                 mov     edi, eax
.text:004088F2                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:004088FA                 mov     [esp], eax
.text:004088FD                 call    GetProcAddress
.text:00408902                 sub     esp, 8
.text:00408905                 mov     esi, eax
.text:00408907                 test    ebp, ebp
.text:00408909                 mov     dword ptr [esp+20h], 0
.text:00408911                 jz      loc_408E51
.text:00408917                 mov     [esp], ebp
.text:0040891A                 call    sub_407FF0
.text:0040891F                 mov     [esp], eax
.text:00408922                 mov     ebp, eax
.text:00408924                 call    strlen
.text:00408929                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040892E                 mov     ebx, eax
.text:00408930                 jz      short loc_40894C
.text:00408932                 mov     [esp], ebp
.text:00408935                 lea     edx, [eax+1]
.text:00408938                 mov     [esp+4], edx
.text:0040893C                 call    realloc
.text:00408941                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00408945                 mov     ebp, eax
.text:00408947                 mov     byte ptr [ebx+eax+1], 0
.text:0040894C
.text:0040894C loc_40894C:                             ; CODE XREF: .text:00408930↑j
.text:0040894C                 mov     dword ptr [esp+1Ch], 400h
.text:00408954                 lea     edx, [esp+0B0h]
.text:0040895B                 lea     ebx, [esp+5Ch]
.text:0040895F                 mov     [esp+18h], edx
.text:00408963                 lea     ecx, [esp+58h]
.text:00408967                 lea     edx, [esp+54h]
.text:0040896B                 mov     [esp+14h], ebx
.text:0040896F                 lea     eax, [esp+4B0h]
.text:00408976                 mov     [esp+10h], ecx
.text:0040897A                 mov     [esp+0Ch], edx
.text:0040897E                 mov     dword ptr [esp+8], 400h
.text:00408986                 mov     [esp+4], eax
.text:0040898A                 mov     [esp], ebp
.text:0040898D                 call    GetVolumeInformationA
.text:00408992                 sub     esp, 20h
.text:00408995                 test    eax, eax
.text:00408997                 jz      loc_408E2E
.text:0040899D                 test    esi, esi
.text:0040899F                 jz      short loc_4089C5
.text:004089A1                 mov     [esp], ebp
.text:004089A4                 lea     edx, [esp+48h]
.text:004089A8                 lea     ebx, [esp+40h]
.text:004089AC                 mov     [esp+0Ch], edx
.text:004089B0                 lea     ecx, [esp+38h]
.text:004089B4                 mov     [esp+8], ebx
.text:004089B8                 mov     [esp+4], ecx
.text:004089BC                 call    esi
.text:004089BE                 sub     esp, 10h
.text:004089C1                 mov     [esp+20h], eax
.text:004089C5
.text:004089C5 loc_4089C5:                             ; CODE XREF: .text:0040899F↑j
.text:004089C5                 test    edi, edi
.text:004089C7                 jz      short loc_4089D4
.text:004089C9                 mov     [esp], edi
.text:004089CC                 call    FreeLibrary
.text:004089D1                 sub     esp, 4
.text:004089D4
.text:004089D4 loc_4089D4:                             ; CODE XREF: .text:004089C7↑j
.text:004089D4                 call    sub_409FD0
.text:004089D9                 test    eax, eax
.text:004089DB                 lea     esi, [esp+28h]
.text:004089DF                 jz      loc_408E10
.text:004089E5                 call    sub_409FD0
.text:004089EA                 test    eax, eax
.text:004089EC                 jz      short loc_4089FC
.text:004089EE                 call    sub_409F20
.text:004089F3                 cmp     eax, 0Bh
.text:004089F6                 jle     loc_408DE4
.text:004089FC
.text:004089FC loc_4089FC:                             ; CODE XREF: .text:004089EC↑j
.text:004089FC                 cld
.text:004089FD                 xor     eax, eax
.text:004089FF                 lea     ebx, [esp+60h]
.text:00408A03                 mov     ecx, 7
.text:00408A08                 mov     edi, ebx
.text:00408A0A                 rep stosd
.text:00408A0C                 mov     dword ptr [esp+18h], 0
.text:00408A14                 mov     dword ptr [esp+14h], 4000000h
.text:00408A1C                 mov     dword ptr [esp+10h], 0
.text:00408A24                 mov     dword ptr [esp+0Ch], 0
.text:00408A2C                 mov     dword ptr [esp+8], 0
.text:00408A34                 mov     dword ptr [esp+4], 0
.text:00408A3C                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:00408A43                 call    CreateFileA
.text:00408A48                 sub     esp, 1Ch
.text:00408A4B                 mov     edi, eax
.text:00408A4D                 cmp     eax, 0FFFFFFFFh
.text:00408A50                 jz      short loc_408AD0
.text:00408A52                 mov     [esp+10h], ebx
.text:00408A56                 lea     edx, [esp+80h]
.text:00408A5D                 lea     ecx, [esp+24h]
.text:00408A61                 mov     [esp+70h], edx
.text:00408A65                 mov     [esp+18h], ecx
.text:00408A69                 mov     [esp+8], ebx
.text:00408A6D                 mov     dword ptr [esp+6Ch], 7303h
.text:00408A75                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:00408A7D                 mov     [esp+64h], ebp
.text:00408A81                 mov     dword ptr [esp+78h], 1
.text:00408A89                 mov     dword ptr [esp+1Ch], 0
.text:00408A91                 mov     dword ptr [esp+14h], 1Ch
.text:00408A99                 mov     dword ptr [esp+0Ch], 1Ch
.text:00408AA1                 mov     dword ptr [esp+4], 6
.text:00408AA9                 mov     [esp], eax
.text:00408AAC                 call    DeviceIoControl
.text:00408AB1                 sub     esp, 20h
.text:00408AB4                 mov     ebx, eax
.text:00408AB6                 mov     [esp], edi
.text:00408AB9                 call    CloseHandle
.text:00408ABE                 sub     esp, 4
.text:00408AC1                 test    ebx, ebx
.text:00408AC3                 jz      short loc_408AD0
.text:00408AC5                 test    byte ptr [esp+78h], 1
.text:00408ACA                 jz      loc_408DB0
.text:00408AD0
.text:00408AD0 loc_408AD0:                             ; CODE XREF: .text:00408A50↑j
.text:00408AD0                                         ; .text:00408AC3↑j
.text:00408AD0                 call    sub_4094F0
.text:00408AD5                 mov     edi, eax
.text:00408AD7                 call    _errno
.text:00408ADC                 mov     [eax], edi
.text:00408ADE                 xor     eax, eax
.text:00408AE0
.text:00408AE0 loc_408AE0:                             ; CODE XREF: .text:00408DDF↓j
.text:00408AE0                                         ; .text:00408E0B↓j
.text:00408AE0                 test    eax, eax
.text:00408AE2                 jnz     short loc_408B04
.text:00408AE4                 mov     dword ptr [esp+34h], 1
.text:00408AEC                 mov     dword ptr [esp+30h], 200h
.text:00408AF4                 mov     dword ptr [esp+2Ch], 0
.text:00408AFC                 mov     dword ptr [esp+28h], 0
.text:00408B04
.text:00408B04 loc_408B04:                             ; CODE XREF: .text:00408AE2↑j
.text:00408B04                 mov     edx, [esp+30h]
.text:00408B08                 mov     edi, [esp+34h]
.text:00408B0C                 mov     ecx, [esp+20h]
.text:00408B10                 imul    edi, edx
.text:00408B13                 test    ecx, ecx
.text:00408B15                 jnz     short loc_408B3D
.text:00408B17                 mov     eax, [esp+28h]
.text:00408B1B                 mul     edi
.text:00408B1D                 mov     esi, eax
.text:00408B1F                 mov     eax, [esp+2Ch]
.text:00408B23                 mov     [esp+44h], edx
.text:00408B27                 mov     [esp+40h], esi
.text:00408B2B                 mul     edi
.text:00408B2D                 mov     [esp+48h], eax
.text:00408B31                 mov     [esp+4Ch], edx
.text:00408B35                 mov     [esp+38h], eax
.text:00408B39                 mov     [esp+3Ch], edx
.text:00408B3D
.text:00408B3D loc_408B3D:                             ; CODE XREF: .text:00408B15↑j
.text:00408B3D                 mov     ebx, [esp+5Ch]
.text:00408B41                 lea     edx, [esp+0B0h]
.text:00408B48                 mov     ecx, [esp+8D4h]
.text:00408B4F                 mov     [ecx+48h], ebx
.text:00408B52                 mov     dword ptr [esp+4], offset loc_4088B8
.text:00408B5A                 mov     [esp], edx
.text:00408B5D                 call    _stricmp
.text:00408B62                 test    eax, eax
.text:00408B64                 jnz     loc_408D20
.text:00408B6A                 mov     esi, [esp+8D4h]
.text:00408B71                 mov     dword ptr [esi], 5346544Eh
.text:00408B77
.text:00408B77 loc_408B77:                             ; CODE XREF: .text:00408D48↓j
.text:00408B77                                         ; .text:00408D75↓j ...
.text:00408B77                 mov     ebx, [esp+30h]
.text:00408B7B                 mov     esi, [esp+8D4h]
.text:00408B82                 mov     [esi+4], ebx
.text:00408B85                 mov     [esi+8], ebx
.text:00408B88                 mov     ebx, [esi+8]
.text:00408B8B                 mov     [esi+0Ch], edi
.text:00408B8E                 mov     ecx, [esp+44h]
.text:00408B92                 xor     esi, esi
.text:00408B94                 mov     [esp+8], ebx
.text:00408B98                 mov     edx, [esp+40h]
.text:00408B9C                 mov     [esp+0Ch], esi
.text:00408BA0                 mov     [esp+4], ecx
.text:00408BA4                 mov     [esp], edx
.text:00408BA7                 call    sub_416600
.text:00408BAC                 mov     ecx, [esp+8D4h]
.text:00408BB3                 mov     [ecx+10h], eax
.text:00408BB6                 mov     [ecx+14h], edx
.text:00408BB9                 mov     ecx, [esp+4Ch]
.text:00408BBD                 mov     [esp+8], ebx
.text:00408BC1                 mov     edx, [esp+48h]
.text:00408BC5                 mov     [esp+0Ch], esi
.text:00408BC9                 mov     [esp+4], ecx
.text:00408BCD                 mov     [esp], edx
.text:00408BD0                 call    sub_416600
.text:00408BD5                 mov     ecx, [esp+8D4h]
.text:00408BDC                 mov     [ecx+18h], eax
.text:00408BDF                 mov     [ecx+1Ch], edx
.text:00408BE2                 mov     ecx, [esp+38h]
.text:00408BE6                 mov     [esp+8], ebx
.text:00408BEA                 mov     ebx, [esp+3Ch]
.text:00408BEE                 mov     [esp+0Ch], esi
.text:00408BF2                 mov     [esp], ecx
.text:00408BF5                 mov     [esp+4], ebx
.text:00408BF9                 call    sub_416600
.text:00408BFE                 mov     esi, [esp+8D4h]
.text:00408C05                 mov     [esi+20h], eax
.text:00408C08                 mov     [esi+24h], edx
.text:00408C0B                 mov     ecx, [esp+44h]
.text:00408C0F                 mov     esi, edi
.text:00408C11                 mov     [esp+8], esi
.text:00408C15                 mov     edx, [esp+40h]
.text:00408C19                 xor     edi, edi
.text:00408C1B                 mov     [esp+0Ch], edi
.text:00408C1F                 mov     [esp+4], ecx
.text:00408C23                 mov     [esp], edx
.text:00408C26                 call    sub_416600
.text:00408C2B                 mov     ebx, [esp+8D4h]
.text:00408C32                 mov     [ebx+28h], eax
.text:00408C35                 mov     [ebx+2Ch], edx
.text:00408C38                 mov     ecx, [esp+4Ch]
.text:00408C3C                 mov     [esp+8], esi
.text:00408C40                 mov     edx, [esp+48h]
.text:00408C44                 mov     [esp+0Ch], edi
.text:00408C48                 mov     [esp+4], ecx
.text:00408C4C                 mov     [esp], edx
.text:00408C4F                 call    sub_416600
.text:00408C54                 mov     ebx, [esp+8D4h]
.text:00408C5B                 mov     [ebx+30h], eax
.text:00408C5E                 mov     [ebx+34h], edx
.text:00408C61                 mov     ecx, [esp+3Ch]
.text:00408C65                 mov     [esp+8], esi
.text:00408C69                 mov     edx, [esp+38h]
.text:00408C6D                 mov     [esp+0Ch], edi
.text:00408C71                 mov     [esp+4], ecx
.text:00408C75                 mov     [esp], edx
.text:00408C78                 call    sub_416600
.text:00408C7D                 mov     edx, [esp+8D4h]
.text:00408C84                 lea     ecx, [esp+0B0h]
.text:00408C8B                 mov     [edx+38h], eax
.text:00408C8E                 mov     esi, [esp+58h]
.text:00408C92                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:00408C99                 mov     [edx+110h], esi
.text:00408C9F                 mov     esi, edx
.text:00408CA1                 add     esi, 4Ch ; 'L'
.text:00408CA4                 movzx   ebx, word ptr [esp+56h]
.text:00408CA9                 movzx   edi, word ptr [esp+54h]
.text:00408CAE                 mov     [edx+3Ch], ebx
.text:00408CB1                 lea     ebx, [esp+4B0h]
.text:00408CB8                 mov     [edx+40h], edi
.text:00408CBB                 mov     [esp+4], ecx
.text:00408CBF                 mov     dword ptr [esp+8], 10h
.text:00408CC7                 mov     [esp], esi
.text:00408CCA                 call    strncpy
.text:00408CCF                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00408CD7                 mov     edi, [esp+8D4h]
.text:00408CDE                 mov     [esp+4], ebx
.text:00408CE2                 add     edi, 5Ch ; '\'
.text:00408CE5                 mov     [esp], edi
.text:00408CE8                 call    strncpy
.text:00408CED                 mov     [esp+4], ebp
.text:00408CF1                 mov     ebp, [esp+8D4h]
.text:00408CF8                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00408D00                 add     ebp, 0B6h ; '¶'
.text:00408D06                 mov     [esp], ebp
.text:00408D09                 call    strncpy
.text:00408D0E                 xor     eax, eax
.text:00408D10
.text:00408D10 loc_408D10:                             ; CODE XREF: .text:00408E4C↓j
.text:00408D10                 add     esp, 8BCh
.text:00408D16                 pop     ebx
.text:00408D17                 pop     esi
.text:00408D18                 pop     edi
.text:00408D19                 pop     ebp
.text:00408D1A                 retn
.text:00408D1A ; ---------------------------------------------------------------------------
.text:00408D1B                 align 10h
.text:00408D20
.text:00408D20 loc_408D20:                             ; CODE XREF: .text:00408B64↑j
.text:00408D20                 mov     dword ptr [esp+4], 4088BDh
.text:00408D28                 lea     eax, [esp+0B0h]
.text:00408D2F                 mov     [esp], eax
.text:00408D32                 call    _stricmp
.text:00408D37                 test    eax, eax
.text:00408D39                 jnz     short loc_408D4D
.text:00408D3B                 mov     edx, [esp+8D4h]
.text:00408D42                 mov     dword ptr [edx], 4008h
.text:00408D48                 jmp     loc_408B77
.text:00408D4D ; ---------------------------------------------------------------------------
.text:00408D4D
.text:00408D4D loc_408D4D:                             ; CODE XREF: .text:00408D39↑j
.text:00408D4D                 mov     dword ptr [esp+4], 4088C3h
.text:00408D55                 lea     ecx, [esp+0B0h]
.text:00408D5C                 mov     [esp], ecx
.text:00408D5F                 call    _stricmp
.text:00408D64                 test    eax, eax
.text:00408D66                 jnz     short loc_408D7A
.text:00408D68                 mov     ebx, [esp+8D4h]
.text:00408D6F                 mov     dword ptr [ebx], 4006h
.text:00408D75                 jmp     loc_408B77
.text:00408D7A ; ---------------------------------------------------------------------------
.text:00408D7A
.text:00408D7A loc_408D7A:                             ; CODE XREF: .text:00408D66↑j
.text:00408D7A                 mov     dword ptr [esp+4], 4088C7h
.text:00408D82                 lea     eax, [esp+0B0h]
.text:00408D89                 mov     [esp], eax
.text:00408D8C                 call    _stricmp
.text:00408D91                 test    eax, eax
.text:00408D93                 mov     esi, [esp+8D4h]
.text:00408D9A                 setnz   cl
.text:00408D9D                 movzx   edx, cl
.text:00408DA0                 dec     edx
.text:00408DA1                 and     edx, 4000h
.text:00408DA7                 mov     [esi], edx
.text:00408DA9                 jmp     loc_408B77
.text:00408DA9 ; ---------------------------------------------------------------------------
.text:00408DAE                 align 10h
.text:00408DB0
.text:00408DB0 loc_408DB0:                             ; CODE XREF: .text:00408ACA↑j
.text:00408DB0                 mov     edi, [esp+84h]
.text:00408DB7                 mov     eax, 1
.text:00408DBC                 mov     edx, [esp+88h]
.text:00408DC3                 mov     ecx, [esp+8Ch]
.text:00408DCA                 mov     ebx, [esp+90h]
.text:00408DD1                 mov     [esp+34h], edi
.text:00408DD5                 mov     [esp+30h], edx
.text:00408DD9                 mov     [esp+2Ch], ecx
.text:00408DDD                 mov     [esi], ebx
.text:00408DDF                 jmp     loc_408AE0
.text:00408DE4 ; ---------------------------------------------------------------------------
.text:00408DE4
.text:00408DE4 loc_408DE4:                             ; CODE XREF: .text:004089F6↑j
.text:00408DE4                 mov     [esp+10h], esi
.text:00408DE8                 lea     eax, [esp+2Ch]
.text:00408DEC                 lea     esi, [esp+30h]
.text:00408DF0                 mov     [esp+0Ch], eax
.text:00408DF4                 lea     edi, [esp+34h]
.text:00408DF8                 mov     [esp+8], esi
.text:00408DFC                 mov     [esp+4], edi
.text:00408E00
.text:00408E00 loc_408E00:                             ; CODE XREF: .text:00408E2C↓j
.text:00408E00                 mov     [esp], ebp
.text:00408E03                 call    GetDiskFreeSpaceA
.text:00408E08                 sub     esp, 14h
.text:00408E0B                 jmp     loc_408AE0
.text:00408E10 ; ---------------------------------------------------------------------------
.text:00408E10
.text:00408E10 loc_408E10:                             ; CODE XREF: .text:004089DF↑j
.text:00408E10                 mov     [esp+10h], esi
.text:00408E14                 lea     ebx, [esp+2Ch]
.text:00408E18                 lea     eax, [esp+30h]
.text:00408E1C                 mov     [esp+0Ch], ebx
.text:00408E20                 lea     esi, [esp+34h]
.text:00408E24                 mov     [esp+8], eax
.text:00408E28                 mov     [esp+4], esi
.text:00408E2C                 jmp     short loc_408E00
.text:00408E2E ; ---------------------------------------------------------------------------
.text:00408E2E
.text:00408E2E loc_408E2E:                             ; CODE XREF: .text:00408997↑j
.text:00408E2E                 mov     [esp], edi
.text:00408E31                 call    FreeLibrary
.text:00408E36                 sub     esp, 4
.text:00408E39                 call    sub_4094F0
.text:00408E3E                 mov     esi, eax
.text:00408E40                 call    _errno
.text:00408E45                 mov     [eax], esi
.text:00408E47
.text:00408E47 loc_408E47:                             ; CODE XREF: .text:00408E67↓j
.text:00408E47                 mov     eax, 0FFFFFFFFh
.text:00408E4C                 jmp     loc_408D10
.text:00408E51 ; ---------------------------------------------------------------------------
.text:00408E51
.text:00408E51 loc_408E51:                             ; CODE XREF: .text:00408911↑j
.text:00408E51                 mov     [esp], edi
.text:00408E54                 call    FreeLibrary
.text:00408E59                 sub     esp, 4
.text:00408E5C                 call    _errno
.text:00408E61                 mov     dword ptr [eax], 2
.text:00408E67                 jmp     short loc_408E47
.text:00408E67 ; ---------------------------------------------------------------------------
.text:00408E69                 align 10h
.text:00408E70
.text:00408E70 ; =============== S U B R O U T I N E =======================================
.text:00408E70
.text:00408E70
.text:00408E70 ; int __cdecl sub_408E70(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:00408E70 sub_408E70      proc near               ; CODE XREF: sub_406870+2C7↑p
.text:00408E70                                         ; .text:00406EAA↑p
.text:00408E70
.text:00408E70 lpFileName      = dword ptr -9Ch
.text:00408E70 dwDesiredAccess = dword ptr -98h
.text:00408E70 dwShareMode     = dword ptr -94h
.text:00408E70 lpSecurityAttributes= dword ptr -90h
.text:00408E70 dwCreationDisposition= dword ptr -8Ch
.text:00408E70 dwFlagsAndAttributes= dword ptr -88h
.text:00408E70 hTemplateFile   = dword ptr -84h
.text:00408E70 lpOverlapped    = dword ptr -80h
.text:00408E70 BytesReturned   = dword ptr -70h
.text:00408E70 InBuffer        = byte ptr -6Ch
.text:00408E70 var_68          = dword ptr -68h
.text:00408E70 var_64          = dword ptr -64h
.text:00408E70 var_60          = dword ptr -60h
.text:00408E70 var_5C          = dword ptr -5Ch
.text:00408E70 var_54          = dword ptr -54h
.text:00408E70 var_4C          = byte ptr -4Ch
.text:00408E70 var_48          = dword ptr -48h
.text:00408E70 var_44          = dword ptr -44h
.text:00408E70 var_40          = dword ptr -40h
.text:00408E70 var_3C          = dword ptr -3Ch
.text:00408E70 lpRootPathName  = dword ptr -2Ch
.text:00408E70 lpSectorsPerCluster= dword ptr -28h
.text:00408E70 lpBytesPerSector= dword ptr -24h
.text:00408E70 lpNumberOfFreeClusters= dword ptr -20h
.text:00408E70 lpTotalNumberOfClusters= dword ptr -1Ch
.text:00408E70 var_18          = dword ptr -18h
.text:00408E70 var_14          = dword ptr -14h
.text:00408E70 var_10          = dword ptr -10h
.text:00408E70 var_C           = dword ptr -0Ch
.text:00408E70 var_8           = dword ptr -8
.text:00408E70 var_4           = dword ptr -4
.text:00408E70 arg_0           = dword ptr  4
.text:00408E70 arg_4           = dword ptr  8
.text:00408E70 arg_8           = dword ptr  0Ch
.text:00408E70 arg_C           = dword ptr  10h
.text:00408E70 arg_10          = dword ptr  14h
.text:00408E70
.text:00408E70                 sub     esp, 2Ch
.text:00408E73                 mov     edx, [esp+2Ch+arg_0]
.text:00408E77                 mov     [esp+2Ch+var_10], ebx
.text:00408E7B                 mov     ebx, [esp+2Ch+arg_10]
.text:00408E7F                 mov     [esp+2Ch+var_C], esi
.text:00408E83                 mov     esi, [esp+2Ch+arg_C]
.text:00408E87                 mov     [esp+2Ch+var_8], edi
.text:00408E8B                 mov     edi, [esp+2Ch+arg_8]
.text:00408E8F                 mov     [esp+2Ch+var_4], ebp
.text:00408E93                 mov     ebp, [esp+2Ch+arg_4]
.text:00408E97                 mov     [esp+2Ch+var_14], edx
.text:00408E9B                 call    sub_409FD0
.text:00408EA0                 test    eax, eax
.text:00408EA2                 jz      short loc_408ED4
.text:00408EA4                 mov     [esp+2Ch+arg_10], ebx
.text:00408EA8                 mov     edx, [esp+2Ch+var_14]
.text:00408EAC                 mov     ebx, [esp+2Ch+var_10]
.text:00408EB0                 mov     [esp+2Ch+arg_C], esi
.text:00408EB4                 mov     esi, [esp+2Ch+var_C]
.text:00408EB8                 mov     [esp+2Ch+arg_8], edi
.text:00408EBC                 mov     edi, [esp+2Ch+var_8]
.text:00408EC0                 mov     [esp+2Ch+arg_4], ebp
.text:00408EC4                 mov     ebp, [esp+2Ch+var_4]
.text:00408EC8                 mov     [esp+2Ch+arg_0], edx
.text:00408ECC                 add     esp, 2Ch
.text:00408ECF                 jmp     loc_408F80
.text:00408ED4 ; ---------------------------------------------------------------------------
.text:00408ED4
.text:00408ED4 loc_408ED4:                             ; CODE XREF: sub_408E70+32↑j
.text:00408ED4                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:00408ED8                 mov     ecx, [esp+2Ch+var_14]
.text:00408EDC                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:00408EE0                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:00408EE4                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:00408EE8                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:00408EEB                 call    GetDiskFreeSpaceA
.text:00408EF0                 sub     esp, 14h
.text:00408EF3                 mov     ebx, [esp+2Ch+var_10]
.text:00408EF7                 mov     esi, [esp+2Ch+var_C]
.text:00408EFB                 mov     edi, [esp+2Ch+var_8]
.text:00408EFF                 mov     ebp, [esp+2Ch+var_4]
.text:00408F03                 add     esp, 2Ch
.text:00408F06                 retn
.text:00408F06 ; ---------------------------------------------------------------------------
.text:00408F07                 align 10h
.text:00408F10
.text:00408F10 loc_408F10:                             ; CODE XREF: .text:0040A2ED↓p
.text:00408F10                 sub     esp, 1Ch
.text:00408F13                 mov     [esp+1Ch+var_4], esi
.text:00408F17                 mov     esi, [esp+1Ch+arg_0]
.text:00408F1B                 mov     [esp+1Ch+var_8], ebx
.text:00408F1F                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:00408F22                 call    sub_408420
.text:00408F27                 test    eax, eax
.text:00408F29                 mov     ebx, eax
.text:00408F2B                 jz      short loc_408F40
.text:00408F2D                 cmp     byte ptr [eax], 0
.text:00408F30                 jz      short loc_408F40
.text:00408F32                 test    esi, esi
.text:00408F34                 jz      short loc_408F40
.text:00408F36                 cmp     byte ptr [esi], 0
.text:00408F39                 jnz     short loc_408F66
.text:00408F3B                 nop
.text:00408F3C                 lea     esi, [esi+0]
.text:00408F40
.text:00408F40 loc_408F40:                             ; CODE XREF: sub_408E70+BB↑j
.text:00408F40                                         ; sub_408E70+C0↑j ...
.text:00408F40                 call    _errno
.text:00408F45                 mov     dword ptr [eax], 2
.text:00408F4B                 mov     esi, 0FFFFFFFFh
.text:00408F50
.text:00408F50 loc_408F50:                             ; CODE XREF: sub_408E70+108↓j
.text:00408F50                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:00408F53                 call    free
.text:00408F58                 mov     eax, esi
.text:00408F5A                 mov     ebx, [esp+1Ch+var_8]
.text:00408F5E                 mov     esi, [esp+1Ch+var_4]
.text:00408F62                 add     esp, 1Ch
.text:00408F65                 retn
.text:00408F66 ; ---------------------------------------------------------------------------
.text:00408F66
.text:00408F66 loc_408F66:                             ; CODE XREF: sub_408E70+C9↑j
.text:00408F66                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:00408F69                 mov     edx, [esp+1Ch+arg_4]
.text:00408F6D                 mov     [esp+1Ch+var_18], edx
.text:00408F71                 call    near ptr loc_4088CB+5
.text:00408F76                 mov     esi, eax
.text:00408F78                 jmp     short loc_408F50
.text:00408F78 ; ---------------------------------------------------------------------------
.text:00408F7A                 align 10h
.text:00408F80
.text:00408F80 loc_408F80:                             ; CODE XREF: sub_408E70+5F↑j
.text:00408F80                 push    ebp
.text:00408F81                 push    edi
.text:00408F82                 push    esi
.text:00408F83                 push    ebx
.text:00408F84                 sub     esp, 8Ch
.text:00408F8A                 mov     ebp, [esp+9Ch+arg_0]
.text:00408F91                 call    sub_409FD0
.text:00408F96                 test    eax, eax
.text:00408F98                 jz      short loc_408FA8
.text:00408F9A                 call    sub_409F20
.text:00408F9F                 cmp     eax, 0Bh
.text:00408FA2                 jle     loc_4090D0
.text:00408FA8
.text:00408FA8 loc_408FA8:                             ; CODE XREF: sub_408E70+128↑j
.text:00408FA8                 cld
.text:00408FA9                 xor     eax, eax
.text:00408FAB                 lea     ebx, [esp+9Ch+InBuffer]
.text:00408FAF                 mov     ecx, 7
.text:00408FB4                 mov     edi, ebx
.text:00408FB6                 lea     esi, [esp+9Ch+var_4C]
.text:00408FBA                 rep stosd
.text:00408FBC                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:00408FC4                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:00408FCC                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:00408FD4                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00408FDC                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:00408FE4                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00408FEC                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:00408FF3                 call    CreateFileA
.text:00408FF8                 sub     esp, 1Ch
.text:00408FFB                 mov     edi, eax
.text:00408FFD                 cmp     eax, 0FFFFFFFFh
.text:00409000                 jz      short loc_409075
.text:00409002                 mov     [esp+9Ch+var_68], ebp
.text:00409006                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040900A                 mov     [esp+9Ch+var_5C], esi
.text:0040900E                 mov     [esp+9Ch+var_60], 7303h
.text:00409016                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040901E                 mov     [esp+9Ch+var_54], 1
.text:00409026                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0040902E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:00409032                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0040903A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0040903E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:00409046                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0040904A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:00409052                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:00409055                 call    DeviceIoControl
.text:0040905A                 sub     esp, 20h
.text:0040905D                 mov     esi, eax
.text:0040905F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:00409062                 call    CloseHandle
.text:00409067                 sub     esp, 4
.text:0040906A                 test    esi, esi
.text:0040906C                 jz      short loc_409075
.text:0040906E                 test    byte ptr [esp+9Ch+var_54], 1
.text:00409073                 jz      short loc_409090
.text:00409075
.text:00409075 loc_409075:                             ; CODE XREF: sub_408E70+190↑j
.text:00409075                                         ; sub_408E70+1FC↑j
.text:00409075                 call    sub_4094F0
.text:0040907A                 mov     edi, eax
.text:0040907C                 call    _errno
.text:00409081                 mov     [eax], edi
.text:00409083                 xor     eax, eax
.text:00409085
.text:00409085 loc_409085:                             ; CODE XREF: sub_408E70+25A↓j
.text:00409085                                         ; sub_408E70+297↓j
.text:00409085                 add     esp, 8Ch
.text:0040908B                 pop     ebx
.text:0040908C                 pop     esi
.text:0040908D                 pop     edi
.text:0040908E                 pop     ebp
.text:0040908F                 retn
.text:00409090 ; ---------------------------------------------------------------------------
.text:00409090
.text:00409090 loc_409090:                             ; CODE XREF: sub_408E70+203↑j
.text:00409090                 mov     edx, [esp+9Ch+var_48]
.text:00409094                 mov     eax, 1
.text:00409099                 mov     ebx, [esp+9Ch+arg_4]
.text:004090A0                 mov     ebp, [esp+9Ch+arg_8]
.text:004090A7                 mov     ecx, [esp+9Ch+arg_C]
.text:004090AE                 mov     [ebx], edx
.text:004090B0                 mov     edi, [esp+9Ch+var_44]
.text:004090B4                 mov     ebx, [esp+9Ch+arg_10]
.text:004090BB                 mov     [ebp+0], edi
.text:004090BE                 mov     esi, [esp+9Ch+var_40]
.text:004090C2                 mov     [ecx], esi
.text:004090C4                 mov     edx, [esp+9Ch+var_3C]
.text:004090C8                 mov     [ebx], edx
.text:004090CA                 jmp     short loc_409085
.text:004090CA ; ---------------------------------------------------------------------------
.text:004090CC                 align 10h
.text:004090D0
.text:004090D0 loc_4090D0:                             ; CODE XREF: sub_408E70+132↑j
.text:004090D0                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:004090D3                 mov     eax, [esp+9Ch+arg_C]
.text:004090DA                 mov     ecx, [esp+9Ch+arg_10]
.text:004090E1                 mov     edx, [esp+9Ch+arg_8]
.text:004090E8                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:004090EC                 mov     eax, [esp+9Ch+arg_4]
.text:004090F3                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:004090F7                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:004090FB                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:004090FF                 call    GetDiskFreeSpaceA
.text:00409104                 sub     esp, 14h
.text:00409107                 jmp     loc_409085
.text:00409107 sub_408E70      endp ; sp-analysis failed
.text:00409107
.text:00409107 ; ---------------------------------------------------------------------------
.text:0040910C                 align 10h
.text:00409110
.text:00409110 ; =============== S U B R O U T I N E =======================================
.text:00409110
.text:00409110
.text:00409110 sub_409110      proc near               ; CODE XREF: sub_4020F0+584↑p
.text:00409110
.text:00409110 var_8           = dword ptr -8
.text:00409110 var_4           = dword ptr -4
.text:00409110 arg_0           = dword ptr  4
.text:00409110
.text:00409110                 movzx   edx, word ptr [esp+arg_0]
.text:00409115                 mov     [esp+arg_0], edx
.text:00409119                 jmp     short loc_409120
.text:00409119 ; ---------------------------------------------------------------------------
.text:0040911B                 align 10h
.text:00409120
.text:00409120 loc_409120:                             ; CODE XREF: sub_409110+9↑j
.text:00409120                 sub     esp, 8
.text:00409123                 mov     edx, off_418104
.text:00409129                 mov     [esp+8+var_8], ebx
.text:0040912C                 mov     [esp+8+var_4], esi
.text:00409130                 mov     ecx, [edx+8]
.text:00409133                 movzx   ebx, word ptr [esp+8+arg_0]
.text:00409138                 mov     edx, [ecx+54h]
.text:0040913B                 mov     eax, ebx
.text:0040913D                 mov     ecx, [edx]
.text:0040913F                 shr     eax, cl
.text:00409141                 cmp     eax, [edx+4]
.text:00409144                 jnb     short loc_409190
.text:00409146                 mov     esi, [edx+eax*4+14h]
.text:0040914A                 test    esi, esi
.text:0040914C                 jz      short loc_409190
.text:0040914E                 mov     ecx, [edx+8]
.text:00409151                 mov     eax, ebx
.text:00409153                 shr     eax, cl
.text:00409155                 mov     ecx, [edx+0Ch]
.text:00409158                 and     eax, ecx
.text:0040915A                 lea     ecx, [edx+eax*4]
.text:0040915D                 mov     eax, [esi+ecx]
.text:00409160                 test    eax, eax
.text:00409162                 jz      short loc_409190
.text:00409164                 mov     esi, [edx+10h]
.text:00409167                 and     ebx, esi
.text:00409169                 lea     esi, [eax+edx]
.text:0040916C                 movzx   eax, byte ptr [ebx+esi]
.text:00409170
.text:00409170 loc_409170:                             ; CODE XREF: sub_409110+85↓j
.text:00409170                 mov     bl, al
.text:00409172                 mov     esi, [esp+8+var_4]
.text:00409176                 inc     bl
.text:00409178                 setnz   cl
.text:0040917B                 movzx   eax, al
.text:0040917E                 movzx   ebx, cl
.text:00409181                 dec     ebx
.text:00409182                 or      eax, ebx
.text:00409184                 mov     ebx, [esp+8+var_8]
.text:00409187                 add     esp, 8
.text:0040918A                 retn
.text:0040918A ; ---------------------------------------------------------------------------
.text:0040918B                 align 10h
.text:00409190
.text:00409190 loc_409190:                             ; CODE XREF: sub_409110+34↑j
.text:00409190                                         ; sub_409110+3C↑j ...
.text:00409190                 mov     eax, 0FFh
.text:00409195                 jmp     short loc_409170
.text:00409195 sub_409110      endp
.text:00409195
.text:00409195 ; ---------------------------------------------------------------------------
.text:00409197                 align 10h
.text:004091A0
.text:004091A0 ; =============== S U B R O U T I N E =======================================
.text:004091A0
.text:004091A0
.text:004091A0 ; int __cdecl sub_4091A0(LPCSTR, char *, int)
.text:004091A0 sub_4091A0      proc near               ; CODE XREF: sub_408860+1A↑p
.text:004091A0                                         ; sub_4145E0+104↓p ...
.text:004091A0
.text:004091A0 var_13C         = dword ptr -13Ch
.text:004091A0 lpString1       = dword ptr -138h
.text:004091A0 var_134         = dword ptr -134h
.text:004091A0 String1         = byte ptr -12Ch
.text:004091A0 var_10          = dword ptr -10h
.text:004091A0 var_C           = dword ptr -0Ch
.text:004091A0 var_8           = dword ptr -8
.text:004091A0 var_4           = dword ptr -4
.text:004091A0 arg_0           = dword ptr  4
.text:004091A0 arg_4           = dword ptr  8
.text:004091A0 arg_8           = dword ptr  0Ch
.text:004091A0
.text:004091A0                 sub     esp, 13Ch
.text:004091A6                 mov     [esp+13Ch+var_10], ebx
.text:004091AD                 mov     ebx, [esp+13Ch+arg_8]
.text:004091B4                 mov     [esp+13Ch+var_C], esi
.text:004091BB                 mov     esi, [esp+13Ch+arg_4]
.text:004091C2                 mov     [esp+13Ch+var_8], edi
.text:004091C9                 mov     edi, [esp+13Ch+arg_0]
.text:004091D0                 mov     [esp+13Ch+var_4], ebp
.text:004091D7                 mov     [esp+13Ch+var_134], ebx ; int
.text:004091DB                 mov     [esp+13Ch+lpString1], esi ; int
.text:004091DF                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:004091E2                 call    sub_40B1F0
.text:004091E7                 cmp     eax, 0FFFFFFFFh
.text:004091EA                 mov     edx, eax
.text:004091EC                 jz      short loc_4091FE
.text:004091EE                 mov     ecx, [ebx]
.text:004091F0                 and     ecx, 0F000h
.text:004091F6                 cmp     ecx, 0A000h
.text:004091FC                 jz      short loc_409223
.text:004091FE
.text:004091FE loc_4091FE:                             ; CODE XREF: sub_4091A0+4C↑j
.text:004091FE                                         ; sub_4091A0+A1↓j ...
.text:004091FE                 mov     ebx, [esp+13Ch+var_10]
.text:00409205                 mov     eax, edx
.text:00409207                 mov     esi, [esp+13Ch+var_C]
.text:0040920E                 mov     edi, [esp+13Ch+var_8]
.text:00409215                 mov     ebp, [esp+13Ch+var_4]
.text:0040921C                 add     esp, 13Ch
.text:00409222                 retn
.text:00409223 ; ---------------------------------------------------------------------------
.text:00409223
.text:00409223 loc_409223:                             ; CODE XREF: sub_4091A0+5C↑j
.text:00409223                 mov     [esp+13Ch+var_134], 104h
.text:0040922B                 lea     ebp, [esp+13Ch+String1]
.text:0040922F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:00409233                 mov     [esp+13Ch+var_13C], esi ; char *
.text:00409236                 call    sub_40B110
.text:0040923B                 inc     eax
.text:0040923C                 mov     edx, 0FFFFFFFFh
.text:00409241                 jz      short loc_4091FE
.text:00409243                 mov     [esp+13Ch+var_134], ebx ; int
.text:00409247                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0040924B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040924E                 call    sub_40B1F0
.text:00409253                 mov     edx, eax
.text:00409255                 jmp     short loc_4091FE
.text:00409255 sub_4091A0      endp
.text:00409255
.text:00409255 ; ---------------------------------------------------------------------------
.text:00409257                 align 10h
.text:00409260
.text:00409260 ; =============== S U B R O U T I N E =======================================
.text:00409260
.text:00409260 ; Attributes: info_from_lumina
.text:00409260
.text:00409260 ___get_errno    proc near               ; CODE XREF: sub_4094F0+B↓p
.text:00409260
.text:00409260 arg_0           = dword ptr  4
.text:00409260
.text:00409260                 mov     eax, [esp+arg_0]
.text:00409264                 cmp     eax, 53h ; 'S'
.text:00409267                 jg      loc_409360
.text:0040926D                 cmp     eax, 52h ; 'R'
.text:00409270                 jge     short loc_4092C2
.text:00409272                 cmp     eax, 0Fh
.text:00409275                 jz      short loc_409290
.text:00409277                 cmp     eax, 0Fh
.text:0040927A                 jg      short loc_4092F0
.text:0040927C                 cmp     eax, 9
.text:0040927F                 jg      short loc_4092D0
.text:00409281                 cmp     eax, 7
.text:00409284                 jge     short loc_4092C9
.text:00409286                 cmp     eax, 3
.text:00409289                 jg      short loc_4092AA
.text:0040928B                 cmp     eax, 2
.text:0040928E                 jl      short loc_4092A3
.text:00409290
.text:00409290 loc_409290:                             ; CODE XREF: ___get_errno+15↑j
.text:00409290                                         ; ___get_errno+9D↓j ...
.text:00409290                 mov     edx, 2
.text:00409295                 lea     esi, [esi+0]
.text:00409299                 lea     edi, [edi+0]
.text:004092A0
.text:004092A0 loc_4092A0:                             ; CODE XREF: ___get_errno+48↓j
.text:004092A0                                         ; ___get_errno+59↓j ...
.text:004092A0                 mov     eax, edx
.text:004092A2                 retn
.text:004092A3 ; ---------------------------------------------------------------------------
.text:004092A3
.text:004092A3 loc_4092A3:                             ; CODE XREF: ___get_errno+2E↑j
.text:004092A3                                         ; ___get_errno+78↓j ...
.text:004092A3                 mov     edx, 16h
.text:004092A8                 jmp     short loc_4092A0
.text:004092AA ; ---------------------------------------------------------------------------
.text:004092AA
.text:004092AA loc_4092AA:                             ; CODE XREF: ___get_errno+29↑j
.text:004092AA                 cmp     eax, 5
.text:004092AD                 jz      short loc_4092C2
.text:004092AF                 cmp     eax, 5
.text:004092B2                 jg      short loc_4092BB
.text:004092B4                 mov     edx, 18h
.text:004092B9                 jmp     short loc_4092A0
.text:004092BB ; ---------------------------------------------------------------------------
.text:004092BB
.text:004092BB loc_4092BB:                             ; CODE XREF: ___get_errno+52↑j
.text:004092BB                                         ; ___get_errno+180↓j
.text:004092BB                 mov     edx, 9
.text:004092C0                 jmp     short loc_4092A0
.text:004092C2 ; ---------------------------------------------------------------------------
.text:004092C2
.text:004092C2 loc_4092C2:                             ; CODE XREF: ___get_errno+10↑j
.text:004092C2                                         ; ___get_errno+4D↑j ...
.text:004092C2                 mov     edx, 0Dh
.text:004092C7                 jmp     short loc_4092A0
.text:004092C9 ; ---------------------------------------------------------------------------
.text:004092C9
.text:004092C9 loc_4092C9:                             ; CODE XREF: ___get_errno+24↑j
.text:004092C9                                         ; ___get_errno+73↓j ...
.text:004092C9                 mov     edx, 0Ch
.text:004092CE                 jmp     short loc_4092A0
.text:004092D0 ; ---------------------------------------------------------------------------
.text:004092D0
.text:004092D0 loc_4092D0:                             ; CODE XREF: ___get_errno+1F↑j
.text:004092D0                 cmp     eax, 0Dh
.text:004092D3                 jg      short loc_4092C9
.text:004092D5                 cmp     eax, 0Ch
.text:004092D8                 jge     short loc_4092A3
.text:004092DA                 cmp     eax, 0Ah
.text:004092DD                 mov     edx, 7
.text:004092E2                 jz      short loc_4092A0
.text:004092E4                 cmp     eax, 0Bh
.text:004092E7                 jnz     short loc_4092A3
.text:004092E9
.text:004092E9 loc_4092E9:                             ; CODE XREF: ___get_errno+21A↓j
.text:004092E9                 mov     edx, 8
.text:004092EE                 jmp     short loc_4092A0
.text:004092F0 ; ---------------------------------------------------------------------------
.text:004092F0
.text:004092F0 loc_4092F0:                             ; CODE XREF: ___get_errno+1A↑j
.text:004092F0                 cmp     eax, 22h ; '"'
.text:004092F3                 jg      short loc_409324
.text:004092F5                 cmp     eax, 16h
.text:004092F8                 jge     short loc_4092C2
.text:004092FA                 cmp     eax, 12h
.text:004092FD                 jz      short loc_409290
.text:004092FF                 cmp     eax, 12h
.text:00409302                 jg      short loc_409315
.text:00409304                 cmp     eax, 10h
.text:00409307                 jz      short loc_4092C2
.text:00409309                 mov     edx, 12h
.text:0040930E                 cmp     eax, 11h
.text:00409311
.text:00409311 loc_409311:                             ; CODE XREF: ___get_errno+172↓j
.text:00409311                                         ; ___get_errno+24C↓j ...
.text:00409311                 jnz     short loc_4092A3
.text:00409313                 jmp     short loc_4092A0
.text:00409315 ; ---------------------------------------------------------------------------
.text:00409315
.text:00409315 loc_409315:                             ; CODE XREF: ___get_errno+A2↑j
.text:00409315                 cmp     eax, 14h
.text:00409318                 jle     short loc_4092C2
.text:0040931A
.text:0040931A loc_40931A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040931A                 mov     edx, 10h
.text:0040931F                 jmp     loc_4092A0
.text:00409324 ; ---------------------------------------------------------------------------
.text:00409324
.text:00409324 loc_409324:                             ; CODE XREF: ___get_errno+93↑j
.text:00409324                 cmp     eax, 41h ; 'A'
.text:00409327                 jz      short loc_4092C2
.text:00409329                 cmp     eax, 41h ; 'A'
.text:0040932C                 jg      short loc_409341
.text:0040932E                 cmp     eax, 24h ; '$'
.text:00409331                 jz      short loc_4092C2
.text:00409333                 cmp     eax, 35h ; '5'
.text:00409336                 jnz     loc_4092A3
.text:0040933C                 jmp     loc_409290
.text:00409341 ; ---------------------------------------------------------------------------
.text:00409341
.text:00409341 loc_409341:                             ; CODE XREF: ___get_errno+CC↑j
.text:00409341                 cmp     eax, 43h ; 'C'
.text:00409344                 jz      loc_409290
.text:0040934A                 cmp     eax, 50h ; 'P'
.text:0040934D                 jnz     loc_4092A3
.text:00409353
.text:00409353 loc_409353:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00409353                 mov     edx, 11h
.text:00409358                 jmp     loc_4092A0
.text:00409358 ; ---------------------------------------------------------------------------
.text:0040935D                 align 10h
.text:00409360
.text:00409360 loc_409360:                             ; CODE XREF: ___get_errno+7↑j
.text:00409360                 cmp     eax, 0A1h ; '¡'
.text:00409365                 jz      loc_409290
.text:0040936B                 cmp     eax, 0A1h ; '¡'
.text:00409370                 jg      loc_409420
.text:00409376                 cmp     eax, 81h
.text:0040937B                 jg      short loc_4093E5
.text:0040937D                 cmp     eax, 80h ; '€'
.text:00409382                 mov     edx, 0Ah
.text:00409387                 jge     loc_4092A0
.text:0040938D                 cmp     eax, 6Ch ; 'l'
.text:00409390                 jz      loc_4092C2
.text:00409396                 cmp     eax, 6Ch ; 'l'
.text:00409399                 jg      short loc_4093B7
.text:0040939B                 cmp     eax, 57h ; 'W'
.text:0040939E                 jz      loc_4092A3
.text:004093A4                 cmp     eax, 59h ; 'Y'
.text:004093A7                 jnz     loc_4092A3
.text:004093AD
.text:004093AD loc_4093AD:                             ; CODE XREF: ___get_errno+1E9↓j
.text:004093AD                                         ; ___get_errno+23C↓j
.text:004093AD                 mov     edx, 0Bh
.text:004093B2                 jmp     loc_4092A0
.text:004093B7 ; ---------------------------------------------------------------------------
.text:004093B7
.text:004093B7 loc_4093B7:                             ; CODE XREF: ___get_errno+139↑j
.text:004093B7                 cmp     eax, 70h ; 'p'
.text:004093BA                 mov     edx, 1Ch
.text:004093BF                 jz      loc_4092A0
.text:004093C5                 cmp     eax, 70h ; 'p'
.text:004093C8                 jg      short loc_4093D7
.text:004093CA                 mov     edx, 20h ; ' '
.text:004093CF                 cmp     eax, 6Dh ; 'm'
.text:004093D2                 jmp     loc_409311
.text:004093D7 ; ---------------------------------------------------------------------------
.text:004093D7
.text:004093D7 loc_4093D7:                             ; CODE XREF: ___get_errno+168↑j
.text:004093D7                 cmp     eax, 72h ; 'r'
.text:004093DA
.text:004093DA loc_4093DA:                             ; CODE XREF: ___get_errno+19C↓j
.text:004093DA                 jnz     loc_4092A3
.text:004093E0                 jmp     loc_4092BB
.text:004093E5 ; ---------------------------------------------------------------------------
.text:004093E5
.text:004093E5 loc_4093E5:                             ; CODE XREF: ___get_errno+11B↑j
.text:004093E5                 cmp     eax, 84h ; '„'
.text:004093EA                 jz      loc_4092C2
.text:004093F0                 cmp     eax, 84h ; '„'
.text:004093F5                 jg      short loc_4093FE
.text:004093F7                 cmp     eax, 82h ; '‚'
.text:004093FC                 jmp     short loc_4093DA
.text:004093FE ; ---------------------------------------------------------------------------
.text:004093FE
.text:004093FE loc_4093FE:                             ; CODE XREF: ___get_errno+195↑j
.text:004093FE                 cmp     eax, 91h ; '‘'
.text:00409403                 mov     edx, 29h ; ')'
.text:00409408                 jz      loc_4092A0
.text:0040940E                 cmp     eax, 9Eh ; 'ž'
.text:00409413
.text:00409413 loc_409413:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00409413                 jnz     loc_4092A3
.text:00409419                 jmp     loc_4092C2
.text:00409419 ; ---------------------------------------------------------------------------
.text:0040941E                 align 10h
.text:00409420
.text:00409420 loc_409420:                             ; CODE XREF: ___get_errno+110↑j
.text:00409420                 cmp     eax, 0CEh ; 'Î'
.text:00409425                 jz      loc_409290
.text:0040942B                 cmp     eax, 0CEh ; 'Î'
.text:00409430                 jg      short loc_409480
.text:00409432                 cmp     eax, 0AAh ; 'ª'
.text:00409437                 jz      loc_40931A
.text:0040943D                 cmp     eax, 0AAh ; 'ª'
.text:00409442                 jg      short loc_409456
.text:00409444                 cmp     eax, 0A4h ; '¤'
.text:00409449                 jz      loc_4093AD
.text:0040944F                 cmp     eax, 0A7h ; '§'
.text:00409454                 jmp     short loc_409413
.text:00409456 ; ---------------------------------------------------------------------------
.text:00409456
.text:00409456 loc_409456:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00409456                 cmp     eax, 0B7h ; '·'
.text:0040945B                 jz      loc_409353
.text:00409461                 cmp     eax, 0B7h ; '·'
.text:00409466                 jl      loc_4092A3
.text:0040946C                 sub     eax, 0BCh ; '¼'
.text:00409471                 cmp     eax, 0Eh
.text:00409474                 ja      loc_4092A3
.text:0040947A                 jmp     loc_4092E9
.text:0040947A ; ---------------------------------------------------------------------------
.text:0040947F                 align 10h
.text:00409480
.text:00409480 loc_409480:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00409480                 cmp     eax, 46Bh
.text:00409485                 mov     edx, 24h ; '$'
.text:0040948A                 jz      loc_4092A0
.text:00409490                 cmp     eax, 46Bh
.text:00409495                 jg      short loc_4094B1
.text:00409497                 cmp     eax, 0D7h ; '×'
.text:0040949C                 jz      loc_4093AD
.text:004094A2                 mov     edx, 5
.text:004094A7                 cmp     eax, 45Dh
.text:004094AC                 jmp     loc_409311
.text:004094B1 ; ---------------------------------------------------------------------------
.text:004094B1
.text:004094B1 loc_4094B1:                             ; CODE XREF: ___get_errno+235↑j
.text:004094B1                 cmp     eax, 4D5h
.text:004094B6                 mov     edx, 4
.text:004094BB                 jz      loc_4092A0
.text:004094C1                 cmp     eax, 4D5h
.text:004094C6                 jg      short loc_4094D7
.text:004094C8                 mov     edx, 13h
.text:004094CD                 cmp     eax, 4B0h
.text:004094D2                 jmp     loc_409311
.text:004094D7 ; ---------------------------------------------------------------------------
.text:004094D7
.text:004094D7 loc_4094D7:                             ; CODE XREF: ___get_errno+266↑j
.text:004094D7                 cmp     eax, 718h
.text:004094DC                 jnz     loc_4092A3
.text:004094E2                 jmp     loc_4092C9
.text:004094E2 ___get_errno    endp
.text:004094E2
.text:004094E2 ; ---------------------------------------------------------------------------
.text:004094E7                 align 10h
.text:004094F0
.text:004094F0 ; =============== S U B R O U T I N E =======================================
.text:004094F0
.text:004094F0
.text:004094F0 sub_4094F0      proc near               ; CODE XREF: sub_40B1F0:loc_407B6D↑p
.text:004094F0                                         ; sub_408110:loc_408178↑p ...
.text:004094F0
.text:004094F0 var_C           = dword ptr -0Ch
.text:004094F0
.text:004094F0                 sub     esp, 0Ch
.text:004094F3                 call    GetLastError
.text:004094F8                 mov     [esp+0Ch+var_C], eax
.text:004094FB                 call    ___get_errno
.text:00409500                 add     esp, 0Ch
.text:00409503                 retn
.text:00409503 sub_4094F0      endp
.text:00409503
.text:00409503 ; ---------------------------------------------------------------------------
.text:00409504                 align 10h
.text:00409510
.text:00409510 ; =============== S U B R O U T I N E =======================================
.text:00409510
.text:00409510
.text:00409510 sub_409510      proc near               ; CODE XREF: .text:00408083↑p
.text:00409510                                         ; .text:004080D3↑p
.text:00409510
.text:00409510 arg_4           = dword ptr  8
.text:00409510
.text:00409510                 sub     esp, 0Ch
.text:00409513                 mov     edx, [esp+0Ch+arg_4]
.text:00409517                 test    edx, edx
.text:00409519                 jz      short loc_409520
.text:0040951B                 add     esp, 0Ch
.text:0040951E                 jmp     short sub_409560
.text:00409520 ; ---------------------------------------------------------------------------
.text:00409520
.text:00409520 loc_409520:                             ; CODE XREF: sub_409510+9↑j
.text:00409520                 call    _errno
.text:00409525                 mov     dword ptr [eax], 16h
.text:0040952B                 xor     eax, eax
.text:0040952D                 add     esp, 0Ch
.text:00409530                 retn
.text:00409530 sub_409510      endp
.text:00409530
.text:00409531 ; ---------------------------------------------------------------------------
.text:00409531                 jmp     short sub_409540
.text:00409531 ; ---------------------------------------------------------------------------
.text:00409533                 align 10h
.text:00409540
.text:00409540 ; =============== S U B R O U T I N E =======================================
.text:00409540
.text:00409540
.text:00409540 ; int __cdecl sub_409540(LPCSTR)
.text:00409540 sub_409540      proc near               ; CODE XREF: sub_40B1F0-372C↑p
.text:00409540                                         ; .text:00408278↑p ...
.text:00409540
.text:00409540 lpFileName      = dword ptr -0Ch
.text:00409540 Destination     = dword ptr -8
.text:00409540 arg_0           = dword ptr  4
.text:00409540
.text:00409540                 sub     esp, 0Ch
.text:00409543                 mov     edx, [esp+0Ch+arg_0]
.text:00409547                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040954F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:00409552                 call    sub_409560
.text:00409557                 add     esp, 0Ch
.text:0040955A                 retn
.text:0040955A sub_409540      endp
.text:0040955A
.text:0040955A ; ---------------------------------------------------------------------------
.text:0040955B                 align 10h
.text:00409560
.text:00409560 ; =============== S U B R O U T I N E =======================================
.text:00409560
.text:00409560
.text:00409560 ; int __cdecl sub_409560(LPCSTR lpFileName, char *Destination)
.text:00409560 sub_409560      proc near               ; CODE XREF: sub_409510+E↑j
.text:00409560                                         ; sub_409540+12↑p
.text:00409560
.text:00409560 Size            = dword ptr -2Ch
.text:00409560 nBufferLength   = dword ptr -28h
.text:00409560 lpBuffer        = dword ptr -24h
.text:00409560 lpFilePart      = dword ptr -20h
.text:00409560 FilePart        = dword ptr -14h
.text:00409560 lpFileName      = dword ptr  4
.text:00409560 Destination     = dword ptr  8
.text:00409560
.text:00409560                 push    ebp
.text:00409561                 push    edi
.text:00409562                 push    esi
.text:00409563                 push    ebx
.text:00409564                 sub     esp, 1Ch
.text:00409567                 mov     edi, [esp+2Ch+lpFileName]
.text:0040956B                 mov     ebp, [esp+2Ch+Destination]
.text:0040956F                 test    edi, edi
.text:00409571                 jz      loc_409679
.text:00409577                 cmp     byte ptr [edi], 0
.text:0040957A                 jz      loc_40966C
.text:00409580                 mov     [esp+2Ch+Size], 104h ; Size
.text:00409587                 call    malloc
.text:0040958C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:00409590                 lea     edx, [esp+2Ch+FilePart]
.text:00409594                 mov     ebx, eax
.text:00409596                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040959A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:004095A2                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:004095A5                 call    GetFullPathNameA
.text:004095AA                 sub     esp, 10h
.text:004095AD                 mov     esi, eax
.text:004095AF                 test    eax, eax
.text:004095B1                 jz      loc_40965A
.text:004095B7                 cmp     eax, 104h
.text:004095BC                 jle     short loc_4095CD
.text:004095BE                 test    ebp, ebp
.text:004095C0                 jz      short loc_409629
.text:004095C2                 call    _errno
.text:004095C7                 mov     dword ptr [eax], 26h ; '&'
.text:004095CD
.text:004095CD loc_4095CD:                             ; CODE XREF: sub_409560+5C↑j
.text:004095CD                                         ; sub_409560+F5↓j
.text:004095CD                 call    _errno
.text:004095D2                 mov     edi, [eax]
.text:004095D4                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:004095DC                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:004095DF                 call    sub_409690
.text:004095E4                 test    eax, eax
.text:004095E6                 jnz     short loc_409600
.text:004095E8                 movzx   eax, byte ptr [esi+ebx-1]
.text:004095ED                 cmp     al, 2Fh ; '/'
.text:004095EF                 jz      short loc_409600
.text:004095F1                 cmp     al, 5Ch ; '\'
.text:004095F3                 jz      short loc_409600
.text:004095F5                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:004095F9                 mov     byte ptr [esi+ebx+1], 0
.text:004095FE                 mov     esi, esi
.text:00409600
.text:00409600 loc_409600:                             ; CODE XREF: sub_409560+86↑j
.text:00409600                                         ; sub_409560+8F↑j ...
.text:00409600                 call    _errno
.text:00409605                 mov     [eax], edi
.text:00409607                 mov     [esp+2Ch+Size], ebx
.text:0040960A                 call    sub_407F70
.text:0040960F                 test    ebp, ebp
.text:00409611                 mov     eax, ebx
.text:00409613                 jz      short loc_409621
.text:00409615                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:00409619                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040961C                 call    strcpy
.text:00409621
.text:00409621 loc_409621:                             ; CODE XREF: sub_409560+B3↑j
.text:00409621                                         ; sub_409560+10A↓j
.text:00409621                 add     esp, 1Ch
.text:00409624                 pop     ebx
.text:00409625                 pop     esi
.text:00409626                 pop     edi
.text:00409627                 pop     ebp
.text:00409628                 retn
.text:00409629 ; ---------------------------------------------------------------------------
.text:00409629
.text:00409629 loc_409629:                             ; CODE XREF: sub_409560+60↑j
.text:00409629                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040962C                 lea     ecx, [eax+2]
.text:0040962F                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:00409633                 call    realloc
.text:00409638                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040963C                 lea     edx, [esp+2Ch+FilePart]
.text:00409640                 mov     ebx, eax
.text:00409642                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00409646                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040964A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040964D                 call    GetFullPathNameA
.text:00409652                 sub     esp, 10h
.text:00409655                 jmp     loc_4095CD
.text:0040965A ; ---------------------------------------------------------------------------
.text:0040965A
.text:0040965A loc_40965A:                             ; CODE XREF: sub_409560+51↑j
.text:0040965A                 call    sub_4094F0
.text:0040965F                 mov     esi, eax
.text:00409661                 call    _errno
.text:00409666                 mov     [eax], esi
.text:00409668
.text:00409668 loc_409668:                             ; CODE XREF: sub_409560+117↓j
.text:00409668                                         ; sub_409560+124↓j
.text:00409668                 xor     eax, eax
.text:0040966A                 jmp     short loc_409621
.text:0040966C ; ---------------------------------------------------------------------------
.text:0040966C
.text:0040966C loc_40966C:                             ; CODE XREF: sub_409560+1A↑j
.text:0040966C                 call    _errno
.text:00409671                 mov     dword ptr [eax], 2
.text:00409677                 jmp     short loc_409668
.text:00409679 ; ---------------------------------------------------------------------------
.text:00409679
.text:00409679 loc_409679:                             ; CODE XREF: sub_409560+11↑j
.text:00409679                 call    _errno
.text:0040967E                 mov     dword ptr [eax], 16h
.text:00409684                 jmp     short loc_409668
.text:00409684 sub_409560      endp
.text:00409684
.text:00409684 ; ---------------------------------------------------------------------------
.text:00409686                 align 10h
.text:00409690
.text:00409690 ; =============== S U B R O U T I N E =======================================
.text:00409690
.text:00409690
.text:00409690 ; int __cdecl sub_409690(LPCSTR lpFileName, int)
.text:00409690 sub_409690      proc near               ; CODE XREF: sub_40B1F0-373D↑p
.text:00409690                                         ; .text:00407F52↑p ...
.text:00409690
.text:00409690 uMode           = dword ptr -1Ch
.text:00409690 var_10          = dword ptr -10h
.text:00409690 var_C           = dword ptr -0Ch
.text:00409690 var_8           = dword ptr -8
.text:00409690 var_4           = dword ptr -4
.text:00409690 lpFileName      = dword ptr  4
.text:00409690 arg_4           = dword ptr  8
.text:00409690
.text:00409690                 sub     esp, 1Ch
.text:00409693                 mov     [esp+1Ch+var_10], ebx
.text:00409697                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040969B                 mov     [esp+1Ch+var_4], ebp
.text:0040969F                 xor     ebp, ebp
.text:004096A1                 test    ebx, ebx
.text:004096A3                 mov     [esp+1Ch+var_C], esi
.text:004096A7                 mov     esi, [esp+1Ch+arg_4]
.text:004096AB                 mov     [esp+1Ch+var_8], edi
.text:004096AF                 jz      short loc_4096B9
.text:004096B1                 test    esi, 0FFFFFFE8h
.text:004096B7                 jz      short loc_4096E0
.text:004096B9
.text:004096B9 loc_4096B9:                             ; CODE XREF: sub_409690+1F↑j
.text:004096B9                 call    _errno
.text:004096BE                 mov     dword ptr [eax], 16h
.text:004096C4
.text:004096C4 loc_4096C4:                             ; CODE XREF: sub_409690+B1↓j
.text:004096C4                 mov     eax, 0FFFFFFFFh
.text:004096C9
.text:004096C9 loc_4096C9:                             ; CODE XREF: sub_409690+86↓j
.text:004096C9                                         ; sub_409690+A4↓j
.text:004096C9                 mov     ebx, [esp+1Ch+var_10]
.text:004096CD                 mov     esi, [esp+1Ch+var_C]
.text:004096D1                 mov     edi, [esp+1Ch+var_8]
.text:004096D5                 mov     ebp, [esp+1Ch+var_4]
.text:004096D9                 add     esp, 1Ch
.text:004096DC                 retn
.text:004096DC ; ---------------------------------------------------------------------------
.text:004096DD                 align 10h
.text:004096E0
.text:004096E0 loc_4096E0:                             ; CODE XREF: sub_409690+27↑j
.text:004096E0                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:004096E7                 call    SetErrorMode
.text:004096EC                 sub     esp, 4
.text:004096EF                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:004096F2                 call    GetFileAttributesA
.text:004096F7                 sub     esp, 4
.text:004096FA                 mov     edi, eax
.text:004096FC                 cmp     eax, 0FFFFFFFFh
.text:004096FF                 jz      short loc_409743
.text:00409701
.text:00409701 loc_409701:                             ; CODE XREF: sub_409690+C6↓j
.text:00409701                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:00409708                 call    SetErrorMode
.text:0040970D                 sub     esp, 4
.text:00409710                 mov     eax, 0FFFFFFFFh
.text:00409715                 inc     ebp
.text:00409716                 jz      short loc_4096C9
.text:00409718                 test    esi, 10h
.text:0040971E                 jz      short loc_409728
.text:00409720                 test    edi, 10h
.text:00409726                 jz      short loc_409736
.text:00409728
.text:00409728 loc_409728:                             ; CODE XREF: sub_409690+8E↑j
.text:00409728                 and     esi, 2
.text:0040972B                 jz      short loc_409732
.text:0040972D                 and     edi, 1
.text:00409730                 jnz     short loc_409736
.text:00409732
.text:00409732 loc_409732:                             ; CODE XREF: sub_409690+9B↑j
.text:00409732                 xor     eax, eax
.text:00409734                 jmp     short loc_4096C9
.text:00409736 ; ---------------------------------------------------------------------------
.text:00409736
.text:00409736 loc_409736:                             ; CODE XREF: sub_409690+96↑j
.text:00409736                                         ; sub_409690+A0↑j
.text:00409736                 call    _errno
.text:0040973B                 mov     dword ptr [eax], 0Dh
.text:00409741                 jmp     short loc_4096C4
.text:00409743 ; ---------------------------------------------------------------------------
.text:00409743
.text:00409743 loc_409743:                             ; CODE XREF: sub_409690+6F↑j
.text:00409743                 call    sub_4094F0
.text:00409748                 mov     ebp, eax
.text:0040974A                 call    _errno
.text:0040974F                 mov     [eax], ebp
.text:00409751                 mov     ebp, 0FFFFFFFFh
.text:00409756                 jmp     short loc_409701
.text:00409756 sub_409690      endp
.text:00409756
.text:00409756 ; ---------------------------------------------------------------------------
.text:00409758                 align 10h
.text:00409760 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040997F↓o
.text:0040976C aLu             db '%lu',0              ; DATA XREF: .text:0040998F↓o
.text:00409770 asc_409770      db ' ',0                ; DATA XREF: .text:loc_409A78↓o
.text:00409772                 align 10h
.text:00409780 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:00409780                                         ; DATA XREF: .text:00409AAF↓o
.text:004097A0 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_409ABD↓o
.text:004097AC aServer         db ' Server',0          ; DATA XREF: .text:00409AE6↓o
.text:004097AC                                         ; .text:loc_409C5E↓o
.text:004097B4 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_409AF8↓o
.text:004097C5 aDatacenterServ db ' Datacenter Server',0
.text:004097C5                                         ; DATA XREF: .text:loc_409B02↓o
.text:004097D8 aStandardEditio db ' Standard Edition',0
.text:004097D8                                         ; DATA XREF: .text:00409B2A↓o
.text:004097EA aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_409B34↓o
.text:004097F7 aEnterpriseEdit db ' Enterprise Edition',0
.text:004097F7                                         ; DATA XREF: .text:loc_409B3E↓o
.text:0040980B aDatacenterEdit db ' Datacenter Edition',0
.text:0040980B                                         ; DATA XREF: .text:loc_409B48↓o
.text:0040981F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:00409B5B↓o
.text:0040982D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_409B65↓o
.text:0040982D                                         ; .text:loc_409C70↓o
.text:0040983B                 align 10h
.text:00409840 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:00409840                                         ; DATA XREF: .text:00409B92↓o
.text:00409870 aProducttype    db 'ProductType',0      ; DATA XREF: .text:00409BD9↓o
.text:0040987C aWinnt          db 'WINNT',0            ; DATA XREF: .text:00409C14↓o
.text:00409882 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:00409C2B↓o
.text:0040988B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:00409C42↓o
.text:00409894                 align 10h
.text:004098A0 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:004098A0                                         ; DATA XREF: .text:00409DB7↓o
.text:004098C3                 align 20h
.text:004098E0 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:004098E0                                         ; DATA XREF: .text:00409E16↓o
.text:00409906 ; ---------------------------------------------------------------------------
.text:00409906
.text:00409906 loc_409906:                             ; DATA XREF: .text:loc_409E81↓o
.text:00409906                 and     [ebx+45h], dl
.text:00409909                 add     [eax], ah
.text:0040990B                 push    ebx
.text:0040990C                 push    eax
.text:0040990D                 xor     [eax], eax
.text:0040990F
.text:0040990F loc_40990F:                             ; DATA XREF: .text:loc_409EFB↓o
.text:0040990F                 and     [edi+53h], cl
.text:00409912                 push    edx
.text:00409913                 xor     al, [eax]
.text:00409915                 lea     esi, [esi+0]
.text:00409919                 lea     edi, [edi+0]
.text:00409920                 push    edi
.text:00409921                 push    esi
.text:00409922                 push    ebx
.text:00409923                 sub     esp, 130h
.text:00409929                 mov     ebx, [esp+140h]
.text:00409930                 call    sub_40A030
.text:00409935                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040993A                 cmp     eax, 1
.text:0040993D                 jz      loc_409DE0
.text:00409943                 cmp     eax, 1
.text:00409946                 jb      loc_409DB6
.text:0040994C                 cmp     eax, 2
.text:0040994F                 jz      loc_409A00
.text:00409955                 cmp     eax, 3
.text:00409958                 jz      short loc_4099BF
.text:0040995A                 lea     esi, [esi+0]
.text:00409960
.text:00409960 loc_409960:                             ; CODE XREF: .text:004099F5↓j
.text:00409960                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409966                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040996C
.text:0040996C loc_40996C:                             ; CODE XREF: .text:00409DFF↓j
.text:0040996C                 mov     [esp+10h], edx
.text:00409970                 mov     ebx, [esp+144h]
.text:00409977                 mov     [esp+0Ch], ecx
.text:0040997B                 mov     [esp+8], eax
.text:0040997F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:00409987                 mov     [esp], ebx
.text:0040998A                 call    sprintf
.text:0040998F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:00409997                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040999D                 mov     ecx, [esp+148h]
.text:004099A4                 mov     [esp+8], edi
.text:004099A8                 mov     [esp], ecx
.text:004099AB                 call    sprintf
.text:004099B0                 mov     eax, 1
.text:004099B5
.text:004099B5 loc_4099B5:                             ; CODE XREF: .text:00409BAF↓j
.text:004099B5                                         ; .text:00409BFC↓j
.text:004099B5                 add     esp, 130h
.text:004099BB                 pop     ebx
.text:004099BC                 pop     esi
.text:004099BD                 pop     edi
.text:004099BE                 retn
.text:004099BF ; ---------------------------------------------------------------------------
.text:004099BF
.text:004099BF loc_4099BF:                             ; CODE XREF: .text:00409958↑j
.text:004099BF                 mov     dword ptr [ebx], 7263694Dh
.text:004099C5                 mov     dword ptr [ebx+4], 666F736Fh
.text:004099CC                 mov     dword ptr [ebx+8], 69572074h
.text:004099D3                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004099DA                 mov     dword ptr [ebx+10h], 45432073h
.text:004099E1                 mov     word ptr [ebx+14h], 20h ; ' '
.text:004099E7                 mov     esi, esi
.text:004099E9                 lea     edi, [edi+0]
.text:004099F0
.text:004099F0 loc_4099F0:                             ; CODE XREF: .text:00409A98↓j
.text:004099F0                                         ; .text:00409DD9↓j ...
.text:004099F0                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004099F5                 jmp     loc_409960
.text:004099F5 ; ---------------------------------------------------------------------------
.text:004099FA                 align 10h
.text:00409A00
.text:00409A00 loc_409A00:                             ; CODE XREF: .text:0040994F↑j
.text:00409A00                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:00409A06                 cmp     edx, 3
.text:00409A09                 mov     eax, edx
.text:00409A0B                 jz      loc_409D75
.text:00409A11
.text:00409A11 loc_409A11:                             ; CODE XREF: .text:00409D7C↓j
.text:00409A11                 cmp     eax, 4
.text:00409A14                 jz      loc_409D35
.text:00409A1A
.text:00409A1A loc_409A1A:                             ; CODE XREF: .text:00409D3D↓j
.text:00409A1A                 cmp     eax, 4
.text:00409A1D                 ja      loc_409C82
.text:00409A23                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00409A29                 test    ecx, ecx
.text:00409A2B                 jnz     loc_409C82
.text:00409A31                 mov     dword ptr [ebx], 7263694Dh
.text:00409A37                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409A3E                 mov     dword ptr [ebx+8], 69572074h
.text:00409A45                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409A4C                 mov     dword ptr [ebx+10h], 544E2073h
.text:00409A53
.text:00409A53 loc_409A53:                             ; CODE XREF: .text:00409CF5↓j
.text:00409A53                 mov     byte ptr [ebx+14h], 0
.text:00409A57
.text:00409A57 loc_409A57:                             ; CODE XREF: .text:00409C85↓j
.text:00409A57                                         ; .text:00409C9C↓j ...
.text:00409A57                 mov     esi, dword_418070
.text:00409A5D                 test    esi, esi
.text:00409A5F                 jz      loc_409B72
.text:00409A65                 movzx   eax, ds:byte_41953A
.text:00409A6C                 cmp     al, 1
.text:00409A6E                 jz      loc_409B52
.text:00409A74                 cmp     al, 3
.text:00409A76                 jz      short loc_409A9D
.text:00409A78
.text:00409A78 loc_409A78:                             ; CODE XREF: .text:00409ABB↓j
.text:00409A78                                         ; .text:00409AF6↓j ...
.text:00409A78                 mov     dword ptr [esp+4], offset asc_409770 ; " "
.text:00409A80                 mov     [esp], ebx
.text:00409A83                 call    strcat
.text:00409A88                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:00409A90                 mov     [esp], ebx
.text:00409A93                 call    strcat
.text:00409A98                 jmp     loc_4099F0
.text:00409A9D ; ---------------------------------------------------------------------------
.text:00409A9D
.text:00409A9D loc_409A9D:                             ; CODE XREF: .text:00409A76↑j
.text:00409A9D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:00409AA4                 jz      short loc_409AC6
.text:00409AA6
.text:00409AA6 loc_409AA6:                             ; CODE XREF: .text:00409AD2↓j
.text:00409AA6                 test    byte ptr ds:word_419538, 2
.text:00409AAD                 jz      short loc_409ABD
.text:00409AAF                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:00409AB6
.text:00409AB6 loc_409AB6:                             ; CODE XREF: .text:00409AC4↓j
.text:00409AB6                 call    printf
.text:00409ABB                 jmp     short loc_409A78
.text:00409ABD ; ---------------------------------------------------------------------------
.text:00409ABD
.text:00409ABD loc_409ABD:                             ; CODE XREF: .text:00409AAD↑j
.text:00409ABD                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:00409AC4                 jmp     short loc_409AB6
.text:00409AC6 ; ---------------------------------------------------------------------------
.text:00409AC6
.text:00409AC6 loc_409AC6:                             ; CODE XREF: .text:00409AA4↑j
.text:00409AC6                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409ACB                 cmp     eax, 2
.text:00409ACE                 jz      short loc_409B10
.text:00409AD0                 test    eax, eax
.text:00409AD2                 jnz     short loc_409AA6
.text:00409AD4                 cmp     byte ptr ds:word_419538, 0
.text:00409ADB                 js      short loc_409B02
.text:00409ADD                 test    byte ptr ds:word_419538, 2
.text:00409AE4                 jnz     short loc_409AF8
.text:00409AE6                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00409AEE
.text:00409AEE loc_409AEE:                             ; CODE XREF: .text:00409B00↓j
.text:00409AEE                                         ; .text:00409B0A↓j ...
.text:00409AEE                 mov     [esp], ebx
.text:00409AF1                 call    strcat
.text:00409AF6                 jmp     short loc_409A78
.text:00409AF8 ; ---------------------------------------------------------------------------
.text:00409AF8
.text:00409AF8 loc_409AF8:                             ; CODE XREF: .text:00409AE4↑j
.text:00409AF8                                         ; .text:00409C59↓j
.text:00409AF8                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:00409B00                 jmp     short loc_409AEE
.text:00409B02 ; ---------------------------------------------------------------------------
.text:00409B02
.text:00409B02 loc_409B02:                             ; CODE XREF: .text:00409ADB↑j
.text:00409B02                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:00409B0A                 jmp     short loc_409AEE
.text:00409B0A ; ---------------------------------------------------------------------------
.text:00409B0C                 align 10h
.text:00409B10
.text:00409B10 loc_409B10:                             ; CODE XREF: .text:00409ACE↑j
.text:00409B10                 cmp     byte ptr ds:word_419538, 0
.text:00409B17                 js      short loc_409B48
.text:00409B19                 movzx   eax, ds:word_419538
.text:00409B20                 test    al, 2
.text:00409B22                 jnz     short loc_409B3E
.text:00409B24                 cmp     ax, 400h
.text:00409B28                 jz      short loc_409B34
.text:00409B2A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:00409B32                 jmp     short loc_409AEE
.text:00409B34 ; ---------------------------------------------------------------------------
.text:00409B34
.text:00409B34 loc_409B34:                             ; CODE XREF: .text:00409B28↑j
.text:00409B34                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:00409B3C                 jmp     short loc_409AEE
.text:00409B3E ; ---------------------------------------------------------------------------
.text:00409B3E
.text:00409B3E loc_409B3E:                             ; CODE XREF: .text:00409B22↑j
.text:00409B3E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:00409B46                 jmp     short loc_409AEE
.text:00409B48 ; ---------------------------------------------------------------------------
.text:00409B48
.text:00409B48 loc_409B48:                             ; CODE XREF: .text:00409B17↑j
.text:00409B48                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:00409B50                 jmp     short loc_409AEE
.text:00409B52 ; ---------------------------------------------------------------------------
.text:00409B52
.text:00409B52 loc_409B52:                             ; CODE XREF: .text:00409A6E↑j
.text:00409B52                 test    byte ptr ds:word_419538+1, 2
.text:00409B59                 jz      short loc_409B65
.text:00409B5B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:00409B63                 jmp     short loc_409AEE
.text:00409B65 ; ---------------------------------------------------------------------------
.text:00409B65
.text:00409B65 loc_409B65:                             ; CODE XREF: .text:00409B59↑j
.text:00409B65                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00409B6D                 jmp     loc_409AEE
.text:00409B72 ; ---------------------------------------------------------------------------
.text:00409B72
.text:00409B72 loc_409B72:                             ; CODE XREF: .text:00409A5F↑j
.text:00409B72                 mov     dword ptr [esp+28h], 0FFh
.text:00409B7A                 lea     edx, [esp+2Ch]
.text:00409B7E                 mov     [esp+10h], edx
.text:00409B82                 mov     dword ptr [esp+0Ch], 1
.text:00409B8A                 mov     dword ptr [esp+8], 0
.text:00409B92                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:00409B9A                 mov     dword ptr [esp], 80000002h
.text:00409BA1                 call    RegOpenKeyExA
.text:00409BA6                 mov     edi, eax
.text:00409BA8                 sub     esp, 14h
.text:00409BAB                 xor     eax, eax
.text:00409BAD                 test    edi, edi
.text:00409BAF                 jnz     loc_4099B5
.text:00409BB5                 mov     dword ptr [esp+0Ch], 0
.text:00409BBD                 mov     edi, [esp+2Ch]
.text:00409BC1                 lea     esi, [esp+28h]
.text:00409BC5                 mov     [esp+14h], esi
.text:00409BC9                 lea     esi, [esp+30h]
.text:00409BCD                 mov     [esp+10h], esi
.text:00409BD1                 mov     dword ptr [esp+8], 0
.text:00409BD9                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:00409BE1                 mov     [esp], edi
.text:00409BE4                 call    RegQueryValueExA
.text:00409BE9                 sub     esp, 18h
.text:00409BEC                 test    eax, eax
.text:00409BEE                 jnz     short loc_409BFA
.text:00409BF0                 cmp     dword ptr [esp+28h], 0FFh
.text:00409BF8                 jbe     short loc_409C01
.text:00409BFA
.text:00409BFA loc_409BFA:                             ; CODE XREF: .text:00409BEE↑j
.text:00409BFA                 xor     eax, eax
.text:00409BFC                 jmp     loc_4099B5
.text:00409C01 ; ---------------------------------------------------------------------------
.text:00409C01
.text:00409C01 loc_409C01:                             ; CODE XREF: .text:00409BF8↑j
.text:00409C01                 mov     edx, [esp+2Ch]
.text:00409C05                 mov     [esp], edx
.text:00409C08                 call    RegCloseKey
.text:00409C0D                 sub     esp, 4
.text:00409C10                 mov     [esp+4], esi
.text:00409C14                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:00409C1B                 call    lstrcmpiA
.text:00409C20                 sub     esp, 8
.text:00409C23                 test    eax, eax
.text:00409C25                 jz      short loc_409C70
.text:00409C27
.text:00409C27 loc_409C27:                             ; CODE XREF: .text:00409C80↓j
.text:00409C27                 mov     [esp+4], esi
.text:00409C2B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:00409C32                 call    lstrcmpiA
.text:00409C37                 sub     esp, 8
.text:00409C3A                 test    eax, eax
.text:00409C3C                 jz      short loc_409C5E
.text:00409C3E
.text:00409C3E loc_409C3E:                             ; CODE XREF: .text:00409C6E↓j
.text:00409C3E                 mov     [esp+4], esi
.text:00409C42                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:00409C49                 call    lstrcmpiA
.text:00409C4E                 sub     esp, 8
.text:00409C51                 test    eax, eax
.text:00409C53                 jnz     loc_409A78
.text:00409C59                 jmp     loc_409AF8
.text:00409C5E ; ---------------------------------------------------------------------------
.text:00409C5E
.text:00409C5E loc_409C5E:                             ; CODE XREF: .text:00409C3C↑j
.text:00409C5E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00409C66                 mov     [esp], ebx
.text:00409C69                 call    strcat
.text:00409C6E                 jmp     short loc_409C3E
.text:00409C70 ; ---------------------------------------------------------------------------
.text:00409C70
.text:00409C70 loc_409C70:                             ; CODE XREF: .text:00409C25↑j
.text:00409C70                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00409C78                 mov     [esp], ebx
.text:00409C7B                 call    strcat
.text:00409C80                 jmp     short loc_409C27
.text:00409C82 ; ---------------------------------------------------------------------------
.text:00409C82
.text:00409C82 loc_409C82:                             ; CODE XREF: .text:00409A1D↑j
.text:00409C82                                         ; .text:00409A2B↑j
.text:00409C82                 cmp     eax, 5
.text:00409C85                 jnz     loc_409A57
.text:00409C8B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409C90                 cmp     eax, 2
.text:00409C93                 jz      short loc_409CFA
.text:00409C95                 cmp     eax, 1
.text:00409C98                 jz      short loc_409CD3
.text:00409C9A                 test    eax, eax
.text:00409C9C                 jnz     loc_409A57
.text:00409CA2                 mov     dword ptr [ebx], 7263694Dh
.text:00409CA8                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409CAF                 mov     dword ptr [ebx+8], 69572074h
.text:00409CB6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409CBD                 mov     dword ptr [ebx+10h], 30322073h
.text:00409CC4                 mov     word ptr [ebx+14h], 3030h
.text:00409CCA                 mov     byte ptr [ebx+16h], 0
.text:00409CCE                 jmp     loc_409A57
.text:00409CD3 ; ---------------------------------------------------------------------------
.text:00409CD3
.text:00409CD3 loc_409CD3:                             ; CODE XREF: .text:00409C98↑j
.text:00409CD3                 mov     dword ptr [ebx], 7263694Dh
.text:00409CD9                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409CE0                 mov     dword ptr [ebx+8], 69572074h
.text:00409CE7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409CEE                 mov     dword ptr [ebx+10h], 50582073h
.text:00409CF5                 jmp     loc_409A53
.text:00409CFA ; ---------------------------------------------------------------------------
.text:00409CFA
.text:00409CFA loc_409CFA:                             ; CODE XREF: .text:00409C93↑j
.text:00409CFA                 mov     dword ptr [ebx], 7263694Dh
.text:00409D00                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409D07                 mov     dword ptr [ebx+8], 69572074h
.text:00409D0E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409D15                 mov     dword ptr [ebx+10h], 65532073h
.text:00409D1C                 mov     dword ptr [ebx+14h], 72657672h
.text:00409D23                 mov     dword ptr [ebx+18h], 30303220h
.text:00409D2A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:00409D30                 jmp     loc_409A57
.text:00409D35 ; ---------------------------------------------------------------------------
.text:00409D35
.text:00409D35 loc_409D35:                             ; CODE XREF: .text:00409A14↑j
.text:00409D35                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409D3B                 test    edx, edx
.text:00409D3D                 jnz     loc_409A1A
.text:00409D43                 mov     dword ptr [ebx], 7263694Dh
.text:00409D49                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409D50                 mov     dword ptr [ebx+8], 69572074h
.text:00409D57                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409D5E                 mov     dword ptr [ebx+10h], 544E2073h
.text:00409D65                 mov     dword ptr [ebx+14h], 302E3420h
.text:00409D6C                 mov     byte ptr [ebx+18h], 0
.text:00409D70                 jmp     loc_409A57
.text:00409D75 ; ---------------------------------------------------------------------------
.text:00409D75
.text:00409D75 loc_409D75:                             ; CODE XREF: .text:00409A0B↑j
.text:00409D75                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:00409D7C                 jnz     loc_409A11
.text:00409D82                 mov     dword ptr [ebx], 7263694Dh
.text:00409D88                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409D8F                 mov     dword ptr [ebx+8], 69572074h
.text:00409D96                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409D9D                 mov     dword ptr [ebx+10h], 544E2073h
.text:00409DA4                 mov     dword ptr [ebx+14h], 352E3320h
.text:00409DAB                 mov     word ptr [ebx+18h], 31h ; '1'
.text:00409DB1                 jmp     loc_409A57
.text:00409DB6 ; ---------------------------------------------------------------------------
.text:00409DB6
.text:00409DB6 loc_409DB6:                             ; CODE XREF: .text:00409946↑j
.text:00409DB6                 cld
.text:00409DB7                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:00409DBC                 mov     ecx, 8
.text:00409DC1                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:00409DC8                 mov     edi, ebx
.text:00409DCA                 rep movsd
.text:00409DCC                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:00409DD3                 mov     [edi+2], dl
.text:00409DD6                 mov     [edi], si
.text:00409DD9                 jmp     loc_4099F0
.text:00409DD9 ; ---------------------------------------------------------------------------
.text:00409DDE                 align 10h
.text:00409DE0
.text:00409DE0 loc_409DE0:                             ; CODE XREF: .text:0040993D↑j
.text:00409DE0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409DE6                 cmp     ecx, 4
.text:00409DE9                 jz      loc_409EA0
.text:00409DEF
.text:00409DEF loc_409DEF:                             ; CODE XREF: .text:00409EF6↓j
.text:00409DEF                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409DF5
.text:00409DF5 loc_409DF5:                             ; CODE XREF: .text:00409EA8↓j
.text:00409DF5                 cmp     ecx, 4
.text:00409DF8                 jz      short loc_409E04
.text:00409DFA
.text:00409DFA loc_409DFA:                             ; CODE XREF: .text:00409E0C↓j
.text:00409DFA                                         ; .text:00409E11↓j
.text:00409DFA                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00409DFF                 jmp     loc_40996C
.text:00409E04 ; ---------------------------------------------------------------------------
.text:00409E04
.text:00409E04 loc_409E04:                             ; CODE XREF: .text:00409DF8↑j
.text:00409E04                 cmp     edx, 0Ah
.text:00409E07                 jz      short loc_409E31
.text:00409E09
.text:00409E09 loc_409E09:                             ; CODE XREF: .text:00409E7F↓j
.text:00409E09                 cmp     ecx, 4
.text:00409E0C                 jnz     short loc_409DFA
.text:00409E0E                 cmp     edx, 5Ah ; 'Z'
.text:00409E11                 jnz     short loc_409DFA
.text:00409E13                 cld
.text:00409E14                 mov     edi, ebx
.text:00409E16                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:00409E1B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:00409E22                 mov     ecx, 9
.text:00409E27                 rep movsd
.text:00409E29                 mov     [edi], bx
.text:00409E2C                 jmp     loc_4099F0
.text:00409E31 ; ---------------------------------------------------------------------------
.text:00409E31
.text:00409E31 loc_409E31:                             ; CODE XREF: .text:00409E07↑j
.text:00409E31                 mov     dword ptr [ebx], 7263694Dh
.text:00409E37                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409E3E                 mov     dword ptr [ebx+8], 69572074h
.text:00409E45                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409E4C                 mov     dword ptr [ebx+10h], 38392073h
.text:00409E53                 mov     byte ptr [ebx+14h], 0
.text:00409E57                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00409E5D                 lea     edi, [edx-7CFh]
.text:00409E63                 cmp     edi, 0B7h ; '·'
.text:00409E69                 jbe     short loc_409E93
.text:00409E6B                 cmp     edx, 886h
.text:00409E71                 ja      short loc_409E81
.text:00409E73
.text:00409E73 loc_409E73:                             ; CODE XREF: .text:00409E91↓j
.text:00409E73                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409E79                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409E7F                 jmp     short loc_409E09
.text:00409E81 ; ---------------------------------------------------------------------------
.text:00409E81
.text:00409E81 loc_409E81:                             ; CODE XREF: .text:00409E71↑j
.text:00409E81                 mov     dword ptr [esp+4], offset loc_409906
.text:00409E89
.text:00409E89 loc_409E89:                             ; CODE XREF: .text:00409E9B↓j
.text:00409E89                 mov     [esp], ebx
.text:00409E8C                 call    strcat
.text:00409E91                 jmp     short loc_409E73
.text:00409E93 ; ---------------------------------------------------------------------------
.text:00409E93
.text:00409E93 loc_409E93:                             ; CODE XREF: .text:00409E69↑j
.text:00409E93                 mov     dword ptr [esp+4], 40990Ah
.text:00409E9B                 jmp     short loc_409E89
.text:00409E9B ; ---------------------------------------------------------------------------
.text:00409E9D                 align 10h
.text:00409EA0
.text:00409EA0 loc_409EA0:                             ; CODE XREF: .text:00409DE9↑j
.text:00409EA0                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409EA6                 test    edx, edx
.text:00409EA8                 jnz     loc_409DF5
.text:00409EAE                 mov     dword ptr [ebx], 7263694Dh
.text:00409EB4                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409EBB                 mov     dword ptr [ebx+8], 69572074h
.text:00409EC2                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409EC9                 mov     dword ptr [ebx+10h], 35392073h
.text:00409ED0                 mov     byte ptr [ebx+14h], 0
.text:00409ED4                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00409EDA                 lea     ecx, [edx-3B7h]
.text:00409EE0                 cmp     ecx, 81h
.text:00409EE6                 jbe     short loc_409F0D
.text:00409EE8                 cmp     edx, 438h
.text:00409EEE                 ja      short loc_409EFB
.text:00409EF0
.text:00409EF0 loc_409EF0:                             ; CODE XREF: .text:00409F0B↓j
.text:00409EF0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409EF6                 jmp     loc_409DEF
.text:00409EFB ; ---------------------------------------------------------------------------
.text:00409EFB
.text:00409EFB loc_409EFB:                             ; CODE XREF: .text:00409EEE↑j
.text:00409EFB                 mov     dword ptr [esp+4], offset loc_40990F
.text:00409F03
.text:00409F03 loc_409F03:                             ; CODE XREF: .text:00409F15↓j
.text:00409F03                 mov     [esp], ebx
.text:00409F06                 call    strcat
.text:00409F0B                 jmp     short loc_409EF0
.text:00409F0D ; ---------------------------------------------------------------------------
.text:00409F0D
.text:00409F0D loc_409F0D:                             ; CODE XREF: .text:00409EE6↑j
.text:00409F0D                 mov     dword ptr [esp+4], 40990Ah
.text:00409F15                 jmp     short loc_409F03
.text:00409F15 ; ---------------------------------------------------------------------------
.text:00409F17                 align 10h
.text:00409F20
.text:00409F20 ; =============== S U B R O U T I N E =======================================
.text:00409F20
.text:00409F20
.text:00409F20 sub_409F20      proc near               ; CODE XREF: .text:004089EE↑p
.text:00409F20                                         ; sub_408E70+12A↑p
.text:00409F20                 sub     esp, 0Ch
.text:00409F23                 call    sub_40A030
.text:00409F28                 mov     eax, ds:dword_419490
.text:00409F2D                 add     esp, 0Ch
.text:00409F30                 retn
.text:00409F30 sub_409F20      endp
.text:00409F30
.text:00409F31 ; ---------------------------------------------------------------------------
.text:00409F31                 jmp     short loc_409F40
.text:00409F31 ; ---------------------------------------------------------------------------
.text:00409F33                 align 10h
.text:00409F40
.text:00409F40 loc_409F40:                             ; CODE XREF: .text:00409F31↑j
.text:00409F40                 sub     esp, 0Ch
.text:00409F43                 call    sub_40A030
.text:00409F48                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00409F4D                 add     esp, 0Ch
.text:00409F50                 retn
.text:00409F51 ; ---------------------------------------------------------------------------
.text:00409F51                 jmp     short loc_409F60
.text:00409F51 ; ---------------------------------------------------------------------------
.text:00409F53                 align 10h
.text:00409F60
.text:00409F60 loc_409F60:                             ; CODE XREF: .text:00409F51↑j
.text:00409F60                 sub     esp, 0Ch
.text:00409F63                 call    sub_40A030
.text:00409F68                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:00409F6D                 add     esp, 0Ch
.text:00409F70                 retn
.text:00409F71 ; ---------------------------------------------------------------------------
.text:00409F71                 jmp     short loc_409F80
.text:00409F71 ; ---------------------------------------------------------------------------
.text:00409F73                 align 10h
.text:00409F80
.text:00409F80 loc_409F80:                             ; CODE XREF: .text:00409F71↑j
.text:00409F80                 sub     esp, 0Ch
.text:00409F83                 call    sub_40A030
.text:00409F88                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409F8D                 add     esp, 0Ch
.text:00409F90                 retn
.text:00409F91 ; ---------------------------------------------------------------------------
.text:00409F91                 jmp     short loc_409FA0
.text:00409F91 ; ---------------------------------------------------------------------------
.text:00409F93                 align 10h
.text:00409FA0
.text:00409FA0 loc_409FA0:                             ; CODE XREF: .text:00409F91↑j
.text:00409FA0                 sub     esp, 0Ch
.text:00409FA3                 call    GetVersion
.text:00409FA8                 shr     eax, 10h
.text:00409FAB                 add     esp, 0Ch
.text:00409FAE                 retn
.text:00409FAE ; ---------------------------------------------------------------------------
.text:00409FAF                 align 10h
.text:00409FB0                 sub     esp, 0Ch
.text:00409FB3                 call    sub_40A030
.text:00409FB8                 xor     eax, eax
.text:00409FBA                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:00409FC1                 setz    al
.text:00409FC4                 add     esp, 0Ch
.text:00409FC7                 retn
.text:00409FC7 ; ---------------------------------------------------------------------------
.text:00409FC8                 align 10h
.text:00409FD0
.text:00409FD0 ; =============== S U B R O U T I N E =======================================
.text:00409FD0
.text:00409FD0
.text:00409FD0 sub_409FD0      proc near               ; CODE XREF: .text:loc_408350↑p
.text:00409FD0                                         ; .text:loc_4089D4↑p ...
.text:00409FD0                 sub     esp, 0Ch
.text:00409FD3                 call    sub_40A030
.text:00409FD8                 xor     eax, eax
.text:00409FDA                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:00409FE1                 setz    al
.text:00409FE4                 add     esp, 0Ch
.text:00409FE7                 retn
.text:00409FE7 sub_409FD0      endp
.text:00409FE7
.text:00409FE7 ; ---------------------------------------------------------------------------
.text:00409FE8                 align 10h
.text:00409FF0                 sub     esp, 0Ch
.text:00409FF3                 call    sub_40A030
.text:00409FF8                 xor     eax, eax
.text:00409FFA                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0040A001                 setz    al
.text:0040A004                 add     esp, 0Ch
.text:0040A007                 retn
.text:0040A007 ; ---------------------------------------------------------------------------
.text:0040A008                 align 10h
.text:0040A010                 sub     esp, 0Ch
.text:0040A013                 call    sub_40A030
.text:0040A018                 xor     eax, eax
.text:0040A01A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0040A021                 setz    al
.text:0040A024                 add     esp, 0Ch
.text:0040A027                 retn
.text:0040A027 ; ---------------------------------------------------------------------------
.text:0040A028                 align 10h
.text:0040A030
.text:0040A030 ; =============== S U B R O U T I N E =======================================
.text:0040A030
.text:0040A030
.text:0040A030 sub_40A030      proc near               ; CODE XREF: .text:00409930↑p
.text:0040A030                                         ; sub_409F20+3↑p ...
.text:0040A030
.text:0040A030 lpVersionInformation= dword ptr -0BCh
.text:0040A030 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0040A030
.text:0040A030                 sub     esp, 0BCh
.text:0040A036                 mov     edx, ds:dword_419540
.text:0040A03C                 test    edx, edx
.text:0040A03E                 jz      short loc_40A050
.text:0040A040
.text:0040A040 loc_40A040:                             ; CODE XREF: sub_40A030+7B↓j
.text:0040A040                 mov     edx, 1
.text:0040A045
.text:0040A045 loc_40A045:                             ; CODE XREF: sub_40A030+217↓j
.text:0040A045                 mov     eax, edx
.text:0040A047                 add     esp, 0BCh
.text:0040A04D                 retn
.text:0040A04D ; ---------------------------------------------------------------------------
.text:0040A04E                 align 10h
.text:0040A050
.text:0040A050 loc_40A050:                             ; CODE XREF: sub_40A030+E↑j
.text:0040A050                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0040A057                 mov     edx, 9Ch ; 'œ'
.text:0040A05C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0040A062                 call    GetVersionExA
.text:0040A067                 sub     esp, 4
.text:0040A06A                 test    eax, eax
.text:0040A06C                 jz      loc_40A224
.text:0040A072
.text:0040A072 loc_40A072:                             ; CODE XREF: sub_40A030+245↓j
.text:0040A072                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0040A079                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040A07E                 cmp     eax, 1
.text:0040A081                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040A087                 jz      loc_40A170
.text:0040A08D                 cmp     eax, 1
.text:0040A090                 jb      loc_40A160
.text:0040A096                 cmp     eax, 2
.text:0040A099                 jz      short loc_40A0BA
.text:0040A09B                 cmp     eax, 3
.text:0040A09E                 jz      short loc_40A0AD
.text:0040A0A0
.text:0040A0A0 loc_40A0A0:                             ; CODE XREF: sub_40A030+88↓j
.text:0040A0A0                                         ; sub_40A030+C0↓j ...
.text:0040A0A0                 mov     edx, 1
.text:0040A0A5                 mov     ds:dword_419540, edx
.text:0040A0AB                 jmp     short loc_40A040
.text:0040A0AD ; ---------------------------------------------------------------------------
.text:0040A0AD
.text:0040A0AD loc_40A0AD:                             ; CODE XREF: sub_40A030+6E↑j
.text:0040A0AD                 mov     ecx, 17h
.text:0040A0B2
.text:0040A0B2 loc_40A0B2:                             ; CODE XREF: sub_40A030+1A7↓j
.text:0040A0B2                 mov     ds:dword_419490, ecx
.text:0040A0B8                 jmp     short loc_40A0A0
.text:0040A0BA ; ---------------------------------------------------------------------------
.text:0040A0BA
.text:0040A0BA loc_40A0BA:                             ; CODE XREF: sub_40A030+69↑j
.text:0040A0BA                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040A0BF                 cmp     eax, 3
.text:0040A0C2                 jz      short loc_40A13B
.text:0040A0C4                 cmp     eax, 4
.text:0040A0C7                 jz      short loc_40A12A
.text:0040A0C9
.text:0040A0C9 loc_40A0C9:                             ; CODE XREF: sub_40A030+102↓j
.text:0040A0C9                 cmp     eax, 4
.text:0040A0CC                 ja      short loc_40A0F2
.text:0040A0CE                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040A0D4                 test    ecx, ecx
.text:0040A0D6                 jnz     short loc_40A0F2
.text:0040A0D8                 mov     edx, 1Eh
.text:0040A0DD
.text:0040A0DD loc_40A0DD:                             ; CODE XREF: sub_40A030+DF↓j
.text:0040A0DD                 mov     ds:dword_419490, edx
.text:0040A0E3
.text:0040A0E3 loc_40A0E3:                             ; CODE XREF: sub_40A030+C5↓j
.text:0040A0E3                                         ; sub_40A030+D8↓j ...
.text:0040A0E3                 movzx   ecx, ds:word_419534
.text:0040A0EA                 add     ds:dword_419490, ecx
.text:0040A0F0                 jmp     short loc_40A0A0
.text:0040A0F2 ; ---------------------------------------------------------------------------
.text:0040A0F2
.text:0040A0F2 loc_40A0F2:                             ; CODE XREF: sub_40A030+9C↑j
.text:0040A0F2                                         ; sub_40A030+A6↑j
.text:0040A0F2                 cmp     eax, 5
.text:0040A0F5                 jnz     short loc_40A0E3
.text:0040A0F7                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040A0FC                 cmp     eax, 2
.text:0040A0FF                 jz      short loc_40A11E
.text:0040A101                 cmp     eax, 1
.text:0040A104                 jz      short loc_40A111
.text:0040A106                 test    eax, eax
.text:0040A108                 jnz     short loc_40A0E3
.text:0040A10A                 mov     edx, 32h ; '2'
.text:0040A10F                 jmp     short loc_40A0DD
.text:0040A111 ; ---------------------------------------------------------------------------
.text:0040A111
.text:0040A111 loc_40A111:                             ; CODE XREF: sub_40A030+D4↑j
.text:0040A111                 mov     ecx, 3Ch ; '<'
.text:0040A116
.text:0040A116 loc_40A116:                             ; CODE XREF: sub_40A030+122↓j
.text:0040A116                 mov     ds:dword_419490, ecx
.text:0040A11C                 jmp     short loc_40A0E3
.text:0040A11E ; ---------------------------------------------------------------------------
.text:0040A11E
.text:0040A11E loc_40A11E:                             ; CODE XREF: sub_40A030+CF↑j
.text:0040A11E                 mov     eax, 46h ; 'F'
.text:0040A123
.text:0040A123 loc_40A123:                             ; CODE XREF: sub_40A030+109↓j
.text:0040A123                                         ; sub_40A030+129↓j
.text:0040A123                 mov     ds:dword_419490, eax
.text:0040A128                 jmp     short loc_40A0E3
.text:0040A12A ; ---------------------------------------------------------------------------
.text:0040A12A
.text:0040A12A loc_40A12A:                             ; CODE XREF: sub_40A030+97↑j
.text:0040A12A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040A130                 test    ecx, ecx
.text:0040A132                 jnz     short loc_40A0C9
.text:0040A134                 mov     eax, 28h ; '('
.text:0040A139                 jmp     short loc_40A123
.text:0040A13B ; ---------------------------------------------------------------------------
.text:0040A13B
.text:0040A13B loc_40A13B:                             ; CODE XREF: sub_40A030+92↑j
.text:0040A13B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040A140                 cmp     eax, 33h ; '3'
.text:0040A143                 jz      short loc_40A154
.text:0040A145                 cmp     eax, 5
.text:0040A148                 setz    cl
.text:0040A14B                 movzx   edx, cl
.text:0040A14E                 lea     ecx, [edx+edx*4+1Eh]
.text:0040A152                 jmp     short loc_40A116
.text:0040A154 ; ---------------------------------------------------------------------------
.text:0040A154
.text:0040A154 loc_40A154:                             ; CODE XREF: sub_40A030+113↑j
.text:0040A154                 mov     eax, 24h ; '$'
.text:0040A159                 jmp     short loc_40A123
.text:0040A159 ; ---------------------------------------------------------------------------
.text:0040A15B                 align 10h
.text:0040A160
.text:0040A160 loc_40A160:                             ; CODE XREF: sub_40A030+60↑j
.text:0040A160                 mov     edx, 2
.text:0040A165                 mov     ds:dword_419490, edx
.text:0040A16B                 jmp     loc_40A0A0
.text:0040A170 ; ---------------------------------------------------------------------------
.text:0040A170
.text:0040A170 loc_40A170:                             ; CODE XREF: sub_40A030+57↑j
.text:0040A170                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040A176                 cmp     ecx, 4
.text:0040A179                 jnz     loc_40A0A0
.text:0040A17F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040A184                 test    eax, eax
.text:0040A186                 jnz     short loc_40A1AA
.text:0040A188                 mov     eax, 0Ah
.text:0040A18D                 mov     ds:dword_419490, eax
.text:0040A192                 lea     eax, [edx-3B7h]
.text:0040A198                 cmp     eax, 81h
.text:0040A19D                 ja      short loc_40A215
.text:0040A19F                 mov     edx, 0Bh
.text:0040A1A4
.text:0040A1A4 loc_40A1A4:                             ; CODE XREF: sub_40A030+1F2↓j
.text:0040A1A4                 mov     ds:dword_419490, edx
.text:0040A1AA
.text:0040A1AA loc_40A1AA:                             ; CODE XREF: sub_40A030+156↑j
.text:0040A1AA                                         ; sub_40A030+1EB↓j
.text:0040A1AA                 cmp     ecx, 4
.text:0040A1AD                 jnz     loc_40A0A0
.text:0040A1B3                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040A1BA                 jz      short loc_40A1DC
.text:0040A1BC
.text:0040A1BC loc_40A1BC:                             ; CODE XREF: sub_40A030+1D4↓j
.text:0040A1BC                                         ; sub_40A030+1DC↓j
.text:0040A1BC                 cmp     ecx, 4
.text:0040A1BF                 jnz     loc_40A0A0
.text:0040A1C5                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040A1CC                 jnz     loc_40A0A0
.text:0040A1D2                 mov     ecx, 12h
.text:0040A1D7                 jmp     loc_40A0B2
.text:0040A1DC ; ---------------------------------------------------------------------------
.text:0040A1DC
.text:0040A1DC loc_40A1DC:                             ; CODE XREF: sub_40A030+18A↑j
.text:0040A1DC                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040A1E2                 mov     eax, 0Eh
.text:0040A1E7                 mov     ds:dword_419490, eax
.text:0040A1EC                 lea     eax, [edx-7CFh]
.text:0040A1F2                 cmp     eax, 0B7h ; '·'
.text:0040A1F7                 ja      short loc_40A206
.text:0040A1F9                 mov     edx, 0Fh
.text:0040A1FE
.text:0040A1FE loc_40A1FE:                             ; CODE XREF: sub_40A030+1E3↓j
.text:0040A1FE                 mov     ds:dword_419490, edx
.text:0040A204                 jmp     short loc_40A1BC
.text:0040A206 ; ---------------------------------------------------------------------------
.text:0040A206
.text:0040A206 loc_40A206:                             ; CODE XREF: sub_40A030+1C7↑j
.text:0040A206                 cmp     edx, 886h
.text:0040A20C                 jbe     short loc_40A1BC
.text:0040A20E                 mov     edx, 10h
.text:0040A213                 jmp     short loc_40A1FE
.text:0040A215 ; ---------------------------------------------------------------------------
.text:0040A215
.text:0040A215 loc_40A215:                             ; CODE XREF: sub_40A030+16D↑j
.text:0040A215                 cmp     edx, 438h
.text:0040A21B                 jbe     short loc_40A1AA
.text:0040A21D                 mov     edx, 0Ch
.text:0040A222                 jmp     short loc_40A1A4
.text:0040A224 ; ---------------------------------------------------------------------------
.text:0040A224
.text:0040A224 loc_40A224:                             ; CODE XREF: sub_40A030+3C↑j
.text:0040A224                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040A22C                 xor     edx, edx
.text:0040A22E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0040A232                 mov     dword_418070, edx
.text:0040A238                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040A23B                 call    GetVersionExA
.text:0040A240                 sub     esp, 4
.text:0040A243                 xor     edx, edx
.text:0040A245                 test    eax, eax
.text:0040A247                 jz      loc_40A045
.text:0040A24D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0040A251                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0040A255                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040A25B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040A25F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0040A265                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0040A269                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040A26F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0040A275                 jmp     loc_40A072
.text:0040A275 sub_40A030      endp
.text:0040A275
.text:0040A275 ; ---------------------------------------------------------------------------
.text:0040A27A                 align 10h
.text:0040A280 aNotset         db 'notset',0           ; DATA XREF: .data:off_418080↓o
.text:0040A280                                         ; .data:off_418084↓o
.text:0040A287 ; ---------------------------------------------------------------------------
.text:0040A287
.text:0040A287 loc_40A287:                             ; DATA XREF: .text:loc_40A325↓o
.text:0040A287                 jb      short loc_40A300
.text:0040A289                 add     [eax], ah
.text:0040A28B                 or      [eax], eax
.text:0040A28D
.text:0040A28D loc_40A28D:                             ; DATA XREF: .text:0040A378↓o
.text:0040A28D                                         ; .text:0040A3DE↓o ...
.text:0040A28D                 add     [eax], ah
.text:0040A28F                 and     eax, 64252064h
.text:0040A294                 and     [eax], al
.text:0040A296                 lea     esi, [esi+0]
.text:0040A299                 lea     edi, [edi+0]
.text:0040A2A0                 push    ebp
.text:0040A2A1                 push    edi
.text:0040A2A2                 push    esi
.text:0040A2A3                 push    ebx
.text:0040A2A4                 sub     esp, 14Ch
.text:0040A2AA                 mov     edx, off_418080 ; "notset"
.text:0040A2B0                 mov     edi, [esp+164h]
.text:0040A2B7                 mov     ebp, [esp+168h]
.text:0040A2BE                 mov     [esp+4], edx
.text:0040A2C2                 mov     edx, off_418084 ; "notset"
.text:0040A2C8                 mov     [esp], edx
.text:0040A2CB                 call    strcmp
.text:0040A2D0                 test    eax, eax
.text:0040A2D2                 jz      loc_40A6C0
.text:0040A2D8
.text:0040A2D8 loc_40A2D8:                             ; CODE XREF: .text:0040A70C↓j
.text:0040A2D8                 lea     ebx, [esp+20h]
.text:0040A2DC                 lea     esi, [esi+0]
.text:0040A2E0
.text:0040A2E0 loc_40A2E0:                             ; CODE XREF: .text:0040A316↓j
.text:0040A2E0                 mov     [esp+4], ebx
.text:0040A2E4                 mov     ecx, off_418084 ; "notset"
.text:0040A2EA                 mov     [esp], ecx
.text:0040A2ED                 call    loc_408F10
.text:0040A2F2                 test    eax, eax
.text:0040A2F4                 jns     short loc_40A325
.text:0040A2F6                 mov     eax, off_418084 ; "notset"
.text:0040A2FB                 cmp     byte ptr [eax], 0
.text:0040A2FE                 jz      short loc_40A318
.text:0040A300
.text:0040A300 loc_40A300:                             ; CODE XREF: .text:loc_40A287↑j
.text:0040A300                 mov     dword ptr [esp+4], 0
.text:0040A308                 mov     [esp], eax
.text:0040A30B                 call    strchr
.text:0040A310                 inc     eax
.text:0040A311                 mov     off_418084, eax ; "notset"
.text:0040A316                 jmp     short loc_40A2E0
.text:0040A318 ; ---------------------------------------------------------------------------
.text:0040A318
.text:0040A318 loc_40A318:                             ; CODE XREF: .text:0040A2FE↑j
.text:0040A318                 xor     eax, eax
.text:0040A31A
.text:0040A31A loc_40A31A:                             ; CODE XREF: .text:0040A4DC↓j
.text:0040A31A                 add     esp, 14Ch
.text:0040A320                 pop     ebx
.text:0040A321                 pop     esi
.text:0040A322                 pop     edi
.text:0040A323                 pop     ebp
.text:0040A324                 retn
.text:0040A325 ; ---------------------------------------------------------------------------
.text:0040A325
.text:0040A325 loc_40A325:                             ; CODE XREF: .text:0040A2F4↑j
.text:0040A325                 mov     dword ptr [edi+0Ch], offset loc_40A287
.text:0040A32C                 lea     ecx, [esp+0D6h]
.text:0040A333                 lea     edx, [esp+6Ch]
.text:0040A337                 mov     [edi+4], ecx
.text:0040A33A                 lea     ebx, [esp+7Ch]
.text:0040A33E                 mov     [edi+8], edx
.text:0040A341                 mov     [edi], ebx
.text:0040A343                 mov     [esp], ebp
.text:0040A346                 mov     [esp+4], edi
.text:0040A34A                 call    ___addmntentstr
.text:0040A34F                 mov     [esp], ebp
.text:0040A352                 mov     dword ptr [esp+4], 40A28Ah
.text:0040A35A                 call    strspn
.text:0040A35F                 mov     dword ptr [esp+4], 0
.text:0040A367                 mov     ebx, off_418084 ; "notset"
.text:0040A36D                 lea     esi, [eax+ebp]
.text:0040A370                 mov     [esp+1Ch], esi
.text:0040A374                 lea     ebp, [esp+1Ch]
.text:0040A378                 mov     esi, offset loc_40A28D
.text:0040A37D                 mov     [esp], ebx
.text:0040A380                 call    strchr
.text:0040A385                 mov     dword ptr [esp+4], 40A28Ah
.text:0040A38D                 inc     eax
.text:0040A38E                 mov     off_418084, eax ; "notset"
.text:0040A393                 mov     [esp], ebp
.text:0040A396                 call    sub_40B2B0
.text:0040A39B                 test    eax, eax
.text:0040A39D                 mov     ebx, eax
.text:0040A39F                 jz      short loc_40A3C8
.text:0040A3A1                 mov     edx, eax
.text:0040A3A3                 mov     ecx, eax
.text:0040A3A5                 lea     esi, [esi+0]
.text:0040A3A9                 lea     edi, [edi+0]
.text:0040A3B0
.text:0040A3B0 loc_40A3B0:                             ; CODE XREF: .text:0040A3C6↓j
.text:0040A3B0                 movzx   eax, byte ptr [edx]
.text:0040A3B3                 cmp     al, 5Ch ; '\'
.text:0040A3B5                 jz      loc_40A664
.text:0040A3BB
.text:0040A3BB loc_40A3BB:                             ; CODE XREF: .text:0040A66C↓j
.text:0040A3BB                                         ; .text:0040A67A↓j ...
.text:0040A3BB                 mov     [ecx], al
.text:0040A3BD
.text:0040A3BD loc_40A3BD:                             ; CODE XREF: .text:0040A68E↓j
.text:0040A3BD                 inc     ecx
.text:0040A3BE
.text:0040A3BE loc_40A3BE:                             ; CODE XREF: .text:0040A6A6↓j
.text:0040A3BE                 movzx   eax, byte ptr [edx]
.text:0040A3C1                 mov     esi, ebx
.text:0040A3C3                 inc     edx
.text:0040A3C4                 test    al, al
.text:0040A3C6                 jnz     short loc_40A3B0
.text:0040A3C8
.text:0040A3C8 loc_40A3C8:                             ; CODE XREF: .text:0040A39F↑j
.text:0040A3C8                 mov     [edi], esi
.text:0040A3CA                 mov     eax, [esp+1Ch]
.text:0040A3CE                 test    eax, eax
.text:0040A3D0                 jnz     loc_40A64B
.text:0040A3D6
.text:0040A3D6 loc_40A3D6:                             ; CODE XREF: .text:0040A65F↓j
.text:0040A3D6                 mov     dword ptr [esp+4], 40A28Ah
.text:0040A3DE                 mov     esi, offset loc_40A28D
.text:0040A3E3                 mov     [esp], ebp
.text:0040A3E6                 call    sub_40B2B0
.text:0040A3EB                 test    eax, eax
.text:0040A3ED                 mov     ebx, eax
.text:0040A3EF                 jz      short loc_40A418
.text:0040A3F1                 mov     edx, eax
.text:0040A3F3                 mov     ecx, eax
.text:0040A3F5                 lea     esi, [esi+0]
.text:0040A3F9                 lea     edi, [edi+0]
.text:0040A400
.text:0040A400 loc_40A400:                             ; CODE XREF: .text:0040A416↓j
.text:0040A400                 movzx   eax, byte ptr [edx]
.text:0040A403                 cmp     al, 5Ch ; '\'
.text:0040A405                 jz      loc_40A5F3
.text:0040A40B
.text:0040A40B loc_40A40B:                             ; CODE XREF: .text:0040A5FB↓j
.text:0040A40B                                         ; .text:0040A609↓j ...
.text:0040A40B                 mov     [ecx], al
.text:0040A40D
.text:0040A40D loc_40A40D:                             ; CODE XREF: .text:0040A61D↓j
.text:0040A40D                 inc     ecx
.text:0040A40E
.text:0040A40E loc_40A40E:                             ; CODE XREF: .text:0040A635↓j
.text:0040A40E                 movzx   eax, byte ptr [edx]
.text:0040A411                 mov     esi, ebx
.text:0040A413                 inc     edx
.text:0040A414                 test    al, al
.text:0040A416                 jnz     short loc_40A400
.text:0040A418
.text:0040A418 loc_40A418:                             ; CODE XREF: .text:0040A3EF↑j
.text:0040A418                 mov     [edi+4], esi
.text:0040A41B                 mov     eax, [esp+1Ch]
.text:0040A41F                 test    eax, eax
.text:0040A421                 jnz     loc_40A5DA
.text:0040A427
.text:0040A427 loc_40A427:                             ; CODE XREF: .text:0040A5EE↓j
.text:0040A427                 mov     dword ptr [esp+4], 40A28Ah
.text:0040A42F                 mov     esi, offset loc_40A28D
.text:0040A434                 mov     [esp], ebp
.text:0040A437                 call    sub_40B2B0
.text:0040A43C                 test    eax, eax
.text:0040A43E                 mov     ebx, eax
.text:0040A440                 jz      short loc_40A468
.text:0040A442                 mov     edx, eax
.text:0040A444                 mov     ecx, eax
.text:0040A446                 lea     esi, [esi+0]
.text:0040A449                 lea     edi, [edi+0]
.text:0040A450
.text:0040A450 loc_40A450:                             ; CODE XREF: .text:0040A466↓j
.text:0040A450                 movzx   eax, byte ptr [edx]
.text:0040A453                 cmp     al, 5Ch ; '\'
.text:0040A455                 jz      loc_40A582
.text:0040A45B
.text:0040A45B loc_40A45B:                             ; CODE XREF: .text:0040A58A↓j
.text:0040A45B                                         ; .text:0040A598↓j ...
.text:0040A45B                 mov     [ecx], al
.text:0040A45D
.text:0040A45D loc_40A45D:                             ; CODE XREF: .text:0040A5AC↓j
.text:0040A45D                 inc     ecx
.text:0040A45E
.text:0040A45E loc_40A45E:                             ; CODE XREF: .text:0040A5C4↓j
.text:0040A45E                 movzx   eax, byte ptr [edx]
.text:0040A461                 mov     esi, ebx
.text:0040A463                 inc     edx
.text:0040A464                 test    al, al
.text:0040A466                 jnz     short loc_40A450
.text:0040A468
.text:0040A468 loc_40A468:                             ; CODE XREF: .text:0040A440↑j
.text:0040A468                 mov     [edi+8], esi
.text:0040A46B                 mov     eax, [esp+1Ch]
.text:0040A46F                 test    eax, eax
.text:0040A471                 jnz     loc_40A569
.text:0040A477
.text:0040A477 loc_40A477:                             ; CODE XREF: .text:0040A57D↓j
.text:0040A477                 mov     dword ptr [esp+4], 40A28Ah
.text:0040A47F                 mov     esi, offset loc_40A28D
.text:0040A484                 mov     [esp], ebp
.text:0040A487                 call    sub_40B2B0
.text:0040A48C                 test    eax, eax
.text:0040A48E                 mov     ebx, eax
.text:0040A490                 jz      short loc_40A4B4
.text:0040A492                 mov     edx, eax
.text:0040A494                 mov     ecx, eax
.text:0040A496                 lea     esi, [esi+0]
.text:0040A499                 lea     edi, [edi+0]
.text:0040A4A0
.text:0040A4A0 loc_40A4A0:                             ; CODE XREF: .text:0040A4B2↓j
.text:0040A4A0                 movzx   eax, byte ptr [edx]
.text:0040A4A3                 cmp     al, 5Ch ; '\'
.text:0040A4A5                 jz      short loc_40A515
.text:0040A4A7
.text:0040A4A7 loc_40A4A7:                             ; CODE XREF: .text:0040A51D↓j
.text:0040A4A7                                         ; .text:0040A527↓j ...
.text:0040A4A7                 mov     [ecx], al
.text:0040A4A9
.text:0040A4A9 loc_40A4A9:                             ; CODE XREF: .text:0040A53B↓j
.text:0040A4A9                 inc     ecx
.text:0040A4AA
.text:0040A4AA loc_40A4AA:                             ; CODE XREF: .text:0040A553↓j
.text:0040A4AA                 movzx   eax, byte ptr [edx]
.text:0040A4AD                 mov     esi, ebx
.text:0040A4AF                 inc     edx
.text:0040A4B0                 test    al, al
.text:0040A4B2                 jnz     short loc_40A4A0
.text:0040A4B4
.text:0040A4B4 loc_40A4B4:                             ; CODE XREF: .text:0040A490↑j
.text:0040A4B4                 mov     [edi+0Ch], esi
.text:0040A4B7                 xor     eax, eax
.text:0040A4B9                 mov     edx, [esp+1Ch]
.text:0040A4BD                 test    edx, edx
.text:0040A4BF                 jnz     short loc_40A4F5
.text:0040A4C1
.text:0040A4C1 loc_40A4C1:                             ; CODE XREF: .text:0040A513↓j
.text:0040A4C1                 cmp     eax, 1
.text:0040A4C4                 jz      short loc_40A4EC
.text:0040A4C6                 cmp     eax, 1
.text:0040A4C9                 jle     short loc_40A4E1
.text:0040A4CB
.text:0040A4CB loc_40A4CB:                             ; CODE XREF: .text:0040A4E3↓j
.text:0040A4CB                                         ; .text:0040A4F3↓j
.text:0040A4CB                 mov     edx, [esp+160h]
.text:0040A4D2                 mov     [esp], edx
.text:0040A4D5                 call    sub_40B250
.text:0040A4DA                 mov     eax, edi
.text:0040A4DC                 jmp     loc_40A31A
.text:0040A4E1 ; ---------------------------------------------------------------------------
.text:0040A4E1
.text:0040A4E1 loc_40A4E1:                             ; CODE XREF: .text:0040A4C9↑j
.text:0040A4E1                 test    eax, eax
.text:0040A4E3                 jnz     short loc_40A4CB
.text:0040A4E5                 mov     dword ptr [edi+10h], 0
.text:0040A4EC
.text:0040A4EC loc_40A4EC:                             ; CODE XREF: .text:0040A4C4↑j
.text:0040A4EC                 mov     dword ptr [edi+14h], 0
.text:0040A4F3                 jmp     short loc_40A4CB
.text:0040A4F5 ; ---------------------------------------------------------------------------
.text:0040A4F5
.text:0040A4F5 loc_40A4F5:                             ; CODE XREF: .text:0040A4BF↑j
.text:0040A4F5                 mov     dword ptr [esp+4], 40A28Eh
.text:0040A4FD                 lea     esi, [edi+14h]
.text:0040A500                 lea     ebp, [edi+10h]
.text:0040A503                 mov     [esp+0Ch], esi
.text:0040A507                 mov     [esp+8], ebp
.text:0040A50B                 mov     [esp], edx
.text:0040A50E                 call    sscanf
.text:0040A513                 jmp     short loc_40A4C1
.text:0040A515 ; ---------------------------------------------------------------------------
.text:0040A515
.text:0040A515 loc_40A515:                             ; CODE XREF: .text:0040A4A5↑j
.text:0040A515                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A519                 jz      short loc_40A558
.text:0040A51B
.text:0040A51B loc_40A51B:                             ; CODE XREF: .text:0040A55C↓j
.text:0040A51B                                         ; .text:0040A562↓j
.text:0040A51B                 cmp     al, 5Ch ; '\'
.text:0040A51D                 jnz     short loc_40A4A7
.text:0040A51F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A523                 jz      short loc_40A540
.text:0040A525
.text:0040A525 loc_40A525:                             ; CODE XREF: .text:0040A544↓j
.text:0040A525                                         ; .text:0040A54A↓j
.text:0040A525                 cmp     al, 5Ch ; '\'
.text:0040A527                 jnz     loc_40A4A7
.text:0040A52D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040A531                 jnz     loc_40A4A7
.text:0040A537                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040A53A                 inc     edx
.text:0040A53B                 jmp     loc_40A4A9
.text:0040A540 ; ---------------------------------------------------------------------------
.text:0040A540
.text:0040A540 loc_40A540:                             ; CODE XREF: .text:0040A523↑j
.text:0040A540                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040A544                 jnz     short loc_40A525
.text:0040A546                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040A54A                 jnz     short loc_40A525
.text:0040A54C                 mov     byte ptr [ecx], 9
.text:0040A54F
.text:0040A54F loc_40A54F:                             ; CODE XREF: .text:0040A567↓j
.text:0040A54F                 inc     ecx
.text:0040A550                 add     edx, 3
.text:0040A553                 jmp     loc_40A4AA
.text:0040A558 ; ---------------------------------------------------------------------------
.text:0040A558
.text:0040A558 loc_40A558:                             ; CODE XREF: .text:0040A519↑j
.text:0040A558                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040A55C                 jnz     short loc_40A51B
.text:0040A55E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040A562                 jnz     short loc_40A51B
.text:0040A564                 mov     byte ptr [ecx], 20h ; ' '
.text:0040A567                 jmp     short loc_40A54F
.text:0040A569 ; ---------------------------------------------------------------------------
.text:0040A569
.text:0040A569 loc_40A569:                             ; CODE XREF: .text:0040A471↑j
.text:0040A569                 mov     dword ptr [esp+4], 40A28Ah
.text:0040A571                 mov     [esp], eax
.text:0040A574                 call    strspn
.text:0040A579                 add     [esp+1Ch], eax
.text:0040A57D                 jmp     loc_40A477
.text:0040A582 ; ---------------------------------------------------------------------------
.text:0040A582
.text:0040A582 loc_40A582:                             ; CODE XREF: .text:0040A455↑j
.text:0040A582                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A586                 jz      short loc_40A5C9
.text:0040A588
.text:0040A588 loc_40A588:                             ; CODE XREF: .text:0040A5CD↓j
.text:0040A588                                         ; .text:0040A5D3↓j
.text:0040A588                 cmp     al, 5Ch ; '\'
.text:0040A58A                 jnz     loc_40A45B
.text:0040A590                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A594                 jz      short loc_40A5B1
.text:0040A596
.text:0040A596 loc_40A596:                             ; CODE XREF: .text:0040A5B5↓j
.text:0040A596                                         ; .text:0040A5BB↓j
.text:0040A596                 cmp     al, 5Ch ; '\'
.text:0040A598                 jnz     loc_40A45B
.text:0040A59E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040A5A2                 jnz     loc_40A45B
.text:0040A5A8                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040A5AB                 inc     edx
.text:0040A5AC                 jmp     loc_40A45D
.text:0040A5B1 ; ---------------------------------------------------------------------------
.text:0040A5B1
.text:0040A5B1 loc_40A5B1:                             ; CODE XREF: .text:0040A594↑j
.text:0040A5B1                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040A5B5                 jnz     short loc_40A596
.text:0040A5B7                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040A5BB                 jnz     short loc_40A596
.text:0040A5BD                 mov     byte ptr [ecx], 9
.text:0040A5C0
.text:0040A5C0 loc_40A5C0:                             ; CODE XREF: .text:0040A5D8↓j
.text:0040A5C0                 inc     ecx
.text:0040A5C1                 add     edx, 3
.text:0040A5C4                 jmp     loc_40A45E
.text:0040A5C9 ; ---------------------------------------------------------------------------
.text:0040A5C9
.text:0040A5C9 loc_40A5C9:                             ; CODE XREF: .text:0040A586↑j
.text:0040A5C9                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040A5CD                 jnz     short loc_40A588
.text:0040A5CF                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040A5D3                 jnz     short loc_40A588
.text:0040A5D5                 mov     byte ptr [ecx], 20h ; ' '
.text:0040A5D8                 jmp     short loc_40A5C0
.text:0040A5DA ; ---------------------------------------------------------------------------
.text:0040A5DA
.text:0040A5DA loc_40A5DA:                             ; CODE XREF: .text:0040A421↑j
.text:0040A5DA                 mov     dword ptr [esp+4], 40A28Ah
.text:0040A5E2                 mov     [esp], eax
.text:0040A5E5                 call    strspn
.text:0040A5EA                 add     [esp+1Ch], eax
.text:0040A5EE                 jmp     loc_40A427
.text:0040A5F3 ; ---------------------------------------------------------------------------
.text:0040A5F3
.text:0040A5F3 loc_40A5F3:                             ; CODE XREF: .text:0040A405↑j
.text:0040A5F3                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A5F7                 jz      short loc_40A63A
.text:0040A5F9
.text:0040A5F9 loc_40A5F9:                             ; CODE XREF: .text:0040A63E↓j
.text:0040A5F9                                         ; .text:0040A644↓j
.text:0040A5F9                 cmp     al, 5Ch ; '\'
.text:0040A5FB                 jnz     loc_40A40B
.text:0040A601                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A605                 jz      short loc_40A622
.text:0040A607
.text:0040A607 loc_40A607:                             ; CODE XREF: .text:0040A626↓j
.text:0040A607                                         ; .text:0040A62C↓j
.text:0040A607                 cmp     al, 5Ch ; '\'
.text:0040A609                 jnz     loc_40A40B
.text:0040A60F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040A613                 jnz     loc_40A40B
.text:0040A619                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040A61C                 inc     edx
.text:0040A61D                 jmp     loc_40A40D
.text:0040A622 ; ---------------------------------------------------------------------------
.text:0040A622
.text:0040A622 loc_40A622:                             ; CODE XREF: .text:0040A605↑j
.text:0040A622                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040A626                 jnz     short loc_40A607
.text:0040A628                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040A62C                 jnz     short loc_40A607
.text:0040A62E                 mov     byte ptr [ecx], 9
.text:0040A631
.text:0040A631 loc_40A631:                             ; CODE XREF: .text:0040A649↓j
.text:0040A631                 inc     ecx
.text:0040A632                 add     edx, 3
.text:0040A635                 jmp     loc_40A40E
.text:0040A63A ; ---------------------------------------------------------------------------
.text:0040A63A
.text:0040A63A loc_40A63A:                             ; CODE XREF: .text:0040A5F7↑j
.text:0040A63A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040A63E                 jnz     short loc_40A5F9
.text:0040A640                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040A644                 jnz     short loc_40A5F9
.text:0040A646                 mov     byte ptr [ecx], 20h ; ' '
.text:0040A649                 jmp     short loc_40A631
.text:0040A64B ; ---------------------------------------------------------------------------
.text:0040A64B
.text:0040A64B loc_40A64B:                             ; CODE XREF: .text:0040A3D0↑j
.text:0040A64B                 mov     dword ptr [esp+4], 40A28Ah
.text:0040A653                 mov     [esp], eax
.text:0040A656                 call    strspn
.text:0040A65B                 add     [esp+1Ch], eax
.text:0040A65F                 jmp     loc_40A3D6
.text:0040A664 ; ---------------------------------------------------------------------------
.text:0040A664
.text:0040A664 loc_40A664:                             ; CODE XREF: .text:0040A3B5↑j
.text:0040A664                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A668                 jz      short loc_40A6AB
.text:0040A66A
.text:0040A66A loc_40A66A:                             ; CODE XREF: .text:0040A6AF↓j
.text:0040A66A                                         ; .text:0040A6B5↓j
.text:0040A66A                 cmp     al, 5Ch ; '\'
.text:0040A66C                 jnz     loc_40A3BB
.text:0040A672                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A676                 jz      short loc_40A693
.text:0040A678
.text:0040A678 loc_40A678:                             ; CODE XREF: .text:0040A697↓j
.text:0040A678                                         ; .text:0040A69D↓j
.text:0040A678                 cmp     al, 5Ch ; '\'
.text:0040A67A                 jnz     loc_40A3BB
.text:0040A680                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040A684                 jnz     loc_40A3BB
.text:0040A68A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040A68D                 inc     edx
.text:0040A68E                 jmp     loc_40A3BD
.text:0040A693 ; ---------------------------------------------------------------------------
.text:0040A693
.text:0040A693 loc_40A693:                             ; CODE XREF: .text:0040A676↑j
.text:0040A693                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040A697                 jnz     short loc_40A678
.text:0040A699                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040A69D                 jnz     short loc_40A678
.text:0040A69F                 mov     byte ptr [ecx], 9
.text:0040A6A2
.text:0040A6A2 loc_40A6A2:                             ; CODE XREF: .text:0040A6BA↓j
.text:0040A6A2                 inc     ecx
.text:0040A6A3                 add     edx, 3
.text:0040A6A6                 jmp     loc_40A3BE
.text:0040A6AB ; ---------------------------------------------------------------------------
.text:0040A6AB
.text:0040A6AB loc_40A6AB:                             ; CODE XREF: .text:0040A668↑j
.text:0040A6AB                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040A6AF                 jnz     short loc_40A66A
.text:0040A6B1                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040A6B5                 jnz     short loc_40A66A
.text:0040A6B7                 mov     byte ptr [ecx], 20h ; ' '
.text:0040A6BA                 jmp     short loc_40A6A2
.text:0040A6BA ; ---------------------------------------------------------------------------
.text:0040A6BC                 align 10h
.text:0040A6C0
.text:0040A6C0 loc_40A6C0:                             ; CODE XREF: .text:0040A2D2↑j
.text:0040A6C0                 mov     dword ptr [esp+4], 0
.text:0040A6C8                 mov     dword ptr [esp], 0
.text:0040A6CF                 call    GetLogicalDriveStringsA
.text:0040A6D4                 sub     esp, 8
.text:0040A6D7                 mov     ebx, eax
.text:0040A6D9                 call    GetProcessHeap
.text:0040A6DE                 mov     [esp], eax
.text:0040A6E1                 mov     [esp+8], ebx
.text:0040A6E5                 mov     dword ptr [esp+4], 0
.text:0040A6ED                 call    HeapAlloc
.text:0040A6F2                 sub     esp, 0Ch
.text:0040A6F5                 mov     esi, eax
.text:0040A6F7                 mov     [esp+4], eax
.text:0040A6FB                 mov     [esp], ebx
.text:0040A6FE                 call    GetLogicalDriveStringsA
.text:0040A703                 mov     off_418084, esi ; "notset"
.text:0040A709                 sub     esp, 8
.text:0040A70C                 jmp     loc_40A2D8
.text:0040A70C ; ---------------------------------------------------------------------------
.text:0040A711 ; const char aSSSSDD[]
.text:0040A711 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040A711                                         ; DATA XREF: .text:0040A850↓o
.text:0040A711                                         ; ___addmntentstr+F0↓o
.text:0040A724                 align 10h
.text:0040A730                 push    esi
.text:0040A731                 push    ebx
.text:0040A732                 sub     esp, 44h
.text:0040A735                 mov     ebx, [esp+54h]
.text:0040A739                 mov     esi, [esp+50h]
.text:0040A73D                 mov     edx, [ebx]
.text:0040A73F                 mov     [esp+20h], edx
.text:0040A743                 mov     ecx, [ebx+4]
.text:0040A746                 mov     [esp+24h], ecx
.text:0040A74A                 mov     edx, [ebx+8]
.text:0040A74D                 mov     [esp+28h], edx
.text:0040A751                 mov     ecx, [ebx+0Ch]
.text:0040A754                 mov     [esp+2Ch], ecx
.text:0040A758                 mov     edx, [ebx+10h]
.text:0040A75B                 mov     [esp+30h], edx
.text:0040A75F                 mov     ecx, [ebx+14h]
.text:0040A762                 mov     dword ptr [esp+8], 2
.text:0040A76A                 mov     dword ptr [esp+4], 0
.text:0040A772                 mov     [esp+34h], ecx
.text:0040A776                 mov     [esp], esi
.text:0040A779                 call    sub_40B240
.text:0040A77E ; ---------------------------------------------------------------------------
.text:0040A77E                 test    eax, eax
.text:0040A780                 mov     edx, 1
.text:0040A785                 jnz     loc_40A885
.text:0040A78B                 mov     ebx, [esp+20h]
.text:0040A78F                 mov     edx, ebx
.text:0040A791                 movzx   eax, byte ptr [ebx]
.text:0040A794                 test    al, al
.text:0040A796                 jz      short loc_40A7C0
.text:0040A798                 nop
.text:0040A799                 lea     esi, [esi+0]
.text:0040A7A0
.text:0040A7A0 loc_40A7A0:                             ; CODE XREF: .text:0040A7BE↓j
.text:0040A7A0                 cmp     al, 20h ; ' '
.text:0040A7A2                 jz      loc_40A9FA
.text:0040A7A8                 cmp     al, 9
.text:0040A7AA                 jz      loc_40A9FA
.text:0040A7B0                 cmp     al, 5Ch ; '\'
.text:0040A7B2                 jz      loc_40A9FA
.text:0040A7B8                 inc     ebx
.text:0040A7B9                 movzx   eax, byte ptr [ebx]
.text:0040A7BC                 test    al, al
.text:0040A7BE                 jnz     short loc_40A7A0
.text:0040A7C0
.text:0040A7C0 loc_40A7C0:                             ; CODE XREF: .text:0040A796↑j
.text:0040A7C0                                         ; .text:0040A9FC↓j ...
.text:0040A7C0                 mov     ebx, [esp+24h]
.text:0040A7C4                 mov     edx, ebx
.text:0040A7C6                 movzx   eax, byte ptr [ebx]
.text:0040A7C9                 test    al, al
.text:0040A7CB                 jz      short loc_40A7F0
.text:0040A7CD                 lea     esi, [esi+0]
.text:0040A7D0
.text:0040A7D0 loc_40A7D0:                             ; CODE XREF: .text:0040A7EE↓j
.text:0040A7D0                 cmp     al, 20h ; ' '
.text:0040A7D2                 jz      loc_40A97A
.text:0040A7D8                 cmp     al, 9
.text:0040A7DA                 jz      loc_40A97A
.text:0040A7E0                 cmp     al, 5Ch ; '\'
.text:0040A7E2                 jz      loc_40A97A
.text:0040A7E8                 inc     ebx
.text:0040A7E9                 movzx   eax, byte ptr [ebx]
.text:0040A7EC                 test    al, al
.text:0040A7EE                 jnz     short loc_40A7D0
.text:0040A7F0
.text:0040A7F0 loc_40A7F0:                             ; CODE XREF: .text:0040A7CB↑j
.text:0040A7F0                                         ; .text:0040A97C↓j ...
.text:0040A7F0                 mov     ebx, [esp+28h]
.text:0040A7F4                 mov     edx, ebx
.text:0040A7F6                 movzx   eax, byte ptr [ebx]
.text:0040A7F9                 test    al, al
.text:0040A7FB                 jz      short loc_40A820
.text:0040A7FD                 lea     esi, [esi+0]
.text:0040A800
.text:0040A800 loc_40A800:                             ; CODE XREF: .text:0040A81E↓j
.text:0040A800                 cmp     al, 20h ; ' '
.text:0040A802                 jz      loc_40A8FE
.text:0040A808                 cmp     al, 9
.text:0040A80A                 jz      loc_40A8FE
.text:0040A810                 cmp     al, 5Ch ; '\'
.text:0040A812                 jz      loc_40A8FE
.text:0040A818                 inc     ebx
.text:0040A819                 movzx   eax, byte ptr [ebx]
.text:0040A81C                 test    al, al
.text:0040A81E                 jnz     short loc_40A800
.text:0040A820
.text:0040A820 loc_40A820:                             ; CODE XREF: .text:0040A7FB↑j
.text:0040A820                                         ; .text:0040A900↓j ...
.text:0040A820                 mov     edx, [esp+2Ch]
.text:0040A824                 mov     ebx, edx
.text:0040A826                 movzx   eax, byte ptr [edx]
.text:0040A829                 test    al, al
.text:0040A82B                 jz      short loc_40A844
.text:0040A82D                 lea     esi, [esi+0]
.text:0040A830
.text:0040A830 loc_40A830:                             ; CODE XREF: .text:0040A842↓j
.text:0040A830                 cmp     al, 20h ; ' '
.text:0040A832                 jz      short loc_40A88D
.text:0040A834                 cmp     al, 9
.text:0040A836                 jz      short loc_40A88D
.text:0040A838                 cmp     al, 5Ch ; '\'
.text:0040A83A                 jz      short loc_40A88D
.text:0040A83C                 inc     ebx
.text:0040A83D                 movzx   eax, byte ptr [ebx]
.text:0040A840                 test    al, al
.text:0040A842                 jnz     short loc_40A830
.text:0040A844
.text:0040A844 loc_40A844:                             ; CODE XREF: .text:0040A82B↑j
.text:0040A844                                         ; .text:0040A88F↓j ...
.text:0040A844                 mov     [esp+14h], edx
.text:0040A848                 mov     ecx, [esp+34h]
.text:0040A84C                 mov     ebx, [esp+30h]
.text:0040A850                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040A858                 mov     edx, [esp+24h]
.text:0040A85C                 mov     [esp+1Ch], ecx
.text:0040A860                 mov     ecx, [esp+28h]
.text:0040A864                 mov     [esp+18h], ebx
.text:0040A868                 mov     ebx, [esp+20h]
.text:0040A86C                 mov     [esp+0Ch], edx
.text:0040A870                 mov     [esp+10h], ecx
.text:0040A874                 mov     [esp+8], ebx
.text:0040A878                 mov     [esp], esi
.text:0040A87B                 call    fprintf
.text:0040A880                 mov     edx, eax
.text:0040A882                 shr     edx, 1Fh
.text:0040A885
.text:0040A885 loc_40A885:                             ; CODE XREF: .text:0040A785↑j
.text:0040A885                 add     esp, 44h
.text:0040A888                 mov     eax, edx
.text:0040A88A                 pop     ebx
.text:0040A88B                 pop     esi
.text:0040A88C                 retn
.text:0040A88D ; ---------------------------------------------------------------------------
.text:0040A88D
.text:0040A88D loc_40A88D:                             ; CODE XREF: .text:0040A832↑j
.text:0040A88D                                         ; .text:0040A836↑j ...
.text:0040A88D                 test    al, al
.text:0040A88F                 jz      short loc_40A844
.text:0040A891                 mov     [esp], edx
.text:0040A894                 mov     ebx, edx
.text:0040A896                 call    strlen
.text:0040A89B                 lea     edx, ds:1[eax*4]
.text:0040A8A2                 mov     [esp], edx
.text:0040A8A5                 call    malloc
.text:0040A8AA                 mov     [esp+2Ch], eax
.text:0040A8AE                 mov     edx, eax
.text:0040A8B0
.text:0040A8B0 loc_40A8B0:                             ; CODE XREF: .text:0040A8C8↓j
.text:0040A8B0                 movzx   eax, byte ptr [ebx]
.text:0040A8B3                 cmp     al, 20h ; ' '
.text:0040A8B5                 jz      short loc_40A8ED
.text:0040A8B7                 cmp     al, 9
.text:0040A8B9                 jz      short loc_40A8DC
.text:0040A8BB                 cmp     al, 5Ch ; '\'
.text:0040A8BD                 jz      short loc_40A8D3
.text:0040A8BF                 mov     [edx], al
.text:0040A8C1
.text:0040A8C1 loc_40A8C1:                             ; CODE XREF: .text:0040A8DA↓j
.text:0040A8C1                                         ; .text:0040A8EB↓j ...
.text:0040A8C1                 movzx   ecx, byte ptr [ebx]
.text:0040A8C4                 inc     edx
.text:0040A8C5                 inc     ebx
.text:0040A8C6                 test    cl, cl
.text:0040A8C8                 jnz     short loc_40A8B0
.text:0040A8CA                 mov     edx, [esp+2Ch]
.text:0040A8CE                 jmp     loc_40A844
.text:0040A8D3 ; ---------------------------------------------------------------------------
.text:0040A8D3
.text:0040A8D3 loc_40A8D3:                             ; CODE XREF: .text:0040A8BD↑j
.text:0040A8D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A8D6                 inc     edx
.text:0040A8D7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A8DA                 jmp     short loc_40A8C1
.text:0040A8DC ; ---------------------------------------------------------------------------
.text:0040A8DC
.text:0040A8DC loc_40A8DC:                             ; CODE XREF: .text:0040A8B9↑j
.text:0040A8DC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A8DF                 inc     edx
.text:0040A8E0                 mov     byte ptr [edx], 30h ; '0'
.text:0040A8E3                 inc     edx
.text:0040A8E4                 mov     byte ptr [edx], 31h ; '1'
.text:0040A8E7                 inc     edx
.text:0040A8E8                 mov     byte ptr [edx], 32h ; '2'
.text:0040A8EB                 jmp     short loc_40A8C1
.text:0040A8ED ; ---------------------------------------------------------------------------
.text:0040A8ED
.text:0040A8ED loc_40A8ED:                             ; CODE XREF: .text:0040A8B5↑j
.text:0040A8ED                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A8F0                 inc     edx
.text:0040A8F1                 mov     byte ptr [edx], 30h ; '0'
.text:0040A8F4                 inc     edx
.text:0040A8F5                 mov     byte ptr [edx], 34h ; '4'
.text:0040A8F8                 inc     edx
.text:0040A8F9                 mov     byte ptr [edx], 30h ; '0'
.text:0040A8FC                 jmp     short loc_40A8C1
.text:0040A8FE ; ---------------------------------------------------------------------------
.text:0040A8FE
.text:0040A8FE loc_40A8FE:                             ; CODE XREF: .text:0040A802↑j
.text:0040A8FE                                         ; .text:0040A80A↑j ...
.text:0040A8FE                 test    al, al
.text:0040A900                 jz      loc_40A820
.text:0040A906                 mov     [esp], edx
.text:0040A909                 mov     ebx, edx
.text:0040A90B                 call    strlen
.text:0040A910                 lea     edx, ds:1[eax*4]
.text:0040A917                 mov     [esp], edx
.text:0040A91A                 call    malloc
.text:0040A91F                 mov     [esp+28h], eax
.text:0040A923                 mov     edx, eax
.text:0040A925                 lea     esi, [esi+0]
.text:0040A929                 lea     edi, [edi+0]
.text:0040A930
.text:0040A930 loc_40A930:                             ; CODE XREF: .text:0040A948↓j
.text:0040A930                 movzx   eax, byte ptr [ebx]
.text:0040A933                 cmp     al, 20h ; ' '
.text:0040A935                 jz      short loc_40A969
.text:0040A937                 cmp     al, 9
.text:0040A939                 jz      short loc_40A958
.text:0040A93B                 cmp     al, 5Ch ; '\'
.text:0040A93D                 jz      short loc_40A94F
.text:0040A93F                 mov     [edx], al
.text:0040A941
.text:0040A941 loc_40A941:                             ; CODE XREF: .text:0040A956↓j
.text:0040A941                                         ; .text:0040A967↓j ...
.text:0040A941                 movzx   ecx, byte ptr [ebx]
.text:0040A944                 inc     edx
.text:0040A945                 inc     ebx
.text:0040A946                 test    cl, cl
.text:0040A948                 jnz     short loc_40A930
.text:0040A94A                 jmp     loc_40A820
.text:0040A94F ; ---------------------------------------------------------------------------
.text:0040A94F
.text:0040A94F loc_40A94F:                             ; CODE XREF: .text:0040A93D↑j
.text:0040A94F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A952                 inc     edx
.text:0040A953                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A956                 jmp     short loc_40A941
.text:0040A958 ; ---------------------------------------------------------------------------
.text:0040A958
.text:0040A958 loc_40A958:                             ; CODE XREF: .text:0040A939↑j
.text:0040A958                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A95B                 inc     edx
.text:0040A95C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A95F                 inc     edx
.text:0040A960                 mov     byte ptr [edx], 31h ; '1'
.text:0040A963                 inc     edx
.text:0040A964                 mov     byte ptr [edx], 32h ; '2'
.text:0040A967                 jmp     short loc_40A941
.text:0040A969 ; ---------------------------------------------------------------------------
.text:0040A969
.text:0040A969 loc_40A969:                             ; CODE XREF: .text:0040A935↑j
.text:0040A969                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A96C                 inc     edx
.text:0040A96D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A970                 inc     edx
.text:0040A971                 mov     byte ptr [edx], 34h ; '4'
.text:0040A974                 inc     edx
.text:0040A975                 mov     byte ptr [edx], 30h ; '0'
.text:0040A978                 jmp     short loc_40A941
.text:0040A97A ; ---------------------------------------------------------------------------
.text:0040A97A
.text:0040A97A loc_40A97A:                             ; CODE XREF: .text:0040A7D2↑j
.text:0040A97A                                         ; .text:0040A7DA↑j ...
.text:0040A97A                 test    al, al
.text:0040A97C                 jz      loc_40A7F0
.text:0040A982                 mov     [esp], edx
.text:0040A985                 mov     ebx, edx
.text:0040A987                 call    strlen
.text:0040A98C                 lea     edx, ds:1[eax*4]
.text:0040A993                 mov     [esp], edx
.text:0040A996                 call    malloc
.text:0040A99B                 mov     [esp+24h], eax
.text:0040A99F                 mov     edx, eax
.text:0040A9A1                 jmp     short loc_40A9B0
.text:0040A9A1 ; ---------------------------------------------------------------------------
.text:0040A9A3                 align 10h
.text:0040A9B0
.text:0040A9B0 loc_40A9B0:                             ; CODE XREF: .text:0040A9A1↑j
.text:0040A9B0                                         ; .text:0040A9C8↓j
.text:0040A9B0                 movzx   eax, byte ptr [ebx]
.text:0040A9B3                 cmp     al, 20h ; ' '
.text:0040A9B5                 jz      short loc_40A9E9
.text:0040A9B7                 cmp     al, 9
.text:0040A9B9                 jz      short loc_40A9D8
.text:0040A9BB                 cmp     al, 5Ch ; '\'
.text:0040A9BD                 jz      short loc_40A9CF
.text:0040A9BF                 mov     [edx], al
.text:0040A9C1
.text:0040A9C1 loc_40A9C1:                             ; CODE XREF: .text:0040A9D6↓j
.text:0040A9C1                                         ; .text:0040A9E7↓j ...
.text:0040A9C1                 movzx   ecx, byte ptr [ebx]
.text:0040A9C4                 inc     edx
.text:0040A9C5                 inc     ebx
.text:0040A9C6                 test    cl, cl
.text:0040A9C8                 jnz     short loc_40A9B0
.text:0040A9CA                 jmp     loc_40A7F0
.text:0040A9CF ; ---------------------------------------------------------------------------
.text:0040A9CF
.text:0040A9CF loc_40A9CF:                             ; CODE XREF: .text:0040A9BD↑j
.text:0040A9CF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A9D2                 inc     edx
.text:0040A9D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A9D6                 jmp     short loc_40A9C1
.text:0040A9D8 ; ---------------------------------------------------------------------------
.text:0040A9D8
.text:0040A9D8 loc_40A9D8:                             ; CODE XREF: .text:0040A9B9↑j
.text:0040A9D8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A9DB                 inc     edx
.text:0040A9DC                 mov     byte ptr [edx], 30h ; '0'
.text:0040A9DF                 inc     edx
.text:0040A9E0                 mov     byte ptr [edx], 31h ; '1'
.text:0040A9E3                 inc     edx
.text:0040A9E4                 mov     byte ptr [edx], 32h ; '2'
.text:0040A9E7                 jmp     short loc_40A9C1
.text:0040A9E9 ; ---------------------------------------------------------------------------
.text:0040A9E9
.text:0040A9E9 loc_40A9E9:                             ; CODE XREF: .text:0040A9B5↑j
.text:0040A9E9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A9EC                 inc     edx
.text:0040A9ED                 mov     byte ptr [edx], 30h ; '0'
.text:0040A9F0                 inc     edx
.text:0040A9F1                 mov     byte ptr [edx], 34h ; '4'
.text:0040A9F4                 inc     edx
.text:0040A9F5                 mov     byte ptr [edx], 30h ; '0'
.text:0040A9F8                 jmp     short loc_40A9C1
.text:0040A9FA ; ---------------------------------------------------------------------------
.text:0040A9FA
.text:0040A9FA loc_40A9FA:                             ; CODE XREF: .text:0040A7A2↑j
.text:0040A9FA                                         ; .text:0040A7AA↑j ...
.text:0040A9FA                 test    al, al
.text:0040A9FC                 jz      loc_40A7C0
.text:0040AA02                 mov     [esp], edx
.text:0040AA05                 mov     ebx, edx
.text:0040AA07                 call    strlen
.text:0040AA0C                 lea     ecx, ds:1[eax*4]
.text:0040AA13                 mov     [esp], ecx
.text:0040AA16                 call    malloc
.text:0040AA1B                 mov     [esp+20h], eax
.text:0040AA1F                 mov     edx, eax
.text:0040AA21                 jmp     short loc_40AA30
.text:0040AA21 ; ---------------------------------------------------------------------------
.text:0040AA23                 align 10h
.text:0040AA30
.text:0040AA30 loc_40AA30:                             ; CODE XREF: .text:0040AA21↑j
.text:0040AA30                                         ; .text:0040AA48↓j
.text:0040AA30                 movzx   eax, byte ptr [ebx]
.text:0040AA33                 cmp     al, 20h ; ' '
.text:0040AA35                 jz      short loc_40AA69
.text:0040AA37                 cmp     al, 9
.text:0040AA39                 jz      short loc_40AA58
.text:0040AA3B                 cmp     al, 5Ch ; '\'
.text:0040AA3D                 jz      short loc_40AA4F
.text:0040AA3F                 mov     [edx], al
.text:0040AA41
.text:0040AA41 loc_40AA41:                             ; CODE XREF: .text:0040AA56↓j
.text:0040AA41                                         ; .text:0040AA67↓j ...
.text:0040AA41                 movzx   ecx, byte ptr [ebx]
.text:0040AA44                 inc     edx
.text:0040AA45                 inc     ebx
.text:0040AA46                 test    cl, cl
.text:0040AA48                 jnz     short loc_40AA30
.text:0040AA4A                 jmp     loc_40A7C0
.text:0040AA4F ; ---------------------------------------------------------------------------
.text:0040AA4F
.text:0040AA4F loc_40AA4F:                             ; CODE XREF: .text:0040AA3D↑j
.text:0040AA4F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AA52                 inc     edx
.text:0040AA53                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AA56                 jmp     short loc_40AA41
.text:0040AA58 ; ---------------------------------------------------------------------------
.text:0040AA58
.text:0040AA58 loc_40AA58:                             ; CODE XREF: .text:0040AA39↑j
.text:0040AA58                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AA5B                 inc     edx
.text:0040AA5C                 mov     byte ptr [edx], 30h ; '0'
.text:0040AA5F                 inc     edx
.text:0040AA60                 mov     byte ptr [edx], 31h ; '1'
.text:0040AA63                 inc     edx
.text:0040AA64                 mov     byte ptr [edx], 32h ; '2'
.text:0040AA67                 jmp     short loc_40AA41
.text:0040AA69 ; ---------------------------------------------------------------------------
.text:0040AA69
.text:0040AA69 loc_40AA69:                             ; CODE XREF: .text:0040AA35↑j
.text:0040AA69                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AA6C                 inc     edx
.text:0040AA6D                 mov     byte ptr [edx], 30h ; '0'
.text:0040AA70                 inc     edx
.text:0040AA71                 mov     byte ptr [edx], 34h ; '4'
.text:0040AA74                 inc     edx
.text:0040AA75                 mov     byte ptr [edx], 30h ; '0'
.text:0040AA78                 jmp     short loc_40AA41
.text:0040AA78 ; ---------------------------------------------------------------------------
.text:0040AA7A                 align 10h
.text:0040AA80
.text:0040AA80 ; =============== S U B R O U T I N E =======================================
.text:0040AA80
.text:0040AA80 ; Attributes: info_from_lumina
.text:0040AA80
.text:0040AA80 ; int __cdecl __addmntentstr(char *, int)
.text:0040AA80 ___addmntentstr proc near               ; CODE XREF: .text:0040A34A↑p
.text:0040AA80
.text:0040AA80 Buffer          = dword ptr -4Ch
.text:0040AA80 Format          = dword ptr -48h
.text:0040AA80 var_44          = dword ptr -44h
.text:0040AA80 var_40          = dword ptr -40h
.text:0040AA80 var_3C          = dword ptr -3Ch
.text:0040AA80 var_38          = dword ptr -38h
.text:0040AA80 var_34          = dword ptr -34h
.text:0040AA80 var_30          = dword ptr -30h
.text:0040AA80 var_2C          = dword ptr -2Ch
.text:0040AA80 var_28          = dword ptr -28h
.text:0040AA80 var_24          = dword ptr -24h
.text:0040AA80 Str             = dword ptr -20h
.text:0040AA80 var_1C          = dword ptr -1Ch
.text:0040AA80 var_18          = dword ptr -18h
.text:0040AA80 arg_0           = dword ptr  4
.text:0040AA80 arg_4           = dword ptr  8
.text:0040AA80
.text:0040AA80                 push    ebx
.text:0040AA81                 sub     esp, 48h
.text:0040AA84                 mov     edx, [esp+4Ch+arg_4]
.text:0040AA88                 mov     ecx, [edx]
.text:0040AA8A                 mov     [esp+4Ch+var_2C], ecx
.text:0040AA8E                 mov     ebx, [edx+4]
.text:0040AA91                 mov     [esp+4Ch+var_28], ebx
.text:0040AA95                 mov     ebx, [edx+8]
.text:0040AA98                 mov     [esp+4Ch+var_24], ebx
.text:0040AA9C                 mov     ebx, [edx+0Ch]
.text:0040AA9F                 mov     [esp+4Ch+Str], ebx
.text:0040AAA3                 mov     ebx, [edx+10h]
.text:0040AAA6                 mov     [esp+4Ch+var_1C], ebx
.text:0040AAAA                 mov     ebx, [edx+14h]
.text:0040AAAD                 mov     [esp+4Ch+var_18], ebx
.text:0040AAB1                 mov     ebx, ecx
.text:0040AAB3                 movzx   eax, byte ptr [ecx]
.text:0040AAB6                 test    al, al
.text:0040AAB8                 jz      loc_40ADA1
.text:0040AABE                 mov     esi, esi
.text:0040AAC0
.text:0040AAC0 loc_40AAC0:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040AAC0                 cmp     al, 20h ; ' '
.text:0040AAC2                 jz      loc_40AD20
.text:0040AAC8                 cmp     al, 9
.text:0040AACA                 jz      loc_40AD20
.text:0040AAD0                 cmp     al, 5Ch ; '\'
.text:0040AAD2                 jz      loc_40AD20
.text:0040AAD8                 inc     ebx
.text:0040AAD9                 movzx   eax, byte ptr [ebx]
.text:0040AADC                 test    al, al
.text:0040AADE                 jnz     short loc_40AAC0
.text:0040AAE0
.text:0040AAE0 loc_40AAE0:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040AAE0                                         ; ___addmntentstr+2EA↓j
.text:0040AAE0                 mov     ebx, [esp+4Ch+var_28]
.text:0040AAE4                 mov     edx, ebx
.text:0040AAE6                 movzx   eax, byte ptr [ebx]
.text:0040AAE9                 test    al, al
.text:0040AAEB                 jz      short loc_40AB10
.text:0040AAED                 lea     esi, [esi+0]
.text:0040AAF0
.text:0040AAF0 loc_40AAF0:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040AAF0                 cmp     al, 20h ; ' '
.text:0040AAF2                 jz      loc_40AC9A
.text:0040AAF8                 cmp     al, 9
.text:0040AAFA                 jz      loc_40AC9A
.text:0040AB00                 cmp     al, 5Ch ; '\'
.text:0040AB02                 jz      loc_40AC9A
.text:0040AB08                 inc     ebx
.text:0040AB09                 movzx   eax, byte ptr [ebx]
.text:0040AB0C                 test    al, al
.text:0040AB0E                 jnz     short loc_40AAF0
.text:0040AB10
.text:0040AB10 loc_40AB10:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040AB10                                         ; ___addmntentstr+21C↓j ...
.text:0040AB10                 mov     ebx, [esp+4Ch+var_24]
.text:0040AB14                 mov     edx, ebx
.text:0040AB16                 movzx   eax, byte ptr [ebx]
.text:0040AB19                 test    al, al
.text:0040AB1B                 jz      short loc_40AB40
.text:0040AB1D                 lea     esi, [esi+0]
.text:0040AB20
.text:0040AB20 loc_40AB20:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040AB20                 cmp     al, 20h ; ' '
.text:0040AB22                 jz      loc_40AC1E
.text:0040AB28                 cmp     al, 9
.text:0040AB2A                 jz      loc_40AC1E
.text:0040AB30                 cmp     al, 5Ch ; '\'
.text:0040AB32                 jz      loc_40AC1E
.text:0040AB38                 inc     ebx
.text:0040AB39                 movzx   eax, byte ptr [ebx]
.text:0040AB3C                 test    al, al
.text:0040AB3E                 jnz     short loc_40AB20
.text:0040AB40
.text:0040AB40 loc_40AB40:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040AB40                                         ; ___addmntentstr+1A0↓j ...
.text:0040AB40                 mov     edx, [esp+4Ch+Str]
.text:0040AB44                 mov     ebx, edx
.text:0040AB46                 movzx   eax, byte ptr [edx]
.text:0040AB49                 test    al, al
.text:0040AB4B                 jz      short loc_40AB64
.text:0040AB4D                 lea     esi, [esi+0]
.text:0040AB50
.text:0040AB50 loc_40AB50:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040AB50                 cmp     al, 20h ; ' '
.text:0040AB52                 jz      short loc_40ABAC
.text:0040AB54                 cmp     al, 9
.text:0040AB56                 jz      short loc_40ABAC
.text:0040AB58                 cmp     al, 5Ch ; '\'
.text:0040AB5A                 jz      short loc_40ABAC
.text:0040AB5C                 inc     ebx
.text:0040AB5D                 movzx   eax, byte ptr [ebx]
.text:0040AB60                 test    al, al
.text:0040AB62                 jnz     short loc_40AB50
.text:0040AB64
.text:0040AB64 loc_40AB64:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040AB64                                         ; ___addmntentstr+12E↓j ...
.text:0040AB64                 mov     [esp+4Ch+var_38], edx
.text:0040AB68                 mov     ebx, [esp+4Ch+var_18]
.text:0040AB6C                 mov     ecx, [esp+4Ch+var_1C]
.text:0040AB70                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040AB78                 mov     edx, [esp+4Ch+var_2C]
.text:0040AB7C                 mov     [esp+4Ch+var_30], ebx
.text:0040AB80                 mov     ebx, [esp+4Ch+var_24]
.text:0040AB84                 mov     [esp+4Ch+var_34], ecx
.text:0040AB88                 mov     ecx, [esp+4Ch+var_28]
.text:0040AB8C                 mov     [esp+4Ch+var_3C], ebx
.text:0040AB90                 mov     ebx, [esp+4Ch+arg_0]
.text:0040AB94                 mov     [esp+4Ch+var_40], ecx
.text:0040AB98                 mov     [esp+4Ch+var_44], edx
.text:0040AB9C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040AB9F                 call    sprintf
.text:0040ABA4                 add     esp, 48h
.text:0040ABA7                 shr     eax, 1Fh
.text:0040ABAA                 pop     ebx
.text:0040ABAB                 retn
.text:0040ABAC ; ---------------------------------------------------------------------------
.text:0040ABAC
.text:0040ABAC loc_40ABAC:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040ABAC                                         ; ___addmntentstr+D6↑j ...
.text:0040ABAC                 test    al, al
.text:0040ABAE                 jz      short loc_40AB64
.text:0040ABB0                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040ABB3                 mov     ebx, edx
.text:0040ABB5                 call    strlen
.text:0040ABBA                 lea     edx, ds:1[eax*4]
.text:0040ABC1                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040ABC4                 call    malloc
.text:0040ABC9                 mov     [esp+4Ch+Str], eax
.text:0040ABCD                 mov     edx, eax
.text:0040ABCF                 nop
.text:0040ABD0
.text:0040ABD0 loc_40ABD0:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040ABD0                 movzx   eax, byte ptr [ebx]
.text:0040ABD3                 cmp     al, 20h ; ' '
.text:0040ABD5                 jz      short loc_40AC0D
.text:0040ABD7                 cmp     al, 9
.text:0040ABD9                 jz      short loc_40ABFC
.text:0040ABDB                 cmp     al, 5Ch ; '\'
.text:0040ABDD                 jz      short loc_40ABF3
.text:0040ABDF                 mov     [edx], al
.text:0040ABE1
.text:0040ABE1 loc_40ABE1:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040ABE1                                         ; ___addmntentstr+18B↓j ...
.text:0040ABE1                 movzx   ecx, byte ptr [ebx]
.text:0040ABE4                 inc     edx
.text:0040ABE5                 inc     ebx
.text:0040ABE6                 test    cl, cl
.text:0040ABE8                 jnz     short loc_40ABD0
.text:0040ABEA                 mov     edx, [esp+4Ch+Str]
.text:0040ABEE                 jmp     loc_40AB64
.text:0040ABF3 ; ---------------------------------------------------------------------------
.text:0040ABF3
.text:0040ABF3 loc_40ABF3:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040ABF3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040ABF6                 inc     edx
.text:0040ABF7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040ABFA                 jmp     short loc_40ABE1
.text:0040ABFC ; ---------------------------------------------------------------------------
.text:0040ABFC
.text:0040ABFC loc_40ABFC:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040ABFC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040ABFF                 inc     edx
.text:0040AC00                 mov     byte ptr [edx], 30h ; '0'
.text:0040AC03                 inc     edx
.text:0040AC04                 mov     byte ptr [edx], 31h ; '1'
.text:0040AC07                 inc     edx
.text:0040AC08                 mov     byte ptr [edx], 32h ; '2'
.text:0040AC0B                 jmp     short loc_40ABE1
.text:0040AC0D ; ---------------------------------------------------------------------------
.text:0040AC0D
.text:0040AC0D loc_40AC0D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040AC0D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AC10                 inc     edx
.text:0040AC11                 mov     byte ptr [edx], 30h ; '0'
.text:0040AC14                 inc     edx
.text:0040AC15                 mov     byte ptr [edx], 34h ; '4'
.text:0040AC18                 inc     edx
.text:0040AC19                 mov     byte ptr [edx], 30h ; '0'
.text:0040AC1C                 jmp     short loc_40ABE1
.text:0040AC1E ; ---------------------------------------------------------------------------
.text:0040AC1E
.text:0040AC1E loc_40AC1E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040AC1E                                         ; ___addmntentstr+AA↑j ...
.text:0040AC1E                 test    al, al
.text:0040AC20                 jz      loc_40AB40
.text:0040AC26                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040AC29                 mov     ebx, edx
.text:0040AC2B                 call    strlen
.text:0040AC30                 lea     edx, ds:1[eax*4]
.text:0040AC37                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040AC3A                 call    malloc
.text:0040AC3F                 mov     [esp+4Ch+var_24], eax
.text:0040AC43                 mov     edx, eax
.text:0040AC45                 lea     esi, [esi+0]
.text:0040AC49                 lea     edi, [edi+0]
.text:0040AC50
.text:0040AC50 loc_40AC50:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040AC50                 movzx   eax, byte ptr [ebx]
.text:0040AC53                 cmp     al, 20h ; ' '
.text:0040AC55                 jz      short loc_40AC89
.text:0040AC57                 cmp     al, 9
.text:0040AC59                 jz      short loc_40AC78
.text:0040AC5B                 cmp     al, 5Ch ; '\'
.text:0040AC5D                 jz      short loc_40AC6F
.text:0040AC5F                 mov     [edx], al
.text:0040AC61
.text:0040AC61 loc_40AC61:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040AC61                                         ; ___addmntentstr+207↓j ...
.text:0040AC61                 movzx   ecx, byte ptr [ebx]
.text:0040AC64                 inc     edx
.text:0040AC65                 inc     ebx
.text:0040AC66                 test    cl, cl
.text:0040AC68                 jnz     short loc_40AC50
.text:0040AC6A                 jmp     loc_40AB40
.text:0040AC6F ; ---------------------------------------------------------------------------
.text:0040AC6F
.text:0040AC6F loc_40AC6F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040AC6F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AC72                 inc     edx
.text:0040AC73                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AC76                 jmp     short loc_40AC61
.text:0040AC78 ; ---------------------------------------------------------------------------
.text:0040AC78
.text:0040AC78 loc_40AC78:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040AC78                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AC7B                 inc     edx
.text:0040AC7C                 mov     byte ptr [edx], 30h ; '0'
.text:0040AC7F                 inc     edx
.text:0040AC80                 mov     byte ptr [edx], 31h ; '1'
.text:0040AC83                 inc     edx
.text:0040AC84                 mov     byte ptr [edx], 32h ; '2'
.text:0040AC87                 jmp     short loc_40AC61
.text:0040AC89 ; ---------------------------------------------------------------------------
.text:0040AC89
.text:0040AC89 loc_40AC89:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040AC89                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AC8C                 inc     edx
.text:0040AC8D                 mov     byte ptr [edx], 30h ; '0'
.text:0040AC90                 inc     edx
.text:0040AC91                 mov     byte ptr [edx], 34h ; '4'
.text:0040AC94                 inc     edx
.text:0040AC95                 mov     byte ptr [edx], 30h ; '0'
.text:0040AC98                 jmp     short loc_40AC61
.text:0040AC9A ; ---------------------------------------------------------------------------
.text:0040AC9A
.text:0040AC9A loc_40AC9A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040AC9A                                         ; ___addmntentstr+7A↑j ...
.text:0040AC9A                 test    al, al
.text:0040AC9C                 jz      loc_40AB10
.text:0040ACA2                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040ACA5                 mov     ebx, edx
.text:0040ACA7                 call    strlen
.text:0040ACAC                 lea     edx, ds:1[eax*4]
.text:0040ACB3                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040ACB6                 call    malloc
.text:0040ACBB                 mov     [esp+4Ch+var_28], eax
.text:0040ACBF                 mov     edx, eax
.text:0040ACC1                 jmp     short loc_40ACD0
.text:0040ACC1 ; ---------------------------------------------------------------------------
.text:0040ACC3                 align 10h
.text:0040ACD0
.text:0040ACD0 loc_40ACD0:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040ACD0                                         ; ___addmntentstr+268↓j
.text:0040ACD0                 movzx   eax, byte ptr [ebx]
.text:0040ACD3                 cmp     al, 20h ; ' '
.text:0040ACD5                 jz      short loc_40AD09
.text:0040ACD7                 cmp     al, 9
.text:0040ACD9                 jz      short loc_40ACF8
.text:0040ACDB                 cmp     al, 5Ch ; '\'
.text:0040ACDD                 jz      short loc_40ACEF
.text:0040ACDF                 mov     [edx], al
.text:0040ACE1
.text:0040ACE1 loc_40ACE1:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040ACE1                                         ; ___addmntentstr+287↓j ...
.text:0040ACE1                 movzx   ecx, byte ptr [ebx]
.text:0040ACE4                 inc     edx
.text:0040ACE5                 inc     ebx
.text:0040ACE6                 test    cl, cl
.text:0040ACE8                 jnz     short loc_40ACD0
.text:0040ACEA                 jmp     loc_40AB10
.text:0040ACEF ; ---------------------------------------------------------------------------
.text:0040ACEF
.text:0040ACEF loc_40ACEF:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040ACEF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040ACF2                 inc     edx
.text:0040ACF3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040ACF6                 jmp     short loc_40ACE1
.text:0040ACF8 ; ---------------------------------------------------------------------------
.text:0040ACF8
.text:0040ACF8 loc_40ACF8:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040ACF8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040ACFB                 inc     edx
.text:0040ACFC                 mov     byte ptr [edx], 30h ; '0'
.text:0040ACFF                 inc     edx
.text:0040AD00                 mov     byte ptr [edx], 31h ; '1'
.text:0040AD03                 inc     edx
.text:0040AD04                 mov     byte ptr [edx], 32h ; '2'
.text:0040AD07                 jmp     short loc_40ACE1
.text:0040AD09 ; ---------------------------------------------------------------------------
.text:0040AD09
.text:0040AD09 loc_40AD09:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040AD09                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AD0C                 inc     edx
.text:0040AD0D                 mov     byte ptr [edx], 30h ; '0'
.text:0040AD10                 inc     edx
.text:0040AD11                 mov     byte ptr [edx], 34h ; '4'
.text:0040AD14                 inc     edx
.text:0040AD15                 mov     byte ptr [edx], 30h ; '0'
.text:0040AD18                 jmp     short loc_40ACE1
.text:0040AD18 ; ---------------------------------------------------------------------------
.text:0040AD1A                 align 10h
.text:0040AD20
.text:0040AD20 loc_40AD20:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040AD20                                         ; ___addmntentstr+4A↑j ...
.text:0040AD20                 test    al, al
.text:0040AD22                 jz      loc_40AAE0
.text:0040AD28                 mov     ebx, [esp+4Ch+var_2C]
.text:0040AD2C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040AD2F                 call    strlen
.text:0040AD34                 lea     edx, ds:1[eax*4]
.text:0040AD3B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040AD3E                 call    malloc
.text:0040AD43                 mov     [esp+4Ch+var_2C], eax
.text:0040AD47                 mov     edx, eax
.text:0040AD49                 lea     esi, [esi+0]
.text:0040AD50
.text:0040AD50 loc_40AD50:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040AD50                 movzx   eax, byte ptr [ebx]
.text:0040AD53                 cmp     al, 20h ; ' '
.text:0040AD55                 jz      short loc_40AD90
.text:0040AD57                 cmp     al, 9
.text:0040AD59                 jz      short loc_40AD78
.text:0040AD5B                 cmp     al, 5Ch ; '\'
.text:0040AD5D                 jz      short loc_40AD6F
.text:0040AD5F                 mov     [edx], al
.text:0040AD61
.text:0040AD61 loc_40AD61:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040AD61                                         ; ___addmntentstr+307↓j ...
.text:0040AD61                 movzx   ecx, byte ptr [ebx]
.text:0040AD64                 inc     edx
.text:0040AD65                 inc     ebx
.text:0040AD66                 test    cl, cl
.text:0040AD68                 jnz     short loc_40AD50
.text:0040AD6A                 jmp     loc_40AAE0
.text:0040AD6F ; ---------------------------------------------------------------------------
.text:0040AD6F
.text:0040AD6F loc_40AD6F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040AD6F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AD72                 inc     edx
.text:0040AD73                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AD76                 jmp     short loc_40AD61
.text:0040AD78 ; ---------------------------------------------------------------------------
.text:0040AD78
.text:0040AD78 loc_40AD78:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040AD78                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AD7B                 inc     edx
.text:0040AD7C                 mov     byte ptr [edx], 30h ; '0'
.text:0040AD7F                 inc     edx
.text:0040AD80                 mov     byte ptr [edx], 31h ; '1'
.text:0040AD83                 inc     edx
.text:0040AD84                 mov     byte ptr [edx], 32h ; '2'
.text:0040AD87                 jmp     short loc_40AD61
.text:0040AD87 ; ---------------------------------------------------------------------------
.text:0040AD89                 align 10h
.text:0040AD90
.text:0040AD90 loc_40AD90:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040AD90                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AD93                 inc     edx
.text:0040AD94                 mov     byte ptr [edx], 30h ; '0'
.text:0040AD97                 inc     edx
.text:0040AD98                 mov     byte ptr [edx], 34h ; '4'
.text:0040AD9B                 inc     edx
.text:0040AD9C                 mov     byte ptr [edx], 30h ; '0'
.text:0040AD9F                 jmp     short loc_40AD61
.text:0040ADA1 ; ---------------------------------------------------------------------------
.text:0040ADA1
.text:0040ADA1 loc_40ADA1:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040ADA1                 movzx   eax, byte ptr [ecx]
.text:0040ADA4                 jmp     loc_40AD20
.text:0040ADA4 ___addmntentstr endp
.text:0040ADA4
.text:0040ADA4 ; ---------------------------------------------------------------------------
.text:0040ADA9                 align 10h
.text:0040ADB0
.text:0040ADB0 ; =============== S U B R O U T I N E =======================================
.text:0040ADB0
.text:0040ADB0
.text:0040ADB0 sub_40ADB0      proc near               ; CODE XREF: sub_408540+99↑p
.text:0040ADB0
.text:0040ADB0 nBufferLength   = dword ptr -1Ch
.text:0040ADB0 lpBuffer        = dword ptr -18h
.text:0040ADB0 dwBytes         = dword ptr -14h
.text:0040ADB0 var_8           = dword ptr -8
.text:0040ADB0 var_4           = dword ptr -4
.text:0040ADB0
.text:0040ADB0                 sub     esp, 1Ch
.text:0040ADB3                 mov     [esp+1Ch+var_8], ebx
.text:0040ADB7                 mov     [esp+1Ch+var_4], esi
.text:0040ADBB                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040ADC3                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040ADCA                 call    GetLogicalDriveStringsA
.text:0040ADCF                 sub     esp, 8
.text:0040ADD2                 mov     ebx, eax
.text:0040ADD4                 call    GetProcessHeap
.text:0040ADD9                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040ADDC                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040ADE0                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040ADE8                 call    HeapAlloc
.text:0040ADED                 sub     esp, 0Ch
.text:0040ADF0                 mov     esi, eax
.text:0040ADF2                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040ADF5                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040ADF9                 call    GetLogicalDriveStringsA
.text:0040ADFE                 sub     esp, 8
.text:0040AE01                 mov     eax, esi
.text:0040AE03                 mov     ebx, [esp+1Ch+var_8]
.text:0040AE07                 mov     esi, [esp+1Ch+var_4]
.text:0040AE0B                 add     esp, 1Ch
.text:0040AE0E                 retn
.text:0040AE0E sub_40ADB0      endp
.text:0040AE0E
.text:0040AE0F
.text:0040AE0F ; =============== S U B R O U T I N E =======================================
.text:0040AE0F
.text:0040AE0F
.text:0040AE0F ; int __cdecl sub_40AE0F(char *, char *)
.text:0040AE0F sub_40AE0F      proc near               ; DATA XREF: sub_40AE0F:loc_40AE9D↓o
.text:0040AE0F
.text:0040AE0F FileName        = dword ptr -1Ch
.text:0040AE0F Mode            = dword ptr -18h
.text:0040AE0F dwBytes         = dword ptr -14h
.text:0040AE0F arg_0           = dword ptr  4
.text:0040AE0F arg_4           = dword ptr  8
.text:0040AE0F
.text:0040AE0F                 ja      short $+2
.text:0040AE11
.text:0040AE11 loc_40AE11:                             ; CODE XREF: sub_40AE0F↑j
.text:0040AE11                 jmp     short loc_40AE20
.text:0040AE11 ; ---------------------------------------------------------------------------
.text:0040AE13                 align 10h
.text:0040AE20
.text:0040AE20 loc_40AE20:                             ; CODE XREF: sub_40AE0F:loc_40AE11↑j
.text:0040AE20                 push    edi
.text:0040AE21                 push    esi
.text:0040AE22                 push    ebx
.text:0040AE23                 sub     esp, 10h
.text:0040AE26                 mov     ebx, [esp+1Ch+arg_0]
.text:0040AE2A                 mov     edx, [esp+1Ch+arg_4]
.text:0040AE2E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040AE31                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040AE35                 call    fopen
.text:0040AE3A                 test    eax, eax
.text:0040AE3C                 mov     edi, eax
.text:0040AE3E                 jz      short loc_40AE9D
.text:0040AE40
.text:0040AE40 loc_40AE40:                             ; CODE XREF: sub_40AE0F+A2↓j
.text:0040AE40                                         ; sub_40AE0F+AB↓j
.text:0040AE40                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040AE48                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040AE4F                 call    GetLogicalDriveStringsA
.text:0040AE54                 sub     esp, 8
.text:0040AE57                 mov     esi, eax
.text:0040AE59                 call    GetProcessHeap
.text:0040AE5E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040AE61                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040AE65                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040AE6D                 call    HeapAlloc
.text:0040AE72                 sub     esp, 0Ch
.text:0040AE75                 mov     ebx, eax
.text:0040AE77                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040AE7A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040AE7E                 call    GetLogicalDriveStringsA
.text:0040AE83                 mov     off_418084, ebx ; "notset"
.text:0040AE89                 sub     esp, 8
.text:0040AE8C                 xor     eax, eax
.text:0040AE8E                 test    ebx, ebx
.text:0040AE90                 setz    al
.text:0040AE93                 add     esp, 10h
.text:0040AE96                 pop     ebx
.text:0040AE97                 dec     eax
.text:0040AE98                 and     eax, edi
.text:0040AE9A                 pop     esi
.text:0040AE9B                 pop     edi
.text:0040AE9C                 retn
.text:0040AE9D ; ---------------------------------------------------------------------------
.text:0040AE9D
.text:0040AE9D loc_40AE9D:                             ; CODE XREF: sub_40AE0F+2F↑j
.text:0040AE9D                 mov     [esp+1Ch+Mode], offset sub_40AE0F ; Mode
.text:0040AEA5                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040AEA8                 call    fopen
.text:0040AEAD                 test    eax, eax
.text:0040AEAF                 mov     edi, eax
.text:0040AEB1                 jnz     short loc_40AE40
.text:0040AEB3                 call    sub_40B350
.text:0040AEB8                 mov     edi, eax
.text:0040AEBA                 jmp     short loc_40AE40
.text:0040AEBA sub_40AE0F      endp
.text:0040AEBA
.text:0040AEBA ; ---------------------------------------------------------------------------
.text:0040AEBC                 align 10h
.text:0040AEC0                 sub     esp, 0Ch
.text:0040AEC3                 mov     eax, [esp+10h]
.text:0040AEC7                 test    eax, eax
.text:0040AEC9                 jz      short loc_40AED3
.text:0040AECB                 mov     [esp], eax
.text:0040AECE                 call    fclose
.text:0040AED3
.text:0040AED3 loc_40AED3:                             ; CODE XREF: .text:0040AEC9↑j
.text:0040AED3                 call    GetProcessHeap
.text:0040AED8                 mov     [esp], eax
.text:0040AEDB                 mov     ecx, off_418084 ; "notset"
.text:0040AEE1                 mov     dword ptr [esp+4], 0
.text:0040AEE9                 mov     [esp+8], ecx
.text:0040AEED                 call    HeapFree
.text:0040AEF2                 mov     edx, off_418080 ; "notset"
.text:0040AEF8                 sub     esp, 0Ch
.text:0040AEFB                 mov     eax, 1
.text:0040AF00                 mov     off_418084, edx ; "notset"
.text:0040AF06                 add     esp, 0Ch
.text:0040AF09                 retn
.text:0040AF09 ; ---------------------------------------------------------------------------
.text:0040AF0A                 align 10h
.text:0040AF10                 push    edi
.text:0040AF11                 push    esi
.text:0040AF12                 push    ebx
.text:0040AF13                 sub     esp, 10h
.text:0040AF16                 mov     edi, [esp+24h]
.text:0040AF1A                 mov     [esp], edi
.text:0040AF1D                 call    strlen
.text:0040AF22                 mov     edx, [esp+20h]
.text:0040AF26                 mov     esi, eax
.text:0040AF28                 mov     ebx, [edx+0Ch]
.text:0040AF2B                 nop
.text:0040AF2C                 lea     esi, [esi+0]
.text:0040AF30
.text:0040AF30 loc_40AF30:                             ; CODE XREF: .text:0040AF61↓j
.text:0040AF30                 mov     [esp+4], edi
.text:0040AF34                 mov     [esp], ebx
.text:0040AF37                 call    strstr
.text:0040AF3C                 test    eax, eax
.text:0040AF3E                 jz      short loc_40AF63
.text:0040AF40                 cmp     eax, ebx
.text:0040AF42                 jz      short loc_40AF65
.text:0040AF44                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040AF48                 jz      short loc_40AF70
.text:0040AF4A
.text:0040AF4A loc_40AF4A:                             ; CODE XREF: .text:0040AF80↓j
.text:0040AF4A                 mov     [esp], ebx
.text:0040AF4D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040AF55                 call    strchr
.text:0040AF5A                 test    eax, eax
.text:0040AF5C                 mov     ebx, eax
.text:0040AF5E                 jz      short loc_40AF63
.text:0040AF60                 inc     ebx
.text:0040AF61                 jmp     short loc_40AF30
.text:0040AF63 ; ---------------------------------------------------------------------------
.text:0040AF63
.text:0040AF63 loc_40AF63:                             ; CODE XREF: .text:0040AF3E↑j
.text:0040AF63                                         ; .text:0040AF5E↑j
.text:0040AF63                 xor     eax, eax
.text:0040AF65
.text:0040AF65 loc_40AF65:                             ; CODE XREF: .text:0040AF42↑j
.text:0040AF65                                         ; .text:0040AF76↓j ...
.text:0040AF65                 add     esp, 10h
.text:0040AF68                 pop     ebx
.text:0040AF69                 pop     esi
.text:0040AF6A                 pop     edi
.text:0040AF6B                 retn
.text:0040AF6B ; ---------------------------------------------------------------------------
.text:0040AF6C                 align 10h
.text:0040AF70
.text:0040AF70 loc_40AF70:                             ; CODE XREF: .text:0040AF48↑j
.text:0040AF70                 movzx   edx, byte ptr [esi+eax]
.text:0040AF74                 test    dl, dl
.text:0040AF76                 jz      short loc_40AF65
.text:0040AF78                 cmp     dl, 3Dh ; '='
.text:0040AF7B                 jz      short loc_40AF65
.text:0040AF7D                 cmp     dl, 2Ch ; ','
.text:0040AF80                 jnz     short loc_40AF4A
.text:0040AF82                 jmp     short loc_40AF65
.text:0040AF82 ; ---------------------------------------------------------------------------
.text:0040AF84                 align 10h
.text:0040AF90
.text:0040AF90 ; =============== S U B R O U T I N E =======================================
.text:0040AF90
.text:0040AF90
.text:0040AF90 ; int __cdecl sub_40AF90(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:0040AF90 sub_40AF90      proc near               ; CODE XREF: sub_40B110+93↓p
.text:0040AF90
.text:0040AF90 pvReserved      = dword ptr -35Ch
.text:0040AF90 pUnkOuter       = dword ptr -358h
.text:0040AF90 dwClsContext    = dword ptr -354h
.text:0040AF90 riid            = dword ptr -350h
.text:0040AF90 ppv             = dword ptr -34Ch
.text:0040AF90 cchWideChar     = dword ptr -348h
.text:0040AF90 var_334         = byte ptr -334h
.text:0040AF90 var_330         = dword ptr -330h
.text:0040AF90 String2         = byte ptr -32Ch
.text:0040AF90 WideCharStr     = word ptr -21Ch
.text:0040AF90 lpMultiByteStr  = dword ptr  4
.text:0040AF90 lpString1       = dword ptr  8
.text:0040AF90
.text:0040AF90                 push    edi
.text:0040AF91                 push    esi
.text:0040AF92                 push    ebx
.text:0040AF93                 sub     esp, 350h
.text:0040AF99                 mov     edi, [esp+35Ch+lpString1]
.text:0040AFA0                 mov     byte ptr [edi], 0
.text:0040AFA3                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0040AFAA                 call    OleInitialize
.text:0040AFAF                 sub     esp, 4
.text:0040AFB2                 cmp     eax, 1
.text:0040AFB5                 ja      loc_40B0EF
.text:0040AFBB                 mov     [esp+35Ch+riid], offset riid ; riid
.text:0040AFC3                 lea     ecx, [esp+35Ch+var_330]
.text:0040AFC7                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0040AFCB                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:0040AFD3                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0040AFDB                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:0040AFE2                 call    CoCreateInstance
.text:0040AFE7                 sub     esp, 14h
.text:0040AFEA                 test    eax, eax
.text:0040AFEC                 js      loc_40B0EF
.text:0040AFF2                 mov     ebx, [esp+35Ch+var_330]
.text:0040AFF6                 lea     edx, [esp+35Ch+var_334]
.text:0040AFFA                 mov     esi, [ebx]
.text:0040AFFC                 mov     [esp+35Ch+dwClsContext], edx
.text:0040B000                 mov     [esp+35Ch+pvReserved], ebx
.text:0040B003                 xor     ebx, ebx
.text:0040B005                 mov     [esp+35Ch+pUnkOuter], offset dword_415DE0
.text:0040B00D                 call    dword ptr [esi]
.text:0040B00F                 sub     esp, 0Ch
.text:0040B012                 lea     esi, [esp+35Ch+WideCharStr]
.text:0040B019                 call    AreFileApisANSI
.text:0040B01E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:0040B026                 test    eax, eax
.text:0040B028                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0040B02F                 setz    bl
.text:0040B032                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:0040B036                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0040B03E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:0040B042                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0040B04A                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0040B04D                 call    MultiByteToWideChar
.text:0040B052                 sub     esp, 18h
.text:0040B055                 test    eax, eax
.text:0040B057                 js      loc_40B0EF
.text:0040B05D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:0040B061                 mov     ebx, [edx]
.text:0040B063                 mov     [esp+35Ch+dwClsContext], 0
.text:0040B06B                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040B06F                 mov     [esp+35Ch+pvReserved], edx
.text:0040B072                 call    dword ptr [ebx+14h]
.text:0040B075                 sub     esp, 0Ch
.text:0040B078                 test    eax, eax
.text:0040B07A                 js      short loc_40B0EF
.text:0040B07C                 mov     ebx, [esp+35Ch+var_330]
.text:0040B080                 lea     esi, [esp+35Ch+String2]
.text:0040B084                 mov     ecx, [ebx]
.text:0040B086                 mov     [esp+35Ch+pvReserved], ebx
.text:0040B089                 mov     [esp+35Ch+ppv], 0
.text:0040B091                 mov     [esp+35Ch+riid], 0
.text:0040B099                 mov     [esp+35Ch+dwClsContext], 104h
.text:0040B0A1                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040B0A5                 call    dword ptr [ecx+0Ch]
.text:0040B0A8                 sub     esp, 14h
.text:0040B0AB                 mov     ebx, eax
.text:0040B0AD                 test    eax, eax
.text:0040B0AF                 js      short loc_40B0EF
.text:0040B0B1                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:0040B0B5                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:0040B0B8                 call    lstrcpyA
.text:0040B0BD                 sub     esp, 8
.text:0040B0C0                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:0040B0C4                 mov     ecx, [edi]
.text:0040B0C6                 mov     [esp+35Ch+pvReserved], edi
.text:0040B0C9                 call    dword ptr [ecx+8]
.text:0040B0CC                 sub     esp, 4
.text:0040B0CF                 mov     edx, [esp+35Ch+var_330]
.text:0040B0D3                 mov     esi, [edx]
.text:0040B0D5                 mov     [esp+35Ch+pvReserved], edx
.text:0040B0D8                 call    dword ptr [esi+8]
.text:0040B0DB                 sub     esp, 4
.text:0040B0DE                 call    CoUninitialize
.text:0040B0E3                 mov     eax, ebx
.text:0040B0E5
.text:0040B0E5 loc_40B0E5:                             ; CODE XREF: sub_40AF90+177↓j
.text:0040B0E5                 add     esp, 350h
.text:0040B0EB                 pop     ebx
.text:0040B0EC                 pop     esi
.text:0040B0ED                 pop     edi
.text:0040B0EE                 retn
.text:0040B0EF ; ---------------------------------------------------------------------------
.text:0040B0EF
.text:0040B0EF loc_40B0EF:                             ; CODE XREF: sub_40AF90+25↑j
.text:0040B0EF                                         ; sub_40AF90+5C↑j ...
.text:0040B0EF                 call    sub_4094F0
.text:0040B0F4                 mov     edi, eax
.text:0040B0F6                 call    _errno
.text:0040B0FB                 mov     [eax], edi
.text:0040B0FD                 call    CoUninitialize
.text:0040B102                 mov     eax, 0FFFFFFFFh
.text:0040B107                 jmp     short loc_40B0E5
.text:0040B107 sub_40AF90      endp
.text:0040B107
.text:0040B107 ; ---------------------------------------------------------------------------
.text:0040B109 ; const char aLnk[]
.text:0040B109 aLnk            db '.lnk',0             ; DATA XREF: sub_40B110+53↓o
.text:0040B109                                         ; sub_40B110:loc_40B175↓o
.text:0040B10E                 align 10h
.text:0040B110
.text:0040B110 ; =============== S U B R O U T I N E =======================================
.text:0040B110
.text:0040B110
.text:0040B110 ; int __cdecl sub_40B110(char *, LPSTR lpString1)
.text:0040B110 sub_40B110      proc near               ; CODE XREF: sub_4091A0+96↑p
.text:0040B110
.text:0040B110 Str             = dword ptr -1Ch
.text:0040B110 Source          = dword ptr -18h
.text:0040B110 Destination     = dword ptr -14h
.text:0040B110 arg_0           = dword ptr  4
.text:0040B110 lpString1       = dword ptr  8
.text:0040B110
.text:0040B110                 push    ebp
.text:0040B111                 push    edi
.text:0040B112                 push    esi
.text:0040B113                 push    ebx
.text:0040B114                 sub     esp, 0Ch
.text:0040B117                 mov     ebx, [esp+1Ch+arg_0]
.text:0040B11B                 mov     ebp, [esp+1Ch+lpString1]
.text:0040B11F                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040B122                 call    strlen
.text:0040B127                 add     eax, 5
.text:0040B12A                 mov     [esp+1Ch+Str], eax ; Size
.text:0040B12D                 call    malloc
.text:0040B132                 mov     [esp+1Ch+Destination], eax
.text:0040B136                 test    eax, eax
.text:0040B138                 jz      loc_40B1E0
.text:0040B13E                 mov     [esp+1Ch+Source], ebx ; Source
.text:0040B142                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040B145                 call    strcpy
.text:0040B14A                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:0040B152                 mov     eax, [esp+1Ch+Destination]
.text:0040B156                 mov     [esp+1Ch+Str], eax ; Str
.text:0040B159                 call    strrchr
.text:0040B15E                 test    eax, eax
.text:0040B160                 jz      short loc_40B175
.text:0040B162                 cld
.text:0040B163                 mov     ebx, offset aLnk ; ".lnk"
.text:0040B168                 mov     ecx, 5
.text:0040B16D                 mov     esi, eax
.text:0040B16F                 mov     edi, ebx
.text:0040B171                 repe cmpsb
.text:0040B173                 jz      short loc_40B189
.text:0040B175
.text:0040B175 loc_40B175:                             ; CODE XREF: sub_40B110+50↑j
.text:0040B175                 mov     [esp+1Ch+Source], offset aLnk ; ".lnk"
.text:0040B17D                 mov     edx, [esp+1Ch+Destination]
.text:0040B181                 mov     [esp+1Ch+Str], edx ; Destination
.text:0040B184                 call    strcat
.text:0040B189
.text:0040B189 loc_40B189:                             ; CODE XREF: sub_40B110+63↑j
.text:0040B189                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:0040B190                 call    SetErrorMode
.text:0040B195                 sub     esp, 4
.text:0040B198                 mov     ebx, [esp+1Ch+Destination]
.text:0040B19C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:0040B1A0                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:0040B1A3                 call    sub_40AF90
.text:0040B1A8                 mov     [esp+1Ch+Str], ebx ; Block
.text:0040B1AB                 mov     esi, eax
.text:0040B1AD                 call    free
.text:0040B1B2                 mov     [esp+1Ch+Str], 0 ; uMode
.text:0040B1B9                 call    SetErrorMode
.text:0040B1BE                 sub     esp, 4
.text:0040B1C1                 mov     [esp+1Ch+Str], ebp
.text:0040B1C4                 call    sub_407F70
.text:0040B1C9                 inc     esi
.text:0040B1CA                 jz      short loc_40B1E0
.text:0040B1CC                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:0040B1D0                 add     esp, 0Ch
.text:0040B1D3                 pop     ebx
.text:0040B1D4                 pop     esi
.text:0040B1D5                 pop     edi
.text:0040B1D6                 pop     ebp
.text:0040B1D7                 jmp     strlen
.text:0040B1D7 ; ---------------------------------------------------------------------------
.text:0040B1DC                 align 10h
.text:0040B1E0
.text:0040B1E0 loc_40B1E0:                             ; CODE XREF: sub_40B110+28↑j
.text:0040B1E0                                         ; sub_40B110+BA↑j
.text:0040B1E0                 add     esp, 0Ch
.text:0040B1E3                 mov     eax, 0FFFFFFFFh
.text:0040B1E8                 pop     ebx
.text:0040B1E9                 pop     esi
.text:0040B1EA                 pop     edi
.text:0040B1EB                 pop     ebp
.text:0040B1EC                 retn
.text:0040B1EC sub_40B110      endp
.text:0040B1EC
.text:0040B1EC ; ---------------------------------------------------------------------------
.text:0040B1ED                 align 10h
.text:0040B1F0
.text:0040B1F0 ; =============== S U B R O U T I N E =======================================
.text:0040B1F0
.text:0040B1F0
.text:0040B1F0 ; int __cdecl sub_40B1F0(LPCSTR, int, int)
.text:0040B1F0 sub_40B1F0      proc near               ; CODE XREF: sub_4091A0+42↑p
.text:0040B1F0                                         ; sub_4091A0+AE↑p ...
.text:0040B1F0
.text:0040B1F0 lpFileName      = dword ptr -2Ch
.text:0040B1F0 dwDesiredAccess = dword ptr -28h
.text:0040B1F0 dwShareMode     = dword ptr -24h
.text:0040B1F0 lpSecurityAttributes= dword ptr -20h
.text:0040B1F0 dwCreationDisposition= dword ptr -1Ch
.text:0040B1F0 dwFlagsAndAttributes= dword ptr -18h
.text:0040B1F0 hTemplateFile   = dword ptr -14h
.text:0040B1F0 var_10          = dword ptr -10h
.text:0040B1F0 var_C           = dword ptr -0Ch
.text:0040B1F0 var_8           = dword ptr -8
.text:0040B1F0 var_4           = dword ptr -4
.text:0040B1F0 arg_0           = dword ptr  4
.text:0040B1F0 arg_4           = dword ptr  8
.text:0040B1F0 arg_8           = dword ptr  0Ch
.text:0040B1F0
.text:0040B1F0 ; FUNCTION CHUNK AT .text:00407A60 SIZE 0000013A BYTES
.text:0040B1F0
.text:0040B1F0                 sub     esp, 0Ch
.text:0040B1F3                 mov     ecx, [esp+0Ch+arg_0]
.text:0040B1F7                 mov     edx, [esp+0Ch+arg_4]
.text:0040B1FB                 mov     eax, [esp+0Ch+arg_8]
.text:0040B1FF                 test    ecx, ecx
.text:0040B201                 jnz     short loc_40B220
.text:0040B203                 test    edx, edx
.text:0040B205                 jz      short loc_40B220
.text:0040B207                 test    eax, eax
.text:0040B209                 jz      short loc_40B220
.text:0040B20B                 mov     [esp+0Ch+arg_4], eax
.text:0040B20F                 mov     [esp+0Ch+arg_0], edx
.text:0040B213                 add     esp, 0Ch
.text:0040B216                 jmp     loc_407A60
.text:0040B216 ; ---------------------------------------------------------------------------
.text:0040B21B                 align 10h
.text:0040B220
.text:0040B220 loc_40B220:                             ; CODE XREF: sub_40B1F0+11↑j
.text:0040B220                                         ; sub_40B1F0+15↑j ...
.text:0040B220                 call    _errno
.text:0040B225                 mov     dword ptr [eax], 16h
.text:0040B22B                 mov     eax, 0FFFFFFFFh
.text:0040B230                 add     esp, 0Ch
.text:0040B233                 retn
.text:0040B233 sub_40B1F0      endp
.text:0040B233
.text:0040B233 ; ---------------------------------------------------------------------------
.text:0040B234                 align 10h
.text:0040B240
.text:0040B240 ; =============== S U B R O U T I N E =======================================
.text:0040B240
.text:0040B240 ; Attributes: noreturn
.text:0040B240
.text:0040B240 sub_40B240      proc near               ; CODE XREF: .text:0040A779↑p
.text:0040B240                                         ; sub_40B240↓j
.text:0040B240                 jmp     short sub_40B240
.text:0040B240 sub_40B240      endp
.text:0040B240
.text:0040B240 ; ---------------------------------------------------------------------------
.text:0040B242                 align 10h
.text:0040B250
.text:0040B250 ; =============== S U B R O U T I N E =======================================
.text:0040B250
.text:0040B250
.text:0040B250 sub_40B250      proc near               ; CODE XREF: .text:0040A4D5↑p
.text:0040B250
.text:0040B250 FileHandle      = dword ptr -1Ch
.text:0040B250 dwFileOffsetLow = dword ptr -18h
.text:0040B250 dwFileOffsetHigh= dword ptr -14h
.text:0040B250 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0040B250 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0040B250 var_8           = dword ptr -8
.text:0040B250 var_4           = dword ptr -4
.text:0040B250 arg_0           = dword ptr  4
.text:0040B250
.text:0040B250                 sub     esp, 1Ch
.text:0040B253                 mov     edx, [esp+1Ch+arg_0]
.text:0040B257                 mov     [esp+1Ch+var_4], esi
.text:0040B25B                 mov     [esp+1Ch+var_8], ebx
.text:0040B25F                 mov     ebx, [edx+10h]
.text:0040B262                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040B265                 call    _get_osfhandle
.text:0040B26A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040B26D                 mov     esi, eax
.text:0040B26F                 call    _filelengthi64
.text:0040B274                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0040B278                 cdq
.text:0040B279                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0040B27C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040B280                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0040B288                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0040B290                 call    UnlockFile
.text:0040B295                 sub     esp, 14h
.text:0040B298                 mov     ebx, [esp+1Ch+var_8]
.text:0040B29C                 mov     esi, [esp+1Ch+var_4]
.text:0040B2A0                 add     esp, 1Ch
.text:0040B2A3                 retn
.text:0040B2A3 sub_40B250      endp
.text:0040B2A3
.text:0040B2A3 ; ---------------------------------------------------------------------------
.text:0040B2A4                 align 10h
.text:0040B2B0
.text:0040B2B0 ; =============== S U B R O U T I N E =======================================
.text:0040B2B0
.text:0040B2B0
.text:0040B2B0 ; int __cdecl sub_40B2B0(int, char *Control)
.text:0040B2B0 sub_40B2B0      proc near               ; CODE XREF: .text:0040A396↑p
.text:0040B2B0                                         ; .text:0040A3E6↑p ...
.text:0040B2B0
.text:0040B2B0 Str             = dword ptr -1Ch
.text:0040B2B0 Val             = dword ptr -18h
.text:0040B2B0 var_8           = dword ptr -8
.text:0040B2B0 var_4           = dword ptr -4
.text:0040B2B0 arg_0           = dword ptr  4
.text:0040B2B0 Control         = dword ptr  8
.text:0040B2B0
.text:0040B2B0                 sub     esp, 1Ch
.text:0040B2B3                 xor     eax, eax
.text:0040B2B5                 mov     edx, [esp+1Ch+Control]
.text:0040B2B9                 mov     [esp+1Ch+var_4], esi
.text:0040B2BD                 mov     esi, [esp+1Ch+arg_0]
.text:0040B2C1                 mov     [esp+1Ch+var_8], ebx
.text:0040B2C5                 mov     ebx, [esi]
.text:0040B2C7                 test    ebx, ebx
.text:0040B2C9                 jz      short loc_40B2F8
.text:0040B2CB                 movzx   eax, byte ptr [edx]
.text:0040B2CE                 test    al, al
.text:0040B2D0                 jz      short loc_40B2F0
.text:0040B2D2                 cmp     byte ptr [edx+1], 0
.text:0040B2D6                 jnz     short loc_40B330
.text:0040B2D8                 movzx   ecx, byte ptr [ebx]
.text:0040B2DB                 mov     edx, ebx
.text:0040B2DD                 cmp     cl, al
.text:0040B2DF                 jz      short loc_40B322
.text:0040B2E1                 test    cl, cl
.text:0040B2E3                 jnz     short loc_40B304
.text:0040B2E5                 lea     esi, [esi+0]
.text:0040B2E9                 lea     edi, [edi+0]
.text:0040B2F0
.text:0040B2F0 loc_40B2F0:                             ; CODE XREF: sub_40B2B0+20↑j
.text:0040B2F0                                         ; sub_40B2B0+74↓j
.text:0040B2F0                 mov     dword ptr [esi], 0
.text:0040B2F6
.text:0040B2F6 loc_40B2F6:                             ; CODE XREF: sub_40B2B0+7C↓j
.text:0040B2F6                 mov     eax, ebx
.text:0040B2F8
.text:0040B2F8 loc_40B2F8:                             ; CODE XREF: sub_40B2B0+19↑j
.text:0040B2F8                 mov     ebx, [esp+1Ch+var_8]
.text:0040B2FC                 mov     esi, [esp+1Ch+var_4]
.text:0040B300                 add     esp, 1Ch
.text:0040B303                 retn
.text:0040B304 ; ---------------------------------------------------------------------------
.text:0040B304
.text:0040B304 loc_40B304:                             ; CODE XREF: sub_40B2B0+33↑j
.text:0040B304                 movsx   edx, al
.text:0040B307                 mov     [esp+1Ch+Val], edx ; Val
.text:0040B30B                 lea     edx, [ebx+1]
.text:0040B30E                 mov     [esp+1Ch+Str], edx ; Str
.text:0040B311                 call    strchr
.text:0040B316                 lea     esi, [esi+0]
.text:0040B319                 lea     edi, [edi+0]
.text:0040B320
.text:0040B320 loc_40B320:                             ; CODE XREF: sub_40B2B0+8C↓j
.text:0040B320                 mov     edx, eax
.text:0040B322
.text:0040B322 loc_40B322:                             ; CODE XREF: sub_40B2B0+2F↑j
.text:0040B322                 test    edx, edx
.text:0040B324                 jz      short loc_40B2F0
.text:0040B326                 mov     byte ptr [edx], 0
.text:0040B329                 inc     edx
.text:0040B32A                 mov     [esi], edx
.text:0040B32C                 jmp     short loc_40B2F6
.text:0040B32C ; ---------------------------------------------------------------------------
.text:0040B32E                 align 10h
.text:0040B330
.text:0040B330 loc_40B330:                             ; CODE XREF: sub_40B2B0+26↑j
.text:0040B330                 mov     [esp+1Ch+Val], edx ; Control
.text:0040B334                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040B337                 call    strpbrk
.text:0040B33C                 jmp     short loc_40B320
.text:0040B33C sub_40B2B0      endp
.text:0040B33C
.text:0040B33C ; ---------------------------------------------------------------------------
.text:0040B33E                 align 10h
.text:0040B340 ; const char aTmpf[]
.text:0040B340 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40B350+20↓o
.text:0040B345 ; const char aWBd[]
.text:0040B345 aWBd            db 'w+bD',0             ; DATA XREF: sub_40B350+5E↓o
.text:0040B34A                 align 10h
.text:0040B350
.text:0040B350 ; =============== S U B R O U T I N E =======================================
.text:0040B350
.text:0040B350
.text:0040B350 sub_40B350      proc near               ; CODE XREF: sub_40AE0F+A4↑p
.text:0040B350
.text:0040B350 FileHandle      = dword ptr -13Ch
.text:0040B350 Format          = dword ptr -138h
.text:0040B350 var_134         = dword ptr -134h
.text:0040B350 var_130         = dword ptr -130h
.text:0040B350 var_12C         = dword ptr -12Ch
.text:0040B350 FileName        = byte ptr -11Ch
.text:0040B350 var_8           = dword ptr -8
.text:0040B350 var_4           = dword ptr -4
.text:0040B350
.text:0040B350                 sub     esp, 13Ch
.text:0040B356                 mov     [esp+13Ch+var_8], ebx
.text:0040B35D                 lea     ebx, [esp+13Ch+FileName]
.text:0040B361                 mov     [esp+13Ch+var_4], esi
.text:0040B368                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040B370                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040B378                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040B380                 mov     [esp+13Ch+Format], 104h ; int
.text:0040B388                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040B38B                 call    sub_4145E0
.text:0040B390                 xor     edx, edx
.text:0040B392                 test    eax, eax
.text:0040B394                 jnz     short loc_40B3C6
.text:0040B396                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040B399                 mov     [esp+13Ch+Format], 0 ; int
.text:0040B3A1                 call    sub_414960
.text:0040B3A6                 xor     edx, edx
.text:0040B3A8                 mov     ebx, eax
.text:0040B3AA                 test    eax, eax
.text:0040B3AC                 js      short loc_40B3C6
.text:0040B3AE                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040B3B6                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040B3B9                 call    _fdopen
.text:0040B3BE                 test    eax, eax
.text:0040B3C0                 mov     esi, eax
.text:0040B3C2                 jz      short loc_40B3DD
.text:0040B3C4
.text:0040B3C4 loc_40B3C4:                             ; CODE XREF: sub_40B350+95↓j
.text:0040B3C4                 mov     edx, esi
.text:0040B3C6
.text:0040B3C6 loc_40B3C6:                             ; CODE XREF: sub_40B350+44↑j
.text:0040B3C6                                         ; sub_40B350+5C↑j
.text:0040B3C6                 mov     ebx, [esp+13Ch+var_8]
.text:0040B3CD                 mov     eax, edx
.text:0040B3CF                 mov     esi, [esp+13Ch+var_4]
.text:0040B3D6                 add     esp, 13Ch
.text:0040B3DC                 retn
.text:0040B3DD ; ---------------------------------------------------------------------------
.text:0040B3DD
.text:0040B3DD loc_40B3DD:                             ; CODE XREF: sub_40B350+72↑j
.text:0040B3DD                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040B3E0                 call    _close_0
.text:0040B3E5                 jmp     short loc_40B3C4
.text:0040B3E5 sub_40B350      endp
.text:0040B3E5
.text:0040B3E5 ; ---------------------------------------------------------------------------
.text:0040B3E7                 db 9 dup(90h)
.text:0040B3F0 dword_40B3F0    dd 3020100h, 7060504h, 0B0A0908h, 0F0E0D0Ch, 13121110h
.text:0040B3F0                                         ; DATA XREF: .text:0040B974↓o
.text:0040B3F0                 dd 17161514h, 1B1A1918h, 1F1E1D1Ch, 23222120h, 27262524h
.text:0040B3F0                 dd 2B2A2928h, 2F2E2D2Ch, 33323130h, 37363534h, 3B3A3938h
.text:0040B3F0                 dd 3F3E3D3Ch, 43424140h, 47464544h, 4B4A4948h, 4F4E4D4Ch
.text:0040B3F0                 dd 53525150h, 57565554h, 5B5A5958h, 5F5E5D5Ch, 63626160h
.text:0040B3F0                 dd 67666564h, 6B6A6968h, 6F6E6D6Ch, 73727170h, 77767574h
.text:0040B3F0                 dd 7B7A7978h, 7F7E7D7Ch, 83828180h, 87868584h, 8B8A8988h
.text:0040B3F0                 dd 8F8E8D8Ch, 93929190h, 97969594h, 9B9A9998h, 9F9E9D9Ch
.text:0040B3F0                 dd 0A3A2A1A0h, 0A7A6A5A4h, 0ABAAA9A8h, 0AFAEADACh, 0B3B2B1B0h
.text:0040B3F0                 dd 0B7B6B5B4h, 0BBBAB9B8h, 0BFBEBDBCh, 0C3C2C1C0h, 0C7C6C5C4h
.text:0040B3F0                 dd 0CBCAC9C8h, 0CFCECDCCh, 0D3D2D1D0h, 0D7D6D5D4h, 0DBDAD9D8h
.text:0040B3F0                 dd 0DFDEDDDCh, 0E3E2E1E0h, 0E7E6E5E4h, 0EBEAE9E8h, 0EFEEEDECh
.text:0040B3F0                 dd 0F3F2F1F0h, 0F7F6F5F4h, 0FBFAF9F8h, 0FFFEFDFCh, 8, 1
.text:0040B3F0                 dd 8, 0
.text:0040B500                 dd 0FFh, 18h, 1Ch, 0
.text:0040B510                 dd 1, 2, 3, 4, 5, 6, 7, 8, 9, 0Ah, 0Bh, 0Ch, 0Dh, 0Eh
.text:0040B510                 dd 0Fh, 10h, 11h, 12h, 13h, 14h, 15h, 16h, 17h, 18h, 19h
.text:0040B510                 dd 1Ah, 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 20h, 21h, 22h, 23h, 24h
.text:0040B510                 dd 25h, 26h, 27h, 28h, 29h, 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh
.text:0040B510                 dd 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h, 3Ah
.text:0040B510                 dd 3Bh, 3Ch, 3Dh, 3Eh, 3Fh, 40h, 41h, 42h, 43h, 44h, 45h
.text:0040B510                 dd 46h, 47h, 48h, 49h, 4Ah, 4Bh, 4Ch, 4Dh, 4Eh, 4Fh, 50h
.text:0040B510                 dd 51h, 52h, 53h, 54h, 55h, 56h, 57h, 58h, 59h, 5Ah, 5Bh
.text:0040B510                 dd 5Ch, 5Dh, 5Eh, 5Fh, 60h, 61h, 62h, 63h, 64h, 65h, 66h
.text:0040B510                 dd 67h, 68h, 69h, 6Ah, 6Bh, 6Ch, 6Dh, 6Eh, 6Fh, 70h, 71h
.text:0040B510                 dd 72h, 73h, 74h, 75h, 76h, 77h, 78h, 79h, 7Ah, 7Bh, 7Ch
.text:0040B510                 dd 7Dh, 7Eh, 7Fh, 80h, 81h, 82h, 83h, 84h, 85h, 86h, 87h
.text:0040B510                 dd 88h, 89h, 8Ah, 8Bh, 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h
.text:0040B510                 dd 93h, 94h, 95h, 96h, 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh
.text:0040B510                 dd 9Eh, 9Fh, 0A0h, 0A1h, 0A2h, 0A3h, 0A4h, 0A5h, 0A6h
.text:0040B510                 dd 0A7h, 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
.text:0040B510                 dd 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h
.text:0040B510                 dd 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h
.text:0040B510                 dd 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh
.text:0040B510                 dd 0CBh, 0CCh, 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h
.text:0040B510                 dd 0D4h, 0D5h, 0D6h, 0D7h, 0D8h, 0D9h, 0DAh, 0DBh, 0DCh
.text:0040B510                 dd 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h
.text:0040B510                 dd 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh
.text:0040B510                 dd 0EFh, 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
.text:0040B510                 dd 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh, 26748Dh
.text:0040B510                 dd 414590h, 5 dup(0)
.text:0040B928                 dd 0FFFFFFFFh, 0
.text:0040B930                 dd 13h, 10h dup(0)
.text:0040B974                 dd offset dword_40B3F0
.text:0040B978                 dd offset dword_40B3F0+100h
.text:0040B97C                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:0040B980                 db 10h dup(90h)
.text:0040B990                 dd 0
.text:0040B994                 dd 2, 4, 6, 8, 0Ah, 0Ch, 0Eh, 10h, 12h, 14h, 16h, 18h
.text:0040B994                 dd 1Ah, 1Ch, 1Eh, 20h, 22h, 24h, 26h, 28h, 2Ah, 2Ch, 2Eh
.text:0040B994                 dd 30h, 32h, 34h, 36h, 38h, 3Ah, 3Ch, 3Eh, 40h, 42h, 44h
.text:0040B994                 dd 46h, 48h, 4Ah, 4Ch, 4Eh, 50h, 52h, 54h, 56h, 58h, 5Ah
.text:0040B994                 dd 5Ch, 5Eh, 60h, 62h, 64h, 66h, 68h, 6Ah, 6Ch, 6Eh, 70h
.text:0040B994                 dd 72h, 74h, 76h, 78h, 7Ah, 7Ch, 7Eh, 80h, 82h, 84h, 86h
.text:0040B994                 dd 88h, 8Ah, 8Ch, 8Eh, 90h, 92h, 94h, 96h, 98h, 9Ah, 9Ch
.text:0040B994                 dd 9Eh, 0A0h, 0A2h, 0A4h, 0A6h, 0A8h, 0AAh, 0ACh, 0AEh
.text:0040B994                 dd 0B0h, 0B2h, 0B4h, 0B6h, 0B8h, 0BAh, 0BCh, 0BEh, 0C0h
.text:0040B994                 dd 0C2h, 0C4h, 0C6h, 0C8h, 0CAh, 0CCh, 0CEh, 0D0h, 0D2h
.text:0040B994                 dd 0D4h, 0D6h, 0D8h, 0DAh, 0DCh, 0DEh, 0E0h, 0E2h, 0E4h
.text:0040B994                 dd 0E6h, 0E8h, 0EAh, 0ECh, 0EEh, 0F0h, 0F2h, 0F4h, 0F6h
.text:0040B994                 dd 0F8h, 0FAh, 0FCh, 0FEh, 100h, 102h, 104h, 106h, 108h
.text:0040B994                 dd 10Ah, 10Ch, 10Eh, 110h, 112h, 114h, 116h, 118h, 11Ah
.text:0040B994                 dd 11Ch, 11Eh, 120h, 122h, 124h, 126h, 128h, 12Ah, 12Ch
.text:0040B994                 dd 12Eh, 130h, 132h, 134h, 136h, 138h, 13Ah, 13Ch, 13Eh
.text:0040B994                 dd 140h, 142h, 144h, 146h, 148h, 14Ah, 14Ch, 14Eh, 150h
.text:0040B994                 dd 152h, 154h, 156h, 158h, 15Ah, 15Ch, 15Eh, 160h, 162h
.text:0040B994                 dd 164h, 166h, 168h, 16Ah, 16Ch, 16Eh, 170h, 172h, 174h
.text:0040B994                 dd 176h, 178h, 17Ah, 17Ch, 17Eh, 180h, 182h, 184h, 186h
.text:0040B994                 dd 188h, 18Ah, 18Ch, 18Eh, 190h, 192h, 194h, 196h, 198h
.text:0040B994                 dd 19Ah, 19Ch, 19Eh, 1A0h, 1A2h, 1A4h, 1A6h, 1A8h, 1AAh
.text:0040B994                 dd 1ACh, 1AEh, 1B0h, 1B2h, 1B4h, 1B6h, 1B8h, 1BAh, 1BCh
.text:0040B994                 dd 1BEh, 1C0h, 1C2h, 1C4h, 1C6h, 1C8h, 1CAh, 1CCh, 1CEh
.text:0040B994                 dd 1D0h, 1D2h, 1D4h, 1D6h, 1D8h, 1DAh, 1DCh, 1DEh, 1E0h
.text:0040B994                 dd 1E2h, 1E4h, 1E6h, 1E8h, 1EAh, 1ECh, 1EEh, 1F0h, 1F2h
.text:0040B994                 dd 1F4h, 1F6h, 1F8h, 1FAh, 1FCh, 1FEh, 200h, 202h, 204h
.text:0040B994                 dd 206h, 208h, 20Ah, 20Ch, 20Eh, 210h, 212h, 214h, 216h
.text:0040B994                 dd 218h, 21Ah, 21Ch, 21Eh, 220h, 222h, 224h, 226h, 228h
.text:0040B994                 dd 22Ah, 22Ch, 22Eh, 230h, 232h, 234h, 236h, 238h, 23Ah
.text:0040B994                 dd 23Ch, 23Eh, 240h, 242h, 244h, 246h, 248h, 24Ah, 24Ch
.text:0040B994                 dd 24Eh, 250h, 252h, 254h, 256h, 258h, 25Ah, 25Ch, 25Eh
.text:0040B994                 dd 260h, 262h, 264h, 266h, 268h, 26Ah, 26Ch, 26Eh, 270h
.text:0040B994                 dd 272h, 274h, 276h, 278h, 27Ah, 27Ch, 27Eh, 280h, 282h
.text:0040B994                 dd 284h, 286h, 288h, 28Ah, 28Ch, 28Eh, 290h, 292h, 294h
.text:0040B994                 dd 296h, 298h, 29Ah, 29Ch, 29Eh, 2A0h, 2A2h, 2A4h, 2A6h
.text:0040B994                 dd 2A8h, 2AAh, 2ACh, 2AEh, 2B0h, 2B2h, 2B4h, 2B6h, 2B8h
.text:0040B994                 dd 2BAh, 2BCh, 2BEh, 2C0h, 2C2h, 2C4h, 2C6h, 2C8h, 2CAh
.text:0040B994                 dd 2CCh, 2CEh, 2D0h, 2D2h, 2D4h, 2D6h, 2D8h, 2DAh, 2DCh
.text:0040B994                 dd 2DEh, 2E0h, 2E2h, 2E4h, 2E6h, 2E8h, 2EAh, 2ECh, 2EEh
.text:0040B994                 dd 2F0h, 2F2h, 2F4h, 2F6h, 2F8h, 2FAh, 2FCh, 2FEh, 300h
.text:0040B994                 dd 302h, 304h, 306h, 308h, 30Ah, 30Ch, 30Eh, 310h, 312h
.text:0040B994                 dd 314h, 316h, 318h, 31Ah, 31Ch, 31Eh, 320h, 322h, 324h
.text:0040B994                 dd 326h, 328h, 32Ah, 32Ch, 32Eh, 330h, 332h, 334h, 336h
.text:0040B994                 dd 338h, 33Ah, 33Ch, 33Eh, 340h, 342h, 344h, 346h, 348h
.text:0040B994                 dd 34Ah, 34Ch, 34Eh, 350h, 352h, 354h, 356h, 358h, 35Ah
.text:0040B994                 dd 35Ch, 35Eh, 360h, 362h, 364h, 366h, 368h, 36Ah, 36Ch
.text:0040B994                 dd 36Eh, 370h, 372h, 374h, 376h, 378h, 37Ah, 37Ch, 37Eh
.text:0040B994                 dd 380h, 382h, 384h, 386h, 388h, 38Ah, 38Ch, 38Eh, 390h
.text:0040B994                 dd 392h, 394h, 396h, 398h, 39Ah, 39Ch, 39Eh, 3A0h, 3A2h
.text:0040B994                 dd 3A4h, 3A6h, 3A8h, 3AAh, 3ACh, 3AEh, 3B0h, 3B2h, 3B4h
.text:0040B994                 dd 3B6h, 3B8h, 3BAh, 3BCh, 3BEh, 3C0h, 3C2h, 3C4h, 3C6h
.text:0040B994                 dd 3C8h, 3CAh, 3CCh, 3CEh, 3D0h, 3D2h, 3D4h, 3D6h, 3D8h
.text:0040B994                 dd 3DAh, 3DCh, 3DEh, 3E0h, 3E2h, 3E4h, 3E6h, 3E8h, 3EAh
.text:0040B994                 dd 3ECh, 3EEh, 3F0h, 3F2h, 3F4h, 3F6h, 3F8h, 3FAh, 3FCh
.text:0040B994                 dd 3FEh, 400h
.text:0040C194                 dd 402h, 404h, 406h, 408h, 40Ah, 40Ch, 40Eh, 410h, 412h
.text:0040C194                 dd 414h, 416h, 418h, 41Ah, 41Ch, 41Eh, 420h, 422h, 424h
.text:0040C194                 dd 426h, 428h, 42Ah, 42Ch, 42Eh, 430h, 432h, 434h, 436h
.text:0040C194                 dd 438h, 43Ah, 43Ch, 43Eh, 440h, 442h, 444h, 446h, 448h
.text:0040C194                 dd 44Ah, 44Ch, 44Eh, 450h, 452h, 454h, 456h, 458h, 45Ah
.text:0040C194                 dd 45Ch, 45Eh, 460h, 462h, 464h, 466h, 468h, 46Ah, 46Ch
.text:0040C194                 dd 46Eh, 470h, 472h, 474h, 476h, 478h, 47Ah, 47Ch, 47Eh
.text:0040C194                 dd 480h, 482h, 484h, 486h, 488h, 48Ah, 48Ch, 48Eh, 490h
.text:0040C194                 dd 492h, 494h, 496h, 498h, 49Ah, 49Ch, 49Eh, 4A0h, 4A2h
.text:0040C194                 dd 4A4h, 4A6h, 4A8h, 4AAh, 4ACh, 4AEh, 4B0h, 4B2h, 4B4h
.text:0040C194                 dd 4B6h, 4B8h, 4BAh, 4BCh, 4BEh, 4C0h, 4C2h, 4C4h, 4C6h
.text:0040C194                 dd 4C8h, 4CAh, 4CCh, 4CEh, 4D0h, 4D2h, 4D4h, 4D6h, 4D8h
.text:0040C194                 dd 4DAh, 4DCh, 4DEh, 4E0h, 4E2h, 4E4h, 4E6h, 4E8h, 4EAh
.text:0040C194                 dd 4ECh, 4EEh, 4F0h, 4F2h, 4F4h, 4F6h, 4F8h, 4FAh, 4FCh
.text:0040C194                 dd 4FEh, 500h, 502h, 504h, 506h, 508h, 50Ah, 50Ch, 50Eh
.text:0040C194                 dd 510h, 512h, 514h, 516h, 518h, 51Ah, 51Ch, 51Eh, 520h
.text:0040C194                 dd 522h, 524h, 526h, 528h, 52Ah, 52Ch, 52Eh, 530h, 532h
.text:0040C194                 dd 534h, 536h, 538h, 53Ah, 53Ch, 53Eh, 540h, 542h, 544h
.text:0040C194                 dd 546h, 548h, 54Ah, 54Ch, 54Eh, 550h, 552h, 554h, 556h
.text:0040C194                 dd 558h, 55Ah, 55Ch, 55Eh, 560h, 562h, 564h, 566h, 568h
.text:0040C194                 dd 56Ah, 56Ch, 56Eh, 570h, 572h, 574h, 576h, 578h, 57Ah
.text:0040C194                 dd 57Ch, 57Eh, 580h, 582h, 584h, 586h, 588h, 58Ah, 58Ch
.text:0040C194                 dd 58Eh, 590h, 592h, 594h, 596h, 598h, 59Ah, 59Ch, 59Eh
.text:0040C194                 dd 5A0h, 5A2h, 5A4h, 5A6h, 5A8h, 5AAh, 5ACh, 5AEh, 5B0h
.text:0040C194                 dd 5B2h, 5B4h, 5B6h, 5B8h, 5BAh, 5BCh, 5BEh, 5C0h, 5C2h
.text:0040C194                 dd 5C4h, 5C6h, 5C8h, 5CAh, 5CCh, 5CEh, 5D0h, 5D2h, 5D4h
.text:0040C194                 dd 5D6h, 5D8h, 5DAh, 5DCh, 5DEh, 5E0h, 5E2h, 5E4h, 5E6h
.text:0040C194                 dd 5E8h, 5EAh, 5ECh, 5EEh, 5F0h, 5F2h, 5F4h, 5F6h, 5F8h
.text:0040C194                 dd 5FAh, 5FCh, 5FEh, 600h, 602h, 604h, 606h, 608h, 60Ah
.text:0040C194                 dd 60Ch, 60Eh, 610h, 612h, 614h, 616h, 618h, 61Ah, 61Ch
.text:0040C194                 dd 61Eh, 620h, 622h, 624h, 626h, 628h, 62Ah, 62Ch, 62Eh
.text:0040C194                 dd 630h, 632h, 634h, 636h, 638h, 63Ah, 63Ch, 63Eh, 640h
.text:0040C194                 dd 642h, 644h, 646h, 648h, 64Ah, 64Ch, 64Eh, 650h, 652h
.text:0040C194                 dd 654h, 656h, 658h, 65Ah, 65Ch, 65Eh, 660h, 662h, 664h
.text:0040C194                 dd 666h, 668h, 66Ah, 66Ch, 66Eh, 670h, 672h, 674h, 676h
.text:0040C194                 dd 678h, 67Ah, 67Ch, 67Eh, 680h, 682h, 684h, 686h, 688h
.text:0040C194                 dd 68Ah, 68Ch, 68Eh, 690h, 692h, 694h, 696h, 698h, 69Ah
.text:0040C194                 dd 69Ch, 69Eh, 6A0h, 6A2h, 6A4h, 6A6h, 6A8h, 6AAh, 6ACh
.text:0040C194                 dd 6AEh, 6B0h, 6B2h, 6B4h, 6B6h, 6B8h, 6BAh, 6BCh, 6BEh
.text:0040C194                 dd 6C0h, 6C2h, 6C4h, 6C6h, 6C8h, 6CAh, 6CCh, 6CEh, 6D0h
.text:0040C194                 dd 6D2h, 6D4h, 6D6h, 6D8h, 6DAh, 6DCh, 6DEh, 6E0h, 6E2h
.text:0040C194                 dd 6E4h, 6E6h, 6E8h, 6EAh, 6ECh, 6EEh, 6F0h, 6F2h, 6F4h
.text:0040C194                 dd 6F6h, 6F8h, 6FAh, 6FCh, 6FEh, 700h, 702h, 704h, 706h
.text:0040C194                 dd 708h, 70Ah, 70Ch, 70Eh, 710h, 712h, 714h, 716h, 718h
.text:0040C194                 dd 71Ah, 71Ch, 71Eh, 720h, 722h, 724h, 726h, 728h, 72Ah
.text:0040C194                 dd 72Ch, 72Eh, 730h, 732h, 734h, 736h, 738h, 73Ah, 73Ch
.text:0040C194                 dd 73Eh, 740h, 742h, 744h, 746h, 748h, 74Ah, 74Ch, 74Eh
.text:0040C194                 dd 750h, 752h, 754h, 756h, 758h, 75Ah, 75Ch, 75Eh, 760h
.text:0040C194                 dd 762h, 764h, 766h, 768h, 76Ah, 76Ch, 76Eh, 770h, 772h
.text:0040C194                 dd 774h, 776h, 778h, 77Ah, 77Ch, 77Eh, 780h, 782h, 784h
.text:0040C194                 dd 786h, 788h, 78Ah, 78Ch, 78Eh, 790h, 792h, 794h, 796h
.text:0040C194                 dd 798h, 79Ah, 79Ch, 79Eh, 7A0h, 7A2h, 7A4h, 7A6h, 7A8h
.text:0040C194                 dd 7AAh, 7ACh, 7AEh, 7B0h, 7B2h, 7B4h, 7B6h, 7B8h, 7BAh
.text:0040C194                 dd 7BCh, 7BEh, 7C0h, 7C2h, 7C4h, 7C6h, 7C8h, 7CAh, 7CCh
.text:0040C194                 dd 7CEh, 7D0h, 7D2h, 7D4h, 7D6h, 7D8h, 7DAh, 7DCh, 7DEh
.text:0040C194                 dd 7E0h, 7E2h, 7E4h, 7E6h, 7E8h, 7EAh, 7ECh, 7EEh, 7F0h
.text:0040C194                 dd 7F2h, 7F4h, 7F6h, 7F8h, 7FAh, 7FCh, 7FEh, 800h
.text:0040C994                 dd 802h, 804h, 806h, 808h, 80Ah, 80Ch, 80Eh, 810h, 812h
.text:0040C994                 dd 814h, 816h, 818h, 81Ah, 81Ch, 81Eh, 820h, 822h, 824h
.text:0040C994                 dd 826h, 828h, 82Ah, 82Ch, 82Eh, 830h, 832h, 834h, 836h
.text:0040C994                 dd 838h, 83Ah, 83Ch, 83Eh, 840h, 842h, 844h, 846h, 848h
.text:0040C994                 dd 84Ah, 84Ch, 84Eh, 850h, 852h, 854h, 856h, 858h, 85Ah
.text:0040C994                 dd 85Ch, 85Eh, 860h, 862h, 864h, 866h, 868h, 86Ah, 86Ch
.text:0040C994                 dd 86Eh, 870h, 872h, 874h, 876h, 878h, 87Ah, 87Ch, 87Eh
.text:0040C994                 dd 880h, 882h, 884h, 886h, 888h, 88Ah, 88Ch, 88Eh, 890h
.text:0040C994                 dd 892h, 894h, 896h, 898h, 89Ah, 89Ch, 89Eh, 8A0h, 8A2h
.text:0040C994                 dd 8A4h, 8A6h, 8A8h, 8AAh, 8ACh, 8AEh, 8B0h, 8B2h, 8B4h
.text:0040C994                 dd 8B6h, 8B8h, 8BAh, 8BCh, 8BEh, 8C0h, 8C2h, 8C4h, 8C6h
.text:0040C994                 dd 8C8h, 8CAh, 8CCh, 8CEh, 8D0h, 8D2h, 8D4h, 8D6h, 8D8h
.text:0040C994                 dd 8DAh, 8DCh, 8DEh, 8E0h, 8E2h, 8E4h, 8E6h, 8E8h, 8EAh
.text:0040C994                 dd 8ECh, 8EEh, 8F0h, 8F2h, 8F4h, 8F6h, 8F8h, 8FAh, 8FCh
.text:0040C994                 dd 8FEh, 900h, 902h, 904h, 906h, 908h, 90Ah, 90Ch, 90Eh
.text:0040C994                 dd 910h, 912h, 914h, 916h, 918h, 91Ah, 91Ch, 91Eh, 920h
.text:0040C994                 dd 922h, 924h, 926h, 928h, 92Ah, 92Ch, 92Eh, 930h, 932h
.text:0040C994                 dd 934h, 936h, 938h, 93Ah, 93Ch, 93Eh, 940h, 942h, 944h
.text:0040C994                 dd 946h, 948h, 94Ah, 94Ch, 94Eh, 950h, 952h, 954h, 956h
.text:0040C994                 dd 958h, 95Ah, 95Ch, 95Eh, 960h, 962h, 964h, 966h, 968h
.text:0040C994                 dd 96Ah, 96Ch, 96Eh, 970h, 972h, 974h, 976h, 978h, 97Ah
.text:0040C994                 dd 97Ch, 97Eh, 980h, 982h, 984h, 986h, 988h, 98Ah, 98Ch
.text:0040C994                 dd 98Eh, 990h, 992h, 994h, 996h, 998h, 99Ah, 99Ch, 99Eh
.text:0040C994                 dd 9A0h, 9A2h, 9A4h, 9A6h, 9A8h, 9AAh, 9ACh, 9AEh, 9B0h
.text:0040C994                 dd 9B2h, 9B4h, 9B6h, 9B8h, 9BAh, 9BCh, 9BEh, 9C0h, 9C2h
.text:0040C994                 dd 9C4h, 9C6h, 9C8h, 9CAh, 9CCh, 9CEh, 9D0h, 9D2h, 9D4h
.text:0040C994                 dd 9D6h, 9D8h, 9DAh, 9DCh, 9DEh, 9E0h, 9E2h, 9E4h, 9E6h
.text:0040C994                 dd 9E8h, 9EAh, 9ECh, 9EEh, 9F0h, 9F2h, 9F4h, 9F6h, 9F8h
.text:0040C994                 dd 9FAh, 9FCh, 9FEh, 0A00h, 0A02h, 0A04h, 0A06h, 0A08h
.text:0040C994                 dd 0A0Ah, 0A0Ch, 0A0Eh, 0A10h, 0A12h, 0A14h, 0A16h, 0A18h
.text:0040C994                 dd 0A1Ah, 0A1Ch, 0A1Eh, 0A20h, 0A22h, 0A24h, 0A26h, 0A28h
.text:0040C994                 dd 0A2Ah, 0A2Ch, 0A2Eh, 0A30h, 0A32h, 0A34h, 0A36h, 0A38h
.text:0040C994                 dd 0A3Ah, 0A3Ch, 0A3Eh, 0A40h, 0A42h, 0A44h, 0A46h, 0A48h
.text:0040C994                 dd 0A4Ah, 0A4Ch, 0A4Eh, 0A50h, 0A52h, 0A54h, 0A56h, 0A58h
.text:0040C994                 dd 0A5Ah, 0A5Ch, 0A5Eh, 0A60h, 0A62h, 0A64h, 0A66h, 0A68h
.text:0040C994                 dd 0A6Ah, 0A6Ch, 0A6Eh, 0A70h, 0A72h, 0A74h, 0A76h, 0A78h
.text:0040C994                 dd 0A7Ah, 0A7Ch, 0A7Eh, 0A80h, 0A82h, 0A84h, 0A86h, 0A88h
.text:0040C994                 dd 0A8Ah, 0A8Ch, 0A8Eh, 0A0h, 0A9h, 0ABh, 0ADh, 0AEh, 0B5h
.text:0040C994                 dd 0B8h, 0BBh, 0BCh, 0BDh, 0BEh, 0C6h, 0D7h, 0DFh, 0E6h
.text:0040C994                 dd 132h, 133h, 149h, 2 dup(152h), 2 dup(153h), 17Fh, 1C7h
.text:0040C994                 dd 1C8h, 1C9h, 1CAh, 1CBh, 1CCh, 1F1h, 1F2h, 1F3h, 2BCh
.text:0040C994                 dd 2C6h, 2C8h, 2CBh, 2CDh, 2D0h, 2DCh, 2002h, 2003h, 2004h
.text:0040C994                 dd 2005h, 2006h, 2008h, 2009h, 200Ah, 200Bh, 2010h, 2011h
.text:0040C994                 dd 2012h, 2013h, 2014h, 2015h, 2018h, 2019h, 201Ah, 201Bh
.text:0040C994                 dd 201Ch, 201Dh, 201Eh, 201Fh, 2020h, 2022h, 2024h, 2025h
.text:0040C994                 dd 2026h, 202Fh, 2035h, 2036h, 2037h, 2039h, 203Ah, 203Ch
.text:0040C994                 dd 2047h, 2048h, 2049h, 205Fh, 2060h, 2061h, 2062h, 2063h
.text:0040C994                 dd 20A8h, 20ACh, 2100h, 2101h, 2102h, 2105h, 2106h, 210Ah
.text:0040C994                 dd 210Bh, 210Ch, 210Dh, 210Eh, 2110h, 2111h, 2112h, 2113h
.text:0040C994                 dd 2115h, 2116h, 2119h, 211Ah, 211Bh, 211Ch, 211Dh, 2121h
.text:0040C994                 dd 2122h, 2124h, 2126h, 2128h, 212Ch, 212Dh, 212Eh, 212Fh
.text:0040C994                 dd 2130h, 2131h, 2133h, 2134h, 2139h, 2145h, 2146h, 2147h
.text:0040C994                 dd 2148h, 2149h, 2153h, 2154h, 2155h, 2156h, 2157h, 2158h
.text:0040C994                 dd 2159h, 215Ah, 215Bh, 215Ch, 215Dh, 215Eh, 215Fh, 2160h
.text:0040C994                 dd 2161h, 2162h, 2163h, 2164h, 2165h, 2166h, 2167h, 2168h
.text:0040C994                 dd 2169h, 216Ah, 216Bh, 216Ch, 216Dh, 216Eh, 216Fh, 2170h
.text:0040C994                 dd 2171h, 2172h, 2173h, 2174h, 2175h, 2176h, 2177h, 2178h
.text:0040C994                 dd 2179h, 217Ah, 217Bh, 217Ch, 217Dh, 217Eh, 217Fh, 2190h
.text:0040C994                 dd 2192h, 2194h, 21D0h, 21D2h, 21D4h, 2212h, 2215h, 2216h
.text:0040C994                 dd 2217h, 2223h, 2236h, 223Ch, 2264h, 2265h, 226Ah, 226Bh
.text:0040C994                 dd 22D8h
.text:0040D19C                 dd 22D9h, 2400h, 2401h, 2402h, 2403h, 2404h, 2405h, 2406h
.text:0040D19C                 dd 2407h, 2408h, 2409h, 240Ah, 240Bh, 240Ch, 240Dh, 240Eh
.text:0040D19C                 dd 240Fh, 2410h, 2411h, 2412h, 2413h, 2414h, 2415h, 2416h
.text:0040D19C                 dd 2417h, 2418h, 2419h, 241Ah, 241Bh, 241Ch, 241Dh, 241Eh
.text:0040D19C                 dd 241Fh, 2420h, 2421h, 2423h, 2424h, 2460h, 2461h, 2462h
.text:0040D19C                 dd 2463h, 2464h, 2465h, 2466h, 2467h, 2468h, 2469h, 246Ah
.text:0040D19C                 dd 246Bh, 246Ch, 246Dh, 246Eh, 246Fh, 2470h, 2471h, 2472h
.text:0040D19C                 dd 2473h, 2474h, 2475h, 2476h, 2477h, 2478h, 2479h, 247Ah
.text:0040D19C                 dd 247Bh, 247Ch, 247Dh, 247Eh, 247Fh, 2480h, 2481h, 2482h
.text:0040D19C                 dd 2483h, 2484h, 2485h, 2486h, 2487h, 2488h, 2489h, 248Ah
.text:0040D19C                 dd 248Bh, 248Ch, 248Dh, 248Eh, 248Fh, 2490h, 2491h, 2492h
.text:0040D19C                 dd 2493h, 2494h, 2495h, 2496h, 2497h, 2498h, 2499h, 249Ah
.text:0040D19C                 dd 249Bh, 249Ch, 249Dh, 249Eh, 249Fh, 24A0h, 24A1h, 24A2h
.text:0040D19C                 dd 24A3h, 24A4h, 24A5h, 24A6h, 24A7h, 24A8h, 24A9h, 24AAh
.text:0040D19C                 dd 24ABh, 24ACh, 24ADh, 24AEh, 24AFh, 24B0h, 24B1h, 24B2h
.text:0040D19C                 dd 24B3h, 24B4h, 24B5h, 24B6h, 24B7h, 24B8h, 24B9h, 24BAh
.text:0040D19C                 dd 24BBh, 24BCh, 24BDh, 24BEh, 24BFh, 24C0h, 24C1h, 24C2h
.text:0040D19C                 dd 24C3h, 24C4h, 24C5h, 24C6h, 24C7h, 24C8h, 24C9h, 24CAh
.text:0040D19C                 dd 24CBh, 24CCh, 24CDh, 24CEh, 24CFh, 24D0h, 24D1h, 24D2h
.text:0040D19C                 dd 24D3h, 24D4h, 24D5h, 24D6h, 24D7h, 24D8h, 24D9h, 24DAh
.text:0040D19C                 dd 24DBh, 24DCh, 24DDh, 24DEh, 24DFh, 24E0h, 24E1h, 24E2h
.text:0040D19C                 dd 24E3h, 24E4h, 24E5h, 24E6h, 24E7h, 24E8h, 24E9h, 24EAh
.text:0040D19C                 dd 2500h, 2502h, 250Ch, 2510h, 2514h, 2518h, 251Ch, 2524h
.text:0040D19C                 dd 252Ch, 2534h, 253Ch, 25E6h, 2A74h, 2A75h, 2A76h, 3000h
.text:0040D19C                 dd 30A0h, 3251h, 3252h, 3253h, 3254h, 3255h, 3256h, 3257h
.text:0040D19C                 dd 3258h, 3259h, 325Ah, 325Bh, 325Ch, 325Dh, 325Eh, 325Fh
.text:0040D19C                 dd 32B1h, 32B2h, 32B3h, 32B4h, 32B5h, 32B6h, 32B7h, 32B8h
.text:0040D19C                 dd 32B9h, 32BAh, 32BBh, 32BCh, 32BDh, 32BEh, 32BFh, 3371h
.text:0040D19C                 dd 3372h, 3373h, 3374h, 3375h, 3376h, 3380h, 3381h, 3382h
.text:0040D19C                 dd 3383h, 3384h, 3385h, 3386h, 3387h, 3388h, 3389h, 338Ah
.text:0040D19C                 dd 338Bh, 338Ch, 338Dh, 338Eh, 338Fh, 3390h, 3391h, 3392h
.text:0040D19C                 dd 3393h, 3394h, 3395h, 3396h, 3397h, 3398h, 3399h, 339Ah
.text:0040D19C                 dd 339Bh, 339Ch, 339Dh, 339Eh, 339Fh, 33A0h, 33A1h, 33A2h
.text:0040D19C                 dd 33A3h, 33A4h, 33A5h, 33A6h, 33A7h, 33A8h, 33A9h, 33AAh
.text:0040D19C                 dd 33ABh, 33ACh, 33ADh, 33AEh, 33AFh, 33B0h, 33B1h, 33B2h
.text:0040D19C                 dd 33B3h, 33B4h, 33B5h, 33B6h, 33B7h, 33B8h, 33B9h, 33BAh
.text:0040D19C                 dd 33BBh, 33BCh, 33BDh, 33BEh, 33BFh, 33C2h, 33C3h, 33C4h
.text:0040D19C                 dd 33C5h, 33C6h, 33C7h, 33C8h, 33C9h, 33CAh, 33CBh, 33CCh
.text:0040D19C                 dd 33CDh, 33CEh, 33CFh, 33D0h, 33D1h, 33D2h, 33D3h, 33D4h
.text:0040D19C                 dd 33D5h, 33D6h, 33D7h, 33D8h, 33D9h, 33DAh, 33DBh, 33DCh
.text:0040D19C                 dd 33DDh, 0FB00h, 0FB01h, 0FB02h, 0FB03h, 0FB04h, 0FB06h
.text:0040D19C                 dd 0FB29h, 0FE00h, 0FE01h, 0FE02h, 0FE03h, 0FE04h, 0FE05h
.text:0040D19C                 dd 0FE06h, 0FE07h, 0FE08h, 0FE09h, 0FE0Ah, 0FE0Bh, 0FE0Ch
.text:0040D19C                 dd 0FE0Dh, 0FE0Eh, 0FE0Fh, 0FE4Dh, 0FE4Eh, 0FE4Fh, 0FE50h
.text:0040D19C                 dd 0FE52h, 0FE54h, 0FE55h, 0FE56h, 0FE57h, 0FE59h, 0FE5Ah
.text:0040D19C                 dd 0FE5Bh, 0FE5Ch, 0FE5Fh, 0FE60h, 0FE61h, 0FE62h, 0FE63h
.text:0040D19C                 dd 0FE64h, 0FE65h, 0FE66h, 0FE68h, 0FE69h, 0FE6Ah, 0FE6Bh
.text:0040D19C                 dd 0FEFFh, 0FF01h, 0FF02h, 0FF03h, 0FF04h, 0FF05h, 0FF06h
.text:0040D19C                 dd 0FF07h, 0FF08h, 0FF09h, 0FF0Ah, 0FF0Bh, 0FF0Ch, 0FF0Dh
.text:0040D19C                 dd 0FF0Eh, 0FF0Fh, 0FF10h, 0FF11h, 0FF12h, 0FF13h, 0FF14h
.text:0040D19C                 dd 0FF15h, 0FF16h, 0FF17h, 0FF18h, 0FF19h, 0FF1Ah, 0FF1Bh
.text:0040D19C                 dd 0FF1Ch, 0FF1Dh, 0FF1Eh, 0FF1Fh, 0FF20h, 0FF21h, 0FF22h
.text:0040D19C                 dd 0FF23h, 0FF24h, 0FF25h, 0FF26h, 0FF27h, 0FF28h, 0FF29h
.text:0040D19C                 dd 0FF2Ah, 0FF2Bh, 0FF2Ch, 0FF2Dh, 0FF2Eh, 0FF2Fh, 0FF30h
.text:0040D19C                 dd 0FF31h, 0FF32h, 0FF33h, 0FF34h, 0FF35h, 0FF36h, 0FF37h
.text:0040D19C                 dd 0FF38h, 0FF39h, 0FF3Ah, 0FF3Bh, 0FF3Ch, 0FF3Dh, 0FF3Eh
.text:0040D19C                 dd 0FF3Fh, 0FF40h, 0FF41h, 0FF42h, 0FF43h, 0FF44h, 0FF45h
.text:0040D19C                 dd 0FF46h, 0FF47h, 0FF48h, 0FF49h, 0FF4Ah, 0FF4Bh, 0FF4Ch
.text:0040D19C                 dd 0FF4Dh, 0FF4Eh, 0FF4Fh, 0FF50h, 0FF51h, 0FF52h, 0FF53h
.text:0040D19C                 dd 0FF54h, 0FF55h, 0FF56h, 0FF57h, 0FF58h, 0FF59h, 0FF5Ah
.text:0040D19C                 dd 0FF5Bh, 0FF5Ch, 0FF5Dh, 0FF5Eh, 0D400h, 0D401h, 0D402h
.text:0040D19C                 dd 0D403h, 0D404h, 0D405h, 0D406h, 0D407h, 0D408h, 0D409h
.text:0040D19C                 dd 0D40Ah, 0D40Bh, 0D40Ch, 0D40Dh, 0D40Eh, 0D40Fh, 0D410h
.text:0040D19C                 dd 0D411h, 0D412h, 0D413h, 0D414h, 0D415h, 0D416h, 0D417h
.text:0040D19C                 dd 0D418h, 0D419h, 0D41Ah, 0D41Bh, 0D41Ch, 0D41Dh, 0D41Eh
.text:0040D19C                 dd 0D41Fh, 0D420h, 0D421h, 0D422h, 0D423h, 0D424h, 0D425h
.text:0040D19C                 dd 0D426h, 0D427h, 0D428h, 0D429h, 0D42Ah, 0D42Bh, 0D42Ch
.text:0040D19C                 dd 0D42Dh, 0D42Eh, 0D42Fh
.text:0040D99C                 dd 0D430h, 0D431h, 0D432h, 0D433h, 0D434h, 0D435h, 0D436h
.text:0040D99C                 dd 0D437h, 0D438h, 0D439h, 0D43Ah, 0D43Bh, 0D43Ch, 0D43Dh
.text:0040D99C                 dd 0D43Eh, 0D43Fh, 0D440h, 0D441h, 0D442h, 0D443h, 0D444h
.text:0040D99C                 dd 0D445h, 0D446h, 0D447h, 0D448h, 0D449h, 0D44Ah, 0D44Bh
.text:0040D99C                 dd 0D44Ch, 0D44Dh, 0D44Eh, 0D44Fh, 0D450h, 0D451h, 0D452h
.text:0040D99C                 dd 0D453h, 0D454h, 0D456h, 0D457h, 0D458h, 0D459h, 0D45Ah
.text:0040D99C                 dd 0D45Bh, 0D45Ch, 0D45Dh, 0D45Eh, 0D45Fh, 0D460h, 0D461h
.text:0040D99C                 dd 0D462h, 0D463h, 0D464h, 0D465h, 0D466h, 0D467h, 0D468h
.text:0040D99C                 dd 0D469h, 0D46Ah, 0D46Bh, 0D46Ch, 0D46Dh, 0D46Eh, 0D46Fh
.text:0040D99C                 dd 0D470h, 0D471h, 0D472h, 0D473h, 0D474h, 0D475h, 0D476h
.text:0040D99C                 dd 0D477h, 0D478h, 0D479h, 0D47Ah, 0D47Bh, 0D47Ch, 0D47Dh
.text:0040D99C                 dd 0D47Eh, 0D47Fh, 0D480h, 0D481h, 0D482h, 0D483h, 0D484h
.text:0040D99C                 dd 0D485h, 0D486h, 0D487h, 0D488h, 0D489h, 0D48Ah, 0D48Bh
.text:0040D99C                 dd 0D48Ch, 0D48Dh, 0D48Eh, 0D48Fh, 0D490h, 0D491h, 0D492h
.text:0040D99C                 dd 0D493h, 0D494h, 0D495h, 0D496h, 0D497h, 0D498h, 0D499h
.text:0040D99C                 dd 0D49Ah, 0D49Bh, 0D49Ch, 0D49Eh, 0D49Fh, 0D4A2h, 0D4A5h
.text:0040D99C                 dd 0D4A6h, 0D4A9h, 0D4AAh, 0D4ABh, 0D4ACh, 0D4AEh, 0D4AFh
.text:0040D99C                 dd 0D4B0h, 0D4B1h, 0D4B2h, 0D4B3h, 0D4B4h, 0D4B5h, 0D4B6h
.text:0040D99C                 dd 0D4B7h, 0D4B8h, 0D4B9h, 0D4BBh, 0D4BDh, 0D4BEh, 0D4BFh
.text:0040D99C                 dd 0D4C0h, 0D4C2h, 0D4C3h, 0D4C5h, 0D4C6h, 0D4C7h, 0D4C8h
.text:0040D99C                 dd 0D4C9h, 0D4CAh, 0D4CBh, 0D4CCh, 0D4CDh, 0D4CEh, 0D4CFh
.text:0040D99C                 dd 0D4D0h, 0D4D1h, 0D4D2h, 0D4D3h, 0D4D4h, 0D4D5h, 0D4D6h
.text:0040D99C                 dd 0D4D7h, 0D4D8h, 0D4D9h, 0D4DAh, 0D4DBh, 0D4DCh, 0D4DDh
.text:0040D99C                 dd 0D4DEh, 0D4DFh, 0D4E0h, 0D4E1h, 0D4E2h, 0D4E3h, 0D4E4h
.text:0040D99C                 dd 0D4E5h, 0D4E6h, 0D4E7h, 0D4E8h, 0D4E9h, 0D4EAh, 0D4EBh
.text:0040D99C                 dd 0D4ECh, 0D4EDh, 0D4EEh, 0D4EFh, 0D4F0h, 0D4F1h, 0D4F2h
.text:0040D99C                 dd 0D4F3h, 0D4F4h, 0D4F5h, 0D4F6h, 0D4F7h, 0D4F8h, 0D4F9h
.text:0040D99C                 dd 0D4FAh, 0D4FBh, 0D4FCh, 0D4FDh, 0D4FEh, 0D4FFh, 0D500h
.text:0040D99C                 dd 0D501h, 0D502h, 0D503h, 0D504h, 0D505h, 0D507h, 0D508h
.text:0040D99C                 dd 0D509h, 0D50Ah, 0D50Dh, 0D50Eh, 0D50Fh, 0D510h, 0D511h
.text:0040D99C                 dd 0D512h, 0D513h, 0D514h, 0D516h, 0D517h, 0D518h, 0D519h
.text:0040D99C                 dd 0D51Ah, 0D51Bh, 0D51Ch, 0D51Eh, 0D51Fh, 0D520h, 0D521h
.text:0040D99C                 dd 0D522h, 0D523h, 0D524h, 0D525h, 0D526h, 0D527h, 0D528h
.text:0040D99C                 dd 0D529h, 0D52Ah, 0D52Bh, 0D52Ch, 0D52Dh, 0D52Eh, 0D52Fh
.text:0040D99C                 dd 0D530h, 0D531h, 0D532h, 0D533h, 0D534h, 0D535h, 0D536h
.text:0040D99C                 dd 0D537h, 0D538h, 0D539h, 0D53Bh, 0D53Ch, 0D53Dh, 0D53Eh
.text:0040D99C                 dd 0D540h, 0D541h, 0D542h, 0D543h, 0D544h, 0D546h, 0D54Ah
.text:0040D99C                 dd 0D54Bh, 0D54Ch, 0D54Dh, 0D54Eh, 0D54Fh, 0D550h, 0D552h
.text:0040D99C                 dd 0D553h, 0D554h, 0D555h, 0D556h, 0D557h, 0D558h, 0D559h
.text:0040D99C                 dd 0D55Ah, 0D55Bh, 0D55Ch, 0D55Dh, 0D55Eh, 0D55Fh, 0D560h
.text:0040D99C                 dd 0D561h, 0D562h, 0D563h, 0D564h, 0D565h, 0D566h, 0D567h
.text:0040D99C                 dd 0D568h, 0D569h, 0D56Ah, 0D56Bh, 0D56Ch, 0D56Dh, 0D56Eh
.text:0040D99C                 dd 0D56Fh, 0D570h, 0D571h, 0D572h, 0D573h, 0D574h, 0D575h
.text:0040D99C                 dd 0D576h, 0D577h, 0D578h, 0D579h, 0D57Ah, 0D57Bh, 0D57Ch
.text:0040D99C                 dd 0D57Dh, 0D57Eh, 0D57Fh, 0D580h, 0D581h, 0D582h, 0D583h
.text:0040D99C                 dd 0D584h, 0D585h, 0D586h, 0D587h, 0D588h, 0D589h, 0D58Ah
.text:0040D99C                 dd 0D58Bh, 0D58Ch, 0D58Dh, 0D58Eh, 0D58Fh, 0D590h, 0D591h
.text:0040D99C                 dd 0D592h, 0D593h, 0D594h, 0D595h, 0D596h, 0D597h, 0D598h
.text:0040D99C                 dd 0D599h, 0D59Ah, 0D59Bh, 0D59Ch, 0D59Dh, 0D59Eh, 0D59Fh
.text:0040D99C                 dd 0D5A0h, 0D5A1h, 0D5A2h, 0D5A3h, 0D5A4h, 0D5A5h, 0D5A6h
.text:0040D99C                 dd 0D5A7h, 0D5A8h, 0D5A9h, 0D5AAh, 0D5ABh, 0D5ACh, 0D5ADh
.text:0040D99C                 dd 0D5AEh, 0D5AFh, 0D5B0h, 0D5B1h, 0D5B2h, 0D5B3h, 0D5B4h
.text:0040D99C                 dd 0D5B5h, 0D5B6h, 0D5B7h, 0D5B8h, 0D5B9h, 0D5BAh, 0D5BBh
.text:0040D99C                 dd 0D5BCh, 0D5BDh, 0D5BEh, 0D5BFh, 0D5C0h, 0D5C1h, 0D5C2h
.text:0040D99C                 dd 0D5C3h, 0D5C4h, 0D5C5h, 0D5C6h, 0D5C7h, 0D5C8h, 0D5C9h
.text:0040D99C                 dd 0D5CAh, 0D5CBh, 0D5CCh, 0D5CDh, 0D5CEh, 0D5CFh, 0D5D0h
.text:0040D99C                 dd 0D5D1h, 0D5D2h, 0D5D3h, 0D5D4h, 0D5D5h, 0D5D6h, 0D5D7h
.text:0040D99C                 dd 0D5D8h, 0D5D9h, 0D5DAh, 0D5DBh, 0D5DCh, 0D5DDh, 0D5DEh
.text:0040D99C                 dd 0D5DFh, 0D5E0h, 0D5E1h, 0D5E2h, 0D5E3h, 0D5E4h, 0D5E5h
.text:0040D99C                 dd 0D5E6h, 0D5E7h, 0D5E8h, 0D5E9h, 0D5EAh, 0D5EBh, 0D5ECh
.text:0040D99C                 dd 0D5EDh, 0D5EEh, 0D5EFh, 0D5F0h, 0D5F1h, 0D5F2h, 0D5F3h
.text:0040D99C                 dd 0D5F4h, 0D5F5h, 0D5F6h, 0D5F7h, 0D5F8h, 0D5F9h, 0D5FAh
.text:0040D99C                 dd 0D5FBh, 0D5FCh, 0D5FDh, 0D5FEh, 0D5FFh, 0D600h, 0D601h
.text:0040D99C                 dd 0D602h, 0D603h, 0D604h, 0D605h, 0D606h, 0D607h, 0D608h
.text:0040D99C                 dd 0D609h, 0D60Ah, 0D60Bh, 0D60Ch, 0D60Dh, 0D60Eh, 0D60Fh
.text:0040D99C                 dd 0D610h, 0D611h, 0D612h, 0D613h, 0D614h, 0D615h, 0D616h
.text:0040D99C                 dd 0D617h, 0D618h, 0D619h, 0D61Ah, 0D61Bh, 0D61Ch, 0D61Dh
.text:0040D99C                 dd 0D61Eh, 0D61Fh, 0D620h, 0D621h, 0D622h, 0D623h, 0D624h
.text:0040D99C                 dd 0D625h, 0D626h, 0D627h, 0D628h, 0D629h, 0D62Ah, 0D62Bh
.text:0040D99C                 dd 0D62Ch, 0D62Dh, 0D62Eh, 0D62Fh, 0D630h, 0D631h, 0D632h
.text:0040D99C                 dd 0D633h, 0D634h, 0D635h, 0D636h, 0D637h, 0D638h, 0D639h
.text:0040D99C                 dd 0D63Ah, 0D63Bh, 0D63Ch, 0D63Dh, 0D63Eh, 0D63Fh, 0D640h
.text:0040D99C                 dd 0D641h, 0D642h, 0D643h, 0D644h, 0D645h, 0D646h, 0D647h
.text:0040D99C                 dd 0D648h
.text:0040E19C                 dd 0D649h, 0D64Ah, 0D64Bh, 0D64Ch, 0D64Dh, 0D64Eh, 0D64Fh
.text:0040E19C                 dd 0D650h, 0D651h, 0D652h, 0D653h, 0D654h, 0D655h, 0D656h
.text:0040E19C                 dd 0D657h, 0D658h, 0D659h, 0D65Ah, 0D65Bh, 0D65Ch, 0D65Dh
.text:0040E19C                 dd 0D65Eh, 0D65Fh, 0D660h, 0D661h, 0D662h, 0D663h, 0D664h
.text:0040E19C                 dd 0D665h, 0D666h, 0D667h, 0D668h, 0D669h, 0D66Ah, 0D66Bh
.text:0040E19C                 dd 0D66Ch, 0D66Dh, 0D66Eh, 0D66Fh, 0D670h, 0D671h, 0D672h
.text:0040E19C                 dd 0D673h, 0D674h, 0D675h, 0D676h, 0D677h, 0D678h, 0D679h
.text:0040E19C                 dd 0D67Ah, 0D67Bh, 0D67Ch, 0D67Dh, 0D67Eh, 0D67Fh, 0D680h
.text:0040E19C                 dd 0D681h, 0D682h, 0D683h, 0D684h, 0D685h, 0D686h, 0D687h
.text:0040E19C                 dd 0D688h, 0D689h, 0D68Ah, 0D68Bh, 0D68Ch, 0D68Dh, 0D68Eh
.text:0040E19C                 dd 0D68Fh, 0D690h, 0D691h, 0D692h, 0D693h, 0D694h, 0D695h
.text:0040E19C                 dd 0D696h, 0D697h, 0D698h, 0D699h, 0D69Ah, 0D69Bh, 0D69Ch
.text:0040E19C                 dd 0D69Dh, 0D69Eh, 0D69Fh, 0D6A0h, 0D6A1h, 0D6A2h, 0D6A3h
.text:0040E19C                 dd 0D7CEh, 0D7CFh, 0D7D0h, 0D7D1h, 0D7D2h, 0D7D3h, 0D7D4h
.text:0040E19C                 dd 0D7D5h, 0D7D6h, 0D7D7h, 0D7D8h, 0D7D9h, 0D7DAh, 0D7DBh
.text:0040E19C                 dd 0D7DCh, 0D7DDh, 0D7DEh, 0D7DFh, 0D7E0h, 0D7E1h, 0D7E2h
.text:0040E19C                 dd 0D7E3h, 0D7E4h, 0D7E5h, 0D7E6h, 0D7E7h, 0D7E8h, 0D7E9h
.text:0040E19C                 dd 0D7EAh, 0D7EBh, 0D7ECh, 0D7EDh, 0D7EEh, 0D7EFh, 0D7F0h
.text:0040E19C                 dd 0D7F1h, 0D7F2h, 0D7F3h, 0D7F4h, 0D7F5h, 0D7F6h, 0D7F7h
.text:0040E19C                 dd 0D7F8h, 0D7F9h, 0D7FAh, 0D7FBh, 0D7FCh, 0D7FDh, 0D7FEh
.text:0040E19C                 dd 0D7FFh, 0
.text:0040E3D4                 dd 3, 8, 0Ch, 0Fh, 14h, 17h, 1Ah, 1Eh, 25h, 2Ch, 33h, 37h
.text:0040E3D4                 dd 3Ah, 3Eh, 42h, 46h, 4Ah, 4Eh, 52h, 56h, 5Ah, 5Eh, 61h
.text:0040E3D4                 dd 65h, 69h, 6Dh, 71h, 75h, 79h, 7Dh, 81h, 85h, 88h, 8Bh
.text:0040E3D4                 dd 8Eh, 91h, 94h, 97h, 9Ah, 9Dh, 0A0h, 0A3h, 0A6h, 0A9h
.text:0040E3D4                 dd 0ACh, 0AFh, 0B2h, 0B4h, 0B7h, 0BAh, 0BDh, 0C0h, 0C4h
.text:0040E3D4                 dd 0C7h, 0CAh, 0CDh, 0D0h, 0D3h, 0D6h, 0D9h, 0DDh, 0E0h
.text:0040E3D4                 dd 0E3h, 0E6h, 0E9h, 0EDh, 0F2h, 0F5h, 0F8h, 0FCh, 101h
.text:0040E3D4                 dd 104h, 107h, 10Bh, 10Fh, 113h, 117h, 11Ah, 11Ch, 11Eh
.text:0040E3D4                 dd 120h, 122h, 126h, 12Bh, 130h, 135h, 138h, 13Dh, 142h
.text:0040E3D4                 dd 145h, 148h, 14Bh, 14Eh, 151h, 154h, 157h, 15Ah, 15Dh
.text:0040E3D4                 dd 160h, 164h, 167h, 16Ah, 16Dh, 170h, 173h, 178h, 17Eh
.text:0040E3D4                 dd 181h, 186h, 189h, 18Ch, 18Fh, 192h, 195h, 198h, 19Bh
.text:0040E3D4                 dd 19Eh, 1A1h, 1A4h, 1A7h, 1AAh, 1ADh, 1B0h, 1B3h, 1BAh
.text:0040E3D4                 dd 1C1h, 1C8h, 1CFh, 1D6h, 1DDh, 1E4h, 1EBh, 1F2h, 1F9h
.text:0040E3D4                 dd 200h, 207h, 20Ch, 20Fh, 213h, 218h, 21Ch, 21Fh, 223h
.text:0040E3D4                 dd 228h, 22Eh, 232h, 235h, 239h, 23Eh, 241h, 244h, 247h
.text:0040E3D4                 dd 24Ah, 24Dh, 251h, 256h, 25Ah, 25Dh, 261h, 266h, 26Ch
.text:0040E3D4                 dd 270h, 273h, 277h, 27Ch, 27Fh, 282h, 285h, 288h, 28Ch
.text:0040E3D4                 dd 290h, 295h, 299h, 29Dh, 2A2h, 2A5h, 2A8h, 2ABh, 2AEh
.text:0040E3D4                 dd 2B1h, 2B4h, 2B7h, 2BBh, 2BFh, 2C3h, 2C7h, 2CCh, 2D1h
.text:0040E3D4                 dd 2D6h, 2DBh, 2E0h, 2E5h, 2EAh, 2EFh, 2F4h, 2F9h, 2FDh
.text:0040E3D4                 dd 301h, 305h, 309h, 30Dh, 311h, 315h, 319h, 31Eh, 323h
.text:0040E3D4                 dd 328h, 32Dh, 332h, 337h, 33Ch, 341h, 346h, 34Ah, 34Fh
.text:0040E3D4                 dd 354h, 358h, 35Ch, 360h, 364h, 368h, 36Dh, 370h, 374h
.text:0040E3D4                 dd 379h, 37Eh, 383h, 388h, 38Dh, 392h, 397h, 39Ch, 3A1h
.text:0040E3D4                 dd 3A7h, 3ADh, 3B3h, 3B9h, 3BFh, 3C5h, 3CBh, 3D1h, 3D7h
.text:0040E3D4                 dd 3DDh, 3E3h, 3E8h, 3EDh, 3F2h, 3F7h, 3FCh, 401h, 406h
.text:0040E3D4                 dd 40Bh, 410h, 416h, 41Ch, 422h, 428h, 42Eh, 434h, 43Ah
.text:0040E3D4                 dd 440h, 446h, 44Ch, 452h, 456h, 45Ah, 45Eh, 462h, 466h
.text:0040E3D4                 dd 46Ah, 46Eh, 472h, 476h, 47Bh, 480h, 485h, 48Ah, 48Fh
.text:0040E3D4                 dd 494h, 499h, 49Eh, 4A3h, 4A8h, 4ADh, 4B2h, 4B7h, 4BCh
.text:0040E3D4                 dd 4C1h, 4C6h, 4CBh, 4D0h, 4D5h, 4DAh, 4DFh, 4E4h, 4E9h
.text:0040E3D4                 dd 4EEh, 4F3h, 4F8h, 4FDh, 502h, 507h, 50Ch, 511h, 516h
.text:0040E3D4                 dd 51Bh, 520h, 525h, 52Ah, 52Fh, 534h, 539h, 53Eh, 543h
.text:0040E3D4                 dd 548h, 54Dh, 552h, 557h, 55Ch, 561h, 566h, 56Bh, 570h
.text:0040E3D4                 dd 575h, 57Ah, 57Fh, 584h, 589h, 58Eh, 593h, 598h, 59Dh
.text:0040E3D4                 dd 5A2h, 5A7h, 5ACh, 5B1h, 5B6h, 5BBh, 5C0h, 5C5h, 5CAh
.text:0040E3D4                 dd 5CFh, 5D4h, 5D9h, 5DEh, 5E3h, 5E8h, 5EDh, 5F2h, 5F7h
.text:0040E3D4                 dd 5FCh, 601h, 606h, 60Bh, 610h, 615h, 61Ah, 61Fh, 624h
.text:0040E3D4                 dd 629h, 62Eh, 633h, 638h, 63Bh, 63Eh, 641h, 644h, 647h
.text:0040E3D4                 dd 64Ah, 64Dh, 650h, 653h, 656h, 659h, 65Ch, 661h, 665h
.text:0040E3D4                 dd 66Ah, 66Dh, 670h, 676h, 67Ch, 682h, 688h, 68Eh, 694h
.text:0040E3D4                 dd 69Ah, 6A0h, 6A6h, 6ACh, 6B2h, 6B8h, 6BEh, 6C4h, 6CAh
.text:0040E3D4                 dd 6D0h, 6D6h, 6DCh, 6E2h, 6E8h, 6EEh, 6F4h, 6FAh, 700h
.text:0040E3D4                 dd 706h, 70Ch, 712h, 718h, 71Eh, 724h, 729h, 72Dh, 731h
.text:0040E3D4                 dd 736h, 73Ah, 73Eh, 742h, 746h, 74Ah, 74Eh, 752h, 756h
.text:0040E3D4                 dd 75Ah, 75Eh, 763h, 769h, 76Dh, 771h, 775h, 779h, 77Dh
.text:0040E3D4                 dd 781h, 785h, 78Ah, 78Fh, 794h, 799h, 79Dh, 7A1h, 7A5h
.text:0040E3D4                 dd 7A9h, 7ADh, 7B1h, 7B5h, 7B9h, 7BDh, 7C1h, 7C7h, 7CDh
.text:0040E3D4                 dd 7D2h, 7D8h, 7DEh, 7E4h, 7E9h, 7EFh, 7F4h, 7FBh, 7FFh
.text:0040E3D4                 dd 804h, 809h, 80Eh, 813h, 81Ah, 823h, 827h, 82Bh, 82Fh
.text:0040E3D4                 dd 833h, 837h, 83Bh, 83Fh, 843h, 847h, 84Bh, 84Fh, 853h
.text:0040E3D4                 dd 857h, 85Bh, 85Fh, 863h, 869h, 86Dh, 871h, 875h, 87Bh
.text:0040E3D4                 dd 880h, 884h, 888h, 88Ch, 890h, 894h, 898h, 89Ch, 8A0h
.text:0040E3D4                 dd 8A4h, 8A8h, 8ADh, 8B1h, 8B5h, 8BAh, 8BFh, 8C3h, 8C9h
.text:0040E3D4                 dd 8CEh, 8D2h, 8D6h, 8DAh, 8DEh, 8E2h, 8E6h, 8EAh, 8EFh
.text:0040EBD4                 dd 8F4h, 8F8h, 8FBh, 8FDh, 8FFh, 901h, 903h, 905h, 907h
.text:0040EBD4                 dd 909h, 90Bh, 90Dh, 90Fh, 911h, 913h, 915h, 917h, 919h
.text:0040EBD4                 dd 91Bh, 91Eh, 921h, 924h, 927h, 92Ah, 92Dh, 930h, 933h
.text:0040EBD4                 dd 936h, 939h, 93Ch, 93Fh, 942h, 945h, 948h, 94Bh, 94Eh
.text:0040EBD4                 dd 951h, 954h, 957h, 95Ah, 95Dh, 960h, 963h, 966h, 968h
.text:0040EBD4                 dd 96Bh, 96Eh, 971h, 974h, 977h, 97Ah, 97Dh, 980h, 983h
.text:0040EBD4                 dd 986h, 989h, 98Ch, 98Fh, 992h, 995h, 998h, 99Bh, 99Eh
.text:0040EBD4                 dd 9A1h, 9A4h, 9A7h, 9AAh, 9ADh, 9B0h, 9B3h, 9B6h, 9B9h
.text:0040EBD4                 dd 9BCh, 9BFh, 9C2h, 9C5h, 9C8h, 9CBh, 9CEh, 9D1h, 9D4h
.text:0040EBD4                 dd 9D7h, 9DAh, 9DDh, 9E0h, 9E3h, 9E6h, 9E9h, 9ECh, 9EFh
.text:0040EBD4                 dd 9F2h, 9F5h, 9F8h, 9FBh, 9FEh, 0A01h, 0A04h, 0A07h, 0A0Ah
.text:0040EBD4                 dd 0A0Dh, 0A10h, 0A13h, 0A16h, 0A19h, 0A1Ch, 0A1Fh, 0A22h
.text:0040EBD4                 dd 0A25h, 0A28h, 0A2Bh, 0A2Eh, 0A31h, 0A34h, 0A37h, 0A3Ah
.text:0040EBD4                 dd 0A3Dh, 0A40h, 0A43h, 0A46h, 0A49h, 0A4Ch, 0A4Fh, 0A52h
.text:0040EBD4                 dd 0A55h, 0A58h, 0A5Bh, 0A5Eh, 0A61h, 0A64h, 0A67h, 0A6Ah
.text:0040EBD4                 dd 0A6Dh, 0A70h, 0A73h, 0A76h, 0A79h, 0A7Ch, 0A7Fh, 0A82h
.text:0040EBD4                 dd 0A85h, 0A88h, 0A8Bh, 0A8Eh, 0A91h, 0A94h, 0A97h, 0A9Ah
.text:0040EBD4                 dd 0A9Dh, 0AA0h, 0AA3h, 0AA6h, 0AA9h, 0AACh, 0AAFh, 0AB2h
.text:0040EBD4                 dd 0AB5h, 0AB8h, 0ABBh, 0ABEh, 0AC1h, 0AC4h, 0AC7h, 0ACAh
.text:0040EBD4                 dd 0ACDh, 0AD0h, 0AD3h, 0AD6h, 0AD9h, 0ADCh, 0ADFh, 0AE2h
.text:0040EBD4                 dd 0AE5h, 0AE8h, 0AEBh, 0AEEh, 0AF1h, 0AF4h, 0AF7h, 0AFAh
.text:0040EBD4                 dd 0AFDh, 0B00h, 0B03h, 0B06h, 0B09h, 0B0Ch, 0B0Fh, 0B12h
.text:0040EBD4                 dd 0B15h, 0B18h, 0B1Bh, 0B1Eh, 0B21h, 0B24h, 0B27h, 0B2Ah
.text:0040EBD4                 dd 0B2Dh, 0B30h, 0B33h, 0B36h, 0B39h, 0B3Ch, 0B3Fh, 0B42h
.text:0040EBD4                 dd 0B45h, 0B48h, 0B4Bh, 0B4Eh, 0B51h, 0B54h, 0B57h, 0B5Ah
.text:0040EBD4                 dd 0B5Dh, 0B60h, 0B63h, 0B66h, 0B69h, 0B6Ch, 0B6Fh, 0B72h
.text:0040EBD4                 dd 0B75h, 0B78h, 0B7Bh, 0B7Eh, 0B81h, 0B84h, 0B87h, 0B8Ah
.text:0040EBD4                 dd 0B8Dh, 0B90h, 0B93h, 0B96h, 0B99h, 0B9Ch, 0B9Fh, 0BA2h
.text:0040EBD4                 dd 0BA5h, 0BA8h, 0BABh, 0BAEh, 0BB1h, 0BB4h, 0BB7h, 0BBAh
.text:0040EBD4                 dd 0BBDh, 0BC0h, 0BC3h, 0BC6h, 0BC9h, 0BCCh, 0BCFh, 0BD2h
.text:0040EBD4                 dd 0BD5h, 0BD8h, 0BDBh, 0BDEh, 0BE1h, 0BE4h, 0BE7h, 0BEAh
.text:0040EBD4                 dd 0BEDh, 0BF0h, 0BF3h, 0BF6h, 0BF9h, 0BFCh, 0BFFh, 0C02h
.text:0040EBD4                 dd 0C05h, 0C08h, 0C0Bh, 0C0Eh, 0C11h, 0C14h, 0C17h, 0C1Ah
.text:0040EBD4                 dd 0C1Dh, 0C20h, 0C23h, 0C26h, 0C29h, 0C2Ch, 0C2Fh, 0C32h
.text:0040EBD4                 dd 0C35h, 0C38h, 0C3Bh, 0C3Eh, 0C41h, 0C44h, 0C47h, 0C4Ah
.text:0040EBD4                 dd 0C4Dh, 0C50h, 0C53h, 0C56h, 0C59h, 0C5Ch, 0C5Fh, 0C62h
.text:0040EBD4                 dd 0C65h, 0C68h, 0C6Bh, 0C6Eh, 0C71h, 0C74h, 0C77h, 0C7Ah
.text:0040EBD4                 dd 0C7Dh, 0C80h, 0C83h, 0C86h, 0C89h, 0C8Ch, 0C8Fh, 0C92h
.text:0040EBD4                 dd 0C95h, 0C98h, 0C9Bh, 0C9Eh, 0CA1h, 0CA4h, 0CA7h, 0CAAh
.text:0040EBD4                 dd 0CADh, 0CB0h, 0CB3h, 0CB6h, 0CB9h, 0CBCh, 0CBFh, 0CC2h
.text:0040EBD4                 dd 0CC5h, 0CC8h, 0CCBh, 0CCEh, 0CD1h, 0CD4h, 0CD7h, 0CDAh
.text:0040EBD4                 dd 0CDDh, 0CE0h, 0CE3h, 0CE6h, 0CE9h, 0CECh, 0CEFh, 0CF2h
.text:0040EBD4                 dd 0CF5h, 0CF8h, 0CFBh, 0CFEh, 0D01h, 0D04h, 0D07h, 0D0Ah
.text:0040EBD4                 dd 0D0Dh, 0D10h, 0D13h, 0D16h, 0D19h, 0D1Ch, 0D1Fh, 0D22h
.text:0040EBD4                 dd 0D25h, 0D28h, 0D2Bh, 0D2Eh, 0D31h, 0D34h, 0D37h, 0D3Ah
.text:0040EBD4                 dd 0D3Dh, 0D40h, 0D43h, 0D46h, 0D49h, 0D4Ch, 0D4Fh, 0D52h
.text:0040EBD4                 dd 0D55h, 0D58h, 0D5Bh, 0D5Eh, 0D61h, 0D64h, 0D67h, 0D6Ah
.text:0040EBD4                 dd 0D6Dh, 0D70h, 0D73h, 0D76h, 0D79h, 0D7Ch, 0D7Fh, 0D82h
.text:0040EBD4                 dd 0D85h, 0D88h, 0D8Bh, 0D8Eh, 0D91h, 0D94h, 0D97h, 0D9Ah
.text:0040EBD4                 dd 0D9Dh, 0DA0h, 0DA3h, 0DA6h, 0DA9h, 0DACh, 0DAFh, 0DB2h
.text:0040EBD4                 dd 0DB5h, 0DB8h, 0DBBh, 0DBEh, 0DC1h, 0DC4h, 0DC7h, 0DCAh
.text:0040EBD4                 dd 0DCDh, 0DD0h, 0DD3h, 0DD6h, 0DD9h, 0DDCh, 0DDFh, 0DE2h
.text:0040EBD4                 dd 0DE5h, 0DE8h, 0DEBh, 0DEEh, 0DF1h, 0DF4h, 0DF7h, 0DFAh
.text:0040EBD4                 dd 0DFDh, 0E00h, 0E03h, 0E06h, 0E09h, 0E0Ch, 0E0Fh, 0E12h
.text:0040EBD4                 dd 0E15h, 0E18h, 0E1Bh, 0E1Eh, 0E21h, 0E24h, 0E27h, 0E2Ah
.text:0040EBD4                 dd 0E2Dh, 0E30h, 0E33h, 0E36h, 0E39h, 0E3Ch, 0E3Fh, 0E42h
.text:0040EBD4                 dd 0E45h, 0E48h, 0E4Bh, 0E4Eh, 0E51h, 0E54h, 0E57h, 0E5Ah
.text:0040EBD4                 dd 0E5Dh, 0E60h, 0E63h, 0E66h, 0E69h, 0E6Ch, 0E6Fh, 0E72h
.text:0040EBD4                 dd 0E75h, 0E78h, 0E7Bh, 0E7Eh, 0E81h, 0E84h, 0E87h, 0E8Ah
.text:0040EBD4                 dd 0E8Dh, 0E90h, 0E93h, 0E96h, 0E99h, 0E9Ch, 0E9Fh, 0EA2h
.text:0040EBD4                 dd 0EA5h, 0EA8h, 0EABh, 0EAEh, 0EB1h, 0EB4h, 0EB7h, 0EBAh
.text:0040EBD4                 dd 0EBDh, 0EC0h, 0EC3h, 0EC6h, 0EC9h, 0ECCh, 0ECFh, 0ED2h
.text:0040EBD4                 dd 0ED5h, 0ED8h, 0EDBh, 0EDEh, 0EE1h
.text:0040F3D4                 dd 0EE4h, 0EE7h, 0EEAh, 0EEDh, 0EF0h, 0EF3h, 0EF6h, 0EF9h
.text:0040F3D4                 dd 0EFCh, 0EFFh, 0F02h, 0F05h, 0F08h, 0F0Bh, 0F0Eh, 0F11h
.text:0040F3D4                 dd 0F14h, 0F17h, 0F1Ah, 0F1Dh, 0F20h, 0F23h, 0F26h, 0F29h
.text:0040F3D4                 dd 0F2Ch, 0F2Fh, 0F32h, 0F35h, 0F38h, 0F3Bh, 0F3Eh, 0F41h
.text:0040F3D4                 dd 0F44h, 0F47h, 0F4Ah, 0F4Dh, 0F50h, 0F53h, 0F56h, 0F59h
.text:0040F3D4                 dd 0F5Ch, 0F5Fh, 0F62h, 0F65h, 0F68h, 0F6Bh, 0F6Eh, 0F71h
.text:0040F3D4                 dd 0F74h, 0F77h, 0F7Ah, 0F7Dh, 0F80h, 0F83h, 0F86h, 0F89h
.text:0040F3D4                 dd 0F8Ch, 0F8Fh, 0F92h, 0F95h, 0F98h, 0F9Bh, 0F9Eh, 0FA1h
.text:0040F3D4                 dd 0FA4h, 0FA7h, 0FAAh, 0FADh, 0FB0h, 0FB3h, 0FB6h, 0FB9h
.text:0040F3D4                 dd 0FBCh, 0FBFh, 0FC2h, 0FC5h, 0FC8h, 0FCBh, 0FCEh, 0FD1h
.text:0040F3D4                 dd 0FD4h, 0FD7h, 0FDAh, 0FDDh, 0FE0h, 0FE3h, 0FE6h, 0FE9h
.text:0040F3D4                 dd 0FECh, 0FEFh, 0FF2h, 0FF5h, 0FF8h, 0FFBh, 0FFEh, 1001h
.text:0040F3D4                 dd 1004h, 1007h, 100Ah, 100Dh, 1010h, 1013h, 1016h, 1019h
.text:0040F3D4                 dd 101Ch, 101Fh, 1022h, 1025h, 1028h, 102Bh, 102Eh, 1031h
.text:0040F3D4                 dd 1034h, 1037h, 103Ah, 103Dh, 1040h, 1043h, 1046h, 1049h
.text:0040F3D4                 dd 104Ch, 104Fh, 1052h, 1055h, 1058h, 105Bh, 105Eh, 1061h
.text:0040F3D4                 dd 1064h, 1067h, 106Ah, 106Dh, 1070h, 1073h, 1076h, 1079h
.text:0040F3D4                 dd 107Ch, 107Fh, 1082h, 1085h, 1088h, 108Bh, 108Eh, 1091h
.text:0040F3D4                 dd 1094h, 1097h, 109Ah, 109Dh, 10A0h, 10A3h, 10A6h, 10A9h
.text:0040F3D4                 dd 10ACh, 10AFh, 10B2h, 10B5h, 10B8h, 10BBh, 10BEh, 10C1h
.text:0040F3D4                 dd 10C4h, 10C7h, 10CAh, 10CDh, 10D0h, 10D3h, 10D6h, 10D9h
.text:0040F3D4                 dd 10DCh, 10DFh, 10E2h, 10E5h, 10E8h, 10EBh, 10EEh, 10F1h
.text:0040F3D4                 dd 10F4h, 10F7h, 10FAh, 10FDh, 1100h, 1103h, 1106h, 1109h
.text:0040F3D4                 dd 110Ch, 110Fh, 1112h, 1115h, 1118h, 111Bh, 111Eh, 1121h
.text:0040F3D4                 dd 1124h, 1127h, 112Ah, 112Dh, 1130h, 1133h, 1136h, 1139h
.text:0040F3D4                 dd 113Ch, 113Fh, 1142h, 1145h, 1148h, 114Bh, 114Eh, 1151h
.text:0040F3D4                 dd 1154h, 1157h, 115Ah, 115Dh, 1160h, 1163h, 1166h, 1169h
.text:0040F3D4                 dd 116Ch, 116Fh, 1172h, 1175h, 1178h, 117Bh, 117Eh, 1181h
.text:0040F3D4                 dd 1184h, 1187h, 118Ah, 118Dh, 1190h, 1193h, 1196h, 1199h
.text:0040F3D4                 dd 119Ch, 119Fh, 11A2h, 11A5h, 11A8h, 11ABh, 11AEh, 11B1h
.text:0040F3D4                 dd 11B4h, 11B7h, 11BAh, 11BDh, 11C0h, 11C3h, 11C6h, 11C9h
.text:0040F3D4                 dd 11CCh, 11CFh, 11D2h, 11D5h, 11D8h, 11DBh, 11DEh, 11E1h
.text:0040F3D4                 dd 11E4h, 11E7h, 11EAh, 11EDh, 11F0h, 11F3h, 11F6h, 11F9h
.text:0040F3D4                 dd 11FCh, 11FFh, 1202h, 1205h, 1208h, 120Bh, 120Eh, 1211h
.text:0040F3D4                 dd 1214h, 1217h, 121Ah, 121Dh, 1220h, 1223h, 1226h, 1229h
.text:0040F3D4                 dd 122Ch, 122Fh, 1232h, 1235h, 1238h, 123Bh, 123Eh, 1241h
.text:0040F3D4                 dd 1244h, 1247h, 124Ah, 124Dh, 1250h, 1253h, 1256h, 1259h
.text:0040F3D4                 dd 125Ch, 125Fh, 1262h, 1265h, 1268h, 126Bh, 126Eh, 1271h
.text:0040F3D4                 dd 1274h, 1277h, 127Ah, 127Dh, 1280h, 1283h, 1286h, 1289h
.text:0040F3D4                 dd 128Ch, 128Fh, 1292h, 1295h, 1298h, 129Bh, 129Eh, 12A1h
.text:0040F3D4                 dd 12A4h, 12A7h, 12AAh, 12ADh, 12B0h, 12B3h, 12B6h, 20h
.text:0040F3D4                 dd 280000h, 290043h, 0
.text:0040F900                 text "UTF-16LE", '<<',0
.text:0040F906                 align 4
.text:0040F908                 text "UTF-16LE", '-',0
.text:0040F90C                 dd 280000h, 290052h, 0
.text:0040F918                 dd 75h, 2C0000h, 0
.text:0040F924                 text "UTF-16LE", '>>',0
.text:0040F92A                 align 4
.text:0040F92C a14:
.text:0040F92C                 text "UTF-16LE", ' 1/4 ',0
.text:0040F938                 dd 200000h, 2F0031h, 200032h, 0
.text:0040F948 a34:
.text:0040F948                 text "UTF-16LE", ' 3/4 ',0
.text:0040F954                 dd offset a5            ; "(5)"
.text:0040F958                 dd 45h, 780000h, 0
.text:0040F964 aSs:
.text:0040F964                 text "UTF-16LE", 'ss',0
.text:0040F96A                 align 4
.text:0040F96C aAe:
.text:0040F96C                 text "UTF-16LE", 'ae',0
.text:0040F972                 align 4
.text:0040F974 aIj:
.text:0040F974                 text "UTF-16LE", 'IJ',0
.text:0040F97A                 align 4
.text:0040F97C aIj_0:
.text:0040F97C                 text "UTF-16LE", 'ij',0
.text:0040F982                 align 4
.text:0040F984 aN:
.text:0040F984                 text "UTF-16LE", 27h,'n',0
.text:0040F98A                 align 4
.text:0040F98C aOe:
.text:0040F98C                 text "UTF-16LE", 'OE',0
.text:0040F992                 align 4
.text:0040F994 aOe_0:
.text:0040F994                 text "UTF-16LE", 'OE',0
.text:0040F99A                 align 4
.text:0040F99C aOe_1:
.text:0040F99C                 text "UTF-16LE", 'oe',0
.text:0040F9A2                 align 4
.text:0040F9A4 aOe_2:
.text:0040F9A4                 text "UTF-16LE", 'oe',0
.text:0040F9AA                 align 4
.text:0040F9AC aS_5:
.text:0040F9AC                 text "UTF-16LE", 's',0
.text:0040F9B0                 dd 4C0000h, 4Ah, 4C0000h, 6Ah, 6C0000h, 6Ah, 4E0000h, 4Ah
.text:0040F9B0                 dd 4E0000h, 6Ah, 6E0000h, 6Ah, 440000h, 5Ah, 440000h, 7Ah
.text:0040F9B0                 dd 640000h, 7Ah, 270000h, 0
.text:0040FA00                 dd 5Eh, 270000h, 0
.text:0040FA0C                 dd 60h, 5F0000h, 0
.text:0040FA18                 dd 3Ah, 7E0000h, 0
.text:0040FA24                 dd 20h, 200000h, 0
.text:0040FA30                 dd 20h, 200000h, 0
.text:0040FA3C                 dd 20h, 200000h, 0
.text:0040FA48                 dd 20h, 200000h, 2 dup(0)
.text:0040FA58                 db 2Dh, 4 dup(0)
.text:0040FA5D                 db 0, 2Dh, 0
.text:0040FA60                 dd 0
.text:0040FA64                 align 10h
.text:0040FA70                 text "UTF-16LE", '--',0
.text:0040FA76                 align 4
.text:0040FA78                 text "UTF-16LE", '-',0
.text:0040FA7C                 dd 270000h, 0
.text:0040FA84                 dd 27h, 2C0000h, 0
.text:0040FA90                 dd 27h, 220000h, 0
.text:0040FA9C                 dd 22h, 2C0000h, 2Ch, 220000h, 0
.text:0040FAB0                 dd 2Bh, 6F0000h, 0
.text:0040FABC                 dd 2Eh, 2E0000h, 2Eh, 2E0000h, 2E002Eh, 0
.text:0040FAD4                 dd 20h, 600000h, 0
.text:0040FAE0                 text "UTF-16LE", '``',0
.text:0040FAE6                 align 4
.text:0040FAE8                 text "UTF-16LE", '```',0
.text:0040FAF0                 dd 3C0000h, 0
.text:0040FAF8                 dd 3Eh, 210000h, 21h, 3F0000h, 3Fh, 3F0000h, 21h, 210000h
.text:0040FAF8                 dd 3Fh, 200000h, 5 dup(0)
.text:0040FB34 aRs:
.text:0040FB34                 text "UTF-16LE", 'Rs',0
.text:0040FB3A                 align 4
.text:0040FB3C aEur:
.text:0040FB3C                 text "UTF-16LE", 'EUR',0
.text:0040FB44                 dd 610000h, 63002Fh, 0
.text:0040FB50 aAS:
.text:0040FB50                 text "UTF-16LE", 'a/s',0
.text:0040FB58                 dd 430000h, 0
.text:0040FB60 aCO:
.text:0040FB60                 text "UTF-16LE", 'c/o',0
.text:0040FB68                 dd 630000h, 75002Fh, 0
.text:0040FB74                 dd 67h, 480000h, 0
.text:0040FB80                 dd 48h, 480000h, 0
.text:0040FB8C                 dd 68h, 490000h, 0
.text:0040FB98                 dd 49h, 4C0000h, 0
.text:0040FBA4                 dd 6Ch, 4E0000h, 0
.text:0040FBB0 aNo:
.text:0040FBB0                 text "UTF-16LE", 'No',0
.text:0040FBB6                 align 4
.text:0040FBB8 aP:
.text:0040FBB8                 text "UTF-16LE", 'P',0
.text:0040FBBC                 dd 510000h, 0
.text:0040FBC4                 dd 52h, 520000h, 0
.text:0040FBD0                 dd 52h, 540000h, 4C0045h, 0
.text:0040FBE0 aTm:
.text:0040FBE0                 text "UTF-16LE", '(TM)',0
.text:0040FBEA                 align 4
.text:0040FBEC aZ:
.text:0040FBEC                 text "UTF-16LE", 'Z',0
.text:0040FBF0                 dd 4F0000h, 6D0068h, 0
.text:0040FBFC                 dd 5Ah, 420000h, 0
.text:0040FC08                 dd 43h, 650000h, 0
.text:0040FC14                 dd 65h, 450000h, 0
.text:0040FC20                 dd 46h, 4D0000h, 0
.text:0040FC2C                 dd 6Fh, 690000h, 0
.text:0040FC38                 dd 44h, 640000h, 0
.text:0040FC44                 dd 65h, 690000h, 0
.text:0040FC50                 dd 6Ah, 200000h, 2F0031h, 200033h, 0
.text:0040FC64 a23:
.text:0040FC64                 text "UTF-16LE", ' 2/3 ',0
.text:0040FC70                 dd 200000h, 2F0031h, 200035h, 0
.text:0040FC80 a25:
.text:0040FC80                 text "UTF-16LE", ' 2/5 ',0
.text:0040FC8C                 dd 200000h, 2F0033h, 200035h, 0
.text:0040FC9C a45:
.text:0040FC9C                 text "UTF-16LE", ' 4/5 ',0
.text:0040FCA8                 dd 200000h, 2F0031h, 200036h, 0
.text:0040FCB8 a56:
.text:0040FCB8                 text "UTF-16LE", ' 5/6 ',0
.text:0040FCC4                 dd 200000h, 2F0031h, 200038h, 0
.text:0040FCD4 a38:
.text:0040FCD4                 text "UTF-16LE", ' 3/8 ',0
.text:0040FCE0                 dd 200000h, 2F0035h, 200038h, 0
.text:0040FCF0 a78:
.text:0040FCF0                 text "UTF-16LE", ' 7/8 ',0
.text:0040FCFC                 dd 200000h, 2F0031h, 0
.text:0040FD08                 dd 49h, 490000h, 49h, 490000h, 490049h, 0
.text:0040FD20 aIv:
.text:0040FD20                 text "UTF-16LE", 'IV',0
.text:0040FD26                 align 4
.text:0040FD28 aV:
.text:0040FD28                 text "UTF-16LE", 'V',0
.text:0040FD2C                 dd 560000h, 49h, 560000h, 490049h, 0
.text:0040FD40 aViii:
.text:0040FD40                 text "UTF-16LE", 'VIII',0
.text:0040FD4A                 align 4
.text:0040FD4C aIx:
.text:0040FD4C                 text "UTF-16LE", 'IX',0
.text:0040FD52                 align 4
.text:0040FD54                 text "UTF-16LE", 'X',0
.text:0040FD58                 dd 580000h, 49h, 580000h, 490049h, 0
.text:0040FD6C                 dd 4Ch, 430000h, 0
.text:0040FD78                 dd 44h, 4D0000h, 0
.text:0040FD84                 dd 69h, 690000h, 69h, 690000h, 690069h, 0
.text:0040FD9C aIv_0:
.text:0040FD9C                 text "UTF-16LE", 'iv',0
.text:0040FDA2                 align 4
.text:0040FDA4 aV_0:
.text:0040FDA4                 text "UTF-16LE", 'v',0
.text:0040FDA8                 dd 760000h, 69h, 760000h, 690069h, 0
.text:0040FDBC aViii_0:
.text:0040FDBC                 text "UTF-16LE", 'viii',0
.text:0040FDC6                 align 4
.text:0040FDC8 aIx_0:
.text:0040FDC8                 text "UTF-16LE", 'ix',0
.text:0040FDCE                 align 10h
.text:0040FDD0                 text "UTF-16LE", 'x',0
.text:0040FDD4                 dd 780000h, 69h, 780000h, 690069h, 0
.text:0040FDE8                 dd 6Ch, 630000h, 0
.text:0040FDF4                 dd 64h, 6D0000h, 0
.text:0040FE00                 text "UTF-16LE", '<-',0
.text:0040FE06                 align 4
.text:0040FE08                 text "UTF-16LE", '->',0
.text:0040FE0E                 align 10h
.text:0040FE10                 text "UTF-16LE", '<->',0
.text:0040FE18                 dd 3C0000h, 3Dh, 3D0000h, 3Eh, 3C0000h, 3E003Dh, 0
.text:0040FE34                 db 2Dh, 4 dup(0)
.text:0040FE39                 align 2
.text:0040FE3A                 dw 2Fh
.text:0040FE3C                 align 10h
.text:0040FE40                 dd 5Ch, 2A0000h, 0
.text:0040FE4C                 dd 7Ch, 3A0000h, 0
.text:0040FE58                 dd 7Eh, 3C0000h, 3Dh, 3E0000h, 3Dh, 3C0000h, 3Ch, 3E0000h
.text:0040FE58                 dd 3Eh, 3C0000h, 3C003Ch, 0
.text:0040FE88                 text "UTF-16LE", '>>>',0
.text:0040FE90                 dd 4E0000h, 4C0055h, 0
.text:0040FE9C aSoh:
.text:0040FE9C                 text "UTF-16LE", 'SOH',0
.text:0040FEA4                 dd 530000h, 580054h, 0
.text:0040FEB0 aEtx:
.text:0040FEB0                 text "UTF-16LE", 'ETX',0
.text:0040FEB8                 dd 450000h, 54004Fh, 0
.text:0040FEC4 aEnq:
.text:0040FEC4                 text "UTF-16LE", 'ENQ',0
.text:0040FECC                 dd offset a5            ; "(5)"
.text:0040FED0 aCk:
.text:0040FED0                 text "UTF-16LE", 'CK',0
.text:0040FED6                 align 4
.text:0040FED8 aBel:
.text:0040FED8                 text "UTF-16LE", 'BEL',0
.text:0040FEE0                 dd 420000h, 53h, 480000h, 54h, 4C0000h, 46h, 560000h, 54h
.text:0040FEE0                 dd 460000h, 46h, 430000h, 52h, 530000h, 4Fh, 530000h, 49h
.text:0040FEE0                 dd 440000h, 45004Ch, 0
.text:0040FF2C aDc1:
.text:0040FF2C                 text "UTF-16LE", 'DC1',0
.text:0040FF34                 dd 440000h, 320043h, 0
.text:0040FF40 aDc3:
.text:0040FF40                 text "UTF-16LE", 'DC3',0
.text:0040FF48                 dd 440000h, 340043h, 0
.text:0040FF54                 dd offset a12+2         ; "2)"
.text:0040FF58                 dd 4Bh, 530000h, 4E0059h, 0
.text:0040FF68 aEtb:
.text:0040FF68                 text "UTF-16LE", 'ETB',0
.text:0040FF70                 dd 430000h, 4E0041h, 0
.text:0040FF7C aEm:
.text:0040FF7C                 text "UTF-16LE", 'EM',0
.text:0040FF82                 align 4
.text:0040FF84 aSub:
.text:0040FF84                 text "UTF-16LE", 'SUB',0
.text:0040FF8C                 dd 450000h, 430053h, 0
.text:0040FF98 aFs:
.text:0040FF98                 text "UTF-16LE", 'FS',0
.text:0040FF9E                 align 10h
.text:0040FFA0 aGs:
.text:0040FFA0                 text "UTF-16LE", 'GS',0
.text:0040FFA6                 align 4
.text:0040FFA8 aRs_0:
.text:0040FFA8                 text "UTF-16LE", 'RS',0
.text:0040FFAE                 align 10h
.text:0040FFB0 aUs:
.text:0040FFB0                 text "UTF-16LE", 'US',0
.text:0040FFB6                 align 4
.text:0040FFB8 aSp:
.text:0040FFB8                 text "UTF-16LE", 'SP',0
.text:0040FFBE                 align 10h
.text:0040FFC0 aDel:
.text:0040FFC0                 text "UTF-16LE", 'DEL',0
.text:0040FFC8                 dd 5F0000h, 0
.text:0040FFD0 aNl:
.text:0040FFD0                 text "UTF-16LE", 'NL',0
.text:0040FFD6                 align 4
.text:0040FFD8 a1:
.text:0040FFD8                 text "UTF-16LE", '(1)',0
.text:0040FFE0                 dd 280000h, 290032h, 0
.text:0040FFEC a3:
.text:0040FFEC                 text "UTF-16LE", '(3)',0
.text:0040FFF4                 dd 280000h, 290034h, 0
.text:00410000 a5:                                     ; DATA XREF: .text:0040F954↑o
.text:00410000                                         ; .text:0040FECC↑o ...
.text:00410000                 text "UTF-16LE", '(5)',0
.text:00410008                 dd 280000h, 290036h, 0
.text:00410014 a7:
.text:00410014                 text "UTF-16LE", '(7)',0
.text:0041001C                 dd 280000h, 290038h, 0
.text:00410028 a9:
.text:00410028                 text "UTF-16LE", '(9)',0
.text:00410030                 dd 280000h, 300031h, 29h, 280000h, 310031h, 29h, 280000h
.text:0041004C a12:                                    ; DATA XREF: .text:0040FF54↑o
.text:0041004C                 text "UTF-16LE", '12)',0
.text:00410054 dword_410054    dd 280000h, 330031h, 29h, 280000h, 340031h, 29h, 280000h
.text:00410054                 dd 350031h, 29h, 280000h, 360031h, 29h, 280000h, 370031h
.text:00410054                 dd 29h, 280000h, 380031h, 29h, 280000h, 390031h, 29h, 280000h
.text:00410054                 dd 300032h, 29h, 280000h, 290031h, 0
.text:004100C0 a2:
.text:004100C0                 text "UTF-16LE", '(2)',0
.text:004100C8                 dd 280000h, 290033h, 0
.text:004100D4 a4:
.text:004100D4                 text "UTF-16LE", '(4)',0
.text:004100DC                 dd 280000h, 290035h, 0
.text:004100E8 a6:
.text:004100E8                 text "UTF-16LE", '(6)',0
.text:004100F0                 dd 280000h, 290037h, 0
.text:004100FC a8:
.text:004100FC                 text "UTF-16LE", '(8)',0
.text:00410104                 dd 280000h, 290039h, 0
.text:00410110 a10:
.text:00410110                 text "UTF-16LE", '(10)',0
.text:0041011A                 align 4
.text:0041011C a11:
.text:0041011C                 text "UTF-16LE", '(11)',0
.text:00410126                 align 4
.text:00410128 a12_0:
.text:00410128                 text "UTF-16LE", '(12)',0
.text:00410132                 align 4
.text:00410134 a13:
.text:00410134                 text "UTF-16LE", '(13)',0
.text:0041013E                 align 10h
.text:00410140 a14_0:
.text:00410140                 text "UTF-16LE", '(14)',0
.text:0041014A                 align 4
.text:0041014C a15:
.text:0041014C                 text "UTF-16LE", '(15)',0
.text:00410156                 align 4
.text:00410158 a16:
.text:00410158                 text "UTF-16LE", '(16)',0
.text:00410162                 align 4
.text:00410164 a17:
.text:00410164                 text "UTF-16LE", '(17)',0
.text:0041016E                 align 10h
.text:00410170 a18:
.text:00410170                 text "UTF-16LE", '(18)',0
.text:0041017A                 align 4
.text:0041017C a19:
.text:0041017C                 text "UTF-16LE", '(19)',0
.text:00410186                 align 4
.text:00410188 a20:
.text:00410188                 text "UTF-16LE", '(20)',0
.text:00410192                 align 4
.text:00410194 a1_0:
.text:00410194                 text "UTF-16LE", '1.',0
.text:0041019A                 align 4
.text:0041019C a2_0:
.text:0041019C                 text "UTF-16LE", '2.',0
.text:004101A2                 align 4
.text:004101A4 a3_0:
.text:004101A4                 text "UTF-16LE", '3.',0
.text:004101AA                 align 4
.text:004101AC a4_0:
.text:004101AC                 text "UTF-16LE", '4.',0
.text:004101B2                 align 4
.text:004101B4 a5_0:
.text:004101B4                 text "UTF-16LE", '5.',0
.text:004101BA                 align 4
.text:004101BC a6_0:
.text:004101BC                 text "UTF-16LE", '6.',0
.text:004101C2                 align 4
.text:004101C4 a7_0:
.text:004101C4                 text "UTF-16LE", '7.',0
.text:004101CA                 align 4
.text:004101CC a8_0:
.text:004101CC                 text "UTF-16LE", '8.',0
.text:004101D2                 align 4
.text:004101D4 a9_0:
.text:004101D4                 text "UTF-16LE", '9.',0
.text:004101DA                 align 4
.text:004101DC a10_0:
.text:004101DC                 text "UTF-16LE", '10.',0
.text:004101E4                 dd 310000h, 2E0031h, 0
.text:004101F0 a12_1:
.text:004101F0                 text "UTF-16LE", '12.',0
.text:004101F8                 dd 310000h, 2E0033h, 0
.text:00410204 a14_1:
.text:00410204                 text "UTF-16LE", '14.',0
.text:0041020C                 dd 310000h, 2E0035h, 0
.text:00410218 a16_0:
.text:00410218                 text "UTF-16LE", '16.',0
.text:00410220                 dd 310000h, 2E0037h, 0
.text:0041022C a18_0:
.text:0041022C                 text "UTF-16LE", '18.',0
.text:00410234                 dd 310000h, 2E0039h, 0
.text:00410240 a20_0:
.text:00410240                 text "UTF-16LE", '20.',0
.text:00410248                 dd 280000h, 290061h, 0
.text:00410254 aB:
.text:00410254                 text "UTF-16LE", '(b)',0
.text:0041025C                 dd 280000h, 290063h, 0
.text:00410268 aD:
.text:00410268                 text "UTF-16LE", '(d)',0
.text:00410270                 dd 280000h, 290065h, 0
.text:0041027C                 text "UTF-16LE", '(f)',0
.text:00410284                 dd 280000h, 290067h, 0
.text:00410290                 text "UTF-16LE", '(h)',0
.text:00410298                 dd 280000h, 290069h, 0
.text:004102A4 aJ:
.text:004102A4                 text "UTF-16LE", '(j)',0
.text:004102AC                 dd 280000h, 29006Bh, 0
.text:004102B8                 text "UTF-16LE", '(l)',0
.text:004102C0                 dd 280000h, 29006Dh, 0
.text:004102CC aN_0:
.text:004102CC                 text "UTF-16LE", '(n)',0
.text:004102D4                 dd 280000h, 29006Fh, 0
.text:004102E0 aP_0:
.text:004102E0                 text "UTF-16LE", '(p)',0
.text:004102E8                 dd 280000h, 290071h, 0
.text:004102F4 aR:
.text:004102F4                 text "UTF-16LE", '(r)',0
.text:004102FC                 dd 280000h, 290073h, 0
.text:00410308 aT:
.text:00410308                 text "UTF-16LE", '(t)',0
.text:00410310                 dd 280000h, 290075h, 0
.text:0041031C aV_1:
.text:0041031C                 text "UTF-16LE", '(v)',0
.text:00410324                 dd 280000h, 290077h, 0
.text:00410330                 text "UTF-16LE", '(x)',0
.text:00410338                 dd 280000h, 290079h, 0
.text:00410344 aZ_0:
.text:00410344                 text "UTF-16LE", '(z)',0
.text:0041034C                 dd 280000h, 290041h, 0
.text:00410358 aB_0:
.text:00410358                 text "UTF-16LE", '(B)',0
.text:00410360                 dd 280000h, 290043h, 0
.text:0041036C aD_0:
.text:0041036C                 text "UTF-16LE", '(D)',0
.text:00410374                 dd 280000h, 290045h, 0
.text:00410380                 text "UTF-16LE", '(F)',0
.text:00410388                 dd 280000h, 290047h, 0
.text:00410394                 text "UTF-16LE", '(H)',0
.text:0041039C                 dd 280000h, 290049h, 0
.text:004103A8 aJ_0:
.text:004103A8                 text "UTF-16LE", '(J)',0
.text:004103B0                 dd 280000h, 29004Bh, 0
.text:004103BC                 text "UTF-16LE", '(L)',0
.text:004103C4                 dd 280000h, 29004Dh, 0
.text:004103D0 aN_1:
.text:004103D0                 text "UTF-16LE", '(N)',0
.text:004103D8                 dd 280000h, 29004Fh, 0
.text:004103E4 aP_1:
.text:004103E4                 text "UTF-16LE", '(P)',0
.text:004103EC                 dd 280000h, 290051h, 0
.text:004103F8 aR_0:
.text:004103F8                 text "UTF-16LE", '(R)',0
.text:00410400                 dd 280000h, 290053h, 0
.text:0041040C aT_0:
.text:0041040C                 text "UTF-16LE", '(T)',0
.text:00410414                 dd 280000h, 290055h, 0
.text:00410420 aV_2:
.text:00410420                 text "UTF-16LE", '(V)',0
.text:00410428                 dd 280000h, 290057h, 0
.text:00410434                 text "UTF-16LE", '(X)',0
.text:0041043C                 dd 280000h, 290059h, 0
.text:00410448 aZ_1:
.text:00410448                 text "UTF-16LE", '(Z)',0
.text:00410450                 dd 280000h, 290061h, 0
.text:0041045C aB_1:
.text:0041045C                 text "UTF-16LE", '(b)',0
.text:00410464                 dd 280000h, 290063h, 0
.text:00410470 aD_1:
.text:00410470                 text "UTF-16LE", '(d)',0
.text:00410478                 dd 280000h, 290065h, 0
.text:00410484                 text "UTF-16LE", '(f)',0
.text:0041048C                 dd 280000h, 290067h, 0
.text:00410498                 text "UTF-16LE", '(h)',0
.text:004104A0                 dd 280000h, 290069h, 0
.text:004104AC aJ_1:
.text:004104AC                 text "UTF-16LE", '(j)',0
.text:004104B4                 dd 280000h, 29006Bh, 0
.text:004104C0                 text "UTF-16LE", '(l)',0
.text:004104C8                 dd 280000h, 29006Dh, 0
.text:004104D4 aN_2:
.text:004104D4                 text "UTF-16LE", '(n)',0
.text:004104DC                 dd 280000h, 29006Fh, 0
.text:004104E8 aP_2:
.text:004104E8                 text "UTF-16LE", '(p)',0
.text:004104F0                 dd 280000h, 290071h, 0
.text:004104FC aR_1:
.text:004104FC                 text "UTF-16LE", '(r)',0
.text:00410504                 dd 280000h, 290073h, 0
.text:00410510 aT_1:
.text:00410510                 text "UTF-16LE", '(t)',0
.text:00410518                 dd 280000h, 290075h, 0
.text:00410524 aV_3:
.text:00410524                 text "UTF-16LE", '(v)',0
.text:0041052C                 dd 280000h, 290077h, 0
.text:00410538                 text "UTF-16LE", '(x)',0
.text:00410540                 dd 280000h, 290079h, 0
.text:0041054C aZ_2:
.text:0041054C                 text "UTF-16LE", '(z)',0
.text:00410554                 dd 280000h, 290030h, 0
.text:00410560                 db 2Dh, 4 dup(0)
.text:00410565                 align 2
.text:00410566                 dw 7Ch
.text:00410568                 dd 0
.text:0041056C                 dd 2Bh, 2B0000h, 0
.text:00410578                 dd 2Bh, 2B0000h, 0
.text:00410584                 dd 2Bh, 2B0000h, 0
.text:00410590                 dd 2Bh, 2B0000h, 0
.text:0041059C                 dd 2Bh, 6F0000h, 0
.text:004105A8                 text "UTF-16LE", '::=',0
.text:004105B0                 dd 3D0000h, 3Dh, 3D0000h, 3D003Dh, 0
.text:004105C4                 dd 20h, 3D0000h, 0
.text:004105D0 a21:
.text:004105D0                 text "UTF-16LE", '(21)',0
.text:004105DA                 align 4
.text:004105DC a22:
.text:004105DC                 text "UTF-16LE", '(22)',0
.text:004105E6                 align 4
.text:004105E8 a23_0:
.text:004105E8                 text "UTF-16LE", '(23)',0
.text:004105F2                 align 4
.text:004105F4 a24:
.text:004105F4                 text "UTF-16LE", '(24)',0
.text:004105FE                 align 10h
.text:00410600 a25_0:
.text:00410600                 text "UTF-16LE", '(25)',0
.text:0041060A                 align 4
.text:0041060C a26:
.text:0041060C                 text "UTF-16LE", '(26)',0
.text:00410616                 align 4
.text:00410618 a27:
.text:00410618                 text "UTF-16LE", '(27)',0
.text:00410622                 align 4
.text:00410624 a28:
.text:00410624                 text "UTF-16LE", '(28)',0
.text:0041062E                 align 10h
.text:00410630 a29:
.text:00410630                 text "UTF-16LE", '(29)',0
.text:0041063A                 align 4
.text:0041063C a30:
.text:0041063C                 text "UTF-16LE", '(30)',0
.text:00410646                 align 4
.text:00410648 a31:
.text:00410648                 text "UTF-16LE", '(31)',0
.text:00410652                 align 4
.text:00410654 a32:
.text:00410654                 text "UTF-16LE", '(32)',0
.text:0041065E                 align 10h
.text:00410660 a33:
.text:00410660                 text "UTF-16LE", '(33)',0
.text:0041066A                 align 4
.text:0041066C a34_0:
.text:0041066C                 text "UTF-16LE", '(34)',0
.text:00410676                 align 4
.text:00410678 a35:
.text:00410678                 text "UTF-16LE", '(35)',0
.text:00410682                 align 4
.text:00410684 a36:
.text:00410684                 text "UTF-16LE", '(36)',0
.text:0041068E                 align 10h
.text:00410690 a37:
.text:00410690                 text "UTF-16LE", '(37)',0
.text:0041069A                 align 4
.text:0041069C a38_0:
.text:0041069C                 text "UTF-16LE", '(38)',0
.text:004106A6                 align 4
.text:004106A8 a39:
.text:004106A8                 text "UTF-16LE", '(39)',0
.text:004106B2                 align 4
.text:004106B4 a40:
.text:004106B4                 text "UTF-16LE", '(40)',0
.text:004106BE                 align 10h
.text:004106C0 a41:
.text:004106C0                 text "UTF-16LE", '(41)',0
.text:004106CA                 align 4
.text:004106CC a42:
.text:004106CC                 text "UTF-16LE", '(42)',0
.text:004106D6                 align 4
.text:004106D8 a43:
.text:004106D8                 text "UTF-16LE", '(43)',0
.text:004106E2                 align 4
.text:004106E4 a44:
.text:004106E4                 text "UTF-16LE", '(44)',0
.text:004106EE                 align 10h
.text:004106F0 a45_0:
.text:004106F0                 text "UTF-16LE", '(45)',0
.text:004106FA                 align 4
.text:004106FC a46:
.text:004106FC                 text "UTF-16LE", '(46)',0
.text:00410706                 align 4
.text:00410708 a47:
.text:00410708                 text "UTF-16LE", '(47)',0
.text:00410712                 align 4
.text:00410714 a48:
.text:00410714                 text "UTF-16LE", '(48)',0
.text:0041071E                 align 10h
.text:00410720 a49:
.text:00410720                 text "UTF-16LE", '(49)',0
.text:0041072A                 align 4
.text:0041072C a50:
.text:0041072C                 text "UTF-16LE", '(50)',0
.text:00410736                 align 4
.text:00410738 aHpa:
.text:00410738                 text "UTF-16LE", 'hPa',0
.text:00410740                 dd 640000h, 61h
.text:00410748                 dd offset a5            ; "(5)"
.text:0041074C                 dd 55h, 620000h, 720061h, 0
.text:0041075C aOv:
.text:0041075C                 text "UTF-16LE", 'oV',0
.text:00410762                 align 4
.text:00410764 aPc:
.text:00410764                 text "UTF-16LE", 'pc',0
.text:0041076A                 align 4
.text:0041076C                 dd offset dword_410054+1Ch
.text:00410770                 dd 0
.text:00410774                 dd offset dword_410054+1Ah
.text:00410778                 dd 0
.text:0041077C                 dd offset dword_410054+21h
.text:00410780                 dd 0
.text:00410784                 dd offset dword_410054+19h
.text:00410788                 dd 0
.text:0041078C                 dd offset dword_410054+17h
.text:00410790                 dd 0
.text:00410794 aKb:
.text:00410794                 text "UTF-16LE", 'KB',0
.text:0041079A                 align 4
.text:0041079C aMb:
.text:0041079C                 text "UTF-16LE", 'MB',0
.text:004107A2                 align 4
.text:004107A4 aGb:
.text:004107A4                 text "UTF-16LE", 'GB',0
.text:004107AA                 align 4
.text:004107AC aCal:
.text:004107AC                 text "UTF-16LE", 'cal',0
.text:004107B4                 dd 6B0000h, 610063h, 6Ch, 700000h, 46h, 6E0000h, 46h, 750000h
.text:004107B4                 dd 46h, 750000h, 67h, 6D0000h, 67h, 6B0000h, 67h, 480000h
.text:004107B4                 dd 7Ah, 6B0000h, 7A0048h, 0
.text:00410804 aMhz:
.text:00410804                 text "UTF-16LE", 'MHz',0
.text:0041080C                 dd 470000h, 7A0048h, 0
.text:00410818 aThz:
.text:00410818                 text "UTF-16LE", 'THz',0
.text:00410820                 dd 750000h, 6Ch, 6D0000h, 6Ch, 640000h, 6Ch, 6B0000h, 6Ch
.text:00410820                 dd 660000h, 6Dh, 6E0000h, 6Dh, 750000h, 6Dh, 6D0000h, 6Dh
.text:00410820                 dd 630000h, 6Dh, 6B0000h, 6Dh, 6D0000h, 5E006Dh, 32h, 630000h
.text:00410820                 dd 5E006Dh, 32h, 6D0000h, 32005Eh, 0
.text:00410894 aKm2:
.text:00410894                 text "UTF-16LE", 'km^2',0
.text:0041089E                 align 10h
.text:004108A0 aMm3:
.text:004108A0                 text "UTF-16LE", 'mm^3',0
.text:004108AA                 align 4
.text:004108AC aCm3:
.text:004108AC                 text "UTF-16LE", 'cm^3',0
.text:004108B6                 align 4
.text:004108B8 aM3:
.text:004108B8                 text "UTF-16LE", 'm^3',0
.text:004108C0                 dd 6B0000h, 5E006Dh, 33h, 6D0000h, 73002Fh, 0
.text:004108D8 aMS2:
.text:004108D8                 text "UTF-16LE", 'm/s^2',0
.text:004108E4                 dd 500000h, 61h, 6B0000h, 610050h, 0
.text:004108F8 aMpa:
.text:004108F8                 text "UTF-16LE", 'MPa',0
.text:00410900                 dd 470000h, 610050h, 0
.text:0041090C aRad:
.text:0041090C                 text "UTF-16LE", 'rad',0
.text:00410914                 dd 720000h, 640061h, 73002Fh, 0
.text:00410924 aRadS2:
.text:00410924                 text "UTF-16LE", 'rad/s^2',0
.text:00410934                 dd 700000h, 73h, 6E0000h, 73h, 750000h, 73h, 6D0000h, 73h
.text:00410934                 dd 700000h, 56h, 6E0000h, 56h, 750000h, 56h, 6D0000h, 56h
.text:00410934                 dd 6B0000h, 56h, 4D0000h, 56h, 700000h, 57h, 6E0000h, 57h
.text:00410934                 dd 750000h, 57h, 6D0000h, 57h, 6B0000h, 57h, 4D0000h, 57h
.text:00410934                 dd 610000h, 6D002Eh, 2Eh, 420000h, 71h, 630000h, 63h, 630000h
.text:00410934                 dd 64h, 430000h, 6B002Fh, 67h, 430000h, 2E006Fh, 0
.text:004109F0 aDb:
.text:004109F0                 text "UTF-16LE", 'dB',0
.text:004109F6                 align 4
.text:004109F8 aGy:
.text:004109F8                 text "UTF-16LE", 'Gy',0
.text:004109FE                 align 10h
.text:00410A00 aHa:
.text:00410A00                 text "UTF-16LE", 'ha',0
.text:00410A06                 align 4
.text:00410A08 aHp:
.text:00410A08                 text "UTF-16LE", 'HP',0
.text:00410A0E                 align 10h
.text:00410A10 aIn:
.text:00410A10                 text "UTF-16LE", 'in',0
.text:00410A16                 align 4
.text:00410A18 aKk:
.text:00410A18                 text "UTF-16LE", 'KK',0
.text:00410A1E                 align 10h
.text:00410A20 aKm:
.text:00410A20                 text "UTF-16LE", 'KM',0
.text:00410A26                 align 4
.text:00410A28 aKt:
.text:00410A28                 text "UTF-16LE", 'kt',0
.text:00410A2E                 align 10h
.text:00410A30 aLm:
.text:00410A30                 text "UTF-16LE", 'lm',0
.text:00410A36                 align 4
.text:00410A38 aLn:
.text:00410A38                 text "UTF-16LE", 'ln',0
.text:00410A3E                 align 10h
.text:00410A40 aLog:
.text:00410A40                 text "UTF-16LE", 'log',0
.text:00410A48                 dd 6C0000h, 78h, 6D0000h, 62h, 6D0000h, 6C0069h, 0
.text:00410A64 aMol:
.text:00410A64                 text "UTF-16LE", 'mol',0
.text:00410A6C                 dd 500000h, 48h, 700000h, 6D002Eh, 2Eh, 500000h, 4D0050h
.text:00410A6C                 dd 0
.text:00410A8C aPr:
.text:00410A8C                 text "UTF-16LE", 'PR',0
.text:00410A92                 align 4
.text:00410A94 aSr:
.text:00410A94                 text "UTF-16LE", 'sr',0
.text:00410A9A                 align 4
.text:00410A9C aSv:
.text:00410A9C                 text "UTF-16LE", 'Sv',0
.text:00410AA2                 align 4
.text:00410AA4 aWb:
.text:00410AA4                 text "UTF-16LE", 'Wb',0
.text:00410AAA                 align 4
.text:00410AAC aFf:
.text:00410AAC                 text "UTF-16LE", 'ff',0
.text:00410AB2                 align 4
.text:00410AB4 aFi:
.text:00410AB4                 text "UTF-16LE", 'fi',0
.text:00410ABA                 align 4
.text:00410ABC aFl:
.text:00410ABC                 text "UTF-16LE", 'fl',0
.text:00410AC2                 align 4
.text:00410AC4 aFfi:
.text:00410AC4                 text "UTF-16LE", 'ffi',0
.text:00410ACC                 dd 660000h, 6C0066h, 0
.text:00410AD8 aSt:
.text:00410AD8                 text "UTF-16LE", 'st',0
.text:00410ADE                 align 10h
.text:00410AE0                 text "UTF-16LE", '+',0
.text:00410AE4                 dd 10h dup(0)
.text:00410B24                 dd 5F0000h, 0
.text:00410B2C                 dd 5Fh, 5F0000h, 0
.text:00410B38                 dd 2Ch, 2E0000h, 0
.text:00410B44                 dd 3Bh, 3A0000h, 0
.text:00410B50                 dd 3Fh, 210000h, 0
.text:00410B5C                 dd 28h, 290000h, 0
.text:00410B68                 dd 7Bh, 7D0000h, 0
.text:00410B74                 dd 23h, 260000h, 0
.text:00410B80                 dd 2Ah, 2B0000h, 0
.text:00410B8C                 db 2Dh, 4 dup(0)
.text:00410B91                 align 2
.text:00410B92                 dw 3Ch
.text:00410B94                 align 8
.text:00410B98                 dd 3Eh, 3D0000h, 0
.text:00410BA4                 dd 5Ch, 240000h, 0
.text:00410BB0                 dd 25h, 400000h, 2 dup(0)
.text:00410BC0                 dd 21h, 220000h, 0
.text:00410BCC                 dd 23h, 240000h, 0
.text:00410BD8                 dd 25h, 260000h, 0
.text:00410BE4                 dd 27h, 280000h, 0
.text:00410BF0                 dd 29h, 2A0000h, 0
.text:00410BFC                 dd 2Bh, 2C0000h, 0
.text:00410C08                 db 2Dh, 4 dup(0)
.text:00410C0D                 align 2
.text:00410C0E                 dw 2Eh
.text:00410C10                 dd 0
.text:00410C14                 dd 2Fh, 300000h, 0
.text:00410C20                 dd 31h, 320000h, 0
.text:00410C2C                 dd 33h, 340000h, 0
.text:00410C38                 dd 35h, 360000h, 0
.text:00410C44                 dd 37h, 380000h, 0
.text:00410C50                 dd 39h, 3A0000h, 0
.text:00410C5C                 dd 3Bh, 3C0000h, 0
.text:00410C68                 dd 3Dh, 3E0000h, 0
.text:00410C74                 dd 3Fh, 400000h, 0
.text:00410C80                 dd 41h, 420000h, 0
.text:00410C8C                 dd 43h, 440000h, 0
.text:00410C98                 dd 45h, 460000h, 0
.text:00410CA4                 dd 47h, 480000h, 0
.text:00410CB0                 dd 49h, 4A0000h, 0
.text:00410CBC                 dd 4Bh, 4C0000h, 0
.text:00410CC8                 dd 4Dh, 4E0000h, 0
.text:00410CD4                 dd 4Fh, 500000h, 0
.text:00410CE0                 dd 51h, 520000h, 0
.text:00410CEC                 dd 53h, 540000h, 0
.text:00410CF8                 dd 55h, 560000h, 0
.text:00410D04                 dd 57h, 580000h, 0
.text:00410D10                 dd 59h, 5A0000h, 0
.text:00410D1C                 dd 5Bh, 5C0000h, 0
.text:00410D28                 dd 5Dh, 5E0000h, 0
.text:00410D34                 dd 5Fh, 600000h, 0
.text:00410D40                 dd 61h, 620000h, 0
.text:00410D4C                 dd 63h, 640000h, 0
.text:00410D58                 dd 65h, 660000h, 0
.text:00410D64                 dd 67h, 680000h, 0
.text:00410D70                 dd 69h, 6A0000h, 0
.text:00410D7C                 dd 6Bh, 6C0000h, 0
.text:00410D88                 dd 6Dh, 6E0000h, 0
.text:00410D94                 dd 6Fh, 700000h, 0
.text:00410DA0                 dd 71h, 720000h, 0
.text:00410DAC                 dd 73h, 740000h, 0
.text:00410DB8                 dd 75h, 760000h, 0
.text:00410DC4                 dd 77h, 780000h, 0
.text:00410DD0                 dd 79h, 7A0000h, 0
.text:00410DDC                 dd 7Bh, 7C0000h, 0
.text:00410DE8                 dd 7Dh, 7E0000h, 0
.text:00410DF4                 dd 41h, 420000h, 0
.text:00410E00                 dd 43h, 440000h, 0
.text:00410E0C                 dd 45h, 460000h, 0
.text:00410E18                 dd 47h, 480000h, 0
.text:00410E24                 dd 49h, 4A0000h, 0
.text:00410E30                 dd 4Bh, 4C0000h, 0
.text:00410E3C                 dd 4Dh, 4E0000h, 0
.text:00410E48                 dd 4Fh, 500000h, 0
.text:00410E54                 dd 51h, 520000h, 0
.text:00410E60                 dd 53h, 540000h, 0
.text:00410E6C                 dd 55h, 560000h, 0
.text:00410E78                 dd 57h, 580000h, 0
.text:00410E84                 dd 59h, 5A0000h, 0
.text:00410E90                 dd 61h, 620000h, 0
.text:00410E9C                 dd 63h, 640000h, 0
.text:00410EA8                 dd 65h, 660000h, 0
.text:00410EB4                 dd 67h, 680000h, 0
.text:00410EC0                 dd 69h, 6A0000h, 0
.text:00410ECC                 dd 6Bh, 6C0000h, 0
.text:00410ED8                 dd 6Dh, 6E0000h, 0
.text:00410EE4                 dd 6Fh, 700000h, 0
.text:00410EF0                 dd 71h, 720000h, 0
.text:00410EFC                 dd 73h, 740000h, 0
.text:00410F08                 dd 75h, 760000h, 0
.text:00410F14                 dd 77h, 780000h, 0
.text:00410F20                 dd 79h, 7A0000h, 0
.text:00410F2C                 dd 41h, 420000h, 0
.text:00410F38                 dd 43h, 440000h, 0
.text:00410F44                 dd 45h, 460000h, 0
.text:00410F50                 dd 47h, 480000h, 0
.text:00410F5C                 dd 49h, 4A0000h, 0
.text:00410F68                 dd 4Bh, 4C0000h, 0
.text:00410F74                 dd 4Dh, 4E0000h, 0
.text:00410F80                 dd 4Fh, 500000h, 0
.text:00410F8C                 dd 51h, 520000h, 0
.text:00410F98                 dd 53h, 540000h, 0
.text:00410FA4                 dd 55h, 560000h, 0
.text:00410FB0                 dd 57h, 580000h, 0
.text:00410FBC                 dd 59h, 5A0000h, 0
.text:00410FC8                 dd 61h, 620000h, 0
.text:00410FD4                 dd 63h, 640000h, 0
.text:00410FE0                 dd 65h, 660000h, 0
.text:00410FEC                 dd 67h, 690000h, 0
.text:00410FF8                 dd 6Ah, 6B0000h, 0
.text:00411004                 dd 6Ch, 6D0000h, 0
.text:00411010                 dd 6Eh, 6F0000h, 0
.text:0041101C                 dd 70h, 710000h, 0
.text:00411028                 dd 72h, 730000h, 0
.text:00411034                 dd 74h, 750000h, 0
.text:00411040                 dd 76h, 770000h, 0
.text:0041104C                 dd 78h, 790000h, 0
.text:00411058                 dd 7Ah
.text:0041105C                 dd offset a5            ; "(5)"
.text:00411060                 dd 0
.text:00411064                 dd 42h, 430000h, 0
.text:00411070                 dd 44h, 450000h, 0
.text:0041107C                 dd 46h, 470000h, 0
.text:00411088                 dd 48h, 490000h, 0
.text:00411094                 dd 4Ah, 4B0000h, 0
.text:004110A0                 dd 4Ch, 4D0000h, 0
.text:004110AC                 dd 4Eh, 4F0000h, 0
.text:004110B8                 dd 50h, 510000h, 0
.text:004110C4                 dd 52h, 530000h, 0
.text:004110D0                 dd 54h, 550000h, 0
.text:004110DC                 dd 56h, 570000h, 0
.text:004110E8                 dd 58h, 590000h, 0
.text:004110F4                 dd 5Ah, 610000h, 0
.text:00411100                 dd 62h, 630000h, 0
.text:0041110C                 dd 64h, 650000h, 0
.text:00411118                 dd 66h, 670000h, 0
.text:00411124                 dd 68h, 690000h, 0
.text:00411130                 dd 6Ah, 6B0000h, 0
.text:0041113C                 dd 6Ch, 6D0000h, 0
.text:00411148                 dd 6Eh, 6F0000h, 0
.text:00411154                 dd 70h, 710000h, 0
.text:00411160                 dd 72h, 730000h, 0
.text:0041116C                 dd 74h, 750000h, 0
.text:00411178                 dd 76h, 770000h, 0
.text:00411184                 dd 78h, 790000h, 0
.text:00411190                 dd 7Ah
.text:00411194                 dd offset a5            ; "(5)"
.text:00411198                 dd 0
.text:0041119C                 dd 43h, 440000h, 0
.text:004111A8                 dd 47h, 4A0000h, 0
.text:004111B4                 dd 4Bh, 4E0000h, 0
.text:004111C0                 dd 4Fh, 500000h, 0
.text:004111CC                 dd 51h, 530000h, 0
.text:004111D8                 dd 54h, 550000h, 0
.text:004111E4                 dd 56h, 570000h, 0
.text:004111F0                 dd 58h, 590000h, 0
.text:004111FC                 dd 5Ah, 610000h, 0
.text:00411208                 dd 62h, 630000h, 0
.text:00411214                 dd 64h, 660000h, 0
.text:00411220                 dd 68h, 690000h, 0
.text:0041122C                 dd 6Ah, 6B0000h, 0
.text:00411238                 dd 6Dh, 6E0000h, 0
.text:00411244                 dd 70h, 710000h, 0
.text:00411250                 dd 72h, 730000h, 0
.text:0041125C                 dd 74h, 750000h, 0
.text:00411268                 dd 76h, 770000h, 0
.text:00411274                 dd 78h, 790000h, 0
.text:00411280                 dd 7Ah
.text:00411284                 dd offset a5            ; "(5)"
.text:00411288                 dd 0
.text:0041128C                 dd 42h, 430000h, 0
.text:00411298                 dd 44h, 450000h, 0
.text:004112A4                 dd 46h, 470000h, 0
.text:004112B0                 dd 48h, 490000h, 0
.text:004112BC                 dd 4Ah, 4B0000h, 0
.text:004112C8                 dd 4Ch, 4D0000h, 0
.text:004112D4                 dd 4Eh, 4F0000h, 0
.text:004112E0                 dd 50h, 510000h, 0
.text:004112EC                 dd 52h, 530000h, 0
.text:004112F8                 dd 54h, 550000h, 0
.text:00411304                 dd 56h, 570000h, 0
.text:00411310                 dd 58h, 590000h, 0
.text:0041131C                 dd 5Ah, 610000h, 0
.text:00411328                 dd 62h, 630000h, 0
.text:00411334                 dd 64h, 650000h, 0
.text:00411340                 dd 66h, 670000h, 0
.text:0041134C                 dd 68h, 690000h, 0
.text:00411358                 dd 6Ah, 6B0000h, 0
.text:00411364                 dd 6Ch, 6D0000h, 0
.text:00411370                 dd 6Eh, 6F0000h, 0
.text:0041137C                 dd 70h, 710000h, 0
.text:00411388                 dd 72h, 730000h, 0
.text:00411394                 dd 74h, 750000h, 0
.text:004113A0                 dd 76h, 770000h, 0
.text:004113AC                 dd 78h, 790000h, 0
.text:004113B8                 dd 7Ah
.text:004113BC                 dd offset a5            ; "(5)"
.text:004113C0                 dd 0
.text:004113C4                 dd 42h, 440000h, 0
.text:004113D0                 dd 45h, 460000h, 0
.text:004113DC                 dd 47h, 4A0000h, 0
.text:004113E8                 dd 4Bh, 4C0000h, 0
.text:004113F4                 dd 4Dh, 4E0000h, 0
.text:00411400                 dd 4Fh, 500000h, 0
.text:0041140C                 dd 51h, 530000h, 0
.text:00411418                 dd 54h, 550000h, 0
.text:00411424                 dd 56h, 570000h, 0
.text:00411430                 dd 58h, 590000h, 0
.text:0041143C                 dd 61h, 620000h, 0
.text:00411448                 dd 63h, 640000h, 0
.text:00411454                 dd 65h, 660000h, 0
.text:00411460                 dd 67h, 680000h, 0
.text:0041146C                 dd 69h, 6A0000h, 0
.text:00411478                 dd 6Bh, 6C0000h, 0
.text:00411484                 dd 6Dh, 6E0000h, 0
.text:00411490                 dd 6Fh, 700000h, 0
.text:0041149C                 dd 71h, 720000h, 0
.text:004114A8                 dd 73h, 740000h, 0
.text:004114B4                 dd 75h, 760000h, 0
.text:004114C0                 dd 77h, 780000h, 0
.text:004114CC                 dd 79h, 7A0000h, 0
.text:004114D8                 dd 41h, 420000h, 0
.text:004114E4                 dd 44h, 450000h, 0
.text:004114F0                 dd 46h, 470000h, 0
.text:004114FC                 dd 49h, 4A0000h, 0
.text:00411508                 dd 4Bh, 4C0000h, 0
.text:00411514                 dd 4Dh, 4F0000h, 0
.text:00411520                 dd 53h, 540000h, 0
.text:0041152C                 dd 55h, 560000h, 0
.text:00411538                 dd 57h, 580000h, 0
.text:00411544                 dd 59h, 610000h, 0
.text:00411550                 dd 62h, 630000h, 0
.text:0041155C                 dd 64h, 650000h, 0
.text:00411568                 dd 66h, 670000h, 0
.text:00411574                 dd 68h, 690000h, 0
.text:00411580                 dd 6Ah, 6B0000h, 0
.text:0041158C                 dd 6Ch, 6D0000h, 0
.text:00411598                 dd 6Eh, 6F0000h, 0
.text:004115A4                 dd 70h, 710000h, 0
.text:004115B0                 dd 72h, 730000h, 0
.text:004115BC                 dd 74h, 750000h, 0
.text:004115C8                 dd 76h, 770000h, 0
.text:004115D4                 dd 78h, 790000h, 0
.text:004115E0                 dd 7Ah
.text:004115E4                 dd offset a5            ; "(5)"
.text:004115E8                 dd 0
.text:004115EC                 dd 42h, 430000h, 0
.text:004115F8                 dd 44h, 450000h, 0
.text:00411604                 dd 46h, 470000h, 0
.text:00411610                 dd 48h, 490000h, 0
.text:0041161C                 dd 4Ah, 4B0000h, 0
.text:00411628                 dd 4Ch, 4D0000h, 0
.text:00411634                 dd 4Eh, 4F0000h, 0
.text:00411640                 dd 50h, 510000h, 0
.text:0041164C                 dd 52h, 530000h, 0
.text:00411658                 dd 54h, 550000h, 0
.text:00411664                 dd 56h, 570000h, 0
.text:00411670                 dd 58h, 590000h, 0
.text:0041167C                 dd 5Ah, 610000h, 0
.text:00411688                 dd 62h, 630000h, 0
.text:00411694                 dd 64h, 650000h, 0
.text:004116A0                 dd 66h, 670000h, 0
.text:004116AC                 dd 68h, 690000h, 0
.text:004116B8                 dd 6Ah, 6B0000h, 0
.text:004116C4                 dd 6Ch, 6D0000h, 0
.text:004116D0                 dd 6Eh, 6F0000h, 0
.text:004116DC                 dd 70h, 710000h, 0
.text:004116E8                 dd 72h, 730000h, 0
.text:004116F4                 dd 74h, 750000h, 0
.text:00411700                 dd 76h, 770000h, 0
.text:0041170C                 dd 78h, 790000h, 0
.text:00411718                 dd 7Ah
.text:0041171C                 dd offset a5            ; "(5)"
.text:00411720                 dd 0
.text:00411724                 dd 42h, 430000h, 0
.text:00411730                 dd 44h, 450000h, 0
.text:0041173C                 dd 46h, 470000h, 0
.text:00411748                 dd 48h, 490000h, 0
.text:00411754                 dd 4Ah, 4B0000h, 0
.text:00411760                 dd 4Ch, 4D0000h, 0
.text:0041176C                 dd 4Eh, 4F0000h, 0
.text:00411778                 dd 50h, 510000h, 0
.text:00411784                 dd 52h, 530000h, 0
.text:00411790                 dd 54h, 550000h, 0
.text:0041179C                 dd 56h, 570000h, 0
.text:004117A8                 dd 58h, 590000h, 0
.text:004117B4                 dd 5Ah, 610000h, 0
.text:004117C0                 dd 62h, 630000h, 0
.text:004117CC                 dd 64h, 650000h, 0
.text:004117D8                 dd 66h, 670000h, 0
.text:004117E4                 dd 68h, 690000h, 0
.text:004117F0                 dd 6Ah, 6B0000h, 0
.text:004117FC                 dd 6Ch, 6D0000h, 0
.text:00411808                 dd 6Eh, 6F0000h, 0
.text:00411814                 dd 70h, 710000h, 0
.text:00411820                 dd 72h, 730000h, 0
.text:0041182C                 dd 74h, 750000h, 0
.text:00411838                 dd 76h, 770000h, 0
.text:00411844                 dd 78h, 790000h, 0
.text:00411850                 dd 7Ah
.text:00411854                 dd offset a5            ; "(5)"
.text:00411858                 dd 0
.text:0041185C                 dd 42h, 430000h, 0
.text:00411868                 dd 44h, 450000h, 0
.text:00411874                 dd 46h, 470000h, 0
.text:00411880                 dd 48h, 490000h, 0
.text:0041188C                 dd 4Ah, 4B0000h, 0
.text:00411898                 dd 4Ch, 4D0000h, 0
.text:004118A4                 dd 4Eh, 4F0000h, 0
.text:004118B0                 dd 50h, 510000h, 0
.text:004118BC                 dd 52h, 530000h, 0
.text:004118C8                 dd 54h, 550000h, 0
.text:004118D4                 dd 56h, 570000h, 0
.text:004118E0                 dd 58h, 590000h, 0
.text:004118EC                 dd 5Ah, 610000h, 0
.text:004118F8                 dd 62h, 630000h, 0
.text:00411904                 dd 64h, 650000h, 0
.text:00411910                 dd 66h, 670000h, 0
.text:0041191C                 dd 68h, 690000h, 0
.text:00411928                 dd 6Ah, 6B0000h, 0
.text:00411934                 dd 6Ch, 6D0000h, 0
.text:00411940                 dd 6Eh, 6F0000h, 0
.text:0041194C                 dd 70h, 710000h, 0
.text:00411958                 dd 72h, 730000h, 0
.text:00411964                 dd 74h, 750000h, 0
.text:00411970                 dd 76h, 770000h, 0
.text:0041197C                 dd 78h, 790000h, 0
.text:00411988                 dd 7Ah
.text:0041198C                 dd offset a5            ; "(5)"
.text:00411990                 dd 0
.text:00411994                 dd 42h, 430000h, 0
.text:004119A0                 dd 44h, 450000h, 0
.text:004119AC                 dd 46h, 470000h, 0
.text:004119B8                 dd 48h, 490000h, 0
.text:004119C4                 dd 4Ah, 4B0000h, 0
.text:004119D0                 dd 4Ch, 4D0000h, 0
.text:004119DC                 dd 4Eh, 4F0000h, 0
.text:004119E8                 dd 50h, 510000h, 0
.text:004119F4                 dd 52h, 530000h, 0
.text:00411A00                 dd 54h, 550000h, 0
.text:00411A0C                 dd 56h, 570000h, 0
.text:00411A18                 dd 58h, 590000h, 0
.text:00411A24                 dd 5Ah, 610000h, 0
.text:00411A30                 dd 62h, 630000h, 0
.text:00411A3C                 dd 64h, 650000h, 0
.text:00411A48                 dd 66h, 670000h, 0
.text:00411A54                 dd 68h, 690000h, 0
.text:00411A60                 dd 6Ah, 6B0000h, 0
.text:00411A6C                 dd 6Ch, 6D0000h, 0
.text:00411A78                 dd 6Eh, 6F0000h, 0
.text:00411A84                 dd 70h, 710000h, 0
.text:00411A90                 dd 72h, 730000h, 0
.text:00411A9C                 dd 74h, 750000h, 0
.text:00411AA8                 dd 76h, 770000h, 0
.text:00411AB4                 dd 78h, 790000h, 0
.text:00411AC0                 dd 7Ah
.text:00411AC4                 dd offset a5            ; "(5)"
.text:00411AC8                 dd 0
.text:00411ACC                 dd 42h, 430000h, 0
.text:00411AD8                 dd 44h, 450000h, 0
.text:00411AE4                 dd 46h, 470000h, 0
.text:00411AF0                 dd 48h, 490000h, 0
.text:00411AFC                 dd 4Ah, 4B0000h, 0
.text:00411B08                 dd 4Ch, 4D0000h, 0
.text:00411B14                 dd 4Eh, 4F0000h, 0
.text:00411B20                 dd 50h, 510000h, 0
.text:00411B2C                 dd 52h, 530000h, 0
.text:00411B38                 dd 54h, 550000h, 0
.text:00411B44                 dd 56h, 570000h, 0
.text:00411B50                 dd 58h, 590000h, 0
.text:00411B5C                 dd 5Ah, 610000h, 0
.text:00411B68                 dd 62h, 630000h, 0
.text:00411B74                 dd 64h, 650000h, 0
.text:00411B80                 dd 66h, 670000h, 0
.text:00411B8C                 dd 68h, 690000h, 0
.text:00411B98                 dd 6Ah, 6B0000h, 0
.text:00411BA4                 dd 6Ch, 6D0000h, 0
.text:00411BB0                 dd 6Eh, 6F0000h, 0
.text:00411BBC                 dd 70h, 710000h, 0
.text:00411BC8                 dd 72h, 730000h, 0
.text:00411BD4                 dd 74h, 750000h, 0
.text:00411BE0                 dd 76h, 770000h, 0
.text:00411BEC                 dd 78h, 790000h, 0
.text:00411BF8                 dd 7Ah
.text:00411BFC                 dd offset a5            ; "(5)"
.text:00411C00                 dd 0
.text:00411C04                 dd 42h, 430000h, 0
.text:00411C10                 dd 44h, 450000h, 0
.text:00411C1C                 dd 46h, 470000h, 0
.text:00411C28                 dd 48h, 490000h, 0
.text:00411C34                 dd 4Ah, 4B0000h, 0
.text:00411C40                 dd 4Ch, 4D0000h, 0
.text:00411C4C                 dd 4Eh, 4F0000h, 0
.text:00411C58                 dd 50h, 510000h, 0
.text:00411C64                 dd 52h, 530000h, 0
.text:00411C70                 dd 54h, 550000h, 0
.text:00411C7C                 dd 56h, 570000h, 0
.text:00411C88                 dd 58h, 590000h, 0
.text:00411C94                 dd 5Ah, 610000h, 0
.text:00411CA0                 dd 62h, 630000h, 0
.text:00411CAC                 dd 64h, 650000h, 0
.text:00411CB8                 dd 66h, 670000h, 0
.text:00411CC4                 dd 68h, 690000h, 0
.text:00411CD0                 dd 6Ah, 6B0000h, 0
.text:00411CDC                 dd 6Ch, 6D0000h, 0
.text:00411CE8                 dd 6Eh, 6F0000h, 0
.text:00411CF4                 dd 70h, 710000h, 0
.text:00411D00                 dd 72h, 730000h, 0
.text:00411D0C                 dd 74h, 750000h, 0
.text:00411D18                 dd 76h, 770000h, 0
.text:00411D24                 dd 78h, 790000h, 0
.text:00411D30                 dd 7Ah, 300000h, 0
.text:00411D3C                 dd 31h, 320000h, 0
.text:00411D48                 dd 33h, 340000h, 0
.text:00411D54                 dd 35h, 360000h, 0
.text:00411D60                 dd 37h, 380000h, 0
.text:00411D6C                 dd 39h, 300000h, 0
.text:00411D78                 dd 31h, 320000h, 0
.text:00411D84                 dd 33h, 340000h, 0
.text:00411D90                 dd 35h, 360000h, 0
.text:00411D9C                 dd 37h, 380000h, 0
.text:00411DA8                 dd 39h, 300000h, 0
.text:00411DB4                 dd 31h, 320000h, 0
.text:00411DC0                 dd 33h, 340000h, 0
.text:00411DCC                 dd 35h, 360000h, 0
.text:00411DD8                 dd 37h, 380000h, 0
.text:00411DE4                 dd 39h, 300000h, 0
.text:00411DF0                 dd 31h, 320000h, 0
.text:00411DFC                 dd 33h, 340000h, 0
.text:00411E08                 dd 35h, 360000h, 0
.text:00411E14                 dd 37h, 380000h, 0
.text:00411E20                 dd 39h, 300000h, 0
.text:00411E2C                 dd 31h, 320000h, 0
.text:00411E38                 dd 33h, 340000h, 0
.text:00411E44                 dd 35h, 360000h, 0
.text:00411E50                 dd 37h, 380000h, 0
.text:00411E5C                 dd 39h, 0B48D0000h, 26h, 27BC8D00h, 41h dup(0)
.text:00411F70                 dd 4 dup(20002h), 20030002h, 2 dup(20022002h), 9 dup(20002h)
.text:00411F70                 dd 0C0046001h, 7 dup(0C004C004h), 5 dup(0D808D808h), 3 dup(0C004C004h)
.text:00411F70                 dd 0D508C004h, 2 dup(0D508D508h), 0C508D508h, 9 dup(0C508C508h)
.text:00411F70                 dd 0C004C508h, 2 dup(0C004C004h), 0D608C004h, 2 dup(0D608D608h)
.text:00411F70                 dd 0C608D608h, 9 dup(0C608C608h), 0C004C608h, 0C004C004h
.text:00411F70                 dd 2C004h, 40h dup(0)
.text:00412170 dword_412170    dd 9 dup(20000h), 20030000h, 4 dup(20020000h), 12h dup(20000h)
.text:00412170                                         ; DATA XREF: .text:004138A8↓o
.text:00412170                 dd 60010000h, 0Fh dup(0C0040000h), 0Ah dup(0D8080000h)
.text:00412170                 dd 7 dup(0C0040000h), 6 dup(0D5080000h), 14h dup(0C5080000h)
.text:00412170                 dd 6 dup(0C0040000h), 6 dup(0D6080000h), 14h dup(0C6080000h)
.text:00412170                 dd 4 dup(0C0040000h), 20000h, 80h dup(0)
.text:00412570 dword_412570    dd 80h, 81h, 82h, 83h, 84h, 85h, 86h, 87h, 88h, 89h, 8Ah
.text:00412570                 dd 8Bh, 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h, 93h, 94h, 95h
.text:00412570                 dd 96h, 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh, 9Eh, 9Fh, 0A0h
.text:00412570                 dd 0A1h, 0A2h, 0A3h, 0A4h, 0A5h, 0A6h, 0A7h, 0A8h, 0A9h
.text:00412570                 dd 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h
.text:00412570                 dd 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh
.text:00412570                 dd 0BCh, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h, 0C2h, 0C3h, 0C4h
.text:00412570                 dd 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh
.text:00412570                 dd 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h
.text:00412570                 dd 0D7h, 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
.text:00412570                 dd 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h, 0E8h
.text:00412570                 dd 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h, 0F1h
.text:00412570                 dd 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh
.text:00412570                 dd 0FBh, 0FCh, 0FDh, 0FEh, 0FFFFFFFFh, 0
.text:00412774 dword_412774    dd 1, 2, 3, 4, 5, 6, 7, 8, 9, 0Ah, 0Bh, 0Ch, 0Dh, 0Eh
.text:00412774                 dd 0Fh, 10h, 11h, 12h, 13h, 14h, 15h, 16h, 17h, 18h, 19h
.text:00412774                 dd 1Ah, 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 20h, 21h, 22h, 23h, 24h
.text:00412774                 dd 25h, 26h, 27h, 28h, 29h, 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh
.text:00412774                 dd 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h, 3Ah
.text:00412774                 dd 3Bh, 3Ch, 3Dh, 3Eh, 3Fh, 40h, 41h, 42h, 43h, 44h, 45h
.text:00412774                 dd 46h, 47h, 48h, 49h, 4Ah, 4Bh, 4Ch, 4Dh, 4Eh, 4Fh, 50h
.text:00412774                 dd 51h, 52h, 53h, 54h, 55h, 56h, 57h, 58h, 59h, 5Ah, 5Bh
.text:00412774                 dd 5Ch, 5Dh, 5Eh, 5Fh, 60h, 41h, 42h, 43h, 44h, 45h, 46h
.text:00412774                 dd 47h, 48h, 49h, 4Ah, 4Bh, 4Ch, 4Dh, 4Eh, 4Fh, 50h, 51h
.text:00412774                 dd 52h, 53h, 54h, 55h, 56h, 57h, 58h, 59h, 5Ah, 7Bh, 7Ch
.text:00412774                 dd 7Dh, 7Eh, 7Fh, 80h, 81h, 82h, 83h, 84h, 85h, 86h, 87h
.text:00412774                 dd 88h, 89h, 8Ah, 8Bh, 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h
.text:00412774                 dd 93h, 94h, 95h, 96h, 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh
.text:00412774                 dd 9Eh, 9Fh, 0A0h, 0A1h, 0A2h, 0A3h, 0A4h, 0A5h, 0A6h
.text:00412774                 dd 0A7h, 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
.text:00412774                 dd 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h
.text:00412774                 dd 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h
.text:00412774                 dd 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh
.text:00412774                 dd 0CBh, 0CCh, 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h
.text:00412774                 dd 0D4h, 0D5h, 0D6h, 0D7h, 0D8h, 0D9h, 0DAh, 0DBh, 0DCh
.text:00412774                 dd 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h
.text:00412774                 dd 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh
.text:00412774                 dd 0EFh, 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
.text:00412774                 dd 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh, 80h
.text:00412774                 dd 81h, 82h, 83h, 84h, 85h, 86h, 87h, 88h, 89h, 8Ah, 8Bh
.text:00412774                 dd 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h, 93h, 94h, 95h, 96h
.text:00412774                 dd 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh, 9Eh, 9Fh, 0A0h, 0A1h
.text:00412774                 dd 0A2h, 0A3h, 0A4h, 0A5h, 0A6h, 0A7h, 0A8h, 0A9h, 0AAh
.text:00412774                 dd 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h
.text:00412774                 dd 0B4h, 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh
.text:00412774                 dd 0BDh, 0BEh, 0BFh, 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h
.text:00412774                 dd 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh
.text:00412774                 dd 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
.text:00412774                 dd 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h
.text:00412774                 dd 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h, 0E8h, 0E9h
.text:00412774                 dd 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h, 0F1h, 0F2h
.text:00412774                 dd 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh
.text:00412774                 dd 0FCh, 0FDh, 0FEh, 0FFFFFFFFh, 0
.text:00412D74                 dd 1, 2, 3, 4, 5, 6, 7, 8, 9, 0Ah, 0Bh, 0Ch, 0Dh, 0Eh
.text:00412D74                 dd 0Fh, 10h, 11h, 12h, 13h, 14h, 15h, 16h, 17h, 18h, 19h
.text:00412D74                 dd 1Ah, 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 20h, 21h, 22h, 23h, 24h
.text:00412D74                 dd 25h, 26h, 27h, 28h, 29h, 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh
.text:00412D74                 dd 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h, 3Ah
.text:00412D74                 dd 3Bh, 3Ch, 3Dh, 3Eh, 3Fh, 40h, 61h, 62h, 63h, 64h, 65h
.text:00412D74                 dd 66h, 67h, 68h, 69h, 6Ah, 6Bh, 6Ch, 6Dh, 6Eh, 6Fh, 70h
.text:00412D74                 dd 71h, 72h, 73h, 74h, 75h, 76h, 77h, 78h, 79h, 7Ah, 5Bh
.text:00412D74                 dd 5Ch, 5Dh, 5Eh, 5Fh, 60h, 61h, 62h, 63h, 64h, 65h, 66h
.text:00412D74                 dd 67h, 68h, 69h, 6Ah, 6Bh, 6Ch, 6Dh, 6Eh, 6Fh, 70h, 71h
.text:00412D74                 dd 72h, 73h, 74h, 75h, 76h, 77h, 78h, 79h, 7Ah, 7Bh, 7Ch
.text:00412D74                 dd 7Dh, 7Eh, 7Fh, 80h, 81h, 82h, 83h, 84h, 85h, 86h, 87h
.text:00412D74                 dd 88h, 89h, 8Ah, 8Bh, 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h
.text:00412D74                 dd 93h, 94h, 95h, 96h, 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh
.text:00412D74                 dd 9Eh, 9Fh, 0A0h, 0A1h, 0A2h, 0A3h, 0A4h, 0A5h, 0A6h
.text:00412D74                 dd 0A7h, 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
.text:00412D74                 dd 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h
.text:00412D74                 dd 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h
.text:00412D74                 dd 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh
.text:00412D74                 dd 0CBh, 0CCh, 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h
.text:00412D74                 dd 0D4h, 0D5h, 0D6h, 0D7h, 0D8h, 0D9h, 0DAh, 0DBh, 0DCh
.text:00412D74                 dd 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h
.text:00412D74                 dd 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh
.text:00412D74                 dd 0EFh, 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
.text:00412D74                 dd 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh, 2 dup(0)
.text:00413178                 dd 7FFFFFEh, 5 dup(0)
.text:00413190 dword_413190    dd 7, 1, 6, 2 dup(1), 18h, 0
.text:00413190                                         ; DATA XREF: .text:004139AC↓o
.text:004131AC                 dd 20h, 7FFFFFEh, 0
.text:004131B8                 db 18h dup(90h)
.text:004131D0                 dd 3 dup(0)
.text:004131DC                 dd 7FFFFFEh, 4 dup(0)
.text:004131F0 dword_4131F0    dd 7, 1, 6, 2 dup(1), 18h, 0
.text:004131F0                                         ; DATA XREF: .text:004139B0↓o
.text:0041320C                 dd 20h, 0
.text:00413214                 dd 7FFFFFEh, 6 dup(90909090h), 2 dup(0)
.text:00413238                 dd 2 dup(7FFFFFEh), 4 dup(0)
.text:00413250 dword_413250    dd 7, 1, 6, 2 dup(1), 18h, 0
.text:00413250                                         ; DATA XREF: .text:004139B4↓o
.text:0041326C                 dd 20h, 2 dup(7FFFFFEh), 6 dup(90909090h), 0
.text:00413294                 dd 3FF0000h, 6 dup(0)
.text:004132B0 dword_4132B0    dd 6, 1, 6, 0           ; DATA XREF: .text:004139B8↓o
.text:004132C0                 dd 1, 18h, 1Ch, 0
.text:004132D0                 dd 3FF0000h, 7 dup(90909090h), 0
.text:004132F4                 dd 3FF0000h, 2 dup(7Eh), 4 dup(0)
.text:00413310 dword_413310    dd 7, 1, 7, 0           ; DATA XREF: .text:004139BC↓o
.text:00413320                 dd 3, 18h, 1Ch, 0
.text:00413330                 dd 3FF0000h, 2 dup(7Eh), 5 dup(90909090h), 3E00h, 1, 6 dup(0)
.text:00413370 dword_413370    dd 6, 1, 6, 0           ; DATA XREF: .text:004139C0↓o
.text:00413380                 dd 1, 18h, 1Ch, 3E00h, 1, 7 dup(90909090h), 0
.text:004133B4                 dd 2 dup(0FFFFFFFFh), 7FFFFFFFh, 4 dup(0)
.text:004133D0 dword_4133D0    dd 7, 1, 7, 0           ; DATA XREF: .text:004139C4↓o
.text:004133E0                 dd 3, 18h, 1Ch, 0
.text:004133F0                 dd 2 dup(0FFFFFFFFh), 7FFFFFFFh, 5 dup(90909090h), 0
.text:00413414                 dd 0FFFFFFFEh, 0FFFFFFFFh, 7FFFFFFFh, 4 dup(0)
.text:00413430 dword_413430    dd 7, 1, 7, 0           ; DATA XREF: .text:004139C8↓o
.text:00413440                 dd 3, 18h, 1Ch, 0
.text:00413450                 dd 0FFFFFFFEh, 0FFFFFFFFh, 7FFFFFFFh, 5 dup(90909090h)
.text:00413450                 dd 200h, 1, 6 dup(0)
.text:00413490 dword_413490    dd 6, 1, 6, 0           ; DATA XREF: .text:004139CC↓o
.text:004134A0                 dd 1, 18h, 1Ch, 200h, 1, 7 dup(90909090h), 0FFFFFFFFh
.text:004134A0                 dd 2 dup(0)
.text:004134DC                 dd 80000000h, 4 dup(0)
.text:004134F0 dword_4134F0    dd 7, 1, 7, 0           ; DATA XREF: .text:004139D0↓o
.text:00413500                 dd 3, 18h, 1Ch, 0FFFFFFFFh, 2 dup(0)
.text:00413518                 dd 80000000h, 5 dup(90909090h), 0
.text:00413534                 dd 0FC00FFFEh, 0F8000001h, 78000001h, 4 dup(0)
.text:00413550 dword_413550    dd 7, 1, 7, 0           ; DATA XREF: .text:004139D4↓o
.text:00413560                 dd 3, 18h, 1Ch, 0
.text:00413570                 dd 0FC00FFFEh, 0F8000001h, 78000001h, 5 dup(90909090h)
.text:00413570                 dd 0
.text:00413594                 dd 3FF0000h, 2 dup(7FFFFFEh), 4 dup(0)
.text:004135B0 dword_4135B0    dd 7, 1, 7, 0           ; DATA XREF: .text:004139D8↓o
.text:004135C0                 dd 3, 18h, 1Ch, 0
.text:004135D0 dword_4135D0    dd 3FF0000h, 2 dup(7FFFFFEh), 5 dup(90909090h), 7, 1, 5
.text:004135D0                 dd 3, 1Fh, 18h, 3 dup(0)
.text:00413614                 dd 28h, 0
.text:0041361C                 dd 1Ah dup(0FFFFFFE0h), 5 dup(0)
.text:00413698                 db 18h dup(90h)
.text:004136B0 dword_4136B0    dd 7, 1, 5, 3, 1Fh, 18h, 2 dup(0)
.text:004136B0                                         ; DATA XREF: .text:004139E0↓o
.text:004136D0                 dd 28h, 2 dup(0)
.text:004136DC                 dd 1Ah dup(20h), 5 dup(0)
.text:00413758                 db 18h dup(90h)
.text:00413770 dword_413770    dd 7, 1, 4, 7, 0Fh, 18h, 38h, 0
.text:00413770                                         ; DATA XREF: .text:004138C4↓o
.text:00413790 dword_413790    dd 5 dup(48h), 49h, 0FFFFFF00h, 3 dup(0FFFFFFFFh), 4 dup(1010101h)
.text:00413790                 dd 0FFh, 26748Dh, 65707075h, 6F6C0072h, 726577h, 68706C61h
.text:00413790                 dd 69640061h, 746967h, 67696478h, 73007469h, 65636170h
.text:00413790                 dd 69727000h, 6700746Eh, 68706172h, 616C6200h, 63006B6Eh
.text:00413790                 dd 6C72746Eh, 6E757000h, 61007463h, 6D756E6Ch, 6F740000h
.text:00413790                 dd 65707075h, 6F740072h, 65776F6Ch, 30000072h, 32003100h
.text:00413790                 dd 34003300h, 36003500h, 38003700h, 90003900h, 30h, 31h
.text:00413790                 dd 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h, 3Fh, 26748Dh
.text:00413790                 dd 414590h, 5 dup(0)
.text:00413888                 dd 0FFFFFFFFh, 1, 54h, 411E70h, 412570h, 0
.text:004138A0                 dd offset dword_412774+3FCh
.text:004138A4                 align 8
.text:004138A8                 dd offset dword_412170
.text:004138AC                 dd 4 dup(0)
.text:004138BC                 dd offset dword_413790+40h
.text:004138C0                 dd offset dword_413790+8Ah
.text:004138C4                 dd offset dword_413770
.text:004138C8                 dd 1
.text:004138CC                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:004138D0                 dd offset dword_412570+200h
.text:004138D4                 dd offset dword_412774+5FCh
.text:004138D8                 dd 46h, 52h, 1, 41382Bh, 41382Dh, 41382Fh, 413831h, 413833h
.text:004138D8                 dd 413835h, 413837h, 413839h, 41383Bh, 41383Dh, 1, 413840h
.text:004138D8                 dd 413844h, 413848h, 41384Ch, 413850h, 413854h, 413858h
.text:004138D8                 dd 41385Ch, 413860h, 413864h, 41382Bh, 41382Dh, 41382Fh
.text:004138D8                 dd 413831h, 413833h, 413835h, 413837h, 413839h, 41383Bh
.text:004138D8                 dd 41383Dh, 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h
.text:004138D8                 dd 39h, 548h, 40B990h, 40CEB0h, 40E3D0h, 40F8F0h, 1, 413868h
.text:004138D8                 dd 2 dup(0)
.text:004139AC                 dd offset dword_413190
.text:004139B0                 dd offset dword_4131F0
.text:004139B4                 dd offset dword_413250
.text:004139B8                 dd offset dword_4132B0
.text:004139BC                 dd offset dword_413310
.text:004139C0                 dd offset dword_413370
.text:004139C4                 dd offset dword_4133D0
.text:004139C8                 dd offset dword_413430
.text:004139CC                 dd offset dword_413490
.text:004139D0                 dd offset dword_4134F0
.text:004139D4                 dd offset dword_413550
.text:004139D8                 dd offset dword_4135B0
.text:004139DC                 dd offset dword_4135D0+20h
.text:004139E0                 dd offset dword_4136B0
.text:004139E4                 align 10h
.text:004139F0                 dd 2D00007Fh, 90909000h, 6 dup(90909090h), 414590h, 5 dup(0)
.text:00413A28                 dd 0FFFFFFFFh, 0
.text:00413A30                 dd 2Eh, 7 dup(4139F2h), 8 dup(4139F0h), 4139F3h, 6 dup(4139F0h)
.text:00413A30                 dd 2 dup(4139F2h), 0Eh dup(4139F0h), 2775h, 5F5BEBFh, 2775h
.text:00413A30                 dd 5F5BEBFh, 1, 2 dup(0)
.text:00413AE8                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00413AEC                 align 10h
.text:00413AF0                 dd 9000002Eh, 7 dup(90909090h), 414590h, 5 dup(0)
.text:00413B28                 dd 0FFFFFFFFh, 0
.text:00413B30                 dd 6, 413AF0h, 2 dup(413AF2h), 2Eh, 0
.text:00413B48                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00413B4C                 align 10h
.text:00413B50                 db  53h ; S
.text:00413B51                 db 75h, 6Eh, 0
.text:00413B54                 db  4Dh ; M
.text:00413B55                 db 6Fh, 6Eh, 0
.text:00413B58                 db  54h ; T
.text:00413B59                 db 75h, 65h, 0
.text:00413B5C                 db  57h ; W
.text:00413B5D                 db 65h, 64h, 0
.text:00413B60                 db  54h ; T
.text:00413B61                 db 68h, 75h, 0
.text:00413B64                 db  46h ; F
.text:00413B65                 db 72h, 69h, 0
.text:00413B68                 db  53h ; S
.text:00413B69                 db 61h, 74h, 0
.text:00413B6C aSunday         db 'Sunday',0           ; DATA XREF: .text:00413F50↓o
.text:00413B73 aMonday         db 'Monday',0           ; DATA XREF: .text:00413F54↓o
.text:00413B7A aTuesday        db 'Tuesday',0          ; DATA XREF: .text:00413F58↓o
.text:00413B82 aWednesday      db 'Wednesday',0        ; DATA XREF: .text:00413F5C↓o
.text:00413B8C aThursday       db 'Thursday',0         ; DATA XREF: .text:00413F60↓o
.text:00413B95 aFriday         db 'Friday',0           ; DATA XREF: .text:00413F64↓o
.text:00413B9C aSaturday       db 'Saturday',0         ; DATA XREF: .text:00413F68↓o
.text:00413BA5 aJan            db 'Jan',0              ; DATA XREF: .text:00413F6C↓o
.text:00413BA9 aFeb            db 'Feb',0              ; DATA XREF: .text:00413F70↓o
.text:00413BAD aMar            db 'Mar',0              ; DATA XREF: .text:00413F74↓o
.text:00413BB1 aApr            db 'Apr',0              ; DATA XREF: .text:00413F78↓o
.text:00413BB5 aMay            db 'May',0              ; DATA XREF: .text:00413F7C↓o
.text:00413BB5                                         ; .text:00413FAC↓o
.text:00413BB9 aJun            db 'Jun',0              ; DATA XREF: .text:00413F80↓o
.text:00413BBD aJul            db 'Jul',0              ; DATA XREF: .text:00413F84↓o
.text:00413BC1 aAug            db 'Aug',0              ; DATA XREF: .text:00413F88↓o
.text:00413BC5 aSep            db 'Sep',0              ; DATA XREF: .text:00413F8C↓o
.text:00413BC9 aOct            db 'Oct',0              ; DATA XREF: .text:00413F90↓o
.text:00413BCD aNov            db 'Nov',0              ; DATA XREF: .text:00413F94↓o
.text:00413BD1 aDec            db 'Dec',0              ; DATA XREF: .text:00413F98↓o
.text:00413BD5 aJanuary        db 'January',0          ; DATA XREF: .text:00413F9C↓o
.text:00413BDD aFebruary       db 'February',0         ; DATA XREF: .text:00413FA0↓o
.text:00413BE6 aMarch          db 'March',0            ; DATA XREF: .text:00413FA4↓o
.text:00413BEC aApril          db 'April',0            ; DATA XREF: .text:00413FA8↓o
.text:00413BF2 aJune           db 'June',0             ; DATA XREF: .text:00413FB0↓o
.text:00413BF7 aJuly           db 'July',0             ; DATA XREF: .text:00413FB4↓o
.text:00413BFC aAugust         db 'August',0           ; DATA XREF: .text:00413FB8↓o
.text:00413C03 aSeptember      db 'September',0        ; DATA XREF: .text:00413FBC↓o
.text:00413C0D aOctober        db 'October',0          ; DATA XREF: .text:00413FC0↓o
.text:00413C15 aNovember       db 'November',0         ; DATA XREF: .text:00413FC4↓o
.text:00413C1E aDecember       db 'December',0         ; DATA XREF: .text:00413FC8↓o
.text:00413C27 aAm             db 'AM',0               ; DATA XREF: .text:00413FCC↓o
.text:00413C2A aPm             db 'PM',0               ; DATA XREF: .text:00413FD0↓o
.text:00413C2D aABEHMSY        db '%a %b %e %H:%M:%S %Y',0
.text:00413C2D                                         ; DATA XREF: .text:00413FD4↓o
.text:00413C42 aMDY            db '%m/%d/%y',0         ; DATA XREF: .text:00413FD8↓o
.text:00413C4B aHMS            db '%H:%M:%S',0         ; DATA XREF: .text:00413FDC↓o
.text:00413C54 aIMSP           db '%I:%M:%S %p',0      ; DATA XREF: .text:00413FE0↓o
.text:00413C60 dword_413C60    dd 539000h, 6E0075h, 4D0000h, 6E006Fh, 540000h, 650075h
.text:00413C60                                         ; DATA XREF: .text:00413FE8↓o
.text:00413C60                                         ; .text:00413FEC↓o ...
.text:00413C60                 dd 570000h, 640065h, 540000h, 750068h, 460000h, 690072h
.text:00413C60                 dd 530000h, 740061h, 530000h, 6E0075h, 610064h, 79h, 6F004Dh
.text:00413C60                 dd 64006Eh, 790061h, 540000h, 650075h, 640073h, 790061h
.text:00413C60                 dd 570000h, 640065h, 65006Eh, 640073h, 790061h, 540000h
.text:00413C60                 dd 750068h, 730072h, 610064h, 79h, 720046h, 640069h, 790061h
.text:00413C60                 dd 530000h, 740061h, 720075h, 610064h, 79h, 61004Ah, 6Eh
.text:00413C60                 dd 650046h, 62h, 61004Dh, 72h, 700041h, 72h, 61004Dh, 79h
.text:00413C60                 dd 75004Ah, 6Eh, 75004Ah, 6Ch, 750041h, 67h, 650053h, 70h
.text:00413C60                 dd 63004Fh, 74h, 6F004Eh, 76h, 650044h, 63h, 61004Ah, 75006Eh
.text:00413C60                 dd 720061h, 79h, 650046h, 720062h, 610075h, 790072h, 4D0000h
.text:00413C60                 dd 720061h, 680063h
.text:00413D98 off_413D98      dd offset a5            ; DATA XREF: .text:00414078↓o
.text:00413D98                                         ; "(5)"
.text:00413D9C aPril:
.text:00413D9C                 text "UTF-16LE", 'pril',0
.text:00413DA6 aJ_2            db 'J',0                ; DATA XREF: .text:00414080↓o
.text:00413DA8 aUne:
.text:00413DA8                 text "UTF-16LE", 'une',0
.text:00413DB0 aJuly_0:                                ; DATA XREF: .text:00414084↓o
.text:00413DB0                 text "UTF-16LE", 'July',0
.text:00413DBA aA              db 'A',0                ; DATA XREF: .text:00414088↓o
.text:00413DBC aUgust:
.text:00413DBC                 text "UTF-16LE", 'ugust',0
.text:00413DC8 aSeptember_0:                           ; DATA XREF: .text:0041408C↓o
.text:00413DC8                 text "UTF-16LE", 'September',0
.text:00413DDC aOctober_0:                             ; DATA XREF: .text:00414090↓o
.text:00413DDC                 text "UTF-16LE", 'October',0
.text:00413DEC aNovember_0:                            ; DATA XREF: .text:00414094↓o
.text:00413DEC                 text "UTF-16LE", 'November',0
.text:00413DFE aD_2            db 'D',0                ; DATA XREF: .text:00414098↓o
.text:00413E00 aEcember:
.text:00413E00                 text "UTF-16LE", 'ecember',0
.text:00413E10 aAm_0:                                  ; DATA XREF: .text:0041409C↓o
.text:00413E10                 text "UTF-16LE", 'AM',0
.text:00413E16 aP_3            db 'P',0                ; DATA XREF: .text:004140A0↓o
.text:00413E18 aM              db 'M',0
.text:00413E1A                 align 4
.text:00413E1C                 db 14h dup(90h)
.text:00413E30 aABEHMSY_0:                             ; DATA XREF: .text:004140A4↓o
.text:00413E30                 text "UTF-16LE", '%a %b %e %H:%M:%S %Y',0
.text:00413E5A asc_413E5A      db '%',0                ; DATA XREF: .text:004140A8↓o
.text:00413E5C aMDY_0:
.text:00413E5C                 text "UTF-16LE", 'm/%d/%y',0
.text:00413E6C aHMS_0:                                 ; DATA XREF: .text:004140AC↓o
.text:00413E6C                 text "UTF-16LE", '%H:%M:%S',0
.text:00413E7E asc_413E7E      db '%',0                ; DATA XREF: .text:004140B0↓o
.text:00413E80 aIMSP_0:
.text:00413E80                 text "UTF-16LE", 'I:%M:%S %p',0
.text:00413E96 unk_413E96      db    0                 ; DATA XREF: .text:004140B4↓o
.text:00413E96                                         ; .text:004140B8↓o ...
.text:00413E97                 db    0
.text:00413E98 asc_413E98      db 7,0                  ; DATA XREF: .text:004140C8↓o
.text:00413E98                                         ; .text:004140D4↓o
.text:00413E9A                 dw 4
.text:00413E9C unk_413E9C      db    1                 ; DATA XREF: .text:004140D8↓o
.text:00413E9C                                         ; .text:004140DC↓o
.text:00413E9D                 align 2
.text:00413E9E aABEHMSZY       db '%a %b %e %H:%M:%S %Z %Y',0
.text:00413E9E                                         ; DATA XREF: .text:004140E4↓o
.text:00413EB6                 db 1Ah dup(90h)
.text:00413ED0 aABEHMSZY_0:                            ; DATA XREF: .text:004140E8↓o
.text:00413ED0                 text "UTF-16LE", '%a %b %e %H:%M:%S %Z %Y',0
.text:00413F00                 db 11h dup(90h)
.text:00413F11                 db 45h, 41h, 0
.text:00413F14                 dd 5 dup(0)
.text:00413F28                 dd 0FFFFFFFFh, 0
.text:00413F30                 dd 6Fh, 413B50h, 413B54h, 413B58h, 413B5Ch, 413B60h, 413B64h
.text:00413F30                 dd 413B68h
.text:00413F50                 dd offset aSunday       ; "Sunday"
.text:00413F54                 dd offset aMonday       ; "Monday"
.text:00413F58                 dd offset aTuesday      ; "Tuesday"
.text:00413F5C                 dd offset aWednesday    ; "Wednesday"
.text:00413F60                 dd offset aThursday     ; "Thursday"
.text:00413F64                 dd offset aFriday       ; "Friday"
.text:00413F68                 dd offset aSaturday     ; "Saturday"
.text:00413F6C                 dd offset aJan          ; "Jan"
.text:00413F70                 dd offset aFeb          ; "Feb"
.text:00413F74                 dd offset aMar          ; "Mar"
.text:00413F78                 dd offset aApr          ; "Apr"
.text:00413F7C                 dd offset aMay          ; "May"
.text:00413F80                 dd offset aJun          ; "Jun"
.text:00413F84                 dd offset aJul          ; "Jul"
.text:00413F88                 dd offset aAug          ; "Aug"
.text:00413F8C                 dd offset aSep          ; "Sep"
.text:00413F90                 dd offset aOct          ; "Oct"
.text:00413F94                 dd offset aNov          ; "Nov"
.text:00413F98                 dd offset aDec          ; "Dec"
.text:00413F9C                 dd offset aJanuary      ; "January"
.text:00413FA0                 dd offset aFebruary     ; "February"
.text:00413FA4                 dd offset aMarch        ; "March"
.text:00413FA8                 dd offset aApril        ; "April"
.text:00413FAC                 dd offset aMay          ; "May"
.text:00413FB0                 dd offset aJune         ; "June"
.text:00413FB4                 dd offset aJuly         ; "July"
.text:00413FB8                 dd offset aAugust       ; "August"
.text:00413FBC                 dd offset aSeptember    ; "September"
.text:00413FC0                 dd offset aOctober      ; "October"
.text:00413FC4                 dd offset aNovember     ; "November"
.text:00413FC8                 dd offset aDecember     ; "December"
.text:00413FCC                 dd offset aAm           ; "AM"
.text:00413FD0                 dd offset aPm           ; "PM"
.text:00413FD4                 dd offset aABEHMSY      ; "%a %b %e %H:%M:%S %Y"
.text:00413FD8                 dd offset aMDY          ; "%m/%d/%y"
.text:00413FDC                 dd offset aHMS          ; "%H:%M:%S"
.text:00413FE0                 dd offset aIMSP         ; "%I:%M:%S %p"
.text:00413FE4                 align 8
.text:00413FE8                 dd offset dword_413C60
.text:00413FEC                 dd offset dword_413C60
.text:00413FF0                 dd offset dword_413C60
.text:00413FF4                 dd offset dword_413C60
.text:00413FF8                 dd offset dword_413C60
.text:00413FFC                 align 10h
.text:00414000                 dd offset dword_413C60
.text:00414004                 dd offset dword_413C60+2
.text:00414008                 dd offset dword_413C60+0Ah
.text:0041400C                 dd offset dword_413C60+12h
.text:00414010                 dd offset dword_413C60+1Ah
.text:00414014                 dd offset dword_413C60+22h
.text:00414018                 dd offset dword_413C60+2Ah
.text:0041401C                 dd offset dword_413C60+32h
.text:00414020                 dd offset dword_413C60+3Ah
.text:00414024                 dd offset dword_413C60+48h
.text:00414028                 dd offset dword_413C60+56h
.text:0041402C                 dd offset dword_413C60+66h
.text:00414030                 dd offset dword_413C60+7Ah
.text:00414034                 dd offset dword_413C60+8Ch
.text:00414038                 dd offset dword_413C60+9Ah
.text:0041403C                 dd offset dword_413C60+0ACh
.text:00414040                 dd offset dword_413C60+0B4h
.text:00414044                 dd offset dword_413C60+0BCh
.text:00414048                 dd offset dword_413C60+0C4h
.text:0041404C                 dd offset dword_413C60+0CCh
.text:00414050                 dd offset dword_413C60+0D4h
.text:00414054                 dd offset dword_413C60+0DCh
.text:00414058                 dd offset dword_413C60+0E4h
.text:0041405C                 dd offset dword_413C60+0ECh
.text:00414060                 dd offset dword_413C60+0F4h
.text:00414064                 dd offset dword_413C60+0FCh
.text:00414068                 dd offset dword_413C60+104h
.text:0041406C                 dd offset dword_413C60+10Ch
.text:00414070                 dd offset dword_413C60+11Ch
.text:00414074                 dd offset dword_413C60+12Eh
.text:00414078                 dd offset off_413D98+2
.text:0041407C                 dd offset dword_413C60+0CCh
.text:00414080                 dd offset aJ_2          ; "J"
.text:00414084                 dd offset aJuly_0       ; "July"
.text:00414088                 dd offset aA            ; "A"
.text:0041408C                 dd offset aSeptember_0  ; "September"
.text:00414090                 dd offset aOctober_0    ; "October"
.text:00414094                 dd offset aNovember_0   ; "November"
.text:00414098                 dd offset aD_2          ; "D"
.text:0041409C                 dd offset aAm_0         ; "AM"
.text:004140A0                 dd offset aP_3          ; "P"
.text:004140A4                 dd offset aABEHMSY_0    ; "%a %b %e %H:%M:%S %Y"
.text:004140A8                 dd offset asc_413E5A    ; "%"
.text:004140AC                 dd offset aHMS_0        ; "%H:%M:%S"
.text:004140B0                 dd offset asc_413E7E    ; "%"
.text:004140B4                 dd offset unk_413E96
.text:004140B8                 dd offset unk_413E96
.text:004140BC                 dd offset unk_413E96
.text:004140C0                 dd offset unk_413E96
.text:004140C4                 dd offset unk_413E96
.text:004140C8                 dd offset asc_413E98    ; "\a"
.text:004140CC                 dd 130BC3Ah, 413E9Ah
.text:004140D4                 dd offset asc_413E98    ; "\a"
.text:004140D8                 dd offset unk_413E9C
.text:004140DC                 dd offset unk_413E9C
.text:004140E0                 dd offset dword_413C60
.text:004140E4                 dd offset aABEHMSZY     ; "%a %b %e %H:%M:%S %Z %Y"
.text:004140E8                 dd offset aABEHMSZY_0   ; "%a %b %e %H:%M:%S %Z %Y"
.text:004140EC                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:004140F0 aYy             db '^[yY]',0            ; DATA XREF: .text:00414134↓o
.text:004140F6 aNn             db '^[nN]',0            ; DATA XREF: .text:00414138↓o
.text:004140FC dword_4140FC    dd 90909000h, 4 dup(90909090h), 414590h, 5 dup(0)
.text:004140FC                                         ; DATA XREF: .text:0041413C↓o
.text:004140FC                                         ; .text:00414140↓o
.text:00414128                 dd 0FFFFFFFFh, 0
.text:00414130                 dd 5
.text:00414134                 dd offset aYy           ; "^[yY]"
.text:00414138                 dd offset aNn           ; "^[nN]"
.text:0041413C                 dd offset dword_4140FC
.text:00414140                 dd offset dword_4140FC
.text:00414144                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00414148                 db 9 dup(90h)
.text:00414151                 db 45h, 41h, 0
.text:00414154                 dd 5 dup(0)
.text:00414168                 dd 0FFFFFFFFh, 0
.text:00414170                 dd 3, 129h, 0D2h
.text:0041417C                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00414180                 db 10h dup(90h)
.text:00414190 aPTGTMTF        db '%p%t%g%t%m%t%f',0   ; DATA XREF: .text:004141D4↓o
.text:0041419F unk_41419F      db    0                 ; DATA XREF: .text:004141D8↓o
.text:0041419F                                         ; .text:004141DC↓o ...
.text:004141A0                 db 11h dup(90h)
.text:004141B1                 db 45h, 41h, 0
.text:004141B4                 dd 5 dup(0)
.text:004141C8                 dd 0FFFFFFFFh, 0
.text:004141D0                 dd 7
.text:004141D4                 dd offset aPTGTMTF      ; "%p%t%g%t%m%t%f"
.text:004141D8                 dd offset unk_41419F
.text:004141DC                 dd offset unk_41419F
.text:004141E0                 dd offset unk_41419F
.text:004141E4                 dd offset unk_41419F
.text:004141E8                 dd offset unk_41419F
.text:004141EC                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:004141F0 aANFNDNBNSHERNC db '%a%N%f%N%d%N%b%N%s %h %e %r%N%C-%z %T%N%c%N',0
.text:004141F0                                         ; DATA XREF: .text:00414254↓o
.text:0041421C dword_41421C    dd 90909000h, 4 dup(90909090h), 414590h, 5 dup(0)
.text:0041421C                                         ; DATA XREF: .text:00414258↓o
.text:0041421C                                         ; .text:0041425C↓o ...
.text:00414248                 dd 0FFFFFFFFh, 0
.text:00414250                 dd 0Dh
.text:00414254                 dd offset aANFNDNBNSHERNC ; "%a%N%f%N%d%N%b%N%s %h %e %r%N%C-%z %T%N"...
.text:00414258                 dd offset dword_41421C
.text:0041425C                 dd offset dword_41421C
.text:00414260                 dd offset dword_41421C
.text:00414264                 dd offset dword_41421C
.text:00414268                 dd offset dword_41421C
.text:0041426C                 dd offset dword_41421C
.text:00414270                 dd offset dword_41421C
.text:00414274                 dd offset dword_41421C
.text:00414278                 dd offset dword_41421C
.text:0041427C                 dd offset dword_41421C
.text:00414280                 dd offset dword_41421C
.text:00414284                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00414288                 align 10h
.text:00414290 aCAL            db '+%c %a %l',0        ; DATA XREF: .text:004142D4↓o
.text:0041429A unk_41429A      db    0                 ; DATA XREF: .text:004142D8↓o
.text:0041429A                                         ; .text:004142DC↓o ...
.text:0041429B                 db  90h
.text:0041429C                 db 15h dup(90h)
.text:004142B1                 db 45h, 41h, 0
.text:004142B4                 dd 5 dup(0)
.text:004142C8                 dd 0FFFFFFFFh, 0
.text:004142D0                 dd 5
.text:004142D4                 dd offset aCAL          ; "+%c %a %l"
.text:004142D8                 dd offset unk_41429A
.text:004142DC                 dd offset unk_41429A
.text:004142E0                 dd offset unk_41429A
.text:004142E4                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:004142E8                 align 10h
.text:004142F0                 dd 90900001h, 7 dup(90909090h), 414590h, 5 dup(0)
.text:00414328                 dd 0FFFFFFFFh, 0
.text:00414330                 dd 2, 4142F0h
.text:00414338                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:0041433C                 db 14h dup(90h)
.text:00414350 aIsoIec14652I18 db 'ISO/IEC 14652 i18n FDCC-set',0
.text:00414350                                         ; DATA XREF: .text:00414534↓o
.text:0041436C                 align 10h
.text:00414370 aIsoIecJtc1Sc22 db 'ISO/IEC JTC1/SC22/WG20 - internationalization',0
.text:00414370                                         ; DATA XREF: .text:00414538↓o
.text:0041439E                 db 12h dup(90h)
.text:004143B0 aCOKeldSimonsen db 'C/o Keld Simonsen, Skt. Jorgens Alle 8, DK-1615 Kobenhavn V',0
.text:004143B0                                         ; DATA XREF: .text:0041453C↓o
.text:004143EC aKeldSimonsen   db 'Keld Simonsen',0    ; DATA XREF: .text:00414540↓o
.text:004143FA aKeldDkuugDk    db 'keld@dkuug.dk',0    ; DATA XREF: .text:00414544↓o
.text:00414408 a4531226543     db '+45 3122-6543',0    ; DATA XREF: .text:00414548↓o
.text:00414416 a4533256543     db '+45 3325-6543',0    ; DATA XREF: .text:0041454C↓o
.text:00414424 dword_414424    dd 4F534900h, 302E3100h, 39393100h, 32312D37h, 30322Dh
.text:00414424                                         ; DATA XREF: .text:00414550↓o
.text:00414424                                         ; .text:00414558↓o ...
.text:00414424                 dd 6 dup(90909090h), 6E383169h, 3939313Ah, 31690039h, 313A6E38h
.text:00414424                 dd 393939h, 6E383169h, 3939313Ah, 31690039h, 313A6E38h
.text:00414424                 dd 393939h, 6E383169h, 3939313Ah, 31690039h, 313A6E38h
.text:00414424                 dd 393939h, 38316900h, 39313A6Eh, 69003939h, 3A6E3831h
.text:00414424                 dd 39393931h, 38316900h, 39313A6Eh, 69003939h, 3A6E3831h
.text:00414424                 dd 39393931h, 38316900h, 39313A6Eh, 69003939h, 3A6E3831h
.text:00414424                 dd 39393931h, 38316900h, 39313A6Eh, 69003939h, 3A6E3831h
.text:00414424                 dd 39393931h, 38316900h, 39313A6Eh, 69003939h, 3A6E3831h
.text:00414424                 dd 39393931h, 90909000h, 7 dup(90909090h), 414590h, 5 dup(0)
.text:00414528                 dd 0FFFFFFFFh, 0
.text:00414530                 dd 10h
.text:00414534                 dd offset aIsoIec14652I18 ; "ISO/IEC 14652 i18n FDCC-set"
.text:00414538                 dd offset aIsoIecJtc1Sc22 ; "ISO/IEC JTC1/SC22/WG20 - internationali"...
.text:0041453C                 dd offset aCOKeldSimonsen ; "C/o Keld Simonsen, Skt. Jorgens Alle 8,"...
.text:00414540                 dd offset aKeldSimonsen ; "Keld Simonsen"
.text:00414544                 dd offset aKeldDkuugDk  ; "keld@dkuug.dk"
.text:00414548                 dd offset a4531226543   ; "+45 3122-6543"
.text:0041454C                 dd offset a4533256543   ; "+45 3325-6543"
.text:00414550                 dd offset dword_414424
.text:00414554                 dd offset dword_414424+1
.text:00414558                 dd offset dword_414424
.text:0041455C                 dd offset dword_414424
.text:00414560                 dd offset dword_414424
.text:00414564                 dd offset dword_414424+5
.text:00414568                 dd offset dword_414424+9
.text:0041456C                 dd offset dword_414424+2Ch
.text:00414570                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00414574                 db 1Ch dup(90h)
.text:00414590                 dd 4F500043h, 584953h
.text:00414598 aAnsiX341968    db 'ANSI_X3.4-1968',0   ; DATA XREF: .text:0040B97C↑o
.text:00414598                                         ; .text:004138CC↑o ...
.text:004145A7                 align 10h
.text:004145B0 aFile           db 'file',0             ; DATA XREF: sub_4145E0:loc_41460C↓o
.text:004145B5 ; const char aSSxxxxxx[]
.text:004145B5 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_4145E0+9B↓o
.text:004145C5 ; const char aTemp[]
.text:004145C5 aTemp           db 'TEMP',0             ; DATA XREF: sub_4145E0:loc_4146C2↓o
.text:004145C5                                         ; sub_4145E0:loc_414702↓o ...
.text:004145CA ; const char aTmp[]
.text:004145CA aTmp            db '/tmp',0             ; DATA XREF: sub_4145E0+12F↓o
.text:004145CA                                         ; sub_4145E0+141↓o ...
.text:004145CF aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_4145E0:loc_414780↓o
.text:004145D6 aTmp_0          db 'TMP',0              ; DATA XREF: sub_4145E0:loc_414810↓o
.text:004145DA                 align 10h
.text:004145E0
.text:004145E0 ; =============== S U B R O U T I N E =======================================
.text:004145E0
.text:004145E0
.text:004145E0 ; int __cdecl sub_4145E0(char *Buffer, int, char *, char *, int)
.text:004145E0 sub_4145E0      proc near               ; CODE XREF: sub_40B350+3B↑p
.text:004145E0
.text:004145E0 Str             = dword ptr -1BCh
.text:004145E0 Format          = dword ptr -1B8h
.text:004145E0 var_1B4         = dword ptr -1B4h
.text:004145E0 var_1B0         = dword ptr -1B0h
.text:004145E0 var_1AC         = dword ptr -1ACh
.text:004145E0 var_1A8         = dword ptr -1A8h
.text:004145E0 var_19C         = dword ptr -19Ch
.text:004145E0 var_13C         = dword ptr -13Ch
.text:004145E0 var_DC          = dword ptr -0DCh
.text:004145E0 var_7C          = dword ptr -7Ch
.text:004145E0 Buffer          = dword ptr  4
.text:004145E0 arg_4           = dword ptr  8
.text:004145E0 arg_8           = dword ptr  0Ch
.text:004145E0 arg_C           = dword ptr  10h
.text:004145E0 arg_10          = dword ptr  14h
.text:004145E0
.text:004145E0                 push    ebp
.text:004145E1                 push    edi
.text:004145E2                 push    esi
.text:004145E3                 push    ebx
.text:004145E4                 sub     esp, 1ACh
.text:004145EA                 mov     eax, [esp+1BCh+arg_C]
.text:004145F1                 mov     esi, [esp+1BCh+arg_8]
.text:004145F8                 test    eax, eax
.text:004145FA                 jz      short loc_41460C
.text:004145FC                 mov     edx, [esp+1BCh+arg_C]
.text:00414603                 cmp     byte ptr [edx], 0
.text:00414606                 jnz     loc_414840
.text:0041460C
.text:0041460C loc_41460C:                             ; CODE XREF: sub_4145E0+1A↑j
.text:0041460C                 mov     eax, offset aFile ; "file"
.text:00414611                 mov     ebp, 4
.text:00414616                 mov     [esp+1BCh+arg_C], eax
.text:0041461D
.text:0041461D loc_41461D:                             ; CODE XREF: sub_4145E0+274↓j
.text:0041461D                                         ; sub_4145E0+27F↓j
.text:0041461D                 mov     ebx, [esp+1BCh+arg_10]
.text:00414624                 test    ebx, ebx
.text:00414626                 jnz     loc_414780
.text:0041462C
.text:0041462C loc_41462C:                             ; CODE XREF: sub_4145E0+21C↓j
.text:0041462C                                         ; sub_4145E0+224↓j ...
.text:0041462C                 test    esi, esi
.text:0041462E                 jz      loc_4146C2
.text:00414634
.text:00414634 loc_414634:                             ; CODE XREF: sub_4145E0+176↓j
.text:00414634                                         ; sub_4145E0+19A↓j
.text:00414634                 mov     [esp+1BCh+Str], esi ; Str
.text:00414637                 call    strlen
.text:0041463C                 test    eax, eax
.text:0041463E                 mov     edx, eax
.text:00414640                 jz      short loc_414650
.text:00414642                 movzx   eax, byte ptr [eax+esi-1]
.text:00414647                 cmp     al, 2Fh ; '/'
.text:00414649                 jz      short loc_4146B0
.text:0041464B                 cmp     al, 5Ch ; '\'
.text:0041464D                 jz      short loc_4146B0
.text:0041464F                 nop
.text:00414650
.text:00414650 loc_414650:                             ; CODE XREF: sub_4145E0+60↑j
.text:00414650                                         ; sub_4145E0+D1↓j ...
.text:00414650                 lea     edi, [ebp+edx+8]
.text:00414654                 cmp     [esp+1BCh+arg_4], edi
.text:0041465B                 jb      short loc_414698
.text:0041465D                 mov     [esp+1BCh+var_1AC], ebp
.text:00414661                 mov     ecx, [esp+1BCh+arg_C]
.text:00414668                 mov     ebp, [esp+1BCh+Buffer]
.text:0041466F                 mov     [esp+1BCh+var_1B0], esi
.text:00414673                 mov     [esp+1BCh+var_1A8], ecx
.text:00414677                 mov     [esp+1BCh+var_1B4], edx
.text:0041467B                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:00414683                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:00414686                 call    sprintf
.text:0041468B                 xor     eax, eax
.text:0041468D
.text:0041468D loc_41468D:                             ; CODE XREF: sub_4145E0+C8↓j
.text:0041468D                 add     esp, 1ACh
.text:00414693                 pop     ebx
.text:00414694                 pop     esi
.text:00414695                 pop     edi
.text:00414696                 pop     ebp
.text:00414697                 retn
.text:00414698 ; ---------------------------------------------------------------------------
.text:00414698
.text:00414698 loc_414698:                             ; CODE XREF: sub_4145E0+7B↑j
.text:00414698                 call    _errno
.text:0041469D                 mov     dword ptr [eax], 16h
.text:004146A3
.text:004146A3 loc_4146A3:                             ; CODE XREF: sub_4145E0+187↓j
.text:004146A3                 mov     eax, 0FFFFFFFFh
.text:004146A8                 jmp     short loc_41468D
.text:004146A8 ; ---------------------------------------------------------------------------
.text:004146AA                 align 10h
.text:004146B0
.text:004146B0 loc_4146B0:                             ; CODE XREF: sub_4145E0+69↑j
.text:004146B0                                         ; sub_4145E0+6D↑j ...
.text:004146B0                 dec     edx
.text:004146B1                 jz      short loc_414650
.text:004146B3                 movzx   eax, byte ptr [edx+esi-1]
.text:004146B8                 cmp     al, 2Fh ; '/'
.text:004146BA                 jz      short loc_4146B0
.text:004146BC                 cmp     al, 5Ch ; '\'
.text:004146BE                 jz      short loc_4146B0
.text:004146C0                 jmp     short loc_414650
.text:004146C2 ; ---------------------------------------------------------------------------
.text:004146C2
.text:004146C2 loc_4146C2:                             ; CODE XREF: sub_4145E0+4E↑j
.text:004146C2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:004146C9                 lea     esi, [esp+1BCh+var_13C]
.text:004146D0                 call    getenv
.text:004146D5                 mov     [esp+1BCh+Format], eax ; char *
.text:004146D9                 mov     [esp+1BCh+var_1B4], esi ; int
.text:004146DD                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:004146E4                 call    sub_4091A0
.text:004146E9                 test    eax, eax
.text:004146EB                 jnz     short loc_414702
.text:004146ED                 mov     edi, [esp+1BCh+var_13C]
.text:004146F4                 and     edi, 0F000h
.text:004146FA                 cmp     edi, 4000h
.text:00414700                 jz      short loc_41476C
.text:00414702
.text:00414702 loc_414702:                             ; CODE XREF: sub_4145E0+10B↑j
.text:00414702                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00414709                 call    getenv
.text:0041470E                 cld
.text:0041470F                 mov     edx, offset aTmp ; "/tmp"
.text:00414714                 mov     esi, eax
.text:00414716                 mov     ecx, 5
.text:0041471B                 mov     edi, edx
.text:0041471D                 repe cmpsb
.text:0041471F                 jz      short loc_41475C
.text:00414721                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:00414729                 lea     ecx, [esp+1BCh+var_19C]
.text:0041472D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00414731                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00414738                 call    sub_4091A0
.text:0041473D                 test    eax, eax
.text:0041473F                 jnz     short loc_41475C
.text:00414741                 mov     ebx, [esp+1BCh+var_19C]
.text:00414745                 mov     esi, offset aTmp ; "/tmp"
.text:0041474A                 and     ebx, 0F000h
.text:00414750                 cmp     ebx, 4000h
.text:00414756                 jz      loc_414634
.text:0041475C
.text:0041475C loc_41475C:                             ; CODE XREF: sub_4145E0+13F↑j
.text:0041475C                                         ; sub_4145E0+15F↑j
.text:0041475C                 call    _errno
.text:00414761                 mov     dword ptr [eax], 2
.text:00414767                 jmp     loc_4146A3
.text:0041476C ; ---------------------------------------------------------------------------
.text:0041476C
.text:0041476C loc_41476C:                             ; CODE XREF: sub_4145E0+120↑j
.text:0041476C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00414773                 call    getenv
.text:00414778                 mov     esi, eax
.text:0041477A                 jmp     loc_414634
.text:0041477A ; ---------------------------------------------------------------------------
.text:0041477F                 align 10h
.text:00414780
.text:00414780 loc_414780:                             ; CODE XREF: sub_4145E0+46↑j
.text:00414780                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:00414787                 call    sub_414E70
.text:0041478C                 test    eax, eax
.text:0041478E                 mov     ebx, eax
.text:00414790                 jz      short loc_414810
.text:00414792
.text:00414792 loc_414792:                             ; CODE XREF: sub_4145E0+240↓j
.text:00414792                                         ; sub_4145E0+256↓j
.text:00414792                 mov     [esp+1BCh+Format], ebx ; char *
.text:00414796                 lea     edi, [esp+1BCh+var_7C]
.text:0041479D                 mov     [esp+1BCh+var_1B4], edi ; int
.text:004147A1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:004147A8                 call    sub_4091A0
.text:004147AD                 test    eax, eax
.text:004147AF                 jnz     short loc_4147C6
.text:004147B1                 mov     edx, [esp+1BCh+var_7C]
.text:004147B8                 and     edx, 0F000h
.text:004147BE                 cmp     edx, 4000h
.text:004147C4                 jz      short loc_414809
.text:004147C6
.text:004147C6 loc_4147C6:                             ; CODE XREF: sub_4145E0+1CF↑j
.text:004147C6                                         ; sub_4145E0+25C↓j
.text:004147C6                 test    esi, esi
.text:004147C8                 jz      short loc_414802
.text:004147CA                 mov     [esp+1BCh+Format], esi ; char *
.text:004147CE                 lea     ecx, [esp+1BCh+var_DC]
.text:004147D5                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:004147D9                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:004147E0                 call    sub_4091A0
.text:004147E5                 test    eax, eax
.text:004147E7                 jnz     short loc_414802
.text:004147E9                 mov     ebx, [esp+1BCh+var_DC]
.text:004147F0                 and     ebx, 0F000h
.text:004147F6                 cmp     ebx, 4000h
.text:004147FC                 jz      loc_41462C
.text:00414802
.text:00414802 loc_414802:                             ; CODE XREF: sub_4145E0+1E8↑j
.text:00414802                                         ; sub_4145E0+207↑j
.text:00414802                 xor     esi, esi
.text:00414804                 jmp     loc_41462C
.text:00414809 ; ---------------------------------------------------------------------------
.text:00414809
.text:00414809 loc_414809:                             ; CODE XREF: sub_4145E0+1E4↑j
.text:00414809                 mov     esi, ebx
.text:0041480B                 jmp     loc_41462C
.text:00414810 ; ---------------------------------------------------------------------------
.text:00414810
.text:00414810 loc_414810:                             ; CODE XREF: sub_4145E0+1B0↑j
.text:00414810                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:00414817                 call    sub_414E70
.text:0041481C                 test    eax, eax
.text:0041481E                 mov     ebx, eax
.text:00414820                 jnz     loc_414792
.text:00414826                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0041482D                 call    sub_414E70
.text:00414832                 test    eax, eax
.text:00414834                 mov     ebx, eax
.text:00414836                 jnz     loc_414792
.text:0041483C                 jmp     short loc_4147C6
.text:0041483C ; ---------------------------------------------------------------------------
.text:0041483E                 align 10h
.text:00414840
.text:00414840 loc_414840:                             ; CODE XREF: sub_4145E0+26↑j
.text:00414840                 mov     ecx, [esp+1BCh+arg_C]
.text:00414847                 mov     [esp+1BCh+Str], ecx ; Str
.text:0041484A                 call    strlen
.text:0041484F                 cmp     eax, 5
.text:00414852                 mov     ebp, eax
.text:00414854                 jbe     loc_41461D
.text:0041485A                 mov     ebp, 5
.text:0041485F                 jmp     loc_41461D
.text:0041485F sub_4145E0      endp
.text:0041485F
.text:0041485F ; ---------------------------------------------------------------------------
.text:00414864                 align 10h
.text:00414870 byte_414870     db 61h                  ; DATA XREF: sub_414960+DC↓r
.text:00414870                                         ; sub_414960+122↓r ...
.text:00414871 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:004148AF aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_414960+39↓o
.text:004148B6                 db 1Ah dup(90h)
.text:004148D0 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:004148D0                                         ; DATA XREF: sub_414960:loc_414BD8↓o
.text:004148EF                 align 10h
.text:004148F0 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:004148F0                                         ; DATA XREF: sub_414960+405↓o
.text:0041491B                 db 15h dup(90h)
.text:00414930 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:00414930                                         ; DATA XREF: sub_414960+40D↓o
.text:00414953                 align 10h
.text:00414960
.text:00414960 ; =============== S U B R O U T I N E =======================================
.text:00414960
.text:00414960
.text:00414960 ; int __cdecl sub_414960(char *FileName, int)
.text:00414960 sub_414960      proc near               ; CODE XREF: sub_40B350+51↑p
.text:00414960
.text:00414960 Str             = dword ptr -9Ch
.text:00414960 OpenFlag        = dword ptr -98h
.text:00414960 var_94          = dword ptr -94h
.text:00414960 var_90          = dword ptr -90h
.text:00414960 var_8C          = dword ptr -8Ch
.text:00414960 var_88          = dword ptr -88h
.text:00414960 var_84          = dword ptr -84h
.text:00414960 var_80          = dword ptr -80h
.text:00414960 var_7C          = dword ptr -7Ch
.text:00414960 FileName        = dword ptr  4
.text:00414960 arg_4           = dword ptr  8
.text:00414960
.text:00414960                 push    ebp
.text:00414961                 push    edi
.text:00414962                 push    esi
.text:00414963                 push    ebx
.text:00414964                 sub     esp, 8Ch
.text:0041496A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:00414972                 call    _errno
.text:00414977                 mov     edx, [eax]
.text:00414979                 mov     [esp+9Ch+var_8C], edx
.text:0041497D                 mov     edx, [esp+9Ch+FileName]
.text:00414984                 mov     [esp+9Ch+Str], edx ; Str
.text:00414987                 call    strlen
.text:0041498C                 cmp     eax, 5
.text:0041498F                 jle     short loc_4149AD
.text:00414991                 cld
.text:00414992                 mov     ecx, [esp+9Ch+FileName]
.text:00414999                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0041499E                 lea     esi, [eax+ecx-6]
.text:004149A2                 mov     ecx, 7
.text:004149A7                 mov     ebp, esi
.text:004149A9                 repe cmpsb
.text:004149AB                 jz      short loc_4149C8
.text:004149AD
.text:004149AD loc_4149AD:                             ; CODE XREF: sub_414960+2F↑j
.text:004149AD                 call    _errno
.text:004149B2                 mov     dword ptr [eax], 16h
.text:004149B8
.text:004149B8 loc_4149B8:                             ; CODE XREF: sub_414960+295↓j
.text:004149B8                                         ; sub_414960+2D8↓j ...
.text:004149B8                 mov     eax, 0FFFFFFFFh
.text:004149BD
.text:004149BD loc_4149BD:                             ; CODE XREF: sub_414960+2EF↓j
.text:004149BD                                         ; sub_414960+332↓j
.text:004149BD                 add     esp, 8Ch
.text:004149C3                 pop     ebx
.text:004149C4                 pop     esi
.text:004149C5                 pop     edi
.text:004149C6                 pop     ebp
.text:004149C7                 retn
.text:004149C8 ; ---------------------------------------------------------------------------
.text:004149C8
.text:004149C8 loc_4149C8:                             ; CODE XREF: sub_414960+4B↑j
.text:004149C8                 mov     ecx, ds:dword_419554
.text:004149CE                 mov     edi, ds:dword_419550
.text:004149D4                 mov     eax, ecx
.text:004149D6                 or      eax, edi
.text:004149D8                 jz      loc_414D13
.text:004149DE
.text:004149DE loc_4149DE:                             ; CODE XREF: sub_414960+3F8↓j
.text:004149DE                 rdtsc
.text:004149E0                 mov     edi, edx
.text:004149E2                 mov     esi, eax
.text:004149E4                 call    _getpid
.text:004149E9                 mov     ebx, eax
.text:004149EB                 mov     edx, esi
.text:004149ED                 sar     ebx, 1Fh
.text:004149F0                 xor     edx, eax
.text:004149F2                 mov     ecx, edi
.text:004149F4                 xor     ecx, ebx
.text:004149F6                 mov     ebx, edx
.text:004149F8                 mov     esi, ecx
.text:004149FA                 add     ebx, ds:dword_419550
.text:00414A00                 adc     esi, ds:dword_419554
.text:00414A06                 xor     edi, edi
.text:00414A08                 mov     ds:dword_419550, ebx
.text:00414A0E                 mov     ds:dword_419554, esi
.text:00414A14                 lea     esi, [esi+0]
.text:00414A1A                 lea     edi, [edi+0]
.text:00414A20
.text:00414A20 loc_414A20:                             ; CODE XREF: sub_414960+2C7↓j
.text:00414A20                 mov     [esp+9Ch+Str], ebx
.text:00414A23                 mov     [esp+9Ch+OpenFlag], esi
.text:00414A27                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00414A2F                 mov     [esp+9Ch+var_90], 0
.text:00414A37                 call    sub_416750
.text:00414A3C                 movzx   ecx, ds:byte_414870[eax]
.text:00414A43                 mov     [ebp+0], cl
.text:00414A46                 mov     [esp+9Ch+Str], ebx
.text:00414A49                 mov     [esp+9Ch+OpenFlag], esi
.text:00414A4D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00414A55                 mov     [esp+9Ch+var_90], 0
.text:00414A5D                 call    sub_416600
.text:00414A62                 mov     [esp+9Ch+Str], eax
.text:00414A65                 mov     ebx, eax
.text:00414A67                 mov     esi, edx
.text:00414A69                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00414A71                 mov     [esp+9Ch+var_90], 0
.text:00414A79                 mov     [esp+9Ch+OpenFlag], edx
.text:00414A7D                 call    sub_416750
.text:00414A82                 movzx   edx, ds:byte_414870[eax]
.text:00414A89                 mov     [ebp+1], dl
.text:00414A8C                 mov     [esp+9Ch+Str], ebx
.text:00414A8F                 mov     [esp+9Ch+OpenFlag], esi
.text:00414A93                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00414A9B                 mov     [esp+9Ch+var_90], 0
.text:00414AA3                 call    sub_416600
.text:00414AA8                 mov     [esp+9Ch+Str], eax
.text:00414AAB                 mov     ebx, eax
.text:00414AAD                 mov     esi, edx
.text:00414AAF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00414AB7                 mov     [esp+9Ch+var_90], 0
.text:00414ABF                 mov     [esp+9Ch+OpenFlag], edx
.text:00414AC3                 call    sub_416750
.text:00414AC8                 movzx   ecx, ds:byte_414870[eax]
.text:00414ACF                 mov     [ebp+2], cl
.text:00414AD2                 mov     [esp+9Ch+Str], ebx
.text:00414AD5                 mov     [esp+9Ch+OpenFlag], esi
.text:00414AD9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00414AE1                 mov     [esp+9Ch+var_90], 0
.text:00414AE9                 call    sub_416600
.text:00414AEE                 mov     [esp+9Ch+Str], eax
.text:00414AF1                 mov     ebx, eax
.text:00414AF3                 mov     esi, edx
.text:00414AF5                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00414AFD                 mov     [esp+9Ch+var_90], 0
.text:00414B05                 mov     [esp+9Ch+OpenFlag], edx
.text:00414B09                 call    sub_416750
.text:00414B0E                 movzx   edx, ds:byte_414870[eax]
.text:00414B15                 mov     [ebp+3], dl
.text:00414B18                 mov     [esp+9Ch+Str], ebx
.text:00414B1B                 mov     [esp+9Ch+OpenFlag], esi
.text:00414B1F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00414B27                 mov     [esp+9Ch+var_90], 0
.text:00414B2F                 call    sub_416600
.text:00414B34                 mov     [esp+9Ch+Str], eax
.text:00414B37                 mov     ebx, eax
.text:00414B39                 mov     esi, edx
.text:00414B3B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00414B43                 mov     [esp+9Ch+var_90], 0
.text:00414B4B                 mov     [esp+9Ch+OpenFlag], edx
.text:00414B4F                 call    sub_416750
.text:00414B54                 movzx   ecx, ds:byte_414870[eax]
.text:00414B5B                 mov     [ebp+4], cl
.text:00414B5E                 mov     [esp+9Ch+Str], ebx
.text:00414B61                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00414B69                 mov     [esp+9Ch+var_90], 0
.text:00414B71                 mov     [esp+9Ch+OpenFlag], esi
.text:00414B75                 call    sub_416600
.text:00414B7A                 mov     [esp+9Ch+Str], eax
.text:00414B7D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00414B85                 mov     [esp+9Ch+var_90], 0
.text:00414B8D                 mov     [esp+9Ch+OpenFlag], edx
.text:00414B91                 call    sub_416750
.text:00414B96                 movzx   ebx, ds:byte_414870[eax]
.text:00414B9D                 mov     [ebp+5], bl
.text:00414BA0                 cmp     [esp+9Ch+arg_4], 1
.text:00414BA8                 jz      loc_414CF7
.text:00414BAE                 cmp     [esp+9Ch+arg_4], 1
.text:00414BB6                 jle     loc_414CC0
.text:00414BBC                 cmp     [esp+9Ch+arg_4], 2
.text:00414BC4                 jz      loc_414C97
.text:00414BCA                 cmp     [esp+9Ch+arg_4], 3
.text:00414BD2                 jz      loc_414C54
.text:00414BD8
.text:00414BD8 loc_414BD8:                             ; CODE XREF: sub_414960+369↓j
.text:00414BD8                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:00414BDD                 test    ebx, ebx
.text:00414BDF                 jnz     loc_414D5D
.text:00414BE5
.text:00414BE5 loc_414BE5:                             ; CODE XREF: sub_414960+354↓j
.text:00414BE5                 mov     eax, [esp+9Ch+var_88]
.text:00414BE9                 test    eax, eax
.text:00414BEB                 jns     short loc_414C40
.text:00414BED                 call    _errno
.text:00414BF2                 cmp     dword ptr [eax], 11h
.text:00414BF5                 jnz     loc_4149B8
.text:00414BFB
.text:00414BFB loc_414BFB:                             ; CODE XREF: sub_414960+315↓j
.text:00414BFB                 mov     edx, ds:dword_419550
.text:00414C01                 mov     ecx, ds:dword_419554
.text:00414C07                 add     edx, 1E61h
.text:00414C0D                 adc     ecx, 0
.text:00414C10                 mov     ebx, edx
.text:00414C12                 inc     edi
.text:00414C13                 mov     ds:dword_419550, edx
.text:00414C19                 cmp     edi, 3A2F8h
.text:00414C1F                 mov     esi, ecx
.text:00414C21                 mov     ds:dword_419554, ecx
.text:00414C27                 jb      loc_414A20
.text:00414C2D                 call    _errno
.text:00414C32                 mov     dword ptr [eax], 11h
.text:00414C38                 jmp     loc_4149B8
.text:00414C38 ; ---------------------------------------------------------------------------
.text:00414C3D                 align 10h
.text:00414C40
.text:00414C40 loc_414C40:                             ; CODE XREF: sub_414960+28B↑j
.text:00414C40                 call    _errno
.text:00414C45                 mov     esi, [esp+9Ch+var_8C]
.text:00414C49                 mov     [eax], esi
.text:00414C4B                 mov     eax, [esp+9Ch+var_88]
.text:00414C4F                 jmp     loc_4149BD
.text:00414C54 ; ---------------------------------------------------------------------------
.text:00414C54
.text:00414C54 loc_414C54:                             ; CODE XREF: sub_414960+272↑j
.text:00414C54                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:00414C5B                 mov     ecx, [esp+9Ch+FileName]
.text:00414C62                 lea     esi, [esp+9Ch+var_7C]
.text:00414C66                 mov     [esp+9Ch+var_94], esi ; int
.text:00414C6A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:00414C6E                 call    sub_40B1F0
.text:00414C73                 test    eax, eax
.text:00414C75                 jns     short loc_414BFB
.text:00414C77                 call    _errno
.text:00414C7C                 cmp     dword ptr [eax], 2
.text:00414C7F                 jnz     loc_4149B8
.text:00414C85                 call    _errno
.text:00414C8A                 mov     ebx, [esp+9Ch+var_8C]
.text:00414C8E                 mov     [eax], ebx
.text:00414C90                 xor     eax, eax
.text:00414C92                 jmp     loc_4149BD
.text:00414C97 ; ---------------------------------------------------------------------------
.text:00414C97
.text:00414C97 loc_414C97:                             ; CODE XREF: sub_414960+264↑j
.text:00414C97                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:00414C9F                 mov     edx, [esp+9Ch+FileName]
.text:00414CA6                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:00414CA9                 call    sub_414D90
.text:00414CAE                 mov     esi, esi
.text:00414CB0
.text:00414CB0 loc_414CB0:                             ; CODE XREF: sub_414960+395↓j
.text:00414CB0                 mov     [esp+9Ch+var_88], eax
.text:00414CB4                 jmp     loc_414BE5
.text:00414CB4 ; ---------------------------------------------------------------------------
.text:00414CB9                 align 10h
.text:00414CC0
.text:00414CC0 loc_414CC0:                             ; CODE XREF: sub_414960+256↑j
.text:00414CC0                 mov     eax, [esp+9Ch+arg_4]
.text:00414CC7                 test    eax, eax
.text:00414CC9                 jnz     loc_414BD8
.text:00414CCF                 mov     [esp+9Ch+var_94], 180h
.text:00414CD7                 mov     esi, [esp+9Ch+FileName]
.text:00414CDE                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:00414CE6                 mov     [esp+9Ch+Str], esi ; FileName
.text:00414CE9                 lea     esi, [esi+0]
.text:00414CF0
.text:00414CF0 loc_414CF0:                             ; CODE XREF: sub_414960+3B1↓j
.text:00414CF0                 call    _open_0
.text:00414CF5                 jmp     short loc_414CB0
.text:00414CF7 ; ---------------------------------------------------------------------------
.text:00414CF7
.text:00414CF7 loc_414CF7:                             ; CODE XREF: sub_414960+248↑j
.text:00414CF7                 mov     [esp+9Ch+var_94], 180h
.text:00414CFF                 mov     ebx, [esp+9Ch+FileName]
.text:00414D06                 mov     [esp+9Ch+OpenFlag], 8502h
.text:00414D0E                 mov     [esp+9Ch+Str], ebx
.text:00414D11                 jmp     short loc_414CF0
.text:00414D13 ; ---------------------------------------------------------------------------
.text:00414D13
.text:00414D13 loc_414D13:                             ; CODE XREF: sub_414960+78↑j
.text:00414D13                 mov     [esp+9Ch+OpenFlag], 0
.text:00414D1B                 lea     ebx, [esp+9Ch+var_84]
.text:00414D1F                 mov     [esp+9Ch+Str], ebx
.text:00414D22                 call    sub_414E10
.text:00414D27                 mov     edi, [esp+9Ch+var_80]
.text:00414D2B                 mov     edx, [esp+9Ch+var_84]
.text:00414D2F                 mov     ecx, edi
.text:00414D31                 mov     ebx, edi
.text:00414D33                 shl     ecx, 10h
.text:00414D36                 sar     ebx, 1Fh
.text:00414D39                 shld    ebx, edi, 10h
.text:00414D3D                 mov     esi, edx
.text:00414D3F                 mov     edi, edx
.text:00414D41                 mov     edx, ecx
.text:00414D43                 sar     edi, 1Fh
.text:00414D46                 xor     edx, esi
.text:00414D48                 mov     ds:dword_419550, edx
.text:00414D4E                 mov     esi, ebx
.text:00414D50                 xor     esi, edi
.text:00414D52                 mov     ds:dword_419554, esi
.text:00414D58                 jmp     loc_4149DE
.text:00414D5D ; ---------------------------------------------------------------------------
.text:00414D5D
.text:00414D5D loc_414D5D:                             ; CODE XREF: sub_414960+27F↑j
.text:00414D5D                 mov     [esp+9Ch+var_94], 151h
.text:00414D65                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:00414D6D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:00414D74                 call    _assert
.text:00414D74 sub_414960      endp
.text:00414D74
.text:00414D74 ; ---------------------------------------------------------------------------
.text:00414D79                 db 17h dup(90h)
.text:00414D90
.text:00414D90 ; =============== S U B R O U T I N E =======================================
.text:00414D90
.text:00414D90
.text:00414D90 ; int __cdecl sub_414D90(LPCSTR, int AccessMode)
.text:00414D90 sub_414D90      proc near               ; CODE XREF: sub_414960+349↑p
.text:00414D90
.text:00414D90 lpPathName      = dword ptr -1Ch
.text:00414D90 lpSecurityAttributes= dword ptr -18h
.text:00414D90 var_8           = dword ptr -8
.text:00414D90 var_4           = dword ptr -4
.text:00414D90 arg_0           = dword ptr  4
.text:00414D90 AccessMode      = dword ptr  8
.text:00414D90
.text:00414D90                 sub     esp, 1Ch
.text:00414D93                 mov     [esp+1Ch+var_8], ebx
.text:00414D97                 mov     ebx, [esp+1Ch+arg_0]
.text:00414D9B                 mov     [esp+1Ch+var_4], esi
.text:00414D9F                 mov     esi, [esp+1Ch+AccessMode]
.text:00414DA3                 test    ebx, ebx
.text:00414DA5                 jz      short loc_414DF5
.text:00414DA7                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00414DAF                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:00414DB2                 call    CreateDirectoryA
.text:00414DB7                 sub     esp, 8
.text:00414DBA                 test    eax, eax
.text:00414DBC                 jz      short loc_414DD6
.text:00414DBE                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:00414DC2                 mov     esi, [esp+1Ch+var_4]
.text:00414DC6                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:00414DCA                 mov     ebx, [esp+1Ch+var_8]
.text:00414DCE                 add     esp, 1Ch
.text:00414DD1                 jmp     _chmod
.text:00414DD6 ; ---------------------------------------------------------------------------
.text:00414DD6
.text:00414DD6 loc_414DD6:                             ; CODE XREF: sub_414D90+2C↑j
.text:00414DD6                 call    sub_4094F0
.text:00414DDB                 mov     esi, eax
.text:00414DDD                 call    _errno
.text:00414DE2                 mov     [eax], esi
.text:00414DE4
.text:00414DE4 loc_414DE4:                             ; CODE XREF: sub_414D90+70↓j
.text:00414DE4                 mov     ebx, [esp+1Ch+var_8]
.text:00414DE8                 mov     eax, 0FFFFFFFFh
.text:00414DED                 mov     esi, [esp+1Ch+var_4]
.text:00414DF1                 add     esp, 1Ch
.text:00414DF4                 retn
.text:00414DF5 ; ---------------------------------------------------------------------------
.text:00414DF5
.text:00414DF5 loc_414DF5:                             ; CODE XREF: sub_414D90+15↑j
.text:00414DF5                 call    _errno
.text:00414DFA                 mov     dword ptr [eax], 16h
.text:00414E00                 jmp     short loc_414DE4
.text:00414E00 sub_414D90      endp
.text:00414E00
.text:00414E00 ; ---------------------------------------------------------------------------
.text:00414E02                 align 10h
.text:00414E10
.text:00414E10 ; =============== S U B R O U T I N E =======================================
.text:00414E10
.text:00414E10
.text:00414E10 sub_414E10      proc near               ; CODE XREF: sub_414960+3C2↑p
.text:00414E10
.text:00414E10 var_1C          = dword ptr -1Ch
.text:00414E10 var_18          = dword ptr -18h
.text:00414E10 var_C           = dword ptr -0Ch
.text:00414E10 var_8           = dword ptr -8
.text:00414E10 var_4           = dword ptr -4
.text:00414E10 arg_0           = dword ptr  4
.text:00414E10 arg_4           = dword ptr  8
.text:00414E10
.text:00414E10                 sub     esp, 1Ch
.text:00414E13                 mov     edx, [esp+1Ch+arg_4]
.text:00414E17                 mov     [esp+1Ch+var_4], ebx
.text:00414E1B                 mov     ebx, [esp+1Ch+arg_0]
.text:00414E1F                 mov     [esp+1Ch+var_18], edx
.text:00414E23                 lea     edx, [esp+1Ch+var_C]
.text:00414E27                 mov     [esp+1Ch+var_1C], edx
.text:00414E2A                 call    sub_414E90
.text:00414E2F                 test    eax, eax
.text:00414E31                 mov     edx, 0FFFFFFFFh
.text:00414E36                 jnz     short loc_414E5A
.text:00414E38                 mov     ecx, [esp+1Ch+var_C]
.text:00414E3C                 mov     edx, 10624DD3h
.text:00414E41                 mov     [ebx], ecx
.text:00414E43                 mov     ecx, [esp+1Ch+var_8]
.text:00414E47                 mov     eax, ecx
.text:00414E49                 imul    edx
.text:00414E4B                 mov     eax, ecx
.text:00414E4D                 sar     eax, 1Fh
.text:00414E50                 sar     edx, 6
.text:00414E53                 sub     edx, eax
.text:00414E55                 mov     [ebx+4], edx
.text:00414E58                 xor     edx, edx
.text:00414E5A
.text:00414E5A loc_414E5A:                             ; CODE XREF: sub_414E10+26↑j
.text:00414E5A                 mov     ebx, [esp+1Ch+var_4]
.text:00414E5E                 mov     eax, edx
.text:00414E60                 add     esp, 1Ch
.text:00414E63                 retn
.text:00414E63 sub_414E10      endp
.text:00414E63
.text:00414E63 ; ---------------------------------------------------------------------------
.text:00414E64                 align 10h
.text:00414E70
.text:00414E70 ; =============== S U B R O U T I N E =======================================
.text:00414E70
.text:00414E70
.text:00414E70 sub_414E70      proc near               ; CODE XREF: sub_4145E0+1A7↑p
.text:00414E70                                         ; sub_4145E0+237↑p ...
.text:00414E70                 mov     edx, ds:dword_419560
.text:00414E76                 test    edx, edx
.text:00414E78                 jnz     short loc_414E80
.text:00414E7A                 jmp     getenv
.text:00414E7A ; ---------------------------------------------------------------------------
.text:00414E7F                 align 10h
.text:00414E80
.text:00414E80 loc_414E80:                             ; CODE XREF: sub_414E70+8↑j
.text:00414E80                 xor     eax, eax
.text:00414E82                 retn
.text:00414E82 sub_414E70      endp
.text:00414E82
.text:00414E82 ; ---------------------------------------------------------------------------
.text:00414E83                 align 10h
.text:00414E90
.text:00414E90 ; =============== S U B R O U T I N E =======================================
.text:00414E90
.text:00414E90
.text:00414E90 sub_414E90      proc near               ; CODE XREF: sub_414E10+1A↑p
.text:00414E90
.text:00414E90 lpTimeZoneInformation= dword ptr -0DCh
.text:00414E90 var_D8          = dword ptr -0D8h
.text:00414E90 var_D4          = dword ptr -0D4h
.text:00414E90 var_D0          = dword ptr -0D0h
.text:00414E90 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:00414E90 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:00414E90 arg_0           = dword ptr  4
.text:00414E90 arg_4           = dword ptr  8
.text:00414E90
.text:00414E90                 push    edi
.text:00414E91                 push    esi
.text:00414E92                 push    ebx
.text:00414E93                 sub     esp, 0D0h
.text:00414E99                 mov     ebx, [esp+0DCh+arg_4]
.text:00414EA0                 mov     edi, [esp+0DCh+arg_0]
.text:00414EA7                 test    ebx, ebx
.text:00414EA9                 jz      short loc_414ED4
.text:00414EAB                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:00414EAF                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:00414EB2                 call    GetTimeZoneInformation
.text:00414EB7                 sub     esp, 4
.text:00414EBA                 cmp     eax, 0FFFFFFFFh
.text:00414EBD                 jz      loc_414F55
.text:00414EC3                 xor     ecx, ecx
.text:00414EC5                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:00414EC9                 cmp     eax, 2
.text:00414ECC                 setz    cl
.text:00414ECF                 mov     [ebx], esi
.text:00414ED1                 mov     [ebx+4], ecx
.text:00414ED4
.text:00414ED4 loc_414ED4:                             ; CODE XREF: sub_414E90+19↑j
.text:00414ED4                                         ; sub_414E90+E0↓j
.text:00414ED4                 test    edi, edi
.text:00414ED6                 jz      short loc_414F49
.text:00414ED8                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:00414EDC                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:00414EDF                 call    GetSystemTimeAsFileTime
.text:00414EE4                 sub     esp, 4
.text:00414EE7                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:00414EEB                 mov     [esp+0DCh+var_D4], 989680h
.text:00414EF3                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:00414EF7                 mov     [esp+0DCh+var_D0], 0
.text:00414EFF                 add     ebx, 2AC18000h
.text:00414F05                 adc     esi, 0FE624E21h
.text:00414F0B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:00414F0F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00414F12                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:00414F16                 mov     [esp+0DCh+var_D8], esi
.text:00414F1A                 call    sub_416600
.text:00414F1F                 mov     [edi], eax
.text:00414F21                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00414F24                 mov     [esp+0DCh+var_D4], 989680h
.text:00414F2C                 mov     [esp+0DCh+var_D0], 0
.text:00414F34                 mov     [esp+0DCh+var_D8], esi
.text:00414F38                 call    sub_416750
.text:00414F3D                 lea     ebx, [eax+eax*4]
.text:00414F40                 lea     edx, [ebx+ebx*4]
.text:00414F43                 shl     edx, 2
.text:00414F46                 mov     [edi+4], edx
.text:00414F49
.text:00414F49 loc_414F49:                             ; CODE XREF: sub_414E90+46↑j
.text:00414F49                 add     esp, 0D0h
.text:00414F4F                 xor     eax, eax
.text:00414F51                 pop     ebx
.text:00414F52                 pop     esi
.text:00414F53                 pop     edi
.text:00414F54                 retn
.text:00414F55 ; ---------------------------------------------------------------------------
.text:00414F55
.text:00414F55 loc_414F55:                             ; CODE XREF: sub_414E90+2D↑j
.text:00414F55                 mov     dword ptr [ebx], 0
.text:00414F5B                 mov     dword ptr [ebx+4], 0
.text:00414F62                 call    sub_4094F0
.text:00414F67                 mov     esi, eax
.text:00414F69                 call    _errno
.text:00414F6E                 mov     [eax], esi
.text:00414F70                 jmp     loc_414ED4
.text:00414F70 sub_414E90      endp
.text:00414F70
.text:00414F70 ; ---------------------------------------------------------------------------
.text:00414F75                 align 10h
.text:00414F80                 sub     esp, 0Ch
.text:00414F83                 mov     [esp+4], ebx
.text:00414F87                 mov     [esp+8], esi
.text:00414F8B                 xor     esi, esi
.text:00414F8D                 call    sub_415000
.text:00414F92                 mov     ebx, eax
.text:00414F94                 call    sub_414FF0
.text:00414F99                 cmp     ebx, eax
.text:00414F9B                 jz      short loc_414FB4
.text:00414F9D
.text:00414F9D loc_414F9D:                             ; CODE XREF: .text:00414FC2↓j
.text:00414F9D                 mov     esi, 1
.text:00414FA2
.text:00414FA2 loc_414FA2:                             ; CODE XREF: .text:00414FC4↓j
.text:00414FA2                 mov     ds:dword_419560, esi
.text:00414FA8                 mov     ebx, [esp+4]
.text:00414FAC                 mov     esi, [esp+8]
.text:00414FB0                 add     esp, 0Ch
.text:00414FB3                 retn
.text:00414FB4 ; ---------------------------------------------------------------------------
.text:00414FB4
.text:00414FB4 loc_414FB4:                             ; CODE XREF: .text:00414F9B↑j
.text:00414FB4                 call    sub_414FE0
.text:00414FB9                 mov     ebx, eax
.text:00414FBB                 call    sub_414FD0
.text:00414FC0                 cmp     ebx, eax
.text:00414FC2                 jnz     short loc_414F9D
.text:00414FC4                 jmp     short loc_414FA2
.text:00414FC4 ; ---------------------------------------------------------------------------
.text:00414FC6                 align 10h
.text:00414FD0
.text:00414FD0 ; =============== S U B R O U T I N E =======================================
.text:00414FD0
.text:00414FD0
.text:00414FD0 sub_414FD0      proc near               ; CODE XREF: .text:00414FBB↑p
.text:00414FD0                 xor     eax, eax
.text:00414FD2                 retn
.text:00414FD2 sub_414FD0      endp
.text:00414FD2
.text:00414FD2 ; ---------------------------------------------------------------------------
.text:00414FD3                 align 10h
.text:00414FE0
.text:00414FE0 ; =============== S U B R O U T I N E =======================================
.text:00414FE0
.text:00414FE0
.text:00414FE0 sub_414FE0      proc near               ; CODE XREF: .text:loc_414FB4↑p
.text:00414FE0                 xor     eax, eax
.text:00414FE2                 retn
.text:00414FE2 sub_414FE0      endp
.text:00414FE2
.text:00414FE2 ; ---------------------------------------------------------------------------
.text:00414FE3                 align 10h
.text:00414FF0
.text:00414FF0 ; =============== S U B R O U T I N E =======================================
.text:00414FF0
.text:00414FF0
.text:00414FF0 sub_414FF0      proc near               ; CODE XREF: .text:00414F94↑p
.text:00414FF0                 xor     eax, eax
.text:00414FF2                 retn
.text:00414FF2 sub_414FF0      endp
.text:00414FF2
.text:00414FF2 ; ---------------------------------------------------------------------------
.text:00414FF3                 align 10h
.text:00415000
.text:00415000 ; =============== S U B R O U T I N E =======================================
.text:00415000
.text:00415000
.text:00415000 sub_415000      proc near               ; CODE XREF: .text:00414F8D↑p
.text:00415000                 xor     eax, eax
.text:00415002                 retn
.text:00415002 sub_415000      endp
.text:00415002
.text:00415002 ; ---------------------------------------------------------------------------
.text:00415003                 align 10h
.text:00415010
.text:00415010 ; =============== S U B R O U T I N E =======================================
.text:00415010
.text:00415010 ; Attributes: thunk
.text:00415010
.text:00415010 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:00415010 OleInitialize   proc near               ; CODE XREF: sub_40AF90+1A↑p
.text:00415010
.text:00415010 pvReserved      = dword ptr  4
.text:00415010
.text:00415010                 jmp     ds:__imp_OleInitialize
.text:00415010 OleInitialize   endp
.text:00415010
.text:00415010 ; ---------------------------------------------------------------------------
.text:00415016                 align 10h
.text:00415020
.text:00415020 ; =============== S U B R O U T I N E =======================================
.text:00415020
.text:00415020 ; Attributes: thunk
.text:00415020
.text:00415020 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:00415020 CoCreateInstance proc near              ; CODE XREF: sub_40AF90+52↑p
.text:00415020
.text:00415020 rclsid          = dword ptr  4
.text:00415020 pUnkOuter       = dword ptr  8
.text:00415020 dwClsContext    = dword ptr  0Ch
.text:00415020 riid            = dword ptr  10h
.text:00415020 ppv             = dword ptr  14h
.text:00415020
.text:00415020                 jmp     ds:__imp_CoCreateInstance
.text:00415020 CoCreateInstance endp
.text:00415020
.text:00415020 ; ---------------------------------------------------------------------------
.text:00415026                 align 10h
.text:00415030
.text:00415030 ; =============== S U B R O U T I N E =======================================
.text:00415030
.text:00415030 ; Attributes: thunk
.text:00415030
.text:00415030 ; void __stdcall CoUninitialize()
.text:00415030 CoUninitialize  proc near               ; CODE XREF: sub_40AF90+14E↑p
.text:00415030                                         ; sub_40AF90+16D↑p
.text:00415030                 jmp     ds:__imp_CoUninitialize
.text:00415030 CoUninitialize  endp
.text:00415030
.text:00415030 ; ---------------------------------------------------------------------------
.text:00415036                 align 10h
.text:00415040                 add     al, 0BAh ; 'º'
.text:00415042                 retf
.text:00415042 ; ---------------------------------------------------------------------------
.text:00415043                 db 7Eh
.text:00415044                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:00415044                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:00415044                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:00415044                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:00415044                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:00415044                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:00415044                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:00415044                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:00415044                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:00415044                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:00415044                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:00415044                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:00415044                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:00415044                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:00415044                 dd 0C4426C00h, 330h, 0
.text:00415178                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00415178                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:00415178                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:00415178                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:004151C8                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004151C8                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:004151C8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:004151C8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:004151C8                 dd 0BA94B00h, 1Bh, 0
.text:00415228                 dd 0C0h, 46000000h, 1Ch, 0
.text:00415238                 dd 0C0h, 46000000h, 331h, 0
.text:00415248                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00415248                 dd 312h, 0
.text:00415268                 dd 0C0h, 46000000h, 30Eh, 0
.text:00415278                 dd 0C0h, 46000000h, 30Dh, 0
.text:00415288                 dd 0C0h, 46000000h, 311h, 0
.text:00415298                 dd 0C0h, 46000000h, 313h, 0
.text:004152A8                 dd 0C0h, 46000000h, 30Ch, 0
.text:004152B8                 dd 0C0h, 46000000h, 30Fh, 0
.text:004152C8                 dd 0C0h, 46000000h, 310h, 0
.text:004152D8                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004152D8                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:00415308                 dd 0C0h, 46000000h, 319h, 0
.text:00415318                 dd 0C0h, 46000000h, 315h, 0
.text:00415328                 dd 0C0h, 46000000h, 316h, 0
.text:00415338                 dd 0C0h, 46000000h, 315h, 0
.text:00415348                 dd 0C0h, 46000000h, 2E005h, 0
.text:00415358                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00415358                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:00415358                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:00415398                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00415398                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:00415398                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:00415398                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:00415398                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:00415398                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:00415398                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:00415398                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:00415398                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:00415398                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:00415398                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:00415398                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00415398                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:00415398                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:00415398                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:00415398                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00415398                 dd 2DE81h, 0
.text:004154E8                 dd 0C0h, 46000000h, 4 dup(0)
.text:00415500                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:00415500                 dd 0
.text:00415518                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00415518                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:00415518                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:00415518                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:00415518                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00415518                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:00415518                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:00415518                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:00415518                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:00415518                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:00415518                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:00415518                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:00415518                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:00415518                 dd 10Fh, 0
.text:00415628                 dd 0C0h, 46000000h, 125h, 0
.text:00415638                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00415638                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:00415638                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:00415678                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:00415678                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00415678                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:00415678                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:00415678                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:004156D8                 dd 0C0h, 46000000h, 2E012h, 0
.text:004156E8                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:004156E8                 dd 140h, 0
.text:00415708                 dd 0C0h, 46000000h, 1, 0
.text:00415718                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:00415718                 dd 71D3400h, 13Dh, 0
.text:00415738                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00415738                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:00415738                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:00415738                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:00415788                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:00415788                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00415788                 dd 20405h, 0
.text:004157B8                 dd 0C0h, 46000000h, 2040Eh, 0
.text:004157C8                 dd 0C0h, 46000000h, 20406h, 0
.text:004157D8                 dd 0C0h, 46000000h, 2040Fh, 0
.text:004157E8                 dd 0C0h, 46000000h, 110h, 0
.text:004157F8                 dd 0C0h, 46000000h, 10Eh, 0
.text:00415808                 dd 0C0h, 46000000h, 123h, 0
.text:00415818                 dd 0C0h, 46000000h, 124h, 0
.text:00415828                 dd 0C0h, 46000000h, 13h, 0
.text:00415838                 dd 0C0h, 46000000h, 14h, 0
.text:00415848                 dd 0C0h, 46000000h, 15h, 0
.text:00415858                 dd 0C0h, 46000000h, 20400h, 0
.text:00415868                 dd 0C0h, 46000000h, 121h, 0
.text:00415878                 dd 0C0h, 46000000h, 122h, 0
.text:00415888                 dd 0C0h, 46000000h, 2E011h, 0
.text:00415898                 dd 0C0h, 46000000h, 108h, 0
.text:004158A8                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:004158A8                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:004158A8                 dd 103h, 0
.text:004158D8                 dd 0C0h, 46000000h, 2E000h, 0
.text:004158E8                 dd 0C0h, 46000000h, 106h, 0
.text:004158F8                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004158F8                 dd 107h, 0
.text:00415918                 dd 0C0h, 46000000h, 102h, 0
.text:00415928                 dd 0C0h, 46000000h, 104h, 0
.text:00415938                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:00415938                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:00415938                 dd 105h, 0
.text:00415968                 dd 0C0h, 46000000h, 13Bh, 0
.text:00415978                 dd 0C0h, 46000000h, 139h, 0
.text:00415988                 dd 0C0h, 46000000h, 0Dh, 0
.text:00415998                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00415998                 dd 101h, 0
.text:004159B8                 dd 0C0h, 46000000h, 100h, 0
.text:004159C8                 dd 0C0h, 46000000h, 20404h, 0
.text:004159D8                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:004159D8                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:00415A08                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:00415A08                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:00415A08                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:00415A08                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:00415A58                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00415A58                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:00415A58                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:00415A58                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:00415A58                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00415A58                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:00415AD8                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:00415AD8                 dd 0Ah, 0
.text:00415AF8                 dd 0C0h, 46000000h, 2, 0
.text:00415B08                 dd 0C0h, 46000000h, 1Dh, 0
.text:00415B18                 dd 0C0h, 46000000h, 3, 0
.text:00415B28                 dd 0C0h, 46000000h, 16h, 0
.text:00415B38                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:00415B38                 dd 1608D74Fh, 0Fh, 0
.text:00415B58                 dd 0C0h, 46000000h, 20h, 0
.text:00415B68                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:00415B68                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:00415B68                 dd 0
.text:00415B98                 dd 0C0h, 46000000h, 11Eh, 0
.text:00415BA8                 dd 0C0h, 46000000h, 128h, 0
.text:00415BB8                 dd 0C0h, 46000000h, 129h, 0
.text:00415BC8                 dd 0C0h, 46000000h, 118h, 0
.text:00415BD8                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:00415BD8                 dd 70474000h, 11Bh, 0
.text:00415BF8                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:00415BF8                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00415BF8                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:00415BF8                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:00415BF8                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:00415C58                 dd 0C0h, 46000000h, 116h, 0
.text:00415C68                 dd 0C0h, 46000000h, 113h, 0
.text:00415C78                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:00415C78                 dd 119h, 0
.text:00415C98                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:00415C98                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:00415C98                 dd 0
.text:00415CC8                 dd 0C0h, 46000000h, 11Ch, 0
.text:00415CD8                 dd 0C0h, 46000000h, 11Dh, 0
.text:00415CE8                 dd 0C0h, 46000000h, 11Fh, 0
.text:00415CF8                 dd 0C0h, 46000000h, 112h, 0
.text:00415D08                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:00415D08                 dd 18E6000h, 120h, 0
.text:00415D28                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:00415D28                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:00415D28                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:00415D68                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:00415D68                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:00415D98                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00415D98                 dd 11Ah, 0
.text:00415DB8                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:00415DB8                 dd 10Ch, 0
.text:00415DD8                 dd 0C0h, 46000000h
.text:00415DE0 dword_415DE0    dd 10Bh, 0              ; DATA XREF: sub_40AF90+75↑o
.text:00415DE8                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:00415DE8                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:00415DE8                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:00415DE8                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:00415E38                 dd 0C0h, 46000000h, 109h, 0
.text:00415E48                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:00415E48                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:00415E48                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:00415E48                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:00415E48                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:00415E48                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:00415E48                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:00415E48                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:00415E48                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00415E48                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:00415E48                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:00415F28                 dd 0C0h, 46000000h, 138h, 0
.text:00415F38                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:00415F38                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:00415F38                 dd 27h, 0
.text:00415F68                 dd 0C0h, 46000000h, 8, 0
.text:00415F78                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:00415F78                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:00415F78                 dd 20D00h, 0
.text:00415FA8                 dd 0C0h, 46000000h, 20D03h, 0
.text:00415FB8                 dd 0C0h, 46000000h, 12h, 0
.text:00415FC8                 dd 0C0h, 46000000h, 4, 0
.text:00415FD8                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00415FD8                 dd 7, 0
.text:00415FF8                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00415FF8                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:00416028                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00416028                 dd 126h, 0
.text:00416048                 dd 0C0h, 46000000h, 10h, 0
.text:00416058                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:00416058                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:00416088                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:00416088                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:00416088                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:004160C8                 dd 0C0h, 46000000h, 0Bh, 0
.text:004160D8                 dd 0C0h, 46000000h, 0Ch, 0
.text:004160E8                 dd 0C0h, 46000000h, 26h, 0
.text:004160F8                 dd 0C0h, 46000000h, 6, 0
.text:00416108                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:00416108                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:00416108                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:00416148                 dd 0C0h, 46000000h, 20403h, 0
.text:00416158                 dd 0C0h, 46000000h, 20401h, 0
.text:00416168                 dd 0C0h, 46000000h, 20412h, 0
.text:00416178                 dd 0C0h, 46000000h, 20402h, 0
.text:00416188                 dd 0C0h, 46000000h, 20411h, 0
.text:00416198                 dd 0C0h, 46000000h, 2 dup(0)
.text:004161A8                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:004161A8                 dd 10Dh, 0
.text:004161C8                 dd 0C0h, 46000000h, 127h, 0
.text:004161D8                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:004161D8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:004161D8                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:00416218                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:00416218                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:00416218                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:00416258                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:00416268                 dd 0C0h, 46000000h, 2DE18h, 0
.text:00416278                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:00416288                 dd 0C0h, 46000000h, 2DE19h, 0
.text:00416298                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:004162A8                 dd 0C0h, 46000000h, 2DE12h, 0
.text:004162B8                 dd 0C0h, 46000000h, 2DE21h, 0
.text:004162C8                 dd 0C0h, 46000000h, 2DE01h, 0
.text:004162D8                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:004162E8                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:004162F8                 dd 0C0h, 46000000h, 2DE02h, 0
.text:00416308                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:00416318                 dd 0C0h, 46000000h, 2DE04h, 0
.text:00416328                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:00416338                 dd 0C0h, 46000000h, 2DE05h, 0
.text:00416348                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:00416358                 dd 0C0h, 46000000h, 2DE06h, 0
.text:00416368                 dd 0C0h, 46000000h, 2DE13h, 0
.text:00416378                 dd 0C0h, 46000000h, 2DE10h, 0
.text:00416388                 dd 0C0h, 46000000h, 2DE22h, 0
.text:00416398                 dd 0C0h, 46000000h, 2DE09h, 0
.text:004163A8                 dd 0C0h, 46000000h, 2DE23h, 0
.text:004163B8                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:004163C8                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:004163D8                 dd 0C0h, 46000000h, 2DE11h, 0
.text:004163E8                 dd 0C0h, 46000000h, 2DE15h, 0
.text:004163F8                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:00416408                 dd 0C0h, 46000000h, 2DE16h, 0
.text:00416418                 dd 0C0h, 46000000h, 2DE20h, 0
.text:00416428                 dd 0C0h, 46000000h, 2DE07h, 0
.text:00416438                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:00416448                 dd 0C0h, 46000000h, 2DE17h, 0
.text:00416458                 dd 0C0h, 46000000h, 2DE14h, 0
.text:00416468                 dd 0C0h, 46000000h, 2DE03h, 0
.text:00416478                 dd 0C0h, 46000000h, 2DE08h, 0
.text:00416488                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:00416488                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:004164B0
.text:004164B0 ; =============== S U B R O U T I N E =======================================
.text:004164B0
.text:004164B0 ; Attributes: thunk
.text:004164B0
.text:004164B0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:004164B0 mbrtowc         proc near               ; CODE XREF: sub_4020F0+424↑p
.text:004164B0                                         ; sub_4046F0+757↑p
.text:004164B0
.text:004164B0 DstCh           = dword ptr  4
.text:004164B0 SrcCh           = dword ptr  8
.text:004164B0 SizeInBytes     = dword ptr  0Ch
.text:004164B0 State           = dword ptr  10h
.text:004164B0
.text:004164B0                 jmp     ds:__imp_mbrtowc
.text:004164B0 mbrtowc         endp
.text:004164B0
.text:004164B0 ; ---------------------------------------------------------------------------
.text:004164B6                 align 10h
.text:004164C0
.text:004164C0 ; =============== S U B R O U T I N E =======================================
.text:004164C0
.text:004164C0 ; Attributes: bp-based frame
.text:004164C0
.text:004164C0 sub_4164C0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:004164C0                 push    ebp
.text:004164C1                 mov     ecx, offset dword_419000
.text:004164C6                 cmp     ecx, offset dword_419000
.text:004164CC                 mov     ebp, esp
.text:004164CE                 jnb     short loc_4164E6
.text:004164D0
.text:004164D0 loc_4164D0:                             ; CODE XREF: sub_4164C0+24↓j
.text:004164D0                 mov     edx, [ecx+4]
.text:004164D3                 mov     eax, [ecx]
.text:004164D5                 add     ecx, 8
.text:004164D8                 add     [edx+400000h], eax
.text:004164DE                 cmp     ecx, offset dword_419000
.text:004164E4                 jb      short loc_4164D0
.text:004164E6
.text:004164E6 loc_4164E6:                             ; CODE XREF: sub_4164C0+E↑j
.text:004164E6                 pop     ebp
.text:004164E7                 retn
.text:004164E7 sub_4164C0      endp
.text:004164E7
.text:004164E7 ; ---------------------------------------------------------------------------
.text:004164E8                 align 10h
.text:004164F0
.text:004164F0 ; =============== S U B R O U T I N E =======================================
.text:004164F0
.text:004164F0 ; Attributes: bp-based frame
.text:004164F0
.text:004164F0 sub_4164F0      proc near               ; CODE XREF: sub_401080+16↑p
.text:004164F0                                         ; TopLevelExceptionFilter+D7↑p
.text:004164F0                 push    ebp
.text:004164F1                 mov     ebp, esp
.text:004164F3                 fninit
.text:004164F5                 pop     ebp
.text:004164F6                 retn
.text:004164F6 sub_4164F0      endp
.text:004164F6
.text:004164F6 ; ---------------------------------------------------------------------------
.text:004164F7                 align 10h
.text:00416500
.text:00416500 ; =============== S U B R O U T I N E =======================================
.text:00416500
.text:00416500 ; Attributes: bp-based frame
.text:00416500
.text:00416500 ; void __cdecl sub_416500()
.text:00416500 sub_416500      proc near               ; DATA XREF: .text:loc_416549↓o
.text:00416500                                         ; sub_416590:loc_4165BE↓o
.text:00416500                 push    ebp
.text:00416501                 mov     ebp, esp
.text:00416503                 sub     esp, 8
.text:00416506                 mov     eax, off_418144
.text:0041650B                 mov     edx, [eax]
.text:0041650D                 test    edx, edx
.text:0041650F                 jnz     short loc_416515
.text:00416511
.text:00416511 loc_416511:                             ; CODE XREF: sub_416500+2C↓j
.text:00416511                 mov     esp, ebp
.text:00416513                 pop     ebp
.text:00416514                 retn
.text:00416515 ; ---------------------------------------------------------------------------
.text:00416515
.text:00416515 loc_416515:                             ; CODE XREF: sub_416500+F↑j
.text:00416515                                         ; sub_416500+2A↓j
.text:00416515                 call    dword ptr [eax]
.text:00416517                 mov     edx, off_418144
.text:0041651D                 mov     ecx, [edx+4]
.text:00416520                 lea     eax, [edx+4]
.text:00416523                 mov     off_418144, eax
.text:00416528                 test    ecx, ecx
.text:0041652A                 jnz     short loc_416515
.text:0041652C                 jmp     short loc_416511
.text:0041652C sub_416500      endp
.text:0041652C
.text:0041652C ; ---------------------------------------------------------------------------
.text:0041652E                 align 10h
.text:00416530                 push    ebp
.text:00416531                 mov     ebp, esp
.text:00416533                 sub     esp, 8
.text:00416536                 mov     [ebp-4], ebx
.text:00416539                 mov     eax, ds:dword_417310
.text:0041653E                 cmp     eax, 0FFFFFFFFh
.text:00416541                 jz      short loc_41656C
.text:00416543
.text:00416543 loc_416543:                             ; CODE XREF: .text:00416576↓j
.text:00416543                                         ; .text:00416589↓j
.text:00416543                 test    eax, eax
.text:00416545                 mov     ebx, eax
.text:00416547                 jnz     short loc_416560
.text:00416549
.text:00416549 loc_416549:                             ; CODE XREF: .text:0041656A↓j
.text:00416549                 mov     dword ptr [esp], offset sub_416500
.text:00416550                 call    sub_401040
.text:00416555                 mov     ebx, [ebp-4]
.text:00416558                 mov     esp, ebp
.text:0041655A                 pop     ebp
.text:0041655B                 retn
.text:0041655B ; ---------------------------------------------------------------------------
.text:0041655C                 align 10h
.text:00416560
.text:00416560 loc_416560:                             ; CODE XREF: .text:00416547↑j
.text:00416560                                         ; .text:00416568↓j
.text:00416560                 call    ds:dword_417310[ebx*4]
.text:00416567                 dec     ebx
.text:00416568                 jnz     short loc_416560
.text:0041656A                 jmp     short loc_416549
.text:0041656C ; ---------------------------------------------------------------------------
.text:0041656C
.text:0041656C loc_41656C:                             ; CODE XREF: .text:00416541↑j
.text:0041656C                 mov     ecx, ds:dword_417314
.text:00416572                 xor     eax, eax
.text:00416574                 test    ecx, ecx
.text:00416576                 jz      short loc_416543
.text:00416578                 mov     edx, offset dword_417310
.text:0041657D                 lea     esi, [esi+0]
.text:00416580
.text:00416580 loc_416580:                             ; CODE XREF: .text:00416587↓j
.text:00416580                 inc     eax
.text:00416581                 mov     ecx, [edx+eax*4+4]
.text:00416585                 test    ecx, ecx
.text:00416587                 jnz     short loc_416580
.text:00416589                 jmp     short loc_416543
.text:00416589 ; ---------------------------------------------------------------------------
.text:0041658B                 align 10h
.text:00416590
.text:00416590 ; =============== S U B R O U T I N E =======================================
.text:00416590
.text:00416590 ; Attributes: bp-based frame
.text:00416590
.text:00416590 sub_416590      proc near               ; CODE XREF: sub_4016B0+1A↑p
.text:00416590
.text:00416590 var_8           = dword ptr -8
.text:00416590 var_4           = dword ptr -4
.text:00416590
.text:00416590                 push    ebp
.text:00416591                 mov     ebp, esp
.text:00416593                 sub     esp, 8
.text:00416596                 mov     [ebp+var_4], ebx
.text:00416599                 mov     edx, dword_418140
.text:0041659F                 test    edx, edx
.text:004165A1                 jnz     short loc_4165CA
.text:004165A3                 mov     eax, ds:dword_417310
.text:004165A8                 mov     edx, 1
.text:004165AD                 mov     dword_418140, edx
.text:004165B3                 cmp     eax, 0FFFFFFFFh
.text:004165B6                 jz      short loc_4165DD
.text:004165B8
.text:004165B8 loc_4165B8:                             ; CODE XREF: sub_416590+57↓j
.text:004165B8                                         ; sub_416590+69↓j
.text:004165B8                 test    eax, eax
.text:004165BA                 mov     ebx, eax
.text:004165BC                 jnz     short loc_4165D1
.text:004165BE
.text:004165BE loc_4165BE:                             ; CODE XREF: sub_416590+4B↓j
.text:004165BE                 mov     [esp+8+var_8], offset sub_416500 ; void (__cdecl *)()
.text:004165C5                 call    sub_401040
.text:004165CA
.text:004165CA loc_4165CA:                             ; CODE XREF: sub_416590+11↑j
.text:004165CA                 mov     ebx, [ebp+var_4]
.text:004165CD                 mov     esp, ebp
.text:004165CF                 pop     ebp
.text:004165D0                 retn
.text:004165D1 ; ---------------------------------------------------------------------------
.text:004165D1
.text:004165D1 loc_4165D1:                             ; CODE XREF: sub_416590+2C↑j
.text:004165D1                                         ; sub_416590+49↓j
.text:004165D1                 call    ds:dword_417310[ebx*4]
.text:004165D8                 dec     ebx
.text:004165D9                 jnz     short loc_4165D1
.text:004165DB                 jmp     short loc_4165BE
.text:004165DD ; ---------------------------------------------------------------------------
.text:004165DD
.text:004165DD loc_4165DD:                             ; CODE XREF: sub_416590+26↑j
.text:004165DD                 mov     ecx, ds:dword_417314
.text:004165E3                 xor     eax, eax
.text:004165E5                 test    ecx, ecx
.text:004165E7                 jz      short loc_4165B8
.text:004165E9                 mov     edx, offset dword_417310
.text:004165EE                 mov     esi, esi
.text:004165F0
.text:004165F0 loc_4165F0:                             ; CODE XREF: sub_416590+67↓j
.text:004165F0                 inc     eax
.text:004165F1                 mov     ebx, [edx+eax*4+4]
.text:004165F5                 test    ebx, ebx
.text:004165F7                 jnz     short loc_4165F0
.text:004165F9                 jmp     short loc_4165B8
.text:004165F9 sub_416590      endp
.text:004165F9
.text:004165F9 ; ---------------------------------------------------------------------------
.text:004165FB                 align 10h
.text:00416600
.text:00416600 ; =============== S U B R O U T I N E =======================================
.text:00416600
.text:00416600 ; Attributes: bp-based frame
.text:00416600
.text:00416600 sub_416600      proc near               ; CODE XREF: sub_4016B0+674↑p
.text:00416600                                         ; sub_4045F0+58↑p ...
.text:00416600
.text:00416600 var_24          = dword ptr -24h
.text:00416600 var_20          = dword ptr -20h
.text:00416600 var_1C          = dword ptr -1Ch
.text:00416600 var_18          = dword ptr -18h
.text:00416600 var_14          = dword ptr -14h
.text:00416600 var_C           = dword ptr -0Ch
.text:00416600 var_8           = dword ptr -8
.text:00416600 var_4           = dword ptr -4
.text:00416600 arg_0           = dword ptr  8
.text:00416600 arg_4           = dword ptr  0Ch
.text:00416600 arg_8           = dword ptr  10h
.text:00416600 arg_C           = dword ptr  14h
.text:00416600
.text:00416600                 push    ebp
.text:00416601                 mov     ebp, esp
.text:00416603                 sub     esp, 28h
.text:00416606                 mov     [ebp+var_C], ebx
.text:00416609                 mov     edx, [ebp+arg_C]
.text:0041660C                 mov     ecx, [ebp+arg_0]
.text:0041660F                 mov     [ebp+var_8], esi
.text:00416612                 mov     eax, [ebp+arg_8]
.text:00416615                 test    edx, edx
.text:00416617                 mov     [ebp+var_4], edi
.text:0041661A                 mov     ebx, [ebp+arg_4]
.text:0041661D                 mov     esi, eax
.text:0041661F                 mov     [ebp+var_18], 0
.text:00416626                 mov     [ebp+var_14], 0
.text:0041662D                 mov     [ebp+var_1C], ecx
.text:00416630                 jnz     short loc_416682
.text:00416632                 cmp     eax, ebx
.text:00416634                 jbe     short loc_416660
.text:00416636                 mov     eax, ecx
.text:00416638                 mov     edx, ebx
.text:0041663A                 div     esi
.text:0041663C                 mov     edi, eax
.text:0041663E                 mov     esi, esi
.text:00416640
.text:00416640 loc_416640:                             ; CODE XREF: sub_416600+88↓j
.text:00416640                                         ; sub_416600+A4↓j ...
.text:00416640                 xor     ecx, ecx
.text:00416642
.text:00416642 loc_416642:                             ; CODE XREF: sub_416600+80↓j
.text:00416642                 mov     [ebp+var_18], edi
.text:00416645                 mov     ebx, [ebp+var_C]
.text:00416648                 mov     eax, [ebp+var_18]
.text:0041664B                 mov     [ebp+var_14], ecx
.text:0041664E                 mov     esi, [ebp+var_8]
.text:00416651                 mov     edx, [ebp+var_14]
.text:00416654                 mov     edi, [ebp+var_4]
.text:00416657                 mov     esp, ebp
.text:00416659                 pop     ebp
.text:0041665A                 retn
.text:0041665A ; ---------------------------------------------------------------------------
.text:0041665B                 align 10h
.text:00416660
.text:00416660 loc_416660:                             ; CODE XREF: sub_416600+34↑j
.text:00416660                 test    eax, eax
.text:00416662                 jnz     short loc_416671
.text:00416664                 mov     eax, 1
.text:00416669                 xor     ecx, ecx
.text:0041666B                 xor     edx, edx
.text:0041666D                 div     ecx
.text:0041666F                 mov     esi, eax
.text:00416671
.text:00416671 loc_416671:                             ; CODE XREF: sub_416600+62↑j
.text:00416671                 mov     eax, ebx
.text:00416673                 xor     edx, edx
.text:00416675                 div     esi
.text:00416677                 mov     ecx, eax
.text:00416679                 mov     eax, [ebp+var_1C]
.text:0041667C                 div     esi
.text:0041667E                 mov     edi, eax
.text:00416680                 jmp     short loc_416642
.text:00416682 ; ---------------------------------------------------------------------------
.text:00416682
.text:00416682 loc_416682:                             ; CODE XREF: sub_416600+30↑j
.text:00416682                 cmp     edx, ebx
.text:00416684                 jbe     short loc_416690
.text:00416686                 xor     edi, edi
.text:00416688                 jmp     short loc_416640
.text:00416688 ; ---------------------------------------------------------------------------
.text:0041668A                 align 10h
.text:00416690
.text:00416690 loc_416690:                             ; CODE XREF: sub_416600+84↑j
.text:00416690                 bsr     eax, edx
.text:00416693                 xor     eax, 1Fh
.text:00416696                 mov     [ebp+var_20], eax
.text:00416699                 jnz     short loc_4166B0
.text:0041669B                 cmp     ebx, edx
.text:0041669D                 ja      short loc_4166A6
.text:0041669F                 xor     edi, edi
.text:004166A1                 cmp     [ebp+var_1C], esi
.text:004166A4                 jb      short loc_416640
.text:004166A6
.text:004166A6 loc_4166A6:                             ; CODE XREF: sub_416600+9D↑j
.text:004166A6                 mov     edi, 1
.text:004166AB                 jmp     short loc_416640
.text:004166AB ; ---------------------------------------------------------------------------
.text:004166AD                 align 10h
.text:004166B0
.text:004166B0 loc_4166B0:                             ; CODE XREF: sub_416600+99↑j
.text:004166B0                 mov     eax, [ebp+var_20]
.text:004166B3                 mov     ecx, 20h ; ' '
.text:004166B8                 sub     ecx, eax
.text:004166BA                 mov     [ebp+var_24], ecx
.text:004166BD                 mov     eax, esi
.text:004166BF                 movzx   ecx, byte ptr [ebp+var_20]
.text:004166C3                 shl     edx, cl
.text:004166C5                 mov     edi, edx
.text:004166C7                 movzx   ecx, byte ptr [ebp+var_24]
.text:004166CB                 mov     edx, ebx
.text:004166CD                 shr     eax, cl
.text:004166CF                 movzx   ecx, byte ptr [ebp+var_20]
.text:004166D3                 or      edi, eax
.text:004166D5                 mov     eax, [ebp+var_1C]
.text:004166D8                 shl     esi, cl
.text:004166DA                 movzx   ecx, byte ptr [ebp+var_24]
.text:004166DE                 shr     edx, cl
.text:004166E0                 movzx   ecx, byte ptr [ebp+var_20]
.text:004166E4                 shl     ebx, cl
.text:004166E6                 movzx   ecx, byte ptr [ebp+var_24]
.text:004166EA                 shr     eax, cl
.text:004166EC                 or      ebx, eax
.text:004166EE                 movzx   ecx, byte ptr [ebp+var_20]
.text:004166F2                 mov     eax, ebx
.text:004166F4                 div     edi
.text:004166F6                 mov     ebx, edx
.text:004166F8                 mov     edi, eax
.text:004166FA                 shl     [ebp+var_1C], cl
.text:004166FD                 mul     esi
.text:004166FF                 cmp     edx, ebx
.text:00416701                 ja      short loc_416714
.text:00416703                 cmp     edx, ebx
.text:00416705                 jnz     loc_416640
.text:0041670B                 cmp     eax, [ebp+var_1C]
.text:0041670E                 jbe     loc_416640
.text:00416714
.text:00416714 loc_416714:                             ; CODE XREF: sub_416600+101↑j
.text:00416714                 dec     edi
.text:00416715                 jmp     loc_416640
.text:00416715 sub_416600      endp
.text:00416715
.text:00416715 ; ---------------------------------------------------------------------------
.text:0041671A                 align 10h
.text:00416720
.text:00416720 ; =============== S U B R O U T I N E =======================================
.text:00416720
.text:00416720 ; Attributes: info_from_lumina
.text:00416720
.text:00416720 ; void *__cdecl _alloca(size_t Size)
.text:00416720 __alloca        proc near               ; CODE XREF: sub_4016B0+15↑p
.text:00416720                                         ; sub_4020F0+9↑p
.text:00416720                 push    ecx
.text:00416721                 mov     ecx, esp
.text:00416723                 add     ecx, 8
.text:00416726
.text:00416726 loc_416726:                             ; CODE XREF: __alloca+1B↓j
.text:00416726                 cmp     eax, 1000h
.text:0041672B                 jb      short loc_41673D
.text:0041672D                 sub     ecx, 1000h
.text:00416733                 or      dword ptr [ecx], 0
.text:00416736                 sub     eax, 1000h
.text:0041673B                 jmp     short loc_416726
.text:0041673D ; ---------------------------------------------------------------------------
.text:0041673D
.text:0041673D loc_41673D:                             ; CODE XREF: __alloca+B↑j
.text:0041673D                 sub     ecx, eax
.text:0041673F                 or      dword ptr [ecx], 0
.text:00416742                 mov     eax, esp
.text:00416744                 mov     esp, ecx
.text:00416746                 mov     ecx, [eax]
.text:00416748                 mov     eax, [eax+4]
.text:0041674B                 jmp     eax
.text:0041674B __alloca        endp
.text:0041674B
.text:0041674B ; ---------------------------------------------------------------------------
.text:0041674D                 align 10h
.text:00416750
.text:00416750 ; =============== S U B R O U T I N E =======================================
.text:00416750
.text:00416750 ; Attributes: bp-based frame
.text:00416750
.text:00416750 sub_416750      proc near               ; CODE XREF: sub_4045F0+38↑p
.text:00416750                                         ; sub_4063A0+1A5↑p ...
.text:00416750
.text:00416750 var_34          = dword ptr -34h
.text:00416750 var_2C          = dword ptr -2Ch
.text:00416750 var_28          = dword ptr -28h
.text:00416750 var_24          = dword ptr -24h
.text:00416750 var_20          = dword ptr -20h
.text:00416750 var_1C          = dword ptr -1Ch
.text:00416750 var_18          = dword ptr -18h
.text:00416750 var_14          = dword ptr -14h
.text:00416750 arg_0           = dword ptr  8
.text:00416750 arg_4           = dword ptr  0Ch
.text:00416750 arg_8           = dword ptr  10h
.text:00416750 arg_C           = dword ptr  14h
.text:00416750
.text:00416750                 push    ebp
.text:00416751                 mov     ebp, esp
.text:00416753                 push    edi
.text:00416754                 push    esi
.text:00416755                 push    ebx
.text:00416756                 sub     esp, 2Ch
.text:00416759                 mov     edx, [ebp+arg_C]
.text:0041675C                 mov     [ebp+var_20], 0
.text:00416763                 mov     ecx, [ebp+arg_0]
.text:00416766                 mov     ebx, [ebp+arg_4]
.text:00416769                 mov     [ebp+var_1C], 0
.text:00416770                 mov     eax, [ebp+arg_8]
.text:00416773                 test    edx, edx
.text:00416775                 mov     [ebp+var_24], edx
.text:00416778                 mov     edi, ebx
.text:0041677A                 mov     esi, eax
.text:0041677C                 mov     [ebp+var_28], ecx
.text:0041677F                 jnz     short loc_4167E0
.text:00416781                 cmp     eax, ebx
.text:00416783                 jbe     short loc_4167C0
.text:00416785                 mov     eax, ecx
.text:00416787                 mov     edx, ebx
.text:00416789                 div     esi
.text:0041678B
.text:0041678B loc_41678B:                             ; CODE XREF: sub_416750+8B↓j
.text:0041678B                 mov     [ebp+var_28], edx
.text:0041678E                 lea     ecx, [ebp+var_18]
.text:00416791                 test    ecx, ecx
.text:00416793                 jz      short loc_4167AE
.text:00416795                 mov     [ebp+var_1C], 0
.text:0041679C
.text:0041679C loc_41679C:                             ; CODE XREF: sub_416750+DA↓j
.text:0041679C                 mov     eax, [ebp+var_28]
.text:0041679F                 mov     [ebp+var_20], eax
.text:004167A2                 mov     edx, [ebp+var_20]
.text:004167A5                 mov     ecx, [ebp+var_1C]
.text:004167A8                 mov     [ebp+var_18], edx
.text:004167AB                 mov     [ebp+var_14], ecx
.text:004167AE
.text:004167AE loc_4167AE:                             ; CODE XREF: sub_416750+43↑j
.text:004167AE                                         ; sub_416750+A7↓j ...
.text:004167AE                 mov     eax, [ebp+var_18]
.text:004167B1                 mov     edx, [ebp+var_14]
.text:004167B4                 add     esp, 2Ch
.text:004167B7                 pop     ebx
.text:004167B8                 pop     esi
.text:004167B9                 pop     edi
.text:004167BA                 pop     ebp
.text:004167BB                 retn
.text:004167BB ; ---------------------------------------------------------------------------
.text:004167BC                 align 10h
.text:004167C0
.text:004167C0 loc_4167C0:                             ; CODE XREF: sub_416750+33↑j
.text:004167C0                 test    eax, eax
.text:004167C2                 jnz     short loc_4167CF
.text:004167C4                 mov     eax, 1
.text:004167C9                 xor     edx, edx
.text:004167CB                 div     esi
.text:004167CD                 mov     esi, eax
.text:004167CF
.text:004167CF loc_4167CF:                             ; CODE XREF: sub_416750+72↑j
.text:004167CF                 mov     eax, edi
.text:004167D1                 mov     edx, [ebp+var_24]
.text:004167D4                 div     esi
.text:004167D6                 mov     eax, [ebp+var_28]
.text:004167D9                 div     esi
.text:004167DB                 jmp     short loc_41678B
.text:004167DB ; ---------------------------------------------------------------------------
.text:004167DD                 align 10h
.text:004167E0
.text:004167E0 loc_4167E0:                             ; CODE XREF: sub_416750+2F↑j
.text:004167E0                 cmp     [ebp+var_24], ebx
.text:004167E3                 jbe     short loc_416800
.text:004167E5                 mov     [ebp+var_20], ecx
.text:004167E8
.text:004167E8 loc_4167E8:                             ; CODE XREF: sub_416750+15B↓j
.text:004167E8                 mov     [ebp+var_1C], edi
.text:004167EB                 mov     eax, [ebp+var_20]
.text:004167EE                 mov     edx, [ebp+var_1C]
.text:004167F1                 mov     [ebp+var_18], eax
.text:004167F4                 mov     [ebp+var_14], edx
.text:004167F7                 jmp     short loc_4167AE
.text:004167F7 ; ---------------------------------------------------------------------------
.text:004167F9                 align 10h
.text:00416800
.text:00416800 loc_416800:                             ; CODE XREF: sub_416750+93↑j
.text:00416800                 bsr     eax, [ebp+var_24]
.text:00416804                 mov     ebx, eax
.text:00416806                 xor     ebx, 1Fh
.text:00416809                 jnz     short loc_416830
.text:0041680B                 cmp     edi, [ebp+var_24]
.text:0041680E                 ja      short loc_416815
.text:00416810                 cmp     [ebp+var_28], esi
.text:00416813                 jb      short loc_416820
.text:00416815
.text:00416815 loc_416815:                             ; CODE XREF: sub_416750+BE↑j
.text:00416815                 mov     edx, [ebp+var_28]
.text:00416818                 sub     edx, esi
.text:0041681A                 sbb     edi, [ebp+var_24]
.text:0041681D                 mov     [ebp+var_28], edx
.text:00416820
.text:00416820 loc_416820:                             ; CODE XREF: sub_416750+C3↑j
.text:00416820                 lea     ecx, [ebp+var_18]
.text:00416823                 test    ecx, ecx
.text:00416825                 jz      short loc_4167AE
.text:00416827                 mov     [ebp+var_1C], edi
.text:0041682A                 jmp     loc_41679C
.text:0041682A ; ---------------------------------------------------------------------------
.text:0041682F                 align 10h
.text:00416830
.text:00416830 loc_416830:                             ; CODE XREF: sub_416750+B9↑j
.text:00416830                 mov     edx, [ebp+var_24]
.text:00416833                 mov     eax, 20h ; ' '
.text:00416838                 mov     cl, bl
.text:0041683A                 sub     eax, ebx
.text:0041683C                 mov     [ebp+var_2C], eax
.text:0041683F                 shl     edx, cl
.text:00416841                 mov     eax, esi
.text:00416843                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00416847                 shr     eax, cl
.text:00416849                 mov     cl, bl
.text:0041684B                 shl     esi, cl
.text:0041684D                 or      edx, eax
.text:0041684F                 mov     eax, [ebp+var_28]
.text:00416852                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00416856                 mov     [ebp+var_24], edx
.text:00416859                 mov     edx, edi
.text:0041685B                 shr     edx, cl
.text:0041685D                 mov     cl, bl
.text:0041685F                 shl     edi, cl
.text:00416861                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00416865                 shr     eax, cl
.text:00416867                 or      edi, eax
.text:00416869                 mov     eax, edi
.text:0041686B                 mov     cl, bl
.text:0041686D                 div     [ebp+var_24]
.text:00416870                 shl     [ebp+var_28], cl
.text:00416873                 mov     edi, edx
.text:00416875                 mul     esi
.text:00416877                 mov     [ebp+var_34], eax
.text:0041687A                 cmp     edx, edi
.text:0041687C                 ja      short loc_4168B8
.text:0041687E                 cmp     edx, edi
.text:00416880                 jz      short loc_4168B0
.text:00416882
.text:00416882 loc_416882:                             ; CODE XREF: sub_416750+166↓j
.text:00416882                                         ; sub_416750+173↓j
.text:00416882                 lea     eax, [ebp+var_18]
.text:00416885                 test    eax, eax
.text:00416887                 jz      loc_4167AE
.text:0041688D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00416891                 mov     eax, [ebp+var_28]
.text:00416894                 sub     eax, [ebp+var_34]
.text:00416897                 sbb     edi, edx
.text:00416899                 mov     [ebp+var_28], eax
.text:0041689C                 mov     edx, edi
.text:0041689E                 shl     edx, cl
.text:004168A0                 mov     cl, bl
.text:004168A2                 shr     eax, cl
.text:004168A4                 or      edx, eax
.text:004168A6                 mov     [ebp+var_20], edx
.text:004168A9                 shr     edi, cl
.text:004168AB                 jmp     loc_4167E8
.text:004168B0 ; ---------------------------------------------------------------------------
.text:004168B0
.text:004168B0 loc_4168B0:                             ; CODE XREF: sub_416750+130↑j
.text:004168B0                 mov     eax, [ebp+var_28]
.text:004168B3                 cmp     [ebp+var_34], eax
.text:004168B6                 jbe     short loc_416882
.text:004168B8
.text:004168B8 loc_4168B8:                             ; CODE XREF: sub_416750+12C↑j
.text:004168B8                 mov     ecx, [ebp+var_34]
.text:004168BB                 sub     ecx, esi
.text:004168BD                 sbb     edx, [ebp+var_24]
.text:004168C0                 mov     [ebp+var_34], ecx
.text:004168C3                 jmp     short loc_416882
.text:004168C3 sub_416750      endp
.text:004168C3
.text:004168C3 ; ---------------------------------------------------------------------------
.text:004168C5                 align 10h
.text:004168D0
.text:004168D0 ; =============== S U B R O U T I N E =======================================
.text:004168D0
.text:004168D0 ; Attributes: thunk
.text:004168D0
.text:004168D0 ; int __cdecl close(int FileHandle)
.text:004168D0 _close          proc near               ; CODE XREF: sub_4016B0+4D8↑p
.text:004168D0                                         ; sub_4016B0+5B0↑p
.text:004168D0
.text:004168D0 FileHandle      = dword ptr  4
.text:004168D0
.text:004168D0                 jmp     ds:__imp__close
.text:004168D0 _close          endp
.text:004168D0
.text:004168D0 ; ---------------------------------------------------------------------------
.text:004168D6                 align 10h
.text:004168E0
.text:004168E0 ; =============== S U B R O U T I N E =======================================
.text:004168E0
.text:004168E0 ; Attributes: thunk
.text:004168E0
.text:004168E0 ; int open(const char *FileName, int OpenFlag, ...)
.text:004168E0 _open           proc near               ; CODE XREF: sub_4016B0+58B↑p
.text:004168E0
.text:004168E0 FileName        = dword ptr  4
.text:004168E0 OpenFlag        = dword ptr  8
.text:004168E0
.text:004168E0                 jmp     ds:__imp__open
.text:004168E0 _open           endp
.text:004168E0
.text:004168E0 ; ---------------------------------------------------------------------------
.text:004168E6                 align 10h
.text:004168F0
.text:004168F0 ; =============== S U B R O U T I N E =======================================
.text:004168F0
.text:004168F0 ; Attributes: thunk
.text:004168F0
.text:004168F0 ; int __cdecl isatty(int FileHandle)
.text:004168F0 _isatty         proc near               ; CODE XREF: sub_4020F0+C7↑p
.text:004168F0
.text:004168F0 FileHandle      = dword ptr  4
.text:004168F0
.text:004168F0                 jmp     ds:__imp__isatty
.text:004168F0 _isatty         endp
.text:004168F0
.text:004168F0 ; ---------------------------------------------------------------------------
.text:004168F6                 align 10h
.text:00416900
.text:00416900 ; =============== S U B R O U T I N E =======================================
.text:00416900
.text:00416900 ; Attributes: thunk
.text:00416900
.text:00416900 ; int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.text:00416900 _read           proc near               ; CODE XREF: sub_404580+2B↑p
.text:00416900
.text:00416900 FileHandle      = dword ptr  4
.text:00416900 DstBuf          = dword ptr  8
.text:00416900 MaxCharCount    = dword ptr  0Ch
.text:00416900
.text:00416900                 jmp     ds:__imp__read
.text:00416900 _read           endp
.text:00416900
.text:00416900 ; ---------------------------------------------------------------------------
.text:00416906                 align 10h
.text:00416910
.text:00416910 ; =============== S U B R O U T I N E =======================================
.text:00416910
.text:00416910 ; Attributes: thunk
.text:00416910
.text:00416910 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:00416910 _stricmp        proc near               ; CODE XREF: sub_406870+46F↑p
.text:00416910                                         ; sub_4087F0+2E↑p ...
.text:00416910
.text:00416910 String1         = dword ptr  4
.text:00416910 String2         = dword ptr  8
.text:00416910
.text:00416910                 jmp     ds:__imp__stricmp
.text:00416910 _stricmp        endp
.text:00416910
.text:00416910 ; ---------------------------------------------------------------------------
.text:00416916                 align 10h
.text:00416920
.text:00416920 ; =============== S U B R O U T I N E =======================================
.text:00416920
.text:00416920 ; Attributes: thunk
.text:00416920
.text:00416920 ; char *__cdecl strdup(const char *String)
.text:00416920 _strdup         proc near               ; CODE XREF: sub_408420+101↑p
.text:00416920                                         ; .text:0040868A↑p ...
.text:00416920
.text:00416920 String          = dword ptr  4
.text:00416920
.text:00416920                 jmp     ds:__imp__strdup
.text:00416920 _strdup         endp
.text:00416920
.text:00416920 ; ---------------------------------------------------------------------------
.text:00416926                 align 10h
.text:00416930
.text:00416930 ; =============== S U B R O U T I N E =======================================
.text:00416930
.text:00416930 ; Attributes: thunk
.text:00416930
.text:00416930 ; int __cdecl getpid()
.text:00416930 _getpid         proc near               ; CODE XREF: sub_414960+84↑p
.text:00416930                 jmp     ds:__imp__getpid
.text:00416930 _getpid         endp
.text:00416930
.text:00416930 ; ---------------------------------------------------------------------------
.text:00416936                 align 10h
.text:00416940
.text:00416940 ; =============== S U B R O U T I N E =======================================
.text:00416940
.text:00416940 ; Attributes: thunk
.text:00416940
.text:00416940 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:00416940 _chmod          proc near               ; CODE XREF: sub_414D90+41↑j
.text:00416940
.text:00416940 FileName        = dword ptr  4
.text:00416940 AccessMode      = dword ptr  8
.text:00416940
.text:00416940                 jmp     ds:__imp__chmod
.text:00416940 _chmod          endp
.text:00416940
.text:00416940 ; ---------------------------------------------------------------------------
.text:00416946                 align 10h
.text:00416950                 jmp     ds:__set_app_type
.text:00416950 ; ---------------------------------------------------------------------------
.text:00416956                 align 10h
.text:00416960
.text:00416960 ; =============== S U B R O U T I N E =======================================
.text:00416960
.text:00416960 ; Attributes: thunk
.text:00416960
.text:00416960 ; void __cdecl cexit()
.text:00416960 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00416960                 jmp     ds:__imp__cexit
.text:00416960 _cexit          endp
.text:00416960
.text:00416960 ; ---------------------------------------------------------------------------
.text:00416966                 align 10h
.text:00416970
.text:00416970 ; =============== S U B R O U T I N E =======================================
.text:00416970
.text:00416970 ; Attributes: thunk
.text:00416970
.text:00416970 ; char ***__cdecl _p__environ()
.text:00416970 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00416970                 jmp     ds:__imp___p__environ
.text:00416970 __p__environ    endp
.text:00416970
.text:00416970 ; ---------------------------------------------------------------------------
.text:00416976                 align 10h
.text:00416980
.text:00416980 ; =============== S U B R O U T I N E =======================================
.text:00416980
.text:00416980 ; Attributes: thunk
.text:00416980
.text:00416980 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00416980 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00416980                                         ; TopLevelExceptionFilter+88↑p ...
.text:00416980
.text:00416980 Signal          = dword ptr  4
.text:00416980 Function        = dword ptr  8
.text:00416980
.text:00416980                 jmp     ds:__imp_signal
.text:00416980 signal          endp
.text:00416980
.text:00416980 ; ---------------------------------------------------------------------------
.text:00416986                 align 10h
.text:00416990
.text:00416990 ; =============== S U B R O U T I N E =======================================
.text:00416990
.text:00416990 ; Attributes: thunk
.text:00416990
.text:00416990 ; int *__cdecl _p__fmode()
.text:00416990 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00416990                 jmp     ds:__imp___p__fmode
.text:00416990 __p__fmode      endp
.text:00416990
.text:00416990 ; ---------------------------------------------------------------------------
.text:00416996                 align 10h
.text:004169A0
.text:004169A0 ; =============== S U B R O U T I N E =======================================
.text:004169A0
.text:004169A0 ; Attributes: thunk
.text:004169A0
.text:004169A0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:004169A0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:004169A0                                         ; sub_401080+90↑p ...
.text:004169A0
.text:004169A0 FileHandle      = dword ptr  4
.text:004169A0 Mode            = dword ptr  8
.text:004169A0
.text:004169A0                 jmp     ds:__imp__setmode
.text:004169A0 _setmode        endp
.text:004169A0
.text:004169A0 ; ---------------------------------------------------------------------------
.text:004169A6                 align 10h
.text:004169B0
.text:004169B0 ; =============== S U B R O U T I N E =======================================
.text:004169B0
.text:004169B0 ; Attributes: thunk
.text:004169B0
.text:004169B0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004169B0                 jmp     ds:__imp___getmainargs
.text:004169B0 __getmainargs   endp
.text:004169B0
.text:004169B0 ; ---------------------------------------------------------------------------
.text:004169B6                 align 10h
.text:004169C0
.text:004169C0 ; =============== S U B R O U T I N E =======================================
.text:004169C0
.text:004169C0 ; Attributes: thunk
.text:004169C0
.text:004169C0 ; void __cdecl free(void *Block)
.text:004169C0 free            proc near               ; CODE XREF: sub_4016B0+4B2↑p
.text:004169C0                                         ; sub_405830+112↑p ...
.text:004169C0
.text:004169C0 Block           = dword ptr  4
.text:004169C0
.text:004169C0                 jmp     ds:__imp_free
.text:004169C0 free            endp
.text:004169C0
.text:004169C0 ; ---------------------------------------------------------------------------
.text:004169C6                 align 10h
.text:004169D0
.text:004169D0 ; =============== S U B R O U T I N E =======================================
.text:004169D0
.text:004169D0 ; Attributes: thunk
.text:004169D0
.text:004169D0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:004169D0 setlocale       proc near               ; CODE XREF: sub_4016B0+39↑p
.text:004169D0
.text:004169D0 Category        = dword ptr  4
.text:004169D0 Locale          = dword ptr  8
.text:004169D0
.text:004169D0                 jmp     ds:__imp_setlocale
.text:004169D0 setlocale       endp
.text:004169D0
.text:004169D0 ; ---------------------------------------------------------------------------
.text:004169D6                 align 10h
.text:004169E0
.text:004169E0 ; =============== S U B R O U T I N E =======================================
.text:004169E0
.text:004169E0 ; Attributes: thunk
.text:004169E0
.text:004169E0 ; void *__cdecl memmove(void *, const void *Src, size_t Size)
.text:004169E0 memmove         proc near               ; CODE XREF: sub_4020F0+68F↑p
.text:004169E0
.text:004169E0 Src             = dword ptr  8
.text:004169E0 Size            = dword ptr  0Ch
.text:004169E0
.text:004169E0                 jmp     ds:__imp_memmove
.text:004169E0 memmove         endp
.text:004169E0
.text:004169E0 ; ---------------------------------------------------------------------------
.text:004169E6                 align 10h
.text:004169F0
.text:004169F0 ; =============== S U B R O U T I N E =======================================
.text:004169F0
.text:004169F0 ; Attributes: thunk
.text:004169F0
.text:004169F0 ; void *__cdecl memchr(const void *Buf, int Val, size_t MaxCount)
.text:004169F0 memchr          proc near               ; CODE XREF: sub_4020F0+9BA↑p
.text:004169F0
.text:004169F0 Buf             = dword ptr  4
.text:004169F0 Val             = dword ptr  8
.text:004169F0 MaxCount        = dword ptr  0Ch
.text:004169F0
.text:004169F0                 jmp     ds:__imp_memchr
.text:004169F0 memchr          endp
.text:004169F0
.text:004169F0 ; ---------------------------------------------------------------------------
.text:004169F6                 align 10h
.text:00416A00
.text:00416A00 ; =============== S U B R O U T I N E =======================================
.text:00416A00
.text:00416A00 ; Attributes: thunk
.text:00416A00
.text:00416A00 ; int *__cdecl errno()
.text:00416A00 _errno          proc near               ; CODE XREF: sub_4016B0+4E1↑p
.text:00416A00                                         ; sub_4016B0:loc_401C72↑p ...
.text:00416A00                 jmp     ds:__imp__errno
.text:00416A00 _errno          endp
.text:00416A00
.text:00416A00 ; ---------------------------------------------------------------------------
.text:00416A06                 align 10h
.text:00416A10
.text:00416A10 ; =============== S U B R O U T I N E =======================================
.text:00416A10
.text:00416A10 ; Attributes: noreturn thunk
.text:00416A10
.text:00416A10 ; void __cdecl __noreturn exit(int Code)
.text:00416A10 exit            proc near               ; CODE XREF: sub_4016B0:loc_401825↑p
.text:00416A10                                         ; .text:00401DEE↑p ...
.text:00416A10
.text:00416A10 Code            = dword ptr  4
.text:00416A10
.text:00416A10                 jmp     ds:__imp_exit
.text:00416A10 exit            endp
.text:00416A10
.text:00416A10 ; ---------------------------------------------------------------------------
.text:00416A16                 align 10h
.text:00416A20
.text:00416A20 ; =============== S U B R O U T I N E =======================================
.text:00416A20
.text:00416A20 ; Attributes: thunk
.text:00416A20
.text:00416A20 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00416A20 fputs           proc near               ; CODE XREF: sub_4016B0+207↑p
.text:00416A20                                         ; sub_4016B0+229↑p ...
.text:00416A20
.text:00416A20 Buffer          = dword ptr  4
.text:00416A20 Stream          = dword ptr  8
.text:00416A20
.text:00416A20                 jmp     ds:__imp_fputs
.text:00416A20 fputs           endp
.text:00416A20
.text:00416A20 ; ---------------------------------------------------------------------------
.text:00416A26                 align 10h
.text:00416A30
.text:00416A30 ; =============== S U B R O U T I N E =======================================
.text:00416A30
.text:00416A30 ; Attributes: thunk
.text:00416A30
.text:00416A30 ; int printf(const char *const Format, ...)
.text:00416A30 printf          proc near               ; CODE XREF: sub_4016B0+1E5↑p
.text:00416A30                                         ; sub_4016B0+28A↑p ...
.text:00416A30
.text:00416A30 Format          = dword ptr  4
.text:00416A30
.text:00416A30                 jmp     ds:__imp_printf
.text:00416A30 printf          endp
.text:00416A30
.text:00416A30 ; ---------------------------------------------------------------------------
.text:00416A36                 align 10h
.text:00416A40
.text:00416A40 ; =============== S U B R O U T I N E =======================================
.text:00416A40
.text:00416A40 ; Attributes: thunk
.text:00416A40
.text:00416A40 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00416A40 fprintf         proc near               ; CODE XREF: sub_4016B0+169↑p
.text:00416A40                                         ; .text:00401DE6↑p ...
.text:00416A40
.text:00416A40 Stream          = dword ptr  4
.text:00416A40 Format          = dword ptr  8
.text:00416A40
.text:00416A40                 jmp     ds:__imp_fprintf
.text:00416A40 fprintf         endp
.text:00416A40
.text:00416A40 ; ---------------------------------------------------------------------------
.text:00416A46                 align 10h
.text:00416A50
.text:00416A50 ; =============== S U B R O U T I N E =======================================
.text:00416A50
.text:00416A50 ; Attributes: thunk
.text:00416A50
.text:00416A50 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00416A50 iswctype        proc near               ; CODE XREF: sub_4020F0+570↑p
.text:00416A50                                         ; sub_4020F0+5A9↑p ...
.text:00416A50
.text:00416A50 C               = word ptr  4
.text:00416A50 Type            = word ptr  8
.text:00416A50
.text:00416A50                 jmp     ds:__imp_iswctype
.text:00416A50 iswctype        endp
.text:00416A50
.text:00416A50 ; ---------------------------------------------------------------------------
.text:00416A56                 align 10h
.text:00416A60
.text:00416A60 ; =============== S U B R O U T I N E =======================================
.text:00416A60
.text:00416A60 ; Attributes: thunk
.text:00416A60
.text:00416A60 ; int __cdecl isctype(int C, int Type)
.text:00416A60 _isctype        proc near               ; CODE XREF: sub_4020F0+88A↑p
.text:00416A60                                         ; sub_4020F0+8B7↑p ...
.text:00416A60
.text:00416A60 C               = dword ptr  4
.text:00416A60 Type            = dword ptr  8
.text:00416A60
.text:00416A60                 jmp     ds:__imp__isctype
.text:00416A60 _isctype        endp
.text:00416A60
.text:00416A60 ; ---------------------------------------------------------------------------
.text:00416A66                 align 10h
.text:00416A70
.text:00416A70 ; =============== S U B R O U T I N E =======================================
.text:00416A70
.text:00416A70 ; Attributes: thunk
.text:00416A70
.text:00416A70 ; __int64 __cdecl lseeki64(int FileHandle, __int64 Offset, int Origin)
.text:00416A70 _lseeki64       proc near               ; CODE XREF: sub_4020F0+2D8↑p
.text:00416A70                                         ; sub_4020F0+30E↑p
.text:00416A70
.text:00416A70 FileHandle      = dword ptr  4
.text:00416A70 Offset          = qword ptr  8
.text:00416A70 Origin          = dword ptr  10h
.text:00416A70
.text:00416A70                 jmp     ds:__imp__lseeki64
.text:00416A70 _lseeki64       endp
.text:00416A70
.text:00416A70 ; ---------------------------------------------------------------------------
.text:00416A76                 align 10h
.text:00416A80
.text:00416A80 ; =============== S U B R O U T I N E =======================================
.text:00416A80
.text:00416A80 ; Attributes: thunk
.text:00416A80
.text:00416A80 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00416A80 _flsbuf         proc near               ; CODE XREF: sub_401EC0+F4↑p
.text:00416A80                                         ; sub_403E50+128↑p ...
.text:00416A80
.text:00416A80 File            = dword ptr  8
.text:00416A80
.text:00416A80                 jmp     ds:__imp__flsbuf
.text:00416A80 _flsbuf         endp
.text:00416A80
.text:00416A80 ; ---------------------------------------------------------------------------
.text:00416A86                 align 10h
.text:00416A90
.text:00416A90 ; =============== S U B R O U T I N E =======================================
.text:00416A90
.text:00416A90 ; Attributes: thunk
.text:00416A90
.text:00416A90 ; size_t __cdecl strlen(const char *Str)
.text:00416A90 strlen          proc near               ; CODE XREF: sub_402D90+2A9↑p
.text:00416A90                                         ; sub_402D90+346↑p ...
.text:00416A90
.text:00416A90 Str             = dword ptr  4
.text:00416A90
.text:00416A90                 jmp     ds:__imp_strlen
.text:00416A90 strlen          endp
.text:00416A90
.text:00416A90 ; ---------------------------------------------------------------------------
.text:00416A96                 align 10h
.text:00416AA0
.text:00416AA0 ; =============== S U B R O U T I N E =======================================
.text:00416AA0
.text:00416AA0 ; Attributes: thunk
.text:00416AA0
.text:00416AA0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00416AA0 strncmp         proc near               ; CODE XREF: sub_402D90+23F↑p
.text:00416AA0                                         ; sub_402D90+699↑p
.text:00416AA0
.text:00416AA0 Str1            = dword ptr  4
.text:00416AA0 Str2            = dword ptr  8
.text:00416AA0 MaxCount        = dword ptr  0Ch
.text:00416AA0
.text:00416AA0                 jmp     ds:__imp_strncmp
.text:00416AA0 strncmp         endp
.text:00416AA0
.text:00416AA0 ; ---------------------------------------------------------------------------
.text:00416AA6                 align 10h
.text:00416AB0
.text:00416AB0 ; =============== S U B R O U T I N E =======================================
.text:00416AB0
.text:00416AB0 ; Attributes: thunk
.text:00416AB0
.text:00416AB0 ; char *__cdecl getenv(const char *VarName)
.text:00416AB0 getenv          proc near               ; CODE XREF: sub_402D90+B57↑p
.text:00416AB0                                         ; sub_406870+3EE↑p ...
.text:00416AB0
.text:00416AB0 VarName         = dword ptr  4
.text:00416AB0
.text:00416AB0                 jmp     ds:__imp_getenv
.text:00416AB0 getenv          endp
.text:00416AB0
.text:00416AB0 ; ---------------------------------------------------------------------------
.text:00416AB6                 align 10h
.text:00416AC0
.text:00416AC0 ; =============== S U B R O U T I N E =======================================
.text:00416AC0
.text:00416AC0 ; Attributes: thunk
.text:00416AC0
.text:00416AC0 ; char *__cdecl strchr(const char *Str, int Val)
.text:00416AC0 strchr          proc near               ; CODE XREF: sub_402D90+469↑p
.text:00416AC0                                         ; sub_402D90+53A↑p ...
.text:00416AC0
.text:00416AC0 Str             = dword ptr  4
.text:00416AC0 Val             = dword ptr  8
.text:00416AC0
.text:00416AC0                 jmp     ds:__imp_strchr
.text:00416AC0 strchr          endp
.text:00416AC0
.text:00416AC0 ; ---------------------------------------------------------------------------
.text:00416AC6                 align 10h
.text:00416AD0
.text:00416AD0 ; =============== S U B R O U T I N E =======================================
.text:00416AD0
.text:00416AD0 ; Attributes: thunk
.text:00416AD0
.text:00416AD0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00416AD0 vfprintf        proc near               ; CODE XREF: sub_403E50+C1↑p
.text:00416AD0                                         ; sub_405AB0+49↑p ...
.text:00416AD0
.text:00416AD0 Stream          = dword ptr  4
.text:00416AD0 Format          = dword ptr  8
.text:00416AD0 ArgList         = dword ptr  0Ch
.text:00416AD0
.text:00416AD0                 jmp     ds:__imp_vfprintf
.text:00416AD0 vfprintf        endp
.text:00416AD0
.text:00416AD0 ; ---------------------------------------------------------------------------
.text:00416AD6                 align 10h
.text:00416AE0
.text:00416AE0 ; =============== S U B R O U T I N E =======================================
.text:00416AE0
.text:00416AE0 ; Attributes: noreturn thunk
.text:00416AE0
.text:00416AE0 ; void __cdecl __noreturn abort()
.text:00416AE0 abort           proc near               ; CODE XREF: sub_403E50:loc_403EEC↑p
.text:00416AE0                                         ; sub_405830:loc_4059EA↑p ...
.text:00416AE0                 jmp     ds:__imp_abort
.text:00416AE0 abort           endp
.text:00416AE0
.text:00416AE0 ; ---------------------------------------------------------------------------
.text:00416AE6                 align 10h
.text:00416AF0
.text:00416AF0 ; =============== S U B R O U T I N E =======================================
.text:00416AF0
.text:00416AF0 ; Attributes: thunk
.text:00416AF0
.text:00416AF0 ; int __cdecl fclose(FILE *Stream)
.text:00416AF0 fclose          proc near               ; CODE XREF: sub_4041D0+27↑p
.text:00416AF0                                         ; .text:0040AECE↑p
.text:00416AF0
.text:00416AF0 Stream          = dword ptr  4
.text:00416AF0
.text:00416AF0                 jmp     ds:__imp_fclose
.text:00416AF0 fclose          endp
.text:00416AF0
.text:00416AF0 ; ---------------------------------------------------------------------------
.text:00416AF6                 align 10h
.text:00416B00
.text:00416B00 ; =============== S U B R O U T I N E =======================================
.text:00416B00
.text:00416B00 ; Attributes: thunk
.text:00416B00
.text:00416B00 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00416B00 memcpy          proc near               ; CODE XREF: .text:00404498↑p
.text:00416B00                                         ; .text:004044E1↑p
.text:00416B00
.text:00416B00 Src             = dword ptr  8
.text:00416B00 Size            = dword ptr  0Ch
.text:00416B00
.text:00416B00                 jmp     ds:__imp_memcpy
.text:00416B00 memcpy          endp
.text:00416B00
.text:00416B00 ; ---------------------------------------------------------------------------
.text:00416B06                 align 10h
.text:00416B10
.text:00416B10 ; =============== S U B R O U T I N E =======================================
.text:00416B10
.text:00416B10 ; Attributes: thunk
.text:00416B10
.text:00416B10 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00416B10 memset          proc near               ; CODE XREF: .text:00404416↑p
.text:00416B10
.text:00416B10 Val             = dword ptr  8
.text:00416B10 Size            = dword ptr  0Ch
.text:00416B10
.text:00416B10                 jmp     ds:__imp_memset
.text:00416B10 memset          endp
.text:00416B10
.text:00416B10 ; ---------------------------------------------------------------------------
.text:00416B16                 align 10h
.text:00416B20
.text:00416B20 ; =============== S U B R O U T I N E =======================================
.text:00416B20
.text:00416B20 ; Attributes: thunk
.text:00416B20
.text:00416B20 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00416B20 calloc          proc near               ; CODE XREF: .text:00404453↑p
.text:00416B20                                         ; sub_408420+AC↑p
.text:00416B20
.text:00416B20 Count           = dword ptr  4
.text:00416B20 Size            = dword ptr  8
.text:00416B20
.text:00416B20                 jmp     ds:__imp_calloc
.text:00416B20 calloc          endp
.text:00416B20
.text:00416B20 ; ---------------------------------------------------------------------------
.text:00416B26                 align 10h
.text:00416B30
.text:00416B30 ; =============== S U B R O U T I N E =======================================
.text:00416B30
.text:00416B30 ; Attributes: thunk
.text:00416B30
.text:00416B30 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00416B30 realloc         proc near               ; CODE XREF: .text:00404350↑p
.text:00416B30                                         ; sub_404380+16↑p ...
.text:00416B30
.text:00416B30 Block           = dword ptr  4
.text:00416B30 Size            = dword ptr  8
.text:00416B30
.text:00416B30                 jmp     ds:__imp_realloc
.text:00416B30 realloc         endp
.text:00416B30
.text:00416B30 ; ---------------------------------------------------------------------------
.text:00416B36                 align 10h
.text:00416B40
.text:00416B40 ; =============== S U B R O U T I N E =======================================
.text:00416B40
.text:00416B40 ; Attributes: thunk
.text:00416B40
.text:00416B40 ; void *__cdecl malloc(size_t Size)
.text:00416B40 malloc          proc near               ; CODE XREF: sub_4042B0+24↑p
.text:00416B40                                         ; sub_4042F0+E↑p ...
.text:00416B40
.text:00416B40 Size            = dword ptr  4
.text:00416B40
.text:00416B40                 jmp     ds:__imp_malloc
.text:00416B40 malloc          endp
.text:00416B40
.text:00416B40 ; ---------------------------------------------------------------------------
.text:00416B46                 align 10h
.text:00416B50
.text:00416B50 ; =============== S U B R O U T I N E =======================================
.text:00416B50
.text:00416B50 ; Attributes: thunk
.text:00416B50
.text:00416B50 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00416B50 strcmp          proc near               ; CODE XREF: sub_405BB4+180↑p
.text:00416B50                                         ; .text:0040A2CB↑p
.text:00416B50
.text:00416B50 Str1            = dword ptr  4
.text:00416B50 Str2            = dword ptr  8
.text:00416B50
.text:00416B50                 jmp     ds:__imp_strcmp
.text:00416B50 strcmp          endp
.text:00416B50
.text:00416B50 ; ---------------------------------------------------------------------------
.text:00416B56                 align 10h
.text:00416B60
.text:00416B60 ; =============== S U B R O U T I N E =======================================
.text:00416B60
.text:00416B60 ; Attributes: thunk
.text:00416B60
.text:00416B60 ; int __cdecl fflush(FILE *Stream)
.text:00416B60 fflush          proc near               ; CODE XREF: sub_405AB0+19↑p
.text:00416B60                                         ; sub_405AB0+81↑p ...
.text:00416B60
.text:00416B60 Stream          = dword ptr  4
.text:00416B60
.text:00416B60                 jmp     ds:__imp_fflush
.text:00416B60 fflush          endp
.text:00416B60
.text:00416B60 ; ---------------------------------------------------------------------------
.text:00416B66                 align 10h
.text:00416B70
.text:00416B70 ; =============== S U B R O U T I N E =======================================
.text:00416B70
.text:00416B70 ; Attributes: thunk
.text:00416B70
.text:00416B70 ; char *__cdecl strerror(int ErrorMessage)
.text:00416B70 strerror        proc near               ; CODE XREF: sub_405AB0+A5↑p
.text:00416B70                                         ; sub_405BB4+10F↑p
.text:00416B70
.text:00416B70 ErrorMessage    = dword ptr  4
.text:00416B70
.text:00416B70                 jmp     ds:__imp_strerror
.text:00416B70 strerror        endp
.text:00416B70
.text:00416B70 ; ---------------------------------------------------------------------------
.text:00416B76                 align 10h
.text:00416B80
.text:00416B80 ; =============== S U B R O U T I N E =======================================
.text:00416B80
.text:00416B80 ; Attributes: thunk
.text:00416B80
.text:00416B80 ; char *__cdecl ctime(const __time32_t *const Time)
.text:00416B80 ctime           proc near               ; CODE XREF: .text:00405F1D↑p
.text:00416B80                                         ; .text:00405F3F↑p ...
.text:00416B80
.text:00416B80 Time            = dword ptr  4
.text:00416B80
.text:00416B80                 jmp     ds:__imp_ctime
.text:00416B80 ctime           endp
.text:00416B80
.text:00416B80 ; ---------------------------------------------------------------------------
.text:00416B86                 align 10h
.text:00416B90
.text:00416B90 ; =============== S U B R O U T I N E =======================================
.text:00416B90
.text:00416B90 ; Attributes: thunk
.text:00416B90
.text:00416B90 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:00416B90 _get_osfhandle  proc near               ; CODE XREF: sub_405FC0+3A↑p
.text:00416B90                                         ; sub_40B250+15↑p
.text:00416B90
.text:00416B90 FileHandle      = dword ptr  4
.text:00416B90
.text:00416B90                 jmp     ds:__imp__get_osfhandle
.text:00416B90 _get_osfhandle  endp
.text:00416B90
.text:00416B90 ; ---------------------------------------------------------------------------
.text:00416B96                 align 10h
.text:00416BA0
.text:00416BA0 ; =============== S U B R O U T I N E =======================================
.text:00416BA0
.text:00416BA0 ; Attributes: thunk
.text:00416BA0
.text:00416BA0 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:00416BA0 strcat          proc near               ; CODE XREF: sub_406220+98↑p
.text:00416BA0                                         ; .text:00409A83↑p ...
.text:00416BA0
.text:00416BA0 Destination     = dword ptr  4
.text:00416BA0 Source          = dword ptr  8
.text:00416BA0
.text:00416BA0                 jmp     ds:__imp_strcat
.text:00416BA0 strcat          endp
.text:00416BA0
.text:00416BA0 ; ---------------------------------------------------------------------------
.text:00416BA6                 align 10h
.text:00416BB0
.text:00416BB0 ; =============== S U B R O U T I N E =======================================
.text:00416BB0
.text:00416BB0 ; Attributes: thunk
.text:00416BB0
.text:00416BB0 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:00416BB0 strcpy          proc near               ; CODE XREF: sub_406220+73↑p
.text:00416BB0                                         ; _win32_longpath+13C↑p ...
.text:00416BB0
.text:00416BB0 Destination     = dword ptr  4
.text:00416BB0 Source          = dword ptr  8
.text:00416BB0
.text:00416BB0                 jmp     ds:__imp_strcpy
.text:00416BB0 strcpy          endp
.text:00416BB0
.text:00416BB0 ; ---------------------------------------------------------------------------
.text:00416BB6                 align 10h
.text:00416BC0
.text:00416BC0 ; =============== S U B R O U T I N E =======================================
.text:00416BC0
.text:00416BC0 ; Attributes: thunk
.text:00416BC0
.text:00416BC0 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:00416BC0 strstr          proc near               ; CODE XREF: sub_406870+3BF↑p
.text:00416BC0                                         ; sub_406870+3DC↑p ...
.text:00416BC0
.text:00416BC0 Str             = dword ptr  4
.text:00416BC0 SubStr          = dword ptr  8
.text:00416BC0
.text:00416BC0                 jmp     ds:__imp_strstr
.text:00416BC0 strstr          endp
.text:00416BC0
.text:00416BC0 ; ---------------------------------------------------------------------------
.text:00416BC6                 align 10h
.text:00416BD0
.text:00416BD0 ; =============== S U B R O U T I N E =======================================
.text:00416BD0
.text:00416BD0 ; Attributes: thunk
.text:00416BD0
.text:00416BD0 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:00416BD0 strrchr         proc near               ; CODE XREF: sub_406870+CB↑p
.text:00416BD0                                         ; sub_406870+3A7↑p ...
.text:00416BD0
.text:00416BD0 Str             = dword ptr  4
.text:00416BD0
.text:00416BD0                 jmp     ds:__imp_strrchr
.text:00416BD0 strrchr         endp
.text:00416BD0
.text:00416BD0 ; ---------------------------------------------------------------------------
.text:00416BD6                 align 10h
.text:00416BE0
.text:00416BE0 ; =============== S U B R O U T I N E =======================================
.text:00416BE0
.text:00416BE0 ; Attributes: thunk
.text:00416BE0
.text:00416BE0 ; int __cdecl isalpha(int C)
.text:00416BE0 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:00416BE0
.text:00416BE0 C               = dword ptr  4
.text:00416BE0
.text:00416BE0                 jmp     ds:__imp_isalpha
.text:00416BE0 isalpha         endp
.text:00416BE0
.text:00416BE0 ; ---------------------------------------------------------------------------
.text:00416BE6                 align 10h
.text:00416BF0
.text:00416BF0 ; =============== S U B R O U T I N E =======================================
.text:00416BF0
.text:00416BF0 ; Attributes: thunk
.text:00416BF0
.text:00416BF0 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:00416BF0 _stricmp_0      proc near               ; CODE XREF: .text:00408294↑p
.text:00416BF0
.text:00416BF0 String1         = dword ptr  4
.text:00416BF0 String2         = dword ptr  8
.text:00416BF0
.text:00416BF0                 jmp     ds:__imp__stricmp_0
.text:00416BF0 _stricmp_0      endp
.text:00416BF0
.text:00416BF0 ; ---------------------------------------------------------------------------
.text:00416BF6                 align 10h
.text:00416C00
.text:00416C00 ; =============== S U B R O U T I N E =======================================
.text:00416C00
.text:00416C00 ; Attributes: thunk
.text:00416C00
.text:00416C00 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:00416C00 strncpy         proc near               ; CODE XREF: sub_408420+BE↑p
.text:00416C00                                         ; .text:00408CCA↑p ...
.text:00416C00
.text:00416C00 Destination     = dword ptr  4
.text:00416C00 Source          = dword ptr  8
.text:00416C00 Count           = dword ptr  0Ch
.text:00416C00
.text:00416C00                 jmp     ds:__imp_strncpy
.text:00416C00 strncpy         endp
.text:00416C00
.text:00416C00 ; ---------------------------------------------------------------------------
.text:00416C06                 align 10h
.text:00416C10
.text:00416C10 ; =============== S U B R O U T I N E =======================================
.text:00416C10
.text:00416C10 ; Attributes: thunk
.text:00416C10
.text:00416C10 ; int __cdecl toupper(int C)
.text:00416C10 toupper         proc near               ; CODE XREF: sub_408420+10E↑p
.text:00416C10
.text:00416C10 C               = dword ptr  4
.text:00416C10
.text:00416C10                 jmp     ds:__imp_toupper
.text:00416C10 toupper         endp
.text:00416C10
.text:00416C10 ; ---------------------------------------------------------------------------
.text:00416C16                 align 10h
.text:00416C20
.text:00416C20 ; =============== S U B R O U T I N E =======================================
.text:00416C20
.text:00416C20 ; Attributes: thunk
.text:00416C20
.text:00416C20 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00416C20 sprintf         proc near               ; CODE XREF: .text:0040998A↑p
.text:00416C20                                         ; .text:004099AB↑p ...
.text:00416C20
.text:00416C20 Buffer          = dword ptr  4
.text:00416C20 Format          = dword ptr  8
.text:00416C20
.text:00416C20                 jmp     ds:__imp_sprintf
.text:00416C20 sprintf         endp
.text:00416C20
.text:00416C20 ; ---------------------------------------------------------------------------
.text:00416C26                 align 10h
.text:00416C30
.text:00416C30 ; =============== S U B R O U T I N E =======================================
.text:00416C30
.text:00416C30 ; Attributes: thunk
.text:00416C30
.text:00416C30 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:00416C30 sscanf          proc near               ; CODE XREF: .text:0040A50E↑p
.text:00416C30
.text:00416C30 Buffer          = dword ptr  4
.text:00416C30 Format          = dword ptr  8
.text:00416C30
.text:00416C30                 jmp     ds:__imp_sscanf
.text:00416C30 sscanf          endp
.text:00416C30
.text:00416C30 ; ---------------------------------------------------------------------------
.text:00416C36                 align 10h
.text:00416C40
.text:00416C40 ; =============== S U B R O U T I N E =======================================
.text:00416C40
.text:00416C40 ; Attributes: thunk
.text:00416C40
.text:00416C40 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:00416C40 strspn          proc near               ; CODE XREF: .text:0040A35A↑p
.text:00416C40                                         ; .text:0040A574↑p ...
.text:00416C40
.text:00416C40 Str             = dword ptr  4
.text:00416C40 Control         = dword ptr  8
.text:00416C40
.text:00416C40                 jmp     ds:__imp_strspn
.text:00416C40 strspn          endp
.text:00416C40
.text:00416C40 ; ---------------------------------------------------------------------------
.text:00416C46                 align 10h
.text:00416C50
.text:00416C50 ; =============== S U B R O U T I N E =======================================
.text:00416C50
.text:00416C50 ; Attributes: thunk
.text:00416C50
.text:00416C50 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00416C50 fopen           proc near               ; CODE XREF: sub_40AE0F+26↑p
.text:00416C50                                         ; sub_40AE0F+99↑p
.text:00416C50
.text:00416C50 FileName        = dword ptr  4
.text:00416C50 Mode            = dword ptr  8
.text:00416C50
.text:00416C50                 jmp     ds:__imp_fopen
.text:00416C50 fopen           endp
.text:00416C50
.text:00416C50 ; ---------------------------------------------------------------------------
.text:00416C56                 align 10h
.text:00416C60
.text:00416C60 ; =============== S U B R O U T I N E =======================================
.text:00416C60
.text:00416C60 ; Attributes: thunk
.text:00416C60
.text:00416C60 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:00416C60 _filelengthi64  proc near               ; CODE XREF: sub_40B250+1F↑p
.text:00416C60
.text:00416C60 FileHandle      = dword ptr  4
.text:00416C60
.text:00416C60                 jmp     ds:__imp__filelengthi64
.text:00416C60 _filelengthi64  endp
.text:00416C60
.text:00416C60 ; ---------------------------------------------------------------------------
.text:00416C66                 align 10h
.text:00416C70
.text:00416C70 ; =============== S U B R O U T I N E =======================================
.text:00416C70
.text:00416C70 ; Attributes: thunk
.text:00416C70
.text:00416C70 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:00416C70 strpbrk         proc near               ; CODE XREF: sub_40B2B0+87↑p
.text:00416C70
.text:00416C70 Str             = dword ptr  4
.text:00416C70 Control         = dword ptr  8
.text:00416C70
.text:00416C70                 jmp     ds:__imp_strpbrk
.text:00416C70 strpbrk         endp
.text:00416C70
.text:00416C70 ; ---------------------------------------------------------------------------
.text:00416C76                 align 10h
.text:00416C80
.text:00416C80 ; =============== S U B R O U T I N E =======================================
.text:00416C80
.text:00416C80 ; Attributes: thunk
.text:00416C80
.text:00416C80 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:00416C80 _fdopen         proc near               ; CODE XREF: sub_40B350+69↑p
.text:00416C80
.text:00416C80 FileHandle      = dword ptr  4
.text:00416C80 Format          = dword ptr  8
.text:00416C80
.text:00416C80                 jmp     ds:__imp__fdopen
.text:00416C80 _fdopen         endp
.text:00416C80
.text:00416C80 ; ---------------------------------------------------------------------------
.text:00416C86                 align 10h
.text:00416C90
.text:00416C90 ; =============== S U B R O U T I N E =======================================
.text:00416C90
.text:00416C90 ; Attributes: thunk
.text:00416C90
.text:00416C90 ; int __cdecl close_0(int FileHandle)
.text:00416C90 _close_0        proc near               ; CODE XREF: sub_40B350+90↑p
.text:00416C90
.text:00416C90 FileHandle      = dword ptr  4
.text:00416C90
.text:00416C90                 jmp     ds:__imp__close_0
.text:00416C90 _close_0        endp
.text:00416C90
.text:00416C90 ; ---------------------------------------------------------------------------
.text:00416C96                 align 10h
.text:00416CA0
.text:00416CA0 ; =============== S U B R O U T I N E =======================================
.text:00416CA0
.text:00416CA0 ; Attributes: thunk
.text:00416CA0
.text:00416CA0 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:00416CA0 _open_0         proc near               ; CODE XREF: sub_414960:loc_414CF0↑p
.text:00416CA0
.text:00416CA0 FileName        = dword ptr  4
.text:00416CA0 OpenFlag        = dword ptr  8
.text:00416CA0
.text:00416CA0                 jmp     ds:__imp__open_0
.text:00416CA0 _open_0         endp
.text:00416CA0
.text:00416CA0 ; ---------------------------------------------------------------------------
.text:00416CA6                 align 10h
.text:00416CB0
.text:00416CB0 ; =============== S U B R O U T I N E =======================================
.text:00416CB0
.text:00416CB0 ; Attributes: noreturn thunk
.text:00416CB0
.text:00416CB0 _assert         proc near               ; CODE XREF: sub_414960+414↑p
.text:00416CB0                 jmp     ds:__imp__assert
.text:00416CB0 _assert         endp
.text:00416CB0
.text:00416CB0 ; ---------------------------------------------------------------------------
.text:00416CB6                 align 10h
.text:00416CC0
.text:00416CC0 ; =============== S U B R O U T I N E =======================================
.text:00416CC0
.text:00416CC0 ; Attributes: thunk
.text:00416CC0
.text:00416CC0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00416CC0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00416CC0
.text:00416CC0 lpTopLevelExceptionFilter= dword ptr  4
.text:00416CC0
.text:00416CC0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00416CC0 SetUnhandledExceptionFilter endp
.text:00416CC0
.text:00416CC0 ; ---------------------------------------------------------------------------
.text:00416CC6                 align 10h
.text:00416CD0
.text:00416CD0 ; =============== S U B R O U T I N E =======================================
.text:00416CD0
.text:00416CD0 ; Attributes: noreturn thunk
.text:00416CD0
.text:00416CD0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00416CD0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00416CD0
.text:00416CD0 uExitCode       = dword ptr  4
.text:00416CD0
.text:00416CD0                 jmp     ds:__imp_ExitProcess
.text:00416CD0 ExitProcess     endp
.text:00416CD0
.text:00416CD0 ; ---------------------------------------------------------------------------
.text:00416CD6                 align 10h
.text:00416CE0
.text:00416CE0 ; =============== S U B R O U T I N E =======================================
.text:00416CE0
.text:00416CE0 ; Attributes: thunk
.text:00416CE0
.text:00416CE0 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:00416CE0 GetModuleHandleA proc near              ; CODE XREF: sub_4060B0+18↑p
.text:00416CE0                                         ; sub_406870+329↑p ...
.text:00416CE0
.text:00416CE0 lpModuleName    = dword ptr  4
.text:00416CE0
.text:00416CE0                 jmp     ds:__imp_GetModuleHandleA
.text:00416CE0 GetModuleHandleA endp
.text:00416CE0
.text:00416CE0 ; ---------------------------------------------------------------------------
.text:00416CE6                 align 10h
.text:00416CF0
.text:00416CF0 ; =============== S U B R O U T I N E =======================================
.text:00416CF0
.text:00416CF0 ; Attributes: thunk
.text:00416CF0
.text:00416CF0 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:00416CF0 GetProcAddress  proc near               ; CODE XREF: sub_4060B0+33↑p
.text:00416CF0                                         ; sub_406220+2E↑p ...
.text:00416CF0
.text:00416CF0 hModule         = dword ptr  4
.text:00416CF0 lpProcName      = dword ptr  8
.text:00416CF0
.text:00416CF0                 jmp     ds:__imp_GetProcAddress
.text:00416CF0 GetProcAddress  endp
.text:00416CF0
.text:00416CF0 ; ---------------------------------------------------------------------------
.text:00416CF6                 align 10h
.text:00416D00
.text:00416D00 ; =============== S U B R O U T I N E =======================================
.text:00416D00
.text:00416D00 ; Attributes: thunk
.text:00416D00
.text:00416D00 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:00416D00 GetFileAttributesA proc near            ; CODE XREF: sub_4060B0+47↑p
.text:00416D00                                         ; sub_409690+62↑p
.text:00416D00
.text:00416D00 lpFileName      = dword ptr  4
.text:00416D00
.text:00416D00                 jmp     ds:__imp_GetFileAttributesA
.text:00416D00 GetFileAttributesA endp
.text:00416D00
.text:00416D00 ; ---------------------------------------------------------------------------
.text:00416D06                 align 10h
.text:00416D10
.text:00416D10 ; =============== S U B R O U T I N E =======================================
.text:00416D10
.text:00416D10 ; Attributes: thunk
.text:00416D10
.text:00416D10 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:00416D10 FreeLibrary     proc near               ; CODE XREF: sub_4060B0+A4↑p
.text:00416D10                                         ; sub_406220+11D↑p ...
.text:00416D10
.text:00416D10 hLibModule      = dword ptr  4
.text:00416D10
.text:00416D10                 jmp     ds:__imp_FreeLibrary
.text:00416D10 FreeLibrary     endp
.text:00416D10
.text:00416D10 ; ---------------------------------------------------------------------------
.text:00416D16                 align 10h
.text:00416D20
.text:00416D20 ; =============== S U B R O U T I N E =======================================
.text:00416D20
.text:00416D20 ; Attributes: thunk
.text:00416D20
.text:00416D20 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:00416D20 FindFirstFileA  proc near               ; CODE XREF: sub_4060B0+CE↑p
.text:00416D20                                         ; sub_406220+14F↑p ...
.text:00416D20
.text:00416D20 lpFileName      = dword ptr  4
.text:00416D20 lpFindFileData  = dword ptr  8
.text:00416D20
.text:00416D20                 jmp     ds:__imp_FindFirstFileA
.text:00416D20 FindFirstFileA  endp
.text:00416D20
.text:00416D20 ; ---------------------------------------------------------------------------
.text:00416D26                 align 10h
.text:00416D30
.text:00416D30 ; =============== S U B R O U T I N E =======================================
.text:00416D30
.text:00416D30 ; Attributes: thunk
.text:00416D30
.text:00416D30 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:00416D30 FindClose       proc near               ; CODE XREF: sub_4060B0+123↑p
.text:00416D30                                         ; sub_406220+10E↑p ...
.text:00416D30
.text:00416D30 hFindFile       = dword ptr  4
.text:00416D30
.text:00416D30                 jmp     ds:__imp_FindClose
.text:00416D30 FindClose       endp
.text:00416D30
.text:00416D30 ; ---------------------------------------------------------------------------
.text:00416D36                 align 10h
.text:00416D40
.text:00416D40 ; =============== S U B R O U T I N E =======================================
.text:00416D40
.text:00416D40 ; Attributes: thunk
.text:00416D40
.text:00416D40 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:00416D40 LoadLibraryA    proc near               ; CODE XREF: sub_406220+13↑p
.text:00416D40                                         ; sub_406870+134↑p ...
.text:00416D40
.text:00416D40 lpLibFileName   = dword ptr  4
.text:00416D40
.text:00416D40                 jmp     ds:__imp_LoadLibraryA
.text:00416D40 LoadLibraryA    endp
.text:00416D40
.text:00416D40 ; ---------------------------------------------------------------------------
.text:00416D46                 align 10h
.text:00416D50
.text:00416D50 ; =============== S U B R O U T I N E =======================================
.text:00416D50
.text:00416D50 ; Attributes: thunk
.text:00416D50
.text:00416D50 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:00416D50 FindNextFileA   proc near               ; CODE XREF: sub_406220+FF↑p
.text:00416D50
.text:00416D50 hFindFile       = dword ptr  4
.text:00416D50 lpFindFileData  = dword ptr  8
.text:00416D50
.text:00416D50                 jmp     ds:__imp_FindNextFileA
.text:00416D50 FindNextFileA   endp
.text:00416D50
.text:00416D50 ; ---------------------------------------------------------------------------
.text:00416D56                 align 10h
.text:00416D60
.text:00416D60 ; =============== S U B R O U T I N E =======================================
.text:00416D60
.text:00416D60 ; Attributes: thunk
.text:00416D60
.text:00416D60 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:00416D60 GetFileType     proc near               ; CODE XREF: sub_4063A0+43↑p
.text:00416D60                                         ; .text:0040705A↑p
.text:00416D60
.text:00416D60 hFile           = dword ptr  4
.text:00416D60
.text:00416D60                 jmp     ds:__imp_GetFileType
.text:00416D60 GetFileType     endp
.text:00416D60
.text:00416D60 ; ---------------------------------------------------------------------------
.text:00416D66                 align 10h
.text:00416D70
.text:00416D70 ; =============== S U B R O U T I N E =======================================
.text:00416D70
.text:00416D70 ; Attributes: thunk
.text:00416D70
.text:00416D70 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:00416D70 GetFileInformationByHandle proc near    ; CODE XREF: sub_4063A0+69↑p
.text:00416D70
.text:00416D70 hFile           = dword ptr  4
.text:00416D70 lpFileInformation= dword ptr  8
.text:00416D70
.text:00416D70                 jmp     ds:__imp_GetFileInformationByHandle
.text:00416D70 GetFileInformationByHandle endp
.text:00416D70
.text:00416D70 ; ---------------------------------------------------------------------------
.text:00416D76                 align 10h
.text:00416D80
.text:00416D80 ; =============== S U B R O U T I N E =======================================
.text:00416D80
.text:00416D80 ; Attributes: thunk
.text:00416D80
.text:00416D80 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:00416D80 GetFileSize     proc near               ; CODE XREF: sub_4063A0+3F2↑p
.text:00416D80
.text:00416D80 hFile           = dword ptr  4
.text:00416D80 lpFileSizeHigh  = dword ptr  8
.text:00416D80
.text:00416D80                 jmp     ds:__imp_GetFileSize
.text:00416D80 GetFileSize     endp
.text:00416D80
.text:00416D80 ; ---------------------------------------------------------------------------
.text:00416D86                 align 10h
.text:00416D90
.text:00416D90 ; =============== S U B R O U T I N E =======================================
.text:00416D90
.text:00416D90 ; Attributes: thunk
.text:00416D90
.text:00416D90 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:00416D90 PeekNamedPipe   proc near               ; CODE XREF: sub_4063A0+439↑p
.text:00416D90
.text:00416D90 hNamedPipe      = dword ptr  4
.text:00416D90 lpBuffer        = dword ptr  8
.text:00416D90 nBufferSize     = dword ptr  0Ch
.text:00416D90 lpBytesRead     = dword ptr  10h
.text:00416D90 lpTotalBytesAvail= dword ptr  14h
.text:00416D90 lpBytesLeftThisMessage= dword ptr  18h
.text:00416D90
.text:00416D90                 jmp     ds:__imp_PeekNamedPipe
.text:00416D90 PeekNamedPipe   endp
.text:00416D90
.text:00416D90 ; ---------------------------------------------------------------------------
.text:00416D96                 align 10h
.text:00416DA0
.text:00416DA0 ; =============== S U B R O U T I N E =======================================
.text:00416DA0
.text:00416DA0 ; Attributes: thunk
.text:00416DA0
.text:00416DA0 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:00416DA0 GetDriveTypeA   proc near               ; CODE XREF: sub_406870+4C↑p
.text:00416DA0
.text:00416DA0 lpRootPathName  = dword ptr  4
.text:00416DA0
.text:00416DA0                 jmp     ds:__imp_GetDriveTypeA
.text:00416DA0 GetDriveTypeA   endp
.text:00416DA0
.text:00416DA0 ; ---------------------------------------------------------------------------
.text:00416DA6                 align 10h
.text:00416DB0
.text:00416DB0 ; =============== S U B R O U T I N E =======================================
.text:00416DB0
.text:00416DB0 ; Attributes: thunk
.text:00416DB0
.text:00416DB0 ; DWORD __stdcall GetLastError()
.text:00416DB0 GetLastError    proc near               ; CODE XREF: sub_406870:loc_406AF9↑p
.text:00416DB0                                         ; .text:loc_40763D↑p ...
.text:00416DB0                 jmp     ds:__imp_GetLastError
.text:00416DB0 GetLastError    endp
.text:00416DB0
.text:00416DB0 ; ---------------------------------------------------------------------------
.text:00416DB6                 align 10h
.text:00416DC0
.text:00416DC0 ; =============== S U B R O U T I N E =======================================
.text:00416DC0
.text:00416DC0 ; Attributes: thunk
.text:00416DC0
.text:00416DC0 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:00416DC0 GetVolumeInformationA proc near         ; CODE XREF: sub_406D70+64↑p
.text:00416DC0                                         ; .text:0040731C↑p ...
.text:00416DC0
.text:00416DC0 lpRootPathName  = dword ptr  4
.text:00416DC0 lpVolumeNameBuffer= dword ptr  8
.text:00416DC0 nVolumeNameSize = dword ptr  0Ch
.text:00416DC0 lpVolumeSerialNumber= dword ptr  10h
.text:00416DC0 lpMaximumComponentLength= dword ptr  14h
.text:00416DC0 lpFileSystemFlags= dword ptr  18h
.text:00416DC0 lpFileSystemNameBuffer= dword ptr  1Ch
.text:00416DC0 nFileSystemNameSize= dword ptr  20h
.text:00416DC0
.text:00416DC0                 jmp     ds:__imp_GetVolumeInformationA
.text:00416DC0 GetVolumeInformationA endp
.text:00416DC0
.text:00416DC0 ; ---------------------------------------------------------------------------
.text:00416DC6                 align 10h
.text:00416DD0
.text:00416DD0 ; =============== S U B R O U T I N E =======================================
.text:00416DD0
.text:00416DD0 ; Attributes: thunk
.text:00416DD0
.text:00416DD0 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:00416DD0 CreateFileA     proc near               ; CODE XREF: sub_40B1F0-36EA↑p
.text:00416DD0                                         ; .text:00408A43↑p ...
.text:00416DD0
.text:00416DD0 lpFileName      = dword ptr  4
.text:00416DD0 dwDesiredAccess = dword ptr  8
.text:00416DD0 dwShareMode     = dword ptr  0Ch
.text:00416DD0 lpSecurityAttributes= dword ptr  10h
.text:00416DD0 dwCreationDisposition= dword ptr  14h
.text:00416DD0 dwFlagsAndAttributes= dword ptr  18h
.text:00416DD0 hTemplateFile   = dword ptr  1Ch
.text:00416DD0
.text:00416DD0                 jmp     ds:__imp_CreateFileA
.text:00416DD0 CreateFileA     endp
.text:00416DD0
.text:00416DD0 ; ---------------------------------------------------------------------------
.text:00416DD6                 align 10h
.text:00416DE0
.text:00416DE0 ; =============== S U B R O U T I N E =======================================
.text:00416DE0
.text:00416DE0 ; Attributes: thunk
.text:00416DE0
.text:00416DE0 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:00416DE0 CloseHandle     proc near               ; CODE XREF: sub_40B1F0-36CF↑p
.text:00416DE0                                         ; .text:00408AB9↑p ...
.text:00416DE0
.text:00416DE0 hObject         = dword ptr  4
.text:00416DE0
.text:00416DE0                 jmp     ds:__imp_CloseHandle
.text:00416DE0 CloseHandle     endp
.text:00416DE0
.text:00416DE0 ; ---------------------------------------------------------------------------
.text:00416DE6                 align 10h
.text:00416DF0
.text:00416DF0 ; =============== S U B R O U T I N E =======================================
.text:00416DF0
.text:00416DF0 ; Attributes: thunk
.text:00416DF0
.text:00416DF0 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:00416DF0 SetErrorMode    proc near               ; CODE XREF: sub_40B1F0-369A↑p
.text:00416DF0                                         ; sub_409690+57↑p ...
.text:00416DF0
.text:00416DF0 uMode           = dword ptr  4
.text:00416DF0
.text:00416DF0                 jmp     ds:__imp_SetErrorMode
.text:00416DF0 SetErrorMode    endp
.text:00416DF0
.text:00416DF0 ; ---------------------------------------------------------------------------
.text:00416DF6                 align 10h
.text:00416E00
.text:00416E00 ; =============== S U B R O U T I N E =======================================
.text:00416E00
.text:00416E00 ; Attributes: thunk
.text:00416E00
.text:00416E00 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00416E00 GetModuleFileNameA proc near            ; CODE XREF: sub_408110+1C↑p
.text:00416E00
.text:00416E00 hModule         = dword ptr  4
.text:00416E00 lpFilename      = dword ptr  8
.text:00416E00 nSize           = dword ptr  0Ch
.text:00416E00
.text:00416E00                 jmp     ds:__imp_GetModuleFileNameA
.text:00416E00 GetModuleFileNameA endp
.text:00416E00
.text:00416E00 ; ---------------------------------------------------------------------------
.text:00416E06                 align 10h
.text:00416E10
.text:00416E10 ; =============== S U B R O U T I N E =======================================
.text:00416E10
.text:00416E10 ; Attributes: thunk
.text:00416E10
.text:00416E10 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:00416E10 GetShortPathNameA proc near             ; CODE XREF: .text:00408396↑p
.text:00416E10                                         ; .text:004083C0↑p
.text:00416E10
.text:00416E10 lpszLongPath    = dword ptr  4
.text:00416E10 lpszShortPath   = dword ptr  8
.text:00416E10 cchBuffer       = dword ptr  0Ch
.text:00416E10
.text:00416E10                 jmp     ds:__imp_GetShortPathNameA
.text:00416E10 GetShortPathNameA endp
.text:00416E10
.text:00416E10 ; ---------------------------------------------------------------------------
.text:00416E16                 align 10h
.text:00416E20
.text:00416E20 ; =============== S U B R O U T I N E =======================================
.text:00416E20
.text:00416E20 ; Attributes: thunk
.text:00416E20
.text:00416E20 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00416E20 GetCurrentDirectoryA proc near          ; CODE XREF: .text:004086C8↑p
.text:00416E20                                         ; .text:004086E4↑p ...
.text:00416E20
.text:00416E20 nBufferLength   = dword ptr  4
.text:00416E20 lpBuffer        = dword ptr  8
.text:00416E20
.text:00416E20                 jmp     ds:__imp_GetCurrentDirectoryA
.text:00416E20 GetCurrentDirectoryA endp
.text:00416E20
.text:00416E20 ; ---------------------------------------------------------------------------
.text:00416E26                 align 10h
.text:00416E30
.text:00416E30 ; =============== S U B R O U T I N E =======================================
.text:00416E30
.text:00416E30 ; Attributes: thunk
.text:00416E30
.text:00416E30 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:00416E30 DeviceIoControl proc near               ; CODE XREF: .text:00408AAC↑p
.text:00416E30                                         ; sub_408E70+1E5↑p
.text:00416E30
.text:00416E30 hDevice         = dword ptr  4
.text:00416E30 dwIoControlCode = dword ptr  8
.text:00416E30 lpInBuffer      = dword ptr  0Ch
.text:00416E30 nInBufferSize   = dword ptr  10h
.text:00416E30 lpOutBuffer     = dword ptr  14h
.text:00416E30 nOutBufferSize  = dword ptr  18h
.text:00416E30 lpBytesReturned = dword ptr  1Ch
.text:00416E30 lpOverlapped    = dword ptr  20h
.text:00416E30
.text:00416E30                 jmp     ds:__imp_DeviceIoControl
.text:00416E30 DeviceIoControl endp
.text:00416E30
.text:00416E30 ; ---------------------------------------------------------------------------
.text:00416E36                 align 10h
.text:00416E40
.text:00416E40 ; =============== S U B R O U T I N E =======================================
.text:00416E40
.text:00416E40 ; Attributes: thunk
.text:00416E40
.text:00416E40 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:00416E40 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:00408E03↑p
.text:00416E40                                         ; sub_408E70+7B↑p ...
.text:00416E40
.text:00416E40 lpRootPathName  = dword ptr  4
.text:00416E40 lpSectorsPerCluster= dword ptr  8
.text:00416E40 lpBytesPerSector= dword ptr  0Ch
.text:00416E40 lpNumberOfFreeClusters= dword ptr  10h
.text:00416E40 lpTotalNumberOfClusters= dword ptr  14h
.text:00416E40
.text:00416E40                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:00416E40 GetDiskFreeSpaceA endp
.text:00416E40
.text:00416E40 ; ---------------------------------------------------------------------------
.text:00416E46                 align 10h
.text:00416E50
.text:00416E50 ; =============== S U B R O U T I N E =======================================
.text:00416E50
.text:00416E50 ; Attributes: thunk
.text:00416E50
.text:00416E50 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:00416E50 GetFullPathNameA proc near              ; CODE XREF: sub_409560+45↑p
.text:00416E50                                         ; sub_409560+ED↑p
.text:00416E50
.text:00416E50 lpFileName      = dword ptr  4
.text:00416E50 nBufferLength   = dword ptr  8
.text:00416E50 lpBuffer        = dword ptr  0Ch
.text:00416E50 lpFilePart      = dword ptr  10h
.text:00416E50
.text:00416E50                 jmp     ds:__imp_GetFullPathNameA
.text:00416E50 GetFullPathNameA endp
.text:00416E50
.text:00416E50 ; ---------------------------------------------------------------------------
.text:00416E56                 align 10h
.text:00416E60
.text:00416E60 ; =============== S U B R O U T I N E =======================================
.text:00416E60
.text:00416E60 ; Attributes: thunk
.text:00416E60
.text:00416E60 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:00416E60 lstrcmpiA       proc near               ; CODE XREF: .text:00409C1B↑p
.text:00416E60                                         ; .text:00409C32↑p ...
.text:00416E60
.text:00416E60 lpString1       = dword ptr  4
.text:00416E60 lpString2       = dword ptr  8
.text:00416E60
.text:00416E60                 jmp     ds:__imp_lstrcmpiA
.text:00416E60 lstrcmpiA       endp
.text:00416E60
.text:00416E60 ; ---------------------------------------------------------------------------
.text:00416E66                 align 10h
.text:00416E70
.text:00416E70 ; =============== S U B R O U T I N E =======================================
.text:00416E70
.text:00416E70 ; Attributes: thunk
.text:00416E70
.text:00416E70 ; DWORD __stdcall GetVersion()
.text:00416E70 GetVersion      proc near               ; CODE XREF: .text:00409FA3↑p
.text:00416E70                 jmp     ds:__imp_GetVersion
.text:00416E70 GetVersion      endp
.text:00416E70
.text:00416E70 ; ---------------------------------------------------------------------------
.text:00416E76                 align 10h
.text:00416E80
.text:00416E80 ; =============== S U B R O U T I N E =======================================
.text:00416E80
.text:00416E80 ; Attributes: thunk
.text:00416E80
.text:00416E80 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:00416E80 GetVersionExA   proc near               ; CODE XREF: sub_40A030+32↑p
.text:00416E80                                         ; sub_40A030+20B↑p
.text:00416E80
.text:00416E80 lpVersionInformation= dword ptr  4
.text:00416E80
.text:00416E80                 jmp     ds:__imp_GetVersionExA
.text:00416E80 GetVersionExA   endp
.text:00416E80
.text:00416E80 ; ---------------------------------------------------------------------------
.text:00416E86                 align 10h
.text:00416E90
.text:00416E90 ; =============== S U B R O U T I N E =======================================
.text:00416E90
.text:00416E90 ; Attributes: thunk
.text:00416E90
.text:00416E90 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00416E90 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040A6CF↑p
.text:00416E90                                         ; .text:0040A6FE↑p ...
.text:00416E90
.text:00416E90 nBufferLength   = dword ptr  4
.text:00416E90 lpBuffer        = dword ptr  8
.text:00416E90
.text:00416E90                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:00416E90 GetLogicalDriveStringsA endp
.text:00416E90
.text:00416E90 ; ---------------------------------------------------------------------------
.text:00416E96                 align 10h
.text:00416EA0
.text:00416EA0 ; =============== S U B R O U T I N E =======================================
.text:00416EA0
.text:00416EA0 ; Attributes: thunk
.text:00416EA0
.text:00416EA0 ; HANDLE __stdcall GetProcessHeap()
.text:00416EA0 GetProcessHeap  proc near               ; CODE XREF: .text:0040A6D9↑p
.text:00416EA0                                         ; sub_40ADB0+24↑p ...
.text:00416EA0                 jmp     ds:__imp_GetProcessHeap
.text:00416EA0 GetProcessHeap  endp
.text:00416EA0
.text:00416EA0 ; ---------------------------------------------------------------------------
.text:00416EA6                 align 10h
.text:00416EB0
.text:00416EB0 ; =============== S U B R O U T I N E =======================================
.text:00416EB0
.text:00416EB0 ; Attributes: thunk
.text:00416EB0
.text:00416EB0 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:00416EB0 HeapAlloc       proc near               ; CODE XREF: .text:0040A6ED↑p
.text:00416EB0                                         ; sub_40ADB0+38↑p ...
.text:00416EB0
.text:00416EB0 hHeap           = dword ptr  4
.text:00416EB0 dwFlags         = dword ptr  8
.text:00416EB0 dwBytes         = dword ptr  0Ch
.text:00416EB0
.text:00416EB0                 jmp     ds:__imp_HeapAlloc
.text:00416EB0 HeapAlloc       endp
.text:00416EB0
.text:00416EB0 ; ---------------------------------------------------------------------------
.text:00416EB6                 align 10h
.text:00416EC0
.text:00416EC0 ; =============== S U B R O U T I N E =======================================
.text:00416EC0
.text:00416EC0 ; Attributes: thunk
.text:00416EC0
.text:00416EC0 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:00416EC0 HeapFree        proc near               ; CODE XREF: .text:0040AEED↑p
.text:00416EC0
.text:00416EC0 hHeap           = dword ptr  4
.text:00416EC0 dwFlags         = dword ptr  8
.text:00416EC0 lpMem           = dword ptr  0Ch
.text:00416EC0
.text:00416EC0                 jmp     ds:__imp_HeapFree
.text:00416EC0 HeapFree        endp
.text:00416EC0
.text:00416EC0 ; ---------------------------------------------------------------------------
.text:00416EC6                 align 10h
.text:00416ED0
.text:00416ED0 ; =============== S U B R O U T I N E =======================================
.text:00416ED0
.text:00416ED0 ; Attributes: thunk
.text:00416ED0
.text:00416ED0 ; BOOL __stdcall AreFileApisANSI()
.text:00416ED0 AreFileApisANSI proc near               ; CODE XREF: sub_40AF90+89↑p
.text:00416ED0                 jmp     ds:__imp_AreFileApisANSI
.text:00416ED0 AreFileApisANSI endp
.text:00416ED0
.text:00416ED0 ; ---------------------------------------------------------------------------
.text:00416ED6                 align 10h
.text:00416EE0
.text:00416EE0 ; =============== S U B R O U T I N E =======================================
.text:00416EE0
.text:00416EE0 ; Attributes: thunk
.text:00416EE0
.text:00416EE0 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:00416EE0 MultiByteToWideChar proc near           ; CODE XREF: sub_40AF90+BD↑p
.text:00416EE0
.text:00416EE0 CodePage        = dword ptr  4
.text:00416EE0 dwFlags         = dword ptr  8
.text:00416EE0 lpMultiByteStr  = dword ptr  0Ch
.text:00416EE0 cbMultiByte     = dword ptr  10h
.text:00416EE0 lpWideCharStr   = dword ptr  14h
.text:00416EE0 cchWideChar     = dword ptr  18h
.text:00416EE0
.text:00416EE0                 jmp     ds:__imp_MultiByteToWideChar
.text:00416EE0 MultiByteToWideChar endp
.text:00416EE0
.text:00416EE0 ; ---------------------------------------------------------------------------
.text:00416EE6                 align 10h
.text:00416EF0
.text:00416EF0 ; =============== S U B R O U T I N E =======================================
.text:00416EF0
.text:00416EF0 ; Attributes: thunk
.text:00416EF0
.text:00416EF0 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:00416EF0 lstrcpyA        proc near               ; CODE XREF: sub_40AF90+128↑p
.text:00416EF0
.text:00416EF0 lpString1       = dword ptr  4
.text:00416EF0 lpString2       = dword ptr  8
.text:00416EF0
.text:00416EF0                 jmp     ds:__imp_lstrcpyA
.text:00416EF0 lstrcpyA        endp
.text:00416EF0
.text:00416EF0 ; ---------------------------------------------------------------------------
.text:00416EF6                 align 10h
.text:00416F00
.text:00416F00 ; =============== S U B R O U T I N E =======================================
.text:00416F00
.text:00416F00 ; Attributes: thunk
.text:00416F00
.text:00416F00 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00416F00 UnlockFile      proc near               ; CODE XREF: sub_40B250+40↑p
.text:00416F00
.text:00416F00 hFile           = dword ptr  4
.text:00416F00 dwFileOffsetLow = dword ptr  8
.text:00416F00 dwFileOffsetHigh= dword ptr  0Ch
.text:00416F00 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00416F00 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00416F00
.text:00416F00                 jmp     ds:__imp_UnlockFile
.text:00416F00 UnlockFile      endp
.text:00416F00
.text:00416F00 ; ---------------------------------------------------------------------------
.text:00416F06                 align 10h
.text:00416F10
.text:00416F10 ; =============== S U B R O U T I N E =======================================
.text:00416F10
.text:00416F10 ; Attributes: thunk
.text:00416F10
.text:00416F10 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:00416F10 CreateDirectoryA proc near              ; CODE XREF: sub_414D90+22↑p
.text:00416F10
.text:00416F10 lpPathName      = dword ptr  4
.text:00416F10 lpSecurityAttributes= dword ptr  8
.text:00416F10
.text:00416F10                 jmp     ds:__imp_CreateDirectoryA
.text:00416F10 CreateDirectoryA endp
.text:00416F10
.text:00416F10 ; ---------------------------------------------------------------------------
.text:00416F16                 align 10h
.text:00416F20
.text:00416F20 ; =============== S U B R O U T I N E =======================================
.text:00416F20
.text:00416F20 ; Attributes: thunk
.text:00416F20
.text:00416F20 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:00416F20 GetTimeZoneInformation proc near        ; CODE XREF: sub_414E90+22↑p
.text:00416F20
.text:00416F20 lpTimeZoneInformation= dword ptr  4
.text:00416F20
.text:00416F20                 jmp     ds:__imp_GetTimeZoneInformation
.text:00416F20 GetTimeZoneInformation endp
.text:00416F20
.text:00416F20 ; ---------------------------------------------------------------------------
.text:00416F26                 align 10h
.text:00416F30
.text:00416F30 ; =============== S U B R O U T I N E =======================================
.text:00416F30
.text:00416F30 ; Attributes: thunk
.text:00416F30
.text:00416F30 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:00416F30 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_414E90+4F↑p
.text:00416F30
.text:00416F30 lpSystemTimeAsFileTime= dword ptr  4
.text:00416F30
.text:00416F30                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:00416F30 GetSystemTimeAsFileTime endp
.text:00416F30
.text:00416F30 ; ---------------------------------------------------------------------------
.text:00416F36                 align 10h
.text:00416F40
.text:00416F40 ; =============== S U B R O U T I N E =======================================
.text:00416F40
.text:00416F40 ; Attributes: thunk
.text:00416F40
.text:00416F40 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:00416F40 RegOpenKeyExA   proc near               ; CODE XREF: .text:00409BA1↑p
.text:00416F40
.text:00416F40 hKey            = dword ptr  4
.text:00416F40 lpSubKey        = dword ptr  8
.text:00416F40 ulOptions       = dword ptr  0Ch
.text:00416F40 samDesired      = dword ptr  10h
.text:00416F40 phkResult       = dword ptr  14h
.text:00416F40
.text:00416F40                 jmp     ds:__imp_RegOpenKeyExA
.text:00416F40 RegOpenKeyExA   endp
.text:00416F40
.text:00416F40 ; ---------------------------------------------------------------------------
.text:00416F46                 align 10h
.text:00416F50
.text:00416F50 ; =============== S U B R O U T I N E =======================================
.text:00416F50
.text:00416F50 ; Attributes: thunk
.text:00416F50
.text:00416F50 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:00416F50 RegQueryValueExA proc near              ; CODE XREF: .text:00409BE4↑p
.text:00416F50
.text:00416F50 hKey            = dword ptr  4
.text:00416F50 lpValueName     = dword ptr  8
.text:00416F50 lpReserved      = dword ptr  0Ch
.text:00416F50 lpType          = dword ptr  10h
.text:00416F50 lpData          = dword ptr  14h
.text:00416F50 lpcbData        = dword ptr  18h
.text:00416F50
.text:00416F50                 jmp     ds:__imp_RegQueryValueExA
.text:00416F50 RegQueryValueExA endp
.text:00416F50
.text:00416F50 ; ---------------------------------------------------------------------------
.text:00416F56                 align 10h
.text:00416F60
.text:00416F60 ; =============== S U B R O U T I N E =======================================
.text:00416F60
.text:00416F60 ; Attributes: thunk
.text:00416F60
.text:00416F60 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:00416F60 RegCloseKey     proc near               ; CODE XREF: .text:00409C08↑p
.text:00416F60
.text:00416F60 hKey            = dword ptr  4
.text:00416F60
.text:00416F60                 jmp     ds:__imp_RegCloseKey
.text:00416F60 RegCloseKey     endp
.text:00416F60
.text:00416F60 ; ---------------------------------------------------------------------------
.text:00416F66                 db 2 dup(90h)
.text:00416F68                 dd 2 dup(0)
.text:00416F70                 dd 21400h, 0
.text:00416F78                 dd 0C0h, 46000000h
.text:00416F80 ; const IID rclsid
.text:00416F80 rclsid          dd 21401h               ; Data1
.text:00416F80                                         ; DATA XREF: sub_40AF90+4B↑o
.text:00416F80                 dw 0                    ; Data2
.text:00416F80                 dw 0                    ; Data3
.text:00416F80                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00416F90                 dd 214A0h, 0
.text:00416F98                 dd 0C0h, 46000000h, 214A1h, 0
.text:00416FA8                 dd 0C0h, 46000000h, 214D0h, 0
.text:00416FB8                 dd 0C0h, 46000000h, 214D1h, 0
.text:00416FC8                 dd 0C0h, 46000000h, 214D2h, 0
.text:00416FD8                 dd 0C0h, 46000000h, 214E1h, 0
.text:00416FE8                 dd 0C0h, 46000000h, 214E2h, 0
.text:00416FF8                 dd 0C0h, 46000000h, 214E3h, 0
.text:00417008                 dd 0C0h, 46000000h, 214E4h, 0
.text:00417018                 dd 0C0h, 46000000h, 21500h, 0
.text:00417028                 dd 0C0h, 46000000h, 214E5h, 0
.text:00417038                 dd 0C0h, 46000000h, 214E6h, 0
.text:00417048                 dd 0C0h, 46000000h, 214E8h, 0
.text:00417058                 dd 0C0h, 46000000h, 214E9h, 0
.text:00417068                 dd 0C0h, 46000000h, 214EAh, 0
.text:00417078                 dd 0C0h, 46000000h, 214EBh, 0
.text:00417088                 dd 0C0h, 46000000h
.text:00417090 ; const IID riid
.text:00417090 riid            dd 214EEh               ; Data1
.text:00417090                                         ; DATA XREF: sub_40AF90+2B↑o
.text:00417090                 dw 0                    ; Data2
.text:00417090                 dw 0                    ; Data3
.text:00417090                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:004170A0                 dd 214EFh, 0
.text:004170A8                 dd 0C0h, 46000000h, 214F0h, 0
.text:004170B8                 dd 0C0h, 46000000h, 214F1h, 0
.text:004170C8                 dd 0C0h, 46000000h, 214F2h, 0
.text:004170D8                 dd 0C0h, 46000000h, 214F3h, 0
.text:004170E8                 dd 0C0h, 46000000h, 214F4h, 0
.text:004170F8                 dd 0C0h, 46000000h, 214F5h, 0
.text:00417108                 dd 0C0h, 46000000h, 214F6h, 0
.text:00417118                 dd 0C0h, 46000000h, 214F7h, 0
.text:00417128                 dd 0C0h, 46000000h, 214F8h, 0
.text:00417138                 dd 0C0h, 46000000h, 214F9h, 0
.text:00417148                 dd 0C0h, 46000000h, 214FAh, 0
.text:00417158                 dd 0C0h, 46000000h, 214FBh, 0
.text:00417168                 dd 0C0h, 46000000h, 214FCh, 0
.text:00417178                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:00417178                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:00417178                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:00417178                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:00417178                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00417178                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:00417178                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:00417178                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00417178                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:00417178                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:00417248                 dd 0C0h, 46000000h, 2DF05h, 0
.text:00417258                 dd 0C0h, 46000000h, 2DF06h, 0
.text:00417268                 dd 0C0h, 46000000h, 2DF01h, 0
.text:00417278                 dd 0C0h, 46000000h, 2DF09h, 0
.text:00417288                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:00417288                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:00417288                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:00417288                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:00417288                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:00417288                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:00417288                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:00417310 dword_417310    dd 0FFFFFFFFh           ; DATA XREF: .text:00416539↑r
.text:00417310                                         ; .text:loc_416560↑r ...
.text:00417314 dword_417314    dd 0                    ; DATA XREF: .text:loc_41656C↑r
.text:00417314                                         ; sub_416590:loc_4165DD↑r
.text:00417318                 dd 0FFFFFFFFh
.text:0041731C dword_41731C    dd 39h dup(0)           ; DATA XREF: .data:off_418144↓o
.text:00417400                 dd 300h dup(?)
.text:00417400 _text           ends
.text:00417400
.data:00418000 ; Section 2. (virtual address 00018000)
.data:00418000 ; Virtual size                  : 00000160 (    352.)
.data:00418000 ; Section size in file          : 00000200 (    512.)
.data:00418000 ; Offset to raw data for section: 00016800
.data:00418000 ; Flags C0000040: Data Readable Writable
.data:00418000 ; Alignment     : default
.data:00418000 ; ===========================================================================
.data:00418000
.data:00418000 ; Segment type: Pure data
.data:00418000 ; Segment permissions: Read/Write
.data:00418000 _data           segment para public 'DATA' use32
.data:00418000                 assume cs:_data
.data:00418000                 ;org 418000h
.data:00418000 dword_418000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00418000                                         ; sub_401080+CC↑r
.data:00418004 dword_418004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00418004                                         ; sub_401080+D4↑r
.data:00418008                 align 10h
.data:00418010 dword_418010    dd 1                    ; DATA XREF: sub_4016B0:loc_4019DB↑r
.data:00418010                                         ; sub_4016B0+3F7↑r ...
.data:00418014 dword_418014    dd 1                    ; DATA XREF: sub_403920+11↑r
.data:00418014                                         ; .text:004039C1↑r
.data:00418018 dword_418018    dd 3Fh                  ; DATA XREF: sub_403920+7D↑w
.data:00418018                                         ; .text:00403A2D↑w
.data:0041801C                 align 10h
.data:00418020 ; char *Buffer
.data:00418020 Buffer          dd offset aCopyrightC2005
.data:00418020                                         ; DATA XREF: sub_403E50+DC↑r
.data:00418020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00418024                 align 10h
.data:00418030 ; int Code
.data:00418030 Code            dd 1                    ; DATA XREF: sub_4041D0+6D↑r
.data:00418030                                         ; sub_4041D0+9A↑r ...
.data:00418034                 align 10h
.data:00418040 dword_418040    dd 1                    ; DATA XREF: sub_405830+22↑r
.data:00418040                                         ; sub_405830+65↑r ...
.data:00418044 dword_418044    dd 100h                 ; DATA XREF: sub_405830+3F↑o
.data:00418044                                         ; sub_405830+1A2↑r ...
.data:00418048 off_418048      dd offset unk_419100    ; DATA XREF: sub_405830+1AA↑r
.data:0041804C ; void *off_41804C
.data:0041804C off_41804C      dd offset dword_418044  ; DATA XREF: sub_405830+39↑r
.data:0041804C                                         ; sub_405830+60↑w ...
.data:00418050 dword_418050    dd 200h                 ; DATA XREF: sub_4063A0+2ED↑r
.data:00418050                                         ; sub_4063A0+2F8↑r ...
.data:00418054 ; char *off_418054
.data:00418054 off_418054      dd offset aComExeBatCmd ; DATA XREF: sub_406870+3D3↑r
.data:00418054                                         ; sub_406870+400↑r ...
.data:00418054                                         ; ".com;.exe;.bat;.cmd"
.data:00418058                 align 10h
.data:00418060 byte_418060     db 41h                  ; DATA XREF: sub_408540+6B↑w
.data:00418060                                         ; sub_408540:loc_408654↑r
.data:00418061                 align 10h
.data:00418070 dword_418070    dd 1                    ; DATA XREF: .text:loc_409A57↑r
.data:00418070                                         ; sub_40A030+202↑w
.data:00418074                 align 10h
.data:00418080 off_418080      dd offset aNotset       ; DATA XREF: .text:0040A2AA↑r
.data:00418080                                         ; .text:0040AEF2↑r
.data:00418080                                         ; "notset"
.data:00418084 off_418084      dd offset aNotset       ; DATA XREF: .text:0040A2C2↑r
.data:00418084                                         ; .text:0040A2E4↑r ...
.data:00418084                                         ; "notset"
.data:00418088                 align 10h
.data:00418090 unk_418090      db    0                 ; DATA XREF: .data:off_418104↓o
.data:00418091                 db    0
.data:00418092                 db    0
.data:00418093                 db    0
.data:00418094                 db  10h
.data:00418095                 db 0B9h ; ¹
.data:00418096                 db  40h ; @
.data:00418097                 db    0
.data:00418098                 db  70h ; p
.data:00418099                 db  38h ; 8
.data:0041809A                 db  41h ; A
.data:0041809B                 db    0
.data:0041809C                 db  10h
.data:0041809D                 db  3Ah ; :
.data:0041809E                 db  41h ; A
.data:0041809F                 db    0
.data:004180A0                 db  10h
.data:004180A1                 db  3Bh ; ;
.data:004180A2                 db  41h ; A
.data:004180A3                 db    0
.data:004180A4                 db  10h
.data:004180A5                 db  3Fh ; ?
.data:004180A6                 db  41h ; A
.data:004180A7                 db    0
.data:004180A8                 db  10h
.data:004180A9                 db  41h ; A
.data:004180AA                 db  41h ; A
.data:004180AB                 db    0
.data:004180AC                 db  50h ; P
.data:004180AD                 db  41h ; A
.data:004180AE                 db  41h ; A
.data:004180AF                 db    0
.data:004180B0                 db 0B0h ; °
.data:004180B1                 db  41h ; A
.data:004180B2                 db  41h ; A
.data:004180B3                 db    0
.data:004180B4                 db  30h ; 0
.data:004180B5                 db  42h ; B
.data:004180B6                 db  41h ; A
.data:004180B7                 db    0
.data:004180B8                 db 0B0h ; °
.data:004180B9                 db  42h ; B
.data:004180BA                 db  41h ; A
.data:004180BB                 db    0
.data:004180BC                 db  10h
.data:004180BD                 db  43h ; C
.data:004180BE                 db  41h ; A
.data:004180BF                 db    0
.data:004180C0                 db  10h
.data:004180C1                 db  45h ; E
.data:004180C2                 db  41h ; A
.data:004180C3                 db    0
.data:004180C4                 db  70h ; p
.data:004180C5                 db  1Fh
.data:004180C6                 db  41h ; A
.data:004180C7                 db    0
.data:004180C8                 db  70h ; p
.data:004180C9                 db  2Dh ; -
.data:004180CA                 db  41h ; A
.data:004180CB                 db    0
.data:004180CC                 db  70h ; p
.data:004180CD                 db  27h ; '
.data:004180CE                 db  41h ; A
.data:004180CF                 db    0
.data:004180D0                 db  90h
.data:004180D1                 db  45h ; E
.data:004180D2                 db  41h ; A
.data:004180D3                 db    0
.data:004180D4                 db  90h
.data:004180D5                 db  45h ; E
.data:004180D6                 db  41h ; A
.data:004180D7                 db    0
.data:004180D8                 db  90h
.data:004180D9                 db  45h ; E
.data:004180DA                 db  41h ; A
.data:004180DB                 db    0
.data:004180DC                 db  90h
.data:004180DD                 db  45h ; E
.data:004180DE                 db  41h ; A
.data:004180DF                 db    0
.data:004180E0                 db  90h
.data:004180E1                 db  45h ; E
.data:004180E2                 db  41h ; A
.data:004180E3                 db    0
.data:004180E4                 db  90h
.data:004180E5                 db  45h ; E
.data:004180E6                 db  41h ; A
.data:004180E7                 db    0
.data:004180E8                 db  90h
.data:004180E9                 db  45h ; E
.data:004180EA                 db  41h ; A
.data:004180EB                 db    0
.data:004180EC                 db  90h
.data:004180ED                 db  45h ; E
.data:004180EE                 db  41h ; A
.data:004180EF                 db    0
.data:004180F0                 db  90h
.data:004180F1                 db  45h ; E
.data:004180F2                 db  41h ; A
.data:004180F3                 db    0
.data:004180F4                 db  90h
.data:004180F5                 db  45h ; E
.data:004180F6                 db  41h ; A
.data:004180F7                 db    0
.data:004180F8                 db  90h
.data:004180F9                 db  45h ; E
.data:004180FA                 db  41h ; A
.data:004180FB                 db    0
.data:004180FC                 db  90h
.data:004180FD                 db  45h ; E
.data:004180FE                 db  41h ; A
.data:004180FF                 db    0
.data:00418100                 db  90h
.data:00418101                 db  45h ; E
.data:00418102                 db  41h ; A
.data:00418103                 db    0
.data:00418104 off_418104      dd offset unk_418090    ; DATA XREF: sub_409110+13↑r
.data:00418108                 align 10h
.data:00418110 dword_418110    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00418114                 align 10h
.data:00418120 ; int Mode
.data:00418120 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00418120                                         ; sub_401080+80↑r ...
.data:00418124                 align 10h
.data:00418130 dword_418130    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00418130                                         ; sub_401080+BA↑r
.data:00418134                 align 10h
.data:00418140 dword_418140    dd 0                    ; DATA XREF: sub_416590+9↑r
.data:00418140                                         ; sub_416590+1D↑w
.data:00418144 off_418144      dd offset dword_41731C  ; DATA XREF: sub_416500+6↑r
.data:00418144                                         ; sub_416500+17↑r ...
.data:00418148                 align 1000h
.data:00418148 _data           ends
.data:00418148
.bss:00419000 ; Section 3. (virtual address 00019000)
.bss:00419000 ; Virtual size                  : 00000610 (   1552.)
.bss:00419000 ; Section size in file          : 00000000 (      0.)
.bss:00419000 ; Offset to raw data for section: 00000000
.bss:00419000 ; Flags C0000080: Bss Readable Writable
.bss:00419000 ; Alignment     : default
.bss:00419000 ; ===========================================================================
.bss:00419000
.bss:00419000 ; Segment type: Uninitialized
.bss:00419000 ; Segment permissions: Read/Write
.bss:00419000 _bss            segment para public 'BSS' use32
.bss:00419000                 assume cs:_bss
.bss:00419000                 ;org 419000h
.bss:00419000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00419000 dword_419000    dd ?                    ; DATA XREF: sub_4016B0+92↑w
.bss:00419000                                         ; sub_4016B0+545↑r ...
.bss:00419004 dword_419004    dd ?                    ; DATA XREF: sub_4016B0+D4↑w
.bss:00419004                                         ; sub_4016B0+559↑r ...
.bss:00419008                 align 10h
.bss:00419010 dword_419010    dd ?                    ; DATA XREF: sub_4016B0+C9↑w
.bss:00419010                                         ; sub_4016B0+53B↑r ...
.bss:00419014 dword_419014    dd ?                    ; DATA XREF: sub_4016B0+CE↑w
.bss:00419014                                         ; sub_4016B0+54F↑r ...
.bss:00419018                 align 10h
.bss:00419020 dword_419020    dd ?                    ; DATA XREF: sub_4016B0+BD↑w
.bss:00419020                                         ; sub_4016B0+52B↑r ...
.bss:00419024 dword_419024    dd ?                    ; DATA XREF: sub_4016B0+C3↑w
.bss:00419024                                         ; sub_4016B0+535↑r ...
.bss:00419028                 align 10h
.bss:00419030 dword_419030    dd ?                    ; DATA XREF: sub_4016B0+8A↑w
.bss:00419030                                         ; sub_4016B0+51B↑r ...
.bss:00419034 dword_419034    dd ?                    ; DATA XREF: sub_4016B0+76↑w
.bss:00419034                                         ; sub_4016B0+525↑r ...
.bss:00419038                 align 10h
.bss:00419040 dword_419040    dd ?                    ; DATA XREF: sub_4016B0+6C↑w
.bss:00419040                                         ; sub_4016B0+50F↑r ...
.bss:00419044 dword_419044    dd ?                    ; DATA XREF: sub_4016B0+80↑w
.bss:00419044                                         ; sub_4016B0+515↑r ...
.bss:00419048                 align 10h
.bss:00419050 byte_419050     db ?                    ; DATA XREF: sub_4016B0+AF↑w
.bss:00419050                                         ; sub_4016B0+2A7↑w ...
.bss:00419051                 align 10h
.bss:00419060 byte_419060     db ?                    ; DATA XREF: sub_4016B0+A8↑w
.bss:00419060                                         ; sub_4016B0+2BC↑w ...
.bss:00419061                 align 10h
.bss:00419070 byte_419070     db ?                    ; DATA XREF: sub_4016B0+A1↑w
.bss:00419070                                         ; sub_4016B0:loc_401978↑w ...
.bss:00419071                 align 10h
.bss:00419080 byte_419080     db ?                    ; DATA XREF: sub_4016B0+9A↑w
.bss:00419080                                         ; sub_4016B0:loc_401984↑w ...
.bss:00419081                 align 10h
.bss:00419090 byte_419090     db ?                    ; DATA XREF: sub_4016B0+B6↑w
.bss:00419090                                         ; sub_4016B0+139↑w ...
.bss:00419091                 align 10h
.bss:004190A0 dword_4190A0    dd ?                    ; DATA XREF: sub_4016B0:loc_401AA1↑w
.bss:004190A0                                         ; sub_401EC0+120↑r ...
.bss:004190A4                 align 10h
.bss:004190B0 byte_4190B0     db ?                    ; DATA XREF: sub_4016B0+45B↑w
.bss:004190B0                                         ; sub_4016B0+4B7↑r ...
.bss:004190B1                 align 10h
.bss:004190C0 dword_4190C0    dd ?                    ; DATA XREF: sub_403920+9↑o
.bss:004190C0                                         ; sub_403920+17↑w ...
.bss:004190C4 dword_4190C4    dd ?                    ; DATA XREF: sub_403920+21↑w
.bss:004190C4                                         ; .text:004039D9↑w
.bss:004190C8 dword_4190C8    dd ?                    ; DATA XREF: sub_403920+77↑r
.bss:004190C8                                         ; .text:00403A27↑r
.bss:004190CC dword_4190CC    dd ?                    ; DATA XREF: sub_403920+6B↑r
.bss:004190CC                                         ; .text:00403A1B↑r
.bss:004190D0                 db    ? ;
.bss:004190D1                 db    ? ;
.bss:004190D2                 db    ? ;
.bss:004190D3                 db    ? ;
.bss:004190D4                 db    ? ;
.bss:004190D5                 db    ? ;
.bss:004190D6                 db    ? ;
.bss:004190D7                 db    ? ;
.bss:004190D8                 db    ? ;
.bss:004190D9                 db    ? ;
.bss:004190DA                 db    ? ;
.bss:004190DB                 db    ? ;
.bss:004190DC                 db    ? ;
.bss:004190DD                 db    ? ;
.bss:004190DE                 db    ? ;
.bss:004190DF                 db    ? ;
.bss:004190E0                 db    ? ;
.bss:004190E1                 db    ? ;
.bss:004190E2                 db    ? ;
.bss:004190E3                 db    ? ;
.bss:004190E4                 db    ? ;
.bss:004190E5                 db    ? ;
.bss:004190E6                 db    ? ;
.bss:004190E7                 db    ? ;
.bss:004190E8                 db    ? ;
.bss:004190E9                 db    ? ;
.bss:004190EA                 db    ? ;
.bss:004190EB                 db    ? ;
.bss:004190EC                 db    ? ;
.bss:004190ED                 db    ? ;
.bss:004190EE                 db    ? ;
.bss:004190EF                 db    ? ;
.bss:004190F0 ; char *dword_4190F0
.bss:004190F0 dword_4190F0    dd ?                    ; DATA XREF: .text:004041A4↑w
.bss:004190F0                                         ; sub_4041D0+58↑r
.bss:004190F4                 align 10h
.bss:00419100 unk_419100      db    ? ;               ; DATA XREF: sub_405830+100↑o
.bss:00419100                                         ; .data:off_418048↑o
.bss:00419101                 db    ? ;
.bss:00419102                 db    ? ;
.bss:00419103                 db    ? ;
.bss:00419104                 db    ? ;
.bss:00419105                 db    ? ;
.bss:00419106                 db    ? ;
.bss:00419107                 db    ? ;
.bss:00419108                 db    ? ;
.bss:00419109                 db    ? ;
.bss:0041910A                 db    ? ;
.bss:0041910B                 db    ? ;
.bss:0041910C                 db    ? ;
.bss:0041910D                 db    ? ;
.bss:0041910E                 db    ? ;
.bss:0041910F                 db    ? ;
.bss:00419110                 db    ? ;
.bss:00419111                 db    ? ;
.bss:00419112                 db    ? ;
.bss:00419113                 db    ? ;
.bss:00419114                 db    ? ;
.bss:00419115                 db    ? ;
.bss:00419116                 db    ? ;
.bss:00419117                 db    ? ;
.bss:00419118                 db    ? ;
.bss:00419119                 db    ? ;
.bss:0041911A                 db    ? ;
.bss:0041911B                 db    ? ;
.bss:0041911C                 db    ? ;
.bss:0041911D                 db    ? ;
.bss:0041911E                 db    ? ;
.bss:0041911F                 db    ? ;
.bss:00419120                 db    ? ;
.bss:00419121                 db    ? ;
.bss:00419122                 db    ? ;
.bss:00419123                 db    ? ;
.bss:00419124                 db    ? ;
.bss:00419125                 db    ? ;
.bss:00419126                 db    ? ;
.bss:00419127                 db    ? ;
.bss:00419128                 db    ? ;
.bss:00419129                 db    ? ;
.bss:0041912A                 db    ? ;
.bss:0041912B                 db    ? ;
.bss:0041912C                 db    ? ;
.bss:0041912D                 db    ? ;
.bss:0041912E                 db    ? ;
.bss:0041912F                 db    ? ;
.bss:00419130                 db    ? ;
.bss:00419131                 db    ? ;
.bss:00419132                 db    ? ;
.bss:00419133                 db    ? ;
.bss:00419134                 db    ? ;
.bss:00419135                 db    ? ;
.bss:00419136                 db    ? ;
.bss:00419137                 db    ? ;
.bss:00419138                 db    ? ;
.bss:00419139                 db    ? ;
.bss:0041913A                 db    ? ;
.bss:0041913B                 db    ? ;
.bss:0041913C                 db    ? ;
.bss:0041913D                 db    ? ;
.bss:0041913E                 db    ? ;
.bss:0041913F                 db    ? ;
.bss:00419140                 db    ? ;
.bss:00419141                 db    ? ;
.bss:00419142                 db    ? ;
.bss:00419143                 db    ? ;
.bss:00419144                 db    ? ;
.bss:00419145                 db    ? ;
.bss:00419146                 db    ? ;
.bss:00419147                 db    ? ;
.bss:00419148                 db    ? ;
.bss:00419149                 db    ? ;
.bss:0041914A                 db    ? ;
.bss:0041914B                 db    ? ;
.bss:0041914C                 db    ? ;
.bss:0041914D                 db    ? ;
.bss:0041914E                 db    ? ;
.bss:0041914F                 db    ? ;
.bss:00419150                 db    ? ;
.bss:00419151                 db    ? ;
.bss:00419152                 db    ? ;
.bss:00419153                 db    ? ;
.bss:00419154                 db    ? ;
.bss:00419155                 db    ? ;
.bss:00419156                 db    ? ;
.bss:00419157                 db    ? ;
.bss:00419158                 db    ? ;
.bss:00419159                 db    ? ;
.bss:0041915A                 db    ? ;
.bss:0041915B                 db    ? ;
.bss:0041915C                 db    ? ;
.bss:0041915D                 db    ? ;
.bss:0041915E                 db    ? ;
.bss:0041915F                 db    ? ;
.bss:00419160                 db    ? ;
.bss:00419161                 db    ? ;
.bss:00419162                 db    ? ;
.bss:00419163                 db    ? ;
.bss:00419164                 db    ? ;
.bss:00419165                 db    ? ;
.bss:00419166                 db    ? ;
.bss:00419167                 db    ? ;
.bss:00419168                 db    ? ;
.bss:00419169                 db    ? ;
.bss:0041916A                 db    ? ;
.bss:0041916B                 db    ? ;
.bss:0041916C                 db    ? ;
.bss:0041916D                 db    ? ;
.bss:0041916E                 db    ? ;
.bss:0041916F                 db    ? ;
.bss:00419170                 db    ? ;
.bss:00419171                 db    ? ;
.bss:00419172                 db    ? ;
.bss:00419173                 db    ? ;
.bss:00419174                 db    ? ;
.bss:00419175                 db    ? ;
.bss:00419176                 db    ? ;
.bss:00419177                 db    ? ;
.bss:00419178                 db    ? ;
.bss:00419179                 db    ? ;
.bss:0041917A                 db    ? ;
.bss:0041917B                 db    ? ;
.bss:0041917C                 db    ? ;
.bss:0041917D                 db    ? ;
.bss:0041917E                 db    ? ;
.bss:0041917F                 db    ? ;
.bss:00419180                 db    ? ;
.bss:00419181                 db    ? ;
.bss:00419182                 db    ? ;
.bss:00419183                 db    ? ;
.bss:00419184                 db    ? ;
.bss:00419185                 db    ? ;
.bss:00419186                 db    ? ;
.bss:00419187                 db    ? ;
.bss:00419188                 db    ? ;
.bss:00419189                 db    ? ;
.bss:0041918A                 db    ? ;
.bss:0041918B                 db    ? ;
.bss:0041918C                 db    ? ;
.bss:0041918D                 db    ? ;
.bss:0041918E                 db    ? ;
.bss:0041918F                 db    ? ;
.bss:00419190                 db    ? ;
.bss:00419191                 db    ? ;
.bss:00419192                 db    ? ;
.bss:00419193                 db    ? ;
.bss:00419194                 db    ? ;
.bss:00419195                 db    ? ;
.bss:00419196                 db    ? ;
.bss:00419197                 db    ? ;
.bss:00419198                 db    ? ;
.bss:00419199                 db    ? ;
.bss:0041919A                 db    ? ;
.bss:0041919B                 db    ? ;
.bss:0041919C                 db    ? ;
.bss:0041919D                 db    ? ;
.bss:0041919E                 db    ? ;
.bss:0041919F                 db    ? ;
.bss:004191A0                 db    ? ;
.bss:004191A1                 db    ? ;
.bss:004191A2                 db    ? ;
.bss:004191A3                 db    ? ;
.bss:004191A4                 db    ? ;
.bss:004191A5                 db    ? ;
.bss:004191A6                 db    ? ;
.bss:004191A7                 db    ? ;
.bss:004191A8                 db    ? ;
.bss:004191A9                 db    ? ;
.bss:004191AA                 db    ? ;
.bss:004191AB                 db    ? ;
.bss:004191AC                 db    ? ;
.bss:004191AD                 db    ? ;
.bss:004191AE                 db    ? ;
.bss:004191AF                 db    ? ;
.bss:004191B0                 db    ? ;
.bss:004191B1                 db    ? ;
.bss:004191B2                 db    ? ;
.bss:004191B3                 db    ? ;
.bss:004191B4                 db    ? ;
.bss:004191B5                 db    ? ;
.bss:004191B6                 db    ? ;
.bss:004191B7                 db    ? ;
.bss:004191B8                 db    ? ;
.bss:004191B9                 db    ? ;
.bss:004191BA                 db    ? ;
.bss:004191BB                 db    ? ;
.bss:004191BC                 db    ? ;
.bss:004191BD                 db    ? ;
.bss:004191BE                 db    ? ;
.bss:004191BF                 db    ? ;
.bss:004191C0                 db    ? ;
.bss:004191C1                 db    ? ;
.bss:004191C2                 db    ? ;
.bss:004191C3                 db    ? ;
.bss:004191C4                 db    ? ;
.bss:004191C5                 db    ? ;
.bss:004191C6                 db    ? ;
.bss:004191C7                 db    ? ;
.bss:004191C8                 db    ? ;
.bss:004191C9                 db    ? ;
.bss:004191CA                 db    ? ;
.bss:004191CB                 db    ? ;
.bss:004191CC                 db    ? ;
.bss:004191CD                 db    ? ;
.bss:004191CE                 db    ? ;
.bss:004191CF                 db    ? ;
.bss:004191D0                 db    ? ;
.bss:004191D1                 db    ? ;
.bss:004191D2                 db    ? ;
.bss:004191D3                 db    ? ;
.bss:004191D4                 db    ? ;
.bss:004191D5                 db    ? ;
.bss:004191D6                 db    ? ;
.bss:004191D7                 db    ? ;
.bss:004191D8                 db    ? ;
.bss:004191D9                 db    ? ;
.bss:004191DA                 db    ? ;
.bss:004191DB                 db    ? ;
.bss:004191DC                 db    ? ;
.bss:004191DD                 db    ? ;
.bss:004191DE                 db    ? ;
.bss:004191DF                 db    ? ;
.bss:004191E0                 db    ? ;
.bss:004191E1                 db    ? ;
.bss:004191E2                 db    ? ;
.bss:004191E3                 db    ? ;
.bss:004191E4                 db    ? ;
.bss:004191E5                 db    ? ;
.bss:004191E6                 db    ? ;
.bss:004191E7                 db    ? ;
.bss:004191E8                 db    ? ;
.bss:004191E9                 db    ? ;
.bss:004191EA                 db    ? ;
.bss:004191EB                 db    ? ;
.bss:004191EC                 db    ? ;
.bss:004191ED                 db    ? ;
.bss:004191EE                 db    ? ;
.bss:004191EF                 db    ? ;
.bss:004191F0                 db    ? ;
.bss:004191F1                 db    ? ;
.bss:004191F2                 db    ? ;
.bss:004191F3                 db    ? ;
.bss:004191F4                 db    ? ;
.bss:004191F5                 db    ? ;
.bss:004191F6                 db    ? ;
.bss:004191F7                 db    ? ;
.bss:004191F8                 db    ? ;
.bss:004191F9                 db    ? ;
.bss:004191FA                 db    ? ;
.bss:004191FB                 db    ? ;
.bss:004191FC                 db    ? ;
.bss:004191FD                 db    ? ;
.bss:004191FE                 db    ? ;
.bss:004191FF                 db    ? ;
.bss:00419200 dword_419200    dd ?                    ; DATA XREF: .text:loc_4051C1↑o
.bss:00419200                                         ; .text:loc_4051E0↑o ...
.bss:00419204 dword_419204    dd ?                    ; DATA XREF: .text:loc_405260↑o
.bss:00419204                                         ; .text:004056E8↑r ...
.bss:00419208 dword_419208    dd ?                    ; DATA XREF: .text:004056E2↑r
.bss:00419208                                         ; sub_405790+2C↑r
.bss:0041920C dword_41920C    dd ?                    ; DATA XREF: .text:004056D6↑r
.bss:0041920C                                         ; sub_405790+22↑r
.bss:00419210 dword_419210    dd ?                    ; DATA XREF: .text:004056F2↑r
.bss:00419210                                         ; sub_405790+36↑r
.bss:00419214 dword_419214    dd ?                    ; DATA XREF: .text:00405702↑r
.bss:00419214                                         ; sub_405790+4E↑r
.bss:00419218 dword_419218    dd ?                    ; DATA XREF: .text:0040571F↑r
.bss:00419218                                         ; sub_405790+62↑r
.bss:0041921C dword_41921C    dd ?                    ; DATA XREF: .text:00405715↑r
.bss:0041921C                                         ; sub_405790+70↑r
.bss:00419220 dword_419220    dd ?                    ; DATA XREF: .text:004056F8↑r
.bss:00419220                                         ; sub_405790+7A↑r
.bss:00419224                 align 10h
.bss:00419230 ; char *Str1
.bss:00419230 Str1            dd ?                    ; DATA XREF: sub_405BB4:loc_405BED↑w
.bss:00419230                                         ; sub_405BB4:loc_405D20↑r
.bss:00419234                 align 10h
.bss:00419240 dword_419240    dd ?                    ; DATA XREF: sub_405BB4+2D↑r
.bss:00419240                                         ; sub_405BB4+3F↑w
.bss:00419244                 align 10h
.bss:00419250 dword_419250    dd ?                    ; DATA XREF: sub_406870+100↑r
.bss:00419250                                         ; sub_406870+308↑w
.bss:00419254                 align 10h
.bss:00419260 ; char *Str
.bss:00419260 Str             dd ?                    ; DATA XREF: sub_406870:loc_406BD4↑r
.bss:00419260                                         ; sub_406870+3B6↑r ...
.bss:00419264                 align 10h
.bss:00419270 dword_419270    dd ?                    ; DATA XREF: sub_408540+1C↑r
.bss:00419270                                         ; sub_408540+104↑w
.bss:00419274                 align 10h
.bss:00419280 dword_419280    dd ?                    ; DATA XREF: sub_408540+B↑r
.bss:00419280                                         ; sub_408540+71↑w
.bss:00419284                 align 10h
.bss:00419290 dword_419290    dd ?                    ; DATA XREF: sub_408540+85↑r
.bss:00419290                                         ; sub_408540+B9↑w
.bss:00419294 dword_419294    dd ?                    ; DATA XREF: sub_408540+C4↑w
.bss:00419298 dword_419298    dd ?                    ; DATA XREF: sub_408540+2E↑o
.bss:00419298                                         ; sub_408540+CF↑w
.bss:0041929C dword_41929C    dd ?                    ; DATA XREF: sub_408540+DA↑w
.bss:004192A0                 db    ? ;
.bss:004192A1                 db    ? ;
.bss:004192A2                 db    ? ;
.bss:004192A3                 db    ? ;
.bss:004192A4                 db    ? ;
.bss:004192A5                 db    ? ;
.bss:004192A6                 db    ? ;
.bss:004192A7                 db    ? ;
.bss:004192A8                 db    ? ;
.bss:004192A9                 db    ? ;
.bss:004192AA                 db    ? ;
.bss:004192AB                 db    ? ;
.bss:004192AC                 db    ? ;
.bss:004192AD                 db    ? ;
.bss:004192AE                 db    ? ;
.bss:004192AF                 db    ? ;
.bss:004192B0                 db    ? ;
.bss:004192B1                 db    ? ;
.bss:004192B2                 db    ? ;
.bss:004192B3                 db    ? ;
.bss:004192B4                 db    ? ;
.bss:004192B5                 db    ? ;
.bss:004192B6                 db    ? ;
.bss:004192B7                 db    ? ;
.bss:004192B8                 db    ? ;
.bss:004192B9                 db    ? ;
.bss:004192BA                 db    ? ;
.bss:004192BB                 db    ? ;
.bss:004192BC                 db    ? ;
.bss:004192BD                 db    ? ;
.bss:004192BE                 db    ? ;
.bss:004192BF                 db    ? ;
.bss:004192C0                 db    ? ;
.bss:004192C1                 db    ? ;
.bss:004192C2                 db    ? ;
.bss:004192C3                 db    ? ;
.bss:004192C4                 db    ? ;
.bss:004192C5                 db    ? ;
.bss:004192C6                 db    ? ;
.bss:004192C7                 db    ? ;
.bss:004192C8                 db    ? ;
.bss:004192C9                 db    ? ;
.bss:004192CA                 db    ? ;
.bss:004192CB                 db    ? ;
.bss:004192CC                 db    ? ;
.bss:004192CD                 db    ? ;
.bss:004192CE                 db    ? ;
.bss:004192CF                 db    ? ;
.bss:004192D0                 db    ? ;
.bss:004192D1                 db    ? ;
.bss:004192D2                 db    ? ;
.bss:004192D3                 db    ? ;
.bss:004192D4                 db    ? ;
.bss:004192D5                 db    ? ;
.bss:004192D6                 db    ? ;
.bss:004192D7                 db    ? ;
.bss:004192D8                 db    ? ;
.bss:004192D9                 db    ? ;
.bss:004192DA                 db    ? ;
.bss:004192DB                 db    ? ;
.bss:004192DC                 db    ? ;
.bss:004192DD                 db    ? ;
.bss:004192DE                 db    ? ;
.bss:004192DF                 db    ? ;
.bss:004192E0                 db    ? ;
.bss:004192E1                 db    ? ;
.bss:004192E2                 db    ? ;
.bss:004192E3                 db    ? ;
.bss:004192E4                 db    ? ;
.bss:004192E5                 db    ? ;
.bss:004192E6                 db    ? ;
.bss:004192E7                 db    ? ;
.bss:004192E8                 db    ? ;
.bss:004192E9                 db    ? ;
.bss:004192EA                 db    ? ;
.bss:004192EB                 db    ? ;
.bss:004192EC                 db    ? ;
.bss:004192ED                 db    ? ;
.bss:004192EE                 db    ? ;
.bss:004192EF                 db    ? ;
.bss:004192F0                 db    ? ;
.bss:004192F1                 db    ? ;
.bss:004192F2                 db    ? ;
.bss:004192F3                 db    ? ;
.bss:004192F4                 db    ? ;
.bss:004192F5                 db    ? ;
.bss:004192F6                 db    ? ;
.bss:004192F7                 db    ? ;
.bss:004192F8                 db    ? ;
.bss:004192F9                 db    ? ;
.bss:004192FA                 db    ? ;
.bss:004192FB                 db    ? ;
.bss:004192FC                 db    ? ;
.bss:004192FD                 db    ? ;
.bss:004192FE                 db    ? ;
.bss:004192FF                 db    ? ;
.bss:00419300                 db    ? ;
.bss:00419301                 db    ? ;
.bss:00419302                 db    ? ;
.bss:00419303                 db    ? ;
.bss:00419304                 db    ? ;
.bss:00419305                 db    ? ;
.bss:00419306                 db    ? ;
.bss:00419307                 db    ? ;
.bss:00419308                 db    ? ;
.bss:00419309                 db    ? ;
.bss:0041930A                 db    ? ;
.bss:0041930B                 db    ? ;
.bss:0041930C                 db    ? ;
.bss:0041930D                 db    ? ;
.bss:0041930E                 db    ? ;
.bss:0041930F                 db    ? ;
.bss:00419310                 db    ? ;
.bss:00419311                 db    ? ;
.bss:00419312                 db    ? ;
.bss:00419313                 db    ? ;
.bss:00419314                 db    ? ;
.bss:00419315                 db    ? ;
.bss:00419316                 db    ? ;
.bss:00419317                 db    ? ;
.bss:00419318                 db    ? ;
.bss:00419319                 db    ? ;
.bss:0041931A                 db    ? ;
.bss:0041931B                 db    ? ;
.bss:0041931C                 db    ? ;
.bss:0041931D                 db    ? ;
.bss:0041931E                 db    ? ;
.bss:0041931F                 db    ? ;
.bss:00419320                 db    ? ;
.bss:00419321                 db    ? ;
.bss:00419322                 db    ? ;
.bss:00419323                 db    ? ;
.bss:00419324                 db    ? ;
.bss:00419325                 db    ? ;
.bss:00419326                 db    ? ;
.bss:00419327                 db    ? ;
.bss:00419328                 db    ? ;
.bss:00419329                 db    ? ;
.bss:0041932A                 db    ? ;
.bss:0041932B                 db    ? ;
.bss:0041932C                 db    ? ;
.bss:0041932D                 db    ? ;
.bss:0041932E                 db    ? ;
.bss:0041932F                 db    ? ;
.bss:00419330                 db    ? ;
.bss:00419331                 db    ? ;
.bss:00419332                 db    ? ;
.bss:00419333                 db    ? ;
.bss:00419334                 db    ? ;
.bss:00419335                 db    ? ;
.bss:00419336                 db    ? ;
.bss:00419337                 db    ? ;
.bss:00419338                 db    ? ;
.bss:00419339                 db    ? ;
.bss:0041933A                 db    ? ;
.bss:0041933B                 db    ? ;
.bss:0041933C                 db    ? ;
.bss:0041933D                 db    ? ;
.bss:0041933E                 db    ? ;
.bss:0041933F                 db    ? ;
.bss:00419340                 db    ? ;
.bss:00419341                 db    ? ;
.bss:00419342                 db    ? ;
.bss:00419343                 db    ? ;
.bss:00419344                 db    ? ;
.bss:00419345                 db    ? ;
.bss:00419346                 db    ? ;
.bss:00419347                 db    ? ;
.bss:00419348                 db    ? ;
.bss:00419349                 db    ? ;
.bss:0041934A                 db    ? ;
.bss:0041934B                 db    ? ;
.bss:0041934C                 db    ? ;
.bss:0041934D                 db    ? ;
.bss:0041934E                 db    ? ;
.bss:0041934F                 db    ? ;
.bss:00419350                 db    ? ;
.bss:00419351                 db    ? ;
.bss:00419352                 db    ? ;
.bss:00419353                 db    ? ;
.bss:00419354                 db    ? ;
.bss:00419355                 db    ? ;
.bss:00419356                 db    ? ;
.bss:00419357                 db    ? ;
.bss:00419358                 db    ? ;
.bss:00419359                 db    ? ;
.bss:0041935A                 db    ? ;
.bss:0041935B                 db    ? ;
.bss:0041935C                 db    ? ;
.bss:0041935D                 db    ? ;
.bss:0041935E                 db    ? ;
.bss:0041935F                 db    ? ;
.bss:00419360                 db    ? ;
.bss:00419361                 db    ? ;
.bss:00419362                 db    ? ;
.bss:00419363                 db    ? ;
.bss:00419364                 db    ? ;
.bss:00419365                 db    ? ;
.bss:00419366                 db    ? ;
.bss:00419367                 db    ? ;
.bss:00419368                 db    ? ;
.bss:00419369                 db    ? ;
.bss:0041936A                 db    ? ;
.bss:0041936B                 db    ? ;
.bss:0041936C                 db    ? ;
.bss:0041936D                 db    ? ;
.bss:0041936E                 db    ? ;
.bss:0041936F                 db    ? ;
.bss:00419370                 db    ? ;
.bss:00419371                 db    ? ;
.bss:00419372                 db    ? ;
.bss:00419373                 db    ? ;
.bss:00419374                 db    ? ;
.bss:00419375                 db    ? ;
.bss:00419376                 db    ? ;
.bss:00419377                 db    ? ;
.bss:00419378                 db    ? ;
.bss:00419379                 db    ? ;
.bss:0041937A                 db    ? ;
.bss:0041937B                 db    ? ;
.bss:0041937C                 db    ? ;
.bss:0041937D                 db    ? ;
.bss:0041937E                 db    ? ;
.bss:0041937F                 db    ? ;
.bss:00419380                 db    ? ;
.bss:00419381                 db    ? ;
.bss:00419382                 db    ? ;
.bss:00419383                 db    ? ;
.bss:00419384                 db    ? ;
.bss:00419385                 db    ? ;
.bss:00419386                 db    ? ;
.bss:00419387                 db    ? ;
.bss:00419388                 db    ? ;
.bss:00419389                 db    ? ;
.bss:0041938A                 db    ? ;
.bss:0041938B                 db    ? ;
.bss:0041938C                 db    ? ;
.bss:0041938D                 db    ? ;
.bss:0041938E                 db    ? ;
.bss:0041938F                 db    ? ;
.bss:00419390                 db    ? ;
.bss:00419391                 db    ? ;
.bss:00419392                 db    ? ;
.bss:00419393                 db    ? ;
.bss:00419394                 db    ? ;
.bss:00419395                 db    ? ;
.bss:00419396                 db    ? ;
.bss:00419397                 db    ? ;
.bss:00419398                 db    ? ;
.bss:00419399                 db    ? ;
.bss:0041939A                 db    ? ;
.bss:0041939B                 db    ? ;
.bss:0041939C                 db    ? ;
.bss:0041939D                 db    ? ;
.bss:0041939E                 db    ? ;
.bss:0041939F                 db    ? ;
.bss:004193A0                 db    ? ;
.bss:004193A1                 db    ? ;
.bss:004193A2                 db    ? ;
.bss:004193A3                 db    ? ;
.bss:004193A4                 db    ? ;
.bss:004193A5                 db    ? ;
.bss:004193A6                 db    ? ;
.bss:004193A7                 db    ? ;
.bss:004193A8                 db    ? ;
.bss:004193A9                 db    ? ;
.bss:004193AA                 db    ? ;
.bss:004193AB                 db    ? ;
.bss:004193AC                 db    ? ;
.bss:004193AD                 db    ? ;
.bss:004193AE                 db    ? ;
.bss:004193AF                 db    ? ;
.bss:004193B0                 db    ? ;
.bss:004193B1                 db    ? ;
.bss:004193B2                 db    ? ;
.bss:004193B3                 db    ? ;
.bss:004193B4                 db    ? ;
.bss:004193B5                 db    ? ;
.bss:004193B6                 db    ? ;
.bss:004193B7                 db    ? ;
.bss:004193B8                 db    ? ;
.bss:004193B9                 db    ? ;
.bss:004193BA                 db    ? ;
.bss:004193BB                 db    ? ;
.bss:004193BC                 db    ? ;
.bss:004193BD                 db    ? ;
.bss:004193BE                 db    ? ;
.bss:004193BF                 db    ? ;
.bss:004193C0                 db    ? ;
.bss:004193C1                 db    ? ;
.bss:004193C2                 db    ? ;
.bss:004193C3                 db    ? ;
.bss:004193C4                 db    ? ;
.bss:004193C5                 db    ? ;
.bss:004193C6                 db    ? ;
.bss:004193C7                 db    ? ;
.bss:004193C8                 db    ? ;
.bss:004193C9                 db    ? ;
.bss:004193CA                 db    ? ;
.bss:004193CB                 db    ? ;
.bss:004193CC                 db    ? ;
.bss:004193CD                 db    ? ;
.bss:004193CE                 db    ? ;
.bss:004193CF                 db    ? ;
.bss:004193D0                 db    ? ;
.bss:004193D1                 db    ? ;
.bss:004193D2                 db    ? ;
.bss:004193D3                 db    ? ;
.bss:004193D4                 db    ? ;
.bss:004193D5                 db    ? ;
.bss:004193D6                 db    ? ;
.bss:004193D7                 db    ? ;
.bss:004193D8                 db    ? ;
.bss:004193D9                 db    ? ;
.bss:004193DA                 db    ? ;
.bss:004193DB                 db    ? ;
.bss:004193DC                 db    ? ;
.bss:004193DD                 db    ? ;
.bss:004193DE                 db    ? ;
.bss:004193DF                 db    ? ;
.bss:004193E0                 db    ? ;
.bss:004193E1                 db    ? ;
.bss:004193E2                 db    ? ;
.bss:004193E3                 db    ? ;
.bss:004193E4                 db    ? ;
.bss:004193E5                 db    ? ;
.bss:004193E6                 db    ? ;
.bss:004193E7                 db    ? ;
.bss:004193E8                 db    ? ;
.bss:004193E9                 db    ? ;
.bss:004193EA                 db    ? ;
.bss:004193EB                 db    ? ;
.bss:004193EC                 db    ? ;
.bss:004193ED                 db    ? ;
.bss:004193EE                 db    ? ;
.bss:004193EF                 db    ? ;
.bss:004193F0                 db    ? ;
.bss:004193F1                 db    ? ;
.bss:004193F2                 db    ? ;
.bss:004193F3                 db    ? ;
.bss:004193F4                 db    ? ;
.bss:004193F5                 db    ? ;
.bss:004193F6                 db    ? ;
.bss:004193F7                 db    ? ;
.bss:004193F8                 db    ? ;
.bss:004193F9                 db    ? ;
.bss:004193FA                 db    ? ;
.bss:004193FB                 db    ? ;
.bss:004193FC                 db    ? ;
.bss:004193FD                 db    ? ;
.bss:004193FE                 db    ? ;
.bss:004193FF                 db    ? ;
.bss:00419400                 db    ? ;
.bss:00419401                 db    ? ;
.bss:00419402                 db    ? ;
.bss:00419403                 db    ? ;
.bss:00419404                 db    ? ;
.bss:00419405                 db    ? ;
.bss:00419406                 db    ? ;
.bss:00419407                 db    ? ;
.bss:00419408                 db    ? ;
.bss:00419409                 db    ? ;
.bss:0041940A                 db    ? ;
.bss:0041940B                 db    ? ;
.bss:0041940C                 db    ? ;
.bss:0041940D                 db    ? ;
.bss:0041940E                 db    ? ;
.bss:0041940F                 db    ? ;
.bss:00419410                 db    ? ;
.bss:00419411                 db    ? ;
.bss:00419412                 db    ? ;
.bss:00419413                 db    ? ;
.bss:00419414                 db    ? ;
.bss:00419415                 db    ? ;
.bss:00419416                 db    ? ;
.bss:00419417                 db    ? ;
.bss:00419418                 db    ? ;
.bss:00419419                 db    ? ;
.bss:0041941A                 db    ? ;
.bss:0041941B                 db    ? ;
.bss:0041941C                 db    ? ;
.bss:0041941D                 db    ? ;
.bss:0041941E                 db    ? ;
.bss:0041941F                 db    ? ;
.bss:00419420                 db    ? ;
.bss:00419421                 db    ? ;
.bss:00419422                 db    ? ;
.bss:00419423                 db    ? ;
.bss:00419424                 db    ? ;
.bss:00419425                 db    ? ;
.bss:00419426                 db    ? ;
.bss:00419427                 db    ? ;
.bss:00419428                 db    ? ;
.bss:00419429                 db    ? ;
.bss:0041942A                 db    ? ;
.bss:0041942B                 db    ? ;
.bss:0041942C                 db    ? ;
.bss:0041942D                 db    ? ;
.bss:0041942E                 db    ? ;
.bss:0041942F                 db    ? ;
.bss:00419430                 db    ? ;
.bss:00419431                 db    ? ;
.bss:00419432                 db    ? ;
.bss:00419433                 db    ? ;
.bss:00419434                 db    ? ;
.bss:00419435                 db    ? ;
.bss:00419436                 db    ? ;
.bss:00419437                 db    ? ;
.bss:00419438                 db    ? ;
.bss:00419439                 db    ? ;
.bss:0041943A                 db    ? ;
.bss:0041943B                 db    ? ;
.bss:0041943C                 db    ? ;
.bss:0041943D                 db    ? ;
.bss:0041943E                 db    ? ;
.bss:0041943F                 db    ? ;
.bss:00419440                 db    ? ;
.bss:00419441                 db    ? ;
.bss:00419442                 db    ? ;
.bss:00419443                 db    ? ;
.bss:00419444                 db    ? ;
.bss:00419445                 db    ? ;
.bss:00419446                 db    ? ;
.bss:00419447                 db    ? ;
.bss:00419448                 db    ? ;
.bss:00419449                 db    ? ;
.bss:0041944A                 db    ? ;
.bss:0041944B                 db    ? ;
.bss:0041944C                 db    ? ;
.bss:0041944D                 db    ? ;
.bss:0041944E                 db    ? ;
.bss:0041944F                 db    ? ;
.bss:00419450                 db    ? ;
.bss:00419451                 db    ? ;
.bss:00419452                 db    ? ;
.bss:00419453                 db    ? ;
.bss:00419454                 db    ? ;
.bss:00419455                 db    ? ;
.bss:00419456                 db    ? ;
.bss:00419457                 db    ? ;
.bss:00419458                 db    ? ;
.bss:00419459                 db    ? ;
.bss:0041945A                 db    ? ;
.bss:0041945B                 db    ? ;
.bss:0041945C                 db    ? ;
.bss:0041945D                 db    ? ;
.bss:0041945E                 db    ? ;
.bss:0041945F                 db    ? ;
.bss:00419460                 db    ? ;
.bss:00419461                 db    ? ;
.bss:00419462                 db    ? ;
.bss:00419463                 db    ? ;
.bss:00419464                 db    ? ;
.bss:00419465                 db    ? ;
.bss:00419466                 db    ? ;
.bss:00419467                 db    ? ;
.bss:00419468                 db    ? ;
.bss:00419469                 db    ? ;
.bss:0041946A                 db    ? ;
.bss:0041946B                 db    ? ;
.bss:0041946C                 db    ? ;
.bss:0041946D                 db    ? ;
.bss:0041946E                 db    ? ;
.bss:0041946F                 db    ? ;
.bss:00419470                 db    ? ;
.bss:00419471                 db    ? ;
.bss:00419472                 db    ? ;
.bss:00419473                 db    ? ;
.bss:00419474                 db    ? ;
.bss:00419475                 db    ? ;
.bss:00419476                 db    ? ;
.bss:00419477                 db    ? ;
.bss:00419478                 db    ? ;
.bss:00419479                 db    ? ;
.bss:0041947A                 db    ? ;
.bss:0041947B                 db    ? ;
.bss:0041947C                 db    ? ;
.bss:0041947D                 db    ? ;
.bss:0041947E                 db    ? ;
.bss:0041947F                 db    ? ;
.bss:00419480                 db    ? ;
.bss:00419481                 db    ? ;
.bss:00419482                 db    ? ;
.bss:00419483                 db    ? ;
.bss:00419484                 db    ? ;
.bss:00419485                 db    ? ;
.bss:00419486                 db    ? ;
.bss:00419487                 db    ? ;
.bss:00419488                 db    ? ;
.bss:00419489                 db    ? ;
.bss:0041948A                 db    ? ;
.bss:0041948B                 db    ? ;
.bss:0041948C                 db    ? ;
.bss:0041948D                 db    ? ;
.bss:0041948E                 db    ? ;
.bss:0041948F                 db    ? ;
.bss:00419490 dword_419490    dd ?                    ; DATA XREF: sub_409F20+8↑r
.bss:00419490                                         ; sub_40A030:loc_40A0B2↑w ...
.bss:00419494                 align 10h
.bss:004194A0 ; struct _OSVERSIONINFOA VersionInformation
.bss:004194A0 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_40A030:loc_40A050↑o
.bss:004194A0                                         ; sub_40A030+2C↑w ...
.bss:00419534 word_419534     dw ?                    ; DATA XREF: sub_40A030:loc_40A0E3↑r
.bss:00419536                 align 4
.bss:00419538 word_419538     dw ?                    ; DATA XREF: .text:loc_409AA6↑r
.bss:00419538                                         ; .text:00409AD4↑r ...
.bss:0041953A byte_41953A     db ?                    ; DATA XREF: .text:00409A65↑r
.bss:0041953B                 align 10h
.bss:00419540 dword_419540    dd ?                    ; DATA XREF: sub_40A030+6↑r
.bss:00419540                                         ; sub_40A030+75↑w
.bss:00419544                 align 10h
.bss:00419550 dword_419550    dd ?                    ; DATA XREF: sub_414960+6E↑r
.bss:00419550                                         ; sub_414960+9A↑r ...
.bss:00419554 dword_419554    dd ?                    ; DATA XREF: sub_414960:loc_4149C8↑r
.bss:00419554                                         ; sub_414960+A0↑r ...
.bss:00419558                 align 10h
.bss:00419560 dword_419560    dd ?                    ; DATA XREF: sub_414E70↑r
.bss:00419560                                         ; .text:loc_414FA2↑w
.bss:00419564                 align 10h
.bss:00419570 dword_419570    dd ?                    ; DATA XREF: sub_4016B0+33↑w
.bss:00419570                                         ; sub_4016B0+155↑r ...
.bss:00419574                 db    ? ;
.bss:00419575                 db    ? ;
.bss:00419576                 db    ? ;
.bss:00419577                 db    ? ;
.bss:00419578                 db    ? ;
.bss:00419579                 db    ? ;
.bss:0041957A                 db    ? ;
.bss:0041957B                 db    ? ;
.bss:0041957C                 db    ? ;
.bss:0041957D                 db    ? ;
.bss:0041957E                 db    ? ;
.bss:0041957F                 db    ? ;
.bss:00419580                 db    ? ;
.bss:00419581                 db    ? ;
.bss:00419582                 db    ? ;
.bss:00419583                 db    ? ;
.bss:00419584                 db    ? ;
.bss:00419585                 db    ? ;
.bss:00419586                 db    ? ;
.bss:00419587                 db    ? ;
.bss:00419588                 db    ? ;
.bss:00419589                 db    ? ;
.bss:0041958A                 db    ? ;
.bss:0041958B                 db    ? ;
.bss:0041958C                 db    ? ;
.bss:0041958D                 db    ? ;
.bss:0041958E                 db    ? ;
.bss:0041958F                 db    ? ;
.bss:00419590 dword_419590    dd ?                    ; DATA XREF: sub_403920+71↑w
.bss:00419590                                         ; .text:00403A21↑w
.bss:00419594                 align 10h
.bss:004195A0 dword_4195A0    dd ?                    ; CODE XREF: sub_405BB4+63↑p
.bss:004195A0                                         ; DATA XREF: sub_405AB0+1E↑r ...
.bss:004195A4                 align 10h
.bss:004195B0 dword_4195B0    dd ?                    ; DATA XREF: sub_405AB0+4E↑w
.bss:004195B0                                         ; sub_405BB4+AB↑w
.bss:004195B4                 db    ? ;
.bss:004195B5                 db    ? ;
.bss:004195B6                 db    ? ;
.bss:004195B7                 db    ? ;
.bss:004195B8                 db    ? ;
.bss:004195B9                 db    ? ;
.bss:004195BA                 db    ? ;
.bss:004195BB                 db    ? ;
.bss:004195BC                 db    ? ;
.bss:004195BD                 db    ? ;
.bss:004195BE                 db    ? ;
.bss:004195BF                 db    ? ;
.bss:004195C0                 db    ? ;
.bss:004195C1                 db    ? ;
.bss:004195C2                 db    ? ;
.bss:004195C3                 db    ? ;
.bss:004195C4                 db    ? ;
.bss:004195C5                 db    ? ;
.bss:004195C6                 db    ? ;
.bss:004195C7                 db    ? ;
.bss:004195C8                 db    ? ;
.bss:004195C9                 db    ? ;
.bss:004195CA                 db    ? ;
.bss:004195CB                 db    ? ;
.bss:004195CC                 db    ? ;
.bss:004195CD                 db    ? ;
.bss:004195CE                 db    ? ;
.bss:004195CF                 db    ? ;
.bss:004195D0                 db    ? ;
.bss:004195D1                 db    ? ;
.bss:004195D2                 db    ? ;
.bss:004195D3                 db    ? ;
.bss:004195D4                 db    ? ;
.bss:004195D5                 db    ? ;
.bss:004195D6                 db    ? ;
.bss:004195D7                 db    ? ;
.bss:004195D8                 db    ? ;
.bss:004195D9                 db    ? ;
.bss:004195DA                 db    ? ;
.bss:004195DB                 db    ? ;
.bss:004195DC                 db    ? ;
.bss:004195DD                 db    ? ;
.bss:004195DE                 db    ? ;
.bss:004195DF                 db    ? ;
.bss:004195E0 dword_4195E0    dd ?                    ; DATA XREF: sub_405BB4+13↑r
.bss:004195E4                 align 1000h
.bss:004195E4 _bss            ends
.bss:004195E4
.idata:0041A000 ; Section 4. (virtual address 0001A000)
.idata:0041A000 ; Virtual size                  : 00000DE8 (   3560.)
.idata:0041A000 ; Section size in file          : 00000E00 (   3584.)
.idata:0041A000 ; Offset to raw data for section: 00016A00
.idata:0041A000 ; Flags C0000040: Data Readable Writable
.idata:0041A000 ; Alignment     : default
.idata:0041A000 ; ===========================================================================
.idata:0041A000
.idata:0041A000 ; Segment type: Externs
.idata:0041A000 ; _idata
.idata:0041A000
.idata:0041A001
.idata:0041A2B4 ;
.idata:0041A2B4 ; Imports from libintl3.dll
.idata:0041A2B4 ;
.idata:0041A2B4                 extrn __imp_libintl_bindtextdomain:dword
.idata:0041A2B4                                         ; CODE XREF: sub_4016B0+4D↑p
.idata:0041A2B4                                         ; DATA XREF: sub_4016B0+4D↑r ...
.idata:0041A2B8                 extrn libintl_gettext:dword
.idata:0041A2B8                                         ; CODE XREF: sub_4016B0+149↑p
.idata:0041A2B8                                         ; sub_4016B0+1D2↑p ...
.idata:0041A2BC                 extrn libintl_textdomain:dword
.idata:0041A2BC                                         ; CODE XREF: sub_4016B0+5A↑p
.idata:0041A2BC                                         ; DATA XREF: sub_4016B0+5A↑r ...
.idata:0041A2C0
.idata:0041A2C8 ;
.idata:0041A2C8 ; Imports from ADVAPI32.DLL
.idata:0041A2C8 ;
.idata:0041A2C8 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:0041A2C8                 extrn __imp_RegCloseKey:dword
.idata:0041A2C8                                         ; DATA XREF: RegCloseKey↑r
.idata:0041A2CC ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:0041A2CC                 extrn __imp_RegOpenKeyExA:dword
.idata:0041A2CC                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:0041A2D0 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:0041A2D0                 extrn __imp_RegQueryValueExA:dword
.idata:0041A2D0                                         ; DATA XREF: RegQueryValueExA↑r
.idata:0041A2D4
.idata:0041A2DC ;
.idata:0041A2DC ; Imports from KERNEL32.dll
.idata:0041A2DC ;
.idata:0041A2DC ; BOOL (__stdcall *AreFileApisANSI)()
.idata:0041A2DC                 extrn __imp_AreFileApisANSI:dword
.idata:0041A2DC                                         ; DATA XREF: AreFileApisANSI↑r
.idata:0041A2E0 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:0041A2E0                 extrn __imp_CloseHandle:dword
.idata:0041A2E0                                         ; DATA XREF: CloseHandle↑r
.idata:0041A2E4 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:0041A2E4                 extrn __imp_CreateDirectoryA:dword
.idata:0041A2E4                                         ; DATA XREF: CreateDirectoryA↑r
.idata:0041A2E8 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:0041A2E8                 extrn __imp_CreateFileA:dword
.idata:0041A2E8                                         ; DATA XREF: CreateFileA↑r
.idata:0041A2EC ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:0041A2EC                 extrn __imp_DeviceIoControl:dword
.idata:0041A2EC                                         ; DATA XREF: DeviceIoControl↑r
.idata:0041A2F0 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0041A2F0                 extrn __imp_ExitProcess:dword
.idata:0041A2F0                                         ; DATA XREF: ExitProcess↑r
.idata:0041A2F4 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:0041A2F4                 extrn __imp_FindClose:dword
.idata:0041A2F4                                         ; DATA XREF: FindClose↑r
.idata:0041A2F8 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0041A2F8                 extrn __imp_FindFirstFileA:dword
.idata:0041A2F8                                         ; DATA XREF: FindFirstFileA↑r
.idata:0041A2FC ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0041A2FC                 extrn __imp_FindNextFileA:dword
.idata:0041A2FC                                         ; DATA XREF: FindNextFileA↑r
.idata:0041A300 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:0041A300                 extrn __imp_FreeLibrary:dword
.idata:0041A300                                         ; DATA XREF: FreeLibrary↑r
.idata:0041A304 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041A304                 extrn __imp_GetCurrentDirectoryA:dword
.idata:0041A304                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:0041A308 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:0041A308                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:0041A308                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:0041A30C ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:0041A30C                 extrn __imp_GetDriveTypeA:dword
.idata:0041A30C                                         ; DATA XREF: GetDriveTypeA↑r
.idata:0041A310 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:0041A310                 extrn __imp_GetFileAttributesA:dword
.idata:0041A310                                         ; DATA XREF: GetFileAttributesA↑r
.idata:0041A314 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:0041A314                 extrn __imp_GetFileInformationByHandle:dword
.idata:0041A314                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:0041A318 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:0041A318                 extrn __imp_GetFileSize:dword
.idata:0041A318                                         ; DATA XREF: GetFileSize↑r
.idata:0041A31C ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:0041A31C                 extrn __imp_GetFileType:dword
.idata:0041A31C                                         ; DATA XREF: GetFileType↑r
.idata:0041A320 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:0041A320                 extrn __imp_GetFullPathNameA:dword
.idata:0041A320                                         ; DATA XREF: GetFullPathNameA↑r
.idata:0041A324 ; DWORD (__stdcall *GetLastError)()
.idata:0041A324                 extrn __imp_GetLastError:dword
.idata:0041A324                                         ; DATA XREF: GetLastError↑r
.idata:0041A328 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041A328                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:0041A328                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:0041A32C ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:0041A32C                 extrn __imp_GetModuleFileNameA:dword
.idata:0041A32C                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:0041A330 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:0041A330                 extrn __imp_GetModuleHandleA:dword
.idata:0041A330                                         ; DATA XREF: GetModuleHandleA↑r
.idata:0041A334 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:0041A334                 extrn __imp_GetProcAddress:dword
.idata:0041A334                                         ; DATA XREF: GetProcAddress↑r
.idata:0041A338 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:0041A338                 extrn __imp_GetProcessHeap:dword
.idata:0041A338                                         ; DATA XREF: GetProcessHeap↑r
.idata:0041A33C ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:0041A33C                 extrn __imp_GetShortPathNameA:dword
.idata:0041A33C                                         ; DATA XREF: GetShortPathNameA↑r
.idata:0041A340 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:0041A340                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:0041A340                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:0041A344 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:0041A344                 extrn __imp_GetTimeZoneInformation:dword
.idata:0041A344                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:0041A348 ; DWORD (__stdcall *GetVersion)()
.idata:0041A348                 extrn __imp_GetVersion:dword
.idata:0041A348                                         ; DATA XREF: GetVersion↑r
.idata:0041A34C ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:0041A34C                 extrn __imp_GetVersionExA:dword
.idata:0041A34C                                         ; DATA XREF: GetVersionExA↑r
.idata:0041A350 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:0041A350                 extrn __imp_GetVolumeInformationA:dword
.idata:0041A350                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:0041A354 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:0041A354                 extrn __imp_HeapAlloc:dword
.idata:0041A354                                         ; DATA XREF: HeapAlloc↑r
.idata:0041A358 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0041A358                 extrn __imp_HeapFree:dword
.idata:0041A358                                         ; DATA XREF: HeapFree↑r
.idata:0041A35C ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:0041A35C                 extrn __imp_LoadLibraryA:dword
.idata:0041A35C                                         ; DATA XREF: LoadLibraryA↑r
.idata:0041A360 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:0041A360                 extrn __imp_MultiByteToWideChar:dword
.idata:0041A360                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:0041A364 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:0041A364                 extrn __imp_PeekNamedPipe:dword
.idata:0041A364                                         ; DATA XREF: PeekNamedPipe↑r
.idata:0041A368 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0041A368                 extrn __imp_SetErrorMode:dword
.idata:0041A368                                         ; DATA XREF: SetErrorMode↑r
.idata:0041A36C ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0041A36C                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0041A36C                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0041A370 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:0041A370                 extrn __imp_UnlockFile:dword
.idata:0041A370                                         ; DATA XREF: UnlockFile↑r
.idata:0041A374 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:0041A374                 extrn __imp_lstrcmpiA:dword
.idata:0041A374                                         ; DATA XREF: lstrcmpiA↑r
.idata:0041A378 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:0041A378                 extrn __imp_lstrcpyA:dword
.idata:0041A378                                         ; DATA XREF: lstrcpyA↑r
.idata:0041A37C
.idata:0041A384 ;
.idata:0041A384 ; Imports from msvcrt.dll
.idata:0041A384 ;
.idata:0041A384 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:0041A384                 extrn __imp__chmod:dword
.idata:0041A384                                         ; DATA XREF: _chmod↑r
.idata:0041A388 ; int (__cdecl *_close)(int FileHandle)
.idata:0041A388                 extrn __imp__close:dword
.idata:0041A388                                         ; DATA XREF: _close↑r
.idata:0041A38C ; int (__cdecl *_getpid)()
.idata:0041A38C                 extrn __imp__getpid:dword
.idata:0041A38C                                         ; DATA XREF: _getpid↑r
.idata:0041A390 ; int (__cdecl *_isatty)(int FileHandle)
.idata:0041A390                 extrn __imp__isatty:dword
.idata:0041A390                                         ; DATA XREF: _isatty↑r
.idata:0041A394 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:0041A394                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:0041A398 ; int (__cdecl *_read)(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.idata:0041A398                 extrn __imp__read:dword ; DATA XREF: _read↑r
.idata:0041A39C ; char *(__cdecl *_strdup)(const char *String)
.idata:0041A39C                 extrn __imp__strdup:dword
.idata:0041A39C                                         ; DATA XREF: _strdup↑r
.idata:0041A3A0 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:0041A3A0                 extrn __imp__stricmp:dword
.idata:0041A3A0                                         ; DATA XREF: _stricmp↑r
.idata:0041A3A4
.idata:0041A3AC ;
.idata:0041A3AC ; Imports from MSVCP60.DLL
.idata:0041A3AC ;
.idata:0041A3AC ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0041A3AC                 extrn __imp_mbrtowc:dword
.idata:0041A3AC                                         ; DATA XREF: mbrtowc↑r
.idata:0041A3B0
.idata:0041A3B8 ;
.idata:0041A3B8 ; Imports from msvcrt.dll
.idata:0041A3B8 ;
.idata:0041A3B8                 extrn __imp___getmainargs:dword
.idata:0041A3B8                                         ; DATA XREF: __getmainargs↑r
.idata:0041A3BC ; int _mb_cur_max
.idata:0041A3BC                 extrn __mb_cur_max:dword
.idata:0041A3BC                                         ; DATA XREF: sub_4020F0+38↑r
.idata:0041A3BC                                         ; sub_4020F0+367↑r ...
.idata:0041A3C0 ; char ***(__cdecl *__p__environ)()
.idata:0041A3C0                 extrn __imp___p__environ:dword
.idata:0041A3C0                                         ; DATA XREF: __p__environ↑r
.idata:0041A3C4 ; int *(__cdecl *__p__fmode)()
.idata:0041A3C4                 extrn __imp___p__fmode:dword
.idata:0041A3C4                                         ; DATA XREF: __p__fmode↑r
.idata:0041A3C8 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0041A3C8                 extrn __set_app_type:dword
.idata:0041A3C8                                         ; CODE XREF: start+D↑p
.idata:0041A3C8                                         ; .text:0040102D↑p
.idata:0041A3C8                                         ; DATA XREF: ...
.idata:0041A3CC                 extrn __imp__assert:dword
.idata:0041A3CC                                         ; DATA XREF: _assert↑r
.idata:0041A3D0 ; void (__cdecl *_cexit)()
.idata:0041A3D0                 extrn __imp__cexit:dword
.idata:0041A3D0                                         ; DATA XREF: _cexit↑r
.idata:0041A3D4 ; int (__cdecl *_close_0)(int FileHandle)
.idata:0041A3D4                 extrn __imp__close_0:dword
.idata:0041A3D4                                         ; DATA XREF: _close_0↑r
.idata:0041A3D8 ; int *(__cdecl *_errno)()
.idata:0041A3D8                 extrn __imp__errno:dword
.idata:0041A3D8                                         ; DATA XREF: _errno↑r
.idata:0041A3DC ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:0041A3DC                 extrn __imp__fdopen:dword
.idata:0041A3DC                                         ; DATA XREF: _fdopen↑r
.idata:0041A3E0 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:0041A3E0                 extrn __imp__filelengthi64:dword
.idata:0041A3E0                                         ; DATA XREF: _filelengthi64↑r
.idata:0041A3E4 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0041A3E4                 extrn __imp__flsbuf:dword
.idata:0041A3E4                                         ; DATA XREF: _flsbuf↑r
.idata:0041A3E8 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:0041A3E8                 extrn __imp__get_osfhandle:dword
.idata:0041A3E8                                         ; DATA XREF: _get_osfhandle↑r
.idata:0041A3EC ; FILE iob[]
.idata:0041A3EC                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0041A3EC                                         ; sub_401080+75↑r ...
.idata:0041A3F0 ; int (__cdecl *_isctype)(int C, int Type)
.idata:0041A3F0                 extrn __imp__isctype:dword
.idata:0041A3F0                                         ; DATA XREF: _isctype↑r
.idata:0041A3F4 ; __int64 (__cdecl *_lseeki64)(int FileHandle, __int64 Offset, int Origin)
.idata:0041A3F4                 extrn __imp__lseeki64:dword
.idata:0041A3F4                                         ; DATA XREF: _lseeki64↑r
.idata:0041A3F8 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0041A3F8                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0041A3F8                                         ; DATA XREF: .text:0040106C↑r
.idata:0041A3FC ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:0041A3FC                 extrn __imp__open_0:dword
.idata:0041A3FC                                         ; DATA XREF: _open_0↑r
.idata:0041A400 ; const unsigned __int16 *pctype
.idata:0041A400                 extrn _pctype:dword     ; DATA XREF: sub_4020F0:loc_4029BE↑r
.idata:0041A400                                         ; sub_4020F0:loc_4029D0↑r ...
.idata:0041A404 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0041A404                 extrn __imp__setmode:dword
.idata:0041A404                                         ; DATA XREF: _setmode↑r
.idata:0041A408 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:0041A408                 extrn __imp__stricmp_0:dword
.idata:0041A408                                         ; DATA XREF: _stricmp_0↑r
.idata:0041A40C ; void (__cdecl __noreturn *abort)()
.idata:0041A40C                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0041A410 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0041A410                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0041A410                                         ; DATA XREF: sub_401040+C↑r
.idata:0041A414 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0041A414                 extrn __imp_calloc:dword
.idata:0041A414                                         ; DATA XREF: calloc↑r
.idata:0041A418 ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:0041A418                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:0041A41C ; void (__cdecl __noreturn *exit)(int Code)
.idata:0041A41C                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0041A420 ; int (__cdecl *fclose)(FILE *Stream)
.idata:0041A420                 extrn __imp_fclose:dword
.idata:0041A420                                         ; DATA XREF: fclose↑r
.idata:0041A424 ; int (__cdecl *fflush)(FILE *Stream)
.idata:0041A424                 extrn __imp_fflush:dword
.idata:0041A424                                         ; DATA XREF: fflush↑r
.idata:0041A428 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:0041A428                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:0041A42C ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0041A42C                 extrn __imp_fprintf:dword
.idata:0041A42C                                         ; DATA XREF: fprintf↑r
.idata:0041A430 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0041A430                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0041A434 ; void (__cdecl *free)(void *Block)
.idata:0041A434                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0041A438 ; char *(__cdecl *getenv)(const char *VarName)
.idata:0041A438                 extrn __imp_getenv:dword
.idata:0041A438                                         ; DATA XREF: getenv↑r
.idata:0041A43C ; int (__cdecl *isalpha)(int C)
.idata:0041A43C                 extrn __imp_isalpha:dword
.idata:0041A43C                                         ; DATA XREF: isalpha↑r
.idata:0041A440 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0041A440                 extrn __imp_iswctype:dword
.idata:0041A440                                         ; DATA XREF: iswctype↑r
.idata:0041A444 ; void *(__cdecl *malloc)(size_t Size)
.idata:0041A444                 extrn __imp_malloc:dword
.idata:0041A444                                         ; DATA XREF: malloc↑r
.idata:0041A448 ; void *(__cdecl *memchr)(const void *Buf, int Val, size_t MaxCount)
.idata:0041A448                 extrn __imp_memchr:dword
.idata:0041A448                                         ; DATA XREF: memchr↑r
.idata:0041A44C ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0041A44C                 extrn __imp_memcpy:dword
.idata:0041A44C                                         ; DATA XREF: memcpy↑r
.idata:0041A450 ; void *(__cdecl *memmove)(void *, const void *Src, size_t Size)
.idata:0041A450                 extrn __imp_memmove:dword
.idata:0041A450                                         ; DATA XREF: memmove↑r
.idata:0041A454 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0041A454                 extrn __imp_memset:dword
.idata:0041A454                                         ; DATA XREF: memset↑r
.idata:0041A458 ; int (*printf)(const char *const Format, ...)
.idata:0041A458                 extrn __imp_printf:dword
.idata:0041A458                                         ; DATA XREF: printf↑r
.idata:0041A45C ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0041A45C                 extrn __imp_realloc:dword
.idata:0041A45C                                         ; DATA XREF: realloc↑r
.idata:0041A460 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0041A460                 extrn __imp_setlocale:dword
.idata:0041A460                                         ; DATA XREF: setlocale↑r
.idata:0041A464 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0041A464                 extrn __imp_signal:dword
.idata:0041A464                                         ; DATA XREF: signal↑r
.idata:0041A468 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:0041A468                 extrn __imp_sprintf:dword
.idata:0041A468                                         ; DATA XREF: sprintf↑r
.idata:0041A46C ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:0041A46C                 extrn __imp_sscanf:dword
.idata:0041A46C                                         ; DATA XREF: sscanf↑r
.idata:0041A470 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:0041A470                 extrn __imp_strcat:dword
.idata:0041A470                                         ; DATA XREF: strcat↑r
.idata:0041A474 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0041A474                 extrn __imp_strchr:dword
.idata:0041A474                                         ; DATA XREF: strchr↑r
.idata:0041A478 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0041A478                 extrn __imp_strcmp:dword
.idata:0041A478                                         ; DATA XREF: strcmp↑r
.idata:0041A47C ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:0041A47C                 extrn __imp_strcpy:dword
.idata:0041A47C                                         ; DATA XREF: strcpy↑r
.idata:0041A480 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0041A480                 extrn __imp_strerror:dword
.idata:0041A480                                         ; DATA XREF: strerror↑r
.idata:0041A484 ; size_t (__cdecl *strlen)(const char *Str)
.idata:0041A484                 extrn __imp_strlen:dword
.idata:0041A484                                         ; DATA XREF: strlen↑r
.idata:0041A488 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0041A488                 extrn __imp_strncmp:dword
.idata:0041A488                                         ; DATA XREF: strncmp↑r
.idata:0041A48C ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:0041A48C                 extrn __imp_strncpy:dword
.idata:0041A48C                                         ; DATA XREF: strncpy↑r
.idata:0041A490 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:0041A490                 extrn __imp_strpbrk:dword
.idata:0041A490                                         ; DATA XREF: strpbrk↑r
.idata:0041A494 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:0041A494                 extrn __imp_strrchr:dword
.idata:0041A494                                         ; DATA XREF: strrchr↑r
.idata:0041A498 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:0041A498                 extrn __imp_strspn:dword
.idata:0041A498                                         ; DATA XREF: strspn↑r
.idata:0041A49C ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:0041A49C                 extrn __imp_strstr:dword
.idata:0041A49C                                         ; DATA XREF: strstr↑r
.idata:0041A4A0 ; int (__cdecl *toupper)(int C)
.idata:0041A4A0                 extrn __imp_toupper:dword
.idata:0041A4A0                                         ; DATA XREF: toupper↑r
.idata:0041A4A4 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0041A4A4                 extrn __imp_vfprintf:dword
.idata:0041A4A4                                         ; DATA XREF: vfprintf↑r
.idata:0041A4A8
.idata:0041A4B0 ;
.idata:0041A4B0 ; Imports from OLE32.dll
.idata:0041A4B0 ;
.idata:0041A4B0 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:0041A4B0                 extrn __imp_CoCreateInstance:dword
.idata:0041A4B0                                         ; DATA XREF: CoCreateInstance↑r
.idata:0041A4B4 ; void (__stdcall *CoUninitialize)()
.idata:0041A4B4                 extrn __imp_CoUninitialize:dword
.idata:0041A4B4                                         ; DATA XREF: CoUninitialize↑r
.idata:0041A4B8 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:0041A4B8                 extrn __imp_OleInitialize:dword
.idata:0041A4B8                                         ; DATA XREF: OleInitialize↑r
.idata:0041A4BC
.idata:0041A4BC
.idata:0041A4BC
.idata:0041A4BC                 end start
