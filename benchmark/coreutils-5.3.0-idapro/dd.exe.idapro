.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 0DED5D104200EB050B0379FB55F9AB40CAF409F170CF62C9B46E3334DC6D012F
.text:00401000 ; Input MD5    : 9C36FDFDCA4551C377C0FE97C5D64AEF
.text:00401000 ; Input CRC32  : 8735C908
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/dd.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A242 (Wed Apr 20 18:41:06 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00012F90 (  77712.)
.text:00401000 ; Section size in file          : 00013000 (  77824.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_402550+66↓p
.text:00401040                                         ; .text:004128F0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_412890
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_414000
.text:004010A2                 mov     edx, dword_4140B0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_414004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4140D0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4140D0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_412860
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_414000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_414004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_402550
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_412890
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char aAscii[]
.text:00401280 aAscii          db 'ascii',0            ; DATA XREF: sub_403500+675↓o
.text:00401286                 align 4
.text:00401288                 dd 0
.text:0040128C                 dd 801h, 64636265h, 6369h, 0
.text:0040129C                 dd 802h, 6D6269h, 2 dup(0)
.text:004012AC                 dd 804h, 636F6C62h, 6Bh, 0
.text:004012BC                 dd 808h, 6C626E75h, 6B636Fh, 0
.text:004012CC                 dd 810h, 7361636Ch, 65h, 0
.text:004012DC                 dd 820h, 73616375h, 65h, 0
.text:004012EC                 dd 840h, 62617773h, 2 dup(0)
.text:004012FC                 dd 880h, 72656F6Eh, 726F72h, 0
.text:0040130C                 dd 100h, 72636F6Eh, 746165h, 0
.text:0040131C                 dd 1000h, 6C637865h, 2 dup(0)
.text:0040132C                 dd 2000h, 72746F6Eh, 636E75h, 0
.text:0040133C                 dd 200h, 636E7973h, 2 dup(0)
.text:0040134C                 dd 400h, 74616466h, 6E797361h, 63h, 4000h, 6E797366h, 63h
.text:0040134C                 dd 0
.text:0040136C                 dd 8000h, 4 dup(0)
.text:00401380 ; const char aAppend[]
.text:00401380 aAppend         db 'append',0           ; DATA XREF: sub_403500+62F↓o
.text:00401380                                         ; sub_403500+652↓o
.text:00401387                 align 4
.text:00401388                 dd 0
.text:0040138C                 dd 8, 65726964h, 7463h, 2 dup(0)
.text:004013A0 aDsync          db 'dsync',0
.text:004013A6                 align 10h
.text:004013B0 aNoctty         db 'noctty',0
.text:004013B7                 align 10h
.text:004013C0 aNofollow       db 'nofollow',0
.text:004013C9                 align 10h
.text:004013D0 aNonblock       db 'nonblock',0
.text:004013D9                 align 4
.text:004013DC                 dd 4, 636E7973h, 2 dup(0)
.text:004013EC                 dd 2000h, 4 dup(0)
.text:00401400 ; const char aNoxfer[]
.text:00401400 aNoxfer         db 'noxfer',0           ; DATA XREF: sub_403500+258↓o
.text:00401407                 align 4
.text:00401408                 dd 0
.text:0040140C                 dd 1, 4 dup(0)
.text:00401420 byte_401420     db 0                    ; DATA XREF: sub_403BE0+A7↓r
.text:00401421                 db 1, 2, 3
.text:00401424                 dd 2F2E2D37h, 0B250516h, 0F0E0D0Ch, 13121110h, 26323D3Ch
.text:00401424                 dd 273F1918h, 1F1E1D1Ch, 7B7F4F40h, 7D506C5Bh, 4E5C5D4Dh
.text:00401424                 dd 614B606Bh, 0F3F2F1F0h, 0F7F6F5F4h, 5E7AF9F8h, 6F6E7E4Ch
.text:00401424                 dd 0C3C2C17Ch, 0C7C6C5C4h, 0D2D1C9C8h, 0D6D5D4D3h, 0E2D9D8D7h
.text:00401424                 dd 0E6E5E4E3h, 4AE9E8E7h, 6D5F5AE0h, 83828179h, 87868584h
.text:00401424                 dd 92918988h, 96959493h, 0A2999897h, 0A6A5A4A3h, 0C0A9A8A7h
.text:00401424                 dd 7A1D06Ah, 23222120h, 17061524h, 2B2A2928h, 1B0A092Ch
.text:00401424                 dd 331A3130h, 8363534h, 3B3A3938h, 0E13E1404h, 44434241h
.text:00401424                 dd 48474645h, 53525149h, 57565554h, 63625958h, 67666564h
.text:00401424                 dd 71706968h, 75747372h, 80787776h, 8D8C8B8Ah, 9A908F8Eh
.text:00401424                 dd 9E9D9C9Bh, 0ABAAA09Fh, 0AFAEADACh, 0B3B2B1B0h, 0B7B6B5B4h
.text:00401424                 dd 0BBBAB9B8h, 0BFBEBDBCh, 0CDCCCBCAh, 0DBDACFCEh, 0DFDEDDDCh
.text:00401424                 dd 0EDECEBEAh, 0FBFAEFEEh, 0FFFEFDFCh
.text:00401520 byte_401520     db 0                    ; DATA XREF: sub_403BE0+E7↓r
.text:00401521                 db 1, 2, 3
.text:00401524                 dd 2F2E2D37h, 0B250516h, 0F0E0D0Ch, 13121110h, 26323D3Ch
.text:00401524                 dd 273F1918h, 1F1E1D1Ch, 7B7F5A40h, 7D506C5Bh, 4E5C5D4Dh
.text:00401524                 dd 614B606Bh, 0F3F2F1F0h, 0F7F6F5F4h, 5E7AF9F8h, 6F6E7E4Ch
.text:00401524                 dd 0C3C2C17Ch, 0C7C6C5C4h, 0D2D1C9C8h, 0D6D5D4D3h, 0E2D9D8D7h
.text:00401524                 dd 0E6E5E4E3h, 0ADE9E8E7h, 6D5FBDE0h, 83828179h, 87868584h
.text:00401524                 dd 92918988h, 96959493h, 0A2999897h, 0A6A5A4A3h, 0C0A9A8A7h
.text:00401524                 dd 7A1D04Fh, 23222120h, 17061524h, 2B2A2928h, 1B0A092Ch
.text:00401524                 dd 331A3130h, 8363534h, 3B3A3938h, 0E13E1404h, 44434241h
.text:00401524                 dd 48474645h, 53525149h, 57565554h, 63625958h, 67666564h
.text:00401524                 dd 71706968h, 75747372h, 80787776h, 8D8C8B8Ah, 9A908F8Eh
.text:00401524                 dd 9E9D9C9Bh, 0ABAAA09Fh, 0AFAEADACh, 0B3B2B1B0h, 0B7B6B5B4h
.text:00401524                 dd 0BBBAB9B8h, 0BFBEBDBCh, 0CDCCCBCAh, 0DBDACFCEh, 0DFDEDDDCh
.text:00401524                 dd 0EDECEBEAh, 0FBFAEFEEh, 0FFFEFDFCh
.text:00401620 byte_401620     db 0                    ; DATA XREF: sub_403BE0+27↓r
.text:00401621                 db 1, 2, 3
.text:00401624                 dd 7F86099Ch, 0B8E8D97h, 0F0E0D0Ch, 13121110h, 8708859Dh
.text:00401624                 dd 8F921918h, 1F1E1D1Ch, 83828180h, 1B170A84h, 8B8A8988h
.text:00401624                 dd 706058Ch, 93169190h, 4969594h, 9B9A9998h, 1A9E1514h
.text:00401624                 dd 0A2A1A020h, 0A6A5A4A3h, 2E5BA8A7h, 212B283Ch, 0ABAAA926h
.text:00401624                 dd 0AFAEADACh, 245DB1B0h, 5E3B292Ah, 0B3B22F2Dh, 0B7B6B5B4h
.text:00401624                 dd 2C7CB9B8h, 3F3E5F25h, 0BDBCBBBAh, 0C1C0BFBEh, 233A60C2h
.text:00401624                 dd 223D2740h, 636261C3h, 67666564h, 0C5C46968h, 0C9C8C7C6h
.text:00401624                 dd 6C6B6ACAh, 706F6E6Dh, 0CCCB7271h, 0D0CFCECDh, 74737ED1h
.text:00401624                 dd 78777675h, 0D3D27A79h, 0D7D6D5D4h, 0DBDAD9D8h, 0DFDEDDDCh
.text:00401624                 dd 0E3E2E1E0h, 0E7E6E5E4h, 4342417Bh, 47464544h, 0E9E84948h
.text:00401624                 dd 0EDECEBEAh, 4C4B4A7Dh, 504F4E4Dh, 0EFEE5251h, 0F3F2F1F0h
.text:00401624                 dd 54539F5Ch, 58575655h, 0F5F45A59h, 0F9F8F7F6h, 33323130h
.text:00401624                 dd 37363534h, 0FBFA3938h, 0FFFEFDFCh
.text:00401720 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401720                                         ; DATA XREF: sub_402210+C↓o
.text:00401747                 align 20h
.text:00401760 aUsageSOperandO db 'Usage: %s [OPERAND]...',0Ah
.text:00401760                                         ; DATA XREF: sub_402210:loc_402250↓o
.text:00401760                 db '  or:  %s OPTION',0Ah,0
.text:00401789                 align 20h
.text:004017A0 aCopyAFileConve db 'Copy a file, converting and formatting according to the operands.'
.text:004017A0                                         ; DATA XREF: sub_402210+63↓o
.text:004017A0                 db 0Ah
.text:004017A0                 db 0Ah
.text:004017A0                 db '  bs=BYTES        force ibs=BYTES and obs=BYTES',0Ah
.text:004017A0                 db '  cbs=BYTES       convert BYTES bytes at a time',0Ah
.text:004017A0                 db '  conv=CONVS      convert the file as per the comma separated sym'
.text:004017A0                 db 'bol list',0Ah
.text:004017A0                 db '  count=BLOCKS    copy only BLOCKS input blocks',0Ah
.text:004017A0                 db '  ibs=BYTES       read BYTES bytes at a time',0Ah,0
.text:004018EB                 align 20h
.text:00401900 aIfFileReadFrom db '  if=FILE         read from FILE instead of stdin',0Ah
.text:00401900                                         ; DATA XREF: sub_402210+85↓o
.text:00401900                 db '  iflag=FLAGS     read as per the comma separated symbol list',0Ah
.text:00401900                 db '  obs=BYTES       write BYTES bytes at a time',0Ah
.text:00401900                 db '  of=FILE         write to FILE instead of stdout',0Ah
.text:00401900                 db '  oflag=FLAGS     write as per the comma separated symbol list',0Ah
.text:00401900                 db '  seek=BLOCKS     skip BLOCKS obs-sized blocks at start of output'
.text:00401900                 db 0Ah
.text:00401900                 db '  skip=BLOCKS     skip BLOCKS ibs-sized blocks at start of input',0Ah
.text:00401900                 db '  status=noxfer   suppress transfer statistics',0Ah,0
.text:00401AC2                 align 20h
.text:00401AE0 aBlocksAndBytes db 0Ah                  ; DATA XREF: sub_402210+A7↓o
.text:00401AE0                 db 'BLOCKS and BYTES may be followed by the following multiplicative '
.text:00401AE0                 db 'suffixes:',0Ah
.text:00401AE0                 db 'xM M, c 1, w 2, b 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024'
.text:00401AE0                 db ',',0Ah
.text:00401AE0                 db 'GB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y.'
.text:00401AE0                 db 0Ah
.text:00401AE0                 db 0Ah
.text:00401AE0                 db 'Each CONV symbol may be:',0Ah
.text:00401AE0                 db 0Ah,0
.text:00401BCD                 align 20h
.text:00401BE0 aAsciiFromEbcdi db '  ascii     from EBCDIC to ASCII',0Ah
.text:00401BE0                                         ; DATA XREF: sub_402210+C9↓o
.text:00401BE0                 db '  ebcdic    from ASCII to EBCDIC',0Ah
.text:00401BE0                 db '  ibm       from ASCII to alternate EBCDIC',0Ah
.text:00401BE0                 db '  block     pad newline-terminated records with spaces to cbs-siz'
.text:00401BE0                 db 'e',0Ah
.text:00401BE0                 db '  unblock   replace trailing spaces in cbs-size records with newl'
.text:00401BE0                 db 'ine',0Ah
.text:00401BE0                 db '  lcase     change upper case to lower case',0Ah,0
.text:00401D02                 align 20h
.text:00401D20 aNocreatDoNotCr db '  nocreat   do not create the output file',0Ah
.text:00401D20                                         ; DATA XREF: sub_402210+EB↓o
.text:00401D20                 db '  excl      fail if the output file already exists',0Ah
.text:00401D20                 db '  notrunc   do not truncate the output file',0Ah
.text:00401D20                 db '  ucase     change lower case to upper case',0Ah
.text:00401D20                 db '  swab      swap every pair of input bytes',0Ah
.text:00401D20                 db '  noerror   continue after read errors',0Ah
.text:00401D20                 db '  sync      pad every input block with NULs to ibs-size; when use'
.text:00401D20                 db 'd',0Ah
.text:00401D20                 db '              with block or unblock, pad with spaces rather than '
.text:00401D20                 db 'NULs',0Ah
.text:00401D20                 db '  fdatasync physically write output file data before finishing',0Ah
.text:00401D20                 db '  fsync     likewise, but also write metadata',0Ah,0
.text:00401F1E                 align 10h
.text:00401F20 aEachFlagSymbol db 0Ah                  ; DATA XREF: sub_402210+10D↓o
.text:00401F20                 db 'Each FLAG symbol may be:',0Ah
.text:00401F20                 db 0Ah
.text:00401F20                 db '  append    append mode (makes sense only for output)',0Ah,0
.text:00401F72                 align 10h
.text:00401F80 aSyncLikewiseBu db '  sync      likewise, but also for metadata',0Ah,0
.text:00401F80                                         ; DATA XREF: sub_402210+12F↓o
.text:00401FAD                 align 20h
.text:00401FC0 aNonblockUseNon db '  nonblock  use non-blocking I/O',0Ah,0
.text:00401FC0                                         ; DATA XREF: sub_402210+151↓o
.text:00401FE2                 align 20h
.text:00402000 aSendingASigusr db 0Ah                  ; DATA XREF: sub_402210+173↓o
.text:00402000                 db 'Sending a SIGUSR1 signal to a running `dd',27h,' process makes it'
.text:00402000                 db 0Ah
.text:00402000                 db 'print I/O statistics to standard error, then to resume copying.',0Ah
.text:00402000                 db 0Ah
.text:00402000                 db '  $ dd if=/dev/zero of=/dev/null& pid=$!',0Ah
.text:00402000                 db '  $ kill -USR1 $pid; sleep 1; kill $pid',0Ah
.text:00402000                 db '  18335302+0 records in',0Ah
.text:00402000                 db '  18335302+0 records out',0Ah
.text:00402000                 db '  9387674624 bytes (9.4 GB) copied, 34.6279 seconds, 271 MB/s',0Ah
.text:00402000                 db 0Ah
.text:00402000                 db 'Options are:',0Ah
.text:00402000                 db 0Ah,0
.text:0040214E                 align 20h
.text:00402160 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00402160                                         ; DATA XREF: sub_402210+195↓o
.text:0040218D                 align 20h
.text:004021A0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004021A0                                         ; DATA XREF: sub_402210+1B7↓o
.text:004021D6 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_402210+1D9↓o
.text:004021D6                 db 'Report bugs to <%s>.',0Ah,0
.text:004021ED aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004021ED                                         ; DATA XREF: sub_402210+1E6↓o
.text:00402203                 align 10h
.text:00402210
.text:00402210 ; =============== S U B R O U T I N E =======================================
.text:00402210
.text:00402210 ; Attributes: noreturn
.text:00402210
.text:00402210 ; void __cdecl __noreturn sub_402210(int Code)
.text:00402210 sub_402210      proc near               ; CODE XREF: sub_402550+E5↓p
.text:00402210                                         ; sub_403500+523↓p ...
.text:00402210
.text:00402210 Stream          = dword ptr -1Ch
.text:00402210 Format          = dword ptr -18h
.text:00402210 var_14          = dword ptr -14h
.text:00402210 Code            = dword ptr  4
.text:00402210
.text:00402210                 push    ebx
.text:00402211                 sub     esp, 18h
.text:00402214                 mov     ebx, [esp+1Ch+Code]
.text:00402218                 test    ebx, ebx
.text:0040221A                 jz      short loc_402250
.text:0040221C                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402223                 call    ds:libintl_gettext
.text:00402229                 mov     edx, ds:_iob
.text:0040222F                 mov     ecx, ds:dword_4157E0
.text:00402235                 add     edx, 40h ; '@'
.text:00402238                 mov     [esp+1Ch+var_14], ecx
.text:0040223C                 mov     [esp+1Ch+Format], eax ; Format
.text:00402240                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00402243                 call    fprintf
.text:00402248
.text:00402248 loc_402248:                             ; CODE XREF: sub_402210+1F6↓j
.text:00402248                 mov     [esp+1Ch+Stream], ebx ; Code
.text:0040224B                 call    exit
.text:00402250 ; ---------------------------------------------------------------------------
.text:00402250
.text:00402250 loc_402250:                             ; CODE XREF: sub_402210+A↑j
.text:00402250                 mov     [esp+1Ch+Stream], offset aUsageSOperandO ; "Usage: %s [OPERAND]...\n  or:  %s OPTIO"...
.text:00402257                 call    ds:libintl_gettext
.text:0040225D                 mov     ecx, ds:dword_4157E0
.text:00402263                 mov     [esp+1Ch+Stream], eax ; Format
.text:00402266                 mov     [esp+1Ch+var_14], ecx
.text:0040226A                 mov     [esp+1Ch+Format], ecx
.text:0040226E                 call    printf
.text:00402273                 mov     [esp+1Ch+Stream], offset aCopyAFileConve ; "Copy a file, converting and formatting "...
.text:0040227A                 call    ds:libintl_gettext
.text:00402280                 mov     ecx, ds:_iob
.text:00402286                 add     ecx, 20h ; ' '
.text:00402289                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040228D                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402290                 call    fputs
.text:00402295                 mov     [esp+1Ch+Stream], offset aIfFileReadFrom ; "  if=FILE         read from FILE instea"...
.text:0040229C                 call    ds:libintl_gettext
.text:004022A2                 mov     ecx, ds:_iob
.text:004022A8                 add     ecx, 20h ; ' '
.text:004022AB                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004022AF                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004022B2                 call    fputs
.text:004022B7                 mov     [esp+1Ch+Stream], offset aBlocksAndBytes ; "\nBLOCKS and BYTES may be followed by t"...
.text:004022BE                 call    ds:libintl_gettext
.text:004022C4                 mov     ecx, ds:_iob
.text:004022CA                 add     ecx, 20h ; ' '
.text:004022CD                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004022D1                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004022D4                 call    fputs
.text:004022D9                 mov     [esp+1Ch+Stream], offset aAsciiFromEbcdi ; "  ascii     from EBCDIC to ASCII\n  ebc"...
.text:004022E0                 call    ds:libintl_gettext
.text:004022E6                 mov     ecx, ds:_iob
.text:004022EC                 add     ecx, 20h ; ' '
.text:004022EF                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004022F3                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004022F6                 call    fputs
.text:004022FB                 mov     [esp+1Ch+Stream], offset aNocreatDoNotCr ; "  nocreat   do not create the output fi"...
.text:00402302                 call    ds:libintl_gettext
.text:00402308                 mov     ecx, ds:_iob
.text:0040230E                 add     ecx, 20h ; ' '
.text:00402311                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402315                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402318                 call    fputs
.text:0040231D                 mov     [esp+1Ch+Stream], offset aEachFlagSymbol ; "\nEach FLAG symbol may be:\n\n  append "...
.text:00402324                 call    ds:libintl_gettext
.text:0040232A                 mov     ecx, ds:_iob
.text:00402330                 add     ecx, 20h ; ' '
.text:00402333                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402337                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040233A                 call    fputs
.text:0040233F                 mov     [esp+1Ch+Stream], offset aSyncLikewiseBu ; "  sync      likewise, but also for meta"...
.text:00402346                 call    ds:libintl_gettext
.text:0040234C                 mov     ecx, ds:_iob
.text:00402352                 add     ecx, 20h ; ' '
.text:00402355                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402359                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040235C                 call    fputs
.text:00402361                 mov     [esp+1Ch+Stream], offset aNonblockUseNon ; "  nonblock  use non-blocking I/O\n"
.text:00402368                 call    ds:libintl_gettext
.text:0040236E                 mov     ecx, ds:_iob
.text:00402374                 add     ecx, 20h ; ' '
.text:00402377                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040237B                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040237E                 call    fputs
.text:00402383                 mov     [esp+1Ch+Stream], offset aSendingASigusr ; "\nSending a SIGUSR1 signal to a running"...
.text:0040238A                 call    ds:libintl_gettext
.text:00402390                 mov     ecx, ds:_iob
.text:00402396                 add     ecx, 20h ; ' '
.text:00402399                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040239D                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004023A0                 call    fputs
.text:004023A5                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004023AC                 call    ds:libintl_gettext
.text:004023B2                 mov     ecx, ds:_iob
.text:004023B8                 add     ecx, 20h ; ' '
.text:004023BB                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004023BF                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004023C2                 call    fputs
.text:004023C7                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:004023CE                 call    ds:libintl_gettext
.text:004023D4                 mov     ecx, ds:_iob
.text:004023DA                 add     ecx, 20h ; ' '
.text:004023DD                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004023E1                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004023E4                 call    fputs
.text:004023E9                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004023F0                 call    ds:libintl_gettext
.text:004023F6                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004023FE                 mov     [esp+1Ch+Stream], eax ; Format
.text:00402401                 call    printf
.text:00402406                 jmp     loc_402248
.text:00402406 sub_402210      endp
.text:00402406
.text:00402406 ; ---------------------------------------------------------------------------
.text:0040240B ; const char Locale
.text:0040240B Locale          db 0                    ; DATA XREF: sub_402550+23↓o
.text:0040240B                                         ; sub_402550+C7↓o
.text:0040240C                 align 20h
.text:00402420 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00402420                                         ; DATA XREF: sub_402550+3D↓o
.text:00402443 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_402550+45↓o
.text:00402443                                         ; sub_402550+52↓o ...
.text:0040244D aStuartKemp     db 'Stuart Kemp',0      ; DATA XREF: sub_402550+73↓o
.text:00402459 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_402550+7B↓o
.text:00402469 aPaulRubin      db 'Paul Rubin',0       ; DATA XREF: sub_402550+83↓o
.text:00402474 a530            db '5.3.0',0            ; DATA XREF: sub_402550+93↓o
.text:0040247A ; const FILE stru_40247A
.text:0040247A stru_40247A     FILE <73006464h, 646E6174h, 20647261h, 75706E69h, 6C630074h, \
.text:0040247A                                         ; DATA XREF: sub_402550+A3↓o
.text:0040247A                                         ; sub_402550+12D↓o
.text:0040247A                       6E69736Fh, 756F2067h, 74757074h>
.text:0040249A                 db  20h
.text:0040249B                 db  66h ; f
.text:0040249C                 db  69h ; i
.text:0040249D                 db  6Ch ; l
.text:0040249E                 db  65h ; e
.text:0040249F                 db  20h
.text:004024A0                 db  25h ; %
.text:004024A1                 db  73h ; s
.text:004024A2                 db    0
.text:004024A3 aClosingInputFi db 'closing input file %s',0
.text:004024A3                                         ; DATA XREF: sub_402550+415↓o
.text:004024A3                                         ; Function+AE↓o ...
.text:004024B9                 align 10h
.text:004024C0 aAdvancingPastS db 'advancing past %s bytes in output file %s',0
.text:004024C0                                         ; DATA XREF: sub_402550+47C↓o
.text:004024EA aCannotFstatS   db 'cannot fstat %s',0  ; DATA XREF: sub_402550+4C3↓o
.text:004024FA aFileOffsetOutO db 'file offset out of range',0
.text:004024FA                                         ; DATA XREF: sub_402550:loc_402A48↓o
.text:00402513 aOpeningS       db 'opening %s',0       ; DATA XREF: sub_402550+59D↓o
.text:00402513                                         ; sub_402550+77E↓o
.text:0040251E aStandardOutput db 'standard output',0  ; DATA XREF: sub_402550:loc_402B22↓o
.text:0040252E aSettingFlagsFo db 'setting flags for %s',0
.text:0040252E                                         ; DATA XREF: sub_402550+660↓o
.text:0040252E                                         ; sub_402550+6F9↓o
.text:00402543                 align 10h
.text:00402550
.text:00402550 ; =============== S U B R O U T I N E =======================================
.text:00402550
.text:00402550 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00402550
.text:00402550 sub_402550      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00402550
.text:00402550 Category        = dword ptr -0E8h
.text:00402550 Locale          = dword ptr -0E4h
.text:00402550 var_E0          = dword ptr -0E0h
.text:00402550 Origin          = dword ptr -0DCh
.text:00402550 var_D8          = dword ptr -0D8h
.text:00402550 var_D4          = dword ptr -0D4h
.text:00402550 var_D0          = byte ptr -0D0h
.text:00402550 var_CC          = dword ptr -0CCh
.text:00402550 var_C8          = dword ptr -0C8h
.text:00402550 var_C4          = dword ptr -0C4h
.text:00402550 var_B8          = dword ptr -0B8h
.text:00402550 var_B4          = dword ptr -0B4h
.text:00402550 FileName        = dword ptr -0ACh
.text:00402550 var_A8          = byte ptr -0A8h
.text:00402550 var_88          = dword ptr -88h
.text:00402550 arg_0           = dword ptr  8
.text:00402550 arg_4           = dword ptr  0Ch
.text:00402550
.text:00402550                 push    ebp
.text:00402551                 xor     eax, eax
.text:00402553                 mov     ebp, esp
.text:00402555                 push    edi
.text:00402556                 push    esi
.text:00402557                 push    ebx
.text:00402558                 sub     esp, 0DCh
.text:0040255E                 mov     ebx, [ebp+arg_4]
.text:00402561                 and     esp, 0FFFFFFF0h
.text:00402564                 mov     esi, [ebp+arg_0]
.text:00402567                 call    __alloca
.text:0040256C                 call    sub_412930
.text:00402571                 mov     edx, [ebx]
.text:00402573                 mov     [esp+0E8h+Locale], offset Locale ; Locale
.text:0040257B                 mov     [esp+0E8h+Category], 0 ; Category
.text:00402582                 mov     ds:dword_4157E0, edx
.text:00402588                 call    setlocale
.text:0040258D                 mov     [esp+0E8h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00402595                 mov     [esp+0E8h+Category], offset aCoreutils ; "coreutils"
.text:0040259C                 call    ds:libintl_bindtextdomain
.text:004025A2                 mov     [esp+0E8h+Category], offset aCoreutils ; "coreutils"
.text:004025A9                 call    ds:libintl_textdomain
.text:004025AF                 mov     [esp+0E8h+Category], offset sub_4047F0 ; void (__cdecl *)()
.text:004025B6                 call    sub_401040
.text:004025BB                 mov     [esp+0E8h+var_C4], 0
.text:004025C3                 mov     [esp+0E8h+var_C8], offset aStuartKemp ; "Stuart Kemp"
.text:004025CB                 mov     [esp+0E8h+var_CC], offset aDavidMackenzie ; "David MacKenzie"
.text:004025D3                 mov     dword ptr [esp+0E8h+var_D0], offset aPaulRubin ; "Paul Rubin"
.text:004025DB                 mov     [esp+0E8h+var_D4], offset sub_402210 ; int
.text:004025E3                 mov     [esp+0E8h+var_D8], offset a530 ; "5.3.0"
.text:004025EB                 mov     [esp+0E8h+Origin], offset aCoreutils ; "coreutils"
.text:004025F3                 mov     [esp+0E8h+var_E0], offset stru_40247A ; FILE *
.text:004025FB                 mov     [esp+0E8h+Locale], ebx ; int
.text:004025FF                 mov     [esp+0E8h+Category], esi ; int
.text:00402602                 call    sub_4067C0
.text:00402607                 mov     [esp+0E8h+var_D8], 0 ; int
.text:0040260F                 mov     [esp+0E8h+Origin], 0 ; int
.text:00402617                 mov     [esp+0E8h+var_E0], offset Locale ; char *
.text:0040261F                 mov     [esp+0E8h+Locale], ebx ; int
.text:00402623                 mov     [esp+0E8h+Category], esi ; int
.text:00402626                 call    sub_406620
.text:0040262B                 inc     eax
.text:0040262C                 jz      short loc_40263A
.text:0040262E                 mov     [esp+0E8h+Category], 1 ; Code
.text:00402635                 call    sub_402210
.text:0040263A ; ---------------------------------------------------------------------------
.text:0040263A
.text:0040263A loc_40263A:                             ; CODE XREF: sub_402550+DC↑j
.text:0040263A                 xor     edx, edx
.text:0040263C                 xor     eax, eax
.text:0040263E                 mov     off_41401C, edx
.text:00402644                 lea     esi, [esi+0]
.text:0040264A                 lea     edi, [edi+0]
.text:00402650
.text:00402650 loc_402650:                             ; CODE XREF: sub_402550+10C↓j
.text:00402650                 mov     ds:byte_4151C0[eax], al
.text:00402656                 inc     eax
.text:00402657                 cmp     eax, 0FFh
.text:0040265C                 jle     short loc_402650
.text:0040265E                 mov     [esp+0E8h+Category], esi
.text:00402661                 mov     [esp+0E8h+Locale], ebx
.text:00402665                 call    sub_403500
.text:0040266A                 call    sub_403BE0
.text:0040266F                 mov     esi, ds:dword_415000
.text:00402675                 test    esi, esi
.text:00402677                 jnz     loc_402C80
.text:0040267D                 mov     [esp+0E8h+Category], (offset stru_40247A._ptr+3)
.text:00402684                 call    ds:libintl_gettext
.text:0040268A                 mov     ebx, ds:dword_415080
.text:00402690                 test    ebx, ebx
.text:00402692                 mov     esi, eax
.text:00402694                 mov     ds:dword_415000, eax
.text:00402699                 jnz     loc_402BFE
.text:0040269F
.text:0040269F loc_40269F:                             ; CODE XREF: sub_402550+6CC↓j
.text:0040269F                                         ; sub_402550+6EB↓j ...
.text:0040269F                 mov     [esp+0E8h+Category], 0 ; FileHandle
.text:004026A6                 call    _isatty
.text:004026AB                 test    eax, eax
.text:004026AD                 jz      loc_402BE5
.text:004026B3
.text:004026B3 loc_4026B3:                             ; CODE XREF: sub_402550+6A9↓j
.text:004026B3                                         ; sub_402550+76A↓j ...
.text:004026B3                 mov     [esp+0E8h+Origin], 1 ; Origin
.text:004026BB                 mov     [esp+0E8h+Locale], 0 ; Offset
.text:004026C3                 mov     [esp+0E8h+var_E0], 0
.text:004026CB                 mov     [esp+0E8h+Category], 0 ; FileHandle
.text:004026D2                 call    _lseeki64
.text:004026D7                 mov     ds:dword_415194, edx
.text:004026DD                 mov     ebx, edx
.text:004026DF                 not     ebx
.text:004026E1                 mov     ds:dword_415190, eax
.text:004026E6                 shr     ebx, 1Fh
.text:004026E9                 mov     ds:byte_415170, bl
.text:004026EF                 call    _errno
.text:004026F4                 mov     ebx, ds:FileName
.text:004026FA                 mov     edx, [eax]
.text:004026FC                 test    ebx, ebx
.text:004026FE                 mov     ds:dword_415180, edx
.text:00402704                 mov     [ebp+FileName], ebx
.text:0040270A                 jz      loc_402B22
.text:00402710                 mov     ecx, ds:dword_415070
.text:00402716                 mov     eax, ds:dword_415090
.text:0040271B                 test    ch, 10h
.text:0040271E                 jnz     short loc_402725
.text:00402720                 or      eax, 100h
.text:00402725
.text:00402725 loc_402725:                             ; CODE XREF: sub_402550+1CE↑j
.text:00402725                 test    ch, 20h
.text:00402728                 jz      short loc_40272F
.text:0040272A                 or      eax, 400h
.text:0040272F
.text:0040272F loc_40272F:                             ; CODE XREF: sub_402550+1D8↑j
.text:0040272F                 mov     edx, ds:dword_415064
.text:00402735                 mov     esi, eax
.text:00402737                 mov     eax, ds:dword_415060
.text:0040273C                 mov     edi, edx
.text:0040273E                 or      edi, eax
.text:00402740                 jnz     short loc_40274D
.text:00402742                 test    ch, 2
.text:00402745                 jnz     short loc_40274D
.text:00402747                 or      esi, 200h
.text:0040274D
.text:0040274D loc_40274D:                             ; CODE XREF: sub_402550+1F0↑j
.text:0040274D                                         ; sub_402550+1F5↑j
.text:0040274D                 mov     edi, edx
.text:0040274F                 or      edi, eax
.text:00402751                 jz      loc_402A78
.text:00402757                 mov     [esp+0E8h+Category], 1 ; FileHandle
.text:0040275E                 mov     edi, 1
.text:00402763                 call    _close
.text:00402768                 mov     [esp+0E8h+var_E0], 1B6h
.text:00402770                 mov     edx, [ebp+FileName]
.text:00402776                 mov     ecx, esi
.text:00402778                 or      ecx, 8002h
.text:0040277E                 mov     [esp+0E8h+Locale], ecx ; OpenFlag
.text:00402782                 mov     [esp+0E8h+Category], edx ; FileName
.text:00402785                 call    _open
.text:0040278A                 test    eax, eax
.text:0040278C                 mov     ebx, eax
.text:0040278E                 js      loc_402A72
.text:00402794                 cmp     eax, 1
.text:00402797                 jz      short loc_4027C6
.text:00402799                 mov     [esp+0E8h+Locale], 1 ; FileHandleDst
.text:004027A1                 mov     [esp+0E8h+Category], eax ; FileHandleSrc
.text:004027A4                 call    _dup2
.text:004027A9                 mov     [esp+0E8h+Category], ebx ; FileHandle
.text:004027AC                 dec     eax
.text:004027AD                 setz    cl
.text:004027B0                 movzx   edx, cl
.text:004027B3                 lea     edi, [edx-1]
.text:004027B6                 call    _close
.text:004027BB                 or      edi, 1
.text:004027BE                 test    eax, eax
.text:004027C0                 jnz     loc_402A72
.text:004027C6
.text:004027C6 loc_4027C6:                             ; CODE XREF: sub_402550+247↑j
.text:004027C6                 test    edi, edi
.text:004027C8                 js      loc_402A72
.text:004027CE
.text:004027CE loc_4027CE:                             ; CODE XREF: sub_402550+589↓j
.text:004027CE                                         ; sub_402550+5CD↓j
.text:004027CE                 mov     edi, ds:dword_415064
.text:004027D4                 mov     esi, ds:dword_415060
.text:004027DA                 mov     eax, edi
.text:004027DC                 or      eax, esi
.text:004027DE                 jz      loc_4028AC
.text:004027E4                 test    byte ptr ds:dword_415070+1, 2
.text:004027EB                 jnz     loc_4028AC
.text:004027F1                 xor     ebx, ebx
.text:004027F3                 mov     eax, ds:dword_415030
.text:004027F8                 mov     [esp+0E8h+Origin], ebx ; char
.text:004027FC                 mov     ecx, [esp+0E8h+Origin]
.text:00402800                 mov     [esp+0E8h+var_E0], eax
.text:00402804                 mul     esi
.text:00402806                 imul    ecx, esi
.text:00402809                 mov     [ebp+var_B8], eax
.text:0040280F                 mov     eax, edx
.text:00402811                 add     eax, ecx
.text:00402813                 mov     ecx, [esp+0E8h+var_E0]
.text:00402817                 imul    ecx, edi
.text:0040281A                 lea     edx, [ecx+eax]
.text:0040281D                 mov     [ebp+var_B4], edx
.text:00402823                 mov     ecx, [ebp+var_B8]
.text:00402829                 mov     eax, [ebp+var_B4]
.text:0040282F                 mov     [esp+0E8h+Category], ecx
.text:00402832                 mov     [esp+0E8h+Locale], eax
.text:00402836                 call    sub_4129A0
.text:0040283B                 mov     ebx, edx
.text:0040283D                 xor     eax, esi
.text:0040283F                 xor     ebx, edi
.text:00402841                 or      ebx, eax
.text:00402843                 jnz     loc_402A48
.text:00402849
.text:00402849 loc_402849:                             ; CODE XREF: sub_402550+51D↓j
.text:00402849                 mov     [esp+0E8h+Category], 1 ; char *
.text:00402850                 lea     esi, [ebp+var_88]
.text:00402856                 mov     [esp+0E8h+Locale], esi ; int
.text:0040285A                 call    sub_40AD60
.text:0040285F                 test    eax, eax
.text:00402861                 jnz     loc_402A05
.text:00402867
.text:00402867 loc_402867:                             ; CODE XREF: sub_402550+4F3↓j
.text:00402867                 mov     [esp+0E8h+Category], 1
.text:0040286E                 mov     esi, [ebp+var_B8]
.text:00402874                 mov     ecx, [ebp+var_B4]
.text:0040287A                 mov     [esp+0E8h+Locale], esi
.text:0040287E                 mov     [esp+0E8h+var_E0], ecx
.text:00402882                 call    sub_40E0F0
.text:00402887                 test    eax, eax
.text:00402889                 jz      short loc_4028AC
.text:0040288B                 mov     eax, [ebp+var_88]
.text:00402891                 and     eax, 0F000h
.text:00402896                 cmp     eax, 8000h
.text:0040289B                 jz      loc_40299A
.text:004028A1                 cmp     eax, 4000h
.text:004028A6                 jz      loc_40299A
.text:004028AC
.text:004028AC loc_4028AC:                             ; CODE XREF: sub_402550+28E↑j
.text:004028AC                                         ; sub_402550+29B↑j ...
.text:004028AC                 mov     [esp+0E8h+Locale], 1 ; Function
.text:004028B4                 mov     [esp+0E8h+Category], 2 ; Signal
.text:004028BB                 call    signal
.text:004028C0                 dec     eax
.text:004028C1                 jz      short loc_4028D7
.text:004028C3                 mov     [esp+0E8h+Locale], offset Function ; Function
.text:004028CB                 mov     [esp+0E8h+Category], 2 ; Signal
.text:004028D2                 call    signal
.text:004028D7
.text:004028D7 loc_4028D7:                             ; CODE XREF: sub_402550+371↑j
.text:004028D7                 mov     [esp+0E8h+Category], offset dword_415160
.text:004028DE                 call    sub_408AC0
.text:004028E3                 call    sub_403DD0
.text:004028E8                 mov     [esp+0E8h+Category], 0 ; FileHandle
.text:004028EF                 mov     edi, eax
.text:004028F1                 call    _close
.text:004028F6                 test    eax, eax
.text:004028F8                 js      short loc_402957
.text:004028FA
.text:004028FA loc_4028FA:                             ; CODE XREF: sub_402550+445↓j
.text:004028FA                 mov     [esp+0E8h+Category], 1 ; FileHandle
.text:00402901                 call    _close
.text:00402906                 test    eax, eax
.text:00402908                 js      short loc_402917
.text:0040290A
.text:0040290A loc_40290A:                             ; CODE XREF: sub_402550+405↓j
.text:0040290A                 call    sub_402DF0
.text:0040290F                 mov     [esp+0E8h+Category], edi ; Code
.text:00402912                 call    exit
.text:00402917 ; ---------------------------------------------------------------------------
.text:00402917
.text:00402917 loc_402917:                             ; CODE XREF: sub_402550+3B8↑j
.text:00402917                 mov     ecx, ds:FileName
.text:0040291D                 mov     [esp+0E8h+Category], ecx ; char *
.text:00402920                 call    sub_406D00
.text:00402925                 mov     [esp+0E8h+Category], (offset stru_40247A._file+2)
.text:0040292C                 mov     esi, eax
.text:0040292E                 call    ds:libintl_gettext
.text:00402934                 mov     ebx, eax
.text:00402936                 call    _errno
.text:0040293B                 mov     [esp+0E8h+Origin], esi ; char
.text:0040293F                 mov     [esp+0E8h+var_E0], ebx ; char *
.text:00402943                 mov     edx, [eax]
.text:00402945                 mov     [esp+0E8h+Category], 1 ; Code
.text:0040294C                 mov     [esp+0E8h+Locale], edx ; ErrorMessage
.text:00402950                 call    sub_40AAC0
.text:00402955                 jmp     short loc_40290A
.text:00402957 ; ---------------------------------------------------------------------------
.text:00402957
.text:00402957 loc_402957:                             ; CODE XREF: sub_402550+3A8↑j
.text:00402957                 mov     ebx, ds:dword_415000
.text:0040295D                 mov     [esp+0E8h+Category], ebx ; char *
.text:00402960                 call    sub_406D00
.text:00402965                 mov     [esp+0E8h+Category], offset aClosingInputFi ; "closing input file %s"
.text:0040296C                 mov     esi, eax
.text:0040296E                 call    ds:libintl_gettext
.text:00402974                 mov     ebx, eax
.text:00402976                 call    _errno
.text:0040297B                 mov     [esp+0E8h+Origin], esi ; char
.text:0040297F                 mov     [esp+0E8h+var_E0], ebx ; char *
.text:00402983                 mov     esi, [eax]
.text:00402985                 mov     [esp+0E8h+Category], 1 ; Code
.text:0040298C                 mov     [esp+0E8h+Locale], esi ; ErrorMessage
.text:00402990                 call    sub_40AAC0
.text:00402995                 jmp     loc_4028FA
.text:0040299A ; ---------------------------------------------------------------------------
.text:0040299A
.text:0040299A loc_40299A:                             ; CODE XREF: sub_402550+34B↑j
.text:0040299A                                         ; sub_402550+356↑j
.text:0040299A                 mov     ecx, ds:FileName
.text:004029A0                 mov     [esp+0E8h+Category], ecx ; char *
.text:004029A3                 call    sub_406D00
.text:004029A8                 mov     edi, eax
.text:004029AA                 mov     ebx, [ebp+var_B8]
.text:004029B0                 lea     edx, [ebp+var_A8]
.text:004029B6                 mov     [esp+0E8h+var_E0], edx
.text:004029BA                 mov     eax, [ebp+var_B4]
.text:004029C0                 mov     [esp+0E8h+Category], ebx
.text:004029C3                 mov     [esp+0E8h+Locale], eax
.text:004029C7                 call    sub_406560
.text:004029CC                 mov     [esp+0E8h+Category], offset aAdvancingPastS ; "advancing past %s bytes in output file "...
.text:004029D3                 mov     esi, eax
.text:004029D5                 call    ds:libintl_gettext
.text:004029DB                 mov     ebx, eax
.text:004029DD                 call    _errno
.text:004029E2                 mov     [esp+0E8h+var_D8], edi
.text:004029E6                 mov     [esp+0E8h+Origin], esi ; char
.text:004029EA                 mov     [esp+0E8h+var_E0], ebx ; char *
.text:004029EE                 mov     edi, [eax]
.text:004029F0                 mov     [esp+0E8h+Category], 1 ; Code
.text:004029F7                 mov     [esp+0E8h+Locale], edi ; ErrorMessage
.text:004029FB                 call    sub_40AAC0
.text:00402A00                 jmp     loc_4028AC
.text:00402A05 ; ---------------------------------------------------------------------------
.text:00402A05
.text:00402A05 loc_402A05:                             ; CODE XREF: sub_402550+311↑j
.text:00402A05                 mov     edx, ds:FileName
.text:00402A0B                 mov     [esp+0E8h+Category], edx ; char *
.text:00402A0E                 call    sub_406D00
.text:00402A13                 mov     [esp+0E8h+Category], offset aCannotFstatS ; "cannot fstat %s"
.text:00402A1A                 mov     ebx, eax
.text:00402A1C                 call    ds:libintl_gettext
.text:00402A22                 mov     edi, eax
.text:00402A24                 call    _errno
.text:00402A29                 mov     [esp+0E8h+Origin], ebx ; char
.text:00402A2D                 mov     [esp+0E8h+var_E0], edi ; char *
.text:00402A31                 mov     edi, [eax]
.text:00402A33                 mov     [esp+0E8h+Category], 1 ; Code
.text:00402A3A                 mov     [esp+0E8h+Locale], edi ; ErrorMessage
.text:00402A3E                 call    sub_40AAC0
.text:00402A43                 jmp     loc_402867
.text:00402A48 ; ---------------------------------------------------------------------------
.text:00402A48
.text:00402A48 loc_402A48:                             ; CODE XREF: sub_402550+2F3↑j
.text:00402A48                 mov     [esp+0E8h+Category], offset aFileOffsetOutO ; "file offset out of range"
.text:00402A4F                 call    ds:libintl_gettext
.text:00402A55                 mov     [esp+0E8h+Locale], 0 ; ErrorMessage
.text:00402A5D                 mov     [esp+0E8h+Category], 1 ; Code
.text:00402A64                 mov     [esp+0E8h+var_E0], eax ; char *
.text:00402A68                 call    sub_40AAC0
.text:00402A6D                 jmp     loc_402849
.text:00402A72 ; ---------------------------------------------------------------------------
.text:00402A72
.text:00402A72 loc_402A72:                             ; CODE XREF: sub_402550+23E↑j
.text:00402A72                                         ; sub_402550+270↑j ...
.text:00402A72                 mov     ebx, ds:FileName
.text:00402A78
.text:00402A78 loc_402A78:                             ; CODE XREF: sub_402550+201↑j
.text:00402A78                 mov     [esp+0E8h+Category], 1 ; FileHandle
.text:00402A7F                 or      esi, 8001h
.text:00402A85                 mov     edi, 1
.text:00402A8A                 call    _close
.text:00402A8F                 mov     [esp+0E8h+Category], ebx ; FileName
.text:00402A92                 mov     [esp+0E8h+var_E0], 1B6h
.text:00402A9A                 mov     [esp+0E8h+Locale], esi ; OpenFlag
.text:00402A9E                 call    _open
.text:00402AA3                 test    eax, eax
.text:00402AA5                 mov     ebx, eax
.text:00402AA7                 js      short loc_402ADF
.text:00402AA9                 cmp     eax, 1
.text:00402AAC                 jz      short loc_402AD7
.text:00402AAE                 mov     [esp+0E8h+Locale], 1 ; FileHandleDst
.text:00402AB6                 mov     [esp+0E8h+Category], eax ; FileHandleSrc
.text:00402AB9                 call    _dup2
.text:00402ABE                 mov     [esp+0E8h+Category], ebx ; FileHandle
.text:00402AC1                 dec     eax
.text:00402AC2                 setz    dl
.text:00402AC5                 movzx   esi, dl
.text:00402AC8                 lea     edi, [esi-1]
.text:00402ACB                 call    _close
.text:00402AD0                 or      edi, 1
.text:00402AD3                 test    eax, eax
.text:00402AD5                 jnz     short loc_402ADF
.text:00402AD7
.text:00402AD7 loc_402AD7:                             ; CODE XREF: sub_402550+55C↑j
.text:00402AD7                 test    edi, edi
.text:00402AD9                 jns     loc_4027CE
.text:00402ADF
.text:00402ADF loc_402ADF:                             ; CODE XREF: sub_402550+557↑j
.text:00402ADF                                         ; sub_402550+585↑j
.text:00402ADF                 mov     ecx, ds:FileName
.text:00402AE5                 mov     [esp+0E8h+Category], ecx ; char *
.text:00402AE8                 call    sub_406D00
.text:00402AED                 mov     [esp+0E8h+Category], offset aOpeningS ; "opening %s"
.text:00402AF4                 mov     ebx, eax
.text:00402AF6                 call    ds:libintl_gettext
.text:00402AFC                 mov     edi, eax
.text:00402AFE                 call    _errno
.text:00402B03                 mov     [esp+0E8h+Origin], ebx ; char
.text:00402B07                 mov     [esp+0E8h+var_E0], edi ; char *
.text:00402B0B                 mov     ebx, [eax]
.text:00402B0D                 mov     [esp+0E8h+Category], 1 ; Code
.text:00402B14                 mov     [esp+0E8h+Locale], ebx ; ErrorMessage
.text:00402B18                 call    sub_40AAC0
.text:00402B1D                 jmp     loc_4027CE
.text:00402B22 ; ---------------------------------------------------------------------------
.text:00402B22
.text:00402B22 loc_402B22:                             ; CODE XREF: sub_402550+1BA↑j
.text:00402B22                 mov     [esp+0E8h+Category], offset aStandardOutput ; "standard output"
.text:00402B29                 call    ds:libintl_gettext
.text:00402B2F                 mov     esi, ds:dword_415090
.text:00402B35                 test    esi, esi
.text:00402B37                 mov     ebx, eax
.text:00402B39                 mov     ds:FileName, eax
.text:00402B3E                 jnz     short loc_402B6D
.text:00402B40
.text:00402B40 loc_402B40:                             ; CODE XREF: sub_402550+63B↓j
.text:00402B40                                         ; sub_402550+656↓j ...
.text:00402B40                 mov     [esp+0E8h+Category], 1 ; FileHandle
.text:00402B47                 call    _isatty
.text:00402B4C                 test    eax, eax
.text:00402B4E                 jnz     loc_4028AC
.text:00402B54                 mov     [esp+0E8h+Locale], 8000h ; Mode
.text:00402B5C                 mov     [esp+0E8h+Category], 1 ; FileHandle
.text:00402B63                 call    _setmode
.text:00402B68                 jmp     loc_4028AC
.text:00402B6D ; ---------------------------------------------------------------------------
.text:00402B6D
.text:00402B6D loc_402B6D:                             ; CODE XREF: sub_402550+5EE↑j
.text:00402B6D                 mov     [esp+0E8h+Locale], 3
.text:00402B75                 mov     [esp+0E8h+Category], 1
.text:00402B7C                 call    sub_40E320
.text:00402B81                 mov     edx, eax
.text:00402B83                 or      edx, esi
.text:00402B85                 test    eax, eax
.text:00402B87                 js      short loc_402BA8
.text:00402B89                 cmp     edx, eax
.text:00402B8B                 jz      short loc_402B40
.text:00402B8D                 mov     [esp+0E8h+var_E0], edx
.text:00402B91                 mov     [esp+0E8h+Locale], 4
.text:00402B99                 mov     [esp+0E8h+Category], 1
.text:00402BA0                 call    sub_40E320
.text:00402BA5                 inc     eax
.text:00402BA6                 jnz     short loc_402B40
.text:00402BA8
.text:00402BA8 loc_402BA8:                             ; CODE XREF: sub_402550+637↑j
.text:00402BA8                 mov     [esp+0E8h+Category], ebx ; char *
.text:00402BAB                 call    sub_406D00
.text:00402BB0                 mov     [esp+0E8h+Category], offset aSettingFlagsFo ; "setting flags for %s"
.text:00402BB7                 mov     ebx, eax
.text:00402BB9                 call    ds:libintl_gettext
.text:00402BBF                 mov     edi, eax
.text:00402BC1                 call    _errno
.text:00402BC6                 mov     [esp+0E8h+Origin], ebx ; char
.text:00402BCA                 mov     [esp+0E8h+var_E0], edi ; char *
.text:00402BCE                 mov     ecx, [eax]
.text:00402BD0                 mov     [esp+0E8h+Category], 1 ; Code
.text:00402BD7                 mov     [esp+0E8h+Locale], ecx ; ErrorMessage
.text:00402BDB                 call    sub_40AAC0
.text:00402BE0                 jmp     loc_402B40
.text:00402BE5 ; ---------------------------------------------------------------------------
.text:00402BE5
.text:00402BE5 loc_402BE5:                             ; CODE XREF: sub_402550+15D↑j
.text:00402BE5                 mov     [esp+0E8h+Locale], 8000h ; Mode
.text:00402BED                 mov     [esp+0E8h+Category], 0 ; FileHandle
.text:00402BF4                 call    _setmode
.text:00402BF9                 jmp     loc_4026B3
.text:00402BFE ; ---------------------------------------------------------------------------
.text:00402BFE
.text:00402BFE loc_402BFE:                             ; CODE XREF: sub_402550+149↑j
.text:00402BFE                 mov     [esp+0E8h+Locale], 3
.text:00402C06                 mov     [esp+0E8h+Category], 0
.text:00402C0D                 call    sub_40E320
.text:00402C12                 mov     edx, eax
.text:00402C14                 or      edx, ebx
.text:00402C16                 test    eax, eax
.text:00402C18                 js      short loc_402C41
.text:00402C1A                 cmp     edx, eax
.text:00402C1C                 jz      loc_40269F
.text:00402C22                 mov     [esp+0E8h+var_E0], edx
.text:00402C26                 mov     [esp+0E8h+Locale], 4
.text:00402C2E                 mov     [esp+0E8h+Category], 0
.text:00402C35                 call    sub_40E320
.text:00402C3A                 inc     eax
.text:00402C3B                 jnz     loc_40269F
.text:00402C41
.text:00402C41 loc_402C41:                             ; CODE XREF: sub_402550+6C8↑j
.text:00402C41                 mov     [esp+0E8h+Category], esi ; char *
.text:00402C44                 call    sub_406D00
.text:00402C49                 mov     [esp+0E8h+Category], offset aSettingFlagsFo ; "setting flags for %s"
.text:00402C50                 mov     ebx, eax
.text:00402C52                 call    ds:libintl_gettext
.text:00402C58                 mov     edi, eax
.text:00402C5A                 call    _errno
.text:00402C5F                 mov     [esp+0E8h+Origin], ebx ; char
.text:00402C63                 mov     [esp+0E8h+var_E0], edi ; char *
.text:00402C67                 mov     ecx, [eax]
.text:00402C69                 mov     [esp+0E8h+Category], 1 ; Code
.text:00402C70                 mov     [esp+0E8h+Locale], ecx ; ErrorMessage
.text:00402C74                 call    sub_40AAC0
.text:00402C79                 jmp     loc_40269F
.text:00402C79 ; ---------------------------------------------------------------------------
.text:00402C7E                 align 10h
.text:00402C80
.text:00402C80 loc_402C80:                             ; CODE XREF: sub_402550+127↑j
.text:00402C80                 mov     [esp+0E8h+Category], 0 ; FileHandle
.text:00402C87                 mov     ebx, ds:dword_415080
.text:00402C8D                 xor     edi, edi
.text:00402C8F                 call    _close
.text:00402C94                 mov     [esp+0E8h+var_E0], 0
.text:00402C9C                 or      ebx, 8000h
.text:00402CA2                 mov     [esp+0E8h+Locale], ebx ; OpenFlag
.text:00402CA6                 mov     [esp+0E8h+Category], esi ; FileName
.text:00402CA9                 call    _open
.text:00402CAE                 test    eax, eax
.text:00402CB0                 mov     ebx, eax
.text:00402CB2                 js      short loc_402CC0
.text:00402CB4                 test    eax, eax
.text:00402CB6                 jnz     short loc_402D03
.text:00402CB8
.text:00402CB8 loc_402CB8:                             ; CODE XREF: sub_402550+7DA↓j
.text:00402CB8                 test    edi, edi
.text:00402CBA                 jns     loc_4026B3
.text:00402CC0
.text:00402CC0 loc_402CC0:                             ; CODE XREF: sub_402550+762↑j
.text:00402CC0                                         ; sub_402550+7D8↓j
.text:00402CC0                 mov     esi, ds:dword_415000
.text:00402CC6                 mov     [esp+0E8h+Category], esi ; char *
.text:00402CC9                 call    sub_406D00
.text:00402CCE                 mov     [esp+0E8h+Category], offset aOpeningS ; "opening %s"
.text:00402CD5                 mov     ebx, eax
.text:00402CD7                 call    ds:libintl_gettext
.text:00402CDD                 mov     edi, eax
.text:00402CDF                 call    _errno
.text:00402CE4                 mov     [esp+0E8h+Origin], ebx ; char
.text:00402CE8                 mov     [esp+0E8h+var_E0], edi ; char *
.text:00402CEC                 mov     ecx, [eax]
.text:00402CEE                 mov     [esp+0E8h+Category], 1 ; Code
.text:00402CF5                 mov     [esp+0E8h+Locale], ecx ; ErrorMessage
.text:00402CF9                 call    sub_40AAC0
.text:00402CFE                 jmp     loc_4026B3
.text:00402D03 ; ---------------------------------------------------------------------------
.text:00402D03
.text:00402D03 loc_402D03:                             ; CODE XREF: sub_402550+766↑j
.text:00402D03                 mov     [esp+0E8h+Locale], 0 ; FileHandleDst
.text:00402D0B                 mov     [esp+0E8h+Category], eax ; FileHandleSrc
.text:00402D0E                 call    _dup2
.text:00402D13                 mov     [esp+0E8h+Category], ebx ; FileHandle
.text:00402D16                 test    eax, eax
.text:00402D18                 setz    dl
.text:00402D1B                 movzx   esi, dl
.text:00402D1E                 lea     edi, [esi-1]
.text:00402D21                 call    _close
.text:00402D26                 test    eax, eax
.text:00402D28                 jnz     short loc_402CC0
.text:00402D2A                 jmp     short loc_402CB8
.text:00402D2A sub_402550      endp
.text:00402D2A
.text:00402D2A ; ---------------------------------------------------------------------------
.text:00402D2C aSSRecordsIn    db '%s+%s records in',0Ah,0
.text:00402D2C                                         ; DATA XREF: sub_402DF0+69↓o
.text:00402D3E aSSRecordsOut   db '%s+%s records out',0Ah,0
.text:00402D3E                                         ; DATA XREF: sub_402DF0+D6↓o
.text:00402D51 aTruncatedRecor db 'truncated record',0 ; DATA XREF: sub_402DF0+125↓o
.text:00402D62 ; const char Format[]
.text:00402D62 Format          db '%s %s',0Ah,0        ; DATA XREF: sub_402DF0+15E↓o
.text:00402D69 aSBytesSCopied  db '%s bytes (%s) copied',0
.text:00402D69                                         ; DATA XREF: sub_402DF0+1EE↓o
.text:00402D7E aSByteSCopied   db '%s byte (%s) copied',0
.text:00402D7E                                         ; DATA XREF: sub_402DF0+1FE↓o
.text:00402D92 ; const char aGb[]
.text:00402D92 aGb             db '%gB',0              ; DATA XREF: sub_402DF0+2D2↓o
.text:00402D96 aGSecondsSS     db ', %g seconds, %s/s',0Ah,0
.text:00402D96                                         ; DATA XREF: sub_402DF0+2F1↓o
.text:00402DAA aGSecondSS      db ', %g second, %s/s',0Ah,0
.text:00402DAA                                         ; DATA XREF: sub_402DF0+2FB↓o
.text:00402DBD aInfinity       db 'Infinity',0         ; DATA XREF: sub_402DF0:loc_40313D↓o
.text:00402DC6 ; const char aSB[]
.text:00402DC6 aSB             db '%s B',0             ; DATA XREF: sub_402DF0+35A↓o
.text:00402DCB aTruncatedRecor_0 db 'truncated records',0
.text:00402DCB                                         ; DATA XREF: sub_402DF0:loc_403250↓o
.text:00402DDD                 align 10h
.text:00402DE0 flt_402DE0      dd 1.8446744e19         ; DATA XREF: sub_402DF0:loc_403132↓r
.text:00402DE0                                         ; sub_402DF0:loc_403236↓r
.text:00402DE4                 align 8
.text:00402DE8 dbl_402DE8      dq 1.0e9                ; DATA XREF: sub_402DF0+284↓r
.text:00402DE8                                         ; sub_402DF0+3F4↓r
.text:00402DF0
.text:00402DF0 ; =============== S U B R O U T I N E =======================================
.text:00402DF0
.text:00402DF0
.text:00402DF0 sub_402DF0      proc near               ; CODE XREF: sub_402550:loc_40290A↑p
.text:00402DF0                                         ; Function:loc_4032A3↓p ...
.text:00402DF0
.text:00402DF0 var_150         = dword ptr -150h
.text:00402DF0 Stream          = dword ptr -14Ch
.text:00402DF0 Format          = dword ptr -148h
.text:00402DF0 var_144         = dword ptr -144h
.text:00402DF0 var_13C         = dword ptr -13Ch
.text:00402DF0 var_138         = dword ptr -138h
.text:00402DF0 var_134         = dword ptr -134h
.text:00402DF0 var_130         = dword ptr -130h
.text:00402DF0 var_12C         = qword ptr -12Ch
.text:00402DF0 var_124         = dword ptr -124h
.text:00402DF0 var_120         = dword ptr -120h
.text:00402DF0 var_11C         = dword ptr -11Ch
.text:00402DF0 var_118         = dword ptr -118h
.text:00402DF0 var_114         = qword ptr -114h
.text:00402DF0 var_10C         = byte ptr -10Ch
.text:00402DF0 Buffer          = byte ptr -94h
.text:00402DF0
.text:00402DF0                 push    ebp
.text:00402DF1                 push    edi
.text:00402DF2                 push    esi
.text:00402DF3                 push    ebx
.text:00402DF4                 sub     esp, 13Ch
.text:00402DFA                 mov     eax, ds:dword_415160
.text:00402DFF                 lea     edi, [esp+14Ch+var_11C]
.text:00402E03                 mov     [esp+14Ch+Stream], edi
.text:00402E06                 cdq
.text:00402E07                 lea     edi, [esp+14Ch+var_10C]
.text:00402E0B                 mov     [esp+14Ch+var_120], edx
.text:00402E0F                 mov     [esp+14Ch+var_124], eax
.text:00402E13                 call    sub_408AC0
.text:00402E18                 mov     ecx, ds:dword_4150E4
.text:00402E1E                 lea     eax, [esp+14Ch+Buffer]
.text:00402E25                 mov     ebp, ds:dword_4150E0
.text:00402E2B                 mov     [esp+14Ch+var_144], eax
.text:00402E2F                 mov     [esp+14Ch+Format], ecx
.text:00402E33                 mov     [esp+14Ch+Stream], ebp
.text:00402E36                 call    sub_408A50
.text:00402E3B                 mov     [esp+14Ch+var_144], edi
.text:00402E3F                 mov     edx, ds:dword_4150F0
.text:00402E45                 mov     ebx, eax
.text:00402E47                 mov     esi, ds:dword_4150F4
.text:00402E4D                 mov     [esp+14Ch+Stream], edx
.text:00402E50                 mov     [esp+14Ch+Format], esi
.text:00402E54                 call    sub_408A50
.text:00402E59                 mov     [esp+14Ch+Stream], offset aSSRecordsIn ; "%s+%s records in\n"
.text:00402E60                 mov     ebp, eax
.text:00402E62                 call    ds:libintl_gettext
.text:00402E68                 mov     [esp+14Ch+var_144+4], ebx
.text:00402E6C                 mov     ecx, ds:_iob
.text:00402E72                 lea     ebx, [esp+14Ch+Buffer]
.text:00402E79                 mov     [esp+14Ch+var_144], ebp
.text:00402E7D                 add     ecx, 40h ; '@'
.text:00402E80                 mov     [esp+14Ch+Stream], ecx ; Stream
.text:00402E83                 mov     [esp+14Ch+Format], eax ; Format
.text:00402E87                 call    fprintf
.text:00402E8C                 mov     [esp+14Ch+var_144], ebx
.text:00402E90                 mov     ebp, ds:dword_4150C0
.text:00402E96                 mov     esi, ds:dword_4150C4
.text:00402E9C                 mov     [esp+14Ch+Stream], ebp
.text:00402E9F                 mov     [esp+14Ch+Format], esi
.text:00402EA3                 call    sub_408A50
.text:00402EA8                 mov     [esp+14Ch+var_144], edi
.text:00402EAC                 mov     ecx, ds:dword_4150D4
.text:00402EB2                 mov     ebx, eax
.text:00402EB4                 mov     edx, ds:dword_4150D0
.text:00402EBA                 mov     [esp+14Ch+Format], ecx
.text:00402EBE                 mov     [esp+14Ch+Stream], edx
.text:00402EC1                 call    sub_408A50
.text:00402EC6                 mov     [esp+14Ch+Stream], offset aSSRecordsOut ; "%s+%s records out\n"
.text:00402ECD                 mov     ebp, eax
.text:00402ECF                 call    ds:libintl_gettext
.text:00402ED5                 mov     [esp+14Ch+var_144+4], ebx
.text:00402ED9                 mov     edx, ds:_iob
.text:00402EDF                 mov     [esp+14Ch+var_144], ebp
.text:00402EE3                 add     edx, 40h ; '@'
.text:00402EE6                 mov     [esp+14Ch+Stream], edx ; Stream
.text:00402EE9                 mov     [esp+14Ch+Format], eax ; Format
.text:00402EED                 call    fprintf
.text:00402EF2                 mov     ecx, ds:dword_415114
.text:00402EF8                 mov     edx, ds:dword_415110
.text:00402EFE                 cmp     ecx, 0
.text:00402F01                 ja      short loc_402F08
.text:00402F03                 cmp     edx, 0
.text:00402F06                 jbe     short loc_402F61
.text:00402F08
.text:00402F08 loc_402F08:                             ; CODE XREF: sub_402DF0+111↑j
.text:00402F08                 mov     ebx, edx
.text:00402F0A                 xor     ebx, 1
.text:00402F0D                 or      ebx, ecx
.text:00402F0F                 jnz     loc_403250
.text:00402F15                 mov     [esp+14Ch+Stream], offset aTruncatedRecor ; "truncated record"
.text:00402F1C
.text:00402F1C loc_402F1C:                             ; CODE XREF: sub_402DF0+467↓j
.text:00402F1C                 call    ds:libintl_gettext
.text:00402F22                 mov     [esp+14Ch+var_144], edi
.text:00402F26                 mov     edx, ds:dword_415110
.text:00402F2C                 mov     ecx, ds:dword_415114
.text:00402F32                 mov     [esp+14Ch+Stream], edx
.text:00402F35                 mov     ebp, eax
.text:00402F37                 mov     [esp+14Ch+Format], ecx
.text:00402F3B                 call    sub_408A50
.text:00402F40                 mov     [esp+14Ch+var_144], eax
.text:00402F44                 mov     esi, ds:_iob
.text:00402F4A                 mov     [esp+14Ch+var_144+4], ebp
.text:00402F4E                 mov     [esp+14Ch+Format], offset Format ; "%s %s\n"
.text:00402F56                 add     esi, 40h ; '@'
.text:00402F59                 mov     [esp+14Ch+Stream], esi ; Stream
.text:00402F5C                 call    fprintf
.text:00402F61
.text:00402F61 loc_402F61:                             ; CODE XREF: sub_402DF0+116↑j
.text:00402F61                 test    byte ptr ds:dword_4150A0, 1
.text:00402F68                 jz      short loc_402F75
.text:00402F6A
.text:00402F6A loc_402F6A:                             ; CODE XREF: sub_402DF0+33D↓j
.text:00402F6A                 add     esp, 13Ch
.text:00402F70                 pop     ebx
.text:00402F71                 pop     esi
.text:00402F72                 pop     edi
.text:00402F73                 pop     ebp
.text:00402F74                 retn
.text:00402F75 ; ---------------------------------------------------------------------------
.text:00402F75
.text:00402F75 loc_402F75:                             ; CODE XREF: sub_402DF0+178↑j
.text:00402F75                 mov     [esp+14Ch+var_134], 1 ; int
.text:00402F7D                 mov     ecx, ds:dword_415100
.text:00402F83                 lea     eax, [esp+14Ch+Buffer]
.text:00402F8A                 mov     [esp+14Ch+var_130], 0 ; int
.text:00402F92                 mov     ebx, ds:dword_415104
.text:00402F98                 mov     [esp+14Ch+var_13C], 1 ; int
.text:00402FA0                 mov     [esp+14Ch+Stream], ecx ; int
.text:00402FA3                 mov     [esp+14Ch+Format], ebx ; int
.text:00402FA7                 mov     [esp+14Ch+var_138], 0 ; int
.text:00402FAF                 mov     [esp+14Ch+var_144+4], 1D1h ; int
.text:00402FB7                 mov     [esp+14Ch+var_144], eax ; Buffer
.text:00402FBB                 call    sub_407AD0
.text:00402FC0                 mov     [esp+14Ch+var_144], edi
.text:00402FC4                 mov     esi, ds:dword_415100
.text:00402FCA                 mov     ebx, eax
.text:00402FCC                 mov     ebp, ds:dword_415104
.text:00402FD2                 mov     [esp+14Ch+Stream], esi
.text:00402FD5                 mov     [esp+14Ch+Format], ebp
.text:00402FD9                 call    sub_408A50
.text:00402FDE                 mov     [esp+14Ch+Format], offset aSBytesSCopied ; "%s bytes (%s) copied"
.text:00402FE6                 mov     edx, ds:dword_415100
.text:00402FEC                 mov     ebp, eax
.text:00402FEE                 mov     [esp+14Ch+Stream], offset aSByteSCopied ; "%s byte (%s) copied"
.text:00402FF5                 mov     edi, ds:dword_415104
.text:00402FFB                 xor     edx, 1
.text:00402FFE                 or      edx, edi
.text:00403000                 setz    cl
.text:00403003                 movzx   esi, cl
.text:00403006                 mov     [esp+14Ch+var_144], esi
.text:0040300A                 call    ds:libintl_ngettext
.text:00403010                 mov     [esp+14Ch+var_144+4], ebx
.text:00403014                 mov     edi, ds:_iob
.text:0040301A                 mov     [esp+14Ch+var_144], ebp
.text:0040301E                 add     edi, 40h ; '@'
.text:00403021                 mov     [esp+14Ch+Format], eax ; Format
.text:00403025                 mov     [esp+14Ch+Stream], edi ; Stream
.text:00403028                 call    fprintf
.text:0040302D                 mov     edx, ds:dword_415160
.text:00403033                 mov     eax, [esp+14Ch+var_11C]
.text:00403037                 cmp     edx, eax
.text:00403039                 jl      loc_403240
.text:0040303F                 cmp     edx, eax
.text:00403041                 jz      loc_40316A
.text:00403047                 mov     ebp, ds:dword_415164
.text:0040304D
.text:0040304D loc_40304D:                             ; CODE XREF: sub_402DF0+384↓j
.text:0040304D                                         ; sub_402DF0+3A2↓j ...
.text:0040304D                 push    eax
.text:0040304E                 fild    [esp+150h+var_150]
.text:00403051                 add     esp, 4
.text:00403054                 fstp    [esp+14Ch+var_12C]
.text:00403058                 push    edx
.text:00403059                 fild    [esp+150h+var_150]
.text:0040305C                 add     esp, 4
.text:0040305F                 mov     edi, [esp+14Ch+var_118]
.text:00403063                 fsubr   [esp+14Ch+var_12C]
.text:00403067                 sub     edi, ebp
.text:00403069                 fstp    [esp+14Ch+var_12C]
.text:0040306D                 push    edi
.text:0040306E                 fild    [esp+150h+var_150]
.text:00403071                 add     esp, 4
.text:00403074                 fdiv    ds:dbl_402DE8
.text:0040307A                 fadd    [esp+14Ch+var_12C]
.text:0040307E                 fstp    [esp+14Ch+var_12C]
.text:00403082                 fldz
.text:00403084                 fld     [esp+14Ch+var_12C]
.text:00403088                 fucompp
.text:0040308A                 fnstsw  ax
.text:0040308C                 sahf
.text:0040308D                 jbe     loc_40313D
.text:00403093                 mov     esi, ds:dword_415104
.text:00403099                 mov     edx, ds:dword_415100
.text:0040309F                 push    esi
.text:004030A0                 push    edx
.text:004030A1                 fild    qword ptr [esp]
.text:004030A4                 add     esp, 8
.text:004030A7                 test    esi, esi
.text:004030A9                 js      loc_403132
.text:004030AF
.text:004030AF loc_4030AF:                             ; CODE XREF: sub_402DF0+348↓j
.text:004030AF                 fstp    [esp+14Ch+var_114]
.text:004030B3                 lea     ebp, [esp+14Ch+Buffer]
.text:004030BA                 fld     [esp+14Ch+var_114]
.text:004030BE                 fdiv    [esp+14Ch+var_12C]
.text:004030C2                 mov     [esp+14Ch+Format], offset aGb ; "%gB"
.text:004030CA                 mov     [esp+14Ch+Stream], ebp ; Buffer
.text:004030CD                 fstp    qword ptr [esp+14Ch+var_144]
.text:004030D1                 call    sprintf
.text:004030D6
.text:004030D6 loc_4030D6:                             ; CODE XREF: sub_402DF0+375↓j
.text:004030D6                 lea     ebx, [esp+14Ch+Buffer]
.text:004030DD
.text:004030DD loc_4030DD:                             ; CODE XREF: sub_402DF0+441↓j
.text:004030DD                 fld     [esp+14Ch+var_12C]
.text:004030E1                 mov     [esp+14Ch+Format], offset aGSecondsSS ; ", %g seconds, %s/s\n"
.text:004030E9                 fld1
.text:004030EB                 mov     [esp+14Ch+Stream], offset aGSecondSS ; ", %g second, %s/s\n"
.text:004030F2                 fucompp
.text:004030F4                 fnstsw  ax
.text:004030F6                 sahf
.text:004030F7                 setnp   cl
.text:004030FA                 setz    al
.text:004030FD                 and     al, cl
.text:004030FF                 movzx   ecx, al
.text:00403102                 mov     [esp+14Ch+var_144], ecx
.text:00403106                 call    ds:libintl_ngettext
.text:0040310C                 mov     [esp+14Ch+var_13C], ebx
.text:00403110                 mov     ebx, ds:_iob
.text:00403116                 fld     [esp+14Ch+var_12C]
.text:0040311A                 mov     [esp+14Ch+Format], eax ; Format
.text:0040311E                 add     ebx, 40h ; '@'
.text:00403121                 mov     [esp+14Ch+Stream], ebx ; Stream
.text:00403124                 fstp    qword ptr [esp+14Ch+var_144]
.text:00403128                 call    fprintf
.text:0040312D                 jmp     loc_402F6A
.text:00403132 ; ---------------------------------------------------------------------------
.text:00403132
.text:00403132 loc_403132:                             ; CODE XREF: sub_402DF0+2B9↑j
.text:00403132                 fadd    ds:flt_402DE0
.text:00403138                 jmp     loc_4030AF
.text:0040313D ; ---------------------------------------------------------------------------
.text:0040313D
.text:0040313D loc_40313D:                             ; CODE XREF: sub_402DF0+29D↑j
.text:0040313D                 mov     [esp+14Ch+Stream], offset aInfinity ; "Infinity"
.text:00403144                 call    ds:libintl_gettext
.text:0040314A                 mov     [esp+14Ch+Format], offset aSB ; "%s B"
.text:00403152                 mov     [esp+14Ch+var_144], eax
.text:00403156                 lea     eax, [esp+14Ch+Buffer]
.text:0040315D                 mov     [esp+14Ch+Stream], eax ; Buffer
.text:00403160                 call    sprintf
.text:00403165                 jmp     loc_4030D6
.text:0040316A ; ---------------------------------------------------------------------------
.text:0040316A
.text:0040316A loc_40316A:                             ; CODE XREF: sub_402DF0+251↑j
.text:0040316A                 mov     ebp, ds:dword_415164
.text:00403170                 cmp     ebp, [esp+14Ch+var_118]
.text:00403174                 jge     loc_40304D
.text:0040317A                 lea     esi, [esi+0]
.text:00403180
.text:00403180 loc_403180:                             ; CODE XREF: sub_402DF0+456↓j
.text:00403180                 mov     esi, eax
.text:00403182                 mov     edi, eax
.text:00403184                 sar     edi, 1Fh
.text:00403187                 sub     esi, [esp+14Ch+var_124]
.text:0040318B                 sbb     edi, [esp+14Ch+var_120]
.text:0040318F                 cmp     edi, 4
.text:00403192                 ja      loc_40304D
.text:00403198                 jb      short loc_4031A6
.text:0040319A                 cmp     esi, 4B82FA08h
.text:004031A0                 ja      loc_40304D
.text:004031A6
.text:004031A6 loc_4031A6:                             ; CODE XREF: sub_402DF0+3A8↑j
.text:004031A6                 mov     eax, 3B9ACA00h
.text:004031AB                 mov     ecx, [esp+14Ch+var_118]
.text:004031AF                 mul     esi
.text:004031B1                 mov     ebx, ecx
.text:004031B3                 sar     ebx, 1Fh
.text:004031B6                 mov     esi, edx
.text:004031B8                 mov     edx, edi
.text:004031BA                 imul    edx, 3B9ACA00h
.text:004031C0                 add     ecx, eax
.text:004031C2                 mov     eax, ebp
.text:004031C4                 lea     edi, [edx+esi]
.text:004031C7                 adc     ebx, edi
.text:004031C9                 cdq
.text:004031CA                 sub     ecx, ebp
.text:004031CC                 sbb     ebx, edx
.text:004031CE                 push    ebx
.text:004031CF                 push    ecx
.text:004031D0                 fild    qword ptr [esp]
.text:004031D3                 add     esp, 8
.text:004031D6                 test    ebx, ebx
.text:004031D8                 js      short loc_403236
.text:004031DA
.text:004031DA loc_4031DA:                             ; CODE XREF: sub_402DF0+44C↓j
.text:004031DA                 fstp    [esp+14Ch+var_12C]
.text:004031DE                 mov     ebp, ds:dword_415104
.text:004031E4                 fld     ds:dbl_402DE8
.text:004031EA                 fdivr   [esp+14Ch+var_12C]
.text:004031EE                 mov     [esp+14Ch+var_130], ebx ; int
.text:004031F2                 mov     ebx, ds:dword_415100
.text:004031F8                 mov     [esp+14Ch+var_134], ecx ; int
.text:004031FC                 lea     ecx, [esp+14Ch+Buffer]
.text:00403203                 mov     [esp+14Ch+Stream], ebx ; int
.text:00403206                 mov     [esp+14Ch+var_13C], 3B9ACA00h ; int
.text:0040320E                 mov     [esp+14Ch+var_138], 0 ; int
.text:00403216                 mov     [esp+14Ch+var_144+4], 1D1h ; int
.text:0040321E                 mov     [esp+14Ch+var_144], ecx ; Buffer
.text:00403222                 mov     [esp+14Ch+Format], ebp ; int
.text:00403226                 fstp    [esp+14Ch+var_12C]
.text:0040322A                 call    sub_407AD0
.text:0040322F                 mov     ebx, eax
.text:00403231                 jmp     loc_4030DD
.text:00403236 ; ---------------------------------------------------------------------------
.text:00403236
.text:00403236 loc_403236:                             ; CODE XREF: sub_402DF0+3E8↑j
.text:00403236                 fadd    ds:flt_402DE0
.text:0040323C                 jmp     short loc_4031DA
.text:0040323C ; ---------------------------------------------------------------------------
.text:0040323E                 align 10h
.text:00403240
.text:00403240 loc_403240:                             ; CODE XREF: sub_402DF0+249↑j
.text:00403240                 mov     ebp, ds:dword_415164
.text:00403246                 jmp     loc_403180
.text:00403246 ; ---------------------------------------------------------------------------
.text:0040324B                 align 10h
.text:00403250
.text:00403250 loc_403250:                             ; CODE XREF: sub_402DF0+11F↑j
.text:00403250                 mov     [esp+14Ch+Stream], offset aTruncatedRecor_0 ; "truncated records"
.text:00403257                 jmp     loc_402F1C
.text:00403257 sub_402DF0      endp
.text:00403257
.text:00403257 ; ---------------------------------------------------------------------------
.text:0040325C                 align 10h
.text:00403260
.text:00403260 ; =============== S U B R O U T I N E =======================================
.text:00403260
.text:00403260
.text:00403260 ; void __cdecl Function(int)
.text:00403260 Function        proc near               ; DATA XREF: sub_402550+373↑o
.text:00403260
.text:00403260 Signal          = dword ptr -1Ch
.text:00403260 Function        = dword ptr -18h
.text:00403260 var_14          = dword ptr -14h
.text:00403260 var_10          = byte ptr -10h
.text:00403260 var_C           = dword ptr -0Ch
.text:00403260 var_8           = dword ptr -8
.text:00403260 var_4           = dword ptr -4
.text:00403260 arg_0           = dword ptr  4
.text:00403260
.text:00403260                 sub     esp, 1Ch
.text:00403263                 mov     [esp+1Ch+var_4], edi
.text:00403267                 mov     edi, [esp+1Ch+arg_0]
.text:0040326B                 mov     [esp+1Ch+var_C], ebx
.text:0040326F                 mov     [esp+1Ch+var_8], esi
.text:00403273                 mov     [esp+1Ch+Function], 0 ; Function
.text:0040327B                 mov     [esp+1Ch+Signal], edi ; Signal
.text:0040327E                 call    signal
.text:00403283                 mov     [esp+1Ch+Signal], 0 ; FileHandle
.text:0040328A                 call    _close
.text:0040328F                 test    eax, eax
.text:00403291                 js      short loc_403300
.text:00403293
.text:00403293 loc_403293:                             ; CODE XREF: Function+DE↓j
.text:00403293                 mov     [esp+1Ch+Signal], 1 ; FileHandle
.text:0040329A                 call    _close
.text:0040329F                 test    eax, eax
.text:004032A1                 js      short loc_4032C0
.text:004032A3
.text:004032A3 loc_4032A3:                             ; CODE XREF: Function+9E↓j
.text:004032A3                 call    sub_402DF0
.text:004032A8                 mov     [esp+1Ch+arg_0], edi ; Signal
.text:004032AC                 mov     ebx, [esp+1Ch+var_C]
.text:004032B0                 mov     esi, [esp+1Ch+var_8]
.text:004032B4                 mov     edi, [esp+1Ch+var_4]
.text:004032B8                 add     esp, 1Ch
.text:004032BB                 jmp     raise
.text:004032C0 ; ---------------------------------------------------------------------------
.text:004032C0
.text:004032C0 loc_4032C0:                             ; CODE XREF: Function+41↑j
.text:004032C0                 mov     ebx, ds:FileName
.text:004032C6                 mov     [esp+1Ch+Signal], ebx ; char *
.text:004032C9                 call    sub_406D00
.text:004032CE                 mov     [esp+1Ch+Signal], (offset stru_40247A._file+2)
.text:004032D5                 mov     esi, eax
.text:004032D7                 call    ds:libintl_gettext
.text:004032DD                 mov     ebx, eax
.text:004032DF                 call    _errno
.text:004032E4                 mov     dword ptr [esp+1Ch+var_10], esi ; char
.text:004032E8                 mov     [esp+1Ch+var_14], ebx ; char *
.text:004032EC                 mov     ecx, [eax]
.text:004032EE                 mov     [esp+1Ch+Signal], 1 ; Code
.text:004032F5                 mov     [esp+1Ch+Function], ecx ; ErrorMessage
.text:004032F9                 call    sub_40AAC0
.text:004032FE                 jmp     short loc_4032A3
.text:00403300 ; ---------------------------------------------------------------------------
.text:00403300
.text:00403300 loc_403300:                             ; CODE XREF: Function+31↑j
.text:00403300                 mov     edx, ds:dword_415000
.text:00403306                 mov     [esp+1Ch+Signal], edx ; char *
.text:00403309                 call    sub_406D00
.text:0040330E                 mov     [esp+1Ch+Signal], offset aClosingInputFi ; "closing input file %s"
.text:00403315                 mov     esi, eax
.text:00403317                 call    ds:libintl_gettext
.text:0040331D                 mov     ebx, eax
.text:0040331F                 call    _errno
.text:00403324                 mov     dword ptr [esp+1Ch+var_10], esi ; char
.text:00403328                 mov     [esp+1Ch+var_14], ebx ; char *
.text:0040332C                 mov     edx, [eax]
.text:0040332E                 mov     [esp+1Ch+Signal], 1 ; Code
.text:00403335                 mov     [esp+1Ch+Function], edx ; ErrorMessage
.text:00403339                 call    sub_40AAC0
.text:0040333E                 jmp     loc_403293
.text:0040333E Function        endp
.text:0040333E
.text:0040333E ; ---------------------------------------------------------------------------
.text:00403343 byte_403343     db 69h                  ; DATA XREF: sub_403500+53↓o
.text:00403344                 dd 90900066h, 6 dup(90909090h)
.text:00403360 aCannotCombineE db 'cannot combine excl and nocreat',0
.text:00403360                                         ; DATA XREF: sub_403500:loc_403615↓o
.text:00403380 aCannotCombineL db 'cannot combine lcase and ucase',0
.text:00403380                                         ; DATA XREF: sub_403500:loc_40363C↓o
.text:0040339F                 align 10h
.text:004033A0 aCannotCombineB db 'cannot combine block and unblock',0
.text:004033A0                                         ; DATA XREF: sub_403500:loc_403669↓o
.text:004033C1                 align 20h
.text:004033E0 aCannotCombineA db 'cannot combine any two of {ascii,ebcdic,ibm}',0
.text:004033E0                                         ; DATA XREF: sub_403500:loc_403699↓o
.text:0040340D aOf             db 'of',0               ; DATA XREF: sub_403500+1E1↓o
.text:00403410 aConv           db 'conv',0             ; DATA XREF: sub_403500+201↓o
.text:00403415 aIflag          db 'iflag',0            ; DATA XREF: sub_403500+216↓o
.text:0040341B aOflag          db 'oflag',0            ; DATA XREF: sub_403500+22B↓o
.text:00403421 aStatus         db 'status',0           ; DATA XREF: sub_403500+240↓o
.text:00403428 aInvalidStatusF db 'invalid status flag: %s',0
.text:00403428                                         ; DATA XREF: sub_403500+250↓o
.text:00403440 ; const char aBcegkkmptwyz0[]
.text:00403440 aBcegkkmptwyz0  db 'bcEGkKMPTwYZ0',0    ; DATA XREF: sub_403500+280↓o
.text:00403440                                         ; sub_404910+27↓o
.text:0040344E aIbs            db 'ibs',0              ; DATA XREF: sub_403500+2C9↓o
.text:00403452 aInvalidNumberS db 'invalid number %s',0
.text:00403452                                         ; DATA XREF: sub_403500+328↓o
.text:00403464 aObs            db 'obs',0              ; DATA XREF: sub_403500+360↓o
.text:00403468 aBs             db 'bs',0               ; DATA XREF: sub_403500+3AC↓o
.text:0040346B aCbs            db 'cbs',0              ; DATA XREF: sub_403500+3FC↓o
.text:0040346F aSkip           db 'skip',0             ; DATA XREF: sub_403500+44E↓o
.text:00403474 aSeek           db 'seek',0             ; DATA XREF: sub_403500+478↓o
.text:00403479 aCount          db 'count',0            ; DATA XREF: sub_403500+4A2↓o
.text:0040347F aUnrecognizedOp db 'unrecognized operand %s=%s',0
.text:0040347F                                         ; DATA XREF: sub_403500+4ED↓o
.text:0040349A aInvalidOutputF db 'invalid output flag: %s',0
.text:0040349A                                         ; DATA XREF: sub_403500:loc_403B27↓o
.text:004034B2 aInvalidInputFl db 'invalid input flag: %s',0
.text:004034B2                                         ; DATA XREF: sub_403500:loc_403B4A↓o
.text:004034C9 aInvalidConvers db 'invalid conversion: %s',0
.text:004034C9                                         ; DATA XREF: sub_403500:loc_403B6D↓o
.text:004034E0 aUnrecognizedOp_0 db 'unrecognized operand %s',0
.text:004034E0                                         ; DATA XREF: sub_403500+698↓o
.text:004034F8                 align 10h
.text:00403500
.text:00403500 ; =============== S U B R O U T I N E =======================================
.text:00403500
.text:00403500
.text:00403500 sub_403500      proc near               ; CODE XREF: sub_402550+115↑p
.text:00403500
.text:00403500 Str             = dword ptr -7Ch
.text:00403500 Val             = dword ptr -78h
.text:00403500 var_74          = dword ptr -74h
.text:00403500 var_70          = byte ptr -70h
.text:00403500 var_6C          = dword ptr -6Ch
.text:00403500 var_5C          = dword ptr -5Ch
.text:00403500 var_58          = dword ptr -58h
.text:00403500 var_54          = dword ptr -54h
.text:00403500 var_50          = dword ptr -50h
.text:00403500 var_3C          = dword ptr -3Ch
.text:00403500 var_38          = dword ptr -38h
.text:00403500 var_34          = dword ptr -34h
.text:00403500 var_30          = dword ptr -30h
.text:00403500 var_2C          = dword ptr -2Ch
.text:00403500 var_28          = dword ptr -28h
.text:00403500 var_24          = dword ptr -24h
.text:00403500 var_20          = dword ptr -20h
.text:00403500 var_15          = byte ptr -15h
.text:00403500 arg_0           = dword ptr  4
.text:00403500 arg_4           = dword ptr  8
.text:00403500
.text:00403500                 push    ebp
.text:00403501                 push    edi
.text:00403502                 push    esi
.text:00403503                 push    ebx
.text:00403504                 sub     esp, 6Ch
.text:00403507                 mov     edx, dword_414020
.text:0040350D                 mov     ecx, [esp+7Ch+arg_0]
.text:00403514                 mov     [esp+7Ch+var_2C], edx
.text:00403518                 cmp     edx, ecx
.text:0040351A                 jge     short loc_403578
.text:0040351C                 lea     esi, [esi+0]
.text:00403520
.text:00403520 loc_403520:                             ; CODE XREF: sub_403500+76↓j
.text:00403520                 mov     ebx, [esp+7Ch+var_2C]
.text:00403524                 mov     ecx, [esp+7Ch+arg_4]
.text:0040352B                 mov     ebp, [ecx+ebx*4]
.text:0040352E                 mov     [esp+7Ch+Val], 3Dh ; '=' ; Val
.text:00403536                 mov     [esp+7Ch+Str], ebp ; Str
.text:00403539                 call    strchr
.text:0040353E                 test    eax, eax
.text:00403540                 mov     ebx, eax
.text:00403542                 jz      loc_403B90
.text:00403548                 mov     byte ptr [ebx], 0
.text:0040354B                 mov     ecx, 3
.text:00403550                 mov     esi, ebp
.text:00403552                 cld
.text:00403553                 mov     edi, offset byte_403343
.text:00403558                 inc     ebx
.text:00403559                 repe cmpsb
.text:0040355B                 jnz     loc_4036E0
.text:00403561                 mov     ds:dword_415000, ebx
.text:00403567
.text:00403567 loc_403567:                             ; CODE XREF: sub_403500+1F7↓j
.text:00403567                                         ; sub_403500+26E↓j ...
.text:00403567                 inc     [esp+7Ch+var_2C]
.text:0040356B                 mov     eax, [esp+7Ch+arg_0]
.text:00403572                 cmp     [esp+7Ch+var_2C], eax
.text:00403576                 jl      short loc_403520
.text:00403578
.text:00403578 loc_403578:                             ; CODE XREF: sub_403500+1A↑j
.text:00403578                 mov     edx, ds:Size
.text:0040357E                 test    edx, edx
.text:00403580                 jz      loc_4036D4
.text:00403586                 mov     eax, ds:dword_415030
.text:0040358B                 test    eax, eax
.text:0040358D                 jnz     loc_4036C9
.text:00403593
.text:00403593 loc_403593:                             ; CODE XREF: sub_403500+1D9↓j
.text:00403593                 mov     ecx, ds:dword_415070
.text:00403599                 or      ecx, 800h
.text:0040359F                 mov     ds:dword_415070, ecx
.text:004035A5
.text:004035A5 loc_4035A5:                             ; CODE XREF: sub_403500+1CF↓j
.text:004035A5                 test    edx, edx
.text:004035A7                 jnz     short loc_4035B4
.text:004035A9                 mov     edx, 200h
.text:004035AE                 mov     ds:Size, edx
.text:004035B4
.text:004035B4 loc_4035B4:                             ; CODE XREF: sub_403500+A7↑j
.text:004035B4                 test    eax, eax
.text:004035B6                 jnz     short loc_4035C3
.text:004035B8                 mov     esi, 200h
.text:004035BD                 mov     ds:dword_415030, esi
.text:004035C3
.text:004035C3 loc_4035C3:                             ; CODE XREF: sub_403500+B6↑j
.text:004035C3                 mov     ebp, ds:dword_415040
.text:004035C9                 test    ebp, ebp
.text:004035CB                 jnz     short loc_4035D6
.text:004035CD                 and     ecx, 0FFFFFFE7h
.text:004035D0                 mov     ds:dword_415070, ecx
.text:004035D6
.text:004035D6 loc_4035D6:                             ; CODE XREF: sub_403500+CB↑j
.text:004035D6                 mov     ebx, ecx
.text:004035D8                 and     ebx, 7
.text:004035DB                 lea     edi, [ebx-1]
.text:004035DE                 test    edi, ebx
.text:004035E0                 jnz     loc_403699
.text:004035E6
.text:004035E6 loc_4035E6:                             ; CODE XREF: sub_403500+1C4↓j
.text:004035E6                 mov     eax, ecx
.text:004035E8                 and     eax, 18h
.text:004035EB                 lea     esi, [eax-1]
.text:004035EE                 test    esi, eax
.text:004035F0                 jnz     short loc_403669
.text:004035F2
.text:004035F2 loc_4035F2:                             ; CODE XREF: sub_403500+194↓j
.text:004035F2                 mov     edi, ecx
.text:004035F4                 and     edi, 60h
.text:004035F7                 lea     ebp, [edi-1]
.text:004035FA                 test    ebp, edi
.text:004035FC                 jnz     short loc_40363C
.text:004035FE
.text:004035FE loc_4035FE:                             ; CODE XREF: sub_403500+167↓j
.text:004035FE                 mov     ebx, ecx
.text:00403600                 and     ebx, 3000h
.text:00403606                 lea     ecx, [ebx-1]
.text:00403609                 test    ecx, ebx
.text:0040360B                 jnz     short loc_403615
.text:0040360D
.text:0040360D loc_40360D:                             ; CODE XREF: sub_403500+13A↓j
.text:0040360D                 add     esp, 6Ch
.text:00403610                 pop     ebx
.text:00403611                 pop     esi
.text:00403612                 pop     edi
.text:00403613                 pop     ebp
.text:00403614                 retn
.text:00403615 ; ---------------------------------------------------------------------------
.text:00403615
.text:00403615 loc_403615:                             ; CODE XREF: sub_403500+10B↑j
.text:00403615                 mov     [esp+7Ch+Str], offset aCannotCombineE ; "cannot combine excl and nocreat"
.text:0040361C                 call    ds:libintl_gettext
.text:00403622                 mov     [esp+7Ch+Val], 0 ; ErrorMessage
.text:0040362A                 mov     [esp+7Ch+Str], 1 ; Code
.text:00403631                 mov     [esp+7Ch+var_74], eax ; char *
.text:00403635                 call    sub_40AAC0
.text:0040363A                 jmp     short loc_40360D
.text:0040363C ; ---------------------------------------------------------------------------
.text:0040363C
.text:0040363C loc_40363C:                             ; CODE XREF: sub_403500+FC↑j
.text:0040363C                 mov     [esp+7Ch+Str], offset aCannotCombineL ; "cannot combine lcase and ucase"
.text:00403643                 call    ds:libintl_gettext
.text:00403649                 mov     [esp+7Ch+Val], 0 ; ErrorMessage
.text:00403651                 mov     [esp+7Ch+Str], 1 ; Code
.text:00403658                 mov     [esp+7Ch+var_74], eax ; char *
.text:0040365C                 call    sub_40AAC0
.text:00403661                 mov     ecx, ds:dword_415070
.text:00403667                 jmp     short loc_4035FE
.text:00403669 ; ---------------------------------------------------------------------------
.text:00403669
.text:00403669 loc_403669:                             ; CODE XREF: sub_403500+F0↑j
.text:00403669                 mov     [esp+7Ch+Str], offset aCannotCombineB ; "cannot combine block and unblock"
.text:00403670                 call    ds:libintl_gettext
.text:00403676                 mov     [esp+7Ch+Val], 0 ; ErrorMessage
.text:0040367E                 mov     [esp+7Ch+Str], 1 ; Code
.text:00403685                 mov     [esp+7Ch+var_74], eax ; char *
.text:00403689                 call    sub_40AAC0
.text:0040368E                 mov     ecx, ds:dword_415070
.text:00403694                 jmp     loc_4035F2
.text:00403699 ; ---------------------------------------------------------------------------
.text:00403699
.text:00403699 loc_403699:                             ; CODE XREF: sub_403500+E0↑j
.text:00403699                 mov     [esp+7Ch+Str], offset aCannotCombineA ; "cannot combine any two of {ascii,ebcdic"...
.text:004036A0                 call    ds:libintl_gettext
.text:004036A6                 mov     [esp+7Ch+Val], 0 ; ErrorMessage
.text:004036AE                 mov     [esp+7Ch+Str], 1 ; Code
.text:004036B5                 mov     [esp+7Ch+var_74], eax ; char *
.text:004036B9                 call    sub_40AAC0
.text:004036BE                 mov     ecx, ds:dword_415070
.text:004036C4                 jmp     loc_4035E6
.text:004036C9 ; ---------------------------------------------------------------------------
.text:004036C9
.text:004036C9 loc_4036C9:                             ; CODE XREF: sub_403500+8D↑j
.text:004036C9                 mov     ecx, ds:dword_415070
.text:004036CF                 jmp     loc_4035A5
.text:004036D4 ; ---------------------------------------------------------------------------
.text:004036D4
.text:004036D4 loc_4036D4:                             ; CODE XREF: sub_403500+80↑j
.text:004036D4                 mov     eax, ds:dword_415030
.text:004036D9                 jmp     loc_403593
.text:004036D9 ; ---------------------------------------------------------------------------
.text:004036DE                 align 10h
.text:004036E0
.text:004036E0 loc_4036E0:                             ; CODE XREF: sub_403500+5B↑j
.text:004036E0                 cld
.text:004036E1                 mov     edi, offset aOf ; "of"
.text:004036E6                 mov     ecx, 3
.text:004036EB                 mov     esi, ebp
.text:004036ED                 repe cmpsb
.text:004036EF                 jnz     short loc_403700
.text:004036F1                 mov     ds:FileName, ebx
.text:004036F7                 jmp     loc_403567
.text:004036F7 ; ---------------------------------------------------------------------------
.text:004036FC                 align 10h
.text:00403700
.text:00403700 loc_403700:                             ; CODE XREF: sub_403500+1EF↑j
.text:00403700                 cld
.text:00403701                 mov     edi, offset aConv ; "conv"
.text:00403706                 mov     ecx, 5
.text:0040370B                 mov     esi, ebp
.text:0040370D                 repe cmpsb
.text:0040370F                 jz      loc_403B6D
.text:00403715                 cld
.text:00403716                 mov     edi, offset aIflag ; "iflag"
.text:0040371B                 mov     ecx, 6
.text:00403720                 mov     esi, ebp
.text:00403722                 repe cmpsb
.text:00403724                 jz      loc_403B4A
.text:0040372A                 cld
.text:0040372B                 mov     edi, offset aOflag ; "oflag"
.text:00403730                 mov     ecx, 6
.text:00403735                 mov     esi, ebp
.text:00403737                 repe cmpsb
.text:00403739                 jz      loc_403B27
.text:0040373F                 cld
.text:00403740                 mov     edi, offset aStatus ; "status"
.text:00403745                 mov     ecx, 7
.text:0040374A                 mov     esi, ebp
.text:0040374C                 repe cmpsb
.text:0040374E                 jnz     short loc_403773
.text:00403750                 mov     [esp+7Ch+var_74], offset aInvalidStatusF ; "invalid status flag: %s"
.text:00403758                 mov     [esp+7Ch+Val], offset aNoxfer ; "noxfer"
.text:00403760                 mov     [esp+7Ch+Str], ebx ; Str2
.text:00403763                 call    sub_404810
.text:00403768                 or      ds:dword_4150A0, eax
.text:0040376E                 jmp     loc_403567
.text:00403773 ; ---------------------------------------------------------------------------
.text:00403773
.text:00403773 loc_403773:                             ; CODE XREF: sub_403500+24E↑j
.text:00403773                 mov     [esp+7Ch+var_15], 0
.text:00403778                 lea     ecx, [esp+7Ch+var_24]
.text:0040377C                 lea     edx, [esp+7Ch+var_28]
.text:00403780                 mov     [esp+7Ch+var_6C], offset aBcegkkmptwyz0 ; "bcEGkKMPTwYZ0"
.text:00403788                 lea     esi, [esp+7Ch+var_15]
.text:0040378C                 mov     dword ptr [esp+7Ch+var_70], ecx ; int
.text:00403790                 mov     [esp+7Ch+var_74], 0Ah ; int
.text:00403798                 mov     [esp+7Ch+Val], edx ; int
.text:0040379C                 mov     [esp+7Ch+Str], ebx ; int
.text:0040379F                 call    sub_406DA0
.text:004037A4                 cmp     eax, 2
.text:004037A7                 jz      loc_403A45
.text:004037AD
.text:004037AD loc_4037AD:                             ; CODE XREF: sub_403500+54C↓j
.text:004037AD                 test    eax, eax
.text:004037AF                 jz      loc_403A30
.text:004037B5                 mov     byte ptr [esi], 1
.text:004037B8
.text:004037B8 loc_4037B8:                             ; CODE XREF: sub_403500+5DA↓j
.text:004037B8                 mov     [esp+7Ch+var_34], 0
.text:004037C0                 mov     [esp+7Ch+var_30], 0
.text:004037C8
.text:004037C8 loc_4037C8:                             ; CODE XREF: sub_403500+540↓j
.text:004037C8                 cld
.text:004037C9                 mov     edi, offset aIbs ; "ibs"
.text:004037CE                 mov     ecx, 4
.text:004037D3                 mov     esi, ebp
.text:004037D5                 repe cmpsb
.text:004037D7                 jnz     loc_40385F
.text:004037DD                 movzx   ecx, [esp+7Ch+var_15]
.text:004037E2                 mov     eax, [esp+7Ch+var_34]
.text:004037E6                 mov     ebp, [esp+7Ch+var_30]
.text:004037EA                 add     eax, 0FFFFFFFFh
.text:004037ED                 adc     ebp, 0FFFFFFFFh
.text:004037F0                 cmp     ebp, 0
.text:004037F3                 ja      short loc_4037FC
.text:004037F5                 cmp     eax, 7FFFFFFEh
.text:004037FA                 jbe     short loc_403858
.text:004037FC
.text:004037FC loc_4037FC:                             ; CODE XREF: sub_403500+2F3↑j
.text:004037FC                 mov     al, 1
.text:004037FE
.text:004037FE loc_4037FE:                             ; CODE XREF: sub_403500+35D↓j
.text:004037FE                 mov     [esp+7Ch+var_15], al
.text:00403802                 mov     eax, [esp+7Ch+var_34]
.text:00403806                 mov     ds:Size, eax
.text:0040380B
.text:0040380B loc_40380B:                             ; CODE XREF: sub_403500+39F↓j
.text:0040380B                 or      ds:dword_415070, 800h
.text:00403815
.text:00403815 loc_403815:                             ; CODE XREF: sub_403500+3EF↓j
.text:00403815                                         ; sub_403500+448↓j ...
.text:00403815                 cmp     [esp+7Ch+var_15], 0
.text:0040381A                 jz      loc_403567
.text:00403820                 mov     [esp+7Ch+Str], ebx ; char *
.text:00403823                 call    sub_406D00
.text:00403828                 mov     [esp+7Ch+Str], offset aInvalidNumberS ; "invalid number %s"
.text:0040382F                 mov     ebx, eax
.text:00403831                 call    ds:libintl_gettext
.text:00403837                 mov     dword ptr [esp+7Ch+var_70], ebx ; char
.text:0040383B                 mov     [esp+7Ch+Val], 0 ; ErrorMessage
.text:00403843                 mov     [esp+7Ch+Str], 1 ; Code
.text:0040384A                 mov     [esp+7Ch+var_74], eax ; char *
.text:0040384E                 call    sub_40AAC0
.text:00403853                 jmp     loc_403567
.text:00403858 ; ---------------------------------------------------------------------------
.text:00403858
.text:00403858 loc_403858:                             ; CODE XREF: sub_403500+2FA↑j
.text:00403858                 test    ecx, ecx
.text:0040385A                 setnz   al
.text:0040385D                 jmp     short loc_4037FE
.text:0040385F ; ---------------------------------------------------------------------------
.text:0040385F
.text:0040385F loc_40385F:                             ; CODE XREF: sub_403500+2D7↑j
.text:0040385F                 cld
.text:00403860                 mov     edi, offset aObs ; "obs"
.text:00403865                 mov     ecx, 4
.text:0040386A                 mov     esi, ebp
.text:0040386C                 repe cmpsb
.text:0040386E                 jnz     short loc_4038AB
.text:00403870                 movzx   ecx, [esp+7Ch+var_15]
.text:00403875                 mov     eax, [esp+7Ch+var_34]
.text:00403879                 mov     esi, [esp+7Ch+var_30]
.text:0040387D                 add     eax, 0FFFFFFFFh
.text:00403880                 adc     esi, 0FFFFFFFFh
.text:00403883                 cmp     esi, 0
.text:00403886                 ja      short loc_40388F
.text:00403888                 cmp     eax, 7FFFFFFEh
.text:0040388D                 jbe     short loc_4038A4
.text:0040388F
.text:0040388F loc_40388F:                             ; CODE XREF: sub_403500+386↑j
.text:0040388F                 mov     al, 1
.text:00403891
.text:00403891 loc_403891:                             ; CODE XREF: sub_403500+3A9↓j
.text:00403891                 mov     [esp+7Ch+var_15], al
.text:00403895                 mov     ecx, [esp+7Ch+var_34]
.text:00403899                 mov     ds:dword_415030, ecx
.text:0040389F                 jmp     loc_40380B
.text:004038A4 ; ---------------------------------------------------------------------------
.text:004038A4
.text:004038A4 loc_4038A4:                             ; CODE XREF: sub_403500+38D↑j
.text:004038A4                 test    ecx, ecx
.text:004038A6                 setnz   al
.text:004038A9                 jmp     short loc_403891
.text:004038AB ; ---------------------------------------------------------------------------
.text:004038AB
.text:004038AB loc_4038AB:                             ; CODE XREF: sub_403500+36E↑j
.text:004038AB                 cld
.text:004038AC                 mov     edi, offset aBs ; "bs"
.text:004038B1                 mov     ecx, 3
.text:004038B6                 mov     esi, ebp
.text:004038B8                 repe cmpsb
.text:004038BA                 jnz     short loc_4038FB
.text:004038BC                 movzx   ecx, [esp+7Ch+var_15]
.text:004038C1                 mov     eax, [esp+7Ch+var_34]
.text:004038C5                 mov     edi, [esp+7Ch+var_30]
.text:004038C9                 add     eax, 0FFFFFFFFh
.text:004038CC                 adc     edi, 0FFFFFFFFh
.text:004038CF                 cmp     edi, 0
.text:004038D2                 ja      short loc_4038DB
.text:004038D4                 cmp     eax, 7FFFFFFEh
.text:004038D9                 jbe     short loc_4038F4
.text:004038DB
.text:004038DB loc_4038DB:                             ; CODE XREF: sub_403500+3D2↑j
.text:004038DB                 mov     al, 1
.text:004038DD
.text:004038DD loc_4038DD:                             ; CODE XREF: sub_403500+3F9↓j
.text:004038DD                 mov     [esp+7Ch+var_15], al
.text:004038E1                 mov     eax, [esp+7Ch+var_34]
.text:004038E5                 mov     ds:Size, eax
.text:004038EA                 mov     ds:dword_415030, eax
.text:004038EF                 jmp     loc_403815
.text:004038F4 ; ---------------------------------------------------------------------------
.text:004038F4
.text:004038F4 loc_4038F4:                             ; CODE XREF: sub_403500+3D9↑j
.text:004038F4                 test    ecx, ecx
.text:004038F6                 setnz   al
.text:004038F9                 jmp     short loc_4038DD
.text:004038FB ; ---------------------------------------------------------------------------
.text:004038FB
.text:004038FB loc_4038FB:                             ; CODE XREF: sub_403500+3BA↑j
.text:004038FB                 cld
.text:004038FC                 mov     edi, offset aCbs ; "cbs"
.text:00403901                 mov     ecx, 4
.text:00403906                 mov     esi, ebp
.text:00403908                 repe cmpsb
.text:0040390A                 jnz     short loc_40394D
.text:0040390C                 mov     esi, [esp+7Ch+var_34]
.text:00403910                 xor     ebp, ebp
.text:00403912                 xor     edi, edi
.text:00403914                 mov     ecx, [esp+7Ch+var_30]
.text:00403918                 mov     edx, [esp+7Ch+var_34]
.text:0040391C                 mov     ds:dword_415040, esi
.text:00403922                 mov     eax, ds:dword_415040
.text:00403927                 xor     ecx, ebp
.text:00403929                 movzx   esi, [esp+7Ch+var_15]
.text:0040392E                 xor     eax, edx
.text:00403930                 or      ecx, eax
.text:00403932                 jnz     short loc_40393C
.text:00403934                 mov     ecx, [esp+7Ch+var_34]
.text:00403938                 test    ecx, ecx
.text:0040393A                 jnz     short loc_403941
.text:0040393C
.text:0040393C loc_40393C:                             ; CODE XREF: sub_403500+432↑j
.text:0040393C                 mov     edi, 1
.text:00403941
.text:00403941 loc_403941:                             ; CODE XREF: sub_403500+43A↑j
.text:00403941                 or      esi, edi
.text:00403943                 setnz   [esp+7Ch+var_15]
.text:00403948                 jmp     loc_403815
.text:0040394D ; ---------------------------------------------------------------------------
.text:0040394D
.text:0040394D loc_40394D:                             ; CODE XREF: sub_403500+40A↑j
.text:0040394D                 cld
.text:0040394E                 mov     edi, offset aSkip ; "skip"
.text:00403953                 mov     ecx, 5
.text:00403958                 mov     esi, ebp
.text:0040395A                 repe cmpsb
.text:0040395C                 jnz     short loc_403977
.text:0040395E                 mov     edx, [esp+7Ch+var_34]
.text:00403962                 mov     edi, [esp+7Ch+var_30]
.text:00403966                 mov     ds:dword_415050, edx
.text:0040396C                 mov     ds:dword_415054, edi
.text:00403972                 jmp     loc_403815
.text:00403977 ; ---------------------------------------------------------------------------
.text:00403977
.text:00403977 loc_403977:                             ; CODE XREF: sub_403500+45C↑j
.text:00403977                 cld
.text:00403978                 mov     edi, offset aSeek ; "seek"
.text:0040397D                 mov     ecx, 5
.text:00403982                 mov     esi, ebp
.text:00403984                 repe cmpsb
.text:00403986                 jnz     short loc_4039A1
.text:00403988                 mov     esi, [esp+7Ch+var_34]
.text:0040398C                 mov     ebp, [esp+7Ch+var_30]
.text:00403990                 mov     ds:dword_415060, esi
.text:00403996                 mov     ds:dword_415064, ebp
.text:0040399C                 jmp     loc_403815
.text:004039A1 ; ---------------------------------------------------------------------------
.text:004039A1
.text:004039A1 loc_4039A1:                             ; CODE XREF: sub_403500+486↑j
.text:004039A1                 cld
.text:004039A2                 mov     edi, offset aCount ; "count"
.text:004039A7                 mov     ecx, 6
.text:004039AC                 mov     esi, ebp
.text:004039AE                 repe cmpsb
.text:004039B0                 jnz     short loc_4039CB
.text:004039B2                 mov     edi, [esp+7Ch+var_34]
.text:004039B6                 mov     ecx, [esp+7Ch+var_30]
.text:004039BA                 mov     dword_414010, edi
.text:004039C0                 mov     dword_414014, ecx
.text:004039C6                 jmp     loc_403815
.text:004039CB ; ---------------------------------------------------------------------------
.text:004039CB
.text:004039CB loc_4039CB:                             ; CODE XREF: sub_403500+4B0↑j
.text:004039CB                 mov     [esp+7Ch+Val], ebx ; char *
.text:004039CF                 mov     [esp+7Ch+Str], 1 ; int
.text:004039D6                 call    sub_406CD0
.text:004039DB                 mov     [esp+7Ch+Val], ebp ; char *
.text:004039DF                 mov     edi, eax
.text:004039E1                 mov     [esp+7Ch+Str], 0 ; int
.text:004039E8                 call    sub_406CD0
.text:004039ED                 mov     [esp+7Ch+Str], offset aUnrecognizedOp ; "unrecognized operand %s=%s"
.text:004039F4                 mov     ebp, eax
.text:004039F6                 call    ds:libintl_gettext
.text:004039FC                 mov     [esp+7Ch+var_6C], edi
.text:00403A00                 mov     dword ptr [esp+7Ch+var_70], ebp ; char
.text:00403A04                 mov     [esp+7Ch+Val], 0 ; ErrorMessage
.text:00403A0C                 mov     [esp+7Ch+var_74], eax ; char *
.text:00403A10                 mov     [esp+7Ch+Str], 0 ; Code
.text:00403A17                 call    sub_40AAC0
.text:00403A1C                 mov     [esp+7Ch+Str], 1 ; Code
.text:00403A23                 call    sub_402210
.text:00403A23 ; ---------------------------------------------------------------------------
.text:00403A28                 db 0E9h ; é
.text:00403A29                 db 0E8h ; è
.text:00403A2A                 db 0FDh ; ý
.text:00403A2B                 db 0FFh ; ÿ
.text:00403A2C                 db 0FFh ; ÿ
.text:00403A2D                 align 10h
.text:00403A30
.text:00403A30 loc_403A30:                             ; CODE XREF: sub_403500+2AF↑j
.text:00403A30                                         ; sub_403500+618↓j
.text:00403A30                 mov     edx, [esp+7Ch+var_24]
.text:00403A34                 mov     edi, [esp+7Ch+var_20]
.text:00403A38                 mov     [esp+7Ch+var_34], edx
.text:00403A3C                 mov     [esp+7Ch+var_30], edi
.text:00403A40                 jmp     loc_4037C8
.text:00403A45 ; ---------------------------------------------------------------------------
.text:00403A45
.text:00403A45 loc_403A45:                             ; CODE XREF: sub_403500+2A7↑j
.text:00403A45                 mov     edx, [esp+7Ch+var_28]
.text:00403A49                 cmp     byte ptr [edx], 78h ; 'x'
.text:00403A4C                 jnz     loc_4037AD
.text:00403A52                 mov     [esp+7Ch+Val], esi
.text:00403A56                 lea     edi, [edx+1]
.text:00403A59                 mov     [esp+7Ch+Str], edi
.text:00403A5C                 call    sub_404910
.text:00403A61                 mov     [esp+7Ch+var_38], edx
.text:00403A65                 mov     esi, [esp+7Ch+var_38]
.text:00403A69                 mov     [esp+7Ch+var_3C], eax
.text:00403A6D                 or      esi, [esp+7Ch+var_3C]
.text:00403A71                 jz      loc_403B1D
.text:00403A77                 mov     esi, [esp+7Ch+var_24]
.text:00403A7B                 mov     eax, [esp+7Ch+var_3C]
.text:00403A7F                 mov     edi, [esp+7Ch+var_20]
.text:00403A83                 mul     esi
.text:00403A85                 mov     [esp+7Ch+var_54], eax
.text:00403A89                 mov     eax, [esp+7Ch+var_38]
.text:00403A8D                 mov     [esp+7Ch+var_50], edx
.text:00403A91                 mov     ecx, [esp+7Ch+var_50]
.text:00403A95                 imul    eax, esi
.text:00403A98                 mov     edx, [esp+7Ch+var_3C]
.text:00403A9C                 add     ecx, eax
.text:00403A9E                 mov     eax, [esp+7Ch+var_3C]
.text:00403AA2                 mov     [esp+7Ch+var_74], edx
.text:00403AA6                 mov     edx, [esp+7Ch+var_54]
.text:00403AAA                 imul    eax, edi
.text:00403AAD                 mov     [esp+7Ch+Str], edx
.text:00403AB0                 add     ecx, eax
.text:00403AB2                 mov     [esp+7Ch+var_50], ecx
.text:00403AB6                 mov     ecx, [esp+7Ch+var_38]
.text:00403ABA                 mov     dword ptr [esp+7Ch+var_70], ecx
.text:00403ABE                 mov     ecx, [esp+7Ch+var_50]
.text:00403AC2                 mov     [esp+7Ch+Val], ecx
.text:00403AC6                 call    sub_4129A0
.text:00403ACB                 mov     ecx, edx
.text:00403ACD                 xor     eax, esi
.text:00403ACF                 xor     ecx, edi
.text:00403AD1                 or      ecx, eax
.text:00403AD3                 jz      short loc_403ADF
.text:00403AD5                 mov     [esp+7Ch+var_15], 1
.text:00403ADA                 jmp     loc_4037B8
.text:00403ADF ; ---------------------------------------------------------------------------
.text:00403ADF
.text:00403ADF loc_403ADF:                             ; CODE XREF: sub_403500+5D3↑j
.text:00403ADF                                         ; sub_403500+625↓j
.text:00403ADF                 mov     eax, [esp+7Ch+var_3C]
.text:00403AE3                 mov     ecx, [esp+7Ch+var_38]
.text:00403AE7                 mul     esi
.text:00403AE9                 imul    ecx, esi
.text:00403AEC                 mov     [esp+7Ch+var_5C], eax
.text:00403AF0                 mov     eax, [esp+7Ch+var_3C]
.text:00403AF4                 mov     [esp+7Ch+var_58], edx
.text:00403AF8                 mov     esi, [esp+7Ch+var_58]
.text:00403AFC                 imul    eax, edi
.text:00403AFF                 mov     edi, [esp+7Ch+var_5C]
.text:00403B03                 add     esi, ecx
.text:00403B05                 lea     edx, [eax+esi]
.text:00403B08                 mov     [esp+7Ch+var_58], edx
.text:00403B0C                 mov     esi, [esp+7Ch+var_58]
.text:00403B10                 mov     [esp+7Ch+var_24], edi
.text:00403B14                 mov     [esp+7Ch+var_20], esi
.text:00403B18                 jmp     loc_403A30
.text:00403B1D ; ---------------------------------------------------------------------------
.text:00403B1D
.text:00403B1D loc_403B1D:                             ; CODE XREF: sub_403500+571↑j
.text:00403B1D                 mov     esi, [esp+7Ch+var_24]
.text:00403B21                 mov     edi, [esp+7Ch+var_20]
.text:00403B25                 jmp     short loc_403ADF
.text:00403B27 ; ---------------------------------------------------------------------------
.text:00403B27
.text:00403B27 loc_403B27:                             ; CODE XREF: sub_403500+239↑j
.text:00403B27                 mov     [esp+7Ch+var_74], offset aInvalidOutputF ; "invalid output flag: %s"
.text:00403B2F                 mov     [esp+7Ch+Val], offset aAppend ; "append"
.text:00403B37                 mov     [esp+7Ch+Str], ebx ; Str2
.text:00403B3A                 call    sub_404810
.text:00403B3F                 or      ds:dword_415090, eax
.text:00403B45                 jmp     loc_403567
.text:00403B4A ; ---------------------------------------------------------------------------
.text:00403B4A
.text:00403B4A loc_403B4A:                             ; CODE XREF: sub_403500+224↑j
.text:00403B4A                 mov     [esp+7Ch+var_74], offset aInvalidInputFl ; "invalid input flag: %s"
.text:00403B52                 mov     [esp+7Ch+Val], offset aAppend ; "append"
.text:00403B5A                 mov     [esp+7Ch+Str], ebx ; Str2
.text:00403B5D                 call    sub_404810
.text:00403B62                 or      ds:dword_415080, eax
.text:00403B68                 jmp     loc_403567
.text:00403B6D ; ---------------------------------------------------------------------------
.text:00403B6D
.text:00403B6D loc_403B6D:                             ; CODE XREF: sub_403500+20F↑j
.text:00403B6D                 mov     [esp+7Ch+var_74], offset aInvalidConvers ; "invalid conversion: %s"
.text:00403B75                 mov     [esp+7Ch+Val], offset aAscii ; "ascii"
.text:00403B7D                 mov     [esp+7Ch+Str], ebx ; Str2
.text:00403B80                 call    sub_404810
.text:00403B85                 or      ds:dword_415070, eax
.text:00403B8B                 jmp     loc_403567
.text:00403B90 ; ---------------------------------------------------------------------------
.text:00403B90
.text:00403B90 loc_403B90:                             ; CODE XREF: sub_403500+42↑j
.text:00403B90                 mov     [esp+7Ch+Str], ebp ; char *
.text:00403B93                 call    sub_406D00
.text:00403B98                 mov     [esp+7Ch+Str], offset aUnrecognizedOp_0 ; "unrecognized operand %s"
.text:00403B9F                 mov     edi, eax
.text:00403BA1                 call    ds:libintl_gettext
.text:00403BA7                 mov     dword ptr [esp+7Ch+var_70], edi ; char
.text:00403BAB                 mov     [esp+7Ch+Val], 0 ; ErrorMessage
.text:00403BB3                 mov     [esp+7Ch+Str], 0 ; Code
.text:00403BBA                 mov     [esp+7Ch+var_74], eax ; char *
.text:00403BBE                 call    sub_40AAC0
.text:00403BC3                 mov     [esp+7Ch+Str], 1 ; Code
.text:00403BCA                 call    sub_402210
.text:00403BCA sub_403500      endp
.text:00403BCA
.text:00403BCA ; ---------------------------------------------------------------------------
.text:00403BCF                 db 0E9h ; é
.text:00403BD0                 db  74h ; t
.text:00403BD1                 db 0F9h ; ù
.text:00403BD2                 db 0FFh ; ÿ
.text:00403BD3                 db 0FFh ; ÿ
.text:00403BD4                 align 10h
.text:00403BE0
.text:00403BE0 ; =============== S U B R O U T I N E =======================================
.text:00403BE0
.text:00403BE0
.text:00403BE0 sub_403BE0      proc near               ; CODE XREF: sub_402550+11A↑p
.text:00403BE0
.text:00403BE0 C               = dword ptr -0Ch
.text:00403BE0 Type            = dword ptr -8
.text:00403BE0
.text:00403BE0                 push    ebx
.text:00403BE1                 sub     esp, 8
.text:00403BE4                 mov     ecx, ds:dword_415070
.text:00403BEA                 test    cl, 1
.text:00403BED                 mov     ebx, ecx
.text:00403BEF                 jz      short loc_403C24
.text:00403BF1                 xor     edx, edx
.text:00403BF3                 lea     esi, [esi+0]
.text:00403BF9                 lea     edi, [edi+0]
.text:00403C00
.text:00403C00 loc_403C00:                             ; CODE XREF: sub_403BE0+3B↓j
.text:00403C00                 movzx   eax, ds:byte_4151C0[edx]
.text:00403C07                 movzx   eax, ds:byte_401620[eax]
.text:00403C0E                 mov     ds:byte_4151C0[edx], al
.text:00403C14                 inc     edx
.text:00403C15                 cmp     edx, 0FFh
.text:00403C1B                 jle     short loc_403C00
.text:00403C1D                 mov     ds:byte_4150B0, 1
.text:00403C24
.text:00403C24 loc_403C24:                             ; CODE XREF: sub_403BE0+F↑j
.text:00403C24                 test    bl, 40h
.text:00403C27                 jz      loc_403D13
.text:00403C2D                 xor     ebx, ebx
.text:00403C2F                 nop
.text:00403C30
.text:00403C30 loc_403C30:                             ; CODE XREF: sub_403BE0+85↓j
.text:00403C30                 movzx   edx, ds:byte_4151C0[ebx]
.text:00403C37                 mov     ecx, ds:__mb_cur_max
.text:00403C3D                 cmp     dword ptr [ecx], 1
.text:00403C40                 jz      loc_403D00
.text:00403C46                 mov     [esp+0Ch+Type], 2 ; Type
.text:00403C4E                 mov     [esp+0Ch+C], edx ; C
.text:00403C51                 call    _isctype
.text:00403C56
.text:00403C56 loc_403C56:                             ; CODE XREF: sub_403BE0+12E↓j
.text:00403C56                 test    eax, eax
.text:00403C58                 jnz     loc_403CE0
.text:00403C5E
.text:00403C5E loc_403C5E:                             ; CODE XREF: sub_403BE0+115↓j
.text:00403C5E                 inc     ebx
.text:00403C5F                 cmp     ebx, 0FFh
.text:00403C65                 jle     short loc_403C30
.text:00403C67
.text:00403C67 loc_403C67:                             ; CODE XREF: sub_403BE0+16F↓j
.text:00403C67                 mov     ds:byte_4150B0, 1
.text:00403C6E                 mov     ecx, ds:dword_415070
.text:00403C74
.text:00403C74 loc_403C74:                             ; CODE XREF: sub_403BE0+136↓j
.text:00403C74                 test    cl, 2
.text:00403C77                 jz      short loc_403CB7
.text:00403C79                 xor     edx, edx
.text:00403C7B                 nop
.text:00403C7C                 lea     esi, [esi+0]
.text:00403C80
.text:00403C80 loc_403C80:                             ; CODE XREF: sub_403BE0+BB↓j
.text:00403C80                 movzx   ecx, ds:byte_4151C0[edx]
.text:00403C87                 movzx   ebx, ds:byte_401420[ecx]
.text:00403C8E                 mov     ds:byte_4151C0[edx], bl
.text:00403C94                 inc     edx
.text:00403C95                 cmp     edx, 0FFh
.text:00403C9B                 jle     short loc_403C80
.text:00403C9D
.text:00403C9D loc_403C9D:                             ; CODE XREF: sub_403BE0+FD↓j
.text:00403C9D                 mov     ds:byte_4150B0, 1
.text:00403CA4                 mov     byte_414018, 25h ; '%'
.text:00403CAB                 mov     byte_414019, 40h ; '@'
.text:00403CB2
.text:00403CB2 loc_403CB2:                             ; CODE XREF: sub_403BE0+DA↓j
.text:00403CB2                 add     esp, 8
.text:00403CB5                 pop     ebx
.text:00403CB6                 retn
.text:00403CB7 ; ---------------------------------------------------------------------------
.text:00403CB7
.text:00403CB7 loc_403CB7:                             ; CODE XREF: sub_403BE0+97↑j
.text:00403CB7                 test    cl, 4
.text:00403CBA                 jz      short loc_403CB2
.text:00403CBC                 xor     edx, edx
.text:00403CBE                 mov     esi, esi
.text:00403CC0
.text:00403CC0 loc_403CC0:                             ; CODE XREF: sub_403BE0+FB↓j
.text:00403CC0                 movzx   ecx, ds:byte_4151C0[edx]
.text:00403CC7                 movzx   ebx, ds:byte_401520[ecx]
.text:00403CCE                 mov     ds:byte_4151C0[edx], bl
.text:00403CD4                 inc     edx
.text:00403CD5                 cmp     edx, 0FFh
.text:00403CDB                 jle     short loc_403CC0
.text:00403CDD                 jmp     short loc_403C9D
.text:00403CDD ; ---------------------------------------------------------------------------
.text:00403CDF                 align 10h
.text:00403CE0
.text:00403CE0 loc_403CE0:                             ; CODE XREF: sub_403BE0+78↑j
.text:00403CE0                 movzx   edx, ds:byte_4151C0[ebx]
.text:00403CE7                 mov     [esp+0Ch+C], edx ; C
.text:00403CEA                 call    toupper
.text:00403CEF                 mov     ds:byte_4151C0[ebx], al
.text:00403CF5                 jmp     loc_403C5E
.text:00403CF5 ; ---------------------------------------------------------------------------
.text:00403CFA                 align 10h
.text:00403D00
.text:00403D00 loc_403D00:                             ; CODE XREF: sub_403BE0+60↑j
.text:00403D00                 mov     eax, ds:_pctype
.text:00403D05                 mov     ecx, [eax]
.text:00403D07                 movzx   eax, word ptr [ecx+edx*2]
.text:00403D0B                 and     eax, 2
.text:00403D0E                 jmp     loc_403C56
.text:00403D13 ; ---------------------------------------------------------------------------
.text:00403D13
.text:00403D13 loc_403D13:                             ; CODE XREF: sub_403BE0+47↑j
.text:00403D13                 test    bl, 20h
.text:00403D16                 jz      loc_403C74
.text:00403D1C                 xor     ebx, ebx
.text:00403D1E                 mov     esi, esi
.text:00403D20
.text:00403D20 loc_403D20:                             ; CODE XREF: sub_403BE0+16D↓j
.text:00403D20                 movzx   edx, ds:byte_4151C0[ebx]
.text:00403D27                 mov     ecx, ds:__mb_cur_max
.text:00403D2D                 cmp     dword ptr [ecx], 1
.text:00403D30                 jz      short loc_403D70
.text:00403D32                 mov     [esp+0Ch+Type], 1 ; Type
.text:00403D3A                 mov     [esp+0Ch+C], edx ; C
.text:00403D3D                 call    _isctype
.text:00403D42
.text:00403D42 loc_403D42:                             ; CODE XREF: sub_403BE0+19E↓j
.text:00403D42                 test    eax, eax
.text:00403D44                 jnz     short loc_403D54
.text:00403D46
.text:00403D46 loc_403D46:                             ; CODE XREF: sub_403BE0+189↓j
.text:00403D46                 inc     ebx
.text:00403D47                 cmp     ebx, 0FFh
.text:00403D4D                 jle     short loc_403D20
.text:00403D4F                 jmp     loc_403C67
.text:00403D54 ; ---------------------------------------------------------------------------
.text:00403D54
.text:00403D54 loc_403D54:                             ; CODE XREF: sub_403BE0+164↑j
.text:00403D54                 movzx   edx, ds:byte_4151C0[ebx]
.text:00403D5B                 mov     [esp+0Ch+C], edx ; C
.text:00403D5E                 call    tolower
.text:00403D63                 mov     ds:byte_4151C0[ebx], al
.text:00403D69                 jmp     short loc_403D46
.text:00403D69 ; ---------------------------------------------------------------------------
.text:00403D6B                 align 10h
.text:00403D70
.text:00403D70 loc_403D70:                             ; CODE XREF: sub_403BE0+150↑j
.text:00403D70                 mov     eax, ds:_pctype
.text:00403D75                 mov     ecx, [eax]
.text:00403D77                 movzx   eax, word ptr [ecx+edx*2]
.text:00403D7B                 and     eax, 1
.text:00403D7E                 jmp     short loc_403D42
.text:00403D7E sub_403BE0      endp
.text:00403D7E
.text:00403D7E ; ---------------------------------------------------------------------------
.text:00403D80 aWritingToS     db 'writing to %s',0    ; DATA XREF: sub_403DD0+340↓o
.text:00403D80                                         ; sub_403DD0+83D↓o ...
.text:00403D8E aWritingS       db 'writing %s',0       ; DATA XREF: sub_403DD0+4C3↓o
.text:00403D99 aReadingS       db 'reading %s',0       ; DATA XREF: sub_403DD0+529↓o
.text:00403D99                                         ; sub_404A70+188↓o
.text:00403DA4 aFsyncFailedFor db 'fsync failed for %s',0
.text:00403DA4                                         ; DATA XREF: sub_403DD0+728↓o
.text:00403DB8 aFdatasyncFaile db 'fdatasync failed for %s',0
.text:00403DB8                                         ; DATA XREF: sub_403DD0+76F↓o
.text:00403DD0
.text:00403DD0 ; =============== S U B R O U T I N E =======================================
.text:00403DD0
.text:00403DD0
.text:00403DD0 sub_403DD0      proc near               ; CODE XREF: sub_402550+393↑p
.text:00403DD0
.text:00403DD0 Block           = dword ptr -3Ch
.text:00403DD0 Val             = dword ptr -38h
.text:00403DD0 Size            = dword ptr -34h
.text:00403DD0 var_30          = byte ptr -30h
.text:00403DD0 var_2C          = dword ptr -2Ch
.text:00403DD0 var_28          = dword ptr -28h
.text:00403DD0 var_24          = dword ptr -24h
.text:00403DD0 var_20          = dword ptr -20h
.text:00403DD0 var_1C          = dword ptr -1Ch
.text:00403DD0 var_18          = dword ptr -18h
.text:00403DD0 var_14          = dword ptr -14h
.text:00403DD0
.text:00403DD0                 push    ebp
.text:00403DD1                 push    edi
.text:00403DD2                 push    esi
.text:00403DD3                 push    ebx
.text:00403DD4                 sub     esp, 2Ch
.text:00403DD7                 mov     [esp+3Ch+var_1C], 0
.text:00403DDF                 mov     [esp+3Ch+var_20], 0
.text:00403DE7                 call    sub_40E1B0
.text:00403DEC                 mov     ecx, ds:Size
.text:00403DF2                 mov     ebx, eax
.text:00403DF4                 lea     edx, [ecx+eax*2+3]
.text:00403DF8                 mov     [esp+3Ch+Block], edx ; size_t
.text:00403DFB                 call    sub_4069D0
.text:00403E00                 mov     [esp+3Ch+var_14], eax
.text:00403E04                 lea     ecx, [eax+ebx+1]
.text:00403E08                 xor     edx, edx
.text:00403E0A                 mov     eax, ecx
.text:00403E0C                 div     ebx
.text:00403E0E                 sub     ecx, edx
.text:00403E10                 test    byte ptr ds:dword_415070+1, 8
.text:00403E17                 mov     [esp+3Ch+var_24], ecx
.text:00403E1B                 jnz     loc_4047C1
.text:00403E21                 mov     [esp+3Ch+var_18], 0
.text:00403E29                 mov     eax, [esp+3Ch+var_24]
.text:00403E2D                 mov     ds:dword_4151B0, eax
.text:00403E32
.text:00403E32 loc_403E32:                             ; CODE XREF: sub_403DD0+A18↓j
.text:00403E32                 mov     ecx, ds:dword_415054
.text:00403E38                 mov     edx, ds:dword_415050
.text:00403E3E                 mov     ebx, ecx
.text:00403E40                 or      ebx, edx
.text:00403E42                 jnz     loc_40478C
.text:00403E48
.text:00403E48 loc_403E48:                             ; CODE XREF: sub_403DD0+9EC↓j
.text:00403E48                 mov     ecx, ds:dword_415064
.text:00403E4E                 mov     edx, ds:dword_415060
.text:00403E54                 mov     ebx, ecx
.text:00403E56                 or      ebx, edx
.text:00403E58                 jnz     loc_404755
.text:00403E5E
.text:00403E5E loc_403E5E:                             ; CODE XREF: sub_403DD0+9B7↓j
.text:00403E5E                 mov     ebx, dword_414014
.text:00403E64                 xor     eax, eax
.text:00403E66                 mov     ecx, dword_414010
.text:00403E6C                 mov     esi, ebx
.text:00403E6E                 or      esi, ecx
.text:00403E70                 jz      loc_4042C8
.text:00403E76                 lea     esi, [esi+0]
.text:00403E79                 lea     edi, [edi+0]
.text:00403E80
.text:00403E80 loc_403E80:                             ; CODE XREF: sub_403DD0+2E1↓j
.text:00403E80                 mov     eax, ds:dword_4150F0
.text:00403E85                 mov     ebp, ds:dword_4150F4
.text:00403E8B                 add     eax, ds:dword_4150E0
.text:00403E91                 adc     ebp, ds:dword_4150E4
.text:00403E97                 cmp     ebp, ebx
.text:00403E99                 jb      short loc_403EA9
.text:00403E9B                 ja      loc_404720
.text:00403EA1                 cmp     eax, ecx
.text:00403EA3                 jnb     loc_404720
.text:00403EA9
.text:00403EA9 loc_403EA9:                             ; CODE XREF: sub_403DD0+C9↑j
.text:00403EA9                 mov     edx, ds:dword_415070
.text:00403EAF                 mov     ecx, edx
.text:00403EB1                 and     ecx, 500h
.text:00403EB7                 cmp     ecx, 500h
.text:00403EBD                 jz      loc_40472A
.text:00403EC3
.text:00403EC3 loc_403EC3:                             ; CODE XREF: sub_403DD0+980↓j
.text:00403EC3                 mov     [esp+3Ch+Block], 0
.text:00403ECA                 mov     edx, ds:Size
.text:00403ED0                 mov     eax, [esp+3Ch+var_24]
.text:00403ED4                 mov     [esp+3Ch+Size], edx
.text:00403ED8                 mov     [esp+3Ch+Val], eax
.text:00403EDC                 call    sub_406C60
.text:00403EE1                 test    eax, eax
.text:00403EE3                 jz      loc_404720
.text:00403EE9                 cmp     eax, 0FFFFFFFFh
.text:00403EEC                 jz      loc_4042EB
.text:00403EF2
.text:00403EF2 loc_403EF2:                             ; CODE XREF: sub_403DD0+5AF↓j
.text:00403EF2                 mov     edx, ds:dword_415190
.text:00403EF8                 xor     ebp, ebp
.text:00403EFA                 mov     edi, eax
.text:00403EFC                 mov     esi, ds:dword_415194
.text:00403F02                 add     edx, eax
.text:00403F04                 adc     esi, ebp
.text:00403F06                 cmp     esi, ebp
.text:00403F08                 mov     ds:dword_415190, edx
.text:00403F0E                 mov     ds:dword_415194, esi
.text:00403F14                 ja      short loc_403F23
.text:00403F16                 jb      short loc_403F1C
.text:00403F18                 cmp     edx, eax
.text:00403F1A                 jnb     short loc_403F23
.text:00403F1C
.text:00403F1C loc_403F1C:                             ; CODE XREF: sub_403DD0+146↑j
.text:00403F1C                 mov     ds:byte_4151A0, 1
.text:00403F23
.text:00403F23 loc_403F23:                             ; CODE XREF: sub_403DD0+144↑j
.text:00403F23                                         ; sub_403DD0+14A↑j
.text:00403F23                 mov     edx, ds:Size
.text:00403F29                 cmp     eax, edx
.text:00403F2B                 jnb     loc_4042D0
.text:00403F31                 add     ds:dword_4150E0, 1
.text:00403F38                 mov     [esp+3Ch+var_1C], eax
.text:00403F3C                 mov     eax, ds:dword_415070
.text:00403F41                 adc     ds:dword_4150E4, 0
.text:00403F48                 test    ah, 4
.text:00403F4B                 jz      short loc_403F90
.text:00403F4D                 test    ah, 1
.text:00403F50                 jnz     short loc_403F84
.text:00403F52                 mov     ebp, [esp+3Ch+var_1C]
.text:00403F56                 mov     ebx, [esp+3Ch+var_24]
.text:00403F5A                 mov     edi, [esp+3Ch+var_1C]
.text:00403F5E                 sub     edx, ebp
.text:00403F60                 test    al, 18h
.text:00403F62                 mov     [esp+3Ch+Size], edx ; Size
.text:00403F66                 setz    dl
.text:00403F69                 add     ebx, edi
.text:00403F6B                 mov     [esp+3Ch+Block], ebx ; void *
.text:00403F6E                 movzx   ecx, dl
.text:00403F71                 dec     ecx
.text:00403F72                 and     ecx, 20h
.text:00403F75                 mov     [esp+3Ch+Val], ecx ; Val
.text:00403F79                 call    memset
.text:00403F7E                 mov     edx, ds:Size
.text:00403F84
.text:00403F84 loc_403F84:                             ; CODE XREF: sub_403DD0+180↑j
.text:00403F84                 mov     edi, edx
.text:00403F86                 lea     esi, [esi+0]
.text:00403F89                 lea     edi, [edi+0]
.text:00403F90
.text:00403F90 loc_403F90:                             ; CODE XREF: sub_403DD0+17B↑j
.text:00403F90                                         ; sub_403DD0+516↓j
.text:00403F90                 mov     eax, [esp+3Ch+var_24]
.text:00403F94                 cmp     eax, ds:dword_4151B0
.text:00403F9A                 jz      loc_404231
.text:00403FA0                 cmp     ds:byte_4150B0, 0
.text:00403FA7                 jz      short loc_403FD0
.text:00403FA9                 test    edi, edi
.text:00403FAB                 mov     ecx, edi
.text:00403FAD                 mov     edx, [esp+3Ch+var_24]
.text:00403FB1                 jz      short loc_403FD0
.text:00403FB3                 lea     esi, [esi+0]
.text:00403FB9                 lea     edi, [edi+0]
.text:00403FC0
.text:00403FC0 loc_403FC0:                             ; CODE XREF: sub_403DD0+1FE↓j
.text:00403FC0                 movzx   ebp, byte ptr [edx]
.text:00403FC3                 movzx   ebx, ss:byte_4151C0[ebp]
.text:00403FCA                 mov     [edx], bl
.text:00403FCC                 inc     edx
.text:00403FCD                 dec     ecx
.text:00403FCE                 jnz     short loc_403FC0
.text:00403FD0
.text:00403FD0 loc_403FD0:                             ; CODE XREF: sub_403DD0+1D7↑j
.text:00403FD0                                         ; sub_403DD0+1E1↑j
.text:00403FD0                 cmp     byte ptr ds:dword_415070, 0
.text:00403FD7                 jns     loc_404228
.text:00403FDD                 cmp     ds:byte_415140, 0
.text:00403FE4                 mov     ebx, [esp+3Ch+var_24]
.text:00403FE8                 jz      short loc_404001
.text:00403FEA                 movzx   edx, ds:byte_4152C0
.text:00403FF1                 dec     ebx
.text:00403FF2                 mov     ecx, [esp+3Ch+var_24]
.text:00403FF6                 inc     edi
.text:00403FF7                 mov     [ecx-1], dl
.text:00403FFA                 mov     ds:byte_415140, 0
.text:00404001
.text:00404001 loc_404001:                             ; CODE XREF: sub_403DD0+218↑j
.text:00404001                 test    edi, 1
.text:00404007                 jz      short loc_40401B
.text:00404009                 dec     edi
.text:0040400A                 movzx   ecx, byte ptr [edi+ebx]
.text:0040400E                 mov     ds:byte_415140, 1
.text:00404015                 mov     ds:byte_4152C0, cl
.text:0040401B
.text:0040401B loc_40401B:                             ; CODE XREF: sub_403DD0+237↑j
.text:0040401B                 mov     ecx, edi
.text:0040401D                 lea     edx, [edi+ebx]
.text:00404020                 shr     ecx, 1
.text:00404022                 jz      short loc_40403C
.text:00404024                 lea     esi, [esi+0]
.text:0040402A                 lea     edi, [edi+0]
.text:00404030
.text:00404030 loc_404030:                             ; CODE XREF: sub_403DD0+26A↓j
.text:00404030                 movzx   eax, byte ptr [edx-2]
.text:00404034                 mov     [edx], al
.text:00404036                 sub     edx, 2
.text:00404039                 dec     ecx
.text:0040403A                 jnz     short loc_404030
.text:0040403C
.text:0040403C loc_40403C:                             ; CODE XREF: sub_403DD0+252↑j
.text:0040403C                 lea     edx, [ebx+1]
.text:0040403F
.text:0040403F loc_40403F:                             ; CODE XREF: sub_403DD0+45C↓j
.text:0040403F                 mov     eax, ds:dword_415070
.text:00404044                 test    al, 8
.text:00404046                 jnz     loc_404217
.text:0040404C                 test    al, 10h
.text:0040404E                 jnz     loc_404206
.text:00404054                 mov     esi, edi
.text:00404056                 mov     edi, edx
.text:00404058                 mov     edx, ds:dword_415030
.text:0040405E                 mov     esi, esi
.text:00404060
.text:00404060 loc_404060:                             ; CODE XREF: sub_403DD0+2D3↓j
.text:00404060                 mov     eax, ds:dword_415120
.text:00404065                 mov     ebx, edx
.text:00404067                 sub     ebx, eax
.text:00404069                 cmp     ebx, esi
.text:0040406B                 jbe     short loc_40406F
.text:0040406D                 mov     ebx, esi
.text:0040406F
.text:0040406F loc_40406F:                             ; CODE XREF: sub_403DD0+29B↑j
.text:0040406F                 mov     [esp+3Ch+Val], edi ; Src
.text:00404073                 mov     ebp, ds:dword_4151B0
.text:00404079                 sub     esi, ebx
.text:0040407B                 mov     [esp+3Ch+Size], ebx ; Size
.text:0040407F                 add     edi, ebx
.text:00404081                 add     eax, ebp
.text:00404083                 mov     [esp+3Ch+Block], eax ; void *
.text:00404086                 call    memcpy
.text:0040408B                 mov     eax, ds:dword_415120
.text:00404090                 mov     edx, ds:dword_415030
.text:00404096                 add     eax, ebx
.text:00404098                 mov     ds:dword_415120, eax
.text:0040409D                 cmp     eax, edx
.text:0040409F                 jnb     short loc_4040B6
.text:004040A1
.text:004040A1 loc_4040A1:                             ; CODE XREF: sub_403DD0+330↓j
.text:004040A1                 test    esi, esi
.text:004040A3                 jnz     short loc_404060
.text:004040A5
.text:004040A5 loc_4040A5:                             ; CODE XREF: sub_403DD0+442↓j
.text:004040A5                                         ; sub_403DD0+453↓j ...
.text:004040A5                 mov     ecx, dword_414010
.text:004040AB                 mov     ebx, dword_414014
.text:004040B1                 jmp     loc_403E80
.text:004040B6 ; ---------------------------------------------------------------------------
.text:004040B6
.text:004040B6 loc_4040B6:                             ; CODE XREF: sub_403DD0+2CF↑j
.text:004040B6                 mov     [esp+3Ch+Size], edx
.text:004040BA                 mov     ecx, ds:dword_4151B0
.text:004040C0                 xor     ebx, ebx
.text:004040C2                 mov     [esp+3Ch+Block], 1
.text:004040C9                 mov     [esp+3Ch+Val], ecx
.text:004040CD                 call    sub_407A30
.text:004040D2                 add     ds:dword_415100, eax
.text:004040D8                 mov     ebp, eax
.text:004040DA                 mov     edx, ds:dword_415030
.text:004040E0                 adc     ds:dword_415104, ebx
.text:004040E6                 cmp     eax, edx
.text:004040E8                 jnz     short loc_404102
.text:004040EA                 add     ds:dword_4150D0, 1
.text:004040F1                 adc     ds:dword_4150D4, 0
.text:004040F8                 xor     ebp, ebp
.text:004040FA                 mov     ds:dword_415120, ebp
.text:00404100                 jmp     short loc_4040A1
.text:00404102 ; ---------------------------------------------------------------------------
.text:00404102
.text:00404102 loc_404102:                             ; CODE XREF: sub_403DD0+318↑j
.text:00404102                 mov     esi, ds:FileName
.text:00404108                 mov     [esp+3Ch+Block], esi ; char *
.text:0040410B                 call    sub_406D00
.text:00404110                 mov     [esp+3Ch+Block], offset aWritingToS ; "writing to %s"
.text:00404117                 mov     ebx, eax
.text:00404119                 call    ds:libintl_gettext
.text:0040411F                 mov     edi, eax
.text:00404121                 call    _errno
.text:00404126                 mov     dword ptr [esp+3Ch+var_30], ebx ; char
.text:0040412A                 mov     [esp+3Ch+Size], edi ; char *
.text:0040412E                 mov     edi, [eax]
.text:00404130                 mov     [esp+3Ch+Block], 0 ; Code
.text:00404137                 mov     [esp+3Ch+Val], edi ; ErrorMessage
.text:0040413B                 call    sub_40AAC0
.text:00404140                 test    ebp, ebp
.text:00404142
.text:00404142 loc_404142:                             ; CODE XREF: sub_403DD0+86F↓j
.text:00404142                 jz      short loc_404152
.text:00404144                 add     ds:dword_4150C0, 1
.text:0040414B                 adc     ds:dword_4150C4, 0
.text:00404152
.text:00404152 loc_404152:                             ; CODE XREF: sub_403DD0:loc_404142↑j
.text:00404152                 mov     [esp+3Ch+Block], 0 ; FileHandle
.text:00404159                 call    _close
.text:0040415E                 test    eax, eax
.text:00404160                 js      short loc_4041C3
.text:00404162
.text:00404162 loc_404162:                             ; CODE XREF: sub_403DD0+431↓j
.text:00404162                 mov     [esp+3Ch+Block], 1 ; FileHandle
.text:00404169                 call    _close
.text:0040416E                 test    eax, eax
.text:00404170                 js      short loc_404183
.text:00404172
.text:00404172 loc_404172:                             ; CODE XREF: sub_403DD0+3F1↓j
.text:00404172                 call    sub_402DF0
.text:00404177                 mov     [esp+3Ch+Block], 1 ; Code
.text:0040417E                 call    exit
.text:00404183 ; ---------------------------------------------------------------------------
.text:00404183
.text:00404183 loc_404183:                             ; CODE XREF: sub_403DD0+3A0↑j
.text:00404183                 mov     ecx, ds:FileName
.text:00404189                 mov     [esp+3Ch+Block], ecx ; char *
.text:0040418C                 call    sub_406D00
.text:00404191                 mov     [esp+3Ch+Block], (offset stru_40247A._file+2)
.text:00404198                 mov     ebp, eax
.text:0040419A                 call    ds:libintl_gettext
.text:004041A0                 mov     edi, eax
.text:004041A2                 call    _errno
.text:004041A7                 mov     dword ptr [esp+3Ch+var_30], ebp ; char
.text:004041AB                 mov     [esp+3Ch+Size], edi ; char *
.text:004041AF                 mov     esi, [eax]
.text:004041B1                 mov     [esp+3Ch+Block], 1 ; Code
.text:004041B8                 mov     [esp+3Ch+Val], esi ; ErrorMessage
.text:004041BC                 call    sub_40AAC0
.text:004041C1                 jmp     short loc_404172
.text:004041C3 ; ---------------------------------------------------------------------------
.text:004041C3
.text:004041C3 loc_4041C3:                             ; CODE XREF: sub_403DD0+390↑j
.text:004041C3                 mov     edx, ds:dword_415000
.text:004041C9                 mov     [esp+3Ch+Block], edx ; char *
.text:004041CC                 call    sub_406D00
.text:004041D1                 mov     [esp+3Ch+Block], offset aClosingInputFi ; "closing input file %s"
.text:004041D8                 mov     ebx, eax
.text:004041DA                 call    ds:libintl_gettext
.text:004041E0                 mov     ebp, eax
.text:004041E2                 call    _errno
.text:004041E7                 mov     dword ptr [esp+3Ch+var_30], ebx ; char
.text:004041EB                 mov     [esp+3Ch+Size], ebp ; char *
.text:004041EF                 mov     edi, [eax]
.text:004041F1                 mov     [esp+3Ch+Block], 1 ; Code
.text:004041F8                 mov     [esp+3Ch+Val], edi ; ErrorMessage
.text:004041FC                 call    sub_40AAC0
.text:00404201                 jmp     loc_404162
.text:00404206 ; ---------------------------------------------------------------------------
.text:00404206
.text:00404206 loc_404206:                             ; CODE XREF: sub_403DD0+27E↑j
.text:00404206                 mov     [esp+3Ch+Val], edi
.text:0040420A                 mov     [esp+3Ch+Block], edx
.text:0040420D                 call    sub_405290
.text:00404212                 jmp     loc_4040A5
.text:00404217 ; ---------------------------------------------------------------------------
.text:00404217
.text:00404217 loc_404217:                             ; CODE XREF: sub_403DD0+276↑j
.text:00404217                 mov     [esp+3Ch+Val], edi
.text:0040421B                 mov     [esp+3Ch+Block], edx
.text:0040421E                 call    sub_405000
.text:00404223                 jmp     loc_4040A5
.text:00404228 ; ---------------------------------------------------------------------------
.text:00404228
.text:00404228 loc_404228:                             ; CODE XREF: sub_403DD0+207↑j
.text:00404228                 mov     edx, [esp+3Ch+var_24]
.text:0040422C                 jmp     loc_40403F
.text:00404231 ; ---------------------------------------------------------------------------
.text:00404231
.text:00404231 loc_404231:                             ; CODE XREF: sub_403DD0+1CA↑j
.text:00404231                 mov     [esp+3Ch+Size], edi
.text:00404235                 xor     esi, esi
.text:00404237                 mov     [esp+3Ch+Val], eax
.text:0040423B                 mov     [esp+3Ch+Block], 1
.text:00404242                 call    sub_407A30
.text:00404247                 add     ds:dword_415100, eax
.text:0040424D                 adc     ds:dword_415104, esi
.text:00404253                 cmp     eax, edi
.text:00404255                 jnz     short loc_404285
.text:00404257                 cmp     edi, ds:Size
.text:0040425D                 jz      short loc_404272
.text:0040425F                 add     ds:dword_4150C0, 1
.text:00404266                 adc     ds:dword_4150C4, 0
.text:0040426D                 jmp     loc_4040A5
.text:00404272 ; ---------------------------------------------------------------------------
.text:00404272
.text:00404272 loc_404272:                             ; CODE XREF: sub_403DD0+48D↑j
.text:00404272                 add     ds:dword_4150D0, 1
.text:00404279                 adc     ds:dword_4150D4, 0
.text:00404280                 jmp     loc_4040A5
.text:00404285 ; ---------------------------------------------------------------------------
.text:00404285
.text:00404285 loc_404285:                             ; CODE XREF: sub_403DD0+485↑j
.text:00404285                                         ; sub_403DD0+6BF↓j
.text:00404285                 mov     ebp, ds:FileName
.text:0040428B                 mov     [esp+3Ch+Block], ebp ; char *
.text:0040428E                 call    sub_406D00
.text:00404293                 mov     [esp+3Ch+Block], offset aWritingS ; "writing %s"
.text:0040429A
.text:0040429A loc_40429A:                             ; CODE XREF: sub_403DD0+72F↓j
.text:0040429A                 mov     esi, eax
.text:0040429C                 call    ds:libintl_gettext
.text:004042A2                 mov     edi, eax
.text:004042A4                 call    _errno
.text:004042A9                 mov     dword ptr [esp+3Ch+var_30], esi ; char
.text:004042AD                 mov     [esp+3Ch+Size], edi ; char *
.text:004042B1                 mov     ebx, [eax]
.text:004042B3                 mov     [esp+3Ch+Block], 0 ; Code
.text:004042BA                 mov     [esp+3Ch+Val], ebx ; ErrorMessage
.text:004042BE                 call    sub_40AAC0
.text:004042C3                 mov     eax, 1
.text:004042C8
.text:004042C8 loc_4042C8:                             ; CODE XREF: sub_403DD0+A0↑j
.text:004042C8                                         ; sub_403DD0+738↓j
.text:004042C8                 add     esp, 2Ch
.text:004042CB                 pop     ebx
.text:004042CC                 pop     esi
.text:004042CD                 pop     edi
.text:004042CE                 pop     ebp
.text:004042CF                 retn
.text:004042D0 ; ---------------------------------------------------------------------------
.text:004042D0
.text:004042D0 loc_4042D0:                             ; CODE XREF: sub_403DD0+15B↑j
.text:004042D0                 add     ds:dword_4150F0, 1
.text:004042D7                 mov     [esp+3Ch+var_1C], 0
.text:004042DF                 adc     ds:dword_4150F4, 0
.text:004042E6                 jmp     loc_403F90
.text:004042EB ; ---------------------------------------------------------------------------
.text:004042EB
.text:004042EB loc_4042EB:                             ; CODE XREF: sub_403DD0+11C↑j
.text:004042EB                 mov     ecx, ds:dword_415000
.text:004042F1                 mov     [esp+3Ch+Block], ecx ; char *
.text:004042F4                 call    sub_406D00
.text:004042F9                 mov     [esp+3Ch+Block], offset aReadingS ; "reading %s"
.text:00404300                 mov     ebx, eax
.text:00404302                 call    ds:libintl_gettext
.text:00404308                 mov     ebp, eax
.text:0040430A                 call    _errno
.text:0040430F                 mov     dword ptr [esp+3Ch+var_30], ebx ; char
.text:00404313                 mov     [esp+3Ch+Size], ebp ; char *
.text:00404317                 mov     esi, [eax]
.text:00404319                 mov     [esp+3Ch+Block], 0 ; Code
.text:00404320                 mov     [esp+3Ch+Val], esi ; ErrorMessage
.text:00404324                 call    sub_40AAC0
.text:00404329                 mov     eax, ds:dword_415070
.text:0040432E                 test    ah, 1
.text:00404331                 jz      short loc_40438A
.text:00404333                 call    sub_402DF0
.text:00404338                 mov     edi, ds:Size
.text:0040433E                 mov     eax, [esp+3Ch+var_1C]
.text:00404342                 sub     edi, eax
.text:00404344                 mov     [esp+3Ch+Block], edi
.text:00404347                 call    sub_404DF0
.text:0040434C                 test    al, al
.text:0040434E                 jnz     short loc_40436A
.text:00404350                 mov     [esp+3Ch+var_20], 1
.text:00404358                 mov     edx, 1Dh
.text:0040435D                 mov     ds:byte_415170, 0
.text:00404364                 mov     ds:dword_415180, edx
.text:0040436A
.text:0040436A loc_40436A:                             ; CODE XREF: sub_403DD0+57E↑j
.text:0040436A                 test    byte ptr ds:dword_415070+1, 4
.text:00404371                 jz      loc_4040A5
.text:00404377                 mov     ebp, [esp+3Ch+var_1C]
.text:0040437B                 xor     eax, eax
.text:0040437D                 test    ebp, ebp
.text:0040437F                 jz      loc_403EF2
.text:00404385                 jmp     loc_4040A5
.text:0040438A ; ---------------------------------------------------------------------------
.text:0040438A
.text:0040438A loc_40438A:                             ; CODE XREF: sub_403DD0+561↑j
.text:0040438A                 mov     [esp+3Ch+var_20], 1
.text:00404392
.text:00404392 loc_404392:                             ; CODE XREF: sub_403DD0+955↓j
.text:00404392                 cmp     ds:byte_415140, 0
.text:00404399                 jz      loc_4046FF
.text:0040439F                 test    al, 8
.text:004043A1                 jnz     loc_40470A
.text:004043A7                 test    al, 10h
.text:004043A9                 jnz     loc_4046E6
.text:004043AF                 movzx   edx, ds:byte_4152C0
.text:004043B6                 mov     eax, ds:dword_4151B0
.text:004043BB                 mov     edi, ds:dword_415120
.text:004043C1                 mov     [edi+eax], dl
.text:004043C4                 mov     ecx, ds:dword_415120
.text:004043CA                 mov     eax, ds:dword_415030
.text:004043CF                 inc     ecx
.text:004043D0                 cmp     ecx, eax
.text:004043D2                 mov     ds:dword_415120, ecx
.text:004043D8                 jnb     loc_404693
.text:004043DE
.text:004043DE loc_4043DE:                             ; CODE XREF: sub_403DD0+911↓j
.text:004043DE                 mov     eax, ds:dword_415070
.text:004043E3
.text:004043E3 loc_4043E3:                             ; CODE XREF: sub_403DD0+935↓j
.text:004043E3                 test    al, 8
.text:004043E5                 jz      short loc_404433
.text:004043E7                 mov     edx, ds:dword_415130
.text:004043ED                 test    edx, edx
.text:004043EF                 jz      short loc_404433
.text:004043F1                 cmp     edx, ds:dword_415040
.text:004043F7                 mov     ebx, edx
.text:004043F9                 jnb     short loc_404433
.text:004043FB
.text:004043FB loc_4043FB:                             ; CODE XREF: sub_403DD0+65C↓j
.text:004043FB                 movzx   eax, byte_414019
.text:00404402                 mov     edi, ds:dword_4151B0
.text:00404408                 mov     [ecx+edi], al
.text:0040440B                 mov     ecx, ds:dword_415120
.text:00404411                 mov     eax, ds:dword_415030
.text:00404416                 inc     ecx
.text:00404417                 cmp     ecx, eax
.text:00404419                 mov     ds:dword_415120, ecx
.text:0040441F                 jnb     loc_404644
.text:00404425
.text:00404425 loc_404425:                             ; CODE XREF: sub_403DD0+8BE↓j
.text:00404425                 inc     ebx
.text:00404426                 cmp     ebx, ds:dword_415040
.text:0040442C                 jb      short loc_4043FB
.text:0040442E                 mov     eax, ds:dword_415070
.text:00404433
.text:00404433 loc_404433:                             ; CODE XREF: sub_403DD0+615↑j
.text:00404433                                         ; sub_403DD0+61F↑j ...
.text:00404433                 test    al, 10h
.text:00404435                 jz      short loc_404449
.text:00404437                 mov     ebx, ds:dword_415040
.text:0040443D                 cmp     ds:dword_415130, ebx
.text:00404443                 jz      loc_404586
.text:00404449
.text:00404449 loc_404449:                             ; CODE XREF: sub_403DD0+665↑j
.text:00404449                                         ; sub_403DD0+7DA↓j ...
.text:00404449                 test    ecx, ecx
.text:0040444B                 jz      short loc_404495
.text:0040444D                 mov     [esp+3Ch+Size], ecx
.text:00404451                 mov     edi, ds:dword_4151B0
.text:00404457                 xor     esi, esi
.text:00404459                 mov     [esp+3Ch+Block], 1
.text:00404460                 mov     [esp+3Ch+Val], edi
.text:00404464                 call    sub_407A30
.text:00404469                 add     ds:dword_415100, eax
.text:0040446F                 mov     ecx, eax
.text:00404471                 adc     ds:dword_415104, esi
.text:00404477                 test    eax, eax
.text:00404479                 jz      short loc_404489
.text:0040447B                 add     ds:dword_4150C0, 1
.text:00404482                 adc     ds:dword_4150C4, 0
.text:00404489
.text:00404489 loc_404489:                             ; CODE XREF: sub_403DD0+6A9↑j
.text:00404489                 cmp     ecx, ds:dword_415120
.text:0040448F                 jnz     loc_404285
.text:00404495
.text:00404495 loc_404495:                             ; CODE XREF: sub_403DD0+67B↑j
.text:00404495                 mov     edx, [esp+3Ch+var_14]
.text:00404499                 mov     [esp+3Ch+Block], edx ; Block
.text:0040449C                 call    free
.text:004044A1                 mov     esi, [esp+3Ch+var_18]
.text:004044A5                 test    esi, esi
.text:004044A7                 jz      short loc_4044B5
.text:004044A9                 mov     eax, [esp+3Ch+var_18]
.text:004044AD                 mov     [esp+3Ch+Block], eax ; Block
.text:004044B0                 call    free
.text:004044B5
.text:004044B5 loc_4044B5:                             ; CODE XREF: sub_403DD0+6D7↑j
.text:004044B5                 test    byte ptr ds:dword_415070+1, 40h
.text:004044BC                 jnz     short loc_40450D
.text:004044BE
.text:004044BE loc_4044BE:                             ; CODE XREF: sub_403DD0+74B↓j
.text:004044BE                                         ; sub_403DD0+7B1↓j
.text:004044BE                 movzx   esi, word ptr ds:dword_415070
.text:004044C5                 and     esi, 0FFFF8000h
.text:004044CB                 test    si, si
.text:004044CE                 jz      short loc_404504
.text:004044D0
.text:004044D0 loc_4044D0:                             ; CODE XREF: sub_403DD0+718↓j
.text:004044D0                 mov     [esp+3Ch+Block], 1 ; FileHandle
.text:004044D7                 call    _commit
.text:004044DC                 test    eax, eax
.text:004044DE                 jz      short loc_404504
.text:004044E0                 call    _errno
.text:004044E5                 cmp     dword ptr [eax], 4
.text:004044E8                 jz      short loc_4044D0
.text:004044EA                 mov     ecx, ds:FileName
.text:004044F0                 mov     [esp+3Ch+Block], ecx ; char *
.text:004044F3                 call    sub_406D00
.text:004044F8                 mov     [esp+3Ch+Block], offset aFsyncFailedFor ; "fsync failed for %s"
.text:004044FF                 jmp     loc_40429A
.text:00404504 ; ---------------------------------------------------------------------------
.text:00404504
.text:00404504 loc_404504:                             ; CODE XREF: sub_403DD0+6FE↑j
.text:00404504                                         ; sub_403DD0+70E↑j
.text:00404504                 mov     eax, [esp+3Ch+var_20]
.text:00404508                 jmp     loc_4042C8
.text:0040450D ; ---------------------------------------------------------------------------
.text:0040450D
.text:0040450D loc_40450D:                             ; CODE XREF: sub_403DD0+6EC↑j
.text:0040450D                 mov     [esp+3Ch+Block], 1 ; FileHandle
.text:00404514                 call    j__commit
.text:00404519                 test    eax, eax
.text:0040451B                 jz      short loc_4044BE
.text:0040451D                 call    _errno
.text:00404522                 cmp     dword ptr [eax], 28h ; '('
.text:00404525                 jz      short loc_404577
.text:00404527                 call    _errno
.text:0040452C                 cmp     dword ptr [eax], 16h
.text:0040452F                 jz      short loc_404577
.text:00404531                 mov     ecx, ds:FileName
.text:00404537                 mov     [esp+3Ch+Block], ecx ; char *
.text:0040453A                 call    sub_406D00
.text:0040453F                 mov     [esp+3Ch+Block], offset aFdatasyncFaile ; "fdatasync failed for %s"
.text:00404546                 mov     ebx, eax
.text:00404548                 call    ds:libintl_gettext
.text:0040454E                 mov     edi, eax
.text:00404550                 call    _errno
.text:00404555                 mov     dword ptr [esp+3Ch+var_30], ebx ; char
.text:00404559                 mov     [esp+3Ch+Size], edi ; char *
.text:0040455D                 mov     ebp, [eax]
.text:0040455F                 mov     [esp+3Ch+Block], 0 ; Code
.text:00404566                 mov     [esp+3Ch+Val], ebp ; ErrorMessage
.text:0040456A                 call    sub_40AAC0
.text:0040456F                 mov     [esp+3Ch+var_20], 1
.text:00404577
.text:00404577 loc_404577:                             ; CODE XREF: sub_403DD0+755↑j
.text:00404577                                         ; sub_403DD0+75F↑j
.text:00404577                 or      ds:dword_415070, 8000h
.text:00404581                 jmp     loc_4044BE
.text:00404586 ; ---------------------------------------------------------------------------
.text:00404586
.text:00404586 loc_404586:                             ; CODE XREF: sub_403DD0+673↑j
.text:00404586                 movzx   eax, byte_414018
.text:0040458D                 mov     edi, ds:dword_4151B0
.text:00404593                 mov     [ecx+edi], al
.text:00404596                 mov     ecx, ds:dword_415120
.text:0040459C                 mov     eax, ds:dword_415030
.text:004045A1                 inc     ecx
.text:004045A2                 cmp     ecx, eax
.text:004045A4                 mov     ds:dword_415120, ecx
.text:004045AA                 jb      loc_404449
.text:004045B0                 mov     [esp+3Ch+Size], eax
.text:004045B4                 mov     esi, ds:dword_4151B0
.text:004045BA                 mov     [esp+3Ch+Block], 1
.text:004045C1                 mov     [esp+3Ch+Val], esi
.text:004045C5                 call    sub_407A30
.text:004045CA                 xor     ecx, ecx
.text:004045CC                 mov     edi, eax
.text:004045CE                 add     ds:dword_415100, eax
.text:004045D4                 adc     ds:dword_415104, ecx
.text:004045DA                 cmp     eax, ds:dword_415030
.text:004045E0                 jnz     short loc_4045FF
.text:004045E2                 add     ds:dword_4150D0, 1
.text:004045E9                 adc     ds:dword_4150D4, 0
.text:004045F0                 xor     ebx, ebx
.text:004045F2                 xor     ecx, ecx
.text:004045F4                 mov     ds:dword_415120, ebx
.text:004045FA                 jmp     loc_404449
.text:004045FF ; ---------------------------------------------------------------------------
.text:004045FF
.text:004045FF loc_4045FF:                             ; CODE XREF: sub_403DD0+810↑j
.text:004045FF                                         ; sub_403DD0+8A4↓j ...
.text:004045FF                 mov     ecx, ds:FileName
.text:00404605                 mov     [esp+3Ch+Block], ecx ; char *
.text:00404608                 call    sub_406D00
.text:0040460D                 mov     [esp+3Ch+Block], offset aWritingToS ; "writing to %s"
.text:00404614                 mov     ebx, eax
.text:00404616                 call    ds:libintl_gettext
.text:0040461C                 mov     ebp, eax
.text:0040461E                 call    _errno
.text:00404623                 mov     dword ptr [esp+3Ch+var_30], ebx ; char
.text:00404627                 mov     [esp+3Ch+Size], ebp ; char *
.text:0040462B                 mov     ebp, [eax]
.text:0040462D                 mov     [esp+3Ch+Block], 0 ; Code
.text:00404634                 mov     [esp+3Ch+Val], ebp ; ErrorMessage
.text:00404638                 call    sub_40AAC0
.text:0040463D                 test    edi, edi
.text:0040463F                 jmp     loc_404142
.text:00404644 ; ---------------------------------------------------------------------------
.text:00404644
.text:00404644 loc_404644:                             ; CODE XREF: sub_403DD0+64F↑j
.text:00404644                 mov     [esp+3Ch+Size], eax
.text:00404648                 mov     esi, ds:dword_4151B0
.text:0040464E                 mov     [esp+3Ch+Block], 1
.text:00404655                 mov     [esp+3Ch+Val], esi
.text:00404659                 call    sub_407A30
.text:0040465E                 xor     ecx, ecx
.text:00404660                 mov     edi, eax
.text:00404662                 add     ds:dword_415100, eax
.text:00404668                 adc     ds:dword_415104, ecx
.text:0040466E                 cmp     eax, ds:dword_415030
.text:00404674                 jnz     short loc_4045FF
.text:00404676                 add     ds:dword_4150D0, 1
.text:0040467D                 adc     ds:dword_4150D4, 0
.text:00404684                 xor     ebp, ebp
.text:00404686                 xor     ecx, ecx
.text:00404688                 mov     ds:dword_415120, ebp
.text:0040468E                 jmp     loc_404425
.text:00404693 ; ---------------------------------------------------------------------------
.text:00404693
.text:00404693 loc_404693:                             ; CODE XREF: sub_403DD0+608↑j
.text:00404693                 mov     [esp+3Ch+Size], eax
.text:00404697                 mov     esi, ds:dword_4151B0
.text:0040469D                 mov     [esp+3Ch+Block], 1
.text:004046A4                 mov     [esp+3Ch+Val], esi
.text:004046A8                 call    sub_407A30
.text:004046AD                 xor     ecx, ecx
.text:004046AF                 mov     edi, eax
.text:004046B1                 add     ds:dword_415100, eax
.text:004046B7                 adc     ds:dword_415104, ecx
.text:004046BD                 cmp     eax, ds:dword_415030
.text:004046C3                 jnz     loc_4045FF
.text:004046C9                 add     ds:dword_4150D0, 1
.text:004046D0                 adc     ds:dword_4150D4, 0
.text:004046D7                 xor     ebp, ebp
.text:004046D9                 xor     ecx, ecx
.text:004046DB                 mov     ds:dword_415120, ebp
.text:004046E1                 jmp     loc_4043DE
.text:004046E6 ; ---------------------------------------------------------------------------
.text:004046E6
.text:004046E6 loc_4046E6:                             ; CODE XREF: sub_403DD0+5D9↑j
.text:004046E6                 mov     [esp+3Ch+Val], 1
.text:004046EE                 mov     [esp+3Ch+Block], offset byte_4152C0
.text:004046F5                 call    sub_405290
.text:004046FA
.text:004046FA loc_4046FA:                             ; CODE XREF: sub_403DD0+94E↓j
.text:004046FA                 mov     eax, ds:dword_415070
.text:004046FF
.text:004046FF loc_4046FF:                             ; CODE XREF: sub_403DD0+5C9↑j
.text:004046FF                 mov     ecx, ds:dword_415120
.text:00404705                 jmp     loc_4043E3
.text:0040470A ; ---------------------------------------------------------------------------
.text:0040470A
.text:0040470A loc_40470A:                             ; CODE XREF: sub_403DD0+5D1↑j
.text:0040470A                 mov     [esp+3Ch+Val], 1
.text:00404712                 mov     [esp+3Ch+Block], offset byte_4152C0
.text:00404719                 call    sub_405000
.text:0040471E                 jmp     short loc_4046FA
.text:00404720 ; ---------------------------------------------------------------------------
.text:00404720
.text:00404720 loc_404720:                             ; CODE XREF: sub_403DD0+CB↑j
.text:00404720                                         ; sub_403DD0+D3↑j ...
.text:00404720                 mov     eax, ds:dword_415070
.text:00404725                 jmp     loc_404392
.text:0040472A ; ---------------------------------------------------------------------------
.text:0040472A
.text:0040472A loc_40472A:                             ; CODE XREF: sub_403DD0+ED↑j
.text:0040472A                 xor     ecx, ecx
.text:0040472C                 mov     edi, ds:Size
.text:00404732                 test    dl, 18h
.text:00404735                 setz    cl
.text:00404738                 mov     ebx, [esp+3Ch+var_24]
.text:0040473C                 mov     [esp+3Ch+Size], edi ; Size
.text:00404740                 dec     ecx
.text:00404741                 and     ecx, 20h
.text:00404744                 mov     [esp+3Ch+Val], ecx ; Val
.text:00404748                 mov     [esp+3Ch+Block], ebx ; void *
.text:0040474B                 call    memset
.text:00404750                 jmp     loc_403EC3
.text:00404755 ; ---------------------------------------------------------------------------
.text:00404755
.text:00404755 loc_404755:                             ; CODE XREF: sub_403DD0+88↑j
.text:00404755                 mov     [esp+3Ch+Size], edx ; int
.text:00404759                 mov     edi, ds:dword_4151B0
.text:0040475F                 mov     ebp, ds:dword_415030
.text:00404765                 mov     dword ptr [esp+3Ch+var_30], ecx ; int
.text:00404769                 mov     edx, ds:FileName
.text:0040476F                 mov     [esp+3Ch+var_28], edi ; int
.text:00404773                 mov     [esp+3Ch+var_2C], ebp ; int
.text:00404777                 mov     [esp+3Ch+Val], edx ; char *
.text:0040477B                 mov     [esp+3Ch+Block], 1 ; int
.text:00404782                 call    sub_404A70
.text:00404787                 jmp     loc_403E5E
.text:0040478C ; ---------------------------------------------------------------------------
.text:0040478C
.text:0040478C loc_40478C:                             ; CODE XREF: sub_403DD0+72↑j
.text:0040478C                 mov     [esp+3Ch+Size], edx ; int
.text:00404790                 mov     esi, [esp+3Ch+var_24]
.text:00404794                 mov     edi, ds:Size
.text:0040479A                 mov     dword ptr [esp+3Ch+var_30], ecx ; int
.text:0040479E                 mov     ebp, ds:dword_415000
.text:004047A4                 mov     [esp+3Ch+var_28], esi ; int
.text:004047A8                 mov     [esp+3Ch+var_2C], edi ; int
.text:004047AC                 mov     [esp+3Ch+Val], ebp ; char *
.text:004047B0                 mov     [esp+3Ch+Block], 0 ; int
.text:004047B7                 call    sub_404A70
.text:004047BC                 jmp     loc_403E48
.text:004047C1 ; ---------------------------------------------------------------------------
.text:004047C1
.text:004047C1 loc_4047C1:                             ; CODE XREF: sub_403DD0+4B↑j
.text:004047C1                 mov     esi, ds:dword_415030
.text:004047C7                 add     esi, ebx
.text:004047C9                 dec     esi
.text:004047CA                 mov     [esp+3Ch+Block], esi ; size_t
.text:004047CD                 call    sub_4069D0
.text:004047D2                 mov     [esp+3Ch+var_18], eax
.text:004047D6                 lea     edi, [ebx+eax-1]
.text:004047DA                 xor     edx, edx
.text:004047DC                 mov     eax, edi
.text:004047DE                 div     ebx
.text:004047E0                 sub     edi, edx
.text:004047E2                 mov     ds:dword_4151B0, edi
.text:004047E8                 jmp     loc_403E32
.text:004047E8 sub_403DD0      endp
.text:004047E8
.text:004047E8 ; ---------------------------------------------------------------------------
.text:004047ED                 align 10h
.text:004047F0
.text:004047F0 ; =============== S U B R O U T I N E =======================================
.text:004047F0
.text:004047F0
.text:004047F0 ; void __cdecl sub_4047F0()
.text:004047F0 sub_4047F0      proc near               ; DATA XREF: sub_402550+5F↑o
.text:004047F0                 sub     esp, 0Ch
.text:004047F3                 mov     eax, off_41401C
.text:004047F8                 test    eax, eax
.text:004047FA                 jnz     short loc_404800
.text:004047FC
.text:004047FC loc_4047FC:                             ; CODE XREF: sub_4047F0+12↓j
.text:004047FC                 add     esp, 0Ch
.text:004047FF                 retn
.text:00404800 ; ---------------------------------------------------------------------------
.text:00404800
.text:00404800 loc_404800:                             ; CODE XREF: sub_4047F0+A↑j
.text:00404800                 call    eax ; sub_4068B0
.text:00404802                 jmp     short loc_4047FC
.text:00404802 sub_4047F0      endp
.text:00404802
.text:00404802 ; ---------------------------------------------------------------------------
.text:00404804                 align 10h
.text:00404810
.text:00404810 ; =============== S U B R O U T I N E =======================================
.text:00404810
.text:00404810
.text:00404810 ; int __cdecl sub_404810(char *Str2, char *Str1, int)
.text:00404810 sub_404810      proc near               ; CODE XREF: sub_403500+263↑p
.text:00404810                                         ; sub_403500+63A↑p ...
.text:00404810
.text:00404810 Str             = dword ptr -2Ch
.text:00404810 Val             = dword ptr -28h
.text:00404810 var_24          = dword ptr -24h
.text:00404810 var_20          = byte ptr -20h
.text:00404810 var_14          = dword ptr -14h
.text:00404810 Str2            = dword ptr  4
.text:00404810 Str1            = dword ptr  8
.text:00404810 arg_8           = dword ptr  0Ch
.text:00404810
.text:00404810                 push    ebp
.text:00404811                 push    edi
.text:00404812                 push    esi
.text:00404813                 push    ebx
.text:00404814                 sub     esp, 1Ch
.text:00404817                 mov     edi, [esp+2Ch+Str2]
.text:0040481B                 mov     [esp+2Ch+var_14], 0
.text:00404823
.text:00404823 loc_404823:                             ; CODE XREF: sub_404810+69↓j
.text:00404823                 mov     [esp+2Ch+Val], 2Ch ; ',' ; Val
.text:0040482B                 mov     [esp+2Ch+Str], edi ; Str
.text:0040482E                 call    strchr
.text:00404833                 test    eax, eax
.text:00404835                 mov     ebp, eax
.text:00404837                 jz      short loc_40483D
.text:00404839                 mov     byte ptr [eax], 0
.text:0040483C                 inc     ebp
.text:0040483D
.text:0040483D loc_40483D:                             ; CODE XREF: sub_404810+27↑j
.text:0040483D                 mov     esi, [esp+2Ch+Str1]
.text:00404841                 jmp     short loc_404850
.text:00404841 ; ---------------------------------------------------------------------------
.text:00404843                 align 10h
.text:00404850
.text:00404850 loc_404850:                             ; CODE XREF: sub_404810+31↑j
.text:00404850                                         ; sub_404810+58↓j
.text:00404850                 cmp     byte ptr [esi], 0
.text:00404853                 jz      short loc_4048C0
.text:00404855                 mov     [esp+2Ch+Val], edi ; Str2
.text:00404859                 mov     [esp+2Ch+Str], esi ; Str1
.text:0040485C                 call    strcmp
.text:00404861                 test    eax, eax
.text:00404863                 jz      short loc_40486A
.text:00404865                 add     esi, 10h
.text:00404868                 jmp     short loc_404850
.text:0040486A ; ---------------------------------------------------------------------------
.text:0040486A
.text:0040486A loc_40486A:                             ; CODE XREF: sub_404810+53↑j
.text:0040486A                 mov     eax, [esi+0Ch]
.text:0040486D                 test    eax, eax
.text:0040486F                 jz      short loc_404887
.text:00404871
.text:00404871 loc_404871:                             ; CODE XREF: sub_404810+AD↓j
.text:00404871                 or      [esp+2Ch+var_14], eax
.text:00404875                 mov     edi, ebp
.text:00404877                 test    ebp, ebp
.text:00404879                 jnz     short loc_404823
.text:0040487B                 mov     eax, [esp+2Ch+var_14]
.text:0040487F                 add     esp, 1Ch
.text:00404882                 pop     ebx
.text:00404883                 pop     esi
.text:00404884                 pop     edi
.text:00404885                 pop     ebp
.text:00404886                 retn
.text:00404887 ; ---------------------------------------------------------------------------
.text:00404887
.text:00404887 loc_404887:                             ; CODE XREF: sub_404810+5F↑j
.text:00404887                 mov     [esp+2Ch+Str], edi ; char *
.text:0040488A                 call    sub_406D00
.text:0040488F                 mov     edx, [esp+2Ch+arg_8]
.text:00404893                 mov     edi, eax
.text:00404895                 mov     [esp+2Ch+Str], edx
.text:00404898                 call    ds:libintl_gettext
.text:0040489E                 mov     dword ptr [esp+2Ch+var_20], edi ; char
.text:004048A2                 mov     [esp+2Ch+Val], 0 ; ErrorMessage
.text:004048AA                 mov     [esp+2Ch+Str], 1 ; Code
.text:004048B1                 mov     [esp+2Ch+var_24], eax ; char *
.text:004048B5                 call    sub_40AAC0
.text:004048BA                 mov     eax, [esi+0Ch]
.text:004048BD                 jmp     short loc_404871
.text:004048BD ; ---------------------------------------------------------------------------
.text:004048BF                 align 10h
.text:004048C0
.text:004048C0 loc_4048C0:                             ; CODE XREF: sub_404810+43↑j
.text:004048C0                 mov     [esp+2Ch+Str], edi ; char *
.text:004048C3                 call    sub_406D00
.text:004048C8                 mov     edx, [esp+2Ch+arg_8]
.text:004048CC                 mov     ebx, eax
.text:004048CE                 mov     [esp+2Ch+Str], edx
.text:004048D1                 call    ds:libintl_gettext
.text:004048D7                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:004048DB                 mov     [esp+2Ch+Val], 0 ; ErrorMessage
.text:004048E3                 mov     [esp+2Ch+Str], 0 ; Code
.text:004048EA                 mov     [esp+2Ch+var_24], eax ; char *
.text:004048EE                 call    sub_40AAC0
.text:004048F3                 mov     [esp+2Ch+Str], 1 ; Code
.text:004048FA                 call    sub_402210
.text:004048FA sub_404810      endp
.text:004048FA
.text:004048FA ; ---------------------------------------------------------------------------
.text:004048FF                 db 0E9h ; é
.text:00404900                 db  51h ; Q
.text:00404901                 db 0FFh ; ÿ
.text:00404902                 db 0FFh ; ÿ
.text:00404903                 db 0FFh ; ÿ
.text:00404904                 align 10h
.text:00404910
.text:00404910 ; =============== S U B R O U T I N E =======================================
.text:00404910
.text:00404910
.text:00404910 sub_404910      proc near               ; CODE XREF: sub_403500+55C↑p
.text:00404910                                         ; sub_404910+85↓p
.text:00404910
.text:00404910 var_5C          = dword ptr -5Ch
.text:00404910 var_58          = dword ptr -58h
.text:00404910 var_54          = dword ptr -54h
.text:00404910 var_50          = dword ptr -50h
.text:00404910 Str             = dword ptr -4Ch
.text:00404910 var_3C          = dword ptr -3Ch
.text:00404910 var_38          = dword ptr -38h
.text:00404910 var_34          = dword ptr -34h
.text:00404910 var_30          = dword ptr -30h
.text:00404910 var_2C          = dword ptr -2Ch
.text:00404910 var_28          = dword ptr -28h
.text:00404910 var_20          = dword ptr -20h
.text:00404910 var_1C          = dword ptr -1Ch
.text:00404910 var_18          = dword ptr -18h
.text:00404910 var_10          = dword ptr -10h
.text:00404910 var_C           = dword ptr -0Ch
.text:00404910 var_8           = dword ptr -8
.text:00404910 var_4           = dword ptr -4
.text:00404910 arg_0           = dword ptr  4
.text:00404910 arg_4           = dword ptr  8
.text:00404910
.text:00404910                 sub     esp, 5Ch
.text:00404913                 lea     edx, [esp+5Ch+var_20]
.text:00404917                 mov     [esp+5Ch+var_4], ebp
.text:0040491B                 lea     ecx, [esp+5Ch+var_1C]
.text:0040491F                 mov     ebp, [esp+5Ch+arg_4]
.text:00404923                 mov     [esp+5Ch+var_58], edx ; int
.text:00404927                 mov     edx, [esp+5Ch+arg_0]
.text:0040492B                 mov     [esp+5Ch+var_10], ebx
.text:0040492F                 mov     [esp+5Ch+var_C], esi
.text:00404933                 mov     [esp+5Ch+var_8], edi
.text:00404937                 mov     [esp+5Ch+Str], offset aBcegkkmptwyz0 ; "bcEGkKMPTwYZ0"
.text:0040493F                 mov     [esp+5Ch+var_50], ecx ; int
.text:00404943                 mov     [esp+5Ch+var_54], 0Ah ; int
.text:0040494B                 mov     [esp+5Ch+var_5C], edx ; int
.text:0040494E                 call    sub_406DA0
.text:00404953                 cmp     eax, 2
.text:00404956                 jz      short loc_404982
.text:00404958
.text:00404958 loc_404958:                             ; CODE XREF: sub_404910+79↓j
.text:00404958                 test    eax, eax
.text:0040495A                 jz      short loc_404978
.text:0040495C
.text:0040495C loc_40495C:                             ; CODE XREF: sub_404910+F1↓j
.text:0040495C                 mov     byte ptr [ebp+0], 1
.text:00404960                 xor     eax, eax
.text:00404962                 xor     edx, edx
.text:00404964
.text:00404964 loc_404964:                             ; CODE XREF: sub_404910+70↓j
.text:00404964                 mov     ebx, [esp+5Ch+var_10]
.text:00404968                 mov     esi, [esp+5Ch+var_C]
.text:0040496C                 mov     edi, [esp+5Ch+var_8]
.text:00404970                 mov     ebp, [esp+5Ch+var_4]
.text:00404974                 add     esp, 5Ch
.text:00404977                 retn
.text:00404978 ; ---------------------------------------------------------------------------
.text:00404978
.text:00404978 loc_404978:                             ; CODE XREF: sub_404910+4A↑j
.text:00404978                                         ; sub_404910+12B↓j
.text:00404978                 mov     eax, [esp+5Ch+var_1C]
.text:0040497C                 mov     edx, [esp+5Ch+var_18]
.text:00404980                 jmp     short loc_404964
.text:00404982 ; ---------------------------------------------------------------------------
.text:00404982
.text:00404982 loc_404982:                             ; CODE XREF: sub_404910+46↑j
.text:00404982                 mov     edx, [esp+5Ch+var_20]
.text:00404986                 cmp     byte ptr [edx], 78h ; 'x'
.text:00404989                 jnz     short loc_404958
.text:0040498B                 mov     [esp+5Ch+var_58], ebp
.text:0040498F                 lea     esi, [edx+1]
.text:00404992                 mov     [esp+5Ch+var_5C], esi
.text:00404995                 call    sub_404910
.text:0040499A                 mov     ebx, edx
.text:0040499C                 mov     esi, eax
.text:0040499E                 or      ebx, eax
.text:004049A0                 mov     edi, edx
.text:004049A2                 jz      loc_404A40
.text:004049A8                 mov     [esp+5Ch+var_54], esi
.text:004049AC                 mov     eax, [esp+5Ch+var_1C]
.text:004049B0                 mov     ebx, [esp+5Ch+var_18]
.text:004049B4                 mov     [esp+5Ch+var_50], edi
.text:004049B8                 mov     [esp+5Ch+var_2C], eax
.text:004049BC                 mov     ecx, [esp+5Ch+var_2C]
.text:004049C0                 mul     esi
.text:004049C2                 mov     [esp+5Ch+var_28], ebx
.text:004049C6                 imul    ecx, edi
.text:004049C9                 mov     [esp+5Ch+var_34], eax
.text:004049CD                 mov     eax, edx
.text:004049CF                 mov     edx, [esp+5Ch+var_28]
.text:004049D3                 add     eax, ecx
.text:004049D5                 imul    edx, esi
.text:004049D8                 lea     ecx, [edx+eax]
.text:004049DB                 mov     [esp+5Ch+var_30], ecx
.text:004049DF                 mov     edx, [esp+5Ch+var_34]
.text:004049E3                 mov     ebx, [esp+5Ch+var_30]
.text:004049E7                 mov     [esp+5Ch+var_5C], edx
.text:004049EA                 mov     [esp+5Ch+var_58], ebx
.text:004049EE                 call    sub_4129A0
.text:004049F3                 mov     ebx, [esp+5Ch+var_28]
.text:004049F7                 mov     ecx, [esp+5Ch+var_2C]
.text:004049FB                 xor     ebx, edx
.text:004049FD                 xor     eax, ecx
.text:004049FF                 or      ebx, eax
.text:00404A01                 jnz     loc_40495C
.text:00404A07
.text:00404A07 loc_404A07:                             ; CODE XREF: sub_404910+140↓j
.text:00404A07                 mov     eax, [esp+5Ch+var_2C]
.text:00404A0B                 mov     ecx, [esp+5Ch+var_2C]
.text:00404A0F                 mov     ebp, [esp+5Ch+var_28]
.text:00404A13                 mul     esi
.text:00404A15                 imul    ecx, edi
.text:00404A18                 imul    ebp, esi
.text:00404A1B                 mov     [esp+5Ch+var_3C], eax
.text:00404A1F                 mov     edi, edx
.text:00404A21                 add     edi, ecx
.text:00404A23                 lea     eax, [ebp+edi+0]
.text:00404A27                 mov     esi, [esp+5Ch+var_3C]
.text:00404A2B                 mov     [esp+5Ch+var_38], eax
.text:00404A2F                 mov     edi, [esp+5Ch+var_38]
.text:00404A33                 mov     [esp+5Ch+var_1C], esi
.text:00404A37                 mov     [esp+5Ch+var_18], edi
.text:00404A3B                 jmp     loc_404978
.text:00404A40 ; ---------------------------------------------------------------------------
.text:00404A40
.text:00404A40 loc_404A40:                             ; CODE XREF: sub_404910+92↑j
.text:00404A40                 mov     edx, [esp+5Ch+var_1C]
.text:00404A44                 mov     ebp, [esp+5Ch+var_18]
.text:00404A48                 mov     [esp+5Ch+var_2C], edx
.text:00404A4C                 mov     [esp+5Ch+var_28], ebp
.text:00404A50                 jmp     short loc_404A07
.text:00404A50 sub_404910      endp
.text:00404A50
.text:00404A50 ; ---------------------------------------------------------------------------
.text:00404A52 aSCannotSeek    db '%s: cannot seek',0  ; DATA XREF: sub_404A70+28F↓o
.text:00404A52                                         ; sub_404DF0+40↓o
.text:00404A62                 align 10h
.text:00404A70
.text:00404A70 ; =============== S U B R O U T I N E =======================================
.text:00404A70
.text:00404A70
.text:00404A70 ; int __cdecl sub_404A70(int, char *, int, int, int, int)
.text:00404A70 sub_404A70      proc near               ; CODE XREF: sub_403DD0+9B2↑p
.text:00404A70                                         ; sub_403DD0+9E7↑p
.text:00404A70
.text:00404A70 FileHandle      = dword ptr -2Ch
.text:00404A70 Offset          = qword ptr -28h
.text:00404A70 Origin          = dword ptr -20h
.text:00404A70 var_1C          = dword ptr -1Ch
.text:00404A70 var_18          = dword ptr -18h
.text:00404A70 arg_0           = dword ptr  4
.text:00404A70 arg_4           = dword ptr  8
.text:00404A70 arg_8           = dword ptr  0Ch
.text:00404A70 arg_C           = dword ptr  10h
.text:00404A70 arg_10          = dword ptr  14h
.text:00404A70 arg_14          = dword ptr  18h
.text:00404A70
.text:00404A70                 push    ebp
.text:00404A71                 push    edi
.text:00404A72                 push    esi
.text:00404A73                 xor     esi, esi
.text:00404A75                 push    ebx
.text:00404A76                 sub     esp, 1Ch
.text:00404A79                 mov     eax, [esp+2Ch+arg_8]
.text:00404A7D                 mov     ebx, [esp+2Ch+arg_C]
.text:00404A81                 mov     [esp+2Ch+var_1C], eax
.text:00404A85                 mov     ecx, [esp+2Ch+var_1C]
.text:00404A89                 mov     [esp+2Ch+var_18], ebx
.text:00404A8D                 mov     ebx, [esp+2Ch+arg_10]
.text:00404A91                 imul    ecx, esi
.text:00404A94                 mul     ebx
.text:00404A96                 mov     edi, eax
.text:00404A98                 mov     eax, edx
.text:00404A9A                 add     eax, ecx
.text:00404A9C                 mov     ecx, [esp+2Ch+var_18]
.text:00404AA0                 imul    ecx, ebx
.text:00404AA3                 lea     ebp, [ecx+eax]
.text:00404AA6                 call    _errno
.text:00404AAB                 mov     dword ptr [eax], 0
.text:00404AB1                 mov     dword ptr [esp+2Ch+Offset+4], ebx
.text:00404AB5                 mov     [esp+2Ch+Origin], esi
.text:00404AB9                 mov     [esp+2Ch+FileHandle], edi
.text:00404ABC                 mov     dword ptr [esp+2Ch+Offset], ebp
.text:00404AC0                 call    sub_4129A0
.text:00404AC5                 mov     ebx, [esp+2Ch+var_18]
.text:00404AC9                 mov     ecx, [esp+2Ch+var_1C]
.text:00404ACD                 xor     ebx, edx
.text:00404ACF                 xor     eax, ecx
.text:00404AD1                 or      ebx, eax
.text:00404AD3                 jnz     short loc_404B38
.text:00404AD5                 mov     [esp+2Ch+Origin], 1 ; Origin
.text:00404ADD                 mov     eax, [esp+2Ch+arg_0]
.text:00404AE1                 mov     dword ptr [esp+2Ch+Offset], edi ; Offset
.text:00404AE5                 mov     dword ptr [esp+2Ch+Offset+4], ebp
.text:00404AE9                 mov     [esp+2Ch+FileHandle], eax ; FileHandle
.text:00404AEC                 call    _lseeki64
.text:00404AF1                 test    edx, edx
.text:00404AF3                 js      short loc_404B38
.text:00404AF5                 mov     edx, [esp+2Ch+arg_0]
.text:00404AF9                 test    edx, edx
.text:00404AFB                 jnz     short loc_404B30
.text:00404AFD                 mov     eax, ds:dword_415190
.text:00404B02                 mov     esi, ds:dword_415194
.text:00404B08                 add     eax, edi
.text:00404B0A                 adc     esi, ebp
.text:00404B0C                 cmp     esi, ebp
.text:00404B0E                 mov     ds:dword_415190, eax
.text:00404B13                 mov     ds:dword_415194, esi
.text:00404B19                 ja      short loc_404B30
.text:00404B1B                 jb      short loc_404B21
.text:00404B1D                 cmp     eax, edi
.text:00404B1F                 jnb     short loc_404B30
.text:00404B21
.text:00404B21 loc_404B21:                             ; CODE XREF: sub_404A70+AB↑j
.text:00404B21                 mov     ds:byte_4151A0, 1
.text:00404B28                 nop
.text:00404B29                 lea     esi, [esi+0]
.text:00404B30
.text:00404B30 loc_404B30:                             ; CODE XREF: sub_404A70+8B↑j
.text:00404B30                                         ; sub_404A70+A9↑j ...
.text:00404B30                 add     esp, 1Ch
.text:00404B33                 pop     ebx
.text:00404B34                 pop     esi
.text:00404B35                 pop     edi
.text:00404B36                 pop     ebp
.text:00404B37                 retn
.text:00404B38 ; ---------------------------------------------------------------------------
.text:00404B38
.text:00404B38 loc_404B38:                             ; CODE XREF: sub_404A70+63↑j
.text:00404B38                                         ; sub_404A70+83↑j
.text:00404B38                 call    _errno
.text:00404B3D                 add     [esp+2Ch+var_1C], 0FFFFFFFFh
.text:00404B42                 mov     edi, [eax]
.text:00404B44                 mov     ecx, [esp+2Ch+var_1C]
.text:00404B48                 adc     [esp+2Ch+var_18], 0FFFFFFFFh
.text:00404B4D                 mov     ebx, [esp+2Ch+var_18]
.text:00404B51                 and     ecx, ebx
.text:00404B53                 inc     ecx
.text:00404B54                 jz      short loc_404B30
.text:00404B56                 lea     esi, [esi+0]
.text:00404B59                 lea     edi, [edi+0]
.text:00404B60
.text:00404B60 loc_404B60:                             ; CODE XREF: sub_404A70+165↓j
.text:00404B60                 mov     edx, [esp+2Ch+arg_10]
.text:00404B64                 mov     eax, [esp+2Ch+arg_14]
.text:00404B68                 mov     ebp, [esp+2Ch+arg_0]
.text:00404B6C                 mov     dword ptr [esp+2Ch+Offset+4], edx
.text:00404B70                 mov     dword ptr [esp+2Ch+Offset], eax
.text:00404B74                 mov     [esp+2Ch+FileHandle], ebp
.text:00404B77                 call    sub_406C60
.text:00404B7C                 cmp     eax, 0FFFFFFFFh
.text:00404B7F                 jz      short loc_404BE0
.text:00404B81                 test    eax, eax
.text:00404B83                 jz      short loc_404B30
.text:00404B85                 mov     ecx, [esp+2Ch+arg_0]
.text:00404B89                 test    ecx, ecx
.text:00404B8B                 jnz     short loc_404BC0
.text:00404B8D                 mov     edx, ds:dword_415190
.text:00404B93                 mov     ebx, eax
.text:00404B95                 xor     eax, eax
.text:00404B97                 mov     esi, ds:dword_415194
.text:00404B9D                 add     edx, ebx
.text:00404B9F                 adc     esi, eax
.text:00404BA1                 cmp     esi, eax
.text:00404BA3                 mov     ds:dword_415190, edx
.text:00404BA9                 mov     ds:dword_415194, esi
.text:00404BAF                 ja      short loc_404BC0
.text:00404BB1                 jb      short loc_404BB7
.text:00404BB3                 cmp     edx, ebx
.text:00404BB5                 jnb     short loc_404BC0
.text:00404BB7
.text:00404BB7 loc_404BB7:                             ; CODE XREF: sub_404A70+141↑j
.text:00404BB7                 mov     ds:byte_4151A0, 1
.text:00404BBE                 mov     esi, esi
.text:00404BC0
.text:00404BC0 loc_404BC0:                             ; CODE XREF: sub_404A70+11B↑j
.text:00404BC0                                         ; sub_404A70+13F↑j ...
.text:00404BC0                 add     [esp+2Ch+var_1C], 0FFFFFFFFh
.text:00404BC5                 mov     ebx, [esp+2Ch+var_1C]
.text:00404BC9                 adc     [esp+2Ch+var_18], 0FFFFFFFFh
.text:00404BCE                 mov     ebp, [esp+2Ch+var_18]
.text:00404BD2                 and     ebx, ebp
.text:00404BD4                 inc     ebx
.text:00404BD5                 jnz     short loc_404B60
.text:00404BD7                 jmp     loc_404B30
.text:00404BD7 ; ---------------------------------------------------------------------------
.text:00404BDC                 align 10h
.text:00404BE0
.text:00404BE0 loc_404BE0:                             ; CODE XREF: sub_404A70+10F↑j
.text:00404BE0                 mov     ecx, [esp+2Ch+arg_0]
.text:00404BE4                 test    ecx, ecx
.text:00404BE6                 jnz     loc_404CF3
.text:00404BEC                 mov     eax, [esp+2Ch+arg_4]
.text:00404BF0                 mov     [esp+2Ch+FileHandle], eax ; char *
.text:00404BF3                 call    sub_406D00
.text:00404BF8                 mov     [esp+2Ch+FileHandle], offset aReadingS ; "reading %s"
.text:00404BFF                 mov     ebx, eax
.text:00404C01                 call    ds:libintl_gettext
.text:00404C07                 mov     ebp, eax
.text:00404C09                 call    _errno
.text:00404C0E                 mov     [esp+2Ch+Origin], ebx ; char
.text:00404C12                 mov     dword ptr [esp+2Ch+Offset+4], ebp ; char *
.text:00404C16                 mov     esi, [eax]
.text:00404C18                 mov     [esp+2Ch+FileHandle], 0 ; Code
.text:00404C1F                 mov     dword ptr [esp+2Ch+Offset], esi ; ErrorMessage
.text:00404C23                 call    sub_40AAC0
.text:00404C28                 test    byte ptr ds:dword_415070+1, 1
.text:00404C2F                 jnz     loc_404CE9
.text:00404C35
.text:00404C35 loc_404C35:                             ; CODE XREF: sub_404A70+2B6↓j
.text:00404C35                 mov     [esp+2Ch+FileHandle], 0 ; FileHandle
.text:00404C3C                 call    _close
.text:00404C41                 test    eax, eax
.text:00404C43                 js      short loc_404CA6
.text:00404C45
.text:00404C45 loc_404C45:                             ; CODE XREF: sub_404A70+274↓j
.text:00404C45                 mov     [esp+2Ch+FileHandle], 1 ; FileHandle
.text:00404C4C                 call    _close
.text:00404C51                 test    eax, eax
.text:00404C53                 js      short loc_404C66
.text:00404C55
.text:00404C55 loc_404C55:                             ; CODE XREF: sub_404A70+234↓j
.text:00404C55                 call    sub_402DF0
.text:00404C5A                 mov     [esp+2Ch+FileHandle], 1 ; Code
.text:00404C61                 call    exit
.text:00404C66 ; ---------------------------------------------------------------------------
.text:00404C66
.text:00404C66 loc_404C66:                             ; CODE XREF: sub_404A70+1E3↑j
.text:00404C66                 mov     edx, ds:FileName
.text:00404C6C                 mov     [esp+2Ch+FileHandle], edx ; char *
.text:00404C6F                 call    sub_406D00
.text:00404C74                 mov     [esp+2Ch+FileHandle], (offset stru_40247A._file+2)
.text:00404C7B                 mov     ebp, eax
.text:00404C7D                 call    ds:libintl_gettext
.text:00404C83                 mov     edi, eax
.text:00404C85                 call    _errno
.text:00404C8A                 mov     [esp+2Ch+Origin], ebp ; char
.text:00404C8E                 mov     dword ptr [esp+2Ch+Offset+4], edi ; char *
.text:00404C92                 mov     esi, [eax]
.text:00404C94                 mov     [esp+2Ch+FileHandle], 1 ; Code
.text:00404C9B                 mov     dword ptr [esp+2Ch+Offset], esi ; ErrorMessage
.text:00404C9F                 call    sub_40AAC0
.text:00404CA4                 jmp     short loc_404C55
.text:00404CA6 ; ---------------------------------------------------------------------------
.text:00404CA6
.text:00404CA6 loc_404CA6:                             ; CODE XREF: sub_404A70+1D3↑j
.text:00404CA6                 mov     ecx, ds:dword_415000
.text:00404CAC                 mov     [esp+2Ch+FileHandle], ecx ; char *
.text:00404CAF                 call    sub_406D00
.text:00404CB4                 mov     [esp+2Ch+FileHandle], offset aClosingInputFi ; "closing input file %s"
.text:00404CBB                 mov     ebx, eax
.text:00404CBD                 call    ds:libintl_gettext
.text:00404CC3                 mov     ebp, eax
.text:00404CC5                 call    _errno
.text:00404CCA                 mov     [esp+2Ch+Origin], ebx ; char
.text:00404CCE                 mov     dword ptr [esp+2Ch+Offset+4], ebp ; char *
.text:00404CD2                 mov     edi, [eax]
.text:00404CD4                 mov     [esp+2Ch+FileHandle], 1 ; Code
.text:00404CDB                 mov     dword ptr [esp+2Ch+Offset], edi ; ErrorMessage
.text:00404CDF                 call    sub_40AAC0
.text:00404CE4                 jmp     loc_404C45
.text:00404CE9 ; ---------------------------------------------------------------------------
.text:00404CE9
.text:00404CE9 loc_404CE9:                             ; CODE XREF: sub_404A70+1BF↑j
.text:00404CE9                 call    sub_402DF0
.text:00404CEE                 jmp     loc_404BC0
.text:00404CF3 ; ---------------------------------------------------------------------------
.text:00404CF3
.text:00404CF3 loc_404CF3:                             ; CODE XREF: sub_404A70+176↑j
.text:00404CF3                 mov     edx, [esp+2Ch+arg_4]
.text:00404CF7                 mov     [esp+2Ch+FileHandle], edx ; char *
.text:00404CFA                 call    sub_406D00
.text:00404CFF                 mov     [esp+2Ch+FileHandle], offset aSCannotSeek ; "%s: cannot seek"
.text:00404D06                 mov     esi, eax
.text:00404D08                 call    ds:libintl_gettext
.text:00404D0E                 mov     [esp+2Ch+Origin], esi ; char
.text:00404D12                 mov     dword ptr [esp+2Ch+Offset], edi ; ErrorMessage
.text:00404D16                 mov     [esp+2Ch+FileHandle], 0 ; Code
.text:00404D1D                 mov     dword ptr [esp+2Ch+Offset+4], eax ; char *
.text:00404D21                 call    sub_40AAC0
.text:00404D26                 jmp     loc_404C35
.text:00404D26 sub_404A70      endp
.text:00404D26
.text:00404D26 ; ---------------------------------------------------------------------------
.text:00404D2B                 align 20h
.text:00404D40 aOffsetOverflow db 'offset overflow while reading file %s',0
.text:00404D40                                         ; DATA XREF: sub_404DF0+F2↓o
.text:00404D66                 align 20h
.text:00404D80 aWarningScrewyF db 'warning: screwy file offset after failed read',0
.text:00404D80                                         ; DATA XREF: sub_404DF0:loc_404F75↓o
.text:00404DAE                 align 20h
.text:00404DC0 aCannotWorkArou db 'cannot work around kernel bug after all',0
.text:00404DC0                                         ; DATA XREF: sub_404DF0+1E2↓o
.text:00404DE8                 align 10h
.text:00404DF0
.text:00404DF0 ; =============== S U B R O U T I N E =======================================
.text:00404DF0
.text:00404DF0
.text:00404DF0 sub_404DF0      proc near               ; CODE XREF: sub_403DD0+577↑p
.text:00404DF0
.text:00404DF0 FileHandle      = dword ptr -2Ch
.text:00404DF0 Offset          = qword ptr -28h
.text:00404DF0 Origin          = dword ptr -20h
.text:00404DF0 var_10          = dword ptr -10h
.text:00404DF0 var_C           = dword ptr -0Ch
.text:00404DF0 var_8           = dword ptr -8
.text:00404DF0 var_4           = dword ptr -4
.text:00404DF0 arg_0           = dword ptr  4
.text:00404DF0
.text:00404DF0                 sub     esp, 2Ch
.text:00404DF3                 cmp     ds:byte_415170, 0
.text:00404DFA                 mov     [esp+2Ch+var_10], ebx
.text:00404DFE                 mov     [esp+2Ch+var_C], esi
.text:00404E02                 mov     [esp+2Ch+var_8], edi
.text:00404E06                 mov     [esp+2Ch+var_4], ebp
.text:00404E0A                 jnz     short loc_404E80
.text:00404E0C                 cmp     ds:dword_415180, 1Dh
.text:00404E13                 jz      short loc_404E78
.text:00404E15                 call    _errno
.text:00404E1A                 mov     ecx, ds:dword_415180
.text:00404E20                 mov     [eax], ecx
.text:00404E22
.text:00404E22 loc_404E22:                             ; CODE XREF: sub_404DF0+140↓j
.text:00404E22                                         ; sub_404DF0+1DC↓j ...
.text:00404E22                 mov     edx, ds:dword_415000
.text:00404E28                 mov     [esp+2Ch+FileHandle], edx ; char *
.text:00404E2B                 call    sub_406D00
.text:00404E30                 mov     [esp+2Ch+FileHandle], offset aSCannotSeek ; "%s: cannot seek"
.text:00404E37                 mov     ebp, eax
.text:00404E39                 call    ds:libintl_gettext
.text:00404E3F                 mov     edi, eax
.text:00404E41                 call    _errno
.text:00404E46                 mov     [esp+2Ch+Origin], ebp ; char
.text:00404E4A                 mov     dword ptr [esp+2Ch+Offset+4], edi ; char *
.text:00404E4E                 mov     esi, [eax]
.text:00404E50                 mov     dword ptr [esp+2Ch+Offset], esi ; ErrorMessage
.text:00404E54
.text:00404E54 loc_404E54:                             ; CODE XREF: sub_404DF0+111↓j
.text:00404E54                 mov     [esp+2Ch+FileHandle], 0 ; Code
.text:00404E5B                 xor     ebp, ebp
.text:00404E5D                 call    sub_40AAC0
.text:00404E62
.text:00404E62 loc_404E62:                             ; CODE XREF: sub_404DF0+8D↓j
.text:00404E62                                         ; sub_404DF0+15F↓j ...
.text:00404E62                 mov     eax, ebp
.text:00404E64                 mov     ebx, [esp+2Ch+var_10]
.text:00404E68                 mov     esi, [esp+2Ch+var_C]
.text:00404E6C                 mov     edi, [esp+2Ch+var_8]
.text:00404E70                 mov     ebp, [esp+2Ch+var_4]
.text:00404E74                 add     esp, 2Ch
.text:00404E77                 retn
.text:00404E78 ; ---------------------------------------------------------------------------
.text:00404E78
.text:00404E78 loc_404E78:                             ; CODE XREF: sub_404DF0+23↑j
.text:00404E78                 mov     ebp, 1
.text:00404E7D                 jmp     short loc_404E62
.text:00404E7D ; ---------------------------------------------------------------------------
.text:00404E7F                 align 10h
.text:00404E80
.text:00404E80 loc_404E80:                             ; CODE XREF: sub_404DF0+1A↑j
.text:00404E80                 mov     ecx, ds:dword_415190
.text:00404E86                 xor     esi, esi
.text:00404E88                 mov     eax, [esp+2Ch+arg_0]
.text:00404E8C                 mov     ebx, ds:dword_415194
.text:00404E92                 add     ecx, eax
.text:00404E94                 adc     ebx, esi
.text:00404E96                 cmp     ebx, esi
.text:00404E98                 mov     ds:dword_415190, ecx
.text:00404E9E                 mov     ds:dword_415194, ebx
.text:00404EA4                 ja      short loc_404EB3
.text:00404EA6                 jb      short loc_404EAC
.text:00404EA8                 cmp     ecx, eax
.text:00404EAA                 jnb     short loc_404EB3
.text:00404EAC
.text:00404EAC loc_404EAC:                             ; CODE XREF: sub_404DF0+B6↑j
.text:00404EAC                 mov     ds:byte_4151A0, 1
.text:00404EB3
.text:00404EB3 loc_404EB3:                             ; CODE XREF: sub_404DF0+B4↑j
.text:00404EB3                                         ; sub_404DF0+BA↑j
.text:00404EB3                 movzx   edx, ds:byte_4151A0
.text:00404EBA                 cmp     ebx, 7FFFFFFFh
.text:00404EC0                 jb      short loc_404EC6
.text:00404EC2                 mov     al, 1
.text:00404EC4                 ja      short loc_404ECB
.text:00404EC6
.text:00404EC6 loc_404EC6:                             ; CODE XREF: sub_404DF0+D0↑j
.text:00404EC6                 test    edx, edx
.text:00404EC8                 setnz   al
.text:00404ECB
.text:00404ECB loc_404ECB:                             ; CODE XREF: sub_404DF0+D4↑j
.text:00404ECB                 mov     ds:byte_4151A0, al
.text:00404ED0                 test    al, al
.text:00404ED2                 jz      short loc_404F06
.text:00404ED4                 mov     edx, ds:dword_415000
.text:00404EDA                 mov     [esp+2Ch+FileHandle], edx ; char *
.text:00404EDD                 call    sub_406D00
.text:00404EE2                 mov     [esp+2Ch+FileHandle], offset aOffsetOverflow ; "offset overflow while reading file %s"
.text:00404EE9                 mov     edi, eax
.text:00404EEB                 call    ds:libintl_gettext
.text:00404EF1                 mov     [esp+2Ch+Origin], edi
.text:00404EF5                 mov     dword ptr [esp+2Ch+Offset], 0
.text:00404EFD                 mov     dword ptr [esp+2Ch+Offset+4], eax
.text:00404F01                 jmp     loc_404E54
.text:00404F06 ; ---------------------------------------------------------------------------
.text:00404F06
.text:00404F06 loc_404F06:                             ; CODE XREF: sub_404DF0+E2↑j
.text:00404F06                 mov     [esp+2Ch+Origin], 1 ; char
.text:00404F0E                 mov     dword ptr [esp+2Ch+Offset], 0 ; Offset
.text:00404F16                 mov     dword ptr [esp+2Ch+Offset+4], 0
.text:00404F1E                 mov     [esp+2Ch+FileHandle], 0 ; FileHandle
.text:00404F25                 call    _lseeki64
.text:00404F2A                 test    edx, edx
.text:00404F2C                 mov     ecx, eax
.text:00404F2E                 mov     ebx, edx
.text:00404F30                 js      loc_404E22
.text:00404F36                 mov     esi, ds:dword_415190
.text:00404F3C                 mov     eax, ecx
.text:00404F3E                 mov     ebp, 1
.text:00404F43                 mov     edi, ds:dword_415194
.text:00404F49                 xor     eax, esi
.text:00404F4B                 xor     edx, edi
.text:00404F4D                 or      edx, eax
.text:00404F4F                 jz      loc_404E62
.text:00404F55                 mov     edx, esi
.text:00404F57                 mov     ebp, edi
.text:00404F59                 sub     edx, ecx
.text:00404F5B                 sbb     ebp, ebx
.text:00404F5D                 test    ebp, ebp
.text:00404F5F                 mov     esi, ebp
.text:00404F61                 mov     ebx, edx
.text:00404F63                 js      short loc_404F75
.text:00404F65                 xor     ecx, ecx
.text:00404F67                 mov     eax, [esp+2Ch+arg_0]
.text:00404F6B                 cmp     ebp, ecx
.text:00404F6D                 jg      short loc_404F75
.text:00404F6F                 jl      short loc_404F9A
.text:00404F71                 cmp     edx, eax
.text:00404F73                 jbe     short loc_404F9A
.text:00404F75
.text:00404F75 loc_404F75:                             ; CODE XREF: sub_404DF0+173↑j
.text:00404F75                                         ; sub_404DF0+17D↑j
.text:00404F75                 mov     [esp+2Ch+FileHandle], offset aWarningScrewyF ; "warning: screwy file offset after faile"...
.text:00404F7C                 call    ds:libintl_gettext
.text:00404F82                 mov     dword ptr [esp+2Ch+Offset], 0 ; ErrorMessage
.text:00404F8A                 mov     [esp+2Ch+FileHandle], 0 ; Code
.text:00404F91                 mov     dword ptr [esp+2Ch+Offset+4], eax ; char *
.text:00404F95                 call    sub_40AAC0
.text:00404F9A
.text:00404F9A loc_404F9A:                             ; CODE XREF: sub_404DF0+17F↑j
.text:00404F9A                                         ; sub_404DF0+183↑j
.text:00404F9A                 mov     [esp+2Ch+Origin], 1 ; char
.text:00404FA2                 mov     ebp, 1
.text:00404FA7                 mov     dword ptr [esp+2Ch+Offset], ebx ; Offset
.text:00404FAB                 mov     dword ptr [esp+2Ch+Offset+4], esi
.text:00404FAF                 mov     [esp+2Ch+FileHandle], 0 ; FileHandle
.text:00404FB6                 call    _lseeki64
.text:00404FBB                 test    edx, edx
.text:00404FBD                 jns     loc_404E62
.text:00404FC3                 call    _errno
.text:00404FC8                 mov     ebx, [eax]
.text:00404FCA                 test    ebx, ebx
.text:00404FCC                 jnz     loc_404E22
.text:00404FD2                 mov     [esp+2Ch+FileHandle], offset aCannotWorkArou ; "cannot work around kernel bug after all"
.text:00404FD9                 call    ds:libintl_gettext
.text:00404FDF                 mov     dword ptr [esp+2Ch+Offset], 0 ; ErrorMessage
.text:00404FE7                 mov     [esp+2Ch+FileHandle], 0 ; Code
.text:00404FEE                 mov     dword ptr [esp+2Ch+Offset+4], eax ; char *
.text:00404FF2                 call    sub_40AAC0
.text:00404FF7                 jmp     loc_404E22
.text:00404FF7 sub_404DF0      endp
.text:00404FF7
.text:00404FF7 ; ---------------------------------------------------------------------------
.text:00404FFC                 align 10h
.text:00405000
.text:00405000 ; =============== S U B R O U T I N E =======================================
.text:00405000
.text:00405000
.text:00405000 sub_405000      proc near               ; CODE XREF: sub_403DD0+44E↑p
.text:00405000                                         ; sub_403DD0+949↑p
.text:00405000
.text:00405000 FileHandle      = dword ptr -2Ch
.text:00405000 ErrorMessage    = dword ptr -28h
.text:00405000 var_24          = dword ptr -24h
.text:00405000 var_20          = byte ptr -20h
.text:00405000 arg_0           = dword ptr  4
.text:00405000 arg_4           = dword ptr  8
.text:00405000
.text:00405000                 push    ebp
.text:00405001                 push    edi
.text:00405002                 push    esi
.text:00405003                 push    ebx
.text:00405004                 sub     esp, 1Ch
.text:00405007                 mov     esi, [esp+2Ch+arg_4]
.text:0040500B                 mov     ebp, [esp+2Ch+arg_0]
.text:0040500F                 test    esi, esi
.text:00405011                 jz      short loc_40507C
.text:00405013                 lea     esi, [esi+0]
.text:00405019                 lea     edi, [edi+0]
.text:00405020
.text:00405020 loc_405020:                             ; CODE XREF: sub_405000+7A↓j
.text:00405020                 movzx   ecx, byte ptr [ebp+0]
.text:00405024                 cmp     cl, byte_414018
.text:0040502A                 jz      loc_4051E4
.text:00405030                 mov     eax, ds:dword_415130
.text:00405035                 mov     edx, ds:dword_415040
.text:0040503B                 cmp     eax, edx
.text:0040503D                 jz      loc_4051D1
.text:00405043                 cmp     eax, edx
.text:00405045                 jnb     short loc_405072
.text:00405047                 mov     edx, ds:dword_4151B0
.text:0040504D                 mov     ebx, ds:dword_415120
.text:00405053                 mov     [ebx+edx], cl
.text:00405056                 mov     edi, ds:dword_415120
.text:0040505C                 mov     edx, ds:dword_415030
.text:00405062                 inc     edi
.text:00405063                 cmp     edi, edx
.text:00405065                 mov     ds:dword_415120, edi
.text:0040506B                 jnb     short loc_405084
.text:0040506D
.text:0040506D loc_40506D:                             ; CODE XREF: sub_405000+CB↓j
.text:0040506D                 mov     eax, ds:dword_415130
.text:00405072
.text:00405072 loc_405072:                             ; CODE XREF: sub_405000+45↑j
.text:00405072                                         ; sub_405000+1DF↓j
.text:00405072                 inc     eax
.text:00405073                 mov     ds:dword_415130, eax
.text:00405078
.text:00405078 loc_405078:                             ; CODE XREF: sub_405000+23D↓j
.text:00405078                 inc     ebp
.text:00405079                 dec     esi
.text:0040507A                 jnz     short loc_405020
.text:0040507C
.text:0040507C loc_40507C:                             ; CODE XREF: sub_405000+11↑j
.text:0040507C                 add     esp, 1Ch
.text:0040507F                 pop     ebx
.text:00405080                 pop     esi
.text:00405081                 pop     edi
.text:00405082                 pop     ebp
.text:00405083                 retn
.text:00405084 ; ---------------------------------------------------------------------------
.text:00405084
.text:00405084 loc_405084:                             ; CODE XREF: sub_405000+6B↑j
.text:00405084                 mov     [esp+2Ch+var_24], edx
.text:00405088                 mov     edi, ds:dword_4151B0
.text:0040508E                 mov     [esp+2Ch+FileHandle], 1
.text:00405095                 mov     [esp+2Ch+ErrorMessage], edi
.text:00405099                 call    sub_407A30
.text:0040509E                 xor     ecx, ecx
.text:004050A0                 mov     edi, eax
.text:004050A2                 add     ds:dword_415100, eax
.text:004050A8                 adc     ds:dword_415104, ecx
.text:004050AE                 cmp     eax, ds:dword_415030
.text:004050B4                 jnz     short loc_4050CD
.text:004050B6                 add     ds:dword_4150D0, 1
.text:004050BD                 adc     ds:dword_4150D4, 0
.text:004050C4                 xor     eax, eax
.text:004050C6                 mov     ds:dword_415120, eax
.text:004050CB                 jmp     short loc_40506D
.text:004050CD ; ---------------------------------------------------------------------------
.text:004050CD
.text:004050CD loc_4050CD:                             ; CODE XREF: sub_405000+B4↑j
.text:004050CD                                         ; sub_405000+272↓j
.text:004050CD                 mov     edx, ds:FileName
.text:004050D3                 mov     [esp+2Ch+FileHandle], edx ; char *
.text:004050D6                 call    sub_406D00
.text:004050DB                 mov     [esp+2Ch+FileHandle], offset aWritingToS ; "writing to %s"
.text:004050E2                 mov     ebx, eax
.text:004050E4                 call    ds:libintl_gettext
.text:004050EA                 mov     ebp, eax
.text:004050EC                 call    _errno
.text:004050F1                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:004050F5                 mov     [esp+2Ch+var_24], ebp ; char *
.text:004050F9                 mov     esi, [eax]
.text:004050FB                 mov     [esp+2Ch+FileHandle], 0 ; Code
.text:00405102                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00405106                 call    sub_40AAC0
.text:0040510B                 test    edi, edi
.text:0040510D                 jz      short loc_40511D
.text:0040510F                 add     ds:dword_4150C0, 1
.text:00405116                 adc     ds:dword_4150C4, 0
.text:0040511D
.text:0040511D loc_40511D:                             ; CODE XREF: sub_405000+10D↑j
.text:0040511D                 mov     [esp+2Ch+FileHandle], 0 ; FileHandle
.text:00405124                 call    _close
.text:00405129                 test    eax, eax
.text:0040512B                 js      short loc_40518E
.text:0040512D
.text:0040512D loc_40512D:                             ; CODE XREF: sub_405000+1CC↓j
.text:0040512D                 mov     [esp+2Ch+FileHandle], 1 ; FileHandle
.text:00405134                 call    _close
.text:00405139                 test    eax, eax
.text:0040513B                 js      short loc_40514E
.text:0040513D
.text:0040513D loc_40513D:                             ; CODE XREF: sub_405000+18C↓j
.text:0040513D                 call    sub_402DF0
.text:00405142                 mov     [esp+2Ch+FileHandle], 1 ; Code
.text:00405149                 call    exit
.text:0040514E ; ---------------------------------------------------------------------------
.text:0040514E
.text:0040514E loc_40514E:                             ; CODE XREF: sub_405000+13B↑j
.text:0040514E                 mov     edx, ds:FileName
.text:00405154                 mov     [esp+2Ch+FileHandle], edx ; char *
.text:00405157                 call    sub_406D00
.text:0040515C                 mov     [esp+2Ch+FileHandle], (offset stru_40247A._file+2)
.text:00405163                 mov     ebp, eax
.text:00405165                 call    ds:libintl_gettext
.text:0040516B                 mov     edi, eax
.text:0040516D                 call    _errno
.text:00405172                 mov     dword ptr [esp+2Ch+var_20], ebp ; char
.text:00405176                 mov     [esp+2Ch+var_24], edi ; char *
.text:0040517A                 mov     ebx, [eax]
.text:0040517C                 mov     [esp+2Ch+FileHandle], 1 ; Code
.text:00405183                 mov     [esp+2Ch+ErrorMessage], ebx ; ErrorMessage
.text:00405187                 call    sub_40AAC0
.text:0040518C                 jmp     short loc_40513D
.text:0040518E ; ---------------------------------------------------------------------------
.text:0040518E
.text:0040518E loc_40518E:                             ; CODE XREF: sub_405000+12B↑j
.text:0040518E                 mov     esi, ds:dword_415000
.text:00405194                 mov     [esp+2Ch+FileHandle], esi ; char *
.text:00405197                 call    sub_406D00
.text:0040519C                 mov     [esp+2Ch+FileHandle], offset aClosingInputFi ; "closing input file %s"
.text:004051A3                 mov     ebp, eax
.text:004051A5                 call    ds:libintl_gettext
.text:004051AB                 mov     edi, eax
.text:004051AD                 call    _errno
.text:004051B2                 mov     dword ptr [esp+2Ch+var_20], ebp ; char
.text:004051B6                 mov     [esp+2Ch+var_24], edi ; char *
.text:004051BA                 mov     ecx, [eax]
.text:004051BC                 mov     [esp+2Ch+FileHandle], 1 ; Code
.text:004051C3                 mov     [esp+2Ch+ErrorMessage], ecx ; ErrorMessage
.text:004051C7                 call    sub_40AAC0
.text:004051CC                 jmp     loc_40512D
.text:004051D1 ; ---------------------------------------------------------------------------
.text:004051D1
.text:004051D1 loc_4051D1:                             ; CODE XREF: sub_405000+3D↑j
.text:004051D1                 add     ds:dword_415110, 1
.text:004051D8                 adc     ds:dword_415114, 0
.text:004051DF                 jmp     loc_405072
.text:004051E4 ; ---------------------------------------------------------------------------
.text:004051E4
.text:004051E4 loc_4051E4:                             ; CODE XREF: sub_405000+2A↑j
.text:004051E4                 mov     eax, ds:dword_415130
.text:004051E9                 cmp     eax, ds:dword_415040
.text:004051EF                 jnb     short loc_405235
.text:004051F1                 mov     ebx, eax
.text:004051F3                 lea     esi, [esi+0]
.text:004051F9                 lea     edi, [edi+0]
.text:00405200
.text:00405200 loc_405200:                             ; CODE XREF: sub_405000+233↓j
.text:00405200                 movzx   edx, byte_414019
.text:00405207                 mov     edi, ds:dword_415120
.text:0040520D                 mov     eax, ds:dword_4151B0
.text:00405212                 mov     [edi+eax], dl
.text:00405215                 mov     ecx, ds:dword_415120
.text:0040521B                 mov     edx, ds:dword_415030
.text:00405221                 inc     ecx
.text:00405222                 cmp     ecx, edx
.text:00405224                 mov     ds:dword_415120, ecx
.text:0040522A                 jnb     short loc_405242
.text:0040522C
.text:0040522C loc_40522C:                             ; CODE XREF: sub_405000+28E↓j
.text:0040522C                 inc     ebx
.text:0040522D                 cmp     ebx, ds:dword_415040
.text:00405233                 jb      short loc_405200
.text:00405235
.text:00405235 loc_405235:                             ; CODE XREF: sub_405000+1EF↑j
.text:00405235                 xor     ebx, ebx
.text:00405237                 mov     ds:dword_415130, ebx
.text:0040523D                 jmp     loc_405078
.text:00405242 ; ---------------------------------------------------------------------------
.text:00405242
.text:00405242 loc_405242:                             ; CODE XREF: sub_405000+22A↑j
.text:00405242                 mov     [esp+2Ch+var_24], edx
.text:00405246                 mov     edi, ds:dword_4151B0
.text:0040524C                 mov     [esp+2Ch+FileHandle], 1
.text:00405253                 mov     [esp+2Ch+ErrorMessage], edi
.text:00405257                 call    sub_407A30
.text:0040525C                 xor     ecx, ecx
.text:0040525E                 mov     edi, eax
.text:00405260                 add     ds:dword_415100, eax
.text:00405266                 adc     ds:dword_415104, ecx
.text:0040526C                 cmp     eax, ds:dword_415030
.text:00405272                 jnz     loc_4050CD
.text:00405278                 add     ds:dword_4150D0, 1
.text:0040527F                 adc     ds:dword_4150D4, 0
.text:00405286                 xor     ecx, ecx
.text:00405288                 mov     ds:dword_415120, ecx
.text:0040528E                 jmp     short loc_40522C
.text:0040528E sub_405000      endp
.text:0040528E
.text:00405290
.text:00405290 ; =============== S U B R O U T I N E =======================================
.text:00405290
.text:00405290
.text:00405290 sub_405290      proc near               ; CODE XREF: sub_403DD0+43D↑p
.text:00405290                                         ; sub_403DD0+925↑p
.text:00405290
.text:00405290 FileHandle      = dword ptr -2Ch
.text:00405290 ErrorMessage    = dword ptr -28h
.text:00405290 var_24          = dword ptr -24h
.text:00405290 var_20          = byte ptr -20h
.text:00405290 var_11          = byte ptr -11h
.text:00405290 arg_0           = dword ptr  4
.text:00405290 arg_4           = dword ptr  8
.text:00405290
.text:00405290                 push    ebp
.text:00405291                 push    edi
.text:00405292                 push    esi
.text:00405293                 push    ebx
.text:00405294                 sub     esp, 1Ch
.text:00405297                 xor     ebx, ebx
.text:00405299                 mov     esi, [esp+2Ch+arg_4]
.text:0040529D                 mov     ebp, [esp+2Ch+arg_0]
.text:004052A1                 cmp     ebx, esi
.text:004052A3                 jnb     short loc_405314
.text:004052A5                 lea     esi, [esi+0]
.text:004052A9                 lea     edi, [edi+0]
.text:004052B0
.text:004052B0 loc_4052B0:                             ; CODE XREF: sub_405290+82↓j
.text:004052B0                 movzx   ecx, byte ptr [ebx+ebp]
.text:004052B4                 mov     [esp+2Ch+var_11], cl
.text:004052B8                 mov     ecx, ds:dword_415130
.text:004052BE                 cmp     ecx, ds:dword_415040
.text:004052C4                 lea     edx, [ecx+1]
.text:004052C7                 mov     ds:dword_415130, edx
.text:004052CD                 jb      loc_405470
.text:004052D3                 movzx   edx, byte_414018
.text:004052DA                 xor     edi, edi
.text:004052DC                 mov     eax, ds:dword_4151B0
.text:004052E1                 mov     ds:dword_415150, edi
.text:004052E7                 xor     ecx, ecx
.text:004052E9                 dec     ebx
.text:004052EA                 mov     ds:dword_415130, ecx
.text:004052F0                 mov     edi, ds:dword_415120
.text:004052F6                 mov     [edi+eax], dl
.text:004052F9
.text:004052F9 loc_4052F9:                             ; CODE XREF: sub_405290+29E↓j
.text:004052F9                 mov     edx, ds:dword_415120
.text:004052FF                 mov     eax, ds:dword_415030
.text:00405304                 inc     edx
.text:00405305                 mov     ds:dword_415120, edx
.text:0040530B                 cmp     edx, eax
.text:0040530D                 jnb     short loc_40531C
.text:0040530F
.text:0040530F loc_40530F:                             ; CODE XREF: sub_405290+D4↓j
.text:0040530F                                         ; sub_405290+2A9↓j
.text:0040530F                 inc     ebx
.text:00405310                 cmp     ebx, esi
.text:00405312                 jb      short loc_4052B0
.text:00405314
.text:00405314 loc_405314:                             ; CODE XREF: sub_405290+13↑j
.text:00405314                 add     esp, 1Ch
.text:00405317                 pop     ebx
.text:00405318                 pop     esi
.text:00405319                 pop     edi
.text:0040531A                 pop     ebp
.text:0040531B                 retn
.text:0040531C ; ---------------------------------------------------------------------------
.text:0040531C
.text:0040531C loc_40531C:                             ; CODE XREF: sub_405290+7D↑j
.text:0040531C                 mov     [esp+2Ch+var_24], eax
.text:00405320                 mov     edi, ds:dword_4151B0
.text:00405326                 mov     [esp+2Ch+FileHandle], 1
.text:0040532D                 mov     [esp+2Ch+ErrorMessage], edi
.text:00405331                 call    sub_407A30
.text:00405336                 xor     ecx, ecx
.text:00405338                 mov     edi, eax
.text:0040533A                 add     ds:dword_415100, eax
.text:00405340                 adc     ds:dword_415104, ecx
.text:00405346                 cmp     eax, ds:dword_415030
.text:0040534C                 jnz     short loc_405366
.text:0040534E                 add     ds:dword_4150D0, 1
.text:00405355                 adc     ds:dword_4150D4, 0
.text:0040535C                 xor     ecx, ecx
.text:0040535E                 mov     ds:dword_415120, ecx
.text:00405364                 jmp     short loc_40530F
.text:00405366 ; ---------------------------------------------------------------------------
.text:00405366
.text:00405366 loc_405366:                             ; CODE XREF: sub_405290+BC↑j
.text:00405366                                         ; sub_405290+270↓j
.text:00405366                 mov     esi, ds:FileName
.text:0040536C                 mov     [esp+2Ch+FileHandle], esi ; char *
.text:0040536F                 call    sub_406D00
.text:00405374                 mov     [esp+2Ch+FileHandle], offset aWritingToS ; "writing to %s"
.text:0040537B                 mov     ebx, eax
.text:0040537D                 call    ds:libintl_gettext
.text:00405383                 mov     ebp, eax
.text:00405385                 call    _errno
.text:0040538A                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040538E                 mov     [esp+2Ch+var_24], ebp ; char *
.text:00405392                 mov     ebx, [eax]
.text:00405394                 mov     [esp+2Ch+FileHandle], 0 ; Code
.text:0040539B                 mov     [esp+2Ch+ErrorMessage], ebx ; ErrorMessage
.text:0040539F                 call    sub_40AAC0
.text:004053A4                 test    edi, edi
.text:004053A6                 jz      short loc_4053B6
.text:004053A8                 add     ds:dword_4150C0, 1
.text:004053AF                 adc     ds:dword_4150C4, 0
.text:004053B6
.text:004053B6 loc_4053B6:                             ; CODE XREF: sub_405290+116↑j
.text:004053B6                 mov     [esp+2Ch+FileHandle], 0 ; FileHandle
.text:004053BD                 call    _close
.text:004053C2                 test    eax, eax
.text:004053C4                 js      short loc_405427
.text:004053C6
.text:004053C6 loc_4053C6:                             ; CODE XREF: sub_405290+1D5↓j
.text:004053C6                 mov     [esp+2Ch+FileHandle], 1 ; FileHandle
.text:004053CD                 call    _close
.text:004053D2                 test    eax, eax
.text:004053D4                 js      short loc_4053E7
.text:004053D6
.text:004053D6 loc_4053D6:                             ; CODE XREF: sub_405290+195↓j
.text:004053D6                 call    sub_402DF0
.text:004053DB                 mov     [esp+2Ch+FileHandle], 1 ; Code
.text:004053E2                 call    exit
.text:004053E7 ; ---------------------------------------------------------------------------
.text:004053E7
.text:004053E7 loc_4053E7:                             ; CODE XREF: sub_405290+144↑j
.text:004053E7                 mov     esi, ds:FileName
.text:004053ED                 mov     [esp+2Ch+FileHandle], esi ; char *
.text:004053F0                 call    sub_406D00
.text:004053F5                 mov     [esp+2Ch+FileHandle], (offset stru_40247A._file+2)
.text:004053FC                 mov     ebp, eax
.text:004053FE                 call    ds:libintl_gettext
.text:00405404                 mov     edi, eax
.text:00405406                 call    _errno
.text:0040540B                 mov     dword ptr [esp+2Ch+var_20], ebp ; char
.text:0040540F                 mov     [esp+2Ch+var_24], edi ; char *
.text:00405413                 mov     ebx, [eax]
.text:00405415                 mov     [esp+2Ch+FileHandle], 1 ; Code
.text:0040541C                 mov     [esp+2Ch+ErrorMessage], ebx ; ErrorMessage
.text:00405420                 call    sub_40AAC0
.text:00405425                 jmp     short loc_4053D6
.text:00405427 ; ---------------------------------------------------------------------------
.text:00405427
.text:00405427 loc_405427:                             ; CODE XREF: sub_405290+134↑j
.text:00405427                 mov     edx, ds:dword_415000
.text:0040542D                 mov     [esp+2Ch+FileHandle], edx ; char *
.text:00405430                 call    sub_406D00
.text:00405435                 mov     [esp+2Ch+FileHandle], offset aClosingInputFi ; "closing input file %s"
.text:0040543C                 mov     ebp, eax
.text:0040543E                 call    ds:libintl_gettext
.text:00405444                 mov     edi, eax
.text:00405446                 call    _errno
.text:0040544B                 mov     dword ptr [esp+2Ch+var_20], ebp ; char
.text:0040544F                 mov     [esp+2Ch+var_24], edi ; char *
.text:00405453                 mov     ecx, [eax]
.text:00405455                 mov     [esp+2Ch+FileHandle], 1 ; Code
.text:0040545C                 mov     [esp+2Ch+ErrorMessage], ecx ; ErrorMessage
.text:00405460                 call    sub_40AAC0
.text:00405465                 jmp     loc_4053C6
.text:00405465 ; ---------------------------------------------------------------------------
.text:0040546A                 align 10h
.text:00405470
.text:00405470 loc_405470:                             ; CODE XREF: sub_405290+3D↑j
.text:00405470                 movzx   eax, [esp+2Ch+var_11]
.text:00405475                 cmp     al, byte_414019
.text:0040547B                 jz      loc_405533
.text:00405481                 mov     ecx, ds:dword_415120
.text:00405487                 mov     eax, ds:dword_415150
.text:0040548C                 lea     esi, [esi+0]
.text:00405490
.text:00405490 loc_405490:                             ; CODE XREF: sub_405290+239↓j
.text:00405490                 test    eax, eax
.text:00405492                 jz      loc_405520
.text:00405498                 movzx   eax, byte_414019
.text:0040549F                 mov     edi, ds:dword_4151B0
.text:004054A5                 mov     [ecx+edi], al
.text:004054A8                 mov     ecx, ds:dword_415120
.text:004054AE                 mov     eax, ds:dword_415030
.text:004054B3                 inc     ecx
.text:004054B4                 cmp     ecx, eax
.text:004054B6                 mov     ds:dword_415120, ecx
.text:004054BC                 jnb     short loc_4054D0
.text:004054BE
.text:004054BE loc_4054BE:                             ; CODE XREF: sub_405290+28E↓j
.text:004054BE                 mov     eax, ds:dword_415150
.text:004054C3                 dec     eax
.text:004054C4                 mov     ds:dword_415150, eax
.text:004054C9                 jmp     short loc_405490
.text:004054C9 ; ---------------------------------------------------------------------------
.text:004054CB                 align 10h
.text:004054D0
.text:004054D0 loc_4054D0:                             ; CODE XREF: sub_405290+22C↑j
.text:004054D0                 mov     [esp+2Ch+var_24], eax
.text:004054D4                 mov     edi, ds:dword_4151B0
.text:004054DA                 mov     [esp+2Ch+FileHandle], 1
.text:004054E1                 mov     [esp+2Ch+ErrorMessage], edi
.text:004054E5                 call    sub_407A30
.text:004054EA                 xor     ecx, ecx
.text:004054EC                 mov     edi, eax
.text:004054EE                 add     ds:dword_415100, eax
.text:004054F4                 adc     ds:dword_415104, ecx
.text:004054FA                 cmp     eax, ds:dword_415030
.text:00405500                 jnz     loc_405366
.text:00405506                 add     ds:dword_4150D0, 1
.text:0040550D                 adc     ds:dword_4150D4, 0
.text:00405514                 xor     edx, edx
.text:00405516                 xor     ecx, ecx
.text:00405518                 mov     ds:dword_415120, edx
.text:0040551E                 jmp     short loc_4054BE
.text:00405520 ; ---------------------------------------------------------------------------
.text:00405520
.text:00405520 loc_405520:                             ; CODE XREF: sub_405290+202↑j
.text:00405520                 movzx   eax, [esp+2Ch+var_11]
.text:00405525                 mov     edi, ds:dword_4151B0
.text:0040552B                 mov     [ecx+edi], al
.text:0040552E                 jmp     loc_4052F9
.text:00405533 ; ---------------------------------------------------------------------------
.text:00405533
.text:00405533 loc_405533:                             ; CODE XREF: sub_405290+1EB↑j
.text:00405533                 inc     ds:dword_415150
.text:00405539                 jmp     loc_40530F
.text:00405539 sub_405290      endp
.text:00405539
.text:00405539 ; ---------------------------------------------------------------------------
.text:0040553E                 align 10h
.text:00405540 dword_405540    dd 90002D2Dh, 7 dup(90909090h)
.text:00405540                                         ; DATA XREF: sub_405790+E4↓o
.text:00405560 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00405560                                         ; DATA XREF: sub_405790+2FC↓o
.text:0040558D                 align 20h
.text:004055A0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004055A0                                         ; DATA XREF: sub_405790:loc_405AF2↓o
.text:004055CD                 align 20h
.text:004055E0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:004055E0                                         ; DATA XREF: sub_405790:loc_405B90↓o
.text:004055E0                                         ; sub_405790:loc_405F57↓o
.text:00405606                 align 20h
.text:00405620 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00405620                                         ; DATA XREF: sub_405790+48E↓o
.text:00405640 dword_405640    dd 90909000h, 7 dup(90909090h)
.text:00405640                                         ; DATA XREF: sub_405790:loc_405C61↓o
.text:00405660 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00405660                                         ; DATA XREF: sub_405790:loc_405C7A↓o
.text:00405680 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00405680                                         ; DATA XREF: sub_405790:loc_405D5F↓o
.text:00405680                                         ; sub_405790:loc_40608C↓o
.text:004056A7                 align 20h
.text:004056C0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004056C0                                         ; DATA XREF: sub_405790:loc_405ED3↓o
.text:004056EE                 align 20h
.text:00405700 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00405700                                         ; DATA XREF: sub_405790:loc_405FBF↓o
.text:00405721 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00405721                                         ; DATA XREF: sub_405790+93F↓o
.text:0040573B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040573B                                         ; DATA XREF: sub_405790:loc_406107↓o
.text:00405755 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00405755                                         ; DATA XREF: sub_405790:loc_40612E↓o
.text:00405773 ; const char VarName[]
.text:00405773 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_405790:loc_4062E0↓o
.text:00405783                 align 10h
.text:00405790
.text:00405790 ; =============== S U B R O U T I N E =======================================
.text:00405790
.text:00405790
.text:00405790 ; int __cdecl sub_405790(int, int, char *Str, int, int, int, int, int)
.text:00405790 sub_405790      proc near               ; CODE XREF: sub_406320+5A↓p
.text:00405790                                         ; .text:0040640A↓p ...
.text:00405790
.text:00405790 Str1            = dword ptr -5Ch
.text:00405790 Str2            = dword ptr -58h
.text:00405790 MaxCount        = dword ptr -54h
.text:00405790 var_50          = dword ptr -50h
.text:00405790 var_4C          = dword ptr -4Ch
.text:00405790 var_3C          = dword ptr -3Ch
.text:00405790 var_38          = dword ptr -38h
.text:00405790 var_34          = dword ptr -34h
.text:00405790 var_30          = dword ptr -30h
.text:00405790 var_2C          = dword ptr -2Ch
.text:00405790 var_28          = dword ptr -28h
.text:00405790 var_24          = dword ptr -24h
.text:00405790 var_20          = dword ptr -20h
.text:00405790 var_1C          = dword ptr -1Ch
.text:00405790 var_18          = dword ptr -18h
.text:00405790 var_14          = dword ptr -14h
.text:00405790 arg_0           = dword ptr  4
.text:00405790 arg_4           = dword ptr  8
.text:00405790 Str             = dword ptr  0Ch
.text:00405790 arg_C           = dword ptr  10h
.text:00405790 arg_10          = dword ptr  14h
.text:00405790 arg_14          = dword ptr  18h
.text:00405790 arg_18          = dword ptr  1Ch
.text:00405790 arg_1C          = dword ptr  20h
.text:00405790
.text:00405790                 push    ebp
.text:00405791                 mov     eax, 0FFFFFFFFh
.text:00405796                 push    edi
.text:00405797                 push    esi
.text:00405798                 push    ebx
.text:00405799                 sub     esp, 4Ch
.text:0040579C                 mov     esi, [esp+5Ch+Str]
.text:004057A0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004057A4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004057A7                 mov     ebx, [ebp+4]
.text:004057AA                 setz    dl
.text:004057AD                 movzx   ecx, dl
.text:004057B0                 dec     ecx
.text:004057B1                 and     ecx, ebx
.text:004057B3                 mov     [esp+5Ch+var_14], ecx
.text:004057B7                 mov     ecx, [esp+5Ch+arg_0]
.text:004057BB                 test    ecx, ecx
.text:004057BD                 jle     loc_4058E7
.text:004057C3                 mov     dword ptr [ebp+0Ch], 0
.text:004057CA                 mov     ebx, [ebp+0]
.text:004057CD                 test    ebx, ebx
.text:004057CF                 jz      loc_406300
.text:004057D5                 mov     edi, [ebp+10h]
.text:004057D8                 test    edi, edi
.text:004057DA                 jnz     short loc_405833
.text:004057DC                 lea     esi, [esi+0]
.text:004057E0
.text:004057E0 loc_4057E0:                             ; CODE XREF: sub_405790+B7C↓j
.text:004057E0                 mov     [ebp+24h], ebx
.text:004057E3                 mov     esi, [esp+5Ch+Str]
.text:004057E7                 mov     [ebp+20h], ebx
.text:004057EA                 mov     ecx, [esp+5Ch+arg_18]
.text:004057EE                 xor     ebx, ebx
.text:004057F0                 mov     dword ptr [ebp+14h], 0
.text:004057F7                 test    ecx, ecx
.text:004057F9                 jz      loc_4062E0
.text:004057FF
.text:004057FF loc_4057FF:                             ; CODE XREF: sub_405790+B64↓j
.text:004057FF                 mov     ebx, 1
.text:00405804
.text:00405804 loc_405804:                             ; CODE XREF: sub_405790+B5E↓j
.text:00405804                 mov     [ebp+1Ch], ebx
.text:00405807                 mov     ecx, [esp+5Ch+Str]
.text:0040580B                 movzx   eax, byte ptr [ecx]
.text:0040580E                 cmp     al, 2Dh ; '-'
.text:00405810                 jz      loc_4062D0
.text:00405816                 cmp     al, 2Bh ; '+'
.text:00405818                 jz      loc_4062B9
.text:0040581E                 xor     edx, edx
.text:00405820                 test    ebx, ebx
.text:00405822                 setz    dl
.text:00405825                 mov     [ebp+18h], edx
.text:00405828
.text:00405828 loc_405828:                             ; CODE XREF: sub_405790+B35↓j
.text:00405828                 mov     [esp+5Ch+Str], esi
.text:0040582C                 mov     dword ptr [ebp+10h], 1
.text:00405833
.text:00405833 loc_405833:                             ; CODE XREF: sub_405790+4A↑j
.text:00405833                 mov     eax, [ebp+14h]
.text:00405836                 test    eax, eax
.text:00405838                 jz      short loc_405843
.text:0040583A                 cmp     byte ptr [eax], 0
.text:0040583D                 jnz     loc_405920
.text:00405843
.text:00405843 loc_405843:                             ; CODE XREF: sub_405790+A8↑j
.text:00405843                 mov     ebx, [ebp+0]
.text:00405846                 cmp     [ebp+24h], ebx
.text:00405849                 jle     short loc_40584E
.text:0040584B                 mov     [ebp+24h], ebx
.text:0040584E
.text:0040584E loc_40584E:                             ; CODE XREF: sub_405790+B9↑j
.text:0040584E                 cmp     [ebp+20h], ebx
.text:00405851                 jle     short loc_405856
.text:00405853                 mov     [ebp+20h], ebx
.text:00405856
.text:00405856 loc_405856:                             ; CODE XREF: sub_405790+C1↑j
.text:00405856                 cmp     dword ptr [ebp+18h], 1
.text:0040585A                 jz      loc_406230
.text:00405860
.text:00405860 loc_405860:                             ; CODE XREF: sub_405790+B13↓j
.text:00405860                 cmp     ebx, [esp+5Ch+arg_0]
.text:00405864                 jz      loc_406214
.text:0040586A                 cld
.text:0040586B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040586F                 mov     edx, 3
.text:00405874                 mov     edi, offset dword_405540
.text:00405879                 mov     esi, [ecx+ebx*4]
.text:0040587C                 mov     ecx, edx
.text:0040587E                 repe cmpsb
.text:00405880                 jnz     short loc_4058BC
.text:00405882                 mov     edx, [ebp+24h]
.text:00405885                 lea     eax, [ebx+1]
.text:00405888                 cmp     [ebp+20h], edx
.text:0040588B                 mov     [ebp+0], eax
.text:0040588E                 jz      loc_406228
.text:00405894                 cmp     edx, eax
.text:00405896                 jz      short loc_4058B0
.text:00405898                 mov     [esp+5Ch+Str2], ebp
.text:0040589C                 mov     ebx, [esp+5Ch+arg_4]
.text:004058A0                 mov     [esp+5Ch+Str1], ebx
.text:004058A3                 call    sub_406440
.text:004058A8                 nop
.text:004058A9                 lea     esi, [esi+0]
.text:004058B0
.text:004058B0 loc_4058B0:                             ; CODE XREF: sub_405790+106↑j
.text:004058B0                                         ; sub_405790+A9B↓j
.text:004058B0                 mov     eax, [esp+5Ch+arg_0]
.text:004058B4                 mov     ebx, eax
.text:004058B6                 mov     [ebp+24h], eax
.text:004058B9                 mov     [ebp+0], eax
.text:004058BC
.text:004058BC loc_4058BC:                             ; CODE XREF: sub_405790+F0↑j
.text:004058BC                 cmp     ebx, [esp+5Ch+arg_0]
.text:004058C0                 jz      loc_406214
.text:004058C6                 mov     esi, [esp+5Ch+arg_4]
.text:004058CA                 mov     eax, [esi+ebx*4]
.text:004058CD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004058D0                 jz      short loc_4058F7
.text:004058D2
.text:004058D2 loc_4058D2:                             ; CODE XREF: sub_405790+16D↓j
.text:004058D2                 mov     edx, [ebp+18h]
.text:004058D5                 test    edx, edx
.text:004058D7                 jz      short loc_4058F0
.text:004058D9                 mov     [ebp+0Ch], eax
.text:004058DC                 lea     edi, [ebx+1]
.text:004058DF                 mov     eax, 1
.text:004058E4                 mov     [ebp+0], edi
.text:004058E7
.text:004058E7 loc_4058E7:                             ; CODE XREF: sub_405790+2D↑j
.text:004058E7                                         ; sub_405790+165↓j ...
.text:004058E7                 add     esp, 4Ch
.text:004058EA                 pop     ebx
.text:004058EB                 pop     esi
.text:004058EC                 pop     edi
.text:004058ED                 pop     ebp
.text:004058EE                 retn
.text:004058EE ; ---------------------------------------------------------------------------
.text:004058EF                 align 10h
.text:004058F0
.text:004058F0 loc_4058F0:                             ; CODE XREF: sub_405790+147↑j
.text:004058F0                                         ; sub_405790+A8A↓j ...
.text:004058F0                 mov     eax, 0FFFFFFFFh
.text:004058F5                 jmp     short loc_4058E7
.text:004058F7 ; ---------------------------------------------------------------------------
.text:004058F7
.text:004058F7 loc_4058F7:                             ; CODE XREF: sub_405790+140↑j
.text:004058F7                 movzx   edx, byte ptr [eax+1]
.text:004058FB                 test    dl, dl
.text:004058FD                 jz      short loc_4058D2
.text:004058FF                 mov     ebx, [esp+5Ch+arg_C]
.text:00405903                 xor     ecx, ecx
.text:00405905                 test    ebx, ebx
.text:00405907                 jz      short loc_405912
.text:00405909                 cmp     dl, 2Dh ; '-'
.text:0040590C                 jz      loc_40620A
.text:00405912
.text:00405912 loc_405912:                             ; CODE XREF: sub_405790+177↑j
.text:00405912                                         ; sub_405790+A7F↓j
.text:00405912                 lea     esi, [ecx+eax+1]
.text:00405916                 mov     [ebp+14h], esi
.text:00405919                 lea     esi, [esi+0]
.text:00405920
.text:00405920 loc_405920:                             ; CODE XREF: sub_405790+AD↑j
.text:00405920                 mov     ecx, [esp+5Ch+arg_C]
.text:00405924                 test    ecx, ecx
.text:00405926                 jz      loc_405CB0
.text:0040592C                 mov     edx, [ebp+0]
.text:0040592F                 mov     edi, [esp+5Ch+arg_4]
.text:00405933                 mov     eax, [edi+edx*4]
.text:00405936                 movzx   edx, byte ptr [eax+1]
.text:0040593A                 cmp     dl, 2Dh ; '-'
.text:0040593D                 jz      short loc_405955
.text:0040593F                 mov     ebx, [esp+5Ch+arg_14]
.text:00405943                 test    ebx, ebx
.text:00405945                 jz      loc_405CB0
.text:0040594B                 cmp     byte ptr [eax+2], 0
.text:0040594F                 jz      loc_4061EA
.text:00405955
.text:00405955 loc_405955:                             ; CODE XREF: sub_405790+1AD↑j
.text:00405955                                         ; sub_405790+A75↓j
.text:00405955                 mov     [esp+5Ch+var_18], 0
.text:0040595D                 mov     ecx, [ebp+14h]
.text:00405960                 mov     [esp+5Ch+var_1C], 0
.text:00405968                 mov     [esp+5Ch+var_20], 0
.text:00405970                 mov     edi, ecx
.text:00405972                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040597A                 movzx   eax, byte ptr [ecx]
.text:0040597D                 test    al, al
.text:0040597F                 jz      short loc_40599C
.text:00405981                 cmp     al, 3Dh ; '='
.text:00405983                 jz      short loc_40599C
.text:00405985                 lea     esi, [esi+0]
.text:00405989                 lea     edi, [edi+0]
.text:00405990
.text:00405990 loc_405990:                             ; CODE XREF: sub_405790+20A↓j
.text:00405990                 inc     edi
.text:00405991                 movzx   eax, byte ptr [edi]
.text:00405994                 test    al, al
.text:00405996                 jz      short loc_40599C
.text:00405998                 cmp     al, 3Dh ; '='
.text:0040599A                 jnz     short loc_405990
.text:0040599C
.text:0040599C loc_40599C:                             ; CODE XREF: sub_405790+1EF↑j
.text:0040599C                                         ; sub_405790+1F3↑j ...
.text:0040599C                 mov     [esp+5Ch+var_28], 0
.text:004059A4                 mov     esi, [esp+5Ch+arg_C]
.text:004059A8                 mov     ebx, [esi]
.text:004059AA                 test    ebx, ebx
.text:004059AC                 mov     edx, ebx
.text:004059AE                 jz      loc_405BD0
.text:004059B4                 lea     esi, [esi+0]
.text:004059BA                 lea     edi, [edi+0]
.text:004059C0
.text:004059C0 loc_4059C0:                             ; CODE XREF: sub_405790+25E↓j
.text:004059C0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:004059C4                 mov     ebx, edi
.text:004059C6                 sub     ebx, ecx
.text:004059C8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:004059CC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004059CF                 call    strncmp
.text:004059D4                 test    eax, eax
.text:004059D6                 jz      loc_406166
.text:004059DC
.text:004059DC loc_4059DC:                             ; CODE XREF: sub_405790+A0F↓j
.text:004059DC                                         ; sub_405790+A24↓j ...
.text:004059DC                 inc     [esp+5Ch+var_28]
.text:004059E0                 add     esi, 10h
.text:004059E3                 mov     ecx, [esi]
.text:004059E5                 test    ecx, ecx
.text:004059E7                 mov     edx, ecx
.text:004059E9                 jz      short loc_4059F0
.text:004059EB                 mov     ecx, [ebp+14h]
.text:004059EE                 jmp     short loc_4059C0
.text:004059F0 ; ---------------------------------------------------------------------------
.text:004059F0
.text:004059F0 loc_4059F0:                             ; CODE XREF: sub_405790+259↑j
.text:004059F0                                         ; sub_405790+A55↓j
.text:004059F0                 mov     esi, [esp+5Ch+var_20]
.text:004059F4                 test    esi, esi
.text:004059F6                 jz      short loc_405A04
.text:004059F8                 mov     edx, [esp+5Ch+var_1C]
.text:004059FC                 test    edx, edx
.text:004059FE                 jz      loc_406110
.text:00405A04
.text:00405A04 loc_405A04:                             ; CODE XREF: sub_405790+266↑j
.text:00405A04                 mov     eax, [esp+5Ch+var_18]
.text:00405A08                 test    eax, eax
.text:00405A0A                 jz      loc_405BD0
.text:00405A10                 mov     ecx, [ebp+0]
.text:00405A13                 lea     eax, [ecx+1]
.text:00405A16                 mov     [ebp+0], eax
.text:00405A19                 cmp     byte ptr [edi], 0
.text:00405A1C                 jz      loc_405B30
.text:00405A22                 mov     ecx, [esp+5Ch+var_18]
.text:00405A26                 mov     esi, [ecx+4]
.text:00405A29                 test    esi, esi
.text:00405A2B                 jz      short loc_405A76
.text:00405A2D                 lea     ebx, [edi+1]
.text:00405A30                 mov     [ebp+0Ch], ebx
.text:00405A33
.text:00405A33 loc_405A33:                             ; CODE XREF: sub_405790+3A8↓j
.text:00405A33                                         ; sub_405790+3C4↓j
.text:00405A33                 mov     ebx, [ebp+14h]
.text:00405A36                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00405A39                 call    strlen
.text:00405A3E                 add     [ebp+14h], eax
.text:00405A41                 mov     esi, [esp+5Ch+arg_10]
.text:00405A45                 test    esi, esi
.text:00405A47                 jz      short loc_405A53
.text:00405A49                 mov     ebp, [esp+5Ch+var_24]
.text:00405A4D                 mov     ecx, [esp+5Ch+arg_10]
.text:00405A51                 mov     [ecx], ebp
.text:00405A53
.text:00405A53 loc_405A53:                             ; CODE XREF: sub_405790+2B7↑j
.text:00405A53                 mov     eax, [esp+5Ch+var_18]
.text:00405A57                 mov     ecx, [eax+8]
.text:00405A5A                 test    ecx, ecx
.text:00405A5C                 jnz     short loc_405A6A
.text:00405A5E                 mov     ecx, [esp+5Ch+var_18]
.text:00405A62
.text:00405A62 loc_405A62:                             ; CODE XREF: sub_405790+723↓j
.text:00405A62                 mov     eax, [ecx+0Ch]
.text:00405A65                 jmp     loc_4058E7
.text:00405A6A ; ---------------------------------------------------------------------------
.text:00405A6A
.text:00405A6A loc_405A6A:                             ; CODE XREF: sub_405790+2CC↑j
.text:00405A6A                                         ; sub_405790+719↓j
.text:00405A6A                 mov     esi, [eax+0Ch]
.text:00405A6D                 xor     eax, eax
.text:00405A6F                 mov     [ecx], esi
.text:00405A71                 jmp     loc_4058E7
.text:00405A76 ; ---------------------------------------------------------------------------
.text:00405A76
.text:00405A76 loc_405A76:                             ; CODE XREF: sub_405790+29B↑j
.text:00405A76                 mov     edi, [esp+5Ch+var_14]
.text:00405A7A                 test    edi, edi
.text:00405A7C                 jz      short loc_405AD0
.text:00405A7E                 mov     esi, [esp+5Ch+arg_4]
.text:00405A82                 mov     edx, [esi+eax*4-4]
.text:00405A86                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00405A8A                 jz      short loc_405AF2
.text:00405A8C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00405A93                 call    ds:libintl_gettext
.text:00405A99                 mov     edx, [esp+5Ch+var_18]
.text:00405A9D                 mov     edi, [edx]
.text:00405A9F                 mov     [esp+5Ch+var_4C], edi
.text:00405AA3                 mov     ebx, [ebp+0]
.text:00405AA6                 mov     edi, [esp+5Ch+arg_4]
.text:00405AAA                 mov     ecx, [edi+ebx*4-4]
.text:00405AAE                 movsx   esi, byte ptr [ecx]
.text:00405AB1                 mov     ecx, ds:_iob
.text:00405AB7                 add     ecx, 40h ; '@'
.text:00405ABA                 mov     [esp+5Ch+var_50], esi
.text:00405ABE                 mov     ebx, [edi]
.text:00405AC0                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405AC4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00405AC7                 mov     [esp+5Ch+MaxCount], ebx
.text:00405ACB                 call    fprintf
.text:00405AD0
.text:00405AD0 loc_405AD0:                             ; CODE XREF: sub_405790+2EC↑j
.text:00405AD0                                         ; sub_405790+398↓j
.text:00405AD0                 mov     ecx, [ebp+14h]
.text:00405AD3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00405AD6                 call    strlen
.text:00405ADB                 add     [ebp+14h], eax
.text:00405ADE                 mov     eax, [esp+5Ch+var_18]
.text:00405AE2                 mov     esi, [eax+0Ch]
.text:00405AE5                 mov     [ebp+8], esi
.text:00405AE8
.text:00405AE8 loc_405AE8:                             ; CODE XREF: sub_405790+4E5↓j
.text:00405AE8                                         ; sub_405790+73E↓j ...
.text:00405AE8                 mov     eax, 3Fh ; '?'
.text:00405AED                 jmp     loc_4058E7
.text:00405AF2 ; ---------------------------------------------------------------------------
.text:00405AF2
.text:00405AF2 loc_405AF2:                             ; CODE XREF: sub_405790+2FA↑j
.text:00405AF2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00405AF9                 call    ds:libintl_gettext
.text:00405AFF                 mov     edx, [esp+5Ch+var_18]
.text:00405B03                 mov     edi, [esp+5Ch+arg_4]
.text:00405B07                 mov     ecx, ds:_iob
.text:00405B0D                 mov     esi, [edx]
.text:00405B0F                 add     ecx, 40h ; '@'
.text:00405B12                 mov     [esp+5Ch+var_50], esi
.text:00405B16                 mov     ebx, [edi]
.text:00405B18                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405B1C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00405B1F                 mov     [esp+5Ch+MaxCount], ebx
.text:00405B23                 call    fprintf
.text:00405B28                 jmp     short loc_405AD0
.text:00405B28 ; ---------------------------------------------------------------------------
.text:00405B2A                 align 10h
.text:00405B30
.text:00405B30 loc_405B30:                             ; CODE XREF: sub_405790+28C↑j
.text:00405B30                 mov     ebx, [esp+5Ch+var_18]
.text:00405B34                 cmp     dword ptr [ebx+4], 1
.text:00405B38                 jnz     loc_405A33
.text:00405B3E                 cmp     eax, [esp+5Ch+arg_0]
.text:00405B42                 jge     short loc_405B59
.text:00405B44                 mov     ebx, [esp+5Ch+arg_4]
.text:00405B48                 lea     edi, [ecx+2]
.text:00405B4B                 mov     [ebp+0], edi
.text:00405B4E                 mov     esi, [ebx+eax*4]
.text:00405B51                 mov     [ebp+0Ch], esi
.text:00405B54                 jmp     loc_405A33
.text:00405B59 ; ---------------------------------------------------------------------------
.text:00405B59
.text:00405B59 loc_405B59:                             ; CODE XREF: sub_405790+3B2↑j
.text:00405B59                 mov     edx, [esp+5Ch+var_14]
.text:00405B5D                 test    edx, edx
.text:00405B5F                 jnz     short loc_405B90
.text:00405B61
.text:00405B61 loc_405B61:                             ; CODE XREF: sub_405790+437↓j
.text:00405B61                 mov     edx, [ebp+14h]
.text:00405B64                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405B67                 call    strlen
.text:00405B6C                 add     [ebp+14h], eax
.text:00405B6F                 mov     eax, [esp+5Ch+var_18]
.text:00405B73                 mov     edi, [eax+0Ch]
.text:00405B76                 mov     [ebp+8], edi
.text:00405B79
.text:00405B79 loc_405B79:                             ; CODE XREF: sub_405790+7C2↓j
.text:00405B79                 mov     ebp, [esp+5Ch+Str]
.text:00405B7D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00405B81                 setnz   bl
.text:00405B84                 movzx   esi, bl
.text:00405B87                 lea     eax, [esi+esi*4+3Ah]
.text:00405B8B                 jmp     loc_4058E7
.text:00405B90 ; ---------------------------------------------------------------------------
.text:00405B90
.text:00405B90 loc_405B90:                             ; CODE XREF: sub_405790+3CF↑j
.text:00405B90                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00405B97                 call    ds:libintl_gettext
.text:00405B9D                 mov     ecx, [ebp+0]
.text:00405BA0                 mov     esi, [esp+5Ch+arg_4]
.text:00405BA4                 mov     ebx, [esi+ecx*4-4]
.text:00405BA8                 mov     ecx, ds:_iob
.text:00405BAE                 mov     [esp+5Ch+var_50], ebx
.text:00405BB2                 mov     edi, [esi]
.text:00405BB4                 add     ecx, 40h ; '@'
.text:00405BB7                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405BBB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00405BBE                 mov     [esp+5Ch+MaxCount], edi
.text:00405BC2                 call    fprintf
.text:00405BC7                 jmp     short loc_405B61
.text:00405BC7 ; ---------------------------------------------------------------------------
.text:00405BC9                 align 10h
.text:00405BD0
.text:00405BD0 loc_405BD0:                             ; CODE XREF: sub_405790+21E↑j
.text:00405BD0                                         ; sub_405790+27A↑j
.text:00405BD0                 mov     eax, [esp+5Ch+arg_14]
.text:00405BD4                 test    eax, eax
.text:00405BD6                 jz      short loc_405C06
.text:00405BD8                 mov     ebx, [ebp+0]
.text:00405BDB                 mov     esi, [esp+5Ch+arg_4]
.text:00405BDF                 mov     edi, [esi+ebx*4]
.text:00405BE2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00405BE6                 jz      short loc_405C09
.text:00405BE8                 mov     ecx, [ebp+14h]
.text:00405BEB                 mov     edx, [esp+5Ch+Str]
.text:00405BEF                 movsx   ebx, byte ptr [ecx]
.text:00405BF2                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405BF5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00405BF9                 call    strchr
.text:00405BFE                 test    eax, eax
.text:00405C00                 jnz     loc_405CB0
.text:00405C06
.text:00405C06 loc_405C06:                             ; CODE XREF: sub_405790+446↑j
.text:00405C06                 mov     ebx, [ebp+0]
.text:00405C09
.text:00405C09 loc_405C09:                             ; CODE XREF: sub_405790+456↑j
.text:00405C09                 mov     eax, [esp+5Ch+var_14]
.text:00405C0D                 test    eax, eax
.text:00405C0F                 jz      short loc_405C61
.text:00405C11                 mov     esi, [esp+5Ch+arg_4]
.text:00405C15                 mov     edi, [esi+ebx*4]
.text:00405C18                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00405C1C                 jz      short loc_405C7A
.text:00405C1E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00405C25                 call    ds:libintl_gettext
.text:00405C2B                 mov     edi, [ebp+14h]
.text:00405C2E                 mov     [esp+5Ch+var_4C], edi
.text:00405C32                 mov     ebx, [ebp+0]
.text:00405C35                 mov     edi, [esp+5Ch+arg_4]
.text:00405C39                 mov     esi, [edi+ebx*4]
.text:00405C3C                 movsx   ecx, byte ptr [esi]
.text:00405C3F                 mov     esi, ds:_iob
.text:00405C45                 add     esi, 40h ; '@'
.text:00405C48                 mov     [esp+5Ch+var_50], ecx
.text:00405C4C                 mov     ebx, [edi]
.text:00405C4E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405C52                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00405C55                 mov     [esp+5Ch+MaxCount], ebx
.text:00405C59                 call    fprintf
.text:00405C5E
.text:00405C5E loc_405C5E:                             ; CODE XREF: sub_405790+51D↓j
.text:00405C5E                 mov     ebx, [ebp+0]
.text:00405C61
.text:00405C61 loc_405C61:                             ; CODE XREF: sub_405790+47F↑j
.text:00405C61                 mov     dword ptr [ebp+14h], offset dword_405640
.text:00405C68                 lea     edx, [ebx+1]
.text:00405C6B                 mov     [ebp+0], edx
.text:00405C6E
.text:00405C6E loc_405C6E:                             ; CODE XREF: sub_405790+999↓j
.text:00405C6E                 mov     dword ptr [ebp+8], 0
.text:00405C75                 jmp     loc_405AE8
.text:00405C7A ; ---------------------------------------------------------------------------
.text:00405C7A
.text:00405C7A loc_405C7A:                             ; CODE XREF: sub_405790+48C↑j
.text:00405C7A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00405C81                 call    ds:libintl_gettext
.text:00405C87                 mov     ecx, [ebp+14h]
.text:00405C8A                 mov     edi, [esp+5Ch+arg_4]
.text:00405C8E                 mov     edx, ds:_iob
.text:00405C94                 mov     [esp+5Ch+var_50], ecx
.text:00405C98                 mov     ebx, [edi]
.text:00405C9A                 add     edx, 40h ; '@'
.text:00405C9D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405CA1                 mov     [esp+5Ch+MaxCount], ebx
.text:00405CA5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00405CA8                 call    fprintf
.text:00405CAD                 jmp     short loc_405C5E
.text:00405CAD ; ---------------------------------------------------------------------------
.text:00405CAF                 align 10h
.text:00405CB0
.text:00405CB0 loc_405CB0:                             ; CODE XREF: sub_405790+196↑j
.text:00405CB0                                         ; sub_405790+1B5↑j ...
.text:00405CB0                 mov     esi, [ebp+14h]
.text:00405CB3                 movzx   ebx, byte ptr [esi]
.text:00405CB6                 inc     esi
.text:00405CB7                 mov     [ebp+14h], esi
.text:00405CBA                 mov     ecx, [esp+5Ch+Str]
.text:00405CBE                 movsx   esi, bl
.text:00405CC1                 mov     [esp+5Ch+Str2], esi ; Val
.text:00405CC5                 mov     edi, esi
.text:00405CC7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00405CCA                 call    strchr
.text:00405CCF                 mov     ecx, [ebp+14h]
.text:00405CD2                 cmp     byte ptr [ecx], 0
.text:00405CD5                 jnz     short loc_405CDA
.text:00405CD7                 inc     dword ptr [ebp+0]
.text:00405CDA
.text:00405CDA loc_405CDA:                             ; CODE XREF: sub_405790+545↑j
.text:00405CDA                 test    eax, eax
.text:00405CDC                 jz      loc_4060C0
.text:00405CE2                 cmp     bl, 3Ah ; ':'
.text:00405CE5                 jz      loc_4060C0
.text:00405CEB                 cmp     byte ptr [eax], 57h ; 'W'
.text:00405CEE                 jz      loc_405DA6
.text:00405CF4                 movzx   edx, byte ptr [eax+1]
.text:00405CF8
.text:00405CF8 loc_405CF8:                             ; CODE XREF: sub_405790+61D↓j
.text:00405CF8                 cmp     dl, 3Ah ; ':'
.text:00405CFB                 jz      short loc_405D04
.text:00405CFD
.text:00405CFD loc_405CFD:                             ; CODE XREF: sub_405790+590↓j
.text:00405CFD                 mov     eax, esi
.text:00405CFF                 jmp     loc_4058E7
.text:00405D04 ; ---------------------------------------------------------------------------
.text:00405D04
.text:00405D04 loc_405D04:                             ; CODE XREF: sub_405790+56B↑j
.text:00405D04                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00405D08                 jz      loc_405D91
.text:00405D0E                 cmp     byte ptr [ecx], 0
.text:00405D11                 jz      short loc_405D22
.text:00405D13
.text:00405D13 loc_405D13:                             ; CODE XREF: sub_405790+604↓j
.text:00405D13                 inc     dword ptr [ebp+0]
.text:00405D16                 mov     [ebp+0Ch], ecx
.text:00405D19
.text:00405D19 loc_405D19:                             ; CODE XREF: sub_405790+5AB↓j
.text:00405D19                                         ; sub_405790+5C6↓j ...
.text:00405D19                 mov     dword ptr [ebp+14h], 0
.text:00405D20                 jmp     short loc_405CFD
.text:00405D22 ; ---------------------------------------------------------------------------
.text:00405D22
.text:00405D22 loc_405D22:                             ; CODE XREF: sub_405790+581↑j
.text:00405D22                 mov     ecx, [ebp+0]
.text:00405D25                 cmp     ecx, [esp+5Ch+arg_0]
.text:00405D29                 jz      short loc_405D3D
.text:00405D2B                 mov     eax, [esp+5Ch+arg_4]
.text:00405D2F                 lea     edx, [ecx+1]
.text:00405D32                 mov     [ebp+0], edx
.text:00405D35                 mov     ebx, [eax+ecx*4]
.text:00405D38                 mov     [ebp+0Ch], ebx
.text:00405D3B                 jmp     short loc_405D19
.text:00405D3D ; ---------------------------------------------------------------------------
.text:00405D3D
.text:00405D3D loc_405D3D:                             ; CODE XREF: sub_405790+599↑j
.text:00405D3D                 mov     ecx, [esp+5Ch+var_14]
.text:00405D41                 test    ecx, ecx
.text:00405D43                 jnz     short loc_405D5F
.text:00405D45
.text:00405D45 loc_405D45:                             ; CODE XREF: sub_405790+5FF↓j
.text:00405D45                 mov     [ebp+8], edi
.text:00405D48                 mov     edi, [esp+5Ch+Str]
.text:00405D4C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00405D4F                 jz      short loc_405D58
.text:00405D51                 mov     esi, 3Fh ; '?'
.text:00405D56                 jmp     short loc_405D19
.text:00405D58 ; ---------------------------------------------------------------------------
.text:00405D58
.text:00405D58 loc_405D58:                             ; CODE XREF: sub_405790+5BF↑j
.text:00405D58                 mov     esi, 3Ah ; ':'
.text:00405D5D                 jmp     short loc_405D19
.text:00405D5F ; ---------------------------------------------------------------------------
.text:00405D5F
.text:00405D5F loc_405D5F:                             ; CODE XREF: sub_405790+5B3↑j
.text:00405D5F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00405D66                 call    ds:libintl_gettext
.text:00405D6C                 mov     [esp+5Ch+var_50], edi
.text:00405D70                 mov     ebx, [esp+5Ch+arg_4]
.text:00405D74                 mov     edx, ds:_iob
.text:00405D7A                 mov     esi, [ebx]
.text:00405D7C                 add     edx, 40h ; '@'
.text:00405D7F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405D83                 mov     [esp+5Ch+MaxCount], esi
.text:00405D87                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00405D8A                 call    fprintf
.text:00405D8F                 jmp     short loc_405D45
.text:00405D91 ; ---------------------------------------------------------------------------
.text:00405D91
.text:00405D91 loc_405D91:                             ; CODE XREF: sub_405790+578↑j
.text:00405D91                 cmp     byte ptr [ecx], 0
.text:00405D94                 jnz     loc_405D13
.text:00405D9A                 mov     dword ptr [ebp+0Ch], 0
.text:00405DA1                 jmp     loc_405D19
.text:00405DA6 ; ---------------------------------------------------------------------------
.text:00405DA6
.text:00405DA6 loc_405DA6:                             ; CODE XREF: sub_405790+55E↑j
.text:00405DA6                 movzx   edx, byte ptr [eax+1]
.text:00405DAA                 cmp     dl, 3Bh ; ';'
.text:00405DAD                 jnz     loc_405CF8
.text:00405DB3                 mov     [esp+5Ch+var_2C], 0
.text:00405DBB                 mov     [esp+5Ch+var_30], 0
.text:00405DC3                 mov     [esp+5Ch+var_34], 0
.text:00405DCB                 mov     [esp+5Ch+var_38], 0
.text:00405DD3                 cmp     byte ptr [ecx], 0
.text:00405DD6                 jz      loc_40604B
.text:00405DDC                 inc     dword ptr [ebp+0]
.text:00405DDF                 mov     [ebp+0Ch], ecx
.text:00405DE2
.text:00405DE2 loc_405DE2:                             ; CODE XREF: sub_405790+8D4↓j
.text:00405DE2                 mov     edi, [ebp+0Ch]
.text:00405DE5                 mov     [ebp+14h], edi
.text:00405DE8                 movzx   eax, byte ptr [edi]
.text:00405DEB                 test    al, al
.text:00405DED                 jz      short loc_405DFF
.text:00405DEF                 cmp     al, 3Dh ; '='
.text:00405DF1                 jz      short loc_405DFF
.text:00405DF3
.text:00405DF3 loc_405DF3:                             ; CODE XREF: sub_405790+66D↓j
.text:00405DF3                 inc     edi
.text:00405DF4                 movzx   eax, byte ptr [edi]
.text:00405DF7                 test    al, al
.text:00405DF9                 jz      short loc_405DFF
.text:00405DFB                 cmp     al, 3Dh ; '='
.text:00405DFD                 jnz     short loc_405DF3
.text:00405DFF
.text:00405DFF loc_405DFF:                             ; CODE XREF: sub_405790+65D↑j
.text:00405DFF                                         ; sub_405790+661↑j ...
.text:00405DFF                 mov     [esp+5Ch+var_3C], 0
.text:00405E07                 mov     esi, [esp+5Ch+arg_C]
.text:00405E0B                 mov     eax, [esi]
.text:00405E0D                 test    eax, eax
.text:00405E0F                 jz      loc_405F90
.text:00405E15                 mov     ecx, eax
.text:00405E17
.text:00405E17 loc_405E17:                             ; CODE XREF: sub_405790+6B3↓j
.text:00405E17                 mov     ebx, [ebp+14h]
.text:00405E1A                 mov     eax, edi
.text:00405E1C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:00405E1F                 sub     eax, ebx
.text:00405E21                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00405E25                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00405E29                 call    strncmp
.text:00405E2E                 test    eax, eax
.text:00405E30                 jz      loc_405FF7
.text:00405E36
.text:00405E36 loc_405E36:                             ; CODE XREF: sub_405790+88C↓j
.text:00405E36                                         ; sub_405790+89D↓j
.text:00405E36                 inc     [esp+5Ch+var_3C]
.text:00405E3A                 add     esi, 10h
.text:00405E3D                 mov     edx, [esi]
.text:00405E3F                 test    edx, edx
.text:00405E41                 mov     ecx, edx
.text:00405E43                 jnz     short loc_405E17
.text:00405E45
.text:00405E45 loc_405E45:                             ; CODE XREF: sub_405790+8B6↓j
.text:00405E45                 mov     esi, [esp+5Ch+var_34]
.text:00405E49                 test    esi, esi
.text:00405E4B                 jz      short loc_405E59
.text:00405E4D                 mov     ebx, [esp+5Ch+var_30]
.text:00405E51                 test    ebx, ebx
.text:00405E53                 jz      loc_405FA1
.text:00405E59
.text:00405E59 loc_405E59:                             ; CODE XREF: sub_405790+6BB↑j
.text:00405E59                 mov     esi, [esp+5Ch+var_2C]
.text:00405E5D                 test    esi, esi
.text:00405E5F                 jz      loc_405F90
.text:00405E65                 cmp     byte ptr [edi], 0
.text:00405E68                 jz      loc_405F10
.text:00405E6E                 mov     ecx, [esp+5Ch+var_2C]
.text:00405E72                 mov     ebx, [ecx+4]
.text:00405E75                 test    ebx, ebx
.text:00405E77                 jz      short loc_405EB8
.text:00405E79                 lea     edx, [edi+1]
.text:00405E7C                 mov     [ebp+0Ch], edx
.text:00405E7F
.text:00405E7F loc_405E7F:                             ; CODE XREF: sub_405790+788↓j
.text:00405E7F                                         ; sub_405790+7A7↓j
.text:00405E7F                 mov     edi, [ebp+14h]
.text:00405E82                 mov     [esp+5Ch+Str1], edi ; Str
.text:00405E85                 call    strlen
.text:00405E8A                 add     [ebp+14h], eax
.text:00405E8D                 mov     eax, [esp+5Ch+arg_10]
.text:00405E91                 test    eax, eax
.text:00405E93                 jz      short loc_405EA0
.text:00405E95                 mov     edx, [esp+5Ch+var_38]
.text:00405E99                 mov     ebp, [esp+5Ch+arg_10]
.text:00405E9D                 mov     [ebp+0], edx
.text:00405EA0
.text:00405EA0 loc_405EA0:                             ; CODE XREF: sub_405790+703↑j
.text:00405EA0                 mov     eax, [esp+5Ch+var_2C]
.text:00405EA4                 mov     ecx, [eax+8]
.text:00405EA7                 test    ecx, ecx
.text:00405EA9                 jnz     loc_405A6A
.text:00405EAF                 mov     ecx, [esp+5Ch+var_2C]
.text:00405EB3                 jmp     loc_405A62
.text:00405EB8 ; ---------------------------------------------------------------------------
.text:00405EB8
.text:00405EB8 loc_405EB8:                             ; CODE XREF: sub_405790+6E7↑j
.text:00405EB8                 mov     eax, [esp+5Ch+var_14]
.text:00405EBC                 test    eax, eax
.text:00405EBE                 jnz     short loc_405ED3
.text:00405EC0
.text:00405EC0 loc_405EC0:                             ; CODE XREF: sub_405790+779↓j
.text:00405EC0                 mov     ecx, [ebp+14h]
.text:00405EC3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00405EC6                 call    strlen
.text:00405ECB                 add     [ebp+14h], eax
.text:00405ECE                 jmp     loc_405AE8
.text:00405ED3 ; ---------------------------------------------------------------------------
.text:00405ED3
.text:00405ED3 loc_405ED3:                             ; CODE XREF: sub_405790+72E↑j
.text:00405ED3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:00405EDA                 call    ds:libintl_gettext
.text:00405EE0                 mov     edx, [esp+5Ch+var_2C]
.text:00405EE4                 mov     ebx, [esp+5Ch+arg_4]
.text:00405EE8                 mov     edi, [edx]
.text:00405EEA                 mov     [esp+5Ch+var_50], edi
.text:00405EEE                 mov     edi, ds:_iob
.text:00405EF4                 mov     esi, [ebx]
.text:00405EF6                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405EFA                 add     edi, 40h ; '@'
.text:00405EFD                 mov     [esp+5Ch+MaxCount], esi
.text:00405F01                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00405F04                 call    fprintf
.text:00405F09                 jmp     short loc_405EC0
.text:00405F09 ; ---------------------------------------------------------------------------
.text:00405F0B                 align 10h
.text:00405F10
.text:00405F10 loc_405F10:                             ; CODE XREF: sub_405790+6D8↑j
.text:00405F10                 mov     esi, [esp+5Ch+var_2C]
.text:00405F14                 cmp     dword ptr [esi+4], 1
.text:00405F18                 jnz     loc_405E7F
.text:00405F1E                 mov     ecx, [ebp+0]
.text:00405F21                 cmp     ecx, [esp+5Ch+arg_0]
.text:00405F25                 jge     short loc_405F3C
.text:00405F27                 mov     eax, [esp+5Ch+arg_4]
.text:00405F2B                 lea     ebx, [ecx+1]
.text:00405F2E                 mov     [ebp+0], ebx
.text:00405F31                 mov     edi, [eax+ecx*4]
.text:00405F34                 mov     [ebp+0Ch], edi
.text:00405F37                 jmp     loc_405E7F
.text:00405F3C ; ---------------------------------------------------------------------------
.text:00405F3C
.text:00405F3C loc_405F3C:                             ; CODE XREF: sub_405790+795↑j
.text:00405F3C                 mov     edx, [esp+5Ch+var_14]
.text:00405F40                 test    edx, edx
.text:00405F42                 jnz     short loc_405F57
.text:00405F44
.text:00405F44 loc_405F44:                             ; CODE XREF: sub_405790+7FE↓j
.text:00405F44                 mov     edx, [ebp+14h]
.text:00405F47                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405F4A                 call    strlen
.text:00405F4F                 add     [ebp+14h], eax
.text:00405F52                 jmp     loc_405B79
.text:00405F57 ; ---------------------------------------------------------------------------
.text:00405F57
.text:00405F57 loc_405F57:                             ; CODE XREF: sub_405790+7B2↑j
.text:00405F57                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00405F5E                 call    ds:libintl_gettext
.text:00405F64                 mov     ecx, [ebp+0]
.text:00405F67                 mov     ebx, [esp+5Ch+arg_4]
.text:00405F6B                 mov     edi, [ebx+ecx*4-4]
.text:00405F6F                 mov     ecx, ds:_iob
.text:00405F75                 mov     [esp+5Ch+var_50], edi
.text:00405F79                 mov     esi, [ebx]
.text:00405F7B                 add     ecx, 40h ; '@'
.text:00405F7E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405F82                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00405F85                 mov     [esp+5Ch+MaxCount], esi
.text:00405F89                 call    fprintf
.text:00405F8E                 jmp     short loc_405F44
.text:00405F90 ; ---------------------------------------------------------------------------
.text:00405F90
.text:00405F90 loc_405F90:                             ; CODE XREF: sub_405790+67F↑j
.text:00405F90                                         ; sub_405790+6CF↑j
.text:00405F90                 mov     dword ptr [ebp+14h], 0
.text:00405F97                 mov     eax, 57h ; 'W'
.text:00405F9C                 jmp     loc_4058E7
.text:00405FA1 ; ---------------------------------------------------------------------------
.text:00405FA1
.text:00405FA1 loc_405FA1:                             ; CODE XREF: sub_405790+6C3↑j
.text:00405FA1                 mov     edi, [esp+5Ch+var_14]
.text:00405FA5                 test    edi, edi
.text:00405FA7                 jnz     short loc_405FBF
.text:00405FA9
.text:00405FA9 loc_405FA9:                             ; CODE XREF: sub_405790+865↓j
.text:00405FA9                 mov     edx, [ebp+14h]
.text:00405FAC                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405FAF                 call    strlen
.text:00405FB4                 add     [ebp+14h], eax
.text:00405FB7                 inc     dword ptr [ebp+0]
.text:00405FBA                 jmp     loc_405AE8
.text:00405FBF ; ---------------------------------------------------------------------------
.text:00405FBF
.text:00405FBF loc_405FBF:                             ; CODE XREF: sub_405790+817↑j
.text:00405FBF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00405FC6                 call    ds:libintl_gettext
.text:00405FCC                 mov     ecx, [ebp+0]
.text:00405FCF                 mov     ebx, [esp+5Ch+arg_4]
.text:00405FD3                 mov     edi, [ebx+ecx*4]
.text:00405FD6                 mov     ecx, ds:_iob
.text:00405FDC                 mov     [esp+5Ch+var_50], edi
.text:00405FE0                 mov     esi, [ebx]
.text:00405FE2                 add     ecx, 40h ; '@'
.text:00405FE5                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405FE9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00405FEC                 mov     [esp+5Ch+MaxCount], esi
.text:00405FF0                 call    fprintf
.text:00405FF5                 jmp     short loc_405FA9
.text:00405FF7 ; ---------------------------------------------------------------------------
.text:00405FF7
.text:00405FF7 loc_405FF7:                             ; CODE XREF: sub_405790+6A0↑j
.text:00405FF7                 mov     edx, [ebp+14h]
.text:00405FFA                 mov     ebx, edi
.text:00405FFC                 mov     ecx, [esi]
.text:00405FFE                 sub     ebx, edx
.text:00406000                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00406003                 call    strlen
.text:00406008                 cmp     ebx, eax
.text:0040600A                 jz      short loc_406032
.text:0040600C                 mov     ebx, [esp+5Ch+var_2C]
.text:00406010                 test    ebx, ebx
.text:00406012                 jz      short loc_406021
.text:00406014                 mov     [esp+5Ch+var_34], 1
.text:0040601C                 jmp     loc_405E36
.text:00406021 ; ---------------------------------------------------------------------------
.text:00406021
.text:00406021 loc_406021:                             ; CODE XREF: sub_405790+882↑j
.text:00406021                 mov     [esp+5Ch+var_2C], esi
.text:00406025                 mov     ecx, [esp+5Ch+var_3C]
.text:00406029                 mov     [esp+5Ch+var_38], ecx
.text:0040602D                 jmp     loc_405E36
.text:00406032 ; ---------------------------------------------------------------------------
.text:00406032
.text:00406032 loc_406032:                             ; CODE XREF: sub_405790+87A↑j
.text:00406032                 mov     [esp+5Ch+var_2C], esi
.text:00406036                 mov     eax, [esp+5Ch+var_3C]
.text:0040603A                 mov     [esp+5Ch+var_30], 1
.text:00406042                 mov     [esp+5Ch+var_38], eax
.text:00406046                 jmp     loc_405E45
.text:0040604B ; ---------------------------------------------------------------------------
.text:0040604B
.text:0040604B loc_40604B:                             ; CODE XREF: sub_405790+646↑j
.text:0040604B                 mov     edx, [ebp+0]
.text:0040604E                 cmp     edx, [esp+5Ch+arg_0]
.text:00406052                 jz      short loc_406069
.text:00406054                 mov     ebx, [esp+5Ch+arg_4]
.text:00406058                 lea     esi, [edx+1]
.text:0040605B                 mov     [ebp+0], esi
.text:0040605E                 mov     edi, [ebx+edx*4]
.text:00406061                 mov     [ebp+0Ch], edi
.text:00406064                 jmp     loc_405DE2
.text:00406069 ; ---------------------------------------------------------------------------
.text:00406069
.text:00406069 loc_406069:                             ; CODE XREF: sub_405790+8C2↑j
.text:00406069                 mov     edi, [esp+5Ch+var_14]
.text:0040606D                 test    edi, edi
.text:0040606F                 jnz     short loc_40608C
.text:00406071
.text:00406071 loc_406071:                             ; CODE XREF: sub_405790+92C↓j
.text:00406071                 mov     [ebp+8], esi
.text:00406074                 mov     ebp, [esp+5Ch+Str]
.text:00406078                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040607C                 jz      short loc_406088
.text:0040607E                 mov     bl, 3Fh ; '?'
.text:00406080
.text:00406080 loc_406080:                             ; CODE XREF: sub_405790+8FA↓j
.text:00406080                 movsx   eax, bl
.text:00406083                 jmp     loc_4058E7
.text:00406088 ; ---------------------------------------------------------------------------
.text:00406088
.text:00406088 loc_406088:                             ; CODE XREF: sub_405790+8EC↑j
.text:00406088                 mov     bl, 3Ah ; ':'
.text:0040608A                 jmp     short loc_406080
.text:0040608C ; ---------------------------------------------------------------------------
.text:0040608C
.text:0040608C loc_40608C:                             ; CODE XREF: sub_405790+8DF↑j
.text:0040608C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00406093                 call    ds:libintl_gettext
.text:00406099                 mov     [esp+5Ch+var_50], esi
.text:0040609D                 mov     edx, [esp+5Ch+arg_4]
.text:004060A1                 mov     ecx, ds:_iob
.text:004060A7                 mov     ebx, [edx]
.text:004060A9                 add     ecx, 40h ; '@'
.text:004060AC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004060B0                 mov     [esp+5Ch+MaxCount], ebx
.text:004060B4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004060B7                 call    fprintf
.text:004060BC                 jmp     short loc_406071
.text:004060BC ; ---------------------------------------------------------------------------
.text:004060BE                 align 10h
.text:004060C0
.text:004060C0 loc_4060C0:                             ; CODE XREF: sub_405790+54C↑j
.text:004060C0                                         ; sub_405790+555↑j
.text:004060C0                 mov     eax, [esp+5Ch+var_14]
.text:004060C4                 test    eax, eax
.text:004060C6                 jz      short loc_4060FF
.text:004060C8                 mov     ebx, [ebp+1Ch]
.text:004060CB                 test    ebx, ebx
.text:004060CD                 jz      short loc_406107
.text:004060CF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:004060D6
.text:004060D6 loc_4060D6:                             ; CODE XREF: sub_405790+97E↓j
.text:004060D6                 call    ds:libintl_gettext
.text:004060DC                 mov     [esp+5Ch+var_50], esi
.text:004060E0                 mov     ebx, [esp+5Ch+arg_4]
.text:004060E4                 mov     edx, ds:_iob
.text:004060EA                 mov     esi, [ebx]
.text:004060EC                 add     edx, 40h ; '@'
.text:004060EF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004060F3                 mov     [esp+5Ch+MaxCount], esi
.text:004060F7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004060FA                 call    fprintf
.text:004060FF
.text:004060FF loc_4060FF:                             ; CODE XREF: sub_405790+936↑j
.text:004060FF                 mov     [ebp+8], edi
.text:00406102                 jmp     loc_405AE8
.text:00406107 ; ---------------------------------------------------------------------------
.text:00406107
.text:00406107 loc_406107:                             ; CODE XREF: sub_405790+93D↑j
.text:00406107                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040610E                 jmp     short loc_4060D6
.text:00406110 ; ---------------------------------------------------------------------------
.text:00406110
.text:00406110 loc_406110:                             ; CODE XREF: sub_405790+26E↑j
.text:00406110                 mov     edi, [esp+5Ch+var_14]
.text:00406114                 test    edi, edi
.text:00406116                 jnz     short loc_40612E
.text:00406118
.text:00406118 loc_406118:                             ; CODE XREF: sub_405790+9D4↓j
.text:00406118                 mov     edx, [ebp+14h]
.text:0040611B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040611E                 call    strlen
.text:00406123                 add     [ebp+14h], eax
.text:00406126                 inc     dword ptr [ebp+0]
.text:00406129                 jmp     loc_405C6E
.text:0040612E ; ---------------------------------------------------------------------------
.text:0040612E
.text:0040612E loc_40612E:                             ; CODE XREF: sub_405790+986↑j
.text:0040612E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00406135                 call    ds:libintl_gettext
.text:0040613B                 mov     ebx, [ebp+0]
.text:0040613E                 mov     edi, [esp+5Ch+arg_4]
.text:00406142                 mov     ecx, [edi+ebx*4]
.text:00406145                 mov     ebx, ds:_iob
.text:0040614B                 mov     [esp+5Ch+var_50], ecx
.text:0040614F                 mov     esi, [edi]
.text:00406151                 add     ebx, 40h ; '@'
.text:00406154                 mov     [esp+5Ch+Str2], eax ; Format
.text:00406158                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040615B                 mov     [esp+5Ch+MaxCount], esi
.text:0040615F                 call    fprintf
.text:00406164                 jmp     short loc_406118
.text:00406166 ; ---------------------------------------------------------------------------
.text:00406166
.text:00406166 loc_406166:                             ; CODE XREF: sub_405790+246↑j
.text:00406166                 mov     ecx, [ebp+14h]
.text:00406169                 mov     ebx, edi
.text:0040616B                 mov     edx, [esi]
.text:0040616D                 sub     ebx, ecx
.text:0040616F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00406172                 call    strlen
.text:00406177                 cmp     ebx, eax
.text:00406179                 jz      short loc_4061D1
.text:0040617B                 mov     ebx, [esp+5Ch+var_18]
.text:0040617F                 test    ebx, ebx
.text:00406181                 jz      short loc_4061C0
.text:00406183                 mov     edx, [esp+5Ch+arg_14]
.text:00406187                 test    edx, edx
.text:00406189                 jnz     short loc_406197
.text:0040618B                 mov     ecx, [esp+5Ch+var_18]
.text:0040618F                 mov     ebx, [esi+4]
.text:00406192                 cmp     [ecx+4], ebx
.text:00406195                 jz      short loc_4061A4
.text:00406197
.text:00406197 loc_406197:                             ; CODE XREF: sub_405790+9F9↑j
.text:00406197                                         ; sub_405790+A1A↓j ...
.text:00406197                 mov     [esp+5Ch+var_20], 1
.text:0040619F                 jmp     loc_4059DC
.text:004061A4 ; ---------------------------------------------------------------------------
.text:004061A4
.text:004061A4 loc_4061A4:                             ; CODE XREF: sub_405790+A05↑j
.text:004061A4                 mov     edx, [esi+8]
.text:004061A7                 cmp     [ecx+8], edx
.text:004061AA                 jnz     short loc_406197
.text:004061AC                 mov     ebx, [esi+0Ch]
.text:004061AF                 cmp     [ecx+0Ch], ebx
.text:004061B2                 jnz     short loc_406197
.text:004061B4                 jmp     loc_4059DC
.text:004061B4 ; ---------------------------------------------------------------------------
.text:004061B9                 align 10h
.text:004061C0
.text:004061C0 loc_4061C0:                             ; CODE XREF: sub_405790+9F1↑j
.text:004061C0                 mov     [esp+5Ch+var_18], esi
.text:004061C4                 mov     eax, [esp+5Ch+var_28]
.text:004061C8                 mov     [esp+5Ch+var_24], eax
.text:004061CC                 jmp     loc_4059DC
.text:004061D1 ; ---------------------------------------------------------------------------
.text:004061D1
.text:004061D1 loc_4061D1:                             ; CODE XREF: sub_405790+9E9↑j
.text:004061D1                 mov     [esp+5Ch+var_18], esi
.text:004061D5                 mov     ecx, [esp+5Ch+var_28]
.text:004061D9                 mov     [esp+5Ch+var_1C], 1
.text:004061E1                 mov     [esp+5Ch+var_24], ecx
.text:004061E5                 jmp     loc_4059F0
.text:004061EA ; ---------------------------------------------------------------------------
.text:004061EA
.text:004061EA loc_4061EA:                             ; CODE XREF: sub_405790+1BF↑j
.text:004061EA                 mov     eax, [esp+5Ch+Str]
.text:004061EE                 movsx   esi, dl
.text:004061F1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004061F5                 mov     [esp+5Ch+Str1], eax ; Str
.text:004061F8                 call    strchr
.text:004061FD                 test    eax, eax
.text:004061FF                 jnz     loc_405CB0
.text:00406205                 jmp     loc_405955
.text:0040620A ; ---------------------------------------------------------------------------
.text:0040620A
.text:0040620A loc_40620A:                             ; CODE XREF: sub_405790+17C↑j
.text:0040620A                 mov     ecx, 1
.text:0040620F                 jmp     loc_405912
.text:00406214 ; ---------------------------------------------------------------------------
.text:00406214
.text:00406214 loc_406214:                             ; CODE XREF: sub_405790+D4↑j
.text:00406214                                         ; sub_405790+130↑j
.text:00406214                 mov     eax, [ebp+20h]
.text:00406217                 cmp     eax, [ebp+24h]
.text:0040621A                 jz      loc_4058F0
.text:00406220                 mov     [ebp+0], eax
.text:00406223                 jmp     loc_4058F0
.text:00406228 ; ---------------------------------------------------------------------------
.text:00406228
.text:00406228 loc_406228:                             ; CODE XREF: sub_405790+FE↑j
.text:00406228                 mov     [ebp+20h], eax
.text:0040622B                 jmp     loc_4058B0
.text:00406230 ; ---------------------------------------------------------------------------
.text:00406230
.text:00406230 loc_406230:                             ; CODE XREF: sub_405790+CA↑j
.text:00406230                 mov     edx, [ebp+20h]
.text:00406233                 mov     eax, [ebp+24h]
.text:00406236                 cmp     edx, eax
.text:00406238                 jz      short loc_4062B0
.text:0040623A                 cmp     eax, ebx
.text:0040623C                 jz      short loc_406251
.text:0040623E                 mov     [esp+5Ch+Str2], ebp
.text:00406242                 mov     ebx, [esp+5Ch+arg_4]
.text:00406246                 mov     [esp+5Ch+Str1], ebx
.text:00406249                 call    sub_406440
.text:0040624E                 mov     ebx, [ebp+0]
.text:00406251
.text:00406251 loc_406251:                             ; CODE XREF: sub_405790+AAC↑j
.text:00406251                                         ; sub_405790+B22↓j ...
.text:00406251                 cmp     ebx, [esp+5Ch+arg_0]
.text:00406255                 jge     short loc_4062A0
.text:00406257                 mov     esi, [esp+5Ch+arg_4]
.text:0040625B                 mov     eax, [esi+ebx*4]
.text:0040625E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00406261                 jz      short loc_4062A8
.text:00406263                 lea     esi, [esi+0]
.text:00406269                 lea     edi, [edi+0]
.text:00406270
.text:00406270 loc_406270:                             ; CODE XREF: sub_405790+AFC↓j
.text:00406270                                         ; sub_405790+B1C↓j
.text:00406270                 lea     eax, [ebx+1]
.text:00406273                 mov     ebx, eax
.text:00406275                 mov     [ebp+0], eax
.text:00406278                 cmp     eax, [esp+5Ch+arg_0]
.text:0040627C                 jge     short loc_4062A0
.text:0040627E                 mov     edi, [esp+5Ch+arg_4]
.text:00406282                 mov     edx, [edi+eax*4]
.text:00406285                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00406288                 jz      short loc_406290
.text:0040628A
.text:0040628A loc_40628A:                             ; CODE XREF: sub_405790+B04↓j
.text:0040628A                 mov     ebx, eax
.text:0040628C                 jmp     short loc_406270
.text:0040628C ; ---------------------------------------------------------------------------
.text:0040628E                 align 10h
.text:00406290
.text:00406290 loc_406290:                             ; CODE XREF: sub_405790+AF8↑j
.text:00406290                 cmp     byte ptr [edx+1], 0
.text:00406294                 jz      short loc_40628A
.text:00406296                 lea     esi, [esi+0]
.text:00406299                 lea     edi, [edi+0]
.text:004062A0
.text:004062A0 loc_4062A0:                             ; CODE XREF: sub_405790+AC5↑j
.text:004062A0                                         ; sub_405790+AEC↑j ...
.text:004062A0                 mov     [ebp+24h], ebx
.text:004062A3                 jmp     loc_405860
.text:004062A8 ; ---------------------------------------------------------------------------
.text:004062A8
.text:004062A8 loc_4062A8:                             ; CODE XREF: sub_405790+AD1↑j
.text:004062A8                 cmp     byte ptr [eax+1], 0
.text:004062AC                 jz      short loc_406270
.text:004062AE                 jmp     short loc_4062A0
.text:004062B0 ; ---------------------------------------------------------------------------
.text:004062B0
.text:004062B0 loc_4062B0:                             ; CODE XREF: sub_405790+AA8↑j
.text:004062B0                 cmp     edx, ebx
.text:004062B2                 jz      short loc_406251
.text:004062B4                 mov     [ebp+20h], ebx
.text:004062B7                 jmp     short loc_406251
.text:004062B9 ; ---------------------------------------------------------------------------
.text:004062B9
.text:004062B9 loc_4062B9:                             ; CODE XREF: sub_405790+88↑j
.text:004062B9                 mov     dword ptr [ebp+18h], 0
.text:004062C0                 mov     esi, [esp+5Ch+Str]
.text:004062C4
.text:004062C4 loc_4062C4:                             ; CODE XREF: sub_405790+B49↓j
.text:004062C4                 inc     esi
.text:004062C5                 jmp     loc_405828
.text:004062C5 ; ---------------------------------------------------------------------------
.text:004062CA                 align 10h
.text:004062D0
.text:004062D0 loc_4062D0:                             ; CODE XREF: sub_405790+80↑j
.text:004062D0                 mov     dword ptr [ebp+18h], 2
.text:004062D7                 mov     esi, ecx
.text:004062D9                 jmp     short loc_4062C4
.text:004062D9 ; ---------------------------------------------------------------------------
.text:004062DB                 align 10h
.text:004062E0
.text:004062E0 loc_4062E0:                             ; CODE XREF: sub_405790+69↑j
.text:004062E0                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:004062E7                 call    getenv
.text:004062EC                 test    eax, eax
.text:004062EE                 jz      loc_405804
.text:004062F4                 jmp     loc_4057FF
.text:004062F4 ; ---------------------------------------------------------------------------
.text:004062F9                 align 10h
.text:00406300
.text:00406300 loc_406300:                             ; CODE XREF: sub_405790+3F↑j
.text:00406300                 mov     dword ptr [ebp+0], 1
.text:00406307                 mov     ebx, 1
.text:0040630C                 jmp     loc_4057E0
.text:0040630C sub_405790      endp
.text:0040630C
.text:00406311 ; ---------------------------------------------------------------------------
.text:00406311                 jmp     short sub_406320
.text:00406311 ; ---------------------------------------------------------------------------
.text:00406313                 align 10h
.text:00406320
.text:00406320 ; =============== S U B R O U T I N E =======================================
.text:00406320
.text:00406320
.text:00406320 ; int __cdecl sub_406320(int, int, char *, int, int, int, int)
.text:00406320 sub_406320      proc near               ; CODE XREF: .text:00406311↑j
.text:00406320                                         ; sub_406620+3A↓p ...
.text:00406320
.text:00406320 var_2C          = dword ptr -2Ch
.text:00406320 var_28          = dword ptr -28h
.text:00406320 Str             = dword ptr -24h
.text:00406320 var_20          = dword ptr -20h
.text:00406320 var_1C          = dword ptr -1Ch
.text:00406320 var_18          = dword ptr -18h
.text:00406320 var_14          = dword ptr -14h
.text:00406320 var_10          = dword ptr -10h
.text:00406320 arg_0           = dword ptr  4
.text:00406320 arg_4           = dword ptr  8
.text:00406320 arg_8           = dword ptr  0Ch
.text:00406320 arg_C           = dword ptr  10h
.text:00406320 arg_10          = dword ptr  14h
.text:00406320 arg_14          = dword ptr  18h
.text:00406320 arg_18          = dword ptr  1Ch
.text:00406320
.text:00406320                 sub     esp, 2Ch
.text:00406323                 mov     edx, dword_414020
.text:00406329                 mov     [esp+2Ch+var_10], offset dword_4152D0 ; int
.text:00406331                 mov     ecx, dword_414024
.text:00406337                 mov     ds:dword_4152D0, edx
.text:0040633D                 mov     edx, [esp+2Ch+arg_18]
.text:00406341                 mov     ds:dword_4152D4, ecx
.text:00406347                 mov     ecx, [esp+2Ch+arg_14]
.text:0040634B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040634F                 mov     edx, [esp+2Ch+arg_10]
.text:00406353                 mov     [esp+2Ch+var_18], ecx ; int
.text:00406357                 mov     ecx, [esp+2Ch+arg_C]
.text:0040635B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040635F                 mov     edx, [esp+2Ch+arg_8]
.text:00406363                 mov     [esp+2Ch+var_20], ecx ; int
.text:00406367                 mov     ecx, [esp+2Ch+arg_4]
.text:0040636B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040636F                 mov     edx, [esp+2Ch+arg_0]
.text:00406373                 mov     [esp+2Ch+var_28], ecx ; int
.text:00406377                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040637A                 call    sub_405790
.text:0040637F                 mov     ecx, ds:dword_4152D0
.text:00406385                 mov     dword_414020, ecx
.text:0040638B                 mov     ecx, ds:dword_4152DC
.text:00406391                 mov     ds:dword_415800, ecx
.text:00406397                 mov     ecx, ds:dword_4152D8
.text:0040639D                 mov     dword_414028, ecx
.text:004063A3                 add     esp, 2Ch
.text:004063A6                 retn
.text:004063A6 sub_406320      endp
.text:004063A6
.text:004063A6 ; ---------------------------------------------------------------------------
.text:004063A7                 align 10h
.text:004063B0                 sub     esp, 2Ch
.text:004063B3                 mov     edx, dword_414020
.text:004063B9                 mov     dword ptr [esp+1Ch], offset dword_4152D0
.text:004063C1                 mov     ecx, dword_414024
.text:004063C7                 mov     dword ptr [esp+18h], 1
.text:004063CF                 mov     ds:dword_4152D0, edx
.text:004063D5                 mov     edx, [esp+38h]
.text:004063D9                 mov     ds:dword_4152D4, ecx
.text:004063DF                 mov     ecx, [esp+34h]
.text:004063E3                 mov     [esp+8], edx
.text:004063E7                 mov     edx, [esp+30h]
.text:004063EB                 mov     [esp+4], ecx
.text:004063EF                 mov     dword ptr [esp+14h], 0
.text:004063F7                 mov     dword ptr [esp+10h], 0
.text:004063FF                 mov     dword ptr [esp+0Ch], 0
.text:00406407                 mov     [esp], edx
.text:0040640A                 call    sub_405790
.text:0040640F                 mov     ecx, ds:dword_4152D0
.text:00406415                 mov     dword_414020, ecx
.text:0040641B                 mov     ecx, ds:dword_4152DC
.text:00406421                 mov     ds:dword_415800, ecx
.text:00406427                 mov     ecx, ds:dword_4152D8
.text:0040642D                 mov     dword_414028, ecx
.text:00406433                 add     esp, 2Ch
.text:00406436                 retn
.text:00406436 ; ---------------------------------------------------------------------------
.text:00406437                 align 10h
.text:00406440
.text:00406440 ; =============== S U B R O U T I N E =======================================
.text:00406440
.text:00406440
.text:00406440 sub_406440      proc near               ; CODE XREF: sub_405790+113↑p
.text:00406440                                         ; sub_405790+AB9↑p
.text:00406440
.text:00406440 var_2C          = dword ptr -2Ch
.text:00406440 var_28          = dword ptr -28h
.text:00406440 var_24          = dword ptr -24h
.text:00406440 var_20          = dword ptr -20h
.text:00406440 var_1C          = dword ptr -1Ch
.text:00406440 var_18          = dword ptr -18h
.text:00406440 var_14          = dword ptr -14h
.text:00406440 arg_0           = dword ptr  4
.text:00406440 arg_4           = dword ptr  8
.text:00406440
.text:00406440                 push    ebp
.text:00406441                 push    edi
.text:00406442                 push    esi
.text:00406443                 push    ebx
.text:00406444                 sub     esp, 1Ch
.text:00406447                 mov     ecx, [esp+2Ch+arg_4]
.text:0040644B                 mov     eax, [esp+2Ch+arg_4]
.text:0040644F                 mov     ebx, [esp+2Ch+arg_4]
.text:00406453                 mov     edx, [ecx+20h]
.text:00406456                 mov     edi, [esp+2Ch+arg_0]
.text:0040645A                 mov     ecx, [ebx]
.text:0040645C                 mov     [esp+2Ch+var_2C], edx
.text:0040645F                 mov     [esp+2Ch+var_14], edx
.text:00406463                 mov     edx, [eax+24h]
.text:00406466                 mov     [esp+2Ch+var_28], ecx
.text:0040646A                 mov     [esp+2Ch+var_1C], ecx
.text:0040646E                 cmp     ecx, edx
.text:00406470                 mov     [esp+2Ch+var_18], edx
.text:00406474                 jle     short loc_4064F0
.text:00406476                 mov     esi, [esp+2Ch+var_2C]
.text:00406479                 cmp     edx, esi
.text:0040647B                 jle     short loc_4064F0
.text:0040647D                 lea     esi, [esi+0]
.text:00406480
.text:00406480 loc_406480:                             ; CODE XREF: sub_406440+A1↓j
.text:00406480                 mov     ebx, [esp+2Ch+var_1C]
.text:00406484                 mov     edx, [esp+2Ch+var_18]
.text:00406488                 mov     ebp, [esp+2Ch+var_18]
.text:0040648C                 mov     eax, [esp+2Ch+var_14]
.text:00406490                 sub     ebx, edx
.text:00406492                 mov     [esp+2Ch+var_20], ebx
.text:00406496                 sub     ebp, eax
.text:00406498                 cmp     ebx, ebp
.text:0040649A                 jle     short loc_406515
.text:0040649C                 xor     esi, esi
.text:0040649E                 cmp     esi, ebp
.text:004064A0                 jge     short loc_4064CD
.text:004064A2                 mov     ecx, [esp+2Ch+var_1C]
.text:004064A6                 sub     ecx, ebp
.text:004064A8                 mov     [esp+2Ch+var_24], ecx
.text:004064AC                 lea     esi, [esi+0]
.text:004064B0
.text:004064B0 loc_4064B0:                             ; CODE XREF: sub_406440+8B↓j
.text:004064B0                 mov     ecx, [esp+2Ch+var_14]
.text:004064B4                 mov     edx, [esp+2Ch+var_24]
.text:004064B8                 add     ecx, esi
.text:004064BA                 add     edx, esi
.text:004064BC                 mov     ebx, [edi+ecx*4]
.text:004064BF                 mov     eax, [edi+edx*4]
.text:004064C2                 inc     esi
.text:004064C3                 cmp     esi, ebp
.text:004064C5                 mov     [edi+ecx*4], eax
.text:004064C8                 mov     [edi+edx*4], ebx
.text:004064CB                 jl      short loc_4064B0
.text:004064CD
.text:004064CD loc_4064CD:                             ; CODE XREF: sub_406440+60↑j
.text:004064CD                 sub     [esp+2Ch+var_1C], ebp
.text:004064D1
.text:004064D1 loc_4064D1:                             ; CODE XREF: sub_406440+107↓j
.text:004064D1                 mov     eax, [esp+2Ch+var_18]
.text:004064D5                 cmp     [esp+2Ch+var_1C], eax
.text:004064D9                 jle     short loc_4064F0
.text:004064DB                 mov     ebp, [esp+2Ch+var_14]
.text:004064DF                 cmp     eax, ebp
.text:004064E1                 jg      short loc_406480
.text:004064E3                 lea     esi, [esi+0]
.text:004064E9                 lea     edi, [edi+0]
.text:004064F0
.text:004064F0 loc_4064F0:                             ; CODE XREF: sub_406440+34↑j
.text:004064F0                                         ; sub_406440+3B↑j ...
.text:004064F0                 mov     esi, [esp+2Ch+var_28]
.text:004064F4                 mov     ecx, [esp+2Ch+var_18]
.text:004064F8                 mov     eax, [esp+2Ch+var_2C]
.text:004064FB                 mov     edi, [esp+2Ch+arg_4]
.text:004064FF                 mov     edx, [esp+2Ch+var_28]
.text:00406503                 sub     esi, ecx
.text:00406505                 add     esi, eax
.text:00406507                 mov     [edi+20h], esi
.text:0040650A                 mov     [edi+24h], edx
.text:0040650D                 add     esp, 1Ch
.text:00406510                 pop     ebx
.text:00406511                 pop     esi
.text:00406512                 pop     edi
.text:00406513                 pop     ebp
.text:00406514                 retn
.text:00406515 ; ---------------------------------------------------------------------------
.text:00406515
.text:00406515 loc_406515:                             ; CODE XREF: sub_406440+5A↑j
.text:00406515                 xor     esi, esi
.text:00406517                 cmp     esi, [esp+2Ch+var_20]
.text:0040651B                 jge     short loc_40653F
.text:0040651D                 lea     esi, [esi+0]
.text:00406520
.text:00406520 loc_406520:                             ; CODE XREF: sub_406440+FD↓j
.text:00406520                 mov     ebx, [esp+2Ch+var_14]
.text:00406524                 mov     ebp, [esp+2Ch+var_18]
.text:00406528                 add     ebx, esi
.text:0040652A                 add     ebp, esi
.text:0040652C                 mov     edx, [edi+ebx*4]
.text:0040652F                 inc     esi
.text:00406530                 cmp     esi, [esp+2Ch+var_20]
.text:00406534                 mov     ecx, [edi+ebp*4]
.text:00406537                 mov     [edi+ebx*4], ecx
.text:0040653A                 mov     [edi+ebp*4], edx
.text:0040653D                 jl      short loc_406520
.text:0040653F
.text:0040653F loc_40653F:                             ; CODE XREF: sub_406440+DB↑j
.text:0040653F                 mov     esi, [esp+2Ch+var_20]
.text:00406543                 add     [esp+2Ch+var_14], esi
.text:00406547                 jmp     short loc_4064D1
.text:00406547 sub_406440      endp
.text:00406547
.text:00406547 ; ---------------------------------------------------------------------------
.text:00406549                 align 20h
.text:00406560
.text:00406560 ; =============== S U B R O U T I N E =======================================
.text:00406560
.text:00406560
.text:00406560 sub_406560      proc near               ; CODE XREF: sub_402550+477↑p
.text:00406560
.text:00406560 var_1C          = dword ptr -1Ch
.text:00406560 var_18          = dword ptr -18h
.text:00406560 var_14          = dword ptr -14h
.text:00406560 var_10          = dword ptr -10h
.text:00406560 arg_0           = dword ptr  4
.text:00406560 arg_4           = dword ptr  8
.text:00406560 arg_8           = dword ptr  0Ch
.text:00406560
.text:00406560                 push    edi
.text:00406561                 push    esi
.text:00406562                 push    ebx
.text:00406563                 sub     esp, 10h
.text:00406566                 mov     esi, [esp+1Ch+arg_4]
.text:0040656A                 mov     edx, [esp+1Ch+arg_8]
.text:0040656E                 mov     ebx, [esp+1Ch+arg_0]
.text:00406572                 test    esi, esi
.text:00406574                 mov     byte ptr [edx+15h], 0
.text:00406578                 lea     edi, [edx+15h]
.text:0040657B                 js      short loc_4065D0
.text:0040657D                 lea     esi, [esi+0]
.text:00406580
.text:00406580 loc_406580:                             ; CODE XREF: sub_406560+65↓j
.text:00406580                 mov     [esp+1Ch+var_1C], ebx
.text:00406583                 dec     edi
.text:00406584                 mov     [esp+1Ch+var_18], esi
.text:00406588                 mov     [esp+1Ch+var_14], 0Ah
.text:00406590                 mov     [esp+1Ch+var_10], 0
.text:00406598                 call    sub_412AF0
.text:0040659D                 add     al, 30h ; '0'
.text:0040659F                 mov     [edi], al
.text:004065A1                 mov     [esp+1Ch+var_1C], ebx
.text:004065A4                 mov     [esp+1Ch+var_18], esi
.text:004065A8                 mov     [esp+1Ch+var_14], 0Ah
.text:004065B0                 mov     [esp+1Ch+var_10], 0
.text:004065B8                 call    sub_412CB0
.text:004065BD                 mov     ebx, eax
.text:004065BF                 mov     esi, edx
.text:004065C1                 mov     eax, edx
.text:004065C3                 or      eax, ebx
.text:004065C5                 jnz     short loc_406580
.text:004065C7
.text:004065C7 loc_4065C7:                             ; CODE XREF: sub_406560+BB↓j
.text:004065C7                 add     esp, 10h
.text:004065CA                 mov     eax, edi
.text:004065CC                 pop     ebx
.text:004065CD                 pop     esi
.text:004065CE                 pop     edi
.text:004065CF                 retn
.text:004065D0 ; ---------------------------------------------------------------------------
.text:004065D0
.text:004065D0 loc_4065D0:                             ; CODE XREF: sub_406560+1B↑j
.text:004065D0                                         ; sub_406560+B5↓j
.text:004065D0                 mov     [esp+1Ch+var_1C], ebx
.text:004065D3                 dec     edi
.text:004065D4                 mov     [esp+1Ch+var_18], esi
.text:004065D8                 mov     [esp+1Ch+var_14], 0Ah
.text:004065E0                 mov     [esp+1Ch+var_10], 0
.text:004065E8                 call    sub_412AF0
.text:004065ED                 mov     cl, 30h ; '0'
.text:004065EF                 sub     cl, al
.text:004065F1                 mov     [edi], cl
.text:004065F3                 mov     [esp+1Ch+var_1C], ebx
.text:004065F6                 mov     [esp+1Ch+var_18], esi
.text:004065FA                 mov     [esp+1Ch+var_14], 0Ah
.text:00406602                 mov     [esp+1Ch+var_10], 0
.text:0040660A                 call    sub_412CB0
.text:0040660F                 mov     ebx, eax
.text:00406611                 mov     esi, edx
.text:00406613                 or      edx, ebx
.text:00406615                 jnz     short loc_4065D0
.text:00406617                 dec     edi
.text:00406618                 mov     byte ptr [edi], 2Dh ; '-'
.text:0040661B                 jmp     short loc_4065C7
.text:0040661B sub_406560      endp
.text:0040661B
.text:0040661B ; ---------------------------------------------------------------------------
.text:0040661D                 align 10h
.text:00406620
.text:00406620 ; =============== S U B R O U T I N E =======================================
.text:00406620
.text:00406620
.text:00406620 ; int __cdecl sub_406620(int, int, char *, int, int)
.text:00406620 sub_406620      proc near               ; CODE XREF: sub_402550+D6↑p
.text:00406620                                         ; sub_4067C0+58↓p
.text:00406620
.text:00406620 var_1C          = dword ptr -1Ch
.text:00406620 var_18          = dword ptr -18h
.text:00406620 var_14          = dword ptr -14h
.text:00406620 var_10          = dword ptr -10h
.text:00406620 var_C           = dword ptr -0Ch
.text:00406620 var_8           = dword ptr -8
.text:00406620 var_4           = dword ptr -4
.text:00406620 arg_0           = dword ptr  4
.text:00406620 arg_4           = dword ptr  8
.text:00406620 arg_8           = dword ptr  0Ch
.text:00406620 arg_C           = dword ptr  10h
.text:00406620 arg_10          = dword ptr  14h
.text:00406620
.text:00406620                 sub     esp, 1Ch
.text:00406623                 mov     edx, [esp+1Ch+arg_C]
.text:00406627                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040662F                 mov     ecx, [esp+1Ch+arg_10]
.text:00406633                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040663B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040663F                 mov     edx, [esp+1Ch+arg_4]
.text:00406643                 mov     [esp+1Ch+var_C], ecx ; int
.text:00406647                 mov     ecx, [esp+1Ch+arg_8]
.text:0040664B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040664F                 mov     edx, [esp+1Ch+arg_0]
.text:00406653                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00406657                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040665A                 call    sub_406320
.text:0040665F                 add     esp, 1Ch
.text:00406662                 retn
.text:00406662 sub_406620      endp
.text:00406662
.text:00406662 ; ---------------------------------------------------------------------------
.text:00406663                 align 10h
.text:00406670                 sub     esp, 2Ch
.text:00406673                 mov     edx, [esp+44h]
.text:00406677                 mov     dword ptr [esp+18h], 0
.text:0040667F                 mov     ecx, [esp+40h]
.text:00406683                 mov     dword ptr [esp+14h], 0
.text:0040668B                 mov     [esp+1Ch], edx
.text:0040668F                 mov     edx, [esp+3Ch]
.text:00406693                 mov     [esp+10h], ecx
.text:00406697                 mov     ecx, [esp+38h]
.text:0040669B                 mov     [esp+0Ch], edx
.text:0040669F                 mov     edx, [esp+34h]
.text:004066A3                 mov     [esp+8], ecx
.text:004066A7                 mov     [esp+4], edx
.text:004066AB                 mov     edx, [esp+30h]
.text:004066AF                 mov     [esp], edx
.text:004066B2                 call    sub_405790
.text:004066B7                 add     esp, 2Ch
.text:004066BA                 retn
.text:004066BA ; ---------------------------------------------------------------------------
.text:004066BB                 align 10h
.text:004066C0                 sub     esp, 1Ch
.text:004066C3                 mov     edx, [esp+2Ch]
.text:004066C7                 mov     dword ptr [esp+18h], 0
.text:004066CF                 mov     ecx, [esp+30h]
.text:004066D3                 mov     dword ptr [esp+14h], 1
.text:004066DB                 mov     [esp+0Ch], edx
.text:004066DF                 mov     edx, [esp+24h]
.text:004066E3                 mov     [esp+10h], ecx
.text:004066E7                 mov     ecx, [esp+28h]
.text:004066EB                 mov     [esp+4], edx
.text:004066EF                 mov     edx, [esp+20h]
.text:004066F3                 mov     [esp+8], ecx
.text:004066F7                 mov     [esp], edx
.text:004066FA                 call    sub_406320
.text:004066FF                 add     esp, 1Ch
.text:00406702                 retn
.text:00406702 ; ---------------------------------------------------------------------------
.text:00406703                 align 10h
.text:00406710                 sub     esp, 2Ch
.text:00406713                 mov     edx, [esp+44h]
.text:00406717                 mov     dword ptr [esp+18h], 0
.text:0040671F                 mov     ecx, [esp+40h]
.text:00406723                 mov     dword ptr [esp+14h], 1
.text:0040672B                 mov     [esp+1Ch], edx
.text:0040672F                 mov     edx, [esp+3Ch]
.text:00406733                 mov     [esp+10h], ecx
.text:00406737                 mov     ecx, [esp+38h]
.text:0040673B                 mov     [esp+0Ch], edx
.text:0040673F                 mov     edx, [esp+34h]
.text:00406743                 mov     [esp+8], ecx
.text:00406747                 mov     [esp+4], edx
.text:0040674B                 mov     edx, [esp+30h]
.text:0040674F                 mov     [esp], edx
.text:00406752                 call    sub_405790
.text:00406757                 add     esp, 2Ch
.text:0040675A                 retn
.text:0040675A ; ---------------------------------------------------------------------------
.text:0040675B                 align 10h
.text:00406760 aHelp           db 'help',0             ; DATA XREF: .text:off_406780↓o
.text:00406765 aVersion        db 'version',0          ; DATA XREF: .text:00406790↓o
.text:0040676D                 align 20h
.text:00406780 off_406780      dd offset aHelp         ; DATA XREF: sub_4067C0+3D↓o
.text:00406780                                         ; "help"
.text:00406784                 dd 2 dup(0)
.text:0040678C                 dd 68h
.text:00406790                 dd offset aVersion      ; "version"
.text:00406794                 dd 2 dup(0)
.text:0040679C                 dd 76h, 4 dup(0)
.text:004067B0 ; ---------------------------------------------------------------------------
.text:004067B0
.text:004067B0 loc_4067B0:                             ; DATA XREF: sub_4067C0+45↓o
.text:004067B0                 sub     eax, [eax]
.text:004067B2                 lea     esi, [esi+0]
.text:004067B9                 lea     edi, [edi+0]
.text:004067C0
.text:004067C0 ; =============== S U B R O U T I N E =======================================
.text:004067C0
.text:004067C0
.text:004067C0 ; int __cdecl sub_4067C0(int, int, FILE *, int, int, int, char)
.text:004067C0 sub_4067C0      proc near               ; CODE XREF: sub_402550+B2↑p
.text:004067C0
.text:004067C0 Code            = dword ptr -1Ch
.text:004067C0 var_18          = dword ptr -18h
.text:004067C0 var_14          = dword ptr -14h
.text:004067C0 var_10          = dword ptr -10h
.text:004067C0 var_C           = dword ptr -0Ch
.text:004067C0 var_4           = dword ptr -4
.text:004067C0 arg_0           = dword ptr  4
.text:004067C0 arg_4           = dword ptr  8
.text:004067C0 arg_8           = dword ptr  0Ch
.text:004067C0 arg_C           = dword ptr  10h
.text:004067C0 arg_10          = dword ptr  14h
.text:004067C0 arg_14          = dword ptr  18h
.text:004067C0 arg_18          = byte ptr  1Ch
.text:004067C0
.text:004067C0                 sub     esp, 1Ch
.text:004067C3                 xor     eax, eax
.text:004067C5                 cmp     [esp+1Ch+arg_0], 2
.text:004067CA                 mov     [esp+1Ch+var_4], ebx
.text:004067CE                 mov     ebx, dword_414024
.text:004067D4                 mov     dword_414024, eax
.text:004067D9                 jz      short loc_4067F1
.text:004067DB
.text:004067DB loc_4067DB:                             ; CODE XREF: sub_4067C0+60↓j
.text:004067DB                                         ; sub_4067C0+6A↓j
.text:004067DB                 mov     dword_414024, ebx
.text:004067E1                 xor     edx, edx
.text:004067E3                 mov     ebx, [esp+1Ch+var_4]
.text:004067E7                 mov     dword_414020, edx
.text:004067ED                 add     esp, 1Ch
.text:004067F0                 retn
.text:004067F1 ; ---------------------------------------------------------------------------
.text:004067F1
.text:004067F1 loc_4067F1:                             ; CODE XREF: sub_4067C0+19↑j
.text:004067F1                 mov     [esp+1Ch+var_C], 0 ; int
.text:004067F9                 mov     edx, [esp+1Ch+arg_4]
.text:004067FD                 mov     [esp+1Ch+var_10], offset off_406780 ; int
.text:00406805                 mov     [esp+1Ch+var_14], offset loc_4067B0 ; char *
.text:0040680D                 mov     [esp+1Ch+var_18], edx ; int
.text:00406811                 mov     [esp+1Ch+Code], 2 ; int
.text:00406818                 call    sub_406620
.text:0040681D                 cmp     eax, 0FFFFFFFFh
.text:00406820                 jz      short loc_4067DB
.text:00406822                 cmp     eax, 68h ; 'h'
.text:00406825                 jz      short loc_40682E
.text:00406827                 cmp     eax, 76h ; 'v'
.text:0040682A                 jnz     short loc_4067DB
.text:0040682C                 jmp     short loc_406839
.text:0040682E ; ---------------------------------------------------------------------------
.text:0040682E
.text:0040682E loc_40682E:                             ; CODE XREF: sub_4067C0+65↑j
.text:0040682E                 mov     [esp+1Ch+Code], 0
.text:00406835                 call    [esp+1Ch+arg_14]
.text:00406839
.text:00406839 loc_406839:                             ; CODE XREF: sub_4067C0+6C↑j
.text:00406839                 mov     ecx, [esp+1Ch+arg_10]
.text:0040683D                 lea     ebx, [esp+1Ch+arg_18]
.text:00406841                 mov     edx, [esp+1Ch+arg_C]
.text:00406845                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:00406849                 mov     ebx, [esp+1Ch+arg_8]
.text:0040684D                 mov     [esp+1Ch+var_10], ecx ; int
.text:00406851                 mov     ecx, ds:_iob
.text:00406857                 mov     [esp+1Ch+var_14], edx ; int
.text:0040685B                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:0040685F                 add     ecx, 20h ; ' '
.text:00406862                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:00406865                 call    sub_408E30
.text:0040686A                 mov     [esp+1Ch+Code], 0 ; Code
.text:00406871                 call    exit
.text:00406871 sub_4067C0      endp
.text:00406871
.text:00406871 ; ---------------------------------------------------------------------------
.text:00406876                 align 10h
.text:00406880                 mov     edx, [esp+4]
.text:00406884                 mov     ds:dword_415300, edx
.text:0040688A                 retn
.text:0040688A ; ---------------------------------------------------------------------------
.text:0040688B aWriteError     db 'write error',0      ; DATA XREF: sub_4068B0:loc_4068F9↓o
.text:00406897 ; const char aSS_1[]
.text:00406897 aSS_1           db '%s: %s',0           ; DATA XREF: sub_4068B0+77↓o
.text:0040689E ; const char aS_1[]
.text:0040689E aS_1            db '%s',0               ; DATA XREF: sub_4068B0+A0↓o
.text:004068A1 ; ---------------------------------------------------------------------------
.text:004068A1                 jmp     short sub_4068B0
.text:004068A1 ; ---------------------------------------------------------------------------
.text:004068A3                 align 10h
.text:004068B0
.text:004068B0 ; =============== S U B R O U T I N E =======================================
.text:004068B0
.text:004068B0
.text:004068B0 sub_4068B0      proc near               ; CODE XREF: sub_4047F0:loc_404800↑p
.text:004068B0                                         ; .text:004068A1↑j
.text:004068B0                                         ; DATA XREF: ...
.text:004068B0
.text:004068B0 Stream          = dword ptr -2Ch
.text:004068B0 ErrorMessage    = dword ptr -28h
.text:004068B0 var_24          = dword ptr -24h
.text:004068B0 var_20          = byte ptr -20h
.text:004068B0 var_1C          = dword ptr -1Ch
.text:004068B0 var_9           = byte ptr -9
.text:004068B0
.text:004068B0                 push    esi
.text:004068B1                 push    ebx
.text:004068B2                 sub     esp, 24h
.text:004068B5                 mov     edx, ds:_iob
.text:004068BB                 mov     ecx, [edx+2Ch]
.text:004068BE                 lea     esi, [edx+20h]
.text:004068C1                 shr     ecx, 5
.text:004068C4                 mov     bl, cl
.text:004068C6                 mov     ecx, [edx+20h]
.text:004068C9                 and     bl, 1
.text:004068CC                 cmp     ecx, [esi+8]
.text:004068CF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004068D2                 setz    [esp+2Ch+var_9]
.text:004068D7                 call    fclose
.text:004068DC                 test    eax, eax
.text:004068DE                 setnz   al
.text:004068E1                 test    bl, bl
.text:004068E3                 jnz     loc_406973
.text:004068E9                 test    al, al
.text:004068EB                 jz      short loc_406940
.text:004068ED
.text:004068ED loc_4068ED:                             ; CODE XREF: sub_4068B0+CD↓j
.text:004068ED                 call    _errno
.text:004068F2                 mov     esi, [eax]
.text:004068F4
.text:004068F4 loc_4068F4:                             ; CODE XREF: sub_4068B0+C7↓j
.text:004068F4                 cmp     esi, 9
.text:004068F7                 jz      short loc_406966
.text:004068F9
.text:004068F9 loc_4068F9:                             ; CODE XREF: sub_4068B0+B8↓j
.text:004068F9                                         ; sub_4068B0+C1↓j
.text:004068F9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00406900                 call    ds:libintl_gettext
.text:00406906                 mov     ebx, eax
.text:00406908                 mov     eax, ds:dword_415300
.text:0040690D                 test    eax, eax
.text:0040690F                 jz      short loc_406946
.text:00406911                 mov     [esp+2Ch+Stream], eax ; char *
.text:00406914                 call    sub_40A170
.text:00406919                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040691D                 mov     edx, Code
.text:00406923                 mov     [esp+2Ch+var_1C], ebx
.text:00406927                 mov     [esp+2Ch+var_24], offset aSS_1 ; "%s: %s"
.text:0040692F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00406933                 mov     [esp+2Ch+Stream], edx ; Code
.text:00406936                 call    sub_40AAC0
.text:0040693B                 nop
.text:0040693C                 lea     esi, [esi+0]
.text:00406940
.text:00406940 loc_406940:                             ; CODE XREF: sub_4068B0+3B↑j
.text:00406940                                         ; sub_4068B0+B4↓j ...
.text:00406940                 add     esp, 24h
.text:00406943                 pop     ebx
.text:00406944                 pop     esi
.text:00406945                 retn
.text:00406946 ; ---------------------------------------------------------------------------
.text:00406946
.text:00406946 loc_406946:                             ; CODE XREF: sub_4068B0+5F↑j
.text:00406946                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040694A                 mov     ebx, Code
.text:00406950                 mov     [esp+2Ch+var_24], offset aS_1 ; "%s"
.text:00406958                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040695C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040695F                 call    sub_40AAC0
.text:00406964                 jmp     short loc_406940
.text:00406966 ; ---------------------------------------------------------------------------
.text:00406966
.text:00406966 loc_406966:                             ; CODE XREF: sub_4068B0+47↑j
.text:00406966                 test    bl, bl
.text:00406968                 jnz     short loc_4068F9
.text:0040696A                 cmp     [esp+2Ch+var_9], 0
.text:0040696F                 jnz     short loc_406940
.text:00406971                 jmp     short loc_4068F9
.text:00406973 ; ---------------------------------------------------------------------------
.text:00406973
.text:00406973 loc_406973:                             ; CODE XREF: sub_4068B0+33↑j
.text:00406973                 xor     esi, esi
.text:00406975                 test    al, al
.text:00406977                 jz      loc_4068F4
.text:0040697D                 jmp     loc_4068ED
.text:0040697D sub_4068B0      endp
.text:0040697D
.text:0040697D ; ---------------------------------------------------------------------------
.text:00406982                 align 10h
.text:00406990                 sub     esp, 0Ch
.text:00406993                 xor     edx, edx
.text:00406995                 mov     ecx, [esp+14h]
.text:00406999                 mov     [esp+8], ebx
.text:0040699D                 mov     eax, 0FFFFFFFFh
.text:004069A2                 mov     ebx, [esp+10h]
.text:004069A6                 div     ecx
.text:004069A8                 cmp     eax, ebx
.text:004069AA                 jb      short loc_4069C9
.text:004069AC                 mov     edx, ebx
.text:004069AE                 imul    edx, ecx
.text:004069B1                 mov     [esp], edx
.text:004069B4                 call    malloc
.text:004069B9                 test    eax, eax
.text:004069BB                 jz      short loc_4069C5
.text:004069BD
.text:004069BD loc_4069BD:                             ; CODE XREF: .text:004069C7↓j
.text:004069BD                 mov     ebx, [esp+8]
.text:004069C1                 add     esp, 0Ch
.text:004069C4                 retn
.text:004069C5 ; ---------------------------------------------------------------------------
.text:004069C5
.text:004069C5 loc_4069C5:                             ; CODE XREF: .text:004069BB↑j
.text:004069C5                 test    ebx, ebx
.text:004069C7                 jz      short loc_4069BD
.text:004069C9
.text:004069C9 loc_4069C9:                             ; CODE XREF: .text:004069AA↑j
.text:004069C9                 call    sub_40A400
.text:004069C9 ; ---------------------------------------------------------------------------
.text:004069CE                 align 10h
.text:004069D0
.text:004069D0 ; =============== S U B R O U T I N E =======================================
.text:004069D0
.text:004069D0
.text:004069D0 ; int __cdecl sub_4069D0(size_t)
.text:004069D0 sub_4069D0      proc near               ; CODE XREF: sub_403DD0+2B↑p
.text:004069D0                                         ; sub_403DD0+9FD↑p ...
.text:004069D0
.text:004069D0 Size            = dword ptr -0Ch
.text:004069D0 var_4           = dword ptr -4
.text:004069D0 arg_0           = dword ptr  4
.text:004069D0
.text:004069D0                 sub     esp, 0Ch
.text:004069D3                 mov     [esp+0Ch+var_4], ebx
.text:004069D7                 mov     ebx, [esp+0Ch+arg_0]
.text:004069DB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004069DE                 call    malloc
.text:004069E3                 test    eax, eax
.text:004069E5                 jz      short loc_4069F0
.text:004069E7
.text:004069E7 loc_4069E7:                             ; CODE XREF: sub_4069D0+22↓j
.text:004069E7                 mov     ebx, [esp+0Ch+var_4]
.text:004069EB                 add     esp, 0Ch
.text:004069EE                 retn
.text:004069EE ; ---------------------------------------------------------------------------
.text:004069EF                 align 10h
.text:004069F0
.text:004069F0 loc_4069F0:                             ; CODE XREF: sub_4069D0+15↑j
.text:004069F0                 test    ebx, ebx
.text:004069F2                 jz      short loc_4069E7
.text:004069F4                 call    sub_40A400
.text:004069F4 sub_4069D0      endp
.text:004069F4
.text:004069F4 ; ---------------------------------------------------------------------------
.text:004069F9                 align 10h
.text:00406A00                 sub     esp, 1Ch
.text:00406A03                 xor     edx, edx
.text:00406A05                 mov     eax, 0FFFFFFFFh
.text:00406A0A                 mov     [esp+14h], ebx
.text:00406A0E                 mov     ecx, [esp+20h]
.text:00406A12                 mov     ebx, [esp+28h]
.text:00406A16                 mov     [esp+18h], esi
.text:00406A1A                 mov     esi, [esp+24h]
.text:00406A1E                 div     ebx
.text:00406A20                 cmp     eax, esi
.text:00406A22                 jb      short loc_406A54
.text:00406A24                 mov     [esp], ecx
.text:00406A27                 mov     edx, esi
.text:00406A29                 imul    edx, ebx
.text:00406A2C                 mov     [esp+4], edx
.text:00406A30                 call    realloc
.text:00406A35                 test    eax, eax
.text:00406A37                 mov     ecx, eax
.text:00406A39                 jz      short loc_406A50
.text:00406A3B
.text:00406A3B loc_406A3B:                             ; CODE XREF: .text:00406A52↓j
.text:00406A3B                 mov     ebx, [esp+14h]
.text:00406A3F                 mov     eax, ecx
.text:00406A41                 mov     esi, [esp+18h]
.text:00406A45                 add     esp, 1Ch
.text:00406A48                 retn
.text:00406A48 ; ---------------------------------------------------------------------------
.text:00406A49                 align 10h
.text:00406A50
.text:00406A50 loc_406A50:                             ; CODE XREF: .text:00406A39↑j
.text:00406A50                 test    esi, esi
.text:00406A52                 jz      short loc_406A3B
.text:00406A54
.text:00406A54 loc_406A54:                             ; CODE XREF: .text:00406A22↑j
.text:00406A54                 call    sub_40A400
.text:00406A54 ; ---------------------------------------------------------------------------
.text:00406A59                 align 10h
.text:00406A60
.text:00406A60 ; =============== S U B R O U T I N E =======================================
.text:00406A60
.text:00406A60
.text:00406A60 ; int __cdecl sub_406A60(void *, size_t)
.text:00406A60 sub_406A60      proc near               ; CODE XREF: sub_40A210+5B↓p
.text:00406A60
.text:00406A60 Block           = dword ptr -0Ch
.text:00406A60 Size            = dword ptr -8
.text:00406A60 var_4           = dword ptr -4
.text:00406A60 arg_0           = dword ptr  4
.text:00406A60 arg_4           = dword ptr  8
.text:00406A60
.text:00406A60                 sub     esp, 0Ch
.text:00406A63                 mov     edx, [esp+0Ch+arg_0]
.text:00406A67                 mov     [esp+0Ch+var_4], ebx
.text:00406A6B                 mov     ebx, [esp+0Ch+arg_4]
.text:00406A6F                 mov     [esp+0Ch+Block], edx ; Block
.text:00406A72                 mov     [esp+0Ch+Size], ebx ; Size
.text:00406A76                 call    realloc
.text:00406A7B                 test    eax, eax
.text:00406A7D                 jz      short loc_406A87
.text:00406A7F
.text:00406A7F loc_406A7F:                             ; CODE XREF: sub_406A60+29↓j
.text:00406A7F                 mov     ebx, [esp+0Ch+var_4]
.text:00406A83                 add     esp, 0Ch
.text:00406A86                 retn
.text:00406A87 ; ---------------------------------------------------------------------------
.text:00406A87
.text:00406A87 loc_406A87:                             ; CODE XREF: sub_406A60+1D↑j
.text:00406A87                 test    ebx, ebx
.text:00406A89                 jz      short loc_406A7F
.text:00406A8B                 call    sub_40A400
.text:00406A8B sub_406A60      endp
.text:00406A8B
.text:00406A90 ; ---------------------------------------------------------------------------
.text:00406A90                 jmp     sub_406BE0
.text:00406A90 ; ---------------------------------------------------------------------------
.text:00406A95                 align 10h
.text:00406AA0                 sub     esp, 0Ch
.text:00406AA3                 mov     edx, [esp+14h]
.text:00406AA7                 mov     dword ptr [esp+8], 1
.text:00406AAF                 mov     [esp+4], edx
.text:00406AB3                 mov     edx, [esp+10h]
.text:00406AB7                 mov     [esp], edx
.text:00406ABA                 call    sub_406BE0
.text:00406ABF                 add     esp, 0Ch
.text:00406AC2                 retn
.text:00406AC2 ; ---------------------------------------------------------------------------
.text:00406AC3                 align 10h
.text:00406AD0                 sub     esp, 1Ch
.text:00406AD3                 mov     [esp+18h], ebx
.text:00406AD7                 mov     ebx, [esp+20h]
.text:00406ADB                 mov     [esp], ebx
.text:00406ADE                 call    malloc
.text:00406AE3                 test    eax, eax
.text:00406AE5                 jz      short loc_406B03
.text:00406AE7
.text:00406AE7 loc_406AE7:                             ; CODE XREF: .text:00406B05↓j
.text:00406AE7                 mov     [esp+8], ebx
.text:00406AEB                 mov     dword ptr [esp+4], 0
.text:00406AF3                 mov     [esp], eax
.text:00406AF6                 call    memset
.text:00406AFB                 mov     ebx, [esp+18h]
.text:00406AFF                 add     esp, 1Ch
.text:00406B02                 retn
.text:00406B03 ; ---------------------------------------------------------------------------
.text:00406B03
.text:00406B03 loc_406B03:                             ; CODE XREF: .text:00406AE5↑j
.text:00406B03                 test    ebx, ebx
.text:00406B05                 jz      short loc_406AE7
.text:00406B07                 call    sub_40A400
.text:00406B07 ; ---------------------------------------------------------------------------
.text:00406B0C                 align 10h
.text:00406B10                 sub     esp, 0Ch
.text:00406B13                 xor     edx, edx
.text:00406B15                 mov     ecx, [esp+14h]
.text:00406B19                 mov     [esp+8], ebx
.text:00406B1D                 mov     eax, 0FFFFFFFFh
.text:00406B22                 mov     ebx, [esp+10h]
.text:00406B26                 div     ecx
.text:00406B28                 cmp     eax, ebx
.text:00406B2A                 jb      short loc_406B48
.text:00406B2C                 mov     [esp+4], ecx
.text:00406B30                 mov     [esp], ebx
.text:00406B33                 call    calloc
.text:00406B38                 test    eax, eax
.text:00406B3A                 jz      short loc_406B44
.text:00406B3C
.text:00406B3C loc_406B3C:                             ; CODE XREF: .text:00406B46↓j
.text:00406B3C                 mov     ebx, [esp+8]
.text:00406B40                 add     esp, 0Ch
.text:00406B43                 retn
.text:00406B44 ; ---------------------------------------------------------------------------
.text:00406B44
.text:00406B44 loc_406B44:                             ; CODE XREF: .text:00406B3A↑j
.text:00406B44                 test    ebx, ebx
.text:00406B46                 jz      short loc_406B3C
.text:00406B48
.text:00406B48 loc_406B48:                             ; CODE XREF: .text:00406B2A↑j
.text:00406B48                 call    sub_40A400
.text:00406B48 ; ---------------------------------------------------------------------------
.text:00406B4D                 align 10h
.text:00406B50                 sub     esp, 1Ch
.text:00406B53                 mov     [esp+18h], ebx
.text:00406B57                 mov     ebx, [esp+24h]
.text:00406B5B                 mov     [esp], ebx
.text:00406B5E                 call    malloc
.text:00406B63                 test    eax, eax
.text:00406B65                 mov     edx, eax
.text:00406B67                 jz      short loc_406B85
.text:00406B69
.text:00406B69 loc_406B69:                             ; CODE XREF: .text:00406B87↓j
.text:00406B69                 mov     [esp+8], ebx
.text:00406B6D                 mov     ecx, [esp+20h]
.text:00406B71                 mov     [esp], edx
.text:00406B74                 mov     [esp+4], ecx
.text:00406B78                 call    memcpy
.text:00406B7D                 mov     ebx, [esp+18h]
.text:00406B81                 add     esp, 1Ch
.text:00406B84                 retn
.text:00406B85 ; ---------------------------------------------------------------------------
.text:00406B85
.text:00406B85 loc_406B85:                             ; CODE XREF: .text:00406B67↑j
.text:00406B85                 test    ebx, ebx
.text:00406B87                 jz      short loc_406B69
.text:00406B89                 call    sub_40A400
.text:00406B89 ; ---------------------------------------------------------------------------
.text:00406B8E                 align 10h
.text:00406B90                 sub     esp, 1Ch
.text:00406B93                 mov     [esp+18h], esi
.text:00406B97                 mov     esi, [esp+20h]
.text:00406B9B                 mov     [esp+14h], ebx
.text:00406B9F                 mov     [esp], esi
.text:00406BA2                 call    strlen
.text:00406BA7                 lea     ebx, [eax+1]
.text:00406BAA                 mov     [esp], ebx
.text:00406BAD                 call    malloc
.text:00406BB2                 test    eax, eax
.text:00406BB4                 jz      short loc_406BD2
.text:00406BB6
.text:00406BB6 loc_406BB6:                             ; CODE XREF: .text:00406BD4↓j
.text:00406BB6                 mov     [esp+8], ebx
.text:00406BBA                 mov     [esp+4], esi
.text:00406BBE                 mov     [esp], eax
.text:00406BC1                 call    memcpy
.text:00406BC6                 mov     ebx, [esp+14h]
.text:00406BCA                 mov     esi, [esp+18h]
.text:00406BCE                 add     esp, 1Ch
.text:00406BD1                 retn
.text:00406BD2 ; ---------------------------------------------------------------------------
.text:00406BD2
.text:00406BD2 loc_406BD2:                             ; CODE XREF: .text:00406BB4↑j
.text:00406BD2                 test    ebx, ebx
.text:00406BD4                 jz      short loc_406BB6
.text:00406BD6                 call    sub_40A400
.text:00406BD6 ; ---------------------------------------------------------------------------
.text:00406BDB                 align 10h
.text:00406BE0
.text:00406BE0 ; =============== S U B R O U T I N E =======================================
.text:00406BE0
.text:00406BE0
.text:00406BE0 ; int __cdecl sub_406BE0(void *, int, int)
.text:00406BE0 sub_406BE0      proc near               ; CODE XREF: .text:00406A90↑j
.text:00406BE0                                         ; .text:00406ABA↑p
.text:00406BE0
.text:00406BE0 Block           = dword ptr -1Ch
.text:00406BE0 Size            = dword ptr -18h
.text:00406BE0 var_C           = dword ptr -0Ch
.text:00406BE0 var_8           = dword ptr -8
.text:00406BE0 var_4           = dword ptr -4
.text:00406BE0 arg_0           = dword ptr  4
.text:00406BE0 arg_4           = dword ptr  8
.text:00406BE0 arg_8           = dword ptr  0Ch
.text:00406BE0
.text:00406BE0                 sub     esp, 1Ch
.text:00406BE3                 mov     [esp+1Ch+var_8], esi
.text:00406BE7                 mov     esi, [esp+1Ch+arg_0]
.text:00406BEB                 mov     [esp+1Ch+var_4], edi
.text:00406BEF                 mov     edi, [esp+1Ch+arg_4]
.text:00406BF3                 test    esi, esi
.text:00406BF5                 mov     [esp+1Ch+var_C], ebx
.text:00406BF9                 mov     ecx, [edi]
.text:00406BFB                 mov     ebx, [esp+1Ch+arg_8]
.text:00406BFF                 jz      short loc_406C40
.text:00406C01                 xor     edx, edx
.text:00406C03                 mov     eax, 7FFFFFFFh
.text:00406C08                 div     ebx
.text:00406C0A                 cmp     eax, ecx
.text:00406C0C                 jb      short loc_406C39
.text:00406C0E                 add     ecx, ecx
.text:00406C10
.text:00406C10 loc_406C10:                             ; CODE XREF: sub_406BE0+62↓j
.text:00406C10                                         ; sub_406BE0+71↓j ...
.text:00406C10                 mov     [edi], ecx
.text:00406C12                 imul    ebx, ecx
.text:00406C15                 mov     [esp+1Ch+Block], esi ; Block
.text:00406C18                 mov     [esp+1Ch+Size], ebx ; Size
.text:00406C1C                 call    realloc
.text:00406C21                 test    eax, eax
.text:00406C23                 jz      short loc_406C35
.text:00406C25
.text:00406C25 loc_406C25:                             ; CODE XREF: sub_406BE0+57↓j
.text:00406C25                 mov     ebx, [esp+1Ch+var_C]
.text:00406C29                 mov     esi, [esp+1Ch+var_8]
.text:00406C2D                 mov     edi, [esp+1Ch+var_4]
.text:00406C31                 add     esp, 1Ch
.text:00406C34                 retn
.text:00406C35 ; ---------------------------------------------------------------------------
.text:00406C35
.text:00406C35 loc_406C35:                             ; CODE XREF: sub_406BE0+43↑j
.text:00406C35                 test    ebx, ebx
.text:00406C37                 jz      short loc_406C25
.text:00406C39
.text:00406C39 loc_406C39:                             ; CODE XREF: sub_406BE0+2C↑j
.text:00406C39                 call    sub_40A400
.text:00406C39 ; ---------------------------------------------------------------------------
.text:00406C3E                 align 10h
.text:00406C40
.text:00406C40 loc_406C40:                             ; CODE XREF: sub_406BE0+1F↑j
.text:00406C40                 test    ecx, ecx
.text:00406C42                 jnz     short loc_406C10
.text:00406C44                 xor     edx, edx
.text:00406C46                 mov     eax, 40h ; '@'
.text:00406C4B                 div     ebx
.text:00406C4D                 test    eax, eax
.text:00406C4F                 mov     ecx, eax
.text:00406C51                 jnz     short loc_406C10
.text:00406C53                 mov     ecx, 1
.text:00406C58                 jmp     short loc_406C10
.text:00406C58 sub_406BE0      endp
.text:00406C58
.text:00406C58 ; ---------------------------------------------------------------------------
.text:00406C5A                 align 10h
.text:00406C60
.text:00406C60 ; =============== S U B R O U T I N E =======================================
.text:00406C60
.text:00406C60
.text:00406C60 sub_406C60      proc near               ; CODE XREF: sub_403DD0+10C↑p
.text:00406C60                                         ; sub_404A70+107↑p
.text:00406C60
.text:00406C60 FileHandle      = dword ptr -1Ch
.text:00406C60 DstBuf          = dword ptr -18h
.text:00406C60 MaxCharCount    = dword ptr -14h
.text:00406C60 arg_0           = dword ptr  4
.text:00406C60 arg_4           = dword ptr  8
.text:00406C60 arg_8           = dword ptr  0Ch
.text:00406C60
.text:00406C60                 push    ebp
.text:00406C61                 push    edi
.text:00406C62                 push    esi
.text:00406C63                 push    ebx
.text:00406C64                 sub     esp, 0Ch
.text:00406C67                 mov     ebp, [esp+1Ch+arg_0]
.text:00406C6B                 mov     edi, [esp+1Ch+arg_4]
.text:00406C6F                 mov     ebx, [esp+1Ch+arg_8]
.text:00406C73                 lea     esi, [esi+0]
.text:00406C79                 lea     edi, [edi+0]
.text:00406C80
.text:00406C80 loc_406C80:                             ; CODE XREF: sub_406C60+3E↓j
.text:00406C80                                         ; sub_406C60+57↓j
.text:00406C80                 mov     [esp+1Ch+MaxCharCount], ebx ; MaxCharCount
.text:00406C84                 mov     [esp+1Ch+DstBuf], edi ; DstBuf
.text:00406C88                 mov     [esp+1Ch+FileHandle], ebp ; FileHandle
.text:00406C8B                 call    _read
.text:00406C90                 test    eax, eax
.text:00406C92                 mov     esi, eax
.text:00406C94                 jns     short loc_406CB9
.text:00406C96                 call    _errno
.text:00406C9B                 cmp     dword ptr [eax], 4
.text:00406C9E                 jz      short loc_406C80
.text:00406CA0                 call    _errno
.text:00406CA5                 cmp     dword ptr [eax], 16h
.text:00406CA8                 jnz     short loc_406CB9
.text:00406CAA                 cmp     ebx, 7FFFE000h
.text:00406CB0                 jbe     short loc_406CB9
.text:00406CB2                 mov     ebx, 7FFFE000h
.text:00406CB7                 jmp     short loc_406C80
.text:00406CB9 ; ---------------------------------------------------------------------------
.text:00406CB9
.text:00406CB9 loc_406CB9:                             ; CODE XREF: sub_406C60+34↑j
.text:00406CB9                                         ; sub_406C60+48↑j ...
.text:00406CB9                 add     esp, 0Ch
.text:00406CBC                 mov     eax, esi
.text:00406CBE                 pop     ebx
.text:00406CBF                 pop     esi
.text:00406CC0                 pop     edi
.text:00406CC1                 pop     ebp
.text:00406CC2                 retn
.text:00406CC2 sub_406C60      endp
.text:00406CC2
.text:00406CC2 ; ---------------------------------------------------------------------------
.text:00406CC3                 align 10h
.text:00406CD0
.text:00406CD0 ; =============== S U B R O U T I N E =======================================
.text:00406CD0
.text:00406CD0
.text:00406CD0 ; int __cdecl sub_406CD0(int, char *)
.text:00406CD0 sub_406CD0      proc near               ; CODE XREF: sub_403500+4D6↑p
.text:00406CD0                                         ; sub_403500+4E8↑p ...
.text:00406CD0
.text:00406CD0 var_C           = dword ptr -0Ch
.text:00406CD0 var_8           = dword ptr -8
.text:00406CD0 var_4           = dword ptr -4
.text:00406CD0 arg_0           = dword ptr  4
.text:00406CD0 arg_4           = dword ptr  8
.text:00406CD0
.text:00406CD0                 sub     esp, 0Ch
.text:00406CD3                 mov     edx, [esp+0Ch+arg_4]
.text:00406CD7                 mov     [esp+0Ch+var_8], 5 ; int
.text:00406CDF                 mov     [esp+0Ch+var_4], edx ; char *
.text:00406CE3                 mov     edx, [esp+0Ch+arg_0]
.text:00406CE7                 mov     [esp+0Ch+var_C], edx ; int
.text:00406CEA                 call    sub_409E00
.text:00406CEF                 add     esp, 0Ch
.text:00406CF2                 retn
.text:00406CF2 sub_406CD0      endp
.text:00406CF2
.text:00406CF2 ; ---------------------------------------------------------------------------
.text:00406CF3                 align 10h
.text:00406D00
.text:00406D00 ; =============== S U B R O U T I N E =======================================
.text:00406D00
.text:00406D00
.text:00406D00 ; int __cdecl sub_406D00(char *)
.text:00406D00 sub_406D00      proc near               ; CODE XREF: sub_402550+3D0↑p
.text:00406D00                                         ; sub_402550+410↑p ...
.text:00406D00
.text:00406D00 var_C           = dword ptr -0Ch
.text:00406D00 var_8           = dword ptr -8
.text:00406D00 var_4           = dword ptr -4
.text:00406D00 arg_0           = dword ptr  4
.text:00406D00
.text:00406D00                 sub     esp, 0Ch
.text:00406D03                 mov     edx, [esp+0Ch+arg_0]
.text:00406D07                 mov     [esp+0Ch+var_8], 5 ; int
.text:00406D0F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00406D16                 mov     [esp+0Ch+var_4], edx ; char *
.text:00406D1A                 call    sub_409E00
.text:00406D1F                 add     esp, 0Ch
.text:00406D22                 retn
.text:00406D22 sub_406D00      endp
.text:00406D22
.text:00406D22 ; ---------------------------------------------------------------------------
.text:00406D23                 align 10h
.text:00406D30 aCoreutils530Sr db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00406D30                                         ; DATA XREF: sub_406DA0+C79↓o
.text:00406D58                 db 18h dup(90h)
.text:00406D70 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:00406D70                                         ; DATA XREF: sub_406DA0+C81↓o
.text:00406D96                 align 10h
.text:00406DA0
.text:00406DA0 ; =============== S U B R O U T I N E =======================================
.text:00406DA0
.text:00406DA0
.text:00406DA0 ; int __cdecl sub_406DA0(int, int, int, int, char *Str)
.text:00406DA0 sub_406DA0      proc near               ; CODE XREF: sub_403500+29F↑p
.text:00406DA0                                         ; sub_404910+3E↑p ...
.text:00406DA0
.text:00406DA0 C               = dword ptr -13Ch
.text:00406DA0 Type            = dword ptr -138h
.text:00406DA0 Radix           = dword ptr -134h
.text:00406DA0 var_130         = dword ptr -130h
.text:00406DA0 var_124         = dword ptr -124h
.text:00406DA0 var_120         = dword ptr -120h
.text:00406DA0 var_11C         = dword ptr -11Ch
.text:00406DA0 var_118         = dword ptr -118h
.text:00406DA0 var_114         = dword ptr -114h
.text:00406DA0 var_110         = dword ptr -110h
.text:00406DA0 var_10C         = dword ptr -10Ch
.text:00406DA0 var_108         = dword ptr -108h
.text:00406DA0 var_104         = dword ptr -104h
.text:00406DA0 var_100         = dword ptr -100h
.text:00406DA0 var_F8          = dword ptr -0F8h
.text:00406DA0 var_F4          = dword ptr -0F4h
.text:00406DA0 var_F0          = dword ptr -0F0h
.text:00406DA0 var_EC          = dword ptr -0ECh
.text:00406DA0 var_E8          = dword ptr -0E8h
.text:00406DA0 var_E4          = dword ptr -0E4h
.text:00406DA0 var_E0          = dword ptr -0E0h
.text:00406DA0 var_D8          = dword ptr -0D8h
.text:00406DA0 var_D4          = dword ptr -0D4h
.text:00406DA0 var_D0          = dword ptr -0D0h
.text:00406DA0 var_CC          = dword ptr -0CCh
.text:00406DA0 var_C8          = dword ptr -0C8h
.text:00406DA0 var_C4          = dword ptr -0C4h
.text:00406DA0 var_C0          = dword ptr -0C0h
.text:00406DA0 var_B8          = dword ptr -0B8h
.text:00406DA0 var_B4          = dword ptr -0B4h
.text:00406DA0 var_B0          = dword ptr -0B0h
.text:00406DA0 var_AC          = dword ptr -0ACh
.text:00406DA0 var_A8          = dword ptr -0A8h
.text:00406DA0 var_A4          = dword ptr -0A4h
.text:00406DA0 var_A0          = dword ptr -0A0h
.text:00406DA0 var_98          = dword ptr -98h
.text:00406DA0 var_94          = dword ptr -94h
.text:00406DA0 var_90          = dword ptr -90h
.text:00406DA0 var_8C          = dword ptr -8Ch
.text:00406DA0 var_88          = dword ptr -88h
.text:00406DA0 var_84          = dword ptr -84h
.text:00406DA0 var_80          = dword ptr -80h
.text:00406DA0 var_78          = dword ptr -78h
.text:00406DA0 var_74          = dword ptr -74h
.text:00406DA0 var_70          = dword ptr -70h
.text:00406DA0 var_6C          = dword ptr -6Ch
.text:00406DA0 var_68          = dword ptr -68h
.text:00406DA0 var_64          = dword ptr -64h
.text:00406DA0 var_60          = dword ptr -60h
.text:00406DA0 var_5C          = dword ptr -5Ch
.text:00406DA0 var_58          = dword ptr -58h
.text:00406DA0 var_50          = dword ptr -50h
.text:00406DA0 var_4C          = dword ptr -4Ch
.text:00406DA0 var_48          = dword ptr -48h
.text:00406DA0 var_44          = dword ptr -44h
.text:00406DA0 var_40          = dword ptr -40h
.text:00406DA0 var_3C          = dword ptr -3Ch
.text:00406DA0 var_38          = dword ptr -38h
.text:00406DA0 var_34          = dword ptr -34h
.text:00406DA0 var_30          = dword ptr -30h
.text:00406DA0 var_29          = byte ptr -29h
.text:00406DA0 var_28          = dword ptr -28h
.text:00406DA0 var_24          = dword ptr -24h
.text:00406DA0 var_20          = dword ptr -20h
.text:00406DA0 var_18          = byte ptr -18h
.text:00406DA0 arg_0           = dword ptr  4
.text:00406DA0 arg_4           = dword ptr  8
.text:00406DA0 arg_8           = dword ptr  0Ch
.text:00406DA0 arg_C           = dword ptr  10h
.text:00406DA0 Str             = dword ptr  14h
.text:00406DA0
.text:00406DA0                 push    ebp
.text:00406DA1                 xor     eax, eax
.text:00406DA3                 push    edi
.text:00406DA4                 push    esi
.text:00406DA5                 push    ebx
.text:00406DA6                 sub     esp, 12Ch
.text:00406DAC                 mov     ebp, [esp+13Ch+arg_8]
.text:00406DB3                 mov     [esp+13Ch+var_28], eax
.text:00406DBA                 mov     esi, [esp+13Ch+arg_0]
.text:00406DC1                 cmp     ebp, 24h ; '$'
.text:00406DC4                 ja      loc_407A11
.text:00406DCA                 mov     edi, [esp+13Ch+arg_4]
.text:00406DD1                 test    edi, edi
.text:00406DD3                 jz      loc_407A05
.text:00406DD9
.text:00406DD9 loc_406DD9:                             ; CODE XREF: sub_406DA0+C6C↓j
.text:00406DD9                 movzx   edx, byte ptr [esi]
.text:00406DDC                 mov     ebx, esi
.text:00406DDE                 mov     [esp+13Ch+var_29], dl
.text:00406DE5                 lea     esi, [esi+0]
.text:00406DE9                 lea     edi, [edi+0]
.text:00406DF0
.text:00406DF0 loc_406DF0:                             ; CODE XREF: sub_406DA0+86↓j
.text:00406DF0                 movzx   edx, [esp+13Ch+var_29]
.text:00406DF8                 mov     ecx, ds:__mb_cur_max
.text:00406DFE                 cmp     dword ptr [ecx], 1
.text:00406E01                 jz      loc_4079F2
.text:00406E07                 mov     [esp+13Ch+Type], 8 ; Type
.text:00406E0F                 mov     [esp+13Ch+C], edx ; C
.text:00406E12                 call    _isctype
.text:00406E17
.text:00406E17 loc_406E17:                             ; CODE XREF: sub_406DA0+C60↓j
.text:00406E17                 test    eax, eax
.text:00406E19                 jz      short loc_406E28
.text:00406E1B                 inc     ebx
.text:00406E1C                 movzx   eax, byte ptr [ebx]
.text:00406E1F                 mov     [esp+13Ch+var_29], al
.text:00406E26                 jmp     short loc_406DF0
.text:00406E28 ; ---------------------------------------------------------------------------
.text:00406E28
.text:00406E28 loc_406E28:                             ; CODE XREF: sub_406DA0+79↑j
.text:00406E28                 cmp     [esp+13Ch+var_29], 2Dh ; '-'
.text:00406E30                 mov     eax, 4
.text:00406E35                 jz      short loc_406EB2
.text:00406E37                 call    _errno
.text:00406E3C                 mov     dword ptr [eax], 0
.text:00406E42                 mov     [esp+13Ch+Radix], ebp ; Radix
.text:00406E46                 mov     [esp+13Ch+Type], edi ; EndPtr
.text:00406E4A                 mov     [esp+13Ch+C], esi ; String
.text:00406E4D                 call    _strtoull
.text:00406E52                 mov     [esp+13Ch+var_24], eax
.text:00406E59                 mov     eax, [edi]
.text:00406E5B                 mov     [esp+13Ch+var_20], edx
.text:00406E62                 cmp     eax, esi
.text:00406E64                 jz      loc_4079AC
.text:00406E6A                 call    _errno
.text:00406E6F                 mov     ebx, [eax]
.text:00406E71                 test    ebx, ebx
.text:00406E73                 jnz     loc_407987
.text:00406E79
.text:00406E79 loc_406E79:                             ; CODE XREF: sub_406DA0+BFD↓j
.text:00406E79                                         ; sub_406DA0+C4D↓j
.text:00406E79                 mov     ebp, [esp+13Ch+Str]
.text:00406E80                 test    ebp, ebp
.text:00406E82                 jz      loc_407968
.text:00406E88                 mov     ebx, [edi]
.text:00406E8A                 movzx   eax, byte ptr [ebx]
.text:00406E8D                 test    al, al
.text:00406E8F                 jnz     short loc_406EBD
.text:00406E91
.text:00406E91 loc_406E91:                             ; CODE XREF: sub_406DA0+312↓j
.text:00406E91                                         ; sub_406DA0+320↓j
.text:00406E91                 mov     edx, [esp+13Ch+var_24]
.text:00406E98                 mov     edi, [esp+13Ch+var_20]
.text:00406E9F                 mov     ebx, [esp+13Ch+arg_C]
.text:00406EA6                 mov     [ebx], edx
.text:00406EA8                 mov     [ebx+4], edi
.text:00406EAB
.text:00406EAB loc_406EAB:                             ; CODE XREF: sub_406DA0+BE2↓j
.text:00406EAB                 mov     eax, [esp+13Ch+var_28]
.text:00406EB2
.text:00406EB2 loc_406EB2:                             ; CODE XREF: sub_406DA0+95↑j
.text:00406EB2                                         ; sub_406DA0+16C↓j ...
.text:00406EB2                 add     esp, 12Ch
.text:00406EB8                 pop     ebx
.text:00406EB9                 pop     esi
.text:00406EBA                 pop     edi
.text:00406EBB                 pop     ebp
.text:00406EBC                 retn
.text:00406EBD ; ---------------------------------------------------------------------------
.text:00406EBD
.text:00406EBD loc_406EBD:                             ; CODE XREF: sub_406DA0+EF↑j
.text:00406EBD                 mov     esi, [esp+13Ch+Str]
.text:00406EC4                 mov     ecx, 1
.text:00406EC9                 movsx   ebp, al
.text:00406ECC                 mov     [esp+13Ch+var_30], ecx
.text:00406ED3                 mov     ebx, 400h
.text:00406ED8                 mov     [esp+13Ch+Type], ebp ; Val
.text:00406EDC                 mov     [esp+13Ch+C], esi ; Str
.text:00406EDF                 call    strchr
.text:00406EE4                 test    eax, eax
.text:00406EE6                 jnz     short loc_406F0E
.text:00406EE8
.text:00406EE8 def_406F59:                             ; CODE XREF: sub_406DA0+1B7↓j
.text:00406EE8                                         ; sub_406DA0+1B9↓j
.text:00406EE8                                         ; DATA XREF: ...
.text:00406EE8                 mov     eax, [esp+13Ch+var_28] ; jumptable 00406F59 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00406EEF                 mov     esi, [esp+13Ch+var_24]
.text:00406EF6                 mov     ebp, [esp+13Ch+var_20]
.text:00406EFD                 mov     edi, [esp+13Ch+arg_C]
.text:00406F04                 or      eax, 2
.text:00406F07                 mov     [edi], esi
.text:00406F09                 mov     [edi+4], ebp
.text:00406F0C                 jmp     short loc_406EB2
.text:00406F0E ; ---------------------------------------------------------------------------
.text:00406F0E
.text:00406F0E loc_406F0E:                             ; CODE XREF: sub_406DA0+146↑j
.text:00406F0E                 mov     [esp+13Ch+Type], 30h ; '0' ; Val
.text:00406F16                 mov     edx, [esp+13Ch+Str]
.text:00406F1D                 mov     [esp+13Ch+C], edx ; Str
.text:00406F20                 call    strchr
.text:00406F25                 test    eax, eax
.text:00406F27                 jz      loc_407961
.text:00406F2D                 mov     edx, [edi]
.text:00406F2F                 movsx   eax, byte ptr [edx+1]
.text:00406F33                 cmp     eax, 44h ; 'D'
.text:00406F36                 jz      loc_407927
.text:00406F3C                 cmp     eax, 44h ; 'D'
.text:00406F3F                 jg      loc_40793D
.text:00406F45                 cmp     eax, 42h ; 'B'
.text:00406F48                 jz      loc_407927
.text:00406F4E
.text:00406F4E loc_406F4E:                             ; CODE XREF: sub_406DA0+B98↓j
.text:00406F4E                                         ; sub_406DA0+BA0↓j ...
.text:00406F4E                 movsx   eax, byte ptr [edx]
.text:00406F51                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00406F54                 cmp     eax, 35h
.text:00406F57                 ja      short def_406F59 ; jumptable 00406F59 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00406F59                 jmp     ds:jpt_406F59[eax*4] ; switch jump
.text:00406F59 ; ---------------------------------------------------------------------------
.text:00406F60 jpt_406F59      dd offset loc_4070E4, offset def_406F59, offset def_406F59
.text:00406F60                                         ; DATA XREF: sub_406DA0+1B9↑r
.text:00406F60                 dd offset loc_40713E, offset def_406F59, offset loc_407507 ; jump table for switch statement
.text:00406F60                 dd offset def_406F59, offset def_406F59, offset def_406F59
.text:00406F60                 dd offset loc_407616, offset def_406F59, offset loc_4076DF
.text:00406F60                 dd offset def_406F59, offset def_406F59, offset loc_40724D
.text:00406F60                 dd offset def_406F59, offset def_406F59, offset def_406F59
.text:00406F60                 dd offset loc_4077EE, offset def_406F59, offset def_406F59
.text:00406F60                 dd offset def_406F59, offset def_406F59, offset loc_40735C
.text:00406F60                 dd offset loc_40742E, offset def_406F59, offset def_406F59
.text:00406F60                 dd offset def_406F59, offset def_406F59, offset def_406F59
.text:00406F60                 dd offset def_406F59, offset def_406F59, offset loc_407038
.text:00406F60                 dd offset loc_407500, offset def_406F59, offset def_406F59
.text:00406F60                 dd offset def_406F59, offset loc_407507, offset def_406F59
.text:00406F60                 dd offset def_406F59, offset def_406F59, offset loc_407616
.text:00406F60                 dd offset def_406F59, offset loc_4076DF, offset def_406F59
.text:00406F60                 dd offset def_406F59, offset def_406F59, offset def_406F59
.text:00406F60                 dd offset def_406F59, offset def_406F59, offset loc_4077EE
.text:00406F60                 dd offset def_406F59, offset def_406F59, offset loc_4078C7
.text:00407038 ; ---------------------------------------------------------------------------
.text:00407038
.text:00407038 loc_407038:                             ; CODE XREF: sub_406DA0+1B9↑j
.text:00407038                                         ; DATA XREF: sub_406DA0:jpt_406F59↑o
.text:00407038                 mov     [esp+13Ch+Radix], 200h ; jumptable 00406F59 case 98
.text:00407040                 lea     ebp, [esp+13Ch+var_24]
.text:00407047                 mov     [esp+13Ch+var_130], 0
.text:0040704F                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00407056                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040705E                 call    sub_4129A0
.text:00407063                 mov     esi, [esp+13Ch+var_20]
.text:0040706A                 mov     ecx, [esp+13Ch+var_24]
.text:00407071                 cmp     edx, esi
.text:00407073                 ja      short loc_40707B
.text:00407075                 jb      short loc_4070C5
.text:00407077                 cmp     eax, ecx
.text:00407079                 jb      short loc_4070C5
.text:0040707B
.text:0040707B loc_40707B:                             ; CODE XREF: sub_406DA0+2D3↑j
.text:0040707B                 mov     esi, [ebp+0]
.text:0040707E                 mov     eax, 200h
.text:00407083                 mov     ebx, [ebp+4]
.text:00407086                 mul     esi
.text:00407088                 mov     ecx, ebx
.text:0040708A                 shl     ecx, 9
.text:0040708D
.text:0040708D loc_40708D:                             ; CODE XREF: sub_406DA0+399↓j
.text:0040708D                 mov     esi, edx
.text:0040708F                 lea     edx, [ecx+esi]
.text:00407092
.text:00407092 loc_407092:                             ; CODE XREF: sub_406DA0+B82↓j
.text:00407092                 mov     [ebp+0], eax
.text:00407095                 xor     eax, eax
.text:00407097                 mov     [ebp+4], edx
.text:0040709A
.text:0040709A loc_40709A:                             ; CODE XREF: sub_406DA0+342↓j
.text:0040709A                                         ; sub_406DA0+459↓j ...
.text:0040709A                 mov     edx, [edi]
.text:0040709C
.text:0040709C loc_40709C:                             ; CODE XREF: sub_406DA0+762↓j
.text:0040709C                 or      [esp+13Ch+var_28], eax
.text:004070A3                 mov     eax, [esp+13Ch+var_30]
.text:004070AA                 lea     ecx, [eax+edx]
.text:004070AD                 mov     [edi], ecx
.text:004070AF                 cmp     byte ptr [ecx], 0
.text:004070B2                 jz      loc_406E91
.text:004070B8                 or      [esp+13Ch+var_28], 2
.text:004070C0                 jmp     loc_406E91
.text:004070C5 ; ---------------------------------------------------------------------------
.text:004070C5
.text:004070C5 loc_4070C5:                             ; CODE XREF: sub_406DA0+2D5↑j
.text:004070C5                                         ; sub_406DA0+2D9↑j ...
.text:004070C5                 mov     edx, 0FFFFFFFFh
.text:004070CA                 mov     ebp, 0FFFFFFFFh
.text:004070CF                 mov     eax, 1
.text:004070D4                 mov     [esp+13Ch+var_24], edx
.text:004070DB                 mov     [esp+13Ch+var_20], ebp
.text:004070E2                 jmp     short loc_40709A
.text:004070E4 ; ---------------------------------------------------------------------------
.text:004070E4
.text:004070E4 loc_4070E4:                             ; CODE XREF: sub_406DA0+1B9↑j
.text:004070E4                                         ; DATA XREF: sub_406DA0:jpt_406F59↑o
.text:004070E4                 mov     [esp+13Ch+Radix], 400h ; jumptable 00406F59 case 66
.text:004070EC                 lea     ebp, [esp+13Ch+var_24]
.text:004070F3                 mov     [esp+13Ch+var_130], 0
.text:004070FB                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00407102                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040710A                 call    sub_4129A0
.text:0040710F                 mov     esi, [esp+13Ch+var_20]
.text:00407116                 mov     ecx, [esp+13Ch+var_24]
.text:0040711D                 cmp     edx, esi
.text:0040711F                 ja      short loc_407127
.text:00407121                 jb      short loc_4070C5
.text:00407123                 cmp     eax, ecx
.text:00407125                 jb      short loc_4070C5
.text:00407127
.text:00407127 loc_407127:                             ; CODE XREF: sub_406DA0+37F↑j
.text:00407127                 mov     esi, [ebp+0]
.text:0040712A                 mov     eax, 400h
.text:0040712F                 mov     ebx, [ebp+4]
.text:00407132                 mul     esi
.text:00407134                 mov     ecx, ebx
.text:00407136                 shl     ecx, 0Ah
.text:00407139                 jmp     loc_40708D
.text:0040713E ; ---------------------------------------------------------------------------
.text:0040713E
.text:0040713E loc_40713E:                             ; CODE XREF: sub_406DA0+1B9↑j
.text:0040713E                                         ; DATA XREF: sub_406DA0:jpt_406F59↑o
.text:0040713E                 mov     [esp+13Ch+var_3C], ebx ; jumptable 00406F59 case 69
.text:00407145                 mov     ecx, ebx
.text:00407147                 xor     ebp, ebp
.text:00407149                 mov     [esp+13Ch+var_34], ebp
.text:00407150                 sar     ecx, 1Fh
.text:00407153                 mov     ebx, [esp+13Ch+var_3C]
.text:0040715A                 mov     [esp+13Ch+var_38], ecx
.text:00407161                 lea     esi, [esp+13Ch+var_24]
.text:00407168                 mov     ebp, 5
.text:0040716D                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00407174                 mov     edx, [esp+13Ch+var_38]
.text:0040717B                 mov     [esp+13Ch+Radix], ebx
.text:0040717F                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00407187                 mov     [esp+13Ch+var_130], edx
.text:0040718B                 call    sub_4129A0
.text:00407190                 mov     [esp+13Ch+var_44], eax
.text:00407197                 mov     [esp+13Ch+var_40], edx
.text:0040719E
.text:0040719E loc_40719E:                             ; CODE XREF: sub_406DA0+450↓j
.text:0040719E                 mov     ebx, [esi+4]
.text:004071A1                 mov     eax, [esi]
.text:004071A3                 cmp     [esp+13Ch+var_40], ebx
.text:004071AA                 mov     [esp+13Ch+var_48], ebx
.text:004071B1                 mov     [esp+13Ch+var_4C], eax
.text:004071B8                 ja      short loc_4071FE
.text:004071BA                 mov     ecx, [esp+13Ch+var_48]
.text:004071C1                 cmp     [esp+13Ch+var_40], ecx
.text:004071C8                 jb      short loc_4071D3
.text:004071CA                 cmp     [esp+13Ch+var_44], eax
.text:004071D1                 jnb     short loc_4071FE
.text:004071D3
.text:004071D3 loc_4071D3:                             ; CODE XREF: sub_406DA0+428↑j
.text:004071D3                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004071D9                 mov     eax, 1
.text:004071DE                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004071E5
.text:004071E5 loc_4071E5:                             ; CODE XREF: sub_406DA0+4AB↓j
.text:004071E5                 or      [esp+13Ch+var_34], eax
.text:004071EC                 dec     ebp
.text:004071ED                 cmp     ebp, 0FFFFFFFFh
.text:004071F0                 jnz     short loc_40719E
.text:004071F2                 mov     eax, [esp+13Ch+var_34]
.text:004071F9                 jmp     loc_40709A
.text:004071FE ; ---------------------------------------------------------------------------
.text:004071FE
.text:004071FE loc_4071FE:                             ; CODE XREF: sub_406DA0+418↑j
.text:004071FE                                         ; sub_406DA0+431↑j
.text:004071FE                 mov     ecx, [esp+13Ch+var_38]
.text:00407205                 mov     eax, [esp+13Ch+var_4C]
.text:0040720C                 mov     ebx, [esp+13Ch+var_4C]
.text:00407213                 mul     [esp+13Ch+var_3C]
.text:0040721A                 imul    ebx, ecx
.text:0040721D                 mov     ecx, edx
.text:0040721F                 mov     [esp+13Ch+var_124], eax
.text:00407223                 add     ecx, ebx
.text:00407225                 mov     edx, [esp+13Ch+var_3C]
.text:0040722C                 mov     ebx, [esp+13Ch+var_48]
.text:00407233                 imul    edx, ebx
.text:00407236                 mov     ebx, [esp+13Ch+var_124]
.text:0040723A                 mov     [esi], ebx
.text:0040723C                 add     ecx, edx
.text:0040723E                 mov     [esp+13Ch+var_120], ecx
.text:00407242                 mov     eax, [esp+13Ch+var_120]
.text:00407246                 mov     [esi+4], eax
.text:00407249                 xor     eax, eax
.text:0040724B                 jmp     short loc_4071E5
.text:0040724D ; ---------------------------------------------------------------------------
.text:0040724D
.text:0040724D loc_40724D:                             ; CODE XREF: sub_406DA0+1B9↑j
.text:0040724D                                         ; DATA XREF: sub_406DA0:jpt_406F59↑o
.text:0040724D                 mov     [esp+13Ch+var_A4], ebx ; jumptable 00406F59 case 80
.text:00407254                 mov     eax, ebx
.text:00407256                 xor     ebp, ebp
.text:00407258                 mov     [esp+13Ch+var_98], ebp
.text:0040725F                 sar     eax, 1Fh
.text:00407262                 mov     edx, [esp+13Ch+var_A4]
.text:00407269                 mov     [esp+13Ch+var_A0], eax
.text:00407270                 lea     esi, [esp+13Ch+var_24]
.text:00407277                 mov     ebp, 4
.text:0040727C                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00407283                 mov     ebx, [esp+13Ch+var_A0]
.text:0040728A                 mov     [esp+13Ch+Radix], edx
.text:0040728E                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00407296                 mov     [esp+13Ch+var_130], ebx
.text:0040729A                 call    sub_4129A0
.text:0040729F                 mov     [esp+13Ch+var_AC], eax
.text:004072A6                 mov     [esp+13Ch+var_A8], edx
.text:004072AD
.text:004072AD loc_4072AD:                             ; CODE XREF: sub_406DA0+55F↓j
.text:004072AD                 mov     ebx, [esi+4]
.text:004072B0                 mov     edx, [esi]
.text:004072B2                 cmp     [esp+13Ch+var_A8], ebx
.text:004072B9                 mov     [esp+13Ch+var_B0], ebx
.text:004072C0                 mov     [esp+13Ch+var_B4], edx
.text:004072C7                 ja      short loc_40730D
.text:004072C9                 mov     eax, [esp+13Ch+var_B0]
.text:004072D0                 cmp     [esp+13Ch+var_A8], eax
.text:004072D7                 jb      short loc_4072E2
.text:004072D9                 cmp     [esp+13Ch+var_AC], edx
.text:004072E0                 jnb     short loc_40730D
.text:004072E2
.text:004072E2 loc_4072E2:                             ; CODE XREF: sub_406DA0+537↑j
.text:004072E2                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004072E8                 mov     eax, 1
.text:004072ED                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004072F4
.text:004072F4 loc_4072F4:                             ; CODE XREF: sub_406DA0+5BA↓j
.text:004072F4                 or      [esp+13Ch+var_98], eax
.text:004072FB                 dec     ebp
.text:004072FC                 cmp     ebp, 0FFFFFFFFh
.text:004072FF                 jnz     short loc_4072AD
.text:00407301                 mov     eax, [esp+13Ch+var_98]
.text:00407308                 jmp     loc_40709A
.text:0040730D ; ---------------------------------------------------------------------------
.text:0040730D
.text:0040730D loc_40730D:                             ; CODE XREF: sub_406DA0+527↑j
.text:0040730D                                         ; sub_406DA0+540↑j
.text:0040730D                 mov     ecx, [esp+13Ch+var_A0]
.text:00407314                 mov     eax, [esp+13Ch+var_B4]
.text:0040731B                 mov     ebx, [esp+13Ch+var_B4]
.text:00407322                 mul     [esp+13Ch+var_A4]
.text:00407329                 imul    ebx, ecx
.text:0040732C                 mov     ecx, edx
.text:0040732E                 mov     [esp+13Ch+var_124], eax
.text:00407332                 add     ecx, ebx
.text:00407334                 mov     edx, [esp+13Ch+var_A4]
.text:0040733B                 mov     ebx, [esp+13Ch+var_B0]
.text:00407342                 xor     eax, eax
.text:00407344                 imul    edx, ebx
.text:00407347                 add     ecx, edx
.text:00407349                 mov     [esp+13Ch+var_120], ecx
.text:0040734D                 mov     ebx, [esp+13Ch+var_120]
.text:00407351                 mov     ecx, [esp+13Ch+var_124]
.text:00407355                 mov     [esi+4], ebx
.text:00407358                 mov     [esi], ecx
.text:0040735A                 jmp     short loc_4072F4
.text:0040735C ; ---------------------------------------------------------------------------
.text:0040735C
.text:0040735C loc_40735C:                             ; CODE XREF: sub_406DA0+1B9↑j
.text:0040735C                                         ; DATA XREF: sub_406DA0:jpt_406F59↑o
.text:0040735C                 mov     [esp+13Ch+var_E4], ebx ; jumptable 00406F59 case 89
.text:00407360                 mov     eax, ebx
.text:00407362                 lea     esi, [esp+13Ch+var_24]
.text:00407369                 mov     [esp+13Ch+var_D8], 0
.text:00407371                 sar     eax, 1Fh
.text:00407374                 mov     edx, [esp+13Ch+var_E4]
.text:00407378                 mov     [esp+13Ch+var_E0], eax
.text:0040737C                 mov     ebp, 7
.text:00407381                 mov     ebx, [esp+13Ch+var_E0]
.text:00407385                 mov     [esp+13Ch+Radix], edx
.text:00407389                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00407390                 mov     [esp+13Ch+var_130], ebx
.text:00407394                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040739C                 call    sub_4129A0
.text:004073A1                 mov     [esp+13Ch+var_EC], eax
.text:004073A5                 mov     [esp+13Ch+var_E8], edx
.text:004073A9
.text:004073A9 loc_4073A9:                             ; CODE XREF: sub_406DA0+646↓j
.text:004073A9                 mov     ebx, [esi+4]
.text:004073AC                 mov     edx, [esi]
.text:004073AE                 cmp     [esp+13Ch+var_E8], ebx
.text:004073B2                 mov     [esp+13Ch+var_F0], ebx
.text:004073B6                 mov     [esp+13Ch+var_F4], edx
.text:004073BA                 ja      short loc_4073F1
.text:004073BC                 mov     eax, [esp+13Ch+var_F0]
.text:004073C0                 cmp     [esp+13Ch+var_E8], eax
.text:004073C4                 jb      short loc_4073CC
.text:004073C6                 cmp     [esp+13Ch+var_EC], edx
.text:004073CA                 jnb     short loc_4073F1
.text:004073CC
.text:004073CC loc_4073CC:                             ; CODE XREF: sub_406DA0+624↑j
.text:004073CC                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004073D2                 mov     eax, 1
.text:004073D7                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004073DE
.text:004073DE loc_4073DE:                             ; CODE XREF: sub_406DA0+68C↓j
.text:004073DE                 or      [esp+13Ch+var_D8], eax
.text:004073E2                 dec     ebp
.text:004073E3                 cmp     ebp, 0FFFFFFFFh
.text:004073E6                 jnz     short loc_4073A9
.text:004073E8                 mov     eax, [esp+13Ch+var_D8]
.text:004073EC                 jmp     loc_40709A
.text:004073F1 ; ---------------------------------------------------------------------------
.text:004073F1
.text:004073F1 loc_4073F1:                             ; CODE XREF: sub_406DA0+61A↑j
.text:004073F1                                         ; sub_406DA0+62A↑j
.text:004073F1                 mov     ecx, [esp+13Ch+var_E0]
.text:004073F5                 mov     eax, [esp+13Ch+var_F4]
.text:004073F9                 mov     ebx, [esp+13Ch+var_F4]
.text:004073FD                 mul     [esp+13Ch+var_E4]
.text:00407401                 imul    ebx, ecx
.text:00407404                 mov     ecx, edx
.text:00407406                 mov     [esp+13Ch+var_124], eax
.text:0040740A                 add     ecx, ebx
.text:0040740C                 mov     edx, [esp+13Ch+var_E4]
.text:00407410                 mov     ebx, [esp+13Ch+var_F0]
.text:00407414                 xor     eax, eax
.text:00407416                 imul    edx, ebx
.text:00407419                 add     ecx, edx
.text:0040741B                 mov     [esp+13Ch+var_120], ecx
.text:0040741F                 mov     ebx, [esp+13Ch+var_120]
.text:00407423                 mov     ecx, [esp+13Ch+var_124]
.text:00407427                 mov     [esi+4], ebx
.text:0040742A                 mov     [esi], ecx
.text:0040742C                 jmp     short loc_4073DE
.text:0040742E ; ---------------------------------------------------------------------------
.text:0040742E
.text:0040742E loc_40742E:                             ; CODE XREF: sub_406DA0+1B9↑j
.text:0040742E                                         ; DATA XREF: sub_406DA0:jpt_406F59↑o
.text:0040742E                 mov     [esp+13Ch+var_104], ebx ; jumptable 00406F59 case 90
.text:00407432                 mov     eax, ebx
.text:00407434                 lea     esi, [esp+13Ch+var_24]
.text:0040743B                 mov     [esp+13Ch+var_F8], 0
.text:00407443                 sar     eax, 1Fh
.text:00407446                 mov     edx, [esp+13Ch+var_104]
.text:0040744A                 mov     [esp+13Ch+var_100], eax
.text:0040744E                 mov     ebp, 6
.text:00407453                 mov     ebx, [esp+13Ch+var_100]
.text:00407457                 mov     [esp+13Ch+Radix], edx
.text:0040745B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00407462                 mov     [esp+13Ch+var_130], ebx
.text:00407466                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040746E                 call    sub_4129A0
.text:00407473                 mov     [esp+13Ch+var_10C], eax
.text:00407477                 mov     [esp+13Ch+var_108], edx
.text:0040747B
.text:0040747B loc_40747B:                             ; CODE XREF: sub_406DA0+718↓j
.text:0040747B                 mov     ebx, [esi+4]
.text:0040747E                 mov     edx, [esi]
.text:00407480                 cmp     [esp+13Ch+var_108], ebx
.text:00407484                 mov     [esp+13Ch+var_110], ebx
.text:00407488                 mov     [esp+13Ch+var_114], edx
.text:0040748C                 ja      short loc_4074C3
.text:0040748E                 mov     eax, [esp+13Ch+var_110]
.text:00407492                 cmp     [esp+13Ch+var_108], eax
.text:00407496                 jb      short loc_40749E
.text:00407498                 cmp     [esp+13Ch+var_10C], edx
.text:0040749C                 jnb     short loc_4074C3
.text:0040749E
.text:0040749E loc_40749E:                             ; CODE XREF: sub_406DA0+6F6↑j
.text:0040749E                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004074A4                 mov     eax, 1
.text:004074A9                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004074B0
.text:004074B0 loc_4074B0:                             ; CODE XREF: sub_406DA0+75E↓j
.text:004074B0                 or      [esp+13Ch+var_F8], eax
.text:004074B4                 dec     ebp
.text:004074B5                 cmp     ebp, 0FFFFFFFFh
.text:004074B8                 jnz     short loc_40747B
.text:004074BA                 mov     eax, [esp+13Ch+var_F8]
.text:004074BE                 jmp     loc_40709A
.text:004074C3 ; ---------------------------------------------------------------------------
.text:004074C3
.text:004074C3 loc_4074C3:                             ; CODE XREF: sub_406DA0+6EC↑j
.text:004074C3                                         ; sub_406DA0+6FC↑j
.text:004074C3                 mov     eax, [esp+13Ch+var_114]
.text:004074C7                 mov     ebx, [esp+13Ch+var_100]
.text:004074CB                 mul     [esp+13Ch+var_104]
.text:004074CF                 mov     ecx, edx
.text:004074D1                 mov     edx, [esp+13Ch+var_104]
.text:004074D5                 mov     [esp+13Ch+var_124], eax
.text:004074D9                 mov     eax, [esp+13Ch+var_114]
.text:004074DD                 imul    eax, ebx
.text:004074E0                 mov     ebx, [esp+13Ch+var_110]
.text:004074E4                 imul    edx, ebx
.text:004074E7                 add     ecx, eax
.text:004074E9                 xor     eax, eax
.text:004074EB                 add     ecx, edx
.text:004074ED                 mov     [esp+13Ch+var_120], ecx
.text:004074F1                 mov     ebx, [esp+13Ch+var_120]
.text:004074F5                 mov     ecx, [esp+13Ch+var_124]
.text:004074F9                 mov     [esi+4], ebx
.text:004074FC                 mov     [esi], ecx
.text:004074FE                 jmp     short loc_4074B0
.text:00407500 ; ---------------------------------------------------------------------------
.text:00407500
.text:00407500 loc_407500:                             ; CODE XREF: sub_406DA0+1B9↑j
.text:00407500                                         ; DATA XREF: sub_406DA0:jpt_406F59↑o
.text:00407500                 xor     eax, eax        ; jumptable 00406F59 case 99
.text:00407502                 jmp     loc_40709C
.text:00407507 ; ---------------------------------------------------------------------------
.text:00407507
.text:00407507 loc_407507:                             ; CODE XREF: sub_406DA0+1B9↑j
.text:00407507                                         ; DATA XREF: sub_406DA0:jpt_406F59↑o
.text:00407507                 mov     [esp+13Ch+var_5C], ebx ; jumptable 00406F59 cases 71,103
.text:0040750E                 mov     eax, ebx
.text:00407510                 xor     ebp, ebp
.text:00407512                 mov     [esp+13Ch+var_50], ebp
.text:00407519                 sar     eax, 1Fh
.text:0040751C                 mov     edx, [esp+13Ch+var_5C]
.text:00407523                 mov     [esp+13Ch+var_58], eax
.text:0040752A                 lea     esi, [esp+13Ch+var_24]
.text:00407531                 mov     ebp, 2
.text:00407536                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040753D                 mov     ebx, [esp+13Ch+var_58]
.text:00407544                 mov     [esp+13Ch+Radix], edx
.text:00407548                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00407550                 mov     [esp+13Ch+var_130], ebx
.text:00407554                 call    sub_4129A0
.text:00407559                 mov     [esp+13Ch+var_64], eax
.text:00407560                 mov     [esp+13Ch+var_60], edx
.text:00407567
.text:00407567 loc_407567:                             ; CODE XREF: sub_406DA0+819↓j
.text:00407567                 mov     ebx, [esi+4]
.text:0040756A                 mov     edx, [esi]
.text:0040756C                 cmp     [esp+13Ch+var_60], ebx
.text:00407573                 mov     [esp+13Ch+var_68], ebx
.text:0040757A                 mov     [esp+13Ch+var_6C], edx
.text:00407581                 ja      short loc_4075C7
.text:00407583                 mov     eax, [esp+13Ch+var_68]
.text:0040758A                 cmp     [esp+13Ch+var_60], eax
.text:00407591                 jb      short loc_40759C
.text:00407593                 cmp     [esp+13Ch+var_64], edx
.text:0040759A                 jnb     short loc_4075C7
.text:0040759C
.text:0040759C loc_40759C:                             ; CODE XREF: sub_406DA0+7F1↑j
.text:0040759C                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004075A2                 mov     eax, 1
.text:004075A7                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004075AE
.text:004075AE loc_4075AE:                             ; CODE XREF: sub_406DA0+874↓j
.text:004075AE                 or      [esp+13Ch+var_50], eax
.text:004075B5                 dec     ebp
.text:004075B6                 cmp     ebp, 0FFFFFFFFh
.text:004075B9                 jnz     short loc_407567
.text:004075BB                 mov     eax, [esp+13Ch+var_50]
.text:004075C2                 jmp     loc_40709A
.text:004075C7 ; ---------------------------------------------------------------------------
.text:004075C7
.text:004075C7 loc_4075C7:                             ; CODE XREF: sub_406DA0+7E1↑j
.text:004075C7                                         ; sub_406DA0+7FA↑j
.text:004075C7                 mov     ecx, [esp+13Ch+var_58]
.text:004075CE                 mov     eax, [esp+13Ch+var_6C]
.text:004075D5                 mov     ebx, [esp+13Ch+var_6C]
.text:004075DC                 mul     [esp+13Ch+var_5C]
.text:004075E3                 imul    ebx, ecx
.text:004075E6                 mov     ecx, edx
.text:004075E8                 mov     [esp+13Ch+var_124], eax
.text:004075EC                 add     ecx, ebx
.text:004075EE                 mov     edx, [esp+13Ch+var_5C]
.text:004075F5                 mov     ebx, [esp+13Ch+var_68]
.text:004075FC                 xor     eax, eax
.text:004075FE                 imul    edx, ebx
.text:00407601                 add     ecx, edx
.text:00407603                 mov     [esp+13Ch+var_120], ecx
.text:00407607                 mov     ebx, [esp+13Ch+var_120]
.text:0040760B                 mov     ecx, [esp+13Ch+var_124]
.text:0040760F                 mov     [esi+4], ebx
.text:00407612                 mov     [esi], ecx
.text:00407614                 jmp     short loc_4075AE
.text:00407616 ; ---------------------------------------------------------------------------
.text:00407616
.text:00407616 loc_407616:                             ; CODE XREF: sub_406DA0+1B9↑j
.text:00407616                                         ; DATA XREF: sub_406DA0:jpt_406F59↑o
.text:00407616                 mov     [esp+13Ch+var_74], ebx ; jumptable 00406F59 cases 75,107
.text:0040761D                 mov     eax, ebx
.text:0040761F                 lea     esi, [esp+13Ch+var_24]
.text:00407626                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040762D                 sar     eax, 1Fh
.text:00407630                 mov     edx, [esp+13Ch+var_74]
.text:00407637                 mov     [esp+13Ch+var_70], eax
.text:0040763E                 mov     ebx, [esp+13Ch+var_70]
.text:00407645                 mov     [esp+13Ch+Radix], edx
.text:00407649                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00407651                 mov     [esp+13Ch+var_130], ebx
.text:00407655                 call    sub_4129A0
.text:0040765A                 mov     ebp, [esp+13Ch+var_20]
.text:00407661                 mov     ecx, [esp+13Ch+var_24]
.text:00407668                 cmp     edx, ebp
.text:0040766A                 mov     [esp+13Ch+var_11C], ecx
.text:0040766E                 mov     [esp+13Ch+var_118], ebp
.text:00407672                 ja      short loc_407699
.text:00407674                 cmp     edx, [esp+13Ch+var_118]
.text:00407678                 jb      short loc_40767E
.text:0040767A                 cmp     eax, ecx
.text:0040767C                 jnb     short loc_407699
.text:0040767E
.text:0040767E loc_40767E:                             ; CODE XREF: sub_406DA0+8D8↑j
.text:0040767E                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00407684                 mov     edx, 1
.text:00407689                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00407690
.text:00407690 loc_407690:                             ; CODE XREF: sub_406DA0+93D↓j
.text:00407690                 xor     eax, eax
.text:00407692                 or      eax, edx
.text:00407694                 jmp     loc_40709A
.text:00407699 ; ---------------------------------------------------------------------------
.text:00407699
.text:00407699 loc_407699:                             ; CODE XREF: sub_406DA0+8D2↑j
.text:00407699                                         ; sub_406DA0+8DC↑j
.text:00407699                 mov     eax, [esp+13Ch+var_11C]
.text:0040769D                 mov     ebp, [esp+13Ch+var_11C]
.text:004076A1                 mov     ebx, [esp+13Ch+var_118]
.text:004076A5                 mul     [esp+13Ch+var_74]
.text:004076AC                 mov     [esp+13Ch+var_124], eax
.text:004076B0                 mov     eax, [esp+13Ch+var_70]
.text:004076B7                 mov     ecx, [esp+13Ch+var_124]
.text:004076BB                 imul    ebp, eax
.text:004076BE                 mov     eax, edx
.text:004076C0                 xor     edx, edx
.text:004076C2                 mov     [esi], ecx
.text:004076C4                 add     eax, ebp
.text:004076C6                 mov     ebp, [esp+13Ch+var_74]
.text:004076CD                 imul    ebp, ebx
.text:004076D0                 add     eax, ebp
.text:004076D2                 mov     [esp+13Ch+var_120], eax
.text:004076D6                 mov     ebp, [esp+13Ch+var_120]
.text:004076DA                 mov     [esi+4], ebp
.text:004076DD                 jmp     short loc_407690
.text:004076DF ; ---------------------------------------------------------------------------
.text:004076DF
.text:004076DF loc_4076DF:                             ; CODE XREF: sub_406DA0+1B9↑j
.text:004076DF                                         ; DATA XREF: sub_406DA0:jpt_406F59↑o
.text:004076DF                 mov     [esp+13Ch+var_84], ebx ; jumptable 00406F59 cases 77,109
.text:004076E6                 mov     eax, ebx
.text:004076E8                 xor     ebp, ebp
.text:004076EA                 mov     [esp+13Ch+var_78], ebp
.text:004076F1                 sar     eax, 1Fh
.text:004076F4                 mov     edx, [esp+13Ch+var_84]
.text:004076FB                 mov     [esp+13Ch+var_80], eax
.text:00407702                 lea     esi, [esp+13Ch+var_24]
.text:00407709                 mov     ebp, 1
.text:0040770E                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00407715                 mov     ecx, [esp+13Ch+var_80]
.text:0040771C                 mov     [esp+13Ch+Radix], edx
.text:00407720                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00407728                 mov     [esp+13Ch+var_130], ecx
.text:0040772C                 call    sub_4129A0
.text:00407731                 mov     [esp+13Ch+var_8C], eax
.text:00407738                 mov     [esp+13Ch+var_88], edx
.text:0040773F
.text:0040773F loc_40773F:                             ; CODE XREF: sub_406DA0+9F1↓j
.text:0040773F                 mov     ebx, [esi+4]
.text:00407742                 mov     edx, [esi]
.text:00407744                 cmp     [esp+13Ch+var_88], ebx
.text:0040774B                 mov     [esp+13Ch+var_90], ebx
.text:00407752                 mov     [esp+13Ch+var_94], edx
.text:00407759                 ja      short loc_40779F
.text:0040775B                 mov     eax, [esp+13Ch+var_90]
.text:00407762                 cmp     [esp+13Ch+var_88], eax
.text:00407769                 jb      short loc_407774
.text:0040776B                 cmp     [esp+13Ch+var_8C], edx
.text:00407772                 jnb     short loc_40779F
.text:00407774
.text:00407774 loc_407774:                             ; CODE XREF: sub_406DA0+9C9↑j
.text:00407774                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040777A                 mov     eax, 1
.text:0040777F                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00407786
.text:00407786 loc_407786:                             ; CODE XREF: sub_406DA0+A4C↓j
.text:00407786                 or      [esp+13Ch+var_78], eax
.text:0040778D                 dec     ebp
.text:0040778E                 cmp     ebp, 0FFFFFFFFh
.text:00407791                 jnz     short loc_40773F
.text:00407793                 mov     eax, [esp+13Ch+var_78]
.text:0040779A                 jmp     loc_40709A
.text:0040779F ; ---------------------------------------------------------------------------
.text:0040779F
.text:0040779F loc_40779F:                             ; CODE XREF: sub_406DA0+9B9↑j
.text:0040779F                                         ; sub_406DA0+9D2↑j
.text:0040779F                 mov     ecx, [esp+13Ch+var_80]
.text:004077A6                 mov     eax, [esp+13Ch+var_94]
.text:004077AD                 mov     ebx, [esp+13Ch+var_94]
.text:004077B4                 mul     [esp+13Ch+var_84]
.text:004077BB                 imul    ebx, ecx
.text:004077BE                 mov     ecx, edx
.text:004077C0                 mov     [esp+13Ch+var_124], eax
.text:004077C4                 add     ecx, ebx
.text:004077C6                 mov     edx, [esp+13Ch+var_84]
.text:004077CD                 mov     ebx, [esp+13Ch+var_90]
.text:004077D4                 xor     eax, eax
.text:004077D6                 imul    edx, ebx
.text:004077D9                 add     ecx, edx
.text:004077DB                 mov     [esp+13Ch+var_120], ecx
.text:004077DF                 mov     ebx, [esp+13Ch+var_120]
.text:004077E3                 mov     ecx, [esp+13Ch+var_124]
.text:004077E7                 mov     [esi+4], ebx
.text:004077EA                 mov     [esi], ecx
.text:004077EC                 jmp     short loc_407786
.text:004077EE ; ---------------------------------------------------------------------------
.text:004077EE
.text:004077EE loc_4077EE:                             ; CODE XREF: sub_406DA0+1B9↑j
.text:004077EE                                         ; DATA XREF: sub_406DA0:jpt_406F59↑o
.text:004077EE                 mov     [esp+13Ch+var_C4], ebx ; jumptable 00406F59 cases 84,116
.text:004077F2                 mov     eax, ebx
.text:004077F4                 xor     ebp, ebp
.text:004077F6                 mov     [esp+13Ch+var_B8], ebp
.text:004077FD                 sar     eax, 1Fh
.text:00407800                 mov     edx, [esp+13Ch+var_C4]
.text:00407804                 mov     [esp+13Ch+var_C0], eax
.text:00407808                 lea     esi, [esp+13Ch+var_24]
.text:0040780F                 mov     ebp, 3
.text:00407814                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040781B                 mov     ebx, [esp+13Ch+var_C0]
.text:0040781F                 mov     [esp+13Ch+Radix], edx
.text:00407823                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040782B                 mov     [esp+13Ch+var_130], ebx
.text:0040782F                 call    sub_4129A0
.text:00407834                 mov     [esp+13Ch+var_CC], eax
.text:00407838                 mov     [esp+13Ch+var_C8], edx
.text:0040783C
.text:0040783C loc_40783C:                             ; CODE XREF: sub_406DA0+ADC↓j
.text:0040783C                 mov     ebx, [esi+4]
.text:0040783F                 mov     edx, [esi]
.text:00407841                 cmp     [esp+13Ch+var_C8], ebx
.text:00407845                 mov     [esp+13Ch+var_D0], ebx
.text:00407849                 mov     [esp+13Ch+var_D4], edx
.text:0040784D                 ja      short loc_40788A
.text:0040784F                 mov     eax, [esp+13Ch+var_D0]
.text:00407853                 cmp     [esp+13Ch+var_C8], eax
.text:00407857                 jb      short loc_40785F
.text:00407859                 cmp     [esp+13Ch+var_CC], edx
.text:0040785D                 jnb     short loc_40788A
.text:0040785F
.text:0040785F loc_40785F:                             ; CODE XREF: sub_406DA0+AB7↑j
.text:0040785F                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00407865                 mov     eax, 1
.text:0040786A                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00407871
.text:00407871 loc_407871:                             ; CODE XREF: sub_406DA0+B25↓j
.text:00407871                 or      [esp+13Ch+var_B8], eax
.text:00407878                 dec     ebp
.text:00407879                 cmp     ebp, 0FFFFFFFFh
.text:0040787C                 jnz     short loc_40783C
.text:0040787E                 mov     eax, [esp+13Ch+var_B8]
.text:00407885                 jmp     loc_40709A
.text:0040788A ; ---------------------------------------------------------------------------
.text:0040788A
.text:0040788A loc_40788A:                             ; CODE XREF: sub_406DA0+AAD↑j
.text:0040788A                                         ; sub_406DA0+ABD↑j
.text:0040788A                 mov     ecx, [esp+13Ch+var_C0]
.text:0040788E                 mov     eax, [esp+13Ch+var_D4]
.text:00407892                 mov     ebx, [esp+13Ch+var_D4]
.text:00407896                 mul     [esp+13Ch+var_C4]
.text:0040789A                 imul    ebx, ecx
.text:0040789D                 mov     ecx, edx
.text:0040789F                 mov     [esp+13Ch+var_124], eax
.text:004078A3                 add     ecx, ebx
.text:004078A5                 mov     edx, [esp+13Ch+var_C4]
.text:004078A9                 mov     ebx, [esp+13Ch+var_D0]
.text:004078AD                 xor     eax, eax
.text:004078AF                 imul    edx, ebx
.text:004078B2                 add     ecx, edx
.text:004078B4                 mov     [esp+13Ch+var_120], ecx
.text:004078B8                 mov     ebx, [esp+13Ch+var_120]
.text:004078BC                 mov     ecx, [esp+13Ch+var_124]
.text:004078C0                 mov     [esi+4], ebx
.text:004078C3                 mov     [esi], ecx
.text:004078C5                 jmp     short loc_407871
.text:004078C7 ; ---------------------------------------------------------------------------
.text:004078C7
.text:004078C7 loc_4078C7:                             ; CODE XREF: sub_406DA0+1B9↑j
.text:004078C7                                         ; DATA XREF: sub_406DA0:jpt_406F59↑o
.text:004078C7                 mov     [esp+13Ch+Radix], 2 ; jumptable 00406F59 case 119
.text:004078CF                 lea     ebp, [esp+13Ch+var_24]
.text:004078D6                 mov     [esp+13Ch+var_130], 0
.text:004078DE                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004078E5                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004078ED                 call    sub_4129A0
.text:004078F2                 mov     esi, [esp+13Ch+var_20]
.text:004078F9                 mov     ecx, [esp+13Ch+var_24]
.text:00407900                 cmp     edx, esi
.text:00407902                 ja      short loc_407912
.text:00407904                 jb      loc_4070C5
.text:0040790A                 cmp     eax, ecx
.text:0040790C                 jb      loc_4070C5
.text:00407912
.text:00407912 loc_407912:                             ; CODE XREF: sub_406DA0+B62↑j
.text:00407912                 mov     esi, [ebp+0]
.text:00407915                 mov     eax, 2
.text:0040791A                 mov     ecx, [ebp+4]
.text:0040791D                 mul     esi
.text:0040791F                 lea     edx, [edx+ecx*2]
.text:00407922                 jmp     loc_407092
.text:00407927 ; ---------------------------------------------------------------------------
.text:00407927
.text:00407927 loc_407927:                             ; CODE XREF: sub_406DA0+196↑j
.text:00407927                                         ; sub_406DA0+1A8↑j
.text:00407927                 mov     esi, 2
.text:0040792C                 mov     ebx, 3E8h
.text:00407931                 mov     [esp+13Ch+var_30], esi
.text:00407938                 jmp     loc_406F4E
.text:0040793D ; ---------------------------------------------------------------------------
.text:0040793D
.text:0040793D loc_40793D:                             ; CODE XREF: sub_406DA0+19F↑j
.text:0040793D                 cmp     eax, 69h ; 'i'
.text:00407940                 jnz     loc_406F4E
.text:00407946                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040794A                 jnz     loc_406F4E
.text:00407950                 mov     eax, 3
.text:00407955                 mov     [esp+13Ch+var_30], eax
.text:0040795C                 jmp     loc_406F4E
.text:00407961 ; ---------------------------------------------------------------------------
.text:00407961
.text:00407961 loc_407961:                             ; CODE XREF: sub_406DA0+187↑j
.text:00407961                 mov     edx, [edi]
.text:00407963                 jmp     loc_406F4E
.text:00407968 ; ---------------------------------------------------------------------------
.text:00407968
.text:00407968 loc_407968:                             ; CODE XREF: sub_406DA0+E2↑j
.text:00407968                 mov     edx, [esp+13Ch+var_24]
.text:0040796F                 mov     ecx, [esp+13Ch+var_20]
.text:00407976                 mov     edi, [esp+13Ch+arg_C]
.text:0040797D                 mov     [edi], edx
.text:0040797F                 mov     [edi+4], ecx
.text:00407982                 jmp     loc_406EAB
.text:00407987 ; ---------------------------------------------------------------------------
.text:00407987
.text:00407987 loc_407987:                             ; CODE XREF: sub_406DA0+D3↑j
.text:00407987                 call    _errno
.text:0040798C                 cmp     dword ptr [eax], 22h ; '"'
.text:0040798F                 jnz     short loc_4079A2
.text:00407991                 mov     esi, 1
.text:00407996                 mov     [esp+13Ch+var_28], esi
.text:0040799D                 jmp     loc_406E79
.text:004079A2 ; ---------------------------------------------------------------------------
.text:004079A2
.text:004079A2 loc_4079A2:                             ; CODE XREF: sub_406DA0+BEF↑j
.text:004079A2                                         ; sub_406DA0+C15↓j ...
.text:004079A2                 mov     eax, 4
.text:004079A7                 jmp     loc_406EB2
.text:004079AC ; ---------------------------------------------------------------------------
.text:004079AC
.text:004079AC loc_4079AC:                             ; CODE XREF: sub_406DA0+C4↑j
.text:004079AC                 mov     ebx, [esp+13Ch+Str]
.text:004079B3                 test    ebx, ebx
.text:004079B5                 jz      short loc_4079A2
.text:004079B7                 movzx   eax, byte ptr [eax]
.text:004079BA                 test    al, al
.text:004079BC                 jz      short loc_4079A2
.text:004079BE                 mov     esi, [esp+13Ch+Str]
.text:004079C5                 movsx   ebp, al
.text:004079C8                 mov     [esp+13Ch+Type], ebp ; Val
.text:004079CC                 mov     [esp+13Ch+C], esi ; Str
.text:004079CF                 call    strchr
.text:004079D4                 test    eax, eax
.text:004079D6                 jz      short loc_4079A2
.text:004079D8                 mov     ecx, 1
.text:004079DD                 xor     edx, edx
.text:004079DF                 mov     [esp+13Ch+var_24], ecx
.text:004079E6                 mov     [esp+13Ch+var_20], edx
.text:004079ED                 jmp     loc_406E79
.text:004079F2 ; ---------------------------------------------------------------------------
.text:004079F2
.text:004079F2 loc_4079F2:                             ; CODE XREF: sub_406DA0+61↑j
.text:004079F2                 mov     eax, ds:_pctype
.text:004079F7                 mov     ecx, [eax]
.text:004079F9                 movzx   eax, word ptr [ecx+edx*2]
.text:004079FD                 and     eax, 8
.text:00407A00                 jmp     loc_406E17
.text:00407A05 ; ---------------------------------------------------------------------------
.text:00407A05
.text:00407A05 loc_407A05:                             ; CODE XREF: sub_406DA0+33↑j
.text:00407A05                 lea     edi, [esp+13Ch+var_18]
.text:00407A0C                 jmp     loc_406DD9
.text:00407A11 ; ---------------------------------------------------------------------------
.text:00407A11
.text:00407A11 loc_407A11:                             ; CODE XREF: sub_406DA0+24↑j
.text:00407A11                 mov     [esp+13Ch+Radix], 70h ; 'p'
.text:00407A19                 mov     [esp+13Ch+Type], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:00407A21                 mov     [esp+13Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00407A28                 call    _assert
.text:00407A28 sub_406DA0      endp
.text:00407A28
.text:00407A28 ; ---------------------------------------------------------------------------
.text:00407A2D                 align 10h
.text:00407A30
.text:00407A30 ; =============== S U B R O U T I N E =======================================
.text:00407A30
.text:00407A30
.text:00407A30 sub_407A30      proc near               ; CODE XREF: sub_403DD0+2FD↑p
.text:00407A30                                         ; sub_403DD0+472↑p ...
.text:00407A30
.text:00407A30 var_1C          = dword ptr -1Ch
.text:00407A30 var_18          = dword ptr -18h
.text:00407A30 var_14          = dword ptr -14h
.text:00407A30 arg_0           = dword ptr  4
.text:00407A30 arg_4           = dword ptr  8
.text:00407A30 arg_8           = dword ptr  0Ch
.text:00407A30
.text:00407A30                 push    ebp
.text:00407A31                 push    edi
.text:00407A32                 xor     edi, edi
.text:00407A34                 push    esi
.text:00407A35                 push    ebx
.text:00407A36                 sub     esp, 0Ch
.text:00407A39                 mov     ebx, [esp+1Ch+arg_8]
.text:00407A3D                 mov     ebp, [esp+1Ch+arg_0]
.text:00407A41                 mov     esi, [esp+1Ch+arg_4]
.text:00407A45                 test    ebx, ebx
.text:00407A47                 jnz     short loc_407A53
.text:00407A49
.text:00407A49 loc_407A49:                             ; CODE XREF: sub_407A30+36↓j
.text:00407A49                                         ; sub_407A30+44↓j ...
.text:00407A49                 add     esp, 0Ch
.text:00407A4C                 mov     eax, edi
.text:00407A4E                 pop     ebx
.text:00407A4F                 pop     esi
.text:00407A50                 pop     edi
.text:00407A51                 pop     ebp
.text:00407A52                 retn
.text:00407A53 ; ---------------------------------------------------------------------------
.text:00407A53
.text:00407A53 loc_407A53:                             ; CODE XREF: sub_407A30+17↑j
.text:00407A53                                         ; sub_407A30+42↓j
.text:00407A53                 mov     [esp+1Ch+var_14], ebx
.text:00407A57                 mov     [esp+1Ch+var_18], esi
.text:00407A5B                 mov     [esp+1Ch+var_1C], ebp
.text:00407A5E                 call    sub_40A440
.text:00407A63                 cmp     eax, 0FFFFFFFFh
.text:00407A66                 jz      short loc_407A49
.text:00407A68                 test    eax, eax
.text:00407A6A                 jz      short loc_407A76
.text:00407A6C                 add     edi, eax
.text:00407A6E                 add     esi, eax
.text:00407A70                 sub     ebx, eax
.text:00407A72                 jnz     short loc_407A53
.text:00407A74                 jmp     short loc_407A49
.text:00407A76 ; ---------------------------------------------------------------------------
.text:00407A76
.text:00407A76 loc_407A76:                             ; CODE XREF: sub_407A30+3A↑j
.text:00407A76                 call    _errno
.text:00407A7B                 mov     dword ptr [eax], 1Ch
.text:00407A81                 jmp     short loc_407A49
.text:00407A81 sub_407A30      endp
.text:00407A81
.text:00407A81 ; ---------------------------------------------------------------------------
.text:00407A83                 align 10h
.text:00407A90 byte_407A90     db 0                    ; DATA XREF: sub_407AD0+377↓r
.text:00407A91 aKmgtpezy       db 'KMGTPEZY.',0        ; DATA XREF: sub_407AD0+37↓o
.text:00407A9B                 db 0                    ; DATA XREF: sub_407AD0+8D↓o
.text:00407A9C ; const char a0lf[]
.text:00407A9C a0lf            db '%.0Lf',0            ; DATA XREF: sub_407AD0+2B6↓o
.text:00407AA2 ; const char a1lf[]
.text:00407AA2 a1lf            db '%.1Lf',0            ; DATA XREF: sub_407AD0+584↓o
.text:00407AA8 flt_407AA8      dd 1.8446744e19         ; DATA XREF: sub_407AD0:loc_407F70↓r
.text:00407AA8                                         ; sub_407AD0:loc_407F7B↓r ...
.text:00407AAC                 align 10h
.text:00407AB0 tbyte_407AB0    dt 1.8446744073709551615e19
.text:00407AB0                                         ; DATA XREF: sub_407AD0+23E↓r
.text:00407AB0                                         ; sub_407AD0+51A↓r ...
.text:00407ABA                 align 10h
.text:00407AC0 tbyte_407AC0    dt 10.0                 ; DATA XREF: sub_407AD0+5E4↓r
.text:00407AC0                                         ; sub_407AD0:loc_408120↓r
.text:00407ACA                 align 10h
.text:00407AD0
.text:00407AD0 ; =============== S U B R O U T I N E =======================================
.text:00407AD0
.text:00407AD0
.text:00407AD0 ; int __cdecl sub_407AD0(int, int, char *Buffer, int, int, int, int, int)
.text:00407AD0 sub_407AD0      proc near               ; CODE XREF: sub_402DF0+1CB↑p
.text:00407AD0                                         ; sub_402DF0+43A↑p
.text:00407AD0
.text:00407AD0 var_C4          = qword ptr -0C4h
.text:00407AD0 var_BC          = tbyte ptr -0BCh
.text:00407AD0 var_B0          = dword ptr -0B0h
.text:00407AD0 var_9C          = tbyte ptr -9Ch
.text:00407AD0 var_8C          = dword ptr -8Ch
.text:00407AD0 var_88          = dword ptr -88h
.text:00407AD0 var_80          = dword ptr -80h
.text:00407AD0 var_7C          = tbyte ptr -7Ch
.text:00407AD0 var_64          = dword ptr -64h
.text:00407AD0 var_60          = dword ptr -60h
.text:00407AD0 var_5C          = dword ptr -5Ch
.text:00407AD0 var_58          = dword ptr -58h
.text:00407AD0 Size            = dword ptr -54h
.text:00407AD0 Src             = dword ptr -50h
.text:00407AD0 var_4C          = dword ptr -4Ch
.text:00407AD0 var_48          = dword ptr -48h
.text:00407AD0 var_44          = dword ptr -44h
.text:00407AD0 var_40          = dword ptr -40h
.text:00407AD0 var_3C          = dword ptr -3Ch
.text:00407AD0 var_38          = dword ptr -38h
.text:00407AD0 var_34          = dword ptr -34h
.text:00407AD0 var_30          = dword ptr -30h
.text:00407AD0 var_2C          = qword ptr -2Ch
.text:00407AD0 var_24          = qword ptr -24h
.text:00407AD0 arg_0           = dword ptr  4
.text:00407AD0 arg_4           = dword ptr  8
.text:00407AD0 Buffer          = dword ptr  0Ch
.text:00407AD0 arg_C           = dword ptr  10h
.text:00407AD0 arg_10          = dword ptr  14h
.text:00407AD0 arg_14          = dword ptr  18h
.text:00407AD0 arg_18          = dword ptr  1Ch
.text:00407AD0 arg_1C          = dword ptr  20h
.text:00407AD0
.text:00407AD0                 push    ebp
.text:00407AD1                 push    edi
.text:00407AD2                 push    esi
.text:00407AD3                 push    ebx
.text:00407AD4                 sub     esp, 0ACh
.text:00407ADA                 mov     ecx, [esp+0BCh+arg_18]
.text:00407AE1                 mov     [esp+0BCh+var_44], 0FFFFFFFFh
.text:00407AE9                 mov     eax, [esp+0BCh+arg_C]
.text:00407AF0                 mov     edi, [esp+0BCh+arg_0]
.text:00407AF7                 mov     dword ptr [esp+0BCh+var_2C], ecx
.text:00407AFE                 mov     esi, [esp+0BCh+arg_4]
.text:00407B05                 xor     ecx, ecx
.text:00407B07                 mov     [esp+0BCh+Src], (offset aKmgtpezy+8) ; "."
.text:00407B0F                 and     eax, 3
.text:00407B12                 mov     ebx, [esp+0BCh+arg_1C]
.text:00407B19                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00407B21                 mov     dword ptr [esp+0BCh+var_24], edi
.text:00407B28                 mov     ebp, [esp+0BCh+Buffer]
.text:00407B2F                 mov     dword ptr [esp+0BCh+var_24+4], esi
.text:00407B36                 mov     edi, [esp+0BCh+arg_14]
.text:00407B3D                 mov     dword ptr [esp+0BCh+var_2C+4], ebx
.text:00407B44                 mov     esi, [esp+0BCh+arg_10]
.text:00407B4B                 setnz   cl
.text:00407B4E                 mov     [esp+0BCh+var_30], eax
.text:00407B55                 mov     [esp+0BCh+Size], 1
.text:00407B5D                 mov     [esp+0BCh+var_5C], offset byte_407A9B
.text:00407B65                 dec     ecx
.text:00407B66                 and     ecx, 0FFFFFFE8h
.text:00407B69                 add     ecx, 400h
.text:00407B6F                 mov     [esp+0BCh+var_34], ecx
.text:00407B76                 call    localeconv
.text:00407B7B                 mov     edx, [eax]
.text:00407B7D                 mov     ebx, eax
.text:00407B7F                 mov     dword ptr [esp+0BCh+var_BC], edx ; Str
.text:00407B82                 call    strlen
.text:00407B87                 lea     ecx, [eax-1]
.text:00407B8A                 cmp     ecx, 1
.text:00407B8D                 ja      short loc_407B99
.text:00407B8F                 mov     [esp+0BCh+Size], eax
.text:00407B93                 mov     ecx, [ebx]
.text:00407B95                 mov     [esp+0BCh+Src], ecx
.text:00407B99
.text:00407B99 loc_407B99:                             ; CODE XREF: sub_407AD0+BD↑j
.text:00407B99                 mov     eax, [ebx+8]
.text:00407B9C                 mov     edx, [ebx+4]
.text:00407B9F                 mov     [esp+0BCh+var_58], eax
.text:00407BA3                 mov     dword ptr [esp+0BCh+var_BC], edx ; Str
.text:00407BA6                 call    strlen
.text:00407BAB                 cmp     eax, 2
.text:00407BAE                 ja      short loc_407BB7
.text:00407BB0                 mov     ecx, [ebx+4]
.text:00407BB3                 mov     [esp+0BCh+var_5C], ecx
.text:00407BB7
.text:00407BB7 loc_407BB7:                             ; CODE XREF: sub_407AD0+DE↑j
.text:00407BB7                 cmp     dword ptr [esp+0BCh+var_2C+4], edi
.text:00407BBE                 lea     ebx, [ebp+74h]
.text:00407BC1                 mov     [esp+0BCh+var_4C], ebx
.text:00407BC5                 mov     [esp+0BCh+var_48], ebx
.text:00407BC9                 ja      loc_408508
.text:00407BCF                 jb      short loc_407BDE
.text:00407BD1                 cmp     dword ptr [esp+0BCh+var_2C], esi
.text:00407BD8                 ja      loc_408508
.text:00407BDE
.text:00407BDE loc_407BDE:                             ; CODE XREF: sub_407AD0+FF↑j
.text:00407BDE                 mov     dword ptr [esp+0BCh+var_BC], esi
.text:00407BE1                 mov     edx, dword ptr [esp+0BCh+var_2C]
.text:00407BE8                 mov     ecx, dword ptr [esp+0BCh+var_2C+4]
.text:00407BEF                 mov     dword ptr [esp+0BCh+var_BC+4], edi
.text:00407BF3                 mov     dword ptr [esp+0BCh+var_BC+8], edx
.text:00407BF7                 mov     [esp+0BCh+var_B0], ecx
.text:00407BFB                 call    sub_412E10
.text:00407C00                 mov     ebx, edx
.text:00407C02                 or      ebx, eax
.text:00407C04                 jnz     loc_407CB0
.text:00407C0A                 mov     dword ptr [esp+0BCh+var_BC], esi
.text:00407C0D                 mov     edx, dword ptr [esp+0BCh+var_2C]
.text:00407C14                 mov     ebx, dword ptr [esp+0BCh+var_2C+4]
.text:00407C1B                 mov     dword ptr [esp+0BCh+var_BC+4], edi
.text:00407C1F                 mov     dword ptr [esp+0BCh+var_BC+8], edx
.text:00407C23                 mov     [esp+0BCh+var_B0], ebx
.text:00407C27                 call    sub_4129A0
.text:00407C2C                 mov     [esp+0BCh+var_B0], edx
.text:00407C30                 mov     ebx, dword ptr [esp+0BCh+var_24]
.text:00407C37                 mov     ecx, [esp+0BCh+var_B0]
.text:00407C3B                 mov     dword ptr [esp+0BCh+var_BC+8], eax
.text:00407C3F                 mov     eax, dword ptr [esp+0BCh+var_24]
.text:00407C46                 imul    ebx, ecx
.text:00407C49                 mul     dword ptr [esp+0BCh+var_BC+8]
.text:00407C4D                 mov     ecx, edx
.text:00407C4F                 add     ecx, ebx
.text:00407C51                 mov     [esp+0BCh+var_3C], eax
.text:00407C58                 mov     edx, dword ptr [esp+0BCh+var_24+4]
.text:00407C5F                 mov     ebx, dword ptr [esp+0BCh+var_BC+8]
.text:00407C63                 imul    edx, ebx
.text:00407C66                 mov     ebx, [esp+0BCh+var_3C]
.text:00407C6D                 add     ecx, edx
.text:00407C6F                 mov     [esp+0BCh+var_38], ecx
.text:00407C76                 mov     eax, [esp+0BCh+var_38]
.text:00407C7D                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:00407C80                 mov     dword ptr [esp+0BCh+var_BC+4], eax
.text:00407C84                 call    sub_4129A0
.text:00407C89                 mov     ebx, dword ptr [esp+0BCh+var_24+4]
.text:00407C90                 mov     ecx, dword ptr [esp+0BCh+var_24]
.text:00407C97                 xor     ebx, edx
.text:00407C99                 xor     eax, ecx
.text:00407C9B                 or      ebx, eax
.text:00407C9D                 jz      loc_408178
.text:00407CA3                 lea     esi, [esi+0]
.text:00407CA9                 lea     edi, [edi+0]
.text:00407CB0
.text:00407CB0 loc_407CB0:                             ; CODE XREF: sub_407AD0+134↑j
.text:00407CB0                                         ; sub_407AD0+A3C↓j ...
.text:00407CB0                 fild    [esp+0BCh+var_2C]
.text:00407CB7                 mov     edx, dword ptr [esp+0BCh+var_2C+4]
.text:00407CBE                 test    edx, edx
.text:00407CC0                 js      loc_40816D
.text:00407CC6
.text:00407CC6 loc_407CC6:                             ; CODE XREF: sub_407AD0+6A3↓j
.text:00407CC6                 fild    [esp+0BCh+var_24]
.text:00407CCD                 mov     ecx, dword ptr [esp+0BCh+var_24+4]
.text:00407CD4                 test    ecx, ecx
.text:00407CD6                 js      loc_408162
.text:00407CDC
.text:00407CDC loc_407CDC:                             ; CODE XREF: sub_407AD0+698↓j
.text:00407CDC                 push    edi
.text:00407CDD                 push    esi
.text:00407CDE                 fild    [esp+0C4h+var_C4]
.text:00407CE1                 add     esp, 8
.text:00407CE4                 test    edi, edi
.text:00407CE6                 js      loc_408157
.text:00407CEC
.text:00407CEC loc_407CEC:                             ; CODE XREF: sub_407AD0+68D↓j
.text:00407CEC                 test    byte ptr [esp+0BCh+arg_C], 10h
.text:00407CF4                 fdivrp  st(2), st
.text:00407CF6                 fmulp   st(1), st
.text:00407CF8                 fld     st
.text:00407CFA                 fstp    [esp+0BCh+var_7C]
.text:00407CFE                 jnz     loc_407F86
.text:00407D04                 cmp     [esp+0BCh+var_30], 1
.text:00407D0C                 jz      short loc_407D80
.text:00407D0E                 fld     ds:tbyte_407AB0
.text:00407D14                 fucomp  st(1)
.text:00407D16                 fnstsw  ax
.text:00407D18                 sahf
.text:00407D19                 jbe     short loc_407D80
.text:00407D1B                 fstp    [esp+0BCh+var_BC] ; _TBYTE
.text:00407D1E                 xor     ebx, ebx
.text:00407D20                 call    sub_412FA0
.text:00407D25                 mov     edi, edx
.text:00407D27                 xor     ecx, ecx
.text:00407D29                 mov     edx, [esp+0BCh+var_30]
.text:00407D30                 mov     esi, eax
.text:00407D32                 test    edx, edx
.text:00407D34                 jnz     short loc_407D5C
.text:00407D36                 push    edi
.text:00407D37                 push    esi
.text:00407D38                 fild    [esp+0C4h+var_C4]
.text:00407D3B                 add     esp, 8
.text:00407D3E                 test    edi, edi
.text:00407D40                 js      loc_407F7B
.text:00407D46
.text:00407D46 loc_407D46:                             ; CODE XREF: sub_407AD0+4B1↓j
.text:00407D46                 fld     [esp+0BCh+var_7C]
.text:00407D4A                 fxch    st(1)
.text:00407D4C                 fucompp
.text:00407D4E                 fnstsw  ax
.text:00407D50                 sahf
.text:00407D51                 jp      short loc_407D55
.text:00407D53                 jz      short loc_407D5C
.text:00407D55
.text:00407D55 loc_407D55:                             ; CODE XREF: sub_407AD0+281↑j
.text:00407D55                 mov     ecx, 1
.text:00407D5A                 xor     ebx, ebx
.text:00407D5C
.text:00407D5C loc_407D5C:                             ; CODE XREF: sub_407AD0+264↑j
.text:00407D5C                                         ; sub_407AD0+283↑j
.text:00407D5C                 mov     edx, esi
.text:00407D5E                 add     edx, ecx
.text:00407D60                 mov     esi, edi
.text:00407D62                 adc     esi, ebx
.text:00407D64                 push    esi
.text:00407D65                 push    edx
.text:00407D66                 fild    [esp+0C4h+var_C4]
.text:00407D69                 add     esp, 8
.text:00407D6C                 test    esi, esi
.text:00407D6E                 js      loc_407F70
.text:00407D74                 lea     esi, [esi+0]
.text:00407D7A                 lea     edi, [edi+0]
.text:00407D80
.text:00407D80 loc_407D80:                             ; CODE XREF: sub_407AD0+23C↑j
.text:00407D80                                         ; sub_407AD0+249↑j ...
.text:00407D80                 fstp    [esp+0BCh+var_BC+8]
.text:00407D84                 xor     esi, esi
.text:00407D86                 mov     dword ptr [esp+0BCh+var_BC+4], offset a0lf ; "%.0Lf"
.text:00407D8E                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Buffer
.text:00407D91                 call    sprintf
.text:00407D96                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Str
.text:00407D99                 call    strlen
.text:00407D9E                 mov     ebx, eax
.text:00407DA0
.text:00407DA0 loc_407DA0:                             ; CODE XREF: sub_407AD0+5C7↓j
.text:00407DA0                                         ; sub_407AD0+5D2↓j
.text:00407DA0                 mov     dword ptr [esp+0BCh+var_BC+8], ebx ; Size
.text:00407DA4                 mov     edi, [esp+0BCh+var_4C]
.text:00407DA8                 mov     dword ptr [esp+0BCh+var_BC+4], ebp ; Src
.text:00407DAC                 sub     edi, ebx
.text:00407DAE                 mov     [esp+0BCh+var_48], edi
.text:00407DB2                 mov     dword ptr [esp+0BCh+var_BC], edi ; void *
.text:00407DB5                 call    memmove
.text:00407DBA                 mov     ebp, [esp+0BCh+var_48]
.text:00407DBE                 add     ebx, ebp
.text:00407DC0                 sub     ebx, esi
.text:00407DC2
.text:00407DC2 loc_407DC2:                             ; CODE XREF: sub_407AD0+97E↓j
.text:00407DC2                 test    byte ptr [esp+0BCh+arg_C], 4
.text:00407DCA                 jnz     loc_407F41
.text:00407DD0
.text:00407DD0 loc_407DD0:                             ; CODE XREF: sub_407AD0+49B↓j
.text:00407DD0                 cmp     byte ptr [esp+0BCh+arg_C], 0
.text:00407DD8                 jns     loc_407E90
.text:00407DDE                 mov     esi, [esp+0BCh+var_44]
.text:00407DE2                 test    esi, esi
.text:00407DE4                 js      loc_407EA6
.text:00407DEA
.text:00407DEA loc_407DEA:                             ; CODE XREF: sub_407AD0+419↓j
.text:00407DEA                                         ; sub_407AD0+44B↓j ...
.text:00407DEA                 mov     edi, [esp+0BCh+arg_C]
.text:00407DF1                 and     edi, 100h
.text:00407DF7                 or      edi, [esp+0BCh+var_44]
.text:00407DFB                 jz      short loc_407E20
.text:00407DFD                 test    byte ptr [esp+0BCh+arg_C], 40h
.text:00407E05                 jz      short loc_407E20
.text:00407E07                 mov     esi, [esp+0BCh+var_4C]
.text:00407E0B                 mov     byte ptr [esi], 20h ; ' '
.text:00407E0E                 inc     esi
.text:00407E0F                 mov     [esp+0BCh+var_4C], esi
.text:00407E13                 lea     esi, [esi+0]
.text:00407E19                 lea     edi, [edi+0]
.text:00407E20
.text:00407E20 loc_407E20:                             ; CODE XREF: sub_407AD0+32B↑j
.text:00407E20                                         ; sub_407AD0+335↑j
.text:00407E20                 mov     ecx, [esp+0BCh+var_44]
.text:00407E24                 test    ecx, ecx
.text:00407E26                 jz      short loc_407E50
.text:00407E28                 mov     eax, [esp+0BCh+var_4C]
.text:00407E2C                 inc     [esp+0BCh+var_4C]
.text:00407E30                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00407E38                 jnz     short loc_407E43
.text:00407E3A                 cmp     [esp+0BCh+var_44], 1
.text:00407E3F                 mov     dl, 6Bh ; 'k'
.text:00407E41                 jz      short loc_407E4E
.text:00407E43
.text:00407E43 loc_407E43:                             ; CODE XREF: sub_407AD0+368↑j
.text:00407E43                 mov     ebx, [esp+0BCh+var_44]
.text:00407E47                 movzx   edx, ds:byte_407A90[ebx]
.text:00407E4E
.text:00407E4E loc_407E4E:                             ; CODE XREF: sub_407AD0+371↑j
.text:00407E4E                 mov     [eax], dl
.text:00407E50
.text:00407E50 loc_407E50:                             ; CODE XREF: sub_407AD0+356↑j
.text:00407E50                 test    [esp+0BCh+arg_C], 100h
.text:00407E5B                 jz      short loc_407E90
.text:00407E5D                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00407E65                 jz      short loc_407E7C
.text:00407E67                 mov     edx, [esp+0BCh+var_44]
.text:00407E6B                 test    edx, edx
.text:00407E6D                 jz      short loc_407E7C
.text:00407E6F                 mov     ebp, [esp+0BCh+var_4C]
.text:00407E73                 mov     byte ptr [ebp+0], 69h ; 'i'
.text:00407E77                 inc     ebp
.text:00407E78                 mov     [esp+0BCh+var_4C], ebp
.text:00407E7C
.text:00407E7C loc_407E7C:                             ; CODE XREF: sub_407AD0+395↑j
.text:00407E7C                                         ; sub_407AD0+39D↑j
.text:00407E7C                 mov     eax, [esp+0BCh+var_4C]
.text:00407E80                 mov     byte ptr [eax], 42h ; 'B'
.text:00407E83                 inc     eax
.text:00407E84                 mov     [esp+0BCh+var_4C], eax
.text:00407E88                 nop
.text:00407E89                 lea     esi, [esi+0]
.text:00407E90
.text:00407E90 loc_407E90:                             ; CODE XREF: sub_407AD0+308↑j
.text:00407E90                                         ; sub_407AD0+38B↑j
.text:00407E90                 mov     edi, [esp+0BCh+var_4C]
.text:00407E94                 mov     byte ptr [edi], 0
.text:00407E97                 mov     eax, [esp+0BCh+var_48]
.text:00407E9B                 add     esp, 0ACh
.text:00407EA1                 pop     ebx
.text:00407EA2                 pop     esi
.text:00407EA3                 pop     edi
.text:00407EA4                 pop     ebp
.text:00407EA5                 retn
.text:00407EA6 ; ---------------------------------------------------------------------------
.text:00407EA6
.text:00407EA6 loc_407EA6:                             ; CODE XREF: sub_407AD0+314↑j
.text:00407EA6                 mov     [esp+0BCh+var_88], 0
.text:00407EAE                 mov     ebp, dword ptr [esp+0BCh+var_2C+4]
.text:00407EB5                 cmp     [esp+0BCh+var_88], ebp
.text:00407EB9                 mov     [esp+0BCh+var_44], 0
.text:00407EC1                 mov     [esp+0BCh+var_8C], 1
.text:00407EC9                 jnb     short loc_407F2F
.text:00407ECB
.text:00407ECB loc_407ECB:                             ; CODE XREF: sub_407AD0+46A↓j
.text:00407ECB                 mov     esi, [esp+0BCh+var_34]
.text:00407ED2                 xor     edi, edi
.text:00407ED4                 lea     esi, [esi+0]
.text:00407EDA                 lea     edi, [edi+0]
.text:00407EE0
.text:00407EE0 loc_407EE0:                             ; CODE XREF: sub_407AD0+449↓j
.text:00407EE0                                         ; sub_407AD0+458↓j
.text:00407EE0                 inc     [esp+0BCh+var_44]
.text:00407EE4                 cmp     [esp+0BCh+var_44], 8
.text:00407EE9                 jz      loc_407DEA
.text:00407EEF                 mov     eax, [esp+0BCh+var_8C]
.text:00407EF3                 mov     ebp, [esp+0BCh+var_8C]
.text:00407EF7                 mov     ebx, [esp+0BCh+var_88]
.text:00407EFB                 mul     esi
.text:00407EFD                 imul    ebp, edi
.text:00407F00                 imul    ebx, esi
.text:00407F03                 mov     ecx, eax
.text:00407F05                 add     edx, ebp
.text:00407F07                 lea     ebp, [ebx+edx]
.text:00407F0A                 cmp     ebp, dword ptr [esp+0BCh+var_2C+4]
.text:00407F11                 mov     [esp+0BCh+var_8C], ecx
.text:00407F15                 mov     [esp+0BCh+var_88], ebp
.text:00407F19                 jb      short loc_407EE0
.text:00407F1B                 ja      loc_407DEA
.text:00407F21                 cmp     ecx, dword ptr [esp+0BCh+var_2C]
.text:00407F28                 jb      short loc_407EE0
.text:00407F2A                 jmp     loc_407DEA
.text:00407F2F ; ---------------------------------------------------------------------------
.text:00407F2F
.text:00407F2F loc_407F2F:                             ; CODE XREF: sub_407AD0+3F9↑j
.text:00407F2F                 mov     ecx, dword ptr [esp+0BCh+var_2C]
.text:00407F36                 cmp     [esp+0BCh+var_8C], ecx
.text:00407F3A                 jb      short loc_407ECB
.text:00407F3C                 jmp     loc_407DEA
.text:00407F41 ; ---------------------------------------------------------------------------
.text:00407F41
.text:00407F41 loc_407F41:                             ; CODE XREF: sub_407AD0+2FA↑j
.text:00407F41                 mov     eax, [esp+0BCh+var_48]
.text:00407F45                 mov     edx, [esp+0BCh+var_5C]
.text:00407F49                 mov     edi, [esp+0BCh+var_58]
.text:00407F4D                 sub     ebx, eax
.text:00407F4F                 mov     dword ptr [esp+0BCh+var_BC+4], ebx ; size_t
.text:00407F53                 mov     ebx, [esp+0BCh+var_48]
.text:00407F57                 mov     [esp+0BCh+var_B0], edx ; char *
.text:00407F5B                 mov     dword ptr [esp+0BCh+var_BC+8], edi ; int
.text:00407F5F                 mov     dword ptr [esp+0BCh+var_BC], ebx ; void *
.text:00407F62                 call    sub_408820
.text:00407F67                 mov     [esp+0BCh+var_48], eax
.text:00407F6B                 jmp     loc_407DD0
.text:00407F70 ; ---------------------------------------------------------------------------
.text:00407F70
.text:00407F70 loc_407F70:                             ; CODE XREF: sub_407AD0+29E↑j
.text:00407F70                 fadd    ds:flt_407AA8
.text:00407F76                 jmp     loc_407D80
.text:00407F7B ; ---------------------------------------------------------------------------
.text:00407F7B
.text:00407F7B loc_407F7B:                             ; CODE XREF: sub_407AD0+270↑j
.text:00407F7B                 fadd    ds:flt_407AA8
.text:00407F81                 jmp     loc_407D46
.text:00407F86 ; ---------------------------------------------------------------------------
.text:00407F86
.text:00407F86 loc_407F86:                             ; CODE XREF: sub_407AD0+22E↑j
.text:00407F86                 fstp    st
.text:00407F88                 mov     [esp+0BCh+var_44], 0
.text:00407F90                 mov     ebx, [esp+0BCh+var_34]
.text:00407F97                 xor     eax, eax
.text:00407F99                 push    eax
.text:00407F9A                 fld1
.text:00407F9C                 push    ebx
.text:00407F9D                 fild    [esp+0C4h+var_C4]
.text:00407FA0                 add     esp, 8
.text:00407FA3                 lea     esi, [esi+0]
.text:00407FA9                 lea     edi, [edi+0]
.text:00407FB0
.text:00407FB0 loc_407FB0:                             ; CODE XREF: sub_407AD0+500↓j
.text:00407FB0                 fld     [esp+0BCh+var_7C]
.text:00407FB4                 fxch    st(2)
.text:00407FB6                 fmul    st, st(1)
.text:00407FB8                 inc     [esp+0BCh+var_44]
.text:00407FBC                 fld     st
.text:00407FBE                 fmul    st, st(2)
.text:00407FC0                 fxch    st(3)
.text:00407FC2                 fucomp  st(3)
.text:00407FC4                 fnstsw  ax
.text:00407FC6                 fstp    st(2)
.text:00407FC8                 sahf
.text:00407FC9                 jb      short loc_407FD2
.text:00407FCB                 cmp     [esp+0BCh+var_44], 8
.text:00407FD0                 jl      short loc_407FB0
.text:00407FD2
.text:00407FD2 loc_407FD2:                             ; CODE XREF: sub_407AD0+4F9↑j
.text:00407FD2                 fstp    st
.text:00407FD4                 fld     [esp+0BCh+var_7C]
.text:00407FD8                 cmp     [esp+0BCh+var_30], 1
.text:00407FE0                 fdivrp  st(1), st
.text:00407FE2                 fld     st
.text:00407FE4                 fstp    [esp+0BCh+var_7C]
.text:00407FE8                 jz      short loc_408050
.text:00407FEA                 fld     ds:tbyte_407AB0
.text:00407FF0                 fucomp  st(1)
.text:00407FF2                 fnstsw  ax
.text:00407FF4                 sahf
.text:00407FF5                 jbe     short loc_408050
.text:00407FF7                 fstp    [esp+0BCh+var_BC] ; _TBYTE
.text:00407FFA                 xor     ebx, ebx
.text:00407FFC                 call    sub_412FA0
.text:00408001                 mov     edi, edx
.text:00408003                 xor     ecx, ecx
.text:00408005                 mov     edx, [esp+0BCh+var_30]
.text:0040800C                 mov     esi, eax
.text:0040800E                 test    edx, edx
.text:00408010                 jnz     short loc_408038
.text:00408012                 push    edi
.text:00408013                 push    esi
.text:00408014                 fild    [esp+0C4h+var_C4]
.text:00408017                 add     esp, 8
.text:0040801A                 test    edi, edi
.text:0040801C                 js      loc_40814C
.text:00408022
.text:00408022 loc_408022:                             ; CODE XREF: sub_407AD0+682↓j
.text:00408022                 fld     [esp+0BCh+var_7C]
.text:00408026                 fxch    st(1)
.text:00408028                 fucompp
.text:0040802A                 fnstsw  ax
.text:0040802C                 sahf
.text:0040802D                 jp      short loc_408031
.text:0040802F                 jz      short loc_408038
.text:00408031
.text:00408031 loc_408031:                             ; CODE XREF: sub_407AD0+55D↑j
.text:00408031                 mov     ecx, 1
.text:00408036                 xor     ebx, ebx
.text:00408038
.text:00408038 loc_408038:                             ; CODE XREF: sub_407AD0+540↑j
.text:00408038                                         ; sub_407AD0+55F↑j
.text:00408038                 mov     edx, esi
.text:0040803A                 add     edx, ecx
.text:0040803C                 mov     esi, edi
.text:0040803E                 adc     esi, ebx
.text:00408040                 push    esi
.text:00408041                 push    edx
.text:00408042                 fild    [esp+0C4h+var_C4]
.text:00408045                 add     esp, 8
.text:00408048                 test    esi, esi
.text:0040804A                 js      loc_408141
.text:00408050
.text:00408050 loc_408050:                             ; CODE XREF: sub_407AD0+518↑j
.text:00408050                                         ; sub_407AD0+525↑j ...
.text:00408050                 fstp    [esp+0BCh+var_BC+8]
.text:00408054                 mov     dword ptr [esp+0BCh+var_BC+4], offset a1lf ; "%.1Lf"
.text:0040805C                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Buffer
.text:0040805F                 call    sprintf
.text:00408064                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Str
.text:00408067                 call    strlen
.text:0040806C                 mov     ebx, eax
.text:0040806E                 mov     esi, [esp+0BCh+Size]
.text:00408072                 mov     eax, [esp+0BCh+Size]
.text:00408076                 inc     esi
.text:00408077                 add     eax, 2
.text:0040807A                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00408082                 jnz     short loc_40808B
.text:00408084                 mov     eax, [esp+0BCh+Size]
.text:00408088                 add     eax, 3
.text:0040808B
.text:0040808B loc_40808B:                             ; CODE XREF: sub_407AD0+5B2↑j
.text:0040808B                 cmp     eax, ebx
.text:0040808D                 jb      short loc_4080A8
.text:0040808F                 test    byte ptr [esp+0BCh+arg_C], 8
.text:00408097                 jz      loc_407DA0
.text:0040809D                 cmp     byte ptr [ebx+ebp-1], 30h ; '0'
.text:004080A2                 jnz     loc_407DA0
.text:004080A8
.text:004080A8 loc_4080A8:                             ; CODE XREF: sub_407AD0+5BD↑j
.text:004080A8                 cmp     [esp+0BCh+var_30], 1
.text:004080B0                 fld     [esp+0BCh+var_7C]
.text:004080B4                 fld     ds:tbyte_407AC0
.text:004080BA                 fmulp   st(1), st
.text:004080BC                 jz      short loc_408120
.text:004080BE                 fld     ds:tbyte_407AB0
.text:004080C4                 fucomp  st(1)
.text:004080C6                 fnstsw  ax
.text:004080C8                 sahf
.text:004080C9                 jbe     short loc_408120
.text:004080CB                 fld     st
.text:004080CD                 fstp    [esp+0BCh+var_BC] ; _TBYTE
.text:004080D0                 xor     ebx, ebx
.text:004080D2                 fstp    [esp+0BCh+var_9C]
.text:004080D6                 call    sub_412FA0
.text:004080DB                 fld     [esp+0BCh+var_9C]
.text:004080DF                 mov     edi, edx
.text:004080E1                 xor     ecx, ecx
.text:004080E3                 mov     edx, [esp+0BCh+var_30]
.text:004080EA                 mov     esi, eax
.text:004080EC                 test    edx, edx
.text:004080EE                 jnz     short loc_40813D
.text:004080F0                 push    edi
.text:004080F1                 push    esi
.text:004080F2                 fild    [esp+0C4h+var_C4]
.text:004080F5                 add     esp, 8
.text:004080F8                 test    edi, edi
.text:004080FA                 js      short loc_408135
.text:004080FC
.text:004080FC loc_4080FC:                             ; CODE XREF: sub_407AD0+66B↓j
.text:004080FC                 fucompp
.text:004080FE                 fnstsw  ax
.text:00408100                 sahf
.text:00408101                 jp      short loc_408105
.text:00408103                 jz      short loc_40810C
.text:00408105
.text:00408105 loc_408105:                             ; CODE XREF: sub_407AD0+631↑j
.text:00408105                 mov     ecx, 1
.text:0040810A                 xor     ebx, ebx
.text:0040810C
.text:0040810C loc_40810C:                             ; CODE XREF: sub_407AD0+633↑j
.text:0040810C                                         ; sub_407AD0+66F↓j
.text:0040810C                 mov     edx, esi
.text:0040810E                 add     edx, ecx
.text:00408110                 mov     esi, edi
.text:00408112                 adc     esi, ebx
.text:00408114                 push    esi
.text:00408115                 push    edx
.text:00408116                 fild    [esp+0C4h+var_C4]
.text:00408119                 add     esp, 8
.text:0040811C                 test    esi, esi
.text:0040811E                 js      short loc_40812D
.text:00408120
.text:00408120 loc_408120:                             ; CODE XREF: sub_407AD0+5EC↑j
.text:00408120                                         ; sub_407AD0+5F9↑j ...
.text:00408120                 fld     ds:tbyte_407AC0
.text:00408126                 fdivp   st(1), st
.text:00408128                 jmp     loc_407D80
.text:0040812D ; ---------------------------------------------------------------------------
.text:0040812D
.text:0040812D loc_40812D:                             ; CODE XREF: sub_407AD0+64E↑j
.text:0040812D                 fadd    ds:flt_407AA8
.text:00408133                 jmp     short loc_408120
.text:00408135 ; ---------------------------------------------------------------------------
.text:00408135
.text:00408135 loc_408135:                             ; CODE XREF: sub_407AD0+62A↑j
.text:00408135                 fadd    ds:flt_407AA8
.text:0040813B                 jmp     short loc_4080FC
.text:0040813D ; ---------------------------------------------------------------------------
.text:0040813D
.text:0040813D loc_40813D:                             ; CODE XREF: sub_407AD0+61E↑j
.text:0040813D                 fstp    st
.text:0040813F                 jmp     short loc_40810C
.text:00408141 ; ---------------------------------------------------------------------------
.text:00408141
.text:00408141 loc_408141:                             ; CODE XREF: sub_407AD0+57A↑j
.text:00408141                 fadd    ds:flt_407AA8
.text:00408147                 jmp     loc_408050
.text:0040814C ; ---------------------------------------------------------------------------
.text:0040814C
.text:0040814C loc_40814C:                             ; CODE XREF: sub_407AD0+54C↑j
.text:0040814C                 fadd    ds:flt_407AA8
.text:00408152                 jmp     loc_408022
.text:00408157 ; ---------------------------------------------------------------------------
.text:00408157
.text:00408157 loc_408157:                             ; CODE XREF: sub_407AD0+216↑j
.text:00408157                 fadd    ds:flt_407AA8
.text:0040815D                 jmp     loc_407CEC
.text:00408162 ; ---------------------------------------------------------------------------
.text:00408162
.text:00408162 loc_408162:                             ; CODE XREF: sub_407AD0+206↑j
.text:00408162                 fadd    ds:flt_407AA8
.text:00408168                 jmp     loc_407CDC
.text:0040816D ; ---------------------------------------------------------------------------
.text:0040816D
.text:0040816D loc_40816D:                             ; CODE XREF: sub_407AD0+1F0↑j
.text:0040816D                 fadd    ds:flt_407AA8
.text:00408173                 jmp     loc_407CC6
.text:00408178 ; ---------------------------------------------------------------------------
.text:00408178
.text:00408178 loc_408178:                             ; CODE XREF: sub_407AD0+1CD↑j
.text:00408178                 mov     [esp+0BCh+var_40], 0
.text:00408180
.text:00408180 loc_408180:                             ; CODE XREF: sub_407AD0+B5E↓j
.text:00408180                 xor     ebp, ebp
.text:00408182
.text:00408182 loc_408182:                             ; CODE XREF: sub_407AD0+B4D↓j
.text:00408182                                         ; sub_407AD0+B58↓j ...
.text:00408182                 test    byte ptr [esp+0BCh+arg_C], 10h
.text:0040818A                 jz      loc_408337
.text:00408190                 mov     [esp+0BCh+var_44], 0
.text:00408198                 xor     edx, edx
.text:0040819A                 mov     eax, [esp+0BCh+var_34]
.text:004081A1                 cmp     edx, [esp+0BCh+var_38]
.text:004081A8                 ja      loc_408337
.text:004081AE                 jb      short loc_4081BD
.text:004081B0                 cmp     eax, [esp+0BCh+var_3C]
.text:004081B7                 ja      loc_408337
.text:004081BD
.text:004081BD loc_4081BD:                             ; CODE XREF: sub_407AD0+6DE↑j
.text:004081BD                 mov     esi, eax
.text:004081BF                 mov     edi, edx
.text:004081C1
.text:004081C1 loc_4081C1:                             ; CODE XREF: sub_407AD0+7AC↓j
.text:004081C1                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:004081C5                 mov     ecx, [esp+0BCh+var_3C]
.text:004081CC                 mov     eax, [esp+0BCh+var_38]
.text:004081D3                 mov     [esp+0BCh+var_B0], edi
.text:004081D7                 mov     dword ptr [esp+0BCh+var_BC], ecx
.text:004081DA                 mov     dword ptr [esp+0BCh+var_BC+4], eax
.text:004081DE                 call    sub_412E10
.text:004081E3                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:004081E7                 mov     edx, eax
.text:004081E9                 mov     ebx, [esp+0BCh+var_40]
.text:004081ED                 mov     [esp+0BCh+var_B0], edi
.text:004081F1                 shl     edx, 2
.text:004081F4                 mov     ecx, ebp
.text:004081F6                 add     edx, eax
.text:004081F8                 lea     eax, [ebx+edx*2]
.text:004081FB                 xor     edx, edx
.text:004081FD                 div     [esp+0BCh+var_34]
.text:00408204                 sar     ecx, 1
.text:00408206                 lea     ebx, [ecx+edx*2]
.text:00408209                 mov     [esp+0BCh+var_80], eax
.text:0040820D                 mov     ecx, [esp+0BCh+var_38]
.text:00408214                 mov     edx, [esp+0BCh+var_3C]
.text:0040821B                 mov     dword ptr [esp+0BCh+var_BC+4], ecx
.text:0040821F                 mov     dword ptr [esp+0BCh+var_BC], edx
.text:00408222                 call    sub_4129A0
.text:00408227                 cmp     ebx, [esp+0BCh+var_34]
.text:0040822E                 mov     [esp+0BCh+var_3C], eax
.text:00408235                 mov     ecx, [esp+0BCh+var_80]
.text:00408239                 mov     [esp+0BCh+var_38], edx
.text:00408240                 mov     [esp+0BCh+var_40], ecx
.text:00408244                 jnb     loc_4084F1
.text:0040824A                 lea     edx, [ebp+ebx+0]
.text:0040824E                 test    edx, edx
.text:00408250                 setnz   bl
.text:00408253                 movzx   ebp, bl
.text:00408256
.text:00408256 loc_408256:                             ; CODE XREF: sub_407AD0+A33↓j
.text:00408256                 inc     [esp+0BCh+var_44]
.text:0040825A                 xor     ebx, ebx
.text:0040825C                 mov     eax, [esp+0BCh+var_34]
.text:00408263                 cmp     ebx, [esp+0BCh+var_38]
.text:0040826A                 ja      short loc_408282
.text:0040826C                 jb      short loc_408277
.text:0040826E                 cmp     eax, [esp+0BCh+var_3C]
.text:00408275                 ja      short loc_408282
.text:00408277
.text:00408277 loc_408277:                             ; CODE XREF: sub_407AD0+79C↑j
.text:00408277                 cmp     [esp+0BCh+var_44], 8
.text:0040827C                 jl      loc_4081C1
.text:00408282
.text:00408282 loc_408282:                             ; CODE XREF: sub_407AD0+79A↑j
.text:00408282                                         ; sub_407AD0+7A5↑j
.text:00408282                 cmp     [esp+0BCh+var_38], 0
.text:0040828A                 ja      loc_408337
.text:00408290                 cmp     [esp+0BCh+var_3C], 9
.text:00408298                 ja      loc_408337
.text:0040829E                 cmp     [esp+0BCh+var_30], 1
.text:004082A6                 jz      loc_4084D9
.text:004082AC                 mov     eax, [esp+0BCh+var_30]
.text:004082B3                 test    eax, eax
.text:004082B5                 jnz     short loc_4082CF
.text:004082B7                 test    ebp, ebp
.text:004082B9                 jle     short loc_4082CF
.text:004082BB
.text:004082BB loc_4082BB:                             ; CODE XREF: sub_407AD0+A16↓j
.text:004082BB                 mov     edx, [esp+0BCh+var_80]
.text:004082BF                 xor     ebp, ebp
.text:004082C1                 inc     edx
.text:004082C2                 mov     [esp+0BCh+var_40], edx
.text:004082C6                 cmp     edx, 0Ah
.text:004082C9                 jz      loc_4084BC
.text:004082CF
.text:004082CF loc_4082CF:                             ; CODE XREF: sub_407AD0+7E5↑j
.text:004082CF                                         ; sub_407AD0+7E9↑j ...
.text:004082CF                 cmp     [esp+0BCh+var_38], 0
.text:004082D7                 ja      short loc_408337
.text:004082D9                 cmp     [esp+0BCh+var_3C], 9
.text:004082E1                 ja      short loc_408337
.text:004082E3                 mov     ecx, [esp+0BCh+var_40]
.text:004082E7                 test    ecx, ecx
.text:004082E9                 jnz     short loc_4082F5
.text:004082EB                 test    byte ptr [esp+0BCh+arg_C], 8
.text:004082F3                 jnz     short loc_408337
.text:004082F5
.text:004082F5 loc_4082F5:                             ; CODE XREF: sub_407AD0+819↑j
.text:004082F5                 movzx   edx, byte ptr [esp+0BCh+var_40]
.text:004082FA                 mov     ecx, [esp+0BCh+var_4C]
.text:004082FE                 mov     edi, [esp+0BCh+var_4C]
.text:00408302                 dec     ecx
.text:00408303                 add     dl, 30h ; '0'
.text:00408306                 mov     [esp+0BCh+var_48], ecx
.text:0040830A                 mov     [edi-1], dl
.text:0040830D                 mov     esi, [esp+0BCh+Size]
.text:00408311                 mov     ebx, [esp+0BCh+Src]
.text:00408315                 sub     [esp+0BCh+var_48], esi
.text:00408319                 mov     dword ptr [esp+0BCh+var_BC+8], esi ; Size
.text:0040831D                 mov     dword ptr [esp+0BCh+var_BC+4], ebx ; Src
.text:00408321                 mov     ebp, [esp+0BCh+var_48]
.text:00408325                 mov     dword ptr [esp+0BCh+var_BC], ebp ; void *
.text:00408328                 xor     ebp, ebp
.text:0040832A                 call    memcpy
.text:0040832F                 mov     [esp+0BCh+var_40], 0
.text:00408337
.text:00408337 loc_408337:                             ; CODE XREF: sub_407AD0+6BA↑j
.text:00408337                                         ; sub_407AD0+6D8↑j ...
.text:00408337                 cmp     [esp+0BCh+var_30], 1
.text:0040833F                 jz      loc_408481
.text:00408345                 mov     eax, [esp+0BCh+var_30]
.text:0040834C                 test    eax, eax
.text:0040834E                 jnz     short loc_4083C1
.text:00408350                 mov     edx, [esp+0BCh+var_40]
.text:00408354                 add     edx, ebp
.text:00408356                 test    edx, edx
.text:00408358                 jle     short loc_4083C1
.text:0040835A
.text:0040835A loc_40835A:                             ; CODE XREF: sub_407AD0:loc_4084AA↓j
.text:0040835A                 add     [esp+0BCh+var_3C], 1
.text:00408362                 adc     [esp+0BCh+var_38], 0
.text:0040836A                 test    byte ptr [esp+0BCh+arg_C], 10h
.text:00408372                 jz      short loc_4083C1
.text:00408374                 mov     esi, [esp+0BCh+var_34]
.text:0040837B                 xor     ebx, ebx
.text:0040837D                 mov     ebp, [esp+0BCh+var_38]
.text:00408384                 mov     ecx, [esp+0BCh+var_3C]
.text:0040838B                 xor     ebp, ebx
.text:0040838D                 xor     esi, ecx
.text:0040838F                 or      ebp, esi
.text:00408391                 jnz     short loc_4083C1
.text:00408393                 cmp     [esp+0BCh+var_44], 8
.text:00408398                 jge     short loc_4083C1
.text:0040839A                 inc     [esp+0BCh+var_44]
.text:0040839E                 test    byte ptr [esp+0BCh+arg_C], 8
.text:004083A6                 jz      loc_408453
.text:004083AC
.text:004083AC loc_4083AC:                             ; CODE XREF: sub_407AD0+9AC↓j
.text:004083AC                 mov     ecx, 1
.text:004083B1                 xor     esi, esi
.text:004083B3                 mov     [esp+0BCh+var_3C], ecx
.text:004083BA                 mov     [esp+0BCh+var_38], esi
.text:004083C1
.text:004083C1 loc_4083C1:                             ; CODE XREF: sub_407AD0+87E↑j
.text:004083C1                                         ; sub_407AD0+888↑j ...
.text:004083C1                 mov     ebx, [esp+0BCh+var_48]
.text:004083C5                 lea     esi, [esi+0]
.text:004083C9                 lea     edi, [edi+0]
.text:004083D0
.text:004083D0 loc_4083D0:                             ; CODE XREF: sub_407AD0+97C↓j
.text:004083D0                 mov     dword ptr [esp+0BCh+var_BC+8], 0Ah
.text:004083D8                 mov     ecx, [esp+0BCh+var_38]
.text:004083DF                 mov     ebp, [esp+0BCh+var_3C]
.text:004083E6                 mov     [esp+0BCh+var_B0], 0
.text:004083EE                 mov     dword ptr [esp+0BCh+var_BC+4], ecx
.text:004083F2                 mov     dword ptr [esp+0BCh+var_BC], ebp
.text:004083F5                 call    sub_412E10
.text:004083FA                 dec     [esp+0BCh+var_48]
.text:004083FE                 add     al, 30h ; '0'
.text:00408400                 mov     esi, [esp+0BCh+var_48]
.text:00408404                 mov     [esi], al
.text:00408406                 mov     edx, [esp+0BCh+var_3C]
.text:0040840D                 mov     dword ptr [esp+0BCh+var_BC+8], 0Ah
.text:00408415                 mov     edi, [esp+0BCh+var_38]
.text:0040841C                 mov     [esp+0BCh+var_B0], 0
.text:00408424                 mov     dword ptr [esp+0BCh+var_BC], edx
.text:00408427                 mov     dword ptr [esp+0BCh+var_BC+4], edi
.text:0040842B                 call    sub_4129A0
.text:00408430                 mov     [esp+0BCh+var_38], edx
.text:00408437                 mov     ebp, [esp+0BCh+var_38]
.text:0040843E                 mov     [esp+0BCh+var_3C], eax
.text:00408445                 or      ebp, [esp+0BCh+var_3C]
.text:0040844C                 jnz     short loc_4083D0
.text:0040844E                 jmp     loc_407DC2
.text:00408453 ; ---------------------------------------------------------------------------
.text:00408453
.text:00408453 loc_408453:                             ; CODE XREF: sub_407AD0+8D6↑j
.text:00408453                 dec     [esp+0BCh+var_48]
.text:00408457                 mov     edi, [esp+0BCh+var_48]
.text:0040845B                 mov     byte ptr [edi], 30h ; '0'
.text:0040845E                 mov     edx, [esp+0BCh+Size]
.text:00408462                 mov     eax, [esp+0BCh+Src]
.text:00408466                 mov     dword ptr [esp+0BCh+var_BC+8], edx ; Size
.text:0040846A                 sub     edi, edx
.text:0040846C                 mov     [esp+0BCh+var_48], edi
.text:00408470                 mov     dword ptr [esp+0BCh+var_BC+4], eax ; Src
.text:00408474                 mov     dword ptr [esp+0BCh+var_BC], edi ; void *
.text:00408477                 call    memcpy
.text:0040847C                 jmp     loc_4083AC
.text:00408481 ; ---------------------------------------------------------------------------
.text:00408481
.text:00408481 loc_408481:                             ; CODE XREF: sub_407AD0+86F↑j
.text:00408481                 mov     ebx, [esp+0BCh+var_3C]
.text:00408488                 mov     ecx, ebp
.text:0040848A                 mov     esi, ebp
.text:0040848C                 sar     esi, 1Fh
.text:0040848F                 xor     ebp, ebp
.text:00408491                 and     ebx, 1
.text:00408494                 add     ecx, ebx
.text:00408496                 adc     esi, ebp
.text:00408498                 cmp     esi, 0
.text:0040849B                 ja      short loc_4084A2
.text:0040849D                 cmp     ecx, 0
.text:004084A0                 jbe     short loc_4084B5
.text:004084A2
.text:004084A2 loc_4084A2:                             ; CODE XREF: sub_407AD0+9CB↑j
.text:004084A2                 mov     edi, [esp+0BCh+var_40]
.text:004084A6                 inc     edi
.text:004084A7                 cmp     edi, 5
.text:004084AA
.text:004084AA loc_4084AA:                             ; CODE XREF: sub_407AD0+9EA↓j
.text:004084AA                 jg      loc_40835A
.text:004084B0                 jmp     loc_4083C1
.text:004084B5 ; ---------------------------------------------------------------------------
.text:004084B5
.text:004084B5 loc_4084B5:                             ; CODE XREF: sub_407AD0+9D0↑j
.text:004084B5                 cmp     [esp+0BCh+var_40], 5
.text:004084BA                 jmp     short loc_4084AA
.text:004084BC ; ---------------------------------------------------------------------------
.text:004084BC
.text:004084BC loc_4084BC:                             ; CODE XREF: sub_407AD0+7F9↑j
.text:004084BC                 add     [esp+0BCh+var_3C], 1
.text:004084C4                 mov     [esp+0BCh+var_40], 0
.text:004084CC                 adc     [esp+0BCh+var_38], 0
.text:004084D4                 jmp     loc_4082CF
.text:004084D9 ; ---------------------------------------------------------------------------
.text:004084D9
.text:004084D9 loc_4084D9:                             ; CODE XREF: sub_407AD0+7D6↑j
.text:004084D9                 mov     edi, [esp+0BCh+var_80]
.text:004084DD                 and     edi, 1
.text:004084E0                 lea     esi, [edi+ebp]
.text:004084E3                 cmp     esi, 2
.text:004084E6                 jg      loc_4082BB
.text:004084EC                 jmp     loc_4082CF
.text:004084F1 ; ---------------------------------------------------------------------------
.text:004084F1
.text:004084F1 loc_4084F1:                             ; CODE XREF: sub_407AD0+774↑j
.text:004084F1                 lea     edx, [ebp+ebx+0]
.text:004084F5                 cmp     [esp+0BCh+var_34], edx
.text:004084FC                 sbb     ecx, ecx
.text:004084FE                 not     ecx
.text:00408500                 lea     ebp, [ecx+3]
.text:00408503                 jmp     loc_408256
.text:00408508 ; ---------------------------------------------------------------------------
.text:00408508
.text:00408508 loc_408508:                             ; CODE XREF: sub_407AD0+F9↑j
.text:00408508                                         ; sub_407AD0+108↑j
.text:00408508                 mov     eax, edi
.text:0040850A                 or      eax, esi
.text:0040850C                 jz      loc_407CB0
.text:00408512                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00408516                 mov     edx, dword ptr [esp+0BCh+var_2C]
.text:0040851D                 mov     ecx, dword ptr [esp+0BCh+var_2C+4]
.text:00408524                 mov     [esp+0BCh+var_B0], edi
.text:00408528                 mov     dword ptr [esp+0BCh+var_BC], edx
.text:0040852B                 mov     dword ptr [esp+0BCh+var_BC+4], ecx
.text:0040852F                 call    sub_412E10
.text:00408534                 mov     ebx, edx
.text:00408536                 or      ebx, eax
.text:00408538                 jnz     loc_407CB0
.text:0040853E                 mov     [esp+0BCh+var_B0], edi
.text:00408542                 mov     ebp, dword ptr [esp+0BCh+var_2C+4]
.text:00408549                 mov     edi, dword ptr [esp+0BCh+var_2C]
.text:00408550                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00408554                 mov     dword ptr [esp+0BCh+var_BC+4], ebp
.text:00408558                 mov     dword ptr [esp+0BCh+var_BC], edi
.text:0040855B                 call    sub_4129A0
.text:00408560                 mov     dword ptr [esp+0BCh+var_BC+8], eax
.text:00408564                 mov     ebx, dword ptr [esp+0BCh+var_24]
.text:0040856B                 mov     ebp, edx
.text:0040856D                 mov     [esp+0BCh+var_B0], edx
.text:00408571                 mov     esi, dword ptr [esp+0BCh+var_24+4]
.text:00408578                 mov     edi, eax
.text:0040857A                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:0040857D                 mov     dword ptr [esp+0BCh+var_BC+4], esi
.text:00408581                 call    sub_412E10
.text:00408586                 mov     dword ptr [esp+0BCh+var_BC+8], edi
.text:0040858A                 mov     ebx, eax
.text:0040858C                 mov     esi, edx
.text:0040858E                 shld    esi, eax, 2
.text:00408592                 mov     [esp+0BCh+var_B0], ebp
.text:00408596                 shl     ebx, 2
.text:00408599                 add     ebx, eax
.text:0040859B                 adc     esi, edx
.text:0040859D                 shld    esi, ebx, 1
.text:004085A1                 add     ebx, ebx
.text:004085A3                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:004085A6                 mov     dword ptr [esp+0BCh+var_BC+4], esi
.text:004085AA                 call    sub_412E10
.text:004085AF                 shld    edx, eax, 1
.text:004085B3                 mov     ecx, dword ptr [esp+0BCh+var_24]
.text:004085BA                 add     eax, eax
.text:004085BC                 mov     [esp+0BCh+var_64], eax
.text:004085C0                 mov     eax, dword ptr [esp+0BCh+var_24+4]
.text:004085C7                 mov     dword ptr [esp+0BCh+var_BC], ecx
.text:004085CA                 mov     [esp+0BCh+var_60], edx
.text:004085CE                 mov     dword ptr [esp+0BCh+var_BC+8], edi
.text:004085D2                 mov     [esp+0BCh+var_B0], ebp
.text:004085D6                 mov     dword ptr [esp+0BCh+var_BC+4], eax
.text:004085DA                 call    sub_4129A0
.text:004085DF                 mov     [esp+0BCh+var_3C], eax
.text:004085E6                 mov     [esp+0BCh+var_38], edx
.text:004085ED                 mov     dword ptr [esp+0BCh+var_BC+8], edi
.text:004085F1                 mov     [esp+0BCh+var_B0], ebp
.text:004085F5                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:004085F8                 mov     dword ptr [esp+0BCh+var_BC+4], esi
.text:004085FC                 call    sub_4129A0
.text:00408601                 cmp     [esp+0BCh+var_60], ebp
.text:00408605                 mov     [esp+0BCh+var_40], eax
.text:00408609                 ja      short loc_408633
.text:0040860B                 jb      short loc_408613
.text:0040860D                 cmp     [esp+0BCh+var_64], edi
.text:00408611                 jnb     short loc_408633
.text:00408613
.text:00408613 loc_408613:                             ; CODE XREF: sub_407AD0+B3B↑j
.text:00408613                 cmp     [esp+0BCh+var_60], 0
.text:00408618                 mov     ebp, 1
.text:0040861D                 ja      loc_408182
.text:00408623                 cmp     [esp+0BCh+var_64], 0
.text:00408628                 ja      loc_408182
.text:0040862E                 jmp     loc_408180
.text:00408633 ; ---------------------------------------------------------------------------
.text:00408633
.text:00408633 loc_408633:                             ; CODE XREF: sub_407AD0+B39↑j
.text:00408633                                         ; sub_407AD0+B41↑j
.text:00408633                 cmp     ebp, [esp+0BCh+var_60]
.text:00408637                 ja      short loc_40864B
.text:00408639                 jb      short loc_408641
.text:0040863B                 cmp     edi, [esp+0BCh+var_64]
.text:0040863F                 jnb     short loc_40864B
.text:00408641
.text:00408641 loc_408641:                             ; CODE XREF: sub_407AD0+B69↑j
.text:00408641                 mov     ebp, 3
.text:00408646                 jmp     loc_408182
.text:0040864B ; ---------------------------------------------------------------------------
.text:0040864B
.text:0040864B loc_40864B:                             ; CODE XREF: sub_407AD0+B67↑j
.text:0040864B                                         ; sub_407AD0+B6F↑j
.text:0040864B                 mov     ebp, 2
.text:00408650                 jmp     loc_408182
.text:00408650 sub_407AD0      endp
.text:00408650
.text:00408650 ; ---------------------------------------------------------------------------
.text:00408655 aHumanReadable  db 'human-readable',0   ; DATA XREF: .text:off_408668↓o
.text:00408664 aSi             db 'si',0               ; DATA XREF: .text:0040866C↓o
.text:00408667                 align 4
.text:00408668 off_408668      dd offset aHumanReadable
.text:00408668                                         ; DATA XREF: sub_4088F0+3A↓o
.text:00408668                                         ; "human-readable"
.text:0040866C                 dd offset aSi           ; "si"
.text:00408670                 dd 0
.text:00408674 unk_408674      db 0B0h ; °             ; DATA XREF: sub_4088F0+32↓o
.text:00408674                                         ; sub_4088F0+54↓r
.text:00408675                 align 4
.text:00408678                 db 90h
.text:00408679                 align 4
.text:0040867C aBlockSize      db 'block size',0       ; DATA XREF: .text:loc_408762↓o
.text:0040867C                                         ; .text:loc_4087B4↓o ...
.text:00408687 aSSTooLarge     db '%s `%s',27h,' too large',0
.text:00408687                                         ; DATA XREF: .text:00408773↓o
.text:00408699                 db 17h dup(90h)
.text:004086B0 aInvalidCharact db 'invalid character following %s in `%s',27h,0
.text:004086B0                                         ; DATA XREF: .text:004087C5↓o
.text:004086D7 aInvalidSS      db 'invalid %s `%s',27h,0
.text:004086D7                                         ; DATA XREF: .text:004087E6↓o
.text:004086E7 ; const char aPosixlyCorrect[]
.text:004086E7 aPosixlyCorrect db 'POSIXLY_CORRECT',0  ; DATA XREF: .text:loc_4087F0↓o
.text:004086E7                                         ; sub_4088F0+11A↓o
.text:004086F7                 align 10h
.text:00408700                 sub     esp, 2Ch
.text:00408703                 movzx   edx, byte ptr [esp+34h]
.text:00408708                 mov     [esp+20h], ebx
.text:0040870C                 mov     ebx, [esp+38h]
.text:00408710                 mov     [esp+24h], esi
.text:00408714                 mov     esi, [esp+30h]
.text:00408718                 mov     [esp+1Bh], dl
.text:0040871C                 lea     edx, [esp+1Ch]
.text:00408720                 mov     [esp+28h], edi
.text:00408724                 mov     [esp+8], edx
.text:00408728                 mov     [esp+4], ebx
.text:0040872C                 mov     [esp], esi
.text:0040872F                 call    sub_4088F0
.text:00408734                 mov     edx, [ebx+4]
.text:00408737                 mov     ecx, eax
.text:00408739                 mov     eax, [ebx]
.text:0040873B                 mov     edi, edx
.text:0040873D                 or      edi, eax
.text:0040873F                 jz      loc_4087F0
.text:00408745
.text:00408745 loc_408745:                             ; CODE XREF: .text:00408818↓j
.text:00408745                 test    ecx, ecx
.text:00408747                 jz      short loc_4087A0
.text:00408749                 cmp     byte ptr [esp+1Bh], 0
.text:0040874E                 jz      short loc_4087A0
.text:00408750                 cmp     ecx, 3
.text:00408753                 ja      short loc_4087D0
.text:00408755                 cmp     ecx, 2
.text:00408758                 jnb     short loc_4087B4
.text:0040875A                 dec     ecx
.text:0040875B                 jz      short loc_408762
.text:0040875D
.text:0040875D loc_40875D:                             ; CODE XREF: .text:004087D3↓j
.text:0040875D                 call    abort
.text:00408762 ; ---------------------------------------------------------------------------
.text:00408762
.text:00408762 loc_408762:                             ; CODE XREF: .text:0040875B↑j
.text:00408762                 mov     dword ptr [esp], offset aBlockSize ; "block size"
.text:00408769                 call    ds:libintl_gettext
.text:0040876F                 mov     [esp+10h], esi
.text:00408773                 mov     dword ptr [esp+8], offset aSSTooLarge ; "%s `%s' too large"
.text:0040877B
.text:0040877B loc_40877B:                             ; CODE XREF: .text:004087CD↓j
.text:0040877B                                         ; .text:004087EE↓j
.text:0040877B                 mov     [esp+0Ch], eax
.text:0040877F                 mov     dword ptr [esp+4], 0
.text:00408787                 mov     ecx, Code
.text:0040878D                 mov     [esp], ecx
.text:00408790                 call    sub_40AAC0
.text:00408795                 lea     esi, [esi+0]
.text:00408799                 lea     edi, [edi+0]
.text:004087A0
.text:004087A0 loc_4087A0:                             ; CODE XREF: .text:00408747↑j
.text:004087A0                                         ; .text:0040874E↑j
.text:004087A0                 mov     eax, [esp+1Ch]
.text:004087A4                 mov     ebx, [esp+20h]
.text:004087A8                 mov     esi, [esp+24h]
.text:004087AC                 mov     edi, [esp+28h]
.text:004087B0                 add     esp, 2Ch
.text:004087B3                 retn
.text:004087B4 ; ---------------------------------------------------------------------------
.text:004087B4
.text:004087B4 loc_4087B4:                             ; CODE XREF: .text:00408758↑j
.text:004087B4                 mov     dword ptr [esp], offset aBlockSize ; "block size"
.text:004087BB                 call    ds:libintl_gettext
.text:004087C1                 mov     [esp+10h], esi
.text:004087C5                 mov     dword ptr [esp+8], offset aInvalidCharact ; "invalid character following %s in `%s'"
.text:004087CD                 jmp     short loc_40877B
.text:004087CD ; ---------------------------------------------------------------------------
.text:004087CF                 align 10h
.text:004087D0
.text:004087D0 loc_4087D0:                             ; CODE XREF: .text:00408753↑j
.text:004087D0                 cmp     ecx, 4
.text:004087D3                 jnz     short loc_40875D
.text:004087D5                 mov     dword ptr [esp], offset aBlockSize ; "block size"
.text:004087DC                 call    ds:libintl_gettext
.text:004087E2                 mov     [esp+10h], esi
.text:004087E6                 mov     dword ptr [esp+8], offset aInvalidSS ; "invalid %s `%s'"
.text:004087EE                 jmp     short loc_40877B
.text:004087F0 ; ---------------------------------------------------------------------------
.text:004087F0
.text:004087F0 loc_4087F0:                             ; CODE XREF: .text:0040873F↑j
.text:004087F0                 mov     dword ptr [esp], offset aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:004087F7                 call    getenv
.text:004087FC                 xor     ecx, ecx
.text:004087FE                 mov     edx, 200h
.text:00408803                 test    eax, eax
.text:00408805                 jnz     short loc_40880E
.text:00408807                 mov     edx, 400h
.text:0040880C                 xor     ecx, ecx
.text:0040880E
.text:0040880E loc_40880E:                             ; CODE XREF: .text:00408805↑j
.text:0040880E                 mov     [ebx+4], ecx
.text:00408811                 mov     ecx, 4
.text:00408816                 mov     [ebx], edx
.text:00408818                 jmp     loc_408745
.text:00408818 ; ---------------------------------------------------------------------------
.text:0040881D                 align 10h
.text:00408820
.text:00408820 ; =============== S U B R O U T I N E =======================================
.text:00408820
.text:00408820
.text:00408820 ; int __cdecl sub_408820(void *, size_t, int, char *)
.text:00408820 sub_408820      proc near               ; CODE XREF: sub_407AD0+492↑p
.text:00408820
.text:00408820 Str             = dword ptr -6Ch
.text:00408820 Src             = dword ptr -68h
.text:00408820 Size            = dword ptr -64h
.text:00408820 var_50          = dword ptr -50h
.text:00408820 var_4C          = byte ptr -4Ch
.text:00408820 arg_0           = dword ptr  4
.text:00408820 arg_4           = dword ptr  8
.text:00408820 arg_8           = dword ptr  0Ch
.text:00408820 arg_C           = dword ptr  10h
.text:00408820
.text:00408820                 push    ebp
.text:00408821                 push    edi
.text:00408822                 mov     edi, 0FFFFFFFFh
.text:00408827                 push    esi
.text:00408828                 push    ebx
.text:00408829                 sub     esp, 5Ch
.text:0040882C                 mov     edx, [esp+6Ch+arg_C]
.text:00408830                 mov     ebx, [esp+6Ch+arg_0]
.text:00408834                 mov     ebp, [esp+6Ch+arg_8]
.text:00408838                 mov     [esp+6Ch+Str], edx ; Str
.text:0040883B                 call    strlen
.text:00408840                 mov     [esp+6Ch+var_50], eax
.text:00408844                 mov     esi, [esp+6Ch+arg_4]
.text:00408848                 lea     edx, [esp+6Ch+var_4C]
.text:0040884C                 mov     [esp+6Ch+Src], ebx ; Src
.text:00408850                 mov     [esp+6Ch+Str], edx ; void *
.text:00408853                 add     ebx, esi
.text:00408855                 mov     [esp+6Ch+Size], esi ; Size
.text:00408859                 lea     esi, [esi+0]
.text:00408860
.text:00408860 loc_408860:                             ; CODE XREF: sub_408820+94↓j
.text:00408860                 call    memcpy
.text:00408865                 movzx   eax, byte ptr [ebp+0]
.text:00408869                 test    al, al
.text:0040886B                 jz      short loc_408877
.text:0040886D                 cmp     al, 7Eh ; '~'
.text:0040886F                 mov     edi, esi
.text:00408871                 ja      short loc_408876
.text:00408873                 movzx   edi, al
.text:00408876
.text:00408876 loc_408876:                             ; CODE XREF: sub_408820+51↑j
.text:00408876                 inc     ebp
.text:00408877
.text:00408877 loc_408877:                             ; CODE XREF: sub_408820+4B↑j
.text:00408877                 cmp     esi, edi
.text:00408879                 jnb     short loc_40887D
.text:0040887B                 mov     edi, esi
.text:0040887D
.text:0040887D loc_40887D:                             ; CODE XREF: sub_408820+59↑j
.text:0040887D                 mov     [esp+6Ch+Size], edi ; Size
.text:00408881                 sub     esi, edi
.text:00408883                 lea     ecx, [esp+6Ch+var_4C]
.text:00408887                 add     ecx, esi
.text:00408889                 sub     ebx, edi
.text:0040888B                 mov     [esp+6Ch+Src], ecx ; Src
.text:0040888F                 mov     [esp+6Ch+Str], ebx ; void *
.text:00408892                 call    memcpy
.text:00408897                 test    esi, esi
.text:00408899                 jz      short loc_4088B6
.text:0040889B                 mov     edx, [esp+6Ch+var_50]
.text:0040889F                 mov     ecx, [esp+6Ch+var_50]
.text:004088A3                 sub     ebx, edx
.text:004088A5                 mov     [esp+6Ch+Size], ecx
.text:004088A9                 mov     edx, [esp+6Ch+arg_C]
.text:004088AD                 mov     [esp+6Ch+Str], ebx
.text:004088B0                 mov     [esp+6Ch+Src], edx
.text:004088B4                 jmp     short loc_408860
.text:004088B6 ; ---------------------------------------------------------------------------
.text:004088B6
.text:004088B6 loc_4088B6:                             ; CODE XREF: sub_408820+79↑j
.text:004088B6                 add     esp, 5Ch
.text:004088B9                 mov     eax, ebx
.text:004088BB                 pop     ebx
.text:004088BC                 pop     esi
.text:004088BD                 pop     edi
.text:004088BE                 pop     ebp
.text:004088BF                 retn
.text:004088BF sub_408820      endp
.text:004088BF
.text:004088BF ; ---------------------------------------------------------------------------
.text:004088C0 ; const char aEeggkkmmppttyy[]
.text:004088C0 aEeggkkmmppttyy db 'eEgGkKmMpPtTyYzZ0',0
.text:004088C0                                         ; DATA XREF: sub_4088F0:loc_408970↓o
.text:004088D2 ; const char aBlockSize_0[]
.text:004088D2 aBlockSize_0    db 'BLOCK_SIZE',0       ; DATA XREF: sub_4088F0:loc_4089DE↓o
.text:004088DD ; const char aBlocksize[]
.text:004088DD aBlocksize      db 'BLOCKSIZE',0        ; DATA XREF: sub_4088F0+104↓o
.text:004088E7                 align 10h
.text:004088F0
.text:004088F0 ; =============== S U B R O U T I N E =======================================
.text:004088F0
.text:004088F0
.text:004088F0 ; int __cdecl sub_4088F0(char *, int, int)
.text:004088F0 sub_4088F0      proc near               ; CODE XREF: .text:0040872F↑p
.text:004088F0
.text:004088F0 VarName         = dword ptr -2Ch
.text:004088F0 var_28          = dword ptr -28h
.text:004088F0 var_24          = dword ptr -24h
.text:004088F0 var_20          = dword ptr -20h
.text:004088F0 Str             = dword ptr -1Ch
.text:004088F0 var_10          = dword ptr -10h
.text:004088F0 var_C           = dword ptr -0Ch
.text:004088F0 var_8           = dword ptr -8
.text:004088F0 var_4           = dword ptr -4
.text:004088F0 arg_0           = dword ptr  4
.text:004088F0 arg_4           = dword ptr  8
.text:004088F0 arg_8           = dword ptr  0Ch
.text:004088F0
.text:004088F0                 sub     esp, 2Ch
.text:004088F3                 mov     [esp+2Ch+var_C], ebx
.text:004088F7                 mov     ebx, [esp+2Ch+arg_0]
.text:004088FB                 mov     [esp+2Ch+var_8], esi
.text:004088FF                 xor     esi, esi
.text:00408901                 test    ebx, ebx
.text:00408903                 mov     [esp+2Ch+var_4], edi
.text:00408907                 mov     edi, [esp+2Ch+arg_4]
.text:0040890B                 jz      loc_4089DE
.text:00408911
.text:00408911 loc_408911:                             ; CODE XREF: sub_4088F0+FE↓j
.text:00408911                                         ; sub_4088F0+114↓j
.text:00408911                 cmp     byte ptr [ebx], 27h ; '''
.text:00408914                 jz      loc_4089D3
.text:0040891A
.text:0040891A loc_40891A:                             ; CODE XREF: sub_4088F0+E9↓j
.text:0040891A                 mov     [esp+2Ch+var_20], 4 ; int
.text:00408922                 mov     [esp+2Ch+var_24], offset unk_408674 ; int
.text:0040892A                 mov     [esp+2Ch+var_28], offset off_408668 ; int
.text:00408932                 mov     [esp+2Ch+VarName], ebx ; char *
.text:00408935                 call    sub_40A4B0
.text:0040893A                 test    eax, eax
.text:0040893C                 js      short loc_408970
.text:0040893E                 mov     dword ptr [edi], 1
.text:00408944                 mov     ecx, dword ptr ds:unk_408674[eax*4]
.text:0040894B                 mov     dword ptr [edi+4], 0
.text:00408952                 or      esi, ecx
.text:00408954
.text:00408954 loc_408954:                             ; CODE XREF: sub_4088F0+B9↓j
.text:00408954                                         ; sub_4088F0+D3↓j ...
.text:00408954                 mov     ebx, [esp+2Ch+arg_8]
.text:00408958                 xor     eax, eax
.text:0040895A                 mov     [ebx], esi
.text:0040895C
.text:0040895C loc_40895C:                             ; CODE XREF: sub_4088F0+A6↓j
.text:0040895C                 mov     ebx, [esp+2Ch+var_C]
.text:00408960                 mov     esi, [esp+2Ch+var_8]
.text:00408964                 mov     edi, [esp+2Ch+var_4]
.text:00408968                 add     esp, 2Ch
.text:0040896B                 retn
.text:0040896B ; ---------------------------------------------------------------------------
.text:0040896C                 align 10h
.text:00408970
.text:00408970 loc_408970:                             ; CODE XREF: sub_4088F0+4C↑j
.text:00408970                 mov     [esp+2Ch+Str], offset aEeggkkmmppttyy ; "eEgGkKmMpPtTyYzZ0"
.text:00408978                 lea     edx, [esp+2Ch+var_10]
.text:0040897C                 mov     [esp+2Ch+var_20], edi ; int
.text:00408980                 mov     [esp+2Ch+var_24], 0 ; int
.text:00408988                 mov     [esp+2Ch+var_28], edx ; int
.text:0040898C                 mov     [esp+2Ch+VarName], ebx ; int
.text:0040898F                 call    sub_406DA0
.text:00408994                 test    eax, eax
.text:00408996                 jnz     short loc_40895C
.text:00408998                 nop
.text:00408999                 lea     esi, [esi+0]
.text:004089A0
.text:004089A0 loc_4089A0:                             ; CODE XREF: sub_4088F0+C2↓j
.text:004089A0                 movzx   ecx, byte ptr [ebx]
.text:004089A3                 sub     cl, 30h ; '0'
.text:004089A6                 cmp     cl, 9
.text:004089A9                 jbe     short loc_408954
.text:004089AB                 cmp     ebx, [esp+2Ch+var_10]
.text:004089AF                 jz      short loc_4089B4
.text:004089B1                 inc     ebx
.text:004089B2                 jmp     short loc_4089A0
.text:004089B4 ; ---------------------------------------------------------------------------
.text:004089B4
.text:004089B4 loc_4089B4:                             ; CODE XREF: sub_4088F0+BF↑j
.text:004089B4                 or      esi, 80h
.text:004089BA                 cmp     byte ptr [ebx-1], 42h ; 'B'
.text:004089BE                 jz      short loc_4089C5
.text:004089C0
.text:004089C0 loc_4089C0:                             ; CODE XREF: sub_4088F0+E1↓j
.text:004089C0                 or      esi, 20h
.text:004089C3                 jmp     short loc_408954
.text:004089C5 ; ---------------------------------------------------------------------------
.text:004089C5
.text:004089C5 loc_4089C5:                             ; CODE XREF: sub_4088F0+CE↑j
.text:004089C5                 or      esi, 100h
.text:004089CB                 cmp     byte ptr [ebx-2], 69h ; 'i'
.text:004089CF                 jnz     short loc_408954
.text:004089D1                 jmp     short loc_4089C0
.text:004089D3 ; ---------------------------------------------------------------------------
.text:004089D3
.text:004089D3 loc_4089D3:                             ; CODE XREF: sub_4088F0+24↑j
.text:004089D3                 mov     esi, 4
.text:004089D8                 inc     ebx
.text:004089D9                 jmp     loc_40891A
.text:004089DE ; ---------------------------------------------------------------------------
.text:004089DE
.text:004089DE loc_4089DE:                             ; CODE XREF: sub_4088F0+1B↑j
.text:004089DE                 mov     [esp+2Ch+VarName], offset aBlockSize_0 ; "BLOCK_SIZE"
.text:004089E5                 call    getenv
.text:004089EA                 test    eax, eax
.text:004089EC                 mov     ebx, eax
.text:004089EE                 jnz     loc_408911
.text:004089F4                 mov     [esp+2Ch+VarName], offset aBlocksize ; "BLOCKSIZE"
.text:004089FB                 call    getenv
.text:00408A00                 test    eax, eax
.text:00408A02                 mov     ebx, eax
.text:00408A04                 jnz     loc_408911
.text:00408A0A                 mov     [esp+2Ch+VarName], offset aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:00408A11                 call    getenv
.text:00408A16                 xor     ecx, ecx
.text:00408A18                 mov     edx, 200h
.text:00408A1D                 test    eax, eax
.text:00408A1F                 jnz     short loc_408A28
.text:00408A21                 mov     edx, 400h
.text:00408A26                 xor     ecx, ecx
.text:00408A28
.text:00408A28 loc_408A28:                             ; CODE XREF: sub_4088F0+12F↑j
.text:00408A28                 mov     [edi], edx
.text:00408A2A                 mov     [edi+4], ecx
.text:00408A2D                 jmp     loc_408954
.text:00408A2D sub_4088F0      endp
.text:00408A2D
.text:00408A2D ; ---------------------------------------------------------------------------
.text:00408A32                 db 1Eh dup(90h)
.text:00408A50
.text:00408A50 ; =============== S U B R O U T I N E =======================================
.text:00408A50
.text:00408A50
.text:00408A50 sub_408A50      proc near               ; CODE XREF: sub_402DF0+46↑p
.text:00408A50                                         ; sub_402DF0+64↑p ...
.text:00408A50
.text:00408A50 var_1C          = dword ptr -1Ch
.text:00408A50 var_18          = dword ptr -18h
.text:00408A50 var_14          = dword ptr -14h
.text:00408A50 var_10          = dword ptr -10h
.text:00408A50 arg_0           = dword ptr  4
.text:00408A50 arg_4           = dword ptr  8
.text:00408A50 arg_8           = dword ptr  0Ch
.text:00408A50
.text:00408A50                 push    edi
.text:00408A51                 push    esi
.text:00408A52                 push    ebx
.text:00408A53                 sub     esp, 10h
.text:00408A56                 mov     edx, [esp+1Ch+arg_8]
.text:00408A5A                 mov     ebx, [esp+1Ch+arg_0]
.text:00408A5E                 mov     esi, [esp+1Ch+arg_4]
.text:00408A62                 lea     edi, [edx+15h]
.text:00408A65                 mov     byte ptr [edx+15h], 0
.text:00408A69                 lea     esi, [esi+0]
.text:00408A70
.text:00408A70 loc_408A70:                             ; CODE XREF: sub_408A50+63↓j
.text:00408A70                 mov     [esp+1Ch+var_1C], ebx
.text:00408A73                 dec     edi
.text:00408A74                 mov     [esp+1Ch+var_18], esi
.text:00408A78                 mov     [esp+1Ch+var_14], 0Ah
.text:00408A80                 mov     [esp+1Ch+var_10], 0
.text:00408A88                 call    sub_412E10
.text:00408A8D                 add     al, 30h ; '0'
.text:00408A8F                 mov     [edi], al
.text:00408A91                 mov     [esp+1Ch+var_1C], ebx
.text:00408A94                 mov     [esp+1Ch+var_18], esi
.text:00408A98                 mov     [esp+1Ch+var_14], 0Ah
.text:00408AA0                 mov     [esp+1Ch+var_10], 0
.text:00408AA8                 call    sub_4129A0
.text:00408AAD                 mov     ebx, eax
.text:00408AAF                 mov     esi, edx
.text:00408AB1                 or      edx, ebx
.text:00408AB3                 jnz     short loc_408A70
.text:00408AB5                 add     esp, 10h
.text:00408AB8                 mov     eax, edi
.text:00408ABA                 pop     ebx
.text:00408ABB                 pop     esi
.text:00408ABC                 pop     edi
.text:00408ABD                 retn
.text:00408ABD sub_408A50      endp
.text:00408ABD
.text:00408ABD ; ---------------------------------------------------------------------------
.text:00408ABE                 align 10h
.text:00408AC0
.text:00408AC0 ; =============== S U B R O U T I N E =======================================
.text:00408AC0
.text:00408AC0
.text:00408AC0 sub_408AC0      proc near               ; CODE XREF: sub_402550+38E↑p
.text:00408AC0                                         ; sub_402DF0+23↑p
.text:00408AC0
.text:00408AC0 Time            = dword ptr -1Ch
.text:00408AC0 var_18          = dword ptr -18h
.text:00408AC0 var_C           = dword ptr -0Ch
.text:00408AC0 var_8           = dword ptr -8
.text:00408AC0 var_4           = dword ptr -4
.text:00408AC0 arg_0           = dword ptr  4
.text:00408AC0
.text:00408AC0                 sub     esp, 1Ch
.text:00408AC3                 mov     [esp+1Ch+var_4], ebx
.text:00408AC7                 mov     ebx, [esp+1Ch+arg_0]
.text:00408ACB                 mov     [esp+1Ch+Time], 0
.text:00408AD2                 mov     [esp+1Ch+var_18], ebx
.text:00408AD6                 call    sub_40E5C0
.text:00408ADB                 xor     edx, edx
.text:00408ADD                 test    eax, eax
.text:00408ADF                 jnz     short loc_408AF0
.text:00408AE1
.text:00408AE1 loc_408AE1:                             ; CODE XREF: sub_408AC0+5D↓j
.text:00408AE1                                         ; sub_408AC0+73↓j
.text:00408AE1                 mov     ebx, [esp+1Ch+var_4]
.text:00408AE5                 mov     eax, edx
.text:00408AE7                 add     esp, 1Ch
.text:00408AEA                 retn
.text:00408AEA ; ---------------------------------------------------------------------------
.text:00408AEB                 align 10h
.text:00408AF0
.text:00408AF0 loc_408AF0:                             ; CODE XREF: sub_408AC0+1F↑j
.text:00408AF0                 mov     [esp+1Ch+var_18], 0
.text:00408AF8                 lea     edx, [esp+1Ch+var_C]
.text:00408AFC                 mov     [esp+1Ch+Time], edx
.text:00408AFF                 call    sub_40E560
.text:00408B04                 test    eax, eax
.text:00408B06                 jnz     short loc_408B1F
.text:00408B08                 mov     ecx, [esp+1Ch+var_C]
.text:00408B0C                 mov     [ebx], ecx
.text:00408B0E                 mov     edx, [esp+1Ch+var_8]
.text:00408B12                 imul    edx, 3E8h
.text:00408B18                 mov     [ebx+4], edx
.text:00408B1B
.text:00408B1B loc_408B1B:                             ; CODE XREF: sub_408AC0+7E↓j
.text:00408B1B                 xor     edx, edx
.text:00408B1D                 jmp     short loc_408AE1
.text:00408B1F ; ---------------------------------------------------------------------------
.text:00408B1F
.text:00408B1F loc_408B1F:                             ; CODE XREF: sub_408AC0+46↑j
.text:00408B1F                 mov     [esp+1Ch+Time], 0 ; Time
.text:00408B26                 call    time
.text:00408B2B                 cmp     eax, 0FFFFFFFFh
.text:00408B2E                 mov     edx, 0FFFFFFFFh
.text:00408B33                 jz      short loc_408AE1
.text:00408B35                 mov     [ebx], eax
.text:00408B37                 mov     dword ptr [ebx+4], 0
.text:00408B3E                 jmp     short loc_408B1B
.text:00408B3E sub_408AC0      endp
.text:00408B3E
.text:00408B3E ; ---------------------------------------------------------------------------
.text:00408B40 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00408B40                                         ; DATA XREF: .data:Buffer↓o
.text:00408B72 ; const char aSSS[]
.text:00408B72 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_408E30+50↓o
.text:00408B7E aWrittenByS     db 'Written by %s.',0Ah,0
.text:00408B7E                                         ; DATA XREF: sub_408E30:loc_408ED1↓o
.text:00408B8E                 align 20h
.text:00408BA0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00408BA0                                         ; DATA XREF: sub_408E30+100↓o
.text:00408BA0                 db 'ere is NO',0Ah
.text:00408BA0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00408BA0                 db 'R PURPOSE.',0Ah,0
.text:00408C38 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00408C38                                         ; DATA XREF: sub_408E30:loc_408F71↓o
.text:00408C4F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00408C4F                                         ; DATA XREF: sub_408E30:loc_408F7D↓o
.text:00408C6B                 align 20h
.text:00408C80 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00408C80                                         ; DATA XREF: sub_408E30:loc_408F89↓o
.text:00408C80                 db 'and %s.',0Ah,0
.text:00408CA0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00408CA0                                         ; DATA XREF: sub_408E30:loc_408F95↓o
.text:00408CA0                 db '%s, and %s.',0Ah,0
.text:00408CC4                 align 20h
.text:00408CE0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00408CE0                                         ; DATA XREF: sub_408E30:loc_408FA1↓o
.text:00408CE0                 db '%s, %s, and %s.',0Ah,0
.text:00408D08                 align 20h
.text:00408D20 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00408D20                                         ; DATA XREF: sub_408E30:loc_408FAD↓o
.text:00408D20                 db '%s, %s, %s, and %s.',0Ah,0
.text:00408D4C                 align 20h
.text:00408D60 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00408D60                                         ; DATA XREF: sub_408E30:loc_408FB9↓o
.text:00408D60                 db '%s, %s, %s, %s,',0Ah
.text:00408D60                 db 'and %s.',0Ah,0
.text:00408D90                 align 20h
.text:00408DA0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00408DA0                                         ; DATA XREF: sub_408E30:loc_408FC5↓o
.text:00408DA0                 db '%s, %s, %s, %s,',0Ah
.text:00408DA0                 db '%s, and %s.',0Ah,0
.text:00408DD4                 align 10h
.text:00408DE0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00408DE0                                         ; DATA XREF: sub_408E30:def_408E9D↓o
.text:00408DE0                 db '%s, %s, %s, %s,',0Ah
.text:00408DE0                 db '%s, %s, and others.',0Ah,0
.text:00408E1C ; const char aSS_0[]
.text:00408E1C aSS_0           db '%s %s',0Ah,0        ; DATA XREF: sub_408E30+1B5↓o
.text:00408E23                 align 10h
.text:00408E30
.text:00408E30 ; =============== S U B R O U T I N E =======================================
.text:00408E30
.text:00408E30
.text:00408E30 ; int __cdecl sub_408E30(FILE *, FILE *, int, int, va_list)
.text:00408E30 sub_408E30      proc near               ; CODE XREF: sub_4067C0+A5↑p
.text:00408E30                                         ; .text:0040902A↓p
.text:00408E30
.text:00408E30 Stream          = dword ptr -2Ch
.text:00408E30 Format          = dword ptr -28h
.text:00408E30 ArgList         = dword ptr -24h
.text:00408E30 var_20          = dword ptr -20h
.text:00408E30 var_1C          = dword ptr -1Ch
.text:00408E30 var_14          = dword ptr -14h
.text:00408E30 arg_0           = dword ptr  4
.text:00408E30 arg_4           = dword ptr  8
.text:00408E30 arg_8           = dword ptr  0Ch
.text:00408E30 arg_C           = dword ptr  10h
.text:00408E30 arg_10          = dword ptr  14h
.text:00408E30
.text:00408E30                 push    ebp
.text:00408E31                 push    edi
.text:00408E32                 push    esi
.text:00408E33                 push    ebx
.text:00408E34                 sub     esp, 1Ch
.text:00408E37                 xor     ebx, ebx
.text:00408E39                 mov     edi, [esp+2Ch+arg_10]
.text:00408E3D                 mov     edx, [esp+2Ch+arg_8]
.text:00408E41                 mov     esi, [esp+2Ch+arg_0]
.text:00408E45                 mov     eax, [edi]
.text:00408E47                 mov     ecx, [esp+2Ch+arg_4]
.text:00408E4B                 mov     [esp+2Ch+var_14], edx
.text:00408E4F                 mov     ebp, [esp+2Ch+arg_C]
.text:00408E53                 lea     edx, [edi+4]
.text:00408E56                 test    eax, eax
.text:00408E58                 jz      short loc_408E6C
.text:00408E5A                 lea     esi, [esi+0]
.text:00408E60
.text:00408E60 loc_408E60:                             ; CODE XREF: sub_408E30+3A↓j
.text:00408E60                 mov     eax, edx
.text:00408E62                 inc     ebx
.text:00408E63                 mov     eax, [eax]
.text:00408E65                 add     edx, 4
.text:00408E68                 test    eax, eax
.text:00408E6A                 jnz     short loc_408E60
.text:00408E6C
.text:00408E6C loc_408E6C:                             ; CODE XREF: sub_408E30+28↑j
.text:00408E6C                 test    ecx, ecx
.text:00408E6E                 jz      loc_408FDD
.text:00408E74                 mov     [esp+2Ch+var_1C], ebp
.text:00408E78                 mov     edx, [esp+2Ch+var_14]
.text:00408E7C                 mov     [esp+2Ch+ArgList], ecx
.text:00408E80                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00408E88                 mov     [esp+2Ch+var_20], edx
.text:00408E8C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00408E8F                 call    fprintf
.text:00408E94
.text:00408E94 loc_408E94:                             ; CODE XREF: sub_408E30+1C9↓j
.text:00408E94                 cmp     ebx, 9          ; switch 10 cases
.text:00408E97                 ja      def_408E9D      ; jumptable 00408E9D default case
.text:00408E9D                 jmp     ds:jpt_408E9D[ebx*4] ; switch jump
.text:00408E9D ; ---------------------------------------------------------------------------
.text:00408EA4 jpt_408E9D      dd offset loc_408ECC    ; DATA XREF: sub_408E30+6D↑r
.text:00408EA4                 dd offset loc_408ED1    ; jump table for switch statement
.text:00408EA4                 dd offset loc_408F71
.text:00408EA4                 dd offset loc_408F7D
.text:00408EA4                 dd offset loc_408F89
.text:00408EA4                 dd offset loc_408F95
.text:00408EA4                 dd offset loc_408FA1
.text:00408EA4                 dd offset loc_408FAD
.text:00408EA4                 dd offset loc_408FB9
.text:00408EA4                 dd offset loc_408FC5
.text:00408ECC ; ---------------------------------------------------------------------------
.text:00408ECC
.text:00408ECC loc_408ECC:                             ; CODE XREF: sub_408E30+6D↑j
.text:00408ECC                                         ; DATA XREF: sub_408E30:jpt_408E9D↑o
.text:00408ECC                 call    abort           ; jumptable 00408E9D case 0
.text:00408ED1 ; ---------------------------------------------------------------------------
.text:00408ED1
.text:00408ED1 loc_408ED1:                             ; CODE XREF: sub_408E30+6D↑j
.text:00408ED1                                         ; DATA XREF: sub_408E30:jpt_408E9D↑o
.text:00408ED1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00408E9D case 1
.text:00408ED8                 nop
.text:00408ED9                 lea     esi, [esi+0]
.text:00408EE0
.text:00408EE0 loc_408EE0:                             ; CODE XREF: sub_408E30+148↓j
.text:00408EE0                                         ; sub_408E30+154↓j ...
.text:00408EE0                 call    ds:libintl_gettext
.text:00408EE6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00408EEA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00408EED                 mov     [esp+2Ch+Format], eax ; Format
.text:00408EF1                 call    vfprintf
.text:00408EF6                 mov     ebx, [esi+4]
.text:00408EF9                 dec     ebx
.text:00408EFA                 test    ebx, ebx
.text:00408EFC                 mov     [esi+4], ebx
.text:00408EFF                 js      short loc_408F5F
.text:00408F01                 mov     edi, [esi]
.text:00408F03                 mov     byte ptr [edi], 0Ah
.text:00408F06                 inc     dword ptr [esi]
.text:00408F08
.text:00408F08 loc_408F08:                             ; CODE XREF: sub_408E30+13F↓j
.text:00408F08                 mov     [esp+2Ch+Format], esi ; Stream
.text:00408F0C                 mov     edx, Buffer
.text:00408F12                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00408F15                 call    fputs
.text:00408F1A                 mov     ebp, [esi+4]
.text:00408F1D                 dec     ebp
.text:00408F1E                 test    ebp, ebp
.text:00408F20                 mov     [esi+4], ebp
.text:00408F23                 js      short loc_408F4D
.text:00408F25                 mov     ecx, [esi]
.text:00408F27                 mov     byte ptr [ecx], 0Ah
.text:00408F2A                 inc     dword ptr [esi]
.text:00408F2C
.text:00408F2C loc_408F2C:                             ; CODE XREF: sub_408E30+12D↓j
.text:00408F2C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00408F30                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00408F37                 call    ds:libintl_gettext
.text:00408F3D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00408F41                 add     esp, 1Ch
.text:00408F44                 pop     ebx
.text:00408F45                 pop     esi
.text:00408F46                 pop     edi
.text:00408F47                 pop     ebp
.text:00408F48                 jmp     fputs
.text:00408F4D ; ---------------------------------------------------------------------------
.text:00408F4D
.text:00408F4D loc_408F4D:                             ; CODE XREF: sub_408E30+F3↑j
.text:00408F4D                 mov     [esp+2Ch+Format], esi ; File
.text:00408F51                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00408F58                 call    _flsbuf
.text:00408F5D                 jmp     short loc_408F2C
.text:00408F5F ; ---------------------------------------------------------------------------
.text:00408F5F
.text:00408F5F loc_408F5F:                             ; CODE XREF: sub_408E30+CF↑j
.text:00408F5F                 mov     [esp+2Ch+Format], esi ; File
.text:00408F63                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00408F6A                 call    _flsbuf
.text:00408F6F                 jmp     short loc_408F08
.text:00408F71 ; ---------------------------------------------------------------------------
.text:00408F71
.text:00408F71 loc_408F71:                             ; CODE XREF: sub_408E30+6D↑j
.text:00408F71                                         ; DATA XREF: sub_408E30:jpt_408E9D↑o
.text:00408F71                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00408E9D case 2
.text:00408F78                 jmp     loc_408EE0
.text:00408F7D ; ---------------------------------------------------------------------------
.text:00408F7D
.text:00408F7D loc_408F7D:                             ; CODE XREF: sub_408E30+6D↑j
.text:00408F7D                                         ; DATA XREF: sub_408E30:jpt_408E9D↑o
.text:00408F7D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00408E9D case 3
.text:00408F84                 jmp     loc_408EE0
.text:00408F89 ; ---------------------------------------------------------------------------
.text:00408F89
.text:00408F89 loc_408F89:                             ; CODE XREF: sub_408E30+6D↑j
.text:00408F89                                         ; DATA XREF: sub_408E30:jpt_408E9D↑o
.text:00408F89                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00408E9D case 4
.text:00408F90                 jmp     loc_408EE0
.text:00408F95 ; ---------------------------------------------------------------------------
.text:00408F95
.text:00408F95 loc_408F95:                             ; CODE XREF: sub_408E30+6D↑j
.text:00408F95                                         ; DATA XREF: sub_408E30:jpt_408E9D↑o
.text:00408F95                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00408E9D case 5
.text:00408F9C                 jmp     loc_408EE0
.text:00408FA1 ; ---------------------------------------------------------------------------
.text:00408FA1
.text:00408FA1 loc_408FA1:                             ; CODE XREF: sub_408E30+6D↑j
.text:00408FA1                                         ; DATA XREF: sub_408E30:jpt_408E9D↑o
.text:00408FA1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00408E9D case 6
.text:00408FA8                 jmp     loc_408EE0
.text:00408FAD ; ---------------------------------------------------------------------------
.text:00408FAD
.text:00408FAD loc_408FAD:                             ; CODE XREF: sub_408E30+6D↑j
.text:00408FAD                                         ; DATA XREF: sub_408E30:jpt_408E9D↑o
.text:00408FAD                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00408E9D case 7
.text:00408FB4                 jmp     loc_408EE0
.text:00408FB9 ; ---------------------------------------------------------------------------
.text:00408FB9
.text:00408FB9 loc_408FB9:                             ; CODE XREF: sub_408E30+6D↑j
.text:00408FB9                                         ; DATA XREF: sub_408E30:jpt_408E9D↑o
.text:00408FB9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00408E9D case 8
.text:00408FC0                 jmp     loc_408EE0
.text:00408FC5 ; ---------------------------------------------------------------------------
.text:00408FC5
.text:00408FC5 loc_408FC5:                             ; CODE XREF: sub_408E30+6D↑j
.text:00408FC5                                         ; DATA XREF: sub_408E30:jpt_408E9D↑o
.text:00408FC5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00408E9D case 9
.text:00408FCC                 jmp     loc_408EE0
.text:00408FD1 ; ---------------------------------------------------------------------------
.text:00408FD1
.text:00408FD1 def_408E9D:                             ; CODE XREF: sub_408E30+67↑j
.text:00408FD1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00408E9D default case
.text:00408FD8                 jmp     loc_408EE0
.text:00408FDD ; ---------------------------------------------------------------------------
.text:00408FDD
.text:00408FDD loc_408FDD:                             ; CODE XREF: sub_408E30+3E↑j
.text:00408FDD                 mov     [esp+2Ch+var_20], ebp
.text:00408FE1                 mov     ecx, [esp+2Ch+var_14]
.text:00408FE5                 mov     [esp+2Ch+Format], offset aSS_0 ; "%s %s\n"
.text:00408FED                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00408FF0                 mov     [esp+2Ch+ArgList], ecx
.text:00408FF4                 call    fprintf
.text:00408FF9                 jmp     loc_408E94
.text:00408FF9 sub_408E30      endp
.text:00408FF9
.text:00408FF9 ; ---------------------------------------------------------------------------
.text:00408FFE                 align 10h
.text:00409000                 sub     esp, 1Ch
.text:00409003                 mov     edx, [esp+2Ch]
.text:00409007                 lea     ecx, [esp+30h]
.text:0040900B                 mov     [esp+10h], ecx
.text:0040900F                 mov     ecx, [esp+28h]
.text:00409013                 mov     [esp+0Ch], edx
.text:00409017                 mov     edx, [esp+24h]
.text:0040901B                 mov     [esp+8], ecx
.text:0040901F                 mov     [esp+4], edx
.text:00409023                 mov     edx, [esp+20h]
.text:00409027                 mov     [esp], edx
.text:0040902A                 call    sub_408E30
.text:0040902F                 add     esp, 1Ch
.text:00409032                 retn
.text:00409032 ; ---------------------------------------------------------------------------
.text:00409033                 align 10h
.text:00409040 aLiteral        db 'literal',0          ; DATA XREF: .text:00409080↓o
.text:00409048 aShell          db 'shell',0            ; DATA XREF: .text:00409084↓o
.text:0040904E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00409088↓o
.text:0040905B aC              db 'c',0                ; DATA XREF: .text:0040908C↓o
.text:0040905D aEscape         db 'escape',0           ; DATA XREF: .text:00409090↓o
.text:00409064 aLocale         db 'locale',0           ; DATA XREF: .text:00409094↓o
.text:0040906B aClocale        db 'clocale',0          ; DATA XREF: .text:00409098↓o
.text:00409073                 align 10h
.text:00409080                 dd offset aLiteral      ; "literal"
.text:00409084                 dd offset aShell        ; "shell"
.text:00409088                 dd offset aShellAlways  ; "shell-always"
.text:0040908C                 dd offset aC            ; "c"
.text:00409090                 dd offset aEscape       ; "escape"
.text:00409094                 dd offset aLocale       ; "locale"
.text:00409098                 dd offset aClocale      ; "clocale"
.text:0040909C                 dd 2 dup(0)
.text:004090A4                 dd 1, 2, 3, 4, 5, 6
.text:004090BC asc_4090BC:                             ; DATA XREF: sub_4090D0+7E↓o
.text:004090BC                                         ; sub_4090D0+A39↓o ...
.text:004090BC                 text "UTF-16LE", '"',27h,'`'
.text:004090C2                 align 10h
.text:004090D0
.text:004090D0 ; =============== S U B R O U T I N E =======================================
.text:004090D0
.text:004090D0
.text:004090D0 ; int __cdecl sub_4090D0(int, int, char *Str, int, int, int)
.text:004090D0 sub_4090D0      proc near               ; CODE XREF: sub_4090D0+43A↓p
.text:004090D0                                         ; .text:00409C93↓p ...
.text:004090D0
.text:004090D0 C               = dword ptr -4Ch
.text:004090D0 Type            = dword ptr -48h
.text:004090D0 SizeInBytes     = dword ptr -44h
.text:004090D0 State           = dword ptr -40h
.text:004090D0 var_3C          = dword ptr -3Ch
.text:004090D0 var_38          = dword ptr -38h
.text:004090D0 var_34          = dword ptr -34h
.text:004090D0 var_30          = dword ptr -30h
.text:004090D0 var_29          = byte ptr -29h
.text:004090D0 var_28          = dword ptr -28h
.text:004090D0 var_22          = byte ptr -22h
.text:004090D0 var_21          = byte ptr -21h
.text:004090D0 var_20          = dword ptr -20h
.text:004090D0 var_1C          = dword ptr -1Ch
.text:004090D0 var_18          = mbstate_t ptr -18h
.text:004090D0 arg_0           = dword ptr  4
.text:004090D0 arg_4           = dword ptr  8
.text:004090D0 Str             = dword ptr  0Ch
.text:004090D0 arg_C           = dword ptr  10h
.text:004090D0 arg_10          = dword ptr  14h
.text:004090D0 arg_14          = dword ptr  18h
.text:004090D0
.text:004090D0                 push    ebp
.text:004090D1                 push    edi
.text:004090D2                 push    esi
.text:004090D3                 push    ebx
.text:004090D4                 sub     esp, 3Ch
.text:004090D7                 mov     edx, ds:__mb_cur_max
.text:004090DD                 mov     [esp+4Ch+var_34], 0
.text:004090E5                 mov     [esp+4Ch+var_1C], 0
.text:004090ED                 cmp     dword ptr [edx], 1
.text:004090F0                 mov     [esp+4Ch+var_20], 0
.text:004090F8                 mov     [esp+4Ch+var_21], 0
.text:004090FD                 setz    [esp+4Ch+var_22]
.text:00409102                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00409107                 ja      short def_40910D ; jumptable 0040910D default case, cases 0,1
.text:00409109                 mov     edx, [esp+4Ch+arg_10]
.text:0040910D                 jmp     ds:jpt_40910D[edx*4] ; switch jump
.text:0040910D ; ---------------------------------------------------------------------------
.text:00409114 jpt_40910D      dd offset def_40910D    ; DATA XREF: sub_4090D0+3D↑r
.text:00409114                 dd offset def_40910D    ; jump table for switch statement
.text:00409114                 dd offset loc_409A55
.text:00409114                 dd offset loc_409130
.text:00409114                 dd offset loc_409A7B
.text:00409114                 dd offset loc_409A85
.text:00409114                 dd offset loc_409A85
.text:00409130 ; ---------------------------------------------------------------------------
.text:00409130
.text:00409130 loc_409130:                             ; CODE XREF: sub_4090D0+3D↑j
.text:00409130                                         ; DATA XREF: sub_4090D0:jpt_40910D↑o
.text:00409130                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040910D case 3
.text:00409134                 cmp     [esp+4Ch+var_34], eax
.text:00409138                 jnb     short loc_409141
.text:0040913A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040913E                 mov     byte ptr [ebx], 22h ; '"'
.text:00409141
.text:00409141 loc_409141:                             ; CODE XREF: sub_4090D0+68↑j
.text:00409141                 mov     [esp+4Ch+var_34], 1
.text:00409149                 mov     [esp+4Ch+var_21], 1
.text:0040914E                 mov     [esp+4Ch+var_1C], offset asc_4090BC ; "\"'`"
.text:00409156
.text:00409156 loc_409156:                             ; CODE XREF: sub_4090D0+9A6↓j
.text:00409156                 mov     [esp+4Ch+var_20], 1
.text:0040915E
.text:0040915E def_40910D:                             ; CODE XREF: sub_4090D0+37↑j
.text:0040915E                                         ; sub_4090D0+3D↑j ...
.text:0040915E                 xor     ebp, ebp        ; jumptable 0040910D default case, cases 0,1
.text:00409160
.text:00409160 loc_409160:                             ; CODE XREF: sub_4090D0+3DB↓j
.text:00409160                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00409165                 jz      loc_409A47
.text:0040916B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040916F
.text:0040916F loc_40916F:                             ; CODE XREF: sub_4090D0+980↓j
.text:0040916F                 jz      loc_4099DE
.text:00409175                 cmp     [esp+4Ch+var_21], 0
.text:0040917A                 jz      short loc_4091C0
.text:0040917C                 mov     esi, [esp+4Ch+var_20]
.text:00409180                 test    esi, esi
.text:00409182                 jz      short loc_4091C0
.text:00409184                 mov     ecx, [esp+4Ch+var_20]
.text:00409188                 lea     edi, [ecx+ebp]
.text:0040918B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040918F                 ja      short loc_4091C0
.text:00409191                 cld
.text:00409192                 mov     ebx, [esp+4Ch+Str]
.text:00409196                 mov     edi, [esp+4Ch+var_1C]
.text:0040919A                 add     ebx, ebp
.text:0040919C                 mov     esi, ebx
.text:0040919E                 cmp     ecx, ecx
.text:004091A0                 repe cmpsb
.text:004091A2                 jnz     short loc_4091C0
.text:004091A4                 mov     edx, [esp+4Ch+arg_4]
.text:004091A8                 cmp     [esp+4Ch+var_34], edx
.text:004091AC                 jnb     short loc_4091BA
.text:004091AE                 mov     ecx, [esp+4Ch+arg_0]
.text:004091B2                 mov     eax, [esp+4Ch+var_34]
.text:004091B6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004091BA
.text:004091BA loc_4091BA:                             ; CODE XREF: sub_4090D0+DC↑j
.text:004091BA                 inc     [esp+4Ch+var_34]
.text:004091BE                 mov     esi, esi
.text:004091C0
.text:004091C0 loc_4091C0:                             ; CODE XREF: sub_4090D0+AA↑j
.text:004091C0                                         ; sub_4090D0+B2↑j ...
.text:004091C0                 mov     edi, [esp+4Ch+Str]
.text:004091C4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004091C9                 movzx   eax, bl
.text:004091CC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004091CF                 ja      def_4091D5      ; jumptable 004091D5 default case, cases 1-6,14-31,64
.text:004091D5                 jmp     ds:jpt_4091D5[eax*4] ; switch jump
.text:004091D5 ; ---------------------------------------------------------------------------
.text:004091DC jpt_4091D5      dd offset loc_4093D8, offset def_4091D5, offset def_4091D5
.text:004091DC                                         ; DATA XREF: sub_4090D0+105↑r
.text:004091DC                 dd offset def_4091D5, offset def_4091D5, offset def_4091D5 ; jump table for switch statement
.text:004091DC                 dd offset def_4091D5, offset loc_4094B0, offset loc_4094CE
.text:004091DC                 dd offset loc_4094D2, offset loc_409517, offset loc_40951B
.text:004091DC                 dd offset loc_40951F, offset loc_409523, offset def_4091D5
.text:004091DC                 dd offset def_4091D5, offset def_4091D5, offset def_4091D5
.text:004091DC                 dd offset def_4091D5, offset def_4091D5, offset def_4091D5
.text:004091DC                 dd offset def_4091D5, offset def_4091D5, offset def_4091D5
.text:004091DC                 dd offset def_4091D5, offset def_4091D5, offset def_4091D5
.text:004091DC                 dd offset def_4091D5, offset def_4091D5, offset def_4091D5
.text:004091DC                 dd offset def_4091D5, offset def_4091D5, offset loc_4099A8
.text:004091DC                 dd offset loc_4099A8, offset loc_4099A8, offset loc_4099CA
.text:004091DC                 dd offset loc_4099A8, offset def_4095D2, offset loc_4099A8
.text:004091DC                 dd offset loc_409527, offset loc_4099A8, offset loc_4099A8
.text:004091DC                 dd offset loc_4099A8, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset loc_4099A8
.text:004091DC                 dd offset loc_4099A8, offset loc_4099A8, offset loc_4099A8
.text:004091DC                 dd offset loc_40958C, offset def_4091D5, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset loc_4099A8, offset loc_4099A1
.text:004091DC                 dd offset def_4095D2, offset loc_4099A8, offset def_4095D2
.text:004091DC                 dd offset loc_4099A8, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset def_4095D2, offset def_4095D2, offset def_4095D2
.text:004091DC                 dd offset loc_4099B8, offset loc_4099A8, offset loc_4099B8
.text:004091DC                 dd offset loc_4099CA
.text:004093D8 ; ---------------------------------------------------------------------------
.text:004093D8
.text:004093D8 loc_4093D8:                             ; CODE XREF: sub_4090D0+105↑j
.text:004093D8                                         ; DATA XREF: sub_4090D0:jpt_4091D5↑o
.text:004093D8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004091D5 case 0
.text:004093DD                 lea     eax, [ebp+1]
.text:004093E0                 jz      loc_409490
.text:004093E6                 mov     esi, [esp+4Ch+arg_4]
.text:004093EA                 cmp     [esp+4Ch+var_34], esi
.text:004093EE                 jnb     short loc_4093FC
.text:004093F0                 mov     eax, [esp+4Ch+arg_0]
.text:004093F4                 mov     ebx, [esp+4Ch+var_34]
.text:004093F8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004093FC
.text:004093FC loc_4093FC:                             ; CODE XREF: sub_4090D0+31E↑j
.text:004093FC                 inc     [esp+4Ch+var_34]
.text:00409400                 mov     edx, [esp+4Ch+arg_4]
.text:00409404                 cmp     [esp+4Ch+var_34], edx
.text:00409408                 jnb     short loc_409416
.text:0040940A                 mov     edi, [esp+4Ch+arg_0]
.text:0040940E                 mov     ecx, [esp+4Ch+var_34]
.text:00409412                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00409416
.text:00409416 loc_409416:                             ; CODE XREF: sub_4090D0+338↑j
.text:00409416                 inc     [esp+4Ch+var_34]
.text:0040941A                 mov     esi, [esp+4Ch+arg_4]
.text:0040941E                 cmp     [esp+4Ch+var_34], esi
.text:00409422                 jnb     short loc_409430
.text:00409424                 mov     ebx, [esp+4Ch+arg_0]
.text:00409428                 mov     eax, [esp+4Ch+var_34]
.text:0040942C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00409430
.text:00409430 loc_409430:                             ; CODE XREF: sub_4090D0+352↑j
.text:00409430                 inc     [esp+4Ch+var_34]
.text:00409434                 mov     bl, 30h ; '0'
.text:00409436                 lea     esi, [esi+0]
.text:00409439                 lea     edi, [edi+0]
.text:00409440
.text:00409440 def_4095D2:                             ; CODE XREF: sub_4090D0+105↑j
.text:00409440                                         ; sub_4090D0+463↓j ...
.text:00409440                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004091D5 cases 37,43-58,65-90,93,95,97-122
.text:00409440                                         ; jumptable 004095D2 default case, cases 34-38,42-44,46,48-59
.text:00409445                 lea     eax, [ebp+1]
.text:00409448                 jz      short loc_409490
.text:0040944A                 mov     cl, bl
.text:0040944C                 mov     edi, [esp+4Ch+arg_14]
.text:00409450                 mov     esi, 1
.text:00409455                 shr     cl, 5
.text:00409458                 movzx   edx, cl
.text:0040945B                 mov     ecx, ebx
.text:0040945D                 and     ecx, 1Fh
.text:00409460                 shl     esi, cl
.text:00409462                 test    [edi+edx*4+4], esi
.text:00409466                 jz      short loc_409482
.text:00409468
.text:00409468 loc_409468:                             ; CODE XREF: sub_4090D0+3FC↓j
.text:00409468                 mov     edx, [esp+4Ch+arg_4]
.text:0040946C                 cmp     [esp+4Ch+var_34], edx
.text:00409470                 jnb     short loc_40947E
.text:00409472                 mov     edi, [esp+4Ch+arg_0]
.text:00409476                 mov     esi, [esp+4Ch+var_34]
.text:0040947A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040947E
.text:0040947E loc_40947E:                             ; CODE XREF: sub_4090D0+3A0↑j
.text:0040947E                 inc     [esp+4Ch+var_34]
.text:00409482
.text:00409482 loc_409482:                             ; CODE XREF: sub_4090D0+396↑j
.text:00409482                 lea     eax, [ebp+1]
.text:00409485                 lea     esi, [esi+0]
.text:00409489                 lea     edi, [edi+0]
.text:00409490
.text:00409490 loc_409490:                             ; CODE XREF: sub_4090D0+310↑j
.text:00409490                                         ; sub_4090D0+378↑j ...
.text:00409490                 mov     ebp, [esp+4Ch+arg_4]
.text:00409494                 cmp     [esp+4Ch+var_34], ebp
.text:00409498                 jnb     short loc_4094A5
.text:0040949A                 mov     edx, [esp+4Ch+arg_0]
.text:0040949E                 mov     ecx, [esp+4Ch+var_34]
.text:004094A2                 mov     [ecx+edx], bl
.text:004094A5
.text:004094A5 loc_4094A5:                             ; CODE XREF: sub_4090D0+3C8↑j
.text:004094A5                 inc     [esp+4Ch+var_34]
.text:004094A9                 mov     ebp, eax
.text:004094AB                 jmp     loc_409160
.text:004094B0 ; ---------------------------------------------------------------------------
.text:004094B0
.text:004094B0 loc_4094B0:                             ; CODE XREF: sub_4090D0+105↑j
.text:004094B0                                         ; DATA XREF: sub_4090D0:jpt_4091D5↑o
.text:004094B0                 mov     dl, 61h ; 'a'   ; jumptable 004091D5 case 7
.text:004094B2                 lea     esi, [esi+0]
.text:004094B9                 lea     edi, [edi+0]
.text:004094C0
.text:004094C0 loc_4094C0:                             ; CODE XREF: sub_4090D0+400↓j
.text:004094C0                                         ; sub_4090D0+409↓j ...
.text:004094C0                 cmp     [esp+4Ch+var_21], 0
.text:004094C5                 lea     eax, [ebp+1]
.text:004094C8                 jz      short loc_409490
.text:004094CA                 mov     bl, dl
.text:004094CC                 jmp     short loc_409468
.text:004094CE ; ---------------------------------------------------------------------------
.text:004094CE
.text:004094CE loc_4094CE:                             ; CODE XREF: sub_4090D0+105↑j
.text:004094CE                                         ; DATA XREF: sub_4090D0:jpt_4091D5↑o
.text:004094CE                 mov     dl, 62h ; 'b'   ; jumptable 004091D5 case 8
.text:004094D0                 jmp     short loc_4094C0
.text:004094D2 ; ---------------------------------------------------------------------------
.text:004094D2
.text:004094D2 loc_4094D2:                             ; CODE XREF: sub_4090D0+105↑j
.text:004094D2                                         ; DATA XREF: sub_4090D0:jpt_4091D5↑o
.text:004094D2                 mov     dl, 74h ; 't'   ; jumptable 004091D5 case 9
.text:004094D4
.text:004094D4 loc_4094D4:                             ; CODE XREF: sub_4090D0+449↓j
.text:004094D4                                         ; sub_4090D0+455↓j ...
.text:004094D4                 cmp     [esp+4Ch+arg_10], 1
.text:004094D9                 jnz     short loc_4094C0
.text:004094DB
.text:004094DB loc_4094DB:                             ; CODE XREF: sub_4090D0+45C↓j
.text:004094DB                                         ; sub_4090D0+4C1↓j ...
.text:004094DB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 004098A2 cases 91,92,94,96,124
.text:004094E3                 mov     eax, [esp+4Ch+arg_14]
.text:004094E7                 mov     edx, [esp+4Ch+arg_C]
.text:004094EB                 mov     ecx, [esp+4Ch+Str]
.text:004094EF                 mov     ebx, [esp+4Ch+arg_4]
.text:004094F3                 mov     [esp+4Ch+var_38], eax ; int
.text:004094F7                 mov     ebp, [esp+4Ch+arg_0]
.text:004094FB                 mov     [esp+4Ch+State], edx ; int
.text:004094FF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00409503                 mov     [esp+4Ch+Type], ebx ; int
.text:00409507                 mov     [esp+4Ch+C], ebp ; int
.text:0040950A                 call    sub_4090D0
.text:0040950F
.text:0040950F loc_40950F:                             ; CODE XREF: sub_4090D0+972↓j
.text:0040950F                 add     esp, 3Ch
.text:00409512                 pop     ebx
.text:00409513                 pop     esi
.text:00409514                 pop     edi
.text:00409515                 pop     ebp
.text:00409516                 retn
.text:00409517 ; ---------------------------------------------------------------------------
.text:00409517
.text:00409517 loc_409517:                             ; CODE XREF: sub_4090D0+105↑j
.text:00409517                                         ; DATA XREF: sub_4090D0:jpt_4091D5↑o
.text:00409517                 mov     dl, 6Eh ; 'n'   ; jumptable 004091D5 case 10
.text:00409519                 jmp     short loc_4094D4
.text:0040951B ; ---------------------------------------------------------------------------
.text:0040951B
.text:0040951B loc_40951B:                             ; CODE XREF: sub_4090D0+105↑j
.text:0040951B                                         ; DATA XREF: sub_4090D0:jpt_4091D5↑o
.text:0040951B                 mov     dl, 76h ; 'v'   ; jumptable 004091D5 case 11
.text:0040951D                 jmp     short loc_4094C0
.text:0040951F ; ---------------------------------------------------------------------------
.text:0040951F
.text:0040951F loc_40951F:                             ; CODE XREF: sub_4090D0+105↑j
.text:0040951F                                         ; DATA XREF: sub_4090D0:jpt_4091D5↑o
.text:0040951F                 mov     dl, 66h ; 'f'   ; jumptable 004091D5 case 12
.text:00409521                 jmp     short loc_4094C0
.text:00409523 ; ---------------------------------------------------------------------------
.text:00409523
.text:00409523 loc_409523:                             ; CODE XREF: sub_4090D0+105↑j
.text:00409523                                         ; DATA XREF: sub_4090D0:jpt_4091D5↑o
.text:00409523                 mov     dl, 72h ; 'r'   ; jumptable 004091D5 case 13
.text:00409525                 jmp     short loc_4094D4
.text:00409527 ; ---------------------------------------------------------------------------
.text:00409527
.text:00409527 loc_409527:                             ; CODE XREF: sub_4090D0+105↑j
.text:00409527                                         ; DATA XREF: sub_4090D0:jpt_4091D5↑o
.text:00409527                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004091D5 case 39
.text:0040952C                 jz      short loc_4094DB ; jumptable 004098A2 cases 91,92,94,96,124
.text:0040952E                 cmp     [esp+4Ch+arg_10], 2
.text:00409533                 jnz     def_4095D2      ; jumptable 004091D5 cases 37,43-58,65-90,93,95,97-122
.text:00409533                                         ; jumptable 004095D2 default case, cases 34-38,42-44,46,48-59
.text:00409539                 mov     edx, [esp+4Ch+arg_4]
.text:0040953D                 cmp     [esp+4Ch+var_34], edx
.text:00409541                 jnb     short loc_40954F
.text:00409543                 mov     ecx, [esp+4Ch+arg_0]
.text:00409547                 mov     edi, [esp+4Ch+var_34]
.text:0040954B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040954F
.text:0040954F loc_40954F:                             ; CODE XREF: sub_4090D0+471↑j
.text:0040954F                 inc     [esp+4Ch+var_34]
.text:00409553                 mov     eax, [esp+4Ch+arg_4]
.text:00409557                 cmp     [esp+4Ch+var_34], eax
.text:0040955B                 jnb     short loc_409569
.text:0040955D                 mov     esi, [esp+4Ch+arg_0]
.text:00409561                 mov     edx, [esp+4Ch+var_34]
.text:00409565                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00409569
.text:00409569 loc_409569:                             ; CODE XREF: sub_4090D0+48B↑j
.text:00409569                 inc     [esp+4Ch+var_34]
.text:0040956D                 mov     edi, [esp+4Ch+arg_4]
.text:00409571                 cmp     [esp+4Ch+var_34], edi
.text:00409575                 jnb     short loc_409583
.text:00409577                 mov     ecx, [esp+4Ch+arg_0]
.text:0040957B                 mov     eax, [esp+4Ch+var_34]
.text:0040957F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00409583
.text:00409583 loc_409583:                             ; CODE XREF: sub_4090D0+4A5↑j
.text:00409583                                         ; sub_4090D0+5C4↓j ...
.text:00409583                 inc     [esp+4Ch+var_34]
.text:00409587                 jmp     def_4095D2      ; jumptable 004091D5 cases 37,43-58,65-90,93,95,97-122
.text:00409587                                         ; jumptable 004095D2 default case, cases 34-38,42-44,46,48-59
.text:0040958C ; ---------------------------------------------------------------------------
.text:0040958C
.text:0040958C loc_40958C:                             ; CODE XREF: sub_4090D0+105↑j
.text:0040958C                                         ; DATA XREF: sub_4090D0:jpt_4091D5↑o
.text:0040958C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004091D5 case 63
.text:00409591                 jz      loc_4094DB      ; jumptable 004098A2 cases 91,92,94,96,124
.text:00409597                 cmp     [esp+4Ch+arg_10], 3
.text:0040959C                 jnz     def_4095D2      ; jumptable 004091D5 cases 37,43-58,65-90,93,95,97-122
.text:0040959C                                         ; jumptable 004095D2 default case, cases 34-38,42-44,46,48-59
.text:004095A2                 lea     edx, [ebp+2]
.text:004095A5                 cmp     edx, [esp+4Ch+arg_C]
.text:004095A9                 jnb     def_4095D2      ; jumptable 004091D5 cases 37,43-58,65-90,93,95,97-122
.text:004095A9                                         ; jumptable 004095D2 default case, cases 34-38,42-44,46,48-59
.text:004095AF                 mov     esi, [esp+4Ch+Str]
.text:004095B3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004095B8                 jnz     def_4095D2      ; jumptable 004091D5 cases 37,43-58,65-90,93,95,97-122
.text:004095B8                                         ; jumptable 004095D2 default case, cases 34-38,42-44,46,48-59
.text:004095BE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004095C3                 movsx   eax, cl
.text:004095C6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004095C9                 cmp     eax, 1Dh
.text:004095CC                 ja      def_4095D2      ; jumptable 004091D5 cases 37,43-58,65-90,93,95,97-122
.text:004095CC                                         ; jumptable 004095D2 default case, cases 34-38,42-44,46,48-59
.text:004095D2                 jmp     ds:jpt_4095D2[eax*4] ; switch jump
.text:004095D2 ; ---------------------------------------------------------------------------
.text:004095D9                 align 4
.text:004095DC jpt_4095D2      dd offset loc_409654    ; DATA XREF: sub_4090D0+502↑r
.text:004095DC                 dd offset def_4095D2    ; jump table for switch statement
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset loc_409654
.text:004095DC                 dd offset loc_409654
.text:004095DC                 dd offset loc_409654
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset loc_409654
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset loc_409654
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset def_4095D2
.text:004095DC                 dd offset loc_409654
.text:004095DC                 dd offset loc_409654
.text:004095DC                 dd offset loc_409654
.text:00409654 ; ---------------------------------------------------------------------------
.text:00409654
.text:00409654 loc_409654:                             ; CODE XREF: sub_4090D0+502↑j
.text:00409654                                         ; DATA XREF: sub_4090D0:jpt_4095D2↑o
.text:00409654                 mov     ebp, edx        ; jumptable 004095D2 cases 33,39-41,45,47,60-62
.text:00409656                 mov     bl, cl
.text:00409658                 mov     edx, [esp+4Ch+arg_4]
.text:0040965C                 cmp     [esp+4Ch+var_34], edx
.text:00409660                 jnb     short loc_40966E
.text:00409662                 mov     ecx, [esp+4Ch+arg_0]
.text:00409666                 mov     edi, [esp+4Ch+var_34]
.text:0040966A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040966E
.text:0040966E loc_40966E:                             ; CODE XREF: sub_4090D0+590↑j
.text:0040966E                 inc     [esp+4Ch+var_34]
.text:00409672                 mov     eax, [esp+4Ch+arg_4]
.text:00409676                 cmp     [esp+4Ch+var_34], eax
.text:0040967A                 jnb     short loc_409688
.text:0040967C                 mov     edx, [esp+4Ch+arg_0]
.text:00409680                 mov     esi, [esp+4Ch+var_34]
.text:00409684                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00409688
.text:00409688 loc_409688:                             ; CODE XREF: sub_4090D0+5AA↑j
.text:00409688                 inc     [esp+4Ch+var_34]
.text:0040968C                 mov     edi, [esp+4Ch+arg_4]
.text:00409690                 cmp     [esp+4Ch+var_34], edi
.text:00409694                 jnb     loc_409583
.text:0040969A                 mov     eax, [esp+4Ch+arg_0]
.text:0040969E                 mov     ecx, [esp+4Ch+var_34]
.text:004096A2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:004096A6                 jmp     loc_409583
.text:004096A6 ; ---------------------------------------------------------------------------
.text:004096AB                 align 10h
.text:004096B0
.text:004096B0 def_4091D5:                             ; CODE XREF: sub_4090D0+FF↑j
.text:004096B0                                         ; sub_4090D0+105↑j
.text:004096B0                                         ; DATA XREF: ...
.text:004096B0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004091D5 default case, cases 1-6,14-31,64
.text:004096B5                 jz      loc_4097E0
.text:004096BB                 mov     [esp+4Ch+var_28], 1
.text:004096C3                 mov     esi, ds:__mb_cur_max
.text:004096C9                 movzx   edx, bl
.text:004096CC                 cmp     dword ptr [esi], 1
.text:004096CF                 jz      loc_4097C4
.text:004096D5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004096DD                 mov     [esp+4Ch+C], edx ; C
.text:004096E0                 call    _isctype
.text:004096E5
.text:004096E5 loc_4096E5:                             ; CODE XREF: sub_4090D0+705↓j
.text:004096E5                 test    eax, eax
.text:004096E7                 setnz   [esp+4Ch+var_29]
.text:004096EC
.text:004096EC loc_4096EC:                             ; CODE XREF: sub_4090D0+7A5↓j
.text:004096EC                 cmp     [esp+4Ch+var_21], 0
.text:004096F1                 lea     eax, [ebp+1]
.text:004096F4                 jz      loc_409490
.text:004096FA                 cmp     [esp+4Ch+var_29], 0
.text:004096FF                 jnz     def_4095D2      ; jumptable 004091D5 cases 37,43-58,65-90,93,95,97-122
.text:004096FF                                         ; jumptable 004095D2 default case, cases 34-38,42-44,46,48-59
.text:00409705
.text:00409705 loc_409705:                             ; CODE XREF: sub_4090D0+7AB↓j
.text:00409705                 mov     eax, [esp+4Ch+var_28]
.text:00409709                 lea     edx, [eax+ebp]
.text:0040970C                 lea     esi, [esi+0]
.text:00409710
.text:00409710 loc_409710:                             ; CODE XREF: sub_4090D0+6EF↓j
.text:00409710                 cmp     [esp+4Ch+var_21], 0
.text:00409715                 jz      short loc_409790
.text:00409717                 cmp     [esp+4Ch+var_29], 0
.text:0040971C                 jnz     short loc_409790
.text:0040971E                 mov     edi, [esp+4Ch+arg_4]
.text:00409722                 cmp     [esp+4Ch+var_34], edi
.text:00409726                 jnb     short loc_409734
.text:00409728                 mov     esi, [esp+4Ch+arg_0]
.text:0040972C                 mov     eax, [esp+4Ch+var_34]
.text:00409730                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00409734
.text:00409734 loc_409734:                             ; CODE XREF: sub_4090D0+656↑j
.text:00409734                 inc     [esp+4Ch+var_34]
.text:00409738                 mov     ecx, [esp+4Ch+arg_4]
.text:0040973C                 cmp     [esp+4Ch+var_34], ecx
.text:00409740                 jnb     short loc_409755
.text:00409742                 mov     cl, bl
.text:00409744                 mov     esi, [esp+4Ch+arg_0]
.text:00409748                 mov     edi, [esp+4Ch+var_34]
.text:0040974C                 shr     cl, 6
.text:0040974F                 add     cl, 30h ; '0'
.text:00409752                 mov     [edi+esi], cl
.text:00409755
.text:00409755 loc_409755:                             ; CODE XREF: sub_4090D0+670↑j
.text:00409755                 inc     [esp+4Ch+var_34]
.text:00409759                 mov     edi, [esp+4Ch+arg_4]
.text:0040975D                 cmp     [esp+4Ch+var_34], edi
.text:00409761                 jnb     short loc_409779
.text:00409763                 mov     cl, bl
.text:00409765                 mov     esi, [esp+4Ch+arg_0]
.text:00409769                 shr     cl, 3
.text:0040976C                 mov     edi, [esp+4Ch+var_34]
.text:00409770                 and     cl, 7
.text:00409773                 add     cl, 30h ; '0'
.text:00409776                 mov     [edi+esi], cl
.text:00409779
.text:00409779 loc_409779:                             ; CODE XREF: sub_4090D0+691↑j
.text:00409779                 inc     [esp+4Ch+var_34]
.text:0040977D                 and     bl, 7
.text:00409780                 add     bl, 30h ; '0'
.text:00409783                 lea     esi, [esi+0]
.text:00409789                 lea     edi, [edi+0]
.text:00409790
.text:00409790 loc_409790:                             ; CODE XREF: sub_4090D0+645↑j
.text:00409790                                         ; sub_4090D0+64C↑j
.text:00409790                 lea     eax, [ebp+1]
.text:00409793                 cmp     edx, eax
.text:00409795                 jbe     loc_409490
.text:0040979B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040979F                 cmp     [esp+4Ch+var_34], ebp
.text:004097A3                 jnb     short loc_4097B0
.text:004097A5                 mov     ecx, [esp+4Ch+arg_0]
.text:004097A9                 mov     edi, [esp+4Ch+var_34]
.text:004097AD                 mov     [edi+ecx], bl
.text:004097B0
.text:004097B0 loc_4097B0:                             ; CODE XREF: sub_4090D0+6D3↑j
.text:004097B0                 inc     [esp+4Ch+var_34]
.text:004097B4                 mov     ebp, eax
.text:004097B6                 mov     eax, [esp+4Ch+Str]
.text:004097BA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:004097BF                 jmp     loc_409710
.text:004097C4 ; ---------------------------------------------------------------------------
.text:004097C4
.text:004097C4 loc_4097C4:                             ; CODE XREF: sub_4090D0+5FF↑j
.text:004097C4                 mov     ecx, ds:_pctype
.text:004097CA                 mov     edi, [ecx]
.text:004097CC                 movzx   eax, word ptr [edi+edx*2]
.text:004097D0                 and     eax, 157h
.text:004097D5                 jmp     loc_4096E5
.text:004097D5 ; ---------------------------------------------------------------------------
.text:004097DA                 align 10h
.text:004097E0
.text:004097E0 loc_4097E0:                             ; CODE XREF: sub_4090D0+5E5↑j
.text:004097E0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004097E5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004097ED                 mov     [esp+4Ch+var_28], 0
.text:004097F5                 mov     [esp+4Ch+var_29], 1
.text:004097FA                 jz      loc_40998C
.text:00409800
.text:00409800 loc_409800:                             ; CODE XREF: sub_4090D0+8CC↓j
.text:00409800                 mov     ecx, [esp+4Ch+arg_C]
.text:00409804                 lea     edx, [esp+4Ch+var_18]
.text:00409808                 mov     edi, [esp+4Ch+Str]
.text:0040980C                 mov     [esp+4Ch+State], edx ; State
.text:00409810                 lea     esi, [esp+4Ch+var_18._State]
.text:00409814                 sub     ecx, ebp
.text:00409816                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040981A                 add     edi, ebp
.text:0040981C                 mov     [esp+4Ch+var_30], edi
.text:00409820                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00409824                 mov     [esp+4Ch+C], esi ; DstCh
.text:00409827                 call    mbrtowc
.text:0040982C                 test    eax, eax
.text:0040982E                 mov     edi, eax
.text:00409830                 jz      short loc_409870
.text:00409832                 cmp     eax, 0FFFFFFFFh
.text:00409835                 jz      loc_409982
.text:0040983B                 cmp     eax, 0FFFFFFFEh
.text:0040983E                 jz      loc_409942
.text:00409844                 cmp     [esp+4Ch+arg_10], 1
.text:00409849                 jz      short loc_409880
.text:0040984B
.text:0040984B loc_40984B:                             ; CODE XREF: sub_4090D0+7B9↓j
.text:0040984B                                         ; sub_4090D0+86D↓j
.text:0040984B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00409850                 mov     [esp+4Ch+Type], 157h ; Type
.text:00409858                 mov     [esp+4Ch+C], ecx ; C
.text:0040985B                 call    iswctype
.text:00409860                 test    eax, eax
.text:00409862                 jnz     short loc_409869
.text:00409864                 mov     [esp+4Ch+var_29], 0
.text:00409869
.text:00409869 loc_409869:                             ; CODE XREF: sub_4090D0+792↑j
.text:00409869                 mov     [esp+4Ch+var_28], edi
.text:0040986D                 lea     esi, [esi+0]
.text:00409870
.text:00409870 loc_409870:                             ; CODE XREF: sub_4090D0+760↑j
.text:00409870                                         ; sub_4090D0+87B↓j ...
.text:00409870                 cmp     [esp+4Ch+var_28], 1
.text:00409875                 jbe     loc_4096EC
.text:0040987B                 jmp     loc_409705
.text:00409880 ; ---------------------------------------------------------------------------
.text:00409880
.text:00409880 loc_409880:                             ; CODE XREF: sub_4090D0+779↑j
.text:00409880                 cmp     [esp+4Ch+arg_10], eax
.text:00409884                 mov     edx, 1
.text:00409889                 jnb     short loc_40984B
.text:0040988B
.text:0040988B loc_40988B:                             ; CODE XREF: sub_4090D0+867↓j
.text:0040988B                 mov     ecx, [esp+4Ch+Str]
.text:0040988F                 lea     esi, [edx+ebp]
.text:00409892                 movsx   eax, byte ptr [esi+ecx]
.text:00409896                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00409899                 cmp     eax, 21h
.text:0040989C                 ja      def_4098A2      ; jumptable 004098A2 default case, cases 93,95,97-123
.text:004098A2                 jmp     ds:jpt_4098A2[eax*4] ; switch jump
.text:004098A2 ; ---------------------------------------------------------------------------
.text:004098A9                 align 4
.text:004098AC jpt_4098A2      dd offset loc_4094DB    ; DATA XREF: sub_4090D0+7D2↑r
.text:004098AC                 dd offset loc_4094DB    ; jump table for switch statement
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset loc_4094DB
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset loc_4094DB
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset def_4098A2
.text:004098AC                 dd offset loc_4094DB
.text:00409934 ; ---------------------------------------------------------------------------
.text:00409934
.text:00409934 def_4098A2:                             ; CODE XREF: sub_4090D0+7CC↑j
.text:00409934                                         ; sub_4090D0+7D2↑j
.text:00409934                                         ; DATA XREF: ...
.text:00409934                 inc     edx             ; jumptable 004098A2 default case, cases 93,95,97-123
.text:00409935                 cmp     edx, edi
.text:00409937                 jb      loc_40988B
.text:0040993D                 jmp     loc_40984B
.text:00409942 ; ---------------------------------------------------------------------------
.text:00409942
.text:00409942 loc_409942:                             ; CODE XREF: sub_4090D0+76E↑j
.text:00409942                 cmp     ebp, [esp+4Ch+arg_C]
.text:00409946                 mov     [esp+4Ch+var_29], 0
.text:0040994B                 jnb     loc_409870
.text:00409951                 mov     eax, [esp+4Ch+var_30]
.text:00409955                 cmp     byte ptr [eax], 0
.text:00409958                 jz      loc_409870
.text:0040995E
.text:0040995E loc_40995E:                             ; CODE XREF: sub_4090D0+8AB↓j
.text:0040995E                 inc     [esp+4Ch+var_28]
.text:00409962                 mov     esi, [esp+4Ch+var_28]
.text:00409966                 lea     eax, [esi+ebp]
.text:00409969                 cmp     eax, [esp+4Ch+arg_C]
.text:0040996D                 jnb     loc_409870
.text:00409973                 mov     edi, [esp+4Ch+Str]
.text:00409977                 cmp     byte ptr [eax+edi], 0
.text:0040997B                 jnz     short loc_40995E
.text:0040997D                 jmp     loc_409870
.text:00409982 ; ---------------------------------------------------------------------------
.text:00409982
.text:00409982 loc_409982:                             ; CODE XREF: sub_4090D0+765↑j
.text:00409982                 mov     [esp+4Ch+var_29], 0
.text:00409987                 jmp     loc_409870
.text:0040998C ; ---------------------------------------------------------------------------
.text:0040998C
.text:0040998C loc_40998C:                             ; CODE XREF: sub_4090D0+72A↑j
.text:0040998C                 mov     edx, [esp+4Ch+Str]
.text:00409990                 mov     [esp+4Ch+C], edx ; Str
.text:00409993                 call    strlen
.text:00409998                 mov     [esp+4Ch+arg_C], eax
.text:0040999C                 jmp     loc_409800
.text:004099A1 ; ---------------------------------------------------------------------------
.text:004099A1
.text:004099A1 loc_4099A1:                             ; CODE XREF: sub_4090D0+105↑j
.text:004099A1                                         ; DATA XREF: sub_4090D0:jpt_4091D5↑o
.text:004099A1                 mov     dl, bl          ; jumptable 004091D5 case 92
.text:004099A3                 jmp     loc_4094D4
.text:004099A8 ; ---------------------------------------------------------------------------
.text:004099A8
.text:004099A8 loc_4099A8:                             ; CODE XREF: sub_4090D0+105↑j
.text:004099A8                                         ; sub_4090D0+902↓j
.text:004099A8                                         ; DATA XREF: ...
.text:004099A8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004091D5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004099AD                 jnz     def_4095D2      ; jumptable 004091D5 cases 37,43-58,65-90,93,95,97-122
.text:004099AD                                         ; jumptable 004095D2 default case, cases 34-38,42-44,46,48-59
.text:004099B3                 jmp     loc_4094DB      ; jumptable 004098A2 cases 91,92,94,96,124
.text:004099B8 ; ---------------------------------------------------------------------------
.text:004099B8
.text:004099B8 loc_4099B8:                             ; CODE XREF: sub_4090D0+105↑j
.text:004099B8                                         ; DATA XREF: sub_4090D0:jpt_4091D5↑o
.text:004099B8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004091D5 cases 123,125
.text:004099BD                 jz      short loc_4099D4
.text:004099BF                 cmp     [esp+4Ch+arg_C], 1
.text:004099C4
.text:004099C4 loc_4099C4:                             ; CODE XREF: sub_4090D0+90C↓j
.text:004099C4                 jnz     def_4095D2      ; jumptable 004091D5 cases 37,43-58,65-90,93,95,97-122
.text:004099C4                                         ; jumptable 004095D2 default case, cases 34-38,42-44,46,48-59
.text:004099CA
.text:004099CA loc_4099CA:                             ; CODE XREF: sub_4090D0+105↑j
.text:004099CA                                         ; DATA XREF: sub_4090D0:jpt_4091D5↑o
.text:004099CA                 test    ebp, ebp        ; jumptable 004091D5 cases 35,126
.text:004099CC                 jnz     def_4095D2      ; jumptable 004091D5 cases 37,43-58,65-90,93,95,97-122
.text:004099CC                                         ; jumptable 004095D2 default case, cases 34-38,42-44,46,48-59
.text:004099D2                 jmp     short loc_4099A8 ; jumptable 004091D5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004099D4 ; ---------------------------------------------------------------------------
.text:004099D4
.text:004099D4 loc_4099D4:                             ; CODE XREF: sub_4090D0+8ED↑j
.text:004099D4                 mov     esi, [esp+4Ch+Str]
.text:004099D8                 cmp     byte ptr [esi+1], 0
.text:004099DC                 jmp     short loc_4099C4
.text:004099DE ; ---------------------------------------------------------------------------
.text:004099DE
.text:004099DE loc_4099DE:                             ; CODE XREF: sub_4090D0:loc_40916F↑j
.text:004099DE                 test    ebp, ebp
.text:004099E0                 jnz     short loc_4099ED
.text:004099E2                 cmp     [esp+4Ch+arg_10], 1
.text:004099E7                 jz      loc_4094DB      ; jumptable 004098A2 cases 91,92,94,96,124
.text:004099ED
.text:004099ED loc_4099ED:                             ; CODE XREF: sub_4090D0+910↑j
.text:004099ED                 mov     esi, [esp+4Ch+var_1C]
.text:004099F1                 test    esi, esi
.text:004099F3                 jz      short loc_409A28
.text:004099F5                 mov     edi, [esp+4Ch+var_1C]
.text:004099F9                 movzx   eax, byte ptr [edi]
.text:004099FC                 test    al, al
.text:004099FE                 jz      short loc_409A28
.text:00409A00
.text:00409A00 loc_409A00:                             ; CODE XREF: sub_4090D0+956↓j
.text:00409A00                 mov     ebp, [esp+4Ch+arg_4]
.text:00409A04                 cmp     [esp+4Ch+var_34], ebp
.text:00409A08                 jnb     short loc_409A15
.text:00409A0A                 mov     ecx, [esp+4Ch+arg_0]
.text:00409A0E                 mov     ebx, [esp+4Ch+var_34]
.text:00409A12                 mov     [ebx+ecx], al
.text:00409A15
.text:00409A15 loc_409A15:                             ; CODE XREF: sub_4090D0+938↑j
.text:00409A15                 inc     [esp+4Ch+var_1C]
.text:00409A19                 inc     [esp+4Ch+var_34]
.text:00409A1D                 mov     edx, [esp+4Ch+var_1C]
.text:00409A21                 movzx   eax, byte ptr [edx]
.text:00409A24                 test    al, al
.text:00409A26                 jnz     short loc_409A00
.text:00409A28
.text:00409A28 loc_409A28:                             ; CODE XREF: sub_4090D0+923↑j
.text:00409A28                                         ; sub_4090D0+92E↑j
.text:00409A28                 mov     eax, [esp+4Ch+arg_4]
.text:00409A2C                 cmp     [esp+4Ch+var_34], eax
.text:00409A30                 jnb     short loc_409A3E
.text:00409A32                 mov     edi, [esp+4Ch+arg_0]
.text:00409A36                 mov     esi, [esp+4Ch+var_34]
.text:00409A3A                 mov     byte ptr [esi+edi], 0
.text:00409A3E
.text:00409A3E loc_409A3E:                             ; CODE XREF: sub_4090D0+960↑j
.text:00409A3E                 mov     eax, [esp+4Ch+var_34]
.text:00409A42                 jmp     loc_40950F
.text:00409A47 ; ---------------------------------------------------------------------------
.text:00409A47
.text:00409A47 loc_409A47:                             ; CODE XREF: sub_4090D0+95↑j
.text:00409A47                 mov     ebx, [esp+4Ch+Str]
.text:00409A4B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00409A50                 jmp     loc_40916F
.text:00409A55 ; ---------------------------------------------------------------------------
.text:00409A55
.text:00409A55 loc_409A55:                             ; CODE XREF: sub_4090D0+3D↑j
.text:00409A55                                         ; DATA XREF: sub_4090D0:jpt_40910D↑o
.text:00409A55                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040910D case 2
.text:00409A59                 cmp     [esp+4Ch+var_34], edx
.text:00409A5D                 jnb     short loc_409A66
.text:00409A5F                 mov     ecx, [esp+4Ch+arg_0]
.text:00409A63                 mov     byte ptr [ecx], 27h ; '''
.text:00409A66
.text:00409A66 loc_409A66:                             ; CODE XREF: sub_4090D0+98D↑j
.text:00409A66                 mov     [esp+4Ch+var_34], 1
.text:00409A6E                 mov     [esp+4Ch+var_1C], 4090BEh
.text:00409A76                 jmp     loc_409156
.text:00409A7B ; ---------------------------------------------------------------------------
.text:00409A7B
.text:00409A7B loc_409A7B:                             ; CODE XREF: sub_4090D0+3D↑j
.text:00409A7B                                         ; DATA XREF: sub_4090D0:jpt_40910D↑o
.text:00409A7B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040910D case 4
.text:00409A80                 jmp     def_40910D      ; jumptable 0040910D default case, cases 0,1
.text:00409A85 ; ---------------------------------------------------------------------------
.text:00409A85
.text:00409A85 loc_409A85:                             ; CODE XREF: sub_4090D0+3D↑j
.text:00409A85                                         ; DATA XREF: sub_4090D0:jpt_40910D↑o
.text:00409A85                 mov     [esp+4Ch+C], 4090C0h ; jumptable 0040910D cases 5,6
.text:00409A8C                 call    ds:libintl_gettext
.text:00409A92                 cmp     eax, 4090C0h
.text:00409A97                 mov     edi, eax
.text:00409A99                 jz      short loc_409B10
.text:00409A9B
.text:00409A9B loc_409A9B:                             ; CODE XREF: sub_4090D0+A45↓j
.text:00409A9B                                         ; sub_4090D0+A4C↓j
.text:00409A9B                 mov     [esp+4Ch+C], 4090BEh
.text:00409AA2                 call    ds:libintl_gettext
.text:00409AA8                 cmp     eax, 4090BEh
.text:00409AAD                 mov     edx, eax
.text:00409AAF                 jz      short loc_409B02
.text:00409AB1
.text:00409AB1 loc_409AB1:                             ; CODE XREF: sub_4090D0+A37↓j
.text:00409AB1                                         ; sub_4090D0+A3E↓j
.text:00409AB1                 mov     [esp+4Ch+var_1C], edi
.text:00409AB5                 cmp     byte ptr [edi], 0
.text:00409AB8                 jz      short loc_409AE8
.text:00409ABA
.text:00409ABA loc_409ABA:                             ; CODE XREF: sub_4090D0+A16↓j
.text:00409ABA                 mov     ecx, [esp+4Ch+arg_4]
.text:00409ABE                 cmp     [esp+4Ch+var_34], ecx
.text:00409AC2                 jnb     short loc_409AD7
.text:00409AC4                 mov     ebp, [esp+4Ch+var_1C]
.text:00409AC8                 mov     edi, [esp+4Ch+arg_0]
.text:00409ACC                 mov     esi, [esp+4Ch+var_34]
.text:00409AD0                 movzx   ebx, byte ptr [ebp+0]
.text:00409AD4                 mov     [esi+edi], bl
.text:00409AD7
.text:00409AD7 loc_409AD7:                             ; CODE XREF: sub_4090D0+9F2↑j
.text:00409AD7                 inc     [esp+4Ch+var_1C]
.text:00409ADB                 inc     [esp+4Ch+var_34]
.text:00409ADF                 mov     eax, [esp+4Ch+var_1C]
.text:00409AE3                 cmp     byte ptr [eax], 0
.text:00409AE6                 jnz     short loc_409ABA
.text:00409AE8
.text:00409AE8 loc_409AE8:                             ; CODE XREF: sub_4090D0+9E8↑j
.text:00409AE8                 mov     [esp+4Ch+var_21], 1
.text:00409AED                 mov     [esp+4Ch+var_1C], edx
.text:00409AF1                 mov     [esp+4Ch+C], edx ; Str
.text:00409AF4                 call    strlen
.text:00409AF9                 mov     [esp+4Ch+var_20], eax
.text:00409AFD                 jmp     def_40910D      ; jumptable 0040910D default case, cases 0,1
.text:00409B02 ; ---------------------------------------------------------------------------
.text:00409B02
.text:00409B02 loc_409B02:                             ; CODE XREF: sub_4090D0+9DF↑j
.text:00409B02                 cmp     [esp+4Ch+arg_10], 6
.text:00409B07                 jnz     short loc_409AB1
.text:00409B09                 mov     edx, offset asc_4090BC ; "\"'`"
.text:00409B0E                 jmp     short loc_409AB1
.text:00409B10 ; ---------------------------------------------------------------------------
.text:00409B10
.text:00409B10 loc_409B10:                             ; CODE XREF: sub_4090D0+9C9↑j
.text:00409B10                 cmp     [esp+4Ch+arg_10], 6
.text:00409B15                 jnz     short loc_409A9B
.text:00409B17                 mov     edi, offset asc_4090BC ; "\"'`"
.text:00409B1C                 jmp     loc_409A9B
.text:00409B1C sub_4090D0      endp
.text:00409B1C
.text:00409B21 ; ---------------------------------------------------------------------------
.text:00409B21                 jmp     short loc_409B30
.text:00409B21 ; ---------------------------------------------------------------------------
.text:00409B23                 align 10h
.text:00409B30
.text:00409B30 loc_409B30:                             ; CODE XREF: .text:00409B21↑j
.text:00409B30                 sub     esp, 0Ch
.text:00409B33                 mov     [esp+4], ebx
.text:00409B37                 mov     [esp+8], esi
.text:00409B3B                 call    _errno
.text:00409B40                 mov     esi, [eax]
.text:00409B42                 mov     dword ptr [esp], 24h ; '$'
.text:00409B49                 call    sub_4069D0
.text:00409B4E                 mov     edx, [esp+10h]
.text:00409B52                 mov     ebx, eax
.text:00409B54                 test    edx, edx
.text:00409B56                 jz      short loc_409BA1
.text:00409B58
.text:00409B58 loc_409B58:                             ; CODE XREF: .text:00409BA6↓j
.text:00409B58                 mov     ecx, [edx]
.text:00409B5A                 mov     [ebx], ecx
.text:00409B5C                 mov     ecx, [edx+4]
.text:00409B5F                 mov     [ebx+4], ecx
.text:00409B62                 mov     ecx, [edx+8]
.text:00409B65                 mov     [ebx+8], ecx
.text:00409B68                 mov     ecx, [edx+0Ch]
.text:00409B6B                 mov     [ebx+0Ch], ecx
.text:00409B6E                 mov     ecx, [edx+10h]
.text:00409B71                 mov     [ebx+10h], ecx
.text:00409B74                 mov     ecx, [edx+14h]
.text:00409B77                 mov     [ebx+14h], ecx
.text:00409B7A                 mov     ecx, [edx+18h]
.text:00409B7D                 mov     [ebx+18h], ecx
.text:00409B80                 mov     ecx, [edx+1Ch]
.text:00409B83                 mov     [ebx+1Ch], ecx
.text:00409B86                 mov     ecx, [edx+20h]
.text:00409B89                 mov     [ebx+20h], ecx
.text:00409B8C                 call    _errno
.text:00409B91                 mov     [eax], esi
.text:00409B93                 mov     esi, [esp+8]
.text:00409B97                 mov     eax, ebx
.text:00409B99                 mov     ebx, [esp+4]
.text:00409B9D                 add     esp, 0Ch
.text:00409BA0                 retn
.text:00409BA1 ; ---------------------------------------------------------------------------
.text:00409BA1
.text:00409BA1 loc_409BA1:                             ; CODE XREF: .text:00409B56↑j
.text:00409BA1                 mov     edx, offset dword_415410
.text:00409BA6                 jmp     short loc_409B58
.text:00409BA6 ; ---------------------------------------------------------------------------
.text:00409BA8                 align 10h
.text:00409BB0                 mov     eax, [esp+4]
.text:00409BB4                 test    eax, eax
.text:00409BB6                 jz      short loc_409BC0
.text:00409BB8
.text:00409BB8 loc_409BB8:                             ; CODE XREF: .text:00409BC5↓j
.text:00409BB8                 mov     eax, [eax]
.text:00409BBA                 retn
.text:00409BBA ; ---------------------------------------------------------------------------
.text:00409BBB                 align 10h
.text:00409BC0
.text:00409BC0 loc_409BC0:                             ; CODE XREF: .text:00409BB6↑j
.text:00409BC0                 mov     eax, offset dword_415410
.text:00409BC5                 jmp     short loc_409BB8
.text:00409BC5 ; ---------------------------------------------------------------------------
.text:00409BC7                 align 10h
.text:00409BD0                 mov     edx, [esp+4]
.text:00409BD4                 test    edx, edx
.text:00409BD6                 jz      short loc_409BE0
.text:00409BD8
.text:00409BD8 loc_409BD8:                             ; CODE XREF: .text:00409BE5↓j
.text:00409BD8                 mov     ecx, [esp+8]
.text:00409BDC                 mov     [edx], ecx
.text:00409BDE                 retn
.text:00409BDE ; ---------------------------------------------------------------------------
.text:00409BDF                 align 10h
.text:00409BE0
.text:00409BE0 loc_409BE0:                             ; CODE XREF: .text:00409BD6↑j
.text:00409BE0                 mov     edx, offset dword_415410
.text:00409BE5                 jmp     short loc_409BD8
.text:00409BE5 ; ---------------------------------------------------------------------------
.text:00409BE7                 align 10h
.text:00409BF0                 sub     esp, 8
.text:00409BF3                 mov     eax, [esp+0Ch]
.text:00409BF7                 movzx   ecx, byte ptr [esp+10h]
.text:00409BFC                 mov     [esp], ebx
.text:00409BFF                 mov     ebx, [esp+14h]
.text:00409C03                 mov     [esp+4], esi
.text:00409C07                 mov     dl, cl
.text:00409C09                 shr     dl, 5
.text:00409C0C                 movzx   edx, dl
.text:00409C0F                 shl     edx, 2
.text:00409C12                 test    eax, eax
.text:00409C14                 lea     esi, [edx+eax+4]
.text:00409C18                 jz      short loc_409C40
.text:00409C1A
.text:00409C1A loc_409C1A:                             ; CODE XREF: .text:00409C46↓j
.text:00409C1A                 mov     edx, [esi]
.text:00409C1C                 and     ecx, 1Fh
.text:00409C1F                 and     ebx, 1
.text:00409C22                 mov     eax, edx
.text:00409C24                 shr     eax, cl
.text:00409C26                 and     eax, 1
.text:00409C29                 xor     ebx, eax
.text:00409C2B                 shl     ebx, cl
.text:00409C2D                 xor     edx, ebx
.text:00409C2F                 mov     [esi], edx
.text:00409C31                 mov     ebx, [esp]
.text:00409C34                 mov     esi, [esp+4]
.text:00409C38                 add     esp, 8
.text:00409C3B                 retn
.text:00409C3B ; ---------------------------------------------------------------------------
.text:00409C3C                 align 10h
.text:00409C40
.text:00409C40 loc_409C40:                             ; CODE XREF: .text:00409C18↑j
.text:00409C40                 lea     esi, dword_415414[edx]
.text:00409C46                 jmp     short loc_409C1A
.text:00409C46 ; ---------------------------------------------------------------------------
.text:00409C48                 align 10h
.text:00409C50                 sub     esp, 2Ch
.text:00409C53                 mov     [esp+24h], ebx
.text:00409C57                 mov     ebx, [esp+40h]
.text:00409C5B                 mov     [esp+28h], esi
.text:00409C5F                 test    ebx, ebx
.text:00409C61                 jz      short loc_409CB0
.text:00409C63
.text:00409C63 loc_409C63:                             ; CODE XREF: .text:00409CB5↓j
.text:00409C63                 call    _errno
.text:00409C68                 mov     esi, [eax]
.text:00409C6A                 mov     [esp+14h], ebx
.text:00409C6E                 mov     edx, [ebx]
.text:00409C70                 mov     ecx, [esp+38h]
.text:00409C74                 mov     ebx, [esp+3Ch]
.text:00409C78                 mov     [esp+10h], edx
.text:00409C7C                 mov     edx, [esp+34h]
.text:00409C80                 mov     [esp+0Ch], ebx
.text:00409C84                 mov     [esp+8], ecx
.text:00409C88                 mov     [esp+4], edx
.text:00409C8C                 mov     edx, [esp+30h]
.text:00409C90                 mov     [esp], edx
.text:00409C93                 call    sub_4090D0
.text:00409C98                 mov     ebx, eax
.text:00409C9A                 call    _errno
.text:00409C9F                 mov     [eax], esi
.text:00409CA1                 mov     esi, [esp+28h]
.text:00409CA5                 mov     eax, ebx
.text:00409CA7                 mov     ebx, [esp+24h]
.text:00409CAB                 add     esp, 2Ch
.text:00409CAE                 retn
.text:00409CAE ; ---------------------------------------------------------------------------
.text:00409CAF                 align 10h
.text:00409CB0
.text:00409CB0 loc_409CB0:                             ; CODE XREF: .text:00409C61↑j
.text:00409CB0                 mov     ebx, offset dword_415410
.text:00409CB5                 jmp     short loc_409C63
.text:00409CB5 ; ---------------------------------------------------------------------------
.text:00409CB7                 align 10h
.text:00409CC0                 push    ebp
.text:00409CC1                 push    edi
.text:00409CC2                 push    esi
.text:00409CC3                 push    ebx
.text:00409CC4                 sub     esp, 2Ch
.text:00409CC7                 mov     ebp, [esp+48h]
.text:00409CCB                 call    _errno
.text:00409CD0                 mov     edx, [eax]
.text:00409CD2                 test    ebp, ebp
.text:00409CD4                 mov     ebx, ebp
.text:00409CD6                 mov     [esp+28h], edx
.text:00409CDA                 jz      loc_409D90
.text:00409CE0
.text:00409CE0 loc_409CE0:                             ; CODE XREF: .text:00409D95↓j
.text:00409CE0                 call    _errno
.text:00409CE5                 mov     edi, [eax]
.text:00409CE7                 mov     esi, ebp
.text:00409CE9                 mov     [esp+14h], ebx
.text:00409CED                 mov     ecx, [ebx]
.text:00409CEF                 mov     dword ptr [esp], 0
.text:00409CF6                 mov     edx, [esp+44h]
.text:00409CFA                 mov     dword ptr [esp+4], 0
.text:00409D02                 mov     eax, [esp+40h]
.text:00409D06                 mov     [esp+10h], ecx
.text:00409D0A                 mov     [esp+0Ch], edx
.text:00409D0E                 mov     [esp+8], eax
.text:00409D12                 call    sub_4090D0
.text:00409D17                 mov     ebx, eax
.text:00409D19                 call    _errno
.text:00409D1E                 mov     [eax], edi
.text:00409D20                 lea     edi, [ebx+1]
.text:00409D23                 mov     [esp], edi
.text:00409D26                 call    sub_4069D0
.text:00409D2B                 mov     [esp+24h], eax
.text:00409D2F                 test    ebp, ebp
.text:00409D31                 jz      short loc_409D82
.text:00409D33
.text:00409D33 loc_409D33:                             ; CODE XREF: .text:00409D87↓j
.text:00409D33                 call    _errno
.text:00409D38                 mov     ebp, [eax]
.text:00409D3A                 mov     [esp+14h], esi
.text:00409D3E                 mov     ecx, [esi]
.text:00409D40                 mov     [esp+4], edi
.text:00409D44                 mov     edx, [esp+44h]
.text:00409D48                 mov     esi, [esp+24h]
.text:00409D4C                 mov     [esp+10h], ecx
.text:00409D50                 mov     eax, [esp+40h]
.text:00409D54                 mov     [esp+0Ch], edx
.text:00409D58                 mov     [esp], esi
.text:00409D5B                 mov     [esp+8], eax
.text:00409D5F                 call    sub_4090D0
.text:00409D64                 call    _errno
.text:00409D69                 mov     [eax], ebp
.text:00409D6B                 call    _errno
.text:00409D70                 mov     ebx, [esp+28h]
.text:00409D74                 mov     [eax], ebx
.text:00409D76                 mov     eax, [esp+24h]
.text:00409D7A                 add     esp, 2Ch
.text:00409D7D                 pop     ebx
.text:00409D7E                 pop     esi
.text:00409D7F                 pop     edi
.text:00409D80                 pop     ebp
.text:00409D81                 retn
.text:00409D82 ; ---------------------------------------------------------------------------
.text:00409D82
.text:00409D82 loc_409D82:                             ; CODE XREF: .text:00409D31↑j
.text:00409D82                 mov     esi, offset dword_415410
.text:00409D87                 jmp     short loc_409D33
.text:00409D87 ; ---------------------------------------------------------------------------
.text:00409D89                 align 10h
.text:00409D90
.text:00409D90 loc_409D90:                             ; CODE XREF: .text:00409CDA↑j
.text:00409D90                 mov     ebx, offset dword_415410
.text:00409D95                 jmp     loc_409CE0
.text:00409D95 ; ---------------------------------------------------------------------------
.text:00409D9A                 align 10h
.text:00409DA0                 sub     esp, 1Ch
.text:00409DA3                 mov     edx, [esp+24h]
.text:00409DA7                 mov     dword ptr [esp+0Ch], offset dword_415410
.text:00409DAF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00409DB7                 mov     [esp+4], edx
.text:00409DBB                 mov     edx, [esp+20h]
.text:00409DBF                 mov     [esp], edx
.text:00409DC2                 call    sub_40A210
.text:00409DC7                 add     esp, 1Ch
.text:00409DCA                 retn
.text:00409DCA ; ---------------------------------------------------------------------------
.text:00409DCB                 align 10h
.text:00409DD0                 sub     esp, 1Ch
.text:00409DD3                 mov     edx, [esp+20h]
.text:00409DD7                 mov     dword ptr [esp+0Ch], offset dword_415410
.text:00409DDF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00409DE7                 mov     [esp+4], edx
.text:00409DEB                 mov     dword ptr [esp], 0
.text:00409DF2                 call    sub_40A210
.text:00409DF7                 add     esp, 1Ch
.text:00409DFA                 retn
.text:00409DFA ; ---------------------------------------------------------------------------
.text:00409DFB                 align 10h
.text:00409E00
.text:00409E00 ; =============== S U B R O U T I N E =======================================
.text:00409E00
.text:00409E00
.text:00409E00 ; int __cdecl sub_409E00(int, int, char *)
.text:00409E00 sub_409E00      proc near               ; CODE XREF: sub_406CD0+1A↑p
.text:00409E00                                         ; sub_406D00+1A↑p ...
.text:00409E00
.text:00409E00 var_BC          = dword ptr -0BCh
.text:00409E00 var_B8          = dword ptr -0B8h
.text:00409E00 var_B4          = dword ptr -0B4h
.text:00409E00 var_B0          = dword ptr -0B0h
.text:00409E00 var_AC          = dword ptr -0ACh
.text:00409E00 var_A8          = dword ptr -0A8h
.text:00409E00 var_A4          = dword ptr -0A4h
.text:00409E00 var_A0          = dword ptr -0A0h
.text:00409E00 var_9C          = dword ptr -9Ch
.text:00409E00 var_98          = dword ptr -98h
.text:00409E00 var_94          = dword ptr -94h
.text:00409E00 var_90          = dword ptr -90h
.text:00409E00 var_8C          = dword ptr -8Ch
.text:00409E00 var_7C          = dword ptr -7Ch
.text:00409E00 var_78          = dword ptr -78h
.text:00409E00 var_74          = dword ptr -74h
.text:00409E00 var_70          = dword ptr -70h
.text:00409E00 var_6C          = dword ptr -6Ch
.text:00409E00 var_68          = dword ptr -68h
.text:00409E00 var_64          = dword ptr -64h
.text:00409E00 var_60          = dword ptr -60h
.text:00409E00 var_5C          = dword ptr -5Ch
.text:00409E00 var_4C          = dword ptr -4Ch
.text:00409E00 var_48          = dword ptr -48h
.text:00409E00 var_44          = dword ptr -44h
.text:00409E00 var_40          = dword ptr -40h
.text:00409E00 var_3C          = dword ptr -3Ch
.text:00409E00 var_38          = dword ptr -38h
.text:00409E00 var_34          = dword ptr -34h
.text:00409E00 var_30          = dword ptr -30h
.text:00409E00 var_2C          = dword ptr -2Ch
.text:00409E00 arg_0           = dword ptr  4
.text:00409E00 arg_4           = dword ptr  8
.text:00409E00 arg_8           = dword ptr  0Ch
.text:00409E00
.text:00409E00                 push    ebp
.text:00409E01                 xor     eax, eax
.text:00409E03                 mov     ecx, 8
.text:00409E08                 push    edi
.text:00409E09                 push    esi
.text:00409E0A                 push    ebx
.text:00409E0B                 sub     esp, 0ACh
.text:00409E11                 mov     ebp, [esp+0BCh+arg_4]
.text:00409E18                 cld
.text:00409E19                 lea     edi, [esp+0BCh+var_A8]
.text:00409E1D                 mov     [esp+0BCh+var_AC], ebp
.text:00409E21                 rep stosd
.text:00409E23                 mov     eax, [esp+0BCh+var_8C]
.text:00409E27                 mov     edi, [esp+0BCh+var_AC]
.text:00409E2B                 mov     esi, [esp+0BCh+var_A8]
.text:00409E2F                 mov     [esp+0BCh+var_5C], eax
.text:00409E33                 mov     ebp, [esp+0BCh+var_A4]
.text:00409E37                 mov     eax, [esp+0BCh+var_AC]
.text:00409E3B                 mov     [esp+0BCh+var_7C], edi
.text:00409E3F                 mov     ecx, [esp+0BCh+var_94]
.text:00409E43                 mov     edi, [esp+0BCh+var_A0]
.text:00409E47                 mov     [esp+0BCh+var_78], esi
.text:00409E4B                 mov     edx, [esp+0BCh+var_90]
.text:00409E4F                 mov     esi, [esp+0BCh+var_9C]
.text:00409E53                 mov     [esp+0BCh+var_4C], eax
.text:00409E57                 mov     ebx, [esp+0BCh+var_98]
.text:00409E5B                 mov     eax, [esp+0BCh+var_A8]
.text:00409E5F                 mov     [esp+0BCh+var_74], ebp
.text:00409E63                 mov     [esp+0BCh+var_70], edi
.text:00409E67                 mov     [esp+0BCh+var_6C], esi
.text:00409E6B                 mov     [esp+0BCh+var_68], ebx
.text:00409E6F                 mov     [esp+0BCh+var_64], ecx
.text:00409E73                 mov     [esp+0BCh+var_60], edx
.text:00409E77                 mov     [esp+0BCh+var_48], eax
.text:00409E7B                 mov     [esp+0BCh+var_44], ebp
.text:00409E7F                 mov     [esp+0BCh+var_40], edi
.text:00409E83                 mov     [esp+0BCh+var_3C], esi
.text:00409E8A                 mov     [esp+0BCh+var_38], ebx
.text:00409E91                 mov     ebx, [esp+0BCh+var_8C]
.text:00409E95                 mov     [esp+0BCh+var_30], edx
.text:00409E9C                 mov     edx, [esp+0BCh+arg_8]
.text:00409EA3                 mov     [esp+0BCh+var_34], ecx
.text:00409EAA                 lea     ecx, [esp+0BCh+var_4C]
.text:00409EAE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00409EB2                 mov     edx, [esp+0BCh+arg_0]
.text:00409EB9                 mov     [esp+0BCh+var_2C], ebx
.text:00409EC0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00409EC4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00409ECC                 mov     [esp+0BCh+var_BC], edx ; int
.text:00409ECF                 call    sub_40A210
.text:00409ED4                 add     esp, 0ACh
.text:00409EDA                 pop     ebx
.text:00409EDB                 pop     esi
.text:00409EDC                 pop     edi
.text:00409EDD                 pop     ebp
.text:00409EDE                 retn
.text:00409EDE sub_409E00      endp
.text:00409EDE
.text:00409EDE ; ---------------------------------------------------------------------------
.text:00409EDF                 align 10h
.text:00409EE0                 push    ebp
.text:00409EE1                 xor     eax, eax
.text:00409EE3                 mov     ecx, 8
.text:00409EE8                 push    edi
.text:00409EE9                 push    esi
.text:00409EEA                 push    ebx
.text:00409EEB                 sub     esp, 0ACh
.text:00409EF1                 mov     edx, [esp+0C4h]
.text:00409EF8                 cld
.text:00409EF9                 lea     edi, [esp+14h]
.text:00409EFD                 mov     [esp+10h], edx
.text:00409F01                 rep stosd
.text:00409F03                 mov     eax, [esp+30h]
.text:00409F07                 mov     ebp, [esp+10h]
.text:00409F0B                 mov     edi, [esp+14h]
.text:00409F0F                 mov     [esp+60h], eax
.text:00409F13                 mov     esi, [esp+20h]
.text:00409F17                 mov     eax, [esp+10h]
.text:00409F1B                 mov     [esp+40h], ebp
.text:00409F1F                 mov     ecx, [esp+28h]
.text:00409F23                 mov     ebp, [esp+18h]
.text:00409F27                 mov     [esp+44h], edi
.text:00409F2B                 mov     edx, [esp+2Ch]
.text:00409F2F                 mov     edi, [esp+1Ch]
.text:00409F33                 mov     [esp+70h], eax
.text:00409F37                 mov     ebx, [esp+24h]
.text:00409F3B                 mov     eax, [esp+14h]
.text:00409F3F                 mov     [esp+48h], ebp
.text:00409F43                 mov     [esp+4Ch], edi
.text:00409F47                 mov     [esp+50h], esi
.text:00409F4B                 mov     [esp+54h], ebx
.text:00409F4F                 mov     [esp+58h], ecx
.text:00409F53                 mov     [esp+5Ch], edx
.text:00409F57                 mov     [esp+74h], eax
.text:00409F5B                 mov     [esp+78h], ebp
.text:00409F5F                 mov     [esp+7Ch], edi
.text:00409F63                 mov     [esp+80h], esi
.text:00409F6A                 mov     [esp+84h], ebx
.text:00409F71                 mov     esi, [esp+30h]
.text:00409F75                 lea     ebx, [esp+70h]
.text:00409F79                 mov     [esp+8Ch], edx
.text:00409F80                 mov     edx, [esp+0C8h]
.text:00409F87                 mov     [esp+88h], ecx
.text:00409F8E                 mov     ecx, [esp+0CCh]
.text:00409F95                 mov     [esp+4], edx
.text:00409F99                 mov     edx, [esp+0C0h]
.text:00409FA0                 mov     [esp+90h], esi
.text:00409FA7                 mov     [esp+0Ch], ebx
.text:00409FAB                 mov     [esp+8], ecx
.text:00409FAF                 mov     [esp], edx
.text:00409FB2                 call    sub_40A210
.text:00409FB7                 add     esp, 0ACh
.text:00409FBD                 pop     ebx
.text:00409FBE                 pop     esi
.text:00409FBF                 pop     edi
.text:00409FC0                 pop     ebp
.text:00409FC1                 retn
.text:00409FC1 ; ---------------------------------------------------------------------------
.text:00409FC2                 align 10h
.text:00409FD0                 push    ebp
.text:00409FD1                 xor     eax, eax
.text:00409FD3                 mov     ecx, 8
.text:00409FD8                 push    edi
.text:00409FD9                 push    esi
.text:00409FDA                 push    ebx
.text:00409FDB                 sub     esp, 0ACh
.text:00409FE1                 mov     edi, [esp+0C0h]
.text:00409FE8                 cld
.text:00409FE9                 mov     [esp+10h], edi
.text:00409FED                 lea     edi, [esp+14h]
.text:00409FF1                 rep stosd
.text:00409FF3                 mov     eax, [esp+30h]
.text:00409FF7                 mov     esi, [esp+10h]
.text:00409FFB                 mov     ebx, [esp+14h]
.text:00409FFF                 mov     [esp+60h], eax
.text:0040A003                 mov     ebp, [esp+18h]
.text:0040A007                 mov     eax, [esp+10h]
.text:0040A00B                 mov     [esp+40h], esi
.text:0040A00F                 mov     edi, [esp+1Ch]
.text:0040A013                 mov     esi, [esp+20h]
.text:0040A017                 mov     [esp+44h], ebx
.text:0040A01B                 mov     ecx, [esp+28h]
.text:0040A01F                 mov     edx, [esp+2Ch]
.text:0040A023                 mov     [esp+70h], eax
.text:0040A027                 mov     ebx, [esp+24h]
.text:0040A02B                 mov     eax, [esp+14h]
.text:0040A02F                 mov     [esp+48h], ebp
.text:0040A033                 mov     [esp+4Ch], edi
.text:0040A037                 mov     [esp+50h], esi
.text:0040A03B                 mov     [esp+54h], ebx
.text:0040A03F                 mov     [esp+58h], ecx
.text:0040A043                 mov     [esp+5Ch], edx
.text:0040A047                 mov     [esp+74h], eax
.text:0040A04B                 mov     [esp+78h], ebp
.text:0040A04F                 mov     [esp+7Ch], edi
.text:0040A053                 mov     [esp+80h], esi
.text:0040A05A                 mov     [esp+84h], ebx
.text:0040A061                 mov     [esp+8Ch], edx
.text:0040A068                 lea     edx, [esp+70h]
.text:0040A06C                 mov     [esp+88h], ecx
.text:0040A073                 mov     ecx, [esp+30h]
.text:0040A077                 mov     [esp+0Ch], edx
.text:0040A07B                 mov     edx, [esp+0C4h]
.text:0040A082                 mov     [esp+90h], ecx
.text:0040A089                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040A091                 mov     [esp+4], edx
.text:0040A095                 mov     dword ptr [esp], 0
.text:0040A09C                 call    sub_40A210
.text:0040A0A1                 add     esp, 0ACh
.text:0040A0A7                 pop     ebx
.text:0040A0A8                 pop     esi
.text:0040A0A9                 pop     edi
.text:0040A0AA                 pop     ebp
.text:0040A0AB                 retn
.text:0040A0AB ; ---------------------------------------------------------------------------
.text:0040A0AC                 align 10h
.text:0040A0B0                 push    edi
.text:0040A0B1                 push    esi
.text:0040A0B2                 push    ebx
.text:0040A0B3                 sub     esp, 40h
.text:0040A0B6                 mov     edx, ds:dword_41541C
.text:0040A0BC                 mov     ebx, ds:dword_415410
.text:0040A0C2                 mov     esi, ds:dword_415418
.text:0040A0C8                 mov     edi, ds:dword_415414
.text:0040A0CE                 mov     [esp+1Ch], edx
.text:0040A0D2                 mov     ecx, ds:dword_415420
.text:0040A0D8                 mov     edx, ds:dword_415430
.text:0040A0DE                 mov     [esp+10h], ebx
.text:0040A0E2                 mov     ebx, ds:dword_415424
.text:0040A0E8                 mov     [esp+30h], edx
.text:0040A0EC                 movzx   edx, byte ptr [esp+54h]
.text:0040A0F1                 mov     [esp+18h], esi
.text:0040A0F5                 mov     esi, ds:dword_41542C
.text:0040A0FB                 mov     [esp+14h], edi
.text:0040A0FF                 mov     edi, ds:dword_415428
.text:0040A105                 mov     [esp+20h], ecx
.text:0040A109                 mov     cl, dl
.text:0040A10B                 shr     cl, 5
.text:0040A10E                 mov     [esp+24h], ebx
.text:0040A112                 movzx   ebx, cl
.text:0040A115                 mov     [esp+2Ch], esi
.text:0040A119                 lea     esi, [esp+10h]
.text:0040A11D                 mov     [esp+28h], edi
.text:0040A121                 lea     edi, [esi+ebx*4]
.text:0040A124                 mov     ebx, edx
.text:0040A126                 mov     edx, [edi+4]
.text:0040A129                 and     ebx, 1Fh
.text:0040A12C                 mov     cl, bl
.text:0040A12E                 mov     eax, edx
.text:0040A130                 shr     eax, cl
.text:0040A132                 and     eax, 1
.text:0040A135                 xor     eax, 1
.text:0040A138                 shl     eax, cl
.text:0040A13A                 xor     edx, eax
.text:0040A13C                 mov     [edi+4], edx
.text:0040A13F                 mov     edx, [esp+50h]
.text:0040A143                 mov     [esp+0Ch], esi
.text:0040A147                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040A14F                 mov     [esp+4], edx
.text:0040A153                 mov     dword ptr [esp], 0
.text:0040A15A                 call    sub_40A210
.text:0040A15F                 add     esp, 40h
.text:0040A162                 pop     ebx
.text:0040A163                 pop     esi
.text:0040A164                 pop     edi
.text:0040A165                 retn
.text:0040A165 ; ---------------------------------------------------------------------------
.text:0040A166                 align 10h
.text:0040A170
.text:0040A170 ; =============== S U B R O U T I N E =======================================
.text:0040A170
.text:0040A170
.text:0040A170 ; int __cdecl sub_40A170(char *)
.text:0040A170 sub_40A170      proc near               ; CODE XREF: sub_4068B0+64↑p
.text:0040A170
.text:0040A170 var_4C          = dword ptr -4Ch
.text:0040A170 var_48          = dword ptr -48h
.text:0040A170 var_44          = dword ptr -44h
.text:0040A170 var_40          = dword ptr -40h
.text:0040A170 var_3C          = dword ptr -3Ch
.text:0040A170 var_38          = dword ptr -38h
.text:0040A170 var_34          = dword ptr -34h
.text:0040A170 var_30          = dword ptr -30h
.text:0040A170 var_2C          = dword ptr -2Ch
.text:0040A170 var_28          = dword ptr -28h
.text:0040A170 var_24          = dword ptr -24h
.text:0040A170 var_20          = dword ptr -20h
.text:0040A170 var_1C          = dword ptr -1Ch
.text:0040A170 arg_0           = dword ptr  4
.text:0040A170
.text:0040A170                 sub     esp, 4Ch
.text:0040A173                 mov     ecx, ds:dword_415410
.text:0040A179                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:0040A181                 mov     edx, ds:dword_415414
.text:0040A187                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040A18E                 mov     [esp+4Ch+var_3C], ecx
.text:0040A192                 mov     ecx, ds:dword_41541C
.text:0040A198                 mov     [esp+4Ch+var_38], edx
.text:0040A19C                 mov     edx, ds:dword_415418
.text:0040A1A2                 mov     [esp+4Ch+var_30], ecx
.text:0040A1A6                 mov     ecx, ds:dword_415420
.text:0040A1AC                 mov     eax, edx
.text:0040A1AE                 shr     eax, 1Ah
.text:0040A1B1                 and     eax, 1
.text:0040A1B4                 xor     eax, 1
.text:0040A1B7                 mov     [esp+4Ch+var_2C], ecx
.text:0040A1BB                 shl     eax, 1Ah
.text:0040A1BE                 mov     ecx, ds:dword_415424
.text:0040A1C4                 xor     edx, eax
.text:0040A1C6                 mov     [esp+4Ch+var_34], edx
.text:0040A1CA                 mov     edx, [esp+4Ch+arg_0]
.text:0040A1CE                 mov     [esp+4Ch+var_28], ecx
.text:0040A1D2                 mov     ecx, ds:dword_415428
.text:0040A1D8                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040A1DC                 mov     [esp+4Ch+var_24], ecx
.text:0040A1E0                 mov     ecx, ds:dword_41542C
.text:0040A1E6                 mov     [esp+4Ch+var_20], ecx
.text:0040A1EA                 mov     ecx, ds:dword_415430
.text:0040A1F0                 mov     [esp+4Ch+var_1C], ecx
.text:0040A1F4                 lea     ecx, [esp+4Ch+var_3C]
.text:0040A1F8                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040A1FC                 call    sub_40A210
.text:0040A201                 add     esp, 4Ch
.text:0040A204                 retn
.text:0040A204 sub_40A170      endp
.text:0040A204
.text:0040A204 ; ---------------------------------------------------------------------------
.text:0040A205                 align 10h
.text:0040A210
.text:0040A210 ; =============== S U B R O U T I N E =======================================
.text:0040A210
.text:0040A210
.text:0040A210 ; int __cdecl sub_40A210(int, char *, int, int)
.text:0040A210 sub_40A210      proc near               ; CODE XREF: .text:00409DC2↑p
.text:0040A210                                         ; .text:00409DF2↑p ...
.text:0040A210
.text:0040A210 Block           = dword ptr -2Ch
.text:0040A210 var_28          = dword ptr -28h
.text:0040A210 Str             = dword ptr -24h
.text:0040A210 var_20          = dword ptr -20h
.text:0040A210 var_1C          = dword ptr -1Ch
.text:0040A210 var_18          = dword ptr -18h
.text:0040A210 var_14          = dword ptr -14h
.text:0040A210 arg_0           = dword ptr  4
.text:0040A210 arg_4           = dword ptr  8
.text:0040A210 arg_8           = dword ptr  0Ch
.text:0040A210 arg_C           = dword ptr  10h
.text:0040A210
.text:0040A210                 push    ebp
.text:0040A211                 push    edi
.text:0040A212                 push    esi
.text:0040A213                 push    ebx
.text:0040A214                 sub     esp, 1Ch
.text:0040A217                 call    _errno
.text:0040A21C                 mov     edx, [eax]
.text:0040A21E                 mov     eax, [esp+2Ch+arg_0]
.text:0040A222                 mov     [esp+2Ch+var_14], edx
.text:0040A226                 test    eax, eax
.text:0040A228                 js      loc_40A3CA
.text:0040A22E                 mov     eax, [esp+2Ch+arg_0]
.text:0040A232                 cmp     dword_414050, eax
.text:0040A238                 ja      short loc_40A2B0
.text:0040A23A                 mov     esi, eax
.text:0040A23C                 inc     esi
.text:0040A23D                 cmp     esi, 1FFFFFFFh
.text:0040A243                 ja      loc_40A3CF
.text:0040A249                 mov     ebx, off_41405C
.text:0040A24F                 cmp     ebx, offset dword_414054
.text:0040A255                 jz      loc_40A3A1
.text:0040A25B
.text:0040A25B loc_40A25B:                             ; CODE XREF: sub_40A210+1B5↓j
.text:0040A25B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040A25E                 lea     ecx, ds:0[esi*8]
.text:0040A265                 mov     ebp, esi
.text:0040A267                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040A26B                 call    sub_406A60
.text:0040A270                 mov     off_41405C, eax
.text:0040A275                 mov     ebx, dword_414050
.text:0040A27B                 sub     ebp, ebx
.text:0040A27D                 lea     edi, [eax+ebx*8]
.text:0040A280                 lea     eax, ds:0[ebp*8]
.text:0040A287                 cmp     eax, 7
.text:0040A28A                 jbe     short loc_40A2A0
.text:0040A28C                 test    edi, 4
.text:0040A292                 jz      short loc_40A2A0
.text:0040A294                 mov     dword ptr [edi], 0
.text:0040A29A                 sub     eax, 4
.text:0040A29D                 add     edi, 4
.text:0040A2A0
.text:0040A2A0 loc_40A2A0:                             ; CODE XREF: sub_40A210+7A↑j
.text:0040A2A0                                         ; sub_40A210+82↑j
.text:0040A2A0                 cld
.text:0040A2A1                 mov     ecx, eax
.text:0040A2A3                 shr     ecx, 2
.text:0040A2A6                 xor     eax, eax
.text:0040A2A8                 rep stosd
.text:0040A2AA                 mov     dword_414050, esi
.text:0040A2B0
.text:0040A2B0 loc_40A2B0:                             ; CODE XREF: sub_40A210+28↑j
.text:0040A2B0                 mov     esi, off_41405C
.text:0040A2B6                 mov     eax, [esp+2Ch+arg_0]
.text:0040A2BA                 mov     ebp, [esi+eax*8]
.text:0040A2BD                 mov     edi, [esi+eax*8+4]
.text:0040A2C1                 mov     esi, [esp+2Ch+arg_C]
.text:0040A2C5                 test    esi, esi
.text:0040A2C7                 jz      loc_40A397
.text:0040A2CD
.text:0040A2CD loc_40A2CD:                             ; CODE XREF: sub_40A210+18C↓j
.text:0040A2CD                 call    _errno
.text:0040A2D2                 mov     ebx, [eax]
.text:0040A2D4                 mov     [esp+2Ch+var_18], esi ; int
.text:0040A2D8                 mov     ecx, [esi]
.text:0040A2DA                 mov     [esp+2Ch+Block], edi ; int
.text:0040A2DD                 mov     edx, [esp+2Ch+arg_8]
.text:0040A2E1                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040A2E5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040A2E9                 mov     ecx, [esp+2Ch+arg_4]
.text:0040A2ED                 mov     [esp+2Ch+var_20], edx ; int
.text:0040A2F1                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040A2F5                 call    sub_4090D0
.text:0040A2FA                 mov     esi, eax
.text:0040A2FC                 call    _errno
.text:0040A301                 mov     [eax], ebx
.text:0040A303                 cmp     ebp, esi
.text:0040A305                 ja      short loc_40A37B
.text:0040A307                 lea     ebp, [esi+1]
.text:0040A30A                 mov     ebx, off_41405C
.text:0040A310                 cmp     edi, offset unk_415310
.text:0040A316                 mov     esi, [esp+2Ch+arg_0]
.text:0040A31A                 mov     [ebx+esi*8], ebp
.text:0040A31D                 jz      short loc_40A32D
.text:0040A31F                 mov     [esp+2Ch+Block], edi ; Block
.text:0040A322                 call    free
.text:0040A327                 mov     ebx, off_41405C
.text:0040A32D
.text:0040A32D loc_40A32D:                             ; CODE XREF: sub_40A210+10D↑j
.text:0040A32D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:0040A330                 call    sub_4069D0
.text:0040A335                 mov     esi, [esp+2Ch+arg_C]
.text:0040A339                 mov     edi, eax
.text:0040A33B                 mov     eax, [esp+2Ch+arg_0]
.text:0040A33F                 test    esi, esi
.text:0040A341                 mov     [ebx+eax*8+4], edi
.text:0040A345                 jz      short loc_40A390
.text:0040A347
.text:0040A347 loc_40A347:                             ; CODE XREF: sub_40A210+185↓j
.text:0040A347                 call    _errno
.text:0040A34C                 mov     ebx, [eax]
.text:0040A34E                 mov     [esp+2Ch+var_18], esi ; int
.text:0040A352                 mov     ecx, [esi]
.text:0040A354                 mov     [esp+2Ch+Block], edi ; int
.text:0040A357                 mov     edx, [esp+2Ch+arg_8]
.text:0040A35B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040A35F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040A363                 mov     ecx, [esp+2Ch+arg_4]
.text:0040A367                 mov     [esp+2Ch+var_20], edx ; int
.text:0040A36B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040A36F                 call    sub_4090D0
.text:0040A374                 call    _errno
.text:0040A379                 mov     [eax], ebx
.text:0040A37B
.text:0040A37B loc_40A37B:                             ; CODE XREF: sub_40A210+F5↑j
.text:0040A37B                 call    _errno
.text:0040A380                 mov     ebp, [esp+2Ch+var_14]
.text:0040A384                 mov     [eax], ebp
.text:0040A386                 add     esp, 1Ch
.text:0040A389                 mov     eax, edi
.text:0040A38B                 pop     ebx
.text:0040A38C                 pop     esi
.text:0040A38D                 pop     edi
.text:0040A38E                 pop     ebp
.text:0040A38F                 retn
.text:0040A390 ; ---------------------------------------------------------------------------
.text:0040A390
.text:0040A390 loc_40A390:                             ; CODE XREF: sub_40A210+135↑j
.text:0040A390                 mov     esi, offset dword_415410
.text:0040A395                 jmp     short loc_40A347
.text:0040A397 ; ---------------------------------------------------------------------------
.text:0040A397
.text:0040A397 loc_40A397:                             ; CODE XREF: sub_40A210+B7↑j
.text:0040A397                 mov     esi, offset dword_415410
.text:0040A39C                 jmp     loc_40A2CD
.text:0040A3A1 ; ---------------------------------------------------------------------------
.text:0040A3A1
.text:0040A3A1 loc_40A3A1:                             ; CODE XREF: sub_40A210+45↑j
.text:0040A3A1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:0040A3A8                 call    sub_4069D0
.text:0040A3AD                 mov     off_41405C, eax
.text:0040A3B2                 mov     edi, dword_414054
.text:0040A3B8                 mov     ebx, eax
.text:0040A3BA                 mov     ecx, off_414058
.text:0040A3C0                 mov     [eax], edi
.text:0040A3C2                 mov     [eax+4], ecx
.text:0040A3C5                 jmp     loc_40A25B
.text:0040A3CA ; ---------------------------------------------------------------------------
.text:0040A3CA
.text:0040A3CA loc_40A3CA:                             ; CODE XREF: sub_40A210+18↑j
.text:0040A3CA                 call    abort
.text:0040A3CF ; ---------------------------------------------------------------------------
.text:0040A3CF
.text:0040A3CF loc_40A3CF:                             ; CODE XREF: sub_40A210+33↑j
.text:0040A3CF                 call    sub_40A400
.text:0040A3CF sub_40A210      endp
.text:0040A3CF
.text:0040A3CF ; ---------------------------------------------------------------------------
.text:0040A3D4                 align 10h
.text:0040A3E0
.text:0040A3E0 loc_40A3E0:                             ; DATA XREF: sub_40A400+3↓o
.text:0040A3E0                 insd
.text:0040A3E1                 db      65h
.text:0040A3E1                 insd
.text:0040A3E3                 outsd
.text:0040A3E4                 jb      short near ptr loc_40A459+6
.text:0040A3E6                 and     [ebp+78h], ah
.text:0040A3E9                 push    74737561h
.text:0040A3EE
.text:0040A3EE loc_40A3EE:                             ; DATA XREF: sub_40A400+10↓o
.text:0040A3EE                 db      65h
.text:0040A3EE                 add     fs:0B68D0073h, ah
.text:0040A3EE ; ---------------------------------------------------------------------------
.text:0040A3F6                 dw 0
.text:0040A3F8                 align 10h
.text:0040A400
.text:0040A400 ; =============== S U B R O U T I N E =======================================
.text:0040A400
.text:0040A400 ; Attributes: noreturn
.text:0040A400
.text:0040A400 sub_40A400      proc near               ; CODE XREF: .text:loc_4069C9↑p
.text:0040A400                                         ; sub_4069D0+24↑p ...
.text:0040A400
.text:0040A400 Code            = dword ptr -1Ch
.text:0040A400 ErrorMessage    = dword ptr -18h
.text:0040A400 var_14          = dword ptr -14h
.text:0040A400 var_10          = byte ptr -10h
.text:0040A400
.text:0040A400                 sub     esp, 1Ch
.text:0040A403                 mov     [esp+1Ch+Code], offset loc_40A3E0
.text:0040A40A                 call    ds:libintl_gettext
.text:0040A410                 mov     [esp+1Ch+var_14], (offset loc_40A3EE+3) ; char *
.text:0040A418                 mov     edx, Code
.text:0040A41E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:0040A426                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040A42A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040A42D                 call    sub_40AAC0
.text:0040A432                 call    abort
.text:0040A432 sub_40A400      endp
.text:0040A432
.text:0040A432 ; ---------------------------------------------------------------------------
.text:0040A437                 align 10h
.text:0040A440
.text:0040A440 ; =============== S U B R O U T I N E =======================================
.text:0040A440
.text:0040A440
.text:0040A440 sub_40A440      proc near               ; CODE XREF: sub_407A30+2E↑p
.text:0040A440
.text:0040A440 FileHandle      = dword ptr -1Ch
.text:0040A440 Buf             = dword ptr -18h
.text:0040A440 MaxCharCount    = dword ptr -14h
.text:0040A440 arg_0           = dword ptr  4
.text:0040A440 arg_4           = dword ptr  8
.text:0040A440 arg_8           = dword ptr  0Ch
.text:0040A440
.text:0040A440                 push    ebp
.text:0040A441                 push    edi
.text:0040A442                 push    esi
.text:0040A443                 push    ebx
.text:0040A444                 sub     esp, 0Ch
.text:0040A447                 mov     ebp, [esp+1Ch+arg_0]
.text:0040A44B                 mov     edi, [esp+1Ch+arg_4]
.text:0040A44F                 mov     ebx, [esp+1Ch+arg_8]
.text:0040A453                 lea     esi, [esi+0]
.text:0040A459
.text:0040A459 loc_40A459:                             ; CODE XREF: .text:0040A3E4↑j
.text:0040A459                 lea     edi, [edi+0]
.text:0040A460
.text:0040A460 loc_40A460:                             ; CODE XREF: sub_40A440+3E↓j
.text:0040A460                                         ; sub_40A440+57↓j
.text:0040A460                 mov     [esp+1Ch+MaxCharCount], ebx ; MaxCharCount
.text:0040A464                 mov     [esp+1Ch+Buf], edi ; Buf
.text:0040A468                 mov     [esp+1Ch+FileHandle], ebp ; FileHandle
.text:0040A46B                 call    _write
.text:0040A470                 test    eax, eax
.text:0040A472                 mov     esi, eax
.text:0040A474                 jns     short loc_40A499
.text:0040A476                 call    _errno
.text:0040A47B                 cmp     dword ptr [eax], 4
.text:0040A47E                 jz      short loc_40A460
.text:0040A480                 call    _errno
.text:0040A485                 cmp     dword ptr [eax], 16h
.text:0040A488                 jnz     short loc_40A499
.text:0040A48A                 cmp     ebx, 7FFFE000h
.text:0040A490                 jbe     short loc_40A499
.text:0040A492                 mov     ebx, 7FFFE000h
.text:0040A497                 jmp     short loc_40A460
.text:0040A499 ; ---------------------------------------------------------------------------
.text:0040A499
.text:0040A499 loc_40A499:                             ; CODE XREF: sub_40A440+34↑j
.text:0040A499                                         ; sub_40A440+48↑j ...
.text:0040A499                 add     esp, 0Ch
.text:0040A49C                 mov     eax, esi
.text:0040A49E                 pop     ebx
.text:0040A49F                 pop     esi
.text:0040A4A0                 pop     edi
.text:0040A4A1                 pop     ebp
.text:0040A4A2                 retn
.text:0040A4A2 sub_40A440      endp
.text:0040A4A2
.text:0040A4A2 ; ---------------------------------------------------------------------------
.text:0040A4A3                 align 10h
.text:0040A4B0
.text:0040A4B0 ; =============== S U B R O U T I N E =======================================
.text:0040A4B0
.text:0040A4B0
.text:0040A4B0 ; int __cdecl sub_40A4B0(char *, int, int, int)
.text:0040A4B0 sub_40A4B0      proc near               ; CODE XREF: sub_4088F0+45↑p
.text:0040A4B0                                         ; .text:0040A802↓p
.text:0040A4B0
.text:0040A4B0 Str             = dword ptr -2Ch
.text:0040A4B0 Str2            = dword ptr -28h
.text:0040A4B0 MaxCount        = dword ptr -24h
.text:0040A4B0 var_20          = dword ptr -20h
.text:0040A4B0 var_19          = byte ptr -19h
.text:0040A4B0 var_18          = dword ptr -18h
.text:0040A4B0 var_14          = dword ptr -14h
.text:0040A4B0 arg_0           = dword ptr  4
.text:0040A4B0 arg_4           = dword ptr  8
.text:0040A4B0 arg_8           = dword ptr  0Ch
.text:0040A4B0 arg_C           = dword ptr  10h
.text:0040A4B0
.text:0040A4B0                 push    ebp
.text:0040A4B1                 push    edi
.text:0040A4B2                 push    esi
.text:0040A4B3                 push    ebx
.text:0040A4B4                 sub     esp, 1Ch
.text:0040A4B7                 xor     ebx, ebx
.text:0040A4B9                 mov     [esp+2Ch+var_18], 0FFFFFFFFh
.text:0040A4C1                 mov     edx, [esp+2Ch+arg_0]
.text:0040A4C5                 mov     ebp, [esp+2Ch+arg_C]
.text:0040A4C9                 mov     [esp+2Ch+var_19], 0
.text:0040A4CE                 mov     [esp+2Ch+Str], edx ; Str
.text:0040A4D1                 call    strlen
.text:0040A4D6                 mov     [esp+2Ch+var_14], eax
.text:0040A4DA                 mov     ecx, [esp+2Ch+arg_4]
.text:0040A4DE                 mov     eax, [ecx]
.text:0040A4E0                 test    eax, eax
.text:0040A4E2                 jz      short loc_40A528
.text:0040A4E4                 mov     [esp+2Ch+var_20], 0
.text:0040A4EC                 lea     esi, [esi+0]
.text:0040A4F0
.text:0040A4F0 loc_40A4F0:                             ; CODE XREF: sub_40A4B0+6A↓j
.text:0040A4F0                 mov     [esp+2Ch+Str], eax ; Str1
.text:0040A4F3                 mov     esi, [esp+2Ch+var_14]
.text:0040A4F7                 mov     ecx, [esp+2Ch+arg_0]
.text:0040A4FB                 mov     [esp+2Ch+MaxCount], esi ; MaxCount
.text:0040A4FF                 mov     [esp+2Ch+Str2], ecx ; Str2
.text:0040A503                 call    strncmp
.text:0040A508                 test    eax, eax
.text:0040A50A                 jz      short loc_40A536
.text:0040A50C
.text:0040A50C loc_40A50C:                             ; CODE XREF: sub_40A4B0+CA↓j
.text:0040A50C                                         ; sub_40A4B0+D1↓j ...
.text:0040A50C                 add     [esp+2Ch+var_20], ebp
.text:0040A510                 inc     ebx
.text:0040A511                 mov     esi, [esp+2Ch+arg_4]
.text:0040A515                 mov     eax, [esi+ebx*4]
.text:0040A518                 test    eax, eax
.text:0040A51A                 jnz     short loc_40A4F0
.text:0040A51C                 cmp     [esp+2Ch+var_19], 0
.text:0040A521                 mov     edx, 0FFFFFFFEh
.text:0040A526                 jnz     short loc_40A52C
.text:0040A528
.text:0040A528 loc_40A528:                             ; CODE XREF: sub_40A4B0+32↑j
.text:0040A528                 mov     edx, [esp+2Ch+var_18]
.text:0040A52C
.text:0040A52C loc_40A52C:                             ; CODE XREF: sub_40A4B0+76↑j
.text:0040A52C                                         ; sub_40A4B0+9B↓j
.text:0040A52C                 add     esp, 1Ch
.text:0040A52F                 mov     eax, edx
.text:0040A531                 pop     ebx
.text:0040A532                 pop     esi
.text:0040A533                 pop     edi
.text:0040A534                 pop     ebp
.text:0040A535                 retn
.text:0040A536 ; ---------------------------------------------------------------------------
.text:0040A536
.text:0040A536 loc_40A536:                             ; CODE XREF: sub_40A4B0+5A↑j
.text:0040A536                 mov     eax, [esp+2Ch+arg_4]
.text:0040A53A                 mov     edi, [eax+ebx*4]
.text:0040A53D                 mov     [esp+2Ch+Str], edi ; Str
.text:0040A540                 call    strlen
.text:0040A545                 cmp     eax, [esp+2Ch+var_14]
.text:0040A549                 mov     edx, ebx
.text:0040A54B                 jz      short loc_40A52C
.text:0040A54D                 cmp     [esp+2Ch+var_18], 0FFFFFFFFh
.text:0040A552                 jz      short loc_40A583
.text:0040A554                 mov     ecx, [esp+2Ch+arg_8]
.text:0040A558                 test    ecx, ecx
.text:0040A55A                 jz      short loc_40A57C
.text:0040A55C                 cld
.text:0040A55D                 mov     edi, [esp+2Ch+var_18]
.text:0040A561                 mov     ecx, ebp
.text:0040A563                 mov     esi, [esp+2Ch+arg_8]
.text:0040A567                 mov     edx, [esp+2Ch+var_20]
.text:0040A56B                 imul    edi, ebp
.text:0040A56E                 add     esi, edi
.text:0040A570                 mov     edi, [esp+2Ch+arg_8]
.text:0040A574                 add     edi, edx
.text:0040A576                 cmp     ebp, ebp
.text:0040A578                 repe cmpsb
.text:0040A57A                 jz      short loc_40A50C
.text:0040A57C
.text:0040A57C loc_40A57C:                             ; CODE XREF: sub_40A4B0+AA↑j
.text:0040A57C                 mov     [esp+2Ch+var_19], 1
.text:0040A581                 jmp     short loc_40A50C
.text:0040A583 ; ---------------------------------------------------------------------------
.text:0040A583
.text:0040A583 loc_40A583:                             ; CODE XREF: sub_40A4B0+A2↑j
.text:0040A583                 mov     [esp+2Ch+var_18], ebx
.text:0040A587                 jmp     short loc_40A50C
.text:0040A587 sub_40A4B0      endp
.text:0040A587
.text:0040A587 ; ---------------------------------------------------------------------------
.text:0040A589 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.text:0040A589                                         ; DATA XREF: .text:0040A5E2↓o
.text:0040A589                                         ; .text:0040A82A↓o
.text:0040A5A6 aInvalidArgumen db 'invalid argument %s for %s',0
.text:0040A5A6                                         ; DATA XREF: .text:loc_40A650↓o
.text:0040A5A6                                         ; .text:loc_40A9C6↓o
.text:0040A5C1 ; ---------------------------------------------------------------------------
.text:0040A5C1                 jmp     short loc_40A5D0
.text:0040A5C1 ; ---------------------------------------------------------------------------
.text:0040A5C3                 align 10h
.text:0040A5D0
.text:0040A5D0 loc_40A5D0:                             ; CODE XREF: .text:0040A5C1↑j
.text:0040A5D0                 sub     esp, 1Ch
.text:0040A5D3                 cmp     dword ptr [esp+28h], 0FFFFFFFFh
.text:0040A5D8                 mov     [esp+14h], ebx
.text:0040A5DC                 mov     [esp+18h], esi
.text:0040A5E0                 jz      short loc_40A650
.text:0040A5E2                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0040A5E9
.text:0040A5E9 loc_40A5E9:                             ; CODE XREF: .text:0040A657↓j
.text:0040A5E9                 call    ds:libintl_gettext
.text:0040A5EF                 mov     dword ptr [esp], 1
.text:0040A5F6                 mov     edx, [esp+20h]
.text:0040A5FA                 mov     esi, eax
.text:0040A5FC                 mov     [esp+4], edx
.text:0040A600                 call    sub_406CD0
.text:0040A605                 mov     dword ptr [esp+4], 5
.text:0040A60D                 mov     edx, [esp+24h]
.text:0040A611                 mov     ebx, eax
.text:0040A613                 mov     dword ptr [esp], 0
.text:0040A61A                 mov     [esp+8], edx
.text:0040A61E                 call    sub_409E00
.text:0040A623                 mov     [esp+0Ch], eax
.text:0040A627                 mov     [esp+10h], ebx
.text:0040A62B                 mov     [esp+8], esi
.text:0040A62F                 mov     dword ptr [esp+4], 0
.text:0040A637                 mov     dword ptr [esp], 0
.text:0040A63E                 call    sub_40AAC0
.text:0040A643                 mov     ebx, [esp+14h]
.text:0040A647                 mov     esi, [esp+18h]
.text:0040A64B                 add     esp, 1Ch
.text:0040A64E                 retn
.text:0040A64E ; ---------------------------------------------------------------------------
.text:0040A64F                 align 10h
.text:0040A650
.text:0040A650 loc_40A650:                             ; CODE XREF: .text:0040A5E0↑j
.text:0040A650                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:0040A657                 jmp     short loc_40A5E9
.text:0040A657 ; ---------------------------------------------------------------------------
.text:0040A659 aValidArguments db 'Valid arguments are:',0
.text:0040A659                                         ; DATA XREF: .text:0040A6A3↓o
.text:0040A659                                         ; .text:0040A89B↓o
.text:0040A66E ; ---------------------------------------------------------------------------
.text:0040A66E
.text:0040A66E loc_40A66E:                             ; DATA XREF: .text:0040A71D↓o
.text:0040A66E                                         ; .text:loc_40A908↓o
.text:0040A66E                 or      ah, [eax]
.text:0040A670                 and     ds:73256020h, ch
.text:0040A676                 daa
.text:0040A677                 add     [eax], ch
.text:0040A67A                 pusha
.text:0040A67B                 and     eax, 90002773h
.text:0040A680                 push    ebp
.text:0040A681                 push    edi
.text:0040A682                 push    esi
.text:0040A683                 push    ebx
.text:0040A684                 sub     esp, 2Ch
.text:0040A687                 mov     ecx, [esp+40h]
.text:0040A68B                 mov     dword ptr [esp+1Ch], 0
.text:0040A693                 mov     eax, [esp+44h]
.text:0040A697                 mov     ebp, [esp+48h]
.text:0040A69B                 mov     [esp+28h], ecx
.text:0040A69F                 mov     [esp+24h], eax
.text:0040A6A3                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:0040A6AA                 call    ds:libintl_gettext
.text:0040A6B0                 mov     edx, ds:_iob
.text:0040A6B6                 add     edx, 40h ; '@'
.text:0040A6B9                 mov     [esp], edx
.text:0040A6BC                 mov     [esp+4], eax
.text:0040A6C0                 call    fprintf
.text:0040A6C5                 mov     dword ptr [esp+20h], 0
.text:0040A6CD                 mov     edx, [esp+28h]
.text:0040A6D1                 mov     eax, [edx]
.text:0040A6D3                 test    eax, eax
.text:0040A6D5                 jz      short loc_40A755
.text:0040A6D7                 mov     dword ptr [esp+14h], 0
.text:0040A6DF                 mov     esi, [esp+24h]
.text:0040A6E3                 mov     ebx, eax
.text:0040A6E5                 mov     [esp+18h], esi
.text:0040A6E9                 lea     esi, [esi+0]
.text:0040A6F0
.text:0040A6F0 loc_40A6F0:                             ; CODE XREF: .text:0040A753↓j
.text:0040A6F0                 mov     edi, [esp+20h]
.text:0040A6F4                 test    edi, edi
.text:0040A6F6                 jz      short loc_40A713
.text:0040A6F8                 cld
.text:0040A6F9                 mov     edi, [esp+24h]
.text:0040A6FD                 mov     ecx, ebp
.text:0040A6FF                 mov     edx, [esp+14h]
.text:0040A703                 mov     esi, [esp+1Ch]
.text:0040A707                 add     edi, edx
.text:0040A709                 cmp     ebp, ebp
.text:0040A70B                 repe cmpsb
.text:0040A70D                 jz      loc_40A7A0
.text:0040A713
.text:0040A713 loc_40A713:                             ; CODE XREF: .text:0040A6F6↑j
.text:0040A713                 mov     [esp+8], ebx
.text:0040A717                 mov     ecx, ds:_iob
.text:0040A71D                 mov     dword ptr [esp+4], offset loc_40A66E
.text:0040A725                 add     ecx, 40h ; '@'
.text:0040A728                 mov     [esp], ecx
.text:0040A72B                 call    fprintf
.text:0040A730                 mov     ebx, [esp+18h]
.text:0040A734                 mov     [esp+1Ch], ebx
.text:0040A738
.text:0040A738 loc_40A738:                             ; CODE XREF: .text:0040A7BD↓j
.text:0040A738                 inc     dword ptr [esp+20h]
.text:0040A73C                 mov     eax, [esp+28h]
.text:0040A740                 add     [esp+14h], ebp
.text:0040A744                 mov     edx, [esp+20h]
.text:0040A748                 add     [esp+18h], ebp
.text:0040A74C                 mov     edi, [eax+edx*4]
.text:0040A74F                 test    edi, edi
.text:0040A751                 mov     ebx, edi
.text:0040A753                 jnz     short loc_40A6F0
.text:0040A755
.text:0040A755 loc_40A755:                             ; CODE XREF: .text:0040A6D5↑j
.text:0040A755                 mov     ebx, ds:_iob
.text:0040A75B                 mov     ebp, [ebx+44h]
.text:0040A75E                 dec     ebp
.text:0040A75F                 mov     [ebx+44h], ebp
.text:0040A762                 test    ebp, ebp
.text:0040A764                 js      short loc_40A77D
.text:0040A766                 mov     ecx, ds:_iob
.text:0040A76C                 mov     esi, [ecx+40h]
.text:0040A76F                 mov     byte ptr [esi], 0Ah
.text:0040A772                 inc     dword ptr [ecx+40h]
.text:0040A775                 add     esp, 2Ch
.text:0040A778                 pop     ebx
.text:0040A779                 pop     esi
.text:0040A77A                 pop     edi
.text:0040A77B                 pop     ebp
.text:0040A77C                 retn
.text:0040A77D ; ---------------------------------------------------------------------------
.text:0040A77D
.text:0040A77D loc_40A77D:                             ; CODE XREF: .text:0040A764↑j
.text:0040A77D                 mov     dword ptr [esp+40h], 0Ah
.text:0040A785                 mov     edi, ds:_iob
.text:0040A78B                 add     edi, 40h ; '@'
.text:0040A78E                 mov     [esp+44h], edi
.text:0040A792                 add     esp, 2Ch
.text:0040A795                 pop     ebx
.text:0040A796                 pop     esi
.text:0040A797                 pop     edi
.text:0040A798                 pop     ebp
.text:0040A799                 jmp     _flsbuf
.text:0040A799 ; ---------------------------------------------------------------------------
.text:0040A79E                 align 10h
.text:0040A7A0
.text:0040A7A0 loc_40A7A0:                             ; CODE XREF: .text:0040A70D↑j
.text:0040A7A0                 mov     [esp+8], ebx
.text:0040A7A4                 mov     esi, ds:_iob
.text:0040A7AA                 mov     dword ptr [esp+4], 40A678h
.text:0040A7B2                 add     esi, 40h ; '@'
.text:0040A7B5                 mov     [esp], esi
.text:0040A7B8                 call    fprintf
.text:0040A7BD                 jmp     loc_40A738
.text:0040A7BD ; ---------------------------------------------------------------------------
.text:0040A7C2                 align 10h
.text:0040A7D0                 sub     esp, 4Ch
.text:0040A7D3                 mov     edx, [esp+60h]
.text:0040A7D7                 mov     [esp+3Ch], ebx
.text:0040A7DB                 mov     ebx, [esp+5Ch]
.text:0040A7DF                 mov     [esp+40h], esi
.text:0040A7E3                 mov     esi, [esp+54h]
.text:0040A7E7                 mov     [esp+48h], ebp
.text:0040A7EB                 mov     ebp, [esp+58h]
.text:0040A7EF                 mov     [esp+0Ch], edx
.text:0040A7F3                 mov     [esp+44h], edi
.text:0040A7F7                 mov     [esp+8], ebx
.text:0040A7FB                 mov     [esp+4], ebp
.text:0040A7FF                 mov     [esp], esi
.text:0040A802                 call    sub_40A4B0
.text:0040A807                 test    eax, eax
.text:0040A809                 mov     edx, eax
.text:0040A80B                 js      short loc_40A823
.text:0040A80D
.text:0040A80D loc_40A80D:                             ; CODE XREF: .text:0040A97A↓j
.text:0040A80D                 mov     ebx, [esp+3Ch]
.text:0040A811                 mov     eax, edx
.text:0040A813                 mov     esi, [esp+40h]
.text:0040A817                 mov     edi, [esp+44h]
.text:0040A81B                 mov     ebp, [esp+48h]
.text:0040A81F                 add     esp, 4Ch
.text:0040A822                 retn
.text:0040A823 ; ---------------------------------------------------------------------------
.text:0040A823
.text:0040A823 loc_40A823:                             ; CODE XREF: .text:0040A80B↑j
.text:0040A823                 inc     eax
.text:0040A824                 jz      loc_40A9C6
.text:0040A82A                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0040A831
.text:0040A831 loc_40A831:                             ; CODE XREF: .text:0040A9CD↓j
.text:0040A831                 call    ds:libintl_gettext
.text:0040A837                 mov     dword ptr [esp], 1
.text:0040A83E                 mov     edi, [esp+50h]
.text:0040A842                 mov     [esp+38h], eax
.text:0040A846                 mov     [esp+4], edi
.text:0040A84A                 call    sub_406CD0
.text:0040A84F                 mov     [esp+34h], eax
.text:0040A853                 mov     [esp+8], esi
.text:0040A857                 mov     dword ptr [esp+4], 5
.text:0040A85F                 mov     dword ptr [esp], 0
.text:0040A866                 call    sub_409E00
.text:0040A86B                 mov     [esp+0Ch], eax
.text:0040A86F                 mov     ecx, [esp+34h]
.text:0040A873                 mov     eax, [esp+38h]
.text:0040A877                 mov     dword ptr [esp+4], 0
.text:0040A87F                 mov     [esp+10h], ecx
.text:0040A883                 mov     [esp+8], eax
.text:0040A887                 mov     dword ptr [esp], 0
.text:0040A88E                 call    sub_40AAC0
.text:0040A893                 mov     dword ptr [esp+2Ch], 0
.text:0040A89B                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:0040A8A2                 call    ds:libintl_gettext
.text:0040A8A8                 mov     edx, ds:_iob
.text:0040A8AE                 add     edx, 40h ; '@'
.text:0040A8B1                 mov     [esp+4], eax
.text:0040A8B5                 mov     [esp], edx
.text:0040A8B8                 call    fprintf
.text:0040A8BD                 mov     dword ptr [esp+30h], 0
.text:0040A8C5                 mov     eax, [ebp+0]
.text:0040A8C8                 test    eax, eax
.text:0040A8CA                 jz      loc_40A951
.text:0040A8D0                 mov     [esp+28h], eax
.text:0040A8D4                 mov     [esp+24h], ebx
.text:0040A8D8                 mov     dword ptr [esp+20h], 0
.text:0040A8E0
.text:0040A8E0 loc_40A8E0:                             ; CODE XREF: .text:0040A94F↓j
.text:0040A8E0                 mov     esi, [esp+30h]
.text:0040A8E4                 test    esi, esi
.text:0040A8E6                 jz      short loc_40A908
.text:0040A8E8                 cld
.text:0040A8E9                 mov     eax, [esp+20h]
.text:0040A8ED                 mov     edx, [esp+60h]
.text:0040A8F1                 mov     esi, [esp+2Ch]
.text:0040A8F5                 lea     ecx, [eax+ebx]
.text:0040A8F8                 mov     edi, ecx
.text:0040A8FA                 mov     ecx, [esp+60h]
.text:0040A8FE                 cmp     edx, edx
.text:0040A900                 repe cmpsb
.text:0040A902                 jz      loc_40A9A0
.text:0040A908
.text:0040A908 loc_40A908:                             ; CODE XREF: .text:0040A8E6↑j
.text:0040A908                 mov     dword ptr [esp+4], offset loc_40A66E
.text:0040A910                 mov     esi, ds:_iob
.text:0040A916                 mov     ecx, [esp+28h]
.text:0040A91A                 add     esi, 40h ; '@'
.text:0040A91D                 mov     [esp+8], ecx
.text:0040A921                 mov     [esp], esi
.text:0040A924                 call    fprintf
.text:0040A929                 mov     edi, [esp+24h]
.text:0040A92D                 mov     [esp+2Ch], edi
.text:0040A931
.text:0040A931 loc_40A931:                             ; CODE XREF: .text:0040A9C1↓j
.text:0040A931                 inc     dword ptr [esp+30h]
.text:0040A935                 mov     ecx, [esp+60h]
.text:0040A939                 add     [esp+20h], ecx
.text:0040A93D                 mov     esi, [esp+30h]
.text:0040A941                 add     [esp+24h], ecx
.text:0040A945                 mov     edi, [ebp+esi*4+0]
.text:0040A949                 test    edi, edi
.text:0040A94B                 mov     [esp+28h], edi
.text:0040A94F                 jnz     short loc_40A8E0
.text:0040A951
.text:0040A951 loc_40A951:                             ; CODE XREF: .text:0040A8CA↑j
.text:0040A951                 mov     ebp, ds:_iob
.text:0040A957                 mov     ebx, [ebp+44h]
.text:0040A95A                 dec     ebx
.text:0040A95B                 mov     [ebp+44h], ebx
.text:0040A95E                 test    ebx, ebx
.text:0040A960                 js      short loc_40A97F
.text:0040A962                 mov     edi, ds:_iob
.text:0040A968                 mov     eax, [edi+40h]
.text:0040A96B                 mov     byte ptr [eax], 0Ah
.text:0040A96E                 inc     dword ptr [edi+40h]
.text:0040A971
.text:0040A971 loc_40A971:                             ; CODE XREF: .text:0040A998↓j
.text:0040A971                 call    dword ptr [esp+64h]
.text:0040A975                 mov     edx, 0FFFFFFFFh
.text:0040A97A                 jmp     loc_40A80D
.text:0040A97F ; ---------------------------------------------------------------------------
.text:0040A97F
.text:0040A97F loc_40A97F:                             ; CODE XREF: .text:0040A960↑j
.text:0040A97F                 mov     dword ptr [esp], 0Ah
.text:0040A986                 mov     edx, ds:_iob
.text:0040A98C                 add     edx, 40h ; '@'
.text:0040A98F                 mov     [esp+4], edx
.text:0040A993                 call    _flsbuf
.text:0040A998                 jmp     short loc_40A971
.text:0040A998 ; ---------------------------------------------------------------------------
.text:0040A99A                 align 10h
.text:0040A9A0
.text:0040A9A0 loc_40A9A0:                             ; CODE XREF: .text:0040A902↑j
.text:0040A9A0                 mov     dword ptr [esp+4], 40A678h
.text:0040A9A8                 mov     edx, ds:_iob
.text:0040A9AE                 mov     eax, [esp+28h]
.text:0040A9B2                 add     edx, 40h ; '@'
.text:0040A9B5                 mov     [esp+8], eax
.text:0040A9B9                 mov     [esp], edx
.text:0040A9BC                 call    fprintf
.text:0040A9C1                 jmp     loc_40A931
.text:0040A9C6 ; ---------------------------------------------------------------------------
.text:0040A9C6
.text:0040A9C6 loc_40A9C6:                             ; CODE XREF: .text:0040A824↑j
.text:0040A9C6                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:0040A9CD                 jmp     loc_40A831
.text:0040A9CD ; ---------------------------------------------------------------------------
.text:0040A9D2                 align 10h
.text:0040A9E0                 push    ebp
.text:0040A9E1                 push    edi
.text:0040A9E2                 push    esi
.text:0040A9E3                 push    ebx
.text:0040A9E4                 sub     esp, 4
.text:0040A9E7                 mov     ecx, [esp+1Ch]
.text:0040A9EB                 mov     dword ptr [esp], 0
.text:0040A9F2                 mov     ebx, [esp+24h]
.text:0040A9F6                 mov     edx, [ecx]
.text:0040A9F8                 test    edx, edx
.text:0040A9FA                 jz      short loc_40AA25
.text:0040A9FC                 cld
.text:0040A9FD                 xor     ebp, ebp
.text:0040A9FF                 nop
.text:0040AA00
.text:0040AA00 loc_40AA00:                             ; CODE XREF: .text:0040AA23↓j
.text:0040AA00                 mov     edi, [esp+20h]
.text:0040AA04                 mov     ecx, ebx
.text:0040AA06                 mov     esi, [esp+18h]
.text:0040AA0A                 add     edi, ebp
.text:0040AA0C                 cmp     ebx, ebx
.text:0040AA0E                 repe cmpsb
.text:0040AA10                 jz      short loc_40AA2D
.text:0040AA12                 inc     dword ptr [esp]
.text:0040AA15                 add     ebp, ebx
.text:0040AA17                 mov     eax, [esp+1Ch]
.text:0040AA1B                 mov     ecx, [esp]
.text:0040AA1E                 mov     edi, [eax+ecx*4]
.text:0040AA21                 test    edi, edi
.text:0040AA23                 jnz     short loc_40AA00
.text:0040AA25
.text:0040AA25 loc_40AA25:                             ; CODE XREF: .text:0040A9FA↑j
.text:0040AA25                 xor     eax, eax
.text:0040AA27
.text:0040AA27 loc_40AA27:                             ; CODE XREF: .text:0040AA37↓j
.text:0040AA27                 pop     ebp
.text:0040AA28                 pop     ebx
.text:0040AA29                 pop     esi
.text:0040AA2A                 pop     edi
.text:0040AA2B                 pop     ebp
.text:0040AA2C                 retn
.text:0040AA2D ; ---------------------------------------------------------------------------
.text:0040AA2D
.text:0040AA2D loc_40AA2D:                             ; CODE XREF: .text:0040AA10↑j
.text:0040AA2D                 mov     esi, [esp]
.text:0040AA30                 mov     ebx, [esp+1Ch]
.text:0040AA34                 mov     eax, [ebx+esi*4]
.text:0040AA37                 jmp     short loc_40AA27
.text:0040AA37 ; ---------------------------------------------------------------------------
.text:0040AA39                 align 10h
.text:0040AA40
.text:0040AA40 ; =============== S U B R O U T I N E =======================================
.text:0040AA40
.text:0040AA40 ; Attributes: noreturn
.text:0040AA40
.text:0040AA40 sub_40AA40      proc near               ; DATA XREF: .data:00414060↓o
.text:0040AA40
.text:0040AA40 Code            = dword ptr -0Ch
.text:0040AA40
.text:0040AA40                 sub     esp, 0Ch
.text:0040AA43                 mov     [esp+0Ch+Code], 1 ; Code
.text:0040AA4A                 call    sub_402210
.text:0040AA4A sub_40AA40      endp
.text:0040AA4A
.text:0040AA4A ; ---------------------------------------------------------------------------
.text:0040AA4F                 db  83h ; ƒ
.text:0040AA50                 db 0C4h ; Ä
.text:0040AA51                 db  0Ch
.text:0040AA52                 db 0C3h ; Ã
.text:0040AA53                 align 10h
.text:0040AA60                 jmp     ds:libintl_gettext
.text:0040AA60 ; ---------------------------------------------------------------------------
.text:0040AA66                 align 10h
.text:0040AA70                 jmp     ds:libintl_bindtextdomain
.text:0040AA70 ; ---------------------------------------------------------------------------
.text:0040AA76                 align 10h
.text:0040AA80                 jmp     ds:libintl_textdomain
.text:0040AA80 ; ---------------------------------------------------------------------------
.text:0040AA86                 align 10h
.text:0040AA90                 jmp     ds:libintl_ngettext
.text:0040AA90 ; ---------------------------------------------------------------------------
.text:0040AA96                 align 10h
.text:0040AAA0 ; const char aS[]
.text:0040AAA0 aS              db ': %s',0             ; DATA XREF: sub_40AAC0+B8↓o
.text:0040AAA0                                         ; sub_40ABC4+122↓o
.text:0040AAA5 aUnknownSystemE db 'Unknown system error',0
.text:0040AAA5                                         ; DATA XREF: sub_40AAC0:loc_40AB8D↓o
.text:0040AAA5                                         ; sub_40ABC4:loc_40ACFE↓o
.text:0040AABA ; const char aS_0[]
.text:0040AABA aS_0            db '%s: ',0             ; DATA XREF: sub_40AAC0:loc_40AB94↓o
.text:0040AABF                 align 10h
.text:0040AAC0
.text:0040AAC0 ; =============== S U B R O U T I N E =======================================
.text:0040AAC0
.text:0040AAC0
.text:0040AAC0 ; int __cdecl sub_40AAC0(int Code, int ErrorMessage, char *, char)
.text:0040AAC0 sub_40AAC0      proc near               ; CODE XREF: sub_402550+400↑p
.text:0040AAC0                                         ; sub_402550+440↑p ...
.text:0040AAC0
.text:0040AAC0 Stream          = dword ptr -1Ch
.text:0040AAC0 Format          = dword ptr -18h
.text:0040AAC0 ArgList         = dword ptr -14h
.text:0040AAC0 Code            = dword ptr  4
.text:0040AAC0 ErrorMessage    = dword ptr  8
.text:0040AAC0 arg_8           = dword ptr  0Ch
.text:0040AAC0 arg_C           = byte ptr  10h
.text:0040AAC0
.text:0040AAC0                 push    esi
.text:0040AAC1                 push    ebx
.text:0040AAC2                 sub     esp, 14h
.text:0040AAC5                 mov     edx, ds:_iob
.text:0040AACB                 mov     esi, [esp+1Ch+Code]
.text:0040AACF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:0040AAD3                 add     edx, 20h ; ' '
.text:0040AAD6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040AAD9                 call    fflush
.text:0040AADE                 mov     eax, ds:dword_415810
.text:0040AAE3                 test    eax, eax
.text:0040AAE5                 jz      loc_40AB94
.text:0040AAEB                 call    eax ; dword_415810
.text:0040AAED
.text:0040AAED loc_40AAED:                             ; CODE XREF: sub_40AAC0+F7↓j
.text:0040AAED                 lea     edx, [esp+1Ch+arg_C]
.text:0040AAF1                 mov     ecx, [esp+1Ch+arg_8]
.text:0040AAF5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:0040AAF9                 mov     edx, ds:_iob
.text:0040AAFF                 mov     [esp+1Ch+Format], ecx ; Format
.text:0040AB03                 add     edx, 40h ; '@'
.text:0040AB06                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040AB09                 call    vfprintf
.text:0040AB0E                 inc     ds:dword_415820
.text:0040AB14                 test    ebx, ebx
.text:0040AB16                 jnz     short loc_40AB62
.text:0040AB18
.text:0040AB18 loc_40AB18:                             ; CODE XREF: sub_40AAC0+CB↓j
.text:0040AB18                 mov     edx, ds:_iob
.text:0040AB1E                 lea     ecx, [edx+40h]
.text:0040AB21                 mov     ebx, [ecx+4]
.text:0040AB24                 dec     ebx
.text:0040AB25                 test    ebx, ebx
.text:0040AB27                 mov     [ecx+4], ebx
.text:0040AB2A                 js      short loc_40AB50
.text:0040AB2C                 mov     ecx, [edx+40h]
.text:0040AB2F                 mov     byte ptr [ecx], 0Ah
.text:0040AB32                 inc     dword ptr [edx+40h]
.text:0040AB35
.text:0040AB35 loc_40AB35:                             ; CODE XREF: sub_40AAC0+A0↓j
.text:0040AB35                 mov     edx, ds:_iob
.text:0040AB3B                 add     edx, 40h ; '@'
.text:0040AB3E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040AB41                 call    fflush
.text:0040AB46                 test    esi, esi
.text:0040AB48                 jnz     short loc_40ABBC
.text:0040AB4A                 add     esp, 14h
.text:0040AB4D                 pop     ebx
.text:0040AB4E                 pop     esi
.text:0040AB4F                 retn
.text:0040AB50 ; ---------------------------------------------------------------------------
.text:0040AB50
.text:0040AB50 loc_40AB50:                             ; CODE XREF: sub_40AAC0+6A↑j
.text:0040AB50                 mov     [esp+1Ch+Format], ecx ; File
.text:0040AB54                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040AB5B                 call    _flsbuf
.text:0040AB60                 jmp     short loc_40AB35
.text:0040AB62 ; ---------------------------------------------------------------------------
.text:0040AB62
.text:0040AB62 loc_40AB62:                             ; CODE XREF: sub_40AAC0+56↑j
.text:0040AB62                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:0040AB65                 call    strerror
.text:0040AB6A                 test    eax, eax
.text:0040AB6C                 jz      short loc_40AB8D
.text:0040AB6E
.text:0040AB6E loc_40AB6E:                             ; CODE XREF: sub_40AAC0+D2↓j
.text:0040AB6E                 mov     [esp+1Ch+ArgList], eax
.text:0040AB72                 mov     ebx, ds:_iob
.text:0040AB78                 mov     [esp+1Ch+Format], offset aS ; ": %s"
.text:0040AB80                 add     ebx, 40h ; '@'
.text:0040AB83                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:0040AB86                 call    fprintf
.text:0040AB8B                 jmp     short loc_40AB18
.text:0040AB8D ; ---------------------------------------------------------------------------
.text:0040AB8D
.text:0040AB8D loc_40AB8D:                             ; CODE XREF: sub_40AAC0+AC↑j
.text:0040AB8D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040AB92                 jmp     short loc_40AB6E
.text:0040AB94 ; ---------------------------------------------------------------------------
.text:0040AB94
.text:0040AB94 loc_40AB94:                             ; CODE XREF: sub_40AAC0+25↑j
.text:0040AB94                 mov     [esp+1Ch+Format], offset aS_0 ; "%s: "
.text:0040AB9C                 mov     edx, ds:_iob
.text:0040ABA2                 mov     ecx, ds:dword_4157E0
.text:0040ABA8                 add     edx, 40h ; '@'
.text:0040ABAB                 mov     [esp+1Ch+ArgList], ecx
.text:0040ABAF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040ABB2                 call    fprintf
.text:0040ABB7                 jmp     loc_40AAED
.text:0040ABBC ; ---------------------------------------------------------------------------
.text:0040ABBC
.text:0040ABBC loc_40ABBC:                             ; CODE XREF: sub_40AAC0+88↑j
.text:0040ABBC                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040ABBF                 call    exit
.text:0040ABBF sub_40AAC0      endp
.text:0040ABBF
.text:0040ABC4
.text:0040ABC4 ; =============== S U B R O U T I N E =======================================
.text:0040ABC4
.text:0040ABC4
.text:0040ABC4 ; int __cdecl sub_40ABC4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:0040ABC4 sub_40ABC4      proc near               ; DATA XREF: sub_40ABC4+77↓o
.text:0040ABC4
.text:0040ABC4 Stream          = dword ptr -28h
.text:0040ABC4 Format          = dword ptr -24h
.text:0040ABC4 ArgList         = dword ptr -20h
.text:0040ABC4 var_1C          = dword ptr -1Ch
.text:0040ABC4 Code            = dword ptr  8
.text:0040ABC4 ErrorMessage    = dword ptr  0Ch
.text:0040ABC4 Str2            = dword ptr  10h
.text:0040ABC4 arg_10          = dword ptr  14h
.text:0040ABC4 arg_14          = dword ptr  18h
.text:0040ABC4 arg_18          = byte ptr  1Ch
.text:0040ABC4
.text:0040ABC4                 and     eax, 64253A73h
.text:0040ABC9                 cmp     ah, [eax]
.text:0040ABCB
.text:0040ABCB loc_40ABCB:                             ; DATA XREF: sub_40ABC4:loc_40AD05↓o
.text:0040ABCB                 add     ds:55003A73h, ah
.text:0040ABD1                 push    edi
.text:0040ABD2                 push    esi
.text:0040ABD3                 push    ebx
.text:0040ABD4                 sub     esp, 1Ch
.text:0040ABD7                 mov     edx, ds:dword_415850
.text:0040ABDD                 mov     ebp, [esp+28h+Code]
.text:0040ABE1                 mov     edi, [esp+28h+ErrorMessage]
.text:0040ABE5                 test    edx, edx
.text:0040ABE7                 mov     ebx, [esp+28h+Str2]
.text:0040ABEB                 mov     esi, [esp+28h+arg_10]
.text:0040ABEF                 jz      short loc_40AC09
.text:0040ABF1                 cmp     ds:dword_415450, esi
.text:0040ABF7                 jz      loc_40AD30
.text:0040ABFD
.text:0040ABFD loc_40ABFD:                             ; CODE XREF: sub_40ABC4+18D↓j
.text:0040ABFD                 mov     ds:Str1, ebx
.text:0040AC03                 mov     ds:dword_415450, esi
.text:0040AC09
.text:0040AC09 loc_40AC09:                             ; CODE XREF: sub_40ABC4+2B↑j
.text:0040AC09                 mov     edx, ds:_iob
.text:0040AC0F                 add     edx, 20h ; ' '
.text:0040AC12                 mov     [esp+28h+Stream], edx ; Stream
.text:0040AC15                 call    fflush
.text:0040AC1A                 mov     eax, ds:dword_415810
.text:0040AC1F                 test    eax, eax
.text:0040AC21                 jz      loc_40AD05
.text:0040AC27                 call    eax ; dword_415810
.text:0040AC29
.text:0040AC29 loc_40AC29:                             ; CODE XREF: sub_40ABC4+164↓j
.text:0040AC29                 test    ebx, ebx
.text:0040AC2B                 jz      short loc_40AC4E
.text:0040AC2D                 mov     [esp+28h+ArgList], ebx
.text:0040AC31                 mov     ebx, ds:_iob
.text:0040AC37                 mov     [esp+28h+var_1C], esi
.text:0040AC3B                 mov     [esp+28h+Format], offset sub_40ABC4 ; Format
.text:0040AC43                 add     ebx, 40h ; '@'
.text:0040AC46                 mov     [esp+28h+Stream], ebx ; Stream
.text:0040AC49                 call    fprintf
.text:0040AC4E
.text:0040AC4E loc_40AC4E:                             ; CODE XREF: sub_40ABC4+67↑j
.text:0040AC4E                 mov     esi, ds:_iob
.text:0040AC54                 lea     edx, [esp+28h+arg_18]
.text:0040AC58                 mov     ecx, [esp+28h+arg_14]
.text:0040AC5C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:0040AC60                 add     esi, 40h ; '@'
.text:0040AC63                 mov     [esp+28h+Format], ecx ; Format
.text:0040AC67                 mov     [esp+28h+Stream], esi ; Stream
.text:0040AC6A                 call    vfprintf
.text:0040AC6F                 inc     ds:dword_415820
.text:0040AC75                 test    edi, edi
.text:0040AC77                 jnz     short loc_40ACD0
.text:0040AC79
.text:0040AC79 loc_40AC79:                             ; CODE XREF: sub_40ABC4+135↓j
.text:0040AC79                 mov     edx, ds:_iob
.text:0040AC7F                 lea     ecx, [edx+40h]
.text:0040AC82                 mov     ebx, [ecx+4]
.text:0040AC85                 dec     ebx
.text:0040AC86                 test    ebx, ebx
.text:0040AC88                 mov     [ecx+4], ebx
.text:0040AC8B                 js      short loc_40ACB7
.text:0040AC8D                 mov     esi, [edx+40h]
.text:0040AC90                 mov     byte ptr [esi], 0Ah
.text:0040AC93                 inc     dword ptr [edx+40h]
.text:0040AC96
.text:0040AC96 loc_40AC96:                             ; CODE XREF: sub_40ABC4+103↓j
.text:0040AC96                 mov     ecx, ds:_iob
.text:0040AC9C                 add     ecx, 40h ; '@'
.text:0040AC9F                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040ACA2                 call    fflush
.text:0040ACA7                 test    ebp, ebp
.text:0040ACA9                 jnz     loc_40AD56
.text:0040ACAF
.text:0040ACAF loc_40ACAF:                             ; CODE XREF: sub_40ABC4+173↓j
.text:0040ACAF                                         ; sub_40ABC4+187↓j
.text:0040ACAF                 add     esp, 1Ch
.text:0040ACB2                 pop     ebx
.text:0040ACB3                 pop     esi
.text:0040ACB4                 pop     edi
.text:0040ACB5                 pop     ebp
.text:0040ACB6                 retn
.text:0040ACB7 ; ---------------------------------------------------------------------------
.text:0040ACB7
.text:0040ACB7 loc_40ACB7:                             ; CODE XREF: sub_40ABC4+C7↑j
.text:0040ACB7                 mov     [esp+28h+Format], ecx ; File
.text:0040ACBB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:0040ACC2                 call    _flsbuf
.text:0040ACC7                 jmp     short loc_40AC96
.text:0040ACC7 ; ---------------------------------------------------------------------------
.text:0040ACC9                 align 10h
.text:0040ACD0
.text:0040ACD0 loc_40ACD0:                             ; CODE XREF: sub_40ABC4+B3↑j
.text:0040ACD0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:0040ACD3                 call    strerror
.text:0040ACD8                 test    eax, eax
.text:0040ACDA                 jz      short loc_40ACFE
.text:0040ACDC
.text:0040ACDC loc_40ACDC:                             ; CODE XREF: sub_40ABC4+13F↓j
.text:0040ACDC                 mov     [esp+28h+ArgList], eax
.text:0040ACE0                 mov     edi, ds:_iob
.text:0040ACE6                 mov     [esp+28h+Format], offset aS ; ": %s"
.text:0040ACEE                 add     edi, 40h ; '@'
.text:0040ACF1                 mov     [esp+28h+Stream], edi ; Stream
.text:0040ACF4                 call    fprintf
.text:0040ACF9                 jmp     loc_40AC79
.text:0040ACFE ; ---------------------------------------------------------------------------
.text:0040ACFE
.text:0040ACFE loc_40ACFE:                             ; CODE XREF: sub_40ABC4+116↑j
.text:0040ACFE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040AD03                 jmp     short loc_40ACDC
.text:0040AD05 ; ---------------------------------------------------------------------------
.text:0040AD05
.text:0040AD05 loc_40AD05:                             ; CODE XREF: sub_40ABC4+5D↑j
.text:0040AD05                 mov     [esp+28h+Format], (offset loc_40ABCB+1) ; Format
.text:0040AD0D                 mov     ecx, ds:_iob
.text:0040AD13                 mov     edx, ds:dword_4157E0
.text:0040AD19                 add     ecx, 40h ; '@'
.text:0040AD1C                 mov     [esp+28h+ArgList], edx
.text:0040AD20                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040AD23                 call    fprintf
.text:0040AD28                 jmp     loc_40AC29
.text:0040AD28 ; ---------------------------------------------------------------------------
.text:0040AD2D                 align 10h
.text:0040AD30
.text:0040AD30 loc_40AD30:                             ; CODE XREF: sub_40ABC4+33↑j
.text:0040AD30                 mov     eax, ds:Str1
.text:0040AD35                 cmp     ebx, eax
.text:0040AD37                 jz      loc_40ACAF
.text:0040AD3D                 mov     [esp+28h+Format], ebx ; Str2
.text:0040AD41                 mov     [esp+28h+Stream], eax ; Str1
.text:0040AD44                 call    strcmp
.text:0040AD49                 test    eax, eax
.text:0040AD4B                 jz      loc_40ACAF
.text:0040AD51                 jmp     loc_40ABFD
.text:0040AD56 ; ---------------------------------------------------------------------------
.text:0040AD56
.text:0040AD56 loc_40AD56:                             ; CODE XREF: sub_40ABC4+E5↑j
.text:0040AD56                 mov     [esp+28h+Stream], ebp ; Code
.text:0040AD59                 call    exit
.text:0040AD59 sub_40ABC4      endp ; sp-analysis failed
.text:0040AD59
.text:0040AD59 ; ---------------------------------------------------------------------------
.text:0040AD5E                 align 10h
.text:0040AD60
.text:0040AD60 ; =============== S U B R O U T I N E =======================================
.text:0040AD60
.text:0040AD60
.text:0040AD60 ; int __cdecl sub_40AD60(char *, int)
.text:0040AD60 sub_40AD60      proc near               ; CODE XREF: sub_402550+30A↑p
.text:0040AD60
.text:0040AD60 hNamedPipe      = dword ptr -0Ch
.text:0040AD60 Str             = dword ptr -8
.text:0040AD60 var_4           = dword ptr -4
.text:0040AD60 arg_0           = dword ptr  4
.text:0040AD60 arg_4           = dword ptr  8
.text:0040AD60
.text:0040AD60                 sub     esp, 0Ch
.text:0040AD63                 mov     edx, [esp+0Ch+arg_4]
.text:0040AD67                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:0040AD6E                 mov     [esp+0Ch+var_4], edx ; int
.text:0040AD72                 mov     edx, [esp+0Ch+arg_0]
.text:0040AD76                 mov     [esp+0Ch+Str], edx ; Str
.text:0040AD7A                 call    sub_40AFD0
.text:0040AD7F                 add     esp, 0Ch
.text:0040AD82                 retn
.text:0040AD82 sub_40AD60      endp
.text:0040AD82
.text:0040AD82 ; ---------------------------------------------------------------------------
.text:0040AD83 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:0040AD83                                         ; DATA XREF: .text:0040AE6E↓o
.text:0040AD96 aModeO          db 'mode:      %#o',0Ah,0
.text:0040AD96                                         ; DATA XREF: .text:0040AE84↓o
.text:0040ADA6 aUidLd          db 'uid:       %ld',0Ah,0
.text:0040ADA6                                         ; DATA XREF: .text:0040AE97↓o
.text:0040ADB6 aGidLd          db 'gid:       %ld',0Ah,0
.text:0040ADB6                                         ; DATA XREF: .text:0040AEAA↓o
.text:0040ADC6 aDevLu          db 'dev:       %lu',0Ah,0
.text:0040ADC6                                         ; DATA XREF: .text:0040AEBD↓o
.text:0040ADD6 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:0040ADD6                                         ; DATA XREF: .text:0040AED0↓o
.text:0040ADE6 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:0040ADE6                                         ; DATA XREF: .text:0040AEE6↓o
.text:0040ADF8 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:0040ADF8                                         ; DATA XREF: .text:0040AEFD↓o
.text:0040AE07 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:0040AE07                                         ; DATA XREF: .text:0040AF13↓o
.text:0040AE19 aAtimeLdS       db 'atime:     %ld: %s',0
.text:0040AE19                                         ; DATA XREF: .text:0040AF39↓o
.text:0040AE2C aMtimeLdS       db 'mtime:     %ld: %s',0
.text:0040AE2C                                         ; DATA XREF: .text:0040AF5B↓o
.text:0040AE3F aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:0040AE3F                                         ; DATA XREF: .text:0040AF7D↓o
.text:0040AE53                 align 10h
.text:0040AE60                 push    ebx
.text:0040AE61                 sub     esp, 18h
.text:0040AE64                 mov     ebx, [esp+20h]
.text:0040AE68                 mov     edx, [ebx+8]
.text:0040AE6B                 mov     ecx, [ebx+0Ch]
.text:0040AE6E                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:0040AE75                 mov     [esp+4], edx
.text:0040AE79                 mov     [esp+8], ecx
.text:0040AE7D                 call    printf
.text:0040AE82                 mov     ecx, [ebx]
.text:0040AE84                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:0040AE8B                 mov     [esp+4], ecx
.text:0040AE8F                 call    printf
.text:0040AE94                 mov     edx, [ebx+1Ch]
.text:0040AE97                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:0040AE9E                 mov     [esp+4], edx
.text:0040AEA2                 call    printf
.text:0040AEA7                 mov     ecx, [ebx+20h]
.text:0040AEAA                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:0040AEB1                 mov     [esp+4], ecx
.text:0040AEB5                 call    printf
.text:0040AEBA                 mov     edx, [ebx+10h]
.text:0040AEBD                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:0040AEC4                 mov     [esp+4], edx
.text:0040AEC8                 call    printf
.text:0040AECD                 mov     ecx, [ebx+18h]
.text:0040AED0                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:0040AED7                 mov     [esp+4], ecx
.text:0040AEDB                 call    printf
.text:0040AEE0                 mov     edx, [ebx+30h]
.text:0040AEE3                 mov     ecx, [ebx+34h]
.text:0040AEE6                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:0040AEED                 mov     [esp+4], edx
.text:0040AEF1                 mov     [esp+8], ecx
.text:0040AEF5                 call    printf
.text:0040AEFA                 mov     ecx, [ebx+50h]
.text:0040AEFD                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:0040AF04                 mov     [esp+4], ecx
.text:0040AF08                 call    printf
.text:0040AF0D                 mov     ecx, [ebx+5Ch]
.text:0040AF10                 mov     edx, [ebx+58h]
.text:0040AF13                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:0040AF1A                 mov     [esp+8], ecx
.text:0040AF1E                 mov     [esp+4], edx
.text:0040AF22                 call    printf
.text:0040AF27                 lea     edx, [ebx+38h]
.text:0040AF2A                 mov     [esp], edx
.text:0040AF2D                 call    ctime
.text:0040AF32                 mov     [esp+8], eax
.text:0040AF36                 mov     ecx, [ebx+38h]
.text:0040AF39                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:0040AF40                 mov     [esp+4], ecx
.text:0040AF44                 call    printf
.text:0040AF49                 lea     edx, [ebx+40h]
.text:0040AF4C                 mov     [esp], edx
.text:0040AF4F                 call    ctime
.text:0040AF54                 mov     [esp+8], eax
.text:0040AF58                 mov     ecx, [ebx+40h]
.text:0040AF5B                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:0040AF62                 mov     [esp+4], ecx
.text:0040AF66                 call    printf
.text:0040AF6B                 lea     edx, [ebx+48h]
.text:0040AF6E                 mov     [esp], edx
.text:0040AF71                 call    ctime
.text:0040AF76                 mov     [esp+8], eax
.text:0040AF7A                 mov     edx, [ebx+48h]
.text:0040AF7D                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:0040AF84                 mov     [esp+4], edx
.text:0040AF88                 call    printf
.text:0040AF8D                 add     esp, 18h
.text:0040AF90                 xor     eax, eax
.text:0040AF92                 pop     ebx
.text:0040AF93                 retn
.text:0040AF93 ; ---------------------------------------------------------------------------
.text:0040AF94                 align 10h
.text:0040AFA0 ; const char aFxstat64BadFil[]
.text:0040AFA0 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:0040AFA0                                         ; DATA XREF: sub_40AFD0+7B↓o
.text:0040AFC4                 align 10h
.text:0040AFD0
.text:0040AFD0 ; =============== S U B R O U T I N E =======================================
.text:0040AFD0
.text:0040AFD0
.text:0040AFD0 ; int __cdecl sub_40AFD0(HANDLE hNamedPipe, char *Str, int)
.text:0040AFD0 sub_40AFD0      proc near               ; CODE XREF: sub_40AD60+1A↑p
.text:0040AFD0                                         ; .text:0040D769↓p
.text:0040AFD0
.text:0040AFD0 hFindFile       = dword ptr -1A0h
.text:0040AFD0 var_19C         = dword ptr -19Ch
.text:0040AFD0 hLibModule      = dword ptr -198h
.text:0040AFD0 lpFindFileData  = dword ptr -194h
.text:0040AFD0 lpModuleName    = dword ptr -18Ch
.text:0040AFD0 lpProcName      = dword ptr -188h
.text:0040AFD0 var_184         = dword ptr -184h
.text:0040AFD0 var_180         = dword ptr -180h
.text:0040AFD0 var_17C         = dword ptr -17Ch
.text:0040AFD0 var_178         = dword ptr -178h
.text:0040AFD0 var_174         = dword ptr -174h
.text:0040AFD0 var_170         = dword ptr -170h
.text:0040AFD0 var_16C         = dword ptr -16Ch
.text:0040AFD0 var_168         = dword ptr -168h
.text:0040AFD0 var_164         = dword ptr -164h
.text:0040AFD0 hModule         = dword ptr -160h
.text:0040AFD0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040AFD0 FileHandle      = dword ptr -1Ch
.text:0040AFD0 var_18          = dword ptr -18h
.text:0040AFD0 var_10          = dword ptr -10h
.text:0040AFD0 var_C           = dword ptr -0Ch
.text:0040AFD0 lpFileName      = dword ptr -8
.text:0040AFD0 var_4           = dword ptr -4
.text:0040AFD0 hNamedPipe      = dword ptr  4
.text:0040AFD0 Str             = dword ptr  8
.text:0040AFD0 arg_8           = dword ptr  0Ch
.text:0040AFD0
.text:0040AFD0                 sub     esp, 1Ch
.text:0040AFD3                 mov     edx, [esp+1Ch+Str]
.text:0040AFD7                 mov     [esp+1Ch+var_C], ebx
.text:0040AFDB                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040AFDF                 mov     [esp+1Ch+lpFileName], esi
.text:0040AFE3                 mov     esi, [esp+1Ch+arg_8]
.text:0040AFE7                 test    ebx, ebx
.text:0040AFE9                 mov     [esp+1Ch+var_4], edi
.text:0040AFED                 jnz     short loc_40B027
.text:0040AFEF                 test    edx, edx
.text:0040AFF1                 js      short loc_40B047
.text:0040AFF3                 test    esi, esi
.text:0040AFF5                 jz      short loc_40B027
.text:0040AFF7                 cld
.text:0040AFF8                 mov     eax, ebx
.text:0040AFFA                 mov     edi, esi
.text:0040AFFC                 mov     ecx, 18h
.text:0040B001                 rep stosd
.text:0040B003                 mov     [esp+1Ch+Str], esi
.text:0040B007                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040B00A                 call    _get_osfhandle
.text:0040B00F                 mov     [esp+1Ch+hNamedPipe], eax
.text:0040B013                 mov     ebx, [esp+1Ch+var_C]
.text:0040B017                 mov     esi, [esp+1Ch+lpFileName]
.text:0040B01B                 mov     edi, [esp+1Ch+var_4]
.text:0040B01F                 add     esp, 1Ch
.text:0040B022                 jmp     loc_40B3B0
.text:0040B027 ; ---------------------------------------------------------------------------
.text:0040B027
.text:0040B027 loc_40B027:                             ; CODE XREF: sub_40AFD0+1D↑j
.text:0040B027                                         ; sub_40AFD0+25↑j
.text:0040B027                 call    _errno
.text:0040B02C                 mov     dword ptr [eax], 16h
.text:0040B032
.text:0040B032 loc_40B032:                             ; CODE XREF: sub_40AFD0+92↓j
.text:0040B032                 mov     ebx, [esp+1Ch+var_C]
.text:0040B036                 mov     eax, 0FFFFFFFFh
.text:0040B03B                 mov     esi, [esp+1Ch+lpFileName]
.text:0040B03F                 mov     edi, [esp+1Ch+var_4]
.text:0040B043                 add     esp, 1Ch
.text:0040B046                 retn
.text:0040B047 ; ---------------------------------------------------------------------------
.text:0040B047
.text:0040B047 loc_40B047:                             ; CODE XREF: sub_40AFD0+21↑j
.text:0040B047                 mov     [esp+1Ch+var_18], edx
.text:0040B04B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:0040B052                 call    printf
.text:0040B057                 call    _errno
.text:0040B05C                 mov     dword ptr [eax], 9
.text:0040B062                 jmp     short loc_40B032
.text:0040B062 ; ---------------------------------------------------------------------------
.text:0040B064                 align 20h
.text:0040B080 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:0040B080                                         ; DATA XREF: .data:off_414074↓o
.text:0040B094 ; const CHAR ModuleName[]
.text:0040B094 ModuleName      db 'KERNEL32.DLL',0     ; DATA XREF: sub_40AFD0+101↓o
.text:0040B094                                         ; sub_40AFD0+26C↓o ...
.text:0040B0A1 ; const CHAR ProcName[]
.text:0040B0A1 ProcName        db 'GetFileAttributesExA',0
.text:0040B0A1                                         ; DATA XREF: sub_40AFD0+118↓o
.text:0040B0B6                 align 10h
.text:0040B0C0
.text:0040B0C0 loc_40B0C0:                             ; CODE XREF: .text:0040C264↓p
.text:0040B0C0                                         ; sub_40C660+37↓p
.text:0040B0C0                 push    ebp
.text:0040B0C1                 push    edi
.text:0040B0C2                 push    esi
.text:0040B0C3                 push    ebx
.text:0040B0C4                 sub     esp, 17Ch
.text:0040B0CA                 mov     ebx, [esp+18Ch+Str]
.text:0040B0D1                 mov     [esp+18Ch+lpModuleName], offset ModuleName ; "KERNEL32.DLL"
.text:0040B0D8                 call    GetModuleHandleA
.text:0040B0DD                 sub     esp, 4
.text:0040B0E0                 mov     [esp+18Ch+hModule], eax
.text:0040B0E4                 mov     edx, [esp+18Ch+hModule]
.text:0040B0E8                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:0040B0F0                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:0040B0F3                 call    GetProcAddress
.text:0040B0F8                 sub     esp, 8
.text:0040B0FB                 mov     ebp, eax
.text:0040B0FD                 mov     eax, [esp+18Ch+hNamedPipe]
.text:0040B104                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:0040B107                 call    GetFileAttributesA
.text:0040B10C                 sub     esp, 4
.text:0040B10F                 mov     [esp+18Ch+var_164], eax
.text:0040B113                 xor     eax, eax
.text:0040B115                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040B11A                 jz      short loc_40B171
.text:0040B11C                 cld
.text:0040B11D                 mov     ecx, 50h ; 'P'
.text:0040B122                 lea     esi, [esp+18Ch+FindFileData]
.text:0040B126                 mov     edi, esi
.text:0040B128                 test    ebp, ebp
.text:0040B12A                 rep stosd
.text:0040B12C                 mov     [esp+18Ch+var_170], 0
.text:0040B134                 jz      short loc_40B155
.text:0040B136                 mov     [esp+18Ch+var_184], ebx
.text:0040B13A                 mov     ecx, [esp+18Ch+hNamedPipe]
.text:0040B141                 mov     [esp+18Ch+lpProcName], 0
.text:0040B149                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040B14C                 call    ebp
.text:0040B14E                 sub     esp, 0Ch
.text:0040B151                 mov     [esp+198h+var_17C], eax
.text:0040B155
.text:0040B155 loc_40B155:                             ; CODE XREF: sub_40AFD0+164↑j
.text:0040B155                 mov     eax, [esp+198h+var_17C]
.text:0040B159                 test    eax, eax
.text:0040B15B                 jz      short loc_40B180
.text:0040B15D
.text:0040B15D loc_40B15D:                             ; CODE XREF: sub_40AFD0+221↓j
.text:0040B15D                                         ; sub_40AFD0+23B↓j
.text:0040B15D                 mov     ebx, [esp+198h+var_16C]
.text:0040B161                 mov     [esp+198h+hLibModule], ebx ; hLibModule
.text:0040B164                 call    FreeLibrary
.text:0040B169                 sub     esp, 4
.text:0040B16C                 mov     eax, 1
.text:0040B171
.text:0040B171 loc_40B171:                             ; CODE XREF: sub_40AFD0+14A↑j
.text:0040B171                 add     esp, 17Ch
.text:0040B177                 pop     ebx
.text:0040B178                 pop     esi
.text:0040B179                 pop     edi
.text:0040B17A                 pop     ebp
.text:0040B17B                 retn
.text:0040B17B ; ---------------------------------------------------------------------------
.text:0040B17C                 align 10h
.text:0040B180
.text:0040B180 loc_40B180:                             ; CODE XREF: sub_40AFD0+18B↑j
.text:0040B180                 mov     [esp+198h+lpFindFileData], esi ; lpFindFileData
.text:0040B184                 mov     edx, [esp+198h+lpFileName]
.text:0040B18B                 mov     [esp+198h+hLibModule], edx ; lpFileName
.text:0040B18E                 call    FindFirstFileA
.text:0040B193                 sub     esp, 8
.text:0040B196                 xor     ecx, ecx
.text:0040B198                 cmp     eax, 0FFFFFFFFh
.text:0040B19B                 setnz   cl
.text:0040B19E                 mov     edi, [esp+198h+var_168]
.text:0040B1A2                 mov     [ebx], edi
.text:0040B1A4                 mov     esi, [esp+198h+hModule]
.text:0040B1A8                 mov     [esp+198h+var_17C], ecx
.text:0040B1AC                 mov     ecx, [esp+198h+var_164]
.text:0040B1B0                 mov     [ebx+8], esi
.text:0040B1B3                 mov     [ebx+4], ecx
.text:0040B1B6                 mov     ebp, [esp+198h+FindFileData.dwFileAttributes]
.text:0040B1BA                 mov     edi, [esp+198h+FindFileData.ftCreationTime.dwLowDateTime]
.text:0040B1BE                 mov     [ebx+0Ch], ebp
.text:0040B1C1                 mov     [ebx+10h], edi
.text:0040B1C4                 mov     esi, [esp+198h+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:0040B1C8                 mov     ecx, [esp+198h+FindFileData.ftCreationTime.dwHighDateTime]
.text:0040B1CC                 mov     [ebx+18h], esi
.text:0040B1CF                 mov     [ebx+14h], ecx
.text:0040B1D2                 mov     ebp, [esp+198h+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:0040B1D6                 mov     [ebx+1Ch], ebp
.text:0040B1D9                 mov     edi, [esp+198h+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:0040B1DD                 mov     [ebx+20h], edi
.text:0040B1E0                 mov     [esp+198h+hLibModule], eax ; hFindFile
.text:0040B1E3                 call    FindClose
.text:0040B1E8                 sub     esp, 4
.text:0040B1EB                 mov     esi, [esp+198h+var_17C]
.text:0040B1EF                 test    esi, esi
.text:0040B1F1                 jnz     loc_40B15D
.text:0040B1F7                 cld
.text:0040B1F8                 mov     eax, [esp+198h+var_17C]
.text:0040B1FC                 mov     ecx, 9
.text:0040B201                 mov     edi, ebx
.text:0040B203                 rep stosd
.text:0040B205                 mov     ebp, [esp+198h+var_170]
.text:0040B209                 mov     [ebx], ebp
.text:0040B20B                 jmp     loc_40B15D
.text:0040B20B ; ---------------------------------------------------------------------------
.text:0040B210 ; const CHAR aFindfirstfilee[]
.text:0040B210 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_40AFD0+283↓o
.text:0040B221 ; ---------------------------------------------------------------------------
.text:0040B221
.text:0040B221 loc_40B221:                             ; DATA XREF: sub_40AFD0:loc_40B2BD↓o
.text:0040B221                 pop     esp
.text:0040B222                 sub     al, [eax]
.text:0040B224                 lea     esi, [esi+0]
.text:0040B22A                 lea     edi, [edi+0]
.text:0040B230
.text:0040B230 loc_40B230:                             ; CODE XREF: .text:0040C363↓p
.text:0040B230                                         ; sub_40C660+3FA↓p ...
.text:0040B230                 push    ebp
.text:0040B231                 push    edi
.text:0040B232                 xor     edi, edi
.text:0040B234                 push    esi
.text:0040B235                 push    ebx
.text:0040B236                 sub     esp, 17Ch
.text:0040B23C                 mov     [esp+188h+lpProcName], offset ModuleName ; "KERNEL32.DLL"
.text:0040B243                 call    LoadLibraryA
.text:0040B248                 sub     esp, 4
.text:0040B24B                 mov     [esp+188h+FindFileData.dwFileAttributes], eax
.text:0040B24F                 mov     ecx, [esp+188h+FindFileData.dwFileAttributes]
.text:0040B253                 mov     [esp+188h+var_184], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0040B25B                 mov     [esp+188h+lpProcName], ecx ; hModule
.text:0040B25E                 call    GetProcAddress
.text:0040B263                 sub     esp, 8
.text:0040B266                 mov     edx, [esp+188h+Str]
.text:0040B26D                 mov     [esp+188h+hModule], eax
.text:0040B271                 mov     [esp+188h+lpProcName], edx ; Str
.text:0040B274                 call    strlen
.text:0040B279                 lea     edx, [eax+5]
.text:0040B27C                 mov     ebx, eax
.text:0040B27E                 mov     [esp+188h+lpProcName], edx ; Size
.text:0040B281                 call    malloc
.text:0040B286                 mov     esi, eax
.text:0040B288                 test    esi, esi
.text:0040B28A                 mov     eax, 1
.text:0040B28F                 jz      loc_40B36D
.text:0040B295                 mov     [esp+188h+lpProcName], esi ; Destination
.text:0040B298                 mov     ebp, [esp+188h+Str]
.text:0040B29F                 mov     [esp+188h+var_184], ebp ; Source
.text:0040B2A3                 call    strcpy
.text:0040B2A8                 movzx   eax, byte ptr [ebx+esi-1]
.text:0040B2AD                 cmp     al, 2Fh ; '/'
.text:0040B2AF                 jz      loc_40B39B
.text:0040B2B5                 cmp     al, 5Ch ; '\'
.text:0040B2B7                 jz      loc_40B39B
.text:0040B2BD
.text:0040B2BD loc_40B2BD:                             ; CODE XREF: sub_40AFD0+3D0↓j
.text:0040B2BD                 mov     [esp+188h+var_184], offset loc_40B221 ; Source
.text:0040B2C5                 mov     [esp+188h+lpProcName], esi ; Destination
.text:0040B2C8                 call    strcat
.text:0040B2CD                 mov     eax, [esp+188h+hModule]
.text:0040B2D1                 test    eax, eax
.text:0040B2D3                 jz      loc_40B395
.text:0040B2D9                 mov     [esp+188h+var_174], 0
.text:0040B2E1                 lea     ebp, [esp+188h+FindFileData.ftCreationTime]
.text:0040B2E5                 mov     [esp+188h+var_178], 0
.text:0040B2ED                 mov     [esp+188h+var_17C], 1
.text:0040B2F5                 mov     [esp+188h+var_180], ebp
.text:0040B2F9                 mov     [esp+188h+var_184], 0
.text:0040B301                 mov     [esp+188h+lpProcName], esi
.text:0040B304                 call    [esp+188h+hModule]
.text:0040B308                 sub     esp, 18h
.text:0040B30B                 mov     ebx, eax
.text:0040B30D                 cmp     eax, 0FFFFFFFFh
.text:0040B310                 jz      short loc_40B378
.text:0040B312                 lea     esi, [esi+0]
.text:0040B319                 lea     edi, [edi+0]
.text:0040B320
.text:0040B320 loc_40B320:                             ; CODE XREF: sub_40AFD0+369↓j
.text:0040B320                                         ; sub_40AFD0+3C1↓j
.text:0040B320                 test    byte ptr [esp+1A0h+var_170], 10h
.text:0040B325                 jz      short loc_40B328
.text:0040B327                 inc     edi
.text:0040B328
.text:0040B328 loc_40B328:                             ; CODE XREF: sub_40AFD0+355↑j
.text:0040B328                 mov     [esp+1A0h+var_19C], ebp ; lpFindFileData
.text:0040B32C                 mov     [esp+1A0h+hFindFile], ebx ; hFindFile
.text:0040B32F                 call    FindNextFileA
.text:0040B334                 sub     esp, 8
.text:0040B337                 test    eax, eax
.text:0040B339                 jnz     short loc_40B320
.text:0040B33B                 mov     [esp+1A0h+hFindFile], ebx ; hFindFile
.text:0040B33E                 call    FindClose
.text:0040B343                 sub     esp, 4
.text:0040B346                 mov     esi, [esp+1A0h+var_174]
.text:0040B34A                 mov     [esp+1A0h+hFindFile], esi ; hLibModule
.text:0040B34D                 call    FreeLibrary
.text:0040B352                 sub     esp, 4
.text:0040B355                 mov     ebx, [esp+1A0h+var_10]
.text:0040B35C                 mov     [esp+1A0h+hFindFile], ebx ; LPCSTR
.text:0040B35F                 call    sub_40D800
.text:0040B364                 test    eax, eax
.text:0040B366                 jz      short loc_40B36B
.text:0040B368                 add     edi, 2
.text:0040B36B
.text:0040B36B loc_40B36B:                             ; CODE XREF: sub_40AFD0+396↑j
.text:0040B36B                 mov     eax, edi
.text:0040B36D
.text:0040B36D loc_40B36D:                             ; CODE XREF: sub_40AFD0+2BF↑j
.text:0040B36D                                         ; sub_40AFD0+3C3↓j
.text:0040B36D                 add     esp, 17Ch
.text:0040B373                 pop     ebx
.text:0040B374                 pop     esi
.text:0040B375                 pop     edi
.text:0040B376                 pop     ebp
.text:0040B377                 retn
.text:0040B378 ; ---------------------------------------------------------------------------
.text:0040B378
.text:0040B378 loc_40B378:                             ; CODE XREF: sub_40AFD0+340↑j
.text:0040B378                                         ; sub_40AFD0+3C9↓j
.text:0040B378                 mov     [esp+1A0h+var_19C], ebp ; lpFindFileData
.text:0040B37C                 mov     [esp+1A0h+hFindFile], esi ; lpFileName
.text:0040B37F                 call    FindFirstFileA
.text:0040B384                 mov     ebx, eax
.text:0040B386                 sub     esp, 8
.text:0040B389                 cmp     ebx, 0FFFFFFFFh
.text:0040B38C                 mov     eax, 2
.text:0040B391                 jnz     short loc_40B320
.text:0040B393                 jmp     short loc_40B36D
.text:0040B395 ; ---------------------------------------------------------------------------
.text:0040B395
.text:0040B395 loc_40B395:                             ; CODE XREF: sub_40AFD0+303↑j
.text:0040B395                 lea     ebp, [esp+188h+FindFileData.ftCreationTime]
.text:0040B399                 jmp     short loc_40B378
.text:0040B39B ; ---------------------------------------------------------------------------
.text:0040B39B
.text:0040B39B loc_40B39B:                             ; CODE XREF: sub_40AFD0+2DF↑j
.text:0040B39B                                         ; sub_40AFD0+2E7↑j
.text:0040B39B                 mov     byte ptr [ebx+esi-1], 0
.text:0040B3A0                 jmp     loc_40B2BD
.text:0040B3A0 ; ---------------------------------------------------------------------------
.text:0040B3A5                 align 10h
.text:0040B3B0
.text:0040B3B0 loc_40B3B0:                             ; CODE XREF: sub_40AFD0+52↑j
.text:0040B3B0                                         ; sub_410FB0-4489↓p
.text:0040B3B0                 push    ebp
.text:0040B3B1                 mov     eax, 0FFFFFFFFh
.text:0040B3B6                 push    edi
.text:0040B3B7                 push    esi
.text:0040B3B8                 push    ebx
.text:0040B3B9                 sub     esp, 0DCh
.text:0040B3BF                 mov     esi, [esp+0ECh+hNamedPipe]
.text:0040B3C6                 mov     ebp, [esp+0ECh+Str]
.text:0040B3CD                 cmp     esi, 0FFFFFFFFh
.text:0040B3D0                 jz      loc_40B751
.text:0040B3D6                 cld
.text:0040B3D7                 xor     eax, eax
.text:0040B3D9                 lea     ebx, [esp+0ECh+FindFileData.cFileName+0D4h]
.text:0040B3E0                 mov     ecx, 0Dh
.text:0040B3E5                 mov     edi, ebx
.text:0040B3E7                 rep stosd
.text:0040B3E9                 mov     dword ptr [ebp+18h], 1
.text:0040B3F0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:0040B3F3                 call    GetFileType
.text:0040B3F8                 sub     esp, 4
.text:0040B3FB                 xor     edx, edx
.text:0040B3FD                 cmp     eax, 2
.text:0040B400                 jz      loc_40B830
.text:0040B406                 cmp     eax, 3
.text:0040B409                 jz      loc_40B820
.text:0040B40F
.text:0040B40F loc_40B40F:                             ; CODE XREF: sub_40AFD0+855↓j
.text:0040B40F                                         ; sub_40AFD0+865↓j
.text:0040B40F                 or      [ebp+0], edx
.text:0040B412                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx ; lpFileInformation
.text:0040B416                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:0040B419                 call    GetFileInformationByHandle
.text:0040B41E                 sub     esp, 8
.text:0040B421                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0F8h]
.text:0040B428                 test    ecx, ecx
.text:0040B42A                 jnz     short loc_40B460
.text:0040B42C                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0F4h]
.text:0040B433                 test    edx, edx
.text:0040B435                 jnz     short loc_40B460
.text:0040B437                 mov     edx, [ebp+0]
.text:0040B43A                 and     edx, 0F000h
.text:0040B440                 cmp     edx, 1000h
.text:0040B446                 jz      loc_40B7B6
.text:0040B44C
.text:0040B44C loc_40B44C:                             ; CODE XREF: sub_40AFD0+839↓j
.text:0040B44C                                         ; sub_40AFD0+845↓j
.text:0040B44C                 test    ecx, ecx
.text:0040B44E                 jnz     short loc_40B460
.text:0040B450                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0F4h]
.text:0040B457                 test    edx, edx
.text:0040B459                 jz      loc_40B794
.text:0040B45F                 nop
.text:0040B460
.text:0040B460 loc_40B460:                             ; CODE XREF: sub_40AFD0+45A↑j
.text:0040B460                                         ; sub_40AFD0+465↑j ...
.text:0040B460                 cld
.text:0040B461                 mov     esi, ebx
.text:0040B463                 mov     dword ptr [ebp+14h], 0
.text:0040B46A                 lea     edi, [esp+0ECh+FindFileData.cFileName+94h]
.text:0040B46E                 mov     ecx, 0Dh
.text:0040B473                 rep movsd
.text:0040B475                 xor     ebx, ebx
.text:0040B477                 xor     edi, edi
.text:0040B479                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0C4h]
.text:0040B480                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0C0h]
.text:0040B484                 or      edx, ebx
.text:0040B486                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+94h]
.text:0040B48A                 mov     [ebp+8], edx
.text:0040B48D                 or      edi, esi
.text:0040B48F                 xor     edx, edx
.text:0040B491                 mov     [ebp+0Ch], edi
.text:0040B494                 test    bl, 10h
.text:0040B497                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0B0h]
.text:0040B49B                 setz    dl
.text:0040B49E                 mov     [ebp+10h], esi
.text:0040B4A1                 dec     edx
.text:0040B4A2                 and     edx, 0FFFFC000h
.text:0040B4A8                 add     edx, 8000h
.text:0040B4AE                 or      edx, 124h
.text:0040B4B4                 test    bl, 1
.text:0040B4B7                 movzx   eax, dx
.text:0040B4BA                 jnz     short loc_40B4C1
.text:0040B4BC                 or      eax, 92h
.text:0040B4C1
.text:0040B4C1 loc_40B4C1:                             ; CODE XREF: sub_40AFD0+4EA↑j
.text:0040B4C1                 or      [ebp+0], eax
.text:0040B4C4                 xor     edx, edx
.text:0040B4C6                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+0B4h]
.text:0040B4CA                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0B8h]
.text:0040B4CE                 mov     eax, edx
.text:0040B4D0                 xor     esi, esi
.text:0040B4D2                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0A4h]
.text:0040B4D6                 mov     edi, ebx
.text:0040B4D8                 or      eax, edi
.text:0040B4DA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+88h], eax
.text:0040B4DE                 mov     ebx, ecx
.text:0040B4E0                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+0BCh]
.text:0040B4E4                 or      ebx, esi
.text:0040B4E6                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B4EA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+84h], ebx
.text:0040B4EE                 xor     ebx, ebx
.text:0040B4F0                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B4F4                 mov     [ebp+34h], esi
.text:0040B4F7                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0A0h]
.text:0040B4FB                 mov     [ebp+18h], edi
.text:0040B4FE                 xor     edi, edi
.text:0040B500                 or      esi, ebx
.text:0040B502                 mov     [ebp+30h], ecx
.text:0040B505                 or      edi, edx
.text:0040B507                 mov     edx, esi
.text:0040B509                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B511                 sub     edx, 0D53E8000h
.text:0040B517                 mov     ebx, edi
.text:0040B519                 sbb     ebx, 19DB1DEh
.text:0040B51F                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx
.text:0040B523                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B52B                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040B52E                 call    sub_4129A0
.text:0040B533                 mov     ecx, eax
.text:0040B535                 shr     eax, 1Fh
.text:0040B538                 dec     eax
.text:0040B539                 and     ecx, eax
.text:0040B53B                 mov     [ebp+38h], ecx
.text:0040B53E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:0040B541                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040B545                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B54D                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B555                 call    sub_412E10
.text:0040B55A                 lea     ebx, [eax+eax*4]
.text:0040B55D                 xor     ecx, ecx
.text:0040B55F                 lea     esi, [ebx+ebx*4]
.text:0040B562                 shl     esi, 2
.text:0040B565                 mov     edi, esi
.text:0040B567                 shr     edi, 1Fh
.text:0040B56A                 dec     edi
.text:0040B56B                 and     edi, esi
.text:0040B56D                 mov     [ebp+3Ch], edi
.text:0040B570                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+98h]
.text:0040B574                 xor     edi, edi
.text:0040B576                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B57E                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+9Ch]
.text:0040B582                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B58A                 or      esi, ecx
.text:0040B58C                 or      edi, edx
.text:0040B58E                 mov     edx, esi
.text:0040B590                 mov     ecx, edi
.text:0040B592                 sub     edx, 0D53E8000h
.text:0040B598                 sbb     ecx, 19DB1DEh
.text:0040B59E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx
.text:0040B5A2                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040B5A5                 call    sub_4129A0
.text:0040B5AA                 mov     ebx, eax
.text:0040B5AC                 shr     eax, 1Fh
.text:0040B5AF                 dec     eax
.text:0040B5B0                 and     ebx, eax
.text:0040B5B2                 mov     [ebp+48h], ebx
.text:0040B5B5                 xor     ebx, ebx
.text:0040B5B7                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:0040B5BA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040B5BE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B5C6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B5CE                 call    sub_412E10
.text:0040B5D3                 lea     ecx, [eax+eax*4]
.text:0040B5D6                 lea     esi, [ecx+ecx*4]
.text:0040B5D9                 shl     esi, 2
.text:0040B5DC                 mov     edi, esi
.text:0040B5DE                 shr     edi, 1Fh
.text:0040B5E1                 dec     edi
.text:0040B5E2                 and     edi, esi
.text:0040B5E4                 mov     [ebp+4Ch], edi
.text:0040B5E7                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0A8h]
.text:0040B5EB                 xor     edi, edi
.text:0040B5ED                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B5F5                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0ACh]
.text:0040B5F9                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B601                 or      esi, ebx
.text:0040B603                 or      edi, edx
.text:0040B605                 mov     edx, esi
.text:0040B607                 mov     ebx, edi
.text:0040B609                 sub     edx, 0D53E8000h
.text:0040B60F                 sbb     ebx, 19DB1DEh
.text:0040B615                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx
.text:0040B619                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040B61C                 call    sub_4129A0
.text:0040B621                 mov     ecx, eax
.text:0040B623                 shr     eax, 1Fh
.text:0040B626                 dec     eax
.text:0040B627                 and     ecx, eax
.text:0040B629                 mov     [ebp+40h], ecx
.text:0040B62C                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040B630                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B638                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B640                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:0040B643                 call    sub_412E10
.text:0040B648                 mov     dword ptr [ebp+50h], 200h
.text:0040B64F                 lea     ebx, [eax+eax*4]
.text:0040B652                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B656                 lea     edx, [ebx+ebx*4]
.text:0040B659                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B65D                 shl     edx, 2
.text:0040B660                 mov     ecx, edx
.text:0040B662                 shr     ecx, 1Fh
.text:0040B665                 dec     ecx
.text:0040B666                 and     ecx, edx
.text:0040B668                 test    edi, edi
.text:0040B66A                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B66E                 mov     [ebp+44h], ecx
.text:0040B671                 js      loc_40B787
.text:0040B677
.text:0040B677 loc_40B677:                             ; CODE XREF: sub_40AFD0+7BF↓j
.text:0040B677                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B67B                 xor     esi, esi
.text:0040B67D                 mov     ecx, eax
.text:0040B67F                 shrd    ecx, edx, 9
.text:0040B683                 mov     ebx, edx
.text:0040B685                 mov     eax, esi
.text:0040B687                 and     edi, 1FFh
.text:0040B68D                 sar     ebx, 9
.text:0040B690                 or      eax, edi
.text:0040B692                 jz      short loc_40B69A
.text:0040B694                 add     ecx, 1
.text:0040B697                 adc     ebx, 0
.text:0040B69A
.text:0040B69A loc_40B69A:                             ; CODE XREF: sub_40AFD0+6C2↑j
.text:0040B69A                 mov     [ebp+5Ch], ebx
.text:0040B69D                 mov     esi, dword_414070
.text:0040B6A3                 xor     edi, edi
.text:0040B6A5                 mov     [ebp+58h], ecx
.text:0040B6A8                 mov     ebx, dword_414070
.text:0040B6AE                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B6B2                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B6B6                 mov     [ebp+50h], ebx
.text:0040B6B9                 shr     ebx, 9
.text:0040B6BC                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], edi
.text:0040B6C0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx
.text:0040B6C4                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], esi
.text:0040B6C8                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040B6CB                 call    sub_4129A0
.text:0040B6D0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], edi
.text:0040B6D4                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B6D8                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B6DC                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+74h], ebx
.text:0040B6E0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+7Ch], eax
.text:0040B6E4                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+80h], edx
.text:0040B6E8                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+78h], 0
.text:0040B6F0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], esi
.text:0040B6F4                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], ecx
.text:0040B6F7                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040B6FB                 call    sub_412E10
.text:0040B700                 mov     ebx, edx
.text:0040B702                 or      ebx, eax
.text:0040B704                 jz      short loc_40B760
.text:0040B706                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:0040B70A                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+80h]
.text:0040B70E                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:0040B712                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch], edi
.text:0040B716                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+78h]
.text:0040B71A                 add     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch], 1
.text:0040B71F                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+70h], esi
.text:0040B723                 adc     dword ptr [esp+0ECh+FindFileData.cFileName+70h], 0
.text:0040B728                 mul     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch]
.text:0040B72C                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+70h]
.text:0040B730                 mov     ebx, edx
.text:0040B732                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+6Ch]
.text:0040B736                 mov     esi, eax
.text:0040B738                 mov     eax, ebx
.text:0040B73A                 imul    ecx, edx
.text:0040B73D                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:0040B741                 imul    edx, edi
.text:0040B744                 add     eax, ecx
.text:0040B746                 lea     edi, [edx+eax]
.text:0040B749
.text:0040B749 loc_40B749:                             ; CODE XREF: sub_40AFD0+7B5↓j
.text:0040B749                 mov     [ebp+58h], esi
.text:0040B74C                 xor     eax, eax
.text:0040B74E                 mov     [ebp+5Ch], edi
.text:0040B751
.text:0040B751 loc_40B751:                             ; CODE XREF: sub_40AFD0+400↑j
.text:0040B751                 add     esp, 0DCh
.text:0040B757                 pop     ebx
.text:0040B758                 pop     esi
.text:0040B759                 pop     edi
.text:0040B75A                 pop     ebp
.text:0040B75B                 retn
.text:0040B75B ; ---------------------------------------------------------------------------
.text:0040B75C                 align 10h
.text:0040B760
.text:0040B760 loc_40B760:                             ; CODE XREF: sub_40AFD0+734↑j
.text:0040B760                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:0040B764                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+78h]
.text:0040B768                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:0040B76C                 mul     dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:0040B770                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:0040B774                 imul    ebx, edi
.text:0040B777                 mov     esi, eax
.text:0040B779                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+80h]
.text:0040B77D                 add     edx, ebx
.text:0040B77F                 imul    ecx, eax
.text:0040B782                 lea     edi, [ecx+edx]
.text:0040B785                 jmp     short loc_40B749
.text:0040B787 ; ---------------------------------------------------------------------------
.text:0040B787
.text:0040B787 loc_40B787:                             ; CODE XREF: sub_40AFD0+6A1↑j
.text:0040B787                 add     eax, 1FFh
.text:0040B78C                 adc     edx, 0
.text:0040B78F                 jmp     loc_40B677
.text:0040B794 ; ---------------------------------------------------------------------------
.text:0040B794
.text:0040B794 loc_40B794:                             ; CODE XREF: sub_40AFD0+489↑j
.text:0040B794                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:0040B797                 lea     ecx, [esp+0ECh+FindFileData.cFileName+0F4h]
.text:0040B79E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx ; lpFileSizeHigh
.text:0040B7A2                 call    GetFileSize
.text:0040B7A7                 sub     esp, 8
.text:0040B7AA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F8h], eax
.text:0040B7B1                 jmp     loc_40B460
.text:0040B7B6 ; ---------------------------------------------------------------------------
.text:0040B7B6
.text:0040B7B6 loc_40B7B6:                             ; CODE XREF: sub_40AFD0+476↑j
.text:0040B7B6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+90h], 0
.text:0040B7BE                 lea     ecx, [esp+0ECh+FindFileData.cFileName+90h]
.text:0040B7C2                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+58h], 0 ; lpBytesLeftThisMessage
.text:0040B7CA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+54h], ecx ; lpTotalBytesAvail
.text:0040B7CE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0 ; lpBytesRead
.text:0040B7D6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 0 ; nBufferSize
.text:0040B7DE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], 0 ; lpBuffer
.text:0040B7E6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hNamedPipe
.text:0040B7E9                 call    PeekNamedPipe
.text:0040B7EE                 sub     esp, 18h
.text:0040B7F1                 test    eax, eax
.text:0040B7F3                 jz      short loc_40B80E
.text:0040B7F5                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+90h]
.text:0040B7F9                 xor     eax, eax
.text:0040B7FB                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F4h], eax
.text:0040B802                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F8h], ecx
.text:0040B809                 jmp     loc_40B44C
.text:0040B80E ; ---------------------------------------------------------------------------
.text:0040B80E
.text:0040B80E loc_40B80E:                             ; CODE XREF: sub_40AFD0+823↑j
.text:0040B80E                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0F8h]
.text:0040B815                 jmp     loc_40B44C
.text:0040B815 ; ---------------------------------------------------------------------------
.text:0040B81A                 align 10h
.text:0040B820
.text:0040B820 loc_40B820:                             ; CODE XREF: sub_40AFD0+439↑j
.text:0040B820                 mov     edx, 1000h
.text:0040B825                 jmp     loc_40B40F
.text:0040B825 ; ---------------------------------------------------------------------------
.text:0040B82A                 align 10h
.text:0040B830
.text:0040B830 loc_40B830:                             ; CODE XREF: sub_40AFD0+430↑j
.text:0040B830                 mov     edx, 2000h
.text:0040B835                 jmp     loc_40B40F
.text:0040B835 sub_40AFD0      endp ; sp-analysis failed
.text:0040B835
.text:0040B835 ; ---------------------------------------------------------------------------
.text:0040B83A aLnk            db '.lnk',0             ; DATA XREF: sub_40B880+E0↓o
.text:0040B83A                                         ; .text:0040BF2A↓o ...
.text:0040B83F ; const CHAR aKernel32[]
.text:0040B83F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_40B880+12D↓o
.text:0040B83F                                         ; .text:0040C5DB↓o
.text:0040B848 ; const CHAR aGetcompressedf[]
.text:0040B848 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:0040B848                                         ; DATA XREF: sub_40B880+13E↓o
.text:0040B848                                         ; .text:0040C5EC↓o
.text:0040B85F ; const CHAR aGetbinarytypea[]
.text:0040B85F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_40B880+333↓o
.text:0040B85F                                         ; .text:0040BF86↓o ...
.text:0040B86E ; const char aPathext[]
.text:0040B86E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_40B880:loc_40BC67↓o
.text:0040B86E                                         ; .text:loc_40C030↓o ...
.text:0040B876                 align 10h
.text:0040B880
.text:0040B880 ; =============== S U B R O U T I N E =======================================
.text:0040B880
.text:0040B880
.text:0040B880 ; int __cdecl sub_40B880(char *String1, int)
.text:0040B880 sub_40B880      proc near               ; CODE XREF: sub_40C660+3CD↓p
.text:0040B880                                         ; sub_410FB0-446B↓p
.text:0040B880
.text:0040B880 Str             = dword ptr -6Ch
.text:0040B880 lpProcName      = dword ptr -68h
.text:0040B880 var_64          = dword ptr -64h
.text:0040B880 var_60          = dword ptr -60h
.text:0040B880 var_5C          = dword ptr -5Ch
.text:0040B880 var_4C          = dword ptr -4Ch
.text:0040B880 var_48          = dword ptr -48h
.text:0040B880 var_44          = dword ptr -44h
.text:0040B880 var_40          = dword ptr -40h
.text:0040B880 var_3C          = dword ptr -3Ch
.text:0040B880 var_38          = dword ptr -38h
.text:0040B880 lpRootPathName  = dword ptr -30h
.text:0040B880 var_2C          = byte ptr -2Ch
.text:0040B880 var_28          = dword ptr -28h
.text:0040B880 var_24          = dword ptr -24h
.text:0040B880 var_20          = dword ptr -20h
.text:0040B880 var_1C          = dword ptr -1Ch
.text:0040B880 var_18          = byte ptr -18h
.text:0040B880 String1         = dword ptr  4
.text:0040B880 arg_4           = dword ptr  8
.text:0040B880
.text:0040B880                 push    ebp
.text:0040B881                 push    edi
.text:0040B882                 push    esi
.text:0040B883                 push    ebx
.text:0040B884                 sub     esp, 5Ch
.text:0040B887                 mov     edx, [esp+6Ch+String1]
.text:0040B88B                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040B88E                 call    sub_40D430
.text:0040B893                 mov     [esp+6Ch+Str], eax
.text:0040B896                 call    sub_40D000
.text:0040B89B                 mov     [esp+6Ch+lpRootPathName], eax
.text:0040B89F                 test    eax, eax
.text:0040B8A1                 jz      loc_40BAD3
.text:0040B8A7                 mov     [esp+6Ch+Str], eax ; Str
.text:0040B8AA                 call    strlen
.text:0040B8AF                 mov     edx, [esp+6Ch+arg_4]
.text:0040B8B3                 mov     ebx, eax
.text:0040B8B5                 mov     esi, [edx+0Ch]
.text:0040B8B8                 mov     edi, [edx+8]
.text:0040B8BB                 mov     eax, esi
.text:0040B8BD                 or      eax, edi
.text:0040B8BF                 jz      loc_40BCE0
.text:0040B8C5                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:0040B8C9                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:0040B8CC                 call    GetDriveTypeA
.text:0040B8D1                 sub     esp, 4
.text:0040B8D4                 cmp     eax, 4
.text:0040B8D7                 jz      loc_40BCE0
.text:0040B8DD
.text:0040B8DD loc_40B8DD:                             ; CODE XREF: sub_40B880+48A↓j
.text:0040B8DD                                         ; sub_40B880+4B2↓j
.text:0040B8DD                 mov     edx, [esp+6Ch+arg_4]
.text:0040B8E1                 mov     esi, [edx+14h]
.text:0040B8E4                 mov     edi, [edx+10h]
.text:0040B8E7                 mov     ecx, esi
.text:0040B8E9                 or      ecx, edi
.text:0040B8EB                 jnz     short loc_40B915
.text:0040B8ED                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:0040B8F1                 xor     esi, esi
.text:0040B8F3                 xor     edi, edi
.text:0040B8F5                 test    ebp, ebp
.text:0040B8F7                 jz      short loc_40B907
.text:0040B8F9                 movzx   ebx, byte ptr [ebp+0]
.text:0040B8FD                 test    bl, bl
.text:0040B8FF                 mov     cl, bl
.text:0040B901                 jnz     loc_40BC91
.text:0040B907
.text:0040B907 loc_40B907:                             ; CODE XREF: sub_40B880+77↑j
.text:0040B907                 xor     eax, eax
.text:0040B909                 xor     edx, edx
.text:0040B90B
.text:0040B90B loc_40B90B:                             ; CODE XREF: sub_40B880+458↓j
.text:0040B90B                 mov     ebp, [esp+6Ch+arg_4]
.text:0040B90F                 mov     [ebp+10h], eax
.text:0040B912                 mov     [ebp+14h], edx
.text:0040B915
.text:0040B915 loc_40B915:                             ; CODE XREF: sub_40B880+6B↑j
.text:0040B915                 mov     edi, [esp+6Ch+String1]
.text:0040B919                 xor     ebx, ebx
.text:0040B91B                 test    edi, edi
.text:0040B91D                 jz      loc_40BB93
.text:0040B923                 mov     esi, [esp+6Ch+String1]
.text:0040B927                 cmp     byte ptr [esi], 0
.text:0040B92A                 jnz     loc_40BBA0
.text:0040B930
.text:0040B930 loc_40B930:                             ; CODE XREF: sub_40B880+38C↓j
.text:0040B930                                         ; sub_40B880+397↓j
.text:0040B930                 mov     ebp, [esp+6Ch+String1]
.text:0040B934                 test    ebp, ebp
.text:0040B936                 jz      loc_40BB93
.text:0040B93C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040B944                 mov     edi, [esp+6Ch+String1]
.text:0040B948                 mov     [esp+6Ch+Str], edi ; Str
.text:0040B94B                 call    strrchr
.text:0040B950                 test    eax, eax
.text:0040B952                 jz      loc_40BB93
.text:0040B958                 cld
.text:0040B959                 mov     ecx, 5
.text:0040B95E                 mov     esi, eax
.text:0040B960                 mov     edi, offset aLnk ; ".lnk"
.text:0040B965                 repe cmpsb
.text:0040B967                 setz    cl
.text:0040B96A                 movzx   eax, cl
.text:0040B96D                 lea     esi, [esi+0]
.text:0040B970
.text:0040B970 loc_40B970:                             ; CODE XREF: sub_40B880+315↓j
.text:0040B970                 test    eax, eax
.text:0040B972                 jz      short loc_40B97A
.text:0040B974                 or      ebx, 0A000h
.text:0040B97A
.text:0040B97A loc_40B97A:                             ; CODE XREF: sub_40B880+F2↑j
.text:0040B97A                 mov     esi, [esp+6Ch+arg_4]
.text:0040B97E                 xor     ecx, ecx
.text:0040B980                 mov     edi, ds:dword_415460
.text:0040B986                 or      [esi], ebx
.text:0040B988                 mov     ebx, [esi+14h]
.text:0040B98B                 mov     ebp, [esi+10h]
.text:0040B98E                 mov     eax, ebx
.text:0040B990                 xor     eax, ecx
.text:0040B992                 xor     ebp, edi
.text:0040B994                 or      eax, ebp
.text:0040B996                 jnz     loc_40BB20
.text:0040B99C
.text:0040B99C loc_40B99C:                             ; CODE XREF: sub_40B880+30E↓j
.text:0040B99C                 mov     ecx, dword_414070
.text:0040B9A2                 xor     esi, esi
.text:0040B9A4                 xor     edi, edi
.text:0040B9A6                 mov     edx, [esp+6Ch+arg_4]
.text:0040B9AA                 mov     [edx+50h], ecx
.text:0040B9AD                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:0040B9B4                 call    LoadLibraryA
.text:0040B9B9                 sub     esp, 4
.text:0040B9BC                 mov     ebp, eax
.text:0040B9BE                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040B9C6                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040B9C9                 call    GetProcAddress
.text:0040B9CE                 sub     esp, 8
.text:0040B9D1                 test    eax, eax
.text:0040B9D3                 jz      short loc_40BA08
.text:0040B9D5                 mov     ebx, [esp+6Ch+String1]
.text:0040B9D9                 lea     esi, [esp+6Ch+var_2C]
.text:0040B9DD                 mov     [esp+6Ch+lpProcName], esi
.text:0040B9E1                 mov     [esp+6Ch+Str], ebx
.text:0040B9E4                 call    eax
.text:0040B9E6                 sub     esp, 8
.text:0040B9E9                 mov     ebx, eax
.text:0040B9EB                 cmp     eax, 0FFFFFFFFh
.text:0040B9EE                 jz      loc_40BB09
.text:0040B9F4
.text:0040B9F4 loc_40B9F4:                             ; CODE XREF: sub_40B880+29A↓j
.text:0040B9F4                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:0040B9F8                 mov     ecx, ebx
.text:0040B9FA                 xor     edi, edi
.text:0040B9FC                 xor     ebx, ebx
.text:0040B9FE                 mov     edx, esi
.text:0040BA00                 mov     esi, ecx
.text:0040BA02                 or      esi, edi
.text:0040BA04                 mov     edi, ebx
.text:0040BA06                 or      edi, edx
.text:0040BA08
.text:0040BA08 loc_40BA08:                             ; CODE XREF: sub_40B880+153↑j
.text:0040BA08                                         ; sub_40B880+294↓j
.text:0040BA08                 test    ebp, ebp
.text:0040BA0A                 jz      short loc_40BA17
.text:0040BA0C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040BA0F                 call    FreeLibrary
.text:0040BA14                 sub     esp, 4
.text:0040BA17
.text:0040BA17 loc_40BA17:                             ; CODE XREF: sub_40B880+18A↑j
.text:0040BA17                 mov     ebp, edi
.text:0040BA19                 mov     edx, ebp
.text:0040BA1B                 mov     edi, esi
.text:0040BA1D                 or      edx, esi
.text:0040BA1F                 jnz     short loc_40BA2B
.text:0040BA21                 mov     eax, [esp+6Ch+arg_4]
.text:0040BA25                 mov     edi, [eax+30h]
.text:0040BA28                 mov     ebp, [eax+34h]
.text:0040BA2B
.text:0040BA2B loc_40BA2B:                             ; CODE XREF: sub_40B880+19F↑j
.text:0040BA2B                 mov     [esp+6Ch+lpProcName], ebp
.text:0040BA2F                 mov     ebx, dword_414070
.text:0040BA35                 xor     esi, esi
.text:0040BA37                 mov     [esp+6Ch+var_60], esi
.text:0040BA3B                 mov     [esp+6Ch+Str], edi
.text:0040BA3E                 mov     [esp+6Ch+var_64], ebx
.text:0040BA42                 call    sub_4129A0
.text:0040BA47                 mov     [esp+6Ch+var_3C], eax
.text:0040BA4B                 mov     ecx, dword_414070
.text:0040BA51                 mov     [esp+6Ch+lpProcName], ebp
.text:0040BA55                 mov     [esp+6Ch+var_38], edx
.text:0040BA59                 shr     ecx, 9
.text:0040BA5C                 mov     [esp+6Ch+var_44], ecx
.text:0040BA60                 mov     [esp+6Ch+var_40], 0
.text:0040BA68                 mov     [esp+6Ch+var_64], ebx
.text:0040BA6C                 mov     [esp+6Ch+var_60], esi
.text:0040BA70                 mov     [esp+6Ch+Str], edi
.text:0040BA73                 call    sub_412E10
.text:0040BA78                 mov     ebp, edx
.text:0040BA7A                 or      ebp, eax
.text:0040BA7C                 jz      short loc_40BAE0
.text:0040BA7E                 mov     ebp, [esp+6Ch+var_3C]
.text:0040BA82                 mov     esi, [esp+6Ch+var_38]
.text:0040BA86                 mov     eax, [esp+6Ch+var_44]
.text:0040BA8A                 mov     [esp+6Ch+var_4C], ebp
.text:0040BA8E                 mov     ecx, [esp+6Ch+var_40]
.text:0040BA92                 mov     ebx, [esp+6Ch+var_44]
.text:0040BA96                 add     [esp+6Ch+var_4C], 1
.text:0040BA9B                 mov     [esp+6Ch+var_48], esi
.text:0040BA9F                 mov     edi, [esp+6Ch+var_4C]
.text:0040BAA3                 adc     [esp+6Ch+var_48], 0
.text:0040BAA8                 mul     [esp+6Ch+var_4C]
.text:0040BAAC                 imul    ecx, edi
.text:0040BAAF                 mov     esi, eax
.text:0040BAB1                 mov     eax, [esp+6Ch+var_48]
.text:0040BAB5                 add     edx, ecx
.text:0040BAB7                 imul    ebx, eax
.text:0040BABA                 lea     edi, [ebx+edx]
.text:0040BABD
.text:0040BABD loc_40BABD:                             ; CODE XREF: sub_40B880+287↓j
.text:0040BABD                 mov     ebx, [esp+6Ch+arg_4]
.text:0040BAC1                 mov     [ebx+58h], esi
.text:0040BAC4                 mov     esi, [esp+6Ch+lpRootPathName]
.text:0040BAC8                 mov     [ebx+5Ch], edi
.text:0040BACB                 mov     [esp+6Ch+Str], esi ; Block
.text:0040BACE                 call    free
.text:0040BAD3
.text:0040BAD3 loc_40BAD3:                             ; CODE XREF: sub_40B880+21↑j
.text:0040BAD3                 add     esp, 5Ch
.text:0040BAD6                 xor     eax, eax
.text:0040BAD8                 pop     ebx
.text:0040BAD9                 pop     esi
.text:0040BADA                 pop     edi
.text:0040BADB                 pop     ebp
.text:0040BADC                 retn
.text:0040BADC ; ---------------------------------------------------------------------------
.text:0040BADD                 align 10h
.text:0040BAE0
.text:0040BAE0 loc_40BAE0:                             ; CODE XREF: sub_40B880+1FC↑j
.text:0040BAE0                 mov     eax, [esp+6Ch+var_3C]
.text:0040BAE4                 mov     edi, [esp+6Ch+var_40]
.text:0040BAE8                 mov     ecx, [esp+6Ch+var_3C]
.text:0040BAEC                 mul     [esp+6Ch+var_44]
.text:0040BAF0                 mov     ebx, [esp+6Ch+var_44]
.text:0040BAF4                 imul    ecx, edi
.text:0040BAF7                 mov     ebp, edx
.text:0040BAF9                 mov     esi, eax
.text:0040BAFB                 mov     edx, [esp+6Ch+var_38]
.text:0040BAFF                 add     ebp, ecx
.text:0040BB01                 imul    ebx, edx
.text:0040BB04                 lea     edi, [ebx+ebp]
.text:0040BB07                 jmp     short loc_40BABD
.text:0040BB09 ; ---------------------------------------------------------------------------
.text:0040BB09
.text:0040BB09 loc_40BB09:                             ; CODE XREF: sub_40B880+16E↑j
.text:0040BB09                 call    GetLastError
.text:0040BB0E                 xor     esi, esi
.text:0040BB10                 xor     edi, edi
.text:0040BB12                 test    eax, eax
.text:0040BB14                 jnz     loc_40BA08
.text:0040BB1A                 jmp     loc_40B9F4
.text:0040BB1A ; ---------------------------------------------------------------------------
.text:0040BB1F                 align 10h
.text:0040BB20
.text:0040BB20 loc_40BB20:                             ; CODE XREF: sub_40B880+116↑j
.text:0040BB20                 mov     edx, [esp+6Ch+lpRootPathName]
.text:0040BB24                 lea     ecx, [esp+6Ch+var_20]
.text:0040BB28                 lea     ebx, [esp+6Ch+var_1C]
.text:0040BB2C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:0040BB30                 lea     edi, [esp+6Ch+var_24]
.text:0040BB34                 lea     ebp, [esp+6Ch+var_28]
.text:0040BB38                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040BB3C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:0040BB40                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:0040BB44                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040BB47                 call    sub_40DE50
.text:0040BB4C                 test    eax, eax
.text:0040BB4E                 jnz     short loc_40BB70
.text:0040BB50                 mov     [esp+6Ch+var_28], 1
.text:0040BB58                 mov     [esp+6Ch+var_24], 200h
.text:0040BB60                 mov     [esp+6Ch+var_20], 0
.text:0040BB68                 mov     [esp+6Ch+var_1C], 0
.text:0040BB70
.text:0040BB70 loc_40BB70:                             ; CODE XREF: sub_40B880+2CE↑j
.text:0040BB70                 mov     ebp, [esp+6Ch+var_24]
.text:0040BB74                 mov     edi, [esp+6Ch+var_28]
.text:0040BB78                 mov     eax, [esp+6Ch+arg_4]
.text:0040BB7C                 imul    ebp, edi
.text:0040BB7F                 mov     esi, [eax+10h]
.text:0040BB82                 mov     dword_414070, ebp
.text:0040BB88                 mov     ds:dword_415460, esi
.text:0040BB8E                 jmp     loc_40B99C
.text:0040BB93 ; ---------------------------------------------------------------------------
.text:0040BB93
.text:0040BB93 loc_40BB93:                             ; CODE XREF: sub_40B880+9D↑j
.text:0040BB93                                         ; sub_40B880+B6↑j ...
.text:0040BB93                 xor     eax, eax
.text:0040BB95                 jmp     loc_40B970
.text:0040BB95 ; ---------------------------------------------------------------------------
.text:0040BB9A                 align 10h
.text:0040BBA0
.text:0040BBA0 loc_40BBA0:                             ; CODE XREF: sub_40B880+AA↑j
.text:0040BBA0                 mov     [esp+6Ch+Str], offset ModuleName ; "KERNEL32.DLL"
.text:0040BBA7                 xor     ebp, ebp
.text:0040BBA9                 call    GetModuleHandleA
.text:0040BBAE                 sub     esp, 4
.text:0040BBB1                 mov     edi, eax
.text:0040BBB3                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040BBBB                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040BBBE                 call    GetProcAddress
.text:0040BBC3                 sub     esp, 8
.text:0040BBC6                 mov     edx, eax
.text:0040BBC8                 test    eax, eax
.text:0040BBCA                 jz      short loc_40BBE4
.text:0040BBCC                 mov     eax, [esp+6Ch+String1]
.text:0040BBD0                 lea     ecx, [esp+6Ch+var_18]
.text:0040BBD4                 mov     [esp+6Ch+lpProcName], ecx
.text:0040BBD8                 mov     [esp+6Ch+Str], eax
.text:0040BBDB                 call    edx
.text:0040BBDD                 sub     esp, 8
.text:0040BBE0                 test    eax, eax
.text:0040BBE2                 jnz     short loc_40BC48
.text:0040BBE4
.text:0040BBE4 loc_40BBE4:                             ; CODE XREF: sub_40B880+34A↑j
.text:0040BBE4                 mov     edx, ds:Str
.text:0040BBEA                 test    edx, edx
.text:0040BBEC                 jz      short loc_40BC67
.text:0040BBEE
.text:0040BBEE loc_40BBEE:                             ; CODE XREF: sub_40B880+3FA↓j
.text:0040BBEE                                         ; sub_40B880+40C↓j
.text:0040BBEE                 mov     eax, [esp+6Ch+String1]
.text:0040BBF2                 test    eax, eax
.text:0040BBF4                 jz      short loc_40BBFF
.text:0040BBF6                 mov     esi, [esp+6Ch+String1]
.text:0040BBFA                 cmp     byte ptr [esi], 0
.text:0040BBFD                 jnz     short loc_40BC1C
.text:0040BBFF
.text:0040BBFF loc_40BBFF:                             ; CODE XREF: sub_40B880+374↑j
.text:0040BBFF                                         ; sub_40B880+3B0↓j ...
.text:0040BBFF                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:0040BC02                 call    FreeLibrary
.text:0040BC07                 sub     esp, 4
.text:0040BC0A                 test    ebp, ebp
.text:0040BC0C                 jz      loc_40B930
.text:0040BC12                 mov     ebx, 49h ; 'I'
.text:0040BC17                 jmp     loc_40B930
.text:0040BC1C ; ---------------------------------------------------------------------------
.text:0040BC1C
.text:0040BC1C loc_40BC1C:                             ; CODE XREF: sub_40B880+37D↑j
.text:0040BC1C                 mov     [esp+6Ch+Str], esi ; Str
.text:0040BC1F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040BC27                 call    strrchr
.text:0040BC2C                 test    eax, eax
.text:0040BC2E                 mov     esi, eax
.text:0040BC30                 jz      short loc_40BBFF
.text:0040BC32                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:0040BC36                 mov     ecx, ds:Str
.text:0040BC3C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040BC3F                 call    strstr
.text:0040BC44                 test    eax, eax
.text:0040BC46                 jz      short loc_40BC4F
.text:0040BC48
.text:0040BC48 loc_40BC48:                             ; CODE XREF: sub_40B880+362↑j
.text:0040BC48                                         ; sub_40B880+3E5↓j
.text:0040BC48                 mov     ebp, 1
.text:0040BC4D                 jmp     short loc_40BBFF
.text:0040BC4F ; ---------------------------------------------------------------------------
.text:0040BC4F
.text:0040BC4F loc_40BC4F:                             ; CODE XREF: sub_40B880+3C6↑j
.text:0040BC4F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:0040BC53                 mov     edx, off_414074 ; ".com;.exe;.bat;.cmd"
.text:0040BC59                 mov     [esp+6Ch+Str], edx ; Str
.text:0040BC5C                 call    strstr
.text:0040BC61                 test    eax, eax
.text:0040BC63                 jz      short loc_40BBFF
.text:0040BC65                 jmp     short loc_40BC48
.text:0040BC67 ; ---------------------------------------------------------------------------
.text:0040BC67
.text:0040BC67 loc_40BC67:                             ; CODE XREF: sub_40B880+36C↑j
.text:0040BC67                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0040BC6E                 call    getenv
.text:0040BC73                 mov     ds:Str, eax
.text:0040BC78                 test    eax, eax
.text:0040BC7A                 jnz     loc_40BBEE
.text:0040BC80                 mov     esi, off_414074 ; ".com;.exe;.bat;.cmd"
.text:0040BC86                 mov     ds:Str, esi
.text:0040BC8C                 jmp     loc_40BBEE
.text:0040BC91 ; ---------------------------------------------------------------------------
.text:0040BC91
.text:0040BC91 loc_40BC91:                             ; CODE XREF: sub_40B880+81↑j
.text:0040BC91                                         ; sub_40B880+452↓j
.text:0040BC91                 shld    edi, esi, 8
.text:0040BC95                 movsx   eax, cl
.text:0040BC98                 shl     esi, 8
.text:0040BC9B                 cdq
.text:0040BC9C                 add     esi, eax
.text:0040BC9E                 adc     edi, edx
.text:0040BCA0                 mov     edx, edi
.text:0040BCA2                 xor     ebx, ebx
.text:0040BCA4                 and     edx, 0FF000000h
.text:0040BCAA                 mov     eax, edx
.text:0040BCAC                 or      eax, ebx
.text:0040BCAE                 jz      short loc_40BCC9
.text:0040BCB0                 mov     ecx, edx
.text:0040BCB2                 xor     eax, eax
.text:0040BCB4                 shr     ecx, 10h
.text:0040BCB7                 mov     edx, esi
.text:0040BCB9                 xor     edx, ecx
.text:0040BCBB                 mov     ecx, edi
.text:0040BCBD                 xor     ecx, eax
.text:0040BCBF                 mov     esi, edx
.text:0040BCC1                 mov     edi, ecx
.text:0040BCC3                 and     edi, 0FFFFFFh
.text:0040BCC9
.text:0040BCC9 loc_40BCC9:                             ; CODE XREF: sub_40B880+42E↑j
.text:0040BCC9                 inc     ebp
.text:0040BCCA                 movzx   ebx, byte ptr [ebp+0]
.text:0040BCCE                 test    bl, bl
.text:0040BCD0                 mov     cl, bl
.text:0040BCD2                 jnz     short loc_40BC91
.text:0040BCD4                 mov     eax, esi
.text:0040BCD6                 mov     edx, edi
.text:0040BCD8                 jmp     loc_40B90B
.text:0040BCD8 ; ---------------------------------------------------------------------------
.text:0040BCDD                 align 10h
.text:0040BCE0
.text:0040BCE0 loc_40BCE0:                             ; CODE XREF: sub_40B880+3F↑j
.text:0040BCE0                                         ; sub_40B880+57↑j
.text:0040BCE0                 mov     edi, [esp+6Ch+lpRootPathName]
.text:0040BCE4                 mov     ebp, [esp+6Ch+String1]
.text:0040BCE8                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0040BCEC                 mov     [esp+6Ch+Str], ebp ; String1
.text:0040BCEF                 call    _stricmp
.text:0040BCF4                 test    eax, eax
.text:0040BCF6                 jnz     short loc_40BD10
.text:0040BCF8                 mov     ebx, [esp+6Ch+arg_4]
.text:0040BCFC                 mov     dword ptr [ebx+8], 5
.text:0040BD03                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040BD0A                 jmp     loc_40B8DD
.text:0040BD0A ; ---------------------------------------------------------------------------
.text:0040BD0F                 align 10h
.text:0040BD10
.text:0040BD10 loc_40BD10:                             ; CODE XREF: sub_40B880+476↑j
.text:0040BD10                 mov     ebp, [esp+6Ch+String1]
.text:0040BD14                 xor     esi, esi
.text:0040BD16                 xor     edi, edi
.text:0040BD18                 add     ebp, ebx
.text:0040BD1A                 jz      short loc_40BD24
.text:0040BD1C                 movzx   ecx, byte ptr [ebp+0]
.text:0040BD20                 test    cl, cl
.text:0040BD22                 jnz     short loc_40BD37
.text:0040BD24
.text:0040BD24 loc_40BD24:                             ; CODE XREF: sub_40B880+49A↑j
.text:0040BD24                 xor     eax, eax
.text:0040BD26                 xor     edx, edx
.text:0040BD28
.text:0040BD28 loc_40BD28:                             ; CODE XREF: sub_40B880+4FE↓j
.text:0040BD28                 mov     ebp, [esp+6Ch+arg_4]
.text:0040BD2C                 mov     [ebp+8], eax
.text:0040BD2F                 mov     [ebp+0Ch], edx
.text:0040BD32                 jmp     loc_40B8DD
.text:0040BD37 ; ---------------------------------------------------------------------------
.text:0040BD37
.text:0040BD37 loc_40BD37:                             ; CODE XREF: sub_40B880+4A2↑j
.text:0040BD37                                         ; sub_40B880+4F8↓j
.text:0040BD37                 shld    edi, esi, 8
.text:0040BD3B                 movsx   eax, cl
.text:0040BD3E                 shl     esi, 8
.text:0040BD41                 cdq
.text:0040BD42                 add     esi, eax
.text:0040BD44                 adc     edi, edx
.text:0040BD46                 mov     edx, edi
.text:0040BD48                 xor     ebx, ebx
.text:0040BD4A                 and     edx, 0FF000000h
.text:0040BD50                 mov     eax, edx
.text:0040BD52                 or      eax, ebx
.text:0040BD54                 jz      short loc_40BD6F
.text:0040BD56                 mov     ecx, edx
.text:0040BD58                 xor     eax, eax
.text:0040BD5A                 shr     ecx, 10h
.text:0040BD5D                 mov     edx, esi
.text:0040BD5F                 xor     edx, ecx
.text:0040BD61                 mov     ecx, edi
.text:0040BD63                 xor     ecx, eax
.text:0040BD65                 mov     esi, edx
.text:0040BD67                 mov     edi, ecx
.text:0040BD69                 and     edi, 0FFFFFFh
.text:0040BD6F
.text:0040BD6F loc_40BD6F:                             ; CODE XREF: sub_40B880+4D4↑j
.text:0040BD6F                 inc     ebp
.text:0040BD70                 movzx   ebx, byte ptr [ebp+0]
.text:0040BD74                 test    bl, bl
.text:0040BD76                 mov     cl, bl
.text:0040BD78                 jnz     short loc_40BD37
.text:0040BD7A                 mov     eax, esi
.text:0040BD7C                 mov     edx, edi
.text:0040BD7E                 jmp     short loc_40BD28
.text:0040BD7E sub_40B880      endp
.text:0040BD7E
.text:0040BD80
.text:0040BD80 ; =============== S U B R O U T I N E =======================================
.text:0040BD80
.text:0040BD80
.text:0040BD80 ; int __cdecl sub_40BD80(LPCSTR)
.text:0040BD80 sub_40BD80      proc near               ; CODE XREF: sub_40D550+CA↓p
.text:0040BD80
.text:0040BD80 lpRootPathName  = dword ptr -83Ch
.text:0040BD80 lpVolumeNameBuffer= dword ptr -838h
.text:0040BD80 nVolumeNameSize = dword ptr -834h
.text:0040BD80 lpVolumeSerialNumber= dword ptr -830h
.text:0040BD80 lpMaximumComponentLength= dword ptr -82Ch
.text:0040BD80 lpFileSystemFlags= dword ptr -828h
.text:0040BD80 lpFileSystemNameBuffer= dword ptr -824h
.text:0040BD80 nFileSystemNameSize= dword ptr -820h
.text:0040BD80 VolumeSerialNumber= dword ptr -818h
.text:0040BD80 MaximumComponentLength= dword ptr -814h
.text:0040BD80 FileSystemFlags = dword ptr -810h
.text:0040BD80 FileSystemNameBuffer= byte ptr -80Ch
.text:0040BD80 VolumeNameBuffer= byte ptr -40Ch
.text:0040BD80 var_4           = dword ptr -4
.text:0040BD80 arg_0           = dword ptr  4
.text:0040BD80
.text:0040BD80                 sub     esp, 83Ch
.text:0040BD86                 mov     [esp+83Ch+var_4], ebx
.text:0040BD8D                 mov     ebx, [esp+83Ch+arg_0]
.text:0040BD94                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:0040BD97                 call    sub_40D430
.text:0040BD9C                 mov     [esp+83Ch+lpRootPathName], eax
.text:0040BD9F                 call    sub_40D000
.text:0040BDA4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:0040BDA7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:0040BDAB                 mov     ebx, eax
.text:0040BDAD                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:0040BDB1                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:0040BDB5                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:0040BDB9                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:0040BDBD                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:0040BDC1                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040BDC5                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:0040BDCC                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040BDD0                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:0040BDD4                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040BDDC                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040BDE4                 call    GetVolumeInformationA
.text:0040BDE9                 sub     esp, 20h
.text:0040BDEC                 test    eax, eax
.text:0040BDEE                 setz    cl
.text:0040BDF1                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:0040BDF4                 movzx   edx, cl
.text:0040BDF7                 dec     edx
.text:0040BDF8                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0040BDFC                 call    free
.text:0040BE01                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:0040BE05                 mov     ebx, [esp+83Ch+var_4]
.text:0040BE0C                 add     esp, 83Ch
.text:0040BE12                 retn
.text:0040BE12 sub_40BD80      endp
.text:0040BE12
.text:0040BE12 ; ---------------------------------------------------------------------------
.text:0040BE13                 align 10h
.text:0040BE20                 push    ebp
.text:0040BE21                 push    edi
.text:0040BE22                 xor     edi, edi
.text:0040BE24                 push    esi
.text:0040BE25                 xor     esi, esi
.text:0040BE27                 push    ebx
.text:0040BE28                 mov     ebp, [esp+14h]
.text:0040BE2C                 test    ebp, ebp
.text:0040BE2E                 jz      short loc_40BE38
.text:0040BE30                 movzx   ecx, byte ptr [ebp+0]
.text:0040BE34                 test    cl, cl
.text:0040BE36                 jnz     short loc_40BE41
.text:0040BE38
.text:0040BE38 loc_40BE38:                             ; CODE XREF: .text:0040BE2E↑j
.text:0040BE38                 xor     eax, eax
.text:0040BE3A                 xor     edx, edx
.text:0040BE3C
.text:0040BE3C loc_40BE3C:                             ; CODE XREF: .text:0040BE88↓j
.text:0040BE3C                 pop     ebx
.text:0040BE3D                 pop     esi
.text:0040BE3E                 pop     edi
.text:0040BE3F                 pop     ebp
.text:0040BE40                 retn
.text:0040BE41 ; ---------------------------------------------------------------------------
.text:0040BE41
.text:0040BE41 loc_40BE41:                             ; CODE XREF: .text:0040BE36↑j
.text:0040BE41                                         ; .text:0040BE82↓j
.text:0040BE41                 shld    edi, esi, 8
.text:0040BE45                 movsx   eax, cl
.text:0040BE48                 shl     esi, 8
.text:0040BE4B                 cdq
.text:0040BE4C                 add     esi, eax
.text:0040BE4E                 adc     edi, edx
.text:0040BE50                 mov     edx, edi
.text:0040BE52                 xor     ebx, ebx
.text:0040BE54                 and     edx, 0FF000000h
.text:0040BE5A                 mov     eax, edx
.text:0040BE5C                 or      eax, ebx
.text:0040BE5E                 jz      short loc_40BE79
.text:0040BE60                 mov     ecx, edx
.text:0040BE62                 xor     eax, eax
.text:0040BE64                 shr     ecx, 10h
.text:0040BE67                 mov     edx, esi
.text:0040BE69                 xor     edx, ecx
.text:0040BE6B                 mov     ecx, edi
.text:0040BE6D                 xor     ecx, eax
.text:0040BE6F                 mov     esi, edx
.text:0040BE71                 mov     edi, ecx
.text:0040BE73                 and     edi, 0FFFFFFh
.text:0040BE79
.text:0040BE79 loc_40BE79:                             ; CODE XREF: .text:0040BE5E↑j
.text:0040BE79                 inc     ebp
.text:0040BE7A                 movzx   ebx, byte ptr [ebp+0]
.text:0040BE7E                 test    bl, bl
.text:0040BE80                 mov     cl, bl
.text:0040BE82                 jnz     short loc_40BE41
.text:0040BE84                 mov     eax, esi
.text:0040BE86                 mov     edx, edi
.text:0040BE88                 jmp     short loc_40BE3C
.text:0040BE88 ; ---------------------------------------------------------------------------
.text:0040BE8A                 align 10h
.text:0040BE90                 sub     esp, 2Ch
.text:0040BE93                 lea     edx, [esp+24h]
.text:0040BE97                 lea     ecx, [esp+28h]
.text:0040BE9B                 mov     [esp+0Ch], edx
.text:0040BE9F                 lea     edx, [esp+1Ch]
.text:0040BEA3                 mov     [esp+4], edx
.text:0040BEA7                 mov     edx, [esp+30h]
.text:0040BEAB                 mov     [esp+10h], ecx
.text:0040BEAF                 lea     ecx, [esp+20h]
.text:0040BEB3                 mov     [esp+8], ecx
.text:0040BEB7                 mov     [esp], edx
.text:0040BEBA                 call    sub_40DE50
.text:0040BEBF                 test    eax, eax
.text:0040BEC1                 jnz     short loc_40BEE3
.text:0040BEC3                 mov     dword ptr [esp+1Ch], 1
.text:0040BECB                 mov     dword ptr [esp+20h], 200h
.text:0040BED3                 mov     dword ptr [esp+24h], 0
.text:0040BEDB                 mov     dword ptr [esp+28h], 0
.text:0040BEE3
.text:0040BEE3 loc_40BEE3:                             ; CODE XREF: .text:0040BEC1↑j
.text:0040BEE3                 mov     eax, [esp+20h]
.text:0040BEE7                 mov     ecx, [esp+1Ch]
.text:0040BEEB                 add     esp, 2Ch
.text:0040BEEE                 imul    eax, ecx
.text:0040BEF1                 retn
.text:0040BEF1 ; ---------------------------------------------------------------------------
.text:0040BEF2                 align 10h
.text:0040BF00                 sub     esp, 1Ch
.text:0040BF03                 mov     eax, [esp+20h]
.text:0040BF07                 mov     [esp+14h], esi
.text:0040BF0B                 mov     [esp+18h], edi
.text:0040BF0F                 test    eax, eax
.text:0040BF11                 jz      short loc_40BF50
.text:0040BF13                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040BF1B                 mov     [esp], eax
.text:0040BF1E                 call    strrchr
.text:0040BF23                 test    eax, eax
.text:0040BF25                 jz      short loc_40BF50
.text:0040BF27                 cld
.text:0040BF28                 mov     esi, eax
.text:0040BF2A                 mov     edi, offset aLnk ; ".lnk"
.text:0040BF2F                 mov     ecx, 5
.text:0040BF34                 repe cmpsb
.text:0040BF36                 setz    dl
.text:0040BF39                 movzx   eax, dl
.text:0040BF3C                 lea     esi, [esi+0]
.text:0040BF40
.text:0040BF40 loc_40BF40:                             ; CODE XREF: .text:0040BF52↓j
.text:0040BF40                 mov     esi, [esp+14h]
.text:0040BF44                 mov     edi, [esp+18h]
.text:0040BF48                 add     esp, 1Ch
.text:0040BF4B                 retn
.text:0040BF4B ; ---------------------------------------------------------------------------
.text:0040BF4C                 align 10h
.text:0040BF50
.text:0040BF50 loc_40BF50:                             ; CODE XREF: .text:0040BF11↑j
.text:0040BF50                                         ; .text:0040BF25↑j
.text:0040BF50                 xor     eax, eax
.text:0040BF52                 jmp     short loc_40BF40
.text:0040BF52 ; ---------------------------------------------------------------------------
.text:0040BF54                 align 10h
.text:0040BF60                 sub     esp, 1Ch
.text:0040BF63                 mov     [esp+10h], ebx
.text:0040BF67                 mov     ebx, [esp+20h]
.text:0040BF6B                 mov     [esp+14h], esi
.text:0040BF6F                 mov     [esp+18h], edi
.text:0040BF73                 xor     edi, edi
.text:0040BF75                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:0040BF7C                 call    GetModuleHandleA
.text:0040BF81                 sub     esp, 4
.text:0040BF84                 mov     esi, eax
.text:0040BF86                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040BF8E                 mov     [esp], eax
.text:0040BF91                 call    GetProcAddress
.text:0040BF96                 sub     esp, 8
.text:0040BF99                 test    eax, eax
.text:0040BF9B                 jz      short loc_40BFB1
.text:0040BF9D                 mov     [esp], ebx
.text:0040BFA0                 lea     ecx, [esp+0Ch]
.text:0040BFA4                 mov     [esp+4], ecx
.text:0040BFA8                 call    eax
.text:0040BFAA                 sub     esp, 8
.text:0040BFAD                 test    eax, eax
.text:0040BFAF                 jnz     short loc_40C010
.text:0040BFB1
.text:0040BFB1 loc_40BFB1:                             ; CODE XREF: .text:0040BF9B↑j
.text:0040BFB1                 mov     eax, ds:Str
.text:0040BFB6                 test    eax, eax
.text:0040BFB8                 jz      short loc_40C030
.text:0040BFBA
.text:0040BFBA loc_40BFBA:                             ; CODE XREF: .text:0040C043↓j
.text:0040BFBA                                         ; .text:0040C055↓j
.text:0040BFBA                 test    ebx, ebx
.text:0040BFBC                 jz      short loc_40BFC3
.text:0040BFBE                 cmp     byte ptr [ebx], 0
.text:0040BFC1                 jnz     short loc_40BFE0
.text:0040BFC3
.text:0040BFC3 loc_40BFC3:                             ; CODE XREF: .text:0040BFBC↑j
.text:0040BFC3                                         ; .text:0040BFF4↓j ...
.text:0040BFC3                 mov     [esp], esi
.text:0040BFC6                 call    FreeLibrary
.text:0040BFCB                 sub     esp, 4
.text:0040BFCE                 mov     eax, edi
.text:0040BFD0                 mov     ebx, [esp+10h]
.text:0040BFD4                 mov     esi, [esp+14h]
.text:0040BFD8                 mov     edi, [esp+18h]
.text:0040BFDC                 add     esp, 1Ch
.text:0040BFDF                 retn
.text:0040BFE0 ; ---------------------------------------------------------------------------
.text:0040BFE0
.text:0040BFE0 loc_40BFE0:                             ; CODE XREF: .text:0040BFC1↑j
.text:0040BFE0                 mov     [esp], ebx
.text:0040BFE3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040BFEB                 call    strrchr
.text:0040BFF0                 test    eax, eax
.text:0040BFF2                 mov     ebx, eax
.text:0040BFF4                 jz      short loc_40BFC3
.text:0040BFF6                 mov     [esp+4], eax
.text:0040BFFA                 mov     ecx, ds:Str
.text:0040C000                 mov     [esp], ecx
.text:0040C003                 call    strstr
.text:0040C008                 test    eax, eax
.text:0040C00A                 jz      short loc_40C017
.text:0040C00C                 lea     esi, [esi+0]
.text:0040C010
.text:0040C010 loc_40C010:                             ; CODE XREF: .text:0040BFAF↑j
.text:0040C010                                         ; .text:0040C02D↓j
.text:0040C010                 mov     edi, 1
.text:0040C015                 jmp     short loc_40BFC3
.text:0040C017 ; ---------------------------------------------------------------------------
.text:0040C017
.text:0040C017 loc_40C017:                             ; CODE XREF: .text:0040C00A↑j
.text:0040C017                 mov     [esp+4], ebx
.text:0040C01B                 mov     ebx, off_414074 ; ".com;.exe;.bat;.cmd"
.text:0040C021                 mov     [esp], ebx
.text:0040C024                 call    strstr
.text:0040C029                 test    eax, eax
.text:0040C02B                 jz      short loc_40BFC3
.text:0040C02D                 jmp     short loc_40C010
.text:0040C02D ; ---------------------------------------------------------------------------
.text:0040C02F                 align 10h
.text:0040C030
.text:0040C030 loc_40C030:                             ; CODE XREF: .text:0040BFB8↑j
.text:0040C030                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040C037                 call    getenv
.text:0040C03C                 mov     ds:Str, eax
.text:0040C041                 test    eax, eax
.text:0040C043                 jnz     loc_40BFBA
.text:0040C049                 mov     edx, off_414074 ; ".com;.exe;.bat;.cmd"
.text:0040C04F                 mov     ds:Str, edx
.text:0040C055                 jmp     loc_40BFBA
.text:0040C055 ; ---------------------------------------------------------------------------
.text:0040C05A                 align 10h
.text:0040C060                 sub     esp, 0Ch
.text:0040C063                 mov     edx, [esp+10h]
.text:0040C067                 mov     [esp], edx
.text:0040C06A                 call    GetFileType
.text:0040C06F                 sub     esp, 4
.text:0040C072                 xor     edx, edx
.text:0040C074                 cmp     eax, 2
.text:0040C077                 jz      short loc_40C090
.text:0040C079                 cmp     eax, 3
.text:0040C07C                 jz      short loc_40C084
.text:0040C07E
.text:0040C07E loc_40C07E:                             ; CODE XREF: .text:0040C089↓j
.text:0040C07E                                         ; .text:0040C095↓j
.text:0040C07E                 mov     eax, edx
.text:0040C080                 add     esp, 0Ch
.text:0040C083                 retn
.text:0040C084 ; ---------------------------------------------------------------------------
.text:0040C084
.text:0040C084 loc_40C084:                             ; CODE XREF: .text:0040C07C↑j
.text:0040C084                 mov     edx, 1000h
.text:0040C089                 jmp     short loc_40C07E
.text:0040C089 ; ---------------------------------------------------------------------------
.text:0040C08B                 align 10h
.text:0040C090
.text:0040C090 loc_40C090:                             ; CODE XREF: .text:0040C077↑j
.text:0040C090                 mov     edx, 2000h
.text:0040C095                 jmp     short loc_40C07E
.text:0040C095 ; ---------------------------------------------------------------------------
.text:0040C097                 align 10h
.text:0040C0A0                 mov     ecx, [esp+4]
.text:0040C0A4                 xor     edx, edx
.text:0040C0A6                 test    cl, 10h
.text:0040C0A9                 setz    dl
.text:0040C0AC                 dec     edx
.text:0040C0AD                 and     edx, 0FFFFC000h
.text:0040C0B3                 add     edx, 8000h
.text:0040C0B9                 or      edx, 124h
.text:0040C0BF                 test    cl, 1
.text:0040C0C2                 movzx   eax, dx
.text:0040C0C5                 jnz     short locret_40C0CC
.text:0040C0C7                 or      eax, 92h
.text:0040C0CC
.text:0040C0CC locret_40C0CC:                          ; CODE XREF: .text:0040C0C5↑j
.text:0040C0CC                 retn
.text:0040C0CC ; ---------------------------------------------------------------------------
.text:0040C0CD                 align 10h
.text:0040C0D0                 sub     esp, 2Ch
.text:0040C0D3                 mov     [esp+20h], esi
.text:0040C0D7                 mov     esi, [esp+30h]
.text:0040C0DB                 mov     [esp+1Ch], ebx
.text:0040C0DF                 xor     ebx, ebx
.text:0040C0E1                 test    esi, esi
.text:0040C0E3                 mov     [esp+24h], edi
.text:0040C0E7                 mov     [esp+28h], ebp
.text:0040C0EB                 jz      short loc_40C140
.text:0040C0ED                 cmp     byte ptr [esi], 0
.text:0040C0F0                 jnz     short loc_40C144
.text:0040C0F2
.text:0040C0F2 loc_40C0F2:                             ; CODE XREF: .text:0040C1AC↓j
.text:0040C0F2                                         ; .text:0040C1B7↓j
.text:0040C0F2                 test    esi, esi
.text:0040C0F4                 jz      short loc_40C140
.text:0040C0F6                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040C0FE                 mov     [esp], esi
.text:0040C101                 call    strrchr
.text:0040C106                 test    eax, eax
.text:0040C108                 jz      short loc_40C140
.text:0040C10A                 cld
.text:0040C10B                 mov     ecx, 5
.text:0040C110                 mov     esi, eax
.text:0040C112                 mov     edi, offset aLnk ; ".lnk"
.text:0040C117                 repe cmpsb
.text:0040C119                 setz    cl
.text:0040C11C                 movzx   eax, cl
.text:0040C11F                 nop
.text:0040C120
.text:0040C120 loc_40C120:                             ; CODE XREF: .text:0040C142↓j
.text:0040C120                 test    eax, eax
.text:0040C122                 jz      short loc_40C12A
.text:0040C124                 or      ebx, 0A000h
.text:0040C12A
.text:0040C12A loc_40C12A:                             ; CODE XREF: .text:0040C122↑j
.text:0040C12A                 mov     eax, ebx
.text:0040C12C                 mov     esi, [esp+20h]
.text:0040C130                 mov     ebx, [esp+1Ch]
.text:0040C134                 mov     edi, [esp+24h]
.text:0040C138                 mov     ebp, [esp+28h]
.text:0040C13C                 add     esp, 2Ch
.text:0040C13F                 retn
.text:0040C140 ; ---------------------------------------------------------------------------
.text:0040C140
.text:0040C140 loc_40C140:                             ; CODE XREF: .text:0040C0EB↑j
.text:0040C140                                         ; .text:0040C0F4↑j ...
.text:0040C140                 xor     eax, eax
.text:0040C142                 jmp     short loc_40C120
.text:0040C144 ; ---------------------------------------------------------------------------
.text:0040C144
.text:0040C144 loc_40C144:                             ; CODE XREF: .text:0040C0F0↑j
.text:0040C144                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:0040C14B                 call    GetModuleHandleA
.text:0040C150                 sub     esp, 4
.text:0040C153                 mov     ebp, eax
.text:0040C155                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040C15D                 mov     [esp], eax
.text:0040C160                 call    GetProcAddress
.text:0040C165                 sub     esp, 8
.text:0040C168                 test    eax, eax
.text:0040C16A                 mov     dword ptr [esp+14h], 0
.text:0040C172                 jz      short loc_40C188
.text:0040C174                 mov     [esp], esi
.text:0040C177                 lea     ecx, [esp+18h]
.text:0040C17B                 mov     [esp+4], ecx
.text:0040C17F                 call    eax
.text:0040C181                 sub     esp, 8
.text:0040C184                 test    eax, eax
.text:0040C186                 jnz     short loc_40C1E8
.text:0040C188
.text:0040C188 loc_40C188:                             ; CODE XREF: .text:0040C172↑j
.text:0040C188                 mov     edx, ds:Str
.text:0040C18E                 test    edx, edx
.text:0040C190                 jz      short loc_40C210
.text:0040C192
.text:0040C192 loc_40C192:                             ; CODE XREF: .text:0040C223↓j
.text:0040C192                                         ; .text:0040C235↓j
.text:0040C192                 test    esi, esi
.text:0040C194                 jz      short loc_40C19B
.text:0040C196                 cmp     byte ptr [esi], 0
.text:0040C199                 jnz     short loc_40C1BC
.text:0040C19B
.text:0040C19B loc_40C19B:                             ; CODE XREF: .text:0040C194↑j
.text:0040C19B                                         ; .text:0040C1D0↓j ...
.text:0040C19B                 mov     [esp], ebp
.text:0040C19E                 call    FreeLibrary
.text:0040C1A3                 sub     esp, 4
.text:0040C1A6                 mov     eax, [esp+14h]
.text:0040C1AA                 test    eax, eax
.text:0040C1AC                 jz      loc_40C0F2
.text:0040C1B2                 mov     ebx, 49h ; 'I'
.text:0040C1B7                 jmp     loc_40C0F2
.text:0040C1BC ; ---------------------------------------------------------------------------
.text:0040C1BC
.text:0040C1BC loc_40C1BC:                             ; CODE XREF: .text:0040C199↑j
.text:0040C1BC                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040C1C4                 mov     [esp], esi
.text:0040C1C7                 call    strrchr
.text:0040C1CC                 test    eax, eax
.text:0040C1CE                 mov     edi, eax
.text:0040C1D0                 jz      short loc_40C19B
.text:0040C1D2                 mov     [esp+4], eax
.text:0040C1D6                 mov     edx, ds:Str
.text:0040C1DC                 mov     [esp], edx
.text:0040C1DF                 call    strstr
.text:0040C1E4                 test    eax, eax
.text:0040C1E6                 jz      short loc_40C1F2
.text:0040C1E8
.text:0040C1E8 loc_40C1E8:                             ; CODE XREF: .text:0040C186↑j
.text:0040C1E8                                         ; .text:0040C208↓j
.text:0040C1E8                 mov     dword ptr [esp+14h], 1
.text:0040C1F0                 jmp     short loc_40C19B
.text:0040C1F2 ; ---------------------------------------------------------------------------
.text:0040C1F2
.text:0040C1F2 loc_40C1F2:                             ; CODE XREF: .text:0040C1E6↑j
.text:0040C1F2                 mov     [esp+4], edi
.text:0040C1F6                 mov     edi, off_414074 ; ".com;.exe;.bat;.cmd"
.text:0040C1FC                 mov     [esp], edi
.text:0040C1FF                 call    strstr
.text:0040C204                 test    eax, eax
.text:0040C206                 jz      short loc_40C19B
.text:0040C208                 jmp     short loc_40C1E8
.text:0040C208 ; ---------------------------------------------------------------------------
.text:0040C20A                 align 10h
.text:0040C210
.text:0040C210 loc_40C210:                             ; CODE XREF: .text:0040C190↑j
.text:0040C210                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040C217                 call    getenv
.text:0040C21C                 mov     ds:Str, eax
.text:0040C221                 test    eax, eax
.text:0040C223                 jnz     loc_40C192
.text:0040C229                 mov     ecx, off_414074 ; ".com;.exe;.bat;.cmd"
.text:0040C22F                 mov     ds:Str, ecx
.text:0040C235                 jmp     loc_40C192
.text:0040C235 ; ---------------------------------------------------------------------------
.text:0040C23A                 align 10h
.text:0040C240                 push    esi
.text:0040C241                 push    ebx
.text:0040C242                 sub     esp, 864h
.text:0040C248                 mov     ebx, [esp+870h]
.text:0040C24F                 lea     edx, [esp+830h]
.text:0040C256                 mov     esi, [esp+874h]
.text:0040C25D                 mov     [esp+4], edx
.text:0040C261                 mov     [esp], ebx
.text:0040C264                 call    loc_40B0C0
.text:0040C269                 xor     edx, edx
.text:0040C26B                 test    eax, eax
.text:0040C26D                 jz      loc_40C355
.text:0040C273                 mov     ecx, [esp+830h]
.text:0040C27A                 test    cl, 10h
.text:0040C27D                 mov     [esi], ecx
.text:0040C27F                 mov     eax, [esp+834h]
.text:0040C286                 mov     edx, [esp+838h]
.text:0040C28D                 mov     [esi+4], eax
.text:0040C290                 mov     [esi+8], edx
.text:0040C293                 mov     eax, [esp+83Ch]
.text:0040C29A                 mov     edx, [esp+840h]
.text:0040C2A1                 mov     [esi+0Ch], eax
.text:0040C2A4                 mov     [esi+10h], edx
.text:0040C2A7                 mov     edx, [esp+848h]
.text:0040C2AE                 mov     eax, [esp+844h]
.text:0040C2B5                 mov     [esi+18h], edx
.text:0040C2B8                 mov     [esi+14h], eax
.text:0040C2BB                 mov     edx, [esp+84Ch]
.text:0040C2C2                 mov     [esi+20h], edx
.text:0040C2C5                 mov     edx, [esp+850h]
.text:0040C2CC                 mov     [esi+24h], edx
.text:0040C2CF                 jnz     loc_40C360
.text:0040C2D5                 mov     dword ptr [esi+28h], 1
.text:0040C2DC
.text:0040C2DC loc_40C2DC:                             ; CODE XREF: .text:0040C36B↓j
.text:0040C2DC                 mov     [esp], ebx
.text:0040C2DF                 call    sub_40D430
.text:0040C2E4                 mov     [esp], eax
.text:0040C2E7                 call    sub_40D000
.text:0040C2EC                 mov     [esp], eax
.text:0040C2EF                 lea     edx, [esp+30h]
.text:0040C2F3                 mov     ebx, eax
.text:0040C2F5                 mov     [esp+18h], edx
.text:0040C2F9                 lea     ecx, [esp+2Ch]
.text:0040C2FD                 lea     edx, [esp+28h]
.text:0040C301                 mov     [esp+14h], ecx
.text:0040C305                 lea     ecx, [esp+24h]
.text:0040C309                 mov     [esp+10h], edx
.text:0040C30D                 lea     edx, [esp+430h]
.text:0040C314                 mov     [esp+0Ch], ecx
.text:0040C318                 mov     [esp+4], edx
.text:0040C31C                 mov     dword ptr [esp+1Ch], 400h
.text:0040C324                 mov     dword ptr [esp+8], 400h
.text:0040C32C                 call    GetVolumeInformationA
.text:0040C331                 sub     esp, 20h
.text:0040C334                 test    eax, eax
.text:0040C336                 setz    cl
.text:0040C339                 mov     [esp], ebx
.text:0040C33C                 movzx   edx, cl
.text:0040C33F                 dec     edx
.text:0040C340                 and     [esp+24h], edx
.text:0040C344                 call    free
.text:0040C349                 mov     ecx, [esp+24h]
.text:0040C34D                 mov     edx, 1
.text:0040C352                 mov     [esi+1Ch], ecx
.text:0040C355
.text:0040C355 loc_40C355:                             ; CODE XREF: .text:0040C26D↑j
.text:0040C355                 add     esp, 864h
.text:0040C35B                 mov     eax, edx
.text:0040C35D                 pop     ebx
.text:0040C35E                 pop     esi
.text:0040C35F                 retn
.text:0040C360 ; ---------------------------------------------------------------------------
.text:0040C360
.text:0040C360 loc_40C360:                             ; CODE XREF: .text:0040C2CF↑j
.text:0040C360                 mov     [esp], ebx
.text:0040C363                 call    loc_40B230
.text:0040C368                 mov     [esi+28h], eax
.text:0040C36B                 jmp     loc_40C2DC
.text:0040C370 ; ---------------------------------------------------------------------------
.text:0040C370                 push    ebp
.text:0040C371                 xor     edx, edx
.text:0040C373                 push    edi
.text:0040C374                 push    esi
.text:0040C375                 xor     esi, esi
.text:0040C377                 push    ebx
.text:0040C378                 sub     esp, 1Ch
.text:0040C37B                 mov     ebx, [esp+5Ch]
.text:0040C37F                 mov     ecx, [esp+30h]
.text:0040C383                 mov     edi, [esp+60h]
.text:0040C387                 or      esi, ebx
.text:0040C389                 mov     eax, [esp+4Ch]
.text:0040C38D                 or      edi, edx
.text:0040C38F                 mov     ebx, [esp+64h]
.text:0040C393                 xor     edx, edx
.text:0040C395                 test    cl, 10h
.text:0040C398                 setz    dl
.text:0040C39B                 mov     [ebx+10h], eax
.text:0040C39E                 mov     [ebx+8], edi
.text:0040C3A1                 mov     [ebx+0Ch], esi
.text:0040C3A4                 dec     edx
.text:0040C3A5                 and     edx, 0FFFFC000h
.text:0040C3AB                 mov     dword ptr [ebx+14h], 0
.text:0040C3B2                 add     edx, 8000h
.text:0040C3B8                 or      edx, 124h
.text:0040C3BE                 test    cl, 1
.text:0040C3C1                 movzx   eax, dx
.text:0040C3C4                 jnz     short loc_40C3CB
.text:0040C3C6                 or      eax, 92h
.text:0040C3CB
.text:0040C3CB loc_40C3CB:                             ; CODE XREF: .text:0040C3C4↑j
.text:0040C3CB                 mov     ebx, [esp+54h]
.text:0040C3CF                 xor     edx, edx
.text:0040C3D1                 xor     ebp, ebp
.text:0040C3D3                 mov     edi, [esp+50h]
.text:0040C3D7                 mov     ecx, [esp+64h]
.text:0040C3DB                 mov     esi, edi
.text:0040C3DD                 or      [ecx], eax
.text:0040C3DF                 mov     edi, ebx
.text:0040C3E1                 or      edi, ebp
.text:0040C3E3                 mov     ebp, edx
.text:0040C3E5                 mov     ebx, [esp+64h]
.text:0040C3E9                 or      ebp, esi
.text:0040C3EB                 mov     esi, [esp+58h]
.text:0040C3EF                 mov     edx, [esp+40h]
.text:0040C3F3                 mov     [ebx+30h], edi
.text:0040C3F6                 mov     [ebx+18h], esi
.text:0040C3F9                 mov     ecx, edx
.text:0040C3FB                 xor     esi, esi
.text:0040C3FD                 mov     [ebx+34h], ebp
.text:0040C400                 xor     edx, edx
.text:0040C402                 or      esi, ecx
.text:0040C404                 mov     dword ptr [esp+8], 989680h
.text:0040C40C                 mov     ebx, [esp+3Ch]
.text:0040C410                 mov     ecx, esi
.text:0040C412                 mov     dword ptr [esp+0Ch], 0
.text:0040C41A                 or      ebx, edx
.text:0040C41C                 mov     edx, ebx
.text:0040C41E                 sub     edx, 0D53E8000h
.text:0040C424                 sbb     ecx, 19DB1DEh
.text:0040C42A                 mov     [esp+4], ecx
.text:0040C42E                 mov     [esp], edx
.text:0040C431                 call    sub_4129A0
.text:0040C436                 mov     edx, eax
.text:0040C438                 mov     ecx, [esp+64h]
.text:0040C43C                 shr     eax, 1Fh
.text:0040C43F                 dec     eax
.text:0040C440                 and     edx, eax
.text:0040C442                 mov     [ecx+38h], edx
.text:0040C445                 mov     [esp], ebx
.text:0040C448                 mov     [esp+4], esi
.text:0040C44C                 mov     dword ptr [esp+8], 989680h
.text:0040C454                 mov     dword ptr [esp+0Ch], 0
.text:0040C45C                 call    sub_412E10
.text:0040C461                 lea     ecx, [eax+eax*4]
.text:0040C464                 lea     esi, [ecx+ecx*4]
.text:0040C467                 mov     eax, [esp+64h]
.text:0040C46B                 shl     esi, 2
.text:0040C46E                 mov     ebx, esi
.text:0040C470                 shr     ebx, 1Fh
.text:0040C473                 dec     ebx
.text:0040C474                 and     ebx, esi
.text:0040C476                 xor     esi, esi
.text:0040C478                 mov     [eax+3Ch], ebx
.text:0040C47B                 mov     edx, [esp+38h]
.text:0040C47F                 mov     dword ptr [esp+8], 989680h
.text:0040C487                 mov     ebx, [esp+34h]
.text:0040C48B                 mov     dword ptr [esp+0Ch], 0
.text:0040C493                 mov     ecx, edx
.text:0040C495                 xor     edx, edx
.text:0040C497                 or      ebx, edx
.text:0040C499                 or      esi, ecx
.text:0040C49B                 mov     edx, ebx
.text:0040C49D                 sub     edx, 0D53E8000h
.text:0040C4A3                 mov     ecx, esi
.text:0040C4A5                 sbb     ecx, 19DB1DEh
.text:0040C4AB                 mov     [esp+4], ecx
.text:0040C4AF                 mov     [esp], edx
.text:0040C4B2                 call    sub_4129A0
.text:0040C4B7                 mov     edx, eax
.text:0040C4B9                 mov     ecx, [esp+64h]
.text:0040C4BD                 shr     eax, 1Fh
.text:0040C4C0                 dec     eax
.text:0040C4C1                 and     edx, eax
.text:0040C4C3                 mov     [ecx+48h], edx
.text:0040C4C6                 mov     [esp], ebx
.text:0040C4C9                 mov     [esp+4], esi
.text:0040C4CD                 mov     dword ptr [esp+8], 989680h
.text:0040C4D5                 mov     dword ptr [esp+0Ch], 0
.text:0040C4DD                 call    sub_412E10
.text:0040C4E2                 lea     edx, [eax+eax*4]
.text:0040C4E5                 mov     ebx, [esp+64h]
.text:0040C4E9                 lea     ecx, [edx+edx*4]
.text:0040C4EC                 shl     ecx, 2
.text:0040C4EF                 mov     esi, ecx
.text:0040C4F1                 shr     esi, 1Fh
.text:0040C4F4                 dec     esi
.text:0040C4F5                 and     esi, ecx
.text:0040C4F7                 mov     [ebx+4Ch], esi
.text:0040C4FA                 mov     edx, [esp+48h]
.text:0040C4FE                 xor     esi, esi
.text:0040C500                 mov     dword ptr [esp+8], 989680h
.text:0040C508                 mov     ebx, [esp+44h]
.text:0040C50C                 mov     dword ptr [esp+0Ch], 0
.text:0040C514                 mov     ecx, edx
.text:0040C516                 xor     edx, edx
.text:0040C518                 or      ebx, edx
.text:0040C51A                 or      esi, ecx
.text:0040C51C                 mov     edx, ebx
.text:0040C51E                 sub     edx, 0D53E8000h
.text:0040C524                 mov     ecx, esi
.text:0040C526                 sbb     ecx, 19DB1DEh
.text:0040C52C                 mov     [esp+4], ecx
.text:0040C530                 mov     [esp], edx
.text:0040C533                 call    sub_4129A0
.text:0040C538                 mov     edx, eax
.text:0040C53A                 mov     ecx, [esp+64h]
.text:0040C53E                 shr     eax, 1Fh
.text:0040C541                 dec     eax
.text:0040C542                 and     edx, eax
.text:0040C544                 mov     [ecx+40h], edx
.text:0040C547                 mov     [esp+4], esi
.text:0040C54B                 mov     dword ptr [esp+8], 989680h
.text:0040C553                 mov     dword ptr [esp+0Ch], 0
.text:0040C55B                 mov     [esp], ebx
.text:0040C55E                 call    sub_412E10
.text:0040C563                 lea     edx, [eax+eax*4]
.text:0040C566                 lea     esi, [edx+edx*4]
.text:0040C569                 mov     eax, [esp+64h]
.text:0040C56D                 shl     esi, 2
.text:0040C570                 mov     edx, ebp
.text:0040C572                 mov     ecx, esi
.text:0040C574                 mov     dword ptr [eax+50h], 200h
.text:0040C57B                 shr     ecx, 1Fh
.text:0040C57E                 dec     ecx
.text:0040C57F                 and     ecx, esi
.text:0040C581                 test    ebp, ebp
.text:0040C583                 mov     [eax+44h], ecx
.text:0040C586                 mov     eax, edi
.text:0040C588                 js      short loc_40C5C2
.text:0040C58A
.text:0040C58A loc_40C58A:                             ; CODE XREF: .text:0040C5CA↓j
.text:0040C58A                 xor     esi, esi
.text:0040C58C                 mov     ebp, edi
.text:0040C58E                 mov     ecx, eax
.text:0040C590                 shrd    ecx, edx, 9
.text:0040C594                 mov     ebx, edx
.text:0040C596                 and     ebp, 1FFh
.text:0040C59C                 mov     eax, esi
.text:0040C59E                 sar     ebx, 9
.text:0040C5A1                 or      eax, ebp
.text:0040C5A3                 jz      short loc_40C5AB
.text:0040C5A5                 add     ecx, 1
.text:0040C5A8                 adc     ebx, 0
.text:0040C5AB
.text:0040C5AB loc_40C5AB:                             ; CODE XREF: .text:0040C5A3↑j
.text:0040C5AB                 mov     edx, [esp+64h]
.text:0040C5AF                 mov     eax, 1
.text:0040C5B4                 mov     [edx+58h], ecx
.text:0040C5B7                 mov     [edx+5Ch], ebx
.text:0040C5BA                 add     esp, 1Ch
.text:0040C5BD                 pop     ebx
.text:0040C5BE                 pop     esi
.text:0040C5BF                 pop     edi
.text:0040C5C0                 pop     ebp
.text:0040C5C1                 retn
.text:0040C5C2 ; ---------------------------------------------------------------------------
.text:0040C5C2
.text:0040C5C2 loc_40C5C2:                             ; CODE XREF: .text:0040C588↑j
.text:0040C5C2                 add     eax, 1FFh
.text:0040C5C7                 adc     edx, 0
.text:0040C5CA                 jmp     short loc_40C58A
.text:0040C5CA ; ---------------------------------------------------------------------------
.text:0040C5CC                 align 10h
.text:0040C5D0                 push    ebp
.text:0040C5D1                 push    edi
.text:0040C5D2                 xor     edi, edi
.text:0040C5D4                 push    esi
.text:0040C5D5                 xor     esi, esi
.text:0040C5D7                 push    ebx
.text:0040C5D8                 sub     esp, 0Ch
.text:0040C5DB                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:0040C5E2                 call    LoadLibraryA
.text:0040C5E7                 sub     esp, 4
.text:0040C5EA                 mov     ebp, eax
.text:0040C5EC                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040C5F4                 mov     [esp], eax
.text:0040C5F7                 call    GetProcAddress
.text:0040C5FC                 sub     esp, 8
.text:0040C5FF                 test    eax, eax
.text:0040C601                 jz      short loc_40C632
.text:0040C603                 lea     ecx, [esp+8]
.text:0040C607                 mov     [esp+4], ecx
.text:0040C60B                 mov     ecx, [esp+20h]
.text:0040C60F                 mov     [esp], ecx
.text:0040C612                 call    eax
.text:0040C614                 sub     esp, 8
.text:0040C617                 mov     ebx, eax
.text:0040C619                 cmp     eax, 0FFFFFFFFh
.text:0040C61C                 jz      short loc_40C64D
.text:0040C61E
.text:0040C61E loc_40C61E:                             ; CODE XREF: .text:0040C656↓j
.text:0040C61E                 mov     esi, [esp+8]
.text:0040C622                 mov     ecx, ebx
.text:0040C624                 xor     edi, edi
.text:0040C626                 xor     ebx, ebx
.text:0040C628                 mov     edx, esi
.text:0040C62A                 mov     esi, ecx
.text:0040C62C                 or      esi, edi
.text:0040C62E                 mov     edi, ebx
.text:0040C630                 or      edi, edx
.text:0040C632
.text:0040C632 loc_40C632:                             ; CODE XREF: .text:0040C601↑j
.text:0040C632                                         ; .text:0040C654↓j
.text:0040C632                 test    ebp, ebp
.text:0040C634                 jz      short loc_40C641
.text:0040C636                 mov     [esp], ebp
.text:0040C639                 call    FreeLibrary
.text:0040C63E                 sub     esp, 4
.text:0040C641
.text:0040C641 loc_40C641:                             ; CODE XREF: .text:0040C634↑j
.text:0040C641                 add     esp, 0Ch
.text:0040C644                 mov     eax, esi
.text:0040C646                 mov     edx, edi
.text:0040C648                 pop     ebx
.text:0040C649                 pop     esi
.text:0040C64A                 pop     edi
.text:0040C64B                 pop     ebp
.text:0040C64C                 retn
.text:0040C64D ; ---------------------------------------------------------------------------
.text:0040C64D
.text:0040C64D loc_40C64D:                             ; CODE XREF: .text:0040C61C↑j
.text:0040C64D                 call    GetLastError
.text:0040C652                 test    eax, eax
.text:0040C654                 jnz     short loc_40C632
.text:0040C656                 jmp     short loc_40C61E
.text:0040C656 ; ---------------------------------------------------------------------------
.text:0040C658                 align 10h
.text:0040C660
.text:0040C660 ; =============== S U B R O U T I N E =======================================
.text:0040C660
.text:0040C660
.text:0040C660 ; int __cdecl sub_40C660(LPCSTR, int)
.text:0040C660 sub_40C660      proc near               ; CODE XREF: sub_410FB0-440F↓p
.text:0040C660
.text:0040C660 lpRootPathName  = dword ptr -8FCh
.text:0040C660 lpVolumeNameBuffer= dword ptr -8F8h
.text:0040C660 nVolumeNameSize = dword ptr -8F4h
.text:0040C660 lpVolumeSerialNumber= dword ptr -8F0h
.text:0040C660 lpMaximumComponentLength= dword ptr -8ECh
.text:0040C660 lpFileSystemFlags= dword ptr -8E8h
.text:0040C660 lpFileSystemNameBuffer= dword ptr -8E4h
.text:0040C660 nFileSystemNameSize= dword ptr -8E0h
.text:0040C660 VolumeSerialNumber= dword ptr -8D8h
.text:0040C660 MaximumComponentLength= dword ptr -8D4h
.text:0040C660 FileSystemFlags = dword ptr -8D0h
.text:0040C660 var_8CC         = dword ptr -8CCh
.text:0040C660 var_8C8         = dword ptr -8C8h
.text:0040C660 var_8C4         = dword ptr -8C4h
.text:0040C660 var_8C0         = dword ptr -8C0h
.text:0040C660 var_8BC         = dword ptr -8BCh
.text:0040C660 var_8B8         = dword ptr -8B8h
.text:0040C660 var_8B4         = dword ptr -8B4h
.text:0040C660 var_8B0         = dword ptr -8B0h
.text:0040C660 var_8AC         = dword ptr -8ACh
.text:0040C660 var_8A8         = dword ptr -8A8h
.text:0040C660 var_8A4         = dword ptr -8A4h
.text:0040C660 var_8A0         = dword ptr -8A0h
.text:0040C660 var_89C         = dword ptr -89Ch
.text:0040C660 FileSystemNameBuffer= byte ptr -88Ch
.text:0040C660 VolumeNameBuffer= byte ptr -48Ch
.text:0040C660 var_8C          = dword ptr -8Ch
.text:0040C660 var_88          = dword ptr -88h
.text:0040C660 var_84          = dword ptr -84h
.text:0040C660 var_80          = dword ptr -80h
.text:0040C660 var_7C          = dword ptr -7Ch
.text:0040C660 var_78          = dword ptr -78h
.text:0040C660 var_74          = dword ptr -74h
.text:0040C660 var_70          = dword ptr -70h
.text:0040C660 var_6C          = dword ptr -6Ch
.text:0040C660 var_5C          = dword ptr -5Ch
.text:0040C660 var_58          = dword ptr -58h
.text:0040C660 var_54          = dword ptr -54h
.text:0040C660 var_50          = dword ptr -50h
.text:0040C660 var_4C          = dword ptr -4Ch
.text:0040C660 var_48          = dword ptr -48h
.text:0040C660 var_44          = dword ptr -44h
.text:0040C660 var_3C          = dword ptr -3Ch
.text:0040C660 var_38          = dword ptr -38h
.text:0040C660 var_34          = dword ptr -34h
.text:0040C660 arg_0           = dword ptr  4
.text:0040C660 arg_4           = dword ptr  8
.text:0040C660
.text:0040C660                 push    ebp
.text:0040C661                 xor     eax, eax
.text:0040C663                 mov     ecx, 0Dh
.text:0040C668                 push    edi
.text:0040C669                 push    esi
.text:0040C66A                 push    ebx
.text:0040C66B                 sub     esp, 8ECh
.text:0040C671                 lea     edi, [esp+8FCh+var_5C]
.text:0040C678                 cld
.text:0040C679                 lea     edx, [esp+8FCh+var_8C]
.text:0040C680                 rep stosd
.text:0040C682                 mov     [esp+8FCh+lpVolumeNameBuffer], edx
.text:0040C686                 lea     esi, [esp+8FCh+var_5C]
.text:0040C68D                 mov     edx, [esp+8FCh+arg_0]
.text:0040C694                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040C697                 call    loc_40B0C0
.text:0040C69C                 test    eax, eax
.text:0040C69E                 mov     edx, 0FFFFFFFFh
.text:0040C6A3                 jz      loc_40CA34
.text:0040C6A9                 mov     edx, [esp+8FCh+var_88]
.text:0040C6B0                 mov     ebp, [esp+8FCh+var_84]
.text:0040C6B7                 mov     edi, [esp+8FCh+var_80]
.text:0040C6BE                 mov     [esp+8FCh+var_58], edx
.text:0040C6C5                 mov     ecx, [esp+8FCh+var_7C]
.text:0040C6CC                 mov     ebx, [esp+8FCh+var_8C]
.text:0040C6D3                 mov     [esp+8FCh+var_54], ebp
.text:0040C6DA                 mov     edx, [esp+8FCh+var_78]
.text:0040C6E1                 mov     ebp, [esp+8FCh+var_74]
.text:0040C6E8                 mov     [esp+8FCh+var_50], edi
.text:0040C6EF                 test    bl, 10h
.text:0040C6F2                 mov     edi, [esp+8FCh+var_70]
.text:0040C6F9                 mov     [esp+8FCh+var_4C], ecx
.text:0040C700                 mov     ecx, [esp+8FCh+var_6C]
.text:0040C707                 mov     [esp+8FCh+var_5C], ebx
.text:0040C70E                 mov     [esp+8FCh+var_48], edx
.text:0040C715                 mov     [esp+8FCh+var_44], ebp
.text:0040C71C                 mov     [esp+8FCh+var_3C], edi
.text:0040C723                 mov     [esp+8FCh+var_38], ecx
.text:0040C72A                 jnz     loc_40CA50
.text:0040C730                 mov     ebx, 1
.text:0040C735                 mov     [esp+8FCh+var_34], ebx
.text:0040C73C
.text:0040C73C loc_40C73C:                             ; CODE XREF: sub_40C660+406↓j
.text:0040C73C                 mov     eax, [esp+8FCh+arg_0]
.text:0040C743                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:0040C747                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040C74B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040C74E                 call    sub_40D430
.text:0040C753                 mov     [esp+8FCh+lpRootPathName], eax
.text:0040C756                 call    sub_40D000
.text:0040C75B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040C75F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040C763                 mov     ebp, eax
.text:0040C765                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040C769                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040C76D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:0040C774                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:0040C778                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040C77C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:0040C780                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040C788                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040C790                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:0040C793                 call    GetVolumeInformationA
.text:0040C798                 sub     esp, 20h
.text:0040C79B                 test    eax, eax
.text:0040C79D                 lea     edi, [esp+8FCh+var_8CC]
.text:0040C7A1                 setz    bl
.text:0040C7A4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:0040C7A7                 xor     ebp, ebp
.text:0040C7A9                 movzx   edx, bl
.text:0040C7AC                 dec     edx
.text:0040C7AD                 xor     ebx, ebx
.text:0040C7AF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:0040C7B3                 call    free
.text:0040C7B8                 cld
.text:0040C7B9                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040C7BD                 mov     [esi+1Ch], ecx
.text:0040C7C0                 mov     ecx, 0Dh
.text:0040C7C5                 rep movsd
.text:0040C7C7                 mov     edi, [esp+8FCh+var_8A0]
.text:0040C7CB                 mov     edx, [esp+8FCh+var_89C]
.text:0040C7CF                 mov     ecx, [esp+8FCh+var_8CC]
.text:0040C7D3                 or      ebp, edi
.text:0040C7D5                 mov     esi, [esp+8FCh+var_8B0]
.text:0040C7D9                 mov     edi, [esp+8FCh+arg_4]
.text:0040C7E0                 or      edx, ebx
.text:0040C7E2                 mov     [edi+8], edx
.text:0040C7E5                 xor     edx, edx
.text:0040C7E7                 test    cl, 10h
.text:0040C7EA                 setz    dl
.text:0040C7ED                 mov     [edi+0Ch], ebp
.text:0040C7F0                 mov     [edi+10h], esi
.text:0040C7F3                 mov     dword ptr [edi+14h], 0
.text:0040C7FA                 dec     edx
.text:0040C7FB                 and     edx, 0FFFFC000h
.text:0040C801                 add     edx, 8000h
.text:0040C807                 or      edx, 124h
.text:0040C80D                 test    cl, 1
.text:0040C810                 movzx   eax, dx
.text:0040C813                 jnz     short loc_40C81A
.text:0040C815                 or      eax, 92h
.text:0040C81A
.text:0040C81A loc_40C81A:                             ; CODE XREF: sub_40C660+1B3↑j
.text:0040C81A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040C81E                 xor     edx, edx
.text:0040C820                 xor     ebp, ebp
.text:0040C822                 mov     edi, [esp+8FCh+var_8AC]
.text:0040C826                 mov     ecx, [esp+8FCh+arg_4]
.text:0040C82D                 mov     esi, edi
.text:0040C82F                 or      [ecx], eax
.text:0040C831                 mov     edi, ebx
.text:0040C833                 or      edi, ebp
.text:0040C835                 mov     ebp, edx
.text:0040C837                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040C83B                 or      ebp, esi
.text:0040C83D                 mov     esi, [esp+8FCh+arg_4]
.text:0040C844                 mov     edx, [esp+8FCh+var_8BC]
.text:0040C848                 mov     [esi+18h], ebx
.text:0040C84B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040C84F                 mov     ecx, edx
.text:0040C851                 mov     [esi+30h], edi
.text:0040C854                 xor     edx, edx
.text:0040C856                 mov     [esi+34h], ebp
.text:0040C859                 or      ebx, edx
.text:0040C85B                 xor     esi, esi
.text:0040C85D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040C865                 or      esi, ecx
.text:0040C867                 mov     edx, ebx
.text:0040C869                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040C871                 sub     edx, 0D53E8000h
.text:0040C877                 mov     ecx, esi
.text:0040C879                 sbb     ecx, 19DB1DEh
.text:0040C87F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040C883                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040C886                 call    sub_4129A0
.text:0040C88B                 mov     edx, eax
.text:0040C88D                 mov     ecx, [esp+8FCh+arg_4]
.text:0040C894                 shr     eax, 1Fh
.text:0040C897                 dec     eax
.text:0040C898                 and     edx, eax
.text:0040C89A                 mov     [ecx+38h], edx
.text:0040C89D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040C8A0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040C8A4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040C8AC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040C8B4                 call    sub_412E10
.text:0040C8B9                 lea     ecx, [eax+eax*4]
.text:0040C8BC                 lea     ebx, [ecx+ecx*4]
.text:0040C8BF                 mov     eax, [esp+8FCh+arg_4]
.text:0040C8C6                 shl     ebx, 2
.text:0040C8C9                 mov     esi, ebx
.text:0040C8CB                 shr     esi, 1Fh
.text:0040C8CE                 dec     esi
.text:0040C8CF                 and     esi, ebx
.text:0040C8D1                 mov     [eax+3Ch], esi
.text:0040C8D4                 mov     edx, [esp+8FCh+var_8C4]
.text:0040C8D8                 xor     esi, esi
.text:0040C8DA                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040C8E2                 mov     ebx, [esp+8FCh+var_8C8]
.text:0040C8E6                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040C8EE                 mov     ecx, edx
.text:0040C8F0                 xor     edx, edx
.text:0040C8F2                 or      ebx, edx
.text:0040C8F4                 or      esi, ecx
.text:0040C8F6                 mov     edx, ebx
.text:0040C8F8                 sub     edx, 0D53E8000h
.text:0040C8FE                 mov     ecx, esi
.text:0040C900                 sbb     ecx, 19DB1DEh
.text:0040C906                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040C90A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040C90D                 call    sub_4129A0
.text:0040C912                 mov     edx, eax
.text:0040C914                 mov     ecx, [esp+8FCh+arg_4]
.text:0040C91B                 shr     eax, 1Fh
.text:0040C91E                 dec     eax
.text:0040C91F                 and     edx, eax
.text:0040C921                 mov     [ecx+48h], edx
.text:0040C924                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040C927                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040C92B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040C933                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040C93B                 call    sub_412E10
.text:0040C940                 lea     ecx, [eax+eax*4]
.text:0040C943                 lea     ebx, [ecx+ecx*4]
.text:0040C946                 mov     eax, [esp+8FCh+arg_4]
.text:0040C94D                 shl     ebx, 2
.text:0040C950                 mov     esi, ebx
.text:0040C952                 shr     esi, 1Fh
.text:0040C955                 dec     esi
.text:0040C956                 and     esi, ebx
.text:0040C958                 mov     [eax+4Ch], esi
.text:0040C95B                 mov     edx, [esp+8FCh+var_8B4]
.text:0040C95F                 xor     esi, esi
.text:0040C961                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040C969                 mov     ebx, [esp+8FCh+var_8B8]
.text:0040C96D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040C975                 mov     ecx, edx
.text:0040C977                 xor     edx, edx
.text:0040C979                 or      ebx, edx
.text:0040C97B                 or      esi, ecx
.text:0040C97D                 mov     edx, ebx
.text:0040C97F                 sub     edx, 0D53E8000h
.text:0040C985                 mov     ecx, esi
.text:0040C987                 sbb     ecx, 19DB1DEh
.text:0040C98D                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040C991                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040C994                 call    sub_4129A0
.text:0040C999                 mov     edx, eax
.text:0040C99B                 mov     ecx, [esp+8FCh+arg_4]
.text:0040C9A2                 shr     eax, 1Fh
.text:0040C9A5                 dec     eax
.text:0040C9A6                 and     edx, eax
.text:0040C9A8                 mov     [ecx+40h], edx
.text:0040C9AB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040C9AE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040C9B2                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040C9BA                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040C9C2                 call    sub_412E10
.text:0040C9C7                 lea     ebx, [eax+eax*4]
.text:0040C9CA                 mov     esi, [esp+8FCh+arg_4]
.text:0040C9D1                 lea     edx, [ebx+ebx*4]
.text:0040C9D4                 shl     edx, 2
.text:0040C9D7                 mov     eax, edi
.text:0040C9D9                 mov     ecx, edx
.text:0040C9DB                 mov     dword ptr [esi+50h], 200h
.text:0040C9E2                 shr     ecx, 1Fh
.text:0040C9E5                 dec     ecx
.text:0040C9E6                 and     ecx, edx
.text:0040C9E8                 test    ebp, ebp
.text:0040C9EA                 mov     edx, ebp
.text:0040C9EC                 mov     [esi+44h], ecx
.text:0040C9EF                 js      short loc_40CA41
.text:0040C9F1
.text:0040C9F1 loc_40C9F1:                             ; CODE XREF: sub_40C660+3E9↓j
.text:0040C9F1                 xor     esi, esi
.text:0040C9F3                 mov     ebp, edi
.text:0040C9F5                 mov     ecx, eax
.text:0040C9F7                 shrd    ecx, edx, 9
.text:0040C9FB                 mov     ebx, edx
.text:0040C9FD                 and     ebp, 1FFh
.text:0040CA03                 mov     eax, esi
.text:0040CA05                 sar     ebx, 9
.text:0040CA08                 or      eax, ebp
.text:0040CA0A                 jz      short loc_40CA12
.text:0040CA0C                 add     ecx, 1
.text:0040CA0F                 adc     ebx, 0
.text:0040CA12
.text:0040CA12 loc_40CA12:                             ; CODE XREF: sub_40C660+3AA↑j
.text:0040CA12                 mov     edx, [esp+8FCh+arg_4]
.text:0040CA19                 mov     [edx+5Ch], ebx
.text:0040CA1C                 mov     ebx, [esp+8FCh+arg_0]
.text:0040CA23                 mov     [edx+58h], ecx
.text:0040CA26                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040CA2A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040CA2D                 call    sub_40B880
.text:0040CA32                 xor     edx, edx
.text:0040CA34
.text:0040CA34 loc_40CA34:                             ; CODE XREF: sub_40C660+43↑j
.text:0040CA34                 add     esp, 8ECh
.text:0040CA3A                 mov     eax, edx
.text:0040CA3C                 pop     ebx
.text:0040CA3D                 pop     esi
.text:0040CA3E                 pop     edi
.text:0040CA3F                 pop     ebp
.text:0040CA40                 retn
.text:0040CA41 ; ---------------------------------------------------------------------------
.text:0040CA41
.text:0040CA41 loc_40CA41:                             ; CODE XREF: sub_40C660+38F↑j
.text:0040CA41                 add     eax, 1FFh
.text:0040CA46                 adc     edx, 0
.text:0040CA49                 jmp     short loc_40C9F1
.text:0040CA49 ; ---------------------------------------------------------------------------
.text:0040CA4B                 align 10h
.text:0040CA50
.text:0040CA50 loc_40CA50:                             ; CODE XREF: sub_40C660+CA↑j
.text:0040CA50                 mov     eax, [esp+8FCh+arg_0]
.text:0040CA57                 mov     [esp+8FCh+lpRootPathName], eax
.text:0040CA5A                 call    loc_40B230
.text:0040CA5F                 mov     [esp+8FCh+var_34], eax
.text:0040CA66                 jmp     loc_40C73C
.text:0040CA66 sub_40C660      endp
.text:0040CA66
.text:0040CA66 ; ---------------------------------------------------------------------------
.text:0040CA6B                 align 10h
.text:0040CA70 ; START OF FUNCTION CHUNK FOR sub_410FB0
.text:0040CA70
.text:0040CA70 loc_40CA70:                             ; CODE XREF: sub_410FB0+26↓j
.text:0040CA70                 cld
.text:0040CA71                 sub     esp, 2Ch
.text:0040CA74                 xor     eax, eax
.text:0040CA76                 mov     [esp+2Ch+var_10], ebx
.text:0040CA7A                 mov     ecx, 18h
.text:0040CA7F                 mov     ebx, [esp+2Ch+arg_0]
.text:0040CA83                 mov     [esp+2Ch+var_C], esi
.text:0040CA87                 mov     esi, [esp+2Ch+arg_4]
.text:0040CA8B                 test    ebx, ebx
.text:0040CA8D                 mov     [esp+2Ch+var_8], edi
.text:0040CA91                 mov     edi, esi
.text:0040CA93                 mov     [esp+2Ch+var_4], ebp
.text:0040CA97                 rep stosd
.text:0040CA99                 jz      short loc_40CAA0
.text:0040CA9B                 cmp     byte ptr [ebx], 0
.text:0040CA9E                 jnz     short loc_40CAB8
.text:0040CAA0
.text:0040CAA0 loc_40CAA0:                             ; CODE XREF: sub_410FB0-4517↑j
.text:0040CAA0                 xor     edx, edx
.text:0040CAA2
.text:0040CAA2 loc_40CAA2:                             ; CODE XREF: sub_410FB0-44E1↓j
.text:0040CAA2                                         ; sub_410FB0-4438↓j
.text:0040CAA2                 mov     ebx, [esp+2Ch+var_10]
.text:0040CAA6                 mov     eax, edx
.text:0040CAA8                 mov     esi, [esp+2Ch+var_C]
.text:0040CAAC                 mov     edi, [esp+2Ch+var_8]
.text:0040CAB0                 mov     ebp, [esp+2Ch+var_4]
.text:0040CAB4                 add     esp, 2Ch
.text:0040CAB7                 retn
.text:0040CAB8 ; ---------------------------------------------------------------------------
.text:0040CAB8
.text:0040CAB8 loc_40CAB8:                             ; CODE XREF: sub_410FB0-4512↑j
.text:0040CAB8                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:0040CAC0                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:0040CAC3                 call    sub_40EB30
.text:0040CAC8                 test    eax, eax
.text:0040CACA                 mov     edx, 0FFFFFFFFh
.text:0040CACF                 jnz     short loc_40CAA2
.text:0040CAD1                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:0040CAD4                 call    sub_40E9E0
.text:0040CAD9                 mov     [esp+2Ch+lpFileName], eax
.text:0040CADC                 call    sub_40D000
.text:0040CAE1                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:0040CAE4                 mov     ebp, eax
.text:0040CAE6                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040CAEE                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:0040CAF6                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040CAFE                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040CB06                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040CB0E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040CB16                 call    CreateFileA
.text:0040CB1B                 sub     esp, 1Ch
.text:0040CB1E                 mov     ebx, eax
.text:0040CB20                 mov     [esp+2Ch+dwDesiredAccess], esi
.text:0040CB24                 mov     [esp+2Ch+lpFileName], eax
.text:0040CB27                 call    loc_40B3B0
.text:0040CB2C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040CB2F                 mov     edi, eax
.text:0040CB31                 call    CloseHandle
.text:0040CB36                 sub     esp, 4
.text:0040CB39                 cmp     edi, 0FFFFFFFFh
.text:0040CB3C                 jz      short loc_40CB9A
.text:0040CB3E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040CB42                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:0040CB45                 call    sub_40B880
.text:0040CB4A
.text:0040CB4A loc_40CB4A:                             ; CODE XREF: sub_410FB0-4408↓j
.text:0040CB4A                 mov     edx, [esi]
.text:0040CB4C                 and     edx, 0F000h
.text:0040CB52                 cmp     edx, 4000h
.text:0040CB58                 jz      short loc_40CB8D
.text:0040CB5A
.text:0040CB5A loc_40CB5A:                             ; CODE XREF: sub_410FB0-4418↓j
.text:0040CB5A                 cmp     edi, 0FFFFFFFFh
.text:0040CB5D                 jz      short loc_40CB7D
.text:0040CB5F
.text:0040CB5F loc_40CB5F:                             ; CODE XREF: sub_410FB0-4425↓j
.text:0040CB5F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:0040CB66                 call    SetErrorMode
.text:0040CB6B                 sub     esp, 4
.text:0040CB6E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:0040CB71                 call    free
.text:0040CB76                 mov     edx, edi
.text:0040CB78                 jmp     loc_40CAA2
.text:0040CB7D ; ---------------------------------------------------------------------------
.text:0040CB7D
.text:0040CB7D loc_40CB7D:                             ; CODE XREF: sub_410FB0-4453↑j
.text:0040CB7D                 call    sub_40E990
.text:0040CB82                 mov     esi, eax
.text:0040CB84                 call    _errno
.text:0040CB89                 mov     [eax], esi
.text:0040CB8B                 jmp     short loc_40CB5F
.text:0040CB8D ; ---------------------------------------------------------------------------
.text:0040CB8D
.text:0040CB8D loc_40CB8D:                             ; CODE XREF: sub_410FB0-4458↑j
.text:0040CB8D                 mov     [esp+2Ch+lpFileName], ebp
.text:0040CB90                 call    loc_40B230
.text:0040CB95                 mov     [esi+18h], eax
.text:0040CB98                 jmp     short loc_40CB5A
.text:0040CB9A ; ---------------------------------------------------------------------------
.text:0040CB9A
.text:0040CB9A loc_40CB9A:                             ; CODE XREF: sub_410FB0-4474↑j
.text:0040CB9A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040CB9E                 mov     [esp+2Ch+lpFileName], ebp ; LPCSTR
.text:0040CBA1                 call    sub_40C660
.text:0040CBA6                 mov     edi, eax
.text:0040CBA8                 jmp     short loc_40CB4A
.text:0040CBA8 ; END OF FUNCTION CHUNK FOR sub_410FB0
.text:0040CBA8 ; ---------------------------------------------------------------------------
.text:0040CBAA                 align 10h
.text:0040CBB0
.text:0040CBB0 ; =============== S U B R O U T I N E =======================================
.text:0040CBB0
.text:0040CBB0 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:0040CBB0
.text:0040CBB0 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:0040CBB0 _win32_longpath proc near               ; CODE XREF: .text:0040D374↓p
.text:0040CBB0
.text:0040CBB0 C               = dword ptr -278h
.text:0040CBB0 lpFindFileData  = dword ptr -274h
.text:0040CBB0 Destination     = byte ptr -268h
.text:0040CBB0 var_267         = byte ptr -267h
.text:0040CBB0 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:0040CBB0 lpFileName      = dword ptr  8
.text:0040CBB0
.text:0040CBB0                 push    ebp
.text:0040CBB1                 xor     eax, eax
.text:0040CBB3                 push    edi
.text:0040CBB4                 push    esi
.text:0040CBB5                 push    ebx
.text:0040CBB6                 sub     esp, 26Ch
.text:0040CBBC                 mov     esi, [esp+278h+lpFileName]
.text:0040CBC3                 lea     ebp, [esp+278h+Destination]
.text:0040CBC7                 test    esi, esi
.text:0040CBC9                 jz      loc_40CD27
.text:0040CBCF                 movsx   edx, byte ptr [esi]
.text:0040CBD2                 mov     [esp+278h+C], edx ; C
.text:0040CBD5                 call    isalpha
.text:0040CBDA                 test    eax, eax
.text:0040CBDC                 jz      short loc_40CBEF
.text:0040CBDE                 mov     eax, [esp+278h+lpFileName]
.text:0040CBE5                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:0040CBE9                 jz      loc_40CF2B
.text:0040CBEF
.text:0040CBEF loc_40CBEF:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040CBEF                 mov     edx, [esp+278h+lpFileName]
.text:0040CBF6                 movzx   eax, byte ptr [edx]
.text:0040CBF9                 cmp     al, 2Fh ; '/'
.text:0040CBFB                 jz      loc_40CE0B
.text:0040CC01                 cmp     al, 5Ch ; '\'
.text:0040CC03                 jz      loc_40CE0B
.text:0040CC09
.text:0040CC09 loc_40CC09:                             ; CODE XREF: _win32_longpath+26E↓j
.text:0040CC09                                         ; _win32_longpath+2B1↓j ...
.text:0040CC09                 mov     [ebp+268h+Destination], 0
.text:0040CC0D                 movzx   ebx, byte ptr [esi]
.text:0040CC10                 test    bl, bl
.text:0040CC12                 jz      loc_40CD09
.text:0040CC18                 nop
.text:0040CC19                 lea     esi, [esi+0]
.text:0040CC20
.text:0040CC20 loc_40CC20:                             ; CODE XREF: _win32_longpath+153↓j
.text:0040CC20                 cmp     bl, 2Fh ; '/'
.text:0040CC23                 jz      loc_40CDC0
.text:0040CC29                 cmp     bl, 5Ch ; '\'
.text:0040CC2C                 jz      loc_40CDC0
.text:0040CC32
.text:0040CC32 loc_40CC32:                             ; CODE XREF: _win32_longpath+21E↓j
.text:0040CC32                                         ; _win32_longpath+22C↓j ...
.text:0040CC32                 cmp     bl, 2Eh ; '.'
.text:0040CC35                 jz      loc_40CD60
.text:0040CC3B
.text:0040CC3B loc_40CC3B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040CC3B                                         ; _win32_longpath+203↓j
.text:0040CC3B                 test    bl, bl
.text:0040CC3D                 jz      loc_40CD09
.text:0040CC43                 cmp     bl, 2Fh ; '/'
.text:0040CC46                 jz      short loc_40CC62
.text:0040CC48                 cmp     bl, 5Ch ; '\'
.text:0040CC4B                 jz      short loc_40CC62
.text:0040CC4D                 lea     esi, [esi+0]
.text:0040CC50
.text:0040CC50 loc_40CC50:                             ; CODE XREF: _win32_longpath+B0↓j
.text:0040CC50                 inc     esi
.text:0040CC51                 movzx   ebx, byte ptr [esi]
.text:0040CC54                 test    bl, bl
.text:0040CC56                 jz      short loc_40CC62
.text:0040CC58                 cmp     bl, 2Fh ; '/'
.text:0040CC5B                 jz      short loc_40CC62
.text:0040CC5D                 cmp     bl, 5Ch ; '\'
.text:0040CC60                 jnz     short loc_40CC50
.text:0040CC62
.text:0040CC62 loc_40CC62:                             ; CODE XREF: _win32_longpath+96↑j
.text:0040CC62                                         ; _win32_longpath+9B↑j ...
.text:0040CC62                 mov     byte ptr [esi], 0
.text:0040CC65                 lea     edx, [esp+278h+FindFileData]
.text:0040CC6C                 mov     eax, [esp+278h+lpFileName]
.text:0040CC73                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:0040CC77                 mov     [esp+278h+C], eax ; lpFileName
.text:0040CC7A                 call    FindFirstFileA
.text:0040CC7F                 mov     [esi], bl
.text:0040CC81                 sub     esp, 8
.text:0040CC84                 mov     edi, eax
.text:0040CC86                 cmp     eax, 0FFFFFFFFh
.text:0040CC89                 jz      loc_40CD4C
.text:0040CC8F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:0040CC96                 mov     ecx, ebx
.text:0040CC98                 nop
.text:0040CC99                 lea     esi, [esi+0]
.text:0040CCA0
.text:0040CCA0 loc_40CCA0:                             ; CODE XREF: _win32_longpath+105↓j
.text:0040CCA0                 mov     eax, [ebx]
.text:0040CCA2                 add     ebx, 4
.text:0040CCA5                 lea     edx, [eax-1010101h]
.text:0040CCAB                 not     eax
.text:0040CCAD                 and     edx, eax
.text:0040CCAF                 and     edx, 80808080h
.text:0040CCB5                 jz      short loc_40CCA0
.text:0040CCB7                 test    edx, 8080h
.text:0040CCBD                 jnz     short loc_40CCC5
.text:0040CCBF                 shr     edx, 10h
.text:0040CCC2                 add     ebx, 2
.text:0040CCC5
.text:0040CCC5 loc_40CCC5:                             ; CODE XREF: _win32_longpath+10D↑j
.text:0040CCC5                 add     dl, dl
.text:0040CCC7                 sbb     ebx, 3
.text:0040CCCA                 sub     ebx, ecx
.text:0040CCCC                 lea     ecx, [esp+278h+Destination]
.text:0040CCD0                 sub     ecx, ebp
.text:0040CCD2                 add     ecx, 105h
.text:0040CCD8                 cmp     ecx, ebx
.text:0040CCDA                 jle     short loc_40CD32
.text:0040CCDC                 mov     [esp+278h+C], ebp ; Destination
.text:0040CCDF                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:0040CCE6                 add     ebp, ebx
.text:0040CCE8                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0040CCEC                 call    strcpy
.text:0040CCF1                 mov     [esp+278h+C], edi ; hFindFile
.text:0040CCF4                 call    FindClose
.text:0040CCF9                 sub     esp, 4
.text:0040CCFC
.text:0040CCFC loc_40CCFC:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0040CCFC                 movzx   ecx, byte ptr [esi]
.text:0040CCFF                 test    cl, cl
.text:0040CD01                 mov     bl, cl
.text:0040CD03                 jnz     loc_40CC20
.text:0040CD09
.text:0040CD09 loc_40CD09:                             ; CODE XREF: _win32_longpath+62↑j
.text:0040CD09                                         ; _win32_longpath+8D↑j
.text:0040CD09                 mov     esi, [esp+278h+lpFileName]
.text:0040CD10                 lea     ebp, [esp+278h+Destination]
.text:0040CD14                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:0040CD18                 mov     [esp+278h+C], esi ; Destination
.text:0040CD1B                 call    strcpy
.text:0040CD20                 mov     eax, [esp+278h+lpFileName]
.text:0040CD27
.text:0040CD27 loc_40CD27:                             ; CODE XREF: _win32_longpath+19↑j
.text:0040CD27                                         ; _win32_longpath+19A↓j
.text:0040CD27                 add     esp, 26Ch
.text:0040CD2D                 pop     ebx
.text:0040CD2E                 pop     esi
.text:0040CD2F                 pop     edi
.text:0040CD30                 pop     ebp
.text:0040CD31                 retn
.text:0040CD32 ; ---------------------------------------------------------------------------
.text:0040CD32
.text:0040CD32 loc_40CD32:                             ; CODE XREF: _win32_longpath+12A↑j
.text:0040CD32                 mov     [esp+278h+C], edi ; hFindFile
.text:0040CD35                 call    FindClose
.text:0040CD3A                 sub     esp, 4
.text:0040CD3D                 call    _errno
.text:0040CD42                 mov     dword ptr [eax], 22h ; '"'
.text:0040CD48
.text:0040CD48 loc_40CD48:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:0040CD48                 xor     eax, eax
.text:0040CD4A                 jmp     short loc_40CD27
.text:0040CD4C ; ---------------------------------------------------------------------------
.text:0040CD4C
.text:0040CD4C loc_40CD4C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0040CD4C                 call    _errno
.text:0040CD51                 mov     dword ptr [eax], 16h
.text:0040CD57                 jmp     short loc_40CD48
.text:0040CD57 ; ---------------------------------------------------------------------------
.text:0040CD59                 align 10h
.text:0040CD60
.text:0040CD60 loc_40CD60:                             ; CODE XREF: _win32_longpath+85↑j
.text:0040CD60                 movzx   eax, byte ptr [esi+1]
.text:0040CD64                 test    al, al
.text:0040CD66                 jnz     short loc_40CD95
.text:0040CD68
.text:0040CD68 loc_40CD68:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:0040CD68                                         ; _win32_longpath+1EB↓j ...
.text:0040CD68                 test    bl, bl
.text:0040CD6A                 jz      short loc_40CD8C
.text:0040CD6C                 cmp     bl, 2Fh ; '/'
.text:0040CD6F                 jz      short loc_40CD8C
.text:0040CD71                 cmp     bl, 5Ch ; '\'
.text:0040CD74                 jz      short loc_40CD8C
.text:0040CD76
.text:0040CD76 loc_40CD76:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:0040CD76                 mov     [ebp+268h+Destination], bl
.text:0040CD79                 inc     esi
.text:0040CD7A                 inc     ebp
.text:0040CD7B                 movzx   ebx, byte ptr [esi]
.text:0040CD7E                 test    bl, bl
.text:0040CD80                 jz      short loc_40CD8C
.text:0040CD82                 cmp     bl, 2Fh ; '/'
.text:0040CD85                 jz      short loc_40CD8C
.text:0040CD87                 cmp     bl, 5Ch ; '\'
.text:0040CD8A                 jnz     short loc_40CD76
.text:0040CD8C
.text:0040CD8C loc_40CD8C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040CD8C                                         ; _win32_longpath+1BF↑j ...
.text:0040CD8C                 mov     [ebp+268h+Destination], 0
.text:0040CD90                 jmp     loc_40CCFC
.text:0040CD95 ; ---------------------------------------------------------------------------
.text:0040CD95
.text:0040CD95 loc_40CD95:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:0040CD95                 cmp     al, 2Fh ; '/'
.text:0040CD97                 jz      short loc_40CD68
.text:0040CD99                 cmp     al, 5Ch ; '\'
.text:0040CD9B                 jz      short loc_40CD68
.text:0040CD9D                 cmp     al, 2Eh ; '.'
.text:0040CD9F                 jnz     loc_40CC3B
.text:0040CDA5                 movzx   eax, byte ptr [esi+2]
.text:0040CDA9                 test    al, al
.text:0040CDAB                 jz      short loc_40CD68
.text:0040CDAD                 cmp     al, 2Fh ; '/'
.text:0040CDAF                 jz      short loc_40CD68
.text:0040CDB1                 cmp     al, 5Ch ; '\'
.text:0040CDB3                 jnz     loc_40CC3B
.text:0040CDB9                 jmp     short loc_40CD68
.text:0040CDB9 ; ---------------------------------------------------------------------------
.text:0040CDBB                 align 10h
.text:0040CDC0
.text:0040CDC0 loc_40CDC0:                             ; CODE XREF: _win32_longpath+73↑j
.text:0040CDC0                                         ; _win32_longpath+7C↑j
.text:0040CDC0                 mov     [ebp+268h+Destination], bl
.text:0040CDC3                 inc     esi
.text:0040CDC4                 inc     ebp
.text:0040CDC5                 mov     [ebp+268h+Destination], 0
.text:0040CDC9                 movzx   ebx, byte ptr [esi]
.text:0040CDCC                 test    bl, bl
.text:0040CDCE                 jz      loc_40CC32
.text:0040CDD4                 cmp     bl, 2Fh ; '/'
.text:0040CDD7                 jz      short loc_40CDF0
.text:0040CDD9                 cmp     bl, 5Ch ; '\'
.text:0040CDDC                 jnz     loc_40CC32
.text:0040CDE2                 lea     esi, [esi+0]
.text:0040CDE9                 lea     edi, [edi+0]
.text:0040CDF0
.text:0040CDF0 loc_40CDF0:                             ; CODE XREF: _win32_longpath+227↑j
.text:0040CDF0                                         ; _win32_longpath+24F↓j ...
.text:0040CDF0                 inc     esi
.text:0040CDF1                 movzx   ebx, byte ptr [esi]
.text:0040CDF4                 test    bl, bl
.text:0040CDF6                 jz      loc_40CC32
.text:0040CDFC                 cmp     bl, 2Fh ; '/'
.text:0040CDFF                 jz      short loc_40CDF0
.text:0040CE01                 cmp     bl, 5Ch ; '\'
.text:0040CE04                 jz      short loc_40CDF0
.text:0040CE06                 jmp     loc_40CC32
.text:0040CE0B ; ---------------------------------------------------------------------------
.text:0040CE0B
.text:0040CE0B loc_40CE0B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040CE0B                                         ; _win32_longpath+53↑j
.text:0040CE0B                 mov     edi, [esp+278h+lpFileName]
.text:0040CE12                 movzx   edx, byte ptr [edi+1]
.text:0040CE16                 cmp     dl, 2Fh ; '/'
.text:0040CE19                 jz      short loc_40CE24
.text:0040CE1B                 cmp     dl, 5Ch ; '\'
.text:0040CE1E                 jnz     loc_40CC09
.text:0040CE24
.text:0040CE24 loc_40CE24:                             ; CODE XREF: _win32_longpath+269↑j
.text:0040CE24                 mov     esi, [esp+278h+lpFileName]
.text:0040CE2B                 mov     [ebp+268h+Destination], al
.text:0040CE2E                 mov     ecx, [esp+278h+lpFileName]
.text:0040CE35                 inc     ebp
.text:0040CE36                 add     esi, 2
.text:0040CE39                 movzx   ebx, byte ptr [ecx+1]
.text:0040CE3D                 mov     [ebp+268h+Destination], bl
.text:0040CE40                 inc     ebp
.text:0040CE41                 movzx   eax, byte ptr [ecx+2]
.text:0040CE45                 test    al, al
.text:0040CE47                 jz      loc_40CF23
.text:0040CE4D                 cmp     al, 2Fh ; '/'
.text:0040CE4F                 jz      loc_40CF08
.text:0040CE55                 cmp     al, 5Ch ; '\'
.text:0040CE57                 mov     bl, al
.text:0040CE59                 jz      loc_40CF08
.text:0040CE5F
.text:0040CE5F loc_40CE5F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040CE5F                                         ; _win32_longpath+376↓j
.text:0040CE5F                 test    bl, bl
.text:0040CE61                 jz      loc_40CC09
.text:0040CE67                 cmp     bl, 2Fh ; '/'
.text:0040CE6A                 jz      short loc_40CE8B
.text:0040CE6C                 cmp     bl, 5Ch ; '\'
.text:0040CE6F                 jz      short loc_40CE8B
.text:0040CE71
.text:0040CE71 loc_40CE71:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:0040CE71                 mov     [ebp+268h+Destination], bl
.text:0040CE74                 inc     esi
.text:0040CE75                 inc     ebp
.text:0040CE76                 movzx   ebx, byte ptr [esi]
.text:0040CE79                 test    bl, bl
.text:0040CE7B                 jz      loc_40CC09
.text:0040CE81                 cmp     bl, 2Fh ; '/'
.text:0040CE84                 jz      short loc_40CE8B
.text:0040CE86                 cmp     bl, 5Ch ; '\'
.text:0040CE89                 jnz     short loc_40CE71
.text:0040CE8B
.text:0040CE8B loc_40CE8B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040CE8B                                         ; _win32_longpath+2BF↑j ...
.text:0040CE8B                 test    bl, bl
.text:0040CE8D                 jz      loc_40CC09
.text:0040CE93                 mov     [ebp+268h+Destination], bl
.text:0040CE96                 inc     esi
.text:0040CE97                 inc     ebp
.text:0040CE98                 movzx   ebx, byte ptr [esi]
.text:0040CE9B                 test    bl, bl
.text:0040CE9D                 jz      loc_40CC09
.text:0040CEA3                 cmp     bl, 2Fh ; '/'
.text:0040CEA6                 jz      short loc_40CEF0
.text:0040CEA8                 cmp     bl, 5Ch ; '\'
.text:0040CEAB                 jz      short loc_40CEF0
.text:0040CEAD
.text:0040CEAD loc_40CEAD:                             ; CODE XREF: _win32_longpath+356↓j
.text:0040CEAD                 test    bl, bl
.text:0040CEAF                 jz      loc_40CC09
.text:0040CEB5                 cmp     bl, 2Fh ; '/'
.text:0040CEB8                 jz      loc_40CC09
.text:0040CEBE                 cmp     bl, 5Ch ; '\'
.text:0040CEC1                 jz      loc_40CC09
.text:0040CEC7
.text:0040CEC7 loc_40CEC7:                             ; CODE XREF: _win32_longpath+333↓j
.text:0040CEC7                 mov     [ebp+268h+Destination], bl
.text:0040CECA                 inc     esi
.text:0040CECB                 inc     ebp
.text:0040CECC                 movzx   ebx, byte ptr [esi]
.text:0040CECF                 test    bl, bl
.text:0040CED1                 jz      loc_40CC09
.text:0040CED7                 cmp     bl, 2Fh ; '/'
.text:0040CEDA                 jz      loc_40CC09
.text:0040CEE0                 cmp     bl, 5Ch ; '\'
.text:0040CEE3                 jnz     short loc_40CEC7
.text:0040CEE5                 jmp     loc_40CC09
.text:0040CEE5 ; ---------------------------------------------------------------------------
.text:0040CEEA                 align 10h
.text:0040CEF0
.text:0040CEF0 loc_40CEF0:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:0040CEF0                                         ; _win32_longpath+2FB↑j ...
.text:0040CEF0                 inc     esi
.text:0040CEF1                 movzx   ebx, byte ptr [esi]
.text:0040CEF4                 test    bl, bl
.text:0040CEF6                 jz      loc_40CC09
.text:0040CEFC                 cmp     bl, 2Fh ; '/'
.text:0040CEFF                 jz      short loc_40CEF0
.text:0040CF01                 cmp     bl, 5Ch ; '\'
.text:0040CF04                 jz      short loc_40CEF0
.text:0040CF06                 jmp     short loc_40CEAD
.text:0040CF08 ; ---------------------------------------------------------------------------
.text:0040CF08
.text:0040CF08 loc_40CF08:                             ; CODE XREF: _win32_longpath+29F↑j
.text:0040CF08                                         ; _win32_longpath+2A9↑j ...
.text:0040CF08                 inc     esi
.text:0040CF09                 movzx   ebx, byte ptr [esi]
.text:0040CF0C                 test    bl, bl
.text:0040CF0E                 jz      loc_40CC09
.text:0040CF14                 cmp     bl, 2Fh ; '/'
.text:0040CF17                 jz      short loc_40CF08
.text:0040CF19                 cmp     bl, 5Ch ; '\'
.text:0040CF1C                 jz      short loc_40CF08
.text:0040CF1E                 jmp     loc_40CE5F
.text:0040CF23 ; ---------------------------------------------------------------------------
.text:0040CF23
.text:0040CF23 loc_40CF23:                             ; CODE XREF: _win32_longpath+297↑j
.text:0040CF23                 movzx   ebx, byte ptr [esi]
.text:0040CF26                 jmp     loc_40CE5F
.text:0040CF2B ; ---------------------------------------------------------------------------
.text:0040CF2B
.text:0040CF2B loc_40CF2B:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040CF2B                 movzx   ecx, byte ptr [eax]
.text:0040CF2E                 mov     esi, eax
.text:0040CF30                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:0040CF35                 add     esi, 2
.text:0040CF38                 lea     ebp, [esp+12h]
.text:0040CF3C                 mov     [esp+278h+Destination], cl
.text:0040CF40                 jmp     loc_40CC09
.text:0040CF40 _win32_longpath endp
.text:0040CF40
.text:0040CF40 ; ---------------------------------------------------------------------------
.text:0040CF45                 align 10h
.text:0040CF50                 sub     esp, 0Ch
.text:0040CF53                 mov     edx, [esp+10h]
.text:0040CF57                 mov     dword ptr [esp+4], 0
.text:0040CF5F                 mov     [esp], edx
.text:0040CF62                 call    sub_40EB30
.text:0040CF67                 inc     eax
.text:0040CF68                 setnz   dl
.text:0040CF6B                 add     esp, 0Ch
.text:0040CF6E                 movzx   eax, dl
.text:0040CF71                 retn
.text:0040CF71 ; ---------------------------------------------------------------------------
.text:0040CF72                 align 10h
.text:0040CF80
.text:0040CF80 ; =============== S U B R O U T I N E =======================================
.text:0040CF80
.text:0040CF80
.text:0040CF80 sub_40CF80      proc near               ; CODE XREF: sub_40EA00+AA↓p
.text:0040CF80                                         ; sub_411290+B4↓p
.text:0040CF80
.text:0040CF80 arg_0           = dword ptr  4
.text:0040CF80
.text:0040CF80                 mov     ecx, [esp+arg_0]
.text:0040CF84                 mov     edx, ecx
.text:0040CF86                 movzx   eax, byte ptr [ecx]
.text:0040CF89                 test    al, al
.text:0040CF8B                 jz      short loc_40CF9C
.text:0040CF8D                 lea     esi, [esi+0]
.text:0040CF90
.text:0040CF90 loc_40CF90:                             ; CODE XREF: sub_40CF80+1A↓j
.text:0040CF90                 cmp     al, 5Ch ; '\'
.text:0040CF92                 jz      short loc_40CFA0
.text:0040CF94
.text:0040CF94 loc_40CF94:                             ; CODE XREF: sub_40CF80+23↓j
.text:0040CF94                 inc     edx
.text:0040CF95                 movzx   eax, byte ptr [edx]
.text:0040CF98                 test    al, al
.text:0040CF9A                 jnz     short loc_40CF90
.text:0040CF9C
.text:0040CF9C loc_40CF9C:                             ; CODE XREF: sub_40CF80+B↑j
.text:0040CF9C                 mov     eax, ecx
.text:0040CF9E                 retn
.text:0040CF9E ; ---------------------------------------------------------------------------
.text:0040CF9F                 align 10h
.text:0040CFA0
.text:0040CFA0 loc_40CFA0:                             ; CODE XREF: sub_40CF80+12↑j
.text:0040CFA0                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040CFA3                 jmp     short loc_40CF94
.text:0040CFA3 sub_40CF80      endp
.text:0040CFA3
.text:0040CFA3 ; ---------------------------------------------------------------------------
.text:0040CFA5                 align 10h
.text:0040CFB0                 push    ebx
.text:0040CFB1                 sub     esp, 8
.text:0040CFB4                 mov     ebx, [esp+14h]
.text:0040CFB8                 mov     edx, [esp+10h]
.text:0040CFBC                 mov     [esp], ebx
.text:0040CFBF                 mov     [esp+4], edx
.text:0040CFC3                 call    strcpy
.text:0040CFC8                 movzx   eax, byte ptr [ebx]
.text:0040CFCB                 mov     edx, ebx
.text:0040CFCD                 test    al, al
.text:0040CFCF                 jz      short loc_40CFEC
.text:0040CFD1                 jmp     short loc_40CFE0
.text:0040CFD1 ; ---------------------------------------------------------------------------
.text:0040CFD3                 align 10h
.text:0040CFE0
.text:0040CFE0 loc_40CFE0:                             ; CODE XREF: .text:0040CFD1↑j
.text:0040CFE0                                         ; .text:0040CFEA↓j
.text:0040CFE0                 cmp     al, 5Ch ; '\'
.text:0040CFE2                 jz      short loc_40CFF3
.text:0040CFE4
.text:0040CFE4 loc_40CFE4:                             ; CODE XREF: .text:0040CFF6↓j
.text:0040CFE4                 inc     edx
.text:0040CFE5                 movzx   eax, byte ptr [edx]
.text:0040CFE8                 test    al, al
.text:0040CFEA                 jnz     short loc_40CFE0
.text:0040CFEC
.text:0040CFEC loc_40CFEC:                             ; CODE XREF: .text:0040CFCF↑j
.text:0040CFEC                 add     esp, 8
.text:0040CFEF                 xor     eax, eax
.text:0040CFF1                 pop     ebx
.text:0040CFF2                 retn
.text:0040CFF3 ; ---------------------------------------------------------------------------
.text:0040CFF3
.text:0040CFF3 loc_40CFF3:                             ; CODE XREF: .text:0040CFE2↑j
.text:0040CFF3                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040CFF6                 jmp     short loc_40CFE4
.text:0040CFF6 ; ---------------------------------------------------------------------------
.text:0040CFF8                 align 10h
.text:0040D000
.text:0040D000 ; =============== S U B R O U T I N E =======================================
.text:0040D000
.text:0040D000
.text:0040D000 sub_40D000      proc near               ; CODE XREF: sub_40B880+16↑p
.text:0040D000                                         ; sub_40BD80+1F↑p ...
.text:0040D000
.text:0040D000 arg_0           = dword ptr  4
.text:0040D000
.text:0040D000                 mov     ecx, [esp+arg_0]
.text:0040D004                 mov     edx, ecx
.text:0040D006                 movzx   eax, byte ptr [ecx]
.text:0040D009                 test    al, al
.text:0040D00B                 jz      short loc_40D01C
.text:0040D00D                 lea     esi, [esi+0]
.text:0040D010
.text:0040D010 loc_40D010:                             ; CODE XREF: sub_40D000+1A↓j
.text:0040D010                 cmp     al, 2Fh ; '/'
.text:0040D012                 jz      short loc_40D020
.text:0040D014
.text:0040D014 loc_40D014:                             ; CODE XREF: sub_40D000+23↓j
.text:0040D014                 inc     edx
.text:0040D015                 movzx   eax, byte ptr [edx]
.text:0040D018                 test    al, al
.text:0040D01A                 jnz     short loc_40D010
.text:0040D01C
.text:0040D01C loc_40D01C:                             ; CODE XREF: sub_40D000+B↑j
.text:0040D01C                 mov     eax, ecx
.text:0040D01E                 retn
.text:0040D01E ; ---------------------------------------------------------------------------
.text:0040D01F                 align 10h
.text:0040D020
.text:0040D020 loc_40D020:                             ; CODE XREF: sub_40D000+12↑j
.text:0040D020                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D023                 jmp     short loc_40D014
.text:0040D023 sub_40D000      endp
.text:0040D023
.text:0040D023 ; ---------------------------------------------------------------------------
.text:0040D025                 align 10h
.text:0040D030                 push    ebx
.text:0040D031                 sub     esp, 8
.text:0040D034                 mov     ebx, [esp+14h]
.text:0040D038                 mov     edx, [esp+10h]
.text:0040D03C                 mov     [esp], ebx
.text:0040D03F                 mov     [esp+4], edx
.text:0040D043                 call    strcpy
.text:0040D048                 movzx   eax, byte ptr [ebx]
.text:0040D04B                 mov     edx, ebx
.text:0040D04D                 test    al, al
.text:0040D04F                 jz      short loc_40D06C
.text:0040D051                 jmp     short loc_40D060
.text:0040D051 ; ---------------------------------------------------------------------------
.text:0040D053                 align 10h
.text:0040D060
.text:0040D060 loc_40D060:                             ; CODE XREF: .text:0040D051↑j
.text:0040D060                                         ; .text:0040D06A↓j
.text:0040D060                 cmp     al, 2Fh ; '/'
.text:0040D062                 jz      short loc_40D073
.text:0040D064
.text:0040D064 loc_40D064:                             ; CODE XREF: .text:0040D076↓j
.text:0040D064                 inc     edx
.text:0040D065                 movzx   eax, byte ptr [edx]
.text:0040D068                 test    al, al
.text:0040D06A                 jnz     short loc_40D060
.text:0040D06C
.text:0040D06C loc_40D06C:                             ; CODE XREF: .text:0040D04F↑j
.text:0040D06C                 add     esp, 8
.text:0040D06F                 xor     eax, eax
.text:0040D071                 pop     ebx
.text:0040D072                 retn
.text:0040D073 ; ---------------------------------------------------------------------------
.text:0040D073
.text:0040D073 loc_40D073:                             ; CODE XREF: .text:0040D062↑j
.text:0040D073                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D076                 jmp     short loc_40D064
.text:0040D076 ; ---------------------------------------------------------------------------
.text:0040D078                 align 10h
.text:0040D080                 push    ebx
.text:0040D081                 sub     esp, 8
.text:0040D084                 mov     ebx, [esp+14h]
.text:0040D088                 mov     edx, [esp+10h]
.text:0040D08C                 mov     [esp+4], ebx
.text:0040D090                 mov     [esp], edx
.text:0040D093                 call    sub_40E9B0
.text:0040D098                 movzx   eax, byte ptr [ebx]
.text:0040D09B                 mov     edx, ebx
.text:0040D09D                 test    al, al
.text:0040D09F                 jz      short loc_40D0BC
.text:0040D0A1                 jmp     short loc_40D0B0
.text:0040D0A1 ; ---------------------------------------------------------------------------
.text:0040D0A3                 align 10h
.text:0040D0B0
.text:0040D0B0 loc_40D0B0:                             ; CODE XREF: .text:0040D0A1↑j
.text:0040D0B0                                         ; .text:0040D0BA↓j
.text:0040D0B0                 cmp     al, 2Fh ; '/'
.text:0040D0B2                 jz      short loc_40D0C3
.text:0040D0B4
.text:0040D0B4 loc_40D0B4:                             ; CODE XREF: .text:0040D0C6↓j
.text:0040D0B4                 inc     edx
.text:0040D0B5                 movzx   eax, byte ptr [edx]
.text:0040D0B8                 test    al, al
.text:0040D0BA                 jnz     short loc_40D0B0
.text:0040D0BC
.text:0040D0BC loc_40D0BC:                             ; CODE XREF: .text:0040D09F↑j
.text:0040D0BC                 add     esp, 8
.text:0040D0BF                 xor     eax, eax
.text:0040D0C1                 pop     ebx
.text:0040D0C2                 retn
.text:0040D0C3 ; ---------------------------------------------------------------------------
.text:0040D0C3
.text:0040D0C3 loc_40D0C3:                             ; CODE XREF: .text:0040D0B2↑j
.text:0040D0C3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D0C6                 jmp     short loc_40D0B4
.text:0040D0C6 ; ---------------------------------------------------------------------------
.text:0040D0C8                 align 10h
.text:0040D0D0                 push    ebx
.text:0040D0D1                 sub     esp, 8
.text:0040D0D4                 mov     ebx, [esp+14h]
.text:0040D0D8                 mov     edx, [esp+10h]
.text:0040D0DC                 mov     [esp], ebx
.text:0040D0DF                 mov     [esp+4], edx
.text:0040D0E3                 call    sub_40E9B0
.text:0040D0E8                 movzx   eax, byte ptr [ebx]
.text:0040D0EB                 mov     edx, ebx
.text:0040D0ED                 test    al, al
.text:0040D0EF                 jz      short loc_40D10C
.text:0040D0F1                 jmp     short loc_40D100
.text:0040D0F1 ; ---------------------------------------------------------------------------
.text:0040D0F3                 align 10h
.text:0040D100
.text:0040D100 loc_40D100:                             ; CODE XREF: .text:0040D0F1↑j
.text:0040D100                                         ; .text:0040D10A↓j
.text:0040D100                 cmp     al, 5Ch ; '\'
.text:0040D102                 jz      short loc_40D111
.text:0040D104
.text:0040D104 loc_40D104:                             ; CODE XREF: .text:0040D114↓j
.text:0040D104                 inc     edx
.text:0040D105                 movzx   eax, byte ptr [edx]
.text:0040D108                 test    al, al
.text:0040D10A                 jnz     short loc_40D100
.text:0040D10C
.text:0040D10C loc_40D10C:                             ; CODE XREF: .text:0040D0EF↑j
.text:0040D10C                 add     esp, 8
.text:0040D10F                 pop     ebx
.text:0040D110                 retn
.text:0040D111 ; ---------------------------------------------------------------------------
.text:0040D111
.text:0040D111 loc_40D111:                             ; CODE XREF: .text:0040D102↑j
.text:0040D111                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040D114                 jmp     short loc_40D104
.text:0040D114 ; ---------------------------------------------------------------------------
.text:0040D116                 align 10h
.text:0040D120
.text:0040D120 ; =============== S U B R O U T I N E =======================================
.text:0040D120
.text:0040D120
.text:0040D120 ; int __cdecl sub_40D120(LPSTR)
.text:0040D120 sub_40D120      proc near               ; CODE XREF: .text:0040D1AE↓p
.text:0040D120                                         ; .text:0040D1EE↓p ...
.text:0040D120
.text:0040D120 hModule         = dword ptr -1Ch
.text:0040D120 lpFilename      = dword ptr -18h
.text:0040D120 nSize           = dword ptr -14h
.text:0040D120 arg_0           = dword ptr  4
.text:0040D120
.text:0040D120                 push    esi
.text:0040D121                 push    ebx
.text:0040D122                 sub     esp, 14h
.text:0040D125                 mov     esi, [esp+1Ch+arg_0]
.text:0040D129                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:0040D131                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:0040D138                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040D13C                 call    GetModuleFileNameA
.text:0040D141                 sub     esp, 0Ch
.text:0040D144                 test    eax, eax
.text:0040D146                 jz      short loc_40D188
.text:0040D148                 cmp     eax, 104h
.text:0040D14D                 jg      short loc_40D179
.text:0040D14F
.text:0040D14F loc_40D14F:                             ; CODE XREF: sub_40D120+66↓j
.text:0040D14F                                         ; sub_40D120+78↓j
.text:0040D14F                 movzx   eax, byte ptr [esi]
.text:0040D152                 mov     edx, esi
.text:0040D154                 test    al, al
.text:0040D156                 jz      short loc_40D16C
.text:0040D158                 nop
.text:0040D159                 lea     esi, [esi+0]
.text:0040D160
.text:0040D160 loc_40D160:                             ; CODE XREF: sub_40D120+4A↓j
.text:0040D160                 cmp     al, 5Ch ; '\'
.text:0040D162                 jz      short loc_40D174
.text:0040D164
.text:0040D164 loc_40D164:                             ; CODE XREF: sub_40D120+57↓j
.text:0040D164                 inc     edx
.text:0040D165                 movzx   eax, byte ptr [edx]
.text:0040D168                 test    al, al
.text:0040D16A                 jnz     short loc_40D160
.text:0040D16C
.text:0040D16C loc_40D16C:                             ; CODE XREF: sub_40D120+36↑j
.text:0040D16C                 add     esp, 14h
.text:0040D16F                 mov     eax, esi
.text:0040D171                 pop     ebx
.text:0040D172                 pop     esi
.text:0040D173                 retn
.text:0040D174 ; ---------------------------------------------------------------------------
.text:0040D174
.text:0040D174 loc_40D174:                             ; CODE XREF: sub_40D120+42↑j
.text:0040D174                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040D177                 jmp     short loc_40D164
.text:0040D179 ; ---------------------------------------------------------------------------
.text:0040D179
.text:0040D179 loc_40D179:                             ; CODE XREF: sub_40D120+2D↑j
.text:0040D179                 call    _errno
.text:0040D17E                 mov     dword ptr [eax], 26h ; '&'
.text:0040D184                 xor     esi, esi
.text:0040D186                 jmp     short loc_40D14F
.text:0040D188 ; ---------------------------------------------------------------------------
.text:0040D188
.text:0040D188 loc_40D188:                             ; CODE XREF: sub_40D120+26↑j
.text:0040D188                 call    sub_40E990
.text:0040D18D                 mov     ebx, eax
.text:0040D18F                 xor     esi, esi
.text:0040D191                 call    _errno
.text:0040D196                 mov     [eax], ebx
.text:0040D198                 jmp     short loc_40D14F
.text:0040D198 sub_40D120      endp
.text:0040D198
.text:0040D198 ; ---------------------------------------------------------------------------
.text:0040D19A                 align 10h
.text:0040D1A0                 sub     esp, 0Ch
.text:0040D1A3                 mov     [esp+8], ebx
.text:0040D1A7                 mov     ebx, [esp+10h]
.text:0040D1AB                 mov     [esp], ebx
.text:0040D1AE                 call    sub_40D120
.text:0040D1B3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040D1BB                 mov     [esp], ebx
.text:0040D1BE                 call    strrchr
.text:0040D1C3                 test    eax, eax
.text:0040D1C5                 jz      short loc_40D1CA
.text:0040D1C7                 lea     ebx, [eax+1]
.text:0040D1CA
.text:0040D1CA loc_40D1CA:                             ; CODE XREF: .text:0040D1C5↑j
.text:0040D1CA                 mov     eax, ebx
.text:0040D1CC                 mov     ebx, [esp+8]
.text:0040D1D0                 add     esp, 0Ch
.text:0040D1D3                 retn
.text:0040D1D3 ; ---------------------------------------------------------------------------
.text:0040D1D4                 align 10h
.text:0040D1E0                 sub     esp, 0Ch
.text:0040D1E3                 mov     [esp+8], ebx
.text:0040D1E7                 mov     ebx, [esp+10h]
.text:0040D1EB                 mov     [esp], ebx
.text:0040D1EE                 call    sub_40D120
.text:0040D1F3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040D1FB                 mov     [esp], ebx
.text:0040D1FE                 call    strrchr
.text:0040D203                 test    eax, eax
.text:0040D205                 jz      short loc_40D20A
.text:0040D207                 mov     byte ptr [eax], 0
.text:0040D20A
.text:0040D20A loc_40D20A:                             ; CODE XREF: .text:0040D205↑j
.text:0040D20A                 mov     eax, ebx
.text:0040D20C                 mov     ebx, [esp+8]
.text:0040D210                 add     esp, 0Ch
.text:0040D213                 retn
.text:0040D213 ; ---------------------------------------------------------------------------
.text:0040D214                 align 10h
.text:0040D220                 sub     esp, 0Ch
.text:0040D223                 mov     [esp+8], ebx
.text:0040D227                 mov     ebx, [esp+10h]
.text:0040D22B                 mov     [esp], ebx
.text:0040D22E                 call    sub_40D120
.text:0040D233                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040D23B                 mov     [esp], ebx
.text:0040D23E                 call    strrchr
.text:0040D243                 test    eax, eax
.text:0040D245                 jz      short loc_40D24A
.text:0040D247                 mov     byte ptr [eax], 0
.text:0040D24A
.text:0040D24A loc_40D24A:                             ; CODE XREF: .text:0040D245↑j
.text:0040D24A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040D252                 mov     [esp], ebx
.text:0040D255                 call    strrchr
.text:0040D25A                 test    eax, eax
.text:0040D25C                 jz      short loc_40D261
.text:0040D25E                 mov     byte ptr [eax], 0
.text:0040D261
.text:0040D261 loc_40D261:                             ; CODE XREF: .text:0040D25C↑j
.text:0040D261                 mov     eax, ebx
.text:0040D263                 mov     ebx, [esp+8]
.text:0040D267                 add     esp, 0Ch
.text:0040D26A                 retn
.text:0040D26A ; ---------------------------------------------------------------------------
.text:0040D26B                 align 10h
.text:0040D270                 sub     esp, 1Ch
.text:0040D273                 mov     edx, [esp+20h]
.text:0040D277                 mov     [esp+10h], ebx
.text:0040D27B                 xor     ebx, ebx
.text:0040D27D                 mov     [esp+14h], esi
.text:0040D281                 mov     [esp+18h], edi
.text:0040D285                 mov     [esp], edx
.text:0040D288                 call    sub_40E9E0
.text:0040D28D                 mov     edx, [esp+24h]
.text:0040D291                 mov     edi, eax
.text:0040D293                 mov     [esp], edx
.text:0040D296                 call    sub_40E9E0
.text:0040D29B                 mov     [esp+4], eax
.text:0040D29F                 mov     esi, eax
.text:0040D2A1                 mov     [esp], edi
.text:0040D2A4                 call    _stricmp_0
.text:0040D2A9                 mov     [esp], edi
.text:0040D2AC                 test    eax, eax
.text:0040D2AE                 setz    bl
.text:0040D2B1                 call    free
.text:0040D2B6                 mov     [esp], esi
.text:0040D2B9                 call    free
.text:0040D2BE                 mov     eax, ebx
.text:0040D2C0                 mov     esi, [esp+14h]
.text:0040D2C4                 mov     ebx, [esp+10h]
.text:0040D2C8                 mov     edi, [esp+18h]
.text:0040D2CC                 add     esp, 1Ch
.text:0040D2CF                 retn
.text:0040D2D0 ; ---------------------------------------------------------------------------
.text:0040D2D0                 xor     eax, eax
.text:0040D2D2                 retn
.text:0040D2D2 ; ---------------------------------------------------------------------------
.text:0040D2D3 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:0040D307↓o
.text:0040D2E0 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:0040D316↓o
.text:0040D2F0 ; ---------------------------------------------------------------------------
.text:0040D2F0                 sub     esp, 1Ch
.text:0040D2F3                 mov     [esp+10h], ebx
.text:0040D2F7                 mov     ebx, [esp+20h]
.text:0040D2FB                 mov     [esp+18h], edi
.text:0040D2FF                 mov     edi, [esp+24h]
.text:0040D303                 mov     [esp+14h], esi
.text:0040D307                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040D30E                 call    GetModuleHandleA
.text:0040D313                 sub     esp, 4
.text:0040D316                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040D31E                 mov     [esp], eax
.text:0040D321                 call    GetProcAddress
.text:0040D326                 sub     esp, 8
.text:0040D329                 test    eax, eax
.text:0040D32B                 jz      short loc_40D343
.text:0040D32D                 mov     dword ptr [esp+8], 104h
.text:0040D335                 mov     [esp+4], ebx
.text:0040D339                 mov     [esp], edi
.text:0040D33C                 call    eax
.text:0040D33E                 sub     esp, 0Ch
.text:0040D341                 mov     esi, eax
.text:0040D343
.text:0040D343 loc_40D343:                             ; CODE XREF: .text:0040D32B↑j
.text:0040D343                 test    esi, esi
.text:0040D345                 jz      short loc_40D360
.text:0040D347
.text:0040D347 loc_40D347:                             ; CODE XREF: .text:0040D37B↓j
.text:0040D347                 mov     eax, ebx
.text:0040D349                 mov     esi, [esp+14h]
.text:0040D34D                 mov     ebx, [esp+10h]
.text:0040D351                 mov     edi, [esp+18h]
.text:0040D355                 add     esp, 1Ch
.text:0040D358                 retn
.text:0040D358 ; ---------------------------------------------------------------------------
.text:0040D359                 align 10h
.text:0040D360
.text:0040D360 loc_40D360:                             ; CODE XREF: .text:0040D345↑j
.text:0040D360                 call    sub_40F470
.text:0040D365                 mov     [esp], ebx
.text:0040D368                 mov     [esp+4], edi
.text:0040D36C                 call    strcpy
.text:0040D371                 mov     [esp], ebx
.text:0040D374                 call    _win32_longpath
.text:0040D379                 mov     ebx, eax
.text:0040D37B                 jmp     short loc_40D347
.text:0040D37B ; ---------------------------------------------------------------------------
.text:0040D37D                 align 10h
.text:0040D380                 sub     esp, 1Ch
.text:0040D383                 mov     [esp+18h], edi
.text:0040D387                 mov     edi, [esp+20h]
.text:0040D38B                 mov     [esp+10h], ebx
.text:0040D38F                 mov     [esp+14h], esi
.text:0040D393                 mov     dword ptr [esp+8], 0
.text:0040D39B                 mov     dword ptr [esp+4], 0
.text:0040D3A3                 mov     [esp], edi
.text:0040D3A6                 call    GetShortPathNameA
.text:0040D3AB                 sub     esp, 0Ch
.text:0040D3AE                 mov     ebx, eax
.text:0040D3B0                 test    eax, eax
.text:0040D3B2                 jz      short loc_40D400
.text:0040D3B4                 lea     edx, [eax+1]
.text:0040D3B7                 mov     [esp], edx
.text:0040D3BA                 call    malloc
.text:0040D3BF                 test    eax, eax
.text:0040D3C1                 mov     esi, eax
.text:0040D3C3                 jz      short loc_40D400
.text:0040D3C5                 mov     [esp+8], ebx
.text:0040D3C9                 mov     [esp+4], eax
.text:0040D3CD                 mov     [esp], edi
.text:0040D3D0                 call    GetShortPathNameA
.text:0040D3D5                 sub     esp, 0Ch
.text:0040D3D8                 mov     edx, esi
.text:0040D3DA                 test    eax, eax
.text:0040D3DC                 jz      short loc_40D3F2
.text:0040D3DE                 mov     esi, esi
.text:0040D3E0
.text:0040D3E0 loc_40D3E0:                             ; CODE XREF: .text:0040D410↓j
.text:0040D3E0                 mov     ebx, [esp+10h]
.text:0040D3E4                 mov     eax, edx
.text:0040D3E6                 mov     esi, [esp+14h]
.text:0040D3EA                 mov     edi, [esp+18h]
.text:0040D3EE                 add     esp, 1Ch
.text:0040D3F1                 retn
.text:0040D3F2 ; ---------------------------------------------------------------------------
.text:0040D3F2
.text:0040D3F2 loc_40D3F2:                             ; CODE XREF: .text:0040D3DC↑j
.text:0040D3F2                 mov     [esp], esi
.text:0040D3F5                 call    free
.text:0040D3FA                 lea     esi, [esi+0]
.text:0040D400
.text:0040D400 loc_40D400:                             ; CODE XREF: .text:0040D3B2↑j
.text:0040D400                                         ; .text:0040D3C3↑j
.text:0040D400                 call    sub_40E990
.text:0040D405                 mov     esi, eax
.text:0040D407                 call    _errno
.text:0040D40C                 mov     [eax], esi
.text:0040D40E                 mov     edx, edi
.text:0040D410                 jmp     short loc_40D3E0
.text:0040D410 ; ---------------------------------------------------------------------------
.text:0040D412                 align 10h
.text:0040D420 ; const char String[4]
.text:0040D420 String          db ' :/',0              ; DATA XREF: sub_40D430+FA↓o
.text:0040D424                 align 10h
.text:0040D430
.text:0040D430 ; =============== S U B R O U T I N E =======================================
.text:0040D430
.text:0040D430
.text:0040D430 ; int __cdecl sub_40D430(LPCSTR)
.text:0040D430 sub_40D430      proc near               ; CODE XREF: sub_40B880+E↑p
.text:0040D430                                         ; sub_40BD80+17↑p ...
.text:0040D430
.text:0040D430 Str             = dword ptr -1Ch
.text:0040D430 Val             = dword ptr -18h
.text:0040D430 Count           = dword ptr -14h
.text:0040D430 var_10          = dword ptr -10h
.text:0040D430 var_C           = dword ptr -0Ch
.text:0040D430 var_8           = dword ptr -8
.text:0040D430 var_4           = dword ptr -4
.text:0040D430 arg_0           = dword ptr  4
.text:0040D430
.text:0040D430                 sub     esp, 1Ch
.text:0040D433                 mov     edx, [esp+1Ch+arg_0]
.text:0040D437                 mov     [esp+1Ch+var_8], edi
.text:0040D43B                 mov     [esp+1Ch+var_10], ebx
.text:0040D43F                 mov     [esp+1Ch+var_C], esi
.text:0040D443                 mov     [esp+1Ch+var_4], ebp
.text:0040D447                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040D44A                 call    sub_40E9E0
.text:0040D44F                 test    eax, eax
.text:0040D451                 mov     edi, eax
.text:0040D453                 jz      short loc_40D490
.text:0040D455                 mov     [esp+1Ch+Str], eax ; Str
.text:0040D458                 call    strlen
.text:0040D45D                 cmp     eax, 2
.text:0040D460                 jbe     short loc_40D46C
.text:0040D462                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040D466                 jz      loc_40D520
.text:0040D46C
.text:0040D46C loc_40D46C:                             ; CODE XREF: sub_40D430+30↑j
.text:0040D46C                                         ; sub_40D430+F4↓j
.text:0040D46C                 test    edi, edi
.text:0040D46E                 jz      short loc_40D490
.text:0040D470                 mov     [esp+1Ch+Str], edi ; Str
.text:0040D473                 call    strlen
.text:0040D478                 cmp     eax, 4
.text:0040D47B                 mov     ebp, eax
.text:0040D47D                 jle     short loc_40D490
.text:0040D47F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040D482                 jz      short loc_40D4B0
.text:0040D484                 lea     esi, [esi+0]
.text:0040D48A                 lea     edi, [edi+0]
.text:0040D490
.text:0040D490 loc_40D490:                             ; CODE XREF: sub_40D430+23↑j
.text:0040D490                                         ; sub_40D430+3E↑j ...
.text:0040D490                 xor     esi, esi
.text:0040D492
.text:0040D492 loc_40D492:                             ; CODE XREF: sub_40D430+CD↓j
.text:0040D492                                         ; sub_40D430+115↓j
.text:0040D492                 mov     [esp+1Ch+Str], edi ; Block
.text:0040D495                 call    free
.text:0040D49A                 mov     eax, esi
.text:0040D49C                 mov     ebx, [esp+1Ch+var_10]
.text:0040D4A0                 mov     esi, [esp+1Ch+var_C]
.text:0040D4A4                 mov     edi, [esp+1Ch+var_8]
.text:0040D4A8                 mov     ebp, [esp+1Ch+var_4]
.text:0040D4AC                 add     esp, 1Ch
.text:0040D4AF                 retn
.text:0040D4B0 ; ---------------------------------------------------------------------------
.text:0040D4B0
.text:0040D4B0 loc_40D4B0:                             ; CODE XREF: sub_40D430+52↑j
.text:0040D4B0                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:0040D4B4                 jnz     short loc_40D490
.text:0040D4B6                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040D4BE                 lea     ecx, [edi+2]
.text:0040D4C1                 mov     [esp+1Ch+Str], ecx ; Str
.text:0040D4C4                 call    strchr
.text:0040D4C9                 test    eax, eax
.text:0040D4CB                 jnz     short loc_40D4FF
.text:0040D4CD
.text:0040D4CD loc_40D4CD:                             ; CODE XREF: sub_40D430+E2↓j
.text:0040D4CD                 inc     ebp
.text:0040D4CE
.text:0040D4CE loc_40D4CE:                             ; CODE XREF: sub_40D430+E9↓j
.text:0040D4CE                 mov     [esp+1Ch+Val], 1 ; Size
.text:0040D4D6                 lea     ebx, [ebp+1]
.text:0040D4D9                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040D4DC                 call    calloc
.text:0040D4E1                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040D4E4                 mov     esi, eax
.text:0040D4E6                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040D4EA                 mov     [esp+1Ch+Val], edi ; Source
.text:0040D4EE                 call    strncpy
.text:0040D4F3                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:0040D4F8                 mov     byte ptr [ebp+esi+0], 0
.text:0040D4FD                 jmp     short loc_40D492
.text:0040D4FF ; ---------------------------------------------------------------------------
.text:0040D4FF
.text:0040D4FF loc_40D4FF:                             ; CODE XREF: sub_40D430+9B↑j
.text:0040D4FF                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040D507                 inc     eax
.text:0040D508                 mov     [esp+1Ch+Str], eax ; Str
.text:0040D50B                 call    strchr
.text:0040D510                 test    eax, eax
.text:0040D512                 jz      short loc_40D4CD
.text:0040D514                 sub     eax, edi
.text:0040D516                 lea     ebp, [eax+1]
.text:0040D519                 jmp     short loc_40D4CE
.text:0040D519 ; ---------------------------------------------------------------------------
.text:0040D51B                 align 10h
.text:0040D520
.text:0040D520 loc_40D520:                             ; CODE XREF: sub_40D430+36↑j
.text:0040D520                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:0040D524                 jnz     loc_40D46C
.text:0040D52A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:0040D531                 call    _strdup
.text:0040D536                 movsx   edx, byte ptr [edi]
.text:0040D539                 mov     esi, eax
.text:0040D53B                 mov     [esp+1Ch+Str], edx ; C
.text:0040D53E                 call    toupper
.text:0040D543                 mov     [esi], al
.text:0040D545                 jmp     loc_40D492
.text:0040D545 sub_40D430      endp
.text:0040D545
.text:0040D545 ; ---------------------------------------------------------------------------
.text:0040D54A                 align 10h
.text:0040D550
.text:0040D550 ; =============== S U B R O U T I N E =======================================
.text:0040D550
.text:0040D550
.text:0040D550 sub_40D550      proc near               ; CODE XREF: .text:0040D6A4↓p
.text:0040D550                                         ; .text:0040D788↓p
.text:0040D550
.text:0040D550 Str             = dword ptr -2Ch
.text:0040D550 Val             = dword ptr -28h
.text:0040D550 var_18          = dword ptr -18h
.text:0040D550 var_11          = byte ptr -11h
.text:0040D550 arg_0           = dword ptr  4
.text:0040D550
.text:0040D550                 push    ebp
.text:0040D551                 push    edi
.text:0040D552                 push    esi
.text:0040D553                 push    ebx
.text:0040D554                 sub     esp, 1Ch
.text:0040D557                 mov     edx, [esp+2Ch+arg_0]
.text:0040D55B                 cmp     edx, ds:dword_415490
.text:0040D561                 mov     [esp+2Ch+var_11], 0
.text:0040D566                 jz      loc_40D664
.text:0040D56C                 mov     ebx, ds:dword_415480
.text:0040D572                 test    ebx, ebx
.text:0040D574                 jz      short loc_40D5E2
.text:0040D576
.text:0040D576 loc_40D576:                             ; CODE XREF: sub_40D550+10F↓j
.text:0040D576                 mov     ebx, [esp+2Ch+arg_0]
.text:0040D57A                 xor     edi, edi
.text:0040D57C                 xor     esi, esi
.text:0040D57E                 mov     ebp, offset dword_4154A8
.text:0040D583                 lea     esi, [esi+0]
.text:0040D589                 lea     edi, [edi+0]
.text:0040D590
.text:0040D590 loc_40D590:                             ; CODE XREF: sub_40D550+60↓j
.text:0040D590                 mov     edx, [ebp+4]
.text:0040D593                 mov     ecx, edi
.text:0040D595                 mov     eax, [ebp+0]
.text:0040D598                 shl     ecx, 4
.text:0040D59B                 mov     [esp+2Ch+var_18], ecx
.text:0040D59F                 mov     ecx, edx
.text:0040D5A1                 xor     eax, ebx
.text:0040D5A3                 xor     ecx, esi
.text:0040D5A5                 or      ecx, eax
.text:0040D5A7                 jz      short loc_40D5D1
.text:0040D5A9                 inc     edi
.text:0040D5AA                 add     ebp, 10h
.text:0040D5AD                 cmp     edi, 20h ; ' '
.text:0040D5B0                 jle     short loc_40D590
.text:0040D5B2
.text:0040D5B2 loc_40D5B2:                             ; CODE XREF: sub_40D550+90↓j
.text:0040D5B2                 movzx   ebx, [esp+2Ch+var_11]
.text:0040D5B7                 mov     eax, [esp+2Ch+arg_0]
.text:0040D5BB                 mov     byte_414080, bl
.text:0040D5C1                 mov     ds:dword_415490, eax
.text:0040D5C6                 movsx   eax, bl
.text:0040D5C9
.text:0040D5C9 loc_40D5C9:                             ; CODE XREF: sub_40D550+11B↓j
.text:0040D5C9                 add     esp, 1Ch
.text:0040D5CC                 pop     ebx
.text:0040D5CD                 pop     esi
.text:0040D5CE                 pop     edi
.text:0040D5CF                 pop     ebp
.text:0040D5D0                 retn
.text:0040D5D1 ; ---------------------------------------------------------------------------
.text:0040D5D1
.text:0040D5D1 loc_40D5D1:                             ; CODE XREF: sub_40D550+57↑j
.text:0040D5D1                 mov     edx, [esp+2Ch+var_18]
.text:0040D5D5                 movzx   eax, byte ptr ds:dword_4154A0[edx]
.text:0040D5DC                 mov     [esp+2Ch+var_11], al
.text:0040D5E0                 jmp     short loc_40D5B2
.text:0040D5E2 ; ---------------------------------------------------------------------------
.text:0040D5E2
.text:0040D5E2 loc_40D5E2:                             ; CODE XREF: sub_40D550+24↑j
.text:0040D5E2                 mov     [esp+2Ch+Str], 0
.text:0040D5E9                 call    sub_410250
.text:0040D5EE                 test    eax, eax
.text:0040D5F0                 mov     ebx, eax
.text:0040D5F2                 jz      short loc_40D64C
.text:0040D5F4                 movzx   ecx, byte ptr [eax]
.text:0040D5F7                 mov     esi, 0FFFFFFF0h
.text:0040D5FC                 test    cl, cl
.text:0040D5FE                 jz      short loc_40D64C
.text:0040D600
.text:0040D600 loc_40D600:                             ; CODE XREF: sub_40D550+FA↓j
.text:0040D600                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:0040D603                 movsx   ebp, cl
.text:0040D606                 add     esi, 10h
.text:0040D609                 mov     ds:dword_4154A0[esi], ebp
.text:0040D60F                 mov     edi, ebp
.text:0040D611                 sar     edi, 1Fh
.text:0040D614                 mov     ds:dword_4154A4[esi], edi
.text:0040D61A                 call    sub_40BD80
.text:0040D61F                 mov     ds:dword_4154A8[esi], eax
.text:0040D625                 xor     ecx, ecx
.text:0040D627                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040D62A                 mov     ds:dword_4154AC[esi], ecx
.text:0040D630                 mov     [esp+2Ch+Val], 0 ; Val
.text:0040D638                 call    strchr
.text:0040D63D                 mov     ebx, eax
.text:0040D63F                 inc     ebx
.text:0040D640                 jz      short loc_40D64C
.text:0040D642                 movzx   edx, byte ptr [eax+1]
.text:0040D646                 test    dl, dl
.text:0040D648                 mov     cl, dl
.text:0040D64A                 jnz     short loc_40D600
.text:0040D64C
.text:0040D64C loc_40D64C:                             ; CODE XREF: sub_40D550+A2↑j
.text:0040D64C                                         ; sub_40D550+AE↑j ...
.text:0040D64C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040D64F                 mov     esi, 1
.text:0040D654                 mov     ds:dword_415480, esi
.text:0040D65A                 call    free
.text:0040D65F                 jmp     loc_40D576
.text:0040D664 ; ---------------------------------------------------------------------------
.text:0040D664
.text:0040D664 loc_40D664:                             ; CODE XREF: sub_40D550+16↑j
.text:0040D664                 movsx   eax, byte_414080
.text:0040D66B                 jmp     loc_40D5C9
.text:0040D66B sub_40D550      endp
.text:0040D66B
.text:0040D66B ; ---------------------------------------------------------------------------
.text:0040D670 dword_40D670    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:0040D670                                         ; DATA XREF: .text:0040D693↓o
.text:0040D670                                         ; .text:0040D773↓o
.text:0040D680 ; ---------------------------------------------------------------------------
.text:0040D680                 sub     esp, 1Ch
.text:0040D683                 mov     [esp+14h], esi
.text:0040D687                 mov     esi, [esp+20h]
.text:0040D68B                 mov     [esp+18h], edi
.text:0040D68F                 mov     [esp+10h], ebx
.text:0040D693                 mov     dword ptr [esp], offset dword_40D670
.text:0040D69A                 call    _strdup
.text:0040D69F                 mov     [esp], esi
.text:0040D6A2                 mov     edi, eax
.text:0040D6A4                 call    sub_40D550
.text:0040D6A9                 mov     [edi], al
.text:0040D6AB                 test    al, al
.text:0040D6AD                 jz      short loc_40D6C1
.text:0040D6AF                 mov     eax, edi
.text:0040D6B1                 mov     ebx, [esp+10h]
.text:0040D6B5                 mov     esi, [esp+14h]
.text:0040D6B9                 mov     edi, [esp+18h]
.text:0040D6BD                 add     esp, 1Ch
.text:0040D6C0                 retn
.text:0040D6C1 ; ---------------------------------------------------------------------------
.text:0040D6C1
.text:0040D6C1 loc_40D6C1:                             ; CODE XREF: .text:0040D6AD↑j
.text:0040D6C1                 mov     [esp], edi
.text:0040D6C4                 call    free
.text:0040D6C9                 mov     dword ptr [esp+4], 0
.text:0040D6D1                 mov     dword ptr [esp], 0
.text:0040D6D8                 call    GetCurrentDirectoryA
.text:0040D6DD                 sub     esp, 8
.text:0040D6E0                 lea     esi, [eax+1]
.text:0040D6E3                 mov     [esp], esi
.text:0040D6E6                 call    malloc
.text:0040D6EB                 mov     [esp+4], eax
.text:0040D6EF                 mov     edi, eax
.text:0040D6F1                 mov     [esp], esi
.text:0040D6F4                 call    GetCurrentDirectoryA
.text:0040D6F9                 sub     esp, 8
.text:0040D6FC                 test    eax, eax
.text:0040D6FE                 jnz     short loc_40D720
.text:0040D700                 mov     dword ptr [esp+20h], 40D674h
.text:0040D708                 mov     ebx, [esp+10h]
.text:0040D70C                 mov     esi, [esp+14h]
.text:0040D710                 mov     edi, [esp+18h]
.text:0040D714                 add     esp, 1Ch
.text:0040D717                 jmp     _strdup
.text:0040D717 ; ---------------------------------------------------------------------------
.text:0040D71C                 align 10h
.text:0040D720
.text:0040D720 loc_40D720:                             ; CODE XREF: .text:0040D6FE↑j
.text:0040D720                 mov     [esp+20h], edi
.text:0040D724                 mov     ebx, [esp+10h]
.text:0040D728                 mov     esi, [esp+14h]
.text:0040D72C                 mov     edi, [esp+18h]
.text:0040D730                 add     esp, 1Ch
.text:0040D733                 jmp     sub_40D430
.text:0040D733 ; ---------------------------------------------------------------------------
.text:0040D738                 align 10h
.text:0040D740                 sub     esp, 7Ch
.text:0040D743                 lea     edx, [esp+10h]
.text:0040D747                 mov     [esp+8], edx
.text:0040D74B                 mov     edx, [esp+80h]
.text:0040D752                 mov     [esp+70h], ebx
.text:0040D756                 mov     [esp+74h], esi
.text:0040D75A                 mov     [esp+4], edx
.text:0040D75E                 mov     [esp+78h], edi
.text:0040D762                 mov     dword ptr [esp], 0
.text:0040D769                 call    sub_40AFD0
.text:0040D76E                 xor     edx, edx
.text:0040D770                 inc     eax
.text:0040D771                 jz      short loc_40D795
.text:0040D773                 mov     dword ptr [esp], offset dword_40D670
.text:0040D77A                 mov     esi, [esp+20h]
.text:0040D77E                 call    _strdup
.text:0040D783                 mov     edi, eax
.text:0040D785                 mov     [esp], esi
.text:0040D788                 call    sub_40D550
.text:0040D78D                 mov     [edi], al
.text:0040D78F                 test    al, al
.text:0040D791                 mov     edx, edi
.text:0040D793                 jz      short loc_40D7A7
.text:0040D795
.text:0040D795 loc_40D795:                             ; CODE XREF: .text:0040D771↑j
.text:0040D795                                         ; .text:0040D7F4↓j
.text:0040D795                 mov     ebx, [esp+70h]
.text:0040D799                 mov     eax, edx
.text:0040D79B                 mov     esi, [esp+74h]
.text:0040D79F                 mov     edi, [esp+78h]
.text:0040D7A3                 add     esp, 7Ch
.text:0040D7A6                 retn
.text:0040D7A7 ; ---------------------------------------------------------------------------
.text:0040D7A7
.text:0040D7A7 loc_40D7A7:                             ; CODE XREF: .text:0040D793↑j
.text:0040D7A7                 mov     [esp], edi
.text:0040D7AA                 call    free
.text:0040D7AF                 mov     dword ptr [esp+4], 0
.text:0040D7B7                 mov     dword ptr [esp], 0
.text:0040D7BE                 call    GetCurrentDirectoryA
.text:0040D7C3                 sub     esp, 8
.text:0040D7C6                 lea     esi, [eax+1]
.text:0040D7C9                 mov     [esp], esi
.text:0040D7CC                 call    malloc
.text:0040D7D1                 mov     [esp+4], eax
.text:0040D7D5                 mov     edi, eax
.text:0040D7D7                 mov     [esp], esi
.text:0040D7DA                 call    GetCurrentDirectoryA
.text:0040D7DF                 sub     esp, 8
.text:0040D7E2                 test    eax, eax
.text:0040D7E4                 jnz     short loc_40D7F6
.text:0040D7E6                 mov     dword ptr [esp], 40D674h
.text:0040D7ED                 call    _strdup
.text:0040D7F2
.text:0040D7F2 loc_40D7F2:                             ; CODE XREF: .text:0040D7FE↓j
.text:0040D7F2                 mov     edx, eax
.text:0040D7F4                 jmp     short loc_40D795
.text:0040D7F6 ; ---------------------------------------------------------------------------
.text:0040D7F6
.text:0040D7F6 loc_40D7F6:                             ; CODE XREF: .text:0040D7E4↑j
.text:0040D7F6                 mov     [esp], edi
.text:0040D7F9                 call    sub_40D430
.text:0040D7FE                 jmp     short loc_40D7F2
.text:0040D800
.text:0040D800 ; =============== S U B R O U T I N E =======================================
.text:0040D800
.text:0040D800
.text:0040D800 ; int __cdecl sub_40D800(LPCSTR)
.text:0040D800 sub_40D800      proc near               ; CODE XREF: sub_40AFD0+38F↑p
.text:0040D800
.text:0040D800 String1         = dword ptr -1Ch
.text:0040D800 String2         = dword ptr -18h
.text:0040D800 var_C           = dword ptr -0Ch
.text:0040D800 var_8           = dword ptr -8
.text:0040D800 var_4           = dword ptr -4
.text:0040D800 arg_0           = dword ptr  4
.text:0040D800
.text:0040D800                 sub     esp, 1Ch
.text:0040D803                 mov     [esp+1Ch+var_4], edi
.text:0040D807                 mov     edi, [esp+1Ch+arg_0]
.text:0040D80B                 mov     [esp+1Ch+var_C], ebx
.text:0040D80F                 mov     [esp+1Ch+var_8], esi
.text:0040D813                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040D816                 call    sub_40E9E0
.text:0040D81B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040D81E                 mov     esi, eax
.text:0040D820                 call    sub_40D430
.text:0040D825                 mov     [esp+1Ch+String2], eax ; String2
.text:0040D829                 mov     ebx, eax
.text:0040D82B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040D82E                 call    _stricmp
.text:0040D833                 test    eax, eax
.text:0040D835                 setz    dl
.text:0040D838                 test    esi, esi
.text:0040D83A                 movzx   edi, dl
.text:0040D83D                 jz      short loc_40D847
.text:0040D83F                 mov     [esp+1Ch+String1], esi ; Block
.text:0040D842                 call    free
.text:0040D847
.text:0040D847 loc_40D847:                             ; CODE XREF: sub_40D800+3D↑j
.text:0040D847                 test    ebx, ebx
.text:0040D849                 jz      short loc_40D853
.text:0040D84B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040D84E                 call    free
.text:0040D853
.text:0040D853 loc_40D853:                             ; CODE XREF: sub_40D800+49↑j
.text:0040D853                 mov     eax, edi
.text:0040D855                 mov     ebx, [esp+1Ch+var_C]
.text:0040D859                 mov     esi, [esp+1Ch+var_8]
.text:0040D85D                 mov     edi, [esp+1Ch+var_4]
.text:0040D861                 add     esp, 1Ch
.text:0040D864                 retn
.text:0040D864 sub_40D800      endp
.text:0040D864
.text:0040D864 ; ---------------------------------------------------------------------------
.text:0040D865                 align 10h
.text:0040D870 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:0040D8C1↓o
.text:0040D879 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:0040D879                                         ; DATA XREF: .text:0040D8D2↓o
.text:0040D88D ; const CHAR aVwin32[]
.text:0040D88D aVwin32         db '\\.\vwin32',0       ; DATA XREF: .text:0040DA1C↓o
.text:0040D88D                                         ; sub_40DE50+17C↓o
.text:0040D898 ; ---------------------------------------------------------------------------
.text:0040D898
.text:0040D898 loc_40D898:                             ; DATA XREF: .text:0040DB32↓o
.text:0040D898                 dec     esi
.text:0040D899                 push    esp
.text:0040D89A                 inc     esi
.text:0040D89B                 push    ebx
.text:0040D89C                 add     [esi+41h], al
.text:0040D89F                 push    esp
.text:0040D8A0                 xor     esi, [edx]
.text:0040D8A2                 add     [esi+41h], al
.text:0040D8A5                 push    esp
.text:0040D8A6                 add     [ebx+44h], al
.text:0040D8A9                 inc     esi
.text:0040D8AA                 push    ebx
.text:0040D8AB
.text:0040D8AB loc_40D8AB:                             ; CODE XREF: sub_40DE50+101↓p
.text:0040D8AB                 add     [ebp+55002674h], cl
.text:0040D8B1                 push    edi
.text:0040D8B2                 push    esi
.text:0040D8B3                 push    ebx
.text:0040D8B4                 sub     esp, 8BCh
.text:0040D8BA                 mov     ebp, [esp+8D0h]
.text:0040D8C1                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:0040D8C8                 call    LoadLibraryA
.text:0040D8CD                 sub     esp, 4
.text:0040D8D0                 mov     edi, eax
.text:0040D8D2                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040D8DA                 mov     [esp], eax
.text:0040D8DD                 call    GetProcAddress
.text:0040D8E2                 sub     esp, 8
.text:0040D8E5                 mov     esi, eax
.text:0040D8E7                 test    ebp, ebp
.text:0040D8E9                 mov     dword ptr [esp+20h], 0
.text:0040D8F1                 jz      loc_40DE31
.text:0040D8F7                 mov     [esp], ebp
.text:0040D8FA                 call    sub_40D000
.text:0040D8FF                 mov     [esp], eax
.text:0040D902                 mov     ebp, eax
.text:0040D904                 call    strlen
.text:0040D909                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040D90E                 mov     ebx, eax
.text:0040D910                 jz      short loc_40D92C
.text:0040D912                 mov     [esp], ebp
.text:0040D915                 lea     edx, [eax+1]
.text:0040D918                 mov     [esp+4], edx
.text:0040D91C                 call    realloc
.text:0040D921                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040D925                 mov     ebp, eax
.text:0040D927                 mov     byte ptr [ebx+eax+1], 0
.text:0040D92C
.text:0040D92C loc_40D92C:                             ; CODE XREF: .text:0040D910↑j
.text:0040D92C                 mov     dword ptr [esp+1Ch], 400h
.text:0040D934                 lea     edx, [esp+0B0h]
.text:0040D93B                 lea     ebx, [esp+5Ch]
.text:0040D93F                 mov     [esp+18h], edx
.text:0040D943                 lea     ecx, [esp+58h]
.text:0040D947                 lea     edx, [esp+54h]
.text:0040D94B                 mov     [esp+14h], ebx
.text:0040D94F                 lea     eax, [esp+4B0h]
.text:0040D956                 mov     [esp+10h], ecx
.text:0040D95A                 mov     [esp+0Ch], edx
.text:0040D95E                 mov     dword ptr [esp+8], 400h
.text:0040D966                 mov     [esp+4], eax
.text:0040D96A                 mov     [esp], ebp
.text:0040D96D                 call    GetVolumeInformationA
.text:0040D972                 sub     esp, 20h
.text:0040D975                 test    eax, eax
.text:0040D977                 jz      loc_40DE0E
.text:0040D97D                 test    esi, esi
.text:0040D97F                 jz      short loc_40D9A5
.text:0040D981                 mov     [esp], ebp
.text:0040D984                 lea     edx, [esp+48h]
.text:0040D988                 lea     ebx, [esp+40h]
.text:0040D98C                 mov     [esp+0Ch], edx
.text:0040D990                 lea     ecx, [esp+38h]
.text:0040D994                 mov     [esp+8], ebx
.text:0040D998                 mov     [esp+4], ecx
.text:0040D99C                 call    esi
.text:0040D99E                 sub     esp, 10h
.text:0040D9A1                 mov     [esp+20h], eax
.text:0040D9A5
.text:0040D9A5 loc_40D9A5:                             ; CODE XREF: .text:0040D97F↑j
.text:0040D9A5                 test    edi, edi
.text:0040D9A7                 jz      short loc_40D9B4
.text:0040D9A9                 mov     [esp], edi
.text:0040D9AC                 call    FreeLibrary
.text:0040D9B1                 sub     esp, 4
.text:0040D9B4
.text:0040D9B4 loc_40D9B4:                             ; CODE XREF: .text:0040D9A7↑j
.text:0040D9B4                 call    sub_40F470
.text:0040D9B9                 test    eax, eax
.text:0040D9BB                 lea     esi, [esp+28h]
.text:0040D9BF                 jz      loc_40DDF0
.text:0040D9C5                 call    sub_40F470
.text:0040D9CA                 test    eax, eax
.text:0040D9CC                 jz      short loc_40D9DC
.text:0040D9CE                 call    sub_40F3C0
.text:0040D9D3                 cmp     eax, 0Bh
.text:0040D9D6                 jle     loc_40DDC4
.text:0040D9DC
.text:0040D9DC loc_40D9DC:                             ; CODE XREF: .text:0040D9CC↑j
.text:0040D9DC                 cld
.text:0040D9DD                 xor     eax, eax
.text:0040D9DF                 lea     ebx, [esp+60h]
.text:0040D9E3                 mov     ecx, 7
.text:0040D9E8                 mov     edi, ebx
.text:0040D9EA                 rep stosd
.text:0040D9EC                 mov     dword ptr [esp+18h], 0
.text:0040D9F4                 mov     dword ptr [esp+14h], 4000000h
.text:0040D9FC                 mov     dword ptr [esp+10h], 0
.text:0040DA04                 mov     dword ptr [esp+0Ch], 0
.text:0040DA0C                 mov     dword ptr [esp+8], 0
.text:0040DA14                 mov     dword ptr [esp+4], 0
.text:0040DA1C                 mov     dword ptr [esp], offset aVwin32 ; "\\\\.\\vwin32"
.text:0040DA23                 call    CreateFileA
.text:0040DA28                 sub     esp, 1Ch
.text:0040DA2B                 mov     edi, eax
.text:0040DA2D                 cmp     eax, 0FFFFFFFFh
.text:0040DA30                 jz      short loc_40DAB0
.text:0040DA32                 mov     [esp+10h], ebx
.text:0040DA36                 lea     edx, [esp+80h]
.text:0040DA3D                 lea     ecx, [esp+24h]
.text:0040DA41                 mov     [esp+70h], edx
.text:0040DA45                 mov     [esp+18h], ecx
.text:0040DA49                 mov     [esp+8], ebx
.text:0040DA4D                 mov     dword ptr [esp+6Ch], 7303h
.text:0040DA55                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0040DA5D                 mov     [esp+64h], ebp
.text:0040DA61                 mov     dword ptr [esp+78h], 1
.text:0040DA69                 mov     dword ptr [esp+1Ch], 0
.text:0040DA71                 mov     dword ptr [esp+14h], 1Ch
.text:0040DA79                 mov     dword ptr [esp+0Ch], 1Ch
.text:0040DA81                 mov     dword ptr [esp+4], 6
.text:0040DA89                 mov     [esp], eax
.text:0040DA8C                 call    DeviceIoControl
.text:0040DA91                 sub     esp, 20h
.text:0040DA94                 mov     ebx, eax
.text:0040DA96                 mov     [esp], edi
.text:0040DA99                 call    CloseHandle
.text:0040DA9E                 sub     esp, 4
.text:0040DAA1                 test    ebx, ebx
.text:0040DAA3                 jz      short loc_40DAB0
.text:0040DAA5                 test    byte ptr [esp+78h], 1
.text:0040DAAA                 jz      loc_40DD90
.text:0040DAB0
.text:0040DAB0 loc_40DAB0:                             ; CODE XREF: .text:0040DA30↑j
.text:0040DAB0                                         ; .text:0040DAA3↑j
.text:0040DAB0                 call    sub_40E990
.text:0040DAB5                 mov     edi, eax
.text:0040DAB7                 call    _errno
.text:0040DABC                 mov     [eax], edi
.text:0040DABE                 xor     eax, eax
.text:0040DAC0
.text:0040DAC0 loc_40DAC0:                             ; CODE XREF: .text:0040DDBF↓j
.text:0040DAC0                                         ; .text:0040DDEB↓j
.text:0040DAC0                 test    eax, eax
.text:0040DAC2                 jnz     short loc_40DAE4
.text:0040DAC4                 mov     dword ptr [esp+34h], 1
.text:0040DACC                 mov     dword ptr [esp+30h], 200h
.text:0040DAD4                 mov     dword ptr [esp+2Ch], 0
.text:0040DADC                 mov     dword ptr [esp+28h], 0
.text:0040DAE4
.text:0040DAE4 loc_40DAE4:                             ; CODE XREF: .text:0040DAC2↑j
.text:0040DAE4                 mov     edx, [esp+30h]
.text:0040DAE8                 mov     edi, [esp+34h]
.text:0040DAEC                 mov     ecx, [esp+20h]
.text:0040DAF0                 imul    edi, edx
.text:0040DAF3                 test    ecx, ecx
.text:0040DAF5                 jnz     short loc_40DB1D
.text:0040DAF7                 mov     eax, [esp+28h]
.text:0040DAFB                 mul     edi
.text:0040DAFD                 mov     esi, eax
.text:0040DAFF                 mov     eax, [esp+2Ch]
.text:0040DB03                 mov     [esp+44h], edx
.text:0040DB07                 mov     [esp+40h], esi
.text:0040DB0B                 mul     edi
.text:0040DB0D                 mov     [esp+48h], eax
.text:0040DB11                 mov     [esp+4Ch], edx
.text:0040DB15                 mov     [esp+38h], eax
.text:0040DB19                 mov     [esp+3Ch], edx
.text:0040DB1D
.text:0040DB1D loc_40DB1D:                             ; CODE XREF: .text:0040DAF5↑j
.text:0040DB1D                 mov     ebx, [esp+5Ch]
.text:0040DB21                 lea     edx, [esp+0B0h]
.text:0040DB28                 mov     ecx, [esp+8D4h]
.text:0040DB2F                 mov     [ecx+48h], ebx
.text:0040DB32                 mov     dword ptr [esp+4], offset loc_40D898
.text:0040DB3A                 mov     [esp], edx
.text:0040DB3D                 call    _stricmp
.text:0040DB42                 test    eax, eax
.text:0040DB44                 jnz     loc_40DD00
.text:0040DB4A                 mov     esi, [esp+8D4h]
.text:0040DB51                 mov     dword ptr [esi], 5346544Eh
.text:0040DB57
.text:0040DB57 loc_40DB57:                             ; CODE XREF: .text:0040DD28↓j
.text:0040DB57                                         ; .text:0040DD55↓j ...
.text:0040DB57                 mov     ebx, [esp+30h]
.text:0040DB5B                 mov     esi, [esp+8D4h]
.text:0040DB62                 mov     [esi+4], ebx
.text:0040DB65                 mov     [esi+8], ebx
.text:0040DB68                 mov     ebx, [esi+8]
.text:0040DB6B                 mov     [esi+0Ch], edi
.text:0040DB6E                 mov     ecx, [esp+44h]
.text:0040DB72                 xor     esi, esi
.text:0040DB74                 mov     [esp+8], ebx
.text:0040DB78                 mov     edx, [esp+40h]
.text:0040DB7C                 mov     [esp+0Ch], esi
.text:0040DB80                 mov     [esp+4], ecx
.text:0040DB84                 mov     [esp], edx
.text:0040DB87                 call    sub_4129A0
.text:0040DB8C                 mov     ecx, [esp+8D4h]
.text:0040DB93                 mov     [ecx+10h], eax
.text:0040DB96                 mov     [ecx+14h], edx
.text:0040DB99                 mov     ecx, [esp+4Ch]
.text:0040DB9D                 mov     [esp+8], ebx
.text:0040DBA1                 mov     edx, [esp+48h]
.text:0040DBA5                 mov     [esp+0Ch], esi
.text:0040DBA9                 mov     [esp+4], ecx
.text:0040DBAD                 mov     [esp], edx
.text:0040DBB0                 call    sub_4129A0
.text:0040DBB5                 mov     ecx, [esp+8D4h]
.text:0040DBBC                 mov     [ecx+18h], eax
.text:0040DBBF                 mov     [ecx+1Ch], edx
.text:0040DBC2                 mov     ecx, [esp+38h]
.text:0040DBC6                 mov     [esp+8], ebx
.text:0040DBCA                 mov     ebx, [esp+3Ch]
.text:0040DBCE                 mov     [esp+0Ch], esi
.text:0040DBD2                 mov     [esp], ecx
.text:0040DBD5                 mov     [esp+4], ebx
.text:0040DBD9                 call    sub_4129A0
.text:0040DBDE                 mov     esi, [esp+8D4h]
.text:0040DBE5                 mov     [esi+20h], eax
.text:0040DBE8                 mov     [esi+24h], edx
.text:0040DBEB                 mov     ecx, [esp+44h]
.text:0040DBEF                 mov     esi, edi
.text:0040DBF1                 mov     [esp+8], esi
.text:0040DBF5                 mov     edx, [esp+40h]
.text:0040DBF9                 xor     edi, edi
.text:0040DBFB                 mov     [esp+0Ch], edi
.text:0040DBFF                 mov     [esp+4], ecx
.text:0040DC03                 mov     [esp], edx
.text:0040DC06                 call    sub_4129A0
.text:0040DC0B                 mov     ebx, [esp+8D4h]
.text:0040DC12                 mov     [ebx+28h], eax
.text:0040DC15                 mov     [ebx+2Ch], edx
.text:0040DC18                 mov     ecx, [esp+4Ch]
.text:0040DC1C                 mov     [esp+8], esi
.text:0040DC20                 mov     edx, [esp+48h]
.text:0040DC24                 mov     [esp+0Ch], edi
.text:0040DC28                 mov     [esp+4], ecx
.text:0040DC2C                 mov     [esp], edx
.text:0040DC2F                 call    sub_4129A0
.text:0040DC34                 mov     ebx, [esp+8D4h]
.text:0040DC3B                 mov     [ebx+30h], eax
.text:0040DC3E                 mov     [ebx+34h], edx
.text:0040DC41                 mov     ecx, [esp+3Ch]
.text:0040DC45                 mov     [esp+8], esi
.text:0040DC49                 mov     edx, [esp+38h]
.text:0040DC4D                 mov     [esp+0Ch], edi
.text:0040DC51                 mov     [esp+4], ecx
.text:0040DC55                 mov     [esp], edx
.text:0040DC58                 call    sub_4129A0
.text:0040DC5D                 mov     edx, [esp+8D4h]
.text:0040DC64                 lea     ecx, [esp+0B0h]
.text:0040DC6B                 mov     [edx+38h], eax
.text:0040DC6E                 mov     esi, [esp+58h]
.text:0040DC72                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:0040DC79                 mov     [edx+110h], esi
.text:0040DC7F                 mov     esi, edx
.text:0040DC81                 add     esi, 4Ch ; 'L'
.text:0040DC84                 movzx   ebx, word ptr [esp+56h]
.text:0040DC89                 movzx   edi, word ptr [esp+54h]
.text:0040DC8E                 mov     [edx+3Ch], ebx
.text:0040DC91                 lea     ebx, [esp+4B0h]
.text:0040DC98                 mov     [edx+40h], edi
.text:0040DC9B                 mov     [esp+4], ecx
.text:0040DC9F                 mov     dword ptr [esp+8], 10h
.text:0040DCA7                 mov     [esp], esi
.text:0040DCAA                 call    strncpy
.text:0040DCAF                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040DCB7                 mov     edi, [esp+8D4h]
.text:0040DCBE                 mov     [esp+4], ebx
.text:0040DCC2                 add     edi, 5Ch ; '\'
.text:0040DCC5                 mov     [esp], edi
.text:0040DCC8                 call    strncpy
.text:0040DCCD                 mov     [esp+4], ebp
.text:0040DCD1                 mov     ebp, [esp+8D4h]
.text:0040DCD8                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040DCE0                 add     ebp, 0B6h ; '¶'
.text:0040DCE6                 mov     [esp], ebp
.text:0040DCE9                 call    strncpy
.text:0040DCEE                 xor     eax, eax
.text:0040DCF0
.text:0040DCF0 loc_40DCF0:                             ; CODE XREF: .text:0040DE2C↓j
.text:0040DCF0                 add     esp, 8BCh
.text:0040DCF6                 pop     ebx
.text:0040DCF7                 pop     esi
.text:0040DCF8                 pop     edi
.text:0040DCF9                 pop     ebp
.text:0040DCFA                 retn
.text:0040DCFA ; ---------------------------------------------------------------------------
.text:0040DCFB                 align 10h
.text:0040DD00
.text:0040DD00 loc_40DD00:                             ; CODE XREF: .text:0040DB44↑j
.text:0040DD00                 mov     dword ptr [esp+4], 40D89Dh
.text:0040DD08                 lea     eax, [esp+0B0h]
.text:0040DD0F                 mov     [esp], eax
.text:0040DD12                 call    _stricmp
.text:0040DD17                 test    eax, eax
.text:0040DD19                 jnz     short loc_40DD2D
.text:0040DD1B                 mov     edx, [esp+8D4h]
.text:0040DD22                 mov     dword ptr [edx], 4008h
.text:0040DD28                 jmp     loc_40DB57
.text:0040DD2D ; ---------------------------------------------------------------------------
.text:0040DD2D
.text:0040DD2D loc_40DD2D:                             ; CODE XREF: .text:0040DD19↑j
.text:0040DD2D                 mov     dword ptr [esp+4], 40D8A3h
.text:0040DD35                 lea     ecx, [esp+0B0h]
.text:0040DD3C                 mov     [esp], ecx
.text:0040DD3F                 call    _stricmp
.text:0040DD44                 test    eax, eax
.text:0040DD46                 jnz     short loc_40DD5A
.text:0040DD48                 mov     ebx, [esp+8D4h]
.text:0040DD4F                 mov     dword ptr [ebx], 4006h
.text:0040DD55                 jmp     loc_40DB57
.text:0040DD5A ; ---------------------------------------------------------------------------
.text:0040DD5A
.text:0040DD5A loc_40DD5A:                             ; CODE XREF: .text:0040DD46↑j
.text:0040DD5A                 mov     dword ptr [esp+4], 40D8A7h
.text:0040DD62                 lea     eax, [esp+0B0h]
.text:0040DD69                 mov     [esp], eax
.text:0040DD6C                 call    _stricmp
.text:0040DD71                 test    eax, eax
.text:0040DD73                 mov     esi, [esp+8D4h]
.text:0040DD7A                 setnz   cl
.text:0040DD7D                 movzx   edx, cl
.text:0040DD80                 dec     edx
.text:0040DD81                 and     edx, 4000h
.text:0040DD87                 mov     [esi], edx
.text:0040DD89                 jmp     loc_40DB57
.text:0040DD89 ; ---------------------------------------------------------------------------
.text:0040DD8E                 align 10h
.text:0040DD90
.text:0040DD90 loc_40DD90:                             ; CODE XREF: .text:0040DAAA↑j
.text:0040DD90                 mov     edi, [esp+84h]
.text:0040DD97                 mov     eax, 1
.text:0040DD9C                 mov     edx, [esp+88h]
.text:0040DDA3                 mov     ecx, [esp+8Ch]
.text:0040DDAA                 mov     ebx, [esp+90h]
.text:0040DDB1                 mov     [esp+34h], edi
.text:0040DDB5                 mov     [esp+30h], edx
.text:0040DDB9                 mov     [esp+2Ch], ecx
.text:0040DDBD                 mov     [esi], ebx
.text:0040DDBF                 jmp     loc_40DAC0
.text:0040DDC4 ; ---------------------------------------------------------------------------
.text:0040DDC4
.text:0040DDC4 loc_40DDC4:                             ; CODE XREF: .text:0040D9D6↑j
.text:0040DDC4                 mov     [esp+10h], esi
.text:0040DDC8                 lea     eax, [esp+2Ch]
.text:0040DDCC                 lea     esi, [esp+30h]
.text:0040DDD0                 mov     [esp+0Ch], eax
.text:0040DDD4                 lea     edi, [esp+34h]
.text:0040DDD8                 mov     [esp+8], esi
.text:0040DDDC                 mov     [esp+4], edi
.text:0040DDE0
.text:0040DDE0 loc_40DDE0:                             ; CODE XREF: .text:0040DE0C↓j
.text:0040DDE0                 mov     [esp], ebp
.text:0040DDE3                 call    GetDiskFreeSpaceA
.text:0040DDE8                 sub     esp, 14h
.text:0040DDEB                 jmp     loc_40DAC0
.text:0040DDF0 ; ---------------------------------------------------------------------------
.text:0040DDF0
.text:0040DDF0 loc_40DDF0:                             ; CODE XREF: .text:0040D9BF↑j
.text:0040DDF0                 mov     [esp+10h], esi
.text:0040DDF4                 lea     ebx, [esp+2Ch]
.text:0040DDF8                 lea     eax, [esp+30h]
.text:0040DDFC                 mov     [esp+0Ch], ebx
.text:0040DE00                 lea     esi, [esp+34h]
.text:0040DE04                 mov     [esp+8], eax
.text:0040DE08                 mov     [esp+4], esi
.text:0040DE0C                 jmp     short loc_40DDE0
.text:0040DE0E ; ---------------------------------------------------------------------------
.text:0040DE0E
.text:0040DE0E loc_40DE0E:                             ; CODE XREF: .text:0040D977↑j
.text:0040DE0E                 mov     [esp], edi
.text:0040DE11                 call    FreeLibrary
.text:0040DE16                 sub     esp, 4
.text:0040DE19                 call    sub_40E990
.text:0040DE1E                 mov     esi, eax
.text:0040DE20                 call    _errno
.text:0040DE25                 mov     [eax], esi
.text:0040DE27
.text:0040DE27 loc_40DE27:                             ; CODE XREF: .text:0040DE47↓j
.text:0040DE27                 mov     eax, 0FFFFFFFFh
.text:0040DE2C                 jmp     loc_40DCF0
.text:0040DE31 ; ---------------------------------------------------------------------------
.text:0040DE31
.text:0040DE31 loc_40DE31:                             ; CODE XREF: .text:0040D8F1↑j
.text:0040DE31                 mov     [esp], edi
.text:0040DE34                 call    FreeLibrary
.text:0040DE39                 sub     esp, 4
.text:0040DE3C                 call    _errno
.text:0040DE41                 mov     dword ptr [eax], 2
.text:0040DE47                 jmp     short loc_40DE27
.text:0040DE47 ; ---------------------------------------------------------------------------
.text:0040DE49                 align 10h
.text:0040DE50
.text:0040DE50 ; =============== S U B R O U T I N E =======================================
.text:0040DE50
.text:0040DE50
.text:0040DE50 ; int __cdecl sub_40DE50(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:0040DE50 sub_40DE50      proc near               ; CODE XREF: sub_40B880+2C7↑p
.text:0040DE50                                         ; .text:0040BEBA↑p
.text:0040DE50
.text:0040DE50 lpFileName      = dword ptr -9Ch
.text:0040DE50 dwDesiredAccess = dword ptr -98h
.text:0040DE50 dwShareMode     = dword ptr -94h
.text:0040DE50 lpSecurityAttributes= dword ptr -90h
.text:0040DE50 dwCreationDisposition= dword ptr -8Ch
.text:0040DE50 dwFlagsAndAttributes= dword ptr -88h
.text:0040DE50 hTemplateFile   = dword ptr -84h
.text:0040DE50 lpOverlapped    = dword ptr -80h
.text:0040DE50 BytesReturned   = dword ptr -70h
.text:0040DE50 InBuffer        = byte ptr -6Ch
.text:0040DE50 var_68          = dword ptr -68h
.text:0040DE50 var_64          = dword ptr -64h
.text:0040DE50 var_60          = dword ptr -60h
.text:0040DE50 var_5C          = dword ptr -5Ch
.text:0040DE50 var_54          = dword ptr -54h
.text:0040DE50 var_4C          = byte ptr -4Ch
.text:0040DE50 var_48          = dword ptr -48h
.text:0040DE50 var_44          = dword ptr -44h
.text:0040DE50 var_40          = dword ptr -40h
.text:0040DE50 var_3C          = dword ptr -3Ch
.text:0040DE50 lpRootPathName  = dword ptr -2Ch
.text:0040DE50 lpSectorsPerCluster= dword ptr -28h
.text:0040DE50 lpBytesPerSector= dword ptr -24h
.text:0040DE50 lpNumberOfFreeClusters= dword ptr -20h
.text:0040DE50 lpTotalNumberOfClusters= dword ptr -1Ch
.text:0040DE50 var_18          = dword ptr -18h
.text:0040DE50 var_14          = dword ptr -14h
.text:0040DE50 var_10          = dword ptr -10h
.text:0040DE50 var_C           = dword ptr -0Ch
.text:0040DE50 var_8           = dword ptr -8
.text:0040DE50 var_4           = dword ptr -4
.text:0040DE50 arg_0           = dword ptr  4
.text:0040DE50 arg_4           = dword ptr  8
.text:0040DE50 arg_8           = dword ptr  0Ch
.text:0040DE50 arg_C           = dword ptr  10h
.text:0040DE50 arg_10          = dword ptr  14h
.text:0040DE50
.text:0040DE50                 sub     esp, 2Ch
.text:0040DE53                 mov     edx, [esp+2Ch+arg_0]
.text:0040DE57                 mov     [esp+2Ch+var_10], ebx
.text:0040DE5B                 mov     ebx, [esp+2Ch+arg_10]
.text:0040DE5F                 mov     [esp+2Ch+var_C], esi
.text:0040DE63                 mov     esi, [esp+2Ch+arg_C]
.text:0040DE67                 mov     [esp+2Ch+var_8], edi
.text:0040DE6B                 mov     edi, [esp+2Ch+arg_8]
.text:0040DE6F                 mov     [esp+2Ch+var_4], ebp
.text:0040DE73                 mov     ebp, [esp+2Ch+arg_4]
.text:0040DE77                 mov     [esp+2Ch+var_14], edx
.text:0040DE7B                 call    sub_40F470
.text:0040DE80                 test    eax, eax
.text:0040DE82                 jz      short loc_40DEB4
.text:0040DE84                 mov     [esp+2Ch+arg_10], ebx
.text:0040DE88                 mov     edx, [esp+2Ch+var_14]
.text:0040DE8C                 mov     ebx, [esp+2Ch+var_10]
.text:0040DE90                 mov     [esp+2Ch+arg_C], esi
.text:0040DE94                 mov     esi, [esp+2Ch+var_C]
.text:0040DE98                 mov     [esp+2Ch+arg_8], edi
.text:0040DE9C                 mov     edi, [esp+2Ch+var_8]
.text:0040DEA0                 mov     [esp+2Ch+arg_4], ebp
.text:0040DEA4                 mov     ebp, [esp+2Ch+var_4]
.text:0040DEA8                 mov     [esp+2Ch+arg_0], edx
.text:0040DEAC                 add     esp, 2Ch
.text:0040DEAF                 jmp     loc_40DF60
.text:0040DEB4 ; ---------------------------------------------------------------------------
.text:0040DEB4
.text:0040DEB4 loc_40DEB4:                             ; CODE XREF: sub_40DE50+32↑j
.text:0040DEB4                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:0040DEB8                 mov     ecx, [esp+2Ch+var_14]
.text:0040DEBC                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:0040DEC0                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:0040DEC4                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:0040DEC8                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040DECB                 call    GetDiskFreeSpaceA
.text:0040DED0                 sub     esp, 14h
.text:0040DED3                 mov     ebx, [esp+2Ch+var_10]
.text:0040DED7                 mov     esi, [esp+2Ch+var_C]
.text:0040DEDB                 mov     edi, [esp+2Ch+var_8]
.text:0040DEDF                 mov     ebp, [esp+2Ch+var_4]
.text:0040DEE3                 add     esp, 2Ch
.text:0040DEE6                 retn
.text:0040DEE6 ; ---------------------------------------------------------------------------
.text:0040DEE7                 align 10h
.text:0040DEF0
.text:0040DEF0 loc_40DEF0:                             ; CODE XREF: .text:0040F78D↓p
.text:0040DEF0                 sub     esp, 1Ch
.text:0040DEF3                 mov     [esp+1Ch+var_4], esi
.text:0040DEF7                 mov     esi, [esp+1Ch+arg_0]
.text:0040DEFB                 mov     [esp+1Ch+var_8], ebx
.text:0040DEFF                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:0040DF02                 call    sub_40D430
.text:0040DF07                 test    eax, eax
.text:0040DF09                 mov     ebx, eax
.text:0040DF0B                 jz      short loc_40DF20
.text:0040DF0D                 cmp     byte ptr [eax], 0
.text:0040DF10                 jz      short loc_40DF20
.text:0040DF12                 test    esi, esi
.text:0040DF14                 jz      short loc_40DF20
.text:0040DF16                 cmp     byte ptr [esi], 0
.text:0040DF19                 jnz     short loc_40DF46
.text:0040DF1B                 nop
.text:0040DF1C                 lea     esi, [esi+0]
.text:0040DF20
.text:0040DF20 loc_40DF20:                             ; CODE XREF: sub_40DE50+BB↑j
.text:0040DF20                                         ; sub_40DE50+C0↑j ...
.text:0040DF20                 call    _errno
.text:0040DF25                 mov     dword ptr [eax], 2
.text:0040DF2B                 mov     esi, 0FFFFFFFFh
.text:0040DF30
.text:0040DF30 loc_40DF30:                             ; CODE XREF: sub_40DE50+108↓j
.text:0040DF30                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:0040DF33                 call    free
.text:0040DF38                 mov     eax, esi
.text:0040DF3A                 mov     ebx, [esp+1Ch+var_8]
.text:0040DF3E                 mov     esi, [esp+1Ch+var_4]
.text:0040DF42                 add     esp, 1Ch
.text:0040DF45                 retn
.text:0040DF46 ; ---------------------------------------------------------------------------
.text:0040DF46
.text:0040DF46 loc_40DF46:                             ; CODE XREF: sub_40DE50+C9↑j
.text:0040DF46                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:0040DF49                 mov     edx, [esp+1Ch+arg_4]
.text:0040DF4D                 mov     [esp+1Ch+var_18], edx
.text:0040DF51                 call    near ptr loc_40D8AB+5
.text:0040DF56                 mov     esi, eax
.text:0040DF58                 jmp     short loc_40DF30
.text:0040DF58 ; ---------------------------------------------------------------------------
.text:0040DF5A                 align 10h
.text:0040DF60
.text:0040DF60 loc_40DF60:                             ; CODE XREF: sub_40DE50+5F↑j
.text:0040DF60                 push    ebp
.text:0040DF61                 push    edi
.text:0040DF62                 push    esi
.text:0040DF63                 push    ebx
.text:0040DF64                 sub     esp, 8Ch
.text:0040DF6A                 mov     ebp, [esp+9Ch+arg_0]
.text:0040DF71                 call    sub_40F470
.text:0040DF76                 test    eax, eax
.text:0040DF78                 jz      short loc_40DF88
.text:0040DF7A                 call    sub_40F3C0
.text:0040DF7F                 cmp     eax, 0Bh
.text:0040DF82                 jle     loc_40E0B0
.text:0040DF88
.text:0040DF88 loc_40DF88:                             ; CODE XREF: sub_40DE50+128↑j
.text:0040DF88                 cld
.text:0040DF89                 xor     eax, eax
.text:0040DF8B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040DF8F                 mov     ecx, 7
.text:0040DF94                 mov     edi, ebx
.text:0040DF96                 lea     esi, [esp+9Ch+var_4C]
.text:0040DF9A                 rep stosd
.text:0040DF9C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040DFA4                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040DFAC                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:0040DFB4                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040DFBC                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:0040DFC4                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040DFCC                 mov     [esp+9Ch+lpFileName], offset aVwin32 ; "\\\\.\\vwin32"
.text:0040DFD3                 call    CreateFileA
.text:0040DFD8                 sub     esp, 1Ch
.text:0040DFDB                 mov     edi, eax
.text:0040DFDD                 cmp     eax, 0FFFFFFFFh
.text:0040DFE0                 jz      short loc_40E055
.text:0040DFE2                 mov     [esp+9Ch+var_68], ebp
.text:0040DFE6                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040DFEA                 mov     [esp+9Ch+var_5C], esi
.text:0040DFEE                 mov     [esp+9Ch+var_60], 7303h
.text:0040DFF6                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040DFFE                 mov     [esp+9Ch+var_54], 1
.text:0040E006                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0040E00E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:0040E012                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0040E01A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0040E01E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:0040E026                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0040E02A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:0040E032                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:0040E035                 call    DeviceIoControl
.text:0040E03A                 sub     esp, 20h
.text:0040E03D                 mov     esi, eax
.text:0040E03F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:0040E042                 call    CloseHandle
.text:0040E047                 sub     esp, 4
.text:0040E04A                 test    esi, esi
.text:0040E04C                 jz      short loc_40E055
.text:0040E04E                 test    byte ptr [esp+9Ch+var_54], 1
.text:0040E053                 jz      short loc_40E070
.text:0040E055
.text:0040E055 loc_40E055:                             ; CODE XREF: sub_40DE50+190↑j
.text:0040E055                                         ; sub_40DE50+1FC↑j
.text:0040E055                 call    sub_40E990
.text:0040E05A                 mov     edi, eax
.text:0040E05C                 call    _errno
.text:0040E061                 mov     [eax], edi
.text:0040E063                 xor     eax, eax
.text:0040E065
.text:0040E065 loc_40E065:                             ; CODE XREF: sub_40DE50+25A↓j
.text:0040E065                                         ; sub_40DE50+297↓j
.text:0040E065                 add     esp, 8Ch
.text:0040E06B                 pop     ebx
.text:0040E06C                 pop     esi
.text:0040E06D                 pop     edi
.text:0040E06E                 pop     ebp
.text:0040E06F                 retn
.text:0040E070 ; ---------------------------------------------------------------------------
.text:0040E070
.text:0040E070 loc_40E070:                             ; CODE XREF: sub_40DE50+203↑j
.text:0040E070                 mov     edx, [esp+9Ch+var_48]
.text:0040E074                 mov     eax, 1
.text:0040E079                 mov     ebx, [esp+9Ch+arg_4]
.text:0040E080                 mov     ebp, [esp+9Ch+arg_8]
.text:0040E087                 mov     ecx, [esp+9Ch+arg_C]
.text:0040E08E                 mov     [ebx], edx
.text:0040E090                 mov     edi, [esp+9Ch+var_44]
.text:0040E094                 mov     ebx, [esp+9Ch+arg_10]
.text:0040E09B                 mov     [ebp+0], edi
.text:0040E09E                 mov     esi, [esp+9Ch+var_40]
.text:0040E0A2                 mov     [ecx], esi
.text:0040E0A4                 mov     edx, [esp+9Ch+var_3C]
.text:0040E0A8                 mov     [ebx], edx
.text:0040E0AA                 jmp     short loc_40E065
.text:0040E0AA ; ---------------------------------------------------------------------------
.text:0040E0AC                 align 10h
.text:0040E0B0
.text:0040E0B0 loc_40E0B0:                             ; CODE XREF: sub_40DE50+132↑j
.text:0040E0B0                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:0040E0B3                 mov     eax, [esp+9Ch+arg_C]
.text:0040E0BA                 mov     ecx, [esp+9Ch+arg_10]
.text:0040E0C1                 mov     edx, [esp+9Ch+arg_8]
.text:0040E0C8                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040E0CC                 mov     eax, [esp+9Ch+arg_4]
.text:0040E0D3                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:0040E0D7                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040E0DB                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040E0DF                 call    GetDiskFreeSpaceA
.text:0040E0E4                 sub     esp, 14h
.text:0040E0E7                 jmp     loc_40E065
.text:0040E0E7 sub_40DE50      endp ; sp-analysis failed
.text:0040E0E7
.text:0040E0E7 ; ---------------------------------------------------------------------------
.text:0040E0EC                 align 10h
.text:0040E0F0
.text:0040E0F0 ; =============== S U B R O U T I N E =======================================
.text:0040E0F0
.text:0040E0F0
.text:0040E0F0 sub_40E0F0      proc near               ; CODE XREF: sub_402550+332↑p
.text:0040E0F0
.text:0040E0F0 FileHandle      = dword ptr -2Ch
.text:0040E0F0 Offset          = qword ptr -28h
.text:0040E0F0 Origin          = dword ptr -20h
.text:0040E0F0 var_10          = dword ptr -10h
.text:0040E0F0 var_C           = dword ptr -0Ch
.text:0040E0F0 var_8           = dword ptr -8
.text:0040E0F0 var_4           = dword ptr -4
.text:0040E0F0 arg_0           = dword ptr  4
.text:0040E0F0 arg_4           = qword ptr  8
.text:0040E0F0
.text:0040E0F0                 sub     esp, 2Ch
.text:0040E0F3                 mov     [esp+2Ch+var_4], ebp
.text:0040E0F7                 mov     ebp, [esp+2Ch+arg_0]
.text:0040E0FB                 mov     [esp+2Ch+var_10], ebx
.text:0040E0FF                 mov     ebx, dword ptr [esp+2Ch+arg_4]
.text:0040E103                 mov     [esp+2Ch+var_C], esi
.text:0040E107                 mov     esi, dword ptr [esp+2Ch+arg_4+4]
.text:0040E10B                 mov     [esp+2Ch+var_8], edi
.text:0040E10F                 mov     [esp+2Ch+FileHandle], ebp ; FileHandle
.text:0040E112                 call    _get_osfhandle
.text:0040E117                 cmp     eax, 0FFFFFFFFh
.text:0040E11A                 mov     edi, eax
.text:0040E11C                 jz      short loc_40E186
.text:0040E11E                 mov     [esp+2Ch+FileHandle], ebp ; FileHandle
.text:0040E121                 mov     [esp+2Ch+Origin], 0 ; Origin
.text:0040E129                 mov     dword ptr [esp+2Ch+Offset], ebx ; Offset
.text:0040E12D                 mov     dword ptr [esp+2Ch+Offset+4], esi
.text:0040E131                 call    _lseeki64
.text:0040E136                 mov     ebp, edx
.text:0040E138                 xor     eax, ebx
.text:0040E13A                 xor     ebp, esi
.text:0040E13C                 or      ebp, eax
.text:0040E13E                 jnz     short loc_40E179
.text:0040E140                 mov     [esp+2Ch+FileHandle], edi ; hFile
.text:0040E143                 call    SetEndOfFile
.text:0040E148                 sub     esp, 4
.text:0040E14B                 xor     edx, edx
.text:0040E14D                 test    eax, eax
.text:0040E14F                 jz      short loc_40E167
.text:0040E151
.text:0040E151 loc_40E151:                             ; CODE XREF: sub_40E0F0+87↓j
.text:0040E151                 mov     ebx, [esp+2Ch+var_10]
.text:0040E155                 mov     eax, edx
.text:0040E157                 mov     esi, [esp+2Ch+var_C]
.text:0040E15B                 mov     edi, [esp+2Ch+var_8]
.text:0040E15F                 mov     ebp, [esp+2Ch+var_4]
.text:0040E163                 add     esp, 2Ch
.text:0040E166                 retn
.text:0040E167 ; ---------------------------------------------------------------------------
.text:0040E167
.text:0040E167 loc_40E167:                             ; CODE XREF: sub_40E0F0+5F↑j
.text:0040E167                 call    _errno
.text:0040E16C                 mov     dword ptr [eax], offset sub_40E990
.text:0040E172
.text:0040E172 loc_40E172:                             ; CODE XREF: sub_40E0F0+94↓j
.text:0040E172                                         ; sub_40E0F0+A1↓j
.text:0040E172                 mov     edx, 0FFFFFFFFh
.text:0040E177                 jmp     short loc_40E151
.text:0040E179 ; ---------------------------------------------------------------------------
.text:0040E179
.text:0040E179 loc_40E179:                             ; CODE XREF: sub_40E0F0+4E↑j
.text:0040E179                 call    _errno
.text:0040E17E                 mov     dword ptr [eax], 16h
.text:0040E184                 jmp     short loc_40E172
.text:0040E186 ; ---------------------------------------------------------------------------
.text:0040E186
.text:0040E186 loc_40E186:                             ; CODE XREF: sub_40E0F0+2C↑j
.text:0040E186                 call    _errno
.text:0040E18B                 mov     dword ptr [eax], 9
.text:0040E191                 jmp     short loc_40E172
.text:0040E191 sub_40E0F0      endp
.text:0040E191
.text:0040E191 ; ---------------------------------------------------------------------------
.text:0040E193                 align 10h
.text:0040E1A0
.text:0040E1A0 ; =============== S U B R O U T I N E =======================================
.text:0040E1A0
.text:0040E1A0 ; Attributes: thunk
.text:0040E1A0
.text:0040E1A0 ; int __cdecl j__commit(int FileHandle)
.text:0040E1A0 j__commit       proc near               ; CODE XREF: sub_403DD0+744↑p
.text:0040E1A0
.text:0040E1A0 FileHandle      = dword ptr  4
.text:0040E1A0
.text:0040E1A0                 jmp     _commit
.text:0040E1A0 j__commit       endp
.text:0040E1A0
.text:0040E1A0 ; ---------------------------------------------------------------------------
.text:0040E1A5                 align 10h
.text:0040E1B0
.text:0040E1B0 ; =============== S U B R O U T I N E =======================================
.text:0040E1B0
.text:0040E1B0
.text:0040E1B0 sub_40E1B0      proc near               ; CODE XREF: sub_403DD0+17↑p
.text:0040E1B0
.text:0040E1B0 lpSystemInfo    = dword ptr -0Ch
.text:0040E1B0 var_4           = dword ptr -4
.text:0040E1B0
.text:0040E1B0                 sub     esp, 0Ch
.text:0040E1B3                 mov     [esp+0Ch+var_4], edi
.text:0040E1B7                 mov     edi, ds:dword_4156A0
.text:0040E1BD                 test    edi, edi
.text:0040E1BF                 mov     eax, edi
.text:0040E1C1                 jz      short loc_40E1D0
.text:0040E1C3
.text:0040E1C3 loc_40E1C3:                             ; CODE XREF: sub_40E1B0+48↓j
.text:0040E1C3                 mov     eax, [edi+4]
.text:0040E1C6                 mov     edi, [esp+0Ch+var_4]
.text:0040E1CA                 add     esp, 0Ch
.text:0040E1CD                 retn
.text:0040E1CD ; ---------------------------------------------------------------------------
.text:0040E1CE                 align 10h
.text:0040E1D0
.text:0040E1D0 loc_40E1D0:                             ; CODE XREF: sub_40E1B0+11↑j
.text:0040E1D0                 cld
.text:0040E1D1                 mov     edi, offset SystemInfo
.text:0040E1D6                 mov     ecx, 9
.text:0040E1DB                 mov     ds:dword_4156A0, edi
.text:0040E1E1                 rep stosd
.text:0040E1E3                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:0040E1EA                 call    GetSystemInfo
.text:0040E1EF                 mov     edi, ds:dword_4156A0
.text:0040E1F5                 sub     esp, 4
.text:0040E1F8                 jmp     short loc_40E1C3
.text:0040E1F8 sub_40E1B0      endp
.text:0040E1F8
.text:0040E1F8 ; ---------------------------------------------------------------------------
.text:0040E1FA                 align 10h
.text:0040E200
.text:0040E200 ; =============== S U B R O U T I N E =======================================
.text:0040E200
.text:0040E200
.text:0040E200 sub_40E200      proc near               ; CODE XREF: sub_40E320+152↓p
.text:0040E200                                         ; .text:0040E4EB↓p
.text:0040E200
.text:0040E200 FileHandle      = dword ptr -2Ch
.text:0040E200 Offset          = qword ptr -28h
.text:0040E200 Origin          = dword ptr -20h
.text:0040E200 nNumberOfBytesToUnlockHigh= dword ptr -1Ch
.text:0040E200 hFile           = dword ptr -14h
.text:0040E200 arg_0           = dword ptr  4
.text:0040E200 arg_4           = dword ptr  8
.text:0040E200 arg_8           = dword ptr  0Ch
.text:0040E200
.text:0040E200                 push    ebp
.text:0040E201                 push    edi
.text:0040E202                 push    esi
.text:0040E203                 push    ebx
.text:0040E204                 sub     esp, 1Ch
.text:0040E207                 mov     ebp, [esp+2Ch+arg_8]
.text:0040E20B                 mov     edi, [esp+2Ch+arg_0]
.text:0040E20F                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:0040E212                 call    _get_osfhandle
.text:0040E217                 movsx   edx, word ptr [ebp+2]
.text:0040E21B                 mov     [esp+2Ch+hFile], eax
.text:0040E21F                 mov     dword ptr [esp+2Ch+Offset], 0 ; Offset
.text:0040E227                 mov     dword ptr [esp+2Ch+Offset+4], 0
.text:0040E22F                 mov     [esp+2Ch+Origin], edx ; Origin
.text:0040E233                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:0040E236                 call    _lseeki64
.text:0040E23B                 mov     ebx, eax
.text:0040E23D                 mov     esi, edx
.text:0040E23F                 mov     edx, [ebp+14h]
.text:0040E242                 add     ebx, [ebp+8]
.text:0040E245                 mov     eax, [ebp+10h]
.text:0040E248                 mov     ecx, edx
.text:0040E24A                 adc     esi, [ebp+0Ch]
.text:0040E24D                 or      ecx, eax
.text:0040E24F                 jz      loc_40E310
.text:0040E255                 add     eax, ebx
.text:0040E257                 adc     edx, esi
.text:0040E259
.text:0040E259 loc_40E259:                             ; CODE XREF: sub_40E200+118↓j
.text:0040E259                 cmp     [esp+2Ch+arg_4], 7
.text:0040E25E                 jz      loc_40E2FE
.text:0040E264                 cmp     [esp+2Ch+arg_4], 7
.text:0040E269                 jl      short loc_40E285
.text:0040E26B                 cmp     [esp+2Ch+arg_4], 9
.text:0040E270                 jg      short loc_40E285
.text:0040E272                 movsx   ecx, word ptr [ebp+0]
.text:0040E276                 cmp     ecx, 1
.text:0040E279                 jl      short loc_40E285
.text:0040E27B                 cmp     ecx, 2
.text:0040E27E                 jle     short loc_40E2E0
.text:0040E280                 cmp     ecx, 3
.text:0040E283                 jz      short loc_40E29D
.text:0040E285
.text:0040E285 loc_40E285:                             ; CODE XREF: sub_40E200+69↑j
.text:0040E285                                         ; sub_40E200+70↑j ...
.text:0040E285                 call    _errno
.text:0040E28A                 mov     dword ptr [eax], 16h
.text:0040E290
.text:0040E290 loc_40E290:                             ; CODE XREF: sub_40E200+D9↓j
.text:0040E290                                         ; sub_40E200+109↓j
.text:0040E290                 mov     eax, 0FFFFFFFFh
.text:0040E295
.text:0040E295 loc_40E295:                             ; CODE XREF: sub_40E200+C9↓j
.text:0040E295                 add     esp, 1Ch
.text:0040E298                 pop     ebx
.text:0040E299                 pop     esi
.text:0040E29A                 pop     edi
.text:0040E29B                 pop     ebp
.text:0040E29C                 retn
.text:0040E29D ; ---------------------------------------------------------------------------
.text:0040E29D
.text:0040E29D loc_40E29D:                             ; CODE XREF: sub_40E200+83↑j
.text:0040E29D                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToUnlockLow
.text:0040E2A1                 mov     eax, [esp+2Ch+hFile]
.text:0040E2A5                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040E2A9                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:0040E2AD                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:0040E2B1                 mov     [esp+2Ch+FileHandle], eax ; hFile
.text:0040E2B4                 call    UnlockFile
.text:0040E2B9                 lea     esi, [esi+0]
.text:0040E2C0
.text:0040E2C0 loc_40E2C0:                             ; CODE XREF: sub_40E200+FC↓j
.text:0040E2C0                 mov     ecx, eax
.text:0040E2C2                 sub     esp, 14h
.text:0040E2C5                 xor     eax, eax
.text:0040E2C7                 test    ecx, ecx
.text:0040E2C9                 jnz     short loc_40E295
.text:0040E2CB                 call    sub_40E990
.text:0040E2D0                 mov     esi, eax
.text:0040E2D2                 call    _errno
.text:0040E2D7                 mov     [eax], esi
.text:0040E2D9                 jmp     short loc_40E290
.text:0040E2D9 ; ---------------------------------------------------------------------------
.text:0040E2DB                 align 10h
.text:0040E2E0
.text:0040E2E0 loc_40E2E0:                             ; CODE XREF: sub_40E200+7E↑j
.text:0040E2E0                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToLockHigh
.text:0040E2E4                 mov     edx, [esp+2Ch+hFile]
.text:0040E2E8                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:0040E2EC                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:0040E2F0                 mov     [esp+2Ch+FileHandle], edx ; hFile
.text:0040E2F3                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToLockLow
.text:0040E2F7                 call    LockFile
.text:0040E2FC                 jmp     short loc_40E2C0
.text:0040E2FE ; ---------------------------------------------------------------------------
.text:0040E2FE
.text:0040E2FE loc_40E2FE:                             ; CODE XREF: sub_40E200+5E↑j
.text:0040E2FE                 call    _errno
.text:0040E303                 mov     dword ptr [eax], 28h ; '('
.text:0040E309                 jmp     short loc_40E290
.text:0040E309 ; ---------------------------------------------------------------------------
.text:0040E30B                 align 10h
.text:0040E310
.text:0040E310 loc_40E310:                             ; CODE XREF: sub_40E200+4F↑j
.text:0040E310                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:0040E313                 call    _filelengthi64
.text:0040E318                 jmp     loc_40E259
.text:0040E318 sub_40E200      endp
.text:0040E318
.text:0040E318 ; ---------------------------------------------------------------------------
.text:0040E31D                 align 10h
.text:0040E320
.text:0040E320 ; =============== S U B R O U T I N E =======================================
.text:0040E320
.text:0040E320
.text:0040E320 sub_40E320      proc near               ; CODE XREF: sub_402550+62C↑p
.text:0040E320                                         ; sub_402550+650↑p ...
.text:0040E320
.text:0040E320 FileHandle      = dword ptr -1Ch
.text:0040E320 var_18          = dword ptr -18h
.text:0040E320 var_14          = dword ptr -14h
.text:0040E320 var_4           = dword ptr -4
.text:0040E320 arg_0           = dword ptr  4
.text:0040E320 arg_4           = dword ptr  8
.text:0040E320 arg_8           = byte ptr  0Ch
.text:0040E320
.text:0040E320                 sub     esp, 1Ch
.text:0040E323                 mov     ecx, [esp+1Ch+arg_0]
.text:0040E327                 mov     [esp+1Ch+var_4], ebx
.text:0040E32B                 mov     edx, [esp+1Ch+arg_4]
.text:0040E32F                 test    ecx, ecx
.text:0040E331                 js      loc_40E489
.text:0040E337                 cmp     edx, 9          ; switch 10 cases
.text:0040E33A                 lea     eax, [esp+1Ch+arg_8]
.text:0040E33E                 ja      def_40E344      ; jumptable 0040E344 default case
.text:0040E344                 jmp     ds:jpt_40E344[edx*4] ; switch jump
.text:0040E344 ; ---------------------------------------------------------------------------
.text:0040E34B                 align 4
.text:0040E34C jpt_40E344      dd offset loc_40E374    ; DATA XREF: sub_40E320+24↑r
.text:0040E34C                 dd offset loc_40E388    ; jump table for switch statement
.text:0040E34C                 dd offset loc_40E3A8
.text:0040E34C                 dd offset loc_40E3D0
.text:0040E34C                 dd offset loc_40E418
.text:0040E34C                 dd offset loc_40E450
.text:0040E34C                 dd offset loc_40E450
.text:0040E34C                 dd offset loc_40E450
.text:0040E34C                 dd offset loc_40E465
.text:0040E34C                 dd offset loc_40E465
.text:0040E374 ; ---------------------------------------------------------------------------
.text:0040E374
.text:0040E374 loc_40E374:                             ; CODE XREF: sub_40E320+24↑j
.text:0040E374                                         ; DATA XREF: sub_40E320:jpt_40E344↑o
.text:0040E374                 mov     [esp+1Ch+FileHandle], ecx ; jumptable 0040E344 case 0
.text:0040E377                 call    _dup
.text:0040E37C                 lea     esi, [esi+0]
.text:0040E380
.text:0040E380 loc_40E380:                             ; CODE XREF: sub_40E320+86↓j
.text:0040E380                                         ; sub_40E320+AC↓j ...
.text:0040E380                 mov     ebx, [esp+1Ch+var_4]
.text:0040E384                 add     esp, 1Ch
.text:0040E387                 retn
.text:0040E388 ; ---------------------------------------------------------------------------
.text:0040E388
.text:0040E388 loc_40E388:                             ; CODE XREF: sub_40E320+24↑j
.text:0040E388                                         ; DATA XREF: sub_40E320:jpt_40E344↑o
.text:0040E388                 mov     eax, ds:__pioinfo ; jumptable 0040E344 case 1
.text:0040E38D                 mov     edx, ecx
.text:0040E38F                 sar     edx, 5
.text:0040E392                 and     ecx, 1Fh
.text:0040E395                 mov     ebx, [eax+edx*4]
.text:0040E398                 lea     eax, [ecx+ecx*8]
.text:0040E39B                 test    byte ptr [ebx+eax*4+4], 10h
.text:0040E3A0                 setnz   dl
.text:0040E3A3                 movzx   eax, dl
.text:0040E3A6                 jmp     short loc_40E380
.text:0040E3A8 ; ---------------------------------------------------------------------------
.text:0040E3A8
.text:0040E3A8 loc_40E3A8:                             ; CODE XREF: sub_40E320+24↑j
.text:0040E3A8                                         ; DATA XREF: sub_40E320:jpt_40E344↑o
.text:0040E3A8                 test    bl, 1           ; jumptable 0040E344 case 2
.text:0040E3AB                 jz      short loc_40E3B3
.text:0040E3AD                 and     ebx, 0FFFFFFFEh
.text:0040E3B0                 or      ebx, 10h
.text:0040E3B3
.text:0040E3B3 loc_40E3B3:                             ; CODE XREF: sub_40E320+8B↑j
.text:0040E3B3                 mov     eax, ds:__pioinfo
.text:0040E3B8                 mov     edx, ecx
.text:0040E3BA                 sar     edx, 5
.text:0040E3BD                 and     ecx, 1Fh
.text:0040E3C0                 mov     edx, [eax+edx*4]
.text:0040E3C3                 lea     eax, [ecx+ecx*8]
.text:0040E3C6                 mov     [edx+eax*4+4], bl
.text:0040E3CA
.text:0040E3CA loc_40E3CA:                             ; CODE XREF: sub_40E320+121↓j
.text:0040E3CA                 xor     eax, eax
.text:0040E3CC                 jmp     short loc_40E380
.text:0040E3CC ; ---------------------------------------------------------------------------
.text:0040E3CE                 align 10h
.text:0040E3D0
.text:0040E3D0 loc_40E3D0:                             ; CODE XREF: sub_40E320+24↑j
.text:0040E3D0                                         ; DATA XREF: sub_40E320:jpt_40E344↑o
.text:0040E3D0                 mov     eax, ds:__pioinfo ; jumptable 0040E344 case 3
.text:0040E3D5                 mov     ebx, ecx
.text:0040E3D7                 sar     ebx, 5
.text:0040E3DA                 and     ecx, 1Fh
.text:0040E3DD                 mov     edx, [eax+ebx*4]
.text:0040E3E0                 lea     ebx, [ecx+ecx*8]
.text:0040E3E3                 movsx   eax, byte ptr [edx+ebx*4+4]
.text:0040E3E8                 xor     edx, edx
.text:0040E3EA                 test    al, 1
.text:0040E3EC                 jz      short loc_40E3F7
.text:0040E3EE                 mov     edx, 2
.text:0040E3F3
.text:0040E3F3 loc_40E3F3:                             ; CODE XREF: sub_40E320+E0↓j
.text:0040E3F3                                         ; sub_40E320+EB↓j ...
.text:0040E3F3                 mov     eax, edx
.text:0040E3F5                 jmp     short loc_40E380
.text:0040E3F7 ; ---------------------------------------------------------------------------
.text:0040E3F7
.text:0040E3F7 loc_40E3F7:                             ; CODE XREF: sub_40E320+CC↑j
.text:0040E3F7                 test    al, 20h
.text:0040E3F9                 jz      short loc_40E402
.text:0040E3FB                 mov     edx, 8
.text:0040E400                 jmp     short loc_40E3F3
.text:0040E402 ; ---------------------------------------------------------------------------
.text:0040E402
.text:0040E402 loc_40E402:                             ; CODE XREF: sub_40E320+D9↑j
.text:0040E402                 test    al, 10h
.text:0040E404                 jz      short loc_40E40D
.text:0040E406                 mov     edx, 80h ; '€'
.text:0040E40B                 jmp     short loc_40E3F3
.text:0040E40D ; ---------------------------------------------------------------------------
.text:0040E40D
.text:0040E40D loc_40E40D:                             ; CODE XREF: sub_40E320+E4↑j
.text:0040E40D                 test    al, al
.text:0040E40F                 jns     short loc_40E3F3
.text:0040E411                 mov     edx, 4000h
.text:0040E416                 jmp     short loc_40E3F3
.text:0040E418 ; ---------------------------------------------------------------------------
.text:0040E418
.text:0040E418 loc_40E418:                             ; CODE XREF: sub_40E320+24↑j
.text:0040E418                                         ; DATA XREF: sub_40E320:jpt_40E344↑o
.text:0040E418                 mov     edx, ds:__pioinfo ; jumptable 0040E344 case 4
.text:0040E41E                 mov     ebx, [eax]
.text:0040E420                 mov     eax, ecx
.text:0040E422                 sar     eax, 5
.text:0040E425                 and     ecx, 1Fh
.text:0040E428                 mov     edx, [edx+eax*4]
.text:0040E42B                 lea     eax, [ecx+ecx*8]
.text:0040E42E                 shl     eax, 2
.text:0040E431                 xor     ecx, ecx
.text:0040E433                 test    bl, 8
.text:0040E436                 jz      short loc_40E443
.text:0040E438                 mov     ecx, 20h ; ' '
.text:0040E43D
.text:0040E43D loc_40E43D:                             ; CODE XREF: sub_40E320+126↓j
.text:0040E43D                                         ; sub_40E320+12D↓j
.text:0040E43D                 mov     [edx+eax+4], cl
.text:0040E441                 jmp     short loc_40E3CA
.text:0040E443 ; ---------------------------------------------------------------------------
.text:0040E443
.text:0040E443 loc_40E443:                             ; CODE XREF: sub_40E320+116↑j
.text:0040E443                 test    bh, 40h
.text:0040E446                 jz      short loc_40E43D
.text:0040E448                 mov     ecx, 80h ; '€'
.text:0040E44D                 jmp     short loc_40E43D
.text:0040E44D ; ---------------------------------------------------------------------------
.text:0040E44F                 align 10h
.text:0040E450
.text:0040E450 loc_40E450:                             ; CODE XREF: sub_40E320+24↑j
.text:0040E450                                         ; DATA XREF: sub_40E320:jpt_40E344↑o
.text:0040E450                 call    _errno          ; jumptable 0040E344 cases 5-7
.text:0040E455                 mov     dword ptr [eax], 28h ; '('
.text:0040E45B
.text:0040E45B loc_40E45B:                             ; CODE XREF: sub_40E320+167↓j
.text:0040E45B                                         ; sub_40E320+174↓j
.text:0040E45B                 mov     eax, 0FFFFFFFFh
.text:0040E460                 jmp     loc_40E380
.text:0040E465 ; ---------------------------------------------------------------------------
.text:0040E465
.text:0040E465 loc_40E465:                             ; CODE XREF: sub_40E320+24↑j
.text:0040E465                                         ; DATA XREF: sub_40E320:jpt_40E344↑o
.text:0040E465                 mov     ebx, [eax]      ; jumptable 0040E344 cases 8,9
.text:0040E467                 mov     [esp+1Ch+var_18], edx
.text:0040E46B                 mov     [esp+1Ch+FileHandle], ecx
.text:0040E46E                 mov     [esp+1Ch+var_14], ebx
.text:0040E472                 call    sub_40E200
.text:0040E477                 jmp     loc_40E380
.text:0040E47C ; ---------------------------------------------------------------------------
.text:0040E47C
.text:0040E47C def_40E344:                             ; CODE XREF: sub_40E320+1E↑j
.text:0040E47C                 call    _errno          ; jumptable 0040E344 default case
.text:0040E481                 mov     dword ptr [eax], 16h
.text:0040E487                 jmp     short loc_40E45B
.text:0040E489 ; ---------------------------------------------------------------------------
.text:0040E489
.text:0040E489 loc_40E489:                             ; CODE XREF: sub_40E320+11↑j
.text:0040E489                 call    _errno
.text:0040E48E                 mov     dword ptr [eax], 9
.text:0040E494                 jmp     short loc_40E45B
.text:0040E494 sub_40E320      endp
.text:0040E494
.text:0040E494 ; ---------------------------------------------------------------------------
.text:0040E496                 align 10h
.text:0040E4A0                 sub     esp, 3Ch
.text:0040E4A3                 mov     edx, [esp+48h]
.text:0040E4A7                 mov     eax, [edx+4]
.text:0040E4AA                 movzx   ecx, word ptr [edx]
.text:0040E4AD                 mov     [esp+18h], eax
.text:0040E4B1                 mov     [esp+10h], cx
.text:0040E4B6                 movzx   ecx, word ptr [edx+2]
.text:0040E4BA                 mov     [esp+12h], cx
.text:0040E4BF                 mov     ecx, eax
.text:0040E4C1                 mov     eax, [edx+8]
.text:0040E4C4                 sar     ecx, 1Fh
.text:0040E4C7                 mov     [esp+1Ch], ecx
.text:0040E4CB                 cdq
.text:0040E4CC                 lea     ecx, [esp+10h]
.text:0040E4D0                 mov     [esp+24h], edx
.text:0040E4D4                 mov     edx, [esp+44h]
.text:0040E4D8                 mov     [esp+20h], eax
.text:0040E4DC                 mov     [esp+8], ecx
.text:0040E4E0                 mov     [esp+4], edx
.text:0040E4E4                 mov     edx, [esp+40h]
.text:0040E4E8                 mov     [esp], edx
.text:0040E4EB                 call    sub_40E200
.text:0040E4F0                 add     esp, 3Ch
.text:0040E4F3                 retn
.text:0040E4F3 ; ---------------------------------------------------------------------------
.text:0040E4F4                 align 10h
.text:0040E500                 mov     edx, [esp+4]
.text:0040E504                 xor     eax, eax
.text:0040E506                 test    dl, 1
.text:0040E509                 jz      short loc_40E511
.text:0040E50B                 mov     eax, 2
.text:0040E510                 retn
.text:0040E511 ; ---------------------------------------------------------------------------
.text:0040E511
.text:0040E511 loc_40E511:                             ; CODE XREF: .text:0040E509↑j
.text:0040E511                 test    dl, 20h
.text:0040E514                 jz      short loc_40E520
.text:0040E516                 mov     eax, 8
.text:0040E51B                 retn
.text:0040E51B ; ---------------------------------------------------------------------------
.text:0040E51C                 align 10h
.text:0040E520
.text:0040E520 loc_40E520:                             ; CODE XREF: .text:0040E514↑j
.text:0040E520                 test    dl, 10h
.text:0040E523                 jz      short loc_40E530
.text:0040E525                 mov     eax, 80h ; '€'
.text:0040E52A                 retn
.text:0040E52A ; ---------------------------------------------------------------------------
.text:0040E52B                 align 10h
.text:0040E530
.text:0040E530 loc_40E530:                             ; CODE XREF: .text:0040E523↑j
.text:0040E530                 test    dl, dl
.text:0040E532                 jns     short locret_40E539
.text:0040E534                 mov     eax, 4000h
.text:0040E539
.text:0040E539 locret_40E539:                          ; CODE XREF: .text:0040E532↑j
.text:0040E539                 retn
.text:0040E539 ; ---------------------------------------------------------------------------
.text:0040E53A                 align 10h
.text:0040E540                 mov     edx, [esp+4]
.text:0040E544                 xor     eax, eax
.text:0040E546                 test    dl, 8
.text:0040E549                 jz      short loc_40E551
.text:0040E54B                 mov     eax, 20h ; ' '
.text:0040E550                 retn
.text:0040E551 ; ---------------------------------------------------------------------------
.text:0040E551
.text:0040E551 loc_40E551:                             ; CODE XREF: .text:0040E549↑j
.text:0040E551                 test    dh, 40h
.text:0040E554                 jz      short locret_40E55B
.text:0040E556                 mov     eax, 80h ; '€'
.text:0040E55B
.text:0040E55B locret_40E55B:                          ; CODE XREF: .text:0040E554↑j
.text:0040E55B                 retn
.text:0040E55B ; ---------------------------------------------------------------------------
.text:0040E55C                 align 10h
.text:0040E560
.text:0040E560 ; =============== S U B R O U T I N E =======================================
.text:0040E560
.text:0040E560
.text:0040E560 sub_40E560      proc near               ; CODE XREF: sub_408AC0+3F↑p
.text:0040E560                                         ; sub_410AE0+3C2↓p
.text:0040E560
.text:0040E560 var_1C          = dword ptr -1Ch
.text:0040E560 var_18          = dword ptr -18h
.text:0040E560 var_C           = dword ptr -0Ch
.text:0040E560 var_8           = dword ptr -8
.text:0040E560 var_4           = dword ptr -4
.text:0040E560 arg_0           = dword ptr  4
.text:0040E560 arg_4           = dword ptr  8
.text:0040E560
.text:0040E560                 sub     esp, 1Ch
.text:0040E563                 mov     edx, [esp+1Ch+arg_4]
.text:0040E567                 mov     [esp+1Ch+var_4], ebx
.text:0040E56B                 mov     ebx, [esp+1Ch+arg_0]
.text:0040E56F                 mov     [esp+1Ch+var_18], edx
.text:0040E573                 lea     edx, [esp+1Ch+var_C]
.text:0040E577                 mov     [esp+1Ch+var_1C], edx
.text:0040E57A                 call    sub_410430
.text:0040E57F                 test    eax, eax
.text:0040E581                 mov     edx, 0FFFFFFFFh
.text:0040E586                 jnz     short loc_40E5AA
.text:0040E588                 mov     ecx, [esp+1Ch+var_C]
.text:0040E58C                 mov     edx, 10624DD3h
.text:0040E591                 mov     [ebx], ecx
.text:0040E593                 mov     ecx, [esp+1Ch+var_8]
.text:0040E597                 mov     eax, ecx
.text:0040E599                 imul    edx
.text:0040E59B                 mov     eax, ecx
.text:0040E59D                 sar     eax, 1Fh
.text:0040E5A0                 sar     edx, 6
.text:0040E5A3                 sub     edx, eax
.text:0040E5A5                 mov     [ebx+4], edx
.text:0040E5A8                 xor     edx, edx
.text:0040E5AA
.text:0040E5AA loc_40E5AA:                             ; CODE XREF: sub_40E560+26↑j
.text:0040E5AA                 mov     ebx, [esp+1Ch+var_4]
.text:0040E5AE                 mov     eax, edx
.text:0040E5B0                 add     esp, 1Ch
.text:0040E5B3                 retn
.text:0040E5B3 sub_40E560      endp
.text:0040E5B3
.text:0040E5B3 ; ---------------------------------------------------------------------------
.text:0040E5B4                 align 10h
.text:0040E5C0
.text:0040E5C0 ; =============== S U B R O U T I N E =======================================
.text:0040E5C0
.text:0040E5C0
.text:0040E5C0 sub_40E5C0      proc near               ; CODE XREF: sub_408AC0+16↑p
.text:0040E5C0
.text:0040E5C0 var_2C          = dword ptr -2Ch
.text:0040E5C0 var_28          = dword ptr -28h
.text:0040E5C0 var_24          = dword ptr -24h
.text:0040E5C0 var_20          = dword ptr -20h
.text:0040E5C0 var_1C          = dword ptr -1Ch
.text:0040E5C0 var_18          = dword ptr -18h
.text:0040E5C0 var_10          = dword ptr -10h
.text:0040E5C0 var_C           = dword ptr -0Ch
.text:0040E5C0 var_8           = dword ptr -8
.text:0040E5C0 var_4           = dword ptr -4
.text:0040E5C0 arg_0           = dword ptr  4
.text:0040E5C0 arg_4           = dword ptr  8
.text:0040E5C0
.text:0040E5C0                 sub     esp, 2Ch
.text:0040E5C3                 mov     eax, [esp+2Ch+arg_0]
.text:0040E5C7                 mov     [esp+2Ch+var_10], ebx
.text:0040E5CB                 mov     ebx, 0FFFFFFFFh
.text:0040E5D0                 test    eax, eax
.text:0040E5D2                 mov     [esp+2Ch+var_C], esi
.text:0040E5D6                 mov     [esp+2Ch+var_8], edi
.text:0040E5DA                 mov     [esp+2Ch+var_4], ebp
.text:0040E5DE                 jz      loc_40E6D0
.text:0040E5E4                 test    eax, eax
.text:0040E5E6                 js      loc_40E6C3
.text:0040E5EC                 sub     eax, 2
.text:0040E5EF                 cmp     eax, 1
.text:0040E5F2                 ja      loc_40E6C3
.text:0040E5F8                 mov     ebp, ds:dword_4156E4
.text:0040E5FE                 mov     edi, ds:dword_4156E0
.text:0040E604                 mov     eax, ebp
.text:0040E606                 or      eax, edi
.text:0040E608                 jz      loc_40E6A6
.text:0040E60E
.text:0040E60E loc_40E60E:                             ; CODE XREF: sub_40E5C0+FE↓j
.text:0040E60E                 rdtsc
.text:0040E610                 mov     [esp+2Ch+var_24], edi
.text:0040E614                 mov     ebx, eax
.text:0040E616                 mov     esi, edx
.text:0040E618                 mov     [esp+2Ch+var_20], ebp
.text:0040E61C                 mov     [esp+2Ch+var_2C], eax
.text:0040E61F                 mov     [esp+2Ch+var_28], edx
.text:0040E623                 call    sub_4129A0
.text:0040E628                 mov     edx, [esp+2Ch+arg_4]
.text:0040E62C                 mov     [edx], eax
.text:0040E62E                 mov     [esp+2Ch+var_2C], ebx
.text:0040E631                 mov     ebx, 3B9ACA00h
.text:0040E636                 mov     [esp+2Ch+var_24], edi
.text:0040E63A                 mov     [esp+2Ch+var_20], ebp
.text:0040E63E                 mov     [esp+2Ch+var_28], esi
.text:0040E642                 call    sub_412E10
.text:0040E647                 mov     [esp+2Ch+var_1C], eax
.text:0040E64B                 mov     eax, [esp+2Ch+var_1C]
.text:0040E64F                 mov     [esp+2Ch+var_18], edx
.text:0040E653                 mov     [esp+2Ch+var_24], edi
.text:0040E657                 mul     ebx
.text:0040E659                 mov     ebx, [esp+2Ch+var_18]
.text:0040E65D                 mov     [esp+2Ch+var_20], ebp
.text:0040E661                 imul    ebx, 3B9ACA00h
.text:0040E667                 mov     ecx, eax
.text:0040E669                 mov     [esp+2Ch+var_2C], ecx
.text:0040E66C                 lea     edx, [ebx+edx]
.text:0040E66F                 mov     [esp+2Ch+var_28], edx
.text:0040E673                 call    sub_4129A0
.text:0040E678                 mov     ebx, [esp+2Ch+arg_4]
.text:0040E67C                 mov     [ebx+4], eax
.text:0040E67F                 xor     ebx, ebx
.text:0040E681                 jmp     short loc_40E690
.text:0040E681 ; ---------------------------------------------------------------------------
.text:0040E683                 align 10h
.text:0040E690
.text:0040E690 loc_40E690:                             ; CODE XREF: sub_40E5C0+C1↑j
.text:0040E690                                         ; sub_40E5C0+FC↓j ...
.text:0040E690                 mov     eax, ebx
.text:0040E692                 mov     esi, [esp+2Ch+var_C]
.text:0040E696                 mov     ebx, [esp+2Ch+var_10]
.text:0040E69A                 mov     edi, [esp+2Ch+var_8]
.text:0040E69E                 mov     ebp, [esp+2Ch+var_4]
.text:0040E6A2                 add     esp, 2Ch
.text:0040E6A5                 retn
.text:0040E6A6 ; ---------------------------------------------------------------------------
.text:0040E6A6
.text:0040E6A6 loc_40E6A6:                             ; CODE XREF: sub_40E5C0+48↑j
.text:0040E6A6                 call    sub_410520
.text:0040E6AB                 mov     ds:dword_4156E4, edx
.text:0040E6B1                 mov     edi, eax
.text:0040E6B3                 mov     ebp, edx
.text:0040E6B5                 mov     ds:dword_4156E0, eax
.text:0040E6BA                 or      edx, edi
.text:0040E6BC                 jz      short loc_40E690
.text:0040E6BE                 jmp     loc_40E60E
.text:0040E6C3 ; ---------------------------------------------------------------------------
.text:0040E6C3
.text:0040E6C3 loc_40E6C3:                             ; CODE XREF: sub_40E5C0+26↑j
.text:0040E6C3                                         ; sub_40E5C0+32↑j
.text:0040E6C3                 call    _errno
.text:0040E6C8                 mov     dword ptr [eax], 16h
.text:0040E6CE                 jmp     short loc_40E690
.text:0040E6D0 ; ---------------------------------------------------------------------------
.text:0040E6D0
.text:0040E6D0 loc_40E6D0:                             ; CODE XREF: sub_40E5C0+1E↑j
.text:0040E6D0                 mov     [esp+2Ch+var_28], 0
.text:0040E6D8                 mov     edx, [esp+2Ch+arg_4]
.text:0040E6DC                 mov     [esp+2Ch+var_2C], edx
.text:0040E6DF                 call    sub_410430
.text:0040E6E4                 mov     ebx, eax
.text:0040E6E6                 jmp     short loc_40E690
.text:0040E6E6 sub_40E5C0      endp
.text:0040E6E6
.text:0040E6E6 ; ---------------------------------------------------------------------------
.text:0040E6E8                 align 10h
.text:0040E6F0                 xor     eax, eax
.text:0040E6F2                 retn
.text:0040E6F2 ; ---------------------------------------------------------------------------
.text:0040E6F3                 align 10h
.text:0040E700
.text:0040E700 ; =============== S U B R O U T I N E =======================================
.text:0040E700
.text:0040E700 ; Attributes: info_from_lumina
.text:0040E700
.text:0040E700 ___get_errno    proc near               ; CODE XREF: sub_40E990+B↓p
.text:0040E700
.text:0040E700 arg_0           = dword ptr  4
.text:0040E700
.text:0040E700                 mov     eax, [esp+arg_0]
.text:0040E704                 cmp     eax, 53h ; 'S'
.text:0040E707                 jg      loc_40E800
.text:0040E70D                 cmp     eax, 52h ; 'R'
.text:0040E710                 jge     short loc_40E762
.text:0040E712                 cmp     eax, 0Fh
.text:0040E715                 jz      short loc_40E730
.text:0040E717                 cmp     eax, 0Fh
.text:0040E71A                 jg      short loc_40E790
.text:0040E71C                 cmp     eax, 9
.text:0040E71F                 jg      short loc_40E770
.text:0040E721                 cmp     eax, 7
.text:0040E724                 jge     short loc_40E769
.text:0040E726                 cmp     eax, 3
.text:0040E729                 jg      short loc_40E74A
.text:0040E72B                 cmp     eax, 2
.text:0040E72E                 jl      short loc_40E743
.text:0040E730
.text:0040E730 loc_40E730:                             ; CODE XREF: ___get_errno+15↑j
.text:0040E730                                         ; ___get_errno+9D↓j ...
.text:0040E730                 mov     edx, 2
.text:0040E735                 lea     esi, [esi+0]
.text:0040E739                 lea     edi, [edi+0]
.text:0040E740
.text:0040E740 loc_40E740:                             ; CODE XREF: ___get_errno+48↓j
.text:0040E740                                         ; ___get_errno+59↓j ...
.text:0040E740                 mov     eax, edx
.text:0040E742                 retn
.text:0040E743 ; ---------------------------------------------------------------------------
.text:0040E743
.text:0040E743 loc_40E743:                             ; CODE XREF: ___get_errno+2E↑j
.text:0040E743                                         ; ___get_errno+78↓j ...
.text:0040E743                 mov     edx, 16h
.text:0040E748                 jmp     short loc_40E740
.text:0040E74A ; ---------------------------------------------------------------------------
.text:0040E74A
.text:0040E74A loc_40E74A:                             ; CODE XREF: ___get_errno+29↑j
.text:0040E74A                 cmp     eax, 5
.text:0040E74D                 jz      short loc_40E762
.text:0040E74F                 cmp     eax, 5
.text:0040E752                 jg      short loc_40E75B
.text:0040E754                 mov     edx, 18h
.text:0040E759                 jmp     short loc_40E740
.text:0040E75B ; ---------------------------------------------------------------------------
.text:0040E75B
.text:0040E75B loc_40E75B:                             ; CODE XREF: ___get_errno+52↑j
.text:0040E75B                                         ; ___get_errno+180↓j
.text:0040E75B                 mov     edx, 9
.text:0040E760                 jmp     short loc_40E740
.text:0040E762 ; ---------------------------------------------------------------------------
.text:0040E762
.text:0040E762 loc_40E762:                             ; CODE XREF: ___get_errno+10↑j
.text:0040E762                                         ; ___get_errno+4D↑j ...
.text:0040E762                 mov     edx, 0Dh
.text:0040E767                 jmp     short loc_40E740
.text:0040E769 ; ---------------------------------------------------------------------------
.text:0040E769
.text:0040E769 loc_40E769:                             ; CODE XREF: ___get_errno+24↑j
.text:0040E769                                         ; ___get_errno+73↓j ...
.text:0040E769                 mov     edx, 0Ch
.text:0040E76E                 jmp     short loc_40E740
.text:0040E770 ; ---------------------------------------------------------------------------
.text:0040E770
.text:0040E770 loc_40E770:                             ; CODE XREF: ___get_errno+1F↑j
.text:0040E770                 cmp     eax, 0Dh
.text:0040E773                 jg      short loc_40E769
.text:0040E775                 cmp     eax, 0Ch
.text:0040E778                 jge     short loc_40E743
.text:0040E77A                 cmp     eax, 0Ah
.text:0040E77D                 mov     edx, 7
.text:0040E782                 jz      short loc_40E740
.text:0040E784                 cmp     eax, 0Bh
.text:0040E787                 jnz     short loc_40E743
.text:0040E789
.text:0040E789 loc_40E789:                             ; CODE XREF: ___get_errno+21A↓j
.text:0040E789                 mov     edx, 8
.text:0040E78E                 jmp     short loc_40E740
.text:0040E790 ; ---------------------------------------------------------------------------
.text:0040E790
.text:0040E790 loc_40E790:                             ; CODE XREF: ___get_errno+1A↑j
.text:0040E790                 cmp     eax, 22h ; '"'
.text:0040E793                 jg      short loc_40E7C4
.text:0040E795                 cmp     eax, 16h
.text:0040E798                 jge     short loc_40E762
.text:0040E79A                 cmp     eax, 12h
.text:0040E79D                 jz      short loc_40E730
.text:0040E79F                 cmp     eax, 12h
.text:0040E7A2                 jg      short loc_40E7B5
.text:0040E7A4                 cmp     eax, 10h
.text:0040E7A7                 jz      short loc_40E762
.text:0040E7A9                 mov     edx, 12h
.text:0040E7AE                 cmp     eax, 11h
.text:0040E7B1
.text:0040E7B1 loc_40E7B1:                             ; CODE XREF: ___get_errno+172↓j
.text:0040E7B1                                         ; ___get_errno+24C↓j ...
.text:0040E7B1                 jnz     short loc_40E743
.text:0040E7B3                 jmp     short loc_40E740
.text:0040E7B5 ; ---------------------------------------------------------------------------
.text:0040E7B5
.text:0040E7B5 loc_40E7B5:                             ; CODE XREF: ___get_errno+A2↑j
.text:0040E7B5                 cmp     eax, 14h
.text:0040E7B8                 jle     short loc_40E762
.text:0040E7BA
.text:0040E7BA loc_40E7BA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040E7BA                 mov     edx, 10h
.text:0040E7BF                 jmp     loc_40E740
.text:0040E7C4 ; ---------------------------------------------------------------------------
.text:0040E7C4
.text:0040E7C4 loc_40E7C4:                             ; CODE XREF: ___get_errno+93↑j
.text:0040E7C4                 cmp     eax, 41h ; 'A'
.text:0040E7C7                 jz      short loc_40E762
.text:0040E7C9                 cmp     eax, 41h ; 'A'
.text:0040E7CC                 jg      short loc_40E7E1
.text:0040E7CE                 cmp     eax, 24h ; '$'
.text:0040E7D1                 jz      short loc_40E762
.text:0040E7D3                 cmp     eax, 35h ; '5'
.text:0040E7D6                 jnz     loc_40E743
.text:0040E7DC                 jmp     loc_40E730
.text:0040E7E1 ; ---------------------------------------------------------------------------
.text:0040E7E1
.text:0040E7E1 loc_40E7E1:                             ; CODE XREF: ___get_errno+CC↑j
.text:0040E7E1                 cmp     eax, 43h ; 'C'
.text:0040E7E4                 jz      loc_40E730
.text:0040E7EA                 cmp     eax, 50h ; 'P'
.text:0040E7ED                 jnz     loc_40E743
.text:0040E7F3
.text:0040E7F3 loc_40E7F3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0040E7F3                 mov     edx, 11h
.text:0040E7F8                 jmp     loc_40E740
.text:0040E7F8 ; ---------------------------------------------------------------------------
.text:0040E7FD                 align 10h
.text:0040E800
.text:0040E800 loc_40E800:                             ; CODE XREF: ___get_errno+7↑j
.text:0040E800                 cmp     eax, 0A1h ; '¡'
.text:0040E805                 jz      loc_40E730
.text:0040E80B                 cmp     eax, 0A1h ; '¡'
.text:0040E810                 jg      loc_40E8C0
.text:0040E816                 cmp     eax, 81h
.text:0040E81B                 jg      short loc_40E885
.text:0040E81D                 cmp     eax, 80h ; '€'
.text:0040E822                 mov     edx, 0Ah
.text:0040E827                 jge     loc_40E740
.text:0040E82D                 cmp     eax, 6Ch ; 'l'
.text:0040E830                 jz      loc_40E762
.text:0040E836                 cmp     eax, 6Ch ; 'l'
.text:0040E839                 jg      short loc_40E857
.text:0040E83B                 cmp     eax, 57h ; 'W'
.text:0040E83E                 jz      loc_40E743
.text:0040E844                 cmp     eax, 59h ; 'Y'
.text:0040E847                 jnz     loc_40E743
.text:0040E84D
.text:0040E84D loc_40E84D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040E84D                                         ; ___get_errno+23C↓j
.text:0040E84D                 mov     edx, 0Bh
.text:0040E852                 jmp     loc_40E740
.text:0040E857 ; ---------------------------------------------------------------------------
.text:0040E857
.text:0040E857 loc_40E857:                             ; CODE XREF: ___get_errno+139↑j
.text:0040E857                 cmp     eax, 70h ; 'p'
.text:0040E85A                 mov     edx, 1Ch
.text:0040E85F                 jz      loc_40E740
.text:0040E865                 cmp     eax, 70h ; 'p'
.text:0040E868                 jg      short loc_40E877
.text:0040E86A                 mov     edx, 20h ; ' '
.text:0040E86F                 cmp     eax, 6Dh ; 'm'
.text:0040E872                 jmp     loc_40E7B1
.text:0040E877 ; ---------------------------------------------------------------------------
.text:0040E877
.text:0040E877 loc_40E877:                             ; CODE XREF: ___get_errno+168↑j
.text:0040E877                 cmp     eax, 72h ; 'r'
.text:0040E87A
.text:0040E87A loc_40E87A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040E87A                 jnz     loc_40E743
.text:0040E880                 jmp     loc_40E75B
.text:0040E885 ; ---------------------------------------------------------------------------
.text:0040E885
.text:0040E885 loc_40E885:                             ; CODE XREF: ___get_errno+11B↑j
.text:0040E885                 cmp     eax, 84h ; '„'
.text:0040E88A                 jz      loc_40E762
.text:0040E890                 cmp     eax, 84h ; '„'
.text:0040E895                 jg      short loc_40E89E
.text:0040E897                 cmp     eax, 82h ; '‚'
.text:0040E89C                 jmp     short loc_40E87A
.text:0040E89E ; ---------------------------------------------------------------------------
.text:0040E89E
.text:0040E89E loc_40E89E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040E89E                 cmp     eax, 91h ; '‘'
.text:0040E8A3                 mov     edx, 29h ; ')'
.text:0040E8A8                 jz      loc_40E740
.text:0040E8AE                 cmp     eax, 9Eh ; 'ž'
.text:0040E8B3
.text:0040E8B3 loc_40E8B3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0040E8B3                 jnz     loc_40E743
.text:0040E8B9                 jmp     loc_40E762
.text:0040E8B9 ; ---------------------------------------------------------------------------
.text:0040E8BE                 align 10h
.text:0040E8C0
.text:0040E8C0 loc_40E8C0:                             ; CODE XREF: ___get_errno+110↑j
.text:0040E8C0                 cmp     eax, 0CEh ; 'Î'
.text:0040E8C5                 jz      loc_40E730
.text:0040E8CB                 cmp     eax, 0CEh ; 'Î'
.text:0040E8D0                 jg      short loc_40E920
.text:0040E8D2                 cmp     eax, 0AAh ; 'ª'
.text:0040E8D7                 jz      loc_40E7BA
.text:0040E8DD                 cmp     eax, 0AAh ; 'ª'
.text:0040E8E2                 jg      short loc_40E8F6
.text:0040E8E4                 cmp     eax, 0A4h ; '¤'
.text:0040E8E9                 jz      loc_40E84D
.text:0040E8EF                 cmp     eax, 0A7h ; '§'
.text:0040E8F4                 jmp     short loc_40E8B3
.text:0040E8F6 ; ---------------------------------------------------------------------------
.text:0040E8F6
.text:0040E8F6 loc_40E8F6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0040E8F6                 cmp     eax, 0B7h ; '·'
.text:0040E8FB                 jz      loc_40E7F3
.text:0040E901                 cmp     eax, 0B7h ; '·'
.text:0040E906                 jl      loc_40E743
.text:0040E90C                 sub     eax, 0BCh ; '¼'
.text:0040E911                 cmp     eax, 0Eh
.text:0040E914                 ja      loc_40E743
.text:0040E91A                 jmp     loc_40E789
.text:0040E91A ; ---------------------------------------------------------------------------
.text:0040E91F                 align 10h
.text:0040E920
.text:0040E920 loc_40E920:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0040E920                 cmp     eax, 46Bh
.text:0040E925                 mov     edx, 24h ; '$'
.text:0040E92A                 jz      loc_40E740
.text:0040E930                 cmp     eax, 46Bh
.text:0040E935                 jg      short loc_40E951
.text:0040E937                 cmp     eax, 0D7h ; '×'
.text:0040E93C                 jz      loc_40E84D
.text:0040E942                 mov     edx, 5
.text:0040E947                 cmp     eax, 45Dh
.text:0040E94C                 jmp     loc_40E7B1
.text:0040E951 ; ---------------------------------------------------------------------------
.text:0040E951
.text:0040E951 loc_40E951:                             ; CODE XREF: ___get_errno+235↑j
.text:0040E951                 cmp     eax, 4D5h
.text:0040E956                 mov     edx, 4
.text:0040E95B                 jz      loc_40E740
.text:0040E961                 cmp     eax, 4D5h
.text:0040E966                 jg      short loc_40E977
.text:0040E968                 mov     edx, 13h
.text:0040E96D                 cmp     eax, 4B0h
.text:0040E972                 jmp     loc_40E7B1
.text:0040E977 ; ---------------------------------------------------------------------------
.text:0040E977
.text:0040E977 loc_40E977:                             ; CODE XREF: ___get_errno+266↑j
.text:0040E977                 cmp     eax, 718h
.text:0040E97C                 jnz     loc_40E743
.text:0040E982                 jmp     loc_40E769
.text:0040E982 ___get_errno    endp
.text:0040E982
.text:0040E982 ; ---------------------------------------------------------------------------
.text:0040E987                 align 10h
.text:0040E990
.text:0040E990 ; =============== S U B R O U T I N E =======================================
.text:0040E990
.text:0040E990
.text:0040E990 sub_40E990      proc near               ; CODE XREF: sub_410FB0:loc_40CB7D↑p
.text:0040E990                                         ; sub_40D120:loc_40D188↑p ...
.text:0040E990
.text:0040E990 var_C           = dword ptr -0Ch
.text:0040E990
.text:0040E990                 sub     esp, 0Ch
.text:0040E993                 call    GetLastError
.text:0040E998                 mov     [esp+0Ch+var_C], eax
.text:0040E99B                 call    ___get_errno
.text:0040E9A0                 add     esp, 0Ch
.text:0040E9A3                 retn
.text:0040E9A3 sub_40E990      endp
.text:0040E9A3
.text:0040E9A3 ; ---------------------------------------------------------------------------
.text:0040E9A4                 align 10h
.text:0040E9B0
.text:0040E9B0 ; =============== S U B R O U T I N E =======================================
.text:0040E9B0
.text:0040E9B0
.text:0040E9B0 sub_40E9B0      proc near               ; CODE XREF: .text:0040D093↑p
.text:0040E9B0                                         ; .text:0040D0E3↑p
.text:0040E9B0
.text:0040E9B0 arg_4           = dword ptr  8
.text:0040E9B0
.text:0040E9B0                 sub     esp, 0Ch
.text:0040E9B3                 mov     edx, [esp+0Ch+arg_4]
.text:0040E9B7                 test    edx, edx
.text:0040E9B9                 jz      short loc_40E9C0
.text:0040E9BB                 add     esp, 0Ch
.text:0040E9BE                 jmp     short sub_40EA00
.text:0040E9C0 ; ---------------------------------------------------------------------------
.text:0040E9C0
.text:0040E9C0 loc_40E9C0:                             ; CODE XREF: sub_40E9B0+9↑j
.text:0040E9C0                 call    _errno
.text:0040E9C5                 mov     dword ptr [eax], 16h
.text:0040E9CB                 xor     eax, eax
.text:0040E9CD                 add     esp, 0Ch
.text:0040E9D0                 retn
.text:0040E9D0 sub_40E9B0      endp
.text:0040E9D0
.text:0040E9D1 ; ---------------------------------------------------------------------------
.text:0040E9D1                 jmp     short sub_40E9E0
.text:0040E9D1 ; ---------------------------------------------------------------------------
.text:0040E9D3                 align 10h
.text:0040E9E0
.text:0040E9E0 ; =============== S U B R O U T I N E =======================================
.text:0040E9E0
.text:0040E9E0
.text:0040E9E0 ; int __cdecl sub_40E9E0(LPCSTR)
.text:0040E9E0 sub_40E9E0      proc near               ; CODE XREF: sub_410FB0-44DC↑p
.text:0040E9E0                                         ; .text:0040D288↑p ...
.text:0040E9E0
.text:0040E9E0 lpFileName      = dword ptr -0Ch
.text:0040E9E0 Destination     = dword ptr -8
.text:0040E9E0 arg_0           = dword ptr  4
.text:0040E9E0
.text:0040E9E0                 sub     esp, 0Ch
.text:0040E9E3                 mov     edx, [esp+0Ch+arg_0]
.text:0040E9E7                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040E9EF                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0040E9F2                 call    sub_40EA00
.text:0040E9F7                 add     esp, 0Ch
.text:0040E9FA                 retn
.text:0040E9FA sub_40E9E0      endp
.text:0040E9FA
.text:0040E9FA ; ---------------------------------------------------------------------------
.text:0040E9FB                 align 10h
.text:0040EA00
.text:0040EA00 ; =============== S U B R O U T I N E =======================================
.text:0040EA00
.text:0040EA00
.text:0040EA00 ; int __cdecl sub_40EA00(LPCSTR lpFileName, char *Destination)
.text:0040EA00 sub_40EA00      proc near               ; CODE XREF: sub_40E9B0+E↑j
.text:0040EA00                                         ; sub_40E9E0+12↑p
.text:0040EA00
.text:0040EA00 Size            = dword ptr -2Ch
.text:0040EA00 nBufferLength   = dword ptr -28h
.text:0040EA00 lpBuffer        = dword ptr -24h
.text:0040EA00 lpFilePart      = dword ptr -20h
.text:0040EA00 FilePart        = dword ptr -14h
.text:0040EA00 lpFileName      = dword ptr  4
.text:0040EA00 Destination     = dword ptr  8
.text:0040EA00
.text:0040EA00                 push    ebp
.text:0040EA01                 push    edi
.text:0040EA02                 push    esi
.text:0040EA03                 push    ebx
.text:0040EA04                 sub     esp, 1Ch
.text:0040EA07                 mov     edi, [esp+2Ch+lpFileName]
.text:0040EA0B                 mov     ebp, [esp+2Ch+Destination]
.text:0040EA0F                 test    edi, edi
.text:0040EA11                 jz      loc_40EB19
.text:0040EA17                 cmp     byte ptr [edi], 0
.text:0040EA1A                 jz      loc_40EB0C
.text:0040EA20                 mov     [esp+2Ch+Size], 104h ; Size
.text:0040EA27                 call    malloc
.text:0040EA2C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040EA30                 lea     edx, [esp+2Ch+FilePart]
.text:0040EA34                 mov     ebx, eax
.text:0040EA36                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040EA3A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0040EA42                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040EA45                 call    GetFullPathNameA
.text:0040EA4A                 sub     esp, 10h
.text:0040EA4D                 mov     esi, eax
.text:0040EA4F                 test    eax, eax
.text:0040EA51                 jz      loc_40EAFA
.text:0040EA57                 cmp     eax, 104h
.text:0040EA5C                 jle     short loc_40EA6D
.text:0040EA5E                 test    ebp, ebp
.text:0040EA60                 jz      short loc_40EAC9
.text:0040EA62                 call    _errno
.text:0040EA67                 mov     dword ptr [eax], 26h ; '&'
.text:0040EA6D
.text:0040EA6D loc_40EA6D:                             ; CODE XREF: sub_40EA00+5C↑j
.text:0040EA6D                                         ; sub_40EA00+F5↓j
.text:0040EA6D                 call    _errno
.text:0040EA72                 mov     edi, [eax]
.text:0040EA74                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040EA7C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040EA7F                 call    sub_40EB30
.text:0040EA84                 test    eax, eax
.text:0040EA86                 jnz     short loc_40EAA0
.text:0040EA88                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040EA8D                 cmp     al, 2Fh ; '/'
.text:0040EA8F                 jz      short loc_40EAA0
.text:0040EA91                 cmp     al, 5Ch ; '\'
.text:0040EA93                 jz      short loc_40EAA0
.text:0040EA95                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0040EA99                 mov     byte ptr [esi+ebx+1], 0
.text:0040EA9E                 mov     esi, esi
.text:0040EAA0
.text:0040EAA0 loc_40EAA0:                             ; CODE XREF: sub_40EA00+86↑j
.text:0040EAA0                                         ; sub_40EA00+8F↑j ...
.text:0040EAA0                 call    _errno
.text:0040EAA5                 mov     [eax], edi
.text:0040EAA7                 mov     [esp+2Ch+Size], ebx
.text:0040EAAA                 call    sub_40CF80
.text:0040EAAF                 test    ebp, ebp
.text:0040EAB1                 mov     eax, ebx
.text:0040EAB3                 jz      short loc_40EAC1
.text:0040EAB5                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0040EAB9                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040EABC                 call    strcpy
.text:0040EAC1
.text:0040EAC1 loc_40EAC1:                             ; CODE XREF: sub_40EA00+B3↑j
.text:0040EAC1                                         ; sub_40EA00+10A↓j
.text:0040EAC1                 add     esp, 1Ch
.text:0040EAC4                 pop     ebx
.text:0040EAC5                 pop     esi
.text:0040EAC6                 pop     edi
.text:0040EAC7                 pop     ebp
.text:0040EAC8                 retn
.text:0040EAC9 ; ---------------------------------------------------------------------------
.text:0040EAC9
.text:0040EAC9 loc_40EAC9:                             ; CODE XREF: sub_40EA00+60↑j
.text:0040EAC9                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040EACC                 lea     ecx, [eax+2]
.text:0040EACF                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0040EAD3                 call    realloc
.text:0040EAD8                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040EADC                 lea     edx, [esp+2Ch+FilePart]
.text:0040EAE0                 mov     ebx, eax
.text:0040EAE2                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040EAE6                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040EAEA                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040EAED                 call    GetFullPathNameA
.text:0040EAF2                 sub     esp, 10h
.text:0040EAF5                 jmp     loc_40EA6D
.text:0040EAFA ; ---------------------------------------------------------------------------
.text:0040EAFA
.text:0040EAFA loc_40EAFA:                             ; CODE XREF: sub_40EA00+51↑j
.text:0040EAFA                 call    sub_40E990
.text:0040EAFF                 mov     esi, eax
.text:0040EB01                 call    _errno
.text:0040EB06                 mov     [eax], esi
.text:0040EB08
.text:0040EB08 loc_40EB08:                             ; CODE XREF: sub_40EA00+117↓j
.text:0040EB08                                         ; sub_40EA00+124↓j
.text:0040EB08                 xor     eax, eax
.text:0040EB0A                 jmp     short loc_40EAC1
.text:0040EB0C ; ---------------------------------------------------------------------------
.text:0040EB0C
.text:0040EB0C loc_40EB0C:                             ; CODE XREF: sub_40EA00+1A↑j
.text:0040EB0C                 call    _errno
.text:0040EB11                 mov     dword ptr [eax], 2
.text:0040EB17                 jmp     short loc_40EB08
.text:0040EB19 ; ---------------------------------------------------------------------------
.text:0040EB19
.text:0040EB19 loc_40EB19:                             ; CODE XREF: sub_40EA00+11↑j
.text:0040EB19                 call    _errno
.text:0040EB1E                 mov     dword ptr [eax], 16h
.text:0040EB24                 jmp     short loc_40EB08
.text:0040EB24 sub_40EA00      endp
.text:0040EB24
.text:0040EB24 ; ---------------------------------------------------------------------------
.text:0040EB26                 align 10h
.text:0040EB30
.text:0040EB30 ; =============== S U B R O U T I N E =======================================
.text:0040EB30
.text:0040EB30
.text:0040EB30 ; int __cdecl sub_40EB30(LPCSTR lpFileName, int)
.text:0040EB30 sub_40EB30      proc near               ; CODE XREF: sub_410FB0-44ED↑p
.text:0040EB30                                         ; .text:0040CF62↑p ...
.text:0040EB30
.text:0040EB30 uMode           = dword ptr -1Ch
.text:0040EB30 var_10          = dword ptr -10h
.text:0040EB30 var_C           = dword ptr -0Ch
.text:0040EB30 var_8           = dword ptr -8
.text:0040EB30 var_4           = dword ptr -4
.text:0040EB30 lpFileName      = dword ptr  4
.text:0040EB30 arg_4           = dword ptr  8
.text:0040EB30
.text:0040EB30                 sub     esp, 1Ch
.text:0040EB33                 mov     [esp+1Ch+var_10], ebx
.text:0040EB37                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040EB3B                 mov     [esp+1Ch+var_4], ebp
.text:0040EB3F                 xor     ebp, ebp
.text:0040EB41                 test    ebx, ebx
.text:0040EB43                 mov     [esp+1Ch+var_C], esi
.text:0040EB47                 mov     esi, [esp+1Ch+arg_4]
.text:0040EB4B                 mov     [esp+1Ch+var_8], edi
.text:0040EB4F                 jz      short loc_40EB59
.text:0040EB51                 test    esi, 0FFFFFFE8h
.text:0040EB57                 jz      short loc_40EB80
.text:0040EB59
.text:0040EB59 loc_40EB59:                             ; CODE XREF: sub_40EB30+1F↑j
.text:0040EB59                 call    _errno
.text:0040EB5E                 mov     dword ptr [eax], 16h
.text:0040EB64
.text:0040EB64 loc_40EB64:                             ; CODE XREF: sub_40EB30+B1↓j
.text:0040EB64                 mov     eax, 0FFFFFFFFh
.text:0040EB69
.text:0040EB69 loc_40EB69:                             ; CODE XREF: sub_40EB30+86↓j
.text:0040EB69                                         ; sub_40EB30+A4↓j
.text:0040EB69                 mov     ebx, [esp+1Ch+var_10]
.text:0040EB6D                 mov     esi, [esp+1Ch+var_C]
.text:0040EB71                 mov     edi, [esp+1Ch+var_8]
.text:0040EB75                 mov     ebp, [esp+1Ch+var_4]
.text:0040EB79                 add     esp, 1Ch
.text:0040EB7C                 retn
.text:0040EB7C ; ---------------------------------------------------------------------------
.text:0040EB7D                 align 10h
.text:0040EB80
.text:0040EB80 loc_40EB80:                             ; CODE XREF: sub_40EB30+27↑j
.text:0040EB80                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0040EB87                 call    SetErrorMode
.text:0040EB8C                 sub     esp, 4
.text:0040EB8F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0040EB92                 call    GetFileAttributesA
.text:0040EB97                 sub     esp, 4
.text:0040EB9A                 mov     edi, eax
.text:0040EB9C                 cmp     eax, 0FFFFFFFFh
.text:0040EB9F                 jz      short loc_40EBE3
.text:0040EBA1
.text:0040EBA1 loc_40EBA1:                             ; CODE XREF: sub_40EB30+C6↓j
.text:0040EBA1                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0040EBA8                 call    SetErrorMode
.text:0040EBAD                 sub     esp, 4
.text:0040EBB0                 mov     eax, 0FFFFFFFFh
.text:0040EBB5                 inc     ebp
.text:0040EBB6                 jz      short loc_40EB69
.text:0040EBB8                 test    esi, 10h
.text:0040EBBE                 jz      short loc_40EBC8
.text:0040EBC0                 test    edi, 10h
.text:0040EBC6                 jz      short loc_40EBD6
.text:0040EBC8
.text:0040EBC8 loc_40EBC8:                             ; CODE XREF: sub_40EB30+8E↑j
.text:0040EBC8                 and     esi, 2
.text:0040EBCB                 jz      short loc_40EBD2
.text:0040EBCD                 and     edi, 1
.text:0040EBD0                 jnz     short loc_40EBD6
.text:0040EBD2
.text:0040EBD2 loc_40EBD2:                             ; CODE XREF: sub_40EB30+9B↑j
.text:0040EBD2                 xor     eax, eax
.text:0040EBD4                 jmp     short loc_40EB69
.text:0040EBD6 ; ---------------------------------------------------------------------------
.text:0040EBD6
.text:0040EBD6 loc_40EBD6:                             ; CODE XREF: sub_40EB30+96↑j
.text:0040EBD6                                         ; sub_40EB30+A0↑j
.text:0040EBD6                 call    _errno
.text:0040EBDB                 mov     dword ptr [eax], 0Dh
.text:0040EBE1                 jmp     short loc_40EB64
.text:0040EBE3 ; ---------------------------------------------------------------------------
.text:0040EBE3
.text:0040EBE3 loc_40EBE3:                             ; CODE XREF: sub_40EB30+6F↑j
.text:0040EBE3                 call    sub_40E990
.text:0040EBE8                 mov     ebp, eax
.text:0040EBEA                 call    _errno
.text:0040EBEF                 mov     [eax], ebp
.text:0040EBF1                 mov     ebp, 0FFFFFFFFh
.text:0040EBF6                 jmp     short loc_40EBA1
.text:0040EBF6 sub_40EB30      endp
.text:0040EBF6
.text:0040EBF6 ; ---------------------------------------------------------------------------
.text:0040EBF8                 align 10h
.text:0040EC00 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040EE1F↓o
.text:0040EC0C aLu             db '%lu',0              ; DATA XREF: .text:0040EE2F↓o
.text:0040EC10 asc_40EC10      db ' ',0                ; DATA XREF: .text:loc_40EF18↓o
.text:0040EC12                 align 10h
.text:0040EC20 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0040EC20                                         ; DATA XREF: .text:0040EF4F↓o
.text:0040EC40 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40EF5D↓o
.text:0040EC4C aServer         db ' Server',0          ; DATA XREF: .text:0040EF86↓o
.text:0040EC4C                                         ; .text:loc_40F0FE↓o
.text:0040EC54 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_40EF98↓o
.text:0040EC65 aDatacenterServ db ' Datacenter Server',0
.text:0040EC65                                         ; DATA XREF: .text:loc_40EFA2↓o
.text:0040EC78 aStandardEditio db ' Standard Edition',0
.text:0040EC78                                         ; DATA XREF: .text:0040EFCA↓o
.text:0040EC8A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_40EFD4↓o
.text:0040EC97 aEnterpriseEdit db ' Enterprise Edition',0
.text:0040EC97                                         ; DATA XREF: .text:loc_40EFDE↓o
.text:0040ECAB aDatacenterEdit db ' Datacenter Edition',0
.text:0040ECAB                                         ; DATA XREF: .text:loc_40EFE8↓o
.text:0040ECBF aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040EFFB↓o
.text:0040ECCD aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_40F005↓o
.text:0040ECCD                                         ; .text:loc_40F110↓o
.text:0040ECDB                 align 10h
.text:0040ECE0 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0040ECE0                                         ; DATA XREF: .text:0040F032↓o
.text:0040ED10 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0040F079↓o
.text:0040ED1C aWinnt          db 'WINNT',0            ; DATA XREF: .text:0040F0B4↓o
.text:0040ED22 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0040F0CB↓o
.text:0040ED2B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0040F0E2↓o
.text:0040ED34                 align 10h
.text:0040ED40 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0040ED40                                         ; DATA XREF: .text:0040F257↓o
.text:0040ED63                 align 20h
.text:0040ED80 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0040ED80                                         ; DATA XREF: .text:0040F2B6↓o
.text:0040EDA6 ; ---------------------------------------------------------------------------
.text:0040EDA6
.text:0040EDA6 loc_40EDA6:                             ; DATA XREF: .text:loc_40F321↓o
.text:0040EDA6                 and     [ebx+45h], dl
.text:0040EDA9                 add     [eax], ah
.text:0040EDAB                 push    ebx
.text:0040EDAC                 push    eax
.text:0040EDAD                 xor     [eax], eax
.text:0040EDAF
.text:0040EDAF loc_40EDAF:                             ; DATA XREF: .text:loc_40F39B↓o
.text:0040EDAF                 and     [edi+53h], cl
.text:0040EDB2                 push    edx
.text:0040EDB3                 xor     al, [eax]
.text:0040EDB5                 lea     esi, [esi+0]
.text:0040EDB9                 lea     edi, [edi+0]
.text:0040EDC0                 push    edi
.text:0040EDC1                 push    esi
.text:0040EDC2                 push    ebx
.text:0040EDC3                 sub     esp, 130h
.text:0040EDC9                 mov     ebx, [esp+140h]
.text:0040EDD0                 call    sub_40F4D0
.text:0040EDD5                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040EDDA                 cmp     eax, 1
.text:0040EDDD                 jz      loc_40F280
.text:0040EDE3                 cmp     eax, 1
.text:0040EDE6                 jb      loc_40F256
.text:0040EDEC                 cmp     eax, 2
.text:0040EDEF                 jz      loc_40EEA0
.text:0040EDF5                 cmp     eax, 3
.text:0040EDF8                 jz      short loc_40EE5F
.text:0040EDFA                 lea     esi, [esi+0]
.text:0040EE00
.text:0040EE00 loc_40EE00:                             ; CODE XREF: .text:0040EE95↓j
.text:0040EE00                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040EE06                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040EE0C
.text:0040EE0C loc_40EE0C:                             ; CODE XREF: .text:0040F29F↓j
.text:0040EE0C                 mov     [esp+10h], edx
.text:0040EE10                 mov     ebx, [esp+144h]
.text:0040EE17                 mov     [esp+0Ch], ecx
.text:0040EE1B                 mov     [esp+8], eax
.text:0040EE1F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0040EE27                 mov     [esp], ebx
.text:0040EE2A                 call    sprintf
.text:0040EE2F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:0040EE37                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040EE3D                 mov     ecx, [esp+148h]
.text:0040EE44                 mov     [esp+8], edi
.text:0040EE48                 mov     [esp], ecx
.text:0040EE4B                 call    sprintf
.text:0040EE50                 mov     eax, 1
.text:0040EE55
.text:0040EE55 loc_40EE55:                             ; CODE XREF: .text:0040F04F↓j
.text:0040EE55                                         ; .text:0040F09C↓j
.text:0040EE55                 add     esp, 130h
.text:0040EE5B                 pop     ebx
.text:0040EE5C                 pop     esi
.text:0040EE5D                 pop     edi
.text:0040EE5E                 retn
.text:0040EE5F ; ---------------------------------------------------------------------------
.text:0040EE5F
.text:0040EE5F loc_40EE5F:                             ; CODE XREF: .text:0040EDF8↑j
.text:0040EE5F                 mov     dword ptr [ebx], 7263694Dh
.text:0040EE65                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040EE6C                 mov     dword ptr [ebx+8], 69572074h
.text:0040EE73                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040EE7A                 mov     dword ptr [ebx+10h], 45432073h
.text:0040EE81                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0040EE87                 mov     esi, esi
.text:0040EE89                 lea     edi, [edi+0]
.text:0040EE90
.text:0040EE90 loc_40EE90:                             ; CODE XREF: .text:0040EF38↓j
.text:0040EE90                                         ; .text:0040F279↓j ...
.text:0040EE90                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040EE95                 jmp     loc_40EE00
.text:0040EE95 ; ---------------------------------------------------------------------------
.text:0040EE9A                 align 10h
.text:0040EEA0
.text:0040EEA0 loc_40EEA0:                             ; CODE XREF: .text:0040EDEF↑j
.text:0040EEA0                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0040EEA6                 cmp     edx, 3
.text:0040EEA9                 mov     eax, edx
.text:0040EEAB                 jz      loc_40F215
.text:0040EEB1
.text:0040EEB1 loc_40EEB1:                             ; CODE XREF: .text:0040F21C↓j
.text:0040EEB1                 cmp     eax, 4
.text:0040EEB4                 jz      loc_40F1D5
.text:0040EEBA
.text:0040EEBA loc_40EEBA:                             ; CODE XREF: .text:0040F1DD↓j
.text:0040EEBA                 cmp     eax, 4
.text:0040EEBD                 ja      loc_40F122
.text:0040EEC3                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040EEC9                 test    ecx, ecx
.text:0040EECB                 jnz     loc_40F122
.text:0040EED1                 mov     dword ptr [ebx], 7263694Dh
.text:0040EED7                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040EEDE                 mov     dword ptr [ebx+8], 69572074h
.text:0040EEE5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040EEEC                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040EEF3
.text:0040EEF3 loc_40EEF3:                             ; CODE XREF: .text:0040F195↓j
.text:0040EEF3                 mov     byte ptr [ebx+14h], 0
.text:0040EEF7
.text:0040EEF7 loc_40EEF7:                             ; CODE XREF: .text:0040F125↓j
.text:0040EEF7                                         ; .text:0040F13C↓j ...
.text:0040EEF7                 mov     esi, dword_414090
.text:0040EEFD                 test    esi, esi
.text:0040EEFF                 jz      loc_40F012
.text:0040EF05                 movzx   eax, ds:byte_41579A
.text:0040EF0C                 cmp     al, 1
.text:0040EF0E                 jz      loc_40EFF2
.text:0040EF14                 cmp     al, 3
.text:0040EF16                 jz      short loc_40EF3D
.text:0040EF18
.text:0040EF18 loc_40EF18:                             ; CODE XREF: .text:0040EF5B↓j
.text:0040EF18                                         ; .text:0040EF96↓j ...
.text:0040EF18                 mov     dword ptr [esp+4], offset asc_40EC10 ; " "
.text:0040EF20                 mov     [esp], ebx
.text:0040EF23                 call    strcat
.text:0040EF28                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0040EF30                 mov     [esp], ebx
.text:0040EF33                 call    strcat
.text:0040EF38                 jmp     loc_40EE90
.text:0040EF3D ; ---------------------------------------------------------------------------
.text:0040EF3D
.text:0040EF3D loc_40EF3D:                             ; CODE XREF: .text:0040EF16↑j
.text:0040EF3D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0040EF44                 jz      short loc_40EF66
.text:0040EF46
.text:0040EF46 loc_40EF46:                             ; CODE XREF: .text:0040EF72↓j
.text:0040EF46                 test    byte ptr ds:word_415798, 2
.text:0040EF4D                 jz      short loc_40EF5D
.text:0040EF4F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0040EF56
.text:0040EF56 loc_40EF56:                             ; CODE XREF: .text:0040EF64↓j
.text:0040EF56                 call    printf
.text:0040EF5B                 jmp     short loc_40EF18
.text:0040EF5D ; ---------------------------------------------------------------------------
.text:0040EF5D
.text:0040EF5D loc_40EF5D:                             ; CODE XREF: .text:0040EF4D↑j
.text:0040EF5D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0040EF64                 jmp     short loc_40EF56
.text:0040EF66 ; ---------------------------------------------------------------------------
.text:0040EF66
.text:0040EF66 loc_40EF66:                             ; CODE XREF: .text:0040EF44↑j
.text:0040EF66                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040EF6B                 cmp     eax, 2
.text:0040EF6E                 jz      short loc_40EFB0
.text:0040EF70                 test    eax, eax
.text:0040EF72                 jnz     short loc_40EF46
.text:0040EF74                 cmp     byte ptr ds:word_415798, 0
.text:0040EF7B                 js      short loc_40EFA2
.text:0040EF7D                 test    byte ptr ds:word_415798, 2
.text:0040EF84                 jnz     short loc_40EF98
.text:0040EF86                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040EF8E
.text:0040EF8E loc_40EF8E:                             ; CODE XREF: .text:0040EFA0↓j
.text:0040EF8E                                         ; .text:0040EFAA↓j ...
.text:0040EF8E                 mov     [esp], ebx
.text:0040EF91                 call    strcat
.text:0040EF96                 jmp     short loc_40EF18
.text:0040EF98 ; ---------------------------------------------------------------------------
.text:0040EF98
.text:0040EF98 loc_40EF98:                             ; CODE XREF: .text:0040EF84↑j
.text:0040EF98                                         ; .text:0040F0F9↓j
.text:0040EF98                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0040EFA0                 jmp     short loc_40EF8E
.text:0040EFA2 ; ---------------------------------------------------------------------------
.text:0040EFA2
.text:0040EFA2 loc_40EFA2:                             ; CODE XREF: .text:0040EF7B↑j
.text:0040EFA2                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0040EFAA                 jmp     short loc_40EF8E
.text:0040EFAA ; ---------------------------------------------------------------------------
.text:0040EFAC                 align 10h
.text:0040EFB0
.text:0040EFB0 loc_40EFB0:                             ; CODE XREF: .text:0040EF6E↑j
.text:0040EFB0                 cmp     byte ptr ds:word_415798, 0
.text:0040EFB7                 js      short loc_40EFE8
.text:0040EFB9                 movzx   eax, ds:word_415798
.text:0040EFC0                 test    al, 2
.text:0040EFC2                 jnz     short loc_40EFDE
.text:0040EFC4                 cmp     ax, 400h
.text:0040EFC8                 jz      short loc_40EFD4
.text:0040EFCA                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0040EFD2                 jmp     short loc_40EF8E
.text:0040EFD4 ; ---------------------------------------------------------------------------
.text:0040EFD4
.text:0040EFD4 loc_40EFD4:                             ; CODE XREF: .text:0040EFC8↑j
.text:0040EFD4                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040EFDC                 jmp     short loc_40EF8E
.text:0040EFDE ; ---------------------------------------------------------------------------
.text:0040EFDE
.text:0040EFDE loc_40EFDE:                             ; CODE XREF: .text:0040EFC2↑j
.text:0040EFDE                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0040EFE6                 jmp     short loc_40EF8E
.text:0040EFE8 ; ---------------------------------------------------------------------------
.text:0040EFE8
.text:0040EFE8 loc_40EFE8:                             ; CODE XREF: .text:0040EFB7↑j
.text:0040EFE8                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0040EFF0                 jmp     short loc_40EF8E
.text:0040EFF2 ; ---------------------------------------------------------------------------
.text:0040EFF2
.text:0040EFF2 loc_40EFF2:                             ; CODE XREF: .text:0040EF0E↑j
.text:0040EFF2                 test    byte ptr ds:word_415798+1, 2
.text:0040EFF9                 jz      short loc_40F005
.text:0040EFFB                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0040F003                 jmp     short loc_40EF8E
.text:0040F005 ; ---------------------------------------------------------------------------
.text:0040F005
.text:0040F005 loc_40F005:                             ; CODE XREF: .text:0040EFF9↑j
.text:0040F005                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040F00D                 jmp     loc_40EF8E
.text:0040F012 ; ---------------------------------------------------------------------------
.text:0040F012
.text:0040F012 loc_40F012:                             ; CODE XREF: .text:0040EEFF↑j
.text:0040F012                 mov     dword ptr [esp+28h], 0FFh
.text:0040F01A                 lea     edx, [esp+2Ch]
.text:0040F01E                 mov     [esp+10h], edx
.text:0040F022                 mov     dword ptr [esp+0Ch], 1
.text:0040F02A                 mov     dword ptr [esp+8], 0
.text:0040F032                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040F03A                 mov     dword ptr [esp], 80000002h
.text:0040F041                 call    RegOpenKeyExA
.text:0040F046                 mov     edi, eax
.text:0040F048                 sub     esp, 14h
.text:0040F04B                 xor     eax, eax
.text:0040F04D                 test    edi, edi
.text:0040F04F                 jnz     loc_40EE55
.text:0040F055                 mov     dword ptr [esp+0Ch], 0
.text:0040F05D                 mov     edi, [esp+2Ch]
.text:0040F061                 lea     esi, [esp+28h]
.text:0040F065                 mov     [esp+14h], esi
.text:0040F069                 lea     esi, [esp+30h]
.text:0040F06D                 mov     [esp+10h], esi
.text:0040F071                 mov     dword ptr [esp+8], 0
.text:0040F079                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0040F081                 mov     [esp], edi
.text:0040F084                 call    RegQueryValueExA
.text:0040F089                 sub     esp, 18h
.text:0040F08C                 test    eax, eax
.text:0040F08E                 jnz     short loc_40F09A
.text:0040F090                 cmp     dword ptr [esp+28h], 0FFh
.text:0040F098                 jbe     short loc_40F0A1
.text:0040F09A
.text:0040F09A loc_40F09A:                             ; CODE XREF: .text:0040F08E↑j
.text:0040F09A                 xor     eax, eax
.text:0040F09C                 jmp     loc_40EE55
.text:0040F0A1 ; ---------------------------------------------------------------------------
.text:0040F0A1
.text:0040F0A1 loc_40F0A1:                             ; CODE XREF: .text:0040F098↑j
.text:0040F0A1                 mov     edx, [esp+2Ch]
.text:0040F0A5                 mov     [esp], edx
.text:0040F0A8                 call    RegCloseKey
.text:0040F0AD                 sub     esp, 4
.text:0040F0B0                 mov     [esp+4], esi
.text:0040F0B4                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0040F0BB                 call    lstrcmpiA
.text:0040F0C0                 sub     esp, 8
.text:0040F0C3                 test    eax, eax
.text:0040F0C5                 jz      short loc_40F110
.text:0040F0C7
.text:0040F0C7 loc_40F0C7:                             ; CODE XREF: .text:0040F120↓j
.text:0040F0C7                 mov     [esp+4], esi
.text:0040F0CB                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0040F0D2                 call    lstrcmpiA
.text:0040F0D7                 sub     esp, 8
.text:0040F0DA                 test    eax, eax
.text:0040F0DC                 jz      short loc_40F0FE
.text:0040F0DE
.text:0040F0DE loc_40F0DE:                             ; CODE XREF: .text:0040F10E↓j
.text:0040F0DE                 mov     [esp+4], esi
.text:0040F0E2                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0040F0E9                 call    lstrcmpiA
.text:0040F0EE                 sub     esp, 8
.text:0040F0F1                 test    eax, eax
.text:0040F0F3                 jnz     loc_40EF18
.text:0040F0F9                 jmp     loc_40EF98
.text:0040F0FE ; ---------------------------------------------------------------------------
.text:0040F0FE
.text:0040F0FE loc_40F0FE:                             ; CODE XREF: .text:0040F0DC↑j
.text:0040F0FE                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040F106                 mov     [esp], ebx
.text:0040F109                 call    strcat
.text:0040F10E                 jmp     short loc_40F0DE
.text:0040F110 ; ---------------------------------------------------------------------------
.text:0040F110
.text:0040F110 loc_40F110:                             ; CODE XREF: .text:0040F0C5↑j
.text:0040F110                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040F118                 mov     [esp], ebx
.text:0040F11B                 call    strcat
.text:0040F120                 jmp     short loc_40F0C7
.text:0040F122 ; ---------------------------------------------------------------------------
.text:0040F122
.text:0040F122 loc_40F122:                             ; CODE XREF: .text:0040EEBD↑j
.text:0040F122                                         ; .text:0040EECB↑j
.text:0040F122                 cmp     eax, 5
.text:0040F125                 jnz     loc_40EEF7
.text:0040F12B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040F130                 cmp     eax, 2
.text:0040F133                 jz      short loc_40F19A
.text:0040F135                 cmp     eax, 1
.text:0040F138                 jz      short loc_40F173
.text:0040F13A                 test    eax, eax
.text:0040F13C                 jnz     loc_40EEF7
.text:0040F142                 mov     dword ptr [ebx], 7263694Dh
.text:0040F148                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040F14F                 mov     dword ptr [ebx+8], 69572074h
.text:0040F156                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040F15D                 mov     dword ptr [ebx+10h], 30322073h
.text:0040F164                 mov     word ptr [ebx+14h], 3030h
.text:0040F16A                 mov     byte ptr [ebx+16h], 0
.text:0040F16E                 jmp     loc_40EEF7
.text:0040F173 ; ---------------------------------------------------------------------------
.text:0040F173
.text:0040F173 loc_40F173:                             ; CODE XREF: .text:0040F138↑j
.text:0040F173                 mov     dword ptr [ebx], 7263694Dh
.text:0040F179                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040F180                 mov     dword ptr [ebx+8], 69572074h
.text:0040F187                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040F18E                 mov     dword ptr [ebx+10h], 50582073h
.text:0040F195                 jmp     loc_40EEF3
.text:0040F19A ; ---------------------------------------------------------------------------
.text:0040F19A
.text:0040F19A loc_40F19A:                             ; CODE XREF: .text:0040F133↑j
.text:0040F19A                 mov     dword ptr [ebx], 7263694Dh
.text:0040F1A0                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040F1A7                 mov     dword ptr [ebx+8], 69572074h
.text:0040F1AE                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040F1B5                 mov     dword ptr [ebx+10h], 65532073h
.text:0040F1BC                 mov     dword ptr [ebx+14h], 72657672h
.text:0040F1C3                 mov     dword ptr [ebx+18h], 30303220h
.text:0040F1CA                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:0040F1D0                 jmp     loc_40EEF7
.text:0040F1D5 ; ---------------------------------------------------------------------------
.text:0040F1D5
.text:0040F1D5 loc_40F1D5:                             ; CODE XREF: .text:0040EEB4↑j
.text:0040F1D5                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040F1DB                 test    edx, edx
.text:0040F1DD                 jnz     loc_40EEBA
.text:0040F1E3                 mov     dword ptr [ebx], 7263694Dh
.text:0040F1E9                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040F1F0                 mov     dword ptr [ebx+8], 69572074h
.text:0040F1F7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040F1FE                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040F205                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040F20C                 mov     byte ptr [ebx+18h], 0
.text:0040F210                 jmp     loc_40EEF7
.text:0040F215 ; ---------------------------------------------------------------------------
.text:0040F215
.text:0040F215 loc_40F215:                             ; CODE XREF: .text:0040EEAB↑j
.text:0040F215                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040F21C                 jnz     loc_40EEB1
.text:0040F222                 mov     dword ptr [ebx], 7263694Dh
.text:0040F228                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040F22F                 mov     dword ptr [ebx+8], 69572074h
.text:0040F236                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040F23D                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040F244                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040F24B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:0040F251                 jmp     loc_40EEF7
.text:0040F256 ; ---------------------------------------------------------------------------
.text:0040F256
.text:0040F256 loc_40F256:                             ; CODE XREF: .text:0040EDE6↑j
.text:0040F256                 cld
.text:0040F257                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0040F25C                 mov     ecx, 8
.text:0040F261                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:0040F268                 mov     edi, ebx
.text:0040F26A                 rep movsd
.text:0040F26C                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:0040F273                 mov     [edi+2], dl
.text:0040F276                 mov     [edi], si
.text:0040F279                 jmp     loc_40EE90
.text:0040F279 ; ---------------------------------------------------------------------------
.text:0040F27E                 align 10h
.text:0040F280
.text:0040F280 loc_40F280:                             ; CODE XREF: .text:0040EDDD↑j
.text:0040F280                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040F286                 cmp     ecx, 4
.text:0040F289                 jz      loc_40F340
.text:0040F28F
.text:0040F28F loc_40F28F:                             ; CODE XREF: .text:0040F396↓j
.text:0040F28F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040F295
.text:0040F295 loc_40F295:                             ; CODE XREF: .text:0040F348↓j
.text:0040F295                 cmp     ecx, 4
.text:0040F298                 jz      short loc_40F2A4
.text:0040F29A
.text:0040F29A loc_40F29A:                             ; CODE XREF: .text:0040F2AC↓j
.text:0040F29A                                         ; .text:0040F2B1↓j
.text:0040F29A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040F29F                 jmp     loc_40EE0C
.text:0040F2A4 ; ---------------------------------------------------------------------------
.text:0040F2A4
.text:0040F2A4 loc_40F2A4:                             ; CODE XREF: .text:0040F298↑j
.text:0040F2A4                 cmp     edx, 0Ah
.text:0040F2A7                 jz      short loc_40F2D1
.text:0040F2A9
.text:0040F2A9 loc_40F2A9:                             ; CODE XREF: .text:0040F31F↓j
.text:0040F2A9                 cmp     ecx, 4
.text:0040F2AC                 jnz     short loc_40F29A
.text:0040F2AE                 cmp     edx, 5Ah ; 'Z'
.text:0040F2B1                 jnz     short loc_40F29A
.text:0040F2B3                 cld
.text:0040F2B4                 mov     edi, ebx
.text:0040F2B6                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0040F2BB                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:0040F2C2                 mov     ecx, 9
.text:0040F2C7                 rep movsd
.text:0040F2C9                 mov     [edi], bx
.text:0040F2CC                 jmp     loc_40EE90
.text:0040F2D1 ; ---------------------------------------------------------------------------
.text:0040F2D1
.text:0040F2D1 loc_40F2D1:                             ; CODE XREF: .text:0040F2A7↑j
.text:0040F2D1                 mov     dword ptr [ebx], 7263694Dh
.text:0040F2D7                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040F2DE                 mov     dword ptr [ebx+8], 69572074h
.text:0040F2E5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040F2EC                 mov     dword ptr [ebx+10h], 38392073h
.text:0040F2F3                 mov     byte ptr [ebx+14h], 0
.text:0040F2F7                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040F2FD                 lea     edi, [edx-7CFh]
.text:0040F303                 cmp     edi, 0B7h ; '·'
.text:0040F309                 jbe     short loc_40F333
.text:0040F30B                 cmp     edx, 886h
.text:0040F311                 ja      short loc_40F321
.text:0040F313
.text:0040F313 loc_40F313:                             ; CODE XREF: .text:0040F331↓j
.text:0040F313                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040F319                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040F31F                 jmp     short loc_40F2A9
.text:0040F321 ; ---------------------------------------------------------------------------
.text:0040F321
.text:0040F321 loc_40F321:                             ; CODE XREF: .text:0040F311↑j
.text:0040F321                 mov     dword ptr [esp+4], offset loc_40EDA6
.text:0040F329
.text:0040F329 loc_40F329:                             ; CODE XREF: .text:0040F33B↓j
.text:0040F329                 mov     [esp], ebx
.text:0040F32C                 call    strcat
.text:0040F331                 jmp     short loc_40F313
.text:0040F333 ; ---------------------------------------------------------------------------
.text:0040F333
.text:0040F333 loc_40F333:                             ; CODE XREF: .text:0040F309↑j
.text:0040F333                 mov     dword ptr [esp+4], 40EDAAh
.text:0040F33B                 jmp     short loc_40F329
.text:0040F33B ; ---------------------------------------------------------------------------
.text:0040F33D                 align 10h
.text:0040F340
.text:0040F340 loc_40F340:                             ; CODE XREF: .text:0040F289↑j
.text:0040F340                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040F346                 test    edx, edx
.text:0040F348                 jnz     loc_40F295
.text:0040F34E                 mov     dword ptr [ebx], 7263694Dh
.text:0040F354                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040F35B                 mov     dword ptr [ebx+8], 69572074h
.text:0040F362                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040F369                 mov     dword ptr [ebx+10h], 35392073h
.text:0040F370                 mov     byte ptr [ebx+14h], 0
.text:0040F374                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040F37A                 lea     ecx, [edx-3B7h]
.text:0040F380                 cmp     ecx, 81h
.text:0040F386                 jbe     short loc_40F3AD
.text:0040F388                 cmp     edx, 438h
.text:0040F38E                 ja      short loc_40F39B
.text:0040F390
.text:0040F390 loc_40F390:                             ; CODE XREF: .text:0040F3AB↓j
.text:0040F390                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040F396                 jmp     loc_40F28F
.text:0040F39B ; ---------------------------------------------------------------------------
.text:0040F39B
.text:0040F39B loc_40F39B:                             ; CODE XREF: .text:0040F38E↑j
.text:0040F39B                 mov     dword ptr [esp+4], offset loc_40EDAF
.text:0040F3A3
.text:0040F3A3 loc_40F3A3:                             ; CODE XREF: .text:0040F3B5↓j
.text:0040F3A3                 mov     [esp], ebx
.text:0040F3A6                 call    strcat
.text:0040F3AB                 jmp     short loc_40F390
.text:0040F3AD ; ---------------------------------------------------------------------------
.text:0040F3AD
.text:0040F3AD loc_40F3AD:                             ; CODE XREF: .text:0040F386↑j
.text:0040F3AD                 mov     dword ptr [esp+4], 40EDAAh
.text:0040F3B5                 jmp     short loc_40F3A3
.text:0040F3B5 ; ---------------------------------------------------------------------------
.text:0040F3B7                 align 10h
.text:0040F3C0
.text:0040F3C0 ; =============== S U B R O U T I N E =======================================
.text:0040F3C0
.text:0040F3C0
.text:0040F3C0 sub_40F3C0      proc near               ; CODE XREF: .text:0040D9CE↑p
.text:0040F3C0                                         ; sub_40DE50+12A↑p
.text:0040F3C0                 sub     esp, 0Ch
.text:0040F3C3                 call    sub_40F4D0
.text:0040F3C8                 mov     eax, ds:dword_4156F0
.text:0040F3CD                 add     esp, 0Ch
.text:0040F3D0                 retn
.text:0040F3D0 sub_40F3C0      endp
.text:0040F3D0
.text:0040F3D1 ; ---------------------------------------------------------------------------
.text:0040F3D1                 jmp     short loc_40F3E0
.text:0040F3D1 ; ---------------------------------------------------------------------------
.text:0040F3D3                 align 10h
.text:0040F3E0
.text:0040F3E0 loc_40F3E0:                             ; CODE XREF: .text:0040F3D1↑j
.text:0040F3E0                 sub     esp, 0Ch
.text:0040F3E3                 call    sub_40F4D0
.text:0040F3E8                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040F3ED                 add     esp, 0Ch
.text:0040F3F0                 retn
.text:0040F3F1 ; ---------------------------------------------------------------------------
.text:0040F3F1                 jmp     short loc_40F400
.text:0040F3F1 ; ---------------------------------------------------------------------------
.text:0040F3F3                 align 10h
.text:0040F400
.text:0040F400 loc_40F400:                             ; CODE XREF: .text:0040F3F1↑j
.text:0040F400                 sub     esp, 0Ch
.text:0040F403                 call    sub_40F4D0
.text:0040F408                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040F40D                 add     esp, 0Ch
.text:0040F410                 retn
.text:0040F411 ; ---------------------------------------------------------------------------
.text:0040F411                 jmp     short loc_40F420
.text:0040F411 ; ---------------------------------------------------------------------------
.text:0040F413                 align 10h
.text:0040F420
.text:0040F420 loc_40F420:                             ; CODE XREF: .text:0040F411↑j
.text:0040F420                 sub     esp, 0Ch
.text:0040F423                 call    sub_40F4D0
.text:0040F428                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040F42D                 add     esp, 0Ch
.text:0040F430                 retn
.text:0040F431 ; ---------------------------------------------------------------------------
.text:0040F431                 jmp     short loc_40F440
.text:0040F431 ; ---------------------------------------------------------------------------
.text:0040F433                 align 10h
.text:0040F440
.text:0040F440 loc_40F440:                             ; CODE XREF: .text:0040F431↑j
.text:0040F440                 sub     esp, 0Ch
.text:0040F443                 call    GetVersion
.text:0040F448                 shr     eax, 10h
.text:0040F44B                 add     esp, 0Ch
.text:0040F44E                 retn
.text:0040F44E ; ---------------------------------------------------------------------------
.text:0040F44F                 align 10h
.text:0040F450                 sub     esp, 0Ch
.text:0040F453                 call    sub_40F4D0
.text:0040F458                 xor     eax, eax
.text:0040F45A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0040F461                 setz    al
.text:0040F464                 add     esp, 0Ch
.text:0040F467                 retn
.text:0040F467 ; ---------------------------------------------------------------------------
.text:0040F468                 align 10h
.text:0040F470
.text:0040F470 ; =============== S U B R O U T I N E =======================================
.text:0040F470
.text:0040F470
.text:0040F470 sub_40F470      proc near               ; CODE XREF: .text:loc_40D360↑p
.text:0040F470                                         ; .text:loc_40D9B4↑p ...
.text:0040F470                 sub     esp, 0Ch
.text:0040F473                 call    sub_40F4D0
.text:0040F478                 xor     eax, eax
.text:0040F47A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0040F481                 setz    al
.text:0040F484                 add     esp, 0Ch
.text:0040F487                 retn
.text:0040F487 sub_40F470      endp
.text:0040F487
.text:0040F487 ; ---------------------------------------------------------------------------
.text:0040F488                 align 10h
.text:0040F490                 sub     esp, 0Ch
.text:0040F493                 call    sub_40F4D0
.text:0040F498                 xor     eax, eax
.text:0040F49A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0040F4A1                 setz    al
.text:0040F4A4                 add     esp, 0Ch
.text:0040F4A7                 retn
.text:0040F4A7 ; ---------------------------------------------------------------------------
.text:0040F4A8                 align 10h
.text:0040F4B0                 sub     esp, 0Ch
.text:0040F4B3                 call    sub_40F4D0
.text:0040F4B8                 xor     eax, eax
.text:0040F4BA                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0040F4C1                 setz    al
.text:0040F4C4                 add     esp, 0Ch
.text:0040F4C7                 retn
.text:0040F4C7 ; ---------------------------------------------------------------------------
.text:0040F4C8                 align 10h
.text:0040F4D0
.text:0040F4D0 ; =============== S U B R O U T I N E =======================================
.text:0040F4D0
.text:0040F4D0
.text:0040F4D0 sub_40F4D0      proc near               ; CODE XREF: .text:0040EDD0↑p
.text:0040F4D0                                         ; sub_40F3C0+3↑p ...
.text:0040F4D0
.text:0040F4D0 lpVersionInformation= dword ptr -0BCh
.text:0040F4D0 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0040F4D0
.text:0040F4D0                 sub     esp, 0BCh
.text:0040F4D6                 mov     edx, ds:dword_4157A0
.text:0040F4DC                 test    edx, edx
.text:0040F4DE                 jz      short loc_40F4F0
.text:0040F4E0
.text:0040F4E0 loc_40F4E0:                             ; CODE XREF: sub_40F4D0+7B↓j
.text:0040F4E0                 mov     edx, 1
.text:0040F4E5
.text:0040F4E5 loc_40F4E5:                             ; CODE XREF: sub_40F4D0+217↓j
.text:0040F4E5                 mov     eax, edx
.text:0040F4E7                 add     esp, 0BCh
.text:0040F4ED                 retn
.text:0040F4ED ; ---------------------------------------------------------------------------
.text:0040F4EE                 align 10h
.text:0040F4F0
.text:0040F4F0 loc_40F4F0:                             ; CODE XREF: sub_40F4D0+E↑j
.text:0040F4F0                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0040F4F7                 mov     edx, 9Ch ; 'œ'
.text:0040F4FC                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0040F502                 call    GetVersionExA
.text:0040F507                 sub     esp, 4
.text:0040F50A                 test    eax, eax
.text:0040F50C                 jz      loc_40F6C4
.text:0040F512
.text:0040F512 loc_40F512:                             ; CODE XREF: sub_40F4D0+245↓j
.text:0040F512                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0040F519                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040F51E                 cmp     eax, 1
.text:0040F521                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040F527                 jz      loc_40F610
.text:0040F52D                 cmp     eax, 1
.text:0040F530                 jb      loc_40F600
.text:0040F536                 cmp     eax, 2
.text:0040F539                 jz      short loc_40F55A
.text:0040F53B                 cmp     eax, 3
.text:0040F53E                 jz      short loc_40F54D
.text:0040F540
.text:0040F540 loc_40F540:                             ; CODE XREF: sub_40F4D0+88↓j
.text:0040F540                                         ; sub_40F4D0+C0↓j ...
.text:0040F540                 mov     edx, 1
.text:0040F545                 mov     ds:dword_4157A0, edx
.text:0040F54B                 jmp     short loc_40F4E0
.text:0040F54D ; ---------------------------------------------------------------------------
.text:0040F54D
.text:0040F54D loc_40F54D:                             ; CODE XREF: sub_40F4D0+6E↑j
.text:0040F54D                 mov     ecx, 17h
.text:0040F552
.text:0040F552 loc_40F552:                             ; CODE XREF: sub_40F4D0+1A7↓j
.text:0040F552                 mov     ds:dword_4156F0, ecx
.text:0040F558                 jmp     short loc_40F540
.text:0040F55A ; ---------------------------------------------------------------------------
.text:0040F55A
.text:0040F55A loc_40F55A:                             ; CODE XREF: sub_40F4D0+69↑j
.text:0040F55A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040F55F                 cmp     eax, 3
.text:0040F562                 jz      short loc_40F5DB
.text:0040F564                 cmp     eax, 4
.text:0040F567                 jz      short loc_40F5CA
.text:0040F569
.text:0040F569 loc_40F569:                             ; CODE XREF: sub_40F4D0+102↓j
.text:0040F569                 cmp     eax, 4
.text:0040F56C                 ja      short loc_40F592
.text:0040F56E                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040F574                 test    ecx, ecx
.text:0040F576                 jnz     short loc_40F592
.text:0040F578                 mov     edx, 1Eh
.text:0040F57D
.text:0040F57D loc_40F57D:                             ; CODE XREF: sub_40F4D0+DF↓j
.text:0040F57D                 mov     ds:dword_4156F0, edx
.text:0040F583
.text:0040F583 loc_40F583:                             ; CODE XREF: sub_40F4D0+C5↓j
.text:0040F583                                         ; sub_40F4D0+D8↓j ...
.text:0040F583                 movzx   ecx, ds:word_415794
.text:0040F58A                 add     ds:dword_4156F0, ecx
.text:0040F590                 jmp     short loc_40F540
.text:0040F592 ; ---------------------------------------------------------------------------
.text:0040F592
.text:0040F592 loc_40F592:                             ; CODE XREF: sub_40F4D0+9C↑j
.text:0040F592                                         ; sub_40F4D0+A6↑j
.text:0040F592                 cmp     eax, 5
.text:0040F595                 jnz     short loc_40F583
.text:0040F597                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040F59C                 cmp     eax, 2
.text:0040F59F                 jz      short loc_40F5BE
.text:0040F5A1                 cmp     eax, 1
.text:0040F5A4                 jz      short loc_40F5B1
.text:0040F5A6                 test    eax, eax
.text:0040F5A8                 jnz     short loc_40F583
.text:0040F5AA                 mov     edx, 32h ; '2'
.text:0040F5AF                 jmp     short loc_40F57D
.text:0040F5B1 ; ---------------------------------------------------------------------------
.text:0040F5B1
.text:0040F5B1 loc_40F5B1:                             ; CODE XREF: sub_40F4D0+D4↑j
.text:0040F5B1                 mov     ecx, 3Ch ; '<'
.text:0040F5B6
.text:0040F5B6 loc_40F5B6:                             ; CODE XREF: sub_40F4D0+122↓j
.text:0040F5B6                 mov     ds:dword_4156F0, ecx
.text:0040F5BC                 jmp     short loc_40F583
.text:0040F5BE ; ---------------------------------------------------------------------------
.text:0040F5BE
.text:0040F5BE loc_40F5BE:                             ; CODE XREF: sub_40F4D0+CF↑j
.text:0040F5BE                 mov     eax, 46h ; 'F'
.text:0040F5C3
.text:0040F5C3 loc_40F5C3:                             ; CODE XREF: sub_40F4D0+109↓j
.text:0040F5C3                                         ; sub_40F4D0+129↓j
.text:0040F5C3                 mov     ds:dword_4156F0, eax
.text:0040F5C8                 jmp     short loc_40F583
.text:0040F5CA ; ---------------------------------------------------------------------------
.text:0040F5CA
.text:0040F5CA loc_40F5CA:                             ; CODE XREF: sub_40F4D0+97↑j
.text:0040F5CA                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040F5D0                 test    ecx, ecx
.text:0040F5D2                 jnz     short loc_40F569
.text:0040F5D4                 mov     eax, 28h ; '('
.text:0040F5D9                 jmp     short loc_40F5C3
.text:0040F5DB ; ---------------------------------------------------------------------------
.text:0040F5DB
.text:0040F5DB loc_40F5DB:                             ; CODE XREF: sub_40F4D0+92↑j
.text:0040F5DB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040F5E0                 cmp     eax, 33h ; '3'
.text:0040F5E3                 jz      short loc_40F5F4
.text:0040F5E5                 cmp     eax, 5
.text:0040F5E8                 setz    cl
.text:0040F5EB                 movzx   edx, cl
.text:0040F5EE                 lea     ecx, [edx+edx*4+1Eh]
.text:0040F5F2                 jmp     short loc_40F5B6
.text:0040F5F4 ; ---------------------------------------------------------------------------
.text:0040F5F4
.text:0040F5F4 loc_40F5F4:                             ; CODE XREF: sub_40F4D0+113↑j
.text:0040F5F4                 mov     eax, 24h ; '$'
.text:0040F5F9                 jmp     short loc_40F5C3
.text:0040F5F9 ; ---------------------------------------------------------------------------
.text:0040F5FB                 align 10h
.text:0040F600
.text:0040F600 loc_40F600:                             ; CODE XREF: sub_40F4D0+60↑j
.text:0040F600                 mov     edx, 2
.text:0040F605                 mov     ds:dword_4156F0, edx
.text:0040F60B                 jmp     loc_40F540
.text:0040F610 ; ---------------------------------------------------------------------------
.text:0040F610
.text:0040F610 loc_40F610:                             ; CODE XREF: sub_40F4D0+57↑j
.text:0040F610                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040F616                 cmp     ecx, 4
.text:0040F619                 jnz     loc_40F540
.text:0040F61F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040F624                 test    eax, eax
.text:0040F626                 jnz     short loc_40F64A
.text:0040F628                 mov     eax, 0Ah
.text:0040F62D                 mov     ds:dword_4156F0, eax
.text:0040F632                 lea     eax, [edx-3B7h]
.text:0040F638                 cmp     eax, 81h
.text:0040F63D                 ja      short loc_40F6B5
.text:0040F63F                 mov     edx, 0Bh
.text:0040F644
.text:0040F644 loc_40F644:                             ; CODE XREF: sub_40F4D0+1F2↓j
.text:0040F644                 mov     ds:dword_4156F0, edx
.text:0040F64A
.text:0040F64A loc_40F64A:                             ; CODE XREF: sub_40F4D0+156↑j
.text:0040F64A                                         ; sub_40F4D0+1EB↓j
.text:0040F64A                 cmp     ecx, 4
.text:0040F64D                 jnz     loc_40F540
.text:0040F653                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040F65A                 jz      short loc_40F67C
.text:0040F65C
.text:0040F65C loc_40F65C:                             ; CODE XREF: sub_40F4D0+1D4↓j
.text:0040F65C                                         ; sub_40F4D0+1DC↓j
.text:0040F65C                 cmp     ecx, 4
.text:0040F65F                 jnz     loc_40F540
.text:0040F665                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040F66C                 jnz     loc_40F540
.text:0040F672                 mov     ecx, 12h
.text:0040F677                 jmp     loc_40F552
.text:0040F67C ; ---------------------------------------------------------------------------
.text:0040F67C
.text:0040F67C loc_40F67C:                             ; CODE XREF: sub_40F4D0+18A↑j
.text:0040F67C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040F682                 mov     eax, 0Eh
.text:0040F687                 mov     ds:dword_4156F0, eax
.text:0040F68C                 lea     eax, [edx-7CFh]
.text:0040F692                 cmp     eax, 0B7h ; '·'
.text:0040F697                 ja      short loc_40F6A6
.text:0040F699                 mov     edx, 0Fh
.text:0040F69E
.text:0040F69E loc_40F69E:                             ; CODE XREF: sub_40F4D0+1E3↓j
.text:0040F69E                 mov     ds:dword_4156F0, edx
.text:0040F6A4                 jmp     short loc_40F65C
.text:0040F6A6 ; ---------------------------------------------------------------------------
.text:0040F6A6
.text:0040F6A6 loc_40F6A6:                             ; CODE XREF: sub_40F4D0+1C7↑j
.text:0040F6A6                 cmp     edx, 886h
.text:0040F6AC                 jbe     short loc_40F65C
.text:0040F6AE                 mov     edx, 10h
.text:0040F6B3                 jmp     short loc_40F69E
.text:0040F6B5 ; ---------------------------------------------------------------------------
.text:0040F6B5
.text:0040F6B5 loc_40F6B5:                             ; CODE XREF: sub_40F4D0+16D↑j
.text:0040F6B5                 cmp     edx, 438h
.text:0040F6BB                 jbe     short loc_40F64A
.text:0040F6BD                 mov     edx, 0Ch
.text:0040F6C2                 jmp     short loc_40F644
.text:0040F6C4 ; ---------------------------------------------------------------------------
.text:0040F6C4
.text:0040F6C4 loc_40F6C4:                             ; CODE XREF: sub_40F4D0+3C↑j
.text:0040F6C4                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040F6CC                 xor     edx, edx
.text:0040F6CE                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0040F6D2                 mov     dword_414090, edx
.text:0040F6D8                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040F6DB                 call    GetVersionExA
.text:0040F6E0                 sub     esp, 4
.text:0040F6E3                 xor     edx, edx
.text:0040F6E5                 test    eax, eax
.text:0040F6E7                 jz      loc_40F4E5
.text:0040F6ED                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0040F6F1                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0040F6F5                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040F6FB                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040F6FF                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0040F705                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0040F709                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040F70F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0040F715                 jmp     loc_40F512
.text:0040F715 sub_40F4D0      endp
.text:0040F715
.text:0040F715 ; ---------------------------------------------------------------------------
.text:0040F71A                 align 10h
.text:0040F720 aNotset         db 'notset',0           ; DATA XREF: .data:off_4140A0↓o
.text:0040F720                                         ; .data:off_4140A4↓o
.text:0040F727 ; ---------------------------------------------------------------------------
.text:0040F727
.text:0040F727 loc_40F727:                             ; DATA XREF: .text:loc_40F7C5↓o
.text:0040F727                 jb      short loc_40F7A0
.text:0040F729                 add     [eax], ah
.text:0040F72B                 or      [eax], eax
.text:0040F72D
.text:0040F72D loc_40F72D:                             ; DATA XREF: .text:0040F818↓o
.text:0040F72D                                         ; .text:0040F87E↓o ...
.text:0040F72D                 add     [eax], ah
.text:0040F72F                 and     eax, 64252064h
.text:0040F734                 and     [eax], al
.text:0040F736                 lea     esi, [esi+0]
.text:0040F739                 lea     edi, [edi+0]
.text:0040F740                 push    ebp
.text:0040F741                 push    edi
.text:0040F742                 push    esi
.text:0040F743                 push    ebx
.text:0040F744                 sub     esp, 14Ch
.text:0040F74A                 mov     edx, off_4140A0 ; "notset"
.text:0040F750                 mov     edi, [esp+164h]
.text:0040F757                 mov     ebp, [esp+168h]
.text:0040F75E                 mov     [esp+4], edx
.text:0040F762                 mov     edx, off_4140A4 ; "notset"
.text:0040F768                 mov     [esp], edx
.text:0040F76B                 call    strcmp
.text:0040F770                 test    eax, eax
.text:0040F772                 jz      loc_40FB60
.text:0040F778
.text:0040F778 loc_40F778:                             ; CODE XREF: .text:0040FBAC↓j
.text:0040F778                 lea     ebx, [esp+20h]
.text:0040F77C                 lea     esi, [esi+0]
.text:0040F780
.text:0040F780 loc_40F780:                             ; CODE XREF: .text:0040F7B6↓j
.text:0040F780                 mov     [esp+4], ebx
.text:0040F784                 mov     ecx, off_4140A4 ; "notset"
.text:0040F78A                 mov     [esp], ecx
.text:0040F78D                 call    loc_40DEF0
.text:0040F792                 test    eax, eax
.text:0040F794                 jns     short loc_40F7C5
.text:0040F796                 mov     eax, off_4140A4 ; "notset"
.text:0040F79B                 cmp     byte ptr [eax], 0
.text:0040F79E                 jz      short loc_40F7B8
.text:0040F7A0
.text:0040F7A0 loc_40F7A0:                             ; CODE XREF: .text:loc_40F727↑j
.text:0040F7A0                 mov     dword ptr [esp+4], 0
.text:0040F7A8                 mov     [esp], eax
.text:0040F7AB                 call    strchr
.text:0040F7B0                 inc     eax
.text:0040F7B1                 mov     off_4140A4, eax ; "notset"
.text:0040F7B6                 jmp     short loc_40F780
.text:0040F7B8 ; ---------------------------------------------------------------------------
.text:0040F7B8
.text:0040F7B8 loc_40F7B8:                             ; CODE XREF: .text:0040F79E↑j
.text:0040F7B8                 xor     eax, eax
.text:0040F7BA
.text:0040F7BA loc_40F7BA:                             ; CODE XREF: .text:0040F97C↓j
.text:0040F7BA                 add     esp, 14Ch
.text:0040F7C0                 pop     ebx
.text:0040F7C1                 pop     esi
.text:0040F7C2                 pop     edi
.text:0040F7C3                 pop     ebp
.text:0040F7C4                 retn
.text:0040F7C5 ; ---------------------------------------------------------------------------
.text:0040F7C5
.text:0040F7C5 loc_40F7C5:                             ; CODE XREF: .text:0040F794↑j
.text:0040F7C5                 mov     dword ptr [edi+0Ch], offset loc_40F727
.text:0040F7CC                 lea     ecx, [esp+0D6h]
.text:0040F7D3                 lea     edx, [esp+6Ch]
.text:0040F7D7                 mov     [edi+4], ecx
.text:0040F7DA                 lea     ebx, [esp+7Ch]
.text:0040F7DE                 mov     [edi+8], edx
.text:0040F7E1                 mov     [edi], ebx
.text:0040F7E3                 mov     [esp], ebp
.text:0040F7E6                 mov     [esp+4], edi
.text:0040F7EA                 call    ___addmntentstr
.text:0040F7EF                 mov     [esp], ebp
.text:0040F7F2                 mov     dword ptr [esp+4], 40F72Ah
.text:0040F7FA                 call    strspn
.text:0040F7FF                 mov     dword ptr [esp+4], 0
.text:0040F807                 mov     ebx, off_4140A4 ; "notset"
.text:0040F80D                 lea     esi, [eax+ebp]
.text:0040F810                 mov     [esp+1Ch], esi
.text:0040F814                 lea     ebp, [esp+1Ch]
.text:0040F818                 mov     esi, offset loc_40F72D
.text:0040F81D                 mov     [esp], ebx
.text:0040F820                 call    strchr
.text:0040F825                 mov     dword ptr [esp+4], 40F72Ah
.text:0040F82D                 inc     eax
.text:0040F82E                 mov     off_4140A4, eax ; "notset"
.text:0040F833                 mov     [esp], ebp
.text:0040F836                 call    sub_4105F0
.text:0040F83B                 test    eax, eax
.text:0040F83D                 mov     ebx, eax
.text:0040F83F                 jz      short loc_40F868
.text:0040F841                 mov     edx, eax
.text:0040F843                 mov     ecx, eax
.text:0040F845                 lea     esi, [esi+0]
.text:0040F849                 lea     edi, [edi+0]
.text:0040F850
.text:0040F850 loc_40F850:                             ; CODE XREF: .text:0040F866↓j
.text:0040F850                 movzx   eax, byte ptr [edx]
.text:0040F853                 cmp     al, 5Ch ; '\'
.text:0040F855                 jz      loc_40FB04
.text:0040F85B
.text:0040F85B loc_40F85B:                             ; CODE XREF: .text:0040FB0C↓j
.text:0040F85B                                         ; .text:0040FB1A↓j ...
.text:0040F85B                 mov     [ecx], al
.text:0040F85D
.text:0040F85D loc_40F85D:                             ; CODE XREF: .text:0040FB2E↓j
.text:0040F85D                 inc     ecx
.text:0040F85E
.text:0040F85E loc_40F85E:                             ; CODE XREF: .text:0040FB46↓j
.text:0040F85E                 movzx   eax, byte ptr [edx]
.text:0040F861                 mov     esi, ebx
.text:0040F863                 inc     edx
.text:0040F864                 test    al, al
.text:0040F866                 jnz     short loc_40F850
.text:0040F868
.text:0040F868 loc_40F868:                             ; CODE XREF: .text:0040F83F↑j
.text:0040F868                 mov     [edi], esi
.text:0040F86A                 mov     eax, [esp+1Ch]
.text:0040F86E                 test    eax, eax
.text:0040F870                 jnz     loc_40FAEB
.text:0040F876
.text:0040F876 loc_40F876:                             ; CODE XREF: .text:0040FAFF↓j
.text:0040F876                 mov     dword ptr [esp+4], 40F72Ah
.text:0040F87E                 mov     esi, offset loc_40F72D
.text:0040F883                 mov     [esp], ebp
.text:0040F886                 call    sub_4105F0
.text:0040F88B                 test    eax, eax
.text:0040F88D                 mov     ebx, eax
.text:0040F88F                 jz      short loc_40F8B8
.text:0040F891                 mov     edx, eax
.text:0040F893                 mov     ecx, eax
.text:0040F895                 lea     esi, [esi+0]
.text:0040F899                 lea     edi, [edi+0]
.text:0040F8A0
.text:0040F8A0 loc_40F8A0:                             ; CODE XREF: .text:0040F8B6↓j
.text:0040F8A0                 movzx   eax, byte ptr [edx]
.text:0040F8A3                 cmp     al, 5Ch ; '\'
.text:0040F8A5                 jz      loc_40FA93
.text:0040F8AB
.text:0040F8AB loc_40F8AB:                             ; CODE XREF: .text:0040FA9B↓j
.text:0040F8AB                                         ; .text:0040FAA9↓j ...
.text:0040F8AB                 mov     [ecx], al
.text:0040F8AD
.text:0040F8AD loc_40F8AD:                             ; CODE XREF: .text:0040FABD↓j
.text:0040F8AD                 inc     ecx
.text:0040F8AE
.text:0040F8AE loc_40F8AE:                             ; CODE XREF: .text:0040FAD5↓j
.text:0040F8AE                 movzx   eax, byte ptr [edx]
.text:0040F8B1                 mov     esi, ebx
.text:0040F8B3                 inc     edx
.text:0040F8B4                 test    al, al
.text:0040F8B6                 jnz     short loc_40F8A0
.text:0040F8B8
.text:0040F8B8 loc_40F8B8:                             ; CODE XREF: .text:0040F88F↑j
.text:0040F8B8                 mov     [edi+4], esi
.text:0040F8BB                 mov     eax, [esp+1Ch]
.text:0040F8BF                 test    eax, eax
.text:0040F8C1                 jnz     loc_40FA7A
.text:0040F8C7
.text:0040F8C7 loc_40F8C7:                             ; CODE XREF: .text:0040FA8E↓j
.text:0040F8C7                 mov     dword ptr [esp+4], 40F72Ah
.text:0040F8CF                 mov     esi, offset loc_40F72D
.text:0040F8D4                 mov     [esp], ebp
.text:0040F8D7                 call    sub_4105F0
.text:0040F8DC                 test    eax, eax
.text:0040F8DE                 mov     ebx, eax
.text:0040F8E0                 jz      short loc_40F908
.text:0040F8E2                 mov     edx, eax
.text:0040F8E4                 mov     ecx, eax
.text:0040F8E6                 lea     esi, [esi+0]
.text:0040F8E9                 lea     edi, [edi+0]
.text:0040F8F0
.text:0040F8F0 loc_40F8F0:                             ; CODE XREF: .text:0040F906↓j
.text:0040F8F0                 movzx   eax, byte ptr [edx]
.text:0040F8F3                 cmp     al, 5Ch ; '\'
.text:0040F8F5                 jz      loc_40FA22
.text:0040F8FB
.text:0040F8FB loc_40F8FB:                             ; CODE XREF: .text:0040FA2A↓j
.text:0040F8FB                                         ; .text:0040FA38↓j ...
.text:0040F8FB                 mov     [ecx], al
.text:0040F8FD
.text:0040F8FD loc_40F8FD:                             ; CODE XREF: .text:0040FA4C↓j
.text:0040F8FD                 inc     ecx
.text:0040F8FE
.text:0040F8FE loc_40F8FE:                             ; CODE XREF: .text:0040FA64↓j
.text:0040F8FE                 movzx   eax, byte ptr [edx]
.text:0040F901                 mov     esi, ebx
.text:0040F903                 inc     edx
.text:0040F904                 test    al, al
.text:0040F906                 jnz     short loc_40F8F0
.text:0040F908
.text:0040F908 loc_40F908:                             ; CODE XREF: .text:0040F8E0↑j
.text:0040F908                 mov     [edi+8], esi
.text:0040F90B                 mov     eax, [esp+1Ch]
.text:0040F90F                 test    eax, eax
.text:0040F911                 jnz     loc_40FA09
.text:0040F917
.text:0040F917 loc_40F917:                             ; CODE XREF: .text:0040FA1D↓j
.text:0040F917                 mov     dword ptr [esp+4], 40F72Ah
.text:0040F91F                 mov     esi, offset loc_40F72D
.text:0040F924                 mov     [esp], ebp
.text:0040F927                 call    sub_4105F0
.text:0040F92C                 test    eax, eax
.text:0040F92E                 mov     ebx, eax
.text:0040F930                 jz      short loc_40F954
.text:0040F932                 mov     edx, eax
.text:0040F934                 mov     ecx, eax
.text:0040F936                 lea     esi, [esi+0]
.text:0040F939                 lea     edi, [edi+0]
.text:0040F940
.text:0040F940 loc_40F940:                             ; CODE XREF: .text:0040F952↓j
.text:0040F940                 movzx   eax, byte ptr [edx]
.text:0040F943                 cmp     al, 5Ch ; '\'
.text:0040F945                 jz      short loc_40F9B5
.text:0040F947
.text:0040F947 loc_40F947:                             ; CODE XREF: .text:0040F9BD↓j
.text:0040F947                                         ; .text:0040F9C7↓j ...
.text:0040F947                 mov     [ecx], al
.text:0040F949
.text:0040F949 loc_40F949:                             ; CODE XREF: .text:0040F9DB↓j
.text:0040F949                 inc     ecx
.text:0040F94A
.text:0040F94A loc_40F94A:                             ; CODE XREF: .text:0040F9F3↓j
.text:0040F94A                 movzx   eax, byte ptr [edx]
.text:0040F94D                 mov     esi, ebx
.text:0040F94F                 inc     edx
.text:0040F950                 test    al, al
.text:0040F952                 jnz     short loc_40F940
.text:0040F954
.text:0040F954 loc_40F954:                             ; CODE XREF: .text:0040F930↑j
.text:0040F954                 mov     [edi+0Ch], esi
.text:0040F957                 xor     eax, eax
.text:0040F959                 mov     edx, [esp+1Ch]
.text:0040F95D                 test    edx, edx
.text:0040F95F                 jnz     short loc_40F995
.text:0040F961
.text:0040F961 loc_40F961:                             ; CODE XREF: .text:0040F9B3↓j
.text:0040F961                 cmp     eax, 1
.text:0040F964                 jz      short loc_40F98C
.text:0040F966                 cmp     eax, 1
.text:0040F969                 jle     short loc_40F981
.text:0040F96B
.text:0040F96B loc_40F96B:                             ; CODE XREF: .text:0040F983↓j
.text:0040F96B                                         ; .text:0040F993↓j
.text:0040F96B                 mov     edx, [esp+160h]
.text:0040F972                 mov     [esp], edx
.text:0040F975                 call    sub_410590
.text:0040F97A                 mov     eax, edi
.text:0040F97C                 jmp     loc_40F7BA
.text:0040F981 ; ---------------------------------------------------------------------------
.text:0040F981
.text:0040F981 loc_40F981:                             ; CODE XREF: .text:0040F969↑j
.text:0040F981                 test    eax, eax
.text:0040F983                 jnz     short loc_40F96B
.text:0040F985                 mov     dword ptr [edi+10h], 0
.text:0040F98C
.text:0040F98C loc_40F98C:                             ; CODE XREF: .text:0040F964↑j
.text:0040F98C                 mov     dword ptr [edi+14h], 0
.text:0040F993                 jmp     short loc_40F96B
.text:0040F995 ; ---------------------------------------------------------------------------
.text:0040F995
.text:0040F995 loc_40F995:                             ; CODE XREF: .text:0040F95F↑j
.text:0040F995                 mov     dword ptr [esp+4], 40F72Eh
.text:0040F99D                 lea     esi, [edi+14h]
.text:0040F9A0                 lea     ebp, [edi+10h]
.text:0040F9A3                 mov     [esp+0Ch], esi
.text:0040F9A7                 mov     [esp+8], ebp
.text:0040F9AB                 mov     [esp], edx
.text:0040F9AE                 call    sscanf
.text:0040F9B3                 jmp     short loc_40F961
.text:0040F9B5 ; ---------------------------------------------------------------------------
.text:0040F9B5
.text:0040F9B5 loc_40F9B5:                             ; CODE XREF: .text:0040F945↑j
.text:0040F9B5                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F9B9                 jz      short loc_40F9F8
.text:0040F9BB
.text:0040F9BB loc_40F9BB:                             ; CODE XREF: .text:0040F9FC↓j
.text:0040F9BB                                         ; .text:0040FA02↓j
.text:0040F9BB                 cmp     al, 5Ch ; '\'
.text:0040F9BD                 jnz     short loc_40F947
.text:0040F9BF                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F9C3                 jz      short loc_40F9E0
.text:0040F9C5
.text:0040F9C5 loc_40F9C5:                             ; CODE XREF: .text:0040F9E4↓j
.text:0040F9C5                                         ; .text:0040F9EA↓j
.text:0040F9C5                 cmp     al, 5Ch ; '\'
.text:0040F9C7                 jnz     loc_40F947
.text:0040F9CD                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040F9D1                 jnz     loc_40F947
.text:0040F9D7                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040F9DA                 inc     edx
.text:0040F9DB                 jmp     loc_40F949
.text:0040F9E0 ; ---------------------------------------------------------------------------
.text:0040F9E0
.text:0040F9E0 loc_40F9E0:                             ; CODE XREF: .text:0040F9C3↑j
.text:0040F9E0                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040F9E4                 jnz     short loc_40F9C5
.text:0040F9E6                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040F9EA                 jnz     short loc_40F9C5
.text:0040F9EC                 mov     byte ptr [ecx], 9
.text:0040F9EF
.text:0040F9EF loc_40F9EF:                             ; CODE XREF: .text:0040FA07↓j
.text:0040F9EF                 inc     ecx
.text:0040F9F0                 add     edx, 3
.text:0040F9F3                 jmp     loc_40F94A
.text:0040F9F8 ; ---------------------------------------------------------------------------
.text:0040F9F8
.text:0040F9F8 loc_40F9F8:                             ; CODE XREF: .text:0040F9B9↑j
.text:0040F9F8                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040F9FC                 jnz     short loc_40F9BB
.text:0040F9FE                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040FA02                 jnz     short loc_40F9BB
.text:0040FA04                 mov     byte ptr [ecx], 20h ; ' '
.text:0040FA07                 jmp     short loc_40F9EF
.text:0040FA09 ; ---------------------------------------------------------------------------
.text:0040FA09
.text:0040FA09 loc_40FA09:                             ; CODE XREF: .text:0040F911↑j
.text:0040FA09                 mov     dword ptr [esp+4], 40F72Ah
.text:0040FA11                 mov     [esp], eax
.text:0040FA14                 call    strspn
.text:0040FA19                 add     [esp+1Ch], eax
.text:0040FA1D                 jmp     loc_40F917
.text:0040FA22 ; ---------------------------------------------------------------------------
.text:0040FA22
.text:0040FA22 loc_40FA22:                             ; CODE XREF: .text:0040F8F5↑j
.text:0040FA22                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040FA26                 jz      short loc_40FA69
.text:0040FA28
.text:0040FA28 loc_40FA28:                             ; CODE XREF: .text:0040FA6D↓j
.text:0040FA28                                         ; .text:0040FA73↓j
.text:0040FA28                 cmp     al, 5Ch ; '\'
.text:0040FA2A                 jnz     loc_40F8FB
.text:0040FA30                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040FA34                 jz      short loc_40FA51
.text:0040FA36
.text:0040FA36 loc_40FA36:                             ; CODE XREF: .text:0040FA55↓j
.text:0040FA36                                         ; .text:0040FA5B↓j
.text:0040FA36                 cmp     al, 5Ch ; '\'
.text:0040FA38                 jnz     loc_40F8FB
.text:0040FA3E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040FA42                 jnz     loc_40F8FB
.text:0040FA48                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040FA4B                 inc     edx
.text:0040FA4C                 jmp     loc_40F8FD
.text:0040FA51 ; ---------------------------------------------------------------------------
.text:0040FA51
.text:0040FA51 loc_40FA51:                             ; CODE XREF: .text:0040FA34↑j
.text:0040FA51                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040FA55                 jnz     short loc_40FA36
.text:0040FA57                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040FA5B                 jnz     short loc_40FA36
.text:0040FA5D                 mov     byte ptr [ecx], 9
.text:0040FA60
.text:0040FA60 loc_40FA60:                             ; CODE XREF: .text:0040FA78↓j
.text:0040FA60                 inc     ecx
.text:0040FA61                 add     edx, 3
.text:0040FA64                 jmp     loc_40F8FE
.text:0040FA69 ; ---------------------------------------------------------------------------
.text:0040FA69
.text:0040FA69 loc_40FA69:                             ; CODE XREF: .text:0040FA26↑j
.text:0040FA69                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040FA6D                 jnz     short loc_40FA28
.text:0040FA6F                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040FA73                 jnz     short loc_40FA28
.text:0040FA75                 mov     byte ptr [ecx], 20h ; ' '
.text:0040FA78                 jmp     short loc_40FA60
.text:0040FA7A ; ---------------------------------------------------------------------------
.text:0040FA7A
.text:0040FA7A loc_40FA7A:                             ; CODE XREF: .text:0040F8C1↑j
.text:0040FA7A                 mov     dword ptr [esp+4], 40F72Ah
.text:0040FA82                 mov     [esp], eax
.text:0040FA85                 call    strspn
.text:0040FA8A                 add     [esp+1Ch], eax
.text:0040FA8E                 jmp     loc_40F8C7
.text:0040FA93 ; ---------------------------------------------------------------------------
.text:0040FA93
.text:0040FA93 loc_40FA93:                             ; CODE XREF: .text:0040F8A5↑j
.text:0040FA93                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040FA97                 jz      short loc_40FADA
.text:0040FA99
.text:0040FA99 loc_40FA99:                             ; CODE XREF: .text:0040FADE↓j
.text:0040FA99                                         ; .text:0040FAE4↓j
.text:0040FA99                 cmp     al, 5Ch ; '\'
.text:0040FA9B                 jnz     loc_40F8AB
.text:0040FAA1                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040FAA5                 jz      short loc_40FAC2
.text:0040FAA7
.text:0040FAA7 loc_40FAA7:                             ; CODE XREF: .text:0040FAC6↓j
.text:0040FAA7                                         ; .text:0040FACC↓j
.text:0040FAA7                 cmp     al, 5Ch ; '\'
.text:0040FAA9                 jnz     loc_40F8AB
.text:0040FAAF                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040FAB3                 jnz     loc_40F8AB
.text:0040FAB9                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040FABC                 inc     edx
.text:0040FABD                 jmp     loc_40F8AD
.text:0040FAC2 ; ---------------------------------------------------------------------------
.text:0040FAC2
.text:0040FAC2 loc_40FAC2:                             ; CODE XREF: .text:0040FAA5↑j
.text:0040FAC2                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040FAC6                 jnz     short loc_40FAA7
.text:0040FAC8                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040FACC                 jnz     short loc_40FAA7
.text:0040FACE                 mov     byte ptr [ecx], 9
.text:0040FAD1
.text:0040FAD1 loc_40FAD1:                             ; CODE XREF: .text:0040FAE9↓j
.text:0040FAD1                 inc     ecx
.text:0040FAD2                 add     edx, 3
.text:0040FAD5                 jmp     loc_40F8AE
.text:0040FADA ; ---------------------------------------------------------------------------
.text:0040FADA
.text:0040FADA loc_40FADA:                             ; CODE XREF: .text:0040FA97↑j
.text:0040FADA                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040FADE                 jnz     short loc_40FA99
.text:0040FAE0                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040FAE4                 jnz     short loc_40FA99
.text:0040FAE6                 mov     byte ptr [ecx], 20h ; ' '
.text:0040FAE9                 jmp     short loc_40FAD1
.text:0040FAEB ; ---------------------------------------------------------------------------
.text:0040FAEB
.text:0040FAEB loc_40FAEB:                             ; CODE XREF: .text:0040F870↑j
.text:0040FAEB                 mov     dword ptr [esp+4], 40F72Ah
.text:0040FAF3                 mov     [esp], eax
.text:0040FAF6                 call    strspn
.text:0040FAFB                 add     [esp+1Ch], eax
.text:0040FAFF                 jmp     loc_40F876
.text:0040FB04 ; ---------------------------------------------------------------------------
.text:0040FB04
.text:0040FB04 loc_40FB04:                             ; CODE XREF: .text:0040F855↑j
.text:0040FB04                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040FB08                 jz      short loc_40FB4B
.text:0040FB0A
.text:0040FB0A loc_40FB0A:                             ; CODE XREF: .text:0040FB4F↓j
.text:0040FB0A                                         ; .text:0040FB55↓j
.text:0040FB0A                 cmp     al, 5Ch ; '\'
.text:0040FB0C                 jnz     loc_40F85B
.text:0040FB12                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040FB16                 jz      short loc_40FB33
.text:0040FB18
.text:0040FB18 loc_40FB18:                             ; CODE XREF: .text:0040FB37↓j
.text:0040FB18                                         ; .text:0040FB3D↓j
.text:0040FB18                 cmp     al, 5Ch ; '\'
.text:0040FB1A                 jnz     loc_40F85B
.text:0040FB20                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040FB24                 jnz     loc_40F85B
.text:0040FB2A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040FB2D                 inc     edx
.text:0040FB2E                 jmp     loc_40F85D
.text:0040FB33 ; ---------------------------------------------------------------------------
.text:0040FB33
.text:0040FB33 loc_40FB33:                             ; CODE XREF: .text:0040FB16↑j
.text:0040FB33                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040FB37                 jnz     short loc_40FB18
.text:0040FB39                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040FB3D                 jnz     short loc_40FB18
.text:0040FB3F                 mov     byte ptr [ecx], 9
.text:0040FB42
.text:0040FB42 loc_40FB42:                             ; CODE XREF: .text:0040FB5A↓j
.text:0040FB42                 inc     ecx
.text:0040FB43                 add     edx, 3
.text:0040FB46                 jmp     loc_40F85E
.text:0040FB4B ; ---------------------------------------------------------------------------
.text:0040FB4B
.text:0040FB4B loc_40FB4B:                             ; CODE XREF: .text:0040FB08↑j
.text:0040FB4B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040FB4F                 jnz     short loc_40FB0A
.text:0040FB51                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040FB55                 jnz     short loc_40FB0A
.text:0040FB57                 mov     byte ptr [ecx], 20h ; ' '
.text:0040FB5A                 jmp     short loc_40FB42
.text:0040FB5A ; ---------------------------------------------------------------------------
.text:0040FB5C                 align 10h
.text:0040FB60
.text:0040FB60 loc_40FB60:                             ; CODE XREF: .text:0040F772↑j
.text:0040FB60                 mov     dword ptr [esp+4], 0
.text:0040FB68                 mov     dword ptr [esp], 0
.text:0040FB6F                 call    GetLogicalDriveStringsA
.text:0040FB74                 sub     esp, 8
.text:0040FB77                 mov     ebx, eax
.text:0040FB79                 call    GetProcessHeap
.text:0040FB7E                 mov     [esp], eax
.text:0040FB81                 mov     [esp+8], ebx
.text:0040FB85                 mov     dword ptr [esp+4], 0
.text:0040FB8D                 call    HeapAlloc
.text:0040FB92                 sub     esp, 0Ch
.text:0040FB95                 mov     esi, eax
.text:0040FB97                 mov     [esp+4], eax
.text:0040FB9B                 mov     [esp], ebx
.text:0040FB9E                 call    GetLogicalDriveStringsA
.text:0040FBA3                 mov     off_4140A4, esi ; "notset"
.text:0040FBA9                 sub     esp, 8
.text:0040FBAC                 jmp     loc_40F778
.text:0040FBAC ; ---------------------------------------------------------------------------
.text:0040FBB1 ; const char aSSSSDD[]
.text:0040FBB1 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040FBB1                                         ; DATA XREF: .text:0040FCF0↓o
.text:0040FBB1                                         ; ___addmntentstr+F0↓o
.text:0040FBC4                 align 10h
.text:0040FBD0                 push    esi
.text:0040FBD1                 push    ebx
.text:0040FBD2                 sub     esp, 44h
.text:0040FBD5                 mov     ebx, [esp+54h]
.text:0040FBD9                 mov     esi, [esp+50h]
.text:0040FBDD                 mov     edx, [ebx]
.text:0040FBDF                 mov     [esp+20h], edx
.text:0040FBE3                 mov     ecx, [ebx+4]
.text:0040FBE6                 mov     [esp+24h], ecx
.text:0040FBEA                 mov     edx, [ebx+8]
.text:0040FBED                 mov     [esp+28h], edx
.text:0040FBF1                 mov     ecx, [ebx+0Ch]
.text:0040FBF4                 mov     [esp+2Ch], ecx
.text:0040FBF8                 mov     edx, [ebx+10h]
.text:0040FBFB                 mov     [esp+30h], edx
.text:0040FBFF                 mov     ecx, [ebx+14h]
.text:0040FC02                 mov     dword ptr [esp+8], 2
.text:0040FC0A                 mov     dword ptr [esp+4], 0
.text:0040FC12                 mov     [esp+34h], ecx
.text:0040FC16                 mov     [esp], esi
.text:0040FC19                 call    sub_410580
.text:0040FC1E ; ---------------------------------------------------------------------------
.text:0040FC1E                 test    eax, eax
.text:0040FC20                 mov     edx, 1
.text:0040FC25                 jnz     loc_40FD25
.text:0040FC2B                 mov     ebx, [esp+20h]
.text:0040FC2F                 mov     edx, ebx
.text:0040FC31                 movzx   eax, byte ptr [ebx]
.text:0040FC34                 test    al, al
.text:0040FC36                 jz      short loc_40FC60
.text:0040FC38                 nop
.text:0040FC39                 lea     esi, [esi+0]
.text:0040FC40
.text:0040FC40 loc_40FC40:                             ; CODE XREF: .text:0040FC5E↓j
.text:0040FC40                 cmp     al, 20h ; ' '
.text:0040FC42                 jz      loc_40FE9A
.text:0040FC48                 cmp     al, 9
.text:0040FC4A                 jz      loc_40FE9A
.text:0040FC50                 cmp     al, 5Ch ; '\'
.text:0040FC52                 jz      loc_40FE9A
.text:0040FC58                 inc     ebx
.text:0040FC59                 movzx   eax, byte ptr [ebx]
.text:0040FC5C                 test    al, al
.text:0040FC5E                 jnz     short loc_40FC40
.text:0040FC60
.text:0040FC60 loc_40FC60:                             ; CODE XREF: .text:0040FC36↑j
.text:0040FC60                                         ; .text:0040FE9C↓j ...
.text:0040FC60                 mov     ebx, [esp+24h]
.text:0040FC64                 mov     edx, ebx
.text:0040FC66                 movzx   eax, byte ptr [ebx]
.text:0040FC69                 test    al, al
.text:0040FC6B                 jz      short loc_40FC90
.text:0040FC6D                 lea     esi, [esi+0]
.text:0040FC70
.text:0040FC70 loc_40FC70:                             ; CODE XREF: .text:0040FC8E↓j
.text:0040FC70                 cmp     al, 20h ; ' '
.text:0040FC72                 jz      loc_40FE1A
.text:0040FC78                 cmp     al, 9
.text:0040FC7A                 jz      loc_40FE1A
.text:0040FC80                 cmp     al, 5Ch ; '\'
.text:0040FC82                 jz      loc_40FE1A
.text:0040FC88                 inc     ebx
.text:0040FC89                 movzx   eax, byte ptr [ebx]
.text:0040FC8C                 test    al, al
.text:0040FC8E                 jnz     short loc_40FC70
.text:0040FC90
.text:0040FC90 loc_40FC90:                             ; CODE XREF: .text:0040FC6B↑j
.text:0040FC90                                         ; .text:0040FE1C↓j ...
.text:0040FC90                 mov     ebx, [esp+28h]
.text:0040FC94                 mov     edx, ebx
.text:0040FC96                 movzx   eax, byte ptr [ebx]
.text:0040FC99                 test    al, al
.text:0040FC9B                 jz      short loc_40FCC0
.text:0040FC9D                 lea     esi, [esi+0]
.text:0040FCA0
.text:0040FCA0 loc_40FCA0:                             ; CODE XREF: .text:0040FCBE↓j
.text:0040FCA0                 cmp     al, 20h ; ' '
.text:0040FCA2                 jz      loc_40FD9E
.text:0040FCA8                 cmp     al, 9
.text:0040FCAA                 jz      loc_40FD9E
.text:0040FCB0                 cmp     al, 5Ch ; '\'
.text:0040FCB2                 jz      loc_40FD9E
.text:0040FCB8                 inc     ebx
.text:0040FCB9                 movzx   eax, byte ptr [ebx]
.text:0040FCBC                 test    al, al
.text:0040FCBE                 jnz     short loc_40FCA0
.text:0040FCC0
.text:0040FCC0 loc_40FCC0:                             ; CODE XREF: .text:0040FC9B↑j
.text:0040FCC0                                         ; .text:0040FDA0↓j ...
.text:0040FCC0                 mov     edx, [esp+2Ch]
.text:0040FCC4                 mov     ebx, edx
.text:0040FCC6                 movzx   eax, byte ptr [edx]
.text:0040FCC9                 test    al, al
.text:0040FCCB                 jz      short loc_40FCE4
.text:0040FCCD                 lea     esi, [esi+0]
.text:0040FCD0
.text:0040FCD0 loc_40FCD0:                             ; CODE XREF: .text:0040FCE2↓j
.text:0040FCD0                 cmp     al, 20h ; ' '
.text:0040FCD2                 jz      short loc_40FD2D
.text:0040FCD4                 cmp     al, 9
.text:0040FCD6                 jz      short loc_40FD2D
.text:0040FCD8                 cmp     al, 5Ch ; '\'
.text:0040FCDA                 jz      short loc_40FD2D
.text:0040FCDC                 inc     ebx
.text:0040FCDD                 movzx   eax, byte ptr [ebx]
.text:0040FCE0                 test    al, al
.text:0040FCE2                 jnz     short loc_40FCD0
.text:0040FCE4
.text:0040FCE4 loc_40FCE4:                             ; CODE XREF: .text:0040FCCB↑j
.text:0040FCE4                                         ; .text:0040FD2F↓j ...
.text:0040FCE4                 mov     [esp+14h], edx
.text:0040FCE8                 mov     ecx, [esp+34h]
.text:0040FCEC                 mov     ebx, [esp+30h]
.text:0040FCF0                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040FCF8                 mov     edx, [esp+24h]
.text:0040FCFC                 mov     [esp+1Ch], ecx
.text:0040FD00                 mov     ecx, [esp+28h]
.text:0040FD04                 mov     [esp+18h], ebx
.text:0040FD08                 mov     ebx, [esp+20h]
.text:0040FD0C                 mov     [esp+0Ch], edx
.text:0040FD10                 mov     [esp+10h], ecx
.text:0040FD14                 mov     [esp+8], ebx
.text:0040FD18                 mov     [esp], esi
.text:0040FD1B                 call    fprintf
.text:0040FD20                 mov     edx, eax
.text:0040FD22                 shr     edx, 1Fh
.text:0040FD25
.text:0040FD25 loc_40FD25:                             ; CODE XREF: .text:0040FC25↑j
.text:0040FD25                 add     esp, 44h
.text:0040FD28                 mov     eax, edx
.text:0040FD2A                 pop     ebx
.text:0040FD2B                 pop     esi
.text:0040FD2C                 retn
.text:0040FD2D ; ---------------------------------------------------------------------------
.text:0040FD2D
.text:0040FD2D loc_40FD2D:                             ; CODE XREF: .text:0040FCD2↑j
.text:0040FD2D                                         ; .text:0040FCD6↑j ...
.text:0040FD2D                 test    al, al
.text:0040FD2F                 jz      short loc_40FCE4
.text:0040FD31                 mov     [esp], edx
.text:0040FD34                 mov     ebx, edx
.text:0040FD36                 call    strlen
.text:0040FD3B                 lea     edx, ds:1[eax*4]
.text:0040FD42                 mov     [esp], edx
.text:0040FD45                 call    malloc
.text:0040FD4A                 mov     [esp+2Ch], eax
.text:0040FD4E                 mov     edx, eax
.text:0040FD50
.text:0040FD50 loc_40FD50:                             ; CODE XREF: .text:0040FD68↓j
.text:0040FD50                 movzx   eax, byte ptr [ebx]
.text:0040FD53                 cmp     al, 20h ; ' '
.text:0040FD55                 jz      short loc_40FD8D
.text:0040FD57                 cmp     al, 9
.text:0040FD59                 jz      short loc_40FD7C
.text:0040FD5B                 cmp     al, 5Ch ; '\'
.text:0040FD5D                 jz      short loc_40FD73
.text:0040FD5F                 mov     [edx], al
.text:0040FD61
.text:0040FD61 loc_40FD61:                             ; CODE XREF: .text:0040FD7A↓j
.text:0040FD61                                         ; .text:0040FD8B↓j ...
.text:0040FD61                 movzx   ecx, byte ptr [ebx]
.text:0040FD64                 inc     edx
.text:0040FD65                 inc     ebx
.text:0040FD66                 test    cl, cl
.text:0040FD68                 jnz     short loc_40FD50
.text:0040FD6A                 mov     edx, [esp+2Ch]
.text:0040FD6E                 jmp     loc_40FCE4
.text:0040FD73 ; ---------------------------------------------------------------------------
.text:0040FD73
.text:0040FD73 loc_40FD73:                             ; CODE XREF: .text:0040FD5D↑j
.text:0040FD73                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FD76                 inc     edx
.text:0040FD77                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FD7A                 jmp     short loc_40FD61
.text:0040FD7C ; ---------------------------------------------------------------------------
.text:0040FD7C
.text:0040FD7C loc_40FD7C:                             ; CODE XREF: .text:0040FD59↑j
.text:0040FD7C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FD7F                 inc     edx
.text:0040FD80                 mov     byte ptr [edx], 30h ; '0'
.text:0040FD83                 inc     edx
.text:0040FD84                 mov     byte ptr [edx], 31h ; '1'
.text:0040FD87                 inc     edx
.text:0040FD88                 mov     byte ptr [edx], 32h ; '2'
.text:0040FD8B                 jmp     short loc_40FD61
.text:0040FD8D ; ---------------------------------------------------------------------------
.text:0040FD8D
.text:0040FD8D loc_40FD8D:                             ; CODE XREF: .text:0040FD55↑j
.text:0040FD8D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FD90                 inc     edx
.text:0040FD91                 mov     byte ptr [edx], 30h ; '0'
.text:0040FD94                 inc     edx
.text:0040FD95                 mov     byte ptr [edx], 34h ; '4'
.text:0040FD98                 inc     edx
.text:0040FD99                 mov     byte ptr [edx], 30h ; '0'
.text:0040FD9C                 jmp     short loc_40FD61
.text:0040FD9E ; ---------------------------------------------------------------------------
.text:0040FD9E
.text:0040FD9E loc_40FD9E:                             ; CODE XREF: .text:0040FCA2↑j
.text:0040FD9E                                         ; .text:0040FCAA↑j ...
.text:0040FD9E                 test    al, al
.text:0040FDA0                 jz      loc_40FCC0
.text:0040FDA6                 mov     [esp], edx
.text:0040FDA9                 mov     ebx, edx
.text:0040FDAB                 call    strlen
.text:0040FDB0                 lea     edx, ds:1[eax*4]
.text:0040FDB7                 mov     [esp], edx
.text:0040FDBA                 call    malloc
.text:0040FDBF                 mov     [esp+28h], eax
.text:0040FDC3                 mov     edx, eax
.text:0040FDC5                 lea     esi, [esi+0]
.text:0040FDC9                 lea     edi, [edi+0]
.text:0040FDD0
.text:0040FDD0 loc_40FDD0:                             ; CODE XREF: .text:0040FDE8↓j
.text:0040FDD0                 movzx   eax, byte ptr [ebx]
.text:0040FDD3                 cmp     al, 20h ; ' '
.text:0040FDD5                 jz      short loc_40FE09
.text:0040FDD7                 cmp     al, 9
.text:0040FDD9                 jz      short loc_40FDF8
.text:0040FDDB                 cmp     al, 5Ch ; '\'
.text:0040FDDD                 jz      short loc_40FDEF
.text:0040FDDF                 mov     [edx], al
.text:0040FDE1
.text:0040FDE1 loc_40FDE1:                             ; CODE XREF: .text:0040FDF6↓j
.text:0040FDE1                                         ; .text:0040FE07↓j ...
.text:0040FDE1                 movzx   ecx, byte ptr [ebx]
.text:0040FDE4                 inc     edx
.text:0040FDE5                 inc     ebx
.text:0040FDE6                 test    cl, cl
.text:0040FDE8                 jnz     short loc_40FDD0
.text:0040FDEA                 jmp     loc_40FCC0
.text:0040FDEF ; ---------------------------------------------------------------------------
.text:0040FDEF
.text:0040FDEF loc_40FDEF:                             ; CODE XREF: .text:0040FDDD↑j
.text:0040FDEF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FDF2                 inc     edx
.text:0040FDF3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FDF6                 jmp     short loc_40FDE1
.text:0040FDF8 ; ---------------------------------------------------------------------------
.text:0040FDF8
.text:0040FDF8 loc_40FDF8:                             ; CODE XREF: .text:0040FDD9↑j
.text:0040FDF8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FDFB                 inc     edx
.text:0040FDFC                 mov     byte ptr [edx], 30h ; '0'
.text:0040FDFF                 inc     edx
.text:0040FE00                 mov     byte ptr [edx], 31h ; '1'
.text:0040FE03                 inc     edx
.text:0040FE04                 mov     byte ptr [edx], 32h ; '2'
.text:0040FE07                 jmp     short loc_40FDE1
.text:0040FE09 ; ---------------------------------------------------------------------------
.text:0040FE09
.text:0040FE09 loc_40FE09:                             ; CODE XREF: .text:0040FDD5↑j
.text:0040FE09                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FE0C                 inc     edx
.text:0040FE0D                 mov     byte ptr [edx], 30h ; '0'
.text:0040FE10                 inc     edx
.text:0040FE11                 mov     byte ptr [edx], 34h ; '4'
.text:0040FE14                 inc     edx
.text:0040FE15                 mov     byte ptr [edx], 30h ; '0'
.text:0040FE18                 jmp     short loc_40FDE1
.text:0040FE1A ; ---------------------------------------------------------------------------
.text:0040FE1A
.text:0040FE1A loc_40FE1A:                             ; CODE XREF: .text:0040FC72↑j
.text:0040FE1A                                         ; .text:0040FC7A↑j ...
.text:0040FE1A                 test    al, al
.text:0040FE1C                 jz      loc_40FC90
.text:0040FE22                 mov     [esp], edx
.text:0040FE25                 mov     ebx, edx
.text:0040FE27                 call    strlen
.text:0040FE2C                 lea     edx, ds:1[eax*4]
.text:0040FE33                 mov     [esp], edx
.text:0040FE36                 call    malloc
.text:0040FE3B                 mov     [esp+24h], eax
.text:0040FE3F                 mov     edx, eax
.text:0040FE41                 jmp     short loc_40FE50
.text:0040FE41 ; ---------------------------------------------------------------------------
.text:0040FE43                 align 10h
.text:0040FE50
.text:0040FE50 loc_40FE50:                             ; CODE XREF: .text:0040FE41↑j
.text:0040FE50                                         ; .text:0040FE68↓j
.text:0040FE50                 movzx   eax, byte ptr [ebx]
.text:0040FE53                 cmp     al, 20h ; ' '
.text:0040FE55                 jz      short loc_40FE89
.text:0040FE57                 cmp     al, 9
.text:0040FE59                 jz      short loc_40FE78
.text:0040FE5B                 cmp     al, 5Ch ; '\'
.text:0040FE5D                 jz      short loc_40FE6F
.text:0040FE5F                 mov     [edx], al
.text:0040FE61
.text:0040FE61 loc_40FE61:                             ; CODE XREF: .text:0040FE76↓j
.text:0040FE61                                         ; .text:0040FE87↓j ...
.text:0040FE61                 movzx   ecx, byte ptr [ebx]
.text:0040FE64                 inc     edx
.text:0040FE65                 inc     ebx
.text:0040FE66                 test    cl, cl
.text:0040FE68                 jnz     short loc_40FE50
.text:0040FE6A                 jmp     loc_40FC90
.text:0040FE6F ; ---------------------------------------------------------------------------
.text:0040FE6F
.text:0040FE6F loc_40FE6F:                             ; CODE XREF: .text:0040FE5D↑j
.text:0040FE6F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FE72                 inc     edx
.text:0040FE73                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FE76                 jmp     short loc_40FE61
.text:0040FE78 ; ---------------------------------------------------------------------------
.text:0040FE78
.text:0040FE78 loc_40FE78:                             ; CODE XREF: .text:0040FE59↑j
.text:0040FE78                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FE7B                 inc     edx
.text:0040FE7C                 mov     byte ptr [edx], 30h ; '0'
.text:0040FE7F                 inc     edx
.text:0040FE80                 mov     byte ptr [edx], 31h ; '1'
.text:0040FE83                 inc     edx
.text:0040FE84                 mov     byte ptr [edx], 32h ; '2'
.text:0040FE87                 jmp     short loc_40FE61
.text:0040FE89 ; ---------------------------------------------------------------------------
.text:0040FE89
.text:0040FE89 loc_40FE89:                             ; CODE XREF: .text:0040FE55↑j
.text:0040FE89                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FE8C                 inc     edx
.text:0040FE8D                 mov     byte ptr [edx], 30h ; '0'
.text:0040FE90                 inc     edx
.text:0040FE91                 mov     byte ptr [edx], 34h ; '4'
.text:0040FE94                 inc     edx
.text:0040FE95                 mov     byte ptr [edx], 30h ; '0'
.text:0040FE98                 jmp     short loc_40FE61
.text:0040FE9A ; ---------------------------------------------------------------------------
.text:0040FE9A
.text:0040FE9A loc_40FE9A:                             ; CODE XREF: .text:0040FC42↑j
.text:0040FE9A                                         ; .text:0040FC4A↑j ...
.text:0040FE9A                 test    al, al
.text:0040FE9C                 jz      loc_40FC60
.text:0040FEA2                 mov     [esp], edx
.text:0040FEA5                 mov     ebx, edx
.text:0040FEA7                 call    strlen
.text:0040FEAC                 lea     ecx, ds:1[eax*4]
.text:0040FEB3                 mov     [esp], ecx
.text:0040FEB6                 call    malloc
.text:0040FEBB                 mov     [esp+20h], eax
.text:0040FEBF                 mov     edx, eax
.text:0040FEC1                 jmp     short loc_40FED0
.text:0040FEC1 ; ---------------------------------------------------------------------------
.text:0040FEC3                 align 10h
.text:0040FED0
.text:0040FED0 loc_40FED0:                             ; CODE XREF: .text:0040FEC1↑j
.text:0040FED0                                         ; .text:0040FEE8↓j
.text:0040FED0                 movzx   eax, byte ptr [ebx]
.text:0040FED3                 cmp     al, 20h ; ' '
.text:0040FED5                 jz      short loc_40FF09
.text:0040FED7                 cmp     al, 9
.text:0040FED9                 jz      short loc_40FEF8
.text:0040FEDB                 cmp     al, 5Ch ; '\'
.text:0040FEDD                 jz      short loc_40FEEF
.text:0040FEDF                 mov     [edx], al
.text:0040FEE1
.text:0040FEE1 loc_40FEE1:                             ; CODE XREF: .text:0040FEF6↓j
.text:0040FEE1                                         ; .text:0040FF07↓j ...
.text:0040FEE1                 movzx   ecx, byte ptr [ebx]
.text:0040FEE4                 inc     edx
.text:0040FEE5                 inc     ebx
.text:0040FEE6                 test    cl, cl
.text:0040FEE8                 jnz     short loc_40FED0
.text:0040FEEA                 jmp     loc_40FC60
.text:0040FEEF ; ---------------------------------------------------------------------------
.text:0040FEEF
.text:0040FEEF loc_40FEEF:                             ; CODE XREF: .text:0040FEDD↑j
.text:0040FEEF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FEF2                 inc     edx
.text:0040FEF3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FEF6                 jmp     short loc_40FEE1
.text:0040FEF8 ; ---------------------------------------------------------------------------
.text:0040FEF8
.text:0040FEF8 loc_40FEF8:                             ; CODE XREF: .text:0040FED9↑j
.text:0040FEF8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FEFB                 inc     edx
.text:0040FEFC                 mov     byte ptr [edx], 30h ; '0'
.text:0040FEFF                 inc     edx
.text:0040FF00                 mov     byte ptr [edx], 31h ; '1'
.text:0040FF03                 inc     edx
.text:0040FF04                 mov     byte ptr [edx], 32h ; '2'
.text:0040FF07                 jmp     short loc_40FEE1
.text:0040FF09 ; ---------------------------------------------------------------------------
.text:0040FF09
.text:0040FF09 loc_40FF09:                             ; CODE XREF: .text:0040FED5↑j
.text:0040FF09                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FF0C                 inc     edx
.text:0040FF0D                 mov     byte ptr [edx], 30h ; '0'
.text:0040FF10                 inc     edx
.text:0040FF11                 mov     byte ptr [edx], 34h ; '4'
.text:0040FF14                 inc     edx
.text:0040FF15                 mov     byte ptr [edx], 30h ; '0'
.text:0040FF18                 jmp     short loc_40FEE1
.text:0040FF18 ; ---------------------------------------------------------------------------
.text:0040FF1A                 align 10h
.text:0040FF20
.text:0040FF20 ; =============== S U B R O U T I N E =======================================
.text:0040FF20
.text:0040FF20 ; Attributes: info_from_lumina
.text:0040FF20
.text:0040FF20 ; int __cdecl __addmntentstr(char *, int)
.text:0040FF20 ___addmntentstr proc near               ; CODE XREF: .text:0040F7EA↑p
.text:0040FF20
.text:0040FF20 Buffer          = dword ptr -4Ch
.text:0040FF20 Format          = dword ptr -48h
.text:0040FF20 var_44          = dword ptr -44h
.text:0040FF20 var_40          = dword ptr -40h
.text:0040FF20 var_3C          = dword ptr -3Ch
.text:0040FF20 var_38          = dword ptr -38h
.text:0040FF20 var_34          = dword ptr -34h
.text:0040FF20 var_30          = dword ptr -30h
.text:0040FF20 var_2C          = dword ptr -2Ch
.text:0040FF20 var_28          = dword ptr -28h
.text:0040FF20 var_24          = dword ptr -24h
.text:0040FF20 Str             = dword ptr -20h
.text:0040FF20 var_1C          = dword ptr -1Ch
.text:0040FF20 var_18          = dword ptr -18h
.text:0040FF20 arg_0           = dword ptr  4
.text:0040FF20 arg_4           = dword ptr  8
.text:0040FF20
.text:0040FF20                 push    ebx
.text:0040FF21                 sub     esp, 48h
.text:0040FF24                 mov     edx, [esp+4Ch+arg_4]
.text:0040FF28                 mov     ecx, [edx]
.text:0040FF2A                 mov     [esp+4Ch+var_2C], ecx
.text:0040FF2E                 mov     ebx, [edx+4]
.text:0040FF31                 mov     [esp+4Ch+var_28], ebx
.text:0040FF35                 mov     ebx, [edx+8]
.text:0040FF38                 mov     [esp+4Ch+var_24], ebx
.text:0040FF3C                 mov     ebx, [edx+0Ch]
.text:0040FF3F                 mov     [esp+4Ch+Str], ebx
.text:0040FF43                 mov     ebx, [edx+10h]
.text:0040FF46                 mov     [esp+4Ch+var_1C], ebx
.text:0040FF4A                 mov     ebx, [edx+14h]
.text:0040FF4D                 mov     [esp+4Ch+var_18], ebx
.text:0040FF51                 mov     ebx, ecx
.text:0040FF53                 movzx   eax, byte ptr [ecx]
.text:0040FF56                 test    al, al
.text:0040FF58                 jz      loc_410241
.text:0040FF5E                 mov     esi, esi
.text:0040FF60
.text:0040FF60 loc_40FF60:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040FF60                 cmp     al, 20h ; ' '
.text:0040FF62                 jz      loc_4101C0
.text:0040FF68                 cmp     al, 9
.text:0040FF6A                 jz      loc_4101C0
.text:0040FF70                 cmp     al, 5Ch ; '\'
.text:0040FF72                 jz      loc_4101C0
.text:0040FF78                 inc     ebx
.text:0040FF79                 movzx   eax, byte ptr [ebx]
.text:0040FF7C                 test    al, al
.text:0040FF7E                 jnz     short loc_40FF60
.text:0040FF80
.text:0040FF80 loc_40FF80:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040FF80                                         ; ___addmntentstr+2EA↓j
.text:0040FF80                 mov     ebx, [esp+4Ch+var_28]
.text:0040FF84                 mov     edx, ebx
.text:0040FF86                 movzx   eax, byte ptr [ebx]
.text:0040FF89                 test    al, al
.text:0040FF8B                 jz      short loc_40FFB0
.text:0040FF8D                 lea     esi, [esi+0]
.text:0040FF90
.text:0040FF90 loc_40FF90:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040FF90                 cmp     al, 20h ; ' '
.text:0040FF92                 jz      loc_41013A
.text:0040FF98                 cmp     al, 9
.text:0040FF9A                 jz      loc_41013A
.text:0040FFA0                 cmp     al, 5Ch ; '\'
.text:0040FFA2                 jz      loc_41013A
.text:0040FFA8                 inc     ebx
.text:0040FFA9                 movzx   eax, byte ptr [ebx]
.text:0040FFAC                 test    al, al
.text:0040FFAE                 jnz     short loc_40FF90
.text:0040FFB0
.text:0040FFB0 loc_40FFB0:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040FFB0                                         ; ___addmntentstr+21C↓j ...
.text:0040FFB0                 mov     ebx, [esp+4Ch+var_24]
.text:0040FFB4                 mov     edx, ebx
.text:0040FFB6                 movzx   eax, byte ptr [ebx]
.text:0040FFB9                 test    al, al
.text:0040FFBB                 jz      short loc_40FFE0
.text:0040FFBD                 lea     esi, [esi+0]
.text:0040FFC0
.text:0040FFC0 loc_40FFC0:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040FFC0                 cmp     al, 20h ; ' '
.text:0040FFC2                 jz      loc_4100BE
.text:0040FFC8                 cmp     al, 9
.text:0040FFCA                 jz      loc_4100BE
.text:0040FFD0                 cmp     al, 5Ch ; '\'
.text:0040FFD2                 jz      loc_4100BE
.text:0040FFD8                 inc     ebx
.text:0040FFD9                 movzx   eax, byte ptr [ebx]
.text:0040FFDC                 test    al, al
.text:0040FFDE                 jnz     short loc_40FFC0
.text:0040FFE0
.text:0040FFE0 loc_40FFE0:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040FFE0                                         ; ___addmntentstr+1A0↓j ...
.text:0040FFE0                 mov     edx, [esp+4Ch+Str]
.text:0040FFE4                 mov     ebx, edx
.text:0040FFE6                 movzx   eax, byte ptr [edx]
.text:0040FFE9                 test    al, al
.text:0040FFEB                 jz      short loc_410004
.text:0040FFED                 lea     esi, [esi+0]
.text:0040FFF0
.text:0040FFF0 loc_40FFF0:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040FFF0                 cmp     al, 20h ; ' '
.text:0040FFF2                 jz      short loc_41004C
.text:0040FFF4                 cmp     al, 9
.text:0040FFF6                 jz      short loc_41004C
.text:0040FFF8                 cmp     al, 5Ch ; '\'
.text:0040FFFA                 jz      short loc_41004C
.text:0040FFFC                 inc     ebx
.text:0040FFFD                 movzx   eax, byte ptr [ebx]
.text:00410000                 test    al, al
.text:00410002                 jnz     short loc_40FFF0
.text:00410004
.text:00410004 loc_410004:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:00410004                                         ; ___addmntentstr+12E↓j ...
.text:00410004                 mov     [esp+4Ch+var_38], edx
.text:00410008                 mov     ebx, [esp+4Ch+var_18]
.text:0041000C                 mov     ecx, [esp+4Ch+var_1C]
.text:00410010                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:00410018                 mov     edx, [esp+4Ch+var_2C]
.text:0041001C                 mov     [esp+4Ch+var_30], ebx
.text:00410020                 mov     ebx, [esp+4Ch+var_24]
.text:00410024                 mov     [esp+4Ch+var_34], ecx
.text:00410028                 mov     ecx, [esp+4Ch+var_28]
.text:0041002C                 mov     [esp+4Ch+var_3C], ebx
.text:00410030                 mov     ebx, [esp+4Ch+arg_0]
.text:00410034                 mov     [esp+4Ch+var_40], ecx
.text:00410038                 mov     [esp+4Ch+var_44], edx
.text:0041003C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0041003F                 call    sprintf
.text:00410044                 add     esp, 48h
.text:00410047                 shr     eax, 1Fh
.text:0041004A                 pop     ebx
.text:0041004B                 retn
.text:0041004C ; ---------------------------------------------------------------------------
.text:0041004C
.text:0041004C loc_41004C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0041004C                                         ; ___addmntentstr+D6↑j ...
.text:0041004C                 test    al, al
.text:0041004E                 jz      short loc_410004
.text:00410050                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00410053                 mov     ebx, edx
.text:00410055                 call    strlen
.text:0041005A                 lea     edx, ds:1[eax*4]
.text:00410061                 mov     [esp+4Ch+Buffer], edx ; Size
.text:00410064                 call    malloc
.text:00410069                 mov     [esp+4Ch+Str], eax
.text:0041006D                 mov     edx, eax
.text:0041006F                 nop
.text:00410070
.text:00410070 loc_410070:                             ; CODE XREF: ___addmntentstr+168↓j
.text:00410070                 movzx   eax, byte ptr [ebx]
.text:00410073                 cmp     al, 20h ; ' '
.text:00410075                 jz      short loc_4100AD
.text:00410077                 cmp     al, 9
.text:00410079                 jz      short loc_41009C
.text:0041007B                 cmp     al, 5Ch ; '\'
.text:0041007D                 jz      short loc_410093
.text:0041007F                 mov     [edx], al
.text:00410081
.text:00410081 loc_410081:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:00410081                                         ; ___addmntentstr+18B↓j ...
.text:00410081                 movzx   ecx, byte ptr [ebx]
.text:00410084                 inc     edx
.text:00410085                 inc     ebx
.text:00410086                 test    cl, cl
.text:00410088                 jnz     short loc_410070
.text:0041008A                 mov     edx, [esp+4Ch+Str]
.text:0041008E                 jmp     loc_410004
.text:00410093 ; ---------------------------------------------------------------------------
.text:00410093
.text:00410093 loc_410093:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:00410093                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410096                 inc     edx
.text:00410097                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041009A                 jmp     short loc_410081
.text:0041009C ; ---------------------------------------------------------------------------
.text:0041009C
.text:0041009C loc_41009C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0041009C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041009F                 inc     edx
.text:004100A0                 mov     byte ptr [edx], 30h ; '0'
.text:004100A3                 inc     edx
.text:004100A4                 mov     byte ptr [edx], 31h ; '1'
.text:004100A7                 inc     edx
.text:004100A8                 mov     byte ptr [edx], 32h ; '2'
.text:004100AB                 jmp     short loc_410081
.text:004100AD ; ---------------------------------------------------------------------------
.text:004100AD
.text:004100AD loc_4100AD:                             ; CODE XREF: ___addmntentstr+155↑j
.text:004100AD                 mov     byte ptr [edx], 5Ch ; '\'
.text:004100B0                 inc     edx
.text:004100B1                 mov     byte ptr [edx], 30h ; '0'
.text:004100B4                 inc     edx
.text:004100B5                 mov     byte ptr [edx], 34h ; '4'
.text:004100B8                 inc     edx
.text:004100B9                 mov     byte ptr [edx], 30h ; '0'
.text:004100BC                 jmp     short loc_410081
.text:004100BE ; ---------------------------------------------------------------------------
.text:004100BE
.text:004100BE loc_4100BE:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:004100BE                                         ; ___addmntentstr+AA↑j ...
.text:004100BE                 test    al, al
.text:004100C0                 jz      loc_40FFE0
.text:004100C6                 mov     [esp+4Ch+Buffer], edx ; Str
.text:004100C9                 mov     ebx, edx
.text:004100CB                 call    strlen
.text:004100D0                 lea     edx, ds:1[eax*4]
.text:004100D7                 mov     [esp+4Ch+Buffer], edx ; Size
.text:004100DA                 call    malloc
.text:004100DF                 mov     [esp+4Ch+var_24], eax
.text:004100E3                 mov     edx, eax
.text:004100E5                 lea     esi, [esi+0]
.text:004100E9                 lea     edi, [edi+0]
.text:004100F0
.text:004100F0 loc_4100F0:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:004100F0                 movzx   eax, byte ptr [ebx]
.text:004100F3                 cmp     al, 20h ; ' '
.text:004100F5                 jz      short loc_410129
.text:004100F7                 cmp     al, 9
.text:004100F9                 jz      short loc_410118
.text:004100FB                 cmp     al, 5Ch ; '\'
.text:004100FD                 jz      short loc_41010F
.text:004100FF                 mov     [edx], al
.text:00410101
.text:00410101 loc_410101:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:00410101                                         ; ___addmntentstr+207↓j ...
.text:00410101                 movzx   ecx, byte ptr [ebx]
.text:00410104                 inc     edx
.text:00410105                 inc     ebx
.text:00410106                 test    cl, cl
.text:00410108                 jnz     short loc_4100F0
.text:0041010A                 jmp     loc_40FFE0
.text:0041010F ; ---------------------------------------------------------------------------
.text:0041010F
.text:0041010F loc_41010F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0041010F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410112                 inc     edx
.text:00410113                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410116                 jmp     short loc_410101
.text:00410118 ; ---------------------------------------------------------------------------
.text:00410118
.text:00410118 loc_410118:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:00410118                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041011B                 inc     edx
.text:0041011C                 mov     byte ptr [edx], 30h ; '0'
.text:0041011F                 inc     edx
.text:00410120                 mov     byte ptr [edx], 31h ; '1'
.text:00410123                 inc     edx
.text:00410124                 mov     byte ptr [edx], 32h ; '2'
.text:00410127                 jmp     short loc_410101
.text:00410129 ; ---------------------------------------------------------------------------
.text:00410129
.text:00410129 loc_410129:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:00410129                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041012C                 inc     edx
.text:0041012D                 mov     byte ptr [edx], 30h ; '0'
.text:00410130                 inc     edx
.text:00410131                 mov     byte ptr [edx], 34h ; '4'
.text:00410134                 inc     edx
.text:00410135                 mov     byte ptr [edx], 30h ; '0'
.text:00410138                 jmp     short loc_410101
.text:0041013A ; ---------------------------------------------------------------------------
.text:0041013A
.text:0041013A loc_41013A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0041013A                                         ; ___addmntentstr+7A↑j ...
.text:0041013A                 test    al, al
.text:0041013C                 jz      loc_40FFB0
.text:00410142                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00410145                 mov     ebx, edx
.text:00410147                 call    strlen
.text:0041014C                 lea     edx, ds:1[eax*4]
.text:00410153                 mov     [esp+4Ch+Buffer], edx ; Size
.text:00410156                 call    malloc
.text:0041015B                 mov     [esp+4Ch+var_28], eax
.text:0041015F                 mov     edx, eax
.text:00410161                 jmp     short loc_410170
.text:00410161 ; ---------------------------------------------------------------------------
.text:00410163                 align 10h
.text:00410170
.text:00410170 loc_410170:                             ; CODE XREF: ___addmntentstr+241↑j
.text:00410170                                         ; ___addmntentstr+268↓j
.text:00410170                 movzx   eax, byte ptr [ebx]
.text:00410173                 cmp     al, 20h ; ' '
.text:00410175                 jz      short loc_4101A9
.text:00410177                 cmp     al, 9
.text:00410179                 jz      short loc_410198
.text:0041017B                 cmp     al, 5Ch ; '\'
.text:0041017D                 jz      short loc_41018F
.text:0041017F                 mov     [edx], al
.text:00410181
.text:00410181 loc_410181:                             ; CODE XREF: ___addmntentstr+276↓j
.text:00410181                                         ; ___addmntentstr+287↓j ...
.text:00410181                 movzx   ecx, byte ptr [ebx]
.text:00410184                 inc     edx
.text:00410185                 inc     ebx
.text:00410186                 test    cl, cl
.text:00410188                 jnz     short loc_410170
.text:0041018A                 jmp     loc_40FFB0
.text:0041018F ; ---------------------------------------------------------------------------
.text:0041018F
.text:0041018F loc_41018F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0041018F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410192                 inc     edx
.text:00410193                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410196                 jmp     short loc_410181
.text:00410198 ; ---------------------------------------------------------------------------
.text:00410198
.text:00410198 loc_410198:                             ; CODE XREF: ___addmntentstr+259↑j
.text:00410198                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041019B                 inc     edx
.text:0041019C                 mov     byte ptr [edx], 30h ; '0'
.text:0041019F                 inc     edx
.text:004101A0                 mov     byte ptr [edx], 31h ; '1'
.text:004101A3                 inc     edx
.text:004101A4                 mov     byte ptr [edx], 32h ; '2'
.text:004101A7                 jmp     short loc_410181
.text:004101A9 ; ---------------------------------------------------------------------------
.text:004101A9
.text:004101A9 loc_4101A9:                             ; CODE XREF: ___addmntentstr+255↑j
.text:004101A9                 mov     byte ptr [edx], 5Ch ; '\'
.text:004101AC                 inc     edx
.text:004101AD                 mov     byte ptr [edx], 30h ; '0'
.text:004101B0                 inc     edx
.text:004101B1                 mov     byte ptr [edx], 34h ; '4'
.text:004101B4                 inc     edx
.text:004101B5                 mov     byte ptr [edx], 30h ; '0'
.text:004101B8                 jmp     short loc_410181
.text:004101B8 ; ---------------------------------------------------------------------------
.text:004101BA                 align 10h
.text:004101C0
.text:004101C0 loc_4101C0:                             ; CODE XREF: ___addmntentstr+42↑j
.text:004101C0                                         ; ___addmntentstr+4A↑j ...
.text:004101C0                 test    al, al
.text:004101C2                 jz      loc_40FF80
.text:004101C8                 mov     ebx, [esp+4Ch+var_2C]
.text:004101CC                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:004101CF                 call    strlen
.text:004101D4                 lea     edx, ds:1[eax*4]
.text:004101DB                 mov     [esp+4Ch+Buffer], edx ; Size
.text:004101DE                 call    malloc
.text:004101E3                 mov     [esp+4Ch+var_2C], eax
.text:004101E7                 mov     edx, eax
.text:004101E9                 lea     esi, [esi+0]
.text:004101F0
.text:004101F0 loc_4101F0:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:004101F0                 movzx   eax, byte ptr [ebx]
.text:004101F3                 cmp     al, 20h ; ' '
.text:004101F5                 jz      short loc_410230
.text:004101F7                 cmp     al, 9
.text:004101F9                 jz      short loc_410218
.text:004101FB                 cmp     al, 5Ch ; '\'
.text:004101FD                 jz      short loc_41020F
.text:004101FF                 mov     [edx], al
.text:00410201
.text:00410201 loc_410201:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:00410201                                         ; ___addmntentstr+307↓j ...
.text:00410201                 movzx   ecx, byte ptr [ebx]
.text:00410204                 inc     edx
.text:00410205                 inc     ebx
.text:00410206                 test    cl, cl
.text:00410208                 jnz     short loc_4101F0
.text:0041020A                 jmp     loc_40FF80
.text:0041020F ; ---------------------------------------------------------------------------
.text:0041020F
.text:0041020F loc_41020F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0041020F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410212                 inc     edx
.text:00410213                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410216                 jmp     short loc_410201
.text:00410218 ; ---------------------------------------------------------------------------
.text:00410218
.text:00410218 loc_410218:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:00410218                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041021B                 inc     edx
.text:0041021C                 mov     byte ptr [edx], 30h ; '0'
.text:0041021F                 inc     edx
.text:00410220                 mov     byte ptr [edx], 31h ; '1'
.text:00410223                 inc     edx
.text:00410224                 mov     byte ptr [edx], 32h ; '2'
.text:00410227                 jmp     short loc_410201
.text:00410227 ; ---------------------------------------------------------------------------
.text:00410229                 align 10h
.text:00410230
.text:00410230 loc_410230:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:00410230                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410233                 inc     edx
.text:00410234                 mov     byte ptr [edx], 30h ; '0'
.text:00410237                 inc     edx
.text:00410238                 mov     byte ptr [edx], 34h ; '4'
.text:0041023B                 inc     edx
.text:0041023C                 mov     byte ptr [edx], 30h ; '0'
.text:0041023F                 jmp     short loc_410201
.text:00410241 ; ---------------------------------------------------------------------------
.text:00410241
.text:00410241 loc_410241:                             ; CODE XREF: ___addmntentstr+38↑j
.text:00410241                 movzx   eax, byte ptr [ecx]
.text:00410244                 jmp     loc_4101C0
.text:00410244 ___addmntentstr endp
.text:00410244
.text:00410244 ; ---------------------------------------------------------------------------
.text:00410249                 align 10h
.text:00410250
.text:00410250 ; =============== S U B R O U T I N E =======================================
.text:00410250
.text:00410250
.text:00410250 sub_410250      proc near               ; CODE XREF: sub_40D550+99↑p
.text:00410250
.text:00410250 nBufferLength   = dword ptr -1Ch
.text:00410250 lpBuffer        = dword ptr -18h
.text:00410250 dwBytes         = dword ptr -14h
.text:00410250 var_8           = dword ptr -8
.text:00410250 var_4           = dword ptr -4
.text:00410250
.text:00410250                 sub     esp, 1Ch
.text:00410253                 mov     [esp+1Ch+var_8], ebx
.text:00410257                 mov     [esp+1Ch+var_4], esi
.text:0041025B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:00410263                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0041026A                 call    GetLogicalDriveStringsA
.text:0041026F                 sub     esp, 8
.text:00410272                 mov     ebx, eax
.text:00410274                 call    GetProcessHeap
.text:00410279                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0041027C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:00410280                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:00410288                 call    HeapAlloc
.text:0041028D                 sub     esp, 0Ch
.text:00410290                 mov     esi, eax
.text:00410292                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:00410295                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:00410299                 call    GetLogicalDriveStringsA
.text:0041029E                 sub     esp, 8
.text:004102A1                 mov     eax, esi
.text:004102A3                 mov     ebx, [esp+1Ch+var_8]
.text:004102A7                 mov     esi, [esp+1Ch+var_4]
.text:004102AB                 add     esp, 1Ch
.text:004102AE                 retn
.text:004102AE sub_410250      endp
.text:004102AE
.text:004102AF
.text:004102AF ; =============== S U B R O U T I N E =======================================
.text:004102AF
.text:004102AF
.text:004102AF ; int __cdecl sub_4102AF(char *, char *)
.text:004102AF sub_4102AF      proc near               ; DATA XREF: sub_4102AF:loc_41033D↓o
.text:004102AF
.text:004102AF FileName        = dword ptr -1Ch
.text:004102AF Mode            = dword ptr -18h
.text:004102AF dwBytes         = dword ptr -14h
.text:004102AF arg_0           = dword ptr  4
.text:004102AF arg_4           = dword ptr  8
.text:004102AF
.text:004102AF                 ja      short $+2
.text:004102B1
.text:004102B1 loc_4102B1:                             ; CODE XREF: sub_4102AF↑j
.text:004102B1                 jmp     short loc_4102C0
.text:004102B1 ; ---------------------------------------------------------------------------
.text:004102B3                 align 10h
.text:004102C0
.text:004102C0 loc_4102C0:                             ; CODE XREF: sub_4102AF:loc_4102B1↑j
.text:004102C0                 push    edi
.text:004102C1                 push    esi
.text:004102C2                 push    ebx
.text:004102C3                 sub     esp, 10h
.text:004102C6                 mov     ebx, [esp+1Ch+arg_0]
.text:004102CA                 mov     edx, [esp+1Ch+arg_4]
.text:004102CE                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:004102D1                 mov     [esp+1Ch+Mode], edx ; Mode
.text:004102D5                 call    fopen
.text:004102DA                 test    eax, eax
.text:004102DC                 mov     edi, eax
.text:004102DE                 jz      short loc_41033D
.text:004102E0
.text:004102E0 loc_4102E0:                             ; CODE XREF: sub_4102AF+A2↓j
.text:004102E0                                         ; sub_4102AF+AB↓j
.text:004102E0                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:004102E8                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:004102EF                 call    GetLogicalDriveStringsA
.text:004102F4                 sub     esp, 8
.text:004102F7                 mov     esi, eax
.text:004102F9                 call    GetProcessHeap
.text:004102FE                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:00410301                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:00410305                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0041030D                 call    HeapAlloc
.text:00410312                 sub     esp, 0Ch
.text:00410315                 mov     ebx, eax
.text:00410317                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0041031A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0041031E                 call    GetLogicalDriveStringsA
.text:00410323                 mov     off_4140A4, ebx ; "notset"
.text:00410329                 sub     esp, 8
.text:0041032C                 xor     eax, eax
.text:0041032E                 test    ebx, ebx
.text:00410330                 setz    al
.text:00410333                 add     esp, 10h
.text:00410336                 pop     ebx
.text:00410337                 dec     eax
.text:00410338                 and     eax, edi
.text:0041033A                 pop     esi
.text:0041033B                 pop     edi
.text:0041033C                 retn
.text:0041033D ; ---------------------------------------------------------------------------
.text:0041033D
.text:0041033D loc_41033D:                             ; CODE XREF: sub_4102AF+2F↑j
.text:0041033D                 mov     [esp+1Ch+Mode], offset sub_4102AF ; Mode
.text:00410345                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:00410348                 call    fopen
.text:0041034D                 test    eax, eax
.text:0041034F                 mov     edi, eax
.text:00410351                 jnz     short loc_4102E0
.text:00410353                 call    sub_410690
.text:00410358                 mov     edi, eax
.text:0041035A                 jmp     short loc_4102E0
.text:0041035A sub_4102AF      endp
.text:0041035A
.text:0041035A ; ---------------------------------------------------------------------------
.text:0041035C                 align 10h
.text:00410360                 sub     esp, 0Ch
.text:00410363                 mov     eax, [esp+10h]
.text:00410367                 test    eax, eax
.text:00410369                 jz      short loc_410373
.text:0041036B                 mov     [esp], eax
.text:0041036E                 call    fclose
.text:00410373
.text:00410373 loc_410373:                             ; CODE XREF: .text:00410369↑j
.text:00410373                 call    GetProcessHeap
.text:00410378                 mov     [esp], eax
.text:0041037B                 mov     ecx, off_4140A4 ; "notset"
.text:00410381                 mov     dword ptr [esp+4], 0
.text:00410389                 mov     [esp+8], ecx
.text:0041038D                 call    HeapFree
.text:00410392                 mov     edx, off_4140A0 ; "notset"
.text:00410398                 sub     esp, 0Ch
.text:0041039B                 mov     eax, 1
.text:004103A0                 mov     off_4140A4, edx ; "notset"
.text:004103A6                 add     esp, 0Ch
.text:004103A9                 retn
.text:004103A9 ; ---------------------------------------------------------------------------
.text:004103AA                 align 10h
.text:004103B0                 push    edi
.text:004103B1                 push    esi
.text:004103B2                 push    ebx
.text:004103B3                 sub     esp, 10h
.text:004103B6                 mov     edi, [esp+24h]
.text:004103BA                 mov     [esp], edi
.text:004103BD                 call    strlen
.text:004103C2                 mov     edx, [esp+20h]
.text:004103C6                 mov     esi, eax
.text:004103C8                 mov     ebx, [edx+0Ch]
.text:004103CB                 nop
.text:004103CC                 lea     esi, [esi+0]
.text:004103D0
.text:004103D0 loc_4103D0:                             ; CODE XREF: .text:00410401↓j
.text:004103D0                 mov     [esp+4], edi
.text:004103D4                 mov     [esp], ebx
.text:004103D7                 call    strstr
.text:004103DC                 test    eax, eax
.text:004103DE                 jz      short loc_410403
.text:004103E0                 cmp     eax, ebx
.text:004103E2                 jz      short loc_410405
.text:004103E4                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:004103E8                 jz      short loc_410410
.text:004103EA
.text:004103EA loc_4103EA:                             ; CODE XREF: .text:00410420↓j
.text:004103EA                 mov     [esp], ebx
.text:004103ED                 mov     dword ptr [esp+4], 2Ch ; ','
.text:004103F5                 call    strchr
.text:004103FA                 test    eax, eax
.text:004103FC                 mov     ebx, eax
.text:004103FE                 jz      short loc_410403
.text:00410400                 inc     ebx
.text:00410401                 jmp     short loc_4103D0
.text:00410403 ; ---------------------------------------------------------------------------
.text:00410403
.text:00410403 loc_410403:                             ; CODE XREF: .text:004103DE↑j
.text:00410403                                         ; .text:004103FE↑j
.text:00410403                 xor     eax, eax
.text:00410405
.text:00410405 loc_410405:                             ; CODE XREF: .text:004103E2↑j
.text:00410405                                         ; .text:00410416↓j ...
.text:00410405                 add     esp, 10h
.text:00410408                 pop     ebx
.text:00410409                 pop     esi
.text:0041040A                 pop     edi
.text:0041040B                 retn
.text:0041040B ; ---------------------------------------------------------------------------
.text:0041040C                 align 10h
.text:00410410
.text:00410410 loc_410410:                             ; CODE XREF: .text:004103E8↑j
.text:00410410                 movzx   edx, byte ptr [esi+eax]
.text:00410414                 test    dl, dl
.text:00410416                 jz      short loc_410405
.text:00410418                 cmp     dl, 3Dh ; '='
.text:0041041B                 jz      short loc_410405
.text:0041041D                 cmp     dl, 2Ch ; ','
.text:00410420                 jnz     short loc_4103EA
.text:00410422                 jmp     short loc_410405
.text:00410422 ; ---------------------------------------------------------------------------
.text:00410424                 align 10h
.text:00410430
.text:00410430 ; =============== S U B R O U T I N E =======================================
.text:00410430
.text:00410430
.text:00410430 sub_410430      proc near               ; CODE XREF: sub_40E560+1A↑p
.text:00410430                                         ; sub_40E5C0+11F↑p
.text:00410430
.text:00410430 lpTimeZoneInformation= dword ptr -0DCh
.text:00410430 var_D8          = dword ptr -0D8h
.text:00410430 var_D4          = dword ptr -0D4h
.text:00410430 var_D0          = dword ptr -0D0h
.text:00410430 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:00410430 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:00410430 arg_0           = dword ptr  4
.text:00410430 arg_4           = dword ptr  8
.text:00410430
.text:00410430                 push    edi
.text:00410431                 push    esi
.text:00410432                 push    ebx
.text:00410433                 sub     esp, 0D0h
.text:00410439                 mov     ebx, [esp+0DCh+arg_4]
.text:00410440                 mov     edi, [esp+0DCh+arg_0]
.text:00410447                 test    ebx, ebx
.text:00410449                 jz      short loc_410474
.text:0041044B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0041044F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:00410452                 call    GetTimeZoneInformation
.text:00410457                 sub     esp, 4
.text:0041045A                 cmp     eax, 0FFFFFFFFh
.text:0041045D                 jz      loc_4104F5
.text:00410463                 xor     ecx, ecx
.text:00410465                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:00410469                 cmp     eax, 2
.text:0041046C                 setz    cl
.text:0041046F                 mov     [ebx], esi
.text:00410471                 mov     [ebx+4], ecx
.text:00410474
.text:00410474 loc_410474:                             ; CODE XREF: sub_410430+19↑j
.text:00410474                                         ; sub_410430+E0↓j
.text:00410474                 test    edi, edi
.text:00410476                 jz      short loc_4104E9
.text:00410478                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0041047C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0041047F                 call    GetSystemTimeAsFileTime
.text:00410484                 sub     esp, 4
.text:00410487                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0041048B                 mov     [esp+0DCh+var_D4], 989680h
.text:00410493                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:00410497                 mov     [esp+0DCh+var_D0], 0
.text:0041049F                 add     ebx, 2AC18000h
.text:004104A5                 adc     esi, 0FE624E21h
.text:004104AB                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:004104AF                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:004104B2                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:004104B6                 mov     [esp+0DCh+var_D8], esi
.text:004104BA                 call    sub_4129A0
.text:004104BF                 mov     [edi], eax
.text:004104C1                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:004104C4                 mov     [esp+0DCh+var_D4], 989680h
.text:004104CC                 mov     [esp+0DCh+var_D0], 0
.text:004104D4                 mov     [esp+0DCh+var_D8], esi
.text:004104D8                 call    sub_412E10
.text:004104DD                 lea     ebx, [eax+eax*4]
.text:004104E0                 lea     edx, [ebx+ebx*4]
.text:004104E3                 shl     edx, 2
.text:004104E6                 mov     [edi+4], edx
.text:004104E9
.text:004104E9 loc_4104E9:                             ; CODE XREF: sub_410430+46↑j
.text:004104E9                 add     esp, 0D0h
.text:004104EF                 xor     eax, eax
.text:004104F1                 pop     ebx
.text:004104F2                 pop     esi
.text:004104F3                 pop     edi
.text:004104F4                 retn
.text:004104F5 ; ---------------------------------------------------------------------------
.text:004104F5
.text:004104F5 loc_4104F5:                             ; CODE XREF: sub_410430+2D↑j
.text:004104F5                 mov     dword ptr [ebx], 0
.text:004104FB                 mov     dword ptr [ebx+4], 0
.text:00410502                 call    sub_40E990
.text:00410507                 mov     esi, eax
.text:00410509                 call    _errno
.text:0041050E                 mov     [eax], esi
.text:00410510                 jmp     loc_410474
.text:00410510 sub_410430      endp
.text:00410510
.text:00410510 ; ---------------------------------------------------------------------------
.text:00410515                 align 10h
.text:00410520
.text:00410520 ; =============== S U B R O U T I N E =======================================
.text:00410520
.text:00410520
.text:00410520 sub_410520      proc near               ; CODE XREF: sub_40E5C0:loc_40E6A6↑p
.text:00410520
.text:00410520 lpFrequency     = dword ptr -0Ch
.text:00410520 var_4           = dword ptr -4
.text:00410520
.text:00410520                 sub     esp, 0Ch
.text:00410523                 mov     edx, dword ptr ds:Frequency+4
.text:00410529                 mov     [esp+0Ch+var_4], ebx
.text:0041052D                 mov     eax, dword ptr ds:Frequency
.text:00410532                 mov     ebx, edx
.text:00410534                 or      ebx, eax
.text:00410536                 jz      short loc_410540
.text:00410538
.text:00410538 loc_410538:                             ; CODE XREF: sub_410520+3E↓j
.text:00410538                                         ; sub_410520+52↓j
.text:00410538                 mov     ebx, [esp+0Ch+var_4]
.text:0041053C                 add     esp, 0Ch
.text:0041053F                 retn
.text:00410540 ; ---------------------------------------------------------------------------
.text:00410540
.text:00410540 loc_410540:                             ; CODE XREF: sub_410520+16↑j
.text:00410540                 mov     [esp+0Ch+lpFrequency], offset Frequency ; lpFrequency
.text:00410547                 call    QueryPerformanceFrequency
.text:0041054C                 sub     esp, 4
.text:0041054F                 test    eax, eax
.text:00410551                 jz      short loc_410560
.text:00410553                 mov     eax, dword ptr ds:Frequency
.text:00410558                 mov     edx, dword ptr ds:Frequency+4
.text:0041055E                 jmp     short loc_410538
.text:00410560 ; ---------------------------------------------------------------------------
.text:00410560
.text:00410560 loc_410560:                             ; CODE XREF: sub_410520+31↑j
.text:00410560                 call    sub_40E990
.text:00410565                 mov     ebx, eax
.text:00410567                 call    _errno
.text:0041056C                 mov     [eax], ebx
.text:0041056E                 xor     edx, edx
.text:00410570                 xor     eax, eax
.text:00410572                 jmp     short loc_410538
.text:00410572 sub_410520      endp
.text:00410572
.text:00410572 ; ---------------------------------------------------------------------------
.text:00410574                 align 10h
.text:00410580
.text:00410580 ; =============== S U B R O U T I N E =======================================
.text:00410580
.text:00410580 ; Attributes: noreturn
.text:00410580
.text:00410580 sub_410580      proc near               ; CODE XREF: .text:0040FC19↑p
.text:00410580                                         ; sub_410580↓j
.text:00410580                 jmp     short sub_410580
.text:00410580 sub_410580      endp
.text:00410580
.text:00410580 ; ---------------------------------------------------------------------------
.text:00410582                 align 10h
.text:00410590
.text:00410590 ; =============== S U B R O U T I N E =======================================
.text:00410590
.text:00410590
.text:00410590 sub_410590      proc near               ; CODE XREF: .text:0040F975↑p
.text:00410590
.text:00410590 FileHandle      = dword ptr -1Ch
.text:00410590 dwFileOffsetLow = dword ptr -18h
.text:00410590 dwFileOffsetHigh= dword ptr -14h
.text:00410590 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:00410590 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:00410590 var_8           = dword ptr -8
.text:00410590 var_4           = dword ptr -4
.text:00410590 arg_0           = dword ptr  4
.text:00410590
.text:00410590                 sub     esp, 1Ch
.text:00410593                 mov     edx, [esp+1Ch+arg_0]
.text:00410597                 mov     [esp+1Ch+var_4], esi
.text:0041059B                 mov     [esp+1Ch+var_8], ebx
.text:0041059F                 mov     ebx, [edx+10h]
.text:004105A2                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:004105A5                 call    _get_osfhandle
.text:004105AA                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:004105AD                 mov     esi, eax
.text:004105AF                 call    _filelengthi64
.text:004105B4                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:004105B8                 cdq
.text:004105B9                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:004105BC                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:004105C0                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:004105C8                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:004105D0                 call    UnlockFile
.text:004105D5                 sub     esp, 14h
.text:004105D8                 mov     ebx, [esp+1Ch+var_8]
.text:004105DC                 mov     esi, [esp+1Ch+var_4]
.text:004105E0                 add     esp, 1Ch
.text:004105E3                 retn
.text:004105E3 sub_410590      endp
.text:004105E3
.text:004105E3 ; ---------------------------------------------------------------------------
.text:004105E4                 align 10h
.text:004105F0
.text:004105F0 ; =============== S U B R O U T I N E =======================================
.text:004105F0
.text:004105F0
.text:004105F0 ; int __cdecl sub_4105F0(int, char *Control)
.text:004105F0 sub_4105F0      proc near               ; CODE XREF: .text:0040F836↑p
.text:004105F0                                         ; .text:0040F886↑p ...
.text:004105F0
.text:004105F0 Str             = dword ptr -1Ch
.text:004105F0 Val             = dword ptr -18h
.text:004105F0 var_8           = dword ptr -8
.text:004105F0 var_4           = dword ptr -4
.text:004105F0 arg_0           = dword ptr  4
.text:004105F0 Control         = dword ptr  8
.text:004105F0
.text:004105F0                 sub     esp, 1Ch
.text:004105F3                 xor     eax, eax
.text:004105F5                 mov     edx, [esp+1Ch+Control]
.text:004105F9                 mov     [esp+1Ch+var_4], esi
.text:004105FD                 mov     esi, [esp+1Ch+arg_0]
.text:00410601                 mov     [esp+1Ch+var_8], ebx
.text:00410605                 mov     ebx, [esi]
.text:00410607                 test    ebx, ebx
.text:00410609                 jz      short loc_410638
.text:0041060B                 movzx   eax, byte ptr [edx]
.text:0041060E                 test    al, al
.text:00410610                 jz      short loc_410630
.text:00410612                 cmp     byte ptr [edx+1], 0
.text:00410616                 jnz     short loc_410670
.text:00410618                 movzx   ecx, byte ptr [ebx]
.text:0041061B                 mov     edx, ebx
.text:0041061D                 cmp     cl, al
.text:0041061F                 jz      short loc_410662
.text:00410621                 test    cl, cl
.text:00410623                 jnz     short loc_410644
.text:00410625                 lea     esi, [esi+0]
.text:00410629                 lea     edi, [edi+0]
.text:00410630
.text:00410630 loc_410630:                             ; CODE XREF: sub_4105F0+20↑j
.text:00410630                                         ; sub_4105F0+74↓j
.text:00410630                 mov     dword ptr [esi], 0
.text:00410636
.text:00410636 loc_410636:                             ; CODE XREF: sub_4105F0+7C↓j
.text:00410636                 mov     eax, ebx
.text:00410638
.text:00410638 loc_410638:                             ; CODE XREF: sub_4105F0+19↑j
.text:00410638                 mov     ebx, [esp+1Ch+var_8]
.text:0041063C                 mov     esi, [esp+1Ch+var_4]
.text:00410640                 add     esp, 1Ch
.text:00410643                 retn
.text:00410644 ; ---------------------------------------------------------------------------
.text:00410644
.text:00410644 loc_410644:                             ; CODE XREF: sub_4105F0+33↑j
.text:00410644                 movsx   edx, al
.text:00410647                 mov     [esp+1Ch+Val], edx ; Val
.text:0041064B                 lea     edx, [ebx+1]
.text:0041064E                 mov     [esp+1Ch+Str], edx ; Str
.text:00410651                 call    strchr
.text:00410656                 lea     esi, [esi+0]
.text:00410659                 lea     edi, [edi+0]
.text:00410660
.text:00410660 loc_410660:                             ; CODE XREF: sub_4105F0+8C↓j
.text:00410660                 mov     edx, eax
.text:00410662
.text:00410662 loc_410662:                             ; CODE XREF: sub_4105F0+2F↑j
.text:00410662                 test    edx, edx
.text:00410664                 jz      short loc_410630
.text:00410666                 mov     byte ptr [edx], 0
.text:00410669                 inc     edx
.text:0041066A                 mov     [esi], edx
.text:0041066C                 jmp     short loc_410636
.text:0041066C ; ---------------------------------------------------------------------------
.text:0041066E                 align 10h
.text:00410670
.text:00410670 loc_410670:                             ; CODE XREF: sub_4105F0+26↑j
.text:00410670                 mov     [esp+1Ch+Val], edx ; Control
.text:00410674                 mov     [esp+1Ch+Str], ebx ; Str
.text:00410677                 call    strpbrk
.text:0041067C                 jmp     short loc_410660
.text:0041067C sub_4105F0      endp
.text:0041067C
.text:0041067C ; ---------------------------------------------------------------------------
.text:0041067E                 align 10h
.text:00410680 ; const char aTmpf[]
.text:00410680 aTmpf           db 'tmpf',0             ; DATA XREF: sub_410690+20↓o
.text:00410685 ; const char aWBd[]
.text:00410685 aWBd            db 'w+bD',0             ; DATA XREF: sub_410690+5E↓o
.text:0041068A                 align 10h
.text:00410690
.text:00410690 ; =============== S U B R O U T I N E =======================================
.text:00410690
.text:00410690
.text:00410690 sub_410690      proc near               ; CODE XREF: sub_4102AF+A4↑p
.text:00410690
.text:00410690 FileHandle      = dword ptr -13Ch
.text:00410690 Format          = dword ptr -138h
.text:00410690 var_134         = dword ptr -134h
.text:00410690 var_130         = dword ptr -130h
.text:00410690 var_12C         = dword ptr -12Ch
.text:00410690 Buffer          = byte ptr -11Ch
.text:00410690 var_8           = dword ptr -8
.text:00410690 var_4           = dword ptr -4
.text:00410690
.text:00410690                 sub     esp, 13Ch
.text:00410696                 mov     [esp+13Ch+var_8], ebx
.text:0041069D                 lea     ebx, [esp+13Ch+Buffer]
.text:004106A1                 mov     [esp+13Ch+var_4], esi
.text:004106A8                 mov     [esp+13Ch+var_12C], 0 ; int
.text:004106B0                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:004106B8                 mov     [esp+13Ch+var_134], 0 ; char *
.text:004106C0                 mov     [esp+13Ch+Format], 104h ; int
.text:004106C8                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:004106CB                 call    sub_410760
.text:004106D0                 xor     edx, edx
.text:004106D2                 test    eax, eax
.text:004106D4                 jnz     short loc_410706
.text:004106D6                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:004106D9                 mov     [esp+13Ch+Format], 0 ; int
.text:004106E1                 call    sub_410AE0
.text:004106E6                 xor     edx, edx
.text:004106E8                 mov     ebx, eax
.text:004106EA                 test    eax, eax
.text:004106EC                 js      short loc_410706
.text:004106EE                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:004106F6                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:004106F9                 call    _fdopen
.text:004106FE                 test    eax, eax
.text:00410700                 mov     esi, eax
.text:00410702                 jz      short loc_41071D
.text:00410704
.text:00410704 loc_410704:                             ; CODE XREF: sub_410690+95↓j
.text:00410704                 mov     edx, esi
.text:00410706
.text:00410706 loc_410706:                             ; CODE XREF: sub_410690+44↑j
.text:00410706                                         ; sub_410690+5C↑j
.text:00410706                 mov     ebx, [esp+13Ch+var_8]
.text:0041070D                 mov     eax, edx
.text:0041070F                 mov     esi, [esp+13Ch+var_4]
.text:00410716                 add     esp, 13Ch
.text:0041071C                 retn
.text:0041071D ; ---------------------------------------------------------------------------
.text:0041071D
.text:0041071D loc_41071D:                             ; CODE XREF: sub_410690+72↑j
.text:0041071D                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:00410720                 call    _close_0
.text:00410725                 jmp     short loc_410704
.text:00410725 sub_410690      endp
.text:00410725
.text:00410725 ; ---------------------------------------------------------------------------
.text:00410727                 align 10h
.text:00410730 aFile           db 'file',0             ; DATA XREF: sub_410760:loc_41078C↓o
.text:00410735 ; const char aSSxxxxxx[]
.text:00410735 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_410760+9B↓o
.text:00410745 ; const char aTemp[]
.text:00410745 aTemp           db 'TEMP',0             ; DATA XREF: sub_410760:loc_410842↓o
.text:00410745                                         ; sub_410760:loc_410882↓o ...
.text:0041074A ; const char aTmp[]
.text:0041074A aTmp            db '/tmp',0             ; DATA XREF: sub_410760+12F↓o
.text:0041074A                                         ; sub_410760+141↓o ...
.text:0041074F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_410760:loc_410900↓o
.text:00410756 aTmp_0          db 'TMP',0              ; DATA XREF: sub_410760:loc_410990↓o
.text:0041075A                 align 10h
.text:00410760
.text:00410760 ; =============== S U B R O U T I N E =======================================
.text:00410760
.text:00410760
.text:00410760 ; int __cdecl sub_410760(char *Buffer, int, char *, char *, int)
.text:00410760 sub_410760      proc near               ; CODE XREF: sub_410690+3B↑p
.text:00410760
.text:00410760 Str             = dword ptr -1BCh
.text:00410760 Format          = dword ptr -1B8h
.text:00410760 var_1B4         = dword ptr -1B4h
.text:00410760 var_1B0         = dword ptr -1B0h
.text:00410760 var_1AC         = dword ptr -1ACh
.text:00410760 var_1A8         = dword ptr -1A8h
.text:00410760 var_19C         = dword ptr -19Ch
.text:00410760 var_13C         = dword ptr -13Ch
.text:00410760 var_DC          = dword ptr -0DCh
.text:00410760 var_7C          = dword ptr -7Ch
.text:00410760 Buffer          = dword ptr  4
.text:00410760 arg_4           = dword ptr  8
.text:00410760 arg_8           = dword ptr  0Ch
.text:00410760 arg_C           = dword ptr  10h
.text:00410760 arg_10          = dword ptr  14h
.text:00410760
.text:00410760                 push    ebp
.text:00410761                 push    edi
.text:00410762                 push    esi
.text:00410763                 push    ebx
.text:00410764                 sub     esp, 1ACh
.text:0041076A                 mov     eax, [esp+1BCh+arg_C]
.text:00410771                 mov     esi, [esp+1BCh+arg_8]
.text:00410778                 test    eax, eax
.text:0041077A                 jz      short loc_41078C
.text:0041077C                 mov     edx, [esp+1BCh+arg_C]
.text:00410783                 cmp     byte ptr [edx], 0
.text:00410786                 jnz     loc_4109C0
.text:0041078C
.text:0041078C loc_41078C:                             ; CODE XREF: sub_410760+1A↑j
.text:0041078C                 mov     eax, offset aFile ; "file"
.text:00410791                 mov     ebp, 4
.text:00410796                 mov     [esp+1BCh+arg_C], eax
.text:0041079D
.text:0041079D loc_41079D:                             ; CODE XREF: sub_410760+274↓j
.text:0041079D                                         ; sub_410760+27F↓j
.text:0041079D                 mov     ebx, [esp+1BCh+arg_10]
.text:004107A4                 test    ebx, ebx
.text:004107A6                 jnz     loc_410900
.text:004107AC
.text:004107AC loc_4107AC:                             ; CODE XREF: sub_410760+21C↓j
.text:004107AC                                         ; sub_410760+224↓j ...
.text:004107AC                 test    esi, esi
.text:004107AE                 jz      loc_410842
.text:004107B4
.text:004107B4 loc_4107B4:                             ; CODE XREF: sub_410760+176↓j
.text:004107B4                                         ; sub_410760+19A↓j
.text:004107B4                 mov     [esp+1BCh+Str], esi ; Str
.text:004107B7                 call    strlen
.text:004107BC                 test    eax, eax
.text:004107BE                 mov     edx, eax
.text:004107C0                 jz      short loc_4107D0
.text:004107C2                 movzx   eax, byte ptr [eax+esi-1]
.text:004107C7                 cmp     al, 2Fh ; '/'
.text:004107C9                 jz      short loc_410830
.text:004107CB                 cmp     al, 5Ch ; '\'
.text:004107CD                 jz      short loc_410830
.text:004107CF                 nop
.text:004107D0
.text:004107D0 loc_4107D0:                             ; CODE XREF: sub_410760+60↑j
.text:004107D0                                         ; sub_410760+D1↓j ...
.text:004107D0                 lea     edi, [ebp+edx+8]
.text:004107D4                 cmp     [esp+1BCh+arg_4], edi
.text:004107DB                 jb      short loc_410818
.text:004107DD                 mov     [esp+1BCh+var_1AC], ebp
.text:004107E1                 mov     ecx, [esp+1BCh+arg_C]
.text:004107E8                 mov     ebp, [esp+1BCh+Buffer]
.text:004107EF                 mov     [esp+1BCh+var_1B0], esi
.text:004107F3                 mov     [esp+1BCh+var_1A8], ecx
.text:004107F7                 mov     [esp+1BCh+var_1B4], edx
.text:004107FB                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:00410803                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:00410806                 call    sprintf
.text:0041080B                 xor     eax, eax
.text:0041080D
.text:0041080D loc_41080D:                             ; CODE XREF: sub_410760+C8↓j
.text:0041080D                 add     esp, 1ACh
.text:00410813                 pop     ebx
.text:00410814                 pop     esi
.text:00410815                 pop     edi
.text:00410816                 pop     ebp
.text:00410817                 retn
.text:00410818 ; ---------------------------------------------------------------------------
.text:00410818
.text:00410818 loc_410818:                             ; CODE XREF: sub_410760+7B↑j
.text:00410818                 call    _errno
.text:0041081D                 mov     dword ptr [eax], 16h
.text:00410823
.text:00410823 loc_410823:                             ; CODE XREF: sub_410760+187↓j
.text:00410823                 mov     eax, 0FFFFFFFFh
.text:00410828                 jmp     short loc_41080D
.text:00410828 ; ---------------------------------------------------------------------------
.text:0041082A                 align 10h
.text:00410830
.text:00410830 loc_410830:                             ; CODE XREF: sub_410760+69↑j
.text:00410830                                         ; sub_410760+6D↑j ...
.text:00410830                 dec     edx
.text:00410831                 jz      short loc_4107D0
.text:00410833                 movzx   eax, byte ptr [edx+esi-1]
.text:00410838                 cmp     al, 2Fh ; '/'
.text:0041083A                 jz      short loc_410830
.text:0041083C                 cmp     al, 5Ch ; '\'
.text:0041083E                 jz      short loc_410830
.text:00410840                 jmp     short loc_4107D0
.text:00410842 ; ---------------------------------------------------------------------------
.text:00410842
.text:00410842 loc_410842:                             ; CODE XREF: sub_410760+4E↑j
.text:00410842                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00410849                 lea     esi, [esp+1BCh+var_13C]
.text:00410850                 call    getenv
.text:00410855                 mov     [esp+1BCh+Format], eax ; char *
.text:00410859                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0041085D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00410864                 call    sub_411000
.text:00410869                 test    eax, eax
.text:0041086B                 jnz     short loc_410882
.text:0041086D                 mov     edi, [esp+1BCh+var_13C]
.text:00410874                 and     edi, 0F000h
.text:0041087A                 cmp     edi, 4000h
.text:00410880                 jz      short loc_4108EC
.text:00410882
.text:00410882 loc_410882:                             ; CODE XREF: sub_410760+10B↑j
.text:00410882                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00410889                 call    getenv
.text:0041088E                 cld
.text:0041088F                 mov     edx, offset aTmp ; "/tmp"
.text:00410894                 mov     esi, eax
.text:00410896                 mov     ecx, 5
.text:0041089B                 mov     edi, edx
.text:0041089D                 repe cmpsb
.text:0041089F                 jz      short loc_4108DC
.text:004108A1                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:004108A9                 lea     ecx, [esp+1BCh+var_19C]
.text:004108AD                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:004108B1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:004108B8                 call    sub_411000
.text:004108BD                 test    eax, eax
.text:004108BF                 jnz     short loc_4108DC
.text:004108C1                 mov     ebx, [esp+1BCh+var_19C]
.text:004108C5                 mov     esi, offset aTmp ; "/tmp"
.text:004108CA                 and     ebx, 0F000h
.text:004108D0                 cmp     ebx, 4000h
.text:004108D6                 jz      loc_4107B4
.text:004108DC
.text:004108DC loc_4108DC:                             ; CODE XREF: sub_410760+13F↑j
.text:004108DC                                         ; sub_410760+15F↑j
.text:004108DC                 call    _errno
.text:004108E1                 mov     dword ptr [eax], 2
.text:004108E7                 jmp     loc_410823
.text:004108EC ; ---------------------------------------------------------------------------
.text:004108EC
.text:004108EC loc_4108EC:                             ; CODE XREF: sub_410760+120↑j
.text:004108EC                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:004108F3                 call    getenv
.text:004108F8                 mov     esi, eax
.text:004108FA                 jmp     loc_4107B4
.text:004108FA ; ---------------------------------------------------------------------------
.text:004108FF                 align 10h
.text:00410900
.text:00410900 loc_410900:                             ; CODE XREF: sub_410760+46↑j
.text:00410900                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:00410907                 call    sub_410F90
.text:0041090C                 test    eax, eax
.text:0041090E                 mov     ebx, eax
.text:00410910                 jz      short loc_410990
.text:00410912
.text:00410912 loc_410912:                             ; CODE XREF: sub_410760+240↓j
.text:00410912                                         ; sub_410760+256↓j
.text:00410912                 mov     [esp+1BCh+Format], ebx ; char *
.text:00410916                 lea     edi, [esp+1BCh+var_7C]
.text:0041091D                 mov     [esp+1BCh+var_1B4], edi ; int
.text:00410921                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00410928                 call    sub_411000
.text:0041092D                 test    eax, eax
.text:0041092F                 jnz     short loc_410946
.text:00410931                 mov     edx, [esp+1BCh+var_7C]
.text:00410938                 and     edx, 0F000h
.text:0041093E                 cmp     edx, 4000h
.text:00410944                 jz      short loc_410989
.text:00410946
.text:00410946 loc_410946:                             ; CODE XREF: sub_410760+1CF↑j
.text:00410946                                         ; sub_410760+25C↓j
.text:00410946                 test    esi, esi
.text:00410948                 jz      short loc_410982
.text:0041094A                 mov     [esp+1BCh+Format], esi ; char *
.text:0041094E                 lea     ecx, [esp+1BCh+var_DC]
.text:00410955                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00410959                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00410960                 call    sub_411000
.text:00410965                 test    eax, eax
.text:00410967                 jnz     short loc_410982
.text:00410969                 mov     ebx, [esp+1BCh+var_DC]
.text:00410970                 and     ebx, 0F000h
.text:00410976                 cmp     ebx, 4000h
.text:0041097C                 jz      loc_4107AC
.text:00410982
.text:00410982 loc_410982:                             ; CODE XREF: sub_410760+1E8↑j
.text:00410982                                         ; sub_410760+207↑j
.text:00410982                 xor     esi, esi
.text:00410984                 jmp     loc_4107AC
.text:00410989 ; ---------------------------------------------------------------------------
.text:00410989
.text:00410989 loc_410989:                             ; CODE XREF: sub_410760+1E4↑j
.text:00410989                 mov     esi, ebx
.text:0041098B                 jmp     loc_4107AC
.text:00410990 ; ---------------------------------------------------------------------------
.text:00410990
.text:00410990 loc_410990:                             ; CODE XREF: sub_410760+1B0↑j
.text:00410990                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:00410997                 call    sub_410F90
.text:0041099C                 test    eax, eax
.text:0041099E                 mov     ebx, eax
.text:004109A0                 jnz     loc_410912
.text:004109A6                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:004109AD                 call    sub_410F90
.text:004109B2                 test    eax, eax
.text:004109B4                 mov     ebx, eax
.text:004109B6                 jnz     loc_410912
.text:004109BC                 jmp     short loc_410946
.text:004109BC ; ---------------------------------------------------------------------------
.text:004109BE                 align 10h
.text:004109C0
.text:004109C0 loc_4109C0:                             ; CODE XREF: sub_410760+26↑j
.text:004109C0                 mov     ecx, [esp+1BCh+arg_C]
.text:004109C7                 mov     [esp+1BCh+Str], ecx ; Str
.text:004109CA                 call    strlen
.text:004109CF                 cmp     eax, 5
.text:004109D2                 mov     ebp, eax
.text:004109D4                 jbe     loc_41079D
.text:004109DA                 mov     ebp, 5
.text:004109DF                 jmp     loc_41079D
.text:004109DF sub_410760      endp
.text:004109DF
.text:004109DF ; ---------------------------------------------------------------------------
.text:004109E4                 align 10h
.text:004109F0 byte_4109F0     db 61h                  ; DATA XREF: sub_410AE0+DC↓r
.text:004109F0                                         ; sub_410AE0+122↓r ...
.text:004109F1 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:00410A2F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_410AE0+39↓o
.text:00410A36                 db 1Ah dup(90h)
.text:00410A50 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:00410A50                                         ; DATA XREF: sub_410AE0:loc_410D58↓o
.text:00410A6F                 align 10h
.text:00410A70 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:00410A70                                         ; DATA XREF: sub_410AE0+405↓o
.text:00410A9B                 db 15h dup(90h)
.text:00410AB0 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:00410AB0                                         ; DATA XREF: sub_410AE0+40D↓o
.text:00410AD3                 align 10h
.text:00410AE0
.text:00410AE0 ; =============== S U B R O U T I N E =======================================
.text:00410AE0
.text:00410AE0
.text:00410AE0 ; int __cdecl sub_410AE0(char *FileName, int)
.text:00410AE0 sub_410AE0      proc near               ; CODE XREF: sub_410690+51↑p
.text:00410AE0
.text:00410AE0 Str             = dword ptr -9Ch
.text:00410AE0 OpenFlag        = dword ptr -98h
.text:00410AE0 var_94          = dword ptr -94h
.text:00410AE0 var_90          = dword ptr -90h
.text:00410AE0 var_8C          = dword ptr -8Ch
.text:00410AE0 var_88          = dword ptr -88h
.text:00410AE0 var_84          = dword ptr -84h
.text:00410AE0 var_80          = dword ptr -80h
.text:00410AE0 var_7C          = dword ptr -7Ch
.text:00410AE0 FileName        = dword ptr  4
.text:00410AE0 arg_4           = dword ptr  8
.text:00410AE0
.text:00410AE0                 push    ebp
.text:00410AE1                 push    edi
.text:00410AE2                 push    esi
.text:00410AE3                 push    ebx
.text:00410AE4                 sub     esp, 8Ch
.text:00410AEA                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:00410AF2                 call    _errno
.text:00410AF7                 mov     edx, [eax]
.text:00410AF9                 mov     [esp+9Ch+var_8C], edx
.text:00410AFD                 mov     edx, [esp+9Ch+FileName]
.text:00410B04                 mov     [esp+9Ch+Str], edx ; Str
.text:00410B07                 call    strlen
.text:00410B0C                 cmp     eax, 5
.text:00410B0F                 jle     short loc_410B2D
.text:00410B11                 cld
.text:00410B12                 mov     ecx, [esp+9Ch+FileName]
.text:00410B19                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:00410B1E                 lea     esi, [eax+ecx-6]
.text:00410B22                 mov     ecx, 7
.text:00410B27                 mov     ebp, esi
.text:00410B29                 repe cmpsb
.text:00410B2B                 jz      short loc_410B48
.text:00410B2D
.text:00410B2D loc_410B2D:                             ; CODE XREF: sub_410AE0+2F↑j
.text:00410B2D                 call    _errno
.text:00410B32                 mov     dword ptr [eax], 16h
.text:00410B38
.text:00410B38 loc_410B38:                             ; CODE XREF: sub_410AE0+295↓j
.text:00410B38                                         ; sub_410AE0+2D8↓j ...
.text:00410B38                 mov     eax, 0FFFFFFFFh
.text:00410B3D
.text:00410B3D loc_410B3D:                             ; CODE XREF: sub_410AE0+2EF↓j
.text:00410B3D                                         ; sub_410AE0+332↓j
.text:00410B3D                 add     esp, 8Ch
.text:00410B43                 pop     ebx
.text:00410B44                 pop     esi
.text:00410B45                 pop     edi
.text:00410B46                 pop     ebp
.text:00410B47                 retn
.text:00410B48 ; ---------------------------------------------------------------------------
.text:00410B48
.text:00410B48 loc_410B48:                             ; CODE XREF: sub_410AE0+4B↑j
.text:00410B48                 mov     ecx, ds:dword_4157C4
.text:00410B4E                 mov     edi, ds:dword_4157C0
.text:00410B54                 mov     eax, ecx
.text:00410B56                 or      eax, edi
.text:00410B58                 jz      loc_410E93
.text:00410B5E
.text:00410B5E loc_410B5E:                             ; CODE XREF: sub_410AE0+3F8↓j
.text:00410B5E                 rdtsc
.text:00410B60                 mov     edi, edx
.text:00410B62                 mov     esi, eax
.text:00410B64                 call    _getpid
.text:00410B69                 mov     ebx, eax
.text:00410B6B                 mov     edx, esi
.text:00410B6D                 sar     ebx, 1Fh
.text:00410B70                 xor     edx, eax
.text:00410B72                 mov     ecx, edi
.text:00410B74                 xor     ecx, ebx
.text:00410B76                 mov     ebx, edx
.text:00410B78                 mov     esi, ecx
.text:00410B7A                 add     ebx, ds:dword_4157C0
.text:00410B80                 adc     esi, ds:dword_4157C4
.text:00410B86                 xor     edi, edi
.text:00410B88                 mov     ds:dword_4157C0, ebx
.text:00410B8E                 mov     ds:dword_4157C4, esi
.text:00410B94                 lea     esi, [esi+0]
.text:00410B9A                 lea     edi, [edi+0]
.text:00410BA0
.text:00410BA0 loc_410BA0:                             ; CODE XREF: sub_410AE0+2C7↓j
.text:00410BA0                 mov     [esp+9Ch+Str], ebx
.text:00410BA3                 mov     [esp+9Ch+OpenFlag], esi
.text:00410BA7                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410BAF                 mov     [esp+9Ch+var_90], 0
.text:00410BB7                 call    sub_412E10
.text:00410BBC                 movzx   ecx, ds:byte_4109F0[eax]
.text:00410BC3                 mov     [ebp+0], cl
.text:00410BC6                 mov     [esp+9Ch+Str], ebx
.text:00410BC9                 mov     [esp+9Ch+OpenFlag], esi
.text:00410BCD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410BD5                 mov     [esp+9Ch+var_90], 0
.text:00410BDD                 call    sub_4129A0
.text:00410BE2                 mov     [esp+9Ch+Str], eax
.text:00410BE5                 mov     ebx, eax
.text:00410BE7                 mov     esi, edx
.text:00410BE9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410BF1                 mov     [esp+9Ch+var_90], 0
.text:00410BF9                 mov     [esp+9Ch+OpenFlag], edx
.text:00410BFD                 call    sub_412E10
.text:00410C02                 movzx   edx, ds:byte_4109F0[eax]
.text:00410C09                 mov     [ebp+1], dl
.text:00410C0C                 mov     [esp+9Ch+Str], ebx
.text:00410C0F                 mov     [esp+9Ch+OpenFlag], esi
.text:00410C13                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410C1B                 mov     [esp+9Ch+var_90], 0
.text:00410C23                 call    sub_4129A0
.text:00410C28                 mov     [esp+9Ch+Str], eax
.text:00410C2B                 mov     ebx, eax
.text:00410C2D                 mov     esi, edx
.text:00410C2F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410C37                 mov     [esp+9Ch+var_90], 0
.text:00410C3F                 mov     [esp+9Ch+OpenFlag], edx
.text:00410C43                 call    sub_412E10
.text:00410C48                 movzx   ecx, ds:byte_4109F0[eax]
.text:00410C4F                 mov     [ebp+2], cl
.text:00410C52                 mov     [esp+9Ch+Str], ebx
.text:00410C55                 mov     [esp+9Ch+OpenFlag], esi
.text:00410C59                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410C61                 mov     [esp+9Ch+var_90], 0
.text:00410C69                 call    sub_4129A0
.text:00410C6E                 mov     [esp+9Ch+Str], eax
.text:00410C71                 mov     ebx, eax
.text:00410C73                 mov     esi, edx
.text:00410C75                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410C7D                 mov     [esp+9Ch+var_90], 0
.text:00410C85                 mov     [esp+9Ch+OpenFlag], edx
.text:00410C89                 call    sub_412E10
.text:00410C8E                 movzx   edx, ds:byte_4109F0[eax]
.text:00410C95                 mov     [ebp+3], dl
.text:00410C98                 mov     [esp+9Ch+Str], ebx
.text:00410C9B                 mov     [esp+9Ch+OpenFlag], esi
.text:00410C9F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410CA7                 mov     [esp+9Ch+var_90], 0
.text:00410CAF                 call    sub_4129A0
.text:00410CB4                 mov     [esp+9Ch+Str], eax
.text:00410CB7                 mov     ebx, eax
.text:00410CB9                 mov     esi, edx
.text:00410CBB                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410CC3                 mov     [esp+9Ch+var_90], 0
.text:00410CCB                 mov     [esp+9Ch+OpenFlag], edx
.text:00410CCF                 call    sub_412E10
.text:00410CD4                 movzx   ecx, ds:byte_4109F0[eax]
.text:00410CDB                 mov     [ebp+4], cl
.text:00410CDE                 mov     [esp+9Ch+Str], ebx
.text:00410CE1                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410CE9                 mov     [esp+9Ch+var_90], 0
.text:00410CF1                 mov     [esp+9Ch+OpenFlag], esi
.text:00410CF5                 call    sub_4129A0
.text:00410CFA                 mov     [esp+9Ch+Str], eax
.text:00410CFD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410D05                 mov     [esp+9Ch+var_90], 0
.text:00410D0D                 mov     [esp+9Ch+OpenFlag], edx
.text:00410D11                 call    sub_412E10
.text:00410D16                 movzx   ebx, ds:byte_4109F0[eax]
.text:00410D1D                 mov     [ebp+5], bl
.text:00410D20                 cmp     [esp+9Ch+arg_4], 1
.text:00410D28                 jz      loc_410E77
.text:00410D2E                 cmp     [esp+9Ch+arg_4], 1
.text:00410D36                 jle     loc_410E40
.text:00410D3C                 cmp     [esp+9Ch+arg_4], 2
.text:00410D44                 jz      loc_410E17
.text:00410D4A                 cmp     [esp+9Ch+arg_4], 3
.text:00410D52                 jz      loc_410DD4
.text:00410D58
.text:00410D58 loc_410D58:                             ; CODE XREF: sub_410AE0+369↓j
.text:00410D58                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:00410D5D                 test    ebx, ebx
.text:00410D5F                 jnz     loc_410EDD
.text:00410D65
.text:00410D65 loc_410D65:                             ; CODE XREF: sub_410AE0+354↓j
.text:00410D65                 mov     eax, [esp+9Ch+var_88]
.text:00410D69                 test    eax, eax
.text:00410D6B                 jns     short loc_410DC0
.text:00410D6D                 call    _errno
.text:00410D72                 cmp     dword ptr [eax], 11h
.text:00410D75                 jnz     loc_410B38
.text:00410D7B
.text:00410D7B loc_410D7B:                             ; CODE XREF: sub_410AE0+315↓j
.text:00410D7B                 mov     edx, ds:dword_4157C0
.text:00410D81                 mov     ecx, ds:dword_4157C4
.text:00410D87                 add     edx, 1E61h
.text:00410D8D                 adc     ecx, 0
.text:00410D90                 mov     ebx, edx
.text:00410D92                 inc     edi
.text:00410D93                 mov     ds:dword_4157C0, edx
.text:00410D99                 cmp     edi, 3A2F8h
.text:00410D9F                 mov     esi, ecx
.text:00410DA1                 mov     ds:dword_4157C4, ecx
.text:00410DA7                 jb      loc_410BA0
.text:00410DAD                 call    _errno
.text:00410DB2                 mov     dword ptr [eax], 11h
.text:00410DB8                 jmp     loc_410B38
.text:00410DB8 ; ---------------------------------------------------------------------------
.text:00410DBD                 align 10h
.text:00410DC0
.text:00410DC0 loc_410DC0:                             ; CODE XREF: sub_410AE0+28B↑j
.text:00410DC0                 call    _errno
.text:00410DC5                 mov     esi, [esp+9Ch+var_8C]
.text:00410DC9                 mov     [eax], esi
.text:00410DCB                 mov     eax, [esp+9Ch+var_88]
.text:00410DCF                 jmp     loc_410B3D
.text:00410DD4 ; ---------------------------------------------------------------------------
.text:00410DD4
.text:00410DD4 loc_410DD4:                             ; CODE XREF: sub_410AE0+272↑j
.text:00410DD4                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:00410DDB                 mov     ecx, [esp+9Ch+FileName]
.text:00410DE2                 lea     esi, [esp+9Ch+var_7C]
.text:00410DE6                 mov     [esp+9Ch+var_94], esi ; int
.text:00410DEA                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:00410DEE                 call    sub_410FB0
.text:00410DF3                 test    eax, eax
.text:00410DF5                 jns     short loc_410D7B
.text:00410DF7                 call    _errno
.text:00410DFC                 cmp     dword ptr [eax], 2
.text:00410DFF                 jnz     loc_410B38
.text:00410E05                 call    _errno
.text:00410E0A                 mov     ebx, [esp+9Ch+var_8C]
.text:00410E0E                 mov     [eax], ebx
.text:00410E10                 xor     eax, eax
.text:00410E12                 jmp     loc_410B3D
.text:00410E17 ; ---------------------------------------------------------------------------
.text:00410E17
.text:00410E17 loc_410E17:                             ; CODE XREF: sub_410AE0+264↑j
.text:00410E17                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:00410E1F                 mov     edx, [esp+9Ch+FileName]
.text:00410E26                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:00410E29                 call    sub_410F10
.text:00410E2E                 mov     esi, esi
.text:00410E30
.text:00410E30 loc_410E30:                             ; CODE XREF: sub_410AE0+395↓j
.text:00410E30                 mov     [esp+9Ch+var_88], eax
.text:00410E34                 jmp     loc_410D65
.text:00410E34 ; ---------------------------------------------------------------------------
.text:00410E39                 align 10h
.text:00410E40
.text:00410E40 loc_410E40:                             ; CODE XREF: sub_410AE0+256↑j
.text:00410E40                 mov     eax, [esp+9Ch+arg_4]
.text:00410E47                 test    eax, eax
.text:00410E49                 jnz     loc_410D58
.text:00410E4F                 mov     [esp+9Ch+var_94], 180h
.text:00410E57                 mov     esi, [esp+9Ch+FileName]
.text:00410E5E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:00410E66                 mov     [esp+9Ch+Str], esi ; FileName
.text:00410E69                 lea     esi, [esi+0]
.text:00410E70
.text:00410E70 loc_410E70:                             ; CODE XREF: sub_410AE0+3B1↓j
.text:00410E70                 call    _open_0
.text:00410E75                 jmp     short loc_410E30
.text:00410E77 ; ---------------------------------------------------------------------------
.text:00410E77
.text:00410E77 loc_410E77:                             ; CODE XREF: sub_410AE0+248↑j
.text:00410E77                 mov     [esp+9Ch+var_94], 180h
.text:00410E7F                 mov     ebx, [esp+9Ch+FileName]
.text:00410E86                 mov     [esp+9Ch+OpenFlag], 8502h
.text:00410E8E                 mov     [esp+9Ch+Str], ebx
.text:00410E91                 jmp     short loc_410E70
.text:00410E93 ; ---------------------------------------------------------------------------
.text:00410E93
.text:00410E93 loc_410E93:                             ; CODE XREF: sub_410AE0+78↑j
.text:00410E93                 mov     [esp+9Ch+OpenFlag], 0
.text:00410E9B                 lea     ebx, [esp+9Ch+var_84]
.text:00410E9F                 mov     [esp+9Ch+Str], ebx
.text:00410EA2                 call    sub_40E560
.text:00410EA7                 mov     edi, [esp+9Ch+var_80]
.text:00410EAB                 mov     edx, [esp+9Ch+var_84]
.text:00410EAF                 mov     ecx, edi
.text:00410EB1                 mov     ebx, edi
.text:00410EB3                 shl     ecx, 10h
.text:00410EB6                 sar     ebx, 1Fh
.text:00410EB9                 shld    ebx, edi, 10h
.text:00410EBD                 mov     esi, edx
.text:00410EBF                 mov     edi, edx
.text:00410EC1                 mov     edx, ecx
.text:00410EC3                 sar     edi, 1Fh
.text:00410EC6                 xor     edx, esi
.text:00410EC8                 mov     ds:dword_4157C0, edx
.text:00410ECE                 mov     esi, ebx
.text:00410ED0                 xor     esi, edi
.text:00410ED2                 mov     ds:dword_4157C4, esi
.text:00410ED8                 jmp     loc_410B5E
.text:00410EDD ; ---------------------------------------------------------------------------
.text:00410EDD
.text:00410EDD loc_410EDD:                             ; CODE XREF: sub_410AE0+27F↑j
.text:00410EDD                 mov     [esp+9Ch+var_94], 151h
.text:00410EE5                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:00410EED                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:00410EF4                 call    _assert
.text:00410EF4 sub_410AE0      endp
.text:00410EF4
.text:00410EF4 ; ---------------------------------------------------------------------------
.text:00410EF9                 db 17h dup(90h)
.text:00410F10
.text:00410F10 ; =============== S U B R O U T I N E =======================================
.text:00410F10
.text:00410F10
.text:00410F10 ; int __cdecl sub_410F10(LPCSTR, int AccessMode)
.text:00410F10 sub_410F10      proc near               ; CODE XREF: sub_410AE0+349↑p
.text:00410F10
.text:00410F10 lpPathName      = dword ptr -1Ch
.text:00410F10 lpSecurityAttributes= dword ptr -18h
.text:00410F10 var_8           = dword ptr -8
.text:00410F10 var_4           = dword ptr -4
.text:00410F10 arg_0           = dword ptr  4
.text:00410F10 AccessMode      = dword ptr  8
.text:00410F10
.text:00410F10                 sub     esp, 1Ch
.text:00410F13                 mov     [esp+1Ch+var_8], ebx
.text:00410F17                 mov     ebx, [esp+1Ch+arg_0]
.text:00410F1B                 mov     [esp+1Ch+var_4], esi
.text:00410F1F                 mov     esi, [esp+1Ch+AccessMode]
.text:00410F23                 test    ebx, ebx
.text:00410F25                 jz      short loc_410F75
.text:00410F27                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00410F2F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:00410F32                 call    CreateDirectoryA
.text:00410F37                 sub     esp, 8
.text:00410F3A                 test    eax, eax
.text:00410F3C                 jz      short loc_410F56
.text:00410F3E                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:00410F42                 mov     esi, [esp+1Ch+var_4]
.text:00410F46                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:00410F4A                 mov     ebx, [esp+1Ch+var_8]
.text:00410F4E                 add     esp, 1Ch
.text:00410F51                 jmp     _chmod
.text:00410F56 ; ---------------------------------------------------------------------------
.text:00410F56
.text:00410F56 loc_410F56:                             ; CODE XREF: sub_410F10+2C↑j
.text:00410F56                 call    sub_40E990
.text:00410F5B                 mov     esi, eax
.text:00410F5D                 call    _errno
.text:00410F62                 mov     [eax], esi
.text:00410F64
.text:00410F64 loc_410F64:                             ; CODE XREF: sub_410F10+70↓j
.text:00410F64                 mov     ebx, [esp+1Ch+var_8]
.text:00410F68                 mov     eax, 0FFFFFFFFh
.text:00410F6D                 mov     esi, [esp+1Ch+var_4]
.text:00410F71                 add     esp, 1Ch
.text:00410F74                 retn
.text:00410F75 ; ---------------------------------------------------------------------------
.text:00410F75
.text:00410F75 loc_410F75:                             ; CODE XREF: sub_410F10+15↑j
.text:00410F75                 call    _errno
.text:00410F7A                 mov     dword ptr [eax], 16h
.text:00410F80                 jmp     short loc_410F64
.text:00410F80 sub_410F10      endp
.text:00410F80
.text:00410F80 ; ---------------------------------------------------------------------------
.text:00410F82                 align 10h
.text:00410F90
.text:00410F90 ; =============== S U B R O U T I N E =======================================
.text:00410F90
.text:00410F90
.text:00410F90 sub_410F90      proc near               ; CODE XREF: sub_410760+1A7↑p
.text:00410F90                                         ; sub_410760+237↑p ...
.text:00410F90                 mov     edx, ds:dword_4157D0
.text:00410F96                 test    edx, edx
.text:00410F98                 jnz     short loc_410FA0
.text:00410F9A                 jmp     getenv
.text:00410F9A ; ---------------------------------------------------------------------------
.text:00410F9F                 align 10h
.text:00410FA0
.text:00410FA0 loc_410FA0:                             ; CODE XREF: sub_410F90+8↑j
.text:00410FA0                 xor     eax, eax
.text:00410FA2                 retn
.text:00410FA2 sub_410F90      endp
.text:00410FA2
.text:00410FA2 ; ---------------------------------------------------------------------------
.text:00410FA3                 align 10h
.text:00410FB0
.text:00410FB0 ; =============== S U B R O U T I N E =======================================
.text:00410FB0
.text:00410FB0
.text:00410FB0 ; int __cdecl sub_410FB0(LPCSTR, int, int)
.text:00410FB0 sub_410FB0      proc near               ; CODE XREF: sub_410AE0+30E↑p
.text:00410FB0                                         ; sub_411000+42↓p ...
.text:00410FB0
.text:00410FB0 lpFileName      = dword ptr -2Ch
.text:00410FB0 dwDesiredAccess = dword ptr -28h
.text:00410FB0 dwShareMode     = dword ptr -24h
.text:00410FB0 lpSecurityAttributes= dword ptr -20h
.text:00410FB0 dwCreationDisposition= dword ptr -1Ch
.text:00410FB0 dwFlagsAndAttributes= dword ptr -18h
.text:00410FB0 hTemplateFile   = dword ptr -14h
.text:00410FB0 var_10          = dword ptr -10h
.text:00410FB0 var_C           = dword ptr -0Ch
.text:00410FB0 var_8           = dword ptr -8
.text:00410FB0 var_4           = dword ptr -4
.text:00410FB0 arg_0           = dword ptr  4
.text:00410FB0 arg_4           = dword ptr  8
.text:00410FB0 arg_8           = dword ptr  0Ch
.text:00410FB0
.text:00410FB0 ; FUNCTION CHUNK AT .text:0040CA70 SIZE 0000013A BYTES
.text:00410FB0
.text:00410FB0                 sub     esp, 0Ch
.text:00410FB3                 mov     ecx, [esp+0Ch+arg_0]
.text:00410FB7                 mov     edx, [esp+0Ch+arg_4]
.text:00410FBB                 mov     eax, [esp+0Ch+arg_8]
.text:00410FBF                 test    ecx, ecx
.text:00410FC1                 jnz     short loc_410FE0
.text:00410FC3                 test    edx, edx
.text:00410FC5                 jz      short loc_410FE0
.text:00410FC7                 test    eax, eax
.text:00410FC9                 jz      short loc_410FE0
.text:00410FCB                 mov     [esp+0Ch+arg_4], eax
.text:00410FCF                 mov     [esp+0Ch+arg_0], edx
.text:00410FD3                 add     esp, 0Ch
.text:00410FD6                 jmp     loc_40CA70
.text:00410FD6 ; ---------------------------------------------------------------------------
.text:00410FDB                 align 10h
.text:00410FE0
.text:00410FE0 loc_410FE0:                             ; CODE XREF: sub_410FB0+11↑j
.text:00410FE0                                         ; sub_410FB0+15↑j ...
.text:00410FE0                 call    _errno
.text:00410FE5                 mov     dword ptr [eax], 16h
.text:00410FEB                 mov     eax, 0FFFFFFFFh
.text:00410FF0                 add     esp, 0Ch
.text:00410FF3                 retn
.text:00410FF3 sub_410FB0      endp
.text:00410FF3
.text:00410FF3 ; ---------------------------------------------------------------------------
.text:00410FF4                 align 10h
.text:00411000
.text:00411000 ; =============== S U B R O U T I N E =======================================
.text:00411000
.text:00411000
.text:00411000 ; int __cdecl sub_411000(LPCSTR, char *, int)
.text:00411000 sub_411000      proc near               ; CODE XREF: sub_410760+104↑p
.text:00411000                                         ; sub_410760+158↑p ...
.text:00411000
.text:00411000 var_13C         = dword ptr -13Ch
.text:00411000 lpString1       = dword ptr -138h
.text:00411000 var_134         = dword ptr -134h
.text:00411000 String1         = byte ptr -12Ch
.text:00411000 var_10          = dword ptr -10h
.text:00411000 var_C           = dword ptr -0Ch
.text:00411000 var_8           = dword ptr -8
.text:00411000 var_4           = dword ptr -4
.text:00411000 arg_0           = dword ptr  4
.text:00411000 arg_4           = dword ptr  8
.text:00411000 arg_8           = dword ptr  0Ch
.text:00411000
.text:00411000                 sub     esp, 13Ch
.text:00411006                 mov     [esp+13Ch+var_10], ebx
.text:0041100D                 mov     ebx, [esp+13Ch+arg_8]
.text:00411014                 mov     [esp+13Ch+var_C], esi
.text:0041101B                 mov     esi, [esp+13Ch+arg_4]
.text:00411022                 mov     [esp+13Ch+var_8], edi
.text:00411029                 mov     edi, [esp+13Ch+arg_0]
.text:00411030                 mov     [esp+13Ch+var_4], ebp
.text:00411037                 mov     [esp+13Ch+var_134], ebx ; int
.text:0041103B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0041103F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:00411042                 call    sub_410FB0
.text:00411047                 cmp     eax, 0FFFFFFFFh
.text:0041104A                 mov     edx, eax
.text:0041104C                 jz      short loc_41105E
.text:0041104E                 mov     ecx, [ebx]
.text:00411050                 and     ecx, 0F000h
.text:00411056                 cmp     ecx, 0A000h
.text:0041105C                 jz      short loc_411083
.text:0041105E
.text:0041105E loc_41105E:                             ; CODE XREF: sub_411000+4C↑j
.text:0041105E                                         ; sub_411000+A1↓j ...
.text:0041105E                 mov     ebx, [esp+13Ch+var_10]
.text:00411065                 mov     eax, edx
.text:00411067                 mov     esi, [esp+13Ch+var_C]
.text:0041106E                 mov     edi, [esp+13Ch+var_8]
.text:00411075                 mov     ebp, [esp+13Ch+var_4]
.text:0041107C                 add     esp, 13Ch
.text:00411082                 retn
.text:00411083 ; ---------------------------------------------------------------------------
.text:00411083
.text:00411083 loc_411083:                             ; CODE XREF: sub_411000+5C↑j
.text:00411083                 mov     [esp+13Ch+var_134], 104h
.text:0041108B                 lea     ebp, [esp+13Ch+String1]
.text:0041108F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:00411093                 mov     [esp+13Ch+var_13C], esi ; char *
.text:00411096                 call    sub_411290
.text:0041109B                 inc     eax
.text:0041109C                 mov     edx, 0FFFFFFFFh
.text:004110A1                 jz      short loc_41105E
.text:004110A3                 mov     [esp+13Ch+var_134], ebx ; int
.text:004110A7                 mov     [esp+13Ch+lpString1], ebp ; int
.text:004110AB                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:004110AE                 call    sub_410FB0
.text:004110B3                 mov     edx, eax
.text:004110B5                 jmp     short loc_41105E
.text:004110B5 sub_411000      endp
.text:004110B5
.text:004110B5 ; ---------------------------------------------------------------------------
.text:004110B7                 align 10h
.text:004110C0                 sub     esp, 0Ch
.text:004110C3                 mov     [esp+4], ebx
.text:004110C7                 mov     [esp+8], esi
.text:004110CB                 xor     esi, esi
.text:004110CD                 call    sub_4113A0
.text:004110D2                 mov     ebx, eax
.text:004110D4                 call    sub_411390
.text:004110D9                 cmp     ebx, eax
.text:004110DB                 jz      short loc_4110F4
.text:004110DD
.text:004110DD loc_4110DD:                             ; CODE XREF: .text:00411102↓j
.text:004110DD                 mov     esi, 1
.text:004110E2
.text:004110E2 loc_4110E2:                             ; CODE XREF: .text:00411104↓j
.text:004110E2                 mov     ds:dword_4157D0, esi
.text:004110E8                 mov     ebx, [esp+4]
.text:004110EC                 mov     esi, [esp+8]
.text:004110F0                 add     esp, 0Ch
.text:004110F3                 retn
.text:004110F4 ; ---------------------------------------------------------------------------
.text:004110F4
.text:004110F4 loc_4110F4:                             ; CODE XREF: .text:004110DB↑j
.text:004110F4                 call    sub_411380
.text:004110F9                 mov     ebx, eax
.text:004110FB                 call    sub_411370
.text:00411100                 cmp     ebx, eax
.text:00411102                 jnz     short loc_4110DD
.text:00411104                 jmp     short loc_4110E2
.text:00411104 ; ---------------------------------------------------------------------------
.text:00411106                 align 10h
.text:00411110
.text:00411110 ; =============== S U B R O U T I N E =======================================
.text:00411110
.text:00411110
.text:00411110 ; int __cdecl sub_411110(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:00411110 sub_411110      proc near               ; CODE XREF: sub_411290+93↓p
.text:00411110
.text:00411110 pvReserved      = dword ptr -35Ch
.text:00411110 pUnkOuter       = dword ptr -358h
.text:00411110 dwClsContext    = dword ptr -354h
.text:00411110 riid            = dword ptr -350h
.text:00411110 ppv             = dword ptr -34Ch
.text:00411110 cchWideChar     = dword ptr -348h
.text:00411110 var_334         = byte ptr -334h
.text:00411110 var_330         = dword ptr -330h
.text:00411110 String2         = byte ptr -32Ch
.text:00411110 WideCharStr     = word ptr -21Ch
.text:00411110 lpMultiByteStr  = dword ptr  4
.text:00411110 lpString1       = dword ptr  8
.text:00411110
.text:00411110                 push    edi
.text:00411111                 push    esi
.text:00411112                 push    ebx
.text:00411113                 sub     esp, 350h
.text:00411119                 mov     edi, [esp+35Ch+lpString1]
.text:00411120                 mov     byte ptr [edi], 0
.text:00411123                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0041112A                 call    OleInitialize
.text:0041112F                 sub     esp, 4
.text:00411132                 cmp     eax, 1
.text:00411135                 ja      loc_41126F
.text:0041113B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:00411143                 lea     ecx, [esp+35Ch+var_330]
.text:00411147                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0041114B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:00411153                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0041115B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:00411162                 call    CoCreateInstance
.text:00411167                 sub     esp, 14h
.text:0041116A                 test    eax, eax
.text:0041116C                 js      loc_41126F
.text:00411172                 mov     ebx, [esp+35Ch+var_330]
.text:00411176                 lea     edx, [esp+35Ch+var_334]
.text:0041117A                 mov     esi, [ebx]
.text:0041117C                 mov     [esp+35Ch+dwClsContext], edx
.text:00411180                 mov     [esp+35Ch+pvReserved], ebx
.text:00411183                 xor     ebx, ebx
.text:00411185                 mov     [esp+35Ch+pUnkOuter], offset dword_412180
.text:0041118D                 call    dword ptr [esi]
.text:0041118F                 sub     esp, 0Ch
.text:00411192                 lea     esi, [esp+35Ch+WideCharStr]
.text:00411199                 call    AreFileApisANSI
.text:0041119E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:004111A6                 test    eax, eax
.text:004111A8                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:004111AF                 setz    bl
.text:004111B2                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:004111B6                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:004111BE                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:004111C2                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:004111CA                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:004111CD                 call    MultiByteToWideChar
.text:004111D2                 sub     esp, 18h
.text:004111D5                 test    eax, eax
.text:004111D7                 js      loc_41126F
.text:004111DD                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:004111E1                 mov     ebx, [edx]
.text:004111E3                 mov     [esp+35Ch+dwClsContext], 0
.text:004111EB                 mov     [esp+35Ch+pUnkOuter], esi
.text:004111EF                 mov     [esp+35Ch+pvReserved], edx
.text:004111F2                 call    dword ptr [ebx+14h]
.text:004111F5                 sub     esp, 0Ch
.text:004111F8                 test    eax, eax
.text:004111FA                 js      short loc_41126F
.text:004111FC                 mov     ebx, [esp+35Ch+var_330]
.text:00411200                 lea     esi, [esp+35Ch+String2]
.text:00411204                 mov     ecx, [ebx]
.text:00411206                 mov     [esp+35Ch+pvReserved], ebx
.text:00411209                 mov     [esp+35Ch+ppv], 0
.text:00411211                 mov     [esp+35Ch+riid], 0
.text:00411219                 mov     [esp+35Ch+dwClsContext], 104h
.text:00411221                 mov     [esp+35Ch+pUnkOuter], esi
.text:00411225                 call    dword ptr [ecx+0Ch]
.text:00411228                 sub     esp, 14h
.text:0041122B                 mov     ebx, eax
.text:0041122D                 test    eax, eax
.text:0041122F                 js      short loc_41126F
.text:00411231                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:00411235                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:00411238                 call    lstrcpyA
.text:0041123D                 sub     esp, 8
.text:00411240                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:00411244                 mov     ecx, [edi]
.text:00411246                 mov     [esp+35Ch+pvReserved], edi
.text:00411249                 call    dword ptr [ecx+8]
.text:0041124C                 sub     esp, 4
.text:0041124F                 mov     edx, [esp+35Ch+var_330]
.text:00411253                 mov     esi, [edx]
.text:00411255                 mov     [esp+35Ch+pvReserved], edx
.text:00411258                 call    dword ptr [esi+8]
.text:0041125B                 sub     esp, 4
.text:0041125E                 call    CoUninitialize
.text:00411263                 mov     eax, ebx
.text:00411265
.text:00411265 loc_411265:                             ; CODE XREF: sub_411110+177↓j
.text:00411265                 add     esp, 350h
.text:0041126B                 pop     ebx
.text:0041126C                 pop     esi
.text:0041126D                 pop     edi
.text:0041126E                 retn
.text:0041126F ; ---------------------------------------------------------------------------
.text:0041126F
.text:0041126F loc_41126F:                             ; CODE XREF: sub_411110+25↑j
.text:0041126F                                         ; sub_411110+5C↑j ...
.text:0041126F                 call    sub_40E990
.text:00411274                 mov     edi, eax
.text:00411276                 call    _errno
.text:0041127B                 mov     [eax], edi
.text:0041127D                 call    CoUninitialize
.text:00411282                 mov     eax, 0FFFFFFFFh
.text:00411287                 jmp     short loc_411265
.text:00411287 sub_411110      endp
.text:00411287
.text:00411287 ; ---------------------------------------------------------------------------
.text:00411289 ; const char Source[]
.text:00411289 Source          db '.lnk',0             ; DATA XREF: sub_411290+53↓o
.text:00411289                                         ; sub_411290:loc_4112F5↓o
.text:0041128E                 align 10h
.text:00411290
.text:00411290 ; =============== S U B R O U T I N E =======================================
.text:00411290
.text:00411290
.text:00411290 ; int __cdecl sub_411290(char *, LPSTR lpString1)
.text:00411290 sub_411290      proc near               ; CODE XREF: sub_411000+96↑p
.text:00411290
.text:00411290 Str             = dword ptr -1Ch
.text:00411290 Source          = dword ptr -18h
.text:00411290 Destination     = dword ptr -14h
.text:00411290 arg_0           = dword ptr  4
.text:00411290 lpString1       = dword ptr  8
.text:00411290
.text:00411290                 push    ebp
.text:00411291                 push    edi
.text:00411292                 push    esi
.text:00411293                 push    ebx
.text:00411294                 sub     esp, 0Ch
.text:00411297                 mov     ebx, [esp+1Ch+arg_0]
.text:0041129B                 mov     ebp, [esp+1Ch+lpString1]
.text:0041129F                 mov     [esp+1Ch+Str], ebx ; Str
.text:004112A2                 call    strlen
.text:004112A7                 add     eax, 5
.text:004112AA                 mov     [esp+1Ch+Str], eax ; Size
.text:004112AD                 call    malloc
.text:004112B2                 mov     [esp+1Ch+Destination], eax
.text:004112B6                 test    eax, eax
.text:004112B8                 jz      loc_411360
.text:004112BE                 mov     [esp+1Ch+Source], ebx ; Source
.text:004112C2                 mov     [esp+1Ch+Str], eax ; Destination
.text:004112C5                 call    strcpy
.text:004112CA                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:004112D2                 mov     eax, [esp+1Ch+Destination]
.text:004112D6                 mov     [esp+1Ch+Str], eax ; Str
.text:004112D9                 call    strrchr
.text:004112DE                 test    eax, eax
.text:004112E0                 jz      short loc_4112F5
.text:004112E2                 cld
.text:004112E3                 mov     ebx, offset Source ; ".lnk"
.text:004112E8                 mov     ecx, 5
.text:004112ED                 mov     esi, eax
.text:004112EF                 mov     edi, ebx
.text:004112F1                 repe cmpsb
.text:004112F3                 jz      short loc_411309
.text:004112F5
.text:004112F5 loc_4112F5:                             ; CODE XREF: sub_411290+50↑j
.text:004112F5                 mov     [esp+1Ch+Source], offset Source ; ".lnk"
.text:004112FD                 mov     edx, [esp+1Ch+Destination]
.text:00411301                 mov     [esp+1Ch+Str], edx ; Destination
.text:00411304                 call    strcat
.text:00411309
.text:00411309 loc_411309:                             ; CODE XREF: sub_411290+63↑j
.text:00411309                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:00411310                 call    SetErrorMode
.text:00411315                 sub     esp, 4
.text:00411318                 mov     ebx, [esp+1Ch+Destination]
.text:0041131C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:00411320                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:00411323                 call    sub_411110
.text:00411328                 mov     [esp+1Ch+Str], ebx ; Block
.text:0041132B                 mov     esi, eax
.text:0041132D                 call    free
.text:00411332                 mov     [esp+1Ch+Str], 0 ; uMode
.text:00411339                 call    SetErrorMode
.text:0041133E                 sub     esp, 4
.text:00411341                 mov     [esp+1Ch+Str], ebp
.text:00411344                 call    sub_40CF80
.text:00411349                 inc     esi
.text:0041134A                 jz      short loc_411360
.text:0041134C                 mov     [esp+1Ch+arg_0], ebp
.text:00411350                 add     esp, 0Ch
.text:00411353                 pop     ebx
.text:00411354                 pop     esi
.text:00411355                 pop     edi
.text:00411356                 pop     ebp
.text:00411357                 jmp     strlen
.text:00411357 ; ---------------------------------------------------------------------------
.text:0041135C                 align 10h
.text:00411360
.text:00411360 loc_411360:                             ; CODE XREF: sub_411290+28↑j
.text:00411360                                         ; sub_411290+BA↑j
.text:00411360                 add     esp, 0Ch
.text:00411363                 mov     eax, 0FFFFFFFFh
.text:00411368                 pop     ebx
.text:00411369                 pop     esi
.text:0041136A                 pop     edi
.text:0041136B                 pop     ebp
.text:0041136C                 retn
.text:0041136C sub_411290      endp
.text:0041136C
.text:0041136C ; ---------------------------------------------------------------------------
.text:0041136D                 align 10h
.text:00411370
.text:00411370 ; =============== S U B R O U T I N E =======================================
.text:00411370
.text:00411370
.text:00411370 sub_411370      proc near               ; CODE XREF: .text:004110FB↑p
.text:00411370                 xor     eax, eax
.text:00411372                 retn
.text:00411372 sub_411370      endp
.text:00411372
.text:00411372 ; ---------------------------------------------------------------------------
.text:00411373                 align 10h
.text:00411380
.text:00411380 ; =============== S U B R O U T I N E =======================================
.text:00411380
.text:00411380
.text:00411380 sub_411380      proc near               ; CODE XREF: .text:loc_4110F4↑p
.text:00411380                 xor     eax, eax
.text:00411382                 retn
.text:00411382 sub_411380      endp
.text:00411382
.text:00411382 ; ---------------------------------------------------------------------------
.text:00411383                 align 10h
.text:00411390
.text:00411390 ; =============== S U B R O U T I N E =======================================
.text:00411390
.text:00411390
.text:00411390 sub_411390      proc near               ; CODE XREF: .text:004110D4↑p
.text:00411390                 xor     eax, eax
.text:00411392                 retn
.text:00411392 sub_411390      endp
.text:00411392
.text:00411392 ; ---------------------------------------------------------------------------
.text:00411393                 align 10h
.text:004113A0
.text:004113A0 ; =============== S U B R O U T I N E =======================================
.text:004113A0
.text:004113A0
.text:004113A0 sub_4113A0      proc near               ; CODE XREF: .text:004110CD↑p
.text:004113A0                 xor     eax, eax
.text:004113A2                 retn
.text:004113A2 sub_4113A0      endp
.text:004113A2
.text:004113A2 ; ---------------------------------------------------------------------------
.text:004113A3                 align 10h
.text:004113B0
.text:004113B0 ; =============== S U B R O U T I N E =======================================
.text:004113B0
.text:004113B0 ; Attributes: thunk
.text:004113B0
.text:004113B0 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:004113B0 OleInitialize   proc near               ; CODE XREF: sub_411110+1A↑p
.text:004113B0
.text:004113B0 pvReserved      = dword ptr  4
.text:004113B0
.text:004113B0                 jmp     ds:__imp_OleInitialize
.text:004113B0 OleInitialize   endp
.text:004113B0
.text:004113B0 ; ---------------------------------------------------------------------------
.text:004113B6                 align 10h
.text:004113C0
.text:004113C0 ; =============== S U B R O U T I N E =======================================
.text:004113C0
.text:004113C0 ; Attributes: thunk
.text:004113C0
.text:004113C0 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:004113C0 CoCreateInstance proc near              ; CODE XREF: sub_411110+52↑p
.text:004113C0
.text:004113C0 rclsid          = dword ptr  4
.text:004113C0 pUnkOuter       = dword ptr  8
.text:004113C0 dwClsContext    = dword ptr  0Ch
.text:004113C0 riid            = dword ptr  10h
.text:004113C0 ppv             = dword ptr  14h
.text:004113C0
.text:004113C0                 jmp     ds:__imp_CoCreateInstance
.text:004113C0 CoCreateInstance endp
.text:004113C0
.text:004113C0 ; ---------------------------------------------------------------------------
.text:004113C6                 align 10h
.text:004113D0
.text:004113D0 ; =============== S U B R O U T I N E =======================================
.text:004113D0
.text:004113D0 ; Attributes: thunk
.text:004113D0
.text:004113D0 ; void __stdcall CoUninitialize()
.text:004113D0 CoUninitialize  proc near               ; CODE XREF: sub_411110+14E↑p
.text:004113D0                                         ; sub_411110+16D↑p
.text:004113D0                 jmp     ds:__imp_CoUninitialize
.text:004113D0 CoUninitialize  endp
.text:004113D0
.text:004113D0 ; ---------------------------------------------------------------------------
.text:004113D6                 align 10h
.text:004113E0                 add     al, 0BAh ; 'º'
.text:004113E2                 retf
.text:004113E2 ; ---------------------------------------------------------------------------
.text:004113E3                 db 7Eh
.text:004113E4                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:004113E4                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:004113E4                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:004113E4                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:004113E4                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:004113E4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:004113E4                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:004113E4                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:004113E4                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:004113E4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:004113E4                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:004113E4                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:004113E4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:004113E4                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:004113E4                 dd 0C4426C00h, 330h, 0
.text:00411518                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00411518                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:00411518                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:00411518                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:00411568                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411568                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:00411568                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:00411568                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:00411568                 dd 0BA94B00h, 1Bh, 0
.text:004115C8                 dd 0C0h, 46000000h, 1Ch, 0
.text:004115D8                 dd 0C0h, 46000000h, 331h, 0
.text:004115E8                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004115E8                 dd 312h, 0
.text:00411608                 dd 0C0h, 46000000h, 30Eh, 0
.text:00411618                 dd 0C0h, 46000000h, 30Dh, 0
.text:00411628                 dd 0C0h, 46000000h, 311h, 0
.text:00411638                 dd 0C0h, 46000000h, 313h, 0
.text:00411648                 dd 0C0h, 46000000h, 30Ch, 0
.text:00411658                 dd 0C0h, 46000000h, 30Fh, 0
.text:00411668                 dd 0C0h, 46000000h, 310h, 0
.text:00411678                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411678                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:004116A8                 dd 0C0h, 46000000h, 319h, 0
.text:004116B8                 dd 0C0h, 46000000h, 315h, 0
.text:004116C8                 dd 0C0h, 46000000h, 316h, 0
.text:004116D8                 dd 0C0h, 46000000h, 315h, 0
.text:004116E8                 dd 0C0h, 46000000h, 2E005h, 0
.text:004116F8                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:004116F8                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:004116F8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:00411738                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00411738                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:00411738                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:00411738                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:00411738                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:00411738                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:00411738                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:00411738                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:00411738                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:00411738                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:00411738                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:00411738                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00411738                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:00411738                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:00411738                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:00411738                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00411738                 dd 2DE81h, 0
.text:00411888                 dd 0C0h, 46000000h, 4 dup(0)
.text:004118A0                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:004118A0                 dd 0
.text:004118B8                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:004118B8                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:004118B8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:004118B8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:004118B8                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:004118B8                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:004118B8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:004118B8                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:004118B8                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:004118B8                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:004118B8                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:004118B8                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:004118B8                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:004118B8                 dd 10Fh, 0
.text:004119C8                 dd 0C0h, 46000000h, 125h, 0
.text:004119D8                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:004119D8                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:004119D8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:00411A18                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:00411A18                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411A18                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:00411A18                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:00411A18                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:00411A78                 dd 0C0h, 46000000h, 2E012h, 0
.text:00411A88                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:00411A88                 dd 140h, 0
.text:00411AA8                 dd 0C0h, 46000000h, 1, 0
.text:00411AB8                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:00411AB8                 dd 71D3400h, 13Dh, 0
.text:00411AD8                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00411AD8                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:00411AD8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:00411AD8                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:00411B28                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:00411B28                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00411B28                 dd 20405h, 0
.text:00411B58                 dd 0C0h, 46000000h, 2040Eh, 0
.text:00411B68                 dd 0C0h, 46000000h, 20406h, 0
.text:00411B78                 dd 0C0h, 46000000h, 2040Fh, 0
.text:00411B88                 dd 0C0h, 46000000h, 110h, 0
.text:00411B98                 dd 0C0h, 46000000h, 10Eh, 0
.text:00411BA8                 dd 0C0h, 46000000h, 123h, 0
.text:00411BB8                 dd 0C0h, 46000000h, 124h, 0
.text:00411BC8                 dd 0C0h, 46000000h, 13h, 0
.text:00411BD8                 dd 0C0h, 46000000h, 14h, 0
.text:00411BE8                 dd 0C0h, 46000000h, 15h, 0
.text:00411BF8                 dd 0C0h, 46000000h, 20400h, 0
.text:00411C08                 dd 0C0h, 46000000h, 121h, 0
.text:00411C18                 dd 0C0h, 46000000h, 122h, 0
.text:00411C28                 dd 0C0h, 46000000h, 2E011h, 0
.text:00411C38                 dd 0C0h, 46000000h, 108h, 0
.text:00411C48                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:00411C48                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00411C48                 dd 103h, 0
.text:00411C78                 dd 0C0h, 46000000h, 2E000h, 0
.text:00411C88                 dd 0C0h, 46000000h, 106h, 0
.text:00411C98                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411C98                 dd 107h, 0
.text:00411CB8                 dd 0C0h, 46000000h, 102h, 0
.text:00411CC8                 dd 0C0h, 46000000h, 104h, 0
.text:00411CD8                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:00411CD8                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:00411CD8                 dd 105h, 0
.text:00411D08                 dd 0C0h, 46000000h, 13Bh, 0
.text:00411D18                 dd 0C0h, 46000000h, 139h, 0
.text:00411D28                 dd 0C0h, 46000000h, 0Dh, 0
.text:00411D38                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00411D38                 dd 101h, 0
.text:00411D58                 dd 0C0h, 46000000h, 100h, 0
.text:00411D68                 dd 0C0h, 46000000h, 20404h, 0
.text:00411D78                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00411D78                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:00411DA8                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:00411DA8                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:00411DA8                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:00411DA8                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:00411DF8                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411DF8                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:00411DF8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:00411DF8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:00411DF8                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411DF8                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:00411E78                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:00411E78                 dd 0Ah, 0
.text:00411E98                 dd 0C0h, 46000000h, 2, 0
.text:00411EA8                 dd 0C0h, 46000000h, 1Dh, 0
.text:00411EB8                 dd 0C0h, 46000000h, 3, 0
.text:00411EC8                 dd 0C0h, 46000000h, 16h, 0
.text:00411ED8                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:00411ED8                 dd 1608D74Fh, 0Fh, 0
.text:00411EF8                 dd 0C0h, 46000000h, 20h, 0
.text:00411F08                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:00411F08                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:00411F08                 dd 0
.text:00411F38                 dd 0C0h, 46000000h, 11Eh, 0
.text:00411F48                 dd 0C0h, 46000000h, 128h, 0
.text:00411F58                 dd 0C0h, 46000000h, 129h, 0
.text:00411F68                 dd 0C0h, 46000000h, 118h, 0
.text:00411F78                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:00411F78                 dd 70474000h, 11Bh, 0
.text:00411F98                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:00411F98                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00411F98                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:00411F98                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:00411F98                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:00411FF8                 dd 0C0h, 46000000h, 116h, 0
.text:00412008                 dd 0C0h, 46000000h, 113h, 0
.text:00412018                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:00412018                 dd 119h, 0
.text:00412038                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:00412038                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:00412038                 dd 0
.text:00412068                 dd 0C0h, 46000000h, 11Ch, 0
.text:00412078                 dd 0C0h, 46000000h, 11Dh, 0
.text:00412088                 dd 0C0h, 46000000h, 11Fh, 0
.text:00412098                 dd 0C0h, 46000000h, 112h, 0
.text:004120A8                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:004120A8                 dd 18E6000h, 120h, 0
.text:004120C8                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:004120C8                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:004120C8                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:00412108                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:00412108                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:00412138                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00412138                 dd 11Ah, 0
.text:00412158                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:00412158                 dd 10Ch, 0
.text:00412178                 dd 0C0h, 46000000h
.text:00412180 dword_412180    dd 10Bh, 0              ; DATA XREF: sub_411110+75↑o
.text:00412188                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:00412188                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:00412188                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:00412188                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:004121D8                 dd 0C0h, 46000000h, 109h, 0
.text:004121E8                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:004121E8                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:004121E8                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:004121E8                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:004121E8                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:004121E8                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:004121E8                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:004121E8                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:004121E8                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:004121E8                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:004121E8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:004122C8                 dd 0C0h, 46000000h, 138h, 0
.text:004122D8                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:004122D8                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:004122D8                 dd 27h, 0
.text:00412308                 dd 0C0h, 46000000h, 8, 0
.text:00412318                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:00412318                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:00412318                 dd 20D00h, 0
.text:00412348                 dd 0C0h, 46000000h, 20D03h, 0
.text:00412358                 dd 0C0h, 46000000h, 12h, 0
.text:00412368                 dd 0C0h, 46000000h, 4, 0
.text:00412378                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00412378                 dd 7, 0
.text:00412398                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00412398                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:004123C8                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004123C8                 dd 126h, 0
.text:004123E8                 dd 0C0h, 46000000h, 10h, 0
.text:004123F8                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:004123F8                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:00412428                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:00412428                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:00412428                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:00412468                 dd 0C0h, 46000000h, 0Bh, 0
.text:00412478                 dd 0C0h, 46000000h, 0Ch, 0
.text:00412488                 dd 0C0h, 46000000h, 26h, 0
.text:00412498                 dd 0C0h, 46000000h, 6, 0
.text:004124A8                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:004124A8                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:004124A8                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:004124E8                 dd 0C0h, 46000000h, 20403h, 0
.text:004124F8                 dd 0C0h, 46000000h, 20401h, 0
.text:00412508                 dd 0C0h, 46000000h, 20412h, 0
.text:00412518                 dd 0C0h, 46000000h, 20402h, 0
.text:00412528                 dd 0C0h, 46000000h, 20411h, 0
.text:00412538                 dd 0C0h, 46000000h, 2 dup(0)
.text:00412548                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00412548                 dd 10Dh, 0
.text:00412568                 dd 0C0h, 46000000h, 127h, 0
.text:00412578                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00412578                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:00412578                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:004125B8                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:004125B8                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:004125B8                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:004125F8                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:00412608                 dd 0C0h, 46000000h, 2DE18h, 0
.text:00412618                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:00412628                 dd 0C0h, 46000000h, 2DE19h, 0
.text:00412638                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:00412648                 dd 0C0h, 46000000h, 2DE12h, 0
.text:00412658                 dd 0C0h, 46000000h, 2DE21h, 0
.text:00412668                 dd 0C0h, 46000000h, 2DE01h, 0
.text:00412678                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:00412688                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:00412698                 dd 0C0h, 46000000h, 2DE02h, 0
.text:004126A8                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:004126B8                 dd 0C0h, 46000000h, 2DE04h, 0
.text:004126C8                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:004126D8                 dd 0C0h, 46000000h, 2DE05h, 0
.text:004126E8                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:004126F8                 dd 0C0h, 46000000h, 2DE06h, 0
.text:00412708                 dd 0C0h, 46000000h, 2DE13h, 0
.text:00412718                 dd 0C0h, 46000000h, 2DE10h, 0
.text:00412728                 dd 0C0h, 46000000h, 2DE22h, 0
.text:00412738                 dd 0C0h, 46000000h, 2DE09h, 0
.text:00412748                 dd 0C0h, 46000000h, 2DE23h, 0
.text:00412758                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:00412768                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:00412778                 dd 0C0h, 46000000h, 2DE11h, 0
.text:00412788                 dd 0C0h, 46000000h, 2DE15h, 0
.text:00412798                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:004127A8                 dd 0C0h, 46000000h, 2DE16h, 0
.text:004127B8                 dd 0C0h, 46000000h, 2DE20h, 0
.text:004127C8                 dd 0C0h, 46000000h, 2DE07h, 0
.text:004127D8                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:004127E8                 dd 0C0h, 46000000h, 2DE17h, 0
.text:004127F8                 dd 0C0h, 46000000h, 2DE14h, 0
.text:00412808                 dd 0C0h, 46000000h, 2DE03h, 0
.text:00412818                 dd 0C0h, 46000000h, 2DE08h, 0
.text:00412828                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:00412828                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:00412850
.text:00412850 ; =============== S U B R O U T I N E =======================================
.text:00412850
.text:00412850 ; Attributes: thunk
.text:00412850
.text:00412850 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00412850 mbrtowc         proc near               ; CODE XREF: sub_4090D0+757↑p
.text:00412850
.text:00412850 DstCh           = dword ptr  4
.text:00412850 SrcCh           = dword ptr  8
.text:00412850 SizeInBytes     = dword ptr  0Ch
.text:00412850 State           = dword ptr  10h
.text:00412850
.text:00412850                 jmp     ds:__imp_mbrtowc
.text:00412850 mbrtowc         endp
.text:00412850
.text:00412850 ; ---------------------------------------------------------------------------
.text:00412856                 align 10h
.text:00412860
.text:00412860 ; =============== S U B R O U T I N E =======================================
.text:00412860
.text:00412860 ; Attributes: bp-based frame
.text:00412860
.text:00412860 sub_412860      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00412860                 push    ebp
.text:00412861                 mov     ecx, offset dword_415000
.text:00412866                 cmp     ecx, offset dword_415000
.text:0041286C                 mov     ebp, esp
.text:0041286E                 jnb     short loc_412886
.text:00412870
.text:00412870 loc_412870:                             ; CODE XREF: sub_412860+24↓j
.text:00412870                 mov     edx, [ecx+4]
.text:00412873                 mov     eax, [ecx]
.text:00412875                 add     ecx, 8
.text:00412878                 add     [edx+400000h], eax
.text:0041287E                 cmp     ecx, offset dword_415000
.text:00412884                 jb      short loc_412870
.text:00412886
.text:00412886 loc_412886:                             ; CODE XREF: sub_412860+E↑j
.text:00412886                 pop     ebp
.text:00412887                 retn
.text:00412887 sub_412860      endp
.text:00412887
.text:00412887 ; ---------------------------------------------------------------------------
.text:00412888                 align 10h
.text:00412890
.text:00412890 ; =============== S U B R O U T I N E =======================================
.text:00412890
.text:00412890 ; Attributes: bp-based frame
.text:00412890
.text:00412890 sub_412890      proc near               ; CODE XREF: sub_401080+16↑p
.text:00412890                                         ; TopLevelExceptionFilter+D7↑p
.text:00412890                 push    ebp
.text:00412891                 mov     ebp, esp
.text:00412893                 fninit
.text:00412895                 pop     ebp
.text:00412896                 retn
.text:00412896 sub_412890      endp
.text:00412896
.text:00412896 ; ---------------------------------------------------------------------------
.text:00412897                 align 10h
.text:004128A0
.text:004128A0 ; =============== S U B R O U T I N E =======================================
.text:004128A0
.text:004128A0 ; Attributes: bp-based frame
.text:004128A0
.text:004128A0 ; void __cdecl sub_4128A0()
.text:004128A0 sub_4128A0      proc near               ; DATA XREF: .text:loc_4128E9↓o
.text:004128A0                                         ; sub_412930:loc_41295E↓o
.text:004128A0                 push    ebp
.text:004128A1                 mov     ebp, esp
.text:004128A3                 sub     esp, 8
.text:004128A6                 mov     eax, off_4140E4
.text:004128AB                 mov     edx, [eax]
.text:004128AD                 test    edx, edx
.text:004128AF                 jnz     short loc_4128B5
.text:004128B1
.text:004128B1 loc_4128B1:                             ; CODE XREF: sub_4128A0+2C↓j
.text:004128B1                 mov     esp, ebp
.text:004128B3                 pop     ebp
.text:004128B4                 retn
.text:004128B5 ; ---------------------------------------------------------------------------
.text:004128B5
.text:004128B5 loc_4128B5:                             ; CODE XREF: sub_4128A0+F↑j
.text:004128B5                                         ; sub_4128A0+2A↓j
.text:004128B5                 call    dword ptr [eax]
.text:004128B7                 mov     edx, off_4140E4
.text:004128BD                 mov     ecx, [edx+4]
.text:004128C0                 lea     eax, [edx+4]
.text:004128C3                 mov     off_4140E4, eax
.text:004128C8                 test    ecx, ecx
.text:004128CA                 jnz     short loc_4128B5
.text:004128CC                 jmp     short loc_4128B1
.text:004128CC sub_4128A0      endp
.text:004128CC
.text:004128CC ; ---------------------------------------------------------------------------
.text:004128CE                 align 10h
.text:004128D0                 push    ebp
.text:004128D1                 mov     ebp, esp
.text:004128D3                 sub     esp, 8
.text:004128D6                 mov     [ebp-4], ebx
.text:004128D9                 mov     eax, ds:dword_413F80
.text:004128DE                 cmp     eax, 0FFFFFFFFh
.text:004128E1                 jz      short loc_41290C
.text:004128E3
.text:004128E3 loc_4128E3:                             ; CODE XREF: .text:00412916↓j
.text:004128E3                                         ; .text:00412929↓j
.text:004128E3                 test    eax, eax
.text:004128E5                 mov     ebx, eax
.text:004128E7                 jnz     short loc_412900
.text:004128E9
.text:004128E9 loc_4128E9:                             ; CODE XREF: .text:0041290A↓j
.text:004128E9                 mov     dword ptr [esp], offset sub_4128A0
.text:004128F0                 call    sub_401040
.text:004128F5                 mov     ebx, [ebp-4]
.text:004128F8                 mov     esp, ebp
.text:004128FA                 pop     ebp
.text:004128FB                 retn
.text:004128FB ; ---------------------------------------------------------------------------
.text:004128FC                 align 10h
.text:00412900
.text:00412900 loc_412900:                             ; CODE XREF: .text:004128E7↑j
.text:00412900                                         ; .text:00412908↓j
.text:00412900                 call    ds:dword_413F80[ebx*4]
.text:00412907                 dec     ebx
.text:00412908                 jnz     short loc_412900
.text:0041290A                 jmp     short loc_4128E9
.text:0041290C ; ---------------------------------------------------------------------------
.text:0041290C
.text:0041290C loc_41290C:                             ; CODE XREF: .text:004128E1↑j
.text:0041290C                 mov     ecx, ds:dword_413F84
.text:00412912                 xor     eax, eax
.text:00412914                 test    ecx, ecx
.text:00412916                 jz      short loc_4128E3
.text:00412918                 mov     edx, offset dword_413F80
.text:0041291D                 lea     esi, [esi+0]
.text:00412920
.text:00412920 loc_412920:                             ; CODE XREF: .text:00412927↓j
.text:00412920                 inc     eax
.text:00412921                 mov     ecx, [edx+eax*4+4]
.text:00412925                 test    ecx, ecx
.text:00412927                 jnz     short loc_412920
.text:00412929                 jmp     short loc_4128E3
.text:00412929 ; ---------------------------------------------------------------------------
.text:0041292B                 align 10h
.text:00412930
.text:00412930 ; =============== S U B R O U T I N E =======================================
.text:00412930
.text:00412930 ; Attributes: bp-based frame
.text:00412930
.text:00412930 sub_412930      proc near               ; CODE XREF: sub_402550+1C↑p
.text:00412930
.text:00412930 var_8           = dword ptr -8
.text:00412930 var_4           = dword ptr -4
.text:00412930
.text:00412930                 push    ebp
.text:00412931                 mov     ebp, esp
.text:00412933                 sub     esp, 8
.text:00412936                 mov     [ebp+var_4], ebx
.text:00412939                 mov     edx, dword_4140E0
.text:0041293F                 test    edx, edx
.text:00412941                 jnz     short loc_41296A
.text:00412943                 mov     eax, ds:dword_413F80
.text:00412948                 mov     edx, 1
.text:0041294D                 mov     dword_4140E0, edx
.text:00412953                 cmp     eax, 0FFFFFFFFh
.text:00412956                 jz      short loc_41297D
.text:00412958
.text:00412958 loc_412958:                             ; CODE XREF: sub_412930+57↓j
.text:00412958                                         ; sub_412930+69↓j
.text:00412958                 test    eax, eax
.text:0041295A                 mov     ebx, eax
.text:0041295C                 jnz     short loc_412971
.text:0041295E
.text:0041295E loc_41295E:                             ; CODE XREF: sub_412930+4B↓j
.text:0041295E                 mov     [esp+8+var_8], offset sub_4128A0 ; void (__cdecl *)()
.text:00412965                 call    sub_401040
.text:0041296A
.text:0041296A loc_41296A:                             ; CODE XREF: sub_412930+11↑j
.text:0041296A                 mov     ebx, [ebp+var_4]
.text:0041296D                 mov     esp, ebp
.text:0041296F                 pop     ebp
.text:00412970                 retn
.text:00412971 ; ---------------------------------------------------------------------------
.text:00412971
.text:00412971 loc_412971:                             ; CODE XREF: sub_412930+2C↑j
.text:00412971                                         ; sub_412930+49↓j
.text:00412971                 call    ds:dword_413F80[ebx*4]
.text:00412978                 dec     ebx
.text:00412979                 jnz     short loc_412971
.text:0041297B                 jmp     short loc_41295E
.text:0041297D ; ---------------------------------------------------------------------------
.text:0041297D
.text:0041297D loc_41297D:                             ; CODE XREF: sub_412930+26↑j
.text:0041297D                 mov     ecx, ds:dword_413F84
.text:00412983                 xor     eax, eax
.text:00412985                 test    ecx, ecx
.text:00412987                 jz      short loc_412958
.text:00412989                 mov     edx, offset dword_413F80
.text:0041298E                 mov     esi, esi
.text:00412990
.text:00412990 loc_412990:                             ; CODE XREF: sub_412930+67↓j
.text:00412990                 inc     eax
.text:00412991                 mov     ebx, [edx+eax*4+4]
.text:00412995                 test    ebx, ebx
.text:00412997                 jnz     short loc_412990
.text:00412999                 jmp     short loc_412958
.text:00412999 sub_412930      endp
.text:00412999
.text:00412999 ; ---------------------------------------------------------------------------
.text:0041299B                 align 10h
.text:004129A0
.text:004129A0 ; =============== S U B R O U T I N E =======================================
.text:004129A0
.text:004129A0 ; Attributes: bp-based frame
.text:004129A0
.text:004129A0 sub_4129A0      proc near               ; CODE XREF: sub_402550+2E6↑p
.text:004129A0                                         ; sub_403500+5C6↑p ...
.text:004129A0
.text:004129A0 var_24          = dword ptr -24h
.text:004129A0 var_20          = dword ptr -20h
.text:004129A0 var_1C          = dword ptr -1Ch
.text:004129A0 var_18          = dword ptr -18h
.text:004129A0 var_14          = dword ptr -14h
.text:004129A0 var_C           = dword ptr -0Ch
.text:004129A0 var_8           = dword ptr -8
.text:004129A0 var_4           = dword ptr -4
.text:004129A0 arg_0           = dword ptr  8
.text:004129A0 arg_4           = dword ptr  0Ch
.text:004129A0 arg_8           = dword ptr  10h
.text:004129A0 arg_C           = dword ptr  14h
.text:004129A0
.text:004129A0                 push    ebp
.text:004129A1                 mov     ebp, esp
.text:004129A3                 sub     esp, 28h
.text:004129A6                 mov     [ebp+var_C], ebx
.text:004129A9                 mov     edx, [ebp+arg_C]
.text:004129AC                 mov     ecx, [ebp+arg_0]
.text:004129AF                 mov     [ebp+var_8], esi
.text:004129B2                 mov     eax, [ebp+arg_8]
.text:004129B5                 test    edx, edx
.text:004129B7                 mov     [ebp+var_4], edi
.text:004129BA                 mov     ebx, [ebp+arg_4]
.text:004129BD                 mov     esi, eax
.text:004129BF                 mov     [ebp+var_18], 0
.text:004129C6                 mov     [ebp+var_14], 0
.text:004129CD                 mov     [ebp+var_1C], ecx
.text:004129D0                 jnz     short loc_412A22
.text:004129D2                 cmp     eax, ebx
.text:004129D4                 jbe     short loc_412A00
.text:004129D6                 mov     eax, ecx
.text:004129D8                 mov     edx, ebx
.text:004129DA                 div     esi
.text:004129DC                 mov     edi, eax
.text:004129DE                 mov     esi, esi
.text:004129E0
.text:004129E0 loc_4129E0:                             ; CODE XREF: sub_4129A0+88↓j
.text:004129E0                                         ; sub_4129A0+A4↓j ...
.text:004129E0                 xor     ecx, ecx
.text:004129E2
.text:004129E2 loc_4129E2:                             ; CODE XREF: sub_4129A0+80↓j
.text:004129E2                 mov     [ebp+var_18], edi
.text:004129E5                 mov     ebx, [ebp+var_C]
.text:004129E8                 mov     eax, [ebp+var_18]
.text:004129EB                 mov     [ebp+var_14], ecx
.text:004129EE                 mov     esi, [ebp+var_8]
.text:004129F1                 mov     edx, [ebp+var_14]
.text:004129F4                 mov     edi, [ebp+var_4]
.text:004129F7                 mov     esp, ebp
.text:004129F9                 pop     ebp
.text:004129FA                 retn
.text:004129FA ; ---------------------------------------------------------------------------
.text:004129FB                 align 10h
.text:00412A00
.text:00412A00 loc_412A00:                             ; CODE XREF: sub_4129A0+34↑j
.text:00412A00                 test    eax, eax
.text:00412A02                 jnz     short loc_412A11
.text:00412A04                 mov     eax, 1
.text:00412A09                 xor     ecx, ecx
.text:00412A0B                 xor     edx, edx
.text:00412A0D                 div     ecx
.text:00412A0F                 mov     esi, eax
.text:00412A11
.text:00412A11 loc_412A11:                             ; CODE XREF: sub_4129A0+62↑j
.text:00412A11                 mov     eax, ebx
.text:00412A13                 xor     edx, edx
.text:00412A15                 div     esi
.text:00412A17                 mov     ecx, eax
.text:00412A19                 mov     eax, [ebp+var_1C]
.text:00412A1C                 div     esi
.text:00412A1E                 mov     edi, eax
.text:00412A20                 jmp     short loc_4129E2
.text:00412A22 ; ---------------------------------------------------------------------------
.text:00412A22
.text:00412A22 loc_412A22:                             ; CODE XREF: sub_4129A0+30↑j
.text:00412A22                 cmp     edx, ebx
.text:00412A24                 jbe     short loc_412A30
.text:00412A26                 xor     edi, edi
.text:00412A28                 jmp     short loc_4129E0
.text:00412A28 ; ---------------------------------------------------------------------------
.text:00412A2A                 align 10h
.text:00412A30
.text:00412A30 loc_412A30:                             ; CODE XREF: sub_4129A0+84↑j
.text:00412A30                 bsr     eax, edx
.text:00412A33                 xor     eax, 1Fh
.text:00412A36                 mov     [ebp+var_20], eax
.text:00412A39                 jnz     short loc_412A50
.text:00412A3B                 cmp     ebx, edx
.text:00412A3D                 ja      short loc_412A46
.text:00412A3F                 xor     edi, edi
.text:00412A41                 cmp     [ebp+var_1C], esi
.text:00412A44                 jb      short loc_4129E0
.text:00412A46
.text:00412A46 loc_412A46:                             ; CODE XREF: sub_4129A0+9D↑j
.text:00412A46                 mov     edi, 1
.text:00412A4B                 jmp     short loc_4129E0
.text:00412A4B ; ---------------------------------------------------------------------------
.text:00412A4D                 align 10h
.text:00412A50
.text:00412A50 loc_412A50:                             ; CODE XREF: sub_4129A0+99↑j
.text:00412A50                 mov     eax, [ebp+var_20]
.text:00412A53                 mov     ecx, 20h ; ' '
.text:00412A58                 sub     ecx, eax
.text:00412A5A                 mov     [ebp+var_24], ecx
.text:00412A5D                 mov     eax, esi
.text:00412A5F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00412A63                 shl     edx, cl
.text:00412A65                 mov     edi, edx
.text:00412A67                 movzx   ecx, byte ptr [ebp+var_24]
.text:00412A6B                 mov     edx, ebx
.text:00412A6D                 shr     eax, cl
.text:00412A6F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00412A73                 or      edi, eax
.text:00412A75                 mov     eax, [ebp+var_1C]
.text:00412A78                 shl     esi, cl
.text:00412A7A                 movzx   ecx, byte ptr [ebp+var_24]
.text:00412A7E                 shr     edx, cl
.text:00412A80                 movzx   ecx, byte ptr [ebp+var_20]
.text:00412A84                 shl     ebx, cl
.text:00412A86                 movzx   ecx, byte ptr [ebp+var_24]
.text:00412A8A                 shr     eax, cl
.text:00412A8C                 or      ebx, eax
.text:00412A8E                 movzx   ecx, byte ptr [ebp+var_20]
.text:00412A92                 mov     eax, ebx
.text:00412A94                 div     edi
.text:00412A96                 mov     ebx, edx
.text:00412A98                 mov     edi, eax
.text:00412A9A                 shl     [ebp+var_1C], cl
.text:00412A9D                 mul     esi
.text:00412A9F                 cmp     edx, ebx
.text:00412AA1                 ja      short loc_412AB4
.text:00412AA3                 cmp     edx, ebx
.text:00412AA5                 jnz     loc_4129E0
.text:00412AAB                 cmp     eax, [ebp+var_1C]
.text:00412AAE                 jbe     loc_4129E0
.text:00412AB4
.text:00412AB4 loc_412AB4:                             ; CODE XREF: sub_4129A0+101↑j
.text:00412AB4                 dec     edi
.text:00412AB5                 jmp     loc_4129E0
.text:00412AB5 sub_4129A0      endp
.text:00412AB5
.text:00412AB5 ; ---------------------------------------------------------------------------
.text:00412ABA                 align 10h
.text:00412AC0
.text:00412AC0 ; =============== S U B R O U T I N E =======================================
.text:00412AC0
.text:00412AC0 ; Attributes: info_from_lumina
.text:00412AC0
.text:00412AC0 ; void *__cdecl _alloca(size_t Size)
.text:00412AC0 __alloca        proc near               ; CODE XREF: sub_402550+17↑p
.text:00412AC0                 push    ecx
.text:00412AC1                 mov     ecx, esp
.text:00412AC3                 add     ecx, 8
.text:00412AC6
.text:00412AC6 loc_412AC6:                             ; CODE XREF: __alloca+1B↓j
.text:00412AC6                 cmp     eax, 1000h
.text:00412ACB                 jb      short loc_412ADD
.text:00412ACD                 sub     ecx, 1000h
.text:00412AD3                 or      dword ptr [ecx], 0
.text:00412AD6                 sub     eax, 1000h
.text:00412ADB                 jmp     short loc_412AC6
.text:00412ADD ; ---------------------------------------------------------------------------
.text:00412ADD
.text:00412ADD loc_412ADD:                             ; CODE XREF: __alloca+B↑j
.text:00412ADD                 sub     ecx, eax
.text:00412ADF                 or      dword ptr [ecx], 0
.text:00412AE2                 mov     eax, esp
.text:00412AE4                 mov     esp, ecx
.text:00412AE6                 mov     ecx, [eax]
.text:00412AE8                 mov     eax, [eax+4]
.text:00412AEB                 jmp     eax
.text:00412AEB __alloca        endp
.text:00412AEB
.text:00412AEB ; ---------------------------------------------------------------------------
.text:00412AED                 align 10h
.text:00412AF0
.text:00412AF0 ; =============== S U B R O U T I N E =======================================
.text:00412AF0
.text:00412AF0 ; Attributes: bp-based frame
.text:00412AF0
.text:00412AF0 sub_412AF0      proc near               ; CODE XREF: sub_406560+38↑p
.text:00412AF0                                         ; sub_406560+88↑p
.text:00412AF0
.text:00412AF0 var_3C          = dword ptr -3Ch
.text:00412AF0 var_34          = dword ptr -34h
.text:00412AF0 var_30          = dword ptr -30h
.text:00412AF0 var_2C          = dword ptr -2Ch
.text:00412AF0 var_28          = dword ptr -28h
.text:00412AF0 var_24          = dword ptr -24h
.text:00412AF0 var_1C          = dword ptr -1Ch
.text:00412AF0 var_18          = dword ptr -18h
.text:00412AF0 var_14          = dword ptr -14h
.text:00412AF0 arg_0           = dword ptr  8
.text:00412AF0 arg_4           = dword ptr  0Ch
.text:00412AF0 arg_8           = dword ptr  10h
.text:00412AF0 arg_C           = dword ptr  14h
.text:00412AF0
.text:00412AF0                 push    ebp
.text:00412AF1                 mov     ebp, esp
.text:00412AF3                 push    edi
.text:00412AF4                 push    esi
.text:00412AF5                 push    ebx
.text:00412AF6                 sub     esp, 34h
.text:00412AF9                 mov     ebx, [ebp+arg_4]
.text:00412AFC                 mov     [ebp+var_28], 0
.text:00412B03                 mov     ecx, [ebp+arg_0]
.text:00412B06                 mov     eax, [ebp+arg_8]
.text:00412B09                 mov     [ebp+var_24], 0
.text:00412B10                 test    ebx, ebx
.text:00412B12                 mov     edx, [ebp+arg_C]
.text:00412B15                 mov     [ebp+var_1C], 0
.text:00412B1C                 js      loc_412C94
.text:00412B22
.text:00412B22 loc_412B22:                             ; CODE XREF: sub_412AF0+1B2↓j
.text:00412B22                 test    edx, edx
.text:00412B24                 js      loc_412C88
.text:00412B2A
.text:00412B2A loc_412B2A:                             ; CODE XREF: sub_412AF0+19F↓j
.text:00412B2A                 mov     [ebp+var_2C], edx
.text:00412B2D                 test    edx, edx
.text:00412B2F                 mov     esi, eax
.text:00412B31                 mov     [ebp+var_30], ecx
.text:00412B34                 mov     edi, ebx
.text:00412B36                 jnz     short loc_412BA1
.text:00412B38                 cmp     eax, ebx
.text:00412B3A                 jbe     short loc_412B84
.text:00412B3C                 mov     eax, ecx
.text:00412B3E                 mov     edx, ebx
.text:00412B40                 div     esi
.text:00412B42
.text:00412B42 loc_412B42:                             ; CODE XREF: sub_412AF0+AF↓j
.text:00412B42                 mov     [ebp+var_30], edx
.text:00412B45                 lea     ecx, [ebp+var_18]
.text:00412B48                 test    ecx, ecx
.text:00412B4A                 jz      short loc_412B65
.text:00412B4C                 mov     [ebp+var_24], 0
.text:00412B53
.text:00412B53 loc_412B53:                             ; CODE XREF: sub_412AF0+FE↓j
.text:00412B53                 mov     eax, [ebp+var_30]
.text:00412B56                 mov     [ebp+var_28], eax
.text:00412B59                 mov     edx, [ebp+var_28]
.text:00412B5C                 mov     ecx, [ebp+var_24]
.text:00412B5F                 mov     [ebp+var_18], edx
.text:00412B62                 mov     [ebp+var_14], ecx
.text:00412B65
.text:00412B65 loc_412B65:                             ; CODE XREF: sub_412AF0+5A↑j
.text:00412B65                                         ; sub_412AF0+C8↓j ...
.text:00412B65                 mov     eax, [ebp+var_1C]
.text:00412B68                 test    eax, eax
.text:00412B6A                 jz      short loc_412B76
.text:00412B6C                 neg     [ebp+var_18]
.text:00412B6F                 adc     [ebp+var_14], 0
.text:00412B73                 neg     [ebp+var_14]
.text:00412B76
.text:00412B76 loc_412B76:                             ; CODE XREF: sub_412AF0+7A↑j
.text:00412B76                 mov     eax, [ebp+var_18]
.text:00412B79                 mov     edx, [ebp+var_14]
.text:00412B7C                 add     esp, 34h
.text:00412B7F                 pop     ebx
.text:00412B80                 pop     esi
.text:00412B81                 pop     edi
.text:00412B82                 pop     ebp
.text:00412B83                 retn
.text:00412B84 ; ---------------------------------------------------------------------------
.text:00412B84
.text:00412B84 loc_412B84:                             ; CODE XREF: sub_412AF0+4A↑j
.text:00412B84                 test    eax, eax
.text:00412B86                 jnz     short loc_412B93
.text:00412B88                 mov     eax, 1
.text:00412B8D                 xor     edx, edx
.text:00412B8F                 div     esi
.text:00412B91                 mov     esi, eax
.text:00412B93
.text:00412B93 loc_412B93:                             ; CODE XREF: sub_412AF0+96↑j
.text:00412B93                 mov     eax, edi
.text:00412B95                 mov     edx, [ebp+var_2C]
.text:00412B98                 div     esi
.text:00412B9A                 mov     eax, [ebp+var_30]
.text:00412B9D                 div     esi
.text:00412B9F                 jmp     short loc_412B42
.text:00412BA1 ; ---------------------------------------------------------------------------
.text:00412BA1
.text:00412BA1 loc_412BA1:                             ; CODE XREF: sub_412AF0+46↑j
.text:00412BA1                 cmp     [ebp+var_2C], ebx
.text:00412BA4                 jbe     short loc_412BC0
.text:00412BA6                 mov     [ebp+var_28], ecx
.text:00412BA9
.text:00412BA9 loc_412BA9:                             ; CODE XREF: sub_412AF0+17E↓j
.text:00412BA9                 mov     [ebp+var_24], edi
.text:00412BAC                 mov     eax, [ebp+var_28]
.text:00412BAF                 mov     edx, [ebp+var_24]
.text:00412BB2                 mov     [ebp+var_18], eax
.text:00412BB5                 mov     [ebp+var_14], edx
.text:00412BB8                 jmp     short loc_412B65
.text:00412BB8 ; ---------------------------------------------------------------------------
.text:00412BBA                 align 10h
.text:00412BC0
.text:00412BC0 loc_412BC0:                             ; CODE XREF: sub_412AF0+B4↑j
.text:00412BC0                 bsr     eax, [ebp+var_2C]
.text:00412BC4                 mov     ebx, eax
.text:00412BC6                 xor     ebx, 1Fh
.text:00412BC9                 jnz     short loc_412BF3
.text:00412BCB                 cmp     edi, [ebp+var_2C]
.text:00412BCE                 ja      short loc_412BD5
.text:00412BD0                 cmp     [ebp+var_30], esi
.text:00412BD3                 jb      short loc_412BE0
.text:00412BD5
.text:00412BD5 loc_412BD5:                             ; CODE XREF: sub_412AF0+DE↑j
.text:00412BD5                 mov     edx, [ebp+var_30]
.text:00412BD8                 sub     edx, esi
.text:00412BDA                 sbb     edi, [ebp+var_2C]
.text:00412BDD                 mov     [ebp+var_30], edx
.text:00412BE0
.text:00412BE0 loc_412BE0:                             ; CODE XREF: sub_412AF0+E3↑j
.text:00412BE0                 lea     ecx, [ebp+var_18]
.text:00412BE3                 test    ecx, ecx
.text:00412BE5                 jz      loc_412B65
.text:00412BEB                 mov     [ebp+var_24], edi
.text:00412BEE                 jmp     loc_412B53
.text:00412BF3 ; ---------------------------------------------------------------------------
.text:00412BF3
.text:00412BF3 loc_412BF3:                             ; CODE XREF: sub_412AF0+D9↑j
.text:00412BF3                 mov     edx, [ebp+var_2C]
.text:00412BF6                 mov     eax, 20h ; ' '
.text:00412BFB                 mov     cl, bl
.text:00412BFD                 sub     eax, ebx
.text:00412BFF                 mov     [ebp+var_34], eax
.text:00412C02                 shl     edx, cl
.text:00412C04                 mov     eax, esi
.text:00412C06                 movzx   ecx, byte ptr [ebp+var_34]
.text:00412C0A                 shr     eax, cl
.text:00412C0C                 mov     cl, bl
.text:00412C0E                 shl     esi, cl
.text:00412C10                 or      edx, eax
.text:00412C12                 mov     eax, [ebp+var_30]
.text:00412C15                 movzx   ecx, byte ptr [ebp+var_34]
.text:00412C19                 mov     [ebp+var_2C], edx
.text:00412C1C                 mov     edx, edi
.text:00412C1E                 shr     edx, cl
.text:00412C20                 mov     cl, bl
.text:00412C22                 shl     edi, cl
.text:00412C24                 movzx   ecx, byte ptr [ebp+var_34]
.text:00412C28                 shr     eax, cl
.text:00412C2A                 or      edi, eax
.text:00412C2C                 mov     eax, edi
.text:00412C2E                 mov     cl, bl
.text:00412C30                 div     [ebp+var_2C]
.text:00412C33                 shl     [ebp+var_30], cl
.text:00412C36                 mov     edi, edx
.text:00412C38                 mul     esi
.text:00412C3A                 mov     [ebp+var_3C], eax
.text:00412C3D                 cmp     edx, edi
.text:00412C3F                 ja      short loc_412C7B
.text:00412C41                 cmp     edx, edi
.text:00412C43                 jz      short loc_412C73
.text:00412C45
.text:00412C45 loc_412C45:                             ; CODE XREF: sub_412AF0+189↓j
.text:00412C45                                         ; sub_412AF0+196↓j
.text:00412C45                 lea     eax, [ebp+var_18]
.text:00412C48                 test    eax, eax
.text:00412C4A                 jz      loc_412B65
.text:00412C50                 movzx   ecx, byte ptr [ebp+var_34]
.text:00412C54                 mov     eax, [ebp+var_30]
.text:00412C57                 sub     eax, [ebp+var_3C]
.text:00412C5A                 sbb     edi, edx
.text:00412C5C                 mov     [ebp+var_30], eax
.text:00412C5F                 mov     edx, edi
.text:00412C61                 shl     edx, cl
.text:00412C63                 mov     cl, bl
.text:00412C65                 shr     eax, cl
.text:00412C67                 or      edx, eax
.text:00412C69                 mov     [ebp+var_28], edx
.text:00412C6C                 shr     edi, cl
.text:00412C6E                 jmp     loc_412BA9
.text:00412C73 ; ---------------------------------------------------------------------------
.text:00412C73
.text:00412C73 loc_412C73:                             ; CODE XREF: sub_412AF0+153↑j
.text:00412C73                 mov     eax, [ebp+var_30]
.text:00412C76                 cmp     [ebp+var_3C], eax
.text:00412C79                 jbe     short loc_412C45
.text:00412C7B
.text:00412C7B loc_412C7B:                             ; CODE XREF: sub_412AF0+14F↑j
.text:00412C7B                 mov     ecx, [ebp+var_3C]
.text:00412C7E                 sub     ecx, esi
.text:00412C80                 sbb     edx, [ebp+var_2C]
.text:00412C83                 mov     [ebp+var_3C], ecx
.text:00412C86                 jmp     short loc_412C45
.text:00412C88 ; ---------------------------------------------------------------------------
.text:00412C88
.text:00412C88 loc_412C88:                             ; CODE XREF: sub_412AF0+34↑j
.text:00412C88                 neg     eax
.text:00412C8A                 adc     edx, 0
.text:00412C8D                 neg     edx
.text:00412C8F                 jmp     loc_412B2A
.text:00412C94 ; ---------------------------------------------------------------------------
.text:00412C94
.text:00412C94 loc_412C94:                             ; CODE XREF: sub_412AF0+2C↑j
.text:00412C94                 mov     [ebp+var_1C], 0FFFFFFFFh
.text:00412C9B                 neg     ecx
.text:00412C9D                 adc     ebx, 0
.text:00412CA0                 neg     ebx
.text:00412CA2                 jmp     loc_412B22
.text:00412CA2 sub_412AF0      endp
.text:00412CA2
.text:00412CA2 ; ---------------------------------------------------------------------------
.text:00412CA7                 align 10h
.text:00412CB0
.text:00412CB0 ; =============== S U B R O U T I N E =======================================
.text:00412CB0
.text:00412CB0 ; Attributes: bp-based frame
.text:00412CB0
.text:00412CB0 sub_412CB0      proc near               ; CODE XREF: sub_406560+58↑p
.text:00412CB0                                         ; sub_406560+AA↑p
.text:00412CB0
.text:00412CB0 var_2C          = dword ptr -2Ch
.text:00412CB0 var_28          = dword ptr -28h
.text:00412CB0 var_24          = dword ptr -24h
.text:00412CB0 var_20          = dword ptr -20h
.text:00412CB0 var_1C          = dword ptr -1Ch
.text:00412CB0 var_14          = dword ptr -14h
.text:00412CB0 arg_0           = dword ptr  8
.text:00412CB0 arg_4           = dword ptr  0Ch
.text:00412CB0 arg_8           = dword ptr  10h
.text:00412CB0 arg_C           = dword ptr  14h
.text:00412CB0
.text:00412CB0                 push    ebp
.text:00412CB1                 mov     ebp, esp
.text:00412CB3                 push    edi
.text:00412CB4                 push    esi
.text:00412CB5                 push    ebx
.text:00412CB6                 sub     esp, 24h
.text:00412CB9                 mov     ebx, [ebp+arg_4]
.text:00412CBC                 mov     [ebp+var_20], 0
.text:00412CC3                 mov     ecx, [ebp+arg_0]
.text:00412CC6                 mov     eax, [ebp+arg_8]
.text:00412CC9                 mov     [ebp+var_1C], 0
.text:00412CD0                 test    ebx, ebx
.text:00412CD2                 mov     edx, [ebp+arg_C]
.text:00412CD5                 mov     [ebp+var_14], 0
.text:00412CDC                 js      loc_412DF0
.text:00412CE2
.text:00412CE2 loc_412CE2:                             ; CODE XREF: sub_412CB0+14E↓j
.text:00412CE2                 test    edx, edx
.text:00412CE4                 js      loc_412DE0
.text:00412CEA
.text:00412CEA loc_412CEA:                             ; CODE XREF: sub_412CB0+13A↓j
.text:00412CEA                 mov     [ebp+var_24], ecx
.text:00412CED                 test    edx, edx
.text:00412CEF                 mov     esi, eax
.text:00412CF1                 jnz     short loc_412D46
.text:00412CF3                 cmp     eax, ebx
.text:00412CF5                 jbe     short loc_412D24
.text:00412CF7                 mov     eax, ecx
.text:00412CF9                 mov     edx, ebx
.text:00412CFB                 div     esi
.text:00412CFD                 mov     edi, eax
.text:00412CFF                 nop
.text:00412D00
.text:00412D00 loc_412D00:                             ; CODE XREF: sub_412CB0+9C↓j
.text:00412D00                                         ; sub_412CB0+B4↓j ...
.text:00412D00                 xor     ecx, ecx
.text:00412D02
.text:00412D02 loc_412D02:                             ; CODE XREF: sub_412CB0+94↓j
.text:00412D02                 mov     [ebp+var_1C], ecx
.text:00412D05                 mov     ecx, [ebp+var_14]
.text:00412D08                 mov     [ebp+var_20], edi
.text:00412D0B                 mov     eax, [ebp+var_20]
.text:00412D0E                 mov     edx, [ebp+var_1C]
.text:00412D11                 test    ecx, ecx
.text:00412D13                 jz      short loc_412D1C
.text:00412D15                 neg     eax
.text:00412D17                 adc     edx, 0
.text:00412D1A                 neg     edx
.text:00412D1C
.text:00412D1C loc_412D1C:                             ; CODE XREF: sub_412CB0+63↑j
.text:00412D1C                 add     esp, 24h
.text:00412D1F                 pop     ebx
.text:00412D20                 pop     esi
.text:00412D21                 pop     edi
.text:00412D22                 pop     ebp
.text:00412D23                 retn
.text:00412D24 ; ---------------------------------------------------------------------------
.text:00412D24
.text:00412D24 loc_412D24:                             ; CODE XREF: sub_412CB0+45↑j
.text:00412D24                 test    eax, eax
.text:00412D26                 jnz     short loc_412D35
.text:00412D28                 mov     eax, 1
.text:00412D2D                 xor     ecx, ecx
.text:00412D2F                 xor     edx, edx
.text:00412D31                 div     ecx
.text:00412D33                 mov     esi, eax
.text:00412D35
.text:00412D35 loc_412D35:                             ; CODE XREF: sub_412CB0+76↑j
.text:00412D35                 mov     eax, ebx
.text:00412D37                 xor     edx, edx
.text:00412D39                 div     esi
.text:00412D3B                 mov     ecx, eax
.text:00412D3D                 mov     eax, [ebp+var_24]
.text:00412D40                 div     esi
.text:00412D42                 mov     edi, eax
.text:00412D44                 jmp     short loc_412D02
.text:00412D46 ; ---------------------------------------------------------------------------
.text:00412D46
.text:00412D46 loc_412D46:                             ; CODE XREF: sub_412CB0+41↑j
.text:00412D46                 cmp     edx, ebx
.text:00412D48                 jbe     short loc_412D50
.text:00412D4A                 xor     edi, edi
.text:00412D4C                 jmp     short loc_412D00
.text:00412D4C ; ---------------------------------------------------------------------------
.text:00412D4E                 align 10h
.text:00412D50
.text:00412D50 loc_412D50:                             ; CODE XREF: sub_412CB0+98↑j
.text:00412D50                 bsr     eax, edx
.text:00412D53                 xor     eax, 1Fh
.text:00412D56                 mov     [ebp+var_28], eax
.text:00412D59                 jnz     short loc_412D70
.text:00412D5B                 cmp     ebx, edx
.text:00412D5D                 ja      short loc_412D66
.text:00412D5F                 xor     edi, edi
.text:00412D61                 cmp     [ebp+var_24], esi
.text:00412D64                 jb      short loc_412D00
.text:00412D66
.text:00412D66 loc_412D66:                             ; CODE XREF: sub_412CB0+AD↑j
.text:00412D66                 mov     edi, 1
.text:00412D6B                 jmp     short loc_412D00
.text:00412D6B ; ---------------------------------------------------------------------------
.text:00412D6D                 align 10h
.text:00412D70
.text:00412D70 loc_412D70:                             ; CODE XREF: sub_412CB0+A9↑j
.text:00412D70                 mov     eax, [ebp+var_28]
.text:00412D73                 mov     ecx, 20h ; ' '
.text:00412D78                 sub     ecx, eax
.text:00412D7A                 mov     [ebp+var_2C], ecx
.text:00412D7D                 mov     eax, esi
.text:00412D7F                 movzx   ecx, byte ptr [ebp+var_28]
.text:00412D83                 shl     edx, cl
.text:00412D85                 mov     edi, edx
.text:00412D87                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412D8B                 mov     edx, ebx
.text:00412D8D                 shr     eax, cl
.text:00412D8F                 movzx   ecx, byte ptr [ebp+var_28]
.text:00412D93                 or      edi, eax
.text:00412D95                 mov     eax, [ebp+var_24]
.text:00412D98                 shl     esi, cl
.text:00412D9A                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412D9E                 shr     edx, cl
.text:00412DA0                 movzx   ecx, byte ptr [ebp+var_28]
.text:00412DA4                 shl     ebx, cl
.text:00412DA6                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412DAA                 shr     eax, cl
.text:00412DAC                 or      ebx, eax
.text:00412DAE                 movzx   ecx, byte ptr [ebp+var_28]
.text:00412DB2                 mov     eax, ebx
.text:00412DB4                 div     edi
.text:00412DB6                 mov     ebx, edx
.text:00412DB8                 mov     edi, eax
.text:00412DBA                 shl     [ebp+var_24], cl
.text:00412DBD                 mul     esi
.text:00412DBF                 cmp     edx, ebx
.text:00412DC1                 ja      short loc_412DD4
.text:00412DC3                 cmp     edx, ebx
.text:00412DC5                 jnz     loc_412D00
.text:00412DCB                 cmp     eax, [ebp+var_24]
.text:00412DCE                 jbe     loc_412D00
.text:00412DD4
.text:00412DD4 loc_412DD4:                             ; CODE XREF: sub_412CB0+111↑j
.text:00412DD4                 dec     edi
.text:00412DD5                 jmp     loc_412D00
.text:00412DD5 ; ---------------------------------------------------------------------------
.text:00412DDA                 align 10h
.text:00412DE0
.text:00412DE0 loc_412DE0:                             ; CODE XREF: sub_412CB0+34↑j
.text:00412DE0                 not     [ebp+var_14]
.text:00412DE3                 neg     eax
.text:00412DE5                 adc     edx, 0
.text:00412DE8                 neg     edx
.text:00412DEA                 jmp     loc_412CEA
.text:00412DEA ; ---------------------------------------------------------------------------
.text:00412DEF                 align 10h
.text:00412DF0
.text:00412DF0 loc_412DF0:                             ; CODE XREF: sub_412CB0+2C↑j
.text:00412DF0                 mov     [ebp+var_14], 0FFFFFFFFh
.text:00412DF7                 neg     ecx
.text:00412DF9                 adc     ebx, 0
.text:00412DFC                 neg     ebx
.text:00412DFE                 jmp     loc_412CE2
.text:00412DFE sub_412CB0      endp
.text:00412DFE
.text:00412DFE ; ---------------------------------------------------------------------------
.text:00412E03                 align 10h
.text:00412E10
.text:00412E10 ; =============== S U B R O U T I N E =======================================
.text:00412E10
.text:00412E10 ; Attributes: bp-based frame
.text:00412E10
.text:00412E10 sub_412E10      proc near               ; CODE XREF: sub_407AD0+12B↑p
.text:00412E10                                         ; sub_407AD0+70E↑p ...
.text:00412E10
.text:00412E10 var_34          = dword ptr -34h
.text:00412E10 var_2C          = dword ptr -2Ch
.text:00412E10 var_28          = dword ptr -28h
.text:00412E10 var_24          = dword ptr -24h
.text:00412E10 var_20          = dword ptr -20h
.text:00412E10 var_1C          = dword ptr -1Ch
.text:00412E10 var_18          = dword ptr -18h
.text:00412E10 var_14          = dword ptr -14h
.text:00412E10 arg_0           = dword ptr  8
.text:00412E10 arg_4           = dword ptr  0Ch
.text:00412E10 arg_8           = dword ptr  10h
.text:00412E10 arg_C           = dword ptr  14h
.text:00412E10
.text:00412E10                 push    ebp
.text:00412E11                 mov     ebp, esp
.text:00412E13                 push    edi
.text:00412E14                 push    esi
.text:00412E15                 push    ebx
.text:00412E16                 sub     esp, 2Ch
.text:00412E19                 mov     edx, [ebp+arg_C]
.text:00412E1C                 mov     [ebp+var_20], 0
.text:00412E23                 mov     ecx, [ebp+arg_0]
.text:00412E26                 mov     ebx, [ebp+arg_4]
.text:00412E29                 mov     [ebp+var_1C], 0
.text:00412E30                 mov     eax, [ebp+arg_8]
.text:00412E33                 test    edx, edx
.text:00412E35                 mov     [ebp+var_24], edx
.text:00412E38                 mov     edi, ebx
.text:00412E3A                 mov     esi, eax
.text:00412E3C                 mov     [ebp+var_28], ecx
.text:00412E3F                 jnz     short loc_412EA0
.text:00412E41                 cmp     eax, ebx
.text:00412E43                 jbe     short loc_412E80
.text:00412E45                 mov     eax, ecx
.text:00412E47                 mov     edx, ebx
.text:00412E49                 div     esi
.text:00412E4B
.text:00412E4B loc_412E4B:                             ; CODE XREF: sub_412E10+8B↓j
.text:00412E4B                 mov     [ebp+var_28], edx
.text:00412E4E                 lea     ecx, [ebp+var_18]
.text:00412E51                 test    ecx, ecx
.text:00412E53                 jz      short loc_412E6E
.text:00412E55                 mov     [ebp+var_1C], 0
.text:00412E5C
.text:00412E5C loc_412E5C:                             ; CODE XREF: sub_412E10+DA↓j
.text:00412E5C                 mov     eax, [ebp+var_28]
.text:00412E5F                 mov     [ebp+var_20], eax
.text:00412E62                 mov     edx, [ebp+var_20]
.text:00412E65                 mov     ecx, [ebp+var_1C]
.text:00412E68                 mov     [ebp+var_18], edx
.text:00412E6B                 mov     [ebp+var_14], ecx
.text:00412E6E
.text:00412E6E loc_412E6E:                             ; CODE XREF: sub_412E10+43↑j
.text:00412E6E                                         ; sub_412E10+A7↓j ...
.text:00412E6E                 mov     eax, [ebp+var_18]
.text:00412E71                 mov     edx, [ebp+var_14]
.text:00412E74                 add     esp, 2Ch
.text:00412E77                 pop     ebx
.text:00412E78                 pop     esi
.text:00412E79                 pop     edi
.text:00412E7A                 pop     ebp
.text:00412E7B                 retn
.text:00412E7B ; ---------------------------------------------------------------------------
.text:00412E7C                 align 10h
.text:00412E80
.text:00412E80 loc_412E80:                             ; CODE XREF: sub_412E10+33↑j
.text:00412E80                 test    eax, eax
.text:00412E82                 jnz     short loc_412E8F
.text:00412E84                 mov     eax, 1
.text:00412E89                 xor     edx, edx
.text:00412E8B                 div     esi
.text:00412E8D                 mov     esi, eax
.text:00412E8F
.text:00412E8F loc_412E8F:                             ; CODE XREF: sub_412E10+72↑j
.text:00412E8F                 mov     eax, edi
.text:00412E91                 mov     edx, [ebp+var_24]
.text:00412E94                 div     esi
.text:00412E96                 mov     eax, [ebp+var_28]
.text:00412E99                 div     esi
.text:00412E9B                 jmp     short loc_412E4B
.text:00412E9B ; ---------------------------------------------------------------------------
.text:00412E9D                 align 10h
.text:00412EA0
.text:00412EA0 loc_412EA0:                             ; CODE XREF: sub_412E10+2F↑j
.text:00412EA0                 cmp     [ebp+var_24], ebx
.text:00412EA3                 jbe     short loc_412EC0
.text:00412EA5                 mov     [ebp+var_20], ecx
.text:00412EA8
.text:00412EA8 loc_412EA8:                             ; CODE XREF: sub_412E10+15B↓j
.text:00412EA8                 mov     [ebp+var_1C], edi
.text:00412EAB                 mov     eax, [ebp+var_20]
.text:00412EAE                 mov     edx, [ebp+var_1C]
.text:00412EB1                 mov     [ebp+var_18], eax
.text:00412EB4                 mov     [ebp+var_14], edx
.text:00412EB7                 jmp     short loc_412E6E
.text:00412EB7 ; ---------------------------------------------------------------------------
.text:00412EB9                 align 10h
.text:00412EC0
.text:00412EC0 loc_412EC0:                             ; CODE XREF: sub_412E10+93↑j
.text:00412EC0                 bsr     eax, [ebp+var_24]
.text:00412EC4                 mov     ebx, eax
.text:00412EC6                 xor     ebx, 1Fh
.text:00412EC9                 jnz     short loc_412EF0
.text:00412ECB                 cmp     edi, [ebp+var_24]
.text:00412ECE                 ja      short loc_412ED5
.text:00412ED0                 cmp     [ebp+var_28], esi
.text:00412ED3                 jb      short loc_412EE0
.text:00412ED5
.text:00412ED5 loc_412ED5:                             ; CODE XREF: sub_412E10+BE↑j
.text:00412ED5                 mov     edx, [ebp+var_28]
.text:00412ED8                 sub     edx, esi
.text:00412EDA                 sbb     edi, [ebp+var_24]
.text:00412EDD                 mov     [ebp+var_28], edx
.text:00412EE0
.text:00412EE0 loc_412EE0:                             ; CODE XREF: sub_412E10+C3↑j
.text:00412EE0                 lea     ecx, [ebp+var_18]
.text:00412EE3                 test    ecx, ecx
.text:00412EE5                 jz      short loc_412E6E
.text:00412EE7                 mov     [ebp+var_1C], edi
.text:00412EEA                 jmp     loc_412E5C
.text:00412EEA ; ---------------------------------------------------------------------------
.text:00412EEF                 align 10h
.text:00412EF0
.text:00412EF0 loc_412EF0:                             ; CODE XREF: sub_412E10+B9↑j
.text:00412EF0                 mov     edx, [ebp+var_24]
.text:00412EF3                 mov     eax, 20h ; ' '
.text:00412EF8                 mov     cl, bl
.text:00412EFA                 sub     eax, ebx
.text:00412EFC                 mov     [ebp+var_2C], eax
.text:00412EFF                 shl     edx, cl
.text:00412F01                 mov     eax, esi
.text:00412F03                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412F07                 shr     eax, cl
.text:00412F09                 mov     cl, bl
.text:00412F0B                 shl     esi, cl
.text:00412F0D                 or      edx, eax
.text:00412F0F                 mov     eax, [ebp+var_28]
.text:00412F12                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412F16                 mov     [ebp+var_24], edx
.text:00412F19                 mov     edx, edi
.text:00412F1B                 shr     edx, cl
.text:00412F1D                 mov     cl, bl
.text:00412F1F                 shl     edi, cl
.text:00412F21                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412F25                 shr     eax, cl
.text:00412F27                 or      edi, eax
.text:00412F29                 mov     eax, edi
.text:00412F2B                 mov     cl, bl
.text:00412F2D                 div     [ebp+var_24]
.text:00412F30                 shl     [ebp+var_28], cl
.text:00412F33                 mov     edi, edx
.text:00412F35                 mul     esi
.text:00412F37                 mov     [ebp+var_34], eax
.text:00412F3A                 cmp     edx, edi
.text:00412F3C                 ja      short loc_412F78
.text:00412F3E                 cmp     edx, edi
.text:00412F40                 jz      short loc_412F70
.text:00412F42
.text:00412F42 loc_412F42:                             ; CODE XREF: sub_412E10+166↓j
.text:00412F42                                         ; sub_412E10+173↓j
.text:00412F42                 lea     eax, [ebp+var_18]
.text:00412F45                 test    eax, eax
.text:00412F47                 jz      loc_412E6E
.text:00412F4D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412F51                 mov     eax, [ebp+var_28]
.text:00412F54                 sub     eax, [ebp+var_34]
.text:00412F57                 sbb     edi, edx
.text:00412F59                 mov     [ebp+var_28], eax
.text:00412F5C                 mov     edx, edi
.text:00412F5E                 shl     edx, cl
.text:00412F60                 mov     cl, bl
.text:00412F62                 shr     eax, cl
.text:00412F64                 or      edx, eax
.text:00412F66                 mov     [ebp+var_20], edx
.text:00412F69                 shr     edi, cl
.text:00412F6B                 jmp     loc_412EA8
.text:00412F70 ; ---------------------------------------------------------------------------
.text:00412F70
.text:00412F70 loc_412F70:                             ; CODE XREF: sub_412E10+130↑j
.text:00412F70                 mov     eax, [ebp+var_28]
.text:00412F73                 cmp     [ebp+var_34], eax
.text:00412F76                 jbe     short loc_412F42
.text:00412F78
.text:00412F78 loc_412F78:                             ; CODE XREF: sub_412E10+12C↑j
.text:00412F78                 mov     ecx, [ebp+var_34]
.text:00412F7B                 sub     ecx, esi
.text:00412F7D                 sbb     edx, [ebp+var_24]
.text:00412F80                 mov     [ebp+var_34], ecx
.text:00412F83                 jmp     short loc_412F42
.text:00412F83 sub_412E10      endp
.text:00412F83
.text:00412F83 ; ---------------------------------------------------------------------------
.text:00412F85                 align 10h
.text:00412F90 flt_412F90      dd 2.3283064e-10        ; DATA XREF: sub_412FA0+2B↓r
.text:00412F94 flt_412F94      dd 1.8446744e19         ; DATA XREF: sub_412FA0:loc_413034↓r
.text:00412F98                 align 10h
.text:00412FA0
.text:00412FA0 ; =============== S U B R O U T I N E =======================================
.text:00412FA0
.text:00412FA0 ; Attributes: bp-based frame
.text:00412FA0
.text:00412FA0 ; int __cdecl sub_412FA0(_TBYTE)
.text:00412FA0 sub_412FA0      proc near               ; CODE XREF: sub_407AD0+250↑p
.text:00412FA0                                         ; sub_407AD0+52C↑p ...
.text:00412FA0
.text:00412FA0 var_20          = qword ptr -20h
.text:00412FA0 var_18          = qword ptr -18h
.text:00412FA0 var_C           = word ptr -0Ch
.text:00412FA0 var_A           = word ptr -0Ah
.text:00412FA0 var_4           = dword ptr -4
.text:00412FA0 arg_0           = tbyte ptr  8
.text:00412FA0
.text:00412FA0                 push    ebp
.text:00412FA1                 fldz
.text:00412FA3                 mov     ebp, esp
.text:00412FA5                 sub     esp, 18h
.text:00412FA8                 fld     [ebp+arg_0]
.text:00412FAB                 fxch    st(1)
.text:00412FAD                 mov     [ebp+var_4], ebx
.text:00412FB0                 fucom   st(1)
.text:00412FB2                 fnstsw  ax
.text:00412FB4                 sahf
.text:00412FB5                 jbe     short loc_412FC6
.text:00412FB7                 fstp    st
.text:00412FB9                 fstp    st
.text:00412FBB                 xor     eax, eax
.text:00412FBD                 xor     edx, edx
.text:00412FBF
.text:00412FBF loc_412FBF:                             ; CODE XREF: sub_412FA0+7A↓j
.text:00412FBF                 mov     ebx, [ebp+var_4]
.text:00412FC2                 mov     esp, ebp
.text:00412FC4                 pop     ebp
.text:00412FC5                 retn
.text:00412FC6 ; ---------------------------------------------------------------------------
.text:00412FC6
.text:00412FC6 loc_412FC6:                             ; CODE XREF: sub_412FA0+15↑j
.text:00412FC6                 fnstcw  [ebp+var_A]
.text:00412FC9                 xor     ecx, ecx
.text:00412FCB                 fld     ds:flt_412F90
.text:00412FD1                 movzx   eax, [ebp+var_A]
.text:00412FD5                 fmul    st, st(2)
.text:00412FD7                 or      ax, 0C00h
.text:00412FDB                 mov     [ebp+var_C], ax
.text:00412FDF                 fldcw   [ebp+var_C]
.text:00412FE2                 fistp   [ebp+var_18]
.text:00412FE5                 fldcw   [ebp+var_A]
.text:00412FE8                 mov     eax, dword ptr [ebp+var_18]
.text:00412FEB                 mov     ebx, eax
.text:00412FED                 push    eax
.text:00412FEE                 push    ecx
.text:00412FEF                 fild    [esp+20h+var_20]
.text:00412FF2                 add     esp, 8
.text:00412FF5                 test    eax, eax
.text:00412FF7                 js      short loc_413034
.text:00412FF9
.text:00412FF9 loc_412FF9:                             ; CODE XREF: sub_412FA0+9A↓j
.text:00412FF9                 fsubp   st(2), st
.text:00412FFB                 fucomp  st(1)
.text:00412FFD                 fnstsw  ax
.text:00412FFF                 sahf
.text:00413000                 jbe     short loc_413020
.text:00413002                 fchs
.text:00413004                 xor     edx, edx
.text:00413006                 fldcw   [ebp+var_C]
.text:00413009                 fistp   [ebp+var_18]
.text:0041300C                 fldcw   [ebp+var_A]
.text:0041300F                 mov     eax, dword ptr [ebp+var_18]
.text:00413012                 sub     ecx, eax
.text:00413014                 sbb     ebx, edx
.text:00413016
.text:00413016 loc_413016:                             ; CODE XREF: sub_412FA0+92↓j
.text:00413016                 mov     eax, ecx
.text:00413018                 mov     edx, ebx
.text:0041301A                 jmp     short loc_412FBF
.text:0041301A ; ---------------------------------------------------------------------------
.text:0041301C                 align 10h
.text:00413020
.text:00413020 loc_413020:                             ; CODE XREF: sub_412FA0+60↑j
.text:00413020                 fldcw   [ebp+var_C]
.text:00413023                 fistp   [ebp+var_18]
.text:00413026                 fldcw   [ebp+var_A]
.text:00413029                 xor     edx, edx
.text:0041302B                 mov     eax, dword ptr [ebp+var_18]
.text:0041302E                 add     ecx, eax
.text:00413030                 adc     ebx, edx
.text:00413032                 jmp     short loc_413016
.text:00413034 ; ---------------------------------------------------------------------------
.text:00413034
.text:00413034 loc_413034:                             ; CODE XREF: sub_412FA0+57↑j
.text:00413034                 fadd    ds:flt_412F94
.text:0041303A                 jmp     short loc_412FF9
.text:0041303A sub_412FA0      endp
.text:0041303A
.text:0041303A ; ---------------------------------------------------------------------------
.text:0041303C                 align 10h
.text:00413040
.text:00413040 ; =============== S U B R O U T I N E =======================================
.text:00413040
.text:00413040 ; Attributes: thunk
.text:00413040
.text:00413040 ; int __cdecl isatty(int FileHandle)
.text:00413040 _isatty         proc near               ; CODE XREF: sub_402550+156↑p
.text:00413040                                         ; sub_402550+5F7↑p
.text:00413040
.text:00413040 FileHandle      = dword ptr  4
.text:00413040
.text:00413040                 jmp     ds:__imp__isatty
.text:00413040 _isatty         endp
.text:00413040
.text:00413040 ; ---------------------------------------------------------------------------
.text:00413046                 align 10h
.text:00413050
.text:00413050 ; =============== S U B R O U T I N E =======================================
.text:00413050
.text:00413050 ; Attributes: thunk
.text:00413050
.text:00413050 ; int __cdecl dup2(int FileHandleSrc, int FileHandleDst)
.text:00413050 _dup2           proc near               ; CODE XREF: sub_402550+254↑p
.text:00413050                                         ; sub_402550+569↑p ...
.text:00413050
.text:00413050 FileHandleSrc   = dword ptr  4
.text:00413050 FileHandleDst   = dword ptr  8
.text:00413050
.text:00413050                 jmp     ds:__imp__dup2
.text:00413050 _dup2           endp
.text:00413050
.text:00413050 ; ---------------------------------------------------------------------------
.text:00413056                 align 10h
.text:00413060
.text:00413060 ; =============== S U B R O U T I N E =======================================
.text:00413060
.text:00413060 ; Attributes: thunk
.text:00413060
.text:00413060 ; int open(const char *FileName, int OpenFlag, ...)
.text:00413060 _open           proc near               ; CODE XREF: sub_402550+235↑p
.text:00413060                                         ; sub_402550+54E↑p ...
.text:00413060
.text:00413060 FileName        = dword ptr  4
.text:00413060 OpenFlag        = dword ptr  8
.text:00413060
.text:00413060                 jmp     ds:__imp__open
.text:00413060 _open           endp
.text:00413060
.text:00413060 ; ---------------------------------------------------------------------------
.text:00413066                 align 10h
.text:00413070
.text:00413070 ; =============== S U B R O U T I N E =======================================
.text:00413070
.text:00413070 ; Attributes: thunk
.text:00413070
.text:00413070 ; int __cdecl close(int FileHandle)
.text:00413070 _close          proc near               ; CODE XREF: sub_402550+213↑p
.text:00413070                                         ; sub_402550+266↑p ...
.text:00413070
.text:00413070 FileHandle      = dword ptr  4
.text:00413070
.text:00413070                 jmp     ds:__imp__close
.text:00413070 _close          endp
.text:00413070
.text:00413070 ; ---------------------------------------------------------------------------
.text:00413076                 align 10h
.text:00413080
.text:00413080 ; =============== S U B R O U T I N E =======================================
.text:00413080
.text:00413080 ; Attributes: thunk
.text:00413080
.text:00413080 ; int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.text:00413080 _read           proc near               ; CODE XREF: sub_406C60+2B↑p
.text:00413080
.text:00413080 FileHandle      = dword ptr  4
.text:00413080 DstBuf          = dword ptr  8
.text:00413080 MaxCharCount    = dword ptr  0Ch
.text:00413080
.text:00413080                 jmp     ds:__imp__read
.text:00413080 _read           endp
.text:00413080
.text:00413080 ; ---------------------------------------------------------------------------
.text:00413086                 align 10h
.text:00413090
.text:00413090 ; =============== S U B R O U T I N E =======================================
.text:00413090
.text:00413090 ; Attributes: thunk
.text:00413090
.text:00413090 ; int __cdecl write(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.text:00413090 _write          proc near               ; CODE XREF: sub_40A440+2B↑p
.text:00413090
.text:00413090 FileHandle      = dword ptr  4
.text:00413090 Buf             = dword ptr  8
.text:00413090 MaxCharCount    = dword ptr  0Ch
.text:00413090
.text:00413090                 jmp     ds:__imp__write
.text:00413090 _write          endp
.text:00413090
.text:00413090 ; ---------------------------------------------------------------------------
.text:00413096                 align 10h
.text:004130A0
.text:004130A0 ; =============== S U B R O U T I N E =======================================
.text:004130A0
.text:004130A0 ; Attributes: thunk
.text:004130A0
.text:004130A0 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:004130A0 _stricmp        proc near               ; CODE XREF: sub_40B880+46F↑p
.text:004130A0                                         ; sub_40D800+2E↑p ...
.text:004130A0
.text:004130A0 String1         = dword ptr  4
.text:004130A0 String2         = dword ptr  8
.text:004130A0
.text:004130A0                 jmp     ds:__imp__stricmp
.text:004130A0 _stricmp        endp
.text:004130A0
.text:004130A0 ; ---------------------------------------------------------------------------
.text:004130A6                 align 10h
.text:004130B0
.text:004130B0 ; =============== S U B R O U T I N E =======================================
.text:004130B0
.text:004130B0 ; Attributes: thunk
.text:004130B0
.text:004130B0 ; char *__cdecl strdup(const char *String)
.text:004130B0 _strdup         proc near               ; CODE XREF: sub_40D430+101↑p
.text:004130B0                                         ; .text:0040D69A↑p ...
.text:004130B0
.text:004130B0 String          = dword ptr  4
.text:004130B0
.text:004130B0                 jmp     ds:__imp__strdup
.text:004130B0 _strdup         endp
.text:004130B0
.text:004130B0 ; ---------------------------------------------------------------------------
.text:004130B6                 align 10h
.text:004130C0
.text:004130C0 ; =============== S U B R O U T I N E =======================================
.text:004130C0
.text:004130C0 ; Attributes: thunk
.text:004130C0
.text:004130C0 ; int __cdecl dup(int FileHandle)
.text:004130C0 _dup            proc near               ; CODE XREF: sub_40E320+57↑p
.text:004130C0
.text:004130C0 FileHandle      = dword ptr  4
.text:004130C0
.text:004130C0                 jmp     ds:__imp__dup
.text:004130C0 _dup            endp
.text:004130C0
.text:004130C0 ; ---------------------------------------------------------------------------
.text:004130C6                 align 10h
.text:004130D0
.text:004130D0 ; =============== S U B R O U T I N E =======================================
.text:004130D0
.text:004130D0 ; Attributes: thunk
.text:004130D0
.text:004130D0 ; int __cdecl getpid()
.text:004130D0 _getpid         proc near               ; CODE XREF: sub_410AE0+84↑p
.text:004130D0                 jmp     ds:__imp__getpid
.text:004130D0 _getpid         endp
.text:004130D0
.text:004130D0 ; ---------------------------------------------------------------------------
.text:004130D6                 align 10h
.text:004130E0
.text:004130E0 ; =============== S U B R O U T I N E =======================================
.text:004130E0
.text:004130E0 ; Attributes: thunk
.text:004130E0
.text:004130E0 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:004130E0 _chmod          proc near               ; CODE XREF: sub_410F10+41↑j
.text:004130E0
.text:004130E0 FileName        = dword ptr  4
.text:004130E0 AccessMode      = dword ptr  8
.text:004130E0
.text:004130E0                 jmp     ds:__imp__chmod
.text:004130E0 _chmod          endp
.text:004130E0
.text:004130E0 ; ---------------------------------------------------------------------------
.text:004130E6                 align 10h
.text:004130F0
.text:004130F0 ; =============== S U B R O U T I N E =======================================
.text:004130F0
.text:004130F0 ; Attributes: info_from_lumina
.text:004130F0
.text:004130F0 ; unsigned __int64 __cdecl strtoull(const char *String, char **EndPtr, int Radix)
.text:004130F0 _strtoull       proc near               ; CODE XREF: sub_406DA0+AD↑p
.text:004130F0
.text:004130F0 C               = dword ptr -3Ch
.text:004130F0 Type            = dword ptr -38h
.text:004130F0 var_34          = dword ptr -34h
.text:004130F0 var_30          = dword ptr -30h
.text:004130F0 var_2C          = dword ptr -2Ch
.text:004130F0 var_28          = dword ptr -28h
.text:004130F0 var_24          = dword ptr -24h
.text:004130F0 var_20          = dword ptr -20h
.text:004130F0 var_1C          = dword ptr -1Ch
.text:004130F0 var_18          = dword ptr -18h
.text:004130F0 String          = dword ptr  4
.text:004130F0 EndPtr          = dword ptr  8
.text:004130F0 Radix           = dword ptr  0Ch
.text:004130F0
.text:004130F0                 push    ebp
.text:004130F1                 push    edi
.text:004130F2                 push    esi
.text:004130F3                 push    ebx
.text:004130F4                 sub     esp, 2Ch
.text:004130F7                 mov     edx, [esp+3Ch+EndPtr]
.text:004130FB                 test    edx, edx
.text:004130FD                 jz      short loc_413109
.text:004130FF                 mov     eax, [esp+3Ch+String]
.text:00413103                 mov     ecx, [esp+3Ch+EndPtr]
.text:00413107                 mov     [ecx], eax
.text:00413109
.text:00413109 loc_413109:                             ; CODE XREF: _strtoull+D↑j
.text:00413109                 mov     edx, [esp+3Ch+Radix]
.text:0041310D                 test    edx, edx
.text:0041310F                 js      short loc_41311F
.text:00413111                 cmp     [esp+3Ch+Radix], 1
.text:00413116                 jz      short loc_41311F
.text:00413118                 cmp     [esp+3Ch+Radix], 24h ; '$'
.text:0041311D                 jle     short loc_413136
.text:0041311F
.text:0041311F loc_41311F:                             ; CODE XREF: _strtoull+1F↑j
.text:0041311F                                         ; _strtoull+26↑j
.text:0041311F                 call    _errno
.text:00413124                 mov     dword ptr [eax], 21h ; '!'
.text:0041312A
.text:0041312A loc_41312A:                             ; CODE XREF: _strtoull+FF↓j
.text:0041312A                                         ; _strtoull+109↓j
.text:0041312A                 xor     eax, eax
.text:0041312C                 xor     edx, edx
.text:0041312E
.text:0041312E loc_41312E:                             ; CODE XREF: _strtoull+244↓j
.text:0041312E                                         ; _strtoull+251↓j ...
.text:0041312E                 add     esp, 2Ch
.text:00413131                 pop     ebx
.text:00413132                 pop     esi
.text:00413133                 pop     edi
.text:00413134                 pop     ebp
.text:00413135                 retn
.text:00413136 ; ---------------------------------------------------------------------------
.text:00413136
.text:00413136 loc_413136:                             ; CODE XREF: _strtoull+2D↑j
.text:00413136                 mov     ecx, ds:__mb_cur_max
.text:0041313C                 lea     esi, [esi+0]
.text:00413140
.text:00413140 loc_413140:                             ; CODE XREF: _strtoull+7E↓j
.text:00413140                 cmp     dword ptr [ecx], 1
.text:00413143                 mov     esi, [esp+3Ch+String]
.text:00413147                 movsx   edx, byte ptr [esi]
.text:0041314A                 jz      loc_413522
.text:00413150                 mov     [esp+3Ch+Type], 8 ; Type
.text:00413158                 mov     [esp+3Ch+C], edx ; C
.text:0041315B                 call    _isctype
.text:00413160                 mov     ecx, ds:__mb_cur_max
.text:00413166
.text:00413166 loc_413166:                             ; CODE XREF: _strtoull+445↓j
.text:00413166                 test    eax, eax
.text:00413168                 jz      short loc_413170
.text:0041316A                 inc     [esp+3Ch+String]
.text:0041316E                 jmp     short loc_413140
.text:00413170 ; ---------------------------------------------------------------------------
.text:00413170
.text:00413170 loc_413170:                             ; CODE XREF: _strtoull+78↑j
.text:00413170                 mov     esi, [esp+3Ch+String]
.text:00413174                 xor     ebx, ebx
.text:00413176                 movzx   edx, byte ptr [esi]
.text:00413179                 cmp     dl, 2Dh ; '-'
.text:0041317C                 setz    bl
.text:0041317F                 test    ebx, ebx
.text:00413181                 mov     [esp+3Ch+var_20], ebx
.text:00413185                 jnz     loc_413512
.text:0041318B                 cmp     dl, 2Bh ; '+'
.text:0041318E                 jz      loc_413512
.text:00413194
.text:00413194 loc_413194:                             ; CODE XREF: _strtoull+42D↓j
.text:00413194                 mov     ebp, [esp+3Ch+Radix]
.text:00413198                 test    ebp, ebp
.text:0041319A                 jnz     short loc_4131AD
.text:0041319C                 cmp     dl, 30h ; '0'
.text:0041319F                 jz      loc_4134E9
.text:004131A5                 mov     [esp+3Ch+Radix], 0Ah
.text:004131AD
.text:004131AD loc_4131AD:                             ; CODE XREF: _strtoull+AA↑j
.text:004131AD                                         ; _strtoull+40F↓j ...
.text:004131AD                 cmp     [esp+3Ch+Radix], 10h
.text:004131B2                 jz      loc_4134BB
.text:004131B8
.text:004131B8 loc_4131B8:                             ; CODE XREF: _strtoull+3CE↓j
.text:004131B8                                         ; _strtoull+3E2↓j ...
.text:004131B8                 cmp     dword ptr [ecx], 1
.text:004131BB                 movsx   ebx, dl
.text:004131BE                 jz      loc_4134A3
.text:004131C4                 mov     [esp+3Ch+Type], 4 ; Type
.text:004131CC                 mov     [esp+3Ch+C], ebx ; C
.text:004131CF                 call    _isctype
.text:004131D4                 mov     esi, [esp+3Ch+String]
.text:004131D8                 movzx   edx, byte ptr [esi]
.text:004131DB
.text:004131DB loc_4131DB:                             ; CODE XREF: _strtoull+3C6↓j
.text:004131DB                 test    eax, eax
.text:004131DD                 jz      loc_41340C
.text:004131E3                 movsx   eax, dl
.text:004131E6                 sub     eax, 30h ; '0'
.text:004131E9
.text:004131E9 loc_4131E9:                             ; CODE XREF: _strtoull+34B↓j
.text:004131E9                                         ; _strtoull+37C↓j ...
.text:004131E9                 inc     [esp+3Ch+String]
.text:004131ED                 test    eax, eax
.text:004131EF                 js      loc_41312A
.text:004131F5                 cmp     eax, [esp+3Ch+Radix]
.text:004131F9                 jge     loc_41312A
.text:004131FF                 mov     [esp+3Ch+var_1C], eax
.text:00413203                 mov     edx, eax
.text:00413205                 sar     edx, 1Fh
.text:00413208                 mov     [esp+3Ch+var_18], edx
.text:0041320C                 mov     [esp+3Ch+var_24], 0
.text:00413214                 lea     esi, [esi+0]
.text:0041321A                 lea     edi, [edi+0]
.text:00413220
.text:00413220 loc_413220:                             ; CODE XREF: _strtoull+20C↓j
.text:00413220                 mov     ebp, [esp+3Ch+String]
.text:00413224                 mov     ebx, ds:__mb_cur_max
.text:0041322A                 movzx   edx, byte ptr [ebp+0]
.text:0041322E                 cmp     dword ptr [ebx], 1
.text:00413231                 movsx   ecx, dl
.text:00413234                 jz      loc_4133F5
.text:0041323A                 mov     [esp+3Ch+C], ecx ; C
.text:0041323D                 mov     [esp+3Ch+Type], 4 ; Type
.text:00413245                 call    _isctype
.text:0041324A                 mov     ecx, [esp+3Ch+String]
.text:0041324E                 movzx   edx, byte ptr [ecx]
.text:00413251
.text:00413251 loc_413251:                             ; CODE XREF: _strtoull+317↓j
.text:00413251                 test    eax, eax
.text:00413253                 jz      loc_413360
.text:00413259                 movsx   edi, dl
.text:0041325C                 lea     ebp, [edi-30h]
.text:0041325F
.text:0041325F loc_41325F:                             ; CODE XREF: _strtoull+2A3↓j
.text:0041325F                 test    ebp, ebp
.text:00413261                 js      loc_41330B
.text:00413267                 cmp     ebp, [esp+3Ch+Radix]
.text:0041326B                 jge     loc_41330B
.text:00413271                 mov     [esp+3Ch+C], 0FFFFFFFFh
.text:00413278                 mov     eax, [esp+3Ch+Radix]
.text:0041327C                 mov     [esp+3Ch+Type], 0FFFFFFFFh
.text:00413284                 cdq
.text:00413285                 mov     esi, eax
.text:00413287                 mov     [esp+3Ch+var_34], eax
.text:0041328B                 mov     edi, edx
.text:0041328D                 mov     [esp+3Ch+var_30], edx
.text:00413291                 call    sub_4129A0
.text:00413296                 add     eax, 1
.text:00413299                 adc     edx, 0
.text:0041329C                 cmp     [esp+3Ch+var_18], edx
.text:004132A0                 ja      short loc_4132F0
.text:004132A2                 jb      short loc_4132AA
.text:004132A4                 cmp     [esp+3Ch+var_1C], eax
.text:004132A8                 ja      short loc_4132F0
.text:004132AA
.text:004132AA loc_4132AA:                             ; CODE XREF: _strtoull+1B2↑j
.text:004132AA                 mov     eax, [esp+3Ch+var_1C]
.text:004132AE                 mov     ebx, ebp
.text:004132B0                 mul     esi
.text:004132B2                 mov     ecx, edx
.text:004132B4                 mov     [esp+3Ch+var_2C], eax
.text:004132B8                 mov     eax, [esp+3Ch+var_18]
.text:004132BC                 mov     [esp+3Ch+var_28], edx
.text:004132C0                 imul    eax, esi
.text:004132C3                 mov     esi, [esp+3Ch+var_1C]
.text:004132C7                 imul    esi, edi
.text:004132CA                 add     ecx, eax
.text:004132CC                 lea     edi, [esi+ecx]
.text:004132CF                 mov     esi, ebp
.text:004132D1                 sar     esi, 1Fh
.text:004132D4                 add     ebx, [esp+3Ch+var_2C]
.text:004132D8                 mov     [esp+3Ch+var_28], edi
.text:004132DC                 adc     esi, [esp+3Ch+var_28]
.text:004132E0                 cmp     esi, [esp+3Ch+var_18]
.text:004132E4                 jb      short loc_4132F0
.text:004132E6                 ja      short loc_413301
.text:004132E8                 cmp     ebx, [esp+3Ch+var_1C]
.text:004132EC                 jnb     short loc_413301
.text:004132EE                 mov     esi, esi
.text:004132F0
.text:004132F0 loc_4132F0:                             ; CODE XREF: _strtoull+1B0↑j
.text:004132F0                                         ; _strtoull+1B8↑j ...
.text:004132F0                 mov     [esp+3Ch+var_24], 1
.text:004132F8
.text:004132F8 loc_4132F8:                             ; CODE XREF: _strtoull+219↓j
.text:004132F8                 inc     [esp+3Ch+String]
.text:004132FC                 jmp     loc_413220
.text:00413301 ; ---------------------------------------------------------------------------
.text:00413301
.text:00413301 loc_413301:                             ; CODE XREF: _strtoull+1F6↑j
.text:00413301                                         ; _strtoull+1FC↑j
.text:00413301                 mov     [esp+3Ch+var_1C], ebx
.text:00413305                 mov     [esp+3Ch+var_18], esi
.text:00413309                 jmp     short loc_4132F8
.text:0041330B ; ---------------------------------------------------------------------------
.text:0041330B
.text:0041330B loc_41330B:                             ; CODE XREF: _strtoull+171↑j
.text:0041330B                                         ; _strtoull+17B↑j
.text:0041330B                 mov     eax, [esp+3Ch+EndPtr]
.text:0041330F                 test    eax, eax
.text:00413311                 jz      short loc_41331E
.text:00413313                 mov     ecx, [esp+3Ch+String]
.text:00413317                 mov     ebp, [esp+3Ch+EndPtr]
.text:0041331B                 mov     [ebp+0], ecx
.text:0041331E
.text:0041331E loc_41331E:                             ; CODE XREF: _strtoull+221↑j
.text:0041331E                 mov     esi, [esp+3Ch+var_24]
.text:00413322                 test    esi, esi
.text:00413324                 jnz     short loc_413346
.text:00413326                 mov     ebx, [esp+3Ch+var_20]
.text:0041332A                 mov     eax, [esp+3Ch+var_1C]
.text:0041332E                 mov     edx, [esp+3Ch+var_18]
.text:00413332                 test    ebx, ebx
.text:00413334                 jz      loc_41312E
.text:0041333A                 neg     eax
.text:0041333C                 adc     edx, 0
.text:0041333F                 neg     edx
.text:00413341                 jmp     loc_41312E
.text:00413346 ; ---------------------------------------------------------------------------
.text:00413346
.text:00413346 loc_413346:                             ; CODE XREF: _strtoull+234↑j
.text:00413346                 call    _errno
.text:0041334B                 mov     edx, 0FFFFFFFFh
.text:00413350                 mov     dword ptr [eax], 22h ; '"'
.text:00413356                 mov     eax, 0FFFFFFFFh
.text:0041335B                 jmp     loc_41312E
.text:00413360 ; ---------------------------------------------------------------------------
.text:00413360
.text:00413360 loc_413360:                             ; CODE XREF: _strtoull+163↑j
.text:00413360                 mov     ebp, ds:__mb_cur_max
.text:00413366                 movsx   ecx, dl
.text:00413369                 cmp     dword ptr [ebp+0], 1
.text:0041336D                 jz      short loc_4133E1
.text:0041336F                 mov     [esp+3Ch+Type], 1 ; Type
.text:00413377                 mov     [esp+3Ch+C], ecx ; C
.text:0041337A                 call    _isctype
.text:0041337F                 mov     ebp, [esp+3Ch+String]
.text:00413383                 movzx   edx, byte ptr [ebp+0]
.text:00413387
.text:00413387 loc_413387:                             ; CODE XREF: _strtoull+303↓j
.text:00413387                 test    eax, eax
.text:00413389                 jz      short loc_413398
.text:0041338B                 movsx   eax, dl
.text:0041338E                 sub     eax, 37h ; '7'
.text:00413391
.text:00413391 loc_413391:                             ; CODE XREF: _strtoull+2D4↓j
.text:00413391                                         ; _strtoull+2DB↓j
.text:00413391                 mov     ebp, eax
.text:00413393                 jmp     loc_41325F
.text:00413398 ; ---------------------------------------------------------------------------
.text:00413398
.text:00413398 loc_413398:                             ; CODE XREF: _strtoull+299↑j
.text:00413398                 mov     ecx, ds:__mb_cur_max
.text:0041339E                 movsx   edx, dl
.text:004133A1                 cmp     dword ptr [ecx], 1
.text:004133A4                 jz      short loc_4133CD
.text:004133A6                 mov     [esp+3Ch+Type], 2 ; Type
.text:004133AE                 mov     [esp+3Ch+C], edx ; C
.text:004133B1                 call    _isctype
.text:004133B6
.text:004133B6 loc_4133B6:                             ; CODE XREF: _strtoull+2EF↓j
.text:004133B6                 test    eax, eax
.text:004133B8                 jz      short loc_4133C6
.text:004133BA                 mov     edx, [esp+3Ch+String]
.text:004133BE                 movsx   eax, byte ptr [edx]
.text:004133C1                 sub     eax, 57h ; 'W'
.text:004133C4                 jmp     short loc_413391
.text:004133C6 ; ---------------------------------------------------------------------------
.text:004133C6
.text:004133C6 loc_4133C6:                             ; CODE XREF: _strtoull+2C8↑j
.text:004133C6                 mov     eax, 0FFFFFFFFh
.text:004133CB                 jmp     short loc_413391
.text:004133CD ; ---------------------------------------------------------------------------
.text:004133CD
.text:004133CD loc_4133CD:                             ; CODE XREF: _strtoull+2B4↑j
.text:004133CD                 mov     edi, ds:_pctype
.text:004133D3                 mov     ebx, [edi]
.text:004133D5                 movzx   esi, word ptr [ebx+edx*2]
.text:004133D9                 and     esi, 2
.text:004133DC                 movzx   eax, si
.text:004133DF                 jmp     short loc_4133B6
.text:004133E1 ; ---------------------------------------------------------------------------
.text:004133E1
.text:004133E1 loc_4133E1:                             ; CODE XREF: _strtoull+27D↑j
.text:004133E1                 mov     edi, ds:_pctype
.text:004133E7                 mov     ebx, [edi]
.text:004133E9                 movzx   esi, word ptr [ebx+ecx*2]
.text:004133ED                 and     esi, 1
.text:004133F0                 movzx   eax, si
.text:004133F3                 jmp     short loc_413387
.text:004133F5 ; ---------------------------------------------------------------------------
.text:004133F5
.text:004133F5 loc_4133F5:                             ; CODE XREF: _strtoull+144↑j
.text:004133F5                 mov     ebx, ds:_pctype
.text:004133FB                 mov     esi, [ebx]
.text:004133FD                 movzx   edi, word ptr [esi+ecx*2]
.text:00413401                 and     edi, 4
.text:00413404                 movzx   eax, di
.text:00413407                 jmp     loc_413251
.text:0041340C ; ---------------------------------------------------------------------------
.text:0041340C
.text:0041340C loc_41340C:                             ; CODE XREF: _strtoull+ED↑j
.text:0041340C                 mov     ebx, ds:__mb_cur_max
.text:00413412                 movsx   ecx, dl
.text:00413415                 cmp     dword ptr [ebx], 1
.text:00413418                 jz      short loc_41348F
.text:0041341A                 mov     [esp+3Ch+C], ecx ; C
.text:0041341D                 mov     [esp+3Ch+Type], 1 ; Type
.text:00413425                 call    _isctype
.text:0041342A                 mov     ecx, [esp+3Ch+String]
.text:0041342E                 movzx   edx, byte ptr [ecx]
.text:00413431
.text:00413431 loc_413431:                             ; CODE XREF: _strtoull+3B1↓j
.text:00413431                 test    eax, eax
.text:00413433                 jz      short loc_413440
.text:00413435                 movsx   eax, dl
.text:00413438                 sub     eax, 37h ; '7'
.text:0041343B                 jmp     loc_4131E9
.text:00413440 ; ---------------------------------------------------------------------------
.text:00413440
.text:00413440 loc_413440:                             ; CODE XREF: _strtoull+343↑j
.text:00413440                 mov     ebx, ds:__mb_cur_max
.text:00413446                 movsx   edx, dl
.text:00413449                 cmp     dword ptr [ebx], 1
.text:0041344C                 jz      short loc_41347B
.text:0041344E                 mov     [esp+3Ch+Type], 2 ; Type
.text:00413456                 mov     [esp+3Ch+C], edx ; C
.text:00413459                 call    _isctype
.text:0041345E
.text:0041345E loc_41345E:                             ; CODE XREF: _strtoull+39D↓j
.text:0041345E                 test    eax, eax
.text:00413460                 jz      short loc_413471
.text:00413462                 mov     ecx, [esp+3Ch+String]
.text:00413466                 movsx   eax, byte ptr [ecx]
.text:00413469                 sub     eax, 57h ; 'W'
.text:0041346C                 jmp     loc_4131E9
.text:00413471 ; ---------------------------------------------------------------------------
.text:00413471
.text:00413471 loc_413471:                             ; CODE XREF: _strtoull+370↑j
.text:00413471                 mov     eax, 0FFFFFFFFh
.text:00413476                 jmp     loc_4131E9
.text:0041347B ; ---------------------------------------------------------------------------
.text:0041347B
.text:0041347B loc_41347B:                             ; CODE XREF: _strtoull+35C↑j
.text:0041347B                 mov     esi, ds:_pctype
.text:00413481                 mov     edi, [esi]
.text:00413483                 movzx   ebp, word ptr [edi+edx*2]
.text:00413487                 and     ebp, 2
.text:0041348A                 movzx   eax, bp
.text:0041348D                 jmp     short loc_41345E
.text:0041348F ; ---------------------------------------------------------------------------
.text:0041348F
.text:0041348F loc_41348F:                             ; CODE XREF: _strtoull+328↑j
.text:0041348F                 mov     esi, ds:_pctype
.text:00413495                 mov     edi, [esi]
.text:00413497                 movzx   ebp, word ptr [edi+ecx*2]
.text:0041349B                 and     ebp, 1
.text:0041349E                 movzx   eax, bp
.text:004134A1                 jmp     short loc_413431
.text:004134A3 ; ---------------------------------------------------------------------------
.text:004134A3
.text:004134A3 loc_4134A3:                             ; CODE XREF: _strtoull+CE↑j
.text:004134A3                 mov     edi, ds:_pctype
.text:004134A9                 mov     ebp, [edi]
.text:004134AB                 movzx   ecx, word ptr [ebp+ebx*2+0]
.text:004134B0                 and     ecx, 4
.text:004134B3                 movzx   eax, cx
.text:004134B6                 jmp     loc_4131DB
.text:004134BB ; ---------------------------------------------------------------------------
.text:004134BB
.text:004134BB loc_4134BB:                             ; CODE XREF: _strtoull+C2↑j
.text:004134BB                 cmp     dl, 30h ; '0'
.text:004134BE                 jnz     loc_4131B8
.text:004134C4                 mov     esi, [esp+3Ch+String]
.text:004134C8                 movzx   eax, byte ptr [esi+1]
.text:004134CC                 cmp     al, 58h ; 'X'
.text:004134CE                 jz      short loc_4134D8
.text:004134D0                 cmp     al, 78h ; 'x'
.text:004134D2                 jnz     loc_4131B8
.text:004134D8
.text:004134D8 loc_4134D8:                             ; CODE XREF: _strtoull+3DE↑j
.text:004134D8                 add     [esp+3Ch+String], 2
.text:004134DD                 mov     ebx, [esp+3Ch+String]
.text:004134E1                 movzx   edx, byte ptr [ebx]
.text:004134E4                 jmp     loc_4131B8
.text:004134E9 ; ---------------------------------------------------------------------------
.text:004134E9
.text:004134E9 loc_4134E9:                             ; CODE XREF: _strtoull+AF↑j
.text:004134E9                 mov     edi, [esp+3Ch+String]
.text:004134ED                 movzx   eax, byte ptr [edi+1]
.text:004134F1                 cmp     al, 58h ; 'X'
.text:004134F3                 jz      short loc_413505
.text:004134F5                 mov     [esp+3Ch+Radix], 8
.text:004134FD                 cmp     al, 78h ; 'x'
.text:004134FF                 jnz     loc_4131AD
.text:00413505
.text:00413505 loc_413505:                             ; CODE XREF: _strtoull+403↑j
.text:00413505                 mov     [esp+3Ch+Radix], 10h
.text:0041350D                 jmp     loc_4131AD
.text:00413512 ; ---------------------------------------------------------------------------
.text:00413512
.text:00413512 loc_413512:                             ; CODE XREF: _strtoull+95↑j
.text:00413512                                         ; _strtoull+9E↑j
.text:00413512                 inc     [esp+3Ch+String]
.text:00413516                 mov     eax, [esp+3Ch+String]
.text:0041351A                 movzx   edx, byte ptr [eax]
.text:0041351D                 jmp     loc_413194
.text:00413522 ; ---------------------------------------------------------------------------
.text:00413522
.text:00413522 loc_413522:                             ; CODE XREF: _strtoull+5A↑j
.text:00413522                 mov     ebp, ds:_pctype
.text:00413528                 mov     edi, [ebp+0]
.text:0041352B                 movzx   ebx, word ptr [edi+edx*2]
.text:0041352F                 and     ebx, 8
.text:00413532                 movzx   eax, bx
.text:00413535                 jmp     loc_413166
.text:00413535 _strtoull       endp
.text:00413535
.text:00413535 ; ---------------------------------------------------------------------------
.text:0041353A                 align 10h
.text:00413540                 jmp     ds:__set_app_type
.text:00413540 ; ---------------------------------------------------------------------------
.text:00413546                 align 10h
.text:00413550
.text:00413550 ; =============== S U B R O U T I N E =======================================
.text:00413550
.text:00413550 ; Attributes: thunk
.text:00413550
.text:00413550 ; void __cdecl cexit()
.text:00413550 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00413550                 jmp     ds:__imp__cexit
.text:00413550 _cexit          endp
.text:00413550
.text:00413550 ; ---------------------------------------------------------------------------
.text:00413556                 align 10h
.text:00413560
.text:00413560 ; =============== S U B R O U T I N E =======================================
.text:00413560
.text:00413560 ; Attributes: thunk
.text:00413560
.text:00413560 ; char ***__cdecl _p__environ()
.text:00413560 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00413560                 jmp     ds:__imp___p__environ
.text:00413560 __p__environ    endp
.text:00413560
.text:00413560 ; ---------------------------------------------------------------------------
.text:00413566                 align 10h
.text:00413570
.text:00413570 ; =============== S U B R O U T I N E =======================================
.text:00413570
.text:00413570 ; Attributes: thunk
.text:00413570
.text:00413570 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00413570 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00413570                                         ; TopLevelExceptionFilter+88↑p ...
.text:00413570
.text:00413570 Signal          = dword ptr  4
.text:00413570 Function        = dword ptr  8
.text:00413570
.text:00413570                 jmp     ds:__imp_signal
.text:00413570 signal          endp
.text:00413570
.text:00413570 ; ---------------------------------------------------------------------------
.text:00413576                 align 10h
.text:00413580
.text:00413580 ; =============== S U B R O U T I N E =======================================
.text:00413580
.text:00413580 ; Attributes: thunk
.text:00413580
.text:00413580 ; int *__cdecl _p__fmode()
.text:00413580 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00413580                 jmp     ds:__imp___p__fmode
.text:00413580 __p__fmode      endp
.text:00413580
.text:00413580 ; ---------------------------------------------------------------------------
.text:00413586                 align 10h
.text:00413590
.text:00413590 ; =============== S U B R O U T I N E =======================================
.text:00413590
.text:00413590 ; Attributes: thunk
.text:00413590
.text:00413590 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00413590 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00413590                                         ; sub_401080+90↑p ...
.text:00413590
.text:00413590 FileHandle      = dword ptr  4
.text:00413590 Mode            = dword ptr  8
.text:00413590
.text:00413590                 jmp     ds:__imp__setmode
.text:00413590 _setmode        endp
.text:00413590
.text:00413590 ; ---------------------------------------------------------------------------
.text:00413596                 align 10h
.text:004135A0
.text:004135A0 ; =============== S U B R O U T I N E =======================================
.text:004135A0
.text:004135A0 ; Attributes: thunk
.text:004135A0
.text:004135A0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004135A0                 jmp     ds:__imp___getmainargs
.text:004135A0 __getmainargs   endp
.text:004135A0
.text:004135A0 ; ---------------------------------------------------------------------------
.text:004135A6                 align 10h
.text:004135B0
.text:004135B0 ; =============== S U B R O U T I N E =======================================
.text:004135B0
.text:004135B0 ; Attributes: thunk
.text:004135B0
.text:004135B0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:004135B0 setlocale       proc near               ; CODE XREF: sub_402550+38↑p
.text:004135B0
.text:004135B0 Category        = dword ptr  4
.text:004135B0 Locale          = dword ptr  8
.text:004135B0
.text:004135B0                 jmp     ds:__imp_setlocale
.text:004135B0 setlocale       endp
.text:004135B0
.text:004135B0 ; ---------------------------------------------------------------------------
.text:004135B6                 align 10h
.text:004135C0
.text:004135C0 ; =============== S U B R O U T I N E =======================================
.text:004135C0
.text:004135C0 ; Attributes: thunk
.text:004135C0
.text:004135C0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:004135C0 memcpy          proc near               ; CODE XREF: sub_403DD0+2B6↑p
.text:004135C0                                         ; .text:00406B78↑p ...
.text:004135C0
.text:004135C0 Src             = dword ptr  8
.text:004135C0 Size            = dword ptr  0Ch
.text:004135C0
.text:004135C0                 jmp     ds:__imp_memcpy
.text:004135C0 memcpy          endp
.text:004135C0
.text:004135C0 ; ---------------------------------------------------------------------------
.text:004135C6                 align 10h
.text:004135D0
.text:004135D0 ; =============== S U B R O U T I N E =======================================
.text:004135D0
.text:004135D0 ; Attributes: thunk
.text:004135D0
.text:004135D0 ; void __cdecl free(void *Block)
.text:004135D0 free            proc near               ; CODE XREF: sub_403DD0+6CC↑p
.text:004135D0                                         ; sub_403DD0+6E0↑p ...
.text:004135D0
.text:004135D0 Block           = dword ptr  4
.text:004135D0
.text:004135D0                 jmp     ds:__imp_free
.text:004135D0 free            endp
.text:004135D0
.text:004135D0 ; ---------------------------------------------------------------------------
.text:004135D6                 align 10h
.text:004135E0
.text:004135E0 ; =============== S U B R O U T I N E =======================================
.text:004135E0
.text:004135E0 ; Attributes: thunk
.text:004135E0
.text:004135E0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:004135E0 memset          proc near               ; CODE XREF: sub_403DD0+1A9↑p
.text:004135E0                                         ; sub_403DD0+97B↑p ...
.text:004135E0
.text:004135E0 Val             = dword ptr  8
.text:004135E0 Size            = dword ptr  0Ch
.text:004135E0
.text:004135E0                 jmp     ds:__imp_memset
.text:004135E0 memset          endp
.text:004135E0
.text:004135E0 ; ---------------------------------------------------------------------------
.text:004135E6                 align 10h
.text:004135F0
.text:004135F0 ; =============== S U B R O U T I N E =======================================
.text:004135F0
.text:004135F0 ; Attributes: thunk
.text:004135F0
.text:004135F0 ; int __cdecl tolower(int C)
.text:004135F0 tolower         proc near               ; CODE XREF: sub_403BE0+17E↑p
.text:004135F0
.text:004135F0 C               = dword ptr  4
.text:004135F0
.text:004135F0                 jmp     ds:__imp_tolower
.text:004135F0 tolower         endp
.text:004135F0
.text:004135F0 ; ---------------------------------------------------------------------------
.text:004135F6                 align 10h
.text:00413600
.text:00413600 ; =============== S U B R O U T I N E =======================================
.text:00413600
.text:00413600 ; Attributes: thunk
.text:00413600
.text:00413600 ; int __cdecl toupper(int C)
.text:00413600 toupper         proc near               ; CODE XREF: sub_403BE0+10A↑p
.text:00413600                                         ; sub_40D430+10E↑p
.text:00413600
.text:00413600 C               = dword ptr  4
.text:00413600
.text:00413600                 jmp     ds:__imp_toupper
.text:00413600 toupper         endp
.text:00413600
.text:00413600 ; ---------------------------------------------------------------------------
.text:00413606                 align 10h
.text:00413610
.text:00413610 ; =============== S U B R O U T I N E =======================================
.text:00413610
.text:00413610 ; Attributes: thunk
.text:00413610
.text:00413610 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00413610 strcmp          proc near               ; CODE XREF: sub_404810+4C↑p
.text:00413610                                         ; sub_40ABC4+180↑p ...
.text:00413610
.text:00413610 Str1            = dword ptr  4
.text:00413610 Str2            = dword ptr  8
.text:00413610
.text:00413610                 jmp     ds:__imp_strcmp
.text:00413610 strcmp          endp
.text:00413610
.text:00413610 ; ---------------------------------------------------------------------------
.text:00413616                 align 10h
.text:00413620
.text:00413620 ; =============== S U B R O U T I N E =======================================
.text:00413620
.text:00413620 ; Attributes: thunk
.text:00413620
.text:00413620 ; int __cdecl raise(int Signal)
.text:00413620 raise           proc near               ; CODE XREF: Function+5B↑j
.text:00413620
.text:00413620 Signal          = dword ptr  4
.text:00413620
.text:00413620                 jmp     ds:__imp_raise
.text:00413620 raise           endp
.text:00413620
.text:00413620 ; ---------------------------------------------------------------------------
.text:00413626                 align 10h
.text:00413630
.text:00413630 ; =============== S U B R O U T I N E =======================================
.text:00413630
.text:00413630 ; Attributes: thunk
.text:00413630
.text:00413630 ; int *__cdecl errno()
.text:00413630 _errno          proc near               ; CODE XREF: sub_402550+19F↑p
.text:00413630                                         ; sub_402550+3E6↑p ...
.text:00413630                 jmp     ds:__imp__errno
.text:00413630 _errno          endp
.text:00413630
.text:00413630 ; ---------------------------------------------------------------------------
.text:00413636                 align 10h
.text:00413640
.text:00413640 ; =============== S U B R O U T I N E =======================================
.text:00413640
.text:00413640 ; Attributes: thunk
.text:00413640
.text:00413640 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00413640 sprintf         proc near               ; CODE XREF: sub_402DF0+2E1↑p
.text:00413640                                         ; sub_402DF0+370↑p ...
.text:00413640
.text:00413640 Buffer          = dword ptr  4
.text:00413640 Format          = dword ptr  8
.text:00413640
.text:00413640                 jmp     ds:__imp_sprintf
.text:00413640 sprintf         endp
.text:00413640
.text:00413640 ; ---------------------------------------------------------------------------
.text:00413646                 align 10h
.text:00413650
.text:00413650 ; =============== S U B R O U T I N E =======================================
.text:00413650
.text:00413650 ; Attributes: noreturn thunk
.text:00413650
.text:00413650 ; void __cdecl __noreturn exit(int Code)
.text:00413650 exit            proc near               ; CODE XREF: sub_402210+3B↑p
.text:00413650                                         ; sub_402550+3C2↑p ...
.text:00413650
.text:00413650 Code            = dword ptr  4
.text:00413650
.text:00413650                 jmp     ds:__imp_exit
.text:00413650 exit            endp
.text:00413650
.text:00413650 ; ---------------------------------------------------------------------------
.text:00413656                 align 10h
.text:00413660
.text:00413660 ; =============== S U B R O U T I N E =======================================
.text:00413660
.text:00413660 ; Attributes: thunk
.text:00413660
.text:00413660 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00413660 fputs           proc near               ; CODE XREF: sub_402210+80↑p
.text:00413660                                         ; sub_402210+A2↑p ...
.text:00413660
.text:00413660 Buffer          = dword ptr  4
.text:00413660 Stream          = dword ptr  8
.text:00413660
.text:00413660                 jmp     ds:__imp_fputs
.text:00413660 fputs           endp
.text:00413660
.text:00413660 ; ---------------------------------------------------------------------------
.text:00413666                 align 10h
.text:00413670
.text:00413670 ; =============== S U B R O U T I N E =======================================
.text:00413670
.text:00413670 ; Attributes: thunk
.text:00413670
.text:00413670 ; int printf(const char *const Format, ...)
.text:00413670 printf          proc near               ; CODE XREF: sub_402210+5E↑p
.text:00413670                                         ; sub_402210+1F1↑p ...
.text:00413670
.text:00413670 Format          = dword ptr  4
.text:00413670
.text:00413670                 jmp     ds:__imp_printf
.text:00413670 printf          endp
.text:00413670
.text:00413670 ; ---------------------------------------------------------------------------
.text:00413676                 align 10h
.text:00413680
.text:00413680 ; =============== S U B R O U T I N E =======================================
.text:00413680
.text:00413680 ; Attributes: thunk
.text:00413680
.text:00413680 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00413680 fprintf         proc near               ; CODE XREF: sub_402210+33↑p
.text:00413680                                         ; sub_402DF0+97↑p ...
.text:00413680
.text:00413680 Stream          = dword ptr  4
.text:00413680 Format          = dword ptr  8
.text:00413680
.text:00413680                 jmp     ds:__imp_fprintf
.text:00413680 fprintf         endp
.text:00413680
.text:00413680 ; ---------------------------------------------------------------------------
.text:00413686                 align 10h
.text:00413690
.text:00413690 ; =============== S U B R O U T I N E =======================================
.text:00413690
.text:00413690 ; Attributes: thunk
.text:00413690
.text:00413690 ; int __cdecl isctype(int C, int Type)
.text:00413690 _isctype        proc near               ; CODE XREF: sub_403BE0+71↑p
.text:00413690                                         ; sub_403BE0+15D↑p ...
.text:00413690
.text:00413690 C               = dword ptr  4
.text:00413690 Type            = dword ptr  8
.text:00413690
.text:00413690                 jmp     ds:__imp__isctype
.text:00413690 _isctype        endp
.text:00413690
.text:00413690 ; ---------------------------------------------------------------------------
.text:00413696                 align 10h
.text:004136A0
.text:004136A0 ; =============== S U B R O U T I N E =======================================
.text:004136A0
.text:004136A0 ; Attributes: thunk
.text:004136A0
.text:004136A0 ; char *__cdecl strchr(const char *Str, int Val)
.text:004136A0 strchr          proc near               ; CODE XREF: sub_403500+39↑p
.text:004136A0                                         ; sub_404810+1E↑p ...
.text:004136A0
.text:004136A0 Str             = dword ptr  4
.text:004136A0 Val             = dword ptr  8
.text:004136A0
.text:004136A0                 jmp     ds:__imp_strchr
.text:004136A0 strchr          endp
.text:004136A0
.text:004136A0 ; ---------------------------------------------------------------------------
.text:004136A6                 align 10h
.text:004136B0
.text:004136B0 ; =============== S U B R O U T I N E =======================================
.text:004136B0
.text:004136B0 ; Attributes: thunk
.text:004136B0
.text:004136B0 ; __int64 __cdecl lseeki64(int FileHandle, __int64 Offset, int Origin)
.text:004136B0 _lseeki64       proc near               ; CODE XREF: sub_402550+182↑p
.text:004136B0                                         ; sub_404A70+7C↑p ...
.text:004136B0
.text:004136B0 FileHandle      = dword ptr  4
.text:004136B0 Offset          = qword ptr  8
.text:004136B0 Origin          = dword ptr  10h
.text:004136B0
.text:004136B0                 jmp     ds:__imp__lseeki64
.text:004136B0 _lseeki64       endp
.text:004136B0
.text:004136B0 ; ---------------------------------------------------------------------------
.text:004136B6                 align 10h
.text:004136C0
.text:004136C0 ; =============== S U B R O U T I N E =======================================
.text:004136C0
.text:004136C0 ; Attributes: thunk
.text:004136C0
.text:004136C0 ; int __cdecl commit(int FileHandle)
.text:004136C0 _commit         proc near               ; CODE XREF: sub_403DD0+707↑p
.text:004136C0                                         ; j__commit↑j
.text:004136C0
.text:004136C0 FileHandle      = dword ptr  4
.text:004136C0
.text:004136C0                 jmp     ds:__imp__commit
.text:004136C0 _commit         endp
.text:004136C0
.text:004136C0 ; ---------------------------------------------------------------------------
.text:004136C6                 align 10h
.text:004136D0
.text:004136D0 ; =============== S U B R O U T I N E =======================================
.text:004136D0
.text:004136D0 ; Attributes: thunk
.text:004136D0
.text:004136D0 ; size_t __cdecl strlen(const char *Str)
.text:004136D0 strlen          proc near               ; CODE XREF: sub_405790+2A9↑p
.text:004136D0                                         ; sub_405790+346↑p ...
.text:004136D0
.text:004136D0 Str             = dword ptr  4
.text:004136D0
.text:004136D0                 jmp     ds:__imp_strlen
.text:004136D0 strlen          endp
.text:004136D0
.text:004136D0 ; ---------------------------------------------------------------------------
.text:004136D6                 align 10h
.text:004136E0
.text:004136E0 ; =============== S U B R O U T I N E =======================================
.text:004136E0
.text:004136E0 ; Attributes: thunk
.text:004136E0
.text:004136E0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:004136E0 strncmp         proc near               ; CODE XREF: sub_405790+23F↑p
.text:004136E0                                         ; sub_405790+699↑p ...
.text:004136E0
.text:004136E0 Str1            = dword ptr  4
.text:004136E0 Str2            = dword ptr  8
.text:004136E0 MaxCount        = dword ptr  0Ch
.text:004136E0
.text:004136E0                 jmp     ds:__imp_strncmp
.text:004136E0 strncmp         endp
.text:004136E0
.text:004136E0 ; ---------------------------------------------------------------------------
.text:004136E6                 align 10h
.text:004136F0
.text:004136F0 ; =============== S U B R O U T I N E =======================================
.text:004136F0
.text:004136F0 ; Attributes: thunk
.text:004136F0
.text:004136F0 ; char *__cdecl getenv(const char *VarName)
.text:004136F0 getenv          proc near               ; CODE XREF: sub_405790+B57↑p
.text:004136F0                                         ; .text:004087F7↑p ...
.text:004136F0
.text:004136F0 VarName         = dword ptr  4
.text:004136F0
.text:004136F0                 jmp     ds:__imp_getenv
.text:004136F0 getenv          endp
.text:004136F0
.text:004136F0 ; ---------------------------------------------------------------------------
.text:004136F6                 align 10h
.text:00413700
.text:00413700 ; =============== S U B R O U T I N E =======================================
.text:00413700
.text:00413700 ; Attributes: thunk
.text:00413700
.text:00413700 ; int __cdecl fclose(FILE *Stream)
.text:00413700 fclose          proc near               ; CODE XREF: sub_4068B0+27↑p
.text:00413700                                         ; .text:0041036E↑p
.text:00413700
.text:00413700 Stream          = dword ptr  4
.text:00413700
.text:00413700                 jmp     ds:__imp_fclose
.text:00413700 fclose          endp
.text:00413700
.text:00413700 ; ---------------------------------------------------------------------------
.text:00413706                 align 10h
.text:00413710
.text:00413710 ; =============== S U B R O U T I N E =======================================
.text:00413710
.text:00413710 ; Attributes: thunk
.text:00413710
.text:00413710 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00413710 calloc          proc near               ; CODE XREF: .text:00406B33↑p
.text:00413710                                         ; sub_40D430+AC↑p
.text:00413710
.text:00413710 Count           = dword ptr  4
.text:00413710 Size            = dword ptr  8
.text:00413710
.text:00413710                 jmp     ds:__imp_calloc
.text:00413710 calloc          endp
.text:00413710
.text:00413710 ; ---------------------------------------------------------------------------
.text:00413716                 align 10h
.text:00413720
.text:00413720 ; =============== S U B R O U T I N E =======================================
.text:00413720
.text:00413720 ; Attributes: thunk
.text:00413720
.text:00413720 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00413720 realloc         proc near               ; CODE XREF: .text:00406A30↑p
.text:00413720                                         ; sub_406A60+16↑p ...
.text:00413720
.text:00413720 Block           = dword ptr  4
.text:00413720 Size            = dword ptr  8
.text:00413720
.text:00413720                 jmp     ds:__imp_realloc
.text:00413720 realloc         endp
.text:00413720
.text:00413720 ; ---------------------------------------------------------------------------
.text:00413726                 align 10h
.text:00413730
.text:00413730 ; =============== S U B R O U T I N E =======================================
.text:00413730
.text:00413730 ; Attributes: thunk
.text:00413730
.text:00413730 ; void *__cdecl malloc(size_t Size)
.text:00413730 malloc          proc near               ; CODE XREF: .text:004069B4↑p
.text:00413730                                         ; sub_4069D0+E↑p ...
.text:00413730
.text:00413730 Size            = dword ptr  4
.text:00413730
.text:00413730                 jmp     ds:__imp_malloc
.text:00413730 malloc          endp
.text:00413730
.text:00413730 ; ---------------------------------------------------------------------------
.text:00413736                 align 10h
.text:00413740
.text:00413740 ; =============== S U B R O U T I N E =======================================
.text:00413740
.text:00413740 ; Attributes: noreturn thunk
.text:00413740
.text:00413740 _assert         proc near               ; CODE XREF: sub_406DA0+C88↑p
.text:00413740                                         ; sub_410AE0+414↑p
.text:00413740                 jmp     ds:__imp__assert
.text:00413740 _assert         endp
.text:00413740
.text:00413740 ; ---------------------------------------------------------------------------
.text:00413746                 align 10h
.text:00413750
.text:00413750 ; =============== S U B R O U T I N E =======================================
.text:00413750
.text:00413750 ; Attributes: noreturn thunk
.text:00413750
.text:00413750 ; void __cdecl __noreturn abort()
.text:00413750 abort           proc near               ; CODE XREF: .text:loc_40875D↑p
.text:00413750                                         ; sub_408E30:loc_408ECC↑p ...
.text:00413750                 jmp     ds:__imp_abort
.text:00413750 abort           endp
.text:00413750
.text:00413750 ; ---------------------------------------------------------------------------
.text:00413756                 align 10h
.text:00413760
.text:00413760 ; =============== S U B R O U T I N E =======================================
.text:00413760
.text:00413760 ; Attributes: thunk
.text:00413760
.text:00413760 ; void *__cdecl memmove(void *, const void *Src, size_t Size)
.text:00413760 memmove         proc near               ; CODE XREF: sub_407AD0+2E5↑p
.text:00413760
.text:00413760 Src             = dword ptr  8
.text:00413760 Size            = dword ptr  0Ch
.text:00413760
.text:00413760                 jmp     ds:__imp_memmove
.text:00413760 memmove         endp
.text:00413760
.text:00413760 ; ---------------------------------------------------------------------------
.text:00413766                 align 10h
.text:00413770
.text:00413770 ; =============== S U B R O U T I N E =======================================
.text:00413770
.text:00413770 ; Attributes: thunk
.text:00413770
.text:00413770 ; struct lconv *__cdecl localeconv()
.text:00413770 localeconv      proc near               ; CODE XREF: sub_407AD0+A6↑p
.text:00413770                 jmp     ds:__imp_localeconv
.text:00413770 localeconv      endp
.text:00413770
.text:00413770 ; ---------------------------------------------------------------------------
.text:00413776                 align 10h
.text:00413780
.text:00413780 ; =============== S U B R O U T I N E =======================================
.text:00413780
.text:00413780 ; Attributes: thunk
.text:00413780
.text:00413780 ; __time32_t __cdecl time(__time32_t *const Time)
.text:00413780 time            proc near               ; CODE XREF: sub_408AC0+66↑p
.text:00413780
.text:00413780 Time            = dword ptr  4
.text:00413780
.text:00413780                 jmp     ds:__imp_time
.text:00413780 time            endp
.text:00413780
.text:00413780 ; ---------------------------------------------------------------------------
.text:00413786                 align 10h
.text:00413790
.text:00413790 ; =============== S U B R O U T I N E =======================================
.text:00413790
.text:00413790 ; Attributes: thunk
.text:00413790
.text:00413790 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00413790 vfprintf        proc near               ; CODE XREF: sub_408E30+C1↑p
.text:00413790                                         ; sub_40AAC0+49↑p ...
.text:00413790
.text:00413790 Stream          = dword ptr  4
.text:00413790 Format          = dword ptr  8
.text:00413790 ArgList         = dword ptr  0Ch
.text:00413790
.text:00413790                 jmp     ds:__imp_vfprintf
.text:00413790 vfprintf        endp
.text:00413790
.text:00413790 ; ---------------------------------------------------------------------------
.text:00413796                 align 10h
.text:004137A0
.text:004137A0 ; =============== S U B R O U T I N E =======================================
.text:004137A0
.text:004137A0 ; Attributes: thunk
.text:004137A0
.text:004137A0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:004137A0 _flsbuf         proc near               ; CODE XREF: sub_408E30+128↑p
.text:004137A0                                         ; sub_408E30+13A↑p ...
.text:004137A0
.text:004137A0 File            = dword ptr  8
.text:004137A0
.text:004137A0                 jmp     ds:__imp__flsbuf
.text:004137A0 _flsbuf         endp
.text:004137A0
.text:004137A0 ; ---------------------------------------------------------------------------
.text:004137A6                 align 10h
.text:004137B0
.text:004137B0 ; =============== S U B R O U T I N E =======================================
.text:004137B0
.text:004137B0 ; Attributes: thunk
.text:004137B0
.text:004137B0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:004137B0 iswctype        proc near               ; CODE XREF: sub_4090D0+78B↑p
.text:004137B0
.text:004137B0 C               = word ptr  4
.text:004137B0 Type            = word ptr  8
.text:004137B0
.text:004137B0                 jmp     ds:__imp_iswctype
.text:004137B0 iswctype        endp
.text:004137B0
.text:004137B0 ; ---------------------------------------------------------------------------
.text:004137B6                 align 10h
.text:004137C0
.text:004137C0 ; =============== S U B R O U T I N E =======================================
.text:004137C0
.text:004137C0 ; Attributes: thunk
.text:004137C0
.text:004137C0 ; int __cdecl fflush(FILE *Stream)
.text:004137C0 fflush          proc near               ; CODE XREF: sub_40AAC0+19↑p
.text:004137C0                                         ; sub_40AAC0+81↑p ...
.text:004137C0
.text:004137C0 Stream          = dword ptr  4
.text:004137C0
.text:004137C0                 jmp     ds:__imp_fflush
.text:004137C0 fflush          endp
.text:004137C0
.text:004137C0 ; ---------------------------------------------------------------------------
.text:004137C6                 align 10h
.text:004137D0
.text:004137D0 ; =============== S U B R O U T I N E =======================================
.text:004137D0
.text:004137D0 ; Attributes: thunk
.text:004137D0
.text:004137D0 ; char *__cdecl strerror(int ErrorMessage)
.text:004137D0 strerror        proc near               ; CODE XREF: sub_40AAC0+A5↑p
.text:004137D0                                         ; sub_40ABC4+10F↑p
.text:004137D0
.text:004137D0 ErrorMessage    = dword ptr  4
.text:004137D0
.text:004137D0                 jmp     ds:__imp_strerror
.text:004137D0 strerror        endp
.text:004137D0
.text:004137D0 ; ---------------------------------------------------------------------------
.text:004137D6                 align 10h
.text:004137E0
.text:004137E0 ; =============== S U B R O U T I N E =======================================
.text:004137E0
.text:004137E0 ; Attributes: thunk
.text:004137E0
.text:004137E0 ; char *__cdecl ctime(const __time32_t *const Time)
.text:004137E0 ctime           proc near               ; CODE XREF: .text:0040AF2D↑p
.text:004137E0                                         ; .text:0040AF4F↑p ...
.text:004137E0
.text:004137E0 Time            = dword ptr  4
.text:004137E0
.text:004137E0                 jmp     ds:__imp_ctime
.text:004137E0 ctime           endp
.text:004137E0
.text:004137E0 ; ---------------------------------------------------------------------------
.text:004137E6                 align 10h
.text:004137F0
.text:004137F0 ; =============== S U B R O U T I N E =======================================
.text:004137F0
.text:004137F0 ; Attributes: thunk
.text:004137F0
.text:004137F0 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:004137F0 _get_osfhandle  proc near               ; CODE XREF: sub_40AFD0+3A↑p
.text:004137F0                                         ; sub_40E0F0+22↑p ...
.text:004137F0
.text:004137F0 FileHandle      = dword ptr  4
.text:004137F0
.text:004137F0                 jmp     ds:__imp__get_osfhandle
.text:004137F0 _get_osfhandle  endp
.text:004137F0
.text:004137F0 ; ---------------------------------------------------------------------------
.text:004137F6                 align 10h
.text:00413800
.text:00413800 ; =============== S U B R O U T I N E =======================================
.text:00413800
.text:00413800 ; Attributes: thunk
.text:00413800
.text:00413800 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:00413800 strcat          proc near               ; CODE XREF: sub_40AFD0+2F8↑p
.text:00413800                                         ; .text:0040EF23↑p ...
.text:00413800
.text:00413800 Destination     = dword ptr  4
.text:00413800 Source          = dword ptr  8
.text:00413800
.text:00413800                 jmp     ds:__imp_strcat
.text:00413800 strcat          endp
.text:00413800
.text:00413800 ; ---------------------------------------------------------------------------
.text:00413806                 align 10h
.text:00413810
.text:00413810 ; =============== S U B R O U T I N E =======================================
.text:00413810
.text:00413810 ; Attributes: thunk
.text:00413810
.text:00413810 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:00413810 strcpy          proc near               ; CODE XREF: sub_40AFD0+2D3↑p
.text:00413810                                         ; _win32_longpath+13C↑p ...
.text:00413810
.text:00413810 Destination     = dword ptr  4
.text:00413810 Source          = dword ptr  8
.text:00413810
.text:00413810                 jmp     ds:__imp_strcpy
.text:00413810 strcpy          endp
.text:00413810
.text:00413810 ; ---------------------------------------------------------------------------
.text:00413816                 align 10h
.text:00413820
.text:00413820 ; =============== S U B R O U T I N E =======================================
.text:00413820
.text:00413820 ; Attributes: thunk
.text:00413820
.text:00413820 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:00413820 strstr          proc near               ; CODE XREF: sub_40B880+3BF↑p
.text:00413820                                         ; sub_40B880+3DC↑p ...
.text:00413820
.text:00413820 Str             = dword ptr  4
.text:00413820 SubStr          = dword ptr  8
.text:00413820
.text:00413820                 jmp     ds:__imp_strstr
.text:00413820 strstr          endp
.text:00413820
.text:00413820 ; ---------------------------------------------------------------------------
.text:00413826                 align 10h
.text:00413830
.text:00413830 ; =============== S U B R O U T I N E =======================================
.text:00413830
.text:00413830 ; Attributes: thunk
.text:00413830
.text:00413830 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:00413830 strrchr         proc near               ; CODE XREF: sub_40B880+CB↑p
.text:00413830                                         ; sub_40B880+3A7↑p ...
.text:00413830
.text:00413830 Str             = dword ptr  4
.text:00413830
.text:00413830                 jmp     ds:__imp_strrchr
.text:00413830 strrchr         endp
.text:00413830
.text:00413830 ; ---------------------------------------------------------------------------
.text:00413836                 align 10h
.text:00413840
.text:00413840 ; =============== S U B R O U T I N E =======================================
.text:00413840
.text:00413840 ; Attributes: thunk
.text:00413840
.text:00413840 ; int __cdecl isalpha(int C)
.text:00413840 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:00413840
.text:00413840 C               = dword ptr  4
.text:00413840
.text:00413840                 jmp     ds:__imp_isalpha
.text:00413840 isalpha         endp
.text:00413840
.text:00413840 ; ---------------------------------------------------------------------------
.text:00413846                 align 10h
.text:00413850
.text:00413850 ; =============== S U B R O U T I N E =======================================
.text:00413850
.text:00413850 ; Attributes: thunk
.text:00413850
.text:00413850 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:00413850 _stricmp_0      proc near               ; CODE XREF: .text:0040D2A4↑p
.text:00413850
.text:00413850 String1         = dword ptr  4
.text:00413850 String2         = dword ptr  8
.text:00413850
.text:00413850                 jmp     ds:__imp__stricmp_0
.text:00413850 _stricmp_0      endp
.text:00413850
.text:00413850 ; ---------------------------------------------------------------------------
.text:00413856                 align 10h
.text:00413860
.text:00413860 ; =============== S U B R O U T I N E =======================================
.text:00413860
.text:00413860 ; Attributes: thunk
.text:00413860
.text:00413860 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:00413860 strncpy         proc near               ; CODE XREF: sub_40D430+BE↑p
.text:00413860                                         ; .text:0040DCAA↑p ...
.text:00413860
.text:00413860 Destination     = dword ptr  4
.text:00413860 Source          = dword ptr  8
.text:00413860 Count           = dword ptr  0Ch
.text:00413860
.text:00413860                 jmp     ds:__imp_strncpy
.text:00413860 strncpy         endp
.text:00413860
.text:00413860 ; ---------------------------------------------------------------------------
.text:00413866                 align 10h
.text:00413870
.text:00413870 ; =============== S U B R O U T I N E =======================================
.text:00413870
.text:00413870 ; Attributes: thunk
.text:00413870
.text:00413870 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:00413870 _filelengthi64  proc near               ; CODE XREF: sub_40E200+113↑p
.text:00413870                                         ; sub_410590+1F↑p
.text:00413870
.text:00413870 FileHandle      = dword ptr  4
.text:00413870
.text:00413870                 jmp     ds:__imp__filelengthi64
.text:00413870 _filelengthi64  endp
.text:00413870
.text:00413870 ; ---------------------------------------------------------------------------
.text:00413876                 align 10h
.text:00413880
.text:00413880 ; =============== S U B R O U T I N E =======================================
.text:00413880
.text:00413880 ; Attributes: thunk
.text:00413880
.text:00413880 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:00413880 sscanf          proc near               ; CODE XREF: .text:0040F9AE↑p
.text:00413880
.text:00413880 Buffer          = dword ptr  4
.text:00413880 Format          = dword ptr  8
.text:00413880
.text:00413880                 jmp     ds:__imp_sscanf
.text:00413880 sscanf          endp
.text:00413880
.text:00413880 ; ---------------------------------------------------------------------------
.text:00413886                 align 10h
.text:00413890
.text:00413890 ; =============== S U B R O U T I N E =======================================
.text:00413890
.text:00413890 ; Attributes: thunk
.text:00413890
.text:00413890 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:00413890 strspn          proc near               ; CODE XREF: .text:0040F7FA↑p
.text:00413890                                         ; .text:0040FA14↑p ...
.text:00413890
.text:00413890 Str             = dword ptr  4
.text:00413890 Control         = dword ptr  8
.text:00413890
.text:00413890                 jmp     ds:__imp_strspn
.text:00413890 strspn          endp
.text:00413890
.text:00413890 ; ---------------------------------------------------------------------------
.text:00413896                 align 10h
.text:004138A0
.text:004138A0 ; =============== S U B R O U T I N E =======================================
.text:004138A0
.text:004138A0 ; Attributes: thunk
.text:004138A0
.text:004138A0 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:004138A0 fopen           proc near               ; CODE XREF: sub_4102AF+26↑p
.text:004138A0                                         ; sub_4102AF+99↑p
.text:004138A0
.text:004138A0 FileName        = dword ptr  4
.text:004138A0 Mode            = dword ptr  8
.text:004138A0
.text:004138A0                 jmp     ds:__imp_fopen
.text:004138A0 fopen           endp
.text:004138A0
.text:004138A0 ; ---------------------------------------------------------------------------
.text:004138A6                 align 10h
.text:004138B0
.text:004138B0 ; =============== S U B R O U T I N E =======================================
.text:004138B0
.text:004138B0 ; Attributes: thunk
.text:004138B0
.text:004138B0 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:004138B0 strpbrk         proc near               ; CODE XREF: sub_4105F0+87↑p
.text:004138B0
.text:004138B0 Str             = dword ptr  4
.text:004138B0 Control         = dword ptr  8
.text:004138B0
.text:004138B0                 jmp     ds:__imp_strpbrk
.text:004138B0 strpbrk         endp
.text:004138B0
.text:004138B0 ; ---------------------------------------------------------------------------
.text:004138B6                 align 10h
.text:004138C0
.text:004138C0 ; =============== S U B R O U T I N E =======================================
.text:004138C0
.text:004138C0 ; Attributes: thunk
.text:004138C0
.text:004138C0 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:004138C0 _fdopen         proc near               ; CODE XREF: sub_410690+69↑p
.text:004138C0
.text:004138C0 FileHandle      = dword ptr  4
.text:004138C0 Format          = dword ptr  8
.text:004138C0
.text:004138C0                 jmp     ds:__imp__fdopen
.text:004138C0 _fdopen         endp
.text:004138C0
.text:004138C0 ; ---------------------------------------------------------------------------
.text:004138C6                 align 10h
.text:004138D0
.text:004138D0 ; =============== S U B R O U T I N E =======================================
.text:004138D0
.text:004138D0 ; Attributes: thunk
.text:004138D0
.text:004138D0 ; int __cdecl close_0(int FileHandle)
.text:004138D0 _close_0        proc near               ; CODE XREF: sub_410690+90↑p
.text:004138D0
.text:004138D0 FileHandle      = dword ptr  4
.text:004138D0
.text:004138D0                 jmp     ds:__imp__close_0
.text:004138D0 _close_0        endp
.text:004138D0
.text:004138D0 ; ---------------------------------------------------------------------------
.text:004138D6                 align 10h
.text:004138E0
.text:004138E0 ; =============== S U B R O U T I N E =======================================
.text:004138E0
.text:004138E0 ; Attributes: thunk
.text:004138E0
.text:004138E0 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:004138E0 _open_0         proc near               ; CODE XREF: sub_410AE0:loc_410E70↑p
.text:004138E0
.text:004138E0 FileName        = dword ptr  4
.text:004138E0 OpenFlag        = dword ptr  8
.text:004138E0
.text:004138E0                 jmp     ds:__imp__open_0
.text:004138E0 _open_0         endp
.text:004138E0
.text:004138E0 ; ---------------------------------------------------------------------------
.text:004138E6                 align 10h
.text:004138F0
.text:004138F0 ; =============== S U B R O U T I N E =======================================
.text:004138F0
.text:004138F0 ; Attributes: thunk
.text:004138F0
.text:004138F0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004138F0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004138F0
.text:004138F0 lpTopLevelExceptionFilter= dword ptr  4
.text:004138F0
.text:004138F0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004138F0 SetUnhandledExceptionFilter endp
.text:004138F0
.text:004138F0 ; ---------------------------------------------------------------------------
.text:004138F6                 align 10h
.text:00413900
.text:00413900 ; =============== S U B R O U T I N E =======================================
.text:00413900
.text:00413900 ; Attributes: noreturn thunk
.text:00413900
.text:00413900 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00413900 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00413900
.text:00413900 uExitCode       = dword ptr  4
.text:00413900
.text:00413900                 jmp     ds:__imp_ExitProcess
.text:00413900 ExitProcess     endp
.text:00413900
.text:00413900 ; ---------------------------------------------------------------------------
.text:00413906                 align 10h
.text:00413910
.text:00413910 ; =============== S U B R O U T I N E =======================================
.text:00413910
.text:00413910 ; Attributes: thunk
.text:00413910
.text:00413910 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:00413910 GetModuleHandleA proc near              ; CODE XREF: sub_40AFD0+108↑p
.text:00413910                                         ; sub_40B880+329↑p ...
.text:00413910
.text:00413910 lpModuleName    = dword ptr  4
.text:00413910
.text:00413910                 jmp     ds:__imp_GetModuleHandleA
.text:00413910 GetModuleHandleA endp
.text:00413910
.text:00413910 ; ---------------------------------------------------------------------------
.text:00413916                 align 10h
.text:00413920
.text:00413920 ; =============== S U B R O U T I N E =======================================
.text:00413920
.text:00413920 ; Attributes: thunk
.text:00413920
.text:00413920 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:00413920 GetProcAddress  proc near               ; CODE XREF: sub_40AFD0+123↑p
.text:00413920                                         ; sub_40AFD0+28E↑p ...
.text:00413920
.text:00413920 hModule         = dword ptr  4
.text:00413920 lpProcName      = dword ptr  8
.text:00413920
.text:00413920                 jmp     ds:__imp_GetProcAddress
.text:00413920 GetProcAddress  endp
.text:00413920
.text:00413920 ; ---------------------------------------------------------------------------
.text:00413926                 align 10h
.text:00413930
.text:00413930 ; =============== S U B R O U T I N E =======================================
.text:00413930
.text:00413930 ; Attributes: thunk
.text:00413930
.text:00413930 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:00413930 GetFileAttributesA proc near            ; CODE XREF: sub_40AFD0+137↑p
.text:00413930                                         ; sub_40EB30+62↑p
.text:00413930
.text:00413930 lpFileName      = dword ptr  4
.text:00413930
.text:00413930                 jmp     ds:__imp_GetFileAttributesA
.text:00413930 GetFileAttributesA endp
.text:00413930
.text:00413930 ; ---------------------------------------------------------------------------
.text:00413936                 align 10h
.text:00413940
.text:00413940 ; =============== S U B R O U T I N E =======================================
.text:00413940
.text:00413940 ; Attributes: thunk
.text:00413940
.text:00413940 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:00413940 FreeLibrary     proc near               ; CODE XREF: sub_40AFD0+194↑p
.text:00413940                                         ; sub_40AFD0+37D↑p ...
.text:00413940
.text:00413940 hLibModule      = dword ptr  4
.text:00413940
.text:00413940                 jmp     ds:__imp_FreeLibrary
.text:00413940 FreeLibrary     endp
.text:00413940
.text:00413940 ; ---------------------------------------------------------------------------
.text:00413946                 align 10h
.text:00413950
.text:00413950 ; =============== S U B R O U T I N E =======================================
.text:00413950
.text:00413950 ; Attributes: thunk
.text:00413950
.text:00413950 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:00413950 FindFirstFileA  proc near               ; CODE XREF: sub_40AFD0+1BE↑p
.text:00413950                                         ; sub_40AFD0+3AF↑p ...
.text:00413950
.text:00413950 lpFileName      = dword ptr  4
.text:00413950 lpFindFileData  = dword ptr  8
.text:00413950
.text:00413950                 jmp     ds:__imp_FindFirstFileA
.text:00413950 FindFirstFileA  endp
.text:00413950
.text:00413950 ; ---------------------------------------------------------------------------
.text:00413956                 align 10h
.text:00413960
.text:00413960 ; =============== S U B R O U T I N E =======================================
.text:00413960
.text:00413960 ; Attributes: thunk
.text:00413960
.text:00413960 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:00413960 FindClose       proc near               ; CODE XREF: sub_40AFD0+213↑p
.text:00413960                                         ; sub_40AFD0+36E↑p ...
.text:00413960
.text:00413960 hFindFile       = dword ptr  4
.text:00413960
.text:00413960                 jmp     ds:__imp_FindClose
.text:00413960 FindClose       endp
.text:00413960
.text:00413960 ; ---------------------------------------------------------------------------
.text:00413966                 align 10h
.text:00413970
.text:00413970 ; =============== S U B R O U T I N E =======================================
.text:00413970
.text:00413970 ; Attributes: thunk
.text:00413970
.text:00413970 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:00413970 LoadLibraryA    proc near               ; CODE XREF: sub_40AFD0+273↑p
.text:00413970                                         ; sub_40B880+134↑p ...
.text:00413970
.text:00413970 lpLibFileName   = dword ptr  4
.text:00413970
.text:00413970                 jmp     ds:__imp_LoadLibraryA
.text:00413970 LoadLibraryA    endp
.text:00413970
.text:00413970 ; ---------------------------------------------------------------------------
.text:00413976                 align 10h
.text:00413980
.text:00413980 ; =============== S U B R O U T I N E =======================================
.text:00413980
.text:00413980 ; Attributes: thunk
.text:00413980
.text:00413980 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:00413980 FindNextFileA   proc near               ; CODE XREF: sub_40AFD0+35F↑p
.text:00413980
.text:00413980 hFindFile       = dword ptr  4
.text:00413980 lpFindFileData  = dword ptr  8
.text:00413980
.text:00413980                 jmp     ds:__imp_FindNextFileA
.text:00413980 FindNextFileA   endp
.text:00413980
.text:00413980 ; ---------------------------------------------------------------------------
.text:00413986                 align 10h
.text:00413990
.text:00413990 ; =============== S U B R O U T I N E =======================================
.text:00413990
.text:00413990 ; Attributes: thunk
.text:00413990
.text:00413990 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:00413990 GetFileType     proc near               ; CODE XREF: sub_40AFD0+423↑p
.text:00413990                                         ; .text:0040C06A↑p
.text:00413990
.text:00413990 hFile           = dword ptr  4
.text:00413990
.text:00413990                 jmp     ds:__imp_GetFileType
.text:00413990 GetFileType     endp
.text:00413990
.text:00413990 ; ---------------------------------------------------------------------------
.text:00413996                 align 10h
.text:004139A0
.text:004139A0 ; =============== S U B R O U T I N E =======================================
.text:004139A0
.text:004139A0 ; Attributes: thunk
.text:004139A0
.text:004139A0 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:004139A0 GetFileInformationByHandle proc near    ; CODE XREF: sub_40AFD0+449↑p
.text:004139A0
.text:004139A0 hFile           = dword ptr  4
.text:004139A0 lpFileInformation= dword ptr  8
.text:004139A0
.text:004139A0                 jmp     ds:__imp_GetFileInformationByHandle
.text:004139A0 GetFileInformationByHandle endp
.text:004139A0
.text:004139A0 ; ---------------------------------------------------------------------------
.text:004139A6                 align 10h
.text:004139B0
.text:004139B0 ; =============== S U B R O U T I N E =======================================
.text:004139B0
.text:004139B0 ; Attributes: thunk
.text:004139B0
.text:004139B0 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:004139B0 GetFileSize     proc near               ; CODE XREF: sub_40AFD0+7D2↑p
.text:004139B0
.text:004139B0 hFile           = dword ptr  4
.text:004139B0 lpFileSizeHigh  = dword ptr  8
.text:004139B0
.text:004139B0                 jmp     ds:__imp_GetFileSize
.text:004139B0 GetFileSize     endp
.text:004139B0
.text:004139B0 ; ---------------------------------------------------------------------------
.text:004139B6                 align 10h
.text:004139C0
.text:004139C0 ; =============== S U B R O U T I N E =======================================
.text:004139C0
.text:004139C0 ; Attributes: thunk
.text:004139C0
.text:004139C0 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:004139C0 PeekNamedPipe   proc near               ; CODE XREF: sub_40AFD0+819↑p
.text:004139C0
.text:004139C0 hNamedPipe      = dword ptr  4
.text:004139C0 lpBuffer        = dword ptr  8
.text:004139C0 nBufferSize     = dword ptr  0Ch
.text:004139C0 lpBytesRead     = dword ptr  10h
.text:004139C0 lpTotalBytesAvail= dword ptr  14h
.text:004139C0 lpBytesLeftThisMessage= dword ptr  18h
.text:004139C0
.text:004139C0                 jmp     ds:__imp_PeekNamedPipe
.text:004139C0 PeekNamedPipe   endp
.text:004139C0
.text:004139C0 ; ---------------------------------------------------------------------------
.text:004139C6                 align 10h
.text:004139D0
.text:004139D0 ; =============== S U B R O U T I N E =======================================
.text:004139D0
.text:004139D0 ; Attributes: thunk
.text:004139D0
.text:004139D0 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:004139D0 GetDriveTypeA   proc near               ; CODE XREF: sub_40B880+4C↑p
.text:004139D0
.text:004139D0 lpRootPathName  = dword ptr  4
.text:004139D0
.text:004139D0                 jmp     ds:__imp_GetDriveTypeA
.text:004139D0 GetDriveTypeA   endp
.text:004139D0
.text:004139D0 ; ---------------------------------------------------------------------------
.text:004139D6                 align 10h
.text:004139E0
.text:004139E0 ; =============== S U B R O U T I N E =======================================
.text:004139E0
.text:004139E0 ; Attributes: thunk
.text:004139E0
.text:004139E0 ; DWORD __stdcall GetLastError()
.text:004139E0 GetLastError    proc near               ; CODE XREF: sub_40B880:loc_40BB09↑p
.text:004139E0                                         ; .text:loc_40C64D↑p ...
.text:004139E0                 jmp     ds:__imp_GetLastError
.text:004139E0 GetLastError    endp
.text:004139E0
.text:004139E0 ; ---------------------------------------------------------------------------
.text:004139E6                 align 10h
.text:004139F0
.text:004139F0 ; =============== S U B R O U T I N E =======================================
.text:004139F0
.text:004139F0 ; Attributes: thunk
.text:004139F0
.text:004139F0 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:004139F0 GetVolumeInformationA proc near         ; CODE XREF: sub_40BD80+64↑p
.text:004139F0                                         ; .text:0040C32C↑p ...
.text:004139F0
.text:004139F0 lpRootPathName  = dword ptr  4
.text:004139F0 lpVolumeNameBuffer= dword ptr  8
.text:004139F0 nVolumeNameSize = dword ptr  0Ch
.text:004139F0 lpVolumeSerialNumber= dword ptr  10h
.text:004139F0 lpMaximumComponentLength= dword ptr  14h
.text:004139F0 lpFileSystemFlags= dword ptr  18h
.text:004139F0 lpFileSystemNameBuffer= dword ptr  1Ch
.text:004139F0 nFileSystemNameSize= dword ptr  20h
.text:004139F0
.text:004139F0                 jmp     ds:__imp_GetVolumeInformationA
.text:004139F0 GetVolumeInformationA endp
.text:004139F0
.text:004139F0 ; ---------------------------------------------------------------------------
.text:004139F6                 align 10h
.text:00413A00
.text:00413A00 ; =============== S U B R O U T I N E =======================================
.text:00413A00
.text:00413A00 ; Attributes: thunk
.text:00413A00
.text:00413A00 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:00413A00 CreateFileA     proc near               ; CODE XREF: sub_410FB0-449A↑p
.text:00413A00                                         ; .text:0040DA23↑p ...
.text:00413A00
.text:00413A00 lpFileName      = dword ptr  4
.text:00413A00 dwDesiredAccess = dword ptr  8
.text:00413A00 dwShareMode     = dword ptr  0Ch
.text:00413A00 lpSecurityAttributes= dword ptr  10h
.text:00413A00 dwCreationDisposition= dword ptr  14h
.text:00413A00 dwFlagsAndAttributes= dword ptr  18h
.text:00413A00 hTemplateFile   = dword ptr  1Ch
.text:00413A00
.text:00413A00                 jmp     ds:__imp_CreateFileA
.text:00413A00 CreateFileA     endp
.text:00413A00
.text:00413A00 ; ---------------------------------------------------------------------------
.text:00413A06                 align 10h
.text:00413A10
.text:00413A10 ; =============== S U B R O U T I N E =======================================
.text:00413A10
.text:00413A10 ; Attributes: thunk
.text:00413A10
.text:00413A10 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:00413A10 CloseHandle     proc near               ; CODE XREF: sub_410FB0-447F↑p
.text:00413A10                                         ; .text:0040DA99↑p ...
.text:00413A10
.text:00413A10 hObject         = dword ptr  4
.text:00413A10
.text:00413A10                 jmp     ds:__imp_CloseHandle
.text:00413A10 CloseHandle     endp
.text:00413A10
.text:00413A10 ; ---------------------------------------------------------------------------
.text:00413A16                 align 10h
.text:00413A20
.text:00413A20 ; =============== S U B R O U T I N E =======================================
.text:00413A20
.text:00413A20 ; Attributes: thunk
.text:00413A20
.text:00413A20 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:00413A20 SetErrorMode    proc near               ; CODE XREF: sub_410FB0-444A↑p
.text:00413A20                                         ; sub_40EB30+57↑p ...
.text:00413A20
.text:00413A20 uMode           = dword ptr  4
.text:00413A20
.text:00413A20                 jmp     ds:__imp_SetErrorMode
.text:00413A20 SetErrorMode    endp
.text:00413A20
.text:00413A20 ; ---------------------------------------------------------------------------
.text:00413A26                 align 10h
.text:00413A30
.text:00413A30 ; =============== S U B R O U T I N E =======================================
.text:00413A30
.text:00413A30 ; Attributes: thunk
.text:00413A30
.text:00413A30 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00413A30 GetModuleFileNameA proc near            ; CODE XREF: sub_40D120+1C↑p
.text:00413A30
.text:00413A30 hModule         = dword ptr  4
.text:00413A30 lpFilename      = dword ptr  8
.text:00413A30 nSize           = dword ptr  0Ch
.text:00413A30
.text:00413A30                 jmp     ds:__imp_GetModuleFileNameA
.text:00413A30 GetModuleFileNameA endp
.text:00413A30
.text:00413A30 ; ---------------------------------------------------------------------------
.text:00413A36                 align 10h
.text:00413A40
.text:00413A40 ; =============== S U B R O U T I N E =======================================
.text:00413A40
.text:00413A40 ; Attributes: thunk
.text:00413A40
.text:00413A40 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:00413A40 GetShortPathNameA proc near             ; CODE XREF: .text:0040D3A6↑p
.text:00413A40                                         ; .text:0040D3D0↑p
.text:00413A40
.text:00413A40 lpszLongPath    = dword ptr  4
.text:00413A40 lpszShortPath   = dword ptr  8
.text:00413A40 cchBuffer       = dword ptr  0Ch
.text:00413A40
.text:00413A40                 jmp     ds:__imp_GetShortPathNameA
.text:00413A40 GetShortPathNameA endp
.text:00413A40
.text:00413A40 ; ---------------------------------------------------------------------------
.text:00413A46                 align 10h
.text:00413A50
.text:00413A50 ; =============== S U B R O U T I N E =======================================
.text:00413A50
.text:00413A50 ; Attributes: thunk
.text:00413A50
.text:00413A50 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00413A50 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040D6D8↑p
.text:00413A50                                         ; .text:0040D6F4↑p ...
.text:00413A50
.text:00413A50 nBufferLength   = dword ptr  4
.text:00413A50 lpBuffer        = dword ptr  8
.text:00413A50
.text:00413A50                 jmp     ds:__imp_GetCurrentDirectoryA
.text:00413A50 GetCurrentDirectoryA endp
.text:00413A50
.text:00413A50 ; ---------------------------------------------------------------------------
.text:00413A56                 align 10h
.text:00413A60
.text:00413A60 ; =============== S U B R O U T I N E =======================================
.text:00413A60
.text:00413A60 ; Attributes: thunk
.text:00413A60
.text:00413A60 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:00413A60 DeviceIoControl proc near               ; CODE XREF: .text:0040DA8C↑p
.text:00413A60                                         ; sub_40DE50+1E5↑p
.text:00413A60
.text:00413A60 hDevice         = dword ptr  4
.text:00413A60 dwIoControlCode = dword ptr  8
.text:00413A60 lpInBuffer      = dword ptr  0Ch
.text:00413A60 nInBufferSize   = dword ptr  10h
.text:00413A60 lpOutBuffer     = dword ptr  14h
.text:00413A60 nOutBufferSize  = dword ptr  18h
.text:00413A60 lpBytesReturned = dword ptr  1Ch
.text:00413A60 lpOverlapped    = dword ptr  20h
.text:00413A60
.text:00413A60                 jmp     ds:__imp_DeviceIoControl
.text:00413A60 DeviceIoControl endp
.text:00413A60
.text:00413A60 ; ---------------------------------------------------------------------------
.text:00413A66                 align 10h
.text:00413A70
.text:00413A70 ; =============== S U B R O U T I N E =======================================
.text:00413A70
.text:00413A70 ; Attributes: thunk
.text:00413A70
.text:00413A70 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:00413A70 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:0040DDE3↑p
.text:00413A70                                         ; sub_40DE50+7B↑p ...
.text:00413A70
.text:00413A70 lpRootPathName  = dword ptr  4
.text:00413A70 lpSectorsPerCluster= dword ptr  8
.text:00413A70 lpBytesPerSector= dword ptr  0Ch
.text:00413A70 lpNumberOfFreeClusters= dword ptr  10h
.text:00413A70 lpTotalNumberOfClusters= dword ptr  14h
.text:00413A70
.text:00413A70                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:00413A70 GetDiskFreeSpaceA endp
.text:00413A70
.text:00413A70 ; ---------------------------------------------------------------------------
.text:00413A76                 align 10h
.text:00413A80
.text:00413A80 ; =============== S U B R O U T I N E =======================================
.text:00413A80
.text:00413A80 ; Attributes: thunk
.text:00413A80
.text:00413A80 ; BOOL __stdcall SetEndOfFile(HANDLE hFile)
.text:00413A80 SetEndOfFile    proc near               ; CODE XREF: sub_40E0F0+53↑p
.text:00413A80
.text:00413A80 hFile           = dword ptr  4
.text:00413A80
.text:00413A80                 jmp     ds:__imp_SetEndOfFile
.text:00413A80 SetEndOfFile    endp
.text:00413A80
.text:00413A80 ; ---------------------------------------------------------------------------
.text:00413A86                 align 10h
.text:00413A90
.text:00413A90 ; =============== S U B R O U T I N E =======================================
.text:00413A90
.text:00413A90 ; Attributes: thunk
.text:00413A90
.text:00413A90 ; void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
.text:00413A90 GetSystemInfo   proc near               ; CODE XREF: sub_40E1B0+3A↑p
.text:00413A90
.text:00413A90 lpSystemInfo    = dword ptr  4
.text:00413A90
.text:00413A90                 jmp     ds:__imp_GetSystemInfo
.text:00413A90 GetSystemInfo   endp
.text:00413A90
.text:00413A90 ; ---------------------------------------------------------------------------
.text:00413A96                 align 10h
.text:00413AA0
.text:00413AA0 ; =============== S U B R O U T I N E =======================================
.text:00413AA0
.text:00413AA0 ; Attributes: thunk
.text:00413AA0
.text:00413AA0 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00413AA0 UnlockFile      proc near               ; CODE XREF: sub_40E200+B4↑p
.text:00413AA0                                         ; sub_410590+40↑p
.text:00413AA0
.text:00413AA0 hFile           = dword ptr  4
.text:00413AA0 dwFileOffsetLow = dword ptr  8
.text:00413AA0 dwFileOffsetHigh= dword ptr  0Ch
.text:00413AA0 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00413AA0 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00413AA0
.text:00413AA0                 jmp     ds:__imp_UnlockFile
.text:00413AA0 UnlockFile      endp
.text:00413AA0
.text:00413AA0 ; ---------------------------------------------------------------------------
.text:00413AA6                 align 10h
.text:00413AB0
.text:00413AB0 ; =============== S U B R O U T I N E =======================================
.text:00413AB0
.text:00413AB0 ; Attributes: thunk
.text:00413AB0
.text:00413AB0 ; BOOL __stdcall LockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.text:00413AB0 LockFile        proc near               ; CODE XREF: sub_40E200+F7↑p
.text:00413AB0
.text:00413AB0 hFile           = dword ptr  4
.text:00413AB0 dwFileOffsetLow = dword ptr  8
.text:00413AB0 dwFileOffsetHigh= dword ptr  0Ch
.text:00413AB0 nNumberOfBytesToLockLow= dword ptr  10h
.text:00413AB0 nNumberOfBytesToLockHigh= dword ptr  14h
.text:00413AB0
.text:00413AB0                 jmp     ds:__imp_LockFile
.text:00413AB0 LockFile        endp
.text:00413AB0
.text:00413AB0 ; ---------------------------------------------------------------------------
.text:00413AB6                 align 10h
.text:00413AC0
.text:00413AC0 ; =============== S U B R O U T I N E =======================================
.text:00413AC0
.text:00413AC0 ; Attributes: thunk
.text:00413AC0
.text:00413AC0 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:00413AC0 GetFullPathNameA proc near              ; CODE XREF: sub_40EA00+45↑p
.text:00413AC0                                         ; sub_40EA00+ED↑p
.text:00413AC0
.text:00413AC0 lpFileName      = dword ptr  4
.text:00413AC0 nBufferLength   = dword ptr  8
.text:00413AC0 lpBuffer        = dword ptr  0Ch
.text:00413AC0 lpFilePart      = dword ptr  10h
.text:00413AC0
.text:00413AC0                 jmp     ds:__imp_GetFullPathNameA
.text:00413AC0 GetFullPathNameA endp
.text:00413AC0
.text:00413AC0 ; ---------------------------------------------------------------------------
.text:00413AC6                 align 10h
.text:00413AD0
.text:00413AD0 ; =============== S U B R O U T I N E =======================================
.text:00413AD0
.text:00413AD0 ; Attributes: thunk
.text:00413AD0
.text:00413AD0 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:00413AD0 lstrcmpiA       proc near               ; CODE XREF: .text:0040F0BB↑p
.text:00413AD0                                         ; .text:0040F0D2↑p ...
.text:00413AD0
.text:00413AD0 lpString1       = dword ptr  4
.text:00413AD0 lpString2       = dword ptr  8
.text:00413AD0
.text:00413AD0                 jmp     ds:__imp_lstrcmpiA
.text:00413AD0 lstrcmpiA       endp
.text:00413AD0
.text:00413AD0 ; ---------------------------------------------------------------------------
.text:00413AD6                 align 10h
.text:00413AE0
.text:00413AE0 ; =============== S U B R O U T I N E =======================================
.text:00413AE0
.text:00413AE0 ; Attributes: thunk
.text:00413AE0
.text:00413AE0 ; DWORD __stdcall GetVersion()
.text:00413AE0 GetVersion      proc near               ; CODE XREF: .text:0040F443↑p
.text:00413AE0                 jmp     ds:__imp_GetVersion
.text:00413AE0 GetVersion      endp
.text:00413AE0
.text:00413AE0 ; ---------------------------------------------------------------------------
.text:00413AE6                 align 10h
.text:00413AF0
.text:00413AF0 ; =============== S U B R O U T I N E =======================================
.text:00413AF0
.text:00413AF0 ; Attributes: thunk
.text:00413AF0
.text:00413AF0 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:00413AF0 GetVersionExA   proc near               ; CODE XREF: sub_40F4D0+32↑p
.text:00413AF0                                         ; sub_40F4D0+20B↑p
.text:00413AF0
.text:00413AF0 lpVersionInformation= dword ptr  4
.text:00413AF0
.text:00413AF0                 jmp     ds:__imp_GetVersionExA
.text:00413AF0 GetVersionExA   endp
.text:00413AF0
.text:00413AF0 ; ---------------------------------------------------------------------------
.text:00413AF6                 align 10h
.text:00413B00
.text:00413B00 ; =============== S U B R O U T I N E =======================================
.text:00413B00
.text:00413B00 ; Attributes: thunk
.text:00413B00
.text:00413B00 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00413B00 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040FB6F↑p
.text:00413B00                                         ; .text:0040FB9E↑p ...
.text:00413B00
.text:00413B00 nBufferLength   = dword ptr  4
.text:00413B00 lpBuffer        = dword ptr  8
.text:00413B00
.text:00413B00                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:00413B00 GetLogicalDriveStringsA endp
.text:00413B00
.text:00413B00 ; ---------------------------------------------------------------------------
.text:00413B06                 align 10h
.text:00413B10
.text:00413B10 ; =============== S U B R O U T I N E =======================================
.text:00413B10
.text:00413B10 ; Attributes: thunk
.text:00413B10
.text:00413B10 ; HANDLE __stdcall GetProcessHeap()
.text:00413B10 GetProcessHeap  proc near               ; CODE XREF: .text:0040FB79↑p
.text:00413B10                                         ; sub_410250+24↑p ...
.text:00413B10                 jmp     ds:__imp_GetProcessHeap
.text:00413B10 GetProcessHeap  endp
.text:00413B10
.text:00413B10 ; ---------------------------------------------------------------------------
.text:00413B16                 align 10h
.text:00413B20
.text:00413B20 ; =============== S U B R O U T I N E =======================================
.text:00413B20
.text:00413B20 ; Attributes: thunk
.text:00413B20
.text:00413B20 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:00413B20 HeapAlloc       proc near               ; CODE XREF: .text:0040FB8D↑p
.text:00413B20                                         ; sub_410250+38↑p ...
.text:00413B20
.text:00413B20 hHeap           = dword ptr  4
.text:00413B20 dwFlags         = dword ptr  8
.text:00413B20 dwBytes         = dword ptr  0Ch
.text:00413B20
.text:00413B20                 jmp     ds:__imp_HeapAlloc
.text:00413B20 HeapAlloc       endp
.text:00413B20
.text:00413B20 ; ---------------------------------------------------------------------------
.text:00413B26                 align 10h
.text:00413B30
.text:00413B30 ; =============== S U B R O U T I N E =======================================
.text:00413B30
.text:00413B30 ; Attributes: thunk
.text:00413B30
.text:00413B30 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:00413B30 HeapFree        proc near               ; CODE XREF: .text:0041038D↑p
.text:00413B30
.text:00413B30 hHeap           = dword ptr  4
.text:00413B30 dwFlags         = dword ptr  8
.text:00413B30 lpMem           = dword ptr  0Ch
.text:00413B30
.text:00413B30                 jmp     ds:__imp_HeapFree
.text:00413B30 HeapFree        endp
.text:00413B30
.text:00413B30 ; ---------------------------------------------------------------------------
.text:00413B36                 align 10h
.text:00413B40
.text:00413B40 ; =============== S U B R O U T I N E =======================================
.text:00413B40
.text:00413B40 ; Attributes: thunk
.text:00413B40
.text:00413B40 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:00413B40 GetTimeZoneInformation proc near        ; CODE XREF: sub_410430+22↑p
.text:00413B40
.text:00413B40 lpTimeZoneInformation= dword ptr  4
.text:00413B40
.text:00413B40                 jmp     ds:__imp_GetTimeZoneInformation
.text:00413B40 GetTimeZoneInformation endp
.text:00413B40
.text:00413B40 ; ---------------------------------------------------------------------------
.text:00413B46                 align 10h
.text:00413B50
.text:00413B50 ; =============== S U B R O U T I N E =======================================
.text:00413B50
.text:00413B50 ; Attributes: thunk
.text:00413B50
.text:00413B50 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:00413B50 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_410430+4F↑p
.text:00413B50
.text:00413B50 lpSystemTimeAsFileTime= dword ptr  4
.text:00413B50
.text:00413B50                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:00413B50 GetSystemTimeAsFileTime endp
.text:00413B50
.text:00413B50 ; ---------------------------------------------------------------------------
.text:00413B56                 align 10h
.text:00413B60
.text:00413B60 ; =============== S U B R O U T I N E =======================================
.text:00413B60
.text:00413B60 ; Attributes: thunk
.text:00413B60
.text:00413B60 ; BOOL __stdcall QueryPerformanceFrequency(LARGE_INTEGER *lpFrequency)
.text:00413B60 QueryPerformanceFrequency proc near     ; CODE XREF: sub_410520+27↑p
.text:00413B60
.text:00413B60 lpFrequency     = dword ptr  4
.text:00413B60
.text:00413B60                 jmp     ds:__imp_QueryPerformanceFrequency
.text:00413B60 QueryPerformanceFrequency endp
.text:00413B60
.text:00413B60 ; ---------------------------------------------------------------------------
.text:00413B66                 align 10h
.text:00413B70
.text:00413B70 ; =============== S U B R O U T I N E =======================================
.text:00413B70
.text:00413B70 ; Attributes: thunk
.text:00413B70
.text:00413B70 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:00413B70 CreateDirectoryA proc near              ; CODE XREF: sub_410F10+22↑p
.text:00413B70
.text:00413B70 lpPathName      = dword ptr  4
.text:00413B70 lpSecurityAttributes= dword ptr  8
.text:00413B70
.text:00413B70                 jmp     ds:__imp_CreateDirectoryA
.text:00413B70 CreateDirectoryA endp
.text:00413B70
.text:00413B70 ; ---------------------------------------------------------------------------
.text:00413B76                 align 10h
.text:00413B80
.text:00413B80 ; =============== S U B R O U T I N E =======================================
.text:00413B80
.text:00413B80 ; Attributes: thunk
.text:00413B80
.text:00413B80 ; BOOL __stdcall AreFileApisANSI()
.text:00413B80 AreFileApisANSI proc near               ; CODE XREF: sub_411110+89↑p
.text:00413B80                 jmp     ds:__imp_AreFileApisANSI
.text:00413B80 AreFileApisANSI endp
.text:00413B80
.text:00413B80 ; ---------------------------------------------------------------------------
.text:00413B86                 align 10h
.text:00413B90
.text:00413B90 ; =============== S U B R O U T I N E =======================================
.text:00413B90
.text:00413B90 ; Attributes: thunk
.text:00413B90
.text:00413B90 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:00413B90 MultiByteToWideChar proc near           ; CODE XREF: sub_411110+BD↑p
.text:00413B90
.text:00413B90 CodePage        = dword ptr  4
.text:00413B90 dwFlags         = dword ptr  8
.text:00413B90 lpMultiByteStr  = dword ptr  0Ch
.text:00413B90 cbMultiByte     = dword ptr  10h
.text:00413B90 lpWideCharStr   = dword ptr  14h
.text:00413B90 cchWideChar     = dword ptr  18h
.text:00413B90
.text:00413B90                 jmp     ds:__imp_MultiByteToWideChar
.text:00413B90 MultiByteToWideChar endp
.text:00413B90
.text:00413B90 ; ---------------------------------------------------------------------------
.text:00413B96                 align 10h
.text:00413BA0
.text:00413BA0 ; =============== S U B R O U T I N E =======================================
.text:00413BA0
.text:00413BA0 ; Attributes: thunk
.text:00413BA0
.text:00413BA0 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:00413BA0 lstrcpyA        proc near               ; CODE XREF: sub_411110+128↑p
.text:00413BA0
.text:00413BA0 lpString1       = dword ptr  4
.text:00413BA0 lpString2       = dword ptr  8
.text:00413BA0
.text:00413BA0                 jmp     ds:__imp_lstrcpyA
.text:00413BA0 lstrcpyA        endp
.text:00413BA0
.text:00413BA0 ; ---------------------------------------------------------------------------
.text:00413BA6                 align 10h
.text:00413BB0
.text:00413BB0 ; =============== S U B R O U T I N E =======================================
.text:00413BB0
.text:00413BB0 ; Attributes: thunk
.text:00413BB0
.text:00413BB0 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:00413BB0 RegOpenKeyExA   proc near               ; CODE XREF: .text:0040F041↑p
.text:00413BB0
.text:00413BB0 hKey            = dword ptr  4
.text:00413BB0 lpSubKey        = dword ptr  8
.text:00413BB0 ulOptions       = dword ptr  0Ch
.text:00413BB0 samDesired      = dword ptr  10h
.text:00413BB0 phkResult       = dword ptr  14h
.text:00413BB0
.text:00413BB0                 jmp     ds:__imp_RegOpenKeyExA
.text:00413BB0 RegOpenKeyExA   endp
.text:00413BB0
.text:00413BB0 ; ---------------------------------------------------------------------------
.text:00413BB6                 align 10h
.text:00413BC0
.text:00413BC0 ; =============== S U B R O U T I N E =======================================
.text:00413BC0
.text:00413BC0 ; Attributes: thunk
.text:00413BC0
.text:00413BC0 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:00413BC0 RegQueryValueExA proc near              ; CODE XREF: .text:0040F084↑p
.text:00413BC0
.text:00413BC0 hKey            = dword ptr  4
.text:00413BC0 lpValueName     = dword ptr  8
.text:00413BC0 lpReserved      = dword ptr  0Ch
.text:00413BC0 lpType          = dword ptr  10h
.text:00413BC0 lpData          = dword ptr  14h
.text:00413BC0 lpcbData        = dword ptr  18h
.text:00413BC0
.text:00413BC0                 jmp     ds:__imp_RegQueryValueExA
.text:00413BC0 RegQueryValueExA endp
.text:00413BC0
.text:00413BC0 ; ---------------------------------------------------------------------------
.text:00413BC6                 align 10h
.text:00413BD0
.text:00413BD0 ; =============== S U B R O U T I N E =======================================
.text:00413BD0
.text:00413BD0 ; Attributes: thunk
.text:00413BD0
.text:00413BD0 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:00413BD0 RegCloseKey     proc near               ; CODE XREF: .text:0040F0A8↑p
.text:00413BD0
.text:00413BD0 hKey            = dword ptr  4
.text:00413BD0
.text:00413BD0                 jmp     ds:__imp_RegCloseKey
.text:00413BD0 RegCloseKey     endp
.text:00413BD0
.text:00413BD0 ; ---------------------------------------------------------------------------
.text:00413BD6                 db 2 dup(90h)
.text:00413BD8                 dd 2 dup(0)
.text:00413BE0                 dd 21400h, 0
.text:00413BE8                 dd 0C0h, 46000000h
.text:00413BF0 ; const IID rclsid
.text:00413BF0 rclsid          dd 21401h               ; Data1
.text:00413BF0                                         ; DATA XREF: sub_411110+4B↑o
.text:00413BF0                 dw 0                    ; Data2
.text:00413BF0                 dw 0                    ; Data3
.text:00413BF0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00413C00                 dd 214A0h, 0
.text:00413C08                 dd 0C0h, 46000000h, 214A1h, 0
.text:00413C18                 dd 0C0h, 46000000h, 214D0h, 0
.text:00413C28                 dd 0C0h, 46000000h, 214D1h, 0
.text:00413C38                 dd 0C0h, 46000000h, 214D2h, 0
.text:00413C48                 dd 0C0h, 46000000h, 214E1h, 0
.text:00413C58                 dd 0C0h, 46000000h, 214E2h, 0
.text:00413C68                 dd 0C0h, 46000000h, 214E3h, 0
.text:00413C78                 dd 0C0h, 46000000h, 214E4h, 0
.text:00413C88                 dd 0C0h, 46000000h, 21500h, 0
.text:00413C98                 dd 0C0h, 46000000h, 214E5h, 0
.text:00413CA8                 dd 0C0h, 46000000h, 214E6h, 0
.text:00413CB8                 dd 0C0h, 46000000h, 214E8h, 0
.text:00413CC8                 dd 0C0h, 46000000h, 214E9h, 0
.text:00413CD8                 dd 0C0h, 46000000h, 214EAh, 0
.text:00413CE8                 dd 0C0h, 46000000h, 214EBh, 0
.text:00413CF8                 dd 0C0h, 46000000h
.text:00413D00 ; const IID riid
.text:00413D00 riid            dd 214EEh               ; Data1
.text:00413D00                                         ; DATA XREF: sub_411110+2B↑o
.text:00413D00                 dw 0                    ; Data2
.text:00413D00                 dw 0                    ; Data3
.text:00413D00                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00413D10                 dd 214EFh, 0
.text:00413D18                 dd 0C0h, 46000000h, 214F0h, 0
.text:00413D28                 dd 0C0h, 46000000h, 214F1h, 0
.text:00413D38                 dd 0C0h, 46000000h, 214F2h, 0
.text:00413D48                 dd 0C0h, 46000000h, 214F3h, 0
.text:00413D58                 dd 0C0h, 46000000h, 214F4h, 0
.text:00413D68                 dd 0C0h, 46000000h, 214F5h, 0
.text:00413D78                 dd 0C0h, 46000000h, 214F6h, 0
.text:00413D88                 dd 0C0h, 46000000h, 214F7h, 0
.text:00413D98                 dd 0C0h, 46000000h, 214F8h, 0
.text:00413DA8                 dd 0C0h, 46000000h, 214F9h, 0
.text:00413DB8                 dd 0C0h, 46000000h, 214FAh, 0
.text:00413DC8                 dd 0C0h, 46000000h, 214FBh, 0
.text:00413DD8                 dd 0C0h, 46000000h, 214FCh, 0
.text:00413DE8                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:00413DE8                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:00413DE8                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:00413DE8                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:00413DE8                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00413DE8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:00413DE8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:00413DE8                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00413DE8                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:00413DE8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:00413EB8                 dd 0C0h, 46000000h, 2DF05h, 0
.text:00413EC8                 dd 0C0h, 46000000h, 2DF06h, 0
.text:00413ED8                 dd 0C0h, 46000000h, 2DF01h, 0
.text:00413EE8                 dd 0C0h, 46000000h, 2DF09h, 0
.text:00413EF8                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:00413EF8                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:00413EF8                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:00413EF8                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:00413EF8                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:00413EF8                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:00413EF8                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:00413F80 dword_413F80    dd 0FFFFFFFFh           ; DATA XREF: .text:004128D9↑r
.text:00413F80                                         ; .text:loc_412900↑r ...
.text:00413F84 dword_413F84    dd 0                    ; DATA XREF: .text:loc_41290C↑r
.text:00413F84                                         ; sub_412930:loc_41297D↑r
.text:00413F88                 dd 0FFFFFFFFh
.text:00413F8C dword_413F8C    dd 1Dh dup(0)           ; DATA XREF: .data:off_4140E4↓o
.text:00413F8C _text           ends
.text:00413F8C
.data:00414000 ; Section 2. (virtual address 00014000)
.data:00414000 ; Virtual size                  : 00000100 (    256.)
.data:00414000 ; Section size in file          : 00000200 (    512.)
.data:00414000 ; Offset to raw data for section: 00013400
.data:00414000 ; Flags C0000040: Data Readable Writable
.data:00414000 ; Alignment     : default
.data:00414000 ; ===========================================================================
.data:00414000
.data:00414000 ; Segment type: Pure data
.data:00414000 ; Segment permissions: Read/Write
.data:00414000 _data           segment para public 'DATA' use32
.data:00414000                 assume cs:_data
.data:00414000                 ;org 414000h
.data:00414000 dword_414000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00414000                                         ; sub_401080+CC↑r
.data:00414004 dword_414004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00414004                                         ; sub_401080+D4↑r
.data:00414008                 align 10h
.data:00414010 dword_414010    dd 0FFFFFFFFh           ; DATA XREF: sub_403500+4BA↑w
.data:00414010                                         ; sub_403DD0+96↑r ...
.data:00414014 dword_414014    dd 0FFFFFFFFh           ; DATA XREF: sub_403500+4C0↑w
.data:00414014                                         ; sub_403DD0:loc_403E5E↑r ...
.data:00414018 byte_414018     db 0Ah                  ; DATA XREF: sub_403BE0+C4↑w
.data:00414018                                         ; sub_403DD0:loc_404586↑r ...
.data:00414019 byte_414019     db 20h                  ; DATA XREF: sub_403BE0+CB↑w
.data:00414019                                         ; sub_403DD0:loc_4043FB↑r ...
.data:0041401A                 align 4
.data:0041401C off_41401C      dd offset sub_4068B0    ; DATA XREF: sub_402550+EE↑w
.data:0041401C                                         ; sub_4047F0+3↑r
.data:00414020 dword_414020    dd 1                    ; DATA XREF: sub_403500+7↑r
.data:00414020                                         ; sub_406320+3↑r ...
.data:00414024 dword_414024    dd 1                    ; DATA XREF: sub_406320+11↑r
.data:00414024                                         ; .text:004063C1↑r ...
.data:00414028 dword_414028    dd 3Fh                  ; DATA XREF: sub_406320+7D↑w
.data:00414028                                         ; .text:0040642D↑w
.data:0041402C                 align 10h
.data:00414030 ; char *Buffer
.data:00414030 Buffer          dd offset aCopyrightC2005
.data:00414030                                         ; DATA XREF: sub_408E30+DC↑r
.data:00414030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00414034                 align 10h
.data:00414040 ; int Code
.data:00414040 Code            dd 1                    ; DATA XREF: sub_4068B0+6D↑r
.data:00414040                                         ; sub_4068B0+9A↑r ...
.data:00414044                 align 10h
.data:00414050 dword_414050    dd 1                    ; DATA XREF: sub_40A210+22↑r
.data:00414050                                         ; sub_40A210+65↑r ...
.data:00414054 dword_414054    dd 100h                 ; DATA XREF: sub_40A210+3F↑o
.data:00414054                                         ; sub_40A210+1A2↑r ...
.data:00414058 off_414058      dd offset unk_415310    ; DATA XREF: sub_40A210+1AA↑r
.data:0041405C ; void *off_41405C
.data:0041405C off_41405C      dd offset dword_414054  ; DATA XREF: sub_40A210+39↑r
.data:0041405C                                         ; sub_40A210+60↑w ...
.data:00414060                 dd offset sub_40AA40
.data:00414064                 align 10h
.data:00414070 dword_414070    dd 200h                 ; DATA XREF: sub_40AFD0+6CD↑r
.data:00414070                                         ; sub_40AFD0+6D8↑r ...
.data:00414074 ; char *off_414074
.data:00414074 off_414074      dd offset aComExeBatCmd ; DATA XREF: sub_40B880+3D3↑r
.data:00414074                                         ; sub_40B880+400↑r ...
.data:00414074                                         ; ".com;.exe;.bat;.cmd"
.data:00414078                 align 10h
.data:00414080 byte_414080     db 41h                  ; DATA XREF: sub_40D550+6B↑w
.data:00414080                                         ; sub_40D550:loc_40D664↑r
.data:00414081                 align 10h
.data:00414090 dword_414090    dd 1                    ; DATA XREF: .text:loc_40EEF7↑r
.data:00414090                                         ; sub_40F4D0+202↑w
.data:00414094                 align 10h
.data:004140A0 off_4140A0      dd offset aNotset       ; DATA XREF: .text:0040F74A↑r
.data:004140A0                                         ; .text:00410392↑r
.data:004140A0                                         ; "notset"
.data:004140A4 off_4140A4      dd offset aNotset       ; DATA XREF: .text:0040F762↑r
.data:004140A4                                         ; .text:0040F784↑r ...
.data:004140A4                                         ; "notset"
.data:004140A8                 align 10h
.data:004140B0 dword_4140B0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:004140B4                 align 10h
.data:004140C0 ; int Mode
.data:004140C0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004140C0                                         ; sub_401080+80↑r ...
.data:004140C4                 align 10h
.data:004140D0 dword_4140D0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004140D0                                         ; sub_401080+BA↑r
.data:004140D4                 align 10h
.data:004140E0 dword_4140E0    dd 0                    ; DATA XREF: sub_412930+9↑r
.data:004140E0                                         ; sub_412930+1D↑w
.data:004140E4 off_4140E4      dd offset dword_413F8C  ; DATA XREF: sub_4128A0+6↑r
.data:004140E4                                         ; sub_4128A0+17↑r ...
.data:004140E8                 align 1000h
.data:004140E8 _data           ends
.data:004140E8
.bss:00415000 ; Section 3. (virtual address 00015000)
.bss:00415000 ; Virtual size                  : 00000880 (   2176.)
.bss:00415000 ; Section size in file          : 00000000 (      0.)
.bss:00415000 ; Offset to raw data for section: 00000000
.bss:00415000 ; Flags C0000080: Bss Readable Writable
.bss:00415000 ; Alignment     : default
.bss:00415000 ; ===========================================================================
.bss:00415000
.bss:00415000 ; Segment type: Uninitialized
.bss:00415000 ; Segment permissions: Read/Write
.bss:00415000 _bss            segment para public 'BSS' use32
.bss:00415000                 assume cs:_bss
.bss:00415000                 ;org 415000h
.bss:00415000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00415000 ; char *dword_415000
.bss:00415000 dword_415000    dd ?                    ; DATA XREF: sub_402550+11F↑r
.bss:00415000                                         ; sub_402550+144↑w ...
.bss:00415004                 align 10h
.bss:00415010 ; char *FileName
.bss:00415010 FileName        dd ?                    ; DATA XREF: sub_402550+1A4↑r
.bss:00415010                                         ; sub_402550:loc_402917↑r ...
.bss:00415014                 align 10h
.bss:00415020 ; size_t Size
.bss:00415020 Size            dd ?                    ; DATA XREF: sub_403500:loc_403578↑r
.bss:00415020                                         ; sub_403500+AE↑w ...
.bss:00415024                 align 10h
.bss:00415030 ; int dword_415030
.bss:00415030 dword_415030    dd ?                    ; DATA XREF: sub_402550+2A3↑r
.bss:00415030                                         ; sub_403500+86↑r ...
.bss:00415034                 align 10h
.bss:00415040 dword_415040    dd ?                    ; DATA XREF: sub_403500:loc_4035C3↑r
.bss:00415040                                         ; sub_403500+41C↑w ...
.bss:00415044                 align 10h
.bss:00415050 ; int dword_415050
.bss:00415050 dword_415050    dd ?                    ; DATA XREF: sub_403500+466↑w
.bss:00415050                                         ; sub_403DD0+68↑r
.bss:00415054 ; int dword_415054
.bss:00415054 dword_415054    dd ?                    ; DATA XREF: sub_403500+46C↑w
.bss:00415054                                         ; sub_403DD0:loc_403E32↑r
.bss:00415058                 align 10h
.bss:00415060 ; int dword_415060
.bss:00415060 dword_415060    dd ?                    ; DATA XREF: sub_402550+1E7↑r
.bss:00415060                                         ; sub_402550+284↑r ...
.bss:00415064 ; int dword_415064
.bss:00415064 dword_415064    dd ?                    ; DATA XREF: sub_402550:loc_40272F↑r
.bss:00415064                                         ; sub_402550:loc_4027CE↑r ...
.bss:00415068                 align 10h
.bss:00415070 dword_415070    dd ?                    ; DATA XREF: sub_402550+1C0↑r
.bss:00415070                                         ; sub_403500:loc_403593↑r ...
.bss:00415074                 align 10h
.bss:00415080 dword_415080    dd ?                    ; DATA XREF: sub_402550+13A↑r
.bss:00415080                                         ; sub_402550+737↑r ...
.bss:00415084                 align 10h
.bss:00415090 dword_415090    dd ?                    ; DATA XREF: sub_402550+1C6↑r
.bss:00415090                                         ; sub_402550+5DF↑r ...
.bss:00415094                 align 10h
.bss:004150A0 dword_4150A0    dd ?                    ; DATA XREF: sub_402DF0:loc_402F61↑r
.bss:004150A0                                         ; sub_403500+268↑w
.bss:004150A4                 align 10h
.bss:004150B0 byte_4150B0     db ?                    ; DATA XREF: sub_403BE0+3D↑w
.bss:004150B0                                         ; sub_403BE0:loc_403C67↑w ...
.bss:004150B1                 align 10h
.bss:004150C0 dword_4150C0    dd ?                    ; DATA XREF: sub_402DF0+A0↑r
.bss:004150C0                                         ; sub_403DD0+374↑w ...
.bss:004150C4 dword_4150C4    dd ?                    ; DATA XREF: sub_402DF0+A6↑r
.bss:004150C4                                         ; sub_403DD0+37B↑w ...
.bss:004150C8                 align 10h
.bss:004150D0 dword_4150D0    dd ?                    ; DATA XREF: sub_402DF0+C4↑r
.bss:004150D0                                         ; sub_403DD0+31A↑w ...
.bss:004150D4 dword_4150D4    dd ?                    ; DATA XREF: sub_402DF0+BC↑r
.bss:004150D4                                         ; sub_403DD0+321↑w ...
.bss:004150D8                 align 10h
.bss:004150E0 dword_4150E0    dd ?                    ; DATA XREF: sub_402DF0+35↑r
.bss:004150E0                                         ; sub_403DD0+BB↑r ...
.bss:004150E4 dword_4150E4    dd ?                    ; DATA XREF: sub_402DF0+28↑r
.bss:004150E4                                         ; sub_403DD0+C1↑r ...
.bss:004150E8                 align 10h
.bss:004150F0 dword_4150F0    dd ?                    ; DATA XREF: sub_402DF0+4F↑r
.bss:004150F0                                         ; sub_403DD0:loc_403E80↑r ...
.bss:004150F4 dword_4150F4    dd ?                    ; DATA XREF: sub_402DF0+57↑r
.bss:004150F4                                         ; sub_403DD0+B5↑r ...
.bss:004150F8                 align 10h
.bss:00415100 ; int dword_415100
.bss:00415100 dword_415100    dd ?                    ; DATA XREF: sub_402DF0+18D↑r
.bss:00415100                                         ; sub_402DF0+1D4↑r ...
.bss:00415104 ; int dword_415104
.bss:00415104 dword_415104    dd ?                    ; DATA XREF: sub_402DF0+1A2↑r
.bss:00415104                                         ; sub_402DF0+1DC↑r ...
.bss:00415108                 align 10h
.bss:00415110 dword_415110    dd ?                    ; DATA XREF: sub_402DF0+108↑r
.bss:00415110                                         ; sub_402DF0+136↑r ...
.bss:00415114 dword_415114    dd ?                    ; DATA XREF: sub_402DF0+102↑r
.bss:00415114                                         ; sub_402DF0+13C↑r ...
.bss:00415118                 align 10h
.bss:00415120 dword_415120    dd ?                    ; DATA XREF: sub_403DD0:loc_404060↑r
.bss:00415120                                         ; sub_403DD0+2BB↑r ...
.bss:00415124                 align 10h
.bss:00415130 dword_415130    dd ?                    ; DATA XREF: sub_403DD0+617↑r
.bss:00415130                                         ; sub_403DD0+66D↑r ...
.bss:00415134                 align 10h
.bss:00415140 byte_415140     db ?                    ; DATA XREF: sub_403DD0+20D↑r
.bss:00415140                                         ; sub_403DD0+22A↑w ...
.bss:00415141                 align 10h
.bss:00415150 dword_415150    dd ?                    ; DATA XREF: sub_405290+51↑w
.bss:00415150                                         ; sub_405290+1F7↑r ...
.bss:00415154                 align 10h
.bss:00415160 dword_415160    dd ?                    ; DATA XREF: sub_402550:loc_4028D7↑o
.bss:00415160                                         ; sub_402DF0+A↑r ...
.bss:00415164 dword_415164    dd ?                    ; DATA XREF: sub_402DF0+257↑r
.bss:00415164                                         ; sub_402DF0:loc_40316A↑r ...
.bss:00415168                 align 10h
.bss:00415170 byte_415170     db ?                    ; DATA XREF: sub_402550+199↑w
.bss:00415170                                         ; sub_403DD0+58D↑w ...
.bss:00415171                 align 10h
.bss:00415180 dword_415180    dd ?                    ; DATA XREF: sub_402550+1AE↑w
.bss:00415180                                         ; sub_403DD0+594↑w ...
.bss:00415184                 align 10h
.bss:00415190 dword_415190    dd ?                    ; DATA XREF: sub_402550+191↑w
.bss:00415190                                         ; sub_403DD0:loc_403EF2↑r ...
.bss:00415194 dword_415194    dd ?                    ; DATA XREF: sub_402550+187↑w
.bss:00415194                                         ; sub_403DD0+12C↑r ...
.bss:00415198                 align 10h
.bss:004151A0 byte_4151A0     db ?                    ; DATA XREF: sub_403DD0:loc_403F1C↑w
.bss:004151A0                                         ; sub_404A70:loc_404B21↑w ...
.bss:004151A1                 align 10h
.bss:004151B0 ; int dword_4151B0
.bss:004151B0 dword_4151B0    dd ?                    ; DATA XREF: sub_403DD0+5D↑w
.bss:004151B0                                         ; sub_403DD0+1C4↑r ...
.bss:004151B4                 align 10h
.bss:004151C0 byte_4151C0     db ?                    ; DATA XREF: sub_402550:loc_402650↑w
.bss:004151C0                                         ; sub_403BE0:loc_403C00↑r ...
.bss:004151C1                 db    ? ;
.bss:004151C2                 db    ? ;
.bss:004151C3                 db    ? ;
.bss:004151C4                 db    ? ;
.bss:004151C5                 db    ? ;
.bss:004151C6                 db    ? ;
.bss:004151C7                 db    ? ;
.bss:004151C8                 db    ? ;
.bss:004151C9                 db    ? ;
.bss:004151CA                 db    ? ;
.bss:004151CB                 db    ? ;
.bss:004151CC                 db    ? ;
.bss:004151CD                 db    ? ;
.bss:004151CE                 db    ? ;
.bss:004151CF                 db    ? ;
.bss:004151D0                 db    ? ;
.bss:004151D1                 db    ? ;
.bss:004151D2                 db    ? ;
.bss:004151D3                 db    ? ;
.bss:004151D4                 db    ? ;
.bss:004151D5                 db    ? ;
.bss:004151D6                 db    ? ;
.bss:004151D7                 db    ? ;
.bss:004151D8                 db    ? ;
.bss:004151D9                 db    ? ;
.bss:004151DA                 db    ? ;
.bss:004151DB                 db    ? ;
.bss:004151DC                 db    ? ;
.bss:004151DD                 db    ? ;
.bss:004151DE                 db    ? ;
.bss:004151DF                 db    ? ;
.bss:004151E0                 db    ? ;
.bss:004151E1                 db    ? ;
.bss:004151E2                 db    ? ;
.bss:004151E3                 db    ? ;
.bss:004151E4                 db    ? ;
.bss:004151E5                 db    ? ;
.bss:004151E6                 db    ? ;
.bss:004151E7                 db    ? ;
.bss:004151E8                 db    ? ;
.bss:004151E9                 db    ? ;
.bss:004151EA                 db    ? ;
.bss:004151EB                 db    ? ;
.bss:004151EC                 db    ? ;
.bss:004151ED                 db    ? ;
.bss:004151EE                 db    ? ;
.bss:004151EF                 db    ? ;
.bss:004151F0                 db    ? ;
.bss:004151F1                 db    ? ;
.bss:004151F2                 db    ? ;
.bss:004151F3                 db    ? ;
.bss:004151F4                 db    ? ;
.bss:004151F5                 db    ? ;
.bss:004151F6                 db    ? ;
.bss:004151F7                 db    ? ;
.bss:004151F8                 db    ? ;
.bss:004151F9                 db    ? ;
.bss:004151FA                 db    ? ;
.bss:004151FB                 db    ? ;
.bss:004151FC                 db    ? ;
.bss:004151FD                 db    ? ;
.bss:004151FE                 db    ? ;
.bss:004151FF                 db    ? ;
.bss:00415200                 db    ? ;
.bss:00415201                 db    ? ;
.bss:00415202                 db    ? ;
.bss:00415203                 db    ? ;
.bss:00415204                 db    ? ;
.bss:00415205                 db    ? ;
.bss:00415206                 db    ? ;
.bss:00415207                 db    ? ;
.bss:00415208                 db    ? ;
.bss:00415209                 db    ? ;
.bss:0041520A                 db    ? ;
.bss:0041520B                 db    ? ;
.bss:0041520C                 db    ? ;
.bss:0041520D                 db    ? ;
.bss:0041520E                 db    ? ;
.bss:0041520F                 db    ? ;
.bss:00415210                 db    ? ;
.bss:00415211                 db    ? ;
.bss:00415212                 db    ? ;
.bss:00415213                 db    ? ;
.bss:00415214                 db    ? ;
.bss:00415215                 db    ? ;
.bss:00415216                 db    ? ;
.bss:00415217                 db    ? ;
.bss:00415218                 db    ? ;
.bss:00415219                 db    ? ;
.bss:0041521A                 db    ? ;
.bss:0041521B                 db    ? ;
.bss:0041521C                 db    ? ;
.bss:0041521D                 db    ? ;
.bss:0041521E                 db    ? ;
.bss:0041521F                 db    ? ;
.bss:00415220                 db    ? ;
.bss:00415221                 db    ? ;
.bss:00415222                 db    ? ;
.bss:00415223                 db    ? ;
.bss:00415224                 db    ? ;
.bss:00415225                 db    ? ;
.bss:00415226                 db    ? ;
.bss:00415227                 db    ? ;
.bss:00415228                 db    ? ;
.bss:00415229                 db    ? ;
.bss:0041522A                 db    ? ;
.bss:0041522B                 db    ? ;
.bss:0041522C                 db    ? ;
.bss:0041522D                 db    ? ;
.bss:0041522E                 db    ? ;
.bss:0041522F                 db    ? ;
.bss:00415230                 db    ? ;
.bss:00415231                 db    ? ;
.bss:00415232                 db    ? ;
.bss:00415233                 db    ? ;
.bss:00415234                 db    ? ;
.bss:00415235                 db    ? ;
.bss:00415236                 db    ? ;
.bss:00415237                 db    ? ;
.bss:00415238                 db    ? ;
.bss:00415239                 db    ? ;
.bss:0041523A                 db    ? ;
.bss:0041523B                 db    ? ;
.bss:0041523C                 db    ? ;
.bss:0041523D                 db    ? ;
.bss:0041523E                 db    ? ;
.bss:0041523F                 db    ? ;
.bss:00415240                 db    ? ;
.bss:00415241                 db    ? ;
.bss:00415242                 db    ? ;
.bss:00415243                 db    ? ;
.bss:00415244                 db    ? ;
.bss:00415245                 db    ? ;
.bss:00415246                 db    ? ;
.bss:00415247                 db    ? ;
.bss:00415248                 db    ? ;
.bss:00415249                 db    ? ;
.bss:0041524A                 db    ? ;
.bss:0041524B                 db    ? ;
.bss:0041524C                 db    ? ;
.bss:0041524D                 db    ? ;
.bss:0041524E                 db    ? ;
.bss:0041524F                 db    ? ;
.bss:00415250                 db    ? ;
.bss:00415251                 db    ? ;
.bss:00415252                 db    ? ;
.bss:00415253                 db    ? ;
.bss:00415254                 db    ? ;
.bss:00415255                 db    ? ;
.bss:00415256                 db    ? ;
.bss:00415257                 db    ? ;
.bss:00415258                 db    ? ;
.bss:00415259                 db    ? ;
.bss:0041525A                 db    ? ;
.bss:0041525B                 db    ? ;
.bss:0041525C                 db    ? ;
.bss:0041525D                 db    ? ;
.bss:0041525E                 db    ? ;
.bss:0041525F                 db    ? ;
.bss:00415260                 db    ? ;
.bss:00415261                 db    ? ;
.bss:00415262                 db    ? ;
.bss:00415263                 db    ? ;
.bss:00415264                 db    ? ;
.bss:00415265                 db    ? ;
.bss:00415266                 db    ? ;
.bss:00415267                 db    ? ;
.bss:00415268                 db    ? ;
.bss:00415269                 db    ? ;
.bss:0041526A                 db    ? ;
.bss:0041526B                 db    ? ;
.bss:0041526C                 db    ? ;
.bss:0041526D                 db    ? ;
.bss:0041526E                 db    ? ;
.bss:0041526F                 db    ? ;
.bss:00415270                 db    ? ;
.bss:00415271                 db    ? ;
.bss:00415272                 db    ? ;
.bss:00415273                 db    ? ;
.bss:00415274                 db    ? ;
.bss:00415275                 db    ? ;
.bss:00415276                 db    ? ;
.bss:00415277                 db    ? ;
.bss:00415278                 db    ? ;
.bss:00415279                 db    ? ;
.bss:0041527A                 db    ? ;
.bss:0041527B                 db    ? ;
.bss:0041527C                 db    ? ;
.bss:0041527D                 db    ? ;
.bss:0041527E                 db    ? ;
.bss:0041527F                 db    ? ;
.bss:00415280                 db    ? ;
.bss:00415281                 db    ? ;
.bss:00415282                 db    ? ;
.bss:00415283                 db    ? ;
.bss:00415284                 db    ? ;
.bss:00415285                 db    ? ;
.bss:00415286                 db    ? ;
.bss:00415287                 db    ? ;
.bss:00415288                 db    ? ;
.bss:00415289                 db    ? ;
.bss:0041528A                 db    ? ;
.bss:0041528B                 db    ? ;
.bss:0041528C                 db    ? ;
.bss:0041528D                 db    ? ;
.bss:0041528E                 db    ? ;
.bss:0041528F                 db    ? ;
.bss:00415290                 db    ? ;
.bss:00415291                 db    ? ;
.bss:00415292                 db    ? ;
.bss:00415293                 db    ? ;
.bss:00415294                 db    ? ;
.bss:00415295                 db    ? ;
.bss:00415296                 db    ? ;
.bss:00415297                 db    ? ;
.bss:00415298                 db    ? ;
.bss:00415299                 db    ? ;
.bss:0041529A                 db    ? ;
.bss:0041529B                 db    ? ;
.bss:0041529C                 db    ? ;
.bss:0041529D                 db    ? ;
.bss:0041529E                 db    ? ;
.bss:0041529F                 db    ? ;
.bss:004152A0                 db    ? ;
.bss:004152A1                 db    ? ;
.bss:004152A2                 db    ? ;
.bss:004152A3                 db    ? ;
.bss:004152A4                 db    ? ;
.bss:004152A5                 db    ? ;
.bss:004152A6                 db    ? ;
.bss:004152A7                 db    ? ;
.bss:004152A8                 db    ? ;
.bss:004152A9                 db    ? ;
.bss:004152AA                 db    ? ;
.bss:004152AB                 db    ? ;
.bss:004152AC                 db    ? ;
.bss:004152AD                 db    ? ;
.bss:004152AE                 db    ? ;
.bss:004152AF                 db    ? ;
.bss:004152B0                 db    ? ;
.bss:004152B1                 db    ? ;
.bss:004152B2                 db    ? ;
.bss:004152B3                 db    ? ;
.bss:004152B4                 db    ? ;
.bss:004152B5                 db    ? ;
.bss:004152B6                 db    ? ;
.bss:004152B7                 db    ? ;
.bss:004152B8                 db    ? ;
.bss:004152B9                 db    ? ;
.bss:004152BA                 db    ? ;
.bss:004152BB                 db    ? ;
.bss:004152BC                 db    ? ;
.bss:004152BD                 db    ? ;
.bss:004152BE                 db    ? ;
.bss:004152BF                 db    ? ;
.bss:004152C0 byte_4152C0     db ?                    ; DATA XREF: sub_403DD0+21A↑r
.bss:004152C0                                         ; sub_403DD0+245↑w ...
.bss:004152C1                 align 10h
.bss:004152D0 dword_4152D0    dd ?                    ; DATA XREF: sub_406320+9↑o
.bss:004152D0                                         ; sub_406320+17↑w ...
.bss:004152D4 dword_4152D4    dd ?                    ; DATA XREF: sub_406320+21↑w
.bss:004152D4                                         ; .text:004063D9↑w
.bss:004152D8 dword_4152D8    dd ?                    ; DATA XREF: sub_406320+77↑r
.bss:004152D8                                         ; .text:00406427↑r
.bss:004152DC dword_4152DC    dd ?                    ; DATA XREF: sub_406320+6B↑r
.bss:004152DC                                         ; .text:0040641B↑r
.bss:004152E0                 align 40h
.bss:00415300 ; char *dword_415300
.bss:00415300 dword_415300    dd ?                    ; DATA XREF: .text:00406884↑w
.bss:00415300                                         ; sub_4068B0+58↑r
.bss:00415304                 align 10h
.bss:00415310 unk_415310      db    ? ;               ; DATA XREF: sub_40A210+100↑o
.bss:00415310                                         ; .data:off_414058↑o
.bss:00415311                 db    ? ;
.bss:00415312                 db    ? ;
.bss:00415313                 db    ? ;
.bss:00415314                 db    ? ;
.bss:00415315                 db    ? ;
.bss:00415316                 db    ? ;
.bss:00415317                 db    ? ;
.bss:00415318                 db    ? ;
.bss:00415319                 db    ? ;
.bss:0041531A                 db    ? ;
.bss:0041531B                 db    ? ;
.bss:0041531C                 db    ? ;
.bss:0041531D                 db    ? ;
.bss:0041531E                 db    ? ;
.bss:0041531F                 db    ? ;
.bss:00415320                 db    ? ;
.bss:00415321                 db    ? ;
.bss:00415322                 db    ? ;
.bss:00415323                 db    ? ;
.bss:00415324                 db    ? ;
.bss:00415325                 db    ? ;
.bss:00415326                 db    ? ;
.bss:00415327                 db    ? ;
.bss:00415328                 db    ? ;
.bss:00415329                 db    ? ;
.bss:0041532A                 db    ? ;
.bss:0041532B                 db    ? ;
.bss:0041532C                 db    ? ;
.bss:0041532D                 db    ? ;
.bss:0041532E                 db    ? ;
.bss:0041532F                 db    ? ;
.bss:00415330                 db    ? ;
.bss:00415331                 db    ? ;
.bss:00415332                 db    ? ;
.bss:00415333                 db    ? ;
.bss:00415334                 db    ? ;
.bss:00415335                 db    ? ;
.bss:00415336                 db    ? ;
.bss:00415337                 db    ? ;
.bss:00415338                 db    ? ;
.bss:00415339                 db    ? ;
.bss:0041533A                 db    ? ;
.bss:0041533B                 db    ? ;
.bss:0041533C                 db    ? ;
.bss:0041533D                 db    ? ;
.bss:0041533E                 db    ? ;
.bss:0041533F                 db    ? ;
.bss:00415340                 db    ? ;
.bss:00415341                 db    ? ;
.bss:00415342                 db    ? ;
.bss:00415343                 db    ? ;
.bss:00415344                 db    ? ;
.bss:00415345                 db    ? ;
.bss:00415346                 db    ? ;
.bss:00415347                 db    ? ;
.bss:00415348                 db    ? ;
.bss:00415349                 db    ? ;
.bss:0041534A                 db    ? ;
.bss:0041534B                 db    ? ;
.bss:0041534C                 db    ? ;
.bss:0041534D                 db    ? ;
.bss:0041534E                 db    ? ;
.bss:0041534F                 db    ? ;
.bss:00415350                 db    ? ;
.bss:00415351                 db    ? ;
.bss:00415352                 db    ? ;
.bss:00415353                 db    ? ;
.bss:00415354                 db    ? ;
.bss:00415355                 db    ? ;
.bss:00415356                 db    ? ;
.bss:00415357                 db    ? ;
.bss:00415358                 db    ? ;
.bss:00415359                 db    ? ;
.bss:0041535A                 db    ? ;
.bss:0041535B                 db    ? ;
.bss:0041535C                 db    ? ;
.bss:0041535D                 db    ? ;
.bss:0041535E                 db    ? ;
.bss:0041535F                 db    ? ;
.bss:00415360                 db    ? ;
.bss:00415361                 db    ? ;
.bss:00415362                 db    ? ;
.bss:00415363                 db    ? ;
.bss:00415364                 db    ? ;
.bss:00415365                 db    ? ;
.bss:00415366                 db    ? ;
.bss:00415367                 db    ? ;
.bss:00415368                 db    ? ;
.bss:00415369                 db    ? ;
.bss:0041536A                 db    ? ;
.bss:0041536B                 db    ? ;
.bss:0041536C                 db    ? ;
.bss:0041536D                 db    ? ;
.bss:0041536E                 db    ? ;
.bss:0041536F                 db    ? ;
.bss:00415370                 db    ? ;
.bss:00415371                 db    ? ;
.bss:00415372                 db    ? ;
.bss:00415373                 db    ? ;
.bss:00415374                 db    ? ;
.bss:00415375                 db    ? ;
.bss:00415376                 db    ? ;
.bss:00415377                 db    ? ;
.bss:00415378                 db    ? ;
.bss:00415379                 db    ? ;
.bss:0041537A                 db    ? ;
.bss:0041537B                 db    ? ;
.bss:0041537C                 db    ? ;
.bss:0041537D                 db    ? ;
.bss:0041537E                 db    ? ;
.bss:0041537F                 db    ? ;
.bss:00415380                 db    ? ;
.bss:00415381                 db    ? ;
.bss:00415382                 db    ? ;
.bss:00415383                 db    ? ;
.bss:00415384                 db    ? ;
.bss:00415385                 db    ? ;
.bss:00415386                 db    ? ;
.bss:00415387                 db    ? ;
.bss:00415388                 db    ? ;
.bss:00415389                 db    ? ;
.bss:0041538A                 db    ? ;
.bss:0041538B                 db    ? ;
.bss:0041538C                 db    ? ;
.bss:0041538D                 db    ? ;
.bss:0041538E                 db    ? ;
.bss:0041538F                 db    ? ;
.bss:00415390                 db    ? ;
.bss:00415391                 db    ? ;
.bss:00415392                 db    ? ;
.bss:00415393                 db    ? ;
.bss:00415394                 db    ? ;
.bss:00415395                 db    ? ;
.bss:00415396                 db    ? ;
.bss:00415397                 db    ? ;
.bss:00415398                 db    ? ;
.bss:00415399                 db    ? ;
.bss:0041539A                 db    ? ;
.bss:0041539B                 db    ? ;
.bss:0041539C                 db    ? ;
.bss:0041539D                 db    ? ;
.bss:0041539E                 db    ? ;
.bss:0041539F                 db    ? ;
.bss:004153A0                 db    ? ;
.bss:004153A1                 db    ? ;
.bss:004153A2                 db    ? ;
.bss:004153A3                 db    ? ;
.bss:004153A4                 db    ? ;
.bss:004153A5                 db    ? ;
.bss:004153A6                 db    ? ;
.bss:004153A7                 db    ? ;
.bss:004153A8                 db    ? ;
.bss:004153A9                 db    ? ;
.bss:004153AA                 db    ? ;
.bss:004153AB                 db    ? ;
.bss:004153AC                 db    ? ;
.bss:004153AD                 db    ? ;
.bss:004153AE                 db    ? ;
.bss:004153AF                 db    ? ;
.bss:004153B0                 db    ? ;
.bss:004153B1                 db    ? ;
.bss:004153B2                 db    ? ;
.bss:004153B3                 db    ? ;
.bss:004153B4                 db    ? ;
.bss:004153B5                 db    ? ;
.bss:004153B6                 db    ? ;
.bss:004153B7                 db    ? ;
.bss:004153B8                 db    ? ;
.bss:004153B9                 db    ? ;
.bss:004153BA                 db    ? ;
.bss:004153BB                 db    ? ;
.bss:004153BC                 db    ? ;
.bss:004153BD                 db    ? ;
.bss:004153BE                 db    ? ;
.bss:004153BF                 db    ? ;
.bss:004153C0                 db    ? ;
.bss:004153C1                 db    ? ;
.bss:004153C2                 db    ? ;
.bss:004153C3                 db    ? ;
.bss:004153C4                 db    ? ;
.bss:004153C5                 db    ? ;
.bss:004153C6                 db    ? ;
.bss:004153C7                 db    ? ;
.bss:004153C8                 db    ? ;
.bss:004153C9                 db    ? ;
.bss:004153CA                 db    ? ;
.bss:004153CB                 db    ? ;
.bss:004153CC                 db    ? ;
.bss:004153CD                 db    ? ;
.bss:004153CE                 db    ? ;
.bss:004153CF                 db    ? ;
.bss:004153D0                 db    ? ;
.bss:004153D1                 db    ? ;
.bss:004153D2                 db    ? ;
.bss:004153D3                 db    ? ;
.bss:004153D4                 db    ? ;
.bss:004153D5                 db    ? ;
.bss:004153D6                 db    ? ;
.bss:004153D7                 db    ? ;
.bss:004153D8                 db    ? ;
.bss:004153D9                 db    ? ;
.bss:004153DA                 db    ? ;
.bss:004153DB                 db    ? ;
.bss:004153DC                 db    ? ;
.bss:004153DD                 db    ? ;
.bss:004153DE                 db    ? ;
.bss:004153DF                 db    ? ;
.bss:004153E0                 db    ? ;
.bss:004153E1                 db    ? ;
.bss:004153E2                 db    ? ;
.bss:004153E3                 db    ? ;
.bss:004153E4                 db    ? ;
.bss:004153E5                 db    ? ;
.bss:004153E6                 db    ? ;
.bss:004153E7                 db    ? ;
.bss:004153E8                 db    ? ;
.bss:004153E9                 db    ? ;
.bss:004153EA                 db    ? ;
.bss:004153EB                 db    ? ;
.bss:004153EC                 db    ? ;
.bss:004153ED                 db    ? ;
.bss:004153EE                 db    ? ;
.bss:004153EF                 db    ? ;
.bss:004153F0                 db    ? ;
.bss:004153F1                 db    ? ;
.bss:004153F2                 db    ? ;
.bss:004153F3                 db    ? ;
.bss:004153F4                 db    ? ;
.bss:004153F5                 db    ? ;
.bss:004153F6                 db    ? ;
.bss:004153F7                 db    ? ;
.bss:004153F8                 db    ? ;
.bss:004153F9                 db    ? ;
.bss:004153FA                 db    ? ;
.bss:004153FB                 db    ? ;
.bss:004153FC                 db    ? ;
.bss:004153FD                 db    ? ;
.bss:004153FE                 db    ? ;
.bss:004153FF                 db    ? ;
.bss:00415400                 db    ? ;
.bss:00415401                 db    ? ;
.bss:00415402                 db    ? ;
.bss:00415403                 db    ? ;
.bss:00415404                 db    ? ;
.bss:00415405                 db    ? ;
.bss:00415406                 db    ? ;
.bss:00415407                 db    ? ;
.bss:00415408                 db    ? ;
.bss:00415409                 db    ? ;
.bss:0041540A                 db    ? ;
.bss:0041540B                 db    ? ;
.bss:0041540C                 db    ? ;
.bss:0041540D                 db    ? ;
.bss:0041540E                 db    ? ;
.bss:0041540F                 db    ? ;
.bss:00415410 dword_415410    dd ?                    ; DATA XREF: .text:loc_409BA1↑o
.bss:00415410                                         ; .text:loc_409BC0↑o ...
.bss:00415414 dword_415414    dd ?                    ; DATA XREF: .text:loc_409C40↑o
.bss:00415414                                         ; .text:0040A0C8↑r ...
.bss:00415418 dword_415418    dd ?                    ; DATA XREF: .text:0040A0C2↑r
.bss:00415418                                         ; sub_40A170+2C↑r
.bss:0041541C dword_41541C    dd ?                    ; DATA XREF: .text:0040A0B6↑r
.bss:0041541C                                         ; sub_40A170+22↑r
.bss:00415420 dword_415420    dd ?                    ; DATA XREF: .text:0040A0D2↑r
.bss:00415420                                         ; sub_40A170+36↑r
.bss:00415424 dword_415424    dd ?                    ; DATA XREF: .text:0040A0E2↑r
.bss:00415424                                         ; sub_40A170+4E↑r
.bss:00415428 dword_415428    dd ?                    ; DATA XREF: .text:0040A0FF↑r
.bss:00415428                                         ; sub_40A170+62↑r
.bss:0041542C dword_41542C    dd ?                    ; DATA XREF: .text:0040A0F5↑r
.bss:0041542C                                         ; sub_40A170+70↑r
.bss:00415430 dword_415430    dd ?                    ; DATA XREF: .text:0040A0D8↑r
.bss:00415430                                         ; sub_40A170+7A↑r
.bss:00415434                 align 10h
.bss:00415440 ; char *Str1
.bss:00415440 Str1            dd ?                    ; DATA XREF: sub_40ABC4:loc_40ABFD↑w
.bss:00415440                                         ; sub_40ABC4:loc_40AD30↑r
.bss:00415444                 align 10h
.bss:00415450 dword_415450    dd ?                    ; DATA XREF: sub_40ABC4+2D↑r
.bss:00415450                                         ; sub_40ABC4+3F↑w
.bss:00415454                 align 10h
.bss:00415460 dword_415460    dd ?                    ; DATA XREF: sub_40B880+100↑r
.bss:00415460                                         ; sub_40B880+308↑w
.bss:00415464                 align 10h
.bss:00415470 ; char *Str
.bss:00415470 Str             dd ?                    ; DATA XREF: sub_40B880:loc_40BBE4↑r
.bss:00415470                                         ; sub_40B880+3B6↑r ...
.bss:00415474                 align 10h
.bss:00415480 dword_415480    dd ?                    ; DATA XREF: sub_40D550+1C↑r
.bss:00415480                                         ; sub_40D550+104↑w
.bss:00415484                 align 10h
.bss:00415490 dword_415490    dd ?                    ; DATA XREF: sub_40D550+B↑r
.bss:00415490                                         ; sub_40D550+71↑w
.bss:00415494                 align 10h
.bss:004154A0 dword_4154A0    dd ?                    ; DATA XREF: sub_40D550+85↑r
.bss:004154A0                                         ; sub_40D550+B9↑w
.bss:004154A4 dword_4154A4    dd ?                    ; DATA XREF: sub_40D550+C4↑w
.bss:004154A8 dword_4154A8    dd ?                    ; DATA XREF: sub_40D550+2E↑o
.bss:004154A8                                         ; sub_40D550+CF↑w
.bss:004154AC dword_4154AC    dd ?                    ; DATA XREF: sub_40D550+DA↑w
.bss:004154B0                 db    ? ;
.bss:004154B1                 db    ? ;
.bss:004154B2                 db    ? ;
.bss:004154B3                 db    ? ;
.bss:004154B4                 db    ? ;
.bss:004154B5                 db    ? ;
.bss:004154B6                 db    ? ;
.bss:004154B7                 db    ? ;
.bss:004154B8                 db    ? ;
.bss:004154B9                 db    ? ;
.bss:004154BA                 db    ? ;
.bss:004154BB                 db    ? ;
.bss:004154BC                 db    ? ;
.bss:004154BD                 db    ? ;
.bss:004154BE                 db    ? ;
.bss:004154BF                 db    ? ;
.bss:004154C0                 db    ? ;
.bss:004154C1                 db    ? ;
.bss:004154C2                 db    ? ;
.bss:004154C3                 db    ? ;
.bss:004154C4                 db    ? ;
.bss:004154C5                 db    ? ;
.bss:004154C6                 db    ? ;
.bss:004154C7                 db    ? ;
.bss:004154C8                 db    ? ;
.bss:004154C9                 db    ? ;
.bss:004154CA                 db    ? ;
.bss:004154CB                 db    ? ;
.bss:004154CC                 db    ? ;
.bss:004154CD                 db    ? ;
.bss:004154CE                 db    ? ;
.bss:004154CF                 db    ? ;
.bss:004154D0                 db    ? ;
.bss:004154D1                 db    ? ;
.bss:004154D2                 db    ? ;
.bss:004154D3                 db    ? ;
.bss:004154D4                 db    ? ;
.bss:004154D5                 db    ? ;
.bss:004154D6                 db    ? ;
.bss:004154D7                 db    ? ;
.bss:004154D8                 db    ? ;
.bss:004154D9                 db    ? ;
.bss:004154DA                 db    ? ;
.bss:004154DB                 db    ? ;
.bss:004154DC                 db    ? ;
.bss:004154DD                 db    ? ;
.bss:004154DE                 db    ? ;
.bss:004154DF                 db    ? ;
.bss:004154E0                 db    ? ;
.bss:004154E1                 db    ? ;
.bss:004154E2                 db    ? ;
.bss:004154E3                 db    ? ;
.bss:004154E4                 db    ? ;
.bss:004154E5                 db    ? ;
.bss:004154E6                 db    ? ;
.bss:004154E7                 db    ? ;
.bss:004154E8                 db    ? ;
.bss:004154E9                 db    ? ;
.bss:004154EA                 db    ? ;
.bss:004154EB                 db    ? ;
.bss:004154EC                 db    ? ;
.bss:004154ED                 db    ? ;
.bss:004154EE                 db    ? ;
.bss:004154EF                 db    ? ;
.bss:004154F0                 db    ? ;
.bss:004154F1                 db    ? ;
.bss:004154F2                 db    ? ;
.bss:004154F3                 db    ? ;
.bss:004154F4                 db    ? ;
.bss:004154F5                 db    ? ;
.bss:004154F6                 db    ? ;
.bss:004154F7                 db    ? ;
.bss:004154F8                 db    ? ;
.bss:004154F9                 db    ? ;
.bss:004154FA                 db    ? ;
.bss:004154FB                 db    ? ;
.bss:004154FC                 db    ? ;
.bss:004154FD                 db    ? ;
.bss:004154FE                 db    ? ;
.bss:004154FF                 db    ? ;
.bss:00415500                 db    ? ;
.bss:00415501                 db    ? ;
.bss:00415502                 db    ? ;
.bss:00415503                 db    ? ;
.bss:00415504                 db    ? ;
.bss:00415505                 db    ? ;
.bss:00415506                 db    ? ;
.bss:00415507                 db    ? ;
.bss:00415508                 db    ? ;
.bss:00415509                 db    ? ;
.bss:0041550A                 db    ? ;
.bss:0041550B                 db    ? ;
.bss:0041550C                 db    ? ;
.bss:0041550D                 db    ? ;
.bss:0041550E                 db    ? ;
.bss:0041550F                 db    ? ;
.bss:00415510                 db    ? ;
.bss:00415511                 db    ? ;
.bss:00415512                 db    ? ;
.bss:00415513                 db    ? ;
.bss:00415514                 db    ? ;
.bss:00415515                 db    ? ;
.bss:00415516                 db    ? ;
.bss:00415517                 db    ? ;
.bss:00415518                 db    ? ;
.bss:00415519                 db    ? ;
.bss:0041551A                 db    ? ;
.bss:0041551B                 db    ? ;
.bss:0041551C                 db    ? ;
.bss:0041551D                 db    ? ;
.bss:0041551E                 db    ? ;
.bss:0041551F                 db    ? ;
.bss:00415520                 db    ? ;
.bss:00415521                 db    ? ;
.bss:00415522                 db    ? ;
.bss:00415523                 db    ? ;
.bss:00415524                 db    ? ;
.bss:00415525                 db    ? ;
.bss:00415526                 db    ? ;
.bss:00415527                 db    ? ;
.bss:00415528                 db    ? ;
.bss:00415529                 db    ? ;
.bss:0041552A                 db    ? ;
.bss:0041552B                 db    ? ;
.bss:0041552C                 db    ? ;
.bss:0041552D                 db    ? ;
.bss:0041552E                 db    ? ;
.bss:0041552F                 db    ? ;
.bss:00415530                 db    ? ;
.bss:00415531                 db    ? ;
.bss:00415532                 db    ? ;
.bss:00415533                 db    ? ;
.bss:00415534                 db    ? ;
.bss:00415535                 db    ? ;
.bss:00415536                 db    ? ;
.bss:00415537                 db    ? ;
.bss:00415538                 db    ? ;
.bss:00415539                 db    ? ;
.bss:0041553A                 db    ? ;
.bss:0041553B                 db    ? ;
.bss:0041553C                 db    ? ;
.bss:0041553D                 db    ? ;
.bss:0041553E                 db    ? ;
.bss:0041553F                 db    ? ;
.bss:00415540                 db    ? ;
.bss:00415541                 db    ? ;
.bss:00415542                 db    ? ;
.bss:00415543                 db    ? ;
.bss:00415544                 db    ? ;
.bss:00415545                 db    ? ;
.bss:00415546                 db    ? ;
.bss:00415547                 db    ? ;
.bss:00415548                 db    ? ;
.bss:00415549                 db    ? ;
.bss:0041554A                 db    ? ;
.bss:0041554B                 db    ? ;
.bss:0041554C                 db    ? ;
.bss:0041554D                 db    ? ;
.bss:0041554E                 db    ? ;
.bss:0041554F                 db    ? ;
.bss:00415550                 db    ? ;
.bss:00415551                 db    ? ;
.bss:00415552                 db    ? ;
.bss:00415553                 db    ? ;
.bss:00415554                 db    ? ;
.bss:00415555                 db    ? ;
.bss:00415556                 db    ? ;
.bss:00415557                 db    ? ;
.bss:00415558                 db    ? ;
.bss:00415559                 db    ? ;
.bss:0041555A                 db    ? ;
.bss:0041555B                 db    ? ;
.bss:0041555C                 db    ? ;
.bss:0041555D                 db    ? ;
.bss:0041555E                 db    ? ;
.bss:0041555F                 db    ? ;
.bss:00415560                 db    ? ;
.bss:00415561                 db    ? ;
.bss:00415562                 db    ? ;
.bss:00415563                 db    ? ;
.bss:00415564                 db    ? ;
.bss:00415565                 db    ? ;
.bss:00415566                 db    ? ;
.bss:00415567                 db    ? ;
.bss:00415568                 db    ? ;
.bss:00415569                 db    ? ;
.bss:0041556A                 db    ? ;
.bss:0041556B                 db    ? ;
.bss:0041556C                 db    ? ;
.bss:0041556D                 db    ? ;
.bss:0041556E                 db    ? ;
.bss:0041556F                 db    ? ;
.bss:00415570                 db    ? ;
.bss:00415571                 db    ? ;
.bss:00415572                 db    ? ;
.bss:00415573                 db    ? ;
.bss:00415574                 db    ? ;
.bss:00415575                 db    ? ;
.bss:00415576                 db    ? ;
.bss:00415577                 db    ? ;
.bss:00415578                 db    ? ;
.bss:00415579                 db    ? ;
.bss:0041557A                 db    ? ;
.bss:0041557B                 db    ? ;
.bss:0041557C                 db    ? ;
.bss:0041557D                 db    ? ;
.bss:0041557E                 db    ? ;
.bss:0041557F                 db    ? ;
.bss:00415580                 db    ? ;
.bss:00415581                 db    ? ;
.bss:00415582                 db    ? ;
.bss:00415583                 db    ? ;
.bss:00415584                 db    ? ;
.bss:00415585                 db    ? ;
.bss:00415586                 db    ? ;
.bss:00415587                 db    ? ;
.bss:00415588                 db    ? ;
.bss:00415589                 db    ? ;
.bss:0041558A                 db    ? ;
.bss:0041558B                 db    ? ;
.bss:0041558C                 db    ? ;
.bss:0041558D                 db    ? ;
.bss:0041558E                 db    ? ;
.bss:0041558F                 db    ? ;
.bss:00415590                 db    ? ;
.bss:00415591                 db    ? ;
.bss:00415592                 db    ? ;
.bss:00415593                 db    ? ;
.bss:00415594                 db    ? ;
.bss:00415595                 db    ? ;
.bss:00415596                 db    ? ;
.bss:00415597                 db    ? ;
.bss:00415598                 db    ? ;
.bss:00415599                 db    ? ;
.bss:0041559A                 db    ? ;
.bss:0041559B                 db    ? ;
.bss:0041559C                 db    ? ;
.bss:0041559D                 db    ? ;
.bss:0041559E                 db    ? ;
.bss:0041559F                 db    ? ;
.bss:004155A0                 db    ? ;
.bss:004155A1                 db    ? ;
.bss:004155A2                 db    ? ;
.bss:004155A3                 db    ? ;
.bss:004155A4                 db    ? ;
.bss:004155A5                 db    ? ;
.bss:004155A6                 db    ? ;
.bss:004155A7                 db    ? ;
.bss:004155A8                 db    ? ;
.bss:004155A9                 db    ? ;
.bss:004155AA                 db    ? ;
.bss:004155AB                 db    ? ;
.bss:004155AC                 db    ? ;
.bss:004155AD                 db    ? ;
.bss:004155AE                 db    ? ;
.bss:004155AF                 db    ? ;
.bss:004155B0                 db    ? ;
.bss:004155B1                 db    ? ;
.bss:004155B2                 db    ? ;
.bss:004155B3                 db    ? ;
.bss:004155B4                 db    ? ;
.bss:004155B5                 db    ? ;
.bss:004155B6                 db    ? ;
.bss:004155B7                 db    ? ;
.bss:004155B8                 db    ? ;
.bss:004155B9                 db    ? ;
.bss:004155BA                 db    ? ;
.bss:004155BB                 db    ? ;
.bss:004155BC                 db    ? ;
.bss:004155BD                 db    ? ;
.bss:004155BE                 db    ? ;
.bss:004155BF                 db    ? ;
.bss:004155C0                 db    ? ;
.bss:004155C1                 db    ? ;
.bss:004155C2                 db    ? ;
.bss:004155C3                 db    ? ;
.bss:004155C4                 db    ? ;
.bss:004155C5                 db    ? ;
.bss:004155C6                 db    ? ;
.bss:004155C7                 db    ? ;
.bss:004155C8                 db    ? ;
.bss:004155C9                 db    ? ;
.bss:004155CA                 db    ? ;
.bss:004155CB                 db    ? ;
.bss:004155CC                 db    ? ;
.bss:004155CD                 db    ? ;
.bss:004155CE                 db    ? ;
.bss:004155CF                 db    ? ;
.bss:004155D0                 db    ? ;
.bss:004155D1                 db    ? ;
.bss:004155D2                 db    ? ;
.bss:004155D3                 db    ? ;
.bss:004155D4                 db    ? ;
.bss:004155D5                 db    ? ;
.bss:004155D6                 db    ? ;
.bss:004155D7                 db    ? ;
.bss:004155D8                 db    ? ;
.bss:004155D9                 db    ? ;
.bss:004155DA                 db    ? ;
.bss:004155DB                 db    ? ;
.bss:004155DC                 db    ? ;
.bss:004155DD                 db    ? ;
.bss:004155DE                 db    ? ;
.bss:004155DF                 db    ? ;
.bss:004155E0                 db    ? ;
.bss:004155E1                 db    ? ;
.bss:004155E2                 db    ? ;
.bss:004155E3                 db    ? ;
.bss:004155E4                 db    ? ;
.bss:004155E5                 db    ? ;
.bss:004155E6                 db    ? ;
.bss:004155E7                 db    ? ;
.bss:004155E8                 db    ? ;
.bss:004155E9                 db    ? ;
.bss:004155EA                 db    ? ;
.bss:004155EB                 db    ? ;
.bss:004155EC                 db    ? ;
.bss:004155ED                 db    ? ;
.bss:004155EE                 db    ? ;
.bss:004155EF                 db    ? ;
.bss:004155F0                 db    ? ;
.bss:004155F1                 db    ? ;
.bss:004155F2                 db    ? ;
.bss:004155F3                 db    ? ;
.bss:004155F4                 db    ? ;
.bss:004155F5                 db    ? ;
.bss:004155F6                 db    ? ;
.bss:004155F7                 db    ? ;
.bss:004155F8                 db    ? ;
.bss:004155F9                 db    ? ;
.bss:004155FA                 db    ? ;
.bss:004155FB                 db    ? ;
.bss:004155FC                 db    ? ;
.bss:004155FD                 db    ? ;
.bss:004155FE                 db    ? ;
.bss:004155FF                 db    ? ;
.bss:00415600                 db    ? ;
.bss:00415601                 db    ? ;
.bss:00415602                 db    ? ;
.bss:00415603                 db    ? ;
.bss:00415604                 db    ? ;
.bss:00415605                 db    ? ;
.bss:00415606                 db    ? ;
.bss:00415607                 db    ? ;
.bss:00415608                 db    ? ;
.bss:00415609                 db    ? ;
.bss:0041560A                 db    ? ;
.bss:0041560B                 db    ? ;
.bss:0041560C                 db    ? ;
.bss:0041560D                 db    ? ;
.bss:0041560E                 db    ? ;
.bss:0041560F                 db    ? ;
.bss:00415610                 db    ? ;
.bss:00415611                 db    ? ;
.bss:00415612                 db    ? ;
.bss:00415613                 db    ? ;
.bss:00415614                 db    ? ;
.bss:00415615                 db    ? ;
.bss:00415616                 db    ? ;
.bss:00415617                 db    ? ;
.bss:00415618                 db    ? ;
.bss:00415619                 db    ? ;
.bss:0041561A                 db    ? ;
.bss:0041561B                 db    ? ;
.bss:0041561C                 db    ? ;
.bss:0041561D                 db    ? ;
.bss:0041561E                 db    ? ;
.bss:0041561F                 db    ? ;
.bss:00415620                 db    ? ;
.bss:00415621                 db    ? ;
.bss:00415622                 db    ? ;
.bss:00415623                 db    ? ;
.bss:00415624                 db    ? ;
.bss:00415625                 db    ? ;
.bss:00415626                 db    ? ;
.bss:00415627                 db    ? ;
.bss:00415628                 db    ? ;
.bss:00415629                 db    ? ;
.bss:0041562A                 db    ? ;
.bss:0041562B                 db    ? ;
.bss:0041562C                 db    ? ;
.bss:0041562D                 db    ? ;
.bss:0041562E                 db    ? ;
.bss:0041562F                 db    ? ;
.bss:00415630                 db    ? ;
.bss:00415631                 db    ? ;
.bss:00415632                 db    ? ;
.bss:00415633                 db    ? ;
.bss:00415634                 db    ? ;
.bss:00415635                 db    ? ;
.bss:00415636                 db    ? ;
.bss:00415637                 db    ? ;
.bss:00415638                 db    ? ;
.bss:00415639                 db    ? ;
.bss:0041563A                 db    ? ;
.bss:0041563B                 db    ? ;
.bss:0041563C                 db    ? ;
.bss:0041563D                 db    ? ;
.bss:0041563E                 db    ? ;
.bss:0041563F                 db    ? ;
.bss:00415640                 db    ? ;
.bss:00415641                 db    ? ;
.bss:00415642                 db    ? ;
.bss:00415643                 db    ? ;
.bss:00415644                 db    ? ;
.bss:00415645                 db    ? ;
.bss:00415646                 db    ? ;
.bss:00415647                 db    ? ;
.bss:00415648                 db    ? ;
.bss:00415649                 db    ? ;
.bss:0041564A                 db    ? ;
.bss:0041564B                 db    ? ;
.bss:0041564C                 db    ? ;
.bss:0041564D                 db    ? ;
.bss:0041564E                 db    ? ;
.bss:0041564F                 db    ? ;
.bss:00415650                 db    ? ;
.bss:00415651                 db    ? ;
.bss:00415652                 db    ? ;
.bss:00415653                 db    ? ;
.bss:00415654                 db    ? ;
.bss:00415655                 db    ? ;
.bss:00415656                 db    ? ;
.bss:00415657                 db    ? ;
.bss:00415658                 db    ? ;
.bss:00415659                 db    ? ;
.bss:0041565A                 db    ? ;
.bss:0041565B                 db    ? ;
.bss:0041565C                 db    ? ;
.bss:0041565D                 db    ? ;
.bss:0041565E                 db    ? ;
.bss:0041565F                 db    ? ;
.bss:00415660                 db    ? ;
.bss:00415661                 db    ? ;
.bss:00415662                 db    ? ;
.bss:00415663                 db    ? ;
.bss:00415664                 db    ? ;
.bss:00415665                 db    ? ;
.bss:00415666                 db    ? ;
.bss:00415667                 db    ? ;
.bss:00415668                 db    ? ;
.bss:00415669                 db    ? ;
.bss:0041566A                 db    ? ;
.bss:0041566B                 db    ? ;
.bss:0041566C                 db    ? ;
.bss:0041566D                 db    ? ;
.bss:0041566E                 db    ? ;
.bss:0041566F                 db    ? ;
.bss:00415670                 db    ? ;
.bss:00415671                 db    ? ;
.bss:00415672                 db    ? ;
.bss:00415673                 db    ? ;
.bss:00415674                 db    ? ;
.bss:00415675                 db    ? ;
.bss:00415676                 db    ? ;
.bss:00415677                 db    ? ;
.bss:00415678                 db    ? ;
.bss:00415679                 db    ? ;
.bss:0041567A                 db    ? ;
.bss:0041567B                 db    ? ;
.bss:0041567C                 db    ? ;
.bss:0041567D                 db    ? ;
.bss:0041567E                 db    ? ;
.bss:0041567F                 db    ? ;
.bss:00415680                 db    ? ;
.bss:00415681                 db    ? ;
.bss:00415682                 db    ? ;
.bss:00415683                 db    ? ;
.bss:00415684                 db    ? ;
.bss:00415685                 db    ? ;
.bss:00415686                 db    ? ;
.bss:00415687                 db    ? ;
.bss:00415688                 db    ? ;
.bss:00415689                 db    ? ;
.bss:0041568A                 db    ? ;
.bss:0041568B                 db    ? ;
.bss:0041568C                 db    ? ;
.bss:0041568D                 db    ? ;
.bss:0041568E                 db    ? ;
.bss:0041568F                 db    ? ;
.bss:00415690                 db    ? ;
.bss:00415691                 db    ? ;
.bss:00415692                 db    ? ;
.bss:00415693                 db    ? ;
.bss:00415694                 db    ? ;
.bss:00415695                 db    ? ;
.bss:00415696                 db    ? ;
.bss:00415697                 db    ? ;
.bss:00415698                 db    ? ;
.bss:00415699                 db    ? ;
.bss:0041569A                 db    ? ;
.bss:0041569B                 db    ? ;
.bss:0041569C                 db    ? ;
.bss:0041569D                 db    ? ;
.bss:0041569E                 db    ? ;
.bss:0041569F                 db    ? ;
.bss:004156A0 dword_4156A0    dd ?                    ; DATA XREF: sub_40E1B0+7↑r
.bss:004156A0                                         ; sub_40E1B0+2B↑w ...
.bss:004156A4                 align 10h
.bss:004156B0 ; struct _SYSTEM_INFO SystemInfo
.bss:004156B0 SystemInfo      _SYSTEM_INFO <?>        ; DATA XREF: sub_40E1B0+21↑o
.bss:004156B0                                         ; sub_40E1B0+33↑o
.bss:004156D4                 align 10h
.bss:004156E0 dword_4156E0    dd ?                    ; DATA XREF: sub_40E5C0+3E↑r
.bss:004156E0                                         ; sub_40E5C0+F5↑w
.bss:004156E4 dword_4156E4    dd ?                    ; DATA XREF: sub_40E5C0+38↑r
.bss:004156E4                                         ; sub_40E5C0+EB↑w
.bss:004156E8                 align 10h
.bss:004156F0 dword_4156F0    dd ?                    ; DATA XREF: sub_40F3C0+8↑r
.bss:004156F0                                         ; sub_40F4D0:loc_40F552↑w ...
.bss:004156F4                 align 10h
.bss:00415700 ; struct _OSVERSIONINFOA VersionInformation
.bss:00415700 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_40F4D0:loc_40F4F0↑o
.bss:00415700                                         ; sub_40F4D0+2C↑w ...
.bss:00415794 word_415794     dw ?                    ; DATA XREF: sub_40F4D0:loc_40F583↑r
.bss:00415796                 align 4
.bss:00415798 word_415798     dw ?                    ; DATA XREF: .text:loc_40EF46↑r
.bss:00415798                                         ; .text:0040EF74↑r ...
.bss:0041579A byte_41579A     db ?                    ; DATA XREF: .text:0040EF05↑r
.bss:0041579B                 align 10h
.bss:004157A0 dword_4157A0    dd ?                    ; DATA XREF: sub_40F4D0+6↑r
.bss:004157A0                                         ; sub_40F4D0+75↑w
.bss:004157A4                 align 10h
.bss:004157B0 ; LARGE_INTEGER Frequency
.bss:004157B0 Frequency       LARGE_INTEGER <?>       ; DATA XREF: sub_410520+D↑r
.bss:004157B0                                         ; sub_410520:loc_410540↑o ...
.bss:004157B8                 align 10h
.bss:004157C0 dword_4157C0    dd ?                    ; DATA XREF: sub_410AE0+6E↑r
.bss:004157C0                                         ; sub_410AE0+9A↑r ...
.bss:004157C4 dword_4157C4    dd ?                    ; DATA XREF: sub_410AE0:loc_410B48↑r
.bss:004157C4                                         ; sub_410AE0+A0↑r ...
.bss:004157C8                 align 10h
.bss:004157D0 dword_4157D0    dd ?                    ; DATA XREF: sub_410F90↑r
.bss:004157D0                                         ; .text:loc_4110E2↑w
.bss:004157D4                 align 10h
.bss:004157E0 dword_4157E0    dd ?                    ; DATA XREF: sub_402210+1F↑r
.bss:004157E0                                         ; sub_402210+4D↑r ...
.bss:004157E4                 align 20h
.bss:00415800 dword_415800    dd ?                    ; DATA XREF: sub_406320+71↑w
.bss:00415800                                         ; .text:00406421↑w
.bss:00415804                 align 10h
.bss:00415810 dword_415810    dd ?                    ; CODE XREF: sub_40ABC4+63↑p
.bss:00415810                                         ; DATA XREF: sub_40AAC0+1E↑r ...
.bss:00415814                 align 10h
.bss:00415820 dword_415820    dd ?                    ; DATA XREF: sub_40AAC0+4E↑w
.bss:00415820                                         ; sub_40ABC4+AB↑w
.bss:00415824                 db    ? ;
.bss:00415825                 db    ? ;
.bss:00415826                 db    ? ;
.bss:00415827                 db    ? ;
.bss:00415828                 db    ? ;
.bss:00415829                 db    ? ;
.bss:0041582A                 db    ? ;
.bss:0041582B                 db    ? ;
.bss:0041582C                 db    ? ;
.bss:0041582D                 db    ? ;
.bss:0041582E                 db    ? ;
.bss:0041582F                 db    ? ;
.bss:00415830                 db    ? ;
.bss:00415831                 db    ? ;
.bss:00415832                 db    ? ;
.bss:00415833                 db    ? ;
.bss:00415834                 db    ? ;
.bss:00415835                 db    ? ;
.bss:00415836                 db    ? ;
.bss:00415837                 db    ? ;
.bss:00415838                 db    ? ;
.bss:00415839                 db    ? ;
.bss:0041583A                 db    ? ;
.bss:0041583B                 db    ? ;
.bss:0041583C                 db    ? ;
.bss:0041583D                 db    ? ;
.bss:0041583E                 db    ? ;
.bss:0041583F                 db    ? ;
.bss:00415840                 db    ? ;
.bss:00415841                 db    ? ;
.bss:00415842                 db    ? ;
.bss:00415843                 db    ? ;
.bss:00415844                 db    ? ;
.bss:00415845                 db    ? ;
.bss:00415846                 db    ? ;
.bss:00415847                 db    ? ;
.bss:00415848                 db    ? ;
.bss:00415849                 db    ? ;
.bss:0041584A                 db    ? ;
.bss:0041584B                 db    ? ;
.bss:0041584C                 db    ? ;
.bss:0041584D                 db    ? ;
.bss:0041584E                 db    ? ;
.bss:0041584F                 db    ? ;
.bss:00415850 dword_415850    dd ?                    ; DATA XREF: sub_40ABC4+13↑r
.bss:00415854                 align 800h
.bss:00415854 _bss            ends
.bss:00415854
.idata:00416000 ; Section 4. (virtual address 00016000)
.idata:00416000 ; Virtual size                  : 00000F34 (   3892.)
.idata:00416000 ; Section size in file          : 00001000 (   4096.)
.idata:00416000 ; Offset to raw data for section: 00013600
.idata:00416000 ; Flags C0000040: Data Readable Writable
.idata:00416000 ; Alignment     : default
.idata:00416000 ; ===========================================================================
.idata:00416000
.idata:00416000 ; Segment type: Externs
.idata:00416000 ; _idata
.idata:00416000
.idata:00416001
.idata:004162E8 ;
.idata:004162E8 ; Imports from libintl3.dll
.idata:004162E8 ;
.idata:004162E8                 extrn libintl_bindtextdomain:dword
.idata:004162E8                                         ; CODE XREF: sub_402550+4C↑p
.idata:004162E8                                         ; DATA XREF: sub_402550+4C↑r ...
.idata:004162EC                 extrn libintl_gettext:dword
.idata:004162EC                                         ; CODE XREF: sub_402210+13↑p
.idata:004162EC                                         ; sub_402210+47↑p ...
.idata:004162F0                 extrn libintl_ngettext:dword
.idata:004162F0                                         ; CODE XREF: sub_402DF0+21A↑p
.idata:004162F0                                         ; sub_402DF0+316↑p
.idata:004162F0                                         ; DATA XREF: ...
.idata:004162F4                 extrn libintl_textdomain:dword
.idata:004162F4                                         ; CODE XREF: sub_402550+59↑p
.idata:004162F4                                         ; DATA XREF: sub_402550+59↑r ...
.idata:004162F8
.idata:00416300 ;
.idata:00416300 ; Imports from ADVAPI32.DLL
.idata:00416300 ;
.idata:00416300 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:00416300                 extrn __imp_RegCloseKey:dword
.idata:00416300                                         ; DATA XREF: RegCloseKey↑r
.idata:00416304 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:00416304                 extrn __imp_RegOpenKeyExA:dword
.idata:00416304                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:00416308 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:00416308                 extrn __imp_RegQueryValueExA:dword
.idata:00416308                                         ; DATA XREF: RegQueryValueExA↑r
.idata:0041630C
.idata:00416314 ;
.idata:00416314 ; Imports from KERNEL32.dll
.idata:00416314 ;
.idata:00416314 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:00416314                 extrn __imp_AreFileApisANSI:dword
.idata:00416314                                         ; DATA XREF: AreFileApisANSI↑r
.idata:00416318 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:00416318                 extrn __imp_CloseHandle:dword
.idata:00416318                                         ; DATA XREF: CloseHandle↑r
.idata:0041631C ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:0041631C                 extrn __imp_CreateDirectoryA:dword
.idata:0041631C                                         ; DATA XREF: CreateDirectoryA↑r
.idata:00416320 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:00416320                 extrn __imp_CreateFileA:dword
.idata:00416320                                         ; DATA XREF: CreateFileA↑r
.idata:00416324 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:00416324                 extrn __imp_DeviceIoControl:dword
.idata:00416324                                         ; DATA XREF: DeviceIoControl↑r
.idata:00416328 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00416328                 extrn __imp_ExitProcess:dword
.idata:00416328                                         ; DATA XREF: ExitProcess↑r
.idata:0041632C ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:0041632C                 extrn __imp_FindClose:dword
.idata:0041632C                                         ; DATA XREF: FindClose↑r
.idata:00416330 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00416330                 extrn __imp_FindFirstFileA:dword
.idata:00416330                                         ; DATA XREF: FindFirstFileA↑r
.idata:00416334 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00416334                 extrn __imp_FindNextFileA:dword
.idata:00416334                                         ; DATA XREF: FindNextFileA↑r
.idata:00416338 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00416338                 extrn __imp_FreeLibrary:dword
.idata:00416338                                         ; DATA XREF: FreeLibrary↑r
.idata:0041633C ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041633C                 extrn __imp_GetCurrentDirectoryA:dword
.idata:0041633C                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:00416340 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:00416340                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:00416340                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:00416344 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:00416344                 extrn __imp_GetDriveTypeA:dword
.idata:00416344                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00416348 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00416348                 extrn __imp_GetFileAttributesA:dword
.idata:00416348                                         ; DATA XREF: GetFileAttributesA↑r
.idata:0041634C ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:0041634C                 extrn __imp_GetFileInformationByHandle:dword
.idata:0041634C                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:00416350 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:00416350                 extrn __imp_GetFileSize:dword
.idata:00416350                                         ; DATA XREF: GetFileSize↑r
.idata:00416354 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:00416354                 extrn __imp_GetFileType:dword
.idata:00416354                                         ; DATA XREF: GetFileType↑r
.idata:00416358 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00416358                 extrn __imp_GetFullPathNameA:dword
.idata:00416358                                         ; DATA XREF: GetFullPathNameA↑r
.idata:0041635C ; DWORD (__stdcall *GetLastError)()
.idata:0041635C                 extrn __imp_GetLastError:dword
.idata:0041635C                                         ; DATA XREF: GetLastError↑r
.idata:00416360 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00416360                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:00416360                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:00416364 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:00416364                 extrn __imp_GetModuleFileNameA:dword
.idata:00416364                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00416368 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00416368                 extrn __imp_GetModuleHandleA:dword
.idata:00416368                                         ; DATA XREF: GetModuleHandleA↑r
.idata:0041636C ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:0041636C                 extrn __imp_GetProcAddress:dword
.idata:0041636C                                         ; DATA XREF: GetProcAddress↑r
.idata:00416370 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:00416370                 extrn __imp_GetProcessHeap:dword
.idata:00416370                                         ; DATA XREF: GetProcessHeap↑r
.idata:00416374 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:00416374                 extrn __imp_GetShortPathNameA:dword
.idata:00416374                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00416378 ; void (__stdcall *GetSystemInfo)(LPSYSTEM_INFO lpSystemInfo)
.idata:00416378                 extrn __imp_GetSystemInfo:dword
.idata:00416378                                         ; DATA XREF: GetSystemInfo↑r
.idata:0041637C ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:0041637C                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:0041637C                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00416380 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00416380                 extrn __imp_GetTimeZoneInformation:dword
.idata:00416380                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:00416384 ; DWORD (__stdcall *GetVersion)()
.idata:00416384                 extrn __imp_GetVersion:dword
.idata:00416384                                         ; DATA XREF: GetVersion↑r
.idata:00416388 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00416388                 extrn __imp_GetVersionExA:dword
.idata:00416388                                         ; DATA XREF: GetVersionExA↑r
.idata:0041638C ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:0041638C                 extrn __imp_GetVolumeInformationA:dword
.idata:0041638C                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00416390 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00416390                 extrn __imp_HeapAlloc:dword
.idata:00416390                                         ; DATA XREF: HeapAlloc↑r
.idata:00416394 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:00416394                 extrn __imp_HeapFree:dword
.idata:00416394                                         ; DATA XREF: HeapFree↑r
.idata:00416398 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:00416398                 extrn __imp_LoadLibraryA:dword
.idata:00416398                                         ; DATA XREF: LoadLibraryA↑r
.idata:0041639C ; BOOL (__stdcall *LockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.idata:0041639C                 extrn __imp_LockFile:dword
.idata:0041639C                                         ; DATA XREF: LockFile↑r
.idata:004163A0 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:004163A0                 extrn __imp_MultiByteToWideChar:dword
.idata:004163A0                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:004163A4 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:004163A4                 extrn __imp_PeekNamedPipe:dword
.idata:004163A4                                         ; DATA XREF: PeekNamedPipe↑r
.idata:004163A8 ; BOOL (__stdcall *QueryPerformanceFrequency)(LARGE_INTEGER *lpFrequency)
.idata:004163A8                 extrn __imp_QueryPerformanceFrequency:dword
.idata:004163A8                                         ; DATA XREF: QueryPerformanceFrequency↑r
.idata:004163AC ; BOOL (__stdcall *SetEndOfFile)(HANDLE hFile)
.idata:004163AC                 extrn __imp_SetEndOfFile:dword
.idata:004163AC                                         ; DATA XREF: SetEndOfFile↑r
.idata:004163B0 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:004163B0                 extrn __imp_SetErrorMode:dword
.idata:004163B0                                         ; DATA XREF: SetErrorMode↑r
.idata:004163B4 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:004163B4                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:004163B4                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:004163B8 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:004163B8                 extrn __imp_UnlockFile:dword
.idata:004163B8                                         ; DATA XREF: UnlockFile↑r
.idata:004163BC ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:004163BC                 extrn __imp_lstrcmpiA:dword
.idata:004163BC                                         ; DATA XREF: lstrcmpiA↑r
.idata:004163C0 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:004163C0                 extrn __imp_lstrcpyA:dword
.idata:004163C0                                         ; DATA XREF: lstrcpyA↑r
.idata:004163C4
.idata:004163CC ;
.idata:004163CC ; Imports from msvcrt.dll
.idata:004163CC ;
.idata:004163CC ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:004163CC                 extrn __imp__chmod:dword
.idata:004163CC                                         ; DATA XREF: _chmod↑r
.idata:004163D0 ; int (__cdecl *_close)(int FileHandle)
.idata:004163D0                 extrn __imp__close:dword
.idata:004163D0                                         ; DATA XREF: _close↑r
.idata:004163D4 ; int (__cdecl *_dup)(int FileHandle)
.idata:004163D4                 extrn __imp__dup:dword  ; DATA XREF: _dup↑r
.idata:004163D8 ; int (__cdecl *_dup2)(int FileHandleSrc, int FileHandleDst)
.idata:004163D8                 extrn __imp__dup2:dword ; DATA XREF: _dup2↑r
.idata:004163DC ; int (__cdecl *_getpid)()
.idata:004163DC                 extrn __imp__getpid:dword
.idata:004163DC                                         ; DATA XREF: _getpid↑r
.idata:004163E0 ; int (__cdecl *_isatty)(int FileHandle)
.idata:004163E0                 extrn __imp__isatty:dword
.idata:004163E0                                         ; DATA XREF: _isatty↑r
.idata:004163E4 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:004163E4                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:004163E8 ; int (__cdecl *_read)(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.idata:004163E8                 extrn __imp__read:dword ; DATA XREF: _read↑r
.idata:004163EC ; char *(__cdecl *_strdup)(const char *String)
.idata:004163EC                 extrn __imp__strdup:dword
.idata:004163EC                                         ; DATA XREF: _strdup↑r
.idata:004163F0 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:004163F0                 extrn __imp__stricmp:dword
.idata:004163F0                                         ; DATA XREF: _stricmp↑r
.idata:004163F4 ; int (__cdecl *_write)(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.idata:004163F4                 extrn __imp__write:dword
.idata:004163F4                                         ; DATA XREF: _write↑r
.idata:004163F8
.idata:00416400 ;
.idata:00416400 ; Imports from MSVCP60.DLL
.idata:00416400 ;
.idata:00416400 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00416400                 extrn __imp_mbrtowc:dword
.idata:00416400                                         ; DATA XREF: mbrtowc↑r
.idata:00416404
.idata:0041640C ;
.idata:0041640C ; Imports from msvcrt.dll
.idata:0041640C ;
.idata:0041640C                 extrn __imp___getmainargs:dword
.idata:0041640C                                         ; DATA XREF: __getmainargs↑r
.idata:00416410 ; int _mb_cur_max
.idata:00416410                 extrn __mb_cur_max:dword
.idata:00416410                                         ; DATA XREF: sub_403BE0+57↑r
.idata:00416410                                         ; sub_403BE0+147↑r ...
.idata:00416414 ; char ***(__cdecl *__p__environ)()
.idata:00416414                 extrn __imp___p__environ:dword
.idata:00416414                                         ; DATA XREF: __p__environ↑r
.idata:00416418 ; int *(__cdecl *__p__fmode)()
.idata:00416418                 extrn __imp___p__fmode:dword
.idata:00416418                                         ; DATA XREF: __p__fmode↑r
.idata:0041641C                 extrn __pioinfo:dword   ; DATA XREF: sub_40E320:loc_40E388↑r
.idata:0041641C                                         ; sub_40E320:loc_40E3B3↑r ...
.idata:00416420 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00416420                 extrn __set_app_type:dword
.idata:00416420                                         ; CODE XREF: start+D↑p
.idata:00416420                                         ; .text:0040102D↑p
.idata:00416420                                         ; DATA XREF: ...
.idata:00416424                 extrn __imp__assert:dword
.idata:00416424                                         ; DATA XREF: _assert↑r
.idata:00416428 ; void (__cdecl *_cexit)()
.idata:00416428                 extrn __imp__cexit:dword
.idata:00416428                                         ; DATA XREF: _cexit↑r
.idata:0041642C ; int (__cdecl *_close_0)(int FileHandle)
.idata:0041642C                 extrn __imp__close_0:dword
.idata:0041642C                                         ; DATA XREF: _close_0↑r
.idata:00416430 ; int (__cdecl *_commit)(int FileHandle)
.idata:00416430                 extrn __imp__commit:dword
.idata:00416430                                         ; DATA XREF: _commit↑r
.idata:00416434 ; int *(__cdecl *_errno)()
.idata:00416434                 extrn __imp__errno:dword
.idata:00416434                                         ; DATA XREF: _errno↑r
.idata:00416438 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:00416438                 extrn __imp__fdopen:dword
.idata:00416438                                         ; DATA XREF: _fdopen↑r
.idata:0041643C ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:0041643C                 extrn __imp__filelengthi64:dword
.idata:0041643C                                         ; DATA XREF: _filelengthi64↑r
.idata:00416440 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:00416440                 extrn __imp__flsbuf:dword
.idata:00416440                                         ; DATA XREF: _flsbuf↑r
.idata:00416444 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:00416444                 extrn __imp__get_osfhandle:dword
.idata:00416444                                         ; DATA XREF: _get_osfhandle↑r
.idata:00416448 ; FILE iob[]
.idata:00416448                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00416448                                         ; sub_401080+75↑r ...
.idata:0041644C ; int (__cdecl *_isctype)(int C, int Type)
.idata:0041644C                 extrn __imp__isctype:dword
.idata:0041644C                                         ; DATA XREF: _isctype↑r
.idata:00416450 ; __int64 (__cdecl *_lseeki64)(int FileHandle, __int64 Offset, int Origin)
.idata:00416450                 extrn __imp__lseeki64:dword
.idata:00416450                                         ; DATA XREF: _lseeki64↑r
.idata:00416454 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:00416454                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:00416454                                         ; DATA XREF: .text:0040106C↑r
.idata:00416458 ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:00416458                 extrn __imp__open_0:dword
.idata:00416458                                         ; DATA XREF: _open_0↑r
.idata:0041645C ; const unsigned __int16 *pctype
.idata:0041645C                 extrn _pctype:dword     ; DATA XREF: sub_403BE0:loc_403D00↑r
.idata:0041645C                                         ; sub_403BE0:loc_403D70↑r ...
.idata:00416460 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:00416460                 extrn __imp__setmode:dword
.idata:00416460                                         ; DATA XREF: _setmode↑r
.idata:00416464 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:00416464                 extrn __imp__stricmp_0:dword
.idata:00416464                                         ; DATA XREF: _stricmp_0↑r
.idata:00416468 ; void (__cdecl __noreturn *abort)()
.idata:00416468                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0041646C ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0041646C                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0041646C                                         ; DATA XREF: sub_401040+C↑r
.idata:00416470 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:00416470                 extrn __imp_calloc:dword
.idata:00416470                                         ; DATA XREF: calloc↑r
.idata:00416474 ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:00416474                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:00416478 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00416478                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0041647C ; int (__cdecl *fclose)(FILE *Stream)
.idata:0041647C                 extrn __imp_fclose:dword
.idata:0041647C                                         ; DATA XREF: fclose↑r
.idata:00416480 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00416480                 extrn __imp_fflush:dword
.idata:00416480                                         ; DATA XREF: fflush↑r
.idata:00416484 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:00416484                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00416488 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00416488                 extrn __imp_fprintf:dword
.idata:00416488                                         ; DATA XREF: fprintf↑r
.idata:0041648C ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0041648C                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00416490 ; void (__cdecl *free)(void *Block)
.idata:00416490                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00416494 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00416494                 extrn __imp_getenv:dword
.idata:00416494                                         ; DATA XREF: getenv↑r
.idata:00416498 ; int (__cdecl *isalpha)(int C)
.idata:00416498                 extrn __imp_isalpha:dword
.idata:00416498                                         ; DATA XREF: isalpha↑r
.idata:0041649C ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0041649C                 extrn __imp_iswctype:dword
.idata:0041649C                                         ; DATA XREF: iswctype↑r
.idata:004164A0 ; struct lconv *(__cdecl *localeconv)()
.idata:004164A0                 extrn __imp_localeconv:dword
.idata:004164A0                                         ; DATA XREF: localeconv↑r
.idata:004164A4 ; void *(__cdecl *malloc)(size_t Size)
.idata:004164A4                 extrn __imp_malloc:dword
.idata:004164A4                                         ; DATA XREF: malloc↑r
.idata:004164A8 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004164A8                 extrn __imp_memcpy:dword
.idata:004164A8                                         ; DATA XREF: memcpy↑r
.idata:004164AC ; void *(__cdecl *memmove)(void *, const void *Src, size_t Size)
.idata:004164AC                 extrn __imp_memmove:dword
.idata:004164AC                                         ; DATA XREF: memmove↑r
.idata:004164B0 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004164B0                 extrn __imp_memset:dword
.idata:004164B0                                         ; DATA XREF: memset↑r
.idata:004164B4 ; int (*printf)(const char *const Format, ...)
.idata:004164B4                 extrn __imp_printf:dword
.idata:004164B4                                         ; DATA XREF: printf↑r
.idata:004164B8 ; int (__cdecl *raise)(int Signal)
.idata:004164B8                 extrn __imp_raise:dword ; DATA XREF: raise↑r
.idata:004164BC ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004164BC                 extrn __imp_realloc:dword
.idata:004164BC                                         ; DATA XREF: realloc↑r
.idata:004164C0 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004164C0                 extrn __imp_setlocale:dword
.idata:004164C0                                         ; DATA XREF: setlocale↑r
.idata:004164C4 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004164C4                 extrn __imp_signal:dword
.idata:004164C4                                         ; DATA XREF: signal↑r
.idata:004164C8 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:004164C8                 extrn __imp_sprintf:dword
.idata:004164C8                                         ; DATA XREF: sprintf↑r
.idata:004164CC ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:004164CC                 extrn __imp_sscanf:dword
.idata:004164CC                                         ; DATA XREF: sscanf↑r
.idata:004164D0 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:004164D0                 extrn __imp_strcat:dword
.idata:004164D0                                         ; DATA XREF: strcat↑r
.idata:004164D4 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:004164D4                 extrn __imp_strchr:dword
.idata:004164D4                                         ; DATA XREF: strchr↑r
.idata:004164D8 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:004164D8                 extrn __imp_strcmp:dword
.idata:004164D8                                         ; DATA XREF: strcmp↑r
.idata:004164DC ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:004164DC                 extrn __imp_strcpy:dword
.idata:004164DC                                         ; DATA XREF: strcpy↑r
.idata:004164E0 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:004164E0                 extrn __imp_strerror:dword
.idata:004164E0                                         ; DATA XREF: strerror↑r
.idata:004164E4 ; size_t (__cdecl *strlen)(const char *Str)
.idata:004164E4                 extrn __imp_strlen:dword
.idata:004164E4                                         ; DATA XREF: strlen↑r
.idata:004164E8 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:004164E8                 extrn __imp_strncmp:dword
.idata:004164E8                                         ; DATA XREF: strncmp↑r
.idata:004164EC ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:004164EC                 extrn __imp_strncpy:dword
.idata:004164EC                                         ; DATA XREF: strncpy↑r
.idata:004164F0 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:004164F0                 extrn __imp_strpbrk:dword
.idata:004164F0                                         ; DATA XREF: strpbrk↑r
.idata:004164F4 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:004164F4                 extrn __imp_strrchr:dword
.idata:004164F4                                         ; DATA XREF: strrchr↑r
.idata:004164F8 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:004164F8                 extrn __imp_strspn:dword
.idata:004164F8                                         ; DATA XREF: strspn↑r
.idata:004164FC ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:004164FC                 extrn __imp_strstr:dword
.idata:004164FC                                         ; DATA XREF: strstr↑r
.idata:00416500 ; __time32_t (__cdecl *time)(__time32_t *const Time)
.idata:00416500                 extrn __imp_time:dword  ; DATA XREF: time↑r
.idata:00416504 ; int (__cdecl *tolower)(int C)
.idata:00416504                 extrn __imp_tolower:dword
.idata:00416504                                         ; DATA XREF: tolower↑r
.idata:00416508 ; int (__cdecl *toupper)(int C)
.idata:00416508                 extrn __imp_toupper:dword
.idata:00416508                                         ; DATA XREF: toupper↑r
.idata:0041650C ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0041650C                 extrn __imp_vfprintf:dword
.idata:0041650C                                         ; DATA XREF: vfprintf↑r
.idata:00416510
.idata:00416518 ;
.idata:00416518 ; Imports from OLE32.dll
.idata:00416518 ;
.idata:00416518 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:00416518                 extrn __imp_CoCreateInstance:dword
.idata:00416518                                         ; DATA XREF: CoCreateInstance↑r
.idata:0041651C ; void (__stdcall *CoUninitialize)()
.idata:0041651C                 extrn __imp_CoUninitialize:dword
.idata:0041651C                                         ; DATA XREF: CoUninitialize↑r
.idata:00416520 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:00416520                 extrn __imp_OleInitialize:dword
.idata:00416520                                         ; DATA XREF: OleInitialize↑r
.idata:00416524
.idata:00416524
.idata:00416524
.idata:00416524                 end start
